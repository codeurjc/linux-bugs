commit 12952a23a5da6459aaaaa3ae4bc8ce8fef952ef5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Oct 25 11:59:04 2023 +0200

    Linux 5.15.137
    
    Link: https://lore.kernel.org/r/20231023104820.849461819@linuxfoundation.org
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Ricardo B. Marliere <ricardo@marliere.net>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Link: https://lore.kernel.org/r/20231024083327.980887231@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Slade Watkins <srw@sladewatkins.net>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dff33880d40ac6e8115822e1602dbbac9e1e1f28
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Sep 15 19:20:41 2023 +0800

    xfrm6: fix inet6_dev refcount underflow problem
    
    [ Upstream commit cc9b364bb1d58d3dae270c7a931a8cc717dc2b3b ]
    
    There are race conditions that may lead to inet6_dev refcount underflow
    in xfrm6_dst_destroy() and rt6_uncached_list_flush_dev().
    
    One of the refcount underflow bugs is shown below:
            (cpu 1)                 |       (cpu 2)
    xfrm6_dst_destroy()             |
      ...                           |
      in6_dev_put()                 |
                                    |  rt6_uncached_list_flush_dev()
      ...                           |    ...
                                    |    in6_dev_put()
      rt6_uncached_list_del()       |    ...
      ...                           |
    
    xfrm6_dst_destroy() calls rt6_uncached_list_del() after in6_dev_put(),
    so rt6_uncached_list_flush_dev() has a chance to call in6_dev_put()
    again for the same inet6_dev.
    
    Fix it by moving in6_dev_put() after rt6_uncached_list_del() in
    xfrm6_dst_destroy().
    
    Fixes: 510c321b5571 ("xfrm: reuse uncached_list to track xdsts")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a9d05a4f1c3f2fdd6719c26e8da68f98a8d8450
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Oct 11 09:31:44 2023 -0700

    Bluetooth: hci_sock: Correctly bounds check and pad HCI_MON_NEW_INDEX name
    
    commit cb3871b1cd135a6662b732fbc6b3db4afcdb4a64 upstream.
    
    The code pattern of memcpy(dst, src, strlen(src)) is almost always
    wrong. In this case it is wrong because it leaves memory uninitialized
    if it is less than sizeof(ni->name), and overflows ni->name when longer.
    
    Normally strtomem_pad() could be used here, but since ni->name is a
    trailing array in struct hci_mon_new_index, compilers that don't support
    -fstrict-flex-arrays=3 can't tell how large this array is via
    __builtin_object_size(). Instead, open-code the helper and use sizeof()
    since it will work correctly.
    
    Additionally mark ni->name as __nonstring since it appears to not be a
    %NUL terminated C string.
    
    Cc: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Edward AD <twuufnxlz@gmail.com>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: Johan Hedberg <johan.hedberg@gmail.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: linux-bluetooth@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Fixes: 18f547f3fc07 ("Bluetooth: hci_sock: fix slab oob read in create_monitor_event")
    Link: https://lore.kernel.org/lkml/202310110908.F2639D3276@keescook/
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6df96ee0b453373e2b786d636628c00449f834f
Author: Edward AD <twuufnxlz@gmail.com>
Date:   Tue Oct 10 13:36:57 2023 +0800

    Bluetooth: hci_sock: fix slab oob read in create_monitor_event
    
    commit 18f547f3fc074500ab5d419cf482240324e73a7e upstream.
    
    When accessing hdev->name, the actual string length should prevail
    
    Reported-by: syzbot+c90849c50ed209d77689@syzkaller.appspotmail.com
    Fixes: dcda165706b9 ("Bluetooth: hci_core: Fix build warnings")
    Signed-off-by: Edward AD <twuufnxlz@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c08d609fb2b6fc748aaef8bb55b67b840e5e8abc
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Sep 13 09:04:29 2023 +0300

    phy: mapphone-mdm6600: Fix pinctrl_pm handling for sleep pins
    
    [ Upstream commit 3b384cc74b00b5ac21d18e4c1efc3c1da5300971 ]
    
    Looks like the driver sleep pins configuration is unusable. Adding the
    sleep pins causes the usb phy to not respond. We need to use the default
    pins in probe, and only set sleep pins at phy_mdm6600_device_power_off().
    
    As the modem can also be booted to a serial port mode for firmware
    flashing, let's make the pin changes limited to probe and remove. For
    probe, we get the default pins automatically. We only need to set the
    sleep pins in phy_mdm6600_device_power_off() to prevent the modem from
    waking up because the gpio line glitches.
    
    If it turns out that we need a separate state for phy_mdm6600_power_on()
    and phy_mdm6600_power_off(), we can use the pinctrl idle state.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Fixes: 2ad2af081622 ("phy: mapphone-mdm6600: Improve phy related runtime PM calls")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Link: https://lore.kernel.org/r/20230913060433.48373-3-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1b030b101f6244db5d4f700d746f8b8879c0223
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Sep 13 09:04:28 2023 +0300

    phy: mapphone-mdm6600: Fix runtime PM for remove
    
    [ Upstream commit b99e0ba9633af51638e5ee1668da2e33620c134f ]
    
    Otherwise we will get an underflow on remove.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Fixes: f7f50b2a7b05 ("phy: mapphone-mdm6600: Add runtime PM support for n_gsm on USB suspend")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Link: https://lore.kernel.org/r/20230913060433.48373-2-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59f1095ab58e6887a4011ef4e16d4abfa3f780a6
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Sep 13 09:04:27 2023 +0300

    phy: mapphone-mdm6600: Fix runtime disable on probe
    
    [ Upstream commit 719606154c7033c068a5d4c1dc5f9163b814b3c8 ]
    
    Commit d644e0d79829 ("phy: mapphone-mdm6600: Fix PM error handling in
    phy_mdm6600_probe") caused a regression where we now unconditionally
    disable runtime PM at the end of the probe while it is only needed on
    errors.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Miaoqian Lin <linmq006@gmail.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Fixes: d644e0d79829 ("phy: mapphone-mdm6600: Fix PM error handling in phy_mdm6600_probe")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230913060433.48373-1-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b618062c0b13dd3865a1577dc721e04679c3abe8
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Mon May 15 08:57:06 2023 +0200

    serial: 8250: omap: Move uart_write() inside PM section
    
    commit c53aab20762255ee03e65dd66b3cba3887ad39d1 upstream.
    
    If CONFIG_PM is not set (e.g. m68k/allmodconfig):
    
        drivers/tty/serial/8250/8250_omap.c:169:13: error: ‘uart_write’ defined but not used [-Werror=unused-function]
          169 | static void uart_write(struct omap8250_priv *priv, u32 reg, u32 val)
              |             ^~~~~~~~~~
    
    Fix tis by moving uart_write() inside the existing section protected
    by #ifdef CONFIG_PM.
    
    Reported-by: noreply@ellerman.id.au
    Link: http://kisskb.ellerman.id.au/kisskb/buildresult/14925095/
    Fixes: 398cecc24846e867 ("serial: 8250: omap: Fix imprecise external abort for omap_8250_pm()")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230515065706.1723477-1-geert@linux-m68k.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67f29cd2f851f1f2077c8d8cc8ee3c28bb5e4853
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Thu Oct 5 17:00:24 2023 +0300

    ASoC: pxa: fix a memory leak in probe()
    
    [ Upstream commit aa6464edbd51af4a2f8db43df866a7642b244b5f ]
    
    Free the "priv" pointer before returning the error code.
    
    Fixes: 90eb6b59d311 ("ASoC: pxa-ssp: add support for an external clock in devicetree")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/84ac2313-1420-471a-b2cb-3269a2e12a7c@moroto.mountain
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76d04c339508b74b26ff92928bda1b203f26b3d9
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Oct 18 11:00:17 2023 +0200

    gpio: vf610: set value before the direction to avoid a glitch
    
    commit fc363413ef8ea842ae7a99e3caf5465dafdd3a49 upstream.
    
    We found a glitch when configuring the pad as output high. To avoid this
    glitch, move the data value setting before direction config in the
    function vf610_gpio_direction_output().
    
    Fixes: 659d8a62311f ("gpio: vf610: add imx7ulp support")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    [Bartosz: tweak the commit message]
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b129e3964b313ba15186f0e6cf83062eca21564
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Oct 17 11:07:25 2023 +0200

    platform/x86: asus-wmi: Map 0x2a code, Ignore 0x2b and 0x2c events
    
    commit 235985d1763f7aba92c1c64e5f5aaec26c2c9b18 upstream.
    
    Newer Asus laptops send the following new WMI event codes when some
    of the F1 - F12 "media" hotkeys are pressed:
    
    0x2a Screen Capture
    0x2b PrintScreen
    0x2c CapsLock
    
    Map 0x2a to KEY_SELECTIVE_SCREENSHOT mirroring how similar hotkeys
    are mapped on other laptops.
    
    PrintScreem and CapsLock are also reported as normal PS/2 keyboard events,
    map these event codes to KE_IGNORE to avoid "Unknown key code 0x%x\n" log
    messages.
    
    Reported-by: James John <me@donjajo.com>
    Closes: https://lore.kernel.org/platform-driver-x86/a2c441fe-457e-44cf-a146-0ecd86b037cf@donjajo.com/
    Closes: https://bbs.archlinux.org/viewtopic.php?pid=2123716
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231017090725.38163-4-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1a058cc24677dbd0fb88ca1f6ebbf13fba9413b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Oct 17 11:07:23 2023 +0200

    platform/x86: asus-wmi: Change ASUS_WMI_BRN_DOWN code from 0x20 to 0x2e
    
    commit f37cc2fc277b371fc491890afb7d8a26e36bb3a1 upstream.
    
    Older Asus laptops change the backlight level themselves and then send
    WMI events with different codes for different backlight levels.
    
    The asus-wmi.c code maps the entire range of codes reported on
    brightness down keypresses to an internal ASUS_WMI_BRN_DOWN code:
    
    define NOTIFY_BRNUP_MIN                0x11
    define NOTIFY_BRNUP_MAX                0x1f
    define NOTIFY_BRNDOWN_MIN              0x20
    define NOTIFY_BRNDOWN_MAX              0x2e
    
            if (code >= NOTIFY_BRNUP_MIN && code <= NOTIFY_BRNUP_MAX)
                    code = ASUS_WMI_BRN_UP;
            else if (code >= NOTIFY_BRNDOWN_MIN && code <= NOTIFY_BRNDOWN_MAX)
                    code = ASUS_WMI_BRN_DOWN;
    
    Before this commit all the NOTIFY_BRNDOWN_MIN - NOTIFY_BRNDOWN_MAX
    aka 0x20 - 0x2e events were mapped to 0x20.
    
    This mapping is causing issues on new laptop models which actually
    send 0x2b events for printscreen presses and 0x2c events for
    capslock presses, which get translated into spurious brightness-down
    presses.
    
    The plan is disable the 0x11-0x2e special mapping on laptops
    where asus-wmi does not register a backlight-device to avoid
    the spurious brightness-down keypresses. New laptops always send
    0x2e for brightness-down presses, change the special internal
    ASUS_WMI_BRN_DOWN value from 0x20 to 0x2e to match this in
    preparation for fixing the spurious brightness-down presses.
    
    This change does not have any functional impact since all
    of 0x20 - 0x2e is mapped to ASUS_WMI_BRN_DOWN first and only
    then checked against the keymap code and the new 0x2e
    value is still in the 0x20 - 0x2e range.
    
    Reported-by: James John <me@donjajo.com>
    Closes: https://lore.kernel.org/platform-driver-x86/a2c441fe-457e-44cf-a146-0ecd86b037cf@donjajo.com/
    Closes: https://bbs.archlinux.org/viewtopic.php?pid=2123716
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231017090725.38163-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6bbe51dcdf32322fc483b53e60e074b93b475fb
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Sun Oct 15 01:54:49 2023 +0200

    platform/surface: platform_profile: Propagate error if profile registration fails
    
    commit fe0e04cf66a12ffe6d1b43725ddaabd5599d024f upstream.
    
    If platform_profile_register() fails, the driver does not propagate
    the error, but instead probes successfully. This means when the driver
    unbinds, the a warning might be issued by platform_profile_remove().
    
    Fix this by propagating the error back to the caller of
    surface_platform_profile_probe().
    
    Compile-tested only.
    
    Fixes: b78b4982d763 ("platform/surface: Add platform profile driver")
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Reviewed-by: Maximilian Luz <luzmaximilian@gmail.com>
    Tested-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20231014235449.288702-1-W_Armin@gmx.de
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a73c8d71693838f5c258aa985d3654b2cf6c987c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Sep 21 15:14:12 2023 +0800

    s390/cio: fix a memleak in css_alloc_subchannel
    
    commit 63e8b94ad1840f02462633abdb363397f56bc642 upstream.
    
    When dma_set_coherent_mask() fails, sch->lock has not been
    freed, which is allocated in css_sch_create_locks(), leading
    to a memleak.
    
    Fixes: 4520a91a976e ("s390/cio: use dma helpers for setting masks")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Message-Id: <20230921071412.13806-1-dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/linux-s390/bd38baa8-7b9d-4d89-9422-7e943d626d6e@linux.ibm.com/
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8b6c2df1e7dad147b3bc2fa18800f69da0e8841
Author: Francis Laniel <flaniel@linux.microsoft.com>
Date:   Fri Oct 20 13:42:50 2023 +0300

    selftests/ftrace: Add new test case which checks non unique symbol
    
    commit 03b80ff8023adae6780e491f66e932df8165e3a0 upstream.
    
    If name_show() is non unique, this test will try to install a kprobe on this
    function which should fail returning EADDRNOTAVAIL.
    On kernel where name_show() is not unique, this test is skipped.
    
    Link: https://lore.kernel.org/all/20231020104250.9537-3-flaniel@linux.microsoft.com/
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Francis Laniel <flaniel@linux.microsoft.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ad81e6affcbd26d3c4aa39d078aabc90aca27f8
Author: Niklas Schnelle <schnelle@linux.ibm.com>
Date:   Tue Oct 17 15:37:29 2023 +0200

    s390/pci: fix iommu bitmap allocation
    
    commit c1ae1c59c8c6e0b66a718308c623e0cb394dab6b upstream.
    
    Since the fixed commits both zdev->iommu_bitmap and zdev->lazy_bitmap
    are allocated as vzalloc(zdev->iommu_pages / 8). The problem is that
    zdev->iommu_bitmap is a pointer to unsigned long but the above only
    yields an allocation that is a multiple of sizeof(unsigned long) which
    is 8 on s390x if the number of IOMMU pages is a multiple of 64.
    This in turn is the case only if the effective IOMMU aperture is
    a multiple of 64 * 4K = 256K. This is usually the case and so didn't
    cause visible issues since both the virt_to_phys(high_memory) reduced
    limit and hardware limits use nice numbers.
    
    Under KVM, and in particular with QEMU limiting the IOMMU aperture to
    the vfio DMA limit (default 65535), it is possible for the reported
    aperture not to be a multiple of 256K however. In this case we end up
    with an iommu_bitmap whose allocation is not a multiple of
    8 causing bitmap operations to access it out of bounds.
    
    Sadly we can't just fix this in the obvious way and use bitmap_zalloc()
    because for large RAM systems (tested on 8 TiB) the zdev->iommu_bitmap
    grows too large for kmalloc(). So add our own bitmap_vzalloc() wrapper.
    This might be a candidate for common code, but this area of code will
    be replaced by the upcoming conversion to use the common code DMA API on
    s390 so just add a local routine.
    
    Fixes: 224593215525 ("s390/pci: use virtual memory for iommu bitmap")
    Fixes: 13954fd6913a ("s390/pci_dma: improve lazy flush for unmap")
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthew Rosato <mjrosato@linux.ibm.com>
    Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71d224acc4d1df1b61a294abee0f1032a9b03b40
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Oct 18 13:56:54 2023 +0200

    perf: Disallow mis-matched inherited group reads
    
    commit 32671e3799ca2e4590773fd0e63aaa4229e50c06 upstream.
    
    Because group consistency is non-atomic between parent (filedesc) and children
    (inherited) events, it is possible for PERF_FORMAT_GROUP read() to try and sum
    non-matching counter groups -- with non-sensical results.
    
    Add group_generation to distinguish the case where a parent group removes and
    adds an event and thus has the same number, but a different configuration of
    events as inherited groups.
    
    This became a problem when commit fa8c269353d5 ("perf/core: Invert
    perf_read_group() loops") flipped the order of child_list and sibling_list.
    Previously it would iterate the group (sibling_list) first, and for each
    sibling traverse the child_list. In this order, only the group composition of
    the parent is relevant. By flipping the order the group composition of the
    child (inherited) events becomes an issue and the mis-match in group
    composition becomes evident.
    
    That said; even prior to this commit, while reading of a group that is not
    equally inherited was not broken, it still made no sense.
    
    (Ab)use ECHILD as error return to indicate issues with child process group
    composition.
    
    Fixes: fa8c269353d5 ("perf/core: Invert perf_read_group() loops")
    Reported-by: Budimir Markovic <markovicbudimir@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20231018115654.GK33217@noisy.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aa89a11a2a67671608e7499ecc91a83b12425c7
Author: Puliang Lu <puliang.lu@fibocom.com>
Date:   Mon Oct 16 15:36:16 2023 +0800

    USB: serial: option: add Fibocom to DELL custom modem FM101R-GL
    
    commit 52480e1f1a259c93d749ba3961af0bffedfe7a7a upstream.
    
    Update the USB serial option driver support for the Fibocom
    FM101R-GL LTE modules as there are actually several different variants.
    
    - VID:PID 413C:8213, FM101R-GL are laptop M.2 cards (with
      MBIM interfaces for Linux)
    
    - VID:PID 413C:8215, FM101R-GL ESIM are laptop M.2 cards (with
      MBIM interface for Linux)
    
    0x8213: mbim, tty
    0x8215: mbim, tty
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=8213 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=a3b7cbf0
    C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  3 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=8215 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=a3b7cbf0
    C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Signed-off-by: Puliang Lu <puliang.lu@fibocom.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c376d86361866c9f97107eb84f7f1c62eec748b
Author: Benoît Monin <benoit.monin@gmx.fr>
Date:   Mon Oct 2 17:51:40 2023 +0200

    USB: serial: option: add entry for Sierra EM9191 with new firmware
    
    commit 064f6e2ba9eb59b2c87b866e1e968e79ccedf9dd upstream.
    
    Following a firmware update of the modem, the interface for the AT
    command port changed, so add it back.
    
    T:  Bus=08 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=1199 ProdID=90d3 Rev=00.06
    S:  Manufacturer=Sierra Wireless, Incorporated
    S:  Product=Sierra Wireless EM9191
    S:  SerialNumber=xxxxxxxxxxxxxxxx
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    Signed-off-by: Benoît Monin <benoit.monin@gmx.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4832212161764ed260d7d55344f657375d282143
Author: Fabio Porcedda <fabio.porcedda@gmail.com>
Date:   Tue Sep 5 09:37:24 2023 +0200

    USB: serial: option: add Telit LE910C4-WWX 0x1035 composition
    
    commit 6a7be48e9bd18d309ba25c223a27790ad1bf0fa3 upstream.
    
    Add support for the following Telit LE910C4-WWX composition:
    
    0x1035: TTY, TTY, ECM
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  5 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=1bc7 ProdID=1035 Rev=00.00
    S:  Manufacturer=Telit
    S:  Product=LE910C4-WWX
    S:  SerialNumber=e1b117c7
    C:  #Ifs= 4 Cfg#= 1 Atr=e0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=fe Prot=ff Driver=option
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 2 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=85(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    I:  If#= 3 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Fabio Porcedda <fabio.porcedda@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Daniele Palmas <dnlplm@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e750fb71dc6adc3b5af0bab3934123979a4e5cd1
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Mon Jul 31 12:37:58 2023 +0200

    nvme-rdma: do not try to stop unallocated queues
    
    commit 3820c4fdc247b6f0a4162733bdb8ddf8f2e8a1e4 upstream.
    
    Trying to stop a queue which hasn't been allocated will result
    in a warning due to calling mutex_lock() against an uninitialized mutex.
    
     DEBUG_LOCKS_WARN_ON(lock->magic != lock)
     WARNING: CPU: 4 PID: 104150 at kernel/locking/mutex.c:579
    
     Call trace:
      RIP: 0010:__mutex_lock+0x1173/0x14a0
      nvme_rdma_stop_queue+0x1b/0xa0 [nvme_rdma]
      nvme_rdma_teardown_io_queues.part.0+0xb0/0x1d0 [nvme_rdma]
      nvme_rdma_delete_ctrl+0x50/0x100 [nvme_rdma]
      nvme_do_delete_ctrl+0x149/0x158 [nvme_core]
    
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9fd6d44abbcd1f9422450c7b49069b59f3b5dcc
Author: Keith Busch <kbusch@kernel.org>
Date:   Thu Oct 12 11:13:51 2023 -0700

    nvme-pci: add BOGUS_NID for Intel 0a54 device
    
    commit 5c3f4066462a5f6cac04d3dd81c9f551fabbc6c7 upstream.
    
    These ones claim cmic and nmic capable, so need special consideration to ignore
    their duplicate identifiers.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217981
    Reported-by: welsh@cassens.com
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 071382bda1da8f0109cc454b5afde9d4cfffa923
Author: Sunil V L <sunilvl@ventanamicro.com>
Date:   Mon Oct 16 22:39:39 2023 +0530

    ACPI: irq: Fix incorrect return value in acpi_register_gsi()
    
    commit 0c21a18d5d6c6a73d098fb9b4701572370942df9 upstream.
    
    acpi_register_gsi() should return a negative value in case of failure.
    
    Currently, it returns the return value from irq_create_fwspec_mapping().
    However, irq_create_fwspec_mapping() returns 0 for failure. Fix the
    issue by returning -EINVAL if irq_create_fwspec_mapping() returns zero.
    
    Fixes: d44fa3d46079 ("ACPI: Add support for ResourceSource/IRQ domain mapping")
    Cc: 4.11+ <stable@vger.kernel.org> # 4.11+
    Signed-off-by: Sunil V L <sunilvl@ventanamicro.com>
    [ rjw: Rename a new local variable ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 431a5010bce29809e68111c83e31bfd06d15a7d3
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Mon Oct 9 10:59:01 2023 -0400

    NFSv4.1: fixup use EXCHGID4_FLAG_USE_PNFS_DS for DS server
    
    commit 379e4adfddd6a2f95a4f2029b8ddcbacf92b21f9 upstream.
    
    This patches fixes commit 51d674a5e488 "NFSv4.1: use
    EXCHGID4_FLAG_USE_PNFS_DS for DS server", purpose of that
    commit was to mark EXCHANGE_ID to the DS with the appropriate
    flag.
    
    However, connection to MDS can return both EXCHGID4_FLAG_USE_PNFS_DS
    and EXCHGID4_FLAG_USE_PNFS_MDS set but previous patch would only
    remember the USE_PNFS_DS and for the 2nd EXCHANGE_ID send that
    to the MDS.
    
    Instead, just mark the pnfs path exclusively.
    
    Fixes: 51d674a5e488 ("NFSv4.1: use EXCHGID4_FLAG_USE_PNFS_DS for DS server")
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5762e72ef1b083704912e3412e88e4fd5997815f
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 8 14:20:19 2023 -0400

    pNFS: Fix a hang in nfs4_evict_inode()
    
    commit f63955721a8020e979b99cc417dcb6da3106aa24 upstream.
    
    We are not allowed to call pnfs_mark_matching_lsegs_return() without
    also holding a reference to the layout header, since doing so could lead
    to the reference count going to zero when we call
    pnfs_layout_remove_lseg(). This again can lead to a hang when we get to
    nfs4_evict_inode() and are unable to clear the layout pointer.
    
    pnfs_layout_return_unused_byserver() is guilty of this behaviour, and
    has been seen to trigger the refcount warning prior to a hang.
    
    Fixes: b6d49ecd1081 ("NFSv4: Fix a pNFS layout related use-after-free race when freeing the inode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a3abee2eee9344d1a67f5a112e4891d6355402c
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Oct 17 17:18:06 2023 +0300

    Revert "pinctrl: avoid unsafe code pattern in find_pinctrl()"
    
    commit 62140a1e4dec4594d5d1e1d353747bf2ef434e8b upstream.
    
    The commit breaks MMC enumeration on the Intel Merrifield
    plaform.
    
    Before:
    [   36.439057] mmc0: SDHCI controller on PCI [0000:00:01.0] using ADMA
    [   36.450924] mmc2: SDHCI controller on PCI [0000:00:01.3] using ADMA
    [   36.459355] mmc1: SDHCI controller on PCI [0000:00:01.2] using ADMA
    [   36.706399] mmc0: new DDR MMC card at address 0001
    [   37.058972] mmc2: new ultra high speed DDR50 SDIO card at address 0001
    [   37.278977] mmcblk0: mmc0:0001 H4G1d 3.64 GiB
    [   37.297300]  mmcblk0: p1 p2 p3 p4 p5 p6 p7 p8 p9 p10
    
    After:
    [   36.436704] mmc2: SDHCI controller on PCI [0000:00:01.3] using ADMA
    [   36.436720] mmc1: SDHCI controller on PCI [0000:00:01.0] using ADMA
    [   36.463685] mmc0: SDHCI controller on PCI [0000:00:01.2] using ADMA
    [   36.720627] mmc1: new DDR MMC card at address 0001
    [   37.068181] mmc2: new ultra high speed DDR50 SDIO card at address 0001
    [   37.279998] mmcblk1: mmc1:0001 H4G1d 3.64 GiB
    [   37.302670]  mmcblk1: p1 p2 p3 p4 p5 p6 p7 p8 p9 p10
    
    This reverts commit c153a4edff6ab01370fcac8e46f9c89cca1060c2.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20231017141806.535191-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24959825377f8e68980aaabfec21808bdd21acaf
Author: Avri Altman <avri.altman@wdc.com>
Date:   Wed Sep 27 10:15:00 2023 +0300

    mmc: core: Capture correct oemid-bits for eMMC cards
    
    commit 84ee19bffc9306128cd0f1c650e89767079efeff upstream.
    
    The OEMID is an 8-bit binary number rather than 16-bit as the current code
    parses for. The OEMID occupies bits [111:104] in the CID register, see the
    eMMC spec JESD84-B51 paragraph 7.2.3. It seems that the 16-bit comes from
    the legacy MMC specs (v3.31 and before).
    
    Let's fix the parsing by simply move to use 8-bit instead of 16-bit. This
    means we ignore the impact on some of those old MMC cards that may be out
    there, but on the other hand this shouldn't be a problem as the OEMID seems
    not be an important feature for these cards.
    
    Signed-off-by: Avri Altman <avri.altman@wdc.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230927071500.1791882-1-avri.altman@wdc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8041e7b7e7e97723315a65bbf8334d6bd5b18ce8
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Aug 30 17:39:22 2023 +0800

    mmc: core: sdio: hold retuning if sdio in 1-bit mode
    
    commit 32a9cdb8869dc111a0c96cf8e1762be9684af15b upstream.
    
    tuning only support in 4-bit mode or 8 bit mode, so in 1-bit mode,
    need to hold retuning.
    
    Find this issue when use manual tuning method on imx93. When system
    resume back, SDIO WIFI try to switch back to 4 bit mode, first will
    trigger retuning, and all tuning command failed.
    
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: dfa13ebbe334 ("mmc: host: Add facility to support re-tuning")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230830093922.3095850-1-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 262029c0c58c3f5ae12ff57cbdfa7277c968c427
Author: Pablo Sun <pablo.sun@mediatek.com>
Date:   Fri Sep 22 17:53:48 2023 +0800

    mmc: mtk-sd: Use readl_poll_timeout_atomic in msdc_reset_hw
    
    commit c7bb120c1c66672b657e95d0942c989b8275aeb3 upstream.
    
    Use atomic readl_poll_timeout_atomic, because msdc_reset_hw
    may be invoked in IRQ handler in the following context:
    
      msdc_irq() -> msdc_cmd_done() -> msdc_reset_hw()
    
    The following kernel BUG stack trace can be observed on
    Genio 1200 EVK after initializing MSDC1 hardware during kernel boot:
    
    [    1.187441] BUG: scheduling while atomic: swapper/0/0/0x00010002
    [    1.189157] Modules linked in:
    [    1.204633] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W         5.15.42-mtk+modified #1
    [    1.205713] Hardware name: MediaTek Genio 1200 EVK-P1V2-EMMC (DT)
    [    1.206484] Call trace:
    [    1.206796]  dump_backtrace+0x0/0x1ac
    [    1.207266]  show_stack+0x24/0x30
    [    1.207692]  dump_stack_lvl+0x68/0x84
    [    1.208162]  dump_stack+0x1c/0x38
    [    1.208587]  __schedule_bug+0x68/0x80
    [    1.209056]  __schedule+0x6ec/0x7c0
    [    1.209502]  schedule+0x7c/0x110
    [    1.209915]  schedule_hrtimeout_range_clock+0xc4/0x1f0
    [    1.210569]  schedule_hrtimeout_range+0x20/0x30
    [    1.211148]  usleep_range_state+0x84/0xc0
    [    1.211661]  msdc_reset_hw+0xc8/0x1b0
    [    1.212134]  msdc_cmd_done.isra.0+0x4ac/0x5f0
    [    1.212693]  msdc_irq+0x104/0x2d4
    [    1.213121]  __handle_irq_event_percpu+0x68/0x280
    [    1.213725]  handle_irq_event+0x70/0x15c
    [    1.214230]  handle_fasteoi_irq+0xb0/0x1a4
    [    1.214755]  handle_domain_irq+0x6c/0x9c
    [    1.215260]  gic_handle_irq+0xc4/0x180
    [    1.215741]  call_on_irq_stack+0x2c/0x54
    [    1.216245]  do_interrupt_handler+0x5c/0x70
    [    1.216782]  el1_interrupt+0x30/0x80
    [    1.217242]  el1h_64_irq_handler+0x1c/0x2c
    [    1.217769]  el1h_64_irq+0x78/0x7c
    [    1.218206]  cpuidle_enter_state+0xc8/0x600
    [    1.218744]  cpuidle_enter+0x44/0x5c
    [    1.219205]  do_idle+0x224/0x2d0
    [    1.219624]  cpu_startup_entry+0x30/0x80
    [    1.220129]  rest_init+0x108/0x134
    [    1.220568]  arch_call_rest_init+0x1c/0x28
    [    1.221094]  start_kernel+0x6c0/0x700
    [    1.221564]  __primary_switched+0xc0/0xc8
    
    Fixes: ffaea6ebfe9c ("mmc: mtk-sd: Use readl_poll_timeout instead of open-coded polling")
    Signed-off-by: Pablo Sun <pablo.sun@mediatek.com>
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioachino.delregno@collabora.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230922095348.22182-1-pablo.sun@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e363db1c13ac6c0c91224ced7858936080d9a33
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Aug 30 17:00:34 2023 +0200

    mtd: physmap-core: Restore map_rom fallback
    
    commit 6792b7fce610bcd1cf3e07af3607fe7e2c38c1d8 upstream.
    
    When the exact mapping type driver was not available, the old
    physmap_of_core driver fell back to mapping the region as ROM.
    Unfortunately this feature was lost when the DT and pdata cases were
    merged.  Revive this useful feature.
    
    Fixes: 642b1e8dbed7bbbf ("mtd: maps: Merge physmap_of.c into physmap-core.c")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/550e8c8c1da4c4baeb3d71ff79b14a18d4194f9e.1693407371.git.geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71823463b1b223dd5bc7636af48fc97b5fe69f16
Author: Martin Kurbanov <mmkurbanov@sberdevices.ru>
Date:   Tue Sep 5 17:56:37 2023 +0300

    mtd: spinand: micron: correct bitmask for ecc status
    
    commit 9836a987860e33943945d4b257729a4f94eae576 upstream.
    
    Valid bitmask is 0x70 in the status register.
    
    Fixes: a508e8875e13 ("mtd: spinand: Add initial support for Micron MT29F2G01ABAGD")
    Signed-off-by: Martin Kurbanov <mmkurbanov@sberdevices.ru>
    Reviewed-by: Frieder Schrempf <frieder.schrempf@kontron.de>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230905145637.139068-1-mmkurbanov@sberdevices.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a50d2f17d562452dc253cd390803a9f95c10be39
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Jul 17 21:42:20 2023 +0200

    mtd: rawnand: arasan: Ensure program page operations are successful
    
    commit 3a4a893dbb19e229db3b753f0462520b561dee98 upstream.
    
    The NAND core complies with the ONFI specification, which itself
    mentions that after any program or erase operation, a status check
    should be performed to see whether the operation was finished *and*
    successful.
    
    The NAND core offers helpers to finish a page write (sending the
    "PAGE PROG" command, waiting for the NAND chip to be ready again, and
    checking the operation status). But in some cases, advanced controller
    drivers might want to optimize this and craft their own page write
    helper to leverage additional hardware capabilities, thus not always
    using the core facilities.
    
    Some drivers, like this one, do not use the core helper to finish a page
    write because the final cycles are automatically managed by the
    hardware. In this case, the additional care must be taken to manually
    perform the final status check.
    
    Let's read the NAND chip status at the end of the page write helper and
    return -EIO upon error.
    
    Cc: Michal Simek <michal.simek@amd.com>
    Cc: stable@vger.kernel.org
    Fixes: 88ffef1b65cf ("mtd: rawnand: arasan: Support the hardware BCH ECC engine")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Michal Simek <michal.simek@amd.com>
    Link: https://lore.kernel.org/linux-mtd/20230717194221.229778-2-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae53c92e928c26ebad9ec33bc2d8c15212e00775
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Jul 17 21:42:19 2023 +0200

    mtd: rawnand: marvell: Ensure program page operations are successful
    
    commit 3e01d5254698ea3d18e09d96b974c762328352cd upstream.
    
    The NAND core complies with the ONFI specification, which itself
    mentions that after any program or erase operation, a status check
    should be performed to see whether the operation was finished *and*
    successful.
    
    The NAND core offers helpers to finish a page write (sending the
    "PAGE PROG" command, waiting for the NAND chip to be ready again, and
    checking the operation status). But in some cases, advanced controller
    drivers might want to optimize this and craft their own page write
    helper to leverage additional hardware capabilities, thus not always
    using the core facilities.
    
    Some drivers, like this one, do not use the core helper to finish a page
    write because the final cycles are automatically managed by the
    hardware. In this case, the additional care must be taken to manually
    perform the final status check.
    
    Let's read the NAND chip status at the end of the page write helper and
    return -EIO upon error.
    
    Cc: stable@vger.kernel.org
    Fixes: 02f26ecf8c77 ("mtd: nand: add reworked Marvell NAND controller driver")
    Reported-by: Aviram Dali <aviramd@marvell.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Tested-by: Ravi Chandra Minnikanti <rminnikanti@marvell.com>
    Link: https://lore.kernel.org/linux-mtd/20230717194221.229778-1-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0ca2ab230983e7f0cb38a9cd915029e8aff83bd
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Jul 17 21:42:21 2023 +0200

    mtd: rawnand: pl353: Ensure program page operations are successful
    
    commit 9777cc13fd2c3212618904636354be60835e10bb upstream.
    
    The NAND core complies with the ONFI specification, which itself
    mentions that after any program or erase operation, a status check
    should be performed to see whether the operation was finished *and*
    successful.
    
    The NAND core offers helpers to finish a page write (sending the
    "PAGE PROG" command, waiting for the NAND chip to be ready again, and
    checking the operation status). But in some cases, advanced controller
    drivers might want to optimize this and craft their own page write
    helper to leverage additional hardware capabilities, thus not always
    using the core facilities.
    
    Some drivers, like this one, do not use the core helper to finish a page
    write because the final cycles are automatically managed by the
    hardware. In this case, the additional care must be taken to manually
    perform the final status check.
    
    Let's read the NAND chip status at the end of the page write helper and
    return -EIO upon error.
    
    Cc: Michal Simek <michal.simek@amd.com>
    Cc: stable@vger.kernel.org
    Fixes: 08d8c62164a3 ("mtd: rawnand: pl353: Add support for the ARM PL353 SMC NAND controller")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Tested-by: Michal Simek <michal.simek@amd.com>
    Link: https://lore.kernel.org/linux-mtd/20230717194221.229778-3-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7070628043e8fed3bb801d6a82c7ac267befa34
Author: Bibek Kumar Patro <quic_bibekkum@quicinc.com>
Date:   Wed Sep 13 12:37:02 2023 +0530

    mtd: rawnand: qcom: Unmap the right resource upon probe failure
    
    commit 5279f4a9eed3ee7d222b76511ea7a22c89e7eefd upstream.
    
    We currently provide the physical address of the DMA region
    rather than the output of dma_map_resource() which is obviously wrong.
    
    Fixes: 7330fc505af4 ("mtd: rawnand: qcom: stop using phys_to_dma()")
    Cc: stable@vger.kernel.org
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Signed-off-by: Bibek Kumar Patro <quic_bibekkum@quicinc.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230913070702.12707-1-quic_bibekkum@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f928d1362f79a68901a7097905adabdcf05c05b
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Oct 17 18:38:13 2023 -0700

    net: fix ifname in netlink ntf during netns move
    
    [ Upstream commit 311cca40661f428b7aa114fb5af578cfdbe3e8b6 ]
    
    dev_get_valid_name() overwrites the netdev's name on success.
    This makes it hard to use in prepare-commit-like fashion,
    where we do validation first, and "commit" to the change
    later.
    
    Factor out a helper which lets us save the new name to a buffer.
    Use it to fix the problem of notification on netns move having
    incorrect name:
    
     5: eth0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default
         link/ether be:4d:58:f9:d5:40 brd ff:ff:ff:ff:ff:ff
     6: eth1: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default
         link/ether 1e:4a:34:36:e3:cd brd ff:ff:ff:ff:ff:ff
    
     [ ~]# ip link set dev eth0 netns 1 name eth1
    
    ip monitor inside netns:
     Deleted inet eth0
     Deleted inet6 eth0
     Deleted 5: eth1: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default
         link/ether be:4d:58:f9:d5:40 brd ff:ff:ff:ff:ff:ff new-netnsid 0 new-ifindex 7
    
    Name is reported as eth1 in old netns for ifindex 5, already renamed.
    
    Fixes: d90310243fd7 ("net: device name allocation cleanups")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac43ec299a6fe7cbcb25f04ef53092d7e297390d
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Thu Aug 18 23:02:15 2022 +0200

    net: move from strlcpy with unused retval to strscpy
    
    [ Upstream commit 70986397a15bf337d4ca3215a65e30bbe95e5d3c ]
    
    Follow the advice of the below link and prefer 'strscpy' in this
    subsystem. Conversion is 1:1 because the return value is not used.
    Generated by a coccinelle script.
    
    Link: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Link: https://lore.kernel.org/r/20220818210215.8395-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 311cca40661f ("net: fix ifname in netlink ntf during netns move")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30e2db4030328f50cf5b3b5994ca0bc7349b2660
Author: Antoine Tenart <atenart@kernel.org>
Date:   Thu Oct 7 18:16:50 2021 +0200

    net: introduce a function to check if a netdev name is in use
    
    [ Upstream commit 75ea27d0d62281c31ee259c872dfdeb072cf5e39 ]
    
    __dev_get_by_name is currently used to either retrieve a net device
    reference using its name or to check if a name is already used by a
    registered net device (per ns). In the later case there is no need to
    return a reference to a net device.
    
    Introduce a new helper, netdev_name_in_use, to check if a name is
    currently used by a registered net device without leaking a reference
    the corresponding net device. This helper uses netdev_name_node_lookup
    instead of __dev_get_by_name as we don't need the extra logic retrieving
    a reference to the corresponding net device.
    
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 311cca40661f ("net: fix ifname in netlink ntf during netns move")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38ba5479355b23376557c30cfeca03ad92798c6b
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Oct 5 13:59:59 2023 -0700

    Bluetooth: hci_event: Fix using memcmp when comparing keys
    
    [ Upstream commit b541260615f601ae1b5d6d0cc54e790de706303b ]
    
    memcmp is not consider safe to use with cryptographic secrets:
    
     'Do  not  use memcmp() to compare security critical data, such as
     cryptographic secrets, because the required CPU time depends on the
     number of equal bytes.'
    
    While usage of memcmp for ZERO_KEY may not be considered a security
    critical data, it can lead to more usage of memcmp with pairing keys
    which could introduce more security problems.
    
    Fixes: 455c2ff0a558 ("Bluetooth: Fix BR/EDR out-of-band pairing with only initiator data")
    Fixes: 33155c4aae52 ("Bluetooth: hci_event: Ignore NULL link key")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b2da6d62b42f21c935e02ee04fc4069a8521a31
Author: Maher Sanalla <msanalla@nvidia.com>
Date:   Wed Sep 6 21:48:30 2023 +0300

    net/mlx5: Handle fw tracer change ownership event based on MTRC
    
    [ Upstream commit 92fd39634541eb0a11bf1bafbc8ba92d6ddb8dba ]
    
    Currently, whenever fw issues a change ownership event, the PF that owns
    the fw tracer drops its ownership directly and the other PFs try to pick
    up the ownership via what MTRC register suggests.
    
    In some cases, driver releases the ownership of the tracer and reacquires
    it later on. Whenever the driver releases ownership of the tracer, fw
    issues a change ownership event. This event can be delayed and come after
    driver has reacquired ownership of the tracer. Thus the late event will
    trigger the tracer owner PF to release the ownership again and lead to a
    scenario where no PF is owning the tracer.
    
    To prevent the scenario described above, when handling a change
    ownership event, do not drop ownership of the tracer directly, instead
    read the fw MTRC register to retrieve the up-to-date owner of the tracer
    and set it accordingly in driver level.
    
    Fixes: f53aaa31cce7 ("net/mlx5: FW tracer, implement tracer logic")
    Signed-off-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Shay Drory <shayd@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6e2638245393e37a8328f6a71619dec84b3eb84
Author: Renan Guilherme Lebre Ramos <japareaggae@gmail.com>
Date:   Wed Oct 4 19:59:00 2023 -0400

    platform/x86: touchscreen_dmi: Add info for the Positivo C4128B
    
    [ Upstream commit aa7dcba3bae6869122828b144a3cfd231718089d ]
    
    Add information for the Positivo C4128B, a notebook/tablet convertible.
    
    Link: https://github.com/onitake/gsl-firmware/pull/217
    Signed-off-by: Renan Guilherme Lebre Ramos <japareaggae@gmail.com>
    Link: https://lore.kernel.org/r/20231004235900.426240-1-japareaggae@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca56d8afe64889febb373930c020ea7aae324c65
Author: Rahul Rameshbabu <sergeantsagara@protonmail.com>
Date:   Sun Sep 17 16:18:43 2023 +0000

    HID: multitouch: Add required quirk for Synaptics 0xcd7e device
    
    [ Upstream commit 1437e4547edf41689d7135faaca4222ef0081bc1 ]
    
    Register the Synaptics device as a special multitouch device with certain
    quirks that may improve usability of the touchpad device.
    
    Reported-by: Rain <rain@sunshowers.io>
    Closes: https://lore.kernel.org/linux-input/2bbb8e1d-1793-4df1-810f-cb0137341ff4@app.fastmail.com/
    Signed-off-by: Rahul Rameshbabu <sergeantsagara@protonmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca5bec7ecf261cdeafbd90a2518dc1d562abbaed
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 27 12:09:23 2023 +0100

    btrfs: error out when reallocating block for defrag using a stale transaction
    
    [ Upstream commit e36f94914021e58ee88a8856c7fdf35adf9c7ee1 ]
    
    At btrfs_realloc_node() we have these checks to verify we are not using a
    stale transaction (a past transaction with an unblocked state or higher),
    and the only thing we do is to trigger two WARN_ON(). This however is a
    critical problem, highly unexpected and if it happens it's most likely due
    to a bug, so we should error out and turn the fs into error state so that
    such issue is much more easily noticed if it's triggered.
    
    The problem is critical because in btrfs_realloc_node() we COW tree blocks,
    and using such stale transaction will lead to not persisting the extent
    buffers used for the COW operations, as allocating tree block adds the
    range of the respective extent buffers to the ->dirty_pages iotree of the
    transaction, and a stale transaction, in the unlocked state or higher,
    will not flush dirty extent buffers anymore, therefore resulting in not
    persisting the tree block and resource leaks (not cleaning the dirty_pages
    iotree for example).
    
    So do the following changes:
    
    1) Return -EUCLEAN if we find a stale transaction;
    
    2) Turn the fs into error state, with error -EUCLEAN, so that no
       transaction can be committed, and generate a stack trace;
    
    3) Combine both conditions into a single if statement, as both are related
       and have the same error message;
    
    4) Mark the check as unlikely, since this is not expected to ever happen.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2692fd37aaf4809813c32d77d434a12a36aedbad
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 27 12:09:22 2023 +0100

    btrfs: error when COWing block from a root that is being deleted
    
    [ Upstream commit a2caab29884397e583d09be6546259a83ebfbdb1 ]
    
    At btrfs_cow_block() we check if the block being COWed belongs to a root
    that is being deleted and if so we log an error message. However this is
    an unexpected case and it indicates a bug somewhere, so we should return
    an error and abort the transaction. So change this in the following ways:
    
    1) Abort the transaction with -EUCLEAN, so that if the issue ever happens
       it can easily be noticed;
    
    2) Change the logged message level from error to critical, and change the
       message itself to print the block's logical address and the ID of the
       root;
    
    3) Return -EUCLEAN to the caller;
    
    4) As this is an unexpected scenario, that should never happen, mark the
       check as unlikely, allowing the compiler to potentially generate better
       code.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef491d9560d9252809500c449dd0c9c9b116a027
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 27 12:09:21 2023 +0100

    btrfs: error out when COWing block using a stale transaction
    
    [ Upstream commit 48774f3bf8b4dd3b1a0e155825c9ce48483db14c ]
    
    At btrfs_cow_block() we have these checks to verify we are not using a
    stale transaction (a past transaction with an unblocked state or higher),
    and the only thing we do is to trigger a WARN with a message and a stack
    trace. This however is a critical problem, highly unexpected and if it
    happens it's most likely due to a bug, so we should error out and turn the
    fs into error state so that such issue is much more easily noticed if it's
    triggered.
    
    The problem is critical because using such stale transaction will lead to
    not persisting the extent buffer used for the COW operation, as allocating
    a tree block adds the range of the respective extent buffer to the
    ->dirty_pages iotree of the transaction, and a stale transaction, in the
    unlocked state or higher, will not flush dirty extent buffers anymore,
    therefore resulting in not persisting the tree block and resource leaks
    (not cleaning the dirty_pages iotree for example).
    
    So do the following changes:
    
    1) Return -EUCLEAN if we find a stale transaction;
    
    2) Turn the fs into error state, with error -EUCLEAN, so that no
       transaction can be committed, and generate a stack trace;
    
    3) Combine both conditions into a single if statement, as both are related
       and have the same error message;
    
    4) Mark the check as unlikely, since this is not expected to ever happen.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f89ed0a096730f6d8bc16f93f78e400e152dcbab
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 26 15:47:27 2023 -0400

    btrfs: fix some -Wmaybe-uninitialized warnings in ioctl.c
    
    [ Upstream commit 9147b9ded499d9853bdf0e9804b7eaa99c4429ed ]
    
    Jens reported the following warnings from -Wmaybe-uninitialized recent
    Linus' branch.
    
      In file included from ./include/asm-generic/rwonce.h:26,
                       from ./arch/arm64/include/asm/rwonce.h:71,
                       from ./include/linux/compiler.h:246,
                       from ./include/linux/export.h:5,
                       from ./include/linux/linkage.h:7,
                       from ./include/linux/kernel.h:17,
                       from fs/btrfs/ioctl.c:6:
      In function ‘instrument_copy_from_user_before’,
          inlined from ‘_copy_from_user’ at ./include/linux/uaccess.h:148:3,
          inlined from ‘copy_from_user’ at ./include/linux/uaccess.h:183:7,
          inlined from ‘btrfs_ioctl_space_info’ at fs/btrfs/ioctl.c:2999:6,
          inlined from ‘btrfs_ioctl’ at fs/btrfs/ioctl.c:4616:10:
      ./include/linux/kasan-checks.h:38:27: warning: ‘space_args’ may be used
      uninitialized [-Wmaybe-uninitialized]
         38 | #define kasan_check_write __kasan_check_write
      ./include/linux/instrumented.h:129:9: note: in expansion of macro
      ‘kasan_check_write’
        129 |         kasan_check_write(to, n);
            |         ^~~~~~~~~~~~~~~~~
      ./include/linux/kasan-checks.h: In function ‘btrfs_ioctl’:
      ./include/linux/kasan-checks.h:20:6: note: by argument 1 of type ‘const
      volatile void *’ to ‘__kasan_check_write’ declared here
         20 | bool __kasan_check_write(const volatile void *p, unsigned int
            size);
            |      ^~~~~~~~~~~~~~~~~~~
      fs/btrfs/ioctl.c:2981:39: note: ‘space_args’ declared here
       2981 |         struct btrfs_ioctl_space_args space_args;
            |                                       ^~~~~~~~~~
      In function ‘instrument_copy_from_user_before’,
          inlined from ‘_copy_from_user’ at ./include/linux/uaccess.h:148:3,
          inlined from ‘copy_from_user’ at ./include/linux/uaccess.h:183:7,
          inlined from ‘_btrfs_ioctl_send’ at fs/btrfs/ioctl.c:4343:9,
          inlined from ‘btrfs_ioctl’ at fs/btrfs/ioctl.c:4658:10:
      ./include/linux/kasan-checks.h:38:27: warning: ‘args32’ may be used
      uninitialized [-Wmaybe-uninitialized]
         38 | #define kasan_check_write __kasan_check_write
      ./include/linux/instrumented.h:129:9: note: in expansion of macro
      ‘kasan_check_write’
        129 |         kasan_check_write(to, n);
            |         ^~~~~~~~~~~~~~~~~
      ./include/linux/kasan-checks.h: In function ‘btrfs_ioctl’:
      ./include/linux/kasan-checks.h:20:6: note: by argument 1 of type ‘const
      volatile void *’ to ‘__kasan_check_write’ declared here
         20 | bool __kasan_check_write(const volatile void *p, unsigned int
            size);
            |      ^~~~~~~~~~~~~~~~~~~
      fs/btrfs/ioctl.c:4341:49: note: ‘args32’ declared here
       4341 |                 struct btrfs_ioctl_send_args_32 args32;
            |                                                 ^~~~~~
    
    This was due to his config options and having KASAN turned on,
    which adds some extra checks around copy_from_user(), which then
    triggered the -Wmaybe-uninitialized checker for these cases.
    
    Fix the warnings by initializing the different structs we're copying
    into.
    
    Reported-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df486b75fecad125ec4a2a24164b4e6a30b17596
Author: Kai Uwe Broulik <foss-linux@broulik.de>
Date:   Sun Oct 1 13:47:10 2023 +0200

    drm: panel-orientation-quirks: Add quirk for One Mix 2S
    
    [ Upstream commit cbb7eb2dbd9472816e42a1b0fdb51af49abbf812 ]
    
    The One Mix 2S is a mini laptop with a 1200x1920 portrait screen
    mounted in a landscape oriented clamshell case. Because of the too
    generic DMI strings this entry is also doing bios-date matching.
    
    Signed-off-by: Kai Uwe Broulik <foss-linux@broulik.de>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Liviu Dudau <liviu.dudau@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231001114710.336172-1-foss-linux@broulik.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5ba30ee4f6d8fe47bf00a2368c62049abcb1d5c
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Sep 22 15:55:08 2023 +0800

    ipv4/fib: send notify when delete source address routes
    
    [ Upstream commit 4b2b606075e50cdae62ab2356b0a1e206947c354 ]
    
    After deleting an interface address in fib_del_ifaddr(), the function
    scans the fib_info list for stray entries and calls fib_flush() and
    fib_table_flush(). Then the stray entries will be deleted silently and no
    RTM_DELROUTE notification will be sent.
    
    This lack of notification can make routing daemons, or monitor like
    `ip monitor route` miss the routing changes. e.g.
    
    + ip link add dummy1 type dummy
    + ip link add dummy2 type dummy
    + ip link set dummy1 up
    + ip link set dummy2 up
    + ip addr add 192.168.5.5/24 dev dummy1
    + ip route add 7.7.7.0/24 dev dummy2 src 192.168.5.5
    + ip -4 route
    7.7.7.0/24 dev dummy2 scope link src 192.168.5.5
    192.168.5.0/24 dev dummy1 proto kernel scope link src 192.168.5.5
    + ip monitor route
    + ip addr del 192.168.5.5/24 dev dummy1
    Deleted 192.168.5.0/24 dev dummy1 proto kernel scope link src 192.168.5.5
    Deleted broadcast 192.168.5.255 dev dummy1 table local proto kernel scope link src 192.168.5.5
    Deleted local 192.168.5.5 dev dummy1 table local proto kernel scope host src 192.168.5.5
    
    As Ido reminded, fib_table_flush() isn't only called when an address is
    deleted, but also when an interface is deleted or put down. The lack of
    notification in these cases is deliberate. And commit 7c6bb7d2faaf
    ("net/ipv6: Add knob to skip DELROUTE message on device down") introduced
    a sysctl to make IPv6 behave like IPv4 in this regard. So we can't send
    the route delete notify blindly in fib_table_flush().
    
    To fix this issue, let's add a new flag in "struct fib_info" to track the
    deleted prefer source address routes, and only send notify for them.
    
    After update:
    + ip monitor route
    + ip addr del 192.168.5.5/24 dev dummy1
    Deleted 192.168.5.0/24 dev dummy1 proto kernel scope link src 192.168.5.5
    Deleted broadcast 192.168.5.255 dev dummy1 table local proto kernel scope link src 192.168.5.5
    Deleted local 192.168.5.5 dev dummy1 table local proto kernel scope host src 192.168.5.5
    Deleted 7.7.7.0/24 dev dummy2 scope link src 192.168.5.5
    
    Suggested-by: Thomas Haller <thaller@redhat.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230922075508.848925-1-liuhangbin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d07b7abd277c225c3a07fba634e4994654243ca
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Sep 22 09:50:39 2023 -0700

    sky2: Make sure there is at least one frag_addr available
    
    [ Upstream commit 6a70e5cbedaf8ad10528ac9ac114f3ec20f422df ]
    
    In the pathological case of building sky2 with 16k PAGE_SIZE, the
    frag_addr[] array would never be used, so the original code was correct
    that size should be 0. But the compiler now gets upset with 0 size arrays
    in places where it hasn't eliminated the code that might access such an
    array (it can't figure out that in this case an rx skb with fragments
    would never be created). To keep the compiler happy, make sure there is
    at least 1 frag_addr in struct rx_ring_info:
    
       In file included from include/linux/skbuff.h:28,
                        from include/net/net_namespace.h:43,
                        from include/linux/netdevice.h:38,
                        from drivers/net/ethernet/marvell/sky2.c:18:
       drivers/net/ethernet/marvell/sky2.c: In function 'sky2_rx_unmap_skb':
       include/linux/dma-mapping.h:416:36: warning: array subscript i is outside array bounds of 'dma_addr_t[0]' {aka 'long long unsigned int[]'} [-Warray-bounds=]
         416 | #define dma_unmap_page(d, a, s, r) dma_unmap_page_attrs(d, a, s, r, 0)
             |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       drivers/net/ethernet/marvell/sky2.c:1257:17: note: in expansion of macro 'dma_unmap_page'
        1257 |                 dma_unmap_page(&pdev->dev, re->frag_addr[i],
             |                 ^~~~~~~~~~~~~~
       In file included from drivers/net/ethernet/marvell/sky2.c:41:
       drivers/net/ethernet/marvell/sky2.h:2198:25: note: while referencing 'frag_addr'
        2198 |         dma_addr_t      frag_addr[ETH_JUMBO_MTU >> PAGE_SHIFT];
             |                         ^~~~~~~~~
    
    With CONFIG_PAGE_SIZE_16KB=y, PAGE_SHIFT == 14, so:
    
      #define ETH_JUMBO_MTU   9000
    
    causes "ETH_JUMBO_MTU >> PAGE_SHIFT" to be 0. Use "?: 1" to solve this build warning.
    
    Cc: Mirko Lindner <mlindner@marvell.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: netdev@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202309191958.UBw1cjXk-lkp@intel.com/
    Reviewed-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f652eb4adf27494292195224b87b346fa0f2652e
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Tue Sep 19 00:50:27 2023 +0200

    regulator/core: Revert "fix kobject release warning and memory leak in regulator_register()"
    
    [ Upstream commit 6e800968f6a715c0661716d2ec5e1f56ed9f9c08 ]
    
    This reverts commit 5f4b204b6b8153923d5be8002c5f7082985d153f.
    
    Since rdev->dev now has a release() callback, the proper way of freeing
    the initialized device can be restored.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/d7f469f3f7b1f0e1d52f9a7ede3f3c5703382090.1695077303.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa77b187b1f09cf98be3a6beb67640954b1d274a
Author: Benjamin Berg <benjamin.berg@intel.com>
Date:   Mon Sep 25 17:18:56 2023 +0200

    wifi: cfg80211: avoid leaking stack data into trace
    
    [ Upstream commit 334bf33eec5701a1e4e967bcb7cc8611a998334b ]
    
    If the structure is not initialized then boolean types might be copied
    into the tracing data without being initialised. This causes data from
    the stack to leak into the trace and also triggers a UBSAN failure which
    can easily be avoided here.
    
    Signed-off-by: Benjamin Berg <benjamin.berg@intel.com>
    Link: https://lore.kernel.org/r/20230925171855.a9271ef53b05.I8180bae663984c91a3e036b87f36a640ba409817@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30a2285a2e1897b044cd19beb59d172d51632635
Author: Wen Gong <quic_wgong@quicinc.com>
Date:   Tue Aug 1 02:47:51 2023 -0400

    wifi: mac80211: allow transmitting EAPOL frames with tainted key
    
    [ Upstream commit 61304336c67358d49a989e5e0060d8c99bad6ca8 ]
    
    Lower layer device driver stop/wake TX by calling ieee80211_stop_queue()/
    ieee80211_wake_queue() while hw scan. Sometimes hw scan and PTK rekey are
    running in parallel, when M4 sent from wpa_supplicant arrive while the TX
    queue is stopped, then the M4 will pending send, and then new key install
    from wpa_supplicant. After TX queue wake up by lower layer device driver,
    the M4 will be dropped by below call stack.
    
    When key install started, the current key flag is set KEY_FLAG_TAINTED in
    ieee80211_pairwise_rekey(), and then mac80211 wait key install complete by
    lower layer device driver. Meanwhile ieee80211_tx_h_select_key() will return
    TX_DROP for the M4 in step 12 below, and then ieee80211_free_txskb() called
    by ieee80211_tx_dequeue(), so the M4 will not send and free, then the rekey
    process failed becaue AP not receive M4. Please see details in steps below.
    
    There are a interval between KEY_FLAG_TAINTED set for current key flag and
    install key complete by lower layer device driver, the KEY_FLAG_TAINTED is
    set in this interval, all packet including M4 will be dropped in this
    interval, the interval is step 8~13 as below.
    
    issue steps:
          TX thread                 install key thread
    1.   stop_queue                      -idle-
    2.   sending M4                      -idle-
    3.   M4 pending                      -idle-
    4.     -idle-                  starting install key from wpa_supplicant
    5.     -idle-                  =>ieee80211_key_replace()
    6.     -idle-                  =>ieee80211_pairwise_rekey() and set
                                     currently key->flags |= KEY_FLAG_TAINTED
    7.     -idle-                  =>ieee80211_key_enable_hw_accel()
    8.     -idle-                  =>drv_set_key() and waiting key install
                                     complete from lower layer device driver
    9.   wake_queue                     -waiting state-
    10.  re-sending M4                  -waiting state-
    11.  =>ieee80211_tx_h_select_key()  -waiting state-
    12.  drop M4 by KEY_FLAG_TAINTED    -waiting state-
    13.    -idle-                   install key complete with success/fail
                                      success: clear flag KEY_FLAG_TAINTED
                                      fail: start disconnect
    
    Hence add check in step 11 above to allow the EAPOL send out in the
    interval. If lower layer device driver use the old key/cipher to encrypt
    the M4, then AP received/decrypt M4 correctly, after M4 send out, lower
    layer device driver install the new key/cipher to hardware and return
    success.
    
    If lower layer device driver use new key/cipher to send the M4, then AP
    will/should drop the M4, then it is same result with this issue, AP will/
    should kick out station as well as this issue.
    
    issue log:
    kworker/u16:4-5238  [000]  6456.108926: stop_queue:           phy1 queue:0, reason:0
    wpa_supplicant-961  [003]  6456.119737: rdev_tx_control_port: wiphy_name=phy1 name=wlan0 ifindex=6 dest=ARRAY[9e, 05, 31, 20, 9b, d0] proto=36488 unencrypted=0
    wpa_supplicant-961  [003]  6456.119839: rdev_return_int_cookie: phy1, returned 0, cookie: 504
    wpa_supplicant-961  [003]  6456.120287: rdev_add_key:         phy1, netdev:wlan0(6), key_index: 0, mode: 0, pairwise: true, mac addr: 9e:05:31:20:9b:d0
    wpa_supplicant-961  [003]  6456.120453: drv_set_key:          phy1 vif:wlan0(2) sta:9e:05:31:20:9b:d0 cipher:0xfac04, flags=0x9, keyidx=0, hw_key_idx=0
    kworker/u16:9-3829  [001]  6456.168240: wake_queue:           phy1 queue:0, reason:0
    kworker/u16:9-3829  [001]  6456.168255: drv_wake_tx_queue:    phy1 vif:wlan0(2) sta:9e:05:31:20:9b:d0 ac:0 tid:7
    kworker/u16:9-3829  [001]  6456.168305: cfg80211_control_port_tx_status: wdev(1), cookie: 504, ack: false
    wpa_supplicant-961  [003]  6459.167982: drv_return_int:       phy1 - -110
    
    issue call stack:
    nl80211_frame_tx_status+0x230/0x340 [cfg80211]
    cfg80211_control_port_tx_status+0x1c/0x28 [cfg80211]
    ieee80211_report_used_skb+0x374/0x3e8 [mac80211]
    ieee80211_free_txskb+0x24/0x40 [mac80211]
    ieee80211_tx_dequeue+0x644/0x954 [mac80211]
    ath10k_mac_tx_push_txq+0xac/0x238 [ath10k_core]
    ath10k_mac_op_wake_tx_queue+0xac/0xe0 [ath10k_core]
    drv_wake_tx_queue+0x80/0x168 [mac80211]
    __ieee80211_wake_txqs+0xe8/0x1c8 [mac80211]
    _ieee80211_wake_txqs+0xb4/0x120 [mac80211]
    ieee80211_wake_txqs+0x48/0x80 [mac80211]
    tasklet_action_common+0xa8/0x254
    tasklet_action+0x2c/0x38
    __do_softirq+0xdc/0x384
    
    Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
    Link: https://lore.kernel.org/r/20230801064751.25803-1-quic_wgong@quicinc.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b64eb31a1b53b83ce35ce2f869b558ae669413a4
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Mon Sep 18 14:10:54 2023 +0300

    wifi: cfg80211: Fix 6GHz scan configuration
    
    [ Upstream commit 0914468adf92296c4cba8a2134e06e3dea150f2e ]
    
    When the scan request includes a non broadcast BSSID, when adding the
    scan parameters for 6GHz collocated scanning, do not include entries
    that do not match the given BSSID.
    
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230918140607.6d31d2a96baf.I6c4e3e3075d1d1878ee41f45190fdc6b86f18708@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbec1724519ecd9c468d1186a8f30b7567175bfb
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Sep 15 14:42:27 2023 -0700

    Bluetooth: hci_core: Fix build warnings
    
    [ Upstream commit dcda165706b9fbfd685898d46a6749d7d397e0c0 ]
    
    This fixes the following warnings:
    
    net/bluetooth/hci_core.c: In function ‘hci_register_dev’:
    net/bluetooth/hci_core.c:2620:54: warning: ‘%d’ directive output may
    be truncated writing between 1 and 10 bytes into a region of size 5
    [-Wformat-truncation=]
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |                                                      ^~
    net/bluetooth/hci_core.c:2620:50: note: directive argument in the range
    [0, 2147483647]
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |                                                  ^~~~~~~
    net/bluetooth/hci_core.c:2620:9: note: ‘snprintf’ output between 5 and
    14 bytes into a destination of size 8
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02b0e6991838791a593657b8f0811fa3170df3d7
Author: Ying Hsu <yinghsu@chromium.org>
Date:   Thu Sep 7 04:39:34 2023 +0000

    Bluetooth: Avoid redundant authentication
    
    [ Upstream commit 1d8e801422d66e4b8c7b187c52196bef94eed887 ]
    
    While executing the Android 13 CTS Verifier Secure Server test on a
    ChromeOS device, it was observed that the Bluetooth host initiates
    authentication for an RFCOMM connection after SSP completes.
    When this happens, some Intel Bluetooth controllers, like AC9560, would
    disconnect with "Connection Rejected due to Security Reasons (0x0e)".
    
    Historically, BlueZ did not mandate this authentication while an
    authenticated combination key was already in use for the connection.
    This behavior was changed since commit 7b5a9241b780
    ("Bluetooth: Introduce requirements for security level 4").
    So, this patch addresses the aforementioned disconnection issue by
    restoring the previous behavior.
    
    Signed-off-by: Ying Hsu <yinghsu@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38681af225b608f4bad6769b3b30358bf655bbaa
Author: Rocky Liao <quic_rjliao@quicinc.com>
Date:   Mon Aug 7 14:46:26 2023 +0800

    Bluetooth: btusb: add shutdown function for QCA6174
    
    [ Upstream commit 187f8b648cc16f07c66ab1d89d961bdcff779bf7 ]
    
    We should send hci reset command before bt turn off, which can reset bt
    firmware status.
    
    Signed-off-by: Rocky Liao <quic_rjliao@quicinc.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6e9a32c3e605738d83559ebdcf5bf3380f4a029
Author: Ma Ke <make_ruc2021@163.com>
Date:   Mon Sep 18 10:40:59 2023 +0800

    HID: holtek: fix slab-out-of-bounds Write in holtek_kbd_input_event
    
    [ Upstream commit ffe3b7837a2bb421df84d0177481db9f52c93a71 ]
    
    There is a slab-out-of-bounds Write bug in hid-holtek-kbd driver.
    The problem is the driver assumes the device must have an input
    but some malicious devices violate this assumption.
    
    Fix this by checking hid_device's input is non-empty before its usage.
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06aabf7715dab554a753741d4cd077d29716260d
Author: Ben Greear <greearb@candelatech.com>
Date:   Tue Aug 8 13:56:05 2023 -0700

    wifi: iwlwifi: Ensure ack flag is properly cleared.
    
    [ Upstream commit e8fbe99e87877f0412655f40d7c45bf8471470ac ]
    
    Debugging indicates that nothing else is clearing the info->flags,
    so some frames were flagged as ACKed when they should not be.
    Explicitly clear the ack flag to ensure this does not happen.
    
    Signed-off-by: Ben Greear <greearb@candelatech.com>
    Acked-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230808205605.4105670-1-greearb@candelatech.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6063f6f64fa4f156613b1feee1deb0fadc0e7a16
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Aug 24 21:10:45 2023 -0600

    wifi: mwifiex: Sanity check tlv_len and tlv_bitmap_len
    
    [ Upstream commit d5a93b7d2877aae4ba7590ad6cb65f8d33079489 ]
    
    Add sanity checks for both `tlv_len` and `tlv_bitmap_len` before
    decoding data from `event_buf`.
    
    This prevents any malicious or buggy firmware from overflowing
    `event_buf` through large values for `tlv_len` and `tlv_bitmap_len`.
    
    Suggested-by: Dan Williams <dcbw@redhat.com>
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/d4f8780527d551552ee96f17a0229e02e1c200d1.1692931954.git.gustavoars@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59ebfeb7b319b0a942e09ddf3c7c6e11c8de7db3
Author: Clément Léger <cleger@rivosinc.com>
Date:   Fri Sep 29 21:16:37 2023 +0200

    tracing: relax trace_event_eval_update() execution with cond_resched()
    
    [ Upstream commit 23cce5f25491968b23fb9c399bbfb25f13870cd9 ]
    
    When kernel is compiled without preemption, the eval_map_work_func()
    (which calls trace_event_eval_update()) will not be preempted up to its
    complete execution. This can actually cause a problem since if another
    CPU call stop_machine(), the call will have to wait for the
    eval_map_work_func() function to finish executing in the workqueue
    before being able to be scheduled. This problem was observe on a SMP
    system at boot time, when the CPU calling the initcalls executed
    clocksource_done_booting() which in the end calls stop_machine(). We
    observed a 1 second delay because one CPU was executing
    eval_map_work_func() and was not preempted by the stop_machine() task.
    
    Adding a call to cond_resched() in trace_event_eval_update() allows
    other tasks to be executed and thus continue working asynchronously
    like before without blocking any pending task at boot time.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230929191637.416931-1-cleger@rivosinc.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Clément Léger <cleger@rivosinc.com>
    Tested-by: Atish Patra <atishp@rivosinc.com>
    Reviewed-by: Atish Patra <atishp@rivosinc.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d85fb391fa71abe18567a1a6b76843d80fba7c3
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Tue Sep 12 09:08:40 2023 +0900

    ata: libata-eh: Fix compilation warning in ata_eh_link_report()
    
    [ Upstream commit 49728bdc702391902a473b9393f1620eea32acb0 ]
    
    The 6 bytes length of the tries_buf string in ata_eh_link_report() is
    too short and results in a gcc compilation warning with W-!:
    
    drivers/ata/libata-eh.c: In function ‘ata_eh_link_report’:
    drivers/ata/libata-eh.c:2371:59: warning: ‘%d’ directive output may be truncated writing between 1 and 11 bytes into a region of size 4 [-Wformat-truncation=]
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                                                           ^~
    drivers/ata/libata-eh.c:2371:56: note: directive argument in the range [-2147483648, 4]
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                                                        ^~~~~~
    drivers/ata/libata-eh.c:2371:17: note: ‘snprintf’ output between 4 and 14 bytes into a destination of size 6
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     2372 |                          ap->eh_tries);
          |                          ~~~~~~~~~~~~~
    
    Avoid this warning by increasing the string size to 16B.
    
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89e3cc1b07033bea69cd333eb088e9790bcac34d
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Tue Sep 12 08:46:22 2023 +0900

    ata: libata-core: Fix compilation warning in ata_dev_config_ncq()
    
    [ Upstream commit ed518d9ba980dc0d27c7d1dea1e627ba001d1977 ]
    
    The 24 bytes length allocated to the ncq_desc string in
    ata_dev_config_lba() for ata_dev_config_ncq() to use is too short,
    causing the following gcc compilation warnings when compiling with W=1:
    
    drivers/ata/libata-core.c: In function ‘ata_dev_configure’:
    drivers/ata/libata-core.c:2378:56: warning: ‘%d’ directive output may be truncated writing between 1 and 2 bytes into a region of size between 1 and 11 [-Wformat-truncation=]
     2378 |                 snprintf(desc, desc_sz, "NCQ (depth %d/%d)%s", hdepth,
          |                                                        ^~
    In function ‘ata_dev_config_ncq’,
        inlined from ‘ata_dev_config_lba’ at drivers/ata/libata-core.c:2649:8,
        inlined from ‘ata_dev_configure’ at drivers/ata/libata-core.c:2952:9:
    drivers/ata/libata-core.c:2378:41: note: directive argument in the range [1, 32]
     2378 |                 snprintf(desc, desc_sz, "NCQ (depth %d/%d)%s", hdepth,
          |                                         ^~~~~~~~~~~~~~~~~~~~~
    drivers/ata/libata-core.c:2378:17: note: ‘snprintf’ output between 16 and 31 bytes into a destination of size 24
     2378 |                 snprintf(desc, desc_sz, "NCQ (depth %d/%d)%s", hdepth,
          |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     2379 |                         ddepth, aa_desc);
          |                         ~~~~~~~~~~~~~~~~
    
    Avoid these warnings and the potential truncation by changing the size
    of the ncq_desc string to 32 characters.
    
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 137c658ea3cec28f52674a8ff52b87c7fa14ad8a
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Tue Sep 26 10:29:14 2023 +0000

    gpio: timberdale: Fix potential deadlock on &tgpio->lock
    
    [ Upstream commit 9e8bc2dda5a7a8e2babc9975f4b11c9a6196e490 ]
    
    As timbgpio_irq_enable()/timbgpio_irq_disable() callback could be
    executed under irq context, it could introduce double locks on
    &tgpio->lock if it preempts other execution units requiring
    the same locks.
    
    timbgpio_gpio_set()
    --> timbgpio_update_bit()
    --> spin_lock(&tgpio->lock)
    <interrupt>
       --> timbgpio_irq_disable()
       --> spin_lock_irqsave(&tgpio->lock)
    
    This flaw was found by an experimental static analysis tool I am
    developing for irq-related deadlock.
    
    To prevent the potential deadlock, the patch uses spin_lock_irqsave()
    on &tgpio->lock inside timbgpio_gpio_set() to prevent the possible
    deadlock scenario.
    
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68f106c2b2abefb255ee83e6687f12120f0d7292
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Sep 13 09:33:12 2023 -0400

    overlayfs: set ctime when setting mtime and atime
    
    [ Upstream commit 03dbab3bba5f009d053635c729d1244f2c8bad38 ]
    
    Nathan reported that he was seeing the new warning in
    setattr_copy_mgtime pop when starting podman containers. Overlayfs is
    trying to set the atime and mtime via notify_change without also
    setting the ctime.
    
    POSIX states that when the atime and mtime are updated via utimes() that
    we must also update the ctime to the current time. The situation with
    overlayfs copy-up is analogies, so add ATTR_CTIME to the bitmask.
    notify_change will fill in the value.
    
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Christian Brauner <brauner@kernel.org>
    Acked-by: Amir Goldstein <amir73il@gmail.com>
    Message-Id: <20230913-ctime-v1-1-c6bc509cbc27@kernel.org>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef3c62e2f0f198aa5154e815b315624144b5ffe4
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Sep 23 23:54:06 2023 +0200

    i2c: mux: Avoid potential false error message in i2c_mux_add_adapter
    
    [ Upstream commit b13e59e74ff71a1004e0508107e91e9a84fd7388 ]
    
    I2C_CLASS_DEPRECATED is a flag and not an actual class.
    There's nothing speaking against both, parent and child, having
    I2C_CLASS_DEPRECATED set. Therefore exclude it from the check.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Acked-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2f64f3eebaae6ce54a2f35e435394ee6e7286ba
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 5 12:15:24 2023 -0400

    btrfs: initialize start_slot in btrfs_log_prealloc_extents
    
    [ Upstream commit b4c639f699349880b7918b861e1bd360442ec450 ]
    
    Jens reported a compiler warning when using
    CONFIG_CC_OPTIMIZE_FOR_SIZE=y that looks like this
    
      fs/btrfs/tree-log.c: In function ‘btrfs_log_prealloc_extents’:
      fs/btrfs/tree-log.c:4828:23: warning: ‘start_slot’ may be used
      uninitialized [-Wmaybe-uninitialized]
       4828 |                 ret = copy_items(trans, inode, dst_path, path,
            |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       4829 |                                  start_slot, ins_nr, 1, 0);
            |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~
      fs/btrfs/tree-log.c:4725:13: note: ‘start_slot’ was declared here
       4725 |         int start_slot;
            |             ^~~~~~~~~~
    
    The compiler is incorrect, as we only use this code when ins_len > 0,
    and when ins_len > 0 we have start_slot properly initialized.  However
    we generally find the -Wmaybe-uninitialized warnings valuable, so
    initialize start_slot to get rid of the warning.
    
    Reported-by: Jens Axboe <axboe@kernel.dk>
    Tested-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 266dab0ce42dedc1845551257a8951da6d47361e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Sep 8 18:20:23 2023 +0100

    btrfs: return -EUCLEAN for delayed tree ref with a ref count not equals to 1
    
    [ Upstream commit 1bf76df3fee56d6637718e267f7c34ed70d0c7dc ]
    
    When running a delayed tree reference, if we find a ref count different
    from 1, we return -EIO. This isn't an IO error, as it indicates either a
    bug in the delayed refs code or a memory corruption, so change the error
    code from -EIO to -EUCLEAN. Also tag the branch as 'unlikely' as this is
    not expected to ever happen, and change the error message to print the
    tree block's bytenr without the parenthesis (and there was a missing space
    between the 'block' word and the opening parenthesis), for consistency as
    that's the style we used everywhere else.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc424f18fbdcb62e959a3fcd1c61ca20e9bf6f57
Author: Chunhai Guo <guochunhai@vivo.com>
Date:   Fri Sep 15 22:51:31 2023 -0600

    fs-writeback: do not requeue a clean inode having skipped pages
    
    [ Upstream commit be049c3a088d512187407b7fd036cecfab46d565 ]
    
    When writing back an inode and performing an fsync on it concurrently, a
    deadlock issue may arise as shown below. In each writeback iteration, a
    clean inode is requeued to the wb->b_dirty queue due to non-zero
    pages_skipped, without anything actually being written. This causes an
    infinite loop and prevents the plug from being flushed, resulting in a
    deadlock. We now avoid requeuing the clean inode to prevent this issue.
    
        wb_writeback        fsync (inode-Y)
    blk_start_plug(&plug)
    for (;;) {
      iter i-1: some reqs with page-X added into plug->mq_list // f2fs node page-X with PG_writeback
                            filemap_fdatawrite
                              __filemap_fdatawrite_range // write inode-Y with sync_mode WB_SYNC_ALL
                               do_writepages
                                f2fs_write_data_pages
                                 __f2fs_write_data_pages // wb_sync_req[DATA]++ for WB_SYNC_ALL
                                  f2fs_write_cache_pages
                                   f2fs_write_single_data_page
                                    f2fs_do_write_data_page
                                     f2fs_outplace_write_data
                                      f2fs_update_data_blkaddr
                                       f2fs_wait_on_page_writeback
                                         wait_on_page_writeback // wait for f2fs node page-X
      iter i:
        progress = __writeback_inodes_wb(wb, work)
        . writeback_sb_inodes
        .   __writeback_single_inode // write inode-Y with sync_mode WB_SYNC_NONE
        .   . do_writepages
        .   .   f2fs_write_data_pages
        .   .   .  __f2fs_write_data_pages // skip writepages due to (wb_sync_req[DATA]>0)
        .   .   .   wbc->pages_skipped += get_dirty_pages(inode) // wbc->pages_skipped = 1
        .   if (!(inode->i_state & I_DIRTY_ALL)) // i_state = I_SYNC | I_SYNC_QUEUED
        .    total_wrote++;  // total_wrote = 1
        .   requeue_inode // requeue inode-Y to wb->b_dirty queue due to non-zero pages_skipped
        if (progress) // progress = 1
          continue;
      iter i+1:
          queue_io
          // similar process with iter i, infinite for-loop !
    }
    blk_finish_plug(&plug)   // flush plug won't be called
    
    Signed-off-by: Chunhai Guo <guochunhai@vivo.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230916045131.957929-1-guochunhai@vivo.com>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92609823592c5d321f0b02638bf86fce5e0b7991
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 11 07:07:38 2023 +0300

    ARM: dts: ti: omap: Fix noisy serial with overrun-throttle-ms for mapphone
    
    [ Upstream commit 5ad37b5e30433afa7a5513e3eb61f69fa0976785 ]
    
    On mapphone devices we may get lots of noise on the micro-USB port in debug
    uart mode until the phy-cpcap-usb driver probes. Let's limit the noise by
    using overrun-throttle-ms.
    
    Note that there is also a related separate issue where the charger cable
    connected may cause random sysrq requests until phy-cpcap-usb probes that
    still remains.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3898d8d685ab422a74d4e23500e4b45940ef1cf4
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Fri Oct 6 10:41:36 2023 +0900

    ksmbd: not allow to open file if delelete on close bit is set
    
    [ Upstream commit f43328357defc0dc9d28dbd06dc3361fd2b22e28 ]
    
    Cthon test fail with the following error.
    
    check for proper open/unlink operation
    nfsjunk files before unlink:
      -rwxr-xr-x 1 root root 0  9월 25 11:03 ./nfs2y8Jm9
    ./nfs2y8Jm9 open; unlink ret = 0
    nfsjunk files after unlink:
      -rwxr-xr-x 1 root root 0  9월 25 11:03 ./nfs2y8Jm9
    data compare ok
    nfsjunk files after close:
      ls: cannot access './nfs2y8Jm9': No such file or directory
    special tests failed
    
    Cthon expect to second unlink failure when file is already unlinked.
    ksmbd can not allow to open file if flags of ksmbd inode is set with
    S_DEL_ON_CLS flags.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3dc26c4fdc29175b19ac5f8a4eaf96a7dd012c6
Author: Yanguo Li <yanguo.li@corigine.com>
Date:   Mon Oct 9 13:21:55 2023 +0200

    nfp: flower: avoid rmmod nfp crash issues
    
    [ Upstream commit 14690995c14109852c7ba6e316045c02e4254272 ]
    
    When there are CT table entries, and you rmmod nfp, the following
    events can happen:
    
    task1：
        nfp_net_pci_remove
              ↓
        nfp_flower_stop->(asynchronous)tcf_ct_flow_table_cleanup_work(3)
              ↓
        nfp_zone_table_entry_destroy(1)
    
    task2：
        nfp_fl_ct_handle_nft_flow(2)
    
    When the execution order is (1)->(2)->(3), it will crash. Therefore, in
    the function nfp_fl_ct_del_flow, nf_flow_table_offload_del_cb needs to
    be executed synchronously.
    
    At the same time, in order to solve the deadlock problem and the problem
    of rtnl_lock sometimes failing, replace rtnl_lock with the private
    nfp_fl_lock.
    
    Fixes: 7cc93d888df7 ("nfp: flower-ct: remove callback delete deadlock")
    Cc: stable@vger.kernel.org
    Signed-off-by: Yanguo Li <yanguo.li@corigine.com>
    Signed-off-by: Louis Peens <louis.peens@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c52b12159049046483fdb0c411a0a1869c41a67
Author: Jeremy Kerr <jk@codeconstruct.com.au>
Date:   Mon Oct 9 15:56:45 2023 +0800

    mctp: perform route lookups under a RCU read-side lock
    
    [ Upstream commit 5093bbfc10ab6636b32728e35813cbd79feb063c ]
    
    Our current route lookups (mctp_route_lookup and mctp_route_lookup_null)
    traverse the net's route list without the RCU read lock held. This means
    the route lookup is subject to preemption, resulting in an potential
    grace period expiry, and so an eventual kfree() while we still have the
    route pointer.
    
    Add the proper read-side critical section locks around the route
    lookups, preventing premption and a possible parallel kfree.
    
    The remaining net->mctp.routes accesses are already under a
    rcu_read_lock, or protected by the RTNL for updates.
    
    Based on an analysis from Sili Luo <rootlab@huawei.com>, where
    introducing a delay in the route lookup could cause a UAF on
    simultaneous sendmsg() and route deletion.
    
    Reported-by: Sili Luo <rootlab@huawei.com>
    Fixes: 889b7da23abf ("mctp: Add initial routing framework")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeremy Kerr <jk@codeconstruct.com.au>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/29c4b0e67dc1bf3571df3982de87df90cae9b631.1696837310.git.jk@codeconstruct.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db3f17e571e871b56cbebaf187640b57d037b091
Author: Jeremy Kerr <jk@codeconstruct.com.au>
Date:   Wed Sep 29 15:26:06 2021 +0800

    mctp: Allow local delivery to the null EID
    
    [ Upstream commit 1f6c77ac9e6ecef152fd5df94c4b3c346adb197a ]
    
    We may need to receive packets addressed to the null EID (==0), but
    addressed to us at the physical layer.
    
    This change adds a lookup for local routes when we see a packet
    addressed to EID 0, and a local phys address.
    
    Signed-off-by: Jeremy Kerr <jk@codeconstruct.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 5093bbfc10ab ("mctp: perform route lookups under a RCU read-side lock")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29017ab1a539101d9c7bec63cc13a019f97b2820
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Oct 10 22:47:50 2023 +1100

    powerpc/47x: Fix 47x syscall return crash
    
    [ Upstream commit f0eee815babed70a749d2496a7678be5b45b4c14 ]
    
    Eddie reported that newer kernels were crashing during boot on his 476
    FSP2 system:
    
      kernel tried to execute user page (b7ee2000) - exploit attempt? (uid: 0)
      BUG: Unable to handle kernel instruction fetch
      Faulting instruction address: 0xb7ee2000
      Oops: Kernel access of bad area, sig: 11 [#1]
      BE PAGE_SIZE=4K FSP-2
      Modules linked in:
      CPU: 0 PID: 61 Comm: mount Not tainted 6.1.55-d23900f.ppcnf-fsp2 #1
      Hardware name: ibm,fsp2 476fpe 0x7ff520c0 FSP-2
      NIP:  b7ee2000 LR: 8c008000 CTR: 00000000
      REGS: bffebd83 TRAP: 0400   Not tainted (6.1.55-d23900f.ppcnf-fs p2)
      MSR:  00000030 <IR,DR>  CR: 00001000  XER: 20000000
      GPR00: c00110ac bffebe63 bffebe7e bffebe88 8c008000 00001000 00000d12 b7ee2000
      GPR08: 00000033 00000000 00000000 c139df10 48224824 1016c314 10160000 00000000
      GPR16: 10160000 10160000 00000008 00000000 10160000 00000000 10160000 1017f5b0
      GPR24: 1017fa50 1017f4f0 1017fa50 1017f740 1017f630 00000000 00000000 1017f4f0
      NIP [b7ee2000] 0xb7ee2000
      LR [8c008000] 0x8c008000
      Call Trace:
      Instruction dump:
      XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
      XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
      ---[ end trace 0000000000000000 ]---
    
    The problem is in ret_from_syscall where the check for
    icache_44x_need_flush is done. When the flush is needed the code jumps
    out-of-line to do the flush, and then intends to jump back to continue
    the syscall return.
    
    However the branch back to label 1b doesn't return to the correct
    location, instead branching back just prior to the return to userspace,
    causing bogus register values to be used by the rfi.
    
    The breakage was introduced by commit 6f76a01173cc
    ("powerpc/syscall: implement system call entry/exit logic in C for PPC32") which
    inadvertently removed the "1" label and reused it elsewhere.
    
    Fix it by adding named local labels in the correct locations. Note that
    the return label needs to be outside the ifdef so that CONFIG_PPC_47x=n
    compiles.
    
    Fixes: 6f76a01173cc ("powerpc/syscall: implement system call entry/exit logic in C for PPC32")
    Cc: stable@vger.kernel.org # v5.12+
    Reported-by: Eddie James <eajames@linux.ibm.com>
    Tested-by: Eddie James <eajames@linux.ibm.com>
    Link: https://lore.kernel.org/linuxppc-dev/fdaadc46-7476-9237-e104-1d2168526e72@linux.ibm.com/
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Link: https://msgid.link/20231010114750.847794-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 558ee0fafd404dfbcef864945310b9a98d459678
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Tue Oct 19 09:29:17 2021 +0200

    powerpc/32s: Do kuep_lock() and kuep_unlock() in assembly
    
    [ Upstream commit 526d4a4c77aedf1b7df1133e5cced29c70232e6e ]
    
    When interrupt and syscall entries where converted to C, KUEP locking
    and unlocking was also converted. It improved performance by unrolling
    the loop, and allowed easily implementing boot time deactivation of
    KUEP.
    
    However, null_syscall selftest shows that KUEP is still heavy
    (361 cycles with KUEP, 212 cycles without).
    
    A way to improve more is to group 'mtsr's together, instead of
    repeating 'addi' + 'mtsr' several times.
    
    In order to do that, more registers need to be available. In C, GCC
    will always be able to provide the requested number of registers, but
    at the cost of saving some data on the stack, which is counter
    performant here.
    
    So let's do it in assembly, when we have full control of which
    register can be used. It also has the advantage of locking earlier
    and unlocking later and it helps GCC generating less tricky code.
    The only drawback is to make boot time deactivation less straight
    forward and require 'hand' instruction patching.
    
    Group 'mtsr's by 4.
    
    With this change, null_syscall selftest reports 336 cycles. Without
    the change it was 361 cycles, that's a 7% reduction.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/115cb279e9b9948dfd93a065e047081c59e3a2a6.1634627931.git.christophe.leroy@csgroup.eu
    Stable-dep-of: f0eee815babe ("powerpc/47x: Fix 47x syscall return crash")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d00f4ae3accfed3fb5763dd600efc6d26bbadabe
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Tue Oct 19 09:29:16 2021 +0200

    powerpc/32s: Remove capability to disable KUEP at boottime
    
    [ Upstream commit df415cd758261bceff27f34a145dd8328bbfb018 ]
    
    Disabling KUEP at boottime makes things unnecessarily complex.
    
    Still allow disabling KUEP at build time, but when it's built-in
    it is always there.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/96f583f82423a29a4205c60b9721079111b35567.1634627931.git.christophe.leroy@csgroup.eu
    Stable-dep-of: f0eee815babe ("powerpc/47x: Fix 47x syscall return crash")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcb3f09e817345ce629b895f7a96ae90eb32ec9d
Author: Simon Ser <contact@emersion.fr>
Date:   Thu Oct 5 13:16:32 2023 +0000

    drm/atomic-helper: relax unregistered connector check
    
    [ Upstream commit 2b7947bd32e243c52870d54141d3b4ea6775e63d ]
    
    The driver might pull connectors which weren't submitted by
    user-space into the atomic state. For instance,
    intel_dp_mst_atomic_master_trans_check() pulls in connectors
    sharing the same DP-MST stream. However, if the connector is
    unregistered, this later fails with:
    
        [  559.425658] i915 0000:00:02.0: [drm:drm_atomic_helper_check_modeset] [CONNECTOR:378:DP-7] is not registered
    
    Skip the unregistered connector check to allow user-space to turn
    off connectors one-by-one.
    
    See this wlroots issue:
    https://gitlab.freedesktop.org/wlroots/wlroots/-/issues/3407
    
    Previous discussion:
    https://lore.kernel.org/intel-gfx/Y6GX7z17WmDSKwta@ideak-desk.fi.intel.com/
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Cc: stable@vger.kernel.org
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231005131623.114379-1-contact@emersion.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 403d201d1fd144cb249836dafb222f6375871c6c
Author: JP Kobryn <inwardvessel@gmail.com>
Date:   Fri Oct 6 11:57:26 2023 -0700

    perf/x86/lbr: Filter vsyscall addresses
    
    [ Upstream commit e53899771a02f798d436655efbd9d4b46c0f9265 ]
    
    We found that a panic can occur when a vsyscall is made while LBR sampling
    is active. If the vsyscall is interrupted (NMI) for perf sampling, this
    call sequence can occur (most recent at top):
    
        __insn_get_emulate_prefix()
        insn_get_emulate_prefix()
        insn_get_prefixes()
        insn_get_opcode()
        decode_branch_type()
        get_branch_type()
        intel_pmu_lbr_filter()
        intel_pmu_handle_irq()
        perf_event_nmi_handler()
    
    Within __insn_get_emulate_prefix() at frame 0, a macro is called:
    
        peek_nbyte_next(insn_byte_t, insn, i)
    
    Within this macro, this dereference occurs:
    
        (insn)->next_byte
    
    Inspecting registers at this point, the value of the next_byte field is the
    address of the vsyscall made, for example the location of the vsyscall
    version of gettimeofday() at 0xffffffffff600000. The access to an address
    in the vsyscall region will trigger an oops due to an unhandled page fault.
    
    To fix the bug, filtering for vsyscalls can be done when
    determining the branch type. This patch will return
    a "none" branch if a kernel address if found to lie in the
    vsyscall region.
    
    Suggested-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: JP Kobryn <inwardvessel@gmail.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 419ac18d880868efe291215bbb4296c39a3d8169
Author: Sandipan Das <sandipan.das@amd.com>
Date:   Thu Aug 11 17:59:56 2022 +0530

    perf/x86: Move branch classifier
    
    [ Upstream commit 4462fbfe6ec1bfe2196b977010f6ce7b43a32f2c ]
    
    Commit 3e702ff6d1ea ("perf/x86: Add LBR software filter support for Intel
    CPUs") introduces a software branch filter which complements the hardware
    branch filter and adds an x86 branch classifier.
    
    Move the branch classifier to arch/x86/events/ so that it can be utilized
    by other vendors for branch record filtering.
    
    Signed-off-by: Sandipan Das <sandipan.das@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/bae5b95470d6bd49f40954bd379f414f5afcb965.1660211399.git.sandipan.das@amd.com
    Stable-dep-of: e53899771a02 ("perf/x86/lbr: Filter vsyscall addresses")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 030099bc9115ec0db1de33665eb47bc8cade9e62
Author: Anshuman Khandual <anshuman.khandual@arm.com>
Date:   Thu Feb 24 11:06:54 2022 +0530

    perf: Add irq and exception return branch types
    
    [ Upstream commit cedd3614e5d9c80908099c19f8716714ce0610b1 ]
    
    This expands generic branch type classification by adding two more entries
    there in i.e irq and exception return. Also updates the x86 implementation
    to process X86_BR_IRET and X86_BR_IRQ records as appropriate. This changes
    branch types reported to user space on x86 platform but it should not be a
    problem. The possible scenarios and impacts are enumerated here.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/1645681014-3346-1-git-send-email-anshuman.khandual@arm.com
    Stable-dep-of: e53899771a02 ("perf/x86/lbr: Filter vsyscall addresses")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae80d5290c1449b4cbe0234cfbfc2c760bc6e1e9
Author: Alisa-Dariana Roman <alisa.roman@analog.com>
Date:   Sun Sep 24 18:21:48 2023 +0300

    iio: adc: ad7192: Correct reference voltage
    
    [ Upstream commit 7e7dcab620cd6d34939f615cac63fc0ef7e81c72 ]
    
    The avdd and the reference voltage are two different sources but the
    reference voltage was assigned according to the avdd supply.
    
    Add vref regulator structure and set the reference voltage according to
    the vref supply from the devicetree.
    
    In case vref supply is missing, reference voltage is set according to
    the avdd supply for compatibility with old devicetrees.
    
    Fixes: b581f748cce0 ("staging: iio: adc: ad7192: move out of staging")
    Signed-off-by: Alisa-Dariana Roman <alisa.roman@analog.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230924152149.41884-1-alisadariana@gmail.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 569a126f244b9ce46e446b769915610f98d85cbc
Author: Tzung-Bi Shih <tzungbi@kernel.org>
Date:   Tue Aug 29 11:06:22 2023 +0800

    iio: cros_ec: fix an use-after-free in cros_ec_sensors_push_data()
    
    [ Upstream commit 7771c8c80d62ad065637ef74ed2962983f6c5f6d ]
    
    cros_ec_sensors_push_data() reads `indio_dev->active_scan_mask` and
    calls iio_push_to_buffers_with_timestamp() without making sure the
    `indio_dev` stays in buffer mode.  There is a race if `indio_dev` exits
    buffer mode right before cros_ec_sensors_push_data() accesses them.
    
    An use-after-free on `indio_dev->active_scan_mask` was observed.  The
    call trace:
    [...]
     _find_next_bit
     cros_ec_sensors_push_data
     cros_ec_sensorhub_event
     blocking_notifier_call_chain
     cros_ec_irq_thread
    
    It was caused by a race condition: one thread just freed
    `active_scan_mask` at [1]; while another thread tried to access the
    memory at [2].
    
    Fix it by calling iio_device_claim_buffer_mode() to ensure the
    `indio_dev` can't exit buffer mode during cros_ec_sensors_push_data().
    
    [1]: https://elixir.bootlin.com/linux/v6.5/source/drivers/iio/industrialio-buffer.c#L1189
    [2]: https://elixir.bootlin.com/linux/v6.5/source/drivers/iio/common/cros_ec_sensors/cros_ec_sensors_core.c#L198
    
    Cc: stable@vger.kernel.org
    Fixes: aa984f1ba4a4 ("iio: cros_ec: Register to cros_ec_sensorhub when EC supports FIFO")
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230829030622.1571852-1-tzungbi@kernel.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9c471892d75847671a246619c2148578f22bbc6
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Wed Oct 12 17:16:17 2022 +0200

    iio: core: introduce iio_device_{claim|release}_buffer_mode() APIs
    
    [ Upstream commit 0a8565425afd8ba0e1a0ea73e21da119ee6dacea ]
    
    These APIs are analogous to iio_device_claim_direct_mode() and
    iio_device_release_direct_mode() but, as the name suggests, with the
    logic flipped. While this looks odd enough, it will have at least two
    users (in following changes) and it will be important to move the IIO
    mlock to the private struct.
    
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20221012151620.1725215-2-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 7771c8c80d62 ("iio: cros_ec: fix an use-after-free in cros_ec_sensors_push_data()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eafbb19661527a1fc1a6b6c821f5b3d8c49db371
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Feb 7 15:38:37 2022 +0100

    iio: core: Hide read accesses to iio_dev->currentmode
    
    [ Upstream commit 8c576f87ad7eb639b8bd4472a9bb830e0696dda5 ]
    
    In order to later move this variable within the opaque structure, let's
    create a helper for accessing it in read-only mode. This helper will be
    exposed to device drivers and kept accessible for the few that could need
    it. The write access to this variable however should be fully reserved to
    the core so in a second step we will hide this variable into the opaque
    structure.
    
    Cc: Eugen Hristev <eugen.hristev@microchip.com>
    Cc: Nicolas Ferre <nicolas.ferre@microchip.com>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Ludovic Desroches <ludovic.desroches@microchip.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/r/20220207143840.707510-11-miquel.raynal@bootlin.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 7771c8c80d62 ("iio: cros_ec: fix an use-after-free in cros_ec_sensors_push_data()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 919721348c044000ded09285c6834282163ecac9
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Feb 7 15:38:36 2022 +0100

    iio: Un-inline iio_buffer_enabled()
    
    [ Upstream commit 2f53b4adfede66f1bc1c8bb7efd7ced2bad1191a ]
    
    As we are going to hide the currentmode inside the opaque structure,
    this helper would soon need to call a non-inline function which would
    simply drop the benefit of having the helper defined inline in a header.
    
    One alternative is to move this helper in the core as there is no more
    interest in defining it inline in a header. We will pay the minor cost
    either way.
    
    Let's do like the iio_device_id() helper which also refers to the opaque
    structure and gets defined in the core.
    
    Suggested-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/r/20220207143840.707510-10-miquel.raynal@bootlin.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 7771c8c80d62 ("iio: cros_ec: fix an use-after-free in cros_ec_sensors_push_data()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f74bc91eb003f692603d119cfd63a093a873f95
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Sep 26 09:13:17 2023 +0300

    serial: 8250_omap: Fix errors with no_console_suspend
    
    [ Upstream commit 560706eff7c8e5621b0d63afe0866e0e1906e87e ]
    
    We now get errors on system suspend if no_console_suspend is set as
    reported by Thomas. The errors started with commit 20a41a62618d ("serial:
    8250_omap: Use force_suspend and resume for system suspend").
    
    Let's fix the issue by checking for console_suspend_enabled in the system
    suspend and resume path.
    
    Note that with this fix the checks for console_suspend_enabled in
    omap8250_runtime_suspend() become useless. We now keep runtime PM usage
    count for an attached kernel console starting with commit bedb404e91bb
    ("serial: 8250_port: Don't use power management for kernel console").
    
    Fixes: 20a41a62618d ("serial: 8250_omap: Use force_suspend and resume for system suspend")
    Cc: stable <stable@kernel.org>
    Cc: Udit Kumar <u-kumar1@ti.com>
    Reported-by: Thomas Richard <thomas.richard@bootlin.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Thomas Richard <thomas.richard@bootlin.com>
    Reviewed-by: Dhruva Gole <d-gole@ti.com>
    Link: https://lore.kernel.org/r/20230926061319.15140-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d67d831e1dbcdbb5ef92fe21c803e87be14a7bea
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon May 8 11:20:12 2023 +0300

    serial: 8250: omap: Fix imprecise external abort for omap_8250_pm()
    
    [ Upstream commit 398cecc24846e867b9f90a0bd22730e3df6b05be ]
    
    We must idle the uart only after serial8250_unregister_port(). Otherwise
    unbinding the uart via sysfs while doing cat on the port produces an
    imprecise external abort:
    
    mem_serial_in from omap_8250_pm+0x44/0xf4
    omap_8250_pm from uart_hangup+0xe0/0x194
    uart_hangup from __tty_hangup.part.0+0x37c/0x3a8
    __tty_hangup.part.0 from uart_remove_one_port+0x9c/0x22c
    uart_remove_one_port from serial8250_unregister_port+0x60/0xe8
    serial8250_unregister_port from omap8250_remove+0x6c/0xd0
    omap8250_remove from platform_remove+0x28/0x54
    
    Turns out the driver needs to have runtime PM functional before the
    driver probe calls serial8250_register_8250_port(). And it needs
    runtime PM after driver remove calls serial8250_unregister_port().
    
    On probe, we need to read registers before registering the port in
    omap_serial_fill_features_erratas(). We do that with custom uart_read()
    already.
    
    On remove, after serial8250_unregister_port(), we need to write to the
    uart registers to idle the device. Let's add a custom uart_write() for
    that.
    
    Currently the uart register access depends on port->membase to be
    initialized, which won't work after serial8250_unregister_port().
    Let's use priv->membase instead, and use it for runtime PM related
    functions to remove the dependency to port->membase for early and
    late register access.
    
    Note that during use, we need to check for a valid port in the runtime PM
    related functions. This is needed for the optional wakeup configuration.
    We now need to set the drvdata a bit earlier so it's available for the
    runtime PM functions.
    
    With the port checks in runtime PM functions, the old checks for priv in
    omap8250_runtime_suspend() and omap8250_runtime_resume() functions are no
    longer needed and are removed.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230508082014.23083-3-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 560706eff7c8 ("serial: 8250_omap: Fix errors with no_console_suspend")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aff3019b553e8bb22660c462abaa51ac9d9035f8
Author: Juntong Deng <juntong.deng@outlook.com>
Date:   Wed Sep 27 02:19:44 2023 +0800

    selftests/mm: fix awk usage in charge_reserved_hugetlb.sh and hugetlb_reparenting_test.sh that may cause error
    
    [ Upstream commit bbe246f875d064ecfb872fe4f66152e743dfd22d ]
    
    According to the awk manual, the -e option does not need to be specified
    in front of 'program' (unless you need to mix program-file).
    
    The redundant -e option can cause error when users use awk tools other
    than gawk (for example, mawk does not support the -e option).
    
    Error Example:
    awk: not an option: -e
    
    Link: https://lkml.kernel.org/r/VI1P193MB075228810591AF2FDD7D42C599C3A@VI1P193MB0752.EURP193.PROD.OUTLOOK.COM
    Signed-off-by: Juntong Deng <juntong.deng@outlook.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f1d3d1ca5007496c9b664a55cd546e1d80005ca
Author: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
Date:   Mon Oct 16 14:08:59 2023 +0000

    net: pktgen: Fix interface flags printing
    
    commit 1d30162f35c7a73fc2f8cdcdcdbd690bedb99d1a upstream.
    
    Device flags are displayed incorrectly:
    1) The comparison (i == F_FLOW_SEQ) is always false, because F_FLOW_SEQ
    is equal to (1 << FLOW_SEQ_SHIFT) == 2048, and the maximum value
    of the 'i' variable is (NR_PKT_FLAG - 1) == 17. It should be compared
    with FLOW_SEQ_SHIFT.
    
    2) Similarly to the F_IPSEC flag.
    
    3) Also add spaces to the print end of the string literal "spi:%u"
    to prevent the output from merging with the flag that follows.
    
    Found by InfoTeCS on behalf of Linux Verification Center
    (linuxtesting.org) with SVACE.
    
    Fixes: 99c6d3d20d62 ("pktgen: Remove brute-force printing of flags")
    Signed-off-by: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8bdf95e29f86bfc66de8b4c1a7fd947c5ff60797
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Oct 18 13:18:39 2023 +0200

    netfilter: nf_tables: revert do not remove elements if set backend implements .abort
    
    commit f86fb94011aeb3b26337fc22204ca726aeb8bc24 upstream.
    
    nf_tables_abort_release() path calls nft_set_elem_destroy() for
    NFT_MSG_NEWSETELEM which releases the element, however, a reference to
    the element still remains in the working copy.
    
    Fixes: ebd032fa8818 ("netfilter: nf_tables: do not remove elements if set backend implements .abort")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc19daa037f53830ea31c63eb5868b913382633c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Oct 4 13:12:58 2023 +0200

    netfilter: nf_tables: do not remove elements if set backend implements .abort
    
    commit ebd032fa881882fef2acb9da1bbde48d8233241d upstream.
    
    pipapo set backend maintains two copies of the datastructure, removing
    the elements from the copy that is going to be discarded slows down
    the abort path significantly, from several minutes to few seconds after
    this patch.
    
    Fixes: 212ed75dc5fb ("netfilter: nf_tables: integrate pipapo into commit protocol")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db33720697c873b88d53c4b4d4f0eeba82a101ca
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Oct 17 12:28:27 2023 +0200

    netfilter: nft_set_rbtree: .deactivate fails if element has expired
    
    commit d111692a59c1470ae530cbb39bcf0346c950ecc7 upstream.
    
    This allows to remove an expired element which is not possible in other
    existing set backends, this is more noticeable if gc-interval is high so
    expired elements remain in the tree. On-demand gc also does not help in
    this case, because this is delete element path. Return NULL if element
    has expired.
    
    Fixes: 8d8540c4f5e0 ("netfilter: nft_set_rbtree: add timeout support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44768cad012c4686c0fc2669ff271d984f7bfea7
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Oct 16 14:49:04 2023 +0200

    neighbor: tracing: Move pin6 inside CONFIG_IPV6=y section
    
    commit 2915240eddba96b37de4c7e9a3d0ac6f9548454b upstream.
    
    When CONFIG_IPV6=n, and building with W=1:
    
        In file included from include/trace/define_trace.h:102,
                         from include/trace/events/neigh.h:255,
                         from net/core/net-traces.c:51:
        include/trace/events/neigh.h: In function ‘trace_event_raw_event_neigh_create’:
        include/trace/events/neigh.h:42:34: error: variable ‘pin6’ set but not used [-Werror=unused-but-set-variable]
           42 |                 struct in6_addr *pin6;
              |                                  ^~~~
        include/trace/trace_events.h:402:11: note: in definition of macro ‘DECLARE_EVENT_CLASS’
          402 |         { assign; }                                                     \
              |           ^~~~~~
        include/trace/trace_events.h:44:30: note: in expansion of macro ‘PARAMS’
           44 |                              PARAMS(assign),                   \
              |                              ^~~~~~
        include/trace/events/neigh.h:23:1: note: in expansion of macro ‘TRACE_EVENT’
           23 | TRACE_EVENT(neigh_create,
              | ^~~~~~~~~~~
        include/trace/events/neigh.h:41:9: note: in expansion of macro ‘TP_fast_assign’
           41 |         TP_fast_assign(
              |         ^~~~~~~~~~~~~~
        In file included from include/trace/define_trace.h:103,
                         from include/trace/events/neigh.h:255,
                         from net/core/net-traces.c:51:
        include/trace/events/neigh.h: In function ‘perf_trace_neigh_create’:
        include/trace/events/neigh.h:42:34: error: variable ‘pin6’ set but not used [-Werror=unused-but-set-variable]
           42 |                 struct in6_addr *pin6;
              |                                  ^~~~
        include/trace/perf.h:51:11: note: in definition of macro ‘DECLARE_EVENT_CLASS’
           51 |         { assign; }                                                     \
              |           ^~~~~~
        include/trace/trace_events.h:44:30: note: in expansion of macro ‘PARAMS’
           44 |                              PARAMS(assign),                   \
              |                              ^~~~~~
        include/trace/events/neigh.h:23:1: note: in expansion of macro ‘TRACE_EVENT’
           23 | TRACE_EVENT(neigh_create,
              | ^~~~~~~~~~~
        include/trace/events/neigh.h:41:9: note: in expansion of macro ‘TP_fast_assign’
           41 |         TP_fast_assign(
              |         ^~~~~~~~~~~~~~
    
    Indeed, the variable pin6 is declared and initialized unconditionally,
    while it is only used and needlessly re-initialized when support for
    IPv6 is enabled.
    
    Fix this by dropping the unused variable initialization, and moving the
    variable declaration inside the existing section protected by a check
    for CONFIG_IPV6.
    
    Fixes: fc651001d2c5ca4f ("neighbor: Add tracepoint to __neigh_create")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Simon Horman <horms@kernel.org> # build-tested
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33179dbf3f2a74e90cc36c0c2997c480d9a5669
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Tue Oct 17 11:36:02 2023 -0300

    net/sched: sch_hfsc: upgrade 'rt' to 'sc' when it becomes a inner curve
    
    commit a13b67c9a015c4e21601ef9aa4ec9c5d972df1b4 upstream.
    
    Christian Theune says:
       I upgraded from 6.1.38 to 6.1.55 this morning and it broke my traffic shaping script,
       leaving me with a non-functional uplink on a remote router.
    
    A 'rt' curve cannot be used as a inner curve (parent class), but we were
    allowing such configurations since the qdisc was introduced. Such
    configurations would trigger a UAF as Budimir explains:
       The parent will have vttree_insert() called on it in init_vf(),
       but will not have vttree_remove() called on it in update_vf()
       because it does not have the HFSC_FSC flag set.
    
    The qdisc always assumes that inner classes have the HFSC_FSC flag set.
    This is by design as it doesn't make sense 'qdisc wise' for an 'rt'
    curve to be an inner curve.
    
    Budimir's original patch disallows users to add classes with a 'rt'
    parent, but this is too strict as it breaks users that have been using
    'rt' as a inner class. Another approach, taken by this patch, is to
    upgrade the inner 'rt' into a 'sc', warning the user in the process.
    It avoids the UAF reported by Budimir while also being more permissive
    to bad scripts/users/code using 'rt' as a inner class.
    
    Users checking the `tc class ls [...]` or `tc class get [...]` dumps would
    observe the curve change and are potentially breaking with this change.
    
    v1->v2: https://lore.kernel.org/all/20231013151057.2611860-1-pctammela@mojatatu.com/
    - Correct 'Fixes' tag and merge with revert (Jakub)
    
    Cc: Christian Theune <ct@flyingcircus.io>
    Cc: Budimir Markovic <markovicbudimir@gmail.com>
    Fixes: b3d26c5702c7 ("net/sched: sch_hfsc: Ensure inner classes have fsc curve")
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Link: https://lore.kernel.org/r/20231017143602.3191556-1-pctammela@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0426d7bc17b80296dbb7938d7c97333be02178d7
Author: Jiri Wiesner <jwiesner@suse.de>
Date:   Tue Oct 10 18:39:33 2023 +0200

    bonding: Return pointer to data after pull on skb
    
    commit d93f3f992780af4a21e6c1ab86946b7c5602f1b9 upstream.
    
    Since 429e3d123d9a ("bonding: Fix extraction of ports from the packet
    headers"), header offsets used to compute a hash in bond_xmit_hash() are
    relative to skb->data and not skb->head. If the tail of the header buffer
    of an skb really needs to be advanced and the operation is successful, the
    pointer to the data must be returned (and not a pointer to the head of the
    buffer).
    
    Fixes: 429e3d123d9a ("bonding: Fix extraction of ports from the packet headers")
    Signed-off-by: Jiri Wiesner <jwiesner@suse.de>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66982023d741f4bb575a0f9c50dda110500588bd
Author: Jinjie Ruan <ruanjinjie@huawei.com>
Date:   Wed Oct 11 11:24:19 2023 +0800

    net: dsa: bcm_sf2: Fix possible memory leak in bcm_sf2_mdio_register()
    
    commit 61b40cefe51af005c72dbdcf975a3d166c6e6406 upstream.
    
    In bcm_sf2_mdio_register(), the class_find_device() will call get_device()
    to increment reference count for priv->master_mii_bus->dev if
    of_mdio_find_bus() succeeds. If mdiobus_alloc() or mdiobus_register()
    fails, it will call get_device() twice without decrement reference count
    for the device. And it is the same if bcm_sf2_mdio_register() succeeds but
    fails in bcm_sf2_sw_probe(), or if bcm_sf2_sw_probe() succeeds. If the
    reference count has not decremented to zero, the dev related resource will
    not be freed.
    
    So remove the get_device() in bcm_sf2_mdio_register(), and call
    put_device() if mdiobus_alloc() or mdiobus_register() fails and in
    bcm_sf2_mdio_unregister() to solve the issue.
    
    And as Simon suggested, unwind from errors for bcm_sf2_mdio_register() and
    just return 0 if it succeeds to make it cleaner.
    
    Fixes: 461cd1b03e32 ("net: dsa: bcm_sf2: Register our slave MDIO bus")
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Suggested-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20231011032419.2423290-1-ruanjinjie@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ea476863ef728571d6b17ff6e73046baf78af5b
Author: Michal Schmidt <mschmidt@redhat.com>
Date:   Wed Oct 11 16:33:32 2023 -0700

    i40e: prevent crash on probe if hw registers have invalid values
    
    commit fc6f716a5069180c40a8c9b63631e97da34f64a3 upstream.
    
    The hardware provides the indexes of the first and the last available
    queue and VF. From the indexes, the driver calculates the numbers of
    queues and VFs. In theory, a faulty device might say the last index is
    smaller than the first index. In that case, the driver's calculation
    would underflow, it would attempt to write to non-existent registers
    outside of the ioremapped range and crash.
    
    I ran into this not by having a faulty device, but by an operator error.
    I accidentally ran a QE test meant for i40e devices on an ice device.
    The test used 'echo i40e > /sys/...ice PCI device.../driver_override',
    bound the driver to the device and crashed in one of the wr32 calls in
    i40e_clear_hw.
    
    Add checks to prevent underflows in the calculations of num_queues and
    num_vfs. With this fix, the wrong device probing reports errors and
    returns a failure without crashing.
    
    Fixes: 838d41d92a90 ("i40e: clear all queues and interrupts")
    Signed-off-by: Michal Schmidt <mschmidt@redhat.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Link: https://lore.kernel.org/r/20231011233334.336092-2-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9202217a6eafe26ad0204ae228f614f2ec4a7b7
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Oct 16 20:28:10 2023 +0300

    net: usb: smsc95xx: Fix an error code in smsc95xx_reset()
    
    commit c53647a5df9e66dd9fedf240198e1fe50d88c286 upstream.
    
    Return a negative error code instead of success.
    
    Fixes: 2f7ca802bdae ("net: Add SMSC LAN9500 USB2.0 10/100 ethernet adapter driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/147927f0-9ada-45cc-81ff-75a19dd30b76@moroto.mountain
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2ceb30cc1fc2a0e5faa65b31de604d9b77fde24
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 17 19:23:04 2023 +0000

    ipv4: fib: annotate races around nh->nh_saddr_genid and nh->nh_saddr
    
    commit 195374d893681da43a39796e53b30ac4f20400c4 upstream.
    
    syzbot reported a data-race while accessing nh->nh_saddr_genid [1]
    
    Add annotations, but leave the code lazy as intended.
    
    [1]
    BUG: KCSAN: data-race in fib_select_path / fib_select_path
    
    write to 0xffff8881387166f0 of 4 bytes by task 6778 on cpu 1:
    fib_info_update_nhc_saddr net/ipv4/fib_semantics.c:1334 [inline]
    fib_result_prefsrc net/ipv4/fib_semantics.c:1354 [inline]
    fib_select_path+0x292/0x330 net/ipv4/fib_semantics.c:2269
    ip_route_output_key_hash_rcu+0x659/0x12c0 net/ipv4/route.c:2810
    ip_route_output_key_hash net/ipv4/route.c:2644 [inline]
    __ip_route_output_key include/net/route.h:134 [inline]
    ip_route_output_flow+0xa6/0x150 net/ipv4/route.c:2872
    send4+0x1f5/0x520 drivers/net/wireguard/socket.c:61
    wg_socket_send_skb_to_peer+0x94/0x130 drivers/net/wireguard/socket.c:175
    wg_socket_send_buffer_to_peer+0xd6/0x100 drivers/net/wireguard/socket.c:200
    wg_packet_send_handshake_initiation drivers/net/wireguard/send.c:40 [inline]
    wg_packet_handshake_send_worker+0x10c/0x150 drivers/net/wireguard/send.c:51
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    read to 0xffff8881387166f0 of 4 bytes by task 6759 on cpu 0:
    fib_result_prefsrc net/ipv4/fib_semantics.c:1350 [inline]
    fib_select_path+0x1cb/0x330 net/ipv4/fib_semantics.c:2269
    ip_route_output_key_hash_rcu+0x659/0x12c0 net/ipv4/route.c:2810
    ip_route_output_key_hash net/ipv4/route.c:2644 [inline]
    __ip_route_output_key include/net/route.h:134 [inline]
    ip_route_output_flow+0xa6/0x150 net/ipv4/route.c:2872
    send4+0x1f5/0x520 drivers/net/wireguard/socket.c:61
    wg_socket_send_skb_to_peer+0x94/0x130 drivers/net/wireguard/socket.c:175
    wg_socket_send_buffer_to_peer+0xd6/0x100 drivers/net/wireguard/socket.c:200
    wg_packet_send_handshake_initiation drivers/net/wireguard/send.c:40 [inline]
    wg_packet_handshake_send_worker+0x10c/0x150 drivers/net/wireguard/send.c:51
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    value changed: 0x959d3217 -> 0x959d3218
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 6759 Comm: kworker/u4:15 Not tainted 6.6.0-rc4-syzkaller-00029-gcbf3a2cb156a #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/06/2023
    Workqueue: wg-kex-wg1 wg_packet_handshake_send_worker
    
    Fixes: 436c3b66ec98 ("ipv4: Invalidate nexthop cache nh_saddr more correctly.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20231017192304.82626-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a270aa7a47db6dee18c84f17b772fcf5017fa943
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 16 18:08:51 2023 +0000

    tun: prevent negative ifindex
    
    commit cbfbfe3aee718dc4c3c837f5d2463170ee59d78c upstream.
    
    After commit 956db0a13b47 ("net: warn about attempts to register
    negative ifindex") syzbot is able to trigger the following splat.
    
    Negative ifindex are not supported.
    
    WARNING: CPU: 1 PID: 6003 at net/core/dev.c:9596 dev_index_reserve+0x104/0x210
    Modules linked in:
    CPU: 1 PID: 6003 Comm: syz-executor926 Not tainted 6.6.0-rc4-syzkaller-g19af4a4ed414 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/06/2023
    pstate: 80400005 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : dev_index_reserve+0x104/0x210
    lr : dev_index_reserve+0x100/0x210
    sp : ffff800096a878e0
    x29: ffff800096a87930 x28: ffff0000d04380d0 x27: ffff0000d04380f8
    x26: ffff0000d04380f0 x25: 1ffff00012d50f20 x24: 1ffff00012d50f1c
    x23: dfff800000000000 x22: ffff8000929c21c0 x21: 00000000ffffffea
    x20: ffff0000d04380e0 x19: ffff800096a87900 x18: ffff800096a874c0
    x17: ffff800084df5008 x16: ffff80008051f9c4 x15: 0000000000000001
    x14: 1fffe0001a087198 x13: 0000000000000000 x12: 0000000000000000
    x11: 0000000000000000 x10: 0000000000000000 x9 : 0000000000000000
    x8 : ffff0000d41c9bc0 x7 : 0000000000000000 x6 : 0000000000000000
    x5 : ffff800091763d88 x4 : 0000000000000000 x3 : ffff800084e04748
    x2 : 0000000000000001 x1 : 00000000fead71c7 x0 : 0000000000000000
    Call trace:
    dev_index_reserve+0x104/0x210
    register_netdevice+0x598/0x1074 net/core/dev.c:10084
    tun_set_iff+0x630/0xb0c drivers/net/tun.c:2850
    __tun_chr_ioctl+0x788/0x2af8 drivers/net/tun.c:3118
    tun_chr_ioctl+0x38/0x4c drivers/net/tun.c:3403
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:871 [inline]
    __se_sys_ioctl fs/ioctl.c:857 [inline]
    __arm64_sys_ioctl+0x14c/0x1c8 fs/ioctl.c:857
    __invoke_syscall arch/arm64/kernel/syscall.c:37 [inline]
    invoke_syscall+0x98/0x2b8 arch/arm64/kernel/syscall.c:51
    el0_svc_common+0x130/0x23c arch/arm64/kernel/syscall.c:136
    do_el0_svc+0x48/0x58 arch/arm64/kernel/syscall.c:155
    el0_svc+0x58/0x16c arch/arm64/kernel/entry-common.c:678
    el0t_64_sync_handler+0x84/0xfc arch/arm64/kernel/entry-common.c:696
    el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:595
    irq event stamp: 11348
    hardirqs last enabled at (11347): [<ffff80008a716574>] __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:151 [inline]
    hardirqs last enabled at (11347): [<ffff80008a716574>] _raw_spin_unlock_irqrestore+0x38/0x98 kernel/locking/spinlock.c:194
    hardirqs last disabled at (11348): [<ffff80008a627820>] el1_dbg+0x24/0x80 arch/arm64/kernel/entry-common.c:436
    softirqs last enabled at (11138): [<ffff8000887ca53c>] spin_unlock_bh include/linux/spinlock.h:396 [inline]
    softirqs last enabled at (11138): [<ffff8000887ca53c>] release_sock+0x15c/0x1b0 net/core/sock.c:3531
    softirqs last disabled at (11136): [<ffff8000887ca41c>] spin_lock_bh include/linux/spinlock.h:356 [inline]
    softirqs last disabled at (11136): [<ffff8000887ca41c>] release_sock+0x3c/0x1b0 net/core/sock.c:3518
    
    Fixes: fb7589a16216 ("tun: Add ability to create tun device with given index")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Link: https://lore.kernel.org/r/20231016180851.3560092-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d55719f983d890b1944de8b81aed67cb7f2084f
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 17 12:45:26 2023 +0000

    tcp: tsq: relax tcp_small_queue_check() when rtx queue contains a single skb
    
    commit f921a4a5bffa8a0005b190fb9421a7fc1fd716b6 upstream.
    
    In commit 75eefc6c59fd ("tcp: tsq: add a shortcut in tcp_small_queue_check()")
    we allowed to send an skb regardless of TSQ limits being hit if rtx queue
    was empty or had a single skb, in order to better fill the pipe
    when/if TX completions were slow.
    
    Then later, commit 75c119afe14f ("tcp: implement rb-tree based
    retransmit queue") accidentally removed the special case for
    one skb in rtx queue.
    
    Stefan Wahren reported a regression in single TCP flow throughput
    using a 100Mbit fec link, starting from commit 65466904b015 ("tcp: adjust
    TSO packet sizes based on min_rtt"). This last commit only made the
    regression more visible, because it locked the TCP flow on a particular
    behavior where TSQ prevented two skbs being pushed downstream,
    adding silences on the wire between each TSO packet.
    
    Many thanks to Stefan for his invaluable help !
    
    Fixes: 75c119afe14f ("tcp: implement rb-tree based retransmit queue")
    Link: https://lore.kernel.org/netdev/7f31ddc8-9971-495e-a1f6-819df542e0af@gmx.net/
    Reported-by: Stefan Wahren <wahrenst@gmx.net>
    Tested-by: Stefan Wahren <wahrenst@gmx.net>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Link: https://lore.kernel.org/r/20231017124526.4060202-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ae344291e38a70210de4c3240e4ff3d53f69522
Author: Neal Cardwell <ncardwell@google.com>
Date:   Sun Oct 15 13:47:00 2023 -0400

    tcp: fix excessive TLP and RACK timeouts from HZ rounding
    
    commit 1c2709cfff1dedbb9591e989e2f001484208d914 upstream.
    
    We discovered from packet traces of slow loss recovery on kernels with
    the default HZ=250 setting (and min_rtt < 1ms) that after reordering,
    when receiving a SACKed sequence range, the RACK reordering timer was
    firing after about 16ms rather than the desired value of roughly
    min_rtt/4 + 2ms. The problem is largely due to the RACK reorder timer
    calculation adding in TCP_TIMEOUT_MIN, which is 2 jiffies. On kernels
    with HZ=250, this is 2*4ms = 8ms. The TLP timer calculation has the
    exact same issue.
    
    This commit fixes the TLP transmit timer and RACK reordering timer
    floor calculation to more closely match the intended 2ms floor even on
    kernels with HZ=250. It does this by adding in a new
    TCP_TIMEOUT_MIN_US floor of 2000 us and then converting to jiffies,
    instead of the current approach of converting to jiffies and then
    adding th TCP_TIMEOUT_MIN value of 2 jiffies.
    
    Our testing has verified that on kernels with HZ=1000, as expected,
    this does not produce significant changes in behavior, but on kernels
    with the default HZ=250 the latency improvement can be large. For
    example, our tests show that for HZ=250 kernels at low RTTs this fix
    roughly halves the latency for the RACK reorder timer: instead of
    mostly firing at 16ms it mostly fires at 8ms.
    
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Fixes: bb4d991a28cc ("tcp: adjust tail loss probe timeout")
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231015174700.2206872-1-ncardwell.sw@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b6b4ca42a9498f6eccf962534622f85a0f62390
Author: Josua Mayer <josua@solid-run.com>
Date:   Wed Oct 4 18:39:28 2023 +0200

    net: rfkill: gpio: prevent value glitch during probe
    
    commit b2f750c3a80b285cd60c9346f8c96bd0a2a66cde upstream.
    
    When either reset- or shutdown-gpio have are initially deasserted,
    e.g. after a reboot - or when the hardware does not include pull-down,
    there will be a short toggle of both IOs to logical 0 and back to 1.
    
    It seems that the rfkill default is unblocked, so the driver should not
    glitch to output low during probe.
    It can lead e.g. to unexpected lte modem reconnect:
    
    [1] root@localhost:~# dmesg | grep "usb 2-1"
    [    2.136124] usb 2-1: new SuperSpeed USB device number 2 using xhci-hcd
    [   21.215278] usb 2-1: USB disconnect, device number 2
    [   28.833977] usb 2-1: new SuperSpeed USB device number 3 using xhci-hcd
    
    The glitch has been discovered on an arm64 board, now that device-tree
    support for the rfkill-gpio driver has finally appeared :).
    
    Change the flags for devm_gpiod_get_optional from GPIOD_OUT_LOW to
    GPIOD_ASIS to avoid any glitches.
    The rfkill driver will set the intended value during rfkill_sync_work.
    
    Fixes: 7176ba23f8b5 ("net: rfkill: add generic gpio rfkill driver")
    Signed-off-by: Josua Mayer <josua@solid-run.com>
    Link: https://lore.kernel.org/r/20231004163928.14609-1-josua@solid-run.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4df9ba0d7a8227edce2d5d13e1b6dc649da2ed30
Author: Ma Ke <make_ruc2021@163.com>
Date:   Sat Oct 7 08:59:53 2023 +0800

    net: ipv6: fix return value check in esp_remove_trailer
    
    commit dad4e491e30b20f4dc615c9da65d2142d703b5c2 upstream.
    
    In esp_remove_trailer(), to avoid an unexpected result returned by
    pskb_trim, we should check the return value of pskb_trim().
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9651e66d0bd785197b7055c0e41029dfb2ec955
Author: Ma Ke <make_ruc2021@163.com>
Date:   Mon Oct 9 09:13:37 2023 +0800

    net: ipv4: fix return value check in esp_remove_trailer
    
    commit 513f61e2193350c7a345da98559b80f61aec4fa6 upstream.
    
    In esp_remove_trailer(), to avoid an unexpected result returned by
    pskb_trim, we should check the return value of pskb_trim().
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26a3c734cb8a0ce0adda1dfd5b7bdaf2c60298a2
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Sep 5 13:23:03 2023 +0000

    xfrm: interface: use DEV_STATS_INC()
    
    commit f7c4e3e5d4f6609b4725a97451948ca2e425379a upstream.
    
    syzbot/KCSAN reported data-races in xfrm whenever dev->stats fields
    are updated.
    
    It appears all of these updates can happen from multiple cpus.
    
    Adopt SMP safe DEV_STATS_INC() to update dev->stats fields.
    
    BUG: KCSAN: data-race in xfrmi_xmit / xfrmi_xmit
    
    read-write to 0xffff88813726b160 of 8 bytes by task 23986 on cpu 1:
    xfrmi_xmit+0x74e/0xb20 net/xfrm/xfrm_interface_core.c:583
    __netdev_start_xmit include/linux/netdevice.h:4889 [inline]
    netdev_start_xmit include/linux/netdevice.h:4903 [inline]
    xmit_one net/core/dev.c:3544 [inline]
    dev_hard_start_xmit+0x11b/0x3f0 net/core/dev.c:3560
    __dev_queue_xmit+0xeee/0x1de0 net/core/dev.c:4340
    dev_queue_xmit include/linux/netdevice.h:3082 [inline]
    neigh_connected_output+0x231/0x2a0 net/core/neighbour.c:1581
    neigh_output include/net/neighbour.h:542 [inline]
    ip_finish_output2+0x74a/0x850 net/ipv4/ip_output.c:230
    ip_finish_output+0xf4/0x240 net/ipv4/ip_output.c:318
    NF_HOOK_COND include/linux/netfilter.h:293 [inline]
    ip_output+0xe5/0x1b0 net/ipv4/ip_output.c:432
    dst_output include/net/dst.h:458 [inline]
    ip_local_out net/ipv4/ip_output.c:127 [inline]
    ip_send_skb+0x72/0xe0 net/ipv4/ip_output.c:1487
    udp_send_skb+0x6a4/0x990 net/ipv4/udp.c:963
    udp_sendmsg+0x1249/0x12d0 net/ipv4/udp.c:1246
    inet_sendmsg+0x63/0x80 net/ipv4/af_inet.c:840
    sock_sendmsg_nosec net/socket.c:730 [inline]
    sock_sendmsg net/socket.c:753 [inline]
    ____sys_sendmsg+0x37c/0x4d0 net/socket.c:2540
    ___sys_sendmsg net/socket.c:2594 [inline]
    __sys_sendmmsg+0x269/0x500 net/socket.c:2680
    __do_sys_sendmmsg net/socket.c:2709 [inline]
    __se_sys_sendmmsg net/socket.c:2706 [inline]
    __x64_sys_sendmmsg+0x57/0x60 net/socket.c:2706
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read-write to 0xffff88813726b160 of 8 bytes by task 23987 on cpu 0:
    xfrmi_xmit+0x74e/0xb20 net/xfrm/xfrm_interface_core.c:583
    __netdev_start_xmit include/linux/netdevice.h:4889 [inline]
    netdev_start_xmit include/linux/netdevice.h:4903 [inline]
    xmit_one net/core/dev.c:3544 [inline]
    dev_hard_start_xmit+0x11b/0x3f0 net/core/dev.c:3560
    __dev_queue_xmit+0xeee/0x1de0 net/core/dev.c:4340
    dev_queue_xmit include/linux/netdevice.h:3082 [inline]
    neigh_connected_output+0x231/0x2a0 net/core/neighbour.c:1581
    neigh_output include/net/neighbour.h:542 [inline]
    ip_finish_output2+0x74a/0x850 net/ipv4/ip_output.c:230
    ip_finish_output+0xf4/0x240 net/ipv4/ip_output.c:318
    NF_HOOK_COND include/linux/netfilter.h:293 [inline]
    ip_output+0xe5/0x1b0 net/ipv4/ip_output.c:432
    dst_output include/net/dst.h:458 [inline]
    ip_local_out net/ipv4/ip_output.c:127 [inline]
    ip_send_skb+0x72/0xe0 net/ipv4/ip_output.c:1487
    udp_send_skb+0x6a4/0x990 net/ipv4/udp.c:963
    udp_sendmsg+0x1249/0x12d0 net/ipv4/udp.c:1246
    inet_sendmsg+0x63/0x80 net/ipv4/af_inet.c:840
    sock_sendmsg_nosec net/socket.c:730 [inline]
    sock_sendmsg net/socket.c:753 [inline]
    ____sys_sendmsg+0x37c/0x4d0 net/socket.c:2540
    ___sys_sendmsg net/socket.c:2594 [inline]
    __sys_sendmmsg+0x269/0x500 net/socket.c:2680
    __do_sys_sendmmsg net/socket.c:2709 [inline]
    __se_sys_sendmmsg net/socket.c:2706 [inline]
    __x64_sys_sendmmsg+0x57/0x60 net/socket.c:2706
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x00000000000010d7 -> 0x00000000000010d8
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 23987 Comm: syz-executor.5 Not tainted 6.5.0-syzkaller-10885-g0468be89b3fa #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023
    
    Fixes: f203b76d7809 ("xfrm: Add virtual xfrm interfaces")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8bc4b708b11d50d133cacfe770da587433d01a9
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 8 18:13:59 2023 +0000

    xfrm: fix a data-race in xfrm_gen_index()
    
    commit 3e4bc23926b83c3c67e5f61ae8571602754131a6 upstream.
    
    xfrm_gen_index() mutual exclusion uses net->xfrm.xfrm_policy_lock.
    
    This means we must use a per-netns idx_generator variable,
    instead of a static one.
    Alternative would be to use an atomic variable.
    
    syzbot reported:
    
    BUG: KCSAN: data-race in xfrm_sk_policy_insert / xfrm_sk_policy_insert
    
    write to 0xffffffff87005938 of 4 bytes by task 29466 on cpu 0:
    xfrm_gen_index net/xfrm/xfrm_policy.c:1385 [inline]
    xfrm_sk_policy_insert+0x262/0x640 net/xfrm/xfrm_policy.c:2347
    xfrm_user_policy+0x413/0x540 net/xfrm/xfrm_state.c:2639
    do_ipv6_setsockopt+0x1317/0x2ce0 net/ipv6/ipv6_sockglue.c:943
    ipv6_setsockopt+0x57/0x130 net/ipv6/ipv6_sockglue.c:1012
    rawv6_setsockopt+0x21e/0x410 net/ipv6/raw.c:1054
    sock_common_setsockopt+0x61/0x70 net/core/sock.c:3697
    __sys_setsockopt+0x1c9/0x230 net/socket.c:2263
    __do_sys_setsockopt net/socket.c:2274 [inline]
    __se_sys_setsockopt net/socket.c:2271 [inline]
    __x64_sys_setsockopt+0x66/0x80 net/socket.c:2271
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffffffff87005938 of 4 bytes by task 29460 on cpu 1:
    xfrm_sk_policy_insert+0x13e/0x640
    xfrm_user_policy+0x413/0x540 net/xfrm/xfrm_state.c:2639
    do_ipv6_setsockopt+0x1317/0x2ce0 net/ipv6/ipv6_sockglue.c:943
    ipv6_setsockopt+0x57/0x130 net/ipv6/ipv6_sockglue.c:1012
    rawv6_setsockopt+0x21e/0x410 net/ipv6/raw.c:1054
    sock_common_setsockopt+0x61/0x70 net/core/sock.c:3697
    __sys_setsockopt+0x1c9/0x230 net/socket.c:2263
    __do_sys_setsockopt net/socket.c:2274 [inline]
    __se_sys_setsockopt net/socket.c:2271 [inline]
    __x64_sys_setsockopt+0x66/0x80 net/socket.c:2271
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x00006ad8 -> 0x00006b18
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 29460 Comm: syz-executor.1 Not tainted 6.5.0-rc5-syzkaller-00243-g9106536c1aa3 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023
    
    Fixes: 1121994c803f ("netns xfrm: policy insertion in netns")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b660e58ef72da6e062814521469680a734b04e22
Author: Manish Chopra <manishc@marvell.com>
Date:   Fri Oct 13 18:48:12 2023 +0530

    qed: fix LL2 RX buffer allocation
    
    commit 2f3389c73832ad90b63208c0fc281ad080114c7a upstream.
    
    Driver allocates the LL2 rx buffers from kmalloc()
    area to construct the skb using slab_build_skb()
    
    The required size allocation seems to have overlooked
    for accounting both skb_shared_info size and device
    placement padding bytes which results into the below
    panic when doing skb_put() for a standard MTU sized frame.
    
    skbuff: skb_over_panic: text:ffffffffc0b0225f len:1514 put:1514
    head:ff3dabceaf39c000 data:ff3dabceaf39c042 tail:0x62c end:0x566
    dev:<NULL>
    …
    skb_panic+0x48/0x4a
    skb_put.cold+0x10/0x10
    qed_ll2b_complete_rx_packet+0x14f/0x260 [qed]
    qed_ll2_rxq_handle_completion.constprop.0+0x169/0x200 [qed]
    qed_ll2_rxq_completion+0xba/0x320 [qed]
    qed_int_sp_dpc+0x1a7/0x1e0 [qed]
    
    This patch fixes this by accouting skb_shared_info and device
    placement padding size bytes when allocating the buffers.
    
    Cc: David S. Miller <davem@davemloft.net>
    Fixes: 0a7fb11c23c0 ("qed: Add Light L2 support")
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d35f398b88a120e9eae73296190bb81ca5b13bc2
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:53 2023 +0200

    ASoC: codecs: wcd938x: fix unbind tear down order
    
    commit fa2f8a991ba4aa733ac1c3b1be0c86148aa4c52c upstream.
    
    Make sure to deregister the component before tearing down the resources
    it depends on during unbind().
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-3-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d182d8ed7b7ed4e3eb08fcaaefc994246612d88a
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:52 2023 +0200

    ASoC: codecs: wcd938x: drop bogus bind error handling
    
    commit bfbc79de60c53e5fed505390440b87ef59ee268c upstream.
    
    Drop the bogus error handling for a soundwire device backcast during
    bind() that cannot fail.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-2-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d32a6b67e77e9fc60fa5f24a8cc1e4b6a7e6ffa
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:58 2023 +0200

    ASoC: codecs: wcd938x-sdw: fix runtime PM imbalance on probe errors
    
    commit c5c0383082eace13da2ffceeea154db2780165e7 upstream.
    
    Make sure to balance the runtime PM operations, including the disable
    count, on probe errors and on driver unbind.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-8-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6df571a6c153687020b98e3bc55631fcb46b50dd
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:57 2023 +0200

    ASoC: codecs: wcd938x-sdw: fix use after free on driver unbind
    
    commit f0dfdcbe706462495d47982eecd13a61aabd644d upstream.
    
    Make sure to deregister the component when the driver is being unbound
    and before the underlying device-managed resources are freed.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-7-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36eabe87031f7afb4338715ceac5b7550ea59e80
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 12 16:28:01 2023 +0300

    drm/i915: Retry gtt fault when out of fence registers
    
    commit e339c6d628fe66c9b64bf31040a55770952aec57 upstream.
    
    If we can't find a free fence register to handle a fault in the GMADR
    range just return VM_FAULT_NOPAGE without populating the PTE so that
    userspace will retry the access and trigger another fault. Eventually
    we should find a free fence and the fault will get properly handled.
    
    A further improvement idea might be to reserve a fence (or one per CPU?)
    for the express purpose of handling faults without having to retry. But
    that would require some additional work.
    
    Looks like this may have gotten broken originally by
    commit 39965b376601 ("drm/i915: don't trash the gtt when running out of fences")
    as that changed the errno to -EDEADLK which wasn't handle by the gtt
    fault code either. But later in commit 2feeb52859fc ("drm/i915/gt: Fix
    -EDEADLK handling regression") I changed it again to -ENOBUFS as -EDEADLK
    was now getting used for the ww mutex dance. So this fix only makes
    sense after that last commit.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/9479
    Fixes: 2feeb52859fc ("drm/i915/gt: Fix -EDEADLK handling regression")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231012132801.16292-1-ville.syrjala@linux.intel.com
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    (cherry picked from commit 7f403caabe811b88ab0de3811ff3f4782c415761)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34f62612be2a7f90ab68a14154db6664a32f8db0
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Oct 2 13:54:28 2023 +0300

    nvmet-tcp: Fix a possible UAF in queue intialization setup
    
    commit d920abd1e7c4884f9ecd0749d1921b7ab19ddfbd upstream.
    
    From Alon:
    "Due to a logical bug in the NVMe-oF/TCP subsystem in the Linux kernel,
    a malicious user can cause a UAF and a double free, which may lead to
    RCE (may also lead to an LPE in case the attacker already has local
    privileges)."
    
    Hence, when a queue initialization fails after the ahash requests are
    allocated, it is guaranteed that the queue removal async work will be
    called, hence leave the deallocation to the queue removal.
    
    Also, be extra careful not to continue processing the socket, so set
    queue rcv_state to NVMET_TCP_RECV_ERR upon a socket error.
    
    Cc: stable@vger.kernel.org
    Reported-by: Alon Zahavi <zahavi.alon@gmail.com>
    Tested-by: Alon Zahavi <zahavi.alon@gmail.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04e0eef74b8f83a5cf60755759e70f3b982d6c19
Author: Florian Westphal <fw@strlen.de>
Date:   Sun Oct 8 19:36:53 2023 +0200

    netfilter: nft_payload: fix wrong mac header matching
    
    commit d351c1ea2de3e36e608fc355d8ae7d0cc80e6cd6 upstream.
    
    mcast packets get looped back to the local machine.
    Such packets have a 0-length mac header, we should treat
    this like "mac header not set" and abort rule evaluation.
    
    As-is, we just copy data from the network header instead.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Reported-by: Blažej Krajňák <krajnak@levonet.sk>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efe43d1bcbcb9fe48e541dd6e2b9bef8d85261e6
Author: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
Date:   Fri Jun 30 16:22:53 2023 +0400

    fs/ntfs3: fix deadlock in mark_as_free_ex
    
    commit bfbe5b31caa74ab97f1784fe9ade5f45e0d3de91 upstream.
    
    Reported-by: syzbot+e94d98936a0ed08bde43@syzkaller.appspotmail.com
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab40c7ab7a93a3bfe7009a11ef15ba2b829aaf5e
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Thu Apr 20 15:46:22 2023 +0800

    fs/ntfs3: fix panic about slab-out-of-bounds caused by ntfs_list_ea()
    
    commit 8e7e27b2ee1e19c4040d4987e345f678a74c0aed upstream.
    
    Here is a BUG report about linux-6.1 from syzbot, but it still remains
    within upstream:
    
    BUG: KASAN: slab-out-of-bounds in ntfs_list_ea fs/ntfs3/xattr.c:191 [inline]
    BUG: KASAN: slab-out-of-bounds in ntfs_listxattr+0x401/0x570 fs/ntfs3/xattr.c:710
    Read of size 1 at addr ffff888021acaf3d by task syz-executor128/3632
    
    Call Trace:
     kasan_report+0x139/0x170 mm/kasan/report.c:495
     ntfs_list_ea fs/ntfs3/xattr.c:191 [inline]
     ntfs_listxattr+0x401/0x570 fs/ntfs3/xattr.c:710
     vfs_listxattr fs/xattr.c:457 [inline]
     listxattr+0x293/0x2d0 fs/xattr.c:804
     path_listxattr fs/xattr.c:828 [inline]
     __do_sys_llistxattr fs/xattr.c:846 [inline]
    
    Before derefering field members of `ea` in unpacked_ea_size(), we need to
    check whether the EA_FULL struct is located in access validate range.
    
    Similarly, when derefering `ea->name` field member, we need to check
    whethe the ea->name is located in access validate range, too.
    
    Fixes: be71b5cba2e6 ("fs/ntfs3: Add attrib operations")
    Reported-by: syzbot+9fcea5ef6dc4dc72d334@syzkaller.appspotmail.com
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    [almaz.alexandrovich@paragon-software.com: took the ret variable out of the loop block]
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24badb9dd8b8b92317a8de407d49765a23890f54
Author: Ziqi Zhao <astrajoan@yahoo.com>
Date:   Wed Aug 9 12:11:18 2023 -0700

    fs/ntfs3: Fix possible null-pointer dereference in hdr_find_e()
    
    commit 1f9b94af923c88539426ed811ae7e9543834a5c5 upstream.
    
    Upon investigation of the C reproducer provided by Syzbot, it seemed
    the reproducer was trying to mount a corrupted NTFS filesystem, then
    issue a rename syscall to some nodes in the filesystem. This can be
    shown by modifying the reproducer to only include the mount syscall,
    and investigating the filesystem by e.g. `ls` and `rm` commands. As a
    result, during the problematic call to `hdr_fine_e`, the `inode` being
    supplied did not go through `indx_init`, hence the `cmp` function
    pointer was never set.
    
    The fix is simply to check whether `cmp` is not set, and return NULL
    if that's the case, in order to be consistent with other error
    scenarios of the `hdr_find_e` method. The rationale behind this patch
    is that:
    
    - We should prevent crashing the kernel even if the mounted filesystem
      is corrupted. Any syscalls made on the filesystem could return
      invalid, but the kernel should be able to sustain these calls.
    
    - Only very specific corruption would lead to this bug, so it would be
      a pretty rare case in actual usage anyways. Therefore, introducing a
      check to specifically protect against this bug seems appropriate.
      Because of its rarity, an `unlikely` clause is used to wrap around
      this nullity check.
    
    Reported-by: syzbot+60cf892fc31d1f4358fc@syzkaller.appspotmail.com
    Signed-off-by: Ziqi Zhao <astrajoan@yahoo.com>
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff38d2a705e1cbb100912fe4fccdbd6f76d41459
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Oct 18 11:23:53 2023 -0700

    tcp: check mptcp-level constraints for backlog coalescing
    
    commit 6db8a37dfc541e059851652cfd4f0bb13b8ff6af upstream.
    
    The MPTCP protocol can acquire the subflow-level socket lock and
    cause the tcp backlog usage. When inserting new skbs into the
    backlog, the stack will try to coalesce them.
    
    Currently, we have no check in place to ensure that such coalescing
    will respect the MPTCP-level DSS, and that may cause data stream
    corruption, as reported by Christoph.
    
    Address the issue by adding the relevant admission check for coalescing
    in tcp_add_backlog().
    
    Note the issue is not easy to reproduce, as the MPTCP protocol tries
    hard to avoid acquiring the subflow-level socket lock.
    
    Fixes: 648ef4b88673 ("mptcp: Implement MPTCP receive path")
    Cc: stable@vger.kernel.org
    Reported-by: Christoph Paasch <cpaasch@apple.com>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/420
    Reviewed-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Link: https://lore.kernel.org/r/20231018-send-net-20231018-v1-2-17ecb002e41d@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 582f7993353c7b116651f88385b1785dffa14c5d
Author: Joerg Roedel <jroedel@suse.de>
Date:   Mon Oct 16 14:42:50 2023 +0200

    x86/sev: Check for user-space IOIO pointing to kernel space
    
    Upstream commit: 63e44bc52047f182601e7817da969a105aa1f721
    
    Check the memory operand of INS/OUTS before emulating the instruction.
    The #VC exception can get raised from user-space, but the memory operand
    can be manipulated to access kernel memory before the emulation actually
    begins and after the exception handler has run.
    
      [ bp: Massage commit message. ]
    
    Fixes: 597cfe48212a ("x86/boot/compressed/64: Setup a GHCB-based VC Exception handler")
    Reported-by: Tom Dohrmann <erbse.13@gmx.de>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c2c01be809db49ad744158e4c6284213da6513a
Author: Joerg Roedel <jroedel@suse.de>
Date:   Wed Jun 21 17:42:42 2023 +0200

    x86/sev: Check IOBM for IOIO exceptions from user-space
    
    Upstream commit: b9cb9c45583b911e0db71d09caa6b56469eb2bdf
    
    Check the IO permission bitmap (if present) before emulating IOIO #VC
    exceptions for user-space. These permissions are checked by hardware
    already before the #VC is raised, but due to the VC-handler decoding
    race it needs to be checked again in software.
    
    Fixes: 25189d08e516 ("x86/sev-es: Add support for handling IOIO exceptions")
    Reported-by: Tom Dohrmann <erbse.13@gmx.de>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: Tom Dohrmann <erbse.13@gmx.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6797c6d09e50e7ddb1c0f8282ccfb3f1c4d63270
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Thu Oct 5 11:06:36 2023 +0200

    x86/sev: Disable MMIO emulation from user mode
    
    Upstream commit: a37cd2a59d0cb270b1bba568fd3a3b8668b9d3ba
    
    A virt scenario can be constructed where MMIO memory can be user memory.
    When that happens, a race condition opens between when the hardware
    raises the #VC and when the #VC handler gets to emulate the instruction.
    
    If the MOVS is replaced with a MOVS accessing kernel memory in that
    small race window, then write to kernel memory happens as the access
    checks are not done at emulation time.
    
    Disable MMIO emulation in user mode temporarily until a sensible use
    case appears and justifies properly handling the race window.
    
    Fixes: 0118b604c2c9 ("x86/sev-es: Handle MMIO String Instructions")
    Reported-by: Tom Dohrmann <erbse.13@gmx.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: Tom Dohrmann <erbse.13@gmx.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b4e772a6a894d48e3a6e56916e4d88a781d8400
Author: Jim Mattson <jmattson@google.com>
Date:   Mon Sep 25 17:34:47 2023 +0000

    KVM: x86: Mask LVTPC when handling a PMI
    
    commit a16eb25b09c02a54c1c1b449d4b6cfa2cf3f013a upstream.
    
    Per the SDM, "When the local APIC handles a performance-monitoring
    counters interrupt, it automatically sets the mask flag in the LVT
    performance counter register."  Add this behavior to KVM's local APIC
    emulation.
    
    Failure to mask the LVTPC entry results in spurious PMIs, e.g. when
    running Linux as a guest, PMI handlers that do a "late_ack" spew a large
    number of "dazed and confused" spurious NMI warnings.
    
    Fixes: f5132b01386b ("KVM: Expose a version 2 architectural PMU to a guests")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Tested-by: Mingwei Zhang <mizhang@google.com>
    Signed-off-by: Mingwei Zhang <mizhang@google.com>
    Link: https://lore.kernel.org/r/20230925173448.3518223-3-mizhang@google.com
    [sean: massage changelog, correct Fixes]
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f61c43be1eb96c0add4e629401508eb273130820
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Oct 6 10:21:04 2023 +0200

    regmap: fix NULL deref on lookup
    
    commit c6df843348d6b71ea986266c12831cb60c2cf325 upstream.
    
    Not all regmaps have a name so make sure to check for that to avoid
    dereferencing a NULL pointer when dev_get_regmap() is used to lookup a
    named regmap.
    
    Fixes: e84861fec32d ("regmap: dev_get_regmap_match(): fix string comparison")
    Cc: stable@vger.kernel.org      # 5.8
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231006082104.16707-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffdc881f68073ff86bf21afb9bb954812e8278be
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Oct 13 20:41:29 2023 +0200

    nfc: nci: fix possible NULL pointer dereference in send_acknowledge()
    
    commit 7937609cd387246aed994e81aa4fa951358fba41 upstream.
    
    Handle memory allocation failure from nci_skb_alloc() (calling
    alloc_skb()) to avoid possible NULL pointer dereference.
    
    Reported-by: 黄思聪 <huangsicong@iie.ac.cn>
    Fixes: 391d8a2da787 ("NFC: Add NCI over SPI receive")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20231013184129.18738-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d42aeae14fc40e5438476ca417f5ac6daa3c9a5a
Author: Jesse Brandeburg <jesse.brandeburg@intel.com>
Date:   Wed Oct 11 16:33:33 2023 -0700

    ice: reset first in crash dump kernels
    
    commit 0288c3e709e5fabd51e84715c5c798a02f43061a upstream.
    
    When the system boots into the crash dump kernel after a panic, the ice
    networking device may still have pending transactions that can cause errors
    or machine checks when the device is re-enabled. This can prevent the crash
    dump kernel from loading the driver or collecting the crash data.
    
    To avoid this issue, perform a function level reset (FLR) on the ice device
    via PCIe config space before enabling it on the crash kernel. This will
    clear any outstanding transactions and stop all queues and interrupts.
    Restore the config space after the FLR, otherwise it was found in testing
    that the driver wouldn't load successfully.
    
    The following sequence causes the original issue:
    - Load the ice driver with modprobe ice
    - Enable SR-IOV with 2 VFs: echo 2 > /sys/class/net/eth0/device/sriov_num_vfs
    - Trigger a crash with echo c > /proc/sysrq-trigger
    - Load the ice driver again (or let it load automatically) with modprobe ice
    - The system crashes again during pcim_enable_device()
    
    Fixes: 837f08fdecbe ("ice: Add basic driver framework for Intel(R) E800 Series")
    Reported-by: Vishal Agrawal <vagrawal@redhat.com>
    Reviewed-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Link: https://lore.kernel.org/r/20231011233334.336092-3-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e42cecb513af42cd2922f49761a5cee34c6fdc7e
Author: Jesse Brandeburg <jesse.brandeburg@intel.com>
Date:   Tue Oct 10 13:30:59 2023 -0700

    ice: fix over-shifted variable
    
    commit 242e34500a32631f85c2b4eb6cb42a368a39e54f upstream.
    
    Since the introduction of the ice driver the code has been
    double-shifting the RSS enabling field, because the define already has
    shifts in it and can't have the regular pattern of "a << shiftval &
    mask" applied.
    
    Most places in the code got it right, but one line was still wrong. Fix
    this one location for easy backports to stable. An in-progress patch
    fixes the defines to "standard" and will be applied as part of the
    regular -next process sometime after this one.
    
    Fixes: d76a60ba7afb ("ice: Add support for VLANs and offloads")
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Link: https://lore.kernel.org/r/20231010203101.406248-1-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6c093b977610665bcfd717c0a9d8afa387ecc27
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 9 22:31:31 2023 +0200

    Bluetooth: avoid memcmp() out of bounds warning
    
    commit 9d1a3c74746428102d55371fbf74b484733937d9 upstream.
    
    bacmp() is a wrapper around memcpy(), which contain compile-time
    checks for buffer overflow. Since the hci_conn_request_evt() also calls
    bt_dev_dbg() with an implicit NULL pointer check, the compiler is now
    aware of a case where 'hdev' is NULL and treats this as meaning that
    zero bytes are available:
    
    In file included from net/bluetooth/hci_event.c:32:
    In function 'bacmp',
        inlined from 'hci_conn_request_evt' at net/bluetooth/hci_event.c:3276:7:
    include/net/bluetooth/bluetooth.h:364:16: error: 'memcmp' specified bound 6 exceeds source size 0 [-Werror=stringop-overread]
      364 |         return memcmp(ba1, ba2, sizeof(bdaddr_t));
          |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Add another NULL pointer check before the bacmp() to ensure the compiler
    understands the code flow enough to not warn about it.  Since the patch
    that introduced the warning is marked for stable backports, this one
    should also go that way to avoid introducing build regressions.
    
    Fixes: 1ffc6f8cc332 ("Bluetooth: Reject connection with the device which has same BD_ADDR")
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Lee, Chun-Yi" <jlee@suse.com>
    Cc: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5f8b43c9c900db295fd201c405326d002a0a459
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Oct 5 14:12:19 2023 -0700

    Bluetooth: hci_event: Fix coding style
    
    commit 35d91d95a0cd61ebb90e0246dc917fd25e519b8c upstream.
    
    This fixes the following code style problem:
    
    ERROR: that open brace { should be on the previous line
    +       if (!bacmp(&hdev->bdaddr, &ev->bdaddr))
    +       {
    
    Fixes: 1ffc6f8cc332 ("Bluetooth: Reject connection with the device which has same BD_ADDR")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1597c1ed0e7d1a0a08ffdd182121ed71feca8e1b
Author: Arkadiusz Bokowy <arkadiusz.bokowy@gmail.com>
Date:   Wed Sep 20 17:30:07 2023 +0200

    Bluetooth: vhci: Fix race when opening vhci device
    
    commit 92d4abd66f7080075793970fc8f241239e58a9e7 upstream.
    
    When the vhci device is opened in the two-step way, i.e.: open device
    then write a vendor packet with requested controller type, the device
    shall respond with a vendor packet which includes HCI index of created
    interface.
    
    When the virtual HCI is created, the host sends a reset request to the
    controller. This request is processed by the vhci_send_frame() function.
    However, this request is send by a different thread, so it might happen
    that this HCI request will be received before the vendor response is
    queued in the read queue. This results in the HCI vendor response and
    HCI reset request inversion in the read queue which leads to improper
    behavior of btvirt:
    
    > dmesg
    [1754256.640122] Bluetooth: MGMT ver 1.22
    [1754263.023806] Bluetooth: MGMT ver 1.22
    [1754265.043775] Bluetooth: hci1: Opcode 0x c03 failed: -110
    
    In order to synchronize vhci two-step open/setup process with virtual
    HCI initialization, this patch adds internal lock when queuing data in
    the vhci_send_frame() function.
    
    Signed-off-by: Arkadiusz Bokowy <arkadiusz.bokowy@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ef071526848cc3109ade63268854cd7c20ece0c
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Wed Oct 4 20:42:24 2023 +0800

    Bluetooth: Fix a refcnt underflow problem for hci_conn
    
    commit c7f59461f5a78994613afc112cdd73688aef9076 upstream.
    
    Syzbot reports a warning as follows:
    
    WARNING: CPU: 1 PID: 26946 at net/bluetooth/hci_conn.c:619
    hci_conn_timeout+0x122/0x210 net/bluetooth/hci_conn.c:619
    ...
    Call Trace:
     <TASK>
     process_one_work+0x884/0x15c0 kernel/workqueue.c:2630
     process_scheduled_works kernel/workqueue.c:2703 [inline]
     worker_thread+0x8b9/0x1290 kernel/workqueue.c:2784
     kthread+0x33c/0x440 kernel/kthread.c:388
     ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147
     ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
     </TASK>
    
    It is because the HCI_EV_SIMPLE_PAIR_COMPLETE event handler drops
    hci_conn directly without check Simple Pairing whether be enabled. But
    the Simple Pairing process can only be used if both sides have the
    support enabled in the host stack.
    
    Add hci_conn_ssp_enabled() for hci_conn in HCI_EV_IO_CAPA_REQUEST and
    HCI_EV_SIMPLE_PAIR_COMPLETE event handlers to fix the problem.
    
    Fixes: 0493684ed239 ("[Bluetooth] Disable disconnect timer during Simple Pairing")
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd6b62fdd2453e1ae126fb21fd84a959e063c4cc
Author: Lee, Chun-Yi <jlee@suse.com>
Date:   Sun Oct 1 16:59:58 2023 +0800

    Bluetooth: Reject connection with the device which has same BD_ADDR
    
    commit 1ffc6f8cc33268731fcf9629fc4438f6db1191fc upstream.
    
    This change is used to relieve CVE-2020-26555. The description of
    the CVE:
    
    Bluetooth legacy BR/EDR PIN code pairing in Bluetooth Core Specification
    1.0B through 5.2 may permit an unauthenticated nearby device to spoof
    the BD_ADDR of the peer device to complete pairing without knowledge
    of the PIN. [1]
    
    The detail of this attack is in IEEE paper:
    BlueMirror: Reflections on Bluetooth Pairing and Provisioning Protocols
    [2]
    
    It's a reflection attack. The paper mentioned that attacker can induce
    the attacked target to generate null link key (zero key) without PIN
    code. In BR/EDR, the key generation is actually handled in the controller
    which is below HCI.
    
    A condition of this attack is that attacker should change the
    BR_ADDR of his hacking device (Host B) to equal to the BR_ADDR with
    the target device being attacked (Host A).
    
    Thus, we reject the connection with device which has same BD_ADDR
    both on HCI_Create_Connection and HCI_Connection_Request to prevent
    the attack. A similar implementation also shows in btstack project.
    [3][4]
    
    Cc: stable@vger.kernel.org
    Link: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26555 [1]
    Link: https://ieeexplore.ieee.org/abstract/document/9474325/authors#authors [2]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L3523 [3]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L7297 [4]
    Signed-off-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 848a05c4423f31aef4b2f1030a768e8cf613d83c
Author: Lee, Chun-Yi <jlee@suse.com>
Date:   Sun Oct 1 16:59:31 2023 +0800

    Bluetooth: hci_event: Ignore NULL link key
    
    commit 33155c4aae5260475def6f7438e4e35564f4f3ba upstream.
    
    This change is used to relieve CVE-2020-26555. The description of the
    CVE:
    
    Bluetooth legacy BR/EDR PIN code pairing in Bluetooth Core Specification
    1.0B through 5.2 may permit an unauthenticated nearby device to spoof
    the BD_ADDR of the peer device to complete pairing without knowledge
    of the PIN. [1]
    
    The detail of this attack is in IEEE paper:
    BlueMirror: Reflections on Bluetooth Pairing and Provisioning Protocols
    [2]
    
    It's a reflection attack. The paper mentioned that attacker can induce
    the attacked target to generate null link key (zero key) without PIN
    code. In BR/EDR, the key generation is actually handled in the controller
    which is below HCI.
    
    Thus, we can ignore null link key in the handler of "Link Key Notification
    event" to relieve the attack. A similar implementation also shows in
    btstack project. [3]
    
    v3: Drop the connection when null link key be detected.
    
    v2:
    - Used Link: tag instead of Closes:
    - Used bt_dev_dbg instead of BT_DBG
    - Added Fixes: tag
    
    Cc: stable@vger.kernel.org
    Fixes: 55ed8ca10f35 ("Bluetooth: Implement link key handling for the management interface")
    Link: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26555 [1]
    Link: https://ieeexplore.ieee.org/abstract/document/9474325/authors#authors [2]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L3722 [3]
    Signed-off-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7a2aa7770d371bc03fcfb0ac3c5145b68d6cb5f
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Wed Dec 15 12:07:41 2021 -0800

    xfs: don't expose internal symlink metadata buffers to the vfs
    
    commit 7b7820b83f230036fc48c3e7fb280c48c58adebf upstream.
    
    Ian Kent reported that for inline symlinks, it's possible for
    vfs_readlink to hang on to the target buffer returned by
    _vn_get_link_inline long after it's been freed by xfs inode reclaim.
    This is a layering violation -- we should never expose XFS internals to
    the VFS.
    
    When the symlink has a remote target, we allocate a separate buffer,
    copy the internal information, and let the VFS manage the new buffer's
    lifetime.  Let's adapt the inline code paths to do this too.  It's
    less efficient, but fixes the layering violation and avoids the need to
    adapt the if_data lifetime to rcu rules.  Clearly I don't care about
    readlink benchmarks.
    
    As a side note, this fixes the minor locking violation where we can
    access the inode data fork without taking any locks; proper locking (and
    eliminating the possibility of having to switch inode_operations on a
    live inode) is essential to online repair coordinating repairs
    correctly.
    
    Reported-by: Ian Kent <raven@themaw.net>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Tested-by: Chandan Babu R <chandanbabu@kernel.org>
    Acked-by: Leah Rumancik <leah.rumancik@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe5c6fbc5e4a956c2a854efbaef6b408c4c11c2a
Author: Bagas Sanjaya <bagasdotme@gmail.com>
Date:   Wed Aug 24 10:58:04 2022 +0700

    Documentation: sysctl: align cells in second content column
    
    commit 1faa34672f8a17a3e155e74bde9648564e9480d6 upstream.
    
    Stephen Rothwell reported htmldocs warning when merging net-next tree:
    
    Documentation/admin-guide/sysctl/net.rst:37: WARNING: Malformed table.
    Text in column margin in table line 4.
    
    ========= =================== = ========== ==================
    Directory Content               Directory  Content
    ========= =================== = ========== ==================
    802       E802 protocol         mptcp     Multipath TCP
    appletalk Appletalk protocol    netfilter Network Filter
    ax25      AX25                  netrom     NET/ROM
    bridge    Bridging              rose      X.25 PLP layer
    core      General parameter     tipc      TIPC
    ethernet  Ethernet protocol     unix      Unix domain sockets
    ipv4      IP version 4          x25       X.25 protocol
    ipv6      IP version 6
    ========= =================== = ========== ==================
    
    The warning above is caused by cells in second "Content" column of
    /proc/sys/net subdirectory table which are in column margin.
    
    Align these cells against the column header to fix the warning.
    
    Link: https://lore.kernel.org/linux-next/20220823134905.57ed08d5@canb.auug.org.au/
    Fixes: 1202cdd665315c ("Remove DECnet support from kernel")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Link: https://lore.kernel.org/r/20220824035804.204322-1-bagasdotme@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1815844652cc6cb75779dc2d63a5de28aea780b3
Author: Hyeonggon Yoo <42.hyeyoo@gmail.com>
Date:   Sat Jan 21 12:39:42 2023 +0900

    lib/Kconfig.debug: do not enable DEBUG_PREEMPT by default
    
    commit cc6003916ed46d7a67d91ee32de0f9138047d55f upstream.
    
    In workloads where this_cpu operations are frequently performed,
    enabling DEBUG_PREEMPT may result in significant increase in
    runtime overhead due to frequent invocation of
    __this_cpu_preempt_check() function.
    
    This can be demonstrated through benchmarks such as hackbench where this
    configuration results in a 10% reduction in performance, primarily due to
    the added overhead within memcg charging path.
    
    Therefore, do not to enable DEBUG_PREEMPT by default and make users aware
    of its potential impact on performance in some workloads.
    
    hackbench-process-sockets
                          debug_preempt      no_debug_preempt
    Amean     1       0.4743 (   0.00%)      0.4295 *   9.45%*
    Amean     4       1.4191 (   0.00%)      1.2650 *  10.86%*
    Amean     7       2.2677 (   0.00%)      2.0094 *  11.39%*
    Amean     12      3.6821 (   0.00%)      3.2115 *  12.78%*
    Amean     21      6.6752 (   0.00%)      5.7956 *  13.18%*
    Amean     30      9.6646 (   0.00%)      8.5197 *  11.85%*
    Amean     48     15.3363 (   0.00%)     13.5559 *  11.61%*
    Amean     79     24.8603 (   0.00%)     22.0597 *  11.27%*
    Amean     96     30.1240 (   0.00%)     26.8073 *  11.01%*
    
    Link: https://lkml.kernel.org/r/20230121033942.350387-1-42.hyeyoo@gmail.com
    Signed-off-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Acked-by: Roman Gushchin <roman.gushchin@linux.dev>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Ben Segall <bsegall@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Daniel Bristot de Oliveira <bristot@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Dennis Zhou <dennis@kernel.org>
    Cc: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Juri Lelli <juri.lelli@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Muchun Song <muchun.song@linux.dev>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Steven Rostedt (Google) <rostedt@goodmis.org>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Valentin Schneider <vschneid@redhat.com>
    Cc: Vincent Guittot <vincent.guittot@linaro.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Luiz Capitulino <luizcap@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

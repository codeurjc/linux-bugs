commit e84a4e368abe42cf359fe237f0238820859d5044
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 21 16:01:03 2023 +0200

    Linux 6.1.35
    
    Link: https://lore.kernel.org/r/20230619102154.568541872@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Markus Reichelt <lkt+2023@mareichelt.com>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a76d4933c38ec352e813e14be1de2558db486f27
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Wed Jun 14 11:04:38 2023 -0700

    kbuild: Update assembler calls to use proper flags and language target
    
    commit d5c8d6e0fa61401a729e9eb6a9c7077b2d3aebb0 upstream.
    
    as-instr uses KBUILD_AFLAGS, but as-option uses KBUILD_CFLAGS. This can
    cause as-option to fail unexpectedly when CONFIG_WERROR is set, because
    clang will emit -Werror,-Wunused-command-line-argument for various -m
    and -f flags in KBUILD_CFLAGS for assembler sources.
    
    Callers of as-option and as-instr should be adding flags to
    KBUILD_AFLAGS / aflags-y, not KBUILD_CFLAGS / cflags-y. Use
    KBUILD_AFLAGS in all macros to clear up the initial problem.
    
    Unfortunately, -Wunused-command-line-argument can still be triggered
    with clang by the presence of warning flags or macro definitions because
    '-x assembler' is used, instead of '-x assembler-with-cpp', which will
    consume these flags. Switch to '-x assembler-with-cpp' in places where
    '-x assembler' is used, as the compiler is always used as the driver for
    out of line assembler sources in the kernel.
    
    Finally, add -Werror to these macros so that they behave consistently
    whether or not CONFIG_WERROR is set.
    
    [nathan: Reworded and expanded on problems in commit message
             Use '-x assembler-with-cpp' in a couple more places]
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1699
    Suggested-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5abcd2c18dbbbf676d235ab5ac568f3b836e32e9
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Jun 14 11:04:37 2023 -0700

    MIPS: Prefer cc-option for additions to cflags
    
    commit 337ff6bb8960fdc128cabd264aaea3d42ca27a32 upstream.
    
    A future change will switch as-option to use KBUILD_AFLAGS instead of
    KBUILD_CFLAGS to allow clang to drop -Qunused-arguments, which may cause
    issues if the flag being tested requires a flag previously added to
    KBUILD_CFLAGS but not KBUILD_AFLAGS. Use cc-option for cflags additions
    so that the flags are tested properly.
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Philippe Mathieu-Daud√© <philmd@linaro.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d485ddcba85840542f5a4f3b4bbe446dec73309
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Jun 14 11:04:36 2023 -0700

    MIPS: Move '-Wa,-msoft-float' check from as-option to cc-option
    
    This patch is for linux-6.1.y and earlier, it has no direct mainline
    equivalent.
    
    In order to backport commit d5c8d6e0fa61 ("kbuild: Update assembler
    calls to use proper flags and language target") to resolve a separate
    issue regarding PowerPC, the problem noticed and fixed by
    commit 80a20d2f8288 ("MIPS: Always use -Wa,-msoft-float and eliminate
    GAS_HAS_SET_HARDFLOAT") needs to be addressed. Unfortunately, 6.1 and
    earlier do not contain commit e4412739472b ("Documentation: raise
    minimum supported version of binutils to 2.25"), so it cannot be assumed
    that all supported versions of GNU as have support for -msoft-float.
    
    In order to switch from KBUILD_CFLAGS to KBUILD_AFLAGS in as-option
    without consequence, move the '-Wa,-msoft-float' check to cc-option,
    including '$(cflags-y)' directly to avoid the issue mentioned in
    commit 80a20d2f8288 ("MIPS: Always use -Wa,-msoft-float and eliminate
    GAS_HAS_SET_HARDFLOAT").
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d51d258997e5ec2f3e67972ebb0983cddec1e7b9
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Wed Jun 14 11:04:35 2023 -0700

    x86/boot/compressed: prefer cc-option for CFLAGS additions
    
    commit 994f5f7816ff963f49269cfc97f63cb2e4edb84f upstream.
    
    as-option tests new options using KBUILD_CFLAGS, which causes problems
    when using as-option to update KBUILD_AFLAGS because many compiler
    options are not valid assembler options.
    
    This will be fixed in a follow up patch. Before doing so, move the
    assembler test for -Wa,-mrelax-relocations=no from using as-option to
    cc-option.
    
    Link: https://lore.kernel.org/llvm/CAK7LNATcHt7GcXZ=jMszyH=+M_LC9Qr6yeAGRCBbE6xriLxtUQ@mail.gmail.com/
    Suggested-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdd22f2aa13176df68cd461af6a1bea6e5f991a3
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Tue Jun 13 09:43:00 2023 -0500

    scsi: target: core: Fix error path in target_setup_session()
    
    commit 91271699228bfc66f1bc8abc0327169dc156d854 upstream.
    
    In the error exits in target_setup_session(), if a branch is taken to
    free_sess: transport_free_session() may call to target_free_cmd_counter()
    and then fall through to call target_free_cmd_counter() a second time.
    This can, and does, sometimes cause seg faults since the data field in
    cmd_cnt->refcnt has been freed in the first call.
    
    Fix this problem by simply returning after the call to
    transport_free_session(). The second call is redundant for those cases.
    
    Fixes: 4edba7e4a8f3 ("scsi: target: Move cmd counter allocation")
    Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
    Link: https://lore.kernel.org/r/20230613144259.12890-1-rpearsonhpe@gmail.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 741c96715fb752556a81e6c616b7d7aed65ad605
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed Mar 8 11:23:13 2023 +0200

    neighbour: delete neigh_lookup_nodev as not used
    
    commit 76b9bf965c98c9b53ef7420b3b11438dbd764f92 upstream.
    
    neigh_lookup_nodev isn't used in the kernel after removal
    of DECnet. So let's remove it.
    
    Fixes: 1202cdd66531 ("Remove DECnet support from kernel")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/eb5656200d7964b2d177a36b77efa3c597d6d72d.1678267343.git.leonro@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26435338f9dd9f085fe8fb605de3efc6c52a1f48
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Mar 16 11:37:53 2023 +0800

    net/sched: act_api: add specific EXT_WARN_MSG for tc action
    
    commit 2f59823fe696caa844249a90bb3f9aeda69cfe5c upstream.
    
    In my previous commit 0349b8779cc9 ("sched: add new attr TCA_EXT_WARN_MSG
    to report tc extact message") I didn't notice the tc action use different
    enum with filter. So we can't use TCA_EXT_WARN_MSG directly for tc action.
    Let's add a TCA_ROOT_EXT_WARN_MSG for tc action specifically and put this
    param before going to the TCA_ACT_TAB nest.
    
    Fixes: 0349b8779cc9 ("sched: add new attr TCA_EXT_WARN_MSG to report tc extact message")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab1bbd79f48ec35fe17c04a657ca53216cc8f7d1
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Mar 16 11:37:52 2023 +0800

    Revert "net/sched: act_api: move TCA_EXT_WARN_MSG to the correct hierarchy"
    
    commit 8de2bd02439eb839a452a853c1004c2c45ff6fef upstream.
    
    This reverts commit 923b2e30dc9cd05931da0f64e2e23d040865c035.
    
    This is not a correct fix as TCA_EXT_WARN_MSG is not a hierarchy to
    TCA_ACT_TAB. I didn't notice the TC actions use different enum when adding
    TCA_EXT_WARN_MSG. To fix the difference I will add a new WARN enum in
    TCA_ROOT_MAX as Jamal suggested.
    
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f375998110473702d284edd544f6bd096b2338d
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Fri Feb 24 14:56:01 2023 -0300

    net/sched: act_api: move TCA_EXT_WARN_MSG to the correct hierarchy
    
    commit 923b2e30dc9cd05931da0f64e2e23d040865c035 upstream.
    
    TCA_EXT_WARN_MSG is currently sitting outside of the expected hierarchy
    for the tc actions code. It should sit within TCA_ACT_TAB.
    
    Fixes: 0349b8779cc9 ("sched: add new attr TCA_EXT_WARN_MSG to report tc extact message")
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b4cae8e4b37c7ad4d9721dbda060a62e49e3c17
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Thu Nov 3 16:14:27 2022 +0100

    drm/amdgpu: Don't set struct drm_driver.output_poll_changed
    
    commit 0e3172bac3f43759719384403fe2d1e4c61f87e0 upstream.
    
    Don't set struct drm_driver.output_poll_changed. It's used to restore
    the fbdev console. But as amdgpu uses generic fbdev emulation, the
    console is being restored by the DRM client helpers already. See the
    functions drm_kms_helper_hotplug_event() and
    drm_kms_helper_connector_hotplug_event() in drm_probe_helper.c.
    
    v2:
            * fix commit description (Christian)
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221103151446.2638-5-tzimmermann@suse.de
    Cc: "Gagniuc, Alexandru" <alexandru.gagniuc@hp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6cbb4e1c10c2b1592528fa29d49f9b6c52a7396
Author: Ziwei Dai <ziwei.dai@unisoc.com>
Date:   Fri Mar 31 20:42:09 2023 +0800

    rcu/kvfree: Avoid freeing new kfree_rcu() memory after old grace period
    
    commit 5da7cb193db32da783a3f3e77d8b639989321d48 upstream.
    
    Memory passed to kvfree_rcu() that is to be freed is tracked by a
    per-CPU kfree_rcu_cpu structure, which in turn contains pointers
    to kvfree_rcu_bulk_data structures that contain pointers to memory
    that has not yet been handed to RCU, along with an kfree_rcu_cpu_work
    structure that tracks the memory that has already been handed to RCU.
    These structures track three categories of memory: (1) Memory for
    kfree(), (2) Memory for kvfree(), and (3) Memory for both that arrived
    during an OOM episode.  The first two categories are tracked in a
    cache-friendly manner involving a dynamically allocated page of pointers
    (the aforementioned kvfree_rcu_bulk_data structures), while the third
    uses a simple (but decidedly cache-unfriendly) linked list through the
    rcu_head structures in each block of memory.
    
    On a given CPU, these three categories are handled as a unit, with that
    CPU's kfree_rcu_cpu_work structure having one pointer for each of the
    three categories.  Clearly, new memory for a given category cannot be
    placed in the corresponding kfree_rcu_cpu_work structure until any old
    memory has had its grace period elapse and thus has been removed.  And
    the kfree_rcu_monitor() function does in fact check for this.
    
    Except that the kfree_rcu_monitor() function checks these pointers one
    at a time.  This means that if the previous kfree_rcu() memory passed
    to RCU had only category 1 and the current one has only category 2, the
    kfree_rcu_monitor() function will send that current category-2 memory
    along immediately.  This can result in memory being freed too soon,
    that is, out from under unsuspecting RCU readers.
    
    To see this, consider the following sequence of events, in which:
    
    o       Task A on CPU 0 calls rcu_read_lock(), then uses "from_cset",
            then is preempted.
    
    o       CPU 1 calls kfree_rcu(cset, rcu_head) in order to free "from_cset"
            after a later grace period.  Except that "from_cset" is freed
            right after the previous grace period ended, so that "from_cset"
            is immediately freed.  Task A resumes and references "from_cset"'s
            member, after which nothing good happens.
    
    In full detail:
    
    CPU 0                                   CPU 1
    ----------------------                  ----------------------
    count_memcg_event_mm()
    |rcu_read_lock()  <---
    |mem_cgroup_from_task()
     |// css_set_ptr is the "from_cset" mentioned on CPU 1
     |css_set_ptr = rcu_dereference((task)->cgroups)
     |// Hard irq comes, current task is scheduled out.
    
                                            cgroup_attach_task()
                                            |cgroup_migrate()
                                            |cgroup_migrate_execute()
                                            |css_set_move_task(task, from_cset, to_cset, true)
                                            |cgroup_move_task(task, to_cset)
                                            |rcu_assign_pointer(.., to_cset)
                                            |...
                                            |cgroup_migrate_finish()
                                            |put_css_set_locked(from_cset)
                                            |from_cset->refcount return 0
                                            |kfree_rcu(cset, rcu_head) // free from_cset after new gp
                                            |add_ptr_to_bulk_krc_lock()
                                            |schedule_delayed_work(&krcp->monitor_work, ..)
    
                                            kfree_rcu_monitor()
                                            |krcp->bulk_head[0]'s work attached to krwp->bulk_head_free[]
                                            |queue_rcu_work(system_wq, &krwp->rcu_work)
                                            |if rwork->rcu.work is not in WORK_STRUCT_PENDING_BIT state,
                                            |call_rcu(&rwork->rcu, rcu_work_rcufn) <--- request new gp
    
                                            // There is a perious call_rcu(.., rcu_work_rcufn)
                                            // gp end, rcu_work_rcufn() is called.
                                            rcu_work_rcufn()
                                            |__queue_work(.., rwork->wq, &rwork->work);
    
                                            |kfree_rcu_work()
                                            |krwp->bulk_head_free[0] bulk is freed before new gp end!!!
                                            |The "from_cset" is freed before new gp end.
    
    // the task resumes some time later.
     |css_set_ptr->subsys[(subsys_id) <--- Caused kernel crash, because css_set_ptr is freed.
    
    This commit therefore causes kfree_rcu_monitor() to refrain from moving
    kfree_rcu() memory to the kfree_rcu_cpu_work structure until the RCU
    grace period has completed for all three categories.
    
    v2: Use helper function instead of inserted code block at kfree_rcu_monitor().
    
    Fixes: 34c881745549 ("rcu: Support kfree_bulk() interface in kfree_rcu()")
    Fixes: 5f3c8d620447 ("rcu/tree: Maintain separate array for vmalloc ptrs")
    Reported-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Signed-off-by: Ziwei Dai <ziwei.dai@unisoc.com>
    Reviewed-by: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Tested-by: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d842af30bc25019b60a58eef3fcf60f5db2df7a
Author: Ben Hutchings <benh@debian.org>
Date:   Thu Jun 15 00:00:02 2023 +0200

    parisc: Delete redundant register definitions in <asm/assembly.h>
    
    commit b5b2a02bcaac7c287694aa0db4837a07bf178626 upstream.
    
    We define sp and ipsw in <asm/asmregs.h> using ".reg", and when using
    current binutils (snapshot 2.40.50.20230611) the definitions in
    <asm/assembly.h> using "=" conflict with those:
    
    arch/parisc/include/asm/assembly.h: Assembler messages:
    arch/parisc/include/asm/assembly.h:93: Error: symbol `sp' is already defined
    arch/parisc/include/asm/assembly.h:95: Error: symbol `ipsw' is already defined
    
    Delete the duplicate definitions in <asm/assembly.h>.
    
    Also delete the definition of gp, which isn't used anywhere.
    
    Signed-off-by: Ben Hutchings <benh@debian.org>
    Cc: stable@vger.kernel.org # v6.0+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 616aba553640d68656e30f6302e0fbc9dd8285c1
Author: David Howells <dhowells@redhat.com>
Date:   Fri Jun 16 22:39:39 2023 +0100

    afs: Fix vlserver probe RTT handling
    
    [ Upstream commit ba00b190670809c1a89326d80de96d714f6004f2 ]
    
    In the same spirit as commit ca57f02295f1 ("afs: Fix fileserver probe
    RTT handling"), don't rule out using a vlserver just because there
    haven't been enough packets yet to calculate a real rtt.  Always set the
    server's probe rtt from the estimate provided by rxrpc_kernel_get_srtt,
    which is capped at 1 second.
    
    This could lead to EDESTADDRREQ errors when accessing a cell for the
    first time, even though the vl servers are known and have responded to a
    probe.
    
    Fixes: 1d4adfaf6574 ("rxrpc: Make rxrpc_kernel_get_srtt() indicate validity")
    Signed-off-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: linux-afs@lists.infradead.org
    Link: http://lists.infradead.org/pipermail/linux-afs/2023-June/006746.html
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34dc1eed9918b1883de936ca2966130f5e8852ce
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Jun 15 11:34:00 2023 +0800

    octeon_ep: Add missing check for ioremap
    
    [ Upstream commit 9a36e2d44d122fe73a2a76ba73f1d50a65cf8210 ]
    
    Add check for ioremap() and return the error if it fails in order to
    guarantee the success of ioremap().
    
    Fixes: 862cd659a6fb ("octeon_ep: Add driver framework and device initialization")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Reviewed-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
    Link: https://lore.kernel.org/r/20230615033400.2971-1-jiasheng@iscas.ac.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35d848164fec99faca4a99bf12cd02245e0d6675
Author: Alex Maftei <alex.maftei@amd.com>
Date:   Thu Jun 15 09:34:04 2023 +0100

    selftests/ptp: Fix timestamp printf format for PTP_SYS_OFFSET
    
    [ Upstream commit 76a4c8b82938bc5020b67663db41f451684bf327 ]
    
    Previously, timestamps were printed using "%lld.%u" which is incorrect
    for nanosecond values lower than 100,000,000 as they're fractional
    digits, therefore leading zeros are meaningful.
    
    This patch changes the format strings to "%lld.%09u" in order to add
    leading zeros to the nanosecond value.
    
    Fixes: 568ebc5985f5 ("ptp: add the PTP_SYS_OFFSET ioctl to the testptp program")
    Fixes: 4ec54f95736f ("ptp: Fix compiler warnings in the testptp utility")
    Fixes: 6ab0e475f1f3 ("Documentation: fix misc. warnings")
    Signed-off-by: Alex Maftei <alex.maftei@amd.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Link: https://lore.kernel.org/r/20230615083404.57112-1-alex.maftei@amd.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ab77b3b852d20956f915d67142e1e87f3ca7720
Author: Lin Ma <linma@zju.edu.cn>
Date:   Wed Jun 14 20:06:04 2023 +0800

    net: tipc: resize nlattr array to correct size
    
    [ Upstream commit 44194cb1b6045dea33ae9a0d54fb7e7cd93a2e09 ]
    
    According to nla_parse_nested_deprecated(), the tb[] is supposed to the
    destination array with maxtype+1 elements. In current
    tipc_nl_media_get() and __tipc_nl_media_set(), a larger array is used
    which is unnecessary. This patch resize them to a proper size.
    
    Fixes: 1e55417d8fc6 ("tipc: add media set to new netlink api")
    Fixes: 46f15c6794fb ("tipc: add media get/dump to new netlink api")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Link: https://lore.kernel.org/r/20230614120604.1196377-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d24c9658177587c0e64677691fbc35b2df79b1e8
Author: Li Lingfeng <lilingfeng3@huawei.com>
Date:   Thu Jun 1 14:14:23 2023 +0800

    dm: don't lock fs when the map is NULL during suspend or resume
    
    [ Upstream commit 2760904d895279f87196f0fa9ec570c79fe6a2e4 ]
    
    As described in commit 38d11da522aa ("dm: don't lock fs when the map is
    NULL in process of resume"), a deadlock may be triggered between
    do_resume() and do_mount().
    
    This commit preserves the fix from commit 38d11da522aa but moves it to
    where it also serves to fix a similar deadlock between do_suspend()
    and do_mount().  It does so, if the active map is NULL, by clearing
    DM_SUSPEND_LOCKFS_FLAG in dm_suspend() which is called by both
    do_suspend() and do_resume().
    
    Fixes: 38d11da522aa ("dm: don't lock fs when the map is NULL in process of resume")
    Signed-off-by: Li Lingfeng <lilingfeng3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 010179208c662bfb16f67869dfbb90cf8ec7d55f
Author: √ç√±igo Huguet <ihuguet@redhat.com>
Date:   Tue Jun 13 15:38:54 2023 +0200

    sfc: fix XDP queues mode with legacy IRQ
    
    [ Upstream commit e84a1e1e683f3558e30f437d7c99df35afb8b52c ]
    
    In systems without MSI-X capabilities, xdp_txq_queues_mode is calculated
    in efx_allocate_msix_channels, but when enabling MSI-X fails, it was not
    changed to a proper default value. This was leading to the driver
    thinking that it has dedicated XDP queues, when it didn't.
    
    Fix it by setting xdp_txq_queues_mode to the correct value if the driver
    fallbacks to MSI or legacy IRQ mode. The correct value is
    EFX_XDP_TX_QUEUES_BORROWED because there are no XDP dedicated queues.
    
    The issue can be easily visible if the kernel is started with pci=nomsi,
    then a call trace is shown. It is not shown only with sfc's modparam
    interrupt_mode=2. Call trace example:
     WARNING: CPU: 2 PID: 663 at drivers/net/ethernet/sfc/efx_channels.c:828 efx_set_xdp_channels+0x124/0x260 [sfc]
     [...skip...]
     Call Trace:
      <TASK>
      efx_set_channels+0x5c/0xc0 [sfc]
      efx_probe_nic+0x9b/0x15a [sfc]
      efx_probe_all+0x10/0x1a2 [sfc]
      efx_pci_probe_main+0x12/0x156 [sfc]
      efx_pci_probe_post_io+0x18/0x103 [sfc]
      efx_pci_probe.cold+0x154/0x257 [sfc]
      local_pci_probe+0x42/0x80
    
    Fixes: 6215b608a8c4 ("sfc: last resort fallback for lack of xdp tx queues")
    Reported-by: Yanghang Liu <yanghliu@redhat.com>
    Signed-off-by: √ç√±igo Huguet <ihuguet@redhat.com>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23efdbfa8eefc39ae2ffb46b6009633626a0ff09
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Tue Jun 13 22:22:20 2023 +0300

    net: macsec: fix double free of percpu stats
    
    [ Upstream commit 0c0cf3db83f8c7c9bb141c2771a34043bcf952ef ]
    
    Inside macsec_add_dev() we free percpu macsec->secy.tx_sc.stats and
    macsec->stats on some of the memory allocation failure paths. However, the
    net_device is already registered to that moment: in macsec_newlink(), just
    before calling macsec_add_dev(). This means that during unregister process
    its priv_destructor - macsec_free_netdev() - will be called and will free
    the stats again.
    
    Remove freeing percpu stats inside macsec_add_dev() because
    macsec_free_netdev() will correctly free the already allocated ones. The
    pointers to unallocated stats stay NULL, and free_percpu() treats that
    correctly.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 0a28bfd4971f ("net/macsec: Add MACsec skb_metadata_dst Tx Data path support")
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ea1f3344472943d14842d9ea14af95736122314
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jun 14 16:18:02 2023 +0000

    net: lapbether: only support ethernet devices
    
    [ Upstream commit 9eed321cde22fc1afd76eac563ce19d899e0d6b2 ]
    
    It probbaly makes no sense to support arbitrary network devices
    for lapbether.
    
    syzbot reported:
    
    skbuff: skb_under_panic: text:ffff80008934c100 len:44 put:40 head:ffff0000d18dd200 data:ffff0000d18dd1ea tail:0x16 end:0x140 dev:bond1
    kernel BUG at net/core/skbuff.c:200 !
    Internal error: Oops - BUG: 00000000f2000800 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 0 PID: 5643 Comm: dhcpcd Not tainted 6.4.0-rc5-syzkaller-g4641cff8e810 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/25/2023
    pstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : skb_panic net/core/skbuff.c:196 [inline]
    pc : skb_under_panic+0x13c/0x140 net/core/skbuff.c:210
    lr : skb_panic net/core/skbuff.c:196 [inline]
    lr : skb_under_panic+0x13c/0x140 net/core/skbuff.c:210
    sp : ffff8000973b7260
    x29: ffff8000973b7270 x28: ffff8000973b7360 x27: dfff800000000000
    x26: ffff0000d85d8150 x25: 0000000000000016 x24: ffff0000d18dd1ea
    x23: ffff0000d18dd200 x22: 000000000000002c x21: 0000000000000140
    x20: 0000000000000028 x19: ffff80008934c100 x18: ffff8000973b68a0
    x17: 0000000000000000 x16: ffff80008a43bfbc x15: 0000000000000202
    x14: 0000000000000000 x13: 0000000000000001 x12: 0000000000000001
    x11: 0000000000000201 x10: 0000000000000000 x9 : f22f7eb937cced00
    x8 : f22f7eb937cced00 x7 : 0000000000000001 x6 : 0000000000000001
    x5 : ffff8000973b6b78 x4 : ffff80008df9ee80 x3 : ffff8000805974f4
    x2 : 0000000000000001 x1 : 0000000100000201 x0 : 0000000000000086
    Call trace:
    skb_panic net/core/skbuff.c:196 [inline]
    skb_under_panic+0x13c/0x140 net/core/skbuff.c:210
    skb_push+0xf0/0x108 net/core/skbuff.c:2409
    ip6gre_header+0xbc/0x738 net/ipv6/ip6_gre.c:1383
    dev_hard_header include/linux/netdevice.h:3137 [inline]
    lapbeth_data_transmit+0x1c4/0x298 drivers/net/wan/lapbether.c:257
    lapb_data_transmit+0x8c/0xb0 net/lapb/lapb_iface.c:447
    lapb_transmit_buffer+0x178/0x204 net/lapb/lapb_out.c:149
    lapb_send_control+0x220/0x320 net/lapb/lapb_subr.c:251
    lapb_establish_data_link+0x94/0xec
    lapb_device_event+0x348/0x4e0
    notifier_call_chain+0x1a4/0x510 kernel/notifier.c:93
    raw_notifier_call_chain+0x3c/0x50 kernel/notifier.c:461
    __dev_notify_flags+0x2bc/0x544
    dev_change_flags+0xd0/0x15c net/core/dev.c:8643
    devinet_ioctl+0x858/0x17e4 net/ipv4/devinet.c:1150
    inet_ioctl+0x2ac/0x4d8 net/ipv4/af_inet.c:979
    sock_do_ioctl+0x134/0x2dc net/socket.c:1201
    sock_ioctl+0x4ec/0x858 net/socket.c:1318
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:870 [inline]
    __se_sys_ioctl fs/ioctl.c:856 [inline]
    __arm64_sys_ioctl+0x14c/0x1c8 fs/ioctl.c:856
    __invoke_syscall arch/arm64/kernel/syscall.c:38 [inline]
    invoke_syscall+0x98/0x2c0 arch/arm64/kernel/syscall.c:52
    el0_svc_common+0x138/0x244 arch/arm64/kernel/syscall.c:142
    do_el0_svc+0x64/0x198 arch/arm64/kernel/syscall.c:191
    el0_svc+0x4c/0x160 arch/arm64/kernel/entry-common.c:647
    el0t_64_sync_handler+0x84/0xfc arch/arm64/kernel/entry-common.c:665
    el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:591
    Code: aa1803e6 aa1903e7 a90023f5 947730f5 (d4210000)
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59f0c7bec3cacc53a69b28e04fdff65006242c6c
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Jun 13 20:09:07 2023 +0300

    net: dsa: felix: fix taprio guard band overflow at 10Mbps with jumbo frames
    
    [ Upstream commit 6ac7a27a8b07588497ed53dfd885df9c72bc67e0 ]
    
    The DEV_MAC_MAXLEN_CFG register contains a 16-bit value - up to 65535.
    Plus 2 * VLAN_HLEN (4), that is up to 65543.
    
    The picos_per_byte variable is the largest when "speed" is lowest -
    SPEED_10 = 10. In that case it is (1000000L * 8) / 10 = 800000.
    
    Their product - 52434400000 - exceeds 32 bits, which is a problem,
    because apparently, a multiplication between two 32-bit factors is
    evaluated as 32-bit before being assigned to a 64-bit variable.
    In fact it's a problem for any MTU value larger than 5368.
    
    Cast one of the factors of the multiplication to u64 to force the
    multiplication to take place on 64 bits.
    
    Issue found by Coverity.
    
    Fixes: 55a515b1f5a9 ("net: dsa: felix: drop oversized frames with tc-taprio instead of hanging the port")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230613170907.2413559-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3626e93cd841d120f741af45b65fa41259c0c1fe
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Mon Jun 12 11:34:26 2023 +0200

    net/sched: cls_api: Fix lockup on flushing explicitly created chain
    
    [ Upstream commit c9a82bec02c339cdda99b37c5e62b3b71fc4209c ]
    
    Mingshuai Ren reports:
    
    When a new chain is added by using tc, one soft lockup alarm will be
     generated after delete the prio 0 filter of the chain. To reproduce
     the problem, perform the following steps:
    (1) tc qdisc add dev eth0 root handle 1: htb default 1
    (2) tc chain add dev eth0
    (3) tc filter del dev eth0 chain 0 parent 1: prio 0
    (4) tc filter add dev eth0 chain 0 parent 1:
    
    Fix the issue by accounting for additional reference to chains that are
    explicitly created by RTM_NEWCHAIN message as opposed to implicitly by
    RTM_NEWTFILTER message.
    
    Fixes: 726d061286ce ("net: sched: prevent insertion of new classifiers during chain flush")
    Reported-by: Mingshuai Ren <renmingshuai@huawei.com>
    Closes: https://lore.kernel.org/lkml/87legswvi3.fsf@nvidia.com/T/
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Link: https://lore.kernel.org/r/20230612093426.2867183-1-vladbu@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa285d799d1d5e73ad72b22a5edd58d799568c72
Author: Fabio M. De Francesco <fmdefrancesco@gmail.com>
Date:   Wed Jun 14 12:02:55 2023 +0200

    ext4: drop the call to ext4_error() from ext4_get_group_info()
    
    [ Upstream commit f451fd97dd2b78f286379203a47d9d295c467255 ]
    
    A recent patch added a call to ext4_error() which is problematic since
    some callers of the ext4_get_group_info() function may be holding a
    spinlock, whereas ext4_error() must never be called in atomic context.
    
    This triggered a report from Syzbot: "BUG: sleeping function called from
    invalid context in ext4_update_super" (see the link below).
    
    Therefore, drop the call to ext4_error() from ext4_get_group_info(). In
    the meantime use eight characters tabs instead of nine characters ones.
    
    Reported-by: syzbot+4acc7d910e617b360859@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/all/00000000000070575805fdc6cdb2@google.com/
    Fixes: 5354b2af3406 ("ext4: allow ext4_get_group_info() to fail")
    Suggested-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
    Link: https://lore.kernel.org/r/20230614100446.14337-1-fmdefrancesco@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7d6e830cd0ff2c71251ff6c8943a09e35cf0f6b
Author: Steve French <stfrench@microsoft.com>
Date:   Sun Jun 11 11:23:32 2023 -0500

    cifs: fix lease break oops in xfstest generic/098
    
    [ Upstream commit c774e6779f38bf36f0cce65e30793704bab4b0d7 ]
    
    umount can race with lease break so need to check if
    tcon->ses->server is still valid to send the lease
    break response.
    
    Reviewed-by: Bharath SM <bharathsm@microsoft.com>
    Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
    Fixes: 59a556aebc43 ("SMB3: drop reference to cfile before sending oplock break")
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8119d4d1611309ae545d292ba4d700f3e883040
Author: Danielle Ratson <danieller@nvidia.com>
Date:   Mon Jun 12 16:34:58 2023 +0200

    selftests: forwarding: hw_stats_l3: Set addrgenmode in a separate step
    
    [ Upstream commit bef68e201e538eaa3a91f97aae8161eb2d0a8ed7 ]
    
    Setting the IPv6 address generation mode of a net device during its
    creation never worked, but after commit b0ad3c179059 ("rtnetlink: call
    validate_linkmsg in rtnl_create_link") it explicitly fails [1]. The
    failure is caused by the fact that validate_linkmsg() is called before
    the net device is registered, when it still does not have an 'inet6_dev'.
    
    Likewise, raising the net device before setting the address generation
    mode is meaningless, because by the time the mode is set, the address
    has already been generated.
    
    Therefore, fix the test to first create the net device, then set its
    IPv6 address generation mode and finally bring it up.
    
    [1]
     # ip link add name mydev addrgenmode eui64 type dummy
     RTNETLINK answers: Address family not supported by protocol
    
    Fixes: ba95e7930957 ("selftests: forwarding: hw_stats_l3: Add a new test")
    Signed-off-by: Danielle Ratson <danieller@nvidia.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Link: https://lore.kernel.org/r/f3b05d85b2bc0c3d6168fe8f7207c6c8365703db.1686580046.git.petrm@nvidia.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea3f336f717a8f9236ed50959781c8caa56fa4b8
Author: Peilin Ye <peilin.ye@bytedance.com>
Date:   Sat Jun 10 20:30:25 2023 -0700

    net/sched: qdisc_destroy() old ingress and clsact Qdiscs before grafting
    
    [ Upstream commit 84ad0af0bccd3691cb951c2974c5cb2c10594d4a ]
    
    mini_Qdisc_pair::p_miniq is a double pointer to mini_Qdisc, initialized
    in ingress_init() to point to net_device::miniq_ingress.  ingress Qdiscs
    access this per-net_device pointer in mini_qdisc_pair_swap().  Similar
    for clsact Qdiscs and miniq_egress.
    
    Unfortunately, after introducing RTNL-unlocked RTM_{NEW,DEL,GET}TFILTER
    requests (thanks Hillf Danton for the hint), when replacing ingress or
    clsact Qdiscs, for example, the old Qdisc ("@old") could access the same
    miniq_{in,e}gress pointer(s) concurrently with the new Qdisc ("@new"),
    causing race conditions [1] including a use-after-free bug in
    mini_qdisc_pair_swap() reported by syzbot:
    
     BUG: KASAN: slab-use-after-free in mini_qdisc_pair_swap+0x1c2/0x1f0 net/sched/sch_generic.c:1573
     Write of size 8 at addr ffff888045b31308 by task syz-executor690/14901
    ...
     Call Trace:
      <TASK>
      __dump_stack lib/dump_stack.c:88 [inline]
      dump_stack_lvl+0xd9/0x150 lib/dump_stack.c:106
      print_address_description.constprop.0+0x2c/0x3c0 mm/kasan/report.c:319
      print_report mm/kasan/report.c:430 [inline]
      kasan_report+0x11c/0x130 mm/kasan/report.c:536
      mini_qdisc_pair_swap+0x1c2/0x1f0 net/sched/sch_generic.c:1573
      tcf_chain_head_change_item net/sched/cls_api.c:495 [inline]
      tcf_chain0_head_change.isra.0+0xb9/0x120 net/sched/cls_api.c:509
      tcf_chain_tp_insert net/sched/cls_api.c:1826 [inline]
      tcf_chain_tp_insert_unique net/sched/cls_api.c:1875 [inline]
      tc_new_tfilter+0x1de6/0x2290 net/sched/cls_api.c:2266
    ...
    
    @old and @new should not affect each other.  In other words, @old should
    never modify miniq_{in,e}gress after @new, and @new should not update
    @old's RCU state.
    
    Fixing without changing sch_api.c turned out to be difficult (please
    refer to Closes: for discussions).  Instead, make sure @new's first call
    always happen after @old's last call (in {ingress,clsact}_destroy()) has
    finished:
    
    In qdisc_graft(), return -EBUSY if @old has any ongoing filter requests,
    and call qdisc_destroy() for @old before grafting @new.
    
    Introduce qdisc_refcount_dec_if_one() as the counterpart of
    qdisc_refcount_inc_nz() used for filter requests.  Introduce a
    non-static version of qdisc_destroy() that does a TCQ_F_BUILTIN check,
    just like qdisc_put() etc.
    
    Depends on patch "net/sched: Refactor qdisc_graft() for ingress and
    clsact Qdiscs".
    
    [1] To illustrate, the syzkaller reproducer adds ingress Qdiscs under
    TC_H_ROOT (no longer possible after commit c7cfbd115001 ("net/sched:
    sch_ingress: Only create under TC_H_INGRESS")) on eth0 that has 8
    transmission queues:
    
      Thread 1 creates ingress Qdisc A (containing mini Qdisc a1 and a2),
      then adds a flower filter X to A.
    
      Thread 2 creates another ingress Qdisc B (containing mini Qdisc b1 and
      b2) to replace A, then adds a flower filter Y to B.
    
     Thread 1               A's refcnt   Thread 2
      RTM_NEWQDISC (A, RTNL-locked)
       qdisc_create(A)               1
       qdisc_graft(A)                9
    
      RTM_NEWTFILTER (X, RTNL-unlocked)
       __tcf_qdisc_find(A)          10
       tcf_chain0_head_change(A)
       mini_qdisc_pair_swap(A) (1st)
                |
                |                         RTM_NEWQDISC (B, RTNL-locked)
             RCU sync                2     qdisc_graft(B)
                |                    1     notify_and_destroy(A)
                |
       tcf_block_release(A)          0    RTM_NEWTFILTER (Y, RTNL-unlocked)
       qdisc_destroy(A)                    tcf_chain0_head_change(B)
       tcf_chain0_head_change_cb_del(A)    mini_qdisc_pair_swap(B) (2nd)
       mini_qdisc_pair_swap(A) (3rd)                |
               ...                                 ...
    
    Here, B calls mini_qdisc_pair_swap(), pointing eth0->miniq_ingress to
    its mini Qdisc, b1.  Then, A calls mini_qdisc_pair_swap() again during
    ingress_destroy(), setting eth0->miniq_ingress to NULL, so ingress
    packets on eth0 will not find filter Y in sch_handle_ingress().
    
    This is just one of the possible consequences of concurrently accessing
    miniq_{in,e}gress pointers.
    
    Fixes: 7a096d579e8e ("net: sched: ingress: set 'unlocked' flag for Qdisc ops")
    Fixes: 87f373921c4e ("net: sched: ingress: set 'unlocked' flag for clsact Qdisc ops")
    Reported-by: syzbot+b53a9c0d1ea4ad62da8b@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/r/0000000000006cf87705f79acf1a@google.com/
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: Peilin Ye <peilin.ye@bytedance.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac57be24dcf1b2cfe4bb19cb2c2153e5ece23403
Author: Peilin Ye <peilin.ye@bytedance.com>
Date:   Sat Jun 10 20:30:15 2023 -0700

    net/sched: Refactor qdisc_graft() for ingress and clsact Qdiscs
    
    [ Upstream commit 2d5f6a8d7aef7852a9ecc555f88c673a1c91754f ]
    
    Grafting ingress and clsact Qdiscs does not need a for-loop in
    qdisc_graft().  Refactor it.  No functional changes intended.
    
    Tested-by: Pedro Tammela <pctammela@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Vlad Buslov <vladbu@nvidia.com>
    Signed-off-by: Peilin Ye <peilin.ye@bytedance.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 84ad0af0bccd ("net/sched: qdisc_destroy() old ingress and clsact Qdiscs before grafting")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 096c00ea80db541a4ec6c6b701a566399b6a9197
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jan 13 11:43:53 2023 +0800

    sched: add new attr TCA_EXT_WARN_MSG to report tc extact message
    
    [ Upstream commit 0349b8779cc949ad9e6aced32672ee48cf79b497 ]
    
    We will report extack message if there is an error via netlink_ack(). But
    if the rule is not to be exclusively executed by the hardware, extack is not
    passed along and offloading failures don't get logged.
    
    In commit 81c7288b170a ("sched: cls: enable verbose logging") Marcelo
    made cls could log verbose info for offloading failures, which helps
    improving Open vSwitch debuggability when using flower offloading.
    
    It would also be helpful if userspace monitor tools, like "tc monitor",
    could log this kind of message, as it doesn't require vswitchd log level
    adjusment. Let's add a new tc attributes to report the extack message so
    the monitor program could receive the failures. e.g.
    
      # tc monitor
      added chain dev enp3s0f1np1 parent ffff: chain 0
      added filter dev enp3s0f1np1 ingress protocol all pref 49152 flower chain 0 handle 0x1
        ct_state +trk+new
        not_in_hw
              action order 1: gact action drop
               random type none pass val 0
               index 1 ref 1 bind 1
    
      Warning: mlx5_core: matching on ct_state +new isn't supported.
    
    In this patch I only report the extack message on add/del operations.
    It doesn't look like we need to report the extack message on get/dump
    operations.
    
    Note this message not only reporte to multicast groups, it could also
    be reported unicast, which may affect the current usersapce tool's behaivor.
    
    Suggested-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Link: https://lore.kernel.org/r/20230113034353.2766735-1-liuhangbin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 84ad0af0bccd ("net/sched: qdisc_destroy() old ingress and clsact Qdiscs before grafting")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e568e0e1683035b1460978a5584983d59ee526bf
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Mon Jun 12 09:57:11 2023 +0200

    selftests/tc-testing: Fix SFB db test
    
    [ Upstream commit b39d8c41c7a8336ce85c376b5d4906089524a0ae ]
    
    Setting very small value of db like 10ms introduces rounding errors when
    converting to/from jiffies on some kernel configs. For example, on 250hz
    the actual value will be set to 12ms which causes the test to fail:
    
     # $ sudo ./tdc.py  -d eth2 -e 3410
     #  -- ns/SubPlugin.__init__
     # Test 3410: Create SFB with db setting
     #
     # All test results:
     #
     # 1..1
     # not ok 1 3410 - Create SFB with db setting
     #         Could not match regex pattern. Verify command output:
     # qdisc sfb 1: root refcnt 2 rehash 600s db 12ms limit 1000p max 25p target 20p increment 0.000503548 decrement 4.57771e-05 penalty_rate 10pps penalty_burst 20p
    
    Set the value to 100ms instead which currently seem to work on 100hz,
    250hz, 300hz and 1000hz kernel configs.
    
    Fixes: 6ad92dc56fca ("selftests/tc-testing: add selftests for sfb qdisc")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 700d7bf300c12f2004c2e071a098db813a4c34b5
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Mon Jun 12 09:57:10 2023 +0200

    selftests/tc-testing: Fix Error: failed to find target LOG
    
    [ Upstream commit b849c566ee9c6ed78288a522278dcaf419f8e239 ]
    
    Add missing netfilter config dependency.
    
    Fixes following example error when running tests via tdc.sh for all XT
    tests:
    
     # $ sudo ./tdc.py -d eth2 -e 2029
     # Test 2029: Add xt action with log-prefix
     # exit: 255
     # exit: 0
     #  failed to find target LOG
     #
     # bad action parsing
     # parse_action: bad value (7:xt)!
     # Illegal "action"
     #
     # -----> teardown stage *** Could not execute: "$TC actions flush action xt"
     #
     # -----> teardown stage *** Error message: "Error: Cannot flush unknown TC action.
     # We have an error flushing
     # "
     # returncode 1; expected [0]
     #
     # -----> teardown stage *** Aborting test run.
     #
     # <_io.BufferedReader name=3> *** stdout ***
     #
     # <_io.BufferedReader name=5> *** stderr ***
     # "-----> teardown stage" did not complete successfully
     # Exception <class '__main__.PluginMgrTestFail'> ('teardown', ' failed to find target LOG\n\nbad action parsing\nparse_action: bad value (7:xt)!\nIllegal "action"\n', '"-----> teardown stage" did not complete successfully') (caught in test_runner, running test 2 2029 Add xt action with log-prefix stage teardown)
     # ---------------
     # traceback
     #   File "/images/src/linux/tools/testing/selftests/tc-testing/./tdc.py", line 495, in test_runner
     #     res = run_one_test(pm, args, index, tidx)
     #   File "/images/src/linux/tools/testing/selftests/tc-testing/./tdc.py", line 434, in run_one_test
     #     prepare_env(args, pm, 'teardown', '-----> teardown stage', tidx['teardown'], procout)
     #   File "/images/src/linux/tools/testing/selftests/tc-testing/./tdc.py", line 245, in prepare_env
     #     raise PluginMgrTestFail(
     # ---------------
     # accumulated output for this test:
     #  failed to find target LOG
     #
     # bad action parsing
     # parse_action: bad value (7:xt)!
     # Illegal "action"
     #
     # ---------------
     #
     # All test results:
     #
     # 1..1
     # ok 1 2029 - Add xt action with log-prefix # skipped - "-----> teardown stage" did not complete successfully
    
    Fixes: 910d504bc187 ("selftests/tc-testings: add selftests for xt action")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a086daf20a80437522eff4bc62002df9fae7dfa
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Mon Jun 12 09:57:09 2023 +0200

    selftests/tc-testing: Fix Error: Specified qdisc kind is unknown.
    
    [ Upstream commit aef6e908b54200d04f2d77dab31509fcff2e60ae ]
    
    All TEQL tests assume that sch_teql module is loaded. Load module in tdc.sh
    before running qdisc tests.
    
    Fixes following example error when running tests via tdc.sh for all TEQL
    tests:
    
     # $ sudo ./tdc.py -d eth2 -e 84a0
     #  -- ns/SubPlugin.__init__
     # Test 84a0: Create TEQL with default setting
     # exit: 2
     # exit: 0
     # Error: Specified qdisc kind is unknown.
     #
     # -----> teardown stage *** Could not execute: "$TC qdisc del dev $DUMMY handle 1: root"
     #
     # -----> teardown stage *** Error message: "Error: Invalid handle.
     # "
     # returncode 2; expected [0]
     #
     # -----> teardown stage *** Aborting test run.
     #
     # <_io.BufferedReader name=3> *** stdout ***
     #
     # <_io.BufferedReader name=5> *** stderr ***
     # "-----> teardown stage" did not complete successfully
     # Exception <class '__main__.PluginMgrTestFail'> ('teardown', 'Error: Specified qdisc kind is unknown.\n', '"-----> teardown stage" did not complete successfully') (caught in test_runner, running test 2 84a0 Create TEQL with default setting stage teardown)
     # ---------------
     # traceback
     #   File "/images/src/linux/tools/testing/selftests/tc-testing/./tdc.py", line 495, in test_runner
     #     res = run_one_test(pm, args, index, tidx)
     #   File "/images/src/linux/tools/testing/selftests/tc-testing/./tdc.py", line 434, in run_one_test
     #     prepare_env(args, pm, 'teardown', '-----> teardown stage', tidx['teardown'], procout)
     #   File "/images/src/linux/tools/testing/selftests/tc-testing/./tdc.py", line 245, in prepare_env
     #     raise PluginMgrTestFail(
     # ---------------
     # accumulated output for this test:
     # Error: Specified qdisc kind is unknown.
     #
     # ---------------
     #
     # All test results:
     #
     # 1..1
     # ok 1 84a0 - Create TEQL with default setting # skipped - "-----> teardown stage" did not complete successfully
    
    Fixes: cc62fbe114c9 ("selftests/tc-testing: add selftests for teql qdisc")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62aecf23f3d12f0a1b170bfd2174fd58d0d1bf50
Author: Natalia Petrova <n.petrova@fintech.ru>
Date:   Fri May 12 13:33:20 2023 +0300

    drm/nouveau: add nv_encoder pointer check for NULL
    
    [ Upstream commit 55b94bb8c42464bad3d2217f6874aa1a85664eac ]
    
    Pointer nv_encoder could be dereferenced at nouveau_connector.c
    in case it's equal to NULL by jumping to goto label.
    This patch adds a NULL-check to avoid it.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 3195c5f9784a ("drm/nouveau: set encoder for lvds")
    Signed-off-by: Natalia Petrova <n.petrova@fintech.ru>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    [Fixed patch title]
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230512103320.82234-1-n.petrova@fintech.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb725beca62d175c02ca619c27037c14f7ab8e7c
Author: Natalia Petrova <n.petrova@fintech.ru>
Date:   Fri May 12 14:15:26 2023 +0300

    drm/nouveau/dp: check for NULL nv_connector->native_mode
    
    [ Upstream commit 20a2ce87fbaf81e4c3dcb631d738e423959eb320 ]
    
    Add checking for NULL before calling nouveau_connector_detect_depth() in
    nouveau_connector_get_modes() function because nv_connector->native_mode
    could be dereferenced there since connector pointer passed to
    nouveau_connector_detect_depth() and the same value of
    nv_connector->native_mode is used there.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: d4c2c99bdc83 ("drm/nouveau/dp: remove broken display depth function, use the improved one")
    
    Signed-off-by: Natalia Petrova <n.petrova@fintech.ru>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230512111526.82408-1-n.petrova@fintech.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5acbe4ea5d0847bfce1f12f4cd8780349ba652a
Author: Su Hui <suhui@nfschina.com>
Date:   Thu Jun 8 09:24:43 2023 +0800

    drm/bridge: ti-sn65dsi86: Avoid possible buffer overflow
    
    [ Upstream commit 95011f267c44a4d1f9ca1769e8a29ab2c559e004 ]
    
    Smatch error:buffer overflow 'ti_sn_bridge_refclk_lut' 5 <= 5.
    
    Fixes: cea86c5bb442 ("drm/bridge: ti-sn65dsi86: Implement the pwm_chip")
    Signed-off-by: Su Hui <suhui@nfschina.com>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230608012443.839372-1-suhui@nfschina.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90748be0f4f386ad3143cd7538ef37647e1f6260
Author: Ratchanan Srirattanamet <peathot@hotmail.com>
Date:   Wed May 24 04:11:56 2023 +0700

    drm/nouveau: don't detect DSM for non-NVIDIA device
    
    [ Upstream commit 11d24327c2d7ad7f24fcc44fb00e1fa91ebf6525 ]
    
    The call site of nouveau_dsm_pci_probe() uses single set of output
    variables for all invocations. So, we must not write anything to them
    unless it's an NVIDIA device. Otherwise, if we are called with another
    device after the NVIDIA device, we'll clober the result of the NVIDIA
    device.
    
    For example, if the other device doesn't have _PR3 resources, the
    detection later would miss the presence of power resource support, and
    the rest of the code will keep using Optimus DSM, breaking power
    management for that machine.
    
    Also, because we're detecting NVIDIA's DSM, it doesn't make sense to run
    this detection on a non-NVIDIA device anyway. Thus, check at the
    beginning of the detection code if this is an NVIDIA card, and just
    return if it isn't.
    
    This, together with commit d22915d22ded ("drm/nouveau/devinit/tu102-:
    wait for GFW_BOOT_PROGRESS == COMPLETED") developed independently and
    landed earlier, fixes runtime power management of the NVIDIA card in
    Lenovo Legion 5-15ARH05. Without this patch, the GPU resumption code
    will "timeout", sometimes hanging userspace.
    
    As a bonus, we'll also stop preventing _PR3 usage from the bridge for
    unrelated devices, which is always nice, I guess.
    
    Fixes: ccfc2d5cdb02 ("drm/nouveau: Use generic helper to check _PR3 presence")
    Signed-off-by: Ratchanan Srirattanamet <peathot@hotmail.com>
    Closes: https://gitlab.freedesktop.org/drm/nouveau/-/issues/79
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/DM6PR19MB2780805D4BE1E3F9B3AC96D0BC409@DM6PR19MB2780.namprd19.prod.outlook.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 835457c0d608b388d69d26efbe3b8e4ceeb65e62
Author: Maxime Chevallier <maxime.chevallier@bootlin.com>
Date:   Fri Jun 9 10:03:05 2023 +0200

    net: phylink: use a dedicated helper to parse usgmii control word
    
    [ Upstream commit 923454c0368b8092e9d05c020f50abca577e7290 ]
    
    Q-USGMII is a derivative of USGMII, that uses a specific formatting for
    the control word. The layout is close to the USXGMII control word, but
    doesn't support speeds over 1Gbps. Use a dedicated decoding logic for
    the USGMII control word, re-using USXGMII definitions but only considering
    10/100/1000Mbps speeds
    
    Fixes: 5e61fe157a27 ("net: phy: Introduce QUSGMII PHY mode")
    Signed-off-by: Maxime Chevallier <maxime.chevallier@bootlin.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fabf9cb41334705fcce26aee7f96ba4d70b9fd0f
Author: Maxime Chevallier <maxime.chevallier@bootlin.com>
Date:   Fri Jun 9 10:03:04 2023 +0200

    net: phylink: report correct max speed for QUSGMII
    
    [ Upstream commit b9dc1046edfeb7d9dbc2272c8d9ad5a8c47f3199 ]
    
    Q-USGMII is the quad port version of USGMII, and supports a max speed of
    1Gbps on each line. Make so that phylink_interface_max_speed() reports
    this information correctly.
    
    Fixes: ae0e4bb2a0e0 ("net: phylink: Adjust link settings based on rate matching")
    Signed-off-by: Maxime Chevallier <maxime.chevallier@bootlin.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df7477a8bdcbc99b4d58759fc75c0ce21e53d0b3
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Tue Apr 25 17:44:14 2023 +0200

    igb: fix nvm.ops.read() error handling
    
    [ Upstream commit 48a821fd58837800750ec1b3962f0f799630a844 ]
    
    Add error handling into igb_set_eeprom() function, in case
    nvm.ops.read() fails just quit with error code asap.
    
    Fixes: 9d5c824399de ("igb: PCI-Express 82575 Gigabit Ethernet driver")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9710e5c30bd4fa6d8ff4ccdc05dd7715890ed276
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Mon Apr 17 15:18:39 2023 -0700

    igc: Fix possible system crash when loading module
    
    [ Upstream commit c080fe262f9e73a00934b70c16b1479cf40cd2bd ]
    
    Guarantee that when probe() is run again, PTM and PCI busmaster will be
    in the same state as it was if the driver was never loaded.
    
    Avoid an i225/i226 hardware issue that PTM requests can be made even
    though PCI bus mastering is not enabled. These unexpected PTM requests
    can crash some systems.
    
    So, "force" disable PTM and busmastering before removing the driver,
    so they can be re-enabled in the right order during probe(). This is
    more like a workaround and should be applicable for i225 and i226, in
    any platform.
    
    Fixes: 1b5d73fb8624 ("igc: Enable PCIe PTM")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Reviewed-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6612bf33ebe348c84abc98635e38fe9fbbd4f08
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Mon May 15 23:49:36 2023 +0800

    igc: Clean the TX buffer and TX descriptor ring
    
    [ Upstream commit e43516f5978d11d36511ce63d31d1da4db916510 ]
    
    There could be a race condition during link down where interrupt
    being generated and igc_clean_tx_irq() been called to perform the
    TX completion. Properly clear the TX buffer/descriptor ring and
    disable the TX Queue ring in igc_free_tx_resources() to avoid that.
    
    Kernel trace:
    [  108.237177] Hardware name: Intel Corporation Tiger Lake Client Platform/TigerLake U DDR4 SODIMM RVP, BIOS TGLIFUI1.R00.4204.A00.2105270302 05/27/2021
    [  108.237178] RIP: 0010:refcount_warn_saturate+0x55/0x110
    [  108.242143] RSP: 0018:ffff9e7980003db0 EFLAGS: 00010286
    [  108.245555] Code: 84 bc 00 00 00 c3 cc cc cc cc 85 f6 74 46 80 3d 20 8c 4d 01 00 75 ee 48 c7 c7 88 f4 03 ab c6 05 10 8c 4d 01 01 e8 0b 10 96 ff <0f> 0b c3 cc cc cc cc 80 3d fc 8b 4d 01 00 75 cb 48 c7 c7 b0 f4 03
    [  108.250434]
    [  108.250434] RSP: 0018:ffff9e798125f910 EFLAGS: 00010286
    [  108.254358] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [  108.259325]
    [  108.259325] RAX: 0000000000000000 RBX: ffff8ddb935b8000 RCX: 0000000000000027
    [  108.261868] RDX: ffff8de250a28800 RSI: ffff8de250a1c580 RDI: ffff8de250a1c580
    [  108.265538] RDX: 0000000000000027 RSI: 0000000000000002 RDI: ffff8de250a9c588
    [  108.265539] RBP: ffff8ddb935b8000 R08: ffffffffab2655a0 R09: ffff9e798125f898
    [  108.267914] RBP: ffff8ddb8a5b8d80 R08: 0000005648eba354 R09: 0000000000000000
    [  108.270196] R10: 0000000000000001 R11: 000000002d2d2d2d R12: ffff9e798125f948
    [  108.270197] R13: ffff9e798125fa1c R14: ffff8ddb8a5b8d80 R15: 7fffffffffffffff
    [  108.273001] R10: 000000002d2d2d2d R11: 000000002d2d2d2d R12: ffff8ddb8a5b8ed4
    [  108.276410] FS:  00007f605851b740(0000) GS:ffff8de250a80000(0000) knlGS:0000000000000000
    [  108.280597] R13: 00000000000002ac R14: 00000000ffffff99 R15: ffff8ddb92561b80
    [  108.282966] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  108.282967] CR2: 00007f053c039248 CR3: 0000000185850003 CR4: 0000000000f70ee0
    [  108.286206] FS:  0000000000000000(0000) GS:ffff8de250a00000(0000) knlGS:0000000000000000
    [  108.289701] PKRU: 55555554
    [  108.289702] Call Trace:
    [  108.289704]  <TASK>
    [  108.293977] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  108.297562]  sock_alloc_send_pskb+0x20c/0x240
    [  108.301494] CR2: 00007f053c03a168 CR3: 0000000184394002 CR4: 0000000000f70ef0
    [  108.301495] PKRU: 55555554
    [  108.306464]  __ip_append_data.isra.0+0x96f/0x1040
    [  108.309441] Call Trace:
    [  108.309443]  ? __pfx_ip_generic_getfrag+0x10/0x10
    [  108.314927]  <IRQ>
    [  108.314928]  sock_wfree+0x1c7/0x1d0
    [  108.318078]  ? __pfx_ip_generic_getfrag+0x10/0x10
    [  108.320276]  skb_release_head_state+0x32/0x90
    [  108.324812]  ip_make_skb+0xf6/0x130
    [  108.327188]  skb_release_all+0x16/0x40
    [  108.330775]  ? udp_sendmsg+0x9f3/0xcb0
    [  108.332626]  napi_consume_skb+0x48/0xf0
    [  108.334134]  ? xfrm_lookup_route+0x23/0xb0
    [  108.344285]  igc_poll+0x787/0x1620 [igc]
    [  108.346659]  udp_sendmsg+0x9f3/0xcb0
    [  108.360010]  ? ttwu_do_activate+0x40/0x220
    [  108.365237]  ? __pfx_ip_generic_getfrag+0x10/0x10
    [  108.366744]  ? try_to_wake_up+0x289/0x5e0
    [  108.376987]  ? sock_sendmsg+0x81/0x90
    [  108.395698]  ? __pfx_process_timeout+0x10/0x10
    [  108.395701]  sock_sendmsg+0x81/0x90
    [  108.409052]  __napi_poll+0x29/0x1c0
    [  108.414279]  ____sys_sendmsg+0x284/0x310
    [  108.419507]  net_rx_action+0x257/0x2d0
    [  108.438216]  ___sys_sendmsg+0x7c/0xc0
    [  108.439723]  __do_softirq+0xc1/0x2a8
    [  108.444950]  ? finish_task_switch+0xb4/0x2f0
    [  108.452077]  irq_exit_rcu+0xa9/0xd0
    [  108.453584]  ? __schedule+0x372/0xd00
    [  108.460713]  common_interrupt+0x84/0xa0
    [  108.467840]  ? clockevents_program_event+0x95/0x100
    [  108.474968]  </IRQ>
    [  108.482096]  ? do_nanosleep+0x88/0x130
    [  108.489224]  <TASK>
    [  108.489225]  asm_common_interrupt+0x26/0x40
    [  108.496353]  ? __rseq_handle_notify_resume+0xa9/0x4f0
    [  108.503478] RIP: 0010:cpu_idle_poll+0x2c/0x100
    [  108.510607]  __sys_sendmsg+0x5d/0xb0
    [  108.518687] Code: 05 e1 d9 c8 00 65 8b 15 de 64 85 55 85 c0 7f 57 e8 b9 ef ff ff fb 65 48 8b 1c 25 00 cc 02 00 48 8b 03 a8 08 74 0b eb 1c f3 90 <48> 8b 03 a8 08 75 13 8b 05 77 63 cd 00 85 c0 75 ed e8 ce ec ff ff
    [  108.525817]  do_syscall_64+0x44/0xa0
    [  108.531563] RSP: 0018:ffffffffab203e70 EFLAGS: 00000202
    [  108.538693]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [  108.546775]
    [  108.546777] RIP: 0033:0x7f605862b7f7
    [  108.549495] RAX: 0000000000000001 RBX: ffffffffab20c940 RCX: 000000000000003b
    [  108.551955] Code: 0e 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b9 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 89 54 24 1c 48 89 74 24 10
    [  108.554068] RDX: 4000000000000000 RSI: 000000002da97f6a RDI: 00000000002b8ff4
    [  108.559816] RSP: 002b:00007ffc99264058 EFLAGS: 00000246
    [  108.564178] RBP: 0000000000000000 R08: 00000000002b8ff4 R09: ffff8ddb01554c80
    [  108.571302]  ORIG_RAX: 000000000000002e
    [  108.571303] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f605862b7f7
    [  108.574023] R10: 000000000000015b R11: 000000000000000f R12: ffffffffab20c940
    [  108.574024] R13: 0000000000000000 R14: ffff8de26fbeef40 R15: ffffffffab20c940
    [  108.578727] RDX: 0000000000000000 RSI: 00007ffc992640a0 RDI: 0000000000000003
    [  108.578728] RBP: 00007ffc99264110 R08: 0000000000000000 R09: 175f48ad1c3a9c00
    [  108.581187]  do_idle+0x62/0x230
    [  108.585890] R10: 0000000000000000 R11: 0000000000000246 R12: 00007ffc992642d8
    [  108.585891] R13: 00005577814ab2ba R14: 00005577814addf0 R15: 00007f605876d000
    [  108.587920]  cpu_startup_entry+0x1d/0x20
    [  108.591422]  </TASK>
    [  108.596127]  rest_init+0xc5/0xd0
    [  108.600490] ---[ end trace 0000000000000000 ]---
    
    Test Setup:
    
    DUT:
    - Change mac address on DUT Side. Ensure NIC not having same MAC Address
    - Running udp_tai on DUT side. Let udp_tai running throughout the test
    
    Example:
    ./udp_tai -i enp170s0 -P 100000 -p 90 -c 1 -t 0 -u 30004
    
    Host:
    - Perform link up/down every 5 second.
    
    Result:
    Kernel panic will happen on DUT Side.
    
    Fixes: 13b5b7fd6a4a ("igc: Add support for Tx/Rx rings")
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe289f8fee9a7edd5d148ecb7ad11aa22ae53d2c
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Jun 9 14:05:19 2023 +0300

    sctp: fix an error code in sctp_sf_eat_auth()
    
    [ Upstream commit 75e6def3b26736e7ff80639810098c9074229737 ]
    
    The sctp_sf_eat_auth() function is supposed to enum sctp_disposition
    values and returning a kernel error code will cause issues in the
    caller.  Change -ENOMEM to SCTP_DISPOSITION_NOMEM.
    
    Fixes: 65b07e5d0d09 ("[SCTP]: API updates to suport SCTP-AUTH extensions.")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b8ae7d6e4ad30477d22e7d023c860e90fb71dbb
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jun 9 17:15:02 2023 +0800

    ipvlan: fix bound dev checking for IPv6 l3s mode
    
    [ Upstream commit ce57adc222aba32431c42632b396e9213d0eb0b8 ]
    
    The commit 59a0b022aa24 ("ipvlan: Make skb->skb_iif track skb->dev for l3s
    mode") fixed ipvlan bonded dev checking by updating skb skb_iif. This fix
    works for IPv4, as in raw_v4_input() the dif is from inet_iif(skb), which
    is skb->skb_iif when there is no route.
    
    But for IPv6, the fix is not enough, because in ipv6_raw_deliver() ->
    raw_v6_match(), the dif is inet6_iif(skb), which is returns IP6CB(skb)->iif
    instead of skb->skb_iif if it's not a l3_slave. To fix the IPv6 part
    issue. Let's set IP6CB(skb)->iif to correct ifindex.
    
    BTW, ipvlan handles NS/NA specifically. Since it works fine, I will not
    reset IP6CB(skb)->iif when addr->atype is IPVL_ICMPV6.
    
    Fixes: c675e06a98a4 ("ipvlan: decouple l3s mode dependencies from other modes")
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2196710
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33bd6b76ac772e87713bcce2c6352190762996bf
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Jun 8 09:23:44 2023 -0700

    net: ethtool: correct MAX attribute value for stats
    
    [ Upstream commit 52f79609c0c5b25fddb88e85f25ce08aa7e3fb42 ]
    
    When compiling YNL generated code compiler complains about
    array-initializer-out-of-bounds. Turns out the MAX value
    for STATS_GRP uses the value for STATS.
    
    This may lead to random corruptions in user space (kernel
    itself doesn't use this value as it never parses stats).
    
    Fixes: f09ea6fb1272 ("ethtool: add a new command for reading standard stats")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 277fbf63b34a377c800d25c7cfd8231ba19cffe2
Author: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
Date:   Tue Jun 6 03:25:31 2023 -0700

    IB/isert: Fix incorrect release of isert connection
    
    [ Upstream commit 699826f4e30ab76a62c238c86fbef7e826639c8d ]
    
    The ib_isert module is releasing the isert connection both in
    isert_wait_conn() handler as well as isert_free_conn() handler.
    In isert_wait_conn() handler, it is expected to wait for iSCSI
    session logout operation to complete. It should free the isert
    connection only in isert_free_conn() handler.
    
    When a bunch of iSER target is cleared, this issue can lead to
    use-after-free memory issue as isert conn is twice released
    
    Fixes: b02efbfc9a05 ("iser-target: Fix implicit termination of connections")
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Link: https://lore.kernel.org/r/20230606102531.162967-4-saravanan.vajravel@broadcom.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f77965f48792113ae4f92276bee4cf41ddf2954e
Author: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
Date:   Tue Jun 6 03:25:30 2023 -0700

    IB/isert: Fix possible list corruption in CMA handler
    
    [ Upstream commit 7651e2d6c5b359a28c2d4c904fec6608d1021ca8 ]
    
    When ib_isert module receives connection error event, it is
    releasing the isert session and removes corresponding list
    node but it doesn't take appropriate mutex lock to remove
    the list node.  This can lead to linked  list corruption
    
    Fixes: bd3792205aae ("iser-target: Fix pending connections handling in target stack shutdown sequnce")
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
    Link: https://lore.kernel.org/r/20230606102531.162967-3-saravanan.vajravel@broadcom.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e55c9abe94765620a61149a7d18c5e3444b8187
Author: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
Date:   Tue Jun 6 03:25:29 2023 -0700

    IB/isert: Fix dead lock in ib_isert
    
    [ Upstream commit 691b0480933f0ce88a81ed1d1a0aff340ff6293a ]
    
    - When a iSER session is released, ib_isert module is taking a mutex
      lock and releasing all pending connections. As part of this, ib_isert
      is destroying rdma cm_id. To destroy cm_id, rdma_cm module is sending
      CM events to CMA handler of ib_isert. This handler is taking same
      mutex lock. Hence it leads to deadlock between ib_isert & rdma_cm
      modules.
    
    - For fix, created local list of pending connections and release the
      connection outside of mutex lock.
    
    Calltrace:
    ---------
    [ 1229.791410] INFO: task kworker/10:1:642 blocked for more than 120 seconds.
    [ 1229.791416]       Tainted: G           OE    --------- -  - 4.18.0-372.9.1.el8.x86_64 #1
    [ 1229.791418] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [ 1229.791419] task:kworker/10:1    state:D stack:    0 pid:  642 ppid:     2 flags:0x80004000
    [ 1229.791424] Workqueue: ib_cm cm_work_handler [ib_cm]
    [ 1229.791436] Call Trace:
    [ 1229.791438]  __schedule+0x2d1/0x830
    [ 1229.791445]  ? select_idle_sibling+0x23/0x6f0
    [ 1229.791449]  schedule+0x35/0xa0
    [ 1229.791451]  schedule_preempt_disabled+0xa/0x10
    [ 1229.791453]  __mutex_lock.isra.7+0x310/0x420
    [ 1229.791456]  ? select_task_rq_fair+0x351/0x990
    [ 1229.791459]  isert_cma_handler+0x224/0x330 [ib_isert]
    [ 1229.791463]  ? ttwu_queue_wakelist+0x159/0x170
    [ 1229.791466]  cma_cm_event_handler+0x25/0xd0 [rdma_cm]
    [ 1229.791474]  cma_ib_handler+0xa7/0x2e0 [rdma_cm]
    [ 1229.791478]  cm_process_work+0x22/0xf0 [ib_cm]
    [ 1229.791483]  cm_work_handler+0xf4/0xf30 [ib_cm]
    [ 1229.791487]  ? move_linked_works+0x6e/0xa0
    [ 1229.791490]  process_one_work+0x1a7/0x360
    [ 1229.791491]  ? create_worker+0x1a0/0x1a0
    [ 1229.791493]  worker_thread+0x30/0x390
    [ 1229.791494]  ? create_worker+0x1a0/0x1a0
    [ 1229.791495]  kthread+0x10a/0x120
    [ 1229.791497]  ? set_kthread_struct+0x40/0x40
    [ 1229.791499]  ret_from_fork+0x1f/0x40
    
    [ 1229.791739] INFO: task targetcli:28666 blocked for more than 120 seconds.
    [ 1229.791740]       Tainted: G           OE    --------- -  - 4.18.0-372.9.1.el8.x86_64 #1
    [ 1229.791741] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [ 1229.791742] task:targetcli       state:D stack:    0 pid:28666 ppid:  5510 flags:0x00004080
    [ 1229.791743] Call Trace:
    [ 1229.791744]  __schedule+0x2d1/0x830
    [ 1229.791746]  schedule+0x35/0xa0
    [ 1229.791748]  schedule_preempt_disabled+0xa/0x10
    [ 1229.791749]  __mutex_lock.isra.7+0x310/0x420
    [ 1229.791751]  rdma_destroy_id+0x15/0x20 [rdma_cm]
    [ 1229.791755]  isert_connect_release+0x115/0x130 [ib_isert]
    [ 1229.791757]  isert_free_np+0x87/0x140 [ib_isert]
    [ 1229.791761]  iscsit_del_np+0x74/0x120 [iscsi_target_mod]
    [ 1229.791776]  lio_target_np_driver_store+0xe9/0x140 [iscsi_target_mod]
    [ 1229.791784]  configfs_write_file+0xb2/0x110
    [ 1229.791788]  vfs_write+0xa5/0x1a0
    [ 1229.791792]  ksys_write+0x4f/0xb0
    [ 1229.791794]  do_syscall_64+0x5b/0x1a0
    [ 1229.791798]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    
    Fixes: bd3792205aae ("iser-target: Fix pending connections handling in target stack shutdown sequnce")
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
    Link: https://lore.kernel.org/r/20230606102531.162967-2-saravanan.vajravel@broadcom.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1def2a94f4ee38e8442b4b1e6d8354bf61cb6bb0
Author: Mark Bloch <mbloch@nvidia.com>
Date:   Mon Jun 5 13:33:26 2023 +0300

    RDMA/mlx5: Fix affinity assignment
    
    [ Upstream commit 617f5db1a626f18d5cbb7c7faf7bf8f9ea12be78 ]
    
    The cited commit aimed to ensure that Virtual Functions (VFs) assign a
    queue affinity to a Queue Pair (QP) to distribute traffic when
    the LAG master creates a hardware LAG. If the affinity was set while
    the hardware was not in LAG, the firmware would ignore the affinity value.
    
    However, this commit unintentionally assigned an affinity to QPs on the LAG
    master's VPORT even if the RDMA device was not marked as LAG-enabled.
    In most cases, this was not an issue because when the hardware entered
    hardware LAG configuration, the RDMA device of the LAG master would be
    destroyed and a new one would be created, marked as LAG-enabled.
    
    The problem arises when a user configures Equal-Cost Multipath (ECMP).
    In ECMP mode, traffic can be directed to different physical ports based on
    the queue affinity, which is intended for use by VPORTS other than the
    E-Switch manager. ECMP mode is supported only if both E-Switch managers are
    in switchdev mode and the appropriate route is configured via IP. In this
    configuration, the RDMA device is not destroyed, and we retain the RDMA
    device that is not marked as LAG-enabled.
    
    To ensure correct behavior, Send Queues (SQs) opened by the E-Switch
    manager through verbs should be assigned strict affinity. This means they
    will only be able to communicate through the native physical port
    associated with the E-Switch manager. This will prevent the firmware from
    assigning affinity and will not allow the SQs to be remapped in case of
    failover.
    
    Fixes: 802dcc7fc5ec ("RDMA/mlx5: Support TX port affinity for VF drivers in LAG mode")
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Mark Bloch <mbloch@nvidia.com>
    Link: https://lore.kernel.org/r/425b05f4da840bc684b0f7e8ebf61aeb5cef09b0.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8618f8f72389b46ed976e3fe15badf03c1a0efab
Author: Yishai Hadas <yishaih@nvidia.com>
Date:   Mon Jun 5 13:33:25 2023 +0300

    IB/uverbs: Fix to consider event queue closing also upon non-blocking mode
    
    [ Upstream commit 62fab312fa1683e812e605db20d4f22de3e3fb2f ]
    
    Fix ib_uverbs_event_read() to consider event queue closing also upon
    non-blocking mode.
    
    Once the queue is closed (e.g. hot-plug flow) all the existing events
    are cleaned-up as part of ib_uverbs_free_event_queue().
    
    An application that uses the non-blocking FD mode should get -EIO in
    that case to let it knows that the device was removed already.
    
    Otherwise, it can loose the indication that the device was removed and
    won't recover.
    
    As part of that, refactor the code to have a single flow with regards to
    'is_closed' for both blocking and non-blocking modes.
    
    Fixes: 14e23bd6d221 ("RDMA/core: Fix locking in ib_uverbs_event_read")
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Yishai Hadas <yishaih@nvidia.com>
    Link: https://lore.kernel.org/r/97b00116a1e1e13f8dc4ec38a5ea81cf8c030210.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dc0b367c3908472bf96e088d7eb4f4f8d092da7
Author: Mark Zhang <markzhang@nvidia.com>
Date:   Mon Jun 5 13:33:23 2023 +0300

    RDMA/cma: Always set static rate to 0 for RoCE
    
    [ Upstream commit 58030c76cce473b6cfd630bbecb97215def0dff8 ]
    
    Set static rate to 0 as it should be discovered by path query and
    has no meaning for RoCE.
    This also avoid of using the rtnl lock and ethtool API, which is
    a bottleneck when try to setup many rdma-cm connections at the same
    time, especially with multiple processes.
    
    Fixes: 3c86aa70bf67 ("RDMA/cm: Add RDMA CM support for IBoE devices")
    Signed-off-by: Mark Zhang <markzhang@nvidia.com>
    Link: https://lore.kernel.org/r/f72a4f8b667b803aee9fa794069f61afb5839ce4.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec6d49687d2b6056bf8ee35204c91e9eb1e188f1
Author: Mark Bloch <mbloch@nvidia.com>
Date:   Mon Jun 5 13:33:18 2023 +0300

    RDMA/mlx5: Create an indirect flow table for steering anchor
    
    [ Upstream commit e1f4a52ac171dd863fe89055e749ef5e0a0bc5ce ]
    
    A misbehaved user can create a steering anchor that points to a kernel
    flow table and then destroy the anchor without freeing the associated
    STC. This creates a problem as the kernel can't destroy the flow
    table since there is still a reference to it. As a result, this can
    exhaust all available flow table resources, preventing other users from
    using the RDMA device.
    
    To prevent this problem, a solution is implemented where a special flow
    table with two steering rules is created when a user creates a steering
    anchor for the first time. The rules include one that drops all traffic
    and another that points to the kernel flow table. If the steering anchor
    is destroyed, only the rule pointing to the kernel's flow table is removed.
    Any traffic reaching the special flow table after that is dropped.
    
    Since the special flow table is not destroyed when the steering anchor is
    destroyed, any issues are prevented from occurring. The remaining resources
    are only destroyed when the RDMA device is destroyed, which happens after
    all DEVX objects are freed, including the STCs, thus mitigating the issue.
    
    Fixes: 0c6ab0ca9a66 ("RDMA/mlx5: Expose steering anchor to userspace")
    Signed-off-by: Mark Bloch <mbloch@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Link: https://lore.kernel.org/r/b4a88a871d651fa4e8f98d552553c1cfe9ba2cd6.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a83145b660cbfd6be7bd7d9ce7e92c05f284cc0
Author: Maher Sanalla <msanalla@nvidia.com>
Date:   Mon Jun 5 13:33:17 2023 +0300

    RDMA/mlx5: Initiate dropless RQ for RAW Ethernet functions
    
    [ Upstream commit ee4d269eccfea6c17b18281bef482700d898e86f ]
    
    Delay drop data is initiated for PFs that have the capability of
    rq_delay_drop and are in roce profile.
    
    However, PFs with RAW ethernet profile do not initiate delay drop data
    on function load, causing kernel panic if delay drop struct members are
    accessed later on in case a dropless RQ is created.
    
    Thus, stage the delay drop initialization as part of RAW ethernet
    PF loading process.
    
    Fixes: b5ca15ad7e61 ("IB/mlx5: Add proper representors support")
    Signed-off-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Link: https://lore.kernel.org/r/2e9d386785043d48c38711826eb910315c1de141.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c764fed5e544839d3f3dfc7ee248a8a508a9f200
Author: Nithin Dabilpuram <ndabilpuram@marvell.com>
Date:   Thu Jun 8 17:12:01 2023 +0530

    octeontx2-af: fix lbk link credits on cn10k
    
    [ Upstream commit 87e12a17eef476bbf768dc3a74419ad461f36fbc ]
    
    Fix LBK link credits on CN10K to be same as CN9K i.e
    16 * MAX_LBK_DATA_RATE instead of current scheme of
    calculation based on LBK buf length / FIFO size.
    
    Fixes: 6e54e1c5399a ("octeontx2-af: cn10K: Add MTU configuration")
    Signed-off-by: Nithin Dabilpuram <ndabilpuram@marvell.com>
    Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
    Reviewed-by: Sridhar Samudrala <sridhar.samudrala@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c6d50414649756508379e873d87ab2726a2fc7d
Author: Satha Rao <skoteshwar@marvell.com>
Date:   Thu Jun 8 17:12:00 2023 +0530

    octeontx2-af: fixed resource availability check
    
    [ Upstream commit 4e635f9d86165e47f5440196f2ebdb258efb8341 ]
    
    txschq_alloc response have two different arrays to store continuous
    and non-continuous schedulers of each level. Requested count should
    be checked for each array separately.
    
    Fixes: 5d9b976d4480 ("octeontx2-af: Support fixed transmit scheduler topology")
    Signed-off-by: Satha Rao <skoteshwar@marvell.com>
    Signed-off-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
    Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
    Reviewed-by: Sridhar Samudrala <sridhar.samudrala@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4a3cae58cd86371293a6e504c4a10a31ea51ae2
Author: Ahmed Zaki <ahmed.zaki@intel.com>
Date:   Thu Jun 8 13:02:26 2023 -0700

    iavf: remove mask from iavf_irq_enable_queues()
    
    [ Upstream commit c37cf54c12cfaa51e7aaf88708167b0d3259e64e ]
    
    Enable more than 32 IRQs by removing the u32 bit mask in
    iavf_irq_enable_queues(). There is no need for the mask as there are no
    callers that select individual IRQs through the bitmask. Also, if the PF
    allocates more than 32 IRQs, this mask will prevent us from using all of
    them.
    
    Modify the comment in iavf_register.h to show that the maximum number
    allowed for the IRQ index is 63 as per the iAVF standard 1.0 [1].
    
    link: [1] https://www.intel.com/content/dam/www/public/us/en/documents/product-specifications/ethernet-adaptive-virtual-function-hardware-spec.pdf
    Fixes: 5eae00c57f5e ("i40evf: main driver core")
    Signed-off-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20230608200226.451861-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26256aa7edcdd936be6ee63d18a5bbf0b8e32bf4
Author: Zhu Yanjun <yanjun.zhu@linux.dev>
Date:   Fri Jun 2 11:54:08 2023 +0800

    RDMA/rxe: Fix the use-before-initialization error of resp_pkts
    
    [ Upstream commit 2a62b6210ce876c596086ab8fd4c8a0c3d10611a ]
    
    In the following:
    
      Call Trace:
       <TASK>
       __dump_stack lib/dump_stack.c:88 [inline]
       dump_stack_lvl+0xd9/0x150 lib/dump_stack.c:106
       assign_lock_key kernel/locking/lockdep.c:982 [inline]
       register_lock_class+0xdb6/0x1120 kernel/locking/lockdep.c:1295
       __lock_acquire+0x10a/0x5df0 kernel/locking/lockdep.c:4951
       lock_acquire kernel/locking/lockdep.c:5691 [inline]
       lock_acquire+0x1b1/0x520 kernel/locking/lockdep.c:5656
       __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
       _raw_spin_lock_irqsave+0x3d/0x60 kernel/locking/spinlock.c:162
       skb_dequeue+0x20/0x180 net/core/skbuff.c:3639
       drain_resp_pkts drivers/infiniband/sw/rxe/rxe_comp.c:555 [inline]
       rxe_completer+0x250d/0x3cc0 drivers/infiniband/sw/rxe/rxe_comp.c:652
       rxe_qp_do_cleanup+0x1be/0x820 drivers/infiniband/sw/rxe/rxe_qp.c:761
       execute_in_process_context+0x3b/0x150 kernel/workqueue.c:3473
       __rxe_cleanup+0x21e/0x370 drivers/infiniband/sw/rxe/rxe_pool.c:233
       rxe_create_qp+0x3f6/0x5f0 drivers/infiniband/sw/rxe/rxe_verbs.c:583
    
    This is a use-before-initialization problem.
    
    It happens because rxe_qp_do_cleanup is called during error unwind before
    the struct has been fully initialized.
    
    Move the initialization of the skb earlier.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20230602035408.741534-1-yanjun.zhu@intel.com
    Reported-by: syzbot+eba589d8f49c73d356da@syzkaller.appspotmail.com
    Signed-off-by: Zhu Yanjun <yanjun.zhu@linux.dev>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0b3848e0363d5dc7b9293674530d43674b1b224
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Fri Oct 21 15:01:04 2022 -0500

    RDMA/rxe: Removed unused name from rxe_task struct
    
    [ Upstream commit de669ae8af49ceed0eed44f5b3d51dc62affc5e4 ]
    
    The name field in struct rxe_task is never used. This patch removes it.
    
    Link: https://lore.kernel.org/r/20221021200118.2163-4-rpearsonhpe@gmail.com
    Signed-off-by: Ian Ziemba <ian.ziemba@hpe.com>
    Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Stable-dep-of: 2a62b6210ce8 ("RDMA/rxe: Fix the use-before-initialization error of resp_pkts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e83bc93886276b7689c229d9c9563b3793bb70bd
Author: Benjamin Berg <benjamin.berg@intel.com>
Date:   Thu Jun 8 16:36:02 2023 +0300

    wifi: mac80211: take lock before setting vif links
    
    [ Upstream commit 15846f95ab01b71fdb1cef8df73680aad41edf70 ]
    
    ieee80211_vif_set_links requires the sdata->local->mtx lock to be held.
    Add the appropriate locking around the calls in both the link add and
    remove handlers.
    
    This causes a warning when e.g. ieee80211_link_release_channel is called
    via ieee80211_link_stop from ieee80211_vif_update_links.
    
    Fixes: 0d8c4a3c8688 ("wifi: mac80211: implement add/del interface link callbacks")
    Signed-off-by: Benjamin Berg <benjamin.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230608163202.fa0c6597fdad.I83dd70359f6cda30f86df8418d929c2064cf4995@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 170ceadf4a57d2e7d259e85366d37874bff1ea65
Author: Benjamin Berg <benjamin.berg@intel.com>
Date:   Thu Jun 8 16:36:01 2023 +0300

    wifi: cfg80211: fix link del callback to call correct handler
    
    [ Upstream commit 1ff56684fa8682bdfbbce4e12cf67ab23cb1db05 ]
    
    The wrapper function was incorrectly calling the add handler instead of
    the del handler. This had no negative side effect as the default
    handlers are essentially identical.
    
    Fixes: f2a0290b2df2 ("wifi: cfg80211: add optional link add/remove callbacks")
    Signed-off-by: Benjamin Berg <benjamin.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230608163202.ebd00e000459.Iaff7dc8d1cdecf77f53ea47a0e5080caa36ea02a@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49f3a79f03bdbcb16a133d51e9c57b57cf22d96e
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Jun 8 16:35:59 2023 +0300

    wifi: mac80211: fix link activation settings order
    
    [ Upstream commit 01605ad6c3e8608d7e147c9b75d67eb8a3d27d88 ]
    
    In the normal MLME code we always call
    ieee80211_mgd_set_link_qos_params() before
    ieee80211_link_info_change_notify() and some drivers,
    notably iwlwifi, rely on that as they don't do anything
    (but store the data) in their conf_tx.
    
    Fix the order here to be the same as in the normal code
    paths, so this isn't broken.
    
    Fixes: 3d9011029227 ("wifi: mac80211: implement link switching")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230608163202.a2a86bba2f80.Iac97e04827966d22161e63bb6e201b4061e9651b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07f9cc229b44cbcee6385802d390091d915f38c3
Author: Lee Jones <lee@kernel.org>
Date:   Thu Jun 8 08:29:03 2023 +0100

    net/sched: cls_u32: Fix reference counter leak leading to overflow
    
    [ Upstream commit 04c55383fa5689357bcdd2c8036725a55ed632bc ]
    
    In the event of a failure in tcf_change_indev(), u32_set_parms() will
    immediately return without decrementing the recently incremented
    reference counter.  If this happens enough times, the counter will
    rollover and the reference freed, leading to a double free which can be
    used to do 'bad things'.
    
    In order to prevent this, move the point of possible failure above the
    point where the reference counter is incremented.  Also save any
    meaningful return values to be applied to the return data at the
    appropriate point in time.
    
    This issue was caught with KASAN.
    
    Fixes: 705c7091262d ("net: sched: cls_u32: no need to call tcf_exts_change for newly allocated struct")
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9411f014e5ccd2e3cb2dc8ab96ea6bc76a978f6
Author: Ratheesh Kannoth <rkannoth@marvell.com>
Date:   Thu Jun 8 10:46:25 2023 +0530

    octeontx2-af: Fix promiscuous mode
    
    [ Upstream commit c0e489372a294044feea650b38f38c888eff57a4 ]
    
    CN10KB silicon introduced a new exact match feature,
    which is used for DMAC filtering. The state of installed
    DMAC filters in this exact match table is getting corrupted
    when promiscuous mode is toggled. Fix this by not touching
    Exact match related config when promiscuous mode is toggled.
    
    Fixes: 2dba9459d2c9 ("octeontx2-af: Wrapper functions for MAC addr add/del/update/reset")
    Signed-off-by: Ratheesh Kannoth <rkannoth@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cf38fbc82bac41e44368514e00a27c4c2818bd7
Author: Max Tottenham <mtottenh@akamai.com>
Date:   Wed Jun 7 12:23:54 2023 -0400

    net/sched: act_pedit: Parse L3 Header for L4 offset
    
    [ Upstream commit 6c02568fd1ae53099b4ab86365c5be1ff15f586b ]
    
    Instead of relying on skb->transport_header being set correctly, opt
    instead to parse the L3 header length out of the L3 headers for both
    IPv4/IPv6 when the Extended Layer Op for tcp/udp is used. This fixes a
    bug if GRO is disabled, when GRO is disabled skb->transport_header is
    set by __netif_receive_skb_core() to point to the L3 header, it's later
    fixed by the upper protocol layers, but act_pedit will receive the SKB
    before the fixups are completed. The existing behavior causes the
    following to edit the L3 header if GRO is disabled instead of the UDP
    header:
    
        tc filter add dev eth0 ingress protocol ip flower ip_proto udp \
     dst_ip 192.168.1.3 action pedit ex munge udp set dport 18053
    
    Also re-introduce a rate-limited warning if we were unable to extract
    the header offset when using the 'ex' interface.
    
    Fixes: 71d0ed7079df ("net/act_pedit: Support using offset relative to
    the conventional network headers")
    Signed-off-by: Max Tottenham <mtottenh@akamai.com>
    Reviewed-by: Josh Hunt <johunt@akamai.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202305261541.N165u9TZ-lkp@intel.com/
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb25478f66990ef9094ce43f884f29a361ce8ad2
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Fri Apr 21 18:25:16 2023 -0300

    net/sched: act_pedit: remove extra check for key type
    
    [ Upstream commit 577140180ba28d0d37bc898c7bd6702c83aa106f ]
    
    The netlink parsing already validates the key 'htype'.
    Remove the datapath check as it's redundant.
    
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 6c02568fd1ae ("net/sched: act_pedit: Parse L3 Header for L4 offset")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4e5d0c4cf07caef4b596a7afe0b4ad8e15d8283
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Tue Jan 31 16:05:12 2023 -0300

    net/sched: simplify tcf_pedit_act
    
    [ Upstream commit 95b069382351826c0ae37938070aa82dbeaf288d ]
    
    Remove the check for a negative number of keys as
    this cannot ever happen
    
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 6c02568fd1ae ("net/sched: act_pedit: Parse L3 Header for L4 offset")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 300be9f1dc4be4052f5f4abb4d308a90b9359fd6
Author: Yuezhen Luan <eggcar.luan@gmail.com>
Date:   Wed Jun 7 09:41:16 2023 -0700

    igb: Fix extts capture value format for 82580/i354/i350
    
    [ Upstream commit 6292d7436cf2f0a2ea8800a1d2cbb155d237818a ]
    
    82580/i354/i350 features circle-counter-like timestamp registers
    that are different with newer i210. The EXTTS capture value in
    AUXTSMPx should be converted from raw circle counter value to
    timestamp value in resolution of 1 nanosec by the driver.
    
    This issue can be reproduced on i350 nics, connecting an 1PPS
    signal to a SDP pin, and run 'ts2phc' command to read external
    1PPS timestamp value. On i210 this works fine, but on i350 the
    extts is not correctly converted.
    
    The i350/i354/82580's SYSTIM and other timestamp registers are
    40bit counters, presenting time range of 2^40 ns, that means these
    registers overflows every about 1099s. This causes all these regs
    can't be used directly in contrast to the newer i210/i211s.
    
    The igb driver needs to convert these raw register values to
    valid time stamp format by using kernel timecounter apis for i350s
    families. Here the igb_extts() just forgot to do the convert.
    
    Fixes: 38970eac41db ("igb: support EXTTS on 82580/i354/i350")
    Signed-off-by: Yuezhen Luan <eggcar.luan@gmail.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230607164116.3768175-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4a912aee14e8fa4f136da849e9c9197789fa347
Author: Guillaume Nault <gnault@redhat.com>
Date:   Wed Jun 7 18:05:02 2023 +0200

    ping6: Fix send to link-local addresses with VRF.
    
    [ Upstream commit 91ffd1bae1dafbb9e34b46813f5b058581d9144d ]
    
    Ping sockets can't send packets when they're bound to a VRF master
    device and the output interface is set to a slave device.
    
    For example, when net.ipv4.ping_group_range is properly set, so that
    ping6 can use ping sockets, the following kind of commands fails:
      $ ip vrf exec red ping6 fe80::854:e7ff:fe88:4bf1%eth1
    
    What happens is that sk->sk_bound_dev_if is set to the VRF master
    device, but 'oif' is set to the real output device. Since both are set
    but different, ping_v6_sendmsg() sees their value as inconsistent and
    fails.
    
    Fix this by allowing 'oif' to be a slave device of ->sk_bound_dev_if.
    
    This fixes the following kselftest failure:
      $ ./fcnal-test.sh -t ipv6_ping
      [...]
      TEST: ping out, vrf device+address bind - ns-B IPv6 LLA        [FAIL]
    
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/b6191f90-ffca-dbca-7d06-88a9788def9c@alu.unizg.hr/
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Fixes: 5e457896986e ("net: ipv6: Fix ping to link-local addresses.")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/6c8b53108816a8d0d5705ae37bdc5a8322b5e3d9.1686153846.git.gnault@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 381d49ec68ca0dfdf7582d204a4028bf46b8b84f
Author: Wei Fang <wei.fang@nxp.com>
Date:   Wed Jun 7 17:10:48 2023 +0800

    net: enetc: correct the indexes of highest and 2nd highest TCs
    
    [ Upstream commit 21225873be1472b7c59ed3650396af0e40578112 ]
    
    For ENETC hardware, the TCs are numbered from 0 to N-1, where N
    is the number of TCs. Numerically higher TC has higher priority.
    It's obvious that the highest priority TC index should be N-1 and
    the 2nd highest priority TC index should be N-2.
    
    However, the previous logic uses netdev_get_prio_tc_map() to get
    the indexes of highest priority and 2nd highest priority TCs, it
    does not make sense and is incorrect to give a "tc" argument to
    netdev_get_prio_tc_map(). So the driver may get the wrong indexes
    of the two highest priotiry TCs which would lead to failed to set
    the CBS for the two highest priotiry TCs.
    
    e.g.
    $ tc qdisc add dev eno0 parent root handle 100: mqprio num_tc 6 \
            map 0 0 1 1 2 3 4 5 queues 1@0 1@1 1@2 1@3 2@4 2@6 hw 1
    $ tc qdisc replace dev eno0 parent 100:6 cbs idleslope 100000 \
            sendslope -900000 hicredit 12 locredit -113 offload 1
    $ Error: Specified device failed to setup cbs hardware offload.
      ^^^^^
    
    In this example, the previous logic deems the indexes of the two
    highest priotiry TCs should be 3 and 2. Actually, the indexes are
    5 and 4, because the number of TCs is 6. So it would be failed to
    configure the CBS for the two highest priority TCs.
    
    Fixes: c431047c4efe ("enetc: add support Credit Based Shaper(CBS) for hardware offload")
    Signed-off-by: Wei Fang <wei.fang@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4aaa3b730d16c13cc3feaa127bfca1af201d969d
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jun 8 02:32:02 2023 +0200

    netfilter: nf_tables: incorrect error path handling with NFT_MSG_NEWRULE
    
    [ Upstream commit 1240eb93f0616b21c675416516ff3d74798fdc97 ]
    
    In case of error when adding a new rule that refers to an anonymous set,
    deactivate expressions via NFT_TRANS_PREPARE state, not NFT_TRANS_RELEASE.
    Thus, the lookup expression marks anonymous sets as inactive in the next
    generation to ensure it is not reachable in this transaction anymore and
    decrement the set refcount as introduced by c1592a89942e ("netfilter:
    nf_tables: deactivate anonymous set from preparation phase"). The abort
    step takes care of undoing the anonymous set.
    
    This is also consistent with rule deletion, where NFT_TRANS_PREPARE is
    used. Note that this error path is exercised in the preparation step of
    the commit protocol. This patch replaces nf_tables_rule_release() by the
    deactivate and destroy calls, this time with NFT_TRANS_PREPARE.
    
    Due to this incorrect error handling, it is possible to access a
    dangling pointer to the anonymous set that remains in the transaction
    list.
    
    [1009.379054] BUG: KASAN: use-after-free in nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379106] Read of size 8 at addr ffff88816c4c8020 by task nft-rule-add/137110
    [1009.379116] CPU: 7 PID: 137110 Comm: nft-rule-add Not tainted 6.4.0-rc4+ #256
    [1009.379128] Call Trace:
    [1009.379132]  <TASK>
    [1009.379135]  dump_stack_lvl+0x33/0x50
    [1009.379146]  ? nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379191]  print_address_description.constprop.0+0x27/0x300
    [1009.379201]  kasan_report+0x107/0x120
    [1009.379210]  ? nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379255]  nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379302]  nft_lookup_init+0xa5/0x270 [nf_tables]
    [1009.379350]  nf_tables_newrule+0x698/0xe50 [nf_tables]
    [1009.379397]  ? nf_tables_rule_release+0xe0/0xe0 [nf_tables]
    [1009.379441]  ? kasan_unpoison+0x23/0x50
    [1009.379450]  nfnetlink_rcv_batch+0x97c/0xd90 [nfnetlink]
    [1009.379470]  ? nfnetlink_rcv_msg+0x480/0x480 [nfnetlink]
    [1009.379485]  ? __alloc_skb+0xb8/0x1e0
    [1009.379493]  ? __alloc_skb+0xb8/0x1e0
    [1009.379502]  ? entry_SYSCALL_64_after_hwframe+0x46/0xb0
    [1009.379509]  ? unwind_get_return_address+0x2a/0x40
    [1009.379517]  ? write_profile+0xc0/0xc0
    [1009.379524]  ? avc_lookup+0x8f/0xc0
    [1009.379532]  ? __rcu_read_unlock+0x43/0x60
    
    Fixes: 958bee14d071 ("netfilter: nf_tables: use new transaction infrastructure to handle sets")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bec51844f9bafa7ddb943aaafd258cdace55f2ec
Author: Kamil Maziarz <kamil.maziarz@intel.com>
Date:   Tue Jun 6 12:33:58 2023 +0200

    ice: Fix XDP memory leak when NIC is brought up and down
    
    [ Upstream commit 78c50d6961fc05491ebbc71c35d87324b1a4f49a ]
    
    Fix the buffer leak that occurs while switching
    the port up and down with traffic and XDP by
    checking for an active XDP program and freeing all empty TX buffers.
    
    Fixes: efc2214b6047 ("ice: Add support for XDP")
    Signed-off-by: Kamil Maziarz <kamil.maziarz@intel.com>
    Tested-by: Chandan Kumar Rout <chandanx.rout@intel.com> (A Contingent Worker at Intel)
    Acked-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fddf3f05156538d072c8a3fc7c09fd54f32df87
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jun 8 00:19:12 2023 +0200

    netfilter: nfnetlink: skip error delivery on batch in case of ENOMEM
    
    [ Upstream commit a1a64a151dae8ac3581c1cbde44b672045cb658b ]
    
    If caller reports ENOMEM, then stop iterating over the batch and send a
    single netlink message to userspace to report OOM.
    
    Fixes: cbb8125eb40b ("netfilter: nfnetlink: deliver netlink errors on batch completion")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55b7a00f3422a0291c837ce856068b1997af2d10
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Jun 7 11:55:42 2023 +0200

    netfilter: nf_tables: integrate pipapo into commit protocol
    
    [ Upstream commit 212ed75dc5fb9d1423b3942c8f872a868cda3466 ]
    
    The pipapo set backend follows copy-on-update approach, maintaining one
    clone of the existing datastructure that is being updated. The clone
    and current datastructures are swapped via rcu from the commit step.
    
    The existing integration with the commit protocol is flawed because
    there is no operation to clean up the clone if the transaction is
    aborted. Moreover, the datastructure swap happens on set element
    activation.
    
    This patch adds two new operations for sets: commit and abort, these new
    operations are invoked from the commit and abort steps, after the
    transactions have been digested, and it updates the pipapo set backend
    to use it.
    
    This patch adds a new ->pending_update field to sets to maintain a list
    of sets that require this new commit and abort operations.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 839d38d3b0aa2ece4ff0758ca4fff98090efeda0
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue May 30 01:34:02 2023 +0300

    spi: fsl-dspi: avoid SCK glitches with continuous transfers
    
    [ Upstream commit c5c31fb71f16ba75bad4ade208abbae225305b65 ]
    
    The DSPI controller has configurable timing for
    
    (a) tCSC: the interval between the assertion of the chip select and the
        first clock edge
    
    (b) tASC: the interval between the last clock edge and the deassertion
        of the chip select
    
    What is a bit surprising, but is documented in the figure "Example of
    continuous transfer (CPHA=1, CONT=1)" in the datasheet, is that when the
    chip select stays asserted between multiple TX FIFO writes, the tCSC and
    tASC times still apply. With CONT=1, chip select remains asserted, but
    SCK takes a break and goes to the idle state for tASC + tCSC ns.
    
    In other words, the default values (of 0 and 0 ns) result in SCK
    glitches where the SCK transition to the idle state, as well as the SCK
    transition from the idle state, will have no delay in between, and it
    may appear that a SCK cycle has simply gone missing. The resulting
    timing violation might cause data corruption in many peripherals, as
    their chip select is asserted.
    
    The driver has device tree bindings for tCSC ("fsl,spi-cs-sck-delay")
    and tASC ("fsl,spi-sck-cs-delay"), but these are only specified to apply
    when the chip select toggles in the first place, and this timing
    characteristic depends on each peripheral. Many peripherals do not have
    explicit timing requirements, so many device trees do not have these
    properties present at all.
    
    Nonetheless, the lack of SCK glitches is a common sense requirement, and
    since the SCK stays in the idle state during transfers for tCSC+tASC ns,
    and that in itself should look like half a cycle, then let's ensure that
    tCSC and tASC are at least a quarter of a SCK period, such that their
    sum is at least half of one.
    
    Fixes: 95bf15f38641 ("spi: fsl-dspi: Add ~50ns delay between cs and sck")
    Reported-by: Lisa Chen (ÈôàÊïèÊç∑) <minjie.chen@geekplus.com>
    Debugged-by: Lisa Chen (ÈôàÊïèÊç∑) <minjie.chen@geekplus.com>
    Tested-by: Lisa Chen (ÈôàÊïèÊç∑) <minjie.chen@geekplus.com>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20230529223402.1199503-1-vladimir.oltean@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4857924806609cabe283d4d3f5c4c3b2ca7db24a
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue Jun 6 17:38:59 2023 +0800

    spi: cadence-quadspi: Add missing check for dma_set_mask
    
    [ Upstream commit 947c70a213769f60e9d5aca2bc88b50a1cfaf5a6 ]
    
    Add check for dma_set_mask() and return the error if it fails.
    
    Fixes: 1a6f854f7daa ("spi: cadence-quadspi: Add Xilinx Versal external DMA support")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Link: https://lore.kernel.org/r/20230606093859.27818-1-jiasheng@iscas.ac.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2906e0d75b50c987379cd10e0092f167b8145f2e
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Wed May 17 16:15:10 2023 -0500

    RDMA/rxe: Fix ref count error in check_rkey()
    
    [ Upstream commit b00683422fd79dd07c9b75efdce1660e5e19150e ]
    
    There is a reference count error in error path code and a potential race
    in check_rkey() in rxe_resp.c. When looking up the rkey for a memory
    window the reference to the mw from rxe_lookup_mw() is dropped before a
    reference is taken on the mr referenced by the mw. If the mr is destroyed
    immediately after the call to rxe_put(mw) the mr pointer is unprotected
    and may end up pointing at freed memory. The rxe_get(mr) call should take
    place before the rxe_put(mw) call.
    
    All errors in check_rkey() call rxe_put(mw) if mw is not NULL but it was
    already called after the above. The mw pointer should be set to NULL after
    the rxe_put(mw) call to prevent this from happening.
    
    Fixes: cdd0b85675ae ("RDMA/rxe: Implement memory access through MWs")
    Link: https://lore.kernel.org/r/20230517211509.1819998-1-rpearsonhpe@gmail.com
    Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7617a59f00568b931f7fa50756219300cf77e93e
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Wed May 17 12:22:42 2023 -0500

    RDMA/rxe: Fix packet length checks
    
    [ Upstream commit 9a3763e87379c97a78b7c6c6f40720b1e877174f ]
    
    In rxe_net.c a received packet, from udp or loopback, is passed to
    rxe_rcv() in rxe_recv.c as a udp packet. I.e. skb->data is pointing at the
    udp header. But rxe_rcv() makes length checks to verify the packet is long
    enough to hold the roce headers as if it were a roce
    packet. I.e. skb->data pointing at the bth header. A runt packet would
    appear to have 8 more bytes than it actually does which may lead to
    incorrect behavior.
    
    This patch calls skb_pull() to adjust the skb to point at the bth header
    before calling rxe_rcv() which fixes this error.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20230517172242.1806340-1-rpearsonhpe@gmail.com
    Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00b276bc7b621bae995a20a9844ce3b27d71d177
Author: Li Zhijian <lizhijian@fujitsu.com>
Date:   Tue Apr 25 01:02:43 2023 +0000

    RDMA/rtrs: Fix rxe_dealloc_pd warning
    
    [ Upstream commit 9c29c8c7df0688f358d2df5ddd16c97c2f7292b4 ]
    
    In current design:
    1. PD and clt_path->s.dev are shared among connections.
    2. every con[n]'s cleanup phase will call destroy_con_cq_qp()
    3. clt_path->s.dev will be always decreased in destroy_con_cq_qp(), and
       when clt_path->s.dev become zero, it will destroy PD.
    4. when con[1] failed to create, con[1] will not take clt_path->s.dev,
       but it try to decreased clt_path->s.dev
    
    So, in case create_cm(con[0]) succeeds but create_cm(con[1]) fails,
    destroy_con_cq_qp(con[1]) will be called first which will destroy the PD
    while this PD is still taken by con[0].
    
    Here, we refactor the error path of create_cm() and init_conns(), so that
    we do the cleanup in the order they are created.
    
    The warning occurs when destroying RXE PD whose reference count is not
    zero.
    
     rnbd_client L597: Mapping device /dev/nvme0n1 on session client, (access_mode: rw, nr_poll_queues: 0)
     ------------[ cut here ]------------
     WARNING: CPU: 0 PID: 26407 at drivers/infiniband/sw/rxe/rxe_pool.c:256 __rxe_cleanup+0x13a/0x170 [rdma_rxe]
     Modules linked in: rpcrdma rdma_ucm ib_iser rnbd_client libiscsi rtrs_client scsi_transport_iscsi rtrs_core rdma_cm iw_cm ib_cm crc32_generic rdma_rxe udp_tunnel ib_uverbs ib_core kmem device_dax nd_pmem dax_pmem nd_vme crc32c_intel fuse nvme_core nfit libnvdimm dm_multipath scsi_dh_rdac scsi_dh_emc scsi_dh_alua dm_mirror dm_region_hash dm_log dm_mod
     CPU: 0 PID: 26407 Comm: rnbd-client.sh Kdump: loaded Not tainted 6.2.0-rc6-roce-flush+ #53
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
     RIP: 0010:__rxe_cleanup+0x13a/0x170 [rdma_rxe]
     Code: 45 84 e4 0f 84 5a ff ff ff 48 89 ef e8 5f 18 71 f9 84 c0 75 90 be c8 00 00 00 48 89 ef e8 be 89 1f fa 85 c0 0f 85 7b ff ff ff <0f> 0b 41 bc ea ff ff ff e9 71 ff ff ff e8 84 7f 1f fa e9 d0 fe ff
     RSP: 0018:ffffb09880b6f5f0 EFLAGS: 00010246
     RAX: 0000000000000000 RBX: ffff99401f15d6a8 RCX: 0000000000000000
     RDX: 0000000000000001 RSI: ffffffffbac8234b RDI: 00000000ffffffff
     RBP: ffff99401f15d6d0 R08: 0000000000000001 R09: 0000000000000001
     R10: 0000000000002d82 R11: 0000000000000000 R12: 0000000000000001
     R13: ffff994101eff208 R14: ffffb09880b6f6a0 R15: 00000000fffffe00
     FS:  00007fe113904740(0000) GS:ffff99413bc00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007ff6cde656c8 CR3: 000000001f108004 CR4: 00000000001706f0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      rxe_dealloc_pd+0x16/0x20 [rdma_rxe]
      ib_dealloc_pd_user+0x4b/0x80 [ib_core]
      rtrs_ib_dev_put+0x79/0xd0 [rtrs_core]
      destroy_con_cq_qp+0x8a/0xa0 [rtrs_client]
      init_path+0x1e7/0x9a0 [rtrs_client]
      ? __pfx_autoremove_wake_function+0x10/0x10
      ? lock_is_held_type+0xd7/0x130
      ? rcu_read_lock_sched_held+0x43/0x80
      ? pcpu_alloc+0x3dd/0x7d0
      ? rtrs_clt_init_stats+0x18/0x40 [rtrs_client]
      rtrs_clt_open+0x24f/0x5a0 [rtrs_client]
      ? __pfx_rnbd_clt_link_ev+0x10/0x10 [rnbd_client]
      rnbd_clt_map_device+0x6a5/0xe10 [rnbd_client]
    
    Fixes: 6a98d71daea1 ("RDMA/rtrs: client: main functionality")
    Link: https://lore.kernel.org/r/1682384563-2-4-git-send-email-lizhijian@fujitsu.com
    Signed-off-by: Li Zhijian <lizhijian@fujitsu.com>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Tested-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77226c9785f84c20a58f47852851e210c434eab8
Author: Li Zhijian <lizhijian@fujitsu.com>
Date:   Tue Apr 25 01:02:42 2023 +0000

    RDMA/rtrs: Fix the last iu->buf leak in err path
    
    [ Upstream commit 3bf3a7c6985c625f64e73baefdaa36f1c2045a29 ]
    
    The last iu->buf will leak if ib_dma_mapping_error() fails.
    
    Fixes: c0894b3ea69d ("RDMA/rtrs: core: lib functions shared between client and server modules")
    Link: https://lore.kernel.org/r/1682384563-2-3-git-send-email-lizhijian@fujitsu.com
    Signed-off-by: Li Zhijian <lizhijian@fujitsu.com>
    Acked-by: Guoqing Jiang <guoqing.jiang@linux.dev>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03285557deb642e2ce41087aa1caa6a94c414954
Author: Elson Roy Serrao <quic_eserrao@quicinc.com>
Date:   Thu Jun 1 14:27:30 2023 -0700

    usb: dwc3: gadget: Reset num TRBs before giving back the request
    
    commit 00f8205ffcf112dcef14f8151d78075d38d22c08 upstream.
    
    Consider a scenario where cable disconnect happens when there is an active
    usb reqest queued to the UDC. As part of the disconnect we would issue an
    end transfer with no interrupt-on-completion before giving back this
    request. Since we are giving back the request without skipping TRBs the
    num_trbs field of dwc3_request still holds the stale value previously used.
    Function drivers re-use same request for a given bind-unbind session and
    hence their dwc3_request context gets preserved across cable
    disconnect/connect. When such a request gets re-queued after cable connect,
    we would increase the num_trbs field on top of the previous stale value
    thus incorrectly representing the number of TRBs used. Fix this by
    resetting num_trbs field before giving back the request.
    
    Fixes: 09fe1f8d7e2f ("usb: dwc3: gadget: track number of TRBs per request")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Elson Roy Serrao <quic_eserrao@quicinc.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Message-ID: <1685654850-8468-1-git-send-email-quic_eserrao@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bee7f13c039ccda1b29141271f415a4441720f3
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jun 7 12:05:40 2023 +0200

    USB: dwc3: fix use-after-free on core driver unbind
    
    commit e3dbb657571509044be15184a13134fa7c1fdca1 upstream.
    
    Some dwc3 glue drivers are currently accessing the driver data of the
    child core device directly, which is clearly a bad idea as the child may
    not have probed yet or may have been unbound from its driver.
    
    As a workaround until the glue drivers have been fixed, clear the driver
    data pointer before allowing the glue parent device to runtime suspend
    to prevent its driver from accessing data that has been freed during
    unbind.
    
    Fixes: 6dd2565989b4 ("usb: dwc3: add imx8mp dwc3 glue layer driver")
    Fixes: 6895ea55c385 ("usb: dwc3: qcom: Configure wakeup interrupts during suspend")
    Cc: stable@vger.kernel.org      # 5.12
    Cc: Li Jun <jun.li@nxp.com>
    Cc: Sandeep Maheswaram <quic_c_sanm@quicinc.com>
    Cc: Krishna Kurapati <quic_kriskura@quicinc.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Message-ID: <20230607100540.31045-3-johan+linaro@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 307fe59490bde1f027a8f6d0bb9570d2a5faad61
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jun 7 12:05:39 2023 +0200

    USB: dwc3: qcom: fix NULL-deref on suspend
    
    commit d2d69354226de0b333d4405981f3d9c41ba8430a upstream.
    
    The Qualcomm dwc3 glue driver is currently accessing the driver data of
    the child core device during suspend and on wakeup interrupts. This is
    clearly a bad idea as the child may not have probed yet or could have
    been unbound from its driver.
    
    The first such layering violation was part of the initial version of the
    driver, but this was later made worse when the hack that accesses the
    driver data of the grand child xhci device to configure the wakeup
    interrupts was added.
    
    Fixing this properly is not that easily done, so add a sanity check to
    make sure that the child driver data is non-NULL before dereferencing it
    for now.
    
    Note that this relies on subtleties like the fact that driver core is
    making sure that the parent is not suspended while the child is probing.
    
    Reported-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/all/20230325165217.31069-4-manivannan.sadhasivam@linaro.org/
    Fixes: d9152161b4bf ("usb: dwc3: Add Qualcomm DWC3 glue layer driver")
    Fixes: 6895ea55c385 ("usb: dwc3: qcom: Configure wakeup interrupts during suspend")
    Cc: stable@vger.kernel.org      # 3.18: a872ab303d5d: "usb: dwc3: qcom: fix use-after-free on runtime-PM wakeup"
    Cc: Sandeep Maheswaram <quic_c_sanm@quicinc.com>
    Cc: Krishna Kurapati <quic_kriskura@quicinc.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Message-ID: <20230607100540.31045-2-johan+linaro@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8195536ce2624e2947d9f56b1a61e7a27874bd3
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Fri Jun 9 01:02:27 2023 +0000

    usb: gadget: udc: core: Prevent soft_connect_store() race
    
    commit 286d9975a838d0a54da049765fa1d1fb96b89682 upstream.
    
    usb_udc_connect_control(), soft_connect_store() and
    usb_gadget_deactivate() can potentially race against each other to invoke
    usb_gadget_connect()/usb_gadget_disconnect(). To prevent this, guard
    udc->started, gadget->allow_connect, gadget->deactivate and
    gadget->connect with connect_lock so that ->pullup() is only invoked when
    the gadget is bound, started and not deactivated. The routines
    usb_gadget_connect_locked(), usb_gadget_disconnect_locked(),
    usb_udc_connect_control_locked(), usb_gadget_udc_start_locked(),
    usb_gadget_udc_stop_locked() are called with this lock held.
    
    An earlier version of this commit was reverted due to the crash reported in
    https://lore.kernel.org/all/ZF4BvgsOyoKxdPFF@francesco-nb.int.toradex.com/.
    commit 16737e78d190 ("usb: gadget: udc: core: Offload usb_udc_vbus_handler processing")
    addresses the crash reported.
    
    Cc: stable@vger.kernel.org
    Fixes: 628ef0d273a6 ("usb: udc: add usb_udc_vbus_handler")
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Reviewed-by: Alan Stern <stern@rowland.harvard.edu>
    Message-ID: <20230609010227.978661-2-badhri@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c048d42c305cba61c2040702778023a7b973b22
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Fri Jun 9 01:02:26 2023 +0000

    usb: gadget: udc: core: Offload usb_udc_vbus_handler processing
    
    commit 50966da807c81c5eb3bdfd392990fe0bba94d1ee upstream.
    
    usb_udc_vbus_handler() can be invoked from interrupt context by irq
    handlers of the gadget drivers, however, usb_udc_connect_control() has
    to run in non-atomic context due to the following:
    a. Some of the gadget driver implementations expect the ->pullup
       callback to be invoked in non-atomic context.
    b. usb_gadget_disconnect() acquires udc_lock which is a mutex.
    
    Hence offload invocation of usb_udc_connect_control()
    to workqueue.
    
    UDC should not be pulled up unless gadget driver is bound. The new flag
    "allow_connect" is now set by gadget_bind_driver() and cleared by
    gadget_unbind_driver(). This prevents work item to pull up the gadget
    even if queued when the gadget driver is already unbound.
    
    Cc: stable@vger.kernel.org
    Fixes: 1016fc0c096c ("USB: gadget: Fix obscure lockdep violation for udc_mutex")
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Reviewed-by: Alan Stern <stern@rowland.harvard.edu>
    Message-ID: <20230609010227.978661-1-badhri@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a1882841f646ebf01509958deb5e7778c16480b
Author: Pavan Holla <pholla@chromium.org>
Date:   Wed Jun 7 19:33:26 2023 +0000

    usb: typec: Fix fast_role_swap_current show function
    
    commit 92c9c3baad6b1fd584fbabeaa4756f9b77926cb5 upstream.
    
    The current implementation mistakenly performs a & operation on
    the output of sysfs_emit. This patch performs the & operation before
    calling sysfs_emit.
    
    Fixes: 662a60102c12 ("usb: typec: Separate USB Power Delivery from USB Type-C")
    Cc: stable <stable@kernel.org>
    Reported-by: Benson Leung <bleung@chromium.org>
    Signed-off-by: Pavan Holla <pholla@chromium.org>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Benson Leung <bleung@chromium.org>
    Message-ID: <20230607193328.3359487-1-pholla@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bf8ea2e9e39a2a9bd74e98310ef1b96017d6757
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Tue Jun 6 14:58:02 2023 +0300

    usb: typec: ucsi: Fix command cancellation
    
    commit c4a8bfabefed706bb9150867db528ceefd5cb5fe upstream.
    
    The Cancel command was passed to the write callback as the
    offset instead of as the actual command which caused NULL
    pointer dereference.
    
    Reported-by: Stephan Bolten <stephan.bolten@gmx.net>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217517
    Fixes: 094902bc6a3c ("usb: typec: ucsi: Always cancel the command if PPM reports BUSY condition")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Message-ID: <20230606115802.79339-1-heikki.krogerus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b352f7b6a6469d1d2bb8eeb36ddad3c729ad45b5
Author: Bernhard Seibold <mail@bernhard-seibold.de>
Date:   Fri Jun 2 15:30:29 2023 +0200

    serial: lantiq: add missing interrupt ack
    
    commit 306320034e8fbe7ee1cc4f5269c55658b4612048 upstream.
    
    Currently, the error interrupt is never acknowledged, so once active it
    will stay active indefinitely, causing the handler to be called in an
    infinite loop.
    
    Fixes: 2f0fc4159a6a ("SERIAL: Lantiq: Add driver for MIPS Lantiq SOCs.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Bernhard Seibold <mail@bernhard-seibold.de>
    Reviewed-by: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
    Message-ID: <20230602133029.546-1-mail@bernhard-seibold.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04b3145db2255ac762651c655172dd6928624bd0
Author: Jerry Meng <jerry-meng@foxmail.com>
Date:   Wed May 31 11:51:16 2023 +0800

    USB: serial: option: add Quectel EM061KGL series
    
    commit f1832e2b5e498e258b090af3b065b85cf8cc5161 upstream.
    
    Add support for Quectel EM061KGL series which are based on Qualcomm
    SDX12 chip:
    
    EM061KGL_LTA(0x2c7c / 0x0123): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    EM061KGL_LMS(0x2c7c / 0x0124): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    EM061KGL_LWW(0x2c7c / 0x6008): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    EM061KGL_LCN(0x2c7c / 0x6009): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    
    Above products use the exact same interface layout and
    option driver is for interfaces DIAG, NMEA and AT.
    
    T:  Bus=03 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  5 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=6008 Rev= 5.04
    S:  Manufacturer=Quectel
    S:  Product=Quectel EM061K-GL
    S:  SerialNumber=f6fa08b6
    C:* #Ifs= 8 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=82(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=70 Driver=(none)
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 7 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=80 Driver=(none)
    E:  Ad=8f(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Jerry Meng <jerry-meng@foxmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03b5964a2825f809e8b0ee50e92b6303a3f5df0e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu May 11 12:58:33 2023 +0200

    clk: pxa: fix NULL pointer dereference in pxa3xx_clk_update_accr
    
    commit 23200a4c8ac284f8b4263d7cecaefecaa3ad6732 upstream.
    
    sparse points out an embarrasing bug in an older patch of mine,
    which uses the register offset instead of an __iomem pointer:
    
    drivers/clk/pxa/clk-pxa3xx.c:167:9: sparse: sparse: Using plain integer as NULL pointer
    
    Unlike sparse, gcc and clang ignore this bug and fail to warn
    because a literal '0' is considered a valid representation of
    a NULL pointer.
    
    Fixes: 3c816d950a49 ("ARM: pxa: move clk register definitions to driver")
    Cc: stable@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/oe-kbuild-all/202305111301.RAHohdob-lkp@intel.com/
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20230511105845.299859-1-arnd@kernel.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5532962c9ed259daf6824041aa923452cfca6bdd
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue May 30 08:48:29 2023 +0300

    thunderbolt: Mask ring interrupt on Intel hardware as well
    
    commit 9f9666e65359d5047089aef97ac87c50f624ecb0 upstream.
    
    When resuming from system sleep states the driver issues following
    warning on Intel hardware:
    
      thunderbolt 0000:07:00.0: interrupt for TX ring 0 is already enabled
    
    The reason for this is that the commit in question did not mask the ring
    interrupt on Intel hardware leaving the interrupt active. Fix this by
    masking it also in Intel hardware.
    
    Reported-by: beld zhang <beldzhang@gmail.com>
    Tested-by: beld zhang <beldzhang@gmail.com>
    Closes: https://lore.kernel.org/linux-usb/ZHKW5NeabmfhgLbY@debian.me/
    Fixes: c4af8e3fecd0 ("thunderbolt: Clear registers properly when auto clear isn't in use")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d799f73d5d44952fb570077832887046936d4859
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Mar 29 13:23:04 2023 +0300

    thunderbolt: dma_test: Use correct value for absent rings when creating paths
    
    commit 70c2e03e9aaf17496c63f6e42333c012f5ae5307 upstream.
    
    Both tb_xdomain_enable_paths() and tb_xdomain_disable_paths() expect -1,
    not 0, if the corresponding ring is not needed. For this reason change
    the driver to use correct value for the rings that are not needed.
    
    Fixes: 180b0689425c ("thunderbolt: Allow multiple DMA tunnels over a single XDomain connection")
    Cc: stable@vger.kernel.org
    Reported-by: Pengfei Xu <pengfei.xu@intel.com>
    Tested-by: Pengfei Xu <pengfei.xu@intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 081b5f1ebc731d74a9b9fe8a0c8d163f7f1aff52
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed May 24 13:47:04 2023 +0300

    thunderbolt: Do not touch CL state configuration during discovery
    
    commit 3fe95742af29b8b4eccab2ba94bc521805c6e10c upstream.
    
    If the boot firmware has already established tunnels, especially ones
    that have special requirements from the link such as DisplayPort, we
    should not blindly enable CL states (nor change the TMU configuration).
    Otherwise the existing tunnels may not work as expected.
    
    For this reason, skip the CL state enabling when we go over the existing
    topology. This will also keep the TMU settings untouched because we do
    not change the TMU configuration when CL states are not enabled.
    
    Reported-by: Koba Ko <koba.ko@canonical.com>
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/7831
    Cc: stable@vger.kernel.org # v6.0+
    Acked-By: Yehezkel Bernat <YehezkelShB@gmail.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eb0eff7da975426b1072528cb5e6bbddd29195c
Author: Edson Juliano Drosdeck <edson.drosdeck@gmail.com>
Date:   Fri Jun 9 17:10:58 2023 -0300

    ALSA: hda/realtek: Add a quirk for Compaq N14JP6
    
    commit a2a871483161014f1bcc4e9a04354b01aa77cedb upstream.
    
    Add a quirk for Compaq N14JP6 to fixup ALC897 headset MIC no sound.
    
    Signed-off-by: Edson Juliano Drosdeck <edson.drosdeck@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230609201058.523499-1-edson.drosdeck@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21863dc45aed8d68a2573cce032ecbc8fe7c5bf5
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Jun 6 11:14:04 2023 -0400

    drm/amdgpu: add missing radeon secondary PCI ID
    
    commit e61f67749b351c19455ce3085af2ae9af80023bc upstream.
    
    0x5b70 is a missing RV370 secondary id.  Add it so
    we don't try and probe it with amdgpu.
    
    Cc: michel@daenzer.net
    Reviewed-by: Michel D√§nzer <mdaenzer@redhat.com>
    Tested-by: Michel D√§nzer <mdaenzer@redhat.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f5b5ce9397d91b0a8bc8d15dc8fd72bc0aacaa4
Author: Kenneth Feng <kenneth.feng@amd.com>
Date:   Thu Jun 8 22:07:11 2023 +0800

    drm/amd/pm: workaround for compute workload type on some skus
    
    commit 7ca302d488f80cf4529620acc1c545f9022d8bb8 upstream.
    
    On smu 13.0.0, the compute workload type cannot be set on all the skus
    due to some other problems. This workaround is to make sure compute workload type
    can also run on some specific skus.
    
    v2: keep the variable consistent
    
    Signed-off-by: Kenneth Feng <kenneth.feng@amd.com>
    Acked-by: Lijo Lazar <lijo.lazar@amd.com>
    Reviewed-by: Feifei Xu <Feifei.Xu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.1.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b69a10df900386871703a4cc3be974485f52ff7c
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Jun 7 01:45:20 2023 -0500

    drm/amd: Tighten permissions on VBIOS flashing attributes
    
    commit 7ab1a4913d0051cf5196ef7987b5fa42c25e13b6 upstream.
    
    Non-root users shouldn't be able to try to trigger a VBIOS flash
    or query the flashing status.  This should be reserved for users with the
    appropriate permissions.
    
    Cc: stable@vger.kernel.org
    Fixes: 8424f2ccb3c0 ("drm/amdgpu/psp: Add vbflash sysfs interface support")
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2706d862b6577b8218bdef1c238e175624b906d
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Jun 7 01:41:22 2023 -0500

    drm/amd: Make sure image is written to trigger VBIOS image update flow
    
    commit 3eb1a3a04056ba3df3205e169b8acc9da0c65a94 upstream.
    
    The VBIOS image update flow requires userspace to:
    1) Write the image to `psp_vbflash`
    2) Read `psp_vbflash`
    3) Poll `psp_vbflash_status` to check for completion
    
    If userspace reads `psp_vbflash` before writing an image, it's
    possible that it causes problems that can put the dGPU into an invalid
    state.
    
    Explicitly check that an image has been written before letting a read
    succeed.
    
    Cc: stable@vger.kernel.org
    Fixes: 8424f2ccb3c0 ("drm/amdgpu/psp: Add vbflash sysfs interface support")
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee8c6580c3106b0061c7cdff1804e5a1f1e1d7fe
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Thu May 25 08:37:40 2023 -0400

    drm/amd/display: edp do not add non-edid timings
    
    commit e749dd10e5f292061ad63d2b030194bf7d7d452c upstream.
    
    [Why] most edp support only timings from edid. applying
    non-edid timings, especially those timings out of edp
    bandwidth, may damage edp.
    
    [How] do not add non-edid timings for edp.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Roman Li <roman.li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cb6026df193dfbbdd89c06e1259326a85da148b
Author: Wes Huang <wes.huang@moxa.com>
Date:   Thu Jun 8 11:01:42 2023 +0800

    net: usb: qmi_wwan: add support for Compal RXM-G1
    
    commit 863199199713908afaa47ba09332b87621c12496 upstream.
    
    Add support for Compal RXM-G1 which is based on Qualcomm SDX55 chip.
    This patch adds support for two compositions:
    
    0x9091: DIAG + MODEM + QMI_RMNET + ADB
    0x90db: DIAG + DUN + RMNET + DPL + QDSS(Trace) + ADB
    
    T:  Bus=03 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=05c6 ProdID=9091 Rev= 4.14
    S:  Manufacturer=QCOM
    S:  Product=SDXPRAIRIE-MTP _SN:719AB680
    S:  SerialNumber=719ab680
    C:* #Ifs= 4 Cfg#= 1 Atr=80 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E:  Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=84(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=85(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    T:  Bus=03 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=05c6 ProdID=90db Rev= 4.14
    S:  Manufacturer=QCOM
    S:  Product=SDXPRAIRIE-MTP _SN:719AB680
    S:  SerialNumber=719ab680
    C:* #Ifs= 6 Cfg#= 1 Atr=80 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E:  Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=84(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=8f(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=85(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Wes Huang <wes.huang@moxa.com>
    Acked-by: Bj√∏rn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20230608030141.3546-1-wes.huang@moxa.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d1fdfb3d185a9726478ba174235eff7c16f1101
Author: Sonny Jiang <sonjiang@amd.com>
Date:   Tue Jun 6 17:18:52 2023 -0400

    drm/amdgpu: vcn_4_0 set instance 0 init sched score to 1
    
    commit 9db5ec1ceb5303398ec4f899d691073d531257c3 upstream.
    
    Only vcn0 can process AV1 codecx. In order to use both vcn0 and
    vcn1 in h264/265 transcode to AV1 cases, set vcn0 sched score to 1
    at initialization time.
    
    Signed-off-by: Sonny Jiang <sonjiang@amd.com>
    Reviewed-by: Leo Liu <leo.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.1.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6d74371ce15e176020ea2441d70c51c7457b680
Author: Edward Srouji <edwards@nvidia.com>
Date:   Mon Jun 5 13:33:24 2023 +0300

    RDMA/uverbs: Restrict usage of privileged QKEYs
    
    commit 0cadb4db79e1d9eea66711c4031e435c2191907e upstream.
    
    According to the IB specification rel-1.6, section 3.5.3:
    "QKEYs with the most significant bit set are considered controlled
    QKEYs, and a HCA does not allow a consumer to arbitrarily specify a
    controlled QKEY."
    
    Thus, block non-privileged users from setting such a QKEY.
    
    Cc: stable@vger.kernel.org
    Fixes: bc38a6abdd5a ("[PATCH] IB uverbs: core implementation")
    Signed-off-by: Edward Srouji <edwards@nvidia.com>
    Link: https://lore.kernel.org/r/c00c809ddafaaf87d6f6cb827978670989a511b3.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a144bad3e75e17d38b3b7609400606dba9d12c8
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Jun 15 12:22:11 2023 +1000

    nouveau: fix client work fence deletion race
    
    commit c8a5d5ea3ba6a18958f8d76430e4cd68eea33943 upstream.
    
    This seems to have existed for ever but is now more apparant after
    commit 9bff18d13473 ("drm/ttm: use per BO cleanup workers")
    
    My analysis: two threads are running, one in the irq signalling the
    fence, in dma_fence_signal_timestamp_locked, it has done the
    DMA_FENCE_FLAG_SIGNALLED_BIT setting, but hasn't yet reached the
    callbacks.
    
    The second thread in nouveau_cli_work_ready, where it sees the fence is
    signalled, so then puts the fence, cleanups the object and frees the
    work item, which contains the callback.
    
    Thread one goes again and tries to call the callback and causes the
    use-after-free.
    
    Proposed fix: lock the fence signalled check in nouveau_cli_work_ready,
    so either the callbacks are done or the memory is freed.
    
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Fixes: 11e451e74050 ("drm/nouveau: remove fence wait code from deferred client work handler")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Link: https://lore.kernel.org/dri-devel/20230615024008.1600281-1-airlied@gmail.com/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33965ac3409153d3f1af8039ad671b6b47dd0b2d
Author: Christian Marangi <ansuelsmth@gmail.com>
Date:   Wed Jun 14 11:17:14 2023 +0200

    net: ethernet: stmicro: stmmac: fix possible memory leak in __stmmac_open
    
    commit 30134b7c47bd28fdb4db4d12aef824e0579cfee4 upstream.
    
    Fix a possible memory leak in __stmmac_open when stmmac_init_phy fails.
    It's also needed to free everything allocated by stmmac_setup_dma_desc
    and not just the dma_conf struct.
    
    Drop free_dma_desc_resources from __stmmac_open and correctly call
    free_dma_desc_resources on each user of __stmmac_open on error.
    
    Reported-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Fixes: ba39b344e924 ("net: ethernet: stmicro: stmmac: generate stmmac dma conf before open")
    Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Link: https://lore.kernel.org/r/20230614091714.15912-1-ansuelsmth@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfaf388d359922d81e7e7f0551ebe9297d8da98e
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Tue Jun 13 20:05:34 2023 -0400

    dm thin: fix issue_discard to pass GFP_NOIO to __blkdev_issue_discard
    
    commit 722d90822321497e2837cfc9000202e256e6b32f upstream.
    
    issue_discard() passes GFP_NOWAIT to __blkdev_issue_discard() despite
    its code assuming bio_alloc() always succeeds.
    
    Commit 3dba53a958a75 ("dm thin: use __blkdev_issue_discard for async
    discard support") clearly shows where things went bad:
    
    Before commit 3dba53a958a75, dm-thin.c's open-coded
    __blkdev_issue_discard_async() properly handled using GFP_NOWAIT.
    Unfortunately __blkdev_issue_discard() doesn't and it was missed
    during review.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 088ad777eeaefb6fda5918f370adda76a65d001a
Author: Li Lingfeng <lilingfeng3@huawei.com>
Date:   Tue Jun 6 20:20:24 2023 +0800

    dm thin metadata: check fail_io before using data_sm
    
    commit cb65b282c9640c27d3129e2e04b711ce1b352838 upstream.
    
    Must check pmd->fail_io before using pmd->data_sm since
    pmd->data_sm may be destroyed by other processes.
    
           P1(kworker)                             P2(message)
    do_worker
     process_prepared
      process_prepared_discard_passdown_pt2
       dm_pool_dec_data_range
                                        pool_message
                                         commit
                                          dm_pool_commit_metadata
                                            ‚Üì
                                           // commit failed
                                          metadata_operation_failed
                                           abort_transaction
                                            dm_pool_abort_metadata
                                             __open_or_format_metadata
                                               ‚Üì
                                              dm_sm_disk_open
                                                ‚Üì
                                               // open failed
                                               // pmd->data_sm is NULL
        dm_sm_dec_blocks
          ‚Üì
         // try to access pmd->data_sm --> UAF
    
    As shown above, if dm_pool_commit_metadata() and
    dm_pool_abort_metadata() fail in pool_message process, kworker may
    trigger UAF.
    
    Fixes: be500ed721a6 ("dm space maps: improve performance with inc/dec on ranges of blocks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Li Lingfeng <lilingfeng3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1886db9a4ee1fe3d716647ad10fb9fb647df7673
Author: Lukasz Tyl <ltyl@hem-e.com>
Date:   Wed Jun 14 14:25:24 2023 +0200

    ALSA: usb-audio: Add quirk flag for HEM devices to enable native DSD playback
    
    commit 122e2cb7e1a30438cc0e8bf70d4279db245d7d5b upstream.
    
    This commit adds new DEVICE_FLG with QUIRK_FLAG_DSD_RAW and Vendor Id for
    HEM devices which supports native DSD. Prior to this change Linux kernel
    was not enabling native DSD playback for HEM devices, and as a result,
    DSD audio was being converted to PCM "on the fly". HEM devices,
    when connected to the system, would only play audio in PCM format,
    even if the source material was in DSD format. With the addition of new
    VENDOR_FLG in the quircks.c file, the devices are now correctly
    recognized, and raw DSD data is transmitted to the device,
    allowing for native DSD playback.
    
    Signed-off-by: Lukasz Tyl <ltyl@hem-e.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230614122524.30271-1-ltyl@hem-e.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 029e0f1f752165b620fc5d28589523e6b0d6d36d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jun 12 15:28:18 2023 +0200

    ALSA: usb-audio: Fix broken resume due to UAC3 power state
    
    commit 8ba61c9f6c9bdfbf9d197b0282641d24ae909778 upstream.
    
    As reported in the bugzilla below, the PM resume of a UAC3 device may
    fail due to the incomplete power state change, stuck at D1.  The
    reason is that the driver expects the full D0 power state change only
    at hw_params, while the normal PCM resume procedure doesn't call
    hw_params.
    
    For fixing the bug, we add the same power state update to D0 at the
    prepare callback, which is certainly called by the resume procedure.
    
    Note that, with this change, the power state change in the hw_params
    becomes almost redundant, since snd_usb_hw_params() doesn't touch the
    parameters (at least it tires so).  But dropping it is still a bit
    risky (e.g. we have the media-driver binding), so I leave the D0 power
    state change in snd_usb_hw_params() as is for now.
    
    Fixes: a0a4959eb4e9 ("ALSA: usb-audio: Operate UAC3 Power Domains in PCM callbacks")
    Cc: <stable@vger.kernel.org>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217539
    Link: https://lore.kernel.org/r/20230612132818.29486-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e1c7968a27512168951b7cebd14d814f98747d9
Author: Chris Mason <clm@fb.com>
Date:   Fri Jun 9 10:53:41 2023 -0700

    btrfs: can_nocow_file_extent should pass down args->strict from callers
    
    commit deccae40e4b30f98837e44225194d80c8baf2233 upstream.
    
    Commit 619104ba453ad0 ("btrfs: move common NOCOW checks against a file
    extent into a helper") changed our call to btrfs_cross_ref_exist() to
    always pass false for the 'strict' parameter.  We're passing this down
    through the stack so that we can do a full check for cross references
    during swapfile activation.
    
    With strict always false, this test fails:
    
      btrfs subvol create swappy
      chattr +C swappy
      fallocate -l1G swappy/swapfile
      chmod 600 swappy/swapfile
      mkswap swappy/swapfile
    
      btrfs subvol snap swappy swapsnap
      btrfs subvol del -C swapsnap
    
      btrfs fi sync /
      sync;sync;sync
    
      swapon swappy/swapfile
    
    The fix is to just use args->strict, and everyone except swapfile
    activation is passing false.
    
    Fixes: 619104ba453ad0 ("btrfs: move common NOCOW checks against a file extent into a helper")
    CC: stable@vger.kernel.org # 6.1+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Chris Mason <clm@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e9da0cda14906f91f564f74ef9b8f6be49a2e99
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jun 8 11:10:25 2023 +0200

    btrfs: fix iomap_begin length for nocow writes
    
    commit 7833b865953c8e62abc76a3261c04132b2fb69de upstream.
    
    can_nocow_extent can reduce the len passed in, which needs to be
    propagated to btrfs_dio_iomap_begin so that iomap does not submit
    more data then is mapped.
    
    This problems exists since the btrfs_get_blocks_direct helper was added
    in commit c5794e51784a ("btrfs: Factor out write portion of
    btrfs_get_blocks_direct"), but the ordered_extent splitting added in
    commit b73a6fd1b1ef ("btrfs: split partial dio bios before submit")
    added a WARN_ON that made a syzkaller test fail.
    
    Reported-by: syzbot+ee90502d5c8fd1d0dd93@syzkaller.appspotmail.com
    Fixes: c5794e51784a ("btrfs: Factor out write portion of btrfs_get_blocks_direct")
    CC: stable@vger.kernel.org # 6.1+
    Tested-by: syzbot+ee90502d5c8fd1d0dd93@syzkaller.appspotmail.com
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4389fb6b6a9d31704cc576b7671b6dfe9ac9f966
Author: Qu Wenruo <wqu@suse.com>
Date:   Sun Jun 11 08:09:13 2023 +0800

    btrfs: do not ASSERT() on duplicated global roots
    
    commit 745806fb4554f334e6406fa82b328562aa48f08f upstream.
    
    [BUG]
    Syzbot reports a reproducible ASSERT() when using rescue=usebackuproot
    mount option on a corrupted fs.
    
    The full report can be found here:
    https://syzkaller.appspot.com/bug?extid=c4614eae20a166c25bf0
    
      BTRFS error (device loop0: state C): failed to load root csum
      assertion failed: !tmp, in fs/btrfs/disk-io.c:1103
      ------------[ cut here ]------------
      kernel BUG at fs/btrfs/ctree.h:3664!
      invalid opcode: 0000 [#1] PREEMPT SMP KASAN
      CPU: 1 PID: 3608 Comm: syz-executor356 Not tainted 6.0.0-rc7-syzkaller-00029-g3800a713b607 #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/26/2022
      RIP: 0010:assertfail+0x1a/0x1c fs/btrfs/ctree.h:3663
      RSP: 0018:ffffc90003aaf250 EFLAGS: 00010246
      RAX: 0000000000000032 RBX: 0000000000000000 RCX: f21c13f886638400
      RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000
      RBP: ffff888021c640a0 R08: ffffffff816bd38d R09: ffffed10173667f1
      R10: ffffed10173667f1 R11: 1ffff110173667f0 R12: dffffc0000000000
      R13: ffff8880229c21f7 R14: ffff888021c64060 R15: ffff8880226c0000
      FS:  0000555556a73300(0000) GS:ffff8880b9b00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 000055a2637d7a00 CR3: 00000000709c4000 CR4: 00000000003506e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       <TASK>
       btrfs_global_root_insert+0x1a7/0x1b0 fs/btrfs/disk-io.c:1103
       load_global_roots_objectid+0x482/0x8c0 fs/btrfs/disk-io.c:2467
       load_global_roots fs/btrfs/disk-io.c:2501 [inline]
       btrfs_read_roots fs/btrfs/disk-io.c:2528 [inline]
       init_tree_roots+0xccb/0x203c fs/btrfs/disk-io.c:2939
       open_ctree+0x1e53/0x33df fs/btrfs/disk-io.c:3574
       btrfs_fill_super+0x1c6/0x2d0 fs/btrfs/super.c:1456
       btrfs_mount_root+0x885/0x9a0 fs/btrfs/super.c:1824
       legacy_get_tree+0xea/0x180 fs/fs_context.c:610
       vfs_get_tree+0x88/0x270 fs/super.c:1530
       fc_mount fs/namespace.c:1043 [inline]
       vfs_kern_mount+0xc9/0x160 fs/namespace.c:1073
       btrfs_mount+0x3d3/0xbb0 fs/btrfs/super.c:1884
    
    [CAUSE]
    Since the introduction of global roots, we handle
    csum/extent/free-space-tree roots as global roots, even if no
    extent-tree-v2 feature is enabled.
    
    So for regular csum/extent/fst roots, we load them into
    fs_info::global_root_tree rb tree.
    
    And we should not expect any conflicts in that rb tree, thus we have an
    ASSERT() inside btrfs_global_root_insert().
    
    But rescue=usebackuproot can break the assumption, as we will try to
    load those trees again and again as long as we have bad roots and have
    backup roots slot remaining.
    
    So in that case we can have conflicting roots in the rb tree, and
    triggering the ASSERT() crash.
    
    [FIX]
    We can safely remove that ASSERT(), as the caller will properly put the
    offending root.
    
    To make further debugging easier, also add two explicit error messages:
    
    - Error message for conflicting global roots
    - Error message when using backup roots slot
    
    Reported-by: syzbot+a694851c6ab28cbcfb9c@syzkaller.appspotmail.com
    Fixes: abed4aaae4f7 ("btrfs: track the csum, extent, and free space trees in a rb tree")
    CC: stable@vger.kernel.org # 6.1+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e23b1ec720aa572a94554ce1444cb756d2e0ed8
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Fri May 19 16:47:38 2023 +0200

    powerpc/purgatory: remove PGO flags
    
    commit 20188baceb7a1463dc0bcb0c8678b69c2f447df6 upstream.
    
    If profile-guided optimization is enabled, the purgatory ends up with
    multiple .text sections.  This is not supported by kexec and crashes the
    system.
    
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-3-b05c520b7296@chromium.org
    Fixes: 930457057abe ("kernel/kexec_file.c: split up __kexec_load_puragory")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: <stable@vger.kernel.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Palmer Dabbelt <palmer@rivosinc.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Philipp Rudo <prudo@redhat.com>
    Cc: Ross Zwisler <zwisler@google.com>
    Cc: Simon Horman <horms@kernel.org>
    Cc: Steven Rostedt (Google) <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Rix <trix@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 352f62431ad3ac59ef252594948a861c64386226
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Fri May 19 16:47:39 2023 +0200

    riscv/purgatory: remove PGO flags
    
    commit 88ac3bbcf73853880a9b2a65c67e6854390741cc upstream.
    
    If profile-guided optimization is enabled, the purgatory ends up with
    multiple .text sections.  This is not supported by kexec and crashes the
    system.
    
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-4-b05c520b7296@chromium.org
    Fixes: 930457057abe ("kernel/kexec_file.c: split up __kexec_load_puragory")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Cc: <stable@vger.kernel.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Philipp Rudo <prudo@redhat.com>
    Cc: Ross Zwisler <zwisler@google.com>
    Cc: Simon Horman <horms@kernel.org>
    Cc: Steven Rostedt (Google) <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Rix <trix@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cf6e32e86ea1976689914070a825150a7658adb
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Fri May 19 16:47:37 2023 +0200

    x86/purgatory: remove PGO flags
    
    commit 97b6b9cbba40a21c1d9a344d5c1991f8cfbf136e upstream.
    
    If profile-guided optimization is enabled, the purgatory ends up with
    multiple .text sections.  This is not supported by kexec and crashes the
    system.
    
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-2-b05c520b7296@chromium.org
    Fixes: 930457057abe ("kernel/kexec_file.c: split up __kexec_load_puragory")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Cc: <stable@vger.kernel.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Palmer Dabbelt <palmer@rivosinc.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Philipp Rudo <prudo@redhat.com>
    Cc: Ross Zwisler <zwisler@google.com>
    Cc: Simon Horman <horms@kernel.org>
    Cc: Steven Rostedt (Google) <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Rix <trix@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 013027918a4efa807409fcb356009c117e4d181a
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Fri May 19 16:47:36 2023 +0200

    kexec: support purgatories with .text.hot sections
    
    commit 8652d44f466ad5772e7d1756e9457046189b0dfc upstream.
    
    Patch series "kexec: Fix kexec_file_load for llvm16 with PGO", v7.
    
    When upreving llvm I realised that kexec stopped working on my test
    platform.
    
    The reason seems to be that due to PGO there are multiple .text sections
    on the purgatory, and kexec does not supports that.
    
    
    This patch (of 4):
    
    Clang16 links the purgatory text in two sections when PGO is in use:
    
      [ 1] .text             PROGBITS         0000000000000000  00000040
           00000000000011a1  0000000000000000  AX       0     0     16
      [ 2] .rela.text        RELA             0000000000000000  00003498
           0000000000000648  0000000000000018   I      24     1     8
      ...
      [17] .text.hot.        PROGBITS         0000000000000000  00003220
           000000000000020b  0000000000000000  AX       0     0     1
      [18] .rela.text.hot.   RELA             0000000000000000  00004428
           0000000000000078  0000000000000018   I      24    17     8
    
    And both of them have their range [sh_addr ... sh_addr+sh_size] on the
    area pointed by `e_entry`.
    
    This causes that image->start is calculated twice, once for .text and
    another time for .text.hot. The second calculation leaves image->start
    in a random location.
    
    Because of this, the system crashes immediately after:
    
    kexec_core: Starting new kernel
    
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-0-b05c520b7296@chromium.org
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-1-b05c520b7296@chromium.org
    Fixes: 930457057abe ("kernel/kexec_file.c: split up __kexec_load_puragory")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Reviewed-by: Ross Zwisler <zwisler@google.com>
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Reviewed-by: Philipp Rudo <prudo@redhat.com>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Palmer Dabbelt <palmer@rivosinc.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Simon Horman <horms@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Rix <trix@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9c3163c7ab901fb1f184a821285851534ba46e2
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Jun 12 13:51:36 2023 -0600

    io_uring/net: save msghdr->msg_control for retries
    
    commit cac9e4418f4cbd548ccb065b3adcafe073f7f7d2 upstream.
    
    If the application sets ->msg_control and we have to later retry this
    command, or if it got queued with IOSQE_ASYNC to begin with, then we
    need to retain the original msg_control value. This is due to the net
    stack overwriting this field with an in-kernel pointer, to copy it
    in. Hitting that path for the second time will now fail the copy from
    user, as it's attempting to copy from a non-user address.
    
    Cc: stable@vger.kernel.org # 5.10+
    Link: https://github.com/axboe/liburing/issues/880
    Reported-and-tested-by: Marek Majkowski <marek@cloudflare.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cffaa97ffb672f41cf27e328479c52a2a32ad683
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Thu Jun 15 14:35:52 2023 +0800

    LoongArch: Fix perf event id calculation
    
    commit 962369120d750cbc9c4dc492f32b4304669ff6aa upstream.
    
    LoongArch PMCFG has 10bit event id rather than 8 bit, so fix it.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jun Yi <yijun@loongson.cn>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad64865722b67af392c76bc2f9ddc4555554812c
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Fri May 26 11:13:32 2023 +0900

    nilfs2: reject devices with insufficient block count
    
    commit 92c5d1b860e9581d64baca76779576c0ab0d943d upstream.
    
    The current sanity check for nilfs2 geometry information lacks checks for
    the number of segments stored in superblocks, so even for device images
    that have been destructively truncated or have an unusually high number of
    segments, the mount operation may succeed.
    
    This causes out-of-bounds block I/O on file system block reads or log
    writes to the segments, the latter in particular causing
    "a_ops->writepages" to repeatedly fail, resulting in sync_inodes_sb() to
    hang.
    
    Fix this issue by checking the number of segments stored in the superblock
    and avoiding mounting devices that can cause out-of-bounds accesses.  To
    eliminate the possibility of overflow when calculating the number of
    blocks required for the device from the number of segments, this also adds
    a helper function to calculate the upper bound on the number of segments
    and inserts a check using it.
    
    Link: https://lkml.kernel.org/r/20230526021332.3431-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+7d50f1e54a12ba3aeae2@syzkaller.appspotmail.com
      Link: https://syzkaller.appspot.com/bug?extid=7d50f1e54a12ba3aeae2
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69caea4eed1cfb9f9e4373e47ba839958061c0ac
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Wed May 24 18:43:48 2023 +0900

    nilfs2: fix possible out-of-bounds segment allocation in resize ioctl
    
    commit fee5eaecca86afa544355569b831c1f90f334b85 upstream.
    
    Syzbot reports that in its stress test for resize ioctl, the log writing
    function nilfs_segctor_do_construct hits a WARN_ON in
    nilfs_segctor_truncate_segments().
    
    It turned out that there is a problem with the current implementation of
    the resize ioctl, which changes the writable range on the device (the
    range of allocatable segments) at the end of the resize process.
    
    This order is necessary for file system expansion to avoid corrupting the
    superblock at trailing edge.  However, in the case of a file system
    shrink, if log writes occur after truncating out-of-bounds trailing
    segments and before the resize is complete, segments may be allocated from
    the truncated space.
    
    The userspace resize tool was fine as it limits the range of allocatable
    segments before performing the resize, but it can run into this issue if
    the resize ioctl is called alone.
    
    Fix this issue by changing nilfs_sufile_resize() to update the range of
    allocatable segments immediately after successful truncation of segment
    space in case of file system shrink.
    
    Link: https://lkml.kernel.org/r/20230524094348.3784-1-konishi.ryusuke@gmail.com
    Fixes: 4e33f9eab07e ("nilfs2: implement resize ioctl")
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+33494cd0df2ec2931851@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/0000000000005434c405fbbafdc5@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f47a9665aee4ebdc095cbd4be9fdb44cef9bdbb
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Sat May 13 19:24:28 2023 +0900

    nilfs2: fix incomplete buffer cleanup in nilfs_btnode_abort_change_key()
    
    commit 2f012f2baca140c488e43d27a374029c1e59098d upstream.
    
    A syzbot fault injection test reported that nilfs_btnode_create_block, a
    helper function that allocates a new node block for b-trees, causes a
    kernel BUG for disk images where the file system block size is smaller
    than the page size.
    
    This was due to unexpected flags on the newly allocated buffer head, and
    it turned out to be because the buffer flags were not cleared by
    nilfs_btnode_abort_change_key() after an error occurred during a b-tree
    update operation and the buffer was later reused in that state.
    
    Fix this issue by using nilfs_btnode_delete() to abandon the unused
    preallocated buffer in nilfs_btnode_abort_change_key().
    
    Link: https://lkml.kernel.org/r/20230513102428.10223-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+b0a35a5c1f7e846d3b09@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/000000000000d1d6c205ebc4d512@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d4bc38f716caf534846ae4fceb144043c48973e
Author: Janne Grunau <j@jannau.net>
Date:   Sun Feb 12 13:16:32 2023 +0100

    nios2: dts: Fix tse_mac "max-frame-size" property
    
    commit 85041e12418fd0c08ff972b7729f7971afb361f8 upstream.
    
    The given value of 1518 seems to refer to the layer 2 ethernet frame
    size without 802.1Q tag. Actual use of the "max-frame-size" including in
    the consumer of the "altr,tse-1.0" compatible is the MTU.
    
    Fixes: 95acd4c7b69c ("nios2: Device tree support")
    Fixes: 61c610ec61bb ("nios2: Add Max10 device tree")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Janne Grunau <j@jannau.net>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 447f325497dcd41fd17cf415c1d1f5c79d192f48
Author: Nhat Pham <nphamcs@gmail.com>
Date:   Tue May 30 15:24:40 2023 -0700

    zswap: do not shrink if cgroup may not zswap
    
    commit 0bdf0efa180a9cb1361cbded4e2260a49306ac89 upstream.
    
    Before storing a page, zswap first checks if the number of stored pages
    exceeds the limit specified by memory.zswap.max, for each cgroup in the
    hierarchy.  If this limit is reached or exceeded, then zswap shrinking is
    triggered and short-circuits the store attempt.
    
    However, since the zswap's LRU is not memcg-aware, this can create the
    following pathological behavior: the cgroup whose zswap limit is 0 will
    evict pages from other cgroups continually, without lowering its own zswap
    usage.  This means the shrinking will continue until the need for swap
    ceases or the pool becomes empty.
    
    As a result of this, we observe a disproportionate amount of zswap
    writeback and a perpetually small zswap pool in our experiments, even
    though the pool limit is never hit.
    
    More generally, a cgroup might unnecessarily evict pages from other
    cgroups before we drive the memcg back below its limit.
    
    This patch fixes the issue by rejecting zswap store attempt without
    shrinking the pool when obj_cgroup_may_zswap() returns false.
    
    [akpm@linux-foundation.org: fix return of unintialized value]
    [akpm@linux-foundation.org: s/ENOSPC/ENOMEM/]
    Link: https://lkml.kernel.org/r/20230530222440.2777700-1-nphamcs@gmail.com
    Link: https://lkml.kernel.org/r/20230530232435.3097106-1-nphamcs@gmail.com
    Fixes: f4840ccfca25 ("zswap: memcg accounting")
    Signed-off-by: Nhat Pham <nphamcs@gmail.com>
    Cc: Dan Streetman <ddstreet@ieee.org>
    Cc: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Seth Jennings <sjenning@redhat.com>
    Cc: Vitaly Wool <vitaly.wool@konsulko.com>
    Cc: Yosry Ahmed <yosryahmed@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f17645f85281317564247eb06f2e37cc63a2a96
Author: Lu√≠s Henriques <ocfs2-devel@oss.oracle.com>
Date:   Mon May 29 16:26:45 2023 +0100

    ocfs2: check new file size on fallocate call
    
    commit 26a6ffff7de5dd369cdb12e38ba11db682f1dec0 upstream.
    
    When changing a file size with fallocate() the new size isn't being
    checked.  In particular, the FSIZE ulimit isn't being checked, which makes
    fstest generic/228 fail.  Simply adding a call to inode_newsize_ok() fixes
    this issue.
    
    Link: https://lkml.kernel.org/r/20230529152645.32680-1-lhenriques@suse.de
    Signed-off-by: Lu√≠s Henriques <lhenriques@suse.de>
    Reviewed-by: Mark Fasheh <mark@fasheh.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 534b4bbc8589bd4618b507a47ca242efcbd248b9
Author: Lu√≠s Henriques <ocfs2-devel@oss.oracle.com>
Date:   Mon May 22 11:21:12 2023 +0100

    ocfs2: fix use-after-free when unmounting read-only filesystem
    
    commit 50d927880e0f90d5cb25e897e9d03e5edacc79a8 upstream.
    
    It's trivial to trigger a use-after-free bug in the ocfs2 quotas code using
    fstest generic/452.  After a read-only remount, quotas are suspended and
    ocfs2_mem_dqinfo is freed through ->ocfs2_local_free_info().  When unmounting
    the filesystem, an UAF access to the oinfo will eventually cause a crash.
    
    BUG: KASAN: slab-use-after-free in timer_delete+0x54/0xc0
    Read of size 8 at addr ffff8880389a8208 by task umount/669
    ...
    Call Trace:
     <TASK>
     ...
     timer_delete+0x54/0xc0
     try_to_grab_pending+0x31/0x230
     __cancel_work_timer+0x6c/0x270
     ocfs2_disable_quotas.isra.0+0x3e/0xf0 [ocfs2]
     ocfs2_dismount_volume+0xdd/0x450 [ocfs2]
     generic_shutdown_super+0xaa/0x280
     kill_block_super+0x46/0x70
     deactivate_locked_super+0x4d/0xb0
     cleanup_mnt+0x135/0x1f0
     ...
     </TASK>
    
    Allocated by task 632:
     kasan_save_stack+0x1c/0x40
     kasan_set_track+0x21/0x30
     __kasan_kmalloc+0x8b/0x90
     ocfs2_local_read_info+0xe3/0x9a0 [ocfs2]
     dquot_load_quota_sb+0x34b/0x680
     dquot_load_quota_inode+0xfe/0x1a0
     ocfs2_enable_quotas+0x190/0x2f0 [ocfs2]
     ocfs2_fill_super+0x14ef/0x2120 [ocfs2]
     mount_bdev+0x1be/0x200
     legacy_get_tree+0x6c/0xb0
     vfs_get_tree+0x3e/0x110
     path_mount+0xa90/0xe10
     __x64_sys_mount+0x16f/0x1a0
     do_syscall_64+0x43/0x90
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Freed by task 650:
     kasan_save_stack+0x1c/0x40
     kasan_set_track+0x21/0x30
     kasan_save_free_info+0x2a/0x50
     __kasan_slab_free+0xf9/0x150
     __kmem_cache_free+0x89/0x180
     ocfs2_local_free_info+0x2ba/0x3f0 [ocfs2]
     dquot_disable+0x35f/0xa70
     ocfs2_susp_quotas.isra.0+0x159/0x1a0 [ocfs2]
     ocfs2_remount+0x150/0x580 [ocfs2]
     reconfigure_super+0x1a5/0x3a0
     path_mount+0xc8a/0xe10
     __x64_sys_mount+0x16f/0x1a0
     do_syscall_64+0x43/0x90
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Link: https://lkml.kernel.org/r/20230522102112.9031-1-lhenriques@suse.de
    Signed-off-by: Lu√≠s Henriques <lhenriques@suse.de>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Tested-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a340c63c0c34d867ced7045d473535687a17491
Author: Benjamin Segall <bsegall@google.com>
Date:   Tue May 30 11:32:28 2023 -0700

    epoll: ep_autoremove_wake_function should use list_del_init_careful
    
    commit 2192bba03d80f829233bfa34506b428f71e531e7 upstream.
    
    autoremove_wake_function uses list_del_init_careful, so should epoll's
    more aggressive variant.  It only doesn't because it was copied from an
    older wait.c rather than the most recent.
    
    [bsegall@google.com: add comment]
      Link: https://lkml.kernel.org/r/xm26bki0ulsr.fsf_-_@google.com
    Link: https://lkml.kernel.org/r/xm26pm6hvfer.fsf@google.com
    Fixes: a16ceb139610 ("epoll: autoremove wakers even more aggressively")
    Signed-off-by: Ben Segall <bsegall@google.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <brauner@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d304091e091ede9de77a141c2d04a0ff7dfb54f
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Jun 9 13:48:44 2023 +0300

    wifi: cfg80211: fix double lock bug in reg_wdev_chan_valid()
    
    commit 996c3117dae4c02b38a3cb68e5c2aec9d907ec15 upstream.
    
    The locking was changed recently so now the caller holds the wiphy_lock()
    lock.  Taking the lock inside the reg_wdev_chan_valid() function will
    lead to a deadlock.
    
    Fixes: f7e60032c661 ("wifi: cfg80211: fix locking in regulatory disconnect")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/40c4114a-6cb4-4abf-b013-300b598aba65@moroto.mountain
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b11f953a61e95812af86fb24aad4ea10d309c84c
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Jun 6 14:34:48 2023 +0200

    wifi: cfg80211: fix locking in regulatory disconnect
    
    commit f7e60032c6618dfd643c7210d5cba2789e2de2e2 upstream.
    
    This should use wiphy_lock() now instead of requiring the
    RTNL, since __cfg80211_leave() via cfg80211_leave() is now
    requiring that lock to be held.
    
    Fixes: a05829a7222e ("cfg80211: avoid holding the RTNL when calling the driver")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a9adc42a590208ad3e912c605a7b51b66a6b13f
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue May 30 11:01:22 2023 +0100

    irqchip/gic: Correctly validate OF quirk descriptors
    
    [ Upstream commit 91539341a3b6e9c868024a4292455dae36e6f58c ]
    
    When checking for OF quirks, make sure either 'compatible' or 'property'
    is set, and give up otherwise.
    
    This avoids non-OF quirks being randomly applied as they don't have any
    of the OF data that need checking.
    
    Cc: Douglas Anderson <dianders@chromium.org>
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Fixes: 44bd78dd2b88 ("irqchip/gic-v3: Disable pseudo NMIs on Mediatek devices w/ firmware issues")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22efb27a21b6ebe6be0760949d877141077de701
Author: Tatsuki Sugiura <sugi@nemui.org>
Date:   Sat May 20 21:23:50 2023 +0900

    NVMe: Add MAXIO 1602 to bogus nid list.
    
    [ Upstream commit a3a9d63dcd15535e7fdf4c7c1b32bfaed762973a ]
    
    HIKSEMI FUTURE M.2 SSD uses the same dummy nguid and eui64.
    I confirmed it with my two devices.
    
    This patch marks the controller as NVME_QUIRK_BOGUS_NID.
    
    ---------------------------------------------------------
    sugi@tempest:~% sudo nvme id-ctrl /dev/nvme0
    NVME Identify Controller:
    vid       : 0x1e4b
    ssvid     : 0x1e4b
    sn        : 30096022612
    mn        : HS-SSD-FUTURE 2048G
    fr        : SN10542
    rab       : 0
    ieee      : 000000
    cmic      : 0
    mdts      : 7
    cntlid    : 0
    ver       : 0x10400
    rtd3r     : 0x7a120
    rtd3e     : 0x1e8480
    oaes      : 0x200
    ctratt    : 0x2
    rrls      : 0
    cntrltype : 1
    fguid     : 00000000-0000-0000-0000-000000000000
    <snip...>
    ---------------------------------------------------------
    
    ---------------------------------------------------------
    sugi@tempest:~% sudo nvme id-ns /dev/nvme0n1
    NVME Identify Namespace 1:
    <snip...>
    nguid   : 00000000000000000000000000000000
    eui64   : 0000000000000002
    lbaf  0 : ms:0   lbads:9  rp:0 (in use)
    ---------------------------------------------------------
    
    Signed-off-by: Tatsuki Sugiura <sugi@nemui.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9c205945033a41f3e5e38ffefd24270bb2bc393
Author: Wenwen Chen <wenwen.chen@samsung.com>
Date:   Thu May 25 16:26:26 2023 +0800

    io_uring: unlock sqd->lock before sq thread release CPU
    
    [ Upstream commit 533ab73f5b5c95dcb4152b52d5482abcc824c690 ]
    
    The sq thread actively releases CPU resources by calling the
    cond_resched() and schedule() interfaces when it is idle. Therefore,
    more resources are available for other threads to run.
    
    There exists a problem in sq thread: it does not unlock sqd->lock before
    releasing CPU resources every time. This makes other threads pending on
    sqd->lock for a long time. For example, the following interfaces all
    require sqd->lock: io_sq_offload_create(), io_register_iowq_max_workers()
    and io_ring_exit_work().
    
    Before the sq thread releases CPU resources, unlocking sqd->lock will
    provide the user a better experience because it can respond quickly to
    user requests.
    
    Signed-off-by: Kanchan Joshi<joshi.k@samsung.com>
    Signed-off-by: Wenwen Chen<wenwen.chen@samsung.com>
    Link: https://lore.kernel.org/r/20230525082626.577862-1-wenwen.chen@samsung.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ca9880735b0a33a4ff54328d6c5eb60fe2b0a6d
Author: Sukrut Bellary <sukrut.bellary@linux.com>
Date:   Wed May 3 16:15:07 2023 -0700

    drm:amd:amdgpu: Fix missing buffer object unlock in failure path
    
    [ Upstream commit 60ecaaf54886b0642d5c4744f7fbf1ff0d6b3e42 ]
    
    smatch warning -
    1) drivers/gpu/drm/amd/amdgpu/gfx_v9_0.c:3615 gfx_v9_0_kiq_resume()
    warn: inconsistent returns 'ring->mqd_obj->tbo.base.resv'.
    
    2) drivers/gpu/drm/amd/amdgpu/gfx_v10_0.c:6901 gfx_v10_0_kiq_resume()
    warn: inconsistent returns 'ring->mqd_obj->tbo.base.resv'.
    
    Signed-off-by: Sukrut Bellary <sukrut.bellary@linux.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41c383c4965717bbdf4d1e9f609925aa12403152
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Wed Apr 26 17:40:05 2023 +0100

    xen/blkfront: Only check REQ_FUA for writes
    
    [ Upstream commit b6ebaa8100090092aa602530d7e8316816d0c98d ]
    
    The existing code silently converts read operations with the
    REQ_FUA bit set into write-barrier operations. This results in data
    loss as the backend scribbles zeroes over the data instead of returning
    it.
    
    While the REQ_FUA bit doesn't make sense on a read operation, at least
    one well-known out-of-tree kernel module does set it and since it
    results in data loss, let's be safe here and only look at REQ_FUA for
    writes.
    
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Acked-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20230426164005.2213139-1-ross.lagerwall@citrix.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75955d69863670dbb949be9e9809ed9d2a7014d9
Author: Maxim Kochetkov <fido_max@inbox.ru>
Date:   Fri May 12 14:03:42 2023 +0300

    ASoC: dwc: move DMA init to snd_soc_dai_driver probe()
    
    [ Upstream commit 011a8719d6105dcb48077ea7a6a88ac019d4aa50 ]
    
    When using DMA mode we are facing with Oops:
    [  396.458157] Unable to handle kernel access to user memory without uaccess routines at virtual address 000000000000000c
    [  396.469374] Oops [#1]
    [  396.471839] Modules linked in:
    [  396.475144] CPU: 0 PID: 114 Comm: arecord Not tainted 6.0.0-00164-g9a8eccdaf2be-dirty #68
    [  396.483619] Hardware name: YMP ELCT FPGA (DT)
    [  396.488156] epc : dmaengine_pcm_open+0x1d2/0x342
    [  396.493227]  ra : dmaengine_pcm_open+0x1d2/0x342
    [  396.498140] epc : ffffffff807fe346 ra : ffffffff807fe346 sp : ffffffc804e138f0
    [  396.505602]  gp : ffffffff817bf730 tp : ffffffd8042c8ac0 t0 : 6500000000000000
    [  396.513045]  t1 : 0000000000000064 t2 : 656e69676e65616d s0 : ffffffc804e13990
    [  396.520477]  s1 : ffffffd801b86a18 a0 : 0000000000000026 a1 : ffffffff816920f8
    [  396.527897]  a2 : 0000000000000010 a3 : fffffffffffffffe a4 : 0000000000000000
    [  396.535319]  a5 : 0000000000000000 a6 : ffffffd801b87040 a7 : 0000000000000038
    [  396.542740]  s2 : ffffffd801b94a00 s3 : 0000000000000000 s4 : ffffffd80427f5e8
    [  396.550153]  s5 : ffffffd80427f5e8 s6 : ffffffd801b44410 s7 : fffffffffffffff5
    [  396.557569]  s8 : 0000000000000800 s9 : 0000000000000001 s10: ffffffff8066d254
    [  396.564978]  s11: ffffffd8059cf768 t3 : ffffffff817d5577 t4 : ffffffff817d5577
    [  396.572391]  t5 : ffffffff817d5578 t6 : ffffffc804e136e8
    [  396.577876] status: 0000000200000120 badaddr: 000000000000000c cause: 000000000000000d
    [  396.586007] [<ffffffff806839f4>] snd_soc_component_open+0x1a/0x68
    [  396.592439] [<ffffffff807fdd62>] __soc_pcm_open+0xf0/0x502
    [  396.598217] [<ffffffff80685d86>] soc_pcm_open+0x2e/0x4e
    [  396.603741] [<ffffffff8066cea4>] snd_pcm_open_substream+0x442/0x68e
    [  396.610313] [<ffffffff8066d1ea>] snd_pcm_open+0xfa/0x212
    [  396.615868] [<ffffffff8066d39c>] snd_pcm_capture_open+0x3a/0x60
    [  396.622048] [<ffffffff8065b35a>] snd_open+0xa8/0x17a
    [  396.627421] [<ffffffff801ae036>] chrdev_open+0xa0/0x218
    [  396.632893] [<ffffffff801a5a28>] do_dentry_open+0x17c/0x2a6
    [  396.638713] [<ffffffff801a6d9a>] vfs_open+0x1e/0x26
    [  396.643850] [<ffffffff801b8544>] path_openat+0x96e/0xc96
    [  396.649518] [<ffffffff801b9390>] do_filp_open+0x7c/0xf6
    [  396.655034] [<ffffffff801a6ff2>] do_sys_openat2+0x8a/0x11e
    [  396.660765] [<ffffffff801a735a>] sys_openat+0x50/0x7c
    [  396.666068] [<ffffffff80003aca>] ret_from_syscall+0x0/0x2
    [  396.674964] ---[ end trace 0000000000000000 ]---
    
    It happens because of play_dma_data/capture_dma_data pointers are NULL.
    Current implementation assigns these pointers at snd_soc_dai_driver
    startup() callback and reset them back to NULL at shutdown(). But
    soc_pcm_open() sequence uses DMA pointers in dmaengine_pcm_open()
    before snd_soc_dai_driver startup().
    Most generic DMA capable I2S drivers use snd_soc_dai_driver probe()
    callback to init DMA pointers only once at probe. So move DMA init
    to dw_i2s_dai_probe and drop shutdown() and startup() callbacks.
    
    Signed-off-by: Maxim Kochetkov <fido_max@inbox.ru>
    Link: https://lore.kernel.org/r/20230512110343.66664-1-fido_max@inbox.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e57a56374aab00ca83c3041b31e578073b0c27b
Author: Stefan Binding <sbinding@opensource.cirrus.com>
Date:   Fri Apr 14 16:25:51 2023 +0100

    ASoC: cs35l41: Fix default regmap values for some registers
    
    [ Upstream commit e2d035f5a7d597bbabc268e236ec6c0408c4af0e ]
    
    Several values do not match the defaults of CS35L41, fix them.
    
    Signed-off-by: Stefan Binding <sbinding@opensource.cirrus.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20230414152552.574502-4-sbinding@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 424fc902728c97e3ce2cf3e07fd10a7cbb13ace1
Author: Liviu Dudau <liviu@dudau.co.uk>
Date:   Tue May 9 18:29:21 2023 +0100

    mips: Move initrd_start check after initrd address sanitisation.
    
    [ Upstream commit 4897a898a216058dec55e5e5902534e6e224fcdf ]
    
    PAGE_OFFSET is technically a virtual address so when checking the value of
    initrd_start against it we should make sure that it has been sanitised from
    the values passed by the bootloader. Without this change, even with a bootloader
    that passes correct addresses for an initrd, we are failing to load it on MT7621
    boards, for example.
    
    Signed-off-by: Liviu Dudau <liviu@dudau.co.uk>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd035c08ee96eca2e7dc0fdac88bd53e3db00e34
Author: Manuel Lauss <manuel.lauss@gmail.com>
Date:   Thu May 11 17:30:10 2023 +0200

    MIPS: Alchemy: fix dbdma2
    
    [ Upstream commit 2d645604f69f3a772d58ead702f9a8e84ab2b342 ]
    
    Various fixes for the Au1200/Au1550/Au1300 DBDMA2 code:
    
    - skip cache invalidation if chip has working coherency circuitry.
    - invalidate KSEG0-portion of the (physical) data address.
    - force the dma channel doorbell write out to bus immediately with
      a sync.
    
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34dd1a90ab640e47d2b5c27689ccaab8ee47084d
Author: Manuel Lauss <manuel.lauss@gmail.com>
Date:   Wed May 10 12:33:23 2023 +0200

    MIPS: Restore Au1300 support
    
    [ Upstream commit f2041708dee30a3425f680265c337acd28293782 ]
    
    The Au1300, at least the one I have to test, uses the NetLogic vendor
    ID, but commit 95b8a5e0111a ("MIPS: Remove NETLOGIC support") also
    dropped Au1300 detection.  Restore Au1300 detection.
    
    Tested on DB1300 with Au1380 chip.
    
    Signed-off-by: Manuel Lauss <manuel.lauss@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 048ad52d528ec23b63db3714e40150786722d77f
Author: Manuel Lauss <manuel.lauss@gmail.com>
Date:   Tue May 9 20:57:44 2023 +0200

    MIPS: unhide PATA_PLATFORM
    
    [ Upstream commit 75b18aac6fa39a1720677970cfcb52ecea1eb44c ]
    
    Alchemy DB1200/DB1300 boards can use the pata_platform driver.
    Unhide the config entry in all of MIPS.
    
    Signed-off-by: Manuel Lauss <manuel.lauss@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d48ea53c44b7720606cfd1a2467f689c35af86a
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 17 15:54:40 2023 +0200

    parisc: Flush gatt writes and adjust gatt mask in parisc_agp_mask_memory()
    
    [ Upstream commit d703797380c540bbeac03f104ebcfc364eaf47cc ]
    
    Flush caches after changing gatt entries and calculate entry according
    to SBA requirements.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e522a12e4892f99b4251dbdd9dcf37f8dc2cb90e
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 17 15:52:30 2023 +0200

    parisc: Improve cache flushing for PCXL in arch_sync_dma_for_cpu()
    
    [ Upstream commit 59fa12646d9f56c842b4d5b6418ed77af625c588 ]
    
    Add comment in arch_sync_dma_for_device() and handle the direction flag in
    arch_sync_dma_for_cpu().
    
    When receiving data from the device (DMA_FROM_DEVICE) unconditionally
    purge the data cache in arch_sync_dma_for_cpu().
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b09b35cae865b383e206d2ab54ce4560859577c
Author: Amadeusz S≈Çawi≈Ñski <amadeuszx.slawinski@linux.intel.com>
Date:   Fri May 19 22:17:11 2023 +0200

    ASoC: Intel: avs: Add missing checks on FE startup
    
    [ Upstream commit 25148f57a2a6d157779bae494852e172952ba980 ]
    
    Constraint functions have return values, they should be checked for
    potential errors.
    
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Signed-off-by: Amadeusz S≈Çawi≈Ñski <amadeuszx.slawinski@linux.intel.com>
    Link: https://lore.kernel.org/r/20230519201711.4073845-8-amadeuszx.slawinski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5daa27bcb31d731258b39497dbd0a7949eee75b9
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Fri May 19 22:17:09 2023 +0200

    ASoC: Intel: avs: Account for UID of ACPI device
    
    [ Upstream commit 836855100b87b4dd7a82546131779dc255c18b67 ]
    
    Configurations with multiple codecs attached to the platform are
    supported but only if each from the set is different. Add new field
    representing the 'Unique ID' so that codecs that share Vendor and Part
    IDs can be differentiated and thus enabling support for such
    configurations.
    
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Signed-off-by: Amadeusz S≈Çawi≈Ñski <amadeuszx.slawinski@linux.intel.com>
    Link: https://lore.kernel.org/r/20230519201711.4073845-6-amadeuszx.slawinski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c33fded7f17f6102a4d7d77f826d0eba5da9b986
Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Date:   Wed May 17 13:57:31 2023 -0500

    ASoC: soc-pcm: test if a BE can be prepared
    
    [ Upstream commit e123036be377ddf628226a7c6d4f9af5efd113d3 ]
    
    In the BE hw_params configuration, the existing code checks if any of the
    existing FEs are prepared, running, paused or suspended - and skips the
    configuration in those cases. This allows multiple calls of hw_params
    which the ALSA state machine supports.
    
    This check is not handled for the prepare stage, which can lead to the
    same BE being prepared multiple times. This patch adds a check similar to
    that of the hw_params, with the main difference being that the suspended
    state is allowed: the ALSA state machine allows a transition from
    suspended to prepared with hw_params skipped.
    
    This problem was detected on Intel IPC4/SoundWire devices, where the BE
    dailink .prepare stage is used to configure the SoundWire stream with a
    bank switch. Multiple .prepare calls lead to conflicts with the .trigger
    operation with IPC4 configurations. This problem was not detected earlier
    on Intel devices, HDaudio BE dailinks detect that the link is already
    prepared and skip the configuration, and for IPC3 devices there is no BE
    trigger.
    
    Link: https://github.com/thesofproject/sof/issues/7596
    Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com
    Link: https://lore.kernel.org/r/20230517185731.487124-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a9b2164b7d8b82b9874f9d54641f5bddd8a2bab
Author: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Date:   Thu May 4 13:58:13 2023 +0200

    btrfs: handle memory allocation failure in btrfs_csum_one_bio
    
    [ Upstream commit 806570c0bb7b4847828c22c4934fcf2dc8fc572f ]
    
    Since f8a53bb58ec7 ("btrfs: handle checksum generation in the storage
    layer") the failures of btrfs_csum_one_bio() are handled via
    bio_end_io().
    
    This means, we can return BLK_STS_RESOURCE from btrfs_csum_one_bio() in
    case the allocation of the ordered sums fails.
    
    This also fixes a syzkaller report, where injecting a failure into the
    kvzalloc() call results in a BUG_ON().
    
    Reported-by: syzbot+d8941552e21eac774778@syzkaller.appspotmail.com
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9a5175d5e83310d92587c67b2583cd9373e6567
Author: Qu Wenruo <wqu@suse.com>
Date:   Thu Apr 13 13:57:17 2023 +0800

    btrfs: scrub: try harder to mark RAID56 block groups read-only
    
    [ Upstream commit 7561551e7ba870b9659083b95feb520fb2dacce3 ]
    
    Currently we allow a block group not to be marked read-only for scrub.
    
    But for RAID56 block groups if we require the block group to be
    read-only, then we're allowed to use cached content from scrub stripe to
    reduce unnecessary RAID56 reads.
    
    So this patch would:
    
    - Make btrfs_inc_block_group_ro() try harder
      During my tests, for cases like btrfs/061 and btrfs/064, we can hit
      ENOSPC from btrfs_inc_block_group_ro() calls during scrub.
    
      The reason is if we only have one single data chunk, and trying to
      scrub it, we won't have any space left for any newer data writes.
    
      But this check should be done by the caller, especially for scrub
      cases we only temporarily mark the chunk read-only.
      And newer data writes would always try to allocate a new data chunk
      when needed.
    
    - Return error for scrub if we failed to mark a RAID56 chunk read-only
    
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c45aed74318e65b8da938a593c124ad2ee1a1e66
Author: Maya Matuszczyk <maccraft123mc@gmail.com>
Date:   Mon May 15 20:48:43 2023 +0200

    drm: panel-orientation-quirks: Change Air's quirk to support Air Plus
    
    [ Upstream commit 1aa7f416175619e0286fddc5fc44e968b06bf2aa ]
    
    It turned out that Aya Neo Air Plus had a different board name than
    expected.
    This patch changes Aya Neo Air's quirk to account for that, as both
    devices share "Air" in DMI product name.
    
    Tested on Air claiming to be an Air Pro, and on Air Plus.
    
    Signed-off-by: Maya Matuszczyk <maccraft123mc@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230515184843.1552612-1-maccraft123mc@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d9144c0ca820565ac25cbaa63f585ddedb741b5
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue May 16 13:25:40 2023 -0500

    power: supply: Fix logic checking if system is running from battery
    
    [ Upstream commit 95339f40a8b652b5b1773def31e63fc53c26378a ]
    
    The logic used for power_supply_is_system_supplied() counts all power
    supplies and assumes that the system is running from AC if there is
    either a non-battery power-supply reporting to be online or if no
    power-supplies exist at all.
    
    The second rule is for desktop systems, that don't have any
    battery/charger devices. These systems will incorrectly report to be
    powered from battery once a device scope power-supply is registered
    (e.g. a HID device), since these power-supplies increase the counter.
    
    Apart from HID devices, recent dGPUs provide UCSI power supplies on a
    desktop systems. The dGPU by default doesn't have anything plugged in so
    it's 'offline'. This makes power_supply_is_system_supplied() return 0
    with a count of 1 meaning all drivers that use this get a wrong judgement.
    
    To fix this case adjust the logic to also examine the scope of the power
    supply. If the power supply is deemed a device power supply, then don't
    count it.
    
    Cc: Evan Quan <Evan.Quan@amd.com>
    Suggested-by: Lijo Lazar <Lijo.Lazar@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 808e103ebac9db9b66a869f32016b9224cb2ec98
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri May 12 18:45:06 2023 +0200

    irqchip/meson-gpio: Mark OF related data as maybe unused
    
    [ Upstream commit 14130211be5366a91ec07c3284c183b75d8fba17 ]
    
    The driver can be compile tested with !CONFIG_OF making certain data
    unused:
    
      drivers/irqchip/irq-meson-gpio.c:153:34: error: ‚Äòmeson_irq_gpio_matches‚Äô defined but not used [-Werror=unused-const-variable=]
    
    Acked-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20230512164506.212267-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cdb593c2fe94c874fb8a40a4e237211ca18ab7e
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon May 15 13:13:51 2023 -0700

    irqchip/gic-v3: Disable pseudo NMIs on Mediatek devices w/ firmware issues
    
    [ Upstream commit 44bd78dd2b8897f59b7e3963f088caadb7e4f047 ]
    
    Some Chromebooks with Mediatek SoCs have a problem where the firmware
    doesn't properly save/restore certain GICR registers. Newer
    Chromebooks should fix this issue and we may be able to do firmware
    updates for old Chromebooks. At the moment, the only known issue with
    these Chromebooks is that we can't enable "pseudo NMIs" since the
    priority register can be lost. Enabling "pseudo NMIs" on Chromebooks
    with the problematic firmware causes crashes and freezes.
    
    Let's detect devices with this problem and then disable "pseudo NMIs"
    on them. We'll detect the problem by looking for the presence of the
    "mediatek,broken-save-restore-fw" property in the GIC device tree
    node. Any devices with fixed firmware will not have this property.
    
    Our detection plan works because we never bake a Chromebook's device
    tree into firmware. Instead, device trees are always bundled with the
    kernel. We'll update the device trees of all affected Chromebooks and
    then we'll never enable "pseudo NMI" on a kernel that is bundled with
    old device trees. When a firmware update is shipped that fixes this
    issue it will know to patch the device tree to remove the property.
    
    In order to make this work, the quick detection mechanism of the GICv3
    code is extended to be able to look for properties in addition to
    looking at "compatible".
    
    Reviewed-by: Julius Werner <jwerner@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20230515131353.v2.2.I88dc0a0eb1d9d537de61604cd8994ecc55c0cac1@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf8324676b1c842c100aafcc850342d1492f24a8
Author: Osama Muhammad <osmtendev@gmail.com>
Date:   Mon May 15 22:29:38 2023 +0500

    regulator: Fix error checking for debugfs_create_dir
    
    [ Upstream commit 2bf1c45be3b8f3a3f898d0756c1282f09719debd ]
    
    This patch fixes the error checking in core.c in debugfs_create_dir.
    The correct way to check if an error occurred is 'IS_ERR' inline function.
    
    Signed-off-by: Osama Muhammad <osmtendev@gmail.com
    Suggested-by: Ivan Orlov <ivan.orlov0322@gmail.com
    Link: https://lore.kernel.org/r/20230515172938.13338-1-osmtendev@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c94be1f039c334f63579f95b9f4338290fe555d4
Author: Alexandru Sorodoc <ealex95@gmail.com>
Date:   Fri May 12 13:15:17 2023 +0300

    platform/x86: asus-wmi: Ignore WMI events with codes 0x7B, 0xC0
    
    [ Upstream commit 362c1f2ec82cb65940e1c73e15a395a7a891fc6f ]
    
    On ASUS GU604V the key 0x7B is issued when the charger is connected or
    disconnected, and key 0xC0 is issued when an external display is
    connected or disconnected.
    
    This commit maps them to KE_IGNORE to slience kernel messages about
    unknown keys, such as:
    
        kernel: asus_wmi: Unknown key code 0x7b
    
    Signed-off-by: Alexandru Sorodoc <ealex95@gmail.com>
    Link: https://lore.kernel.org/r/20230512101517.47416-1-ealex95@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cdf9cfc1bbd7a53691f744b6e9726dc7a9e7e4e6
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Thu May 11 15:19:05 2023 +0300

    PCI/DPC: Quirk PIO log size for Intel Ice Lake Root Ports
    
    [ Upstream commit 3b8803494a0612acdeee714cb72aa142b1e05ce5 ]
    
    Commit 5459c0b70467 ("PCI/DPC: Quirk PIO log size for certain Intel Root
    Ports") added quirks for Tiger and Alder Lake Root Ports but missed that
    the same issue exists also in the previous generation, Ice Lake.
    
    Apply the quirk for Ice Lake Root Ports as well.  This prevents kernel
    complaints like:
    
      DPC: RP PIO log size 0 is invalid
    
    and also enables the DPC driver to dump the RP PIO Log registers when DPC
    is triggered.
    
    [bhelgaas: add dmesg warning and RP PIO Log dump info]
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=209943
    Link: https://lore.kernel.org/r/20230511121905.73949-1-mika.westerberg@linux.intel.com
    Reported-by: Mark Blakeney <mark.blakeney@bullet-systems.net>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22358b9c418c101cdba1dc3aa819eabb724b43eb
Author: Marek Vasut <marex@denx.de>
Date:   Sun Mar 5 21:52:26 2023 +0100

    power: supply: Ratelimit no data debug output
    
    [ Upstream commit 155c45a25679f571c2ae57d10db843a9dfc63430 ]
    
    Reduce the amount of output this dev_dbg() statement emits into logs,
    otherwise if system software polls the sysfs entry for data and keeps
    getting -ENODATA, it could end up filling the logs up.
    
    This does in fact make systemd journald choke, since during boot the
    sysfs power supply entries are polled and if journald starts at the
    same time, the journal is just being repeatedly filled up, and the
    system stops on trying to start journald without booting any further.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7620312a082584b4043de91f4169bc4d0f05268
Author: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue Apr 11 20:15:20 2023 +0300

    selftests: gpio: gpio-sim: Fix BUG: test FAILED due to recent change
    
    [ Upstream commit 976d3c6778e99390c6d854d140b746d12ea18a51 ]
    
    According to Mirsad the gpio-sim.sh test appears to FAIL in a wrong way
    due to missing initialisation of shell variables:
    
     4.2. Bias settings work correctly
     cat: /sys/devices/platform/gpio-sim.0/gpiochip18/sim_gpio0/value: No such file or directory
     ./gpio-sim.sh: line 393: test: =: unary operator expected
     bias setting does not work
     GPIO gpio-sim test FAIL
    
    After this change the test passed:
    
     4.2. Bias settings work correctly
     GPIO gpio-sim test PASS
    
    His testing environment is AlmaLinux 8.7 on Lenovo desktop box with
    the latest Linux kernel based on v6.2:
    
      Linux 6.2.0-mglru-kmlk-andy-09238-gd2980d8d8265 x86_64
    
    Suggested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79a0a3695e011cf79a561d419145f07f115ddd64
Author: Milo Spadacini <milo.spadacini@gmail.com>
Date:   Mon May 8 15:18:48 2023 +0200

    tools: gpio: fix debounce_period_us output of lsgpio
    
    [ Upstream commit eb4b8eca1bad98f4b8574558a74f041f9acb5a54 ]
    
    Fix incorrect output that could occur when more attributes are used and
    GPIO_V2_LINE_ATTR_ID_DEBOUNCE is not the first one.
    
    Signed-off-by: Milo Spadacini <milo.spadacini@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc1444a3639838fd1db60ccc84ff024f619b31af
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sun Apr 23 17:08:37 2023 +0200

    ARM: dts: vexpress: add missing cache properties
    
    [ Upstream commit 328acc5657c6197753238d7ce0a6924ead829347 ]
    
    As all level 2 and level 3 caches are unified, add required
    cache-unified property to fix warnings like:
    
      vexpress-v2p-ca5s.dtb: cache-controller@2c0f0000: 'cache-unified' is a required property
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20230423150837.118466-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 398bf0d67bcccac84efc45d413b9bd57f27af0fd
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:39 2023 +0200

    power: supply: bq27xxx: Use mod_delayed_work() instead of cancel() + schedule()
    
    [ Upstream commit 59dddea9879713423c7b2ade43c423bb71e0d216 ]
    
    Use mod_delayed_work() instead of separate cancel_delayed_work_sync() +
    schedule_delayed_work() calls.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66a88d04cf5d3a019c520effdad8146e8b855a64
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 18:07:32 2023 +0200

    power: supply: sc27xx: Fix external_power_changed race
    
    [ Upstream commit 4d5c129d6c8993fe96e9ae712141eedcb9ca68c2 ]
    
    sc27xx_fgu_external_power_changed() dereferences data->battery,
    which gets sets in ab8500_btemp_probe() like this:
    
            data->battery = devm_power_supply_register(dev, &sc27xx_fgu_desc,
                                                       &fgu_cfg);
    
    As soon as devm_power_supply_register() has called device_add()
    the external_power_changed callback can get called. So there is a window
    where sc27xx_fgu_external_power_changed() may get called while
    data->battery has not been set yet leading to a NULL pointer dereference.
    
    Fixing this is easy. The external_power_changed callback gets passed
    the power_supply which will eventually get stored in data->battery,
    so sc27xx_fgu_external_power_changed() can simply directly use
    the passed in psy argument which is always valid.
    
    After this change sc27xx_fgu_external_power_changed() is reduced to just
    "power_supply_changed(psy);" and it has the same prototype. While at it
    simply replace it with making the external_power_changed callback
    directly point to power_supply_changed.
    
    Cc: Orson Zhai <orsonzhai@gmail.com>
    Cc: Chunyan Zhang <zhang.lyra@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Baolin Wang <baolin.wang@linux.alibaba.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3d2bdca180bef5a8223e43c604fe2d400e473b8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 18:07:29 2023 +0200

    power: supply: ab8500: Fix external_power_changed race
    
    [ Upstream commit a5299ce4e96f3e8930e9c051b28d8093ada87b08 ]
    
    ab8500_btemp_external_power_changed() dereferences di->btemp_psy,
    which gets sets in ab8500_btemp_probe() like this:
    
            di->btemp_psy = devm_power_supply_register(dev, &ab8500_btemp_desc,
                                                       &psy_cfg);
    
    As soon as devm_power_supply_register() has called device_add()
    the external_power_changed callback can get called. So there is a window
    where ab8500_btemp_external_power_changed() may get called while
    di->btemp_psy has not been set yet leading to a NULL pointer dereference.
    
    Fixing this is easy. The external_power_changed callback gets passed
    the power_supply which will eventually get stored in di->btemp_psy,
    so ab8500_btemp_external_power_changed() can simply directly use
    the passed in psy argument which is always valid.
    
    And the same applies to ab8500_fg_external_power_changed().
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 628e40a225a015cb87bbbcb6cd55bc48c44f615b
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Jun 2 11:05:02 2023 +0900

    of: overlay: Fix missing of_node_put() in error case of init_overlay_changeset()
    
    [ Upstream commit 39affd1fdf65983904fafc07cf607cff737eaf30 ]
    
    In init_overlay_changeset(), the variable "node" is from
    of_get_child_by_name(), and the "node" should be discarded in error case.
    
    Fixes: d1651b03c2df ("of: overlay: add overlay symbols to live device tree")
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Link: https://lore.kernel.org/r/20230602020502.11693-1-hayashi.kunihiko@socionext.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e01fc7caac9ce9ad76df9f42f7f61ef4bf1d27c9
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Wed May 31 17:59:32 2023 +0900

    ksmbd: validate smb request protocol id
    
    [ Upstream commit 1c1bcf2d3ea061613119b534f57507c377df20f9 ]
    
    This patch add the validation for smb request protocol id.
    If it is not one of the four ids(SMB1_PROTO_NUMBER, SMB2_PROTO_NUMBER,
    SMB2_TRANSFORM_PROTO_NUM, SMB2_COMPRESSION_TRANSFORM_ID), don't allow
    processing the request. And this will fix the following KASAN warning
    also.
    
    [   13.905265] BUG: KASAN: slab-out-of-bounds in init_smb2_rsp_hdr+0x1b9/0x1f0
    [   13.905900] Read of size 16 at addr ffff888005fd2f34 by task kworker/0:2/44
    ...
    [   13.908553] Call Trace:
    [   13.908793]  <TASK>
    [   13.908995]  dump_stack_lvl+0x33/0x50
    [   13.909369]  print_report+0xcc/0x620
    [   13.910870]  kasan_report+0xae/0xe0
    [   13.911519]  kasan_check_range+0x35/0x1b0
    [   13.911796]  init_smb2_rsp_hdr+0x1b9/0x1f0
    [   13.912492]  handle_ksmbd_work+0xe5/0x820
    
    Cc: stable@vger.kernel.org
    Reported-by: Chih-Yen Chang <cc85nod@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fec79e4f7df555b703ee4d6fed5ca62a64e2ab1a
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Wed May 17 17:16:35 2023 +0530

    EDAC/qcom: Get rid of hardcoded register offsets
    
    [ Upstream commit cbd77119b6355872cd308a60e99f9ca678435d15 ]
    
    The LLCC EDAC register offsets varies between each SoC. Hardcoding the
    register offsets won't work and will often result in crash due to
    accessing the wrong locations.
    
    Hence, get the register offsets from the LLCC driver matching the
    individual SoCs.
    
    Cc: <stable@vger.kernel.org> # 6.0: 5365cea199c7 ("soc: qcom: llcc: Rename reg_offset structs to reflect LLCC version")
    Cc: <stable@vger.kernel.org> # 6.0: c13d7d261e36 ("soc: qcom: llcc: Pass LLCC version based register offsets to EDAC driver")
    Cc: <stable@vger.kernel.org> # 6.0
    Fixes: a6e9d7ef252c ("soc: qcom: llcc: Add configuration data for SM8450 SoC")
    Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230517114635.76358-3-manivannan.sadhasivam@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b3ec6b6ff249fa24783953523c13efe68e18106
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Tue Mar 14 13:34:41 2023 +0530

    qcom: llcc/edac: Fix the base address used for accessing LLCC banks
    
    [ Upstream commit ee13b5008707948d3052c1b5aab485c6cd53658e ]
    
    The Qualcomm LLCC/EDAC drivers were using a fixed register stride for
    accessing the (Control and Status Registers) CSRs of each LLCC bank.
    This stride only works for some SoCs like SDM845 for which driver
    support was initially added.
    
    But the later SoCs use different register stride that vary between the
    banks with holes in-between. So it is not possible to use a single register
    stride for accessing the CSRs of each bank. By doing so could result in a
    crash.
    
    For fixing this issue, let's obtain the base address of each LLCC bank from
    devicetree and get rid of the fixed stride. This also means, there is no
    need to rely on reg-names property and the base addresses can be obtained
    using the index.
    
    First index is LLCC bank 0 and last index is LLCC broadcast. If the SoC
    supports more than one bank, then those need to be defined in devicetree
    for index from 1..N-1.
    
    Reported-by: Parikshit Pareek <quic_ppareek@quicinc.com>
    Tested-by: Luca Weiss <luca.weiss@fairphone.com>
    Tested-by: Steev Klimaszewski <steev@kali.org> # Thinkpad X13s
    Tested-by: Andrew Halaney <ahalaney@redhat.com> # sa8540p-ride
    Reviewed-by: Borislav Petkov (AMD) <bp@alien8.de>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230314080443.64635-13-manivannan.sadhasivam@linaro.org
    Stable-dep-of: cbd77119b635 ("EDAC/qcom: Get rid of hardcoded register offsets")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 314e973f36a501268401079931f75cefa342cb0a
Author: Qi Zheng <zhengqi.arch@bytedance.com>
Date:   Wed May 17 07:45:45 2023 +0000

    cgroup: fix missing cpus_read_{lock,unlock}() in cgroup_transfer_tasks()
    
    [ Upstream commit ab1de7ead871ebe6d12a774c3c25de0388cde082 ]
    
    The commit 4f7e7236435c ("cgroup: Fix threadgroup_rwsem <-> cpus_read_lock()
    deadlock") fixed the deadlock between cgroup_threadgroup_rwsem and
    cpus_read_lock() by introducing cgroup_attach_{lock,unlock}() and removing
    cpus_read_{lock,unlock}() from cpuset_attach(). But cgroup_transfer_tasks()
    was missed and not handled, which will cause th following warning:
    
     WARNING: CPU: 0 PID: 589 at kernel/cpu.c:526 lockdep_assert_cpus_held+0x32/0x40
     CPU: 0 PID: 589 Comm: kworker/1:4 Not tainted 6.4.0-rc2-next-20230517 #50
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-2 04/01/2014
     Workqueue: events cpuset_hotplug_workfn
     RIP: 0010:lockdep_assert_cpus_held+0x32/0x40
     <...>
     Call Trace:
      <TASK>
      cpuset_attach+0x40/0x240
      cgroup_migrate_execute+0x452/0x5e0
      ? _raw_spin_unlock_irq+0x28/0x40
      cgroup_transfer_tasks+0x1f3/0x360
      ? find_held_lock+0x32/0x90
      ? cpuset_hotplug_workfn+0xc81/0xed0
      cpuset_hotplug_workfn+0xcb1/0xed0
      ? process_one_work+0x248/0x5b0
      process_one_work+0x2b9/0x5b0
      worker_thread+0x56/0x3b0
      ? process_one_work+0x5b0/0x5b0
      kthread+0xf1/0x120
      ? kthread_complete_and_exit+0x20/0x20
      ret_from_fork+0x1f/0x30
      </TASK>
    
    So just use the cgroup_attach_{lock,unlock}() helper to fix it.
    
    Reported-by: Zhao Gongyi <zhaogongyi@bytedance.com>
    Signed-off-by: Qi Zheng <zhengqi.arch@bytedance.com>
    Acked-by: Muchun Song <songmuchun@bytedance.com>
    Fixes: 05c7b7a92cc8 ("cgroup/cpuset: Fix a race between cpuset_attach() and cpu hotplug")
    Cc: stable@vger.kernel.org # v5.17+
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c68b4db581386440dfb760b1e0d79ce10738047c
Author: John Sperbeck <jsperbeck@google.com>
Date:   Sun May 21 19:29:53 2023 +0000

    cgroup: always put cset in cgroup_css_set_put_fork
    
    [ Upstream commit 2bd110339288c18823dcace602b63b0d8627e520 ]
    
    A successful call to cgroup_css_set_fork() will always have taken
    a ref on kargs->cset (regardless of CLONE_INTO_CGROUP), so always
    do a corresponding put in cgroup_css_set_put_fork().
    
    Without this, a cset and its contained css structures will be
    leaked for some fork failures.  The following script reproduces
    the leak for a fork failure due to exceeding pids.max in the
    pids controller.  A similar thing can happen if we jump to the
    bad_fork_cancel_cgroup label in copy_process().
    
    [ -z "$1" ] && echo "Usage $0 pids-root" && exit 1
    PID_ROOT=$1
    CGROUP=$PID_ROOT/foo
    
    [ -e $CGROUP ] && rmdir -f $CGROUP
    mkdir $CGROUP
    echo 5 > $CGROUP/pids.max
    echo $$ > $CGROUP/cgroup.procs
    
    fork_bomb()
    {
            set -e
            for i in $(seq 10); do
                    /bin/sleep 3600 &
            done
    }
    
    (fork_bomb) &
    wait
    echo $$ > $PID_ROOT/cgroup.procs
    kill $(cat $CGROUP/cgroup.procs)
    rmdir $CGROUP
    
    Fixes: ef2c41cf38a7 ("clone3: allow spawning processes into cgroups")
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a2e2ca9ad21c770398c1e6b6d63c93e40bc0cfe
Author: Kamalesh Babulal <kamalesh.babulal@oracle.com>
Date:   Fri Mar 3 15:23:10 2023 +0530

    cgroup: bpf: use cgroup_lock()/cgroup_unlock() wrappers
    
    [ Upstream commit 4cdb91b0dea7d7f59fa84a13c7753cd434fdedcf ]
    
    Replace mutex_[un]lock() with cgroup_[un]lock() wrappers to stay
    consistent across cgroup core and other subsystem code, while
    operating on the cgroup_mutex.
    
    Signed-off-by: Kamalesh Babulal <kamalesh.babulal@oracle.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Reviewed-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Stable-dep-of: 2bd110339288 ("cgroup: always put cset in cgroup_css_set_put_fork")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6111f0add6ffc93612d4abe9fec002319102b1c0
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue May 9 10:47:45 2023 +0200

    test_firmware: prevent race conditions by a correct implementation of locking
    
    [ Upstream commit 4acfe3dfde685a5a9eaec5555351918e2d7266a1 ]
    
    Dan Carpenter spotted a race condition in a couple of situations like
    these in the test_firmware driver:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            u8 val;
            int ret;
    
            ret = kstrtou8(buf, 10, &val);
            if (ret)
                    return ret;
    
            mutex_lock(&test_fw_mutex);
            *(u8 *)cfg = val;
            mutex_unlock(&test_fw_mutex);
    
            /* Always return full write size even if we didn't consume all */
            return size;
    }
    
    static ssize_t config_num_requests_store(struct device *dev,
                                             struct device_attribute *attr,
                                             const char *buf, size_t count)
    {
            int rc;
    
            mutex_lock(&test_fw_mutex);
            if (test_fw_config->reqs) {
                    pr_err("Must call release_all_firmware prior to changing config\n");
                    rc = -EINVAL;
                    mutex_unlock(&test_fw_mutex);
                    goto out;
            }
            mutex_unlock(&test_fw_mutex);
    
            rc = test_dev_config_update_u8(buf, count,
                                           &test_fw_config->num_requests);
    
    out:
            return rc;
    }
    
    static ssize_t config_read_fw_idx_store(struct device *dev,
                                            struct device_attribute *attr,
                                            const char *buf, size_t count)
    {
            return test_dev_config_update_u8(buf, count,
                                             &test_fw_config->read_fw_idx);
    }
    
    The function test_dev_config_update_u8() is called from both the locked
    and the unlocked context, function config_num_requests_store() and
    config_read_fw_idx_store() which can both be called asynchronously as
    they are driver's methods, while test_dev_config_update_u8() and siblings
    change their argument pointed to by u8 *cfg or similar pointer.
    
    To avoid deadlock on test_fw_mutex, the lock is dropped before calling
    test_dev_config_update_u8() and re-acquired within test_dev_config_update_u8()
    itself, but alas this creates a race condition.
    
    Having two locks wouldn't assure a race-proof mutual exclusion.
    
    This situation is best avoided by the introduction of a new, unlocked
    function __test_dev_config_update_u8() which can be called from the locked
    context and reducing test_dev_config_update_u8() to:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            int ret;
    
            mutex_lock(&test_fw_mutex);
            ret = __test_dev_config_update_u8(buf, size, cfg);
            mutex_unlock(&test_fw_mutex);
    
            return ret;
    }
    
    doing the locking and calling the unlocked primitive, which enables both
    locked and unlocked versions without duplication of code.
    
    The similar approach was applied to all functions called from the locked
    and the unlocked context, which safely mitigates both deadlocks and race
    conditions in the driver.
    
    __test_dev_config_update_bool(), __test_dev_config_update_u8() and
    __test_dev_config_update_size_t() unlocked versions of the functions
    were introduced to be called from the locked contexts as a workaround
    without releasing the main driver's lock and thereof causing a race
    condition.
    
    The test_dev_config_update_bool(), test_dev_config_update_u8() and
    test_dev_config_update_size_t() locked versions of the functions
    are being called from driver methods without the unnecessary multiplying
    of the locking and unlocking code for each method, and complicating
    the code with saving of the return value across lock.
    
    Fixes: 7feebfa487b92 ("test_firmware: add support for request_firmware_into_buf")
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Russ Weight <russell.h.weight@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tianfei Zhang <tianfei.zhang@intel.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Colin Ian King <colin.i.king@gmail.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: linux-kselftest@vger.kernel.org
    Cc: stable@vger.kernel.org # v5.4
    Suggested-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/r/20230509084746.48259-1-mirsad.todorovac@alu.unizg.hr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa2dfdc4ed2594d5cf7bfe1cc914b53bf440a5e4
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Jan 14 10:22:03 2023 +0100

    test_firmware: Use kstrtobool() instead of strtobool()
    
    [ Upstream commit f7d85515bd21902b218370a1a6301f76e4e636ff ]
    
    strtobool() is the same as kstrtobool().
    However, the latter is more used within the kernel.
    
    In order to remove strtobool() and slightly simplify kstrtox.h, switch to
    the other function name.
    
    While at it, include the corresponding header file (<linux/kstrtox.h>)
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/34f04735d20e0138695dd4070651bd860a36b81c.1673688120.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 4acfe3dfde68 ("test_firmware: prevent race conditions by a correct implementation of locking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 100cd6d0e563f393e10dee825c1a865f308fc324
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Wed May 17 11:26:41 2023 -0500

    x86/head/64: Switch to KERNEL_CS as soon as new GDT is installed
    
    [ Upstream commit a37f2699c36a7f6606ba3300f243227856c5ad6b ]
    
    The call to startup_64_setup_env() will install a new GDT but does not
    actually switch to using the KERNEL_CS entry until returning from the
    function call.
    
    Commit bcce82908333 ("x86/sev: Detect/setup SEV/SME features earlier in
    boot") moved the call to sme_enable() earlier in the boot process and in
    between the call to startup_64_setup_env() and the switch to KERNEL_CS.
    An SEV-ES or an SEV-SNP guest will trigger #VC exceptions during the call
    to sme_enable() and if the CS pushed on the stack as part of the exception
    and used by IRETQ is not mapped by the new GDT, then problems occur.
    Today, the current CS when entering startup_64 is the kernel CS value
    because it was set up by the decompressor code, so no issue is seen.
    
    However, a recent patchset that looked to avoid using the legacy
    decompressor during an EFI boot exposed this bug. At entry to startup_64,
    the CS value is that of EFI and is not mapped in the new kernel GDT. So
    when a #VC exception occurs, the CS value used by IRETQ is not valid and
    the guest boot crashes.
    
    Fix this issue by moving the block that switches to the KERNEL_CS value to
    be done immediately after returning from startup_64_setup_env().
    
    Fixes: bcce82908333 ("x86/sev: Detect/setup SEV/SME features earlier in boot")
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Joerg Roedel <jroedel@suse.de>
    Link: https://lore.kernel.org/all/6ff1f28af2829cc9aea357ebee285825f90a431f.1684340801.git.thomas.lendacky%40amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

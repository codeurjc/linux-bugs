commit 89d93e9d9f32df4b2d7f4ff3bff645f0c7acad35
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Oct 25 11:13:33 2023 +0200

    Linux 4.14.328
    
    Link: https://lore.kernel.org/r/20231023104810.781270702@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20231024083251.452724764@linuxfoundation.org
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be91967244bec4a0f1ca0f4a207764c554bfabc2
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Oct 5 13:59:59 2023 -0700

    Bluetooth: hci_event: Fix using memcmp when comparing keys
    
    commit b541260615f601ae1b5d6d0cc54e790de706303b upstream.
    
    memcmp is not consider safe to use with cryptographic secrets:
    
     'Do  not  use memcmp() to compare security critical data, such as
     cryptographic secrets, because the required CPU time depends on the
     number of equal bytes.'
    
    While usage of memcmp for ZERO_KEY may not be considered a security
    critical data, it can lead to more usage of memcmp with pairing keys
    which could introduce more security problems.
    
    Fixes: 455c2ff0a558 ("Bluetooth: Fix BR/EDR out-of-band pairing with only initiator data")
    Fixes: 33155c4aae52 ("Bluetooth: hci_event: Ignore NULL link key")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3830fca233beab7f7928024c288a4ad5e32b00b
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Oct 11 09:31:44 2023 -0700

    Bluetooth: hci_sock: Correctly bounds check and pad HCI_MON_NEW_INDEX name
    
    commit cb3871b1cd135a6662b732fbc6b3db4afcdb4a64 upstream.
    
    The code pattern of memcpy(dst, src, strlen(src)) is almost always
    wrong. In this case it is wrong because it leaves memory uninitialized
    if it is less than sizeof(ni->name), and overflows ni->name when longer.
    
    Normally strtomem_pad() could be used here, but since ni->name is a
    trailing array in struct hci_mon_new_index, compilers that don't support
    -fstrict-flex-arrays=3 can't tell how large this array is via
    __builtin_object_size(). Instead, open-code the helper and use sizeof()
    since it will work correctly.
    
    Additionally mark ni->name as __nonstring since it appears to not be a
    %NUL terminated C string.
    
    Cc: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Edward AD <twuufnxlz@gmail.com>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: Johan Hedberg <johan.hedberg@gmail.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: linux-bluetooth@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Fixes: 18f547f3fc07 ("Bluetooth: hci_sock: fix slab oob read in create_monitor_event")
    Link: https://lore.kernel.org/lkml/202310110908.F2639D3276@keescook/
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98e48a4fa0c255d3599a735d6bc56c06fae02d79
Author: Edward AD <twuufnxlz@gmail.com>
Date:   Tue Oct 10 13:36:57 2023 +0800

    Bluetooth: hci_sock: fix slab oob read in create_monitor_event
    
    commit 18f547f3fc074500ab5d419cf482240324e73a7e upstream.
    
    When accessing hdev->name, the actual string length should prevail
    
    Reported-by: syzbot+c90849c50ed209d77689@syzkaller.appspotmail.com
    Fixes: dcda165706b9 ("Bluetooth: hci_core: Fix build warnings")
    Signed-off-by: Edward AD <twuufnxlz@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d66259c0dcaf1403697add138be0933e2ed8067b
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Oct 18 11:00:17 2023 +0200

    gpio: vf610: set value before the direction to avoid a glitch
    
    commit fc363413ef8ea842ae7a99e3caf5465dafdd3a49 upstream.
    
    We found a glitch when configuring the pad as output high. To avoid this
    glitch, move the data value setting before direction config in the
    function vf610_gpio_direction_output().
    
    Fixes: 659d8a62311f ("gpio: vf610: add imx7ulp support")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    [Bartosz: tweak the commit message]
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8670eb7100d6b256040b836286ebec0b2dac420c
Author: Niklas Schnelle <schnelle@linux.ibm.com>
Date:   Tue Oct 17 15:37:29 2023 +0200

    s390/pci: fix iommu bitmap allocation
    
    commit c1ae1c59c8c6e0b66a718308c623e0cb394dab6b upstream.
    
    Since the fixed commits both zdev->iommu_bitmap and zdev->lazy_bitmap
    are allocated as vzalloc(zdev->iommu_pages / 8). The problem is that
    zdev->iommu_bitmap is a pointer to unsigned long but the above only
    yields an allocation that is a multiple of sizeof(unsigned long) which
    is 8 on s390x if the number of IOMMU pages is a multiple of 64.
    This in turn is the case only if the effective IOMMU aperture is
    a multiple of 64 * 4K = 256K. This is usually the case and so didn't
    cause visible issues since both the virt_to_phys(high_memory) reduced
    limit and hardware limits use nice numbers.
    
    Under KVM, and in particular with QEMU limiting the IOMMU aperture to
    the vfio DMA limit (default 65535), it is possible for the reported
    aperture not to be a multiple of 256K however. In this case we end up
    with an iommu_bitmap whose allocation is not a multiple of
    8 causing bitmap operations to access it out of bounds.
    
    Sadly we can't just fix this in the obvious way and use bitmap_zalloc()
    because for large RAM systems (tested on 8 TiB) the zdev->iommu_bitmap
    grows too large for kmalloc(). So add our own bitmap_vzalloc() wrapper.
    This might be a candidate for common code, but this area of code will
    be replaced by the upcoming conversion to use the common code DMA API on
    s390 so just add a local routine.
    
    Fixes: 224593215525 ("s390/pci: use virtual memory for iommu bitmap")
    Fixes: 13954fd6913a ("s390/pci_dma: improve lazy flush for unmap")
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthew Rosato <mjrosato@linux.ibm.com>
    Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 555e15e93f6dbb8ce6b5b92e5272473abfe8bd2b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Oct 18 13:56:54 2023 +0200

    perf: Disallow mis-matched inherited group reads
    
    commit 32671e3799ca2e4590773fd0e63aaa4229e50c06 upstream.
    
    Because group consistency is non-atomic between parent (filedesc) and children
    (inherited) events, it is possible for PERF_FORMAT_GROUP read() to try and sum
    non-matching counter groups -- with non-sensical results.
    
    Add group_generation to distinguish the case where a parent group removes and
    adds an event and thus has the same number, but a different configuration of
    events as inherited groups.
    
    This became a problem when commit fa8c269353d5 ("perf/core: Invert
    perf_read_group() loops") flipped the order of child_list and sibling_list.
    Previously it would iterate the group (sibling_list) first, and for each
    sibling traverse the child_list. In this order, only the group composition of
    the parent is relevant. By flipping the order the group composition of the
    child (inherited) events becomes an issue and the mis-match in group
    composition becomes evident.
    
    That said; even prior to this commit, while reading of a group that is not
    equally inherited was not broken, it still made no sense.
    
    (Ab)use ECHILD as error return to indicate issues with child process group
    composition.
    
    Fixes: fa8c269353d5 ("perf/core: Invert perf_read_group() loops")
    Reported-by: Budimir Markovic <markovicbudimir@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20231018115654.GK33217@noisy.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e866d701cccaf1edd522784763826d678e13fb3
Author: Puliang Lu <puliang.lu@fibocom.com>
Date:   Mon Oct 16 15:36:16 2023 +0800

    USB: serial: option: add Fibocom to DELL custom modem FM101R-GL
    
    commit 52480e1f1a259c93d749ba3961af0bffedfe7a7a upstream.
    
    Update the USB serial option driver support for the Fibocom
    FM101R-GL LTE modules as there are actually several different variants.
    
    - VID:PID 413C:8213, FM101R-GL are laptop M.2 cards (with
      MBIM interfaces for Linux)
    
    - VID:PID 413C:8215, FM101R-GL ESIM are laptop M.2 cards (with
      MBIM interface for Linux)
    
    0x8213: mbim, tty
    0x8215: mbim, tty
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=8213 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=a3b7cbf0
    C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  3 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=8215 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=a3b7cbf0
    C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Signed-off-by: Puliang Lu <puliang.lu@fibocom.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f5d25ac2795301f7ba67660f2ddc04aa1c68d15
Author: Benoît Monin <benoit.monin@gmx.fr>
Date:   Mon Oct 2 17:51:40 2023 +0200

    USB: serial: option: add entry for Sierra EM9191 with new firmware
    
    commit 064f6e2ba9eb59b2c87b866e1e968e79ccedf9dd upstream.
    
    Following a firmware update of the modem, the interface for the AT
    command port changed, so add it back.
    
    T:  Bus=08 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=1199 ProdID=90d3 Rev=00.06
    S:  Manufacturer=Sierra Wireless, Incorporated
    S:  Product=Sierra Wireless EM9191
    S:  SerialNumber=xxxxxxxxxxxxxxxx
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    Signed-off-by: Benoît Monin <benoit.monin@gmx.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd71b5035937ec386e7b427e1689ecccda0296a2
Author: Fabio Porcedda <fabio.porcedda@gmail.com>
Date:   Tue Sep 5 09:37:24 2023 +0200

    USB: serial: option: add Telit LE910C4-WWX 0x1035 composition
    
    commit 6a7be48e9bd18d309ba25c223a27790ad1bf0fa3 upstream.
    
    Add support for the following Telit LE910C4-WWX composition:
    
    0x1035: TTY, TTY, ECM
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  5 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=1bc7 ProdID=1035 Rev=00.00
    S:  Manufacturer=Telit
    S:  Product=LE910C4-WWX
    S:  SerialNumber=e1b117c7
    C:  #Ifs= 4 Cfg#= 1 Atr=e0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=fe Prot=ff Driver=option
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 2 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=85(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    I:  If#= 3 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Fabio Porcedda <fabio.porcedda@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Daniele Palmas <dnlplm@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e091fb264e18288b13fa9b77e657e9ef2bc484b7
Author: Sunil V L <sunilvl@ventanamicro.com>
Date:   Mon Oct 16 22:39:39 2023 +0530

    ACPI: irq: Fix incorrect return value in acpi_register_gsi()
    
    commit 0c21a18d5d6c6a73d098fb9b4701572370942df9 upstream.
    
    acpi_register_gsi() should return a negative value in case of failure.
    
    Currently, it returns the return value from irq_create_fwspec_mapping().
    However, irq_create_fwspec_mapping() returns 0 for failure. Fix the
    issue by returning -EINVAL if irq_create_fwspec_mapping() returns zero.
    
    Fixes: d44fa3d46079 ("ACPI: Add support for ResourceSource/IRQ domain mapping")
    Cc: 4.11+ <stable@vger.kernel.org> # 4.11+
    Signed-off-by: Sunil V L <sunilvl@ventanamicro.com>
    [ rjw: Rename a new local variable ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42d3d975889d1fa242084f9ea76ab718091866c8
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Oct 17 17:18:06 2023 +0300

    Revert "pinctrl: avoid unsafe code pattern in find_pinctrl()"
    
    commit 62140a1e4dec4594d5d1e1d353747bf2ef434e8b upstream.
    
    The commit breaks MMC enumeration on the Intel Merrifield
    plaform.
    
    Before:
    [   36.439057] mmc0: SDHCI controller on PCI [0000:00:01.0] using ADMA
    [   36.450924] mmc2: SDHCI controller on PCI [0000:00:01.3] using ADMA
    [   36.459355] mmc1: SDHCI controller on PCI [0000:00:01.2] using ADMA
    [   36.706399] mmc0: new DDR MMC card at address 0001
    [   37.058972] mmc2: new ultra high speed DDR50 SDIO card at address 0001
    [   37.278977] mmcblk0: mmc0:0001 H4G1d 3.64 GiB
    [   37.297300]  mmcblk0: p1 p2 p3 p4 p5 p6 p7 p8 p9 p10
    
    After:
    [   36.436704] mmc2: SDHCI controller on PCI [0000:00:01.3] using ADMA
    [   36.436720] mmc1: SDHCI controller on PCI [0000:00:01.0] using ADMA
    [   36.463685] mmc0: SDHCI controller on PCI [0000:00:01.2] using ADMA
    [   36.720627] mmc1: new DDR MMC card at address 0001
    [   37.068181] mmc2: new ultra high speed DDR50 SDIO card at address 0001
    [   37.279998] mmcblk1: mmc1:0001 H4G1d 3.64 GiB
    [   37.302670]  mmcblk1: p1 p2 p3 p4 p5 p6 p7 p8 p9 p10
    
    This reverts commit c153a4edff6ab01370fcac8e46f9c89cca1060c2.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20231017141806.535191-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcdd6d414f6a1e96f755f389d98fdc58901cdc69
Author: Avri Altman <avri.altman@wdc.com>
Date:   Wed Sep 27 10:15:00 2023 +0300

    mmc: core: Capture correct oemid-bits for eMMC cards
    
    commit 84ee19bffc9306128cd0f1c650e89767079efeff upstream.
    
    The OEMID is an 8-bit binary number rather than 16-bit as the current code
    parses for. The OEMID occupies bits [111:104] in the CID register, see the
    eMMC spec JESD84-B51 paragraph 7.2.3. It seems that the 16-bit comes from
    the legacy MMC specs (v3.31 and before).
    
    Let's fix the parsing by simply move to use 8-bit instead of 16-bit. This
    means we ignore the impact on some of those old MMC cards that may be out
    there, but on the other hand this shouldn't be a problem as the OEMID seems
    not be an important feature for these cards.
    
    Signed-off-by: Avri Altman <avri.altman@wdc.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230927071500.1791882-1-avri.altman@wdc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f75e271fb424e338c76fa4d3c1fdae3de6cbd6f8
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Sep 22 09:50:39 2023 -0700

    sky2: Make sure there is at least one frag_addr available
    
    [ Upstream commit 6a70e5cbedaf8ad10528ac9ac114f3ec20f422df ]
    
    In the pathological case of building sky2 with 16k PAGE_SIZE, the
    frag_addr[] array would never be used, so the original code was correct
    that size should be 0. But the compiler now gets upset with 0 size arrays
    in places where it hasn't eliminated the code that might access such an
    array (it can't figure out that in this case an rx skb with fragments
    would never be created). To keep the compiler happy, make sure there is
    at least 1 frag_addr in struct rx_ring_info:
    
       In file included from include/linux/skbuff.h:28,
                        from include/net/net_namespace.h:43,
                        from include/linux/netdevice.h:38,
                        from drivers/net/ethernet/marvell/sky2.c:18:
       drivers/net/ethernet/marvell/sky2.c: In function 'sky2_rx_unmap_skb':
       include/linux/dma-mapping.h:416:36: warning: array subscript i is outside array bounds of 'dma_addr_t[0]' {aka 'long long unsigned int[]'} [-Warray-bounds=]
         416 | #define dma_unmap_page(d, a, s, r) dma_unmap_page_attrs(d, a, s, r, 0)
             |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       drivers/net/ethernet/marvell/sky2.c:1257:17: note: in expansion of macro 'dma_unmap_page'
        1257 |                 dma_unmap_page(&pdev->dev, re->frag_addr[i],
             |                 ^~~~~~~~~~~~~~
       In file included from drivers/net/ethernet/marvell/sky2.c:41:
       drivers/net/ethernet/marvell/sky2.h:2198:25: note: while referencing 'frag_addr'
        2198 |         dma_addr_t      frag_addr[ETH_JUMBO_MTU >> PAGE_SHIFT];
             |                         ^~~~~~~~~
    
    With CONFIG_PAGE_SIZE_16KB=y, PAGE_SHIFT == 14, so:
    
      #define ETH_JUMBO_MTU   9000
    
    causes "ETH_JUMBO_MTU >> PAGE_SHIFT" to be 0. Use "?: 1" to solve this build warning.
    
    Cc: Mirko Lindner <mlindner@marvell.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: netdev@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202309191958.UBw1cjXk-lkp@intel.com/
    Reviewed-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aca85d86fbbb81e10afb79468e3143cb32bc7c7e
Author: Benjamin Berg <benjamin.berg@intel.com>
Date:   Mon Sep 25 17:18:56 2023 +0200

    wifi: cfg80211: avoid leaking stack data into trace
    
    [ Upstream commit 334bf33eec5701a1e4e967bcb7cc8611a998334b ]
    
    If the structure is not initialized then boolean types might be copied
    into the tracing data without being initialised. This causes data from
    the stack to leak into the trace and also triggers a UBSAN failure which
    can easily be avoided here.
    
    Signed-off-by: Benjamin Berg <benjamin.berg@intel.com>
    Link: https://lore.kernel.org/r/20230925171855.a9271ef53b05.I8180bae663984c91a3e036b87f36a640ba409817@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7923110e5fc6194e1809878961ddde48759113ca
Author: Wen Gong <quic_wgong@quicinc.com>
Date:   Tue Aug 1 02:47:51 2023 -0400

    wifi: mac80211: allow transmitting EAPOL frames with tainted key
    
    [ Upstream commit 61304336c67358d49a989e5e0060d8c99bad6ca8 ]
    
    Lower layer device driver stop/wake TX by calling ieee80211_stop_queue()/
    ieee80211_wake_queue() while hw scan. Sometimes hw scan and PTK rekey are
    running in parallel, when M4 sent from wpa_supplicant arrive while the TX
    queue is stopped, then the M4 will pending send, and then new key install
    from wpa_supplicant. After TX queue wake up by lower layer device driver,
    the M4 will be dropped by below call stack.
    
    When key install started, the current key flag is set KEY_FLAG_TAINTED in
    ieee80211_pairwise_rekey(), and then mac80211 wait key install complete by
    lower layer device driver. Meanwhile ieee80211_tx_h_select_key() will return
    TX_DROP for the M4 in step 12 below, and then ieee80211_free_txskb() called
    by ieee80211_tx_dequeue(), so the M4 will not send and free, then the rekey
    process failed becaue AP not receive M4. Please see details in steps below.
    
    There are a interval between KEY_FLAG_TAINTED set for current key flag and
    install key complete by lower layer device driver, the KEY_FLAG_TAINTED is
    set in this interval, all packet including M4 will be dropped in this
    interval, the interval is step 8~13 as below.
    
    issue steps:
          TX thread                 install key thread
    1.   stop_queue                      -idle-
    2.   sending M4                      -idle-
    3.   M4 pending                      -idle-
    4.     -idle-                  starting install key from wpa_supplicant
    5.     -idle-                  =>ieee80211_key_replace()
    6.     -idle-                  =>ieee80211_pairwise_rekey() and set
                                     currently key->flags |= KEY_FLAG_TAINTED
    7.     -idle-                  =>ieee80211_key_enable_hw_accel()
    8.     -idle-                  =>drv_set_key() and waiting key install
                                     complete from lower layer device driver
    9.   wake_queue                     -waiting state-
    10.  re-sending M4                  -waiting state-
    11.  =>ieee80211_tx_h_select_key()  -waiting state-
    12.  drop M4 by KEY_FLAG_TAINTED    -waiting state-
    13.    -idle-                   install key complete with success/fail
                                      success: clear flag KEY_FLAG_TAINTED
                                      fail: start disconnect
    
    Hence add check in step 11 above to allow the EAPOL send out in the
    interval. If lower layer device driver use the old key/cipher to encrypt
    the M4, then AP received/decrypt M4 correctly, after M4 send out, lower
    layer device driver install the new key/cipher to hardware and return
    success.
    
    If lower layer device driver use new key/cipher to send the M4, then AP
    will/should drop the M4, then it is same result with this issue, AP will/
    should kick out station as well as this issue.
    
    issue log:
    kworker/u16:4-5238  [000]  6456.108926: stop_queue:           phy1 queue:0, reason:0
    wpa_supplicant-961  [003]  6456.119737: rdev_tx_control_port: wiphy_name=phy1 name=wlan0 ifindex=6 dest=ARRAY[9e, 05, 31, 20, 9b, d0] proto=36488 unencrypted=0
    wpa_supplicant-961  [003]  6456.119839: rdev_return_int_cookie: phy1, returned 0, cookie: 504
    wpa_supplicant-961  [003]  6456.120287: rdev_add_key:         phy1, netdev:wlan0(6), key_index: 0, mode: 0, pairwise: true, mac addr: 9e:05:31:20:9b:d0
    wpa_supplicant-961  [003]  6456.120453: drv_set_key:          phy1 vif:wlan0(2) sta:9e:05:31:20:9b:d0 cipher:0xfac04, flags=0x9, keyidx=0, hw_key_idx=0
    kworker/u16:9-3829  [001]  6456.168240: wake_queue:           phy1 queue:0, reason:0
    kworker/u16:9-3829  [001]  6456.168255: drv_wake_tx_queue:    phy1 vif:wlan0(2) sta:9e:05:31:20:9b:d0 ac:0 tid:7
    kworker/u16:9-3829  [001]  6456.168305: cfg80211_control_port_tx_status: wdev(1), cookie: 504, ack: false
    wpa_supplicant-961  [003]  6459.167982: drv_return_int:       phy1 - -110
    
    issue call stack:
    nl80211_frame_tx_status+0x230/0x340 [cfg80211]
    cfg80211_control_port_tx_status+0x1c/0x28 [cfg80211]
    ieee80211_report_used_skb+0x374/0x3e8 [mac80211]
    ieee80211_free_txskb+0x24/0x40 [mac80211]
    ieee80211_tx_dequeue+0x644/0x954 [mac80211]
    ath10k_mac_tx_push_txq+0xac/0x238 [ath10k_core]
    ath10k_mac_op_wake_tx_queue+0xac/0xe0 [ath10k_core]
    drv_wake_tx_queue+0x80/0x168 [mac80211]
    __ieee80211_wake_txqs+0xe8/0x1c8 [mac80211]
    _ieee80211_wake_txqs+0xb4/0x120 [mac80211]
    ieee80211_wake_txqs+0x48/0x80 [mac80211]
    tasklet_action_common+0xa8/0x254
    tasklet_action+0x2c/0x38
    __do_softirq+0xdc/0x384
    
    Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
    Link: https://lore.kernel.org/r/20230801064751.25803-1-quic_wgong@quicinc.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9ce7d438366431e5688be98d8680336ce0a0f8d
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Sep 15 14:42:27 2023 -0700

    Bluetooth: hci_core: Fix build warnings
    
    [ Upstream commit dcda165706b9fbfd685898d46a6749d7d397e0c0 ]
    
    This fixes the following warnings:
    
    net/bluetooth/hci_core.c: In function ‘hci_register_dev’:
    net/bluetooth/hci_core.c:2620:54: warning: ‘%d’ directive output may
    be truncated writing between 1 and 10 bytes into a region of size 5
    [-Wformat-truncation=]
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |                                                      ^~
    net/bluetooth/hci_core.c:2620:50: note: directive argument in the range
    [0, 2147483647]
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |                                                  ^~~~~~~
    net/bluetooth/hci_core.c:2620:9: note: ‘snprintf’ output between 5 and
    14 bytes into a destination of size 8
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ed66df6c512c59ef64a7bcbbbf5059139cfa50d
Author: Ying Hsu <yinghsu@chromium.org>
Date:   Thu Sep 7 04:39:34 2023 +0000

    Bluetooth: Avoid redundant authentication
    
    [ Upstream commit 1d8e801422d66e4b8c7b187c52196bef94eed887 ]
    
    While executing the Android 13 CTS Verifier Secure Server test on a
    ChromeOS device, it was observed that the Bluetooth host initiates
    authentication for an RFCOMM connection after SSP completes.
    When this happens, some Intel Bluetooth controllers, like AC9560, would
    disconnect with "Connection Rejected due to Security Reasons (0x0e)".
    
    Historically, BlueZ did not mandate this authentication while an
    authenticated combination key was already in use for the connection.
    This behavior was changed since commit 7b5a9241b780
    ("Bluetooth: Introduce requirements for security level 4").
    So, this patch addresses the aforementioned disconnection issue by
    restoring the previous behavior.
    
    Signed-off-by: Ying Hsu <yinghsu@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 010d49c773ba80bbe3600b98d7a3350201fd6913
Author: Ma Ke <make_ruc2021@163.com>
Date:   Mon Sep 18 10:40:59 2023 +0800

    HID: holtek: fix slab-out-of-bounds Write in holtek_kbd_input_event
    
    [ Upstream commit ffe3b7837a2bb421df84d0177481db9f52c93a71 ]
    
    There is a slab-out-of-bounds Write bug in hid-holtek-kbd driver.
    The problem is the driver assumes the device must have an input
    but some malicious devices violate this assumption.
    
    Fix this by checking hid_device's input is non-empty before its usage.
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a4b644a565920de20d44cdb14407f957fccbd70
Author: Clément Léger <cleger@rivosinc.com>
Date:   Fri Sep 29 21:16:37 2023 +0200

    tracing: relax trace_event_eval_update() execution with cond_resched()
    
    [ Upstream commit 23cce5f25491968b23fb9c399bbfb25f13870cd9 ]
    
    When kernel is compiled without preemption, the eval_map_work_func()
    (which calls trace_event_eval_update()) will not be preempted up to its
    complete execution. This can actually cause a problem since if another
    CPU call stop_machine(), the call will have to wait for the
    eval_map_work_func() function to finish executing in the workqueue
    before being able to be scheduled. This problem was observe on a SMP
    system at boot time, when the CPU calling the initcalls executed
    clocksource_done_booting() which in the end calls stop_machine(). We
    observed a 1 second delay because one CPU was executing
    eval_map_work_func() and was not preempted by the stop_machine() task.
    
    Adding a call to cond_resched() in trace_event_eval_update() allows
    other tasks to be executed and thus continue working asynchronously
    like before without blocking any pending task at boot time.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230929191637.416931-1-cleger@rivosinc.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Clément Léger <cleger@rivosinc.com>
    Tested-by: Atish Patra <atishp@rivosinc.com>
    Reviewed-by: Atish Patra <atishp@rivosinc.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7201d0b100d68cac940344b7045e7016b2b784f8
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Tue Sep 12 09:08:40 2023 +0900

    ata: libata-eh: Fix compilation warning in ata_eh_link_report()
    
    [ Upstream commit 49728bdc702391902a473b9393f1620eea32acb0 ]
    
    The 6 bytes length of the tries_buf string in ata_eh_link_report() is
    too short and results in a gcc compilation warning with W-!:
    
    drivers/ata/libata-eh.c: In function ‘ata_eh_link_report’:
    drivers/ata/libata-eh.c:2371:59: warning: ‘%d’ directive output may be truncated writing between 1 and 11 bytes into a region of size 4 [-Wformat-truncation=]
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                                                           ^~
    drivers/ata/libata-eh.c:2371:56: note: directive argument in the range [-2147483648, 4]
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                                                        ^~~~~~
    drivers/ata/libata-eh.c:2371:17: note: ‘snprintf’ output between 4 and 14 bytes into a destination of size 6
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     2372 |                          ap->eh_tries);
          |                          ~~~~~~~~~~~~~
    
    Avoid this warning by increasing the string size to 16B.
    
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56ff7abffc0a38ead07869a24d6802be25fea53c
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Tue Sep 26 10:29:14 2023 +0000

    gpio: timberdale: Fix potential deadlock on &tgpio->lock
    
    [ Upstream commit 9e8bc2dda5a7a8e2babc9975f4b11c9a6196e490 ]
    
    As timbgpio_irq_enable()/timbgpio_irq_disable() callback could be
    executed under irq context, it could introduce double locks on
    &tgpio->lock if it preempts other execution units requiring
    the same locks.
    
    timbgpio_gpio_set()
    --> timbgpio_update_bit()
    --> spin_lock(&tgpio->lock)
    <interrupt>
       --> timbgpio_irq_disable()
       --> spin_lock_irqsave(&tgpio->lock)
    
    This flaw was found by an experimental static analysis tool I am
    developing for irq-related deadlock.
    
    To prevent the potential deadlock, the patch uses spin_lock_irqsave()
    on &tgpio->lock inside timbgpio_gpio_set() to prevent the possible
    deadlock scenario.
    
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d03732a4b735822f3a6f8cd11f1eb88efd27ce55
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Sep 13 09:33:12 2023 -0400

    overlayfs: set ctime when setting mtime and atime
    
    [ Upstream commit 03dbab3bba5f009d053635c729d1244f2c8bad38 ]
    
    Nathan reported that he was seeing the new warning in
    setattr_copy_mgtime pop when starting podman containers. Overlayfs is
    trying to set the atime and mtime via notify_change without also
    setting the ctime.
    
    POSIX states that when the atime and mtime are updated via utimes() that
    we must also update the ctime to the current time. The situation with
    overlayfs copy-up is analogies, so add ATTR_CTIME to the bitmask.
    notify_change will fill in the value.
    
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Christian Brauner <brauner@kernel.org>
    Acked-by: Amir Goldstein <amir73il@gmail.com>
    Message-Id: <20230913-ctime-v1-1-c6bc509cbc27@kernel.org>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a72a4432ce9c4a60b36c93e3949aa52cc563f4bd
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Sep 23 23:54:06 2023 +0200

    i2c: mux: Avoid potential false error message in i2c_mux_add_adapter
    
    [ Upstream commit b13e59e74ff71a1004e0508107e91e9a84fd7388 ]
    
    I2C_CLASS_DEPRECATED is a flag and not an actual class.
    There's nothing speaking against both, parent and child, having
    I2C_CLASS_DEPRECATED set. Therefore exclude it from the check.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Acked-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40e5f42b6e106c5472b53574a7fa1ce516183171
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 5 12:15:24 2023 -0400

    btrfs: initialize start_slot in btrfs_log_prealloc_extents
    
    [ Upstream commit b4c639f699349880b7918b861e1bd360442ec450 ]
    
    Jens reported a compiler warning when using
    CONFIG_CC_OPTIMIZE_FOR_SIZE=y that looks like this
    
      fs/btrfs/tree-log.c: In function ‘btrfs_log_prealloc_extents’:
      fs/btrfs/tree-log.c:4828:23: warning: ‘start_slot’ may be used
      uninitialized [-Wmaybe-uninitialized]
       4828 |                 ret = copy_items(trans, inode, dst_path, path,
            |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       4829 |                                  start_slot, ins_nr, 1, 0);
            |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~
      fs/btrfs/tree-log.c:4725:13: note: ‘start_slot’ was declared here
       4725 |         int start_slot;
            |             ^~~~~~~~~~
    
    The compiler is incorrect, as we only use this code when ins_len > 0,
    and when ins_len > 0 we have start_slot properly initialized.  However
    we generally find the -Wmaybe-uninitialized warnings valuable, so
    initialize start_slot to get rid of the warning.
    
    Reported-by: Jens Axboe <axboe@kernel.dk>
    Tested-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 551541a0beb72c37c791cdfb8554598e215f798c
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 11 07:07:38 2023 +0300

    ARM: dts: ti: omap: Fix noisy serial with overrun-throttle-ms for mapphone
    
    [ Upstream commit 5ad37b5e30433afa7a5513e3eb61f69fa0976785 ]
    
    On mapphone devices we may get lots of noise on the micro-USB port in debug
    uart mode until the phy-cpcap-usb driver probes. Let's limit the noise by
    using overrun-throttle-ms.
    
    Note that there is also a related separate issue where the charger cable
    connected may cause random sysrq requests until phy-cpcap-usb probes that
    still remains.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e284049697643e44de07e1e8564e676e8c3f182
Author: Michal Schmidt <mschmidt@redhat.com>
Date:   Wed Oct 11 16:33:32 2023 -0700

    i40e: prevent crash on probe if hw registers have invalid values
    
    commit fc6f716a5069180c40a8c9b63631e97da34f64a3 upstream.
    
    The hardware provides the indexes of the first and the last available
    queue and VF. From the indexes, the driver calculates the numbers of
    queues and VFs. In theory, a faulty device might say the last index is
    smaller than the first index. In that case, the driver's calculation
    would underflow, it would attempt to write to non-existent registers
    outside of the ioremapped range and crash.
    
    I ran into this not by having a faulty device, but by an operator error.
    I accidentally ran a QE test meant for i40e devices on an ice device.
    The test used 'echo i40e > /sys/...ice PCI device.../driver_override',
    bound the driver to the device and crashed in one of the wr32 calls in
    i40e_clear_hw.
    
    Add checks to prevent underflows in the calculations of num_queues and
    num_vfs. With this fix, the wrong device probing reports errors and
    returns a failure without crashing.
    
    Fixes: 838d41d92a90 ("i40e: clear all queues and interrupts")
    Signed-off-by: Michal Schmidt <mschmidt@redhat.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Link: https://lore.kernel.org/r/20231011233334.336092-2-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7191c9a34b0700b606ed9a309a180c9295add43c
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Oct 16 20:28:10 2023 +0300

    net: usb: smsc95xx: Fix an error code in smsc95xx_reset()
    
    commit c53647a5df9e66dd9fedf240198e1fe50d88c286 upstream.
    
    Return a negative error code instead of success.
    
    Fixes: 2f7ca802bdae ("net: Add SMSC LAN9500 USB2.0 10/100 ethernet adapter driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/147927f0-9ada-45cc-81ff-75a19dd30b76@moroto.mountain
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8ba70e9b2b128a82b5da5f5c6bf5c27c97da33c
Author: Josua Mayer <josua@solid-run.com>
Date:   Wed Oct 4 18:39:28 2023 +0200

    net: rfkill: gpio: prevent value glitch during probe
    
    commit b2f750c3a80b285cd60c9346f8c96bd0a2a66cde upstream.
    
    When either reset- or shutdown-gpio have are initially deasserted,
    e.g. after a reboot - or when the hardware does not include pull-down,
    there will be a short toggle of both IOs to logical 0 and back to 1.
    
    It seems that the rfkill default is unblocked, so the driver should not
    glitch to output low during probe.
    It can lead e.g. to unexpected lte modem reconnect:
    
    [1] root@localhost:~# dmesg | grep "usb 2-1"
    [    2.136124] usb 2-1: new SuperSpeed USB device number 2 using xhci-hcd
    [   21.215278] usb 2-1: USB disconnect, device number 2
    [   28.833977] usb 2-1: new SuperSpeed USB device number 3 using xhci-hcd
    
    The glitch has been discovered on an arm64 board, now that device-tree
    support for the rfkill-gpio driver has finally appeared :).
    
    Change the flags for devm_gpiod_get_optional from GPIOD_OUT_LOW to
    GPIOD_ASIS to avoid any glitches.
    The rfkill driver will set the intended value during rfkill_sync_work.
    
    Fixes: 7176ba23f8b5 ("net: rfkill: add generic gpio rfkill driver")
    Signed-off-by: Josua Mayer <josua@solid-run.com>
    Link: https://lore.kernel.org/r/20231004163928.14609-1-josua@solid-run.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3e33e868d393488a76ed635521771bc98e4296a
Author: Ma Ke <make_ruc2021@163.com>
Date:   Sat Oct 7 08:59:53 2023 +0800

    net: ipv6: fix return value check in esp_remove_trailer
    
    commit dad4e491e30b20f4dc615c9da65d2142d703b5c2 upstream.
    
    In esp_remove_trailer(), to avoid an unexpected result returned by
    pskb_trim, we should check the return value of pskb_trim().
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c593b6e934eeb076cabc2dd169bb80c7dcfc1fdc
Author: Ma Ke <make_ruc2021@163.com>
Date:   Mon Oct 9 09:13:37 2023 +0800

    net: ipv4: fix return value check in esp_remove_trailer
    
    commit 513f61e2193350c7a345da98559b80f61aec4fa6 upstream.
    
    In esp_remove_trailer(), to avoid an unexpected result returned by
    pskb_trim, we should check the return value of pskb_trim().
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 849412179d78091d3fd4468c1d8bf97b282c74ad
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 8 18:13:59 2023 +0000

    xfrm: fix a data-race in xfrm_gen_index()
    
    commit 3e4bc23926b83c3c67e5f61ae8571602754131a6 upstream.
    
    xfrm_gen_index() mutual exclusion uses net->xfrm.xfrm_policy_lock.
    
    This means we must use a per-netns idx_generator variable,
    instead of a static one.
    Alternative would be to use an atomic variable.
    
    syzbot reported:
    
    BUG: KCSAN: data-race in xfrm_sk_policy_insert / xfrm_sk_policy_insert
    
    write to 0xffffffff87005938 of 4 bytes by task 29466 on cpu 0:
    xfrm_gen_index net/xfrm/xfrm_policy.c:1385 [inline]
    xfrm_sk_policy_insert+0x262/0x640 net/xfrm/xfrm_policy.c:2347
    xfrm_user_policy+0x413/0x540 net/xfrm/xfrm_state.c:2639
    do_ipv6_setsockopt+0x1317/0x2ce0 net/ipv6/ipv6_sockglue.c:943
    ipv6_setsockopt+0x57/0x130 net/ipv6/ipv6_sockglue.c:1012
    rawv6_setsockopt+0x21e/0x410 net/ipv6/raw.c:1054
    sock_common_setsockopt+0x61/0x70 net/core/sock.c:3697
    __sys_setsockopt+0x1c9/0x230 net/socket.c:2263
    __do_sys_setsockopt net/socket.c:2274 [inline]
    __se_sys_setsockopt net/socket.c:2271 [inline]
    __x64_sys_setsockopt+0x66/0x80 net/socket.c:2271
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffffffff87005938 of 4 bytes by task 29460 on cpu 1:
    xfrm_sk_policy_insert+0x13e/0x640
    xfrm_user_policy+0x413/0x540 net/xfrm/xfrm_state.c:2639
    do_ipv6_setsockopt+0x1317/0x2ce0 net/ipv6/ipv6_sockglue.c:943
    ipv6_setsockopt+0x57/0x130 net/ipv6/ipv6_sockglue.c:1012
    rawv6_setsockopt+0x21e/0x410 net/ipv6/raw.c:1054
    sock_common_setsockopt+0x61/0x70 net/core/sock.c:3697
    __sys_setsockopt+0x1c9/0x230 net/socket.c:2263
    __do_sys_setsockopt net/socket.c:2274 [inline]
    __se_sys_setsockopt net/socket.c:2271 [inline]
    __x64_sys_setsockopt+0x66/0x80 net/socket.c:2271
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x00006ad8 -> 0x00006b18
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 29460 Comm: syz-executor.1 Not tainted 6.5.0-rc5-syzkaller-00243-g9106536c1aa3 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023
    
    Fixes: 1121994c803f ("netns xfrm: policy insertion in netns")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e06cace23d09a39c309b748d36aa0c3c834eab48
Author: Florian Westphal <fw@strlen.de>
Date:   Sun Oct 8 19:36:53 2023 +0200

    netfilter: nft_payload: fix wrong mac header matching
    
    commit d351c1ea2de3e36e608fc355d8ae7d0cc80e6cd6 upstream.
    
    mcast packets get looped back to the local machine.
    Such packets have a 0-length mac header, we should treat
    this like "mac header not set" and abort rule evaluation.
    
    As-is, we just copy data from the network header instead.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Reported-by: Blažej Krajňák <krajnak@levonet.sk>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8d49412ea92189bc201fc1ec3b281e8b0914a24
Author: Jim Mattson <jmattson@google.com>
Date:   Mon Sep 25 17:34:47 2023 +0000

    KVM: x86: Mask LVTPC when handling a PMI
    
    commit a16eb25b09c02a54c1c1b449d4b6cfa2cf3f013a upstream.
    
    Per the SDM, "When the local APIC handles a performance-monitoring
    counters interrupt, it automatically sets the mask flag in the LVT
    performance counter register."  Add this behavior to KVM's local APIC
    emulation.
    
    Failure to mask the LVTPC entry results in spurious PMIs, e.g. when
    running Linux as a guest, PMI handlers that do a "late_ack" spew a large
    number of "dazed and confused" spurious NMI warnings.
    
    Fixes: f5132b01386b ("KVM: Expose a version 2 architectural PMU to a guests")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Tested-by: Mingwei Zhang <mizhang@google.com>
    Signed-off-by: Mingwei Zhang <mizhang@google.com>
    Link: https://lore.kernel.org/r/20230925173448.3518223-3-mizhang@google.com
    [sean: massage changelog, correct Fixes]
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf0ebdb947f565162c129d8280cd0a4dc1da0edc
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Oct 6 10:21:04 2023 +0200

    regmap: fix NULL deref on lookup
    
    commit c6df843348d6b71ea986266c12831cb60c2cf325 upstream.
    
    Not all regmaps have a name so make sure to check for that to avoid
    dereferencing a NULL pointer when dev_get_regmap() is used to lookup a
    named regmap.
    
    Fixes: e84861fec32d ("regmap: dev_get_regmap_match(): fix string comparison")
    Cc: stable@vger.kernel.org      # 5.8
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231006082104.16707-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b2edf089df3a69f0072c6e71563394c5a94e62e
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Oct 13 20:41:29 2023 +0200

    nfc: nci: fix possible NULL pointer dereference in send_acknowledge()
    
    commit 7937609cd387246aed994e81aa4fa951358fba41 upstream.
    
    Handle memory allocation failure from nci_skb_alloc() (calling
    alloc_skb()) to avoid possible NULL pointer dereference.
    
    Reported-by: 黄思聪 <huangsicong@iie.ac.cn>
    Fixes: 391d8a2da787 ("NFC: Add NCI over SPI receive")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20231013184129.18738-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a44158aae9f94e575c149113bab09de452ee4e98
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 9 22:31:31 2023 +0200

    Bluetooth: avoid memcmp() out of bounds warning
    
    commit 9d1a3c74746428102d55371fbf74b484733937d9 upstream.
    
    bacmp() is a wrapper around memcpy(), which contain compile-time
    checks for buffer overflow. Since the hci_conn_request_evt() also calls
    bt_dev_dbg() with an implicit NULL pointer check, the compiler is now
    aware of a case where 'hdev' is NULL and treats this as meaning that
    zero bytes are available:
    
    In file included from net/bluetooth/hci_event.c:32:
    In function 'bacmp',
        inlined from 'hci_conn_request_evt' at net/bluetooth/hci_event.c:3276:7:
    include/net/bluetooth/bluetooth.h:364:16: error: 'memcmp' specified bound 6 exceeds source size 0 [-Werror=stringop-overread]
      364 |         return memcmp(ba1, ba2, sizeof(bdaddr_t));
          |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Add another NULL pointer check before the bacmp() to ensure the compiler
    understands the code flow enough to not warn about it.  Since the patch
    that introduced the warning is marked for stable backports, this one
    should also go that way to avoid introducing build regressions.
    
    Fixes: 1ffc6f8cc332 ("Bluetooth: Reject connection with the device which has same BD_ADDR")
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Lee, Chun-Yi" <jlee@suse.com>
    Cc: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b9bf29c33917ed73cb05e81713de1d72d728cce
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Oct 5 14:12:19 2023 -0700

    Bluetooth: hci_event: Fix coding style
    
    commit 35d91d95a0cd61ebb90e0246dc917fd25e519b8c upstream.
    
    This fixes the following code style problem:
    
    ERROR: that open brace { should be on the previous line
    +       if (!bacmp(&hdev->bdaddr, &ev->bdaddr))
    +       {
    
    Fixes: 1ffc6f8cc332 ("Bluetooth: Reject connection with the device which has same BD_ADDR")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae40f2c3f3a7dc77095f33d41ebccf166aba960b
Author: Arkadiusz Bokowy <arkadiusz.bokowy@gmail.com>
Date:   Wed Sep 20 17:30:07 2023 +0200

    Bluetooth: vhci: Fix race when opening vhci device
    
    commit 92d4abd66f7080075793970fc8f241239e58a9e7 upstream.
    
    When the vhci device is opened in the two-step way, i.e.: open device
    then write a vendor packet with requested controller type, the device
    shall respond with a vendor packet which includes HCI index of created
    interface.
    
    When the virtual HCI is created, the host sends a reset request to the
    controller. This request is processed by the vhci_send_frame() function.
    However, this request is send by a different thread, so it might happen
    that this HCI request will be received before the vendor response is
    queued in the read queue. This results in the HCI vendor response and
    HCI reset request inversion in the read queue which leads to improper
    behavior of btvirt:
    
    > dmesg
    [1754256.640122] Bluetooth: MGMT ver 1.22
    [1754263.023806] Bluetooth: MGMT ver 1.22
    [1754265.043775] Bluetooth: hci1: Opcode 0x c03 failed: -110
    
    In order to synchronize vhci two-step open/setup process with virtual
    HCI initialization, this patch adds internal lock when queuing data in
    the vhci_send_frame() function.
    
    Signed-off-by: Arkadiusz Bokowy <arkadiusz.bokowy@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c7f9fda663a1b31a61744ffc456bdb89c4efc7f
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Wed Oct 4 20:42:24 2023 +0800

    Bluetooth: Fix a refcnt underflow problem for hci_conn
    
    commit c7f59461f5a78994613afc112cdd73688aef9076 upstream.
    
    Syzbot reports a warning as follows:
    
    WARNING: CPU: 1 PID: 26946 at net/bluetooth/hci_conn.c:619
    hci_conn_timeout+0x122/0x210 net/bluetooth/hci_conn.c:619
    ...
    Call Trace:
     <TASK>
     process_one_work+0x884/0x15c0 kernel/workqueue.c:2630
     process_scheduled_works kernel/workqueue.c:2703 [inline]
     worker_thread+0x8b9/0x1290 kernel/workqueue.c:2784
     kthread+0x33c/0x440 kernel/kthread.c:388
     ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147
     ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
     </TASK>
    
    It is because the HCI_EV_SIMPLE_PAIR_COMPLETE event handler drops
    hci_conn directly without check Simple Pairing whether be enabled. But
    the Simple Pairing process can only be used if both sides have the
    support enabled in the host stack.
    
    Add hci_conn_ssp_enabled() for hci_conn in HCI_EV_IO_CAPA_REQUEST and
    HCI_EV_SIMPLE_PAIR_COMPLETE event handlers to fix the problem.
    
    Fixes: 0493684ed239 ("[Bluetooth] Disable disconnect timer during Simple Pairing")
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b84272be807ce58b7079aad5dafebc67f0bbeaf8
Author: Lee, Chun-Yi <jlee@suse.com>
Date:   Sun Oct 1 16:59:58 2023 +0800

    Bluetooth: Reject connection with the device which has same BD_ADDR
    
    commit 1ffc6f8cc33268731fcf9629fc4438f6db1191fc upstream.
    
    This change is used to relieve CVE-2020-26555. The description of
    the CVE:
    
    Bluetooth legacy BR/EDR PIN code pairing in Bluetooth Core Specification
    1.0B through 5.2 may permit an unauthenticated nearby device to spoof
    the BD_ADDR of the peer device to complete pairing without knowledge
    of the PIN. [1]
    
    The detail of this attack is in IEEE paper:
    BlueMirror: Reflections on Bluetooth Pairing and Provisioning Protocols
    [2]
    
    It's a reflection attack. The paper mentioned that attacker can induce
    the attacked target to generate null link key (zero key) without PIN
    code. In BR/EDR, the key generation is actually handled in the controller
    which is below HCI.
    
    A condition of this attack is that attacker should change the
    BR_ADDR of his hacking device (Host B) to equal to the BR_ADDR with
    the target device being attacked (Host A).
    
    Thus, we reject the connection with device which has same BD_ADDR
    both on HCI_Create_Connection and HCI_Connection_Request to prevent
    the attack. A similar implementation also shows in btstack project.
    [3][4]
    
    Cc: stable@vger.kernel.org
    Link: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26555 [1]
    Link: https://ieeexplore.ieee.org/abstract/document/9474325/authors#authors [2]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L3523 [3]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L7297 [4]
    Signed-off-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 589d288c5f92baccbaad3d33e62f5ac41889b5a8
Author: Lee, Chun-Yi <jlee@suse.com>
Date:   Sun Oct 1 16:59:31 2023 +0800

    Bluetooth: hci_event: Ignore NULL link key
    
    commit 33155c4aae5260475def6f7438e4e35564f4f3ba upstream.
    
    This change is used to relieve CVE-2020-26555. The description of the
    CVE:
    
    Bluetooth legacy BR/EDR PIN code pairing in Bluetooth Core Specification
    1.0B through 5.2 may permit an unauthenticated nearby device to spoof
    the BD_ADDR of the peer device to complete pairing without knowledge
    of the PIN. [1]
    
    The detail of this attack is in IEEE paper:
    BlueMirror: Reflections on Bluetooth Pairing and Provisioning Protocols
    [2]
    
    It's a reflection attack. The paper mentioned that attacker can induce
    the attacked target to generate null link key (zero key) without PIN
    code. In BR/EDR, the key generation is actually handled in the controller
    which is below HCI.
    
    Thus, we can ignore null link key in the handler of "Link Key Notification
    event" to relieve the attack. A similar implementation also shows in
    btstack project. [3]
    
    v3: Drop the connection when null link key be detected.
    
    v2:
    - Used Link: tag instead of Closes:
    - Used bt_dev_dbg instead of BT_DBG
    - Added Fixes: tag
    
    Cc: stable@vger.kernel.org
    Fixes: 55ed8ca10f35 ("Bluetooth: Implement link key handling for the management interface")
    Link: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26555 [1]
    Link: https://ieeexplore.ieee.org/abstract/document/9474325/authors#authors [2]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L3722 [3]
    Signed-off-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c64e4dca9aefd232b17ac4c779b608b286654e81
Author: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
Date:   Wed Aug 30 12:04:18 2023 +0200

    usb: hub: Guard against accesses to uninitialized BOS descriptors
    
    commit f74a7afc224acd5e922c7a2e52244d891bbe44ee upstream.
    
    Many functions in drivers/usb/core/hub.c and drivers/usb/core/hub.h
    access fields inside udev->bos without checking if it was allocated and
    initialized. If usb_get_bos_descriptor() fails for whatever
    reason, udev->bos will be NULL and those accesses will result in a
    crash:
    
    BUG: kernel NULL pointer dereference, address: 0000000000000018
    PGD 0 P4D 0
    Oops: 0000 [#1] PREEMPT SMP NOPTI
    CPU: 5 PID: 17818 Comm: kworker/5:1 Tainted: G W 5.15.108-18910-gab0e1cb584e1 #1 <HASH:1f9e 1>
    Hardware name: Google Kindred/Kindred, BIOS Google_Kindred.12672.413.0 02/03/2021
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:hub_port_reset+0x193/0x788
    Code: 89 f7 e8 20 f7 15 00 48 8b 43 08 80 b8 96 03 00 00 03 75 36 0f b7 88 92 03 00 00 81 f9 10 03 00 00 72 27 48 8b 80 a8 03 00 00 <48> 83 78 18 00 74 19 48 89 df 48 8b 75 b0 ba 02 00 00 00 4c 89 e9
    RSP: 0018:ffffab740c53fcf8 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: ffffa1bc5f678000 RCX: 0000000000000310
    RDX: fffffffffffffdff RSI: 0000000000000286 RDI: ffffa1be9655b840
    RBP: ffffab740c53fd70 R08: 00001b7d5edaa20c R09: ffffffffb005e060
    R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000
    R13: ffffab740c53fd3e R14: 0000000000000032 R15: 0000000000000000
    FS: 0000000000000000(0000) GS:ffffa1be96540000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000018 CR3: 000000022e80c005 CR4: 00000000003706e0
    Call Trace:
    hub_event+0x73f/0x156e
    ? hub_activate+0x5b7/0x68f
    process_one_work+0x1a2/0x487
    worker_thread+0x11a/0x288
    kthread+0x13a/0x152
    ? process_one_work+0x487/0x487
    ? kthread_associate_blkcg+0x70/0x70
    ret_from_fork+0x1f/0x30
    
    Fall back to a default behavior if the BOS descriptor isn't accessible
    and skip all the functionalities that depend on it: LPM support checks,
    Super Speed capabilitiy checks, U1/U2 states setup.
    
    Signed-off-by: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230830100418.1952143-1-ricardo.canuelo@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24416e5f4da30f4578d7111688fe7e2050a785d2
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Sat Oct 7 12:57:02 2023 +0200

    x86/cpu: Fix AMD erratum #1485 on Zen4-based CPUs
    
    commit f454b18e07f518bcd0c05af17a2239138bff52de upstream.
    
    Fix erratum #1485 on Zen4 parts where running with STIBP disabled can
    cause an #UD exception. The performance impact of the fix is negligible.
    
    Reported-by: René Rebe <rene@exactcode.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: René Rebe <rene@exactcode.de>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/D99589F4-BC5D-430B-87B2-72C20370CF57@exactcode.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bdf93a2f5459f944b416b188178ca4a92fd206f
Author: Krishna Kurapati <quic_kriskura@quicinc.com>
Date:   Wed Sep 27 16:28:58 2023 +0530

    usb: gadget: ncm: Handle decoding of multiple NTB's in unwrap call
    
    commit 427694cfaafa565a3db5c5ea71df6bc095dca92f upstream.
    
    When NCM is used with hosts like Windows PC, it is observed that there are
    multiple NTB's contained in one usb request giveback. Since the driver
    unwraps the obtained request data assuming only one NTB is present, we
    loose the subsequent NTB's present resulting in data loss.
    
    Fix this by checking the parsed block length with the obtained data
    length in usb request and continue parsing after the last byte of current
    NTB.
    
    Cc: stable@vger.kernel.org
    Fixes: 9f6ce4240a2b ("usb: gadget: f_ncm.c added")
    Signed-off-by: Krishna Kurapati <quic_kriskura@quicinc.com>
    Reviewed-by: Maciej Żenczykowski <maze@google.com>
    Link: https://lore.kernel.org/r/20230927105858.12950-1-quic_kriskura@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e89179977f945b771d4912809d0d7aa436d1732
Author: Piyush Mehta <piyush.mehta@amd.com>
Date:   Fri Sep 29 17:45:14 2023 +0530

    usb: gadget: udc-xilinx: replace memcpy with memcpy_toio
    
    commit 3061b6491f491197a35e14e49f805d661b02acd4 upstream.
    
    For ARM processor, unaligned access to device memory is not allowed.
    Method memcpy does not take care of alignment.
    
    USB detection failure with the unalingned address of memory, with
    below kernel crash. To fix the unalingned address kernel panic,
    replace memcpy with memcpy_toio method.
    
    Kernel crash:
    Unable to handle kernel paging request at virtual address ffff80000c05008a
    Mem abort info:
      ESR = 0x96000061
      EC = 0x25: DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
      FSC = 0x21: alignment fault
    Data abort info:
      ISV = 0, ISS = 0x00000061
      CM = 0, WnR = 1
    swapper pgtable: 4k pages, 48-bit VAs, pgdp=000000000143b000
    [ffff80000c05008a] pgd=100000087ffff003, p4d=100000087ffff003,
    pud=100000087fffe003, pmd=1000000800bcc003, pte=00680000a0010713
    Internal error: Oops: 96000061 [#1] SMP
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.15.19-xilinx-v2022.1 #1
    Hardware name: ZynqMP ZCU102 Rev1.0 (DT)
    pstate: 200000c5 (nzCv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : __memcpy+0x30/0x260
    lr : __xudc_ep0_queue+0xf0/0x110
    sp : ffff800008003d00
    x29: ffff800008003d00 x28: ffff800009474e80 x27: 00000000000000a0
    x26: 0000000000000100 x25: 0000000000000012 x24: ffff000800bc8080
    x23: 0000000000000001 x22: 0000000000000012 x21: ffff000800bc8080
    x20: 0000000000000012 x19: ffff000800bc8080 x18: 0000000000000000
    x17: ffff800876482000 x16: ffff800008004000 x15: 0000000000004000
    x14: 00001f09785d0400 x13: 0103020101005567 x12: 0781400000000200
    x11: 00000000c5672a10 x10: 00000000000008d0 x9 : ffff800009463cf0
    x8 : ffff8000094757b0 x7 : 0201010055670781 x6 : 4000000002000112
    x5 : ffff80000c05009a x4 : ffff000800a15012 x3 : ffff00080362ad80
    x2 : 0000000000000012 x1 : ffff000800a15000 x0 : ffff80000c050088
    Call trace:
     __memcpy+0x30/0x260
     xudc_ep0_queue+0x3c/0x60
     usb_ep_queue+0x38/0x44
     composite_ep0_queue.constprop.0+0x2c/0xc0
     composite_setup+0x8d0/0x185c
     configfs_composite_setup+0x74/0xb0
     xudc_irq+0x570/0xa40
     __handle_irq_event_percpu+0x58/0x170
     handle_irq_event+0x60/0x120
     handle_fasteoi_irq+0xc0/0x220
     handle_domain_irq+0x60/0x90
     gic_handle_irq+0x74/0xa0
     call_on_irq_stack+0x2c/0x60
     do_interrupt_handler+0x54/0x60
     el1_interrupt+0x30/0x50
     el1h_64_irq_handler+0x18/0x24
     el1h_64_irq+0x78/0x7c
     arch_cpu_idle+0x18/0x2c
     do_idle+0xdc/0x15c
     cpu_startup_entry+0x28/0x60
     rest_init+0xc8/0xe0
     arch_call_rest_init+0x10/0x1c
     start_kernel+0x694/0x6d4
     __primary_switched+0xa4/0xac
    
    Fixes: 1f7c51660034 ("usb: gadget: Add xilinx usb2 device support")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/all/202209020044.CX2PfZzM-lkp@intel.com/
    Cc: stable@vger.kernel.org
    Signed-off-by: Piyush Mehta <piyush.mehta@amd.com>
    Link: https://lore.kernel.org/r/20230929121514.13475-1-piyush.mehta@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2112acef3e5a446183e339b1588280e0a271f10
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Sep 20 11:09:10 2023 -0700

    pinctrl: avoid unsafe code pattern in find_pinctrl()
    
    commit c153a4edff6ab01370fcac8e46f9c89cca1060c2 upstream.
    
    The code in find_pinctrl() takes a mutex and traverses a list of pinctrl
    structures. Later the caller bumps up reference count on the found
    structure. Such pattern is not safe as pinctrl that was found may get
    deleted before the caller gets around to increasing the reference count.
    
    Fix this by taking the reference count in find_pinctrl(), while it still
    holds the mutex.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Link: https://lore.kernel.org/r/ZQs1RgTKg6VJqmPs@google.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96f0bf8abaec0511ced9d619b33db12b3cfc1ba3
Author: Michal Koutný <mkoutny@suse.com>
Date:   Mon Oct 9 15:58:11 2023 +0200

    cgroup: Remove duplicates in cgroup v1 tasks file
    
    commit 1ca0b605150501b7dc59f3016271da4eb3e96fce upstream.
    
    One PID may appear multiple times in a preloaded pidlist.
    (Possibly due to PID recycling but we have reports of the same
    task_struct appearing with different PIDs, thus possibly involving
    transfer of PID via de_thread().)
    
    Because v1 seq_file iterator uses PIDs as position, it leads to
    a message:
    > seq_file: buggy .next function kernfs_seq_next did not update position index
    
    Conservative and quick fix consists of removing duplicates from `tasks`
    file (as opposed to removing pidlists altogether). It doesn't affect
    correctness (it's sufficient to show a PID once), performance impact
    would be hidden by unconditional sorting of the pidlist already in place
    (asymptotically).
    
    Link: https://lore.kernel.org/r/20230823174804.23632-1-mkoutny@suse.com/
    Suggested-by: Firo Yang <firo.yang@suse.com>
    Signed-off-by: Michal Koutný <mkoutny@suse.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe1d40fa6d8d75af3ce441cb70b8ef9eb0fc6cf1
Author: Matthias Berndt <matthias_berndt@gmx.de>
Date:   Fri Oct 13 15:04:36 2023 -0700

    Input: xpad - add PXN V900 support
    
    commit a65cd7ef5a864bdbbe037267c327786b7759d4c6 upstream.
    
    Add VID and PID to the xpad_device table to allow driver to use the PXN
    V900 steering wheel, which is XTYPE_XBOX360 compatible in xinput mode.
    
    Signed-off-by: Matthias Berndt <matthias_berndt@gmx.de>
    Link: https://lore.kernel.org/r/4932699.31r3eYUQgx@fedora
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8677575c4f39d65bf0d719b5d20e8042e550ccb9
Author: Javier Carrasco <javier.carrasco.cruz@gmail.com>
Date:   Fri Oct 13 20:11:33 2023 -0700

    Input: powermate - fix use-after-free in powermate_config_complete
    
    commit 5c15c60e7be615f05a45cd905093a54b11f461bc upstream.
    
    syzbot has found a use-after-free bug [1] in the powermate driver. This
    happens when the device is disconnected, which leads to a memory free from
    the powermate_device struct.  When an asynchronous control message
    completes after the kfree and its callback is invoked, the lock does not
    exist anymore and hence the bug.
    
    Use usb_kill_urb() on pm->config to cancel any in-progress requests upon
    device disconnection.
    
    [1] https://syzkaller.appspot.com/bug?extid=0434ac83f907a1dbdd1e
    
    Signed-off-by: Javier Carrasco <javier.carrasco.cruz@gmail.com>
    Reported-by: syzbot+0434ac83f907a1dbdd1e@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20230916-topic-powermate_use_after_free-v3-1-64412b81a7a2@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e329f6f77baf3ae6a9998c88deb06a0b27caaf95
Author: Xiubo Li <xiubli@redhat.com>
Date:   Wed Sep 6 14:22:07 2023 +0800

    ceph: fix incorrect revoked caps assert in ceph_fill_file_size()
    
    commit 15c0a870dc44ed14e01efbdd319d232234ee639f upstream.
    
    When truncating the inode the MDS will acquire the xlock for the
    ifile Locker, which will revoke the 'Frwsxl' caps from the clients.
    But when the client just releases and flushes the 'Fw' caps to MDS,
    for exmaple, and once the MDS receives the caps flushing msg it
    just thought the revocation has finished. Then the MDS will continue
    truncating the inode and then issued the truncate notification to
    all the clients. While just before the clients receives the cap
    flushing ack they receive the truncation notification, the clients
    will detecte that the 'issued | dirty' is still holding the 'Fw'
    caps.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/56693
    Fixes: b0d7c2231015 ("ceph: introduce i_truncate_mutex")
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Milind Changire <mchangir@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11a2d7642c60f808621978c09670cf5a5823b69f
Author: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
Date:   Wed Sep 6 11:49:26 2023 +0000

    mcb: remove is_added flag from mcb_device struct
    
    commit 0f28ada1fbf0054557cddcdb93ad17f767105208 upstream.
    
    When calling mcb_bus_add_devices(), both mcb devices and the mcb
    bus will attempt to attach a device to a driver because they share
    the same bus_type. This causes an issue when trying to cast the
    container of the device to mcb_device struct using to_mcb_device(),
    leading to a wrong cast when the mcb_bus is added. A crash occurs
    when freing the ida resources as the bus numbering of mcb_bus gets
    confused with the is_added flag on the mcb_device struct.
    
    The only reason for this cast was to keep an is_added flag on the
    mcb_device struct that does not seem necessary. The function
    device_attach() handles already bound devices and the mcb subsystem
    does nothing special with this is_added flag so remove it completely.
    
    Fixes: 18d288198099 ("mcb: Correctly initialize the bus's device")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Co-developed-by: Jose Javier Rodriguez Barbarin <JoseJavier.Rodriguez@duagon.com>
    Signed-off-by: Jose Javier Rodriguez Barbarin <JoseJavier.Rodriguez@duagon.com>
    Link: https://lore.kernel.org/r/20230906114901.63174-2-JoseJavier.Rodriguez@duagon.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b01b931ceffc9890f3f7decae8821d723c9da93
Author: Alexander Zangerl <az@breathe-safe.com>
Date:   Wed Sep 20 10:01:10 2023 +1000

    iio: pressure: ms5611: ms5611_prom_is_valid false negative bug
    
    commit fd39d9668f2ce9f4b05ad55e8c8d80c098073e0b upstream.
    
    The ms5611 driver falsely rejects lots of MS5607-02BA03-50 chips
    with "PROM integrity check failed" because it doesn't accept a prom crc
    value of zero as legitimate.
    
    According to the datasheet for this chip (and the manufacturer's
    application note about the PROM CRC), none of the possible values for the
    CRC are excluded - but the current code in ms5611_prom_is_valid() ends with
    
    return crc_orig != 0x0000 && crc == crc_orig
    
    Discussed with the driver author (Tomasz Duszynski) and he indicated that
    at that time (2015) he was dealing with some faulty chip samples which
    returned blank data under some circumstances and/or followed example code
    which indicated CRC zero being bad.
    
    As far as I can tell this exception should not be applied anymore; We've
    got a few hundred custom boards here with this chip where large numbers
    of the prom have a legitimate CRC value 0, and do work fine, but which the
    current driver code wrongly rejects.
    
    Signed-off-by: Alexander Zangerl <az@breathe-safe.com>
    Fixes: c0644160a8b5 ("iio: pressure: add support for MS5611 pressure and temperature sensor")
    Link: https://lore.kernel.org/r/2535-1695168070.831792@Ze3y.dhYT.s3fx
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8ce1f8aeac994654fc2e7ec9cfbae15aee6b72a
Author: Phil Elwell <phil@raspberrypi.com>
Date:   Fri Aug 11 16:58:29 2023 +0100

    iio: pressure: bmp280: Fix NULL pointer exception
    
    commit 85dfb43bf69281adb1f345dfd9a39faf2e5a718d upstream.
    
    The bmp085 EOC IRQ support is optional, but the driver's common probe
    function queries the IRQ properties whether or not it exists, which
    can trigger a NULL pointer exception. Avoid any exception by making
    the query conditional on the possession of a valid IRQ.
    
    Fixes: aae953949651 ("iio: pressure: bmp280: add support for BMP085 EOC interrupt")
    Signed-off-by: Phil Elwell <phil@raspberrypi.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20230811155829.51208-1-phil@raspberrypi.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d350bd2543a9e9f6861b3ed81642d21e42de158
Author: Xingxing Luo <xingxing.luo@unisoc.com>
Date:   Fri Sep 22 15:59:29 2023 +0800

    usb: musb: Modify the "HWVers" register address
    
    commit 6658a62e1ddf726483cb2d8bf45ea3f9bd533074 upstream.
    
    musb HWVers rgister address is not 0x69, if we operate the
    wrong address 0x69, it will cause a kernel crash, because
    there is no register corresponding to this address in the
    additional control register of musb. In fact, HWVers has
    been defined in musb_register.h, and the name is
    "MUSB_HWVERS", so We need to use this macro instead of 0x69.
    
    Fixes: c2365ce5d5a0 ("usb: musb: replace hard coded registers with defines")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xingxing Luo <xingxing.luo@unisoc.com>
    Link: https://lore.kernel.org/r/20230922075929.31074-1-xingxing.luo@unisoc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9480fa536592dbe3173440ade43d5bc955cb08ed
Author: Xingxing Luo <xingxing.luo@unisoc.com>
Date:   Tue Sep 19 11:30:55 2023 +0800

    usb: musb: Get the musb_qh poniter after musb_giveback
    
    commit 33d7e37232155aadebe4145dcc592f00dabd7a2b upstream.
    
    When multiple threads are performing USB transmission, musb->lock will be
    unlocked when musb_giveback is executed. At this time, qh may be released
    in the dequeue process in other threads, resulting in a wild pointer, so
    it needs to be here get qh again, and judge whether qh is NULL, and when
    dequeue, you need to set qh to NULL.
    
    Fixes: dbac5d07d13e ("usb: musb: host: don't start next rx urb if current one failed")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xingxing Luo <xingxing.luo@unisoc.com>
    Link: https://lore.kernel.org/r/20230919033055.14085-1-xingxing.luo@unisoc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b53b00bf71c6784adb529741dd0010d0abf3f27d
Author: Javier Carrasco <javier.carrasco.cruz@gmail.com>
Date:   Tue Oct 10 00:26:14 2023 +0200

    net: usb: dm9601: fix uninitialized variable use in dm9601_mdio_read
    
    commit 8f8abb863fa5a4cc18955c6a0e17af0ded3e4a76 upstream.
    
    syzbot has found an uninit-value bug triggered by the dm9601 driver [1].
    
    This error happens because the variable res is not updated if the call
    to dm_read_shared_word returns an error. In this particular case -EPROTO
    was returned and res stayed uninitialized.
    
    This can be avoided by checking the return value of dm_read_shared_word
    and propagating the error if the read operation failed.
    
    [1] https://syzkaller.appspot.com/bug?extid=1f53a30781af65d2c955
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Javier Carrasco <javier.carrasco.cruz@gmail.com>
    Reported-and-tested-by: syzbot+1f53a30781af65d2c955@syzkaller.appspotmail.com
    Acked-by: Peter Korsgaard <peter@korsgaard.com>
    Fixes: d0374f4f9c35cdfbee0 ("USB: Davicom DM9601 usbnet driver")
    Link: https://lore.kernel.org/r/20231009-topic-dm9601_uninit_mdio_read-v2-1-f2fe39739b6c@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 784dab62b5364e352c8cca7eba893af819f2ea79
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Fri Sep 15 17:31:05 2023 +0300

    usb: xhci: xhci-ring: Use sysdev for mapping bounce buffer
    
    commit 41a43013d2366db5b88b42bbcd8e8f040b6ccf21 upstream.
    
    As mentioned in:
      commit 474ed23a6257 ("xhci: align the last trb before link if it is
    easily splittable.")
    
    A bounce buffer is utilized for ensuring that transfers that span across
    ring segments are aligned to the EP's max packet size.  However, the device
    that is used to map the DMA buffer to is currently using the XHCI HCD,
    which does not carry any DMA operations in certain configrations.
    Migration to using the sysdev entry was introduced for DWC3 based
    implementations where the IOMMU operations are present.
    
    Replace the reference to the controller device to sysdev instead.  This
    allows the bounce buffer to be properly mapped to any implementations that
    have an IOMMU involved.
    
    cc: stable@vger.kernel.org
    Fixes: 4c39d4b949d3 ("usb: xhci: use bus->sysdev for DMA configuration")
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20230915143108.1532163-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 803e2ea7fbf4a035360b56109f6005010ec59b76
Author: Waiman Long <longman@redhat.com>
Date:   Tue Oct 10 22:48:42 2023 -0400

    workqueue: Override implicit ordered attribute in workqueue_apply_unbound_cpumask()
    
    [ Upstream commit ca10d851b9ad0338c19e8e3089e24d565ebfffd7 ]
    
    Commit 5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1
    to be ordered") enabled implicit ordered attribute to be added to
    WQ_UNBOUND workqueues with max_active of 1. This prevented the changing
    of attributes to these workqueues leading to fix commit 0a94efb5acbb
    ("workqueue: implicit ordered attribute should be overridable").
    
    However, workqueue_apply_unbound_cpumask() was not updated at that time.
    So sysfs changes to wq_unbound_cpumask has no effect on WQ_UNBOUND
    workqueues with implicit ordered attribute. Since not all WQ_UNBOUND
    workqueues are visible on sysfs, we are not able to make all the
    necessary cpumask changes even if we iterates all the workqueue cpumasks
    in sysfs and changing them one by one.
    
    Fix this problem by applying the corresponding change made
    to apply_workqueue_attrs_locked() in the fix commit to
    workqueue_apply_unbound_cpumask().
    
    Fixes: 5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be ordered")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c231a247a1d1628e41fa1eefd1a5307c41c5f53
Author: Jeremy Cline <jeremy@jcline.org>
Date:   Mon Oct 9 16:00:54 2023 -0400

    nfc: nci: assert requested protocol is valid
    
    [ Upstream commit 354a6e707e29cb0c007176ee5b8db8be7bd2dee0 ]
    
    The protocol is used in a bit mask to determine if the protocol is
    supported. Assert the provided protocol is less than the maximum
    defined so it doesn't potentially perform a shift-out-of-bounds and
    provide a clearer error for undefined protocols vs unsupported ones.
    
    Fixes: 6a2968aaf50c ("NFC: basic NCI protocol implementation")
    Reported-and-tested-by: syzbot+0839b78e119aae1fec78@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=0839b78e119aae1fec78
    Signed-off-by: Jeremy Cline <jeremy@jcline.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20231009200054.82557-1-jeremy@jcline.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 209971d45e9b55a8c674f73fa4f781fb6be76e44
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Oct 6 15:53:09 2023 +0300

    ixgbe: fix crash with empty VF macvlan list
    
    [ Upstream commit 7b5add9af567c44e12196107f0fe106e194034fd ]
    
    The adapter->vf_mvs.l list needs to be initialized even if the list is
    empty.  Otherwise it will lead to crashes.
    
    Fixes: a1cbb15c1397 ("ixgbe: Add macvlan support for VF")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Link: https://lore.kernel.org/r/ZSADNdIw8zFx1xw2@kadam
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76421ab2428462997869a696dc79a664370bd0c1
Author: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
Date:   Tue Sep 5 18:02:03 2023 +0800

    drm/vmwgfx: fix typo of sizeof argument
    
    [ Upstream commit 39465cac283702a7d4a507a558db81898029c6d3 ]
    
    Since size of 'header' pointer and '*header' structure is equal on 64-bit
    machines issue probably didn't cause any wrong behavior. But anyway,
    fixing typo is required.
    
    Fixes: 7a73ba7469cb ("drm/vmwgfx: Use TTM handles instead of SIDs as user-space surface handles.")
    Co-developed-by: Ivanov Mikhail <ivanov.mikhail1@huawei-partners.com>
    Signed-off-by: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
    Reviewed-by: Zack Rusin <zackr@vmware.com>
    Signed-off-by: Zack Rusin <zackr@vmware.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230905100203.1716731-1-konstantin.meskhidze@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28b68cba378e3e50a4082b65f262bc4f2c7c2add
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Oct 7 11:30:49 2023 +0800

    ieee802154: ca8210: Fix a potential UAF in ca8210_probe
    
    [ Upstream commit f990874b1c98fe8e57ee9385669f501822979258 ]
    
    If of_clk_add_provider() fails in ca8210_register_ext_clock(),
    it calls clk_unregister() to release priv->clk and returns an
    error. However, the caller ca8210_probe() then calls ca8210_remove(),
    where priv->clk is freed again in ca8210_unregister_ext_clock(). In
    this case, a use-after-free may happen in the second time we call
    clk_unregister().
    
    Fix this by removing the first clk_unregister(). Also, priv->clk could
    be an error code on failure of clk_register_fixed_rate(). Use
    IS_ERR_OR_NULL to catch this case in ca8210_unregister_ext_clock().
    
    Fixes: ded845a781a5 ("ieee802154: Add CA8210 IEEE 802.15.4 device driver")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Message-ID: <20231007033049.22353-1-dinghao.liu@zju.edu.cn>
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02208dbd010ad731dfc459ccdde67b738d5ae8b7
Author: Martin Fuzzey <martin.fuzzey@flowbird.group>
Date:   Tue Oct 10 15:19:28 2023 +0200

    drm: etvnaviv: fix bad backport leading to warning
    
    When updating from 5.4.219 -> 5.4.256 I started getting a runtime warning:
    
    [   58.229857] ------------[ cut here ]------------
    [   58.234599] WARNING: CPU: 1 PID: 565 at drivers/gpu/drm/drm_gem.c:1020 drm_gem_object_put+0x90/0x98
    [   58.249935] Modules linked in: qmi_wwan cdc_wdm option usb_wwan smsc95xx rsi_usb rsi_91x btrsi ci_hdrc_imx ci_hdrc
    [   58.260499] ueventd: modprobe usb:v2F8Fp7FFFd0200dc00dsc00dp00icFEisc01ip02in00 done
    [   58.288877] CPU: 1 PID: 565 Comm: android.display Not tainted 5.4.256pkn-5.4-bsp-snapshot-svn-7423 #2195
    [   58.288883] Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
    [   58.288888] Backtrace:
    [   58.288912] [<c010e784>] (dump_backtrace) from [<c010eaa4>] (show_stack+0x20/0x24)
    [   58.288920]  r7:00000000 r6:60010013 r5:00000000 r4:c14cd224
    [   58.328337] [<c010ea84>] (show_stack) from [<c0cf9ca4>] (dump_stack+0xe8/0x120)
    [   58.335661] [<c0cf9bbc>] (dump_stack) from [<c012efd0>] (__warn+0xd4/0xe8)
    [   58.342542]  r10:eda54000 r9:c06ca53c r8:000003fc r7:00000009 r6:c111ed54 r5:00000000
    [   58.350374]  r4:00000000 r3:76cf564a
    [   58.353957] [<c012eefc>] (__warn) from [<c012f094>] (warn_slowpath_fmt+0xb0/0xc0)
    [   58.361445]  r9:00000009 r8:c06ca53c r7:000003fc r6:c111ed54 r5:c1406048 r4:00000000
    [   58.369198] [<c012efe8>] (warn_slowpath_fmt) from [<c06ca53c>] (drm_gem_object_put+0x90/0x98)
    [   58.377728]  r9:edda7e40 r8:edd39360 r7:ad16e000 r6:edda7eb0 r5:00000000 r4:edaa3200
    [   58.385524] [<c06ca4ac>] (drm_gem_object_put) from [<bf0125a8>] (etnaviv_gem_prime_mmap_obj+0x34/0x3c [etnaviv])
    [   58.395704]  r5:00000000 r4:edaa3200
    [   58.399334] [<bf012574>] (etnaviv_gem_prime_mmap_obj [etnaviv]) from [<bf0143a0>] (etnaviv_gem_mmap+0x3c/0x60 [etnaviv])
    [   58.410205]  r5:edd39360 r4:00000000
    [   58.413816] [<bf014364>] (etnaviv_gem_mmap [etnaviv]) from [<c02c5e08>] (mmap_region+0x37c/0x67c)
    [   58.422689]  r5:ad16d000 r4:edda7eb8
    [   58.426272] [<c02c5a8c>] (mmap_region) from [<c02c6528>] (do_mmap+0x420/0x544)
    [   58.433500]  r10:000000fb r9:000fffff r8:ffffffff r7:00000001 r6:00000003 r5:00000001
    [   58.441330]  r4:00001000
    [   58.443876] [<c02c6108>] (do_mmap) from [<c02a5b2c>] (vm_mmap_pgoff+0xd0/0x100)
    [   58.451190]  r10:eda54040 r9:00001000 r8:00000000 r7:00000000 r6:00000003 r5:c1406048
    [   58.459020]  r4:edb8ff24
    [   58.461561] [<c02a5a5c>] (vm_mmap_pgoff) from [<c02c3ac8>] (ksys_mmap_pgoff+0xdc/0x10c)
    [   58.469570]  r10:000000c0 r9:edb8e000 r8:ed650b40 r7:00000003 r6:00001000 r5:00000000
    [   58.477400]  r4:00000001
    [   58.479941] [<c02c39ec>] (ksys_mmap_pgoff) from [<c02c3b24>] (sys_mmap_pgoff+0x2c/0x34)
    [   58.487949]  r8:c0101224 r7:000000c0 r6:951ece38 r5:00010001 r4:00000065
    [   58.494658] [<c02c3af8>] (sys_mmap_pgoff) from [<c0101000>] (ret_fast_syscall+0x0/0x28)
    
    It looks like this was a backporting error for the upstream patch
    963b2e8c428f "drm/etnaviv: fix reference leak when mmaping imported buffer"
    
    In the 5.4 kernel there are 2 variants of the object put function:
            drm_gem_object_put() [which requires lock to be held]
            drm_gem_object_put_unlocked() [which requires lock to be NOT held]
    
    In later kernels [5.14+] this has gone and there just drm_gem_object_put()
    which requires lock to be NOT held.
    
    So the memory leak pach, which added a call to drm_gem_object_put() was correct
    on newer kernels but wrong on 5.4 and earlier ones.
    
    So switch back to using the _unlocked variant for old kernels.
    This should only be applied to the 5.4, 4.19 and 4.14 longterm branches;
    mainline and more recent longterms already have the correct fix.
    
    Signed-off-by: Martin Fuzzey <martin.fuzzey@flowbird.group>
    Fixes: 0c6df5364798 "drm/etnaviv: fix reference leak when mmaping imported buffer" [5.4.y]
    Fixes: 0838cb217a52 "drm/etnaviv: fix reference leak when mmaping imported buffer" [4.19.y]
    Fixes: 1c9544fbc979 "drm/etnaviv: fix reference leak when mmaping imported buffer" [4.14.y]
    Reviewed-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca0c4cc1d215dc22ab0e738c9f017c650f3183f5
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Oct 5 20:26:38 2023 +0200

    HID: logitech-hidpp: Fix kernel crash on receiver USB disconnect
    
    commit dac501397b9d81e4782232c39f94f4307b137452 upstream.
    
    hidpp_connect_event() has *four* time-of-check vs time-of-use (TOCTOU)
    races when it races with itself.
    
    hidpp_connect_event() primarily runs from a workqueue but it also runs
    on probe() and if a "device-connected" packet is received by the hw
    when the thread running hidpp_connect_event() from probe() is waiting on
    the hw, then a second thread running hidpp_connect_event() will be
    started from the workqueue.
    
    This opens the following races (note the below code is simplified):
    
    1. Retrieving + printing the protocol (harmless race):
    
            if (!hidpp->protocol_major) {
                    hidpp_root_get_protocol_version()
                    hidpp->protocol_major = response.rap.params[0];
            }
    
    We can actually see this race hit in the dmesg in the abrt output
    attached to rhbz#2227968:
    
    [ 3064.624215] logitech-hidpp-device 0003:046D:4071.0049: HID++ 4.5 device connected.
    [ 3064.658184] logitech-hidpp-device 0003:046D:4071.0049: HID++ 4.5 device connected.
    
    Testing with extra logging added has shown that after this the 2 threads
    take turn grabbing the hw access mutex (send_mutex) so they ping-pong
    through all the other TOCTOU cases managing to hit all of them:
    
    2. Updating the name to the HIDPP name (harmless race):
    
            if (hidpp->name == hdev->name) {
                    ...
                    hidpp->name = new_name;
            }
    
    3. Initializing the power_supply class for the battery (problematic!):
    
    hidpp_initialize_battery()
    {
            if (hidpp->battery.ps)
                    return 0;
    
            probe_battery(); /* Blocks, threads take turns executing this */
    
            hidpp->battery.desc.properties =
                    devm_kmemdup(dev, hidpp_battery_props, cnt, GFP_KERNEL);
    
            hidpp->battery.ps =
                    devm_power_supply_register(&hidpp->hid_dev->dev,
                                               &hidpp->battery.desc, cfg);
    }
    
    4. Creating delayed input_device (potentially problematic):
    
            if (hidpp->delayed_input)
                    return;
    
            hidpp->delayed_input = hidpp_allocate_input(hdev);
    
    The really big problem here is 3. Hitting the race leads to the following
    sequence:
    
            hidpp->battery.desc.properties =
                    devm_kmemdup(dev, hidpp_battery_props, cnt, GFP_KERNEL);
    
            hidpp->battery.ps =
                    devm_power_supply_register(&hidpp->hid_dev->dev,
                                               &hidpp->battery.desc, cfg);
    
            ...
    
            hidpp->battery.desc.properties =
                    devm_kmemdup(dev, hidpp_battery_props, cnt, GFP_KERNEL);
    
            hidpp->battery.ps =
                    devm_power_supply_register(&hidpp->hid_dev->dev,
                                               &hidpp->battery.desc, cfg);
    
    So now we have registered 2 power supplies for the same battery,
    which looks a bit weird from userspace's pov but this is not even
    the really big problem.
    
    Notice how:
    
    1. This is all devm-maganaged
    2. The hidpp->battery.desc struct is shared between the 2 power supplies
    3. hidpp->battery.desc.properties points to the result from the second
       devm_kmemdup()
    
    This causes a use after free scenario on USB disconnect of the receiver:
    1. The last registered power supply class device gets unregistered
    2. The memory from the last devm_kmemdup() call gets freed,
       hidpp->battery.desc.properties now points to freed memory
    3. The first registered power supply class device gets unregistered,
       this involves sending a remove uevent to userspace which invokes
       power_supply_uevent() to fill the uevent data
    4. power_supply_uevent() uses hidpp->battery.desc.properties which
       now points to freed memory leading to backtraces like this one:
    
    Sep 22 20:01:35 eric kernel: BUG: unable to handle page fault for address: ffffb2140e017f08
    ...
    Sep 22 20:01:35 eric kernel: Workqueue: usb_hub_wq hub_event
    Sep 22 20:01:35 eric kernel: RIP: 0010:power_supply_uevent+0xee/0x1d0
    ...
    Sep 22 20:01:35 eric kernel:  ? asm_exc_page_fault+0x26/0x30
    Sep 22 20:01:35 eric kernel:  ? power_supply_uevent+0xee/0x1d0
    Sep 22 20:01:35 eric kernel:  ? power_supply_uevent+0x10d/0x1d0
    Sep 22 20:01:35 eric kernel:  dev_uevent+0x10f/0x2d0
    Sep 22 20:01:35 eric kernel:  kobject_uevent_env+0x291/0x680
    Sep 22 20:01:35 eric kernel:  power_supply_unregister+0x8e/0xa0
    Sep 22 20:01:35 eric kernel:  release_nodes+0x3d/0xb0
    Sep 22 20:01:35 eric kernel:  devres_release_group+0xfc/0x130
    Sep 22 20:01:35 eric kernel:  hid_device_remove+0x56/0xa0
    Sep 22 20:01:35 eric kernel:  device_release_driver_internal+0x19f/0x200
    Sep 22 20:01:35 eric kernel:  bus_remove_device+0xc6/0x130
    Sep 22 20:01:35 eric kernel:  device_del+0x15c/0x3f0
    Sep 22 20:01:35 eric kernel:  ? __queue_work+0x1df/0x440
    Sep 22 20:01:35 eric kernel:  hid_destroy_device+0x4b/0x60
    Sep 22 20:01:35 eric kernel:  logi_dj_remove+0x9a/0x100 [hid_logitech_dj 5c91534a0ead2b65e04dd799a0437e3b99b21bc4]
    Sep 22 20:01:35 eric kernel:  hid_device_remove+0x44/0xa0
    Sep 22 20:01:35 eric kernel:  device_release_driver_internal+0x19f/0x200
    Sep 22 20:01:35 eric kernel:  bus_remove_device+0xc6/0x130
    Sep 22 20:01:35 eric kernel:  device_del+0x15c/0x3f0
    Sep 22 20:01:35 eric kernel:  ? __queue_work+0x1df/0x440
    Sep 22 20:01:35 eric kernel:  hid_destroy_device+0x4b/0x60
    Sep 22 20:01:35 eric kernel:  usbhid_disconnect+0x47/0x60 [usbhid 727dcc1c0b94e6b4418727a468398ac3bca492f3]
    Sep 22 20:01:35 eric kernel:  usb_unbind_interface+0x90/0x270
    Sep 22 20:01:35 eric kernel:  device_release_driver_internal+0x19f/0x200
    Sep 22 20:01:35 eric kernel:  bus_remove_device+0xc6/0x130
    Sep 22 20:01:35 eric kernel:  device_del+0x15c/0x3f0
    Sep 22 20:01:35 eric kernel:  ? kobject_put+0xa0/0x1d0
    Sep 22 20:01:35 eric kernel:  usb_disable_device+0xcd/0x1e0
    Sep 22 20:01:35 eric kernel:  usb_disconnect+0xde/0x2c0
    Sep 22 20:01:35 eric kernel:  usb_disconnect+0xc3/0x2c0
    Sep 22 20:01:35 eric kernel:  hub_event+0xe80/0x1c10
    
    There have been quite a few bug reports (see Link tags) about this crash.
    
    Fix all the TOCTOU issues, including the really bad power-supply related
    system crash on USB disconnect, by making probe() use the workqueue for
    running hidpp_connect_event() too, so that it can never run more then once.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2227221
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2227968
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2227968
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2242189
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217412#c58
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231005182638.3776-1-hdegoede@redhat.com
    Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a24ba12f4f20aa78f3dd4805dfb8cbeebdea1c99
Author: Artem Chernyshev <artem.chernyshev@red-soft.ru>
Date:   Tue Sep 5 15:40:48 2023 +0300

    RDMA/cxgb4: Check skb value for failure to allocate
    
    [ Upstream commit 8fb8a82086f5bda6893ea6557c5a458e4549c6d7 ]
    
    get_skb() can fail to allocate skb, so check it.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 5be78ee924ae ("RDMA/cxgb4: Fix LE hash collision bug for active open connection")
    Signed-off-by: Artem Chernyshev <artem.chernyshev@red-soft.ru>
    Link: https://lore.kernel.org/r/20230905124048.284165-1-artem.chernyshev@red-soft.ru
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

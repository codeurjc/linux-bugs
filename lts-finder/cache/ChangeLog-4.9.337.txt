commit 87a72e81764d2fc5411706c551462d61cdb97660
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 7 12:07:38 2023 +0100

    Linux 4.9.337
    
    Link: https://lore.kernel.org/r/20230105125334.727282894@linuxfoundation.org
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56836c32a4b5df796b19635b84a7ba4e202ffca9
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 12:59:27 2022 +0100

    ext4: initialize quota before expanding inode in setproject ioctl
    
    commit 1485f726c6dec1a1f85438f2962feaa3d585526f upstream.
    
    Make sure we initialize quotas before possibly expanding inode space
    (and thus maybe needing to allocate external xattr block) in
    ext4_ioctl_setproject(). This prevents not accounting the necessary
    block allocation.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221207115937.26601-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c4ef4429f95ffb07026bf0228c0b9fd9547b2d0
Author: Jan Kara <jack@suse.cz>
Date:   Mon Nov 21 14:09:29 2022 +0100

    ext4: avoid BUG_ON when creating xattrs
    
    commit b40ebaf63851b3a401b0dc9263843538f64f5ce6 upstream.
    
    Commit fb0a387dcdcd ("ext4: limit block allocations for indirect-block
    files to < 2^32") added code to try to allocate xattr block with 32-bit
    block number for indirect block based files on the grounds that these
    files cannot use larger block numbers. It also added BUG_ON when
    allocated block could not fit into 32 bits. This is however bogus
    reasoning because xattr block is stored in inode->i_file_acl and
    inode->i_file_acl_hi and as such even indirect block based files can
    happily use full 48 bits for xattr block number. The proper handling
    seems to be there basically since 64-bit block number support was added.
    So remove the bogus limitation and BUG_ON.
    
    Cc: Eric Sandeen <sandeen@redhat.com>
    Fixes: fb0a387dcdcd ("ext4: limit block allocations for indirect-block files to < 2^32")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221121130929.32031-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0735746664c0d494eeafaf62a729447f792eb32c
Author: Luís Henriques <lhenriques@suse.de>
Date:   Wed Nov 9 18:14:45 2022 +0000

    ext4: fix error code return to user-space in ext4_get_branch()
    
    commit 26d75a16af285a70863ba6a81f85d81e7e65da50 upstream.
    
    If a block is out of range in ext4_get_branch(), -ENOMEM will be returned
    to user-space.  Obviously, this error code isn't really useful.  This
    patch fixes it by making sure the right error code (-EFSCORRUPTED) is
    propagated to user-space.  EUCLEAN is more informative than ENOMEM.
    
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Link: https://lore.kernel.org/r/20221109181445.17843-1-lhenriques@suse.de
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67f6d5a4043f3db0c6bb0e14a0d97a7be8bfb8b5
Author: Ye Bin <yebin10@huawei.com>
Date:   Mon Nov 7 09:53:35 2022 +0800

    ext4: init quota for 'old.inode' in 'ext4_rename'
    
    commit fae381a3d79bb94aa2eb752170d47458d778b797 upstream.
    
    Syzbot found the following issue:
    ext4_parse_param: s_want_extra_isize=128
    ext4_inode_info_init: s_want_extra_isize=32
    ext4_rename: old.inode=ffff88823869a2c8 old.dir=ffff888238699828 new.inode=ffff88823869d7e8 new.dir=ffff888238699828
    __ext4_mark_inode_dirty: inode=ffff888238699828 ea_isize=32 want_ea_size=128
    __ext4_mark_inode_dirty: inode=ffff88823869a2c8 ea_isize=32 want_ea_size=128
    ext4_xattr_block_set: inode=ffff88823869a2c8
    ------------[ cut here ]------------
    WARNING: CPU: 13 PID: 2234 at fs/ext4/xattr.c:2070 ext4_xattr_block_set.cold+0x22/0x980
    Modules linked in:
    RIP: 0010:ext4_xattr_block_set.cold+0x22/0x980
    RSP: 0018:ffff888227d3f3b0 EFLAGS: 00010202
    RAX: 0000000000000001 RBX: ffff88823007a000 RCX: 0000000000000000
    RDX: 0000000000000a03 RSI: 0000000000000040 RDI: ffff888230078178
    RBP: 0000000000000000 R08: 000000000000002c R09: ffffed1075c7df8e
    R10: ffff8883ae3efc6b R11: ffffed1075c7df8d R12: 0000000000000000
    R13: ffff88823869a2c8 R14: ffff8881012e0460 R15: dffffc0000000000
    FS:  00007f350ac1f740(0000) GS:ffff8883ae200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f350a6ed6a0 CR3: 0000000237456000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     ? ext4_xattr_set_entry+0x3b7/0x2320
     ? ext4_xattr_block_set+0x0/0x2020
     ? ext4_xattr_set_entry+0x0/0x2320
     ? ext4_xattr_check_entries+0x77/0x310
     ? ext4_xattr_ibody_set+0x23b/0x340
     ext4_xattr_move_to_block+0x594/0x720
     ext4_expand_extra_isize_ea+0x59a/0x10f0
     __ext4_expand_extra_isize+0x278/0x3f0
     __ext4_mark_inode_dirty.cold+0x347/0x410
     ext4_rename+0xed3/0x174f
     vfs_rename+0x13a7/0x2510
     do_renameat2+0x55d/0x920
     __x64_sys_rename+0x7d/0xb0
     do_syscall_64+0x3b/0xa0
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    As 'ext4_rename' will modify 'old.inode' ctime and mark inode dirty,
    which may trigger expand 'extra_isize' and allocate block. If inode
    didn't init quota will lead to warning.  To solve above issue, init
    'old.inode' firstly in 'ext4_rename'.
    
    Reported-by: syzbot+98346927678ac3059c77@syzkaller.appspotmail.com
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221107015335.2524319-1-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e76ede9d2c9e0af4573342b56d7cdbf757c18084
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:10 2022 +0800

    ext4: fix bug_on in __es_tree_search caused by bad boot loader inode
    
    commit 991ed014de0840c5dc405b679168924afb2952ac upstream.
    
    We got a issue as fllows:
    ==================================================================
     kernel BUG at fs/ext4/extents_status.c:203!
     invalid opcode: 0000 [#1] PREEMPT SMP
     CPU: 1 PID: 945 Comm: cat Not tainted 6.0.0-next-20221007-dirty #349
     RIP: 0010:ext4_es_end.isra.0+0x34/0x42
     RSP: 0018:ffffc9000143b768 EFLAGS: 00010203
     RAX: 0000000000000000 RBX: ffff8881769cd0b8 RCX: 0000000000000000
     RDX: 0000000000000000 RSI: ffffffff8fc27cf7 RDI: 00000000ffffffff
     RBP: ffff8881769cd0bc R08: 0000000000000000 R09: ffffc9000143b5f8
     R10: 0000000000000001 R11: 0000000000000001 R12: ffff8881769cd0a0
     R13: ffff8881768e5668 R14: 00000000768e52f0 R15: 0000000000000000
     FS: 00007f359f7f05c0(0000)GS:ffff88842fd00000(0000)knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007f359f5a2000 CR3: 000000017130c000 CR4: 00000000000006e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      __es_tree_search.isra.0+0x6d/0xf5
      ext4_es_cache_extent+0xfa/0x230
      ext4_cache_extents+0xd2/0x110
      ext4_find_extent+0x5d5/0x8c0
      ext4_ext_map_blocks+0x9c/0x1d30
      ext4_map_blocks+0x431/0xa50
      ext4_mpage_readpages+0x48e/0xe40
      ext4_readahead+0x47/0x50
      read_pages+0x82/0x530
      page_cache_ra_unbounded+0x199/0x2a0
      do_page_cache_ra+0x47/0x70
      page_cache_ra_order+0x242/0x400
      ondemand_readahead+0x1e8/0x4b0
      page_cache_sync_ra+0xf4/0x110
      filemap_get_pages+0x131/0xb20
      filemap_read+0xda/0x4b0
      generic_file_read_iter+0x13a/0x250
      ext4_file_read_iter+0x59/0x1d0
      vfs_read+0x28f/0x460
      ksys_read+0x73/0x160
      __x64_sys_read+0x1e/0x30
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
    ==================================================================
    
    In the above issue, ioctl invokes the swap_inode_boot_loader function to
    swap inode<5> and inode<12>. However, inode<5> contain incorrect imode and
    disordered extents, and i_nlink is set to 1. The extents check for inode in
    the ext4_iget function can be bypassed bacause 5 is EXT4_BOOT_LOADER_INO.
    While links_count is set to 1, the extents are not initialized in
    swap_inode_boot_loader. After the ioctl command is executed successfully,
    the extents are swapped to inode<12>, in this case, run the `cat` command
    to view inode<12>. And Bug_ON is triggered due to the incorrect extents.
    
    When the boot loader inode is not initialized, its imode can be one of the
    following:
    1) the imode is a bad type, which is marked as bad_inode in ext4_iget and
       set to S_IFREG.
    2) the imode is good type but not S_IFREG.
    3) the imode is S_IFREG.
    
    The BUG_ON may be triggered by bypassing the check in cases 1 and 2.
    Therefore, when the boot loader inode is bad_inode or its imode is not
    S_IFREG, initialize the inode to avoid triggering the BUG.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-5-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd5639d36a5e4e42fd0fe05cc0b2ad9ddd3fca9d
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Oct 31 13:58:33 2022 +0800

    ext4: fix undefined behavior in bit shift for ext4_check_flag_values
    
    commit 3bf678a0f9c017c9ba7c581541dbc8453452a7ae upstream.
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in fs/ext4/ext4.h:591:2
    left shift of 1 by 31 places cannot be represented in type 'int'
    Call Trace:
     <TASK>
     dump_stack_lvl+0x7d/0xa5
     dump_stack+0x15/0x1b
     ubsan_epilogue+0xe/0x4e
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x20c
     ext4_init_fs+0x5a/0x277
     do_one_initcall+0x76/0x430
     kernel_init_freeable+0x3b3/0x422
     kernel_init+0x24/0x1e0
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: 9a4c80194713 ("ext4: ensure Inode flags consistency are checked at build time")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221031055833.3966222-1-cuigaosheng1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08cd26a91103b3b41e10a563100ab8c6f04ce5dc
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Aug 17 21:27:01 2022 +0800

    ext4: add inode table check in __ext4_get_inode_loc to aovid possible infinite loop
    
    commit eee22187b53611e173161e38f61de1c7ecbeb876 upstream.
    
    In do_writepages, if the value returned by ext4_writepages is "-ENOMEM"
    and "wbc->sync_mode == WB_SYNC_ALL", retry until the condition is not met.
    
    In __ext4_get_inode_loc, if the bh returned by sb_getblk is NULL,
    the function returns -ENOMEM.
    
    In __getblk_slow, if the return value of grow_buffers is less than 0,
    the function returns NULL.
    
    When the three processes are connected in series like the following stack,
    an infinite loop may occur:
    
    do_writepages                                   <--- keep retrying
     ext4_writepages
      mpage_map_and_submit_extent
       mpage_map_one_extent
        ext4_map_blocks
         ext4_ext_map_blocks
          ext4_ext_handle_unwritten_extents
           ext4_ext_convert_to_initialized
            ext4_split_extent
             ext4_split_extent_at
              __ext4_ext_dirty
               __ext4_mark_inode_dirty
                ext4_reserve_inode_write
                 ext4_get_inode_loc
                  __ext4_get_inode_loc              <--- return -ENOMEM
                   sb_getblk
                    __getblk_gfp
                     __getblk_slow                  <--- return NULL
                      grow_buffers
                       grow_dev_page                <--- return -ENXIO
                        ret = (block < end_block) ? 1 : -ENXIO;
    
    In this issue, bg_inode_table_hi is overwritten as an incorrect value.
    As a result, `block < end_block` cannot be met in grow_dev_page.
    Therefore, __ext4_get_inode_loc always returns '-ENOMEM' and do_writepages
    keeps retrying. As a result, the writeback process is in the D state due
    to an infinite loop.
    
    Add a check on inode table block in the __ext4_get_inode_loc function by
    referring to ext4_read_inode_bitmap to avoid this infinite loop.
    
    Cc: stable@kernel.org
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20220817132701.3015912-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee8d31836cbe7c26e207bfa0a4a726f0a25cfcf6
Author: Zack Rusin <zackr@vmware.com>
Date:   Tue Oct 25 23:19:35 2022 -0400

    drm/vmwgfx: Validate the box size for the snooped cursor
    
    commit 4cf949c7fafe21e085a4ee386bb2dade9067316e upstream.
    
    Invalid userspace dma surface copies could potentially overflow
    the memcpy from the surface to the snooped image leading to crashes.
    To fix it the dimensions of the copybox have to be validated
    against the expected size of the snooped cursor.
    
    Signed-off-by: Zack Rusin <zackr@vmware.com>
    Fixes: 2ac863719e51 ("vmwgfx: Snoop DMA transfers with non-covering sizes")
    Cc: <stable@vger.kernel.org> # v3.2+
    Reviewed-by: Michael Banack <banackm@vmware.com>
    Reviewed-by: Martin Krastev <krastevm@vmware.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026031936.1004280-1-zack@kde.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 080569aa3c505c591a5253f84f76a5a3735a11ea
Author: Simon Ser <contact@emersion.fr>
Date:   Mon Oct 17 15:32:01 2022 +0000

    drm/connector: send hotplug uevent on connector cleanup
    
    commit 6fdc2d490ea1369d17afd7e6eb66fecc5b7209bc upstream.
    
    A typical DP-MST unplug removes a KMS connector. However care must
    be taken to properly synchronize with user-space. The expected
    sequence of events is the following:
    
    1. The kernel notices that the DP-MST port is gone.
    2. The kernel marks the connector as disconnected, then sends a
       uevent to make user-space re-scan the connector list.
    3. User-space notices the connector goes from connected to disconnected,
       disables it.
    4. Kernel handles the IOCTL disabling the connector. On success,
       the very last reference to the struct drm_connector is dropped and
       drm_connector_cleanup() is called.
    5. The connector is removed from the list, and a uevent is sent to tell
       user-space that the connector disappeared.
    
    The very last step was missing. As a result, user-space thought the
    connector still existed and could try to disable it again. Since the
    kernel no longer knows about the connector, that would end up with
    EINVAL and confused user-space.
    
    Fix this by sending a hotplug uevent from drm_connector_cleanup().
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Cc: stable@vger.kernel.org
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Jonas Ådahl <jadahl@redhat.com>
    Tested-by: Jonas Ådahl <jadahl@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221017153150.60675-2-contact@emersion.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73adc289cd1e16727fc35c5239e66c40f5ef78c3
Author: Wang Weiyang <wangweiyang2@huawei.com>
Date:   Tue Oct 25 19:31:01 2022 +0800

    device_cgroup: Roll back to original exceptions after copy failure
    
    commit e68bfbd3b3c3a0ec3cf8c230996ad8cabe90322f upstream.
    
    When add the 'a *:* rwm' entry to devcgroup A's whitelist, at first A's
    exceptions will be cleaned and A's behavior is changed to
    DEVCG_DEFAULT_ALLOW. Then parent's exceptions will be copyed to A's
    whitelist. If copy failure occurs, just return leaving A to grant
    permissions to all devices. And A may grant more permissions than
    parent.
    
    Backup A's whitelist and recover original exceptions after copy
    failure.
    
    Cc: stable@vger.kernel.org
    Fixes: 4cef7299b478 ("device_cgroup: add proper checking when changing default behavior")
    Signed-off-by: Wang Weiyang <wangweiyang2@huawei.com>
    Reviewed-by: Aristeu Rozanski <aris@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6db0c32f39684c89c97bc1ba1c9c4249ca09e48
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 17 10:45:14 2022 +0800

    parisc: led: Fix potential null-ptr-deref in start_task()
    
    commit 41f563ab3c33698bdfc3403c7c2e6c94e73681e4 upstream.
    
    start_task() calls create_singlethread_workqueue() and not checked the
    ret value, which may return NULL. And a null-ptr-deref may happen:
    
    start_task()
        create_singlethread_workqueue() # failed, led_wq is NULL
        queue_delayed_work()
            queue_delayed_work_on()
                __queue_delayed_work()  # warning here, but continue
                    __queue_work()      # access wq->flags, null-ptr-deref
    
    Check the ret value and return -ENOMEM if it is NULL.
    
    Fixes: 3499495205a6 ("[PARISC] Use work queue in LED/LCD driver instead of tasklet.")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbac2c5be9fd7893eba6c36e86eec1f49e95e9c6
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Mon Sep 19 10:56:37 2022 -0500

    iommu/amd: Fix ivrs_acpihid cmdline parsing code
    
    commit 5f18e9f8868c6d4eae71678e7ebd4977b7d8c8cf upstream.
    
    The second (UID) strcmp in acpi_dev_hid_uid_match considers
    "0" and "00" different, which can prevent device registration.
    
    Have the AMD IOMMU driver's ivrs_acpihid parsing code remove
    any leading zeroes to make the UID strcmp succeed.  Now users
    can safely specify "AMDxxxxx:00" or "AMDxxxxx:0" and expect
    the same behaviour.
    
    Fixes: ca3bf5d47cec ("iommu/amd: Introduces ivrs_acpihid kernel parameter")
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Cc: stable@vger.kernel.org
    Cc: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
    Cc: Joerg Roedel <jroedel@suse.de>
    Link: https://lore.kernel.org/r/20220919155638.391481-1-kim.phillips@amd.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be61cadc7c18e2199892da11b09c34e050528be7
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Thu Oct 6 04:34:19 2022 +0000

    crypto: n2 - add missing hash statesize
    
    commit 76a4e874593543a2dff91d249c95bac728df2774 upstream.
    
    Add missing statesize to hash templates.
    This is mandatory otherwise no algorithms can be registered as the core
    requires statesize to be set.
    
    CC: stable@kernel.org # 4.3+
    Reported-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Tested-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Fixes: 0a625fd2abaa ("crypto: n2 - Add Niagara2 crypto driver")
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e411983bb1e839fd2eead5a53b7b888b845318e
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue Nov 8 17:05:59 2022 -0600

    PCI/sysfs: Fix double free in error path
    
    commit aa382ffa705bea9931ec92b6f3c70e1fdb372195 upstream.
    
    When pci_create_attr() fails, pci_remove_resource_files() is called which
    will iterate over the res_attr[_wc] arrays and frees every non NULL entry.
    To avoid a double free here set the array entry only after it's clear we
    successfully initialized it.
    
    Fixes: b562ec8f74e4 ("PCI: Don't leak memory if sysfs_create_bin_file() fails")
    Link: https://lore.kernel.org/r/20221007070735.GX986@pengutronix.de/
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f4dfff7dc7df794b8e8b93a84330a5cbaf62b37
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Fri Dec 16 22:03:41 2022 -0300

    cifs: fix confusing debug message
    
    commit a85ceafd41927e41a4103d228a993df7edd8823b upstream.
    
    Since rc was initialised to -ENOMEM in cifs_get_smb_ses(), when an
    existing smb session was found, free_xid() would be called and then
    print
    
      CIFS: fs/cifs/connect.c: Existing tcp session with server found
      CIFS: fs/cifs/connect.c: VFS: in cifs_get_smb_ses as Xid: 44 with uid: 0
      CIFS: fs/cifs/connect.c: Existing smb sess found (status=1)
      CIFS: fs/cifs/connect.c: VFS: leaving cifs_get_smb_ses (xid = 44) rc = -12
    
    Fix this by initialising rc to 0 and then let free_xid() print this
    instead
    
      CIFS: fs/cifs/connect.c: Existing tcp session with server found
      CIFS: fs/cifs/connect.c: VFS: in cifs_get_smb_ses as Xid: 14 with uid: 0
      CIFS: fs/cifs/connect.c: Existing smb sess found (status=1)
      CIFS: fs/cifs/connect.c: VFS: leaving cifs_get_smb_ses (xid = 14) rc = 0
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0588b12c418c3e4f927ced11f27b02ef4a5bfb07
Author: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
Date:   Tue Apr 26 06:29:19 2022 +0100

    media: dvb-core: Fix double free in dvb_register_device()
    
    commit 6b0d0477fce747d4137aa65856318b55fba72198 upstream.
    
    In function dvb_register_device() -> dvb_register_media_device() ->
    dvb_create_media_entity(), dvb->entity is allocated and initialized. If
    the initialization fails, it frees the dvb->entity, and return an error
    code. The caller takes the error code and handles the error by calling
    dvb_media_device_free(), which unregisters the entity and frees the
    field again if it is not NULL. As dvb->entity may not NULLed in
    dvb_create_media_entity() when the allocation of dvbdev->pad fails, a
    double free may occur. This may also cause an Use After free in
    media_device_unregister_entity().
    
    Fix this by storing NULL to dvb->entity when it is freed.
    
    Link: https://lore.kernel.org/linux-media/20220426052921.2088416-1-keitasuzuki.park@sslab.ics.keio.ac.jp
    Fixes: fcd5ce4b3936 ("media: dvb-core: fix a memory leak bug")
    Cc: stable@vger.kernel.org
    Cc: Wenwen Wang <wenwen@cs.uga.edu>
    Signed-off-by: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7854d3b9266a1e66b1d8669aba779b2c1ebfbe1b
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue Oct 11 20:00:12 2022 +0100

    ARM: 9256/1: NWFPE: avoid compiler-generated __aeabi_uldivmod
    
    commit 3220022038b9a3845eea762af85f1c5694b9f861 upstream.
    
    clang-15's ability to elide loops completely became more aggressive when
    it can deduce how a variable is being updated in a loop. Counting down
    one variable by an increment of another can be replaced by a modulo
    operation.
    
    For 64b variables on 32b ARM EABI targets, this can result in the
    compiler generating calls to __aeabi_uldivmod, which it does for a do
    while loop in float64_rem().
    
    For the kernel, we'd generally prefer that developers not open code 64b
    division via binary / operators and instead use the more explicit
    helpers from div64.h. On arm-linux-gnuabi targets, failure to do so can
    result in linkage failures due to undefined references to
    __aeabi_uldivmod().
    
    While developers can avoid open coding divisions on 64b variables, the
    compiler doesn't know that the Linux kernel has a partial implementation
    of a compiler runtime (--rtlib) to enforce this convention.
    
    It's also undecidable for the compiler whether the code in question
    would be faster to execute the loop vs elide it and do the 64b division.
    
    While I actively avoid using the internal -mllvm command line flags, I
    think we get better code than using barrier() here, which will force
    reloads+spills in the loop for all toolchains.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1666
    
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61d589b4023c34cf0909aad49f659f0c4bcf11aa
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Nov 29 19:30:09 2022 +0800

    tracing: Fix infinite loop in tracing_read_pipe on overflowed print_trace_line
    
    commit c1ac03af6ed45d05786c219d102f37eb44880f28 upstream.
    
    print_trace_line may overflow seq_file buffer. If the event is not
    consumed, the while loop keeps peeking this event, causing a infinite loop.
    
    Link: https://lkml.kernel.org/r/20221129113009.182425-1-yangjihong1@huawei.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 088b1e427dbba ("ftrace: pipe fixes")
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67a4e294c4cb1bbb3f836554ad614ce5aca109b4
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Nov 30 14:02:47 2022 -0500

    dm cache: set needs_check flag after aborting metadata
    
    commit 6b9973861cb2e96dcd0bb0f1baddc5c034207c5c upstream.
    
    Otherwise the commit that will be aborted will be associated with the
    metadata objects that will be torn down.  Must write needs_check flag
    to metadata with a reset block manager.
    
    Found through code-inspection (and compared against dm-thin.c).
    
    Cc: stable@vger.kernel.org
    Fixes: 028ae9f76f29 ("dm cache: add fail io mode and needs_check flag")
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 034cbc8d3b47a56acd89453c29632a9c117de09d
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:49 2022 +0800

    dm cache: Fix UAF in destroy()
    
    commit 6a459d8edbdbe7b24db42a5a9f21e6aa9e00c2aa upstream.
    
    Dm_cache also has the same UAF problem when dm_resume()
    and dm_destroy() are concurrent.
    
    Therefore, cancelling timer again in destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: c6b4fcbad044e ("dm: add cache target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ee059d06a5d3c15465959e0472993e80fbe4e81
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b35a22760aa5008d82533e59b0f0b5eb1b02d4e5
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Thu Dec 8 22:28:02 2022 +0800

    dm thin: Use last transaction's pmd->root when commit failed
    
    commit 7991dbff6849f67e823b7cc0c15e5a90b0549b9f upstream.
    
    Recently we found a softlock up problem in dm thin pool btree lookup
    code due to corrupted metadata:
    
     Kernel panic - not syncing: softlockup: hung tasks
     CPU: 7 PID: 2669225 Comm: kworker/u16:3
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
     Workqueue: dm-thin do_worker [dm_thin_pool]
     Call Trace:
       <IRQ>
       dump_stack+0x9c/0xd3
       panic+0x35d/0x6b9
       watchdog_timer_fn.cold+0x16/0x25
       __run_hrtimer+0xa2/0x2d0
       </IRQ>
       RIP: 0010:__relink_lru+0x102/0x220 [dm_bufio]
       __bufio_new+0x11f/0x4f0 [dm_bufio]
       new_read+0xa3/0x1e0 [dm_bufio]
       dm_bm_read_lock+0x33/0xd0 [dm_persistent_data]
       ro_step+0x63/0x100 [dm_persistent_data]
       btree_lookup_raw.constprop.0+0x44/0x220 [dm_persistent_data]
       dm_btree_lookup+0x16f/0x210 [dm_persistent_data]
       dm_thin_find_block+0x12c/0x210 [dm_thin_pool]
       __process_bio_read_only+0xc5/0x400 [dm_thin_pool]
       process_thin_deferred_bios+0x1a4/0x4a0 [dm_thin_pool]
       process_one_work+0x3c5/0x730
    
    Following process may generate a broken btree mixed with fresh and
    stale btree nodes, which could get dm thin trapped in an infinite loop
    while looking up data block:
     Transaction 1: pmd->root = A, A->B->C   // One path in btree
                    pmd->root = X, X->Y->Z   // Copy-up
     Transaction 2: X,Z is updated on disk, Y write failed.
                    // Commit failed, dm thin becomes read-only.
                    process_bio_read_only
                     dm_thin_find_block
                      __find_block
                       dm_btree_lookup(pmd->root)
    The pmd->root points to a broken btree, Y may contain stale node
    pointing to any block, for example X, which gets dm thin trapped into
    a dead loop while looking up Z.
    
    Fix this by setting pmd->root in __open_metadata(), so that dm thin
    will use the last transaction's pmd->root if commit failed.
    
    Fetch a reproducer in [Link].
    
    Linke: https://bugzilla.kernel.org/show_bug.cgi?id=216790
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0 ("dm: add thin provisioning target")
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Acked-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e237cacda8b4e976849e7bff9fe7dff0e968586
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Nov 30 13:26:32 2022 -0500

    dm cache: Fix ABBA deadlock between shrink_slab and dm_cache_metadata_abort
    
    commit 352b837a5541690d4f843819028cf2b8be83d424 upstream.
    
    Same ABBA deadlock pattern fixed in commit 4b60f452ec51 ("dm thin: Fix
    ABBA deadlock between shrink_slab and dm_pool_abort_metadata") to
    DM-cache's metadata.
    
    Reported-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: stable@vger.kernel.org
    Fixes: 028ae9f76f29 ("dm cache: add fail io mode and needs_check flag")
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4be6501204c604a3b7a9aeeb96531fb3ab3beb29
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Nov 8 13:37:55 2022 +0100

    ARM: ux500: do not directly dereference __iomem
    
    commit 65b0e307a1a9193571db12910f382f84195a3d29 upstream.
    
    Sparse reports that calling add_device_randomness() on `uid` is a
    violation of address spaces. And indeed the next usage uses readl()
    properly, but that was left out when passing it toadd_device_
    randomness(). So instead copy the whole thing to the stack first.
    
    Fixes: 4040d10a3d44 ("ARM: ux500: add DB serial number to entropy pool")
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/202210230819.loF90KDh-lkp@intel.com/
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Link: https://lore.kernel.org/r/20221108123755.207438-1-Jason@zx2c4.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d308bd0ba32942aead0b67474e40b89a23150cf
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Fri Dec 2 11:59:36 2022 -0500

    ktest.pl minconfig: Unset configs instead of just removing them
    
    commit ef784eebb56425eed6e9b16e7d47e5c00dcf9c38 upstream.
    
    After a full run of a make_min_config test, I noticed there were a lot of
    CONFIGs still enabled that really should not be. Looking at them, I
    noticed they were all defined as "default y". The issue is that the test
    simple removes the config and re-runs make oldconfig, which enables it
    again because it is set to default 'y'. Instead, explicitly disable the
    config with writing "# CONFIG_FOO is not set" to the file to keep it from
    being set again.
    
    With this change, one of my box's minconfigs went from 768 configs set,
    down to 521 configs set.
    
    Link: https://lkml.kernel.org/r/20221202115936.016fce23@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 0a05c769a9de5 ("ktest: Added config_bisect test type")
    Reviewed-by: John 'Warthog9' Hawley (VMware) <warthog9@eaglescrag.net>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fca7a1c33c4f7747a13806725d4b244b982c3d61
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Oct 24 17:23:43 2022 +0200

    media: stv0288: use explicitly signed char
    
    commit 7392134428c92a4cb541bd5c8f4f5c8d2e88364d upstream.
    
    With char becoming unsigned by default, and with `char` alone being
    ambiguous and based on architecture, signed chars need to be marked
    explicitly as such. Use `s8` and `u8` types here, since that's what
    surrounding code does. This fixes:
    
    drivers/media/dvb-frontends/stv0288.c:471 stv0288_set_frontend() warn: assigning (-9) to unsigned variable 'tm'
    drivers/media/dvb-frontends/stv0288.c:471 stv0288_set_frontend() warn: we never enter this loop
    
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: linux-media@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32d5af247d4de6a35769ca1d027480a37c28fd0c
Author: Deren Wu <deren.wu@mediatek.com>
Date:   Sun Dec 4 16:24:16 2022 +0800

    mmc: vub300: fix warning - do not call blocking ops when !TASK_RUNNING
    
    commit 4a44cd249604e29e7b90ae796d7692f5773dd348 upstream.
    
    vub300_enable_sdio_irq() works with mutex and need TASK_RUNNING here.
    Ensure that we mark current as TASK_RUNNING for sleepable context.
    
    [   77.554641] do not call blocking ops when !TASK_RUNNING; state=1 set at [<ffffffff92a72c1d>] sdio_irq_thread+0x17d/0x5b0
    [   77.554652] WARNING: CPU: 2 PID: 1983 at kernel/sched/core.c:9813 __might_sleep+0x116/0x160
    [   77.554905] CPU: 2 PID: 1983 Comm: ksdioirqd/mmc1 Tainted: G           OE      6.1.0-rc5 #1
    [   77.554910] Hardware name: Intel(R) Client Systems NUC8i7BEH/NUC8BEB, BIOS BECFL357.86A.0081.2020.0504.1834 05/04/2020
    [   77.554912] RIP: 0010:__might_sleep+0x116/0x160
    [   77.554920] RSP: 0018:ffff888107b7fdb8 EFLAGS: 00010282
    [   77.554923] RAX: 0000000000000000 RBX: ffff888118c1b740 RCX: 0000000000000000
    [   77.554926] RDX: 0000000000000001 RSI: 0000000000000004 RDI: ffffed1020f6ffa9
    [   77.554928] RBP: ffff888107b7fde0 R08: 0000000000000001 R09: ffffed1043ea60ba
    [   77.554930] R10: ffff88821f5305cb R11: ffffed1043ea60b9 R12: ffffffff93aa3a60
    [   77.554932] R13: 000000000000011b R14: 7fffffffffffffff R15: ffffffffc0558660
    [   77.554934] FS:  0000000000000000(0000) GS:ffff88821f500000(0000) knlGS:0000000000000000
    [   77.554937] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   77.554939] CR2: 00007f8a44010d68 CR3: 000000024421a003 CR4: 00000000003706e0
    [   77.554942] Call Trace:
    [   77.554944]  <TASK>
    [   77.554952]  mutex_lock+0x78/0xf0
    [   77.554973]  vub300_enable_sdio_irq+0x103/0x3c0 [vub300]
    [   77.554981]  sdio_irq_thread+0x25c/0x5b0
    [   77.555006]  kthread+0x2b8/0x370
    [   77.555017]  ret_from_fork+0x1f/0x30
    [   77.555023]  </TASK>
    [   77.555025] ---[ end trace 0000000000000000 ]---
    
    Fixes: 88095e7b473a ("mmc: Add new VUB300 USB-to-SD/SDIO/MMC driver")
    Signed-off-by: Deren Wu <deren.wu@mediatek.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87dc45b122d26d63c80532976813c9365d7160b3.1670140888.git.deren.wu@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 732cd66ec19a17f2b9183d7d5b7bdb9c39b0776e
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Nov 4 09:53:38 2022 -0400

    md: fix a crash in mempool_free
    
    commit 341097ee53573e06ab9fc675d96a052385b851fa upstream.
    
    There's a crash in mempool_free when running the lvm test
    shell/lvchange-rebuild-raid.sh.
    
    The reason for the crash is this:
    * super_written calls atomic_dec_and_test(&mddev->pending_writes) and
      wake_up(&mddev->sb_wait). Then it calls rdev_dec_pending(rdev, mddev)
      and bio_put(bio).
    * so, the process that waited on sb_wait and that is woken up is racing
      with bio_put(bio).
    * if the process wins the race, it calls bioset_exit before bio_put(bio)
      is executed.
    * bio_put(bio) attempts to free a bio into a destroyed bio set - causing
      a crash in mempool_free.
    
    We fix this bug by moving bio_put before atomic_dec_and_test.
    
    We also move rdev_dec_pending before atomic_dec_and_test as suggested by
    Neil Brown.
    
    The function md_end_flush has a similar bug - we must call bio_put before
    we decrement the number of in-progress bios.
    
     BUG: kernel NULL pointer dereference, address: 0000000000000000
     #PF: supervisor write access in kernel mode
     #PF: error_code(0x0002) - not-present page
     PGD 11557f0067 P4D 11557f0067 PUD 0
     Oops: 0002 [#1] PREEMPT SMP
     CPU: 0 PID: 73 Comm: kworker/0:1 Not tainted 6.1.0-rc3 #5
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-2 04/01/2014
     Workqueue: kdelayd flush_expired_bios [dm_delay]
     RIP: 0010:mempool_free+0x47/0x80
     Code: 48 89 ef 5b 5d ff e0 f3 c3 48 89 f7 e8 32 45 3f 00 48 63 53 08 48 89 c6 3b 53 04 7d 2d 48 8b 43 10 8d 4a 01 48 89 df 89 4b 08 <48> 89 2c d0 e8 b0 45 3f 00 48 8d 7b 30 5b 5d 31 c9 ba 01 00 00 00
     RSP: 0018:ffff88910036bda8 EFLAGS: 00010093
     RAX: 0000000000000000 RBX: ffff8891037b65d8 RCX: 0000000000000001
     RDX: 0000000000000000 RSI: 0000000000000202 RDI: ffff8891037b65d8
     RBP: ffff8891447ba240 R08: 0000000000012908 R09: 00000000003d0900
     R10: 0000000000000000 R11: 0000000000173544 R12: ffff889101a14000
     R13: ffff8891562ac300 R14: ffff889102b41440 R15: ffffe8ffffa00d05
     FS:  0000000000000000(0000) GS:ffff88942fa00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000000 CR3: 0000001102e99000 CR4: 00000000000006b0
     Call Trace:
      <TASK>
      clone_endio+0xf4/0x1c0 [dm_mod]
      clone_endio+0xf4/0x1c0 [dm_mod]
      __submit_bio+0x76/0x120
      submit_bio_noacct_nocheck+0xb6/0x2a0
      flush_expired_bios+0x28/0x2f [dm_delay]
      process_one_work+0x1b4/0x300
      worker_thread+0x45/0x3e0
      ? rescuer_thread+0x380/0x380
      kthread+0xc2/0x100
      ? kthread_complete_and_exit+0x20/0x20
      ret_from_fork+0x1f/0x30
      </TASK>
     Modules linked in: brd dm_delay dm_raid dm_mod af_packet uvesafb cfbfillrect cfbimgblt cn cfbcopyarea fb font fbdev tun autofs4 binfmt_misc configfs ipv6 virtio_rng virtio_balloon rng_core virtio_net pcspkr net_failover failover qemu_fw_cfg button mousedev raid10 raid456 libcrc32c async_raid6_recov async_memcpy async_pq raid6_pq async_xor xor async_tx raid1 raid0 md_mod sd_mod t10_pi crc64_rocksoft crc64 virtio_scsi scsi_mod evdev psmouse bsg scsi_common [last unloaded: brd]
     CR2: 0000000000000000
     ---[ end trace 0000000000000000 ]---
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cad0d17fb2b0540180ab59e2cd48ad348cc1ee4c
Author: Christian Brauner <brauner@kernel.org>
Date:   Sat Dec 17 22:28:40 2022 +0100

    pnode: terminate at peers of source
    
    commit 11933cf1d91d57da9e5c53822a540bbdc2656c16 upstream.
    
    The propagate_mnt() function handles mount propagation when creating
    mounts and propagates the source mount tree @source_mnt to all
    applicable nodes of the destination propagation mount tree headed by
    @dest_mnt.
    
    Unfortunately it contains a bug where it fails to terminate at peers of
    @source_mnt when looking up copies of the source mount that become
    masters for copies of the source mount tree mounted on top of slaves in
    the destination propagation tree causing a NULL dereference.
    
    Once the mechanics of the bug are understood it's easy to trigger.
    Because of unprivileged user namespaces it is available to unprivileged
    users.
    
    While fixing this bug we've gotten confused multiple times due to
    unclear terminology or missing concepts. So let's start this with some
    clarifications:
    
    * The terms "master" or "peer" denote a shared mount. A shared mount
      belongs to a peer group.
    
    * A peer group is a set of shared mounts that propagate to each other.
      They are identified by a peer group id. The peer group id is available
      in @shared_mnt->mnt_group_id.
      Shared mounts within the same peer group have the same peer group id.
      The peers in a peer group can be reached via @shared_mnt->mnt_share.
    
    * The terms "slave mount" or "dependent mount" denote a mount that
      receives propagation from a peer in a peer group. IOW, shared mounts
      may have slave mounts and slave mounts have shared mounts as their
      master. Slave mounts of a given peer in a peer group are listed on
      that peers slave list available at @shared_mnt->mnt_slave_list.
    
    * The term "master mount" denotes a mount in a peer group. IOW, it
      denotes a shared mount or a peer mount in a peer group. The term
      "master mount" - or "master" for short - is mostly used when talking
      in the context of slave mounts that receive propagation from a master
      mount. A master mount of a slave identifies the closest peer group a
      slave mount receives propagation from. The master mount of a slave can
      be identified via @slave_mount->mnt_master. Different slaves may point
      to different masters in the same peer group.
    
    * Multiple peers in a peer group can have non-empty ->mnt_slave_lists.
      Non-empty ->mnt_slave_lists of peers don't intersect. Consequently, to
      ensure all slave mounts of a peer group are visited the
      ->mnt_slave_lists of all peers in a peer group have to be walked.
    
    * Slave mounts point to a peer in the closest peer group they receive
      propagation from via @slave_mnt->mnt_master (see above). Together with
      these peers they form a propagation group (see below). The closest
      peer group can thus be identified through the peer group id
      @slave_mnt->mnt_master->mnt_group_id of the peer/master that a slave
      mount receives propagation from.
    
    * A shared-slave mount is a slave mount to a peer group pg1 while also
      a peer in another peer group pg2. IOW, a peer group may receive
      propagation from another peer group.
    
      If a peer group pg1 is a slave to another peer group pg2 then all
      peers in peer group pg1 point to the same peer in peer group pg2 via
      ->mnt_master. IOW, all peers in peer group pg1 appear on the same
      ->mnt_slave_list. IOW, they cannot be slaves to different peer groups.
    
    * A pure slave mount is a slave mount that is a slave to a peer group
      but is not a peer in another peer group.
    
    * A propagation group denotes the set of mounts consisting of a single
      peer group pg1 and all slave mounts and shared-slave mounts that point
      to a peer in that peer group via ->mnt_master. IOW, all slave mounts
      such that @slave_mnt->mnt_master->mnt_group_id is equal to
      @shared_mnt->mnt_group_id.
    
      The concept of a propagation group makes it easier to talk about a
      single propagation level in a propagation tree.
    
      For example, in propagate_mnt() the immediate peers of @dest_mnt and
      all slaves of @dest_mnt's peer group form a propagation group propg1.
      So a shared-slave mount that is a slave in propg1 and that is a peer
      in another peer group pg2 forms another propagation group propg2
      together with all slaves that point to that shared-slave mount in
      their ->mnt_master.
    
    * A propagation tree refers to all mounts that receive propagation
      starting from a specific shared mount.
    
      For example, for propagate_mnt() @dest_mnt is the start of a
      propagation tree. The propagation tree ecompasses all mounts that
      receive propagation from @dest_mnt's peer group down to the leafs.
    
    With that out of the way let's get to the actual algorithm.
    
    We know that @dest_mnt is guaranteed to be a pure shared mount or a
    shared-slave mount. This is guaranteed by a check in
    attach_recursive_mnt(). So propagate_mnt() will first propagate the
    source mount tree to all peers in @dest_mnt's peer group:
    
    for (n = next_peer(dest_mnt); n != dest_mnt; n = next_peer(n)) {
            ret = propagate_one(n);
            if (ret)
                   goto out;
    }
    
    Notice, that the peer propagation loop of propagate_mnt() doesn't
    propagate @dest_mnt itself. @dest_mnt is mounted directly in
    attach_recursive_mnt() after we propagated to the destination
    propagation tree.
    
    The mount that will be mounted on top of @dest_mnt is @source_mnt. This
    copy was created earlier even before we entered attach_recursive_mnt()
    and doesn't concern us a lot here.
    
    It's just important to notice that when propagate_mnt() is called
    @source_mnt will not yet have been mounted on top of @dest_mnt. Thus,
    @source_mnt->mnt_parent will either still point to @source_mnt or - in
    the case @source_mnt is moved and thus already attached - still to its
    former parent.
    
    For each peer @m in @dest_mnt's peer group propagate_one() will create a
    new copy of the source mount tree and mount that copy @child on @m such
    that @child->mnt_parent points to @m after propagate_one() returns.
    
    propagate_one() will stash the last destination propagation node @m in
    @last_dest and the last copy it created for the source mount tree in
    @last_source.
    
    Hence, if we call into propagate_one() again for the next destination
    propagation node @m, @last_dest will point to the previous destination
    propagation node and @last_source will point to the previous copy of the
    source mount tree and mounted on @last_dest.
    
    Each new copy of the source mount tree is created from the previous copy
    of the source mount tree. This will become important later.
    
    The peer loop in propagate_mnt() is straightforward. We iterate through
    the peers copying and updating @last_source and @last_dest as we go
    through them and mount each copy of the source mount tree @child on a
    peer @m in @dest_mnt's peer group.
    
    After propagate_mnt() handled the peers in @dest_mnt's peer group
    propagate_mnt() will propagate the source mount tree down the
    propagation tree that @dest_mnt's peer group propagates to:
    
    for (m = next_group(dest_mnt, dest_mnt); m;
                    m = next_group(m, dest_mnt)) {
            /* everything in that slave group */
            n = m;
            do {
                    ret = propagate_one(n);
                    if (ret)
                            goto out;
                    n = next_peer(n);
            } while (n != m);
    }
    
    The next_group() helper will recursively walk the destination
    propagation tree, descending into each propagation group of the
    propagation tree.
    
    The important part is that it takes care to propagate the source mount
    tree to all peers in the peer group of a propagation group before it
    propagates to the slaves to those peers in the propagation group. IOW,
    it creates and mounts copies of the source mount tree that become
    masters before it creates and mounts copies of the source mount tree
    that become slaves to these masters.
    
    It is important to remember that propagating the source mount tree to
    each mount @m in the destination propagation tree simply means that we
    create and mount new copies @child of the source mount tree on @m such
    that @child->mnt_parent points to @m.
    
    Since we know that each node @m in the destination propagation tree
    headed by @dest_mnt's peer group will be overmounted with a copy of the
    source mount tree and since we know that the propagation properties of
    each copy of the source mount tree we create and mount at @m will mostly
    mirror the propagation properties of @m. We can use that information to
    create and mount the copies of the source mount tree that become masters
    before their slaves.
    
    The easy case is always when @m and @last_dest are peers in a peer group
    of a given propagation group. In that case we know that we can simply
    copy @last_source without having to figure out what the master for the
    new copy @child of the source mount tree needs to be as we've done that
    in a previous call to propagate_one().
    
    The hard case is when we're dealing with a slave mount or a shared-slave
    mount @m in a destination propagation group that we need to create and
    mount a copy of the source mount tree on.
    
    For each propagation group in the destination propagation tree we
    propagate the source mount tree to we want to make sure that the copies
    @child of the source mount tree we create and mount on slaves @m pick an
    ealier copy of the source mount tree that we mounted on a master @m of
    the destination propagation group as their master. This is a mouthful
    but as far as we can tell that's the core of it all.
    
    But, if we keep track of the masters in the destination propagation tree
    @m we can use the information to find the correct master for each copy
    of the source mount tree we create and mount at the slaves in the
    destination propagation tree @m.
    
    Let's walk through the base case as that's still fairly easy to grasp.
    
    If we're dealing with the first slave in the propagation group that
    @dest_mnt is in then we don't yet have marked any masters in the
    destination propagation tree.
    
    We know the master for the first slave to @dest_mnt's peer group is
    simple @dest_mnt. So we expect this algorithm to yield a copy of the
    source mount tree that was mounted on a peer in @dest_mnt's peer group
    as the master for the copy of the source mount tree we want to mount at
    the first slave @m:
    
    for (n = m; ; n = p) {
            p = n->mnt_master;
            if (p == dest_master || IS_MNT_MARKED(p))
                    break;
    }
    
    For the first slave we walk the destination propagation tree all the way
    up to a peer in @dest_mnt's peer group. IOW, the propagation hierarchy
    can be walked by walking up the @mnt->mnt_master hierarchy of the
    destination propagation tree @m. We will ultimately find a peer in
    @dest_mnt's peer group and thus ultimately @dest_mnt->mnt_master.
    
    Btw, here the assumption we listed at the beginning becomes important.
    Namely, that peers in a peer group pg1 that are slaves in another peer
    group pg2 appear on the same ->mnt_slave_list. IOW, all slaves who are
    peers in peer group pg1 point to the same peer in peer group pg2 via
    their ->mnt_master. Otherwise the termination condition in the code
    above would be wrong and next_group() would be broken too.
    
    So the first iteration sets:
    
    n = m;
    p = n->mnt_master;
    
    such that @p now points to a peer or @dest_mnt itself. We walk up one
    more level since we don't have any marked mounts. So we end up with:
    
    n = dest_mnt;
    p = dest_mnt->mnt_master;
    
    If @dest_mnt's peer group is not slave to another peer group then @p is
    now NULL. If @dest_mnt's peer group is a slave to another peer group
    then @p now points to @dest_mnt->mnt_master points which is a master
    outside the propagation tree we're dealing with.
    
    Now we need to figure out the master for the copy of the source mount
    tree we're about to create and mount on the first slave of @dest_mnt's
    peer group:
    
    do {
            struct mount *parent = last_source->mnt_parent;
            if (last_source == first_source)
                    break;
            done = parent->mnt_master == p;
            if (done && peers(n, parent))
                    break;
            last_source = last_source->mnt_master;
    } while (!done);
    
    We know that @last_source->mnt_parent points to @last_dest and
    @last_dest is the last peer in @dest_mnt's peer group we propagated to
    in the peer loop in propagate_mnt().
    
    Consequently, @last_source is the last copy we created and mount on that
    last peer in @dest_mnt's peer group. So @last_source is the master we
    want to pick.
    
    We know that @last_source->mnt_parent->mnt_master points to
    @last_dest->mnt_master. We also know that @last_dest->mnt_master is
    either NULL or points to a master outside of the destination propagation
    tree and so does @p. Hence:
    
    done = parent->mnt_master == p;
    
    is trivially true in the base condition.
    
    We also know that for the first slave mount of @dest_mnt's peer group
    that @last_dest either points @dest_mnt itself because it was
    initialized to:
    
    last_dest = dest_mnt;
    
    at the beginning of propagate_mnt() or it will point to a peer of
    @dest_mnt in its peer group. In both cases it is guaranteed that on the
    first iteration @n and @parent are peers (Please note the check for
    peers here as that's important.):
    
    if (done && peers(n, parent))
            break;
    
    So, as we expected, we select @last_source, which referes to the last
    copy of the source mount tree we mounted on the last peer in @dest_mnt's
    peer group, as the master of the first slave in @dest_mnt's peer group.
    The rest is taken care of by clone_mnt(last_source, ...). We'll skip
    over that part otherwise this becomes a blogpost.
    
    At the end of propagate_mnt() we now mark @m->mnt_master as the first
    master in the destination propagation tree that is distinct from
    @dest_mnt->mnt_master. IOW, we mark @dest_mnt itself as a master.
    
    By marking @dest_mnt or one of it's peers we are able to easily find it
    again when we later lookup masters for other copies of the source mount
    tree we mount copies of the source mount tree on slaves @m to
    @dest_mnt's peer group. This, in turn allows us to find the master we
    selected for the copies of the source mount tree we mounted on master in
    the destination propagation tree again.
    
    The important part is to realize that the code makes use of the fact
    that the last copy of the source mount tree stashed in @last_source was
    mounted on top of the previous destination propagation node @last_dest.
    What this means is that @last_source allows us to walk the destination
    propagation hierarchy the same way each destination propagation node @m
    does.
    
    If we take @last_source, which is the copy of @source_mnt we have
    mounted on @last_dest in the previous iteration of propagate_one(), then
    we know @last_source->mnt_parent points to @last_dest but we also know
    that as we walk through the destination propagation tree that
    @last_source->mnt_master will point to an earlier copy of the source
    mount tree we mounted one an earlier destination propagation node @m.
    
    IOW, @last_source->mnt_parent will be our hook into the destination
    propagation tree and each consecutive @last_source->mnt_master will lead
    us to an earlier propagation node @m via
    @last_source->mnt_master->mnt_parent.
    
    Hence, by walking up @last_source->mnt_master, each of which is mounted
    on a node that is a master @m in the destination propagation tree we can
    also walk up the destination propagation hierarchy.
    
    So, for each new destination propagation node @m we use the previous
    copy of @last_source and the fact it's mounted on the previous
    propagation node @last_dest via @last_source->mnt_master->mnt_parent to
    determine what the master of the new copy of @last_source needs to be.
    
    The goal is to find the _closest_ master that the new copy of the source
    mount tree we are about to create and mount on a slave @m in the
    destination propagation tree needs to pick. IOW, we want to find a
    suitable master in the propagation group.
    
    As the propagation structure of the source mount propagation tree we
    create mirrors the propagation structure of the destination propagation
    tree we can find @m's closest master - i.e., a marked master - which is
    a peer in the closest peer group that @m receives propagation from. We
    store that closest master of @m in @p as before and record the slave to
    that master in @n
    
    We then search for this master @p via @last_source by walking up the
    master hierarchy starting from the last copy of the source mount tree
    stored in @last_source that we created and mounted on the previous
    destination propagation node @m.
    
    We will try to find the master by walking @last_source->mnt_master and
    by comparing @last_source->mnt_master->mnt_parent->mnt_master to @p. If
    we find @p then we can figure out what earlier copy of the source mount
    tree needs to be the master for the new copy of the source mount tree
    we're about to create and mount at the current destination propagation
    node @m.
    
    If @last_source->mnt_master->mnt_parent and @n are peers then we know
    that the closest master they receive propagation from is
    @last_source->mnt_master->mnt_parent->mnt_master. If not then the
    closest immediate peer group that they receive propagation from must be
    one level higher up.
    
    This builds on the earlier clarification at the beginning that all peers
    in a peer group which are slaves of other peer groups all point to the
    same ->mnt_master, i.e., appear on the same ->mnt_slave_list, of the
    closest peer group that they receive propagation from.
    
    However, terminating the walk has corner cases.
    
    If the closest marked master for a given destination node @m cannot be
    found by walking up the master hierarchy via @last_source->mnt_master
    then we need to terminate the walk when we encounter @source_mnt again.
    
    This isn't an arbitrary termination. It simply means that the new copy
    of the source mount tree we're about to create has a copy of the source
    mount tree we created and mounted on a peer in @dest_mnt's peer group as
    its master. IOW, @source_mnt is the peer in the closest peer group that
    the new copy of the source mount tree receives propagation from.
    
    We absolutely have to stop @source_mnt because @last_source->mnt_master
    either points outside the propagation hierarchy we're dealing with or it
    is NULL because @source_mnt isn't a shared-slave.
    
    So continuing the walk past @source_mnt would cause a NULL dereference
    via @last_source->mnt_master->mnt_parent. And so we have to stop the
    walk when we encounter @source_mnt again.
    
    One scenario where this can happen is when we first handled a series of
    slaves of @dest_mnt's peer group and then encounter peers in a new peer
    group that is a slave to @dest_mnt's peer group. We handle them and then
    we encounter another slave mount to @dest_mnt that is a pure slave to
    @dest_mnt's peer group. That pure slave will have a peer in @dest_mnt's
    peer group as its master. Consequently, the new copy of the source mount
    tree will need to have @source_mnt as it's master. So we walk the
    propagation hierarchy all the way up to @source_mnt based on
    @last_source->mnt_master.
    
    So terminate on @source_mnt, easy peasy. Except, that the check misses
    something that the rest of the algorithm already handles.
    
    If @dest_mnt has peers in it's peer group the peer loop in
    propagate_mnt():
    
    for (n = next_peer(dest_mnt); n != dest_mnt; n = next_peer(n)) {
            ret = propagate_one(n);
            if (ret)
                    goto out;
    }
    
    will consecutively update @last_source with each previous copy of the
    source mount tree we created and mounted at the previous peer in
    @dest_mnt's peer group. So after that loop terminates @last_source will
    point to whatever copy of the source mount tree was created and mounted
    on the last peer in @dest_mnt's peer group.
    
    Furthermore, if there is even a single additional peer in @dest_mnt's
    peer group then @last_source will __not__ point to @source_mnt anymore.
    Because, as we mentioned above, @dest_mnt isn't even handled in this
    loop but directly in attach_recursive_mnt(). So it can't even accidently
    come last in that peer loop.
    
    So the first time we handle a slave mount @m of @dest_mnt's peer group
    the copy of the source mount tree we create will make the __last copy of
    the source mount tree we created and mounted on the last peer in
    @dest_mnt's peer group the master of the new copy of the source mount
    tree we create and mount on the first slave of @dest_mnt's peer group__.
    
    But this means that the termination condition that checks for
    @source_mnt is wrong. The @source_mnt cannot be found anymore by
    propagate_one(). Instead it will find the last copy of the source mount
    tree we created and mounted for the last peer of @dest_mnt's peer group
    again. And that is a peer of @source_mnt not @source_mnt itself.
    
    IOW, we fail to terminate the loop correctly and ultimately dereference
    @last_source->mnt_master->mnt_parent. When @source_mnt's peer group
    isn't slave to another peer group then @last_source->mnt_master is NULL
    causing the splat below.
    
    For example, assume @dest_mnt is a pure shared mount and has three peers
    in its peer group:
    
    ===================================================================================
                                             mount-id   mount-parent-id   peer-group-id
    ===================================================================================
    (@dest_mnt) mnt_master[216]              309        297               shared:216
        \
         (@source_mnt) mnt_master[218]:      609        609               shared:218
    
    (1) mnt_master[216]:                     607        605               shared:216
        \
         (P1) mnt_master[218]:               624        607               shared:218
    
    (2) mnt_master[216]:                     576        574               shared:216
        \
         (P2) mnt_master[218]:               625        576               shared:218
    
    (3) mnt_master[216]:                     545        543               shared:216
        \
         (P3) mnt_master[218]:               626        545               shared:218
    
    After this sequence has been processed @last_source will point to (P3),
    the copy generated for the third peer in @dest_mnt's peer group we
    handled. So the copy of the source mount tree (P4) we create and mount
    on the first slave of @dest_mnt's peer group:
    
    ===================================================================================
                                             mount-id   mount-parent-id   peer-group-id
    ===================================================================================
        mnt_master[216]                      309        297               shared:216
       /
      /
    (S0) mnt_slave                           483        481               master:216
      \
       \    (P3) mnt_master[218]             626        545               shared:218
        \  /
         \/
        (P4) mnt_slave                       627        483               master:218
    
    will pick the last copy of the source mount tree (P3) as master, not (S0).
    
    When walking the propagation hierarchy via @last_source's master
    hierarchy we encounter (P3) but not (S0), i.e., @source_mnt.
    
    We can fix this in multiple ways:
    
    (1) By setting @last_source to @source_mnt after we processed the peers
        in @dest_mnt's peer group right after the peer loop in
        propagate_mnt().
    
    (2) By changing the termination condition that relies on finding exactly
        @source_mnt to finding a peer of @source_mnt.
    
    (3) By only moving @last_source when we actually venture into a new peer
        group or some clever variant thereof.
    
    The first two options are minimally invasive and what we want as a fix.
    The third option is more intrusive but something we'd like to explore in
    the near future.
    
    This passes all LTP tests and specifically the mount propagation
    testsuite part of it. It also holds up against all known reproducers of
    this issues.
    
    Final words.
    First, this is a clever but __worringly__ underdocumented algorithm.
    There isn't a single detailed comment to be found in next_group(),
    propagate_one() or anywhere else in that file for that matter. This has
    been a giant pain to understand and work through and a bug like this is
    insanely difficult to fix without a detailed understanding of what's
    happening. Let's not talk about the amount of time that was sunk into
    fixing this.
    
    Second, all the cool kids with access to
    unshare --mount --user --map-root --propagation=unchanged
    are going to have a lot of fun. IOW, triggerable by unprivileged users
    while namespace_lock() lock is held.
    
    [  115.848393] BUG: kernel NULL pointer dereference, address: 0000000000000010
    [  115.848967] #PF: supervisor read access in kernel mode
    [  115.849386] #PF: error_code(0x0000) - not-present page
    [  115.849803] PGD 0 P4D 0
    [  115.850012] Oops: 0000 [#1] PREEMPT SMP PTI
    [  115.850354] CPU: 0 PID: 15591 Comm: mount Not tainted 6.1.0-rc7 #3
    [  115.850851] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS
    VirtualBox 12/01/2006
    [  115.851510] RIP: 0010:propagate_one.part.0+0x7f/0x1a0
    [  115.851924] Code: 75 eb 4c 8b 05 c2 25 37 02 4c 89 ca 48 8b 4a 10
    49 39 d0 74 1e 48 3b 81 e0 00 00 00 74 26 48 8b 92 e0 00 00 00 be 01
    00 00 00 <48> 8b 4a 10 49 39 d0 75 e2 40 84 f6 74 38 4c 89 05 84 25 37
    02 4d
    [  115.853441] RSP: 0018:ffffb8d5443d7d50 EFLAGS: 00010282
    [  115.853865] RAX: ffff8e4d87c41c80 RBX: ffff8e4d88ded780 RCX: ffff8e4da4333a00
    [  115.854458] RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8e4d88ded780
    [  115.855044] RBP: ffff8e4d88ded780 R08: ffff8e4da4338000 R09: ffff8e4da43388c0
    [  115.855693] R10: 0000000000000002 R11: ffffb8d540158000 R12: ffffb8d5443d7da8
    [  115.856304] R13: ffff8e4d88ded780 R14: 0000000000000000 R15: 0000000000000000
    [  115.856859] FS:  00007f92c90c9800(0000) GS:ffff8e4dfdc00000(0000)
    knlGS:0000000000000000
    [  115.857531] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  115.858006] CR2: 0000000000000010 CR3: 0000000022f4c002 CR4: 00000000000706f0
    [  115.858598] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  115.859393] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  115.860099] Call Trace:
    [  115.860358]  <TASK>
    [  115.860535]  propagate_mnt+0x14d/0x190
    [  115.860848]  attach_recursive_mnt+0x274/0x3e0
    [  115.861212]  path_mount+0x8c8/0xa60
    [  115.861503]  __x64_sys_mount+0xf6/0x140
    [  115.861819]  do_syscall_64+0x5b/0x80
    [  115.862117]  ? do_faccessat+0x123/0x250
    [  115.862435]  ? syscall_exit_to_user_mode+0x17/0x40
    [  115.862826]  ? do_syscall_64+0x67/0x80
    [  115.863133]  ? syscall_exit_to_user_mode+0x17/0x40
    [  115.863527]  ? do_syscall_64+0x67/0x80
    [  115.863835]  ? do_syscall_64+0x67/0x80
    [  115.864144]  ? do_syscall_64+0x67/0x80
    [  115.864452]  ? exc_page_fault+0x70/0x170
    [  115.864775]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    [  115.865187] RIP: 0033:0x7f92c92b0ebe
    [  115.865480] Code: 48 8b 0d 75 4f 0c 00 f7 d8 64 89 01 48 83 c8 ff
    c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 49 89 ca b8 a5 00 00
    00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 42 4f 0c 00 f7 d8 64 89
    01 48
    [  115.866984] RSP: 002b:00007fff000aa728 EFLAGS: 00000246 ORIG_RAX:
    00000000000000a5
    [  115.867607] RAX: ffffffffffffffda RBX: 000055a77888d6b0 RCX: 00007f92c92b0ebe
    [  115.868240] RDX: 000055a77888d8e0 RSI: 000055a77888e6e0 RDI: 000055a77888e620
    [  115.868823] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000001
    [  115.869403] R10: 0000000000001000 R11: 0000000000000246 R12: 000055a77888e620
    [  115.869994] R13: 000055a77888d8e0 R14: 00000000ffffffff R15: 00007f92c93e4076
    [  115.870581]  </TASK>
    [  115.870763] Modules linked in: nft_fib_inet nft_fib_ipv4
    nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6
    nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6
    nf_defrag_ipv4 ip_set rfkill nf_tables nfnetlink qrtr snd_intel8x0
    sunrpc snd_ac97_codec ac97_bus snd_pcm snd_timer intel_rapl_msr
    intel_rapl_common snd vboxguest intel_powerclamp video rapl joydev
    soundcore i2c_piix4 wmi fuse zram xfs vmwgfx crct10dif_pclmul
    crc32_pclmul crc32c_intel polyval_clmulni polyval_generic
    drm_ttm_helper ttm e1000 ghash_clmulni_intel serio_raw ata_generic
    pata_acpi scsi_dh_rdac scsi_dh_emc scsi_dh_alua dm_multipath
    [  115.875288] CR2: 0000000000000010
    [  115.875641] ---[ end trace 0000000000000000 ]---
    [  115.876135] RIP: 0010:propagate_one.part.0+0x7f/0x1a0
    [  115.876551] Code: 75 eb 4c 8b 05 c2 25 37 02 4c 89 ca 48 8b 4a 10
    49 39 d0 74 1e 48 3b 81 e0 00 00 00 74 26 48 8b 92 e0 00 00 00 be 01
    00 00 00 <48> 8b 4a 10 49 39 d0 75 e2 40 84 f6 74 38 4c 89 05 84 25 37
    02 4d
    [  115.878086] RSP: 0018:ffffb8d5443d7d50 EFLAGS: 00010282
    [  115.878511] RAX: ffff8e4d87c41c80 RBX: ffff8e4d88ded780 RCX: ffff8e4da4333a00
    [  115.879128] RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8e4d88ded780
    [  115.879715] RBP: ffff8e4d88ded780 R08: ffff8e4da4338000 R09: ffff8e4da43388c0
    [  115.880359] R10: 0000000000000002 R11: ffffb8d540158000 R12: ffffb8d5443d7da8
    [  115.880962] R13: ffff8e4d88ded780 R14: 0000000000000000 R15: 0000000000000000
    [  115.881548] FS:  00007f92c90c9800(0000) GS:ffff8e4dfdc00000(0000)
    knlGS:0000000000000000
    [  115.882234] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  115.882713] CR2: 0000000000000010 CR3: 0000000022f4c002 CR4: 00000000000706f0
    [  115.883314] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  115.883966] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Fixes: f2ebb3a921c1 ("smarter propagate_mnt()")
    Fixes: 5ec0811d3037 ("propogate_mnt: Handle the first propogated copy being a slave")
    Cc: <stable@vger.kernel.org>
    Reported-by: Ditang Chen <ditang.c@gmail.com>
    Signed-off-by: Seth Forshee (Digital Ocean) <sforshee@kernel.org>
    Signed-off-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b026af92b2cea907c780f7168c730c816cd33311
Author: Artem Egorkine <arteme@gmail.com>
Date:   Sun Dec 25 12:57:28 2022 +0200

    ALSA: line6: fix stack overflow in line6_midi_transmit
    
    commit b8800d324abb50160560c636bfafe2c81001b66c upstream.
    
    Correctly calculate available space including the size of the chunk
    buffer. This fixes a buffer overflow when multiple MIDI sysex
    messages are sent to a PODxt device.
    
    Signed-off-by: Artem Egorkine <arteme@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221225105728.1153989-2-arteme@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0407e792783bff3d3fbc00cf660dc72ee3282afd
Author: Artem Egorkine <arteme@gmail.com>
Date:   Sun Dec 25 12:57:27 2022 +0200

    ALSA: line6: correct midi status byte when receiving data from podxt
    
    commit 8508fa2e7472f673edbeedf1b1d2b7a6bb898ecc upstream.
    
    A PODxt device sends 0xb2, 0xc2 or 0xf2 as a status byte for MIDI
    messages over USB that should otherwise have a 0xb0, 0xc0 or 0xf0
    status byte. This is usually corrected by the driver on other OSes.
    
    This fixes MIDI sysex messages sent by PODxt.
    
    [ tiwai: fixed white spaces ]
    
    Signed-off-by: Artem Egorkine <arteme@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221225105728.1153989-1-arteme@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff939afec5548265a80324322838f7a308557579
Author: Aditya Garg <gargaditya08@live.com>
Date:   Wed Dec 7 03:05:40 2022 +0000

    hfsplus: fix bug causing custom uid and gid being unable to be assigned with mount
    
    commit 9f2b5debc07073e6dfdd774e3594d0224b991927 upstream.
    
    Despite specifying UID and GID in mount command, the specified UID and GID
    were not being assigned. This patch fixes this issue.
    
    Link: https://lkml.kernel.org/r/C0264BF5-059C-45CF-B8DA-3A3BD2C803A2@live.com
    Signed-off-by: Aditya Garg <gargaditya08@live.com>
    Reviewed-by: Viacheslav Dubeyko <slava@dubeyko.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e28690c0300ccb627cba14470a046ca80343a6c0
Author: Terry Junge <linuxhid@cosmicgizmosystems.com>
Date:   Thu Dec 8 15:05:06 2022 -0800

    HID: plantronics: Additional PIDs for double volume key presses quirk
    
    [ Upstream commit 3d57f36c89d8ba32b2c312f397a37fd1a2dc7cfc ]
    
    I no longer work for Plantronics (aka Poly, aka HP) and do not have
    access to the headsets in order to test. However, as noted by Maxim,
    the other 32xx models that share the same base code set as the 3220
    would need the same quirk. This patch adds the PIDs for the rest of
    the Blackwire 32XX product family that require the quirk.
    
    Plantronics Blackwire 3210 Series (047f:c055)
    Plantronics Blackwire 3215 Series (047f:c057)
    Plantronics Blackwire 3225 Series (047f:c058)
    
    Quote from previous patch by Maxim Mikityanskiy
    Plantronics Blackwire 3220 Series (047f:c056) sends HID reports twice
    for each volume key press. This patch adds a quirk to hid-plantronics
    for this product ID, which will ignore the second volume key press if
    it happens within 5 ms from the last one that was handled.
    
    The patch was tested on the mentioned model only, it shouldn't affect
    other models, however, this quirk might be needed for them too.
    Auto-repeat (when a key is held pressed) is not affected, because the
    rate is about 3 times per second, which is far less frequent than once
    in 5 ms.
    End quote
    
    Signed-off-by: Terry Junge <linuxhid@cosmicgizmosystems.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f413135b337c4e90c1e593c6613f8717e17bc724
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Fri Nov 18 09:07:42 2022 -0600

    powerpc/rtas: avoid scheduling in rtas_os_term()
    
    [ Upstream commit 6c606e57eecc37d6b36d732b1ff7e55b7dc32dd4 ]
    
    It's unsafe to use rtas_busy_delay() to handle a busy status from
    the ibm,os-term RTAS function in rtas_os_term():
    
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    BUG: sleeping function called from invalid context at arch/powerpc/kernel/rtas.c:618
    in_atomic(): 1, irqs_disabled(): 1, non_block: 0, pid: 1, name: swapper/0
    preempt_count: 2, expected: 0
    CPU: 7 PID: 1 Comm: swapper/0 Tainted: G      D            6.0.0-rc5-02182-gf8553a572277-dirty #9
    Call Trace:
    [c000000007b8f000] [c000000001337110] dump_stack_lvl+0xb4/0x110 (unreliable)
    [c000000007b8f040] [c0000000002440e4] __might_resched+0x394/0x3c0
    [c000000007b8f0e0] [c00000000004f680] rtas_busy_delay+0x120/0x1b0
    [c000000007b8f100] [c000000000052d04] rtas_os_term+0xb8/0xf4
    [c000000007b8f180] [c0000000001150fc] pseries_panic+0x50/0x68
    [c000000007b8f1f0] [c000000000036354] ppc_panic_platform_handler+0x34/0x50
    [c000000007b8f210] [c0000000002303c4] notifier_call_chain+0xd4/0x1c0
    [c000000007b8f2b0] [c0000000002306cc] atomic_notifier_call_chain+0xac/0x1c0
    [c000000007b8f2f0] [c0000000001d62b8] panic+0x228/0x4d0
    [c000000007b8f390] [c0000000001e573c] do_exit+0x140c/0x1420
    [c000000007b8f480] [c0000000001e586c] make_task_dead+0xdc/0x200
    
    Use rtas_busy_delay_time() instead, which signals without side effects
    whether to attempt the ibm,os-term RTAS call again.
    
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Reviewed-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221118150751.469393-5-nathanl@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48e2ba688756b8eb3decf851e310158bb1f19b36
Author: Rickard x Andersson <rickaran@axis.com>
Date:   Tue Dec 20 11:23:18 2022 +0100

    gcov: add support for checksum field
    
    commit e96b95c2b7a63a454b6498e2df67aac14d046d13 upstream.
    
    In GCC version 12.1 a checksum field was added.
    
    This patch fixes a kernel crash occurring during boot when using
    gcov-kernel with GCC version 12.2.  The crash occurred on a system running
    on i.MX6SX.
    
    Link: https://lkml.kernel.org/r/20221220102318.3418501-1-rickaran@axis.com
    Fixes: 977ef30a7d88 ("gcov: support GCC 12.1 and newer compilers")
    Signed-off-by: Rickard x Andersson <rickaran@axis.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Tested-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Reviewed-by: Martin Liska <mliska@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8b577fe8d836b2d1aaafc89e1f9611dcdee5ca0
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Tue Sep 20 13:28:07 2022 +0200

    iio: adc: ad_sigma_delta: do not use internal iio_dev lock
    
    commit 20228a1d5a55e7db0c6720840f2c7d2b48c55f69 upstream.
    
    Drop 'mlock' usage by making use of iio_device_claim_direct_mode().
    This change actually makes sure we cannot do a single conversion while
    buffering is enable. Note there was a potential race in the previous
    code since we were only acquiring the lock after checking if the bus is
    enabled.
    
    Fixes: af3008485ea0 ("iio:adc: Add common code for ADI Sigma Delta devices")
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: <Stable@vger.kernel.org> #No rush as race is very old.
    Link: https://lore.kernel.org/r/20220920112821.975359-2-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cf939d003b34e50d0c8b7f4369bc5b18b59333b
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Thu Nov 10 10:46:35 2022 +0100

    reiserfs: Add missing calls to reiserfs_security_free()
    
    commit 572302af1258459e124437b8f3369357447afac7 upstream.
    
    Commit 57fe60df6241 ("reiserfs: add atomic addition of selinux attributes
    during inode creation") defined reiserfs_security_free() to free the name
    and value of a security xattr allocated by the active LSM through
    security_old_inode_init_security(). However, this function is not called
    in the reiserfs code.
    
    Thus, add a call to reiserfs_security_free() whenever
    reiserfs_security_init() is called, and initialize value to NULL, to avoid
    to call kfree() on an uninitialized pointer.
    
    Finally, remove the kfree() for the xattr name, as it is not allocated
    anymore.
    
    Fixes: 57fe60df6241 ("reiserfs: add atomic addition of selinux attributes during inode creation")
    Cc: stable@vger.kernel.org
    Cc: Jeff Mahoney <jeffm@suse.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: Mimi Zohar <zohar@linux.ibm.com>
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f21b8ddd237a6d5c54c96c1f94e413abf0001c78
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Thu Dec 1 15:11:41 2022 -0800

    HID: wacom: Ensure bootloader PID is usable in hidraw mode
    
    commit 1db1f392591aff13fd643f0ec7c1d5e27391d700 upstream.
    
    Some Wacom devices have a special "bootloader" mode that is used for
    firmware flashing. When operating in this mode, the device cannot be
    used for input, and the HID descriptor is not able to be processed by
    the driver. The driver generates an "Unknown device_type" warning and
    then returns an error code from wacom_probe(). This is a problem because
    userspace still needs to be able to interact with the device via hidraw
    to perform the firmware flash.
    
    This commit adds a non-generic device definition for 056a:0094 which
    is used when devices are in "bootloader" mode. It marks the devices
    with a special BOOTLOADER type that is recognized by wacom_probe() and
    wacom_raw_event(). When we see this type we ensure a hidraw device is
    created and otherwise keep our hands off so that userspace is in full
    control.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Tested-by: Tatsunosuke Tobita <tatsunosuke.tobita@wacom.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 525f1c8ada75acb0de84c7aa8c0c031edb8c0105
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 13 13:33:19 2022 +0100

    ASoC: rt5670: Remove unbalanced pm_runtime_put()
    
    [ Upstream commit 6c900dcc3f7331a67ed29739d74524e428d137fb ]
    
    For some reason rt5670_i2c_probe() does a pm_runtime_put() at the end
    of a successful probe. But it has never done a pm_runtime_get() leading
    to the following error being logged into dmesg:
    
     rt5670 i2c-10EC5640:00: Runtime PM usage count underflow!
    
    Fix this by removing the unnecessary pm_runtime_put().
    
    Fixes: 64e89e5f5548 ("ASoC: rt5670: Add runtime PM support")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20221213123319.11285-1-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 593f0c94dcb4471556d1aecf457c1215b2e7490d
Author: Wang Jingjin <wangjingjin1@huawei.com>
Date:   Thu Dec 8 14:39:00 2022 +0800

    ASoC: rockchip: spdif: Add missing clk_disable_unprepare() in rk_spdif_runtime_resume()
    
    [ Upstream commit 6d94d0090527b1763872275a7ccd44df7219b31e ]
    
    rk_spdif_runtime_resume() may have called clk_prepare_enable() before return
    from failed branches, add missing clk_disable_unprepare() in this case.
    
    Fixes: f874b80e1571 ("ASoC: rockchip: Add rockchip SPDIF transceiver driver")
    Signed-off-by: Wang Jingjin <wangjingjin1@huawei.com>
    Link: https://lore.kernel.org/r/20221208063900.4180790-1-wangjingjin1@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b606ae0e817c2a14d956624c31bef88ab335ba20
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Fri Dec 9 10:16:57 2022 +0100

    ASoC: wm8994: Fix potential deadlock
    
    [ Upstream commit 9529dc167ffcdfd201b9f0eda71015f174095f7e ]
    
    Fix this by dropping wm8994->accdet_lock while calling
    cancel_delayed_work_sync(&wm8994->mic_work) in wm1811_jackdet_irq().
    
    Fixes: c0cc3f166525 ("ASoC: wm8994: Allow a delay between jack insertion and microphone detect")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221209091657.1183-1-m.szyprowski@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f6d57871b805b9eaad608bc76d2f2630616f2cf
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Mon Dec 5 18:04:24 2022 +0800

    ASoC: mediatek: mt8173-rt5650-rt5514: fix refcount leak in mt8173_rt5650_rt5514_dev_probe()
    
    [ Upstream commit 3327d721114c109ba0575f86f8fda3b525404054 ]
    
    The node returned by of_parse_phandle() with refcount incremented,
    of_node_put() needs be called when finish using it. So add it in the
    error path in mt8173_rt5650_rt5514_dev_probe().
    
    Fixes: 0d1d7a664288 ("ASoC: mediatek: Refine mt8173 driver and change config option")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Link: https://lore.kernel.org/r/1670234664-24246-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44d3eac26a5e5268d11cc342dc202b0d31505c0a
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Oct 18 12:40:05 2022 +0800

    orangefs: Fix kmemleak in orangefs_prepare_debugfs_help_string()
    
    [ Upstream commit d23417a5bf3a3afc55de5442eb46e1e60458b0a1 ]
    
    When insert and remove the orangefs module, then debug_help_string will
    be leaked:
    
      unreferenced object 0xffff8881652ba000 (size 4096):
        comm "insmod", pid 1701, jiffies 4294893639 (age 13218.530s)
        hex dump (first 32 bytes):
          43 6c 69 65 6e 74 20 44 65 62 75 67 20 4b 65 79  Client Debug Key
          77 6f 72 64 73 20 61 72 65 20 75 6e 6b 6e 6f 77  words are unknow
        backtrace:
          [<0000000004e6f8e3>] kmalloc_trace+0x27/0xa0
          [<0000000006f75d85>] orangefs_prepare_debugfs_help_string+0x5e/0x480 [orangefs]
          [<0000000091270a2a>] _sub_I_65535_1+0x57/0xf70 [crc_itu_t]
          [<000000004b1ee1a3>] do_one_initcall+0x87/0x2a0
          [<000000001d0614ae>] do_init_module+0xdf/0x320
          [<00000000efef068c>] load_module+0x2f98/0x3330
          [<000000006533b44d>] __do_sys_finit_module+0x113/0x1b0
          [<00000000a0da6f99>] do_syscall_64+0x35/0x80
          [<000000007790b19b>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    When remove the module, should always free debug_help_string. Should
    always free the allocated buffer when change the free_debug_help_string.
    
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2c92b2a3801b09b709cbefd9a9e4944b72400bf
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 08:56:23 2022 -0700

    drm/sti: Fix return type of sti_{dvo,hda,hdmi}_connector_mode_valid()
    
    [ Upstream commit 0ad811cc08a937d875cbad0149c1bab17f84ba05 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/gpu/drm/sti/sti_hda.c:637:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = sti_hda_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
      drivers/gpu/drm/sti/sti_dvo.c:376:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = sti_dvo_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
      drivers/gpu/drm/sti/sti_hdmi.c:1035:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = sti_hdmi_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    ->mode_valid() in 'struct drm_connector_helper_funcs' expects a return
    type of 'enum drm_mode_status', not 'int'. Adjust the return type of
    sti_{dvo,hda,hdmi}_connector_mode_valid() to match the prototype's to
    resolve the warning and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102155623.3042869-1-nathan@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cca6ac0a7982e6cd3c197d3049dd6571cf07292
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 08:42:15 2022 -0700

    drm/fsl-dcu: Fix return type of fsl_dcu_drm_connector_mode_valid()
    
    [ Upstream commit 96d845a67b7e406cfed7880a724c8ca6121e022e ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/gpu/drm/fsl-dcu/fsl_dcu_drm_rgb.c:74:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = fsl_dcu_drm_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      1 error generated.
    
    ->mode_valid() in 'struct drm_connector_helper_funcs' expects a return
    type of 'enum drm_mode_status', not 'int'. Adjust the return type of
    fsl_dcu_drm_connector_mode_valid() to match the prototype's to resolve
    the warning and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102154215.78059-1-nathan@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 081538ae5817631a2b99e8e75cce981060aab29f
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Tue Nov 22 21:36:14 2022 +0800

    clk: st: Fix memory leak in st_of_quadfs_setup()
    
    [ Upstream commit cfd3ffb36f0d566846163118651d868e607300ba ]
    
    If st_clk_register_quadfs_pll() fails, @lock should be freed before goto
    @err_exit, otherwise will cause meory leak issue, fix it.
    
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Link: https://lore.kernel.org/r/20221122133614.184910-1-xiujianfeng@huawei.com
    Reviewed-by: Patrice Chotard <patrice.chotard@foss.st.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 146bd005ebb01ae190c22af050cb98623958c373
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Wed Nov 23 03:51:59 2022 +0900

    media: si470x: Fix use-after-free in si470x_int_in_callback()
    
    [ Upstream commit 7d21e0b1b41b21d628bf2afce777727bd4479aa5 ]
    
    syzbot reported use-after-free in si470x_int_in_callback() [1].  This
    indicates that urb->context, which contains struct si470x_device
    object, is freed when si470x_int_in_callback() is called.
    
    The cause of this issue is that si470x_int_in_callback() is called for
    freed urb.
    
    si470x_usb_driver_probe() calls si470x_start_usb(), which then calls
    usb_submit_urb() and si470x_start().  If si470x_start_usb() fails,
    si470x_usb_driver_probe() doesn't kill urb, but it just frees struct
    si470x_device object, as depicted below:
    
    si470x_usb_driver_probe()
      ...
      si470x_start_usb()
        ...
        usb_submit_urb()
        retval = si470x_start()
        return retval
      if (retval < 0)
        free struct si470x_device object, but don't kill urb
    
    This patch fixes this issue by killing urb when si470x_start_usb()
    fails and urb is submitted.  If si470x_start_usb() fails and urb is
    not submitted, i.e. submitting usb fails, it just frees struct
    si470x_device object.
    
    Reported-by: syzbot+9ca7a12fd736d93e0232@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=94ed6dddd5a55e90fd4bab942aa4bb297741d977 [1]
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 623cdf261f9fe203ed835a0b61ef77513c6cfcc0
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Nov 11 17:10:33 2022 +0900

    mmc: f-sdh30: Add quirks for broken timeout clock capability
    
    [ Upstream commit aae9d3a440736691b3c1cb09ae2c32c4f1ee2e67 ]
    
    There is a case where the timeout clock is not supplied to the capability.
    Add a quirk for that.
    
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Acked-by: Jassi Brar <jaswinder.singh@linaro.org>
    Link: https://lore.kernel.org/r/20221111081033.3813-7-hayashi.kunihiko@socionext.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 654870789c3c1b9763316ef1c71d7a449127b175
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Nov 17 10:29:40 2022 +0800

    blk-mq: fix possible memleak when register 'hctx' failed
    
    [ Upstream commit 4b7a21c57b14fbcd0e1729150189e5933f5088e9 ]
    
    There's issue as follows when do fault injection test:
    unreferenced object 0xffff888132a9f400 (size 512):
      comm "insmod", pid 308021, jiffies 4324277909 (age 509.733s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 08 f4 a9 32 81 88 ff ff  ...........2....
        08 f4 a9 32 81 88 ff ff 00 00 00 00 00 00 00 00  ...2............
      backtrace:
        [<00000000e8952bb4>] kmalloc_node_trace+0x22/0xa0
        [<00000000f9980e0f>] blk_mq_alloc_and_init_hctx+0x3f1/0x7e0
        [<000000002e719efa>] blk_mq_realloc_hw_ctxs+0x1e6/0x230
        [<000000004f1fda40>] blk_mq_init_allocated_queue+0x27e/0x910
        [<00000000287123ec>] __blk_mq_alloc_disk+0x67/0xf0
        [<00000000a2a34657>] 0xffffffffa2ad310f
        [<00000000b173f718>] 0xffffffffa2af824a
        [<0000000095a1dabb>] do_one_initcall+0x87/0x2a0
        [<00000000f32fdf93>] do_init_module+0xdf/0x320
        [<00000000cbe8541e>] load_module+0x3006/0x3390
        [<0000000069ed1bdb>] __do_sys_finit_module+0x113/0x1b0
        [<00000000a1a29ae8>] do_syscall_64+0x35/0x80
        [<000000009cd878b0>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Fault injection context as follows:
     kobject_add
     blk_mq_register_hctx
     blk_mq_sysfs_register
     blk_register_queue
     device_add_disk
     null_add_dev.part.0 [null_blk]
    
    As 'blk_mq_register_hctx' may already add some objects when failed halfway,
    but there isn't do fallback, caller don't know which objects add failed.
    To solve above issue just do fallback when add objects failed halfway in
    'blk_mq_register_hctx'.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20221117022940.873959-1-yebin@huaweicloud.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 733bc9e226da2a7f43b10031b8ebfc26d89ec4bd
Author: Mazin Al Haddad <mazinalhaddad05@gmail.com>
Date:   Wed Aug 24 02:21:52 2022 +0100

    media: dvb-usb: fix memory leak in dvb_usb_adapter_init()
    
    [ Upstream commit 94d90fb06b94a90c176270d38861bcba34ce377d ]
    
    Syzbot reports a memory leak in "dvb_usb_adapter_init()".
    The leak is due to not accounting for and freeing current iteration's
    adapter->priv in case of an error. Currently if an error occurs,
    it will exit before incrementing "num_adapters_initalized",
    which is used as a reference counter to free all adap->priv
    in "dvb_usb_adapter_exit()". There are multiple error paths that
    can exit from before incrementing the counter. Including the
    error handling paths for "dvb_usb_adapter_stream_init()",
    "dvb_usb_adapter_dvb_init()" and "dvb_usb_adapter_frontend_init()"
    within "dvb_usb_adapter_init()".
    
    This means that in case of an error in any of these functions the
    current iteration is not accounted for and the current iteration's
    adap->priv is not freed.
    
    Fix this by freeing the current iteration's adap->priv in the
    "stream_init_err:" label in the error path. The rest of the
    (accounted for) adap->priv objects are freed in dvb_usb_adapter_exit()
    as expected using the num_adapters_initalized variable.
    
    Syzbot report:
    
    BUG: memory leak
    unreferenced object 0xffff8881172f1a00 (size 512):
      comm "kworker/0:2", pid 139, jiffies 4294994873 (age 10.960s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    backtrace:
        [<ffffffff844af012>] dvb_usb_adapter_init drivers/media/usb/dvb-usb/dvb-usb-init.c:75 [inline]
        [<ffffffff844af012>] dvb_usb_init drivers/media/usb/dvb-usb/dvb-usb-init.c:184 [inline]
        [<ffffffff844af012>] dvb_usb_device_init.cold+0x4e5/0x79e drivers/media/usb/dvb-usb/dvb-usb-init.c:308
        [<ffffffff830db21d>] dib0700_probe+0x8d/0x1b0 drivers/media/usb/dvb-usb/dib0700_core.c:883
        [<ffffffff82d3fdc7>] usb_probe_interface+0x177/0x370 drivers/usb/core/driver.c:396
        [<ffffffff8274ab37>] call_driver_probe drivers/base/dd.c:542 [inline]
        [<ffffffff8274ab37>] really_probe.part.0+0xe7/0x310 drivers/base/dd.c:621
        [<ffffffff8274ae6c>] really_probe drivers/base/dd.c:583 [inline]
        [<ffffffff8274ae6c>] __driver_probe_device+0x10c/0x1e0 drivers/base/dd.c:752
        [<ffffffff8274af6a>] driver_probe_device+0x2a/0x120 drivers/base/dd.c:782
        [<ffffffff8274b786>] __device_attach_driver+0xf6/0x140 drivers/base/dd.c:899
        [<ffffffff82747c87>] bus_for_each_drv+0xb7/0x100 drivers/base/bus.c:427
        [<ffffffff8274b352>] __device_attach+0x122/0x260 drivers/base/dd.c:970
        [<ffffffff827498f6>] bus_probe_device+0xc6/0xe0 drivers/base/bus.c:487
        [<ffffffff82745cdb>] device_add+0x5fb/0xdf0 drivers/base/core.c:3405
        [<ffffffff82d3d202>] usb_set_configuration+0x8f2/0xb80 drivers/usb/core/message.c:2170
        [<ffffffff82d4dbfc>] usb_generic_driver_probe+0x8c/0xc0 drivers/usb/core/generic.c:238
        [<ffffffff82d3f49c>] usb_probe_device+0x5c/0x140 drivers/usb/core/driver.c:293
        [<ffffffff8274ab37>] call_driver_probe drivers/base/dd.c:542 [inline]
        [<ffffffff8274ab37>] really_probe.part.0+0xe7/0x310 drivers/base/dd.c:621
        [<ffffffff8274ae6c>] really_probe drivers/base/dd.c:583 [inline]
        [<ffffffff8274ae6c>] __driver_probe_device+0x10c/0x1e0 drivers/base/dd.c:752
    
    Link: https://syzkaller.appspot.com/bug?extid=f66dd31987e6740657be
    Reported-and-tested-by: syzbot+f66dd31987e6740657be@syzkaller.appspotmail.com
    
    Link: https://lore.kernel.org/linux-media/20220824012152.539788-1-mazinalhaddad05@gmail.com
    Signed-off-by: Mazin Al Haddad <mazinalhaddad05@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afccb6ac63fc4328bc61ba086a3cad30054d87c1
Author: Yan Lei <yan_lei@dahuatech.com>
Date:   Sun Apr 10 07:19:25 2022 +0100

    media: dvb-frontends: fix leak of memory fw
    
    [ Upstream commit a15fe8d9f1bf460a804bcf18a890bfd2cf0d5caa ]
    
    Link: https://lore.kernel.org/linux-media/20220410061925.4107-1-chinayanlei2002@163.com
    Signed-off-by: Yan Lei <yan_lei@dahuatech.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e387a25552951802102e279931d6f7dd2ecc34c1
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Nov 21 10:29:13 2022 -0800

    ppp: associate skb with a device at tx
    
    [ Upstream commit 9f225444467b98579cf28d94f4ad053460dfdb84 ]
    
    Syzkaller triggered flow dissector warning with the following:
    
    r0 = openat$ppp(0xffffffffffffff9c, &(0x7f0000000000), 0xc0802, 0x0)
    ioctl$PPPIOCNEWUNIT(r0, 0xc004743e, &(0x7f00000000c0))
    ioctl$PPPIOCSACTIVE(r0, 0x40107446, &(0x7f0000000240)={0x2, &(0x7f0000000180)=[{0x20, 0x0, 0x0, 0xfffff034}, {0x6}]})
    pwritev(r0, &(0x7f0000000040)=[{&(0x7f0000000140)='\x00!', 0x2}], 0x1, 0x0, 0x0)
    
    [    9.485814] WARNING: CPU: 3 PID: 329 at net/core/flow_dissector.c:1016 __skb_flow_dissect+0x1ee0/0x1fa0
    [    9.485929]  skb_get_poff+0x53/0xa0
    [    9.485937]  bpf_skb_get_pay_offset+0xe/0x20
    [    9.485944]  ? ppp_send_frame+0xc2/0x5b0
    [    9.485949]  ? _raw_spin_unlock_irqrestore+0x40/0x60
    [    9.485958]  ? __ppp_xmit_process+0x7a/0xe0
    [    9.485968]  ? ppp_xmit_process+0x5b/0xb0
    [    9.485974]  ? ppp_write+0x12a/0x190
    [    9.485981]  ? do_iter_write+0x18e/0x2d0
    [    9.485987]  ? __import_iovec+0x30/0x130
    [    9.485997]  ? do_pwritev+0x1b6/0x240
    [    9.486016]  ? trace_hardirqs_on+0x47/0x50
    [    9.486023]  ? __x64_sys_pwritev+0x24/0x30
    [    9.486026]  ? do_syscall_64+0x3d/0x80
    [    9.486031]  ? entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Flow dissector tries to find skb net namespace either via device
    or via socket. Neigher is set in ppp_send_frame, so let's manually
    use ppp->dev.
    
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: linux-ppp@vger.kernel.org
    Reported-by: syzbot+41cab52ab62ee99ed24a@syzkaller.appspotmail.com
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98f53e591940e4c3818be358c5dc684d5b30cb56
Author: Schspa Shi <schspa@gmail.com>
Date:   Wed Nov 16 19:45:11 2022 +0800

    mrp: introduce active flags to prevent UAF when applicant uninit
    
    [ Upstream commit ab0377803dafc58f1e22296708c1c28e309414d6 ]
    
    The caller of del_timer_sync must prevent restarting of the timer, If
    we have no this synchronization, there is a small probability that the
    cancellation will not be successful.
    
    And syzbot report the fellowing crash:
    ==================================================================
    BUG: KASAN: use-after-free in hlist_add_head include/linux/list.h:929 [inline]
    BUG: KASAN: use-after-free in enqueue_timer+0x18/0xa4 kernel/time/timer.c:605
    Write at addr f9ff000024df6058 by task syz-fuzzer/2256
    Pointer tag: [f9], memory tag: [fe]
    
    CPU: 1 PID: 2256 Comm: syz-fuzzer Not tainted 6.1.0-rc5-syzkaller-00008-
    ge01d50cbd6ee #0
    Hardware name: linux,dummy-virt (DT)
    Call trace:
     dump_backtrace.part.0+0xe0/0xf0 arch/arm64/kernel/stacktrace.c:156
     dump_backtrace arch/arm64/kernel/stacktrace.c:162 [inline]
     show_stack+0x18/0x40 arch/arm64/kernel/stacktrace.c:163
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x68/0x84 lib/dump_stack.c:106
     print_address_description mm/kasan/report.c:284 [inline]
     print_report+0x1a8/0x4a0 mm/kasan/report.c:395
     kasan_report+0x94/0xb4 mm/kasan/report.c:495
     __do_kernel_fault+0x164/0x1e0 arch/arm64/mm/fault.c:320
     do_bad_area arch/arm64/mm/fault.c:473 [inline]
     do_tag_check_fault+0x78/0x8c arch/arm64/mm/fault.c:749
     do_mem_abort+0x44/0x94 arch/arm64/mm/fault.c:825
     el1_abort+0x40/0x60 arch/arm64/kernel/entry-common.c:367
     el1h_64_sync_handler+0xd8/0xe4 arch/arm64/kernel/entry-common.c:427
     el1h_64_sync+0x64/0x68 arch/arm64/kernel/entry.S:576
     hlist_add_head include/linux/list.h:929 [inline]
     enqueue_timer+0x18/0xa4 kernel/time/timer.c:605
     mod_timer+0x14/0x20 kernel/time/timer.c:1161
     mrp_periodic_timer_arm net/802/mrp.c:614 [inline]
     mrp_periodic_timer+0xa0/0xc0 net/802/mrp.c:627
     call_timer_fn.constprop.0+0x24/0x80 kernel/time/timer.c:1474
     expire_timers+0x98/0xc4 kernel/time/timer.c:1519
    
    To fix it, we can introduce a new active flags to make sure the timer will
    not restart.
    
    Reported-by: syzbot+6fd64001c20aa99e34a4@syzkaller.appspotmail.com
    
    Signed-off-by: Schspa Shi <schspa@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d684ceb77311410aeaf5189d321f9f564838c49a
Author: Jiang Li <jiang.li@ugreen.com>
Date:   Mon Nov 7 22:16:59 2022 +0800

    md/raid1: stop mdx_raid1 thread when raid1 array run failed
    
    [ Upstream commit b611ad14006e5be2170d9e8e611bf49dff288911 ]
    
    fail run raid1 array when we assemble array with the inactive disk only,
    but the mdx_raid1 thread were not stop, Even if the associated resources
    have been released. it will caused a NULL dereference when we do poweroff.
    
    This causes the following Oops:
        [  287.587787] BUG: kernel NULL pointer dereference, address: 0000000000000070
        [  287.594762] #PF: supervisor read access in kernel mode
        [  287.599912] #PF: error_code(0x0000) - not-present page
        [  287.605061] PGD 0 P4D 0
        [  287.607612] Oops: 0000 [#1] SMP NOPTI
        [  287.611287] CPU: 3 PID: 5265 Comm: md0_raid1 Tainted: G     U            5.10.146 #0
        [  287.619029] Hardware name: xxxxxxx/To be filled by O.E.M, BIOS 5.19 06/16/2022
        [  287.626775] RIP: 0010:md_check_recovery+0x57/0x500 [md_mod]
        [  287.632357] Code: fe 01 00 00 48 83 bb 10 03 00 00 00 74 08 48 89 ......
        [  287.651118] RSP: 0018:ffffc90000433d78 EFLAGS: 00010202
        [  287.656347] RAX: 0000000000000000 RBX: ffff888105986800 RCX: 0000000000000000
        [  287.663491] RDX: ffffc90000433bb0 RSI: 00000000ffffefff RDI: ffff888105986800
        [  287.670634] RBP: ffffc90000433da0 R08: 0000000000000000 R09: c0000000ffffefff
        [  287.677771] R10: 0000000000000001 R11: ffffc90000433ba8 R12: ffff888105986800
        [  287.684907] R13: 0000000000000000 R14: fffffffffffffe00 R15: ffff888100b6b500
        [  287.692052] FS:  0000000000000000(0000) GS:ffff888277f80000(0000) knlGS:0000000000000000
        [  287.700149] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        [  287.705897] CR2: 0000000000000070 CR3: 000000000320a000 CR4: 0000000000350ee0
        [  287.713033] Call Trace:
        [  287.715498]  raid1d+0x6c/0xbbb [raid1]
        [  287.719256]  ? __schedule+0x1ff/0x760
        [  287.722930]  ? schedule+0x3b/0xb0
        [  287.726260]  ? schedule_timeout+0x1ed/0x290
        [  287.730456]  ? __switch_to+0x11f/0x400
        [  287.734219]  md_thread+0xe9/0x140 [md_mod]
        [  287.738328]  ? md_thread+0xe9/0x140 [md_mod]
        [  287.742601]  ? wait_woken+0x80/0x80
        [  287.746097]  ? md_register_thread+0xe0/0xe0 [md_mod]
        [  287.751064]  kthread+0x11a/0x140
        [  287.754300]  ? kthread_park+0x90/0x90
        [  287.757974]  ret_from_fork+0x1f/0x30
    
    In fact, when raid1 array run fail, we need to do
    md_unregister_thread() before raid1_free().
    
    Signed-off-by: Jiang Li <jiang.li@ugreen.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7c2d8c0676eef9103ae0643f5cbae8b62f902f7
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 7 21:25:45 2022 +0200

    drm/sti: Use drm_mode_copy()
    
    [ Upstream commit 442cf8e22ba25a77cb9092d78733fdbac9844e50 ]
    
    struct drm_display_mode embeds a list head, so overwriting
    the full struct with another one will corrupt the list
    (if the destination mode is on a list). Use drm_mode_copy()
    instead which explicitly preserves the list head of
    the destination mode.
    
    Even if we know the destination mode is not on any list
    using drm_mode_copy() seems decent as it sets a good
    example. Bad examples of not using it might eventually
    get copied into code where preserving the list head
    actually matters.
    
    Obviously one case not covered here is when the mode
    itself is embedded in a larger structure and the whole
    structure is copied. But if we are careful when copying
    into modes embedded in structures I think we can be a
    little more reassured that bogus list heads haven't been
    propagated in.
    
    @is_mode_copy@
    @@
    drm_mode_copy(...)
    {
    ...
    }
    
    @depends on !is_mode_copy@
    struct drm_display_mode *mode;
    expression E, S;
    @@
    (
    - *mode = E
    + drm_mode_copy(mode, &E)
    |
    - memcpy(mode, E, S)
    + drm_mode_copy(mode, E)
    )
    
    @depends on !is_mode_copy@
    struct drm_display_mode mode;
    expression E;
    @@
    (
    - mode = E
    + drm_mode_copy(&mode, &E)
    |
    - memcpy(&mode, E, S)
    + drm_mode_copy(&mode, E)
    )
    
    @@
    struct drm_display_mode *mode;
    @@
    - &*mode
    + mode
    
    Cc: Alain Volmat <alain.volmat@foss.st.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221107192545.9896-8-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b4da3fcd513b8e67823eb80da37aad99b3339c1
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Nov 3 10:01:30 2022 -0700

    s390/lcs: Fix return type of lcs_start_xmit()
    
    [ Upstream commit bb16db8393658e0978c3f0d30ae069e878264fa3 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/s390/net/lcs.c:2090:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = lcs_start_xmit,
                                        ^~~~~~~~~~~~~~
      drivers/s390/net/lcs.c:2097:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = lcs_start_xmit,
                                        ^~~~~~~~~~~~~~
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of lcs_start_xmit() to
    match the prototype's to resolve the warning and potential CFI failure,
    should s390 select ARCH_SUPPORTS_CFI_CLANG in the future.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f13d870fce90f01cf930bfaffecc8185ae0be21c
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Nov 3 10:01:29 2022 -0700

    s390/netiucv: Fix return type of netiucv_tx()
    
    [ Upstream commit 88d86d18d7cf7e9137c95f9d212bb9fff8a1b4be ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/s390/net/netiucv.c:1854:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = netiucv_tx,
                                        ^~~~~~~~~~
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of netiucv_tx() to
    match the prototype's to resolve the warning and potential CFI failure,
    should s390 select ARCH_SUPPORTS_CFI_CLANG in the future.
    
    Additionally, while in the area, remove a comment block that is no
    longer relevant.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 636a7013b8c08e43adaa86373c13f97b9b52f59b
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Nov 3 10:01:28 2022 -0700

    s390/ctcm: Fix return type of ctc{mp,}m_tx()
    
    [ Upstream commit aa5bf80c3c067b82b4362cd6e8e2194623bcaca6 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/s390/net/ctcm_main.c:1064:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = ctcm_tx,
                                        ^~~~~~~
      drivers/s390/net/ctcm_main.c:1072:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = ctcmpc_tx,
                                        ^~~~~~~~~
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of ctc{mp,}m_tx() to
    match the prototype's to resolve the warning and potential CFI failure,
    should s390 select ARCH_SUPPORTS_CFI_CLANG in the future.
    
    Additionally, while in the area, remove a comment block that is no
    longer relevant.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64ca1969599857143e91aeec4440640656100803
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Oct 18 02:25:24 2022 -0700

    igb: Do not free q_vector unless new one was allocated
    
    [ Upstream commit 0668716506ca66f90d395f36ccdaebc3e0e84801 ]
    
    Avoid potential use-after-free condition under memory pressure. If the
    kzalloc() fails, q_vector will be freed but left in the original
    adapter->q_vector[v_idx] array position.
    
    Cc: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Cc: Tony Nguyen <anthony.l.nguyen@intel.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: intel-wired-lan@lists.osuosl.org
    Cc: netdev@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1db036d13e10809943c2dce553e2fa7fc9c6cd80
Author: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
Date:   Mon Oct 24 16:13:29 2022 +0900

    wifi: brcmfmac: Fix potential shift-out-of-bounds in brcmf_fw_alloc_request()
    
    [ Upstream commit 81d17f6f3331f03c8eafdacea68ab773426c1e3c ]
    
    This patch fixes a shift-out-of-bounds in brcmfmac that occurs in
    BIT(chiprev) when a 'chiprev' provided by the device is too large.
    It should also not be equal to or greater than BITS_PER_TYPE(u32)
    as we do bitwise AND with a u32 variable and BIT(chiprev). The patch
    adds a check that makes the function return NULL if that is the case.
    Note that the NULL case is later handled by the bus-specific caller,
    brcmf_usb_probe_cb() or brcmf_usb_reset_resume(), for example.
    
    Found by a modified version of syzkaller.
    
    UBSAN: shift-out-of-bounds in drivers/net/wireless/broadcom/brcm80211/brcmfmac/firmware.c
    shift exponent 151055786 is too large for 64-bit type 'long unsigned int'
    CPU: 0 PID: 1885 Comm: kworker/0:2 Tainted: G           O      5.14.0+ #132
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Workqueue: usb_hub_wq hub_event
    Call Trace:
     dump_stack_lvl+0x57/0x7d
     ubsan_epilogue+0x5/0x40
     __ubsan_handle_shift_out_of_bounds.cold+0x53/0xdb
     ? lock_chain_count+0x20/0x20
     brcmf_fw_alloc_request.cold+0x19/0x3ea
     ? brcmf_fw_get_firmwares+0x250/0x250
     ? brcmf_usb_ioctl_resp_wait+0x1a7/0x1f0
     brcmf_usb_get_fwname+0x114/0x1a0
     ? brcmf_usb_reset_resume+0x120/0x120
     ? number+0x6c4/0x9a0
     brcmf_c_process_clm_blob+0x168/0x590
     ? put_dec+0x90/0x90
     ? enable_ptr_key_workfn+0x20/0x20
     ? brcmf_common_pd_remove+0x50/0x50
     ? rcu_read_lock_sched_held+0xa1/0xd0
     brcmf_c_preinit_dcmds+0x673/0xc40
     ? brcmf_c_set_joinpref_default+0x100/0x100
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lock_acquire+0x19d/0x4e0
     ? find_held_lock+0x2d/0x110
     ? brcmf_usb_deq+0x1cc/0x260
     ? mark_held_locks+0x9f/0xe0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     ? _raw_spin_unlock_irqrestore+0x47/0x50
     ? trace_hardirqs_on+0x1c/0x120
     ? brcmf_usb_deq+0x1a7/0x260
     ? brcmf_usb_rx_fill_all+0x5a/0xf0
     brcmf_attach+0x246/0xd40
     ? wiphy_new_nm+0x1476/0x1d50
     ? kmemdup+0x30/0x40
     brcmf_usb_probe+0x12de/0x1690
     ? brcmf_usbdev_qinit.constprop.0+0x470/0x470
     usb_probe_interface+0x25f/0x710
     really_probe+0x1be/0xa90
     __driver_probe_device+0x2ab/0x460
     ? usb_match_id.part.0+0x88/0xc0
     driver_probe_device+0x49/0x120
     __device_attach_driver+0x18a/0x250
     ? driver_allows_async_probing+0x120/0x120
     bus_for_each_drv+0x123/0x1a0
     ? bus_rescan_devices+0x20/0x20
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     ? trace_hardirqs_on+0x1c/0x120
     __device_attach+0x207/0x330
     ? device_bind_driver+0xb0/0xb0
     ? kobject_uevent_env+0x230/0x12c0
     bus_probe_device+0x1a2/0x260
     device_add+0xa61/0x1ce0
     ? __mutex_unlock_slowpath+0xe7/0x660
     ? __fw_devlink_link_to_suppliers+0x550/0x550
     usb_set_configuration+0x984/0x1770
     ? kernfs_create_link+0x175/0x230
     usb_generic_driver_probe+0x69/0x90
     usb_probe_device+0x9c/0x220
     really_probe+0x1be/0xa90
     __driver_probe_device+0x2ab/0x460
     driver_probe_device+0x49/0x120
     __device_attach_driver+0x18a/0x250
     ? driver_allows_async_probing+0x120/0x120
     bus_for_each_drv+0x123/0x1a0
     ? bus_rescan_devices+0x20/0x20
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     ? trace_hardirqs_on+0x1c/0x120
     __device_attach+0x207/0x330
     ? device_bind_driver+0xb0/0xb0
     ? kobject_uevent_env+0x230/0x12c0
     bus_probe_device+0x1a2/0x260
     device_add+0xa61/0x1ce0
     ? __fw_devlink_link_to_suppliers+0x550/0x550
     usb_new_device.cold+0x463/0xf66
     ? hub_disconnect+0x400/0x400
     ? _raw_spin_unlock_irq+0x24/0x30
     hub_event+0x10d5/0x3330
     ? hub_port_debounce+0x280/0x280
     ? __lock_acquire+0x1671/0x5790
     ? wq_calc_node_cpumask+0x170/0x2a0
     ? lock_release+0x640/0x640
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     process_one_work+0x873/0x13e0
     ? lock_release+0x640/0x640
     ? pwq_dec_nr_in_flight+0x320/0x320
     ? rwlock_bug.part.0+0x90/0x90
     worker_thread+0x8b/0xd10
     ? __kthread_parkme+0xd9/0x1d0
     ? process_one_work+0x13e0/0x13e0
     kthread+0x379/0x450
     ? _raw_spin_unlock_irq+0x24/0x30
     ? set_kthread_struct+0x100/0x100
     ret_from_fork+0x1f/0x30
    
    Reported-by: Dokyung Song <dokyungs@yonsei.ac.kr>
    Reported-by: Jisoo Jang <jisoo.jang@yonsei.ac.kr>
    Reported-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Signed-off-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20221024071329.504277-1-linuxlovemin@yonsei.ac.kr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d467bbca62091bcc382742bf640cd215f99daf37
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 09:06:10 2022 -0700

    hamradio: baycom_epp: Fix return type of baycom_send_packet()
    
    [ Upstream commit c5733e5b15d91ab679646ec3149e192996a27d5d ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/net/hamradio/baycom_epp.c:1119:25: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit      = baycom_send_packet,
                                    ^~~~~~~~~~~~~~~~~~
      1 error generated.
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of baycom_send_packet()
    to match the prototype's to resolve the warning and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102160610.1186145-1-nathan@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a447479ea2cf35603b5739ea947885024b901222
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 09:09:33 2022 -0700

    net: ethernet: ti: Fix return type of netcp_ndo_start_xmit()
    
    [ Upstream commit 63fe6ff674a96cfcfc0fa8df1051a27aa31c70b4 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/net/ethernet/ti/netcp_core.c:1944:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = netcp_ndo_start_xmit,
                                        ^~~~~~~~~~~~~~~~~~~~
      1 error generated.
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of
    netcp_ndo_start_xmit() to match the prototype's to resolve the warning
    and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102160933.1601260-1-nathan@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fa7cbdbe383c9322d68589d44f6fd6e2f6f51ec
Author: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
Date:   Fri Oct 7 17:26:17 2022 +0800

    ipmi: fix memleak when unload ipmi driver
    
    [ Upstream commit 36992eb6b9b83f7f9cdc8e74fb5799d7b52e83e9 ]
    
    After the IPMI disconnect problem, the memory kept rising and we tried
    to unload the driver to free the memory. However, only part of the
    free memory is recovered after the driver is uninstalled. Using
    ebpf to hook free functions, we find that neither ipmi_user nor
    ipmi_smi_msg is free, only ipmi_recv_msg is free.
    
    We find that the deliver_smi_err_response call in clean_smi_msgs does
    the destroy processing on each message from the xmit_msg queue without
    checking the return value and free ipmi_smi_msg.
    
    deliver_smi_err_response is called only at this location. Adding the
    free handling has no effect.
    
    To verify, try using ebpf to trace the free function.
    
      $ bpftrace -e 'kretprobe:ipmi_alloc_recv_msg {printf("alloc rcv
          %p\n",retval);} kprobe:free_recv_msg {printf("free recv %p\n",
          arg0)} kretprobe:ipmi_alloc_smi_msg {printf("alloc smi %p\n",
            retval);} kprobe:free_smi_msg {printf("free smi  %p\n",arg0)}'
    
    Signed-off-by: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
    Message-Id: <20221007092617.87597-4-zhangyuchen.lcr@bytedance.com>
    [Fixed the comment above handle_one_recv_msg().]
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9ba3fbf6a488da6cad1d304c5234bd8d729eba3
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Mon Oct 10 03:32:23 2022 +0900

    wifi: ar5523: Fix use-after-free on ar5523_cmd() timed out
    
    [ Upstream commit b6702a942a069c2a975478d719e98d83cdae1797 ]
    
    syzkaller reported use-after-free with the stack trace like below [1]:
    
    [   38.960489][    C3] ==================================================================
    [   38.963216][    C3] BUG: KASAN: use-after-free in ar5523_cmd_tx_cb+0x220/0x240
    [   38.964950][    C3] Read of size 8 at addr ffff888048e03450 by task swapper/3/0
    [   38.966363][    C3]
    [   38.967053][    C3] CPU: 3 PID: 0 Comm: swapper/3 Not tainted 6.0.0-09039-ga6afa4199d3d-dirty #18
    [   38.968464][    C3] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.0-1.fc36 04/01/2014
    [   38.969959][    C3] Call Trace:
    [   38.970841][    C3]  <IRQ>
    [   38.971663][    C3]  dump_stack_lvl+0xfc/0x174
    [   38.972620][    C3]  print_report.cold+0x2c3/0x752
    [   38.973626][    C3]  ? ar5523_cmd_tx_cb+0x220/0x240
    [   38.974644][    C3]  kasan_report+0xb1/0x1d0
    [   38.975720][    C3]  ? ar5523_cmd_tx_cb+0x220/0x240
    [   38.976831][    C3]  ar5523_cmd_tx_cb+0x220/0x240
    [   38.978412][    C3]  __usb_hcd_giveback_urb+0x353/0x5b0
    [   38.979755][    C3]  usb_hcd_giveback_urb+0x385/0x430
    [   38.981266][    C3]  dummy_timer+0x140c/0x34e0
    [   38.982925][    C3]  ? notifier_call_chain+0xb5/0x1e0
    [   38.984761][    C3]  ? rcu_read_lock_sched_held+0xb/0x60
    [   38.986242][    C3]  ? lock_release+0x51c/0x790
    [   38.987323][    C3]  ? _raw_read_unlock_irqrestore+0x37/0x70
    [   38.988483][    C3]  ? __wake_up_common_lock+0xde/0x130
    [   38.989621][    C3]  ? reacquire_held_locks+0x4a0/0x4a0
    [   38.990777][    C3]  ? lock_acquire+0x472/0x550
    [   38.991919][    C3]  ? rcu_read_lock_sched_held+0xb/0x60
    [   38.993138][    C3]  ? lock_acquire+0x472/0x550
    [   38.994890][    C3]  ? dummy_urb_enqueue+0x860/0x860
    [   38.996266][    C3]  ? do_raw_spin_unlock+0x16f/0x230
    [   38.997670][    C3]  ? dummy_urb_enqueue+0x860/0x860
    [   38.999116][    C3]  call_timer_fn+0x1a0/0x6a0
    [   39.000668][    C3]  ? add_timer_on+0x4a0/0x4a0
    [   39.002137][    C3]  ? reacquire_held_locks+0x4a0/0x4a0
    [   39.003809][    C3]  ? __next_timer_interrupt+0x226/0x2a0
    [   39.005509][    C3]  __run_timers.part.0+0x69a/0xac0
    [   39.007025][    C3]  ? dummy_urb_enqueue+0x860/0x860
    [   39.008716][    C3]  ? call_timer_fn+0x6a0/0x6a0
    [   39.010254][    C3]  ? cpuacct_percpu_seq_show+0x10/0x10
    [   39.011795][    C3]  ? kvm_sched_clock_read+0x14/0x40
    [   39.013277][    C3]  ? sched_clock_cpu+0x69/0x2b0
    [   39.014724][    C3]  run_timer_softirq+0xb6/0x1d0
    [   39.016196][    C3]  __do_softirq+0x1d2/0x9be
    [   39.017616][    C3]  __irq_exit_rcu+0xeb/0x190
    [   39.019004][    C3]  irq_exit_rcu+0x5/0x20
    [   39.020361][    C3]  sysvec_apic_timer_interrupt+0x8f/0xb0
    [   39.021965][    C3]  </IRQ>
    [   39.023237][    C3]  <TASK>
    
    In ar5523_probe(), ar5523_host_available() calls ar5523_cmd() as below
    (there are other functions which finally call ar5523_cmd()):
    
    ar5523_probe()
    -> ar5523_host_available()
       -> ar5523_cmd_read()
          -> ar5523_cmd()
    
    If ar5523_cmd() timed out, then ar5523_host_available() failed and
    ar5523_probe() freed the device structure.  So, ar5523_cmd_tx_cb()
    might touch the freed structure.
    
    This patch fixes this issue by canceling in-flight tx cmd if submitted
    urb timed out.
    
    Link: https://syzkaller.appspot.com/bug?id=9e12b2d54300842b71bdd18b54971385ff0d0d3a [1]
    Reported-by: syzbot+95001b1fd6dfcc716c29@syzkaller.appspotmail.com
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221009183223.420015-1-syoshida@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 932f0a5e829fb0b823f96d7fa9a0f4fc96660b77
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Sun Oct 9 00:15:32 2022 +0300

    wifi: ath9k: verify the expected usb_endpoints are present
    
    [ Upstream commit 16ef02bad239f11f322df8425d302be62f0443ce ]
    
    The bug arises when a USB device claims to be an ATH9K but doesn't
    have the expected endpoints. (In this case there was an interrupt
    endpoint where the driver expected a bulk endpoint.) The kernel
    needs to be able to handle such devices without getting an internal error.
    
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 3 PID: 500 at drivers/usb/core/urb.c:493 usb_submit_urb+0xce2/0x1430 drivers/usb/core/urb.c:493
    Modules linked in:
    CPU: 3 PID: 500 Comm: kworker/3:2 Not tainted 5.10.135-syzkaller #0
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Workqueue: events request_firmware_work_func
    RIP: 0010:usb_submit_urb+0xce2/0x1430 drivers/usb/core/urb.c:493
    Call Trace:
     ath9k_hif_usb_alloc_rx_urbs drivers/net/wireless/ath/ath9k/hif_usb.c:908 [inline]
     ath9k_hif_usb_alloc_urbs+0x75e/0x1010 drivers/net/wireless/ath/ath9k/hif_usb.c:1019
     ath9k_hif_usb_dev_init drivers/net/wireless/ath/ath9k/hif_usb.c:1109 [inline]
     ath9k_hif_usb_firmware_cb+0x142/0x530 drivers/net/wireless/ath/ath9k/hif_usb.c:1242
     request_firmware_work_func+0x12e/0x240 drivers/base/firmware_loader/main.c:1097
     process_one_work+0x9af/0x1600 kernel/workqueue.c:2279
     worker_thread+0x61d/0x12f0 kernel/workqueue.c:2425
     kthread+0x3b4/0x4a0 kernel/kthread.c:313
     ret_from_fork+0x22/0x30 arch/x86/entry/entry_64.S:299
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221008211532.74583-1-pchelkin@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c40f2dbae603ef0bd21e87c63f54ec59fd88256
Author: ZhangPeng <zhangpeng362@huawei.com>
Date:   Wed Nov 30 06:59:59 2022 +0000

    hfs: fix OOB Read in __hfs_brec_find
    
    [ Upstream commit 8d824e69d9f3fa3121b2dda25053bae71e2460d2 ]
    
    Syzbot reported a OOB read bug:
    
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in hfs_strcmp+0x117/0x190
    fs/hfs/string.c:84
    Read of size 1 at addr ffff88807eb62c4e by task kworker/u4:1/11
    CPU: 1 PID: 11 Comm: kworker/u4:1 Not tainted
    6.1.0-rc6-syzkaller-00308-g644e9524388a #0
    Workqueue: writeback wb_workfn (flush-7:0)
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1b1/0x28e lib/dump_stack.c:106
     print_address_description+0x74/0x340 mm/kasan/report.c:284
     print_report+0x107/0x1f0 mm/kasan/report.c:395
     kasan_report+0xcd/0x100 mm/kasan/report.c:495
     hfs_strcmp+0x117/0x190 fs/hfs/string.c:84
     __hfs_brec_find+0x213/0x5c0 fs/hfs/bfind.c:75
     hfs_brec_find+0x276/0x520 fs/hfs/bfind.c:138
     hfs_write_inode+0x34c/0xb40 fs/hfs/inode.c:462
     write_inode fs/fs-writeback.c:1440 [inline]
    
    If the input inode of hfs_write_inode() is incorrect:
    struct inode
      struct hfs_inode_info
        struct hfs_cat_key
          struct hfs_name
            u8 len # len is greater than HFS_NAMELEN(31) which is the
    maximum length of an HFS filename
    
    OOB read occurred:
    hfs_write_inode()
      hfs_brec_find()
        __hfs_brec_find()
          hfs_cat_keycmp()
            hfs_strcmp() # OOB read occurred due to len is too large
    
    Fix this by adding a Check on len in hfs_write_inode() before calling
    hfs_brec_find().
    
    Link: https://lkml.kernel.org/r/20221130065959.2168236-1-zhangpeng362@huawei.com
    Signed-off-by: ZhangPeng <zhangpeng362@huawei.com>
    Reported-by: <syzbot+e836ff7133ac02be825f@syzkaller.appspotmail.com>
    Cc: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Nanyong Sun <sunnanyong@huawei.com>
    Cc: Viacheslav Dubeyko <slava@dubeyko.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e93f995a591c352d35d89c518c54f790e1537754
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Sat May 15 22:06:31 2021 +0800

    acct: fix potential integer overflow in encode_comp_t()
    
    [ Upstream commit c5f31c655bcc01b6da53b836ac951c1556245305 ]
    
    The integer overflow is descripted with following codes:
      > 317 static comp_t encode_comp_t(u64 value)
      > 318 {
      > 319         int exp, rnd;
        ......
      > 341         exp <<= MANTSIZE;
      > 342         exp += value;
      > 343         return exp;
      > 344 }
    
    Currently comp_t is defined as type of '__u16', but the variable 'exp' is
    type of 'int', so overflow would happen when variable 'exp' in line 343 is
    greater than 65535.
    
    Link: https://lkml.kernel.org/r/20210515140631.369106-3-zhengyejian1@huawei.com
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Cc: Hanjun Guo <guohanjun@huawei.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Zhang Jinhao <zhangjinhao2@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b0ea3df56cccd53398d0289f399f19d43136b2e
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Thu Oct 27 13:43:05 2022 +0900

    nilfs2: fix shift-out-of-bounds/overflow in nilfs_sb2_bad_offset()
    
    [ Upstream commit 610a2a3d7d8be3537458a378ec69396a76c385b6 ]
    
    Patch series "nilfs2: fix UBSAN shift-out-of-bounds warnings on mount
    time".
    
    The first patch fixes a bug reported by syzbot, and the second one fixes
    the remaining bug of the same kind.  Although they are triggered by the
    same super block data anomaly, I divided it into the above two because the
    details of the issues and how to fix it are different.
    
    Both are required to eliminate the shift-out-of-bounds issues at mount
    time.
    
    This patch (of 2):
    
    If the block size exponent information written in an on-disk superblock is
    corrupted, nilfs_sb2_bad_offset helper function can trigger
    shift-out-of-bounds warning followed by a kernel panic (if panic_on_warn
    is set):
    
     shift exponent 38983 is too large for 64-bit type 'unsigned long long'
     Call Trace:
      <TASK>
      __dump_stack lib/dump_stack.c:88 [inline]
      dump_stack_lvl+0x1b1/0x28e lib/dump_stack.c:106
      ubsan_epilogue lib/ubsan.c:151 [inline]
      __ubsan_handle_shift_out_of_bounds+0x33d/0x3b0 lib/ubsan.c:322
      nilfs_sb2_bad_offset fs/nilfs2/the_nilfs.c:449 [inline]
      nilfs_load_super_block+0xdf5/0xe00 fs/nilfs2/the_nilfs.c:523
      init_nilfs+0xb7/0x7d0 fs/nilfs2/the_nilfs.c:577
      nilfs_fill_super+0xb1/0x5d0 fs/nilfs2/super.c:1047
      nilfs_mount+0x613/0x9b0 fs/nilfs2/super.c:1317
      ...
    
    In addition, since nilfs_sb2_bad_offset() performs multiplication without
    considering the upper bound, the computation may overflow if the disk
    layout parameters are not normal.
    
    This fixes these issues by inserting preliminary sanity checks for those
    parameters and by converting the comparison from one involving
    multiplication and left bit-shifting to one using division and right
    bit-shifting.
    
    Link: https://lkml.kernel.org/r/20221027044306.42774-1-konishi.ryusuke@gmail.com
    Link: https://lkml.kernel.org/r/20221027044306.42774-2-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+e91619dd4c11c4960706@syzkaller.appspotmail.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38e251d356a01b61a86cb35213cafd7e8fe7090c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Nov 7 18:42:36 2022 +0100

    ACPICA: Fix error code path in acpi_ds_call_control_method()
    
    [ Upstream commit 404ec60438add1afadaffaed34bb5fe4ddcadd40 ]
    
    A use-after-free in acpi_ps_parse_aml() after a failing invocaion of
    acpi_ds_call_control_method() is reported by KASAN [1] and code
    inspection reveals that next_walk_state pushed to the thread by
    acpi_ds_create_walk_state() is freed on errors, but it is not popped
    from the thread beforehand.  Thus acpi_ds_get_current_walk_state()
    called by acpi_ps_parse_aml() subsequently returns it as the new
    walk state which is incorrect.
    
    To address this, make acpi_ds_call_control_method() call
    acpi_ds_pop_walk_state() to pop next_walk_state from the thread before
    returning an error.
    
    Link: https://lore.kernel.org/linux-acpi/20221019073443.248215-1-chenzhongjin@huawei.com/ # [1]
    Reported-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8d4d0bac603616e2fa4a3907e81ed13f8f3c380
Author: Hoi Pok Wu <wuhoipok@gmail.com>
Date:   Tue Oct 25 23:20:45 2022 +0800

    fs: jfs: fix shift-out-of-bounds in dbDiscardAG
    
    [ Upstream commit 25e70c6162f207828dd405b432d8f2a98dbf7082 ]
    
    This should be applied to most URSAN bugs found recently by syzbot,
    by guarding the dbMount. As syzbot feeding rubbish into the bmap
    descriptor.
    
    Signed-off-by: Hoi Pok Wu <wuhoipok@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78eba2778ae10fb2a9d450e14d26eb6f6bf1f906
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Sun Oct 23 18:57:41 2022 +0900

    udf: Avoid double brelse() in udf_rename()
    
    [ Upstream commit c791730f2554a9ebb8f18df9368dc27d4ebc38c2 ]
    
    syzbot reported a warning like below [1]:
    
    VFS: brelse: Trying to free free buffer
    WARNING: CPU: 2 PID: 7301 at fs/buffer.c:1145 __brelse+0x67/0xa0
    ...
    Call Trace:
     <TASK>
     invalidate_bh_lru+0x99/0x150
     smp_call_function_many_cond+0xe2a/0x10c0
     ? generic_remap_file_range_prep+0x50/0x50
     ? __brelse+0xa0/0xa0
     ? __mutex_lock+0x21c/0x12d0
     ? smp_call_on_cpu+0x250/0x250
     ? rcu_read_lock_sched_held+0xb/0x60
     ? lock_release+0x587/0x810
     ? __brelse+0xa0/0xa0
     ? generic_remap_file_range_prep+0x50/0x50
     on_each_cpu_cond_mask+0x3c/0x80
     blkdev_flush_mapping+0x13a/0x2f0
     blkdev_put_whole+0xd3/0xf0
     blkdev_put+0x222/0x760
     deactivate_locked_super+0x96/0x160
     deactivate_super+0xda/0x100
     cleanup_mnt+0x222/0x3d0
     task_work_run+0x149/0x240
     ? task_work_cancel+0x30/0x30
     do_exit+0xb29/0x2a40
     ? reacquire_held_locks+0x4a0/0x4a0
     ? do_raw_spin_lock+0x12a/0x2b0
     ? mm_update_next_owner+0x7c0/0x7c0
     ? rwlock_bug.part.0+0x90/0x90
     ? zap_other_threads+0x234/0x2d0
     do_group_exit+0xd0/0x2a0
     __x64_sys_exit_group+0x3a/0x50
     do_syscall_64+0x34/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The cause of the issue is that brelse() is called on both ofibh.sbh
    and ofibh.ebh by udf_find_entry() when it returns NULL.  However,
    brelse() is called by udf_rename(), too.  So, b_count on buffer_head
    becomes unbalanced.
    
    This patch fixes the issue by not calling brelse() by udf_rename()
    when udf_find_entry() returns NULL.
    
    Link: https://syzkaller.appspot.com/bug?id=8297f45698159c6bca8a1f87dc983667c1a1c851 [1]
    Reported-by: syzbot+7902cd7684bc35306224@syzkaller.appspotmail.com
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221023095741.271430-1-syoshida@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3b486946a4e62c7ef6023f7d9c1d049051384ba
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Tue Oct 18 08:48:07 2022 -0500

    fs: jfs: fix shift-out-of-bounds in dbAllocAG
    
    [ Upstream commit 898f706695682b9954f280d95e49fa86ffa55d08 ]
    
    Syzbot found a crash : UBSAN: shift-out-of-bounds in dbAllocAG. The
    underlying bug is the missing check of bmp->db_agl2size. The field can
    be greater than 64 and trigger the shift-out-of-bounds.
    
    Fix this bug by adding a check of bmp->db_agl2size in dbMount since this
    field is used in many following functions. The upper bound for this
    field is L2MAXL2SIZE - L2MAXAG, thanks for the help of Dave Kleikamp.
    Note that, for maintenance, I reorganized error handling code of dbMount.
    
    Reported-by: syzbot+15342c1aa6a00fb7a438@syzkaller.appspotmail.com
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f1a48994b3e516d5c7fd5d12204fdba7a604771
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Wed Nov 2 10:51:23 2022 +0800

    binfmt_misc: fix shift-out-of-bounds in check_special_flags
    
    [ Upstream commit 6a46bf558803dd2b959ca7435a5c143efe837217 ]
    
    UBSAN reported a shift-out-of-bounds warning:
    
     left shift of 1 by 31 places cannot be represented in type 'int'
     Call Trace:
      <TASK>
      __dump_stack lib/dump_stack.c:88 [inline]
      dump_stack_lvl+0x8d/0xcf lib/dump_stack.c:106
      ubsan_epilogue+0xa/0x44 lib/ubsan.c:151
      __ubsan_handle_shift_out_of_bounds+0x1e7/0x208 lib/ubsan.c:322
      check_special_flags fs/binfmt_misc.c:241 [inline]
      create_entry fs/binfmt_misc.c:456 [inline]
      bm_register_write+0x9d3/0xa20 fs/binfmt_misc.c:654
      vfs_write+0x11e/0x580 fs/read_write.c:582
      ksys_write+0xcf/0x120 fs/read_write.c:637
      do_syscall_x64 arch/x86/entry/common.c:50 [inline]
      do_syscall_64+0x34/0x80 arch/x86/entry/common.c:80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
     RIP: 0033:0x4194e1
    
    Since the type of Node's flags is unsigned long, we should define these
    macros with same type too.
    
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102025123.1117184-1-liushixin2@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8c1eec578a9ae2dc8f14a1846942a0b7bf29d1d
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 16 16:29:17 2022 +0000

    net: stream: purge sk_error_queue in sk_stream_kill_queues()
    
    [ Upstream commit e0c8bccd40fc1c19e1d246c39bcf79e357e1ada3 ]
    
    Changheon Lee reported TCP socket leaks, with a nice repro.
    
    It seems we leak TCP sockets with the following sequence:
    
    1) SOF_TIMESTAMPING_TX_ACK is enabled on the socket.
    
       Each ACK will cook an skb put in error queue, from __skb_tstamp_tx().
       __skb_tstamp_tx() is using skb_clone(), unless
       SOF_TIMESTAMPING_OPT_TSONLY was also requested.
    
    2) If the application is also using MSG_ZEROCOPY, then we put in the
       error queue cloned skbs that had a struct ubuf_info attached to them.
    
       Whenever an struct ubuf_info is allocated, sock_zerocopy_alloc()
       does a sock_hold().
    
       As long as the cloned skbs are still in sk_error_queue,
       socket refcount is kept elevated.
    
    3) Application closes the socket, while error queue is not empty.
    
    Since tcp_close() no longer purges the socket error queue,
    we might end up with a TCP socket with at least one skb in
    error queue keeping the socket alive forever.
    
    This bug can be (ab)used to consume all kernel memory
    and freeze the host.
    
    We need to purge the error queue, with proper synchronization
    against concurrent writers.
    
    Fixes: 24bcbe1cc69f ("net: stream: don't purge sk_error_queue in sk_stream_kill_queues()")
    Reported-by: Changheon Lee <darklight2357@icloud.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4da73a1d2c22239958e5e8117580285231c3e69
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Dec 18 19:08:40 2022 +0100

    myri10ge: Fix an error handling path in myri10ge_probe()
    
    [ Upstream commit d83b950d44d2982c0e62e3d81b0f35ab09431008 ]
    
    Some memory allocated in myri10ge_probe_slices() is not released in the
    error handling path of myri10ge_probe().
    
    Add the corresponding kfree(), as already done in the remove function.
    
    Fixes: 0dcffac1a329 ("myri10ge: add multislices support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d5d13eac3d73fab048c4c1cdcc3bcf4387d2a40
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Sat Dec 17 14:17:07 2022 -0800

    net_sched: reject TCF_EM_SIMPLE case for complex ematch module
    
    [ Upstream commit 9cd3fd2054c3b3055163accbf2f31a4426f10317 ]
    
    When TCF_EM_SIMPLE was introduced, it is supposed to be convenient
    for ematch implementation:
    
    https://lore.kernel.org/all/20050105110048.GO26856@postel.suug.ch/
    
    "You don't have to, providing a 32bit data chunk without TCF_EM_SIMPLE
    set will simply result in allocating & copy. It's an optimization,
    nothing more."
    
    So if an ematch module provides ops->datalen that means it wants a
    complex data structure (saved in its em->data) instead of a simple u32
    value. We should simply reject such a combination, otherwise this u32
    could be misinterpreted as a pointer.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: syzbot+4caeae4c7103813598ae@syzkaller.appspotmail.com
    Reported-by: Jun Nie <jun.nie@linaro.org>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff3743d00f41d803e6ab9334962b674f3b7fd0cb
Author: Subash Abhinov Kasiviswanathan <quic_subashab@quicinc.com>
Date:   Wed Dec 14 23:11:58 2022 -0700

    skbuff: Account for tail adjustment during pull operations
    
    [ Upstream commit 2d7afdcbc9d32423f177ee12b7c93783aea338fb ]
    
    Extending the tail can have some unexpected side effects if a program uses
    a helper like BPF_FUNC_skb_pull_data to read partial content beyond the
    head skb headlen when all the skbs in the gso frag_list are linear with no
    head_frag -
    
      kernel BUG at net/core/skbuff.c:4219!
      pc : skb_segment+0xcf4/0xd2c
      lr : skb_segment+0x63c/0xd2c
      Call trace:
       skb_segment+0xcf4/0xd2c
       __udp_gso_segment+0xa4/0x544
       udp4_ufo_fragment+0x184/0x1c0
       inet_gso_segment+0x16c/0x3a4
       skb_mac_gso_segment+0xd4/0x1b0
       __skb_gso_segment+0xcc/0x12c
       udp_rcv_segment+0x54/0x16c
       udp_queue_rcv_skb+0x78/0x144
       udp_unicast_rcv_skb+0x8c/0xa4
       __udp4_lib_rcv+0x490/0x68c
       udp_rcv+0x20/0x30
       ip_protocol_deliver_rcu+0x1b0/0x33c
       ip_local_deliver+0xd8/0x1f0
       ip_rcv+0x98/0x1a4
       deliver_ptype_list_skb+0x98/0x1ec
       __netif_receive_skb_core+0x978/0xc60
    
    Fix this by marking these skbs as GSO_DODGY so segmentation can handle
    the tail updates accordingly.
    
    Fixes: 3dcbdb134f32 ("net: gso: Fix skb_segment splat when splitting gso_size mangled skb having linear-headed frag_list")
    Signed-off-by: Sean Tranchetti <quic_stranche@quicinc.com>
    Signed-off-by: Subash Abhinov Kasiviswanathan <quic_subashab@quicinc.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Link: https://lore.kernel.org/r/1671084718-24796-1-git-send-email-quic_subashab@quicinc.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f592e712ea2132f511d545954867d7880df5be2
Author: Eelco Chaudron <echaudro@redhat.com>
Date:   Thu Dec 15 15:46:33 2022 +0100

    openvswitch: Fix flow lookup to use unmasked key
    
    [ Upstream commit 68bb10101e6b0a6bb44e9c908ef795fc4af99eae ]
    
    The commit mentioned below causes the ovs_flow_tbl_lookup() function
    to be called with the masked key. However, it's supposed to be called
    with the unmasked key. This due to the fact that the datapath supports
    installing wider flows, and OVS relies on this behavior. For example
    if ipv4(src=1.1.1.1/192.0.0.0, dst=1.1.1.2/192.0.0.0) exists, a wider
    flow (smaller mask) of ipv4(src=192.1.1.1/128.0.0.0,dst=192.1.1.2/
    128.0.0.0) is allowed to be added.
    
    However, if we try to add a wildcard rule, the installation fails:
    
    $ ovs-appctl dpctl/add-flow system@myDP "in_port(1),eth_type(0x0800), \
      ipv4(src=1.1.1.1/192.0.0.0,dst=1.1.1.2/192.0.0.0,frag=no)" 2
    $ ovs-appctl dpctl/add-flow system@myDP "in_port(1),eth_type(0x0800), \
      ipv4(src=192.1.1.1/0.0.0.0,dst=49.1.1.2/0.0.0.0,frag=no)" 2
    ovs-vswitchd: updating flow table (File exists)
    
    The reason is that the key used to determine if the flow is already
    present in the system uses the original key ANDed with the mask.
    This results in the IP address not being part of the (miniflow) key,
    i.e., being substituted with an all-zero value. When doing the actual
    lookup, this results in the key wrongfully matching the first flow,
    and therefore the flow does not get installed.
    
    This change reverses the commit below, but rather than having the key
    on the stack, it's allocated.
    
    Fixes: 190aa3e77880 ("openvswitch: Fix Frame-size larger than 1024 bytes warning.")
    
    Signed-off-by: Eelco Chaudron <echaudro@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a04707f4596952049da05756c27398c34d9a1d36
Author: Li Zetao <lizetao1@huawei.com>
Date:   Tue Dec 13 20:56:14 2022 +0800

    r6040: Fix kmemleak in probe and remove
    
    [ Upstream commit 7e43039a49c2da45edc1d9d7c9ede4003ab45a5f ]
    
    There is a memory leaks reported by kmemleak:
    
      unreferenced object 0xffff888116111000 (size 2048):
        comm "modprobe", pid 817, jiffies 4294759745 (age 76.502s)
        hex dump (first 32 bytes):
          00 c4 0a 04 81 88 ff ff 08 10 11 16 81 88 ff ff  ................
          08 10 11 16 81 88 ff ff 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<ffffffff815bcd82>] kmalloc_trace+0x22/0x60
          [<ffffffff827e20ee>] phy_device_create+0x4e/0x90
          [<ffffffff827e6072>] get_phy_device+0xd2/0x220
          [<ffffffff827e7844>] mdiobus_scan+0xa4/0x2e0
          [<ffffffff827e8be2>] __mdiobus_register+0x482/0x8b0
          [<ffffffffa01f5d24>] r6040_init_one+0x714/0xd2c [r6040]
          ...
    
    The problem occurs in probe process as follows:
      r6040_init_one:
        mdiobus_register
          mdiobus_scan    <- alloc and register phy_device,
                             the reference count of phy_device is 3
        r6040_mii_probe
          phy_connect     <- connect to the first phy_device,
                             so the reference count of the first
                             phy_device is 4, others are 3
        register_netdev   <- fault inject succeeded, goto error handling path
    
        // error handling path
        err_out_mdio_unregister:
          mdiobus_unregister(lp->mii_bus);
        err_out_mdio:
          mdiobus_free(lp->mii_bus);    <- the reference count of the first
                                           phy_device is 1, it is not released
                                           and other phy_devices are released
      // similarly, the remove process also has the same problem
    
    The root cause is traced to the phy_device is not disconnected when
    removes one r6040 device in r6040_remove_one() or on error handling path
    after r6040_mii probed successfully. In r6040_mii_probe(), a net ethernet
    device is connected to the first PHY device of mii_bus, in order to
    notify the connected driver when the link status changes, which is the
    default behavior of the PHY infrastructure to handle everything.
    Therefore the phy_device should be disconnected when removes one r6040
    device or on error handling path.
    
    Fix it by adding phy_disconnect() when removes one r6040 device or on
    error handling path after r6040_mii probed successfully.
    
    Fixes: 3831861b4ad8 ("r6040: implement phylib")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221213125614.927754-1-lizetao1@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9da4a0411f3455e3885831d0758bee3e3d565bbc
Author: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
Date:   Wed Dec 14 10:51:39 2022 +0900

    nfc: pn533: Clear nfc_target before being used
    
    [ Upstream commit 9f28157778ede0d4f183f7ab3b46995bb400abbe ]
    
    Fix a slab-out-of-bounds read that occurs in nla_put() called from
    nfc_genl_send_target() when target->sensb_res_len, which is duplicated
    from an nfc_target in pn533, is too large as the nfc_target is not
    properly initialized and retains garbage values. Clear nfc_targets with
    memset() before they are used.
    
    Found by a modified version of syzkaller.
    
    BUG: KASAN: slab-out-of-bounds in nla_put
    Call Trace:
     memcpy
     nla_put
     nfc_genl_dump_targets
     genl_lock_dumpit
     netlink_dump
     __netlink_dump_start
     genl_family_rcv_msg_dumpit
     genl_rcv_msg
     netlink_rcv_skb
     genl_rcv
     netlink_unicast
     netlink_sendmsg
     sock_sendmsg
     ____sys_sendmsg
     ___sys_sendmsg
     __sys_sendmsg
     do_syscall_64
    
    Fixes: 673088fb42d0 ("NFC: pn533: Send ATR_REQ directly for active device detection")
    Fixes: 361f3cb7f9cf ("NFC: DEP link hook implementation for pn533")
    Signed-off-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20221214015139.119673-1-linuxlovemin@yonsei.ac.kr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f1cda9c19ba45453abf3a1b305fff3e81140200
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Dec 12 16:41:39 2022 +0800

    mISDN: hfcmulti: don't call dev_kfree_skb/kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 1232946cf522b8de9e398828bde325d7c41f29dd ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    skb_queue_purge() is called under spin_lock_irqsave() in handle_dmsg()
    and hfcm_l1callback(), kfree_skb() is called in them, to fix this, use
    skb_queue_splice_init() to move the dch->squeue to a free queue, also
    enqueue the tx_skb and rx_skb, at last calling __skb_queue_purge() to
    free the SKBs afer unlock.
    
    Fixes: af69fb3a8ffa ("Add mISDN HFC multiport driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc24113bc356f8660f7a99fab41229f58de31911
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Dec 12 16:41:38 2022 +0800

    mISDN: hfcpci: don't call dev_kfree_skb/kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit f0f596bd75a9d573ca9b587abb39cee0b916bb82 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    skb_queue_purge() is called under spin_lock_irqsave() in hfcpci_l2l1D(),
    kfree_skb() is called in it, to fix this, use skb_queue_splice_init()
    to move the dch->squeue to a free queue, also enqueue the tx_skb and
    rx_skb, at last calling __skb_queue_purge() to free the SKBs afer unlock.
    
    Fixes: 1700fe1a10dc ("Add mISDN HFC PCI driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 291b787995602de7b1cd2c423c1a3d4a5d53d207
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Dec 12 16:41:37 2022 +0800

    mISDN: hfcsusb: don't call dev_kfree_skb/kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit ddc9648db162eee556edd5222d2808fe33730203 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    skb_queue_purge() is called under spin_lock_irqsave() in hfcusb_l2l1D(),
    kfree_skb() is called in it, to fix this, use skb_queue_splice_init()
    to move the dch->squeue to a free queue, also enqueue the tx_skb and
    rx_skb, at last calling __skb_queue_purge() to free the SKBs afer unlock.
    
    In tx_iso_complete(), dev_kfree_skb() is called to consume the transmitted
    SKB, so replace it with dev_consume_skb_irq().
    
    Fixes: 69f52adb2d53 ("mISDN: Add HFC USB driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 707bcca9616002d204091ca7c4d1d91151104332
Author: Dan Aloni <dan.aloni@vastdata.com>
Date:   Mon Dec 12 13:11:06 2022 +0200

    nfsd: under NFSv4.1, fix double svc_xprt_put on rpc_create failure
    
    [ Upstream commit 3bc8edc98bd43540dbe648e4ef91f443d6d20a24 ]
    
    On error situation `clp->cl_cb_conn.cb_xprt` should not be given
    a reference to the xprt otherwise both client cleanup and the
    error handling path of the caller call to put it. Better to
    delay handing over the reference to a later branch.
    
    [   72.530665] refcount_t: underflow; use-after-free.
    [   72.531933] WARNING: CPU: 0 PID: 173 at lib/refcount.c:28 refcount_warn_saturate+0xcf/0x120
    [   72.533075] Modules linked in: nfsd(OE) nfsv4(OE) nfsv3(OE) nfs(OE) lockd(OE) compat_nfs_ssc(OE) nfs_acl(OE) rpcsec_gss_krb5(OE) auth_rpcgss(OE) rpcrdma(OE) dns_resolver fscache netfs grace rdma_cm iw_cm ib_cm sunrpc(OE) mlx5_ib mlx5_core mlxfw pci_hyperv_intf ib_uverbs ib_core xt_MASQUERADE nf_conntrack_netlink nft_counter xt_addrtype nft_compat br_netfilter bridge stp llc nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 ip_set overlay nf_tables nfnetlink crct10dif_pclmul crc32_pclmul ghash_clmulni_intel xfs serio_raw virtio_net virtio_blk net_failover failover fuse [last unloaded: sunrpc]
    [   72.540389] CPU: 0 PID: 173 Comm: kworker/u16:5 Tainted: G           OE     5.15.82-dan #1
    [   72.541511] Hardware name: Red Hat KVM/RHEL-AV, BIOS 1.16.0-3.module+el8.7.0+1084+97b81f61 04/01/2014
    [   72.542717] Workqueue: nfsd4_callbacks nfsd4_run_cb_work [nfsd]
    [   72.543575] RIP: 0010:refcount_warn_saturate+0xcf/0x120
    [   72.544299] Code: 55 00 0f 0b 5d e9 01 50 98 00 80 3d 75 9e 39 08 00 0f 85 74 ff ff ff 48 c7 c7 e8 d1 60 8e c6 05 61 9e 39 08 01 e8 f6 51 55 00 <0f> 0b 5d e9 d9 4f 98 00 80 3d 4b 9e 39 08 00 0f 85 4c ff ff ff 48
    [   72.546666] RSP: 0018:ffffb3f841157cf0 EFLAGS: 00010286
    [   72.547393] RAX: 0000000000000026 RBX: ffff89ac6231d478 RCX: 0000000000000000
    [   72.548324] RDX: ffff89adb7c2c2c0 RSI: ffff89adb7c205c0 RDI: ffff89adb7c205c0
    [   72.549271] RBP: ffffb3f841157cf0 R08: 0000000000000000 R09: c0000000ffefffff
    [   72.550209] R10: 0000000000000001 R11: ffffb3f841157ad0 R12: ffff89ac6231d180
    [   72.551142] R13: ffff89ac6231d478 R14: ffff89ac40c06180 R15: ffff89ac6231d4b0
    [   72.552089] FS:  0000000000000000(0000) GS:ffff89adb7c00000(0000) knlGS:0000000000000000
    [   72.553175] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   72.553934] CR2: 0000563a310506a8 CR3: 0000000109a66000 CR4: 0000000000350ef0
    [   72.554874] Call Trace:
    [   72.555278]  <TASK>
    [   72.555614]  svc_xprt_put+0xaf/0xe0 [sunrpc]
    [   72.556276]  nfsd4_process_cb_update.isra.11+0xb7/0x410 [nfsd]
    [   72.557087]  ? update_load_avg+0x82/0x610
    [   72.557652]  ? cpuacct_charge+0x60/0x70
    [   72.558212]  ? dequeue_entity+0xdb/0x3e0
    [   72.558765]  ? queued_spin_unlock+0x9/0x20
    [   72.559358]  nfsd4_run_cb_work+0xfc/0x270 [nfsd]
    [   72.560031]  process_one_work+0x1df/0x390
    [   72.560600]  worker_thread+0x37/0x3b0
    [   72.561644]  ? process_one_work+0x390/0x390
    [   72.562247]  kthread+0x12f/0x150
    [   72.562710]  ? set_kthread_struct+0x50/0x50
    [   72.563309]  ret_from_fork+0x22/0x30
    [   72.563818]  </TASK>
    [   72.564189] ---[ end trace 031117b1c72ec616 ]---
    [   72.566019] list_add corruption. next->prev should be prev (ffff89ac4977e538), but was ffff89ac4763e018. (next=ffff89ac4763e018).
    [   72.567647] ------------[ cut here ]------------
    
    Fixes: a4abc6b12eb1 ("nfsd: Fix svc_xprt refcnt leak when setup callback client failed")
    Cc: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Cc: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Dan Aloni <dan.aloni@vastdata.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4761ab97d468be57d91f8cf9ef05b02b86532825
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Wed Nov 23 09:48:05 2022 +0800

    rtc: st-lpc: Add missing clk_disable_unprepare in st_rtc_probe()
    
    [ Upstream commit 5fb733d7bd6949e90028efdce8bd528c6ab7cf1e ]
    
    The clk_disable_unprepare() should be called in the error handling
    of clk_get_rate(), fix it.
    
    Fixes: b5b2bdfc2893 ("rtc: st: Add new driver for ST's LPC RTC")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221123014805.1993052-1-cuigaosheng1@huawei.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81a61f339655a6b6679ff63bf6c849873a249a7d
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Mon Dec 5 12:44:27 2022 +0400

    selftests/powerpc: Fix resource leaks
    
    [ Upstream commit 8f4ab7da904ab7027ccd43ddb4f0094e932a5877 ]
    
    In check_all_cpu_dscr_defaults, opendir() opens the directory stream.
    Add missing closedir() in the error path to release it.
    
    In check_cpu_dscr_default, open() creates an open file descriptor.
    Add missing close() in the error path to release it.
    
    Fixes: ebd5858c904b ("selftests/powerpc: Add test for all DSCR sysfs interfaces")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221205084429.570654-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bd37681eb9fde7c373674b733d6ae1f3949c5af
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Wed Nov 30 23:15:13 2022 +0530

    powerpc/hv-gpci: Fix hv_gpci event list
    
    [ Upstream commit 03f7c1d2a49acd30e38789cd809d3300721e9b0e ]
    
    Based on getPerfCountInfo v1.018 documentation, some of the
    hv_gpci events were deprecated for platform firmware that
    supports counter_info_version 0x8 or above.
    
    Fix the hv_gpci event list by adding a new attribute group
    called "hv_gpci_event_attrs_v6" and a "ENABLE_EVENTS_COUNTERINFO_V6"
    macro to enable these events for platform firmware
    that supports counter_info_version 0x6 or below. And assigning
    the hv_gpci event list based on output counter info version
    of underlying plaform.
    
    Fixes: 97bf2640184f ("powerpc/perf/hv-gpci: add the remaining gpci requests")
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Reviewed-by: Madhavan Srinivasan <maddy@linux.ibm.com>
    Reviewed-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221130174513.87501-1-kjain@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 225c8523405da18ab3571cee8800beac8c282550
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:16:26 2022 +0800

    powerpc/83xx/mpc832x_rdb: call platform_device_put() in error case in of_fsl_spi_probe()
    
    [ Upstream commit 4d0eea415216fe3791da2f65eb41399e70c7bedf ]
    
    If platform_device_add() is not called or failed, it can not call
    platform_device_del() to clean up memory, it should call
    platform_device_put() in error case.
    
    Fixes: 26f6cb999366 ("[POWERPC] fsl_soc: add support for fsl_spi")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221029111626.429971-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a62ab09856e294904296cf9e7025655f8025103
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Sun Nov 27 22:49:28 2022 +1000

    powerpc/perf: callchain validate kernel stack pointer bounds
    
    [ Upstream commit 32c5209214bd8d4f8c4e9d9b630ef4c671f58e79 ]
    
    The interrupt frame detection and loads from the hypothetical pt_regs
    are not bounds-checked. The next-frame validation only bounds-checks
    STACK_FRAME_OVERHEAD, which does not include the pt_regs. Add another
    test for this.
    
    The user could set r1 to be equal to the address matching the first
    interrupt frame - STACK_INT_FRAME_SIZE, which is in the previous page
    due to the kernel redzone, and induce the kernel to load the marker from
    there. Possibly this could cause a crash at least. If the user could
    induce the previous page to contain a valid marker, then it might be
    able to direct perf to read specific memory addresses in a way that
    could be transmitted back to the user in the perf data.
    
    Fixes: 20002ded4d93 ("perf_counter: powerpc: Add callchain support")
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221127124942.1665522-4-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be9caf2c936f15a9c3f9111e62bdde6357312f90
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Jan 29 08:16:04 2022 +0100

    powerpc/52xx: Fix a resource leak in an error handling path
    
    [ Upstream commit 5836947613ef33d311b4eff6a32d019580a214f5 ]
    
    The error handling path of mpc52xx_lpbfifo_probe() has a request_irq()
    that is not balanced by a corresponding free_irq().
    
    Add the missing call, as already done in the remove function.
    
    Fixes: 3c9059d79f5e ("powerpc/5200: add LocalPlus bus FIFO device driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/dec1496d46ccd5311d0f6e9f9ca4238be11bf6a6.1643440531.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aaf59a444bfed08518da435dfd203ebb07e6d1d2
Author: Xie Shaowen <studentxswpy@163.com>
Date:   Tue Aug 2 15:41:48 2022 +0800

    macintosh/macio-adb: check the return value of ioremap()
    
    [ Upstream commit dbaa3105736d4d73063ea0a3b01cd7fafce924e6 ]
    
    The function ioremap() in macio_init() can fail, so its return value
    should be checked.
    
    Fixes: 36874579dbf4c ("[PATCH] powerpc: macio-adb build fix")
    Reported-by: Hacash Robot <hacashRobot@santino.com>
    Signed-off-by: Xie Shaowen <studentxswpy@163.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220802074148.3213659-1-studentxswpy@163.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a866ff6fc2232c8e393cdb55ffb8ce947349e03
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 4 11:25:51 2022 +0800

    macintosh: fix possible memory leak in macio_add_one_device()
    
    [ Upstream commit 5ca86eae55a2f006e6c1edd2029b2cacb6979515 ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically. It
    needs to be freed when of_device_register() fails. Call put_device() to
    give up the reference that's taken in device_initialize(), so that it
    can be freed in kobject_cleanup() when the refcount hits 0.
    
    macio device is freed in macio_release_dev(), so the kfree() can be
    removed.
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221104032551.1075335-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c93983230562883e0b5f122040efbb3d478c36d4
Author: Yuan Can <yuancan@huawei.com>
Date:   Mon Nov 21 08:20:22 2022 +0000

    iommu/fsl_pamu: Fix resource leak in fsl_pamu_probe()
    
    [ Upstream commit 73f5fc5f884ad0c5f7d57f66303af64f9f002526 ]
    
    The fsl_pamu_probe() returns directly when create_csd() failed, leaving
    irq and memories unreleased.
    Fix by jumping to error if create_csd() returns error.
    
    Fixes: 695093e38c3e ("iommu/fsl: Freescale PAMU driver and iommu implementation.")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221121082022.19091-1-yuancan@huawei.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4be1a8d894d3212b62e549bcc72af0e1870291d1
Author: Stefan Eichenberger <stefan.eichenberger@toradex.com>
Date:   Sun Nov 6 12:59:15 2022 +0100

    rtc: snvs: Allow a time difference on clock register read
    
    [ Upstream commit 0462681e207ccc44778a77b3297af728b1cf5b9f ]
    
    On an iMX6ULL the following message appears when a wakealarm is set:
    
    echo 0 > /sys/class/rtc/rtc1/wakealarm
    rtc rtc1: Timeout trying to get valid LPSRT Counter read
    
    This does not always happen but is reproducible quite often (7 out of 10
    times). The problem appears because the iMX6ULL is not able to read the
    registers within one 32kHz clock cycle which is the base clock of the
    RTC. Therefore, this patch allows a difference of up to 320 cycles
    (10ms). 10ms was chosen to be big enough even on systems with less cpu
    power (e.g. iMX6ULL). According to the reference manual a difference is
    fine:
    - If the two consecutive reads are similar, the value is correct.
    The values have to be similar, not equal.
    
    Fixes: cd7f3a249dbe ("rtc: snvs: Add timeouts to avoid kernel lockups")
    Reviewed-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Signed-off-by: Stefan Eichenberger <stefan.eichenberger@toradex.com>
    Signed-off-by: Francesco Dolcini <francesco@dolcini.it>
    Link: https://lore.kernel.org/r/20221106115915.7930-1-francesco@dolcini.it
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e0b6364d064db98f5161e9b696c96d5d4525c9e
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Tue Sep 27 14:52:56 2022 -0700

    include/uapi/linux/swab: Fix potentially missing __always_inline
    
    [ Upstream commit defbab270d45e32b068e7e73c3567232d745c60f ]
    
    Commit bc27fb68aaad ("include/uapi/linux/byteorder, swab: force inlining
    of some byteswap operations") added __always_inline to swab functions
    and commit 283d75737837 ("uapi/linux/stddef.h: Provide __always_inline to
    userspace headers") added a definition of __always_inline for use in
    exported headers when the kernel's compiler.h is not available.
    
    However, since swab.h does not include stddef.h, if the header soup does
    not indirectly include it, the definition of __always_inline is missing,
    resulting in a compilation failure, which was observed compiling the
    perf tool using exported headers containing this commit:
    
    In file included from /usr/include/linux/byteorder/little_endian.h:12:0,
                     from /usr/include/asm/byteorder.h:14,
                     from tools/include/uapi/linux/perf_event.h:20,
                     from perf.h:8,
                     from builtin-bench.c:18:
    /usr/include/linux/swab.h:160:8: error: unknown type name `__always_inline'
     static __always_inline __u16 __swab16p(const __u16 *p)
    
    Fix this by replacing the inclusion of linux/compiler.h with
    linux/stddef.h to ensure that we pick up that definition if required,
    without relying on it's indirect inclusion. compiler.h is then included
    indirectly, via stddef.h.
    
    Fixes: 283d75737837 ("uapi/linux/stddef.h: Provide __always_inline to userspace headers")
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Petr Vaněk <arkamar@atlas.cz>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f43b9a984830f3b8273458070d6020d48d38d84
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 24 11:33:32 2022 +0000

    HSI: omap_ssi_core: Fix error handling in ssi_init()
    
    [ Upstream commit 3ffa9f713c39a213a08d9ff13ab983a8aa5d8b5d ]
    
    The ssi_init() returns the platform_driver_register() directly without
    checking its return value, if platform_driver_register() failed, the
    ssi_pdriver is not unregistered.
    Fix by unregister ssi_pdriver when the last platform_driver_register()
    failed.
    
    Fixes: 0fae198988b8 ("HSI: omap_ssi: built omap_ssi and omap_ssi_port into one module")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29a57277803d19407846fa923e87136a39efbbe9
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Thu Nov 17 16:32:19 2022 +0800

    power: supply: fix residue sysfs file in error handle route of __power_supply_register()
    
    [ Upstream commit 5b79480ce1978864ac3f06f2134dfa3b6691fe74 ]
    
    If device_add() succeeds, we should call device_del() when want to
    get rid of it, so move it into proper jump symbol.
    
    Otherwise, when __power_supply_register() returns fail and goto
    wakeup_init_failed to exit, there is still residue device file in sysfs.
    When attempt to probe device again, sysfs would complain as below:
    
    sysfs: cannot create duplicate filename '/devices/platform/i2c/i2c-0/0-001c/power_supply/adp5061'
    Call Trace:
     dump_stack_lvl+0x68/0x85
     sysfs_warn_dup.cold+0x1c/0x29
     sysfs_create_dir_ns+0x1b1/0x1d0
     kobject_add_internal+0x143/0x390
     kobject_add+0x108/0x170
    
    Fixes: 80c6463e2fa3 ("power_supply: Fix Oops from NULL pointer dereference from wakeup_source_activate")
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 107eb675d3c3548b65a618afed7bb59d56634551
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 31 15:43:37 2022 +0800

    HSI: omap_ssi_core: fix possible memory leak in ssi_probe()
    
    [ Upstream commit 1aff514e1d2bd47854dbbdf867970b9d463d4c57 ]
    
    If ssi_add_controller() returns error, it should call hsi_put_controller()
    to give up the reference that was set in hsi_alloc_controller(), so that
    it can call hsi_controller_release() to free controller and ports that
    allocated in hsi_alloc_controller().
    
    Fixes: b209e047bc74 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a502dfab2b08f45824e67274b93dce261fc8b72
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 11:41:18 2022 +0800

    HSI: omap_ssi_core: fix unbalanced pm_runtime_disable()
    
    [ Upstream commit f5181c35ed7ba0ceb6e42872aad1334d994b0175 ]
    
    In error label 'out1' path in ssi_probe(), the pm_runtime_enable()
    has not been called yet, so pm_runtime_disable() is not needed.
    
    Fixes: b209e047bc74 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a62bc1c9a5f0a022e94ecda77bda241d1a8e8c1
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 10 12:35:22 2022 +0100

    fbdev: uvesafb: Fixes an error handling path in uvesafb_probe()
    
    [ Upstream commit a94371040712031ba129c7e9d8ff04a06a2f8207 ]
    
    If an error occurs after a successful uvesafb_init_mtrr() call, it must be
    undone by a corresponding arch_phys_wc_del() call, as already done in the
    remove function.
    
    This has been added in the remove function in commit 63e28a7a5ffc
    ("uvesafb: Clean up MTRR code")
    
    Fixes: 8bdb3a2d7df4 ("uvesafb: the driver core")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 438383287958740239e277ac4b90d4ab1177a1d3
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Mon Nov 14 16:56:54 2022 +0800

    fbdev: vermilion: decrease reference count in error path
    
    [ Upstream commit 001f2cdb952a9566c77fb4b5470cc361db5601bb ]
    
    pci_get_device() will increase the reference count for the returned
    pci_dev. For the error path, we need to use pci_dev_put() to decrease
    the reference count.
    
    Fixes: dbe7e429fedb ("vmlfb: framebuffer driver for Intel Vermilion Range")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bf10c3be038a0b5b79fd8d69920b72bdcb59d2d
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Mon Nov 14 09:08:52 2022 +0800

    fbdev: via: Fix error in via_core_init()
    
    [ Upstream commit 5886b130de953cfb8826f7771ec8640a79934a7f ]
    
    via_core_init() won't exit the driver when pci_register_driver() failed.
    Exit the viafb-i2c and the viafb-gpio in failed path to prevent error.
    
    VIA Graphics Integration Chipset framebuffer 2.4 initializing
    Error: Driver 'viafb-i2c' is already registered, aborting...
    Error: Driver 'viafb-gpio' is already registered, aborting...
    
    Fixes: 7582eb9be85f ("viafb: Turn GPIO and i2c into proper platform devices")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a71d0472cf2c420ca5ef99b71a292aa648301e2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Nov 12 17:55:10 2022 +0800

    fbdev: pm2fb: fix missing pci_disable_device()
    
    [ Upstream commit ed359a464846b48f76ea6cc5cd8257e545ac97f4 ]
    
    Add missing pci_disable_device() in error path of probe() and remove() path.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0cdb871771a9e1d5d96ea59d93d1164ae7aa430
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Nov 1 17:09:46 2022 +0200

    fbdev: ssd1307fb: Drop optional dependency
    
    [ Upstream commit 025e3b507a3a8e1ee96a3112bb67495c77d6cdb6 ]
    
    Only a single out of three devices need a PWM, so from driver it's
    optional. Moreover it's a single driver in the entire kernel that
    currently selects PWM. Unfortunately this selection is a root cause
    of the circular dependencies when we want to enable optional PWM
    for some other drivers that select GPIOLIB.
    
    Fixes: a2ed00da5047 ("drivers/video: add support for the Solomon SSD1307 OLED Controller")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b8a070a7c54f648c46fddbc2f40d2f18239a3e0
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Dec 8 19:00:58 2022 +0800

    usb: storage: Add check for kcalloc
    
    [ Upstream commit c35ca10f53c51eeb610d3f8fbc6dd6d511b58a58 ]
    
    As kcalloc may return NULL pointer, the return value should
    be checked and return error if fails as same as the ones in
    alauda_read_map.
    
    Fixes: e80b0fade09e ("[PATCH] USB Storage: add alauda support")
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Link: https://lore.kernel.org/r/20221208110058.12983-1-jiasheng@iscas.ac.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a7bb1d93addb2f67e36fed00a53cb7f270d7b7a
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Fri Jul 29 19:02:16 2022 +0800

    i2c: ismt: Fix an out-of-bounds bug in ismt_access()
    
    [ Upstream commit 39244cc754829bf707dccd12e2ce37510f5b1f8d ]
    
    When the driver does not check the data from the user, the variable
    'data->block[0]' may be very large to cause an out-of-bounds bug.
    
    The following log can reveal it:
    
    [   33.995542] i2c i2c-1: ioctl, cmd=0x720, arg=0x7ffcb3dc3a20
    [   33.995978] ismt_smbus 0000:00:05.0: I2C_SMBUS_BLOCK_DATA:  WRITE
    [   33.996475] ==================================================================
    [   33.996995] BUG: KASAN: out-of-bounds in ismt_access.cold+0x374/0x214b
    [   33.997473] Read of size 18446744073709551615 at addr ffff88810efcfdb1 by task ismt_poc/485
    [   33.999450] Call Trace:
    [   34.001849]  memcpy+0x20/0x60
    [   34.002077]  ismt_access.cold+0x374/0x214b
    [   34.003382]  __i2c_smbus_xfer+0x44f/0xfb0
    [   34.004007]  i2c_smbus_xfer+0x10a/0x390
    [   34.004291]  i2cdev_ioctl_smbus+0x2c8/0x710
    [   34.005196]  i2cdev_ioctl+0x5ec/0x74c
    
    Fix this bug by checking the size of 'data->block[0]' first.
    
    Fixes: 13f35ac14cd0 ("i2c: Adding support for Intel iSMT SMBus 2.0 host controller")
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e831fdd60e5863ee03173baf5a0f7c5450b44381
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Mon Dec 5 16:48:05 2022 +0800

    vme: Fix error not catched in fake_init()
    
    [ Upstream commit 7bef797d707f1744f71156b21d41e3b8c946631f ]
    
    In fake_init(), __root_device_register() is possible to fail but it's
    ignored, which can cause unregistering vme_root fail when exit.
    
     general protection fault,
     probably for non-canonical address 0xdffffc000000008c
     KASAN: null-ptr-deref in range [0x0000000000000460-0x0000000000000467]
     RIP: 0010:root_device_unregister+0x26/0x60
     Call Trace:
      <TASK>
      __x64_sys_delete_module+0x34f/0x540
      do_syscall_64+0x38/0x90
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Return error when __root_device_register() fails.
    
    Fixes: 658bcdae9c67 ("vme: Adding Fake VME driver")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221205084805.147436-1-chenzhongjin@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf7d89e809d09d71bf82bfbd50d5f8113ddc1739
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Nov 23 16:12:53 2022 +0800

    staging: rtl8192e: Fix potential use-after-free in rtllib_rx_Monitor()
    
    [ Upstream commit d30f4436f364b4ad915ca2c09be07cd0f93ceb44 ]
    
    The skb is delivered to netif_rx() in rtllib_monitor_rx(), which may free it,
    after calling this, dereferencing skb may trigger use-after-free.
    Found by Smatch.
    
    Fixes: 94a799425eee ("From: wlanfae <wlanfae@realtek.com> [PATCH 1/8] rtl8192e: Import new version of driver from realtek")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221123081253.22296-1-yuehaibing@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c03db0ec84b7964a11b20706665c99a5fead332
Author: Dan Carpenter <error27@gmail.com>
Date:   Wed Nov 23 09:43:14 2022 +0300

    staging: rtl8192u: Fix use after free in ieee80211_rx()
    
    [ Upstream commit bcc5e2dcf09089b337b76fc1a589f6ff95ca19ac ]
    
    We cannot dereference the "skb" pointer after calling
    ieee80211_monitor_rx(), because it is a use after free.
    
    Fixes: 8fc8598e61f6 ("Staging: Added Realtek rtl8192u driver to staging")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Link: https://lore.kernel.org/r/Y33BArx3k/aw6yv/@kili
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e6fe3e8565350f0b16c770c30cf1dbf532aa0b2
Author: Hui Tang <tanghui20@huawei.com>
Date:   Mon Nov 14 17:25:40 2022 +0800

    i2c: pxa-pci: fix missing pci_disable_device() on error in ce4100_i2c_probe
    
    [ Upstream commit d78a167332e1ca8113268ed922c1212fd71b73ad ]
    
    Using pcim_enable_device() to avoid missing pci_disable_device().
    
    Fixes: 7e94dd154e93 ("i2c-pxa2xx: Add PCI support for PXA I2C controller")
    Signed-off-by: Hui Tang <tanghui20@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d2146889fad4cb9e6c13e790d4cfd871486eca8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Dec 2 11:02:37 2022 +0800

    chardev: fix error handling in cdev_device_add()
    
    [ Upstream commit 11fa7fefe3d8fac7da56bc9aa3dd5fb3081ca797 ]
    
    While doing fault injection test, I got the following report:
    
    ------------[ cut here ]------------
    kobject: '(null)' (0000000039956980): is not initialized, yet kobject_put() is being called.
    WARNING: CPU: 3 PID: 6306 at kobject_put+0x23d/0x4e0
    CPU: 3 PID: 6306 Comm: 283 Tainted: G        W          6.1.0-rc2-00005-g307c1086d7c9 #1253
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
    RIP: 0010:kobject_put+0x23d/0x4e0
    Call Trace:
     <TASK>
     cdev_device_add+0x15e/0x1b0
     __iio_device_register+0x13b4/0x1af0 [industrialio]
     __devm_iio_device_register+0x22/0x90 [industrialio]
     max517_probe+0x3d8/0x6b4 [max517]
     i2c_device_probe+0xa81/0xc00
    
    When device_add() is injected fault and returns error, if dev->devt is not set,
    cdev_add() is not called, cdev_del() is not needed. Fix this by checking dev->devt
    in error path.
    
    Fixes: 233ed09d7fda ("chardev: add helper function to register char devs with a struct device")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221202030237.520280-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 891f606ae0765bc9ca99f5276735be4d338f0255
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Dec 2 01:38:50 2022 -0800

    mcb: mcb-parse: fix error handing in chameleon_parse_gdd()
    
    [ Upstream commit 728ac3389296caf68638628c987aeae6c8851e2d ]
    
    If mcb_device_register() returns error in chameleon_parse_gdd(), the refcount
    of bus and device name are leaked. Fix this by calling put_device() to give up
    the reference, so they can be released in mcb_release_dev() and kobject_cleanup().
    
    Fixes: 3764e82e5150 ("drivers: Introduce MEN Chameleon Bus")
    Reviewed-by: Johannes Thumshirn <jth@kernel.org>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Link: https://lore.kernel.org/r/ebfb06e39b19272f0197fa9136b5e4b6f34ad732.1669624063.git.johannes.thumshirn@wdc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 531ac7b911a962b3b29565dad6ea6b5c3fad3317
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Fri Dec 2 01:38:49 2022 -0800

    drivers: mcb: fix resource leak in mcb_probe()
    
    [ Upstream commit d7237462561fcd224fa687c56ccb68629f50fc0d ]
    
    When probe hook function failed in mcb_probe(), it doesn't put the device.
    Compiled test only.
    
    Fixes: 7bc364097a89 ("mcb: Acquire reference to device in probe")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Link: https://lore.kernel.org/r/9f87de36bfb85158b506cb78c6fc9db3f6a3bad1.1669624063.git.johannes.thumshirn@wdc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82e68432668ae75b4c814d160f6987ecb0681273
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 22:54:40 2022 +0800

    cxl: fix possible null-ptr-deref in cxl_pci_init_afu|adapter()
    
    [ Upstream commit 02cd3032b154fa02fdf90e7467abaeed889330b2 ]
    
    If device_register() fails in cxl_pci_afu|adapter(), the device
    is not added, device_unregister() can not be called in the error
    path, otherwise it will cause a null-ptr-deref because of removing
    not added device.
    
    As comment of device_register() says, it should use put_device() to give
    up the reference in the error path. So split device_unregister() into
    device_del() and put_device(), then goes to put dev when register fails.
    
    Fixes: f204e0b8cedd ("cxl: Driver code for powernv PCIe based cards for userspace access")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221111145440.2426970-2-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96fba6fb95bdede80583c262ac185da09661f264
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 22:54:39 2022 +0800

    cxl: fix possible null-ptr-deref in cxl_guest_init_afu|adapter()
    
    [ Upstream commit 61c80d1c3833e196256fb060382db94f24d3d9a7 ]
    
    If device_register() fails in cxl_register_afu|adapter(), the device
    is not added, device_unregister() can not be called in the error path,
    otherwise it will cause a null-ptr-deref because of removing not added
    device.
    
    As comment of device_register() says, it should use put_device() to give
    up the reference in the error path. So split device_unregister() into
    device_del() and put_device(), then goes to put dev when register fails.
    
    Fixes: 14baf4d9c739 ("cxl: Add guest-specific code")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221111145440.2426970-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f99d5f1bd8cd1e99931b6e5544a5601a1fe33f82
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Thu Nov 10 11:50:33 2022 +0800

    misc: sgi-gru: fix use-after-free error in gru_set_context_option, gru_fault and gru_handle_user_call_os
    
    [ Upstream commit 643a16a0eb1d6ac23744bb6e90a00fc21148a9dc ]
    
    In some bad situation, the gts may be freed gru_check_chiplet_assignment.
    The call chain can be gru_unload_context->gru_free_gru_context->gts_drop
    and kfree finally. However, the caller didn't know if the gts is freed
    or not and use it afterwards. This will trigger a Use after Free bug.
    
    Fix it by introducing a return value to see if it's in error path or not.
    Free the gts in caller if gru_check_chiplet_assignment check failed.
    
    Fixes: 55484c45dbec ("gru: allow users to specify gru chiplet 2")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Acked-by: Dimitri Sivanich <sivanich@hpe.com>
    Link: https://lore.kernel.org/r/20221110035033.19498-1-zyytlz.wz@163.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bbb222a54ff501f77ce593d21b76b79c905045e
Author: ruanjinjie <ruanjinjie@huawei.com>
Date:   Thu Nov 17 14:47:25 2022 +0800

    misc: tifm: fix possible memory leak in tifm_7xx1_switch_media()
    
    [ Upstream commit fd2c930cf6a5b9176382c15f9acb1996e76e25ad ]
    
    If device_register() returns error in tifm_7xx1_switch_media(),
    name of kobject which is allocated in dev_set_name() called in device_add()
    is leaked.
    
    Never directly free @dev after calling device_register(), even
    if it returned an error! Always use put_device() to give up the
    reference initialized.
    
    Fixes: 2428a8fe2261 ("tifm: move common device management tasks from tifm_7xx1 to tifm_core")
    Signed-off-by: ruanjinjie <ruanjinjie@huawei.com>
    Link: https://lore.kernel.org/r/20221117064725.3478402-1-ruanjinjie@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ea80d3dc0e59c597d803dc603532ccc54e431db
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Nov 23 06:12:12 2022 +0000

    serial: sunsab: Fix error handling in sunsab_init()
    
    [ Upstream commit 1a6ec673fb627c26e2267ca0a03849f91dbd9b40 ]
    
    The sunsab_init() returns the platform_driver_register() directly without
    checking its return value, if platform_driver_register() failed, the
    allocated sunsab_ports is leaked.
    Fix by free sunsab_ports and set it to NULL when platform_driver_register()
    failed.
    
    Fixes: c4d37215a824 ("[SERIAL] sunsab: Convert to of_driver framework.")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221123061212.52593-1-yuancan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90ff030ca10b69feeebda1427550ebf9ed2ad868
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Nov 22 19:45:59 2022 +0800

    serial: pch: Fix PCI device refcount leak in pch_request_dma()
    
    [ Upstream commit 8be3a7bf773700534a6e8f87f6ed2ed111254be5 ]
    
    As comment of pci_get_slot() says, it returns a pci_device with its
    refcount increased. The caller must decrement the reference count by
    calling pci_dev_put().
    
    Since 'dma_dev' is only used to filter the channel in filter(), we can
    call pci_dev_put() before exiting from pch_request_dma(). Add the
    missing pci_dev_put() for the normal and error path.
    
    Fixes: 3c6a483275f4 ("Serial: EG20T: add PCH_UART driver")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Link: https://lore.kernel.org/r/20221122114559.27692-1-wangxiongfeng2@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c5f0d3f480abd8c26761b6b1f486822e77faea3
Author: Jiamei Xie <jiamei.xie@arm.com>
Date:   Thu Nov 17 18:32:37 2022 +0800

    serial: amba-pl011: avoid SBSA UART accessing DMACR register
    
    [ Upstream commit 94cdb9f33698478b0e7062586633c42c6158a786 ]
    
    Chapter "B Generic UART" in "ARM Server Base System Architecture" [1]
    documentation describes a generic UART interface. Such generic UART
    does not support DMA. In current code, sbsa_uart_pops and
    amba_pl011_pops share the same stop_rx operation, which will invoke
    pl011_dma_rx_stop, leading to an access of the DMACR register. This
    commit adds a using_rx_dma check in pl011_dma_rx_stop to avoid the
    access to DMACR register for SBSA UARTs which does not support DMA.
    
    When the kernel enables DMA engine with "CONFIG_DMA_ENGINE=y", Linux
    SBSA PL011 driver will access PL011 DMACR register in some functions.
    For most real SBSA Pl011 hardware implementations, the DMACR write
    behaviour will be ignored. So these DMACR operations will not cause
    obvious problems. But for some virtual SBSA PL011 hardware, like Xen
    virtual SBSA PL011 (vpl011) device, the behaviour might be different.
    Xen vpl011 emulation will inject a data abort to guest, when guest is
    accessing an unimplemented UART register. As Xen VPL011 is SBSA
    compatible, it will not implement DMACR register. So when Linux SBSA
    PL011 driver access DMACR register, it will get an unhandled data abort
    fault and the application will get a segmentation fault:
    Unhandled fault at 0xffffffc00944d048
    Mem abort info:
      ESR = 0x96000000
      EC = 0x25: DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
      FSC = 0x00: ttbr address size fault
    Data abort info:
      ISV = 0, ISS = 0x00000000
      CM = 0, WnR = 0
    swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000020e2e000
    [ffffffc00944d048] pgd=100000003ffff803, p4d=100000003ffff803, pud=100000003ffff803, pmd=100000003fffa803, pte=006800009c090f13
    Internal error: ttbr address size fault: 96000000 [#1] PREEMPT SMP
    ...
    Call trace:
     pl011_stop_rx+0x70/0x80
     tty_port_shutdown+0x7c/0xb4
     tty_port_close+0x60/0xcc
     uart_close+0x34/0x8c
     tty_release+0x144/0x4c0
     __fput+0x78/0x220
     ____fput+0x1c/0x30
     task_work_run+0x88/0xc0
     do_notify_resume+0x8d0/0x123c
     el0_svc+0xa8/0xc0
     el0t_64_sync_handler+0xa4/0x130
     el0t_64_sync+0x1a0/0x1a4
    Code: b9000083 b901f001 794038a0 8b000042 (b9000041)
    ---[ end trace 83dd93df15c3216f ]---
    note: bootlogd[132] exited with preempt_count 1
    /etc/rcS.d/S07bootlogd: line 47: 132 Segmentation fault start-stop-daemon
    
    This has been discussed in the Xen community, and we think it should fix
    this in Linux. See [2] for more information.
    
    [1] https://developer.arm.com/documentation/den0094/c/?lang=en
    [2] https://lists.xenproject.org/archives/html/xen-devel/2022-11/msg00543.html
    
    Fixes: 0dd1e247fd39 (drivers: PL011: add support for the ARM SBSA generic UART)
    Signed-off-by: Jiamei Xie <jiamei.xie@arm.com>
    Reviewed-by: Andre Przywara <andre.przywara@arm.com>
    Link: https://lore.kernel.org/r/20221117103237.86856-1-jiamei.xie@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cc4eea715a3fcf4e516662f736dfee63979465f
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Nov 17 11:59:14 2022 +0800

    staging: vme_user: Fix possible UAF in tsi148_dma_list_add
    
    [ Upstream commit 357057ee55d3c99a5de5abe8150f7bca04f8e53b ]
    
    Smatch report warning as follows:
    
    drivers/staging/vme_user/vme_tsi148.c:1757 tsi148_dma_list_add() warn:
      '&entry->list' not removed from list
    
    In tsi148_dma_list_add(), the error path "goto err_dma" will not
    remove entry->list from list->entries, but entry will be freed,
    then list traversal may cause UAF.
    
    Fix by removeing it from list->entries before free().
    
    Fixes: b2383c90a9d6 ("vme: tsi148: fix first DMA item mapping")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221117035914.2954454-1-cuigaosheng1@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92a0e9094bcea5c71acbbd3e8e76468c757e93f6
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Nov 11 10:03:17 2022 +0100

    usb: fotg210-udc: Fix ages old endianness issues
    
    [ Upstream commit 46ed6026ca2181c917c8334a82e3eaf40a6234dd ]
    
    The code in the FOTG210 driver isn't entirely endianness-agnostic
    as reported by the kernel robot sparse testing. This came to
    the surface while moving the files around.
    
    The driver is only used on little-endian systems, so this causes
    no real-world regression, but it is nice to be strict and have
    some compile coverage also on big endian machines, so fix it
    up with the right LE accessors.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/linux-usb/202211110910.0dJ7nZCn-lkp@intel.com/
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20221111090317.94228-1-linus.walleij@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35a27f38b4e5c6a174edbbec72908b279973071a
Author: Rafael Mendonca <rafaelmendsr@gmail.com>
Date:   Fri Sep 30 19:40:58 2022 -0300

    uio: uio_dmem_genirq: Fix deadlock between irq config and handling
    
    [ Upstream commit 118b918018175d9fcd8db667f905012e986cc2c9 ]
    
    This fixes a concurrency issue addressed in commit 34cb27528398 ("UIO: Fix
    concurrency issue"):
    
      "In a SMP case there was a race condition issue between
      Uio_pdrv_genirq_irqcontrol() running on one CPU and irq handler on
      another CPU. Fix it by spin_locking shared resources access inside irq
      handler."
    
    The implementation of "uio_dmem_genirq" was based on "uio_pdrv_genirq" and
    it is used in a similar manner to the "uio_pdrv_genirq" driver with respect
    to interrupt configuration and handling. At the time "uio_dmem_genirq" was
    merged, both had the same implementation of the 'uio_info' handlers
    irqcontrol() and handler(), thus, both had the same concurrency issue
    mentioned by the above commit. However, the above patch was only applied to
    the "uio_pdrv_genirq" driver.
    
    Split out from commit 34cb27528398 ("UIO: Fix concurrency issue").
    
    Fixes: 0a0c3b5a24bd ("Add new uio device for dynamic memory allocation")
    Signed-off-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Link: https://lore.kernel.org/r/20220930224100.816175-3-rafaelmendsr@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9977cb7af5a8f4738198b020436e2e56c5cd721e
Author: Rafael Mendonca <rafaelmendsr@gmail.com>
Date:   Fri Sep 30 19:40:57 2022 -0300

    uio: uio_dmem_genirq: Fix missing unlock in irq configuration
    
    [ Upstream commit 9de255c461d1b3f0242b3ad1450c3323a3e00b34 ]
    
    Commit b74351287d4b ("uio: fix a sleep-in-atomic-context bug in
    uio_dmem_genirq_irqcontrol()") started calling disable_irq() without
    holding the spinlock because it can sleep. However, that fix introduced
    another bug: if interrupt is already disabled and a new disable request
    comes in, then the spinlock is not unlocked:
    
    root@localhost:~# printf '\x00\x00\x00\x00' > /dev/uio0
    root@localhost:~# printf '\x00\x00\x00\x00' > /dev/uio0
    root@localhost:~# [   14.851538] BUG: scheduling while atomic: bash/223/0x00000002
    [   14.851991] Modules linked in: uio_dmem_genirq uio myfpga(OE) bochs drm_vram_helper drm_ttm_helper ttm drm_kms_helper drm snd_pcm ppdev joydev psmouse snd_timer snd e1000fb_sys_fops syscopyarea parport sysfillrect soundcore sysimgblt input_leds pcspkr i2c_piix4 serio_raw floppy evbug qemu_fw_cfg mac_hid pata_acpi ip_tables x_tables autofs4 [last unloaded: parport_pc]
    [   14.854206] CPU: 0 PID: 223 Comm: bash Tainted: G           OE      6.0.0-rc7 #21
    [   14.854786] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    [   14.855664] Call Trace:
    [   14.855861]  <TASK>
    [   14.856025]  dump_stack_lvl+0x4d/0x67
    [   14.856325]  dump_stack+0x14/0x1a
    [   14.856583]  __schedule_bug.cold+0x4b/0x5c
    [   14.856915]  __schedule+0xe81/0x13d0
    [   14.857199]  ? idr_find+0x13/0x20
    [   14.857456]  ? get_work_pool+0x2d/0x50
    [   14.857756]  ? __flush_work+0x233/0x280
    [   14.858068]  ? __schedule+0xa95/0x13d0
    [   14.858307]  ? idr_find+0x13/0x20
    [   14.858519]  ? get_work_pool+0x2d/0x50
    [   14.858798]  schedule+0x6c/0x100
    [   14.859009]  schedule_hrtimeout_range_clock+0xff/0x110
    [   14.859335]  ? tty_write_room+0x1f/0x30
    [   14.859598]  ? n_tty_poll+0x1ec/0x220
    [   14.859830]  ? tty_ldisc_deref+0x1a/0x20
    [   14.860090]  schedule_hrtimeout_range+0x17/0x20
    [   14.860373]  do_select+0x596/0x840
    [   14.860627]  ? __kernel_text_address+0x16/0x50
    [   14.860954]  ? poll_freewait+0xb0/0xb0
    [   14.861235]  ? poll_freewait+0xb0/0xb0
    [   14.861517]  ? rpm_resume+0x49d/0x780
    [   14.861798]  ? common_interrupt+0x59/0xa0
    [   14.862127]  ? asm_common_interrupt+0x2b/0x40
    [   14.862511]  ? __uart_start.isra.0+0x61/0x70
    [   14.862902]  ? __check_object_size+0x61/0x280
    [   14.863255]  core_sys_select+0x1c6/0x400
    [   14.863575]  ? vfs_write+0x1c9/0x3d0
    [   14.863853]  ? vfs_write+0x1c9/0x3d0
    [   14.864121]  ? _copy_from_user+0x45/0x70
    [   14.864526]  do_pselect.constprop.0+0xb3/0xf0
    [   14.864893]  ? do_syscall_64+0x6d/0x90
    [   14.865228]  ? do_syscall_64+0x6d/0x90
    [   14.865556]  __x64_sys_pselect6+0x76/0xa0
    [   14.865906]  do_syscall_64+0x60/0x90
    [   14.866214]  ? syscall_exit_to_user_mode+0x2a/0x50
    [   14.866640]  ? do_syscall_64+0x6d/0x90
    [   14.866972]  ? do_syscall_64+0x6d/0x90
    [   14.867286]  ? do_syscall_64+0x6d/0x90
    [   14.867626]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    [...] stripped
    [   14.872959]  </TASK>
    
    ('myfpga' is a simple 'uio_dmem_genirq' driver I wrote to test this)
    
    The implementation of "uio_dmem_genirq" was based on "uio_pdrv_genirq" and
    it is used in a similar manner to the "uio_pdrv_genirq" driver with respect
    to interrupt configuration and handling. At the time "uio_dmem_genirq" was
    introduced, both had the same implementation of the 'uio_info' handlers
    irqcontrol() and handler(). Then commit 34cb27528398 ("UIO: Fix concurrency
    issue"), which was only applied to "uio_pdrv_genirq", ended up making them
    a little different. That commit, among other things, changed disable_irq()
    to disable_irq_nosync() in the implementation of irqcontrol(). The
    motivation there was to avoid a deadlock between irqcontrol() and
    handler(), since it added a spinlock in the irq handler, and disable_irq()
    waits for the completion of the irq handler.
    
    By changing disable_irq() to disable_irq_nosync() in irqcontrol(), we also
    avoid the sleeping-while-atomic bug that commit b74351287d4b ("uio: fix a
    sleep-in-atomic-context bug in uio_dmem_genirq_irqcontrol()") was trying to
    fix. Thus, this fixes the missing unlock in irqcontrol() by importing the
    implementation of irqcontrol() handler from the "uio_pdrv_genirq" driver.
    In the end, it reverts commit b74351287d4b ("uio: fix a
    sleep-in-atomic-context bug in uio_dmem_genirq_irqcontrol()") and change
    disable_irq() to disable_irq_nosync().
    
    It is worth noting that this still does not address the concurrency issue
    fixed by commit 34cb27528398 ("UIO: Fix concurrency issue"). It will be
    addressed separately in the next commits.
    
    Split out from commit 34cb27528398 ("UIO: Fix concurrency issue").
    
    Fixes: b74351287d4b ("uio: fix a sleep-in-atomic-context bug in uio_dmem_genirq_irqcontrol()")
    Signed-off-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Link: https://lore.kernel.org/r/20220930224100.816175-2-rafaelmendsr@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a896a0145cd5d87bb4efbe29fc089e9b29ef0d46
Author: Rafael Mendonca <rafaelmendsr@gmail.com>
Date:   Tue Oct 18 12:28:25 2022 -0300

    vfio: platform: Do not pass return buffer to ACPI _RST method
    
    [ Upstream commit e67e070632a665c932d534b8b800477bb3111449 ]
    
    The ACPI _RST method has no return value, there's no need to pass a return
    buffer to acpi_evaluate_object().
    
    Fixes: d30daa33ec1d ("vfio: platform: call _RST method when using ACPI")
    Signed-off-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Link: https://lore.kernel.org/r/20221018152825.891032-1-rafaelmendsr@gmail.com
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit affe3cea6b3148fa66796a48640664822ceccd48
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 14:40:36 2022 +0800

    drivers: dio: fix possible memory leak in dio_init()
    
    [ Upstream commit e63e99397b2613d50a5f4f02ed07307e67a190f1 ]
    
    If device_register() returns error, the 'dev' and name needs be
    freed. Add a release function, and then call put_device() in the
    error path, so the name is freed in kobject_cleanup() and to the
    'dev' is freed in release function.
    
    Fixes: 2e4c77bea3d8 ("m68k: dio - Kill warn_unused_result warnings")
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109064036.1835346-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2aecfec735f16f99c059db956edfd95a32458d22
Author: Dragos Tatulea <dtatulea@nvidia.com>
Date:   Thu Dec 8 09:52:54 2022 +0200

    IB/IPoIB: Fix queue count inconsistency for PKEY child interfaces
    
    [ Upstream commit dbc94a0fb81771a38733c0e8f2ea8c4fa6934dc1 ]
    
    There are 2 ways to create IPoIB PKEY child interfaces:
    1) Writing a PKEY to /sys/class/net/<ib parent interface>/create_child.
    2) Using netlink with iproute.
    
    While with sysfs the child interface has the same number of tx and
    rx queues as the parent, with netlink there will always be 1 tx
    and 1 rx queue for the child interface. That's because the
    get_num_tx/rx_queues() netlink ops are missing and the default value
    of 1 is taken for the number of queues (in rtnl_create_link()).
    
    This change adds the get_num_tx/rx_queues() ops which allows for
    interfaces with multiple queues to be created over netlink. This
    constant only represents the max number of tx and rx queues on that
    net device.
    
    Fixes: 9baa0b036410 ("IB/ipoib: Add rtnl_link_ops support")
    Signed-off-by: Dragos Tatulea <dtatulea@nvidia.com>
    Link: https://lore.kernel.org/r/f4a42c8aa43c02d5ae5559a60c3e5e0f18c82531.1670485816.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88f4ea623f59155280d99d1a59a968f838472c4a
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Dec 2 21:22:34 2022 +0800

    hwrng: geode - Fix PCI device refcount leak
    
    [ Upstream commit 9f6ec8dc574efb7f4f3d7ee9cd59ae307e78f445 ]
    
    for_each_pci_dev() is implemented by pci_get_device(). The comment of
    pci_get_device() says that it will increase the reference count for the
    returned pci_dev and also decrease the reference count for the input
    pci_dev @from if it is not NULL.
    
    If we break for_each_pci_dev() loop with pdev not NULL, we need to call
    pci_dev_put() to decrease the reference count. We add a new struct
    'amd_geode_priv' to record pointer of the pci_dev and membase, and then
    add missing pci_dev_put() for the normal and error path.
    
    Fixes: ef5d862734b8 ("[PATCH] Add Geode HW RNG driver")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c97f72ffd504f49882774e2ab689d982dc7afc
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Dec 2 21:22:33 2022 +0800

    hwrng: amd - Fix PCI device refcount leak
    
    [ Upstream commit ecadb5b0111ea19fc7c240bb25d424a94471eb7d ]
    
    for_each_pci_dev() is implemented by pci_get_device(). The comment of
    pci_get_device() says that it will increase the reference count for the
    returned pci_dev and also decrease the reference count for the input
    pci_dev @from if it is not NULL.
    
    If we break for_each_pci_dev() loop with pdev not NULL, we need to call
    pci_dev_put() to decrease the reference count. Add the missing
    pci_dev_put() for the normal and error path.
    
    Fixes: 96d63c0297cc ("[PATCH] Add AMD HW RNG driver")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84e4794a77f94b990b8f5e847cacf6ab825ee16b
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Dec 1 14:25:26 2022 +0800

    crypto: img-hash - Fix variable dereferenced before check 'hdev->req'
    
    [ Upstream commit 04ba54e5af8f8f0137b08cb51a0b3a2e1ea46c94 ]
    
    Smatch report warning as follows:
    
    drivers/crypto/img-hash.c:366 img_hash_dma_task() warn: variable
    dereferenced before check 'hdev->req'
    
    Variable dereferenced should be done after check 'hdev->req',
    fix it.
    
    Fixes: d358f1abbf71 ("crypto: img-hash - Add Imagination Technologies hw hash accelerator")
    Fixes: 10badea259fa ("crypto: img-hash - Fix null pointer exception")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36ffa81608ce21a52394263cd3c51e1b604c6f30
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Oct 18 12:40:04 2022 +0800

    orangefs: Fix sysfs not cleanup when dev init failed
    
    [ Upstream commit ea60a4ad0cf88b411cde6888b8c890935686ecd7 ]
    
    When the dev init failed, should cleanup the sysfs, otherwise, the
    module will never be loaded since can not create duplicate sysfs
    directory:
    
      sysfs: cannot create duplicate filename '/fs/orangefs'
    
      CPU: 1 PID: 6549 Comm: insmod Tainted: G        W          6.0.0+ #44
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x34/0x44
       sysfs_warn_dup.cold+0x17/0x24
       sysfs_create_dir_ns+0x16d/0x180
       kobject_add_internal+0x156/0x3a0
       kobject_init_and_add+0xcf/0x120
       orangefs_sysfs_init+0x7e/0x3a0 [orangefs]
       orangefs_init+0xfe/0x1000 [orangefs]
       do_one_initcall+0x87/0x2a0
       do_init_module+0xdf/0x320
       load_module+0x2f98/0x3330
       __do_sys_finit_module+0x113/0x1b0
       do_syscall_64+0x35/0x80
       entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
      kobject_add_internal failed for orangefs with -EEXIST, don't try to register things with the same name in the same directory.
    
    Fixes: 2f83ace37181 ("orangefs: put register_chrdev immediately before register_filesystem")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9d8b8ba0f1a16cde0b1fc9e80466df76b6db8ff
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Nov 17 11:51:00 2022 +0800

    scsi: snic: Fix possible UAF in snic_tgt_create()
    
    [ Upstream commit e118df492320176af94deec000ae034cc92be754 ]
    
    Smatch reports a warning as follows:
    
    drivers/scsi/snic/snic_disc.c:307 snic_tgt_create() warn:
      '&tgt->list' not removed from list
    
    If device_add() fails in snic_tgt_create(), tgt will be freed, but
    tgt->list will not be removed from snic->disc.tgt_list, then list traversal
    may cause UAF.
    
    Remove from snic->disc.tgt_list before free().
    
    Fixes: c8806b6c9e82 ("snic: driver for Cisco SCSI HBA")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221117035100.2944812-1-cuigaosheng1@huawei.com
    Acked-by: Narsimhulu Musini <nmusini@cisco.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d581303d6f8d4139513105d73dd65f26c6707160
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Nov 15 17:24:42 2022 +0800

    scsi: fcoe: Fix transport not deattached when fcoe_if_init() fails
    
    [ Upstream commit 4155658cee394b22b24c6d64e49247bf26d95b92 ]
    
    fcoe_init() calls fcoe_transport_attach(&fcoe_sw_transport), but when
    fcoe_if_init() fails, &fcoe_sw_transport is not detached and leaves freed
    &fcoe_sw_transport on fcoe_transports list. This causes panic when
    reinserting module.
    
     BUG: unable to handle page fault for address: fffffbfff82e2213
     RIP: 0010:fcoe_transport_attach+0xe1/0x230 [libfcoe]
     Call Trace:
      <TASK>
      do_one_initcall+0xd0/0x4e0
      load_module+0x5eee/0x7210
      ...
    
    Fixes: 78a582463c1e ("[SCSI] fcoe: convert fcoe.ko to become an fcoe transport provider driver")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221115092442.133088-1-chenzhongjin@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 020b66023712b1cc42c6ab8b76e4ec13efe4a092
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Sun Nov 13 14:45:13 2022 +0800

    scsi: ipr: Fix WARNING in ipr_init()
    
    [ Upstream commit e6f108bffc3708ddcff72324f7d40dfcd0204894 ]
    
    ipr_init() will not call unregister_reboot_notifier() when
    pci_register_driver() fails, which causes a WARNING. Call
    unregister_reboot_notifier() when pci_register_driver() fails.
    
    notifier callback ipr_halt [ipr] already registered
    WARNING: CPU: 3 PID: 299 at kernel/notifier.c:29
    notifier_chain_register+0x16d/0x230
    Modules linked in: ipr(+) xhci_pci_renesas xhci_hcd ehci_hcd usbcore
    led_class gpu_sched drm_buddy video wmi drm_ttm_helper ttm
    drm_display_helper drm_kms_helper drm drm_panel_orientation_quirks
    agpgart cfbft
    CPU: 3 PID: 299 Comm: modprobe Tainted: G        W
    6.1.0-rc1-00190-g39508d23b672-dirty #332
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    RIP: 0010:notifier_chain_register+0x16d/0x230
    Call Trace:
     <TASK>
     __blocking_notifier_chain_register+0x73/0xb0
     ipr_init+0x30/0x1000 [ipr]
     do_one_initcall+0xdb/0x480
     do_init_module+0x1cf/0x680
     load_module+0x6a50/0x70a0
     __do_sys_finit_module+0x12f/0x1c0
     do_syscall_64+0x3f/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: f72919ec2bbb ("[SCSI] ipr: implement shutdown changes and remove obsolete write cache parameter")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Link: https://lore.kernel.org/r/20221113064513.14028-1-shangxiaojing@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16b207738247cf3eb228eaa4bb43d104c6f05374
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Nov 12 17:43:10 2022 +0800

    scsi: fcoe: Fix possible name leak when device_register() fails
    
    [ Upstream commit 47b6a122c7b69a876c7ee2fc064a26b09627de9d ]
    
    If device_register() returns an error, the name allocated by dev_set_name()
    needs to be freed. As the comment of device_register() says, one should use
    put_device() to give up the reference in the error path. Fix this by
    calling put_device(), then the name can be freed in kobject_cleanup().
    
    The 'fcf' is freed in fcoe_fcf_device_release(), so the kfree() in the
    error path can be removed.
    
    The 'ctlr' is freed in fcoe_ctlr_device_release(), so don't use the error
    label, just return NULL after calling put_device().
    
    Fixes: 9a74e884ee71 ("[SCSI] libfcoe: Add fcoe_sysfs")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221112094310.3633291-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07e97ce1a239595f8b0bb5cfd368f586de4a2a5a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 12:30:12 2022 +0800

    scsi: hpsa: Fix possible memory leak in hpsa_add_sas_device()
    
    [ Upstream commit fda34a5d304d0b98cc967e8763b52221b66dc202 ]
    
    If hpsa_sas_port_add_rphy() returns an error, the 'rphy' allocated in
    sas_end_device_alloc() needs to be freed. Address this by calling
    sas_rphy_free() in the error path.
    
    Fixes: d04e62b9d63a ("hpsa: add in sas transport class")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221111043012.1074466-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e744faa74415fc0053901c3c183e7f22d25af560
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 10 23:11:29 2022 +0800

    scsi: hpsa: Fix error handling in hpsa_add_sas_host()
    
    [ Upstream commit 4ef174a3ad9b5d73c1b6573e244ebba2b0d86eac ]
    
    hpsa_sas_port_add_phy() does:
      ...
      sas_phy_add()  -> may return error here
      sas_port_add_phy()
      ...
    
    Whereas hpsa_free_sas_phy() does:
      ...
      sas_port_delete_phy()
      sas_phy_delete()
      ...
    
    If hpsa_sas_port_add_phy() returns an error, hpsa_free_sas_phy() can not be
    called to free the memory because the port and the phy have not been added
    yet.
    
    Replace hpsa_free_sas_phy() with sas_phy_free() and kfree() to avoid kernel
    crash in this case.
    
    Fixes: d04e62b9d63a ("hpsa: add in sas transport class")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221110151129.394389-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27353e2faeaa4af46decea54e2956f2642476015
Author: Piergiorgio Beruto <piergiorgio.beruto@gmail.com>
Date:   Sat Dec 10 23:37:22 2022 +0100

    stmmac: fix potential division by 0
    
    [ Upstream commit ede5a389852d3640a28e7187fb32b7f204380901 ]
    
    When the MAC is connected to a 10 Mb/s PHY and the PTP clock is derived
    from the MAC reference clock (default), the clk_ptp_rate becomes too
    small and the calculated sub second increment becomes 0 when computed by
    the stmmac_config_sub_second_increment() function within
    stmmac_init_tstamp_counter().
    
    Therefore, the subsequent div_u64 in stmmac_init_tstamp_counter()
    operation triggers a divide by 0 exception as shown below.
    
    [   95.062067] socfpga-dwmac ff700000.ethernet eth0: Register MEM_TYPE_PAGE_POOL RxQ-0
    [   95.076440] socfpga-dwmac ff700000.ethernet eth0: PHY [stmmac-0:08] driver [NCN26000] (irq=49)
    [   95.095964] dwmac1000: Master AXI performs any burst length
    [   95.101588] socfpga-dwmac ff700000.ethernet eth0: No Safety Features support found
    [   95.109428] Division by zero in kernel.
    [   95.113447] CPU: 0 PID: 239 Comm: ifconfig Not tainted 6.1.0-rc7-centurion3-1.0.3.0-01574-gb624218205b7-dirty #77
    [   95.123686] Hardware name: Altera SOCFPGA
    [   95.127695]  unwind_backtrace from show_stack+0x10/0x14
    [   95.132938]  show_stack from dump_stack_lvl+0x40/0x4c
    [   95.137992]  dump_stack_lvl from Ldiv0+0x8/0x10
    [   95.142527]  Ldiv0 from __aeabi_uidivmod+0x8/0x18
    [   95.147232]  __aeabi_uidivmod from div_u64_rem+0x1c/0x40
    [   95.152552]  div_u64_rem from stmmac_init_tstamp_counter+0xd0/0x164
    [   95.158826]  stmmac_init_tstamp_counter from stmmac_hw_setup+0x430/0xf00
    [   95.165533]  stmmac_hw_setup from __stmmac_open+0x214/0x2d4
    [   95.171117]  __stmmac_open from stmmac_open+0x30/0x44
    [   95.176182]  stmmac_open from __dev_open+0x11c/0x134
    [   95.181172]  __dev_open from __dev_change_flags+0x168/0x17c
    [   95.186750]  __dev_change_flags from dev_change_flags+0x14/0x50
    [   95.192662]  dev_change_flags from devinet_ioctl+0x2b4/0x604
    [   95.198321]  devinet_ioctl from inet_ioctl+0x1ec/0x214
    [   95.203462]  inet_ioctl from sock_ioctl+0x14c/0x3c4
    [   95.208354]  sock_ioctl from vfs_ioctl+0x20/0x38
    [   95.212984]  vfs_ioctl from sys_ioctl+0x250/0x844
    [   95.217691]  sys_ioctl from ret_fast_syscall+0x0/0x4c
    [   95.222743] Exception stack(0xd0ee1fa8 to 0xd0ee1ff0)
    [   95.227790] 1fa0:                   00574c4f be9aeca4 00000003 00008914 be9aeca4 be9aec50
    [   95.235945] 1fc0: 00574c4f be9aeca4 0059f078 00000036 be9aee8c be9aef7a 00000015 00000000
    [   95.244096] 1fe0: 005a01f0 be9aec38 004d7484 b6e67d74
    
    Signed-off-by: Piergiorgio Beruto <piergiorgio.beruto@gmail.com>
    Fixes: 91a2559c1dc5 ("net: stmmac: Fix sub-second increment")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/de4c64ccac9084952c56a06a8171d738604c4770.1670678513.git.piergiorgio.beruto@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54c7317bde3dfea7ec6d08e7e441a3f9c9051b41
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:34 2022 +0800

    Bluetooth: hci_core: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 39c1eb6fcbae8ce9bb71b2ac5cb609355a2b181b ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 9238f36a5a50 ("Bluetooth: Add request cmd_complete and cmd_status functions")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0913307bb50e83c72afa4a25626b695ae3e7a363
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:33 2022 +0800

    Bluetooth: hci_bcsp: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 7b503e339c1a80bf0051ec2d19c3bc777014ac61 ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c366b96b10bbb96cc1470f5caccf2fc2231d5ce
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:32 2022 +0800

    Bluetooth: hci_h5: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 383630cc6758d619874c2e8bb2f68a61f3f9ef6e ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 43eb12d78960 ("Bluetooth: Fix/implement Three-wire reliable packet sending")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9c7eb2991d434949e50de9f51945369e2373c3d
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:30 2022 +0800

    Bluetooth: hci_qca: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit df4cfc91208e0a98f078223793f5871b1a82cc54 ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 0ff252c1976d ("Bluetooth: hciuart: Add support QCA chipset for UART")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7276ee693490cc7a44fafb994d0aa4e67083ca2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Dec 6 20:59:10 2022 +0800

    Bluetooth: btusb: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit b15a6bd3c80c77faec8317319b97f976b1a08332 ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 803b58367ffb ("Bluetooth: btusb: Implement driver internal packet reassembly")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4460c82177899751975180c268f352893302221
Author: Eric Pilmore <epilmore@gigaio.com>
Date:   Thu Dec 8 16:06:59 2022 -0800

    ntb_netdev: Use dev_kfree_skb_any() in interrupt context
    
    [ Upstream commit 5f7d78b2b12a9d561f48fa00bab29b40f4616dad ]
    
    TX/RX callback handlers (ntb_netdev_tx_handler(),
    ntb_netdev_rx_handler()) can be called in interrupt
    context via the DMA framework when the respective
    DMA operations have completed. As such, any calls
    by these routines to free skb's, should use the
    interrupt context safe dev_kfree_skb_any() function.
    
    Previously, these callback handlers would call the
    interrupt unsafe version of dev_kfree_skb(). This has
    not presented an issue on Intel IOAT DMA engines as
    that driver utilizes tasklets rather than a hard
    interrupt handler, like the AMD PTDMA DMA driver.
    On AMD systems, a kernel WARNING message is
    encountered, which is being issued from
    skb_release_head_state() due to in_hardirq()
    being true.
    
    Besides the user visible WARNING from the kernel,
    the other symptom of this bug was that TCP/IP performance
    across the ntb_netdev interface was very poor, i.e.
    approximately an order of magnitude below what was
    expected. With the repair to use dev_kfree_skb_any(),
    kernel WARNINGs from skb_release_head_state() ceased
    and TCP/IP performance, as measured by iperf, was on
    par with expected results, approximately 20 Gb/s on
    AMD Milan based server. Note that this performance
    is comparable with Intel based servers.
    
    Fixes: 765ccc7bc3d91 ("ntb_netdev: correct skb leak")
    Fixes: 548c237c0a997 ("net: Add support for NTB virtual ethernet device")
    Signed-off-by: Eric Pilmore <epilmore@gigaio.com>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/20221209000659.8318-1-epilmore@gigaio.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d90f63e5f52a1bc4e0a39235a0dbac69e0abe5e8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:47 2022 +0800

    net: amd: lance: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 6151d105dfce8c23edf30eed35e97f3d9b96a35c ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In these two cases, dev_kfree_skb() is called consume the xmited SKB,
    so replace it with dev_consume_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84af17d56f6e82a1b080d447c15a609735eb3567
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:46 2022 +0800

    hamradio: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 3727f742915f04f6fc550b80cf406999bd4e90d0 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In scc_discard_buffers(), dev_kfree_skb() is called to discard the SKBs,
    so replace it with dev_kfree_skb_irq().
    
    In scc_net_tx(), dev_kfree_skb() is called to drop the SKB that exceed
    queue length, so replace it with dev_kfree_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82b04c27e58061684503a17197700011b97ea0eb
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:45 2022 +0800

    net: ethernet: dnet: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit f07fadcbee2a5e84caa67c7c445424200bffb60b ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    In this case, the lock is used to protected 'bp', so we can move
    dev_kfree_skb() after the spin_unlock_irqrestore().
    
    Fixes: 4796417417a6 ("dnet: Dave DNET ethernet controller driver (updated)")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cce993d04348948ba51bfffd1720957003a6d963
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:44 2022 +0800

    net: emaclite: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit d1678bf45f21fa5ae4a456f821858679556ea5f8 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in xemaclite_tx_timeout() to
    drop the SKB, when tx timeout, so replace it with dev_kfree_skb_irq().
    
    Fixes: bb81b2ddfa19 ("net: add Xilinx emac lite device driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6537d363e454bcbb081d40c3b5b16c1478acfa04
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 21:37:35 2022 +0800

    net: apple: bmac: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 5fe02e046e6422c4adfdbc50206ec7186077da24 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in bmac_tx_timeout() to drop
    the SKB, when tx timeout, so replace it with dev_kfree_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 460577583a350fc492071526f04386541ae4111a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 21:37:34 2022 +0800

    net: apple: mace: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 3dfe3486c1cd4f82b466b7d307f23777137b8acc ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in mace_tx_timeout() to drop
    the SKB, when tx timeout, so replace it with dev_kfree_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8316584b0a6c61c9c407631040c22712b26e38c
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Dec 8 20:04:52 2022 +0800

    net/tunnel: wait until all sk_user_data reader finish before releasing the sock
    
    [ Upstream commit 3cf7203ca620682165706f70a1b12b5194607dce ]
    
    There is a race condition in vxlan that when deleting a vxlan device
    during receiving packets, there is a possibility that the sock is
    released after getting vxlan_sock vs from sk_user_data. Then in
    later vxlan_ecn_decapsulate(), vxlan_get_sk_family() we will got
    NULL pointer dereference. e.g.
    
       #0 [ffffa25ec6978a38] machine_kexec at ffffffff8c669757
       #1 [ffffa25ec6978a90] __crash_kexec at ffffffff8c7c0a4d
       #2 [ffffa25ec6978b58] crash_kexec at ffffffff8c7c1c48
       #3 [ffffa25ec6978b60] oops_end at ffffffff8c627f2b
       #4 [ffffa25ec6978b80] page_fault_oops at ffffffff8c678fcb
       #5 [ffffa25ec6978bd8] exc_page_fault at ffffffff8d109542
       #6 [ffffa25ec6978c00] asm_exc_page_fault at ffffffff8d200b62
          [exception RIP: vxlan_ecn_decapsulate+0x3b]
          RIP: ffffffffc1014e7b  RSP: ffffa25ec6978cb0  RFLAGS: 00010246
          RAX: 0000000000000008  RBX: ffff8aa000888000  RCX: 0000000000000000
          RDX: 000000000000000e  RSI: ffff8a9fc7ab803e  RDI: ffff8a9fd1168700
          RBP: ffff8a9fc7ab803e   R8: 0000000000700000   R9: 00000000000010ae
          R10: ffff8a9fcb748980  R11: 0000000000000000  R12: ffff8a9fd1168700
          R13: ffff8aa000888000  R14: 00000000002a0000  R15: 00000000000010ae
          ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
       #7 [ffffa25ec6978ce8] vxlan_rcv at ffffffffc10189cd [vxlan]
       #8 [ffffa25ec6978d90] udp_queue_rcv_one_skb at ffffffff8cfb6507
       #9 [ffffa25ec6978dc0] udp_unicast_rcv_skb at ffffffff8cfb6e45
      #10 [ffffa25ec6978dc8] __udp4_lib_rcv at ffffffff8cfb8807
      #11 [ffffa25ec6978e20] ip_protocol_deliver_rcu at ffffffff8cf76951
      #12 [ffffa25ec6978e48] ip_local_deliver at ffffffff8cf76bde
      #13 [ffffa25ec6978ea0] __netif_receive_skb_one_core at ffffffff8cecde9b
      #14 [ffffa25ec6978ec8] process_backlog at ffffffff8cece139
      #15 [ffffa25ec6978f00] __napi_poll at ffffffff8ceced1a
      #16 [ffffa25ec6978f28] net_rx_action at ffffffff8cecf1f3
      #17 [ffffa25ec6978fa0] __softirqentry_text_start at ffffffff8d4000ca
      #18 [ffffa25ec6978ff0] do_softirq at ffffffff8c6fbdc3
    
    Reproducer: https://github.com/Mellanox/ovs-tests/blob/master/test-ovs-vxlan-remove-tunnel-during-traffic.sh
    
    Fix this by waiting for all sk_user_data reader to finish before
    releasing the sock.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Suggested-by: Jakub Sitnicki <jakub@cloudflare.com>
    Fixes: 6a93cc905274 ("udp-tunnel: Add a few more UDP tunnel APIs")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41798a063fd4721b609e11ad839b6820f5070ca7
Author: Li Zetao <lizetao1@huawei.com>
Date:   Thu Dec 8 20:05:40 2022 +0800

    net: farsync: Fix kmemleak when rmmods farsync
    
    [ Upstream commit 2f623aaf9f31de968dea6169849706a2f9be444c ]
    
    There are two memory leaks reported by kmemleak:
    
      unreferenced object 0xffff888114b20200 (size 128):
        comm "modprobe", pid 4846, jiffies 4295146524 (age 401.345s)
        hex dump (first 32 bytes):
          e0 62 57 09 81 88 ff ff e0 62 57 09 81 88 ff ff  .bW......bW.....
          01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<ffffffff815bcd82>] kmalloc_trace+0x22/0x60
          [<ffffffff83d35c78>] __hw_addr_add_ex+0x198/0x6c0
          [<ffffffff83d3989d>] dev_addr_init+0x13d/0x230
          [<ffffffff83d1063d>] alloc_netdev_mqs+0x10d/0xe50
          [<ffffffff82b4a06e>] alloc_hdlcdev+0x2e/0x80
          [<ffffffffa016a741>] fst_add_one+0x601/0x10e0 [farsync]
          ...
    
      unreferenced object 0xffff88810b85b000 (size 1024):
        comm "modprobe", pid 4846, jiffies 4295146523 (age 401.346s)
        hex dump (first 32 bytes):
          00 00 b0 02 00 c9 ff ff 00 70 0a 00 00 c9 ff ff  .........p......
          00 00 00 f2 00 00 00 f3 0a 00 00 00 02 00 00 00  ................
        backtrace:
          [<ffffffff815bcd82>] kmalloc_trace+0x22/0x60
          [<ffffffffa016a294>] fst_add_one+0x154/0x10e0 [farsync]
          [<ffffffff82060e83>] local_pci_probe+0xd3/0x170
          ...
    
    The root cause is traced to the netdev and fst_card_info are not freed
    when removes one fst in fst_remove_one(), which may trigger oom if
    repeated insmod and rmmod module.
    
    Fix it by adding free_netdev() and kfree() in fst_remove_one(), just as
    the operations on the error handling path in fst_add_one().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d30b9f10f95e666b9bd98ae35f2939a1b23093c
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 20:01:21 2022 +0800

    ethernet: s2io: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 6cee96e09df54ae17784c0f38a49e0ed8229b825 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in free_tx_buffers() to drop
    the SKBs in tx buffers, when the card is down, so replace it with
    dev_kfree_skb_irq() here.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15770edc01edfce773269e8a443ca8e420f6f859
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Dec 7 08:54:10 2022 +0000

    drivers: net: qlcnic: Fix potential memory leak in qlcnic_sriov_init()
    
    [ Upstream commit 01de1123322e4fe1bbd0fcdf0982511b55519c03 ]
    
    If vp alloc failed in qlcnic_sriov_init(), all previously allocated vp
    needs to be freed.
    
    Fixes: f197a7aa6288 ("qlcnic: VF-PF communication channel implementation")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cdf10b514ff8a6c8df8b3ae413b8fcb1f3ee60c8
Author: Yongqiang Liu <liuyongqiang13@huawei.com>
Date:   Wed Dec 7 07:20:45 2022 +0000

    net: defxx: Fix missing err handling in dfx_init()
    
    [ Upstream commit ae18dcdff0f8d7e84cd3fd9f496518b5e72d185d ]
    
    When eisa_driver_register() or tc_register_driver() failed,
    the modprobe defxx would fail with some err log as follows:
    
     Error: Driver 'defxx' is already registered, aborting...
    
    Fix this issue by adding err hanling in dfx_init().
    
    Fixes: e89a2cfb7d7b5 ("[TC] defxx: TURBOchannel support")
    Signed-off-by: Yongqiang Liu <liuyongqiang13@huawei.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1afe89a96db2a757b9cd78f7ca55a85e647cb409
Author: Artem Chernyshev <artem.chernyshev@red-soft.ru>
Date:   Tue Dec 6 09:58:34 2022 +0300

    net: vmw_vsock: vmci: Check memcpy_from_msg()
    
    [ Upstream commit 44aa5a6dba8283bfda28b1517af4de711c5652a4 ]
    
    vmci_transport_dgram_enqueue() does not check the return value
    of memcpy_from_msg().  If memcpy_from_msg() fails, it is possible that
    uninitialized memory contents are sent unintentionally instead of user's
    message in the datagram to the destination.  Return with an error if
    memcpy_from_msg() fails.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 0f7db23a07af ("vmci_transport: switch ->enqeue_dgram, ->enqueue_stream and ->dequeue_stream to msghdr")
    Signed-off-by: Artem Chernyshev <artem.chernyshev@red-soft.ru>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe70ceaf3810f04fdff60d630c60d4aa14ebf1e3
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Nov 22 12:04:10 2022 +0800

    blktrace: Fix output non-blktrace event when blk_classic option enabled
    
    [ Upstream commit f596da3efaf4130ff61cd029558845808df9bf99 ]
    
    When the blk_classic option is enabled, non-blktrace events must be
    filtered out. Otherwise, events of other types are output in the blktrace
    classic format, which is unexpected.
    
    The problem can be triggered in the following ways:
    
      # echo 1 > /sys/kernel/debug/tracing/options/blk_classic
      # echo 1 > /sys/kernel/debug/tracing/events/enable
      # echo blk > /sys/kernel/debug/tracing/current_tracer
      # cat /sys/kernel/debug/tracing/trace_pipe
    
    Fixes: c71a89615411 ("blktrace: add ftrace plugin")
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Link: https://lore.kernel.org/r/20221122040410.85113-1-yangjihong1@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56758e923d087d14921c2e30af564860a3400981
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Fri Dec 2 13:35:42 2022 +0800

    wifi: brcmfmac: Fix error return code in brcmf_sdio_download_firmware()
    
    [ Upstream commit c2f2924bc7f9ea75ef8d95863e710168f8196256 ]
    
    Fix to return a negative error code instead of 0 when
    brcmf_chip_set_active() fails. In addition, change the return
    value for brcmf_pcie_exit_download_state() to keep consistent.
    
    Fixes: d380ebc9b6fb ("brcmfmac: rename chip download functions")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Reviewed-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/1669959342-27144-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a55f0336cbbab0779b5e94557d1fc40c145c701
Author: Bitterblue Smith <rtl8821cerfe2@gmail.com>
Date:   Thu Dec 1 16:13:57 2022 +0200

    wifi: rtl8xxxu: Add __packed to struct rtl8723bu_c2h
    
    [ Upstream commit dd469a754afdb782ba3033cee102147493dc39f4 ]
    
    This struct is used to access a sequence of bytes received from the
    wifi chip. It must not have any padding bytes between the members.
    
    This doesn't change anything on my system, possibly because currently
    none of the members need more than byte alignment.
    
    Fixes: b2b43b7837ba ("rtl8xxxu: Initial functionality to handle C2H events for 8723bu")
    Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
    Reviewed-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/1a270918-da22-ff5f-29fc-7855f740c5ba@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d308c4a035b636756786af91e5f39f9d92d7d42a
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Nov 17 15:02:36 2022 +0800

    media: coda: Add check for kmalloc
    
    [ Upstream commit 6e5e5defdb8b0186312c2f855ace175aee6daf9b ]
    
    As the kmalloc may return NULL pointer,
    it should be better to check the return value
    in order to avoid NULL poineter dereference,
    same as the others.
    
    Fixes: cb1d3a336371 ("[media] coda: add CODA7541 JPEG support")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5688d33aa293dfa122d66bef9c0258ddf7ef11e7
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Nov 17 14:56:52 2022 +0800

    media: coda: Add check for dcoda_iram_alloc
    
    [ Upstream commit 6b8082238fb8bb20f67e46388123e67a5bbc558d ]
    
    As the coda_iram_alloc may return NULL pointer,
    it should be better to check the return value
    in order to avoid NULL poineter dereference,
    same as the others.
    
    Fixes: b313bcc9a467 ("[media] coda: simplify IRAM setup")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52a736cc7116f29b380e42e506146070abc21407
Author: Liang He <windhl@126.com>
Date:   Tue Jul 19 22:10:23 2022 +0800

    media: c8sectpfe: Add of_node_put() when breaking out of loop
    
    [ Upstream commit 63ff05a1ad242a5a0f897921c87b70d601bda59c ]
    
    In configure_channels(), we should call of_node_put() when breaking
    out of for_each_child_of_node() which will automatically increase
    and decrease the refcount.
    
    Fixes: c5f5d0f99794 ("[media] c8sectpfe: STiH407/10 Linux DVB demux support")
    Signed-off-by: Liang He <windhl@126.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b839998387b5c8fe6632d203053dc86d1631949c
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 21:35:39 2022 +0800

    mmc: mmci: fix return value check of mmc_add_host()
    
    [ Upstream commit b38a20f29a49ae04d23750d104b25400b792b98c ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    So fix this by checking the return value and goto error path which
    will call mmc_free_host().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109133539.3275664-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc85606bdfc246ccbeca41f9067ff5f8267a2d97
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 21:32:37 2022 +0800

    mmc: wbsd: fix return value check of mmc_add_host()
    
    [ Upstream commit dc5b9b50fc9d1334407e316e6e29a5097ef833bd ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    So fix this by checking the return value and goto error path which
    will call mmc_free_host(), besides, other resources also need be
    released.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109133237.3273558-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 076bcd2c93e16b05c10564e299d6e5d26a766d00
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 21:09:49 2022 +0800

    mmc: via-sdmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit e4e46fb61e3bb4628170810d3f2b996b709b90d9 ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    Fix this by checking the return value and goto error path which
    will call mmc_free_host().
    
    Fixes: f0bf7f61b840 ("mmc: Add new via-sdmmc host controller driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221108130949.1067699-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41ed46bdbd2878cd6567abe0974a445f8b1b8ec8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:22 2022 +0800

    mmc: vub300: fix return value check of mmc_add_host()
    
    [ Upstream commit 0613ad2401f88bdeae5594c30afe318e93b14676 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host(), besides, the timer added before mmc_add_host() needs be del.
    
    And this patch fixes another missing call mmc_free_host() if usb_control_msg()
    fails.
    
    Fixes: 88095e7b473a ("mmc: Add new VUB300 USB-to-SD/SDIO/MMC driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-9-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34ae492f8d172f0bd193c24cad588b35419ea47a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:21 2022 +0800

    mmc: toshsd: fix return value check of mmc_add_host()
    
    [ Upstream commit f670744a316ea983113a65313dcd387b5a992444 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host(), besides, free_irq() also needs be called.
    
    Fixes: a5eb8bbd66cc ("mmc: add Toshiba PCI SD controller driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-8-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7ad7278be401b09c9f9a9f522cf4c449c7fd489
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:20 2022 +0800

    mmc: rtsx_usb_sdmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit fc38a5a10e9e5a75eb9189854abeb8405b214cc9 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and calling mmc_free_host() in the
    error path, besides, led_classdev_unregister() and pm_runtime_disable() also
    need be called.
    
    Fixes: c7f6558d84af ("mmc: Add realtek USB sdmmc host driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-7-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f35c038c9f4d258b3cf77885a2730f1417d63e7
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:17 2022 +0800

    mmc: mxcmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit cde600af7b413c9fe03e85c58c4279df90e91d13 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host().
    
    Fixes: d96be879ff46 ("mmc: Add a MX2/MX3 specific SDHC driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-4-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4c765f5d8e58138cff69f1510b2e8942ec37022
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:16 2022 +0800

    mmc: moxart: fix return value check of mmc_add_host()
    
    [ Upstream commit 0ca18d09c744fb030ae9bc5836c3e357e0237dea ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host().
    
    Fixes: 1b66e94e6b99 ("mmc: moxart: Add MOXA ART SD/MMC driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-3-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b14950986240a259295ba738ae47e52f77810b48
Author: Wang ShaoBo <bobo.shaobowang@huawei.com>
Date:   Thu Nov 24 17:23:42 2022 +0800

    SUNRPC: Fix missing release socket in rpc_sockname()
    
    [ Upstream commit 50fa355bc0d75911fe9d5072a5ba52cdb803aff7 ]
    
    socket dynamically created is not released when getting an unintended
    address family type in rpc_sockname(), direct to out_release for calling
    sock_release().
    
    Fixes: 2e738fdce22f ("SUNRPC: Add API to acquire source address")
    Signed-off-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06ec592389f2be3199779ab823c4323dcfd2121f
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Dec 6 14:10:04 2022 +0800

    ALSA: mts64: fix possible null-ptr-defer in snd_mts64_interrupt
    
    [ Upstream commit cf2ea3c86ad90d63d1c572b43e1ca9276b0357ad ]
    
    I got a null-ptr-defer error report when I do the following tests
    on the qemu platform:
    
    make defconfig and CONFIG_PARPORT=m, CONFIG_PARPORT_PC=m,
    CONFIG_SND_MTS64=m
    
    Then making test scripts:
    cat>test_mod1.sh<<EOF
    modprobe snd-mts64
    modprobe snd-mts64
    EOF
    
    Executing the script, perhaps several times, we will get a null-ptr-defer
    report, as follow:
    
    syzkaller:~# ./test_mod.sh
    snd_mts64: probe of snd_mts64.0 failed with error -5
    modprobe: ERROR: could not insert 'snd_mts64': No such device
     BUG: kernel NULL pointer dereference, address: 0000000000000000
     #PF: supervisor write access in kernel mode
     #PF: error_code(0x0002) - not-present page
     PGD 0 P4D 0
     Oops: 0002 [#1] PREEMPT SMP PTI
     CPU: 0 PID: 205 Comm: modprobe Not tainted 6.1.0-rc8-00588-g76dcd734eca2 #6
     Call Trace:
      <IRQ>
      snd_mts64_interrupt+0x24/0xa0 [snd_mts64]
      parport_irq_handler+0x37/0x50 [parport]
      __handle_irq_event_percpu+0x39/0x190
      handle_irq_event_percpu+0xa/0x30
      handle_irq_event+0x2f/0x50
      handle_edge_irq+0x99/0x1b0
      __common_interrupt+0x5d/0x100
      common_interrupt+0xa0/0xc0
      </IRQ>
      <TASK>
      asm_common_interrupt+0x22/0x40
     RIP: 0010:_raw_write_unlock_irqrestore+0x11/0x30
      parport_claim+0xbd/0x230 [parport]
      snd_mts64_probe+0x14a/0x465 [snd_mts64]
      platform_probe+0x3f/0xa0
      really_probe+0x129/0x2c0
      __driver_probe_device+0x6d/0xc0
      driver_probe_device+0x1a/0xa0
      __device_attach_driver+0x7a/0xb0
      bus_for_each_drv+0x62/0xb0
      __device_attach+0xe4/0x180
      bus_probe_device+0x82/0xa0
      device_add+0x550/0x920
      platform_device_add+0x106/0x220
      snd_mts64_attach+0x2e/0x80 [snd_mts64]
      port_check+0x14/0x20 [parport]
      bus_for_each_dev+0x6e/0xc0
      __parport_register_driver+0x7c/0xb0 [parport]
      snd_mts64_module_init+0x31/0x1000 [snd_mts64]
      do_one_initcall+0x3c/0x1f0
      do_init_module+0x46/0x1c6
      load_module+0x1d8d/0x1e10
      __do_sys_finit_module+0xa2/0xf0
      do_syscall_64+0x37/0x90
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
     Kernel panic - not syncing: Fatal exception in interrupt
     Rebooting in 1 seconds..
    
    The mts wa not initialized during interrupt,  we add check for
    mts to fix this bug.
    
    Fixes: 68ab801e32bb ("[ALSA] Add snd-mts64 driver for ESI Miditerminal 4140")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221206061004.1222966-1-cuigaosheng1@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6204de885dc7a847d83a52e0ee9746d9d2b8d5ab
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Sat Nov 26 11:31:26 2022 +0000

    media: saa7164: fix missing pci_disable_device()
    
    [ Upstream commit 57fb35d7542384cac8f198cd1c927540ad38b61a ]
    
    Add missing pci_disable_device() in the error path in saa7164_initdev().
    
    Fixes: 443c1228d505 ("V4L/DVB (12923): SAA7164: Add support for the NXP SAA7164 silicon")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68c4ab962d3b380755a85097543715db66562127
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 1 20:27:05 2022 +0800

    regulator: core: fix module refcount leak in set_supply()
    
    [ Upstream commit da46ee19cbd8344d6860816b4827a7ce95764867 ]
    
    If create_regulator() fails in set_supply(), the module refcount
    needs be put to keep refcount balanced.
    
    Fixes: e2c09ae7a74d ("regulator: core: Increase refcount for regulator supply's module")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221201122706.4055992-2-yangyingliang@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b5357f3639768cf990642341ecec05947aee2b4
Author: Dan Carpenter <error27@gmail.com>
Date:   Mon Nov 28 14:06:14 2022 +0300

    bonding: uninitialized variable in bond_miimon_inspect()
    
    [ Upstream commit e5214f363dabca240446272dac54d404501ad5e5 ]
    
    The "ignore_updelay" variable needs to be initialized to false.
    
    Fixes: f8a65ab2f3ff ("bonding: fix link recovery in mode 2 when updelay is nonzero")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Link: https://lore.kernel.org/r/Y4SWJlh3ohJ6EPTL@kili
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 485029c83511f7446b9a190fdc0e8133956d2234
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 29 00:04:02 2022 +0800

    ASoC: pcm512x: Fix PM disable depth imbalance in pcm512x_probe
    
    [ Upstream commit 97b801be6f8e53676b9f2b105f54e35c745c1b22 ]
    
    The pm_runtime_enable will increase power disable depth. Thus
    a pairing decrement is needed on the error handling path to
    keep it balanced according to context. We fix it by going to
    err_pm instead of err_clk.
    
    Fixes:f086ba9d5389c ("ASoC: pcm512x: Support mastering BCLK/LRCLK using the PLL")
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220928160402.126140-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6611feef35c0c8c4d297b28a7fc6ab3a2c47eca7
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Nov 22 19:30:43 2022 +0800

    drm/amdgpu: Fix PCI device refcount leak in amdgpu_atrm_get_bios()
    
    [ Upstream commit ca54639c7752edf1304d92ff4d0c049d4efc9ba0 ]
    
    As comment of pci_get_class() says, it returns a pci_device with its
    refcount increased and decreased the refcount for the input parameter
    @from if it is not NULL.
    
    If we break the loop in amdgpu_atrm_get_bios() with 'pdev' not NULL, we
    need to call pci_dev_put() to decrease the refcount. Add the missing
    pci_dev_put() to avoid refcount leak.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f28c7f67af4ef9bca580ab67ae2d4511797af56
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Nov 22 19:30:42 2022 +0800

    drm/radeon: Fix PCI device refcount leak in radeon_atrm_get_bios()
    
    [ Upstream commit 725a521a18734f65de05b8d353b5bd0d3ca4c37a ]
    
    As comment of pci_get_class() says, it returns a pci_device with its
    refcount increased and decreased the refcount for the input parameter
    @from if it is not NULL.
    
    If we break the loop in radeon_atrm_get_bios() with 'pdev' not NULL, we
    need to call pci_dev_put() to decrease the refcount. Add the missing
    pci_dev_put() to avoid refcount leak.
    
    Fixes: d8ade3526b2a ("drm/radeon: handle non-VGA class pci devices with ATRM")
    Fixes: c61e2775873f ("drm/radeon: split ATRM support out from the ATPX handler (v3)")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0e07daf2d79ef1146a109054212966fe173dbab
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Sat Nov 26 10:14:29 2022 +0800

    ALSA: asihpi: fix missing pci_disable_device()
    
    [ Upstream commit 9d86515c3d4c0564a0c31a2df87d735353a1971e ]
    
    pci_disable_device() need be called while module exiting, switch to use
    pcim_enable(), pci_disable_device() will be called in pcim_release().
    
    Fixes: 3285ea10e9b0 ("ALSA: asihpi - Interrelated HPI tidy up.")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Link: https://lore.kernel.org/r/20221126021429.3029562-1-liushixin2@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cc6b7acf5228e8ee3fd17dcf535bed2212d5ae9
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Fri Nov 4 13:20:01 2022 -0400

    NFSv4: Fix a deadlock between nfs4_open_recover_helper() and delegreturn
    
    [ Upstream commit 51069e4aef6257b0454057359faed0ab0c9af083 ]
    
    If we're asked to recover open state while a delegation return is
    outstanding, then the state manager thread cannot use a cached open, so
    if the server returns a delegation, we can end up deadlocked behind the
    pending delegreturn.
    To avoid this problem, let's just ask the server not to give us a
    delegation unless we're explicitly reclaiming one.
    
    Fixes: be36e185bd26 ("NFSv4: nfs4_open_recover_helper() must set share access")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f384464b9a37795f2cbfd99d2f6ffebe01b6ead
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Oct 18 18:21:14 2022 -0400

    NFSv4.2: Fix a memory stomp in decode_attr_security_label
    
    [ Upstream commit 43c1031f7110967c240cb6e922adcfc4b8899183 ]
    
    We must not change the value of label->len if it is zero, since that
    indicates we stored a label.
    
    Fixes: b4487b935452 ("nfs: Fix getxattr kernel panic and memory overflow")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b6a8a1a32746981044e7ab06649c804acb4068a
Author: Baisong Zhong <zhongbaisong@huawei.com>
Date:   Sun Nov 20 06:59:18 2022 +0000

    media: dvb-usb: az6027: fix null-ptr-deref in az6027_i2c_xfer()
    
    [ Upstream commit 0ed554fd769a19ea8464bb83e9ac201002ef74ad ]
    
    Wei Chen reports a kernel bug as blew:
    
    general protection fault, probably for non-canonical address
    KASAN: null-ptr-deref in range [0x0000000000000010-0x0000000000000017]
    ...
    Call Trace:
    <TASK>
    __i2c_transfer+0x77e/0x1930 drivers/i2c/i2c-core-base.c:2109
    i2c_transfer+0x1d5/0x3d0 drivers/i2c/i2c-core-base.c:2170
    i2cdev_ioctl_rdwr+0x393/0x660 drivers/i2c/i2c-dev.c:297
    i2cdev_ioctl+0x75d/0x9f0 drivers/i2c/i2c-dev.c:458
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:870 [inline]
    __se_sys_ioctl+0xfb/0x170 fs/ioctl.c:856
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7fd834a8bded
    
    In az6027_i2c_xfer(), if msg[i].addr is 0x99,
    a null-ptr-deref will caused when accessing msg[i].buf.
    For msg[i].len is 0 and msg[i].buf is null.
    
    Fix this by checking msg[i].len in az6027_i2c_xfer().
    
    Link: https://lore.kernel.org/lkml/CAO4mrfcPHB5aQJO=mpqV+p8mPLNg-Fok0gw8gZ=zemAfMGTzMg@mail.gmail.com/
    
    Link: https://lore.kernel.org/linux-media/20221120065918.2160782-1-zhongbaisong@huawei.com
    Fixes: 76f9a820c867 ("V4L/DVB: AZ6027: Initial import of the driver")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Baisong Zhong <zhongbaisong@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fb8cc3eb6716dcb14d00be9e59562fbf6259595
Author: ZhangPeng <zhangpeng362@huawei.com>
Date:   Fri Nov 25 07:01:56 2022 +0000

    pinctrl: pinconf-generic: add missing of_node_put()
    
    [ Upstream commit 5ead93289815a075d43c415e35c8beafafb801c9 ]
    
    of_node_put() needs to be called when jumping out of the loop, since
    for_each_available_child_of_node() will increase the refcount of node.
    
    Fixes: c7289500e29d ("pinctrl: pinconf-generic: scan also referenced phandle node")
    Signed-off-by: ZhangPeng <zhangpeng362@huawei.com>
    Link: https://lore.kernel.org/r/20221125070156.3535855-1-zhangpeng362@huawei.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 075e24fd1d336a86a4ec0acc3d8c74bba8a787fd
Author: Gautam Menghani <gautammenghani201@gmail.com>
Date:   Wed Oct 19 06:02:14 2022 +0100

    media: imon: fix a race condition in send_packet()
    
    [ Upstream commit 813ceef062b53d68f296aa3cb944b21a091fabdb ]
    
    The function send_packet() has a race condition as follows:
    
    func send_packet()
    {
        // do work
        call usb_submit_urb()
        mutex_unlock()
        wait_for_event_interruptible()  <-- lock gone
        mutex_lock()
    }
    
    func vfd_write()
    {
        mutex_lock()
        call send_packet()  <- prev call is not completed
        mutex_unlock()
    }
    
    When the mutex is unlocked and the function send_packet() waits for the
    call to complete, vfd_write() can start another call, which leads to the
    "URB submitted while active" warning in usb_submit_urb().
    Fix this by removing the mutex_unlock() call in send_packet() and using
    mutex_lock_interruptible().
    
    Link: https://syzkaller.appspot.com/bug?id=e378e6a51fbe6c5cc43e34f131cc9a315ef0337e
    
    Fixes: 21677cfc562a ("V4L/DVB: ir-core: add imon driver")
    Reported-by: syzbot+0c3cb6dc05fbbdc3ad66@syzkaller.appspotmail.com
    Signed-off-by: Gautam Menghani <gautammenghani201@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb3f35f44887a8486737fe88d58050f1df290758
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sat Nov 19 07:33:07 2022 +0000

    mtd: maps: pxa2xx-flash: fix memory leak in probe
    
    [ Upstream commit 2399401feee27c639addc5b7e6ba519d3ca341bf ]
    
    Free 'info' upon remapping error to avoid a memory leak.
    
    Fixes: e644f7d62894 ("[MTD] MAPS: Merge Lubbock and Mainstone drivers into common PXA2xx driver")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    [<miquel.raynal@bootlin.com>: Reword the commit log]
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221119073307.22929-1-zhengyongjun3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20201c3a0a32f127fa4bdf379d6ac01c2978702d
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 23 17:12:01 2022 +0800

    clk: rockchip: Fix memory leak in rockchip_clk_register_pll()
    
    [ Upstream commit 739a6a6bbdb793bd57938cb24aa5a6df89983546 ]
    
    If clk_register() fails, @pll->rate_table may have allocated memory by
    kmemdup(), so it needs to be freed, otherwise will cause memory leak
    issue, this patch fixes it.
    
    Fixes: 90c590254051 ("clk: rockchip: add clock type for pll clocks and pll used on rk3066")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Link: https://lore.kernel.org/r/20221123091201.199819-1-xiujianfeng@huawei.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30f79752f5804c74452a227cd1d881430ec2311f
Author: Baisong Zhong <zhongbaisong@huawei.com>
Date:   Mon Nov 21 19:16:30 2022 +0800

    ALSA: seq: fix undefined behavior in bit shift for SNDRV_SEQ_FILTER_USE_EVENT
    
    [ Upstream commit cf59e1e4c79bf741905484cdb13c130b53576a16 ]
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in sound/core/seq/seq_clientmgr.c:509:22
    left shift of 1 by 31 places cannot be represented in type 'int'
    ...
    Call Trace:
     <TASK>
     dump_stack_lvl+0x8d/0xcf
     ubsan_epilogue+0xa/0x44
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x208
     snd_seq_deliver_single_event.constprop.21+0x191/0x2f0
     snd_seq_deliver_event+0x1a2/0x350
     snd_seq_kernel_client_dispatch+0x8b/0xb0
     snd_seq_client_notify_subscription+0x72/0xa0
     snd_seq_ioctl_subscribe_port+0x128/0x160
     snd_seq_kernel_client_ctl+0xce/0xf0
     snd_seq_oss_create_client+0x109/0x15b
     alsa_seq_oss_init+0x11c/0x1aa
     do_one_initcall+0x80/0x440
     kernel_init_freeable+0x370/0x3c3
     kernel_init+0x1b/0x190
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Baisong Zhong <zhongbaisong@huawei.com>
    Link: https://lore.kernel.org/r/20221121111630.3119259-1-zhongbaisong@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2eb9ec56e0d17c00afb98ecd12989cd1dd00c7d
Author: Marcus Folkesson <marcus.folkesson@gmail.com>
Date:   Thu Nov 17 13:13:26 2022 +0100

    HID: hid-sensor-custom: set fixed size for custom attributes
    
    [ Upstream commit 9d013910df22de91333a0acc81d1dbb115bd76f6 ]
    
    This is no bugfix (so no Fixes: tag is necessary) as it is
    taken care of in hid_sensor_custom_add_attributes().
    
    The motivation for this patch is that:
    hid_sensor_custom_field.attr_name and
    hid_sensor_custom_field.attrs
    has the size of HID_CUSTOM_TOTAL_ATTRS and used in same context.
    
    We compare against HID_CUSTOM_TOTAL_ATTRS when
    looping through hid_custom_attrs.
    
    We will silent the smatch error:
    hid_sensor_custom_add_attributes() error: buffer overflow
    'hid_custom_attrs' 8 <= 10
    
    Signed-off-by: Marcus Folkesson <marcus.folkesson@gmail.com>
    Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93e707953db8f88cf262f8b1461567aa37051e98
Author: Yuan Can <yuancan@huawei.com>
Date:   Fri Nov 11 06:08:53 2022 +0000

    media: platform: exynos4-is: Fix error handling in fimc_md_init()
    
    [ Upstream commit b434422c45282a0573d8123239abc41fa72665d4 ]
    
    A problem about modprobe s5p_fimc failed is triggered with the
    following log given:
    
     [  272.075275] Error: Driver 'exynos4-fimc' is already registered, aborting...
     modprobe: ERROR: could not insert 's5p_fimc': Device or resource busy
    
    The reason is that fimc_md_init() returns platform_driver_register()
    directly without checking its return value, if platform_driver_register()
    failed, it returns without unregister fimc_driver, resulting the
    s5p_fimc can never be installed later.
    A simple call graph is shown as below:
    
     fimc_md_init()
       fimc_register_driver() # register fimc_driver
       platform_driver_register()
         platform_driver_register()
           driver_register()
             bus_add_driver()
               dev = kzalloc(...) # OOM happened
       # return without unregister fimc_driver
    
    Fix by unregister fimc_driver when platform_driver_register() returns
    error.
    
    Fixes: d3953223b090 ("[media] s5p-fimc: Add the media device driver")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83d4b1ae98a47a739fa5241300b86eb1110d5d63
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 10 16:24:23 2022 +0800

    media: solo6x10: fix possible memory leak in solo_sysfs_init()
    
    [ Upstream commit 7f5866dd96d95b74e439f6ee17b8abd8195179fb ]
    
    If device_register() returns error in solo_sysfs_init(), the
    name allocated by dev_set_name() need be freed. As comment of
    device_register() says, it should use put_device() to give up
    the reference in the error path. So fix this by calling
    put_device(), then the name can be freed in kobject_cleanup().
    
    Fixes: dcae5dacbce5 ("[media] solo6x10: sync to latest code from Bluecherry's git repo")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6590d09b54e9e79cb471103a4fdff29bd4ce60f0
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Nov 17 21:49:19 2022 -0800

    Input: elants_i2c - properly handle the reset GPIO when power is off
    
    [ Upstream commit a85fbd6498441694475716a4d5c65f9d3e073faf ]
    
    As can be seen in elants_i2c_power_off(), we want the reset GPIO
    asserted when power is off. The reset GPIO is active low so we need
    the reset line logic low when power is off to avoid leakage.
    
    We have a problem, though, at probe time. At probe time we haven't
    powered the regulators on yet but we have:
    
      devm_gpiod_get(&client->dev, "reset", GPIOD_OUT_LOW);
    
    While that _looks_ right, it turns out that it's not. The
    GPIOD_OUT_LOW doesn't mean to init the GPIO to low. It means init the
    GPIO to "not asserted". Since this is an active low GPIO that inits it
    to be high.
    
    Let's fix this to properly init the GPIO. Now after both probe and
    power off the state of the GPIO is consistent (it's "asserted" or
    level low).
    
    Once we fix this, we can see that at power on time we no longer to
    assert the reset GPIO as the first thing. The reset GPIO is _always_
    asserted before powering on. Let's fix powering on to account for
    this.
    
    Fixes: afe10358e47a ("Input: elants_i2c - wire up regulator support")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20221117123805.1.I9959ac561dd6e1e8e1ce7085e4de6167b27c574f@changeid
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d10bd7416e8383340b5524b8d616b8ad01ef1e1
Author: Hui Tang <tanghui20@huawei.com>
Date:   Mon Nov 14 17:02:40 2022 +0800

    mtd: lpddr2_nvm: Fix possible null-ptr-deref
    
    [ Upstream commit 6bdd45d795adf9e73b38ced5e7f750cd199499ff ]
    
    It will cause null-ptr-deref when resource_size(add_range) invoked,
    if platform_get_resource() returns NULL.
    
    Fixes: 96ba9dd65788 ("mtd: lpddr: add driver for LPDDR2-NVM PCM memories")
    Signed-off-by: Hui Tang <tanghui20@huawei.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221114090240.244172-1-tanghui20@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4505bb429a0bb9bec26c97552a4f78b0980f5fe
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Thu Nov 10 14:19:26 2022 +0800

    wifi: ath10k: Fix return value in ath10k_pci_init()
    
    [ Upstream commit 2af7749047d8d6ad43feff69f555a13a6a6c2831 ]
    
    This driver is attempting to register to support two different buses.
    if either of these is successful then ath10k_pci_init() should return 0
    so that hardware attached to the successful bus can be probed and
    supported. only if both of these are unsuccessful should ath10k_pci_init()
    return an errno.
    
    Fixes: 0b523ced9a3c ("ath10k: add basic skeleton to support ahb")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Reviewed-by: Jeff Johnson <quic_jjohnson@quicinc.com>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221110061926.18163-1-xiujianfeng@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eaba2df23536303a67dee49d1d9a489ec5554709
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Sat Nov 12 17:27:19 2022 +0800

    ima: Fix misuse of dereference of pointer in template_desc_init_fields()
    
    [ Upstream commit 25369175ce84813dd99d6604e710dc2491f68523 ]
    
    The input parameter @fields is type of struct ima_template_field ***, so
    when allocates array memory for @fields, the size of element should be
    sizeof(**field) instead of sizeof(*field).
    
    Actually the original code would not cause any runtime error, but it's
    better to make it logically right.
    
    Fixes: adf53a778a0a ("ima: new templates management mechanism")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Reviewed-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e88505ac0a6ae97746bcdbd4b042ee9f20455ae
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 15 17:15:08 2022 +0800

    regulator: core: fix unbalanced of node refcount in regulator_dev_lookup()
    
    [ Upstream commit f2b41b748c19962b82709d9f23c6b2b0ce9d2f91 ]
    
    I got the the following report:
    
      OF: ERROR: memory leak, expected refcount 1 instead of 2,
      of_node_get()/of_node_put() unbalanced - destroy cset entry:
      attach overlay node /i2c/pmic@62/regulators/exten
    
    In of_get_regulator(), the node is returned from of_parse_phandle()
    with refcount incremented, after using it, of_node_put() need be called.
    
    Fixes: 69511a452e6d ("regulator: map consumer regulator based on device tree")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221115091508.900752-1-yangyingliang@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ec75e0ea9550b8f2e531172f2e67ba9d5227ec3
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Mon Nov 14 16:56:29 2022 +0800

    ASoC: pxa: fix null-pointer dereference in filter()
    
    [ Upstream commit ec7bf231aaa1bdbcb69d23bc50c753c80fb22429 ]
    
    kasprintf() would return NULL pointer when kmalloc() fail to allocate.
    Need to check the return pointer before calling strcmp().
    
    Fixes: 7a824e214e25 ("ASoC: mmp: add audio dma support")
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    Link: https://lore.kernel.org/r/20221114085629.1910435-1-zengheng4@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a75f45afa932bfb24a2603ebcea5efd2e7cdcfd6
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Oct 22 20:13:52 2022 +0800

    mtd: Fix device name leak when register device failed in add_mtd_device()
    
    [ Upstream commit 895d68a39481a75c680aa421546931fb11942fa6 ]
    
    There is a kmemleak when register device failed:
      unreferenced object 0xffff888101aab550 (size 8):
        comm "insmod", pid 3922, jiffies 4295277753 (age 925.408s)
        hex dump (first 8 bytes):
          6d 74 64 30 00 88 ff ff                          mtd0....
        backtrace:
          [<00000000bde26724>] __kmalloc_node_track_caller+0x4e/0x150
          [<000000003c32b416>] kvasprintf+0xb0/0x130
          [<000000001f7a8f15>] kobject_set_name_vargs+0x2f/0xb0
          [<000000006e781163>] dev_set_name+0xab/0xe0
          [<00000000e30d0c78>] add_mtd_device+0x4bb/0x700
          [<00000000f3d34de7>] mtd_device_parse_register+0x2ac/0x3f0
          [<00000000c0d88488>] 0xffffffffa0238457
          [<00000000b40d0922>] 0xffffffffa02a008f
          [<0000000023d17b9d>] do_one_initcall+0x87/0x2a0
          [<00000000770f6ca6>] do_init_module+0xdf/0x320
          [<000000007b6768fe>] load_module+0x2f98/0x3330
          [<00000000346bed5a>] __do_sys_finit_module+0x113/0x1b0
          [<00000000674c2290>] do_syscall_64+0x35/0x80
          [<000000004c6a8d97>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    If register device failed, should call put_device() to give up the
    reference.
    
    Fixes: 1f24b5a8ecbb ("[MTD] driver model updates")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221022121352.2534682-1-zhangxiaoxu5@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c0ee15d9a102c732d0745566d254040085d5663
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Thu Oct 27 20:38:55 2022 +0800

    media: vivid: fix compose size exceed boundary
    
    [ Upstream commit 94a7ad9283464b75b12516c5512541d467cefcf8 ]
    
    syzkaller found a bug:
    
     BUG: unable to handle page fault for address: ffffc9000a3b1000
     #PF: supervisor write access in kernel mode
     #PF: error_code(0x0002) - not-present page
     PGD 100000067 P4D 100000067 PUD 10015f067 PMD 1121ca067 PTE 0
     Oops: 0002 [#1] PREEMPT SMP
     CPU: 0 PID: 23489 Comm: vivid-000-vid-c Not tainted 6.1.0-rc1+ #512
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
     RIP: 0010:memcpy_erms+0x6/0x10
    [...]
     Call Trace:
      <TASK>
      ? tpg_fill_plane_buffer+0x856/0x15b0
      vivid_fillbuff+0x8ac/0x1110
      vivid_thread_vid_cap_tick+0x361/0xc90
      vivid_thread_vid_cap+0x21a/0x3a0
      kthread+0x143/0x180
      ret_from_fork+0x1f/0x30
      </TASK>
    
    This is because we forget to check boundary after adjust compose->height
    int V4L2_SEL_TGT_CROP case. Add v4l2_rect_map_inside() to fix this problem
    for this case.
    
    Fixes: ef834f7836ec ("[media] vivid: add the video capture and output parts")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc8da40430c942c678883fcd8f77c91a8b79a7e7
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Wed Sep 21 13:38:00 2022 +0200

    media: i2c: ad5820: Fix error path
    
    [ Upstream commit 9fce241660f37d9e95e93c0ae6fba8cfefa5797b ]
    
    Error path seems to be swaped. Fix the order and provide some meaningful
    names.
    
    Fixes: bee3d5115611 ("[media] ad5820: Add driver for auto-focus coil")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e8751a977a49a6e00cce1a8da5ca16da83f9c8c
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Sat Oct 8 14:49:17 2022 +0300

    wifi: ath9k: hif_usb: Fix use-after-free in ath9k_hif_usb_reg_in_cb()
    
    [ Upstream commit dd95f2239fc846795fc926787c3ae0ca701c9840 ]
    
    It is possible that skb is freed in ath9k_htc_rx_msg(), then
    usb_submit_urb() fails and we try to free skb again. It causes
    use-after-free bug. Moreover, if alloc_skb() fails, urb->context becomes
    NULL but rx_buf is not freed and there can be a memory leak.
    
    The patch removes unnecessary nskb and makes skb processing more clear: it
    is supposed that ath9k_htc_rx_msg() either frees old skb or passes its
    managing to another callback function.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 3deff76095c4 ("ath9k_htc: Increase URB count for REG_IN pipe")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221008114917.21404-1-pchelkin@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 134ae5eba41294eff76e4be20d6001b8f0192207
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Mon Jul 25 18:13:59 2022 +0300

    wifi: ath9k: hif_usb: fix memory leak of urbs in ath9k_hif_usb_dealloc_tx_urbs()
    
    [ Upstream commit c2a94de38c74e86f49124ac14f093d6a5c377a90 ]
    
    Syzkaller reports a long-known leak of urbs in
    ath9k_hif_usb_dealloc_tx_urbs().
    
    The cause of the leak is that usb_get_urb() is called but usb_free_urb()
    (or usb_put_urb()) is not called inside usb_kill_urb() as urb->dev or
    urb->ep fields have not been initialized and usb_kill_urb() returns
    immediately.
    
    The patch removes trying to kill urbs located in hif_dev->tx.tx_buf
    because hif_dev->tx.tx_buf is not supposed to contain urbs which are in
    pending state (the pending urbs are stored in hif_dev->tx.tx_pending).
    The tx.tx_lock is acquired so there should not be any changes in the list.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 03fb92a432ea ("ath9k: hif_usb: fix race condition between usb_get_urb() and usb_kill_anchored_urbs()")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220725151359.283704-1-pchelkin@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e4540e0970030e140998ce8847f5f0171b5afa1
Author: Cai Xinchen <caixinchen1@huawei.com>
Date:   Sat Dec 3 08:57:21 2022 +0000

    rapidio: devices: fix missing put_device in mport_cdev_open
    
    [ Upstream commit d5b6e6eba3af11cb2a2791fa36a2524990fcde1a ]
    
    When kfifo_alloc fails, the refcount of chdev->dev is left incremental.
    We should use put_device(&chdev->dev) to decrease the ref count of
    chdev->dev to avoid refcount leak.
    
    Link: https://lkml.kernel.org/r/20221203085721.13146-1-caixinchen1@huawei.com
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Signed-off-by: Cai Xinchen <caixinchen1@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Jakob Koschel <jakobkoschel@gmail.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Wang Weiyang <wangweiyang2@huawei.com>
    Cc: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8399318b13dc9e0569dee07ba2994098926d4fb2
Author: ZhangPeng <zhangpeng362@huawei.com>
Date:   Fri Dec 2 03:00:38 2022 +0000

    hfs: Fix OOB Write in hfs_asc2mac
    
    [ Upstream commit c53ed55cb275344086e32a7080a6b19cb183650b ]
    
    Syzbot reported a OOB Write bug:
    
    loop0: detected capacity change from 0 to 64
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in hfs_asc2mac+0x467/0x9a0
    fs/hfs/trans.c:133
    Write of size 1 at addr ffff88801848314e by task syz-executor391/3632
    
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1b1/0x28e lib/dump_stack.c:106
     print_address_description+0x74/0x340 mm/kasan/report.c:284
     print_report+0x107/0x1f0 mm/kasan/report.c:395
     kasan_report+0xcd/0x100 mm/kasan/report.c:495
     hfs_asc2mac+0x467/0x9a0 fs/hfs/trans.c:133
     hfs_cat_build_key+0x92/0x170 fs/hfs/catalog.c:28
     hfs_lookup+0x1ab/0x2c0 fs/hfs/dir.c:31
     lookup_open fs/namei.c:3391 [inline]
     open_last_lookups fs/namei.c:3481 [inline]
     path_openat+0x10e6/0x2df0 fs/namei.c:3710
     do_filp_open+0x264/0x4f0 fs/namei.c:3740
    
    If in->len is much larger than HFS_NAMELEN(31) which is the maximum
    length of an HFS filename, a OOB write could occur in hfs_asc2mac(). In
    that case, when the dst reaches the boundary, the srclen is still
    greater than 0, which causes a OOB write.
    Fix this by adding a check on dstlen in while() before writing to dst
    address.
    
    Link: https://lkml.kernel.org/r/20221202030038.1391945-1-zhangpeng362@huawei.com
    Fixes: 328b92278650 ("[PATCH] hfs: NLS support")
    Signed-off-by: ZhangPeng <zhangpeng362@huawei.com>
    Reviewed-by: Viacheslav Dubeyko <slava@dubeyko.com>
    Reported-by: <syzbot+dc3b1cf9111ab5fe98e7@syzkaller.appspotmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c25ad86eab4bcce597949142164da1ab28ebbcec
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Nov 24 22:01:54 2022 +0800

    eventfd: change int to __u64 in eventfd_signal() ifndef CONFIG_EVENTFD
    
    [ Upstream commit fd4e60bf0ef8eb9edcfa12dda39e8b6ee9060492 ]
    
    Commit ee62c6b2dc93 ("eventfd: change int to __u64 in eventfd_signal()")
    forgot to change int to __u64 in the CONFIG_EVENTFD=n stub function.
    
    Link: https://lkml.kernel.org/r/20221124140154.104680-1-zhangqilong3@huawei.com
    Fixes: ee62c6b2dc93 ("eventfd: change int to __u64 in eventfd_signal()")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Cc: Dylan Yudaken <dylany@fb.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Sha Zhengju <handai.szj@taobao.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a6c75adf8192f07ddcdd4a1a13488c890a73919
Author: Wang Weiyang <wangweiyang2@huawei.com>
Date:   Wed Nov 23 17:51:47 2022 +0800

    rapidio: fix possible UAF when kfifo_alloc() fails
    
    [ Upstream commit 02d7d89f816951e0862147d751b1150d67aaebdd ]
    
    If kfifo_alloc() fails in mport_cdev_open(), goto err_fifo and just free
    priv. But priv is still in the chdev->file_list, then list traversal
    may cause UAF. This fixes the following smatch warning:
    
    drivers/rapidio/devices/rio_mport_cdev.c:1930 mport_cdev_open() warn: '&priv->list' not removed from list
    
    Link: https://lkml.kernel.org/r/20221123095147.52408-1-wangweiyang2@huawei.com
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Signed-off-by: Wang Weiyang <wangweiyang2@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Jakob Koschel <jakobkoschel@gmail.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9498f673e9bbebda7e62b17d1fc0a2a14120f17d
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Fri Dec 9 18:04:48 2022 +0800

    fs: sysv: Fix sysv_nblocks() returns wrong value
    
    [ Upstream commit e0c49bd2b4d3cd1751491eb2d940bce968ac65e9 ]
    
    sysv_nblocks() returns 'blocks' rather than 'res', which only counting
    the number of triple-indirect blocks and causing sysv_getattr() gets a
    wrong result.
    
    [AV: this is actually a sysv counterpart of minixfs fix -
    0fcd426de9d0 "[PATCH] minix block usage counting fix" in
    historical tree; mea culpa, should've thought to check
    fs/sysv back then...]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1fa95583dcac8070905465187f83c17be8968fae
Author: Anastasia Belova <abelova@astralinux.ru>
Date:   Fri Dec 9 13:05:50 2022 +0300

    MIPS: BCM63xx: Add check for NULL for clk in clk_enable
    
    [ Upstream commit ee9ef11bd2a59c2fefaa0959e5efcdf040d7c654 ]
    
    Check clk for NULL before calling clk_enable_unlocked where clk
    is dereferenced. There is such check in other implementations
    of clk_enable.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: e7300d04bd08 ("MIPS: BCM63xx: Add support for the Broadcom BCM63xx family of SOCs.")
    Signed-off-by: Anastasia Belova <abelova@astralinux.ru>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@linaro.org>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9278bdbb566656b3704704f8dd6cbc24a6fcc569
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 23 23:58:58 2022 +0800

    x86/xen: Fix memory leak in xen_init_lock_cpu()
    
    [ Upstream commit ca84ce153d887b1dc8b118029976cc9faf2a9b40 ]
    
    In xen_init_lock_cpu(), the @name has allocated new string by kasprintf(),
    if bind_ipi_to_irqhandler() fails, it should be freed, otherwise may lead
    to a memory leak issue, fix it.
    
    Fixes: 2d9e1e2f58b5 ("xen: implement Xen-specific spinlocks")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20221123155858.11382-3-xiujianfeng@huawei.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7df153f90538946225c85404d4f7fa099a005db7
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Sun Dec 4 18:39:33 2022 +0100

    uprobes/x86: Allow to probe a NOP instruction with 0x66 prefix
    
    [ Upstream commit cefa72129e45313655d53a065b8055aaeb01a0c9 ]
    
    Intel ICC -hotpatch inserts 2-byte "0x66 0x90" NOP at the start of each
    function to reserve extra space for hot-patching, and currently it is not
    possible to probe these functions because branch_setup_xol_ops() wrongly
    rejects NOP with REP prefix as it treats them like word-sized branch
    instructions.
    
    Fixes: 250bbd12c2fe ("uprobes/x86: Refuse to attach uprobe to "word-sized" branch insns")
    Reported-by: Seiji Nishikawa <snishika@redhat.com>
    Suggested-by: Denys Vlasenko <dvlasenk@redhat.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Link: https://lore.kernel.org/r/20221204173933.GA31544@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 133462d35dae95edb944af86b986d4c9dec59bd1
Author: Li Zetao <lizetao1@huawei.com>
Date:   Thu Dec 1 16:05:14 2022 +0800

    ACPICA: Fix use-after-free in acpi_ut_copy_ipackage_to_ipackage()
    
    [ Upstream commit 470188b09e92d83c5a997f25f0e8fb8cd2bc3469 ]
    
    There is an use-after-free reported by KASAN:
    
      BUG: KASAN: use-after-free in acpi_ut_remove_reference+0x3b/0x82
      Read of size 1 at addr ffff888112afc460 by task modprobe/2111
      CPU: 0 PID: 2111 Comm: modprobe Not tainted 6.1.0-rc7-dirty
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
      Call Trace:
       <TASK>
       kasan_report+0xae/0xe0
       acpi_ut_remove_reference+0x3b/0x82
       acpi_ut_copy_iobject_to_iobject+0x3be/0x3d5
       acpi_ds_store_object_to_local+0x15d/0x3a0
       acpi_ex_store+0x78d/0x7fd
       acpi_ex_opcode_1A_1T_1R+0xbe4/0xf9b
       acpi_ps_parse_aml+0x217/0x8d5
       ...
       </TASK>
    
    The root cause of the problem is that the acpi_operand_object
    is freed when acpi_ut_walk_package_tree() fails in
    acpi_ut_copy_ipackage_to_ipackage(), lead to repeated release in
    acpi_ut_copy_iobject_to_iobject(). The problem was introduced
    by "8aa5e56eeb61" commit, this commit is to fix memory leak in
    acpi_ut_copy_iobject_to_iobject(), repeatedly adding remove
    operation, lead to "acpi_operand_object" used after free.
    
    Fix it by removing acpi_ut_remove_reference() in
    acpi_ut_copy_ipackage_to_ipackage(). acpi_ut_copy_ipackage_to_ipackage()
    is called to copy an internal package object into another internal
    package object, when it fails, the memory of acpi_operand_object
    should be freed by the caller.
    
    Fixes: 8aa5e56eeb61 ("ACPICA: Utilities: Fix memory leak in acpi_ut_copy_iobject_to_iobject")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a71344f99289250e4d5b8adbac76f444485c840
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 14 23:26:36 2022 +0800

    rapidio: rio: fix possible name leak in rio_register_mport()
    
    [ Upstream commit e92a216d16bde65d21a3227e0fb2aa0794576525 ]
    
    If device_register() returns error, the name allocated by dev_set_name()
    need be freed.  It should use put_device() to give up the reference in the
    error path, so that the name can be freed in kobject_cleanup(), and
    list_del() is called to delete the port from rio_mports.
    
    Link: https://lkml.kernel.org/r/20221114152636.2939035-3-yangyingliang@huawei.com
    Fixes: 2aaf308b95b2 ("rapidio: rework device hierarchy and introduce mport class of devices")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b4676f274a6b5d001176f15d0542100bbf4b59a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 14 23:26:35 2022 +0800

    rapidio: fix possible name leaks when rio_add_device() fails
    
    [ Upstream commit f9574cd48679926e2a569e1957a5a1bcc8a719ac ]
    
    Patch series "rapidio: fix three possible memory leaks".
    
    This patchset fixes three name leaks in error handling.
     - patch #1 fixes two name leaks while rio_add_device() fails.
     - patch #2 fixes a name leak while  rio_register_mport() fails.
    
    This patch (of 2):
    
    If rio_add_device() returns error, the name allocated by dev_set_name()
    need be freed.  It should use put_device() to give up the reference in the
    error path, so that the name can be freed in kobject_cleanup(), and the
    'rdev' can be freed in rio_release_dev().
    
    Link: https://lkml.kernel.org/r/20221114152636.2939035-1-yangyingliang@huawei.com
    Link: https://lkml.kernel.org/r/20221114152636.2939035-2-yangyingliang@huawei.com
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf0c25cb3d07c520e2b2071c74af4f52820b20a8
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Tue Sep 20 02:24:17 2022 +0900

    lib/notifier-error-inject: fix error when writing -errno to debugfs file
    
    [ Upstream commit f883c3edd2c432a2931ec8773c70a570115a50fe ]
    
    The simple attribute files do not accept a negative value since the commit
    488dac0c9237 ("libfs: fix error cast of negative value in
    simple_attr_write()").
    
    This restores the previous behaviour by using newly introduced
    DEFINE_SIMPLE_ATTRIBUTE_SIGNED instead of DEFINE_SIMPLE_ATTRIBUTE.
    
    Link: https://lkml.kernel.org/r/20220919172418.45257-3-akinobu.mita@gmail.com
    Fixes: 488dac0c9237 ("libfs: fix error cast of negative value in simple_attr_write()")
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Reported-by: Zhao Gongyi <zhaogongyi@huawei.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Wei Yongjun <weiyongjun1@huawei.com>
    Cc: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 111e5403040c0421bbfaaff67fdff5d3194ef1b4
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Tue Sep 20 02:24:16 2022 +0900

    libfs: add DEFINE_SIMPLE_ATTRIBUTE_SIGNED for signed value
    
    [ Upstream commit 2e41f274f9aa71cdcc69dc1f26a3f9304a651804 ]
    
    Patch series "fix error when writing negative value to simple attribute
    files".
    
    The simple attribute files do not accept a negative value since the commit
    488dac0c9237 ("libfs: fix error cast of negative value in
    simple_attr_write()"), but some attribute files want to accept a negative
    value.
    
    This patch (of 3):
    
    The simple attribute files do not accept a negative value since the commit
    488dac0c9237 ("libfs: fix error cast of negative value in
    simple_attr_write()"), so we have to use a 64-bit value to write a
    negative value.
    
    This adds DEFINE_SIMPLE_ATTRIBUTE_SIGNED for a signed value.
    
    Link: https://lkml.kernel.org/r/20220919172418.45257-1-akinobu.mita@gmail.com
    Link: https://lkml.kernel.org/r/20220919172418.45257-2-akinobu.mita@gmail.com
    Fixes: 488dac0c9237 ("libfs: fix error cast of negative value in simple_attr_write()")
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Reported-by: Zhao Gongyi <zhaogongyi@huawei.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Wei Yongjun <weiyongjun1@huawei.com>
    Cc: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 690a864cf0b5717fd0baf8a6d96734ed6e2bbce9
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea77b4b761cd75e5456f677311babfa0418f289a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 09:23:58 2022 +0800

    PNP: fix name memory leak in pnp_alloc_dev()
    
    [ Upstream commit 110d7b0325c55ff3620073ba4201845f59e22ebf ]
    
    After commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically,
    move dev_set_name() after pnp_add_id() to avoid memory leak.
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5b088a6bbbbf0ef8199a41bf0d82638429ed0fd
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 4 11:39:45 2022 +0800

    MIPS: vpe-cmp: fix possible memory leak while module exiting
    
    [ Upstream commit c5ed1fe0801f0c66b0fbce2785239a5664629057 ]
    
    dev_set_name() allocates memory for name, it need be freed
    when module exiting, call put_device() to give up reference,
    so that it can be freed in kobject_cleanup() when the refcount
    hit to 0. The vpe_device is static, so remove kfree() from
    vpe_device_release().
    
    Fixes: 17a1d523aa58 ("MIPS: APRP: Add VPE loader support for CMP platforms.")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 170e9913c2ed5cfc37c0adf0fdbd368d2d8d8168
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 4 11:39:44 2022 +0800

    MIPS: vpe-mt: fix possible memory leak while module exiting
    
    [ Upstream commit 5822e8cc84ee37338ab0bdc3124f6eec04dc232d ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically,
    it need be freed when module exiting, call put_device() to give up
    reference, so that it can be freed in kobject_cleanup() when the
    refcount hit to 0. The vpe_device is static, so remove kfree() from
    vpe_device_release().
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0000281f019111526f7abccc61f2746d2eb626ca
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Tue Nov 1 19:15:33 2022 +0800

    ocfs2: fix memory leak in ocfs2_stack_glue_init()
    
    [ Upstream commit 13b6269dd022aaa69ca8d1df374ab327504121cf ]
    
    ocfs2_table_header should be free in ocfs2_stack_glue_init() if
    ocfs2_sysfs_init() failed, otherwise kmemleak will report memleak.
    
    BUG: memory leak
    unreferenced object 0xffff88810eeb5800 (size 128):
      comm "modprobe", pid 4507, jiffies 4296182506 (age 55.888s)
      hex dump (first 32 bytes):
        c0 40 14 a0 ff ff ff ff 00 00 00 00 01 00 00 00  .@..............
        01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<000000001e59e1cd>] __register_sysctl_table+0xca/0xef0
        [<00000000c04f70f7>] 0xffffffffa0050037
        [<000000001bd12912>] do_one_initcall+0xdb/0x480
        [<0000000064f766c9>] do_init_module+0x1cf/0x680
        [<000000002ba52db0>] load_module+0x6441/0x6f20
        [<000000009772580d>] __do_sys_finit_module+0x12f/0x1c0
        [<00000000380c1f22>] do_syscall_64+0x3f/0x90
        [<000000004cf473bc>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Link: https://lkml.kernel.org/r/41651ca1-432a-db34-eb97-d35744559de1@linux.alibaba.com
    Fixes: 3878f110f71a ("ocfs2: Move the hb_ctl_path sysctl into the stack glue.")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1c63d8af4eb062c2e18110d869e7a2e14be61d1
Author: Barnabás Pőcze <pobrn@protonmail.com>
Date:   Mon Nov 14 19:54:23 2022 +0000

    timerqueue: Use rb_entry_safe() in timerqueue_getnext()
    
    [ Upstream commit 2f117484329b233455ee278f2d9b0a4356835060 ]
    
    When `timerqueue_getnext()` is called on an empty timer queue, it will
    use `rb_entry()` on a NULL pointer, which is invalid. Fix that by using
    `rb_entry_safe()` which handles NULL pointers.
    
    This has not caused any issues so far because the offset of the `rb_node`
    member in `timerqueue_node` is 0, so `rb_entry()` is essentially a no-op.
    
    Fixes: 511885d7061e ("lib/timerqueue: Rely on rbtree semantics for next timer")
    Signed-off-by: Barnabás Pőcze <pobrn@protonmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221114195421.342929-1-pobrn@protonmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3715b025b967c28e86940ca9de7f92ff6490692
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Fri Nov 11 18:36:53 2022 +0800

    perf: Fix possible memleak in pmu_dev_alloc()
    
    [ Upstream commit e8d7a90c08ce963c592fb49845f2ccc606a2ac21 ]
    
    In pmu_dev_alloc(), when dev_set_name() failed, it will goto free_dev
    and call put_device(pmu->dev) to release it.
    However pmu->dev->release is assigned after this, which makes warning
    and memleak.
    Call dev_set_name() after pmu->dev->release = pmu_dev_release to fix it.
    
      Device '(null)' does not have a release() function...
      WARNING: CPU: 2 PID: 441 at drivers/base/core.c:2332 device_release+0x1b9/0x240
      ...
      Call Trace:
        <TASK>
        kobject_put+0x17f/0x460
        put_device+0x20/0x30
        pmu_dev_alloc+0x152/0x400
        perf_pmu_register+0x96b/0xee0
        ...
      kmemleak: 1 new suspected memory leaks (see /sys/kernel/debug/kmemleak)
      unreferenced object 0xffff888014759000 (size 2048):
        comm "modprobe", pid 441, jiffies 4294931444 (age 38.332s)
        backtrace:
          [<0000000005aed3b4>] kmalloc_trace+0x27/0x110
          [<000000006b38f9b8>] pmu_dev_alloc+0x50/0x400
          [<00000000735f17be>] perf_pmu_register+0x96b/0xee0
          [<00000000e38477f1>] 0xffffffffc0ad8603
          [<000000004e162216>] do_one_initcall+0xd0/0x4e0
          ...
    
    Fixes: abe43400579d ("perf: Sysfs enumeration")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20221111103653.91058-1-chenzhongjin@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8c501139ab55e342f5fcf2de557b15b5927ec43
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Thu Nov 3 16:12:05 2022 +0100

    fs: don't audit the capability check in simple_xattr_list()
    
    [ Upstream commit e7eda157c4071cd1e69f4b1687b0fbe1ae5e6f46 ]
    
    The check being unconditional may lead to unwanted denials reported by
    LSMs when a process has the capability granted by DAC, but denied by an
    LSM. In the case of SELinux such denials are a problem, since they can't
    be effectively filtered out via the policy and when not silenced, they
    produce noise that may hide a true problem or an attack.
    
    Checking for the capability only if any trusted xattr is actually
    present wouldn't really address the issue, since calling listxattr(2) on
    such node on its own doesn't indicate an explicit attempt to see the
    trusted xattrs. Additionally, it could potentially leak the presence of
    trusted xattrs to an unprivileged user if they can check for the denials
    (e.g. through dmesg).
    
    Therefore, it's best (and simplest) to keep the check unconditional and
    instead use ns_capable_noaudit() that will silence any associated LSM
    denials.
    
    Fixes: 38f38657444d ("xattr: extract simple_xattr code from tmpfs")
    Reported-by: Martin Pitt <mpitt@redhat.com>
    Suggested-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Reviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Reviewed-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a34346994f5a768b1328fa2a3631d83d56993692
Author: xiongxin <xiongxin@kylinos.cn>
Date:   Tue Nov 1 10:28:39 2022 +0800

    PM: hibernate: Fix mistake in kerneldoc comment
    
    [ Upstream commit 6e5d7300cbe7c3541bc31f16db3e9266e6027b4b ]
    
    The actual maximum image size formula in hibernate_preallocate_memory()
    is as follows:
    
    max_size = (count - (size + PAGES_FOR_IO)) / 2
                - 2 * DIV_ROUND_UP(reserved_size, PAGE_SIZE);
    
    but the one in the kerneldoc comment of the function is different and
    incorrect.
    
    Fixes: ddeb64870810 ("PM / Hibernate: Add sysfs knob to control size of memory for drivers")
    Signed-off-by: xiongxin <xiongxin@kylinos.cn>
    [ rjw: Subject and changelog rewrite ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e395fe3855206e82d86a70d87a52394e06d645d
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Sep 18 18:18:48 2021 -0400

    alpha: fix syscall entry in !AUDUT_SYSCALL case
    
    [ Upstream commit f7b2431a6d22f7a91c567708e071dfcd6d66db14 ]
    
    We only want to take the slow path if SYSCALL_TRACE or SYSCALL_AUDIT is
    set; on !AUDIT_SYSCALL configs the current tree hits it whenever _any_
    thread flag (including NEED_RESCHED, NOTIFY_SIGNAL, etc.) happens to
    be set.
    
    Fixes: a9302e843944 "alpha: Enable system-call auditing support"
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eea8631ca78e6cb7cc0dbe7a74559869ed4a967c
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Oct 21 17:10:12 2022 +0200

    cpuidle: dt: Return the correct numbers of parsed idle states
    
    [ Upstream commit ee3c2c8ad6ba6785f14a60e4081d7c82e88162a2 ]
    
    While we correctly skips to initialize an idle state from a disabled idle
    state node in DT, the returned value from dt_init_idle_driver() don't get
    adjusted accordingly. Instead the number of found idle state nodes are
    returned, while the callers are expecting the number of successfully
    initialized idle states from DT.
    
    This leads to cpuidle drivers unnecessarily continues to initialize their
    idle state specific data. Moreover, in the case when all idle states have
    been disabled in DT, we would end up registering a cpuidle driver, rather
    than relying on the default arch specific idle call.
    
    Fixes: 9f14da345599 ("drivers: cpuidle: implement DT based idle states infrastructure")
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1579bed1613802a323a1e14567faa95c149e105e
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Mon Dec 5 15:31:36 2022 -0800

    pstore: Avoid kcore oops by vmap()ing with VM_IOREMAP
    
    [ Upstream commit e6b842741b4f39007215fd7e545cb55aa3d358a2 ]
    
    An oops can be induced by running 'cat /proc/kcore > /dev/null' on
    devices using pstore with the ram backend because kmap_atomic() assumes
    lowmem pages are accessible with __va().
    
     Unable to handle kernel paging request at virtual address ffffff807ff2b000
     Mem abort info:
     ESR = 0x96000006
     EC = 0x25: DABT (current EL), IL = 32 bits
     SET = 0, FnV = 0
     EA = 0, S1PTW = 0
     FSC = 0x06: level 2 translation fault
     Data abort info:
     ISV = 0, ISS = 0x00000006
     CM = 0, WnR = 0
     swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000081d87000
     [ffffff807ff2b000] pgd=180000017fe18003, p4d=180000017fe18003, pud=180000017fe18003, pmd=0000000000000000
     Internal error: Oops: 96000006 [#1] PREEMPT SMP
     Modules linked in: dm_integrity
     CPU: 7 PID: 21179 Comm: perf Not tainted 5.15.67-10882-ge4eb2eb988cd #1 baa443fb8e8477896a370b31a821eb2009f9bfba
     Hardware name: Google Lazor (rev3 - 8) (DT)
     pstate: a0400009 (NzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
     pc : __memcpy+0x110/0x260
     lr : vread+0x194/0x294
     sp : ffffffc013ee39d0
     x29: ffffffc013ee39f0 x28: 0000000000001000 x27: ffffff807ff2b000
     x26: 0000000000001000 x25: ffffffc0085a2000 x24: ffffff802d4b3000
     x23: ffffff80f8a60000 x22: ffffff802d4b3000 x21: ffffffc0085a2000
     x20: ffffff8080b7bc68 x19: 0000000000001000 x18: 0000000000000000
     x17: 0000000000000000 x16: 0000000000000000 x15: ffffffd3073f2e60
     x14: ffffffffad588000 x13: 0000000000000000 x12: 0000000000000001
     x11: 00000000000001a2 x10: 00680000fff2bf0b x9 : 03fffffff807ff2b
     x8 : 0000000000000001 x7 : 0000000000000000 x6 : 0000000000000000
     x5 : ffffff802d4b4000 x4 : ffffff807ff2c000 x3 : ffffffc013ee3a78
     x2 : 0000000000001000 x1 : ffffff807ff2b000 x0 : ffffff802d4b3000
     Call trace:
     __memcpy+0x110/0x260
     read_kcore+0x584/0x778
     proc_reg_read+0xb4/0xe4
    
    During early boot, memblock reserves the pages for the ramoops reserved
    memory node in DT that would otherwise be part of the direct lowmem
    mapping. Pstore's ram backend reuses those reserved pages to change the
    memory type (writeback or non-cached) by passing the pages to vmap()
    (see pfn_to_page() usage in persistent_ram_vmap() for more details) with
    specific flags. When read_kcore() starts iterating over the vmalloc
    region, it runs over the virtual address that vmap() returned for
    ramoops. In aligned_vread() the virtual address is passed to
    vmalloc_to_page() which returns the page struct for the reserved lowmem
    area. That lowmem page is passed to kmap_atomic(), which effectively
    calls page_to_virt() that assumes a lowmem page struct must be directly
    accessible with __va() and friends. These pages are mapped via vmap()
    though, and the lowmem mapping was never made, so accessing them via the
    lowmem virtual address oopses like above.
    
    Let's side-step this problem by passing VM_IOREMAP to vmap(). This will
    tell vread() to not include the ramoops region in the kcore. Instead the
    area will look like a bunch of zeros. The alternative is to teach kmap()
    about vmalloc areas that intersect with lowmem. Presumably such a change
    isn't a one-liner, and there isn't much interest in inspecting the
    ramoops region in kcore files anyway, so the most expedient route is
    taken for now.
    
    Cc: Brian Geffon <bgeffon@google.com>
    Cc: Mike Rapoport <rppt@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: 404a6043385d ("staging: android: persistent_ram: handle reserving and mapping memory")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221205233136.3420802-1-swboyd@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fd56ad4dc1683dd641501054bfe51e4403d540b
Author: Doug Brown <doug@schmorgal.com>
Date:   Sat Dec 3 16:51:17 2022 -0800

    ARM: mmp: fix timer_read delay
    
    [ Upstream commit e348b4014c31041e13ff370669ba3348c4d385e3 ]
    
    timer_read() was using an empty 100-iteration loop to wait for the
    TMR_CVWR register to capture the latest timer counter value. The delay
    wasn't long enough. This resulted in CPU idle time being extremely
    underreported on PXA168 with CONFIG_NO_HZ_IDLE=y.
    
    Switch to the approach used in the vendor kernel, which implements the
    capture delay by reading TMR_CVWR a few times instead.
    
    Fixes: 49cbe78637eb ("[ARM] pxa: add base support for Marvell's PXA168 processor line")
    Signed-off-by: Doug Brown <doug@schmorgal.com>
    Link: https://lore.kernel.org/r/20221204005117.53452-3-doug@schmorgal.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b130bdbccbbc1eb6a2837a5c307c42339e818c6
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:53 2022 +0200

    ARM: dts: armada-39x: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit 69236d2391b4d7324b11c3252921571577892e7b ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 538da83ddbea ("ARM: mvebu: add Device Tree files for Armada 39x SoC and board")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0dcbcfd9178fc316d2437215a0a05c3af9f68e07
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:52 2022 +0200

    ARM: dts: armada-38x: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit 44f47b7a8fa4678ce4c38ea74837e4996b9df6d6 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 0d3d96ab0059 ("ARM: mvebu: add Device Tree description of the Armada 380/385 SoCs")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24a645ab64dad0851befe4b83002ea4dae6e46af
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:51 2022 +0200

    ARM: dts: armada-375: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit 823956d2436f70ced74c0fe8ab99facd8abfc060 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 4de59085091f ("ARM: mvebu: add Device Tree description of the Armada 375 SoC")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97309af736540ec3fc118db707868a94d5fe1b2f
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:50 2022 +0200

    ARM: dts: armada-xp: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit eab276787f456cbea89fabea110fe0728673d308 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 9d8f44f02d4a ("arm: mvebu: add PCIe Device Tree informations for Armada XP")
    Fixes: 12b69a599745 ("ARM: mvebu: second PCIe unit of Armada XP mv78230 is only x1 capable")
    Fixes: 2163e61c92d9 ("ARM: mvebu: fix second and third PCIe unit of Armada XP mv78260")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f095946a94fd722043ccf07778a9db9c3635e1d4
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:49 2022 +0200

    ARM: dts: armada-370: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit d9208b0fa2e803d16b28d91bf1d46b7ee9ea13c6 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: a09a0b7c6ff1 ("arm: mvebu: add PCIe Device Tree informations for Armada 370")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d90167d0236337047c490a5795a50830b45ef41f
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:48 2022 +0200

    ARM: dts: dove: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit dcc7d8c72b64a479b8017e4332d99179deb8802d ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 74ecaa403a74 ("ARM: dove: add PCIe controllers to SoC DT")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23d41ad9e7eeec810c09a7433749f6aab822f5d6
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 8 16:03:22 2022 +0800

    soc: ti: smartreflex: Fix PM disable depth imbalance in omap_sr_probe
    
    [ Upstream commit 69460e68eb662064ab4188d4e129ff31c1f23ed9 ]
    
    The pm_runtime_enable will increase power disable depth. Thus
    a pairing decrement is needed on the error handling path to
    keep it balanced according to context.
    
    Fixes: 984aa6dbf4ca ("OMAP3: PM: Adding smartreflex driver support.")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20221108080322.52268-3-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a0130024e4341fa49b72cbd4764eae39b016706
Author: Kory Maincent <kory.maincent@bootlin.com>
Date:   Wed Nov 2 18:10:06 2022 +0100

    arm: dts: spear600: Fix clcd interrupt
    
    [ Upstream commit 0336e2ce34e7a89832b6c214f924eb7bc58940be ]
    
    Interrupt 12 of the Interrupt controller belongs to the SMI controller,
    the right one for the display controller is the interrupt 13.
    
    Fixes: 8113ba917dfa ("ARM: SPEAr: DT: Update device nodes")
    Signed-off-by: Kory Maincent <kory.maincent@bootlin.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1e186b79894d348b63f54023068b0158f0c4d06
Author: Chen Jiahao <chenjiahao16@huawei.com>
Date:   Wed Oct 19 23:32:12 2022 +0800

    drivers: soc: ti: knav_qmss_queue: Mark knav_acc_firmwares as static
    
    [ Upstream commit adf85adc2a7199b41e7a4da083bd17274a3d6969 ]
    
    There is a sparse warning shown below:
    
    drivers/soc/ti/knav_qmss_queue.c:70:12: warning: symbol
    'knav_acc_firmwares' was not declared. Should it be static?
    
    Since 'knav_acc_firmwares' is only called within knav_qmss_queue.c,
    mark it as static to fix the warning.
    
    Fixes: 96ee19becc3b ("soc: ti: add firmware file name as part of the driver")
    Signed-off-by: Chen Jiahao <chenjiahao16@huawei.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20221019153212.72350-1-chenjiahao16@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fc7f7176a4eacbcbe9c49be21817dfcb01c5661
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Wed Nov 23 15:18:28 2022 +0100

    net: loopback: use NET_NAME_PREDICTABLE for name_assign_type
    
    [ Upstream commit 31d929de5a112ee1b977a89c57de74710894bbbf ]
    
    When the name_assign_type attribute was introduced (commit
    685343fc3ba6, "net: add name_assign_type netdev attribute"), the
    loopback device was explicitly mentioned as one which would make use
    of NET_NAME_PREDICTABLE:
    
        The name_assign_type attribute gives hints where the interface name of a
        given net-device comes from. These values are currently defined:
    ...
          NET_NAME_PREDICTABLE:
            The ifname has been assigned by the kernel in a predictable way
            that is guaranteed to avoid reuse and always be the same for a
            given device. Examples include statically created devices like
            the loopback device [...]
    
    Switch to that so that reading /sys/class/net/lo/name_assign_type
    produces something sensible instead of returning -EINVAL.
    
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49d5867819ab7c744852b45509e8469839c07e0e
Author: Sungwoo Kim <iam@sung-woo.kim>
Date:   Fri Nov 18 15:01:47 2022 -0500

    Bluetooth: L2CAP: Fix u8 overflow
    
    [ Upstream commit bcd70260ef56e0aee8a4fc6cd214a419900b0765 ]
    
    By keep sending L2CAP_CONF_REQ packets, chan->num_conf_rsp increases
    multiple times and eventually it will wrap around the maximum number
    (i.e., 255).
    This patch prevents this by adding a boundary check with
    L2CAP_MAX_CONF_RSP
    
    Btmon log:
    Bluetooth monitor ver 5.64
    = Note: Linux version 6.1.0-rc2 (x86_64)                               0.264594
    = Note: Bluetooth subsystem version 2.22                               0.264636
    @ MGMT Open: btmon (privileged) version 1.22                  {0x0001} 0.272191
    = New Index: 00:00:00:00:00:00 (Primary,Virtual,hci0)          [hci0] 13.877604
    @ RAW Open: 9496 (privileged) version 2.22                   {0x0002} 13.890741
    = Open Index: 00:00:00:00:00:00                                [hci0] 13.900426
    (...)
    > ACL Data RX: Handle 200 flags 0x00 dlen 1033             #32 [hci0] 14.273106
            invalid packet size (12 != 1033)
            08 00 01 00 02 01 04 00 01 10 ff ff              ............
    > ACL Data RX: Handle 200 flags 0x00 dlen 1547             #33 [hci0] 14.273561
            invalid packet size (14 != 1547)
            0a 00 01 00 04 01 06 00 40 00 00 00 00 00        ........@.....
    > ACL Data RX: Handle 200 flags 0x00 dlen 2061             #34 [hci0] 14.274390
            invalid packet size (16 != 2061)
            0c 00 01 00 04 01 08 00 40 00 00 00 00 00 00 04  ........@.......
    > ACL Data RX: Handle 200 flags 0x00 dlen 2061             #35 [hci0] 14.274932
            invalid packet size (16 != 2061)
            0c 00 01 00 04 01 08 00 40 00 00 00 07 00 03 00  ........@.......
    = bluetoothd: Bluetooth daemon 5.43                                   14.401828
    > ACL Data RX: Handle 200 flags 0x00 dlen 1033             #36 [hci0] 14.275753
            invalid packet size (12 != 1033)
            08 00 01 00 04 01 04 00 40 00 00 00              ........@...
    
    Signed-off-by: Sungwoo Kim <iam@sung-woo.kim>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4e43b24cecb43dafd8dcc4465f60269cc04274f
Author: Bruno Thomsen <bruno.thomsen@gmail.com>
Date:   Sun Nov 27 18:08:11 2022 +0100

    USB: serial: cp210x: add Kamstrup RF sniffer PIDs
    
    commit e88906b169ebcb8046e8f0ad76edd09ab41cfdfe upstream.
    
    The RF sniffers are based on cp210x where the RF frontends
    are based on a different USB stack.
    
    RF sniffers can analyze packets meta data including power level
    and perform packet injection.
    
    Can be used to perform RF frontend self-test when connected to
    a concentrator, ex. arch/arm/boot/dts/imx7d-flex-concentrator.dts
    
    Signed-off-by: Bruno Thomsen <bruno.thomsen@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4972e3528b968665b596b5434764ff8fd9446d35
Author: Szymon Heidrich <szymon.heidrich@gmail.com>
Date:   Tue Dec 6 15:13:01 2022 +0100

    usb: gadget: uvc: Prevent buffer overflow in setup handler
    
    commit 4c92670b16727365699fe4b19ed32013bab2c107 upstream.
    
    Setup function uvc_function_setup permits control transfer
    requests with up to 64 bytes of payload (UVC_MAX_REQUEST_SIZE),
    data stage handler for OUT transfer uses memcpy to copy req->actual
    bytes to uvc_event->data.data array of size 60. This may result
    in an overflow of 4 bytes.
    
    Fixes: cdda479f15cd ("USB gadget: video class function driver")
    Cc: stable <stable@kernel.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Daniel Scally <dan.scally@ideasonboard.com>
    Signed-off-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Link: https://lore.kernel.org/r/20221206141301.51305-1-szymon.heidrich@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9391da5e025dcf917d5cdd0f23d0bf0c722d77f2
Author: Jan Kara <jack@suse.cz>
Date:   Thu Dec 8 13:03:30 2022 +0100

    udf: Fix extending file within last block
    
    commit 1f3868f06855c97a4954c99b36f3fc9eb8f60326 upstream.
    
    When extending file within last block it can happen that the extent is
    already rounded to the blocksize and thus contains the offset we want to
    grow up to. In such case we would mistakenly expand the last extent and
    make it one block longer than it should be, exposing unallocated block
    in a file and causing data corruption. Fix the problem by properly
    detecting this case and bailing out.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f9eae31750287bdb1e200b16016be119090a400
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 17:34:33 2022 +0100

    udf: Do not bother looking for prealloc extents if i_lenExtents matches i_size
    
    commit 6ad53f0f71c52871202a7bf096feb2c59db33fc5 upstream.
    
    If rounded block-rounded i_lenExtents matches block rounded i_size,
    there are no preallocation extents. Do not bother walking extent linked
    list.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8b6fa4511a7900db9fb0353b630d4d2ed1ba99c
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 17:25:10 2022 +0100

    udf: Fix preallocation discarding at indirect extent boundary
    
    commit cfe4c1b25dd6d2f056afc00b7c98bcb3dd0b1fc3 upstream.
    
    When preallocation extent is the first one in the extent block, the
    code would corrupt extent tree header instead. Fix the problem and use
    udf_delete_aext() for deleting extent to avoid some code duplication.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a58ae14b9a9b644691528c3acc29acf9e0118f34
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jun 13 18:04:24 2018 +0200

    udf: Drop unused arguments of udf_delete_aext()
    
    commit 6c1e4d06a3808dc67dbce2d631f4c12574567dd5 upstream.
    
    udf_delete_aext() uses its last two arguments only as local variables.
    Drop them.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a1c33851c2867a70348897e4e86338c9649a068
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 18:17:34 2022 +0100

    udf: Discard preallocation before extending file with a hole
    
    commit 16d0556568148bdcaa45d077cac9f8f7077cf70a upstream.
    
    When extending file with a hole, we tried to preserve existing
    preallocation for the file. However that is not very useful and
    complicates code because the previous extent may need to be rounded to
    block boundary as well (which we forgot to do thus causing data
    corruption for sequence like:
    
    xfs_io -f -c "pwrite 0x75e63 11008" -c "truncate 0x7b24b" \
      -c "truncate 0xabaa3" -c "pwrite 0xac70b 22954" \
      -c "pwrite 0x93a43 11358" -c "pwrite 0xb8e65 52211" file
    
    with 512-byte block size. Just discard preallocation before extending
    file to simplify things and also fix this data corruption.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 041030f25af5b03def930dc2903e5f58811f401d
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Fri Nov 25 16:23:47 2022 +0000

    ASoC: ops: Correct bounds check for second channel on SX controls
    
    commit f33bcc506050f89433a52a3052054d4ebd37b1c1 upstream.
    
    Currently the check against the max value for the control is being
    applied after the value has had the minimum applied and been masked. But
    the max value simply indicates the number of volume levels on an SX
    control, and as such should just be applied on the raw value.
    
    Fixes: 97eea946b939 ("ASoC: ops: Check bounds for second channel in snd_soc_put_volsw_sx()")
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221125162348.1288005-1-ckeepax@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d3ee591dcf56697fd4457f292e8f292faef2498
Author: Heiko Schocher <hs@denx.de>
Date:   Wed Nov 23 08:16:36 2022 +0100

    can: sja1000: fix size of OCR_MODE_MASK define
    
    [ Upstream commit 26e8f6a75248247982458e8237b98c9fb2ffcf9d ]
    
    bitfield mode in ocr register has only 2 bits not 3, so correct
    the OCR_MODE_MASK define.
    
    Signed-off-by: Heiko Schocher <hs@denx.de>
    Link: https://lore.kernel.org/all/20221123071636.2407823-1-hs@denx.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56288987843c3cb343e81e5fa51549cbaf541bd0
Author: Mark Brown <broonie@kernel.org>
Date:   Wed May 11 14:41:37 2022 +0100

    ASoC: ops: Check bounds for second channel in snd_soc_put_volsw_sx()
    
    [ Upstream commit 97eea946b93961fffd29448dcda7398d0d51c4b2 ]
    
    The bounds checks in snd_soc_put_volsw_sx() are only being applied to the
    first channel, meaning it is possible to write out of bounds values to the
    second channel in stereo controls. Add appropriate checks.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20220511134137.169575-2-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4726b66b886849109e4ac010a9443e89dc3257d8
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Dec 13 15:16:55 2022 +0800

    block: unhash blkdev part inode when the part is deleted
    
    v5.11 changes the blkdev lookup mechanism completely since commit
    22ae8ce8b892 ("block: simplify bdev/disk lookup in blkdev_get"),
    and small part of the change is to unhash part bdev inode when
    deleting partition. Turns out this kind of change does fix one
    nasty issue in case of BLOCK_EXT_MAJOR:
    
    1) when one partition is deleted & closed, disk_put_part() is always
    called before bdput(bdev), see blkdev_put(); so the part's devt can
    be freed & re-used before the inode is dropped
    
    2) then new partition with same devt can be created just before the
    inode in 1) is dropped, then the old inode/bdev structurein 1) is
    re-used for this new partition, this way causes use-after-free and
    kernel panic.
    
    It isn't possible to backport the whole big patchset of "merge struct
    block_device and struct hd_struct v4" for addressing this issue.
    
    https://lore.kernel.org/linux-block/20201128161510.347752-1-hch@lst.de/
    
    So fixes it by unhashing part bdev in delete_partition(), and this way
    is actually aligned with v5.11+'s behavior.
    
    Backported from the following 5.10.y commit:
    
    5f2f77560591 ("block: unhash blkdev part inode when the part is deleted")
    
    Reported-by: Shiwei Cui <cuishw@inspur.com>
    Tested-by: Shiwei Cui <cuishw@inspur.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 275c626c131cfe141beeb6c575e31fa53d32da19
Author: Jann Horn <jannh@google.com>
Date:   Fri Nov 25 22:37:14 2022 +0100

    mm/khugepaged: invoke MMU notifiers in shmem/file collapse paths
    
    commit f268f6cf875f3220afc77bdd0bf1bb136eb54db9 upstream.
    
    Any codepath that zaps page table entries must invoke MMU notifiers to
    ensure that secondary MMUs (like KVM) don't keep accessing pages which
    aren't mapped anymore.  Secondary MMUs don't hold their own references to
    pages that are mirrored over, so failing to notify them can lead to page
    use-after-free.
    
    I'm marking this as addressing an issue introduced in commit f3f0e1d2150b
    ("khugepaged: add support of collapse for tmpfs/shmem pages"), but most of
    the security impact of this only came in commit 27e1f8273113 ("khugepaged:
    enable collapse pmd for pte-mapped THP"), which actually omitted flushes
    for the removal of present PTEs, not just for the removal of empty page
    tables.
    
    Link: https://lkml.kernel.org/r/20221129154730.2274278-3-jannh@google.com
    Link: https://lkml.kernel.org/r/20221128180252.1684965-3-jannh@google.com
    Link: https://lkml.kernel.org/r/20221125213714.4115729-3-jannh@google.com
    Fixes: f3f0e1d2150b ("khugepaged: add support of collapse for tmpfs/shmem pages")
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    [manual backport: this code was refactored from two copies into a common
    helper between 5.15 and 6.0;
    pmd collapse for PTE-mapped THP was only added in 5.4;
    MMU notifier API changed between 4.19 and 5.4]
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 588be4a04b020c13d9d669cea281f9d312d9a7bb
Author: Jann Horn <jannh@google.com>
Date:   Fri Nov 25 22:37:13 2022 +0100

    mm/khugepaged: fix GUP-fast interaction by sending IPI
    
    commit 2ba99c5e08812494bc57f319fb562f527d9bacd8 upstream.
    
    Since commit 70cbc3cc78a99 ("mm: gup: fix the fast GUP race against THP
    collapse"), the lockless_pages_from_mm() fastpath rechecks the pmd_t to
    ensure that the page table was not removed by khugepaged in between.
    
    However, lockless_pages_from_mm() still requires that the page table is
    not concurrently freed.  Fix it by sending IPIs (if the architecture uses
    semi-RCU-style page table freeing) before freeing/reusing page tables.
    
    Link: https://lkml.kernel.org/r/20221129154730.2274278-2-jannh@google.com
    Link: https://lkml.kernel.org/r/20221128180252.1684965-2-jannh@google.com
    Link: https://lkml.kernel.org/r/20221125213714.4115729-2-jannh@google.com
    Fixes: ba76149f47d8 ("thp: khugepaged")
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    [manual backport: two of the three places in khugepaged that can free
    ptes were refactored into a common helper between 5.15 and 6.0;
    TLB flushing was refactored between 5.4 and 5.10;
    TLB flushing was refactored between 4.19 and 5.4;
    pmd collapse for PTE-mapped THP was only added in 5.4;
    ugly hack for s390 in <=4.19 and arm]
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e43368a3393dd40002cecb63e13af285be270fc
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 30 16:18:22 2023 +0200

    Linux 5.15.129
    
    Link: https://lore.kernel.org/r/20230828101150.163430842@linuxfoundation.org
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d48016d748363ab34d91d06925bf8d2cfd1a6c72
Author: Rik van Riel <riel@surriel.com>
Date:   Thu Aug 17 13:57:59 2023 -0400

    mm,ima,kexec,of: use memblock_free_late from ima_free_kexec_buffer
    
    commit f0362a253606e2031f8d61c74195d4d6556e12a4 upstream.
    
    The code calling ima_free_kexec_buffer runs long after the memblock
    allocator has already been torn down, potentially resulting in a use
    after free in memblock_isolate_range.
    
    With KASAN or KFENCE, this use after free will result in a BUG
    from the idle task, and a subsequent kernel panic.
    
    Switch ima_free_kexec_buffer over to memblock_free_late to avoid
    that issue.
    
    Fixes: fee3ff99bc67 ("powerpc: Move arch independent ima kexec functions to drivers/of/kexec.c")
    Cc: stable@kernel.org
    Signed-off-by: Rik van Riel <riel@surriel.com>
    Suggested-by: Mike Rappoport <rppt@kernel.org>
    Link: https://lore.kernel.org/r/20230817135759.0888e5ef@imladris.surriel.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Mike Rappoport (IBM) <rppt@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c41cd30d5cdf4b63bd47f11edd657bd8f4bae42
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Jun 27 19:28:08 2023 +0800

    mm: memory-failure: fix unexpected return value in soft_offline_page()
    
    [ Upstream commit e2c1ab070fdc81010ec44634838d24fce9ff9e53 ]
    
    When page_handle_poison() fails to handle the hugepage or free page in
    retry path, soft_offline_page() will return 0 while -EBUSY is expected in
    this case.
    
    Consequently the user will think soft_offline_page succeeds while it in
    fact failed.  So the user will not try again later in this case.
    
    Link: https://lkml.kernel.org/r/20230627112808.1275241-1-linmiaohe@huawei.com
    Fixes: b94e02822deb ("mm,hwpoison: try to narrow window race for free pages")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Acked-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0712721e4f4f702ca1e902ce2a56f7f40adddba2
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Fri Aug 19 11:34:01 2022 +0800

    mm: memory-failure: kill soft_offline_free_page()
    
    [ Upstream commit 7adb45887c8af88985c335b53d253654e9d2dd16 ]
    
    Open-code the page_handle_poison() into soft_offline_page() and kill
    unneeded soft_offline_free_page().
    
    Link: https://lkml.kernel.org/r/20220819033402.156519-1-wangkefeng.wang@huawei.com
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Acked-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Stable-dep-of: e2c1ab070fdc ("mm: memory-failure: fix unexpected return value in soft_offline_page()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efd02b5cadd5db6d3a829bc250d7fbf5ff45560a
Author: Rob Clark <robdclark@chromium.org>
Date:   Fri Aug 18 07:59:38 2023 -0700

    dma-buf/sw_sync: Avoid recursive lock during fence signal
    
    [ Upstream commit e531fdb5cd5ee2564b7fe10c8a9219e2b2fac61e ]
    
    If a signal callback releases the sw_sync fence, that will trigger a
    deadlock as the timeline_fence_release recurses onto the fence->lock
    (used both for signaling and the the timeline tree).
    
    To avoid that, temporarily hold an extra reference to the signalled
    fences until after we drop the lock.
    
    (This is an alternative implementation of https://patchwork.kernel.org/patch/11664717/
    which avoids some potential UAF issues with the original patch.)
    
    v2: Remove now obsolete comment, use list_move_tail() and
        list_del_init()
    
    Reported-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Fixes: d3c6dd1fb30d ("dma-buf/sw_sync: Synchronize signal vs syncpt free")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230818145939.39697-1-robdclark@gmail.com
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8dbf913520c428df912ea6f4f61e481f73438865
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Tue Aug 15 14:15:58 2023 +0100

    pinctrl: renesas: rza2: Add lock around pinctrl_generic{{add,remove}_group,{add,remove}_function}
    
    [ Upstream commit 8fcc1c40b747069644db6102c1d84c942c9d4d86 ]
    
    The pinctrl group and function creation/remove calls expect
    caller to take care of locking. Add lock around these functions.
    
    Fixes: b59d0e782706 ("pinctrl: Add RZ/A2 pin and gpio controller")
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20230815131558.33787-4-biju.das.jz@bp.renesas.com
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c0402b8e2279d78567fec3a5a66f26f73f6222
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Tue Jul 25 18:51:40 2023 +0100

    clk: Fix undefined reference to `clk_rate_exclusive_{get,put}'
    
    [ Upstream commit 2746f13f6f1df7999001d6595b16f789ecc28ad1 ]
    
    The COMMON_CLK config is not enabled in some of the architectures.
    This causes below build issues:
    
    pwm-rz-mtu3.c:(.text+0x114):
    undefined reference to `clk_rate_exclusive_put'
    pwm-rz-mtu3.c:(.text+0x32c):
    undefined reference to `clk_rate_exclusive_get'
    
    Fix these issues by moving clk_rate_exclusive_{get,put} inside COMMON_CLK
    code block, as clk.c is enabled by COMMON_CLK.
    
    Fixes: 55e9b8b7b806 ("clk: add clk_rate_exclusive api")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/all/202307251752.vLfmmhYm-lkp@intel.com/
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Link: https://lore.kernel.org/r/20230725175140.361479-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10bc3eddc605b55542ca548e009c99ed8b5877e6
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Tue Aug 22 01:52:54 2023 +0000

    scsi: core: raid_class: Remove raid_component_add()
    
    commit 60c5fd2e8f3c42a5abc565ba9876ead1da5ad2b7 upstream.
    
    The raid_component_add() function was added to the kernel tree via patch
    "[SCSI] embryonic RAID class" (2005). Remove this function since it never
    has had any callers in the Linux kernel. And also raid_component_release()
    is only used in raid_component_add(), so it is also removed.
    
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Link: https://lore.kernel.org/r/20230822015254.184270-1-wangzhu9@huawei.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Fixes: 04b5b5cb0136 ("scsi: core: Fix possible memory leak if device_add() fails")
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3d57cdbfda44b503807451c4c1b59a5865547b3
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Sat Aug 19 08:39:41 2023 +0000

    scsi: snic: Fix double free in snic_tgt_create()
    
    commit 1bd3a76880b2bce017987cf53780b372cf59528e upstream.
    
    Commit 41320b18a0e0 ("scsi: snic: Fix possible memory leak if device_add()
    fails") fixed the memory leak caused by dev_set_name() when device_add()
    failed. However, it did not consider that 'tgt' has already been released
    when put_device(&tgt->dev) is called. Remove kfree(tgt) in the error path
    to avoid double free of 'tgt' and move put_device(&tgt->dev) after the
    removed kfree(tgt) to avoid a use-after-free.
    
    Fixes: 41320b18a0e0 ("scsi: snic: Fix possible memory leak if device_add() fails")
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Link: https://lore.kernel.org/r/20230819083941.164365-1-wangzhu9@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef56cc8889be5e0d2568f72dcf228f964f8104a7
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Mon Aug 21 16:45:47 2023 +0200

    can: raw: add missing refcount for memory leak fix
    
    commit c275a176e4b69868576e543409927ae75e3a3288 upstream.
    
    Commit ee8b94c8510c ("can: raw: fix receiver memory leak") introduced
    a new reference to the CAN netdevice that has assigned CAN filters.
    But this new ro->dev reference did not maintain its own refcount which
    lead to another KASAN use-after-free splat found by Eric Dumazet.
    
    This patch ensures a proper refcount for the CAN nedevice.
    
    Fixes: ee8b94c8510c ("can: raw: fix receiver memory leak")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Cc: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/r/20230821144547.6658-3-socketcan@hartkopp.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 930f3f164964ea823e1fa342d6744d5caec20fd9
Author: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
Date:   Thu Jul 20 11:35:44 2023 +0200

    drm/i915: Fix premature release of request's reusable memory
    
    commit a337b64f0d5717248a0c894e2618e658e6a9de9f upstream.
    
    Infinite waits for completion of GPU activity have been observed in CI,
    mostly inside __i915_active_wait(), triggered by igt@gem_barrier_race or
    igt@perf@stress-open-close.  Root cause analysis, based of ftrace dumps
    generated with a lot of extra trace_printk() calls added to the code,
    revealed loops of request dependencies being accidentally built,
    preventing the requests from being processed, each waiting for completion
    of another one's activity.
    
    After we substitute a new request for a last active one tracked on a
    timeline, we set up a dependency of our new request to wait on completion
    of current activity of that previous one.  While doing that, we must take
    care of keeping the old request still in memory until we use its
    attributes for setting up that await dependency, or we can happen to set
    up the await dependency on an unrelated request that already reuses the
    memory previously allocated to the old one, already released.  Combined
    with perf adding consecutive kernel context remote requests to different
    user context timelines, unresolvable loops of await dependencies can be
    built, leading do infinite waits.
    
    We obtain a pointer to the previous request to wait upon when we
    substitute it with a pointer to our new request in an active tracker,
    e.g. in intel_timeline.last_request.  In some processing paths we protect
    that old request from being freed before we use it by getting a reference
    to it under RCU protection, but in others, e.g.  __i915_request_commit()
    -> __i915_request_add_to_timeline() -> __i915_request_ensure_ordering(),
    we don't.  But anyway, since the requests' memory is SLAB_FAILSAFE_BY_RCU,
    that RCU protection is not sufficient against reuse of memory.
    
    We could protect i915_request's memory from being prematurely reused by
    calling its release function via call_rcu() and using rcu_read_lock()
    consequently, as proposed in v1.  However, that approach leads to
    significant (up to 10 times) increase of SLAB utilization by i915_request
    SLAB cache.  Another potential approach is to take a reference to the
    previous active fence.
    
    When updating an active fence tracker, we first lock the new fence,
    substitute a pointer of the current active fence with the new one, then we
    lock the substituted fence.  With this approach, there is a time window
    after the substitution and before the lock when the request can be
    concurrently released by an interrupt handler and its memory reused, then
    we may happen to lock and return a new, unrelated request.
    
    Always get a reference to the current active fence first, before
    replacing it with a new one.  Having it protected from premature release
    and reuse, lock it and then replace with the new one but only if not
    yet signalled via a potential concurrent interrupt nor replaced with
    another one by a potential concurrent thread, otherwise retry, starting
    from getting a reference to the new current one.  Adjust users to not
    get a reference to the previous active fence themselves and always put the
    reference got by __i915_active_fence_set() when no longer needed.
    
    v3: Fix lockdep splat reports and other issues caused by incorrect use of
        try_cmpxchg() (use (cmpxchg() != prev) instead)
    v2: Protect request's memory by getting a reference to it in favor of
        delegating its release to call_rcu() (Chris)
    
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/8211
    Fixes: df9f85d8582e ("drm/i915: Serialise i915_active_fence_set() with itself")
    Suggested-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.6+
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Signed-off-by: Andi Shyti <andi.shyti@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230720093543.832147-2-janusz.krzysztofik@linux.intel.com
    (cherry picked from commit 946e047a3d88d46d15b5c5af0414098e12b243f7)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cb86cc565df79e47f44eb6af062c94000b60972
Author: Dietmar Eggemann <dietmar.eggemann@arm.com>
Date:   Sun Aug 20 16:22:58 2023 +0100

    cgroup/cpuset: Free DL BW in case can_attach() fails
    
    commit 2ef269ef1ac006acf974793d975539244d77b28f upstream.
    
    cpuset_can_attach() can fail. Postpone DL BW allocation until all tasks
    have been checked. DL BW is not allocated per-task but as a sum over
    all DL tasks migrating.
    
    If multiple controllers are attached to the cgroup next to the cpuset
    controller a non-cpuset can_attach() can fail. In this case free DL BW
    in cpuset_cancel_attach().
    
    Finally, update cpuset DL task count (nr_deadline_tasks) only in
    cpuset_attach().
    
    Suggested-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    [ Conflict in kernel/cgroup/cpuset.c due to pulling extra neighboring
      functions that are not applicable on this branch. ]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffff4fc4bad76d115a3f3804883a1de05ee4e7aa
Author: Dietmar Eggemann <dietmar.eggemann@arm.com>
Date:   Sun Aug 20 16:22:57 2023 +0100

    sched/deadline: Create DL BW alloc, free & check overflow interface
    
    commit 85989106feb734437e2d598b639991b9185a43a6 upstream.
    
    While moving a set of tasks between exclusive cpusets,
    cpuset_can_attach() -> task_can_attach() calls dl_cpu_busy(..., p) for
    DL BW overflow checking and per-task DL BW allocation on the destination
    root_domain for the DL tasks in this set.
    
    This approach has the issue of not freeing already allocated DL BW in
    the following error cases:
    
    (1) The set of tasks includes multiple DL tasks and DL BW overflow
        checking fails for one of the subsequent DL tasks.
    
    (2) Another controller next to the cpuset controller which is attached
        to the same cgroup fails in its can_attach().
    
    To address this problem rework dl_cpu_busy():
    
    (1) Split it into dl_bw_check_overflow() & dl_bw_alloc() and add a
        dedicated dl_bw_free().
    
    (2) dl_bw_alloc() & dl_bw_free() take a `u64 dl_bw` parameter instead of
        a `struct task_struct *p` used in dl_cpu_busy(). This allows to
        allocate DL BW for a set of tasks too rather than only for a single
        task.
    
    Signed-off-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86aa907959791c6d2e92eb26982a7e5fefb751a0
Author: Juri Lelli <juri.lelli@redhat.com>
Date:   Sun Aug 20 16:22:56 2023 +0100

    cgroup/cpuset: Iterate only if DEADLINE tasks are present
    
    commit c0f78fd5edcf29b2822ac165f9248a6c165e8554 upstream.
    
    update_tasks_root_domain currently iterates over all tasks even if no
    DEADLINE task is present on the cpuset/root domain for which bandwidth
    accounting is being rebuilt. This has been reported to introduce 10+ ms
    delays on suspend-resume operations.
    
    Skip the costly iteration for cpusets that don't contain DEADLINE tasks.
    
    Reported-by: Qais Yousef (Google) <qyousef@layalina.io>
    Link: https://lore.kernel.org/lkml/20230206221428.2125324-1-qyousef@layalina.io/
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43d8cbfefa7c59bd3b5fe184535eca476d45304e
Author: Juri Lelli <juri.lelli@redhat.com>
Date:   Sun Aug 20 16:22:55 2023 +0100

    sched/cpuset: Keep track of SCHED_DEADLINE task in cpusets
    
    commit 6c24849f5515e4966d94fa5279bdff4acf2e9489 upstream.
    
    Qais reported that iterating over all tasks when rebuilding root domains
    for finding out which ones are DEADLINE and need their bandwidth
    correctly restored on such root domains can be a costly operation (10+
    ms delays on suspend-resume).
    
    To fix the problem keep track of the number of DEADLINE tasks belonging
    to each cpuset and then use this information (followup patch) to only
    perform the above iteration if DEADLINE tasks are actually present in
    the cpuset for which a corresponding root domain is being rebuilt.
    
    Reported-by: Qais Yousef (Google) <qyousef@layalina.io>
    Link: https://lore.kernel.org/lkml/20230206221428.2125324-1-qyousef@layalina.io/
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    [ Conflict in kernel/cgroup/cpuset.c and kernel/sched/deadline.c due to
      pulling new code. Reject new code/fields. ]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0eb4917f4d36f106e2c5daa9598f6f8bd08a734
Author: Juri Lelli <juri.lelli@redhat.com>
Date:   Sun Aug 20 16:22:54 2023 +0100

    sched/cpuset: Bring back cpuset_mutex
    
    commit 111cd11bbc54850f24191c52ff217da88a5e639b upstream.
    
    Turns out percpu_cpuset_rwsem - commit 1243dc518c9d ("cgroup/cpuset:
    Convert cpuset_mutex to percpu_rwsem") - wasn't such a brilliant idea,
    as it has been reported to cause slowdowns in workloads that need to
    change cpuset configuration frequently and it is also not implementing
    priority inheritance (which causes troubles with realtime workloads).
    
    Convert percpu_cpuset_rwsem back to regular cpuset_mutex. Also grab it
    only for SCHED_DEADLINE tasks (other policies don't care about stable
    cpusets anyway).
    
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    [ Conflict in kernel/cgroup/cpuset.c due to pulling changes in functions
      or comments that don't exist on this branch. Remove a BUG_ON() for rwsem
      that doesn't exist on mainline. ]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 918879de0e23ca9fc60b8ad1c996d12a813c9316
Author: Juri Lelli <juri.lelli@redhat.com>
Date:   Sun Aug 20 16:22:53 2023 +0100

    cgroup/cpuset: Rename functions dealing with DEADLINE accounting
    
    commit ad3a557daf6915296a43ef97a3e9c48e076c9dd8 upstream.
    
    rebuild_root_domains() and update_tasks_root_domain() have neutral
    names, but actually deal with DEADLINE bandwidth accounting.
    
    Rename them to use 'dl_' prefix so that intent is more clear.
    
    No functional change.
    
    Suggested-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78efab71a6493fc71ff188c855c2d15f6e1211ef
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Sun Jan 1 06:15:55 2023 +0000

    torture: Fix hang during kthread shutdown phase
    
    commit d52d3a2bf408ff86f3a79560b5cce80efb340239 upstream.
    
    During rcutorture shutdown, the rcu_torture_cleanup() function calls
    torture_cleanup_begin(), which sets the fullstop global variable to
    FULLSTOP_RMMOD. This causes the rcutorture threads for readers and
    fakewriters to exit all of their "while" loops and start shutting down.
    
    They then call torture_kthread_stopping(), which in turn waits for
    kthread_stop() to be called.  However, rcu_torture_cleanup() has
    not yet called kthread_stop() on those threads, and before it gets a
    chance to do so, multiple instances of torture_kthread_stopping() invoke
    schedule_timeout_interruptible(1) in a tight loop.  Tracing confirms that
    TIMER_SOFTIRQ can then continuously execute timer callbacks.  If that
    TIMER_SOFTIRQ preempts the task executing rcu_torture_cleanup(), that
    task might never invoke kthread_stop().
    
    This commit improves this situation by increasing the timeout passed to
    schedule_timeout_interruptible() from one jiffy to 1/20th of a second.
    This change prevents TIMER_SOFTIRQ from monopolizing its CPU, thus
    allowing rcu_torture_cleanup() to carry out the needed kthread_stop()
    invocations.  Testing has shown 100 runs of TREE07 passing reliably,
    as oppose to the tens-of-percent failure rates seen beforehand.
    
    Cc: Paul McKenney <paulmck@kernel.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Zhouyi Zhou <zhouzhouyi@gmail.com>
    Cc: <stable@vger.kernel.org> # 6.0.x
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Tested-by: Zhouyi Zhou <zhouzhouyi@gmail.com>
    Reviewed-by: Davidlohr Bueso <dave@stgolabs.net>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8fb97dd7fe67a58f3b61041a324c199c1b8649b
Author: Christian Brauner <brauner@kernel.org>
Date:   Tue May 2 15:36:02 2023 +0200

    nfsd: use vfs setgid helper
    
    commit 2d8ae8c417db284f598dffb178cc01e7db0f1821 upstream.
    
    We've aligned setgid behavior over multiple kernel releases. The details
    can be found in commit cf619f891971 ("Merge tag 'fs.ovl.setgid.v6.2' of
    git://git.kernel.org/pub/scm/linux/kernel/git/vfs/idmapping") and
    commit 426b4ca2d6a5 ("Merge tag 'fs.setgid.v6.0' of
    git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux").
    Consistent setgid stripping behavior is now encapsulated in the
    setattr_should_drop_sgid() helper which is used by all filesystems that
    strip setgid bits outside of vfs proper. Usually ATTR_KILL_SGID is
    raised in e.g., chown_common() and is subject to the
    setattr_should_drop_sgid() check to determine whether the setgid bit can
    be retained. Since nfsd is raising ATTR_KILL_SGID unconditionally it
    will cause notify_change() to strip it even if the caller had the
    necessary privileges to retain it. Ensure that nfsd only raises
    ATR_KILL_SGID if the caller lacks the necessary privileges to retain the
    setgid bit.
    
    Without this patch the setgid stripping tests in LTP will fail:
    
    > As you can see, the problem is S_ISGID (0002000) was dropped on a
    > non-group-executable file while chown was invoked by super-user, while
    
    [...]
    
    > fchown02.c:66: TFAIL: testfile2: wrong mode permissions 0100700, expected 0102700
    
    [...]
    
    > chown02.c:57: TFAIL: testfile2: wrong mode permissions 0100700, expected 0102700
    
    With this patch all tests pass.
    
    Reported-by: Sherry Yang <sherry.yang@oracle.com>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    [ Harshit: backport to 5.15.y:
      Use init_user_ns instead of nop_mnt_idmap as we don't have
      commit abf08576afe3 ("fs: port vfs_*() helpers to struct mnt_idmap") ]
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01966511868ee8238cd732f1f97ebffd0c6eb98a
Author: Christian Brauner <brauner@kernel.org>
Date:   Tue Mar 14 12:51:10 2023 +0100

    nfs: use vfs setgid helper
    
    commit 4f704d9a8352f5c0a8fcdb6213b934630342bd44 upstream.
    
    We've aligned setgid behavior over multiple kernel releases. The details
    can be found in the following two merge messages:
    cf619f891971 ("Merge tag 'fs.ovl.setgid.v6.2')
    426b4ca2d6a5 ("Merge tag 'fs.setgid.v6.0')
    Consistent setgid stripping behavior is now encapsulated in the
    setattr_should_drop_sgid() helper which is used by all filesystems that
    strip setgid bits outside of vfs proper. Switch nfs to rely on this
    helper as well. Without this patch the setgid stripping tests in
    xfstests will fail.
    
    Signed-off-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Message-Id: <20230313-fs-nfs-setgid-v2-1-9a59f436cfc0@kernel.org>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    [ Harshit: backport to 5.15.y]
        fs/internal.h -- minor conflcit due to code change differences.
        include/linux/fs.h -- Used struct user_namespace *mnt_userns
                              instead of struct mnt_idmap *idmap
        fs/nfs/inode.c -- Used init_user_ns instead of nop_mnt_idmap ]
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7a1849899aa6093941ce88237066331c5bd9f2f
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Aug 23 14:57:47 2023 +0800

    x86/fpu: Set X86_FEATURE_OSXSAVE feature after enabling OSXSAVE in CR4
    
    commit 2c66ca3949dc701da7f4c9407f2140ae425683a5 upstream.
    
    0-Day found a 34.6% regression in stress-ng's 'af-alg' test case, and
    bisected it to commit b81fac906a8f ("x86/fpu: Move FPU initialization into
    arch_cpu_finalize_init()"), which optimizes the FPU init order, and moves
    the CR4_OSXSAVE enabling into a later place:
    
       arch_cpu_finalize_init
           identify_boot_cpu
               identify_cpu
                   generic_identify
                       get_cpu_cap --> setup cpu capability
           ...
           fpu__init_cpu
               fpu__init_cpu_xstate
                   cr4_set_bits(X86_CR4_OSXSAVE);
    
    As the FPU is not yet initialized the CPU capability setup fails to set
    X86_FEATURE_OSXSAVE. Many security module like 'camellia_aesni_avx_x86_64'
    depend on this feature and therefore fail to load, causing the regression.
    
    Cure this by setting X86_FEATURE_OSXSAVE feature right after OSXSAVE
    enabling.
    
    [ tglx: Moved it into the actual BSP FPU initialization code and added a comment ]
    
    Fixes: b81fac906a8f ("x86/fpu: Move FPU initialization into arch_cpu_finalize_init()")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/lkml/202307192135.203ac24e-oliver.sang@intel.com
    Link: https://lore.kernel.org/lkml/20230823065747.92257-1-feng.tang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad79f943c869238149594a9906c92847335ded5c
Author: Rick Edgecombe <rick.p.edgecombe@intel.com>
Date:   Fri Aug 18 10:03:05 2023 -0700

    x86/fpu: Invalidate FPU state correctly on exec()
    
    commit 1f69383b203e28cf8a4ca9570e572da1699f76cd upstream.
    
    The thread flag TIF_NEED_FPU_LOAD indicates that the FPU saved state is
    valid and should be reloaded when returning to userspace. However, the
    kernel will skip doing this if the FPU registers are already valid as
    determined by fpregs_state_valid(). The logic embedded there considers
    the state valid if two cases are both true:
    
      1: fpu_fpregs_owner_ctx points to the current tasks FPU state
      2: the last CPU the registers were live in was the current CPU.
    
    This is usually correct logic. A CPU’s fpu_fpregs_owner_ctx is set to
    the current FPU during the fpregs_restore_userregs() operation, so it
    indicates that the registers have been restored on this CPU. But this
    alone doesn’t preclude that the task hasn’t been rescheduled to a
    different CPU, where the registers were modified, and then back to the
    current CPU. To verify that this was not the case the logic relies on the
    second condition. So the assumption is that if the registers have been
    restored, AND they haven’t had the chance to be modified (by being
    loaded on another CPU), then they MUST be valid on the current CPU.
    
    Besides the lazy FPU optimizations, the other cases where the FPU
    registers might not be valid are when the kernel modifies the FPU register
    state or the FPU saved buffer. In this case the operation modifying the
    FPU state needs to let the kernel know the correspondence has been
    broken. The comment in “arch/x86/kernel/fpu/context.h” has:
    /*
    ...
     * If the FPU register state is valid, the kernel can skip restoring the
     * FPU state from memory.
     *
     * Any code that clobbers the FPU registers or updates the in-memory
     * FPU state for a task MUST let the rest of the kernel know that the
     * FPU registers are no longer valid for this task.
     *
     * Either one of these invalidation functions is enough. Invalidate
     * a resource you control: CPU if using the CPU for something else
     * (with preemption disabled), FPU for the current task, or a task that
     * is prevented from running by the current task.
     */
    
    However, this is not completely true. When the kernel modifies the
    registers or saved FPU state, it can only rely on
    __fpu_invalidate_fpregs_state(), which wipes the FPU’s last_cpu
    tracking. The exec path instead relies on fpregs_deactivate(), which sets
    the CPU’s FPU context to NULL. This was observed to fail to restore the
    reset FPU state to the registers when returning to userspace in the
    following scenario:
    
    1. A task is executing in userspace on CPU0
            - CPU0’s FPU context points to tasks
            - fpu->last_cpu=CPU0
    
    2. The task exec()’s
    
    3. While in the kernel the task is preempted
            - CPU0 gets a thread executing in the kernel (such that no other
                    FPU context is activated)
            - Scheduler sets task’s fpu->last_cpu=CPU0 when scheduling out
    
    4. Task is migrated to CPU1
    
    5. Continuing the exec(), the task gets to
       fpu_flush_thread()->fpu_reset_fpregs()
            - Sets CPU1’s fpu context to NULL
            - Copies the init state to the task’s FPU buffer
            - Sets TIF_NEED_FPU_LOAD on the task
    
    6. The task reschedules back to CPU0 before completing the exec() and
       returning to userspace
            - During the reschedule, scheduler finds TIF_NEED_FPU_LOAD is set
            - Skips saving the registers and updating task’s fpu→last_cpu,
              because TIF_NEED_FPU_LOAD is the canonical source.
    
    7. Now CPU0’s FPU context is still pointing to the task’s, and
       fpu->last_cpu is still CPU0. So fpregs_state_valid() returns true even
       though the reset FPU state has not been restored.
    
    So the root cause is that exec() is doing the wrong kind of invalidate. It
    should reset fpu->last_cpu via __fpu_invalidate_fpregs_state(). Further,
    fpu__drop() doesn't really seem appropriate as the task (and FPU) are not
    going away, they are just getting reset as part of an exec. So switch to
    __fpu_invalidate_fpregs_state().
    
    Also, delete the misleading comment that says that either kind of
    invalidate will be enough, because it’s not always the case.
    
    Fixes: 33344368cb08 ("x86/fpu: Clean up the fpu__clear() variants")
    Reported-by: Lei Wang <lei4.wang@intel.com>
    Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Lijun Pan <lijun.pan@intel.com>
    Reviewed-by: Sohil Mehta <sohil.mehta@intel.com>
    Acked-by: Lijun Pan <lijun.pan@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230818170305.502891-1-rick.p.edgecombe@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b190cf1f277a740e5f8a048869008e50ce12cd79
Author: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
Date:   Fri Aug 18 10:14:36 2023 +0530

    drm/display/dp: Fix the DP DSC Receiver cap size
    
    commit 5ad1ab30ac0809d2963ddcf39ac34317a24a2f17 upstream.
    
    DP DSC Receiver Capabilities are exposed via DPCD 60h-6Fh.
    Fix the DSC RECEIVER CAP SIZE accordingly.
    
    Fixes: ffddc4363c28 ("drm/dp: Add DP DSC DPCD receiver capability size define and missing SHIFT")
    Cc: Anusha Srivatsa <anusha.srivatsa@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Cc: <stable@vger.kernel.org> # v5.0+
    
    Signed-off-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230818044436.177806-1-ankit.k.nautiyal@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8aab333d41a4ed6c5e7987c6cc5505ab86b5652
Author: Zack Rusin <zackr@vmware.com>
Date:   Fri Jun 16 15:09:34 2023 -0400

    drm/vmwgfx: Fix shader stage validation
    
    commit 14abdfae508228a7307f7491b5c4215ae70c6542 upstream.
    
    For multiple commands the driver was not correctly validating the shader
    stages resulting in possible kernel oopses. The validation code was only.
    if ever, checking the upper bound on the shader stages but never a lower
    bound (valid shader stages start at 1 not 0).
    
    Fixes kernel oopses ending up in vmw_binding_add, e.g.:
    Oops: 0000 [#1] PREEMPT SMP PTI
    CPU: 1 PID: 2443 Comm: testcase Not tainted 6.3.0-rc4-vmwgfx #1
    Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 11/12/2020
    RIP: 0010:vmw_binding_add+0x4c/0x140 [vmwgfx]
    Code: 7e 30 49 83 ff 0e 0f 87 ea 00 00 00 4b 8d 04 7f 89 d2 89 cb 48 c1 e0 03 4c 8b b0 40 3d 93 c0 48 8b 80 48 3d 93 c0 49 0f af de <48> 03 1c d0 4c 01 e3 49 8>
    RSP: 0018:ffffb8014416b968 EFLAGS: 00010206
    RAX: ffffffffc0933ec0 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 00000000ffffffff RSI: ffffb8014416b9c0 RDI: ffffb8014316f000
    RBP: ffffb8014416b998 R08: 0000000000000003 R09: 746f6c735f726564
    R10: ffffffffaaf2bda0 R11: 732e676e69646e69 R12: ffffb8014316f000
    R13: ffffb8014416b9c0 R14: 0000000000000040 R15: 0000000000000006
    FS:  00007fba8c0af740(0000) GS:ffff8a1277c80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000007c0933eb8 CR3: 0000000118244001 CR4: 00000000003706e0
    Call Trace:
     <TASK>
     vmw_view_bindings_add+0xf5/0x1b0 [vmwgfx]
     ? ___drm_dbg+0x8a/0xb0 [drm]
     vmw_cmd_dx_set_shader_res+0x8f/0xc0 [vmwgfx]
     vmw_execbuf_process+0x590/0x1360 [vmwgfx]
     vmw_execbuf_ioctl+0x173/0x370 [vmwgfx]
     ? __drm_dev_dbg+0xb4/0xe0 [drm]
     ? __pfx_vmw_execbuf_ioctl+0x10/0x10 [vmwgfx]
     drm_ioctl_kernel+0xbc/0x160 [drm]
     drm_ioctl+0x2d2/0x580 [drm]
     ? __pfx_vmw_execbuf_ioctl+0x10/0x10 [vmwgfx]
     ? do_fault+0x1a6/0x420
     vmw_generic_ioctl+0xbd/0x180 [vmwgfx]
     vmw_unlocked_ioctl+0x19/0x20 [vmwgfx]
     __x64_sys_ioctl+0x96/0xd0
     do_syscall_64+0x5d/0x90
     ? handle_mm_fault+0xe4/0x2f0
     ? debug_smp_processor_id+0x1b/0x30
     ? fpregs_assert_state_consistent+0x2e/0x50
     ? exit_to_user_mode_prepare+0x40/0x180
     ? irqentry_exit_to_user_mode+0xd/0x20
     ? irqentry_exit+0x3f/0x50
     ? exc_page_fault+0x8b/0x180
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Signed-off-by: Zack Rusin <zackr@vmware.com>
    Cc: security@openanolis.org
    Reported-by: Ziming Zhang <ezrakiez@gmail.com>
    Testcase-found-by: Niels De Graef <ndegraef@redhat.com>
    Fixes: d80efd5cb3de ("drm/vmwgfx: Initial DX support")
    Cc: <stable@vger.kernel.org> # v4.3+
    Reviewed-by: Maaz Mombasawala<mombasawalam@vmware.com>
    Reviewed-by: Martin Krastev <krastevm@vmware.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230616190934.54828-1-zack@kde.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b53ed415163e643e8795cf97a229d7f46444f253
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Wed Jul 26 14:35:18 2023 +0200

    PCI: acpiphp: Use pci_assign_unassigned_bridge_resources() only for non-root bus
    
    commit cc22522fd55e257c86d340ae9aedc122e705a435 upstream.
    
    40613da52b13 ("PCI: acpiphp: Reassign resources on bridge if necessary")
    changed acpiphp hotplug to use pci_assign_unassigned_bridge_resources()
    which depends on bridge being available, however enable_slot() can be
    called without bridge associated:
    
      1. Legitimate case of hotplug on root bus (widely used in virt world)
    
      2. A (misbehaving) firmware, that sends ACPI Bus Check notifications to
         non existing root ports (Dell Inspiron 7352/0W6WV0), which end up at
         enable_slot(..., bridge = 0) where bus has no bridge assigned to it.
         acpihp doesn't know that it's a bridge, and bus specific 'PCI
         subsystem' can't augment ACPI context with bridge information since
         the PCI device to get this data from is/was not available.
    
    Issue is easy to reproduce with QEMU's 'pc' machine, which supports PCI
    hotplug on hostbridge slots. To reproduce, boot kernel at commit
    40613da52b13 in VM started with following CLI (assuming guest root fs is
    installed on sda1 partition):
    
      # qemu-system-x86_64 -M pc -m 1G -enable-kvm -cpu host \
            -monitor stdio -serial file:serial.log           \
            -kernel arch/x86/boot/bzImage                    \
            -append "root=/dev/sda1 console=ttyS0"           \
            guest_disk.img
    
    Once guest OS is fully booted at qemu prompt:
    
      (qemu) device_add e1000
    
    (check serial.log) it will cause NULL pointer dereference at:
    
      void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge)
      {
        struct pci_bus *parent = bridge->subordinate;
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
    
       ? pci_assign_unassigned_bridge_resources+0x1f/0x260
       enable_slot+0x21f/0x3e0
       acpiphp_hotplug_notify+0x13d/0x260
       acpi_device_hotplug+0xbc/0x540
       acpi_hotplug_work_fn+0x15/0x20
       process_one_work+0x1f7/0x370
       worker_thread+0x45/0x3b0
    
    The issue was discovered on Dell Inspiron 7352/0W6WV0 laptop with following
    sequence:
    
      1. Suspend to RAM
      2. Wake up with the same backtrace being observed:
      3. 2nd suspend to RAM attempt makes laptop freeze
    
    Fix it by using __pci_bus_assign_resources() instead of
    pci_assign_unassigned_bridge_resources() as we used to do, but only in case
    when bus doesn't have a bridge associated (to cover for the case of ACPI
    event on hostbridge or non existing root port).
    
    That lets us keep hotplug on root bus working like it used to and at the
    same time keeps resource reassignment usable on root ports (and other 1st
    level bridges) that was fixed by 40613da52b13.
    
    Fixes: 40613da52b13 ("PCI: acpiphp: Reassign resources on bridge if necessary")
    Link: https://lore.kernel.org/r/20230726123518.2361181-2-imammedo@redhat.com
    Reported-by: Woody Suwalski <terraluna977@gmail.com>
    Tested-by: Woody Suwalski <terraluna977@gmail.com>
    Tested-by: Michal Koutný <mkoutny@suse.com>
    Link: https://lore.kernel.org/r/11fc981c-af49-ce64-6b43-3e282728bd1a@gmail.com
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael@kernel.org>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60ba1bfa036a84c5a8ddea7b104b5bde735ef066
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Thu Aug 10 08:23:33 2023 +0000

    media: vcodec: Fix potential array out-of-bounds in encoder queue_setup
    
    commit e7f2e65699e2290fd547ec12a17008764e5d9620 upstream.
    
    variable *nplanes is provided by user via system call argument. The
    possible value of q_data->fmt->num_planes is 1-3, while the value
    of *nplanes can be 1-8. The array access by index i can cause array
    out-of-bounds.
    
    Fix this bug by checking *nplanes against the array size.
    
    Fixes: 4e855a6efa54 ("[media] vcodec: mediatek: Add Mediatek V4L2 Video Encoder Driver")
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 544cd10defa1bf1acfe533f8a7d10e7a001e07b9
Author: Rob Herring <robh@kernel.org>
Date:   Fri Aug 18 15:40:57 2023 -0500

    of: dynamic: Refactor action prints to not use "%pOF" inside devtree_lock
    
    commit 914d9d831e6126a6e7a92e27fcfaa250671be42c upstream.
    
    While originally it was fine to format strings using "%pOF" while
    holding devtree_lock, this now causes a deadlock.  Lockdep reports:
    
        of_get_parent from of_fwnode_get_parent+0x18/0x24
        ^^^^^^^^^^^^^
        of_fwnode_get_parent from fwnode_count_parents+0xc/0x28
        fwnode_count_parents from fwnode_full_name_string+0x18/0xac
        fwnode_full_name_string from device_node_string+0x1a0/0x404
        device_node_string from pointer+0x3c0/0x534
        pointer from vsnprintf+0x248/0x36c
        vsnprintf from vprintk_store+0x130/0x3b4
    
    Fix this by moving the printing in __of_changeset_entry_apply() outside
    the lock. As the only difference in the multiple prints is the action
    name, use the existing "action_names" to refactor the prints into a
    single print.
    
    Fixes: a92eb7621b9fb2c2 ("lib/vsprintf: Make use of fwnode API to obtain node names and separators")
    Cc: stable@vger.kernel.org
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20230801-dt-changeset-fixes-v3-2-5f0410e007dd@kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1d4a58818564f498769dfbea3230b16aef5b2a7
Author: Rob Herring <robh@kernel.org>
Date:   Fri Aug 18 15:40:56 2023 -0500

    of: unittest: Fix EXPECT for parse_phandle_with_args_map() test
    
    commit 0aeae3788e28f64ccb95405d4dc8cd80637ffaea upstream.
    
    Commit 12e17243d8a1 ("of: base: improve error msg in
    of_phandle_iterator_next()") added printing of the phandle value on
    error, but failed to update the unittest.
    
    Fixes: 12e17243d8a1 ("of: base: improve error msg in of_phandle_iterator_next()")
    Cc: stable@vger.kernel.org
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20230801-dt-changeset-fixes-v3-1-5f0410e007dd@kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce66cd478636fe2d4be8072073bdc1995422ca9e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Aug 11 15:10:13 2023 +0200

    radix tree: remove unused variable
    
    commit d59070d1076ec5114edb67c87658aeb1d691d381 upstream.
    
    Recent versions of clang warn about an unused variable, though older
    versions saw the 'slot++' as a use and did not warn:
    
    radix-tree.c:1136:50: error: parameter 'slot' set but not used [-Werror,-Wunused-but-set-parameter]
    
    It's clearly not needed any more, so just remove it.
    
    Link: https://lkml.kernel.org/r/20230811131023.2226509-1-arnd@kernel.org
    Fixes: 3a08cd52c37c7 ("radix tree: Remove multiorder support")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peng Zhang <zhangpeng.00@bytedance.com>
    Cc: Rong Tao <rongtao@cestc.cn>
    Cc: Tom Rix <trix@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 898c8c5b1114b013c1f0ea52fc5fd1525be819cd
Author: Helge Deller <deller@gmx.de>
Date:   Fri Aug 25 21:50:33 2023 +0200

    lib/clz_ctz.c: Fix __clzdi2() and __ctzdi2() for 32-bit kernels
    
    commit 382d4cd1847517ffcb1800fd462b625db7b2ebea upstream.
    
    The gcc compiler translates on some architectures the 64-bit
    __builtin_clzll() function to a call to the libgcc function __clzdi2(),
    which should take a 64-bit parameter on 32- and 64-bit platforms.
    
    But in the current kernel code, the built-in __clzdi2() function is
    defined to operate (wrongly) on 32-bit parameters if BITS_PER_LONG ==
    32, thus the return values on 32-bit kernels are in the range from
    [0..31] instead of the expected [0..63] range.
    
    This patch fixes the in-kernel functions __clzdi2() and __ctzdi2() to
    take a 64-bit parameter on 32-bit kernels as well, thus it makes the
    functions identical for 32- and 64-bit kernels.
    
    This bug went unnoticed since kernel 3.11 for over 10 years, and here
    are some possible reasons for that:
    
     a) Some architectures have assembly instructions to count the bits and
        which are used instead of calling __clzdi2(), e.g. on x86 the bsr
        instruction and on ppc cntlz is used. On such architectures the
        wrong __clzdi2() implementation isn't used and as such the bug has
        no effect and won't be noticed.
    
     b) Some architectures link to libgcc.a, and the in-kernel weak
        functions get replaced by the correct 64-bit variants from libgcc.a.
    
     c) __builtin_clzll() and __clzdi2() doesn't seem to be used in many
        places in the kernel, and most likely only in uncritical functions,
        e.g. when printing hex values via seq_put_hex_ll(). The wrong return
        value will still print the correct number, but just in a wrong
        formatting (e.g. with too many leading zeroes).
    
     d) 32-bit kernels aren't used that much any longer, so they are less
        tested.
    
    A trivial testcase to verify if the currently running 32-bit kernel is
    affected by the bug is to look at the output of /proc/self/maps:
    
    Here the kernel uses a correct implementation of __clzdi2():
    
      root@debian:~# cat /proc/self/maps
      00010000-00019000 r-xp 00000000 08:05 787324     /usr/bin/cat
      00019000-0001a000 rwxp 00009000 08:05 787324     /usr/bin/cat
      0001a000-0003b000 rwxp 00000000 00:00 0          [heap]
      f7551000-f770d000 r-xp 00000000 08:05 794765     /usr/lib/hppa-linux-gnu/libc.so.6
      ...
    
    and this kernel uses the broken implementation of __clzdi2():
    
      root@debian:~# cat /proc/self/maps
      0000000010000-0000000019000 r-xp 00000000 000000008:000000005 787324  /usr/bin/cat
      0000000019000-000000001a000 rwxp 000000009000 000000008:000000005 787324  /usr/bin/cat
      000000001a000-000000003b000 rwxp 00000000 00:00 0  [heap]
      00000000f73d1000-00000000f758d000 r-xp 00000000 000000008:000000005 794765  /usr/lib/hppa-linux-gnu/libc.so.6
      ...
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Fixes: 4df87bb7b6a22 ("lib: add weak clz/ctz functions")
    Cc: Chanho Min <chanho.min@lge.com>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: stable@vger.kernel.org # v3.11+
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff90a4c6edf85cea4acabce4f07d4b5b77628eca
Author: Sven Eckelmann <sven@narfation.org>
Date:   Mon Aug 21 21:48:48 2023 +0200

    batman-adv: Hold rtnl lock during MTU update via netlink
    
    commit 987aae75fc1041072941ffb622b45ce2359a99b9 upstream.
    
    The automatic recalculation of the maximum allowed MTU is usually triggered
    by code sections which are already rtnl lock protected by callers outside
    of batman-adv. But when the fragmentation setting is changed via
    batman-adv's own batadv genl family, then the rtnl lock is not yet taken.
    
    But dev_set_mtu requires that the caller holds the rtnl lock because it
    uses netdevice notifiers. And this code will then fail the check for this
    lock:
    
      RTNL: assertion failed at net/core/dev.c (1953)
    
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+f8812454d9b3ac00d282@syzkaller.appspotmail.com
    Fixes: c6a953cce8d0 ("batman-adv: Trigger events for auto adjusted MTU")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230821-batadv-missing-mtu-rtnl-lock-v1-1-1c5a7bfe861e@narfation.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea38c0d9aaa2e13fa5448402fc948a9de8dff77c
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Wed Aug 9 17:29:13 2023 +0200

    batman-adv: Fix batadv_v_ogm_aggr_send memory leak
    
    commit 421d467dc2d483175bad4fb76a31b9e5a3d744cf upstream.
    
    When batadv_v_ogm_aggr_send is called for an inactive interface, the skb
    is silently dropped by batadv_v_ogm_send_to_if() but never freed causing
    the following memory leak:
    
      unreferenced object 0xffff00000c164800 (size 512):
        comm "kworker/u8:1", pid 2648, jiffies 4295122303 (age 97.656s)
        hex dump (first 32 bytes):
          00 80 af 09 00 00 ff ff e1 09 00 00 75 01 60 83  ............u.`.
          1f 00 00 00 b8 00 00 00 15 00 05 00 da e3 d3 64  ...............d
        backtrace:
          [<0000000007ad20f6>] __kmalloc_track_caller+0x1a8/0x310
          [<00000000d1029e55>] kmalloc_reserve.constprop.0+0x70/0x13c
          [<000000008b9d4183>] __alloc_skb+0xec/0x1fc
          [<00000000c7af5051>] __netdev_alloc_skb+0x48/0x23c
          [<00000000642ee5f5>] batadv_v_ogm_aggr_send+0x50/0x36c
          [<0000000088660bd7>] batadv_v_ogm_aggr_work+0x24/0x40
          [<0000000042fc2606>] process_one_work+0x3b0/0x610
          [<000000002f2a0b1c>] worker_thread+0xa0/0x690
          [<0000000059fae5d4>] kthread+0x1fc/0x210
          [<000000000c587d3a>] ret_from_fork+0x10/0x20
    
    Free the skb in that case to fix this leak.
    
    Cc: stable@vger.kernel.org
    Fixes: 0da0035942d4 ("batman-adv: OGMv2 - add basic infrastructure")
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f3f72eb8f5b0a1488d28b0228ab112a938007ce
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Fri Aug 4 11:39:36 2023 +0200

    batman-adv: Fix TT global entry leak when client roamed back
    
    commit d25ddb7e788d34cf27ff1738d11a87cb4b67d446 upstream.
    
    When a client roamed back to a node before it got time to destroy the
    pending local entry (i.e. within the same originator interval) the old
    global one is directly removed from hash table and left as such.
    
    But because this entry had an extra reference taken at lookup (i.e using
    batadv_tt_global_hash_find) there is no way its memory will be reclaimed
    at any time causing the following memory leak:
    
      unreferenced object 0xffff0000073c8000 (size 18560):
        comm "softirq", pid 0, jiffies 4294907738 (age 228.644s)
        hex dump (first 32 bytes):
          06 31 ac 12 c7 7a 05 00 01 00 00 00 00 00 00 00  .1...z..........
          2c ad be 08 00 80 ff ff 6c b6 be 08 00 80 ff ff  ,.......l.......
        backtrace:
          [<00000000ee6e0ffa>] kmem_cache_alloc+0x1b4/0x300
          [<000000000ff2fdbc>] batadv_tt_global_add+0x700/0xe20
          [<00000000443897c7>] _batadv_tt_update_changes+0x21c/0x790
          [<000000005dd90463>] batadv_tt_update_changes+0x3c/0x110
          [<00000000a2d7fc57>] batadv_tt_tvlv_unicast_handler_v1+0xafc/0xe10
          [<0000000011793f2a>] batadv_tvlv_containers_process+0x168/0x2b0
          [<00000000b7cbe2ef>] batadv_recv_unicast_tvlv+0xec/0x1f4
          [<0000000042aef1d8>] batadv_batman_skb_recv+0x25c/0x3a0
          [<00000000bbd8b0a2>] __netif_receive_skb_core.isra.0+0x7a8/0xe90
          [<000000004033d428>] __netif_receive_skb_one_core+0x64/0x74
          [<000000000f39a009>] __netif_receive_skb+0x48/0xe0
          [<00000000f2cd8888>] process_backlog+0x174/0x344
          [<00000000507d6564>] __napi_poll+0x58/0x1f4
          [<00000000b64ef9eb>] net_rx_action+0x504/0x590
          [<00000000056fa5e4>] _stext+0x1b8/0x418
          [<00000000878879d6>] run_ksoftirqd+0x74/0xa4
      unreferenced object 0xffff00000bae1a80 (size 56):
        comm "softirq", pid 0, jiffies 4294910888 (age 216.092s)
        hex dump (first 32 bytes):
          00 78 b1 0b 00 00 ff ff 0d 50 00 00 00 00 00 00  .x.......P......
          00 00 00 00 00 00 00 00 50 c8 3c 07 00 00 ff ff  ........P.<.....
        backtrace:
          [<00000000ee6e0ffa>] kmem_cache_alloc+0x1b4/0x300
          [<00000000d9aaa49e>] batadv_tt_global_add+0x53c/0xe20
          [<00000000443897c7>] _batadv_tt_update_changes+0x21c/0x790
          [<000000005dd90463>] batadv_tt_update_changes+0x3c/0x110
          [<00000000a2d7fc57>] batadv_tt_tvlv_unicast_handler_v1+0xafc/0xe10
          [<0000000011793f2a>] batadv_tvlv_containers_process+0x168/0x2b0
          [<00000000b7cbe2ef>] batadv_recv_unicast_tvlv+0xec/0x1f4
          [<0000000042aef1d8>] batadv_batman_skb_recv+0x25c/0x3a0
          [<00000000bbd8b0a2>] __netif_receive_skb_core.isra.0+0x7a8/0xe90
          [<000000004033d428>] __netif_receive_skb_one_core+0x64/0x74
          [<000000000f39a009>] __netif_receive_skb+0x48/0xe0
          [<00000000f2cd8888>] process_backlog+0x174/0x344
          [<00000000507d6564>] __napi_poll+0x58/0x1f4
          [<00000000b64ef9eb>] net_rx_action+0x504/0x590
          [<00000000056fa5e4>] _stext+0x1b8/0x418
          [<00000000878879d6>] run_ksoftirqd+0x74/0xa4
    
    Releasing the extra reference from batadv_tt_global_hash_find even at
    roam back when batadv_tt_global_free is called fixes this memory leak.
    
    Cc: stable@vger.kernel.org
    Fixes: 068ee6e204e1 ("batman-adv: roaming handling mechanism redesign")
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by; Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7667b49880a79f809b17838f386e1abb82f2b11
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Fri Jul 28 15:38:50 2023 +0200

    batman-adv: Do not get eth header before batadv_check_management_packet
    
    commit eac27a41ab641de074655d2932fc7f8cdb446881 upstream.
    
    If received skb in batadv_v_elp_packet_recv or batadv_v_ogm_packet_recv
    is either cloned or non linearized then its data buffer will be
    reallocated by batadv_check_management_packet when skb_cow or
    skb_linearize get called. Thus geting ethernet header address inside
    skb data buffer before batadv_check_management_packet had any chance to
    reallocate it could lead to the following kernel panic:
    
      Unable to handle kernel paging request at virtual address ffffff8020ab069a
      Mem abort info:
        ESR = 0x96000007
        EC = 0x25: DABT (current EL), IL = 32 bits
        SET = 0, FnV = 0
        EA = 0, S1PTW = 0
        FSC = 0x07: level 3 translation fault
      Data abort info:
        ISV = 0, ISS = 0x00000007
        CM = 0, WnR = 0
      swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000040f45000
      [ffffff8020ab069a] pgd=180000007fffa003, p4d=180000007fffa003, pud=180000007fffa003, pmd=180000007fefe003, pte=0068000020ab0706
      Internal error: Oops: 96000007 [#1] SMP
      Modules linked in: ahci_mvebu libahci_platform libahci dvb_usb_af9035 dvb_usb_dib0700 dib0070 dib7000m dibx000_common ath11k_pci ath10k_pci ath10k_core mwl8k_new nf_nat_sip nf_conntrack_sip xhci_plat_hcd xhci_hcd nf_nat_pptp nf_conntrack_pptp at24 sbsa_gwdt
      CPU: 1 PID: 16 Comm: ksoftirqd/1 Not tainted 5.15.42-00066-g3242268d425c-dirty #550
      Hardware name: A8k (DT)
      pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
      pc : batadv_is_my_mac+0x60/0xc0
      lr : batadv_v_ogm_packet_recv+0x98/0x5d0
      sp : ffffff8000183820
      x29: ffffff8000183820 x28: 0000000000000001 x27: ffffff8014f9af00
      x26: 0000000000000000 x25: 0000000000000543 x24: 0000000000000003
      x23: ffffff8020ab0580 x22: 0000000000000110 x21: ffffff80168ae880
      x20: 0000000000000000 x19: ffffff800b561000 x18: 0000000000000000
      x17: 0000000000000000 x16: 0000000000000000 x15: 00dc098924ae0032
      x14: 0f0405433e0054b0 x13: ffffffff00000080 x12: 0000004000000001
      x11: 0000000000000000 x10: 0000000000000000 x9 : 0000000000000000
      x8 : 0000000000000000 x7 : ffffffc076dae000 x6 : ffffff8000183700
      x5 : ffffffc00955e698 x4 : ffffff80168ae000 x3 : ffffff80059cf000
      x2 : ffffff800b561000 x1 : ffffff8020ab0696 x0 : ffffff80168ae880
      Call trace:
       batadv_is_my_mac+0x60/0xc0
       batadv_v_ogm_packet_recv+0x98/0x5d0
       batadv_batman_skb_recv+0x1b8/0x244
       __netif_receive_skb_core.isra.0+0x440/0xc74
       __netif_receive_skb_one_core+0x14/0x20
       netif_receive_skb+0x68/0x140
       br_pass_frame_up+0x70/0x80
       br_handle_frame_finish+0x108/0x284
       br_handle_frame+0x190/0x250
       __netif_receive_skb_core.isra.0+0x240/0xc74
       __netif_receive_skb_list_core+0x6c/0x90
       netif_receive_skb_list_internal+0x1f4/0x310
       napi_complete_done+0x64/0x1d0
       gro_cell_poll+0x7c/0xa0
       __napi_poll+0x34/0x174
       net_rx_action+0xf8/0x2a0
       _stext+0x12c/0x2ac
       run_ksoftirqd+0x4c/0x7c
       smpboot_thread_fn+0x120/0x210
       kthread+0x140/0x150
       ret_from_fork+0x10/0x20
      Code: f9403844 eb03009f 54fffee1 f94
    
    Thus ethernet header address should only be fetched after
    batadv_check_management_packet has been called.
    
    Fixes: 0da0035942d4 ("batman-adv: OGMv2 - add basic infrastructure")
    Cc: stable@vger.kernel.org
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f9312dd7581780c0cebda3ffc6cf421291597cf
Author: Sven Eckelmann <sven@narfation.org>
Date:   Wed Jul 19 10:01:15 2023 +0200

    batman-adv: Don't increase MTU when set by user
    
    commit d8e42a2b0addf238be8b3b37dcd9795a5c1be459 upstream.
    
    If the user set an MTU value, it usually means that there are special
    requirements for the MTU. But if an interface gots activated, the MTU was
    always recalculated and then the user set value was overwritten.
    
    The only reason why this user set value has to be overwritten, is when the
    MTU has to be decreased because batman-adv is not able to transfer packets
    with the user specified size.
    
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cde5a240d72d5f2082f81e5e7998f16dcdcbd335
Author: Sven Eckelmann <sven@narfation.org>
Date:   Wed Jul 19 09:29:29 2023 +0200

    batman-adv: Trigger events for auto adjusted MTU
    
    commit c6a953cce8d0438391e6da48c8d0793d3fbfcfa6 upstream.
    
    If an interface changes the MTU, it is expected that an NETDEV_PRECHANGEMTU
    and NETDEV_CHANGEMTU notification events is triggered. This worked fine for
    .ndo_change_mtu based changes because core networking code took care of it.
    But for auto-adjustments after hard-interfaces changes, these events were
    simply missing.
    
    Due to this problem, non-batman-adv components weren't aware of MTU changes
    and thus couldn't perform their own tasks correctly.
    
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22426e1ce679bd80d174fa4874d9a3996dee3290
Author: Christian Göttsche <cgzones@googlemail.com>
Date:   Fri Aug 18 17:33:58 2023 +0200

    selinux: set next pointer before attaching to list
    
    commit 70d91dc9b2ac91327d0eefd86163abc3548effa6 upstream.
    
    Set the next pointer in filename_trans_read_helper() before attaching
    the new node under construction to the list, otherwise garbage would be
    dereferenced on subsequent failure during cleanup in the out goto label.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 430059024389 ("selinux: implement new format of filename transitions")
    Signed-off-by: Christian Göttsche <cgzones@googlemail.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 711595bfdccfcb5f54ae145ba72b9c39adc40f20
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Fri Aug 4 10:52:20 2023 -0400

    nfsd: Fix race to FREE_STATEID and cl_revoked
    
    commit 3b816601e279756e781e6c4d9b3f3bd21a72ac67 upstream.
    
    We have some reports of linux NFS clients that cannot satisfy a linux knfsd
    server that always sets SEQ4_STATUS_RECALLABLE_STATE_REVOKED even though
    those clients repeatedly walk all their known state using TEST_STATEID and
    receive NFS4_OK for all.
    
    Its possible for revoke_delegation() to set NFS4_REVOKED_DELEG_STID, then
    nfsd4_free_stateid() finds the delegation and returns NFS4_OK to
    FREE_STATEID.  Afterward, revoke_delegation() moves the same delegation to
    cl_revoked.  This would produce the observed client/server effect.
    
    Fix this by ensuring that the setting of sc_type to NFS4_REVOKED_DELEG_STID
    and move to cl_revoked happens within the same cl_lock.  This will allow
    nfsd4_free_stateid() to properly remove the delegation from cl_revoked.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2217103
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2176575
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Cc: stable@vger.kernel.org # v4.17+
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd1697e122306a07e7a44344b385423265d88508
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Aug 8 21:17:11 2023 -0400

    NFS: Fix a use after free in nfs_direct_join_group()
    
    commit be2fd1560eb57b7298aa3c258ddcca0d53ecdea3 upstream.
    
    Be more careful when tearing down the subrequests of an O_DIRECT write
    as part of a retransmission.
    
    Reported-by: Chris Mason <clm@fb.com>
    Fixes: ed5d588fe47f ("NFS: Try to join page groups before an O_DIRECT retransmission")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f642613746e9a60431d16875626f6f5bbe821e7
Author: Alexandre Ghiti <alexghiti@rivosinc.com>
Date:   Wed Aug 9 18:46:33 2023 +0200

    mm: add a call to flush_cache_vmap() in vmap_pfn()
    
    commit a50420c79731fc5cf27ad43719c1091e842a2606 upstream.
    
    flush_cache_vmap() must be called after new vmalloc mappings are installed
    in the page table in order to allow architectures to make sure the new
    mapping is visible.
    
    It could lead to a panic since on some architectures (like powerpc),
    the page table walker could see the wrong pte value and trigger a
    spurious page fault that can not be resolved (see commit f1cb8f9beba8
    ("powerpc/64s/radix: avoid ptesync after set_pte and
    ptep_set_access_flags")).
    
    But actually the patch is aiming at riscv: the riscv specification
    allows the caching of invalid entries in the TLB, and since we recently
    removed the vmalloc page fault handling, we now need to emit a tlb
    shootdown whenever a new vmalloc mapping is emitted
    (https://lore.kernel.org/linux-riscv/20230725132246.817726-1-alexghiti@rivosinc.com/).
    That's a temporary solution, there are ways to avoid that :)
    
    Link: https://lkml.kernel.org/r/20230809164633.1556126-1-alexghiti@rivosinc.com
    Fixes: 3e9a9e256b1e ("mm: add a vmap_pfn function")
    Reported-by: Dylan Jhong <dylan@andestech.com>
    Closes: https://lore.kernel.org/linux-riscv/ZMytNY2J8iyjbPPy@atctrx.andestech.com/
    Signed-off-by: Alexandre Ghiti <alexghiti@rivosinc.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Reviewed-by: Dylan Jhong <dylan@andestech.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 440c10034b4ddde55e5c88aa4bf37102ebd0a35e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Aug 23 18:16:25 2023 +0200

    ALSA: ymfpci: Fix the missing snd_card_free() call at probe error
    
    commit 1d0eb6143c1e85d3f9a3f5a616ee7e5dc351d33b upstream.
    
    Like a few other drivers, YMFPCI driver needs to clean up with
    snd_card_free() call at an error path of the probe; otherwise the
    other devres resources are released before the card and it results in
    the UAF.
    
    This patch uses the helper for handling the probe error gracefully.
    
    Fixes: f33fc1576757 ("ALSA: ymfpci: Create card with device-managed snd_devm_card_new()")
    Cc: <stable@vger.kernel.org>
    Reported-and-tested-by: Takashi Yano <takashi.yano@nifty.ne.jp>
    Closes: https://lore.kernel.org/r/20230823135846.1812-1-takashi.yano@nifty.ne.jp
    Link: https://lore.kernel.org/r/20230823161625.5807-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cc7d81cf57618e24b6db2bc45430bd7249f810d
Author: Andrey Skvortsov <andrej.skvortzov@gmail.com>
Date:   Sat Aug 5 11:48:47 2023 +0300

    clk: Fix slab-out-of-bounds error in devm_clk_release()
    
    commit 66fbfb35da47f391bdadf9fa7ceb88af4faa9022 upstream.
    
    Problem can be reproduced by unloading snd_soc_simple_card, because in
    devm_get_clk_from_child() devres data is allocated as `struct clk`, but
    devm_clk_release() expects devres data to be `struct devm_clk_state`.
    
    KASAN report:
     ==================================================================
     BUG: KASAN: slab-out-of-bounds in devm_clk_release+0x20/0x54
     Read of size 8 at addr ffffff800ee09688 by task (udev-worker)/287
    
     Call trace:
      dump_backtrace+0xe8/0x11c
      show_stack+0x1c/0x30
      dump_stack_lvl+0x60/0x78
      print_report+0x150/0x450
      kasan_report+0xa8/0xf0
      __asan_load8+0x78/0xa0
      devm_clk_release+0x20/0x54
      release_nodes+0x84/0x120
      devres_release_all+0x144/0x210
      device_unbind_cleanup+0x1c/0xac
      really_probe+0x2f0/0x5b0
      __driver_probe_device+0xc0/0x1f0
      driver_probe_device+0x68/0x120
      __driver_attach+0x140/0x294
      bus_for_each_dev+0xec/0x160
      driver_attach+0x38/0x44
      bus_add_driver+0x24c/0x300
      driver_register+0xf0/0x210
      __platform_driver_register+0x48/0x54
      asoc_simple_card_init+0x24/0x1000 [snd_soc_simple_card]
      do_one_initcall+0xac/0x340
      do_init_module+0xd0/0x300
      load_module+0x2ba4/0x3100
      __do_sys_init_module+0x2c8/0x300
      __arm64_sys_init_module+0x48/0x5c
      invoke_syscall+0x64/0x190
      el0_svc_common.constprop.0+0x124/0x154
      do_el0_svc+0x44/0xdc
      el0_svc+0x14/0x50
      el0t_64_sync_handler+0xec/0x11c
      el0t_64_sync+0x14c/0x150
    
     Allocated by task 287:
      kasan_save_stack+0x38/0x60
      kasan_set_track+0x28/0x40
      kasan_save_alloc_info+0x20/0x30
      __kasan_kmalloc+0xac/0xb0
      __kmalloc_node_track_caller+0x6c/0x1c4
      __devres_alloc_node+0x44/0xb4
      devm_get_clk_from_child+0x44/0xa0
      asoc_simple_parse_clk+0x1b8/0x1dc [snd_soc_simple_card_utils]
      simple_parse_node.isra.0+0x1ec/0x230 [snd_soc_simple_card]
      simple_dai_link_of+0x1bc/0x334 [snd_soc_simple_card]
      __simple_for_each_link+0x2ec/0x320 [snd_soc_simple_card]
      asoc_simple_probe+0x468/0x4dc [snd_soc_simple_card]
      platform_probe+0x90/0xf0
      really_probe+0x118/0x5b0
      __driver_probe_device+0xc0/0x1f0
      driver_probe_device+0x68/0x120
      __driver_attach+0x140/0x294
      bus_for_each_dev+0xec/0x160
      driver_attach+0x38/0x44
      bus_add_driver+0x24c/0x300
      driver_register+0xf0/0x210
      __platform_driver_register+0x48/0x54
      asoc_simple_card_init+0x24/0x1000 [snd_soc_simple_card]
      do_one_initcall+0xac/0x340
      do_init_module+0xd0/0x300
      load_module+0x2ba4/0x3100
      __do_sys_init_module+0x2c8/0x300
      __arm64_sys_init_module+0x48/0x5c
      invoke_syscall+0x64/0x190
      el0_svc_common.constprop.0+0x124/0x154
      do_el0_svc+0x44/0xdc
      el0_svc+0x14/0x50
      el0t_64_sync_handler+0xec/0x11c
      el0t_64_sync+0x14c/0x150
    
     The buggy address belongs to the object at ffffff800ee09600
      which belongs to the cache kmalloc-256 of size 256
     The buggy address is located 136 bytes inside of
      256-byte region [ffffff800ee09600, ffffff800ee09700)
    
     The buggy address belongs to the physical page:
     page:000000002d97303b refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x4ee08
     head:000000002d97303b order:1 compound_mapcount:0 compound_pincount:0
     flags: 0x10200(slab|head|zone=0)
     raw: 0000000000010200 0000000000000000 dead000000000122 ffffff8002c02480
     raw: 0000000000000000 0000000080100010 00000001ffffffff 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
      ffffff800ee09580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffffff800ee09600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     >ffffff800ee09680: 00 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
                           ^
      ffffff800ee09700: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffffff800ee09780: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ==================================================================
    
    Fixes: abae8e57e49a ("clk: generalize devm_clk_get() a bit")
    Signed-off-by: Andrey Skvortsov <andrej.skvortzov@gmail.com>
    Link: https://lore.kernel.org/r/20230805084847.3110586-1-andrej.skvortzov@gmail.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f72859acfa231cbd0e491741046d549d77a531d
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Fri Jun 30 09:18:13 2023 -0400

    NFSv4: Fix dropped lock for racing OPEN and delegation return
    
    commit 1cbc11aaa01f80577b67ae02c73ee781112125fd upstream.
    
    Commmit f5ea16137a3f ("NFSv4: Retry LOCK on OLD_STATEID during delegation
    return") attempted to solve this problem by using nfs4's generic async error
    handling, but introduced a regression where v4.0 lock recovery would hang.
    The additional complexity introduced by overloading that error handling is
    not necessary for this case.  This patch expects that commit to be
    reverted.
    
    The problem as originally explained in the above commit is:
    
        There's a small window where a LOCK sent during a delegation return can
        race with another OPEN on client, but the open stateid has not yet been
        updated.  In this case, the client doesn't handle the OLD_STATEID error
        from the server and will lose this lock, emitting:
        "NFS: nfs4_handle_delegation_recall_error: unhandled error -10024".
    
    Fix this by using the old_stateid refresh helpers if the server replies
    with OLD_STATEID.
    
    Suggested-by: Trond Myklebust <trondmy@hammerspace.com>
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c025420fef2ce7fc27115b583efb676a0c41fd5
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Aug 23 14:51:39 2023 +1000

    ibmveth: Use dcbf rather than dcbfl
    
    commit bfedba3b2c7793ce127680bc8f70711e05ec7a17 upstream.
    
    When building for power4, newer binutils don't recognise the "dcbfl"
    extended mnemonic.
    
    dcbfl RA, RB is equivalent to dcbf RA, RB, 1.
    
    Switch to "dcbf" to avoid the build error.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e546bd0894304f52e1b9c99edffbad021ad0d41
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Aug 23 18:05:12 2023 -0700

    Revert "KVM: x86: enable TDP MMU by default"
    
    This reverts commit 71ba3f3189c78f756a659568fb473600fd78f207.
    
    Disable the TDP MMU by default in v5.15 kernels to "fix" several severe
    performance bugs that have since been found and fixed in the TDP MMU, but
    are unsuitable for backporting to v5.15.
    
    The problematic bugs are fixed by upstream commit edbdb43fc96b ("KVM:
    x86: Preserve TDP MMU roots until they are explicitly invalidated") and
    commit 01b31714bd90 ("KVM: x86: Do not unload MMU roots when only toggling
    CR0.WP with TDP enabled").  Both commits fix scenarios where KVM will
    rebuild all TDP MMU page tables in paths that are frequently hit by
    certain guest workloads.  While not exactly common, the guest workloads
    are far from rare.  The fallout of rebuilding TDP MMU page tables can be
    so severe in some cases that it induces soft lockups in the guest.
    
    Commit edbdb43fc96b would require _significant_ effort and churn to
    backport due it depending on a major rework that was done in v5.18.
    
    Commit 01b31714bd90 has far fewer direct conflicts, but has several subtle
    _known_ dependencies, and it's unclear whether or not there are more
    unknown dependencies that have been missed.
    
    Lastly, disabling the TDP MMU in v5.15 kernels also fixes a lurking train
    wreck started by upstream commit a955cad84cda ("KVM: x86/mmu: Retry page
    fault if root is invalidated by memslot update").  That commit was tagged
    for stable to fix a memory leak, but didn't cherry-pick cleanly and was
    never backported to v5.15.  Which is extremely fortunate, as it introduced
    not one but two bugs, one of which was fixed by upstream commit
    18c841e1f411 ("KVM: x86: Retry page fault if MMU reload is pending and
    root has no sp"), while the other was unknowingly fixed by upstream
    commit ba6e3fe25543 ("KVM: x86/mmu: Grab mmu_invalidate_seq in
    kvm_faultin_pfn()") in v6.3 (a one-off fix will be made for v6.1 kernels,
    which did receive a backport for a955cad84cda).  Disabling the TDP MMU
    by default reduces the probability of breaking v5.15 kernels by
    backporting only a subset of the fixes.
    
    As far as what is lost by disabling the TDP MMU, the main selling point of
    the TDP MMU is its ability to service page fault VM-Exits in parallel,
    i.e. the main benefactors of the TDP MMU are deployments of large VMs
    (hundreds of vCPUs), and in particular delployments that live-migrate such
    VMs and thus need to fault-in huge amounts of memory on many vCPUs after
    restarting the VM after migration.
    
    Smaller VMs can see performance improvements, but nowhere enough to make
    up for the TDP MMU (in v5.15) absolutely cratering performance for some
    workloads.  And practically speaking, anyone that is deploying and
    migrating VMs with hundreds of vCPUs is likely rolling their own kernel,
    not using a stock v5.15 series kernel.
    
    Link: https://lore.kernel.org/all/ZDmEGM+CgYpvDLh6@google.com
    Link: https://lore.kernel.org/all/f023d927-52aa-7e08-2ee5-59a2fbc65953@gameservers.com
    Acked-by: Mathias Krause <minipli@grsecurity.net>
    Acked-by: Jeremi Piotrowski <jpiotrowski@linux.microsoft.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67af12f5582bac5ee2bc1341ecb55c54557b77ca
Author: Ivan Mikhaylov <fr0st61te@gmail.com>
Date:   Wed Jun 7 18:17:42 2023 +0300

    net/ncsi: change from ndo_set_mac_address to dev_set_mac_address
    
    commit 790071347a0a1a89e618eedcd51c687ea783aeb3 upstream.
    
    Change ndo_set_mac_address to dev_set_mac_address because
    dev_set_mac_address provides a way to notify network layer about MAC
    change. In other case, services may not aware about MAC change and keep
    using old one which set from network adapter driver.
    
    As example, DHCP client from systemd do not update MAC address without
    notification from net subsystem which leads to the problem with acquiring
    the right address from DHCP server.
    
    Fixes: cb10c7c0dfd9e ("net/ncsi: Add NCSI Broadcom OEM command")
    Cc: stable@vger.kernel.org # v6.0+ 2f38e84 net/ncsi: make one oem_gma function for all mfr id
    Signed-off-by: Paul Fertser <fercerpav@gmail.com>
    Signed-off-by: Ivan Mikhaylov <fr0st61te@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4451457d61e066b559eb43d220682389e279da3e
Author: Ivan Mikhaylov <fr0st61te@gmail.com>
Date:   Wed Jun 7 18:17:41 2023 +0300

    net/ncsi: make one oem_gma function for all mfr id
    
    commit 74b449b98dccdf24288d562f9d207fa066da793d upstream.
    
    Make the one Get Mac Address function for all manufacturers and change
    this call in handlers accordingly.
    
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Ivan Mikhaylov <fr0st61te@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f683f4be802b2406af5fd3a1834cbae597d10645
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Wed Aug 23 15:19:04 2023 +0800

    bonding: fix macvlan over alb bond support
    
    [ Upstream commit e74216b8def3803e98ae536de78733e9d7f3b109 ]
    
    The commit 14af9963ba1e ("bonding: Support macvlans on top of tlb/rlb mode
    bonds") aims to enable the use of macvlans on top of rlb bond mode. However,
    the current rlb bond mode only handles ARP packets to update remote neighbor
    entries. This causes an issue when a macvlan is on top of the bond, and
    remote devices send packets to the macvlan using the bond's MAC address
    as the destination. After delivering the packets to the macvlan, the macvlan
    will rejects them as the MAC address is incorrect. Consequently, this commit
    makes macvlan over bond non-functional.
    
    To address this problem, one potential solution is to check for the presence
    of a macvlan port on the bond device using netif_is_macvlan_port(bond->dev)
    and return NULL in the rlb_arp_xmit() function. However, this approach
    doesn't fully resolve the situation when a VLAN exists between the bond and
    macvlan.
    
    So let's just do a partial revert for commit 14af9963ba1e in rlb_arp_xmit().
    As the comment said, Don't modify or load balance ARPs that do not originate
    locally.
    
    Fixes: 14af9963ba1e ("bonding: Support macvlans on top of tlb/rlb mode bonds")
    Reported-by: susan.zheng@veritas.com
    Closes: https://bugzilla.redhat.com/show_bug.cgi?id=2117816
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fa8046e923ac46e9615a917c776a111d8e87841
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Jan 26 11:10:59 2022 -0800

    net: remove bond_slave_has_mac_rcu()
    
    [ Upstream commit 8b0fdcdc3a7d44aff907f0103f5ffb86b12bfe71 ]
    
    No caller since v3.16.
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: e74216b8def3 ("bonding: fix macvlan over alb bond support")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0ec97fca629fea6c5a268b108495a86b58cff08
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Wed Aug 23 09:43:48 2023 +0300

    rtnetlink: Reject negative ifindexes in RTM_NEWLINK
    
    [ Upstream commit 30188bd7838c16a98a520db1fe9df01ffc6ed368 ]
    
    Negative ifindexes are illegal, but the kernel does not validate the
    ifindex in the ancillary header of RTM_NEWLINK messages, resulting in
    the kernel generating a warning [1] when such an ifindex is specified.
    
    Fix by rejecting negative ifindexes.
    
    [1]
    WARNING: CPU: 0 PID: 5031 at net/core/dev.c:9593 dev_index_reserve+0x1a2/0x1c0 net/core/dev.c:9593
    [...]
    Call Trace:
     <TASK>
     register_netdevice+0x69a/0x1490 net/core/dev.c:10081
     br_dev_newlink+0x27/0x110 net/bridge/br_netlink.c:1552
     rtnl_newlink_create net/core/rtnetlink.c:3471 [inline]
     __rtnl_newlink+0x115e/0x18c0 net/core/rtnetlink.c:3688
     rtnl_newlink+0x67/0xa0 net/core/rtnetlink.c:3701
     rtnetlink_rcv_msg+0x439/0xd30 net/core/rtnetlink.c:6427
     netlink_rcv_skb+0x16b/0x440 net/netlink/af_netlink.c:2545
     netlink_unicast_kernel net/netlink/af_netlink.c:1342 [inline]
     netlink_unicast+0x536/0x810 net/netlink/af_netlink.c:1368
     netlink_sendmsg+0x93c/0xe40 net/netlink/af_netlink.c:1910
     sock_sendmsg_nosec net/socket.c:728 [inline]
     sock_sendmsg+0xd9/0x180 net/socket.c:751
     ____sys_sendmsg+0x6ac/0x940 net/socket.c:2538
     ___sys_sendmsg+0x135/0x1d0 net/socket.c:2592
     __sys_sendmsg+0x117/0x1e0 net/socket.c:2621
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 38f7b870d4a6 ("[RTNETLINK]: Link creation API")
    Reported-by: syzbot+5ba06978f34abb058571@syzkaller.appspotmail.com
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20230823064348.2252280-1-idosch@nvidia.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00247cfd2b69767b508d1eaeccfc396e8b4392d6
Author: Florent Fourcot <florent.fourcot@wifirst.fr>
Date:   Fri Apr 15 18:53:27 2022 +0200

    rtnetlink: return ENODEV when ifname does not exist and group is given
    
    [ Upstream commit ef2a7c9065cea4e3fbc0390e82d05141abbccd7f ]
    
    When the interface does not exist, and a group is given, the given
    parameters are being set to all interfaces of the given group. The given
    IFNAME/ALT_IF_NAME are being ignored in that case.
    
    That can be dangerous since a typo (or a deleted interface) can produce
    weird side effects for caller:
    
    Case 1:
    
     IFLA_IFNAME=valid_interface
     IFLA_GROUP=1
     MTU=1234
    
    Case 1 will update MTU and group of the given interface "valid_interface".
    
    Case 2:
    
     IFLA_IFNAME=doesnotexist
     IFLA_GROUP=1
     MTU=1234
    
    Case 2 will update MTU of all interfaces in group 1. IFLA_IFNAME is
    ignored in this case
    
    This behaviour is not consistent and dangerous. In order to fix this issue,
    we now return ENODEV when the given IFNAME does not exist.
    
    Signed-off-by: Florent Fourcot <florent.fourcot@wifirst.fr>
    Signed-off-by: Brian Baboch <brian.baboch@wifirst.fr>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 30188bd7838c ("rtnetlink: Reject negative ifindexes in RTM_NEWLINK")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75cfb7de44e508a95179727c1b9af4cad08870e2
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Aug 22 19:49:52 2023 +0200

    netfilter: nf_tables: fix out of memory error handling
    
    [ Upstream commit 5e1be4cdc98c989d5387ce94ff15b5ad06a5b681 ]
    
    Several instances of pipapo_resize() don't propagate allocation failures,
    this causes a crash when fault injection is enabled for gfp_kernel slabs.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f22954f8c58fd5f5489f5980796914e306757e77
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Aug 18 01:13:31 2023 +0200

    netfilter: nf_tables: flush pending destroy work before netlink notifier
    
    [ Upstream commit 2c9f0293280e258606e54ed2b96fa71498432eae ]
    
    Destroy work waits for the RCU grace period then it releases the objects
    with no mutex held. All releases objects follow this path for
    transactions, therefore, order is guaranteed and references to top-level
    objects in the hierarchy remain valid.
    
    However, netlink notifier might interfer with pending destroy work.
    rcu_barrier() is not correct because objects are not release via RCU
    callback. Flush destroy work before releasing objects from netlink
    notifier path.
    
    Fixes: d4bc8271db21 ("netfilter: nf_tables: netlink notifier might race to release objects")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff34403fef984a7d602e20ca77b26ff1a07fd13a
Author: Jamal Hadi Salim <jhs@mojatatu.com>
Date:   Tue Aug 22 06:12:31 2023 -0400

    net/sched: fix a qdisc modification with ambiguous command request
    
    [ Upstream commit da71714e359b64bd7aab3bd56ec53f307f058133 ]
    
    When replacing an existing root qdisc, with one that is of the same kind, the
    request boils down to essentially a parameterization change  i.e not one that
    requires allocation and grafting of a new qdisc. syzbot was able to create a
    scenario which resulted in a taprio qdisc replacing an existing taprio qdisc
    with a combination of NLM_F_CREATE, NLM_F_REPLACE and NLM_F_EXCL leading to
    create and graft scenario.
    The fix ensures that only when the qdisc kinds are different that we should
    allow a create and graft, otherwise it goes into the "change" codepath.
    
    While at it, fix the code and comments to improve readability.
    
    While syzbot was able to create the issue, it did not zone on the root cause.
    Analysis from Vladimir Oltean <vladimir.oltean@nxp.com> helped narrow it down.
    
    v1->V2 changes:
    - remove "inline" function definition (Vladmir)
    - remove extrenous braces in branches (Vladmir)
    - change inline function names (Pedro)
    - Run tdc tests (Victor)
    v2->v3 changes:
    - dont break else/if (Simon)
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+a3618a167af2021433cd@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/netdev/20230816225759.g25x76kmgzya2gei@skbuf/T/
    Tested-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Tested-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30624ea3f8b6b5497b5fccffaa551b6ba9725da7
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Mon Aug 21 10:17:21 2023 -0700

    igc: Fix the typo in the PTM Control macro
    
    [ Upstream commit de43975721b97283d5f17eea4228faddf08f2681 ]
    
    The IGC_PTM_CTRL_SHRT_CYC defines the time between two consecutive PTM
    requests. The bit resolution of this field is six bits. That bit five was
    missing in the mask. This patch comes to correct the typo in the
    IGC_PTM_CTRL_SHRT_CYC macro.
    
    Fixes: a90ec8483732 ("igc: Add support for PTP getcrosststamp()")
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
    Link: https://lore.kernel.org/r/20230821171721.2203572-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f697c3ead1094a40a6735b3dd26a0d9fb847824d
Author: Alessio Igor Bogani <alessio.bogani@elettra.eu>
Date:   Mon Aug 21 10:19:27 2023 -0700

    igb: Avoid starting unnecessary workqueues
    
    [ Upstream commit b888c510f7b3d64ca75fc0f43b4a4bd1a611312f ]
    
    If ptp_clock_register() fails or CONFIG_PTP isn't enabled, avoid starting
    PTP related workqueues.
    
    In this way we can fix this:
     BUG: unable to handle page fault for address: ffffc9000440b6f8
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 100000067 P4D 100000067 PUD 1001e0067 PMD 107dc5067 PTE 0
     Oops: 0000 [#1] PREEMPT SMP
     [...]
     Workqueue: events igb_ptp_overflow_check
     RIP: 0010:igb_rd32+0x1f/0x60
     [...]
     Call Trace:
      igb_ptp_read_82580+0x20/0x50
      timecounter_read+0x15/0x60
      igb_ptp_overflow_check+0x1a/0x50
      process_one_work+0x1cb/0x3c0
      worker_thread+0x53/0x3f0
      ? rescuer_thread+0x370/0x370
      kthread+0x142/0x160
      ? kthread_associate_blkcg+0xc0/0xc0
      ret_from_fork+0x1f/0x30
    
    Fixes: 1f6e8178d685 ("igb: Prevent dropped Tx timestamps via work items and interrupts.")
    Fixes: d339b1331616 ("igb: add PTP Hardware Clock code")
    Signed-off-by: Alessio Igor Bogani <alessio.bogani@elettra.eu>
    Tested-by: Arpana Arland <arpanax.arland@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230821171927.2203644-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7823d752ce1112efc3857d4b272180c13a83a83
Author: Jesse Brandeburg <jesse.brandeburg@intel.com>
Date:   Thu Aug 10 16:51:10 2023 -0700

    ice: fix receive buffer size miscalculation
    
    [ Upstream commit 10083aef784031fa9f06c19a1b182e6fad5338d9 ]
    
    The driver is misconfiguring the hardware for some values of MTU such that
    it could use multiple descriptors to receive a packet when it could have
    simply used one.
    
    Change the driver to use a round-up instead of the result of a shift, as
    the shift can truncate the lower bits of the size, and result in the
    problem noted above. It also aligns this driver with similar code in i40e.
    
    The insidiousness of this problem is that everything works with the wrong
    size, it's just not working as well as it could, as some MTU sizes end up
    using two or more descriptors, and there is no way to tell that is
    happening without looking at ice_trace or a bus analyzer.
    
    Fixes: efc2214b6047 ("ice: Add support for XDP")
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ace1b0ae309720634f8aa553cdc89dbea80c2322
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Aug 18 18:26:02 2023 -0700

    net: validate veth and vxcan peer ifindexes
    
    [ Upstream commit f534f6581ec084fe94d6759f7672bd009794b07e ]
    
    veth and vxcan need to make sure the ifindexes of the peer
    are not negative, core does not validate this.
    
    Using iproute2 with user-space-level checking removed:
    
    Before:
    
      # ./ip link add index 10 type veth peer index -1
      # ip link show
      1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
      2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000
        link/ether 52:54:00:74:b2:03 brd ff:ff:ff:ff:ff:ff
      10: veth1@veth0: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
        link/ether 8a:90:ff:57:6d:5d brd ff:ff:ff:ff:ff:ff
      -1: veth0@veth1: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
        link/ether ae:ed:18:e6:fa:7f brd ff:ff:ff:ff:ff:ff
    
    Now:
    
      $ ./ip link add index 10 type veth peer index -1
      Error: ifindex can't be negative.
    
    This problem surfaced in net-next because an explicit WARN()
    was added, the root cause is older.
    
    Fixes: e6f8f1a739b6 ("veth: Allow to create peer link with given ifindex")
    Fixes: a8f820a380a2 ("can: add Virtual CAN Tunnel driver (vxcan)")
    Reported-by: syzbot+5ba06978f34abb058571@syzkaller.appspotmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 335be585416de5b73b3600f5d84db9f36ffd8993
Author: Ruan Jinjie <ruanjinjie@huawei.com>
Date:   Fri Aug 18 13:12:21 2023 +0800

    net: bcmgenet: Fix return value check for fixed_phy_register()
    
    [ Upstream commit 32bbe64a1386065ab2aef8ce8cae7c689d0add6e ]
    
    The fixed_phy_register() function returns error pointers and never
    returns NULL. Update the checks accordingly.
    
    Fixes: b0ba512e25d7 ("net: bcmgenet: enable driver to work without a device tree")
    Signed-off-by: Ruan Jinjie <ruanjinjie@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Acked-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60a5034584eabe82ebf74afb0ccb5132976fefff
Author: Ruan Jinjie <ruanjinjie@huawei.com>
Date:   Fri Aug 18 13:12:20 2023 +0800

    net: bgmac: Fix return value check for fixed_phy_register()
    
    [ Upstream commit 23a14488ea5882dea5851b65c9fce2127ee8fcad ]
    
    The fixed_phy_register() function returns error pointers and never
    returns NULL. Update the checks accordingly.
    
    Fixes: c25b23b8a387 ("bgmac: register fixed PHY for ARM BCM470X / BCM5301X chipsets")
    Signed-off-by: Ruan Jinjie <ruanjinjie@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b52c9ba42c0e98da0f349e7c3abfe74dc4d31f2
Author: Lu Wei <luwei32@huawei.com>
Date:   Thu Aug 17 22:54:49 2023 +0800

    ipvlan: Fix a reference count leak warning in ipvlan_ns_exit()
    
    [ Upstream commit 043d5f68d0ccdda91029b4b6dce7eeffdcfad281 ]
    
    There are two network devices(veth1 and veth3) in ns1, and ipvlan1 with
    L3S mode and ipvlan2 with L2 mode are created based on them as
    figure (1). In this case, ipvlan_register_nf_hook() will be called to
    register nf hook which is needed by ipvlans in L3S mode in ns1 and value
    of ipvl_nf_hook_refcnt is set to 1.
    
    (1)
               ns1                           ns2
          ------------                  ------------
    
       veth1--ipvlan1 (L3S)
    
       veth3--ipvlan2 (L2)
    
    (2)
               ns1                           ns2
          ------------                  ------------
    
       veth1--ipvlan1 (L3S)
    
             ipvlan2 (L2)                  veth3
         |                                  |
         |------->-------->--------->--------
                        migrate
    
    When veth3 migrates from ns1 to ns2 as figure (2), veth3 will register in
    ns2 and calls call_netdevice_notifiers with NETDEV_REGISTER event:
    
    dev_change_net_namespace
        call_netdevice_notifiers
            ipvlan_device_event
                ipvlan_migrate_l3s_hook
                    ipvlan_register_nf_hook(newnet)      (I)
                    ipvlan_unregister_nf_hook(oldnet)    (II)
    
    In function ipvlan_migrate_l3s_hook(), ipvl_nf_hook_refcnt in ns1 is not 0
    since veth1 with ipvlan1 still in ns1, (I) and (II) will be called to
    register nf_hook in ns2 and unregister nf_hook in ns1. As a result,
    ipvl_nf_hook_refcnt in ns1 is decreased incorrectly and this in ns2
    is increased incorrectly. When the second net namespace is removed, a
    reference count leak warning in ipvlan_ns_exit() will be triggered.
    
    This patch add a check before ipvlan_migrate_l3s_hook() is called. The
    warning can be triggered as follows:
    
    $ ip netns add ns1
    $ ip netns add ns2
    $ ip netns exec ns1 ip link add veth1 type veth peer name veth2
    $ ip netns exec ns1 ip link add veth3 type veth peer name veth4
    $ ip netns exec ns1 ip link add ipv1 link veth1 type ipvlan mode l3s
    $ ip netns exec ns1 ip link add ipv2 link veth3 type ipvlan mode l2
    $ ip netns exec ns1 ip link set veth3 netns ns2
    $ ip net del ns2
    
    Fixes: 3133822f5ac1 ("ipvlan: use pernet operations and restrict l3s hooks to master netns")
    Signed-off-by: Lu Wei <luwei32@huawei.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Link: https://lore.kernel.org/r/20230817145449.141827-1-luwei32@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bad37b6f675057a84a8e8e9e3be317ac83147e4
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 18 01:58:20 2023 +0000

    dccp: annotate data-races in dccp_poll()
    
    [ Upstream commit cba3f1786916063261e3e5ccbb803abc325b24ef ]
    
    We changed tcp_poll() over time, bug never updated dccp.
    
    Note that we also could remove dccp instead of maintaining it.
    
    Fixes: 7c657876b63c ("[DCCP]: Initial implementation")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230818015820.2701595-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b015360e86f762aed527dc907735424d81e0d28
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 18 01:51:32 2023 +0000

    sock: annotate data-races around prot->memory_pressure
    
    [ Upstream commit 76f33296d2e09f63118db78125c95ef56df438e9 ]
    
    *prot->memory_pressure is read/writen locklessly, we need
    to add proper annotations.
    
    A recent commit added a new race, it is time to audit all accesses.
    
    Fixes: 2d0c88e84e48 ("sock: Fix misuse of sk_under_memory_pressure()")
    Fixes: 4d93df0abd50 ("[SCTP]: Rewrite of sctp buffer management code")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Abel Wu <wuyun.abel@bytedance.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Link: https://lore.kernel.org/r/20230818015132.2699348-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c52c6c0223e1b68fc25c3b40266cf05e863e6489
Author: Hariprasad Kelam <hkelam@marvell.com>
Date:   Thu Aug 17 12:00:06 2023 +0530

    octeontx2-af: SDP: fix receive link config
    
    [ Upstream commit 05f3d5bc23524bed6f043dfe6b44da687584f9fb ]
    
    On SDP interfaces, frame oversize and undersize errors are
    observed as driver is not considering packet sizes of all
    subscribers of the link before updating the link config.
    
    This patch fixes the same.
    
    Fixes: 9b7dd87ac071 ("octeontx2-af: Support to modify min/max allowed packet lengths")
    Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20230817063006.10366-1-hkelam@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce6e2b14bc094866d9173db6935da2d752f06d8b
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Thu Aug 17 20:55:39 2023 +0800

    tracing: Fix memleak due to race between current_tracer and trace
    
    [ Upstream commit eecb91b9f98d6427d4af5fdb8f108f52572a39e7 ]
    
    Kmemleak report a leak in graph_trace_open():
    
      unreferenced object 0xffff0040b95f4a00 (size 128):
        comm "cat", pid 204981, jiffies 4301155872 (age 99771.964s)
        hex dump (first 32 bytes):
          e0 05 e7 b4 ab 7d 00 00 0b 00 01 00 00 00 00 00 .....}..........
          f4 00 01 10 00 a0 ff ff 00 00 00 00 65 00 10 00 ............e...
        backtrace:
          [<000000005db27c8b>] kmem_cache_alloc_trace+0x348/0x5f0
          [<000000007df90faa>] graph_trace_open+0xb0/0x344
          [<00000000737524cd>] __tracing_open+0x450/0xb10
          [<0000000098043327>] tracing_open+0x1a0/0x2a0
          [<00000000291c3876>] do_dentry_open+0x3c0/0xdc0
          [<000000004015bcd6>] vfs_open+0x98/0xd0
          [<000000002b5f60c9>] do_open+0x520/0x8d0
          [<00000000376c7820>] path_openat+0x1c0/0x3e0
          [<00000000336a54b5>] do_filp_open+0x14c/0x324
          [<000000002802df13>] do_sys_openat2+0x2c4/0x530
          [<0000000094eea458>] __arm64_sys_openat+0x130/0x1c4
          [<00000000a71d7881>] el0_svc_common.constprop.0+0xfc/0x394
          [<00000000313647bf>] do_el0_svc+0xac/0xec
          [<000000002ef1c651>] el0_svc+0x20/0x30
          [<000000002fd4692a>] el0_sync_handler+0xb0/0xb4
          [<000000000c309c35>] el0_sync+0x160/0x180
    
    The root cause is descripted as follows:
    
      __tracing_open() {  // 1. File 'trace' is being opened;
        ...
        *iter->trace = *tr->current_trace;  // 2. Tracer 'function_graph' is
                                            //    currently set;
        ...
        iter->trace->open(iter);  // 3. Call graph_trace_open() here,
                                  //    and memory are allocated in it;
        ...
      }
    
      s_start() {  // 4. The opened file is being read;
        ...
        *iter->trace = *tr->current_trace;  // 5. If tracer is switched to
                                            //    'nop' or others, then memory
                                            //    in step 3 are leaked!!!
        ...
      }
    
    To fix it, in s_start(), close tracer before switching then reopen the
    new tracer after switching. And some tracers like 'wakeup' may not update
    'iter->private' in some cases when reopen, then it should be cleared
    to avoid being mistakenly closed again.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230817125539.1646321-1-zhengyejian1@huawei.com
    
    Fixes: d7350c3f4569 ("tracing/core: make the read callbacks reentrants")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef748360ba9168ccfc199693f03d884682224ea6
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Sat Aug 5 11:38:15 2023 +0800

    tracing: Fix cpu buffers unavailable due to 'record_disabled' missed
    
    [ Upstream commit b71645d6af10196c46cbe3732de2ea7d36b3ff6d ]
    
    Trace ring buffer can no longer record anything after executing
    following commands at the shell prompt:
    
      # cd /sys/kernel/tracing
      # cat tracing_cpumask
      fff
      # echo 0 > tracing_cpumask
      # echo 1 > snapshot
      # echo fff > tracing_cpumask
      # echo 1 > tracing_on
      # echo "hello world" > trace_marker
      -bash: echo: write error: Bad file descriptor
    
    The root cause is that:
      1. After `echo 0 > tracing_cpumask`, 'record_disabled' of cpu buffers
         in 'tr->array_buffer.buffer' became 1 (see tracing_set_cpumask());
      2. After `echo 1 > snapshot`, 'tr->array_buffer.buffer' is swapped
         with 'tr->max_buffer.buffer', then the 'record_disabled' became 0
         (see update_max_tr());
      3. After `echo fff > tracing_cpumask`, the 'record_disabled' become -1;
    Then array_buffer and max_buffer are both unavailable due to value of
    'record_disabled' is not 0.
    
    To fix it, enable or disable both array_buffer and max_buffer at the same
    time in tracing_set_cpumask().
    
    Link: https://lkml.kernel.org/r/20230805033816.3284594-2-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <vnagarnaik@google.com>
    Cc: <shuah@kernel.org>
    Fixes: 71babb2705e2 ("tracing: change CPU ring buffer state from tracing_cpumask")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdf5804d74750f53a823d613a4f1afac8c265087
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jul 20 11:44:38 2023 +0000

    can: raw: fix lockdep issue in raw_release()
    
    [ Upstream commit 11c9027c983e9e4b408ee5613b6504d24ebd85be ]
    
    syzbot complained about a lockdep issue [1]
    
    Since raw_bind() and raw_setsockopt() first get RTNL
    before locking the socket, we must adopt the same order in raw_release()
    
    [1]
    WARNING: possible circular locking dependency detected
    6.5.0-rc1-syzkaller-00192-g78adb4bcf99e #0 Not tainted
    ------------------------------------------------------
    syz-executor.0/14110 is trying to acquire lock:
    ffff88804e4b6130 (sk_lock-AF_CAN){+.+.}-{0:0}, at: lock_sock include/net/sock.h:1708 [inline]
    ffff88804e4b6130 (sk_lock-AF_CAN){+.+.}-{0:0}, at: raw_bind+0xb1/0xab0 net/can/raw.c:435
    
    but task is already holding lock:
    ffffffff8e3df368 (rtnl_mutex){+.+.}-{3:3}, at: raw_bind+0xa7/0xab0 net/can/raw.c:434
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (rtnl_mutex){+.+.}-{3:3}:
    __mutex_lock_common kernel/locking/mutex.c:603 [inline]
    __mutex_lock+0x181/0x1340 kernel/locking/mutex.c:747
    raw_release+0x1c6/0x9b0 net/can/raw.c:391
    __sock_release+0xcd/0x290 net/socket.c:654
    sock_close+0x1c/0x20 net/socket.c:1386
    __fput+0x3fd/0xac0 fs/file_table.c:384
    task_work_run+0x14d/0x240 kernel/task_work.c:179
    resume_user_mode_work include/linux/resume_user_mode.h:49 [inline]
    exit_to_user_mode_loop kernel/entry/common.c:171 [inline]
    exit_to_user_mode_prepare+0x210/0x240 kernel/entry/common.c:204
    __syscall_exit_to_user_mode_work kernel/entry/common.c:286 [inline]
    syscall_exit_to_user_mode+0x1d/0x50 kernel/entry/common.c:297
    do_syscall_64+0x44/0xb0 arch/x86/entry/common.c:86
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    -> #0 (sk_lock-AF_CAN){+.+.}-{0:0}:
    check_prev_add kernel/locking/lockdep.c:3142 [inline]
    check_prevs_add kernel/locking/lockdep.c:3261 [inline]
    validate_chain kernel/locking/lockdep.c:3876 [inline]
    __lock_acquire+0x2e3d/0x5de0 kernel/locking/lockdep.c:5144
    lock_acquire kernel/locking/lockdep.c:5761 [inline]
    lock_acquire+0x1ae/0x510 kernel/locking/lockdep.c:5726
    lock_sock_nested+0x3a/0xf0 net/core/sock.c:3492
    lock_sock include/net/sock.h:1708 [inline]
    raw_bind+0xb1/0xab0 net/can/raw.c:435
    __sys_bind+0x1ec/0x220 net/socket.c:1792
    __do_sys_bind net/socket.c:1803 [inline]
    __se_sys_bind net/socket.c:1801 [inline]
    __x64_sys_bind+0x72/0xb0 net/socket.c:1801
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    other info that might help us debug this:
    
    Possible unsafe locking scenario:
    
    CPU0 CPU1
    ---- ----
    lock(rtnl_mutex);
            lock(sk_lock-AF_CAN);
            lock(rtnl_mutex);
    lock(sk_lock-AF_CAN);
    
    *** DEADLOCK ***
    
    1 lock held by syz-executor.0/14110:
    
    stack backtrace:
    CPU: 0 PID: 14110 Comm: syz-executor.0 Not tainted 6.5.0-rc1-syzkaller-00192-g78adb4bcf99e #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/03/2023
    Call Trace:
    <TASK>
    __dump_stack lib/dump_stack.c:88 [inline]
    dump_stack_lvl+0xd9/0x1b0 lib/dump_stack.c:106
    check_noncircular+0x311/0x3f0 kernel/locking/lockdep.c:2195
    check_prev_add kernel/locking/lockdep.c:3142 [inline]
    check_prevs_add kernel/locking/lockdep.c:3261 [inline]
    validate_chain kernel/locking/lockdep.c:3876 [inline]
    __lock_acquire+0x2e3d/0x5de0 kernel/locking/lockdep.c:5144
    lock_acquire kernel/locking/lockdep.c:5761 [inline]
    lock_acquire+0x1ae/0x510 kernel/locking/lockdep.c:5726
    lock_sock_nested+0x3a/0xf0 net/core/sock.c:3492
    lock_sock include/net/sock.h:1708 [inline]
    raw_bind+0xb1/0xab0 net/can/raw.c:435
    __sys_bind+0x1ec/0x220 net/socket.c:1792
    __do_sys_bind net/socket.c:1803 [inline]
    __se_sys_bind net/socket.c:1801 [inline]
    __x64_sys_bind+0x72/0xb0 net/socket.c:1801
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7fd89007cb29
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fd890d2a0c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000031
    RAX: ffffffffffffffda RBX: 00007fd89019bf80 RCX: 00007fd89007cb29
    RDX: 0000000000000010 RSI: 0000000020000040 RDI: 0000000000000003
    RBP: 00007fd8900c847a R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 000000000000000b R14: 00007fd89019bf80 R15: 00007ffebf8124f8
    </TASK>
    
    Fixes: ee8b94c8510c ("can: raw: fix receiver memory leak")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Ziyang Xuan <william.xuanziyang@huawei.com>
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: stable@vger.kernel.org
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Link: https://lore.kernel.org/all/20230720114438.172434-1-edumazet@google.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 278fccf587dd09fa9bbb76f244e176b03bdd6bd4
Author: Taimur Hassan <syed.hassan@amd.com>
Date:   Tue Jun 20 17:00:28 2023 -0400

    drm/amd/display: check TG is non-null before checking if enabled
    
    [ Upstream commit 5a25cefc0920088bb9afafeb80ad3dcd84fe278b ]
    
    [Why & How]
    If there is no TG allocation we can dereference a NULL pointer when
    checking if the TG is enabled.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Taimur Hassan <syed.hassan@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a955e6a0e39d33519ea16ff3b5b884e91a0fcc75
Author: Josip Pavic <Josip.Pavic@amd.com>
Date:   Thu Mar 24 12:08:43 2022 -0400

    drm/amd/display: do not wait for mpc idle if tg is disabled
    
    [ Upstream commit 2513ed4f937999c0446fd824f7564f76b697d722 ]
    
    [Why]
    When booting, the driver waits for the MPC idle bit to be set as part of
    pipe initialization. However, on some systems this occurs before OTG is
    enabled, and since the MPC idle bit won't be set until the vupdate
    signal occurs (which requires OTG to be enabled), this never happens and
    the wait times out. This can add hundreds of milliseconds to the boot
    time.
    
    [How]
    Do not wait for mpc idle if tg is disabled
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Signed-off-by: Josip Pavic <Josip.Pavic@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: 5a25cefc0920 ("drm/amd/display: check TG is non-null before checking if enabled")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0bd4f0c60b4c86642f1cfbefc712bfd59734420
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Tue Jul 11 09:17:37 2023 +0800

    can: raw: fix receiver memory leak
    
    [ Upstream commit ee8b94c8510ce64afe0b87ef548d23e00915fb10 ]
    
    Got kmemleak errors with the following ltp can_filter testcase:
    
    for ((i=1; i<=100; i++))
    do
            ./can_filter &
            sleep 0.1
    done
    
    ==============================================================
    [<00000000db4a4943>] can_rx_register+0x147/0x360 [can]
    [<00000000a289549d>] raw_setsockopt+0x5ef/0x853 [can_raw]
    [<000000006d3d9ebd>] __sys_setsockopt+0x173/0x2c0
    [<00000000407dbfec>] __x64_sys_setsockopt+0x61/0x70
    [<00000000fd468496>] do_syscall_64+0x33/0x40
    [<00000000b7e47d51>] entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    It's a bug in the concurrent scenario of unregister_netdevice_many()
    and raw_release() as following:
    
                 cpu0                                        cpu1
    unregister_netdevice_many(can_dev)
      unlist_netdevice(can_dev) // dev_get_by_index() return NULL after this
      net_set_todo(can_dev)
                                                    raw_release(can_socket)
                                                      dev = dev_get_by_index(, ro->ifindex); // dev == NULL
                                                      if (dev) { // receivers in dev_rcv_lists not free because dev is NULL
                                                        raw_disable_allfilters(, dev, );
                                                        dev_put(dev);
                                                      }
                                                      ...
                                                      ro->bound = 0;
                                                      ...
    
    call_netdevice_notifiers(NETDEV_UNREGISTER, )
      raw_notify(, NETDEV_UNREGISTER, )
        if (ro->bound) // invalid because ro->bound has been set 0
          raw_disable_allfilters(, dev, ); // receivers in dev_rcv_lists will never be freed
    
    Add a net_device pointer member in struct raw_sock to record bound
    can_dev, and use rtnl_lock to serialize raw_socket members between
    raw_bind(), raw_release(), raw_setsockopt() and raw_notify(). Use
    ro->dev to decide whether to free receivers in dev_rcv_lists.
    
    Fixes: 8d0caedb7596 ("can: bcm/raw/isotp: use per module netdevice notifier")
    Reviewed-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Link: https://lore.kernel.org/all/20230711011737.1969582-1-william.xuanziyang@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b832174b7f89df3ebab02f5b485d00127a0e1a6e
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Tue Jun 6 21:59:27 2023 +0800

    jbd2: fix a race when checking checkpoint buffer busy
    
    [ Upstream commit 46f881b5b1758dc4a35fba4a643c10717d0cf427 ]
    
    Before removing checkpoint buffer from the t_checkpoint_list, we have to
    check both BH_Dirty and BH_Lock bits together to distinguish buffers
    have not been or were being written back. But __cp_buffer_busy() checks
    them separately, it first check lock state and then check dirty, the
    window between these two checks could be raced by writing back
    procedure, which locks buffer and clears buffer dirty before I/O
    completes. So it cannot guarantee checkpointing buffers been written
    back to disk if some error happens later. Finally, it may clean
    checkpoint transactions and lead to inconsistent filesystem.
    
    jbd2_journal_forget() and __journal_try_to_free_buffer() also have the
    same problem (journal_unmap_buffer() escape from this issue since it's
    running under the buffer lock), so fix them through introducing a new
    helper to try holding the buffer lock and remove really clean buffer.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217490
    Cc: stable@vger.kernel.org
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230606135928.434610-6-yi.zhang@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c31bb2684f8035beca0275349d19d679b679ffb
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Tue Jun 6 21:59:25 2023 +0800

    jbd2: remove journal_clean_one_cp_list()
    
    [ Upstream commit b98dba273a0e47dbfade89c9af73c5b012a4eabb ]
    
    journal_clean_one_cp_list() and journal_shrink_one_cp_list() are almost
    the same, so merge them into journal_shrink_one_cp_list(), remove the
    nr_to_scan parameter, always scan and try to free the whole checkpoint
    list.
    
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230606135928.434610-4-yi.zhang@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 46f881b5b175 ("jbd2: fix a race when checking checkpoint buffer busy")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d91783e6864a1056d6f3b9ee66b073e1a25b9596
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Tue Jun 6 21:59:24 2023 +0800

    jbd2: remove t_checkpoint_io_list
    
    [ Upstream commit be22255360f80d3af789daad00025171a65424a5 ]
    
    Since t_checkpoint_io_list was stop using in jbd2_log_do_checkpoint()
    now, it's time to remove the whole t_checkpoint_io_list logic.
    
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230606135928.434610-3-yi.zhang@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 46f881b5b175 ("jbd2: fix a race when checking checkpoint buffer busy")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0ab49e7a758b488b2090171a75d50735c0876f6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jul 3 13:24:30 2023 +0200

    ALSA: pcm: Fix potential data race at PCM memory allocation helpers
    
    [ Upstream commit bd55842ed998a622ba6611fe59b3358c9f76773d ]
    
    The PCM memory allocation helpers have a sanity check against too many
    buffer allocations.  However, the check is performed without a proper
    lock and the allocation isn't serialized; this allows user to allocate
    more memories than predefined max size.
    
    Practically seen, this isn't really a big problem, as it's more or
    less some "soft limit" as a sanity check, and it's not possible to
    allocate unlimitedly.  But it's still better to address this for more
    consistent behavior.
    
    The patch covers the size check in do_alloc_pages() with the
    card->memory_mutex, and increases the allocated size there for
    preventing the further overflow.  When the actual allocation fails,
    the size is decreased accordingly.
    
    Reported-by: BassCheck <bass@buaa.edu.cn>
    Reported-by: Tuo Li <islituo@gmail.com>
    Link: https://lore.kernel.org/r/CADm8Tek6t0WedK+3Y6rbE5YEt19tML8BUL45N2ji4ZAz1KcN_A@mail.gmail.com
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230703112430.30634-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e56d380daa9655d8d6cca4948a48c9797d3fa1d
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Sun Jun 25 00:16:49 2023 +0800

    fbdev: fix potential OOB read in fast_imageblit()
    
    [ Upstream commit c2d22806aecb24e2de55c30a06e5d6eb297d161d ]
    
    There is a potential OOB read at fast_imageblit, for
    "colortab[(*src >> 4)]" can become a negative value due to
    "const char *s = image->data, *src".
    This change makes sure the index for colortab always positive
    or zero.
    
    Similar commit:
    https://patchwork.kernel.org/patch/11746067
    
    Potential bug report:
    https://groups.google.com/g/syzkaller-bugs/c/9ubBXKeKXf4/m/k-QXy4UgAAAJ
    
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14163f4a4fa64226057f76e45637229caccd8970
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Sun Mar 13 20:29:51 2022 +0100

    fbdev: Fix sys_imageblit() for arbitrary image widths
    
    [ Upstream commit 61bfcb6a3b981e8f19e044ac8c3de6edbe6caf70 ]
    
    Commit 6f29e04938bf ("fbdev: Improve performance of sys_imageblit()")
    broke sys_imageblit() for image width that are not aligned to 8-bit
    boundaries. Fix this by handling the trailing pixels on each line
    separately. The performance improvements in the original commit do not
    regress by this change.
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Fixes: 6f29e04938bf ("fbdev: Improve performance of sys_imageblit()")
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Thomas Zimmermann <tzimmermann@suse.de>
    Cc: Javier Martinez Canillas <javierm@redhat.com>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220313192952.12058-2-tzimmermann@suse.de
    Stable-dep-of: c2d22806aecb ("fbdev: fix potential OOB read in fast_imageblit()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b60bd9081a9eeca1903a15a13cbffbaf327381b
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Wed Feb 23 20:38:01 2022 +0100

    fbdev: Improve performance of sys_imageblit()
    
    [ Upstream commit 6f29e04938bf509fccfad490a74284cf158891ce ]
    
    Improve the performance of sys_imageblit() by manually unrolling
    the inner blitting loop and moving some invariants out. The compiler
    failed to do this automatically. The resulting binary code was even
    slower than the cfb_imageblit() helper, which uses the same algorithm,
    but operates on I/O memory.
    
    A microbenchmark measures the average number of CPU cycles
    for sys_imageblit() after a stabilizing period of a few minutes
    (i7-4790, FullHD, simpledrm, kernel with debugging). The value
    for CFB is given as a reference.
    
      sys_imageblit(), new: 25934 cycles
      sys_imageblit(), old: 35944 cycles
      cfb_imageblit():      30566 cycles
    
    In the optimized case, sys_imageblit() is now ~30% faster than before
    and ~20% faster than cfb_imageblit().
    
    v2:
            * move switch out of inner loop (Gerd)
            * remove test for alignment of dst1 (Sam)
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223193804.18636-3-tzimmermann@suse.de
    Stable-dep-of: c2d22806aecb ("fbdev: fix potential OOB read in fast_imageblit()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 166f0bf4560bd31108cffc0a7a7bc5ea4666be0c
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Wed Jun 7 13:51:22 2023 +0800

    MIPS: cpu-features: Use boot_cpu_type for CPU type based features
    
    [ Upstream commit 5487a7b60695a92cf998350e4beac17144c91fcd ]
    
    Some CPU feature macros were using current_cpu_type to mark feature
    availability.
    
    However current_cpu_type will use smp_processor_id, which is prohibited
    under preemptable context.
    
    Since those features are all uniform on all CPUs in a SMP system, use
    boot_cpu_type instead of current_cpu_type to fix preemptable kernel.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f106e97409d40384f26199b22cafae3ef7034d0
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Tue Apr 4 10:33:44 2023 +0100

    MIPS: cpu-features: Enable octeon_cache by cpu_type
    
    [ Upstream commit f641519409a73403ee6612b8648b95a688ab85c2 ]
    
    cpu_has_octeon_cache was tied to 0 for generic cpu-features,
    whith this generic kernel built for octeon CPU won't boot.
    
    Just enable this flag by cpu_type. It won't hurt orther platforms
    because compiler will eliminate the code path on other processors.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Stable-dep-of: 5487a7b60695 ("MIPS: cpu-features: Use boot_cpu_type for CPU type based features")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1d0b239f97432402bb470e58717acd07dad98a4
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed May 24 12:02:04 2023 -0400

    fs: dlm: fix mismatch of plock results from userspace
    
    [ Upstream commit 57e2c2f2d94cfd551af91cedfa1af6d972487197 ]
    
    When a waiting plock request (F_SETLKW) is sent to userspace
    for processing (dlm_controld), the result is returned at a
    later time. That result could be incorrectly matched to a
    different waiting request in cases where the owner field is
    the same (e.g. different threads in a process.) This is fixed
    by comparing all the properties in the request and reply.
    
    The results for non-waiting plock requests are now matched
    based on list order because the results are returned in the
    same order they were sent.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77d334c446812e17236b32aca35322d674f2165d
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed Jun 22 14:45:08 2022 -0400

    fs: dlm: use dlm_plock_info for do_unlock_close
    
    [ Upstream commit 4d413ae9ced4180c0e2114553c3a7560b509b0f8 ]
    
    This patch refactors do_unlock_close() by using only struct dlm_plock_info
    as a parameter.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9a33cc7d9465034178ef8c626bdd544a1df747e
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed Jun 22 14:45:05 2022 -0400

    fs: dlm: change plock interrupted message to debug again
    
    [ Upstream commit ea06d4cabf529eefbe7e89e3a8325f1f89355ccd ]
    
    This patch reverses the commit bcfad4265ced ("dlm: improve plock logging
    if interrupted") by moving it to debug level and notifying the user an op
    was removed.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ac088841ffb2e80abdc52416232dd078d7957e1
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed Jun 22 14:45:06 2022 -0400

    fs: dlm: add pid to debug log
    
    [ Upstream commit 19d7ca051d303622c423b4cb39e6bde5d177328b ]
    
    This patch adds the pid information which requested the lock operation
    to the debug log output.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df9c842ab0a4b701189c1021982ca3f592e5dcee
Author: Jakob Koschel <jakobkoschel@gmail.com>
Date:   Wed Apr 6 14:05:31 2022 -0400

    dlm: replace usage of found with dedicated list iterator variable
    
    [ Upstream commit dc1acd5c94699389a9ed023e94dd860c846ea1f6 ]
    
    To move the list iterator variable into the list_for_each_entry_*()
    macro in the future it should be avoided to use the list iterator
    variable after the loop body.
    
    To *never* use the list iterator variable after the loop it was
    concluded to use a separate iterator variable instead of a
    found boolean [1].
    
    This removes the need to use a found variable and simply checking if
    the variable was set, can determine if the break/goto was hit.
    
    Link: https://lore.kernel.org/all/CAHk-=wgRr_D8CB-D9Kg-c=EHreAsk5SqXPwr9Y7k9sA6cWXJ6w@mail.gmail.com/ [1]
    Signed-off-by: Jakob Koschel <jakobkoschel@gmail.com>
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33e9c610e337ae6f31fa8a3ad169df043140a3cf
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 4 16:06:34 2022 -0400

    dlm: improve plock logging if interrupted
    
    [ Upstream commit bcfad4265cedf3adcac355e994ef9771b78407bd ]
    
    This patch changes the log level if a plock is removed when interrupted
    from debug to info. Additional it signals now that the plock entity was
    removed to let the user know what's happening.
    
    If on a dev_write() a pending plock cannot be find it will signal that
    it might have been removed because wait interruption.
    
    Before this patch there might be a "dev_write no op ..." info message
    and the users can only guess that the plock was removed before because
    the wait interruption. To be sure that is the case we log both messages
    on the same log level.
    
    Let both message be logged on info layer because it should not happened
    a lot and if it happens it should be clear why the op was not found.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9ce077f8b1f731407e6b612b03bba464fd18d9b
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Mon Apr 24 21:15:57 2023 +0200

    PCI: acpiphp: Reassign resources on bridge if necessary
    
    [ Upstream commit 40613da52b13fb21c5566f10b287e0ca8c12c4e9 ]
    
    When using ACPI PCI hotplug, hotplugging a device with large BARs may fail
    if bridge windows programmed by firmware are not large enough.
    
    Reproducer:
      $ qemu-kvm -monitor stdio -M q35  -m 4G \
          -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=on \
          -device id=rp1,pcie-root-port,bus=pcie.0,chassis=4 \
          disk_image
    
     wait till linux guest boots, then hotplug device:
       (qemu) device_add qxl,bus=rp1
    
     hotplug on guest side fails with:
       pci 0000:01:00.0: [1b36:0100] type 00 class 0x038000
       pci 0000:01:00.0: reg 0x10: [mem 0x00000000-0x03ffffff]
       pci 0000:01:00.0: reg 0x14: [mem 0x00000000-0x03ffffff]
       pci 0000:01:00.0: reg 0x18: [mem 0x00000000-0x00001fff]
       pci 0000:01:00.0: reg 0x1c: [io  0x0000-0x001f]
       pci 0000:01:00.0: BAR 0: no space for [mem size 0x04000000]
       pci 0000:01:00.0: BAR 0: failed to assign [mem size 0x04000000]
       pci 0000:01:00.0: BAR 1: no space for [mem size 0x04000000]
       pci 0000:01:00.0: BAR 1: failed to assign [mem size 0x04000000]
       pci 0000:01:00.0: BAR 2: assigned [mem 0xfe800000-0xfe801fff]
       pci 0000:01:00.0: BAR 3: assigned [io  0x1000-0x101f]
       qxl 0000:01:00.0: enabling device (0000 -> 0003)
       Unable to create vram_mapping
       qxl: probe of 0000:01:00.0 failed with error -12
    
    However when using native PCIe hotplug
      '-global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off'
    it works fine, since kernel attempts to reassign unused resources.
    
    Use the same machinery as native PCIe hotplug to (re)assign resources.
    
    Link: https://lore.kernel.org/r/20230424191557.2464760-1-imammedo@redhat.com
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Rafael J. Wysocki <rafael@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cc8645dd3e17771c5ca858fd6277372df07b40d
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Mon Jul 3 14:18:29 2023 -0400

    xprtrdma: Remap Receive buffers after a reconnect
    
    [ Upstream commit 895cedc1791916e8a98864f12b656702fad0bb67 ]
    
    On server-initiated disconnect, rpcrdma_xprt_disconnect() was DMA-
    unmapping the Receive buffers, but rpcrdma_post_recvs() neglected
    to remap them after a new connection had been established. The
    result was immediate failure of the new connection with the Receives
    flushing with LOCAL_PROT_ERR.
    
    Fixes: 671c450b6fe0 ("xprtrdma: Fix oops in Receive handler after device removal")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91a707507e83e2cabe3a6715efa5ea4adcc9db2e
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Tue Jul 25 14:59:30 2023 +0300

    NFSv4: fix out path in __nfs4_get_acl_uncached
    
    [ Upstream commit f4e89f1a6dab4c063fc1e823cc9dddc408ff40cf ]
    
    Another highly rare error case when a page allocating loop (inside
    __nfs4_get_acl_uncached, this time) is not properly unwound on error.
    Since pages array is allocated being uninitialized, need to free only
    lower array indices. NULL checks were useful before commit 62a1573fcf84
    ("NFSv4 fix acl retrieval over krb5i/krb5p mounts") when the array had
    been initialized to zero on stack.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: 62a1573fcf84 ("NFSv4 fix acl retrieval over krb5i/krb5p mounts")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 323b830eebd1c1ad382fb421734fcfa76cca5e61
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Tue Jul 25 14:58:58 2023 +0300

    NFSv4.2: fix error handling in nfs42_proc_getxattr
    
    [ Upstream commit 4e3733fd2b0f677faae21cf838a43faf317986d3 ]
    
    There is a slight issue with error handling code inside
    nfs42_proc_getxattr(). If page allocating loop fails then we free the
    failing page array element which is NULL but __free_page() can't deal with
    NULL args.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: a1f26739ccdc ("NFSv4.2: improve page handling for GETXATTR")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5de0a325c45eb620031385a234dcdd1f37116ba7
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:29 2023 +0200

    objtool/x86: Fix SRSO mess
    
    commit 4ae68b26c3ab5a82aa271e6e9fc9b1a06e1d6b40 upstream.
    
    Objtool --rethunk does two things:
    
     - it collects all (tail) call's of __x86_return_thunk and places them
       into .return_sites. These are typically compiler generated, but
       RET also emits this same.
    
     - it fudges the validation of the __x86_return_thunk symbol; because
       this symbol is inside another instruction, it can't actually find
       the instruction pointed to by the symbol offset and gets upset.
    
    Because these two things pertained to the same symbol, there was no
    pressing need to separate these two separate things.
    
    However, alas, along comes SRSO and more crazy things to deal with
    appeared.
    
    The SRSO patch itself added the following symbol names to identify as
    rethunk:
    
      'srso_untrain_ret', 'srso_safe_ret' and '__ret'
    
    Where '__ret' is the old retbleed return thunk, 'srso_safe_ret' is a
    new similarly embedded return thunk, and 'srso_untrain_ret' is
    completely unrelated to anything the above does (and was only included
    because of that INT3 vs UD2 issue fixed previous).
    
    Clear things up by adding a second category for the embedded instruction
    thing.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121148.704502245@infradead.org
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

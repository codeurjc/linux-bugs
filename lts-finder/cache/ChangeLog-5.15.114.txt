commit 0ab06468cbd149aac0d7f216ec00452ff8c74e0b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue May 30 13:55:33 2023 +0100

    Linux 5.15.114
    
    Link: https://lore.kernel.org/r/20230528190828.358612414@linuxfoundation.org
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 193c59ba72999d325b7c0c68a0dad3757004130f
Author: David Epping <david.epping@missinglinkelectronics.com>
Date:   Tue May 23 17:31:05 2023 +0200

    net: phy: mscc: add VSC8502 to MODULE_DEVICE_TABLE
    
    commit 57fb54ab9f6945e204740b696bd4cee61ee04e5e upstream.
    
    The mscc driver implements support for VSC8502, so its ID should be in
    the MODULE_DEVICE_TABLE for automatic loading.
    
    Signed-off-by: David Epping <david.epping@missinglinkelectronics.com>
    Fixes: d3169863310d ("net: phy: mscc: add support for VSC8502")
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 350b95e86ca9ca093c9f01a7b4eeb34f3bc3f49e
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat May 20 11:48:55 2023 +0200

    3c589_cs: Fix an error handling path in tc589_probe()
    
    commit 640bf95b2c7c2981fb471acdafbd3e0458f8390d upstream.
    
    Should tc589_config() fail, some resources need to be released as already
    done in the remove function.
    
    Fixes: 15b99ac17295 ("[PATCH] pcmcia: add return value to _config() functions")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/d8593ae867b24c79063646e36f9b18b0790107cb.1684575975.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c2fa3e56d95f6dba9cc705c8c815b530e2835a9
Author: Sen Chu <sen.chu@mediatek.com>
Date:   Thu May 18 12:06:46 2023 +0800

    regulator: mt6359: add read check for PMIC MT6359
    
    commit a511637502b1caa135046d0f8fdabd55a31af8ef upstream.
    
    Add hardware version read check for PMIC MT6359
    
    Signed-off-by: Sen Chu <sen.chu@mediatek.com
    Fixes: 4cfc96547512 ("regulator: mt6359: Add support for MT6359P regulator")
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com
    Link: https://lore.kernel.org/r/20230518040646.8730-1-sen.chu@mediatek.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28ebfb74fbf513e0c7cd2674d8c2400ee0220d18
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed May 3 14:12:52 2023 +0100

    firmware: arm_ffa: Set reserved/MBZ fields to zero in the memory descriptors
    
    commit 111a833dc5cbef3d05b2a796a7e23cb7f6ff2192 upstream.
    
    The transmit buffers allocated by the driver can be used to transmit data
    by any messages/commands needing the buffer. However, it is not guaranteed
    to have been zero-ed before every new transmission and hence it will just
    contain residual value from the previous transmission. There are several
    reserved fields in the memory descriptors that must be zero(MBZ). The
    receiver can reject the transmission if any such MBZ fields are non-zero.
    
    While we can set the whole page to zero, it is not optimal as most of the
    fields get initialised to the value required for the current transmission.
    
    So, just set the reserved/MBZ fields to zero in the memory descriptors
    explicitly to honour the requirement and keep the receiver happy.
    
    Fixes: cc2195fe536c ("firmware: arm_ffa: Add support for MEM_* interfaces")
    Reported-by: Marc Bonnici <marc.bonnici@arm.com>
    Link: https://lore.kernel.org/r/20230503131252.12585-1-sudeep.holla@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34b0985ebdfcdb7194368be6a1ac818736ba9c67
Author: Hugo Villeneuve <hvilleneuve@dimonoff.com>
Date:   Mon May 1 13:05:32 2023 -0400

    arm64: dts: imx8mn-var-som: fix PHY detection bug by adding deassert delay
    
    commit f161cea5a20f3aeeb637a88ad1705fc2720b4d58 upstream.
    
    While testing the ethernet interface on a Variscite symphony carrier
    board using an imx8mn SOM with an onboard ADIN1300 PHY (EC hardware
    configuration), the ethernet PHY is not detected.
    
    The ADIN1300 datasheet indicate that the "Management interface
    active (t4)" state is reached at most 5ms after the reset signal is
    deasserted.
    
    The device tree in Variscite custom git repository uses the following
    property:
    
        phy-reset-post-delay = <20>;
    
    Add a new MDIO property 'reset-deassert-us' of 20ms to have the same
    delay inside the ethphy node. Adding this property fixes the problem
    with the PHY detection.
    
    Note that this SOM can also have an Atheros AR8033 PHY. In this case,
    a 1ms deassert delay is sufficient. Add a comment to that effect.
    
    Fixes: ade0176dd8a0 ("arm64: dts: imx8mn-var-som: Add Variscite VAR-SOM-MX8MN System on Module")
    Signed-off-by: Hugo Villeneuve <hvilleneuve@dimonoff.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e755065368000205e6683fa924b2654e99f573b
Author: Shay Drory <shayd@nvidia.com>
Date:   Tue May 2 13:35:11 2023 +0300

    net/mlx5: Devcom, fix error flow in mlx5_devcom_register_device
    
    commit af87194352cad882d787d06fb7efa714acd95427 upstream.
    
    In case devcom allocation is failed, mlx5 is always freeing the priv.
    However, this priv might have been allocated by a different thread,
    and freeing it might lead to use-after-free bugs.
    Fix it by freeing the priv only in case it was allocated by the
    running thread.
    
    Fixes: fadd59fc50d0 ("net/mlx5: Introduce inter-device communication mechanism")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a89a69cea44c159bfb1855936c547c7c33e6eb24
Author: Roi Dayan <roid@nvidia.com>
Date:   Mon May 1 14:37:56 2023 +0300

    net/mlx5: Fix error message when failing to allocate device memory
    
    commit a65735148e0328f80c0f72f9f8d2f609bfcf4aff upstream.
    
    Fix spacing for the error and also the correct error code pointer.
    
    Fixes: c9b9dcb430b3 ("net/mlx5: Move device memory management to mlx5_core")
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8a974bbf4a5387ed7fd4e42f97e6e067a89b827
Author: Yevgeny Kliteynik <kliteyn@nvidia.com>
Date:   Sun Apr 2 17:14:10 2023 +0300

    net/mlx5: DR, Check force-loopback RC QP capability independently from RoCE
    
    commit c7dd225bc224726c22db08e680bf787f60ebdee3 upstream.
    
    SW Steering uses RC QP for writing STEs to ICM. This writingis done in LB
    (loopback), and FL (force-loopback) QP is preferred for performance. FL is
    available when RoCE is enabled or disabled based on RoCE caps.
    This patch adds reading of FL capability from HCA caps in addition to the
    existing reading from RoCE caps, thus fixing the case where we didn't
    have loopback enabled when RoCE was disabled.
    
    Fixes: 7304d603a57a ("net/mlx5: DR, Add support for force-loopback QP")
    Signed-off-by: Itamar Gozlan <igozlan@nvidia.com>
    Signed-off-by: Yevgeny Kliteynik <kliteyn@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e0cc0d502d42fb1eed6a4d39ef26b1257ac9908
Author: Erez Shitrit <erezsh@nvidia.com>
Date:   Thu Mar 9 16:43:15 2023 +0200

    net/mlx5: DR, Fix crc32 calculation to work on big-endian (BE) CPUs
    
    commit 1e5daf5565b61a96e570865091589afc9156e3d3 upstream.
    
    When calculating crc for hash index we use the function crc32 that
    calculates for little-endian (LE) arch.
    Then we convert it to network endianness using htonl(), but it's wrong
    to do the conversion in BE archs since the crc32 value is already LE.
    
    The solution is to switch the bytes from the crc result for all types
    of arc.
    
    Fixes: 40416d8ede65 ("net/mlx5: DR, Replace CRC32 implementation to use kernel lib")
    Signed-off-by: Erez Shitrit <erezsh@nvidia.com>
    Reviewed-by: Alex Vesker <valex@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 792a8233fc0124e6c7796a303e92336e2ff6b331
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue May 16 18:59:35 2023 -0700

    net/mlx5e: do as little as possible in napi poll when budget is 0
    
    commit afbed3f74830163f9559579dee382cac3cff82da upstream.
    
    NAPI gets called with budget of 0 from netpoll, which has interrupts
    disabled. We should try to free some space on Tx rings and nothing
    else.
    
    Specifically do not try to handle XDP TX or try to refill Rx buffers -
    we can't use the page pool from IRQ context. Don't check if IRQs moved,
    either, that makes no sense in netpoll. Netpoll calls _all_ the rings
    from whatever CPU it happens to be invoked on.
    
    In general do as little as possible, the work quickly adds up when
    there's tens of rings to poll.
    
    The immediate stack trace I was seeing is:
    
        __do_softirq+0xd1/0x2c0
        __local_bh_enable_ip+0xc7/0x120
        </IRQ>
        <TASK>
        page_pool_put_defragged_page+0x267/0x320
        mlx5e_free_xdpsq_desc+0x99/0xd0
        mlx5e_poll_xdpsq_cq+0x138/0x3b0
        mlx5e_napi_poll+0xc3/0x8b0
        netpoll_poll_dev+0xce/0x150
    
    AFAIU page pool takes a BH lock, releases it and since BH is now
    enabled tries to run softirqs.
    
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Fixes: 60bbf7eeef10 ("mlx5: use page_pool for xdp_return_frame call")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdf8f33e7d0319ec64a1ca881ecfada4ac338412
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon May 15 13:32:37 2023 +0300

    platform/mellanox: mlxbf-pmc: fix sscanf() error checking
    
    commit 95e4b25192e9238fd2dbe85d96dd2f8fd1ce9d14 upstream.
    
    The sscanf() function never returns negatives.  It returns the number of
    items successfully read.
    
    Fixes: 1a218d312e65 ("platform/mellanox: mlxbf-pmc: Add Mellanox BlueField PMC driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/4ccdfd28-099b-40bf-8d77-ad4ea2e76b93@kili.mountain
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5ab5447d91015b27a084418eec958771a2460b1
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat May 20 10:30:17 2023 +0200

    forcedeth: Fix an error handling path in nv_probe()
    
    commit 5b17a4971d3b2a073f4078dd65331efbe35baa2d upstream.
    
    If an error occures after calling nv_mgmt_acquire_sema(), it should be
    undone with a corresponding nv_mgmt_release_sema() call.
    
    Add it in the error handling path of the probe as already done in the
    remove function.
    
    Fixes: cac1c52c3621 ("forcedeth: mgmt unit interface")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Zhu Yanjun <zyjzyj2000@gmail.com>
    Link: https://lore.kernel.org/r/355e9a7d351b32ad897251b6f81b5886fcdc6766.1684571393.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae7c4ec4265504bf5cb82299fe5f3492467e7ad7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu May 18 16:03:00 2023 -0400

    sctp: fix an issue that plpmtu can never go to complete state
    
    commit 6ca328e985cd995dfd1d5de44046e6074f853fbb upstream.
    
    When doing plpmtu probe, the probe size is growing every time when it
    receives the ACK during the Search state until the probe fails. When
    the failure occurs, pl.probe_high is set and it goes to the Complete
    state.
    
    However, if the link pmtu is huge, like 65535 in loopback_dev, the probe
    eventually keeps using SCTP_MAX_PLPMTU as the probe size and never fails.
    Because of that, pl.probe_high can not be set, and the plpmtu probe can
    never go to the Complete state.
    
    Fix it by setting pl.probe_high to SCTP_MAX_PLPMTU when the probe size
    grows to SCTP_MAX_PLPMTU in sctp_transport_pl_recv(). Also, not allow
    the probe size greater than SCTP_MAX_PLPMTU in the Complete state.
    
    Fixes: b87641aff9e7 ("sctp: do state transition when a probe succeeds on HB ACK recv path")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee553694be4287f2bf5adc1e67185343e4d6f921
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Fri May 19 22:17:07 2023 +0200

    ASoC: Intel: Skylake: Fix declaration of enum skl_ch_cfg
    
    commit 95109657471311601b98e71f03d0244f48dc61bb upstream.
    
    Constant 'C4_CHANNEL' does not exist on the firmware side. Value 0xC is
    reserved for 'C7_1' instead.
    
    Fixes: 04afbbbb1cba ("ASoC: Intel: Skylake: Update the topology interface structure")
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Link: https://lore.kernel.org/r/20230519201711.4073845-4-amadeuszx.slawinski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aafa5019e2a383776522f031c07f87cc6dd9363d
Author: Vernon Lovejoy <vlovejoy@redhat.com>
Date:   Fri May 12 12:42:32 2023 +0200

    x86/show_trace_log_lvl: Ensure stack pointer is aligned, again
    
    commit 2e4be0d011f21593c6b316806779ba1eba2cd7e0 upstream.
    
    The commit e335bb51cc15 ("x86/unwind: Ensure stack pointer is aligned")
    tried to align the stack pointer in show_trace_log_lvl(), otherwise the
    "stack < stack_info.end" check can't guarantee that the last read does
    not go past the end of the stack.
    
    However, we have the same problem with the initial value of the stack
    pointer, it can also be unaligned. So without this patch this trivial
    kernel module
    
            #include <linux/module.h>
    
            static int init(void)
            {
                    asm volatile("sub    $0x4,%rsp");
                    dump_stack();
                    asm volatile("add    $0x4,%rsp");
    
                    return -EAGAIN;
            }
    
            module_init(init);
            MODULE_LICENSE("GPL");
    
    crashes the kernel.
    
    Fixes: e335bb51cc15 ("x86/unwind: Ensure stack pointer is aligned")
    Signed-off-by: Vernon Lovejoy <vlovejoy@redhat.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Link: https://lore.kernel.org/r/20230512104232.GA10227@redhat.com
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90314394a16dc4d82a281e13d51bb1dbcb899d6a
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Wed May 3 18:11:35 2023 +0300

    xen/pvcalls-back: fix double frees with pvcalls_new_active_socket()
    
    commit 8fafac202d18230bb9926bda48e563fd2cce2a4f upstream.
    
    In the pvcalls_new_active_socket() function, most error paths call
    pvcalls_back_release_active(fedata->dev, fedata, map) which calls
    sock_release() on "sock".  The bug is that the caller also frees sock.
    
    Fix this by making every error path in pvcalls_new_active_socket()
    release the sock, and don't free it in the caller.
    
    Fixes: 5db4d286a8ef ("xen/pvcalls: implement connect command")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/e5f98dc2-0305-491f-a860-71bbd1398a2f@kili.mountain
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff151810fb952865047bb5e596540a3a89df6cf5
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Apr 21 13:42:41 2023 +0300

    coresight: Fix signedness bug in tmc_etr_buf_insert_barrier_packet()
    
    commit f67bc15e526bb9920683ad6c1891ff9e08981335 upstream.
    
    This code generates a Smatch warning:
    
        drivers/hwtracing/coresight/coresight-tmc-etr.c:947 tmc_etr_buf_insert_barrier_packet()
        error: uninitialized symbol 'bufp'.
    
    The problem is that if tmc_sg_table_get_data() returns -EINVAL, then
    when we test if "len < CORESIGHT_BARRIER_PKT_SIZE", the negative "len"
    value is type promoted to a high unsigned long value which is greater
    than CORESIGHT_BARRIER_PKT_SIZE.  Fix this bug by adding an explicit
    check for error codes.
    
    Fixes: 75f4e3619fe2 ("coresight: tmc-etr: Add transparent buffer management")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/7d33e244-d8b9-4c27-9653-883a13534b01@kili.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24cf1147437691104441d97fa98da87b875f96d0
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Fri May 12 10:19:34 2023 +0200

    regulator: pca9450: Fix BUCK2 enable_mask
    
    commit d67dada3e2524514b09496b9ee1df22d4507a280 upstream.
    
    This fixes a copy & paste error.
    No functional change intended, BUCK1_ENMODE_MASK equals BUCK2_ENMODE_MASK.
    
    Fixes: 0935ff5f1f0a ("regulator: pca9450: add pca9450 pmic driver")
    Originally-from: Robin Gong <yibin.gong@nxp.com
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com
    Reviewed-by: Frieder Schrempf <frieder.schrempf@kontron.de
    Link: https://lore.kernel.org/r/20230512081935.2396180-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd41ec23503f83a761f961a32c7df2749771bae7
Author: Hao Ge <gehao@kylinos.cn>
Date:   Mon Apr 24 13:18:35 2023 +0800

    fs: fix undefined behavior in bit shift for SB_NOUSER
    
    commit f15afbd34d8fadbd375f1212e97837e32bc170cc upstream.
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. It was spotted by UBSAN.
    
    So let's just fix this by using the BIT() helper for all SB_* flags.
    
    Fixes: e462ec50cb5f ("VFS: Differentiate mount flags (MS_*) from internal superblock flags")
    Signed-off-by: Hao Ge <gehao@kylinos.cn>
    Message-Id: <20230424051835.374204-1-gehao@kylinos.cn>
    [brauner@kernel.org: use BIT() for all SB_* flags]
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2f65991097a62efbdb2bed3c06fc86b08c9593b
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Apr 20 16:06:03 2023 +0100

    firmware: arm_ffa: Fix FFA device names for logical partitions
    
    commit 19b8766459c41c6f318f8a548cc1c66dffd18363 upstream.
    
    Each physical partition can provide multiple services each with UUID.
    Each such service can be presented as logical partition with a unique
    combination of VM ID and UUID. The number of distinct UUID in a system
    will be less than or equal to the number of logical partitions.
    
    However, currently it fails to register more than one logical partition
    or service within a physical partition as the device name contains only
    VM ID while both VM ID and UUID are maintained in the partition information.
    The kernel complains with the below message:
    
      | sysfs: cannot create duplicate filename '/devices/arm-ffa-8001'
      | CPU: 1 PID: 1 Comm: swapper/0 Not tainted 6.3.0-rc7 #8
      | Hardware name: FVP Base RevC (DT)
      | Call trace:
      |  dump_backtrace+0xf8/0x118
      |  show_stack+0x18/0x24
      |  dump_stack_lvl+0x50/0x68
      |  dump_stack+0x18/0x24
      |  sysfs_create_dir_ns+0xe0/0x13c
      |  kobject_add_internal+0x220/0x3d4
      |  kobject_add+0x94/0x100
      |  device_add+0x144/0x5d8
      |  device_register+0x20/0x30
      |  ffa_device_register+0x88/0xd8
      |  ffa_setup_partitions+0x108/0x1b8
      |  ffa_init+0x2ec/0x3a4
      |  do_one_initcall+0xcc/0x240
      |  do_initcall_level+0x8c/0xac
      |  do_initcalls+0x54/0x94
      |  do_basic_setup+0x1c/0x28
      |  kernel_init_freeable+0x100/0x16c
      |  kernel_init+0x20/0x1a0
      |  ret_from_fork+0x10/0x20
      | kobject_add_internal failed for arm-ffa-8001 with -EEXIST, don't try to
      | register things with the same name in the same directory.
      | arm_ffa arm-ffa: unable to register device arm-ffa-8001 err=-17
      | ARM FF-A: ffa_setup_partitions: failed to register partition ID 0x8001
    
    By virtue of being random enough to avoid collisions when generated in a
    distributed system, there is no way to compress UUID keys to the number
    of bits required to identify each. We can eliminate '-' in the name but
    it is not worth eliminating 4 bytes and add unnecessary logic for doing
    that. Also v1.0 doesn't provide the UUID of the partitions which makes
    it hard to use the same for the device name.
    
    So to keep it simple, let us alloc an ID using ida_alloc() and append the
    same to "arm-ffa" to make up a unique device name. Also stash the id value
    in ffa_dev to help freeing the ID later when the device is destroyed.
    
    Fixes: e781858488b9 ("firmware: arm_ffa: Add initial FFA bus support for device enumeration")
    Reported-by: Lucian Paul-Trifu <lucian.paul-trifu@arm.com>
    Link: https://lore.kernel.org/r/20230419-ffa_fixes_6-4-v2-3-d9108e43a176@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a26c62625c59b8dd7f52c518cb4f60a63470a0e
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Apr 20 16:06:01 2023 +0100

    firmware: arm_ffa: Check if ffa_driver remove is present before executing
    
    commit b71b55248a580e9c9befc4ae060539f1f8e477da upstream.
    
    Currently ffa_drv->remove() is called unconditionally from
    ffa_device_remove(). Since the driver registration doesn't check for it
    and allows it to be registered without .remove callback, we need to check
    for the presence of it before executing it from ffa_device_remove() to
    above a NULL pointer dereference like the one below:
    
      | Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
      | Mem abort info:
      |   ESR = 0x0000000086000004
      |   EC = 0x21: IABT (current EL), IL = 32 bits
      |   SET = 0, FnV = 0
      |   EA = 0, S1PTW = 0
      |   FSC = 0x04: level 0 translation fault
      | user pgtable: 4k pages, 48-bit VAs, pgdp=0000000881cc8000
      | [0000000000000000] pgd=0000000000000000, p4d=0000000000000000
      | Internal error: Oops: 0000000086000004 [#1] PREEMPT SMP
      | CPU: 3 PID: 130 Comm: rmmod Not tainted 6.3.0-rc7 #6
      | Hardware name: FVP Base RevC (DT)
      | pstate: 63402809 (nZCv daif +PAN -UAO +TCO +DIT -SSBS BTYPE=-c)
      | pc : 0x0
      | lr : ffa_device_remove+0x20/0x2c
      | Call trace:
      |  0x0
      |  device_release_driver_internal+0x16c/0x260
      |  driver_detach+0x90/0xd0
      |  bus_remove_driver+0xdc/0x11c
      |  driver_unregister+0x30/0x54
      |  ffa_driver_unregister+0x14/0x20
      |  cleanup_module+0x18/0xeec
      |  __arm64_sys_delete_module+0x234/0x378
      |  invoke_syscall+0x40/0x108
      |  el0_svc_common+0xb4/0xf0
      |  do_el0_svc+0x30/0xa4
      |  el0_svc+0x2c/0x7c
      |  el0t_64_sync_handler+0x84/0xf0
      |  el0t_64_sync+0x190/0x194
    
    Fixes: 244f5d597e1e ("firmware: arm_ffa: Add missing remove callback to ffa_bus_type")
    Link: https://lore.kernel.org/r/20230419-ffa_fixes_6-4-v2-1-d9108e43a176@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f64567bd95662f346d0cb9e1cf4d6cf791a2892c
Author: Daisuke Nojiri <dnojiri@chromium.org>
Date:   Mon Apr 24 11:25:58 2023 -0700

    power: supply: sbs-charger: Fix INHIBITED bit for Status reg
    
    commit b2f2a3c9800208b0db2c2e34b05323757117faa2 upstream.
    
    CHARGE_INHIBITED bit position of the ChargerStatus register is actually
    0 not 1. This patch corrects it.
    
    Fixes: feb583e37f8a8 ("power: supply: add sbs-charger driver")
    Signed-off-by: Daisuke Nojiri <dnojiri@chromium.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71a9f146b3dc44bf420b19208bab93d98487517b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:35 2023 +0200

    power: supply: bq27xxx: Add cache parameter to bq27xxx_battery_current_and_status()
    
    commit 35092c5819f8c5acc7bafe3fdbb13d6307c4f5e1 upstream.
    
    Add a cache parameter to bq27xxx_battery_current_and_status() so that
    it can optionally use cached flags instead of re-reading them itself.
    
    This is a preparation patch for making bq27xxx_battery_update() check
    the status and have it call power_supply_changed() on status changes.
    
    Fixes: 297a533b3e62 ("bq27x00: Cache battery registers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e98e5bebfcafc75a7b41192a607dfea5c1268afa
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:34 2023 +0200

    power: supply: bq27xxx: Fix poll_interval handling and races on remove
    
    commit c00bc80462afc7963f449d7f21d896d2f629cacc upstream.
    
    Before this patch bq27xxx_battery_teardown() was setting poll_interval = 0
    to avoid bq27xxx_battery_update() requeuing the delayed_work item.
    
    There are 2 problems with this:
    
    1. If the driver is unbound through sysfs, rather then the module being
       rmmod-ed, this changes poll_interval unexpectedly
    
    2. This is racy, after it being set poll_interval could be changed
       before bq27xxx_battery_update() checks it through
       /sys/module/bq27xxx_battery/parameters/poll_interval
    
    Fix this by added a removed attribute to struct bq27xxx_device_info and
    using that instead of setting poll_interval to 0.
    
    There also is another poll_interval related race on remove(), writing
    /sys/module/bq27xxx_battery/parameters/poll_interval will requeue
    the delayed_work item for all devices on the bq27xxx_battery_devices
    list and the device being removed was only removed from that list
    after cancelling the delayed_work item.
    
    Fix this by moving the removal from the bq27xxx_battery_devices list
    to before cancelling the delayed_work item.
    
    Fixes: 8cfaaa811894 ("bq27x00_battery: Fix OOPS caused by unregistring bq27x00 driver")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e01820a94aea99296e500f54b3f36a2985061045
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:33 2023 +0200

    power: supply: bq27xxx: Fix I2C IRQ race on remove
    
    commit 444ff00734f3878cd54ddd1ed5e2e6dbea9326d5 upstream.
    
    devm_request_threaded_irq() requested IRQs are only free-ed after
    the driver's remove function has ran. So the IRQ could trigger and
    call bq27xxx_battery_update() after bq27xxx_battery_teardown() has
    already run.
    
    Switch to explicitly free-ing the IRQ in bq27xxx_battery_i2c_remove()
    to fix this.
    
    Fixes: 8807feb91b76 ("power: bq27xxx_battery: Add interrupt handling support")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d21b3448577feab33557dcae3d9794d37aa91b01
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:32 2023 +0200

    power: supply: bq27xxx: Fix bq27xxx_battery_update() race condition
    
    commit 5c34c0aef185dcd10881847b9ebf20046aa77cb4 upstream.
    
    bq27xxx_battery_update() assumes / requires that it is only run once,
    not multiple times at the same time. But there are 3 possible callers:
    
    1. bq27xxx_battery_poll() delayed_work item handler
    2. bq27xxx_battery_irq_handler_thread() I2C IRQ handler
    3. bq27xxx_battery_setup()
    
    And there is no protection against these racing with each other,
    fix this race condition by making all callers take di->lock:
    
    - Rename bq27xxx_battery_update() to bq27xxx_battery_update_unlocked()
    
    - Add new bq27xxx_battery_update() which takes di->lock and then calls
      bq27xxx_battery_update_unlocked()
    
    - Make stale cache check code in bq27xxx_battery_get_property(), which
      already takes di->lock directly to check the jiffies, call
      bq27xxx_battery_update_unlocked() instead of messing with
      the delayed_work item
    
    - Make bq27xxx_battery_update_unlocked() mod the delayed-work item
      so that the next poll is delayed to poll_interval milliseconds after
      the last update independent of the source of the update
    
    Fixes: 740b755a3b34 ("bq27x00: Poll battery state")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c530f60e5a2e20b657c82f210780862c92bd10ae
Author: Kang Chen <void0red@gmail.com>
Date:   Mon Feb 27 11:14:10 2023 +0800

    power: supply: mt6360: add a check of devm_work_autocancel in mt6360_charger_probe
    
    commit 4cbb0d358883a27e432714b5256f0362946f5e25 upstream.
    
    devm_work_autocancel may fail, add a check and return early.
    
    Fixes: 0402e8ebb8b86 ("power: supply: mt6360_charger: add MT6360 charger support")
    Signed-off-by: Kang Chen <void0red@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dd4881238bcc75e375a7ca15f25f6e087cf8f94
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 13 12:09:41 2023 +0200

    power: supply: leds: Fix blink to LED on transition
    
    commit e4484643991e0f6b89060092563f0dbab9450cbb upstream.
    
    When a battery's status changes from charging to full then
    the charging-blink-full-solid trigger tries to change
    the LED from blinking to solid/on.
    
    As is documented in include/linux/leds.h to deactivate blinking /
    to make the LED solid a LED_OFF must be send:
    
    """
             * Deactivate blinking again when the brightness is set to LED_OFF
             * via the brightness_set() callback.
    """
    
    led_set_brighness() calls with a brightness value other then 0 / LED_OFF
    merely change the brightness of the LED in its on state while it is
    blinking.
    
    So power_supply_update_bat_leds() must first send a LED_OFF event
    before the LED_FULL to disable blinking.
    
    Fixes: 6501f728c56f ("power_supply: Add new LED trigger charging-blink-solid-full")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Vasily Khoruzhick <anarsoul@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e4bb063dcaf796a2fc8024680003e9a6bb95184
Author: Steve French <stfrench@microsoft.com>
Date:   Wed May 24 03:26:19 2023 -0500

    cifs: mapchars mount option ignored
    
    commit cb8b02fd6343228966324528adf920bfb8b8e681 upstream.
    
    There are two ways that special characters (not allowed in some
    other operating systems like Windows, but allowed in POSIX) have
    been mapped in the past ("SFU" and "SFM" mappings) to allow them
    to be stored in a range reserved for special chars. The default
    for Linux has been to use "mapposix" (ie the SFM mapping) but
    the conversion to the new mount API in the 5.11 kernel broke
    the ability to override the default mapping of the reserved
    characters (like '?' and '*' and '\') via "mapchars" mount option.
    
    This patch fixes that - so can now mount with "mapchars"
    mount option to override the default ("mapposix" ie SFM) mapping.
    
    Reported-by: Tyler Spivey <tspivey8@gmail.com>
    Fixes: 24e0a1eff9e2 ("cifs: switch to new mount api")
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b92e2d0eb696d7586ba832c8854653b59887da0
Author: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
Date:   Tue May 23 08:29:44 2023 +0000

    ipv6: Fix out-of-bounds access in ipv6_find_tlv()
    
    commit 878ecb0897f4737a4c9401f3523fd49589025671 upstream.
    
    optlen is fetched without checking whether there is more than one byte to parse.
    It can lead to out-of-bounds access.
    
    Found by InfoTeCS on behalf of Linux Verification Center
    (linuxtesting.org) with SVACE.
    
    Fixes: c61a40432509 ("[IPV6]: Find option offset by type.")
    Signed-off-by: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf478c2643bac16aec1d9a7c116f83e34594440b
Author: Will Deacon <will@kernel.org>
Date:   Thu May 18 11:25:28 2023 +0100

    bpf: Fix mask generation for 32-bit narrow loads of 64-bit fields
    
    commit 0613d8ca9ab382caabe9ed2dceb429e9781e443f upstream.
    
    A narrow load from a 64-bit context field results in a 64-bit load
    followed potentially by a 64-bit right-shift and then a bitwise AND
    operation to extract the relevant data.
    
    In the case of a 32-bit access, an immediate mask of 0xffffffff is used
    to construct a 64-bit BPP_AND operation which then sign-extends the mask
    value and effectively acts as a glorified no-op. For example:
    
    0:      61 10 00 00 00 00 00 00 r0 = *(u32 *)(r1 + 0)
    
    results in the following code generation for a 64-bit field:
    
            ldr     x7, [x7]        // 64-bit load
            mov     x10, #0xffffffffffffffff
            and     x7, x7, x10
    
    Fix the mask generation so that narrow loads always perform a 32-bit AND
    operation:
    
            ldr     x7, [x7]        // 64-bit load
            mov     w10, #0xffffffff
            and     w7, w7, w10
    
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Krzesimir Nowak <krzesimir@kinvolk.io>
    Cc: Andrey Ignatov <rdna@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Fixes: 31fd85816dbe ("bpf: permits narrower load from bpf program context fields")
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20230518102528.1341-1-will@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79081b3f489abf7dfb4a455b623a7af80aed1430
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Thu May 18 12:10:42 2023 +0530

    octeontx2-pf: Fix TSOv6 offload
    
    commit de678ca38861f2eb58814048076dcf95ed1b5bf9 upstream.
    
    HW adds segment size to the payload length
    in the IPv6 header. Fix payload length to
    just TCP header length instead of 'TCP header
    size + IPv6 header size'.
    
    Fixes: 86d7476078b8 ("octeontx2-pf: TCP segmentation offload support")
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: Ratheesh Kannoth <rkannoth@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 114657365c8813c3357db20c5b89a79e5d1463f4
Author: Po-Hsu Lin <po-hsu.lin@canonical.com>
Date:   Thu May 18 12:37:59 2023 +0800

    selftests: fib_tests: mute cleanup error message
    
    commit d226b1df361988f885c298737d6019c863a25f26 upstream.
    
    In the end of the test, there will be an error message induced by the
    `ip netns del ns1` command in cleanup()
    
      Tests passed: 201
      Tests failed:   0
      Cannot remove namespace file "/run/netns/ns1": No such file or directory
    
    This can even be reproduced with just `./fib_tests.sh -h` as we're
    calling cleanup() on exit.
    
    Redirect the error message to /dev/null to mute it.
    
    V2: Update commit message and fixes tag.
    V3: resubmit due to missing netdev ML in V2
    
    Fixes: b60417a9f2b8 ("selftest: fib_tests: Always cleanup before exit")
    Signed-off-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e06841a2abf9c82735cee39e88b1d79464088840
Author: Pratyush Yadav <ptyadav@amazon.de>
Date:   Mon May 22 17:30:20 2023 +0200

    net: fix skb leak in __skb_tstamp_tx()
    
    commit 8a02fb71d7192ff1a9a47c9d937624966c6e09af upstream.
    
    Commit 50749f2dd685 ("tcp/udp: Fix memleaks of sk and zerocopy skbs with
    TX timestamp.") added a call to skb_orphan_frags_rx() to fix leaks with
    zerocopy skbs. But it ended up adding a leak of its own. When
    skb_orphan_frags_rx() fails, the function just returns, leaking the skb
    it just cloned. Free it before returning.
    
    This bug was discovered and resolved using Coverity Static Analysis
    Security Testing (SAST) by Synopsys, Inc.
    
    Fixes: 50749f2dd685 ("tcp/udp: Fix memleaks of sk and zerocopy skbs with TX timestamp.")
    Signed-off-by: Pratyush Yadav <ptyadav@amazon.de>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20230522153020.32422-1-ptyadav@amazon.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f1512d78b5de928f4616a871e77b58fd546e651
Author: Ravulapati Vishnu Vardhan Rao <quic_visr@quicinc.com>
Date:   Thu May 11 16:55:32 2023 +0530

    ASoC: lpass: Fix for KASAN use_after_free out of bounds
    
    commit 75e5fab7db0cecb6e16b22c34608f0b40a4c7cd1 upstream.
    
    When we run syzkaller we get below Out of Bounds error.
    
    "KASAN: slab-out-of-bounds Read in regcache_flat_read"
    
    Below is the backtrace of the issue:
    
    BUG: KASAN: slab-out-of-bounds in regcache_flat_read+0x10c/0x110
    Read of size 4 at addr ffffff8088fbf714 by task syz-executor.4/14144
    CPU: 6 PID: 14144 Comm: syz-executor.4 Tainted: G        W
    Hardware name: Qualcomm Technologies, Inc. sc7280 CRD platform (rev5+) (DT)
    Call trace:
    dump_backtrace+0x0/0x4ec
    show_stack+0x34/0x50
    dump_stack_lvl+0xdc/0x11c
    print_address_description+0x30/0x2d8
    kasan_report+0x178/0x1e4
    __asan_report_load4_noabort+0x44/0x50
    regcache_flat_read+0x10c/0x110
    regcache_read+0xf8/0x5a0
    _regmap_read+0x45c/0x86c
    _regmap_update_bits+0x128/0x290
    regmap_update_bits_base+0xc0/0x15c
    snd_soc_component_update_bits+0xa8/0x22c
    snd_soc_component_write_field+0x68/0xd4
    tx_macro_put_dec_enum+0x1d0/0x268
    snd_ctl_elem_write+0x288/0x474
    
    By Error checking and checking valid values issue gets rectifies.
    
    Signed-off-by: Ravulapati Vishnu Vardhan Rao <quic_visr@quicinc.com
    Link: https://lore.kernel.org/r/20230511112532.16106-1-quic_visr@quicinc.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1bde4b4360c3d8a35504443efabd3243b802805
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 10 15:40:05 2023 -0400

    media: radio-shark: Add endpoint checks
    
    commit 76e31045ba030e94e72105c01b2e98f543d175ac upstream.
    
    The syzbot fuzzer was able to provoke a WARNING from the radio-shark2
    driver:
    
    ------------[ cut here ]------------
    usb 1-1: BOGUS urb xfer, pipe 1 != type 3
    WARNING: CPU: 0 PID: 3271 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed2/0x1880 drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 0 PID: 3271 Comm: kworker/0:3 Not tainted 6.1.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:usb_submit_urb+0xed2/0x1880 drivers/usb/core/urb.c:504
    Code: 7c 24 18 e8 00 36 ea fb 48 8b 7c 24 18 e8 36 1c 02 ff 41 89 d8 44 89 e1 4c 89 ea 48 89 c6 48 c7 c7 a0 b6 90 8a e8 9a 29 b8 03 <0f> 0b e9 58 f8 ff ff e8 d2 35 ea fb 48 81 c5 c0 05 00 00 e9 84 f7
    RSP: 0018:ffffc90003876dd0 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000003 RCX: 0000000000000000
    RDX: ffff8880750b0040 RSI: ffffffff816152b8 RDI: fffff5200070edac
    RBP: ffff8880172d81e0 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000080000000 R11: 0000000000000000 R12: 0000000000000001
    R13: ffff8880285c5040 R14: 0000000000000002 R15: ffff888017158200
    FS:  0000000000000000(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffe03235b90 CR3: 000000000bc8e000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     usb_start_wait_urb+0x101/0x4b0 drivers/usb/core/message.c:58
     usb_bulk_msg+0x226/0x550 drivers/usb/core/message.c:387
     shark_write_reg+0x1ff/0x2e0 drivers/media/radio/radio-shark2.c:88
    ...
    
    The problem was caused by the fact that the driver does not check
    whether the endpoints it uses are actually present and have the
    appropriate types.  This can be fixed by adding a simple check of
    these endpoints (and similarly for the radio-shark driver).
    
    Link: https://syzkaller.appspot.com/bug?extid=4b3f8190f6e13b3efd74
    Reported-and-tested-by: syzbot+4b3f8190f6e13b3efd74@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/e2858ab4-4adf-46e5-bbf6-c56742034547@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43f569fd0699c4240a5c96e5ba1a0844a595afca
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 10 15:38:22 2023 -0400

    USB: sisusbvga: Add endpoint checks
    
    commit df05a9b05e466a46725564528b277d0c570d0104 upstream.
    
    The syzbot fuzzer was able to provoke a WARNING from the sisusbvga driver:
    
    ------------[ cut here ]------------
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 1 PID: 26 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 1 PID: 26 Comm: kworker/1:1 Not tainted 6.2.0-rc5-syzkaller-00199-g5af6ce704936 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/12/2023
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Code: 7c 24 18 e8 6c 50 80 fb 48 8b 7c 24 18 e8 62 1a 01 ff 41 89 d8 44 89 e1 4c 89 ea 48 89 c6 48 c7 c7 60 b1 fa 8a e8 84 b0 be 03 <0f> 0b e9 58 f8 ff ff e8 3e 50 80 fb 48 81 c5 c0 05 00 00 e9 84 f7
    RSP: 0018:ffffc90000a1ed18 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000001 RCX: 0000000000000000
    RDX: ffff888012783a80 RSI: ffffffff816680ec RDI: fffff52000143d95
    RBP: ffff888079020000 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000080000000 R11: 0000000000000000 R12: 0000000000000003
    R13: ffff888017d33370 R14: 0000000000000003 R15: ffff888021213600
    FS:  0000000000000000(0000) GS:ffff8880b9900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00005592753a60b0 CR3: 0000000022899000 CR4: 00000000003506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     sisusb_bulkout_msg drivers/usb/misc/sisusbvga/sisusbvga.c:224 [inline]
     sisusb_send_bulk_msg.constprop.0+0x904/0x1230 drivers/usb/misc/sisusbvga/sisusbvga.c:379
     sisusb_send_bridge_packet drivers/usb/misc/sisusbvga/sisusbvga.c:567 [inline]
     sisusb_do_init_gfxdevice drivers/usb/misc/sisusbvga/sisusbvga.c:2077 [inline]
     sisusb_init_gfxdevice+0x87b/0x4000 drivers/usb/misc/sisusbvga/sisusbvga.c:2177
     sisusb_probe+0x9cd/0xbe2 drivers/usb/misc/sisusbvga/sisusbvga.c:2869
    ...
    
    The problem was caused by the fact that the driver does not check
    whether the endpoints it uses are actually present and have the
    appropriate types.  This can be fixed by adding a simple check of
    the endpoints.
    
    Link: https://syzkaller.appspot.com/bug?extid=23be03b56c5259385d79
    Reported-and-tested-by: syzbot+23be03b56c5259385d79@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/48ef98f7-51ae-4f63-b8d3-0ef2004bb60a@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da0f4b5576820204159f91e85e61898b9987a716
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 10 15:37:07 2023 -0400

    USB: core: Add routines for endpoint checks in old drivers
    
    commit 13890626501ffda22b18213ddaf7930473da5792 upstream.
    
    Many of the older USB drivers in the Linux USB stack were written
    based simply on a vendor's device specification.  They use the
    endpoint information in the spec and assume these endpoints will
    always be present, with the properties listed, in any device matching
    the given vendor and product IDs.
    
    While that may have been true back then, with spoofing and fuzzing it
    is not true any more.  More and more we are finding that those old
    drivers need to perform at least a minimum of checking before they try
    to use any endpoint other than ep0.
    
    To make this checking as simple as possible, we now add a couple of
    utility routines to the USB core.  usb_check_bulk_endpoints() and
    usb_check_int_endpoints() take an interface pointer together with a
    list of endpoint addresses (numbers and directions).  They check that
    the interface's current alternate setting includes endpoints with
    those addresses and that each of these endpoints has the right type:
    bulk or interrupt, respectively.
    
    Although we already have usb_find_common_endpoints() and related
    routines meant for a similar purpose, they are not well suited for
    this kind of checking.  Those routines find endpoints of various
    kinds, but only one (either the first or the last) of each kind, and
    they don't verify that the endpoints' addresses agree with what the
    caller expects.
    
    In theory the new routines could be more general: They could take a
    particular altsetting as their argument instead of always using the
    interface's current altsetting.  In practice I think this won't matter
    too much; multiple altsettings tend to be used for transferring media
    (audio or visual) over isochronous endpoints, not bulk or interrupt.
    Drivers for such devices will generally require more sophisticated
    checking than these simplistic routines provide.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/dd2c8e8c-2c87-44ea-ba17-c64b97e201c9@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 387bd0a3af3bdd2b16f8dbef0c9fcccac63000a4
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Tue May 23 09:33:05 2023 -0700

    udplite: Fix NULL pointer dereference in __sk_mem_raise_allocated().
    
    commit ad42a35bdfc6d3c0fc4cb4027d7b2757ce665665 upstream.
    
    syzbot reported [0] a null-ptr-deref in sk_get_rmem0() while using
    IPPROTO_UDPLITE (0x88):
    
      14:25:52 executing program 1:
      r0 = socket$inet6(0xa, 0x80002, 0x88)
    
    We had a similar report [1] for probably sk_memory_allocated_add()
    in __sk_mem_raise_allocated(), and commit c915fe13cbaa ("udplite: fix
    NULL pointer dereference") fixed it by setting .memory_allocated for
    udplite_prot and udplitev6_prot.
    
    To fix the variant, we need to set either .sysctl_wmem_offset or
    .sysctl_rmem.
    
    Now UDP and UDPLITE share the same value for .memory_allocated, so we
    use the same .sysctl_wmem_offset for UDP and UDPLITE.
    
    [0]:
    general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    CPU: 0 PID: 6829 Comm: syz-executor.1 Not tainted 6.4.0-rc2-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/28/2023
    RIP: 0010:sk_get_rmem0 include/net/sock.h:2907 [inline]
    RIP: 0010:__sk_mem_raise_allocated+0x806/0x17a0 net/core/sock.c:3006
    Code: c1 ea 03 80 3c 02 00 0f 85 23 0f 00 00 48 8b 44 24 08 48 8b 98 38 01 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 da 48 c1 ea 03 <0f> b6 14 02 48 89 d8 83 e0 07 83 c0 03 38 d0 0f 8d 6f 0a 00 00 8b
    RSP: 0018:ffffc90005d7f450 EFLAGS: 00010246
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffc90004d92000
    RDX: 0000000000000000 RSI: ffffffff88066482 RDI: ffffffff8e2ccbb8
    RBP: ffff8880173f7000 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000030000
    R13: 0000000000000001 R14: 0000000000000340 R15: 0000000000000001
    FS:  0000000000000000(0000) GS:ffff8880b9800000(0063) knlGS:00000000f7f1cb40
    CS:  0010 DS: 002b ES: 002b CR0: 0000000080050033
    CR2: 000000002e82f000 CR3: 0000000034ff0000 CR4: 00000000003506f0
    Call Trace:
     <TASK>
     __sk_mem_schedule+0x6c/0xe0 net/core/sock.c:3077
     udp_rmem_schedule net/ipv4/udp.c:1539 [inline]
     __udp_enqueue_schedule_skb+0x776/0xb30 net/ipv4/udp.c:1581
     __udpv6_queue_rcv_skb net/ipv6/udp.c:666 [inline]
     udpv6_queue_rcv_one_skb+0xc39/0x16c0 net/ipv6/udp.c:775
     udpv6_queue_rcv_skb+0x194/0xa10 net/ipv6/udp.c:793
     __udp6_lib_mcast_deliver net/ipv6/udp.c:906 [inline]
     __udp6_lib_rcv+0x1bda/0x2bd0 net/ipv6/udp.c:1013
     ip6_protocol_deliver_rcu+0x2e7/0x1250 net/ipv6/ip6_input.c:437
     ip6_input_finish+0x150/0x2f0 net/ipv6/ip6_input.c:482
     NF_HOOK include/linux/netfilter.h:303 [inline]
     NF_HOOK include/linux/netfilter.h:297 [inline]
     ip6_input+0xa0/0xd0 net/ipv6/ip6_input.c:491
     ip6_mc_input+0x40b/0xf50 net/ipv6/ip6_input.c:585
     dst_input include/net/dst.h:468 [inline]
     ip6_rcv_finish net/ipv6/ip6_input.c:79 [inline]
     NF_HOOK include/linux/netfilter.h:303 [inline]
     NF_HOOK include/linux/netfilter.h:297 [inline]
     ipv6_rcv+0x250/0x380 net/ipv6/ip6_input.c:309
     __netif_receive_skb_one_core+0x114/0x180 net/core/dev.c:5491
     __netif_receive_skb+0x1f/0x1c0 net/core/dev.c:5605
     netif_receive_skb_internal net/core/dev.c:5691 [inline]
     netif_receive_skb+0x133/0x7a0 net/core/dev.c:5750
     tun_rx_batched+0x4b3/0x7a0 drivers/net/tun.c:1553
     tun_get_user+0x2452/0x39c0 drivers/net/tun.c:1989
     tun_chr_write_iter+0xdf/0x200 drivers/net/tun.c:2035
     call_write_iter include/linux/fs.h:1868 [inline]
     new_sync_write fs/read_write.c:491 [inline]
     vfs_write+0x945/0xd50 fs/read_write.c:584
     ksys_write+0x12b/0x250 fs/read_write.c:637
     do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
     __do_fast_syscall_32+0x65/0xf0 arch/x86/entry/common.c:178
     do_fast_syscall_32+0x33/0x70 arch/x86/entry/common.c:203
     entry_SYSENTER_compat_after_hwframe+0x70/0x82
    RIP: 0023:0xf7f21579
    Code: b8 01 10 06 03 74 b4 01 10 07 03 74 b0 01 10 08 03 74 d8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 8d b4 26 00 00 00 00 8d b4 26 00 00 00 00
    RSP: 002b:00000000f7f1c590 EFLAGS: 00000282 ORIG_RAX: 0000000000000004
    RAX: ffffffffffffffda RBX: 00000000000000c8 RCX: 0000000020000040
    RDX: 0000000000000083 RSI: 00000000f734e000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000296 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    Modules linked in:
    
    Link: https://lore.kernel.org/netdev/CANaxB-yCk8hhP68L4Q2nFOJht8sqgXGGQO2AftpHs0u1xyGG5A@mail.gmail.com/ [1]
    Fixes: 850cbaddb52d ("udp: use it's own memory accounting schema")
    Reported-by: syzbot+444ca0907e96f7c5e48b@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=444ca0907e96f7c5e48b
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230523163305.66466-1-kuniyu@amazon.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf3b5cd7127cc10c5b12400c545f263f0e5e715c
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed May 17 14:30:10 2023 +0000

    net: fix stack overflow when LRO is disabled for virtual interfaces
    
    commit ae9b15fbe63447bc1d3bba3769f409d17ca6fdf6 upstream.
    
    When the virtual interface's feature is updated, it synchronizes the
    updated feature for its own lower interface.
    This propagation logic should be worked as the iteration, not recursively.
    But it works recursively due to the netdev notification unexpectedly.
    This problem occurs when it disables LRO only for the team and bonding
    interface type.
    
           team0
             |
      +------+------+-----+-----+
      |      |      |     |     |
    team1  team2  team3  ...  team200
    
    If team0's LRO feature is updated, it generates the NETDEV_FEAT_CHANGE
    event to its own lower interfaces(team1 ~ team200).
    It is worked by netdev_sync_lower_features().
    So, the NETDEV_FEAT_CHANGE notification logic of each lower interface
    work iteratively.
    But generated NETDEV_FEAT_CHANGE event is also sent to the upper
    interface too.
    upper interface(team0) generates the NETDEV_FEAT_CHANGE event for its own
    lower interfaces again.
    lower and upper interfaces receive this event and generate this
    event again and again.
    So, the stack overflow occurs.
    
    But it is not the infinite loop issue.
    Because the netdev_sync_lower_features() updates features before
    generating the NETDEV_FEAT_CHANGE event.
    Already synchronized lower interfaces skip notification logic.
    So, it is just the problem that iteration logic is changed to the
    recursive unexpectedly due to the notification mechanism.
    
    Reproducer:
    
    ip link add team0 type team
    ethtool -K team0 lro on
    for i in {1..200}
    do
            ip link add team$i master team0 type team
            ethtool -K team$i lro on
    done
    
    ethtool -K team0 lro off
    
    In order to fix it, the notifier_ctx member of bonding/team is introduced.
    
    Reported-by: syzbot+60748c96cf5c6df8e581@syzkaller.appspotmail.com
    Fixes: fd867d51f889 ("net/core: generic support for disabling netdev features down stack")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230517143010.3596250-1-ap420073@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e12c58a5ece41be72157cef348576b135c9fc72
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri May 19 15:32:30 2023 -0400

    fbdev: udlfb: Fix endpoint check
    
    commit ed9de4ed39875706607fb08118a58344ae6c5f42 upstream.
    
    The syzbot fuzzer detected a problem in the udlfb driver, caused by an
    endpoint not having the expected type:
    
    usb 1-1: Read EDID byte 0 failed: -71
    usb 1-1: Unable to get valid EDID from device/display
    ------------[ cut here ]------------
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 0 PID: 9 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed6/0x1880
    drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 0 PID: 9 Comm: kworker/0:1 Not tainted
    6.4.0-rc1-syzkaller-00016-ga4422ff22142 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google
    04/28/2023
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    ...
    Call Trace:
     <TASK>
     dlfb_submit_urb+0x92/0x180 drivers/video/fbdev/udlfb.c:1980
     dlfb_set_video_mode+0x21f0/0x2950 drivers/video/fbdev/udlfb.c:315
     dlfb_ops_set_par+0x2a7/0x8d0 drivers/video/fbdev/udlfb.c:1111
     dlfb_usb_probe+0x149a/0x2710 drivers/video/fbdev/udlfb.c:1743
    
    The current approach for this issue failed to catch the problem
    because it only checks for the existence of a bulk-OUT endpoint; it
    doesn't check whether this endpoint is the one that the driver will
    actually use.
    
    We can fix the problem by instead checking that the endpoint used by
    the driver does exist and is bulk-OUT.
    
    Reported-and-tested-by: syzbot+0e22d63dcebb802b9bc8@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Pavel Skripkin <paskripkin@gmail.com>
    Fixes: aaf7dbe07385 ("video: fbdev: udlfb: properly check endpoint type")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aee97eec77029270866c704f66cdf2881cbd2fe1
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu May 11 22:47:32 2023 +0900

    debugobjects: Don't wake up kswapd from fill_pool()
    
    commit eb799279fb1f9c63c520fe8c1c41cb9154252db6 upstream.
    
    syzbot is reporting a lockdep warning in fill_pool() because the allocation
    from debugobjects is using GFP_ATOMIC, which is (__GFP_HIGH | __GFP_KSWAPD_RECLAIM)
    and therefore tries to wake up kswapd, which acquires kswapd_wait::lock.
    
    Since fill_pool() might be called with arbitrary locks held, fill_pool()
    should not assume that acquiring kswapd_wait::lock is safe.
    
    Use __GFP_HIGH instead and remove __GFP_NORETRY as it is pointless for
    !__GFP_DIRECT_RECLAIM allocation.
    
    Fixes: 3ac7fe5a4aab ("infrastructure to debug (dynamic) objects")
    Reported-by: syzbot <syzbot+fe0c72f0ccbb93786380@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/6577e1fa-b6ee-f2be-2414-a2b51b1c5e30@I-love.SAKURA.ne.jp
    Closes: https://syzkaller.appspot.com/bug?extid=fe0c72f0ccbb93786380
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c09a7b6190f5a5d8324c84b8e88f02e9861af735
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Mar 23 09:56:40 2023 +0800

    x86/topology: Fix erroneous smp_num_siblings on Intel Hybrid platforms
    
    commit edc0a2b5957652f4685ef3516f519f84807087db upstream.
    
    Traditionally, all CPUs in a system have identical numbers of SMT
    siblings.  That changes with hybrid processors where some logical CPUs
    have a sibling and others have none.
    
    Today, the CPU boot code sets the global variable smp_num_siblings when
    every CPU thread is brought up. The last thread to boot will overwrite
    it with the number of siblings of *that* thread. That last thread to
    boot will "win". If the thread is a Pcore, smp_num_siblings == 2.  If it
    is an Ecore, smp_num_siblings == 1.
    
    smp_num_siblings describes if the *system* supports SMT.  It should
    specify the maximum number of SMT threads among all cores.
    
    Ensure that smp_num_siblings represents the system-wide maximum number
    of siblings by always increasing its value. Never allow it to decrease.
    
    On MeteorLake-P platform, this fixes a problem that the Ecore CPUs are
    not updated in any cpu sibling map because the system is treated as an
    UP system when probing Ecore CPUs.
    
    Below shows part of the CPU topology information before and after the
    fix, for both Pcore and Ecore CPU (cpu0 is Pcore, cpu 12 is Ecore).
    ...
    -/sys/devices/system/cpu/cpu0/topology/package_cpus:000fff
    -/sys/devices/system/cpu/cpu0/topology/package_cpus_list:0-11
    +/sys/devices/system/cpu/cpu0/topology/package_cpus:3fffff
    +/sys/devices/system/cpu/cpu0/topology/package_cpus_list:0-21
    ...
    -/sys/devices/system/cpu/cpu12/topology/package_cpus:001000
    -/sys/devices/system/cpu/cpu12/topology/package_cpus_list:12
    +/sys/devices/system/cpu/cpu12/topology/package_cpus:3fffff
    +/sys/devices/system/cpu/cpu12/topology/package_cpus_list:0-21
    
    Notice that the "before" 'package_cpus_list' has only one CPU.  This
    means that userspace tools like lscpu will see a little laptop like
    an 11-socket system:
    
    -Core(s) per socket:  1
    -Socket(s):           11
    +Core(s) per socket:  16
    +Socket(s):           1
    
    This is also expected to make the scheduler do rather wonky things
    too.
    
    [ dhansen: remove CPUID detail from changelog, add end user effects ]
    
    CC: stable@kernel.org
    Fixes: bbb65d2d365e ("x86: use cpuid vector 0xb when available for detecting cpu topology")
    Fixes: 95f3d39ccf7a ("x86/cpu/topology: Provide detect_extended_topology_early()")
    Suggested-by: Len Brown <len.brown@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/all/20230323015640.27906-1-rui.zhang%40intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9ffd42eb9abe593c46ca8b66a251713cb901d26
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon May 8 07:02:06 2023 -0700

    perf/x86/uncore: Correct the number of CHAs on SPR
    
    commit 38776cc45eb7603df4735a0410f42cffff8e71a1 upstream.
    
    The number of CHAs from the discovery table on some SPR variants is
    incorrect, because of a firmware issue. An accurate number can be read
    from the MSR UNC_CBO_CONFIG.
    
    Fixes: 949b11381f81 ("perf/x86/intel/uncore: Add Sapphire Rapids server CHA support")
    Reported-by: Stephane Eranian <eranian@google.com>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: Stephane Eranian <eranian@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230508140206.283708-1-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 277f206bb874e25fc65f2c27c3e033d5284539f8
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 24 17:07:07 2023 +0200

    parisc: Fix flush_dcache_page() for usage from irq context
    
    commit 61e150fb310729c98227a5edf6e4a3619edc3702 upstream.
    
    Since at least kernel 6.1, flush_dcache_page() is called with IRQs
    disabled, e.g. from aio_complete().
    
    But the current implementation for flush_dcache_page() on parisc
    unintentionally re-enables IRQs, which may lead to deadlocks.
    
    Fix it by using xa_lock_irqsave() and xa_unlock_irqrestore()
    for the flush_dcache_mmap_*lock() macros instead.
    
    Cc: linux-parisc@vger.kernel.org
    Cc: stable@kernel.org # 5.18+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eff115ca949a4a6244e2acbd4a14cd2dd6e7fa99
Author: Hardik Garg <hargar@linux.microsoft.com>
Date:   Fri May 26 16:21:36 2023 -0700

    selftests/memfd: Fix unknown type name build failure
    
    Partially backport v6.3 commit 11f75a01448f ("selftests/memfd: add tests
    for MFD_NOEXEC_SEAL MFD_EXEC") to fix an unknown type name build error.
    In some systems, the __u64 typedef is not present due to differences in
    system headers, causing compilation errors like this one:
    
    fuse_test.c:64:8: error: unknown type name '__u64'
       64 | static __u64 mfd_assert_get_seals(int fd)
    
    This header includes the  __u64 typedef which increases the likelihood
    of successful compilation on a wider variety of systems.
    
    Signed-off-by: Hardik Garg <hargar@linux.microsoft.com>
    Reviewed-by: Tyler Hicks (Microsoft) <code@tyhicks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a98b6e028eedc26445721a049231a8d8d34e146
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Tue May 16 12:24:25 2023 -0700

    x86/mm: Avoid incomplete Global INVLPG flushes
    
    commit ce0b15d11ad837fbacc5356941712218e38a0a83 upstream.
    
    The INVLPG instruction is used to invalidate TLB entries for a
    specified virtual address.  When PCIDs are enabled, INVLPG is supposed
    to invalidate TLB entries for the specified address for both the
    current PCID *and* Global entries.  (Note: Only kernel mappings set
    Global=1.)
    
    Unfortunately, some INVLPG implementations can leave Global
    translations unflushed when PCIDs are enabled.
    
    As a workaround, never enable PCIDs on affected processors.
    
    I expect there to eventually be microcode mitigations to replace this
    software workaround.  However, the exact version numbers where that
    will happen are not known today.  Once the version numbers are set in
    stone, the processor list can be tweaked to only disable PCIDs on
    affected processors with affected microcode.
    
    Note: if anyone wants a quick fix that doesn't require patching, just
    stick 'nopcid' on your kernel command-line.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 683bb30c69472edb84bb0d902f9d8c2d5aa68fe0
Author: Frank Li <Frank.Li@nxp.com>
Date:   Mon May 15 12:20:52 2023 -0400

    dt-binding: cdns,usb3: Fix cdns,on-chip-buff-size type
    
    commit 50a1726b148ff30778cb8a6cf3736130b07c93fd upstream.
    
    In cdns3-gadget.c, 'cdns,on-chip-buff-size' was read using
    device_property_read_u16(). It resulted in 0 if a 32bit value was used
    in dts. This commit fixes the dt binding doc to declare it as u16.
    
    Cc: stable@vger.kernel.org
    Fixes: 68989fe1c39d ("dt-bindings: usb: Convert cdns-usb3.txt to YAML schema")
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 647af8a998c2a345cc2ead7dc564da9dc25efc75
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu May 11 12:45:59 2023 -0400

    btrfs: use nofs when cleaning up aborted transactions
    
    commit 597441b3436a43011f31ce71dc0a6c0bf5ce958a upstream.
    
    Our CI system caught a lockdep splat:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      6.3.0-rc7+ #1167 Not tainted
      ------------------------------------------------------
      kswapd0/46 is trying to acquire lock:
      ffff8c6543abd650 (sb_internal#2){++++}-{0:0}, at: btrfs_commit_inode_delayed_inode+0x5f/0x120
    
      but task is already holding lock:
      ffffffffabe61b40 (fs_reclaim){+.+.}-{0:0}, at: balance_pgdat+0x4aa/0x7a0
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #1 (fs_reclaim){+.+.}-{0:0}:
             fs_reclaim_acquire+0xa5/0xe0
             kmem_cache_alloc+0x31/0x2c0
             alloc_extent_state+0x1d/0xd0
             __clear_extent_bit+0x2e0/0x4f0
             try_release_extent_mapping+0x216/0x280
             btrfs_release_folio+0x2e/0x90
             invalidate_inode_pages2_range+0x397/0x470
             btrfs_cleanup_dirty_bgs+0x9e/0x210
             btrfs_cleanup_one_transaction+0x22/0x760
             btrfs_commit_transaction+0x3b7/0x13a0
             create_subvol+0x59b/0x970
             btrfs_mksubvol+0x435/0x4f0
             __btrfs_ioctl_snap_create+0x11e/0x1b0
             btrfs_ioctl_snap_create_v2+0xbf/0x140
             btrfs_ioctl+0xa45/0x28f0
             __x64_sys_ioctl+0x88/0xc0
             do_syscall_64+0x38/0x90
             entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
      -> #0 (sb_internal#2){++++}-{0:0}:
             __lock_acquire+0x1435/0x21a0
             lock_acquire+0xc2/0x2b0
             start_transaction+0x401/0x730
             btrfs_commit_inode_delayed_inode+0x5f/0x120
             btrfs_evict_inode+0x292/0x3d0
             evict+0xcc/0x1d0
             inode_lru_isolate+0x14d/0x1e0
             __list_lru_walk_one+0xbe/0x1c0
             list_lru_walk_one+0x58/0x80
             prune_icache_sb+0x39/0x60
             super_cache_scan+0x161/0x1f0
             do_shrink_slab+0x163/0x340
             shrink_slab+0x1d3/0x290
             shrink_node+0x300/0x720
             balance_pgdat+0x35c/0x7a0
             kswapd+0x205/0x410
             kthread+0xf0/0x120
             ret_from_fork+0x29/0x50
    
      other info that might help us debug this:
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(fs_reclaim);
                                     lock(sb_internal#2);
                                     lock(fs_reclaim);
        lock(sb_internal#2);
    
       *** DEADLOCK ***
    
      3 locks held by kswapd0/46:
       #0: ffffffffabe61b40 (fs_reclaim){+.+.}-{0:0}, at: balance_pgdat+0x4aa/0x7a0
       #1: ffffffffabe50270 (shrinker_rwsem){++++}-{3:3}, at: shrink_slab+0x113/0x290
       #2: ffff8c6543abd0e0 (&type->s_umount_key#44){++++}-{3:3}, at: super_cache_scan+0x38/0x1f0
    
      stack backtrace:
      CPU: 0 PID: 46 Comm: kswapd0 Not tainted 6.3.0-rc7+ #1167
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x58/0x90
       check_noncircular+0xd6/0x100
       ? save_trace+0x3f/0x310
       ? add_lock_to_list+0x97/0x120
       __lock_acquire+0x1435/0x21a0
       lock_acquire+0xc2/0x2b0
       ? btrfs_commit_inode_delayed_inode+0x5f/0x120
       start_transaction+0x401/0x730
       ? btrfs_commit_inode_delayed_inode+0x5f/0x120
       btrfs_commit_inode_delayed_inode+0x5f/0x120
       btrfs_evict_inode+0x292/0x3d0
       ? lock_release+0x134/0x270
       ? __pfx_wake_bit_function+0x10/0x10
       evict+0xcc/0x1d0
       inode_lru_isolate+0x14d/0x1e0
       __list_lru_walk_one+0xbe/0x1c0
       ? __pfx_inode_lru_isolate+0x10/0x10
       ? __pfx_inode_lru_isolate+0x10/0x10
       list_lru_walk_one+0x58/0x80
       prune_icache_sb+0x39/0x60
       super_cache_scan+0x161/0x1f0
       do_shrink_slab+0x163/0x340
       shrink_slab+0x1d3/0x290
       shrink_node+0x300/0x720
       balance_pgdat+0x35c/0x7a0
       kswapd+0x205/0x410
       ? __pfx_autoremove_wake_function+0x10/0x10
       ? __pfx_kswapd+0x10/0x10
       kthread+0xf0/0x120
       ? __pfx_kthread+0x10/0x10
       ret_from_fork+0x29/0x50
       </TASK>
    
    This happens because when we abort the transaction in the transaction
    commit path we call invalidate_inode_pages2_range on our block group
    cache inodes (if we have space cache v1) and any delalloc inodes we may
    have.  The plain invalidate_inode_pages2_range() call passes through
    GFP_KERNEL, which makes sense in most cases, but not here.  Wrap these
    two invalidate callees with memalloc_nofs_save/memalloc_nofs_restore to
    make sure we don't end up with the fs reclaim dependency under the
    transaction dependency.
    
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e93fe1d17337208e64fd3e5f6282354f6041bbd
Author: Zev Weiss <zev@bewilderbeest.net>
Date:   Tue May 16 22:47:56 2023 -0700

    gpio: mockup: Fix mode of debugfs files
    
    commit 0a1bb16e0fe6650c3841e611de374bfd5578ad70 upstream.
    
    This driver's debugfs files have had a read operation since commit
    2a9e27408e12 ("gpio: mockup: rework debugfs interface"), but were
    still being created with write-only mode bits.  Update them to
    indicate that the files can also be read.
    
    Signed-off-by: Zev Weiss <zev@bewilderbeest.net>
    Fixes: 2a9e27408e12 ("gpio: mockup: rework debugfs interface")
    Cc: stable@kernel.org # v5.1+
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a2d238c5a3a4c5543212564e34c221887bbb48d
Author: Helge Deller <deller@gmx.de>
Date:   Mon May 22 22:57:30 2023 +0200

    parisc: Allow to reboot machine after system halt
    
    commit 2028315cf59bb899a5ac7e87dc48ecb8fac7ac24 upstream.
    
    In case a machine can't power-off itself on system shutdown,
    allow the user to reboot it by pressing the RETURN key.
    
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96f8dd0483c8388bcd53e64614457064f782e74b
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 24 14:34:58 2023 +0200

    parisc: Handle kgdb breakpoints only in kernel context
    
    commit 6888ff04e37d01295620a73f3f7efbc79f6ef152 upstream.
    
    The kernel kgdb break instructions should only be handled when running
    in kernel context.
    
    Cc: <stable@vger.kernel.org> # v5.4+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16deb7413ace8164e101c13c87d0a7962dabe53e
Author: Finn Thain <fthain@linux-m68k.org>
Date:   Sat May 6 19:38:12 2023 +1000

    m68k: Move signal frame following exception on 68020/030
    
    commit b845b574f86dcb6a70dfa698aa87a237b0878d2a upstream.
    
    On 68030/020, an instruction such as, moveml %a2-%a3/%a5,%sp@- may cause
    a stack page fault during instruction execution (i.e. not at an
    instruction boundary) and produce a format 0xB exception frame.
    
    In this situation, the value of USP will be unreliable.  If a signal is
    to be delivered following the exception, this USP value is used to
    calculate the location for a signal frame.  This can result in a
    corrupted user stack.
    
    The corruption was detected in dash (actually in glibc) where it showed
    up as an intermittent "stack smashing detected" message and crash
    following signal delivery for SIGCHLD.
    
    It was hard to reproduce that failure because delivery of the signal
    raced with the page fault and because the kernel places an unpredictable
    gap of up to 7 bytes between the USP and the signal frame.
    
    A format 0xB exception frame can be produced by a bus error or an
    address error.  The 68030 Users Manual says that address errors occur
    immediately upon detection during instruction prefetch.  The instruction
    pipeline allows prefetch to overlap with other instructions, which means
    an address error can arise during the execution of a different
    instruction.  So it seems likely that this patch may help in the address
    error case also.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Link: https://lore.kernel.org/all/CAMuHMdW3yD22_ApemzW_6me3adq6A458u1_F0v-1EYwK_62jPA@mail.gmail.com/
    Cc: Michael Schmitz <schmitzmic@gmail.com>
    Cc: Andreas Schwab <schwab@linux-m68k.org>
    Cc: stable@vger.kernel.org
    Co-developed-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Finn Thain <fthain@linux-m68k.org>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/9e66262a754fcba50208aa424188896cc52a1dd1.1683365892.git.fthain@linux-m68k.org
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9be921854e983a81a0aeeae5febcd87093086e46
Author: Tudor Ambarus <tudor.ambarus@linaro.org>
Date:   Wed May 17 13:38:08 2023 +0000

    net: cdc_ncm: Deal with too low values of dwNtbOutMaxSize
    
    commit 7e01c7f7046efc2c7c192c3619db43292b98e997 upstream.
    
    Currently in cdc_ncm_check_tx_max(), if dwNtbOutMaxSize is lower than
    the calculated "min" value, but greater than zero, the logic sets
    tx_max to dwNtbOutMaxSize. This is then used to allocate a new SKB in
    cdc_ncm_fill_tx_frame() where all the data is handled.
    
    For small values of dwNtbOutMaxSize the memory allocated during
    alloc_skb(dwNtbOutMaxSize, GFP_ATOMIC) will have the same size, due to
    how size is aligned at alloc time:
            size = SKB_DATA_ALIGN(size);
            size += SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
    Thus we hit the same bug that we tried to squash with
    commit 2be6d4d16a084 ("net: cdc_ncm: Allow for dwNtbOutMaxSize to be unset or zero")
    
    Low values of dwNtbOutMaxSize do not cause an issue presently because at
    alloc_skb() time more memory (512b) is allocated than required for the
    SKB headers alone (320b), leaving some space (512b - 320b = 192b)
    for CDC data (172b).
    
    However, if more elements (for example 3 x u64 = [24b]) were added to
    one of the SKB header structs, say 'struct skb_shared_info',
    increasing its original size (320b [320b aligned]) to something larger
    (344b [384b aligned]), then suddenly the CDC data (172b) no longer
    fits in the spare SKB data area (512b - 384b = 128b).
    
    Consequently the SKB bounds checking semantics fails and panics:
    
    skbuff: skb_over_panic: text:ffffffff831f755b len:184 put:172 head:ffff88811f1c6c00 data:ffff88811f1c6c00 tail:0xb8 end:0x80 dev:<NULL>
    ------------[ cut here ]------------
    kernel BUG at net/core/skbuff.c:113!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 57 Comm: kworker/0:2 Not tainted 5.15.106-syzkaller-00249-g19c0ed55a470 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/14/2023
    Workqueue: mld mld_ifc_work
    RIP: 0010:skb_panic net/core/skbuff.c:113 [inline]
    RIP: 0010:skb_over_panic+0x14c/0x150 net/core/skbuff.c:118
    [snip]
    Call Trace:
     <TASK>
     skb_put+0x151/0x210 net/core/skbuff.c:2047
     skb_put_zero include/linux/skbuff.h:2422 [inline]
     cdc_ncm_ndp16 drivers/net/usb/cdc_ncm.c:1131 [inline]
     cdc_ncm_fill_tx_frame+0x11ab/0x3da0 drivers/net/usb/cdc_ncm.c:1308
     cdc_ncm_tx_fixup+0xa3/0x100
    
    Deal with too low values of dwNtbOutMaxSize, clamp it in the range
    [USB_CDC_NCM_NTB_MIN_OUT_SIZE, CDC_NCM_NTB_MAX_SIZE_TX]. We ensure
    enough data space is allocated to handle CDC data by making sure
    dwNtbOutMaxSize is not smaller than USB_CDC_NCM_NTB_MIN_OUT_SIZE.
    
    Fixes: 289507d3364f ("net: cdc_ncm: use sysfs for rx/tx aggregation tuning")
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+9f575a1f15fc0c01ed69@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=b982f1059506db48409d
    Link: https://lore.kernel.org/all/20211202143437.1411410-1-lee.jones@linaro.org/
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230517133808.1873695-2-tudor.ambarus@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f6ae24e3d5a567c2a9b82de61cafcaf47df2890
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Tue May 16 16:46:30 2023 +0000

    ASoC: rt5682: Disable jack detection interrupt during suspend
    
    commit 8b271370e963370703819bd9795a54d658071bed upstream.
    
    The rt5682 driver switches its regmap to cache-only when the
    device suspends and back to regular mode on resume. When the
    jack detect interrupt fires rt5682_irq() schedules the jack
    detect work. This can result in invalid reads from the regmap
    in cache-only mode if the work runs before the device has
    resumed:
    
    [   56.245502] rt5682 9-001a: ASoC: error at soc_component_read_no_lock on rt5682.9-001a for register: [0x000000f0] -16
    
    Disable the jack detection interrupt during suspend and
    re-enable it on resume. The driver already schedules the
    jack detection work on resume, so any state change during
    suspend is still handled.
    
    This is essentially the same as commit f7d00a9be147 ("SoC:
    rt5682s: Disable jack detection interrupt during suspend")
    for the rt5682s.
    
    Cc: stable@kernel.org
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org
    Reviewed-by: Douglas Anderson <dianders@chromium.org
    Reviewed-by: Stephen Boyd <swboyd@chromium.org
    Link: https://lore.kernel.org/r/20230516164629.1.Ibf79e94b3442eecc0054d2b478779cc512d967fc@changeid
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 693acaa739dcde32828d4e92a11cbe3b4c1cef49
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Thu May 4 19:22:22 2023 +0800

    mmc: sdhci-esdhc-imx: make "no-mmc-hs400" works
    
    commit 81dce1490e28439c3cd8a8650b862a712f3061ba upstream.
    
    After commit 1ed5c3b22fc7 ("mmc: sdhci-esdhc-imx: Propagate
    ESDHC_FLAG_HS400* only on 8bit bus"), the property "no-mmc-hs400"
    from device tree file do not work any more.
    This patch reorder the code, which can avoid the warning message
    "drop HS400 support since no 8-bit bus" and also make the property
    "no-mmc-hs400" from dts file works.
    
    Fixes: 1ed5c3b22fc7 ("mmc: sdhci-esdhc-imx: Propagate ESDHC_FLAG_HS400* only on 8bit bus")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230504112222.3599602-1-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7177586e06ff8a14dfffad5cb40a33f1b8a575a8
Author: Bin Li <bin.li@canonical.com>
Date:   Wed May 24 19:37:55 2023 +0800

    ALSA: hda/realtek: Enable headset onLenovo M70/M90
    
    commit 4ca110cab46561cd74a2acd9b447435acb4bec5f upstream.
    
    Lenovo M70/M90 Gen4 are equipped with ALC897, and they need
    ALC897_FIXUP_HEADSET_MIC_PIN quirk to make its headset mic work.
    The previous quirk for M70/M90 is for Gen3.
    
    Signed-off-by: Bin Li <bin.li@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230524113755.1346928-1-bin.li@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6a624451afbafb7f6779600aad243c185893c26
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 18 13:35:20 2023 +0200

    ALSA: hda: Fix unhandled register update during auto-suspend period
    
    commit 81302b1c7c997e8a56c1c2fc63a296ebeb0cd2d0 upstream.
    
    It's reported that the recording started right after the driver probe
    doesn't work properly, and it turned out that this is related with the
    codec auto-suspend.  Namely, after the probe phase, the usage count
    goes zero, and the auto-suspend is programmed, but the codec is kept
    still active until the auto-suspend expiration.  When an application
    (e.g. alsactl) updates the mixer values at this moment, the values are
    cached but not actually written.  Then, starting arecord thereafter
    also results in the silence because of the missing unmute.
    
    The root cause is the handling of "lazy update" mode; when a mixer
    value is updated *after* the suspend, it should update only the cache
    and exits.  At the resume, the cached value is written to the device,
    in turn.  The problem is that the current code misinterprets the state
    of auto-suspend as if it were already suspended.
    
    Although we can add the check of the actual device state after
    pm_runtime_get_if_in_use() for catching the missing state, this won't
    suffice; the second call of regmap_update_bits_check() will skip
    writing the register because the cache has been already updated by the
    first call.  So we'd need fixes in two different places.
    
    OTOH, a simpler fix is to replace pm_runtime_get_if_in_use() with
    pm_runtime_get_if_active() (with ign_usage_count=true).  This change
    implies that the driver takes the pm refcount if the device is still
    in ACTIVE state and continues the processing.  A small caveat is that
    this will leave the auto-suspend timer.  But, since the timer callback
    itself checks the device state and aborts gracefully when it's active,
    this won't be any substantial problem.
    
    Long story short: we address the missing register-write problem just
    by replacing the pm_runtime_*() call in snd_hda_keep_power_up().
    
    Fixes: fc4f000bf8c0 ("ALSA: hda - Fix unexpected resume through regmap code path")
    Reported-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Closes: https://lore.kernel.org/r/a7478636-af11-92ab-731c-9b13c582a70d@linux.intel.com
    Suggested-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230518113520.15213-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7716da3fa10bb93aadc75119b3d100176a5d092a
Author: Adam Stylinski <kungfujesus06@gmail.com>
Date:   Sun May 21 10:52:23 2023 -0400

    ALSA: hda/ca0132: add quirk for EVGA X299 DARK
    
    commit 7843380d07bbeffd3ce6504e73cf61f840ae76ca upstream.
    
    This quirk is necessary for surround and other DSP effects to work
    with the onboard ca0132 based audio chipset for the EVGA X299 dark
    mainboard.
    
    Signed-off-by: Adam Stylinski <kungfujesus06@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=67071
    Link: https://lore.kernel.org/r/ZGopOe19T1QOwizS@eggsbenedict.adamsnet
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c37eb46c613ae72aee42300f94a2973ffe54c736
Author: Peter Collingbourne <pcc@google.com>
Date:   Thu Apr 20 14:09:45 2023 -0700

    arm64: Also reset KASAN tag if page is not PG_mte_tagged
    
    commit 2efbafb91e12ff5a16cbafb0085e4c10c3fca493 upstream.
    
    Consider the following sequence of events:
    
    1) A page in a PROT_READ|PROT_WRITE VMA is faulted.
    2) Page migration allocates a page with the KASAN allocator,
       causing it to receive a non-match-all tag, and uses it
       to replace the page faulted in 1.
    3) The program uses mprotect() to enable PROT_MTE on the page faulted in 1.
    
    As a result of step 3, we are left with a non-match-all tag for a page
    with tags accessible to userspace, which can lead to the same kind of
    tag check faults that commit e74a68468062 ("arm64: Reset KASAN tag in
    copy_highpage with HW tags only") intended to fix.
    
    The general invariant that we have for pages in a VMA with VM_MTE_ALLOWED
    is that they cannot have a non-match-all tag. As a result of step 2, the
    invariant is broken. This means that the fix in the referenced commit
    was incomplete and we also need to reset the tag for pages without
    PG_mte_tagged.
    
    Fixes: e5b8d9218951 ("arm64: mte: reset the page tag in page->flags")
    Cc: <stable@vger.kernel.org> # 5.15
    Link: https://linux-review.googlesource.com/id/I7409cdd41acbcb215c2a7417c1e50d37b875beff
    Signed-off-by: Peter Collingbourne <pcc@google.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20230420210945.2313627-1-pcc@google.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 291fe3d6f5dbafa6dd87a510c1351e8ce8a8a52e
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Tue Mar 14 09:17:16 2023 +0100

    ocfs2: Switch to security_inode_init_security()
    
    commit de3004c874e740304cc4f4a83d6200acb511bbda upstream.
    
    In preparation for removing security_old_inode_init_security(), switch to
    security_inode_init_security().
    
    Extend the existing ocfs2_initxattrs() to take the
    ocfs2_security_xattr_info structure from fs_info, and populate the
    name/value/len triple with the first xattr provided by LSMs.
    
    As fs_info was not used before, ocfs2_initxattrs() can now handle the case
    of replicating the behavior of security_old_inode_init_security(), i.e.
    just obtaining the xattr, in addition to setting all xattrs provided by
    LSMs.
    
    Supporting multiple xattrs is not currently supported where
    security_old_inode_init_security() was called (mknod, symlink), as it
    requires non-trivial changes that can be done at a later time. Like for
    reiserfs, even if EVM is invoked, it will not provide an xattr (if it is
    not the first to set it, its xattr will be discarded; if it is the first,
    it does not have xattrs to calculate the HMAC on).
    
    Finally, since security_inode_init_security(), unlike
    security_old_inode_init_security(), returns zero instead of -EOPNOTSUPP if
    no xattrs were provided by LSMs or if inodes are private, additionally
    check in ocfs2_init_security_get() if the xattr name is set.
    
    If not, act as if security_old_inode_init_security() returned -EOPNOTSUPP,
    and set si->enable to zero to notify to the functions following
    ocfs2_init_security_get() that no xattrs are available.
    
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: Casey Schaufler <casey@schaufler-ca.com>
    Acked-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4badd33929c05ed314794b95f1af1308f7222be8
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon May 15 16:07:17 2023 +0200

    spi: fsl-cpm: Use 16 bit mode for large transfers with even size
    
    (cherry picked from upstream fc96ec826bced75cc6b9c07a4ac44bbf651337ab)
    
    On CPM, the RISC core is a lot more efficiant when doing transfers
    in 16-bits chunks than in 8-bits chunks, but unfortunately the
    words need to be byte swapped as seen in a previous commit.
    
    So, for large tranfers with an even size, allocate a temporary tx
    buffer and byte-swap data before and after transfer.
    
    This change allows setting higher speed for transfer. For instance
    on an MPC 8xx (CPM1 comms RISC processor), the documentation tells
    that transfer in byte mode at 1 kbit/s uses 0.200% of CPM load
    at 25 MHz while a word transfer at the same speed uses 0.032%
    of CPM load. This means the speed can be 6 times higher in
    word mode for the same CPM load.
    
    For the time being, only do it on CPM1 as there must be a
    trade-off between the CPM load reduction and the CPU load required
    to byte swap the data.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Link: https://lore.kernel.org/r/f2e981f20f92dd28983c3949702a09248c23845c.1680371809.git.christophe.leroy@csgroup.eu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28ffe8c8460364a9470fd015f14b21eec544956a
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon May 15 16:07:16 2023 +0200

    spi: fsl-spi: Re-organise transfer bits_per_word adaptation
    
    (backported from upstream 8a5299a1278eadf1e08a598a5345c376206f171e)
    
    For different reasons, fsl-spi driver performs bits_per_word
    modifications for different reasons:
    - On CPU mode, to minimise amount of interrupts
    - On CPM/QE mode to work around controller byte order
    
    For CPU mode that's done in fsl_spi_prepare_message() while
    for CPM mode that's done in fsl_spi_setup_transfer().
    
    Reunify all of it in fsl_spi_prepare_message(), and catch
    impossible cases early through master's bits_per_word_mask
    instead of returning EINVAL later.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Link: https://lore.kernel.org/r/0ce96fe96e8b07cba0613e4097cfd94d09b8919a.1680371809.git.christophe.leroy@csgroup.eu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 381e55bffe15e8d63d98e5c095a995c33c9bf55b
Author: Olivier Moysan <olivier.moysan@foss.st.com>
Date:   Mon Jan 24 16:35:25 2022 +0100

    ARM: dts: stm32: fix AV96 board SAI2 pin muxing on stm32mp15
    
    commit ee2aacb6f3a901a95b1dd68964b69c92cdbbf213 upstream.
    
    Replace sai2a-2 node name by sai2a-sleep-2, to avoid name
    duplication.
    
    Fixes: 1a9a9d226f0f ("ARM: dts: stm32: fix AV96 board SAI2 pin muxing on stm32mp15")
    
    Signed-off-by: Olivier Moysan <olivier.moysan@foss.st.com>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Cc: Marek Vasut <marex@denx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca338fa8032a10e40ed005f84ed6c560dc7a1506
Author: Gregory Oakes <gregory.oakes@amd.com>
Date:   Thu Mar 16 15:13:12 2023 -0500

    watchdog: sp5100_tco: Immediately trigger upon starting.
    
    commit 4eda19cc8a29cde3580ed73bf11dc73b4e757697 upstream.
    
    The watchdog countdown is supposed to begin when the device file is
    opened. Instead, it would begin countdown upon the first write to or
    close of the device file. Now, the ping operation is called within the
    start operation which ensures the countdown begins. From experimenation,
    it does not appear possible to do this with a single write including
    both the start bit and the trigger bit. So, it is done as two distinct
    writes.
    
    Signed-off-by: Gregory Oakes <gregory.oakes@amd.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20230316201312.17538-1-gregory.oakes@amd.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6312c7cc07f397e0d11a1b1a7ca713a5711f9489
Author: Michal Simek <michal.simek@amd.com>
Date:   Fri May 12 13:52:04 2023 +0200

    dt-bindings: ata: ahci-ceva: Cover all 4 iommus entries
    
    [ Upstream commit a7844528722619d2f97740ae5ec747afff18c4be ]
    
    Current only one entry is enabled but IP itself is using 4 different IDs
    which are already listed in zynqmp.dtsi.
    
    sata: ahci@fd0c0000 {
            compatible = "ceva,ahci-1v84";
            ...
            iommus = <&smmu 0x4c0>, <&smmu 0x4c1>,
                     <&smmu 0x4c2>, <&smmu 0x4c3>;
    };
    
    Fixes: 8ac47837f0e0 ("arm64: dts: zynqmp: Add missing iommu IDs")
    Cc: stable@vger.kernel.org # v5.12+
    Signed-off-by: Michal Simek <michal.simek@amd.com>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ef9045fe7580cac85e81ae0192599a12345e4c2
Author: Piyush Mehta <piyush.mehta@xilinx.com>
Date:   Mon Jun 20 13:07:17 2022 +0530

    dt-bindings: ata: ahci-ceva: convert to yaml
    
    [ Upstream commit f2fb1b50fbac4a0a462e1705ac913abf52aae906 ]
    
    Convert the ahci-ceva doc to yaml.
    
    Signed-off-by: Piyush Mehta <piyush.mehta@xilinx.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20220620073717.3079-1-piyush.mehta@xilinx.com
    Stable-dep-of: a78445287226 ("dt-bindings: ata: ahci-ceva: Cover all 4 iommus entries")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f19171155305332c57ec3ee020996a31384d9bcd
Author: Linyu Yuan <quic_linyyuan@quicinc.com>
Date:   Fri May 12 08:45:24 2023 +0800

    usb: dwc3: fix gadget mode suspend interrupt handler issue
    
    [ Upstream commit 4e8ef34e36f2839ef8c8da521ab7035956436818 ]
    
    When work in gadget mode, currently driver doesn't update software level
    link_state correctly as link state change event is not enabled for most
    devices, in function dwc3_gadget_suspend_interrupt(), it will only pass
    suspend event to UDC core when software level link state changes, so when
    interrupt generated in sequences of suspend -> reset -> conndone ->
    suspend, link state is not updated during reset and conndone, so second
    suspend interrupt event will not pass to UDC core.
    
    Remove link_state compare in dwc3_gadget_suspend_interrupt() and add a
    suspended flag to replace the compare function.
    
    Fixes: 799e9dc82968 ("usb: dwc3: gadget: conditionally disable Link State change events")
    Cc: stable <stable@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Linyu Yuan <quic_linyyuan@quicinc.com>
    Link: https://lore.kernel.org/r/20230512004524.31950-1-quic_linyyuan@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7919af1dcb8eae143d8e787086e1ab4f2083e1fd
Author: Elson Roy Serrao <quic_eserrao@quicinc.com>
Date:   Fri Mar 24 14:47:57 2023 -0700

    usb: gadget: Properly configure the device for remote wakeup
    
    [ Upstream commit b93c2a68f3d9dc98ec30dcb342ae47c1c8d09d18 ]
    
    The wakeup bit in the bmAttributes field indicates whether the device
    is configured for remote wakeup. But this field should be allowed to
    set only if the UDC supports such wakeup mechanism. So configure this
    field based on UDC capability. Also inform the UDC whether the device
    is configured for remote wakeup by implementing a gadget op.
    
    Reviewed-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Elson Roy Serrao <quic_eserrao@quicinc.com>
    Link: https://lore.kernel.org/r/1679694482-16430-2-git-send-email-quic_eserrao@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 4e8ef34e36f2 ("usb: dwc3: fix gadget mode suspend interrupt handler issue")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b29299e5f604550faf3eff811d6cd60b4c6cae6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 30 12:49:31 2023 +0200

    Linux 6.1.22
    
    Link: https://lore.kernel.org/r/20230328142617.205414124@linuxfoundation.org
    Tested-by: Markus Reichelt <lkt+2023@mareichelt.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c31b663edc1cc5eb5c82282ab6ca99c69d1d942
Author: Ma Jun <Jun.Ma2@amd.com>
Date:   Sun Nov 6 20:34:27 2022 +0800

    drm/amdkfd: Fix the memory overrun
    
    commit 4cc16d64b6cdb179a26fb389cae9dce788e88f5d upstream.
    
    Fix the memory overrun issue caused by wrong array size.
    
    Signed-off-by: Ma Jun <Jun.Ma2@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reported-by: coverity-bot <keescook+coverity-bot@chromium.org>
    Addresses-Coverity-ID: 1527133 ("Memory - corruptions")
    Fixes: c0cc999f3c32e6 ("drm/amdkfd: Fix the warning of array-index-out-of-bounds")
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 132f1d39439142547d9d5e45d7744d375dd21fdc
Author: Yifan Zhang <yifan1.zhang@amd.com>
Date:   Wed Oct 12 13:01:22 2022 +0800

    drm/amdkfd: add GC 11.0.4 KFD support
    
    commit 88c21c2b56aa21dd34290d43ada74033dc3bfe35 upstream.
    
    Add initial support for GC 11.0.4 in KFD compute driver.
    
    Signed-off-by: Yifan Zhang <yifan1.zhang@amd.com>
    Reviewed-by: Aaron Liu <aaron.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Limonciello, Mario" <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ac954ec7f6c6dd6b7e94340599ba4b788d056d5
Author: Ma Jun <Jun.Ma2@amd.com>
Date:   Wed Nov 2 15:53:26 2022 +0800

    drm/amdkfd: Fix the warning of array-index-out-of-bounds
    
    commit c0cc999f3c32e65a7c88fb323893ddf897b24488 upstream.
    
    For some GPUs with more CUs, the original sibling_map[32]
    in struct crat_subtype_cache is not enough
    to save the cache information when create the VCRAT table,
    so skip filling the struct crat_subtype_cache info instead
    fill struct kfd_cache_properties directly to fix this problem.
    
    Signed-off-by: Ma Jun <Jun.Ma2@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Limonciello, Mario" <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5528973c676dad09a1af25cd49e4312238d1428
Author: Prike Liang <Prike.Liang@amd.com>
Date:   Fri Oct 21 16:38:48 2022 -0400

    drm/amdkfd: introduce dummy cache info for property asic
    
    commit fd72e2cb2f9dd2734e8013b3e185a21f0d605d3e upstream.
    
    This dummy cache info will enable kfd base function support.
    
    Signed-off-by: Prike Liang <Prike.Liang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Limonciello, Mario" <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 388c4c1d1212eb2015835c4587873b3d3ea115e9
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Fri Mar 17 17:08:10 2023 +0100

    sched/fair: Sanitize vruntime of entity being migrated
    
    commit a53ce18cacb477dd0513c607f187d16f0fa96f71 upstream.
    
    Commit 829c1651e9c4 ("sched/fair: sanitize vruntime of entity being placed")
    fixes an overflowing bug, but ignore a case that se->exec_start is reset
    after a migration.
    
    For fixing this case, we delay the reset of se->exec_start after
    placing the entity which se->exec_start to detect long sleeping task.
    
    In order to take into account a possible divergence between the clock_task
    of 2 rqs, we increase the threshold to around 104 days.
    
    Fixes: 829c1651e9c4 ("sched/fair: sanitize vruntime of entity being placed")
    Originally-by: Zhang Qiao <zhangqiao22@huawei.com>
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: Zhang Qiao <zhangqiao22@huawei.com>
    Link: https://lore.kernel.org/r/20230317160810.107988-1-vincent.guittot@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e427be68892e0eeeaafcc1029c77deb8ba4973db
Author: Zhang Qiao <zhangqiao22@huawei.com>
Date:   Mon Jan 30 13:22:16 2023 +0100

    sched/fair: sanitize vruntime of entity being placed
    
    commit 829c1651e9c4a6f78398d3e67651cef9bb6b42cc upstream.
    
    When a scheduling entity is placed onto cfs_rq, its vruntime is pulled
    to the base level (around cfs_rq->min_vruntime), so that the entity
    doesn't gain extra boost when placed backwards.
    
    However, if the entity being placed wasn't executed for a long time, its
    vruntime may get too far behind (e.g. while cfs_rq was executing a
    low-weight hog), which can inverse the vruntime comparison due to s64
    overflow.  This results in the entity being placed with its original
    vruntime way forwards, so that it will effectively never get to the cpu.
    
    To prevent that, ignore the vruntime of the entity being placed if it
    didn't execute for much longer than the characteristic sheduler time
    scale.
    
    [rkagan: formatted, adjusted commit log, comments, cutoff value]
    Signed-off-by: Zhang Qiao <zhangqiao22@huawei.com>
    Co-developed-by: Roman Kagan <rkagan@amazon.de>
    Signed-off-by: Roman Kagan <rkagan@amazon.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20230130122216.3555094-1-rkagan@amazon.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9d6816713b063eb4a284e935926cdbf287142ec
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Mar 8 14:39:54 2023 -0500

    dm crypt: avoid accessing uninitialized tasklet
    
    commit d9a02e016aaf5a57fb44e9a5e6da8ccd3b9e2e70 upstream.
    
    When neither "no_read_workqueue" nor "no_write_workqueue" are enabled,
    tasklet_trylock() in crypt_dec_pending() may still return false due to
    an uninitialized state, and dm-crypt will unnecessarily do io completion
    in io_queue workqueue instead of current context.
    
    Fix this by adding an 'in_tasklet' flag to dm_crypt_io struct and
    initialize it to false in crypt_io_init(). Set this flag to true in
    kcryptd_queue_crypt() before calling tasklet_schedule(). If set
    crypt_dec_pending() will punt io completion to a workqueue.
    
    This also nicely avoids the tasklet_trylock/unlock hack when tasklets
    aren't in use.
    
    Fixes: 8e14f610159d ("dm crypt: do not call bio_endio() from the dm-crypt tasklet")
    Cc: stable@vger.kernel.org
    Reported-by: Hou Tao <houtao1@huawei.com>
    Suggested-by: Ignat Korchagin <ignat@cloudflare.com>
    Reviewed-by: Ignat Korchagin <ignat@cloudflare.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0eb61b493dbbc32529fbd0d2e945b71b0e47306
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Mar 6 11:17:58 2023 -0500

    dm crypt: add cond_resched() to dmcrypt_write()
    
    commit fb294b1c0ba982144ca467a75e7d01ff26304e2b upstream.
    
    The loop in dmcrypt_write may be running for unbounded amount of time,
    thus we need cond_resched() in it.
    
    This commit fixes the following warning:
    
    [ 3391.153255][   C12] watchdog: BUG: soft lockup - CPU#12 stuck for 23s! [dmcrypt_write/2:2897]
    ...
    [ 3391.387210][   C12] Call trace:
    [ 3391.390338][   C12]  blk_attempt_bio_merge.part.6+0x38/0x158
    [ 3391.395970][   C12]  blk_attempt_plug_merge+0xc0/0x1b0
    [ 3391.401085][   C12]  blk_mq_submit_bio+0x398/0x550
    [ 3391.405856][   C12]  submit_bio_noacct+0x308/0x380
    [ 3391.410630][   C12]  dmcrypt_write+0x1e4/0x208 [dm_crypt]
    [ 3391.416005][   C12]  kthread+0x130/0x138
    [ 3391.419911][   C12]  ret_from_fork+0x10/0x18
    
    Reported-by: yangerkun <yangerkun@huawei.com>
    Fixes: dc2676210c42 ("dm crypt: offload writes to thread")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a42180dd361584816bfe15c137b665699b994d90
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Mar 16 14:55:06 2023 +0800

    dm stats: check for and propagate alloc_percpu failure
    
    commit d3aa3e060c4a80827eb801fc448debc9daa7c46b upstream.
    
    Check alloc_precpu()'s return value and return an error from
    dm_stats_init() if it fails. Update alloc_dev() to fail if
    dm_stats_init() does.
    
    Otherwise, a NULL pointer dereference will occur in dm_stats_cleanup()
    even if dm-stats isn't being actively used.
    
    Fixes: fd2ed4d25270 ("dm: add statistics support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c64e839585eac8048bf67b1c6dcb7a5ca189a2e
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Tue Mar 14 16:54:21 2023 +0000

    i2c: xgene-slimpro: Fix out-of-bounds bug in xgene_slimpro_i2c_xfer()
    
    commit 92fbb6d1296f81f41f65effd7f5f8c0f74943d15 upstream.
    
    The data->block[0] variable comes from user and is a number between
    0-255. Without proper check, the variable may be very large to cause
    an out-of-bounds when performing memcpy in slimpro_i2c_blkwr.
    
    Fix this bug by checking the value of writelen.
    
    Fixes: f6505fbabc42 ("i2c: add SLIMpro I2C device driver on APM X-Gene platform")
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d22bc65a98ff9c79402492c3133b122aa546330c
Author: Ivan Bornyakov <i.bornyakov@metrotek.ru>
Date:   Mon Mar 6 16:25:26 2023 +0300

    bus: imx-weim: fix branch condition evaluates to a garbage value
    
    commit 1adab2922c58e7ff4fa9f0b43695079402cce876 upstream.
    
    If bus type is other than imx50_weim_devtype and have no child devices,
    variable 'ret' in function weim_parse_dt() will not be initialized, but
    will be used as branch condition and return value. Fix this by
    initializing 'ret' with 0.
    
    This was discovered with help of clang-analyzer, but the situation is
    quite possible in real life.
    
    Fixes: 52c47b63412b ("bus: imx-weim: improve error handling upon child probe-failure")
    Signed-off-by: Ivan Bornyakov <i.bornyakov@metrotek.ru>
    Cc: stable@vger.kernel.org
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 286b0cab31bac29960e5684f6fb331d42f03b363
Author: Liam R. Howlett <Liam.Howlett@oracle.com>
Date:   Wed Mar 8 17:03:10 2023 -0500

    mm/ksm: fix race with VMA iteration and mm_struct teardown
    
    commit 6db504ce55bdbc575723938fc480713c9183f6a2 upstream.
    
    exit_mmap() will tear down the VMAs and maple tree with the mmap_lock held
    in write mode.  Ensure that the maple tree is still valid by checking
    ksm_test_exit() after taking the mmap_lock in read mode, but before the
    for_each_vma() iterator dereferences a destroyed maple tree.
    
    Since the maple tree is destroyed, the flags telling lockdep to check an
    external lock has been cleared.  Skip the for_each_vma() iterator to avoid
    dereferencing a maple tree without the external lock flag, which would
    create a lockdep warning.
    
    Link: https://lkml.kernel.org/r/20230308220310.3119196-1-Liam.Howlett@oracle.com
    Fixes: a5f18ba07276 ("mm/ksm: use vma iterators instead of vma linked list")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Reported-by: Pengfei Xu <pengfei.xu@intel.com>
      Link: https://lore.kernel.org/lkml/ZAdUUhSbaa6fHS36@xpf.sh.intel.com/
    Reported-by: syzbot+2ee18845e89ae76342c5@syzkaller.appspotmail.com
      Link: https://syzkaller.appspot.com/bug?id=64a3e95957cd3deab99df7cd7b5a9475af92c93e
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: <heng.su@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 318b65386756de5808cc687f97da61cd16f4f8d1
Author: Abel Vesa <abel.vesa@linaro.org>
Date:   Mon Mar 6 15:55:27 2023 +0200

    soc: qcom: llcc: Fix slice configuration values for SC8280XP
    
    commit 77bf4b3ed42e31d29b255fcd6530fb7a1e217e89 upstream.
    
    The slice IDs for CVPFW, CPUSS1 and CPUWHT currently overflow the 32bit
    LLCC config registers, which means it is writing beyond the upper limit
    of the ATTR0_CFGn and ATTR1_CFGn range of registers. But the most obvious
    impact is the fact that the mentioned slices do not get configured at all,
    which will result in reduced performance. Fix that by using the slice ID
    values taken from the latest LLCC SC table.
    
    Fixes: ec69dfbdc426 ("soc: qcom: llcc: Add sc8180x and sc8280xp configurations")
    Cc: stable@vger.kernel.org      # 5.19+
    Signed-off-by: Abel Vesa <abel.vesa@linaro.org>
    Tested-by: Juerg Haefliger <juerg.haefliger@canonical.com>
    Reviewed-by: Sai Prakash Ranjan <quic_saipraka@quicinc.com>
    Acked-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Reviewed-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230306135527.509796-1-abel.vesa@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83f40feee6906ef58005c8e68a24f88badc64e35
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Fri Feb 24 13:30:45 2023 +0530

    arm64: dts: qcom: sm8150: Fix the iommu mask used for PCIe controllers
    
    commit 672a58fc7c477e59981653a11241566870fff852 upstream.
    
    The iommu mask should be 0x3f as per Qualcomm internal documentation.
    Without the correct mask, the PCIe transactions from the endpoint will
    result in SMMU faults. Hence, fix it!
    
    Cc: stable@vger.kernel.org # 5.19
    Fixes: a1c86c680533 ("arm64: dts: qcom: sm8150: Add PCIe nodes")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Reviewed-by: Bhupesh Sharma <bhupesh.sharma@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230224080045.6577-1-manivannan.sadhasivam@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 267b899375bf38944d915c9654d6eb434edad0ce
Author: Krishna chaitanya chundru <quic_krichai@quicinc.com>
Date:   Tue Feb 28 17:19:12 2023 +0530

    arm64: dts: qcom: sc7280: Mark PCIe controller as cache coherent
    
    commit 8a63441e83724fee1ef3fd37b237d40d90780766 upstream.
    
    If the controller is not marked as cache coherent, then kernel will
    try to ensure coherency during dma-ops and that may cause data corruption.
    So, mark the PCIe node as dma-coherent as the devices on PCIe bus are
    cache coherent.
    
    Cc: stable@vger.kernel.org
    Fixes: 92e0ee9f83b3 ("arm64: dts: qcom: sc7280: Add PCIe and PHY related node")
    Signed-off-by: Krishna chaitanya chundru <quic_krichai@quicinc.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/1677584952-17496-1-git-send-email-quic_krichai@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0156ad2a60fe92373164399fc9a66976db4e60d1
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Tue Mar 7 16:23:24 2023 +0000

    firmware: arm_scmi: Fix device node validation for mailbox transport
    
    commit 2ab4f4018cb6b8010ca5002c3bdc37783b5d28c2 upstream.
    
    When mailboxes are used as a transport it is possible to setup the SCMI
    transport layer, depending on the underlying channels configuration, to use
    one or two mailboxes, associated, respectively, to one or two, distinct,
    shared memory areas: any other combination should be treated as invalid.
    
    Add more strict checking of SCMI mailbox transport device node descriptors.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Cc: <stable@vger.kernel.org> # 4.19
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20230307162324.891866-1-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a63cce9393e4e7dbc5af82dc87e68cb321cb1a78
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Tue Feb 28 15:11:20 2023 +0530

    tee: amdtee: fix race condition in amdtee_open_session
    
    commit f8502fba45bd30e1a6a354d9d898bc99d1a11e6d upstream.
    
    There is a potential race condition in amdtee_open_session that may
    lead to use-after-free. For instance, in amdtee_open_session() after
    sess->sess_mask is set, and before setting:
    
        sess->session_info[i] = session_info;
    
    if amdtee_close_session() closes this same session, then 'sess' data
    structure will be released, causing kernel panic when 'sess' is
    accessed within amdtee_open_session().
    
    The solution is to set the bit sess->sess_mask as the last step in
    amdtee_open_session().
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Acked-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a09fa7be62f5fc499e2713683f7e05a84712b1d
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Mon Mar 13 16:00:23 2023 -0700

    riscv: Handle zicsr/zifencei issues between clang and binutils
    
    commit e89c2e815e76471cb507bd95728bf26da7976430 upstream.
    
    There are two related issues that appear in certain combinations with
    clang and GNU binutils.
    
    The first occurs when a version of clang that supports zicsr or zifencei
    via '-march=' [1] (i.e, >= 17.x) is used in combination with a version
    of GNU binutils that do not recognize zicsr and zifencei in the
    '-march=' value (i.e., < 2.36):
    
      riscv64-linux-gnu-ld: -march=rv64i2p0_m2p0_a2p0_c2p0_zicsr2p0_zifencei2p0: Invalid or unknown z ISA extension: 'zifencei'
      riscv64-linux-gnu-ld: failed to merge target specific data of file fs/efivarfs/file.o
      riscv64-linux-gnu-ld: -march=rv64i2p0_m2p0_a2p0_c2p0_zicsr2p0_zifencei2p0: Invalid or unknown z ISA extension: 'zifencei'
      riscv64-linux-gnu-ld: failed to merge target specific data of file fs/efivarfs/super.o
    
    The second occurs when a version of clang that does not support zicsr or
    zifencei via '-march=' (i.e., <= 16.x) is used in combination with a
    version of GNU as that defaults to a newer ISA base spec, which requires
    specifying zicsr and zifencei in the '-march=' value explicitly (i.e, >=
    2.38):
    
      ../arch/riscv/kernel/kexec_relocate.S: Assembler messages:
      ../arch/riscv/kernel/kexec_relocate.S:147: Error: unrecognized opcode `fence.i', extension `zifencei' required
      clang-12: error: assembler command failed with exit code 1 (use -v to see invocation)
    
    This is the same issue addressed by commit 6df2a016c0c8 ("riscv: fix
    build with binutils 2.38") (see [2] for additional information) but
    older versions of clang miss out on it because the cc-option check
    fails:
    
      clang-12: error: invalid arch name 'rv64imac_zicsr_zifencei', unsupported standard user-level extension 'zicsr'
      clang-12: error: invalid arch name 'rv64imac_zicsr_zifencei', unsupported standard user-level extension 'zicsr'
    
    To resolve the first issue, only attempt to add zicsr and zifencei to
    the march string when using the GNU assembler 2.38 or newer, which is
    when the default ISA spec was updated, requiring these extensions to be
    specified explicitly. LLVM implements an older version of the base
    specification for all currently released versions, so these instructions
    are available as part of the 'i' extension. If LLVM's implementation is
    updated in the future, a CONFIG_AS_IS_LLVM condition can be added to
    CONFIG_TOOLCHAIN_NEEDS_EXPLICIT_ZICSR_ZIFENCEI.
    
    To resolve the second issue, use version 2.2 of the base ISA spec when
    using an older version of clang that does not support zicsr or zifencei
    via '-march=', as that is the spec version most compatible with the one
    clang/LLVM implements and avoids the need to specify zicsr and zifencei
    explicitly due to still being a part of 'i'.
    
    [1]: https://github.com/llvm/llvm-project/commit/22e199e6afb1263c943c0c0d4498694e15bf8a16
    [2]: https://lore.kernel.org/ZAxT7T9Xy1Fo3d5W@aurel32.net/
    
    Cc: stable@vger.kernel.org
    Link: https://github.com/ClangBuiltLinux/linux/issues/1808
    Co-developed-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/r/20230313-riscv-zicsr-zifencei-fiasco-v1-1-dd1b7840a551@kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa8a49b61007395c30c18a7478086c93945d1835
Author: Dylan Jhong <dylan@andestech.com>
Date:   Mon Mar 13 11:49:06 2023 +0800

    riscv: mm: Fix incorrect ASID argument when flushing TLB
    
    commit 9a801afd3eb95e1a89aba17321062df06fb49d98 upstream.
    
    Currently, we pass the CONTEXTID instead of the ASID to the TLB flush
    function. We should only take the ASID field to prevent from touching
    the reserved bit field.
    
    Fixes: 3f1e782998cd ("riscv: add ASID-based tlbflushing methods")
    Signed-off-by: Dylan Jhong <dylan@andestech.com>
    Reviewed-by: Sergey Matyukevich <sergey.matyukevich@syntacore.com>
    Link: https://lore.kernel.org/r/20230313034906.2401730-1-dylan@andestech.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75e10d7fb97906ddb641c7b09773a91693570f63
Author: Tim Huang <tim.huang@amd.com>
Date:   Wed Mar 15 15:52:09 2023 +0800

    drm/amdgpu: reposition the gpu reset checking for reuse
    
    commit aaee0ce460b954e08b6e630d7e54b2abb672feb8 upstream.
    
    Move the amdgpu_acpi_should_gpu_reset out of
    CONFIG_SUSPEND to share it with hibernate case.
    
    Signed-off-by: Tim Huang <tim.huang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.1.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f7e1dd835ec834fb147a7725419497f0b0d83a7
Author: Tim Huang <tim.huang@amd.com>
Date:   Thu Mar 9 16:27:51 2023 +0800

    drm/amdgpu: skip ASIC reset for APUs when go to S4
    
    commit b589626674de94d977e81c99bf7905872b991197 upstream.
    
    For GC IP v11.0.4/11, PSP TMR need to be reserved
    for ASIC mode2 reset. But for S4, when psp suspend,
    it will destroy the TMR that fails the ASIC reset.
    
    [  96.006101] amdgpu 0000:62:00.0: amdgpu: MODE2 reset
    [  100.409717] amdgpu 0000:62:00.0: amdgpu: SMU: I'm not done with your previous command: SMN_C2PMSG_66:0x00000011 SMN_C2PMSG_82:0x00000002
    [  100.411593] amdgpu 0000:62:00.0: amdgpu: Mode2 reset failed!
    [  100.412470] amdgpu 0000:62:00.0: PM: pci_pm_freeze(): amdgpu_pmops_freeze+0x0/0x50 [amdgpu] returns -62
    [  100.414020] amdgpu 0000:62:00.0: PM: dpm_run_callback(): pci_pm_freeze+0x0/0xd0 returns -62
    [  100.415311] amdgpu 0000:62:00.0: PM: pci_pm_freeze+0x0/0xd0 returned -62 after 4623202 usecs
    [  100.416608] amdgpu 0000:62:00.0: PM: failed to freeze async: error -62
    
    We can skip the reset on APUs, assuming we can resume them
    properly. Verified on some GFX11, GFX10 and old GFX9 APUs.
    
    Signed-off-by: Tim Huang <tim.huang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.1.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 220da3bf1fc335ae25b181d6bedcfc63efef6ccc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Feb 23 17:20:48 2023 +0200

    drm/i915: Preserve crtc_state->inherited during state clearing
    
    commit 3a84f2c6c9558c554a90ec26ad25df92fc5e05b7 upstream.
    
    intel_crtc_prepare_cleared_state() is unintentionally losing
    the "inherited" flag. This will happen if intel_initial_commit()
    is forced to go through the full modeset calculations for
    whatever reason.
    
    Afterwards the first real commit from userspace will not get
    forced to the full modeset path, and thus eg. audio state may
    not get recomputed properly. So if the monitor was already
    enabled during boot audio will not work until userspace itself
    does an explicit full modeset.
    
    Cc: stable@vger.kernel.org
    Tested-by: Lee Shawn C <shawn.c.lee@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230223152048.20878-1-ville.syrjala@linux.intel.com
    Reviewed-by: Uma Shankar <uma.shankar@intel.com>
    (cherry picked from commit 2553bacaf953b48c59357f5a622282bc0c45adae)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c355945957ef5e9bb05e0554fe4a6f92b0fcaf36
Author: Nirmoy Das <nirmoy.das@intel.com>
Date:   Tue Mar 14 15:29:14 2023 +0100

    drm/i915/active: Fix missing debug object activation
    
    commit e92eb246feb9019b0b137706c934b8891cdfe3c2 upstream.
    
    debug_active_activate() expected ref->count to be zero
    which is not true anymore as __i915_active_activate() calls
    debug_active_activate() after incrementing the count.
    
    v2: No need to check for "ref->count == 1" as __i915_active_activate()
    already make sure of that(Janusz).
    
    References: https://gitlab.freedesktop.org/drm/intel/-/issues/6733
    Fixes: 04240e30ed06 ("drm/i915: Skip taking acquire mutex for no ref->active callback")
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Thomas Hellström <thomas.hellstrom@intel.com>
    Cc: Andi Shyti <andi.shyti@linux.intel.com>
    Cc: intel-gfx@lists.freedesktop.org
    Cc: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Nirmoy Das <nirmoy.das@intel.com>
    Reviewed-by: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230313114613.9874-1-nirmoy.das@intel.com
    (cherry picked from commit bfad380c542438a9b642f8190b7fd37bc77e2723)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed6364fb7c407ca53447d8b0723a61d320bcbae9
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Mar 15 20:07:23 2023 +0800

    drm/amdgpu/nv: Apply ASPM quirk on Intel ADL + AMD Navi
    
    commit 2b072442f4962231a8516485012bb2d2551ef2fe upstream.
    
    S2idle resume freeze can be observed on Intel ADL + AMD WX5500. This is
    caused by commit 0064b0ce85bb ("drm/amd/pm: enable ASPM by default").
    
    The root cause is still not clear for now.
    
    So extend and apply the ASPM quirk from commit e02fe3bc7aba
    ("drm/amdgpu: vi: disable ASPM on Intel Alder Lake based systems"), to
    workaround the issue on Navi cards too.
    
    Fixes: 0064b0ce85bb ("drm/amd/pm: enable ASPM by default")
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2458
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19b4396f0a39102fbeb946ac41b5a8e769c3c0bc
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Mar 6 11:35:33 2023 +0100

    drm/meson: fix missing component unbind on bind errors
    
    commit ba98413bf45edbf33672e2539e321b851b2cfbd1 upstream.
    
    Make sure to unbind all subcomponents when binding the aggregate device
    fails.
    
    Fixes: a41e82e6c457 ("drm/meson: Add support for components")
    Cc: stable@vger.kernel.org      # 4.12
    Cc: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230306103533.4915-1-johan+linaro@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c590fce42c2117693bd0ee6646b3fc16a8f842ae
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Thu Mar 9 16:14:08 2023 -0500

    drm/amd/display: fix wrong index used in dccg32_set_dpstreamclk
    
    commit 4c94e57c258cb7800aa5f3a9d9597d91291407a9 upstream.
    
    [Why & How]
    When merging commit 9af611f29034
    ("drm/amd/display: Fix DCN32 DPSTREAMCLK_CNTL programming"),
    index change was not picked up.
    
    Cc: stable@vger.kernel.org
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Fixes: 9af611f29034 ("drm/amd/display: Fix DCN32 DPSTREAMCLK_CNTL programming")
    Reviewed-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dec28169efd847cb74358b2478bb0ee775d1c58e
Author: Matheus Castello <matheus.castello@toradex.com>
Date:   Wed Mar 22 15:38:21 2023 +0100

    drm/bridge: lt8912b: return EPROBE_DEFER if bridge is not found
    
    commit 1a70ca89d59c7c8af006d29b965a95ede0abb0da upstream.
    
    Returns EPROBE_DEFER when of_drm_find_bridge() fails, this is consistent
    with what all the other DRM bridge drivers are doing and this is
    required since the bridge might not be there when the driver is probed
    and this should not be a fatal failure.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 30e2ae943c26 ("drm/bridge: Introduce LT8912B DSI to HDMI bridge")
    Signed-off-by: Matheus Castello <matheus.castello@toradex.com>
    Signed-off-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230322143821.109744-1-francesco@dolcini.it
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f33b042f74fc9662eba17f4cd19b07d84bbc6c5
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Tue Mar 7 17:55:48 2023 +0900

    nilfs2: fix kernel-infoleak in nilfs_ioctl_wrap_copy()
    
    commit 003587000276f81d0114b5ce773d80c119d8cb30 upstream.
    
    The ioctl helper function nilfs_ioctl_wrap_copy(), which exchanges a
    metadata array to/from user space, may copy uninitialized buffer regions
    to user space memory for read-only ioctl commands NILFS_IOCTL_GET_SUINFO
    and NILFS_IOCTL_GET_CPINFO.
    
    This can occur when the element size of the user space metadata given by
    the v_size member of the argument nilfs_argv structure is larger than the
    size of the metadata element (nilfs_suinfo structure or nilfs_cpinfo
    structure) on the file system side.
    
    KMSAN-enabled kernels detect this issue as follows:
    
     BUG: KMSAN: kernel-infoleak in instrument_copy_to_user
     include/linux/instrumented.h:121 [inline]
     BUG: KMSAN: kernel-infoleak in _copy_to_user+0xc0/0x100 lib/usercopy.c:33
      instrument_copy_to_user include/linux/instrumented.h:121 [inline]
      _copy_to_user+0xc0/0x100 lib/usercopy.c:33
      copy_to_user include/linux/uaccess.h:169 [inline]
      nilfs_ioctl_wrap_copy+0x6fa/0xc10 fs/nilfs2/ioctl.c:99
      nilfs_ioctl_get_info fs/nilfs2/ioctl.c:1173 [inline]
      nilfs_ioctl+0x2402/0x4450 fs/nilfs2/ioctl.c:1290
      nilfs_compat_ioctl+0x1b8/0x200 fs/nilfs2/ioctl.c:1343
      __do_compat_sys_ioctl fs/ioctl.c:968 [inline]
      __se_compat_sys_ioctl+0x7dd/0x1000 fs/ioctl.c:910
      __ia32_compat_sys_ioctl+0x93/0xd0 fs/ioctl.c:910
      do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
      __do_fast_syscall_32+0xa2/0x100 arch/x86/entry/common.c:178
      do_fast_syscall_32+0x37/0x80 arch/x86/entry/common.c:203
      do_SYSENTER_32+0x1f/0x30 arch/x86/entry/common.c:246
      entry_SYSENTER_compat_after_hwframe+0x70/0x82
    
     Uninit was created at:
      __alloc_pages+0x9f6/0xe90 mm/page_alloc.c:5572
      alloc_pages+0xab0/0xd80 mm/mempolicy.c:2287
      __get_free_pages+0x34/0xc0 mm/page_alloc.c:5599
      nilfs_ioctl_wrap_copy+0x223/0xc10 fs/nilfs2/ioctl.c:74
      nilfs_ioctl_get_info fs/nilfs2/ioctl.c:1173 [inline]
      nilfs_ioctl+0x2402/0x4450 fs/nilfs2/ioctl.c:1290
      nilfs_compat_ioctl+0x1b8/0x200 fs/nilfs2/ioctl.c:1343
      __do_compat_sys_ioctl fs/ioctl.c:968 [inline]
      __se_compat_sys_ioctl+0x7dd/0x1000 fs/ioctl.c:910
      __ia32_compat_sys_ioctl+0x93/0xd0 fs/ioctl.c:910
      do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
      __do_fast_syscall_32+0xa2/0x100 arch/x86/entry/common.c:178
      do_fast_syscall_32+0x37/0x80 arch/x86/entry/common.c:203
      do_SYSENTER_32+0x1f/0x30 arch/x86/entry/common.c:246
      entry_SYSENTER_compat_after_hwframe+0x70/0x82
    
     Bytes 16-127 of 3968 are uninitialized
     ...
    
    This eliminates the leak issue by initializing the page allocated as
    buffer using get_zeroed_page().
    
    Link: https://lkml.kernel.org/r/20230307085548.6290-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+132fdd2f1e1805fdc591@syzkaller.appspotmail.com
      Link: https://lkml.kernel.org/r/000000000000a5bd2d05f63f04ae@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5d24e07e316914021bfcf8822ebdb89b2cd1c1e
Author: Felix Fietkau <nbd@nbd.name>
Date:   Tue Mar 14 10:59:50 2023 +0100

    wifi: mac80211: fix qos on mesh interfaces
    
    commit 4e348c6c6e23491ae6eb5e077848a42d0562339c upstream.
    
    When ieee80211_select_queue is called for mesh, the sta pointer is usually
    NULL, since the nexthop is looked up much later in the tx path.
    Explicitly check for unicast address in that case in order to make qos work
    again.
    
    Cc: stable@vger.kernel.org
    Fixes: 50e2ab392919 ("wifi: mac80211: fix queue selection for mesh/OCB interfaces")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20230314095956.62085-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b3ec5671ac06829ccebdaeec05acedfec327f42
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Thu Mar 23 21:15:52 2023 +0900

    ksmbd: return unsupported error on smb1 mount
    
    commit 39b291b86b5988bf8753c3874d5c773399d09b96 upstream.
    
    ksmbd disconnect connection when mounting with vers=smb1.
    ksmbd should send smb1 negotiate response to client for correct
    unsupported error return. This patch add needed SMB1 macros and fill
    NegProt part of the response for smb1 negotiate response.
    
    Cc: stable@vger.kernel.org
    Reported-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3060466e38caf731a5d6e429521c9ed04f644d62
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Tue Mar 21 15:36:40 2023 +0900

    ksmbd: return STATUS_NOT_SUPPORTED on unsupported smb2.0 dialect
    
    commit b53e8cfec30b93c120623232ba27c041b1ef8f1a upstream.
    
    ksmbd returned "Input/output error" when mounting with vers=2.0 to
    ksmbd. It should return STATUS_NOT_SUPPORTED on unsupported smb2.0
    dialect.
    
    Cc: stable@vger.kernel.org
    Reported-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe9591a5a004f7b3c14c1414e9aabe9602f2c387
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Tue Mar 21 15:25:34 2023 +0900

    ksmbd: don't terminate inactive sessions after a few seconds
    
    commit be6f42fad5f5fd1fea9d562df82c38ad6ed3bfe9 upstream.
    
    Steve reported that inactive sessions are terminated after a few
    seconds. ksmbd terminate when receiving -EAGAIN error from
    kernel_recvmsg(). -EAGAIN means there is no data available in timeout.
    So ksmbd should keep connection with unlimited retries instead of
    terminating inactive sessions.
    
    Cc: stable@vger.kernel.org
    Reported-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d55c0560893ca2d25770ff23bf54d80ad7365aae
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Wed Mar 1 00:02:30 2023 +0900

    ksmbd: set FILE_NAMED_STREAMS attribute in FS_ATTRIBUTE_INFORMATION
    
    commit 728f14c72b71a19623df329c1c7c9d1452e56f1e upstream.
    
    If vfs objects = streams_xattr in ksmbd.conf FILE_NAMED_STREAMS should
    be set to Attributes in FS_ATTRIBUTE_INFORMATION. MacOS client show
    "Format: SMB (Unknown)" on faked NTFS and no streams support.
    
    Cc: stable@vger.kernel.org
    Reported-by: Miao Lihua <441884205@qq.com>
    Tested-by: Miao Lihua <441884205@qq.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e54752f596a740d48f28588acad66836e707ebab
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Wed Mar 1 00:01:21 2023 +0900

    ksmbd: fix wrong signingkey creation when encryption is AES256
    
    commit 7a891d4b62d62566323676cb0e922ded4f37afe1 upstream.
    
    MacOS and Win11 support AES256 encrytion and it is included in the cipher
    array of encryption context. Especially on macOS, The most preferred
    cipher is AES256. Connecting to ksmbd fails on newer MacOS clients that
    support AES256 encryption. MacOS send disconnect request after receiving
    final session setup response from ksmbd. Because final session setup is
    signed with signing key was generated incorrectly.
    For signging key, 'L' value should be initialized to 128 if key size is
    16bytes.
    
    Cc: stable@vger.kernel.org
    Reported-by: Miao Lihua <441884205@qq.com>
    Tested-by: Miao Lihua <441884205@qq.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0608b3da04f5063fe503b7f9287ebb9c9b494fd7
Author: Liam R. Howlett <Liam.Howlett@oracle.com>
Date:   Tue Mar 7 13:02:46 2023 -0500

    maple_tree: fix mas_skip_node() end slot detection
    
    commit 0fa99fdfe1b38da396d0b2d1496a823bcd0ebea0 upstream.
    
    Patch series "Fix mas_skip_node() for mas_empty_area()", v2.
    
    mas_empty_area() was incorrectly returning an error when there was room.
    The issue was tracked down to mas_skip_node() using the incorrect
    end-of-slot count.  Instead of using the nodes hard limit, the limit of
    data should be used.
    
    mas_skip_node() was also setting the min and max to that of the child
    node, which was unnecessary.  Within these limits being set, there was
    also a bug that corrupted the maple state's max if the offset was set to
    the maximum node pivot.  The bug was without consequence unless there was
    a sufficient gap in the next child node which would cause an error to be
    returned.
    
    This patch set fixes these errors by removing the limit setting from
    mas_skip_node() and uses the mas_data_end() for slot limits, and adds
    tests for all failures discovered.
    
    
    This patch (of 2):
    
    mas_skip_node() is used to move the maple state to the node with a higher
    limit.  It does this by walking up the tree and increasing the slot count.
    Since slot count may not be able to be increased, it may need to walk up
    multiple times to find room to walk right to a higher limit node.  The
    limit of slots that was being used was the node limit and not the last
    location of data in the node.  This would cause the maple state to be
    shifted outside actual data and enter an error state, thus returning
    -EBUSY.
    
    The result of the incorrect error state means that mas_awalk() would
    return an error instead of finding the allocation space.
    
    The fix is to use mas_data_end() in mas_skip_node() to detect the nodes
    data end point and continue walking the tree up until it is safe to move
    to a node with a higher limit.
    
    The walk up the tree also sets the maple state limits so remove the buggy
    code from mas_skip_node().  Setting the limits had the unfortunate side
    effect of triggering another bug if the parent node was full and the there
    was no suitable gap in the second last child, but room in the next child.
    
    mas_skip_node() may also be passed a maple state in an error state from
    mas_anode_descend() when no allocations are available.  Return on such an
    error state immediately.
    
    Link: https://lkml.kernel.org/r/20230307180247.2220303-1-Liam.Howlett@oracle.com
    Link: https://lkml.kernel.org/r/20230307180247.2220303-2-Liam.Howlett@oracle.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Reported-by: Snild Dolkow <snild@sony.com>
      Link: https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/
    Tested-by: Snild Dolkow <snild@sony.com>
    Cc: Peng Zhang <zhangpeng.00@bytedance.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94f6b92bad23226a79f4b210e3740582c9d8947a
Author: Liam R. Howlett <Liam.Howlett@oracle.com>
Date:   Tue Mar 7 13:02:47 2023 -0500

    test_maple_tree: add more testing for mas_empty_area()
    
    commit 4bd6dded6318dc8e2514d74868c1f8fb38b61a60 upstream.
    
    Test robust filling of an entire area of the tree, then test one beyond.
    This is to test the walking back up the tree at the end of nodes and error
    condition.  Test inspired by the reproducer code provided by Snild Dolkow.
    
    The last test in the function tests for the case of a corrupted maple
    state caused by the incorrect limits set during mas_skip_node().  There
    needs to be a gap in the second last child and last child, but the search
    must rule out the second last child's gap.  This would avoid correcting
    the maple state to the correct max limit and return an error.
    
    Link: https://lkml.kernel.org/r/20230307180247.2220303-3-Liam.Howlett@oracle.com
    Cc: Snild Dolkow <snild@sony.com>
    Link: https://lore.kernel.org/linux-mm/cb8dc31a-fef2-1d09-f133-e9f7b9f9e77a@sony.com/
    Fixes: e15e06a83923 ("lib/test_maple_tree: add testing for maple tree")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Cc: Peng Zhang <zhangpeng.00@bytedance.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 450317033f04e6dff5cf9b675a9797ee602e25e3
Author: Peter Collingbourne <pcc@google.com>
Date:   Thu Mar 9 20:29:13 2023 -0800

    Revert "kasan: drop skip_kasan_poison variable in free_pages_prepare"
    
    commit f446883d12b8bfa486f7c98d403054d61d38c989 upstream.
    
    This reverts commit 487a32ec24be819e747af8c2ab0d5c515508086a.
    
    should_skip_kasan_poison() reads the PG_skip_kasan_poison flag from
    page->flags.  However, this line of code in free_pages_prepare():
    
            page->flags &= ~PAGE_FLAGS_CHECK_AT_PREP;
    
    clears most of page->flags, including PG_skip_kasan_poison, before calling
    should_skip_kasan_poison(), which meant that it would never return true as
    a result of the page flag being set.  Therefore, fix the code to call
    should_skip_kasan_poison() before clearing the flags, as we were doing
    before the reverted patch.
    
    This fixes a measurable performance regression introduced in the reverted
    commit, where munmap() takes longer than intended if HW tags KASAN is
    supported and enabled at runtime.  Without this patch, we see a
    single-digit percentage performance regression in a particular
    mmap()-heavy benchmark when enabling HW tags KASAN, and with the patch,
    there is no statistically significant performance impact when enabling HW
    tags KASAN.
    
    Link: https://lkml.kernel.org/r/20230310042914.3805818-2-pcc@google.com
    Fixes: 487a32ec24be ("kasan: drop skip_kasan_poison variable in free_pages_prepare")
      Link: https://linux-review.googlesource.com/id/Ic4f13affeebd20548758438bb9ed9ca40e312b79
    Signed-off-by: Peter Collingbourne <pcc@google.com>
    Reviewed-by: Andrey Konovalov <andreyknvl@gmail.com>
    Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com> [arm64]
    Cc: Evgenii Stepanov <eugenis@google.com>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: <stable@vger.kernel.org>    [6.1]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b100a45dc19ffd708f364ba66601efaca1ccf56
Author: Savino Dicanosa <sd7.dev@pm.me>
Date:   Tue Mar 21 19:44:02 2023 +0000

    io_uring/rsrc: fix null-ptr-deref in io_file_bitmap_get()
    
    commit 02a4d923e4400a36d340ea12d8058f69ebf3a383 upstream.
    
    When fixed files are unregistered, file_alloc_end and alloc_hint
    are not cleared. This can later cause a NULL pointer dereference in
    io_file_bitmap_get() if auto index selection is enabled via
    IORING_FILE_INDEX_ALLOC:
    
    [    6.519129] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [...]
    [    6.541468] RIP: 0010:_find_next_zero_bit+0x1a/0x70
    [...]
    [    6.560906] Call Trace:
    [    6.561322]  <TASK>
    [    6.561672]  io_file_bitmap_get+0x38/0x60
    [    6.562281]  io_fixed_fd_install+0x63/0xb0
    [    6.562851]  ? __pfx_io_socket+0x10/0x10
    [    6.563396]  io_socket+0x93/0xf0
    [    6.563855]  ? __pfx_io_socket+0x10/0x10
    [    6.564411]  io_issue_sqe+0x5b/0x3d0
    [    6.564914]  io_submit_sqes+0x1de/0x650
    [    6.565452]  __do_sys_io_uring_enter+0x4fc/0xb20
    [    6.566083]  ? __do_sys_io_uring_register+0x11e/0xd80
    [    6.566779]  do_syscall_64+0x3c/0x90
    [    6.567247]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [...]
    
    To fix the issue, set file alloc range and alloc_hint to zero after
    file tables are freed.
    
    Cc: stable@vger.kernel.org
    Fixes: 4278a0deb1f6 ("io_uring: defer alloc_hint update to io_file_bitmap_set()")
    Signed-off-by: Savino Dicanosa <sd7.dev@pm.me>
    [axboe: add explicit bitmap == NULL check as well]
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87f2d329f4cb1a3b5025d49f98379a3ae89b9fd2
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Mar 20 11:13:49 2023 -0600

    io_uring/net: avoid sending -ECONNABORTED on repeated connection requests
    
    commit 74e2e17ee1f8d8a0928b90434ad7e2df70f8483e upstream.
    
    Since io_uring does nonblocking connect requests, if we do two repeated
    ones without having a listener, the second will get -ECONNABORTED rather
    than the expected -ECONNREFUSED. Treat -ECONNABORTED like a normal retry
    condition if we're nonblocking, if we haven't already seen it.
    
    Cc: stable@vger.kernel.org
    Fixes: 3fb1bd688172 ("io_uring/net: handle -EINPROGRESS correct for IORING_OP_CONNECT")
    Link: https://github.com/axboe/liburing/issues/828
    Reported-by: Hui, Chunyang <sanqian.hcy@antgroup.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c00030a59a9a829b1be04c83dbe66994c0e4826
Author: Marco Elver <elver@google.com>
Date:   Thu Mar 16 23:47:04 2023 +0100

    kfence: avoid passing -g for test
    
    commit 2e08ca1802441224f5b7cc6bffbb687f7406de95 upstream.
    
    Nathan reported that when building with GNU as and a version of clang that
    defaults to DWARF5:
    
      $ make -skj"$(nproc)" ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- \
                            LLVM=1 LLVM_IAS=0 O=build \
                            mrproper allmodconfig mm/kfence/kfence_test.o
      /tmp/kfence_test-08a0a0.s: Assembler messages:
      /tmp/kfence_test-08a0a0.s:14627: Error: non-constant .uleb128 is not supported
      /tmp/kfence_test-08a0a0.s:14628: Error: non-constant .uleb128 is not supported
      /tmp/kfence_test-08a0a0.s:14632: Error: non-constant .uleb128 is not supported
      /tmp/kfence_test-08a0a0.s:14633: Error: non-constant .uleb128 is not supported
      /tmp/kfence_test-08a0a0.s:14639: Error: non-constant .uleb128 is not supported
      ...
    
    This is because `-g` defaults to the compiler debug info default.  If the
    assembler does not support some of the directives used, the above errors
    occur.  To fix, remove the explicit passing of `-g`.
    
    All the test wants is that stack traces print valid function names, and
    debug info is not required for that.  (I currently cannot recall why I
    added the explicit `-g`.)
    
    Link: https://lkml.kernel.org/r/20230316224705.709984-1-elver@google.com
    Fixes: bc8fbc5f305a ("kfence: add test suite")
    Signed-off-by: Marco Elver <elver@google.com>
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2a4304e9ff56d44dc95e37255a0d712bae986cb
Author: Muchun Song <muchun.song@linux.dev>
Date:   Wed Mar 15 11:44:41 2023 +0800

    mm: kfence: fix using kfence_metadata without initialization in show_object()
    
    commit 1c86a188e03156223a34d09ce290b49bd4dd0403 upstream.
    
    The variable kfence_metadata is initialized in kfence_init_pool(), then,
    it is not initialized if kfence is disabled after booting.  In this case,
    kfence_metadata will be used (e.g.  ->lock and ->state fields) without
    initialization when reading /sys/kernel/debug/kfence/objects.  There will
    be a warning if you enable CONFIG_DEBUG_SPINLOCK.  Fix it by creating
    debugfs files when necessary.
    
    Link: https://lkml.kernel.org/r/20230315034441.44321-1-songmuchun@bytedance.com
    Fixes: 0ce20dd84089 ("mm: add Kernel Electric-Fence infrastructure")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Tested-by: Marco Elver <elver@google.com>
    Reviewed-by: Marco Elver <elver@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: SeongJae Park <sjpark@amazon.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e8525f37871741a52370627633962f8bdcab15a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Mar 8 16:42:44 2023 +0100

    usb: ucsi_acpi: Increase the command completion timeout
    
    commit 02d210f434249a7edbc160969b75df030dc6934d upstream.
    
    Commit 130a96d698d7 ("usb: typec: ucsi: acpi: Increase command
    completion timeout value") increased the timeout from 5 seconds
    to 60 seconds due to issues related to alternate mode discovery.
    
    After the alternate mode discovery switch to polled mode
    the timeout was reduced, but instead of being set back to
    5 seconds it was reduced to 1 second.
    
    This is causing problems when using a Lenovo ThinkPad X1 yoga gen7
    connected over Type-C to a LG 27UL850-W (charging DP over Type-C).
    
    When the monitor is already connected at boot the following error
    is logged: "PPM init failed (-110)", /sys/class/typec is empty and
    on unplugging the NULL pointer deref fixed earlier in this series
    happens.
    
    When the monitor is connected after boot the following error
    is logged instead: "GET_CONNECTOR_STATUS failed (-110)".
    
    Setting the timeout back to 5 seconds fixes both cases.
    
    Fixes: e08065069fc7 ("usb: typec: ucsi: acpi: Reduce the command completion timeout")
    Cc: stable@vger.kernel.org
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230308154244.722337-4-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c5abcb13491da8c049f20462189c12c753ba978
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Mar 8 16:42:42 2023 +0100

    usb: ucsi: Fix NULL pointer deref in ucsi_connector_change()
    
    commit f87fb985452ab2083967103ac00bfd68fb182764 upstream.
    
    When ucsi_init() fails, ucsi->connector is NULL, yet in case of
    ucsi_acpi we may still get events which cause the ucs_acpi code to call
    ucsi_connector_change(), which then derefs the NULL ucsi->connector
    pointer.
    
    Fix this by not setting ucsi->ntfy inside ucsi_init() until ucsi_init()
    has succeeded, so that ucsi_connector_change() ignores the events
    because UCSI_ENABLE_NTFY_CONNECTOR_CHANGE is not set in the ntfy mask.
    
    Fixes: bdc62f2bae8f ("usb: typec: ucsi: Simplified registration and I/O API")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217106
    Cc: stable@vger.kernel.org
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230308154244.722337-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d0558c291227387de4625c895e1001aabb4978c
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Mon Mar 6 12:05:57 2023 -0800

    usb: dwc3: gadget: Add 1ms delay after end transfer command without IOC
    
    commit d8a2bb4eb75866275b5cf7de2e593ac3449643e2 upstream.
    
    Previously, there was a 100uS delay inserted after issuing an end transfer
    command for specific controller revisions.  This was due to the fact that
    there was a GUCTL2 bit field which enabled synchronous completion of the
    end transfer command once the CMDACT bit was cleared in the DEPCMD
    register.  Since this bit does not exist for all controller revisions and
    the current implementation heavily relies on utizling the EndTransfer
    command completion interrupt, add the delay back in for uses where the
    interrupt on completion bit is not set, and increase the duration to 1ms
    for the controller to complete the command.
    
    An issue was seen where the USB request buffer was unmapped while the DWC3
    controller was still accessing the TRB.  However, it was confirmed that the
    end transfer command was successfully submitted. (no end transfer timeout)
    In situations, such as dwc3_gadget_soft_disconnect() and
    __dwc3_gadget_ep_disable(), the dwc3_remove_request() is utilized, which
    will issue the end transfer command, and follow up with
    dwc3_gadget_giveback().  At least for the USB ep disable path, it is
    required for any pending and started requests to be completed and returned
    to the function driver in the same context of the disable call.  Without
    the GUCTL2 bit, it is not ensured that the end transfer is completed before
    the buffers are unmapped.
    
    Fixes: cf2f8b63f7f1 ("usb: dwc3: gadget: Remove END_TRANSFER delay")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230306200557.29387-1-quic_wcheng@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c1a06454f00ce3190ce78322cf05d54980f80e5
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Fri Mar 17 14:15:16 2023 +0800

    usb: chipidea: core: fix possible concurrent when switch role
    
    commit 451b15ed138ec15bffbebb58a00ebdd884c3e659 upstream.
    
    The user may call role_store() when driver is handling
    ci_handle_id_switch() which is triggerred by otg event or power lost
    event. Unfortunately, the controller may go into chaos in this case.
    Fix this by protecting it with mutex lock.
    
    Fixes: a932a8041ff9 ("usb: chipidea: core: add sysfs group")
    cc: <stable@vger.kernel.org>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Link: https://lore.kernel.org/r/20230317061516.2451728-2-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e3498143863f75ecbd3d06012ed30564cbe67a0
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Fri Mar 17 14:15:15 2023 +0800

    usb: chipdea: core: fix return -EINVAL if request role is the same with current role
    
    commit 3670de80678961eda7fa2220883fc77c16868951 upstream.
    
    It should not return -EINVAL if the request role is the same with current
    role, return non-error and without do anything instead.
    
    Fixes: a932a8041ff9 ("usb: chipidea: core: add sysfs group")
    cc: <stable@vger.kernel.org>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Link: https://lore.kernel.org/r/20230317061516.2451728-1-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfcd692c833e19a2f7ed615a5b9fafdac92d55d9
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Thu Mar 9 01:30:48 2023 -0500

    usb: cdnsp: changes PCI Device ID to fix conflict with CNDS3 driver
    
    commit 96b96b2a567fb34dd41c87e6cf01f6902ce8cae4 upstream.
    
    Patch changes CDNS_DEVICE_ID in USBSSP PCI Glue driver to remove
    the conflict with Cadence USBSS driver.
    
    cc: <stable@vger.kernel.org>
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20230309063048.299378-1-pawell@cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e6e31e0a6ee8d9423acaac1711669292a92cf49
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Tue Mar 7 06:14:20 2023 -0500

    usb: cdnsp: Fixes issue with redundant Status Stage
    
    commit 5bc38d33a5a1209fd4de65101d1ae8255ea12c6e upstream.
    
    In some cases, driver trees to send Status Stage twice.
    The first one from upper layer of gadget usb subsystem and
    second time from controller driver.
    This patch fixes this issue and remove tricky handling of
    SET_INTERFACE from controller driver which is no longer
    needed.
    
    cc: <stable@vger.kernel.org>
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20230307111420.376056-1-pawell@cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cc5fbfaacaa789e48d984eb65f3b1f5df9a5602
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Wed Mar 8 07:44:27 2023 -0500

    usb: cdns3: Fix issue with using incorrect PCI device function
    
    commit 1272fd652a226ccb34e9f47371b6121948048438 upstream.
    
    PCI based platform can have more than two PCI functions.
    USBSS PCI Glue driver during initialization should
    consider only DRD/HOST/DEVICE PCI functions and
    all other should be ignored. This patch adds additional
    condition which causes that only DRD and HOST/DEVICE
    function will be accepted.
    
    cc: <stable@vger.kernel.org>
    Fixes: 7733f6c32e36 ("usb: cdns3: Add Cadence USB3 DRD Driver")
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20230308124427.311245-1-pawell@cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d55ca2d2ea1a7ec553213986993fba8c0257381c
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Thu Feb 16 11:15:15 2023 +0800

    usb: typec: tcpm: fix warning when handle discover_identity message
    
    commit abfc4fa28f0160df61c7149567da4f6494dfb488 upstream.
    
    Since both source and sink device can send discover_identity message in
    PD3, kernel may dump below warning:
    
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 169 at drivers/usb/typec/tcpm/tcpm.c:1446 tcpm_queue_vdm+0xe0/0xf0
    Modules linked in:
    CPU: 0 PID: 169 Comm: 1-0050 Not tainted 6.1.1-00038-g6a3c36cf1da2-dirty #567
    Hardware name: NXP i.MX8MPlus EVK board (DT)
    pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : tcpm_queue_vdm+0xe0/0xf0
    lr : tcpm_queue_vdm+0x2c/0xf0
    sp : ffff80000c19bcd0
    x29: ffff80000c19bcd0 x28: 0000000000000001 x27: ffff0000d11c8ab8
    x26: ffff0000d11cc000 x25: 0000000000000000 x24: 00000000ff008081
    x23: 0000000000000001 x22: 00000000ff00a081 x21: ffff80000c19bdbc
    x20: 0000000000000000 x19: ffff0000d11c8080 x18: ffffffffffffffff
    x17: 0000000000000000 x16: 0000000000000000 x15: ffff0000d716f580
    x14: 0000000000000001 x13: ffff0000d716f507 x12: 0000000000000001
    x11: 0000000000000000 x10: 0000000000000020 x9 : 00000000000ee098
    x8 : 00000000ffffffff x7 : 000000000000001c x6 : ffff0000d716f580
    x5 : 0000000000000000 x4 : 0000000000000000 x3 : 0000000000000000
    x2 : ffff80000c19bdbc x1 : 00000000ff00a081 x0 : 0000000000000004
    Call trace:
    tcpm_queue_vdm+0xe0/0xf0
    tcpm_pd_rx_handler+0x340/0x1ab0
    kthread_worker_fn+0xcc/0x18c
    kthread+0x10c/0x110
    ret_from_fork+0x10/0x20
    ---[ end trace 0000000000000000 ]---
    
    Below sequences may trigger this warning:
    
    tcpm_send_discover_work(work)
      tcpm_send_vdm(port, USB_SID_PD, CMD_DISCOVER_IDENT, NULL, 0);
       tcpm_queue_vdm(port, header, data, count);
        port->vdm_state = VDM_STATE_READY;
    
    vdm_state_machine_work(work);
                            <-- received discover_identity from partner
     vdm_run_state_machine(port);
      port->vdm_state = VDM_STATE_SEND_MESSAGE;
       mod_vdm_delayed_work(port, x);
    
    tcpm_pd_rx_handler(work);
     tcpm_pd_data_request(port, msg);
      tcpm_handle_vdm_request(port, msg->payload, cnt);
       tcpm_queue_vdm(port, response[0], &response[1], rlen - 1);
    --> WARN_ON(port->vdm_state > VDM_STATE_DONE);
    
    For this case, the state machine could still send out discover
    identity message later if we skip current discover_identity message.
    So we should handle the received message firstly and override the pending
    discover_identity message without warning in this case. Then, a delayed
    send_discover work will send discover_identity message again.
    
    Fixes: e00943e91678 ("usb: typec: tcpm: PD3.0 sinks can send Discover Identity even in device mode")
    cc: <stable@vger.kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20230216031515.4151117-1-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 657431b040b8b132268a03133be4fbfec67a110b
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Wed Feb 15 13:49:51 2023 +0800

    usb: typec: tcpm: fix create duplicate source-capabilities file
    
    commit a826492fc9dfe32afd70fff93955ae8174bbf14b upstream.
    
    The kernel will dump in the below cases:
    sysfs: cannot create duplicate filename
    '/devices/virtual/usb_power_delivery/pd1/source-capabilities'
    
    1. After soft reset has completed, an Explicit Contract negotiation occurs.
    The sink device will receive source capabilitys again. This will cause
    a duplicate source-capabilities file be created.
    2. Power swap twice on a device that is initailly sink role.
    
    This will unregister existing capabilities when above cases occurs.
    
    Fixes: 8203d26905ee ("usb: typec: tcpm: Register USB Power Delivery Capabilities")
    cc: <stable@vger.kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20230215054951.238394-1-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0131f901835b56741e946809714b1612dc478973
Author: Coly Li <colyli@suse.de>
Date:   Mon Feb 27 23:23:17 2023 +0800

    dm thin: fix deadlock when swapping to thin device
    
    commit 9bbf5feecc7eab2c370496c1c161bbfe62084028 upstream.
    
    This is an already known issue that dm-thin volume cannot be used as
    swap, otherwise a deadlock may happen when dm-thin internal memory
    demand triggers swap I/O on the dm-thin volume itself.
    
    But thanks to commit a666e5c05e7c ("dm: fix deadlock when swapping to
    encrypted device"), the limit_swap_bios target flag can also be used
    for dm-thin to avoid the recursive I/O when it is used as swap.
    
    Fix is to simply set ti->limit_swap_bios to true in both pool_ctr()
    and thin_ctr().
    
    In my test, I create a dm-thin volume /dev/vg/swap and use it as swap
    device. Then I run fio on another dm-thin volume /dev/vg/main and use
    large --blocksize to trigger swap I/O onto /dev/vg/swap.
    
    The following fio command line is used in my test,
      fio --name recursive-swap-io --lockmem 1 --iodepth 128 \
         --ioengine libaio --filename /dev/vg/main --rw randrw \
        --blocksize 1M --numjobs 32 --time_based --runtime=12h
    
    Without this fix, the whole system can be locked up within 15 seconds.
    
    With this fix, there is no any deadlock or hung task observed after
    2 hours of running fio.
    
    Furthermore, if blocksize is changed from 1M to 128M, after around 30
    seconds fio has no visible I/O, and the out-of-memory killer message
    shows up in kernel message. After around 20 minutes all fio processes
    are killed and the whole system is back to being alive.
    
    This is exactly what is expected when recursive I/O happens on dm-thin
    volume when it is used as swap.
    
    Depends-on: a666e5c05e7c ("dm: fix deadlock when swapping to encrypted device")
    Cc: stable@vger.kernel.org
    Signed-off-by: Coly Li <colyli@suse.de>
    Acked-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62a64645749926f9d75af82a96440941f22b046f
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Mar 7 23:29:17 2023 +0800

    igb: revert rtnl_lock() that causes deadlock
    
    commit 65f69851e44d71248b952a687e44759a7abb5016 upstream.
    
    The commit 6faee3d4ee8b ("igb: Add lock to avoid data race") adds
    rtnl_lock to eliminate a false data race shown below
    
     (FREE from device detaching)      |   (USE from netdev core)
    igb_remove                         |  igb_ndo_get_vf_config
     igb_disable_sriov                 |  vf >= adapter->vfs_allocated_count?
      kfree(adapter->vf_data)          |
      adapter->vfs_allocated_count = 0 |
                                       |    memcpy(... adapter->vf_data[vf]
    
    The above race will never happen and the extra rtnl_lock causes deadlock
    below
    
    [  141.420169]  <TASK>
    [  141.420672]  __schedule+0x2dd/0x840
    [  141.421427]  schedule+0x50/0xc0
    [  141.422041]  schedule_preempt_disabled+0x11/0x20
    [  141.422678]  __mutex_lock.isra.13+0x431/0x6b0
    [  141.423324]  unregister_netdev+0xe/0x20
    [  141.423578]  igbvf_remove+0x45/0xe0 [igbvf]
    [  141.423791]  pci_device_remove+0x36/0xb0
    [  141.423990]  device_release_driver_internal+0xc1/0x160
    [  141.424270]  pci_stop_bus_device+0x6d/0x90
    [  141.424507]  pci_stop_and_remove_bus_device+0xe/0x20
    [  141.424789]  pci_iov_remove_virtfn+0xba/0x120
    [  141.425452]  sriov_disable+0x2f/0xf0
    [  141.425679]  igb_disable_sriov+0x4e/0x100 [igb]
    [  141.426353]  igb_remove+0xa0/0x130 [igb]
    [  141.426599]  pci_device_remove+0x36/0xb0
    [  141.426796]  device_release_driver_internal+0xc1/0x160
    [  141.427060]  driver_detach+0x44/0x90
    [  141.427253]  bus_remove_driver+0x55/0xe0
    [  141.427477]  pci_unregister_driver+0x2a/0xa0
    [  141.428296]  __x64_sys_delete_module+0x141/0x2b0
    [  141.429126]  ? mntput_no_expire+0x4a/0x240
    [  141.429363]  ? syscall_trace_enter.isra.19+0x126/0x1a0
    [  141.429653]  do_syscall_64+0x5b/0x80
    [  141.429847]  ? exit_to_user_mode_prepare+0x14d/0x1c0
    [  141.430109]  ? syscall_exit_to_user_mode+0x12/0x30
    [  141.430849]  ? do_syscall_64+0x67/0x80
    [  141.431083]  ? syscall_exit_to_user_mode_prepare+0x183/0x1b0
    [  141.431770]  ? syscall_exit_to_user_mode+0x12/0x30
    [  141.432482]  ? do_syscall_64+0x67/0x80
    [  141.432714]  ? exc_page_fault+0x64/0x140
    [  141.432911]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Since the igb_disable_sriov() will call pci_disable_sriov() before
    releasing any resources, the netdev core will synchronize the cleanup to
    avoid any races. This patch removes the useless rtnl_(un)lock to guarantee
    correctness.
    
    CC: stable@vger.kernel.org
    Fixes: 6faee3d4ee8b ("igb: Add lock to avoid data race")
    Reported-by: Corinna Vinschen <vinschen@redhat.com>
    Link: https://lore.kernel.org/intel-wired-lan/ZAcJvkEPqWeJHO2r@calimero.vinschen.de/
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Tested-by: Corinna Vinschen <vinschen@redhat.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8b34ed7cdac703d99b255887d6610558e1e3f56
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Feb 17 16:06:26 2023 +0100

    arm64: dts: imx8mm-nitrogen-r2: fix WM8960 clock name
    
    commit 32f86da7c86b27ebed31c24453a0713f612e43fb upstream.
    
    The WM8960 Linux driver expects the clock to be named "mclk".  Otherwise
    the clock will be ignored and not prepared/enabled by the driver.
    
    Fixes: 40ba2eda0a7b ("arm64: dts: imx8mm-nitrogen-r2: add audio")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41a68444e562dd7f793b056c9d51a06b4419097f
Author: Jeff Layton <jlayton@kernel.org>
Date:   Tue Mar 14 06:20:58 2023 -0400

    lockd: set file_lock start and end when decoding nlm4 testargs
    
    commit 7ff84910c66c9144cc0de9d9deed9fb84c03aff0 upstream.
    
    Commit 6930bcbfb6ce dropped the setting of the file_lock range when
    decoding a nlm_lock off the wire. This causes the client side grant
    callback to miss matching blocks and reject the lock, only to rerequest
    it 30s later.
    
    Add a helper function to set the file_lock range from the start and end
    values that the protocol uses, and have the nlm_lock decoder call that to
    set up the file_lock args properly.
    
    Fixes: 6930bcbfb6ce ("lockd: detect and reject lock arguments that overflow")
    Reported-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Tested-by: Amir Goldstein <amir73il@gmail.com>
    Cc: stable@vger.kernel.org #6.0
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 260becc3891ac69540f0d50a98d371587308144c
Author: Nathan Huckleberry <nhuck@google.com>
Date:   Fri Mar 10 11:33:25 2023 -0800

    fsverity: Remove WQ_UNBOUND from fsverity read workqueue
    
    commit f959325e6ac3f499450088b8d9c626d1177be160 upstream.
    
    WQ_UNBOUND causes significant scheduler latency on ARM64/Android.  This
    is problematic for latency sensitive workloads, like I/O
    post-processing.
    
    Removing WQ_UNBOUND gives a 96% reduction in fsverity workqueue related
    scheduler latency and improves app cold startup times by ~30ms.
    WQ_UNBOUND was also removed from the dm-verity workqueue for the same
    reason [1].
    
    This code was tested by running Android app startup benchmarks and
    measuring how long the fsverity workqueue spent in the runnable state.
    
    Before
    Total workqueue scheduler latency: 553800us
    After
    Total workqueue scheduler latency: 18962us
    
    [1]: https://lore.kernel.org/all/20230202012348.885402-1-nhuck@google.com/
    
    Signed-off-by: Nathan Huckleberry <nhuck@google.com>
    Fixes: 8a1d0f9cacc9 ("fs-verity: add data verification hooks for ->readpages()")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230310193325.620493-1-nhuck@google.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d77531fac6a1fd9f1db0195438ba5419d72b96c4
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Mar 13 15:12:29 2023 -0700

    fscrypt: destroy keyring after security_sb_delete()
    
    commit ccb820dc7d2236b1af0d54ae038a27b5b6d5ae5a upstream.
    
    fscrypt_destroy_keyring() must be called after all potentially-encrypted
    inodes were evicted; otherwise it cannot safely destroy the keyring.
    Since inodes that are in-use by the Landlock LSM don't get evicted until
    security_sb_delete(), this means that fscrypt_destroy_keyring() must be
    called *after* security_sb_delete().
    
    This fixes a WARN_ON followed by a NULL dereference, only possible if
    Landlock was being used on encrypted files.
    
    Fixes: d7e7b9af104c ("fscrypt: stop using keyrings subsystem for fscrypt_master_key")
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+93e495f6a4f748827c88@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/00000000000044651705f6ca1e30@google.com
    Reviewed-by: Christian Brauner <brauner@kernel.org>
    Link: https://lore.kernel.org/r/20230313221231.272498-2-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f311869d72f7bc15cbb8854a8e866c38c215143d
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Mar 21 09:30:59 2023 +0100

    mm/slab: Fix undefined init_cache_node_node() for NUMA and !SMP
    
    commit 66a1c22b709178e7b823d44465d0c2e5ed7492fb upstream.
    
    sh/migor_defconfig:
    
        mm/slab.c: In function ‘slab_memory_callback’:
        mm/slab.c:1127:23: error: implicit declaration of function ‘init_cache_node_node’; did you mean ‘drain_cache_node_node’? [-Werror=implicit-function-declaration]
         1127 |                 ret = init_cache_node_node(nid);
              |                       ^~~~~~~~~~~~~~~~~~~~
              |                       drain_cache_node_node
    
    The #ifdef condition protecting the definition of init_cache_node_node()
    no longer matches the conditions protecting the (multiple) users.
    
    Fix this by syncing the conditions.
    
    Fixes: 76af6a054da40553 ("mm/migrate: add CPU hotplug to demotion #ifdef")
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Link: https://lore.kernel.org/r/b5bdea22-ed2f-3187-6efe-0c72330270a4@infradead.org
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6766e457d4cde7ffe3ea0c91afe26a0be8dd21d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Mar 14 13:31:02 2023 +0100

    efi: sysfb_efi: Fix DMI quirks not working for simpledrm
    
    commit 3615c78673c332b69aaacefbcde5937c5c706686 upstream.
    
    Commit 8633ef82f101 ("drivers/firmware: consolidate EFI framebuffer setup
    for all arches") moved the sysfb_apply_efi_quirks() call in sysfb_init()
    from before the [sysfb_]parse_mode() call to after it.
    But sysfb_apply_efi_quirks() modifies the global screen_info struct which
    [sysfb_]parse_mode() parses, so doing it later is too late.
    
    This has broken all DMI based quirks for correcting wrong firmware efifb
    settings when simpledrm is used.
    
    To fix this move the sysfb_apply_efi_quirks() call back to its old place
    and split the new setup of the efifb_fwnode (which requires
    the platform_device) into its own function and call that at
    the place of the moved sysfb_apply_efi_quirks(pd) calls.
    
    Fixes: 8633ef82f101 ("drivers/firmware: consolidate EFI framebuffer setup for all arches")
    Cc: stable@vger.kernel.org
    Cc: Javier Martinez Canillas <javierm@redhat.com>
    Cc: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 608901a77c945ac15dea23f6098c9882ef19d9f0
Author: Min Li <lm0963hack@gmail.com>
Date:   Sat Mar 4 21:50:35 2023 +0800

    Bluetooth: Fix race condition in hci_cmd_sync_clear
    
    commit 1c66bee492a5fe00ae3fe890bb693bfc99f994c6 upstream.
    
    There is a potential race condition in hci_cmd_sync_work and
    hci_cmd_sync_clear, and could lead to use-after-free. For instance,
    hci_cmd_sync_work is added to the 'req_workqueue' after cancel_work_sync
    The entry of 'cmd_sync_work_list' may be freed in hci_cmd_sync_clear, and
    causing kernel panic when it is used in 'hci_cmd_sync_work'.
    
    Here's the call trace:
    
    dump_stack_lvl+0x49/0x63
    print_report.cold+0x5e/0x5d3
    ? hci_cmd_sync_work+0x282/0x320
    kasan_report+0xaa/0x120
    ? hci_cmd_sync_work+0x282/0x320
    __asan_report_load8_noabort+0x14/0x20
    hci_cmd_sync_work+0x282/0x320
    process_one_work+0x77b/0x11c0
    ? _raw_spin_lock_irq+0x8e/0xf0
    worker_thread+0x544/0x1180
    ? poll_idle+0x1e0/0x1e0
    kthread+0x285/0x320
    ? process_one_work+0x11c0/0x11c0
    ? kthread_complete_and_exit+0x30/0x30
    ret_from_fork+0x22/0x30
    </TASK>
    
    Allocated by task 266:
    kasan_save_stack+0x26/0x50
    __kasan_kmalloc+0xae/0xe0
    kmem_cache_alloc_trace+0x191/0x350
    hci_cmd_sync_queue+0x97/0x2b0
    hci_update_passive_scan+0x176/0x1d0
    le_conn_complete_evt+0x1b5/0x1a00
    hci_le_conn_complete_evt+0x234/0x340
    hci_le_meta_evt+0x231/0x4e0
    hci_event_packet+0x4c5/0xf00
    hci_rx_work+0x37d/0x880
    process_one_work+0x77b/0x11c0
    worker_thread+0x544/0x1180
    kthread+0x285/0x320
    ret_from_fork+0x22/0x30
    
    Freed by task 269:
    kasan_save_stack+0x26/0x50
    kasan_set_track+0x25/0x40
    kasan_set_free_info+0x24/0x40
    ____kasan_slab_free+0x176/0x1c0
    __kasan_slab_free+0x12/0x20
    slab_free_freelist_hook+0x95/0x1a0
    kfree+0xba/0x2f0
    hci_cmd_sync_clear+0x14c/0x210
    hci_unregister_dev+0xff/0x440
    vhci_release+0x7b/0xf0
    __fput+0x1f3/0x970
    ____fput+0xe/0x20
    task_work_run+0xd4/0x160
    do_exit+0x8b0/0x22a0
    do_group_exit+0xba/0x2a0
    get_signal+0x1e4a/0x25b0
    arch_do_signal_or_restart+0x93/0x1f80
    exit_to_user_mode_prepare+0xf5/0x1a0
    syscall_exit_to_user_mode+0x26/0x50
    ret_from_fork+0x15/0x30
    
    Fixes: 6a98e3836fa2 ("Bluetooth: Add helper for serialized HCI command execution")
    Cc: stable@vger.kernel.org
    Signed-off-by: Min Li <lm0963hack@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00331677c084db45d38333f4e76d7303712b21ee
Author: Naohiro Aota <naohiro.aota@wdc.com>
Date:   Mon Mar 13 16:29:49 2023 +0900

    btrfs: zoned: fix btrfs_can_activate_zone() to support DUP profile
    
    commit 9e1cdf0c354e46e428c0e0cab008abbe81b6013d upstream.
    
    btrfs_can_activate_zone() returns true if at least one device has one zone
    available for activation. This is OK for the single profile, but not OK for
    DUP profile. We need two zones to create a DUP block group. Fix it by
    properly handling the case with the profile flags.
    
    Fixes: 265f7237dd25 ("btrfs: zoned: allow DUP on meta-data block groups")
    CC: stable@vger.kernel.org # 6.1+
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bc7324e4911351e39c54a62e6ca46321cb10faf
Author: Alvin Šipraga <alsi@bang-olufsen.dk>
Date:   Thu Mar 2 17:36:47 2023 +0100

    usb: gadget: u_audio: don't let userspace block driver unbind
    
    commit 6c67ed9ad9b83e453e808f9b31a931a20a25629b upstream.
    
    In the unbind callback for f_uac1 and f_uac2, a call to snd_card_free()
    via g_audio_cleanup() will disconnect the card and then wait for all
    resources to be released, which happens when the refcount falls to zero.
    Since userspace can keep the refcount incremented by not closing the
    relevant file descriptor, the call to unbind may block indefinitely.
    This can cause a deadlock during reboot, as evidenced by the following
    blocked task observed on my machine:
    
      task:reboot  state:D stack:0   pid:2827  ppid:569    flags:0x0000000c
      Call trace:
       __switch_to+0xc8/0x140
       __schedule+0x2f0/0x7c0
       schedule+0x60/0xd0
       schedule_timeout+0x180/0x1d4
       wait_for_completion+0x78/0x180
       snd_card_free+0x90/0xa0
       g_audio_cleanup+0x2c/0x64
       afunc_unbind+0x28/0x60
       ...
       kernel_restart+0x4c/0xac
       __do_sys_reboot+0xcc/0x1ec
       __arm64_sys_reboot+0x28/0x30
       invoke_syscall+0x4c/0x110
       ...
    
    The issue can also be observed by opening the card with arecord and
    then stopping the process through the shell before unbinding:
    
      # arecord -D hw:UAC2Gadget -f S32_LE -c 2 -r 48000 /dev/null
      Recording WAVE '/dev/null' : Signed 32 bit Little Endian, Rate 48000 Hz, Stereo
      ^Z[1]+  Stopped                    arecord -D hw:UAC2Gadget -f S32_LE -c 2 -r 48000 /dev/null
      # echo gadget.0 > /sys/bus/gadget/drivers/configfs-gadget/unbind
      (observe that the unbind command never finishes)
    
    Fix the problem by using snd_card_free_when_closed() instead, which will
    still disconnect the card as desired, but defer the task of freeing the
    resources to the core once userspace closes its file descriptor.
    
    Fixes: 132fcb460839 ("usb: gadget: Add Audio Class 2.0 Driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Alvin Šipraga <alsi@bang-olufsen.dk>
    Reviewed-by: Ruslan Bilovol <ruslan.bilovol@gmail.com>
    Reviewed-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20230302163648.3349669-1-alvin@pqrs.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffb8ab6f87bd28d700ab5c20d9d3a7e75067630d
Author: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date:   Thu Mar 16 09:41:27 2023 +0100

    usb: dwc2: fix a devres leak in hw_enable upon suspend resume
    
    commit f747313249b74f323ddf841a9c8db14d989f296a upstream.
    
    Each time the platform goes to low power, PM suspend / resume routines
    call: __dwc2_lowlevel_hw_enable -> devm_add_action_or_reset().
    This adds a new devres each time.
    This may also happen at runtime, as dwc2_lowlevel_hw_enable() can be
    called from udc_start().
    
    This can be seen with tracing:
    - echo 1 > /sys/kernel/debug/tracing/events/dev/devres_log/enable
    - go to low power
    - cat /sys/kernel/debug/tracing/trace
    
    A new "ADD" entry is found upon each low power cycle:
    ... devres_log: 49000000.usb-otg ADD 82a13bba devm_action_release (8 bytes)
    ... devres_log: 49000000.usb-otg ADD 49889daf devm_action_release (8 bytes)
    ...
    
    A second issue is addressed here:
    - regulator_bulk_enable() is called upon each PM cycle (suspend/resume).
    - regulator_bulk_disable() never gets called.
    
    So the reference count for these regulators constantly increase, by one
    upon each low power cycle, due to missing regulator_bulk_disable() call
    in __dwc2_lowlevel_hw_disable().
    
    The original fix that introduced the devm_add_action_or_reset() call,
    fixed an issue during probe, that happens due to other errors in
    dwc2_driver_probe() -> dwc2_core_reset(). Then the probe fails without
    disabling regulators, when dr_mode == USB_DR_MODE_PERIPHERAL.
    
    Rather fix the error path: disable all the low level hardware in the
    error path, by using the "hsotg->ll_hw_enabled" flag. Checking dr_mode
    has been introduced to avoid a dual call to dwc2_lowlevel_hw_disable().
    "ll_hw_enabled" should achieve the same (and is used currently in the
    remove() routine).
    
    Fixes: 54c196060510 ("usb: dwc2: Always disable regulators on driver teardown")
    Fixes: 33a06f1300a7 ("usb: dwc2: Fix error path in gadget registration")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Link: https://lore.kernel.org/r/20230316084127.126084-1-fabrice.gasnier@foss.st.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd1340202266d51042c15f133fea3aef2e51944f
Author: Ziyang Huang <hzyitc@outlook.com>
Date:   Tue Feb 21 18:30:04 2023 +0800

    usb: dwc2: drd: fix inconsistent mode if role-switch-default-mode="host"
    
    commit 82f5332d3b9872ab5b287e85c57b76d8bb640cd1 upstream.
    
    Some boards might use USB-A female connector for USB ports, however,
    the port could be connected to a dual-mode USB controller, making it
    also behaves as a peripheral device if male-to-male cable is connected.
    
    In this case, the dts looks like this:
    
            &usb0 {
                    status = "okay";
                    dr_mode = "otg";
                    usb-role-switch;
                    role-switch-default-mode = "host";
            };
    
    After boot, dwc2_ovr_init() sets GOTGCTL to GOTGCTL_AVALOVAL and call
    dwc2_force_mode() with parameter host=false, which causes inconsistent
    mode - The hardware is in peripheral mode while the kernel status is
    in host mode.
    
    What we can do now is to call dwc2_drd_role_sw_set() to switch to
    device mode, and everything should work just fine now, even switching
    back to none(default) mode afterwards.
    
    Fixes: e14acb876985 ("usb: dwc2: drd: add role-switch-default-node support")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
    Tested-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Acked-by: Minas Harutyunyan <hminas@synopsys.com>
    Reviewed-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
    Link: https://lore.kernel.org/r/SG2PR01MB204837BF68EDB0E343D2A375C9A59@SG2PR01MB2048.apcprd01.prod.exchangelabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac49318c8adf324ca685244855d19104360dfc7f
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Thu Feb 23 08:39:20 2023 +0100

    usb: misc: onboard-hub: add support for Microchip USB2517 USB 2.0 hub
    
    commit f7c13cb48e85538709850589b496c4ddb3d3898e upstream.
    
    Add support for Microchip USB2517 USB 2.0 hub to the onboard usb hub
    driver. Adopt the generic usb-device compatible ("usbVID,PID").
    This hub has the same reset timings as USB2514, so reuse that one.
    There is also an USB2517I which just has industrial temperature range.
    
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Cc: stable <stable@kernel.org>
    Acked-by: Matthias Kaehlcke <mka@chromium.org>
    Link: https://lore.kernel.org/r/20230223073920.2912298-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b03b85ec8247023ee367cb8dd9bb107b18eb06c0
Author: Joel Selvaraj <joelselvaraj.oss@gmail.com>
Date:   Sun Mar 12 23:14:02 2023 -0500

    scsi: core: Add BLIST_SKIP_VPD_PAGES for SKhynix H28U74301AMR
    
    commit a204b490595de71016b2360a1886ec8c12d0afac upstream.
    
    Xiaomi Poco F1 (qcom/sdm845-xiaomi-beryllium*.dts) comes with a SKhynix
    H28U74301AMR UFS. The sd_read_cpr() operation leads to a 120 second
    timeout, making the device bootup very slow:
    
    [  121.457736] sd 0:0:0:1: [sdb] tag#23 timing out command, waited 120s
    
    Setting the BLIST_SKIP_VPD_PAGES allows the device to skip the failing
    sd_read_cpr operation and boot normally.
    
    Signed-off-by: Joel Selvaraj <joelselvaraj.oss@gmail.com>
    Link: https://lore.kernel.org/r/20230313041402.39330-1-joelselvaraj.oss@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d080337f682764181f6e507a0378274b965bca28
Author: Chang S. Bae <chang.seok.bae@intel.com>
Date:   Mon Feb 27 13:05:04 2023 -0800

    selftests/x86/amx: Add a ptrace test
    
    commit 62faca1ca10cc84e99ae7f38aa28df2bc945369b upstream.
    
    Include a test case to validate the XTILEDATA injection to the target.
    
    Also, it ensures the kernel's ability to copy states between different
    XSAVE formats.
    
    Refactor the memcmp() code to be usable for the state validation.
    
    Signed-off-by: Chang S. Bae <chang.seok.bae@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/20230227210504.18520-3-chang.seok.bae%40intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79f1e15c6b4b4e455eaae2ed5d5ca20972bd74d0
Author: Chang S. Bae <chang.seok.bae@intel.com>
Date:   Mon Feb 27 13:05:03 2023 -0800

    x86/fpu/xstate: Prevent false-positive warning in __copy_xstate_uabi_buf()
    
    commit b15888840207c2bfe678dd1f68a32db54315e71f upstream.
    
    __copy_xstate_to_uabi_buf() copies either from the tasks XSAVE buffer
    or from init_fpstate into the ptrace buffer. Dynamic features, like
    XTILEDATA, have an all zeroes init state and are not saved in
    init_fpstate, which means the corresponding bit is not set in the
    xfeatures bitmap of the init_fpstate header.
    
    But __copy_xstate_to_uabi_buf() retrieves addresses for both the tasks
    xstate and init_fpstate unconditionally via __raw_xsave_addr().
    
    So if the tasks XSAVE buffer has a dynamic feature set, then the
    address retrieval for init_fpstate triggers the warning in
    __raw_xsave_addr() which checks the feature bit in the init_fpstate
    header.
    
    Remove the address retrieval from init_fpstate for extended features.
    They have an all zeroes init state so init_fpstate has zeros for them.
    Then zeroing the user buffer for the init state is the same as copying
    them from init_fpstate.
    
    Fixes: 2308ee57d93d ("x86/fpu/amx: Enable the AMX feature in 64-bit mode")
    Reported-by: Mingwei Zhang <mizhang@google.com>
    Link: https://lore.kernel.org/kvm/20230221163655.920289-2-mizhang@google.com/
    Signed-off-by: Chang S. Bae <chang.seok.bae@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Tested-by: Mingwei Zhang <mizhang@google.com>
    Link: https://lore.kernel.org/all/20230227210504.18520-2-chang.seok.bae%40intel.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 362628048710b9eb1374d38a42c94098ba40bf3e
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Fri Mar 24 13:56:33 2023 -0300

    cifs: fix dentry lookups in directory handle cache
    
    commit be4fde79812f02914e350bde0bc4cfeae8429378 upstream.
    
    Get rid of any prefix paths in @path before lookup_positive_unlocked()
    as it will call ->lookup() which already adds those prefix paths
    through build_path_from_dentry().
    
    This has caused a performance regression when mounting shares with a
    prefix path where readdir(2) would end up retrying several times to
    open bad directory names that contained duplicate prefix paths.
    
    Fix this by skipping any prefix paths in @path before calling
    lookup_positive_unlocked().
    
    Fixes: e4029e072673 ("cifs: find and use the dentry for cached non-root directories also")
    Cc: stable@vger.kernel.org # 6.1+
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4bab65f80cefda01b1f9b6c7a22db139187705d
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Mon Mar 13 12:17:34 2023 +0000

    cifs: print session id while listing open files
    
    commit 175b54abc443b6965e9379b71ec05f7c73c192e9 upstream.
    
    In the output of /proc/fs/cifs/open_files, we only print
    the tree id for the tcon of each open file. It becomes
    difficult to know which tcon these files belong to with
    just the tree id.
    
    This change dumps ses id in addition to all other data today.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc9e203f9f51f59f19a5c521bd1378be0daa6227
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Mon Mar 13 11:09:12 2023 +0000

    cifs: dump pending mids for all channels in DebugData
    
    commit d12bc6d26f92c51b28e8f4a146ffcc630b688198 upstream.
    
    Currently, we only dump the pending mid information only
    on the primary channel in /proc/fs/cifs/DebugData.
    If multichannel is active, we do not print the pending MID
    list on secondary channels.
    
    This change will dump the pending mids for all the channels
    based on server->conn_id.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f401c35e6cb458708050df4a7c23df61b1333549
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Thu Mar 9 13:23:29 2023 +0000

    cifs: empty interface list when server doesn't support query interfaces
    
    commit 896cd316b841053f6df95ab77b5f1322c16a8e18 upstream.
    
    When querying server interfaces returns -EOPNOTSUPP,
    clear the list of interfaces. Assumption is that multichannel
    would be disabled too.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee1767a12e130e735a6c2a4faf03cde2c9c5c557
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Wed Mar 8 12:11:31 2023 +0000

    cifs: do not poll server interfaces too regularly
    
    commit 072a28c8907c841f7d4b56c78bce46d3ee211e73 upstream.
    
    We have the server interface list hanging off the tcon
    structure today for reasons unknown. So each tcon which is
    connected to a file server can query them separately,
    which is really unnecessary. To avoid this, in the query
    function, we will check the time of last update of the
    interface list, and avoid querying the server if it is
    within a certain range.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a163106b6d16a12fd5b9dadb304d274176d60639
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Fri Mar 17 12:51:17 2023 +0000

    cifs: append path to open_enter trace event
    
    commit fddc6ccc487e5de07b98df8d04118d5dcb5e0407 upstream.
    
    We do not dump the file path for smb3_open_enter ftrace
    calls, which is a severe handicap while debugging
    using ftrace evens. This change adds that info.
    
    Unfortunately, we're not updating the path in open params
    in many places; which I had to do as a part of this change.
    SMB2_open gets path in utf16 format, but it's easier of
    path is supplied as char pointer in oparms.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f11f6ea883de3eef3fe0a33c7df40de16e3115a5
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Mon Feb 20 13:02:11 2023 +0000

    cifs: lock chan_lock outside match_session
    
    commit 2f4e429c846972c8405951a9ff7a82aceeca7461 upstream.
    
    Coverity had rightly indicated a possible deadlock
    due to chan_lock being done inside match_session.
    All callers of match_* functions should pick up the
    necessary locks and call them.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Fixes: 724244cdb382 ("cifs: protect session channel fields with chan_lock")
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c8fc3fe28e47e2a495444347375f7354c24b018
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Fri Jan 20 18:01:40 2023 +0100

    act_mirred: use the backlog for nested calls to mirred ingress
    
    [ Upstream commit ca22da2fbd693b54dc8e3b7b54ccc9f7e9ba3640 ]
    
    William reports kernel soft-lockups on some OVS topologies when TC mirred
    egress->ingress action is hit by local TCP traffic [1].
    The same can also be reproduced with SCTP (thanks Xin for verifying), when
    client and server reach themselves through mirred egress to ingress, and
    one of the two peers sends a "heartbeat" packet (from within a timer).
    
    Enqueueing to backlog proved to fix this soft lockup; however, as Cong
    noticed [2], we should preserve - when possible - the current mirred
    behavior that counts as "overlimits" any eventual packet drop subsequent to
    the mirred forwarding action [3]. A compromise solution might use the
    backlog only when tcf_mirred_act() has a nest level greater than one:
    change tcf_mirred_forward() accordingly.
    
    Also, add a kselftest that can reproduce the lockup and verifies TC mirred
    ability to account for further packet drops after TC mirred egress->ingress
    (when the nest level is 1).
    
     [1] https://lore.kernel.org/netdev/33dc43f587ec1388ba456b4915c75f02a8aae226.1663945716.git.dcaratti@redhat.com/
     [2] https://lore.kernel.org/netdev/Y0w%2FWWY60gqrtGLp@pop-os.localdomain/
     [3] such behavior is not guaranteed: for example, if RPS or skb RX
         timestamping is enabled on the mirred target device, the kernel
         can defer receiving the skb and return NET_RX_SUCCESS inside
         tcf_mirred_forward().
    
    Reported-by: William Zhao <wizhao@redhat.com>
    CC: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0c12b9bfffcb56817bb5bada2da9d4a600cd64d
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Fri Jan 20 18:01:39 2023 +0100

    net/sched: act_mirred: better wording on protection against excessive stack growth
    
    [ Upstream commit 78dcdffe0418ac8f3f057f26fe71ccf4d8ed851f ]
    
    with commit e2ca070f89ec ("net: sched: protect against stack overflow in
    TC act_mirred"), act_mirred protected itself against excessive stack growth
    using per_cpu counter of nested calls to tcf_mirred_act(), and capping it
    to MIRRED_RECURSION_LIMIT. However, such protection does not detect
    recursion/loops in case the packet is enqueued to the backlog (for example,
    when the mirred target device has RPS or skb timestamping enabled). Change
    the wording from "recursion" to "nesting" to make it more clear to readers.
    
    CC: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: ca22da2fbd69 ("act_mirred: use the backlog for nested calls to mirred ingress")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0e39cdddc155926fc3c0395636b7c80e55e66a1
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Mar 1 09:36:06 2023 -0600

    drm/amd: Fix initialization mistake for NBIO 7.3.0
    
    [ Upstream commit 1717cc5f2962a4652c76ed3858b499ccae6c277c ]
    
    The same strapping initialization issue that happened on NBIO 7.5.1
    appears to be happening on NBIO 7.3.0.
    Apply the same fix to 7.3.0 as well.
    
    Note: This workaround relies upon the integrated GPU being enabled
    in BIOS. If the integrated GPU is disabled in BIOS a different
    workaround will be required.
    
    Reported-by: Thomas Glanzmann <thomas@glanzmann.de>
    Cc: Basavaraj Natikar <Basavaraj.Natikar@amd.com>
    Link: https://lore.kernel.org/linux-usb/Y%2Fz9GdHjPyF2rNG3@glanzmann.de/T/#u
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f06b902511ea05526f405ee64da54a8313d91831
Author: lyndonli <Lyndon.Li@amd.com>
Date:   Thu Mar 2 14:18:12 2023 +0800

    drm/amdgpu: Fix call trace warning and hang when removing amdgpu device
    
    [ Upstream commit 93bb18d2a873d2fa9625c8ea927723660a868b95 ]
    
    On GPUs with RAS enabled, below call trace and hang are observed when
    shutting down device.
    
    v2: use DRM device unplugged flag instead of shutdown flag as the check to
    prevent memory wipe in shutdown stage.
    
    [ +0.000000] RIP: 0010:amdgpu_vram_mgr_fini+0x18d/0x1c0 [amdgpu]
    [ +0.000001] PKRU: 55555554
    [ +0.000001] Call Trace:
    [ +0.000001] <TASK>
    [ +0.000002] amdgpu_ttm_fini+0x140/0x1c0 [amdgpu]
    [ +0.000183] amdgpu_bo_fini+0x27/0xa0 [amdgpu]
    [ +0.000184] gmc_v11_0_sw_fini+0x2b/0x40 [amdgpu]
    [ +0.000163] amdgpu_device_fini_sw+0xb6/0x510 [amdgpu]
    [ +0.000152] amdgpu_driver_release_kms+0x16/0x30 [amdgpu]
    [ +0.000090] drm_dev_release+0x28/0x50 [drm]
    [ +0.000016] devm_drm_dev_init_release+0x38/0x60 [drm]
    [ +0.000011] devm_action_release+0x15/0x20
    [ +0.000003] release_nodes+0x40/0xc0
    [ +0.000001] devres_release_all+0x9e/0xe0
    [ +0.000001] device_unbind_cleanup+0x12/0x80
    [ +0.000003] device_release_driver_internal+0xff/0x160
    [ +0.000001] driver_detach+0x4a/0x90
    [ +0.000001] bus_remove_driver+0x6c/0xf0
    [ +0.000001] driver_unregister+0x31/0x50
    [ +0.000001] pci_unregister_driver+0x40/0x90
    [ +0.000003] amdgpu_exit+0x15/0x120 [amdgpu]
    
    Signed-off-by: lyndonli <Lyndon.Li@amd.com>
    Reviewed-by: Guchun Chen <guchun.chen@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fdb54270f7c69c4cdf9b3ed610f8e6b76cb4f23
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Mar 6 01:20:30 2023 +0000

    sh: sanitize the flags on sigreturn
    
    [ Upstream commit 573b22ccb7ce9ab7f0539a2e11a9d3609a8783f5 ]
    
    We fetch %SR value from sigframe; it might have been modified by signal
    handler, so we can't trust it with any bits that are not modifiable in
    user mode.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Rich Felker <dalias@libc.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b66804fc7e21587431360af1dbcc1d9145237b7a
Author: Swapnil Patel <Swapnil.Patel@amd.com>
Date:   Wed Mar 1 14:33:33 2023 -0500

    drm/amd/display: Update clock table to include highest clock setting
    
    [ Upstream commit 2d99a7ec25cf456cd3680eb314d6454138e5aa64 ]
    
    [Why]
    Currently, the clk manager matches SocVoltage with voltage from
    fused settings (dfPstate clock table). And then corresponding clocks
    are selected.
    
    However in certain situations, this leads to clk manager not
    including at least one entry with highest supported clock setting.
    
    [How]
    Update the clk manager to include at least one entry with highest
    supported clock setting.
    
    Reviewed-by: Pavle Kotarac <pavle.kotarac@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Swapnil Patel <Swapnil.Patel@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43c33c48725244fc825cea1550ad8822fe67f1e2
Author: Enrico Sau <enrico.sau@gmail.com>
Date:   Mon Mar 6 13:05:28 2023 +0100

    net: usb: qmi_wwan: add Telit 0x1080 composition
    
    [ Upstream commit 382e363d5bed0cec5807b35761d14e55955eee63 ]
    
    Add the following Telit FE990 composition:
    
    0x1080: tty, adb, rmnet, tty, tty, tty, tty
    
    Signed-off-by: Enrico Sau <enrico.sau@gmail.com>
    Link: https://lore.kernel.org/r/20230306120528.198842-1-enrico.sau@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8224ef96a8de6b4db2580bc829da254cb822d645
Author: Enrico Sau <enrico.sau@gmail.com>
Date:   Mon Mar 6 12:59:33 2023 +0100

    net: usb: cdc_mbim: avoid altsetting toggling for Telit FE990
    
    [ Upstream commit 418383e6ed6b4624a54ec05c535f13d184fbf33b ]
    
    Add quirk CDC_MBIM_FLAG_AVOID_ALTSETTING_TOGGLE for Telit FE990
    0x1081 composition in order to avoid bind error.
    
    Signed-off-by: Enrico Sau <enrico.sau@gmail.com>
    Link: https://lore.kernel.org/r/20230306115933.198259-1-enrico.sau@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 886acbcb2982092f9052f2da4bd3956dab866f1a
Author: Daniel Scally <dan.scally@ideasonboard.com>
Date:   Thu Mar 2 10:26:11 2023 +0000

    platform/x86: int3472: Add GPIOs to Surface Go 3 Board data
    
    [ Upstream commit e8059d393158e927e36898aca89986a52025b9f3 ]
    
    Add the INT347E GPIO lookup table to the board data for the Surface
    Go 3. This is necessary to allow the ov7251 IR camera to probe
    properly on that platform.
    
    Signed-off-by: Daniel Scally <dan.scally@ideasonboard.com>
    Link: https://lore.kernel.org/r/20230302102611.314341-1-dan.scally@ideasonboard.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a7d64d3858451bbb1863b73e58cf5616307f927
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Mon Feb 27 08:48:34 2023 -0800

    scsi: storvsc: Handle BlockSize change in Hyper-V VHD/VHDX file
    
    [ Upstream commit 11d9874c4204a785f43d899a1ab12f9dc8d9de3e ]
    
    Hyper-V uses a VHD or VHDX file on the host as the underlying storage for a
    virtual disk.  The VHD/VHDX file format is a sparse format where real disk
    space on the host is assigned in chunks that the VHD/VHDX file format calls
    the BlockSize.  This BlockSize is not to be confused with the 512-byte (or
    4096-byte) sector size of the underlying storage device.  The default block
    size for a new VHD/VHDX file is 32 Mbytes.  When a guest VM touches any
    disk space within a 32 Mbyte chunk of the VHD/VHDX file, Hyper-V allocates
    32 Mbytes of real disk space for that section of the VHD/VHDX. Similarly,
    if a discard operation is done that covers an entire 32 Mbyte chunk,
    Hyper-V will free the real disk space for that portion of the VHD/VHDX.
    This BlockSize is surfaced in Linux as the "discard_granularity" in
    /sys/block/sd<x>/queue, which makes sense.
    
    Hyper-V also has differencing disks that can overlay a VHD/VHDX file to
    capture changes to the VHD/VHDX while preserving the original VHD/VHDX.
    One example of this differencing functionality is for VM snapshots.  When a
    snapshot is created, a differencing disk is created.  If the snapshot is
    rolled back, Hyper-V can just delete the differencing disk, and the VM will
    see the original disk contents at the time the snapshot was taken.
    Differencing disks are used in other scenarios as well.
    
    The BlockSize for a differencing disk defaults to 2 Mbytes, not 32 Mbytes.
    The smaller default is used because changes to differencing disks are
    typically scattered all over, and Hyper-V doesn't want to allocate 32
    Mbytes of real disk space for a stray write here or there.  The smaller
    BlockSize provides more efficient use of real disk space.
    
    When a differencing disk is added to a VHD/VHDX, Hyper-V reports
    UNIT_ATTENTION with a sense code indicating "Operating parameters have
    changed", because the value of discard_granularity should be changed to 2
    Mbytes. When the differencing disk is removed, discard_granularity should
    be changed back to 32 Mbytes.  However, current code simply reports a
    message from scsi_report_sense() and the value of
    /sys/block/sd<x>/queue/discard_granularity is not updated. The message
    isn't very actionable by a sysadmin.
    
    Fix this by having the storvsc driver check for the sense code indicating
    that the underly VHD/VHDX block size has changed, and do a rescan of the
    device to pick up the new discard_granularity.  With this change the entire
    transition to/from differencing disks is handled automatically and
    transparently, with no confusing messages being output.
    
    Link: https://lore.kernel.org/r/1677516514-86060-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f822ae8fb2a20fffa71e9bfa9b203c03d72d3ba
Author: Ranjan Kumar <ranjan.kumar@broadcom.com>
Date:   Tue Feb 28 06:08:35 2023 -0800

    scsi: mpi3mr: Bad drive in topology results kernel crash
    
    [ Upstream commit 8e45183978d64699df639e795235433a60f35047 ]
    
    When the SAS Transport Layer support is enabled and a device exposed to
    the OS by the driver fails INQUIRY commands, the driver frees up the memory
    allocated for an internal HBA port data structure. However, in some places,
    the reference to the freed memory is not cleared. When the firmware sends
    the Device Info change event for the same device again, the freed memory is
    accessed and that leads to memory corruption and OS crash.
    
    Signed-off-by: Ranjan Kumar <ranjan.kumar@broadcom.com>
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Link: https://lore.kernel.org/r/20230228140835.4075-7-ranjan.kumar@broadcom.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0b33e1d8dc182300f648c0e8acc5f70498c4a99
Author: Ranjan Kumar <ranjan.kumar@broadcom.com>
Date:   Tue Feb 28 06:08:34 2023 -0800

    scsi: mpi3mr: NVMe command size greater than 8K fails
    
    [ Upstream commit 4f297e856a7b5da2f2c66a12e739666e23943560 ]
    
    A wrong variable is checked while populating PRP entries in the PRP page
    and this results in failure. No PRP entries in the PRP page were
    successfully created and any NVMe Encapsulated commands with PRP of size
    greater than 8K failed.
    
    Signed-off-by: Ranjan Kumar <ranjan.kumar@broadcom.com>
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Link: https://lore.kernel.org/r/20230228140835.4075-6-ranjan.kumar@broadcom.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92548801f01e4adfbc95de18849e8aee21aeeb5a
Author: Ranjan Kumar <ranjan.kumar@broadcom.com>
Date:   Tue Feb 28 06:08:32 2023 -0800

    scsi: mpi3mr: Wait for diagnostic save during controller init
    
    [ Upstream commit 0a319f1629495d27879b7ebf6eee62b8cf6e4c37 ]
    
    If a controller reset operation is triggered to recover the controller from
    a fault state, then wait for the snapdump to be saved in the firmware
    region before proceeding to reset the controller.
    
    Signed-off-by: Ranjan Kumar <ranjan.kumar@broadcom.com>
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Link: https://lore.kernel.org/r/20230228140835.4075-4-ranjan.kumar@broadcom.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88f7fb47e0f016fdbbc15568e68bb12af6e2c8fb
Author: Ranjan Kumar <ranjan.kumar@broadcom.com>
Date:   Tue Feb 28 06:08:31 2023 -0800

    scsi: mpi3mr: Driver unload crashes host when enhanced logging is enabled
    
    [ Upstream commit 5b06a7169c59ce0c77ef8b9c82aa07c478f82aac ]
    
    Prevent driver from trying to dereference a NULL pointer in a debug print
    while removing a device during driver unload.
    
    Signed-off-by: Ranjan Kumar <ranjan.kumar@broadcom.com>
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Link: https://lore.kernel.org/r/20230228140835.4075-3-ranjan.kumar@broadcom.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec3a119c30e56e98e7a26ebe8b363f64c18ce2f5
Author: Jakob Koschel <jkl820.git@gmail.com>
Date:   Wed Mar 1 18:19:14 2023 +0100

    scsi: lpfc: Avoid usage of list iterator variable after loop
    
    [ Upstream commit 2850b23e9f9ae3696e472d2883ea1b43aafa884e ]
    
    If the &epd_pool->list is empty when executing
    lpfc_get_io_buf_from_expedite_pool() the function would return an invalid
    pointer. Even in the case if the list is guaranteed to be populated, the
    iterator variable should not be used after the loop to be more robust for
    future changes.
    
    Linus proposed to avoid any use of the list iterator variable after the
    loop, in the attempt to move the list iterator variable declaration into
    the macro to avoid any potential misuse after the loop [1].
    
    Link: https://lore.kernel.org/all/CAHk-=wgRr_D8CB-D9Kg-c=EHreAsk5SqXPwr9Y7k9sA6cWXJ6w@mail.gmail.com/ [1]
    Signed-off-by: Jakob Koschel <jkl820.git@gmail.com>
    Link: https://lore.kernel.org/r/20230301-scsi-lpfc-avoid-list-iterator-after-loop-v1-1-325578ae7561@gmail.com
    Reviewed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4829a1e1171536978b240a1438789c2e4d5c9715
Author: Justin Tee <justin.tee@broadcom.com>
Date:   Mon Feb 27 20:43:36 2023 -0800

    scsi: lpfc: Check kzalloc() in lpfc_sli4_cgn_params_read()
    
    [ Upstream commit 312320b0e0ec21249a17645683fe5304d796aec1 ]
    
    If kzalloc() fails in lpfc_sli4_cgn_params_read(), then we rely on
    lpfc_read_object()'s routine to NULL check pdata.
    
    Currently, an early return error is thrown from lpfc_read_object() to
    protect us from NULL ptr dereference, but the errno code is -ENODEV.
    
    Change the errno code to a more appropriate -ENOMEM.
    
    Reported-by: Kang Chen <void0red@gmail.com>
    Link: https://lore.kernel.org/all/20230226102338.3362585-1-void0red@gmail.com
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Link: https://lore.kernel.org/r/20230228044336.5195-1-justintee8345@gmail.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 476d8ca83e6c611f499d327777e688e8b76ac657
Author: Adrien Thierry <athierry@redhat.com>
Date:   Mon Feb 20 09:07:40 2023 -0500

    scsi: ufs: core: Add soft dependency on governor_simpleondemand
    
    [ Upstream commit 2ebe16155dc8bd4e602cad5b5f65458d2eaa1a75 ]
    
    The ufshcd driver uses simpleondemand governor for devfreq. Add it to the
    list of ufshcd softdeps to allow userspace initramfs tools like dracut to
    automatically pull the governor module into the initramfs together with UFS
    drivers.
    
    Link: https://lore.kernel.org/r/20230220140740.14379-1-athierry@redhat.com
    Signed-off-by: Adrien Thierry <athierry@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d92460985d782a65393ae1aff75c8aba044512e8
Author: Kang Chen <void0red@gmail.com>
Date:   Mon Feb 27 11:10:30 2023 +0800

    scsi: hisi_sas: Check devm_add_action() return value
    
    [ Upstream commit 06d1a90de60208054cca15ef200138cfdbb642a9 ]
    
    In case devm_add_action() fails, check it in the caller of
    interrupt_preinit_v3_hw().
    
    Link: https://lore.kernel.org/r/20230227031030.893324-1-void0red@gmail.com
    Signed-off-by: Kang Chen <void0red@gmail.com>
    Acked-by: Xiang Chen <chenxiang66@hisilicon.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b139678fb1b37097ece89c16a500387a3dfde78e
Author: Daniel Wagner <dwagner@suse.de>
Date:   Wed Feb 8 16:20:14 2023 +0100

    scsi: qla2xxx: Add option to disable FC2 Target support
    
    [ Upstream commit 877b03795fcf29ff2e2351f7e574ecc9b9c51732 ]
    
    Commit 44c57f205876 ("scsi: qla2xxx: Changes to support FCP2 Target") added
    support for FC2 Targets. Unfortunately, there are older setups which break
    with this new feature enabled.
    
    Allow to disable it via module option.
    
    Link: https://lore.kernel.org/r/20230208152014.109214-1-dwagner@suse.de
    Signed-off-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27f6579f3c0cb441042e6a72f4e114ef435225db
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Tue Feb 14 15:15:56 2023 +0100

    scsi: target: iscsi: Fix an error message in iscsi_check_key()
    
    [ Upstream commit 6cc55c969b7ce8d85e09a636693d4126c3676c11 ]
    
    The first half of the error message is printed by pr_err(), the second half
    is printed by pr_debug(). The user will therefore see only the first part
    of the message and will miss some useful information.
    
    Link: https://lore.kernel.org/r/20230214141556.762047-1-mlombard@redhat.com
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95ba926edd651485f2bc632dd938a415df2e4876
Author: Lorenz Bauer <lorenz.bauer@isovalent.com>
Date:   Mon Mar 6 11:21:38 2023 +0000

    selftests/bpf: check that modifier resolves after pointer
    
    [ Upstream commit dfdd608c3b365f0fd49d7e13911ebcde06b9865b ]
    
    Add a regression test that ensures that a VAR pointing at a
    modifier which follows a PTR (or STRUCT or ARRAY) is resolved
    correctly by the datasec validator.
    
    Signed-off-by: Lorenz Bauer <lmb@isovalent.com>
    Link: https://lore.kernel.org/r/20230306112138.155352-3-lmb@isovalent.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54fa25ffab2b700df5abd58c136d64a912c53953
Author: Michael Schmitz <schmitzmic@gmail.com>
Date:   Wed Mar 1 15:11:07 2023 +1300

    m68k: Only force 030 bus error if PC not in exception table
    
    [ Upstream commit e36a82bebbf7da814530d5a179bef9df5934b717 ]
    
    __get_kernel_nofault() does copy data in supervisor mode when
    forcing a task backtrace log through /proc/sysrq_trigger.
    This is expected cause a bus error exception on e.g. NULL
    pointer dereferencing when logging a kernel task has no
    workqueue associated. This bus error ought to be ignored.
    
    Our 030 bus error handler is ill equipped to deal with this:
    
    Whenever ssw indicates a kernel mode access on a data fault,
    we don't even attempt to handle the fault and instead always
    send a SEGV signal (or panic). As a result, the check
    for exception handling at the fault PC (buried in
    send_sig_fault() which gets called from do_page_fault()
    eventually) is never used.
    
    In contrast, both 040 and 060 access error handlers do not
    care whether a fault happened on supervisor mode access,
    and will call do_page_fault() on those, ultimately honoring
    the exception table.
    
    Add a check in bus_error030 to call do_page_fault() in case
    we do have an entry for the fault PC in our exception table.
    
    I had attempted a fix for this earlier in 2019 that did rely
    on testing pagefault_disabled() (see link below) to achieve
    the same thing, but this patch should be more generic.
    
    Tested on 030 Atari Falcon.
    
    Reported-by: Eero Tamminen <oak@helsinkinet.fi>
    Link: https://lore.kernel.org/r/alpine.LNX.2.21.1904091023540.25@nippy.intranet
    Link: https://lore.kernel.org/r/63130691-1984-c423-c1f2-73bfd8d3dcd3@gmail.com
    Signed-off-by: Michael Schmitz <schmitzmic@gmail.com>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/20230301021107.26307-1-schmitzmic@gmail.com
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ee33bfaeb3f0343f1be8f0adfab1ce2fc25f2dd
Author: Kars de Jong <jongk@linux-m68k.org>
Date:   Thu Feb 23 12:23:49 2023 +0100

    m68k: mm: Fix systems with memory at end of 32-bit address space
    
    [ Upstream commit 0d9fad91abfd723ea5070a46d98a9f4496c93ba9 ]
    
    The calculation of end addresses of memory chunks overflowed to 0 when
    a memory chunk is located at the end of 32-bit address space.
    This is the case for the HP300 architecture.
    
    Link: https://lore.kernel.org/linux-m68k/CACz-3rhUo5pgNwdWHaPWmz+30Qo9xCg70wNxdf7o5x-6tXq8QQ@mail.gmail.com/
    Signed-off-by: Kars de Jong <jongk@linux-m68k.org>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/20230223112349.26675-1-jongk@linux-m68k.org
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a594cb490ca6232671fc09e2dc1a0fc7ccbb0b5
Author: Reka Norman <rekanorman@chromium.org>
Date:   Mon Feb 27 13:49:38 2023 +1100

    HID: intel-ish-hid: ipc: Fix potential use-after-free in work function
    
    [ Upstream commit 8ae2f2b0a28416ed2f6d8478ac8b9f7862f36785 ]
    
    When a reset notify IPC message is received, the ISR schedules a work
    function and passes the ISHTP device to it via a global pointer
    ishtp_dev. If ish_probe() fails, the devm-managed device resources
    including ishtp_dev are freed, but the work is not cancelled, causing a
    use-after-free when the work function tries to access ishtp_dev. Use
    devm_work_autocancel() instead, so that the work is automatically
    cancelled if probe fails.
    
    Signed-off-by: Reka Norman <rekanorman@chromium.org>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6f150861b281a4ea9cee63800089f08149cbb8c
Author: Rafał Szalecki <perexist7@gmail.com>
Date:   Wed Mar 1 02:23:56 2023 +0100

    HID: logitech-hidpp: Add support for Logitech MX Master 3S mouse
    
    [ Upstream commit db50f7a3983f0154e730f1147ef729e0c5c2f90c ]
    
    Add signature for the Logitech MX Master 3S mouse over Bluetooth.
    
    Signed-off-by: Rafał Szalecki <perexist7@gmail.com>
    Reviewed-by: Bastien Nocera <hadess@hadess.net>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd176a18db96d574d8c4763708abcec4444a08b6
Author: Alexander Aring <aahringo@redhat.com>
Date:   Thu Feb 16 23:25:04 2023 -0500

    ca8210: fix mac_len negative array access
    
    [ Upstream commit 6c993779ea1d0cccdb3a5d7d45446dd229e610a3 ]
    
    This patch fixes a buffer overflow access of skb->data if
    ieee802154_hdr_peek_addrs() fails.
    
    Reported-by: lianhui tang <bluetlh@gmail.com>
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20230217042504.3303396-1-aahringo@redhat.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aee32b594f2c2332e73001938a174fb1403193f2
Author: Danny Kaehn <kaehndan@gmail.com>
Date:   Fri Feb 10 11:00:44 2023 -0600

    HID: cp2112: Fix driver not registering GPIO IRQ chip as threaded
    
    [ Upstream commit 37f5b858a66543b2b67c0288280af623985abc29 ]
    
    The CP2112 generates interrupts from a polling routine on a thread,
    and can only support threaded interrupts. This patch configures the
    gpiochip irq chip with this flag, disallowing consumers to request
    a hard IRQ from this driver, which resulted in a segfault previously.
    
    Signed-off-by: Danny Kaehn <kaehndan@gmail.com>
    Link: https://lore.kernel.org/r/20230210170044.11835-1-kaehndan@gmail.com
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 586a9fe142837614c21089c54cb61f637ebfa2d8
Author: Alexandr Sapozhnikov <alsp705@gmail.com>
Date:   Wed Feb 15 20:15:49 2023 +0300

    drm/cirrus: NULL-check pipe->plane.state->fb in cirrus_pipe_update()
    
    [ Upstream commit 7245e629dcaaf308f1868aeffa218e9849c77893 ]
    
    After having been compared to NULL value at cirrus.c:455, pointer
    'pipe->plane.state->fb' is passed as 1st parameter in call to function
    'cirrus_fb_blit_rect' at cirrus.c:461, where it is dereferenced at
    cirrus.c:316.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    v2:
            * aligned commit message to line-length limits
    
    Signed-off-by: Alexandr Sapozhnikov <alsp705@gmail.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230215171549.16305-1-alsp705@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd20cc4e5ea079ec2dc86abb351de39540e2aaa4
Author: Alexandre Ghiti <alex@ghiti.fr>
Date:   Tue Mar 16 15:34:20 2021 -0400

    riscv: Bump COMMAND_LINE_SIZE value to 1024
    
    [ Upstream commit 61fc1ee8be26bc192d691932b0a67eabee45d12f ]
    
    Increase COMMAND_LINE_SIZE as the current default value is too low
    for syzbot kernel command line.
    
    There has been considerable discussion on this patch that has led to a
    larger patch set removing COMMAND_LINE_SIZE from the uapi headers on all
    ports.  That's not quite done yet, but it's gotten far enough we're
    confident this is not a uABI change so this is safe.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Alexandre Ghiti <alex@ghiti.fr>
    Link: https://lore.kernel.org/r/20210316193420.904-1-alex@ghiti.fr
    [Palmer: it's not uabi]
    Link: https://lore.kernel.org/linux-riscv/874b8076-b0d1-4aaa-bcd8-05d523060152@app.fastmail.com/#t
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48bef3023f4d5de16d47ce3e6ee1eb5c5f4d9f0c
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue Feb 28 16:11:28 2023 -0600

    ACPI: x86: utils: Add Cezanne to the list for forcing StorageD3Enable
    
    [ Upstream commit e2a56364485e7789e7b8f342637c7f3a219f7ede ]
    
    commit 018d6711c26e4 ("ACPI: x86: Add a quirk for Dell Inspiron 14 2-in-1
    for StorageD3Enable") introduced a quirk to allow a system with ambiguous
    use of _ADR 0 to force StorageD3Enable.
    
    It was reported that several more Dell systems suffered the same symptoms.
    As the list is continuing to grow but these are all Cezanne systems,
    instead add Cezanne to the CPU list to apply the StorageD3Enable property
    and remove the whole list.
    
    It was also reported that an HP system only has StorageD3Enable on the ACPI
    device for the first NVME disk, not the second.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217003
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216773
    Reported-by: David Alvarez Lombardi <dqalombardi@proton.me>
    Reported-by: dbilios@stdio.gr
    Reported-and-tested-by: Elvis Angelaccio <elvis.angelaccio@kde.org>
    Tested-by: victor.bonnelle@proton.me
    Tested-by: hurricanepootis@protonmail.com
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d146b27413204f7e933c9ed88baf6e7a1ff529d9
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Thu Feb 23 14:26:22 2023 -0600

    ACPI: x86: Drop quirk for HP Elitebook
    
    [ Upstream commit e32d546c483a2a0f607687f5b521c2a2f942ffbe ]
    
    There was a quirk in `acpi/x86/s2idle.c` for an HP Elitebook G9
    platforms to force AMD GUID codepath instead of Microsoft codepath.
    
    This was due to a bug with WCN6855 WLAN firmware interaction with
    the system.
    
    This bug is fixed by WCN6855 firmware:
    WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3.6510.23
    
    Remove the quirk as it's no longer necessary with this firmware.
    
    Link: https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/commit/?id=c7a57ef688f7d99d8338a5d8edddc8836ff0e6de
    Tested-by: Anson Tsao <anson.tsao@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f845ecdd1342dae8f0af22ec7cb415695b532b51
Author: Duc Anh Le <lub.the.studio@gmail.com>
Date:   Tue Feb 28 00:49:21 2023 +0100

    ASoC: amd: yc: Add DMI entries to support HP OMEN 16-n0xxx (8A43)
    
    [ Upstream commit d52279d5c9204a041e9ba02a66a353573b2f96e4 ]
    
    This model requires an additional detection quirk to enable the internal microphone.
    
    Signed-off-by: Duc Anh Le <lub.the.studio@gmail.com>
    Link: https://lore.kernel.org/r/20230227234921.7784-1-lub.the.studio@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf83d04c135dc7b3dff7a989fd13c560dcf7c9ad
Author: Joseph Hunkeler <jhunkeler@gmail.com>
Date:   Thu Feb 16 10:50:07 2023 -0500

    ASoC: amd: yp: Add OMEN by HP Gaming Laptop 16z-n000 to quirks
    
    [ Upstream commit 22ce6843abec19270bf69b176d7ee0a4ef781da5 ]
    
    Enables display microphone on the HP OMEN 16z-n000 (8A42) laptop
    
    Signed-off-by: Joseph Hunkeler <jhunkeler@gmail.com>
    Link: https://lore.kernel.org/r/20230216155007.26143-1-jhunkeler@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03b5fae39897b3daee2d7b22eba6e3468773ebab
Author: Tom Rix <trix@redhat.com>
Date:   Wed Mar 15 18:04:50 2023 -0400

    thunderbolt: Rename shadowed variables bit to interrupt_bit and auto_clear_bit
    
    commit 58cdfe6f58b35f17f56386f5fcf937168a423ad1 upstream.
    
    cppcheck reports
    drivers/thunderbolt/nhi.c:74:7: style: Local variable 'bit' shadows outer variable [shadowVariable]
      int bit;
          ^
    drivers/thunderbolt/nhi.c:66:6: note: Shadowed declaration
     int bit = ring_interrupt_index(ring) & 31;
         ^
    drivers/thunderbolt/nhi.c:74:7: note: Shadow variable
      int bit;
          ^
    For readablity rename the outer to interrupt_bit and the innner
    to auto_clear_bit.
    
    Fixes: 468c49f44759 ("thunderbolt: Disable interrupt auto clear for ring")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 587dd59049bf558ab647b27331a3143900c2355b
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Mar 10 11:20:49 2023 -0600

    thunderbolt: Use const qualifier for `ring_interrupt_index`
    
    commit 1716efdb07938bd6510e1127d02012799112c433 upstream.
    
    `ring_interrupt_index` doesn't change the data for `ring` so mark it as
    const. This is needed by the following patch that disables interrupt
    auto clear for rings.
    
    Cc: Sanju Mehta <Sanju.Mehta@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 278fb64ce473d9f789872cfdcf01bb3e7cd52c5a
Author: Gil Fine <gil.fine@linux.intel.com>
Date:   Fri Mar 3 00:17:24 2023 +0200

    thunderbolt: Add missing UNSET_INBOUND_SBTX for retimer access
    
    commit cd0c1e582b055dea615001b8bd8eccaf6f69f7ce upstream.
    
    According to USB4 retimer specification, the process of firmware update
    sequence requires issuing a SET_INBOUND_SBTX port operation that later
    shall be followed by UNSET_INBOUND_SBTX port operation. This last step
    is not currently issued by the driver but it is necessary to make sure
    the retimers are put back to passthrough mode even during enumeration.
    
    If this step is missing the link may not come up properly after
    soft-reboot for example.
    
    For this reason issue UNSET_INBOUND_SBTX after SET_INBOUND_SBTX for
    enumeration and also when the NVM upgrade is run.
    
    Reported-by: Christian Schaubschläger <christian.schaubschlaeger@gmx.at>
    Link: https://lore.kernel.org/linux-usb/b556f5ed-5ee8-9990-9910-afd60db93310@gmx.at/
    Cc: stable@vger.kernel.org
    Signed-off-by: Gil Fine <gil.fine@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 416db7fa3e8995566d7d151601db5c84a9a2830c
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Mar 10 11:20:50 2023 -0600

    thunderbolt: Disable interrupt auto clear for rings
    
    commit 468c49f44759720a312e52d44a71c3949ed63d7c upstream.
    
    When interrupt auto clear is programmed, any read to the interrupt
    status register will clear all interrupts.  If two interrupts have
    come in before one can be serviced then this will cause lost interrupts.
    
    On AMD USB4 routers this has manifested in odd problems particularly
    with long strings of control tranfers such as reading the DROM via bit
    banging.
    
    Instead of clearing interrupts automatically, clear the bit corresponding
    to the given ring's interrupt in the ISR.
    
    Fixes: 7a1808f82a37 ("thunderbolt: Handle ring interrupt by reading interrupt status register")
    Cc: Sanju Mehta <Sanju.Mehta@amd.com>
    Cc: stable@vger.kernel.org
    Tested-by: Anson Tsao <anson.tsao@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f390095bbd131ec2dfb29792d9f6fd0f0656bfc0
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri Mar 3 11:25:08 2023 +0200

    thunderbolt: Fix memory leak in margining
    
    commit acec726473822bc6b585961f4ca2a11fa7f28341 upstream.
    
    Memory for the usb4->margining needs to be relased for the upstream port
    of the router as well, even though the debugfs directory gets released
    with the router device removal. Fix this.
    
    Fixes: d0f1e0c2a699 ("thunderbolt: Add support for receiver lane margining")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2326d046ae7dd79b3292589da5b8ec1af1ea8c4
Author: Sanjay R Mehta <sanju.mehta@amd.com>
Date:   Tue Feb 14 13:13:50 2023 -0600

    thunderbolt: Add quirk to disable CLx
    
    commit 7af9da8ce8f9a16221ecd8ba4280582f5bd452fc upstream.
    
    Add QUIRK_NO_CLX to disable the CLx state for hardware which
    doesn't supports it.
    
    AMD Yellow Carp and Pink Sardine don't support CLx state,
    hence disabling it using QUIRK_NO_CLX.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sanjay R Mehta <sanju.mehta@amd.com>
    Signed-off-by: Basavaraj Natikar <Basavaraj.Natikar@amd.com>
    [mw: added debug log when the quirk is run]
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 516b1752fe6a9a91b3d1069d2627c3e44b7e38f3
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri Feb 3 15:55:41 2023 +0200

    thunderbolt: Call tb_check_quirks() after initializing adapters
    
    commit d2d6ddf188f609861489d5d188d545856a3ed399 upstream.
    
    In order to apply quirks based on certain adapter types move call to
    tb_check_quirks() happen after the adapters are initialized. This should
    not affect the existing quirks.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b82c564886a01fae979b93c0d807f43c477b6844
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Dec 27 11:55:26 2022 +0200

    thunderbolt: Use scale field when allocating USB3 bandwidth
    
    commit c82510b1d87bdebfe916048857d2ef46f1778aa5 upstream.
    
    When tunneling aggregated USB3 (20 Gb/s) the bandwidth values that are
    programmed to the ADP_USB3_CS_2 go higher than 4096 and that does not
    fit anymore to the 12-bit field. Fix this by scaling the value using
    the scale field accordingly.
    
    Fixes: 3b1d8d577ca8 ("thunderbolt: Implement USB3 bandwidth negotiation routines")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3497afbd578053186d3b219481332da54a153f3e
Author: Yaroslav Furman <yaro330@gmail.com>
Date:   Sun Mar 12 11:07:45 2023 +0200

    uas: Add US_FL_NO_REPORT_OPCODES for JMicron JMS583Gen 2
    
    commit a37eb61b6ec064ac794b8a1e89fd33eb582fe51d upstream.
    
    Just like other JMicron JMS5xx enclosures, it chokes on report-opcodes,
    let's avoid them.
    
    Signed-off-by: Yaroslav Furman <yaro330@gmail.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230312090745.47962-1-yaro330@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a369bb39187800bbadcfe8b1105136bca5c5a45
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Mar 23 16:20:02 2023 -0500

    smb3: fix unusable share after force unmount failure
    
    commit 491eafce1a51c457701351a4bf40733799745314 upstream.
    
    If user does forced unmount ("umount -f") while files are still open
    on the share (as was seen in a Kubernetes example running on SMB3.1.1
    mount) then we were marking the share as "TID_EXITING" in umount_begin()
    which caused all subsequent operations (except write) to fail ... but
    unfortunately when umount_begin() is called we do not know yet that
    there are open files or active references on the share that would prevent
    unmount from succeeding.  Kubernetes had example when they were doing
    umount -f when files were open which caused the share to become
    unusable until the files were closed (and the umount retried).
    
    Fix this so that TID_EXITING is not set until we are about to send
    the tree disconnect (not at the beginning of forced umounts in
    umount_begin) so that if "umount -f" fails (due to open files or
    references) the mount is still usable.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3de686a36592add9d80a0f448adaf264201a2c73
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Mar 23 15:10:26 2023 -0500

    smb3: lower default deferred close timeout to address perf regression
    
    commit 7e0e76d99079be13c9961dde7c93b2d1ee665af4 upstream.
    
    Performance tests with large number of threads noted that the change
    of the default closetimeo (deferred close timeout between when
    close is done by application and when client has to send the close
    to the server), to 5 seconds from 1 second, significantly degraded
    perf in some cases like this (in the filebench example reported,
    the stats show close requests on the wire taking twice as long,
    and 50% regression in filebench perf). This is stil configurable
    via mount parm closetimeo, but to be safe, decrease default back
    to its previous value of 1 second.
    
    Reported-by: Yin Fengwei <fengwei.yin@intel.com>
    Reported-by: kernel test robot <yujie.liu@intel.com>
    Link: https://lore.kernel.org/lkml/997614df-10d4-af53-9571-edec36b0e2f3@intel.com/
    Fixes: 5efdd9122eff ("smb3: allow deferred close timeout to be configurable")
    Cc: stable@vger.kernel.org # 6.0+
    Tested-by: Yin Fengwei <fengwei.yin@intel.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd0a1804ac5bab2545ac700c8d0fe9ae9284c567
Author: Nilesh Javali <njavali@marvell.com>
Date:   Sun Mar 12 21:37:10 2023 -0700

    scsi: qla2xxx: Perform lockless command completion in abort path
    
    commit 0367076b0817d5c75dfb83001ce7ce5c64d803a9 upstream.
    
    While adding and removing the controller, the following call trace was
    observed:
    
    WARNING: CPU: 3 PID: 623596 at kernel/dma/mapping.c:532 dma_free_attrs+0x33/0x50
    CPU: 3 PID: 623596 Comm: sh Kdump: loaded Not tainted 5.14.0-96.el9.x86_64 #1
    RIP: 0010:dma_free_attrs+0x33/0x50
    
    Call Trace:
       qla2x00_async_sns_sp_done+0x107/0x1b0 [qla2xxx]
       qla2x00_abort_srb+0x8e/0x250 [qla2xxx]
       ? ql_dbg+0x70/0x100 [qla2xxx]
       __qla2x00_abort_all_cmds+0x108/0x190 [qla2xxx]
       qla2x00_abort_all_cmds+0x24/0x70 [qla2xxx]
       qla2x00_abort_isp_cleanup+0x305/0x3e0 [qla2xxx]
       qla2x00_remove_one+0x364/0x400 [qla2xxx]
       pci_device_remove+0x36/0xa0
       __device_release_driver+0x17a/0x230
       device_release_driver+0x24/0x30
       pci_stop_bus_device+0x68/0x90
       pci_stop_and_remove_bus_device_locked+0x16/0x30
       remove_store+0x75/0x90
       kernfs_fop_write_iter+0x11c/0x1b0
       new_sync_write+0x11f/0x1b0
       vfs_write+0x1eb/0x280
       ksys_write+0x5f/0xe0
       do_syscall_64+0x5c/0x80
       ? do_user_addr_fault+0x1d8/0x680
       ? do_syscall_64+0x69/0x80
       ? exc_page_fault+0x62/0x140
       ? asm_exc_page_fault+0x8/0x30
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The command was completed in the abort path during driver unload with a
    lock held, causing the warning in abort path. Hence complete the command
    without any lock held.
    
    Reported-by: Lin Li <lilin@redhat.com>
    Tested-by: Lin Li <lilin@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Link: https://lore.kernel.org/r/20230313043711.13500-2-njavali@marvell.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: John Meneghini <jmeneghi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d57b77d7369ed73836c82b25f785b34923eef84
Author: Quinn Tran <qutran@marvell.com>
Date:   Sun Mar 12 21:37:11 2023 -0700

    scsi: qla2xxx: Synchronize the IOCB count to be in order
    
    commit d3affdeb400f3adc925bd996f3839481f5291839 upstream.
    
    A system hang was observed with the following call trace:
    
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    PGD 0 P4D 0
    Oops: 0000 [#1] PREEMPT SMP NOPTI
    CPU: 15 PID: 86747 Comm: nvme Kdump: loaded Not tainted 6.2.0+ #1
    Hardware name: Dell Inc. PowerEdge R6515/04F3CJ, BIOS 2.7.3 03/31/2022
    RIP: 0010:__wake_up_common+0x55/0x190
    Code: 41 f6 01 04 0f 85 b2 00 00 00 48 8b 43 08 4c 8d
          40 e8 48 8d 43 08 48 89 04 24 48 89 c6\
          49 8d 40 18 48 39 c6 0f 84 e9 00 00 00 <49> 8b 40 18 89 6c 24 14 31
          ed 4c 8d 60 e8 41 8b 18 f6 c3 04 75 5d
    RSP: 0018:ffffb05a82afbba0 EFLAGS: 00010082
    RAX: 0000000000000000 RBX: ffff8f9b83a00018 RCX: 0000000000000000
    RDX: 0000000000000001 RSI: ffff8f9b83a00020 RDI: ffff8f9b83a00018
    RBP: 0000000000000001 R08: ffffffffffffffe8 R09: ffffb05a82afbbf8
    R10: 70735f7472617473 R11: 5f30307832616c71 R12: 0000000000000001
    R13: 0000000000000003 R14: 0000000000000000 R15: 0000000000000000
    FS:  00007f815cf4c740(0000) GS:ffff8f9eeed80000(0000)
            knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000000 CR3: 000000010633a000 CR4: 0000000000350ee0
    Call Trace:
        <TASK>
        __wake_up_common_lock+0x83/0xd0
        qla_nvme_ls_req+0x21b/0x2b0 [qla2xxx]
        __nvme_fc_send_ls_req+0x1b5/0x350 [nvme_fc]
        nvme_fc_xmt_disconnect_assoc+0xca/0x110 [nvme_fc]
        nvme_fc_delete_association+0x1bf/0x220 [nvme_fc]
        ? nvme_remove_namespaces+0x9f/0x140 [nvme_core]
        nvme_do_delete_ctrl+0x5b/0xa0 [nvme_core]
        nvme_sysfs_delete+0x5f/0x70 [nvme_core]
        kernfs_fop_write_iter+0x12b/0x1c0
        vfs_write+0x2a3/0x3b0
        ksys_write+0x5f/0xe0
        do_syscall_64+0x5c/0x90
        ? syscall_exit_work+0x103/0x130
        ? syscall_exit_to_user_mode+0x12/0x30
        ? do_syscall_64+0x69/0x90
        ? exit_to_user_mode_loop+0xd0/0x130
        ? exit_to_user_mode_prepare+0xec/0x100
        ? syscall_exit_to_user_mode+0x12/0x30
        ? do_syscall_64+0x69/0x90
        ? syscall_exit_to_user_mode+0x12/0x30
        ? do_syscall_64+0x69/0x90
        entry_SYSCALL_64_after_hwframe+0x72/0xdc
        RIP: 0033:0x7f815cd3eb97
    
    The IOCB counts are out of order and that would block any commands from
    going out and subsequently hang the system. Synchronize the IOCB count to
    be in correct order.
    
    Fixes: 5f63a163ed2f ("scsi: qla2xxx: Fix exchange oversubscription for management commands")
    Cc: stable@vger.kernel.org
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Link: https://lore.kernel.org/r/20230313043711.13500-3-njavali@marvell.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: John Meneghini <jmeneghi@redhat.com>
    Tested-by: Lin Li <lilin@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 682938af0a5fd7c3f3e7453ea10c89c7c59b33d9
Author: Frank Crawford <frank@crawford.emu.id.au>
Date:   Sat Mar 18 19:05:42 2023 +1100

    hwmon (it87): Fix voltage scaling for chips with 10.9mV ADCs
    
    [ Upstream commit 968b66ffeb7956acc72836a7797aeb7b2444ec51 ]
    
    Fix voltage scaling for chips that have 10.9mV ADCs, where scaling was
    not performed.
    
    Fixes: ead8080351c9 ("hwmon: (it87) Add support for IT8732F")
    Signed-off-by: Frank Crawford <frank@crawford.emu.id.au>
    Link: https://lore.kernel.org/r/20230318080543.1226700-2-frank@crawford.emu.id.au
    [groeck: Update subject and description to focus on bug fix]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3263768965fb893534f0e04c91d33a49c77950f
Author: Phinex Hung <phinex@realtek.com>
Date:   Tue Mar 21 14:02:23 2023 +0800

    hwmon: fix potential sensor registration fail if of_node is missing
    
    [ Upstream commit 2315332efcbe7124252f080e03b57d3d2f1f4771 ]
    
    It is not sufficient to check of_node in current device.
    In some cases, this would cause the sensor registration to fail.
    
    This patch looks for device's ancestors to find a valid of_node if any.
    
    Fixes: d560168b5d0f ("hwmon: (core) New hwmon registration API")
    Signed-off-by: Phinex Hung <phinex@realtek.com>
    Link: https://lore.kernel.org/r/20230321060224.3819-1-phinex@realtek.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d716ea059cd3d6abfbedda164a67b3659e19d2de
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Wed Mar 15 19:43:43 2023 +0000

    entry/rcu: Check TIF_RESCHED _after_ delayed RCU wake-up
    
    [ Upstream commit b416514054810cf2d2cc348ae477cea619b64da7 ]
    
    RCU sometimes needs to perform a delayed wake up for specific kthreads
    handling offloaded callbacks (RCU_NOCB).  These wakeups are performed
    by timers and upon entry to idle (also to guest and to user on nohz_full).
    
    However the delayed wake-up on kernel exit is actually performed after
    the thread flags are fetched towards the fast path check for work to
    do on exit to user. As a result, and if there is no other pending work
    to do upon that kernel exit, the current task will resume to userspace
    with TIF_RESCHED set and the pending wake up ignored.
    
    Fix this with fetching the thread flags _after_ the delayed RCU-nocb
    kthread wake-up.
    
    Fixes: 47b8ff194c1f ("entry: Explicitly flush pending rcuog wakeup before last rescheduling point")
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20230315194349.10798-3-joel@joelfernandes.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab33a8f7649b0324639a336e1081aaea51a4523e
Author: Breno Leitao <leitao@debian.org>
Date:   Tue Mar 21 04:33:38 2023 -0700

    perf/x86/amd/core: Always clear status for idx
    
    [ Upstream commit 263f5ecaf7080513efc248ec739b6d9e00f4129f ]
    
    The variable 'status' (which contains the unhandled overflow bits) is
    not being properly masked in some cases, displaying the following
    warning:
    
      WARNING: CPU: 156 PID: 475601 at arch/x86/events/amd/core.c:972 amd_pmu_v2_handle_irq+0x216/0x270
    
    This seems to be happening because the loop is being continued before
    the status bit being unset, in case x86_perf_event_set_period()
    returns 0. This is also causing an inconsistency because the "handled"
    counter is incremented, but the status bit is not cleaned.
    
    Move the bit cleaning together above, together when the "handled"
    counter is incremented.
    
    Fixes: 7685665c390d ("perf/x86/amd/core: Add PerfMonV2 overflow handling")
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Sandipan Das <sandipan.das@amd.com>
    Link: https://lore.kernel.org/r/20230321113338.1669660-1-leitao@debian.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adfc7aaa0df91e567f8f01f6066f385328d32e86
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Sat Feb 25 16:01:36 2023 -0800

    entry: Fix noinstr warning in __enter_from_user_mode()
    
    [ Upstream commit f87d28673b71b35b248231a2086f9404afbb7f28 ]
    
    __enter_from_user_mode() is triggering noinstr warnings with
    CONFIG_DEBUG_PREEMPT due to its call of preempt_count_add() via
    ct_state().
    
    The preemption disable isn't needed as interrupts are already disabled.
    And the context_tracking_enabled() check in ct_state() also isn't needed
    as that's already being done by the CT_WARN_ON().
    
    Just use __ct_state() instead.
    
    Fixes the following warnings:
    
      vmlinux.o: warning: objtool: enter_from_user_mode+0xba: call to preempt_count_add() leaves .noinstr.text section
      vmlinux.o: warning: objtool: syscall_enter_from_user_mode+0xf9: call to preempt_count_add() leaves .noinstr.text section
      vmlinux.o: warning: objtool: syscall_enter_from_user_mode_prepare+0xc7: call to preempt_count_add() leaves .noinstr.text section
      vmlinux.o: warning: objtool: irqentry_enter_from_user_mode+0xba: call to preempt_count_add() leaves .noinstr.text section
    
    Fixes: 171476775d32 ("context_tracking: Convert state to atomic_t")
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/d8955fa6d68dc955dda19baf13ae014ae27926f5.1677369694.git.jpoimboe@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eab28bfafcd1245a3510df9aa9eb940589956ea6
Author: Tzung-Bi Shih <tzungbi@kernel.org>
Date:   Fri Mar 24 09:06:58 2023 +0800

    platform/chrome: cros_ec_chardev: fix kernel data leak from ioctl
    
    [ Upstream commit b20cf3f89c56b5f6a38b7f76a8128bf9f291bbd3 ]
    
    It is possible to peep kernel page's data by providing larger `insize`
    in struct cros_ec_command[1] when invoking EC host commands.
    
    Fix it by using zeroed memory.
    
    [1]: https://elixir.bootlin.com/linux/v6.2/source/include/linux/platform_data/cros_ec_proto.h#L74
    
    Fixes: eda2e30c6684 ("mfd / platform: cros_ec: Miscellaneous character device to talk with the EC")
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Link: https://lore.kernel.org/r/20230324010658.1082361-1-tzungbi@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3168abd24245aa0775c5a387dcf94d36ca7e738
Author: Sungwoo Kim <iam@sung-woo.kim>
Date:   Mon Mar 20 21:50:18 2023 -0400

    Bluetooth: HCI: Fix global-out-of-bounds
    
    [ Upstream commit bce56405201111807cc8e4f47c6de3e10b17c1ac ]
    
    To loop a variable-length array, hci_init_stage_sync(stage) considers
    that stage[i] is valid as long as stage[i-1].func is valid.
    Thus, the last element of stage[].func should be intentionally invalid
    as hci_init0[], le_init2[], and others did.
    However, amp_init1[] and amp_init2[] have no invalid element, letting
    hci_init_stage_sync() keep accessing amp_init1[] over its valid range.
    This patch fixes this by adding {} in the last of amp_init1[] and
    amp_init2[].
    
    ==================================================================
    BUG: KASAN: global-out-of-bounds in hci_dev_open_sync (
    /v6.2-bzimage/net/bluetooth/hci_sync.c:3154
    /v6.2-bzimage/net/bluetooth/hci_sync.c:3343
    /v6.2-bzimage/net/bluetooth/hci_sync.c:4418
    /v6.2-bzimage/net/bluetooth/hci_sync.c:4609
    /v6.2-bzimage/net/bluetooth/hci_sync.c:4689)
    Read of size 8 at addr ffffffffaed1ab70 by task kworker/u5:0/1032
    CPU: 0 PID: 1032 Comm: kworker/u5:0 Not tainted 6.2.0 #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04
    Workqueue: hci1 hci_power_on
    Call Trace:
     <TASK>
    dump_stack_lvl (/v6.2-bzimage/lib/dump_stack.c:107 (discriminator 1))
    print_report (/v6.2-bzimage/mm/kasan/report.c:307
      /v6.2-bzimage/mm/kasan/report.c:417)
    ? hci_dev_open_sync (/v6.2-bzimage/net/bluetooth/hci_sync.c:3154
      /v6.2-bzimage/net/bluetooth/hci_sync.c:3343
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4418
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4609
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4689)
    kasan_report (/v6.2-bzimage/mm/kasan/report.c:184
      /v6.2-bzimage/mm/kasan/report.c:519)
    ? hci_dev_open_sync (/v6.2-bzimage/net/bluetooth/hci_sync.c:3154
      /v6.2-bzimage/net/bluetooth/hci_sync.c:3343
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4418
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4609
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4689)
    hci_dev_open_sync (/v6.2-bzimage/net/bluetooth/hci_sync.c:3154
      /v6.2-bzimage/net/bluetooth/hci_sync.c:3343
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4418
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4609
      /v6.2-bzimage/net/bluetooth/hci_sync.c:4689)
    ? __pfx_hci_dev_open_sync (/v6.2-bzimage/net/bluetooth/hci_sync.c:4635)
    ? mutex_lock (/v6.2-bzimage/./arch/x86/include/asm/atomic64_64.h:190
      /v6.2-bzimage/./include/linux/atomic/atomic-long.h:443
      /v6.2-bzimage/./include/linux/atomic/atomic-instrumented.h:1781
      /v6.2-bzimage/kernel/locking/mutex.c:171
      /v6.2-bzimage/kernel/locking/mutex.c:285)
    ? __pfx_mutex_lock (/v6.2-bzimage/kernel/locking/mutex.c:282)
    hci_power_on (/v6.2-bzimage/net/bluetooth/hci_core.c:485
      /v6.2-bzimage/net/bluetooth/hci_core.c:984)
    ? __pfx_hci_power_on (/v6.2-bzimage/net/bluetooth/hci_core.c:969)
    ? read_word_at_a_time (/v6.2-bzimage/./include/asm-generic/rwonce.h:85)
    ? strscpy (/v6.2-bzimage/./arch/x86/include/asm/word-at-a-time.h:62
      /v6.2-bzimage/lib/string.c:161)
    process_one_work (/v6.2-bzimage/kernel/workqueue.c:2294)
    worker_thread (/v6.2-bzimage/./include/linux/list.h:292
      /v6.2-bzimage/kernel/workqueue.c:2437)
    ? __pfx_worker_thread (/v6.2-bzimage/kernel/workqueue.c:2379)
    kthread (/v6.2-bzimage/kernel/kthread.c:376)
    ? __pfx_kthread (/v6.2-bzimage/kernel/kthread.c:331)
    ret_from_fork (/v6.2-bzimage/arch/x86/entry/entry_64.S:314)
     </TASK>
    The buggy address belongs to the variable:
    amp_init1+0x30/0x60
    The buggy address belongs to the physical page:
    page:000000003a157ec6 refcount:1 mapcount:0 mapping:0000000000000000 ia
    flags: 0x200000000001000(reserved|node=0|zone=2)
    raw: 0200000000001000 ffffea0005054688 ffffea0005054688 000000000000000
    raw: 0000000000000000 0000000000000000 00000001ffffffff 000000000000000
    page dumped because: kasan: bad access detected
    Memory state around the buggy address:
     ffffffffaed1aa00: f9 f9 f9 f9 00 00 00 00 f9 f9 f9 f9 00 00 00 00
     ffffffffaed1aa80: 00 00 00 00 f9 f9 f9 f9 00 00 00 00 00 00 00 00
    >ffffffffaed1ab00: 00 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 f9 f9
                                                                 ^
     ffffffffaed1ab80: f9 f9 f9 f9 00 00 00 00 f9 f9 f9 f9 00 00 00 f9
     ffffffffaed1ac00: f9 f9 f9 f9 00 06 f9 f9 f9 f9 f9 f9 00 00 02 f9
    
    This bug is found by FuzzBT, a modified version of Syzkaller.
    Other contributors for this bug are Ruoyu Wu and Peng Hui.
    
    Fixes: d0b137062b2d ("Bluetooth: hci_sync: Rework init stages")
    Signed-off-by: Sungwoo Kim <iam@sung-woo.kim>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24997df50b353d4da10efae556418820726ae34a
Author: Howard Chung <howardchung@google.com>
Date:   Thu Mar 16 18:11:38 2023 +0800

    Bluetooth: mgmt: Fix MGMT add advmon with RSSI command
    
    [ Upstream commit 1a0291f81529e8044fb29845a0196ba47af894ce ]
    
    The MGMT command: MGMT_OP_ADD_ADV_PATTERNS_MONITOR_RSSI uses variable
    length argument. This causes host not able to register advmon with rssi.
    
    This patch has been locally tested by adding monitor with rssi via
    btmgmt on a kernel 6.1 machine.
    
    Reviewed-by: Archie Pusaka <apusaka@chromium.org>
    Fixes: b338d91703fa ("Bluetooth: Implement support for Mesh")
    Signed-off-by: Howard Chung <howardchung@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbf8deacb7053ce3e3fed64b277c6c6989e65bba
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Thu Mar 9 16:07:39 2023 +0800

    Bluetooth: btsdio: fix use after free bug in btsdio_remove due to unfinished work
    
    [ Upstream commit 1e9ac114c4428fdb7ff4635b45d4f46017e8916f ]
    
    In btsdio_probe, &data->work was bound with btsdio_work.In
    btsdio_send_frame, it was started by schedule_work.
    
    If we call btsdio_remove with an unfinished job, there may
    be a race condition and cause UAF bug on hdev.
    
    Fixes: ddbaf13e3609 ("[Bluetooth] Add generic driver for Bluetooth SDIO devices")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c357e28b01c4cfbc3131cac030308c3bb326f5f3
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Wed Mar 8 14:20:34 2023 -0800

    Bluetooth: L2CAP: Fix responding with wrong PDU type
    
    [ Upstream commit 9aa9d9473f1550d1936c31259720b3f1f4690576 ]
    
    L2CAP_ECRED_CONN_REQ shall be responded with L2CAP_ECRED_CONN_RSP not
    L2CAP_LE_CONN_RSP:
    
    L2CAP LE EATT Server - Reject - run
      Listening for connections
      New client connection with handle 0x002a
      Sending L2CAP Request from client
      Client received response code 0x15
      Unexpected L2CAP response code (expected 0x18)
    L2CAP LE EATT Server - Reject - test failed
    
    > ACL Data RX: Handle 42 flags 0x02 dlen 26
          LE L2CAP: Enhanced Credit Connection Request (0x17) ident 1 len 18
            PSM: 39 (0x0027)
            MTU: 64
            MPS: 64
            Credits: 5
            Source CID: 65
            Source CID: 66
            Source CID: 67
            Source CID: 68
            Source CID: 69
    < ACL Data TX: Handle 42 flags 0x00 dlen 16
          LE L2CAP: LE Connection Response (0x15) ident 1 len 8
            invalid size
            00 00 00 00 00 00 06 00
    
    L2CAP LE EATT Server - Reject - run
      Listening for connections
      New client connection with handle 0x002a
      Sending L2CAP Request from client
      Client received response code 0x18
    L2CAP LE EATT Server - Reject - test passed
    
    Fixes: 15f02b910562 ("Bluetooth: L2CAP: Add initial code for Enhanced Credit Based Mode")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95085960062ddd3139810dfe95b901834ffee221
Author: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
Date:   Wed Mar 8 14:31:55 2023 +0100

    Bluetooth: btqcomsmd: Fix command timeout after setting BD address
    
    [ Upstream commit 5d44ab9e204200a78ad55cdf185aa2bb109b5950 ]
    
    On most devices using the btqcomsmd driver (e.g. the DragonBoard 410c
    and other devices based on the Qualcomm MSM8916/MSM8909/... SoCs)
    the Bluetooth firmware seems to become unresponsive for a while after
    setting the BD address. On recent kernel versions (at least 5.17+)
    this often causes timeouts for subsequent commands, e.g. the HCI reset
    sent by the Bluetooth core during initialization:
    
        Bluetooth: hci0: Opcode 0x c03 failed: -110
    
    Unfortunately this behavior does not seem to be documented anywhere.
    Experimentation suggests that the minimum necessary delay to avoid
    the problem is ~150us. However, to be sure add a sleep for > 1ms
    in case it is a bit longer on other firmware versions.
    
    Older kernel versions are likely also affected, although perhaps with
    slightly different errors or less probability. Side effects can easily
    hide the issue in most cases, e.g. unrelated incoming interrupts that
    cause the necessary delay.
    
    Fixes: 1511cc750c3d ("Bluetooth: Introduce Qualcomm WCNSS SMD based HCI driver")
    Signed-off-by: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 612cf2495ec6cf5834e8b4a70f599190c35cf8c8
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Thu Mar 9 15:58:54 2023 -0500

    drm/amd/display: Set dcn32 caps.seamless_odm
    
    [ Upstream commit f9537b1fa7fb51c2162bc15ce469cbbf1ca0fbfe ]
    
    [Why & How]
    seamless_odm set was not picked up while
    merging commit 2d017189e2b3 ("drm/amd/display:
    Blank eDP on enable drv if odm enabled")
    
    Fixes: 2d017189e2b3 ("drm/amd/display: Blank eDP on enable drv if odm enabled")
    Reviewed-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d84fe6dc7377037561cfaa29b93f1d6ce4335168
Author: Liang He <windhl@126.com>
Date:   Wed Mar 22 14:20:57 2023 +0800

    net: mdio: thunder: Add missing fwnode_handle_put()
    
    [ Upstream commit b1de5c78ebe9858ccec9d49af2f76724f1d47e3e ]
    
    In device_for_each_child_node(), we should add fwnode_handle_put()
    when break out of the iteration device_for_each_child_node()
    as it will automatically increase and decrease the refcounter.
    
    Fixes: 379d7ac7ca31 ("phy: mdio-thunder: Add driver for Cavium Thunder SoC MDIO buses.")
    Signed-off-by: Liang He <windhl@126.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1775958c2ae7b966ccaed8af5668e0ee2baabce
Author: Arınç ÜNAL <arinc.unal@arinc9.com>
Date:   Mon Mar 20 22:05:20 2023 +0300

    net: dsa: mt7530: move setting ssc_delta to PHY_INTERFACE_MODE_TRGMII case
    
    [ Upstream commit 407b508bdd70b6848993843d96ed49ac4108fb52 ]
    
    Move setting the ssc_delta variable to under the PHY_INTERFACE_MODE_TRGMII
    case as it's only needed when trgmii is used.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Signed-off-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Link: https://lore.kernel.org/r/20230320190520.124513-3-arinc.unal@arinc9.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd6251c02ac93f5a3df39abeadc0befedfb20ed9
Author: Arınç ÜNAL <arinc.unal@arinc9.com>
Date:   Mon Mar 20 22:05:19 2023 +0300

    net: dsa: mt7530: move lowering TRGMII driving to mt7530_setup()
    
    [ Upstream commit fdcc8ccd823740c18e803b886cec461bc0e64201 ]
    
    Move lowering the TRGMII Tx clock driving to mt7530_setup(), after setting
    the core clock, as seen on the U-Boot MediaTek ethernet driver.
    
    Move the code which looks like it lowers the TRGMII Rx clock driving to
    after the TRGMII Tx clock driving is lowered. This is run after lowering
    the Tx clock driving on the U-Boot MediaTek ethernet driver as well.
    
    This way, the switch should consume less power regardless of port 6 being
    used.
    
    Update the comment explaining mt7530_pad_clk_setup().
    
    Tested rgmii and trgmii modes of port 6 and rgmii mode of port 5 on MCM
    MT7530 on MT7621AT Unielec U7621-06 and standalone MT7530 on MT7623NI
    Bananapi BPI-R2.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Link: https://source.denx.de/u-boot/u-boot/-/blob/29a48bf9ccba45a5e560bb564bbe76e42629325f/drivers/net/mtk_eth.c#L682
    Tested-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Signed-off-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Link: https://lore.kernel.org/r/20230320190520.124513-2-arinc.unal@arinc9.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4424f88795d6d90948b5725c8874f49e72468df0
Author: Arınç ÜNAL <arinc.unal@arinc9.com>
Date:   Mon Mar 20 22:05:18 2023 +0300

    net: dsa: mt7530: move enabling disabling core clock to mt7530_pll_setup()
    
    [ Upstream commit 8f058a6ef99f0b88a177b58cc46a44ff5112e40a ]
    
    Split the code that enables and disables TRGMII clocks and core clock.
    Move enabling and disabling core clock to mt7530_pll_setup() as it's
    supposed to be run there.
    
    Add 20 ms delay before enabling the core clock as seen on the U-Boot
    MediaTek ethernet driver.
    
    Change the comment for enabling and disabling TRGMII clocks as the code
    seems to affect both TXC and RXC.
    
    Tested rgmii and trgmii modes of port 6 and rgmii mode of port 5 on MCM
    MT7530 on MT7621AT Unielec U7621-06 and standalone MT7530 on MT7623NI
    Bananapi BPI-R2.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Link: https://source.denx.de/u-boot/u-boot/-/blob/29a48bf9ccba45a5e560bb564bbe76e42629325f/drivers/net/mtk_eth.c#L589
    Tested-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Signed-off-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Link: https://lore.kernel.org/r/20230320190520.124513-1-arinc.unal@arinc9.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4fe4edc6cf041aeda7e82d45e0e22ea2289895d
Author: Grant Grundler <grundler@chromium.org>
Date:   Tue Mar 21 10:05:39 2023 -0700

    net: asix: fix modprobe "sysfs: cannot create duplicate filename"
    
    [ Upstream commit 8eac0095de355ee31e1b014f79f83d2cd62a2d04 ]
    
    "modprobe asix ; rmmod asix ; modprobe asix" fails with:
       sysfs: cannot create duplicate filename \
            '/devices/virtual/mdio_bus/usb-003:004'
    
    Issue was originally reported by Anton Lundin on 2022-06-22 (link below).
    
    Chrome OS team hit the same issue in Feb, 2023 when trying to find
    work arounds for other issues with AX88172 devices.
    
    The use of devm_mdiobus_register() with usbnet devices results in the
    MDIO data being associated with the USB device. When the asix driver
    is unloaded, the USB device continues to exist and the corresponding
    "mdiobus_unregister()" is NOT called until the USB device is unplugged
    or unauthorized. So the next "modprobe asix" will fail because the MDIO
    phy sysfs attributes still exist.
    
    The 'easy' (from a design PoV) fix is to use the non-devm variants of
    mdiobus_* functions and explicitly manage this use in the asix_bind
    and asix_unbind function calls. I've not explored trying to fix usbnet
    initialization so devm_* stuff will work.
    
    Fixes: e532a096be0e5 ("net: usb: asix: ax88772: add phylib support")
    Reported-by: Anton Lundin <glance@acc.umu.se>
    Link: https://lore.kernel.org/netdev/20220623063649.GD23685@pengutronix.de/T/
    Tested-by: Eizan Miyamoto <eizan@chromium.org>
    Signed-off-by: Grant Grundler <grundler@chromium.org>
    Link: https://lore.kernel.org/r/20230321170539.732147-1-grundler@chromium.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b9613402ce271814770acf87e14dbf22be8f8fa
Author: Joshua Washington <joshwash@google.com>
Date:   Tue Mar 21 10:23:32 2023 -0700

    gve: Cache link_speed value from device
    
    [ Upstream commit 68c3e4fc8628b1487c965aabb29207249657eb5f ]
    
    The link speed is never changed for the uptime of a VM, and the current
    implementation sends an admin queue command for each call. Admin queue
    command invocations have nontrivial overhead (e.g., VM exits), which can
    be disruptive to users if triggered frequently. Our telemetry data shows
    that there are VMs that make frequent calls to this admin queue command.
    Caching the result of the original admin queue command would eliminate
    the need to send multiple admin queue commands on subsequent calls to
    retrieve link speed.
    
    Fixes: 7e074d5a76ca ("gve: Enable Link Speed Reporting in the driver.")
    Signed-off-by: Joshua Washington <joshwash@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230321172332.91678-1-joshwash@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 554828c833e67970eaad02f44064487626910088
Author: Brian Gix <brian.gix@gmail.com>
Date:   Mon Mar 6 14:32:21 2023 -0800

    Bluetooth: Remove "Power-on" check from Mesh feature
    
    [ Upstream commit 52dd5e964a55c98c1b0bcf5fc737a5ddd00e7d4d ]
    
    The Bluetooth mesh experimental feature enable was requiring the
    controller to be powered off in order for the Enable to work. Mesh is
    supposed to be enablable regardless of the controller state, and created
    an unintended requirement that the mesh daemon be started before the
    classic bluetoothd daemon.
    
    Fixes: af6bcc1921ff ("Bluetooth: Add experimental wrapper for MGMT based mesh")
    Signed-off-by: Brian Gix <brian.gix@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2a90a5b153ad7d6eabae73106c2d16b27dad45f
Author: Pauli Virtanen <pav@iki.fi>
Date:   Mon Feb 20 19:38:24 2023 +0000

    Bluetooth: ISO: fix timestamped HCI ISO data packet parsing
    
    [ Upstream commit 2f10e40a948e8a2abe7f983df3959a333ca8955f ]
    
    Use correct HCI ISO data packet header struct when the packet has
    timestamp. The timestamp, when present, goes before the other fields
    (Core v5.3 4E 5.4.5), so the structs are not compatible.
    
    Fixes: ccf74f2390d6 ("Bluetooth: Add BTPROTO_ISO socket type")
    Signed-off-by: Pauli Virtanen <pav@iki.fi>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0338af405aed107cb576d786142bf65fc47d712
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Feb 24 15:54:31 2023 -0800

    Bluetooth: btusb: Remove detection of ISO packets over bulk
    
    [ Upstream commit efe375b716c1c1c9b52a816f5b933a95421020a2 ]
    
    This removes the code introduced by
    14202eff214e1e941fefa0366d4c3bc4b1a0d500 as hci_recv_frame is now able
    to detect ACL packets that are in fact ISO packets.
    
    Fixes: 14202eff214e ("Bluetooth: btusb: Detect if an ACL packet is in fact an ISO packet")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f770ce652b27cd28164f799c2655a1dee3ceef12
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Feb 24 15:43:31 2023 -0800

    Bluetooth: hci_core: Detect if an ACL packet is in fact an ISO packet
    
    [ Upstream commit 876e78104f23ce9267822757a63562a609b126c3 ]
    
    Because some transports don't have a dedicated type for ISO packets
    (see 14202eff214e1e941fefa0366d4c3bc4b1a0d500) they may use ACL type
    when in fact they are ISO packets.
    
    In the past this was left for the driver to detect such thing but it
    creates a problem when using the likes of btproxy when used by a VM as
    the host would not be aware of the connection the guest is doing it
    won't be able to detect such behavior, so this make bt_recv_frame
    detect when it happens as it is the common interface to all drivers
    including guest VMs.
    
    Fixes: 14202eff214e ("Bluetooth: btusb: Detect if an ACL packet is in fact an ISO packet")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc7a5dde52a241324b41a44624cdd1733f7ecc99
Author: Zhengping Jiang <jiangzp@google.com>
Date:   Tue Feb 21 16:17:56 2023 -0800

    Bluetooth: hci_sync: Resume adv with no RPA when active scan
    
    [ Upstream commit 3c44a431d62bf4a20d7b901f98266ae3f4676d48 ]
    
    The address resolution should be disabled during the active scan,
    so all the advertisements can reach the host. The advertising
    has to be paused before disabling the address resolution,
    because the advertising will prevent any changes to the resolving
    list and the address resolution status. Skipping this will cause
    the hci error and the discovery failure.
    
    According to the bluetooth specification:
    "7.8.44 LE Set Address Resolution Enable command
    
    This command shall not be used when:
    - Advertising (other than periodic advertising) is enabled,
    - Scanning is enabled, or
    - an HCI_LE_Create_Connection, HCI_LE_Extended_Create_Connection, or
      HCI_LE_Periodic_Advertising_Create_Sync command is outstanding."
    
    If the host is using RPA, the controller needs to generate RPA for
    the advertising, so the advertising must remain paused during the
    active scan.
    
    If the host is not using RPA, the advertising can be resumed after
    disabling the address resolution.
    
    Fixes: 9afc675edeeb ("Bluetooth: hci_sync: allow advertise when scan without RPA")
    Signed-off-by: Zhengping Jiang <jiangzp@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 303f8e58cc3ace744801dcdcabfc06ffc72ed62d
Author: ChenXiaoSong <chenxiaosong2@huawei.com>
Date:   Thu Mar 2 21:58:04 2023 +0800

    ksmbd: fix possible refcount leak in smb2_open()
    
    [ Upstream commit 2624b445544ffc1472ccabfb6ec867c199d4c95c ]
    
    Reference count of acls will leak when memory allocation fails. Fix this
    by adding the missing posix_acl_release().
    
    Fixes: e2f34481b24d ("cifsd: add server-side procedures for SMB3")
    Signed-off-by: ChenXiaoSong <chenxiaosong2@huawei.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4e6cd9253c8b6bf1f39c52cdb52355d28ad5ec9
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Tue Mar 7 21:56:07 2023 +0900

    ksmbd: add low bound validation to FSCTL_QUERY_ALLOCATED_RANGES
    
    [ Upstream commit 342edb60dcda7a409430359b0cac2864bb9dfe44 ]
    
    Smatch static checker warning:
     fs/ksmbd/vfs.c:1040 ksmbd_vfs_fqar_lseek() warn: no lower bound on 'length'
     fs/ksmbd/vfs.c:1041 ksmbd_vfs_fqar_lseek() warn: no lower bound on 'start'
    
    Fix unexpected result that could caused from negative start and length.
    
    Fixes: f44158485826 ("cifsd: add file operations")
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd344dc3bbf086f4c9175de3d1d0753e28ea7fdf
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Mar 5 21:04:00 2023 +0900

    ksmbd: add low bound validation to FSCTL_SET_ZERO_DATA
    
    [ Upstream commit 2d74ec97131b1179a373b6d521f195c84e894eb6 ]
    
    Smatch static checker warning:
     fs/ksmbd/smb2pdu.c:7759 smb2_ioctl()
     warn: no lower bound on 'off'
    
    Fix unexpected result that could caused from negative off and bfz.
    
    Fixes: b5e5f9dfc915 ("ksmbd: check invalid FileOffset and BeyondFinalZero in FSCTL_ZERO_DATA")
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82268b2da28a8a1fbf6b04ef8e3e0dbe4e16237e
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Wed Nov 30 16:09:11 2022 +0100

    hvc/xen: prevent concurrent accesses to the shared ring
    
    [ Upstream commit 6214894f49a967c749ee6c07cb00f9cede748df4 ]
    
    The hvc machinery registers both a console and a tty device based on
    the hv ops provided by the specific implementation.  Those two
    interfaces however have different locks, and there's no single locks
    that's shared between the tty and the console implementations, hence
    the driver needs to protect itself against concurrent accesses.
    Otherwise concurrent calls using the split interfaces are likely to
    corrupt the ring indexes, leaving the console unusable.
    
    Introduce a lock to xencons_info to serialize accesses to the shared
    ring.  This is only required when using the shared memory console,
    concurrent accesses to the hypercall based console implementation are
    not an issue.
    
    Note the conditional logic in domU_read_console() is slightly modified
    so the notify_daemon() call can be done outside of the locked region:
    it's an hypercall and there's no need for it to be done with the lock
    held.
    
    Fixes: b536b4b96230 ('xen: use the hvc console infrastructure for Xen console')
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20221130150919.13935-1-roger.pau@citrix.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4df371323e4f5c03ae3620311f810ce7adae5837
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Mar 21 12:42:00 2023 +0100

    mlxsw: spectrum_fid: Fix incorrect local port type
    
    [ Upstream commit bb765a743377d46d8da8e7f7e5128022504741b9 ]
    
    Local port is a 10-bit number, but it was mistakenly stored in a u8,
    resulting in firmware errors when using a netdev corresponding to a
    local port higher than 255.
    
    Fix by storing the local port in u16, as is done in the rest of the
    code.
    
    Fixes: bf73904f5fba ("mlxsw: Add support for 802.1Q FID family")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Danielle Ratson <danieller@nvidia.com>
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/eace1f9d96545ab8a2775db857cb7e291a9b166b.1679398549.git.petrm@nvidia.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 869bb1932bc7c3a572c99a28a18b46a1f7c3c41a
Author: Caleb Sander <csander@purestorage.com>
Date:   Mon Mar 20 09:57:36 2023 -0600

    nvme-tcp: fix nvme_tcp_term_pdu to match spec
    
    [ Upstream commit aa01c67de5926fdb276793180564f172c55fb0d7 ]
    
    The FEI field of C2HTermReq/H2CTermReq is 4 bytes but not 4-byte-aligned
    in the NVMe/TCP specification (it is located at offset 10 in the PDU).
    Split it into two 16-bit integers in struct nvme_tcp_term_pdu
    so no padding is inserted. There should also be 10 reserved bytes after.
    There are currently no users of this type.
    
    Fixes: fc221d05447aa6db ("nvme-tcp: Add protocol header")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Caleb Sander <csander@purestorage.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a338bd69e55b4bd984ad11e97d0b1da6271c3ba0
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Tue Mar 21 14:45:43 2023 +1100

    net/sonic: use dma_mapping_error() for error check
    
    [ Upstream commit 4107b8746d93ace135b8c4da4f19bbae81db785f ]
    
    The DMA address returned by dma_map_single() should be checked with
    dma_mapping_error(). Fix it accordingly.
    
    Fixes: efcce839360f ("[PATCH] macsonic/jazzsonic network drivers update")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@linux-m68k.org>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/6645a4b5c1e364312103f48b7b36783b94e197a2.1679370343.git.fthain@linux-m68k.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c7d6803689c99d55bbb862260d0ba486ff23c0b
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 20 16:34:27 2023 +0000

    erspan: do not use skb_mac_header() in ndo_start_xmit()
    
    [ Upstream commit 8e50ed774554f93d55426039b27b1e38d7fa64d8 ]
    
    Drivers should not assume skb_mac_header(skb) == skb->data in their
    ndo_start_xmit().
    
    Use skb_network_offset() and skb_transport_offset() which
    better describe what is needed in erspan_fb_xmit() and
    ip6erspan_tunnel_xmit()
    
    syzbot reported:
    WARNING: CPU: 0 PID: 5083 at include/linux/skbuff.h:2873 skb_mac_header include/linux/skbuff.h:2873 [inline]
    WARNING: CPU: 0 PID: 5083 at include/linux/skbuff.h:2873 ip6erspan_tunnel_xmit+0x1d9c/0x2d90 net/ipv6/ip6_gre.c:962
    Modules linked in:
    CPU: 0 PID: 5083 Comm: syz-executor406 Not tainted 6.3.0-rc2-syzkaller-00866-gd4671cb96fa3 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/02/2023
    RIP: 0010:skb_mac_header include/linux/skbuff.h:2873 [inline]
    RIP: 0010:ip6erspan_tunnel_xmit+0x1d9c/0x2d90 net/ipv6/ip6_gre.c:962
    Code: 04 02 41 01 de 84 c0 74 08 3c 03 0f 8e 1c 0a 00 00 45 89 b4 24 c8 00 00 00 c6 85 77 fe ff ff 01 e9 33 e7 ff ff e8 b4 27 a1 f8 <0f> 0b e9 b6 e7 ff ff e8 a8 27 a1 f8 49 8d bf f0 0c 00 00 48 b8 00
    RSP: 0018:ffffc90003b2f830 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: 000000000000ffff RCX: 0000000000000000
    RDX: ffff888021273a80 RSI: ffffffff88e1bd4c RDI: 0000000000000003
    RBP: ffffc90003b2f9d8 R08: 0000000000000003 R09: 000000000000ffff
    R10: 000000000000ffff R11: 0000000000000000 R12: ffff88802b28da00
    R13: 00000000000000d0 R14: ffff88807e25b6d0 R15: ffff888023408000
    FS: 0000555556a61300(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000055e5b11eb6e8 CR3: 0000000027c1b000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    __netdev_start_xmit include/linux/netdevice.h:4900 [inline]
    netdev_start_xmit include/linux/netdevice.h:4914 [inline]
    __dev_direct_xmit+0x504/0x730 net/core/dev.c:4300
    dev_direct_xmit include/linux/netdevice.h:3088 [inline]
    packet_xmit+0x20a/0x390 net/packet/af_packet.c:285
    packet_snd net/packet/af_packet.c:3075 [inline]
    packet_sendmsg+0x31a0/0x5150 net/packet/af_packet.c:3107
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg+0xde/0x190 net/socket.c:747
    __sys_sendto+0x23a/0x340 net/socket.c:2142
    __do_sys_sendto net/socket.c:2154 [inline]
    __se_sys_sendto net/socket.c:2150 [inline]
    __x64_sys_sendto+0xe1/0x1b0 net/socket.c:2150
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f123aaa1039
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 b1 14 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffc15d12058 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f123aaa1039
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 0000000020000040 R09: 0000000000000014
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f123aa648c0
    R13: 431bde82d7b634db R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: 1baf5ebf8954 ("erspan: auto detect truncated packets.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230320163427.8096-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff0d8cc6cde9553d8da85df6c56efbc807a52f89
Author: Li Zetao <lizetao1@huawei.com>
Date:   Mon Mar 20 14:33:18 2023 +0000

    atm: idt77252: fix kmemleak when rmmod idt77252
    
    [ Upstream commit 4fe3c88552a3fbe1944426a4506a18cdeb457b5a ]
    
    There are memory leaks reported by kmemleak:
    
      unreferenced object 0xffff888106500800 (size 128):
        comm "modprobe", pid 1017, jiffies 4297787785 (age 67.152s)
        hex dump (first 32 bytes):
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<00000000970ce626>] __kmem_cache_alloc_node+0x20c/0x380
          [<00000000fb5f78d9>] kmalloc_trace+0x2f/0xb0
          [<000000000e947e2a>] idt77252_init_one+0x2847/0x3c90 [idt77252]
          [<000000006efb048e>] local_pci_probe+0xeb/0x1a0
        ...
    
      unreferenced object 0xffff888106500b00 (size 128):
        comm "modprobe", pid 1017, jiffies 4297787785 (age 67.152s)
        hex dump (first 32 bytes):
          00 20 3d 01 80 88 ff ff 00 20 3d 01 80 88 ff ff  . =...... =.....
          f0 23 3d 01 80 88 ff ff 00 20 3d 01 00 00 00 00  .#=...... =.....
        backtrace:
          [<00000000970ce626>] __kmem_cache_alloc_node+0x20c/0x380
          [<00000000fb5f78d9>] kmalloc_trace+0x2f/0xb0
          [<00000000f451c5be>] alloc_scq.constprop.0+0x4a/0x400 [idt77252]
          [<00000000e6313849>] idt77252_init_one+0x28cf/0x3c90 [idt77252]
    
    The root cause is traced to the vc_maps which alloced in open_card_oam()
    are not freed in close_card_oam(). The vc_maps are used to record
    open connections, so when close a vc_map in close_card_oam(), the memory
    should be freed. Moreover, the ubr0 is not closed when close a idt77252
    device, leading to the memory leak of vc_map and scq_info.
    
    Fix them by adding kfree in close_card_oam() and implementing new
    close_card_ubr0() to close ubr0.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Francois Romieu <romieu@fr.zoreil.com>
    Link: https://lore.kernel.org/r/20230320143318.2644630-1-lizetao1@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 774865342132d434505d3f55d906b48f30c83d3e
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Sun Mar 19 10:55:40 2023 +0100

    net: dsa: tag_brcm: legacy: fix daisy-chained switches
    
    [ Upstream commit 032a954061afd4b7426c3eb6bfd2952ef1e9a384 ]
    
    When BCM63xx internal switches are connected to switches with a 4-byte
    Broadcom tag, it does not identify the packet as VLAN tagged, so it adds one
    based on its PVID (which is likely 0).
    Right now, the packet is received by the BCM63xx internal switch and the 6-byte
    tag is properly processed. The next step would to decode the corresponding
    4-byte tag. However, the internal switch adds an invalid VLAN tag after the
    6-byte tag and the 4-byte tag handling fails.
    In order to fix this we need to remove the invalid VLAN tag after the 6-byte
    tag before passing it to the 4-byte tag decoding.
    
    Fixes: 964dbf186eaa ("net: dsa: tag_brcm: add support for legacy tags")
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20230319095540.239064-1-noltari@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4c977935b2fc60084b3735737d17a06e7ba1bd0
Author: Dan Carpenter <error27@gmail.com>
Date:   Mon Feb 27 14:16:10 2023 +0300

    net/mlx5: E-Switch, Fix an Oops in error handling code
    
    [ Upstream commit 640fcdbcf27fc62de9223f958ceb4e897a00e791 ]
    
    The error handling dereferences "vport".  There is nothing we can do if
    it is an error pointer except returning the error code.
    
    Fixes: 133dcfc577ea ("net/mlx5: E-Switch, Alloc and free unique metadata for match")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Reviewed-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fba0b70e8cf786b7d9efc3cae13eb42f50c03b3e
Author: Maher Sanalla <msanalla@nvidia.com>
Date:   Wed Mar 15 11:04:38 2023 +0200

    net/mlx5: Read the TC mapping of all priorities on ETS query
    
    [ Upstream commit 44d553188c38ac74b799dfdcebafef2f7bb70942 ]
    
    When ETS configurations are queried by the user to get the mapping
    assignment between packet priority and traffic class, only priorities up
    to maximum TCs are queried from QTCT register in FW to retrieve their
    assigned TC, leaving the rest of the priorities mapped to the default
    TC #0 which might be misleading.
    
    Fix by querying the TC mapping of all priorities on each ETS query,
    regardless of the maximum number of TCs configured in FW.
    
    Fixes: 820c2c5e773d ("net/mlx5e: Read ETS settings directly from firmware")
    Signed-off-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e42fd7c0be574022916415ba083f4d8cf7d299f
Author: Emeel Hakim <ehakim@nvidia.com>
Date:   Mon Mar 20 13:13:55 2023 +0200

    net/mlx5e: Overcome slow response for first macsec ASO WQE
    
    [ Upstream commit 7e3fce82d945cf6e7f99034b113ff2d250d7524d ]
    
    First ASO WQE poll causes a cache miss in hardware hence the resut is
    delayed. It causes to the situation where such WQE is polled earlier
    than it is needed.
    
    Add logic to retry ASO CQ polling operation.
    
    Fixes: 739cfa34518e ("net/mlx5: Make ASO poll CQ usable in atomic context") 
    Signed-off-by: Emeel Hakim <ehakim@nvidia.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Raed Salem <raeds@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63546395a0e6ac264f78f65218086ce6014b4494
Author: Lama Kayal <lkayal@nvidia.com>
Date:   Tue Jan 31 14:07:03 2023 +0200

    net/mlx5: Fix steering rules cleanup
    
    [ Upstream commit 922f56e9a795d6f3dd72d3428ebdd7ee040fa855 ]
    
    vport's mc, uc and multicast rules are not deleted in teardown path when
    EEH happens. Since the vport's promisc settings(uc, mc and all) in
    firmware are reset after EEH, mlx5 driver will try to delete the above
    rules in the initialization path. This cause kernel crash because these
    software rules are no longer valid.
    
    Fix by nullifying these rules right after delete to avoid accessing any dangling
    pointers.
    
    Call Trace:
    __list_del_entry_valid+0xcc/0x100 (unreliable)
    tree_put_node+0xf4/0x1b0 [mlx5_core]
    tree_remove_node+0x30/0x70 [mlx5_core]
    mlx5_del_flow_rules+0x14c/0x1f0 [mlx5_core]
    esw_apply_vport_rx_mode+0x10c/0x200 [mlx5_core]
    esw_update_vport_rx_mode+0xb4/0x180 [mlx5_core]
    esw_vport_change_handle_locked+0x1ec/0x230 [mlx5_core]
    esw_enable_vport+0x130/0x260 [mlx5_core]
    mlx5_eswitch_enable_sriov+0x2a0/0x2f0 [mlx5_core]
    mlx5_device_enable_sriov+0x74/0x440 [mlx5_core]
    mlx5_load_one+0x114c/0x1550 [mlx5_core]
    mlx5_pci_resume+0x68/0xf0 [mlx5_core]
    eeh_report_resume+0x1a4/0x230
    eeh_pe_dev_traverse+0x98/0x170
    eeh_handle_normal_event+0x3e4/0x640
    eeh_handle_event+0x4c/0x370
    eeh_event_handler+0x14c/0x210
    kthread+0x168/0x1b0
    ret_from_kernel_thread+0x5c/0x84
    
    Fixes: a35f71f27a61 ("net/mlx5: E-Switch, Implement promiscuous rx modes vf request handling")
    Signed-off-by: Huy Nguyen <huyn@mellanox.com>
    Signed-off-by: Lama Kayal <lkayal@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93260bd809e0ce44fda463ebc590376e24d8cc11
Author: Gavin Li <gavinl@nvidia.com>
Date:   Thu Feb 9 12:48:52 2023 +0200

    net/mlx5e: Block entering switchdev mode with ns inconsistency
    
    [ Upstream commit 662404b24a4c4d839839ed25e3097571f5938b9b ]
    
    Upon entering switchdev mode, VF/SF representors are spawned in the
    devlink instance's net namespace, whereas the PF net device transforms
    into the uplink representor, remaining in the net namespace the PF net
    device was in. Therefore, if a PF net device's namespace is different from
    its parent devlink net namespace, entering switchdev mode can create an
    illegal situation where all representors sharing the same core device
    are NOT in the same net namespace.
    
    To avoid this issue, block entering switchdev mode for devices whose child
    netdev net namespace has diverged from the parent devlink's.
    
    Fixes: 7768d1971de6 ("net/mlx5: E-Switch, Add control for encapsulation")
    Signed-off-by: Gavin Li <gavinl@nvidia.com>
    Reviewed-by: Gavi Teitz <gavi@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3169140ee294351d35162ecea05251add75e0377
Author: Gavin Li <gavinl@nvidia.com>
Date:   Fri Nov 25 04:15:40 2022 +0200

    net/mlx5e: Set uplink rep as NETNS_LOCAL
    
    [ Upstream commit c83172b0639c8a005c0dd3b36252dc22ddd9f19c ]
    
    Previously, NETNS_LOCAL was not set for uplink representors, inconsistent
    with VF representors, and allowed the uplink representor to be moved
    between net namespaces and separated from the VF representors it shares
    the core device with. Such usage would break the isolation model of
    namespaces, as devices in different namespaces would have access to
    shared memory.
    
    To solve this issue, set NETNS_LOCAL for uplink representors if eswitch is
    in switchdev mode.
    
    Fixes: 7a9fb35e8c3a ("net/mlx5e: Do not reload ethernet ports when changing eswitch mode")
    Signed-off-by: Gavin Li <gavinl@nvidia.com>
    Reviewed-by: Gavi Teitz <gavi@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cda812c76067c8a771eae43bb6943481cc7effc
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Mar 20 15:37:25 2023 +0100

    bpf: Adjust insufficient default bpf_jit_limit
    
    [ Upstream commit 10ec8ca8ec1a2f04c4ed90897225231c58c124a7 ]
    
    We've seen recent AWS EKS (Kubernetes) user reports like the following:
    
      After upgrading EKS nodes from v20230203 to v20230217 on our 1.24 EKS
      clusters after a few days a number of the nodes have containers stuck
      in ContainerCreating state or liveness/readiness probes reporting the
      following error:
    
        Readiness probe errored: rpc error: code = Unknown desc = failed to
        exec in container: failed to start exec "4a11039f730203ffc003b7[...]":
        OCI runtime exec failed: exec failed: unable to start container process:
        unable to init seccomp: error loading seccomp filter into kernel:
        error loading seccomp filter: errno 524: unknown
    
      However, we had not been seeing this issue on previous AMIs and it only
      started to occur on v20230217 (following the upgrade from kernel 5.4 to
      5.10) with no other changes to the underlying cluster or workloads.
    
      We tried the suggestions from that issue (sysctl net.core.bpf_jit_limit=452534528)
      which helped to immediately allow containers to be created and probes to
      execute but after approximately a day the issue returned and the value
      returned by cat /proc/vmallocinfo | grep bpf_jit | awk '{s+=$2} END {print s}'
      was steadily increasing.
    
    I tested bpf tree to observe bpf_jit_charge_modmem, bpf_jit_uncharge_modmem
    their sizes passed in as well as bpf_jit_current under tcpdump BPF filter,
    seccomp BPF and native (e)BPF programs, and the behavior all looks sane
    and expected, that is nothing "leaking" from an upstream perspective.
    
    The bpf_jit_limit knob was originally added in order to avoid a situation
    where unprivileged applications loading BPF programs (e.g. seccomp BPF
    policies) consuming all the module memory space via BPF JIT such that loading
    of kernel modules would be prevented. The default limit was defined back in
    2018 and while good enough back then, we are generally seeing far more BPF
    consumers today.
    
    Adjust the limit for the BPF JIT pool from originally 1/4 to now 1/2 of the
    module memory space to better reflect today's needs and avoid more users
    running into potentially hard to debug issues.
    
    Fixes: fdadd04931c2 ("bpf: fix bpf_jit_limit knob for PAGE_SIZE >= 64K")
    Reported-by: Stephen Haynes <sh@synk.net>
    Reported-by: Lefteris Alexakis <lefteris.alexakis@kpn.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://github.com/awslabs/amazon-eks-ami/issues/1179
    Link: https://github.com/awslabs/amazon-eks-ami/issues/1219
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230320143725.8394-1-daniel@iogearbox.net
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25634e4df7b28663a54c7360d5e6664fa3e6122f
Author: Radoslaw Tyl <radoslawx.tyl@intel.com>
Date:   Mon Mar 13 15:07:33 2023 +0100

    i40e: fix flow director packet filter programming
    
    [ Upstream commit c672297bbc0e86dbf88396b8053e2fbb173f16ff ]
    
    Initialize to zero structures to build a valid
    Tx Packet used for the filter programming.
    
    Fixes: a9219b332f52 ("i40e: VLAN field for flow director")
    Signed-off-by: Radoslaw Tyl <radoslawx.tyl@intel.com>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Tested-by: Arpana Arland <arpanax.arland@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 502b898235f06130750c91512c86dd0e9efe28e6
Author: Stefan Assmann <sassmann@kpanic.de>
Date:   Mon Mar 13 17:06:45 2023 +0100

    iavf: fix hang on reboot with ice
    
    [ Upstream commit 4e264be98b88a6d6f476c11087fe865696e8bef5 ]
    
    When a system with E810 with existing VFs gets rebooted the following
    hang may be observed.
    
     Pid 1 is hung in iavf_remove(), part of a network driver:
     PID: 1        TASK: ffff965400e5a340  CPU: 24   COMMAND: "systemd-shutdow"
      #0 [ffffaad04005fa50] __schedule at ffffffff8b3239cb
      #1 [ffffaad04005fae8] schedule at ffffffff8b323e2d
      #2 [ffffaad04005fb00] schedule_hrtimeout_range_clock at ffffffff8b32cebc
      #3 [ffffaad04005fb80] usleep_range_state at ffffffff8b32c930
      #4 [ffffaad04005fbb0] iavf_remove at ffffffffc12b9b4c [iavf]
      #5 [ffffaad04005fbf0] pci_device_remove at ffffffff8add7513
      #6 [ffffaad04005fc10] device_release_driver_internal at ffffffff8af08baa
      #7 [ffffaad04005fc40] pci_stop_bus_device at ffffffff8adcc5fc
      #8 [ffffaad04005fc60] pci_stop_and_remove_bus_device at ffffffff8adcc81e
      #9 [ffffaad04005fc70] pci_iov_remove_virtfn at ffffffff8adf9429
     #10 [ffffaad04005fca8] sriov_disable at ffffffff8adf98e4
     #11 [ffffaad04005fcc8] ice_free_vfs at ffffffffc04bb2c8 [ice]
     #12 [ffffaad04005fd10] ice_remove at ffffffffc04778fe [ice]
     #13 [ffffaad04005fd38] ice_shutdown at ffffffffc0477946 [ice]
     #14 [ffffaad04005fd50] pci_device_shutdown at ffffffff8add58f1
     #15 [ffffaad04005fd70] device_shutdown at ffffffff8af05386
     #16 [ffffaad04005fd98] kernel_restart at ffffffff8a92a870
     #17 [ffffaad04005fda8] __do_sys_reboot at ffffffff8a92abd6
     #18 [ffffaad04005fee0] do_syscall_64 at ffffffff8b317159
     #19 [ffffaad04005ff08] __context_tracking_enter at ffffffff8b31b6fc
     #20 [ffffaad04005ff18] syscall_exit_to_user_mode at ffffffff8b31b50d
     #21 [ffffaad04005ff28] do_syscall_64 at ffffffff8b317169
     #22 [ffffaad04005ff50] entry_SYSCALL_64_after_hwframe at ffffffff8b40009b
         RIP: 00007f1baa5c13d7  RSP: 00007fffbcc55a98  RFLAGS: 00000202
         RAX: ffffffffffffffda  RBX: 0000000000000000  RCX: 00007f1baa5c13d7
         RDX: 0000000001234567  RSI: 0000000028121969  RDI: 00000000fee1dead
         RBP: 00007fffbcc55ca0   R8: 0000000000000000   R9: 00007fffbcc54e90
         R10: 00007fffbcc55050  R11: 0000000000000202  R12: 0000000000000005
         R13: 0000000000000000  R14: 00007fffbcc55af0  R15: 0000000000000000
         ORIG_RAX: 00000000000000a9  CS: 0033  SS: 002b
    
    During reboot all drivers PM shutdown callbacks are invoked.
    In iavf_shutdown() the adapter state is changed to __IAVF_REMOVE.
    In ice_shutdown() the call chain above is executed, which at some point
    calls iavf_remove(). However iavf_remove() expects the VF to be in one
    of the states __IAVF_RUNNING, __IAVF_DOWN or __IAVF_INIT_FAILED. If
    that's not the case it sleeps forever.
    So if iavf_shutdown() gets invoked before iavf_remove() the system will
    hang indefinitely because the adapter is already in state __IAVF_REMOVE.
    
    Fix this by returning from iavf_remove() if the state is __IAVF_REMOVE,
    as we already went through iavf_shutdown().
    
    Fixes: 974578017fc1 ("iavf: Add waiting so the port is initialized in remove")
    Fixes: a8417330f8a5 ("iavf: Fix race condition between iavf_shutdown and iavf_remove")
    Reported-by: Marius Cornea <mcornea@redhat.com>
    Signed-off-by: Stefan Assmann <sassmann@kpanic.de>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e16fa0c9ff7c59f970a426f9f999ef017d884ec9
Author: Michal Swiatkowski <michal.swiatkowski@intel.com>
Date:   Fri Mar 10 12:33:44 2023 +0100

    ice: check if VF exists before mode check
    
    [ Upstream commit 83b49e7f63da88a1544cba2b2e40bfabb24bd203 ]
    
    Setting trust on VF should return EINVAL when there is no VF. Move
    checking for switchdev mode after checking if VF exists.
    
    Fixes: c54d209c78b8 ("ice: Wait for VF to be reset/ready before configuration")
    Signed-off-by: Michal Swiatkowski <michal.swiatkowski@intel.com>
    Signed-off-by: Kalyan Kodamagula <kalyan.kodamagula@intel.com>
    Tested-by: Sujai Buvaneswaran <sujai.buvaneswaran@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32c2b3f157d8bce308274188f72c1d1f44a22028
Author: David Howells <dhowells@redhat.com>
Date:   Tue Mar 14 15:15:18 2023 +0000

    keys: Do not cache key in task struct if key is requested from kernel thread
    
    [ Upstream commit 47f9e4c924025c5be87959d3335e66fcbb7f6b5c ]
    
    The key which gets cached in task structure from a kernel thread does not
    get invalidated even after expiry.  Due to which, a new key request from
    kernel thread will be served with the cached key if it's present in task
    struct irrespective of the key validity.  The change is to not cache key in
    task_struct when key requested from kernel thread so that kernel thread
    gets a valid key on every key request.
    
    The problem has been seen with the cifs module doing DNS lookups from a
    kernel thread and the results getting pinned by being attached to that
    kernel thread's cache - and thus not something that can be easily got rid
    of.  The cache would ordinarily be cleared by notify-resume, but kernel
    threads don't do that.
    
    This isn't seen with AFS because AFS is doing request_key() within the
    kernel half of a user thread - which will do notify-resume.
    
    Fixes: 7743c48e54ee ("keys: Cache result of request_key*() temporarily in task_struct")
    Signed-off-by: Bharath SM <bharathsm@microsoft.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    cc: Shyam Prasad N <nspmangalore@gmail.com>
    cc: Steve French <smfrench@gmail.com>
    cc: keyrings@vger.kernel.org
    cc: linux-cifs@vger.kernel.org
    cc: linux-fsdevel@vger.kernel.org
    Link: https://lore.kernel.org/r/CAGypqWw951d=zYRbdgNR4snUDvJhWL=q3=WOyh7HhSJupjz2vA@mail.gmail.com/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a22203bec3bed5d75affd61eec0ba1ef2900b83
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Wed Mar 15 22:54:08 2023 +0900

    bootconfig: Fix testcase to increase max node
    
    [ Upstream commit b69245126a48e50882021180fa5d264dc7149ccc ]
    
    Since commit 6c40624930c5 ("bootconfig: Increase max nodes of bootconfig
    from 1024 to 8192 for DCC support") increased the max number of bootconfig
    node to 8192, the bootconfig testcase of the max number of nodes fails.
    To fix this issue, we can not simply increase the number in the test script
    because the test bootconfig file becomes too big (>32KB). To fix that, we
    can use a combination of three alphabets (26^3 = 17576). But with that,
    we can not express the 8193 (just one exceed from the limitation) because
    it also exceeds the max size of bootconfig. So, the first 26 nodes will just
    use one alphabet.
    
    With this fix, test-bootconfig.sh passes all tests.
    
    Link: https://lore.kernel.org/all/167888844790.791176.670805252426835131.stgit@devnote2/
    
    Reported-by: Heinz Wiesinger <pprkut@slackware.com>
    Link: https://lore.kernel.org/all/2463802.XAFRqVoOGU@amaterasu.liwjatan.org
    Fixes: 6c40624930c5 ("bootconfig: Increase max nodes of bootconfig from 1024 to 8192 for DCC support")
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 840631bcf21f58c0a3f01378a54d79e9ce86b226
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Fri Mar 17 14:43:37 2023 +0800

    octeontx2-vf: Add missing free for alloc_percpu
    
    [ Upstream commit f038f3917baf04835ba2b7bcf2a04ac93fbf8a9c ]
    
    Add the free_percpu for the allocated "vf->hw.lmt_info" in order to avoid
    memory leak, same as the "pf->hw.lmt_info" in
    `drivers/net/ethernet/marvell/octeontx2/nic/otx2_pf.c`.
    
    Fixes: 5c0512072f65 ("octeontx2-pf: cn10k: Use runtime allocated LMTLINE region")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Acked-by: Geethasowjanya Akula <gakula@marvell.com>
    Link: https://lore.kernel.org/r/20230317064337.18198-1-jiasheng@iscas.ac.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84548ce2b2dbc89413a11f27f320c2c5ee441d34
Author: Geoff Levand <geoff@infradead.org>
Date:   Sat Mar 18 17:39:16 2023 +0000

    net/ps3_gelic_net: Use dma_mapping_error
    
    [ Upstream commit bebe933d35a63d4f042fbf4dce4f22e689ba0fcd ]
    
    The current Gelic Etherenet driver was checking the return value of its
    dma_map_single call, and not using the dma_mapping_error() routine.
    
    Fixes runtime problems like these:
    
      DMA-API: ps3_gelic_driver sb_05: device driver failed to check map error
      WARNING: CPU: 0 PID: 0 at kernel/dma/debug.c:1027 .check_unmap+0x888/0x8dc
    
    Fixes: 02c1889166b4 ("ps3: gigabit ethernet driver for PS3, take3")
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Geoff Levand <geoff@infradead.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6c10d12ae7633227d2769cdef4676dbeaa599fc
Author: Geoff Levand <geoff@infradead.org>
Date:   Sat Mar 18 17:39:16 2023 +0000

    net/ps3_gelic_net: Fix RX sk_buff length
    
    [ Upstream commit 19b3bb51c3bc288b3f2c6f8c4450b0f548320625 ]
    
    The Gelic Ethernet device needs to have the RX sk_buffs aligned to
    GELIC_NET_RXBUF_ALIGN, and also the length of the RX sk_buffs must
    be a multiple of GELIC_NET_RXBUF_ALIGN.
    
    The current Gelic Ethernet driver was not allocating sk_buffs large
    enough to allow for this alignment.
    
    Also, correct the maximum and minimum MTU sizes, and add a new
    preprocessor macro for the maximum frame size, GELIC_NET_MAX_FRAME.
    
    Fixes various randomly occurring runtime network errors.
    
    Fixes: 02c1889166b4 ("ps3: gigabit ethernet driver for PS3, take3")
    Signed-off-by: Geoff Levand <geoff@infradead.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83de34967473ed31d276381373713cc2869a42e5
Author: Szymon Heidrich <szymon.heidrich@gmail.com>
Date:   Sat Mar 18 10:25:52 2023 +0100

    net: usb: lan78xx: Limit packet length to skb->len
    
    [ Upstream commit 7f247f5a2c18b3f21206cdd51193df4f38e1b9f5 ]
    
    Packet length retrieved from descriptor may be larger than
    the actual socket buffer length. In such case the cloned
    skb passed up the network stack will leak kernel memory contents.
    
    Additionally prevent integer underflow when size is less than
    ETH_FCS_LEN.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Signed-off-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fc2c4e311a9341a2b0e044ab5f33afa37b56226
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Sat Mar 18 16:05:26 2023 +0800

    net: qcom/emac: Fix use after free bug in emac_remove due to race condition
    
    [ Upstream commit 6b6bc5b8bd2d4ca9e1efa9ae0f98a0b0687ace75 ]
    
    In emac_probe, &adpt->work_thread is bound with
    emac_work_thread. Then it will be started by timeout
    handler emac_tx_timeout or a IRQ handler emac_isr.
    
    If we remove the driver which will call emac_remove
      to make cleanup, there may be a unfinished work.
    
    The possible sequence is as follows:
    
    Fix it by finishing the work before cleanup in the emac_remove
    and disable timeout response.
    
    CPU0                  CPU1
    
                        |emac_work_thread
    emac_remove         |
    free_netdev         |
    kfree(netdev);      |
                        |emac_reinit_locked
                        |emac_mac_down
                        |//use netdev
    Fixes: b9b17debc69d ("net: emac: emac gigabit ethernet controller driver")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e516595e88670baf275701893fd43e0a454f7d0
Author: Andrzej Hajda <andrzej.hajda@intel.com>
Date:   Tue Mar 14 16:19:20 2023 +0100

    drm/i915/gt: perform uc late init after probe error injection
    
    [ Upstream commit 150784f9285e656373cf3953ef4a7663f1e1a0f2 ]
    
    Probe pseudo errors should be injected only in places where real errors
    can be encountered, otherwise unwinding code can be broken.
    Placing intel_uc_init_late before i915_inject_probe_error violated
    this rule, resulting in following bug:
    __intel_gt_disable:655 GEM_BUG_ON(intel_gt_pm_is_awake(gt))
    
    Fixes: 481d458caede ("drm/i915/guc: Add golden context to GuC ADS")
    Acked-by: Nirmoy Das <nirmoy.das@intel.com>
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Signed-off-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230314151920.1065847-1-andrzej.hajda@intel.com
    (cherry picked from commit c4252a11131c7f27a158294241466e2a4e7ff94e)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be8c6ad6b16e6181510e35c53928381f0f39640a
Author: John Harrison <John.C.Harrison@Intel.com>
Date:   Fri Mar 10 22:37:12 2023 -0800

    drm/i915/guc: Fix missing ecodes
    
    [ Upstream commit 8df23e4c4f72f4e201c28e6fb0a67e2dbf30628a ]
    
    Error captures are tagged with an 'ecode'. This is a pseduo-unique magic
    number that is meant to distinguish similar seeming bugs with
    different underlying signatures. It is a combination of two ring state
    registers. Unfortunately, the register state being used is only valid
    in execlist mode. In GuC mode, the register state exists in a separate
    list of arbitrary register address/value pairs rather than the named
    entry structure. So, search through that list to find the two exciting
    registers and copy them over to the structure's named members.
    
    v2: if else if instead of if if (Alan)
    
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Reviewed-by: Alan Previn <alan.previn.teres.alexis@intel.com>
    Fixes: a6f0f9cf330a ("drm/i915/guc: Plumb GuC-capture into gpu_coredump")
    Cc: Alan Previn <alan.previn.teres.alexis@intel.com>
    Cc: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Aravind Iddamsetty <aravind.iddamsetty@intel.com>
    Cc: Michael Cheng <michael.cheng@intel.com>
    Cc: Matthew Brost <matthew.brost@intel.com>
    Cc: Bruce Chang <yu.bruce.chang@intel.com>
    Cc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230311063714.570389-2-John.C.Harrison@Intel.com
    (cherry picked from commit 9724ecdbb9ddd6da3260e4a442574b90fc75188a)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2b9357d3da3f8054a47eef04c8ef361608b243e
Author: John Harrison <John.C.Harrison@Intel.com>
Date:   Thu Jan 26 16:28:42 2023 -0800

    drm/i915/guc: Rename GuC register state capture node to be more obvious
    
    [ Upstream commit 583ebae783b8241a30581c084ad6226051b594c5 ]
    
    The GuC specific register state entry in the error capture object was
    just called 'capture'. Although the companion 'node' entry was called
    'guc_capture_node'. Rename the base entry to be 'guc_capture' instead
    so that it is a) more consistent and b) more obvious what it is.
    
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230127002842.3169194-9-John.C.Harrison@Intel.com
    Stable-dep-of: 8df23e4c4f72 ("drm/i915/guc: Fix missing ecodes")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9595d71b2a274fe365240b53ce5d03c071c3e6e0
Author: Tejas Upadhyay <tejas.upadhyay@intel.com>
Date:   Wed Mar 1 12:10:52 2023 -0800

    drm/i915/fbdev: lock the fbdev obj before vma pin
    
    [ Upstream commit ed00eba03474adbf525ff03d69705d8c78b76456 ]
    
    lock the fbdev obj before calling into
    i915_vma_pin_iomap(). This helps to solve below :
    
    <7>[   93.563308] i915 0000:00:02.0: [drm:intelfb_create [i915]] no BIOS fb, allocating a new one
    <4>[   93.581844] ------------[ cut here ]------------
    <4>[   93.581855] WARNING: CPU: 12 PID: 625 at drivers/gpu/drm/i915/gem/i915_gem_pages.c:424 i915_gem_object_pin_map+0x152/0x1c0 [i915]
    
    Fixes: f0b6b01b3efe ("drm/i915: Add ww context to intel_dpt_pin, v2.")
    Cc: Chris Wilson <chris.p.wilson@intel.com>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Tejas Upadhyay <tejas.upadhyay@intel.com>
    Signed-off-by: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230301201053.928709-5-radhakrishna.sripada@intel.com
    (cherry picked from commit 561b31acfd65502a2cda2067513240fc57ccdbdc)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6375c5ecd8c790e381ee3f9baeda8c9e5da4a45
Author: Nirmoy Das <nirmoy.das@intel.com>
Date:   Fri Oct 14 17:46:55 2022 +0200

    drm/i915: Print return value on error
    
    [ Upstream commit 20c68127e8e9d7899001c47465d0b79581f5fdc1 ]
    
    Print returned error code for better debuggability.
    
    References: https://gitlab.freedesktop.org/drm/intel/-/issues/7211
    Signed-off-by: Nirmoy Das <nirmoy.das@intel.com>
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221014154655.14075-1-nirmoy.das@intel.com
    Stable-dep-of: ed00eba03474 ("drm/i915/fbdev: lock the fbdev obj before vma pin")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be282c83caecf3a51f63105c267cb33bb48dabf2
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Fri Mar 17 16:32:59 2023 +0100

    mlxsw: core_thermal: Fix fan speed in maximum cooling state
    
    [ Upstream commit 6d206b1ea9f48433a96edec7028586db1d947911 ]
    
    The cooling levels array is supposed to prevent the system fans from
    being configured below a 20% duty cycle as otherwise some of them get
    stuck at 0 RPM.
    
    Due to an off-by-one error, the last element in the array was not
    initialized, causing it to be set to zero, which in turn lead to fans
    being configured with a 0% duty cycle in maximum cooling state.
    
    Since commit 332fdf951df8 ("mlxsw: thermal: Fix out-of-bounds memory
    accesses") the contents of the array are static. Therefore, instead of
    fixing the initialization of the array, simply remove it and adjust
    thermal_cooling_device_ops::set_cur_state() so that the configured duty
    cycle is never set below 20%.
    
    Before:
    
     # cat /sys/class/thermal/thermal_zone0/cdev0/type
     mlxsw_fan
     # echo 10 > /sys/class/thermal/thermal_zone0/cdev0/cur_state
     # cat /sys/class/hwmon/hwmon0/name
     mlxsw
     # cat /sys/class/hwmon/hwmon0/pwm1
     0
    
    After:
    
     # cat /sys/class/thermal/thermal_zone0/cdev0/type
     mlxsw_fan
     # echo 10 > /sys/class/thermal/thermal_zone0/cdev0/cur_state
     # cat /sys/class/hwmon/hwmon0/name
     mlxsw
     # cat /sys/class/hwmon/hwmon0/pwm1
     255
    
    This bug was uncovered when the thermal subsystem repeatedly tried to
    configure the cooling devices to their maximum state due to another
    issue [1]. This resulted in the fans being stuck at 0 RPM, which
    eventually lead to the system undergoing thermal shutdown.
    
    [1] https://lore.kernel.org/netdev/ZA3CFNhU4AbtsP4G@shredder/
    
    Fixes: a421ce088ac8 ("mlxsw: core: Extend cooling device with cooling levels")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Vadim Pasternak <vadimp@nvidia.com>
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a71f388045edbf6788a61f43e2cdc94b392a4ea3
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 14 09:32:51 2022 +0200

    thermal/drivers/mellanox: Use generic thermal_zone_get_trip() function
    
    [ Upstream commit 44a29a4dab73411671e0b84817a5f07e291b1501 ]
    
    The thermal framework gives the possibility to register the trip
    points with the thermal zone. When that is done, no get_trip_* ops are
    needed and they can be removed.
    
    Convert ops content logic into generic trip points and register them with the
    thermal zone.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
    Link: https://lore.kernel.org/r/20221014073253.3719911-2-daniel.lezcano@linaro.org
    Stable-dep-of: 6d206b1ea9f4 ("mlxsw: core_thermal: Fix fan speed in maximum cooling state")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e60f30e65d350497d640f29028715724b2d9554
Author: Jochen Henneberg <jh@henneberg-systemdesign.com>
Date:   Fri Mar 17 09:08:17 2023 +0100

    net: stmmac: Fix for mismatched host/device DMA address width
    
    [ Upstream commit 070246e4674b125860d311c18ce2623e73e2bd51 ]
    
    Currently DMA address width is either read from a RO device register
    or force set from the platform data. This breaks DMA when the host DMA
    address width is <=32it but the device is >32bit.
    
    Right now the driver may decide to use a 2nd DMA descriptor for
    another buffer (happens in case of TSO xmit) assuming that 32bit
    addressing is used due to platform configuration but the device will
    still use both descriptor addresses as one address.
    
    This can be observed with the Intel EHL platform driver that sets
    32bit for addr64 but the MAC reports 40bit. The TX queue gets stuck in
    case of TCP with iptables NAT configuration on TSO packets.
    
    The logic should be like this: Whatever we do on the host side (memory
    allocation GFP flags) should happen with the host DMA width, whenever
    we decide how to set addresses on the device registers we must use the
    device DMA address width.
    
    This patch renames the platform address width field from addr64 (term
    used in device datasheet) to host_addr and uses this value exclusively
    for host side operations while all chip operations consider the device
    DMA width as read from the device register.
    
    Fixes: 7cfc4486e7ea ("stmmac: intel: Configure EHL PSE0 GbE and PSE1 GbE to 32 bits DMA addressing")
    Signed-off-by: Jochen Henneberg <jh@henneberg-systemdesign.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77800daf7529fb156055d2a9dbbf5127d7db71e7
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Mar 16 16:33:17 2023 -0700

    net: mdio: fix owner field for mdio buses registered using ACPI
    
    [ Upstream commit 30b605b8501e321f79e19c3238aa6ca31da6087c ]
    
    Bus ownership is wrong when using acpi_mdiobus_register() to register an
    mdio bus. That function is not inline, so when it calls
    mdiobus_register() the wrong THIS_MODULE value is captured.
    
    CC: Maxime Bizon <mbizon@freebox.fr>
    Fixes: 803ca24d2f92 ("net: mdio: Add ACPI support code for mdio")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2b6e1a440d24509d2bf542206decae55821e1e5
Author: Maxime Bizon <mbizon@freebox.fr>
Date:   Thu Mar 16 16:33:16 2023 -0700

    net: mdio: fix owner field for mdio buses registered using device-tree
    
    [ Upstream commit 99669259f3361d759219811e670b7e0742668556 ]
    
    Bus ownership is wrong when using of_mdiobus_register() to register an mdio
    bus. That function is not inline, so when it calls mdiobus_register() the wrong
    THIS_MODULE value is captured.
    
    Signed-off-by: Maxime Bizon <mbizon@freebox.fr>
    Fixes: 90eff9096c01 ("net: phy: Allow splitting MDIO bus/device support from PHYs")
    [florian: fix kdoc, added Fixes tag]
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f07f16b3455c58f944c4bf43dcf965ba8f90d54
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Mar 16 13:33:24 2023 -0700

    net: phy: Ensure state transitions are processed from phy_stop()
    
    [ Upstream commit 4203d84032e28f893594a453bd8bc9c3b15c7334 ]
    
    In the phy_disconnect() -> phy_stop() path, we will be forcibly setting
    the PHY state machine to PHY_HALTED. This invalidates the old_state !=
    phydev->state condition in phy_state_machine() such that we will neither
    display the state change for debugging, nor will we invoke the
    link_change_notify() callback.
    
    Factor the code by introducing phy_process_state_change(), and ensure
    that we process the state change from phy_stop() as well.
    
    Fixes: 5c5f626bcace ("net: phy: improve handling link_change_notify callback")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d882229d365f68f74028252261ab14a8de7faed
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Fri Mar 17 00:15:26 2023 +0800

    xirc2ps_cs: Fix use after free bug in xirc2ps_detach
    
    [ Upstream commit e8d20c3ded59a092532513c9bd030d1ea66f5f44 ]
    
    In xirc2ps_probe, the local->tx_timeout_task was bounded
    with xirc2ps_tx_timeout_task. When timeout occurs,
    it will call xirc_tx_timeout->schedule_work to start the
    work.
    
    When we call xirc2ps_detach to remove the driver, there
    may be a sequence as follows:
    
    Stop responding to timeout tasks and complete scheduled
    tasks before cleanup in xirc2ps_detach, which will fix
    the problem.
    
    CPU0                  CPU1
    
                        |xirc2ps_tx_timeout_task
    xirc2ps_detach      |
      free_netdev       |
        kfree(dev);     |
                        |
                        | do_reset
                        |   //use dev
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97ea704f39b5ded96f071e98701aa543f6f89683
Author: Daniil Tatianin <d-tatianin@yandex-team.ru>
Date:   Thu Mar 16 13:29:21 2023 +0300

    qed/qed_sriov: guard against NULL derefs from qed_iov_get_vf_info
    
    [ Upstream commit 25143b6a01d0cc5319edd3de22ffa2578b045550 ]
    
    We have to make sure that the info returned by the helper is valid
    before using it.
    
    Found by Linux Verification Center (linuxtesting.org) with the SVACE
    static analysis tool.
    
    Fixes: f990c82c385b ("qed*: Add support for ndo_set_vf_trust")
    Fixes: 733def6a04bf ("qed*: IOV link control")
    Signed-off-by: Daniil Tatianin <d-tatianin@yandex-team.ru>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58c11bc7adaa8c6a369bf1a6baaf213c467073bd
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Feb 28 19:23:09 2023 +0100

    efi/libstub: smbios: Use length member instead of record struct size
    
    [ Upstream commit 34343eb06afc04af9178a9883d9354dc12beede0 ]
    
    The type 1 SMBIOS record happens to always be the same size, but there
    are other record types which have been augmented over time, and so we
    should really use the length field in the header to decide where the
    string table starts.
    
    Fixes: 550b33cfd4452968 ("arm64: efi: Force the use of ...")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e041bef1adee02999cf24f9a2e15ed452bc363fe
Author: Szymon Heidrich <szymon.heidrich@gmail.com>
Date:   Thu Mar 16 11:19:54 2023 +0100

    net: usb: smsc95xx: Limit packet length to skb->len
    
    [ Upstream commit ff821092cf02a70c2bccd2d19269f01e29aa52cf ]
    
    Packet length retrieved from descriptor may be larger than
    the actual socket buffer length. In such case the cloned
    skb passed up the network stack will leak kernel memory contents.
    
    Fixes: 2f7ca802bdae ("net: Add SMSC LAN9500 USB2.0 10/100 ethernet adapter driver")
    Signed-off-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20230316101954.75836-1-szymon.heidrich@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53a915a00bd169181a75829bb9a187edf5234938
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Thu Mar 16 18:28:07 2023 +0100

    net: dsa: b53: mmap: fix device tree support
    
    [ Upstream commit 30796d0dcb6e41c6558a07950f2ce60c209da867 ]
    
    CPU port should also be enabled in order to get a working switch.
    
    Fixes: a5538a777b73 ("net: dsa: b53: mmap: Add device tree support")
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20230316172807.460146-1-noltari@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51ddb84baff6f09ad62b5999ece3ec172e4e3568
Author: Jeff Layton <jlayton@kernel.org>
Date:   Fri Mar 17 13:13:08 2023 -0400

    nfsd: don't replace page in rq_pages if it's a continuation of last page
    
    [ Upstream commit 27c934dd8832dd40fd34776f916dc201e18b319b ]
    
    The splice read calls nfsd_splice_actor to put the pages containing file
    data into the svc_rqst->rq_pages array. It's possible however to get a
    splice result that only has a partial page at the end, if (e.g.) the
    filesystem hands back a short read that doesn't cover the whole page.
    
    nfsd_splice_actor will plop the partial page into its rq_pages array and
    return. Then later, when nfsd_splice_actor is called again, the
    remainder of the page may end up being filled out. At this point,
    nfsd_splice_actor will put the page into the array _again_ corrupting
    the reply. If this is done enough times, rq_next_page will overrun the
    array and corrupt the trailing fields -- the rq_respages and
    rq_next_page pointers themselves.
    
    If we've already added the page to the array in the last pass, don't add
    it to the array a second time when dealing with a splice continuation.
    This was originally handled properly in nfsd_splice_actor, but commit
    91e23b1c3982 ("NFSD: Clean up nfsd_splice_actor()") removed the check
    for it.
    
    Fixes: 91e23b1c3982 ("NFSD: Clean up nfsd_splice_actor()")
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Reported-by: Dario Lesca <d.lesca@solinos.it>
    Tested-by: David Critch <dcritch@redhat.com>
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2150630
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c55982beb80c7d3c30278fc6cfda8496a31dbe6
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Wed Mar 15 14:21:54 2023 +0800

    scsi: scsi_dh_alua: Fix memleak for 'qdata' in alua_activate()
    
    [ Upstream commit a13faca032acbf2699293587085293bdfaafc8ae ]
    
    If alua_rtpg_queue() failed from alua_activate(), then 'qdata' is not
    freed, which will cause following memleak:
    
    unreferenced object 0xffff88810b2c6980 (size 32):
      comm "kworker/u16:2", pid 635322, jiffies 4355801099 (age 1216426.076s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        40 39 24 c1 ff ff ff ff 00 f8 ea 0a 81 88 ff ff  @9$.............
      backtrace:
        [<0000000098f3a26d>] alua_activate+0xb0/0x320
        [<000000003b529641>] scsi_dh_activate+0xb2/0x140
        [<000000007b296db3>] activate_path_work+0xc6/0xe0 [dm_multipath]
        [<000000007adc9ace>] process_one_work+0x3c5/0x730
        [<00000000c457a985>] worker_thread+0x93/0x650
        [<00000000cb80e628>] kthread+0x1ba/0x210
        [<00000000a1e61077>] ret_from_fork+0x22/0x30
    
    Fix the problem by freeing 'qdata' in error path.
    
    Fixes: 625fe857e4fa ("scsi: scsi_dh_alua: Check scsi_device_get() return value")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20230315062154.668812-1-yukuai1@huaweicloud.com
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0de3f29d8785b67a1502702ba8fd6e938f8ed5c
Author: Yicong Yang <yangyicong@hisilicon.com>
Date:   Mon Mar 13 15:45:52 2023 +0800

    i2c: hisi: Only use the completion interrupt to finish the transfer
    
    [ Upstream commit d98263512684a47e81bcb72a5408958ecd1e60b0 ]
    
    The controller will always generate a completion interrupt when the
    transfer is finished normally or not. Currently we use either error or
    completion interrupt to finish, this may result the completion
    interrupt unhandled and corrupt the next transfer, especially at low
    speed mode. Since on error case, the error interrupt will come first
    then is the completion interrupt. So only use the completion interrupt
    to finish the whole transfer process.
    
    Fixes: d62fbdb99a85 ("i2c: add support for HiSilicon I2C controller")
    Reported-by: Sheng Feng <fengsheng5@huawei.com>
    Signed-off-by: Sheng Feng <fengsheng5@huawei.com>
    Signed-off-by: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6ea83a476a37131793bd1696ddd6f7ba0c04f47
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Mon Feb 13 16:25:50 2023 +0100

    i2c: mxs: ensure that DMA buffers are safe for DMA
    
    [ Upstream commit 5190417bdf72c71b65bd9892103c6186816a6e8b ]
    
    We found that after commit 9c46929e7989
    ("ARM: implement THREAD_INFO_IN_TASK for uniprocessor systems"), the
    PCF85063 RTC driver stopped working on i.MX28 due to regmap_bulk_read()
    reading bogus data into a stack buffer. This is caused by the i2c-mxs
    driver using DMA transfers even for messages without the I2C_M_DMA_SAFE
    flag, and the aforementioned commit enabling vmapped stacks.
    
    As the MXS I2C controller requires DMA for reads of >4 bytes, DMA can't be
    disabled, so the issue is fixed by using i2c_get_dma_safe_msg_buf() to
    create a bounce buffer when needed.
    
    Fixes: 9c46929e7989 ("ARM: implement THREAD_INFO_IN_TASK for uniprocessor systems")
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d1c6e982b7eae46653b10a9ccb009951e3501fc
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Mon Jan 30 16:32:47 2023 +0100

    i2c: imx-lpi2c: check only for enabled interrupt flags
    
    [ Upstream commit 1c7885004567e8951d65a983be095f254dd20bef ]
    
    When reading from I2C, the Tx watermark is set to 0. Unfortunately the
    TDF (transmit data flag) is enabled when Tx FIFO entries is equal or less
    than watermark. So it is set in every case, hence the reset default of 1.
    This results in the MSR_RDF _and_ MSR_TDF flags to be set thus trying
    to send Tx data on a read message.
    Mask the IRQ status to filter for wanted flags only.
    
    Fixes: a55fa9d0e42e ("i2c: imx-lpi2c: add low power i2c bus driver")
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Tested-by: Emanuele Ghidoli <emanuele.ghidoli@toradex.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec897f7524de0dcab969d2ded1ca748285de6120
Author: AKASHI Takahiro <takahiro.akashi@linaro.org>
Date:   Tue Mar 7 15:45:31 2023 +0900

    igc: fix the validation logic for taprio's gate list
    
    [ Upstream commit 2b4cc3d3f4d8ec42961e98568a0afeee96a943ab ]
    
    The check introduced in the commit a5fd39464a40 ("igc: Lift TAPRIO schedule
    restriction") can detect a false positive error in some corner case.
    For instance,
        tc qdisc replace ... taprio num_tc 4
            ...
            sched-entry S 0x01 100000       # slot#1
            sched-entry S 0x03 100000       # slot#2
            sched-entry S 0x04 100000       # slot#3
            sched-entry S 0x08 200000       # slot#4
            flags 0x02                      # hardware offload
    
    Here the queue#0 (the first queue) is on at the slot#1 and #2,
    and off at the slot#3 and #4. Under the current logic, when the slot#4
    is examined, validate_schedule() returns *false* since the enablement
    count for the queue#0 is two and it is already off at the previous slot
    (i.e. #3). But this definition is truely correct.
    
    Let's fix the logic to enforce a strict validation for consecutively-opened
    slots.
    
    Fixes: a5fd39464a40 ("igc: Lift TAPRIO schedule restriction")
    Signed-off-by: AKASHI Takahiro <takahiro.akashi@linaro.org>
    Reviewed-by: Kurt Kanzenbach <kurt@linutronix.de>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 910e2013d098ce97c44fb73020e83e35c4730216
Author: Akihiko Odaki <akihiko.odaki@daynix.com>
Date:   Thu Dec 1 19:20:03 2022 +0900

    igbvf: Regard vf reset nack as success
    
    [ Upstream commit 02c83791ef969c6a8a150b4927193d0d0e50fb23 ]
    
    vf reset nack actually represents the reset operation itself is
    performed but no address is assigned. Therefore, e1000_reset_hw_vf
    should fill the "perm_addr" with the zero address and return success on
    such an occasion. This prevents its callers in netdev.c from saying PF
    still resetting, and instead allows them to correctly report that no
    address is assigned.
    
    Fixes: 6ddbc4cf1f4d ("igb: Indicate failure on vf reset for empty mac address")
    Signed-off-by: Akihiko Odaki <akihiko.odaki@daynix.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Marek Szlosek <marek.szlosek@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 460e4073b7158467206bb6d96979ce07e394170c
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Nov 22 10:28:52 2022 +0800

    intel/igbvf: free irq on the error path in igbvf_request_msix()
    
    [ Upstream commit 85eb39bb39cbb5c086df1e19ba67cc1366693a77 ]
    
    In igbvf_request_msix(), irqs have not been freed on the err path,
    we need to free it. Fix it.
    
    Fixes: d4e0fe01a38a ("igbvf: add new driver to support 82576 virtual functions")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Tested-by: Marek Szlosek <marek.szlosek@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3faa2b8f8f3931558e7984ea5ca9d1caad1cced4
Author: Ahmed Zaki <ahmed.zaki@intel.com>
Date:   Wed Mar 15 13:59:25 2023 -0600

    iavf: do not track VLAN 0 filters
    
    [ Upstream commit 964290ff32d132bf971d45b29f7de39756dab7c8 ]
    
    When an interface with the maximum number of VLAN filters is brought up,
    a spurious error is logged:
    
        [257.483082] 8021q: adding VLAN 0 to HW filter on device enp0s3
        [257.483094] iavf 0000:00:03.0 enp0s3: Max allowed VLAN filters 8. Remove existing VLANs or disable filtering via Ethtool if supported.
    
    The VF driver complains that it cannot add the VLAN 0 filter.
    
    On the other hand, the PF driver always adds VLAN 0 filter on VF
    initialization. The VF does not need to ask the PF for that filter at
    all.
    
    Fix the error by not tracking VLAN 0 filters altogether. With that, the
    check added by commit 0e710a3ffd0c ("iavf: Fix VF driver counting VLAN 0
    filters") in iavf_virtchnl.c is useless and might be confusing if left as
    it suggests that we track VLAN 0.
    
    Fixes: 0e710a3ffd0c ("iavf: Fix VF driver counting VLAN 0 filters")
    Signed-off-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9c56af093aa3c78b4079343366be3a770a4c5c7
Author: Alexander Lobakin <aleksander.lobakin@intel.com>
Date:   Wed Mar 1 12:59:08 2023 +0100

    iavf: fix non-tunneled IPv6 UDP packet type and hashing
    
    [ Upstream commit de58647b4301fe181f9c38e8b46f7021584ae427 ]
    
    Currently, IAVF's decode_rx_desc_ptype() correctly reports payload type
    of L4 for IPv4 UDP packets and IPv{4,6} TCP, but only L3 for IPv6 UDP.
    Originally, i40e, ice and iavf were affected.
    Commit 73df8c9e3e3d ("i40e: Correct UDP packet header for non_tunnel-ipv6")
    fixed that in i40e, then
    commit 638a0c8c8861 ("ice: fix incorrect payload indicator on PTYPE")
    fixed that for ice.
    IPv6 UDP is L4 obviously. Fix it and make iavf report correct L4 hash
    type for such packets, so that the stack won't calculate it on CPU when
    needs it.
    
    Fixes: 206812b5fccb ("i40e/i40evf: i40e implementation for skb_set_hash")
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Signed-off-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bfadea827eb3996b9e3a8760b8c067ef9d6415c
Author: Alexander Lobakin <aleksander.lobakin@intel.com>
Date:   Wed Mar 1 12:59:07 2023 +0100

    iavf: fix inverted Rx hash condition leading to disabled hash
    
    [ Upstream commit 32d57f667f871bc5a8babbe27ea4c5e668ee0ea8 ]
    
    Condition, which checks whether the netdev has hashing enabled is
    inverted. Basically, the tagged commit effectively disabled passing flow
    hash from descriptor to skb, unless user *disables* it via Ethtool.
    Commit a876c3ba59a6 ("i40e/i40evf: properly report Rx packet hash")
    fixed this problem, but only for i40e.
    Invert the condition now in iavf and unblock passing hash to skbs again.
    
    Fixes: 857942fd1aa1 ("i40e: Fix Rx hash reported to the stack by our driver")
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Signed-off-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a069909acc4435eeb41d05ccc03baa447cc01b7e
Author: Kal Conley <kal.conley@dectris.com>
Date:   Wed Mar 8 18:40:13 2023 +0100

    xsk: Add missing overflow check in xdp_umem_reg
    
    [ Upstream commit c7df4813b149362248d6ef7be41a311e27bf75fe ]
    
    The number of chunks can overflow u32. Make sure to return -EINVAL on
    overflow. Also remove a redundant u32 cast assigning umem->npgs.
    
    Fixes: bbff2f321a86 ("xsk: new descriptor addressing scheme")
    Signed-off-by: Kal Conley <kal.conley@dectris.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Link: https://lore.kernel.org/bpf/20230308174013.1114745-1-kal.conley@dectris.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4797ad1f561797f91fb2064739937cb76287e613
Author: Dave Wysochanski <dwysocha@redhat.com>
Date:   Thu Mar 9 13:58:52 2023 -0500

    NFS: Fix /proc/PID/io read_bytes for buffered reads
    
    [ Upstream commit 9c88ea00fef03031ce6554531e89be82f6a42835 ]
    
    Prior to commit 8786fde8421c ("Convert NFS from readpages to
    readahead"), nfs_readpages() used the old mm interface read_cache_pages()
    which called task_io_account_read() for each NFS page read.  After
    this commit, nfs_readpages() is converted to nfs_readahead(), which
    now uses the new mm interface readahead_page().  The new interface
    requires callers to call task_io_account_read() themselves.
    In addition, to nfs_readahead() task_io_account_read() should also
    be called from nfs_read_folio().
    
    Fixes: 8786fde8421c ("Convert NFS from readpages to readahead")
    Link: https://lore.kernel.org/linux-nfs/CAPt2mGNEYUk5u8V4abe=5MM5msZqmvzCVrtCP4Qw1n=gCHCnww@mail.gmail.com/
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26aef3be6efa999db89756f2f97e72f7306a9e47
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Wed Mar 8 11:17:20 2023 +0100

    arm64: dts: imx93: add missing #address-cells and #size-cells to i2c nodes
    
    [ Upstream commit b3cdf730486b048ca0bf23bef050550d9fd40422 ]
    
    Add them to the SoC .dtsi, so that not every board has to specify them.
    
    Fixes: 1225396fefea ("arm64: dts: imx93: add lpi2c nodes")
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f66c5dbaf0a8c12109092d28e67252a02588246
Author: Marek Vasut <marex@denx.de>
Date:   Tue Feb 28 22:52:44 2023 +0100

    arm64: dts: imx8mn: specify #sound-dai-cells for SAI nodes
    
    [ Upstream commit 62fb54148cd6eb456ff031be8fb447c98cf0bd9b ]
    
    Add #sound-dai-cells properties to SAI nodes.
    
    Reviewed-by: Adam Ford <aford173@gmail.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Fixes: 9e9860069725 ("arm64: dts: imx8mn: Add SAI nodes")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Marco Felsch <m.felsch@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d75af9878680b9c8eaabf745e863091a92904401
Author: Peng Fan <peng.fan@nxp.com>
Date:   Sun Feb 26 21:12:14 2023 +0800

    ARM: dts: imx6sl: tolino-shine2hd: fix usbotg1 pinctrl
    
    [ Upstream commit 1cd489e1ada1cffa56bd06fd4609f5a60a985d43 ]
    
    usb@2184000: 'pinctrl-0' is a dependency of 'pinctrl-names'
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Fixes: 9c7016f1ca6d ("ARM: dts: imx: add devicetree for Tolino Shine 2 HD")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0828dda42e5fefe1a408a559e6b9f28b5ab3ec40
Author: Peng Fan <peng.fan@nxp.com>
Date:   Sun Feb 26 21:12:13 2023 +0800

    ARM: dts: imx6sll: e60k02: fix usbotg1 pinctrl
    
    [ Upstream commit 957c04e9784c7c757e8cc293d7fb2a60cdf461b6 ]
    
    usb@2184000: 'pinctrl-0' is a dependency of 'pinctrl-names'
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Fixes: c100ea86e6ab ("ARM: dts: add Netronix E60K02 board common file")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8505ead526be2e715b126824c9c24a6b85134b2c
Author: Peng Fan <peng.fan@nxp.com>
Date:   Sun Feb 26 21:12:12 2023 +0800

    ARM: dts: imx6sll: e70k02: fix usbotg1 pinctrl
    
    [ Upstream commit 3d37f7685d525e58674c23d607020e66d501dcd1 ]
    
    usb@2184000: 'pinctrl-0' is a dependency of 'pinctrl-names'
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Fixes: 3bb3fd856505 ("ARM: dts: add Netronix E70K02 board common file")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08589e3ca8b1d849e4bdf5c8f03f7f3a2d26d488
Author: Andrew Halaney <ahalaney@redhat.com>
Date:   Tue Feb 14 11:15:05 2023 -0600

    arm64: dts: imx8dxl-evk: Fix eqos phy reset gpio
    
    [ Upstream commit feafeb53140af3cde3fba46b292b15b3a0c0635c ]
    
    The deprecated property is named snps,reset-gpio, but this devicetree
    used snps,reset-gpios instead which results in the reset not being used
    and the following make dtbs_check error:
    
        ./arch/arm64/boot/dts/freescale/imx8dxl-evk.dtb: ethernet@5b050000: 'snps,reset-gpio' is a dependency of 'snps,reset-delays-us'
            From schema: ./Documentation/devicetree/bindings/net/snps,dwmac.yaml
    
    Use the preferred method of defining the reset gpio in the phy node
    itself. Note that this drops the 10 us pre-delay, but prior this wasn't
    used at all and a pre-delay doesn't make much sense in this context so
    it should be fine.
    
    Fixes: 8dd495d12374 ("arm64: dts: freescale: add support for i.MX8DXL EVK board")
    Signed-off-by: Andrew Halaney <ahalaney@redhat.com>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bcbc0df73111ae25cfdef6447db53e8a69e2b0f6
Author: Wei Fang <wei.fang@nxp.com>
Date:   Fri Dec 16 09:14:34 2022 +0800

    arm64: dts: imx8dxl-evk: Disable hibernation mode of AR8031 for EQOS
    
    [ Upstream commit 0deefb5bd1382aae0aed7c8b266d5088a5308a26 ]
    
    The hibernation mode of AR8031 PHY defaults to be enabled after hardware
    reset. When the cable is unplugged, the PHY will enter hibernation mode
    after about 10 senconds and the PHY clocks will be stopped to save
    power. However, due to the design of EQOS, the mac needs the RX_CLK of
    PHY for software reset to complete. Otherwise the software reset of EQOS
    will be failed and do not work correctly. The only way is to disable
    hibernation mode of AR8031 PHY for EQOS, the "qca,disable-hibernation-mode"
    property is used for this purpose and has already been submitted to the
    upstream, for more details please refer to the below link:
    https://lore.kernel.org/netdev/20220818030054.1010660-2-wei.fang@nxp.com/
    
    This issue is easy to reproduce, just unplug the cable and "ifconfig eth0
    down", after about 10 senconds, then "ifconfig eth0 up", you will see
    failure log on the serial port. The log is shown as following:
    root@imx8dxlevk:~#
    [34.941970] imx-dwmac 5b050000.ethernet eth0: Link is Down
    root@imx8dxlevk:~# ifconfig eth0 down
    [35.437814] imx-dwmac 5b050000.ethernet eth0: FPE workqueue stop
    [35.507913] imx-dwmac 5b050000.ethernet eth0: PHY [stmmac-1:00] driver [Qualcomm Atheros AR8031/AR8033] (irq=POLL)
    [35.518613] imx-dwmac 5b050000.ethernet eth0: configuring for phy/rgmii-id link mode
    root@imx8dxlevk:~# ifconfig eth0 up
    [71.143044] imx-dwmac 5b050000.ethernet eth0: Register MEM_TYPE_PAGE_POOL RxQ-0
    [71.215855] imx-dwmac 5b050000.ethernet eth0: PHY [stmmac-1:00] driver [Qualcomm Atheros AR8031/AR8033] (irq=POLL)
    [72.230417] imx-dwmac 5b050000.ethernet: Failed to reset the dma
    [72.236512] imx-dwmac 5b050000.ethernet eth0: stmmac_hw_setup: DMA engine initialization failed
    [72.245258] imx-dwmac 5b050000.ethernet eth0: __stmmac_open: Hw setup failed
    SIOCSIFFLAGS: Connection timed out
    
    After applying this patch, the software reset of EQOS will be
    successful. And the log is shown as below.
    root@imx8dxlevk:~# ifconfig eth0 up
    [96.114344] imx-dwmac 5b050000.ethernet eth0: Register MEM_TYPE_PAGE_POOL RxQ-0
    [96.171466] imx-dwmac 5b050000.ethernet eth0: PHY [stmmac-1:00] driver [Qualcomm Atheros AR8031/AR8033] (irq=POLL)
    [96.188883] imx-dwmac 5b050000.ethernet eth0: No Safety Features support found
    [96.196221] imx-dwmac 5b050000.ethernet eth0: IEEE 1588-2008 Advanced Timestamp supported
    [96.204846] imx-dwmac 5b050000.ethernet eth0: registered PTP clock
    [96.225558] imx-dwmac 5b050000.ethernet eth0: FPE workqueue start
    [96.236858] imx-dwmac 5b050000.ethernet eth0: configuring for phy/rgmii-id link mode
    [96.249358] 8021q: adding VLAN 0 to HW filter on device eth0
    
    Signed-off-by: Wei Fang <wei.fang@nxp.com>
    Reviewed-by: Clark Wang <xiaoning.wang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: feafeb53140a ("arm64: dts: imx8dxl-evk: Fix eqos phy reset gpio")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47b2e1a67e6da172bb4cf69ef9dafde4458bde5f
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Sun Mar 12 01:46:50 2023 +0800

    power: supply: da9150: Fix use after free bug in da9150_charger_remove due to race condition
    
    [ Upstream commit 06615d11cc78162dfd5116efb71f29eb29502d37 ]
    
    In da9150_charger_probe, &charger->otg_work is bound with
    da9150_charger_otg_work. da9150_charger_otg_ncb may be
    called to start the work.
    
    If we remove the module which will call da9150_charger_remove
    to make cleanup, there may be a unfinished work. The possible
    sequence is as follows:
    
    Fix it by canceling the work before cleanup in the da9150_charger_remove
    
    CPU0                  CPUc1
    
                        |da9150_charger_otg_work
    da9150_charger_remove      |
    power_supply_unregister  |
    device_unregister   |
    power_supply_dev_release|
    kfree(psy)          |
                        |
                        |   power_supply_changed(charger->usb);
                        |   //use
    
    Fixes: c1a281e34dae ("power: Add support for DA9150 Charger")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84bdb3b76b07f2e62183913a1f5da2d4aa25580a
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Fri Mar 10 01:47:28 2023 +0800

    power: supply: bq24190: Fix use after free bug in bq24190_remove due to race condition
    
    [ Upstream commit 47c29d69212911f50bdcdd0564b5999a559010d4 ]
    
    In bq24190_probe, &bdi->input_current_limit_work is bound
    with bq24190_input_current_limit_work. When external power
    changed, it will call bq24190_charger_external_power_changed
     to start the work.
    
    If we remove the module which will call bq24190_remove to make
    cleanup, there may be a unfinished work. The possible
    sequence is as follows:
    
    CPU0                  CPUc1
    
                        |bq24190_input_current_limit_work
    bq24190_remove      |
    power_supply_unregister  |
    device_unregister   |
    power_supply_dev_release|
    kfree(psy)          |
                        |
                        | power_supply_get_property_from_supplier
                        |   //use
    
    Fix it by finishing the work before cleanup in the bq24190_remove
    
    Fixes: 97774672573a ("power_supply: Initialize changed_work before calling device_add")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b483a983a848df0b56b7064085ede50080d4157
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Tue Mar 7 21:02:01 2023 +0530

    arm64: dts: qcom: sm8450: Mark UFS controller as cache coherent
    
    [ Upstream commit 8ba961d4339c5db0e69ff6627606fe1f34c838e5 ]
    
    The UFS controller on SM8450 supports cache coherency, hence add the
    "dma-coherent" property to mark it as such.
    
    Fixes: 07fa917a335e ("arm64: dts: qcom: sm8450: add ufs nodes")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230307153201.180626-2-manivannan.sadhasivam@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee9caccc5e5cc1092baf6fb645525bba668b01c1
Author: Cruise Hung <Cruise.Hung@amd.com>
Date:   Wed Mar 22 17:08:41 2023 -0500

    drm/amd/display: Fix DP MST sinks removal issue
    
    [ Upstream commit cbd6c1b17d3b42b7935526a86ad5f66838767d03 ]
    
    [Why]
    In USB4 DP tunneling, it's possible to have this scenario that
    the path becomes unavailable and CM tears down the path a little bit late.
    So, in this case, the HPD is high but fails to read any DPCD register.
    That causes the link connection type to be set to sst.
    And not all sinks are removed behind the MST branch.
    
    [How]
    Restore the link connection type if it fails to read DPCD register.
    
    Cc: stable@vger.kernel.org
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Wenjing Liu <Wenjing.Liu@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Cruise Hung <Cruise.Hung@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    (cherry picked from commit cbd6c1b17d3b42b7935526a86ad5f66838767d03)
    Modified for stable backport as a lot of the code in this file was moved
    in 6.3 to drivers/gpu/drm/amd/display/dc/link/link_detection.c.
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5564be74a22a61855f8b8c100d8c4abb003bb792
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Mar 23 18:49:02 2023 +0100

    mptcp: fix UaF in listener shutdown
    
    [ Upstream commit 0a3f4f1f9c27215e4ddcd312558342e57b93e518 ]
    
      Backports notes: one simple conflict in net/mptcp/protocol.c with:
    
        commit f8c9dfbd875b ("mptcp: add pm listener events")
    
      Where one commit removes code in __mptcp_close_ssk() while the other
      one adds one line at the same place. We can simply remove the whole
      condition because this extra instruction is not present in v6.1.
    
    As reported by Christoph after having refactored the passive
    socket initialization, the mptcp listener shutdown path is prone
    to an UaF issue.
    
      BUG: KASAN: use-after-free in _raw_spin_lock_bh+0x73/0xe0
      Write of size 4 at addr ffff88810cb23098 by task syz-executor731/1266
    
      CPU: 1 PID: 1266 Comm: syz-executor731 Not tainted 6.2.0-rc59af4eaa31c1f6c00c8f1e448ed99a45c66340dd5 #6
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x6e/0x91
       print_report+0x16a/0x46f
       kasan_report+0xad/0x130
       kasan_check_range+0x14a/0x1a0
       _raw_spin_lock_bh+0x73/0xe0
       subflow_error_report+0x6d/0x110
       sk_error_report+0x3b/0x190
       tcp_disconnect+0x138c/0x1aa0
       inet_child_forget+0x6f/0x2e0
       inet_csk_listen_stop+0x209/0x1060
       __mptcp_close_ssk+0x52d/0x610
       mptcp_destroy_common+0x165/0x640
       mptcp_destroy+0x13/0x80
       __mptcp_destroy_sock+0xe7/0x270
       __mptcp_close+0x70e/0x9b0
       mptcp_close+0x2b/0x150
       inet_release+0xe9/0x1f0
       __sock_release+0xd2/0x280
       sock_close+0x15/0x20
       __fput+0x252/0xa20
       task_work_run+0x169/0x250
       exit_to_user_mode_prepare+0x113/0x120
       syscall_exit_to_user_mode+0x1d/0x40
       do_syscall_64+0x48/0x90
       entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    The msk grace period can legitly expire in between the last
    reference count dropped in mptcp_subflow_queue_clean() and
    the later eventual access in inet_csk_listen_stop()
    
    After the previous patch we don't need anymore special-casing
    msk listener socket cleanup: the mptcp worker will process each
    of the unaccepted msk sockets.
    
    Just drop the now unnecessary code.
    
    Please note this commit depends on the two parent ones:
    
      mptcp: refactor passive socket initialization
      mptcp: use the workqueue to destroy unaccepted sockets
    
    Fixes: 6aeed9045071 ("mptcp: fix race on unaccepted mptcp sockets")
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: Christoph Paasch <cpaasch@apple.com>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/346
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2827f099b3fb9a59263c997400e9182f5d423e84
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Mar 23 18:49:01 2023 +0100

    mptcp: use the workqueue to destroy unaccepted sockets
    
    [ Upstream commit b6985b9b82954caa53f862d6059d06c0526254f0 ]
    
      Backports notes: one simple conflict in net/mptcp/protocol.c with:
    
        commit a5ef058dc4d9 ("net: introduce and use custom sockopt socket flag")
    
      Where the two commits add a new line for different actions in the same
      context in mptcp_stream_accept().
    
    Christoph reported a UaF at token lookup time after having
    refactored the passive socket initialization part:
    
      BUG: KASAN: use-after-free in __token_bucket_busy+0x253/0x260
      Read of size 4 at addr ffff88810698d5b0 by task syz-executor653/3198
    
      CPU: 1 PID: 3198 Comm: syz-executor653 Not tainted 6.2.0-rc59af4eaa31c1f6c00c8f1e448ed99a45c66340dd5 #6
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x6e/0x91
       print_report+0x16a/0x46f
       kasan_report+0xad/0x130
       __token_bucket_busy+0x253/0x260
       mptcp_token_new_connect+0x13d/0x490
       mptcp_connect+0x4ed/0x860
       __inet_stream_connect+0x80e/0xd90
       tcp_sendmsg_fastopen+0x3ce/0x710
       mptcp_sendmsg+0xff1/0x1a20
       inet_sendmsg+0x11d/0x140
       __sys_sendto+0x405/0x490
       __x64_sys_sendto+0xdc/0x1b0
       do_syscall_64+0x3b/0x90
       entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    We need to properly clean-up all the paired MPTCP-level
    resources and be sure to release the msk last, even when
    the unaccepted subflow is destroyed by the TCP internals
    via inet_child_forget().
    
    We can re-use the existing MPTCP_WORK_CLOSE_SUBFLOW infra,
    explicitly checking that for the critical scenario: the
    closed subflow is the MPC one, the msk is not accepted and
    eventually going through full cleanup.
    
    With such change, __mptcp_destroy_sock() is always called
    on msk sockets, even on accepted ones. We don't need anymore
    to transiently drop one sk reference at msk clone time.
    
    Please note this commit depends on the parent one:
    
      mptcp: refactor passive socket initialization
    
    Fixes: 58b09919626b ("mptcp: create msk early")
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: Christoph Paasch <cpaasch@apple.com>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/347
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1516ddbc34bcba56ee09f77740b8d67a391d8f24
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Mar 9 15:49:58 2023 +0100

    mptcp: refactor passive socket initialization
    
    [ Upstream commit 3a236aef280ed5122b2d47087eb514d0921ae033 ]
    
    After commit 30e51b923e43 ("mptcp: fix unreleased socket in accept queue")
    unaccepted msk sockets go throu complete shutdown, we don't need anymore
    to delay inserting the first subflow into the subflow lists.
    
    The reference counting deserve some extra care, as __mptcp_close() is
    unaware of the request socket linkage to the first subflow.
    
    Please note that this is more a refactoring than a fix but because this
    modification is needed to include other corrections, see the following
    commits. Then a Fixes tag has been added here to help the stable team.
    
    Fixes: 30e51b923e43 ("mptcp: fix unreleased socket in accept queue")
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Tested-by: Christoph Paasch <cpaasch@apple.com>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75eb69023ba30076dba2df6a3e0f9f51095a237b
Author: Saaem Rizvi <SyedSaaem.Rizvi@amd.com>
Date:   Mon Feb 27 18:55:07 2023 -0500

    drm/amd/display: Remove OTG DIV register write for Virtual signals.
    
    [ Upstream commit 709671ffb15dcd1b4f6afe2a9d8c67c7c4ead4a1 ]
    
    [WHY]
    Hot plugging and then hot unplugging leads to k1 and k2 values to
    change, as signal is detected as a virtual signal on hot unplug. Writing
    these values to OTG_PIXEL_RATE_DIV register might cause primary display
    to blank (known hw bug).
    
    [HOW]
    No longer write k1 and k2 values to register if signal is virtual, we
    have safe guards in place in the case that k1 and k2 is unassigned so
    that an unknown value is not written to the register either.
    
    Cc: stable@vger.kernel.org
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Samson Tam <Samson.Tam@amd.com>
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Saaem Rizvi <SyedSaaem.Rizvi@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ac86f7dda2b1f895304919ee9035c170a6af419
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Mon Jan 30 13:07:59 2023 -0500

    drm/amd/display: fix k1 k2 divider programming for phantom streams
    
    [ Upstream commit 3b214bb7185d8284d7d4c53e15127f69a375abf6 ]
    
    [Why & How]
    When k1 and k2 divider programming logic is executed for a phantom
    stream, the corresponding master stream should be used for the
    calculation. Fix the if condition to use the master stream for checking
    signal type instead of the phantom stream.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: 709671ffb15d ("drm/amd/display: Remove OTG DIV register write for Virtual signals.")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a36da161b7a467c884e00219bb62b645bbe74f1
Author: Eric Bernstein <eric.bernstein@amd.com>
Date:   Tue Oct 11 14:28:47 2022 -0400

    drm/amd/display: Include virtual signal to set k1 and k2 values
    
    [ Upstream commit 368307cef69ccd9bf5511f25e58e3a103be169fb ]
    
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Eric Bernstein <eric.bernstein@amd.com>
    Tested-by: Mark Broadworth <mark.broadworth@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: 709671ffb15d ("drm/amd/display: Remove OTG DIV register write for Virtual signals.")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1f48806559aa9ce93c449c8866e4829e6eb4dbf
Author: Costa Shulyupin <costa.shul@redhat.com>
Date:   Thu Mar 16 16:45:35 2023 +0200

    tracing/hwlat: Replace sched_setaffinity with set_cpus_allowed_ptr
    
    [ Upstream commit 71c7a30442b724717a30d5e7d1662ba4904eb3d4 ]
    
    There is a problem with the behavior of hwlat in a container,
    resulting in incorrect output. A warning message is generated:
    "cpumask changed while in round-robin mode, switching to mode none",
    and the tracing_cpumask is ignored. This issue arises because
    the kernel thread, hwlatd, is not a part of the container, and
    the function sched_setaffinity is unable to locate it using its PID.
    Additionally, the task_struct of hwlatd is already known.
    Ultimately, the function set_cpus_allowed_ptr achieves
    the same outcome as sched_setaffinity, but employs task_struct
    instead of PID.
    
    Test case:
    
      # cd /sys/kernel/tracing
      # echo 0 > tracing_on
      # echo round-robin > hwlat_detector/mode
      # echo hwlat > current_tracer
      # unshare --fork --pid bash -c 'echo 1 > tracing_on'
      # dmesg -c
    
    Actual behavior:
    
    [573502.809060] hwlat_detector: cpumask changed while in round-robin mode, switching to mode none
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230316144535.1004952-1-costa.shul@redhat.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Fixes: 0330f7aa8ee63 ("tracing: Have hwlat trace migrate across tracing_cpumask CPUs")
    Signed-off-by: Costa Shulyupin <costa.shul@redhat.com>
    Acked-by: Daniel Bristot de Oliveira <bristot@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d496185c25a600f4e6059fea105f5eca2ab79440
Author: Song Liu <song@kernel.org>
Date:   Mon Mar 13 10:16:08 2023 -0700

    perf: fix perf_event_context->time
    
    [ Upstream commit baf1b12a67f5b24f395baca03e442ce27cab0c18 ]
    
    Time readers rely on perf_event_context->[time|timestamp|timeoffset] to get
    accurate time_enabled and time_running for an event. The difference between
    ctx->timestamp and ctx->time is the among of time when the context is not
    enabled. __update_context_time(ctx, false) is used to increase timestamp,
    but not time. Therefore, it should only be called in ctx_sched_in() when
    EVENT_TIME was not enabled.
    
    Fixes: 09f5e7dc7ad7 ("perf: Fix perf_event_read_local() time")
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/r/20230313171608.298734-1-song@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff8137727a2af4ad5f6e6c8b9f7ec5e8db9da86c
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Mar 14 04:47:35 2023 +0000

    perf/core: Fix perf_output_begin parameter is incorrectly invoked in perf_event_bpf_output
    
    [ Upstream commit eb81a2ed4f52be831c9fb879752d89645a312c13 ]
    
    syzkaller reportes a KASAN issue with stack-out-of-bounds.
    The call trace is as follows:
      dump_stack+0x9c/0xd3
      print_address_description.constprop.0+0x19/0x170
      __kasan_report.cold+0x6c/0x84
      kasan_report+0x3a/0x50
      __perf_event_header__init_id+0x34/0x290
      perf_event_header__init_id+0x48/0x60
      perf_output_begin+0x4a4/0x560
      perf_event_bpf_output+0x161/0x1e0
      perf_iterate_sb_cpu+0x29e/0x340
      perf_iterate_sb+0x4c/0xc0
      perf_event_bpf_event+0x194/0x2c0
      __bpf_prog_put.constprop.0+0x55/0xf0
      __cls_bpf_delete_prog+0xea/0x120 [cls_bpf]
      cls_bpf_delete_prog_work+0x1c/0x30 [cls_bpf]
      process_one_work+0x3c2/0x730
      worker_thread+0x93/0x650
      kthread+0x1b8/0x210
      ret_from_fork+0x1f/0x30
    
    commit 267fb27352b6 ("perf: Reduce stack usage of perf_output_begin()")
    use on-stack struct perf_sample_data of the caller function.
    
    However, perf_event_bpf_output uses incorrect parameter to convert
    small-sized data (struct perf_bpf_event) into large-sized data
    (struct perf_sample_data), which causes memory overwriting occurs in
    __perf_event_header__init_id.
    
    Fixes: 267fb27352b6 ("perf: Reduce stack usage of perf_output_begin()")
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20230314044735.56551-1-yangjihong1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e13d1b6979cae82d39a1144f70111a8cac3198e0
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Tue Jan 3 15:21:20 2023 +0100

    interconnect: qcom: qcm2290: Fix MASTER_SNOC_BIMC_NRT
    
    [ Upstream commit 633a12fda6536a1a17bcea29502e777e86a4547e ]
    
    Due to what seems to be a copy-paste error, the _NRT master was
    identical to the _RT master, which should not be the case.. Fix it
    using the values available from the downstream kernel [1].
    
    [1] https://android.googlesource.com/kernel/msm-extra/devicetree/+/refs/heads/android-msm-bramble-4.19-android11-qpr1/qcom/scuba-bus.dtsi#127
    Fixes: 1a14b1ac3935 ("interconnect: qcom: Add QCM2290 driver support")
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Link: https://lore.kernel.org/r/20230103142120.15605-1-konrad.dybcio@linaro.org
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e598cf599a39c6fceb5575f6cc20fad77f85af84
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Thu Jan 5 02:22:20 2023 +0200

    interconnect: qcom: sm8450: switch to qcom_icc_rpmh_* function
    
    [ Upstream commit 87e8fab1917a2b3f6e3dedfd1cdf22a1416e6676 ]
    
    Change sm8450 interconnect driver to use generic qcom_icc_rpmh_*
    functions rather than embedding a copy of thema. This also fixes an
    overallocation of memory for icc_onecell_data structure.
    
    Fixes: fafc114a468e ("interconnect: qcom: Add SM8450 interconnect provider driver")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20230105002221.1416479-3-dmitry.baryshkov@linaro.org
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4c3aaee17fba7760de030f52f3bb268fbce75fa
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Thu Jan 5 02:22:19 2023 +0200

    interconnect: qcom: osm-l3: fix icc_onecell_data allocation
    
    [ Upstream commit f77ebdda0ee652124061c2ac42399bb6c367e729 ]
    
    This is a struct with a trailing zero-length array of icc_node pointers
    but it's allocated as if it were a single array of icc_nodes instead.
    
    Fortunately this overallocates memory rather then allocating less memory
    than required.
    
    Fix by replacing devm_kcalloc() with devm_kzalloc() and struct_size()
    macro.
    
    Fixes: 5bc9900addaf ("interconnect: qcom: Add OSM L3 interconnect provider support")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20230105002221.1416479-2-dmitry.baryshkov@linaro.org
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

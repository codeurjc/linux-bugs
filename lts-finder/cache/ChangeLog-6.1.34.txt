commit ca87e77a2ef8b298aa9f69658d5898e72ee450fe
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 14 11:15:34 2023 +0200

    Linux 6.1.34
    
    Link: https://lore.kernel.org/r/20230612101710.279705932@linuxfoundation.org
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Ron Economos <re@w6rz.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1aaa74177f062f978c33f8547436326d1fd1be1e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jun 12 12:06:32 2023 +0200

    Revert "staging: rtl8192e: Replace macro RTL_PCI_DEVICE with PCI_DEVICE"
    
    This reverts commit ec310591cf839653a5b2c1fcf6b8a110c3f2485c which is
    commit fda2093860df4812d69052a8cf4997e53853a340 upstream.
    
    Ben reports that this should not have been backported to the older
    kernels as the rest of the macro is not empty.  It was a clean-up patch
    in 6.4-rc1 only, it did not add new device ids.
    
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: Philipp Hortmann <philipp.g.hortmann@gmail.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Link: https://lore.kernel.org/r/aa0d401a7f63448cd4c2fe4a2d7e8495d9aa123e.camel@decadent.org.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7e9c2e407080496686f88a707676b84d50ee8ec
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Sat May 27 16:29:37 2023 +0800

    wifi: rtw88: correct PS calculation for SUPPORTS_DYNAMIC_PS
    
    commit 3918dd0177ee08970683a2c22a3388825d82fd79 upstream.
    
    This driver relies on IEEE80211_CONF_PS of hw->conf.flags to turn off PS or
    turn on dynamic PS controlled by driver and firmware. Though this would be
    incorrect, it did work before because the flag is always recalculated until
    the commit 28977e790b5d ("wifi: mac80211: skip powersave recalc if driver SUPPORTS_DYNAMIC_PS")
    is introduced by kernel 5.20 to skip to recalculate IEEE80211_CONF_PS
    of hw->conf.flags if driver sets SUPPORTS_DYNAMIC_PS.
    
    Correct this by doing recalculation while BSS_CHANGED_PS is changed and
    interface is added or removed. It is allowed to enter PS only if single
    one station vif is working. Without this fix, driver doesn't enter PS
    anymore that causes higher power consumption.
    
    Fixes: bcde60e599fb ("rtw88: remove misleading module parameter rtw_fw_support_lps")
    Cc: stable@vger.kernel.org # 6.1+
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230527082939.11206-2-pkshih@realtek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fafd871558ff5bd90382206e113aff646d3f1e3
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Sat May 27 16:29:38 2023 +0800

    wifi: rtw89: correct PS calculation for SUPPORTS_DYNAMIC_PS
    
    commit 26a125f550a3bf86ac91d38752f4d446426dfe1c upstream.
    
    This driver relies on IEEE80211_CONF_PS of hw->conf.flags to turn off PS or
    turn on dynamic PS controlled by driver and firmware. Though this would be
    incorrect, it did work before because the flag is always recalculated until
    the commit 28977e790b5d ("wifi: mac80211: skip powersave recalc if driver SUPPORTS_DYNAMIC_PS")
    is introduced by kernel 5.20 to skip to recalculate IEEE80211_CONF_PS
    of hw->conf.flags if driver sets SUPPORTS_DYNAMIC_PS.
    
    Correct this by doing recalculation while BSS_CHANGED_PS is changed and
    interface is added or removed. For now, it is allowed to enter PS only if
    single one station vif is working, and it could possible to have PS per
    vif after firmware can support it. Without this fix, driver doesn't
    enter PS anymore that causes higher power consumption.
    
    Fixes: e3ec7017f6a2 ("rtw89: add Realtek 802.11ax driver")
    Cc: stable@vger.kernel.org # 6.1+
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230527082939.11206-3-pkshih@realtek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b2438f0a7e58acc1e47941cec4b353770e7488e
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Jun 8 10:06:40 2023 -0400

    ext4: only check dquot_initialize_needed() when debugging
    
    commit dea9d8f7643fab07bf89a1155f1f94f37d096a5e upstream.
    
    ext4_xattr_block_set() relies on its caller to call dquot_initialize()
    on the inode.  To assure that this has happened there are WARN_ON
    checks.  Unfortunately, this is subject to false positives if there is
    an antagonist thread which is flipping the file system at high rates
    between r/o and rw.  So only do the check if EXT4_XATTR_DEBUG is
    enabled.
    
    Link: https://lore.kernel.org/r/20230608044056.GA1418535@mit.edu
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77eed67ba24ea194cf8d2ec0168a23155b07d78b
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Jun 8 09:57:04 2023 -0400

    Revert "ext4: don't clear SB_RDONLY when remounting r/w until quota is re-enabled"
    
    commit 1b29243933098cdbc31b579b5616e183b4275e2f upstream.
    
    This reverts commit a44be64bbecb15a452496f60db6eacfee2b59c79.
    
    Link: https://lore.kernel.org/r/653b3359-2005-21b1-039d-c55ca4cffdcc@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 543c12c2644e772caa6880662c2a852cfdc5a10c
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Tue May 30 23:10:31 2023 +0900

    ksmbd: check the validation of pdu_size in ksmbd_conn_handler_loop
    
    commit 368ba06881c395f1c9a7ba22203cf8d78b4addc0 upstream.
    
    The length field of netbios header must be greater than the SMB header
    sizes(smb1 or smb2 header), otherwise the packet is an invalid SMB packet.
    
    If `pdu_size` is 0, ksmbd allocates a 4 bytes chunk to `conn->request_buf`.
    In the function `get_smb2_cmd_val` ksmbd will read cmd from
    `rcv_hdr->Command`, which is `conn->request_buf + 12`, causing the KASAN
    detector to print the following error message:
    
    [    7.205018] BUG: KASAN: slab-out-of-bounds in get_smb2_cmd_val+0x45/0x60
    [    7.205423] Read of size 2 at addr ffff8880062d8b50 by task ksmbd:42632/248
    ...
    [    7.207125]  <TASK>
    [    7.209191]  get_smb2_cmd_val+0x45/0x60
    [    7.209426]  ksmbd_conn_enqueue_request+0x3a/0x100
    [    7.209712]  ksmbd_server_process_request+0x72/0x160
    [    7.210295]  ksmbd_conn_handler_loop+0x30c/0x550
    [    7.212280]  kthread+0x160/0x190
    [    7.212762]  ret_from_fork+0x1f/0x30
    [    7.212981]  </TASK>
    
    Cc: stable@vger.kernel.org
    Reported-by: Chih-Yen Chang <cc85nod@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f2984233c87a1d08f4c45f077130590c7a2c991
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun May 28 00:23:41 2023 +0900

    ksmbd: fix out-of-bound read in parse_lease_state()
    
    commit fc6c6a3c324c1b3e93a03d0cfa3749c781f23de0 upstream.
    
    This bug is in parse_lease_state, and it is caused by the missing check
    of `struct create_context`. When the ksmbd traverses the create_contexts,
    it doesn't check if the field of `NameOffset` and `Next` is valid,
    The KASAN message is following:
    
    [    6.664323] BUG: KASAN: slab-out-of-bounds in parse_lease_state+0x7d/0x280
    [    6.664738] Read of size 2 at addr ffff888005c08988 by task kworker/0:3/103
    ...
    [    6.666644] Call Trace:
    [    6.666796]  <TASK>
    [    6.666933]  dump_stack_lvl+0x33/0x50
    [    6.667167]  print_report+0xcc/0x620
    [    6.667903]  kasan_report+0xae/0xe0
    [    6.668374]  kasan_check_range+0x35/0x1b0
    [    6.668621]  parse_lease_state+0x7d/0x280
    [    6.668868]  smb2_open+0xbe8/0x4420
    [    6.675137]  handle_ksmbd_work+0x282/0x820
    
    Use smb2_find_context_vals() to find smb2 create request lease context.
    smb2_find_context_vals validate create context fields.
    
    Cc: stable@vger.kernel.org
    Reported-by: Chih-Yen Chang <cc85nod@gmail.com>
    Tested-by: Chih-Yen Chang <cc85nod@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf12d7fb63b365fb766655cedcb5d5f292b0c35e
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun May 28 00:23:09 2023 +0900

    ksmbd: fix out-of-bound read in deassemble_neg_contexts()
    
    commit f1a411873c85b642f13b01f21b534c2bab81fc1b upstream.
    
    The check in the beginning is
    `clen + sizeof(struct smb2_neg_context) <= len_of_ctxts`,
    but in the end of loop, `len_of_ctxts` will subtract
    `((clen + 7) & ~0x7) + sizeof(struct smb2_neg_context)`, which causes
    integer underflow when clen does the 8 alignment. We should use
    `(clen + 7) & ~0x7` in the check to avoid underflow from happening.
    
    Then there are some variables that need to be declared unsigned
    instead of signed.
    
    [   11.671070] BUG: KASAN: slab-out-of-bounds in smb2_handle_negotiate+0x799/0x1610
    [   11.671533] Read of size 2 at addr ffff888005e86cf2 by task kworker/0:0/7
    ...
    [   11.673383] Call Trace:
    [   11.673541]  <TASK>
    [   11.673679]  dump_stack_lvl+0x33/0x50
    [   11.673913]  print_report+0xcc/0x620
    [   11.674671]  kasan_report+0xae/0xe0
    [   11.675171]  kasan_check_range+0x35/0x1b0
    [   11.675412]  smb2_handle_negotiate+0x799/0x1610
    [   11.676217]  ksmbd_smb_negotiate_common+0x526/0x770
    [   11.676795]  handle_ksmbd_work+0x274/0x810
    ...
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Chih-Yen Chang <cc85nod@gmail.com>
    Tested-by: Chih-Yen Chang <cc85nod@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb322da83ce538bdce0f65029d1f0008ac70cda8
Author: Shannon Nelson <shannon.nelson@amd.com>
Date:   Mon Apr 24 15:50:31 2023 -0700

    vhost_vdpa: support PACKED when setting-getting vring_base
    
    [ Upstream commit beee7fdb5b56a46415a4992d28dd4c2d06eb52df ]
    
    Use the right structs for PACKED or split vqs when setting and
    getting the vring base.
    
    Fixes: 4c8cf31885f6 ("vhost: introduce vDPA-based backend")
    Signed-off-by: Shannon Nelson <shannon.nelson@amd.com>
    Message-Id: <20230424225031.18947-4-shannon.nelson@amd.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b839b65456f56958eec6c053e4aff49d64556189
Author: Shannon Nelson <shannon.nelson@amd.com>
Date:   Mon Apr 24 15:50:30 2023 -0700

    vhost: support PACKED when setting-getting vring_base
    
    [ Upstream commit 55d8122f5cd62d5aaa225d7167dcd14a44c850b9 ]
    
    Use the right structs for PACKED or split vqs when setting and
    getting the vring base.
    
    Fixes: 4c8cf31885f6 ("vhost: introduce vDPA-based backend")
    Signed-off-by: Shannon Nelson <shannon.nelson@amd.com>
    Message-Id: <20230424225031.18947-3-shannon.nelson@amd.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c5a69c5dd53d7624b3eee45702c5c901c4bc785
Author: Sheng Zhao <sheng.zhao@bytedance.com>
Date:   Tue May 30 11:36:26 2023 +0800

    vduse: avoid empty string for dev name
    
    [ Upstream commit a90e8608eb0ed93d31ac0feb055f77ce59512542 ]
    
    Syzkaller hits a kernel WARN when the first character of the dev name
    provided is NULL. Solution is to add a NULL check before calling
    cdev_device_add() in vduse_create_dev().
    
    kobject: (0000000072042169): attempted to be registered with empty name!
    WARNING: CPU: 0 PID: 112695 at lib/kobject.c:236
    Call Trace:
     kobject_add_varg linux/src/lib/kobject.c:390 [inline]
     kobject_add+0xf6/0x150 linux/src/lib/kobject.c:442
     device_add+0x28f/0xc20 linux/src/drivers/base/core.c:2167
     cdev_device_add+0x83/0xc0 linux/src/fs/char_dev.c:546
     vduse_create_dev linux/src/drivers/vdpa/vdpa_user/vduse_dev.c:2254 [inline]
     vduse_ioctl+0x7b5/0xf30 linux/src/drivers/vdpa/vdpa_user/vduse_dev.c:2316
     vfs_ioctl linux/src/fs/ioctl.c:47 [inline]
     file_ioctl linux/src/fs/ioctl.c:510 [inline]
     do_vfs_ioctl+0x14b/0xa80 linux/src/fs/ioctl.c:697
     ksys_ioctl+0x7c/0xa0 linux/src/fs/ioctl.c:714
     __do_sys_ioctl linux/src/fs/ioctl.c:721 [inline]
     __se_sys_ioctl linux/src/fs/ioctl.c:719 [inline]
     __x64_sys_ioctl+0x42/0x50 linux/src/fs/ioctl.c:719
     do_syscall_64+0x94/0x330 linux/src/arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: c8a6153b6c59 ("vduse: Introduce VDUSE - vDPA Device in Userspace")
    Cc: "Xie Yongji" <xieyongji@bytedance.com>
    Reported-by: Xianjun Zeng <zengxianjun@bytedance.com>
    Signed-off-by: Sheng Zhao <sheng.zhao@bytedance.com>
    Message-Id: <20230530033626.1266794-1-sheng.zhao@bytedance.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Xie Yongji <xieyongji@bytedance.com>
    Cc: "Michael S. Tsirkin"<mst@redhat.com>, "Jason Wang"<jasowang@redhat.com>,
    Reviewed-by: Xie Yongji <xieyongji@bytedance.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e48d635f2745ab3342e421168362b1f4fb5bc61
Author: Ruan Jinjie <ruanjinjie@huawei.com>
Date:   Thu May 4 15:29:10 2023 +0800

    riscv: fix kprobe __user string arg print fault issue
    
    [ Upstream commit 99a670b2069c725a7b50318aa681d9cae8f89325 ]
    
    On riscv qemu platform, when add kprobe event on do_sys_open() to show
    filename string arg, it just print fault as follow:
    
    echo 'p:myprobe do_sys_open dfd=$arg1 filename=+0($arg2):string flags=$arg3
    mode=$arg4' > kprobe_events
    
    bash-166     [000] ...1.   360.195367: myprobe: (do_sys_open+0x0/0x84)
    dfd=0xffffffffffffff9c filename=(fault) flags=0x8241 mode=0x1b6
    
    bash-166     [000] ...1.   360.219369: myprobe: (do_sys_open+0x0/0x84)
    dfd=0xffffffffffffff9c filename=(fault) flags=0x8241 mode=0x1b6
    
    bash-191     [000] ...1.   360.378827: myprobe: (do_sys_open+0x0/0x84)
    dfd=0xffffffffffffff9c filename=(fault) flags=0x98800 mode=0x0
    
    As riscv do not select ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE,
    the +0($arg2) addr is processed as a kernel address though it is a
    userspace address, cause the above filename=(fault) print. So select
    ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE to avoid the issue, after that the
    kprobe trace is ok as below:
    
    bash-166     [000] ...1.    96.767641: myprobe: (do_sys_open+0x0/0x84)
    dfd=0xffffffffffffff9c filename="/dev/null" flags=0x8241 mode=0x1b6
    
    bash-166     [000] ...1.    96.793751: myprobe: (do_sys_open+0x0/0x84)
    dfd=0xffffffffffffff9c filename="/dev/null" flags=0x8241 mode=0x1b6
    
    bash-177     [000] ...1.    96.962354: myprobe: (do_sys_open+0x0/0x84)
    dfd=0xffffffffffffff9c filename="/sys/kernel/debug/tracing/events/kprobes/"
    flags=0x98800 mode=0x0
    
    Signed-off-by: Ruan Jinjie <ruanjinjie@huawei.com>
    Acked-by: Björn Töpel <bjorn@rivosinc.com>
    Fixes: 0ebeea8ca8a4 ("bpf: Restrict bpf_probe_read{, str}() only to archs where they work")
    Link: https://lore.kernel.org/r/20230504072910.3742842-1-ruanjinjie@huawei.com
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14e4f37e46e6d0a9997c22a3e73fc8b3de0bc6c1
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Fri Jun 2 11:11:36 2023 +0100

    soundwire: stream: Add missing clear of alloc_slave_rt
    
    [ Upstream commit 58d95889f3c2064c6139ee94bb0e4d86e1ad4eab ]
    
    The current path that skips allocating the slave runtime does not clear
    the alloc_slave_rt flag, this is clearly incorrect. Add the missing
    clear, so the runtime won't be erroneously cleaned up.
    
    Fixes: f3016b891c8c ("soundwire: stream: sdw_stream_add_ functions can be called multiple times")
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20230602101140.2040141-1-ckeepax@opensource.cirrus.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e17734900a8810e32369c785d238baa19a0d4c15
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Jun 7 19:54:24 2023 -0700

    eeprom: at24: also select REGMAP
    
    [ Upstream commit 7f3c782b3914e510b646a77aedc3adeac2e4a63b ]
    
    Selecting only REGMAP_I2C can leave REGMAP unset, causing build errors,
    so also select REGMAP to prevent the build errors.
    
    ../drivers/misc/eeprom/at24.c:540:42: warning: 'struct regmap_config' declared inside parameter list will not be visible outside of this definition or declaration
      540 |                                   struct regmap_config *regmap_config)
    ../drivers/misc/eeprom/at24.c: In function 'at24_make_dummy_client':
    ../drivers/misc/eeprom/at24.c:552:18: error: implicit declaration of function 'devm_regmap_init_i2c' [-Werror=implicit-function-declaration]
      552 |         regmap = devm_regmap_init_i2c(dummy_client, regmap_config);
    ../drivers/misc/eeprom/at24.c:552:16: warning: assignment to 'struct regmap *' from 'int' makes pointer from integer without a cast [-Wint-conversion]
      552 |         regmap = devm_regmap_init_i2c(dummy_client, regmap_config);
    ../drivers/misc/eeprom/at24.c: In function 'at24_probe':
    ../drivers/misc/eeprom/at24.c:586:16: error: variable 'regmap_config' has initializer but incomplete type
      586 |         struct regmap_config regmap_config = { };
    ../drivers/misc/eeprom/at24.c:586:30: error: storage size of 'regmap_config' isn't known
      586 |         struct regmap_config regmap_config = { };
    ../drivers/misc/eeprom/at24.c:586:30: warning: unused variable 'regmap_config' [-Wunused-variable]
    
    Fixes: 5c015258478e ("eeprom: at24: add basic regmap_i2c support")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67180e079b325de3c6906552619eea65cc596acc
Author: Hsieh-Tseng Shen <woodrow.shen@sifive.com>
Date:   Tue Apr 25 18:28:28 2023 +0800

    riscv: mm: Ensure prot of VM_WRITE and VM_EXEC must be readable
    
    [ Upstream commit 6569fc12e442ea973d96db39e542aa19a7bc3a79 ]
    
    Commit 8aeb7b17f04e ("RISC-V: Make mmap() with PROT_WRITE imply PROT_READ")
    allows riscv to use mmap with PROT_WRITE only, and meanwhile mmap with w+x
    is also permitted. However, when userspace tries to access this page with
    PROT_WRITE|PROT_EXEC, which causes infinite loop at load page fault as
    well as it triggers soft lockup. According to riscv privileged spec,
    "Writable pages must also be marked readable". The fix to drop the
    `PAGE_COPY_READ_EXEC` and then `PAGE_COPY_EXEC` would be just used instead.
    This aligns the other arches (i.e arm64) for protection_map.
    
    Fixes: 8aeb7b17f04e ("RISC-V: Make mmap() with PROT_WRITE imply PROT_READ")
    Signed-off-by: Hsieh-Tseng Shen <woodrow.shen@sifive.com>
    Reviewed-by: Alexandre Ghiti <alexghiti@rivosinc.com>
    Link: https://lore.kernel.org/r/20230425102828.1616812-1-woodrow.shen@sifive.com
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4b76cd7713c9fc0532bf7ddb997af268d00088f
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Mar 9 10:58:19 2023 +0100

    i2c: sprd: Delete i2c adapter in .remove's error path
    
    [ Upstream commit ca0aa17f2db3468fd017038d23a78e17388e2f67 ]
    
    If pm runtime resume fails the .remove callback used to exit early. This
    resulted in an error message by the driver core but the device gets
    removed anyhow. This lets the registered i2c adapter stay around with an
    unbound parent device.
    
    So only skip clk disabling if resume failed, but do delete the adapter.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c53f2e8462f3d60d266d59c476874719a460987b
Author: Kent Gibson <warthog618@gmail.com>
Date:   Tue Jun 6 20:00:34 2023 +0800

    gpio: sim: fix memory corruption when adding named lines and unnamed hogs
    
    [ Upstream commit 95ae9979bfe3174c2ee8d64409c44532f2881907 ]
    
    When constructing the sim, gpio-sim constructs an array of named lines,
    sized based on the largest offset of any named line, and then initializes
    that array with the names of all lines, including unnamed hogs with higher
    offsets.  In doing so it writes NULLs beyond the extent of the array.
    
    Add a check that only named lines are used to initialize the array.
    
    Fixes: cb8c474e79be ("gpio: sim: new testing module")
    Signed-off-by: Kent Gibson<warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 410689432880e5c6285b58d1d8489d99ee14b5f4
Author: Balint Dobszay <balint.dobszay@arm.com>
Date:   Thu Jun 1 16:07:49 2023 +0200

    firmware: arm_ffa: Set handle field to zero in memory descriptor
    
    [ Upstream commit 3aa0519a4780f1b8e11966bd879d4a2934ba455f ]
    
    As described in the commit 111a833dc5cb ("firmware: arm_ffa: Set
    reserved/MBZ fields to zero in the memory descriptors") some fields in
    the memory descriptor have to be zeroed explicitly. The handle field is
    one of these, but it was left out from that change, fix this now.
    
    Fixes: 111a833dc5cb ("firmware: arm_ffa: Set reserved/MBZ fields to zero in the memory descriptors")
    Reported-by: Imre Kis <imre.kis@arm.com>
    Signed-off-by: Balint Dobszay <balint.dobszay@arm.com>
    Link: https://lore.kernel.org/r/20230601140749.93812-1-balint.dobszay@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f24cb5a04270bb85130a417d157e5860940e95d3
Author: Marek Behún <kabel@kernel.org>
Date:   Sun May 21 14:19:40 2023 +0200

    i2c: mv64xxx: Fix reading invalid status value in atomic mode
    
    [ Upstream commit 5578d0a79b6430fa1543640dd6f2d397d0886ce7 ]
    
    There seems to be a bug within the mv64xxx I2C controller, wherein the
    status register may not necessarily contain valid value immediately
    after the IFLG flag is set in the control register.
    
    My theory is that the controller:
    - first sets the IFLG in control register
    - then updates the status register
    - then raises an interrupt
    
    This may sometime cause weird bugs when in atomic mode, since in this
    mode we do not wait for an interrupt, but instead we poll the control
    register for IFLG and read status register immediately after.
    
    I encountered -ENXIO from mv64xxx_i2c_fsm() due to this issue when using
    this driver in atomic mode.
    
    Note that I've only seen this issue on Armada 385, I don't know whether
    other SOCs with this controller are also affected. Also note that this
    fix has been in U-Boot for over 4 years [1] without anybody complaining,
    so it should not cause regressions.
    
    [1] https://source.denx.de/u-boot/u-boot/-/commit/d50e29662f78
    
    Fixes: 544a8d75f3d6 ("i2c: mv64xxx: Add atomic_xfer method to driver")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e64012c034831b3aad8597217c28086dee62a7b
Author: Adam Ford <aford173@gmail.com>
Date:   Sun May 28 06:22:54 2023 -0500

    arm64: dts: imx8mn-beacon: Fix SPI CS pinmux
    
    [ Upstream commit 9bf2e534313fcf420367668cc1f30e10469901dc ]
    
    The final production baseboard had a different chip select than
    earlier prototype boards.  When the newer board was released,
    the SPI stopped working because the wrong pin was used in the device
    tree and conflicted with the UART RTS. Fix the pinmux for
    production boards.
    
    Fixes: 36ca3c8ccb53 ("arm64: dts: imx: Add Beacon i.MX8M Nano development kit")
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b64bbe8b1a45a27b9ea3dccfd82dfa138e9c5277
Author: Tian Lan <tian.lan@twosigma.com>
Date:   Sat May 13 18:12:27 2023 -0400

    blk-mq: fix blk_mq_hw_ctx active request accounting
    
    [ Upstream commit ddad59331a4e16088468ca0ad228a9fe32d7955a ]
    
    The nr_active counter continues to increase over time which causes the
    blk_mq_get_tag to hang until the thread is rescheduled to a different
    core despite there are still tags available.
    
    kernel-stack
    
      INFO: task inboundIOReacto:3014879 blocked for more than 2 seconds
      Not tainted 6.1.15-amd64 #1 Debian 6.1.15~debian11
      "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      task:inboundIOReacto state:D stack:0  pid:3014879 ppid:4557 flags:0x00000000
        Call Trace:
        <TASK>
        __schedule+0x351/0xa20
        scheduler+0x5d/0xe0
        io_schedule+0x42/0x70
        blk_mq_get_tag+0x11a/0x2a0
        ? dequeue_task_stop+0x70/0x70
        __blk_mq_alloc_requests+0x191/0x2e0
    
    kprobe output showing RQF_MQ_INFLIGHT bit is not cleared before
    __blk_mq_free_request being called.
    
      320    320  kworker/29:1H __blk_mq_free_request rq_flags 0x220c0 in-flight 1
             b'__blk_mq_free_request+0x1 [kernel]'
             b'bt_iter+0x50 [kernel]'
             b'blk_mq_queue_tag_busy_iter+0x318 [kernel]'
             b'blk_mq_timeout_work+0x7c [kernel]'
             b'process_one_work+0x1c4 [kernel]'
             b'worker_thread+0x4d [kernel]'
             b'kthread+0xe6 [kernel]'
             b'ret_from_fork+0x1f [kernel]'
    
    Signed-off-by: Tian Lan <tian.lan@twosigma.com>
    Fixes: 2e315dc07df0 ("blk-mq: grab rq->refcount before calling ->fn in blk_mq_tagset_busy_iter")
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20230513221227.497327-1-tilan7663@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3d87d415f7c45e83cb8327ae4d1f1d9d407549e
Author: Robert Hancock <robert.hancock@calian.com>
Date:   Thu Jun 1 19:19:35 2023 -0600

    ASoC: simple-card-utils: fix PCM constraint error check
    
    [ Upstream commit 635071f5fee31550e921644b2becc42b3ff1036c ]
    
    The code in asoc_simple_startup was treating any non-zero return from
    snd_pcm_hw_constraint_minmax as an error, when this can return 1 in some
    normal cases and only negative values indicate an error.
    
    When this happened, it caused asoc_simple_startup to disable the clocks
    it just enabled and return 1, which was not treated as an error by the
    calling code which only checks for negative return values. Then when the
    PCM is eventually shut down, it causes the clock framework to complain
    about disabling clocks that were not enabled.
    
    Fix the check for snd_pcm_hw_constraint_minmax return value to only
    treat negative values as an error.
    
    Fixes: 5ca2ab459817 ("ASoC: simple-card-utils: Add new system-clock-fixed flag")
    Signed-off-by: Robert Hancock <robert.hancock@calian.com>
    Link: https://lore.kernel.org/r/20230602011936.231931-1-robert.hancock@calian.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0f9f799bac64381fb2ea322a49073b1a0463bcb
Author: Trevor Wu <trevor.wu@mediatek.com>
Date:   Thu Jun 1 11:33:18 2023 +0800

    ASoC: mediatek: mt8195: fix use-after-free in driver remove path
    
    [ Upstream commit dc93f0dcb436dfd24a06c5b3c0f4c5cd9296e8e5 ]
    
    During mt8195_afe_init_clock(), mt8195_audsys_clk_register() was called
    followed by several other devm functions. At mt8195_afe_deinit_clock()
    located at mt8195_afe_pcm_dev_remove(), mt8195_audsys_clk_unregister()
    was called.
    
    However, there was an issue with the order in which these functions were
    called. Specifically, the remove callback of platform_driver was called
    before devres released the resource, resulting in a use-after-free issue
    during remove time.
    
    At probe time, the order of calls was:
    1. mt8195_audsys_clk_register
    2. afe_priv->clk = devm_kcalloc
    3. afe_priv->clk[i] = devm_clk_get
    
    At remove time, the order of calls was:
    1. mt8195_audsys_clk_unregister
    3. free afe_priv->clk[i]
    2. free afe_priv->clk
    
    To resolve the problem, we can utilize devm_add_action_or_reset() in
    mt8195_audsys_clk_register() so that the remove order can be changed to
    3->2->1.
    
    Fixes: 6746cc858259 ("ASoC: mediatek: mt8195: add platform driver")
    Signed-off-by: Trevor Wu <trevor.wu@mediatek.com>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20230601033318.10408-3-trevor.wu@mediatek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50f2160afbb8102cb983dd64c0768ae1f64b6647
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 15 16:06:45 2023 +0100

    ASoC: mediatek: mt8195-afe-pcm: Convert to platform remove callback returning void
    
    [ Upstream commit 6461fee68064ba970e3ba90241fe5f5e038aa9d4 ]
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Acked-by: Takashi Iwai <tiwai@suse.de>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/20230315150745.67084-114-u.kleine-koenig@pengutronix.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: dc93f0dcb436 ("ASoC: mediatek: mt8195: fix use-after-free in driver remove path")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 370711d7f0c1b6239d52831c1cf5c2b2a89e1e88
Author: Shenwei Wang <shenwei.wang@nxp.com>
Date:   Fri May 26 10:38:54 2023 -0500

    arm64: dts: imx8-ss-dma: assign default clock rate for lpuarts
    
    [ Upstream commit ca50d7765587fe0a8351a6e8d9742cfd4811d925 ]
    
    Add the assigned-clocks and assigned-clock-rates properties for the
    LPUARTx nodes. Without these properties, the default clock rate
    used would be 0, which can cause the UART ports to fail when open.
    
    Fixes: 35f4e9d7530f ("arm64: dts: imx8: split adma ss into dma and audio ss")
    Signed-off-by: Shenwei Wang <shenwei.wang@nxp.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efe115560a29e35317d7b033a2e39b525a4574c3
Author: Shenwei Wang <shenwei.wang@nxp.com>
Date:   Thu May 18 08:54:21 2023 -0500

    arm64: dts: imx8qm-mek: correct GPIOs for USDHC2 CD and WP signals
    
    [ Upstream commit 2b28fc688cdff225c41cdd22857500e187453ed7 ]
    
    The USDHC2 CD and WP sginal should be on LSIO_GPIO5.
    
    Fixes: 307fd14d4b14 ("arm64: dts: imx: add imx8qm mek support")
    Signed-off-by: Shenwei Wang <shenwei.wang@nxp.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a607e53f208ef7c14d0251325abab572c35acc9
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon May 15 17:19:29 2023 -0700

    arm64: dts: qcom: sc7180-lite: Fix SDRAM freq for misidentified sc7180-lite boards
    
    [ Upstream commit 3a735530c159b75e1402c08abe1ba4eb99a1f7a3 ]
    
    In general, the three SKUs of sc7180 (lite, normal, and pro) are
    handled dynamically.
    
    The cpufreq table in sc7180.dtsi includes the superset of all CPU
    frequencies. The "qcom-cpufreq-hw" driver in Linux shows that we can
    dynamically detect which frequencies are actually available on the
    currently running CPU and then we can just enable those ones.
    
    The GPU is similarly dynamic. The nvmem has a fuse in it (see
    "gpu_speed_bin" in sc7180.dtsi) that the GPU driver can use to figure
    out which frequencies to enable.
    
    There is one part, however, that is not so dynamic. The way SDRAM
    frequency works in sc7180 is that it's tied to cpufreq. At the busiest
    cpufreq operating points we'll pick the top supported SDRAM frequency.
    They ramp down together.
    
    For the "pro" SKU of sc7180, we only enable one extra cpufreq step.
    That extra cpufreq step runs SDRAM at the same speed as the step
    below. Thus, for normal and pro things are OK. There is no sc7180-pro
    device tree snippet.
    
    For the "lite" SKU if sc7180, however, things aren't so easy. The
    "lite" SKU drops 3 cpufreq entries but can still run SDRAM at max
    frequency. That messed things up with the whole scheme. This is why we
    added the "sc7180-lite" fragment in commit 8fd01e01fd6f ("arm64: dts:
    qcom: sc7180-lite: Tweak DDR/L3 scaling on SC7180-lite").
    
    When the lite scheme came about, it was agreed that the WiFi SKUs of
    lazor would _always_ be "lite" and would, in fact, be the only "lite"
    devices. Unfortunately, this decision changed and folks didn't realize
    that it would be a problem. Specifically, some later lazor WiFi-only
    devices were built with "pro" CPUs.
    
    Building WiFi-only lazor with "pro" CPUs isn't the end of the world.
    The SDRAM will ramp up a little sooner than it otherwise would, but
    aside from a small power hit things work OK. One problem, though, is
    that the SDRAM scaling becomes a bit quirky. Specifically, with the
    current tables we'll max out SDRAM frequency at 2.1GHz but then
    _lower_ it at 2.2GHz / 2.3GHz only to raise it back to max for 2.4GHz
    and 2.55GHz.
    
    Let's at least fix this so that the SDRAM frequency doesn't go down in
    that quirky way. On true "lite" SKUs this change will be a no-op
    because the operating points we're touching are disabled. This change
    is only useful when a board that thinks it has a "lite" CPU actually
    has a "normal" or "pro" one stuffed.
    
    Fixes: 8fd01e01fd6f ("arm64: dts: qcom: sc7180-lite: Tweak DDR/L3 scaling on SC7180-lite")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230515171929.1.Ic8dee2cb79ce39ffc04eab2a344dde47b2f9459f@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 037449ce1c04c12ccaab26b13e8d63aaed0184f9
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Tue May 23 16:46:05 2023 +0100

    ASoC: codecs: wsa881x: do not set can_multi_write flag
    
    [ Upstream commit 6e7a6d4797ef521c0762914610ed682e102b9d36 ]
    
    regmap-sdw does not support multi register writes, so there is
    no point in setting this flag. This also leads to incorrect
    programming of WSA codecs with regmap_multi_reg_write() call.
    
    This invalid configuration should have been rejected by regmap-sdw.
    
    Fixes: a0aab9e1404a ("ASoC: codecs: add wsa881x amplifier support")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230523154605.4284-2-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b13854f26f2ef6ea3563ba12f82a96a69709bf8
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Tue May 23 16:46:04 2023 +0100

    ASoC: codecs: wsa883x: do not set can_multi_write flag
    
    [ Upstream commit 40ba0411074485e2cf1bf8ee0f3db27bdff88394 ]
    
    regmap-sdw does not support multi register writes, so there is
    no point in setting this flag. This also leads to incorrect
    programming of WSA codecs with regmap_multi_reg_write() call.
    
    This invalid configuration should have been rejected by regmap-sdw.
    
    Fixes: 43b8c7dc85a1 ("ASoC: codecs: add wsa883x amplifier support")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230523154605.4284-1-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58ab8a0ff81d97b068dafdf1b9002262e71e5295
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Tue May 23 08:27:50 2023 +0300

    ARM: dts: at91: sama7g5ek: fix debounce delay property for shdwc
    
    [ Upstream commit 6b0db163ff9200a55dc77a652dad1d4b0a853f63 ]
    
    There is no atmel,shdwc-debouncer property for SHDWC. The right DT property
    is debounce-delay-us. Use it.
    
    Fixes: 16b161bcf5d4 ("ARM: dts: at91: sama7g5: add shdwc node")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/20230523052750.184223-1-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b8ebe5393ed339f08d2f05d1130645db9de0672
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Thu May 18 09:25:11 2023 +0300

    ARM: at91: pm: fix imbalanced reference counter for ethernet devices
    
    [ Upstream commit ccd4923d18d5698a5910d516646ce125b9155d47 ]
    
    The of_find_device_by_node() function is returning a struct platform_device
    object with the embedded struct device member's reference counter
    incremented. This needs to be dropped when done with the platform device
    returned by of_find_device_by_node().
    
    at91_pm_eth_quirk_is_valid() calls of_find_device_by_node() on
    suspend and resume path. On suspend it calls of_find_device_by_node() and
    on resume and failure paths it drops the counter of
    struct platform_device::dev.
    
    In case ethernet device may not wakeup there is a put_device() on
    at91_pm_eth_quirk_is_valid() which is wrong as it colides with
    put_device() on resume path leading to the reference counter of struct
    device embedded in struct platform_device to be messed, stack trace to be
    displayed (after 5 consecutive suspend/resume cycles) and execution to
    hang.
    
    Along with this the error path of at91_pm_config_quirks() had been also
    adapted to decrement propertly the reference counter of struct device
    embedded in struct platform_device.
    
    Fixes: b7fc72c63399 ("ARM: at91: pm: add quirks for pm")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/20230518062511.2988500-1-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c97f30d215d8ef6a775fa067627470035a928795
Author: Bjorn Andersson <quic_bjorande@quicinc.com>
Date:   Fri May 12 08:04:25 2023 -0700

    arm64: dts: qcom: sc8280xp: Flush RSC sleep & wake votes
    
    [ Upstream commit ce7c014937c442be677963848c7db62eccd94eac ]
    
    The rpmh driver will cache sleep and wake votes until the cluster
    power-domain is about to enter idle, to avoid unnecessary writes. So
    associate the apps_rsc with the cluster pd, so that it can be notified
    about this event.
    
    Without this, only AMC votes are being commited.
    
    Signed-off-by: Bjorn Andersson <quic_bjorande@quicinc.com>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Fixes: 152d1faf1e2f ("arm64: dts: qcom: add SC8280XP platform")
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230512150425.3171122-1-quic_bjorande@quicinc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df9bc25d13c146a3979015f73ab9b5d406ca7ae1
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Mon May 15 21:09:58 2023 +0800

    mm: page_table_check: Ensure user pages are not slab pages
    
    commit 44d0fb387b53e56c8a050bac5c7d460e21eb226f upstream.
    
    The current uses of PageAnon in page table check functions can lead to
    type confusion bugs between struct page and slab [1], if slab pages are
    accidentally mapped into the user space. This is because slab reuses the
    bits in struct page to store its internal states, which renders PageAnon
    ineffective on slab pages.
    
    Since slab pages are not expected to be mapped into the user space, this
    patch adds BUG_ON(PageSlab(page)) checks to make sure that slab pages
    are not inadvertently mapped. Otherwise, there must be some bugs in the
    kernel.
    
    Reported-by: syzbot+fcf1a817ceb50935ce99@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/lkml/000000000000258e5e05fae79fc1@google.com/ [1]
    Fixes: df4e817b7108 ("mm: page table check")
    Cc: <stable@vger.kernel.org> # 5.17
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Acked-by: Pasha Tatashin <pasha.tatashin@soleen.com>
    Link: https://lore.kernel.org/r/20230515130958.32471-5-lrh2000@pku.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08378f0314ce30aefe9001a9affbf460dcf6047c
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Mon May 15 21:09:57 2023 +0800

    mm: page_table_check: Make it dependent on EXCLUSIVE_SYSTEM_RAM
    
    commit 81a31a860bb61d54eb688af2568d9332ed9b8942 upstream.
    
    Without EXCLUSIVE_SYSTEM_RAM, users are allowed to map arbitrary
    physical memory regions into the userspace via /dev/mem. At the same
    time, pages may change their properties (e.g., from anonymous pages to
    named pages) while they are still being mapped in the userspace, leading
    to "corruption" detected by the page table check.
    
    To avoid these false positives, this patch makes PAGE_TABLE_CHECK
    depends on EXCLUSIVE_SYSTEM_RAM. This dependency is understandable
    because PAGE_TABLE_CHECK is a hardening technique but /dev/mem without
    STRICT_DEVMEM (i.e., !EXCLUSIVE_SYSTEM_RAM) is itself a security
    problem.
    
    Even with EXCLUSIVE_SYSTEM_RAM, I/O pages may be still allowed to be
    mapped via /dev/mem. However, these pages are always considered as named
    pages, so they won't break the logic used in the page table check.
    
    Cc: <stable@vger.kernel.org> # 5.17
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Acked-by: David Hildenbrand <david@redhat.com>
    Acked-by: Pasha Tatashin <pasha.tatashin@soleen.com>
    Link: https://lore.kernel.org/r/20230515130958.32471-4-lrh2000@pku.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3901170529a70462c29798005f2e9b38bab211c5
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Mon May 15 21:09:56 2023 +0800

    usb: usbfs: Use consistent mmap functions
    
    commit d0b861653f8c16839c3035875b556afc4472f941 upstream.
    
    When hcd->localmem_pool is non-null, localmem_pool is used to allocate
    DMA memory. In this case, the dma address will be properly returned (in
    dma_handle), and dma_mmap_coherent should be used to map this memory
    into the user space. However, the current implementation uses
    pfn_remap_range, which is supposed to map normal pages.
    
    Instead of repeating the logic in the memory allocation function, this
    patch introduces a more robust solution. Here, the type of allocated
    memory is checked by testing whether dma_handle is properly set. If
    dma_handle is properly returned, it means some DMA pages are allocated
    and dma_mmap_coherent should be used to map them. Otherwise, normal
    pages are allocated and pfn_remap_range should be called. This ensures
    that the correct mmap functions are used consistently, independently
    with logic details that determine which type of memory gets allocated.
    
    Fixes: a0e710a7def4 ("USB: usbfs: fix mmap dma mismatch")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Link: https://lore.kernel.org/r/20230515130958.32471-3-lrh2000@pku.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80e29f11be6932274370d66e28e6848ee1120033
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Mon May 15 21:09:55 2023 +0800

    usb: usbfs: Enforce page requirements for mmap
    
    commit 0143d148d1e882fb1538dc9974c94d63961719b9 upstream.
    
    The current implementation of usbdev_mmap uses usb_alloc_coherent to
    allocate memory pages that will later be mapped into the user space.
    Meanwhile, usb_alloc_coherent employs three different methods to
    allocate memory, as outlined below:
     * If hcd->localmem_pool is non-null, it uses gen_pool_dma_alloc to
       allocate memory;
     * If DMA is not available, it uses kmalloc to allocate memory;
     * Otherwise, it uses dma_alloc_coherent.
    
    However, it should be noted that gen_pool_dma_alloc does not guarantee
    that the resulting memory will be page-aligned. Furthermore, trying to
    map slab pages (i.e., memory allocated by kmalloc) into the user space
    is not resonable and can lead to problems, such as a type confusion bug
    when PAGE_TABLE_CHECK=y [1].
    
    To address these issues, this patch introduces hcd_alloc_coherent_pages,
    which addresses the above two problems. Specifically,
    hcd_alloc_coherent_pages uses gen_pool_dma_alloc_align instead of
    gen_pool_dma_alloc to ensure that the memory is page-aligned. To replace
    kmalloc, hcd_alloc_coherent_pages directly allocates pages by calling
    __get_free_pages.
    
    Reported-by: syzbot+fcf1a817ceb50935ce99@syzkaller.appspotmail.comm
    Closes: https://lore.kernel.org/lkml/000000000000258e5e05fae79fc1@google.com/ [1]
    Fixes: f7d34b445abc ("USB: Add support for usbfs zerocopy.")
    Fixes: ff2437befd8f ("usb: host: Fix excessive alignment restriction for local memory allocations")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20230515130958.32471-2-lrh2000@pku.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42a7314f2b84aadb591b5146667dc19c48f195e0
Author: Martin Hundebøll <martin@geanix.com>
Date:   Fri May 12 08:49:25 2023 +0200

    pinctrl: meson-axg: add missing GPIOA_18 gpio group
    
    commit 5b10ff013e8a57f8845615ac2cc37edf7f6eef05 upstream.
    
    Without this, the gpio cannot be explicitly mux'ed to its gpio function.
    
    Fixes: 83c566806a68a ("pinctrl: meson-axg: Add new pinctrl driver for Meson AXG SoC")
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Hundebøll <martin@geanix.com>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Reviewed-by: Dmitry Rokosov <ddrokosov@sberdevices.ru>
    Link: https://lore.kernel.org/r/20230512064925.133516-1-martin@geanix.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdeb7129298bb506834cd914b84cb672da603957
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sat May 13 13:17:47 2023 +0200

    soc: qcom: icc-bwmon: fix incorrect error code passed to dev_err_probe()
    
    commit 3530167c6fe8001de6c026a3058eaca4c8a5329f upstream.
    
    Pass to dev_err_probe() PTR_ERR from actual dev_pm_opp_find_bw_floor()
    call which failed, instead of previous ret which at this point is 0.
    Failure of dev_pm_opp_find_bw_floor() would result in prematurely ending
    the probe with success.
    
    Fixes smatch warnings:
    
      drivers/soc/qcom/icc-bwmon.c:776 bwmon_probe() warn: passing zero to 'dev_err_probe'
      drivers/soc/qcom/icc-bwmon.c:781 bwmon_probe() warn: passing zero to 'dev_err_probe'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <error27@gmail.com>
    Link: https://lore.kernel.org/r/202305131657.76XeHDjF-lkp@intel.com/
    Cc: <stable@vger.kernel.org>
    Fixes: b9c2ae6cac40 ("soc: qcom: icc-bwmon: Add bandwidth monitoring driver")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230513111747.132532-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30c26b985c3eaee1488395e06983f2d9604f7f27
Author: Brett Creeley <brett.creeley@amd.com>
Date:   Mon Jun 5 12:59:25 2023 -0700

    virtio_net: use control_buf for coalesce params
    
    commit accc1bf23068c1cdc4c2b015320ba856e210dd98 upstream.
    
    Commit 699b045a8e43 ("net: virtio_net: notifications coalescing
    support") added coalescing command support for virtio_net. However,
    the coalesce commands are using buffers on the stack, which is causing
    the device to see DMA errors. There should also be a complaint from
    check_for_stack() in debug_dma_map_xyz(). Fix this by adding and using
    coalesce params from the control_buf struct, which aligns with other
    commands.
    
    Cc: stable@vger.kernel.org
    Fixes: 699b045a8e43 ("net: virtio_net: notifications coalescing support")
    Reviewed-by: Shannon Nelson <shannon.nelson@amd.com>
    Signed-off-by: Allen Hubbe <allen.hubbe@amd.com>
    Signed-off-by: Brett Creeley <brett.creeley@amd.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/20230605195925.51625-1-brett.creeley@amd.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 222a6bc8a7c60d19eb89cd2750236215791d5079
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Mon Jun 5 16:33:35 2023 +0200

    rbd: get snapshot context after exclusive lock is ensured to be held
    
    commit 870611e4877eff1e8413c3fb92a585e45d5291f6 upstream.
    
    Move capturing the snapshot context into the image request state
    machine, after exclusive lock is ensured to be held for the duration of
    dealing with the image request.  This is needed to ensure correctness
    of fast-diff states (OBJECT_EXISTS vs OBJECT_EXISTS_CLEAN) and object
    deltas computed based off of them.  Otherwise the object map that is
    forked for the snapshot isn't guaranteed to accurately reflect the
    contents of the snapshot when the snapshot is taken under I/O.  This
    breaks differential backup and snapshot-based mirroring use cases with
    fast-diff enabled: since some object deltas may be incomplete, the
    destination image may get corrupted.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/61472
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d647ee673c4d456b7bd7e0f0e3ef598437cb1489
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Mon Jun 5 16:33:35 2023 +0200

    rbd: move RBD_OBJ_FLAG_COPYUP_ENABLED flag setting
    
    commit 09fe05c57b5aaf23e2c35036c98ea9f282b19a77 upstream.
    
    Move RBD_OBJ_FLAG_COPYUP_ENABLED flag setting into the object request
    state machine to allow for the snapshot context to be captured in the
    image request state machine rather than in rbd_queue_workfn().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 939f00e4825deb9c45cf7b5148f2c9e6e36cf278
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Tue May 9 13:02:40 2023 +0530

    tee: amdtee: Add return_origin to 'struct tee_cmd_load_ta'
    
    commit 436eeae0411acdfc54521ddea80ee76d4ae8a7ea upstream.
    
    After TEE has completed processing of TEE_CMD_ID_LOAD_TA, set proper
    value in 'return_origin' argument passed by open_session() call. To do
    so, add 'return_origin' field to the structure tee_cmd_load_ta. The
    Trusted OS shall update return_origin as part of TEE processing.
    
    This change to 'struct tee_cmd_load_ta' interface requires a similar update
    in AMD-TEE Trusted OS's TEE_CMD_ID_LOAD_TA interface.
    
    This patch has been verified on Phoenix Birman setup. On older APUs,
    return_origin value will be 0.
    
    Cc: stable@vger.kernel.org
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Tested-by: Sourabh Das <sourabh.das@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Acked-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d088bea08ac0c904c90eddc5167a1f3e1e79bdb1
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed May 31 10:57:59 2023 +0200

    Bluetooth: hci_qca: fix debugfs registration
    
    commit 47c5d829a3e326b7395352a10fc8a6effe7afa15 upstream.
    
    Since commit 3e4be65eb82c ("Bluetooth: hci_qca: Add poweroff support
    during hci down for wcn3990"), the setup callback which registers the
    debugfs interface can be called multiple times.
    
    This specifically leads to the following error when powering on the
    controller:
    
            debugfs: Directory 'ibs' with parent 'hci0' already present!
    
    Add a driver flag to avoid trying to register the debugfs interface more
    than once.
    
    Fixes: 3e4be65eb82c ("Bluetooth: hci_qca: Add poweroff support during hci down for wcn3990")
    Cc: stable@vger.kernel.org      # 4.20
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5ae01fd46a30a77c7e2a6fecff6d3acb9264ced
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed May 31 10:57:58 2023 +0200

    Bluetooth: fix debugfs registration
    
    commit fe2ccc6c29d53e14d3c8b3ddf8ad965a92e074ee upstream.
    
    Since commit ec6cef9cd98d ("Bluetooth: Fix SMP channel registration for
    unconfigured controllers") the debugfs interface for unconfigured
    controllers will be created when the controller is configured.
    
    There is however currently nothing preventing a controller from being
    configured multiple time (e.g. setting the device address using btmgmt)
    which results in failed attempts to register the already registered
    debugfs entries:
    
            debugfs: File 'features' in directory 'hci0' already present!
            debugfs: File 'manufacturer' in directory 'hci0' already present!
            debugfs: File 'hci_version' in directory 'hci0' already present!
            ...
            debugfs: File 'quirk_simultaneous_discovery' in directory 'hci0' already present!
    
    Add a controller flag to avoid trying to register the debugfs interface
    more than once.
    
    Fixes: ec6cef9cd98d ("Bluetooth: Fix SMP channel registration for unconfigured controllers")
    Cc: stable@vger.kernel.org      # 4.0
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5490d6a742ca4550ad3f0f2f9e3529109f14625
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Tue May 30 13:48:44 2023 -0700

    Bluetooth: Fix use-after-free in hci_remove_ltk/hci_remove_irk
    
    commit c5d2b6fa26b5b8386a9cc902cdece3a46bef2bd2 upstream.
    
    Similar to commit 0f7d9b31ce7a ("netfilter: nf_tables: fix use-after-free
    in nft_set_catchall_destroy()"). We can not access k after kfree_rcu()
    call.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Min Li <lm0963hack@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e1e2ee0cf7fae4d69583a86111e720ff9637ee7
Author: Jan Höppner <hoeppner@linux.ibm.com>
Date:   Fri Jun 9 17:37:50 2023 +0200

    s390/dasd: Use correct lock while counting channel queue length
    
    commit ccc45cb4e7271c74dbb27776ae8f73d84557f5c6 upstream.
    
    The lock around counting the channel queue length in the BIODASDINFO
    ioctl was incorrectly changed to the dasd_block->queue_lock with commit
    583d6535cb9d ("dasd: remove dead code"). This can lead to endless list
    iterations and a subsequent crash.
    
    The queue_lock is supposed to be used only for queue lists belonging to
    dasd_block. For dasd_device related queue lists the ccwdev lock must be
    used.
    
    Fix the mentioned issues by correctly using the ccwdev lock instead of
    the queue lock.
    
    Fixes: 583d6535cb9d ("dasd: remove dead code")
    Cc: stable@vger.kernel.org # v5.0+
    Signed-off-by: Jan Höppner <hoeppner@linux.ibm.com>
    Reviewed-by: Stefan Haberland <sth@linux.ibm.com>
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230609153750.1258763-2-sth@linux.ibm.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f5c0eec89fc6f0c8ee6e8de8a72b7280837534f
Author: Xiubo Li <xiubli@redhat.com>
Date:   Thu Jun 1 08:59:31 2023 +0800

    ceph: fix use-after-free bug for inodes when flushing capsnaps
    
    commit 409e873ea3c1fd3079909718bbeb06ac1ec7f38b upstream.
    
    There is a race between capsnaps flush and removing the inode from
    'mdsc->snap_flush_list' list:
    
       == Thread A ==                     == Thread B ==
    ceph_queue_cap_snap()
     -> allocate 'capsnapA'
     ->ihold('&ci->vfs_inode')
     ->add 'capsnapA' to 'ci->i_cap_snaps'
     ->add 'ci' to 'mdsc->snap_flush_list'
        ...
       == Thread C ==
    ceph_flush_snaps()
     ->__ceph_flush_snaps()
      ->__send_flush_snap()
                                    handle_cap_flushsnap_ack()
                                     ->iput('&ci->vfs_inode')
                                       this also will release 'ci'
                                        ...
                                          == Thread D ==
                                    ceph_handle_snap()
                                     ->flush_snaps()
                                      ->iterate 'mdsc->snap_flush_list'
                                       ->get the stale 'ci'
     ->remove 'ci' from                ->ihold(&ci->vfs_inode) this
       'mdsc->snap_flush_list'           will WARNING
    
    To fix this we will increase the inode's i_count ref when adding 'ci'
    to the 'mdsc->snap_flush_list' list.
    
    [ idryomov: need_put int -> bool ]
    
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2209299
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Milind Changire <mchangir@redhat.com>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 443cf752f73bffe7b547b83fb75afd992a92d363
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Sun Jun 4 20:25:20 2023 -0700

    selftests: mptcp: update userspace pm subflow tests
    
    commit 6c160b636c91e71e50c39134f78257cc35305ff0 upstream.
    
    To align with what is done by the in-kernel PM, update userspace pm
    subflow selftests, by sending the a remove_addrs command together
    before the remove_subflows command. This will get a RM_ADDR in
    chk_rm_nr().
    
    Fixes: d9a4594edabf ("mptcp: netlink: Add MPTCP_PM_CMD_REMOVE")
    Fixes: 5e986ec46874 ("selftests: mptcp: userspace pm subflow tests")
    Link: https://github.com/multipath-tcp/mptcp_net-next/issues/379
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f0ba8ec18f5ee25d0600a32eb3f767be3a6e1c3
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Sun Jun 4 20:25:18 2023 -0700

    selftests: mptcp: update userspace pm addr tests
    
    commit 48d73f609dcceeb563b0d960e59bf0362581e39c upstream.
    
    This patch is linked to the previous commit ("mptcp: only send RM_ADDR in
    nl_cmd_remove").
    
    To align with what is done by the in-kernel PM, update userspace pm addr
    selftests, by sending a remove_subflows command together after the
    remove_addrs command.
    
    Fixes: d9a4594edabf ("mptcp: netlink: Add MPTCP_PM_CMD_REMOVE")
    Fixes: 97040cf9806e ("selftests: mptcp: userspace pm address tests")
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fa051b18fc61a23a6675bbb0a6277bcdaa8728b
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Sun Jun 4 20:25:21 2023 -0700

    mptcp: update userspace pm infos
    
    commit 77e4b94a3de692a09b79945ecac5b8e6b77f10c1 upstream.
    
    Increase pm subflows counter on both server side and client side when
    userspace pm creates a new subflow, and decrease the counter when it
    closes a subflow.
    
    Increase add_addr_signaled counter in mptcp_nl_cmd_announce() when the
    address is announced by userspace PM.
    
    This modification is similar to how the in-kernel PM is updating the
    counter: when additional subflows are created/removed.
    
    Fixes: 9ab4807c84a4 ("mptcp: netlink: Add MPTCP_PM_CMD_ANNOUNCE")
    Fixes: 702c2f646d42 ("mptcp: netlink: allow userspace-driven subflow establishment")
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/329
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b7fa33fda0fd29c8c329d9206186bbc9c449d37
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Sun Jun 4 20:25:19 2023 -0700

    mptcp: add address into userspace pm list
    
    commit 24430f8bf51655c5ab7ddc2fafe939dd3cd0dd47 upstream.
    
    Add the address into userspace_pm_local_addr_list when the subflow is
    created. Make sure it can be found in mptcp_nl_cmd_remove(). And delete
    it in the new helper mptcp_userspace_pm_delete_local_addr().
    
    By doing this, the "REMOVE" command also works with subflows that have
    been created via the "SUB_CREATE" command instead of restricting to
    the addresses that have been announced via the "ANNOUNCE" command.
    
    Fixes: d9a4594edabf ("mptcp: netlink: Add MPTCP_PM_CMD_REMOVE")
    Link: https://github.com/multipath-tcp/mptcp_net-next/issues/379
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d80a36ad400e1bc69a50e25606d22d2025ecee3a
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Sun Jun 4 20:25:17 2023 -0700

    mptcp: only send RM_ADDR in nl_cmd_remove
    
    commit 8b1c94da1e481090f24127b2c420b0c0b0421ce3 upstream.
    
    The specifications from [1] about the "REMOVE" command say:
    
        Announce that an address has been lost to the peer
    
    It was then only supposed to send a RM_ADDR and not trying to delete
    associated subflows.
    
    A new helper mptcp_pm_remove_addrs() is then introduced to do just
    that, compared to mptcp_pm_remove_addrs_and_subflows() also removing
    subflows.
    
    To delete a subflow, the userspace daemon can use the "SUB_DESTROY"
    command, see mptcp_nl_cmd_sf_destroy().
    
    Fixes: d9a4594edabf ("mptcp: netlink: Add MPTCP_PM_CMD_REMOVE")
    Link: https://github.com/multipath-tcp/mptcp/blob/mptcp_v0.96/include/uapi/linux/mptcp.h [1]
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0b04a9f97dd52b22adaff7988c424c65a7d6d66
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Fri May 26 20:19:10 2023 +0300

    can: j1939: avoid possible use-after-free when j1939_can_rx_register fails
    
    commit 9f16eb106aa5fce15904625661312623ec783ed3 upstream.
    
    Syzkaller reports the following failure:
    
    BUG: KASAN: use-after-free in kref_put include/linux/kref.h:64 [inline]
    BUG: KASAN: use-after-free in j1939_priv_put+0x25/0xa0 net/can/j1939/main.c:172
    Write of size 4 at addr ffff888141c15058 by task swapper/3/0
    
    CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.10.144-syzkaller #0
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x107/0x167 lib/dump_stack.c:118
     print_address_description.constprop.0+0x1c/0x220 mm/kasan/report.c:385
     __kasan_report mm/kasan/report.c:545 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:562
     check_memory_region_inline mm/kasan/generic.c:186 [inline]
     check_memory_region+0x145/0x190 mm/kasan/generic.c:192
     instrument_atomic_read_write include/linux/instrumented.h:101 [inline]
     atomic_fetch_sub_release include/asm-generic/atomic-instrumented.h:220 [inline]
     __refcount_sub_and_test include/linux/refcount.h:272 [inline]
     __refcount_dec_and_test include/linux/refcount.h:315 [inline]
     refcount_dec_and_test include/linux/refcount.h:333 [inline]
     kref_put include/linux/kref.h:64 [inline]
     j1939_priv_put+0x25/0xa0 net/can/j1939/main.c:172
     j1939_sk_sock_destruct+0x44/0x90 net/can/j1939/socket.c:374
     __sk_destruct+0x4e/0x820 net/core/sock.c:1784
     rcu_do_batch kernel/rcu/tree.c:2485 [inline]
     rcu_core+0xb35/0x1a30 kernel/rcu/tree.c:2726
     __do_softirq+0x289/0x9a3 kernel/softirq.c:298
     asm_call_irq_on_stack+0x12/0x20
     </IRQ>
     __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
     run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
     do_softirq_own_stack+0xaa/0xe0 arch/x86/kernel/irq_64.c:77
     invoke_softirq kernel/softirq.c:393 [inline]
     __irq_exit_rcu kernel/softirq.c:423 [inline]
     irq_exit_rcu+0x136/0x200 kernel/softirq.c:435
     sysvec_apic_timer_interrupt+0x4d/0x100 arch/x86/kernel/apic/apic.c:1095
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:635
    
    Allocated by task 1141:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc.constprop.0+0xc9/0xd0 mm/kasan/common.c:461
     kmalloc include/linux/slab.h:552 [inline]
     kzalloc include/linux/slab.h:664 [inline]
     j1939_priv_create net/can/j1939/main.c:131 [inline]
     j1939_netdev_start+0x111/0x860 net/can/j1939/main.c:268
     j1939_sk_bind+0x8ea/0xd30 net/can/j1939/socket.c:485
     __sys_bind+0x1f2/0x260 net/socket.c:1645
     __do_sys_bind net/socket.c:1656 [inline]
     __se_sys_bind net/socket.c:1654 [inline]
     __x64_sys_bind+0x6f/0xb0 net/socket.c:1654
     do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    Freed by task 1141:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track+0x1c/0x30 mm/kasan/common.c:56
     kasan_set_free_info+0x1b/0x30 mm/kasan/generic.c:355
     __kasan_slab_free+0x112/0x170 mm/kasan/common.c:422
     slab_free_hook mm/slub.c:1542 [inline]
     slab_free_freelist_hook+0xad/0x190 mm/slub.c:1576
     slab_free mm/slub.c:3149 [inline]
     kfree+0xd9/0x3b0 mm/slub.c:4125
     j1939_netdev_start+0x5ee/0x860 net/can/j1939/main.c:300
     j1939_sk_bind+0x8ea/0xd30 net/can/j1939/socket.c:485
     __sys_bind+0x1f2/0x260 net/socket.c:1645
     __do_sys_bind net/socket.c:1656 [inline]
     __se_sys_bind net/socket.c:1654 [inline]
     __x64_sys_bind+0x6f/0xb0 net/socket.c:1654
     do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    It can be caused by this scenario:
    
    CPU0                                    CPU1
    j1939_sk_bind(socket0, ndev0, ...)
      j1939_netdev_start()
                                            j1939_sk_bind(socket1, ndev0, ...)
                                              j1939_netdev_start()
      mutex_lock(&j1939_netdev_lock)
      j1939_priv_set(ndev0, priv)
      mutex_unlock(&j1939_netdev_lock)
                                              if (priv_new)
                                                kref_get(&priv_new->rx_kref)
                                                return priv_new;
                                              /* inside j1939_sk_bind() */
                                              jsk->priv = priv
      j1939_can_rx_register(priv) // fails
      j1939_priv_set(ndev, NULL)
      kfree(priv)
                                            j1939_sk_sock_destruct()
                                            j1939_priv_put() // <- uaf
    
    To avoid this, call j1939_can_rx_register() under j1939_netdev_lock so
    that a concurrent thread cannot process j1939_priv before
    j1939_can_rx_register() returns.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20230526171910.227615-3-pchelkin@ispras.ru
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a46c4a2bcd7931e6edd7d57b48f0c7498f3f206
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Fri May 26 20:19:09 2023 +0300

    can: j1939: change j1939_netdev_lock type to mutex
    
    commit cd9c790de2088b0d797dc4d244b4f174f9962554 upstream.
    
    It turns out access to j1939_can_rx_register() needs to be serialized,
    otherwise j1939_priv can be corrupted when parallel threads call
    j1939_netdev_start() and j1939_can_rx_register() fails. This issue is
    thoroughly covered in other commit which serializes access to
    j1939_can_rx_register().
    
    Change j1939_netdev_lock type to mutex so that we do not need to remove
    GFP_KERNEL from can_rx_register().
    
    j1939_netdev_lock seems to be used in normal contexts where mutex usage
    is not prohibited.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Suggested-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20230526171910.227615-2-pchelkin@ispras.ru
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db15e90a8c3b8a88c1e2dba2640f413d4e55406f
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Fri May 26 10:19:46 2023 +0200

    can: j1939: j1939_sk_send_loop_abort(): improved error queue handling in J1939 Socket
    
    commit 2a84aea80e925ecba6349090559754f8e8eb68ef upstream.
    
    This patch addresses an issue within the j1939_sk_send_loop_abort()
    function in the j1939/socket.c file, specifically in the context of
    Transport Protocol (TP) sessions.
    
    Without this patch, when a TP session is initiated and a Clear To Send
    (CTS) frame is received from the remote side requesting one data packet,
    the kernel dispatches the first Data Transport (DT) frame and then waits
    for the next CTS. If the remote side doesn't respond with another CTS,
    the kernel aborts due to a timeout. This leads to the user-space
    receiving an EPOLLERR on the socket, and the socket becomes active.
    
    However, when trying to read the error queue from the socket with
    sock.recvmsg(, , socket.MSG_ERRQUEUE), it returns -EAGAIN,
    given that the socket is non-blocking. This situation results in an
    infinite loop: the user-space repeatedly calls epoll(), epoll() returns
    the socket file descriptor with EPOLLERR, but the socket then blocks on
    the recv() of ERRQUEUE.
    
    This patch introduces an additional check for the J1939_SOCK_ERRQUEUE
    flag within the j1939_sk_send_loop_abort() function. If the flag is set,
    it indicates that the application has subscribed to receive error queue
    messages. In such cases, the kernel can communicate the current transfer
    state via the error queue. This allows for the function to return early,
    preventing the unnecessary setting of the socket into an error state,
    and breaking the infinite loop. It is crucial to note that a socket
    error is only needed if the application isn't using the error queue, as,
    without it, the application wouldn't be aware of transfer issues.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Reported-by: David Jander <david@protonic.nl>
    Tested-by: David Jander <david@protonic.nl>
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20230526081946.715190-1-o.rempel@pengutronix.de
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 727964650a126ff1e7a91ceaac0bd8db93e88a49
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Fri Jun 2 13:42:47 2023 -0600

    wifi: iwlwifi: mvm: Fix -Warray-bounds bug in iwl_mvm_wait_d3_notif()
    
    commit 7a4615b9a9da5225b22b36a20508555dd133ac24 upstream.
    
    kmemdup() at line 2735 is not duplicating enough memory for
    notif->tid_tear_down and notif->station_id. As it only duplicates
    612 bytes: up to offsetofend(struct iwl_wowlan_info_notif,
    received_beacons), this is the range of [0, 612) bytes.
    
    2735    notif = kmemdup(notif_v1,
    2736                    offsetofend(struct iwl_wowlan_info_notif,
    2737                                received_beacons),
    2738                    GFP_ATOMIC);
    
    which evidently does not cover bytes 612 and 613 for members
    tid_tear_down and station_id in struct iwl_wowlan_info_notif.
    See below:
    
    $ pahole -C iwl_wowlan_info_notif drivers/net/wireless/intel/iwlwifi/mvm/d3.o
    struct iwl_wowlan_info_notif {
            struct iwl_wowlan_gtk_status_v3 gtk[2];          /*     0   488 */
            /* --- cacheline 7 boundary (448 bytes) was 40 bytes ago --- */
            struct iwl_wowlan_igtk_status igtk[2];           /*   488    80 */
            /* --- cacheline 8 boundary (512 bytes) was 56 bytes ago --- */
            __le64                     replay_ctr;           /*   568     8 */
            /* --- cacheline 9 boundary (576 bytes) --- */
            __le16                     pattern_number;       /*   576     2 */
            __le16                     reserved1;            /*   578     2 */
            __le16                     qos_seq_ctr[8];       /*   580    16 */
            __le32                     wakeup_reasons;       /*   596     4 */
            __le32                     num_of_gtk_rekeys;    /*   600     4 */
            __le32                     transmitted_ndps;     /*   604     4 */
            __le32                     received_beacons;     /*   608     4 */
            u8                         tid_tear_down;        /*   612     1 */
            u8                         station_id;           /*   613     1 */
            u8                         reserved2[2];         /*   614     2 */
    
            /* size: 616, cachelines: 10, members: 13 */
            /* last cacheline: 40 bytes */
    };
    
    Therefore, when the following assignments take place, actually no memory
    has been allocated for those objects:
    
    2743    notif->tid_tear_down = notif_v1->tid_tear_down;
    2744    notif->station_id = notif_v1->station_id;
    
    Fix this by allocating space for the whole notif object and zero out the
    remaining space in memory after member station_id.
    
    This also fixes the following -Warray-bounds issues:
     CC      drivers/net/wireless/intel/iwlwifi/mvm/d3.o
    drivers/net/wireless/intel/iwlwifi/mvm/d3.c: In function ‘iwl_mvm_wait_d3_notif’:
    drivers/net/wireless/intel/iwlwifi/mvm/d3.c:2743:30: warning: array subscript ‘struct iwl_wowlan_info_notif[0]’ is partly outside array bounds of ‘unsigned char[612]’ [-Warray-bounds=]
     2743 |                         notif->tid_tear_down = notif_v1->tid_tear_down;
          |
                     from drivers/net/wireless/intel/iwlwifi/mvm/d3.c:7:
    In function ‘kmemdup’,
        inlined from ‘iwl_mvm_wait_d3_notif’ at drivers/net/wireless/intel/iwlwifi/mvm/d3.c:2735:12:
    include/linux/fortify-string.h:765:16: note: object of size 612 allocated by ‘__real_kmemdup’
      765 |         return __real_kmemdup(p, size, gfp);
          |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
    drivers/net/wireless/intel/iwlwifi/mvm/d3.c: In function ‘iwl_mvm_wait_d3_notif’:
    drivers/net/wireless/intel/iwlwifi/mvm/d3.c:2744:30: warning: array subscript ‘struct iwl_wowlan_info_notif[0]’ is partly outside array bounds of ‘unsigned char[612]’ [-Warray-bounds=]
     2744 |                         notif->station_id = notif_v1->station_id;
          |                              ^~
    In function ‘kmemdup’,
        inlined from ‘iwl_mvm_wait_d3_notif’ at drivers/net/wireless/intel/iwlwifi/mvm/d3.c:2735:12:
    include/linux/fortify-string.h:765:16: note: object of size 612 allocated by ‘__real_kmemdup’
      765 |         return __real_kmemdup(p, size, gfp);
          |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Link: https://github.com/KSPP/linux/issues/306
    Fixes: 905d50ddbc83 ("wifi: iwlwifi: mvm: support wowlan info notification version 2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Acked-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/ZHpGN555FwAKGduH@work
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8953be60ec33cba8289a855a886f64508f8c2c0c
Author: Alvin Lee <alvin.lee2@amd.com>
Date:   Fri May 19 11:38:15 2023 -0400

    drm/amd/display: Reduce sdp bw after urgent to 90%
    
    commit e1a600208286c197c2696e51fc313e49889315bd upstream.
    
    [Description]
    Reduce expected SDP bandwidth due to poor QoS and
    arbitration issues on high bandwidth configs
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Signed-off-by: Alvin Lee <alvin.lee2@amd.com>
    Reviewed-by: Nevenko Stupar <Nevenko.Stupar@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8695a443ad8f38e239b2080f02c4d739d6e33686
Author: Lijo Lazar <lijo.lazar@amd.com>
Date:   Fri Mar 31 16:30:01 2023 +0530

    drm/amd/pm: Fix power context allocation in SMU13
    
    commit 1d13c49cf4e246b218d71873f1bb1bbd376aa10e upstream.
    
    Use the right data structure for allocation.
    
    Signed-off-by: Lijo Lazar <lijo.lazar@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e143bae25cdbab69ea3e2e7bb6faf7711ce7583
Author: YiPeng Chai <YiPeng.Chai@amd.com>
Date:   Wed May 24 17:14:15 2023 +0800

    drm/amdgpu: change reserved vram info print
    
    commit dac652220ba0e5a2ef2da2a47a60b60aea333fdb upstream.
    
    The link object of mgr->reserved_pages is the blocks
    variable in struct amdgpu_vram_reservation, not the
    link variable in struct drm_buddy_block.
    
    Signed-off-by: YiPeng Chai <YiPeng.Chai@amd.com>
    Reviewed-by: Arunpravin Paneer Selvam <Arunpravin.PaneerSelvam@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34419aa0b448b0eee941102793893e0e256abda1
Author: Chia-I Wu <olvaffe@gmail.com>
Date:   Thu Jun 1 14:48:08 2023 -0700

    drm/amdgpu: fix xclk freq on CHIP_STONEY
    
    commit b447b079cf3a9971ea4d31301e673f49612ccc18 upstream.
    
    According to Alex, most APUs from that time seem to have the same issue
    (vbios says 48Mhz, actual is 100Mhz).  I only have a CHIP_STONEY so I
    limit the fixup to CHIP_STONEY
    
    Signed-off-by: Chia-I Wu <olvaffe@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 416ba40ff3c4ecafbed19029c9e9884a7fee3da5
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Apr 6 12:08:21 2023 +0800

    drm/amd/pm: conditionally disable pcie lane switching for some sienna_cichlid SKUs
    
    commit 38e4ced804796c5725e2a52ec3601951552c4a97 upstream.
    
    Disable the pcie lane switching for some sienna_cichlid SKUs since it
    might not work well on some platforms.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d42c563e4ddbe2d0d71249f137b02daa66972db
Author: Andi Shyti <andi.shyti@linux.intel.com>
Date:   Fri May 26 14:41:38 2023 +0200

    drm/i915/gt: Use the correct error value when kernel_context() fails
    
    commit 40023959dbab3c6ad56fa7213770e63d197b69fb upstream.
    
    kernel_context() returns an error pointer. Use pointer-error
    conversion functions to evaluate its return value, rather than
    checking for a '0' return.
    
    Fixes: eb5c10cbbc2f ("drm/i915: Remove I915_USER_PRIORITY_SHIFT")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Andi Shyti <andi.shyti@linux.intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: <stable@vger.kernel.org> # v5.13+
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Acked-by: Tejas Upadhyay <tejas.upadhyay@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230526124138.2006110-1-andi.shyti@linux.intel.com
    (cherry picked from commit edad9ee94f17adc75d3b13ab51bbe3d615ce1e7e)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b40b34913280c957433ba90d2f53e71a9c2bc940
Author: Stefan Binding <sbinding@opensource.cirrus.com>
Date:   Mon Jun 5 16:33:08 2023 +0100

    ALSA: hda/realtek: Add quirks for Asus ROG 2024 laptops using CS35L41
    
    commit 811dd426a9b16cf61a86fdb12d5f5b983cbfb130 upstream.
    
    Add support for Asus ROG 2024 models using CS35L41 SPI with Internal
    Boost.
    
    Signed-off-by: Stefan Binding <sbinding@opensource.cirrus.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230605153308.448550-1-sbinding@opensource.cirrus.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1acff11b674a3abc077b9b5e604aed8c00089a2
Author: RenHai <kean0048@gmail.com>
Date:   Fri Jun 2 08:36:04 2023 +0800

    ALSA: hda/realtek: Add Lenovo P3 Tower platform
    
    commit 7ca4c8d4d3f41c2cd9b4cf22bb829bf03dac0956 upstream.
    
    Headset microphone on this platform does not work without
    ALC897_FIXUP_HEADSET_MIC_PIN fixup.
    
    Signed-off-by: RenHai <kean0048@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230602003604.975892-1-kean0048@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63211350630b5b3dbcf2fe86add704eda40fccf8
Author: Ai Chao <aichao@kylinos.cn>
Date:   Fri May 26 17:47:04 2023 +0800

    ALSA: hda/realtek: Add a quirk for HP Slim Desktop S01
    
    commit 527c356b51f3ddee02c9ed5277538f85e30a2cdc upstream.
    
    Add a quirk for HP Slim Desktop S01 to fixup headset MIC no presence.
    
    Signed-off-by: Ai Chao <aichao@kylinos.cn>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230526094704.14597-1-aichao@kylinos.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0df0097ea2d52401c31e550389ac758c90e6a1eb
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Tue Jun 6 09:31:22 2023 +0200

    ALSA: ice1712,ice1724: fix the kcontrol->id initialization
    
    commit b9a4efd61b6b9f62f83752959e75a5dae20624fa upstream.
    
    The new xarray lookup code requires to know complete kcontrol->id before
    snd_ctl_add() call. Reorder the code to make the initialization properly.
    
    Cc: stable@kernel.org # v5.19+
    Reported-by: Martin Zidek <zidek@master.cz>
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20230606073122.597491-1-perex@perex.cz
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caad8a0a10c348975cf2ab5067ba7ffbd9b737e6
Author: Tim Crawford <tcrawford@system76.com>
Date:   Mon Jun 5 10:38:34 2023 -0600

    ALSA: hda/realtek: Add quirk for Clevo NS50AU
    
    commit da209f7a80dd633a32cbcbafe9e9f778933119c1 upstream.
    
    Fixes headset detection on Clevo NS50AU.
    
    Signed-off-by: Tim Crawford <tcrawford@system76.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230605163834.24653-1-tcrawford@system76.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3454490e0396191f8f9c215fccf5deef76abffb5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jun 6 11:38:53 2023 +0200

    ALSA: cmipci: Fix kctl->id initialization
    
    commit f2f312ad88c68a7f4a7789b9269ae33af3c7c7e9 upstream.
    
    cmipci driver replaces the kctl->id.device after assigning the kctl
    via snd_ctl_add().  This doesn't work any longer with the new Xarray
    lookup change.  It has to be set before snd_ctl_add() call instead.
    
    Fixes: c27e1efb61c5 ("ALSA: control: Use xarray for faster lookups")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20230606093855.14685-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c35034fd6446afaf408d5ab296068e32c775c965
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jun 6 11:38:54 2023 +0200

    ALSA: gus: Fix kctl->id initialization
    
    commit c5ae57b1bb99bd6f50b90428fabde397c2aeba0f upstream.
    
    GUS driver replaces the kctl->id.index after assigning the kctl via
    snd_ctl_add().  This doesn't work any longer with the new Xarray
    lookup change.  It has to be set before snd_ctl_add() call instead.
    
    Fixes: c27e1efb61c5 ("ALSA: control: Use xarray for faster lookups")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20230606093855.14685-4-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f6c520932bca5be9e8dec137fccb2fc094a80fe
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jun 6 11:38:52 2023 +0200

    ALSA: ymfpci: Fix kctl->id initialization
    
    commit c9b83ae4a1609b1914ba7fc70826a3f3a8b234db upstream.
    
    ymfpci driver replaces the kctl->id.device after assigning the kctl
    via snd_ctl_add().  This doesn't work any longer with the new Xarray
    lookup change.  It has to be set before snd_ctl_add() call instead.
    
    Fixes: c27e1efb61c5 ("ALSA: control: Use xarray for faster lookups")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20230606093855.14685-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be0b9b7a6d7757cba0edd68098932725fe722413
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jun 6 11:38:55 2023 +0200

    ALSA: hda: Fix kctl->id initialization
    
    commit 5c219a340850233aecbb444af964653ecd3d1370 upstream.
    
    HD-audio core code replaces the kctl->id.index of SPDIF-related
    controls after assigning via snd_ctl_add().  This doesn't work any
    longer with the new Xarray lookup change.  The change of the kctl->id
    content has to be done via snd_ctl_rename_id() helper, instead.
    
    Fixes: c27e1efb61c5 ("ALSA: control: Use xarray for faster lookups")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20230606093855.14685-5-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8a46f39dd2719c1044a2569a905f018f7a86b93
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Fri May 5 11:16:07 2023 -0700

    Input: fix open count when closing inhibited device
    
    commit 978134c4b192ed04ecf699be3e1b4d23b5d20457 upstream.
    
    Because the kernel increments device's open count in input_open_device()
    even if device is inhibited, the counter should always be decremented in
    input_close_device() to keep it balanced.
    
    Fixes: a181616487db ("Input: Add "inhibited" property")
    Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
    Link: https://lore.kernel.org/r/ZFFz0xAdPNSL3PT7@google.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9172a0bb57d62a42122075a124c071a1c56e455
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Thu May 11 12:08:37 2023 -0700

    Input: psmouse - fix OOB access in Elantech protocol
    
    commit 7b63a88bb62ba2ddf5fcd956be85fe46624628b9 upstream.
    
    The kernel only allocate 5 MT slots; check that transmitted slot ID
    falls within the acceptable range.
    
    Link: https://lore.kernel.org/r/ZFnEL91nrT789dbG@google.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00b59734f50421cd5e4d4b1fc06ee07961a6dd76
Author: Ismael Ferreras Morezuelas <swyterzone@gmail.com>
Date:   Tue May 23 14:45:10 2023 -0700

    Input: xpad - delete a Razer DeathAdder mouse VID/PID entry
    
    commit feee70f4568650cf44c573488798ffc0a2faeea3 upstream.
    
    While doing my research to improve the xpad device names I noticed
    that the 1532:0037 VID/PID seems to be used by the DeathAdder 2013,
    so that Razer Sabertooth instance looked wrong and very suspect to
    me. I didn't see any mention in the official drivers, either.
    
    After doing more research, it turns out that the xpad list
    is used by many other projects (like Steam) as-is [1], this
    issue was reported [2] and Valve/Sam Lantinga fixed it [3]:
    
    [1]: https://github.com/libsdl-org/SDL/blob/dcc5eef0e2395854b254ea2873a4899edab347c6/src/joystick/controller_type.h#L251
    [2]: https://steamcommunity.com/app/353380/discussions/0/1743392486228754770/
    [3]: https://hg.libsdl.org/SDL/rev/29809f6f0271
    
    (With multiple Internet users reporting similar issues, not linked here)
    
    After not being able to find the correct VID/PID combination anywhere
    on the Internet and not receiving any reply from Razer support I did
    some additional detective work, it seems like it presents itself as
    "Razer Sabertooth Gaming Controller (XBOX360)", code 1689:FE00.
    
    Leaving us with this:
     * Razer Sabertooth (1689:fe00)
     * Razer Sabertooth Elite (24c6:5d04)
     * Razer DeathAdder 2013 (1532:0037) [note: not a gamepad]
    
    So, to sum things up; remove this conflicting/duplicate entry:
    
    { 0x1532, 0x0037, "Razer Sabertooth", 0, XTYPE_XBOX360 },
    
    As the real/correct one is already present there, even if
    the Internet as a whole insists on presenting it as the
    Razer Sabertooth Elite, which (by all accounts) is not:
    
    { 0x1689, 0xfe00, "Razer Sabertooth", 0, XTYPE_XBOX360 },
    
    Actual change in SDL2 referencing this kernel issue:
    https://github.com/libsdl-org/SDL/commit/e5e54169754ca5d3e86339d968b20126d9da0a15
    
    For more information of the device, take a look here:
    https://github.com/xboxdrv/xboxdrv/pull/59
    
    You can see a lsusb dump here: https://github.com/xboxdrv/xboxdrv/files/76581/Qa6dBcrv.txt
    
    Fixes: f554f619b70 ("Input: xpad - sync device IDs with xboxdrv")
    Signed-off-by: Ismael Ferreras Morezuelas <swyterzone@gmail.com>
    Reviewed-by: Cameron Gutman <aicommander@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/5c12dbdb-5774-fc68-5c58-ca596383663e@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32c2c234bc2f286ca33b4cb7df8b1b3d9f30046b
Author: Vladislav Efanov <VEfanov@ispras.ru>
Date:   Fri May 26 19:16:32 2023 +0300

    batman-adv: Broken sync while rescheduling delayed work
    
    commit abac3ac97fe8734b620e7322a116450d7f90aa43 upstream.
    
    Syzkaller got a lot of crashes like:
    KASAN: use-after-free Write in *_timers*
    
    All of these crashes point to the same memory area:
    
    The buggy address belongs to the object at ffff88801f870000
     which belongs to the cache kmalloc-8k of size 8192
    The buggy address is located 5320 bytes inside of
     8192-byte region [ffff88801f870000, ffff88801f872000)
    
    This area belongs to :
            batadv_priv->batadv_priv_dat->delayed_work->timer_list
    
    The reason for these issues is the lack of synchronization. Delayed
    work (batadv_dat_purge) schedules new timer/work while the device
    is being deleted. As the result new timer/delayed work is set after
    cancel_delayed_work_sync() was called. So after the device is freed
    the timer list contains pointer to already freed memory.
    
    Found by Linux Verification Center (linuxtesting.org) with syzkaller.
    
    Cc: stable@kernel.org
    Fixes: 2f1dfbe18507 ("batman-adv: Distributed ARP Table - implement local storage")
    Signed-off-by: Vladislav Efanov <VEfanov@ispras.ru>
    Acked-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9b9c8469621b3545634d1707c9c96ee4398d46f
Author: Somnath Kotur <somnath.kotur@broadcom.com>
Date:   Wed Jun 7 00:54:09 2023 -0700

    bnxt_en: Implement .set_port / .unset_port UDP tunnel callbacks
    
    [ Upstream commit 1eb4ef12591348c440ac9d6efcf7521e73cf2b10 ]
    
    As per the new udp tunnel framework, drivers which need to know the
    details of a port entry (i.e. port type) when it gets deleted should
    use the .set_port / .unset_port callbacks.
    
    Implementing the current .udp_tunnel_sync callback would mean that the
    deleted tunnel port entry would be all zeros.  This used to work on
    older firmware because it would not check the input when deleting a
    tunnel port.  With newer firmware, the delete will now fail and
    subsequent tunnel port allocation will fail as a result.
    
    Fixes: 442a35a5a7aa ("bnxt: convert to new udp_tunnel_nic infra")
    Reviewed-by: Kalesh Anakkur Purayil <kalesh-anakkur.purayil@broadcom.com>
    Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abc7062313729743132a4dc60248d701a4ddbda2
Author: Pavan Chebbi <pavan.chebbi@broadcom.com>
Date:   Wed Jun 7 00:54:08 2023 -0700

    bnxt_en: Prevent kernel panic when receiving unexpected PHC_UPDATE event
    
    [ Upstream commit 319a7827df9784048abe072afe6b4fb4501d8de4 ]
    
    The firmware can send PHC_RTC_UPDATE async event on a PF that may not
    have PTP registered. In such a case, there will be a null pointer
    deference for bp->ptp_cfg when we try to handle the event.
    
    Fix it by not registering for this event with the firmware if !bp->ptp_cfg.
    Also, check that bp->ptp_cfg is valid before proceeding when we receive
    the event.
    
    Fixes: 8bcf6f04d4a5 ("bnxt_en: Handle async event when the PHC is updated in RTC mode")
    Signed-off-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ce24936d560f226899e3dbf01987668b39fac09
Author: Vikas Gupta <vikas.gupta@broadcom.com>
Date:   Wed Jun 7 00:54:07 2023 -0700

    bnxt_en: Skip firmware fatal error recovery if chip is not accessible
    
    [ Upstream commit 83474a9b252ab23e6003865c2775024344cb9c09 ]
    
    Driver starts firmware fatal error recovery by detecting
    heartbeat failure or fw reset count register changing.  But
    these checks are not reliable if the device is not accessible.
    This can happen while DPC (Downstream Port containment) is in
    progress.  Skip firmware fatal recovery if pci_device_is_present()
    returns false.
    
    Fixes: acfb50e4e773 ("bnxt_en: Add FW fatal devlink_health_reporter.")
    Reviewed-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Signed-off-by: Vikas Gupta <vikas.gupta@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fc86a4580da7314dd8451f630021b9626db8c9d
Author: Somnath Kotur <somnath.kotur@broadcom.com>
Date:   Wed Jun 7 00:54:06 2023 -0700

    bnxt_en: Query default VLAN before VNIC setup on a VF
    
    [ Upstream commit 1a9e4f501bc6ff1b6ecb60df54fbf2b54db43bfe ]
    
    We need to call bnxt_hwrm_func_qcfg() on a VF to query the default
    VLAN that may be setup by the PF.  If a default VLAN is enabled,
    the VF cannot support VLAN acceleration on the receive side and
    the VNIC must be setup to strip out the default VLAN tag.  If a
    default VLAN is not enabled, the VF can support VLAN acceleration
    on the receive side.  The VNIC should be set up to strip or not
    strip the VLAN based on the RX VLAN acceleration setting.
    
    Without this call to determine the default VLAN before calling
    bnxt_setup_vnic(), the VNIC may not be set up correctly.  For
    example, bnxt_setup_vnic() may set up to strip the VLAN tag based
    on stale default VLAN information.  If RX VLAN acceleration is
    not enabled, the VLAN tag will be incorrectly stripped and the
    RX data path will not work correctly.
    
    Fixes: cf6645f8ebc6 ("bnxt_en: Add function for VF driver to query default VLAN.")
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53a0c6d5c9294bad7fa8390c73ac96f386b15ce2
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Wed Jun 7 00:54:05 2023 -0700

    bnxt_en: Don't issue AP reset during ethtool's reset operation
    
    [ Upstream commit 1d997801c7cc6a7f542e46d5a6bf16f893ad3fe9 ]
    
    Only older NIC controller's firmware uses the PROC AP reset type.
    Firmware on 5731X/5741X and newer chips does not support this reset
    type.  When bnxt_reset() issues a series of resets, this PROC AP
    reset may actually fail on these newer chips because the firmware
    is not ready to accept this unsupported command yet.  Avoid this
    unnecessary error by skipping this reset type on chips that don't
    support it.
    
    Fixes: 7a13240e3718 ("bnxt_en: fix ethtool_reset_flags ABI violations")
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5df74018d1e6b8fdf4bba9be6e8f9bc8e638e243
Author: Florian Fainelli <florian.fainelli@broadcom.com>
Date:   Tue Jun 6 14:43:47 2023 -0700

    net: bcmgenet: Fix EEE implementation
    
    [ Upstream commit a9f31047baca57d47440c879cf259b86f900260c ]
    
    We had a number of short comings:
    
    - EEE must be re-evaluated whenever the state machine detects a link
      change as wight be switching from a link partner with EEE
      enabled/disabled
    
    - tx_lpi_enabled controls whether EEE should be enabled/disabled for the
      transmit path, which applies to the TBUF block
    
    - We do not need to forcibly enable EEE upon system resume, as the PHY
      state machine will trigger a link event that will do that, too
    
    Fixes: 6ef398ea60d9 ("net: bcmgenet: add EEE support")
    Signed-off-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Link: https://lore.kernel.org/r/20230606214348.2408018-1-florian.fainelli@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4925800a49c07a05fec99c0523163e7bebc5463
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Fri Jun 2 20:28:15 2023 +0200

    lib: cpu_rmap: Fix potential use-after-free in irq_cpu_rmap_release()
    
    [ Upstream commit 7c5d4801ecf0564c860033d89726b99723c55146 ]
    
    irq_cpu_rmap_release() calls cpu_rmap_put(), which may free the rmap.
    So we need to clear the pointer to our glue structure in rmap before
    doing that, not after.
    
    Fixes: 4e0473f1060a ("lib: cpu_rmap: Avoid use after free on rmap->obj array entries")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/ZHo0vwquhOy3FaXc@decadent.org.uk
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5a17f3247bd7f6c2e22678dbfcd73832f487e3f
Author: Horatio Zhang <Hongkun.Zhang@amd.com>
Date:   Mon May 29 14:23:37 2023 -0400

    drm/amdgpu: fix Null pointer dereference error in amdgpu_device_recover_vram
    
    [ Upstream commit 2a1eb1a343208ce7d6839b73d62aece343e693ff ]
    
    Use the function of amdgpu_bo_vm_destroy to handle the resource release
    of shadow bo. During the amdgpu_mes_self_test, shadow bo released, but
    vmbo->shadow_list was not, which caused a null pointer reference error
    in amdgpu_device_recover_vram when GPU reset.
    
    Fixes: 6c032c37ac3e ("drm/amdgpu: Fix vram recover doesn't work after whole GPU reset (v2)")
    Signed-off-by: xinhui pan <xinhui.pan@amd.com>
    Signed-off-by: Horatio Zhang <Hongkun.Zhang@amd.com>
    Acked-by: Feifei Xu <Feifei.Xu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbc880567adf48661ca9cb4506073e846bf64203
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Tue Jun 6 11:17:14 2023 -0700

    bpf: Add extra path pointer check to d_path helper
    
    [ Upstream commit f46fab0e36e611a2389d3843f34658c849b6bd60 ]
    
    Anastasios reported crash on stable 5.15 kernel with following
    BPF attached to lsm hook:
    
      SEC("lsm.s/bprm_creds_for_exec")
      int BPF_PROG(bprm_creds_for_exec, struct linux_binprm *bprm)
      {
              struct path *path = &bprm->executable->f_path;
              char p[128] = { 0 };
    
              bpf_d_path(path, p, 128);
              return 0;
      }
    
    But bprm->executable can be NULL, so bpf_d_path call will crash:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 0 P4D 0
      Oops: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC NOPTI
      ...
      RIP: 0010:d_path+0x22/0x280
      ...
      Call Trace:
       <TASK>
       bpf_d_path+0x21/0x60
       bpf_prog_db9cf176e84498d9_bprm_creds_for_exec+0x94/0x99
       bpf_trampoline_6442506293_0+0x55/0x1000
       bpf_lsm_bprm_creds_for_exec+0x5/0x10
       security_bprm_creds_for_exec+0x29/0x40
       bprm_execve+0x1c1/0x900
       do_execveat_common.isra.0+0x1af/0x260
       __x64_sys_execve+0x32/0x40
    
    It's problem for all stable trees with bpf_d_path helper, which was
    added in 5.9.
    
    This issue is fixed in current bpf code, where we identify and mark
    trusted pointers, so the above code would fail even to load.
    
    For the sake of the stable trees and to workaround potentially broken
    verifier in the future, adding the code that reads the path object from
    the passed pointer and verifies it's valid in kernel space.
    
    Fixes: 6e22ab9da793 ("bpf: Add d_path helper")
    Reported-by: Anastasios Papagiannis <tasos.papagiannnis@gmail.com>
    Suggested-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20230606181714.532998-1-jolsa@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06177b92902da33ab1a0cb14a3c538277177c2cf
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 7 10:23:01 2023 +0800

    net: sched: fix possible refcount leak in tc_chain_tmplt_add()
    
    [ Upstream commit 44f8baaf230c655c249467ca415b570deca8df77 ]
    
    try_module_get will be called in tcf_proto_lookup_ops. So module_put needs
    to be called to drop the refcount if ops don't implement the required
    function.
    
    Fixes: 9f407f1768d3 ("net: sched: introduce chain templates")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e582ceda5a1608c5af9987f1e90233af95b7af3b
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 13:13:04 2023 +0000

    net: sched: act_police: fix sparse errors in tcf_police_dump()
    
    [ Upstream commit 682881ee45c81daa883dcd4fe613b0b0d988bb22 ]
    
    Fixes following sparse errors:
    
    net/sched/act_police.c:360:28: warning: dereference of noderef expression
    net/sched/act_police.c:362:45: warning: dereference of noderef expression
    net/sched/act_police.c:362:45: warning: dereference of noderef expression
    net/sched/act_police.c:368:28: warning: dereference of noderef expression
    net/sched/act_police.c:370:45: warning: dereference of noderef expression
    net/sched/act_police.c:370:45: warning: dereference of noderef expression
    net/sched/act_police.c:376:45: warning: dereference of noderef expression
    net/sched/act_police.c:376:45: warning: dereference of noderef expression
    
    Fixes: d1967e495a8d ("net_sched: act_police: add 2 new attributes to support police 64bit rate and peakrate")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60f39768efa5f5f2c8baffd4f32ef21f37a8655f
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 11:42:33 2023 +0000

    net: sched: move rtm_tca_policy declaration to include file
    
    [ Upstream commit 886bc7d6ed3357975c5f1d3c784da96000d4bbb4 ]
    
    rtm_tca_policy is used from net/sched/sch_api.c and net/sched/cls_api.c,
    thus should be declared in an include file.
    
    This fixes the following sparse warning:
    net/sched/sch_api.c:1434:25: warning: symbol 'rtm_tca_policy' was not declared. Should it be static?
    
    Fixes: e331473fee3d ("net/sched: cls_api: add missing validation of netlink attributes")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76eef453a675794e98400c8889446b1503a9dfa6
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Mon Jun 5 14:11:35 2023 +0100

    drm/i915/selftests: Add some missing error propagation
    
    [ Upstream commit 79d0150d2d983a4f6efee676cea06027f586fcd0 ]
    
    Add some missing error propagation in live_parallel_switch.
    
    To avoid needlessly burdening the various backport processes, note I am
    not marking it as a fix against any patches and not copying stable since
    it is debug/selftests only code.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Cc: Andi Shyti <andi.shyti@linux.intel.com>
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Fixes: 50d16d44cce4 ("drm/i915/selftests: Exercise context switching in parallel")
    Fixes: 6407cf533217 ("drm/i915/selftests: Stop using kthread_stop()")
    Link: https://patchwork.freedesktop.org/patch/msgid/20230605131135.396854-1-tvrtko.ursulin@linux.intel.com
    (cherry picked from commit 412fa1f097f48c8c1321806dd25e46618e0da147)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e7f1f6da79e1acda58b738e34ff972821d13072
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Thu Oct 20 14:08:41 2022 +0100

    drm/i915/selftests: Stop using kthread_stop()
    
    [ Upstream commit 6407cf533217e09dfd895e64984c3f1ee3802373 ]
    
    Since a7c01fa93aeb ("signal: break out of wait loops on kthread_stop()")
    kthread_stop() started asserting a pending signal which wreaks havoc with
    a few of our selftests. Mainly because they are not fully expecting to
    handle signals, but also cutting the intended test runtimes short due
    signal_pending() now returning true (via __igt_timeout), which therefore
    breaks both the patterns of:
    
      kthread_run()
      ..sleep for igt_timeout_ms to allow test to exercise stuff..
      kthread_stop()
    
    And check for errors recorded in the thread.
    
    And also:
    
        Main thread  |   Test thread
      ---------------+------------------------------
      kthread_run()  |
      kthread_stop() |  do stuff until __igt_timeout
                     |  -- exits early due signal --
    
    Where this kthread_stop() was assume would have a "join" semantics, which
    it would have had if not the new signal assertion issue.
    
    To recap, threads are now likely to catch a previously impossible
    ERESTARTSYS or EINTR, marking the test as failed, or have a pointlessly
    short run time.
    
    To work around this start using kthread_work(er) API which provides
    an explicit way of waiting for threads to exit. And for cases where
    parent controls the test duration we add explicit signaling which threads
    will now use instead of relying on kthread_should_stop().
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221020130841.3845791-1-tvrtko.ursulin@linux.intel.com
    Stable-dep-of: 79d0150d2d98 ("drm/i915/selftests: Add some missing error propagation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d9a38b5639fcefacc1e977567fb4b4e4a74d0b3
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 11:19:29 2023 +0000

    net: sched: add rcu annotations around qdisc->qdisc_sleeping
    
    [ Upstream commit d636fc5dd692c8f4e00ae6e0359c0eceeb5d9bdb ]
    
    syzbot reported a race around qdisc->qdisc_sleeping [1]
    
    It is time we add proper annotations to reads and writes to/from
    qdisc->qdisc_sleeping.
    
    [1]
    BUG: KCSAN: data-race in dev_graft_qdisc / qdisc_lookup_rcu
    
    read to 0xffff8881286fc618 of 8 bytes by task 6928 on cpu 1:
    qdisc_lookup_rcu+0x192/0x2c0 net/sched/sch_api.c:331
    __tcf_qdisc_find+0x74/0x3c0 net/sched/cls_api.c:1174
    tc_get_tfilter+0x18f/0x990 net/sched/cls_api.c:2547
    rtnetlink_rcv_msg+0x7af/0x8c0 net/core/rtnetlink.c:6386
    netlink_rcv_skb+0x126/0x220 net/netlink/af_netlink.c:2546
    rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:6413
    netlink_unicast_kernel net/netlink/af_netlink.c:1339 [inline]
    netlink_unicast+0x56f/0x640 net/netlink/af_netlink.c:1365
    netlink_sendmsg+0x665/0x770 net/netlink/af_netlink.c:1913
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg net/socket.c:747 [inline]
    ____sys_sendmsg+0x375/0x4c0 net/socket.c:2503
    ___sys_sendmsg net/socket.c:2557 [inline]
    __sys_sendmsg+0x1e3/0x270 net/socket.c:2586
    __do_sys_sendmsg net/socket.c:2595 [inline]
    __se_sys_sendmsg net/socket.c:2593 [inline]
    __x64_sys_sendmsg+0x46/0x50 net/socket.c:2593
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    write to 0xffff8881286fc618 of 8 bytes by task 6912 on cpu 0:
    dev_graft_qdisc+0x4f/0x80 net/sched/sch_generic.c:1115
    qdisc_graft+0x7d0/0xb60 net/sched/sch_api.c:1103
    tc_modify_qdisc+0x712/0xf10 net/sched/sch_api.c:1693
    rtnetlink_rcv_msg+0x807/0x8c0 net/core/rtnetlink.c:6395
    netlink_rcv_skb+0x126/0x220 net/netlink/af_netlink.c:2546
    rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:6413
    netlink_unicast_kernel net/netlink/af_netlink.c:1339 [inline]
    netlink_unicast+0x56f/0x640 net/netlink/af_netlink.c:1365
    netlink_sendmsg+0x665/0x770 net/netlink/af_netlink.c:1913
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg net/socket.c:747 [inline]
    ____sys_sendmsg+0x375/0x4c0 net/socket.c:2503
    ___sys_sendmsg net/socket.c:2557 [inline]
    __sys_sendmsg+0x1e3/0x270 net/socket.c:2586
    __do_sys_sendmsg net/socket.c:2595 [inline]
    __se_sys_sendmsg net/socket.c:2593 [inline]
    __x64_sys_sendmsg+0x46/0x50 net/socket.c:2593
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 6912 Comm: syz-executor.5 Not tainted 6.4.0-rc3-syzkaller-00190-g0d85b27b0cc6 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/16/2023
    
    Fixes: 3a7d0d07a386 ("net: sched: extend Qdisc with rcu")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Vlad Buslov <vladbu@nvidia.com>
    Acked-by: Jamal Hadi Salim<jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a74ea37e1ab8162018a364c8cb419d945609e47
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 07:41:15 2023 +0000

    rfs: annotate lockless accesses to RFS sock flow table
    
    [ Upstream commit 5c3b74a92aa285a3df722bf6329ba7ccf70346d6 ]
    
    Add READ_ONCE()/WRITE_ONCE() on accesses to the sock flow table.
    
    This also prevents a (smart ?) compiler to remove the condition in:
    
    if (table->ents[index] != newval)
            table->ents[index] = newval;
    
    We need the condition to avoid dirtying a shared cache line.
    
    Fixes: fec5e652e58f ("rfs: Receive Flow Steering")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d9eface2eee50ec683d4b9523cd913f1d5ac4aa
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 07:41:14 2023 +0000

    rfs: annotate lockless accesses to sk->sk_rxhash
    
    [ Upstream commit 1e5c647c3f6d4f8497dedcd226204e1880e0ffb3 ]
    
    Add READ_ONCE()/WRITE_ONCE() on accesses to sk->sk_rxhash.
    
    This also prevents a (smart ?) compiler to remove the condition in:
    
    if (sk->sk_rxhash != newval)
            sk->sk_rxhash = newval;
    
    We need the condition to avoid dirtying a shared cache line.
    
    Fixes: fec5e652e58f ("rfs: Receive Flow Steering")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8e6aa0e60568ff3ea422180e6286e504bbc2db9
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jun 5 16:16:47 2023 +0000

    tcp: gso: really support BIG TCP
    
    [ Upstream commit 82a01ab35bd02ba4b0b4e12bc95c5b69240eb7b0 ]
    
    We missed that tcp_gso_segment() was assuming skb->len was smaller than 65535 :
    
    oldlen = (u16)~skb->len;
    
    This part came with commit 0718bcc09b35 ("[NET]: Fix CHECKSUM_HW GSO problems.")
    
    This leads to wrong TCP checksum.
    
    Adapt the code to accept arbitrary packet length.
    
    v2:
      - use two csum_add() instead of csum_fold() (Alexander Duyck)
      - Change delta type to __wsum to reduce casts (Alexander Duyck)
    
    Fixes: 09f3d1a3a52c ("ipv6/gso: remove temporary HBH/jumbo header")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230605161647.3624428-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 251b5d68ac4748f210577d84f1cd5a664c54785f
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jun 5 11:06:17 2023 -0700

    ipv6: rpl: Fix Route of Death.
    
    [ Upstream commit a2f4c143d76b1a47c91ef9bc46907116b111da0b ]
    
    A remote DoS vulnerability of RPL Source Routing is assigned CVE-2023-2156.
    
    The Source Routing Header (SRH) has the following format:
    
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |  Next Header  |  Hdr Ext Len  | Routing Type  | Segments Left |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | CmprI | CmprE |  Pad  |               Reserved                |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      .                                                               .
      .                        Addresses[1..n]                        .
      .                                                               .
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    
    The originator of an SRH places the first hop's IPv6 address in the IPv6
    header's IPv6 Destination Address and the second hop's IPv6 address as
    the first address in Addresses[1..n].
    
    The CmprI and CmprE fields indicate the number of prefix octets that are
    shared with the IPv6 Destination Address.  When CmprI or CmprE is not 0,
    Addresses[1..n] are compressed as follows:
    
      1..n-1 : (16 - CmprI) bytes
           n : (16 - CmprE) bytes
    
    Segments Left indicates the number of route segments remaining.  When the
    value is not zero, the SRH is forwarded to the next hop.  Its address
    is extracted from Addresses[n - Segment Left + 1] and swapped with IPv6
    Destination Address.
    
    When Segment Left is greater than or equal to 2, the size of SRH is not
    changed because Addresses[1..n-1] are decompressed and recompressed with
    CmprI.
    
    OTOH, when Segment Left changes from 1 to 0, the new SRH could have a
    different size because Addresses[1..n-1] are decompressed with CmprI and
    recompressed with CmprE.
    
    Let's say CmprI is 15 and CmprE is 0.  When we receive SRH with Segment
    Left >= 2, Addresses[1..n-1] have 1 byte for each, and Addresses[n] has
    16 bytes.  When Segment Left is 1, Addresses[1..n-1] is decompressed to
    16 bytes and not recompressed.  Finally, the new SRH will need more room
    in the header, and the size is (16 - 1) * (n - 1) bytes.
    
    Here the max value of n is 255 as Segment Left is u8, so in the worst case,
    we have to allocate 3825 bytes in the skb headroom.  However, now we only
    allocate a small fixed buffer that is IPV6_RPL_SRH_WORST_SWAP_SIZE (16 + 7
    bytes).  If the decompressed size overflows the room, skb_push() hits BUG()
    below [0].
    
    Instead of allocating the fixed buffer for every packet, let's allocate
    enough headroom only when we receive SRH with Segment Left 1.
    
    [0]:
    skbuff: skb_under_panic: text:ffffffff81c9f6e2 len:576 put:576 head:ffff8880070b5180 data:ffff8880070b4fb0 tail:0x70 end:0x140 dev:lo
    kernel BUG at net/core/skbuff.c:200!
    invalid opcode: 0000 [#1] PREEMPT SMP PTI
    CPU: 0 PID: 154 Comm: python3 Not tainted 6.4.0-rc4-00190-gc308e9ec0047 #7
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    RIP: 0010:skb_panic (net/core/skbuff.c:200)
    Code: 4f 70 50 8b 87 bc 00 00 00 50 8b 87 b8 00 00 00 50 ff b7 c8 00 00 00 4c 8b 8f c0 00 00 00 48 c7 c7 80 6e 77 82 e8 ad 8b 60 ff <0f> 0b 66 66 2e 0f 1f 84 00 00 00 00 00 90 90 90 90 90 90 90 90 90
    RSP: 0018:ffffc90000003da0 EFLAGS: 00000246
    RAX: 0000000000000085 RBX: ffff8880058a6600 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: ffff88807dc1c540 RDI: ffff88807dc1c540
    RBP: ffffc90000003e48 R08: ffffffff82b392c8 R09: 00000000ffffdfff
    R10: ffffffff82a592e0 R11: ffffffff82b092e0 R12: ffff888005b1c800
    R13: ffff8880070b51b8 R14: ffff888005b1ca18 R15: ffff8880070b5190
    FS:  00007f4539f0b740(0000) GS:ffff88807dc00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000055670baf3000 CR3: 0000000005b0e000 CR4: 00000000007506f0
    PKRU: 55555554
    Call Trace:
     <IRQ>
     skb_push (net/core/skbuff.c:210)
     ipv6_rthdr_rcv (./include/linux/skbuff.h:2880 net/ipv6/exthdrs.c:634 net/ipv6/exthdrs.c:718)
     ip6_protocol_deliver_rcu (net/ipv6/ip6_input.c:437 (discriminator 5))
     ip6_input_finish (./include/linux/rcupdate.h:805 net/ipv6/ip6_input.c:483)
     __netif_receive_skb_one_core (net/core/dev.c:5494)
     process_backlog (./include/linux/rcupdate.h:805 net/core/dev.c:5934)
     __napi_poll (net/core/dev.c:6496)
     net_rx_action (net/core/dev.c:6565 net/core/dev.c:6696)
     __do_softirq (./arch/x86/include/asm/jump_label.h:27 ./include/linux/jump_label.h:207 ./include/trace/events/irq.h:142 kernel/softirq.c:572)
     do_softirq (kernel/softirq.c:472 kernel/softirq.c:459)
     </IRQ>
     <TASK>
     __local_bh_enable_ip (kernel/softirq.c:396)
     __dev_queue_xmit (net/core/dev.c:4272)
     ip6_finish_output2 (./include/net/neighbour.h:544 net/ipv6/ip6_output.c:134)
     rawv6_sendmsg (./include/net/dst.h:458 ./include/linux/netfilter.h:303 net/ipv6/raw.c:656 net/ipv6/raw.c:914)
     sock_sendmsg (net/socket.c:724 net/socket.c:747)
     __sys_sendto (net/socket.c:2144)
     __x64_sys_sendto (net/socket.c:2156 net/socket.c:2152 net/socket.c:2152)
     do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
     entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    RIP: 0033:0x7f453a138aea
    Code: d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 f3 0f 1e fa 41 89 ca 64 8b 04 25 18 00 00 00 85 c0 75 15 b8 2c 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 7e c3 0f 1f 44 00 00 41 54 48 83 ec 30 44 89
    RSP: 002b:00007ffcc212a1c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00007ffcc212a288 RCX: 00007f453a138aea
    RDX: 0000000000000060 RSI: 00007f4539084c20 RDI: 0000000000000003
    RBP: 00007f4538308e80 R08: 00007ffcc212a300 R09: 000000000000001c
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: ffffffffc4653600 R14: 0000000000000001 R15: 00007f4539712d1b
     </TASK>
    Modules linked in:
    
    Fixes: 8610c7c6e3bd ("net: ipv6: add support for rpl sr exthdr")
    Reported-by: Max VA
    Closes: https://www.interruptlabs.co.uk/articles/linux-ipv6-route-of-death
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230605180617.67284-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65f2def2066255eb9ee6cbfe2961ed09e913ea9b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Jun 6 16:32:44 2023 +0200

    netfilter: nf_tables: out-of-bound check in chain blob
    
    [ Upstream commit 08e42a0d3ad30f276f9597b591f975971a1b0fcf ]
    
    Add current size of rule expressions to the boundary check.
    
    Fixes: 2c865a8a28a1 ("netfilter: nf_tables: add rule blob layout")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fea199dbf6c116162deaa979184282a94689923d
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu May 18 10:33:00 2023 -0700

    netfilter: ipset: Add schedule point in call_ad().
    
    [ Upstream commit 24e227896bbf003165e006732dccb3516f87f88e ]
    
    syzkaller found a repro that causes Hung Task [0] with ipset.  The repro
    first creates an ipset and then tries to delete a large number of IPs
    from the ipset concurrently:
    
      IPSET_ATTR_IPADDR_IPV4 : 172.20.20.187
      IPSET_ATTR_CIDR        : 2
    
    The first deleting thread hogs a CPU with nfnl_lock(NFNL_SUBSYS_IPSET)
    held, and other threads wait for it to be released.
    
    Previously, the same issue existed in set->variant->uadt() that could run
    so long under ip_set_lock(set).  Commit 5e29dc36bd5e ("netfilter: ipset:
    Rework long task execution when adding/deleting entries") tried to fix it,
    but the issue still exists in the caller with another mutex.
    
    While adding/deleting many IPs, we should release the CPU periodically to
    prevent someone from abusing ipset to hang the system.
    
    Note we need to increment the ipset's refcnt to prevent the ipset from
    being destroyed while rescheduling.
    
    [0]:
    INFO: task syz-executor174:268 blocked for more than 143 seconds.
          Not tainted 6.4.0-rc1-00145-gba79e9a73284 #1
    "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    task:syz-executor174 state:D stack:0     pid:268   ppid:260    flags:0x0000000d
    Call trace:
     __switch_to+0x308/0x714 arch/arm64/kernel/process.c:556
     context_switch kernel/sched/core.c:5343 [inline]
     __schedule+0xd84/0x1648 kernel/sched/core.c:6669
     schedule+0xf0/0x214 kernel/sched/core.c:6745
     schedule_preempt_disabled+0x58/0xf0 kernel/sched/core.c:6804
     __mutex_lock_common kernel/locking/mutex.c:679 [inline]
     __mutex_lock+0x6fc/0xdb0 kernel/locking/mutex.c:747
     __mutex_lock_slowpath+0x14/0x20 kernel/locking/mutex.c:1035
     mutex_lock+0x98/0xf0 kernel/locking/mutex.c:286
     nfnl_lock net/netfilter/nfnetlink.c:98 [inline]
     nfnetlink_rcv_msg+0x480/0x70c net/netfilter/nfnetlink.c:295
     netlink_rcv_skb+0x1c0/0x350 net/netlink/af_netlink.c:2546
     nfnetlink_rcv+0x18c/0x199c net/netfilter/nfnetlink.c:658
     netlink_unicast_kernel net/netlink/af_netlink.c:1339 [inline]
     netlink_unicast+0x664/0x8cc net/netlink/af_netlink.c:1365
     netlink_sendmsg+0x6d0/0xa4c net/netlink/af_netlink.c:1913
     sock_sendmsg_nosec net/socket.c:724 [inline]
     sock_sendmsg net/socket.c:747 [inline]
     ____sys_sendmsg+0x4b8/0x810 net/socket.c:2503
     ___sys_sendmsg net/socket.c:2557 [inline]
     __sys_sendmsg+0x1f8/0x2a4 net/socket.c:2586
     __do_sys_sendmsg net/socket.c:2595 [inline]
     __se_sys_sendmsg net/socket.c:2593 [inline]
     __arm64_sys_sendmsg+0x80/0x94 net/socket.c:2593
     __invoke_syscall arch/arm64/kernel/syscall.c:38 [inline]
     invoke_syscall+0x84/0x270 arch/arm64/kernel/syscall.c:52
     el0_svc_common+0x134/0x24c arch/arm64/kernel/syscall.c:142
     do_el0_svc+0x64/0x198 arch/arm64/kernel/syscall.c:193
     el0_svc+0x2c/0x7c arch/arm64/kernel/entry-common.c:637
     el0t_64_sync_handler+0x84/0xf0 arch/arm64/kernel/entry-common.c:655
     el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:591
    
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Fixes: a7b4f989a629 ("netfilter: ipset: IP set core support")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f057da51c0761e5e3593a0c74b1bfc8b5a2fdfbd
Author: Tijs Van Buggenhout <tijs.van.buggenhout@axsguard.com>
Date:   Thu May 25 12:25:26 2023 +0200

    netfilter: conntrack: fix NULL pointer dereference in nf_confirm_cthelper
    
    [ Upstream commit e1f543dc660b44618a1bd72ddb4ca0828a95f7ad ]
    
    An nf_conntrack_helper from nf_conn_help may become NULL after DNAT.
    
    Observed when TCP port 1720 (Q931_PORT), associated with h323 conntrack
    helper, is DNAT'ed to another destination port (e.g. 1730), while
    nfqueue is being used for final acceptance (e.g. snort).
    
    This happenned after transition from kernel 4.14 to 5.10.161.
    
    Workarounds:
     * keep the same port (1720) in DNAT
     * disable nfqueue
     * disable/unload h323 NAT helper
    
    $ linux-5.10/scripts/decode_stacktrace.sh vmlinux < /tmp/kernel.log
    BUG: kernel NULL pointer dereference, address: 0000000000000084
    [..]
    RIP: 0010:nf_conntrack_update (net/netfilter/nf_conntrack_core.c:2080 net/netfilter/nf_conntrack_core.c:2134) nf_conntrack
    [..]
    nfqnl_reinject (net/netfilter/nfnetlink_queue.c:237) nfnetlink_queue
    nfqnl_recv_verdict (net/netfilter/nfnetlink_queue.c:1230) nfnetlink_queue
    nfnetlink_rcv_msg (net/netfilter/nfnetlink.c:241) nfnetlink
    [..]
    
    Fixes: ee04805ff54a ("netfilter: conntrack: make conntrack userspace helpers work again")
    Signed-off-by: Tijs Van Buggenhout <tijs.van.buggenhout@axsguard.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f26ea49a5c0a80659216896b1218efa591402c9
Author: Jeremy Sowden <jeremy@azazel.net>
Date:   Thu May 25 15:07:24 2023 +0100

    netfilter: nft_bitwise: fix register tracking
    
    [ Upstream commit 14e8b293903785590a0ef168745ac84250cb1f4c ]
    
    At the end of `nft_bitwise_reduce`, there is a loop which is intended to
    update the bitwise expression associated with each tracked destination
    register.  However, currently, it just updates the first register
    repeatedly.  Fix it.
    
    Fixes: 34cc9e52884a ("netfilter: nf_tables: cancel tracking for clobbered destination registers")
    Signed-off-by: Jeremy Sowden <jeremy@azazel.net>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81e11b6c1ad061b780dd16aef1f979463a7b154c
Author: Yonghong Song <yhs@fb.com>
Date:   Tue Jun 6 10:22:02 2023 -0700

    selftests/bpf: Fix sockopt_sk selftest
    
    [ Upstream commit 69844e335d8c22454746c7903776533d8b4ab8fa ]
    
    Commit f4e4534850a9 ("net/netlink: fix NETLINK_LIST_MEMBERSHIPS length report")
    fixed NETLINK_LIST_MEMBERSHIPS length report which caused
    selftest sockopt_sk failure. The failure log looks like
    
      test_sockopt_sk:PASS:join_cgroup /sockopt_sk 0 nsec
      run_test:PASS:skel_load 0 nsec
      run_test:PASS:setsockopt_link 0 nsec
      run_test:PASS:getsockopt_link 0 nsec
      getsetsockopt:FAIL:Unexpected NETLINK_LIST_MEMBERSHIPS value unexpected Unexpected NETLINK_LIST_MEMBERSHIPS value: actual 8 != expected 4
      run_test:PASS:getsetsockopt 0 nsec
      #201     sockopt_sk:FAIL
    
    In net/netlink/af_netlink.c, function netlink_getsockopt(), for NETLINK_LIST_MEMBERSHIPS,
    nlk->ngroups equals to 36. Before Commit f4e4534850a9, the optlen is calculated as
      ALIGN(nlk->ngroups / 8, sizeof(u32)) = 4
    After that commit, the optlen is
      ALIGN(BITS_TO_BYTES(nlk->ngroups), sizeof(u32)) = 8
    
    Fix the test by setting the expected optlen to be 8.
    
    Fixes: f4e4534850a9 ("net/netlink: fix NETLINK_LIST_MEMBERSHIPS length report")
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20230606172202.1606249-1-yhs@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ba03535451f9b64f2fe8901ee80e593736bea92
Author: Stanislav Fomichev <sdf@google.com>
Date:   Tue Apr 18 15:53:39 2023 -0700

    selftests/bpf: Verify optval=NULL case
    
    [ Upstream commit 833d67ecdc5f35f1ebf59d0fccc1ce771434be9c ]
    
    Make sure we get optlen exported instead of getting EFAULT.
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20230418225343.553806-3-sdf@google.com
    Stable-dep-of: 69844e335d8c ("selftests/bpf: Fix sockopt_sk selftest")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d18f8b90b8a914cb4d4ecebde177d7dadc28552
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Jun 6 14:34:47 2023 +0200

    wifi: cfg80211: fix locking in sched scan stop work
    
    [ Upstream commit 3e54ed8247c94c8bdf370bd872bd9dfe72b1b12b ]
    
    This should use wiphy_lock() now instead of acquiring the
    RTNL, since cfg80211_stop_sched_scan_req() now needs that.
    
    Fixes: a05829a7222e ("cfg80211: avoid holding the RTNL when calling the driver")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a64e92846faa2ccbda9d2b8a04a8a4d3de94af0
Author: Manish Chopra <manishc@marvell.com>
Date:   Mon Jun 5 16:56:00 2023 +0530

    qed/qede: Fix scheduling while atomic
    
    [ Upstream commit 42510dffd0e2c27046905f742172ed6662af5557 ]
    
    Statistics read through bond interface via sysfs causes
    below bug and traces as it triggers the bonding module to
    collect the slave device statistics while holding the spinlock,
    beneath that qede->qed driver statistics flow gets scheduled out
    due to usleep_range() used in PTT acquire logic
    
    [ 3673.988874] Hardware name: HPE ProLiant DL365 Gen10 Plus/ProLiant DL365 Gen10 Plus, BIOS A42 10/29/2021
    [ 3673.988878] Call Trace:
    [ 3673.988891]  dump_stack_lvl+0x34/0x44
    [ 3673.988908]  __schedule_bug.cold+0x47/0x53
    [ 3673.988918]  __schedule+0x3fb/0x560
    [ 3673.988929]  schedule+0x43/0xb0
    [ 3673.988932]  schedule_hrtimeout_range_clock+0xbf/0x1b0
    [ 3673.988937]  ? __hrtimer_init+0xc0/0xc0
    [ 3673.988950]  usleep_range+0x5e/0x80
    [ 3673.988955]  qed_ptt_acquire+0x2b/0xd0 [qed]
    [ 3673.988981]  _qed_get_vport_stats+0x141/0x240 [qed]
    [ 3673.989001]  qed_get_vport_stats+0x18/0x80 [qed]
    [ 3673.989016]  qede_fill_by_demand_stats+0x37/0x400 [qede]
    [ 3673.989028]  qede_get_stats64+0x19/0xe0 [qede]
    [ 3673.989034]  dev_get_stats+0x5c/0xc0
    [ 3673.989045]  netstat_show.constprop.0+0x52/0xb0
    [ 3673.989055]  dev_attr_show+0x19/0x40
    [ 3673.989065]  sysfs_kf_seq_show+0x9b/0xf0
    [ 3673.989076]  seq_read_iter+0x120/0x4b0
    [ 3673.989087]  new_sync_read+0x118/0x1a0
    [ 3673.989095]  vfs_read+0xf3/0x180
    [ 3673.989099]  ksys_read+0x5f/0xe0
    [ 3673.989102]  do_syscall_64+0x3b/0x90
    [ 3673.989109]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [ 3673.989115] RIP: 0033:0x7f8467d0b082
    [ 3673.989119] Code: c0 e9 b2 fe ff ff 50 48 8d 3d ca 05 08 00 e8 35 e7 01 00 0f 1f 44 00 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 0f 05 <48> 3d 00 f0 ff ff 77 56 c3 0f 1f 44 00 00 48 83 ec 28 48 89 54 24
    [ 3673.989121] RSP: 002b:00007ffffb21fd08 EFLAGS: 00000246 ORIG_RAX: 0000000000000000
    [ 3673.989127] RAX: ffffffffffffffda RBX: 000000000100eca0 RCX: 00007f8467d0b082
    [ 3673.989128] RDX: 00000000000003ff RSI: 00007ffffb21fdc0 RDI: 0000000000000003
    [ 3673.989130] RBP: 00007f8467b96028 R08: 0000000000000010 R09: 00007ffffb21ec00
    [ 3673.989132] R10: 00007ffffb27b170 R11: 0000000000000246 R12: 00000000000000f0
    [ 3673.989134] R13: 0000000000000003 R14: 00007f8467b92000 R15: 0000000000045a05
    [ 3673.989139] CPU: 30 PID: 285188 Comm: read_all Kdump: loaded Tainted: G        W  OE
    
    Fix this by collecting the statistics asynchronously from a periodic
    delayed work scheduled at default stats coalescing interval and return
    the recent copy of statisitcs from .ndo_get_stats64(), also add ability
    to configure/retrieve stats coalescing interval using below commands -
    
    ethtool -C ethx stats-block-usecs <val>
    ethtool -c ethx
    
    Fixes: 133fac0eedc3 ("qede: Add basic ethtool support")
    Cc: Sudarsana Kalluru <skalluru@marvell.com>
    Cc: David Miller <davem@davemloft.net>
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Link: https://lore.kernel.org/r/20230605112600.48238-1-manishc@marvell.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79c975514cf198355e9f47fb361c69a435aff3e8
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sun Jun 4 12:11:15 2023 +0300

    wifi: mac80211: don't translate beacon/presp addrs
    
    [ Upstream commit 47c171a426e305f2225b92ed7b5e0a990c95f6d4 ]
    
    Don't do link address translation for beacons and probe responses,
    this leads to reporting multiple scan list entries for the same AP
    (one with the MLD address) which just breaks things.
    
    We might need to extend this in the future for some other (action)
    frames that aren't MLD addressed.
    
    Fixes: 42fb9148c078 ("wifi: mac80211: do link->MLD address translation on RX")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230604120651.62adead1b43a.Ifc25eed26ebf3b269f60b1ec10060156d0e7ec0d@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dd40fec5bf2ea0b247611eea2c831d16919a85c
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sun Jun 4 12:11:16 2023 +0300

    wifi: mac80211: mlme: fix non-inheritence element
    
    [ Upstream commit 68c228557d52616cf040651abefda9839de7086a ]
    
    There were two bugs when creating the non-inheritence
    element:
     1) 'at_extension' needs to be declared outside the loop,
        otherwise the value resets every iteration and we
        can never really switch properly
     2) 'added' never got set to true, so we always cut off
        the extension element again at the end of the function
    
    This shows another issue that we might add a list but no
    extension list, but we need to make the extension list a
    zero-length one in that case.
    
    Fix all these issues. While at it, add a comment explaining
    the trim.
    
    Fixes: 81151ce462e5 ("wifi: mac80211: support MLO authentication/association with one link")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230604120651.3addaa5c4782.If3a78f9305997ad7ef4ba7ffc17a8234c956f613@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b6ab4bfba6f4391cb5581bc2df77daeb943b318
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sun Jun 4 12:11:18 2023 +0300

    wifi: cfg80211: reject bad AP MLD address
    
    [ Upstream commit 727073ca5e55ab6a07df316250be8a12606e8677 ]
    
    When trying to authenticate, if the AP MLD address isn't
    a valid address, mac80211 can throw a warning. Avoid that
    by rejecting such addresses.
    
    Fixes: d648c23024bd ("wifi: nl80211: support MLO in auth/assoc")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230604120651.89188912bd1d.I8dbc6c8ee0cb766138803eec59508ef4ce477709@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 434cf4fbee4e3c26f1305865307ae52097e1e342
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sun Jun 4 12:11:23 2023 +0300

    wifi: mac80211: use correct iftype HE cap
    
    [ Upstream commit c37ab22bb1a43cdca8bf69cc0a22f1ccfc449e68 ]
    
    We already check that the right iftype capa exists,
    but then don't use it. Assign it to a variable so we
    can actually use it, and then do that.
    
    Fixes: bac2fd3d7534 ("mac80211: remove use of ieee80211_get_he_sta_cap()")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230604120651.0e908e5c5fdd.Iac142549a6144ac949ebd116b921a59ae5282735@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e8a7573ff9f43b76e7056b5ed32ea4b93e6ca10
Author: Sungwoo Kim <iam@sung-woo.kim>
Date:   Sat Jun 3 08:28:09 2023 -0400

    Bluetooth: L2CAP: Add missing checks for invalid DCID
    
    [ Upstream commit 75767213f3d9b97f63694d02260b6a49a2271876 ]
    
    When receiving a connect response we should make sure that the DCID is
    within the valid range and that we don't already have another channel
    allocated for the same DCID.
    Missing checks may violate the specification (BLUETOOTH CORE SPECIFICATION
    Version 5.4 | Vol 3, Part A, Page 1046).
    
    Fixes: 40624183c202 ("Bluetooth: L2CAP: Add missing checks for invalid LE DCID")
    Signed-off-by: Sungwoo Kim <iam@sung-woo.kim>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66b3f7425a9c5ebc2174539a55ba4ccf4cf1272c
Author: Pauli Virtanen <pav@iki.fi>
Date:   Thu Jun 1 09:34:44 2023 +0300

    Bluetooth: ISO: don't try to remove CIG if there are bound CIS left
    
    [ Upstream commit 6c242c64a09e78349fb0a5f0a6f8076a3d7c0bb4 ]
    
    Consider existing BOUND & CONNECT state CIS to block CIG removal.
    Otherwise, under suitable timing conditions we may attempt to remove CIG
    while Create CIS is pending, which fails.
    
    Fixes: 26afbd826ee3 ("Bluetooth: Add initial implementation of CIS connections")
    Signed-off-by: Pauli Virtanen <pav@iki.fi>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c7e51b94709f6aaf24a32bd267e75e89f3a0b2c
Author: Ying Hsu <yinghsu@chromium.org>
Date:   Wed May 31 03:44:56 2023 +0000

    Bluetooth: Fix l2cap_disconnect_req deadlock
    
    [ Upstream commit 02c5ea5246a44d6ffde0fddebfc1d56188052976 ]
    
    L2CAP assumes that the locks conn->chan_lock and chan->lock are
    acquired in the order conn->chan_lock, chan->lock to avoid
    potential deadlock.
    For example, l2sock_shutdown acquires these locks in the order:
      mutex_lock(&conn->chan_lock)
      l2cap_chan_lock(chan)
    
    However, l2cap_disconnect_req acquires chan->lock in
    l2cap_get_chan_by_scid first and then acquires conn->chan_lock
    before calling l2cap_chan_del. This means that these locks are
    acquired in unexpected order, which leads to potential deadlock:
      l2cap_chan_lock(c)
      mutex_lock(&conn->chan_lock)
    
    This patch releases chan->lock before acquiring the conn_chan_lock
    to avoid the potential deadlock.
    
    Fixes: a2a9339e1c9d ("Bluetooth: L2CAP: Fix use-after-free in l2cap_disconnect_{req,rsp}")
    Signed-off-by: Ying Hsu <yinghsu@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17aac1200222e529a936b0bf9fa9827d0fbba21f
Author: Zhengping Jiang <jiangzp@google.com>
Date:   Wed May 24 17:11:58 2023 -0700

    Bluetooth: hci_sync: add lock to protect HCI_UNREGISTER
    
    [ Upstream commit 1857c19941c87eb36ad47f22a406be5dfe5eff9f ]
    
    When the HCI_UNREGISTER flag is set, no jobs should be scheduled. Fix
    potential race when HCI_UNREGISTER is set after the flag is tested in
    hci_cmd_sync_queue.
    
    Fixes: 0b94f2651f56 ("Bluetooth: hci_sync: Fix queuing commands when HCI_UNREGISTER is set")
    Signed-off-by: Zhengping Jiang <jiangzp@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f285409c91bb97d78b05477d57a921ba1156465
Author: Jouni Högander <jouni.hogander@intel.com>
Date:   Tue May 30 13:16:49 2023 +0300

    drm/i915: Use 18 fast wake AUX sync len
    
    [ Upstream commit 2d6f2f79e06571d41eb1223abebe9097511c9544 ]
    
    HW default for wake sync pulses is 18. 10 precharge and 8 preamble. There
    is no reason to change this especially as it is causing problems with
    certain eDP panels.
    
    v3: Change "Fixes:" commit
    v2: Remove "fast wake" repeat from subject
    
    Signed-off-by: Jouni Högander <jouni.hogander@intel.com>
    Fixes: e1c71f8f9180 ("drm/i915: Fix fast wake AUX sync len")
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/8475
    Reviewed-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230530101649.2549949-1-jouni.hogander@intel.com
    (cherry picked from commit b29a20f7c4995a059ed764ce42389857426397c7)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bf7bebdc20df3d53a6c7af583d704e811fed85d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Mar 29 20:24:34 2023 +0300

    drm/i915: Explain the magic numbers for AUX SYNC/precharge length
    
    [ Upstream commit 26bfc3f36f2104c174dfc72415547d5c28ef3f1c ]
    
    Replace the hardcoded final numbers in the AUX SYNC/precharge
    setup, and derive those from numbers from the (e)DP specs.
    
    The new functions can serve as the single point of truth for
    the number of SYNC pulses we use.
    
    Cc: Jouni Högander <jouni.hogander@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230329172434.18744-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jouni Högander <jouni.hogander@intel.com>
    Stable-dep-of: 2d6f2f79e065 ("drm/i915: Use 18 fast wake AUX sync len")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d37434ffc1376306167dc61f37f78da18455b74
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jun 2 12:37:47 2023 +0000

    net/sched: fq_pie: ensure reasonable TCA_FQ_PIE_QUANTUM values
    
    [ Upstream commit cd2b8113c2e8b9f5a88a942e1eaca61eba401b85 ]
    
    We got multiple syzbot reports, all duplicates of the following [1]
    
    syzbot managed to install fq_pie with a zero TCA_FQ_PIE_QUANTUM,
    thus triggering infinite loops.
    
    Use limits similar to sch_fq, with commits
    3725a269815b ("pkt_sched: fq: avoid hang when quantum 0") and
    d9e15a273306 ("pkt_sched: fq: do not accept silly TCA_FQ_QUANTUM")
    
    [1]
    watchdog: BUG: soft lockup - CPU#0 stuck for 26s! [swapper/0:0]
    Modules linked in:
    irq event stamp: 172817
    hardirqs last enabled at (172816): [<ffff80001242fde4>] __el1_irq arch/arm64/kernel/entry-common.c:476 [inline]
    hardirqs last enabled at (172816): [<ffff80001242fde4>] el1_interrupt+0x58/0x68 arch/arm64/kernel/entry-common.c:486
    hardirqs last disabled at (172817): [<ffff80001242fdb0>] __el1_irq arch/arm64/kernel/entry-common.c:468 [inline]
    hardirqs last disabled at (172817): [<ffff80001242fdb0>] el1_interrupt+0x24/0x68 arch/arm64/kernel/entry-common.c:486
    softirqs last enabled at (167634): [<ffff800008020c1c>] softirq_handle_end kernel/softirq.c:414 [inline]
    softirqs last enabled at (167634): [<ffff800008020c1c>] __do_softirq+0xac0/0xd54 kernel/softirq.c:600
    softirqs last disabled at (167701): [<ffff80000802a660>] ____do_softirq+0x14/0x20 arch/arm64/kernel/irq.c:80
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 6.4.0-rc3-syzkaller-geb0f1697d729 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/28/2023
    pstate: 80400005 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : fq_pie_qdisc_dequeue+0x10c/0x8ac net/sched/sch_fq_pie.c:246
    lr : fq_pie_qdisc_dequeue+0xe4/0x8ac net/sched/sch_fq_pie.c:240
    sp : ffff800008007210
    x29: ffff800008007280 x28: ffff0000c86f7890 x27: ffff0000cb20c2e8
    x26: ffff0000cb20c2f0 x25: dfff800000000000 x24: ffff0000cb20c2e0
    x23: ffff0000c86f7880 x22: 0000000000000040 x21: 1fffe000190def10
    x20: ffff0000cb20c2e0 x19: ffff0000cb20c2e0 x18: ffff800008006e60
    x17: 0000000000000000 x16: ffff80000850af6c x15: 0000000000000302
    x14: 0000000000000100 x13: 0000000000000000 x12: 0000000000000001
    x11: 0000000000000302 x10: 0000000000000100 x9 : 0000000000000000
    x8 : 0000000000000000 x7 : ffff80000841c468 x6 : 0000000000000000
    x5 : 0000000000000001 x4 : 0000000000000001 x3 : 0000000000000000
    x2 : ffff0000cb20c2e0 x1 : ffff0000cb20c2e0 x0 : 0000000000000001
    Call trace:
    fq_pie_qdisc_dequeue+0x10c/0x8ac net/sched/sch_fq_pie.c:246
    dequeue_skb net/sched/sch_generic.c:292 [inline]
    qdisc_restart net/sched/sch_generic.c:397 [inline]
    __qdisc_run+0x1fc/0x231c net/sched/sch_generic.c:415
    __dev_xmit_skb net/core/dev.c:3868 [inline]
    __dev_queue_xmit+0xc80/0x3318 net/core/dev.c:4210
    dev_queue_xmit include/linux/netdevice.h:3085 [inline]
    neigh_connected_output+0x2f8/0x38c net/core/neighbour.c:1581
    neigh_output include/net/neighbour.h:544 [inline]
    ip6_finish_output2+0xd60/0x1a1c net/ipv6/ip6_output.c:134
    __ip6_finish_output net/ipv6/ip6_output.c:195 [inline]
    ip6_finish_output+0x538/0x8c8 net/ipv6/ip6_output.c:206
    NF_HOOK_COND include/linux/netfilter.h:292 [inline]
    ip6_output+0x270/0x594 net/ipv6/ip6_output.c:227
    dst_output include/net/dst.h:458 [inline]
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ndisc_send_skb+0xc30/0x1790 net/ipv6/ndisc.c:508
    ndisc_send_rs+0x47c/0x5d4 net/ipv6/ndisc.c:718
    addrconf_rs_timer+0x300/0x58c net/ipv6/addrconf.c:3936
    call_timer_fn+0x19c/0x8cc kernel/time/timer.c:1700
    expire_timers kernel/time/timer.c:1751 [inline]
    __run_timers+0x55c/0x734 kernel/time/timer.c:2022
    run_timer_softirq+0x7c/0x114 kernel/time/timer.c:2035
    __do_softirq+0x2d0/0xd54 kernel/softirq.c:571
    ____do_softirq+0x14/0x20 arch/arm64/kernel/irq.c:80
    call_on_irq_stack+0x24/0x4c arch/arm64/kernel/entry.S:882
    do_softirq_own_stack+0x20/0x2c arch/arm64/kernel/irq.c:85
    invoke_softirq kernel/softirq.c:452 [inline]
    __irq_exit_rcu+0x28c/0x534 kernel/softirq.c:650
    irq_exit_rcu+0x14/0x84 kernel/softirq.c:662
    __el1_irq arch/arm64/kernel/entry-common.c:472 [inline]
    el1_interrupt+0x38/0x68 arch/arm64/kernel/entry-common.c:486
    el1h_64_irq_handler+0x18/0x24 arch/arm64/kernel/entry-common.c:491
    el1h_64_irq+0x64/0x68 arch/arm64/kernel/entry.S:587
    __daif_local_irq_enable arch/arm64/include/asm/irqflags.h:33 [inline]
    arch_local_irq_enable+0x8/0xc arch/arm64/include/asm/irqflags.h:55
    cpuidle_idle_call kernel/sched/idle.c:170 [inline]
    do_idle+0x1f0/0x4e8 kernel/sched/idle.c:282
    cpu_startup_entry+0x24/0x28 kernel/sched/idle.c:379
    rest_init+0x2dc/0x2f4 init/main.c:735
    start_kernel+0x0/0x55c init/main.c:834
    start_kernel+0x3f0/0x55c init/main.c:1088
    __primary_switched+0xb8/0xc0 arch/arm64/kernel/head.S:523
    
    Fixes: ec97ecf1ebe4 ("net: sched: add Flow Queue PIE packet scheduler")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a22c0a03463075e75464ec627fb6175eaa6a263b
Author: Wei Fang <wei.fang@nxp.com>
Date:   Fri Jun 2 17:46:59 2023 +0800

    net: enetc: correct rx_bytes statistics of XDP
    
    [ Upstream commit fdebd850cc065495abf1d64756496050bb22db67 ]
    
    The rx_bytes statistics of XDP are always zero, because rx_byte_cnt
    is not updated after it is initialized to 0. So fix it.
    
    Fixes: d1b15102dd16 ("net: enetc: add support for XDP_DROP and XDP_PASS")
    Signed-off-by: Wei Fang <wei.fang@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3fc768a746bf5da0bffe9a1d525c61a3208b56c
Author: Wei Fang <wei.fang@nxp.com>
Date:   Fri Jun 2 17:46:58 2023 +0800

    net: enetc: correct the statistics of rx bytes
    
    [ Upstream commit 7190d0ff0e17690a9b1279d84a06473600ba2060 ]
    
    The rx_bytes of struct net_device_stats should count the length of
    ethernet frames excluding the FCS. However, there are two problems
    with the rx_bytes statistics of the current enetc driver. one is
    that the length of VLAN header is not counted if the VLAN extraction
    feature is enabled. The other is that the length of L2 header is not
    counted, because eth_type_trans() is invoked before updating rx_bytes
    which will subtract the length of L2 header from skb->len.
    BTW, the rx_bytes statistics of XDP path also have similar problem,
    I will fix it in another patch.
    
    Fixes: a800abd3ecb9 ("net: enetc: move skb creation into enetc_build_skb")
    Signed-off-by: Wei Fang <wei.fang@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a5cdd4bc1c3e53b101a0cfa949a30bc7582e6c6
Author: Wen Gu <guwen@linux.alibaba.com>
Date:   Thu Jun 1 16:41:52 2023 +0800

    net/smc: Avoid to access invalid RMBs' MRs in SMCRv1 ADD LINK CONT
    
    [ Upstream commit c308e9ec004721a656c193243eab61a8be324657 ]
    
    SMCRv1 has a similar issue to SMCRv2 (see link below) that may access
    invalid MRs of RMBs when construct LLC ADD LINK CONT messages.
    
     BUG: kernel NULL pointer dereference, address: 0000000000000014
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 0 P4D 0
     Oops: 0000 [#1] PREEMPT SMP PTI
     CPU: 5 PID: 48 Comm: kworker/5:0 Kdump: loaded Tainted: G W   E      6.4.0-rc3+ #49
     Workqueue: events smc_llc_add_link_work [smc]
     RIP: 0010:smc_llc_add_link_cont+0x160/0x270 [smc]
     RSP: 0018:ffffa737801d3d50 EFLAGS: 00010286
     RAX: ffff964f82144000 RBX: ffffa737801d3dd8 RCX: 0000000000000000
     RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff964f81370c30
     RBP: ffffa737801d3dd4 R08: ffff964f81370000 R09: ffffa737801d3db0
     R10: 0000000000000001 R11: 0000000000000060 R12: ffff964f82e70000
     R13: ffff964f81370c38 R14: ffffa737801d3dd3 R15: 0000000000000001
     FS:  0000000000000000(0000) GS:ffff9652bfd40000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000014 CR3: 000000008fa20004 CR4: 00000000003706e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      smc_llc_srv_rkey_exchange+0xa7/0x190 [smc]
      smc_llc_srv_add_link+0x3ae/0x5a0 [smc]
      smc_llc_add_link_work+0xb8/0x140 [smc]
      process_one_work+0x1e5/0x3f0
      worker_thread+0x4d/0x2f0
      ? __pfx_worker_thread+0x10/0x10
      kthread+0xe5/0x120
      ? __pfx_kthread+0x10/0x10
      ret_from_fork+0x2c/0x50
      </TASK>
    
    When an alernate RNIC is available in system, SMC will try to add a new
    link based on the RNIC for resilience. All the RMBs in use will be mapped
    to the new link. Then the RMBs' MRs corresponding to the new link will
    be filled into LLC messages. For SMCRv1, they are ADD LINK CONT messages.
    
    However smc_llc_add_link_cont() may mistakenly access to unused RMBs which
    haven't been mapped to the new link and have no valid MRs, thus causing a
    crash. So this patch fixes it.
    
    Fixes: 87f88cda2128 ("net/smc: rkey processing for a new link as SMC client")
    Link: https://lore.kernel.org/r/1685101741-74826-3-git-send-email-guwen@linux.alibaba.com
    Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76e38e6e1b35e9ae845a353dbcb3282af768a85a
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jun 1 16:04:44 2023 +0000

    net/ipv6: fix bool/int mismatch for skip_notify_on_dev_down
    
    [ Upstream commit edf2e1d2019b2730d6076dbe4c040d37d7c10bbe ]
    
    skip_notify_on_dev_down ctl table expects this field
    to be an int (4 bytes), not a bool (1 byte).
    
    Because proc_dou8vec_minmax() was added in 5.13,
    this patch converts skip_notify_on_dev_down to an int.
    
    Following patch then converts the field to u8 and use proc_dou8vec_minmax().
    
    Fixes: 7c6bb7d2faaf ("net/ipv6: Add knob to skip DELROUTE message on device down")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Acked-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3849e7fcea20850ede97f3b288674f6451d32846
Author: Rhys Rustad-Elliott <me@rhysre.net>
Date:   Fri Jun 2 19:02:02 2023 +0000

    bpf: Fix elem_size not being set for inner maps
    
    [ Upstream commit cba41bb78d70aad98d8e61e019fd48c561f7f396 ]
    
    Commit d937bc3449fa ("bpf: make uniform use of array->elem_size
    everywhere in arraymap.c") changed array_map_gen_lookup to use
    array->elem_size instead of round_up(map->value_size, 8) as the element
    size when generating code to access a value in an array map.
    
    array->elem_size, however, is not set by bpf_map_meta_alloc when
    initializing an BPF_MAP_TYPE_ARRAY_OF_MAPS or BPF_MAP_TYPE_HASH_OF_MAPS.
    This results in array_map_gen_lookup incorrectly outputting code that
    always accesses index 0 in the array (as the index will be calculated
    via a multiplication with the element size, which is incorrectly set to
    0).
    
    Set elem_size on the bpf_array object when allocating an array or hash
    of maps to fix this.
    
    Fixes: d937bc3449fa ("bpf: make uniform use of array->elem_size everywhere in arraymap.c")
    Signed-off-by: Rhys Rustad-Elliott <me@rhysre.net>
    Link: https://lore.kernel.org/r/20230602190110.47068-2-me@rhysre.net
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7612a922b210635ca9442cb00c6a3cf5aac643e
Author: KP Singh <kpsingh@kernel.org>
Date:   Fri Jun 2 02:26:12 2023 +0200

    bpf: Fix UAF in task local storage
    
    [ Upstream commit b0fd1852bcc21accca6260ef245356d5c141ff66 ]
    
    When task local storage was generalized for tracing programs, the
    bpf_task_local_storage callback was moved from a BPF LSM hook
    callback for security_task_free LSM hook to it's own callback. But a
    failure case in bad_fork_cleanup_security was missed which, when
    triggered, led to a dangling task owner pointer and a subsequent
    use-after-free. Move the bpf_task_storage_free to the very end of
    free_task to handle all failure cases.
    
    This issue was noticed when a BPF LSM program was attached to the
    task_alloc hook on a kernel with KASAN enabled. The program used
    bpf_task_storage_get to copy the task local storage from the current
    task to the new task being created.
    
    Fixes: a10787e6d58c ("bpf: Enable task local storage for tracing programs")
    Reported-by: Kuba Piecuch <jpiecuch@google.com>
    Signed-off-by: KP Singh <kpsingh@kernel.org>
    Acked-by: Song Liu <song@kernel.org>
    Link: https://lore.kernel.org/r/20230602002612.1117381-1-kpsingh@kernel.org
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9166225c3b2d04c6a3d93cb8b699c943f26fd570
Author: Akihiro Suda <suda.gitsendemail@gmail.com>
Date:   Thu Jun 1 12:13:05 2023 +0900

    net/ipv4: ping_group_range: allow GID from 2147483648 to 4294967294
    
    [ Upstream commit e209fee4118fe9a449d4d805361eb2de6796be39 ]
    
    With this commit, all the GIDs ("0 4294967294") can be written to the
    "net.ipv4.ping_group_range" sysctl.
    
    Note that 4294967295 (0xffffffff) is an invalid GID (see gid_valid() in
    include/linux/uidgid.h), and an attempt to register this number will cause
    -EINVAL.
    
    Prior to this commit, only up to GID 2147483647 could be covered.
    Documentation/networking/ip-sysctl.rst had "0 4294967295" as an example
    value, but this example was wrong and causing -EINVAL.
    
    Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
    Co-developed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Akihiro Suda <akihiro.suda.cz@hco.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 332f36a09c4c8035c3365ddc7dd64eee280c483c
Author: Alexander Sverdlin <alexander.sverdlin@siemens.com>
Date:   Wed May 31 16:38:26 2023 +0200

    net: dsa: lan9303: allow vid != 0 in port_fdb_{add|del} methods
    
    [ Upstream commit 5a59a58ec25d44f853c26bdbfda47d73b3067435 ]
    
    LAN9303 doesn't associate FDB (ALR) entries with VLANs, it has just one
    global Address Logic Resolution table [1].
    
    Ignore VID in port_fdb_{add|del} methods, go on with the global table. This
    is the same semantics as hellcreek or RZ/N1 implement.
    
    Visible symptoms:
    LAN9303_MDIO 5b050000.ethernet-1:00: port 2 failed to delete 00:xx:xx:xx:xx:cf vid 1 from fdb: -2
    LAN9303_MDIO 5b050000.ethernet-1:00: port 2 failed to add 00:xx:xx:xx:xx:cf vid 1 to fdb: -95
    
    [1] https://ww1.microchip.com/downloads/en/DeviceDoc/00002308A.pdf
    
    Fixes: 0620427ea0d6 ("net: dsa: lan9303: Add fdb/mdb manipulation")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@siemens.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20230531143826.477267-1-alexander.sverdlin@siemens.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8af3119388c432b0133a068185b7664f24da4495
Author: Qingfang DENG <qingfang.deng@siflower.com.cn>
Date:   Thu Jun 1 09:54:32 2023 +0800

    neighbour: fix unaligned access to pneigh_entry
    
    [ Upstream commit ed779fe4c9b5a20b4ab4fd6f3e19807445bb78c7 ]
    
    After the blamed commit, the member key is longer 4-byte aligned. On
    platforms that do not support unaligned access, e.g., MIPS32R2 with
    unaligned_action set to 1, this will trigger a crash when accessing
    an IPv6 pneigh_entry, as the key is cast to an in6_addr pointer.
    
    Change the type of the key to u32 to make it aligned.
    
    Fixes: 62dd93181aaa ("[IPV6] NDISC: Set per-entry is_router flag in Proxy NA.")
    Signed-off-by: Qingfang DENG <qingfang.deng@siflower.com.cn>
    Link: https://lore.kernel.org/r/20230601015432.159066-1-dqfext@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 898c9a0ee715e712a8fbb969443926d600e64635
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 30 19:51:49 2023 +0000

    bpf, sockmap: Avoid potential NULL dereference in sk_psock_verdict_data_ready()
    
    [ Upstream commit b320a45638296b63be8d9a901ca8bc43716b1ae1 ]
    
    syzbot found sk_psock(sk) could return NULL when called
    from sk_psock_verdict_data_ready().
    
    Just make sure to handle this case.
    
    [1]
    general protection fault, probably for non-canonical address 0xdffffc000000005c: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x00000000000002e0-0x00000000000002e7]
    CPU: 0 PID: 15 Comm: ksoftirqd/0 Not tainted 6.4.0-rc3-syzkaller-00588-g4781e965e655 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/16/2023
    RIP: 0010:sk_psock_verdict_data_ready+0x19f/0x3c0 net/core/skmsg.c:1213
    Code: 4c 89 e6 e8 63 70 5e f9 4d 85 e4 75 75 e8 19 74 5e f9 48 8d bb e0 02 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 07 02 00 00 48 89 ef ff 93 e0 02 00 00 e8 29 fd
    RSP: 0018:ffffc90000147688 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000100
    RDX: 000000000000005c RSI: ffffffff8825ceb7 RDI: 00000000000002e0
    RBP: ffff888076518c40 R08: 0000000000000007 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000008000 R15: ffff888076518c40
    FS: 0000000000000000(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f901375bab0 CR3: 000000004bf26000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    tcp_data_ready+0x10a/0x520 net/ipv4/tcp_input.c:5006
    tcp_data_queue+0x25d3/0x4c50 net/ipv4/tcp_input.c:5080
    tcp_rcv_established+0x829/0x1f90 net/ipv4/tcp_input.c:6019
    tcp_v4_do_rcv+0x65a/0x9c0 net/ipv4/tcp_ipv4.c:1726
    tcp_v4_rcv+0x2cbf/0x3340 net/ipv4/tcp_ipv4.c:2148
    ip_protocol_deliver_rcu+0x9f/0x480 net/ipv4/ip_input.c:205
    ip_local_deliver_finish+0x2ec/0x520 net/ipv4/ip_input.c:233
    NF_HOOK include/linux/netfilter.h:303 [inline]
    NF_HOOK include/linux/netfilter.h:297 [inline]
    ip_local_deliver+0x1ae/0x200 net/ipv4/ip_input.c:254
    dst_input include/net/dst.h:468 [inline]
    ip_rcv_finish+0x1cf/0x2f0 net/ipv4/ip_input.c:449
    NF_HOOK include/linux/netfilter.h:303 [inline]
    NF_HOOK include/linux/netfilter.h:297 [inline]
    ip_rcv+0xae/0xd0 net/ipv4/ip_input.c:569
    __netif_receive_skb_one_core+0x114/0x180 net/core/dev.c:5491
    __netif_receive_skb+0x1f/0x1c0 net/core/dev.c:5605
    process_backlog+0x101/0x670 net/core/dev.c:5933
    __napi_poll+0xb7/0x6f0 net/core/dev.c:6499
    napi_poll net/core/dev.c:6566 [inline]
    net_rx_action+0x8a9/0xcb0 net/core/dev.c:6699
    __do_softirq+0x1d4/0x905 kernel/softirq.c:571
    run_ksoftirqd kernel/softirq.c:939 [inline]
    run_ksoftirqd+0x31/0x60 kernel/softirq.c:931
    smpboot_thread_fn+0x659/0x9e0 kernel/smpboot.c:164
    kthread+0x344/0x440 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    </TASK>
    
    Fixes: 6df7f764cd3c ("bpf, sockmap: Wake up polling after data copy")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20230530195149.68145-1-edumazet@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e783f639b8fb8e380d731409766545c0bb5f76c1
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Wed May 24 16:39:32 2023 +0200

    wifi: mt76: mt7615: fix possible race in mt7615_mac_sta_poll
    
    [ Upstream commit 30bc32c7c1f975cc3c14e1c7dc437266311282cf ]
    
    Grab sta_poll_lock spinlock in mt7615_mac_sta_poll routine in order to
    avoid possible races with mt7615_mac_add_txs() or mt7615_mac_fill_rx()
    removing msta pointer from sta_poll_list.
    
    Fixes: a621372a04ac ("mt76: mt7615: rework mt7615_mac_sta_poll for usb code")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/48b23404b759de4f1db2ef85975c72a4aeb1097c.1684938695.git.lorenzo@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84c699681a2933ca47adc4aa6d93b3264150afb4
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jun 7 09:47:13 2023 +0100

    afs: Fix setting of mtime when creating a file/dir/symlink
    
    [ Upstream commit a27648c742104a833a01c54becc24429898d85bf ]
    
    kafs incorrectly passes a zero mtime (ie. 1st Jan 1970) to the server when
    creating a file, dir or symlink because the mtime recorded in the
    afs_operation struct gets passed to the server by the marshalling routines,
    but the afs_mkdir(), afs_create() and afs_symlink() functions don't set it.
    
    This gets masked if a file or directory is subsequently modified.
    
    Fix this by filling in op->mtime before calling the create op.
    
    Fixes: e49c7b2f6de7 ("afs: Build an abstraction around an "operation" concept")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeffrey Altman <jaltman@auristor.com>
    Reviewed-by: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    cc: linux-fsdevel@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb7058dd0249e13c3b9654f415908289b62434e3
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Thu May 18 15:04:25 2023 +0200

    spi: qup: Request DMA before enabling clocks
    
    [ Upstream commit 0c331fd1dccfba657129380ee084b95c1cedfbef ]
    
    It is usually better to request all necessary resources (clocks,
    regulators, ...) before starting to make use of them. That way they do
    not change state in case one of the resources is not available yet and
    probe deferral (-EPROBE_DEFER) is necessary. This is particularly
    important for DMA channels and IOMMUs which are not enforced by
    fw_devlink yet (unless you use fw_devlink.strict=1).
    
    spi-qup does this in the wrong order, the clocks are enabled and
    disabled again when the DMA channels are not available yet.
    
    This causes issues in some cases: On most SoCs one of the SPI QUP
    clocks is shared with the UART controller. When using earlycon UART is
    actively used during boot but might not have probed yet, usually for
    the same reason (waiting for the DMA controller). In this case, the
    brief enable/disable cycle ends up gating the clock and further UART
    console output will halt the system completely.
    
    Avoid this by requesting the DMA channels before changing the clock
    state.
    
    Fixes: 612762e82ae6 ("spi: qup: Add DMA capabilities")
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20230518-spi-qup-clk-defer-v1-1-f49fc9ca4e02@gerhold.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec2e12b14aa08b13cac1bd4b311a29ca2d3e4da9
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Thu May 25 23:32:17 2023 +0200

    platform/surface: aggregator_tabletsw: Add support for book mode in KIP subsystem
    
    [ Upstream commit 9bed667033e66083d363a11e9414ad401ecc242c ]
    
    Devices with a type-cover have an additional "book" mode, deactivating
    type-cover input and turning off its backlight. This is currently
    unsupported, leading to the warning
    
      surface_aggregator_tablet_mode_switch 01:0e:01:00:01: unknown KIP cover state: 6
    
    Therefore, add support for this state and map it to enable tablet-mode.
    
    Fixes: 9f794056db5b ("platform/surface: Add KIP/POS tablet-mode switch driver")
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20230525213218.2797480-2-luzmaximilian@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24845da026b8696134aa491339fdc6eecd19d466
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Thu May 25 23:01:10 2023 +0200

    platform/surface: aggregator: Allow completion work-items to be executed in parallel
    
    [ Upstream commit 539e0a7f9105d19c00629c3f4da00330488e8c60 ]
    
    Currently, event completion work-items are restricted to be run strictly
    in non-parallel fashion by the respective workqueue. However, this has
    lead to some problems:
    
    In some instances, the event notifier function called inside this
    completion workqueue takes a non-negligible amount of time to execute.
    One such example is the battery event handling code (surface_battery.c),
    which can result in a full battery information refresh, involving
    further synchronous communication with the EC inside the event handler.
    This is made worse if the communication fails spuriously, generally
    incurring a multi-second timeout.
    
    Since the event completions are run strictly non-parallel, this blocks
    other events from being propagated to the respective subsystems. This
    becomes especially noticeable for keyboard and touchpad input, which
    also funnel their events through this system. Here, users have reported
    occasional multi-second "freezes".
    
    Note, however, that the event handling system was never intended to run
    purely sequentially. Instead, we have one work struct per EC/SAM
    subsystem, processing the event queue for that subsystem. These work
    structs were intended to run in parallel, allowing sequential processing
    of work items for each subsystem but parallel processing of work items
    across subsystems.
    
    The only restriction to this is the way the workqueue is created.
    Therefore, replace create_workqueue() with alloc_workqueue() and do not
    restrict the maximum number of parallel work items to be executed on
    that queue, resolving any cross-subsystem blockage.
    
    Fixes: c167b9c7e3d6 ("platform/surface: Add Surface Aggregator subsystem")
    Link: https://github.com/linux-surface/linux-surface/issues/1026
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20230525210110.2785470-1-luzmaximilian@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31c3de5f7b705909979f05ac2d9c77230c589d36
Author: Daniel Golle <daniel@makrotopia.org>
Date:   Mon May 1 19:33:14 2023 +0100

    spi: mt65xx: make sure operations completed before unloading
    
    [ Upstream commit 4be47a5d59cbc9396a6ffd327913eb4c8d67a32f ]
    
    When unloading the spi-mt65xx kernel module during an ongoing spi-mem
    operation the kernel will Oops shortly after unloading the module.
    This is because wait_for_completion_timeout was still running and
    returning into the no longer loaded module:
    
    Internal error: Oops: 0000000096000005 [#1] SMP
    Modules linked in: [many, but spi-mt65xx is no longer there]
    CPU: 0 PID: 2578 Comm: block Tainted: G        W  O       6.3.0-next-20230428+ #0
    Hardware name: Bananapi BPI-R3 (DT)
    pstate: 804000c5 (Nzcv daIF +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : __lock_acquire+0x18c/0x20e8
    lr : __lock_acquire+0x9b8/0x20e8
    sp : ffffffc009ec3400
    x29: ffffffc009ec3400 x28: 0000000000000001 x27: 0000000000000004
    x26: ffffff80082888c8 x25: 0000000000000000 x24: 0000000000000000
    x23: ffffffc009609da8 x22: ffffff8008288000 x21: ffffff8008288968
    x20: 00000000000003c2 x19: ffffff8008be7990 x18: 00000000000002af
    x17: 0000000000000000 x16: 0000000000000000 x15: ffffffc008d78970
    x14: 000000000000080d x13: 00000000000002af x12: 00000000ffffffea
    x11: 00000000ffffefff x10: ffffffc008dd0970 x9 : ffffffc008d78918
    x8 : 0000000000017fe8 x7 : 0000000000000001 x6 : 0000000000000000
    x5 : ffffff807fb53910 x4 : 0000000000000000 x3 : 0000000000000027
    x2 : 0000000000000027 x1 : 0000000000000000 x0 : 00000000000c03c2
    Call trace:
     __lock_acquire+0x18c/0x20e8
     lock_acquire+0x100/0x2a4
     _raw_spin_lock_irq+0x58/0x74
     __wait_for_common+0xe0/0x1b4
     wait_for_completion_timeout+0x1c/0x24
     0xffffffc000acc8a4 <--- used to be mtk_spi_transfer_wait
     spi_mem_exec_op+0x390/0x3ec
     spi_mem_no_dirmap_read+0x6c/0x88
     spi_mem_dirmap_read+0xcc/0x12c
     spinand_read_page+0xf8/0x1dc
     spinand_mtd_read+0x1b4/0x2fc
     mtd_read_oob_std+0x58/0x7c
     mtd_read_oob+0x8c/0x148
     mtd_read+0x50/0x6c
     ...
    
    Prevent this by completing in mtk_spi_remove if needed.
    
    Fixes: 9f763fd20da7 ("spi: mediatek: add spi memory support for ipm design")
    Signed-off-by: Daniel Golle <daniel@makrotopia.org>
    Link: https://lore.kernel.org/r/ZFAF6pJxMu1z6k4w@makrotopia.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 097acf0aa622bf10714a9134e2bfc508cd37ac03
Author: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
Date:   Fri Mar 17 07:28:00 2023 +0000

    net: sfp: fix state loss when updating state_hw_mask
    
    commit 04361b8bb81819efb68bf39c276025e2250ac537 upstream.
    
    Andrew reports that the SFF modules on one of the ZII platforms do not
    indicate link up due to the SFP code believing that LOS indicating that
    there is no signal being received from the remote end, but in fact the
    LOS signal is showing that there is signal.
    
    What makes SFF modules different from SFPs is they typically have an
    inverted LOS, which uncovered this issue. When we read the hardware
    state, we mask it with state_hw_mask so we ignore anything we're not
    interested in. However, we don't re-read when state_hw_mask changes,
    leading to sfp->state being stale.
    
    Arrange for a software poll of the module state after we have parsed
    the EEPROM in sfp_sm_mod_probe() and updated state_*_mask. This will
    generate any necessary events for signal changes for the state
    machine as well as updating sfp->state.
    
    Reported-by: Andrew Lunn <andrew@lunn.ch>
    Tested-by: Andrew Lunn <andrew@lunn.ch>
    Fixes: 8475c4b70b04 ("net: sfp: re-implement soft state polling setup")
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec3ce2c7cf8d68424ddc40ea5480c303b4a32f4f
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Jan 5 21:32:00 2023 -0800

    scsi: megaraid_sas: Add flexible array member for SGLs
    
    commit a9a3629592ab7442a2e9d40281420b51c453ea9b upstream.
    
    struct MPI2_RAID_SCSI_IO_REQUEST ends with a single SGL, but expects to
    copy multiple. Add a flexible array member so the compiler can reason about
    the size of the memcpy(). This will avoid the run-time false positive
    warning:
    
      memcpy: detected field-spanning write (size 128) of single field "&r1_cmd->io_request->SGL" at drivers/scsi/megaraid/megaraid_sas_fusion.c:3326 (size 16)
    
    This change results in no binary output differences.
    
    Reported-by: Holger Kiehl <Holger.Kiehl@dwd.de>
    Link: https://lore.kernel.org/all/88de8faa-56c4-693d-2d3-67152ee72057@diagnostix.dwd.de/
    Cc: Kashyap Desai <kashyap.desai@broadcom.com>
    Cc: Sumit Saxena <sumit.saxena@broadcom.com>
    Cc: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
    Cc: "James E.J. Bottomley" <jejb@linux.ibm.com>
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Cc: megaraidlinux.pdl@broadcom.com
    Cc: linux-scsi@vger.kernel.org
    Link: https://lore.kernel.org/r/20230106053153.never.999-kees@kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Tested-by: Holger Kiehl <Holger.Kiehl@dwd.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

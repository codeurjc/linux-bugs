commit 4af60700a60cc45ee4fb6d579cccf1b7bca20c34
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 28 10:29:53 2023 +0200

    Linux 5.15.119
    
    Link: https://lore.kernel.org/r/20230626180746.943455203@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10fbd2e04e400f5eb0b85207cb441d37709e583c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 28 07:56:26 2023 +0200

    act_mirred: remove unneded merge conflict markers
    
    In commit 169a41073993 ("act_mirred: use the backlog for nested calls to mirred
    ingress"), a merge conflict marker snuck in, so remove it.
    
    Reported-by: Bart Van Assche <bvanassche@google.com>
    Fixes: 169a41073993 ("act_mirred: use the backlog for nested calls to mirred ingress")
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2230b3f874d9ee3fea33115f2118fcfc290867cb
Author: Clark Wang <xiaoning.wang@nxp.com>
Date:   Mon May 29 16:02:51 2023 +0800

    i2c: imx-lpi2c: fix type char overflow issue when calculating the clock cycle
    
    [ Upstream commit e69b9bc170c6d93ee375a5cbfd15f74c0fb59bdd ]
    
    Claim clkhi and clklo as integer type to avoid possible calculation
    errors caused by data overflow.
    
    Fixes: a55fa9d0e42e ("i2c: imx-lpi2c: add low power i2c bus driver")
    Signed-off-by: Clark Wang <xiaoning.wang@nxp.com>
    Signed-off-by: Carlos Song <carlos.song@nxp.com>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 907a069ec38fa799b698a3cd820ef4cd4ded3223
Author: Dheeraj Kumar Srivastava <dheerajkumar.srivastava@amd.com>
Date:   Sat Jun 17 02:52:36 2023 +0530

    x86/apic: Fix kernel panic when booting with intremap=off and x2apic_phys
    
    [ Upstream commit 85d38d5810e285d5aec7fb5283107d1da70c12a9 ]
    
    When booting with "intremap=off" and "x2apic_phys" on the kernel command
    line, the physical x2APIC driver ends up being used even when x2APIC
    mode is disabled ("intremap=off" disables x2APIC mode). This happens
    because the first compound condition check in x2apic_phys_probe() is
    false due to x2apic_mode == 0 and so the following one returns true
    after default_acpi_madt_oem_check() having already selected the physical
    x2APIC driver.
    
    This results in the following panic:
    
       kernel BUG at arch/x86/kernel/apic/io_apic.c:2409!
       invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
       CPU: 0 PID: 0 Comm: swapper/0 Not tainted 6.4.0-rc2-ver4.1rc2 #2
       Hardware name: Dell Inc. PowerEdge R6515/07PXPY, BIOS 2.3.6 07/06/2021
       RIP: 0010:setup_IO_APIC+0x9c/0xaf0
       Call Trace:
        <TASK>
        ? native_read_msr
        apic_intr_mode_init
        x86_late_time_init
        start_kernel
        x86_64_start_reservations
        x86_64_start_kernel
        secondary_startup_64_no_verify
        </TASK>
    
    which is:
    
    setup_IO_APIC:
      apic_printk(APIC_VERBOSE, "ENABLING IO-APIC IRQs\n");
      for_each_ioapic(ioapic)
            BUG_ON(mp_irqdomain_create(ioapic));
    
    Return 0 to denote that x2APIC has not been enabled when probing the
    physical x2APIC driver.
    
      [ bp: Massage commit message heavily. ]
    
    Fixes: 9ebd680bd029 ("x86, apic: Use probe routines to simplify apic selection")
    Signed-off-by: Dheeraj Kumar Srivastava <dheerajkumar.srivastava@amd.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Reviewed-by: Kishon Vijay Abraham I <kvijayab@amd.com>
    Reviewed-by: Vasant Hegde <vasant.hegde@amd.com>
    Reviewed-by: Cyrill Gorcunov <gorcunov@gmail.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20230616212236.1389-1-dheerajkumar.srivastava@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7949f83f7ecc593ff98f5920046d299f140db058
Author: Andrey Smetanin <asmetanin@yandex-team.ru>
Date:   Mon Apr 24 23:44:11 2023 +0300

    vhost_net: revert upend_idx only on retriable error
    
    [ Upstream commit 1f5d2e3bab16369d5d4b4020a25db4ab1f4f082c ]
    
    Fix possible virtqueue used buffers leak and corresponding stuck
    in case of temporary -EIO from sendmsg() which is produced by
    tun driver while backend device is not up.
    
    In case of no-retriable error and zcopy do not revert upend_idx
    to pass packet data (that is update used_idx in corresponding
    vhost_zerocopy_signal_used()) as if packet data has been
    transferred successfully.
    
    v2: set vq->heads[ubuf->desc].len equal to VHOST_DMA_DONE_LEN
    in case of fake successful transmit.
    
    Signed-off-by: Andrey Smetanin <asmetanin@yandex-team.ru>
    Message-Id: <20230424204411.24888-1-asmetanin@yandex-team.ru>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Andrey Smetanin <asmetanin@yandex-team.ru>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdac0aa4a175069105ad79112ba99913b8be1167
Author: Min Li <lm0963hack@gmail.com>
Date:   Sat Jun 3 15:43:45 2023 +0800

    drm/radeon: fix race condition UAF in radeon_gem_set_domain_ioctl
    
    [ Upstream commit 982b173a6c6d9472730c3116051977e05d17c8c5 ]
    
    Userspace can race to free the gobj(robj converted from), robj should not
    be accessed again after drm_gem_object_put, otherwith it will result in
    use-after-free.
    
    Reviewed-by: Christian KÃ¶nig <christian.koenig@amd.com>
    Signed-off-by: Min Li <lm0963hack@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f012d3037c15401dd72d8717806311dc4c568ea8
Author: Min Li <lm0963hack@gmail.com>
Date:   Fri May 26 21:01:31 2023 +0800

    drm/exynos: fix race condition UAF in exynos_g2d_exec_ioctl
    
    [ Upstream commit 48bfd02569f5db49cc033f259e66d57aa6efc9a3 ]
    
    If it is async, runqueue_node is freed in g2d_runqueue_worker on another
    worker thread. So in extreme cases, if g2d_runqueue_worker runs first, and
    then executes the following if statement, there will be use-after-free.
    
    Signed-off-by: Min Li <lm0963hack@gmail.com>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a44b4230d2ba6a8f6245ee02667f4a39b2d568ea
Author: Inki Dae <inki.dae@samsung.com>
Date:   Fri May 19 08:55:05 2023 +0900

    drm/exynos: vidi: fix a wrong error return
    
    [ Upstream commit 4a059559809fd1ddbf16f847c4d2237309c08edf ]
    
    Fix a wrong error return by dropping an error return.
    
    When vidi driver is remvoed, if ctx->raw_edid isn't same as fake_edid_info
    then only what we have to is to free ctx->raw_edid so that driver removing
    can work correctly - it's not an error case.
    
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79b4125bce96175d740f8ea1194243e15a703cc8
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed May 10 12:51:56 2023 +0200

    ARM: dts: Fix erroneous ADS touchscreen polarities
    
    [ Upstream commit 4a672d500bfd6bb87092c33d5a2572c3d0a1cf83 ]
    
    Several device tree files get the polarity of the pendown-gpios
    wrong: this signal is active low. Fix up all incorrect flags, so
    that operating systems can rely on the flag being correctly set.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20230510105156.1134320-1-linus.walleij@linaro.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9684c4fdeeca4dac19c2618efd92b3f79132f58f
Author: Alexander Gordeev <agordeev@linux.ibm.com>
Date:   Thu May 25 19:41:45 2023 +0200

    s390/purgatory: disable branch profiling
    
    [ Upstream commit 03c5c83b70dca3729a3eb488e668e5044bd9a5ea ]
    
    Avoid linker error for randomly generated config file that
    has CONFIG_BRANCH_PROFILE_NONE enabled and make it similar
    to riscv, x86 and also to commit 4bf3ec384edf ("s390: disable
    branch profiling for vdso").
    
    Reviewed-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c4d87e9fa8a9d6960acb9d849ece1b3f3f5b7c0
Author: Edson Juliano Drosdeck <edson.drosdeck@gmail.com>
Date:   Mon May 29 15:19:11 2023 -0300

    ASoC: nau8824: Add quirk to active-high jack-detect
    
    [ Upstream commit e384dba03e3294ce7ea69e4da558e9bf8f0e8946 ]
    
    Add  entries for Positivo laptops: CW14Q01P, K1424G, N14ZP74G to the
    DMI table, so that  active-high jack-detect will work properly on
    these laptops.
    
    Signed-off-by: Edson Juliano Drosdeck <edson.drosdeck@gmail.com>
    Link: https://lore.kernel.org/r/20230529181911.632851-1-edson.drosdeck@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d77eac1b14e0cf3e1280ca54dd65e91678c656c7
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon May 15 15:48:59 2023 +0800

    soundwire: dmi-quirks: add new mapping for HP Spectre x360
    
    [ Upstream commit 700581ede41d029403feec935df4616309696fd7 ]
    
    A BIOS/DMI update seems to have broken some devices, let's add a new
    mapping.
    
    Link: https://github.com/thesofproject/linux/issues/4323
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20230515074859.3097-1-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53ad4af4ec909f3315f897eaae5a42642cf50bed
Author: Herve Codina <herve.codina@bootlin.com>
Date:   Tue May 23 17:12:22 2023 +0200

    ASoC: simple-card: Add missing of_node_put() in case of error
    
    [ Upstream commit 8938f75a5e35c597a647c28984a0304da7a33d63 ]
    
    In the error path, a of_node_put() for platform is missing.
    Just add it.
    
    Signed-off-by: Herve Codina <herve.codina@bootlin.com>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Link: https://lore.kernel.org/r/20230523151223.109551-9-herve.codina@bootlin.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb45dc7b67c5c162f40746e513078630d9802c53
Author: Clark Wang <xiaoning.wang@nxp.com>
Date:   Fri May 5 14:35:57 2023 +0800

    spi: lpspi: disable lpspi module irq in DMA mode
    
    [ Upstream commit 9728fb3ce11729aa8c276825ddf504edeb00611d ]
    
    When all bits of IER are set to 0, we still can observe the lpspi irq events
    when using DMA mode to transfer data.
    
    So disable irq to avoid the too much irq events.
    
    Signed-off-by: Clark Wang <xiaoning.wang@nxp.com>
    Link: https://lore.kernel.org/r/20230505063557.3962220-1-xiaoning.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8d9d8f1727d2fb3935b9aec4e1058ef55c9e477
Author: Vineeth Vijayan <vneethv@linux.ibm.com>
Date:   Thu May 4 20:53:20 2023 +0200

    s390/cio: unregister device when the only path is gone
    
    [ Upstream commit 89c0c62e947a01e7a36b54582fd9c9e346170255 ]
    
    Currently, if the device is offline and all the channel paths are
    either configured or varied offline, the associated subchannel gets
    unregistered. Don't unregister the subchannel, instead unregister
    offline device.
    
    Signed-off-by: Vineeth Vijayan <vneethv@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e10d15fdfcedba236adc4d250e6750e4a55a3873
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu May 11 11:57:04 2023 -0700

    Input: soc_button_array - add invalid acpi_index DMI quirk handling
    
    [ Upstream commit 20a99a291d564a559cc2fd013b4824a3bb3f1db7 ]
    
    Some devices have a wrong entry in their button array which points to
    a GPIO which is required in another driver, so soc_button_array must
    not claim it.
    
    A specific example of this is the Lenovo Yoga Book X90F / X90L,
    where the PNP0C40 home button entry points to a GPIO which is not
    a home button and which is required by the lenovo-yogabook driver.
    
    Add a DMI quirk table which can specify an ACPI GPIO resource index which
    should be skipped; and add an entry for the Lenovo Yoga Book X90F / X90L
    to this new DMI quirk table.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230414072116.4497-1-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26bde09a1512a8ad7e8f599a88f618c1b47b7cad
Author: Uday Shankar <ushankar@purestorage.com>
Date:   Thu May 25 12:22:02 2023 -0600

    nvme: double KA polling frequency to avoid KATO with TBKAS on
    
    [ Upstream commit ea4d453b9ec9ea279c39744cd0ecb47ef48ede35 ]
    
    With TBKAS on, the completion of one command can defer sending a
    keep alive for up to twice the delay between successive runs of
    nvme_keep_alive_work. The current delay of KATO / 2 thus makes it
    possible for one command to defer sending a keep alive for up to
    KATO, which can result in the controller detecting a KATO. The following
    trace demonstrates the issue, taking KATO = 8 for simplicity:
    
    1. t = 0: run nvme_keep_alive_work, no keep-alive sent
    2. t = Îµ: I/O completion seen, set comp_seen = true
    3. t = 4: run nvme_keep_alive_work, see comp_seen == true,
              skip sending keep-alive, set comp_seen = false
    4. t = 8: run nvme_keep_alive_work, see comp_seen == false,
              send a keep-alive command.
    
    Here, there is a delay of 8 - Îµ between receiving a command completion
    and sending the next command. With Îµ small, the controller is likely to
    detect a keep alive timeout.
    
    Fix this by running nvme_keep_alive_work with a delay of KATO / 4
    whenever TBKAS is on. Going through the above trace now gives us a
    worst-case delay of 4 - Îµ, which is in line with the recommendation of
    sending a command every KATO / 2 in the NVMe specification.
    
    Reported-by: Costa Sapuntzakis <costa@purestorage.com>
    Reported-by: Randy Jennings <randyj@purestorage.com>
    Signed-off-by: Uday Shankar <ushankar@purestorage.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3bbc148377dff5ec1695c969257b0f9004aa7d2
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Thu May 25 18:38:37 2023 +0300

    usb: gadget: udc: fix NULL dereference in remove()
    
    [ Upstream commit 016da9c65fec9f0e78c4909ed9a0f2d567af6775 ]
    
    The "udc" pointer was never set in the probe() function so it will
    lead to a NULL dereference in udc_pci_remove() when we do:
    
            usb_del_gadget_udc(&udc->gadget);
    
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/ZG+A/dNpFWAlCChk@kili
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cce681383d34dae8243484b19b9feaa51587e118
Author: Osama Muhammad <osmtendev@gmail.com>
Date:   Thu May 25 22:27:46 2023 +0500

    nfcsim.c: Fix error checking for debugfs_create_dir
    
    [ Upstream commit 9b9e46aa07273ceb96866b2e812b46f1ee0b8d2f ]
    
    This patch fixes the error checking in nfcsim.c.
    The DebugFS kernel API is developed in
    a way that the caller can safely ignore the errors that
    occur during the creation of DebugFS nodes.
    
    Signed-off-by: Osama Muhammad <osmtendev@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a5ddd1430d4e00d601f2f6b32968b46db51bc53
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Apr 24 16:07:28 2023 +0100

    media: cec: core: don't set last_initiator if tx in progress
    
    [ Upstream commit 73af6c7511038249cad3d5f3b44bf8d78ac0f499 ]
    
    When a message was received the last_initiator is set to 0xff.
    This will force the signal free time for the next transmit
    to that for a new initiator. However, if a new transmit is
    already in progress, then don't set last_initiator, since
    that's the initiator of the current transmit. Overwriting
    this would cause the signal free time of a following transmit
    to be that of the new initiator instead of a next transmit.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01cf989090da565b03bf787303da365397e2ad67
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon May 15 21:46:00 2023 +0100

    arm64: Add missing Set/Way CMO encodings
    
    [ Upstream commit 8d0f019e4c4f2ee2de81efd9bf1c27e9fb3c0460 ]
    
    Add the missing Set/Way CMOs that apply to tagged memory.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
    Link: https://lore.kernel.org/r/20230515204601.1270428-2-maz@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f97b16c0a5389ceb95a81e7102b9e6586eb89891
Author: Denis Arefev <arefev@swemel.ru>
Date:   Thu Apr 27 14:47:45 2023 +0300

    HID: wacom: Add error check to wacom_parse_and_register()
    
    [ Upstream commit 16a9c24f24fbe4564284eb575b18cc20586b9270 ]
    
       Added a variable check and
       transition in case of an error
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Signed-off-by: Denis Arefev <arefev@swemel.ru>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8bdb1f886996c66e5932181e2352af04d899d8e
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Mon May 8 18:22:19 2023 +0200

    scsi: target: iscsi: Prevent login threads from racing between each other
    
    [ Upstream commit 2a737d3b8c792400118d6cf94958f559de9c5e59 ]
    
    The tpg->np_login_sem is a semaphore that is used to serialize the login
    process when multiple login threads run concurrently against the same
    target portal group.
    
    The iscsi_target_locate_portal() function finds the tpg, calls
    iscsit_access_np() against the np_login_sem semaphore and saves the tpg
    pointer in conn->tpg;
    
    If iscsi_target_locate_portal() fails, the caller will check for the
    conn->tpg pointer and, if it's not NULL, then it will assume that
    iscsi_target_locate_portal() called iscsit_access_np() on the semaphore.
    
    Make sure that conn->tpg gets initialized only if iscsit_access_np() was
    successful, otherwise iscsit_deaccess_np() may end up being called against
    a semaphore we never took, allowing more than one thread to access the same
    tpg.
    
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Link: https://lore.kernel.org/r/20230508162219.1731964-4-mlombard@redhat.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cc379d53b665a7b25e96e784445274f683dcb9e
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue Jun 6 11:11:59 2023 +0800

    gpio: sifive: add missing check for platform_get_irq
    
    [ Upstream commit c1bcb976d8feb107ff2c12caaf12ac5e70f44d5f ]
    
    Add the missing check for platform_get_irq() and return error code
    if it fails.
    
    The returned error code will be dealed with in
    builtin_platform_driver(sifive_gpio_driver) and the driver will not
    be registered.
    
    Fixes: f52d6d8b43e5 ("gpio: sifive: To get gpio irq offset from device tree data")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 497d40140865aae8c89757d25d7a17cd6f59d1d2
Author: Jiawen Wu <jiawenwu@trustnetic.com>
Date:   Wed Jun 7 16:18:03 2023 +0800

    gpiolib: Fix GPIO chip IRQ initialization restriction
    
    [ Upstream commit 8c00914e5438e3636f26b4f814b3297ae2a1b9ee ]
    
    In case of gpio-regmap, IRQ chip is added by regmap-irq and associated with
    GPIO chip by gpiochip_irqchip_add_domain(). The initialization flag was not
    added in gpiochip_irqchip_add_domain(), causing gpiochip_to_irq() to return
    -EPROBE_DEFER.
    
    Fixes: 5467801f1fcb ("gpio: Restrict usage of GPIO chip irq members before initialization")
    Signed-off-by: Jiawen Wu <jiawenwu@trustnetic.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7973c4b3b97de1ef33334be444024c089f1d33aa
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Oct 26 18:58:11 2021 +0100

    gpio: Allow per-parent interrupt data
    
    [ Upstream commit cfe6807d82e97e81c3209dca9448f091e1448a57 ]
    
    The core gpiolib code is able to deal with multiple interrupt parents
    for a single gpio irqchip. It however only allows a single piece
    of data to be conveyed to all flow handlers (either the gpio_chip
    or some other, driver-specific data).
    
    This means that drivers have to go through some interesting dance
    to find the correct context, something that isn't great in interrupt
    context (see aebdc8abc9db86e2bd33070fc2f961012fff74b4 for a prime
    example).
    
    Instead, offer an optional way for a pinctrl/gpio driver to provide
    an array of pointers which gets used to provide the correct context
    to the flow handler.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Joey Gouly <joey.gouly@arm.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20211026175815.52703-2-joey.gouly@arm.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Stable-dep-of: 8c00914e5438 ("gpiolib: Fix GPIO chip IRQ initialization restriction")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1a2b52d999e9f7d31f2c7de459a2f3269d5fdf4
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 20 18:44:25 2023 +0000

    sch_netem: acquire qdisc lock in netem_change()
    
    [ Upstream commit 2174a08db80d1efeea382e25ac41c4e7511eb6d6 ]
    
    syzbot managed to trigger a divide error [1] in netem.
    
    It could happen if q->rate changes while netem_enqueue()
    is running, since q->rate is read twice.
    
    It turns out netem_change() always lacked proper synchronization.
    
    [1]
    divide error: 0000 [#1] SMP KASAN
    CPU: 1 PID: 7867 Comm: syz-executor.1 Not tainted 6.1.30-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/25/2023
    RIP: 0010:div64_u64 include/linux/math64.h:69 [inline]
    RIP: 0010:packet_time_ns net/sched/sch_netem.c:357 [inline]
    RIP: 0010:netem_enqueue+0x2067/0x36d0 net/sched/sch_netem.c:576
    Code: 89 e2 48 69 da 00 ca 9a 3b 42 80 3c 28 00 4c 8b a4 24 88 00 00 00 74 0d 4c 89 e7 e8 c3 4f 3b fd 48 8b 4c 24 18 48 89 d8 31 d2 <49> f7 34 24 49 01 c7 4c 8b 64 24 48 4d 01 f7 4c 89 e3 48 c1 eb 03
    RSP: 0018:ffffc9000dccea60 EFLAGS: 00010246
    RAX: 000001a442624200 RBX: 000001a442624200 RCX: ffff888108a4f000
    RDX: 0000000000000000 RSI: 000000000000070d RDI: 000000000000070d
    RBP: ffffc9000dcceb90 R08: ffffffff849c5e26 R09: fffffbfff10e1297
    R10: 0000000000000000 R11: dffffc0000000001 R12: ffff888108a4f358
    R13: dffffc0000000000 R14: 0000001a8cd9a7ec R15: 0000000000000000
    FS: 00007fa73fe18700(0000) GS:ffff8881f6b00000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fa73fdf7718 CR3: 000000011d36e000 CR4: 0000000000350ee0
    Call Trace:
    <TASK>
    [<ffffffff84714385>] __dev_xmit_skb net/core/dev.c:3931 [inline]
    [<ffffffff84714385>] __dev_queue_xmit+0xcf5/0x3370 net/core/dev.c:4290
    [<ffffffff84d22df2>] dev_queue_xmit include/linux/netdevice.h:3030 [inline]
    [<ffffffff84d22df2>] neigh_hh_output include/net/neighbour.h:531 [inline]
    [<ffffffff84d22df2>] neigh_output include/net/neighbour.h:545 [inline]
    [<ffffffff84d22df2>] ip_finish_output2+0xb92/0x10d0 net/ipv4/ip_output.c:235
    [<ffffffff84d21e63>] __ip_finish_output+0xc3/0x2b0
    [<ffffffff84d10a81>] ip_finish_output+0x31/0x2a0 net/ipv4/ip_output.c:323
    [<ffffffff84d10f14>] NF_HOOK_COND include/linux/netfilter.h:298 [inline]
    [<ffffffff84d10f14>] ip_output+0x224/0x2a0 net/ipv4/ip_output.c:437
    [<ffffffff84d123b5>] dst_output include/net/dst.h:444 [inline]
    [<ffffffff84d123b5>] ip_local_out net/ipv4/ip_output.c:127 [inline]
    [<ffffffff84d123b5>] __ip_queue_xmit+0x1425/0x2000 net/ipv4/ip_output.c:542
    [<ffffffff84d12fdc>] ip_queue_xmit+0x4c/0x70 net/ipv4/ip_output.c:556
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230620184425.1179809-1-edumazet@google.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3138c85031e8d1ffe07ebdbc9236388b1185474b
Author: Danielle Ratson <danieller@nvidia.com>
Date:   Tue Jun 20 14:45:15 2023 +0200

    selftests: forwarding: Fix race condition in mirror installation
    
    [ Upstream commit c7c059fba6fb19c3bc924925c984772e733cb594 ]
    
    When mirroring to a gretap in hardware the device expects to be
    programmed with the egress port and all the encapsulating headers. This
    requires the driver to resolve the path the packet will take in the
    software data path and program the device accordingly.
    
    If the path cannot be resolved (in this case because of an unresolved
    neighbor), then mirror installation fails until the path is resolved.
    This results in a race that causes the test to sometimes fail.
    
    Fix this by setting the neighbor's state to permanent in a couple of
    tests, so that it is always valid.
    
    Fixes: 35c31d5c323f ("selftests: forwarding: Test mirror-to-gretap w/ UL 802.1d")
    Fixes: 239e754af854 ("selftests: forwarding: Test mirror-to-gretap w/ UL 802.1q")
    Signed-off-by: Danielle Ratson <danieller@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Link: https://lore.kernel.org/r/268816ac729cb6028c7a34d4dda6f4ec7af55333.1687264607.git.petrm@nvidia.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7db41a865416c849b8140887dc9f87ca6666924
Author: Florent Revest <revest@chromium.org>
Date:   Thu Jun 15 16:56:07 2023 +0200

    bpf/btf: Accept function names that contain dots
    
    [ Upstream commit 9724160b3942b0a967b91a59f81da5593f28b8ba ]
    
    When building a kernel with LLVM=1, LLVM_IAS=0 and CONFIG_KASAN=y, LLVM
    leaves DWARF tags for the "asan.module_ctor" & co symbols. In turn,
    pahole creates BTF_KIND_FUNC entries for these and this makes the BTF
    metadata validation fail because they contain a dot.
    
    In a dramatic turn of event, this BTF verification failure can cause
    the netfilter_bpf initialization to fail, causing netfilter_core to
    free the netfilter_helper hashmap and netfilter_ftp to trigger a
    use-after-free. The risk of u-a-f in netfilter will be addressed
    separately but the existence of "asan.module_ctor" debug info under some
    build conditions sounds like a good enough reason to accept functions
    that contain dots in BTF.
    
    Although using only LLVM=1 is the recommended way to compile clang-based
    kernels, users can certainly do LLVM=1, LLVM_IAS=0 as well and we still
    try to support that combination according to Nick. To clarify:
    
      - > v5.10 kernel, LLVM=1 (LLVM_IAS=0 is not the default) is recommended,
        but user can still have LLVM=1, LLVM_IAS=0 to trigger the issue
    
      - <= 5.10 kernel, LLVM=1 (LLVM_IAS=0 is the default) is recommended in
        which case GNU as will be used
    
    Fixes: 1dc92851849c ("bpf: kernel side support for BTF Var and DataSec")
    Signed-off-by: Florent Revest <revest@chromium.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Cc: Yonghong Song <yhs@meta.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/bpf/20230615145607.3469985-1-revest@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f8d81254fd6c5b4400b31b40f6205eb4c21ba79
Author: Francesco Dolcini <francesco.dolcini@toradex.com>
Date:   Mon Jun 19 17:44:35 2023 +0200

    Revert "net: phy: dp83867: perform soft reset and retain established link"
    
    [ Upstream commit a129b41fe0a8b4da828c46b10f5244ca07a3fec3 ]
    
    This reverts commit da9ef50f545f86ffe6ff786174d26500c4db737a.
    
    This fixes a regression in which the link would come up, but no
    communication was possible.
    
    The reverted commit was also removing a comment about
    DP83867_PHYCR_FORCE_LINK_GOOD, this is not added back in this commits
    since it seems that this is unrelated to the original code change.
    
    Closes: https://lore.kernel.org/all/ZGuDJos8D7N0J6Z2@francesco-nb.int.toradex.com/
    Fixes: da9ef50f545f ("net: phy: dp83867: perform soft reset and retain established link")
    Signed-off-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Praneeth Bajjuri <praneeth@ti.com>
    Link: https://lore.kernel.org/r/20230619154435.355485-1-francesco@dolcini.it
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57130334da4ec646b33733f92be43c30bc8933ad
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jun 15 10:14:25 2023 +0200

    netfilter: nfnetlink_osf: fix module autoload
    
    [ Upstream commit 62f9a68a36d4441a6c412b81faed102594bc6670 ]
    
    Move the alias from xt_osf to nfnetlink_osf.
    
    Fixes: f9324952088f ("netfilter: nfnetlink_osf: extract nfnetlink_subsystem code from xt_osf.c")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53defc6ecff4fc4189faa9ddcc1ae77eb6e31252
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Jun 16 15:22:01 2023 +0200

    netfilter: nf_tables: disallow updates of anonymous sets
    
    [ Upstream commit b770283c98e0eee9133c47bc03b6cc625dc94723 ]
    
    Disallow updates of set timeout and garbage collection parameters for
    anonymous sets.
    
    Fixes: 123b99619cca ("netfilter: nf_tables: honor set timeout and garbage collection updates")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f2f9eaa6da1b87145d1d12771acf0279ebf486d
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Jun 16 15:21:39 2023 +0200

    netfilter: nf_tables: reject unbound chain set before commit phase
    
    [ Upstream commit 62e1e94b246e685d89c3163aaef4b160e42ceb02 ]
    
    Use binding list to track set transaction and to check for unbound
    chains before entering the commit phase.
    
    Bail out if chain binding remain unused before entering the commit
    step.
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2938e7d582d7ae4b53ae4cd65d00000c04a11d0e
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Jun 16 15:21:33 2023 +0200

    netfilter: nf_tables: reject unbound anonymous set before commit phase
    
    [ Upstream commit 938154b93be8cd611ddfd7bafc1849f3c4355201 ]
    
    Add a new list to track set transaction and to check for unbound
    anonymous sets before entering the commit phase.
    
    Bail out at the end of the transaction handling if an anonymous set
    remains unbound.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit baa3ec1b31f512f4aa3ccd700b5304390c3b525f
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Jun 16 15:20:16 2023 +0200

    netfilter: nf_tables: disallow element updates of bound anonymous sets
    
    [ Upstream commit c88c535b592d3baeee74009f3eceeeaf0fdd5e1b ]
    
    Anonymous sets come with NFT_SET_CONSTANT from userspace. Although API
    allows to create anonymous sets without NFT_SET_CONSTANT, it makes no
    sense to allow to add and to delete elements for bound anonymous sets.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45eb6944d0f55102229115de040ef3a48841434a
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Jun 16 15:20:04 2023 +0200

    netfilter: nft_set_pipapo: .walk does not deal with generations
    
    [ Upstream commit 2b84e215f87443c74ac0aa7f76bb172d43a87033 ]
    
    The .walk callback iterates over the current active set, but it might be
    useful to iterate over the next generation set. Use the generation mask
    to determine what set view (either current or next generation) is use
    for the walk iteration.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4004f12aaca8e03e1a7d0e9b0d511b8a23fd6b1e
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Jun 16 14:45:26 2023 +0200

    netfilter: nf_tables: add NFT_TRANS_PREPARE_ERROR to deal with bound set/chain
    
    [ Upstream commit 26b5a5712eb85e253724e56a54c17f8519bd8e4e ]
    
    Add a new state to deal with rule expressions deactivation from the
    newrule error path, otherwise the anonymous set remains in the list in
    inactive state for the next generation. Mark the set/chain transaction
    as unbound so the abort path releases this object, set it as inactive in
    the next generation so it is not reachable anymore from this transaction
    and reference counter is dropped.
    
    Fixes: 1240eb93f061 ("netfilter: nf_tables: incorrect error path handling with NFT_MSG_NEWRULE")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 314a8697d08092df6d00521450d44c352c602943
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Jun 16 14:45:22 2023 +0200

    netfilter: nf_tables: fix chain binding transaction logic
    
    [ Upstream commit 4bedf9eee016286c835e3d8fa981ddece5338795 ]
    
    Add bound flag to rule and chain transactions as in 6a0a8d10a366
    ("netfilter: nf_tables: use-after-free in failing rule with bound set")
    to skip them in case that the chain is already bound from the abort
    path.
    
    This patch fixes an imbalance in the chain use refcnt that triggers a
    WARN_ON on the table and chain destroy path.
    
    This patch also disallows nested chain bindings, which is not
    supported from userspace.
    
    The logic to deal with chain binding in nft_data_hold() and
    nft_data_release() is not correct. The NFT_TRANS_PREPARE state needs a
    special handling in case a chain is bound but next expressions in the
    same rule fail to initialize as described by 1240eb93f061 ("netfilter:
    nf_tables: incorrect error path handling with NFT_MSG_NEWRULE").
    
    The chain is left bound if rule construction fails, so the objects
    stored in this chain (and the chain itself) are released by the
    transaction records from the abort path, follow up patch ("netfilter:
    nf_tables: add NFT_TRANS_PREPARE_ERROR to deal with bound set/chain")
    completes this error handling.
    
    When deleting an existing rule, chain bound flag is set off so the
    rule expression .destroy path releases the objects.
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1328e8d4c3ee38c5de52dd09cbcf17b8dfab8652
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Fri Jun 16 17:45:49 2023 +0100

    be2net: Extend xmit workaround to BE3 chip
    
    [ Upstream commit 7580e0a78eb29e7bb1a772eba4088250bbb70d41 ]
    
    We have seen a bug where the NIC incorrectly changes the length in the
    IP header of a padded packet to include the padding bytes. The driver
    already has a workaround for this so do the workaround for this NIC too.
    This resolves the issue.
    
    The NIC in question identifies itself as follows:
    
    [    8.828494] be2net 0000:02:00.0: FW version is 10.7.110.31
    [    8.834759] be2net 0000:02:00.0: Emulex OneConnect(be3): PF FLEX10 port 1
    
    02:00.0 Ethernet controller: Emulex Corporation OneConnect 10Gb NIC (be3) (rev 01)
    
    Fixes: ca34fe38f06d ("be2net: fix wrong usage of adapter->generation")
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Link: https://lore.kernel.org/r/20230616164549.2863037-1-ross.lagerwall@citrix.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 768f94c5f639ee4160290ec1f5382573239f29c6
Author: ArÄ±nÃ§ ÃNAL <arinc.unal@arinc9.com>
Date:   Sat Jun 17 09:26:46 2023 +0300

    net: dsa: mt7530: fix handling of BPDUs on MT7530 switch
    
    [ Upstream commit d7c66073559386b836bded7cdc8b66ee5c049129 ]
    
    BPDUs are link-local frames, therefore they must be trapped to the CPU
    port. Currently, the MT7530 switch treats BPDUs as regular multicast
    frames, therefore flooding them to user ports. To fix this, set BPDUs to be
    trapped to the CPU port. Group this on mt7530_setup() and
    mt7531_setup_common() into mt753x_trap_frames() and call that.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Signed-off-by: ArÄ±nÃ§ ÃNAL <arinc.unal@arinc9.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa528e7d379f32ad1b4b65be57985b4c1d42a12b
Author: ArÄ±nÃ§ ÃNAL <arinc.unal@arinc9.com>
Date:   Sat Jun 17 09:26:45 2023 +0300

    net: dsa: mt7530: fix trapping frames on non-MT7621 SoC MT7530 switch
    
    [ Upstream commit 4ae90f90e4909e3014e2dc6a0627964617a7b824 ]
    
    All MT7530 switch IP variants share the MT7530_MFC register, but the
    current driver only writes it for the switch variant that is integrated in
    the MT7621 SoC. Modify the code to include all MT7530 derivatives.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Suggested-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: ArÄ±nÃ§ ÃNAL <arinc.unal@arinc9.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efea112a87b688af03df852744649d09589befc4
Author: Terin Stock <terin@cloudflare.com>
Date:   Fri Jun 9 22:58:42 2023 +0200

    ipvs: align inner_mac_header for encapsulation
    
    [ Upstream commit d7fce52fdf96663ddc2eb21afecff3775588612a ]
    
    When using encapsulation the original packet's headers are copied to the
    inner headers. This preserves the space for an inner mac header, which
    is not used by the inner payloads for the encapsulation types supported
    by IPVS. If a packet is using GUE or GRE encapsulation and needs to be
    segmented, flow can be passed to __skb_udp_tunnel_segment() which
    calculates a negative tunnel header length. A negative tunnel header
    length causes pskb_may_pull() to fail, dropping the packet.
    
    This can be observed by attaching probes to ip_vs_in_hook(),
    __dev_queue_xmit(), and __skb_udp_tunnel_segment():
    
        perf probe --add '__dev_queue_xmit skb->inner_mac_header \
        skb->inner_network_header skb->mac_header skb->network_header'
        perf probe --add '__skb_udp_tunnel_segment:7 tnl_hlen'
        perf probe -m ip_vs --add 'ip_vs_in_hook skb->inner_mac_header \
        skb->inner_network_header skb->mac_header skb->network_header'
    
    These probes the headers and tunnel header length for packets which
    traverse the IPVS encapsulation path. A TCP packet can be forced into
    the segmentation path by being smaller than a calculated clamped MSS,
    but larger than the advertised MSS.
    
        probe:ip_vs_in_hook: inner_mac_header=0x0 inner_network_header=0x0 mac_header=0x44 network_header=0x52
        probe:ip_vs_in_hook: inner_mac_header=0x44 inner_network_header=0x52 mac_header=0x44 network_header=0x32
        probe:dev_queue_xmit: inner_mac_header=0x44 inner_network_header=0x52 mac_header=0x44 network_header=0x32
        probe:__skb_udp_tunnel_segment_L7: tnl_hlen=-2
    
    When using veth-based encapsulation, the interfaces are set to be
    mac-less, which does not preserve space for an inner mac header. This
    prevents this issue from occurring.
    
    In our real-world testing of sending a 32KB file we observed operation
    time increasing from ~75ms for veth-based encapsulation to over 1.5s
    using IPVS encapsulation due to retries from dropped packets.
    
    This changeset modifies the packet on the encapsulation path in
    ip_vs_tunnel_xmit() and ip_vs_tunnel_xmit_v6() to remove the inner mac
    header offset. This fixes UDP segmentation for both encapsulation types,
    and corrects the inner headers for any IPIP flows that may use it.
    
    Fixes: 84c0d5e96f3a ("ipvs: allow tunneling with gue encapsulation")
    Signed-off-by: Terin Stock <terin@cloudflare.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Acked-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24d7d9aee03de852985fd8abd0a9439a74ad5bb3
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:22 2023 +0300

    mmc: usdhi60rol0: fix deferred probing
    
    [ Upstream commit 413db499730248431c1005b392e8ed82c4fa19bf ]
    
    The driver overrides the error codes returned by platform_get_irq_byname()
    to -ENODEV, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing.  Switch to propagating error
    codes upstream.
    
    Fixes: 9ec36cafe43b ("of/irq: do irq resolution in platform_get_irq")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-13-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1e08bed0307589bc4f2b30f7779122f853c2fc0
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:20 2023 +0300

    mmc: sh_mmcif: fix deferred probing
    
    [ Upstream commit 5b067d7f855c61df7f8e2e8ccbcee133c282415e ]
    
    The driver overrides the error codes returned by platform_get_irq() to
    -ENXIO, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the
    error codes upstream.
    
    Fixes: 9ec36cafe43b ("of/irq: do irq resolution in platform_get_irq")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-11-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34c4906b9a06778c51b0cf104eb02b5250ebcdc6
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:18 2023 +0300

    mmc: sdhci-acpi: fix deferred probing
    
    [ Upstream commit b465dea5e1540c7d7b5211adaf94926980d3014b ]
    
    The driver overrides the error codes returned by platform_get_irq() to
    -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the
    error codes upstream.
    
    Fixes: 1b7ba57ecc86 ("mmc: sdhci-acpi: Handle return value of platform_get_irq")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20230617203622.6812-9-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41f1e8dab08d3b40ad905646b9a7c9643c09b8a0
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:17 2023 +0300

    mmc: owl: fix deferred probing
    
    [ Upstream commit 3c482e1e830d79b9be8afb900a965135c01f7893 ]
    
    The driver overrides the error codes returned by platform_get_irq() to
    -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the
    error codes upstream.
    
    Fixes: ff65ffe46d28 ("mmc: Add Actions Semi Owl SoCs SD/MMC driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-8-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b86ca9e08ca9c24ccda971c8c61eebce4ac35155
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:16 2023 +0300

    mmc: omap_hsmmc: fix deferred probing
    
    [ Upstream commit fb51b74a57859b707c3e8055ed0c25a7ca4f6a29 ]
    
    The driver overrides the error codes returned by platform_get_irq() to
    -ENXIO, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the
    error codes upstream.
    
    Fixes: 9ec36cafe43b ("of/irq: do irq resolution in platform_get_irq")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-7-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 445a9568dec1cf2b2e13c0c92ec0dc8e7a62d295
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:15 2023 +0300

    mmc: omap: fix deferred probing
    
    [ Upstream commit aedf4ba1ad00aaa94c1b66c73ecaae95e2564b95 ]
    
    The driver overrides the error codes returned by platform_get_irq() to
    -ENXIO, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the
    error codes upstream.
    
    Fixes: 9ec36cafe43b ("of/irq: do irq resolution in platform_get_irq")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-6-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 840deb8d1418999203b6433fcea3133a92f669f3
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:14 2023 +0300

    mmc: mvsdio: fix deferred probing
    
    [ Upstream commit 8d84064da0d4672e74f984e8710f27881137472c ]
    
    The driver overrides the error codes returned by platform_get_irq() to
    -ENXIO, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the
    error codes upstream.
    
    Fixes: 9ec36cafe43b ("of/irq: do irq resolution in platform_get_irq")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-5-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92f73c4f927cff42e69b51b87b1860e741c9c6b0
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:13 2023 +0300

    mmc: mtk-sd: fix deferred probing
    
    [ Upstream commit 0c4dc0f054891a2cbde0426b0c0fdf232d89f47f ]
    
    The driver overrides the error codes returned by platform_get_irq() to
    -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the
    error codes upstream.
    
    Fixes: 208489032bdd ("mmc: mediatek: Add Mediatek MMC driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-4-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aedecd013d2c16e8d9579374794809bd435a57c5
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Wed Jun 14 23:06:56 2023 +0200

    net: qca_spi: Avoid high load if QCA7000 is not available
    
    [ Upstream commit 92717c2356cb62c89e8a3dc37cbbab2502562524 ]
    
    In case the QCA7000 is not available via SPI (e.g. in reset),
    the driver will cause a high load. The reason for this is
    that the synchronization is never finished and schedule()
    is never called. Since the synchronization is not timing
    critical, it's safe to drop this from the scheduling condition.
    
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Fixes: 291ab06ecf67 ("net: qualcomm: new Ethernet over SPI driver for QCA7000")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 156dd06fb33793d3daeb785354b9e919a1a2849b
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed Jun 14 12:02:02 2023 +0200

    xfrm: Linearize the skb after offloading if needed.
    
    [ Upstream commit f015b900bc3285322029b4a7d132d6aeb0e51857 ]
    
    With offloading enabled, esp_xmit() gets invoked very late, from within
    validate_xmit_xfrm() which is after validate_xmit_skb() validates and
    linearizes the skb if the underlying device does not support fragments.
    
    esp_output_tail() may add a fragment to the skb while adding the auth
    tag/ IV. Devices without the proper support will then send skb->data
    points to with the correct length so the packet will have garbage at the
    end. A pcap sniffer will claim that the proper data has been sent since
    it parses the skb properly.
    
    It is not affected with INET_ESP_OFFLOAD disabled.
    
    Linearize the skb after offloading if the sending hardware requires it.
    It was tested on v4, v6 has been adopted.
    
    Fixes: 7785bba299a8d ("esp: Add a software GRO codepath")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d967bd7ea6cc249063e7be2cac6d9107bee51e3d
Author: Magali Lemes <magali.lemes@canonical.com>
Date:   Tue Jun 13 09:32:22 2023 -0300

    selftests: net: fcnal-test: check if FIPS mode is enabled
    
    [ Upstream commit d7a2fc1437f71cb058c7b11bc33dfc19e4bf277a ]
    
    There are some MD5 tests which fail when the kernel is in FIPS mode,
    since MD5 is not FIPS compliant. Add a check and only run those tests
    if FIPS mode is not enabled.
    
    Fixes: f0bee1ebb5594 ("fcnal-test: Add TCP MD5 tests")
    Fixes: 5cad8bce26e01 ("fcnal-test: Add TCP MD5 tests for VRF")
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: Magali Lemes <magali.lemes@canonical.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 964cfdfd4b4f438c289c1f40481524d46e5a3f85
Author: Maciej Å»enczykowski <maze@google.com>
Date:   Mon Jun 5 04:06:54 2023 -0700

    xfrm: fix inbound ipv4/udp/esp packets to UDPv6 dualstack sockets
    
    [ Upstream commit 1166a530a84758bb9e6b448fc8c195ed413f5ded ]
    
    Before Linux v5.8 an AF_INET6 SOCK_DGRAM (udp/udplite) socket
    with SOL_UDP, UDP_ENCAP, UDP_ENCAP_ESPINUDP{,_NON_IKE} enabled
    would just unconditionally use xfrm4_udp_encap_rcv(), afterwards
    such a socket would use the newly added xfrm6_udp_encap_rcv()
    which only handles IPv6 packets.
    
    Cc: Sabrina Dubroca <sd@queasysnail.net>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Benedict Wong <benedictwong@google.com>
    Cc: Yan Yan <evitayan@google.com>
    Fixes: 0146dca70b87 ("xfrm: add support for UDPv6 encapsulation of ESP")
    Signed-off-by: Maciej Å»enczykowski <maze@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25e89fa7b5a8d20fbd8bb753da560f9fca132228
Author: Maxim Mikityanskiy <maxim@isovalent.com>
Date:   Wed Jun 7 15:39:50 2023 +0300

    bpf: Fix verifier id tracking of scalars on spill
    
    [ Upstream commit 713274f1f2c896d37017efee333fd44149710119 ]
    
    The following scenario describes a bug in the verifier where it
    incorrectly concludes about equivalent scalar IDs which could lead to
    verifier bypass in privileged mode:
    
    1. Prepare a 32-bit rogue number.
    2. Put the rogue number into the upper half of a 64-bit register, and
       roll a random (unknown to the verifier) bit in the lower half. The
       rest of the bits should be zero (although variations are possible).
    3. Assign an ID to the register by MOVing it to another arbitrary
       register.
    4. Perform a 32-bit spill of the register, then perform a 32-bit fill to
       another register. Due to a bug in the verifier, the ID will be
       preserved, although the new register will contain only the lower 32
       bits, i.e. all zeros except one random bit.
    
    At this point there are two registers with different values but the same
    ID, which means the integrity of the verifier state has been corrupted.
    
    5. Compare the new 32-bit register with 0. In the branch where it's
       equal to 0, the verifier will believe that the original 64-bit
       register is also 0, because it has the same ID, but its actual value
       still contains the rogue number in the upper half.
       Some optimizations of the verifier prevent the actual bypass, so
       extra care is needed: the comparison must be between two registers,
       and both branches must be reachable (this is why one random bit is
       needed). Both branches are still suitable for the bypass.
    6. Right shift the original register by 32 bits to pop the rogue number.
    7. Use the rogue number as an offset with any pointer. The verifier will
       believe that the offset is 0, while in reality it's the given number.
    
    The fix is similar to the 32-bit BPF_MOV handling in check_alu_op for
    SCALAR_VALUE. If the spill is narrowing the actual register value, don't
    keep the ID, make sure it's reset to 0.
    
    Fixes: 354e8f1970f8 ("bpf: Support <8-byte scalar spill and refill")
    Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Andrii Nakryiko <andrii@kernel.org> # Checked veristat delta
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20230607123951.558971-2-maxtram95@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b180495f6b06058d752ddee9941a478ddae9d7f
Author: Eduard Zingerman <eddyz87@gmail.com>
Date:   Wed Feb 15 01:20:27 2023 +0200

    bpf: track immediate values written to stack by BPF_ST instruction
    
    [ Upstream commit ecdf985d7615356b78241fdb159c091830ed0380 ]
    
    For aligned stack writes using BPF_ST instruction track stored values
    in a same way BPF_STX is handled, e.g. make sure that the following
    commands produce similar verifier knowledge:
    
      fp[-8] = 42;             r1 = 42;
                           fp[-8] = r1;
    
    This covers two cases:
     - non-null values written to stack are stored as spill of fake
       registers;
     - null values written to stack are stored as STACK_ZERO marks.
    
    Previously both cases above used STACK_MISC marks instead.
    
    Some verifier test cases relied on the old logic to obtain STACK_MISC
    marks for some stack values. These test cases are updated in the same
    commit to avoid failures during bisect.
    
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Link: https://lore.kernel.org/r/20230214232030.1502829-2-eddyz87@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Stable-dep-of: 713274f1f2c8 ("bpf: Fix verifier id tracking of scalars on spill")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3229a29e95f51aec039c267a0d2b6092a8e245d6
Author: Benedict Wong <benedictwong@google.com>
Date:   Wed May 10 01:30:22 2023 +0000

    xfrm: Ensure policies always checked on XFRM-I input path
    
    [ Upstream commit a287f5b0cfc6804c5b12a4be13c7c9fe27869e90 ]
    
    This change adds methods in the XFRM-I input path that ensures that
    policies are checked prior to processing of the subsequent decapsulated
    packet, after which the relevant policies may no longer be resolvable
    (due to changing src/dst/proto/etc).
    
    Notably, raw ESP/AH packets did not perform policy checks inherently,
    whereas all other encapsulated packets (UDP, TCP encapsulated) do policy
    checks after calling xfrm_input handling in the respective encapsulation
    layer.
    
    Fixes: b0355dbbf13c ("Fix XFRM-I support for nested ESP tunnels")
    Test: Verified with additional Android Kernel Unit tests
    Test: Verified against Android CTS
    Signed-off-by: Benedict Wong <benedictwong@google.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d055ee18cab88d1ab751ead8a69f833d8382b663
Author: Eyal Birger <eyal.birger@gmail.com>
Date:   Sat Dec 3 10:46:56 2022 +0200

    xfrm: interface: rename xfrm_interface.c to xfrm_interface_core.c
    
    [ Upstream commit ee9a113ab63468137802898bcd2c598998c96938 ]
    
    This change allows adding additional files to the xfrm_interface module.
    
    Signed-off-by: Eyal Birger <eyal.birger@gmail.com>
    Link: https://lore.kernel.org/r/20221203084659.1837829-2-eyal.birger@gmail.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Stable-dep-of: a287f5b0cfc6 ("xfrm: Ensure policies always checked on XFRM-I input path")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 491ce3c1d98ab39a1deae154d442a560f7de0708
Author: Benedict Wong <benedictwong@google.com>
Date:   Wed May 10 01:30:21 2023 +0000

    xfrm: Treat already-verified secpath entries as optional
    
    [ Upstream commit 1f8b6df6a997a430b0c48b504638154b520781ad ]
    
    This change allows inbound traffic through nested IPsec tunnels to
    successfully match policies and templates, while retaining the secpath
    stack trace as necessary for netfilter policies.
    
    Specifically, this patch marks secpath entries that have already matched
    against a relevant policy as having been verified, allowing it to be
    treated as optional and skipped after a tunnel decapsulation (during
    which the src/dst/proto/etc may have changed, and the correct policy
    chain no long be resolvable).
    
    This approach is taken as opposed to the iteration in b0355dbbf13c,
    where the secpath was cleared, since that breaks subsequent validations
    that rely on the existence of the secpath entries (netfilter policies, or
    transport-in-tunnel mode, where policies remain resolvable).
    
    Fixes: b0355dbbf13c ("Fix XFRM-I support for nested ESP tunnels")
    Test: Tested against Android Kernel Unit Tests
    Test: Tested against Android CTS
    Signed-off-by: Benedict Wong <benedictwong@google.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ce3d0c068d917e6ea6e3b8b5c424c97cd2bd4e0
Author: Chen Aotian <chenaotian2@163.com>
Date:   Sun Apr 9 10:20:48 2023 +0800

    ieee802154: hwsim: Fix possible memory leaks
    
    [ Upstream commit a61675294735570daca3779bd1dbb3715f7232bd ]
    
    After replacing e->info, it is necessary to free the old einfo.
    
    Fixes: f25da51fdc38 ("ieee802154: hwsim: add replacement for fakelb")
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Reviewed-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: Chen Aotian <chenaotian2@163.com>
    Link: https://lore.kernel.org/r/20230409022048.61223-1-chenaotian2@163.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29672dc47d99f0c9247c16961c4e46419cdb705f
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:12 2023 +0300

    mmc: meson-gx: fix deferred probing
    
    [ Upstream commit b8ada54fa1b83f3b6480d4cced71354301750153 ]
    
    The driver overrides the error codes and IRQ0 returned by platform_get_irq()
    to -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the error
    codes upstream.  Since commit ce753ad1549c ("platform: finally disallow IRQ0
    in platform_get_irq() and its ilk") IRQ0 is no longer returned by those APIs,
    so we now can safely ignore it...
    
    Fixes: cbcaac6d7dd2 ("mmc: meson-gx-mmc: Fix platform_get_irq's error checking")
    Cc: stable@vger.kernel.org # v5.19+
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://lore.kernel.org/r/20230617203622.6812-3-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bac4a2b7326411a05aca952dde5c453798b62ac
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Wed Jun 7 15:24:27 2023 +0200

    memfd: check for non-NULL file_seals in memfd_create() syscall
    
    [ Upstream commit 935d44acf621aa0688fef8312dec3e5940f38f4e ]
    
    Ensure that file_seals is non-NULL before using it in the memfd_create()
    syscall.  One situation in which memfd_file_seals_ptr() could return a
    NULL pointer when CONFIG_SHMEM=n, oopsing the kernel.
    
    Link: https://lkml.kernel.org/r/20230607132427.2867435-1-roberto.sassu@huaweicloud.com
    Fixes: 47b9012ecdc7 ("shmem: add sealing support to hugetlb-backed memfd")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Cc: Marc-Andr Lureau <marcandre.lureau@redhat.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 103734b429b9984571a92ce1a4184de79e9f9d13
Author: Lee Jones <lee@kernel.org>
Date:   Wed Jun 14 17:38:54 2023 +0100

    x86/mm: Avoid using set_pgd() outside of real PGD pages
    
    commit d082d48737c75d2b3cc1f972b8c8674c25131534 upstream.
    
    KPTI keeps around two PGDs: one for userspace and another for the
    kernel. Among other things, set_pgd() contains infrastructure to
    ensure that updates to the kernel PGD are reflected in the user PGD
    as well.
    
    One side-effect of this is that set_pgd() expects to be passed whole
    pages.  Unfortunately, init_trampoline_kaslr() passes in a single entry:
    'trampoline_pgd_entry'.
    
    When KPTI is on, set_pgd() will update 'trampoline_pgd_entry' (an
    8-Byte globally stored [.bss] variable) and will then proceed to
    replicate that value into the non-existent neighboring user page
    (located +4k away), leading to the corruption of other global [.bss]
    stored variables.
    
    Fix it by directly assigning 'trampoline_pgd_entry' and avoiding
    set_pgd().
    
    [ dhansen: tweak subject and changelog ]
    
    Fixes: 0925dda5962e ("x86/mm/KASLR: Use only one PUD entry for real mode trampoline")
    Suggested-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/all/20230614163859.924309-1-lee@kernel.org/g
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 793d0224bb601e97ea2c01c5c25ab798abf118d8
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Mon Jun 12 11:14:56 2023 +0900

    nilfs2: prevent general protection fault in nilfs_clear_dirty_page()
    
    commit 782e53d0c14420858dbf0f8f797973c150d3b6d7 upstream.
    
    In a syzbot stress test that deliberately causes file system errors on
    nilfs2 with a corrupted disk image, it has been reported that
    nilfs_clear_dirty_page() called from nilfs_clear_dirty_pages() can cause a
    general protection fault.
    
    In nilfs_clear_dirty_pages(), when looking up dirty pages from the page
    cache and calling nilfs_clear_dirty_page() for each dirty page/folio
    retrieved, the back reference from the argument page to "mapping" may have
    been changed to NULL (and possibly others).  It is necessary to check this
    after locking the page/folio.
    
    So, fix this issue by not calling nilfs_clear_dirty_page() on a page/folio
    after locking it in nilfs_clear_dirty_pages() if the back reference
    "mapping" from the page/folio is different from the "mapping" that held
    the page/folio just before.
    
    Link: https://lkml.kernel.org/r/20230612021456.3682-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+53369d11851d8f26735c@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/000000000000da4f6b05eb9bf593@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96987c383c2b69eac66b5e193447d5bbdbbc8a86
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Jun 23 07:41:10 2023 -0600

    io_uring/net: disable partial retries for recvmsg with cmsg
    
    Commit 78d0d2063bab954d19a1696feae4c7706a626d48 upstream.
    
    We cannot sanely handle partial retries for recvmsg if we have cmsg
    attached. If we don't, then we'd just be overwriting the initial cmsg
    header on retries. Alternatively we could increment and handle this
    appropriately, but it doesn't seem worth the complication.
    
    Move the MSG_WAITALL check into the non-multishot case while at it,
    since MSG_WAITALL is explicitly disabled for multishot anyway.
    
    Link: https://lore.kernel.org/io-uring/0b0d4411-c8fd-4272-770b-e030af6919a0@kernel.dk/
    Cc: stable@vger.kernel.org # 5.10+
    Reported-by: Stefan Metzmacher <metze@samba.org>
    Reviewed-by: Stefan Metzmacher <metze@samba.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25a543ca3005f86cb8eee034510046ddb5537e83
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Jun 23 07:39:42 2023 -0600

    io_uring/net: clear msg_controllen on partial sendmsg retry
    
    Commit b1dc492087db0f2e5a45f1072a743d04618dd6be upstream.
    
    If we have cmsg attached AND we transferred partial data at least, clear
    msg_controllen on retry so we don't attempt to send that again.
    
    Cc: stable@vger.kernel.org # 5.10+
    Fixes: cac9e4418f4c ("io_uring/net: save msghdr->msg_control for retries")
    Reported-by: Stefan Metzmacher <metze@samba.org>
    Reviewed-by: Stefan Metzmacher <metze@samba.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34a7e5021a437bf813e1b52fc9043b43d48e2325
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Jun 23 07:38:14 2023 -0600

    io_uring/net: save msghdr->msg_control for retries
    
    Commit cac9e4418f4cbd548ccb065b3adcafe073f7f7d2 upstream.
    
    If the application sets ->msg_control and we have to later retry this
    command, or if it got queued with IOSQE_ASYNC to begin with, then we
    need to retain the original msg_control value. This is due to the net
    stack overwriting this field with an in-kernel pointer, to copy it
    in. Hitting that path for the second time will now fail the copy from
    user, as it's attempting to copy from a non-user address.
    
    Cc: stable@vger.kernel.org # 5.10+
    Link: https://github.com/axboe/liburing/issues/880
    Reported-and-tested-by: Marek Majkowski <marek@cloudflare.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b07bb2914adac63d9a10c2878d4a0a0edf27edfe
Author: Rafael Aquini <aquini@redhat.com>
Date:   Tue Jun 6 19:36:13 2023 -0400

    writeback: fix dereferencing NULL mapping->host on writeback_page_template
    
    commit 54abe19e00cfcc5a72773d15cd00ed19ab763439 upstream.
    
    When commit 19343b5bdd16 ("mm/page-writeback: introduce tracepoint for
    wait_on_page_writeback()") repurposed the writeback_dirty_page trace event
    as a template to create its new wait_on_page_writeback trace event, it
    ended up opening a window to NULL pointer dereference crashes due to the
    (infrequent) occurrence of a race where an access to a page in the
    swap-cache happens concurrently with the moment this page is being written
    to disk and the tracepoint is enabled:
    
        BUG: kernel NULL pointer dereference, address: 0000000000000040
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        PGD 800000010ec0a067 P4D 800000010ec0a067 PUD 102353067 PMD 0
        Oops: 0000 [#1] PREEMPT SMP PTI
        CPU: 1 PID: 1320 Comm: shmem-worker Kdump: loaded Not tainted 6.4.0-rc5+ #13
        Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS edk2-20230301gitf80f052277c8-1.fc37 03/01/2023
        RIP: 0010:trace_event_raw_event_writeback_folio_template+0x76/0xf0
        Code: 4d 85 e4 74 5c 49 8b 3c 24 e8 06 98 ee ff 48 89 c7 e8 9e 8b ee ff ba 20 00 00 00 48 89 ef 48 89 c6 e8 fe d4 1a 00 49 8b 04 24 <48> 8b 40 40 48 89 43 28 49 8b 45 20 48 89 e7 48 89 43 30 e8 a2 4d
        RSP: 0000:ffffaad580b6fb60 EFLAGS: 00010246
        RAX: 0000000000000000 RBX: ffff90e38035c01c RCX: 0000000000000000
        RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff90e38035c044
        RBP: ffff90e38035c024 R08: 0000000000000002 R09: 0000000000000006
        R10: ffff90e38035c02e R11: 0000000000000020 R12: ffff90e380bac000
        R13: ffffe3a7456d9200 R14: 0000000000001b81 R15: ffffe3a7456d9200
        FS:  00007f2e4e8a15c0(0000) GS:ffff90e3fbc80000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 0000000000000040 CR3: 00000001150c6003 CR4: 0000000000170ee0
        Call Trace:
         <TASK>
         ? __die+0x20/0x70
         ? page_fault_oops+0x76/0x170
         ? kernelmode_fixup_or_oops+0x84/0x110
         ? exc_page_fault+0x65/0x150
         ? asm_exc_page_fault+0x22/0x30
         ? trace_event_raw_event_writeback_folio_template+0x76/0xf0
         folio_wait_writeback+0x6b/0x80
         shmem_swapin_folio+0x24a/0x500
         ? filemap_get_entry+0xe3/0x140
         shmem_get_folio_gfp+0x36e/0x7c0
         ? find_busiest_group+0x43/0x1a0
         shmem_fault+0x76/0x2a0
         ? __update_load_avg_cfs_rq+0x281/0x2f0
         __do_fault+0x33/0x130
         do_read_fault+0x118/0x160
         do_pte_missing+0x1ed/0x2a0
         __handle_mm_fault+0x566/0x630
         handle_mm_fault+0x91/0x210
         do_user_addr_fault+0x22c/0x740
         exc_page_fault+0x65/0x150
         asm_exc_page_fault+0x22/0x30
    
    This problem arises from the fact that the repurposed writeback_dirty_page
    trace event code was written assuming that every pointer to mapping
    (struct address_space) would come from a file-mapped page-cache object,
    thus mapping->host would always be populated, and that was a valid case
    before commit 19343b5bdd16.  The swap-cache address space
    (swapper_spaces), however, doesn't populate its ->host (struct inode)
    pointer, thus leading to the crashes in the corner-case aforementioned.
    
    commit 19343b5bdd16 ended up breaking the assignment of __entry->name and
    __entry->ino for the wait_on_page_writeback tracepoint -- both dependent
    on mapping->host carrying a pointer to a valid inode.  The assignment of
    __entry->name was fixed by commit 68f23b89067f ("memcg: fix a crash in
    wb_workfn when a device disappears"), and this commit fixes the remaining
    case, for __entry->ino.
    
    Link: https://lkml.kernel.org/r/20230606233613.1290819-1-aquini@redhat.com
    Fixes: 19343b5bdd16 ("mm/page-writeback: introduce tracepoint for wait_on_page_writeback()")
    Signed-off-by: Rafael Aquini <aquini@redhat.com>
    Reviewed-by: Yafang Shao <laoar.shao@gmail.com>
    Cc: Aristeu Rozanski <aris@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c46a240ddbacd3e17b52dd68bf0cbf1e53270d2
Author: Russ Weight <russell.h.weight@intel.com>
Date:   Tue Jun 20 13:28:24 2023 -0700

    regmap: spi-avmm: Fix regmap_bus max_raw_write
    
    [ Upstream commit c8e796895e2310b6130e7577248da1d771431a77 ]
    
    The max_raw_write member of the regmap_spi_avmm_bus structure is defined
    as:
            .max_raw_write = SPI_AVMM_VAL_SIZE * MAX_WRITE_CNT
    
    SPI_AVMM_VAL_SIZE == 4 and MAX_WRITE_CNT == 1 so this results in a
    maximum write transfer size of 4 bytes which provides only enough space to
    transfer the address of the target register. It provides no space for the
    value to be transferred. This bug became an issue (divide-by-zero in
    _regmap_raw_write()) after the following was accepted into mainline:
    
    commit 3981514180c9 ("regmap: Account for register length when chunking")
    
    Change max_raw_write to include space (4 additional bytes) for both the
    register address and value:
    
            .max_raw_write = SPI_AVMM_REG_SIZE + SPI_AVMM_VAL_SIZE * MAX_WRITE_CNT
    
    Fixes: 7f9fb67358a2 ("regmap: add Intel SPI Slave to AVMM Bus Bridge support")
    Reviewed-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
    Signed-off-by: Russ Weight <russell.h.weight@intel.com>
    Link: https://lore.kernel.org/r/20230620202824.380313-1-russell.h.weight@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4796d9b06917dee629d04b871f5fc038bd223164
Author: Teresa Remmet <t.remmet@phytec.de>
Date:   Wed Jun 14 14:52:40 2023 +0200

    regulator: pca9450: Fix LDO3OUT and LDO4OUT MASK
    
    [ Upstream commit 7257d930aadcd62d1c7971ab14f3b1126356abdc ]
    
    L3_OUT and L4_OUT Bit fields range from Bit 0:4 and thus the
    mask should be 0x1F instead of 0x0F.
    
    Fixes: 0935ff5f1f0a ("regulator: pca9450: add pca9450 pmic driver")
    Signed-off-by: Teresa Remmet <t.remmet@phytec.de>
    Reviewed-by: Frieder Schrempf <frieder.schrempf@kontron.de>
    Link: https://lore.kernel.org/r/20230614125240.3946519-1-t.remmet@phytec.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba9952e2f50b7cc52103092442f36578a29ae6ab
Author: Matthias May <matthias.may@westermo.com>
Date:   Thu Jul 21 22:27:19 2022 +0200

    ip_tunnels: allow VXLAN/GENEVE to inherit TOS/TTL from VLAN
    
    commit 7074732c8faee201a245a6f983008a5789c0be33 upstream.
    
    The current code allows for VXLAN and GENEVE to inherit the TOS
    respective the TTL when skb-protocol is ETH_P_IP or ETH_P_IPV6.
    However when the payload is VLAN encapsulated, then this inheriting
    does not work, because the visible skb-protocol is of type
    ETH_P_8021Q or ETH_P_8021AD.
    
    Instead of skb->protocol use skb_protocol().
    
    Signed-off-by: Matthias May <matthias.may@westermo.com>
    Link: https://lore.kernel.org/r/20220721202718.10092-1-matthias.may@westermo.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Cc: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acee272283f411cf0ed692e6ec92aee95f7f9084
Author: Christophe Kerello <christophe.kerello@foss.st.com>
Date:   Tue Jun 13 15:41:46 2023 +0200

    mmc: mmci: stm32: fix max busy timeout calculation
    
    commit 47b3ad6b7842f49d374a01b054a4b1461a621bdc upstream.
    
    The way that the timeout is currently calculated could lead to a u64
    timeout value in mmci_start_command(). This value is then cast in a u32
    register that leads to mmc erase failed issue with some SD cards.
    
    Fixes: 8266c585f489 ("mmc: mmci: add hardware busy timeout feature")
    Signed-off-by: Yann Gautier <yann.gautier@foss.st.com>
    Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230613134146.418016-1-yann.gautier@foss.st.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 999173f295cc6da8e60c444070d1372f297ccd10
Author: Martin HundebÃ¸ll <martin@geanix.com>
Date:   Wed Jun 7 10:27:12 2023 +0200

    mmc: meson-gx: remove redundant mmc_request_done() call from irq context
    
    commit 3c40eb8145325b0f5b93b8a169146078cb2c49d6 upstream.
    
    The call to mmc_request_done() can schedule, so it must not be called
    from irq context. Wake the irq thread if it needs to be called, and let
    its existing logic do its work.
    
    Fixes the following kernel bug, which appears when running an RT patched
    kernel on the AmLogic Meson AXG A113X SoC:
    [   11.111407] BUG: scheduling while atomic: kworker/0:1H/75/0x00010001
    [   11.111438] Modules linked in:
    [   11.111451] CPU: 0 PID: 75 Comm: kworker/0:1H Not tainted 6.4.0-rc3-rt2-rtx-00081-gfd07f41ed6b4-dirty #1
    [   11.111461] Hardware name: RTX AXG A113X Linux Platform Board (DT)
    [   11.111469] Workqueue: kblockd blk_mq_run_work_fn
    [   11.111492] Call trace:
    [   11.111497]  dump_backtrace+0xac/0xe8
    [   11.111510]  show_stack+0x18/0x28
    [   11.111518]  dump_stack_lvl+0x48/0x60
    [   11.111530]  dump_stack+0x18/0x24
    [   11.111537]  __schedule_bug+0x4c/0x68
    [   11.111548]  __schedule+0x80/0x574
    [   11.111558]  schedule_loop+0x2c/0x50
    [   11.111567]  schedule_rtlock+0x14/0x20
    [   11.111576]  rtlock_slowlock_locked+0x468/0x730
    [   11.111587]  rt_spin_lock+0x40/0x64
    [   11.111596]  __wake_up_common_lock+0x5c/0xc4
    [   11.111610]  __wake_up+0x18/0x24
    [   11.111620]  mmc_blk_mq_req_done+0x68/0x138
    [   11.111633]  mmc_request_done+0x104/0x118
    [   11.111644]  meson_mmc_request_done+0x38/0x48
    [   11.111654]  meson_mmc_irq+0x128/0x1f0
    [   11.111663]  __handle_irq_event_percpu+0x70/0x114
    [   11.111674]  handle_irq_event_percpu+0x18/0x4c
    [   11.111683]  handle_irq_event+0x80/0xb8
    [   11.111691]  handle_fasteoi_irq+0xa4/0x120
    [   11.111704]  handle_irq_desc+0x20/0x38
    [   11.111712]  generic_handle_domain_irq+0x1c/0x28
    [   11.111721]  gic_handle_irq+0x8c/0xa8
    [   11.111735]  call_on_irq_stack+0x24/0x4c
    [   11.111746]  do_interrupt_handler+0x88/0x94
    [   11.111757]  el1_interrupt+0x34/0x64
    [   11.111769]  el1h_64_irq_handler+0x18/0x24
    [   11.111779]  el1h_64_irq+0x64/0x68
    [   11.111786]  __add_wait_queue+0x0/0x4c
    [   11.111795]  mmc_blk_rw_wait+0x84/0x118
    [   11.111804]  mmc_blk_mq_issue_rq+0x5c4/0x654
    [   11.111814]  mmc_mq_queue_rq+0x194/0x214
    [   11.111822]  blk_mq_dispatch_rq_list+0x3ac/0x528
    [   11.111834]  __blk_mq_sched_dispatch_requests+0x340/0x4d0
    [   11.111847]  blk_mq_sched_dispatch_requests+0x38/0x70
    [   11.111858]  blk_mq_run_work_fn+0x3c/0x70
    [   11.111865]  process_one_work+0x17c/0x1f0
    [   11.111876]  worker_thread+0x1d4/0x26c
    [   11.111885]  kthread+0xe4/0xf4
    [   11.111894]  ret_from_fork+0x10/0x20
    
    Fixes: 51c5d8447bd7 ("MMC: meson: initial support for GX platforms")
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin HundebÃ¸ll <martin@geanix.com>
    Link: https://lore.kernel.org/r/20230607082713.517157-1-martin@geanix.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00010b52c7051cf93fd4ba623924de082819af15
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Thu May 18 11:39:36 2023 +0200

    mmc: sdhci-msm: Disable broken 64-bit DMA on MSM8916
    
    commit e6f9e590b72e12bbb86b1b8be7e1981f357392ad upstream.
    
    While SDHCI claims to support 64-bit DMA on MSM8916 it does not seem to
    be properly functional. It is not immediately obvious because SDHCI is
    usually used with IOMMU bypassed on this SoC, and all physical memory
    has 32-bit addresses. But when trying to enable the IOMMU it quickly
    fails with an error such as the following:
    
      arm-smmu 1e00000.iommu: Unhandled context fault:
        fsr=0x402, iova=0xfffff200, fsynr=0xe0000, cbfrsynra=0x140, cb=3
      mmc1: ADMA error: 0x02000000
      mmc1: sdhci: ============ SDHCI REGISTER DUMP ===========
      mmc1: sdhci: Sys addr:  0x00000000 | Version:  0x00002e02
      mmc1: sdhci: Blk size:  0x00000008 | Blk cnt:  0x00000000
      mmc1: sdhci: Argument:  0x00000000 | Trn mode: 0x00000013
      mmc1: sdhci: Present:   0x03f80206 | Host ctl: 0x00000019
      mmc1: sdhci: Power:     0x0000000f | Blk gap:  0x00000000
      mmc1: sdhci: Wake-up:   0x00000000 | Clock:    0x00000007
      mmc1: sdhci: Timeout:   0x0000000a | Int stat: 0x00000001
      mmc1: sdhci: Int enab:  0x03ff900b | Sig enab: 0x03ff100b
      mmc1: sdhci: ACmd stat: 0x00000000 | Slot int: 0x00000000
      mmc1: sdhci: Caps:      0x322dc8b2 | Caps_1:   0x00008007
      mmc1: sdhci: Cmd:       0x0000333a | Max curr: 0x00000000
      mmc1: sdhci: Resp[0]:   0x00000920 | Resp[1]:  0x5b590000
      mmc1: sdhci: Resp[2]:   0xe6487f80 | Resp[3]:  0x0a404094
      mmc1: sdhci: Host ctl2: 0x00000008
      mmc1: sdhci: ADMA Err:  0x00000001 | ADMA Ptr: 0x0000000ffffff224
      mmc1: sdhci_msm: ----------- VENDOR REGISTER DUMP -----------
      mmc1: sdhci_msm: DLL sts: 0x00000000 | DLL cfg:  0x60006400 | DLL cfg2: 0x00000000
      mmc1: sdhci_msm: DLL cfg3: 0x00000000 | DLL usr ctl:  0x00000000 | DDR cfg: 0x00000000
      mmc1: sdhci_msm: Vndr func: 0x00018a9c | Vndr func2 : 0xf88018a8 Vndr func3: 0x00000000
      mmc1: sdhci: ============================================
      mmc1: sdhci: fffffffff200: DMA 0x0000ffffffffe100, LEN 0x0008, Attr=0x21
      mmc1: sdhci: fffffffff20c: DMA 0x0000000000000000, LEN 0x0000, Attr=0x03
    
    Looking closely it's obvious that only the 32-bit part of the address
    (0xfffff200) arrives at the SMMU, the higher 16-bit (0xffff...) get
    lost somewhere. This might not be a limitation of the SDHCI itself but
    perhaps the bus/interconnect it is connected to, or even the connection
    to the SMMU.
    
    Work around this by setting SDHCI_QUIRK2_BROKEN_64_BIT_DMA to avoid
    using 64-bit addresses.
    
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230518-msm8916-64bit-v1-1-5694b0f35211@gerhold.net
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a557910bbed3e2111bee221f63de126f1b6df5c
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Sat Jun 10 17:26:43 2023 +0800

    cgroup: Do not corrupt task iteration when rebinding subsystem
    
    commit 6f363f5aa845561f7ea496d8b1175e3204470486 upstream.
    
    We found a refcount UAF bug as follows:
    
    refcount_t: addition on 0; use-after-free.
    WARNING: CPU: 1 PID: 342 at lib/refcount.c:25 refcount_warn_saturate+0xa0/0x148
    Workqueue: events cpuset_hotplug_workfn
    Call trace:
     refcount_warn_saturate+0xa0/0x148
     __refcount_add.constprop.0+0x5c/0x80
     css_task_iter_advance_css_set+0xd8/0x210
     css_task_iter_advance+0xa8/0x120
     css_task_iter_next+0x94/0x158
     update_tasks_root_domain+0x58/0x98
     rebuild_root_domains+0xa0/0x1b0
     rebuild_sched_domains_locked+0x144/0x188
     cpuset_hotplug_workfn+0x138/0x5a0
     process_one_work+0x1e8/0x448
     worker_thread+0x228/0x3e0
     kthread+0xe0/0xf0
     ret_from_fork+0x10/0x20
    
    then a kernel panic will be triggered as below:
    
    Unable to handle kernel paging request at virtual address 00000000c0000010
    Call trace:
     cgroup_apply_control_disable+0xa4/0x16c
     rebind_subsystems+0x224/0x590
     cgroup_destroy_root+0x64/0x2e0
     css_free_rwork_fn+0x198/0x2a0
     process_one_work+0x1d4/0x4bc
     worker_thread+0x158/0x410
     kthread+0x108/0x13c
     ret_from_fork+0x10/0x18
    
    The race that cause this bug can be shown as below:
    
    (hotplug cpu)                | (umount cpuset)
    mutex_lock(&cpuset_mutex)    | mutex_lock(&cgroup_mutex)
    cpuset_hotplug_workfn        |
     rebuild_root_domains        |  rebind_subsystems
      update_tasks_root_domain   |   spin_lock_irq(&css_set_lock)
       css_task_iter_start       |    list_move_tail(&cset->e_cset_node[ss->id]
       while(css_task_iter_next) |                  &dcgrp->e_csets[ss->id]);
       css_task_iter_end         |   spin_unlock_irq(&css_set_lock)
    mutex_unlock(&cpuset_mutex)  | mutex_unlock(&cgroup_mutex)
    
    Inside css_task_iter_start/next/end, css_set_lock is hold and then
    released, so when iterating task(left side), the css_set may be moved to
    another list(right side), then it->cset_head points to the old list head
    and it->cset_pos->next points to the head node of new list, which can't
    be used as struct css_set.
    
    To fix this issue, switch from all css_sets to only scgrp's css_sets to
    patch in-flight iterators to preserve correct iteration, and then
    update it->cset_head as well.
    
    Reported-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://www.spinics.net/lists/cgroups/msg37935.html
    Suggested-by: Michal KoutnÃ½ <mkoutny@suse.com>
    Link: https://lore.kernel.org/all/20230526114139.70274-1-xiujianfeng@huaweicloud.com/
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Fixes: 2d8f243a5e6e ("cgroup: implement cgroup->e_csets[]")
    Cc: stable@vger.kernel.org # v3.16+
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 815b2440116534385c89cfc28227a49c2f22eaba
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Jun 14 21:44:51 2023 -0700

    PCI: hv: Add a per-bus mutex state_lock
    
    commit 067d6ec7ed5b49380688e06c1e5f883a71bef4fe upstream.
    
    In the case of fast device addition/removal, it's possible that
    hv_eject_device_work() can start to run before create_root_hv_pci_bus()
    starts to run; as a result, the pci_get_domain_bus_and_slot() in
    hv_eject_device_work() can return a 'pdev' of NULL, and
    hv_eject_device_work() can remove the 'hpdev', and immediately send a
    message PCI_EJECTION_COMPLETE to the host, and the host immediately
    unassigns the PCI device from the guest; meanwhile,
    create_root_hv_pci_bus() and the PCI device driver can be probing the
    dead PCI device and reporting timeout errors.
    
    Fix the issue by adding a per-bus mutex 'state_lock' and grabbing the
    mutex before powering on the PCI bus in hv_pci_enter_d0(): when
    hv_eject_device_work() starts to run, it's able to find the 'pdev' and call
    pci_stop_and_remove_bus_device(pdev): if the PCI device driver has
    loaded, the PCI device driver's probe() function is already called in
    create_root_hv_pci_bus() -> pci_bus_add_devices(), and now
    hv_eject_device_work() -> pci_stop_and_remove_bus_device() is able
    to call the PCI device driver's remove() function and remove the device
    reliably; if the PCI device driver hasn't loaded yet, the function call
    hv_eject_device_work() -> pci_stop_and_remove_bus_device() is able to
    remove the PCI device reliably and the PCI device driver's probe()
    function won't be called; if the PCI device driver's probe() is already
    running (e.g., systemd-udev is loading the PCI device driver), it must
    be holding the per-device lock, and after the probe() finishes and releases
    the lock, hv_eject_device_work() -> pci_stop_and_remove_bus_device() is
    able to proceed to remove the device reliably.
    
    Fixes: 4daace0d8ce8 ("PCI: hv: Add paravirtual PCI front-end for Microsoft Hyper-V VMs")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Acked-by: Lorenzo Pieralisi <lpieralisi@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230615044451.5580-6-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34e21b8ff3e6445baedb813b2ba8d306d6f312c8
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Jun 14 21:44:48 2023 -0700

    PCI: hv: Fix a race condition in hv_irq_unmask() that can cause panic
    
    commit 2738d5ab7929a845b654cd171a1e275c37eb428e upstream.
    
    When the host tries to remove a PCI device, the host first sends a
    PCI_EJECT message to the guest, and the guest is supposed to gracefully
    remove the PCI device and send a PCI_EJECTION_COMPLETE message to the host;
    the host then sends a VMBus message CHANNELMSG_RESCIND_CHANNELOFFER to
    the guest (when the guest receives this message, the device is already
    unassigned from the guest) and the guest can do some final cleanup work;
    if the guest fails to respond to the PCI_EJECT message within one minute,
    the host sends the VMBus message CHANNELMSG_RESCIND_CHANNELOFFER and
    removes the PCI device forcibly.
    
    In the case of fast device addition/removal, it's possible that the PCI
    device driver is still configuring MSI-X interrupts when the guest receives
    the PCI_EJECT message; the channel callback calls hv_pci_eject_device(),
    which sets hpdev->state to hv_pcichild_ejecting, and schedules a work
    hv_eject_device_work(); if the PCI device driver is calling
    pci_alloc_irq_vectors() -> ... -> hv_compose_msi_msg(), we can break the
    while loop in hv_compose_msi_msg() due to the updated hpdev->state, and
    leave data->chip_data with its default value of NULL; later, when the PCI
    device driver calls request_irq() -> ... -> hv_irq_unmask(), the guest
    crashes in hv_arch_irq_unmask() due to data->chip_data being NULL.
    
    Fix the issue by not testing hpdev->state in the while loop: when the
    guest receives PCI_EJECT, the device is still assigned to the guest, and
    the guest has one minute to finish the device removal gracefully. We don't
    really need to (and we should not) test hpdev->state in the loop.
    
    Fixes: de0aa7b2f97d ("PCI: hv: Fix 2 hang issues in hv_compose_msi_msg()")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230615044451.5580-3-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d852ca7af3785851684f21c4a71cc3aae232bdb
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Jun 14 21:44:49 2023 -0700

    PCI: hv: Remove the useless hv_pcichild_state from struct hv_pci_dev
    
    commit add9195e69c94b32e96f78c2f9cea68f0e850b3f upstream.
    
    The hpdev->state is never really useful. The only use in
    hv_pci_eject_device() and hv_eject_device_work() is not really necessary.
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Acked-by: Lorenzo Pieralisi <lpieralisi@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230615044451.5580-4-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e0d33cc7813f59b352626d8b1ed922fb2bcc581
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Jun 14 21:44:50 2023 -0700

    Revert "PCI: hv: Fix a timing issue which causes kdump to fail occasionally"
    
    commit a847234e24d03d01a9566d1d9dcce018cc018d67 upstream.
    
    This reverts commit d6af2ed29c7c1c311b96dac989dcb991e90ee195.
    
    The statement "the hv_pci_bus_exit() call releases structures of all its
    child devices" in commit d6af2ed29c7c is not true: in the path
    hv_pci_probe() -> hv_pci_enter_d0() -> hv_pci_bus_exit(hdev, true): the
    parameter "keep_devs" is true, so hv_pci_bus_exit() does *not* release the
    child "struct hv_pci_dev *hpdev" that is created earlier in
    pci_devices_present_work() -> new_pcichild_device().
    
    The commit d6af2ed29c7c was originally made in July 2020 for RHEL 7.7,
    where the old version of hv_pci_bus_exit() was used; when the commit was
    rebased and merged into the upstream, people didn't notice that it's
    not really necessary. The commit itself doesn't cause any issue, but it
    makes hv_pci_probe() more complicated. Revert it to facilitate some
    upcoming changes to hv_pci_probe().
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Acked-by: Wei Hu <weh@microsoft.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230615044451.5580-5-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac0df91c7d98fc269f3734768194018e566384c1
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Jun 14 21:44:47 2023 -0700

    PCI: hv: Fix a race condition bug in hv_pci_query_relations()
    
    commit 440b5e3663271b0ffbd4908115044a6a51fb938b upstream.
    
    Since day 1 of the driver, there has been a race between
    hv_pci_query_relations() and survey_child_resources(): during fast
    device hotplug, hv_pci_query_relations() may error out due to
    device-remove and the stack variable 'comp' is no longer valid;
    however, pci_devices_present_work() -> survey_child_resources() ->
    complete() may be running on another CPU and accessing the no-longer-valid
    'comp'. Fix the race by flushing the workqueue before we exit from
    hv_pci_query_relations().
    
    Fixes: 4daace0d8ce8 ("PCI: hv: Add paravirtual PCI front-end for Microsoft Hyper-V VMs")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Acked-by: Lorenzo Pieralisi <lpieralisi@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230615044451.5580-2-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80c5d97b4aa1d960c0f19a293bcaef5cd9217e14
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Thu May 18 08:13:52 2023 -0700

    Drivers: hv: vmbus: Fix vmbus_wait_for_unload() to scan present CPUs
    
    commit 320805ab61e5f1e2a5729ae266e16bec2904050c upstream.
    
    vmbus_wait_for_unload() may be called in the panic path after other
    CPUs are stopped. vmbus_wait_for_unload() currently loops through
    online CPUs looking for the UNLOAD response message. But the values of
    CONFIG_KEXEC_CORE and crash_kexec_post_notifiers affect the path used
    to stop the other CPUs, and in one of the paths the stopped CPUs
    are removed from cpu_online_mask. This removal happens in both
    x86/x64 and arm64 architectures. In such a case, vmbus_wait_for_unload()
    only checks the panic'ing CPU, and misses the UNLOAD response message
    except when the panic'ing CPU is CPU 0. vmbus_wait_for_unload()
    eventually times out, but only after waiting 100 seconds.
    
    Fix this by looping through *present* CPUs in vmbus_wait_for_unload().
    The cpu_present_mask is not modified by stopping the other CPUs in the
    panic path, nor should it be.
    
    Also, in a CoCo VM the synic_message_page is not allocated in
    hv_synic_alloc(), but is set and cleared in hv_synic_enable_regs()
    and hv_synic_disable_regs() such that it is set only when the CPU is
    online.  If not all present CPUs are online when vmbus_wait_for_unload()
    is called, the synic_message_page might be NULL. Add a check for this.
    
    Fixes: cd95aad55793 ("Drivers: hv: vmbus: handle various crash scenarios")
    Cc: stable@vger.kernel.org
    Reported-by: John Starks <jostarks@microsoft.com>
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Link: https://lore.kernel.org/r/1684422832-38476-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d31eb2e266cf222afc8c613b147e54a167804a8
Author: Dexuan Cui <decui@microsoft.com>
Date:   Thu May 4 15:41:55 2023 -0700

    Drivers: hv: vmbus: Call hv_synic_free() if hv_synic_alloc() fails
    
    commit ec97e112985c2581ee61854a4b74f080f6cdfc2c upstream.
    
    Commit 572086325ce9 ("Drivers: hv: vmbus: Cleanup synic memory free path")
    says "Any memory allocations that succeeded will be freed when the caller
    cleans up by calling hv_synic_free()", but if the get_zeroed_page() in
    hv_synic_alloc() fails, currently hv_synic_free() is not really called
    in vmbus_bus_init(), consequently there will be a memory leak, e.g.
    hv_context.hv_numa_map is not freed in the error path. Fix this by
    updating the goto labels.
    
    Cc: stable@kernel.org
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Fixes: 4df4cb9e99f8 ("x86/hyperv: Initialize clockevents earlier in CPU onlining")
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20230504224155.10484-1-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 953dd7e2df8181d5ce4117fca347992d616f0621
Author: Gavin Shan <gshan@redhat.com>
Date:   Thu Jun 15 15:42:59 2023 +1000

    KVM: Avoid illegal stage2 mapping on invalid memory slot
    
    commit 2230f9e1171a2e9731422a14d1bbc313c0b719d1 upstream.
    
    We run into guest hang in edk2 firmware when KSM is kept as running on
    the host. The edk2 firmware is waiting for status 0x80 from QEMU's pflash
    device (TYPE_PFLASH_CFI01) during the operation of sector erasing or
    buffered write. The status is returned by reading the memory region of
    the pflash device and the read request should have been forwarded to QEMU
    and emulated by it. Unfortunately, the read request is covered by an
    illegal stage2 mapping when the guest hang issue occurs. The read request
    is completed with QEMU bypassed and wrong status is fetched. The edk2
    firmware runs into an infinite loop with the wrong status.
    
    The illegal stage2 mapping is populated due to same page sharing by KSM
    at (C) even the associated memory slot has been marked as invalid at (B)
    when the memory slot is requested to be deleted. It's notable that the
    active and inactive memory slots can't be swapped when we're in the middle
    of kvm_mmu_notifier_change_pte() because kvm->mn_active_invalidate_count
    is elevated, and kvm_swap_active_memslots() will busy loop until it reaches
    to zero again. Besides, the swapping from the active to the inactive memory
    slots is also avoided by holding &kvm->srcu in __kvm_handle_hva_range(),
    corresponding to synchronize_srcu_expedited() in kvm_swap_active_memslots().
    
      CPU-A                    CPU-B
      -----                    -----
                               ioctl(kvm_fd, KVM_SET_USER_MEMORY_REGION)
                               kvm_vm_ioctl_set_memory_region
                               kvm_set_memory_region
                               __kvm_set_memory_region
                               kvm_set_memslot(kvm, old, NULL, KVM_MR_DELETE)
                                 kvm_invalidate_memslot
                                   kvm_copy_memslot
                                   kvm_replace_memslot
                                   kvm_swap_active_memslots        (A)
                                   kvm_arch_flush_shadow_memslot   (B)
      same page sharing by KSM
      kvm_mmu_notifier_invalidate_range_start
            :
      kvm_mmu_notifier_change_pte
        kvm_handle_hva_range
        __kvm_handle_hva_range
        kvm_set_spte_gfn            (C)
            :
      kvm_mmu_notifier_invalidate_range_end
    
    Fix the issue by skipping the invalid memory slot at (C) to avoid the
    illegal stage2 mapping so that the read request for the pflash's status
    is forwarded to QEMU and emulated by it. In this way, the correct pflash's
    status can be returned from QEMU to break the infinite loop in the edk2
    firmware.
    
    We tried a git-bisect and the first problematic commit is cd4c71835228 ("
    KVM: arm64: Convert to the gfn-based MMU notifier callbacks"). With this,
    clean_dcache_guest_page() is called after the memory slots are iterated
    in kvm_mmu_notifier_change_pte(). clean_dcache_guest_page() is called
    before the iteration on the memory slots before this commit. This change
    literally enlarges the racy window between kvm_mmu_notifier_change_pte()
    and memory slot removal so that we're able to reproduce the issue in a
    practical test case. However, the issue exists since commit d5d8184d35c9
    ("KVM: ARM: Memory virtualization setup").
    
    Cc: stable@vger.kernel.org # v3.9+
    Fixes: d5d8184d35c9 ("KVM: ARM: Memory virtualization setup")
    Reported-by: Shuai Hu <hshuai@redhat.com>
    Reported-by: Zhenyu Zhang <zhenyzha@redhat.com>
    Signed-off-by: Gavin Shan <gshan@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Shaoqin Huang <shahuang@redhat.com>
    Message-Id: <20230615054259.14911-1-gshan@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d6c93206839b244130f4de1a8b217c321200e91
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Jun 14 17:29:21 2023 +0200

    ACPI: sleep: Avoid breaking S3 wakeup due to might_sleep()
    
    commit 22db06337f590d01d79f60f181d8dfe5a9ef9085 upstream.
    
    The addition of might_sleep() to down_timeout() caused the latter to
    enable interrupts unconditionally in some cases, which in turn broke
    the ACPI S3 wakeup path in acpi_suspend_enter(), where down_timeout()
    is called by acpi_disable_all_gpes() via acpi_ut_acquire_mutex().
    
    Namely, if CONFIG_DEBUG_ATOMIC_SLEEP is set, might_sleep() causes
    might_resched() to be used and if CONFIG_PREEMPT_VOLUNTARY is set,
    this triggers __cond_resched() which may call preempt_schedule_common(),
    so __schedule() gets invoked and it ends up with enabled interrupts (in
    the prev == next case).
    
    Now, enabling interrupts early in the S3 wakeup path causes the kernel
    to crash.
    
    Address this by modifying acpi_suspend_enter() to disable GPEs without
    attempting to acquire the sleeping lock which is not needed in that code
    path anyway.
    
    Fixes: 99409b935c9a ("locking/semaphore: Add might_sleep() to down_*() family")
    Reported-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: 5.15+ <stable@vger.kernel.org> # 5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b12011cea56bd80d52e2d9a6a320ee6ce89034c8
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Fri Jun 9 12:57:32 2023 +0900

    nilfs2: fix buffer corruption due to concurrent device reads
    
    commit 679bd7ebdd315bf457a4740b306ae99f1d0a403d upstream.
    
    As a result of analysis of a syzbot report, it turned out that in three
    cases where nilfs2 allocates block device buffers directly via sb_getblk,
    concurrent reads to the device can corrupt the allocated buffers.
    
    Nilfs2 uses sb_getblk for segment summary blocks, that make up a log
    header, and the super root block, that is the trailer, and when moving and
    writing the second super block after fs resize.
    
    In any of these, since the uptodate flag is not set when storing metadata
    to be written in the allocated buffers, the stored metadata will be
    overwritten if a device read of the same block occurs concurrently before
    the write.  This causes metadata corruption and misbehavior in the log
    write itself, causing warnings in nilfs_btree_assign() as reported.
    
    Fix these issues by setting an uptodate flag on the buffer head on the
    first or before modifying each buffer obtained with sb_getblk, and
    clearing the flag on failure.
    
    When setting the uptodate flag, the lock_buffer/unlock_buffer pair is used
    to perform necessary exclusive control, and the buffer is filled to ensure
    that uninitialized bytes are not mixed into the data read from others.  As
    for buffers for segment summary blocks, they are filled incrementally, so
    if the uptodate flag was unset on their allocation, set the flag and zero
    fill the buffer once at that point.
    
    Also, regarding the superblock move routine, the starting point of the
    memset call to zerofill the block is incorrectly specified, which can
    cause a buffer overflow on file systems with block sizes greater than
    4KiB.  In addition, if the superblock is moved within a large block, it is
    necessary to assume the possibility that the data in the superblock will
    be destroyed by zero-filling before copying.  So fix these potential
    issues as well.
    
    Link: https://lkml.kernel.org/r/20230609035732.20426-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+31837fe952932efc8fb9@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/00000000000030000a05e981f475@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 485f6be2549c5d54e85373ba3cd43215df85b643
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jun 22 15:35:37 2023 +0200

    selftests: mptcp: join: skip check if MIB counter not supported
    
    commit 47867f0a7e831e24e5eab3330667ce9682d50fb1 upstream.
    
    Selftests are supposed to run on any kernels, including the old ones not
    supporting all MPTCP features.
    
    One of them is the MPTCP MIB counters introduced in commit fc518953bc9c
    ("mptcp: add and use MIB counter infrastructure") and more later. The
    MPTCP Join selftest heavily relies on these counters.
    
    If a counter is not supported by the kernel, it is not displayed when
    using 'nstat -z'. We can then detect that and skip the verification. A
    new helper (get_counter()) has been added to do the required checks and
    return an error if the counter is not available.
    
    Note that if we expect to have these features available and if
    SELFTESTS_MPTCP_LIB_EXPECT_ALL_FEATURES env var is set to 1, the tests
    will be marked as failed instead of skipped.
    
    This new helper also makes sure we get the exact counter we want to
    avoid issues we had in the past, e.g. with MPTcpExtRmAddr and
    MPTcpExtRmAddrDrop sharing the same prefix. While at it, we uniform the
    way we fetch a MIB counter.
    
    Note for the backports: we rarely change these modified blocks so if
    there is are conflicts, it is very likely because a counter is not used
    in the older kernels and we don't need that chunk.
    
    Link: https://github.com/multipath-tcp/mptcp_net-next/issues/368
    Fixes: b08fbf241064 ("selftests: add test-cases for MPTCP MP_JOIN")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64cb73ea77abfdacae2a111194989b726b9ddb83
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jun 22 15:34:31 2023 +0200

    selftests: mptcp: join: use 'iptables-legacy' if available
    
    commit 0c4cd3f86a40028845ad6f8af5b37165666404cd upstream.
    
    IPTables commands using 'iptables-nft' fail on old kernels, at least
    5.15 because it doesn't see the default IPTables chains:
    
      $ iptables -L
      iptables/1.8.2 Failed to initialize nft: Protocol not supported
    
    As a first step before switching to NFTables, we can use iptables-legacy
    if available.
    
    Link: https://github.com/multipath-tcp/mptcp_net-next/issues/368
    Fixes: 8d014eaa9254 ("selftests: mptcp: add ADD_ADDR timeout test case")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 979a941d7ed30577d93555bb028fc6c9b366f7d5
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jun 22 13:55:38 2023 +0200

    selftests: mptcp: pm nl: remove hardcoded default limits
    
    commit 2177d0b08e421971e035672b70f3228d9485c650 upstream.
    
    Selftests are supposed to run on any kernels, including the old ones not
    supporting all MPTCP features.
    
    One of them is the checks of the default limits returned by the MPTCP
    in-kernel path-manager. The default values have been modified by commit
    72bcbc46a5c3 ("mptcp: increase default max additional subflows to 2").
    Instead of comparing with hardcoded values, we can get the default one
    and compare with them.
    
    Note that if we expect to have the latest version, we continue to check
    the hardcoded values to avoid unexpected behaviour changes.
    
    Link: https://github.com/multipath-tcp/mptcp_net-next/issues/368
    Fixes: eedbc685321b ("selftests: add PM netlink functional tests")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac65930751c4dadef6b4f747cda001ecf27f2fb9
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Mon Feb 13 11:20:07 2023 -0700

    selftests/mount_setattr: fix redefine struct mount_attr build error
    
    commit d8e45bf1aed2e5fddd8985b5bb1aaf774a97aba8 upstream.
    
    Fix the following build error due to redefining struct mount_attr by
    removing duplicate define from mount_setattr_test.c
    
    gcc -g -isystem .../tools/testing/selftests/../../../usr/include -Wall -O2 -pthread     mount_setattr_test.c  -o .../tools/testing/selftests/mount_setattr/mount_setattr_test
    mount_setattr_test.c:107:8: error: redefinition of âstruct mount_attrâ
      107 | struct mount_attr {
          |        ^~~~~~~~~~
    In file included from /usr/include/x86_64-linux-gnu/sys/mount.h:32,
                     from mount_setattr_test.c:10:
    .../usr/include/linux/mount.h:129:8: note: originally defined here
      129 | struct mount_attr {
          |        ^~~~~~~~~~
    make: *** [../lib.mk:145: .../tools/testing/selftests/mount_setattr/mount_setattr_test] Error 1
    
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: Hardik Garg <hargar@linux.microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 726d033133e7edf8326aeebe52951e9569c70e39
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Sat Jun 10 18:11:36 2023 +0200

    selftests: mptcp: lib: skip if not below kernel version
    
    commit b1a6a38ab8a633546cefae890da842f19e006c74 upstream.
    
    Selftests are supposed to run on any kernels, including the old ones not
    supporting all MPTCP features.
    
    A new function is now available to easily detect if a feature is
    missing by looking at the kernel version. That's clearly not ideal and
    this kind of check should be avoided as soon as possible. But sometimes,
    there are no external sign that a "feature" is available or not:
    internal behaviours can change without modifying the uAPI and these
    selftests are verifying the internal behaviours. Sometimes, the only
    (easy) way to verify if the feature is present is to run the test but
    then the validation cannot determine if there is a failure with the
    feature or if the feature is missing. Then it looks better to check the
    kernel version instead of having tests that can never fail. In any case,
    we need a solution not to have a whole selftest being marked as failed
    just because one sub-test has failed.
    
    Note that this env var car be set to 1 not to do such check and run the
    linked sub-test: SELFTESTS_MPTCP_LIB_NO_KVERSION_CHECK.
    
    This new helper is going to be used in the following commits. In order
    to ease the backport of such future patches, it would be good if this
    patch is backported up to the introduction of MPTCP selftests, hence the
    Fixes tag below: this type of check was supposed to be done from the
    beginning.
    
    Link: https://github.com/multipath-tcp/mptcp_net-next/issues/368
    Fixes: 048d19d444be ("mptcp: add basic kselftest for mptcp")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b28fc26683b4d6f5ec8e0f2a3ad193c92799029b
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jun 8 18:38:43 2023 +0200

    selftests: mptcp: lib: skip if missing symbol
    
    commit 673004821ab98c6645bd21af56a290854e88f533 upstream.
    
    Selftests are supposed to run on any kernels, including the old ones not
    supporting all MPTCP features.
    
    New functions are now available to easily detect if a certain feature is
    missing by looking at kallsyms.
    
    These new helpers are going to be used in the following commits. In
    order to ease the backport of such future patches, it would be good if
    this patch is backported up to the introduction of MPTCP selftests,
    hence the Fixes tag below: this type of check was supposed to be done
    from the beginning.
    
    Link: https://github.com/multipath-tcp/mptcp_net-next/issues/368
    Fixes: 048d19d444be ("mptcp: add basic kselftest for mptcp")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 024a24e5d4dd77b785af139897fbcb77b4e420fc
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 15 11:18:30 2023 +0200

    tick/common: Align tick period during sched_timer setup
    
    commit 13bb06f8dd42071cb9a49f6e21099eea05d4b856 upstream.
    
    The tick period is aligned very early while the first clock_event_device is
    registered. At that point the system runs in periodic mode and switches
    later to one-shot mode if possible.
    
    The next wake-up event is programmed based on the aligned value
    (tick_next_period) but the delta value, that is used to program the
    clock_event_device, is computed based on ktime_get().
    
    With the subtracted offset, the device fires earlier than the exact time
    frame. With a large enough offset the system programs the timer for the
    next wake-up and the remaining time left is too small to make any boot
    progress. The system hangs.
    
    Move the alignment later to the setup of tick_sched timer. At this point
    the system switches to oneshot mode and a high resolution clocksource is
    available. At this point it is safe to align tick_next_period because
    ktime_get() will now return accurate (not jiffies based) time.
    
    [bigeasy: Patch description + testing].
    
    Fixes: e9523a0d81899 ("tick/common: Align tick period with the HZ tick.")
    Reported-by: Mathias Krause <minipli@grsecurity.net>
    Reported-by: "Bhatnagar, Rishabh" <risbhat@amazon.com>
    Suggested-by: Mathias Krause <minipli@grsecurity.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Richard W.M. Jones <rjones@redhat.com>
    Tested-by: Mathias Krause <minipli@grsecurity.net>
    Acked-by: SeongJae Park <sj@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/5a56290d-806e-b9a5-f37c-f21958b5a8c0@grsecurity.net
    Link: https://lore.kernel.org/12c6f9a3-d087-b824-0d05-0d18c9bc1bf3@amazon.com
    Link: https://lore.kernel.org/r/20230615091830.RxMV2xf_@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c1aa91b37f9ecee11747e6dc2341ede7b60d526
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Feb 23 11:36:08 2023 -0700

    drm/amd/display: Add wrapper to call planes and stream update
    
    commit 81f743a08f3b214638aa389e252ae5e6c3592e7c upstream.
    
    [Why & How]
    This commit is part of a sequence of changes that replaces the commit
    sequence used in the DC with a new one. As a result of this transition,
    we moved some specific parts from the commit sequence and brought them
    to amdgpu_dm. This commit adds a wrapper inside DM that enable our
    drivers to do any necessary preparation or change before we offload the
    plane/stream update to DC.
    
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eea850c025b5c86a16533056ce871a863b5d726c
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Oct 6 16:40:55 2022 -0400

    drm/amd/display: Use dc_update_planes_and_stream
    
    commit f7511289821ffccc07579406d6ab520aa11049f5 upstream.
    
    [Why & How]
    The old dc_commit_updates_for_stream lacks manipulation for many corner
    cases where the DC feature requires special attention; as a result, it
    starts to show its limitation (e.g., the SubVP feature is not supported
    by it, among other cases). To modernize and unify our internal API, this
    commit replaces the old dc_commit_updates_for_stream with
    dc_update_planes_and_stream, which has more features.
    
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb7c68bbccad1a92d9078a5b2160d448da542b7a
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Mon Jun 20 16:37:07 2022 -0400

    drm/amd/display: Add minimal pipe split transition state
    
    commit 97ca308925a50aa80711ccfaf814fa3898374862 upstream.
    
    [WHY?]
    When adding/removing a plane to some configurations, unsupported pipe
    programming can occur when moving to a new plane.  Such cases include pipe
    split on multi-display, with MPO, and/or ODM.
    
    [HOW?]
    Add a safe transistion state that minimizes pipe usage before programming
    new configuration. When adding a plane, the current state has the least
    pipes required so it is applied without splitting.  This must be applied
    prior to updating the plane_state for seamless transition.  When removing a
    plane, the new state has the least pieps required so it is applied without
    splitting.
    
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5f0e898f674713397e096afc933ddafbe7be963
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:35 2022 +0100

    tpm, tpm_tis: Claim locality in interrupt handler
    
    commit 0e069265bce5a40c4eee52e2364bbbd4dabee94a upstream.
    
    Writing the TPM_INT_STATUS register in the interrupt handler to clear the
    interrupts only has effect if a locality is held. Since this is not
    guaranteed at the time the interrupt is fired, claim the locality
    explicitly in the handler.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael NiewÃ¶hner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39e787253720f8983cb5e0a370f0e3fe6d1dbac1
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Nov 23 14:25:57 2022 -0500

    tracing: Add tracing_reset_all_online_cpus_unlocked() function
    
    commit e18eb8783ec4949adebc7d7b0fdb65f65bfeefd9 upstream.
    
    Currently the tracing_reset_all_online_cpus() requires the
    trace_types_lock held. But only one caller of this function actually has
    that lock held before calling it, and the other just takes the lock so
    that it can call it. More users of this function is needed where the lock
    is not held.
    
    Add a tracing_reset_all_online_cpus_unlocked() function for the one use
    case that calls it without being held, and also add a lockdep_assert to
    make sure it is held when called.
    
    Then have tracing_reset_all_online_cpus() take the lock internally, such
    that callers do not need to worry about taking it.
    
    Link: https://lkml.kernel.org/r/20221123192741.658273220@goodmis.org
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a24be76af79d9aa4d84cef2ca5a1147d35be019
Author: Tom Chung <chiahsuan.chung@amd.com>
Date:   Mon May 29 18:00:09 2023 +0800

    drm/amd/display: fix the system hang while disable PSR
    
    [ Upstream commit ea2062dd1f0384ae1b136d333ee4ced15bedae38 ]
    
    [Why]
    When the PSR enabled. If you try to adjust the timing parameters,
    it may cause system hang. Because the timing mismatch with the
    DMCUB settings.
    
    [How]
    Disable the PSR before adjusting timing parameters.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Signed-off-by: Tom Chung <chiahsuan.chung@amd.com>
    Reviewed-by: Wayne Lin <Wayne.Lin@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

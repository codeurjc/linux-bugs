commit d9790301361c52921c6e5bdf155fe0d3bf7a207d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Dec 8 11:28:45 2022 +0100

    Linux 5.15.82
    
    Link: https://lore.kernel.org/r/20221205190806.528972574@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Link: https://lore.kernel.org/r/20221206124052.595650754@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20221206163439.841627689@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Kelsey Steele <kelseysteele@linux.microsoft.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48642f94311b0cf9667aa6833f9f5e3a87d2a0ce
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 5 12:09:06 2022 -0800

    proc: proc_skip_spaces() shouldn't think it is working on C strings
    
    commit bce9332220bd677d83b19d21502776ad555a0e73 upstream.
    
    proc_skip_spaces() seems to think it is working on C strings, and ends
    up being just a wrapper around skip_spaces() with a really odd calling
    convention.
    
    Instead of basing it on skip_spaces(), it should have looked more like
    proc_skip_char(), which really is the exact same function (except it
    skips a particular character, rather than whitespace).  So use that as
    inspiration, odd coding and all.
    
    Now the calling convention actually makes sense and works for the
    intended purpose.
    
    Reported-and-tested-by: Kyle Zeng <zengyhkyle@gmail.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3eb9213f66127fbccd56dd4d36c4b47f3302dbf7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 5 11:33:40 2022 -0800

    proc: avoid integer type confusion in get_proc_long
    
    commit e6cfaf34be9fcd1a8285a294e18986bfc41a409c upstream.
    
    proc_get_long() is passed a size_t, but then assigns it to an 'int'
    variable for the length.  Let's not do that, even if our IO paths are
    limited to MAX_RW_COUNT (exactly because of these kinds of type errors).
    
    So do the proper test in the rigth type.
    
    Reported-by: Kyle Zeng <zengyhkyle@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a4073a2e2fe392db08c00c39fdc5e2f8f198547
Author: Jann Horn <jannh@google.com>
Date:   Mon Dec 5 17:59:27 2022 +0100

    ipc/sem: Fix dangling sem_array access in semtimedop race
    
    commit b52be557e24c47286738276121177a41f54e3b83 upstream.
    
    When __do_semtimedop() goes to sleep because it has to wait for a
    semaphore value becoming zero or becoming bigger than some threshold, it
    links the on-stack sem_queue to the sem_array, then goes to sleep
    without holding a reference on the sem_array.
    
    When __do_semtimedop() comes back out of sleep, one of two things must
    happen:
    
     a) We prove that the on-stack sem_queue has been disconnected from the
        (possibly freed) sem_array, making it safe to return from the stack
        frame that the sem_queue exists in.
    
     b) We stabilize our reference to the sem_array, lock the sem_array, and
        detach the sem_queue from the sem_array ourselves.
    
    sem_array has RCU lifetime, so for case (b), the reference can be
    stabilized inside an RCU read-side critical section by locklessly
    checking whether the sem_queue is still connected to the sem_array.
    
    However, the current code does the lockless check on sem_queue before
    starting an RCU read-side critical section, so the result of the
    lockless check immediately becomes useless.
    
    Fix it by doing rcu_read_lock() before the lockless check.  Now RCU
    ensures that if we observe the object being on our queue, the object
    can't be freed until rcu_read_unlock().
    
    This bug is only hittable on kernel builds with full preemption support
    (either CONFIG_PREEMPT or PREEMPT_DYNAMIC with preempt=full).
    
    Fixes: 370b262c896e ("ipc/sem: avoid idr tree lookup for interrupted semop")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53b9b1201e34ccc895971218559123625c56fbcd
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Fri Dec 2 15:37:46 2022 -0800

    Input: raydium_ts_i2c - fix memory leak in raydium_i2c_send()
    
    commit 8c9a59939deb4bfafdc451100c03d1e848b4169b upstream.
    
    There is a kmemleak when test the raydium_i2c_ts with bpf mock device:
    
      unreferenced object 0xffff88812d3675a0 (size 8):
        comm "python3", pid 349, jiffies 4294741067 (age 95.695s)
        hex dump (first 8 bytes):
          11 0e 10 c0 01 00 04 00                          ........
        backtrace:
          [<0000000068427125>] __kmalloc+0x46/0x1b0
          [<0000000090180f91>] raydium_i2c_send+0xd4/0x2bf [raydium_i2c_ts]
          [<000000006e631aee>] raydium_i2c_initialize.cold+0xbc/0x3e4 [raydium_i2c_ts]
          [<00000000dc6fcf38>] raydium_i2c_probe+0x3cd/0x6bc [raydium_i2c_ts]
          [<00000000a310de16>] i2c_device_probe+0x651/0x680
          [<00000000f5a96bf3>] really_probe+0x17c/0x3f0
          [<00000000096ba499>] __driver_probe_device+0xe3/0x170
          [<00000000c5acb4d9>] driver_probe_device+0x49/0x120
          [<00000000264fe082>] __device_attach_driver+0xf7/0x150
          [<00000000f919423c>] bus_for_each_drv+0x114/0x180
          [<00000000e067feca>] __device_attach+0x1e5/0x2d0
          [<0000000054301fc2>] bus_probe_device+0x126/0x140
          [<00000000aad93b22>] device_add+0x810/0x1130
          [<00000000c086a53f>] i2c_new_client_device+0x352/0x4e0
          [<000000003c2c248c>] of_i2c_register_device+0xf1/0x110
          [<00000000ffec4177>] of_i2c_notify+0x100/0x160
      unreferenced object 0xffff88812d3675c8 (size 8):
        comm "python3", pid 349, jiffies 4294741070 (age 95.692s)
        hex dump (first 8 bytes):
          22 00 36 2d 81 88 ff ff                          ".6-....
        backtrace:
          [<0000000068427125>] __kmalloc+0x46/0x1b0
          [<0000000090180f91>] raydium_i2c_send+0xd4/0x2bf [raydium_i2c_ts]
          [<000000001d5c9620>] raydium_i2c_initialize.cold+0x223/0x3e4 [raydium_i2c_ts]
          [<00000000dc6fcf38>] raydium_i2c_probe+0x3cd/0x6bc [raydium_i2c_ts]
          [<00000000a310de16>] i2c_device_probe+0x651/0x680
          [<00000000f5a96bf3>] really_probe+0x17c/0x3f0
          [<00000000096ba499>] __driver_probe_device+0xe3/0x170
          [<00000000c5acb4d9>] driver_probe_device+0x49/0x120
          [<00000000264fe082>] __device_attach_driver+0xf7/0x150
          [<00000000f919423c>] bus_for_each_drv+0x114/0x180
          [<00000000e067feca>] __device_attach+0x1e5/0x2d0
          [<0000000054301fc2>] bus_probe_device+0x126/0x140
          [<00000000aad93b22>] device_add+0x810/0x1130
          [<00000000c086a53f>] i2c_new_client_device+0x352/0x4e0
          [<000000003c2c248c>] of_i2c_register_device+0xf1/0x110
          [<00000000ffec4177>] of_i2c_notify+0x100/0x160
    
    After BANK_SWITCH command from i2c BUS, no matter success or error
    happened, the tx_buf should be freed.
    
    Fixes: 3b384bd6c3f2 ("Input: raydium_ts_i2c - do not split tx transactions")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Link: https://lore.kernel.org/r/20221202103412.2120169-1-zhangxiaoxu5@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 571b6bbbf54d835ea6120f65575cb55cd767e603
Author: Jan Dabros <jsd@semihalf.com>
Date:   Mon Nov 28 20:56:51 2022 +0100

    char: tpm: Protect tpm_pm_suspend with locks
    
    commit 23393c6461422df5bf8084a086ada9a7e17dc2ba upstream.
    
    Currently tpm transactions are executed unconditionally in
    tpm_pm_suspend() function, which may lead to races with other tpm
    accessors in the system.
    
    Specifically, the hw_random tpm driver makes use of tpm_get_random(),
    and this function is called in a loop from a kthread, which means it's
    not frozen alongside userspace, and so can race with the work done
    during system suspend:
    
      tpm tpm0: tpm_transmit: tpm_recv: error -52
      tpm tpm0: invalid TPM_STS.x 0xff, dumping stack for forensics
      CPU: 0 PID: 1 Comm: init Not tainted 6.1.0-rc5+ #135
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.0-20220807_005459-localhost 04/01/2014
      Call Trace:
       tpm_tis_status.cold+0x19/0x20
       tpm_transmit+0x13b/0x390
       tpm_transmit_cmd+0x20/0x80
       tpm1_pm_suspend+0xa6/0x110
       tpm_pm_suspend+0x53/0x80
       __pnp_bus_suspend+0x35/0xe0
       __device_suspend+0x10f/0x350
    
    Fix this by calling tpm_try_get_ops(), which itself is a wrapper around
    tpm_chip_start(), but takes the appropriate mutex.
    
    Signed-off-by: Jan Dabros <jsd@semihalf.com>
    Reported-by: Vlastimil Babka <vbabka@suse.cz>
    Tested-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Tested-by: Vlastimil Babka <vbabka@suse.cz>
    Link: https://lore.kernel.org/all/c5ba47ef-393f-1fba-30bd-1230d1b4b592@suse.cz/
    Cc: stable@vger.kernel.org
    Fixes: e891db1a18bf ("tpm: turn on TPM on suspend for TPM 1.x")
    [Jason: reworked commit message, added metadata]
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f39891cfe79b0d55096b43f0d051bb5126e9b010
Author: Conor Dooley <conor.dooley@microchip.com>
Date:   Tue Nov 22 12:16:21 2022 +0000

    Revert "clocksource/drivers/riscv: Events are stopped during CPU suspend"
    
    [ Upstream commit d9f15a9de44affe733e34f93bc184945ba277e6d ]
    
    This reverts commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d.
    
    On the subject of suspend, the RISC-V SBI spec states:
    
      This does not cover whether any given events actually reach the hart or
      not, just what the hart will do if it receives an event. On PolarFire
      SoC, and potentially other SiFive based implementations, events from the
      RISC-V timer do reach a hart during suspend. This is not the case for the
      implementation on the Allwinner D1 - there timer events are not received
      during suspend.
    
    To fix this, the CLOCK_EVT_FEAT_C3STOP (mis)feature was enabled for the
    timer driver - but this has broken both RCU stall detection and timers
    generally on PolarFire SoC and potentially other SiFive based
    implementations.
    
    If an AXI read to the PCIe controller on PolarFire SoC times out, the
    system will stall, however, with CLOCK_EVT_FEAT_C3STOP active, the system
    just locks up without RCU stalling:
    
            io scheduler mq-deadline registered
            io scheduler kyber registered
            microchip-pcie 2000000000.pcie: host bridge /soc/pcie@2000000000 ranges:
            microchip-pcie 2000000000.pcie:      MEM 0x2008000000..0x2087ffffff -> 0x0008000000
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: axi read request error
            microchip-pcie 2000000000.pcie: axi read timeout
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            Freeing initrd memory: 7332K
    
    Similarly issues were reported with clock_nanosleep() - with a test app
    that sleeps each cpu for 6, 5, 4, 3 ms respectively, HZ=250 & the blamed
    commit in place, the sleep times are rounded up to the next jiffy:
    
    == CPU: 1 ==      == CPU: 2 ==      == CPU: 3 ==      == CPU: 4 ==
    Mean: 7.974992    Mean: 7.976534    Mean: 7.962591    Mean: 3.952179
    Std Dev: 0.154374 Std Dev: 0.156082 Std Dev: 0.171018 Std Dev: 0.076193
    Hi: 9.472000      Hi: 10.495000     Hi: 8.864000      Hi: 4.736000
    Lo: 6.087000      Lo: 6.380000      Lo: 4.872000      Lo: 3.403000
    Samples: 521      Samples: 521      Samples: 521      Samples: 521
    
    Fortunately, the D1 has a second timer, which is "currently used in
    preference to the RISC-V/SBI timer driver" so a revert here does not
    hurt operation of D1 in its current form.
    
    Ultimately, a DeviceTree property (or node) will be added to encode the
    behaviour of the timers, but until then revert the addition of
    CLOCK_EVT_FEAT_C3STOP.
    
    Fixes: 232ccac1bd9b ("clocksource/drivers/riscv: Events are stopped during CPU suspend")
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Samuel Holland <samuel@sholland.org>
    Link: https://lore.kernel.org/linux-riscv/YzYTNQRxLr7Q9JR0@spud/
    Link: https://github.com/riscv-non-isa/riscv-sbi-doc/issues/98/
    Link: https://lore.kernel.org/linux-riscv/bf6d3b1f-f703-4a25-833e-972a44a04114@sholland.org/
    Link: https://lore.kernel.org/r/20221122121620.3522431-1-conor.dooley@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a759057af7285263093ab10b0bac3e14f35e5fea
Author: Vishal Verma <vishal.l.verma@intel.com>
Date:   Wed Nov 16 16:37:37 2022 -0700

    ACPI: HMAT: Fix initiator registration for single-initiator systems
    
    [ Upstream commit 48d4180939e12c4bd2846f984436d895bb9699ed ]
    
    In a system with a single initiator node, and one or more memory-only
    'target' nodes, the memory-only node(s) would fail to register their
    initiator node correctly. i.e. in sysfs:
    
      # ls /sys/devices/system/node/node0/access0/targets/
      node0
    
    Where as the correct behavior should be:
    
      # ls /sys/devices/system/node/node0/access0/targets/
      node0 node1
    
    This happened because hmat_register_target_initiators() uses list_sort()
    to sort the initiator list, but the sort comparision function
    (initiator_cmp()) is overloaded to also set the node mask's bits.
    
    In a system with a single initiator, the list is singular, and list_sort
    elides the comparision helper call. Thus the node mask never gets set,
    and the subsequent search for the best initiator comes up empty.
    
    Add a new helper to consume the sorted initiator list, and generate the
    nodemask, decoupling it from the overloaded initiator_cmp() comparision
    callback. This prevents the singular list corner case naturally, and
    makes the code easier to follow as well.
    
    Cc: <stable@vger.kernel.org>
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Liu Shixin <liushixin2@huawei.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reported-by: Chris Piper <chris.d.piper@intel.com>
    Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Link: https://lore.kernel.org/r/20221116-acpi_hmat_fix-v2-2-3712569be691@intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da8a794d71ec99ee92bde4e174d6a6169c00b381
Author: Vishal Verma <vishal.l.verma@intel.com>
Date:   Wed Nov 16 16:37:36 2022 -0700

    ACPI: HMAT: remove unnecessary variable initialization
    
    [ Upstream commit 14f16d47561ba9249efc6c2db9d47ed56841f070 ]
    
    In hmat_register_target_initiators(), the variable 'best' gets
    initialized in the outer per-locality-type for loop. The initialization
    just before setting up 'Access 1' targets was unnecessary. Remove it.
    
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Liu Shixin <liushixin2@huawei.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
    Link: https://lore.kernel.org/r/20221116-acpi_hmat_fix-v2-1-3712569be691@intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Stable-dep-of: 48d4180939e1 ("ACPI: HMAT: Fix initiator registration for single-initiator systems")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d16161a2c98730dc56d456e6dd1702a0a9fe735
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Thu Nov 10 00:59:02 2022 +0100

    i2c: imx: Only DMA messages with I2C_M_DMA_SAFE flag set
    
    [ Upstream commit d36678f7905cbd1dc55a8a96e066dafd749d4600 ]
    
    Recent changes to the DMA code has resulting in the IMX driver failing
    I2C transfers when the buffer has been vmalloc. Only perform DMA
    transfers if the message has the I2C_M_DMA_SAFE flag set, indicating
    the client is providing a buffer which is DMA safe.
    
    This is a minimal fix for stable. The I2C core provides helpers to
    allocate a bounce buffer. For a fuller fix the master should make use
    of these helpers.
    
    Fixes: 4544b9f25e70 ("dma-mapping: Add vmap checks to dma_map_single()")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 950a05cb15e3cf1769b9e093f0f0dbb7e261e5d7
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Nov 9 11:22:50 2022 +0000

    i2c: npcm7xx: Fix error handling in npcm_i2c_init()
    
    [ Upstream commit 145900cf91c4b32ac05dbc8675a0c7f4a278749d ]
    
    A problem about i2c-npcm7xx create debugfs failed is triggered with the
    following log given:
    
     [  173.827310] debugfs: Directory 'npcm_i2c' with parent '/' already present!
    
    The reason is that npcm_i2c_init() returns platform_driver_register()
    directly without checking its return value, if platform_driver_register()
    failed, it returns without destroy the newly created debugfs, resulting
    the debugfs of npcm_i2c can never be created later.
    
     npcm_i2c_init()
       debugfs_create_dir() # create debugfs directory
       platform_driver_register()
         driver_register()
           bus_add_driver()
             priv = kzalloc(...) # OOM happened
       # return without destroy debugfs directory
    
    Fix by removing debugfs when platform_driver_register() returns error.
    
    Fixes: 56a1485b102e ("i2c: npcm7xx: Add Nuvoton NPCM I2C controller driver")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Tali Perry <tali.perry@nuvoton.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db3f8da033d9e491902b8646461f5e9f131abbce
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Sep 11 11:02:03 2022 +0200

    serial: stm32: Deassert Transmit Enable on ->rs485_config()
    
    [ Upstream commit adafbbf6895eb0ce41a313c6ee68870ab9aa93cd ]
    
    The STM32 USART can control RS-485 Transmit Enable in hardware.  Since
    commit 7df5081cbf5e ("serial: stm32: Add RS485 RTS GPIO control"),
    it can alternatively be controlled in software.  That was done to allow
    RS-485 even if the RTS pin is unavailable because it's pinmuxed to a
    different function.
    
    However the commit neglected to deassert Transmit Enable upon invocation
    of the ->rs485_config() callback.  Fix it.
    
    Avoid forward declarations by moving stm32_usart_tx_empty(),
    stm32_usart_rs485_rts_enable() and stm32_usart_rs485_rts_disable()
    further up in the driver.
    
    Fixes: 7df5081cbf5e ("serial: stm32: Add RS485 RTS GPIO control")
    Cc: stable@vger.kernel.org # v5.9+
    Cc: Marek Vasut <marex@denx.de>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://lore.kernel.org/r/6059eab35dba394468335ef640df8b0050fd9dbd.1662886616.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45f628f4fd816f4843f6860996fcaa2b461165d1
Author: Marek Vasut <marex@denx.de>
Date:   Sat Apr 30 18:28:45 2022 +0200

    serial: stm32: Use TC interrupt to deassert GPIO RTS in RS485 mode
    
    [ Upstream commit d7c76716169ddc37cf6316ff381d34ea807fbfd7 ]
    
    In case the RS485 mode is emulated using GPIO RTS, use the TC interrupt
    to deassert the GPIO RTS, otherwise the GPIO RTS stays asserted after a
    transmission ended and the RS485 cannot work.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Cc: Erwan Le Ray <erwan.leray@foss.st.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jean Philippe Romain <jean-philippe.romain@foss.st.com>
    Cc: Valentin Caron <valentin.caron@foss.st.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-stm32@st-md-mailman.stormreply.com
    To: linux-serial@vger.kernel.org
    Link: https://lore.kernel.org/r/20220430162845.244655-2-marex@denx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c60eae5b1d0b0ea4d09119d14c6860df60ed26c1
Author: Marek Vasut <marex@denx.de>
Date:   Sat Apr 30 18:28:44 2022 +0200

    serial: stm32: Factor out GPIO RTS toggling into separate function
    
    [ Upstream commit 3bcea529b295a993b1b05db63f245ae8030c5acf ]
    
    Pull out the GPIO RTS enable and disable handling into separate function.
    Limit the scope of GPIO RTS toggling only to GPIO emulated RS485 too.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Cc: Erwan Le Ray <erwan.leray@foss.st.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jean Philippe Romain <jean-philippe.romain@foss.st.com>
    Cc: Valentin Caron <valentin.caron@foss.st.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-stm32@st-md-mailman.stormreply.com
    To: linux-serial@vger.kernel.org
    Link: https://lore.kernel.org/r/20220430162845.244655-1-marex@denx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 041f8dc882925e8d5286bd5035e6cb98293ca809
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Thu Nov 24 23:09:32 2022 +0200

    ipv4: Fix route deletion when nexthop info is not specified
    
    [ Upstream commit d5082d386eee7e8ec46fa8581932c81a4961dcef ]
    
    When the kernel receives a route deletion request from user space it
    tries to delete a route that matches the route attributes specified in
    the request.
    
    If only prefix information is specified in the request, the kernel
    should delete the first matching FIB alias regardless of its associated
    FIB info. However, an error is currently returned when the FIB info is
    backed by a nexthop object:
    
     # ip nexthop add id 1 via 192.0.2.2 dev dummy10
     # ip route add 198.51.100.0/24 nhid 1
     # ip route del 198.51.100.0/24
     RTNETLINK answers: No such process
    
    Fix by matching on such a FIB info when legacy nexthop attributes are
    not specified in the request. An earlier check already covers the case
    where a nexthop ID is specified in the request.
    
    Add tests that cover these flows. Before the fix:
    
     # ./fib_nexthops.sh -t ipv4_fcnal
     ...
     TEST: Delete route when not specifying nexthop attributes           [FAIL]
    
     Tests passed:  11
     Tests failed:   1
    
    After the fix:
    
     # ./fib_nexthops.sh -t ipv4_fcnal
     ...
     TEST: Delete route when not specifying nexthop attributes           [ OK ]
    
     Tests passed:  12
     Tests failed:   0
    
    No regressions in other tests:
    
     # ./fib_nexthops.sh
     ...
     Tests passed: 228
     Tests failed:   0
    
     # ./fib_tests.sh
     ...
     Tests passed: 186
     Tests failed:   0
    
    Cc: stable@vger.kernel.org
    Reported-by: Jonas Gorski <jonas.gorski@gmail.com>
    Tested-by: Jonas Gorski <jonas.gorski@gmail.com>
    Fixes: 493ced1ac47c ("ipv4: Allow routes to use nexthop objects")
    Fixes: 6bf92d70e690 ("net: ipv4: fix route with nexthop object delete warning")
    Fixes: 61b91eb33a69 ("ipv4: Handle attempt to delete multipath route when fib_info contains an nh reference")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Nikolay Aleksandrov <razor@blackwall.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20221124210932.2470010-1-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25174d91e4a32a24204060d283bd5fa6d0ddf133
Author: David Ahern <dsahern@kernel.org>
Date:   Thu Oct 6 10:48:49 2022 -0600

    ipv4: Handle attempt to delete multipath route when fib_info contains an nh reference
    
    [ Upstream commit 61b91eb33a69c3be11b259c5ea484505cd79f883 ]
    
    Gwangun Jung reported a slab-out-of-bounds access in fib_nh_match:
        fib_nh_match+0xf98/0x1130 linux-6.0-rc7/net/ipv4/fib_semantics.c:961
        fib_table_delete+0x5f3/0xa40 linux-6.0-rc7/net/ipv4/fib_trie.c:1753
        inet_rtm_delroute+0x2b3/0x380 linux-6.0-rc7/net/ipv4/fib_frontend.c:874
    
    Separate nexthop objects are mutually exclusive with the legacy
    multipath spec. Fix fib_nh_match to return if the config for the
    to be deleted route contains a multipath spec while the fib_info
    is using a nexthop object.
    
    Fixes: 493ced1ac47c ("ipv4: Allow routes to use nexthop objects")
    Fixes: 6bf92d70e690 ("net: ipv4: fix route with nexthop object delete warning")
    Reported-by: Gwangun Jung <exsociety@gmail.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Tested-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: d5082d386eee ("ipv4: Fix route deletion when nexthop info is not specified")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0ad247e55ea5a9dd40115a152bf4fde24a81bab
Author: Nikolay Aleksandrov <razor@blackwall.org>
Date:   Fri Apr 1 18:54:27 2022 +0300

    selftests: net: fix nexthop warning cleanup double ip typo
    
    [ Upstream commit 692930cc435099580a4b9e32fa781b0688c18439 ]
    
    I made a stupid typo when adding the nexthop route warning selftest and
    added both $IP and ip after it (double ip) on the cleanup path. The
    error doesn't show up when running the test, but obviously it doesn't
    cleanup properly after it.
    
    Fixes: 392baa339c6a ("selftests: net: add delete nexthop route warning test")
    Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: d5082d386eee ("ipv4: Fix route deletion when nexthop info is not specified")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 532847b69c29943460aa928ce7267c63501a94e1
Author: Nikolay Aleksandrov <razor@blackwall.org>
Date:   Fri Apr 1 10:33:43 2022 +0300

    selftests: net: add delete nexthop route warning test
    
    [ Upstream commit 392baa339c6a42a2cb088e5e5df2b59b8f89be24 ]
    
    Add a test which causes a WARNING on kernels which treat a
    nexthop route like a normal route when comparing for deletion and a
    device is specified. That is, a route is found but we hit a warning while
    matching it. The warning is from fib_info_nh() in include/net/nexthop.h
    because we run it on a fib_info with nexthop object. The call chain is:
     inet_rtm_delroute -> fib_table_delete -> fib_nh_match (called with a
    nexthop fib_info and also with fc_oif set thus calling fib_info_nh on
    the fib_info and triggering the warning).
    
    Repro steps:
     $ ip nexthop add id 12 via 172.16.1.3 dev veth1
     $ ip route add 172.16.101.1/32 nhid 12
     $ ip route delete 172.16.101.1/32 dev veth1
    
    Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: d5082d386eee ("ipv4: Fix route deletion when nexthop info is not specified")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0783558817d7fcac060c0602afe5764e3392f93
Author: Lee Jones <lee@kernel.org>
Date:   Fri Nov 25 12:07:50 2022 +0000

    Kconfig.debug: provide a little extra FRAME_WARN leeway when KASAN is enabled
    
    [ Upstream commit 152fe65f300e1819d59b80477d3e0999b4d5d7d2 ]
    
    When enabled, KASAN enlarges function's stack-frames.  Pushing quite a few
    over the current threshold.  This can mainly be seen on 32-bit
    architectures where the present limit (when !GCC) is a lowly 1024-Bytes.
    
    Link: https://lkml.kernel.org/r/20221125120750.3537134-3-lee@kernel.org
    Signed-off-by: Lee Jones <lee@kernel.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Christian König" <christian.koenig@amd.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: David Airlie <airlied@gmail.com>
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Leo Li <sunpeng.li@amd.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Maxime Ripard <mripard@kernel.org>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: "Pan, Xinhui" <Xinhui.Pan@amd.com>
    Cc: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Cc: Thomas Zimmermann <tzimmermann@suse.de>
    Cc: Tom Rix <trix@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 723fa02e0e0ad2398e2a6c0e6b2087c9dacf4212
Author: Helge Deller <deller@gmx.de>
Date:   Fri Nov 19 22:31:03 2021 +0100

    parisc: Increase FRAME_WARN to 2048 bytes on parisc
    
    [ Upstream commit 8d192bec534bd5b778135769a12e5f04580771f7 ]
    
    PA-RISC uses a much bigger frame size for functions than other
    architectures. So increase it to 2048 for 32- and 64-bit kernels.
    This fixes e.g. a warning in lib/xxhash.c.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Stable-dep-of: 152fe65f300e ("Kconfig.debug: provide a little extra FRAME_WARN leeway when KASAN is enabled")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b951ab4b35ba15018abfb6ebe7e53c28adaf786f
Author: Gavin Shan <gshan@redhat.com>
Date:   Thu Nov 24 17:55:23 2022 +0800

    mm: migrate: fix THP's mapcount on isolation
    
    [ Upstream commit 829ae0f81ce093d674ff2256f66a714753e9ce32 ]
    
    The issue is reported when removing memory through virtio_mem device.  The
    transparent huge page, experienced copy-on-write fault, is wrongly
    regarded as pinned.  The transparent huge page is escaped from being
    isolated in isolate_migratepages_block().  The transparent huge page can't
    be migrated and the corresponding memory block can't be put into offline
    state.
    
    Fix it by replacing page_mapcount() with total_mapcount().  With this, the
    transparent huge page can be isolated and migrated, and the memory block
    can be put into offline state.  Besides, The page's refcount is increased
    a bit earlier to avoid the page is released when the check is executed.
    
    Link: https://lkml.kernel.org/r/20221124095523.31061-1-gshan@redhat.com
    Fixes: 1da2f328fa64 ("mm,thp,compaction,cma: allow THP migration for CMA allocations")
    Signed-off-by: Gavin Shan <gshan@redhat.com>
    Reported-by: Zhenyu Zhang <zhenyzha@redhat.com>
    Tested-by: Zhenyu Zhang <zhenyzha@redhat.com>
    Suggested-by: David Hildenbrand <david@redhat.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Alistair Popple <apopple@nvidia.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: William Kucharski <william.kucharski@oracle.com>
    Cc: Zi Yan <ziy@nvidia.com>
    Cc: <stable@vger.kernel.org>    [5.7+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5eda6029cf9099120d2d788c73490ac813549cc
Author: Hugh Dickins <hughd@google.com>
Date:   Tue Mar 22 14:45:41 2022 -0700

    mm: __isolate_lru_page_prepare() in isolate_migratepages_block()
    
    [ Upstream commit 89f6c88a6ab4a11deb14c270f7f1454cda4f73d6 ]
    
    __isolate_lru_page_prepare() conflates two unrelated functions, with the
    flags to one disjoint from the flags to the other; and hides some of the
    important checks outside of isolate_migratepages_block(), where the
    sequence is better to be visible.  It comes from the days of lumpy
    reclaim, before compaction, when the combination made more sense.
    
    Move what's needed by mm/compaction.c isolate_migratepages_block() inline
    there, and what's needed by mm/vmscan.c isolate_lru_pages() inline there.
    
    Shorten "isolate_mode" to "mode", so the sequence of conditions is easier
    to read.  Declare a "mapping" variable, to save one call to page_mapping()
    (but not another: calling again after page is locked is necessary).
    Simplify isolate_lru_pages() with a "move_to" list pointer.
    
    Link: https://lkml.kernel.org/r/879d62a8-91cc-d3c6-fb3b-69768236df68@google.com
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Alex Shi <alexs@kernel.org>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Stable-dep-of: 829ae0f81ce0 ("mm: migrate: fix THP's mapcount on isolation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdb613ef179ad4bb9d56a2533e9b30e434f1dfb7
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Thu Dec 1 12:01:27 2022 +0800

    iommu/vt-d: Fix PCI device refcount leak in dmar_dev_scope_init()
    
    [ Upstream commit 4bedbbd782ebbe7287231fea862c158d4f08a9e3 ]
    
    for_each_pci_dev() is implemented by pci_get_device(). The comment of
    pci_get_device() says that it will increase the reference count for the
    returned pci_dev and also decrease the reference count for the input
    pci_dev @from if it is not NULL.
    
    If we break for_each_pci_dev() loop with pdev not NULL, we need to call
    pci_dev_put() to decrease the reference count. Add the missing
    pci_dev_put() for the error path to avoid reference count leak.
    
    Fixes: 2e4552893038 ("iommu/vt-d: Unify the way to process DMAR device scope array")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Link: https://lore.kernel.org/r/20221121113649.190393-3-wangxiongfeng2@huawei.com
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6eea8b2e858a20ad58ac62dc2de90fea2413f94
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Thu Dec 1 12:01:26 2022 +0800

    iommu/vt-d: Fix PCI device refcount leak in has_external_pci()
    
    [ Upstream commit afca9e19cc720bfafc75dc5ce429c185ca93f31d ]
    
    for_each_pci_dev() is implemented by pci_get_device(). The comment of
    pci_get_device() says that it will increase the reference count for the
    returned pci_dev and also decrease the reference count for the input
    pci_dev @from if it is not NULL.
    
    If we break for_each_pci_dev() loop with pdev not NULL, we need to call
    pci_dev_put() to decrease the reference count. Add the missing
    pci_dev_put() before 'return true' to avoid reference count leak.
    
    Fixes: 89a6079df791 ("iommu/vt-d: Force IOMMU on for platform opt in hint")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Link: https://lore.kernel.org/r/20221121113649.190393-2-wangxiongfeng2@huawei.com
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 787d81d4eb150e443e5d1276c6e8f03cfecc2302
Author: Caleb Sander <csander@purestorage.com>
Date:   Fri Nov 18 16:27:56 2022 -0700

    nvme: fix SRCU protection of nvme_ns_head list
    
    [ Upstream commit 899d2a05dc14733cfba6224083c6b0dd5a738590 ]
    
    Walking the nvme_ns_head siblings list is protected by the head's srcu
    in nvme_ns_head_submit_bio() but not nvme_mpath_revalidate_paths().
    Removing namespaces from the list also fails to synchronize the srcu.
    Concurrent scan work can therefore cause use-after-frees.
    
    Hold the head's srcu lock in nvme_mpath_revalidate_paths() and
    synchronize with the srcu, not the global RCU, in nvme_ns_remove().
    
    Observed the following panic when making NVMe/RDMA connections
    with native multipath on the Rocky Linux 8.6 kernel
    (it seems the upstream kernel has the same race condition).
    Disassembly shows the faulting instruction is cmp 0x50(%rdx),%rcx;
    computing capacity != get_capacity(ns->disk).
    Address 0x50 is dereferenced because ns->disk is NULL.
    The NULL disk appears to be the result of concurrent scan work
    freeing the namespace (note the log line in the middle of the panic).
    
    [37314.206036] BUG: unable to handle kernel NULL pointer dereference at 0000000000000050
    [37314.206036] nvme0n3: detected capacity change from 0 to 11811160064
    [37314.299753] PGD 0 P4D 0
    [37314.299756] Oops: 0000 [#1] SMP PTI
    [37314.299759] CPU: 29 PID: 322046 Comm: kworker/u98:3 Kdump: loaded Tainted: G        W      X --------- -  - 4.18.0-372.32.1.el8test86.x86_64 #1
    [37314.299762] Hardware name: Dell Inc. PowerEdge R720/0JP31P, BIOS 2.7.0 05/23/2018
    [37314.299763] Workqueue: nvme-wq nvme_scan_work [nvme_core]
    [37314.299783] RIP: 0010:nvme_mpath_revalidate_paths+0x26/0xb0 [nvme_core]
    [37314.299790] Code: 1f 44 00 00 66 66 66 66 90 55 53 48 8b 5f 50 48 8b 83 c8 c9 00 00 48 8b 13 48 8b 48 50 48 39 d3 74 20 48 8d 42 d0 48 8b 50 20 <48> 3b 4a 50 74 05 f0 80 60 70 ef 48 8b 50 30 48 8d 42 d0 48 39 d3
    [37315.058803] RSP: 0018:ffffabe28f913d10 EFLAGS: 00010202
    [37315.121316] RAX: ffff927a077da800 RBX: ffff92991dd70000 RCX: 0000000001600000
    [37315.206704] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff92991b719800
    [37315.292106] RBP: ffff929a6b70c000 R08: 000000010234cd4a R09: c0000000ffff7fff
    [37315.377501] R10: 0000000000000001 R11: ffffabe28f913a30 R12: 0000000000000000
    [37315.462889] R13: ffff92992716600c R14: ffff929964e6e030 R15: ffff92991dd70000
    [37315.548286] FS:  0000000000000000(0000) GS:ffff92b87fb80000(0000) knlGS:0000000000000000
    [37315.645111] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [37315.713871] CR2: 0000000000000050 CR3: 0000002208810006 CR4: 00000000000606e0
    [37315.799267] Call Trace:
    [37315.828515]  nvme_update_ns_info+0x1ac/0x250 [nvme_core]
    [37315.892075]  nvme_validate_or_alloc_ns+0x2ff/0xa00 [nvme_core]
    [37315.961871]  ? __blk_mq_free_request+0x6b/0x90
    [37316.015021]  nvme_scan_work+0x151/0x240 [nvme_core]
    [37316.073371]  process_one_work+0x1a7/0x360
    [37316.121318]  ? create_worker+0x1a0/0x1a0
    [37316.168227]  worker_thread+0x30/0x390
    [37316.212024]  ? create_worker+0x1a0/0x1a0
    [37316.258939]  kthread+0x10a/0x120
    [37316.297557]  ? set_kthread_struct+0x50/0x50
    [37316.347590]  ret_from_fork+0x35/0x40
    [37316.390360] Modules linked in: nvme_rdma nvme_tcp(X) nvme_fabrics nvme_core netconsole iscsi_tcp libiscsi_tcp dm_queue_length dm_service_time nf_conntrack_netlink br_netfilter bridge stp llc overlay nft_chain_nat ipt_MASQUERADE nf_nat xt_addrtype xt_CT nft_counter xt_state xt_conntrack nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 xt_comment xt_multiport nft_compat nf_tables libcrc32c nfnetlink dm_multipath tg3 rpcrdma sunrpc rdma_ucm ib_srpt ib_isert iscsi_target_mod target_core_mod ib_iser libiscsi scsi_transport_iscsi ib_umad rdma_cm ib_ipoib iw_cm ib_cm intel_rapl_msr iTCO_wdt iTCO_vendor_support dcdbas intel_rapl_common sb_edac x86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel ipmi_ssif kvm irqbypass crct10dif_pclmul crc32_pclmul mlx5_ib ghash_clmulni_intel ib_uverbs rapl intel_cstate intel_uncore ib_core ipmi_si joydev mei_me pcspkr ipmi_devintf mei lpc_ich wmi ipmi_msghandler acpi_power_meter ext4 mbcache jbd2 sd_mod t10_pi sg mgag200 mlx5_core drm_kms_helper syscopyarea
    [37316.390419]  sysfillrect ahci sysimgblt fb_sys_fops libahci drm crc32c_intel libata mlxfw pci_hyperv_intf tls i2c_algo_bit psample dm_mirror dm_region_hash dm_log dm_mod fuse [last unloaded: nvme_core]
    [37317.645908] CR2: 0000000000000050
    
    Fixes: e7d65803e2bb ("nvme-multipath: revalidate paths during rescan")
    Signed-off-by: Caleb Sander <csander@purestorage.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12f237200c169a8667cf9dca7a40df8d7917b9fd
Author: Guo Ren <guoren@kernel.org>
Date:   Thu Oct 20 10:16:02 2022 -0400

    riscv: kexec: Fixup irq controller broken in kexec crash path
    
    [ Upstream commit b17d19a5314a37f7197afd1a0200affd21a7227d ]
    
    If a crash happens on cpu3 and all interrupts are binding on cpu0, the
    bad irq routing will cause a crash kernel which can't receive any irq.
    Because crash kernel won't clean up all harts' PLIC enable bits in
    enable registers. This patch is similar to 9141a003a491 ("ARM: 7316/1:
    kexec: EOI active and mask all interrupts in kexec crash path") and
    78fd584cdec0 ("arm64: kdump: implement machine_crash_shutdown()"), and
    PowerPC also has the same mechanism.
    
    Fixes: fba8a8674f68 ("RISC-V: Add kexec support")
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Signed-off-by: Guo Ren <guoren@kernel.org>
    Reviewed-by: Xianting Tian <xianting.tian@linux.alibaba.com>
    Cc: Nick Kossifidis <mick@ics.forth.gr>
    Cc: Palmer Dabbelt <palmer@rivosinc.com>
    Link: https://lore.kernel.org/r/20221020141603.2856206-2-guoren@kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac00301adb19df54f2eae1efc4bad7447c0156ce
Author: Jisheng Zhang <jszhang@kernel.org>
Date:   Sun Oct 30 20:45:17 2022 +0800

    riscv: fix race when vmap stack overflow
    
    [ Upstream commit 7e1864332fbc1b993659eab7974da9fe8bf8c128 ]
    
    Currently, when detecting vmap stack overflow, riscv firstly switches
    to the so called shadow stack, then use this shadow stack to call the
    get_overflow_stack() to get the overflow stack. However, there's
    a race here if two or more harts use the same shadow stack at the same
    time.
    
    To solve this race, we introduce spin_shadow_stack atomic var, which
    will be swap between its own address and 0 in atomic way, when the
    var is set, it means the shadow_stack is being used; when the var
    is cleared, it means the shadow_stack isn't being used.
    
    Fixes: 31da94c25aea ("riscv: add VMAP_STACK overflow detection")
    Signed-off-by: Jisheng Zhang <jszhang@kernel.org>
    Suggested-by: Guo Ren <guoren@kernel.org>
    Reviewed-by: Guo Ren <guoren@kernel.org>
    Link: https://lore.kernel.org/r/20221030124517.2370-1-jszhang@kernel.org
    [Palmer: Add AQ to the swap, and also some comments.]
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa7a7d185ef380546b4b1fed6f84f31dbae8cec7
Author: Alexandre Ghiti <alexghiti@rivosinc.com>
Date:   Mon Nov 21 14:33:03 2022 +0100

    riscv: Sync efi page table's kernel mappings before switching
    
    [ Upstream commit 3f105a742725a1b78766a55169f1d827732e62b8 ]
    
    The EFI page table is initially created as a copy of the kernel page table.
    With VMAP_STACK enabled, kernel stacks are allocated in the vmalloc area:
    if the stack is allocated in a new PGD (one that was not present at the
    moment of the efi page table creation or not synced in a previous vmalloc
    fault), the kernel will take a trap when switching to the efi page table
    when the vmalloc kernel stack is accessed, resulting in a kernel panic.
    
    Fix that by updating the efi kernel mappings before switching to the efi
    page table.
    
    Signed-off-by: Alexandre Ghiti <alexghiti@rivosinc.com>
    Fixes: b91540d52a08 ("RISC-V: Add EFI runtime services")
    Tested-by: Emil Renner Berthing <emil.renner.berthing@canonical.com>
    Reviewed-by: Atish Patra <atishp@rivosinc.com>
    Link: https://lore.kernel.org/r/20221121133303.1782246-1-alexghiti@rivosinc.com
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d86d698925456f88f44183c70ce1b46656a28fed
Author: Maxim Korotkov <korotkov.maxim.s@gmail.com>
Date:   Thu Nov 17 15:30:34 2022 +0300

    pinctrl: single: Fix potential division by zero
    
    [ Upstream commit 64c150339e7f6c5cbbe8c17a56ef2b3902612798 ]
    
    There is a possibility of dividing by zero due to the pcs->bits_per_pin
    if pcs->fmask() also has a value of zero and called fls
    from asm-generic/bitops/builtin-fls.h or arch/x86/include/asm/bitops.h.
    The function pcs_probe() has the branch that assigned to fmask 0 before
    pcs_allocate_pin_table() was called
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 4e7e8017a80e ("pinctrl: pinctrl-single: enhance to configure multiple pins of different modules")
    Signed-off-by: Maxim Korotkov <korotkov.maxim.s@gmail.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221117123034.27383-1-korotkov.maxim.s@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98b15c706644bebc19d2e77ccc360cc51444f6d0
Author: Mark Brown <broonie@kernel.org>
Date:   Wed May 11 14:41:36 2022 +0100

    ASoC: ops: Fix bounds check for _sx controls
    
    [ Upstream commit 698813ba8c580efb356ace8dbf55f61dac6063a8 ]
    
    For _sx controls the semantics of the max field is not the usual one, max
    is the number of steps rather than the maximum value. This means that our
    check in snd_soc_put_volsw_sx() needs to just check against the maximum
    value.
    
    Fixes: 4f1e50d6a9cf9c1b ("ASoC: ops: Reject out of bounds values in snd_soc_put_volsw_sx()")
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20220511134137.169575-1-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f88a6977f8b981bfb5fddd18fbaa75e57e8af293
Author: Kazuki Takiguchi <takiguchi.kazuki171@gmail.com>
Date:   Wed Nov 23 14:36:00 2022 -0500

    KVM: x86/mmu: Fix race condition in direct_page_fault
    
    commit 47b0c2e4c220f2251fd8dcfbb44479819c715e15 upstream.
    
    make_mmu_pages_available() must be called with mmu_lock held for write.
    However, if the TDP MMU is used, it will be called with mmu_lock held for
    read.
    This function does nothing unless shadow pages are used, so there is no
    race unless nested TDP is used.
    Since nested TDP uses shadow pages, old shadow pages may be zapped by this
    function even when the TDP MMU is enabled.
    Since shadow pages are never allocated by kvm_tdp_mmu_map(), a race
    condition can be avoided by not calling make_mmu_pages_available() if the
    TDP MMU is currently in use.
    
    I encountered this when repeatedly starting and stopping nested VM.
    It can be artificially caused by allocating a large number of nested TDP
    SPTEs.
    
    For example, the following BUG and general protection fault are caused in
    the host kernel.
    
    pte_list_remove: 00000000cd54fc10 many->many
    ------------[ cut here ]------------
    kernel BUG at arch/x86/kvm/mmu/mmu.c:963!
    invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
    RIP: 0010:pte_list_remove.cold+0x16/0x48 [kvm]
    Call Trace:
     <TASK>
     drop_spte+0xe0/0x180 [kvm]
     mmu_page_zap_pte+0x4f/0x140 [kvm]
     __kvm_mmu_prepare_zap_page+0x62/0x3e0 [kvm]
     kvm_mmu_zap_oldest_mmu_pages+0x7d/0xf0 [kvm]
     direct_page_fault+0x3cb/0x9b0 [kvm]
     kvm_tdp_page_fault+0x2c/0xa0 [kvm]
     kvm_mmu_page_fault+0x207/0x930 [kvm]
     npf_interception+0x47/0xb0 [kvm_amd]
     svm_invoke_exit_handler+0x13c/0x1a0 [kvm_amd]
     svm_handle_exit+0xfc/0x2c0 [kvm_amd]
     kvm_arch_vcpu_ioctl_run+0xa79/0x1780 [kvm]
     kvm_vcpu_ioctl+0x29b/0x6f0 [kvm]
     __x64_sys_ioctl+0x95/0xd0
     do_syscall_64+0x5c/0x90
    
    general protection fault, probably for non-canonical address
    0xdead000000000122: 0000 [#1] PREEMPT SMP NOPTI
    RIP: 0010:kvm_mmu_commit_zap_page.part.0+0x4b/0xe0 [kvm]
    Call Trace:
     <TASK>
     kvm_mmu_zap_oldest_mmu_pages+0xae/0xf0 [kvm]
     direct_page_fault+0x3cb/0x9b0 [kvm]
     kvm_tdp_page_fault+0x2c/0xa0 [kvm]
     kvm_mmu_page_fault+0x207/0x930 [kvm]
     npf_interception+0x47/0xb0 [kvm_amd]
    
    CVE: CVE-2022-45869
    Fixes: a2855afc7ee8 ("KVM: x86/mmu: Allow parallel page faults for the TDP MMU")
    Signed-off-by: Kazuki Takiguchi <takiguchi.kazuki171@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df4b177b48516da64b988722a22d93d257dcda9a
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Dec 2 14:27:15 2022 +0000

    io_uring/poll: fix poll_refs race with cancelation
    
    [ upstream commit 12ad3d2d6c5b0131a6052de91360849e3e154846 ]
    
    There is an interesting race condition of poll_refs which could result
    in a NULL pointer dereference. The crash trace is like:
    
    KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
    CPU: 0 PID: 30781 Comm: syz-executor.2 Not tainted 6.0.0-g493ffd6605b2 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    1.13.0-1ubuntu1.1 04/01/2014
    RIP: 0010:io_poll_remove_entry io_uring/poll.c:154 [inline]
    RIP: 0010:io_poll_remove_entries+0x171/0x5b4 io_uring/poll.c:190
    Code: ...
    RSP: 0018:ffff88810dfefba0 EFLAGS: 00010202
    RAX: 0000000000000001 RBX: 0000000000000000 RCX: 0000000000040000
    RDX: ffffc900030c4000 RSI: 000000000003ffff RDI: 0000000000040000
    RBP: 0000000000000008 R08: ffffffff9764d3dd R09: fffffbfff3836781
    R10: fffffbfff3836781 R11: 0000000000000000 R12: 1ffff11003422d60
    R13: ffff88801a116b04 R14: ffff88801a116ac0 R15: dffffc0000000000
    FS:  00007f9c07497700(0000) GS:ffff88811a600000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffb5c00ea98 CR3: 0000000105680005 CR4: 0000000000770ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     <TASK>
     io_apoll_task_func+0x3f/0xa0 io_uring/poll.c:299
     handle_tw_list io_uring/io_uring.c:1037 [inline]
     tctx_task_work+0x37e/0x4f0 io_uring/io_uring.c:1090
     task_work_run+0x13a/0x1b0 kernel/task_work.c:177
     get_signal+0x2402/0x25a0 kernel/signal.c:2635
     arch_do_signal_or_restart+0x3b/0x660 arch/x86/kernel/signal.c:869
     exit_to_user_mode_loop kernel/entry/common.c:166 [inline]
     exit_to_user_mode_prepare+0xc2/0x160 kernel/entry/common.c:201
     __syscall_exit_to_user_mode_work kernel/entry/common.c:283 [inline]
     syscall_exit_to_user_mode+0x58/0x160 kernel/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The root cause for this is a tiny overlooking in
    io_poll_check_events() when cocurrently run with poll cancel routine
    io_poll_cancel_req().
    
    The interleaving to trigger use-after-free:
    
    CPU0                                       |  CPU1
                                               |
    io_apoll_task_func()                       |  io_poll_cancel_req()
     io_poll_check_events()                    |
      // do while first loop                   |
      v = atomic_read(...)                     |
      // v = poll_refs = 1                     |
      ...                                      |  io_poll_mark_cancelled()
                                               |   atomic_or()
                                               |   // poll_refs =
    IO_POLL_CANCEL_FLAG | 1
                                               |
      atomic_sub_return(...)                   |
      // poll_refs = IO_POLL_CANCEL_FLAG       |
      // loop continue                         |
                                               |
                                               |  io_poll_execute()
                                               |   io_poll_get_ownership()
                                               |   // poll_refs =
    IO_POLL_CANCEL_FLAG | 1
                                               |   // gets the ownership
      v = atomic_read(...)                     |
      // poll_refs not change                  |
                                               |
      if (v & IO_POLL_CANCEL_FLAG)             |
       return -ECANCELED;                      |
      // io_poll_check_events return           |
      // will go into                          |
      // io_req_complete_failed() free req     |
                                               |
                                               |  io_apoll_task_func()
                                               |  // also go into
    io_req_complete_failed()
    
    And the interleaving to trigger the kernel WARNING:
    
    CPU0                                       |  CPU1
                                               |
    io_apoll_task_func()                       |  io_poll_cancel_req()
     io_poll_check_events()                    |
      // do while first loop                   |
      v = atomic_read(...)                     |
      // v = poll_refs = 1                     |
      ...                                      |  io_poll_mark_cancelled()
                                               |   atomic_or()
                                               |   // poll_refs =
    IO_POLL_CANCEL_FLAG | 1
                                               |
      atomic_sub_return(...)                   |
      // poll_refs = IO_POLL_CANCEL_FLAG       |
      // loop continue                         |
                                               |
      v = atomic_read(...)                     |
      // v = IO_POLL_CANCEL_FLAG               |
                                               |  io_poll_execute()
                                               |   io_poll_get_ownership()
                                               |   // poll_refs =
    IO_POLL_CANCEL_FLAG | 1
                                               |   // gets the ownership
                                               |
      WARN_ON_ONCE(!(v & IO_POLL_REF_MASK)))   |
      // v & IO_POLL_REF_MASK = 0 WARN         |
                                               |
                                               |  io_apoll_task_func()
                                               |  // also go into
    io_req_complete_failed()
    
    By looking up the source code and communicating with Pavel, the
    implementation of this atomic poll refs should continue the loop of
    io_poll_check_events() just to avoid somewhere else to grab the
    ownership. Therefore, this patch simply adds another AND operation to
    make sure the loop will stop if it finds the poll_refs is exactly equal
    to IO_POLL_CANCEL_FLAG. Since io_poll_cancel_req() grabs ownership and
    will finally make its way to io_req_complete_failed(), the req will
    be reclaimed as expected.
    
    Fixes: aa43477b0402 ("io_uring: poll rework")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Pavel Begunkov <asml.silence@gmail.com>
    [axboe: tweak description and code style]
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b702b7d11ce1b9d26fc6d7c5a7ef4ac1d455048
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Fri Dec 2 14:27:14 2022 +0000

    io_uring: make poll refs more robust
    
    [ upstream commit a26a35e9019fd70bf3cf647dcfdae87abc7bacea ]
    
    poll_refs carry two functions, the first is ownership over the request.
    The second is notifying the io_poll_check_events() that there was an
    event but wake up couldn't grab the ownership, so io_poll_check_events()
    should retry.
    
    We want to make poll_refs more robust against overflows. Instead of
    always incrementing it, which covers two purposes with one atomic, check
    if poll_refs is elevated enough and if so set a retry flag without
    attempts to grab ownership. The gap between the bias check and following
    atomics may seem racy, but we don't need it to be strict. Moreover there
    might only be maximum 4 parallel updates: by the first and the second
    poll entries, __io_arm_poll_handler() and cancellation. From those four,
    only poll wake ups may be executed multiple times, but they're protected
    by a spin.
    
    Cc: stable@vger.kernel.org
    Reported-by: Lin Ma <linma@zju.edu.cn>
    Fixes: aa43477b04025 ("io_uring: poll rework")
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/c762bc31f8683b3270f3587691348a7119ef9c9d.1668963050.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d58849ac26f8bafd4aeb71d2b38a761c89186ae
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Fri Dec 2 14:27:13 2022 +0000

    io_uring: cmpxchg for poll arm refs release
    
    [ upstream commit 2f3893437a4ebf2e892ca172e9e122841319d675 ]
    
    Replace atomically substracting the ownership reference at the end of
    arming a poll with a cmpxchg. We try to release ownership by setting 0
    assuming that poll_refs didn't change while we were arming. If it did
    change, we keep the ownership and use it to queue a tw, which is fully
    capable to process all events and (even tolerates spurious wake ups).
    
    It's a bit more elegant as we reduce races b/w setting the cancellation
    flag and getting refs with this release, and with that we don't have to
    worry about any kinds of underflows. It's not the fastest path for
    polling. The performance difference b/w cmpxchg and atomic dec is
    usually negligible and it's not the fastest path.
    
    Cc: stable@vger.kernel.org
    Fixes: aa43477b04025 ("io_uring: poll rework")
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/0c95251624397ea6def568ff040cad2d7926fd51.1668963050.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd1981a8c30ddcab6e933c047c685ac649ac2ec9
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Fri Dec 2 14:27:12 2022 +0000

    io_uring: fix tw losing poll events
    
    [ upstream commit 539bcb57da2f58886d7d5c17134236b0ec9cd15d ]
    
    We may never try to process a poll wake and its mask if there was
    multiple wake ups racing for queueing up a tw. Force
    io_poll_check_events() to update the mask by vfs_poll().
    
    Cc: stable@vger.kernel.org
    Fixes: aa43477b04025 ("io_uring: poll rework")
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/00344d60f8b18907171178d7cf598de71d127b0b.1668710222.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62321dc7b08103259b19a82089fc49f66f1e4ce6
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Fri Dec 2 14:27:11 2022 +0000

    io_uring: update res mask in io_poll_check_events
    
    [ upstream commit b98186aee22fa593bc8c6b2c5d839c2ee518bc8c ]
    
    When io_poll_check_events() collides with someone attempting to queue a
    task work, it'll spin for one more time. However, it'll continue to use
    the mask from the first iteration instead of updating it. For example,
    if the first wake up was a EPOLLIN and the second EPOLLOUT, the
    userspace will not get EPOLLOUT in time.
    
    Clear the mask for all subsequent iterations to force vfs_poll().
    
    Cc: stable@vger.kernel.org
    Fixes: aa43477b04025 ("io_uring: poll rework")
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/2dac97e8f691231049cb259c4ae57e79e40b537c.1668710222.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 417d5ea6e735e5d88ffb6c436cf2938f3f476dd1
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Nov 23 17:14:34 2022 -0500

    tracing: Free buffers when a used dynamic event is removed
    
    commit 4313e5a613049dfc1819a6dfb5f94cf2caff9452 upstream.
    
    After 65536 dynamic events have been added and removed, the "type" field
    of the event then uses the first type number that is available (not
    currently used by other events). A type number is the identifier of the
    binary blobs in the tracing ring buffer (known as events) to map them to
    logic that can parse the binary blob.
    
    The issue is that if a dynamic event (like a kprobe event) is traced and
    is in the ring buffer, and then that event is removed (because it is
    dynamic, which means it can be created and destroyed), if another dynamic
    event is created that has the same number that new event's logic on
    parsing the binary blob will be used.
    
    To show how this can be an issue, the following can crash the kernel:
    
     # cd /sys/kernel/tracing
     # for i in `seq 65536`; do
         echo 'p:kprobes/foo do_sys_openat2 $arg1:u32' > kprobe_events
     # done
    
    For every iteration of the above, the writing to the kprobe_events will
    remove the old event and create a new one (with the same format) and
    increase the type number to the next available on until the type number
    reaches over 65535 which is the max number for the 16 bit type. After it
    reaches that number, the logic to allocate a new number simply looks for
    the next available number. When an dynamic event is removed, that number
    is then available to be reused by the next dynamic event created. That is,
    once the above reaches the max number, the number assigned to the event in
    that loop will remain the same.
    
    Now that means deleting one dynamic event and created another will reuse
    the previous events type number. This is where bad things can happen.
    After the above loop finishes, the kprobes/foo event which reads the
    do_sys_openat2 function call's first parameter as an integer.
    
     # echo 1 > kprobes/foo/enable
     # cat /etc/passwd > /dev/null
     # cat trace
                 cat-2211    [005] ....  2007.849603: foo: (do_sys_openat2+0x0/0x130) arg1=4294967196
                 cat-2211    [005] ....  2007.849620: foo: (do_sys_openat2+0x0/0x130) arg1=4294967196
                 cat-2211    [005] ....  2007.849838: foo: (do_sys_openat2+0x0/0x130) arg1=4294967196
                 cat-2211    [005] ....  2007.849880: foo: (do_sys_openat2+0x0/0x130) arg1=4294967196
     # echo 0 > kprobes/foo/enable
    
    Now if we delete the kprobe and create a new one that reads a string:
    
     # echo 'p:kprobes/foo do_sys_openat2 +0($arg2):string' > kprobe_events
    
    And now we can the trace:
    
     # cat trace
            sendmail-1942    [002] .....   530.136320: foo: (do_sys_openat2+0x0/0x240) arg1=             cat-2046    [004] .....   530.930817: foo: (do_sys_openat2+0x0/0x240) arg1="������������������������������������������������������������������������������������������������"
                 cat-2046    [004] .....   530.930961: foo: (do_sys_openat2+0x0/0x240) arg1="������������������������������������������������������������������������������������������������"
                 cat-2046    [004] .....   530.934278: foo: (do_sys_openat2+0x0/0x240) arg1="������������������������������������������������������������������������������������������������"
                 cat-2046    [004] .....   530.934563: foo: (do_sys_openat2+0x0/0x240) arg1="������������������������������������������������������������������������������������������������"
                bash-1515    [007] .....   534.299093: foo: (do_sys_openat2+0x0/0x240) arg1="kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk���������@��4Z����;Y�����U
    
    And dmesg has:
    
    ==================================================================
    BUG: KASAN: use-after-free in string+0xd4/0x1c0
    Read of size 1 at addr ffff88805fdbbfa0 by task cat/2049
    
     CPU: 0 PID: 2049 Comm: cat Not tainted 6.1.0-rc6-test+ #641
     Hardware name: Hewlett-Packard HP Compaq Pro 6300 SFF/339A, BIOS K01 v03.03 07/14/2016
     Call Trace:
      <TASK>
      dump_stack_lvl+0x5b/0x77
      print_report+0x17f/0x47b
      kasan_report+0xad/0x130
      string+0xd4/0x1c0
      vsnprintf+0x500/0x840
      seq_buf_vprintf+0x62/0xc0
      trace_seq_printf+0x10e/0x1e0
      print_type_string+0x90/0xa0
      print_kprobe_event+0x16b/0x290
      print_trace_line+0x451/0x8e0
      s_show+0x72/0x1f0
      seq_read_iter+0x58e/0x750
      seq_read+0x115/0x160
      vfs_read+0x11d/0x460
      ksys_read+0xa9/0x130
      do_syscall_64+0x3a/0x90
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
     RIP: 0033:0x7fc2e972ade2
     Code: c0 e9 b2 fe ff ff 50 48 8d 3d b2 3f 0a 00 e8 05 f0 01 00 0f 1f 44 00 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 0f 05 <48> 3d 00 f0 ff ff 77 56 c3 0f 1f 44 00 00 48 83 ec 28 48 89 54 24
     RSP: 002b:00007ffc64e687c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000000
     RAX: ffffffffffffffda RBX: 0000000000020000 RCX: 00007fc2e972ade2
     RDX: 0000000000020000 RSI: 00007fc2e980d000 RDI: 0000000000000003
     RBP: 00007fc2e980d000 R08: 00007fc2e980c010 R09: 0000000000000000
     R10: 0000000000000022 R11: 0000000000000246 R12: 0000000000020f00
     R13: 0000000000000003 R14: 0000000000020000 R15: 0000000000020000
      </TASK>
    
     The buggy address belongs to the physical page:
     page:ffffea00017f6ec0 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x5fdbb
     flags: 0xfffffc0000000(node=0|zone=1|lastcpupid=0x1fffff)
     raw: 000fffffc0000000 0000000000000000 ffffea00017f6ec8 0000000000000000
     raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
      ffff88805fdbbe80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
      ffff88805fdbbf00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     >ffff88805fdbbf80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                                    ^
      ffff88805fdbc000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
      ffff88805fdbc080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ==================================================================
    
    This was found when Zheng Yejian sent a patch to convert the event type
    number assignment to use IDA, which gives the next available number, and
    this bug showed up in the fuzz testing by Yujie Liu and the kernel test
    robot. But after further analysis, I found that this behavior is the same
    as when the event type numbers go past the 16bit max (and the above shows
    that).
    
    As modules have a similar issue, but is dealt with by setting a
    "WAS_ENABLED" flag when a module event is enabled, and when the module is
    freed, if any of its events were enabled, the ring buffer that holds that
    event is also cleared, to prevent reading stale events. The same can be
    done for dynamic events.
    
    If any dynamic event that is being removed was enabled, then make sure the
    buffers they were enabled in are now cleared.
    
    Link: https://lkml.kernel.org/r/20221123171434.545706e3@gandalf.local.home
    Link: https://lore.kernel.org/all/20221110020319.1259291-1-zhengyejian1@huawei.com/
    
    Cc: stable@vger.kernel.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Depends-on: e18eb8783ec49 ("tracing: Add tracing_reset_all_online_cpus_unlocked() function")
    Depends-on: 5448d44c38557 ("tracing: Add unified dynamic event framework")
    Depends-on: 6212dd29683ee ("tracing/kprobes: Use dyn_event framework for kprobe events")
    Depends-on: 065e63f951432 ("tracing: Only have rmmod clear buffers that its events were active in")
    Depends-on: 575380da8b469 ("tracing: Only clear trace buffer on module unload if event was traced")
    Fixes: 77b44d1b7c283 ("tracing/kprobes: Rename Kprobe-tracer to kprobe-event")
    Reported-by: Zheng Yejian <zhengyejian1@huawei.com>
    Reported-by: Yujie Liu <yujie.liu@intel.com>
    Reported-by: kernel test robot <yujie.liu@intel.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52fc245d150c260c978f3a352951c792a22cab40
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Nov 23 16:43:23 2022 -0500

    tracing: Fix race where histograms can be called before the event
    
    commit ef38c79a522b660f7f71d45dad2d6244bc741841 upstream.
    
    commit 94eedf3dded5 ("tracing: Fix race where eprobes can be called before
    the event") fixed an issue where if an event is soft disabled, and the
    trigger is being added, there's a small window where the event sees that
    there's a trigger but does not see that it requires reading the event yet,
    and then calls the trigger with the record == NULL.
    
    This could be solved with adding memory barriers in the hot path, or to
    make sure that all the triggers requiring a record check for NULL. The
    latter was chosen.
    
    Commit 94eedf3dded5 set the eprobe trigger handle to check for NULL, but
    the same needs to be done with histograms.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221118211809.701d40c0f8a757b0df3c025a@kernel.org/
    Link: https://lore.kernel.org/linux-trace-kernel/20221123164323.03450c3a@gandalf.local.home
    
    Cc: Tom Zanussi <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 7491e2c442781 ("tracing: Add a probe that attaches to trace events")
    Reported-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb2b0612cd25083cbbe23d4c5014dd3e869f9f20
Author: Daniel Bristot de Oliveira <bristot@kernel.org>
Date:   Thu Nov 17 14:46:17 2022 +0100

    tracing/osnoise: Fix duration type
    
    commit 022632f6c43a86f2135642dccd5686de318e861d upstream.
    
    The duration type is a 64 long value, not an int. This was
    causing some long noise to report wrong values.
    
    Change the duration to a 64 bits value.
    
    Link: https://lkml.kernel.org/r/a93d8a8378c7973e9c609de05826533c9e977939.1668692096.git.bristot@kernel.org
    
    Cc: stable@vger.kernel.org
    Cc: Daniel Bristot de Oliveira <bristot@kernel.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Fixes: bce29ac9ce0b ("trace: Add osnoise tracer")
    Signed-off-by: Daniel Bristot de Oliveira <bristot@kernel.org>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 615a996ff397932a6e488c1818c9adce1ae881bd
Author: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
Date:   Mon Nov 21 15:56:55 2022 +0100

    drm/i915: Never return 0 if not all requests retired
    
    commit 12b8b046e4c9de40fa59b6f067d6826f4e688f68 upstream.
    
    Users of intel_gt_retire_requests_timeout() expect 0 return value on
    success.  However, we have no protection from passing back 0 potentially
    returned by a call to dma_fence_wait_timeout() when it succedes right
    after its timeout has expired.
    
    Replace 0 with -ETIME before potentially using the timeout value as return
    code, so -ETIME is returned if there are still some requests not retired
    after timeout, 0 otherwise.
    
    v3: Use conditional expression, more compact but also better reflecting
        intention standing behind the change.
    
    v2: Move the added lines down so flush_submission() is not affected.
    
    Fixes: f33a8a51602c ("drm/i915: Merge wait_for_timelines with retire_request")
    Signed-off-by: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Cc: stable@vger.kernel.org # v5.5+
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221121145655.75141-3-janusz.krzysztofik@linux.intel.com
    (cherry picked from commit f301a29f143760ce8d3d6b6a8436d45d3448cde6)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01a2b25ef2cd71795d7e7a570e9627a59f892e41
Author: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
Date:   Mon Nov 21 15:56:54 2022 +0100

    drm/i915: Fix negative value passed as remaining time
    
    commit a8899b8728013c7b2456f0bfa20e5fea85ee0fd1 upstream.
    
    Commit b97060a99b01 ("drm/i915/guc: Update intel_gt_wait_for_idle to work
    with GuC") extended the API of intel_gt_retire_requests_timeout() with an
    extra argument 'remaining_timeout', intended for passing back unconsumed
    portion of requested timeout when 0 (success) is returned.  However, when
    request retirement happens to succeed despite an error returned by a call
    to dma_fence_wait_timeout(), that error code (a negative value) is passed
    back instead of remaining time.  If we then pass that negative value
    forward as requested timeout to intel_uc_wait_for_idle(), an explicit BUG
    will be triggered.
    
    If request retirement succeeds but an error code is passed back via
    remaininig_timeout, we may have no clue on how much of the initial timeout
    might have been left for spending it on waiting for GuC to become idle.
    OTOH, since all pending requests have been successfully retired, that
    error code has been already ignored by intel_gt_retire_requests_timeout(),
    then we shouldn't fail.
    
    Assume no more time has been left on error and pass 0 timeout value to
    intel_uc_wait_for_idle() to give it a chance to return success if GuC is
    already idle.
    
    v3: Don't fail on any error passed back via remaining_timeout.
    
    v2: Fix the issue on the caller side, not the provider.
    
    Fixes: b97060a99b01 ("drm/i915/guc: Update intel_gt_wait_for_idle to work with GuC")
    Signed-off-by: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Cc: stable@vger.kernel.org # v5.15+
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221121145655.75141-2-janusz.krzysztofik@linux.intel.com
    (cherry picked from commit f235dbd5b768e238d365fd05d92de5a32abc1c1f)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff1591ba33b8b83977e46a340f2d9b22099766d2
Author: Leo Liu <leo.liu@amd.com>
Date:   Tue Nov 29 18:53:18 2022 -0500

    drm/amdgpu: enable Vangogh VCN indirect sram mode
    
    commit 9a8cc8cabc1e351614fd7f9e774757a5143b6fe8 upstream.
    
    So that uses PSP to initialize HW.
    
    Fixes: 0c2c02b66c672e ("drm/amdgpu/vcn: add firmware support for dimgrey_cavefish")
    Signed-off-by: Leo Liu <leo.liu@amd.com>
    Reviewed-by: James Zhu <James.Zhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac2d7fa9084892c2c1232016ecdeadf4b354212f
Author: Lee Jones <lee@kernel.org>
Date:   Fri Nov 25 12:07:49 2022 +0000

    drm/amdgpu: temporarily disable broken Clang builds due to blown stack-frame
    
    commit 6f6cb1714365a07dbc66851879538df9f6969288 upstream.
    
    Patch series "Fix a bunch of allmodconfig errors", v2.
    
    Since b339ec9c229aa ("kbuild: Only default to -Werror if COMPILE_TEST")
    WERROR now defaults to COMPILE_TEST meaning that it's enabled for
    allmodconfig builds.  This leads to some interesting build failures when
    using Clang, each resolved in this set.
    
    With this set applied, I am able to obtain a successful allmodconfig Arm
    build.
    
    
    This patch (of 2):
    
    calculate_bandwidth() is presently broken on all !(X86_64 || SPARC64 ||
    ARM64) architectures built with Clang (all released versions), whereby the
    stack frame gets blown up to well over 5k.  This would cause an immediate
    kernel panic on most architectures.  We'll revert this when the following
    bug report has been resolved:
    https://github.com/llvm/llvm-project/issues/41896.
    
    Link: https://lkml.kernel.org/r/20221125120750.3537134-1-lee@kernel.org
    Link: https://lkml.kernel.org/r/20221125120750.3537134-2-lee@kernel.org
    Signed-off-by: Lee Jones <lee@kernel.org>
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Christian König" <christian.koenig@amd.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: David Airlie <airlied@gmail.com>
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Lee Jones <lee@kernel.org>
    Cc: Leo Li <sunpeng.li@amd.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Maxime Ripard <mripard@kernel.org>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: "Pan, Xinhui" <Xinhui.Pan@amd.com>
    Cc: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Cc: Thomas Zimmermann <tzimmermann@suse.de>
    Cc: Tom Rix <trix@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57ee7bc4c60a630f771d387e7fa4a7856b972bd2
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Nov 28 15:32:56 2022 +0200

    mmc: sdhci: Fix voltage switch delay
    
    commit c981cdfb9925f64a364f13c2b4f98f877308a408 upstream.
    
    Commit 20b92a30b561 ("mmc: sdhci: update signal voltage switch code")
    removed voltage switch delays from sdhci because mmc core had been
    enhanced to support them. However that assumed that sdhci_set_ios()
    did a single clock change, which it did not, and so the delays in mmc
    core, which should have come after the first clock change, were not
    effective.
    
    Fix by avoiding re-configuring UHS and preset settings when the clock
    is turning on and the settings have not changed. That then also avoids
    the associated clock changes, so that then sdhci_set_ios() does a single
    clock change when voltage switching, and the mmc core delays become
    effective.
    
    To do that has meant keeping track of driver strength (host->drv_type),
    and cases of reinitialization (host->reinit_uhs).
    
    Note also, the 'turning_on_clk' restriction should not be necessary
    but is done to minimize the impact of the change on stable kernels.
    
    Fixes: 20b92a30b561 ("mmc: sdhci: update signal voltage switch code")
    Cc: stable@vger.kernel.org
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20221128133259.38305-2-adrian.hunter@intel.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb8f8095143e64abfb166b8503d3cfa1a7903fc0
Author: Wenchao Chen <wenchao.chen@unisoc.com>
Date:   Wed Nov 30 20:13:28 2022 +0800

    mmc: sdhci-sprd: Fix no reset data and command after voltage switch
    
    commit dd30dcfa7a74a06f8dcdab260d8d5adf32f17333 upstream.
    
    After switching the voltage, no reset data and command will cause
    CMD2 timeout.
    
    Fixes: 29ca763fc26f ("mmc: sdhci-sprd: Add pin control support for voltage switch")
    Signed-off-by: Wenchao Chen <wenchao.chen@unisoc.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Baolin Wang <baolin.wang@linux.alibaba.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221130121328.25553-1-wenchao.chen@unisoc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c7681c1a52fb6cb5b370635d27df7f610f554e7
Author: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>
Date:   Mon Nov 21 11:57:21 2022 +0100

    mmc: sdhci-esdhc-imx: correct CQHCI exit halt state check
    
    commit a3cab1d2132474969871b5d7f915c5c0167b48b0 upstream.
    
    With the current logic the "failed to exit halt state" error would be
    shown even if any other bit than CQHCI_HALT was set in the CQHCI_CTL
    register, since the right hand side is always true. Fix this by using
    the correct operator (bit-wise instead of logical AND) to only check for
    the halt bit flag, which was obviously intended here.
    
    Fixes: 85236d2be844 ("mmc: sdhci-esdhc-imx: clear the HALT bit when enable CQE")
    Signed-off-by: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>
    Acked-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221121105721.1903878-1-sebastian.falbesoner@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01dbe4db590a8a7e4698f83e2d3cf5cc618e7bb3
Author: Christian Löhle <CLoehle@hyperstone.com>
Date:   Thu Nov 17 14:42:09 2022 +0000

    mmc: core: Fix ambiguous TRIM and DISCARD arg
    
    commit 489d144563f23911262a652234b80c70c89c978b upstream.
    
    Clean up the MMC_TRIM_ARGS define that became ambiguous with DISCARD
    introduction.  While at it, let's fix one usage where MMC_TRIM_ARGS falsely
    included DISCARD too.
    
    Fixes: b3bf915308ca ("mmc: core: new discard feature support at eMMC v4.5")
    Signed-off-by: Christian Loehle <cloehle@hyperstone.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/11376b5714964345908f3990f17e0701@hyperstone.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 738946e35504f66dfda1978ec72d0253a434ffc0
Author: Ye Bin <yebin10@huawei.com>
Date:   Wed Nov 23 17:55:06 2022 +0800

    mmc: mmc_test: Fix removal of debugfs file
    
    commit f4307b4df1c28842bb1950ff0e1b97e17031b17f upstream.
    
    In __mmc_test_register_dbgfs_file(), we need to assign 'file', as it's
    being used when removing the debugfs files when the mmc_test module is
    removed.
    
    Fixes: a04c50aaa916 ("mmc: core: no need to check return value of debugfs_create functions")
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    [Ulf: Re-wrote the commit msg]
    Link: https://lore.kernel.org/r/20221123095506.1965691-1-yebin@huaweicloud.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 635d0517348e0d437158ddfac913354f0fe1819f
Author: Goh, Wei Sheng <wei.sheng.goh@intel.com>
Date:   Wed Nov 23 18:51:10 2022 +0800

    net: stmmac: Set MAC's flow control register to reflect current settings
    
    commit cc3d2b5fc0d6f8ad8a52da5ea679e5c2ec2adbd4 upstream.
    
    Currently, pause frame register GMAC_RX_FLOW_CTRL_RFE is not updated
    correctly when 'ethtool -A <IFACE> autoneg off rx off tx off' command
    is issued. This fix ensures the flow control change is reflected directly
    in the GMAC_RX_FLOW_CTRL_RFE register.
    
    Fixes: 46f69ded988d ("net: stmmac: Use resolved link config in mac_link_up()")
    Cc: <stable@vger.kernel.org> # 5.10.x
    Signed-off-by: Goh, Wei Sheng <wei.sheng.goh@intel.com>
    Signed-off-by: Noor Azura Ahmad Tarmizi <noor.azura.ahmad.tarmizi@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9132dcdf3bf602609f5947deac44692054245f5f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 30 16:10:52 2022 -0800

    v4l2: don't fall back to follow_pfn() if pin_user_pages_fast() fails
    
    commit 6647e76ab623b2b3fb2efe03a86e9c9046c52c33 upstream.
    
    The V4L2_MEMORY_USERPTR interface is long deprecated and shouldn't be
    used (and is discouraged for any modern v4l drivers).  And Seth Jenkins
    points out that the fallback to VM_PFNMAP/VM_IO is fundamentally racy
    and dangerous.
    
    Note that it's not even a case that should trigger, since any normal
    user pointer logic ends up just using the pin_user_pages_fast() call
    that does the proper page reference counting.  That's not the problem
    case, only if you try to use special device mappings do you have any
    issues.
    
    Normally I'd just remove this during the merge window, but since Seth
    pointed out the problem cases, we really want to know as soon as
    possible if there are actually any users of this odd special case of a
    legacy interface.  Neither Hans nor Mauro seem to think that such
    mis-uses of the old legacy interface should exist.  As Mauro says:
    
     "See, V4L2 has actually 4 streaming APIs:
            - Kernel-allocated mmap (usually referred simply as just mmap);
            - USERPTR mmap;
            - read();
            - dmabuf;
    
      The USERPTR is one of the oldest way to use it, coming from V4L
      version 1 times, and by far the least used one"
    
    And Hans chimed in on the USERPTR interface:
    
     "To be honest, I wouldn't mind if it goes away completely, but that's a
      bit of a pipe dream right now"
    
    but while removing this legacy interface entirely may be a pipe dream we
    can at least try to remove the unlikely (and actively broken) case of
    using special device mappings for USERPTR accesses.
    
    This replaces it with a WARN_ONCE() that we can remove once we've
    hopefully confirmed that no actual users exist.
    
    NOTE! Longer term, this means that a 'struct frame_vector' only ever
    contains proper page pointers, and all the games we have with converting
    them to pages can go away (grep for 'frame_vector_to_pages()' and the
    uses of 'vec->is_pfns').  But this is just the first step, to verify
    that this code really is all dead, and do so as quickly as possible.
    
    Reported-by: Seth Jenkins <sethjenkins@google.com>
    Acked-by: Hans Verkuil <hverkuil@xs4all.nl>
    Acked-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76ad884be092f041f7d1cf0803f3b7fcf435abba
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Nov 25 00:29:26 2022 +0200

    pinctrl: intel: Save and restore pins in "direct IRQ" mode
    
    commit 6989ea4881c8944fbf04378418bb1af63d875ef8 upstream.
    
    The firmware on some systems may configure GPIO pins to be
    an interrupt source in so called "direct IRQ" mode. In such
    cases the GPIO controller driver has no idea if those pins
    are being used or not. At the same time, there is a known bug
    in the firmwares that don't restore the pin settings correctly
    after suspend, i.e. by an unknown reason the Rx value becomes
    inverted.
    
    Hence, let's save and restore the pins that are configured
    as GPIOs in the input mode with GPIROUTIOXAPIC bit set.
    
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: Dale Smith <dalepsmith@gmail.com>
    Reported-and-tested-by: John Harris <jmharris@gmail.com>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=214749
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Link: https://lore.kernel.org/r/20221124222926.72326-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41296b85fafa48bece8db50bfc4742aebe5393ea
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Nov 30 07:25:51 2022 -0800

    x86/bugs: Make sure MSR_SPEC_CTRL is updated properly upon resume from S3
    
    commit 66065157420c5b9b3f078f43d313c153e1ff7f83 upstream.
    
    The "force" argument to write_spec_ctrl_current() is currently ambiguous
    as it does not guarantee the MSR write. This is due to the optimization
    that writes to the MSR happen only when the new value differs from the
    cached value.
    
    This is fine in most cases, but breaks for S3 resume when the cached MSR
    value gets out of sync with the hardware MSR value due to S3 resetting
    it.
    
    When x86_spec_ctrl_current is same as x86_spec_ctrl_base, the MSR write
    is skipped. Which results in SPEC_CTRL mitigations not getting restored.
    
    Move the MSR write from write_spec_ctrl_current() to a new function that
    unconditionally writes to the MSR. Update the callers accordingly and
    rename functions.
    
      [ bp: Rework a bit. ]
    
    Fixes: caa0ff24d5d0 ("x86/bugs: Keep a per-CPU IA32_SPEC_CTRL value")
    Suggested-by: Borislav Petkov <bp@alien8.de>
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/806d39b0bfec2fe8f50dc5446dff20f5bb24a959.1669821572.git.pawan.kumar.gupta@linux.intel.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33021419fd81efd3d729a7f19341ba4b98fe66ce
Author: ZhangPeng <zhangpeng362@huawei.com>
Date:   Sat Nov 19 21:05:42 2022 +0900

    nilfs2: fix NULL pointer dereference in nilfs_palloc_commit_free_entry()
    
    commit f0a0ccda18d6fd826d7c7e7ad48a6ed61c20f8b4 upstream.
    
    Syzbot reported a null-ptr-deref bug:
    
     NILFS (loop0): segctord starting. Construction interval = 5 seconds, CP
     frequency < 30 seconds
     general protection fault, probably for non-canonical address
     0xdffffc0000000002: 0000 [#1] PREEMPT SMP KASAN
     KASAN: null-ptr-deref in range [0x0000000000000010-0x0000000000000017]
     CPU: 1 PID: 3603 Comm: segctord Not tainted
     6.1.0-rc2-syzkaller-00105-gb229b6ca5abb #0
     Hardware name: Google Compute Engine/Google Compute Engine, BIOS Google
     10/11/2022
     RIP: 0010:nilfs_palloc_commit_free_entry+0xe5/0x6b0
     fs/nilfs2/alloc.c:608
     Code: 00 00 00 00 fc ff df 80 3c 02 00 0f 85 cd 05 00 00 48 b8 00 00 00
     00 00 fc ff df 4c 8b 73 08 49 8d 7e 10 48 89 fa 48 c1 ea 03 <80> 3c 02
     00 0f 85 26 05 00 00 49 8b 46 10 be a6 00 00 00 48 c7 c7
     RSP: 0018:ffffc90003dff830 EFLAGS: 00010212
     RAX: dffffc0000000000 RBX: ffff88802594e218 RCX: 000000000000000d
     RDX: 0000000000000002 RSI: 0000000000002000 RDI: 0000000000000010
     RBP: ffff888071880222 R08: 0000000000000005 R09: 000000000000003f
     R10: 000000000000000d R11: 0000000000000000 R12: ffff888071880158
     R13: ffff88802594e220 R14: 0000000000000000 R15: 0000000000000004
     FS:  0000000000000000(0000) GS:ffff8880b9b00000(0000)
     knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007fb1c08316a8 CR3: 0000000018560000 CR4: 0000000000350ee0
     Call Trace:
      <TASK>
      nilfs_dat_commit_free fs/nilfs2/dat.c:114 [inline]
      nilfs_dat_commit_end+0x464/0x5f0 fs/nilfs2/dat.c:193
      nilfs_dat_commit_update+0x26/0x40 fs/nilfs2/dat.c:236
      nilfs_btree_commit_update_v+0x87/0x4a0 fs/nilfs2/btree.c:1940
      nilfs_btree_commit_propagate_v fs/nilfs2/btree.c:2016 [inline]
      nilfs_btree_propagate_v fs/nilfs2/btree.c:2046 [inline]
      nilfs_btree_propagate+0xa00/0xd60 fs/nilfs2/btree.c:2088
      nilfs_bmap_propagate+0x73/0x170 fs/nilfs2/bmap.c:337
      nilfs_collect_file_data+0x45/0xd0 fs/nilfs2/segment.c:568
      nilfs_segctor_apply_buffers+0x14a/0x470 fs/nilfs2/segment.c:1018
      nilfs_segctor_scan_file+0x3f4/0x6f0 fs/nilfs2/segment.c:1067
      nilfs_segctor_collect_blocks fs/nilfs2/segment.c:1197 [inline]
      nilfs_segctor_collect fs/nilfs2/segment.c:1503 [inline]
      nilfs_segctor_do_construct+0x12fc/0x6af0 fs/nilfs2/segment.c:2045
      nilfs_segctor_construct+0x8e3/0xb30 fs/nilfs2/segment.c:2379
      nilfs_segctor_thread_construct fs/nilfs2/segment.c:2487 [inline]
      nilfs_segctor_thread+0x3c3/0xf30 fs/nilfs2/segment.c:2570
      kthread+0x2e4/0x3a0 kernel/kthread.c:376
      ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
      </TASK>
     ...
    
    If DAT metadata file is corrupted on disk, there is a case where
    req->pr_desc_bh is NULL and blocknr is 0 at nilfs_dat_commit_end() during
    a b-tree operation that cascadingly updates ancestor nodes of the b-tree,
    because nilfs_dat_commit_alloc() for a lower level block can initialize
    the blocknr on the same DAT entry between nilfs_dat_prepare_end() and
    nilfs_dat_commit_end().
    
    If this happens, nilfs_dat_commit_end() calls nilfs_dat_commit_free()
    without valid buffer heads in req->pr_desc_bh and req->pr_bitmap_bh, and
    causes the NULL pointer dereference above in
    nilfs_palloc_commit_free_entry() function, which leads to a crash.
    
    Fix this by adding a NULL check on req->pr_desc_bh and req->pr_bitmap_bh
    before nilfs_palloc_commit_free_entry() in nilfs_dat_commit_free().
    
    This also calls nilfs_error() in that case to notify that there is a fatal
    flaw in the filesystem metadata and prevent further operations.
    
    Link: https://lkml.kernel.org/r/00000000000097c20205ebaea3d6@google.com
    Link: https://lkml.kernel.org/r/20221114040441.1649940-1-zhangpeng362@huawei.com
    Link: https://lkml.kernel.org/r/20221119120542.17204-1-konishi.ryusuke@gmail.com
    Signed-off-by: ZhangPeng <zhangpeng362@huawei.com>
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+ebe05ee8e98f755f61d0@syzkaller.appspotmail.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e44dd9a8dd66910a917953d0a062d05eb10151f
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Sat Nov 19 10:36:59 2022 +0800

    tools/vm/slabinfo-gnuplot: use "grep -E" instead of "egrep"
    
    commit a435874bf626f55d7147026b059008c8de89fbb8 upstream.
    
    The latest version of grep claims the egrep is now obsolete so the build
    now contains warnings that look like:
    
            egrep: warning: egrep is obsolescent; using grep -E
    
    fix this up by moving the related file to use "grep -E" instead.
    
      sed -i "s/egrep/grep -E/g" `grep egrep -rwl tools/vm`
    
    Here are the steps to install the latest grep:
    
      wget http://ftp.gnu.org/gnu/grep/grep-3.8.tar.gz
      tar xf grep-3.8.tar.gz
      cd grep-3.8 && ./configure && make
      sudo make install
      export PATH=/usr/local/bin:$PATH
    
    Link: https://lkml.kernel.org/r/1668825419-30584-1-git-send-email-yangtiezhu@loongson.cn
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b60a8ad771fd15a1539fe6488bc424bd7dabce2a
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Mon Nov 21 10:44:03 2022 -0500

    error-injection: Add prompt for function error injection
    
    commit a4412fdd49dc011bcc2c0d81ac4cab7457092650 upstream.
    
    The config to be able to inject error codes into any function annotated
    with ALLOW_ERROR_INJECTION() is enabled when FUNCTION_ERROR_INJECTION is
    enabled.  But unfortunately, this is always enabled on x86 when KPROBES
    is enabled, and there's no way to turn it off.
    
    As kprobes is useful for observability of the kernel, it is useful to
    have it enabled in production environments.  But error injection should
    be avoided.  Add a prompt to the config to allow it to be disabled even
    when kprobes is enabled, and get rid of the "def_bool y".
    
    This is a kernel debug feature (it's in Kconfig.debug), and should have
    never been something enabled by default.
    
    Cc: stable@vger.kernel.org
    Fixes: 540adea3809f6 ("error-injection: Separate error-injection from kprobe")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 757eb00c4c4063749649ef992cd989bc9043656d
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed Nov 30 22:06:04 2022 +0900

    ALSA: dice: fix regression for Lexicon I-ONIX FW810S
    
    commit 9b84f0f74d0d716e3fd18dc428ac111266ef5844 upstream.
    
    For Lexicon I-ONIX FW810S, the call of ioctl(2) with
    SNDRV_PCM_IOCTL_HW_PARAMS can returns -ETIMEDOUT. This is a regression due
    to the commit 41319eb56e19 ("ALSA: dice: wait just for
    NOTIFY_CLOCK_ACCEPTED after GLOBAL_CLOCK_SELECT operation"). The device
    does not emit NOTIFY_CLOCK_ACCEPTED notification when accepting
    GLOBAL_CLOCK_SELECT operation with the same parameters as current ones.
    
    This commit fixes the regression. When receiving no notification, return
    -ETIMEDOUT as long as operating for any change.
    
    Fixes: 41319eb56e19 ("ALSA: dice: wait just for NOTIFY_CLOCK_ACCEPTED after GLOBAL_CLOCK_SELECT operation")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20221130130604.29774-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1a96a6f302cad356e905ee7b87dbbb353975529
Author: Björn Töpel <bjorn@rivosinc.com>
Date:   Tue Nov 15 10:06:40 2022 +0100

    riscv: mm: Proper page permissions after initmem free
    
    commit 6fdd5d2f8c2f54b7fad4ff4df2a19542aeaf6102 upstream.
    
    64-bit RISC-V kernels have the kernel image mapped separately to alias
    the linear map. The linear map and the kernel image map are documented
    as "direct mapping" and "kernel" respectively in [1].
    
    At image load time, the linear map corresponding to the kernel image
    is set to PAGE_READ permission, and the kernel image map is set to
    PAGE_READ|PAGE_EXEC.
    
    When the initmem is freed, the pages in the linear map should be
    restored to PAGE_READ|PAGE_WRITE, whereas the corresponding pages in
    the kernel image map should be restored to PAGE_READ, by removing the
    PAGE_EXEC permission.
    
    This is not the case. For 64-bit kernels, only the linear map is
    restored to its proper page permissions at initmem free, and not the
    kernel image map.
    
    In practise this results in that the kernel can potentially jump to
    dead __init code, and start executing invalid instructions, without
    getting an exception.
    
    Restore the freed initmem properly, by setting both the kernel image
    map to the correct permissions.
    
    [1] Documentation/riscv/vm-layout.rst
    
    Fixes: e5c35fa04019 ("riscv: Map the kernel with correct permissions the first time")
    Signed-off-by: Björn Töpel <bjorn@rivosinc.com>
    Reviewed-by: Alexandre Ghiti <alex@ghiti.fr>
    Tested-by: Alexandre Ghiti <alex@ghiti.fr>
    Link: https://lore.kernel.org/r/20221115090641.258476-1-bjorn@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 823df3607d8b90c8ef9c5419c4626103fb55da4a
Author: Jisheng Zhang <jszhang@kernel.org>
Date:   Thu Nov 3 01:02:54 2022 +0800

    riscv: vdso: fix section overlapping under some conditions
    
    commit 74f6bb55c834da6d4bac24f44868202743189b2b upstream.
    
    lkp reported a build error, I tried the config and can reproduce
    build error as below:
    
      VDSOLD  arch/riscv/kernel/vdso/vdso.so.dbg
    ld.lld: error: section .note file range overlaps with .text
    >>> .note range is [0x7C8, 0x803]
    >>> .text range is [0x800, 0x1993]
    
    ld.lld: error: section .text file range overlaps with .dynamic
    >>> .text range is [0x800, 0x1993]
    >>> .dynamic range is [0x808, 0x937]
    
    ld.lld: error: section .note virtual address range overlaps with .text
    >>> .note range is [0x7C8, 0x803]
    >>> .text range is [0x800, 0x1993]
    
    Fix it by setting DISABLE_BRANCH_PROFILING which will disable branch
    tracing for vdso, thus avoid useless _ftrace_annotated_branch section
    and _ftrace_branch section. Although we can also fix it by removing
    the hardcoded .text begin address, but I think that's another story
    and should be put into another patch.
    
    Link: https://lore.kernel.org/lkml/202210122123.Cc4FPShJ-lkp@intel.com/#r
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Jisheng Zhang <jszhang@kernel.org>
    Link: https://lore.kernel.org/r/20221102170254.1925-1-jszhang@kernel.org
    Fixes: ad5d1122b82f ("riscv: use vDSO common flow to reduce the latency of the time-related functions")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e035d5a2a6b907cfce9a80c5f442c2e459cd34e
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 18 17:33:03 2022 +0800

    hwmon: (coretemp) fix pci device refcount leak in nv1a_ram_new()
    
    [ Upstream commit 7dec14537c5906b8bf40fd6fd6d9c3850f8df11d ]
    
    As comment of pci_get_domain_bus_and_slot() says, it returns
    a pci device with refcount increment, when finish using it,
    the caller must decrement the reference count by calling
    pci_dev_put(). So call it after using to avoid refcount leak.
    
    Fixes: 14513ee696a0 ("hwmon: (coretemp) Use PCI host bridge ID to identify CPU if necessary")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221118093303.214163-1-yangyingliang@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7692700ac818866d138a8de555130a6e70e6ac16
Author: Phil Auld <pauld@redhat.com>
Date:   Thu Nov 17 11:23:13 2022 -0500

    hwmon: (coretemp) Check for null before removing sysfs attrs
    
    [ Upstream commit a89ff5f5cc64b9fe7a992cf56988fd36f56ca82a ]
    
    If coretemp_add_core() gets an error then pdata->core_data[indx]
    is already NULL and has been kfreed. Don't pass that to
    sysfs_remove_group() as that will crash in sysfs_remove_group().
    
    [Shortened for readability]
    [91854.020159] sysfs: cannot create duplicate filename '/devices/platform/coretemp.0/hwmon/hwmon2/temp20_label'
    <cpu offline>
    [91855.126115] BUG: kernel NULL pointer dereference, address: 0000000000000188
    [91855.165103] #PF: supervisor read access in kernel mode
    [91855.194506] #PF: error_code(0x0000) - not-present page
    [91855.224445] PGD 0 P4D 0
    [91855.238508] Oops: 0000 [#1] PREEMPT SMP PTI
    ...
    [91855.342716] RIP: 0010:sysfs_remove_group+0xc/0x80
    ...
    [91855.796571] Call Trace:
    [91855.810524]  coretemp_cpu_offline+0x12b/0x1dd [coretemp]
    [91855.841738]  ? coretemp_cpu_online+0x180/0x180 [coretemp]
    [91855.871107]  cpuhp_invoke_callback+0x105/0x4b0
    [91855.893432]  cpuhp_thread_fun+0x8e/0x150
    ...
    
    Fix this by checking for NULL first.
    
    Signed-off-by: Phil Auld <pauld@redhat.com>
    Cc: linux-hwmon@vger.kernel.org
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Jean Delvare <jdelvare@suse.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20221117162313.3164803-1-pauld@redhat.com
    Fixes: 199e0de7f5df3 ("hwmon: (coretemp) Merge pkgtemp with coretemp")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b5836b9c4b0cc5b648d4d0f2aa4fb8cf42629ec
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Nov 28 15:56:04 2022 +0900

    net: ethernet: renesas: ravb: Fix promiscuous mode after system resumed
    
    [ Upstream commit d66233a312ec9013af3e37e4030b479a20811ec3 ]
    
    After system resumed on some environment board, the promiscuous mode
    is disabled because the SoC turned off. So, call ravb_set_rx_mode() in
    the ravb_resume() to fix the issue.
    
    Reported-by: Tho Vu <tho.vu.wh@renesas.com>
    Fixes: 0184165b2f42 ("ravb: add sleep PM suspend/resume support")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Reviewed-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20221128065604.1864391-1-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0dfb9a566327182387c90100ea54d8426cee8c67
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Sat Nov 26 11:17:20 2022 +0800

    sctp: fix memory leak in sctp_stream_outq_migrate()
    
    [ Upstream commit 9ed7bfc79542119ac0a9e1ce8a2a5285e43433e9 ]
    
    When sctp_stream_outq_migrate() is called to release stream out resources,
    the memory pointed to by prio_head in stream out is not released.
    
    The memory leak information is as follows:
     unreferenced object 0xffff88801fe79f80 (size 64):
       comm "sctp_repo", pid 7957, jiffies 4294951704 (age 36.480s)
       hex dump (first 32 bytes):
         80 9f e7 1f 80 88 ff ff 80 9f e7 1f 80 88 ff ff  ................
         90 9f e7 1f 80 88 ff ff 90 9f e7 1f 80 88 ff ff  ................
       backtrace:
         [<ffffffff81b215c6>] kmalloc_trace+0x26/0x60
         [<ffffffff88ae517c>] sctp_sched_prio_set+0x4cc/0x770
         [<ffffffff88ad64f2>] sctp_stream_init_ext+0xd2/0x1b0
         [<ffffffff88aa2604>] sctp_sendmsg_to_asoc+0x1614/0x1a30
         [<ffffffff88ab7ff1>] sctp_sendmsg+0xda1/0x1ef0
         [<ffffffff87f765ed>] inet_sendmsg+0x9d/0xe0
         [<ffffffff8754b5b3>] sock_sendmsg+0xd3/0x120
         [<ffffffff8755446a>] __sys_sendto+0x23a/0x340
         [<ffffffff87554651>] __x64_sys_sendto+0xe1/0x1b0
         [<ffffffff89978b49>] do_syscall_64+0x39/0xb0
         [<ffffffff89a0008b>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Link: https://syzkaller.appspot.com/bug?exrid=29c402e56c4760763cc0
    Fixes: 637784ade221 ("sctp: introduce priority based stream scheduler")
    Reported-by: syzbot+29c402e56c4760763cc0@syzkaller.appspotmail.com
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/20221126031720.378562-1-shaozhengchao@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcb3e02161567516dc424097b2d2fb4d570d2f43
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Nov 28 11:18:12 2022 -0500

    packet: do not set TP_STATUS_CSUM_VALID on CHECKSUM_COMPLETE
    
    [ Upstream commit b85f628aa158a653c006e9c1405a117baef8c868 ]
    
    CHECKSUM_COMPLETE signals that skb->csum stores the sum over the
    entire packet. It does not imply that an embedded l4 checksum
    field has been validated.
    
    Fixes: 682f048bd494 ("af_packet: pass checksum validation status to the user")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20221128161812.640098-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04b995e963229501401810dab89dc73e7f12d054
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Fri Nov 25 02:51:34 2022 +0900

    net: tun: Fix use-after-free in tun_detach()
    
    [ Upstream commit 5daadc86f27ea4d691e2131c04310d0418c6cd12 ]
    
    syzbot reported use-after-free in tun_detach() [1].  This causes call
    trace like below:
    
    ==================================================================
    BUG: KASAN: use-after-free in notifier_call_chain+0x1ee/0x200 kernel/notifier.c:75
    Read of size 8 at addr ffff88807324e2a8 by task syz-executor.0/3673
    
    CPU: 0 PID: 3673 Comm: syz-executor.0 Not tainted 6.1.0-rc5-syzkaller-00044-gcc675d22e422 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xd1/0x138 lib/dump_stack.c:106
     print_address_description mm/kasan/report.c:284 [inline]
     print_report+0x15e/0x461 mm/kasan/report.c:395
     kasan_report+0xbf/0x1f0 mm/kasan/report.c:495
     notifier_call_chain+0x1ee/0x200 kernel/notifier.c:75
     call_netdevice_notifiers_info+0x86/0x130 net/core/dev.c:1942
     call_netdevice_notifiers_extack net/core/dev.c:1983 [inline]
     call_netdevice_notifiers net/core/dev.c:1997 [inline]
     netdev_wait_allrefs_any net/core/dev.c:10237 [inline]
     netdev_run_todo+0xbc6/0x1100 net/core/dev.c:10351
     tun_detach drivers/net/tun.c:704 [inline]
     tun_chr_close+0xe4/0x190 drivers/net/tun.c:3467
     __fput+0x27c/0xa90 fs/file_table.c:320
     task_work_run+0x16f/0x270 kernel/task_work.c:179
     exit_task_work include/linux/task_work.h:38 [inline]
     do_exit+0xb3d/0x2a30 kernel/exit.c:820
     do_group_exit+0xd4/0x2a0 kernel/exit.c:950
     get_signal+0x21b1/0x2440 kernel/signal.c:2858
     arch_do_signal_or_restart+0x86/0x2300 arch/x86/kernel/signal.c:869
     exit_to_user_mode_loop kernel/entry/common.c:168 [inline]
     exit_to_user_mode_prepare+0x15f/0x250 kernel/entry/common.c:203
     __syscall_exit_to_user_mode_work kernel/entry/common.c:285 [inline]
     syscall_exit_to_user_mode+0x1d/0x50 kernel/entry/common.c:296
     do_syscall_64+0x46/0xb0 arch/x86/entry/common.c:86
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The cause of the issue is that sock_put() from __tun_detach() drops
    last reference count for struct net, and then notifier_call_chain()
    from netdev_state_change() accesses that struct net.
    
    This patch fixes the issue by calling sock_put() from tun_detach()
    after all necessary accesses for the struct net has done.
    
    Fixes: 83c1f36f9880 ("tun: send netlink notification when the device is modified")
    Reported-by: syzbot+106f9b687cd64ee70cd1@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=96eb7f1ce75ef933697f24eeab928c4a716edefe [1]
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Link: https://lore.kernel.org/r/20221124175134.1589053-1-syoshida@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43ca0adf79e541acbe04da1ee487f813e7350ccc
Author: David Howells <dhowells@redhat.com>
Date:   Mon Nov 28 22:02:56 2022 +0000

    afs: Fix fileserver probe RTT handling
    
    [ Upstream commit ca57f02295f188d6c65ec02202402979880fa6d8 ]
    
    The fileserver probing code attempts to work out the best fileserver to
    use for a volume by retrieving the RTT calculated by AF_RXRPC for the
    probe call sent to each server and comparing them.  Sometimes, however,
    no RTT estimate is available and rxrpc_kernel_get_srtt() returns false,
    leading good fileservers to be given an RTT of UINT_MAX and thus causing
    the rotation algorithm to ignore them.
    
    Fix afs_select_fileserver() to ignore rxrpc_kernel_get_srtt()'s return
    value and just take the estimated RTT it provides - which will be capped
    at 1 second.
    
    Fixes: 1d4adfaf6574 ("rxrpc: Make rxrpc_kernel_get_srtt() indicate validity")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.dionne@auristor.com>
    Tested-by: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Link: https://lore.kernel.org/r/166965503999.3392585.13954054113218099395.stgit@warthog.procyon.org.uk/
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 543d917f691ab06885ee779c862065899eaa4251
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 24 23:01:30 2022 +0800

    net: mdiobus: fix unbalanced node reference count
    
    [ Upstream commit cdde1560118f82498fc9e9a7c1ef7f0ef7755891 ]
    
    I got the following report while doing device(mscc-miim) load test
    with CONFIG_OF_UNITTEST and CONFIG_OF_DYNAMIC enabled:
    
      OF: ERROR: memory leak, expected refcount 1 instead of 2,
      of_node_get()/of_node_put() unbalanced - destroy cset entry:
      attach overlay node /spi/soc@0/mdio@7107009c/ethernet-phy@0
    
    If the 'fwnode' is not an acpi node, the refcount is get in
    fwnode_mdiobus_phy_device_register(), but it has never been
    put when the device is freed in the normal path. So call
    fwnode_handle_put() in phy_device_release() to avoid leak.
    
    If it's an acpi node, it has never been get, but it's put
    in the error path, so call fwnode_handle_get() before
    phy_device_register() to keep get/put operation balanced.
    
    Fixes: bc1bee3b87ee ("net: mdiobus: Introduce fwnode_mdiobus_register_phy()")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20221124150130.609420-1-yangyingliang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dca370e575d9b6c983f5015e8dc035e23e219ee6
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Nov 25 15:57:24 2022 +0800

    net: hsr: Fix potential use-after-free
    
    [ Upstream commit 7e177d32442b7ed08a9fa61b61724abc548cb248 ]
    
    The skb is delivered to netif_rx() which may free it, after calling this,
    dereferencing skb may trigger use-after-free.
    
    Fixes: f421436a591d ("net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221125075724.27912-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1daec0815655e110c6f206c5e777a4af8168ff58
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 25 12:46:43 2022 -0500

    tipc: re-fetch skb cb after tipc_msg_validate
    
    [ Upstream commit 3067bc61fcfe3081bf4807ce65560f499e895e77 ]
    
    As the call trace shows, the original skb was freed in tipc_msg_validate(),
    and dereferencing the old skb cb would cause an use-after-free crash.
    
      BUG: KASAN: use-after-free in tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
      Call Trace:
       <IRQ>
       tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
      ...
      Allocated by task 47078:
       kmem_cache_alloc_node+0x158/0x4d0
       __alloc_skb+0x1c1/0x270
       tipc_buf_acquire+0x1e/0xe0 [tipc]
       tipc_msg_create+0x33/0x1c0 [tipc]
       tipc_link_build_proto_msg+0x38a/0x2100 [tipc]
       tipc_link_timeout+0x8b8/0xef0 [tipc]
       tipc_node_timeout+0x2a1/0x960 [tipc]
       call_timer_fn+0x2d/0x1c0
      ...
      Freed by task 47078:
       tipc_msg_validate+0x7b/0x440 [tipc]
       tipc_crypto_rcv_complete+0x4b5/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
    
    This patch fixes it by re-fetching the skb cb from the new allocated skb
    after calling tipc_msg_validate().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/1b1cdba762915325bd8ef9a98d0276eb673df2a5.1669398403.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16a64dc2654585527b6d0c0f27c7b81526e3c369
Author: Jerry Ray <jerry.ray@microchip.com>
Date:   Mon Nov 28 13:35:59 2022 -0600

    dsa: lan9303: Correct stat name
    
    [ Upstream commit 39f59bca275d2d819a8788c0f962e9e89843efc9 ]
    
    This patch changes the reported ethtool statistics for the lan9303
    family of parts covered by this driver.
    
    The TxUnderRun statistic label is renamed to RxShort to accurately
    reflect what stat the device is reporting.  I did not reorder the
    statistics as that might cause problems with existing user code that
    are expecting the stats at a certain offset.
    
    Fixes: a1292595e006 ("net: dsa: add new DSA switch driver for the SMSC-LAN9303")
    Signed-off-by: Jerry Ray <jerry.ray@microchip.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20221128193559.6572-1-jerry.ray@microchip.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 766086ea8ca7c866b276bebde7abf9c711462c81
Author: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
Date:   Thu Nov 24 16:08:03 2022 +0530

    net: wwan: iosm: fix dma_alloc_coherent incompatible pointer type
    
    [ Upstream commit 4a99e3c8ed888577b947cbed97d88c9706896105 ]
    
    Fix build error reported on armhf while preparing 6.1-rc5
    for Debian.
    
    iosm_ipc_protocol.c:244:36: error: passing argument 3 of
    'dma_alloc_coherent' from incompatible pointer type.
    
    Change phy_ap_shm type from phys_addr_t to dma_addr_t.
    
    Fixes: faed4c6f6f48 ("net: iosm: shared memory protocol")
    Reported-by: Bonaccorso Salvatore <carnil@debian.org>
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c667751a42653e866ca3e5c6ede97dd779c6083c
Author: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
Date:   Thu Nov 24 16:07:46 2022 +0530

    net: wwan: iosm: fix kernel test robot reported error
    
    [ Upstream commit 985a02e75881b73a43c9433a718b49d272a9dd6b ]
    
    sparse warnings - iosm_ipc_mux_codec.c:1474 using plain
    integer as NULL pointer.
    
    Use skb_trim() to reset skb tail & len.
    
    Fixes: 9413491e20e1 ("net: iosm: encode or decode datagram")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c584d6d9cfb935dce8fc81a4c26debac0a3049b
Author: Yuri Karpov <YKarpov@ispras.ru>
Date:   Thu Nov 24 11:43:03 2022 +0300

    net: ethernet: nixge: fix NULL dereference
    
    [ Upstream commit 9256db4e45e8b497b0e993cc3ed4ad08eb2389b6 ]
    
    In function nixge_hw_dma_bd_release() dereference of NULL pointer
    priv->rx_bd_v is possible for the case of its allocation failure in
    nixge_hw_dma_bd_init().
    
    Move for() loop with priv->rx_bd_v dereference under the check for
    its validity.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 492caffa8a1a ("net: ethernet: nixge: Add support for National Instruments XGE netdev")
    Signed-off-by: Yuri Karpov <YKarpov@ispras.ru>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8782b32ef867de7981bbe9e86ecb90e92e8780bd
Author: Wang Hai <wanghai38@huawei.com>
Date:   Thu Nov 24 16:10:05 2022 +0800

    net/9p: Fix a potential socket leak in p9_socket_open
    
    [ Upstream commit dcc14cfd7debe11b825cb077e75d91d2575b4cb8 ]
    
    Both p9_fd_create_tcp() and p9_fd_create_unix() will call
    p9_socket_open(). If the creation of p9_trans_fd fails,
    p9_fd_create_tcp() and p9_fd_create_unix() will return an
    error directly instead of releasing the cscoket, which will
    result in a socket leak.
    
    This patch adds sock_release() to fix the leak issue.
    
    Fixes: 6b18662e239a ("9p connect fixes")
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    ACKed-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fc9425bff4b77c489b151392283251bc3078b47
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 24 07:09:17 2022 +0000

    net: net_netdev: Fix error handling in ntb_netdev_init_module()
    
    [ Upstream commit b8f79dccd38edf7db4911c353d9cd792ab13a327 ]
    
    The ntb_netdev_init_module() returns the ntb_transport_register_client()
    directly without checking its return value, if
    ntb_transport_register_client() failed, the NTB client device is not
    unregistered.
    
    Fix by unregister NTB client device when ntb_transport_register_client()
    failed.
    
    Fixes: 548c237c0a99 ("net: Add support for NTB virtual ethernet device")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bc893ef36f9ea8aa6bcc0e4333a829797ccdae4
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Thu Nov 24 11:03:08 2022 +0800

    net: ethernet: ti: am65-cpsw: fix error handling in am65_cpsw_nuss_probe()
    
    [ Upstream commit 46fb6512538d201d9a5b2bd7138b6751c37fdf0b ]
    
    The am65_cpsw_nuss_cleanup_ndev() function calls unregister_netdev()
    even if register_netdev() fails, which triggers WARN_ON(1) in
    unregister_netdevice_many(). To fix it, make sure that
    unregister_netdev() is called only on registered netdev.
    
    Compile tested only.
    
    Fixes: 84b4aa493249 ("net: ethernet: ti: am65-cpsw: add multi port support in mac-only mode")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7730904f50c7187dd16c76949efb56b5fb55cd57
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 23 21:28:08 2022 +0800

    net: phy: fix null-ptr-deref while probe() failed
    
    [ Upstream commit 369eb2c9f1f72adbe91e0ea8efb130f0a2ba11a6 ]
    
    I got a null-ptr-deref report as following when doing fault injection test:
    
    BUG: kernel NULL pointer dereference, address: 0000000000000058
    Oops: 0000 [#1] PREEMPT SMP KASAN PTI
    CPU: 1 PID: 253 Comm: 507-spi-dm9051 Tainted: G    B            N 6.1.0-rc3+
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
    RIP: 0010:klist_put+0x2d/0xd0
    Call Trace:
     <TASK>
     klist_remove+0xf1/0x1c0
     device_release_driver_internal+0x23e/0x2d0
     bus_remove_device+0x1bd/0x240
     device_del+0x357/0x770
     phy_device_remove+0x11/0x30
     mdiobus_unregister+0xa5/0x140
     release_nodes+0x6a/0xa0
     devres_release_all+0xf8/0x150
     device_unbind_cleanup+0x19/0xd0
    
    //probe path:
    phy_device_register()
      device_add()
    
    phy_connect
      phy_attach_direct() //set device driver
        probe() //it's failed, driver is not bound
        device_bind_driver() // probe failed, it's not called
    
    //remove path:
    phy_device_remove()
      device_del()
        device_release_driver_internal()
          __device_release_driver() //dev->drv is not NULL
            klist_remove() <- knode_driver is not added yet, cause null-ptr-deref
    
    In phy_attach_direct(), after setting the 'dev->driver', probe() fails,
    device_bind_driver() is not called, so the knode_driver->n_klist is not
    set, then it causes null-ptr-deref in __device_release_driver() while
    deleting device. Fix this by setting dev->driver to NULL in the error
    path in phy_attach_direct().
    
    Fixes: e13934563db0 ("[PATCH] PHY Layer fixup")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59b54f0563b6546c94bdb6823d3b382c75407019
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Tue Nov 8 16:19:26 2022 +0100

    wifi: mac8021: fix possible oob access in ieee80211_get_rate_duration
    
    [ Upstream commit 3e8f7abcc3473bc9603323803aeaed4ffcc3a2ab ]
    
    Fix possible out-of-bound access in ieee80211_get_rate_duration routine
    as reported by the following UBSAN report:
    
    UBSAN: array-index-out-of-bounds in net/mac80211/airtime.c:455:47
    index 15 is out of range for type 'u16 [12]'
    CPU: 2 PID: 217 Comm: kworker/u32:10 Not tainted 6.1.0-060100rc3-generic
    Hardware name: Acer Aspire TC-281/Aspire TC-281, BIOS R01-A2 07/18/2017
    Workqueue: mt76 mt76u_tx_status_data [mt76_usb]
    Call Trace:
     <TASK>
     show_stack+0x4e/0x61
     dump_stack_lvl+0x4a/0x6f
     dump_stack+0x10/0x18
     ubsan_epilogue+0x9/0x43
     __ubsan_handle_out_of_bounds.cold+0x42/0x47
    ieee80211_get_rate_duration.constprop.0+0x22f/0x2a0 [mac80211]
     ? ieee80211_tx_status_ext+0x32e/0x640 [mac80211]
     ieee80211_calc_rx_airtime+0xda/0x120 [mac80211]
     ieee80211_calc_tx_airtime+0xb4/0x100 [mac80211]
     mt76x02_send_tx_status+0x266/0x480 [mt76x02_lib]
     mt76x02_tx_status_data+0x52/0x80 [mt76x02_lib]
     mt76u_tx_status_data+0x67/0xd0 [mt76_usb]
     process_one_work+0x225/0x400
     worker_thread+0x50/0x3e0
     ? process_one_work+0x400/0x400
     kthread+0xe9/0x110
     ? kthread_complete_and_exit+0x20/0x20
     ret_from_fork+0x22/0x30
    
    Fixes: db3e1c40cf2f ("mac80211: Import airtime calculation code from mt76")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc0853f8b502a7cea385335fb2625625d1a447cb
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Nov 25 12:36:58 2022 +0100

    wifi: cfg80211: don't allow multi-BSSID in S1G
    
    [ Upstream commit acd3c92acc7aaec50a94d0a7faf7ccd74e952493 ]
    
    In S1G beacon frames there shouldn't be multi-BSSID elements
    since that's not supported, remove that to avoid a potential
    integer underflow and/or misparsing the frames due to the
    different length of the fixed part of the frame.
    
    While at it, initialize non_tx_data so we don't send garbage
    values to the user (even if it doesn't seem to matter now.)
    
    Reported-and-tested-by: Sönke Huster <shuster@seemoo.tu-darmstadt.de>
    Fixes: 9eaffe5078ca ("cfg80211: convert S1G beacon to scan results")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88a6fe3707888bd1893e9741157a7035c4159ab6
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Nov 25 12:36:57 2022 +0100

    wifi: cfg80211: fix buffer overflow in elem comparison
    
    [ Upstream commit 9f16b5c82a025cd4c864737409234ddc44fb166a ]
    
    For vendor elements, the code here assumes that 5 octets
    are present without checking. Since the element itself is
    already checked to fit, we only need to check the length.
    
    Reported-and-tested-by: Sönke Huster <shuster@seemoo.tu-darmstadt.de>
    Fixes: 0b8fb8235be8 ("cfg80211: Parsing of Multiple BSSID information in scanning")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08fff7aaeb7e1408d363093280a5888e2f947b3e
Author: Izabela Bakollari <ibakolla@redhat.com>
Date:   Wed Nov 23 11:10:08 2022 +0100

    aquantia: Do not purge addresses when setting the number of rings
    
    [ Upstream commit 2a83891130512dafb321418a8e7c9c09268d8c59 ]
    
    IPV6 addresses are purged when setting the number of rx/tx
    rings using ethtool -G. The function aq_set_ringparam
    calls dev_close, which removes the addresses. As a solution,
    call an internal function (aq_ndev_close).
    
    Fixes: c1af5427954b ("net: aquantia: Ethtool based ring size configuration")
    Signed-off-by: Izabela Bakollari <ibakolla@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a7aa52573da35eb0ae51284278cf659489fe820
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Wed Nov 23 18:06:42 2022 +0800

    qlcnic: fix sleep-in-atomic-context bugs caused by msleep
    
    [ Upstream commit 8dbd6e4ce1b9c527921643d9e34f188a10d4e893 ]
    
    The watchdog timer is used to monitor whether the process
    of transmitting data is timeout. If we use qlcnic driver,
    the dev_watchdog() that is the timer handler of watchdog
    timer will call qlcnic_tx_timeout() to process the timeout.
    But the qlcnic_tx_timeout() calls msleep(), as a result,
    the sleep-in-atomic-context bugs will happen. The processes
    are shown below:
    
       (atomic context)
    dev_watchdog
      qlcnic_tx_timeout
        qlcnic_83xx_idc_request_reset
          qlcnic_83xx_lock_driver
            msleep
    
    ---------------------------
    
       (atomic context)
    dev_watchdog
      qlcnic_tx_timeout
        qlcnic_83xx_idc_request_reset
          qlcnic_83xx_lock_driver
            qlcnic_83xx_recover_driver_lock
              msleep
    
    Fix by changing msleep() to mdelay(), the mdelay() is
    busy-waiting and the bugs could be mitigated.
    
    Fixes: 629263acaea3 ("qlcnic: 83xx CNA inter driver communication mechanism")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b734d26f037cf1bc86b494e0417eae282711f81
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Nov 23 14:36:51 2022 +0800

    can: m_can: Add check for devm_clk_get
    
    [ Upstream commit 68b4f9e0bdd0f920d7303d07bfe226cd0976961d ]
    
    Since the devm_clk_get may return error,
    it should be better to add check for the cdev->hclk,
    as same as cdev->cclk.
    
    Fixes: f524f829b75a ("can: m_can: Create a m_can platform framework")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Link: https://lore.kernel.org/all/20221123063651.26199-1-jiasheng@iscas.ac.cn
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea8dc27bb044e19868155e500ce397007be98656
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Nov 11 20:11:23 2022 +0800

    can: m_can: pci: add missing m_can_class_free_dev() in probe/remove methods
    
    [ Upstream commit 1eca1d4cc21b6d0fc5f9a390339804c0afce9439 ]
    
    In m_can_pci_remove() and error handling path of m_can_pci_probe(),
    m_can_class_free_dev() should be called to free resource allocated by
    m_can_class_allocate_dev(), otherwise there will be memleak.
    
    Fixes: cab7ffc0324f ("can: m_can: add PCI glue driver for Intel Elkhart Lake")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Link: https://lore.kernel.org/all/1668168684-6390-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1d2a8e02acc8541ec9fa6f6cef5d76a7d8a9fd3
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Mon Nov 14 16:14:44 2022 +0800

    can: etas_es58x: es58x_init_netdev(): free netdev when register_candev()
    
    [ Upstream commit 709cb2f9ed2006eb1dc4b36b99d601cd24889ec4 ]
    
    In case of register_candev() fails, clear
    es58x_dev->netdev[channel_idx] and add free_candev(). Otherwise
    es58x_free_netdevs() will unregister the netdev that has never been
    registered.
    
    Fixes: 8537257874e9 ("can: etas_es58x: add core support for ETAS ES58X CAN USB interfaces")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Acked-by: Arunachalam Santhanam <Arunachalam.Santhanam@in.bosch.com>
    Acked-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Link: https://lore.kernel.org/all/1668413685-23354-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e53da04e37e4f021ee7948430c1e1fbd4da547d4
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Nov 11 20:09:16 2022 +0800

    can: cc770: cc770_isa_probe(): add missing free_cc770dev()
    
    [ Upstream commit 62ec89e74099a3d6995988ed9f2f996b368417ec ]
    
    Add the missing free_cc770dev() before return from cc770_isa_probe()
    in the register_cc770dev() error handling case.
    
    In addition, remove blanks before goto labels.
    
    Fixes: 7e02e5433e00 ("can: cc770: legacy CC770 ISA bus driver")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/all/1668168557-6024-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d452a71995cb2a2a416c51f947a4717b3bc46f9e
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Nov 11 20:08:41 2022 +0800

    can: sja1000_isa: sja1000_isa_probe(): add missing free_sja1000dev()
    
    [ Upstream commit 92dfd9310a71d28cefe6a2d5174d43fab240e631 ]
    
    Add the missing free_sja1000dev() before return from
    sja1000_isa_probe() in the register_sja1000dev() error handling case.
    
    In addition, remove blanks before goto labels.
    
    Fixes: 2a6ba39ad6a2 ("can: sja1000: legacy SJA1000 ISA bus driver")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/all/1668168521-5540-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 372eb550faa0757349040fd43f59483cbfdb2c0b
Author: Roi Dayan <roid@nvidia.com>
Date:   Mon Nov 14 20:04:29 2022 +0200

    net/mlx5e: Fix use-after-free when reverting termination table
    
    [ Upstream commit 52c795af04441d76f565c4634f893e5b553df2ae ]
    
    When having multiple dests with termination tables and second one
    or afterwards fails the driver reverts usage of term tables but
    doesn't reset the assignment in attr->dests[num_vport_dests].termtbl
    which case a use-after-free when releasing the rule.
    Fix by resetting the assignment of termtbl to null.
    
    Fixes: 10caabdaad5a ("net/mlx5e: Use termination table for VLAN push actions")
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 839eeab03c831a52333f7e9737685742a2c0cc1d
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Mon Nov 21 19:22:04 2022 +0800

    net/mlx5: Fix uninitialized variable bug in outlen_write()
    
    [ Upstream commit 3f5769a074c13d8f08455e40586600419e02a880 ]
    
    If sscanf() return 0, outlen is uninitialized and used in kzalloc(),
    this is unexpected. We should return -EINVAL if the string is invalid.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34feea3bfb37e09b20b9891ad72a815ac7895bd8
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Nov 10 21:47:07 2022 +0800

    net/mlx5: DR, Fix uninitialized var warning
    
    [ Upstream commit 52f7cf70eb8fac6111786c59ae9dfc5cf2bee710 ]
    
    Smatch warns this:
    
    drivers/net/ethernet/mellanox/mlx5/core/steering/dr_table.c:81
     mlx5dr_table_set_miss_action() error: uninitialized symbol 'ret'.
    
    Initializing ret with -EOPNOTSUPP and fix missing action case.
    
    Fixes: 7838e1725394 ("net/mlx5: DR, Expose steering table functionality")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3485ef2aabeb4b1c6e16cbbf8e43e3e7c8172a5f
Author: Yevgeny Kliteynik <kliteyn@nvidia.com>
Date:   Tue Nov 16 17:57:57 2021 +0200

    net/mlx5: DR, Rename list field in matcher struct to list_node
    
    [ Upstream commit 08fac109f7bb5e12ae14def56b3ad57ce67cd9fe ]
    
    In dr_types structs, some list fields are list heads, and some
    are just list nodes that are stored on the other structs' lists.
    Rename the appropriate list field to reflect this distinction.
    
    Signed-off-by: Yevgeny Kliteynik <kliteyn@nvidia.com>
    Stable-dep-of: 52f7cf70eb8f ("net/mlx5: DR, Fix uninitialized var warning")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fc27d22cdb9b1fcd754599d216a8992fed280cd
Author: Wang Hai <wanghai38@huawei.com>
Date:   Wed Nov 16 01:24:07 2022 +0800

    e100: Fix possible use after free in e100_xmit_prepare
    
    [ Upstream commit 45605c75c52c7ae7bfe902214343aabcfe5ba0ff ]
    
    In e100_xmit_prepare(), if we can't map the skb, then return -ENOMEM, so
    e100_xmit_frame() will return NETDEV_TX_BUSY and the upper layer will
    resend the skb. But the skb is already freed, which will cause UAF bug
    when the upper layer resends the skb.
    
    Remove the harmful free.
    
    Fixes: 5e5d49422dfb ("e100: Release skb when DMA mapping is failed in e100_xmit_prepare")
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d9f5bd54b913018031c5b964fc1f9a31f5f6cb5
Author: Yuan Can <yuancan@huawei.com>
Date:   Mon Nov 14 08:26:40 2022 +0000

    iavf: Fix error handling in iavf_init_module()
    
    [ Upstream commit 227d8d2f7f2278b8468c5531b0cd0f2a905b4486 ]
    
    The iavf_init_module() won't destroy workqueue when pci_register_driver()
    failed. Call destroy_workqueue() when pci_register_driver() failed to
    prevent the resource leak.
    
    Similar to the handling of u132_hcd_init in commit f276e002793c
    ("usb: u132-hcd: fix resource leak")
    
    Fixes: 2803b16c10ea ("i40e/i40evf: Use private workqueue")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0b2b9050c1765dd606aaee35e15392d0f61ba2b
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Jan 10 10:46:56 2022 +0000

    iavf: remove redundant ret variable
    
    [ Upstream commit c3fec56e12678c3ad68084048a73818a7968d6b8 ]
    
    Return value directly instead of taking this in another redundant
    variable.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: CGEL ZTE <cgel.zte@gmail.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: 227d8d2f7f22 ("iavf: Fix error handling in iavf_init_module()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69501d82050800c9302445aa2ac8259f7432260b
Author: Yuan Can <yuancan@huawei.com>
Date:   Mon Nov 14 08:26:39 2022 +0000

    fm10k: Fix error handling in fm10k_init_module()
    
    [ Upstream commit 771a794c0a3c3e7f0d86cc34be4f9537e8c0a20c ]
    
    A problem about modprobe fm10k failed is triggered with the following log
    given:
    
     Intel(R) Ethernet Switch Host Interface Driver
     Copyright(c) 2013 - 2019 Intel Corporation.
     debugfs: Directory 'fm10k' with parent '/' already present!
    
    The reason is that fm10k_init_module() returns fm10k_register_pci_driver()
    directly without checking its return value, if fm10k_register_pci_driver()
    failed, it returns without removing debugfs and destroy workqueue,
    resulting the debugfs of fm10k can never be created later and leaks the
    workqueue.
    
     fm10k_init_module()
       alloc_workqueue()
       fm10k_dbg_init() # create debugfs
       fm10k_register_pci_driver()
         pci_register_driver()
           driver_register()
             bus_add_driver()
               priv = kzalloc(...) # OOM happened
       # return without remove debugfs and destroy workqueue
    
    Fix by remove debugfs and destroy workqueue when
    fm10k_register_pci_driver() returns error.
    
    Fixes: 7461fd913afe ("fm10k: Add support for debugfs")
    Fixes: b382bb1b3e2d ("fm10k: use separate workqueue for fm10k driver")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e3657dede365ef705c2cd5b84fdfe32f4c81df1
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Wed Nov 16 09:27:25 2022 +0800

    i40e: Fix error handling in i40e_init_module()
    
    [ Upstream commit 479dd06149425b9e00477f52200872587af76a48 ]
    
    i40e_init_module() won't free the debugfs directory created by
    i40e_dbg_init() when pci_register_driver() failed. Add fail path to
    call i40e_dbg_exit() to remove the debugfs entries to prevent the bug.
    
    i40e: Intel(R) Ethernet Connection XL710 Network Driver
    i40e: Copyright (c) 2013 - 2019 Intel Corporation.
    debugfs: Directory 'i40e' with parent '/' already present!
    
    Fixes: 41c445ff0f48 ("i40e: main driver core")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7109e941099244cc876a4b3cb7a3ec79f104374a
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Mon Nov 14 10:57:58 2022 +0800

    ixgbevf: Fix resource leak in ixgbevf_init_module()
    
    [ Upstream commit 8cfa238a48f34038464b99d0b4825238c2687181 ]
    
    ixgbevf_init_module() won't destroy the workqueue created by
    create_singlethread_workqueue() when pci_register_driver() failed. Add
    destroy_workqueue() in fail path to prevent the resource leak.
    
    Similar to the handling of u132_hcd_init in commit f276e002793c
    ("usb: u132-hcd: fix resource leak")
    
    Fixes: 40a13e2493c9 ("ixgbevf: Use a private workqueue to avoid certain possible hangs")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Reviewed-by: Saeed Mahameed <saeed@kernel.org>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 196ea810e21ce93c48887ae3c5842626c7216afe
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 21 10:32:09 2022 +0800

    of: property: decrement node refcount in of_fwnode_get_reference_args()
    
    [ Upstream commit 60d865bd5a9b15a3961eb1c08bd4155682a3c81e ]
    
    In of_fwnode_get_reference_args(), the refcount of of_args.np has
    been incremented in the case of successful return from
    of_parse_phandle_with_args() or of_parse_phandle_with_fixed_args().
    
    Decrement the refcount if of_args is not returned to the caller of
    of_fwnode_get_reference_args().
    
    Fixes: 3e3119d3088f ("device property: Introduce fwnode_property_get_reference_args")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Frank Rowand <frowand.list@gmail.com>
    Link: https://lore.kernel.org/r/20221121023209.3909759-1-yangyingliang@huawei.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36164db278a835fc3962688e381674d7e5645b64
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Fri Nov 18 06:38:38 2022 +0000

    nvmem: rmem: Fix return value check in rmem_read()
    
    [ Upstream commit 58e92c4a496b27156020a59a98c7f4a92c2b1533 ]
    
    In case of error, the function memremap() returns NULL pointer
    not ERR_PTR(). The IS_ERR() test in the return value check
    should be replaced with NULL test.
    
    Fixes: 5a3fa75a4d9c ("nvmem: Add driver to expose reserved memory as nvmem")
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Cc: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20221118063840.6357-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3761831674af03b17f0ba2ab0cbeb257427fb69
Author: Xu Kuohai <xukuohai@huawei.com>
Date:   Mon Nov 14 08:47:19 2022 -0500

    bpf: Do not copy spin lock field from user in bpf_selem_alloc
    
    [ Upstream commit 836e49e103dfeeff670c934b7d563cbd982fce87 ]
    
    bpf_selem_alloc function is used by inode_storage, sk_storage and
    task_storage maps to set map value, for these map types, there may
    be a spin lock in the map value, so if we use memcpy to copy the whole
    map value from user, the spin lock field may be initialized incorrectly.
    
    Since the spin lock field is zeroed by kzalloc, call copy_map_value
    instead of memcpy to skip copying the spin lock field to fix it.
    
    Fixes: 6ac99e8f23d4 ("bpf: Introduce bpf sk local storage")
    Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
    Link: https://lore.kernel.org/r/20221114134720.1057939-2-xukuohai@huawei.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45f6e81863747c0d7bc6a95ec51129900e71467a
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Nov 17 11:44:23 2022 +0800

    hwmon: (ibmpex) Fix possible UAF when ibmpex_register_bmc() fails
    
    [ Upstream commit e2a87785aab0dac190ac89be6a9ba955e2c634f2 ]
    
    Smatch report warning as follows:
    
    drivers/hwmon/ibmpex.c:509 ibmpex_register_bmc() warn:
      '&data->list' not removed from list
    
    If ibmpex_find_sensors() fails in ibmpex_register_bmc(), data will
    be freed, but data->list will not be removed from driver_data.bmc_data,
    then list traversal may cause UAF.
    
    Fix by removeing it from driver_data.bmc_data before free().
    
    Fixes: 57c7c3a0fdea ("hwmon: IBM power meter driver")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221117034423.2935739-1-cuigaosheng1@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a90251376c3e5c5eaeff89072dccf26e96ad0679
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Nov 12 20:56:06 2022 +0800

    hwmon: (i5500_temp) fix missing pci_disable_device()
    
    [ Upstream commit 3b7f98f237528c496ea0b689bace0e35eec3e060 ]
    
    pci_disable_device() need be called while module exiting, switch to use
    pcim_enable(), pci_disable_device() will be called in pcim_release().
    
    Fixes: ada072816be1 ("hwmon: (i5500_temp) New driver for the Intel 5500/5520/X58 chipsets")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221112125606.3751430-1-yangyingliang@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eeb31b828daf77b841089ad2a713cff15cde8e0e
Author: Ninad Malwade <nmalwade@nvidia.com>
Date:   Tue Nov 8 12:45:08 2022 +0800

    hwmon: (ina3221) Fix shunt sum critical calculation
    
    [ Upstream commit b8d27d2ce8dfc207e4b67b929a86f2be76fbc6ef ]
    
    The shunt sum critical limit register value should be left shifted
    by one bit as its LSB-0 is a reserved bit.
    
    Fixes: 2057bdfb7184 ("hwmon: (ina3221) Add summation feature support")
    Signed-off-by: Ninad Malwade <nmalwade@nvidia.com>
    Reviewed-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/20221108044508.23463-1-nmalwade@nvidia.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9514b95cac516f479293974700041b27d28a21be
Author: Derek Nguyen <derek.nguyen@collins.com>
Date:   Thu Nov 10 13:21:08 2022 -0600

    hwmon: (ltc2947) fix temperature scaling
    
    [ Upstream commit 07e06193ead86d4812f431b4d87bbd4161222e3f ]
    
    The LTC2947 datasheet (Rev. B) calls out in the section "Register
    Description: Non-Accumulated Result Registers" (pg. 30) that "To
    calculate temperature, multiply the TEMP register value by 0.204°C
    and add 5.5°C". Fix to add 5.5C and not 0.55C.
    
    Fixes: 9f90fd652bed ("hwmon: Add support for ltc2947")
    Signed-off-by: Derek Nguyen <derek.nguyen@collins.com>
    Signed-off-by: Brandon Maier <brandon.maier@collins.com>
    Link: https://lore.kernel.org/r/20221110192108.20624-1-brandon.maier@collins.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0140e079a42064680394fff1199a7b5483688dec
Author: Hou Tao <houtao1@huawei.com>
Date:   Wed Nov 16 15:23:49 2022 +0800

    libbpf: Handle size overflow for ringbuf mmap
    
    [ Upstream commit 927cbb478adf917e0a142b94baa37f06279cc466 ]
    
    The maximum size of ringbuf is 2GB on x86-64 host, so 2 * max_entries
    will overflow u32 when mapping producer page and data pages. Only
    casting max_entries to size_t is not enough, because for 32-bits
    application on 64-bits kernel the size of read-only mmap region
    also could overflow size_t.
    
    So fixing it by casting the size of read-only mmap region into a __u64
    and checking whether or not there will be overflow during mmap.
    
    Fixes: bf99c936f947 ("libbpf: Add BPF ring buffer support")
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20221116072351.1168938-3-houtao@huaweicloud.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06d5790e7df56a506d76ee69e4145eb2054d91a8
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Mon Nov 14 19:59:22 2022 +0100

    ARM: at91: rm9200: fix usb device clock id
    
    [ Upstream commit 57976762428675f259339385d3324d28ee53ec02 ]
    
    Referring to the datasheet the index 2 is the MCKUDP. When enabled, it
    "Enables the automatic disable of the Master Clock of the USB Device
    Port when a suspend condition occurs". We fix the index to the real UDP
    id which "Enables the 48 MHz clock of the USB Device Port".
    
    Cc: nicolas.ferre@microchip.com
    Cc: ludovic.desroches@microchip.com
    Cc: alexandre.belloni@bootlin.com
    Cc: mturquette@baylibre.com
    Cc: sboyd@kernel.org
    Cc: claudiu.beznea@microchip.com
    Cc: linux-clk@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: kernel@pengutronix.de
    Fixes: 02ff48e4d7f7 ("clk: at91: add at91rm9200 pmc driver")
    Fixes: 0e0e528d8260 ("ARM: dts: at91: rm9200: switch to new clock bindings")
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20221114185923.1023249-2-m.grzeschik@pengutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d074f173fbd1e1b4ae8a0ef8ceace3a32d722d37
Author: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Date:   Tue Sep 27 13:22:11 2022 +0530

    scripts/faddr2line: Fix regression in name resolution on ppc64le
    
    [ Upstream commit 2d77de1581bb5b470486edaf17a7d70151131afd ]
    
    Commit 1d1a0e7c5100 ("scripts/faddr2line: Fix overlapping text section
    failures") can cause faddr2line to fail on ppc64le on some
    distributions, while it works fine on other distributions. The failure
    can be attributed to differences in the readelf output.
    
      $ ./scripts/faddr2line vmlinux find_busiest_group+0x00
      no match for find_busiest_group+0x00
    
    On ppc64le, readelf adds the localentry tag before the symbol name on
    some distributions, and adds the localentry tag after the symbol name on
    other distributions. This problem has been discussed previously:
    
      https://lore.kernel.org/bpf/20191211160133.GB4580@calabresa/
    
    This problem can be overcome by filtering out the localentry tags in the
    readelf output. Similar fixes are already present in the kernel by way
    of the following commits:
    
      1fd6cee127e2 ("libbpf: Fix VERSIONED_SYM_COUNT number parsing")
      aa915931ac3e ("libbpf: Fix readelf output parsing for Fedora")
    
    [jpoimboe: rework commit log]
    
    Fixes: 1d1a0e7c5100 ("scripts/faddr2line: Fix overlapping text section failures")
    Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Reviewed-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Link: https://lore.kernel.org/r/20220927075211.897152-1-srikar@linux.vnet.ibm.com
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee3d37d7961046ae54183e9956885193b65eade1
Author: Hou Tao <houtao1@huawei.com>
Date:   Mon Nov 14 17:57:33 2022 +0800

    bpf, perf: Use subprog name when reporting subprog ksymbol
    
    [ Upstream commit 47df8a2f78bc34ff170d147d05b121f84e252b85 ]
    
    Since commit bfea9a8574f3 ("bpf: Add name to struct bpf_ksym"), when
    reporting subprog ksymbol to perf, prog name instead of subprog name is
    used. The backtrace of bpf program with subprogs will be incorrect as
    shown below:
    
      ffffffffc02deace bpf_prog_e44a3057dcb151f8_overwrite+0x66
      ffffffffc02de9f7 bpf_prog_e44a3057dcb151f8_overwrite+0x9f
      ffffffffa71d8d4e trace_call_bpf+0xce
      ffffffffa71c2938 perf_call_bpf_enter.isra.0+0x48
    
    overwrite is the entry program and it invokes the overwrite_htab subprog
    through bpf_loop, but in above backtrace, overwrite program just jumps
    inside itself.
    
    Fixing it by using subprog name when reporting subprog ksymbol. After
    the fix, the output of perf script will be correct as shown below:
    
      ffffffffc031aad2 bpf_prog_37c0bec7d7c764a4_overwrite_htab+0x66
      ffffffffc031a9e7 bpf_prog_c7eb827ef4f23e71_overwrite+0x9f
      ffffffffa3dd8d4e trace_call_bpf+0xce
      ffffffffa3dc2938 perf_call_bpf_enter.isra.0+0x48
    
    Fixes: bfea9a8574f3 ("bpf: Add name to struct bpf_ksym")
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Link: https://lore.kernel.org/bpf/20221114095733.158588-1-houtao@huaweicloud.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec02fc0a41012dc180c862bab821070f3ae5c170
Author: Paul Gazzillo <paul@pgazz.com>
Date:   Thu Nov 10 16:47:29 2022 -0500

    iio: light: rpr0521: add missing Kconfig dependencies
    
    [ Upstream commit 6ac12303572ef9ace5603c2c07f5f1b00a33f580 ]
    
    Fix an implicit declaration of function error for rpr0521 under some configs
    
    When CONFIG_RPR0521 is enabled without CONFIG_IIO_TRIGGERED_BUFFER,
    the build results in "implicit declaration of function" errors, e.g.,
      drivers/iio/light/rpr0521.c:434:3: error: implicit declaration of function
               'iio_trigger_poll_chained' [-Werror=implicit-function-declaration]
        434 |   iio_trigger_poll_chained(data->drdy_trigger0);
            |   ^~~~~~~~~~~~~~~~~~~~~~~~
    
    This fix adds select dependencies to RPR0521's configuration declaration.
    
    Fixes: e12ffd241c00 ("iio: light: rpr0521 triggered buffer")
    Signed-off-by: Paul Gazzillo <paul@pgazz.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216678
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221110214729.ls5ixav5kxpeftk7@device
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7419fc42afc035f6b29ce713e17dcd2000c833f
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Nov 7 15:20:10 2022 +0000

    iio: health: afe4404: Fix oob read in afe4404_[read|write]_raw
    
    [ Upstream commit fc92d9e3de0b2d30a3ccc08048a5fad533e4672b ]
    
    KASAN report out-of-bounds read as follows:
    
    BUG: KASAN: global-out-of-bounds in afe4404_read_raw+0x2ce/0x380
    Read of size 4 at addr ffffffffc00e4658 by task cat/278
    
    Call Trace:
     afe4404_read_raw
     iio_read_channel_info
     dev_attr_show
    
    The buggy address belongs to the variable:
     afe4404_channel_leds+0x18/0xffffffffffffe9c0
    
    This issue can be reproduce by singe command:
    
     $ cat /sys/bus/i2c/devices/0-0058/iio\:device0/in_intensity6_raw
    
    The array size of afe4404_channel_leds and afe4404_channel_offdacs
    are less than channels, so access with chan->address cause OOB read
    in afe4404_[read|write]_raw. Fix it by moving access before use them.
    
    Fixes: b36e8257641a ("iio: health/afe440x: Use regmap fields")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Andrew Davis <afd@ti.com>
    Link: https://lore.kernel.org/r/20221107152010.95937-1-weiyongjun@huaweicloud.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7e76a77aabef8989cbc0a8417af1aa040620867
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Nov 7 15:19:46 2022 +0000

    iio: health: afe4403: Fix oob read in afe4403_read_raw
    
    [ Upstream commit 58143c1ed5882c138a3cd2251a336fc8755f23d9 ]
    
    KASAN report out-of-bounds read as follows:
    
    BUG: KASAN: global-out-of-bounds in afe4403_read_raw+0x42e/0x4c0
    Read of size 4 at addr ffffffffc02ac638 by task cat/279
    
    Call Trace:
     afe4403_read_raw
     iio_read_channel_info
     dev_attr_show
    
    The buggy address belongs to the variable:
     afe4403_channel_leds+0x18/0xffffffffffffe9e0
    
    This issue can be reproduced by singe command:
    
     $ cat /sys/bus/spi/devices/spi0.0/iio\:device0/in_intensity6_raw
    
    The array size of afe4403_channel_leds is less than channels, so access
    with chan->address cause OOB read in afe4403_read_raw. Fix it by moving
    access before use it.
    
    Fixes: b36e8257641a ("iio: health/afe440x: Use regmap fields")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Andrew Davis <afd@ti.com>
    Link: https://lore.kernel.org/r/20221107151946.89260-1-weiyongjun@huaweicloud.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebdca90efbb5f3ef0110ac83b1dd5b17fd77ab84
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Nov 21 12:34:14 2022 -0500

    drm/amdgpu: Partially revert "drm/amdgpu: update drm_display_info correctly when the edid is read"
    
    [ Upstream commit 602ad43c3cd8f15cbb25ce9bb494129edb2024ed ]
    
    This partially reverts 20543be93ca45968f344261c1a997177e51bd7e1.
    
    Calling drm_connector_update_edid_property() in
    amdgpu_connector_free_edid() causes a noticeable pause in
    the system every 10 seconds on polled outputs so revert this
    part of the change.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2257
    Cc: Claudio Suarez <cssk@net-c.es>
    Acked-by: Luben Tuikov <luben.tuikov@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c365d3c3e512e544b0aa79c853433c5ea8cfe91d
Author: Claudio Suarez <cssk@net-c.es>
Date:   Sun Oct 17 13:34:58 2021 +0200

    drm/amdgpu: update drm_display_info correctly when the edid is read
    
    [ Upstream commit 20543be93ca45968f344261c1a997177e51bd7e1 ]
    
    drm_display_info is updated by drm_get_edid() or
    drm_connector_update_edid_property(). In the amdgpu driver it is almost
    always updated when the edid is read in amdgpu_connector_get_edid(),
    but not always.  Change amdgpu_connector_get_edid() and
    amdgpu_connector_free_edid() to keep drm_display_info updated.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Claudio Suarez <cssk@net-c.es>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: 602ad43c3cd8 ("drm/amdgpu: Partially revert "drm/amdgpu: update drm_display_info correctly when the edid is read"")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df5346466e51083b7757de0389564649d3915f8a
Author: Lyude Paul <lyude@redhat.com>
Date:   Mon Nov 14 17:17:53 2022 -0500

    drm/display/dp_mst: Fix drm_dp_mst_add_affected_dsc_crtcs() return code
    
    [ Upstream commit 2f3a1273862cb82cca227630cc7f04ce0c94b6bb ]
    
    Looks like that we're accidentally dropping a pretty important return code
    here. For some reason, we just return -EINVAL if we fail to get the MST
    topology state. This is wrong: error codes are important and should never
    be squashed without being handled, which here seems to have the potential
    to cause a deadlock.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Wayne Lin <Wayne.Lin@amd.com>
    Fixes: 8ec046716ca8 ("drm/dp_mst: Add helper to trigger modeset on affected DSC MST CRTCs")
    Cc: <stable@vger.kernel.org> # v5.6+
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 044da1a371a0da579e805e89c96865f62d8f6f69
Author: ChenXiaoSong <chenxiaosong2@huawei.com>
Date:   Wed Nov 16 22:23:54 2022 +0800

    btrfs: qgroup: fix sleep from invalid context bug in btrfs_qgroup_inherit()
    
    [ Upstream commit f7e942b5bb35d8e3af54053d19a6bf04143a3955 ]
    
    Syzkaller reported BUG as follows:
    
      BUG: sleeping function called from invalid context at
           include/linux/sched/mm.h:274
      Call Trace:
       <TASK>
       dump_stack_lvl+0xcd/0x134
       __might_resched.cold+0x222/0x26b
       kmem_cache_alloc+0x2e7/0x3c0
       update_qgroup_limit_item+0xe1/0x390
       btrfs_qgroup_inherit+0x147b/0x1ee0
       create_subvol+0x4eb/0x1710
       btrfs_mksubvol+0xfe5/0x13f0
       __btrfs_ioctl_snap_create+0x2b0/0x430
       btrfs_ioctl_snap_create_v2+0x25a/0x520
       btrfs_ioctl+0x2a1c/0x5ce0
       __x64_sys_ioctl+0x193/0x200
       do_syscall_64+0x35/0x80
    
    Fix this by calling qgroup_dirty() on @dstqgroup, and update limit item in
    btrfs_run_qgroups() later outside of the spinlock context.
    
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: ChenXiaoSong <chenxiaosong2@huawei.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da86809ab822f5aef6764e146ae667898dc02469
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Thu Jan 13 17:16:18 2022 +0200

    btrfs: move QUOTA_ENABLED check to rescan_should_stop from btrfs_qgroup_rescan_worker
    
    [ Upstream commit db5df254120004471e1c957957ab2f1e612dcbd6 ]
    
    Instead of having 2 places that short circuit the qgroup leaf scan have
    everything in the qgroup_rescan_leaf function. In addition to that, also
    ensure that the inconsistent qgroup flag is set when rescan_should_stop
    returns true. This both retains the old behavior when -EINTR was set in
    the body of the loop and at the same time also extends this behavior
    when scanning is interrupted due to remount or unmount operations.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Stable-dep-of: f7e942b5bb35 ("btrfs: qgroup: fix sleep from invalid context bug in btrfs_qgroup_inherit()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d66eadc1cc312aa443549906f476a49ae73c706
Author: Frieder Schrempf <frieder.schrempf@kontron.de>
Date:   Tue Nov 15 19:10:00 2022 +0100

    spi: spi-imx: Fix spi_bus_clk if requested clock is higher than input clock
    
    [ Upstream commit db2d2dc9a0b58c6faefb6b002fdbed4f0362d1a4 ]
    
    In case the requested bus clock is higher than the input clock, the correct
    dividers (pre = 0, post = 0) are returned from mx51_ecspi_clkdiv(), but
    *fres is left uninitialized and therefore contains an arbitrary value.
    
    This causes trouble for the recently introduced PIO polling feature as the
    value in spi_imx->spi_bus_clk is used there to calculate for which
    transfers to enable PIO polling.
    
    Fix this by setting *fres even if no clock dividers are in use.
    
    This issue was observed on Kontron BL i.MX8MM with an SPI peripheral clock set
    to 50 MHz by default and a requested SPI bus clock of 80 MHz for the SPI NOR
    flash.
    
    With the fix applied the debug message from mx51_ecspi_clkdiv() now prints the
    following:
    
    spi_imx 30820000.spi: mx51_ecspi_clkdiv: fin: 50000000, fspi: 50000000,
    post: 0, pre: 0
    
    Fixes: 6fd8b8503a0d ("spi: spi-imx: Fix out-of-order CS/SCLK operation at low speeds")
    Fixes: 07e759387788 ("spi: spi-imx: add PIO polling support")
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: David Jander <david@protonic.nl>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Frieder Schrempf <frieder.schrempf@kontron.de>
    Tested-by: Fabio Estevam <festevam@gmail.com>
    Acked-by: Marek Vasut <marex@denx.de>
    Link: https://lore.kernel.org/r/20221115181002.2068270-1-frieder@fris.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b4544a13179ed2bdc125b383984b4dacc638e04
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Nov 10 11:36:28 2022 +0530

    btrfs: free btrfs_path before copying inodes to userspace
    
    [ Upstream commit 418ffb9e3cf6c4e2574d3a732b724916684bd133 ]
    
    btrfs_ioctl_logical_to_ino() frees the search path after the userspace
    copy from the temp buffer @inodes. Which potentially can lead to a lock
    splat.
    
    Fix this by freeing the path before we copy @inodes to userspace.
    
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7ae3becee72904af2eb151a905600731b289440
Author: David Sterba <dsterba@suse.com>
Date:   Mon Jun 6 19:32:59 2022 +0200

    btrfs: sink iterator parameter to btrfs_ioctl_logical_to_ino
    
    [ Upstream commit e3059ec06b9f1a96826cc2bb6ed131aac0942446 ]
    
    There's only one function we pass to iterate_inodes_from_logical as
    iterator, so we can drop the indirection and call it directly, after
    moving the function to backref.c
    
    Signed-off-by: David Sterba <dsterba@suse.com>
    Stable-dep-of: 418ffb9e3cf6 ("btrfs: free btrfs_path before copying inodes to userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acc2f40b980c61a9178b72cdedd150b829064997
Author: Gao Xiang <xiang@kernel.org>
Date:   Fri Sep 9 10:39:48 2022 +0800

    erofs: fix order >= MAX_ORDER warning due to crafted negative i_size
    
    [ Upstream commit 1dd73601a1cba37a0ed5f89a8662c90191df5873 ]
    
    As syzbot reported [1], the root cause is that i_size field is a
    signed type, and negative i_size is also less than EROFS_BLKSIZ.
    As a consequence, it's handled as fast symlink unexpectedly.
    
    Let's fall back to the generic path to deal with such unusual i_size.
    
    [1] https://lore.kernel.org/r/000000000000ac8efa05e7feaa1f@google.com
    
    Reported-by: syzbot+f966c13b1b4fc0403b19@syzkaller.appspotmail.com
    Fixes: 431339ba9042 ("staging: erofs: add inode operations")
    Reviewed-by: Yue Hu <huyue2@coolpad.com>
    Link: https://lore.kernel.org/r/20220909023948.28925-1-hsiangkao@linux.alibaba.com
    Signed-off-by: Gao Xiang <hsiangkao@linux.alibaba.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca9f27448af0ba9e25a6d963b9722e2c0420647d
Author: Chris Wilson <chris.p.wilson@intel.com>
Date:   Mon Sep 26 16:33:33 2022 +0100

    drm/i915/gt: Use i915_vm_put on ppgtt_create error paths
    
    [ Upstream commit 20e377e7b2e7c327039f10db80ba5bcc1f6c882d ]
    
    Now that the scratch page and page directories have a reference back to
    the i915_address_space, we cannot do an immediate free of the ppgtt upon
    error as those buffer objects will perform a later i915_vm_put in their
    deferred frees.
    
    The downside is that by replacing the onion unwind along the error
    paths, the ppgtt cleanup must handle a partially constructed vm. This
    includes ensuring that the vm->cleanup is set prior to the error path.
    
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/6900
    Signed-off-by: Chris Wilson <chris.p.wilson@intel.com>
    Fixes: 4d8151ae5329 ("drm/i915: Don't free shared locks while shared")
    Cc: Thomas Hellström <thomas.hellstrom@linux.intel.com>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Cc: <stable@vger.kernel.org> # v5.14+
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220926153333.102195-1-matthew.auld@intel.com
    (cherry picked from commit c286558f58535cf97b717b946d6c96d774a09d17)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2f2972889ebd4ff7fa3b446e25b7a32d3a6432c
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed Nov 17 14:20:20 2021 +0000

    drm/i915: Create a dummy object for gen6 ppgtt
    
    [ Upstream commit b0b0f2d225da6fe58417fae37e3f797e2db27b62 ]
    
    We currently have to special case vma->obj being NULL because
    of gen6 ppgtt and mock_engine. Fix gen6 ppgtt, so we may soon
    be able to remove a few checks. As the object only exists as
    a fake object pointing to ggtt, we have no backing storage,
    so no real object is created. It just has to look real enough.
    
    Also kill pin_mutex, it's not compatible with ww locking,
    and we can use the vm lock instead.
    
    v2:
      - Drop IS_SHRINKABLE and shorten overly long line
    v3:
      - Checkpatch fix for alignment
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211117142024.1043017-2-matthew.auld@intel.com
    Stable-dep-of: 20e377e7b2e7 ("drm/i915/gt: Use i915_vm_put on ppgtt_create error paths")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 918002bdbe4328c8c0164a22e8ebf2384b80dc23
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Thu Oct 6 17:33:54 2022 +0100

    arm64: mte: Avoid setting PG_mte_tagged if no tags cleared or restored
    
    [ Upstream commit a8e5e5146ad08d794c58252bab00b261045ef16d ]
    
    Prior to commit 69e3b846d8a7 ("arm64: mte: Sync tags for pages where PTE
    is untagged"), mte_sync_tags() was only called for pte_tagged() entries
    (those mapped with PROT_MTE). Therefore mte_sync_tags() could safely use
    test_and_set_bit(PG_mte_tagged, &page->flags) without inadvertently
    setting PG_mte_tagged on an untagged page.
    
    The above commit was required as guests may enable MTE without any
    control at the stage 2 mapping, nor a PROT_MTE mapping in the VMM.
    However, the side-effect was that any page with a PTE that looked like
    swap (or migration) was getting PG_mte_tagged set automatically. A
    subsequent page copy (e.g. migration) copied the tags to the destination
    page even if the tags were owned by KASAN.
    
    This issue was masked by the page_kasan_tag_reset() call introduced in
    commit e5b8d9218951 ("arm64: mte: reset the page tag in page->flags").
    When this commit was reverted (20794545c146), KASAN started reporting
    access faults because the overriding tags in a page did not match the
    original page->flags (with CONFIG_KASAN_HW_TAGS=y):
    
      BUG: KASAN: invalid-access in copy_page+0x10/0xd0 arch/arm64/lib/copy_page.S:26
      Read at addr f5ff000017f2e000 by task syz-executor.1/2218
      Pointer tag: [f5], memory tag: [f2]
    
    Move the PG_mte_tagged bit setting from mte_sync_tags() to the actual
    place where tags are cleared (mte_sync_page_tags()) or restored
    (mte_restore_tags()).
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Reported-by: syzbot+c2c79c6d6eddc5262b77@syzkaller.appspotmail.com
    Fixes: 69e3b846d8a7 ("arm64: mte: Sync tags for pages where PTE is untagged")
    Cc: <stable@vger.kernel.org> # 5.14.x
    Cc: Steven Price <steven.price@arm.com>
    Cc: Andrey Konovalov <andreyknvl@gmail.com>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/0000000000004387dc05e5888ae5@google.com/
    Reviewed-by: Steven Price <steven.price@arm.com>
    Link: https://lore.kernel.org/r/20221006163354.3194102-1-catalin.marinas@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

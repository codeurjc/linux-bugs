commit 4a61839152cc3e9e00ac059d73a28d148d622b30
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 2 09:35:33 2023 +0100

    Linux 6.1.61
    
    Link: https://lore.kernel.org/r/20231031165918.608547597@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Ricardo B. Marliere <ricardo@marliere.net>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5926b0886d0cb94a90a42712b2608d1c25ff6e84
Author: John Sperbeck <jsperbeck@google.com>
Date:   Sat Oct 28 18:41:31 2023 +0000

    objtool/x86: add missing embedded_insn check
    
    When dbf460087755 ("objtool/x86: Fixup frame-pointer vs rethunk")
    was backported to some stable branches, the check for dest->embedded_insn
    in is_special_call() was missed.  The result is that the warning it
    was intended to suppress still appears.  For example on 6.1 (on kernels
    before 6.1, the '-s' argument would instead be 'check'):
    
    $ tools/objtool/objtool -s arch/x86/lib/retpoline.o
    arch/x86/lib/retpoline.o: warning: objtool: srso_untrain_ret+0xd:
        call without frame pointer save/setup
    
    With this patch, the warning is correctly suppressed, and the
    kernel still passes the normal Google kernel developer tests.
    
    Signed-off-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2afa9f7eb15c6936e8795fd450d7ba5a4b799bdc
Author: Baokun Li <libaokun1@huawei.com>
Date:   Sat Oct 28 14:47:49 2023 +0800

    ext4: avoid overlapping preallocations due to overflow
    
    commit bedc5d34632c21b5adb8ca7143d4c1f794507e4c upstream.
    
    Let's say we want to allocate 2 blocks starting from 4294966386, after
    predicting the file size, start is aligned to 4294965248, len is changed
    to 2048, then end = start + size = 0x100000000. Since end is of
    type ext4_lblk_t, i.e. uint, end is truncated to 0.
    
    This causes (pa->pa_lstart >= end) to always hold when checking if the
    current extent to be allocated crosses already preallocated blocks, so the
    resulting ac_g_ex may cross already preallocated blocks. Hence we convert
    the end type to loff_t and use pa_logical_end() to avoid overflow.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20230724121059.11834-4-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcefddf3a151b2c416b20120c06bb1ba9ad676fb
Author: Baokun Li <libaokun1@huawei.com>
Date:   Sat Oct 28 14:47:48 2023 +0800

    ext4: fix BUG in ext4_mb_new_inode_pa() due to overflow
    
    commit bc056e7163ac7db945366de219745cf94f32a3e6 upstream.
    
    When we calculate the end position of ext4_free_extent, this position may
    be exactly where ext4_lblk_t (i.e. uint) overflows. For example, if
    ac_g_ex.fe_logical is 4294965248 and ac_orig_goal_len is 2048, then the
    computed end is 0x100000000, which is 0. If ac->ac_o_ex.fe_logical is not
    the first case of adjusting the best extent, that is, new_bex_end > 0, the
    following BUG_ON will be triggered:
    
    =========================================================
    kernel BUG at fs/ext4/mballoc.c:5116!
    invalid opcode: 0000 [#1] PREEMPT SMP PTI
    CPU: 3 PID: 673 Comm: xfs_io Tainted: G E 6.5.0-rc1+ #279
    RIP: 0010:ext4_mb_new_inode_pa+0xc5/0x430
    Call Trace:
     <TASK>
     ext4_mb_use_best_found+0x203/0x2f0
     ext4_mb_try_best_found+0x163/0x240
     ext4_mb_regular_allocator+0x158/0x1550
     ext4_mb_new_blocks+0x86a/0xe10
     ext4_ext_map_blocks+0xb0c/0x13a0
     ext4_map_blocks+0x2cd/0x8f0
     ext4_iomap_begin+0x27b/0x400
     iomap_iter+0x222/0x3d0
     __iomap_dio_rw+0x243/0xcb0
     iomap_dio_rw+0x16/0x80
    =========================================================
    
    A simple reproducer demonstrating the problem:
    
            mkfs.ext4 -F /dev/sda -b 4096 100M
            mount /dev/sda /tmp/test
            fallocate -l1M /tmp/test/tmp
            fallocate -l10M /tmp/test/file
            fallocate -i -o 1M -l16777203M /tmp/test/file
            fsstress -d /tmp/test -l 0 -n 100000 -p 8 &
            sleep 10 && killall -9 fsstress
            rm -f /tmp/test/tmp
            xfs_io -c "open -ad /tmp/test/file" -c "pwrite -S 0xff 0 8192"
    
    We simply refactor the logic for adjusting the best extent by adding
    a temporary ext4_free_extent ex and use extent_logical_end() to avoid
    overflow, which also simplifies the code.
    
    Cc: stable@kernel.org # 6.4
    Fixes: 93cdf49f6eca ("ext4: Fix best extent lstart adjustment logic in ext4_mb_new_inode_pa()")
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20230724121059.11834-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 495c4c58d684eb91bda6ce023019d1b1711ff07b
Author: Baokun Li <libaokun1@huawei.com>
Date:   Sat Oct 28 14:47:47 2023 +0800

    ext4: add two helper functions extent_logical_end() and pa_logical_end()
    
    commit 43bbddc067883d94de7a43d5756a295439fbe37d upstream.
    
    When we use lstart + len to calculate the end of free extent or prealloc
    space, it may exceed the maximum value of 4294967295(0xffffffff) supported
    by ext4_lblk_t and cause overflow, which may lead to various problems.
    
    Therefore, we add two helper functions, extent_logical_end() and
    pa_logical_end(), to limit the type of end to loff_t, and also convert
    lstart to loff_t for calculation to avoid overflow.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20230724121059.11834-2-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d022e4ea9c2f22a1ce425ae2af02a99cc4dc8587
Author: David Lazar <dlazar@gmail.com>
Date:   Wed Oct 25 21:30:16 2023 +0200

    platform/x86: Add s2idle quirk for more Lenovo laptops
    
    commit 3bde7ec13c971445faade32172cb0b4370b841d9 upstream.
    
    When suspending to idle and resuming on some Lenovo laptops using the
    Mendocino APU, multiple NVME IOMMU page faults occur, showing up in
    dmesg as repeated errors:
    
    nvme 0000:01:00.0: AMD-Vi: Event logged [IO_PAGE_FAULT domain=0x000b
    address=0xb6674000 flags=0x0000]
    
    The system is unstable afterwards.
    
    Applying the s2idle quirk introduced by commit 455cd867b85b ("platform/x86:
    thinkpad_acpi: Add a s2idle resume quirk for a number of laptops")
    allows these systems to work with the IOMMU enabled and s2idle
    resume to work.
    
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218024
    Suggested-by: Mario Limonciello <mario.limonciello@amd.com>
    Suggested-by: Mark Pearson <mpearson-lenovo@squebb.ca>
    Signed-off-by: David Lazar <dlazar@gmail.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Mark Pearson <mpearson-lenovo@squebb.ca>
    Link: https://lore.kernel.org/r/ZTlsyOaFucF2pWrL@localhost
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48ebeab0eda10280264c3001a45ec76642952617
Author: Alessandro Carminati <alessandro.carminati@gmail.com>
Date:   Thu Sep 21 07:32:17 2023 +0000

    clk: Sanitize possible_parent_show to Handle Return Value of of_clk_get_parent_name
    
    commit ceb87a361d0b079ecbc7d2831618c19087f304a9 upstream.
    
    In the possible_parent_show function, ensure proper handling of the return
    value from of_clk_get_parent_name to prevent potential issues arising from
    a NULL return.
    The current implementation invokes seq_puts directly on the result of
    of_clk_get_parent_name without verifying the return value, which can lead
    to kernel panic if the function returns NULL.
    
    This patch addresses the concern by introducing a check on the return
    value of of_clk_get_parent_name. If the return value is not NULL, the
    function proceeds to call seq_puts, providing the returned value as
    argument.
    However, if of_clk_get_parent_name returns NULL, the function provides a
    static string as argument, avoiding the panic.
    
    Fixes: 1ccc0ddf046a ("clk: Use seq_puts() in possible_parent_show()")
    Reported-by: Philip Daly <pdaly@redhat.com>
    Signed-off-by: Alessandro Carminati (Red Hat) <alessandro.carminati@gmail.com>
    Link: https://lore.kernel.org/r/20230921073217.572151-1-alessandro.carminati@gmail.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65e5a9890e03cfe9379275d1aa561643cbd62629
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Oct 22 19:34:28 2023 -0400

    sparc32: fix a braino in fault handling in csum_and_copy_..._user()
    
    commit 1f36cd05e0081f2c75769a551d584c4ffb2a5660 upstream.
    
    Fault handler used to make non-trivial calls, so it needed
    to set a stack frame up.  Used to be
            save ... - grab a stack frame, old %o... become %i...
            ....
            ret     - go back to address originally in %o7, currently %i7
             restore - switch to previous stack frame, in delay slot
    Non-trivial calls had been gone since ab5e8b331244 and that code should
    have become
            retl    - go back to address in %o7
             clr %o0 - have return value set to 0
    What it had become instead was
            ret     - go back to address in %i7 - return address of *caller*
             clr %o0 - have return value set to 0
    which is not good, to put it mildly - we forcibly return 0 from
    csum_and_copy_{from,to}_iter() (which is what the call of that
    thing had been inlined into) and do that without dropping the
    stack frame of said csum_and_copy_..._iter().  Confuses the
    hell out of the caller of csum_and_copy_..._iter(), obviously...
    
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Fixes: ab5e8b331244 "sparc32: propagate the calling conventions change down to __csum_partial_copy_sparc_generic()"
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b8cde8ebb872a6b62aee81869ad235a5eb251d9
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Oct 24 11:42:21 2023 +0200

    perf/core: Fix potential NULL deref
    
    commit a71ef31485bb51b846e8db8b3a35e432cc15afb5 upstream.
    
    Smatch is awesome.
    
    Fixes: 32671e3799ca ("perf: Disallow mis-matched inherited group reads")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e232f2205f201dd38187adf62f5cb14b372284b
Author: Tony Luck <tony.luck@intel.com>
Date:   Wed Oct 25 13:25:13 2023 -0700

    x86/cpu: Add model number for Intel Arrow Lake mobile processor
    
    commit b99d70c0d1380f1368fd4a82271280c4fd28558b upstream.
    
    For "reasons" Intel has code-named this CPU with a "_H" suffix.
    
    [ dhansen: As usual, apply this and send it upstream quickly to
               make it easier for anyone who is doing work that
               consumes this. ]
    
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lore.kernel.org/all/20231025202513.12358-1-tony.luck%40intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63cc3d5d343d8d2667797179fc73c9d104c96247
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Oct 25 23:04:15 2023 +0200

    x86/i8259: Skip probing when ACPI/MADT advertises PCAT compatibility
    
    commit 128b0c9781c9f2651bea163cb85e52a6c7be0f9e upstream.
    
    David and a few others reported that on certain newer systems some legacy
    interrupts fail to work correctly.
    
    Debugging revealed that the BIOS of these systems leaves the legacy PIC in
    uninitialized state which makes the PIC detection fail and the kernel
    switches to a dummy implementation.
    
    Unfortunately this fallback causes quite some code to fail as it depends on
    checks for the number of legacy PIC interrupts or the availability of the
    real PIC.
    
    In theory there is no reason to use the PIC on any modern system when
    IO/APIC is available, but the dependencies on the related checks cannot be
    resolved trivially and on short notice. This needs lots of analysis and
    rework.
    
    The PIC detection has been added to avoid quirky checks and force selection
    of the dummy implementation all over the place, especially in VM guest
    scenarios. So it's not an option to revert the relevant commit as that
    would break a lot of other scenarios.
    
    One solution would be to try to initialize the PIC on detection fail and
    retry the detection, but that puts the burden on everything which does not
    have a PIC.
    
    Fortunately the ACPI/MADT table header has a flag field, which advertises
    in bit 0 that the system is PCAT compatible, which means it has a legacy
    8259 PIC.
    
    Evaluate that bit and if set avoid the detection routine and keep the real
    PIC installed, which then gets initialized (for nothing) and makes the rest
    of the code with all the dependencies work again.
    
    Fixes: e179f6914152 ("x86, irq, pic: Probe for legacy PIC and set legacy_pic appropriately")
    Reported-by: David Lazar <dlazar@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: David Lazar <dlazar@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Cc: stable@vger.kernel.org
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218003
    Link: https://lore.kernel.org/r/875y2u5s8g.ffs@tglx
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37495846b1efc23c1767b17ddd6645cc0ccb9946
Author: Peng Fan <peng.fan@nxp.com>
Date:   Fri Oct 13 13:49:03 2023 +0100

    nvmem: imx: correct nregs for i.MX6UL
    
    commit 7d6e10f5d254681983b53d979422c8de3fadbefb upstream.
    
    The nregs for i.MX6UL should be 144 per fuse map, correct it.
    
    Fixes: 4aa2b4802046 ("nvmem: octop: Add support for imx6ul")
    Cc: Stable@vger.kernel.org
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231013124904.175782-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 116671d25915b913374ccdb2956b5fdaff939dc9
Author: Peng Fan <peng.fan@nxp.com>
Date:   Fri Oct 13 13:49:02 2023 +0100

    nvmem: imx: correct nregs for i.MX6SLL
    
    commit 414a98abbefd82d591f4e2d1efd2917bcd3b6f6d upstream.
    
    The nregs for i.MX6SLL should be 80 per fuse map, correct it.
    
    Fixes: 6da27821a6f5 ("nvmem: imx-ocotp: add support for imx6sll")
    Cc: Stable@vger.kernel.org
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231013124904.175782-2-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b90b8633ef62314f3a5f5675106e6dcdec981b6f
Author: Peng Fan <peng.fan@nxp.com>
Date:   Fri Oct 13 13:49:04 2023 +0100

    nvmem: imx: correct nregs for i.MX6ULL
    
    commit 2382c1b044231fd49eaf9aa82bc7113fc55487b8 upstream.
    
    The nregs for i.MX6ULL should be 80 per fuse map, correct it.
    
    Fixes: ffbc34bf0e9c ("nvmem: imx-ocotp: Implement i.MX6ULL/ULZ support")
    Cc: Stable@vger.kernel.org
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231013124904.175782-4-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc87c73eac2df18e5c906f0eedab0814ca597d03
Author: Ekansh Gupta <quic_ekangupt@quicinc.com>
Date:   Fri Oct 13 13:20:07 2023 +0100

    misc: fastrpc: Unmap only if buffer is unmapped from DSP
    
    commit 509143385db364c67556a914bef6c9a42fd2c74c upstream.
    
    For unmapping any buffer from kernel, it should first be unmapped
    from DSP. In case unmap from DSP request fails, the map should not
    be removed from kernel as it might lead to SMMU faults and other
    memory issues.
    
    Fixes: 5c1b97c7d7b7 ("misc: fastrpc: add support for FASTRPC_IOCTL_MEM_MAP/UNMAP")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ekansh Gupta <quic_ekangupt@quicinc.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231013122007.174464-5-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38c5faf2a9840d6ac60d8b8f9f8a0a3939e97bfe
Author: Ekansh Gupta <quic_ekangupt@quicinc.com>
Date:   Fri Oct 13 13:20:06 2023 +0100

    misc: fastrpc: Clean buffers on remote invocation failures
    
    commit 1c8093591d1e372d700fe65423e7315a8ecf721b upstream.
    
    With current design, buffers and dma handles are not freed in case
    of remote invocation failures returned from DSP. This could result
    in buffer leakings and dma handle pointing to wrong memory in the
    fastrpc kernel. Adding changes to clean buffers and dma handles
    even when remote invocation to DSP returns failures.
    
    Fixes: c68cfb718c8f ("misc: fastrpc: Add support for context Invoke method")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ekansh Gupta <quic_ekangupt@quicinc.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231013122007.174464-4-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7737e9384e2d98db71022be00441e0d2aa4844e4
Author: Ekansh Gupta <quic_ekangupt@quicinc.com>
Date:   Fri Oct 13 13:20:05 2023 +0100

    misc: fastrpc: Free DMA handles for RPC calls with no arguments
    
    commit 206484303892a2a36c0c3414030ddfef658a4e70 upstream.
    
    The FDs for DMA handles to be freed is updated in fdlist by DSP over
    a remote call. This holds true even for remote calls with no
    arguments. To handle this, get_args and put_args are needed to
    be called for remote calls with no arguments also as fdlist
    is allocated in get_args and FDs updated in fdlist is freed
    in put_args.
    
    Fixes: 8f6c1d8c4f0c ("misc: fastrpc: Add fdlist implementation")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ekansh Gupta <quic_ekangupt@quicinc.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231013122007.174464-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e8851b51300dc6ce33a6493b21d23927e059cc5
Author: Ekansh Gupta <quic_ekangupt@quicinc.com>
Date:   Fri Oct 13 13:20:04 2023 +0100

    misc: fastrpc: Reset metadata buffer to avoid incorrect free
    
    commit 1c29d80134ac116e0196c7bad58a2121381b679c upstream.
    
    Metadata buffer is allocated during get_args for any remote call.
    This buffer carries buffers, fdlists and other payload information
    for the call. If the buffer is not reset, put_args might find some
    garbage FDs in the fdlist which might have an existing mapping in
    the list. This could result in improper freeing of FD map when DSP
    might still be using the buffer. Added change to reset the metadata
    buffer after allocation.
    
    Fixes: 8f6c1d8c4f0c ("misc: fastrpc: Add fdlist implementation")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ekansh Gupta <quic_ekangupt@quicinc.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231013122007.174464-2-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a35fc1c009188bde247898d0c8ea9feb50a4b02
Author: Yujie Liu <yujie.liu@intel.com>
Date:   Fri Oct 27 12:13:14 2023 +0800

    tracing/kprobes: Fix the description of variable length arguments
    
    commit e0f831836cead677fb07d54bd6bf499df35640c2 upstream.
    
    Fix the following kernel-doc warnings:
    
    kernel/trace/trace_kprobe.c:1029: warning: Excess function parameter 'args' description in '__kprobe_event_gen_cmd_start'
    kernel/trace/trace_kprobe.c:1097: warning: Excess function parameter 'args' description in '__kprobe_event_add_fields'
    
    Refer to the usage of variable length arguments elsewhere in the kernel
    code, "@..." is the proper way to express it in the description.
    
    Link: https://lore.kernel.org/all/20231027041315.2613166-1-yujie.liu@intel.com/
    
    Fixes: 2a588dd1d5d6 ("tracing: Add kprobe event command generation functions")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202310190437.paI6LYJF-lkp@intel.com/
    Signed-off-by: Yujie Liu <yujie.liu@intel.com>
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91b95e3b4ac8ae55ce0bea8f52131b755b918a12
Author: Jian Zhang <zhangjian.3032@bytedance.com>
Date:   Fri Oct 6 10:22:33 2023 +0800

    i2c: aspeed: Fix i2c bus hang in slave read
    
    commit 54f1840ddee9bbdc8dd89fbbfdfa632401244146 upstream.
    
    When the `CONFIG_I2C_SLAVE` option is enabled and the device operates
    as a slave, a situation arises where the master sends a START signal
    without the accompanying STOP signal. This action results in a
    persistent I2C bus timeout. The core issue stems from the fact that
    the i2c controller remains in a slave read state without a timeout
    mechanism. As a consequence, the bus perpetually experiences timeouts.
    
    In this case, the i2c bus will be reset, but the slave_state reset is
    missing.
    
    Fixes: fee465150b45 ("i2c: aspeed: Reset the i2c controller when timeout occurs")
    Signed-off-by: Jian Zhang <zhangjian.3032@bytedance.com>
    Acked-by: Andi Shyti <andi.shyti@kernel.org>
    Tested-by: Andrew Jeffery <andrew@codeconstruct.com.au>
    Reviewed-by: Andrew Jeffery <andrew@codeconstruct.com.au>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11602cadc9b40e9cceab517640c6c0db3d24252e
Author: Alain Volmat <alain.volmat@foss.st.com>
Date:   Tue Oct 10 10:44:54 2023 +0200

    i2c: stm32f7: Fix PEC handling in case of SMBUS transfers
    
    commit c896ff2dd8f30a6b0a922c83a96f6d43f05f0e92 upstream.
    
    In case of SMBUS byte read with PEC enabled, the whole transfer
    is split into two commands.  A first write command, followed by
    a read command.  The write command does not have any PEC byte
    and a PEC byte is appended at the end of the read command.
    (cf Read byte protocol with PEC in SMBUS specification)
    
    Within the STM32 I2C controller, handling (either sending
    or receiving) of the PEC byte is done via the PECBYTE bit in
    register CR2.
    
    Currently, the PECBYTE is set at the beginning of a transfer,
    which lead to sending a PEC byte at the end of the write command
    (hence losing the real last byte), and also does not check the
    PEC byte received during the read command.
    
    This patch corrects the function stm32f7_i2c_smbus_xfer_msg
    in order to only set the PECBYTE during the read command.
    
    Fixes: 9e48155f6bfe ("i2c: i2c-stm32f7: Add initial SMBus protocols support")
    Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
    Reviewed-by: Pierre-Yves MORDRET <pierre-yves.mordret@foss.st.com>
    Acked-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff0312a156cf398a60628143831591d6da942941
Author: Herve Codina <herve.codina@bootlin.com>
Date:   Fri Oct 20 17:30:12 2023 +0200

    i2c: muxes: i2c-demux-pinctrl: Use of_get_i2c_adapter_by_node()
    
    commit 0fb118de5003028ad092a4e66fc6d07b86c3bc94 upstream.
    
    i2c-demux-pinctrl uses the pair of_find_i2c_adapter_by_node() /
    i2c_put_adapter(). These pair alone is not correct to properly lock the
    I2C parent adapter.
    
    Indeed, i2c_put_adapter() decrements the module refcount while
    of_find_i2c_adapter_by_node() does not increment it. This leads to an
    underflow of the parent module refcount.
    
    Use the dedicated function, of_get_i2c_adapter_by_node(), to handle
    correctly the module refcount.
    
    Fixes: 50a5ba876908 ("i2c: mux: demux-pinctrl: add driver")
    Signed-off-by: Herve Codina <herve.codina@bootlin.com>
    Cc: stable@vger.kernel.org
    Acked-by: Peter Rosin <peda@axentia.se>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9a7b3b33c84e354f8a96f607d64f46f3216dd14
Author: Herve Codina <herve.codina@bootlin.com>
Date:   Fri Oct 20 17:30:13 2023 +0200

    i2c: muxes: i2c-mux-gpmux: Use of_get_i2c_adapter_by_node()
    
    commit 3dc0ec46f6e7511fc4fdf6b6cda439382bc957f1 upstream.
    
    i2c-mux-gpmux uses the pair of_find_i2c_adapter_by_node() /
    i2c_put_adapter(). These pair alone is not correct to properly lock the
    I2C parent adapter.
    
    Indeed, i2c_put_adapter() decrements the module refcount while
    of_find_i2c_adapter_by_node() does not increment it. This leads to an
    underflow of the parent module refcount.
    
    Use the dedicated function, of_get_i2c_adapter_by_node(), to handle
    correctly the module refcount.
    
    Fixes: ac8498f0ce53 ("i2c: i2c-mux-gpmux: new driver")
    Signed-off-by: Herve Codina <herve.codina@bootlin.com>
    Cc: stable@vger.kernel.org
    Acked-by: Peter Rosin <peda@axentia.se>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48a365ae4f317a0632a059b3bf5cce1d0b529111
Author: Herve Codina <herve.codina@bootlin.com>
Date:   Fri Oct 20 17:30:11 2023 +0200

    i2c: muxes: i2c-mux-pinctrl: Use of_get_i2c_adapter_by_node()
    
    commit 3171d37b58a76e1febbf3f4af2d06234a98cf88b upstream.
    
    i2c-mux-pinctrl uses the pair of_find_i2c_adapter_by_node() /
    i2c_put_adapter(). These pair alone is not correct to properly lock the
    I2C parent adapter.
    
    Indeed, i2c_put_adapter() decrements the module refcount while
    of_find_i2c_adapter_by_node() does not increment it. This leads to an
    underflow of the parent module refcount.
    
    Use the dedicated function, of_get_i2c_adapter_by_node(), to handle
    correctly the module refcount.
    
    Fixes: c4aee3e1b0de ("i2c: mux: pinctrl: remove platform_data")
    Signed-off-by: Herve Codina <herve.codina@bootlin.com>
    Cc: stable@vger.kernel.org
    Acked-by: Peter Rosin <peda@axentia.se>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ec84059b5e118c9fd8dc79913e8036f98530fe3
Author: Robert Hancock <robert.hancock@calian.com>
Date:   Thu Sep 14 18:10:19 2023 -0600

    iio: adc: xilinx-xadc: Correct temperature offset/scale for UltraScale
    
    commit e2bd8c28b9bd835077eb65715d416d667694a80d upstream.
    
    The driver was previously using offset and scale values for the
    temperature sensor readings which were only valid for 7-series devices.
    Add per-device-type values for offset and scale and set them appropriately
    for each device type.
    
    Note that the values used for the UltraScale family are for UltraScale+
    (i.e. the SYSMONE4 primitive) using the internal reference, as that seems
    to be the most common configuration and the device tree values Xilinx's
    device tree generator produces don't seem to give us anything to tell us
    which configuration is used. However, the differences within the UltraScale
    family seem fairly minor and it's closer than using the 7-series values
    instead in any case.
    
    Fixes: c2b7720a7905 ("iio: xilinx-xadc: Add basic support for Ultrascale System Monitor")
    Signed-off-by: Robert Hancock <robert.hancock@calian.com>
    Acked-by: O'Griofa, Conall <conall.ogriofa@amd.com>
    Tested-by: O'Griofa, Conall <conall.ogriofa@amd.com>
    Link: https://lore.kernel.org/r/20230915001019.2862964-3-robert.hancock@calian.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e26fd381bf1109c4aca704183439b4eca770b91d
Author: Robert Hancock <robert.hancock@calian.com>
Date:   Thu Sep 14 18:10:18 2023 -0600

    iio: adc: xilinx-xadc: Don't clobber preset voltage/temperature thresholds
    
    commit 8d6b3ea4d9eaca80982442b68a292ce50ce0a135 upstream.
    
    In the probe function, the driver was reading out the thresholds already
    set in the core, which can be configured by the user in the Vivado tools
    when the FPGA image is built. However, it later clobbered those values
    with zero or maximum values. In particular, the overtemperature shutdown
    threshold register was overwritten with the max value, which effectively
    prevents the FPGA from shutting down when the desired threshold was
    eached, potentially risking hardware damage in that case.
    
    Remove this code to leave the preconfigured default threshold values
    intact.
    
    The code was also disabling all alarms regardless of what enable state
    they were left in by the FPGA image, including the overtemperature
    shutdown feature. Leave these bits in their original state so they are
    not unconditionally disabled.
    
    Fixes: bdc8cda1d010 ("iio:adc: Add Xilinx XADC driver")
    Signed-off-by: Robert Hancock <robert.hancock@calian.com>
    Acked-by: O'Griofa, Conall <conall.ogriofa@amd.com>
    Tested-by: O'Griofa, Conall <conall.ogriofa@amd.com>
    Link: https://lore.kernel.org/r/20230915001019.2862964-2-robert.hancock@calian.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb01837e0f7a4945b471812c7ec59a274836e135
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Oct 9 12:14:12 2023 +0200

    iio: exynos-adc: request second interupt only when touchscreen mode is used
    
    commit 865b080e3229102f160889328ce2e8e97aa65ea0 upstream.
    
    Second interrupt is needed only when touchscreen mode is used, so don't
    request it unconditionally. This removes the following annoying warning
    during boot:
    
    exynos-adc 14d10000.adc: error -ENXIO: IRQ index 1 not found
    
    Fixes: 2bb8ad9b44c5 ("iio: exynos-adc: add experimental touchscreen support")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20231009101412.916922-1-m.szyprowski@samsung.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a641bc52f00a5f2a5c1bb3e65cd8c5447ac49c1
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Sep 2 21:46:20 2023 +0200

    iio: afe: rescale: Accept only offset channels
    
    commit bee448390e5166d019e9e037194d487ee94399d9 upstream.
    
    As noted by Jonathan Cameron: it is perfectly legal for a channel
    to have an offset but no scale in addition to the raw interface.
    The conversion will imply that scale is 1:1.
    
    Make rescale_configure_channel() accept just scale, or just offset
    to process a channel.
    
    When a user asks for IIO_CHAN_INFO_OFFSET in rescale_read_raw()
    we now have to deal with the fact that OFFSET could be present
    but SCALE missing. Add code to simply scale 1:1 in this case.
    
    Link: https://lore.kernel.org/linux-iio/CACRpkdZXBjHU4t-GVOCFxRO-AHGxKnxMeHD2s4Y4PuC29gBq6g@mail.gmail.com/
    Fixes: 53ebee949980 ("iio: afe: iio-rescale: Support processed channels")
    Fixes: 9decacd8b3a4 ("iio: afe: rescale: Fix boolean logic bug")
    Reported-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Peter Rosin <peda@axentia.se>
    Link: https://lore.kernel.org/r/20230902-iio-rescale-only-offset-v2-1-988b807754c8@linaro.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9236d2ea6465b37c0a73d994c1ad31753d31e5f5
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sat Oct 28 07:30:27 2023 -0600

    io_uring/fdinfo: lock SQ thread while retrieving thread cpu/pid
    
    commit 7644b1a1c9a7ae8ab99175989bfc8676055edb46 upstream.
    
    We could race with SQ thread exit, and if we do, we'll hit a NULL pointer
    dereference when the thread is cleared. Grab the SQPOLL data lock before
    attempting to get the task cpu and pid for fdinfo, this ensures we have a
    stable view of it.
    
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=218032
    Reviewed-by: Gabriel Krisman Bertazi <krisman@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1684909df3f4810afc8bae01a6e3842dfb5366f5
Author: Haibo Li <haibo.li@mediatek.com>
Date:   Mon Oct 9 15:37:48 2023 +0800

    kasan: print the original fault addr when access invalid shadow
    
    commit babddbfb7d7d70ae7f10fedd75a45d8ad75fdddf upstream.
    
    when the checked address is illegal,the corresponding shadow address from
    kasan_mem_to_shadow may have no mapping in mmu table.  Access such shadow
    address causes kernel oops.  Here is a sample about oops on arm64(VA
    39bit) with KASAN_SW_TAGS and KASAN_OUTLINE on:
    
    [ffffffb80aaaaaaa] pgd=000000005d3ce003, p4d=000000005d3ce003,
        pud=000000005d3ce003, pmd=0000000000000000
    Internal error: Oops: 0000000096000006 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 3 PID: 100 Comm: sh Not tainted 6.6.0-rc1-dirty #43
    Hardware name: linux,dummy-virt (DT)
    pstate: 80000005 (Nzcv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : __hwasan_load8_noabort+0x5c/0x90
    lr : do_ib_ob+0xf4/0x110
    ffffffb80aaaaaaa is the shadow address for efffff80aaaaaaaa.
    The problem is reading invalid shadow in kasan_check_range.
    
    The generic kasan also has similar oops.
    
    It only reports the shadow address which causes oops but not
    the original address.
    
    Commit 2f004eea0fc8("x86/kasan: Print original address on #GP")
    introduce to kasan_non_canonical_hook but limit it to KASAN_INLINE.
    
    This patch extends it to KASAN_OUTLINE mode.
    
    Link: https://lkml.kernel.org/r/20231009073748.159228-1-haibo.li@mediatek.com
    Fixes: 2f004eea0fc8("x86/kasan: Print original address on #GP")
    Signed-off-by: Haibo Li <haibo.li@mediatek.com>
    Reviewed-by: Andrey Konovalov <andreyknvl@gmail.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
    Cc: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Haibo Li <haibo.li@mediatek.com>
    Cc: Matthias Brugger <matthias.bgg@gmail.com>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a5b845b57b122534d051129bc4fc85eac7f4a68
Author: Khazhismel Kumykov <khazhy@chromium.org>
Date:   Fri Oct 20 15:36:17 2023 -0700

    blk-throttle: check for overflow in calculate_bytes_allowed
    
    commit 2dd710d476f2f1f6eaca884f625f69ef4389ed40 upstream.
    
    Inexact, we may reject some not-overflowing values incorrectly, but
    they'll be on the order of exabytes allowed anyways.
    
    This fixes divide error crash on x86 if bps_limit is not configured or
    is set too high in the rare case that jiffy_elapsed is greater than HZ.
    
    Fixes: e8368b57c006 ("blk-throttle: use calculate_io/bytes_allowed() for throtl_trim_slice()")
    Fixes: 8d6bbaada2e0 ("blk-throttle: prevent overflow while calculating wait time")
    Signed-off-by: Khazhismel Kumykov <khazhy@google.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Link: https://lore.kernel.org/r/20231020223617.2739774-1-khazhy@google.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb20a245df9c42fc93fc9d16ad7e9855a428cb57
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Wed Oct 25 15:46:12 2023 +0900

    scsi: sd: Introduce manage_shutdown device flag
    
    commit 24eca2dce0f8d19db808c972b0281298d0bafe99 upstream.
    
    Commit aa3998dbeb3a ("ata: libata-scsi: Disable scsi device
    manage_system_start_stop") change setting the manage_system_start_stop
    flag to false for libata managed disks to enable libata internal
    management of disk suspend/resume. However, a side effect of this change
    is that on system shutdown, disks are no longer being stopped (set to
    standby mode with the heads unloaded). While this is not a critical
    issue, this unclean shutdown is not recommended and shows up with
    increased smart counters (e.g. the unexpected power loss counter
    "Unexpect_Power_Loss_Ct").
    
    Instead of defining a shutdown driver method for all ATA adapter
    drivers (not all of them define that operation), this patch resolves
    this issue by further refining the sd driver start/stop control of disks
    using the new flag manage_shutdown. If this new flag is set to true by
    a low level driver, the function sd_shutdown() will issue a
    START STOP UNIT command with the start argument set to 0 when a disk
    needs to be powered off (suspended) on system power off, that is, when
    system_state is equal to SYSTEM_POWER_OFF.
    
    Similarly to the other manage_xxx flags, the new manage_shutdown flag is
    exposed through sysfs as a read-write device attribute.
    
    To avoid any confusion between manage_shutdown and
    manage_system_start_stop, the comments describing these flags in
    include/scsi/scsi.h are also improved.
    
    Fixes: aa3998dbeb3a ("ata: libata-scsi: Disable scsi device manage_system_start_stop")
    Cc: stable@vger.kernel.org
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218038
    Link: https://lore.kernel.org/all/cd397c88-bf53-4768-9ab8-9d107df9e613@gmail.com/
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Acked-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93fa5786f972cfec7684e8910d900e0814896117
Author: Michal Schmidt <mschmidt@redhat.com>
Date:   Wed Oct 25 11:32:13 2023 -0700

    iavf: in iavf_down, disable queues when removing the driver
    
    [ Upstream commit 53798666648af3aa0dd512c2380576627237a800 ]
    
    In iavf_down, we're skipping the scheduling of certain operations if
    the driver is being removed. However, the IAVF_FLAG_AQ_DISABLE_QUEUES
    request must not be skipped in this case, because iavf_close waits
    for the transition to the __IAVF_DOWN state, which happens in
    iavf_virtchnl_completion after the queues are released.
    
    Without this fix, "rmmod iavf" takes half a second per interface that's
    up and prints the "Device resources not yet released" warning.
    
    Fixes: c8de44b577eb ("iavf: do not process adminq tasks when __IAVF_IN_REMOVE_TASK is set")
    Signed-off-by: Michal Schmidt <mschmidt@redhat.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Tested-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Link: https://lore.kernel.org/r/20231025183213.874283-1-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7f660df65a11d5e8109d5146fca99c98518a253
Author: Sui Jingfeng <suijingfeng@loongson.cn>
Date:   Thu Jun 8 10:42:07 2023 +0800

    drm/logicvc: Kconfig: select REGMAP and REGMAP_MMIO
    
    [ Upstream commit 4e6c38c38723a954b85aa9ee62603bb4a37acbb4 ]
    
    drm/logicvc driver is depend on REGMAP and REGMAP_MMIO, should select this
    two kconfig option, otherwise the driver failed to compile on platform
    without REGMAP_MMIO selected:
    
    ERROR: modpost: "__devm_regmap_init_mmio_clk" [drivers/gpu/drm/logicvc/logicvc-drm.ko] undefined!
    make[1]: *** [scripts/Makefile.modpost:136: Module.symvers] Error 1
    make: *** [Makefile:1978: modpost] Error 2
    
    Signed-off-by: Sui Jingfeng <suijingfeng@loongson.cn>
    Acked-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Fixes: efeeaefe9be5 ("drm: Add support for the LogiCVC display controller")
    Link: https://patchwork.freedesktop.org/patch/msgid/20230608024207.581401-1-suijingfeng@loongson.cn
    Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb115b6688b6a985284bc2d21a4bb53983537a96
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Mon Oct 23 14:27:14 2023 -0700

    i40e: Fix wrong check for I40E_TXR_FLAGS_WB_ON_ITR
    
    [ Upstream commit 77a8c982ff0d4c3a14022c6fe9e3dbfb327552ec ]
    
    The I40E_TXR_FLAGS_WB_ON_ITR is i40e_ring flag and not i40e_pf one.
    
    Fixes: 8e0764b4d6be42 ("i40e/i40evf: Add support for writeback on ITR feature for X722")
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Link: https://lore.kernel.org/r/20231023212714.178032-1-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 144f93c62239826b03031ed90896077d4e51a082
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Oct 22 22:25:18 2023 +0200

    gtp: fix fragmentation needed check with gso
    
    [ Upstream commit 4530e5b8e2dad63dcad2206232dd86e4b1489b6c ]
    
    Call skb_gso_validate_network_len() to check if packet is over PMTU.
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 039a050740fc0b6a6efb7e157cb2ec002393a4f6
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Oct 22 22:25:17 2023 +0200

    gtp: uapi: fix GTPA_MAX
    
    [ Upstream commit adc8df12d91a2b8350b0cd4c7fec3e8546c9d1f8 ]
    
    Subtract one to __GTPA_MAX, otherwise GTPA_MAX is off by 2.
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 664a358b79663cdacc5bce6df727baf4a8589952
Author: Fred Chen <fred.chenchen03@gmail.com>
Date:   Sat Oct 21 08:19:47 2023 +0800

    tcp: fix wrong RTO timeout when received SACK reneging
    
    [ Upstream commit d2a0fc372aca561556e765d0a9ec365c7c12f0ad ]
    
    This commit fix wrong RTO timeout when received SACK reneging.
    
    When an ACK arrived pointing to a SACK reneging, tcp_check_sack_reneging()
    will rearm the RTO timer for min(1/2*srtt, 10ms) into to the future.
    
    But since the commit 62d9f1a6945b ("tcp: fix TLP timer not set when
    CA_STATE changes from DISORDER to OPEN") merged, the tcp_set_xmit_timer()
    is moved after tcp_fastretrans_alert()(which do the SACK reneging check),
    so the RTO timeout will be overwrited by tcp_set_xmit_timer() with
    icsk_rto instead of 1/2*srtt.
    
    Here is a packetdrill script to check this bug:
    0     socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
    +0    bind(3, ..., ...) = 0
    +0    listen(3, 1) = 0
    
    // simulate srtt to 100ms
    +0    < S 0:0(0) win 32792 <mss 1000, sackOK,nop,nop,nop,wscale 7>
    +0    > S. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 7>
    +.1    < . 1:1(0) ack 1 win 1024
    
    +0    accept(3, ..., ...) = 4
    
    +0    write(4, ..., 10000) = 10000
    +0    > P. 1:10001(10000) ack 1
    
    // inject sack
    +.1    < . 1:1(0) ack 1 win 257 <sack 1001:10001,nop,nop>
    +0    > . 1:1001(1000) ack 1
    
    // inject sack reneging
    +.1    < . 1:1(0) ack 1001 win 257 <sack 9001:10001,nop,nop>
    
    // we expect rto fired in 1/2*srtt (50ms)
    +.05    > . 1001:2001(1000) ack 1
    
    This fix remove the FLAG_SET_XMIT_TIMER from ack_flag when
    tcp_check_sack_reneging() set RTO timer with 1/2*srtt to avoid
    being overwrited later.
    
    Fixes: 62d9f1a6945b ("tcp: fix TLP timer not set when CA_STATE changes from DISORDER to OPEN")
    Signed-off-by: Fred Chen <fred.chenchen03@gmail.com>
    Reviewed-by: Neal Cardwell <ncardwell@google.com>
    Tested-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b100bb0449c61375ea0ed6258a923d9718de59d
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri Oct 20 14:06:55 2023 -0700

    r8152: Release firmware if we have an error in probe
    
    [ Upstream commit b8d35024d4059ca550cba11ac9ab23a6c238d929 ]
    
    The error handling in rtl8152_probe() is missing a call to release
    firmware. Add it in to match what's in the cleanup code in
    rtl8152_disconnect().
    
    Fixes: 9370f2d05a2a ("r8152: support request_firmware for RTL8153")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ecb51a434e3d486dada181823a8cf7e66dfdb2bb
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri Oct 20 14:06:54 2023 -0700

    r8152: Cancel hw_phy_work if we have an error in probe
    
    [ Upstream commit bb8adff9123e492598162ac1baad01a53891aef6 ]
    
    The error handling in rtl8152_probe() is missing a call to cancel the
    hw_phy_work. Add it in to match what's in the cleanup code in
    rtl8152_disconnect().
    
    Fixes: a028a9e003f2 ("r8152: move the settings of PHY to a work queue")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87376143df3f8d92beab7dcc2a0275984ec37a3d
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri Oct 20 14:06:53 2023 -0700

    r8152: Run the unload routine if we have errors during probe
    
    [ Upstream commit 5dd17689526971c5ae12bc8398f34bd68cd0499e ]
    
    The rtl8152_probe() function lacks a call to the chip-specific
    unload() routine when it sees an error in probe. Add it in to match
    the cleanup code in rtl8152_disconnect().
    
    Fixes: ac718b69301c ("net/usb: new driver for RTL8152")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee73f937c5e9be8d7f778e9fbf383d3cee2292ea
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri Oct 20 14:06:52 2023 -0700

    r8152: Increase USB control msg timeout to 5000ms as per spec
    
    [ Upstream commit a5feba71ec9c14a54c3babdc732c5b6866d8ee43 ]
    
    According to the comment next to USB_CTRL_GET_TIMEOUT and
    USB_CTRL_SET_TIMEOUT, although sending/receiving control messages is
    usually quite fast, the spec allows them to take up to 5 seconds.
    Let's increase the timeout in the Realtek driver from 500ms to 5000ms
    (using the #defines) to account for this.
    
    This is not just a theoretical change. The need for the longer timeout
    was seen in testing. Specifically, if you drop a sc7180-trogdor based
    Chromebook into the kdb debugger and then "go" again after sitting in
    the debugger for a while, the next USB control message takes a long
    time. Out of ~40 tests the slowest USB control message was 4.5
    seconds.
    
    While dropping into kdb is not exactly an end-user scenario, the above
    is similar to what could happen due to an temporary interrupt storm,
    what could happen if there was a host controller (HW or SW) issue, or
    what could happen if the Realtek device got into a confused state and
    needed time to recover.
    
    This change is fairly critical since the r8152 driver in Linux doesn't
    expect register reads/writes (which are backed by USB control
    messages) to fail.
    
    Fixes: ac718b69301c ("net/usb: new driver for RTL8152")
    Suggested-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9eb275fec60252c7b461cc629a7e83f084c7e08b
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Sat Oct 21 02:03:44 2023 +0900

    net: usb: smsc95xx: Fix uninit-value access in smsc95xx_read_reg
    
    [ Upstream commit 51a32e828109b4a209efde44505baa356b37a4ce ]
    
    syzbot reported the following uninit-value access issue [1]:
    
    smsc95xx 1-1:0.0 (unnamed net_device) (uninitialized): Failed to read reg index 0x00000030: -32
    smsc95xx 1-1:0.0 (unnamed net_device) (uninitialized): Error reading E2P_CMD
    =====================================================
    BUG: KMSAN: uninit-value in smsc95xx_reset+0x409/0x25f0 drivers/net/usb/smsc95xx.c:896
     smsc95xx_reset+0x409/0x25f0 drivers/net/usb/smsc95xx.c:896
     smsc95xx_bind+0x9bc/0x22e0 drivers/net/usb/smsc95xx.c:1131
     usbnet_probe+0x100b/0x4060 drivers/net/usb/usbnet.c:1750
     usb_probe_interface+0xc75/0x1210 drivers/usb/core/driver.c:396
     really_probe+0x506/0xf40 drivers/base/dd.c:658
     __driver_probe_device+0x2a7/0x5d0 drivers/base/dd.c:800
     driver_probe_device+0x72/0x7b0 drivers/base/dd.c:830
     __device_attach_driver+0x55a/0x8f0 drivers/base/dd.c:958
     bus_for_each_drv+0x3ff/0x620 drivers/base/bus.c:457
     __device_attach+0x3bd/0x640 drivers/base/dd.c:1030
     device_initial_probe+0x32/0x40 drivers/base/dd.c:1079
     bus_probe_device+0x3d8/0x5a0 drivers/base/bus.c:532
     device_add+0x16ae/0x1f20 drivers/base/core.c:3622
     usb_set_configuration+0x31c9/0x38c0 drivers/usb/core/message.c:2207
     usb_generic_driver_probe+0x109/0x2a0 drivers/usb/core/generic.c:238
     usb_probe_device+0x290/0x4a0 drivers/usb/core/driver.c:293
     really_probe+0x506/0xf40 drivers/base/dd.c:658
     __driver_probe_device+0x2a7/0x5d0 drivers/base/dd.c:800
     driver_probe_device+0x72/0x7b0 drivers/base/dd.c:830
     __device_attach_driver+0x55a/0x8f0 drivers/base/dd.c:958
     bus_for_each_drv+0x3ff/0x620 drivers/base/bus.c:457
     __device_attach+0x3bd/0x640 drivers/base/dd.c:1030
     device_initial_probe+0x32/0x40 drivers/base/dd.c:1079
     bus_probe_device+0x3d8/0x5a0 drivers/base/bus.c:532
     device_add+0x16ae/0x1f20 drivers/base/core.c:3622
     usb_new_device+0x15f6/0x22f0 drivers/usb/core/hub.c:2589
     hub_port_connect drivers/usb/core/hub.c:5440 [inline]
     hub_port_connect_change drivers/usb/core/hub.c:5580 [inline]
     port_event drivers/usb/core/hub.c:5740 [inline]
     hub_event+0x53bc/0x7290 drivers/usb/core/hub.c:5822
     process_one_work kernel/workqueue.c:2630 [inline]
     process_scheduled_works+0x104e/0x1e70 kernel/workqueue.c:2703
     worker_thread+0xf45/0x1490 kernel/workqueue.c:2784
     kthread+0x3e8/0x540 kernel/kthread.c:388
     ret_from_fork+0x66/0x80 arch/x86/kernel/process.c:147
     ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    Local variable buf.i225 created at:
     smsc95xx_read_reg drivers/net/usb/smsc95xx.c:90 [inline]
     smsc95xx_reset+0x203/0x25f0 drivers/net/usb/smsc95xx.c:892
     smsc95xx_bind+0x9bc/0x22e0 drivers/net/usb/smsc95xx.c:1131
    
    CPU: 1 PID: 773 Comm: kworker/1:2 Not tainted 6.6.0-rc1-syzkaller-00125-ge42bebf6db29 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/04/2023
    Workqueue: usb_hub_wq hub_event
    =====================================================
    
    Similar to e9c65989920f ("net: usb: smsc75xx: Fix uninit-value access in
    __smsc75xx_read_reg"), this issue is caused because usbnet_read_cmd() reads
    less bytes than requested (zero byte in the reproducer). In this case,
    'buf' is not properly filled.
    
    This patch fixes the issue by returning -ENODATA if usbnet_read_cmd() reads
    less bytes than requested.
    
    sysbot reported similar uninit-value access issue [2]. The root cause is
    the same as mentioned above, and this patch addresses it as well.
    
    Fixes: 2f7ca802bdae ("net: Add SMSC LAN9500 USB2.0 10/100 ethernet adapter driver")
    Reported-and-tested-by: syzbot+c74c24b43c9ae534f0e0@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+2c97a98a5ba9ea9c23bd@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=c74c24b43c9ae534f0e0 [1]
    Closes: https://syzkaller.appspot.com/bug?extid=2c97a98a5ba9ea9c23bd [2]
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c799bc32232a4e55ef01b98fa62005352b572f1
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Oct 21 20:03:53 2023 +0200

    net: ieee802154: adf7242: Fix some potential buffer overflow in adf7242_stats_show()
    
    [ Upstream commit ca082f019d8fbb983f03080487946da714154bae ]
    
    strncat() usage in adf7242_debugfs_init() is wrong.
    The size given to strncat() is the maximum number of bytes that can be
    written, excluding the trailing NULL.
    
    Here, the size that is passed, DNAME_INLINE_LEN, does not take into account
    the size of "adf7242-" that is already in the array.
    
    In order to fix it, use snprintf() instead.
    
    Fixes: 7302b9d90117 ("ieee802154/adf7242: Driver for ADF7242 MAC IEEE802154")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55b01c5a847e13949498780fd3060143c02ed1b8
Author: Dell Jin <dell.jin.code@outlook.com>
Date:   Fri Oct 20 09:20:53 2023 +0300

    net: ethernet: adi: adin1110: Fix uninitialized variable
    
    [ Upstream commit 965f9b8c0c1b37fa2a0e3ef56e40d5666d4cbb5c ]
    
    The spi_transfer struct has to have all it's fields initialized to 0 in
    this case, since not all of them are set before starting the transfer.
    Otherwise, spi_sync_transfer() will sometimes return an error.
    
    Fixes: a526a3cc9c8d ("net: ethernet: adi: adin1110: Fix SPI transfers")
    Signed-off-by: Dell Jin <dell.jin.code@outlook.com>
    Signed-off-by: Ciprian Regus <ciprian.regus@analog.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d2b588fae86d7227493e1681be58a5657b66fd0
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Thu Oct 19 13:36:41 2023 -0700

    igc: Fix ambiguity in the ethtool advertising
    
    [ Upstream commit e7684d29efdf37304c62bb337ea55b3428ca118e ]
    
    The 'ethtool_convert_link_mode_to_legacy_u32' method does not allow us to
    advertise 2500M speed support and TP (twisted pair) properly. Convert to
    'ethtool_link_ksettings_test_link_mode' to advertise supported speed and
    eliminate ambiguity.
    
    Fixes: 8c5ad0dae93c ("igc: Add ethtool support")
    Suggested-by: Dima Ruinskiy <dima.ruinskiy@intel.com>
    Suggested-by: Vitaly Lifshits <vitaly.lifshits@intel.com>
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Link: https://lore.kernel.org/r/20231019203641.3661960-1-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa28949c72db100b448cb9a3e6c1cfa59a8fefd0
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 19 12:21:04 2023 +0000

    neighbour: fix various data-races
    
    [ Upstream commit a9beb7e81bcb876615e1fbb3c07f3f9dba69831f ]
    
    1) tbl->gc_thresh1, tbl->gc_thresh2, tbl->gc_thresh3 and tbl->gc_interval
       can be written from sysfs.
    
    2) tbl->last_flush is read locklessly from neigh_alloc()
    
    3) tbl->proxy_queue.qlen is read locklessly from neightbl_fill_info()
    
    4) neightbl_fill_info() reads cpu stats that can be changed concurrently.
    
    Fixes: c7fb64db001f ("[NETLINK]: Neighbour table configuration and statistics via rtnetlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231019122104.1448310-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c166dd51b628702bda57c18afbfc3c8887f09844
Author: Mateusz Palczewski <mateusz.palczewski@intel.com>
Date:   Thu Oct 19 13:40:35 2023 -0700

    igb: Fix potential memory leak in igb_add_ethtool_nfc_entry
    
    [ Upstream commit 8c0b48e01daba5ca58f939a8425855d3f4f2ed14 ]
    
    Add check for return of igb_update_ethtool_nfc_entry so that in case
    of any potential errors the memory alocated for input will be freed.
    
    Fixes: 0e71def25281 ("igb: add support of RX network flow classification")
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Arpana Arland <arpanax.arland@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a194064fab68406e2e33ddc2d0a37e4e2baf11e
Author: Kunwu Chan <chentao@kylinos.cn>
Date:   Fri Oct 20 17:31:56 2023 +0800

    treewide: Spelling fix in comment
    
    [ Upstream commit fb71ba0ed8be9534493c80ba00142a64d9972a72 ]
    
    reques -> request
    
    Fixes: 09dde54c6a69 ("PS3: gelic: Add wireless support for PS3")
    Signed-off-by: Kunwu Chan <chentao@kylinos.cn>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1ad0a147d08be007aa313e46752857ad8389121
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Thu Oct 19 18:37:20 2023 +0200

    i40e: Fix I40E_FLAG_VF_VLAN_PRUNING value
    
    [ Upstream commit 665e7d83c5386f9abdc67b2e4b6e6d9579aadfcb ]
    
    Commit c87c938f62d8f1 ("i40e: Add VF VLAN pruning") added new
    PF flag I40E_FLAG_VF_VLAN_PRUNING but its value collides with
    existing I40E_FLAG_TOTAL_PORT_SHUTDOWN_ENABLED flag.
    
    Move the affected flag at the end of the flags and fix its value.
    
    Reproducer:
    [root@cnb-03 ~]# ethtool --set-priv-flags enp2s0f0np0 link-down-on-close on
    [root@cnb-03 ~]# ethtool --set-priv-flags enp2s0f0np0 vf-vlan-pruning on
    [root@cnb-03 ~]# ethtool --set-priv-flags enp2s0f0np0 link-down-on-close off
    [ 6323.142585] i40e 0000:02:00.0: Setting link-down-on-close not supported on this port (because total-port-shutdown is enabled)
    netlink error: Operation not supported
    [root@cnb-03 ~]# ethtool --set-priv-flags enp2s0f0np0 vf-vlan-pruning off
    [root@cnb-03 ~]# ethtool --set-priv-flags enp2s0f0np0 link-down-on-close off
    
    The link-down-on-close flag cannot be modified after setting vf-vlan-pruning
    because vf-vlan-pruning shares the same bit with total-port-shutdown flag
    that prevents any modification of link-down-on-close flag.
    
    Fixes: c87c938f62d8 ("i40e: Add VF VLAN pruning")
    Cc: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Cc: Simon Horman <horms@kernel.org>
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8ac13acfbf79cc1febf50aa0b5fd2ebc21136a3
Author: Michal Schmidt <mschmidt@redhat.com>
Date:   Thu Oct 19 09:13:46 2023 +0200

    iavf: initialize waitqueues before starting watchdog_task
    
    [ Upstream commit 7db3111043885c146e795c199d39c3f9042d97c0 ]
    
    It is not safe to initialize the waitqueues after queueing the
    watchdog_task. It will be using them.
    
    The chance of this causing a real problem is very small, because
    there will be some sleeping before any of the waitqueues get used.
    I got a crash only after inserting an artificial sleep in iavf_probe.
    
    Queue the watchdog_task as the last step in iavf_probe. Add a comment to
    prevent repeating the mistake.
    
    Fixes: fe2647ab0c99 ("i40evf: prevent VF close returning before state transitions to DOWN")
    Signed-off-by: Michal Schmidt <mschmidt@redhat.com>
    Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66e879507b12299b615ab066a6e9583d53323cb3
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Wed Oct 18 21:34:38 2023 +0200

    r8169: fix the KCSAN reported data race in rtl_rx while reading desc->opts1
    
    [ Upstream commit f97eee484e71890131f9c563c5cc6d5a69e4308d ]
    
    KCSAN reported the following data-race bug:
    
    ==================================================================
    BUG: KCSAN: data-race in rtl8169_poll (drivers/net/ethernet/realtek/r8169_main.c:4430 drivers/net/ethernet/realtek/r8169_main.c:4583) r8169
    
    race at unknown origin, with read to 0xffff888117e43510 of 4 bytes by interrupt on cpu 21:
    rtl8169_poll (drivers/net/ethernet/realtek/r8169_main.c:4430 drivers/net/ethernet/realtek/r8169_main.c:4583) r8169
    __napi_poll (net/core/dev.c:6527)
    net_rx_action (net/core/dev.c:6596 net/core/dev.c:6727)
    __do_softirq (kernel/softirq.c:553)
    __irq_exit_rcu (kernel/softirq.c:427 kernel/softirq.c:632)
    irq_exit_rcu (kernel/softirq.c:647)
    sysvec_apic_timer_interrupt (arch/x86/kernel/apic/apic.c:1074 (discriminator 14))
    asm_sysvec_apic_timer_interrupt (./arch/x86/include/asm/idtentry.h:645)
    cpuidle_enter_state (drivers/cpuidle/cpuidle.c:291)
    cpuidle_enter (drivers/cpuidle/cpuidle.c:390)
    call_cpuidle (kernel/sched/idle.c:135)
    do_idle (kernel/sched/idle.c:219 kernel/sched/idle.c:282)
    cpu_startup_entry (kernel/sched/idle.c:378 (discriminator 1))
    start_secondary (arch/x86/kernel/smpboot.c:210 arch/x86/kernel/smpboot.c:294)
    secondary_startup_64_no_verify (arch/x86/kernel/head_64.S:433)
    
    value changed: 0x80003fff -> 0x3402805f
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 21 PID: 0 Comm: swapper/21 Tainted: G             L     6.6.0-rc2-kcsan-00143-gb5cbe7c00aa0 #41
    Hardware name: ASRock X670E PG Lightning/X670E PG Lightning, BIOS 1.21 04/26/2023
    ==================================================================
    
    drivers/net/ethernet/realtek/r8169_main.c:
    ==========================================
       4429
     → 4430                 status = le32_to_cpu(desc->opts1);
       4431                 if (status & DescOwn)
       4432                         break;
       4433
       4434                 /* This barrier is needed to keep us from reading
       4435                  * any other fields out of the Rx descriptor until
       4436                  * we know the status of DescOwn
       4437                  */
       4438                 dma_rmb();
       4439
       4440                 if (unlikely(status & RxRES)) {
       4441                         if (net_ratelimit())
       4442                                 netdev_warn(dev, "Rx ERROR. status = %08x\n",
    
    Marco Elver explained that dma_rmb() doesn't prevent the compiler to tear up the access to
    desc->opts1 which can be written to concurrently. READ_ONCE() should prevent that from
    happening:
    
       4429
     → 4430                 status = le32_to_cpu(READ_ONCE(desc->opts1));
       4431                 if (status & DescOwn)
       4432                         break;
       4433
    
    As the consequence of this fix, this KCSAN warning was eliminated.
    
    Fixes: 6202806e7c03a ("r8169: drop member opts1_mask from struct rtl8169_private")
    Suggested-by: Marco Elver <elver@google.com>
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Cc: nic_swsd@realtek.com
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: netdev@vger.kernel.org
    Link: https://lore.kernel.org/lkml/dc7fc8fa-4ea4-e9a9-30a6-7c83e6b53188@alu.unizg.hr/
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d10140916e6f7068038ffec86323369c7c851791
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Wed Oct 18 21:34:36 2023 +0200

    r8169: fix the KCSAN reported data-race in rtl_tx while reading TxDescArray[entry].opts1
    
    [ Upstream commit dcf75a0f6bc136de94e88178ae5f51b7f879abc9 ]
    
    KCSAN reported the following data-race:
    
    ==================================================================
    BUG: KCSAN: data-race in rtl8169_poll (drivers/net/ethernet/realtek/r8169_main.c:4368 drivers/net/ethernet/realtek/r8169_main.c:4581) r8169
    
    race at unknown origin, with read to 0xffff888140d37570 of 4 bytes by interrupt on cpu 21:
    rtl8169_poll (drivers/net/ethernet/realtek/r8169_main.c:4368 drivers/net/ethernet/realtek/r8169_main.c:4581) r8169
    __napi_poll (net/core/dev.c:6527)
    net_rx_action (net/core/dev.c:6596 net/core/dev.c:6727)
    __do_softirq (kernel/softirq.c:553)
    __irq_exit_rcu (kernel/softirq.c:427 kernel/softirq.c:632)
    irq_exit_rcu (kernel/softirq.c:647)
    sysvec_apic_timer_interrupt (arch/x86/kernel/apic/apic.c:1074 (discriminator 14))
    asm_sysvec_apic_timer_interrupt (./arch/x86/include/asm/idtentry.h:645)
    cpuidle_enter_state (drivers/cpuidle/cpuidle.c:291)
    cpuidle_enter (drivers/cpuidle/cpuidle.c:390)
    call_cpuidle (kernel/sched/idle.c:135)
    do_idle (kernel/sched/idle.c:219 kernel/sched/idle.c:282)
    cpu_startup_entry (kernel/sched/idle.c:378 (discriminator 1))
    start_secondary (arch/x86/kernel/smpboot.c:210 arch/x86/kernel/smpboot.c:294)
    secondary_startup_64_no_verify (arch/x86/kernel/head_64.S:433)
    
    value changed: 0xb0000042 -> 0x00000000
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 21 PID: 0 Comm: swapper/21 Tainted: G             L     6.6.0-rc2-kcsan-00143-gb5cbe7c00aa0 #41
    Hardware name: ASRock X670E PG Lightning/X670E PG Lightning, BIOS 1.21 04/26/2023
    ==================================================================
    
    The read side is in
    
    drivers/net/ethernet/realtek/r8169_main.c
    =========================================
       4355 static void rtl_tx(struct net_device *dev, struct rtl8169_private *tp,
       4356                    int budget)
       4357 {
       4358         unsigned int dirty_tx, bytes_compl = 0, pkts_compl = 0;
       4359         struct sk_buff *skb;
       4360
       4361         dirty_tx = tp->dirty_tx;
       4362
       4363         while (READ_ONCE(tp->cur_tx) != dirty_tx) {
       4364                 unsigned int entry = dirty_tx % NUM_TX_DESC;
       4365                 u32 status;
       4366
     → 4367                 status = le32_to_cpu(tp->TxDescArray[entry].opts1);
       4368                 if (status & DescOwn)
       4369                         break;
       4370
       4371                 skb = tp->tx_skb[entry].skb;
       4372                 rtl8169_unmap_tx_skb(tp, entry);
       4373
       4374                 if (skb) {
       4375                         pkts_compl++;
       4376                         bytes_compl += skb->len;
       4377                         napi_consume_skb(skb, budget);
       4378                 }
       4379                 dirty_tx++;
       4380         }
       4381
       4382         if (tp->dirty_tx != dirty_tx) {
       4383                 dev_sw_netstats_tx_add(dev, pkts_compl, bytes_compl);
       4384                 WRITE_ONCE(tp->dirty_tx, dirty_tx);
       4385
       4386                 netif_subqueue_completed_wake(dev, 0, pkts_compl, bytes_compl,
       4387                                               rtl_tx_slots_avail(tp),
       4388                                               R8169_TX_START_THRS);
       4389                 /*
       4390                  * 8168 hack: TxPoll requests are lost when the Tx packets are
       4391                  * too close. Let's kick an extra TxPoll request when a burst
       4392                  * of start_xmit activity is detected (if it is not detected,
       4393                  * it is slow enough). -- FR
       4394                  * If skb is NULL then we come here again once a tx irq is
       4395                  * triggered after the last fragment is marked transmitted.
       4396                  */
       4397                 if (READ_ONCE(tp->cur_tx) != dirty_tx && skb)
       4398                         rtl8169_doorbell(tp);
       4399         }
       4400 }
    
    tp->TxDescArray[entry].opts1 is reported to have a data-race and READ_ONCE() fixes
    this KCSAN warning.
    
       4366
     → 4367                 status = le32_to_cpu(READ_ONCE(tp->TxDescArray[entry].opts1));
       4368                 if (status & DescOwn)
       4369                         break;
       4370
    
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Cc: nic_swsd@realtek.com
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Marco Elver <elver@google.com>
    Cc: netdev@vger.kernel.org
    Link: https://lore.kernel.org/lkml/dc7fc8fa-4ea4-e9a9-30a6-7c83e6b53188@alu.unizg.hr/
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Acked-by: Marco Elver <elver@google.com>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4138a02c89539b40593cea79e1b6ae022fc0b156
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Wed Oct 18 21:34:34 2023 +0200

    r8169: fix the KCSAN reported data-race in rtl_tx() while reading tp->cur_tx
    
    [ Upstream commit c1c0ce31b2420d5c173228a2132a492ede03d81f ]
    
    KCSAN reported the following data-race:
    
    ==================================================================
    BUG: KCSAN: data-race in rtl8169_poll [r8169] / rtl8169_start_xmit [r8169]
    
    write (marked) to 0xffff888102474b74 of 4 bytes by task 5358 on cpu 29:
    rtl8169_start_xmit (drivers/net/ethernet/realtek/r8169_main.c:4254) r8169
    dev_hard_start_xmit (./include/linux/netdevice.h:4889 ./include/linux/netdevice.h:4903 net/core/dev.c:3544 net/core/dev.c:3560)
    sch_direct_xmit (net/sched/sch_generic.c:342)
    __dev_queue_xmit (net/core/dev.c:3817 net/core/dev.c:4306)
    ip_finish_output2 (./include/linux/netdevice.h:3082 ./include/net/neighbour.h:526 ./include/net/neighbour.h:540 net/ipv4/ip_output.c:233)
    __ip_finish_output (net/ipv4/ip_output.c:311 net/ipv4/ip_output.c:293)
    ip_finish_output (net/ipv4/ip_output.c:328)
    ip_output (net/ipv4/ip_output.c:435)
    ip_send_skb (./include/net/dst.h:458 net/ipv4/ip_output.c:127 net/ipv4/ip_output.c:1486)
    udp_send_skb (net/ipv4/udp.c:963)
    udp_sendmsg (net/ipv4/udp.c:1246)
    inet_sendmsg (net/ipv4/af_inet.c:840 (discriminator 4))
    sock_sendmsg (net/socket.c:730 net/socket.c:753)
    __sys_sendto (net/socket.c:2177)
    __x64_sys_sendto (net/socket.c:2185)
    do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
    entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    
    read to 0xffff888102474b74 of 4 bytes by interrupt on cpu 21:
    rtl8169_poll (drivers/net/ethernet/realtek/r8169_main.c:4397 drivers/net/ethernet/realtek/r8169_main.c:4581) r8169
    __napi_poll (net/core/dev.c:6527)
    net_rx_action (net/core/dev.c:6596 net/core/dev.c:6727)
    __do_softirq (kernel/softirq.c:553)
    __irq_exit_rcu (kernel/softirq.c:427 kernel/softirq.c:632)
    irq_exit_rcu (kernel/softirq.c:647)
    common_interrupt (arch/x86/kernel/irq.c:247 (discriminator 14))
    asm_common_interrupt (./arch/x86/include/asm/idtentry.h:636)
    cpuidle_enter_state (drivers/cpuidle/cpuidle.c:291)
    cpuidle_enter (drivers/cpuidle/cpuidle.c:390)
    call_cpuidle (kernel/sched/idle.c:135)
    do_idle (kernel/sched/idle.c:219 kernel/sched/idle.c:282)
    cpu_startup_entry (kernel/sched/idle.c:378 (discriminator 1))
    start_secondary (arch/x86/kernel/smpboot.c:210 arch/x86/kernel/smpboot.c:294)
    secondary_startup_64_no_verify (arch/x86/kernel/head_64.S:433)
    
    value changed: 0x002f4815 -> 0x002f4816
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 21 PID: 0 Comm: swapper/21 Tainted: G             L     6.6.0-rc2-kcsan-00143-gb5cbe7c00aa0 #41
    Hardware name: ASRock X670E PG Lightning/X670E PG Lightning, BIOS 1.21 04/26/2023
    ==================================================================
    
    The write side of drivers/net/ethernet/realtek/r8169_main.c is:
    ==================
       4251         /* rtl_tx needs to see descriptor changes before updated tp->cur_tx */
       4252         smp_wmb();
       4253
     → 4254         WRITE_ONCE(tp->cur_tx, tp->cur_tx + frags + 1);
       4255
       4256         stop_queue = !netif_subqueue_maybe_stop(dev, 0, rtl_tx_slots_avail(tp),
       4257                                                 R8169_TX_STOP_THRS,
       4258                                                 R8169_TX_START_THRS);
    
    The read side is the function rtl_tx():
    
       4355 static void rtl_tx(struct net_device *dev, struct rtl8169_private *tp,
       4356                    int budget)
       4357 {
       4358         unsigned int dirty_tx, bytes_compl = 0, pkts_compl = 0;
       4359         struct sk_buff *skb;
       4360
       4361         dirty_tx = tp->dirty_tx;
       4362
       4363         while (READ_ONCE(tp->cur_tx) != dirty_tx) {
       4364                 unsigned int entry = dirty_tx % NUM_TX_DESC;
       4365                 u32 status;
       4366
       4367                 status = le32_to_cpu(tp->TxDescArray[entry].opts1);
       4368                 if (status & DescOwn)
       4369                         break;
       4370
       4371                 skb = tp->tx_skb[entry].skb;
       4372                 rtl8169_unmap_tx_skb(tp, entry);
       4373
       4374                 if (skb) {
       4375                         pkts_compl++;
       4376                         bytes_compl += skb->len;
       4377                         napi_consume_skb(skb, budget);
       4378                 }
       4379                 dirty_tx++;
       4380         }
       4381
       4382         if (tp->dirty_tx != dirty_tx) {
       4383                 dev_sw_netstats_tx_add(dev, pkts_compl, bytes_compl);
       4384                 WRITE_ONCE(tp->dirty_tx, dirty_tx);
       4385
       4386                 netif_subqueue_completed_wake(dev, 0, pkts_compl, bytes_compl,
       4387                                               rtl_tx_slots_avail(tp),
       4388                                               R8169_TX_START_THRS);
       4389                 /*
       4390                  * 8168 hack: TxPoll requests are lost when the Tx packets are
       4391                  * too close. Let's kick an extra TxPoll request when a burst
       4392                  * of start_xmit activity is detected (if it is not detected,
       4393                  * it is slow enough). -- FR
       4394                  * If skb is NULL then we come here again once a tx irq is
       4395                  * triggered after the last fragment is marked transmitted.
       4396                  */
     → 4397                 if (tp->cur_tx != dirty_tx && skb)
       4398                         rtl8169_doorbell(tp);
       4399         }
       4400 }
    
    Obviously from the code, an earlier detected data-race for tp->cur_tx was fixed in the
    line 4363:
    
       4363         while (READ_ONCE(tp->cur_tx) != dirty_tx) {
    
    but the same solution is required for protecting the other access to tp->cur_tx:
    
     → 4397                 if (READ_ONCE(tp->cur_tx) != dirty_tx && skb)
       4398                         rtl8169_doorbell(tp);
    
    The write in the line 4254 is protected with WRITE_ONCE(), but the read in the line 4397
    might have suffered read tearing under some compiler optimisations.
    
    The fix eliminated the KCSAN data-race report for this bug.
    
    It is yet to be evaluated what happens if tp->cur_tx changes between the test in line 4363
    and line 4397. This test should certainly not be cached by the compiler in some register
    for such a long time, while asynchronous writes to tp->cur_tx might have occurred in line
    4254 in the meantime.
    
    Fixes: 94d8a98e6235c ("r8169: reduce number of workaround doorbell rings")
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Cc: nic_swsd@realtek.com
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Marco Elver <elver@google.com>
    Cc: netdev@vger.kernel.org
    Link: https://lore.kernel.org/lkml/dc7fc8fa-4ea4-e9a9-30a6-7c83e6b53188@alu.unizg.hr/
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29f365f4c3b896eaef7f1251babf9143a77105e3
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Oct 11 10:15:56 2023 +0300

    clk: ti: Fix missing omap5 mcbsp functional clock and aliases
    
    [ Upstream commit 0b9a4a67c60d3e15b39a69d480a50ce7eeff9bc1 ]
    
    We are using a wrong mcbsp functional clock. The interconnect target module
    driver provided clock for mcbsp is not same as the mcbsp functional clock
    known as the gfclk main_clk. The mcbsp functional clocks for mcbsp should
    have been added before we dropped the legacy platform data.
    
    Additionally we are also missing the clock aliases for the clocks used by
    the audio driver if reparenting is needed. This causes audio driver errors
    like "CLKS: could not clk_get() prcm_fck" for mcbsp as reported by Andreas.
    The mcbsp clock aliases too should have been added before we dropped the
    legacy platform data.
    
    Let's add the clocks and aliases with a single patch to fix the issue
    similar to omap4. On omap5, there is no mcbsp4 instance on the l4_per
    interconnect.
    
    Fixes: b1da0fa21bd1 ("ARM: OMAP2+: Drop legacy platform data for omap5 mcbsp")
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Reported-by: Andreas Kemnade <andreas@kemnade.info>
    Reported-by: Péter Ujfalusi <peter.ujfalusi@gmail.com>
    Acked-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ba943c6d9eb7733c9f1623c0bdac7a936ca87ec
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Oct 11 10:15:56 2023 +0300

    clk: ti: Fix missing omap4 mcbsp functional clock and aliases
    
    [ Upstream commit cc2d819dd7df94a72bde7b9b9331a6535084092d ]
    
    We are using a wrong mcbsp functional clock. The interconnect target module
    driver provided clock for mcbsp is not same as the mcbsp functional clock
    known as the gfclk main_clk. The mcbsp functional clocks for mcbsp should
    have been added before we dropped the legacy platform data.
    
    Additionally we are also missing the clock aliases for the clocks used by
    the audio driver if reparenting is needed. This causes audio driver errors
    like "CLKS: could not clk_get() prcm_fck" for mcbsp as reported by Andreas.
    The mcbsp clock aliases too should have been added before we dropped the
    legacy platform data.
    
    Let's add the clocks and aliases with a single patch to fix the issue.
    
    Fixes: 349355ce3a05 ("ARM: OMAP2+: Drop legacy platform data for omap4 mcbsp")
    Reported-by: Andreas Kemnade <andreas@kemnade.info>
    Reported-by: Péter Ujfalusi <peter.ujfalusi@gmail.com>
    Acked-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d8346ed3968b95cd11e6f2955c793e58a89bf30
Author: Hao Ge <gehao@kylinos.cn>
Date:   Sun Oct 8 11:29:08 2023 +0800

    firmware/imx-dsp: Fix use_after_free in imx_dsp_setup_channels()
    
    [ Upstream commit 1558b1a8dd388f5fcc3abc1e24de854a295044c3 ]
    
    dsp_chan->name and chan_name points to same block of memory,
    because dev_err still needs to be used it,so we need free
    it's memory after use to avoid use_after_free.
    
    Fixes: e527adfb9b7d ("firmware: imx-dsp: Fix an error handling path in imx_dsp_setup_channels()")
    Signed-off-by: Hao Ge <gehao@kylinos.cn>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df4169fc9b8a41b4bf411d2688bffbd02377e091
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Oct 6 17:16:03 2023 -0700

    ARM: OMAP: timer32K: fix all kernel-doc warnings
    
    [ Upstream commit 7eeca8ccd1066c68d6002dbbe26433f8c17c53eb ]
    
    Fix kernel-doc warnings reported by the kernel test robot:
    
    timer32k.c:186: warning: cannot understand function prototype: 'struct timespec64 persistent_ts; '
    timer32k.c:191: warning: Function parameter or member 'ts' not described in 'omap_read_persistent_clock64'
    timer32k.c:216: warning: Function parameter or member 'vbase' not described in 'omap_init_clocksource_32k'
    timer32k.c:216: warning: Excess function parameter 'pbase' description in 'omap_init_clocksource_32k'
    timer32k.c:216: warning: Excess function parameter 'size' description in 'omap_init_clocksource_32k'
    timer32k.c:216: warning: No description found for return value of 'omap_init_clocksource_32k'
    
    Fixes: a451570c008b ("ARM: OMAP: 32k counter: Provide y2038-safe omap_read_persistent_clock() replacement")
    Fixes: 1fe97c8f6a1d ("ARM: OMAP: Make OMAP clocksource source selection using kernel param")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/all/202310070106.8QSyJOm3-lkp@intel.com/
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Vaibhav Hiremath <hvaibhav@ti.com>
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Xunlei Pang <pang.xunlei@linaro.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Cc: linux-omap@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Message-ID: <20231007001603.24972-1-rdunlap@infradead.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c668e2f338bde76279aeaf4d4c035c4196a479b
Author: Lukasz Majczak <lma@semihalf.com>
Date:   Fri Sep 22 08:34:10 2023 +0200

    drm/dp_mst: Fix NULL deref in get_mst_branch_device_by_guid_helper()
    
    commit 3d887d512494d678b17c57b835c32f4e48d34f26 upstream.
    
    As drm_dp_get_mst_branch_device_by_guid() is called from
    drm_dp_get_mst_branch_device_by_guid(), mstb parameter has to be checked,
    otherwise NULL dereference may occur in the call to
    the memcpy() and cause following:
    
    [12579.365869] BUG: kernel NULL pointer dereference, address: 0000000000000049
    [12579.365878] #PF: supervisor read access in kernel mode
    [12579.365880] #PF: error_code(0x0000) - not-present page
    [12579.365882] PGD 0 P4D 0
    [12579.365887] Oops: 0000 [#1] PREEMPT SMP NOPTI
    ...
    [12579.365895] Workqueue: events_long drm_dp_mst_up_req_work
    [12579.365899] RIP: 0010:memcmp+0xb/0x29
    [12579.365921] Call Trace:
    [12579.365927] get_mst_branch_device_by_guid_helper+0x22/0x64
    [12579.365930] drm_dp_mst_up_req_work+0x137/0x416
    [12579.365933] process_one_work+0x1d0/0x419
    [12579.365935] worker_thread+0x11a/0x289
    [12579.365938] kthread+0x13e/0x14f
    [12579.365941] ? process_one_work+0x419/0x419
    [12579.365943] ? kthread_blkcg+0x31/0x31
    [12579.365946] ret_from_fork+0x1f/0x30
    
    As get_mst_branch_device_by_guid_helper() is recursive, moving condition
    to the first line allow to remove a similar one for step over of NULL elements
    inside a loop.
    
    Fixes: 5e93b8208d3c ("drm/dp/mst: move GUID storage from mgr, port to only mst branch")
    Cc: <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Lukasz Majczak <lma@semihalf.com>
    Reviewed-by: Radoslaw Biernacki <rad@chromium.org>
    Signed-off-by: Manasi Navare <navaremanasi@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230922063410.23626-1-lma@semihalf.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 024251bab25daf97a3599c985dd04117b9c60d6b
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Oct 20 10:26:29 2023 -0500

    drm/amd: Disable ASPM for VI w/ all Intel systems
    
    commit 64ffd2f1d00c6235dabe9704bbb0d9ce3e28147f upstream.
    
    Originally we were quirking ASPM disabled specifically for VI when
    used with Alder Lake, but it appears to have problems with Rocket
    Lake as well.
    
    Like we've done in the case of dpm for newer platforms, disable
    ASPM for all Intel systems.
    
    Cc: stable@vger.kernel.org # 5.15+
    Fixes: 0064b0ce85bb ("drm/amd/pm: enable ASPM by default")
    Reported-and-tested-by: Paolo Gentili <paolo.gentili@canonical.com>
    Closes: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/2036742
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eded5f5261b8ff14417f9441934a1865b379b7db
Author: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
Date:   Fri Oct 20 08:24:41 2023 -0700

    drm/i915/pmu: Check if pmu is closed before stopping event
    
    commit 4cbed7702eb775cca22fff6827a549092cb59f61 upstream.
    
    When the driver unbinds, pmu is unregistered and i915->uabi_engines is
    set to RB_ROOT. Due to this, when i915 PMU tries to stop the engine
    events, it issues a warn_on because engine lookup fails.
    
    All perf hooks are taking care of this using a pmu->closed flag that is
    set when PMU unregisters. The stop event seems to have been left out.
    
    Check for pmu->closed in pmu_event_stop as well.
    
    Based on discussion here -
    https://patchwork.freedesktop.org/patch/492079/?series=105790&rev=2
    
    v2: s/is/if/ in commit title
    v3: Add fixes tag and cc stable
    
    Cc: <stable@vger.kernel.org> # v5.11+
    Fixes: b00bccb3f0bb ("drm/i915/pmu: Handle PCI unbind")
    Signed-off-by: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Signed-off-by: Andi Shyti <andi.shyti@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231020152441.3764850-1-umesh.nerlige.ramappa@intel.com
    (cherry picked from commit 31f6a06f0c543b43a38fab10f39e5fc45ad62aa2)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f46c177c03dbc9f17b4a7d61a1d925090217676
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Oct 14 21:34:40 2023 -0400

    nfsd: lock_rename() needs both directories to live on the same fs
    
    commit 1aee9158bc978f91701c5992e395efbc6da2de3c upstream.
    
    ... checking that after lock_rename() is too late.  Incidentally,
    NFSv2 had no nfserr_xdev...
    
    Fixes: aa387d6ce153 "nfsd: fix EXDEV checking in rename"
    Cc: stable@vger.kernel.org # v3.9+
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Acked-by: Chuck Lever <chuck.lever@oracle.com>
    Tested-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3262ff5826e1b0716676b7b8a14b9de1764d4df6
Author: Liam R. Howlett <Liam.Howlett@oracle.com>
Date:   Thu Oct 12 11:52:33 2023 -0400

    maple_tree: add GFP_KERNEL to allocations in mas_expected_entries()
    
    commit 099d7439ce03d0e7bc8f0c3d7878b562f3a48d3d upstream.
    
    Users complained about OOM errors during fork without triggering
    compaction.  This can be fixed by modifying the flags used in
    mas_expected_entries() so that the compaction will be triggered in low
    memory situations.  Since mas_expected_entries() is only used during fork,
    the extra argument does not need to be passed through.
    
    Additionally, the two test_maple_tree test cases and one benchmark test
    were altered to use the correct locking type so that allocations would not
    trigger sleeping and thus fail.  Testing was completed with lockdep atomic
    sleep detection.
    
    The additional locking change requires rwsem support additions to the
    tools/ directory through the use of pthreads pthread_rwlock_t.  With this
    change test_maple_tree works in userspace, as a module, and in-kernel.
    
    Users may notice that the system gave up early on attempting to start new
    processes instead of attempting to reclaim memory.
    
    Link: https://lkml.kernel.org/r/20230915093243epcms1p46fa00bbac1ab7b7dca94acb66c44c456@epcms1p4
    Link: https://lkml.kernel.org/r/20231012155233.2272446-1-Liam.Howlett@oracle.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Reviewed-by: Peng Zhang <zhangpeng.00@bytedance.com>
    Cc: <jason.sim@samsung.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1b2750de12382803f255ef7e5b40de16030e309
Author: Rik van Riel <riel@surriel.com>
Date:   Thu Oct 5 23:59:07 2023 -0400

    hugetlbfs: extend hugetlb_vma_lock to private VMAs
    
    commit bf4916922c60f43efaa329744b3eef539aa6a2b2 upstream.
    
    Extend the locking scheme used to protect shared hugetlb mappings from
    truncate vs page fault races, in order to protect private hugetlb mappings
    (with resv_map) against MADV_DONTNEED.
    
    Add a read-write semaphore to the resv_map data structure, and use that
    from the hugetlb_vma_(un)lock_* functions, in preparation for closing the
    race between MADV_DONTNEED and page faults.
    
    Link: https://lkml.kernel.org/r/20231006040020.3677377-3-riel@surriel.com
    Fixes: 04ada095dcfc ("hugetlb: don't delete vma_lock in hugetlb MADV_DONTNEED processing")
    Signed-off-by: Rik van Riel <riel@surriel.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Muchun Song <muchun.song@linux.dev>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9b066f6920d5e9d68258d0c708bef709406918c
Author: Gregory Price <gourry.memverge@gmail.com>
Date:   Tue Oct 3 10:48:56 2023 -0400

    mm/migrate: fix do_pages_move for compat pointers
    
    commit 229e2253766c7cdfe024f1fe280020cc4711087c upstream.
    
    do_pages_move does not handle compat pointers for the page list.
    correctly.  Add in_compat_syscall check and appropriate get_user fetch
    when iterating the page list.
    
    It makes the syscall in compat mode (32-bit userspace, 64-bit kernel)
    work the same way as the native 32-bit syscall again, restoring the
    behavior before my broken commit 5b1b561ba73c ("mm: simplify
    compat_sys_move_pages").
    
    More specifically, my patch moved the parsing of the 'pages' array from
    the main entry point into do_pages_stat(), which left the syscall
    working correctly for the 'stat' operation (nodes = NULL), while the
    'move' operation (nodes != NULL) is now missing the conversion and
    interprets 'pages' as an array of 64-bit pointers instead of the
    intended 32-bit userspace pointers.
    
    It is possible that nobody noticed this bug because the few
    applications that actually call move_pages are unlikely to run in
    compat mode because of their large memory requirements, but this
    clearly fixes a user-visible regression and should have been caught by
    ltp.
    
    Link: https://lkml.kernel.org/r/20231003144857.752952-1-gregory.price@memverge.com
    Fixes: 5b1b561ba73c ("mm: simplify compat_sys_move_pages")
    Signed-off-by: Gregory Price <gregory.price@memverge.com>
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Co-developed-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6fbf025e3cf41b255b34bccc9a963c4eeb8c352
Author: Kemeng Shi <shikemeng@huaweicloud.com>
Date:   Wed Sep 27 17:44:01 2023 +0800

    mm/page_alloc: correct start page when guard page debug is enabled
    
    commit 61e21cf2d2c3cc5e60e8d0a62a77e250fccda62c upstream.
    
    When guard page debug is enabled and set_page_guard returns success, we
    miss to forward page to point to start of next split range and we will do
    split unexpectedly in page range without target page.  Move start page
    update before set_page_guard to fix this.
    
    As we split to wrong target page, then splited pages are not able to merge
    back to original order when target page is put back and splited pages
    except target page is not usable.  To be specific:
    
    Consider target page is the third page in buddy page with order 2.
    | buddy-2 | Page | Target | Page |
    
    After break down to target page, we will only set first page to Guard
    because of bug.
    | Guard   | Page | Target | Page |
    
    When we try put_page_back_buddy with target page, the buddy page of target
    if neither guard nor buddy, Then it's not able to construct original page
    with order 2
    | Guard | Page | buddy-0 | Page |
    
    All pages except target page is not in free list and is not usable.
    
    Link: https://lkml.kernel.org/r/20230927094401.68205-1-shikemeng@huaweicloud.com
    Fixes: 06be6ff3d2ec ("mm,hwpoison: rework soft offline for free pages")
    Signed-off-by: Kemeng Shi <shikemeng@huaweicloud.com>
    Acked-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0aa7b24c068c491641d9c41ec5134674a203fecb
Author: Rik van Riel <riel@surriel.com>
Date:   Thu Oct 5 23:59:06 2023 -0400

    hugetlbfs: clear resv_map pointer if mmap fails
    
    commit 92fe9dcbe4e109a7ce6bab3e452210a35b0ab493 upstream.
    
    Patch series "hugetlbfs: close race between MADV_DONTNEED and page fault", v7.
    
    Malloc libraries, like jemalloc and tcalloc, take decisions on when to
    call madvise independently from the code in the main application.
    
    This sometimes results in the application page faulting on an address,
    right after the malloc library has shot down the backing memory with
    MADV_DONTNEED.
    
    Usually this is harmless, because we always have some 4kB pages sitting
    around to satisfy a page fault.  However, with hugetlbfs systems often
    allocate only the exact number of huge pages that the application wants.
    
    Due to TLB batching, hugetlbfs MADV_DONTNEED will free pages outside of
    any lock taken on the page fault path, which can open up the following
    race condition:
    
           CPU 1                            CPU 2
    
           MADV_DONTNEED
           unmap page
           shoot down TLB entry
                                           page fault
                                           fail to allocate a huge page
                                           killed with SIGBUS
           free page
    
    Fix that race by extending the hugetlb_vma_lock locking scheme to also
    cover private hugetlb mappings (with resv_map), and pulling the locking
    from __unmap_hugepage_final_range into helper functions called from
    zap_page_range_single.  This ensures page faults stay locked out of the
    MADV_DONTNEED VMA until the huge pages have actually been freed.
    
    
    This patch (of 3):
    
    Hugetlbfs leaves a dangling pointer in the VMA if mmap fails.  This has
    not been a problem so far, but other code in this patch series tries to
    follow that pointer.
    
    Link: https://lkml.kernel.org/r/20231006040020.3677377-1-riel@surriel.com
    Link: https://lkml.kernel.org/r/20231006040020.3677377-2-riel@surriel.com
    Fixes: 04ada095dcfc ("hugetlb: don't delete vma_lock in hugetlb MADV_DONTNEED processing")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Rik van Riel <riel@surriel.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Muchun Song <muchun.song@linux.dev>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38d0d1c44255dee222f455ee4026b5a57e9c0208
Author: Sebastian Ott <sebott@redhat.com>
Date:   Fri Sep 29 10:19:41 2023 -0700

    mm: fix vm_brk_flags() to not bail out while holding lock
    
    commit e0f81ab1e4f42ffece6440dc78f583eb352b9a71 upstream.
    
    Calling vm_brk_flags() with flags set other than VM_EXEC will exit the
    function without releasing the mmap_write_lock.
    
    Just do the sanity check before the lock is acquired.  This doesn't fix an
    actual issue since no caller sets a flag other than VM_EXEC.
    
    Link: https://lkml.kernel.org/r/20230929171937.work.697-kees@kernel.org
    Fixes: 2e7ce7d354f2 ("mm/mmap: change do_brk_flags() to expand existing VMA and add do_brk_munmap()")
    Signed-off-by: Sebastian Ott <sebott@redhat.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Cc: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38930ec7670ace4ec2d63839706f2d885e8e36d4
Author: Christopher Obbard <chris.obbard@collabora.com>
Date:   Fri Oct 13 12:47:27 2023 +0100

    arm64: dts: rockchip: Fix i2s0 pin conflict on ROCK Pi 4 boards
    
    commit 8cd79b729e746cb167f1563d015a93fc0a079899 upstream.
    
    Commit 91419ae0420f ("arm64: dts: rockchip: use BCLK to GPIO switch on
    rk3399") modified i2s0 to switch the corresponding pins off when idle.
    For the ROCK Pi 4 boards, this means that i2s0 has the following pinctrl
    setting:
    
        pinctrl-names = "bclk_on", "bclk_off";
        pinctrl-0 = <&i2s0_2ch_bus>;
        pinctrl-1 = <&i2s0_8ch_bus_bclk_off>;
    
    Due to this change, i2s0 fails to probe on my Radxa ROCK 4SE and ROCK Pi
    4B boards:
    
        rockchip-pinctrl pinctrl: pin gpio3-29 already requested by leds; cannot claim for ff880000.i2s
        rockchip-pinctrl pinctrl: pin-125 (ff880000.i2s) status -22
        rockchip-pinctrl pinctrl: could not request pin 125 (gpio3-29) from group i2s0-8ch-bus-bclk-off  on device rockchip-pinctrl
        rockchip-i2s ff880000.i2s: Error applying setting, reverse things back
        rockchip-i2s ff880000.i2s: bclk disable failed -22
    
    A pin requested for i2s0_8ch_bus_bclk_off has already been requested by
    user_led2, so whichever driver probes first will have the pin allocated.
    
    The hardware uses 2-channel i2s so fix this error by setting pinctl-1 to
    i2s0_2ch_bus_bclk_off which doesn't contain the pin allocated to user_led2.
    
    I checked the schematics for all Radxa boards based on ROCK Pi 4 and this
    change is compatible with all boards.
    
    Fixes: 91419ae0420f ("arm64: dts: rockchip: use BCLK to GPIO switch on rk3399")
    Signed-off-by: Christopher Obbard <chris.obbard@collabora.com>
    Link: https://lore.kernel.org/r/20231013114737.494410-3-chris.obbard@collabora.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d72254c2b7a94c696667d7ef4943521e2586a75
Author: Christopher Obbard <chris.obbard@collabora.com>
Date:   Fri Oct 13 12:47:26 2023 +0100

    arm64: dts: rockchip: Add i2s0-2ch-bus-bclk-off pins to RK3399
    
    commit 3975e72b164dc8347a28dd0d5f11b346af534635 upstream.
    
    Commit 0efaf8078393 ("arm64: dts: rockchip: add i2s0-2ch-bus pins on
    rk3399") introduced a pinctl for i2s0 in two-channel mode. Commit
    91419ae0420f ("arm64: dts: rockchip: use BCLK to GPIO switch on rk3399")
    modified i2s0 to switch the corresponding pins off when idle.
    
    Although an idle pinctrl node was added for i2s0 in 8-channel mode, a
    similar idle pinctrl node for i2s0 in 2-channel mode was not added. Add
    it.
    
    Fixes: 91419ae0420f ("arm64: dts: rockchip: use BCLK to GPIO switch on rk3399")
    Signed-off-by: Christopher Obbard <chris.obbard@collabora.com>
    Link: https://lore.kernel.org/r/20231013114737.494410-2-chris.obbard@collabora.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08e6b680f2645b96c5a85045001526c6ef5db6d9
Author: Eric Auger <eric.auger@redhat.com>
Date:   Wed Sep 27 16:05:44 2023 +0200

    vhost: Allow null msg.size on VHOST_IOTLB_INVALIDATE
    
    commit ca50ec377c2e94b0a9f8735de2856cd0f13beab4 upstream.
    
    Commit e2ae38cf3d91 ("vhost: fix hung thread due to erroneous iotlb
    entries") Forbade vhost iotlb msg with null size to prevent entries
    with size = start = 0 and last = ULONG_MAX to end up in the iotlb.
    
    Then commit 95932ab2ea07 ("vhost: allow batching hint without size")
    only applied the check for VHOST_IOTLB_UPDATE and VHOST_IOTLB_INVALIDATE
    message types to fix a regression observed with batching hit.
    
    Still, the introduction of that check introduced a regression for
    some users attempting to invalidate the whole ULONG_MAX range by
    setting the size to 0. This is the case with qemu/smmuv3/vhost
    integration which does not work anymore. It Looks safe to partially
    revert the original commit and allow VHOST_IOTLB_INVALIDATE messages
    with null size. vhost_iotlb_del_range() will compute a correct end
    iova. Same for vhost_vdpa_iotlb_unmap().
    
    Signed-off-by: Eric Auger <eric.auger@redhat.com>
    Fixes: e2ae38cf3d91 ("vhost: fix hung thread due to erroneous iotlb entries")
    Cc: stable@vger.kernel.org # v5.17+
    Acked-by: Jason Wang <jasowang@redhat.com>
    Message-Id: <20230927140544.205088-1-eric.auger@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f14ded0f16596a77364f899eb5aeb3e90966218
Author: Alexandru Matei <alexandru.matei@uipath.com>
Date:   Tue Oct 24 22:17:42 2023 +0300

    vsock/virtio: initialize the_virtio_vsock before using VQs
    
    commit 53b08c4985158430fd6d035fb49443bada535210 upstream.
    
    Once VQs are filled with empty buffers and we kick the host, it can send
    connection requests. If the_virtio_vsock is not initialized before,
    replies are silently dropped and do not reach the host.
    
    virtio_transport_send_pkt() can queue packets once the_virtio_vsock is
    set, but they won't be processed until vsock->tx_run is set to true. We
    queue vsock->send_pkt_work when initialization finishes to send those
    packets queued earlier.
    
    Fixes: 0deab087b16a ("vsock/virtio: use RCU to avoid use-after-free on the_virtio_vsock")
    Signed-off-by: Alexandru Matei <alexandru.matei@uipath.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20231024191742.14259-1-alexandru.matei@uipath.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 534487cc3eb82a660704d554b9d5dd12aa1cc00a
Author: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
Date:   Tue Oct 10 11:11:18 2023 +0800

    virtio_pci: fix the common cfg map size
    
    commit 061b39fdfe7fd98946e67637213bcbb10a318cca upstream.
    
    The function vp_modern_map_capability() takes the size parameter,
    which corresponds to the size of virtio_pci_common_cfg. As a result,
    this indicates the size of memory area to map.
    
    Now the size is the size of virtio_pci_common_cfg, but some feature(such
    as the _F_RING_RESET) needs the virtio_pci_modern_common_cfg, so this
    commit changes the size to the size of virtio_pci_modern_common_cfg.
    
    Cc: stable@vger.kernel.org
    Fixes: 0b50cece0b78 ("virtio_pci: introduce helper to get/set queue reset")
    Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Message-Id: <20231010031120.81272-3-xuanzhuo@linux.alibaba.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86f467d3582e0300d4574aec1cf6fb1d86dfd361
Author: zhenwei pi <pizhenwei@bytedance.com>
Date:   Sat Oct 7 14:43:09 2023 +0800

    virtio-crypto: handle config changed by work queue
    
    commit fa2e6947aa8844f25f5bad0d8cd1a541d9bc83eb upstream.
    
    MST pointed out: config change callback is also handled incorrectly
    in this driver, it takes a mutex from interrupt context.
    
    Handle config changed by work queue instead.
    
    Cc: stable@vger.kernel.org
    Cc: Gonglei (Arei) <arei.gonglei@huawei.com>
    Cc: Halil Pasic <pasic@linux.ibm.com>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: zhenwei pi <pizhenwei@bytedance.com>
    Message-Id: <20231007064309.844889-1-pizhenwei@bytedance.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9d4a1ea6709477ed21d71d38d79cc0378a5003b
Author: Maximilian Heyne <mheyne@amazon.de>
Date:   Mon Sep 11 09:03:29 2023 +0000

    virtio-mmio: fix memory leak of vm_dev
    
    commit fab7f259227b8f70aa6d54e1de1a1f5f4729041c upstream.
    
    With the recent removal of vm_dev from devres its memory is only freed
    via the callback virtio_mmio_release_dev. However, this only takes
    effect after device_add is called by register_virtio_device. Until then
    it's an unmanaged resource and must be explicitly freed on error exit.
    
    This bug was discovered and resolved using Coverity Static Analysis
    Security Testing (SAST) by Synopsys, Inc.
    
    Cc: stable@vger.kernel.org
    Fixes: 55c91fedd03d ("virtio-mmio: don't break lifecycle of vm_dev")
    Signed-off-by: Maximilian Heyne <mheyne@amazon.de>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Tested-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Message-Id: <20230911090328.40538-1-mheyne@amazon.de>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Wolfram Sang <wsa+renesas@sang-engineering.com>

commit 19b30a879065787cd6b56dc15b25a8880d8018de
Author: Gavin Shan <gshan@redhat.com>
Date:   Thu Aug 31 11:10:07 2023 +1000

    virtio_balloon: Fix endless deflation and inflation on arm64
    
    commit 07622bd415639e9709579f400afd19e7e9866e5e upstream.
    
    The deflation request to the target, which isn't unaligned to the
    guest page size causes endless deflation and inflation actions. For
    example, we receive the flooding QMP events for the changes on memory
    balloon's size after a deflation request to the unaligned target is
    sent for the ARM64 guest, where we have 64KB base page size.
    
      /home/gavin/sandbox/qemu.main/build/qemu-system-aarch64      \
      -accel kvm -machine virt,gic-version=host -cpu host          \
      -smp maxcpus=8,cpus=8,sockets=2,clusters=2,cores=2,threads=1 \
      -m 1024M,slots=16,maxmem=64G                                 \
      -object memory-backend-ram,id=mem0,size=512M                 \
      -object memory-backend-ram,id=mem1,size=512M                 \
      -numa node,nodeid=0,memdev=mem0,cpus=0-3                     \
      -numa node,nodeid=1,memdev=mem1,cpus=4-7                     \
        :                                                          \
      -device virtio-balloon-pci,id=balloon0,bus=pcie.10
    
      { "execute" : "balloon", "arguments": { "value" : 1073672192 } }
      {"return": {}}
      {"timestamp": {"seconds": 1693272173, "microseconds": 88667},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272174, "microseconds": 89704},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272175, "microseconds": 90819},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272176, "microseconds": 91961},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272177, "microseconds": 93040},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073676288}}
      {"timestamp": {"seconds": 1693272178, "microseconds": 94117},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073676288}}
      {"timestamp": {"seconds": 1693272179, "microseconds": 95337},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272180, "microseconds": 96615},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073676288}}
      {"timestamp": {"seconds": 1693272181, "microseconds": 97626},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272182, "microseconds": 98693},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073676288}}
      {"timestamp": {"seconds": 1693272183, "microseconds": 99698},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272184, "microseconds": 100727},  \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272185, "microseconds": 90430},   \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      {"timestamp": {"seconds": 1693272186, "microseconds": 102999},  \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073676288}}
         :
      <The similar QMP events repeat>
    
    Fix it by aligning the target up to the guest page size, 64KB in this
    specific case. With this applied, no flooding QMP events are observed
    and the memory balloon's size can be stablizied to 0x3ffe0000 soon
    after the deflation request is sent.
    
      { "execute" : "balloon", "arguments": { "value" : 1073672192 } }
      {"return": {}}
      {"timestamp": {"seconds": 1693273328, "microseconds": 793075},  \
       "event": "BALLOON_CHANGE", "data": {"actual": 1073610752}}
      { "execute" : "query-balloon" }
      {"return": {"actual": 1073610752}}
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gavin Shan <gshan@redhat.com>
    Tested-by: Zhenyu Zhang <zhenyzha@redhat.com>
    Message-Id: <20230831011007.1032822-1-gshan@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bede8b4b5175017094da8694fa9da9fda86dd075
Author: Rodríguez Barbarin, José Javier <JoseJavier.Rodriguez@duagon.com>
Date:   Tue Apr 11 10:33:29 2023 +0200

    mcb-lpc: Reallocate memory region to avoid memory overlapping
    
    [ Upstream commit 2025b2ca8004c04861903d076c67a73a0ec6dfca ]
    
    mcb-lpc requests a fixed-size memory region to parse the chameleon
    table, however, if the chameleon table is smaller that the allocated
    region, it could overlap with the IP Cores' memory regions.
    
    After parsing the chameleon table, drop/reallocate the memory region
    with the actual chameleon table size.
    
    Co-developed-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Signed-off-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Signed-off-by: Javier Rodriguez <josejavier.rodriguez@duagon.com>
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Link: https://lore.kernel.org/r/20230411083329.4506-4-jth@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9efc3efe4503187ba554f276be6b2c4730ace53
Author: Rodríguez Barbarin, José Javier <JoseJavier.Rodriguez@duagon.com>
Date:   Tue Apr 11 10:33:27 2023 +0200

    mcb: Return actual parsed size when reading chameleon table
    
    [ Upstream commit a889c276d33d333ae96697510f33533f6e9d9591 ]
    
    The function chameleon_parse_cells() returns the number of cells
    parsed which has an undetermined size. This return value is only
    used for error checking but the number of cells is never used.
    
    Change return value to be number of bytes parsed to allow for
    memory management improvements.
    
    Co-developed-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Signed-off-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Signed-off-by: Javier Rodriguez <josejavier.rodriguez@duagon.com>
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Link: https://lore.kernel.org/r/20230411083329.4506-2-jth@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e58ab834e48f215e1fcc548e0b480084ab04485e
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Oct 13 16:57:05 2023 +0200

    pinctrl: qcom: lpass-lpi: fix concurrent register updates
    
    [ Upstream commit c8befdc411e5fd1bf95a13e8744c8ca79b412bee ]
    
    The Qualcomm LPASS LPI pin controller driver uses one lock for guarding
    Read-Modify-Write code for slew rate registers.  However the pin
    configuration and muxing registers have exactly the same RMW code but
    are not protected.
    
    Pin controller framework does not provide locking here, thus it is
    possible to trigger simultaneous change of pin configuration registers
    resulting in non-atomic changes.
    
    Protect from concurrent access by re-using the same lock used to cover
    the slew rate register.  Using the same lock instead of adding second
    one will make more sense, once we add support for newer Qualcomm SoC,
    where slew rate is configured in the same register as pin
    configuration/muxing.
    
    Fixes: 6e261d1090d6 ("pinctrl: qcom: Add sm8250 lpass lpi pinctrl driver")
    Cc: stable@vger.kernel.org
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20231013145705.219954-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 018b11ecba765e8678f8aa4977a107800eb5c83b
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:56 2023 +0200

    ASoC: codecs: wcd938x: fix runtime PM imbalance on remove
    
    [ Upstream commit 3ebebb2c1eca92a15107b2d7aeff34196fd9e217 ]
    
    Make sure to balance the runtime PM operations, including the disable
    count, on driver unbind.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-6-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 508c3353fed810b671d134748b0d7b6bcd7108f5
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:55 2023 +0200

    ASoC: codecs: wcd938x: fix regulator leaks on probe errors
    
    [ Upstream commit 69a026a2357ee69983690d07976de44ef26ee38a ]
    
    Make sure to disable and free the regulators on probe errors and on
    driver unbind.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-5-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 877fc75d2cf746323c8432622675ff0f79de77fd
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Tue Apr 18 09:46:30 2023 +0200

    ASoC: codecs: wcd938x: Simplify with dev_err_probe
    
    [ Upstream commit 60ba2fda5280528e70fa26b44e36d1530f6d1d7e ]
    
    Replace dev_err() in probe() path with dev_err_probe() to:
    1. Make code a bit simpler and easier to read,
    2. Do not print messages on deferred probe.
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20230418074630.8681-4-krzysztof.kozlowski@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: 69a026a2357e ("ASoC: codecs: wcd938x: fix regulator leaks on probe errors")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 629ba75200a103d387bb6eb6d7b3986bd6c95262
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 15 16:05:48 2023 +0100

    ASoC: codecs: wcd938x: Convert to platform remove callback returning void
    
    [ Upstream commit 7cd686a59b36860511965882dad1f76df2c25766 ]
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Takashi Iwai <tiwai@suse.de>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/20230315150745.67084-57-u.kleine-koenig@pengutronix.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: 69a026a2357e ("ASoC: codecs: wcd938x: fix regulator leaks on probe errors")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1fae817d3ecb23dfa75e3a5ece8f842902f56aab
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Sep 13 13:29:21 2023 +0200

    mmc: core: Fix error propagation for some ioctl commands
    
    [ Upstream commit f19c5a73e6f78d69efce66cfdce31148c76a61a6 ]
    
    Userspace has currently no way of checking the internal R1 response error
    bits for some commands. This is a problem for some commands, like RPMB for
    example. Typically, we may detect that the busy completion has successfully
    ended, while in fact the card did not complete the requested operation.
    
    To fix the problem, let's always poll with CMD13 for these commands and
    during the polling, let's also aggregate the R1 response bits. Before
    completing the ioctl request, let's propagate the R1 response bits too.
    
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Co-developed-by: Christian Loehle <christian.loehle@arm.com>
    Signed-off-by: Christian Loehle <christian.loehle@arm.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230913112921.553019-1-ulf.hansson@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 719c01f28130261ca9fdc274152c3a6c8ae22dc5
Author: Christian Loehle <CLoehle@hyperstone.com>
Date:   Thu May 25 09:56:04 2023 +0000

    mmc: block: ioctl: do write error check for spi
    
    [ Upstream commit 568898cbc8b570311b3b94a3202b8233f4168144 ]
    
    SPI doesn't have the usual PROG path we can check for error bits
    after moving back to TRAN. Instead it holds the line LOW until
    completion. We can then check if the card shows any errors or
    is in IDLE state, indicating the line is no longer LOW because
    the card was reset.
    
    Signed-off-by: Christian Loehle <cloehle@hyperstone.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/55920f880c9742f486f64aa44e25508e@hyperstone.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: f19c5a73e6f7 ("mmc: core: Fix error propagation for some ioctl commands")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 651e66d20b597d5d3bfbffb133a54e08e7174507
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Mon Feb 13 14:37:07 2023 +0100

    mmc: core: Align to common busy polling behaviour for mmc ioctls
    
    [ Upstream commit 51f5b3056790bc0518e49587996f1e6f3058cca9 ]
    
    Let's align to the common busy polling behaviour for mmc ioctls, by
    updating the below two corresponding parts, that comes into play when using
    an R1B response for a command.
    
    *) A command with an R1B response should be prepared by calling
    mmc_prepare_busy_cmd(), which make us respects the host's busy timeout
    constraints.
    **) When an R1B response is being used and the host also supports HW busy
    detection, we should skip to poll for busy completion.
    
    Suggested-by: Christian Loehle <cloehle@hyperstone.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Christian Loehle <cloehle@hyperstone.com>
    Link: https://lore.kernel.org/r/20230213133707.27857-1-ulf.hansson@linaro.org
    Stable-dep-of: f19c5a73e6f7 ("mmc: core: Fix error propagation for some ioctl commands")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3466ce4f42e135e6549e5a32b08d69d09417244
Author: Roman Kagan <rkagan@amazon.de>
Date:   Thu May 4 14:00:42 2023 +0200

    KVM: x86/pmu: Truncate counter value to allowed width on write
    
    [ Upstream commit b29a2acd36dd7a33c63f260df738fb96baa3d4f8 ]
    
    Performance counters are defined to have width less than 64 bits.  The
    vPMU code maintains the counters in u64 variables but assumes the value
    to fit within the defined width.  However, for Intel non-full-width
    counters (MSR_IA32_PERFCTRx) the value receieved from the guest is
    truncated to 32 bits and then sign-extended to full 64 bits.  If a
    negative value is set, it's sign-extended to 64 bits, but then in
    kvm_pmu_incr_counter() it's incremented, truncated, and compared to the
    previous value for overflow detection.
    
    That previous value is not truncated, so it always evaluates bigger than
    the truncated new one, and a PMI is injected.  If the PMI handler writes
    a negative counter value itself, the vCPU never quits the PMI loop.
    
    Turns out that Linux PMI handler actually does write the counter with
    the value just read with RDPMC, so when no full-width support is exposed
    via MSR_IA32_PERF_CAPABILITIES, and the guest initializes the counter to
    a negative value, it locks up.
    
    This has been observed in the field, for example, when the guest configures
    atop to use perfevents and runs two instances of it simultaneously.
    
    To address the problem, maintain the invariant that the counter value
    always fits in the defined bit width, by truncating the received value
    in the respective set_msr methods.  For better readability, factor the
    out into a helper function, pmc_write_counter(), shared by vmx and svm
    parts.
    
    Fixes: 9cd803d496e7 ("KVM: x86: Update vPMCs when retiring instructions")
    Cc: stable@vger.kernel.org
    Signed-off-by: Roman Kagan <rkagan@amazon.de>
    Link: https://lore.kernel.org/all/20230504120042.785651-1-rkagan@amazon.de
    Tested-by: Like Xu <likexu@tencent.com>
    [sean: tweak changelog, s/set/write in the helper]
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

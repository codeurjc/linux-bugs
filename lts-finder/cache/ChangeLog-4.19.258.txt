commit a3547518183ffad51cfe216b9f8b50b1182a1667
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Sep 15 12:17:06 2022 +0200

    Linux 4.19.258
    
    Link: https://lore.kernel.org/r/20220913140348.835121645@linuxfoundation.org
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcab4d551a3d15bdf8efaac7b61420219bd154b6
Author: NeilBrown <neilb@suse.de>
Date:   Mon Sep 12 09:00:52 2022 +1000

    SUNRPC: use _bh spinlocking on ->transport_lock
    
    Prior to Linux 5.3, ->transport_lock in sunrpc required the _bh style
    spinlocks (when not called from a bottom-half handler).
    
    When upstream 3848e96edf4788f772d83990022fa7023a233d83 was backported to
    stable kernels, the spin_lock/unlock calls should have been changed to
    the _bh version, but this wasn't noted in the patch and didn't happen.
    
    So convert these lock/unlock calls to the _bh versions.
    
    This patch is required for any stable kernel prior to 5.3 to which the
    above mentioned patch was backported.  Namely 4.9.y, 4.14.y, 4.19.y.
    
    Signed-off-by: NeilBrown <neilb@suse.de>
    Reported-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Reviewed-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Tested-by: Eugeniu Rosca <erosca@de.adit-jv.com>

commit 14bf8fe67a6643b7610e0a88cfb1442cad073b89
Author: Yang Ling <gnaygnil@gmail.com>
Date:   Tue Aug 23 19:17:25 2022 +0800

    MIPS: loongson32: ls1c: Fix hang during startup
    
    [ Upstream commit 35508d2424097f9b6a1a17aac94f702767035616 ]
    
    The RTCCTRL reg of LS1C is obselete.
    Writing this reg will cause system hang.
    
    Fixes: 60219c563c9b6 ("MIPS: Add RTC support for Loongson1C board")
    Signed-off-by: Yang Ling <gnaygnil@gmail.com>
    Tested-by: Keguang Zhang <keguang.zhang@gmail.com>
    Acked-by: Keguang Zhang <keguang.zhang@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7d4745b033d580c1d547cdd18c6689486889784
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Aug 19 13:01:35 2022 +0200

    x86/nospec: Fix i386 RSB stuffing
    
    commit 332924973725e8cdcc783c175f68cf7e162cb9e5 upstream.
    
    Turns out that i386 doesn't unconditionally have LFENCE, as such the
    loop in __FILL_RETURN_BUFFER isn't actually speculation safe on such
    chips.
    
    Fixes: ba6e31af2be9 ("x86/speculation: Add LFENCE to RSB fill sequence")
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/Yv9tj9vbQ9nNlXoY@worktop.programming.kicks-ass.net
    [bwh: Backported to 4.19/5.4:
     - __FILL_RETURN_BUFFER takes an sp parameter
     - Open-code __FILL_RETURN_SLOT]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbe0a6d130aef467ecf2ec184b3baae695b07e1f
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Sep 6 15:49:13 2022 +0200

    usb: dwc3: qcom: fix use-after-free on runtime-PM wakeup
    
    From: Johan Hovold <johan+linaro@kernel.org>
    
    commit  a872ab303d5ddd4c965f9cd868677781a33ce35a upstream.
    
    The Qualcomm dwc3 runtime-PM implementation checks the xhci
    platform-device pointer in the wakeup-interrupt handler to determine
    whether the controller is in host mode and if so triggers a resume.
    
    After a role switch in OTG mode the xhci platform-device would have been
    freed and the next wakeup from runtime suspend would access the freed
    memory.
    
    Note that role switching is executed from a freezable workqueue, which
    guarantees that the pointer is stable during suspend.
    
    Also note that runtime PM has been broken since commit 2664deb09306
    ("usb: dwc3: qcom: Honor wakeup enabled/disabled state"), which
    incidentally also prevents this issue from being triggered.
    
    Fixes: a4333c3a6ba9 ("usb: dwc3: Add Qualcomm DWC3 glue driver")
    Cc: stable@vger.kernel.org      # 4.18
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20220804151001.23612-5-johan+linaro@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [ johan: adjust context for 5.4 ]
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83dd58954cbbaa12cd224583a01b56d3b8f4e919
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Sep 6 15:49:15 2022 +0200

    USB: serial: ch341: fix disabled rx timer on older devices
    
    commit 41ca302a697b64a3dab4676e01d0d11bb184737d upstream.
    
    At least one older CH341 appears to have the RX timer enable bit
    inverted so that setting it disables the RX timer and prevents the FIFO
    from emptying until it is full.
    
    Only set the RX timer enable bit for devices with version newer than
    0x27 (even though this probably affects all pre-0x30 devices).
    
    Reported-by: Jonathan Woithe <jwoithe@just42.net>
    Tested-by: Jonathan Woithe <jwoithe@just42.net>
    Link: https://lore.kernel.org/r/Ys1iPTfiZRWj2gXs@marvin.atrad.com.au
    Fixes: 4e46c410e050 ("USB: serial: ch341: reinitialize chip on reconfiguration")
    Cc: stable@vger.kernel.org      # 4.10
    Signed-off-by: Johan Hovold <johan@kernel.org>
    [ johan: backport to 5.4 ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bd9834c067939fa771c6dd3c95d42f83fa49a5e
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Sep 6 15:49:14 2022 +0200

    USB: serial: ch341: fix lost character on LCR updates
    
    commit 8e83622ae7ca481c76c8fd9579877f6abae64ca2 upstream.
    
    Disable LCR updates for pre-0x30 devices which use a different (unknown)
    protocol for line control and where the current register write causes
    the next received character to be lost.
    
    Note that updating LCR using the INIT command has no effect on these
    devices either.
    
    Reported-by: Jonathan Woithe <jwoithe@just42.net>
    Tested-by: Jonathan Woithe <jwoithe@just42.net>
    Link: https://lore.kernel.org/r/Ys1iPTfiZRWj2gXs@marvin.atrad.com.au
    Fixes: 4e46c410e050 ("USB: serial: ch341: reinitialize chip on reconfiguration")
    Fixes: 55fa15b5987d ("USB: serial: ch341: fix baud rate and line-control handling")
    Cc: stable@vger.kernel.org      # 4.10
    Signed-off-by: Johan Hovold <johan@kernel.org>
    [ johan: adjust context to 4.19 ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a376e66e5d3d4da904390c84c3429f211b56c3eb
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Sep 6 15:49:12 2022 +0200

    usb: dwc3: fix PHY disable sequence
    
    From: Johan Hovold <johan+linaro@kernel.org>
    
    commit d2ac7bef95c9ead307801ccb6cb6dfbeb14247bf upstream.
    
    Generic PHYs must be powered-off before they can be tore down.
    
    Similarly, suspending legacy PHYs after having powered them off makes no
    sense.
    
    Fix the dwc3_core_exit() (e.g. called during suspend) and open-coded
    dwc3_probe() error-path sequences that got this wrong.
    
    Note that this makes dwc3_core_exit() match the dwc3_core_init() error
    path with respect to powering off the PHYs.
    
    Fixes: 03c1fd622f72 ("usb: dwc3: core: add phy cleanup for probe error handling")
    Fixes: c499ff71ff2a ("usb: dwc3: core: re-factor init and exit paths")
    Cc: stable@vger.kernel.org      # 4.8
    Reviewed-by: Andrew Halaney <ahalaney@redhat.com>
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20220804151001.23612-2-johan+linaro@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [ johan: adjust context to 4.19 ]
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5dac9b60b48ce8a3cd498c5680e8b5f0f4034461
Author: Toke Høiland-Jørgensen <toke@toke.dk>
Date:   Mon Sep 5 21:21:36 2022 +0200

    sch_sfb: Also store skb len before calling child enqueue
    
    [ Upstream commit 2f09707d0c972120bf794cfe0f0c67e2c2ddb252 ]
    
    Cong Wang noticed that the previous fix for sch_sfb accessing the queued
    skb after enqueueing it to a child qdisc was incomplete: the SFB enqueue
    function was also calling qdisc_qstats_backlog_inc() after enqueue, which
    reads the pkt len from the skb cb field. Fix this by also storing the skb
    len, and using the stored value to increment the backlog after enqueueing.
    
    Fixes: 9efd23297cca ("sch_sfb: Don't assume the skb is still around after enqueueing to child")
    Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Acked-by: Cong Wang <cong.wang@bytedance.com>
    Link: https://lore.kernel.org/r/20220905192137.965549-1-toke@toke.dk
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d941fdf910bd6da3a017627ef9c08e9f3f17c06
Author: Neal Cardwell <ncardwell@google.com>
Date:   Sat Sep 3 08:10:23 2022 -0400

    tcp: fix early ETIMEDOUT after spurious non-SACK RTO
    
    [ Upstream commit 686dc2db2a0fdc1d34b424ec2c0a735becd8d62b ]
    
    Fix a bug reported and analyzed by Nagaraj Arankal, where the handling
    of a spurious non-SACK RTO could cause a connection to fail to clear
    retrans_stamp, causing a later RTO to very prematurely time out the
    connection with ETIMEDOUT.
    
    Here is the buggy scenario, expanding upon Nagaraj Arankal's excellent
    report:
    
    (*1) Send one data packet on a non-SACK connection
    
    (*2) Because no ACK packet is received, the packet is retransmitted
         and we enter CA_Loss; but this retransmission is spurious.
    
    (*3) The ACK for the original data is received. The transmitted packet
         is acknowledged.  The TCP timestamp is before the retrans_stamp,
         so tcp_may_undo() returns true, and tcp_try_undo_loss() returns
         true without changing state to Open (because tcp_is_sack() is
         false), and tcp_process_loss() returns without calling
         tcp_try_undo_recovery().  Normally after undoing a CA_Loss
         episode, tcp_fastretrans_alert() would see that the connection
         has returned to CA_Open and fall through and call
         tcp_try_to_open(), which would set retrans_stamp to 0.  However,
         for non-SACK connections we hold the connection in CA_Loss, so do
         not fall through to call tcp_try_to_open() and do not set
         retrans_stamp to 0. So retrans_stamp is (erroneously) still
         non-zero.
    
         At this point the first "retransmission event" has passed and
         been recovered from. Any future retransmission is a completely
         new "event". However, retrans_stamp is erroneously still
         set. (And we are still in CA_Loss, which is correct.)
    
    (*4) After 16 minutes (to correspond with tcp_retries2=15), a new data
         packet is sent. Note: No data is transmitted between (*3) and
         (*4) and we disabled keep alives.
    
         The socket's timeout SHOULD be calculated from this point in
         time, but instead it's calculated from the prior "event" 16
         minutes ago (step (*2)).
    
    (*5) Because no ACK packet is received, the packet is retransmitted.
    
    (*6) At the time of the 2nd retransmission, the socket returns
         ETIMEDOUT, prematurely, because retrans_stamp is (erroneously)
         too far in the past (set at the time of (*2)).
    
    This commit fixes this bug by ensuring that we reuse in
    tcp_try_undo_loss() the same careful logic for non-SACK connections
    that we have in tcp_try_undo_recovery(). To avoid duplicating logic,
    we factor out that logic into a new
    tcp_is_non_sack_preventing_reopen() helper and call that helper from
    both undo functions.
    
    Fixes: da34ac7626b5 ("tcp: only undo on partial ACKs in CA_Loss")
    Reported-by: Nagaraj Arankal <nagaraj.p.arankal@hpe.com>
    Link: https://lore.kernel.org/all/SJ0PR84MB1847BE6C24D274C46A1B9B0EB27A9@SJ0PR84MB1847.NAMPRD84.PROD.OUTLOOK.COM/
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20220903121023.866900-1-ncardwell.kernel@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15cac0bd1f01b862f058c43a591d68a0cb48d31e
Author: Chris Mi <cmi@nvidia.com>
Date:   Mon Aug 29 12:02:28 2022 +0300

    RDMA/mlx5: Set local port to one when accessing counters
    
    [ Upstream commit 74b30b3ad5cec95d2647e796d10137438a098bc1 ]
    
    When accessing Ports Performance Counters Register (PPCNT),
    local port must be one if it is Function-Per-Port HCA that
    HCA_CAP.num_ports is 1.
    
    The offending patch can change the local port to other values
    when accessing PPCNT after enabling switchdev mode. The following
    syndrome will be printed:
    
     # cat /sys/class/infiniband/rdmap4s0f0/ports/2/counters/*
     # dmesg
     mlx5_core 0000:04:00.0: mlx5_cmd_check:756:(pid 12450): ACCESS_REG(0x805) op_mod(0x1) failed, status bad parameter(0x3), syndrome (0x1e5585)
    
    Fix it by setting local port to one for Function-Per-Port HCA.
    
    Fixes: 210b1f78076f ("IB/mlx5: When not in dual port RoCE mode, use provided port as native")
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Chris Mi <cmi@nvidia.com>
    Link: https://lore.kernel.org/r/6c5086c295c76211169e58dbd610fb0402360bab.1661763459.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f684c16971ed5e77dfa25a9ad25b5297e1f58eab
Author: David Lebrun <dlebrun@google.com>
Date:   Fri Sep 2 10:45:06 2022 +0100

    ipv6: sr: fix out-of-bounds read when setting HMAC data.
    
    [ Upstream commit 84a53580c5d2138c7361c7c3eea5b31827e63b35 ]
    
    The SRv6 layer allows defining HMAC data that can later be used to sign IPv6
    Segment Routing Headers. This configuration is realised via netlink through
    four attributes: SEG6_ATTR_HMACKEYID, SEG6_ATTR_SECRET, SEG6_ATTR_SECRETLEN and
    SEG6_ATTR_ALGID. Because the SECRETLEN attribute is decoupled from the actual
    length of the SECRET attribute, it is possible to provide invalid combinations
    (e.g., secret = "", secretlen = 64). This case is not checked in the code and
    with an appropriately crafted netlink message, an out-of-bounds read of up
    to 64 bytes (max secret length) can occur past the skb end pointer and into
    skb_shared_info:
    
    Breakpoint 1, seg6_genl_sethmac (skb=<optimized out>, info=<optimized out>) at net/ipv6/seg6.c:208
    208             memcpy(hinfo->secret, secret, slen);
    (gdb) bt
     #0  seg6_genl_sethmac (skb=<optimized out>, info=<optimized out>) at net/ipv6/seg6.c:208
     #1  0xffffffff81e012e9 in genl_family_rcv_msg_doit (skb=skb@entry=0xffff88800b1f9f00, nlh=nlh@entry=0xffff88800b1b7600,
        extack=extack@entry=0xffffc90000ba7af0, ops=ops@entry=0xffffc90000ba7a80, hdrlen=4, net=0xffffffff84237580 <init_net>, family=<optimized out>,
        family=<optimized out>) at net/netlink/genetlink.c:731
     #2  0xffffffff81e01435 in genl_family_rcv_msg (extack=0xffffc90000ba7af0, nlh=0xffff88800b1b7600, skb=0xffff88800b1f9f00,
        family=0xffffffff82fef6c0 <seg6_genl_family>) at net/netlink/genetlink.c:775
     #3  genl_rcv_msg (skb=0xffff88800b1f9f00, nlh=0xffff88800b1b7600, extack=0xffffc90000ba7af0) at net/netlink/genetlink.c:792
     #4  0xffffffff81dfffc3 in netlink_rcv_skb (skb=skb@entry=0xffff88800b1f9f00, cb=cb@entry=0xffffffff81e01350 <genl_rcv_msg>)
        at net/netlink/af_netlink.c:2501
     #5  0xffffffff81e00919 in genl_rcv (skb=0xffff88800b1f9f00) at net/netlink/genetlink.c:803
     #6  0xffffffff81dff6ae in netlink_unicast_kernel (ssk=0xffff888010eec800, skb=0xffff88800b1f9f00, sk=0xffff888004aed000)
        at net/netlink/af_netlink.c:1319
     #7  netlink_unicast (ssk=ssk@entry=0xffff888010eec800, skb=skb@entry=0xffff88800b1f9f00, portid=portid@entry=0, nonblock=<optimized out>)
        at net/netlink/af_netlink.c:1345
     #8  0xffffffff81dff9a4 in netlink_sendmsg (sock=<optimized out>, msg=0xffffc90000ba7e48, len=<optimized out>) at net/netlink/af_netlink.c:1921
    ...
    (gdb) p/x ((struct sk_buff *)0xffff88800b1f9f00)->head + ((struct sk_buff *)0xffff88800b1f9f00)->end
    $1 = 0xffff88800b1b76c0
    (gdb) p/x secret
    $2 = 0xffff88800b1b76c0
    (gdb) p slen
    $3 = 64 '@'
    
    The OOB data can then be read back from userspace by dumping HMAC state. This
    commit fixes this by ensuring SECRETLEN cannot exceed the actual length of
    SECRET.
    
    Reported-by: Lucas Leong <wmliang.tw@gmail.com>
    Tested: verified that EINVAL is correctly returned when secretlen > len(secret)
    Fixes: 4f4853dc1c9c1 ("ipv6: sr: implement API to control SR HMAC structure")
    Signed-off-by: David Lebrun <dlebrun@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c49f320e2492738d478bc427dcd54ccfe0cba746
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Tue Aug 16 18:22:30 2022 +0200

    i40e: Fix kernel crash during module removal
    
    [ Upstream commit fb8396aeda5872369a8ed6d2301e2c86e303c520 ]
    
    The driver incorrectly frees client instance and subsequent
    i40e module removal leads to kernel crash.
    
    Reproducer:
    1. Do ethtool offline test followed immediately by another one
    host# ethtool -t eth0 offline; ethtool -t eth0 offline
    2. Remove recursively irdma module that also removes i40e module
    host# modprobe -r irdma
    
    Result:
    [ 8675.035651] i40e 0000:3d:00.0 eno1: offline testing starting
    [ 8675.193774] i40e 0000:3d:00.0 eno1: testing finished
    [ 8675.201316] i40e 0000:3d:00.0 eno1: offline testing starting
    [ 8675.358921] i40e 0000:3d:00.0 eno1: testing finished
    [ 8675.496921] i40e 0000:3d:00.0: IRDMA hardware initialization FAILED init_state=2 status=-110
    [ 8686.188955] i40e 0000:3d:00.1: i40e_ptp_stop: removed PHC on eno2
    [ 8686.943890] i40e 0000:3d:00.1: Deleted LAN device PF1 bus=0x3d dev=0x00 func=0x01
    [ 8686.952669] i40e 0000:3d:00.0: i40e_ptp_stop: removed PHC on eno1
    [ 8687.761787] BUG: kernel NULL pointer dereference, address: 0000000000000030
    [ 8687.768755] #PF: supervisor read access in kernel mode
    [ 8687.773895] #PF: error_code(0x0000) - not-present page
    [ 8687.779034] PGD 0 P4D 0
    [ 8687.781575] Oops: 0000 [#1] PREEMPT SMP NOPTI
    [ 8687.785935] CPU: 51 PID: 172891 Comm: rmmod Kdump: loaded Tainted: G        W I        5.19.0+ #2
    [ 8687.794800] Hardware name: Intel Corporation S2600WFD/S2600WFD, BIOS SE5C620.86B.0X.02.0001.051420190324 05/14/2019
    [ 8687.805222] RIP: 0010:i40e_lan_del_device+0x13/0xb0 [i40e]
    [ 8687.810719] Code: d4 84 c0 0f 84 b8 25 01 00 e9 9c 25 01 00 41 bc f4 ff ff ff eb 91 90 0f 1f 44 00 00 41 54 55 53 48 8b 87 58 08 00 00 48 89 fb <48> 8b 68 30 48 89 ef e8 21 8a 0f d5 48 89 ef e8 a9 78 0f d5 48 8b
    [ 8687.829462] RSP: 0018:ffffa604072efce0 EFLAGS: 00010202
    [ 8687.834689] RAX: 0000000000000000 RBX: ffff8f43833b2000 RCX: 0000000000000000
    [ 8687.841821] RDX: 0000000000000000 RSI: ffff8f4b0545b298 RDI: ffff8f43833b2000
    [ 8687.848955] RBP: ffff8f43833b2000 R08: 0000000000000001 R09: 0000000000000000
    [ 8687.856086] R10: 0000000000000000 R11: 000ffffffffff000 R12: ffff8f43833b2ef0
    [ 8687.863218] R13: ffff8f43833b2ef0 R14: ffff915103966000 R15: ffff8f43833b2008
    [ 8687.870342] FS:  00007f79501c3740(0000) GS:ffff8f4adffc0000(0000) knlGS:0000000000000000
    [ 8687.878427] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 8687.884174] CR2: 0000000000000030 CR3: 000000014276e004 CR4: 00000000007706e0
    [ 8687.891306] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 8687.898441] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 8687.905572] PKRU: 55555554
    [ 8687.908286] Call Trace:
    [ 8687.910737]  <TASK>
    [ 8687.912843]  i40e_remove+0x2c0/0x330 [i40e]
    [ 8687.917040]  pci_device_remove+0x33/0xa0
    [ 8687.920962]  device_release_driver_internal+0x1aa/0x230
    [ 8687.926188]  driver_detach+0x44/0x90
    [ 8687.929770]  bus_remove_driver+0x55/0xe0
    [ 8687.933693]  pci_unregister_driver+0x2a/0xb0
    [ 8687.937967]  i40e_exit_module+0xc/0xf48 [i40e]
    
    Two offline tests cause IRDMA driver failure (ETIMEDOUT) and this
    failure is indicated back to i40e_client_subtask() that calls
    i40e_client_del_instance() to free client instance referenced
    by pf->cinst and sets this pointer to NULL. During the module
    removal i40e_remove() calls i40e_lan_del_device() that dereferences
    pf->cinst that is NULL -> crash.
    Do not remove client instance when client open callbacks fails and
    just clear __I40E_CLIENT_INSTANCE_OPENED bit. The driver also needs
    to take care about this situation (when netdev is up and client
    is NOT opened) in i40e_notify_client_of_netdev_close() and
    calls client close callback only when __I40E_CLIENT_INSTANCE_OPENED
    is set.
    
    Fixes: 0ef2d5afb12d ("i40e: KISS the client interface")
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Tested-by: Helena Anna Dubel <helena.anna.dubel@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 878fab48ff1bce18b42f62fa911dde8ecee8b304
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9245ed20950afe225bc6d1c4b9d28d55aa152e25
Author: Toke Høiland-Jørgensen <toke@toke.dk>
Date:   Wed Aug 31 23:52:18 2022 +0200

    sch_sfb: Don't assume the skb is still around after enqueueing to child
    
    [ Upstream commit 9efd23297cca530bb35e1848665805d3fcdd7889 ]
    
    The sch_sfb enqueue() routine assumes the skb is still alive after it has
    been enqueued into a child qdisc, using the data in the skb cb field in the
    increment_qlen() routine after enqueue. However, the skb may in fact have
    been freed, causing a use-after-free in this case. In particular, this
    happens if sch_cake is used as a child of sfb, and the GSO splitting mode
    of CAKE is enabled (in which case the skb will be split into segments and
    the original skb freed).
    
    Fix this by copying the sfb cb data to the stack before enqueueing the skb,
    and using this stack copy in increment_qlen() instead of the skb pointer
    itself.
    
    Reported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-18231
    Fixes: e13e02a3c68d ("net_sched: SFB flow scheduler")
    Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3275f7804f40de3c578d2253232349b07c25f146
Author: David Leadbeater <dgl@dgl.cx>
Date:   Fri Aug 26 14:56:58 2022 +1000

    netfilter: nf_conntrack_irc: Fix forged IP logic
    
    [ Upstream commit 0efe125cfb99e6773a7434f3463f7c2fa28f3a43 ]
    
    Ensure the match happens in the right direction, previously the
    destination used was the server, not the NAT host, as the comment
    shows the code intended.
    
    Additionally nf_nat_irc uses port 0 as a signal and there's no valid way
    it can appear in a DCC message, so consider port 0 also forged.
    
    Fixes: 869f37d8e48f ("[NETFILTER]: nf_conntrack/nf_nat: add IRC helper port")
    Signed-off-by: David Leadbeater <dgl@dgl.cx>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89810dbbffff7efae8d83b39557a50a7dfc65b44
Author: Harsh Modi <harshmodi@google.com>
Date:   Tue Aug 30 22:36:03 2022 -0700

    netfilter: br_netfilter: Drop dst references before setting.
    
    [ Upstream commit d047283a7034140ea5da759a494fd2274affdd46 ]
    
    The IPv6 path already drops dst in the daddr changed case, but the IPv4
    path does not. This change makes the two code paths consistent.
    
    Further, it is possible that there is already a metadata_dst allocated from
    ingress that might already be attached to skbuff->dst while following
    the bridge path. If it is not released before setting a new
    metadata_dst, it will be leaked. This is similar to what is done in
    bpf_set_tunnel_key() or ip6_route_input().
    
    It is important to note that the memory being leaked is not the dst
    being set in the bridge code, but rather memory allocated from some
    other code path that is not being freed correctly before the skb dst is
    overwritten.
    
    An example of the leakage fixed by this commit found using kmemleak:
    
    unreferenced object 0xffff888010112b00 (size 256):
      comm "softirq", pid 0, jiffies 4294762496 (age 32.012s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 80 16 f1 83 ff ff ff ff  ................
        e1 4e f6 82 ff ff ff ff 00 00 00 00 00 00 00 00  .N..............
      backtrace:
        [<00000000d79567ea>] metadata_dst_alloc+0x1b/0xe0
        [<00000000be113e13>] udp_tun_rx_dst+0x174/0x1f0
        [<00000000a36848f4>] geneve_udp_encap_recv+0x350/0x7b0
        [<00000000d4afb476>] udp_queue_rcv_one_skb+0x380/0x560
        [<00000000ac064aea>] udp_unicast_rcv_skb+0x75/0x90
        [<000000009a8ee8c5>] ip_protocol_deliver_rcu+0xd8/0x230
        [<00000000ef4980bb>] ip_local_deliver_finish+0x7a/0xa0
        [<00000000d7533c8c>] __netif_receive_skb_one_core+0x89/0xa0
        [<00000000a879497d>] process_backlog+0x93/0x190
        [<00000000e41ade9f>] __napi_poll+0x28/0x170
        [<00000000b4c0906b>] net_rx_action+0x14f/0x2a0
        [<00000000b20dd5d4>] __do_softirq+0xf4/0x305
        [<000000003a7d7e15>] __irq_exit_rcu+0xc3/0x140
        [<00000000968d39a2>] sysvec_apic_timer_interrupt+0x9e/0xc0
        [<000000009e920794>] asm_sysvec_apic_timer_interrupt+0x16/0x20
        [<000000008942add0>] native_safe_halt+0x13/0x20
    
    Florian Westphal says: "Original code was likely fine because nothing
    ever did set a skb->dst entry earlier than bridge in those days."
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Harsh Modi <harshmodi@google.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0284b4e6dec6088a41607aa3f42bf51edff01883
Author: Liang He <windhl@126.com>
Date:   Thu Jul 7 09:56:20 2022 +0800

    soc: brcmstb: pm-arm: Fix refcount leak and __iomem leak bugs
    
    [ Upstream commit 1085f5080647f0c9f357c270a537869191f7f2a1 ]
    
    In brcmstb_pm_probe(), there are two kinds of leak bugs:
    
    (1) we need to add of_node_put() when for_each__matching_node() breaks
    (2) we need to add iounmap() for each iomap in fail path
    
    Fixes: 0b741b8234c8 ("soc: bcm: brcmstb: Add support for S2/S3/S5 suspend states (ARM)")
    Signed-off-by: Liang He <windhl@126.com>
    Link: https://lore.kernel.org/r/20220707015620.306468-1-windhl@126.com
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82efb917eeb27454dc4c6fe26432fc8f6c75bc16
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Tue Sep 6 19:19:08 2022 +0530

    scsi: mpt3sas: Fix use-after-free warning
    
    commit 991df3dd5144f2e6b1c38b8d20ed3d4d21e20b34 upstream.
    
    Fix the following use-after-free warning which is observed during
    controller reset:
    
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 23 PID: 5399 at lib/refcount.c:28 refcount_warn_saturate+0xa6/0xf0
    
    Link: https://lore.kernel.org/r/20220906134908.1039-2-sreekanth.reddy@broadcom.com
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebfb744bb6036485dac2a45c46e82b911c3726d1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Sep 2 16:59:15 2022 +0200

    debugfs: add debugfs_lookup_and_remove()
    
    commit dec9b2f1e0455a151a7293c367da22ab973f713e upstream.
    
    There is a very common pattern of using
    debugfs_remove(debufs_lookup(..)) which results in a dentry leak of the
    dentry that was looked up.  Instead of having to open-code the correct
    pattern of calling dput() on the dentry, create
    debugfs_lookup_and_remove() to handle this pattern automatically and
    properly without any memory leaks.
    
    Cc: stable <stable@kernel.org>
    Reported-by: Kuyo Chang <kuyo.chang@mediatek.com>
    Tested-by: Kuyo Chang <kuyo.chang@mediatek.com>
    Link: https://lore.kernel.org/r/YxIaQ8cSinDR881k@kroah.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6156f2fdbab0d6a9ff6df130cf51ae1803f66594
Author: Christian A. Ehrhardt <lk@c--e.de>
Date:   Wed Sep 7 22:09:17 2022 +0200

    kprobes: Prohibit probes in gate area
    
    commit 1efda38d6f9ba26ac88b359c6277f1172db03f1e upstream.
    
    The system call gate area counts as kernel text but trying
    to install a kprobe in this area fails with an Oops later on.
    To fix this explicitly disallow the gate area for kprobes.
    
    Found by syzkaller with the following reproducer:
    perf_event_open$cgroup(&(0x7f00000001c0)={0x6, 0x80, 0x0, 0x0, 0x0, 0x0, 0x80ffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, @perf_config_ext={0x0, 0xffffffffff600000}}, 0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0)
    
    Sample report:
    BUG: unable to handle page fault for address: fffffbfff3ac6000
    PGD 6dfcb067 P4D 6dfcb067 PUD 6df8f067 PMD 6de4d067 PTE 0
    Oops: 0000 [#1] PREEMPT SMP KASAN NOPTI
    CPU: 0 PID: 21978 Comm: syz-executor.2 Not tainted 6.0.0-rc3-00363-g7726d4c3e60b-dirty #6
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
    RIP: 0010:__insn_get_emulate_prefix arch/x86/lib/insn.c:91 [inline]
    RIP: 0010:insn_get_emulate_prefix arch/x86/lib/insn.c:106 [inline]
    RIP: 0010:insn_get_prefixes.part.0+0xa8/0x1110 arch/x86/lib/insn.c:134
    Code: 49 be 00 00 00 00 00 fc ff df 48 8b 40 60 48 89 44 24 08 e9 81 00 00 00 e8 e5 4b 39 ff 4c 89 fa 4c 89 f9 48 c1 ea 03 83 e1 07 <42> 0f b6 14 32 38 ca 7f 08 84 d2 0f 85 06 10 00 00 48 89 d8 48 89
    RSP: 0018:ffffc900088bf860 EFLAGS: 00010246
    RAX: 0000000000040000 RBX: ffffffff9b9bebc0 RCX: 0000000000000000
    RDX: 1ffffffff3ac6000 RSI: ffffc90002d82000 RDI: ffffc900088bf9e8
    RBP: ffffffff9d630001 R08: 0000000000000000 R09: ffffc900088bf9e8
    R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000001
    R13: ffffffff9d630000 R14: dffffc0000000000 R15: ffffffff9d630000
    FS:  00007f63eef63640(0000) GS:ffff88806d000000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: fffffbfff3ac6000 CR3: 0000000029d90005 CR4: 0000000000770ef0
    PKRU: 55555554
    Call Trace:
     <TASK>
     insn_get_prefixes arch/x86/lib/insn.c:131 [inline]
     insn_get_opcode arch/x86/lib/insn.c:272 [inline]
     insn_get_modrm+0x64a/0x7b0 arch/x86/lib/insn.c:343
     insn_get_sib+0x29a/0x330 arch/x86/lib/insn.c:421
     insn_get_displacement+0x350/0x6b0 arch/x86/lib/insn.c:464
     insn_get_immediate arch/x86/lib/insn.c:632 [inline]
     insn_get_length arch/x86/lib/insn.c:707 [inline]
     insn_decode+0x43a/0x490 arch/x86/lib/insn.c:747
     can_probe+0xfc/0x1d0 arch/x86/kernel/kprobes/core.c:282
     arch_prepare_kprobe+0x79/0x1c0 arch/x86/kernel/kprobes/core.c:739
     prepare_kprobe kernel/kprobes.c:1160 [inline]
     register_kprobe kernel/kprobes.c:1641 [inline]
     register_kprobe+0xb6e/0x1690 kernel/kprobes.c:1603
     __register_trace_kprobe kernel/trace/trace_kprobe.c:509 [inline]
     __register_trace_kprobe+0x26a/0x2d0 kernel/trace/trace_kprobe.c:477
     create_local_trace_kprobe+0x1f7/0x350 kernel/trace/trace_kprobe.c:1833
     perf_kprobe_init+0x18c/0x280 kernel/trace/trace_event_perf.c:271
     perf_kprobe_event_init+0xf8/0x1c0 kernel/events/core.c:9888
     perf_try_init_event+0x12d/0x570 kernel/events/core.c:11261
     perf_init_event kernel/events/core.c:11325 [inline]
     perf_event_alloc.part.0+0xf7f/0x36a0 kernel/events/core.c:11619
     perf_event_alloc kernel/events/core.c:12059 [inline]
     __do_sys_perf_event_open+0x4a8/0x2a00 kernel/events/core.c:12157
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x38/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f63ef7efaed
    Code: 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f63eef63028 EFLAGS: 00000246 ORIG_RAX: 000000000000012a
    RAX: ffffffffffffffda RBX: 00007f63ef90ff80 RCX: 00007f63ef7efaed
    RDX: 0000000000000000 RSI: ffffffffffffffff RDI: 00000000200001c0
    RBP: 00007f63ef86019c R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffffffffffff R11: 0000000000000246 R12: 0000000000000000
    R13: 0000000000000002 R14: 00007f63ef90ff80 R15: 00007f63eef43000
     </TASK>
    Modules linked in:
    CR2: fffffbfff3ac6000
    ---[ end trace 0000000000000000 ]---
    RIP: 0010:__insn_get_emulate_prefix arch/x86/lib/insn.c:91 [inline]
    RIP: 0010:insn_get_emulate_prefix arch/x86/lib/insn.c:106 [inline]
    RIP: 0010:insn_get_prefixes.part.0+0xa8/0x1110 arch/x86/lib/insn.c:134
    Code: 49 be 00 00 00 00 00 fc ff df 48 8b 40 60 48 89 44 24 08 e9 81 00 00 00 e8 e5 4b 39 ff 4c 89 fa 4c 89 f9 48 c1 ea 03 83 e1 07 <42> 0f b6 14 32 38 ca 7f 08 84 d2 0f 85 06 10 00 00 48 89 d8 48 89
    RSP: 0018:ffffc900088bf860 EFLAGS: 00010246
    RAX: 0000000000040000 RBX: ffffffff9b9bebc0 RCX: 0000000000000000
    RDX: 1ffffffff3ac6000 RSI: ffffc90002d82000 RDI: ffffc900088bf9e8
    RBP: ffffffff9d630001 R08: 0000000000000000 R09: ffffc900088bf9e8
    R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000001
    R13: ffffffff9d630000 R14: dffffc0000000000 R15: ffffffff9d630000
    FS:  00007f63eef63640(0000) GS:ffff88806d000000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: fffffbfff3ac6000 CR3: 0000000029d90005 CR4: 0000000000770ef0
    PKRU: 55555554
    ==================================================================
    
    Link: https://lkml.kernel.org/r/20220907200917.654103-1-lk@c--e.de
    
    cc: "Naveen N. Rao" <naveen.n.rao@linux.ibm.com>
    cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
    cc: "David S. Miller" <davem@davemloft.net>
    Cc: stable@vger.kernel.org
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Christian A. Ehrhardt <lk@c--e.de>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a308e415d247a23d4d64c964c02e782eede2936
Author: Dongxiang Ke <kdx.glider@gmail.com>
Date:   Tue Sep 6 10:49:28 2022 +0800

    ALSA: usb-audio: Fix an out-of-bounds bug in __snd_usb_parse_audio_interface()
    
    commit e53f47f6c1a56d2af728909f1cb894da6b43d9bf upstream.
    
    There may be a bad USB audio device with a USB ID of (0x04fa, 0x4201) and
    the number of it's interfaces less than 4, an out-of-bounds read bug occurs
    when parsing the interface descriptor for this device.
    
    Fix this by checking the number of interfaces.
    
    Signed-off-by: Dongxiang Ke <kdx.glider@gmail.com>
    Link: https://lore.kernel.org/r/20220906024928.10951-1-kdx.glider@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 763acbb83e501ab710dac7f9f0595f64611377b2
Author: Pattara Teerapong <pteerapong@chromium.org>
Date:   Thu Sep 1 14:40:36 2022 +0000

    ALSA: aloop: Fix random zeros in capture data when using jiffies timer
    
    commit 3e48940abee88b8dbbeeaf8a07e7b2b6be1271b3 upstream.
    
    In loopback_jiffies_timer_pos_update(), we are getting jiffies twice.
    First time for playback, second time for capture. Jiffies can be updated
    between these two calls and if the capture jiffies is larger, extra zeros
    will be filled in the capture buffer.
    
    Change to get jiffies once and use it for both playback and capture.
    
    Signed-off-by: Pattara Teerapong <pteerapong@chromium.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220901144036.4049060-1-pteerapong@chromium.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88aac6684cf8bc885cca15463cb4407e91f28ff7
Author: Tasos Sahanidis <tasos@tasossah.com>
Date:   Wed Sep 7 04:18:00 2022 +0300

    ALSA: emu10k1: Fix out of bounds access in snd_emu10k1_pcm_channel_alloc()
    
    commit d29f59051d3a07b81281b2df2b8c9dfe4716067f upstream.
    
    The voice allocator sometimes begins allocating from near the end of the
    array and then wraps around, however snd_emu10k1_pcm_channel_alloc()
    accesses the newly allocated voices as if it never wrapped around.
    
    This results in out of bounds access if the first voice has a high enough
    index so that first_voice + requested_voice_count > NUM_G (64).
    The more voices are requested, the more likely it is for this to occur.
    
    This was initially discovered using PipeWire, however it can be reproduced
    by calling aplay multiple times with 16 channels:
    aplay -r 48000 -D plughw:CARD=Live,DEV=3 -c 16 /dev/zero
    
    UBSAN: array-index-out-of-bounds in sound/pci/emu10k1/emupcm.c:127:40
    index 65 is out of range for type 'snd_emu10k1_voice [64]'
    CPU: 1 PID: 31977 Comm: aplay Tainted: G        W IOE      6.0.0-rc2-emu10k1+ #7
    Hardware name: ASUSTEK COMPUTER INC P5W DH Deluxe/P5W DH Deluxe, BIOS 3002    07/22/2010
    Call Trace:
    <TASK>
    dump_stack_lvl+0x49/0x63
    dump_stack+0x10/0x16
    ubsan_epilogue+0x9/0x3f
    __ubsan_handle_out_of_bounds.cold+0x44/0x49
    snd_emu10k1_playback_hw_params+0x3bc/0x420 [snd_emu10k1]
    snd_pcm_hw_params+0x29f/0x600 [snd_pcm]
    snd_pcm_common_ioctl+0x188/0x1410 [snd_pcm]
    ? exit_to_user_mode_prepare+0x35/0x170
    ? do_syscall_64+0x69/0x90
    ? syscall_exit_to_user_mode+0x26/0x50
    ? do_syscall_64+0x69/0x90
    ? exit_to_user_mode_prepare+0x35/0x170
    snd_pcm_ioctl+0x27/0x40 [snd_pcm]
    __x64_sys_ioctl+0x95/0xd0
    do_syscall_64+0x5c/0x90
    ? do_syscall_64+0x69/0x90
    ? do_syscall_64+0x69/0x90
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Signed-off-by: Tasos Sahanidis <tasos@tasossah.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3707dcab-320a-62ff-63c0-73fc201ef756@tasossah.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e42e70717fe683c72a93671a05c02ea14052f9b
Author: Qu Huang <jinsdb@126.com>
Date:   Tue Aug 23 14:44:06 2022 +0800

    drm/amdgpu: mmVM_L2_CNTL3 register not initialized correctly
    
    [ Upstream commit b8983d42524f10ac6bf35bbce6a7cc8e45f61e04 ]
    
    The mmVM_L2_CNTL3 register is not assigned an initial value
    
    Signed-off-by: Qu Huang <jinsdb@126.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 159ec04631354f9d350214ae6487822b8f1d4ad7
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Aug 19 16:57:52 2022 +0800

    fbdev: chipsfb: Add missing pci_disable_device() in chipsfb_pci_init()
    
    [ Upstream commit 07c55c9803dea748d17a054000cbf1913ce06399 ]
    
    Add missing pci_disable_device() in error path in chipsfb_pci_init().
    
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1668c38ef2e5bb80dbee88afcecfcdc3e7abc2aa
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Aug 8 09:46:40 2022 +0100

    arm64: cacheinfo: Fix incorrect assignment of signed error value to unsigned fw_level
    
    [ Upstream commit e75d18cecbb3805895d8ed64da4f78575ec96043 ]
    
    Though acpi_find_last_cache_level() always returned signed value and the
    document states it will return any errors caused by lack of a PPTT table,
    it never returned negative values before.
    
    Commit 0c80f9e165f8 ("ACPI: PPTT: Leave the table mapped for the runtime usage")
    however changed it by returning -ENOENT if no PPTT was found. The value
    returned from acpi_find_last_cache_level() is then assigned to unsigned
    fw_level.
    
    It will result in the number of cache leaves calculated incorrectly as
    a huge value which will then cause the following warning from __alloc_pages
    as the order would be great than MAX_ORDER because of incorrect and huge
    cache leaves value.
    
      |  WARNING: CPU: 0 PID: 1 at mm/page_alloc.c:5407 __alloc_pages+0x74/0x314
      |  Modules linked in:
      |  CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.19.0-10393-g7c2a8d3ac4c0 #73
      |  pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
      |  pc : __alloc_pages+0x74/0x314
      |  lr : alloc_pages+0xe8/0x318
      |  Call trace:
      |   __alloc_pages+0x74/0x314
      |   alloc_pages+0xe8/0x318
      |   kmalloc_order_trace+0x68/0x1dc
      |   __kmalloc+0x240/0x338
      |   detect_cache_attributes+0xe0/0x56c
      |   update_siblings_masks+0x38/0x284
      |   store_cpu_topology+0x78/0x84
      |   smp_prepare_cpus+0x48/0x134
      |   kernel_init_freeable+0xc4/0x14c
      |   kernel_init+0x2c/0x1b4
      |   ret_from_fork+0x10/0x20
    
    Fix the same by changing fw_level to be signed integer and return the
    error from init_cache_level() early in case of error.
    
    Reported-and-Tested-by: Bruno Goncalves <bgoncalv@redhat.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Link: https://lore.kernel.org/r/20220808084640.3165368-1-sudeep.holla@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6e7e32f1608850cb783fddf9f6b2fce1267b3f9
Author: Helge Deller <deller@gmx.de>
Date:   Sun Aug 21 14:49:58 2022 +0200

    parisc: Add runtime check to prevent PA2.0 kernels on PA1.x machines
    
    [ Upstream commit 591d2108f3abc4db9f9073cae37cf3591fd250d6 ]
    
    If a 32-bit kernel was compiled for PA2.0 CPUs, it won't be able to run
    on machines with PA1.x CPUs. Add a check and bail out early if a PA1.x
    machine is detected.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05af41d29a4527125f3356d82cf29657177c7fff
Author: Li Qiong <liqiong@nfschina.com>
Date:   Fri Aug 19 12:15:10 2022 +0800

    parisc: ccio-dma: Handle kmalloc failure in ccio_init_resources()
    
    [ Upstream commit d46c742f827fa2326ab1f4faa1cccadb56912341 ]
    
    As the possible failure of the kmalloc(), it should be better
    to fix this error path, check and return '-ENOMEM' error code.
    
    Signed-off-by: Li Qiong <liqiong@nfschina.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0a45f41fde4a0f2c900f719817493ee5c4a5aa3
Author: Zhenneng Li <lizhenneng@kylinos.cn>
Date:   Thu Aug 11 15:25:40 2022 +0800

    drm/radeon: add a force flush to delay work when radeon
    
    [ Upstream commit f461950fdc374a3ada5a63c669d997de4600dffe ]
    
    Although radeon card fence and wait for gpu to finish processing current batch rings,
    there is still a corner case that radeon lockup work queue may not be fully flushed,
    and meanwhile the radeon_suspend_kms() function has called pci_set_power_state() to
    put device in D3hot state.
    Per PCI spec rev 4.0 on 5.3.1.4.1 D3hot State.
    > Configuration and Message requests are the only TLPs accepted by a Function in
    > the D3hot state. All other received Requests must be handled as Unsupported Requests,
    > and all received Completions may optionally be handled as Unexpected Completions.
    This issue will happen in following logs:
    Unable to handle kernel paging request at virtual address 00008800e0008010
    CPU 0 kworker/0:3(131): Oops 0
    pc = [<ffffffff811bea5c>]  ra = [<ffffffff81240844>]  ps = 0000 Tainted: G        W
    pc is at si_gpu_check_soft_reset+0x3c/0x240
    ra is at si_dma_is_lockup+0x34/0xd0
    v0 = 0000000000000000  t0 = fff08800e0008010  t1 = 0000000000010000
    t2 = 0000000000008010  t3 = fff00007e3c00000  t4 = fff00007e3c00258
    t5 = 000000000000ffff  t6 = 0000000000000001  t7 = fff00007ef078000
    s0 = fff00007e3c016e8  s1 = fff00007e3c00000  s2 = fff00007e3c00018
    s3 = fff00007e3c00000  s4 = fff00007fff59d80  s5 = 0000000000000000
    s6 = fff00007ef07bd98
    a0 = fff00007e3c00000  a1 = fff00007e3c016e8  a2 = 0000000000000008
    a3 = 0000000000000001  a4 = 8f5c28f5c28f5c29  a5 = ffffffff810f4338
    t8 = 0000000000000275  t9 = ffffffff809b66f8  t10 = ff6769c5d964b800
    t11= 000000000000b886  pv = ffffffff811bea20  at = 0000000000000000
    gp = ffffffff81d89690  sp = 00000000aa814126
    Disabling lock debugging due to kernel taint
    Trace:
    [<ffffffff81240844>] si_dma_is_lockup+0x34/0xd0
    [<ffffffff81119610>] radeon_fence_check_lockup+0xd0/0x290
    [<ffffffff80977010>] process_one_work+0x280/0x550
    [<ffffffff80977350>] worker_thread+0x70/0x7c0
    [<ffffffff80977410>] worker_thread+0x130/0x7c0
    [<ffffffff80982040>] kthread+0x200/0x210
    [<ffffffff809772e0>] worker_thread+0x0/0x7c0
    [<ffffffff80981f8c>] kthread+0x14c/0x210
    [<ffffffff80911658>] ret_from_kernel_thread+0x18/0x20
    [<ffffffff80981e40>] kthread+0x0/0x210
     Code: ad3e0008  43f0074a  ad7e0018  ad9e0020  8c3001e8  40230101
     <88210000> 4821ed21
    So force lockup work queue flush to fix this problem.
    
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Zhenneng Li <lizhenneng@kylinos.cn>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2a10b2414c970547dfd1fa3ffc4eadf44291b0c
Author: Candice Li <candice.li@amd.com>
Date:   Thu Aug 18 10:47:09 2022 +0800

    drm/amdgpu: Check num_gfx_rings for gfx v9_0 rb setup.
    
    [ Upstream commit c351938350ab9b5e978dede2c321da43de7eb70c ]
    
    No need to set up rb when no gfx rings.
    
    Signed-off-by: Candice Li <candice.li@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f57ca0e2cd1e5b5275a04f669d2710a1cd47c598
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Aug 23 09:27:17 2022 +0200

    ALSA: seq: Fix data-race at module auto-loading
    
    commit 3e7e04b747adea36f349715d9f0998eeebf15d72 upstream.
    
    It's been reported that there is a possible data-race accessing to the
    global card_requested[] array at ALSA sequencer core, which is used
    for determining whether to call request_module() for the card or not.
    This data race itself is almost harmless, as it might end up with one
    extra request_module() call for the already loaded module at most.
    But it's still better to fix.
    
    This patch addresses the possible data race of card_requested[] and
    client_requested[] arrays by replacing them with bitmask.
    It's an atomic operation and can work without locks.
    
    Reported-by: Abhishek Shah <abhishek.shah@columbia.edu>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/CAEHB24_ay6YzARpA1zgCsE7=H9CSJJzux618E=Ka4h0YdKn=qA@mail.gmail.com
    Link: https://lore.kernel.org/r/20220823072717.1706-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7ee1f3c64d080e48405db2fabe1f8a1a7cfb9e1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Aug 23 09:27:16 2022 +0200

    ALSA: seq: oss: Fix data-race for max_midi_devs access
    
    commit 22dec134dbfa825b963f8a1807ad19b943e46a56 upstream.
    
    ALSA OSS sequencer refers to a global variable max_midi_devs at
    creating a new port, storing it to its own field.  Meanwhile this
    variable may be changed by other sequencer events at
    snd_seq_oss_midi_check_exit_port() in parallel, which may cause a data
    race.
    
    OTOH, this data race itself is almost harmless, as the access to the
    MIDI device is done via get_mdev() and it's protected with a refcount,
    hence its presence is guaranteed.
    
    Though, it's sill better to address the data-race from the code sanity
    POV, and this patch adds the proper spinlock for the protection.
    
    Reported-by: Abhishek Shah <abhishek.shah@columbia.edu>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/CAEHB2493pZRXs863w58QWnUTtv3HHfg85aYhLn5HJHCwxqtHQg@mail.gmail.com
    Link: https://lore.kernel.org/r/20220823072717.1706-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f70146c0d62c3afb92dcca3308f71305ab83123c
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Fri Aug 26 16:29:54 2022 +0200

    net: mac802154: Fix a condition in the receive path
    
    commit f0da47118c7e93cdbbc6fb403dd729a5f2c90ee3 upstream.
    
    Upon reception, a packet must be categorized, either it's destination is
    the host, or it is another host. A packet with no destination addressing
    fields may be valid in two situations:
    - the packet has no source field: only ACKs are built like that, we
      consider the host as the destination.
    - the packet has a valid source field: it is directed to the PAN
      coordinator, as for know we don't have this information we consider we
      are not the PAN coordinator.
    
    There was likely a copy/paste error made during a previous cleanup
    because the if clause is now containing exactly the same condition as in
    the switch case, which can never be true. In the past the destination
    address was used in the switch and the source address was used in the
    if, which matches what the spec says.
    
    Cc: stable@vger.kernel.org
    Fixes: ae531b9475f6 ("ieee802154: use ieee802154_addr instead of *_sa variants")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/r/20220826142954.254853-1-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9eb37db6a28b59a95a3461450ee209654c5f95b
Author: Siddh Raman Pant <code@siddh.me>
Date:   Sun Aug 14 20:45:12 2022 +0530

    wifi: mac80211: Don't finalize CSA in IBSS mode if state is disconnected
    
    commit 15bc8966b6d3a5b9bfe4c9facfa02f2b69b1e5f0 upstream.
    
    When we are not connected to a channel, sending channel "switch"
    announcement doesn't make any sense.
    
    The BSS list is empty in that case. This causes the for loop in
    cfg80211_get_bss() to be bypassed, so the function returns NULL
    (check line 1424 of net/wireless/scan.c), causing the WARN_ON()
    in ieee80211_ibss_csa_beacon() to get triggered (check line 500
    of net/mac80211/ibss.c), which was consequently reported on the
    syzkaller dashboard.
    
    Thus, check if we have an existing connection before generating
    the CSA beacon in ieee80211_ibss_finish_csa().
    
    Cc: stable@vger.kernel.org
    Fixes: cd7760e62c2a ("mac80211: add support for CSA in IBSS mode")
    Link: https://syzkaller.appspot.com/bug?id=05603ef4ae8926761b678d2939a3b2ad28ab9ca6
    Reported-by: syzbot+b6c9fe29aefe68e4ad34@syzkaller.appspotmail.com
    Signed-off-by: Siddh Raman Pant <code@siddh.me>
    Tested-by: syzbot+b6c9fe29aefe68e4ad34@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20220814151512.9985-1-code@siddh.me
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5c70c4b368ed493975f456ddc17703e51942350
Author: Krishna Kurapati <quic_kriskura@quicinc.com>
Date:   Sat Aug 27 08:45:10 2022 +0530

    usb: gadget: mass_storage: Fix cdrom data transfers on MAC-OS
    
    commit 9d4dc16ec71bd6368548e9743223e449b4377fc7 upstream.
    
    During cdrom emulation, the response to read_toc command must contain
    the cdrom address as the number of sectors (2048 byte sized blocks)
    represented either as an absolute value (when MSF bit is '0') or in
    terms of PMin/PSec/PFrame (when MSF bit is set to '1'). Incase of
    cdrom, the fsg_lun_open call sets the sector size to 2048 bytes.
    
    When MAC OS sends a read_toc request with MSF set to '1', the
    store_cdrom_address assumes that the address being provided is the
    LUN size represented in 512 byte sized blocks instead of 2048. It
    tries to modify the address further to convert it to 2048 byte sized
    blocks and store it in MSF format. This results in data transfer
    failures as the cdrom address being provided in the read_toc response
    is incorrect.
    
    Fixes: 3f565a363cee ("usb: gadget: storage: adapt logic block size to bound block devices")
    Cc: stable@vger.kernel.org
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Krishna Kurapati <quic_kriskura@quicinc.com>
    Link: https://lore.kernel.org/r/1661570110-19127-1-git-send-email-quic_kriskura@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc9a12e12808af178c600cc485338bac2e37d2a8
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Aug 26 15:31:32 2022 -0400

    USB: core: Prevent nested device-reset calls
    
    commit 9c6d778800b921bde3bff3cff5003d1650f942d1 upstream.
    
    Automatic kernel fuzzing revealed a recursive locking violation in
    usb-storage:
    
    ============================================
    WARNING: possible recursive locking detected
    5.18.0 #3 Not tainted
    --------------------------------------------
    kworker/1:3/1205 is trying to acquire lock:
    ffff888018638db8 (&us_interface_key[i]){+.+.}-{3:3}, at:
    usb_stor_pre_reset+0x35/0x40 drivers/usb/storage/usb.c:230
    
    but task is already holding lock:
    ffff888018638db8 (&us_interface_key[i]){+.+.}-{3:3}, at:
    usb_stor_pre_reset+0x35/0x40 drivers/usb/storage/usb.c:230
    
    ...
    
    stack backtrace:
    CPU: 1 PID: 1205 Comm: kworker/1:3 Not tainted 5.18.0 #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    1.13.0-1ubuntu1.1 04/01/2014
    Workqueue: usb_hub_wq hub_event
    Call Trace:
    <TASK>
    __dump_stack lib/dump_stack.c:88 [inline]
    dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
    print_deadlock_bug kernel/locking/lockdep.c:2988 [inline]
    check_deadlock kernel/locking/lockdep.c:3031 [inline]
    validate_chain kernel/locking/lockdep.c:3816 [inline]
    __lock_acquire.cold+0x152/0x3ca kernel/locking/lockdep.c:5053
    lock_acquire kernel/locking/lockdep.c:5665 [inline]
    lock_acquire+0x1ab/0x520 kernel/locking/lockdep.c:5630
    __mutex_lock_common kernel/locking/mutex.c:603 [inline]
    __mutex_lock+0x14f/0x1610 kernel/locking/mutex.c:747
    usb_stor_pre_reset+0x35/0x40 drivers/usb/storage/usb.c:230
    usb_reset_device+0x37d/0x9a0 drivers/usb/core/hub.c:6109
    r871xu_dev_remove+0x21a/0x270 drivers/staging/rtl8712/usb_intf.c:622
    usb_unbind_interface+0x1bd/0x890 drivers/usb/core/driver.c:458
    device_remove drivers/base/dd.c:545 [inline]
    device_remove+0x11f/0x170 drivers/base/dd.c:537
    __device_release_driver drivers/base/dd.c:1222 [inline]
    device_release_driver_internal+0x1a7/0x2f0 drivers/base/dd.c:1248
    usb_driver_release_interface+0x102/0x180 drivers/usb/core/driver.c:627
    usb_forced_unbind_intf+0x4d/0xa0 drivers/usb/core/driver.c:1118
    usb_reset_device+0x39b/0x9a0 drivers/usb/core/hub.c:6114
    
    This turned out not to be an error in usb-storage but rather a nested
    device reset attempt.  That is, as the rtl8712 driver was being
    unbound from a composite device in preparation for an unrelated USB
    reset (that driver does not have pre_reset or post_reset callbacks),
    its ->remove routine called usb_reset_device() -- thus nesting one
    reset call within another.
    
    Performing a reset as part of disconnect processing is a questionable
    practice at best.  However, the bug report points out that the USB
    core does not have any protection against nested resets.  Adding a
    reset_in_progress flag and testing it will prevent such errors in the
    future.
    
    Link: https://lore.kernel.org/all/CAB7eexKUpvX-JNiLzhXBDWgfg2T9e9_0Tw4HQ6keN==voRbP0g@mail.gmail.com/
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: Rondreis <linhaoguo86@gmail.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/YwkflDxvg0KWqyZK@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d20c47333b7a3ea8001ae7a48610a8aa04d9663a
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Fri Aug 26 16:55:44 2022 -0700

    s390: fix nospec table alignments
    
    commit c9305b6c1f52060377c72aebe3a701389e9f3172 upstream.
    
    Add proper alignment for .nospec_call_table and .nospec_return_table in
    vmlinux.
    
    [hca@linux.ibm.com]: The problem with the missing alignment of the nospec
    tables exist since a long time, however only since commit e6ed91fd0768
    ("s390/alternatives: remove padding generation code") and with
    CONFIG_RELOCATABLE=n the kernel may also crash at boot time.
    
    The above named commit reduced the size of struct alt_instr by one byte,
    so its new size is 11 bytes. Therefore depending on the number of cpu
    alternatives the size of the __alt_instructions array maybe odd, which
    again also causes that the addresses of the nospec tables will be odd.
    
    If the address of __nospec_call_start is odd and the kernel is compiled
    With CONFIG_RELOCATABLE=n the compiler may generate code that loads the
    address of __nospec_call_start with a 'larl' instruction.
    
    This will generate incorrect code since the 'larl' instruction only works
    with even addresses. In result the members of the nospec tables will be
    accessed with an off-by-one offset, which subsequently may lead to
    addressing exceptions within __nospec_revert().
    
    Fixes: f19fbd5ed642 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Link: https://lore.kernel.org/r/8719bf1ce4a72ebdeb575200290094e9ce047bcc.1661557333.git.jpoimboe@kernel.org
    Cc: <stable@vger.kernel.org> # 4.16
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87286f9ab923a9f0b929f80decd9f4491e10092e
Author: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
Date:   Fri Aug 19 18:53:43 2022 +0200

    s390/hugetlb: fix prepare_hugepage_range() check for 2 GB hugepages
    
    commit 7c8d42fdf1a84b1a0dd60d6528309c8ec127e87c upstream.
    
    The alignment check in prepare_hugepage_range() is wrong for 2 GB
    hugepages, it only checks for 1 MB hugepage alignment.
    
    This can result in kernel crash in __unmap_hugepage_range() at the
    BUG_ON(start & ~huge_page_mask(h)) alignment check, for mappings
    created with MAP_FIXED at unaligned address.
    
    Fix this by correctly handling multiple hugepage sizes, similar to the
    generic version of prepare_hugepage_range().
    
    Fixes: d08de8e2d867 ("s390/mm: add support for 2GB hugepages")
    Cc: <stable@vger.kernel.org> # 4.8+
    Acked-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cccc7ef0d41dc30b692af091c7d47a9792fa8cf
Author: Witold Lipieta <witold.lipieta@thaumatec.com>
Date:   Tue Aug 9 13:29:11 2022 +0200

    usb-storage: Add ignore-residue quirk for NXP PN7462AU
    
    commit 2aa48857ad52236a9564c71183d6cc8893becd41 upstream.
    
    This is USB mass storage primary boot loader for code download on
    NXP PN7462AU.
    
    Without the quirk it is impossible to write whole memory at once as
    device restarts during the write due to bogus residue values reported.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Witold Lipieta <witold.lipieta@thaumatec.com>
    Link: https://lore.kernel.org/r/20220809112911.462776-1-witold.lipieta@thaumatec.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb9ec6cecb9867769ea39da3ebc19839ca68edb1
Author: Thierry GUIBERT <thierry.guibert@croix-rouge.fr>
Date:   Fri Aug 19 10:17:02 2022 +0200

    USB: cdc-acm: Add Icom PMR F3400 support (0c26:0020)
    
    commit a10bc71729b236fe36de0d8e4d35c959fd8dec3a upstream.
    
    Supports for ICOM F3400 and ICOM F4400 PMR radios in CDC-ACM driver
    enabling the AT serial port.
    The Vendor Id is 0x0C26
    The Product ID is 0x0020
    
    Output of lsusb :
    Bus 001 Device 009: ID 0c26:0020 Prolific Technology Inc. ICOM Radio
    Couldn't open device, some information will be missing
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass            2 Communications
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0        64
      idVendor           0x0c26 Prolific Technology Inc.
      idProduct          0x0020
      bcdDevice            0.00
      iManufacturer           1 ICOM Inc.
      iProduct                2 ICOM Radio
      iSerial                 3 *obfuscated*
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x0030
        bNumInterfaces          2
        bConfigurationValue     1
        iConfiguration          0
        bmAttributes         0xc0
          Self Powered
        MaxPower                0mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval              12
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
    
    Signed-off-by: Thierry GUIBERT <thierry.guibert@croix-rouge.fr>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20220819081702.84118-1-thierry.guibert@croix-rouge.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4650c86087f9ad5178bfbe29f5581f676fb7e346
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Tue Aug 23 19:58:42 2022 +0200

    usb: dwc2: fix wrong order of phy_power_on and phy_init
    
    commit f9b995b49a07bd0d43b0e490f59be84415c745ae upstream.
    
    Since 1599069a62c6 ("phy: core: Warn when phy_power_on is called before
    phy_init") the driver complains. In my case (Amlogic SoC) the warning
    is: phy phy-fe03e000.phy.2: phy_power_on was called before phy_init
    So change the order of the two calls. The same change has to be done
    to the order of phy_exit() and phy_power_off().
    
    Fixes: 09a75e857790 ("usb: dwc2: refactor common low-level hw code to platform.c")
    Cc: stable@vger.kernel.org
    Acked-by: Minas Harutyunyan <hminas@synopsys.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/dfcc6b40-2274-4e86-e73c-5c5e6aa3e046@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da8cee2895910e185a959cc53287154071fc7565
Author: Pablo Sun <pablo.sun@mediatek.com>
Date:   Thu Aug 4 11:48:03 2022 +0800

    usb: typec: altmodes/displayport: correct pin assignment for UFP receptacles
    
    commit c1e5c2f0cb8a22ec2e14af92afc7006491bebabb upstream.
    
    Fix incorrect pin assignment values when connecting to a monitor with
    Type-C receptacle instead of a plug.
    
    According to specification, an UFP_D receptacle's pin assignment
    should came from the UFP_D pin assignments field (bit 23:16), while
    an UFP_D plug's assignments are described in the DFP_D pin assignments
    (bit 15:8) during Mode Discovery.
    
    For example the LG 27 UL850-W is a monitor with Type-C receptacle.
    The monitor responds to MODE DISCOVERY command with following
    DisplayPort Capability flag:
    
            dp->alt->vdo=0x140045
    
    The existing logic only take cares of UPF_D plug case,
    and would take the bit 15:8 for this 0x140045 case.
    
    This results in an non-existing pin assignment 0x0 in
    dp_altmode_configure.
    
    To fix this problem a new set of macros are introduced
    to take plug/receptacle differences into consideration.
    
    Fixes: 0e3bb7d6894d ("usb: typec: Add driver for DisplayPort alternate mode")
    Cc: stable@vger.kernel.org
    Co-developed-by: Pablo Sun <pablo.sun@mediatek.com>
    Co-developed-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Reviewed-by: Guillaume Ranquet <granquet@baylibre.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Pablo Sun <pablo.sun@mediatek.com>
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Link: https://lore.kernel.org/r/20220804034803.19486-1-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26cb425396225979ca7f8353b987ed9dc908da0b
Author: Slark Xiao <slark_xiao@163.com>
Date:   Wed Aug 10 11:30:50 2022 +0800

    USB: serial: option: add support for Cinterion MV32-WA/WB RmNet mode
    
    commit 8ffe20d08f2c95d702c453020d03a4c568a988f0 upstream.
    
    We added PIDs for MV32-WA/WB MBIM mode before, now we need to add
    support for RmNet mode.
    
    Test evidence as below:
    T:  Bus=03 Lev=01 Prnt=01 Port=02 Cnt=03 Dev#=  3 Spd=480 MxCh= 0
    D:  Ver= 2.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00f3 Rev=05.04
    S:  Manufacturer=Cinterion
    S:  Product=Cinterion PID 0x00F3 USB Mobile Broadband
    S:  SerialNumber=d7b4be8d
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=50 Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    T:  Bus=03 Lev=01 Prnt=01 Port=02 Cnt=03 Dev#= 10 Spd=480 MxCh= 0
    D:  Ver= 2.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00f4 Rev=05.04
    S:  Manufacturer=Cinterion
    S:  Product=Cinterion PID 0x00F4 USB Mobile Broadband
    S:  SerialNumber=d095087d
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=50 Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    Signed-off-by: Slark Xiao <slark_xiao@163.com>
    [ johan: sort entries ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac4e740def9911d219b136cb2d43687c6483b674
Author: Yonglin Tan <yonglin.tan@outlook.com>
Date:   Tue Jul 19 19:28:00 2022 +0800

    USB: serial: option: add Quectel EM060K modem
    
    commit f766f3abe6dbc9bf8b56a5d53c87e5a17942c154 upstream.
    
    Add usb product id entry for the Quectel EM060K module.
    
    "MBIM mode": DIAG + NMEA + AT + MODEM + MBIM + QDSS
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  8 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=030b Rev= 5.04
    S:  Manufacturer=Quectel
    S:  Product=EM060K-GL
    S:  SerialNumber=89fb57db
    C:* #Ifs= 7 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 8 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 8 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 9 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 9 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#=12 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=70 Driver=(none)
    E:  Ad=89(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Yonglin Tan <yonglin.tan@outlook.com>
    [ johan: mention QDSS port and sort entries ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4570b9418cf39f2ac5c63561957252cdc998912f
Author: Yan Xinyu <sdlyyxy@bupt.edu.cn>
Date:   Thu Jul 14 18:20:37 2022 +0800

    USB: serial: option: add support for OPPO R11 diag port
    
    commit 8d5fc280392735e4441b35de14f2f4860fa8d83c upstream.
    
    Add support for OPPO R11 USB diag serial port to option driver. This
    phone uses Qualcomm Snapdragon 660 SoC.
    
    usb-devices output:
    T:  Bus=03 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#= 10 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=22d9 ProdID=276c Rev=04.04
    S:  Manufacturer=OPPO
    S:  Product=SDM660-MTP _SN:09C6BCA7
    S:  SerialNumber=beb2c403
    C:  #Ifs= 2 Cfg#= 1 Atr=80 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    I:  If#=0x1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=usbfs
    
    Signed-off-by: Yan Xinyu <sdlyyxy@bupt.edu.cn>
    Link: https://lore.kernel.org/r/20220714102037.4113889-1-sdlyyxy@bupt.edu.cn
    Link: https://lore.kernel.org/r/Yt1WfSZk03Plpnan@hovoldconsulting.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdc08b9853718d3cd4a9148761954fded58fb1ac
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 29 16:25:50 2022 +0200

    USB: serial: cp210x: add Decagon UCA device id
    
    commit ceb4038472a4803e7046ed488b03d11551991514 upstream.
    
    Add the device id for Decagon Devices USB Cable Adapter.
    
    Link: https://lore.kernel.org/r/trinity-819f9db2-d3e1-40e9-a669-9c245817c046-1661523546680@msvc-mesg-web108
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2f4a72de5323490bd95a9d3b4e09eee64f5304b
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu Aug 25 18:08:39 2022 +0300

    xhci: Add grace period after xHC start to prevent premature runtime suspend.
    
    commit 33e321586e37b642ad10594b9ef25a613555cd08 upstream.
    
    After xHC controller is started, either in probe or resume, it can take
    a while before any of the connected usb devices are visible to the roothub
    due to link training.
    
    It's possible xhci driver loads, sees no acivity and suspends the host
    before the USB device is visible.
    
    In one testcase with a hotplugged xHC controller the host finally detected
    the connected USB device and generated a wake 500ms after host initial
    start.
    
    If hosts didn't suspend the device duringe training it probablty wouldn't
    take up to 500ms to detect it, but looking at specs reveal USB3 link
    training has a couple long timeout values, such as 120ms
    RxDetectQuietTimeout, and 360ms PollingLFPSTimeout.
    
    So Add a 500ms grace period that keeps polling the roothub for 500ms after
    start, preventing runtime suspend until USB devices are detected.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20220825150840.132216-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d7ccbb0d940f526716210c6c3af37bb51d07b0d
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri Apr 29 17:10:17 2022 +0300

    thunderbolt: Use the actual buffer in tb_async_error()
    
    commit eb100b8fa8e8b59eb3e5fc7a5fd4a1e3c5950f64 upstream.
    
    The received notification packet is held in pkg->buffer and not in pkg
    itself. Fix this by using the correct buffer.
    
    Fixes: 81a54b5e1986 ("thunderbolt: Let the connection manager handle all notifications")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8ae6a18708f260ccdeef6ba53af7548457dc26c
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Tue Aug 30 03:11:01 2022 +0200

    hwmon: (gpio-fan) Fix array out of bounds access
    
    [ Upstream commit f233d2be38dbbb22299192292983037f01ab363c ]
    
    The driver does not check if the cooling state passed to
    gpio_fan_set_cur_state() exceeds the maximum cooling state as
    stored in fan_data->num_speeds. Since the cooling state is later
    used as an array index in set_fan_speed(), an array out of bounds
    access can occur.
    This can be exploited by setting the state of the thermal cooling device
    to arbitrary values, causing for example a kernel oops when unavailable
    memory is accessed this way.
    
    Example kernel oops:
    [  807.987276] Unable to handle kernel paging request at virtual address ffffff80d0588064
    [  807.987369] Mem abort info:
    [  807.987398]   ESR = 0x96000005
    [  807.987428]   EC = 0x25: DABT (current EL), IL = 32 bits
    [  807.987477]   SET = 0, FnV = 0
    [  807.987507]   EA = 0, S1PTW = 0
    [  807.987536]   FSC = 0x05: level 1 translation fault
    [  807.987570] Data abort info:
    [  807.987763]   ISV = 0, ISS = 0x00000005
    [  807.987801]   CM = 0, WnR = 0
    [  807.987832] swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000001165000
    [  807.987872] [ffffff80d0588064] pgd=0000000000000000, p4d=0000000000000000, pud=0000000000000000
    [  807.987961] Internal error: Oops: 96000005 [#1] PREEMPT SMP
    [  807.987992] Modules linked in: cmac algif_hash aes_arm64 algif_skcipher af_alg bnep hci_uart btbcm bluetooth ecdh_generic ecc 8021q garp stp llc snd_soc_hdmi_codec brcmfmac vc4 brcmutil cec drm_kms_helper snd_soc_core cfg80211 snd_compress bcm2835_codec(C) snd_pcm_dmaengine syscopyarea bcm2835_isp(C) bcm2835_v4l2(C) sysfillrect v4l2_mem2mem bcm2835_mmal_vchiq(C) raspberrypi_hwmon sysimgblt videobuf2_dma_contig videobuf2_vmalloc fb_sys_fops videobuf2_memops rfkill videobuf2_v4l2 videobuf2_common i2c_bcm2835 snd_bcm2835(C) videodev snd_pcm snd_timer snd mc vc_sm_cma(C) gpio_fan uio_pdrv_genirq uio drm fuse drm_panel_orientation_quirks backlight ip_tables x_tables ipv6
    [  807.988508] CPU: 0 PID: 1321 Comm: bash Tainted: G         C        5.15.56-v8+ #1575
    [  807.988548] Hardware name: Raspberry Pi 3 Model B Rev 1.2 (DT)
    [  807.988574] pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    [  807.988608] pc : set_fan_speed.part.5+0x34/0x80 [gpio_fan]
    [  807.988654] lr : gpio_fan_set_cur_state+0x34/0x50 [gpio_fan]
    [  807.988691] sp : ffffffc008cf3bd0
    [  807.988710] x29: ffffffc008cf3bd0 x28: ffffff80019edac0 x27: 0000000000000000
    [  807.988762] x26: 0000000000000000 x25: 0000000000000000 x24: ffffff800747c920
    [  807.988787] x23: 000000000000000a x22: ffffff800369f000 x21: 000000001999997c
    [  807.988854] x20: ffffff800369f2e8 x19: ffffff8002ae8080 x18: 0000000000000000
    [  807.988877] x17: 0000000000000000 x16: 0000000000000000 x15: 000000559e271b70
    [  807.988938] x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000000000
    [  807.988960] x11: 0000000000000000 x10: ffffffc008cf3c20 x9 : ffffffcfb60c741c
    [  807.989018] x8 : 000000000000000a x7 : 00000000ffffffc9 x6 : 0000000000000009
    [  807.989040] x5 : 000000000000002a x4 : 0000000000000000 x3 : ffffff800369f2e8
    [  807.989062] x2 : 000000000000e780 x1 : 0000000000000001 x0 : ffffff80d0588060
    [  807.989084] Call trace:
    [  807.989091]  set_fan_speed.part.5+0x34/0x80 [gpio_fan]
    [  807.989113]  gpio_fan_set_cur_state+0x34/0x50 [gpio_fan]
    [  807.989199]  cur_state_store+0x84/0xd0
    [  807.989221]  dev_attr_store+0x20/0x38
    [  807.989262]  sysfs_kf_write+0x4c/0x60
    [  807.989282]  kernfs_fop_write_iter+0x130/0x1c0
    [  807.989298]  new_sync_write+0x10c/0x190
    [  807.989315]  vfs_write+0x254/0x378
    [  807.989362]  ksys_write+0x70/0xf8
    [  807.989379]  __arm64_sys_write+0x24/0x30
    [  807.989424]  invoke_syscall+0x4c/0x110
    [  807.989442]  el0_svc_common.constprop.3+0xfc/0x120
    [  807.989458]  do_el0_svc+0x2c/0x90
    [  807.989473]  el0_svc+0x24/0x60
    [  807.989544]  el0t_64_sync_handler+0x90/0xb8
    [  807.989558]  el0t_64_sync+0x1a0/0x1a4
    [  807.989579] Code: b9403801 f9402800 7100003f 8b35cc00 (b9400416)
    [  807.989627] ---[ end trace 8ded4c918658445b ]---
    
    Fix this by checking the cooling state and return an error if it
    exceeds the maximum cooling state.
    
    Tested on a Raspberry Pi 3.
    
    Fixes: b5cf88e46bad ("(gpio-fan): Add thermal control hooks")
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Link: https://lore.kernel.org/r/20220830011101.178843-1-W_Armin@gmx.de
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d399a78debe14a7d0292518eaa980461295dd42
Author: Peter Robinson <pbrobinson@gmail.com>
Date:   Mon Aug 22 16:33:18 2022 -0700

    Input: rk805-pwrkey - fix module autoloading
    
    [ Upstream commit 99077ad668ddd9b4823cc8ce3f3c7a3fc56f6fd9 ]
    
    Add the module alias so the rk805-pwrkey driver will
    autoload when built as a module.
    
    Fixes: 5a35b85c2d92 ("Input: add power key driver for Rockchip RK805 PMIC")
    Signed-off-by: Peter Robinson <pbrobinson@gmail.com>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Link: https://lore.kernel.org/r/20220612225437.3628788-1-pbrobinson@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71f953e61c8236a3dc3abf4a0f60d955ca2add9f
Author: Chen-Yu Tsai <wenst@chromium.org>
Date:   Mon Aug 22 16:14:24 2022 +0800

    clk: core: Fix runtime PM sequence in clk_core_unprepare()
    
    [ Upstream commit 4b592061f7b3971c70e8b72fc42aaead47c24701 ]
    
    In the original commit 9a34b45397e5 ("clk: Add support for runtime PM"),
    the commit message mentioned that pm_runtime_put_sync() would be done
    at the end of clk_core_unprepare(). This mirrors the operations in
    clk_core_prepare() in the opposite order.
    
    However, the actual code that was added wasn't in the order the commit
    message described. Move clk_pm_runtime_put() to the end of
    clk_core_unprepare() so that it is in the correct order.
    
    Fixes: 9a34b45397e5 ("clk: Add support for runtime PM")
    Signed-off-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: Nícolas F. R. A. Prado <nfraprado@collabora.com>
    Link: https://lore.kernel.org/r/20220822081424.1310926-3-wenst@chromium.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99b25cebdb35df2680c3d81d96769b78ab1412d5
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Wed Aug 31 10:53:25 2022 -0700

    Revert "clk: core: Honor CLK_OPS_PARENT_ENABLE for clk gate ops"
    
    [ Upstream commit abb5f3f4b1f5f0ad50eb067a00051d3587dec9fb ]
    
    This reverts commit 35b0fac808b95eea1212f8860baf6ad25b88b087. Alexander
    reports that it causes boot failures on i.MX8M Plus based boards
    (specifically imx8mp-tqma8mpql-mba8mpxl.dts).
    
    Reported-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Cc: Chen-Yu Tsai <wenst@chromium.org>
    Fixes: 35b0fac808b9 ("clk: core: Honor CLK_OPS_PARENT_ENABLE for clk gate ops")
    Link: https://lore.kernel.org/r/12115951.O9o76ZdvQC@steina-w
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Link: https://lore.kernel.org/r/20220831175326.2523912-1-sboyd@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8de795976113249223bc4d2ecba6c35f223108e
Author: Chen-Yu Tsai <wenst@chromium.org>
Date:   Mon Aug 22 16:14:23 2022 +0800

    clk: core: Honor CLK_OPS_PARENT_ENABLE for clk gate ops
    
    [ Upstream commit 35b0fac808b95eea1212f8860baf6ad25b88b087 ]
    
    In the previous commits that added CLK_OPS_PARENT_ENABLE, support for
    this flag was only added to rate change operations (rate setting and
    reparent) and disabling unused subtree. It was not added to the
    clock gate related operations. Any hardware driver that needs it for
    these operations will either see bogus results, or worse, hang.
    
    This has been seen on MT8192 and MT8195, where the imp_ii2_* clk
    drivers set this, but dumping debugfs clk_summary would cause it
    to hang.
    
    Fixes: fc8726a2c021 ("clk: core: support clocks which requires parents enable (part 2)")
    Fixes: a4b3518d146f ("clk: core: support clocks which requires parents enable (part 1)")
    Signed-off-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: Nícolas F. R. A. Prado <nfraprado@collabora.com>
    Tested-by: Nícolas F. R. A. Prado <nfraprado@collabora.com>
    Link: https://lore.kernel.org/r/20220822081424.1310926-2-wenst@chromium.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9277808b2fcf0f26016256b09bdbc8b9197ce583
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Tue Aug 16 13:02:47 2022 +0800

    drm/i915/reg: Fix spelling mistake "Unsupport" -> "Unsupported"
    
    [ Upstream commit 233f56745be446b289edac2ba8184c09365c005e ]
    
    There is a spelling mistake in a gvt_vgpu_err error message. Fix it.
    
    Fixes: 695fbc08d80f ("drm/i915/gvt: replace the gvt_err with gvt_vgpu_err")
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20220315202449.2952845-1-colin.i.king@gmail.com
    Reviewed-by: Zhi Wang <zhi.a.wang@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06e5b43ca4dab06a92bf4c2f33766e6fb11b880a
Author: Carlos Llamas <cmllamas@google.com>
Date:   Mon Aug 1 18:25:11 2022 +0000

    binder: fix UAF of ref->proc caused by race condition
    
    commit a0e44c64b6061dda7e00b7c458e4523e2331b739 upstream.
    
    A transaction of type BINDER_TYPE_WEAK_HANDLE can fail to increment the
    reference for a node. In this case, the target proc normally releases
    the failed reference upon close as expected. However, if the target is
    dying in parallel the call will race with binder_deferred_release(), so
    the target could have released all of its references by now leaving the
    cleanup of the new failed reference unhandled.
    
    The transaction then ends and the target proc gets released making the
    ref->proc now a dangling pointer. Later on, ref->node is closed and we
    attempt to take spin_lock(&ref->proc->inner_lock), which leads to the
    use-after-free bug reported below. Let's fix this by cleaning up the
    failed reference on the spot instead of relying on the target to do so.
    
      ==================================================================
      BUG: KASAN: use-after-free in _raw_spin_lock+0xa8/0x150
      Write of size 4 at addr ffff5ca207094238 by task kworker/1:0/590
    
      CPU: 1 PID: 590 Comm: kworker/1:0 Not tainted 5.19.0-rc8 #10
      Hardware name: linux,dummy-virt (DT)
      Workqueue: events binder_deferred_func
      Call trace:
       dump_backtrace.part.0+0x1d0/0x1e0
       show_stack+0x18/0x70
       dump_stack_lvl+0x68/0x84
       print_report+0x2e4/0x61c
       kasan_report+0xa4/0x110
       kasan_check_range+0xfc/0x1a4
       __kasan_check_write+0x3c/0x50
       _raw_spin_lock+0xa8/0x150
       binder_deferred_func+0x5e0/0x9b0
       process_one_work+0x38c/0x5f0
       worker_thread+0x9c/0x694
       kthread+0x188/0x190
       ret_from_fork+0x10/0x20
    
    Acked-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Cc: stable <stable@kernel.org> # 4.14+
    Link: https://lore.kernel.org/r/20220801182511.3371447-1-cmllamas@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2f766e63a87e35b2a23f74a4f286b1b84137e99
Author: Niek Nooijens <niek.nooijens@omron.com>
Date:   Mon Aug 1 10:39:25 2022 +0200

    USB: serial: ftdi_sio: add Omron CS1W-CIF31 device id
    
    commit 001047ea241a9646010b2744451dfbc7289542f3 upstream.
    
    works perfectly with:
    modprobe ftdi_sio
    echo "0590 00b2" | tee
    /sys/module/ftdi_sio/drivers/usb-serial\:ftdi_sio/new_id > /dev/null
    
    but doing this every reboot is a pain in the ass.
    
    Signed-off-by: Niek Nooijens <niek.nooijens@omron.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f74b4a41c5d7c9522469917e3072e55d435efd9e
Author: Helge Deller <deller@gmx.de>
Date:   Sat Jul 30 20:50:18 2022 +0200

    vt: Clear selection before changing the font
    
    commit 566f9c9f89337792070b5a6062dff448b3e7977f upstream.
    
    When changing the console font with ioctl(KDFONTOP) the new font size
    can be bigger than the previous font. A previous selection may thus now
    be outside of the new screen size and thus trigger out-of-bounds
    accesses to graphics memory if the selection is removed in
    vc_do_resize().
    
    Prevent such out-of-memory accesses by dropping the selection before the
    various con_font_set() console handlers are called.
    
    Reported-by: syzbot+14b0e8f3fd1612e35350@syzkaller.appspotmail.com
    Cc: stable <stable@kernel.org>
    Tested-by: Khalid Masum <khalid.masum.92@gmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Link: https://lore.kernel.org/r/YuV9apZGNmGfjcor@p100
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fd6170c5e2d0ccd027abe26f6f5ffc528e1bb27
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Aug 30 17:55:07 2022 +0300

    staging: rtl8712: fix use after free bugs
    
    commit e230a4455ac3e9b112f0367d1b8e255e141afae0 upstream.
    
    _Read/Write_MACREG callbacks are NULL so the read/write_macreg_hdl()
    functions don't do anything except free the "pcmd" pointer.  It
    results in a use after free.  Delete them.
    
    Fixes: 2865d42c78a9 ("staging: r8712u: Add the new driver to the mainline kernel")
    Cc: stable <stable@kernel.org>
    Reported-by: Zheng Wang <hackerzheng666@gmail.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/Yw4ASqkYcUhUfoY2@kili
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4979655a80f50261ffd612c1b4c08a9df7aa37a
Author: Shenwei Wang <shenwei.wang@nxp.com>
Date:   Fri Aug 5 09:45:29 2022 -0500

    serial: fsl_lpuart: RS485 RTS polariy is inverse
    
    commit 846651eca073e2e02e37490a4a52752415d84781 upstream.
    
    The setting of RS485 RTS polarity is inverse in the current driver.
    
    When the property of 'rs485-rts-active-low' is enabled in the dts node,
    the RTS signal should be LOW during sending. Otherwise, if there is no
    such a property, the RTS should be HIGH during sending.
    
    Fixes: 03895cf41d18 ("tty: serial: fsl_lpuart: Add support for RS-485")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Nicolas Diaz <nicolas.diaz@nxp.com>
    Signed-off-by: Shenwei Wang <shenwei.wang@nxp.com>
    Link: https://lore.kernel.org/r/20220805144529.604856-1-shenwei.wang@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 841203204349ffc69de2358bf9f5a1bd15a3beea
Author: Yacan Liu <liuyacan@corp.netease.com>
Date:   Tue Aug 30 23:23:14 2022 +0800

    net/smc: Remove redundant refcount increase
    
    [ Upstream commit a8424a9b4522a3ab9f32175ad6d848739079071f ]
    
    For passive connections, the refcount increment has been done in
    smc_clcsock_accept()-->smc_sock_alloc().
    
    Fixes: 3b2dec2603d5 ("net/smc: restructure client and server code in af_smc")
    Signed-off-by: Yacan Liu <liuyacan@corp.netease.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Link: https://lore.kernel.org/r/20220830152314.838736-1-liuyacan@corp.netease.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5996fdc086c32d8bae276db8570db0937d5210d
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Aug 31 20:01:32 2022 -0700

    Revert "sch_cake: Return __NET_XMIT_STOLEN when consuming enqueued skb"
    
    [ Upstream commit 0b4f688d53fdc2a731b9d9cdf0c96255bc024ea6 ]
    
    This reverts commit 90fabae8a2c225c4e4936723c38857887edde5cc.
    
    Patch was applied hastily, revert and let the v2 be reviewed.
    
    Fixes: 90fabae8a2c2 ("sch_cake: Return __NET_XMIT_STOLEN when consuming enqueued skb")
    Link: https://lore.kernel.org/all/87wnao2ha3.fsf@toke.dk/
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12f99f07a5f4d7ec8d72da6ee8ef66f048634f6a
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Aug 30 11:56:55 2022 -0700

    tcp: annotate data-race around challenge_timestamp
    
    [ Upstream commit 8c70521238b7863c2af607e20bcba20f974c969b ]
    
    challenge_timestamp can be read an written by concurrent threads.
    
    This was expected, but we need to annotate the race to avoid potential issues.
    
    Following patch moves challenge_timestamp and challenge_count
    to per-netns storage to provide better isolation.
    
    Fixes: 354e4aa391ed ("tcp: RFC 5961 5.2 Blind Data Injection Attack Mitigation")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b216cb5469c14e6949b234c90015bf38e54c83f2
Author: Toke Høiland-Jørgensen <toke@toke.dk>
Date:   Wed Aug 31 11:21:03 2022 +0200

    sch_cake: Return __NET_XMIT_STOLEN when consuming enqueued skb
    
    [ Upstream commit 90fabae8a2c225c4e4936723c38857887edde5cc ]
    
    When the GSO splitting feature of sch_cake is enabled, GSO superpackets
    will be broken up and the resulting segments enqueued in place of the
    original skb. In this case, CAKE calls consume_skb() on the original skb,
    but still returns NET_XMIT_SUCCESS. This can confuse parent qdiscs into
    assuming the original skb still exists, when it really has been freed. Fix
    this by adding the __NET_XMIT_STOLEN flag to the return value in this case.
    
    Fixes: 0c850344d388 ("sch_cake: Conditionally split GSO segments")
    Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Reported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-18231
    Link: https://lore.kernel.org/r/20220831092103.442868-1-toke@toke.dk
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8a0c321319ad64a5427d6172cd9c23b4d6ca1e8
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Sat Aug 27 11:13:14 2022 -0700

    kcm: fix strp_init() order and cleanup
    
    [ Upstream commit 8fc29ff3910f3af08a7c40a75d436b5720efe2bf ]
    
    strp_init() is called just a few lines above this csk->sk_user_data
    check, it also initializes strp->work etc., therefore, it is
    unnecessary to call strp_done() to cancel the freshly initialized
    work.
    
    And if sk_user_data is already used by KCM, psock->strp should not be
    touched, particularly strp->work state, so we need to move strp_init()
    after the csk->sk_user_data check.
    
    This also makes a lockdep warning reported by syzbot go away.
    
    Reported-and-tested-by: syzbot+9fc084a4348493ef65d2@syzkaller.appspotmail.com
    Reported-by: syzbot+e696806ef96cdd2d87cd@syzkaller.appspotmail.com
    Fixes: e5571240236c ("kcm: Check if sk_user_data already set in kcm_attach")
    Fixes: dff8baa26117 ("kcm: Call strp_stop before strp_done in kcm_attach")
    Cc: Tom Herbert <tom@herbertland.com>
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Link: https://lore.kernel.org/r/20220827181314.193710-1-xiyou.wangcong@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11f1e0c95e6d4774c56ec78cb8c5597554da3c08
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Sat Aug 27 23:38:15 2022 +0800

    ethernet: rocker: fix sleep in atomic context bug in neigh_timer_handler
    
    [ Upstream commit c0955bf957be4bead01fae1d791476260da7325d ]
    
    The function neigh_timer_handler() is a timer handler that runs in an
    atomic context. When used by rocker, neigh_timer_handler() calls
    "kzalloc(.., GFP_KERNEL)" that may sleep. As a result, the sleep in
    atomic context bug will happen. One of the processes is shown below:
    
    ofdpa_fib4_add()
     ...
     neigh_add_timer()
    
    (wait a timer)
    
    neigh_timer_handler()
     neigh_release()
      neigh_destroy()
       rocker_port_neigh_destroy()
        rocker_world_port_neigh_destroy()
         ofdpa_port_neigh_destroy()
          ofdpa_port_ipv4_neigh()
           kzalloc(sizeof(.., GFP_KERNEL) //may sleep
    
    This patch changes the gfp_t parameter of kzalloc() from GFP_KERNEL to
    GFP_ATOMIC in order to mitigate the bug.
    
    Fixes: 00fc0c51e35b ("rocker: Change world_ops API and implementation to be switchdev independant")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f63e0c9d1a1542f311387bf9ca670469a48ed68
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu Aug 25 18:08:40 2022 +0300

    Revert "xhci: turn off port power in shutdown"
    
    [ Upstream commit 8531aa1659f7278d4f2ec7408cc000eaa8d85217 ]
    
    This reverts commit 83810f84ecf11dfc5a9414a8b762c3501b328185.
    
    Turning off port power in shutdown did cause issues such as a laptop not
    proprly powering off, and some specific usb devies failing to enumerate the
    subsequent boot after a warm reset.
    
    So revert this.
    
    Fixes: 83810f84ecf1 ("xhci: turn off port power in shutdown")
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20220825150840.132216-4-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 155ab65c2e10b7bdd4d54d14d74ec2eb8d5db3fe
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Aug 4 10:03:21 2022 +0300

    wifi: cfg80211: debugfs: fix return type in ht40allow_map_read()
    
    [ Upstream commit d776763f48084926b5d9e25507a3ddb7c9243d5e ]
    
    The return type is supposed to be ssize_t, which is signed long,
    but "r" was declared as unsigned int.  This means that on 64 bit systems
    we return positive values instead of negative error codes.
    
    Fixes: 80a3511d70e8 ("cfg80211: add debugfs HT40 allow map")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YutvOQeJm0UjLhwU@kili
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dede80aaf01f4b6e8657d23726cb4a3da226ec4c
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Aug 8 11:42:24 2022 +0800

    ieee802154/adf7242: defer destroy_workqueue call
    
    [ Upstream commit afe7116f6d3b888778ed6d95e3cf724767b9aedf ]
    
    There is a possible race condition (use-after-free) like below
    
      (FREE)                     |  (USE)
      adf7242_remove             |  adf7242_channel
       cancel_delayed_work_sync  |
        destroy_workqueue (1)    |   adf7242_cmd_rx
                                 |    mod_delayed_work (2)
                                 |
    
    The root cause for this race is that the upper layer (ieee802154) is
    unaware of this detaching event and the function adf7242_channel can
    be called without any checks.
    
    To fix this, we can add a flag write at the beginning of adf7242_remove
    and add flag check in adf7242_channel. Or we can just defer the
    destructive operation like other commit 3e0588c291d6 ("hamradio: defer
    ax25 kfree after unregister_netdev") which let the
    ieee802154_unregister_hw() to handle the synchronization. This patch
    takes the second option.
    
    Fixes: 58e9683d1475 ("net: ieee802154: adf7242: Fix OCL calibration
    runs")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Link: https://lore.kernel.org/r/20220808034224.12642-1-linma@zju.edu.cn
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb522b1384c0b61b0a75c14a55c78ac4b1622b5b
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Aug 1 14:37:31 2022 +0300

    platform/x86: pmc_atom: Fix SLP_TYPx bitfield mask
    
    [ Upstream commit 0a90ed8d0cfa29735a221eba14d9cb6c735d35b6 ]
    
    On Intel hardware the SLP_TYPx bitfield occupies bits 10-12 as per ACPI
    specification (see Table 4.13 "PM1 Control Registers Fixed Hardware
    Feature Control Bits" for the details).
    
    Fix the mask and other related definitions accordingly.
    
    Fixes: 93e5eadd1f6e ("x86/platform: New Intel Atom SOC power management controller driver")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20220801113734.36131-1-andriy.shevchenko@linux.intel.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e8cdde8c7bc979e6c96a9758a68d0b3f309fc96
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Aug 4 07:38:48 2022 -0700

    drm/msm/dsi: Fix number of regulators for msm8996_dsi_cfg
    
    [ Upstream commit 1e00d6ac8a3422765bae37aeac2002dfd3c0bda6 ]
    
    3 regulators are listed but the number 2 is specified. Fix it.
    
    Fixes: 3a3ff88a0fc1 ("drm/msm/dsi: Add 8x96 info in dsi_cfg")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/496318/
    Link: https://lore.kernel.org/r/20220804073608.v4.1.I1056ee3f77f71287f333279efe4c85f88d403f65@changeid
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89baca94d400c5e1aed8bbb2b8d53ee97bc277a6
Author: sunliming <sunliming@kylinos.cn>
Date:   Tue Jul 19 09:56:22 2022 +0800

    drm/msm/dsi: fix the inconsistent indenting
    
    [ Upstream commit 2f25a1fb4ec516c5ad67afd754334b491b9f09a5 ]
    
    Fix the inconsistent indenting in function msm_dsi_dphy_timing_calc_v3().
    
    Fix the following smatch warnings:
    
    drivers/gpu/drm/msm/dsi/phy/dsi_phy.c:350 msm_dsi_dphy_timing_calc_v3() warn: inconsistent indenting
    
    Fixes: f1fa7ff44056 ("drm/msm/dsi: implement auto PHY timing calculator for 10nm PHY")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: sunliming <sunliming@kylinos.cn>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/494662/
    Link: https://lore.kernel.org/r/20220719015622.646718-1-sunliming@kylinos.cn
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47d42ab06b342457f98d3b346d72d85d3862f8bd
Author: Enguerrand de Ribaucourt <enguerrand.de-ribaucourt@savoirfairelinux.com>
Date:   Thu Jun 23 15:46:44 2022 +0200

    net: dp83822: disable false carrier interrupt
    
    commit c96614eeab663646f57f67aa591e015abd8bd0ba upstream.
    
    When unplugging an Ethernet cable, false carrier events were produced by
    the PHY at a very high rate. Once the false carrier counter full, an
    interrupt was triggered every few clock cycles until the cable was
    replugged. This resulted in approximately 10k/s interrupts.
    
    Since the false carrier counter (FCSCR) is never used, we can safely
    disable this interrupt.
    
    In addition to improving performance, this also solved MDIO read
    timeouts I was randomly encountering with an i.MX8 fec MAC because of
    the interrupt flood. The interrupt count and MDIO timeout fix were
    tested on a v5.4.110 kernel.
    
    Fixes: 87461f7a58ab ("net: phy: DP83822 initial driver submission")
    Signed-off-by: Enguerrand de Ribaucourt <enguerrand.de-ribaucourt@savoirfairelinux.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aabdbd63c46ff6fa6661dd9d3aaaebb62141db90
Author: Yee Lee <yee.lee@mediatek.com>
Date:   Tue Sep 6 15:03:06 2022 +0800

    Revert "mm: kmemleak: take a full lowmem check in kmemleak_*_phys()"
    
    This reverts commit 23c2d497de21f25898fbea70aeb292ab8acc8c94.
    
    Commit 23c2d497de21 ("mm: kmemleak: take a full lowmem check in
    kmemleak_*_phys()") brought false leak alarms on some archs like arm64
    that does not init pfn boundary in early booting. The final solution
    lands on linux-6.0: commit 0c24e061196c ("mm: kmemleak: add rbtree and
    store physical address for objects allocated with PA").
    
    Revert this commit before linux-6.0. The original issue of invalid PA
    can be mitigated by additional check in devicetree.
    
    The false alarm report is as following: Kmemleak output: (Qemu/arm64)
    unreferenced object 0xffff0000c0170a00 (size 128):
      comm "swapper/0", pid 1, jiffies 4294892404 (age 126.208s)
      hex dump (first 32 bytes):
     62 61 73 65 00 00 00 00 00 00 00 00 00 00 00 00  base............
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<(____ptrval____)>] __kmalloc_track_caller+0x1b0/0x2e4
        [<(____ptrval____)>] kstrdup_const+0x8c/0xc4
        [<(____ptrval____)>] kvasprintf_const+0xbc/0xec
        [<(____ptrval____)>] kobject_set_name_vargs+0x58/0xe4
        [<(____ptrval____)>] kobject_add+0x84/0x100
        [<(____ptrval____)>] __of_attach_node_sysfs+0x78/0xec
        [<(____ptrval____)>] of_core_init+0x68/0x104
        [<(____ptrval____)>] driver_init+0x28/0x48
        [<(____ptrval____)>] do_basic_setup+0x14/0x28
        [<(____ptrval____)>] kernel_init_freeable+0x110/0x178
        [<(____ptrval____)>] kernel_init+0x20/0x1a0
        [<(____ptrval____)>] ret_from_fork+0x10/0x20
    
    This pacth is also applicable to linux-5.17.y/linux-5.18.y/linux-5.19.y
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Yee Lee <yee.lee@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aa8067fa31df8db6b6e5b216ce488a422ab7076
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Aug 31 09:46:12 2022 -0700

    fs: only do a memory barrier for the first set_buffer_uptodate()
    
    commit 2f79cdfe58c13949bbbb65ba5926abfe9561d0ec upstream.
    
    Commit d4252071b97d ("add barriers to buffer_uptodate and
    set_buffer_uptodate") added proper memory barriers to the buffer head
    BH_Uptodate bit, so that anybody who tests a buffer for being up-to-date
    will be guaranteed to actually see initialized state.
    
    However, that commit didn't _just_ add the memory barrier, it also ended
    up dropping the "was it already set" logic that the BUFFER_FNS() macro
    had.
    
    That's conceptually the right thing for a generic "this is a memory
    barrier" operation, but in the case of the buffer contents, we really
    only care about the memory barrier for the _first_ time we set the bit,
    in that the only memory ordering protection we need is to avoid anybody
    seeing uninitialized memory contents.
    
    Any other access ordering wouldn't be about the BH_Uptodate bit anyway,
    and would require some other proper lock (typically BH_Lock or the folio
    lock).  A reader that races with somebody invalidating the buffer head
    isn't an issue wrt the memory ordering, it's a serialization issue.
    
    Now, you'd think that the buffer head operations don't matter in this
    day and age (and I certainly thought so), but apparently some loads
    still end up being heavy users of buffer heads.  In particular, the
    kernel test robot reported that not having this bit access optimization
    in place caused a noticeable direct IO performance regression on ext4:
    
      fxmark.ssd_ext4_no_jnl_DWTL_54_directio.works/sec -26.5% regression
    
    although you presumably need a fast disk and a lot of cores to actually
    notice.
    
    Link: https://lore.kernel.org/all/Yw8L7HTZ%2FdE2%2Fo9C@xsang-OptiPlex-9020/
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Tested-by: Fengwei Yin <fengwei.yin@intel.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 135861f9e79dd9f533f665b75f8f7f87cad9a9dd
Author: Stanislaw Gruszka <stf_xl@wp.pl>
Date:   Mon Aug 15 09:37:37 2022 +0200

    wifi: iwlegacy: 4965: corrected fix for potential off-by-one overflow in il4965_rs_fill_link_cmd()
    
    commit 6d0ef7241553f3553a0a2764c69b07892705924c upstream.
    
    This reverts commit a8eb8e6f7159c7c20c0ddac428bde3d110890aa7 as
    it can cause invalid link quality command sent to the firmware
    and address the off-by-one issue by fixing condition of while loop.
    
    Cc: stable@vger.kernel.org
    Fixes: a8eb8e6f7159 ("wifi: iwlegacy: 4965: fix potential off-by-one overflow in il4965_rs_fill_link_cmd()")
    Signed-off-by: Stanislaw Gruszka <stf_xl@wp.pl>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220815073737.GA999388@wp.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 021805af5bedeafc76c117fc771c100b358ab419
Author: Hyunwoo Kim <imv4bel@gmail.com>
Date:   Wed Sep 7 09:07:14 2022 -0700

    efi: capsule-loader: Fix use-after-free in efi_capsule_write
    
    commit 9cb636b5f6a8cc6d1b50809ec8f8d33ae0c84c95 upstream.
    
    A race condition may occur if the user calls close() on another thread
    during a write() operation on the device node of the efi capsule.
    
    This is a race condition that occurs between the efi_capsule_write() and
    efi_capsule_flush() functions of efi_capsule_fops, which ultimately
    results in UAF.
    
    So, the page freeing process is modified to be done in
    efi_capsule_release() instead of efi_capsule_flush().
    
    Cc: <stable@vger.kernel.org> # v4.9+
    Signed-off-by: Hyunwoo Kim <imv4bel@gmail.com>
    Link: https://lore.kernel.org/all/20220907102920.GA88602@ubuntu/
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca0d26cc15fd2931b407f6fee249743fea8e8138
Author: Isaac J. Manjarres <isaacmanjarres@google.com>
Date:   Wed Aug 17 11:40:26 2022 -0700

    driver core: Don't probe devices after bus_type.match() probe deferral
    
    commit 25e9fbf0fd38868a429feabc38abebfc6dbf6542 upstream.
    
    Both __device_attach_driver() and __driver_attach() check the return
    code of the bus_type.match() function to see if the device needs to be
    added to the deferred probe list. After adding the device to the list,
    the logic attempts to bind the device to the driver anyway, as if the
    device had matched with the driver, which is not correct.
    
    If __device_attach_driver() detects that the device in question is not
    ready to match with a driver on the bus, then it doesn't make sense for
    the device to attempt to bind with the current driver or continue
    attempting to match with any of the other drivers on the bus. So, update
    the logic in __device_attach_driver() to reflect this.
    
    If __driver_attach() detects that a driver tried to match with a device
    that is not ready to match yet, then the driver should not attempt to bind
    with the device. However, the driver can still attempt to match and bind
    with other devices on the bus, as drivers can be bound to multiple
    devices. So, update the logic in __driver_attach() to reflect this.
    
    Fixes: 656b8035b0ee ("ARM: 8524/1: driver cohandle -EPROBE_DEFER from bus_type.match()")
    Cc: stable@vger.kernel.org
    Cc: Saravana Kannan <saravanak@google.com>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Saravana Kannan <saravanak@google.com>
    Signed-off-by: Isaac J. Manjarres <isaacmanjarres@google.com>
    Link: https://lore.kernel.org/r/20220817184026.3468620-1-isaacmanjarres@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

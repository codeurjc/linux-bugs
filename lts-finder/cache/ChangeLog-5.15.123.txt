commit 09996673e3139a6d86fc3d95c852b3a020e2fe5f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jul 27 08:47:05 2023 +0200

    Linux 5.15.123
    
    Link: https://lore.kernel.org/r/20230725104451.275227789@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Ron Economos <re@w6rz.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6c2f1ce413c805e4ee466d22d39191e0b17168b
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Mon Jun 26 13:40:58 2023 -0400

    Revert "drm/amd/display: edp do not add non-edid timings"
    
    commit d6149086b45e150c170beaa4546495fd1880724c upstream.
    
    This change causes regression when eDP and external display in mirror
    mode. When external display supports low resolution than eDP, use eDP
    timing to driver external display may cause corruption on external
    display.
    
    This reverts commit e749dd10e5f292061ad63d2b030194bf7d7d452c.
    
    Cc: stable@vger.kernel.org
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2655
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68eafe2947862e5bbbe86595826391aab3aed890
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 22 16:02:49 2021 +0100

    nixge: fix mac address error handling again
    
    commit a68229ca634066975fff6d4780155bd2eb14a82a upstream.
    
    The change to eth_hw_addr_set() caused gcc to correctly spot a
    bug that was introduced in an earlier incorrect fix:
    
    In file included from include/linux/etherdevice.h:21,
                     from drivers/net/ethernet/ni/nixge.c:7:
    In function '__dev_addr_set',
        inlined from 'eth_hw_addr_set' at include/linux/etherdevice.h:319:2,
        inlined from 'nixge_probe' at drivers/net/ethernet/ni/nixge.c:1286:3:
    include/linux/netdevice.h:4648:9: error: 'memcpy' reading 6 bytes from a region of size 0 [-Werror=stringop-overread]
     4648 |         memcpy(dev->dev_addr, addr, len);
          |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    As nixge_get_nvmem_address() can return either NULL or an error
    pointer, the NULL check is wrong, and we can end up reading from
    ERR_PTR(-EOPNOTSUPP), which gcc knows to contain zero readable
    bytes.
    
    Make the function always return an error pointer again but fix
    the check to match that.
    
    Fixes: f3956ebb3bf0 ("ethernet: use eth_hw_addr_set() instead of ether_addr_copy()")
    Fixes: abcd3d6fc640 ("net: nixge: Fix error path for obtaining mac address")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22f4093a421308db9fa28dbc19888ad49bf2a4c2
Author: Mohamed Khalfella <mkhalfella@purestorage.com>
Date:   Fri Jul 14 20:33:41 2023 +0000

    tracing/histograms: Return an error if we fail to add histogram to hist_vars list
    
    commit 4b8b3905165ef98386a3c06f196c85d21292d029 upstream.
    
    Commit 6018b585e8c6 ("tracing/histograms: Add histograms to hist_vars if
    they have referenced variables") added a check to fail histogram creation
    if save_hist_vars() failed to add histogram to hist_vars list. But the
    commit failed to set ret to failed return code before jumping to
    unregister histogram, fix it.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230714203341.51396-1-mkhalfella@purestorage.com
    
    Cc: stable@vger.kernel.org
    Fixes: 6018b585e8c6 ("tracing/histograms: Add histograms to hist_vars if they have referenced variables")
    Signed-off-by: Mohamed Khalfella <mkhalfella@purestorage.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78471c3ad36f2f259010fa6235f2758c6155080f
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Tue Jun 6 21:59:23 2023 +0800

    jbd2: recheck chechpointing non-dirty buffer
    
    commit c2d6fd9d6f35079f1669f0100f05b46708c74b7f upstream.
    
    There is a long-standing metadata corruption issue that happens from
    time to time, but it's very difficult to reproduce and analyse, benefit
    from the JBD2_CYCLE_RECORD option, we found out that the problem is the
    checkpointing process miss to write out some buffers which are raced by
    another do_get_write_access(). Looks below for detail.
    
    jbd2_log_do_checkpoint() //transaction X
     //buffer A is dirty and not belones to any transaction
     __buffer_relink_io() //move it to the IO list
     __flush_batch()
      write_dirty_buffer()
                                 do_get_write_access()
                                 clear_buffer_dirty
                                 __jbd2_journal_file_buffer()
                                 //add buffer A to a new transaction Y
       lock_buffer(bh)
       //doesn't write out
     __jbd2_journal_remove_checkpoint()
     //finish checkpoint except buffer A
     //filesystem corrupt if the new transaction Y isn't fully write out.
    
    Due to the t_checkpoint_list walking loop in jbd2_log_do_checkpoint()
    have already handles waiting for buffers under IO and re-added new
    transaction to complete commit, and it also removing cleaned buffers,
    this makes sure the list will eventually get empty. So it's fine to
    leave buffers on the t_checkpoint_list while flushing out and completely
    stop using the t_checkpoint_io_list.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Tested-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230606135928.434610-2-yi.zhang@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae6b6d21701431886a68a83e25a46a0bd108aeb
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Thu Jul 20 03:02:31 2023 +0300

    net: phy: prevent stale pointer dereference in phy_init()
    
    [ Upstream commit 1c613beaf877c0c0d755853dc62687e2013e55c4 ]
    
    mdio_bus_init() and phy_driver_register() both have error paths, and if
    those are ever hit, ethtool will have a stale pointer to the
    phy_ethtool_phy_ops stub structure, which references memory from a
    module that failed to load (phylib).
    
    It is probably hard to force an error in this code path even manually,
    but the error teardown path of phy_init() should be the same as
    phy_exit(), which is now simply not the case.
    
    Fixes: 55d8f053ce1b ("net: phy: Register ethtool PHY operations")
    Link: https://lore.kernel.org/netdev/ZLaiJ4G6TaJYGJyU@shell.armlinux.org.uk/
    Suggested-by: Russell King (Oracle) <linux@armlinux.org.uk>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20230720000231.1939689-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7168d2906fdf95b81ca6551cea7ab655fdde6fd
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:57 2023 +0000

    tcp: annotate data-races around fastopenq.max_qlen
    
    [ Upstream commit 70f360dd7042cb843635ece9d28335a4addff9eb ]
    
    This field can be read locklessly.
    
    Fixes: 1536e2857bd3 ("tcp: Add a TCP_FASTOPEN socket option to get a max backlog on its listner")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-12-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit accb138c10ff7ca30d264c0a9ccce8df8679097a
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:56 2023 +0000

    tcp: annotate data-races around icsk->icsk_user_timeout
    
    [ Upstream commit 26023e91e12c68669db416b97234328a03d8e499 ]
    
    This field can be read locklessly from do_tcp_getsockopt()
    
    Fixes: dca43c75e7e5 ("tcp: Add TCP_USER_TIMEOUT socket option.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-11-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b88371f000fa65ecc19bfdc542b64682f11aaa8
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:55 2023 +0000

    tcp: annotate data-races around tp->notsent_lowat
    
    [ Upstream commit 1aeb87bc1440c5447a7fa2d6e3c2cca52cbd206b ]
    
    tp->notsent_lowat can be read locklessly from do_tcp_getsockopt()
    and tcp_poll().
    
    Fixes: c9bee3b7fdec ("tcp: TCP_NOTSENT_LOWAT socket option")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-10-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f0a31f7325865a0a76a89cc06e9021965f82cf7
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:54 2023 +0000

    tcp: annotate data-races around rskq_defer_accept
    
    [ Upstream commit ae488c74422fb1dcd807c0201804b3b5e8a322a3 ]
    
    do_tcp_getsockopt() reads rskq_defer_accept while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-9-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff0fedfc75405bb300ae3c4649d96c7d0b23c2a3
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:53 2023 +0000

    tcp: annotate data-races around tp->linger2
    
    [ Upstream commit 9df5335ca974e688389c875546e5819778a80d59 ]
    
    do_tcp_getsockopt() reads tp->linger2 while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-8-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e187d88f3ba3e5cc86908a8260f13cba43f864cd
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:52 2023 +0000

    tcp: annotate data-races around icsk->icsk_syn_retries
    
    [ Upstream commit 3a037f0f3c4bfe44518f2fbb478aa2f99a9cd8bb ]
    
    do_tcp_getsockopt() and reqsk_timer_handler() read
    icsk->icsk_syn_retries while another cpu might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-7-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5617eeb546edf6bfd233c410dec60ca06fc173f
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:51 2023 +0000

    tcp: annotate data-races around tp->keepalive_probes
    
    [ Upstream commit 6e5e1de616bf5f3df1769abc9292191dfad9110a ]
    
    do_tcp_getsockopt() reads tp->keepalive_probes while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-6-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b2296a2ad2326cd2a175b913fdf2a4a4da3aaa6
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:50 2023 +0000

    tcp: annotate data-races around tp->keepalive_intvl
    
    [ Upstream commit 5ecf9d4f52ff2f1d4d44c9b68bc75688e82f13b4 ]
    
    do_tcp_getsockopt() reads tp->keepalive_intvl while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-5-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f70ebecdf3c229a8c55df22897a2e98f8483c0fb
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:49 2023 +0000

    tcp: annotate data-races around tp->keepalive_time
    
    [ Upstream commit 4164245c76ff906c9086758e1c3f87082a7f5ef5 ]
    
    do_tcp_getsockopt() reads tp->keepalive_time while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-4-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bcee93252684eefb1ec634d42e436ed04189a37
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:47 2023 +0000

    tcp: annotate data-races around tp->tcp_tx_delay
    
    [ Upstream commit 348b81b68b13ebd489a3e6a46aa1c384c731c919 ]
    
    do_tcp_getsockopt() reads tp->tcp_tx_delay while another cpu
    might change its value.
    
    Fixes: a842fe1425cb ("tcp: add optional per socket transmit delay")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-2-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10013f764ad2957de08968bd02870b6b7683e3f6
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jul 20 09:17:21 2023 +0200

    netfilter: nf_tables: skip bound chain on rule flush
    
    [ Upstream commit 6eaf41e87a223ae6f8e7a28d6e78384ad7e407f8 ]
    
    Skip bound chain when flushing table rules, the rule that owns this
    chain releases these objects.
    
    Otherwise, the following warning is triggered:
    
      WARNING: CPU: 2 PID: 1217 at net/netfilter/nf_tables_api.c:2013 nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
      CPU: 2 PID: 1217 Comm: chain-flush Not tainted 6.1.39 #1
      RIP: 0010:nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Reported-by: Kevin Rich <kevinrich1337@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbe1a82d46edeb3e8f782be8af65ea74d4488cc3
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Jul 19 20:19:43 2023 +0200

    netfilter: nf_tables: skip bound chain in netns release path
    
    [ Upstream commit 751d460ccff3137212f47d876221534bf0490996 ]
    
    Skip bound chain from netns release path, the rule that owns this chain
    releases these objects.
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 706ce3c81b5c8e262a8bcf116ea689d0710c3a13
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jul 19 21:08:21 2023 +0200

    netfilter: nft_set_pipapo: fix improper element removal
    
    [ Upstream commit 87b5a5c209405cb6b57424cdfa226a6dbd349232 ]
    
    end key should be equal to start unless NFT_SET_EXT_KEY_END is present.
    
    Its possible to add elements that only have a start key
    ("{ 1.0.0.0 . 2.0.0.0 }") without an internval end.
    
    Insertion treats this via:
    
    if (nft_set_ext_exists(ext, NFT_SET_EXT_KEY_END))
       end = (const u8 *)nft_set_ext_key_end(ext)->data;
    else
       end = start;
    
    but removal side always uses nft_set_ext_key_end().
    This is wrong and leads to garbage remaining in the set after removal
    next lookup/insert attempt will give:
    
    BUG: KASAN: slab-use-after-free in pipapo_get+0x8eb/0xb90
    Read of size 1 at addr ffff888100d50586 by task nft-pipapo_uaf_/1399
    Call Trace:
     kasan_report+0x105/0x140
     pipapo_get+0x8eb/0xb90
     nft_pipapo_insert+0x1dc/0x1710
     nf_tables_newsetelem+0x31f5/0x4e00
     ..
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Reported-by: lonial con <kongln9170@gmail.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62615b895ab447b6e87de3950d73f548da59d1f1
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jul 20 00:29:58 2023 +0200

    netfilter: nf_tables: fix spurious set element insertion failure
    
    [ Upstream commit ddbd8be68941985f166f5107109a90ce13147c44 ]
    
    On some platforms there is a padding hole in the nft_verdict
    structure, between the verdict code and the chain pointer.
    
    On element insertion, if the new element clashes with an existing one and
    NLM_F_EXCL flag isn't set, we want to ignore the -EEXIST error as long as
    the data associated with duplicated element is the same as the existing
    one.  The data equality check uses memcmp.
    
    For normal data (NFT_DATA_VALUE) this works fine, but for NFT_DATA_VERDICT
    padding area leads to spurious failure even if the verdict data is the
    same.
    
    This then makes the insertion fail with 'already exists' error, even
    though the new "key : data" matches an existing entry and userspace
    told the kernel that it doesn't want to receive an error indication.
    
    Fixes: c016c7e45ddf ("netfilter: nf_tables: honor NLM_F_EXCL flag in set element insertion")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c17b4ec9cc38596bc0d8508d450344823be2c79e
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Tue Jul 18 10:41:51 2023 -0700

    llc: Don't drop packet from non-root netns.
    
    [ Upstream commit 6631463b6e6673916d2481f692938f393148aa82 ]
    
    Now these upper layer protocol handlers can be called from llc_rcv()
    as sap->rcv_func(), which is registered by llc_sap_open().
    
      * function which is passed to register_8022_client()
        -> no in-kernel user calls register_8022_client().
    
      * snap_rcv()
        `- proto->rcvfunc() : registered by register_snap_client()
           -> aarp_rcv() and atalk_rcv() drop packets from non-root netns
    
      * stp_pdu_rcv()
        `- garp_protos[]->rcv() : registered by stp_proto_register()
           -> garp_pdu_rcv() and br_stp_rcv() are netns-aware
    
    So, we can safely remove the netns restriction in llc_rcv().
    
    Fixes: e730c15519d0 ("[NET]: Make packet reception network namespace safe")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2400ae8fd86d0dfb67bdff6e206b090b0606bbf4
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Sat Jul 15 16:16:56 2023 +0800

    fbdev: au1200fb: Fix missing IRQ check in au1200fb_drv_probe
    
    [ Upstream commit 4e88761f5f8c7869f15a2046b1a1116f4fab4ac8 ]
    
    This func misses checking for platform_get_irq()'s call and may passes the
    negative error codes to request_irq(), which takes unsigned IRQ #,
    causing it to fail with -EINVAL, overriding an original error code.
    
    Fix this by stop calling request_irq() with invalid IRQ #s.
    
    Fixes: 1630d85a8312 ("au1200fb: fix hardcoded IRQ")
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40276640bed8ca879369933a44ab42103f174d4c
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 17 14:59:18 2023 -0700

    Revert "tcp: avoid the lookup process failing to get sk in ehash table"
    
    [ Upstream commit 81b3ade5d2b98ad6e0a473b0e1e420a801275592 ]
    
    This reverts commit 3f4ca5fafc08881d7a57daa20449d171f2887043.
    
    Commit 3f4ca5fafc08 ("tcp: avoid the lookup process failing to get sk in
    ehash table") reversed the order in how a socket is inserted into ehash
    to fix an issue that ehash-lookup could fail when reqsk/full sk/twsk are
    swapped.  However, it introduced another lookup failure.
    
    The full socket in ehash is allocated from a slab with SLAB_TYPESAFE_BY_RCU
    and does not have SOCK_RCU_FREE, so the socket could be reused even while
    it is being referenced on another CPU doing RCU lookup.
    
    Let's say a socket is reused and inserted into the same hash bucket during
    lookup.  After the blamed commit, a new socket is inserted at the end of
    the list.  If that happens, we will skip sockets placed after the previous
    position of the reused socket, resulting in ehash lookup failure.
    
    As described in Documentation/RCU/rculist_nulls.rst, we should insert a
    new socket at the head of the list to avoid such an issue.
    
    This issue, the swap-lookup-failure, and another variant reported in [0]
    can all be handled properly by adding a locked ehash lookup suggested by
    Eric Dumazet [1].
    
    However, this issue could occur for every packet, thus more likely than
    the other two races, so let's revert the change for now.
    
    Link: https://lore.kernel.org/netdev/20230606064306.9192-1-duanmuquan@baidu.com/ [0]
    Link: https://lore.kernel.org/netdev/CANn89iK8snOz8TYOhhwfimC7ykYA78GA3Nyv8x06SZYa1nKdyA@mail.gmail.com/ [1]
    Fixes: 3f4ca5fafc08 ("tcp: avoid the lookup process failing to get sk in ehash table")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230717215918.15723-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b04ab5243e846ba0013e2c2d99df95448938c252
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Mon Jul 17 22:45:19 2023 +0800

    net:ipv6: check return value of pskb_trim()
    
    [ Upstream commit 4258faa130be4ea43e5e2d839467da421b8ff274 ]
    
    goto tx_err if an unexpected result is returned by pskb_tirm()
    in ip6erspan_tunnel_xmit().
    
    Fixes: 5a963eb61b7c ("ip6_gre: Add ERSPAN native tunnel support")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b87a7e3a330caabea48d6120bb58b430ee8f9fdd
Author: Wang Ming <machel@vivo.com>
Date:   Mon Jul 17 17:59:19 2023 +0800

    net: ipv4: Use kfree_sensitive instead of kfree
    
    [ Upstream commit daa751444fd9d4184270b1479d8af49aaf1a1ee6 ]
    
    key might contain private part of the key, so better use
    kfree_sensitive to free it.
    
    Fixes: 38320c70d282 ("[IPSEC]: Use crypto_aead and authenc in ESP")
    Signed-off-by: Wang Ming <machel@vivo.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dd4d1ff8ba1145fa0a58af6a031541ccbc9f745
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 17 14:44:45 2023 +0000

    tcp: annotate data-races around tcp_rsk(req)->ts_recent
    
    [ Upstream commit eba20811f32652bc1a52d5e7cc403859b86390d9 ]
    
    TCP request sockets are lockless, tcp_rsk(req)->ts_recent
    can change while being read by another cpu as syzbot noticed.
    
    This is harmless, but we should annotate the known races.
    
    Note that tcp_check_req() changes req->ts_recent a bit early,
    we might change this in the future.
    
    BUG: KCSAN: data-race in tcp_check_req / tcp_check_req
    
    write to 0xffff88813c8afb84 of 4 bytes by interrupt on cpu 1:
    tcp_check_req+0x694/0xc70 net/ipv4/tcp_minisocks.c:762
    tcp_v4_rcv+0x12db/0x1b70 net/ipv4/tcp_ipv4.c:2071
    ip_protocol_deliver_rcu+0x356/0x6d0 net/ipv4/ip_input.c:205
    ip_local_deliver_finish+0x13c/0x1a0 net/ipv4/ip_input.c:233
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_local_deliver+0xec/0x1c0 net/ipv4/ip_input.c:254
    dst_input include/net/dst.h:468 [inline]
    ip_rcv_finish net/ipv4/ip_input.c:449 [inline]
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_rcv+0x197/0x270 net/ipv4/ip_input.c:569
    __netif_receive_skb_one_core net/core/dev.c:5493 [inline]
    __netif_receive_skb+0x90/0x1b0 net/core/dev.c:5607
    process_backlog+0x21f/0x380 net/core/dev.c:5935
    __napi_poll+0x60/0x3b0 net/core/dev.c:6498
    napi_poll net/core/dev.c:6565 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6698
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    do_softirq+0x7e/0xb0 kernel/softirq.c:472
    __local_bh_enable_ip+0x64/0x70 kernel/softirq.c:396
    local_bh_enable+0x1f/0x20 include/linux/bottom_half.h:33
    rcu_read_unlock_bh include/linux/rcupdate.h:843 [inline]
    __dev_queue_xmit+0xabb/0x1d10 net/core/dev.c:4271
    dev_queue_xmit include/linux/netdevice.h:3088 [inline]
    neigh_hh_output include/net/neighbour.h:528 [inline]
    neigh_output include/net/neighbour.h:542 [inline]
    ip_finish_output2+0x700/0x840 net/ipv4/ip_output.c:229
    ip_finish_output+0xf4/0x240 net/ipv4/ip_output.c:317
    NF_HOOK_COND include/linux/netfilter.h:292 [inline]
    ip_output+0xe5/0x1b0 net/ipv4/ip_output.c:431
    dst_output include/net/dst.h:458 [inline]
    ip_local_out net/ipv4/ip_output.c:126 [inline]
    __ip_queue_xmit+0xa4d/0xa70 net/ipv4/ip_output.c:533
    ip_queue_xmit+0x38/0x40 net/ipv4/ip_output.c:547
    __tcp_transmit_skb+0x1194/0x16e0 net/ipv4/tcp_output.c:1399
    tcp_transmit_skb net/ipv4/tcp_output.c:1417 [inline]
    tcp_write_xmit+0x13ff/0x2fd0 net/ipv4/tcp_output.c:2693
    __tcp_push_pending_frames+0x6a/0x1a0 net/ipv4/tcp_output.c:2877
    tcp_push_pending_frames include/net/tcp.h:1952 [inline]
    __tcp_sock_set_cork net/ipv4/tcp.c:3336 [inline]
    tcp_sock_set_cork+0xe8/0x100 net/ipv4/tcp.c:3343
    rds_tcp_xmit_path_complete+0x3b/0x40 net/rds/tcp_send.c:52
    rds_send_xmit+0xf8d/0x1420 net/rds/send.c:422
    rds_send_worker+0x42/0x1d0 net/rds/threads.c:200
    process_one_work+0x3e6/0x750 kernel/workqueue.c:2408
    worker_thread+0x5f2/0xa10 kernel/workqueue.c:2555
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    read to 0xffff88813c8afb84 of 4 bytes by interrupt on cpu 0:
    tcp_check_req+0x32a/0xc70 net/ipv4/tcp_minisocks.c:622
    tcp_v4_rcv+0x12db/0x1b70 net/ipv4/tcp_ipv4.c:2071
    ip_protocol_deliver_rcu+0x356/0x6d0 net/ipv4/ip_input.c:205
    ip_local_deliver_finish+0x13c/0x1a0 net/ipv4/ip_input.c:233
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_local_deliver+0xec/0x1c0 net/ipv4/ip_input.c:254
    dst_input include/net/dst.h:468 [inline]
    ip_rcv_finish net/ipv4/ip_input.c:449 [inline]
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_rcv+0x197/0x270 net/ipv4/ip_input.c:569
    __netif_receive_skb_one_core net/core/dev.c:5493 [inline]
    __netif_receive_skb+0x90/0x1b0 net/core/dev.c:5607
    process_backlog+0x21f/0x380 net/core/dev.c:5935
    __napi_poll+0x60/0x3b0 net/core/dev.c:6498
    napi_poll net/core/dev.c:6565 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6698
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    run_ksoftirqd+0x17/0x20 kernel/softirq.c:939
    smpboot_thread_fn+0x30a/0x4a0 kernel/smpboot.c:164
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    value changed: 0x1cd237f1 -> 0x1cd237f2
    
    Fixes: 079096f103fa ("tcp/dccp: install syn_recv requests into ehash table")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230717144445.653164-3-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa941f53a2c286929571b0b764364e4cbaaf60ed
Author: Florian Kauer <florian.kauer@linutronix.de>
Date:   Mon Jul 17 10:54:44 2023 -0700

    igc: Prevent garbled TX queue with XDP ZEROCOPY
    
    [ Upstream commit 78adb4bcf99effbb960c5f9091e2e062509d1030 ]
    
    In normal operation, each populated queue item has
    next_to_watch pointing to the last TX desc of the packet,
    while each cleaned item has it set to 0. In particular,
    next_to_use that points to the next (necessarily clean)
    item to use has next_to_watch set to 0.
    
    When the TX queue is used both by an application using
    AF_XDP with ZEROCOPY as well as a second non-XDP application
    generating high traffic, the queue pointers can get in
    an invalid state where next_to_use points to an item
    where next_to_watch is NOT set to 0.
    
    However, the implementation assumes at several places
    that this is never the case, so if it does hold,
    bad things happen. In particular, within the loop inside
    of igc_clean_tx_irq(), next_to_clean can overtake next_to_use.
    Finally, this prevents any further transmission via
    this queue and it never gets unblocked or signaled.
    Secondly, if the queue is in this garbled state,
    the inner loop of igc_clean_tx_ring() will never terminate,
    completely hogging a CPU core.
    
    The reason is that igc_xdp_xmit_zc() reads next_to_use
    before acquiring the lock, and writing it back
    (potentially unmodified) later. If it got modified
    before locking, the outdated next_to_use is written
    pointing to an item that was already used elsewhere
    (and thus next_to_watch got written).
    
    Fixes: 9acf59a752d4 ("igc: Enable TX via AF_XDP zero-copy")
    Signed-off-by: Florian Kauer <florian.kauer@linutronix.de>
    Reviewed-by: Kurt Kanzenbach <kurt@linutronix.de>
    Tested-by: Kurt Kanzenbach <kurt@linutronix.de>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20230717175444.3217831-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e35dc107a172f971f72d1ccdbf942479ff72c40c
Author: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Date:   Mon Jul 17 21:45:28 2023 +0530

    bpf: Fix subprog idx logic in check_max_stack_depth
    
    [ Upstream commit ba7b3e7d5f9014be65879ede8fd599cb222901c9 ]
    
    The assignment to idx in check_max_stack_depth happens once we see a
    bpf_pseudo_call or bpf_pseudo_func. This is not an issue as the rest of
    the code performs a few checks and then pushes the frame to the frame
    stack, except the case of async callbacks. If the async callback case
    causes the loop iteration to be skipped, the idx assignment will be
    incorrect on the next iteration of the loop. The value stored in the
    frame stack (as the subprogno of the current subprog) will be incorrect.
    
    This leads to incorrect checks and incorrect tail_call_reachable
    marking. Save the target subprog in a new variable and only assign to
    idx once we are done with the is_async_cb check which may skip pushing
    of frame to the frame stack and subsequent stack depth checks and tail
    call markings.
    
    Fixes: 7ddc80a476c2 ("bpf: Teach stack depth check about async callbacks.")
    Signed-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
    Link: https://lore.kernel.org/r/20230717161530.1238-2-memxor@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e87eb224896fe7055be9054ecfb254e174cf782
Author: Geetha sowjanya <gakula@marvell.com>
Date:   Sun Jul 16 15:07:41 2023 +0530

    octeontx2-pf: Dont allocate BPIDs for LBK interfaces
    
    [ Upstream commit 8fcd7c7b3a38ab5e452f542fda8f7940e77e479a ]
    
    Current driver enables backpressure for LBK interfaces.
    But these interfaces do not support this feature.
    Hence, this patch fixes the issue by skipping the
    backpressure configuration for these interfaces.
    
    Fixes: 75f36270990c ("octeontx2-pf: Support to enable/disable pause frames via ethtool").
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Link: https://lore.kernel.org/r/20230716093741.28063-1-gakula@marvell.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87fc9616d606f929df1c79445c4167c31a2f0a7b
Author: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
Date:   Wed Jun 14 10:18:25 2023 +0800

    security: keys: Modify mismatched function name
    
    [ Upstream commit 2a4152742025c5f21482e8cebc581702a0fa5b01 ]
    
    No functional modification involved.
    
    security/keys/trusted-keys/trusted_tpm2.c:203: warning: expecting prototype for tpm_buf_append_auth(). Prototype was for tpm2_buf_append_auth() instead.
    
    Fixes: 2e19e10131a0 ("KEYS: trusted: Move TPM2 trusted keys code")
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Closes: https://bugzilla.openanolis.cn/show_bug.cgi?id=5524
    Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
    Reviewed-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fb37ce6c01e17839e26d03222f0b44e6a3ed2b9
Author: Ding Hui <dinghui@sangfor.com.cn>
Date:   Tue May 9 19:11:48 2023 +0800

    iavf: Fix out-of-bounds when setting channels on remove
    
    [ Upstream commit 7c4bced3caa749ce468b0c5de711c98476b23a52 ]
    
    If we set channels greater during iavf_remove(), and waiting reset done
    would be timeout, then returned with error but changed num_active_queues
    directly, that will lead to OOB like the following logs. Because the
    num_active_queues is greater than tx/rx_rings[] allocated actually.
    
    Reproducer:
    
      [root@host ~]# cat repro.sh
      #!/bin/bash
    
      pf_dbsf="0000:41:00.0"
      vf0_dbsf="0000:41:02.0"
      g_pids=()
    
      function do_set_numvf()
      {
          echo 2 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
          echo 0 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
      }
    
      function do_set_channel()
      {
          local nic=$(ls -1 --indicator-style=none /sys/bus/pci/devices/${vf0_dbsf}/net/)
          [ -z "$nic" ] && { sleep $((RANDOM%3)) ; return 1; }
          ifconfig $nic 192.168.18.5 netmask 255.255.255.0
          ifconfig $nic up
          ethtool -L $nic combined 1
          ethtool -L $nic combined 4
          sleep $((RANDOM%3))
      }
    
      function on_exit()
      {
          local pid
          for pid in "${g_pids[@]}"; do
              kill -0 "$pid" &>/dev/null && kill "$pid" &>/dev/null
          done
          g_pids=()
      }
    
      trap "on_exit; exit" EXIT
    
      while :; do do_set_numvf ; done &
      g_pids+=($!)
      while :; do do_set_channel ; done &
      g_pids+=($!)
    
      wait
    
    Result:
    
    [ 3506.152887] iavf 0000:41:02.0: Removing device
    [ 3510.400799] ==================================================================
    [ 3510.400820] BUG: KASAN: slab-out-of-bounds in iavf_free_all_tx_resources+0x156/0x160 [iavf]
    [ 3510.400823] Read of size 8 at addr ffff88b6f9311008 by task repro.sh/55536
    [ 3510.400823]
    [ 3510.400830] CPU: 101 PID: 55536 Comm: repro.sh Kdump: loaded Tainted: G           O     --------- -t - 4.18.0 #1
    [ 3510.400832] Hardware name: Powerleader PR2008AL/H12DSi-N6, BIOS 2.0 04/09/2021
    [ 3510.400835] Call Trace:
    [ 3510.400851]  dump_stack+0x71/0xab
    [ 3510.400860]  print_address_description+0x6b/0x290
    [ 3510.400865]  ? iavf_free_all_tx_resources+0x156/0x160 [iavf]
    [ 3510.400868]  kasan_report+0x14a/0x2b0
    [ 3510.400873]  iavf_free_all_tx_resources+0x156/0x160 [iavf]
    [ 3510.400880]  iavf_remove+0x2b6/0xc70 [iavf]
    [ 3510.400884]  ? iavf_free_all_rx_resources+0x160/0x160 [iavf]
    [ 3510.400891]  ? wait_woken+0x1d0/0x1d0
    [ 3510.400895]  ? notifier_call_chain+0xc1/0x130
    [ 3510.400903]  pci_device_remove+0xa8/0x1f0
    [ 3510.400910]  device_release_driver_internal+0x1c6/0x460
    [ 3510.400916]  pci_stop_bus_device+0x101/0x150
    [ 3510.400919]  pci_stop_and_remove_bus_device+0xe/0x20
    [ 3510.400924]  pci_iov_remove_virtfn+0x187/0x420
    [ 3510.400927]  ? pci_iov_add_virtfn+0xe10/0xe10
    [ 3510.400929]  ? pci_get_subsys+0x90/0x90
    [ 3510.400932]  sriov_disable+0xed/0x3e0
    [ 3510.400936]  ? bus_find_device+0x12d/0x1a0
    [ 3510.400953]  i40e_free_vfs+0x754/0x1210 [i40e]
    [ 3510.400966]  ? i40e_reset_all_vfs+0x880/0x880 [i40e]
    [ 3510.400968]  ? pci_get_device+0x7c/0x90
    [ 3510.400970]  ? pci_get_subsys+0x90/0x90
    [ 3510.400982]  ? pci_vfs_assigned.part.7+0x144/0x210
    [ 3510.400987]  ? __mutex_lock_slowpath+0x10/0x10
    [ 3510.400996]  i40e_pci_sriov_configure+0x1fa/0x2e0 [i40e]
    [ 3510.401001]  sriov_numvfs_store+0x214/0x290
    [ 3510.401005]  ? sriov_totalvfs_show+0x30/0x30
    [ 3510.401007]  ? __mutex_lock_slowpath+0x10/0x10
    [ 3510.401011]  ? __check_object_size+0x15a/0x350
    [ 3510.401018]  kernfs_fop_write+0x280/0x3f0
    [ 3510.401022]  vfs_write+0x145/0x440
    [ 3510.401025]  ksys_write+0xab/0x160
    [ 3510.401028]  ? __ia32_sys_read+0xb0/0xb0
    [ 3510.401031]  ? fput_many+0x1a/0x120
    [ 3510.401032]  ? filp_close+0xf0/0x130
    [ 3510.401038]  do_syscall_64+0xa0/0x370
    [ 3510.401041]  ? page_fault+0x8/0x30
    [ 3510.401043]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [ 3510.401073] RIP: 0033:0x7f3a9bb842c0
    [ 3510.401079] Code: 73 01 c3 48 8b 0d d8 cb 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 89 24 2d 00 00 75 10 b8 01 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 31 c3 48 83 ec 08 e8 fe dd 01 00 48 89 04 24
    [ 3510.401080] RSP: 002b:00007ffc05f1fe18 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [ 3510.401083] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f3a9bb842c0
    [ 3510.401085] RDX: 0000000000000002 RSI: 0000000002327408 RDI: 0000000000000001
    [ 3510.401086] RBP: 0000000002327408 R08: 00007f3a9be53780 R09: 00007f3a9c8a4700
    [ 3510.401086] R10: 0000000000000001 R11: 0000000000000246 R12: 0000000000000002
    [ 3510.401087] R13: 0000000000000001 R14: 00007f3a9be52620 R15: 0000000000000001
    [ 3510.401090]
    [ 3510.401093] Allocated by task 76795:
    [ 3510.401098]  kasan_kmalloc+0xa6/0xd0
    [ 3510.401099]  __kmalloc+0xfb/0x200
    [ 3510.401104]  iavf_init_interrupt_scheme+0x26f/0x1310 [iavf]
    [ 3510.401108]  iavf_watchdog_task+0x1d58/0x4050 [iavf]
    [ 3510.401114]  process_one_work+0x56a/0x11f0
    [ 3510.401115]  worker_thread+0x8f/0xf40
    [ 3510.401117]  kthread+0x2a0/0x390
    [ 3510.401119]  ret_from_fork+0x1f/0x40
    [ 3510.401122]  0xffffffffffffffff
    [ 3510.401123]
    
    In timeout handling, we should keep the original num_active_queues
    and reset num_req_queues to 0.
    
    Fixes: 4e5e6b5d9d13 ("iavf: Fix return of set the new channel count")
    Signed-off-by: Ding Hui <dinghui@sangfor.com.cn>
    Cc: Donglin Peng <pengdonglin@sangfor.com.cn>
    Cc: Huang Cun <huangcun@sangfor.com.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 345c44e18cc10cded85cb9134830e1684495c866
Author: Ding Hui <dinghui@sangfor.com.cn>
Date:   Tue May 9 19:11:47 2023 +0800

    iavf: Fix use-after-free in free_netdev
    
    [ Upstream commit 5f4fa1672d98fe99d2297b03add35346f1685d6b ]
    
    We do netif_napi_add() for all allocated q_vectors[], but potentially
    do netif_napi_del() for part of them, then kfree q_vectors and leave
    invalid pointers at dev->napi_list.
    
    Reproducer:
    
      [root@host ~]# cat repro.sh
      #!/bin/bash
    
      pf_dbsf="0000:41:00.0"
      vf0_dbsf="0000:41:02.0"
      g_pids=()
    
      function do_set_numvf()
      {
          echo 2 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
          echo 0 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
      }
    
      function do_set_channel()
      {
          local nic=$(ls -1 --indicator-style=none /sys/bus/pci/devices/${vf0_dbsf}/net/)
          [ -z "$nic" ] && { sleep $((RANDOM%3)) ; return 1; }
          ifconfig $nic 192.168.18.5 netmask 255.255.255.0
          ifconfig $nic up
          ethtool -L $nic combined 1
          ethtool -L $nic combined 4
          sleep $((RANDOM%3))
      }
    
      function on_exit()
      {
          local pid
          for pid in "${g_pids[@]}"; do
              kill -0 "$pid" &>/dev/null && kill "$pid" &>/dev/null
          done
          g_pids=()
      }
    
      trap "on_exit; exit" EXIT
    
      while :; do do_set_numvf ; done &
      g_pids+=($!)
      while :; do do_set_channel ; done &
      g_pids+=($!)
    
      wait
    
    Result:
    
    [ 4093.900222] ==================================================================
    [ 4093.900230] BUG: KASAN: use-after-free in free_netdev+0x308/0x390
    [ 4093.900232] Read of size 8 at addr ffff88b4dc145640 by task repro.sh/6699
    [ 4093.900233]
    [ 4093.900236] CPU: 10 PID: 6699 Comm: repro.sh Kdump: loaded Tainted: G           O     --------- -t - 4.18.0 #1
    [ 4093.900238] Hardware name: Powerleader PR2008AL/H12DSi-N6, BIOS 2.0 04/09/2021
    [ 4093.900239] Call Trace:
    [ 4093.900244]  dump_stack+0x71/0xab
    [ 4093.900249]  print_address_description+0x6b/0x290
    [ 4093.900251]  ? free_netdev+0x308/0x390
    [ 4093.900252]  kasan_report+0x14a/0x2b0
    [ 4093.900254]  free_netdev+0x308/0x390
    [ 4093.900261]  iavf_remove+0x825/0xd20 [iavf]
    [ 4093.900265]  pci_device_remove+0xa8/0x1f0
    [ 4093.900268]  device_release_driver_internal+0x1c6/0x460
    [ 4093.900271]  pci_stop_bus_device+0x101/0x150
    [ 4093.900273]  pci_stop_and_remove_bus_device+0xe/0x20
    [ 4093.900275]  pci_iov_remove_virtfn+0x187/0x420
    [ 4093.900277]  ? pci_iov_add_virtfn+0xe10/0xe10
    [ 4093.900278]  ? pci_get_subsys+0x90/0x90
    [ 4093.900280]  sriov_disable+0xed/0x3e0
    [ 4093.900282]  ? bus_find_device+0x12d/0x1a0
    [ 4093.900290]  i40e_free_vfs+0x754/0x1210 [i40e]
    [ 4093.900298]  ? i40e_reset_all_vfs+0x880/0x880 [i40e]
    [ 4093.900299]  ? pci_get_device+0x7c/0x90
    [ 4093.900300]  ? pci_get_subsys+0x90/0x90
    [ 4093.900306]  ? pci_vfs_assigned.part.7+0x144/0x210
    [ 4093.900309]  ? __mutex_lock_slowpath+0x10/0x10
    [ 4093.900315]  i40e_pci_sriov_configure+0x1fa/0x2e0 [i40e]
    [ 4093.900318]  sriov_numvfs_store+0x214/0x290
    [ 4093.900320]  ? sriov_totalvfs_show+0x30/0x30
    [ 4093.900321]  ? __mutex_lock_slowpath+0x10/0x10
    [ 4093.900323]  ? __check_object_size+0x15a/0x350
    [ 4093.900326]  kernfs_fop_write+0x280/0x3f0
    [ 4093.900329]  vfs_write+0x145/0x440
    [ 4093.900330]  ksys_write+0xab/0x160
    [ 4093.900332]  ? __ia32_sys_read+0xb0/0xb0
    [ 4093.900334]  ? fput_many+0x1a/0x120
    [ 4093.900335]  ? filp_close+0xf0/0x130
    [ 4093.900338]  do_syscall_64+0xa0/0x370
    [ 4093.900339]  ? page_fault+0x8/0x30
    [ 4093.900341]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [ 4093.900357] RIP: 0033:0x7f16ad4d22c0
    [ 4093.900359] Code: 73 01 c3 48 8b 0d d8 cb 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 89 24 2d 00 00 75 10 b8 01 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 31 c3 48 83 ec 08 e8 fe dd 01 00 48 89 04 24
    [ 4093.900360] RSP: 002b:00007ffd6491b7f8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [ 4093.900362] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f16ad4d22c0
    [ 4093.900363] RDX: 0000000000000002 RSI: 0000000001a41408 RDI: 0000000000000001
    [ 4093.900364] RBP: 0000000001a41408 R08: 00007f16ad7a1780 R09: 00007f16ae1f2700
    [ 4093.900364] R10: 0000000000000001 R11: 0000000000000246 R12: 0000000000000002
    [ 4093.900365] R13: 0000000000000001 R14: 00007f16ad7a0620 R15: 0000000000000001
    [ 4093.900367]
    [ 4093.900368] Allocated by task 820:
    [ 4093.900371]  kasan_kmalloc+0xa6/0xd0
    [ 4093.900373]  __kmalloc+0xfb/0x200
    [ 4093.900376]  iavf_init_interrupt_scheme+0x63b/0x1320 [iavf]
    [ 4093.900380]  iavf_watchdog_task+0x3d51/0x52c0 [iavf]
    [ 4093.900382]  process_one_work+0x56a/0x11f0
    [ 4093.900383]  worker_thread+0x8f/0xf40
    [ 4093.900384]  kthread+0x2a0/0x390
    [ 4093.900385]  ret_from_fork+0x1f/0x40
    [ 4093.900387]  0xffffffffffffffff
    [ 4093.900387]
    [ 4093.900388] Freed by task 6699:
    [ 4093.900390]  __kasan_slab_free+0x137/0x190
    [ 4093.900391]  kfree+0x8b/0x1b0
    [ 4093.900394]  iavf_free_q_vectors+0x11d/0x1a0 [iavf]
    [ 4093.900397]  iavf_remove+0x35a/0xd20 [iavf]
    [ 4093.900399]  pci_device_remove+0xa8/0x1f0
    [ 4093.900400]  device_release_driver_internal+0x1c6/0x460
    [ 4093.900401]  pci_stop_bus_device+0x101/0x150
    [ 4093.900402]  pci_stop_and_remove_bus_device+0xe/0x20
    [ 4093.900403]  pci_iov_remove_virtfn+0x187/0x420
    [ 4093.900404]  sriov_disable+0xed/0x3e0
    [ 4093.900409]  i40e_free_vfs+0x754/0x1210 [i40e]
    [ 4093.900415]  i40e_pci_sriov_configure+0x1fa/0x2e0 [i40e]
    [ 4093.900416]  sriov_numvfs_store+0x214/0x290
    [ 4093.900417]  kernfs_fop_write+0x280/0x3f0
    [ 4093.900418]  vfs_write+0x145/0x440
    [ 4093.900419]  ksys_write+0xab/0x160
    [ 4093.900420]  do_syscall_64+0xa0/0x370
    [ 4093.900421]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [ 4093.900422]  0xffffffffffffffff
    [ 4093.900422]
    [ 4093.900424] The buggy address belongs to the object at ffff88b4dc144200
                    which belongs to the cache kmalloc-8k of size 8192
    [ 4093.900425] The buggy address is located 5184 bytes inside of
                    8192-byte region [ffff88b4dc144200, ffff88b4dc146200)
    [ 4093.900425] The buggy address belongs to the page:
    [ 4093.900427] page:ffffea00d3705000 refcount:1 mapcount:0 mapping:ffff88bf04415c80 index:0x0 compound_mapcount: 0
    [ 4093.900430] flags: 0x10000000008100(slab|head)
    [ 4093.900433] raw: 0010000000008100 dead000000000100 dead000000000200 ffff88bf04415c80
    [ 4093.900434] raw: 0000000000000000 0000000000030003 00000001ffffffff 0000000000000000
    [ 4093.900434] page dumped because: kasan: bad access detected
    [ 4093.900435]
    [ 4093.900435] Memory state around the buggy address:
    [ 4093.900436]  ffff88b4dc145500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900437]  ffff88b4dc145580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900438] >ffff88b4dc145600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900438]                                            ^
    [ 4093.900439]  ffff88b4dc145680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900440]  ffff88b4dc145700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900440] ==================================================================
    
    Although the patch #2 (of 2) can avoid the issue triggered by this
    repro.sh, there still are other potential risks that if num_active_queues
    is changed to less than allocated q_vectors[] by unexpected, the
    mismatched netif_napi_add/del() can also cause UAF.
    
    Since we actually call netif_napi_add() for all allocated q_vectors
    unconditionally in iavf_alloc_q_vectors(), so we should fix it by
    letting netif_napi_del() match to netif_napi_add().
    
    Fixes: 5eae00c57f5e ("i40evf: main driver core")
    Signed-off-by: Ding Hui <dinghui@sangfor.com.cn>
    Cc: Donglin Peng <pengdonglin@sangfor.com.cn>
    Cc: Huang Cun <huangcun@sangfor.com.cn>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Madhu Chittim <madhu.chittim@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52ed161463491b5bbe007d7846f8d71aed86d80b
Author: Victor Nogueira <victor@mojatatu.com>
Date:   Thu Jul 13 15:05:13 2023 -0300

    net: sched: cls_bpf: Undo tcf_bind_filter in case of an error
    
    [ Upstream commit 26a22194927e8521e304ed75c2f38d8068d55fc7 ]
    
    If cls_bpf_offload errors out, we must also undo tcf_bind_filter that
    was done before the error.
    
    Fix that by calling tcf_unbind_filter in errout_parms.
    
    Fixes: eadb41489fd2 ("net: cls_bpf: add support for marking filters as hardware-only")
    Signed-off-by: Victor Nogueira <victor@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ed16ecae5bfb367b731c2205684742570e6f806
Author: Daniel Golle <daniel@makrotopia.org>
Date:   Thu Jul 13 03:42:29 2023 +0100

    net: ethernet: mtk_eth_soc: handle probe deferral
    
    [ Upstream commit 1d6d537dc55d1f42d16290f00157ac387985b95b ]
    
    Move the call to of_get_ethdev_address to mtk_add_mac which is part of
    the probe function and can hence itself return -EPROBE_DEFER should
    of_get_ethdev_address return -EPROBE_DEFER. This allows us to entirely
    get rid of the mtk_init function.
    
    The problem of of_get_ethdev_address returning -EPROBE_DEFER surfaced
    in situations in which the NVMEM provider holding the MAC address has
    not yet be loaded at the time mtk_eth_soc is initially probed. In this
    case probing of mtk_eth_soc should be deferred instead of falling back
    to use a random MAC address, so once the NVMEM provider becomes
    available probing can be repeated.
    
    Fixes: 656e705243fd ("net-next: mediatek: add support for MT7623 ethernet")
    Signed-off-by: Daniel Golle <daniel@makrotopia.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39479093a47218e328244af328d382b628799b7a
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Oct 6 18:06:56 2021 -0700

    ethernet: use of_get_ethdev_address()
    
    [ Upstream commit 9ca01b25dffffecf6c59339aad6b4736680e9fa3 ]
    
    Use the new of_get_ethdev_address() helper for the cases
    where dev->dev_addr is passed in directly as the destination.
    
      @@
      expression dev, np;
      @@
      - of_get_mac_address(np, dev->dev_addr)
      + of_get_ethdev_address(np, dev)
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 1d6d537dc55d ("net: ethernet: mtk_eth_soc: handle probe deferral")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb1e666ec0770c533f611ffe1105613e1a71da25
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Oct 6 18:06:55 2021 -0700

    of: net: add a helper for loading netdev->dev_addr
    
    [ Upstream commit d466effe282ddbab6acb6c3120c1de0ee1b86d57 ]
    
    Commit 406f42fa0d3c ("net-next: When a bond have a massive amount
    of VLANs...") introduced a rbtree for faster Ethernet address look
    up. To maintain netdev->dev_addr in this tree we need to make all
    the writes to it got through appropriate helpers.
    
    There are roughly 40 places where netdev->dev_addr is passed
    as the destination to a of_get_mac_address() call. Add a helper
    which takes a dev pointer instead, so it can call an appropriate
    helper.
    
    Note that of_get_mac_address() already assumes the address is
    6 bytes long (ETH_ALEN) so use eth_hw_addr_set().
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 1d6d537dc55d ("net: ethernet: mtk_eth_soc: handle probe deferral")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43da399e509e338d9721d9cb4ecb19bb7686ef7c
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Oct 1 14:32:23 2021 -0700

    ethernet: use eth_hw_addr_set() instead of ether_addr_copy()
    
    [ Upstream commit f3956ebb3bf06ab2266ad5ee2214aed46405810c ]
    
    Convert Ethernet from ether_addr_copy() to eth_hw_addr_set():
    
      @@
      expression dev, np;
      @@
      - ether_addr_copy(dev->dev_addr, np)
      + eth_hw_addr_set(dev, np)
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 1d6d537dc55d ("net: ethernet: mtk_eth_soc: handle probe deferral")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fb402bd20e2ed864e829faa59c044a83144f54e
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 12 08:44:49 2023 -0700

    bridge: Add extack warning when enabling STP in netns.
    
    [ Upstream commit 56a16035bb6effb37177867cea94c13a8382f745 ]
    
    When we create an L2 loop on a bridge in netns, we will see packets storm
    even if STP is enabled.
    
      # unshare -n
      # ip link add br0 type bridge
      # ip link add veth0 type veth peer name veth1
      # ip link set veth0 master br0 up
      # ip link set veth1 master br0 up
      # ip link set br0 type bridge stp_state 1
      # ip link set br0 up
      # sleep 30
      # ip -s link show br0
      2: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
          link/ether b6:61:98:1c:1c:b5 brd ff:ff:ff:ff:ff:ff
          RX: bytes  packets  errors  dropped missed  mcast
          956553768  12861249 0       0       0       12861249  <-. Keep
          TX: bytes  packets  errors  dropped carrier collsns     |  increasing
          1027834    11951    0       0       0       0         <-'   rapidly
    
    This is because llc_rcv() drops all packets in non-root netns and BPDU
    is dropped.
    
    Let's add extack warning when enabling STP in netns.
    
      # unshare -n
      # ip link add br0 type bridge
      # ip link set br0 type bridge stp_state 1
      Warning: bridge: STP does not work in non-root netns.
    
    Note this commit will be reverted later when we namespacify the whole LLC
    infra.
    
    Fixes: e730c15519d0 ("[NET]: Make packet reception network namespace safe")
    Suggested-by: Harry Coin <hcoin@quietfountain.com>
    Link: https://lore.kernel.org/netdev/0f531295-e289-022d-5add-5ceffa0df9bc@quietfountain.com/
    Suggested-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec4ac15eced0859b8d61c9fbbe8e32a34de1e3c0
Author: Tanmay Patil <t-patil@ti.com>
Date:   Wed Jul 12 16:36:57 2023 +0530

    net: ethernet: ti: cpsw_ale: Fix cpsw_ale_get_field()/cpsw_ale_set_field()
    
    [ Upstream commit b685f1a58956fa36cc01123f253351b25bfacfda ]
    
    CPSW ALE has 75 bit ALE entries which are stored within three 32 bit words.
    The cpsw_ale_get_field() and cpsw_ale_set_field() functions assume that the
    field will be strictly contained within one word. However, this is not
    guaranteed to be the case and it is possible for ALE field entries to span
    across up to two words at the most.
    
    Fix the methods to handle getting/setting fields spanning up to two words.
    
    Fixes: db82173f23c5 ("netdev: driver: ethernet: add cpsw address lookup engine support")
    Signed-off-by: Tanmay Patil <t-patil@ti.com>
    [s-vadapalli@ti.com: rephrased commit message and added Fixes tag]
    Signed-off-by: Siddharth Vadapalli <s-vadapalli@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a5d6096ae5c3afd467e87fd035a747c611400a3
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Jul 5 08:30:03 2023 -0500

    pinctrl: amd: Use amd_pinconf_set() for all config options
    
    [ Upstream commit 635a750d958e158e17af0f524bedc484b27fbb93 ]
    
    On ASUS TUF A16 it is reported that the ITE5570 ACPI device connected to
    GPIO 7 is causing an interrupt storm.  This issue doesn't happen on
    Windows.
    
    Comparing the GPIO register configuration between Windows and Linux
    bit 20 has been configured as a pull up on Windows, but not on Linux.
    Checking GPIO declaration from the firmware it is clear it *should* have
    been a pull up on Linux as well.
    
    ```
    GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
             "\\_SB.GPIO", 0x00, ResourceConsumer, ,)
    {   // Pin list
    0x0007
    }
    ```
    
    On Linux amd_gpio_set_config() is currently only used for programming
    the debounce. Actually the GPIO core calls it with all the arguments
    that are supported by a GPIO, pinctrl-amd just responds `-ENOTSUPP`.
    
    To solve this issue expand amd_gpio_set_config() to support the other
    arguments amd_pinconf_set() supports, namely `PIN_CONFIG_BIAS_PULL_DOWN`,
    `PIN_CONFIG_BIAS_PULL_UP`, and `PIN_CONFIG_DRIVE_STRENGTH`.
    
    Reported-by: Nik P <npliashechnikov@gmail.com>
    Reported-by: Nathan Schulte <nmschulte@gmail.com>
    Reported-by: Friedrich Vock <friedrich.vock@gmx.de>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217336
    Reported-by: dridri85@gmail.com
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217493
    Link: https://lore.kernel.org/linux-input/20230530154058.17594-1-friedrich.vock@gmx.de/
    Tested-by: Jan Visser <starquake@linuxeverywhere.org>
    Fixes: 2956b5d94a76 ("pinctrl / gpio: Introduce .set_config() callback for GPIO chips")
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20230705133005.577-3-mario.limonciello@amd.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4727cece299444a98ae33dde8d1d4f152fd128a1
Author: James Clark <james.clark@arm.com>
Date:   Fri Jul 7 16:45:46 2023 +0100

    perf build: Fix library not found error when using CSLIBS
    
    [ Upstream commit 1feece2780ac2f8de45177fe53979726cee4b3d1 ]
    
    -L only specifies the search path for libraries directly provided in the
    link line with -l. Because -lopencsd isn't specified, it's only linked
    because it's a dependency of -lopencsd_c_api. Dependencies like this are
    resolved using the default system search paths or -rpath-link=... rather
    than -L. This means that compilation only works if OpenCSD is installed
    to the system rather than provided with the CSLIBS (-L) option.
    
    This could be fixed by adding -Wl,-rpath-link=$(CSLIBS) but that is less
    conventional than just adding -lopencsd to the link line so that it uses
    -L. -lopencsd seems to have been removed in commit ed17b1914978eddb
    ("perf tools: Drop requirement for libstdc++.so for libopencsd check")
    because it was thought that there was a chance compilation would work
    even if it didn't exist, but I think that only applies to libstdc++ so
    there is no harm to add it back. libopencsd.so and libopencsd_c_api.so
    would always exist together.
    
    Testing
    =======
    
    The following scenarios now all work:
    
     * Cross build with OpenCSD installed
     * Cross build using CSLIBS=...
     * Native build with OpenCSD installed
     * Native build using CSLIBS=...
     * Static cross build with OpenCSD installed
     * Static cross build with CSLIBS=...
    
    Committer testing:
    
      ⬢[acme@toolbox perf-tools]$ alias m
      alias m='make -k BUILD_BPF_SKEL=1 CORESIGHT=1 O=/tmp/build/perf-tools -C tools/perf install-bin && git status && perf test python ;  perf record -o /dev/null sleep 0.01 ; perf stat --null sleep 0.01'
      ⬢[acme@toolbox perf-tools]$ ldd ~/bin/perf | grep csd
            libopencsd_c_api.so.1 => /lib64/libopencsd_c_api.so.1 (0x00007fd49c44e000)
            libopencsd.so.1 => /lib64/libopencsd.so.1 (0x00007fd49bd56000)
      ⬢[acme@toolbox perf-tools]$ cat /etc/redhat-release
      Fedora release 36 (Thirty Six)
      ⬢[acme@toolbox perf-tools]$
    
    Fixes: ed17b1914978eddb ("perf tools: Drop requirement for libstdc++.so for libopencsd check")
    Reported-by: Radhey Shyam Pandey <radhey.shyam.pandey@amd.com>
    Signed-off-by: James Clark <james.clark@arm.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Radhey Shyam Pandey <radhey.shyam.pandey@amd.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Uwe Kleine-König <uwe@kleine-koenig.org>
    Cc: coresight@lists.linaro.org
    Closes: https://lore.kernel.org/linux-arm-kernel/56905d7a-a91e-883a-b707-9d5f686ba5f1@arm.com/
    Link: https://lore.kernel.org/all/36cc4dc6-bf4b-1093-1c0a-876e368af183@kleine-koenig.org/
    Link: https://lore.kernel.org/r/20230707154546.456720-1-james.clark@arm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29fb046ec031e3c723720449a526ca4ec7fda111
Author: Martin Kaiser <martin@kaiser.cx>
Date:   Wed Jun 28 15:24:37 2023 +0200

    fbdev: imxfb: warn about invalid left/right margin
    
    [ Upstream commit 4e47382fbca916d7db95cbf9e2d7ca2e9d1ca3fe ]
    
    Warn about invalid var->left_margin or var->right_margin. Their values
    are read from the device tree.
    
    We store var->left_margin-3 and var->right_margin-1 in register
    fields. These fields should be >= 0.
    
    Fixes: 7e8549bcee00 ("imxfb: Fix margin settings")
    Signed-off-by: Martin Kaiser <martin@kaiser.cx>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d191467534bae01bcc296209412df79bcff1535
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Thu Jun 29 09:14:52 2023 +0200

    spi: bcm63xx: fix max prepend length
    
    [ Upstream commit 5158814cbb37bbb38344b3ecddc24ba2ed0365f2 ]
    
    The command word is defined as following:
    
        /* Command */
        #define SPI_CMD_COMMAND_SHIFT           0
        #define SPI_CMD_DEVICE_ID_SHIFT         4
        #define SPI_CMD_PREPEND_BYTE_CNT_SHIFT  8
        #define SPI_CMD_ONE_BYTE_SHIFT          11
        #define SPI_CMD_ONE_WIRE_SHIFT          12
    
    If the prepend byte count field starts at bit 8, and the next defined
    bit is SPI_CMD_ONE_BYTE at bit 11, it can be at most 3 bits wide, and
    thus the max value is 7, not 15.
    
    Fixes: b17de076062a ("spi/bcm63xx: work around inability to keep CS up")
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Link: https://lore.kernel.org/r/20230629071453.62024-1-jonas.gorski@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2febd5f81e4bfba61d9f374dcca628aff374cc56
Author: Immad Mir <mirimmad17@gmail.com>
Date:   Fri Jun 23 19:17:08 2023 +0530

    FS: JFS: Check for read-only mounted filesystem in txBegin
    
    [ Upstream commit 95e2b352c03b0a86c5717ba1d24ea20969abcacc ]
    
     This patch adds a check for read-only mounted filesystem
     in txBegin before starting a transaction potentially saving
     from NULL pointer deref.
    
    Signed-off-by: Immad Mir <mirimmad17@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e94d0d378d2754b26fc54b429582553f7b53e15
Author: Immad Mir <mirimmad17@gmail.com>
Date:   Fri Jun 23 19:14:01 2023 +0530

    FS: JFS: Fix null-ptr-deref Read in txBegin
    
    [ Upstream commit 47cfdc338d674d38f4b2f22b7612cc6a2763ba27 ]
    
     Syzkaller reported an issue where txBegin may be called
     on a superblock in a read-only mounted filesystem which leads
     to NULL pointer deref. This could be solved by checking if
     the filesystem is read-only before calling txBegin, and returning
     with appropiate error code.
    
    Reported-By: syzbot+f1faa20eec55e0c8644c@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=be7e52c50c5182cc09a09ea6fc456446b2039de3
    
    Signed-off-by: Immad Mir <mirimmad17@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13ae3f2fd2be16bb35ee69a183db605877c57234
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Jun 22 17:43:57 2023 -0600

    MIPS: dec: prom: Address -Warray-bounds warning
    
    [ Upstream commit 7b191b9b55df2a844bd32d1d380f47a7df1c2896 ]
    
    Zero-length arrays are deprecated, and we are replacing them with flexible
    array members instead. So, replace zero-length array with flexible-array
    member in struct memmap.
    
    Address the following warning found after building (with GCC-13) mips64
    with decstation_64_defconfig:
    In function 'rex_setup_memory_region',
        inlined from 'prom_meminit' at arch/mips/dec/prom/memory.c:91:3:
    arch/mips/dec/prom/memory.c:72:31: error: array subscript i is outside array bounds of 'unsigned char[0]' [-Werror=array-bounds=]
       72 |                 if (bm->bitmap[i] == 0xff)
          |                     ~~~~~~~~~~^~~
    In file included from arch/mips/dec/prom/memory.c:16:
    ./arch/mips/include/asm/dec/prom.h: In function 'prom_meminit':
    ./arch/mips/include/asm/dec/prom.h:73:23: note: while referencing 'bitmap'
       73 |         unsigned char bitmap[0];
    
    This helps with the ongoing efforts to globally enable -Warray-bounds.
    
    This results in no differences in binary output.
    
    Link: https://github.com/KSPP/linux/issues/79
    Link: https://github.com/KSPP/linux/issues/323
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39f6292d75959e8accac0b3e24090094ba0824e9
Author: Yogesh <yogi.kernel@gmail.com>
Date:   Thu Jun 22 00:07:03 2023 +0530

    fs: jfs: Fix UBSAN: array-index-out-of-bounds in dbAllocDmapLev
    
    [ Upstream commit 4e302336d5ca1767a06beee7596a72d3bdc8d983 ]
    
    Syzkaller reported the following issue:
    
    UBSAN: array-index-out-of-bounds in fs/jfs/jfs_dmap.c:1965:6
    index -84 is out of range for type 's8[341]' (aka 'signed char[341]')
    CPU: 1 PID: 4995 Comm: syz-executor146 Not tainted 6.4.0-rc6-syzkaller-00037-gb6dad5178cea #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/27/2023
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106
     ubsan_epilogue lib/ubsan.c:217 [inline]
     __ubsan_handle_out_of_bounds+0x11c/0x150 lib/ubsan.c:348
     dbAllocDmapLev+0x3e5/0x430 fs/jfs/jfs_dmap.c:1965
     dbAllocCtl+0x113/0x920 fs/jfs/jfs_dmap.c:1809
     dbAllocAG+0x28f/0x10b0 fs/jfs/jfs_dmap.c:1350
     dbAlloc+0x658/0xca0 fs/jfs/jfs_dmap.c:874
     dtSplitUp fs/jfs/jfs_dtree.c:974 [inline]
     dtInsert+0xda7/0x6b00 fs/jfs/jfs_dtree.c:863
     jfs_create+0x7b6/0xbb0 fs/jfs/namei.c:137
     lookup_open fs/namei.c:3492 [inline]
     open_last_lookups fs/namei.c:3560 [inline]
     path_openat+0x13df/0x3170 fs/namei.c:3788
     do_filp_open+0x234/0x490 fs/namei.c:3818
     do_sys_openat2+0x13f/0x500 fs/open.c:1356
     do_sys_open fs/open.c:1372 [inline]
     __do_sys_openat fs/open.c:1388 [inline]
     __se_sys_openat fs/open.c:1383 [inline]
     __x64_sys_openat+0x247/0x290 fs/open.c:1383
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f1f4e33f7e9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 51 14 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffc21129578 EFLAGS: 00000246 ORIG_RAX: 0000000000000101
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f1f4e33f7e9
    RDX: 000000000000275a RSI: 0000000020000040 RDI: 00000000ffffff9c
    RBP: 00007f1f4e2ff080 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f1f4e2ff110
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    
    The bug occurs when the dbAllocDmapLev()function attempts to access
    dp->tree.stree[leafidx + LEAFIND] while the leafidx value is negative.
    
    To rectify this, the patch introduces a safeguard within the
    dbAllocDmapLev() function. A check has been added to verify if leafidx is
    negative. If it is, the function immediately returns an I/O error, preventing
    any further execution that could potentially cause harm.
    
    Tested via syzbot.
    
    Reported-by: syzbot+853a6f4dfa3cf37d3aea@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=ae2f5a27a07ae44b0f17
    Signed-off-by: Yogesh <yogi.kernel@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 985f9666698960dfc87a106d6314203fa90fda75
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jun 21 11:32:35 2023 +0200

    udf: Fix uninitialized array access for some pathnames
    
    [ Upstream commit 028f6055c912588e6f72722d89c30b401bbcf013 ]
    
    For filenames that begin with . and are between 2 and 5 characters long,
    UDF charset conversion code would read uninitialized memory in the
    output buffer. The only practical impact is that the name may be prepended a
    "unification hash" when it is not actually needed but still it is good
    to fix this.
    
    Reported-by: syzbot+cd311b1e43cc25f90d18@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/all/000000000000e2638a05fe9dc8f9@google.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 579d814de87c3cac69c9b261efa165d07cde3357
Author: Ye Bin <yebin10@huawei.com>
Date:   Mon Jun 5 22:07:31 2023 +0800

    quota: fix warning in dqgrab()
    
    [ Upstream commit d6a95db3c7ad160bc16b89e36449705309b52bcb ]
    
    There's issue as follows when do fault injection:
    WARNING: CPU: 1 PID: 14870 at include/linux/quotaops.h:51 dquot_disable+0x13b7/0x18c0
    Modules linked in:
    CPU: 1 PID: 14870 Comm: fsconfig Not tainted 6.3.0-next-20230505-00006-g5107a9c821af-dirty #541
    RIP: 0010:dquot_disable+0x13b7/0x18c0
    RSP: 0018:ffffc9000acc79e0 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff88825e41b980
    RDX: 0000000000000000 RSI: ffff88825e41b980 RDI: 0000000000000002
    RBP: ffff888179f68000 R08: ffffffff82087ca7 R09: 0000000000000000
    R10: 0000000000000001 R11: ffffed102f3ed026 R12: ffff888179f68130
    R13: ffff888179f68110 R14: dffffc0000000000 R15: ffff888179f68118
    FS:  00007f450a073740(0000) GS:ffff88882fc00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffe96f2efd8 CR3: 000000025c8ad000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     dquot_load_quota_sb+0xd53/0x1060
     dquot_resume+0x172/0x230
     ext4_reconfigure+0x1dc6/0x27b0
     reconfigure_super+0x515/0xa90
     __x64_sys_fsconfig+0xb19/0xd20
     do_syscall_64+0x39/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Above issue may happens as follows:
    ProcessA              ProcessB                    ProcessC
    sys_fsconfig
      vfs_fsconfig_locked
       reconfigure_super
         ext4_remount
          dquot_suspend -> suspend all type quota
    
                     sys_fsconfig
                      vfs_fsconfig_locked
                        reconfigure_super
                         ext4_remount
                          dquot_resume
                           ret = dquot_load_quota_sb
                            add_dquot_ref
                                               do_open  -> open file O_RDWR
                                                vfs_open
                                                 do_dentry_open
                                                  get_write_access
                                                   atomic_inc_unless_negative(&inode->i_writecount)
                                                  ext4_file_open
                                                   dquot_file_open
                                                    dquot_initialize
                                                      __dquot_initialize
                                                       dqget
                                                        atomic_inc(&dquot->dq_count);
    
                              __dquot_initialize
                               __dquot_initialize
                                dqget
                                 if (!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))
                                   ext4_acquire_dquot
                                    -> Return error DQ_ACTIVE_B flag isn't set
                             dquot_disable
                              invalidate_dquots
                               if (atomic_read(&dquot->dq_count))
                                dqgrab
                                 WARN_ON_ONCE(!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))
                                  -> Trigger warning
    
    In the above scenario, 'dquot->dq_flags' has no DQ_ACTIVE_B is normal when
    dqgrab().
    To solve above issue just replace the dqgrab() use in invalidate_dquots() with
    atomic_inc(&dquot->dq_count).
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230605140731.2427629-3-yebin10@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32c2f51fffecedc41318560cfa60d11c9a0e0461
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jun 5 22:07:30 2023 +0800

    quota: Properly disable quotas when add_dquot_ref() fails
    
    [ Upstream commit 6a4e3363792e30177cc3965697e34ddcea8b900b ]
    
    When add_dquot_ref() fails (usually due to IO error or ENOMEM), we want
    to disable quotas we are trying to enable. However dquot_disable() call
    was passed just the flags we are enabling so in case flags ==
    DQUOT_USAGE_ENABLED dquot_disable() call will just fail with EINVAL
    instead of properly disabling quotas. Fix the problem by always passing
    DQUOT_LIMITS_ENABLED | DQUOT_USAGE_ENABLED to dquot_disable() in this
    case.
    
    Reported-and-tested-by: Ye Bin <yebin10@huawei.com>
    Reported-by: syzbot+e633c79ceaecbf479854@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230605140731.2427629-2-yebin10@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d363075066ccf84b42368396fbeccbfe27e9294f
Author: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
Date:   Wed May 10 19:39:05 2023 +0200

    ALSA: emu10k1: roll up loops in DSP setup code for Audigy
    
    [ Upstream commit 8cabf83c7aa54530e699be56249fb44f9505c4f3 ]
    
    There is no apparent reason for the massive code duplication.
    
    Signed-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
    Link: https://lore.kernel.org/r/20230510173917.3073107-3-oswald.buddenhagen@gmx.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0d7dbc6b7a61a56028118c00af2c8319d44a682
Author: hackyzh002 <hackyzh002@gmail.com>
Date:   Wed Apr 19 20:20:58 2023 +0800

    drm/radeon: Fix integer overflow in radeon_cs_parser_init
    
    [ Upstream commit f828b681d0cd566f86351c0b913e6cb6ed8c7b9c ]
    
    The type of size is unsigned, if size is 0x40000000, there will be an
    integer overflow, size will be zero after size *= sizeof(uint32_t),
    will cause uninitialized memory to be referenced later
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: hackyzh002 <hackyzh002@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bca9fb7a5a86a33d3922a46552063070fcbe515b
Author: Eric Whitney <enwlinux@gmail.com>
Date:   Mon May 22 14:15:20 2023 -0400

    ext4: correct inline offset when handling xattrs in inode body
    
    commit 6909cf5c4101214f4305a62d582a5b93c7e1eb9a upstream.
    
    When run on a file system where the inline_data feature has been
    enabled, xfstests generic/269, generic/270, and generic/476 cause ext4
    to emit error messages indicating that inline directory entries are
    corrupted.  This occurs because the inline offset used to locate
    inline directory entries in the inode body is not updated when an
    xattr in that shared region is deleted and the region is shifted in
    memory to recover the space it occupied.  If the deleted xattr precedes
    the system.data attribute, which points to the inline directory entries,
    that attribute will be moved further up in the region.  The inline
    offset continues to point to whatever is located in system.data's former
    location, with unfortunate effects when used to access directory entries
    or (presumably) inline data in the inode body.
    
    Cc: stable@kernel.org
    Signed-off-by: Eric Whitney <enwlinux@gmail.com>
    Link: https://lore.kernel.org/r/20230522181520.1570360-1-enwlinux@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87336783d054efe47183d752a9b8c5cb65134710
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Sat Jul 1 11:47:23 2023 +0200

    ASoC: codecs: wcd938x: fix soundwire initialisation race
    
    commit 6f49256897083848ce9a59651f6b53fc80462397 upstream.
    
    Make sure that the soundwire device used for register accesses has been
    enumerated and initialised before trying to read the codec variant
    during component probe.
    
    This specifically avoids interpreting (a masked and shifted) -EBUSY
    errno as the variant:
    
            wcd938x_codec audio-codec: ASoC: error at soc_component_read_no_lock on audio-codec for register: [0x000034b0] -16
    
    in case the soundwire device has not yet been initialised, which in turn
    prevents some headphone controls from being registered.
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Reported-by: Steev Klimaszewski <steev@kali.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Link: https://lore.kernel.org/r/20230701094723.29379-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a14527c394d09520c5e0bd399d96692e3226aee9
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Jun 30 14:03:18 2023 +0200

    ASoC: codecs: wcd938x: fix codec initialisation race
    
    commit 85a61b1ce461a3f62f1019e5e6423c393c542bff upstream.
    
    Make sure to resume the codec and soundwire device before trying to read
    the codec variant and configure the device during component probe.
    
    This specifically avoids interpreting (a masked and shifted) -EBUSY
    errno as the variant:
    
            wcd938x_codec audio-codec: ASoC: error at soc_component_read_no_lock on audio-codec for register: [0x000034b0] -16
    
    when the soundwire device happens to be suspended, which in turn
    prevents some headphone controls from being registered.
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Reported-by: Steev Klimaszewski <steev@kali.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20230630120318.6571-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ca000456ea656c18a8bad9b39ffe5abbb3d742c
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:15 2023 +0200

    ASoC: codecs: wcd934x: fix resource leaks on component remove
    
    commit 798590cc7d3c2b5f3a7548d96dd4d8a081c1bc39 upstream.
    
    Make sure to release allocated MBHC resources also on component remove.
    
    This is specifically needed to allow probe deferrals of the sound card
    which otherwise fails when reprobing the codec component.
    
    Fixes: 9fb9b1690f0b ("ASoC: codecs: wcd934x: add mbhc support")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-6-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a34d252052b5da743ef82591c860fc947384d4e
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Jul 3 14:47:01 2023 +0200

    ASoC: codecs: wcd938x: fix missing mbhc init error handling
    
    commit 7dfae2631bfbdebecd35fe7b472ab3cc95c9ed66 upstream.
    
    MBHC initialisation can fail so add the missing error handling to avoid
    dereferencing an error pointer when later configuring the jack:
    
        Unable to handle kernel paging request at virtual address fffffffffffffff8
    
        pc : wcd_mbhc_start+0x28/0x380 [snd_soc_wcd_mbhc]
        lr : wcd938x_codec_set_jack+0x28/0x48 [snd_soc_wcd938x]
    
        Call trace:
         wcd_mbhc_start+0x28/0x380 [snd_soc_wcd_mbhc]
         wcd938x_codec_set_jack+0x28/0x48 [snd_soc_wcd938x]
         snd_soc_component_set_jack+0x28/0x8c [snd_soc_core]
         qcom_snd_wcd_jack_setup+0x7c/0x19c [snd_soc_qcom_common]
         sc8280xp_snd_init+0x20/0x2c [snd_soc_sc8280xp]
         snd_soc_link_init+0x28/0x90 [snd_soc_core]
         snd_soc_bind_card+0x628/0xbfc [snd_soc_core]
         snd_soc_register_card+0xec/0x104 [snd_soc_core]
         devm_snd_soc_register_card+0x4c/0xa4 [snd_soc_core]
         sc8280xp_platform_probe+0xf0/0x108 [snd_soc_sc8280xp]
    
    Fixes: bcee7ed09b8e ("ASoC: codecs: wcd938x: add Multi Button Headset Control support")
    Cc: stable@vger.kernel.org      # 5.15
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20230703124701.11734-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa44782a029374a17bb78d0c371bdd18111c484f
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:14 2023 +0200

    ASoC: codecs: wcd938x: fix resource leaks on component remove
    
    commit a3406f87775fee986876e03f93a84385f54d5999 upstream.
    
    Make sure to release allocated resources on component probe failure and
    on remove.
    
    This is specifically needed to allow probe deferrals of the sound card
    which otherwise fails when reprobing the codec component:
    
        snd-sc8280xp sound: ASoC: failed to instantiate card -517
        genirq: Flags mismatch irq 289. 00002001 (HPHR PDM WD INT) vs. 00002001 (HPHR PDM WD INT)
        wcd938x_codec audio-codec: Failed to request HPHR WD interrupt (-16)
        genirq: Flags mismatch irq 290. 00002001 (HPHL PDM WD INT) vs. 00002001 (HPHL PDM WD INT)
        wcd938x_codec audio-codec: Failed to request HPHL WD interrupt (-16)
        genirq: Flags mismatch irq 291. 00002001 (AUX PDM WD INT) vs. 00002001 (AUX PDM WD INT)
        wcd938x_codec audio-codec: Failed to request Aux WD interrupt (-16)
        genirq: Flags mismatch irq 292. 00002001 (mbhc sw intr) vs. 00002001 (mbhc sw intr)
        wcd938x_codec audio-codec: Failed to request mbhc interrupts -16
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-5-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90ab6446eb522e31421b77bf8f45714f5668f9a3
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:16 2023 +0200

    ASoC: codecs: wcd-mbhc-v2: fix resource leaks on component remove
    
    commit a5475829adcc600bc69ee9ff7c9e3e43fb4f8d30 upstream.
    
    The MBHC resources must be released on component probe failure and
    removal so can not be tied to the lifetime of the component device.
    
    This is specifically needed to allow probe deferrals of the sound card
    which otherwise fails when reprobing the codec component:
    
        snd-sc8280xp sound: ASoC: failed to instantiate card -517
        genirq: Flags mismatch irq 299. 00002001 (mbhc sw intr) vs. 00002001 (mbhc sw intr)
        wcd938x_codec audio-codec: Failed to request mbhc interrupts -16
        wcd938x_codec audio-codec: mbhc initialization failed
        wcd938x_codec audio-codec: ASoC: error at snd_soc_component_probe on audio-codec: -16
        snd-sc8280xp sound: ASoC: failed to instantiate card -16
    
    Fixes: 0e5c9e7ff899 ("ASoC: codecs: wcd: add multi button Headset detection support")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-7-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a05a277a8d230b39c8335f88b13c561de80a95a4
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:13 2023 +0200

    ASoC: codecs: wcd938x: fix missing clsh ctrl error handling
    
    commit ed0dd9205bf69593edb495cb4b086dbae96a3f05 upstream.
    
    Allocation of the clash control structure may fail so add the missing
    error handling to avoid dereferencing an error pointer.
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-4-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 574ffa6fdf30653294ea4364bf952f9cd7d7dd31
Author: Matus Gajdos <matuszpd@gmail.com>
Date:   Wed Jul 12 14:49:33 2023 +0200

    ASoC: fsl_sai: Disable bit clock with transmitter
    
    commit 269f399dc19f0e5c51711c3ba3bd06e0ef6ef403 upstream.
    
    Otherwise bit clock remains running writing invalid data to the DAC.
    
    Signed-off-by: Matus Gajdos <matuszpd@gmail.com>
    Acked-by: Shengjiu Wang <shengjiu.wang@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230712124934.32232-1-matuszpd@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 925bbcdbc4d00985c8ca0f932a1f77d21f1fee6a
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Jun 29 10:35:59 2023 -0400

    drm/amd/display: Keep PHY active for DP displays on DCN31
    
    commit 2387ccf43e3c6cb5dbd757c5ef410cca9f14b971 upstream.
    
    [Why & How]
    Port of a change that went into DCN314 to keep the PHY enabled
    when we have a connected and active DP display.
    
    The PHY can hang if PHY refclk is disabled inadvertently.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Josip Pavic <josip.pavic@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 742340371b010b240719c73885d36c82f9a41f5c
Author: Zhikai Zhai <zhikai.zhai@amd.com>
Date:   Fri Jun 30 11:35:14 2023 +0800

    drm/amd/display: Disable MPC split by default on special asic
    
    commit a460beefe77d780ac48f19d39333852a7f93ffc1 upstream.
    
    [WHY]
    All of pipes will be used when the MPC split enable on the dcn
    which just has 2 pipes. Then MPO enter will trigger the minimal
    transition which need programe dcn from 2 pipes MPC split to 2
    pipes MPO. This action will cause lag if happen frequently.
    
    [HOW]
    Disable the MPC split for the platform which dcn resource is limited
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Alvin Lee <alvin.lee2@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Zhikai Zhai <zhikai.zhai@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1369d0c586ad44f2d18fe2f4cbc5bcb24132fa71
Author: Jocelyn Falempe <jfalempe@redhat.com>
Date:   Tue Jul 11 11:20:44 2023 +0200

    drm/client: Fix memory leak in drm_client_modeset_probe
    
    commit 2329cc7a101af1a844fbf706c0724c0baea38365 upstream.
    
    When a new mode is set to modeset->mode, the previous mode should be freed.
    This fixes the following kmemleak report:
    
    drm_mode_duplicate+0x45/0x220 [drm]
    drm_client_modeset_probe+0x944/0xf50 [drm]
    __drm_fb_helper_initial_config_and_unlock+0xb4/0x2c0 [drm_kms_helper]
    drm_fbdev_client_hotplug+0x2bc/0x4d0 [drm_kms_helper]
    drm_client_register+0x169/0x240 [drm]
    ast_pci_probe+0x142/0x190 [ast]
    local_pci_probe+0xdc/0x180
    work_for_cpu_fn+0x4e/0xa0
    process_one_work+0x8b7/0x1540
    worker_thread+0x70a/0xed0
    kthread+0x29f/0x340
    ret_from_fork+0x1f/0x30
    
    cc: <stable@vger.kernel.org>
    Reported-by: Zhang Yi <yizhan@redhat.com>
    Signed-off-by: Jocelyn Falempe <jfalempe@redhat.com>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230711092203.68157-3-jfalempe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a85e23a1ef63e45a18f0a30d7816fcb4a865ca95
Author: Jocelyn Falempe <jfalempe@redhat.com>
Date:   Tue Jul 11 11:20:43 2023 +0200

    drm/client: Fix memory leak in drm_client_target_cloned
    
    commit c2a88e8bdf5f6239948d75283d0ae7e0c7945b03 upstream.
    
    dmt_mode is allocated and never freed in this function.
    It was found with the ast driver, but most drivers using generic fbdev
    setup are probably affected.
    
    This fixes the following kmemleak report:
      backtrace:
        [<00000000b391296d>] drm_mode_duplicate+0x45/0x220 [drm]
        [<00000000e45bb5b3>] drm_client_target_cloned.constprop.0+0x27b/0x480 [drm]
        [<00000000ed2d3a37>] drm_client_modeset_probe+0x6bd/0xf50 [drm]
        [<0000000010e5cc9d>] __drm_fb_helper_initial_config_and_unlock+0xb4/0x2c0 [drm_kms_helper]
        [<00000000909f82ca>] drm_fbdev_client_hotplug+0x2bc/0x4d0 [drm_kms_helper]
        [<00000000063a69aa>] drm_client_register+0x169/0x240 [drm]
        [<00000000a8c61525>] ast_pci_probe+0x142/0x190 [ast]
        [<00000000987f19bb>] local_pci_probe+0xdc/0x180
        [<000000004fca231b>] work_for_cpu_fn+0x4e/0xa0
        [<0000000000b85301>] process_one_work+0x8b7/0x1540
        [<000000003375b17c>] worker_thread+0x70a/0xed0
        [<00000000b0d43cd9>] kthread+0x29f/0x340
        [<000000008d770833>] ret_from_fork+0x1f/0x30
    unreferenced object 0xff11000333089a00 (size 128):
    
    cc: <stable@vger.kernel.org>
    Fixes: 1d42bbc8f7f9 ("drm/fbdev: fix cloning on fbcon")
    Reported-by: Zhang Yi <yizhan@redhat.com>
    Signed-off-by: Jocelyn Falempe <jfalempe@redhat.com>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230711092203.68157-2-jfalempe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82690148ff19c85a3b5153541fc69f9c8a183d19
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jul 13 23:16:46 2023 +0200

    selftests: tc: add ConnTrack procfs kconfig
    
    commit 031c99e71fedcce93b6785d38b7d287bf59e3952 upstream.
    
    When looking at the TC selftest reports, I noticed one test was failing
    because /proc/net/nf_conntrack was not available.
    
      not ok 373 3992 - Add ct action triggering DNAT tuple conflict
            Could not match regex pattern. Verify command output:
      cat: /proc/net/nf_conntrack: No such file or directory
    
    It is only available if NF_CONNTRACK_PROCFS kconfig is set. So the issue
    can be fixed simply by adding it to the list of required kconfig.
    
    Fixes: e46905641316 ("tc-testing: add test for ct DNAT tuple collision")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/netdev/0e061d4a-9a23-9f58-3b35-d8919de332d7@tessares.net/T/ [1]
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Tested-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20230713-tc-selftests-lkft-v1-3-1eb4fd3a96e7@tessares.net
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c3941bb1eb53abe7d640ffee5c4d6b559829ab3
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Jul 15 17:25:43 2023 +0800

    can: bcm: Fix UAF in bcm_proc_show()
    
    commit 55c3b96074f3f9b0aee19bf93cd71af7516582bb upstream.
    
    BUG: KASAN: slab-use-after-free in bcm_proc_show+0x969/0xa80
    Read of size 8 at addr ffff888155846230 by task cat/7862
    
    CPU: 1 PID: 7862 Comm: cat Not tainted 6.5.0-rc1-00153-gc8746099c197 #230
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
    Call Trace:
     <TASK>
     dump_stack_lvl+0xd5/0x150
     print_report+0xc1/0x5e0
     kasan_report+0xba/0xf0
     bcm_proc_show+0x969/0xa80
     seq_read_iter+0x4f6/0x1260
     seq_read+0x165/0x210
     proc_reg_read+0x227/0x300
     vfs_read+0x1d5/0x8d0
     ksys_read+0x11e/0x240
     do_syscall_64+0x35/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Allocated by task 7846:
     kasan_save_stack+0x1e/0x40
     kasan_set_track+0x21/0x30
     __kasan_kmalloc+0x9e/0xa0
     bcm_sendmsg+0x264b/0x44e0
     sock_sendmsg+0xda/0x180
     ____sys_sendmsg+0x735/0x920
     ___sys_sendmsg+0x11d/0x1b0
     __sys_sendmsg+0xfa/0x1d0
     do_syscall_64+0x35/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Freed by task 7846:
     kasan_save_stack+0x1e/0x40
     kasan_set_track+0x21/0x30
     kasan_save_free_info+0x27/0x40
     ____kasan_slab_free+0x161/0x1c0
     slab_free_freelist_hook+0x119/0x220
     __kmem_cache_free+0xb4/0x2e0
     rcu_core+0x809/0x1bd0
    
    bcm_op is freed before procfs entry be removed in bcm_release(),
    this lead to bcm_proc_show() may read the freed bcm_op.
    
    Fixes: ffd980f976e7 ("[CAN]: Add broadcast manager (bcm) protocol")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/all/20230715092543.15548-1-yuehaibing@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14845378763697bd5097e155e4a4fe4e17a7df00
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Jul 12 12:16:40 2023 +0100

    regmap: Account for register length in SMBus I/O limits
    
    commit 0c9d2eb5e94792fe64019008a04d4df5e57625af upstream.
    
    The SMBus I2C buses have limits on the size of transfers they can do but
    do not factor in the register length meaning we may try to do a transfer
    longer than our length limit, the core will not take care of this.
    Future changes will factor this out into the core but there are a number
    of users that assume current behaviour so let's just do something
    conservative here.
    
    This does not take account padding bits but practically speaking these
    are very rarely if ever used on I2C buses given that they generally run
    slowly enough to mean there's no issue.
    
    Cc: stable@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Xu Yilun <yilun.xu@intel.com>
    Link: https://lore.kernel.org/r/20230712-regmap-max-transfer-v1-2-80e2aed22e83@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ce258d0c622769cdbc20e7a9bcac0b283070ef4
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Jul 12 12:16:39 2023 +0100

    regmap: Drop initial version of maximum transfer length fixes
    
    commit bc64734825c59e18a27ac266b07e14944c111fd8 upstream.
    
    When problems were noticed with the register address not being taken
    into account when limiting raw transfers with I2C devices we fixed this
    in the core.  Unfortunately it has subsequently been realised that a lot
    of buses were relying on the prior behaviour, partly due to unclear
    documentation not making it obvious what was intended in the core.  This
    is all more involved to fix than is sensible for a fix commit so let's
    just drop the original fixes, a separate commit will fix the originally
    observed problem in an I2C specific way
    
    Fixes: 3981514180c9 ("regmap: Account for register length when chunking")
    Fixes: c8e796895e23 ("regmap: spi-avmm: Fix regmap_bus max_raw_write")
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Xu Yilun <yilun.xu@intel.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20230712-regmap-max-transfer-v1-1-80e2aed22e83@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3ee089a16a344a5cebe18a3dec6da4261d77139
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jul 13 23:16:45 2023 +0200

    selftests: tc: add 'ct' action kconfig dep
    
    commit 719b4774a8cb1a501e2d22a5a4a3a0a870e427d5 upstream.
    
    When looking for something else in LKFT reports [1], I noticed most of
    the tests were skipped because the "teardown stage" did not complete
    successfully.
    
    Pedro found out this is due to the fact CONFIG_NF_FLOW_TABLE is required
    but not listed in the 'config' file. Adding it to the list fixes the
    issues on LKFT side. CONFIG_NET_ACT_CT is now set to 'm' in the final
    kconfig.
    
    Fixes: c34b961a2492 ("net/sched: act_ct: Create nf flow table per zone")
    Cc: stable@vger.kernel.org
    Link: https://qa-reports.linaro.org/lkft/linux-next-master/build/next-20230711/testrun/18267241/suite/kselftest-tc-testing/test/tc-testing_tdc_sh/log [1]
    Link: https://lore.kernel.org/netdev/0e061d4a-9a23-9f58-3b35-d8919de332d7@tessares.net/T/ [2]
    Suggested-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Tested-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20230713-tc-selftests-lkft-v1-2-1eb4fd3a96e7@tessares.net
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a888b22cc0780e6bf28babe5df404a6e01527a2
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jul 13 23:16:44 2023 +0200

    selftests: tc: set timeout to 15 minutes
    
    commit fda05798c22a354efde09a76bdfc276b2d591829 upstream.
    
    When looking for something else in LKFT reports [1], I noticed that the
    TC selftest ended with a timeout error:
    
      not ok 1 selftests: tc-testing: tdc.sh # TIMEOUT 45 seconds
    
    The timeout had been introduced 3 years ago, see the Fixes commit below.
    
    This timeout is only in place when executing the selftests via the
    kselftests runner scripts. I guess this is not what most TC devs are
    using and nobody noticed the issue before.
    
    The new timeout is set to 15 minutes as suggested by Pedro [2]. It looks
    like it is plenty more time than what it takes in "normal" conditions.
    
    Fixes: 852c8cbf34d3 ("selftests/kselftest/runner.sh: Add 45 second timeout per test")
    Cc: stable@vger.kernel.org
    Link: https://qa-reports.linaro.org/lkft/linux-next-master/build/next-20230711/testrun/18267241/suite/kselftest-tc-testing/test/tc-testing_tdc_sh/log [1]
    Link: https://lore.kernel.org/netdev/0e061d4a-9a23-9f58-3b35-d8919de332d7@tessares.net/T/ [2]
    Suggested-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Reviewed-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20230713-tc-selftests-lkft-v1-1-1eb4fd3a96e7@tessares.net
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62ee5840326bc62727abc1b6b7eac47b95c293b2
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Jun 7 17:49:21 2023 +0200

    fuse: ioctl: translate ENOSYS in outarg
    
    commit 6a567e920fd0451bf29abc418df96c3365925770 upstream.
    
    Fuse shouldn't return ENOSYS from its ioctl implementation. If userspace
    responds with ENOSYS it should be translated to ENOTTY.
    
    There are two ways to return an error from the IOCTL request:
    
     - fuse_out_header.error
     - fuse_ioctl_out.result
    
    Commit 02c0cab8e734 ("fuse: ioctl: translate ENOSYS") already fixed this
    issue for the first case, but missed the second case.  This patch fixes the
    second case.
    
    Reported-by: Jonathan Katz <jkatz@eitmlabs.org>
    Closes: https://lore.kernel.org/all/CALKgVmcC1VUV_gJVq70n--omMJZUb4HSh_FqvLTHgNBc+HCLFQ@mail.gmail.com/
    Fixes: 02c0cab8e734 ("fuse: ioctl: translate ENOSYS")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab80a901f8daca07c4a54af0ab0de745c9918294
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jul 3 12:03:21 2023 +0100

    btrfs: zoned: fix memory leak after finding block group with super blocks
    
    commit f1a07c2b4e2c473ec322b8b9ece071b8c88a3512 upstream.
    
    At exclude_super_stripes(), if we happen to find a block group that has
    super blocks mapped to it and we are on a zoned filesystem, we error out
    as this is not supposed to happen, indicating either a bug or maybe some
    memory corruption for example. However we are exiting the function without
    freeing the memory allocated for the logical address of the super blocks.
    Fix this by freeing the logical address.
    
    Fixes: 12659251ca5d ("btrfs: implement log-structured superblock for ZONED mode")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ba7ac692a25354c4a43b32fd941f778d5b01bf8
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Jun 7 17:49:20 2023 +0200

    fuse: revalidate: don't invalidate if interrupted
    
    commit a9d1c4c6df0e568207907c04aed9e7beb1294c42 upstream.
    
    If the LOOKUP request triggered from fuse_dentry_revalidate() is
    interrupted, then the dentry will be invalidated, possibly resulting in
    submounts being unmounted.
    
    Reported-by: Xu Rongbo <xurongbo@baidu.com>
    Closes: https://lore.kernel.org/all/CAJfpegswN_CJJ6C3RZiaK6rpFmNyWmXfaEpnQUJ42KCwNF5tWw@mail.gmail.com/
    Fixes: 9e6268db496a ("[PATCH] FUSE - read-write operations")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9060caab4135dd660c4676d1ea33a6e0d3fc09d
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jul 14 13:42:06 2023 +0100

    btrfs: fix warning when putting transaction with qgroups enabled after abort
    
    commit aa84ce8a78a1a5c10cdf9c7a5fb0c999fbc2c8d6 upstream.
    
    If we have a transaction abort with qgroups enabled we get a warning
    triggered when doing the final put on the transaction, like this:
    
      [552.6789] ------------[ cut here ]------------
      [552.6815] WARNING: CPU: 4 PID: 81745 at fs/btrfs/transaction.c:144 btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6817] Modules linked in: btrfs blake2b_generic xor (...)
      [552.6819] CPU: 4 PID: 81745 Comm: btrfs-transacti Tainted: G        W          6.4.0-rc6-btrfs-next-134+ #1
      [552.6819] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org 04/01/2014
      [552.6819] RIP: 0010:btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6821] Code: bd a0 01 00 (...)
      [552.6821] RSP: 0018:ffffa168c0527e28 EFLAGS: 00010286
      [552.6821] RAX: ffff936042caed00 RBX: ffff93604a3eb448 RCX: 0000000000000000
      [552.6821] RDX: ffff93606421b028 RSI: ffffffff92ff0878 RDI: ffff93606421b010
      [552.6821] RBP: ffff93606421b000 R08: 0000000000000000 R09: ffffa168c0d07c20
      [552.6821] R10: 0000000000000000 R11: ffff93608dc52950 R12: ffffa168c0527e70
      [552.6821] R13: ffff93606421b000 R14: ffff93604a3eb420 R15: ffff93606421b028
      [552.6821] FS:  0000000000000000(0000) GS:ffff93675fb00000(0000) knlGS:0000000000000000
      [552.6821] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [552.6821] CR2: 0000558ad262b000 CR3: 000000014feda005 CR4: 0000000000370ee0
      [552.6822] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [552.6822] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [552.6822] Call Trace:
      [552.6822]  <TASK>
      [552.6822]  ? __warn+0x80/0x130
      [552.6822]  ? btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6824]  ? report_bug+0x1f4/0x200
      [552.6824]  ? handle_bug+0x42/0x70
      [552.6824]  ? exc_invalid_op+0x14/0x70
      [552.6824]  ? asm_exc_invalid_op+0x16/0x20
      [552.6824]  ? btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6826]  btrfs_cleanup_transaction+0xe7/0x5e0 [btrfs]
      [552.6828]  ? _raw_spin_unlock_irqrestore+0x23/0x40
      [552.6828]  ? try_to_wake_up+0x94/0x5e0
      [552.6828]  ? __pfx_process_timeout+0x10/0x10
      [552.6828]  transaction_kthread+0x103/0x1d0 [btrfs]
      [552.6830]  ? __pfx_transaction_kthread+0x10/0x10 [btrfs]
      [552.6832]  kthread+0xee/0x120
      [552.6832]  ? __pfx_kthread+0x10/0x10
      [552.6832]  ret_from_fork+0x29/0x50
      [552.6832]  </TASK>
      [552.6832] ---[ end trace 0000000000000000 ]---
    
    This corresponds to this line of code:
    
      void btrfs_put_transaction(struct btrfs_transaction *transaction)
      {
          (...)
              WARN_ON(!RB_EMPTY_ROOT(
                              &transaction->delayed_refs.dirty_extent_root));
          (...)
      }
    
    The warning happens because btrfs_qgroup_destroy_extent_records(), called
    in the transaction abort path, we free all entries from the rbtree
    "dirty_extent_root" with rbtree_postorder_for_each_entry_safe(), but we
    don't actually empty the rbtree - it's still pointing to nodes that were
    freed.
    
    So set the rbtree's root node to NULL to avoid this warning (assign
    RB_ROOT).
    
    Fixes: 81f7eb00ff5b ("btrfs: destroy qgroup extent records on transaction abort")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 232a104e38fefa524e62925fa1b8c9b5222af4a4
Author: Georg Müller <georgmueller@gmx.net>
Date:   Wed Jun 28 10:45:50 2023 +0200

    perf probe: Add test for regression introduced by switch to die_get_decl_file()
    
    commit 56cbeacf143530576905623ac72ae0964f3293a6 upstream.
    
    This patch adds a test to validate that 'perf probe' works for binaries
    where DWARF info is split into multiple CUs
    
    Signed-off-by: Georg Müller <georgmueller@gmx.net>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: regressions@lists.linux.dev
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230628084551.1860532-5-georgmueller@gmx.net
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9aecfebea24fe6071ace5cc9fd6d690b87276bbb
Author: Petr Pavlu <petr.pavlu@suse.com>
Date:   Thu Mar 23 14:04:12 2023 +0100

    keys: Fix linking a duplicate key to a keyring's assoc_array
    
    commit d55901522f96082a43b9842d34867363c0cdbac5 upstream.
    
    When making a DNS query inside the kernel using dns_query(), the request
    code can in rare cases end up creating a duplicate index key in the
    assoc_array of the destination keyring. It is eventually found by
    a BUG_ON() check in the assoc_array implementation and results in
    a crash.
    
    Example report:
    [2158499.700025] kernel BUG at ../lib/assoc_array.c:652!
    [2158499.700039] invalid opcode: 0000 [#1] SMP PTI
    [2158499.700065] CPU: 3 PID: 31985 Comm: kworker/3:1 Kdump: loaded Not tainted 5.3.18-150300.59.90-default #1 SLE15-SP3
    [2158499.700096] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 11/12/2020
    [2158499.700351] Workqueue: cifsiod cifs_resolve_server [cifs]
    [2158499.700380] RIP: 0010:assoc_array_insert+0x85f/0xa40
    [2158499.700401] Code: ff 74 2b 48 8b 3b 49 8b 45 18 4c 89 e6 48 83 e7 fe e8 95 ec 74 00 3b 45 88 7d db 85 c0 79 d4 0f 0b 0f 0b 0f 0b e8 41 f2 be ff <0f> 0b 0f 0b 81 7d 88 ff ff ff 7f 4c 89 eb 4c 8b ad 58 ff ff ff 0f
    [2158499.700448] RSP: 0018:ffffc0bd6187faf0 EFLAGS: 00010282
    [2158499.700470] RAX: ffff9f1ea7da2fe8 RBX: ffff9f1ea7da2fc1 RCX: 0000000000000005
    [2158499.700492] RDX: 0000000000000000 RSI: 0000000000000005 RDI: 0000000000000000
    [2158499.700515] RBP: ffffc0bd6187fbb0 R08: ffff9f185faf1100 R09: 0000000000000000
    [2158499.700538] R10: ffff9f1ea7da2cc0 R11: 000000005ed8cec8 R12: ffffc0bd6187fc28
    [2158499.700561] R13: ffff9f15feb8d000 R14: ffff9f1ea7da2fc0 R15: ffff9f168dc0d740
    [2158499.700585] FS:  0000000000000000(0000) GS:ffff9f185fac0000(0000) knlGS:0000000000000000
    [2158499.700610] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [2158499.700630] CR2: 00007fdd94fca238 CR3: 0000000809d8c006 CR4: 00000000003706e0
    [2158499.700702] Call Trace:
    [2158499.700741]  ? key_alloc+0x447/0x4b0
    [2158499.700768]  ? __key_link_begin+0x43/0xa0
    [2158499.700790]  __key_link_begin+0x43/0xa0
    [2158499.700814]  request_key_and_link+0x2c7/0x730
    [2158499.700847]  ? dns_resolver_read+0x20/0x20 [dns_resolver]
    [2158499.700873]  ? key_default_cmp+0x20/0x20
    [2158499.700898]  request_key_tag+0x43/0xa0
    [2158499.700926]  dns_query+0x114/0x2ca [dns_resolver]
    [2158499.701127]  dns_resolve_server_name_to_ip+0x194/0x310 [cifs]
    [2158499.701164]  ? scnprintf+0x49/0x90
    [2158499.701190]  ? __switch_to_asm+0x40/0x70
    [2158499.701211]  ? __switch_to_asm+0x34/0x70
    [2158499.701405]  reconn_set_ipaddr_from_hostname+0x81/0x2a0 [cifs]
    [2158499.701603]  cifs_resolve_server+0x4b/0xd0 [cifs]
    [2158499.701632]  process_one_work+0x1f8/0x3e0
    [2158499.701658]  worker_thread+0x2d/0x3f0
    [2158499.701682]  ? process_one_work+0x3e0/0x3e0
    [2158499.701703]  kthread+0x10d/0x130
    [2158499.701723]  ? kthread_park+0xb0/0xb0
    [2158499.701746]  ret_from_fork+0x1f/0x40
    
    The situation occurs as follows:
    * Some kernel facility invokes dns_query() to resolve a hostname, for
      example, "abcdef". The function registers its global DNS resolver
      cache as current->cred.thread_keyring and passes the query to
      request_key_net() -> request_key_tag() -> request_key_and_link().
    * Function request_key_and_link() creates a keyring_search_context
      object. Its match_data.cmp method gets set via a call to
      type->match_preparse() (resolves to dns_resolver_match_preparse()) to
      dns_resolver_cmp().
    * Function request_key_and_link() continues and invokes
      search_process_keyrings_rcu() which returns that a given key was not
      found. The control is then passed to request_key_and_link() ->
      construct_alloc_key().
    * Concurrently to that, a second task similarly makes a DNS query for
      "abcdef." and its result gets inserted into the DNS resolver cache.
    * Back on the first task, function construct_alloc_key() first runs
      __key_link_begin() to determine an assoc_array_edit operation to
      insert a new key. Index keys in the array are compared exactly as-is,
      using keyring_compare_object(). The operation finds that "abcdef" is
      not yet present in the destination keyring.
    * Function construct_alloc_key() continues and checks if a given key is
      already present on some keyring by again calling
      search_process_keyrings_rcu(). This search is done using
      dns_resolver_cmp() and "abcdef" gets matched with now present key
      "abcdef.".
    * The found key is linked on the destination keyring by calling
      __key_link() and using the previously calculated assoc_array_edit
      operation. This inserts the "abcdef." key in the array but creates
      a duplicity because the same index key is already present.
    
    Fix the problem by postponing __key_link_begin() in
    construct_alloc_key() until an actual key which should be linked into
    the destination keyring is determined.
    
    [jarkko@kernel.org: added a fixes tag and cc to stable]
    Cc: stable@vger.kernel.org # v5.3+
    Fixes: df593ee23e05 ("keys: Hoist locking out of __key_link_begin()")
    Signed-off-by: Petr Pavlu <petr.pavlu@suse.com>
    Reviewed-by: Joey Lee <jlee@suse.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b24b5e187bd7c98cad49416e47236a0323bd465
Author: Luka Guzenko <l.guzenko@web.de>
Date:   Tue Jul 18 18:12:41 2023 +0200

    ALSA: hda/realtek: Enable Mute LED on HP Laptop 15s-eq2xxx
    
    commit 0659400f18c0e6c0c69d74fe5d09e7f6fbbd52a2 upstream.
    
    The HP Laptop 15s-eq2xxx uses ALC236 codec and controls the mute LED using
    COEF 0x07 index 1. No existing quirk covers this configuration.
    Adds a new quirk and enables it for the device.
    
    Signed-off-by: Luka Guzenko <l.guzenko@web.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230718161241.393181-1-l.guzenko@web.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d04042a9fced74b91fee832b281c6ceea980b6c
Author: Christoffer Sandberg <cs@tuxedo.de>
Date:   Tue Jul 18 16:57:22 2023 +0200

    ALSA: hda/realtek: Add quirk for Clevo NS70AU
    
    commit c250ef8954eda2024c8861c36e9fc1b589481fe7 upstream.
    
    Fixes headset detection on Clevo NS70AU.
    
    Co-developed-by: Werner Sembach <wse@tuxedocomputers.com>
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Signed-off-by: Christoffer Sandberg <cs@tuxedo.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230718145722.10592-1-wse@tuxedocomputers.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5de09b7f9fe8f3e66be36a424cd9e2e6da0fd96
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Jul 13 15:57:13 2023 +0800

    ALSA: hda/realtek - remove 3k pull low procedure
    
    commit 69ea4c9d02b7947cdd612335a61cc1a02e544ccd upstream.
    
    This was the ALC283 depop procedure.
    Maybe this procedure wasn't suitable with new codec.
    So, let us remove it. But HP 15z-fc000 must do 3k pull low. If it
    reboot with plugged headset,
    it will have errors show don't find codec error messages. Run 3k pull
    low will solve issues.
    So, let AMD chipset will run this for workarround.
    
    Fixes: 5aec98913095 ("ALSA: hda/realtek - ALC236 headset MIC recording issue")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Reported-by: Joseph C. Sible <josephcsible@gmail.com>
    Closes: https://lore.kernel.org/r/CABpewhE4REgn9RJZduuEU6Z_ijXNeQWnrxO1tg70Gkw=F8qNYg@mail.gmail.com/
    Link: https://lore.kernel.org/r/4678992299664babac4403d9978e7ba7@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b8e37cbaa7637a81ac6c535b551865c5a062395
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Sep 5 10:28:59 2022 +0200

    Linux 5.10.141
    
    Link: https://lore.kernel.org/r/20220902121359.177846782@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdc786d737ec0eac92131d76372cd7f29c1e02e6
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Aug 22 10:53:46 2022 +0800

    net: neigh: don't call kfree_skb() under spin_lock_irqsave()
    
    commit d5485d9dd24e1d04e5509916515260186eb1455c upstream.
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So add all skb to
    a tmp list, then free them after spin_unlock_irqrestore() at
    once.
    
    Fixes: 66ba215cb513 ("neigh: fix possible DoS due to net iface start/stop loop")
    Suggested-by: Denis V. Lunev <den@openvz.org>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Nikolay Aleksandrov <razor@blackwall.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4931af31c402b20c528b43d90f98bc6f4bcb5810
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Wed Jul 27 17:33:12 2022 +0800

    net/af_packet: check len when min_header_len equals to 0
    
    commit dc633700f00f726e027846a318c5ffeb8deaaeda upstream.
    
    User can use AF_PACKET socket to send packets with the length of 0.
    When min_header_len equals to 0, packet_snd will call __dev_queue_xmit
    to send packets, and sock->type can be any type.
    
    Reported-by: syzbot+5ea725c25d06fb9114c4@syzkaller.appspotmail.com
    Fixes: fd1894224407 ("bpf: Don't redirect packets with invalid pkt_len")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64f6da455b66f17da52a479b23ca7e953f3552f5
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Thu Sep 1 16:33:56 2022 +0300

    xfs: revert "xfs: actually bump warning counts when we send warnings"
    
    commit bc37e4fb5cac2925b2e286b1f1d4fc2b519f7d92 upstream.
    
    This reverts commit 4b8628d57b725b32616965e66975fcdebe008fe7.
    
    XFS quota has had the concept of a "quota warning limit" since
    the earliest Irix implementation, but a mechanism for incrementing
    the warning counter was never implemented, as documented in the
    xfs_quota(8) man page. We do know from the historical archive that
    it was never incremented at runtime during quota reservation
    operations.
    
    With this commit, the warning counter quickly increments for every
    allocation attempt after the user has crossed a quote soft
    limit threshold, and this in turn transitions the user to hard
    quota failures, rendering soft quota thresholds and timers useless.
    This was reported as a regression by users.
    
    Because the intended behavior of this warning counter has never been
    understood or documented, and the result of this change is a regression
    in soft quota functionality, revert this commit to make soft quota
    limits and timers operable again.
    
    Fixes: 4b8628d57b72 ("xfs: actually bump warning counts when we send warnings)
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d34798d846d75cf2f90b7908726dde762a0ddccc
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Sep 1 16:33:55 2022 +0300

    xfs: fix soft lockup via spinning in filestream ag selection loop
    
    commit f650df7171b882dca737ddbbeb414100b31f16af upstream.
    
    The filestream AG selection loop uses pagf data to aid in AG
    selection, which depends on pagf initialization. If the in-core
    structure is not initialized, the caller invokes the AGF read path
    to do so and carries on. If another task enters the loop and finds
    a pagf init already in progress, the AGF read returns -EAGAIN and
    the task continues the loop. This does not increment the current ag
    index, however, which means the task spins on the current AGF buffer
    until unlocked.
    
    If the AGF read I/O submitted by the initial task happens to be
    delayed for whatever reason, this results in soft lockup warnings
    via the spinning task. This is reproduced by xfs/170. To avoid this
    problem, fix the AGF trylock failure path to properly iterate to the
    next AG. If a task iterates all AGs without making progress, the
    trylock behavior is dropped in favor of blocking locks and thus a
    soft lockup is no longer possible.
    
    Fixes: f48e2df8a877ca1c ("xfs: make xfs_*read_agf return EAGAIN to ALLOC_FLAG_TRYLOCK callers")
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f168801da95fe62c6751235665c27edf5ca2458a
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Sep 1 16:33:54 2022 +0300

    xfs: fix overfilling of reserve pool
    
    commit 82be38bcf8a2e056b4c99ce79a3827fa743df6ec upstream.
    
    Due to cycling of m_sb_lock, it's possible for multiple callers of
    xfs_reserve_blocks to race at changing the pool size, subtracting blocks
    from fdblocks, and actually putting it in the pool.  The result of all
    this is that we can overfill the reserve pool to hilarious levels.
    
    xfs_mod_fdblocks, when called with a positive value, already knows how
    to take freed blocks and either fill the reserve until it's full, or put
    them in fdblocks.  Use that instead of setting m_resblks_avail directly.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72a259bdd50dd6646a88e29fc769e50377e06d57
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Sep 1 16:33:53 2022 +0300

    xfs: always succeed at setting the reserve pool size
    
    commit 0baa2657dc4d79202148be79a3dc36c35f425060 upstream.
    
    Nowadays, xfs_mod_fdblocks will always choose to fill the reserve pool
    with freed blocks before adding to fdblocks.  Therefore, we can change
    the behavior of xfs_reserve_blocks slightly -- setting the target size
    of the pool should always succeed, since a deficiency will eventually
    be made up as blocks get freed.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb41f22df3ec7b0b4f7cd9a730a538645e324f2f
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Sep 1 16:33:52 2022 +0300

    xfs: remove infinite loop when reserving free block pool
    
    commit 15f04fdc75aaaa1cccb0b8b3af1be290e118a7bc upstream.
    
    [Added wrapper xfs_fdblocks_unavailable() for 5.10.y backport]
    
    Infinite loops in kernel code are scary.  Calls to xfs_reserve_blocks
    should be rare (people should just use the defaults!) so we really don't
    need to try so hard.  Simplify the logic here by removing the infinite
    loop.
    
    Cc: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28d8d2737e82fc29ff9e788597661abecc7f7994
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Thu Sep 1 16:16:10 2022 +0100

    io_uring: disable polling pollfree files
    
    Older kernels lack io_uring POLLFREE handling. As only affected files
    are signalfd and android binder the safest option would be to disable
    polling those files via io_uring and hope there are no users.
    
    Fixes: 221c5eb233823 ("io_uring: add support for IORING_OP_POLL")
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 744b0d3080709a172f0408aedabd1cedd24c2ee6
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Aug 12 19:05:09 2022 -0700

    kprobes: don't call disarm_kprobe() for disabled kprobes
    
    commit 9c80e79906b4ca440d09e7f116609262bb747909 upstream.
    
    The assumption in __disable_kprobe() is wrong, and it could try to disarm
    an already disarmed kprobe and fire the WARN_ONCE() below. [0]  We can
    easily reproduce this issue.
    
    1. Write 0 to /sys/kernel/debug/kprobes/enabled.
    
      # echo 0 > /sys/kernel/debug/kprobes/enabled
    
    2. Run execsnoop.  At this time, one kprobe is disabled.
    
      # /usr/share/bcc/tools/execsnoop &
      [1] 2460
      PCOMM            PID    PPID   RET ARGS
    
      # cat /sys/kernel/debug/kprobes/list
      ffffffff91345650  r  __x64_sys_execve+0x0    [FTRACE]
      ffffffff91345650  k  __x64_sys_execve+0x0    [DISABLED][FTRACE]
    
    3. Write 1 to /sys/kernel/debug/kprobes/enabled, which changes
       kprobes_all_disarmed to false but does not arm the disabled kprobe.
    
      # echo 1 > /sys/kernel/debug/kprobes/enabled
    
      # cat /sys/kernel/debug/kprobes/list
      ffffffff91345650  r  __x64_sys_execve+0x0    [FTRACE]
      ffffffff91345650  k  __x64_sys_execve+0x0    [DISABLED][FTRACE]
    
    4. Kill execsnoop, when __disable_kprobe() calls disarm_kprobe() for the
       disabled kprobe and hits the WARN_ONCE() in __disarm_kprobe_ftrace().
    
      # fg
      /usr/share/bcc/tools/execsnoop
      ^C
    
    Actually, WARN_ONCE() is fired twice, and __unregister_kprobe_top() misses
    some cleanups and leaves the aggregated kprobe in the hash table.  Then,
    __unregister_trace_kprobe() initialises tk->rp.kp.list and creates an
    infinite loop like this.
    
      aggregated kprobe.list -> kprobe.list -.
                                         ^    |
                                         '.__.'
    
    In this situation, these commands fall into the infinite loop and result
    in RCU stall or soft lockup.
    
      cat /sys/kernel/debug/kprobes/list : show_kprobe_addr() enters into the
                                           infinite loop with RCU.
    
      /usr/share/bcc/tools/execsnoop : warn_kprobe_rereg() holds kprobe_mutex,
                                       and __get_valid_kprobe() is stuck in
                                       the loop.
    
    To avoid the issue, make sure we don't call disarm_kprobe() for disabled
    kprobes.
    
    [0]
    Failed to disarm kprobe-ftrace at __x64_sys_execve+0x0/0x40 (error -2)
    WARNING: CPU: 6 PID: 2460 at kernel/kprobes.c:1130 __disarm_kprobe_ftrace.isra.19 (kernel/kprobes.c:1129)
    Modules linked in: ena
    CPU: 6 PID: 2460 Comm: execsnoop Not tainted 5.19.0+ #28
    Hardware name: Amazon EC2 c5.2xlarge/, BIOS 1.0 10/16/2017
    RIP: 0010:__disarm_kprobe_ftrace.isra.19 (kernel/kprobes.c:1129)
    Code: 24 8b 02 eb c1 80 3d c4 83 f2 01 00 75 d4 48 8b 75 00 89 c2 48 c7 c7 90 fa 0f 92 89 04 24 c6 05 ab 83 01 e8 e4 94 f0 ff <0f> 0b 8b 04 24 eb b1 89 c6 48 c7 c7 60 fa 0f 92 89 04 24 e8 cc 94
    RSP: 0018:ffff9e6ec154bd98 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: ffffffff930f7b00 RCX: 0000000000000001
    RDX: 0000000080000001 RSI: ffffffff921461c5 RDI: 00000000ffffffff
    RBP: ffff89c504286da8 R08: 0000000000000000 R09: c0000000fffeffff
    R10: 0000000000000000 R11: ffff9e6ec154bc28 R12: ffff89c502394e40
    R13: ffff89c502394c00 R14: ffff9e6ec154bc00 R15: 0000000000000000
    FS:  00007fe800398740(0000) GS:ffff89c812d80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000c00057f010 CR3: 0000000103b54006 CR4: 00000000007706e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
    <TASK>
     __disable_kprobe (kernel/kprobes.c:1716)
     disable_kprobe (kernel/kprobes.c:2392)
     __disable_trace_kprobe (kernel/trace/trace_kprobe.c:340)
     disable_trace_kprobe (kernel/trace/trace_kprobe.c:429)
     perf_trace_event_unreg.isra.2 (./include/linux/tracepoint.h:93 kernel/trace/trace_event_perf.c:168)
     perf_kprobe_destroy (kernel/trace/trace_event_perf.c:295)
     _free_event (kernel/events/core.c:4971)
     perf_event_release_kernel (kernel/events/core.c:5176)
     perf_release (kernel/events/core.c:5186)
     __fput (fs/file_table.c:321)
     task_work_run (./include/linux/sched.h:2056 (discriminator 1) kernel/task_work.c:179 (discriminator 1))
     exit_to_user_mode_prepare (./include/linux/resume_user_mode.h:49 kernel/entry/common.c:169 kernel/entry/common.c:201)
     syscall_exit_to_user_mode (./arch/x86/include/asm/jump_label.h:55 ./arch/x86/include/asm/nospec-branch.h:384 ./arch/x86/include/asm/entry-common.h:94 kernel/entry/common.c:133 kernel/entry/common.c:296)
     do_syscall_64 (arch/x86/entry/common.c:87)
     entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    RIP: 0033:0x7fe7ff210654
    Code: 15 79 89 20 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb be 0f 1f 00 8b 05 9a cd 20 00 48 63 ff 85 c0 75 11 b8 03 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 3a f3 c3 48 83 ec 18 48 89 7c 24 08 e8 34 fc
    RSP: 002b:00007ffdbd1d3538 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
    RAX: 0000000000000000 RBX: 0000000000000008 RCX: 00007fe7ff210654
    RDX: 0000000000000000 RSI: 0000000000002401 RDI: 0000000000000008
    RBP: 0000000000000000 R08: 94ae31d6fda838a4 R0900007fe8001c9d30
    R10: 00007ffdbd1d34b0 R11: 0000000000000246 R12: 00007ffdbd1d3600
    R13: 0000000000000000 R14: fffffffffffffffc R15: 00007ffdbd1d3560
    </TASK>
    
    Link: https://lkml.kernel.org/r/20220813020509.90805-1-kuniyu@amazon.com
    Fixes: 69d54b916d83 ("kprobes: makes kprobes/enabled works correctly for optimized kprobes.")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reported-by: Ayushman Dutta <ayudutta@amazon.com>
    Cc: "Naveen N. Rao" <naveen.n.rao@linux.ibm.com>
    Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Cc: Kuniyuki Iwashima <kuniyu@amazon.com>
    Cc: Kuniyuki Iwashima <kuni1840@gmail.com>
    Cc: Ayushman Dutta <ayudutta@amazon.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c70cce8923187693a608d2b56600ec529915f7b
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Wed Mar 31 16:48:44 2021 +0000

    lib/vdso: Mark do_hres_timens() and do_coarse_timens() __always_inline()
    
    [ Upstream commit 58efe9f696cf908f40d6672aeca81cb2ad2bc762 ]
    
    In the same spirit as commit c966533f8c6c ("lib/vdso: Mark do_hres()
    and do_coarse() as __always_inline"), mark do_hres_timens() and
    do_coarse_timens() __always_inline.
    
    The measurement below in on a non timens process, ie on the fastest path.
    
    On powerpc32, without the patch:
    
    clock-gettime-monotonic-raw:    vdso: 1155 nsec/call
    clock-gettime-monotonic-coarse:    vdso: 813 nsec/call
    clock-gettime-monotonic:    vdso: 1076 nsec/call
    
    With the patch:
    
    clock-gettime-monotonic-raw:    vdso: 1100 nsec/call
    clock-gettime-monotonic-coarse:    vdso: 667 nsec/call
    clock-gettime-monotonic:    vdso: 1025 nsec/call
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/90dcf45ebadfd5a07f24241551c62f619d1cb930.1617209142.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ba9e8fb47f6300a9245dff61256cd476a58838b
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Mon Aug 15 12:39:20 2022 +0200

    netfilter: conntrack: NF_CONNTRACK_PROCFS should no longer default to y
    
    [ Upstream commit aa5762c34213aba7a72dc58e70601370805fa794 ]
    
    NF_CONNTRACK_PROCFS was marked obsolete in commit 54b07dca68557b09
    ("netfilter: provide config option to disable ancient procfs parts") in
    v3.3.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afa169f79d479edb23f1a727a37265a25d5a1e8e
Author: Dusica Milinkovic <Dusica.Milinkovic@amd.com>
Date:   Wed Aug 10 09:43:15 2022 +0200

    drm/amdgpu: Increase tlb flush timeout for sriov
    
    [ Upstream commit 373008bfc9cdb0f050258947fa5a095f0657e1bc ]
    
    [Why]
    During multi-vf executing benchmark (Luxmark) observed kiq error timeout.
    It happenes because all of VFs do the tlb invalidation at the same time.
    Although each VF has the invalidate register set, from hardware side
    the invalidate requests are queue to execute.
    
    [How]
    In case of 12 VF increase timeout on 12*100ms
    
    Signed-off-by: Dusica Milinkovic <Dusica.Milinkovic@amd.com>
    Acked-by: Shaoyun Liu <shaoyun.liu@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f08a3712bac80bbf73dfc064c064b427804dcf3e
Author: Ilya Bakoulin <Ilya.Bakoulin@amd.com>
Date:   Tue Jul 26 16:19:38 2022 -0400

    drm/amd/display: Fix pixel clock programming
    
    [ Upstream commit 04fb918bf421b299feaee1006e82921d7d381f18 ]
    
    [Why]
    Some pixel clock values could cause HDMI TMDS SSCPs to be misaligned
    between different HDMI lanes when using YCbCr420 10-bit pixel format.
    
    BIOS functions for transmitter/encoder control take pixel clock in kHz
    increments, whereas the function for setting the pixel clock is in 100Hz
    increments. Setting pixel clock to a value that is not on a kHz boundary
    will cause the issue.
    
    [How]
    Round pixel clock down to nearest kHz in 10/12-bpc cases.
    
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Ilya Bakoulin <Ilya.Bakoulin@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60d522f317078381ff8a3599fe808f96fc256cd5
Author: Evan Quan <evan.quan@amd.com>
Date:   Wed Aug 10 11:08:31 2022 +0800

    drm/amd/pm: add missing ->fini_microcode interface for Sienna Cichlid
    
    [ Upstream commit 0a2d922a5618377cdf8fa476351362733ef55342 ]
    
    To avoid any potential memory leak.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2b7b8b1c4139d0c3de9e90a30a9259eee8a8f34
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Jun 20 11:45:34 2022 +0200

    s390/hypfs: avoid error message under KVM
    
    [ Upstream commit 7b6670b03641ac308aaa6fa2e6f964ac993b5ea3 ]
    
    When booting under KVM the following error messages are issued:
    
    hypfs.7f5705: The hardware system does not support hypfs
    hypfs.7a79f0: Initialization of hypfs failed with rc=-61
    
    Demote the severity of first message from "error" to "info" and issue
    the second message only in other error cases.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Heiko Carstens <hca@linux.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Link: https://lore.kernel.org/r/20220620094534.18967-1-jgross@suse.com
    [arch/s390/hypfs/hypfs_diag.c changed description]
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c35adafe42bd6c3bf2aca0a3f523dabc38fc23c8
Author: Denis V. Lunev <den@openvz.org>
Date:   Thu Aug 11 18:20:11 2022 +0300

    neigh: fix possible DoS due to net iface start/stop loop
    
    [ Upstream commit 66ba215cb51323e4e55e38fd5f250e0fae0cbc94 ]
    
    Normal processing of ARP request (usually this is Ethernet broadcast
    packet) coming to the host is looking like the following:
    * the packet comes to arp_process() call and is passed through routing
      procedure
    * the request is put into the queue using pneigh_enqueue() if
      corresponding ARP record is not local (common case for container
      records on the host)
    * the request is processed by timer (within 80 jiffies by default) and
      ARP reply is sent from the same arp_process() using
      NEIGH_CB(skb)->flags & LOCALLY_ENQUEUED condition (flag is set inside
      pneigh_enqueue())
    
    And here the problem comes. Linux kernel calls pneigh_queue_purge()
    which destroys the whole queue of ARP requests on ANY network interface
    start/stop event through __neigh_ifdown().
    
    This is actually not a problem within the original world as network
    interface start/stop was accessible to the host 'root' only, which
    could do more destructive things. But the world is changed and there
    are Linux containers available. Here container 'root' has an access
    to this API and could be considered as untrusted user in the hosting
    (container's) world.
    
    Thus there is an attack vector to other containers on node when
    container's root will endlessly start/stop interfaces. We have observed
    similar situation on a real production node when docker container was
    doing such activity and thus other containers on the node become not
    accessible.
    
    The patch proposed doing very simple thing. It drops only packets from
    the same namespace in the pneigh_queue_purge() where network interface
    state change is detected. This is enough to prevent the problem for the
    whole node preserving original semantics of the code.
    
    v2:
            - do del_timer_sync() if queue is empty after pneigh_queue_purge()
    v3:
            - rebase to net tree
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: David Ahern <dsahern@kernel.org>
    Cc: Yajun Deng <yajun.deng@linux.dev>
    Cc: Roopa Prabhu <roopa@nvidia.com>
    Cc: Christian Brauner <brauner@kernel.org>
    Cc: netdev@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
    Cc: Konstantin Khorenko <khorenko@virtuozzo.com>
    Cc: kernel@openvz.org
    Cc: devel@openvz.org
    Investigated-by: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c1dfeaeb3b4e3ea656041da1241e6ee3c3b3202
Author: Fudong Wang <Fudong.Wang@amd.com>
Date:   Wed Jul 27 12:01:29 2022 +0800

    drm/amd/display: clear optc underflow before turn off odm clock
    
    [ Upstream commit b2a93490201300a749ad261b5c5d05cb50179c44 ]
    
    [Why]
    After ODM clock off, optc underflow bit will be kept there always and clear not work.
    We need to clear that before clock off.
    
    [How]
    Clear that if have when clock off.
    
    Reviewed-by: Alvin Lee <alvin.lee2@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Fudong Wang <Fudong.Wang@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e5e67b13a040baff5ec265ae32b754e4776d723
Author: Alvin Lee <alvin.lee2@amd.com>
Date:   Thu Jul 28 09:51:05 2022 -0400

    drm/amd/display: For stereo keep "FLIP_ANY_FRAME"
    
    [ Upstream commit 84ef99c728079dfd21d6bc70b4c3e4af20602b3c ]
    
    [Description]
    Observed in stereomode that programming FLIP_LEFT_EYE
    can cause hangs. Keep FLIP_ANY_FRAME in stereo mode so
    the surface flip can take place before left or right eye
    
    Reviewed-by: Martin Leung <Martin.Leung@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Alvin Lee <alvin.lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 828b2a5399aa46a44b7be2615240016d7883fa0b
Author: Josip Pavic <Josip.Pavic@amd.com>
Date:   Thu Jul 21 15:33:00 2022 -0400

    drm/amd/display: Avoid MPC infinite loop
    
    [ Upstream commit 8de297dc046c180651c0500f8611663ae1c3828a ]
    
    [why]
    In some cases MPC tree bottom pipe ends up point to itself.  This causes
    iterating from top to bottom to hang the system in an infinite loop.
    
    [how]
    When looping to next MPC bottom pipe, check that the pointer is not same
    as current to avoid infinite loop.
    
    Reviewed-by: Josip Pavic <Josip.Pavic@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d36e2c264f7c7be02b0fb903871220782f041c0
Author: Wenbin Mei <wenbin.mei@mediatek.com>
Date:   Thu Jul 28 16:00:48 2022 +0800

    mmc: mtk-sd: Clear interrupts when cqe off/disable
    
    [ Upstream commit cc5d1692600613e72f32af60e27330fe0c79f4fe ]
    
    Currently we don't clear MSDC interrupts when cqe off/disable, which led
    to the data complete interrupt will be reserved for the next command.
    If the next command with data transfer after cqe off/disable, we process
    the CMD ready interrupt and trigger DMA start for data, but the data
    complete interrupt is already exists, then SW assume that the data transfer
    is complete, SW will trigger DMA stop, but the data may not be transmitted
    yet or is transmitting, so we may encounter the following error:
    mtk-msdc 11230000.mmc: CMD bus busy detected.
    
    Signed-off-by: Wenbin Mei <wenbin.mei@mediatek.com>
    Fixes: 88bd652b3c74 ("mmc: mediatek: command queue support")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220728080048.21336-1-wenbin.mei@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98f401d36396134c0c86e9e3bd00b6b6b028b521
Author: Jann Horn <jannh@google.com>
Date:   Wed Aug 31 19:06:00 2022 +0200

    mm/rmap: Fix anon_vma->degree ambiguity leading to double-reuse
    
    commit 2555283eb40df89945557273121e9393ef9b542b upstream.
    
    anon_vma->degree tracks the combined number of child anon_vmas and VMAs
    that use the anon_vma as their ->anon_vma.
    
    anon_vma_clone() then assumes that for any anon_vma attached to
    src->anon_vma_chain other than src->anon_vma, it is impossible for it to
    be a leaf node of the VMA tree, meaning that for such VMAs ->degree is
    elevated by 1 because of a child anon_vma, meaning that if ->degree
    equals 1 there are no VMAs that use the anon_vma as their ->anon_vma.
    
    This assumption is wrong because the ->degree optimization leads to leaf
    nodes being abandoned on anon_vma_clone() - an existing anon_vma is
    reused and no new parent-child relationship is created.  So it is
    possible to reuse an anon_vma for one VMA while it is still tied to
    another VMA.
    
    This is an issue because is_mergeable_anon_vma() and its callers assume
    that if two VMAs have the same ->anon_vma, the list of anon_vmas
    attached to the VMAs is guaranteed to be the same.  When this assumption
    is violated, vma_merge() can merge pages into a VMA that is not attached
    to the corresponding anon_vma, leading to dangling page->mapping
    pointers that will be dereferenced during rmap walks.
    
    Fix it by separately tracking the number of child anon_vmas and the
    number of VMAs using the anon_vma as their ->anon_vma.
    
    Fixes: 7a3ef208e662 ("mm: prevent endless growth of anon_vma hierarchy")
    Cc: stable@kernel.org
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6204bf78b2a903b96ba43afff6abc0b04d6e0462
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Fri Jul 15 19:55:59 2022 +0800

    bpf: Don't redirect packets with invalid pkt_len
    
    commit fd1894224407c484f652ad456e1ce423e89bb3eb upstream.
    
    Syzbot found an issue [1]: fq_codel_drop() try to drop a flow whitout any
    skbs, that is, the flow->head is null.
    The root cause, as the [2] says, is because that bpf_prog_test_run_skb()
    run a bpf prog which redirects empty skbs.
    So we should determine whether the length of the packet modified by bpf
    prog or others like bpf_prog_test is valid before forwarding it directly.
    
    LINK: [1] https://syzkaller.appspot.com/bug?id=0b84da80c2917757915afa89f7738a9d16ec96c5
    LINK: [2] https://www.spinics.net/lists/netdev/msg777503.html
    
    Reported-by: syzbot+7a12909485b94426aceb@syzkaller.appspotmail.com
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/r/20220715115559.139691-1-shaozhengchao@huawei.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbd8c8fc60480e3faa3ae7e27ebe03371ecd1b77
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Thu Aug 18 11:26:59 2022 +0800

    ftrace: Fix NULL pointer dereference in is_ftrace_trampoline when ftrace is dead
    
    commit c3b0f72e805f0801f05fa2aa52011c4bfc694c44 upstream.
    
    ftrace_startup does not remove ops from ftrace_ops_list when
    ftrace_startup_enable fails:
    
    register_ftrace_function
      ftrace_startup
        __register_ftrace_function
          ...
          add_ftrace_ops(&ftrace_ops_list, ops)
          ...
        ...
        ftrace_startup_enable // if ftrace failed to modify, ftrace_disabled is set to 1
        ...
      return 0 // ops is in the ftrace_ops_list.
    
    When ftrace_disabled = 1, unregister_ftrace_function simply returns without doing anything:
    unregister_ftrace_function
      ftrace_shutdown
        if (unlikely(ftrace_disabled))
                return -ENODEV;  // return here, __unregister_ftrace_function is not executed,
                                 // as a result, ops is still in the ftrace_ops_list
        __unregister_ftrace_function
        ...
    
    If ops is dynamically allocated, it will be free later, in this case,
    is_ftrace_trampoline accesses NULL pointer:
    
    is_ftrace_trampoline
      ftrace_ops_trampoline
        do_for_each_ftrace_op(op, ftrace_ops_list) // OOPS! op may be NULL!
    
    Syzkaller reports as follows:
    [ 1203.506103] BUG: kernel NULL pointer dereference, address: 000000000000010b
    [ 1203.508039] #PF: supervisor read access in kernel mode
    [ 1203.508798] #PF: error_code(0x0000) - not-present page
    [ 1203.509558] PGD 800000011660b067 P4D 800000011660b067 PUD 130fb8067 PMD 0
    [ 1203.510560] Oops: 0000 [#1] SMP KASAN PTI
    [ 1203.511189] CPU: 6 PID: 29532 Comm: syz-executor.2 Tainted: G    B   W         5.10.0 #8
    [ 1203.512324] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
    [ 1203.513895] RIP: 0010:is_ftrace_trampoline+0x26/0xb0
    [ 1203.514644] Code: ff eb d3 90 41 55 41 54 49 89 fc 55 53 e8 f2 00 fd ff 48 8b 1d 3b 35 5d 03 e8 e6 00 fd ff 48 8d bb 90 00 00 00 e8 2a 81 26 00 <48> 8b ab 90 00 00 00 48 85 ed 74 1d e8 c9 00 fd ff 48 8d bb 98 00
    [ 1203.518838] RSP: 0018:ffffc900012cf960 EFLAGS: 00010246
    [ 1203.520092] RAX: 0000000000000000 RBX: 000000000000007b RCX: ffffffff8a331866
    [ 1203.521469] RDX: 0000000000000000 RSI: 0000000000000008 RDI: 000000000000010b
    [ 1203.522583] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffff8df18b07
    [ 1203.523550] R10: fffffbfff1be3160 R11: 0000000000000001 R12: 0000000000478399
    [ 1203.524596] R13: 0000000000000000 R14: ffff888145088000 R15: 0000000000000008
    [ 1203.525634] FS:  00007f429f5f4700(0000) GS:ffff8881daf00000(0000) knlGS:0000000000000000
    [ 1203.526801] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1203.527626] CR2: 000000000000010b CR3: 0000000170e1e001 CR4: 00000000003706e0
    [ 1203.528611] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1203.529605] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Therefore, when ftrace_startup_enable fails, we need to rollback registration
    process and remove ops from ftrace_ops_list.
    
    Link: https://lkml.kernel.org/r/20220818032659.56209-1-yangjihong1@huawei.com
    
    Suggested-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fc778ee2fb2853f7a3531fa7273349640d8e4e9
Author: Letu Ren <fantasquex@gmail.com>
Date:   Thu Aug 18 18:44:24 2022 +0800

    fbdev: fb_pm2fb: Avoid potential divide by zero error
    
    commit 19f953e7435644b81332dd632ba1b2d80b1e37af upstream.
    
    In `do_fb_ioctl()` of fbmem.c, if cmd is FBIOPUT_VSCREENINFO, var will be
    copied from user, then go through `fb_set_var()` and
    `info->fbops->fb_check_var()` which could may be `pm2fb_check_var()`.
    Along the path, `var->pixclock` won't be modified. This function checks
    whether reciprocal of `var->pixclock` is too high. If `var->pixclock` is
    zero, there will be a divide by zero error. So, it is necessary to check
    whether denominator is zero to avoid crash. As this bug is found by
    Syzkaller, logs are listed below.
    
    divide error in pm2fb_check_var
    Call Trace:
     <TASK>
     fb_set_var+0x367/0xeb0 drivers/video/fbdev/core/fbmem.c:1015
     do_fb_ioctl+0x234/0x670 drivers/video/fbdev/core/fbmem.c:1110
     fb_ioctl+0xdd/0x130 drivers/video/fbdev/core/fbmem.c:1189
    
    Reported-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Letu Ren <fantasquex@gmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61cc798591a36ca27eb7d8d6c09bf20e50a59968
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Fri Aug 5 15:48:34 2022 +0800

    net: fix refcount bug in sk_psock_get (2)
    
    commit 2a0133723f9ebeb751cfce19f74ec07e108bef1f upstream.
    
    Syzkaller reports refcount bug as follows:
    ------------[ cut here ]------------
    refcount_t: saturated; leaking memory.
    WARNING: CPU: 1 PID: 3605 at lib/refcount.c:19 refcount_warn_saturate+0xf4/0x1e0 lib/refcount.c:19
    Modules linked in:
    CPU: 1 PID: 3605 Comm: syz-executor208 Not tainted 5.18.0-syzkaller-03023-g7e062cda7d90 #0
     <TASK>
     __refcount_add_not_zero include/linux/refcount.h:163 [inline]
     __refcount_inc_not_zero include/linux/refcount.h:227 [inline]
     refcount_inc_not_zero include/linux/refcount.h:245 [inline]
     sk_psock_get+0x3bc/0x410 include/linux/skmsg.h:439
     tls_data_ready+0x6d/0x1b0 net/tls/tls_sw.c:2091
     tcp_data_ready+0x106/0x520 net/ipv4/tcp_input.c:4983
     tcp_data_queue+0x25f2/0x4c90 net/ipv4/tcp_input.c:5057
     tcp_rcv_state_process+0x1774/0x4e80 net/ipv4/tcp_input.c:6659
     tcp_v4_do_rcv+0x339/0x980 net/ipv4/tcp_ipv4.c:1682
     sk_backlog_rcv include/net/sock.h:1061 [inline]
     __release_sock+0x134/0x3b0 net/core/sock.c:2849
     release_sock+0x54/0x1b0 net/core/sock.c:3404
     inet_shutdown+0x1e0/0x430 net/ipv4/af_inet.c:909
     __sys_shutdown_sock net/socket.c:2331 [inline]
     __sys_shutdown_sock net/socket.c:2325 [inline]
     __sys_shutdown+0xf1/0x1b0 net/socket.c:2343
     __do_sys_shutdown net/socket.c:2351 [inline]
     __se_sys_shutdown net/socket.c:2349 [inline]
     __x64_sys_shutdown+0x50/0x70 net/socket.c:2349
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x46/0xb0
     </TASK>
    
    During SMC fallback process in connect syscall, kernel will
    replaces TCP with SMC. In order to forward wakeup
    smc socket waitqueue after fallback, kernel will sets
    clcsk->sk_user_data to origin smc socket in
    smc_fback_replace_callbacks().
    
    Later, in shutdown syscall, kernel will calls
    sk_psock_get(), which treats the clcsk->sk_user_data
    as psock type, triggering the refcnt warning.
    
    So, the root cause is that smc and psock, both will use
    sk_user_data field. So they will mismatch this field
    easily.
    
    This patch solves it by using another bit(defined as
    SK_USER_DATA_PSOCK) in PTRMASK, to mark whether
    sk_user_data points to a psock object or not.
    This patch depends on a PTRMASK introduced in commit f1ff5ce2cd5e
    ("net, sk_msg: Clear sk_user_data pointer on clone if tagged").
    
    For there will possibly be more flags in the sk_user_data field,
    this patch also refactor sk_user_data flags code to be more generic
    to improve its maintainability.
    
    Reported-and-tested-by: syzbot+5f26f85569bd179c18ce@syzkaller.appspotmail.com
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Wen Gu <guwen@linux.alibaba.com>
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e2fa79226580b035b00260d9f240ab9bda4af5d
Author: Karthik Alapati <mail@karthek.com>
Date:   Thu Jul 28 21:13:17 2022 +0530

    HID: hidraw: fix memory leak in hidraw_release()
    
    commit a5623a203cffe2d2b84d2f6c989d9017db1856af upstream.
    
    Free the buffered reports before deleting the list entry.
    
    BUG: memory leak
    unreferenced object 0xffff88810e72f180 (size 32):
      comm "softirq", pid 0, jiffies 4294945143 (age 16.080s)
      hex dump (first 32 bytes):
        64 f3 c6 6a d1 88 07 04 00 00 00 00 00 00 00 00  d..j............
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<ffffffff814ac6c3>] kmemdup+0x23/0x50 mm/util.c:128
        [<ffffffff8357c1d2>] kmemdup include/linux/fortify-string.h:440 [inline]
        [<ffffffff8357c1d2>] hidraw_report_event+0xa2/0x150 drivers/hid/hidraw.c:521
        [<ffffffff8356ddad>] hid_report_raw_event+0x27d/0x740 drivers/hid/hid-core.c:1992
        [<ffffffff8356e41e>] hid_input_report+0x1ae/0x270 drivers/hid/hid-core.c:2065
        [<ffffffff835f0d3f>] hid_irq_in+0x1ff/0x250 drivers/hid/usbhid/hid-core.c:284
        [<ffffffff82d3c7f9>] __usb_hcd_giveback_urb+0xf9/0x230 drivers/usb/core/hcd.c:1670
        [<ffffffff82d3cc26>] usb_hcd_giveback_urb+0x1b6/0x1d0 drivers/usb/core/hcd.c:1747
        [<ffffffff82ef1e14>] dummy_timer+0x8e4/0x14c0 drivers/usb/gadget/udc/dummy_hcd.c:1988
        [<ffffffff812f50a8>] call_timer_fn+0x38/0x200 kernel/time/timer.c:1474
        [<ffffffff812f5586>] expire_timers kernel/time/timer.c:1519 [inline]
        [<ffffffff812f5586>] __run_timers.part.0+0x316/0x430 kernel/time/timer.c:1790
        [<ffffffff812f56e4>] __run_timers kernel/time/timer.c:1768 [inline]
        [<ffffffff812f56e4>] run_timer_softirq+0x44/0x90 kernel/time/timer.c:1803
        [<ffffffff848000e6>] __do_softirq+0xe6/0x2ea kernel/softirq.c:571
        [<ffffffff81246db0>] invoke_softirq kernel/softirq.c:445 [inline]
        [<ffffffff81246db0>] __irq_exit_rcu kernel/softirq.c:650 [inline]
        [<ffffffff81246db0>] irq_exit_rcu+0xc0/0x110 kernel/softirq.c:662
        [<ffffffff84574f02>] sysvec_apic_timer_interrupt+0xa2/0xd0 arch/x86/kernel/apic/apic.c:1106
        [<ffffffff84600c8b>] asm_sysvec_apic_timer_interrupt+0x1b/0x20 arch/x86/include/asm/idtentry.h:649
        [<ffffffff8458a070>] native_safe_halt arch/x86/include/asm/irqflags.h:51 [inline]
        [<ffffffff8458a070>] arch_safe_halt arch/x86/include/asm/irqflags.h:89 [inline]
        [<ffffffff8458a070>] acpi_safe_halt drivers/acpi/processor_idle.c:111 [inline]
        [<ffffffff8458a070>] acpi_idle_do_entry+0xc0/0xd0 drivers/acpi/processor_idle.c:554
    
    Link: https://syzkaller.appspot.com/bug?id=19a04b43c75ed1092021010419b5e560a8172c4f
    Reported-by: syzbot+f59100a0428e6ded9443@syzkaller.appspotmail.com
    Signed-off-by: Karthik Alapati <mail@karthek.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bacb37bdc2a21c8f7fdc83dcc0dea2f4ca1341fb
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Thu Jun 9 08:35:28 2022 +0100

    media: pvrusb2: fix memory leak in pvr_probe
    
    commit 945a9a8e448b65bec055d37eba58f711b39f66f0 upstream.
    
    The error handling code in pvr2_hdw_create forgets to unregister the
    v4l2 device. When pvr2_hdw_create returns back to pvr2_context_create,
    it calls pvr2_context_destroy to destroy context, but mp->hdw is NULL,
    which leads to that pvr2_hdw_destroy directly returns.
    
    Fix this by adding v4l2_device_unregister to decrease the refcount of
    usb interface.
    
    Reported-by: syzbot+77b432d57c4791183ed4@syzkaller.appspotmail.com
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 872875c9ecf8fa2e1d82bb2f2f1963f571aa8959
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Fri May 20 13:52:35 2022 -0700

    udmabuf: Set the DMA mask for the udmabuf device (v2)
    
    commit 9e9fa6a9198b767b00f48160800128e83a038f9f upstream.
    
    If the DMA mask is not set explicitly, the following warning occurs
    when the userspace tries to access the dma-buf via the CPU as
    reported by syzbot here:
    
    WARNING: CPU: 1 PID: 3595 at kernel/dma/mapping.c:188
    __dma_map_sg_attrs+0x181/0x1f0 kernel/dma/mapping.c:188
    Modules linked in:
    CPU: 0 PID: 3595 Comm: syz-executor249 Not tainted
    5.17.0-rc2-syzkaller-00316-g0457e5153e0e #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__dma_map_sg_attrs+0x181/0x1f0 kernel/dma/mapping.c:188
    Code: 00 00 00 00 00 fc ff df 48 c1 e8 03 80 3c 10 00 75 71 4c 8b 3d c0
    83 b5 0d e9 db fe ff ff e8 b6 0f 13 00 0f 0b e8 af 0f 13 00 <0f> 0b 45
       31 e4 e9 54 ff ff ff e8 a0 0f 13 00 49 8d 7f 50 48 b8 00
    RSP: 0018:ffffc90002a07d68 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff88807e25e2c0 RSI: ffffffff81649e91 RDI: ffff88801b848408
    RBP: ffff88801b848000 R08: 0000000000000002 R09: ffff88801d86c74f
    R10: ffffffff81649d72 R11: 0000000000000001 R12: 0000000000000002
    R13: ffff88801d86c680 R14: 0000000000000001 R15: 0000000000000000
    FS:  0000555556e30300(0000) GS:ffff8880b9d00000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000200000cc CR3: 000000001d74a000 CR4: 00000000003506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     dma_map_sgtable+0x70/0xf0 kernel/dma/mapping.c:264
     get_sg_table.isra.0+0xe0/0x160 drivers/dma-buf/udmabuf.c:72
     begin_cpu_udmabuf+0x130/0x1d0 drivers/dma-buf/udmabuf.c:126
     dma_buf_begin_cpu_access+0xfd/0x1d0 drivers/dma-buf/dma-buf.c:1164
     dma_buf_ioctl+0x259/0x2b0 drivers/dma-buf/dma-buf.c:363
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl fs/ioctl.c:860 [inline]
     __x64_sys_ioctl+0x193/0x200 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f62fcf530f9
    Code: 28 c3 e8 2a 14 00 00 66 2e 0f 1f 84 00 00 00 00 00 48 89 f8 48 89
    f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01
    f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffe3edab9b8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f62fcf530f9
    RDX: 0000000020000200 RSI: 0000000040086200 RDI: 0000000000000006
    RBP: 00007f62fcf170e0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f62fcf17170
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    
    v2: Dont't forget to deregister if DMA mask setup fails.
    
    Reported-by: syzbot+10e27961f4da37c443b2@syzkaller.appspotmail.com
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20220520205235.3687336-1-vivek.kasireddy@intel.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc815761948ab5b8c94db6cb53c95103588f16ae
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri Jul 8 08:40:09 2022 +0100

    HID: steam: Prevent NULL pointer dereference in steam_{recv,send}_report
    
    commit cd11d1a6114bd4bc6450ae59f6e110ec47362126 upstream.
    
    It is possible for a malicious device to forgo submitting a Feature
    Report.  The HID Steam driver presently makes no prevision for this
    and de-references the 'struct hid_report' pointer obtained from the
    HID devices without first checking its validity.  Let's change that.
    
    Cc: Jiri Kosina <jikos@kernel.org>
    Cc: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: linux-input@vger.kernel.org
    Fixes: c164d6abf3841 ("HID: add driver for Valve Steam Controller")
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 412b844143e351ea803c17ecc6675552f3ca771b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Sep 1 13:01:03 2022 +0200

    Revert "PCI/portdrv: Don't disable AER reporting in get_port_device_capability()"
    
    This reverts commit ee70aa214a2d9fa74539b52f6c326ba2f7c0fb11 which is
    commit 8795e182b02dc87e343c79e73af6b8b7f9c5e635 upstream.
    
    It is reported to cause problems, so drop it from the stable trees for
    now until it gets sorted out.
    
    Link: https://lore.kernel.org/r/47b775c5-57fa-5edf-b59e-8a9041ffbee7@candelatech.com
    Reported-by: Ben Greear <greearb@candelatech.com>
    Cc: Stefan Roese <sr@denx.de>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Pali Rohár <pali@kernel.org>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Bharat Kumar Gogada <bharat.kumar.gogada@xilinx.com>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Yao Hongbo <yaohongbo@linux.alibaba.com>
    Cc: Naveen Naidu <naveennaidu479@gmail.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38267d266336a7fb9eae9be23567a44776c6e4ca
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Aug 12 15:33:57 2022 -0700

    Bluetooth: L2CAP: Fix build errors in some archs
    
    commit b840304fb46cdf7012722f456bce06f151b3e81b upstream.
    
    This attempts to fix the follow errors:
    
    In function 'memcmp',
        inlined from 'bacmp' at ./include/net/bluetooth/bluetooth.h:347:9,
        inlined from 'l2cap_global_chan_by_psm' at
        net/bluetooth/l2cap_core.c:2003:15:
    ./include/linux/fortify-string.h:44:33: error: '__builtin_memcmp'
    specified bound 6 exceeds source size 0 [-Werror=stringop-overread]
       44 | #define __underlying_memcmp     __builtin_memcmp
          |                                 ^
    ./include/linux/fortify-string.h:420:16: note: in expansion of macro
    '__underlying_memcmp'
      420 |         return __underlying_memcmp(p, q, size);
          |                ^~~~~~~~~~~~~~~~~~~
    In function 'memcmp',
        inlined from 'bacmp' at ./include/net/bluetooth/bluetooth.h:347:9,
        inlined from 'l2cap_global_chan_by_psm' at
        net/bluetooth/l2cap_core.c:2004:15:
    ./include/linux/fortify-string.h:44:33: error: '__builtin_memcmp'
    specified bound 6 exceeds source size 0 [-Werror=stringop-overread]
       44 | #define __underlying_memcmp     __builtin_memcmp
          |                                 ^
    ./include/linux/fortify-string.h:420:16: note: in expansion of macro
    '__underlying_memcmp'
      420 |         return __underlying_memcmp(p, q, size);
          |                ^~~~~~~~~~~~~~~~~~~
    
    Fixes: 332f1795ca20 ("Bluetooth: L2CAP: Fix l2cap_global_chan_by_psm regression")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad697ade5939b5a40eb65b557083d083cf129790
Author: Jing Leng <jleng@ambarella.com>
Date:   Tue May 17 18:51:28 2022 +0800

    kbuild: Fix include path in scripts/Makefile.modpost
    
    commit 23a0cb8e3225122496bfa79172005c587c2d64bf upstream.
    
    When building an external module, if users don't need to separate the
    compilation output and source code, they run the following command:
    "make -C $(LINUX_SRC_DIR) M=$(PWD)". At this point, "$(KBUILD_EXTMOD)"
    and "$(src)" are the same.
    
    If they need to separate them, they run "make -C $(KERNEL_SRC_DIR)
    O=$(KERNEL_OUT_DIR) M=$(OUT_DIR) src=$(PWD)". Before running the
    command, they need to copy "Kbuild" or "Makefile" to "$(OUT_DIR)" to
    prevent compilation failure.
    
    So the kernel should change the included path to avoid the copy operation.
    
    Signed-off-by: Jing Leng <jleng@ambarella.com>
    [masahiro: I do not think "M=$(OUT_DIR) src=$(PWD)" is the official way,
    but this patch is a nice clean up anyway.]
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Nicolas Schier <n.schier@avm.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9feeb610099d01805f24b9f5a72e4abb2fe18d6
Author: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
Date:   Wed Aug 17 15:26:03 2022 +0200

    s390/mm: do not trigger write fault when vma does not allow VM_WRITE
    
    commit 41ac42f137080bc230b5882e3c88c392ab7f2d32 upstream.
    
    For non-protection pXd_none() page faults in do_dat_exception(), we
    call do_exception() with access == (VM_READ | VM_WRITE | VM_EXEC).
    In do_exception(), vma->vm_flags is checked against that before
    calling handle_mm_fault().
    
    Since commit 92f842eac7ee3 ("[S390] store indication fault optimization"),
    we call handle_mm_fault() with FAULT_FLAG_WRITE, when recognizing that
    it was a write access. However, the vma flags check is still only
    checking against (VM_READ | VM_WRITE | VM_EXEC), and therefore also
    calling handle_mm_fault() with FAULT_FLAG_WRITE in cases where the vma
    does not allow VM_WRITE.
    
    Fix this by changing access check in do_exception() to VM_WRITE only,
    when recognizing write access.
    
    Link: https://lkml.kernel.org/r/20220811103435.188481-3-david@redhat.com
    Fixes: 92f842eac7ee3 ("[S390] store indication fault optimization")
    Cc: <stable@vger.kernel.org>
    Reported-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dea6b3e22c67b37aeb1fca8fa5398fd38270f57
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Aug 25 22:04:56 2022 -0700

    crypto: lib - remove unneeded selection of XOR_BLOCKS
    
    commit 874b301985ef2f89b8b592ad255e03fb6fbfe605 upstream.
    
    CRYPTO_LIB_CHACHA_GENERIC doesn't need to select XOR_BLOCKS.  It perhaps
    was thought that it's needed for __crypto_xor, but that's not the case.
    
    Enabling XOR_BLOCKS is problematic because the XOR_BLOCKS code runs a
    benchmark when it is initialized.  That causes a boot time regression on
    systems that didn't have it enabled before.
    
    Therefore, remove this unnecessary and problematic selection.
    
    Fixes: e56e18985596 ("lib/crypto: add prompts back to crypto libraries")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5796ff9acc5e922be3b1a599e004534e4fe23cf
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Aug 19 13:01:35 2022 +0200

    x86/nospec: Fix i386 RSB stuffing
    
    commit 332924973725e8cdcc783c175f68cf7e162cb9e5 upstream.
    
    Turns out that i386 doesn't unconditionally have LFENCE, as such the
    loop in __FILL_RETURN_BUFFER isn't actually speculation safe on such
    chips.
    
    Fixes: ba6e31af2be9 ("x86/speculation: Add LFENCE to RSB fill sequence")
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/Yv9tj9vbQ9nNlXoY@worktop.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adee8f3082b01e5dab620d651e3ec75f57c0c855
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Aug 16 14:28:36 2022 +0200

    x86/nospec: Unwreck the RSB stuffing
    
    commit 4e3aa9238277597c6c7624f302d81a7b568b6f2d upstream.
    
    Commit 2b1299322016 ("x86/speculation: Add RSB VM Exit protections")
    made a right mess of the RSB stuffing, rewrite the whole thing to not
    suck.
    
    Thanks to Andrew for the enlightening comment about Post-Barrier RSB
    things so we can make this code less magical.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/YvuNdDWoUZSBjYcm@worktop.programming.kicks-ass.net
    [bwh: Backported to 5.10: adjust context]
    Signed-off-by: Ben Hutchings <benh@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 895428ee124ad70b9763259308354877b725c31d
Author: Jann Horn <jannh@google.com>
Date:   Wed Aug 31 21:13:48 2022 +0200

    mm: Force TLB flush for PFNMAP mappings before unlink_file_vma()
    
    commit b67fbebd4cf980aecbcc750e1462128bffe8ae15 upstream.
    
    Some drivers rely on having all VMAs through which a PFN might be
    accessible listed in the rmap for correctness.
    However, on X86, it was possible for a VMA with stale TLB entries
    to not be listed in the rmap.
    
    This was fixed in mainline with
    commit b67fbebd4cf9 ("mmu_gather: Force tlb-flush VM_PFNMAP vmas"),
    but that commit relies on preceding refactoring in
    commit 18ba064e42df3 ("mmu_gather: Let there be one tlb_{start,end}_vma()
    implementation") and commit 1e9fdf21a4339 ("mmu_gather: Remove per arch
    tlb_{start,end}_vma()").
    
    This patch provides equivalent protection without needing that
    refactoring, by forcing a TLB flush between removing PTEs in
    unmap_vmas() and the call to unlink_file_vma() in free_pgtables().
    
    [This is a stable-specific rewrite of the upstream commit!]
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

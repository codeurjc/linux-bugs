commit 4c9646a796d66a2d81871a694e88e19a38b115a7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 20 17:02:07 2023 +0100

    Linux 6.6.8
    
    Link: https://lore.kernel.org/r/20231218135104.927894164@linuxfoundation.org
    Tested-by: Ronald Warsow <rwarsow@gmx.de>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Ricardo B. Marliere <ricardo@marliere.net>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Justin M. Forbes <jforbes@fedoraproject.org>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Kelsey Steele <kelseysteele@linux.microsoft.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 885faf3c7e5f53561c34104d140f2e321ea305a6
Author: Patrisious Haddad <phaddad@nvidia.com>
Date:   Thu Oct 19 11:47:05 2023 +0300

    RDMA/mlx5: Change the key being sent for MPV device affiliation
    
    commit 02e7d139e5e24abb5fde91934fc9dc0344ac1926 upstream.
    
    Change the key that we send from IB driver to EN driver regarding the
    MPV device affiliation, since at that stage the IB device is not yet
    initialized, so its index would be zero for different IB devices and
    cause wrong associations between unrelated master and slave devices.
    
    Instead use a unique value from inside the core device which is already
    initialized at this stage.
    
    Fixes: 0d293714ac32 ("RDMA/mlx5: Send events from IB driver about device affiliation state")
    Signed-off-by: Patrisious Haddad <phaddad@nvidia.com>
    Link: https://lore.kernel.org/r/ac7e66357d963fc68d7a419515180212c96d137d.1697705185.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06f61af8025452514945657e9b4cb1c9ba8967c5
Author: Fangrui Song <maskray@google.com>
Date:   Tue Sep 19 17:17:28 2023 -0700

    x86/speculation, objtool: Use absolute relocations for annotations
    
    commit b8ec60e1186cdcfce41e7db4c827cb107e459002 upstream.
    
    .discard.retpoline_safe sections do not have the SHF_ALLOC flag.  These
    sections referencing text sections' STT_SECTION symbols with PC-relative
    relocations like R_386_PC32 [0] is conceptually not suitable.  Newer
    LLD will report warnings for REL relocations even for relocatable links [1]:
    
        ld.lld: warning: vmlinux.a(drivers/i2c/busses/i2c-i801.o):(.discard.retpoline_safe+0x120): has non-ABS relocation R_386_PC32 against symbol ''
    
    Switch to absolute relocations instead, which indicate link-time
    addresses.  In a relocatable link, these addresses are also output
    section offsets, used by checks in tools/objtool/check.c.  When linking
    vmlinux, these .discard.* sections will be discarded, therefore it is
    not a problem that R_X86_64_32 cannot represent a kernel address.
    
    Alternatively, we could set the SHF_ALLOC flag for .discard.* sections,
    but I think non-SHF_ALLOC for sections to be discarded makes more sense.
    
    Note: if we decide to never support REL architectures (e.g. arm, i386),
    we can utilize R_*_NONE relocations (.reloc ., BFD_RELOC_NONE, sym),
    making .discard.* sections zero-sized.  That said, the section content
    waste is 4 bytes per entry, much smaller than sizeof(Elf{32,64}_Rel).
    
      [0] commit 1c0c1faf5692 ("objtool: Use relative pointers for annotations")
      [1] https://github.com/ClangBuiltLinux/linux/issues/1937
    
    Signed-off-by: Fangrui Song <maskray@google.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/20230920001728.1439947-1-maskray@google.com
    Cc: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3432f9686a37a591da81bff73d15da3735e4bac8
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Fri Dec 15 08:41:14 2023 -0500

    ring-buffer: Have rb_time_cmpxchg() set the msb counter too
    
    commit 0aa0e5289cfe984a8a9fdd79ccf46ccf080151f7 upstream.
    
    The rb_time_cmpxchg() on 32-bit architectures requires setting three
    32-bit words to represent the 64-bit timestamp, with some salt for
    synchronization. Those are: msb, top, and bottom
    
    The issue is, the rb_time_cmpxchg() did not properly salt the msb portion,
    and the msb that was written was stale.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231215084114.20899342@rorschach.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: f03f2abce4f39 ("ring-buffer: Have 32 bit time stamps use all 64 bits")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3778a2fa4a281a21ea0f1d12022cdcf90616f61
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Dec 14 22:29:21 2023 -0500

    ring-buffer: Do not try to put back write_stamp
    
    commit dd939425707898da992e59ab0fcfae4652546910 upstream.
    
    If an update to an event is interrupted by another event between the time
    the initial event allocated its buffer and where it wrote to the
    write_stamp, the code try to reset the write stamp back to the what it had
    just overwritten. It knows that it was overwritten via checking the
    before_stamp, and if it didn't match what it wrote to the before_stamp
    before it allocated its space, it knows it was overwritten.
    
    To put back the write_stamp, it uses the before_stamp it read. The problem
    here is that by writing the before_stamp to the write_stamp it makes the
    two equal again, which means that the write_stamp can be considered valid
    as the last timestamp written to the ring buffer. But this is not
    necessarily true. The event that interrupted the event could have been
    interrupted in a way that it was interrupted as well, and can end up
    leaving with an invalid write_stamp. But if this happens and returns to
    this context that uses the before_stamp to update the write_stamp again,
    it can possibly incorrectly make it valid, causing later events to have in
    correct time stamps.
    
    As it is OK to leave this function with an invalid write_stamp (one that
    doesn't match the before_stamp), there's no reason to try to make it valid
    again in this case. If this race happens, then just leave with the invalid
    write_stamp and the next event to come along will just add a absolute
    timestamp and validate everything again.
    
    Bonus points: This gets rid of another cmpxchg64!
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231214222921.193037a7@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Joel Fernandes <joel@joelfernandes.org>
    Cc: Vincent Donnefort <vdonnefort@google.com>
    Fixes: a389d86f7fd09 ("ring-buffer: Have nested events still record running time stamp")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc17bc96432868ee5d59c44556959306c220aea7
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 12 11:53:01 2023 -0500

    ring-buffer: Fix a race in rb_time_cmpxchg() for 32 bit archs
    
    commit fff88fa0fbc7067ba46dde570912d63da42c59a9 upstream.
    
    Mathieu Desnoyers pointed out an issue in the rb_time_cmpxchg() for 32 bit
    architectures. That is:
    
     static bool rb_time_cmpxchg(rb_time_t *t, u64 expect, u64 set)
     {
            unsigned long cnt, top, bottom, msb;
            unsigned long cnt2, top2, bottom2, msb2;
            u64 val;
    
            /* The cmpxchg always fails if it interrupted an update */
             if (!__rb_time_read(t, &val, &cnt2))
                     return false;
    
             if (val != expect)
                     return false;
    
    <<<< interrupted here!
    
             cnt = local_read(&t->cnt);
    
    The problem is that the synchronization counter in the rb_time_t is read
    *after* the value of the timestamp is read. That means if an interrupt
    were to come in between the value being read and the counter being read,
    it can change the value and the counter and the interrupted process would
    be clueless about it!
    
    The counter needs to be read first and then the value. That way it is easy
    to tell if the value is stale or not. If the counter hasn't been updated,
    then the value is still good.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231211201324.652870-1-mathieu.desnoyers@efficios.com/
    Link: https://lore.kernel.org/linux-trace-kernel/20231212115301.7a9c9a64@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Fixes: 10464b4aa605e ("ring-buffer: Add rb_time_t 64 bit operations for speeding up 32 bit")
    Reported-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Reviewed-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae76d9bdf100e588109036c3b7db23b6693e46e3
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 12 11:16:17 2023 -0500

    ring-buffer: Fix writing to the buffer with max_data_size
    
    commit b3ae7b67b87fed771fa5bf95389df06b0433603e upstream.
    
    The maximum ring buffer data size is the maximum size of data that can be
    recorded on the ring buffer. Events must be smaller than the sub buffer
    data size minus any meta data. This size is checked before trying to
    allocate from the ring buffer because the allocation assumes that the size
    will fit on the sub buffer.
    
    The maximum size was calculated as the size of a sub buffer page (which is
    currently PAGE_SIZE minus the sub buffer header) minus the size of the
    meta data of an individual event. But it missed the possible adding of a
    time stamp for events that are added long enough apart that the event meta
    data can't hold the time delta.
    
    When an event is added that is greater than the current BUF_MAX_DATA_SIZE
    minus the size of a time stamp, but still less than or equal to
    BUF_MAX_DATA_SIZE, the ring buffer would go into an infinite loop, looking
    for a page that can hold the event. Luckily, there's a check for this loop
    and after 1000 iterations and a warning is emitted and the ring buffer is
    disabled. But this should never happen.
    
    This can happen when a large event is added first, or after a long period
    where an absolute timestamp is prefixed to the event, increasing its size
    by 8 bytes. This passes the check and then goes into the algorithm that
    causes the infinite loop.
    
    For events that are the first event on the sub-buffer, it does not need to
    add a timestamp, because the sub-buffer itself contains an absolute
    timestamp, and adding one is redundant.
    
    The fix is to check if the event is to be the first event on the
    sub-buffer, and if it is, then do not add a timestamp.
    
    This also fixes 32 bit adding a timestamp when a read of before_stamp or
    write_stamp is interrupted. There's still no need to add that timestamp if
    the event is going to be the first event on the sub buffer.
    
    Also, if the buffer has "time_stamp_abs" set, then also check if the
    length plus the timestamp is greater than the BUF_MAX_DATA_SIZE.
    
    Link: https://lore.kernel.org/all/20231212104549.58863438@gandalf.local.home/
    Link: https://lore.kernel.org/linux-trace-kernel/20231212071837.5fdd6c13@gandalf.local.home
    Link: https://lore.kernel.org/linux-trace-kernel/20231212111617.39e02849@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: a4543a2fa9ef3 ("ring-buffer: Get timestamp after event is allocated")
    Fixes: 58fbc3c63275c ("ring-buffer: Consolidate add_timestamp to remove some branches")
    Reported-by: Kent Overstreet <kent.overstreet@linux.dev> # (on IRC)
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 307ed139d7af56502698438f0a737e4c7dfcac82
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 12 07:25:58 2023 -0500

    ring-buffer: Have saved event hold the entire event
    
    commit b049525855fdd0024881c9b14b8fbec61c3f53d3 upstream.
    
    For the ring buffer iterator (non-consuming read), the event needs to be
    copied into the iterator buffer to make sure that a writer does not
    overwrite it while the user is reading it. If a write happens during the
    copy, the buffer is simply discarded.
    
    But the temp buffer itself was not big enough. The allocation of the
    buffer was only BUF_MAX_DATA_SIZE, which is the maximum data size that can
    be passed into the ring buffer and saved. But the temp buffer needs to
    hold the meta data as well. That would be BUF_PAGE_SIZE and not
    BUF_MAX_DATA_SIZE.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231212072558.61f76493@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: 785888c544e04 ("ring-buffer: Have rb_iter_head_event() handle concurrent writer")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e584836779b15ff1f40b8eec0d261355dbd026f
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Mon Dec 11 11:44:20 2023 -0500

    ring-buffer: Do not update before stamp when switching sub-buffers
    
    commit 9e45e39dc249c970d99d2681f6bcb55736fd725c upstream.
    
    The ring buffer timestamps are synchronized by two timestamp placeholders.
    One is the "before_stamp" and the other is the "write_stamp" (sometimes
    referred to as the "after stamp" but only in the comments. These two
    stamps are key to knowing how to handle nested events coming in with a
    lockless system.
    
    When moving across sub-buffers, the before stamp is updated but the write
    stamp is not. There's an effort to put back the before stamp to something
    that seems logical in case there's nested events. But as the current event
    is about to cross sub-buffers, and so will any new nested event that happens,
    updating the before stamp is useless, and could even introduce new race
    conditions.
    
    The first event on a sub-buffer simply uses the sub-buffer's timestamp
    and keeps a "delta" of zero. The "before_stamp" and "write_stamp" are not
    used in the algorithm in this case. There's no reason to try to fix the
    before_stamp when this happens.
    
    As a bonus, it removes a cmpxchg() when crossing sub-buffers!
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231211114420.36dde01b@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: a389d86f7fd09 ("ring-buffer: Have nested events still record running time stamp")
    Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5062b8c5ae2fe11c52bbb824723445d9dd562b3e
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Sun Dec 10 22:54:47 2023 -0500

    tracing: Update snapshot buffer on resize if it is allocated
    
    commit d06aff1cb13d2a0d52b48e605462518149c98c81 upstream.
    
    The snapshot buffer is to mimic the main buffer so that when a snapshot is
    needed, the snapshot and main buffer are swapped. When the snapshot buffer
    is allocated, it is set to the minimal size that the ring buffer may be at
    and still functional. When it is allocated it becomes the same size as the
    main ring buffer, and when the main ring buffer changes in size, it should
    do.
    
    Currently, the resize only updates the snapshot buffer if it's used by the
    current tracer (ie. the preemptirqsoff tracer). But it needs to be updated
    anytime it is allocated.
    
    When changing the size of the main buffer, instead of looking to see if
    the current tracer is utilizing the snapshot buffer, just check if it is
    allocated to know if it should be updated or not.
    
    Also fix typo in comment just above the code change.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231210225447.48476a6a@rorschach.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: ad909e21bbe69 ("tracing: Add internal tracing_snapshot() functions")
    Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b02bf0d952ad237444d91881adc56a75912e5e7a
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Sun Dec 10 22:12:50 2023 -0500

    ring-buffer: Fix memory leak of free page
    
    commit 17d801758157bec93f26faaf5ff1a8b9a552d67a upstream.
    
    Reading the ring buffer does a swap of a sub-buffer within the ring buffer
    with a empty sub-buffer. This allows the reader to have full access to the
    content of the sub-buffer that was swapped out without having to worry
    about contention with the writer.
    
    The readers call ring_buffer_alloc_read_page() to allocate a page that
    will be used to swap with the ring buffer. When the code is finished with
    the reader page, it calls ring_buffer_free_read_page(). Instead of freeing
    the page, it stores it as a spare. Then next call to
    ring_buffer_alloc_read_page() will return this spare instead of calling
    into the memory management system to allocate a new page.
    
    Unfortunately, on freeing of the ring buffer, this spare page is not
    freed, and causes a memory leak.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231210221250.7b9cc83c@rorschach.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: 73a757e63114d ("ring-buffer: Return reader page back into existing ring buffer")
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e72ed491bc6ef97bec6a976cb3832f0e01da24f0
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Mon Dec 11 10:26:43 2023 -0300

    smb: client: fix OOB in smb2_query_reparse_point()
    
    commit 3a42709fa909e22b0be4bb1e2795aa04ada732a3 upstream.
    
    Validate @ioctl_rsp->OutputOffset and @ioctl_rsp->OutputCount so that
    their sum does not wrap to a number that is smaller than @reparse_buf
    and we end up with a wild pointer as follows:
    
      BUG: unable to handle page fault for address: ffff88809c5cd45f
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 4a01067 P4D 4a01067 PUD 0
      Oops: 0000 [#1] PREEMPT SMP NOPTI
      CPU: 2 PID: 1260 Comm: mount.cifs Not tainted 6.7.0-rc4 #2
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
      rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      RIP: 0010:smb2_query_reparse_point+0x3e0/0x4c0 [cifs]
      Code: ff ff e8 f3 51 fe ff 41 89 c6 58 5a 45 85 f6 0f 85 14 fe ff ff
      49 8b 57 48 8b 42 60 44 8b 42 64 42 8d 0c 00 49 39 4f 50 72 40 <8b>
      04 02 48 8b 9d f0 fe ff ff 49 8b 57 50 89 03 48 8b 9d e8 fe ff
      RSP: 0018:ffffc90000347a90 EFLAGS: 00010212
      RAX: 000000008000001f RBX: ffff88800ae11000 RCX: 00000000000000ec
      RDX: ffff88801c5cd440 RSI: 0000000000000000 RDI: ffffffff82004aa4
      RBP: ffffc90000347bb0 R08: 00000000800000cd R09: 0000000000000001
      R10: 0000000000000000 R11: 0000000000000024 R12: ffff8880114d4100
      R13: ffff8880114d4198 R14: 0000000000000000 R15: ffff8880114d4000
      FS: 00007f02c07babc0(0000) GS:ffff88806ba00000(0000)
      knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffff88809c5cd45f CR3: 0000000011750000 CR4: 0000000000750ef0
      PKRU: 55555554
      Call Trace:
       <TASK>
       ? __die+0x23/0x70
       ? page_fault_oops+0x181/0x480
       ? search_module_extables+0x19/0x60
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? exc_page_fault+0x1b6/0x1c0
       ? asm_exc_page_fault+0x26/0x30
       ? _raw_spin_unlock_irqrestore+0x44/0x60
       ? smb2_query_reparse_point+0x3e0/0x4c0 [cifs]
       cifs_get_fattr+0x16e/0xa50 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? lock_acquire+0xbf/0x2b0
       cifs_root_iget+0x163/0x5f0 [cifs]
       cifs_smb3_do_mount+0x5bd/0x780 [cifs]
       smb3_get_tree+0xd9/0x290 [cifs]
       vfs_get_tree+0x2c/0x100
       ? capable+0x37/0x70
       path_mount+0x2d7/0xb80
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? _raw_spin_unlock_irqrestore+0x44/0x60
       __x64_sys_mount+0x11a/0x150
       do_syscall_64+0x47/0xf0
       entry_SYSCALL_64_after_hwframe+0x6f/0x77
      RIP: 0033:0x7f02c08d5b1e
    
    Fixes: 2e4564b31b64 ("smb3: add support for stat of WSL reparse points for special file types")
    Cc: stable@vger.kernel.org
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef748d4a62a788e235b5443bef664b39e00444a8
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Mon Dec 11 10:26:42 2023 -0300

    smb: client: fix NULL deref in asn1_ber_decoder()
    
    commit 90d025c2e953c11974e76637977c473200593a46 upstream.
    
    If server replied SMB2_NEGOTIATE with a zero SecurityBufferOffset,
    smb2_get_data_area() sets @len to non-zero but return NULL, so
    decode_negTokeninit() ends up being called with a NULL @security_blob:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000000
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 0 P4D 0
      Oops: 0000 [#1] PREEMPT SMP NOPTI
      CPU: 2 PID: 871 Comm: mount.cifs Not tainted 6.7.0-rc4 #2
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      RIP: 0010:asn1_ber_decoder+0x173/0xc80
      Code: 01 4c 39 2c 24 75 09 45 84 c9 0f 85 2f 03 00 00 48 8b 14 24 4c 29 ea 48 83 fa 01 0f 86 1e 07 00 00 48 8b 74 24 28 4d 8d 5d 01 <42> 0f b6 3c 2e 89 fa 40 88 7c 24 5c f7 d2 83 e2 1f 0f 84 3d 07 00
      RSP: 0018:ffffc9000063f950 EFLAGS: 00010202
      RAX: 0000000000000002 RBX: 0000000000000000 RCX: 000000000000004a
      RDX: 000000000000004a RSI: 0000000000000000 RDI: 0000000000000000
      RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000002 R11: 0000000000000001 R12: 0000000000000000
      R13: 0000000000000000 R14: 000000000000004d R15: 0000000000000000
      FS:  00007fce52b0fbc0(0000) GS:ffff88806ba00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000000 CR3: 000000001ae64000 CR4: 0000000000750ef0
      PKRU: 55555554
      Call Trace:
       <TASK>
       ? __die+0x23/0x70
       ? page_fault_oops+0x181/0x480
       ? __stack_depot_save+0x1e6/0x480
       ? exc_page_fault+0x6f/0x1c0
       ? asm_exc_page_fault+0x26/0x30
       ? asn1_ber_decoder+0x173/0xc80
       ? check_object+0x40/0x340
       decode_negTokenInit+0x1e/0x30 [cifs]
       SMB2_negotiate+0xc99/0x17c0 [cifs]
       ? smb2_negotiate+0x46/0x60 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       smb2_negotiate+0x46/0x60 [cifs]
       cifs_negotiate_protocol+0xae/0x130 [cifs]
       cifs_get_smb_ses+0x517/0x1040 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? queue_delayed_work_on+0x5d/0x90
       cifs_mount_get_session+0x78/0x200 [cifs]
       dfs_mount_share+0x13a/0x9f0 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? lock_acquire+0xbf/0x2b0
       ? find_nls+0x16/0x80
       ? srso_alias_return_thunk+0x5/0xfbef5
       cifs_mount+0x7e/0x350 [cifs]
       cifs_smb3_do_mount+0x128/0x780 [cifs]
       smb3_get_tree+0xd9/0x290 [cifs]
       vfs_get_tree+0x2c/0x100
       ? capable+0x37/0x70
       path_mount+0x2d7/0xb80
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? _raw_spin_unlock_irqrestore+0x44/0x60
       __x64_sys_mount+0x11a/0x150
       do_syscall_64+0x47/0xf0
       entry_SYSCALL_64_after_hwframe+0x6f/0x77
      RIP: 0033:0x7fce52c2ab1e
    
    Fix this by setting @len to zero when @off == 0 so callers won't
    attempt to dereference non-existing data areas.
    
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17a0f64cc02d4972e21c733d9f21d1c512963afa
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Mon Dec 11 10:26:41 2023 -0300

    smb: client: fix potential OOBs in smb2_parse_contexts()
    
    commit af1689a9b7701d9907dfc84d2a4b57c4bc907144 upstream.
    
    Validate offsets and lengths before dereferencing create contexts in
    smb2_parse_contexts().
    
    This fixes following oops when accessing invalid create contexts from
    server:
    
      BUG: unable to handle page fault for address: ffff8881178d8cc3
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 4a01067 P4D 4a01067 PUD 0
      Oops: 0000 [#1] PREEMPT SMP NOPTI
      CPU: 3 PID: 1736 Comm: mount.cifs Not tainted 6.7.0-rc4 #1
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
      rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      RIP: 0010:smb2_parse_contexts+0xa0/0x3a0 [cifs]
      Code: f8 10 75 13 48 b8 93 ad 25 50 9c b4 11 e7 49 39 06 0f 84 d2 00
      00 00 8b 45 00 85 c0 74 61 41 29 c5 48 01 c5 41 83 fd 0f 76 55 <0f> b7
      7d 04 0f b7 45 06 4c 8d 74 3d 00 66 83 f8 04 75 bc ba 04 00
      RSP: 0018:ffffc900007939e0 EFLAGS: 00010216
      RAX: ffffc90000793c78 RBX: ffff8880180cc000 RCX: ffffc90000793c90
      RDX: ffffc90000793cc0 RSI: ffff8880178d8cc0 RDI: ffff8880180cc000
      RBP: ffff8881178d8cbf R08: ffffc90000793c22 R09: 0000000000000000
      R10: ffff8880180cc000 R11: 0000000000000024 R12: 0000000000000000
      R13: 0000000000000020 R14: 0000000000000000 R15: ffffc90000793c22
      FS: 00007f873753cbc0(0000) GS:ffff88806bc00000(0000)
      knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffff8881178d8cc3 CR3: 00000000181ca000 CR4: 0000000000750ef0
      PKRU: 55555554
      Call Trace:
       <TASK>
       ? __die+0x23/0x70
       ? page_fault_oops+0x181/0x480
       ? search_module_extables+0x19/0x60
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? exc_page_fault+0x1b6/0x1c0
       ? asm_exc_page_fault+0x26/0x30
       ? smb2_parse_contexts+0xa0/0x3a0 [cifs]
       SMB2_open+0x38d/0x5f0 [cifs]
       ? smb2_is_path_accessible+0x138/0x260 [cifs]
       smb2_is_path_accessible+0x138/0x260 [cifs]
       cifs_is_path_remote+0x8d/0x230 [cifs]
       cifs_mount+0x7e/0x350 [cifs]
       cifs_smb3_do_mount+0x128/0x780 [cifs]
       smb3_get_tree+0xd9/0x290 [cifs]
       vfs_get_tree+0x2c/0x100
       ? capable+0x37/0x70
       path_mount+0x2d7/0xb80
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? _raw_spin_unlock_irqrestore+0x44/0x60
       __x64_sys_mount+0x11a/0x150
       do_syscall_64+0x47/0xf0
       entry_SYSCALL_64_after_hwframe+0x6f/0x77
      RIP: 0033:0x7f8737657b1e
    
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 534733397da26de0303057ce0b93a22bda150365
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Mon Dec 11 10:26:40 2023 -0300

    smb: client: fix OOB in receive_encrypted_standard()
    
    commit eec04ea119691e65227a97ce53c0da6b9b74b0b7 upstream.
    
    Fix potential OOB in receive_encrypted_standard() if server returned a
    large shdr->NextCommand that would end up writing off the end of
    @next_buffer.
    
    Fixes: b24df3e30cbf ("cifs: update receive_encrypted_standard to handle compounded responses")
    Cc: stable@vger.kernel.org
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4029b025bedaee1cd819f4f9a8b2244266fd320b
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Dec 5 20:03:08 2023 +0200

    drm/i915: Fix remapped stride with CCS on ADL+
    
    commit 0ccd963fe555451b1f84e6d14d2b3ef03dd5c947 upstream.
    
    On ADL+ the hardware automagically calculates the CCS AUX surface
    stride from the main surface stride, so when remapping we can't
    really play a lot of tricks with the main surface stride, or else
    the AUX surface stride would get miscalculated and no longer
    match the actual data layout in memory.
    
    Supposedly we could remap in 256 main surface tile units
    (AUX page(4096)/cachline(64)*4(4x1 main surface tiles per
    AUX cacheline)=256 main surface tiles), but the extra complexity
    is probably not worth the hassle.
    
    So let's just make sure our mapping stride is calculated from
    the full framebuffer stride (instead of the framebuffer width).
    This way the stride we program into PLANE_STRIDE will be the
    original framebuffer stride, and thus there will be no change
    to the AUX stride/layout.
    
    Cc: stable@vger.kernel.org
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231205180308.7505-1-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    (cherry picked from commit 2c12eb36f849256f5eb00ffaee9bf99396fd3814)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9d951b007904942e2519bc8ff7ba2d1b4121060
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Dec 7 21:34:34 2023 +0200

    drm/i915: Fix intel_atomic_setup_scalers() plane_state handling
    
    commit c3070f080f9ba18dea92eaa21730f7ab85b5c8f4 upstream.
    
    Since the plane_state variable is declared outside the scaler_users
    loop in intel_atomic_setup_scalers(), and it's never reset back to
    NULL inside the loop we may end up calling intel_atomic_setup_scaler()
    with a non-NULL plane state for the pipe scaling case. That is bad
    because intel_atomic_setup_scaler() determines whether we are doing
    plane scaling or pipe scaling based on plane_state!=NULL. The end
    result is that we may miscalculate the scaler mode for pipe scaling.
    
    The hardware becomes somewhat upset if we end up in this situation
    when scanning out a planar format on a SDR plane. We end up
    programming the pipe scaler into planar mode as well, and the
    result is a screenfull of garbage.
    
    Fix the situation by making sure we pass the correct plane_state==NULL
    when calculating the scaler mode for pipe scaling.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231207193441.20206-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit e81144106e21271c619f0c722a09e27ccb8c043d)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6295a167fa55fff2c0ac7ed534137342a422eb1
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Dec 4 22:24:43 2023 +0200

    drm/i915: Fix ADL+ tiled plane stride when the POT stride is smaller than the original
    
    commit 324b70e997aab0a7deab8cb90711faccda4e98c8 upstream.
    
    plane_view_scanout_stride() currently assumes that we had to pad the
    mapping stride with dummy pages in order to align it. But that is not
    the case if the original fb stride exceeds the aligned stride used
    to populate the remapped view, which is calculated from the user
    specified framebuffer width rather than the user specified framebuffer
    stride.
    
    Ignore the original fb stride in this case and just stick to the POT
    aligned stride. Getting this wrong will cause the plane to fetch the
    wrong data, and can lead to fault errors if the page tables at the
    bogus location aren't even populated.
    
    TODO: figure out if this is OK for CCS, or if we should instead increase
    the width of the view to cover the entire user specified fb stride
    instead...
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231204202443.31247-1-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    (cherry picked from commit 01a39f1c4f1220a4e6a25729fae87ff5794cbc52)
    Cc: stable@vger.kernel.org
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8f922ad2f76a53383982132ee44d123b72533c5
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Mon Jun 19 15:04:24 2023 -0500

    drm/amd/display: Disable PSR-SU on Parade 0803 TCON again
    
    commit e7ab758741672acb21c5d841a9f0309d30e48a06 upstream.
    
    When screen brightness is rapidly changed and PSR-SU is enabled the
    display hangs on panels with this TCON even on the latest DCN 3.1.4
    microcode (0x8002a81 at this time).
    
    This was disabled previously as commit 072030b17830 ("drm/amd: Disable
    PSR-SU on Parade 0803 TCON") but reverted as commit 1e66a17ce546 ("Revert
    "drm/amd: Disable PSR-SU on Parade 0803 TCON"") in favor of testing for
    a new enough microcode (commit cd2e31a9ab93 ("drm/amd/display: Set minimum
    requirement for using PSR-SU on Phoenix")).
    
    As hangs are still happening specifically with this TCON, disable PSR-SU
    again for it until it can be root caused.
    
    Cc: stable@vger.kernel.org
    Cc: aaron.ma@canonical.com
    Cc: binli@gnome.org
    Cc: Marc Rossi <Marc.Rossi@amd.com>
    Cc: Hamza Mahfooz <Hamza.Mahfooz@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/2046131
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7f6e836e675683e704a40e68eded505bdc30428
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Dec 6 12:08:26 2023 -0600

    drm/amd/display: Restore guard against default backlight value < 1 nit
    
    commit b96ab339ee50470d13a1faa6ad94d2218a7cd49f upstream.
    
    Mark reports that brightness is not restored after Xorg dpms screen blank.
    
    This behavior was introduced by commit d9e865826c20 ("drm/amd/display:
    Simplify brightness initialization") which dropped the cached backlight
    value in display code, but also removed code for when the default value
    read back was less than 1 nit.
    
    Restore this code so that the backlight brightness is restored to the
    correct default value in this circumstance.
    
    Reported-by: Mark Herbert <mark.herbert42@gmail.com>
    Closes: https://gitlab.freedesktop.org/drm/amd/-/issues/3031
    Cc: stable@vger.kernel.org
    Cc: Camille Cho <camille.cho@amd.com>
    Cc: Krunoslav Kovac <krunoslav.kovac@amd.com>
    Cc: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Fixes: d9e865826c20 ("drm/amd/display: Simplify brightness initialization")
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a511e851d49e13835f0da022d48e873c8cc15827
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Dec 7 11:38:21 2023 +0200

    drm/edid: also call add modes in EDID connector update fallback
    
    commit 759f14e20891de72e676d9d738eb2c573aa15f52 upstream.
    
    When the separate add modes call was added back in commit c533b5167c7e
    ("drm/edid: add separate drm_edid_connector_add_modes()"), it failed to
    address drm_edid_override_connector_update(). Also call add modes there.
    
    Reported-by: bbaa <bbaa@bbaa.fun>
    Closes: https://lore.kernel.org/r/930E9B4C7D91FDFF+29b34d89-8658-4910-966a-c772f320ea03@bbaa.fun
    Fixes: c533b5167c7e ("drm/edid: add separate drm_edid_connector_add_modes()")
    Cc: <stable@vger.kernel.org> # v6.3+
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231207093821.2654267-1-jani.nikula@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d50670681d8a14980a54238bad00a07fee122b5f
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Dec 8 13:43:09 2023 +0100

    drm/amdgpu: fix tear down order in amdgpu_vm_pt_free
    
    commit ceb9a321e7639700844aa3bf234a4e0884f13b77 upstream.
    
    When freeing PD/PT with shadows it can happen that the shadow
    destruction races with detaching the PD/PT from the VM causing a NULL
    pointer dereference in the invalidation code.
    
    Fix this by detaching the the PD/PT from the VM first and then
    freeing the shadow instead.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Fixes: https://gitlab.freedesktop.org/drm/amd/-/issues/2867
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3cf024353e213989a48399ed9ed24775e6472f0
Author: Boris Burkov <boris@bur.io>
Date:   Fri Dec 1 13:00:12 2023 -0800

    btrfs: don't clear qgroup reserved bit in release_folio
    
    commit a86805504b88f636a6458520d85afdf0634e3c6b upstream.
    
    The EXTENT_QGROUP_RESERVED bit is used to "lock" regions of the file for
    duplicate reservations. That is two writes to that range in one
    transaction shouldn't create two reservations, as the reservation will
    only be freed once when the write finally goes down. Therefore, it is
    never OK to clear that bit without freeing the associated qgroup
    reserve. At this point, we don't want to be freeing the reserve, so mask
    off the bit.
    
    CC: stable@vger.kernel.org # 5.15+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Boris Burkov <boris@bur.io>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1823491513e3f72beb85f7fba2478ef3562615d8
Author: Boris Burkov <boris@bur.io>
Date:   Fri Dec 1 13:00:10 2023 -0800

    btrfs: fix qgroup_free_reserved_data int overflow
    
    commit 9e65bfca24cf1d77e4a5c7a170db5867377b3fe7 upstream.
    
    The reserved data counter and input parameter is a u64, but we
    inadvertently accumulate it in an int. Overflowing that int results in
    freeing the wrong amount of data and breaking reserve accounting.
    
    Unfortunately, this overflow rot spreads from there, as the qgroup
    release/free functions rely on returning an int to take advantage of
    negative values for error codes.
    
    Therefore, the full fix is to return the "released" or "freed" amount by
    a u64 argument and to return 0 or negative error code via the return
    value.
    
    Most of the call sites simply ignore the return value, though some
    of them handle the error and count the returned bytes. Change all of
    them accordingly.
    
    CC: stable@vger.kernel.org # 6.1+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Boris Burkov <boris@bur.io>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14570dfa170ede01eacedc60f717df121d8b9bbd
Author: Boris Burkov <boris@bur.io>
Date:   Fri Dec 1 13:00:09 2023 -0800

    btrfs: free qgroup reserve when ORDERED_IOERR is set
    
    commit f63e1164b90b385cd832ff0fdfcfa76c3cc15436 upstream.
    
    An ordered extent completing is a critical moment in qgroup reserve
    handling, as the ownership of the reservation is handed off from the
    ordered extent to the delayed ref. In the happy path we release (unlock)
    but do not free (decrement counter) the reservation, and the delayed ref
    drives the free. However, on an error, we don't create a delayed ref,
    since there is no ref to add. Therefore, free on the error path.
    
    CC: stable@vger.kernel.org # 6.1+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Boris Burkov <boris@bur.io>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37b561d55936d0fcebd199d22180e595bb72b784
Author: Ignat Korchagin <ignat@cloudflare.com>
Date:   Wed Nov 29 22:04:09 2023 +0000

    kexec: drop dependency on ARCH_SUPPORTS_KEXEC from CRASH_DUMP
    
    commit c41bd2514184d75db087fe4c1221237fb7922875 upstream.
    
    In commit f8ff23429c62 ("kernel/Kconfig.kexec: drop select of KEXEC for
    CRASH_DUMP") we tried to fix a config regression, where CONFIG_CRASH_DUMP
    required CONFIG_KEXEC.
    
    However, it was not enough at least for arm64 platforms.  While further
    testing the patch with our arm64 config I noticed that CONFIG_CRASH_DUMP
    is unavailable in menuconfig.  This is because CONFIG_CRASH_DUMP still
    depends on the new CONFIG_ARCH_SUPPORTS_KEXEC introduced in commit
    91506f7e5d21 ("arm64/kexec: refactor for kernel/Kconfig.kexec") and on
    arm64 CONFIG_ARCH_SUPPORTS_KEXEC requires CONFIG_PM_SLEEP_SMP=y, which in
    turn requires either CONFIG_SUSPEND=y or CONFIG_HIBERNATION=y neither of
    which are set in our config.
    
    Given that we already established that CONFIG_KEXEC (which is a switch for
    kexec system call itself) is not required for CONFIG_CRASH_DUMP drop
    CONFIG_ARCH_SUPPORTS_KEXEC dependency as well.  The arm64 kernel builds
    just fine with CONFIG_CRASH_DUMP=y and with both CONFIG_KEXEC=n and
    CONFIG_KEXEC_FILE=n after f8ff23429c62 ("kernel/Kconfig.kexec: drop select
    of KEXEC for CRASH_DUMP") and this patch are applied given that the
    necessary shared bits are included via CONFIG_KEXEC_CORE dependency.
    
    [bhe@redhat.com: don't export some symbols when CONFIG_MMU=n]
      Link: https://lkml.kernel.org/r/ZW03ODUKGGhP1ZGU@MiWiFi-R3L-srv
    [bhe@redhat.com: riscv, kexec: fix dependency of two items]
      Link: https://lkml.kernel.org/r/ZW04G/SKnhbE5mnX@MiWiFi-R3L-srv
    Link: https://lkml.kernel.org/r/20231129220409.55006-1-ignat@cloudflare.com
    Fixes: 91506f7e5d21 ("arm64/kexec: refactor for kernel/Kconfig.kexec")
    Signed-off-by: Ignat Korchagin <ignat@cloudflare.com>
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Acked-by: Baoquan He <bhe@redhat.com>
    Cc: Alexander Gordeev <agordeev@linux.ibm.com>
    Cc: <stable@vger.kernel.org> # 6.6+: f8ff234: kernel/Kconfig.kexec: drop select of KEXEC for CRASH_DUMP
    Cc: <stable@vger.kernel.org> # 6.6+
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a4ae7acd20805940307be98b304871a43288a01
Author: David Stevens <stevensd@chromium.org>
Date:   Tue Apr 18 17:40:31 2023 +0900

    mm/shmem: fix race in shmem_undo_range w/THP
    
    commit 55ac8bbe358bdd2f3c044c12f249fd22d48fe015 upstream.
    
    Split folios during the second loop of shmem_undo_range.  It's not
    sufficient to only split folios when dealing with partial pages, since
    it's possible for a THP to be faulted in after that point.  Calling
    truncate_inode_folio in that situation can result in throwing away data
    outside of the range being targeted.
    
    [akpm@linux-foundation.org: tidy up comment layout]
    Link: https://lkml.kernel.org/r/20230418084031.3439795-1-stevensd@google.com
    Fixes: b9a8a4195c7d ("truncate,shmem: Handle truncates that split large folios")
    Signed-off-by: David Stevens <stevensd@chromium.org>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Suleiman Souhlal <suleiman@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a107d6a132cbb596afa648f588f0078713ad46e9
Author: Yu Zhao <yuzhao@google.com>
Date:   Thu Dec 7 23:14:07 2023 -0700

    mm/mglru: reclaim offlined memcgs harder
    
    commit 4376807bf2d5371c3e00080c972be568c3f8a7d1 upstream.
    
    In the effort to reduce zombie memcgs [1], it was discovered that the
    memcg LRU doesn't apply enough pressure on offlined memcgs.  Specifically,
    instead of rotating them to the tail of the current generation
    (MEMCG_LRU_TAIL) for a second attempt, it moves them to the next
    generation (MEMCG_LRU_YOUNG) after the first attempt.
    
    Not applying enough pressure on offlined memcgs can cause them to build
    up, and this can be particularly harmful to memory-constrained systems.
    
    On Pixel 8 Pro, launching apps for 50 cycles:
                     Before  After  Change
      Zombie memcgs  45      35     -22%
    
    [1] https://lore.kernel.org/CABdmKX2M6koq4Q0Cmp_-=wbP0Qa190HdEGGaHfxNS05gAkUtPA@mail.gmail.com/
    
    Link: https://lkml.kernel.org/r/20231208061407.2125867-4-yuzhao@google.com
    Fixes: e4dde56cd208 ("mm: multi-gen LRU: per-node lru_gen_folio lists")
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Reported-by: T.J. Mercier <tjmercier@google.com>
    Tested-by: T.J. Mercier <tjmercier@google.com>
    Cc: Charan Teja Kalla <quic_charante@quicinc.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
    Cc: Kairui Song <ryncsn@gmail.com>
    Cc: Kalesh Singh <kaleshsingh@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b131c2a2875682bc5ea0d4b15ba76775aa3ea80
Author: Yu Zhao <yuzhao@google.com>
Date:   Thu Dec 7 23:14:06 2023 -0700

    mm/mglru: respect min_ttl_ms with memcgs
    
    commit 8aa420617918d12d1f5d55030a503c9418e73c2c upstream.
    
    While investigating kswapd "consuming 100% CPU" [1] (also see "mm/mglru:
    try to stop at high watermarks"), it was discovered that the memcg LRU can
    breach the thrashing protection imposed by min_ttl_ms.
    
    Before the memcg LRU:
      kswapd()
        shrink_node_memcgs()
          mem_cgroup_iter()
            inc_max_seq()  // always hit a different memcg
        lru_gen_age_node()
          mem_cgroup_iter()
            check the timestamp of the oldest generation
    
    After the memcg LRU:
      kswapd()
        shrink_many()
          restart:
            iterate the memcg LRU:
              inc_max_seq()  // occasionally hit the same memcg
              if raced with lru_gen_rotate_memcg():
                goto restart
        lru_gen_age_node()
          mem_cgroup_iter()
            check the timestamp of the oldest generation
    
    Specifically, when the restart happens in shrink_many(), it needs to stick
    with the (memcg LRU) generation it began with.  In other words, it should
    neither re-read memcg_lru->seq nor age an lruvec of a different
    generation.  Otherwise it can hit the same memcg multiple times without
    giving lru_gen_age_node() a chance to check the timestamp of that memcg's
    oldest generation (against min_ttl_ms).
    
    [1] https://lore.kernel.org/CAK8fFZ4DY+GtBA40Pm7Nn5xCHy+51w3sfxPqkqpqakSXYyX+Wg@mail.gmail.com/
    
    Link: https://lkml.kernel.org/r/20231208061407.2125867-3-yuzhao@google.com
    Fixes: e4dde56cd208 ("mm: multi-gen LRU: per-node lru_gen_folio lists")
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Tested-by: T.J. Mercier <tjmercier@google.com>
    Cc: Charan Teja Kalla <quic_charante@quicinc.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
    Cc: Kairui Song <ryncsn@gmail.com>
    Cc: Kalesh Singh <kaleshsingh@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5f67b7e847490d41219f1dfe1b1610e88a997e4
Author: Yu Zhao <yuzhao@google.com>
Date:   Thu Dec 7 23:14:05 2023 -0700

    mm/mglru: try to stop at high watermarks
    
    commit 5095a2b23987d3c3c47dd16b3d4080e2733b8bb9 upstream.
    
    The initial MGLRU patchset didn't include the memcg LRU support, and it
    relied on should_abort_scan(), added by commit f76c83378851 ("mm:
    multi-gen LRU: optimize multiple memcgs"), to "backoff to avoid
    overshooting their aggregate reclaim target by too much".
    
    Later on when the memcg LRU was added, should_abort_scan() was deemed
    unnecessary, and the test results [1] showed no side effects after it was
    removed by commit a579086c99ed ("mm: multi-gen LRU: remove eviction
    fairness safeguard").
    
    However, that test used memory.reclaim, which sets nr_to_reclaim to
    SWAP_CLUSTER_MAX.  So it can overshoot only by SWAP_CLUSTER_MAX-1 pages,
    i.e., from nr_reclaimed=nr_to_reclaim-1 to
    nr_reclaimed=nr_to_reclaim+SWAP_CLUSTER_MAX-1.  Compared with the batch
    size kswapd sets to nr_to_reclaim, SWAP_CLUSTER_MAX is tiny.  Therefore
    that test isn't able to reproduce the worst case scenario, i.e., kswapd
    overshooting GBs on large systems and "consuming 100% CPU" (see the Closes
    tag).
    
    Bring back a simplified version of should_abort_scan() on top of the memcg
    LRU, so that kswapd stops when all eligible zones are above their
    respective high watermarks plus a small delta to lower the chance of
    KSWAPD_HIGH_WMARK_HIT_QUICKLY.  Note that this only applies to order-0
    reclaim, meaning compaction-induced reclaim can still run wild (which is a
    different problem).
    
    On Android, launching 55 apps sequentially:
               Before     After      Change
      pgpgin   838377172  802955040  -4%
      pgpgout  38037080   34336300   -10%
    
    [1] https://lore.kernel.org/20221222041905.2431096-1-yuzhao@google.com/
    
    Link: https://lkml.kernel.org/r/20231208061407.2125867-2-yuzhao@google.com
    Fixes: a579086c99ed ("mm: multi-gen LRU: remove eviction fairness safeguard")
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Reported-by: Charan Teja Kalla <quic_charante@quicinc.com>
    Reported-by: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
    Closes: https://lore.kernel.org/CAK8fFZ4DY+GtBA40Pm7Nn5xCHy+51w3sfxPqkqpqakSXYyX+Wg@mail.gmail.com/
    Tested-by: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
    Tested-by: Kalesh Singh <kaleshsingh@google.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Kairui Song <ryncsn@gmail.com>
    Cc: T.J. Mercier <tjmercier@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2ce691b452f2731bd7d30c5b05333bf2ae97a0d
Author: Yu Zhao <yuzhao@google.com>
Date:   Thu Dec 7 23:14:04 2023 -0700

    mm/mglru: fix underprotected page cache
    
    commit 081488051d28d32569ebb7c7a23572778b2e7d57 upstream.
    
    Unmapped folios accessed through file descriptors can be underprotected.
    Those folios are added to the oldest generation based on:
    
    1. The fact that they are less costly to reclaim (no need to walk the
       rmap and flush the TLB) and have less impact on performance (don't
       cause major PFs and can be non-blocking if needed again).
    2. The observation that they are likely to be single-use. E.g., for
       client use cases like Android, its apps parse configuration files
       and store the data in heap (anon); for server use cases like MySQL,
       it reads from InnoDB files and holds the cached data for tables in
       buffer pools (anon).
    
    However, the oldest generation can be very short lived, and if so, it
    doesn't provide the PID controller with enough time to respond to a surge
    of refaults.  (Note that the PID controller uses weighted refaults and
    those from evicted generations only take a half of the whole weight.) In
    other words, for a short lived generation, the moving average smooths out
    the spike quickly.
    
    To fix the problem:
    1. For folios that are already on LRU, if they can be beyond the
       tracking range of tiers, i.e., five accesses through file
       descriptors, move them to the second oldest generation to give them
       more time to age. (Note that tiers are used by the PID controller
       to statistically determine whether folios accessed multiple times
       through file descriptors are worth protecting.)
    2. When adding unmapped folios to LRU, adjust the placement of them so
       that they are not too close to the tail. The effect of this is
       similar to the above.
    
    On Android, launching 55 apps sequentially:
                               Before     After      Change
      workingset_refault_anon  25641024   25598972   0%
      workingset_refault_file  115016834  106178438  -8%
    
    Link: https://lkml.kernel.org/r/20231208061407.2125867-1-yuzhao@google.com
    Fixes: ac35a4902374 ("mm: multi-gen LRU: minimal implementation")
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Reported-by: Charan Teja Kalla <quic_charante@quicinc.com>
    Tested-by: Kalesh Singh <kaleshsingh@google.com>
    Cc: T.J. Mercier <tjmercier@google.com>
    Cc: Kairui Song <ryncsn@gmail.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Jaroslav Pulchart <jaroslav.pulchart@gooddata.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed50e07d6a8eae1c079b637926811d7500e8dd9e
Author: Frank Li <Frank.Li@nxp.com>
Date:   Mon Nov 27 16:43:25 2023 -0500

    dmaengine: fsl-edma: fix DMA channel leak in eDMAv4
    
    commit 4ee632c82d2dbb9e2dcc816890ef182a151cbd99 upstream.
    
    Allocate channel count consistently increases due to a missing source ID
    (srcid) cleanup in the fsl_edma_free_chan_resources() function at imx93
    eDMAv4.
    
    Reset 'srcid' at fsl_edma_free_chan_resources().
    
    Cc: stable@vger.kernel.org
    Fixes: 72f5801a4e2b ("dmaengine: fsl-edma: integrate v3 support")
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Link: https://lore.kernel.org/r/20231127214325.2477247-1-Frank.Li@nxp.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9127515bf9cd196d71ffe33bd7791bf272bbff0c
Author: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date:   Mon Nov 6 14:48:32 2023 +0100

    dmaengine: stm32-dma: avoid bitfield overflow assertion
    
    commit 54bed6bafa0f38daf9697af50e3aff5ff1354fe1 upstream.
    
    stm32_dma_get_burst() returns a negative error for invalid input, which
    gets turned into a large u32 value in stm32_dma_prep_dma_memcpy() that
    in turn triggers an assertion because it does not fit into a two-bit field:
    drivers/dma/stm32-dma.c: In function 'stm32_dma_prep_dma_memcpy':
    include/linux/compiler_types.h:354:38: error: call to '__compiletime_assert_282' declared with attribute error: FIELD_PREP: value too large for the field
         _compiletime_assert(condition, msg, __compiletime_assert_, __COUNTER__)
                                             ^
       include/linux/compiler_types.h:335:4: note: in definition of macro '__compiletime_assert'
           prefix ## suffix();    \
           ^~~~~~
       include/linux/compiler_types.h:354:2: note: in expansion of macro '_compiletime_assert'
         _compiletime_assert(condition, msg, __compiletime_assert_, __COUNTER__)
         ^~~~~~~~~~~~~~~~~~~
       include/linux/build_bug.h:39:37: note: in expansion of macro 'compiletime_assert'
        #define BUILD_BUG_ON_MSG(cond, msg) compiletime_assert(!(cond), msg)
                                            ^~~~~~~~~~~~~~~~~~
       include/linux/bitfield.h:68:3: note: in expansion of macro 'BUILD_BUG_ON_MSG'
          BUILD_BUG_ON_MSG(__builtin_constant_p(_val) ?  \
          ^~~~~~~~~~~~~~~~
       include/linux/bitfield.h:114:3: note: in expansion of macro '__BF_FIELD_CHECK'
          __BF_FIELD_CHECK(_mask, 0ULL, _val, "FIELD_PREP: "); \
          ^~~~~~~~~~~~~~~~
       drivers/dma/stm32-dma.c:1237:4: note: in expansion of macro 'FIELD_PREP'
           FIELD_PREP(STM32_DMA_SCR_PBURST_MASK, dma_burst) |
           ^~~~~~~~~~
    
    As an easy workaround, assume the error can happen, so try to handle this
    by failing stm32_dma_prep_dma_memcpy() before the assertion. It replicates
    what is done in stm32_dma_set_xfer_param() where stm32_dma_get_burst() is
    also used.
    
    Fixes: 1c32d6c37cc2 ("dmaengine: stm32-dma: use bitfield helpers")
    Fixes: a2b6103b7a8a ("dmaengine: stm32-dma: Improve memory burst management")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
    Cc: stable@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202311060135.Q9eMnpCL-lkp@intel.com/
    Link: https://lore.kernel.org/r/20231106134832.1470305-1-amelie.delaunay@foss.st.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03e63e497a404f444f5af25e120739da3a4f03ff
Author: Stuart Lee <stuart.lee@mediatek.com>
Date:   Fri Nov 10 09:29:14 2023 +0800

    drm/mediatek: Fix access violation in mtk_drm_crtc_dma_dev_get
    
    commit b6961d187fcd138981b8707dac87b9fcdbfe75d1 upstream.
    
    Add error handling to check NULL input in
    mtk_drm_crtc_dma_dev_get function.
    
    While display path is not configured correctly, none of crtc is
    established. So the caller of mtk_drm_crtc_dma_dev_get may pass
    input parameter *crtc as NULL, Which may cause coredump when
    we try to get the container of NULL pointer.
    
    Fixes: cb1d6bcca542 ("drm/mediatek: Add dma dev get function")
    Signed-off-by: Stuart Lee <stuart.lee@mediatek.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: AngeloGioacchino DEl Regno <angelogioacchino.delregno@collabora.com>
    Tested-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Link: https://patchwork.kernel.org/project/dri-devel/patch/20231110012914.14884-2-stuart.lee@mediatek.com/
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3aae4ef4d799fb3d0381157640fdb251008cf0ae
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Dec 7 10:14:41 2023 -0500

    drm/amdgpu/sdma5.2: add begin/end_use ring callbacks
    
    commit ab4750332dbe535243def5dcebc24ca00c1f98ac upstream.
    
    Add begin/end_use ring callbacks to disallow GFXOFF when
    SDMA work is submitted and allow it again afterward.
    
    This should avoid corner cases where GFXOFF is erroneously
    entered when SDMA is still active.  For now just allow/disallow
    GFXOFF in the begin and end helpers until we root cause the
    issue.  This should not impact power as SDMA usage is pretty
    minimal and GFXOSS should not be active when SDMA is active
    anyway, this just makes it explicit.
    
    v2: move everything into sdma5.2 code.  No reason for this
    to be generic at this point.
    v3: Add comments in new code
    
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2220
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com> (v1)
    Tested-by: Mario Limonciello <mario.limonciello@amd.com> (v1)
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28b36426b83e35dbfbf3d2104c9aac61c1d8f5df
Author: Florent Revest <revest@chromium.org>
Date:   Wed Dec 6 13:37:18 2023 +0100

    team: Fix use-after-free when an option instance allocation fails
    
    commit c12296bbecc488623b7d1932080e394d08f3226b upstream.
    
    In __team_options_register, team_options are allocated and appended to
    the team's option_list.
    If one option instance allocation fails, the "inst_rollback" cleanup
    path frees the previously allocated options but doesn't remove them from
    the team's option_list.
    This leaves dangling pointers that can be dereferenced later by other
    parts of the team driver that iterate over options.
    
    This patch fixes the cleanup path to remove the dangling pointers from
    the list.
    
    As far as I can tell, this uaf doesn't have much security implications
    since it would be fairly hard to exploit (an attacker would need to make
    the allocation of that specific small object fail) but it's still nice
    to fix.
    
    Cc: stable@vger.kernel.org
    Fixes: 80f7c6683fe0 ("team: add support for per-port options")
    Signed-off-by: Florent Revest <revest@chromium.org>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Link: https://lore.kernel.org/r/20231206123719.1963153-1-revest@chromium.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c8a21a124cab4391254680cda796036d061d9b9
Author: James Houghton <jthoughton@google.com>
Date:   Mon Dec 4 17:26:46 2023 +0000

    arm64: mm: Always make sw-dirty PTEs hw-dirty in pte_modify
    
    commit 3c0696076aad60a2f04c019761921954579e1b0e upstream.
    
    It is currently possible for a userspace application to enter an
    infinite page fault loop when using HugeTLB pages implemented with
    contiguous PTEs when HAFDBS is not available. This happens because:
    
    1. The kernel may sometimes write PTEs that are sw-dirty but hw-clean
       (PTE_DIRTY | PTE_RDONLY | PTE_WRITE).
    
    2. If, during a write, the CPU uses a sw-dirty, hw-clean PTE in handling
       the memory access on a system without HAFDBS, we will get a page
       fault.
    
    3. HugeTLB will check if it needs to update the dirty bits on the PTE.
       For contiguous PTEs, it will check to see if the pgprot bits need
       updating. In this case, HugeTLB wants to write a sequence of
       sw-dirty, hw-dirty PTEs, but it finds that all the PTEs it is about
       to overwrite are all pte_dirty() (pte_sw_dirty() => pte_dirty()),
       so it thinks no update is necessary.
    
    We can get the kernel to write a sw-dirty, hw-clean PTE with the
    following steps (showing the relevant VMA flags and pgprot bits):
    
    i.   Create a valid, writable contiguous PTE.
           VMA vmflags:     VM_SHARED | VM_READ | VM_WRITE
           VMA pgprot bits: PTE_RDONLY | PTE_WRITE
           PTE pgprot bits: PTE_DIRTY | PTE_WRITE
    
    ii.  mprotect the VMA to PROT_NONE.
           VMA vmflags:     VM_SHARED
           VMA pgprot bits: PTE_RDONLY
           PTE pgprot bits: PTE_DIRTY | PTE_RDONLY
    
    iii. mprotect the VMA back to PROT_READ | PROT_WRITE.
           VMA vmflags:     VM_SHARED | VM_READ | VM_WRITE
           VMA pgprot bits: PTE_RDONLY | PTE_WRITE
           PTE pgprot bits: PTE_DIRTY | PTE_WRITE | PTE_RDONLY
    
    Make it impossible to create a writeable sw-dirty, hw-clean PTE with
    pte_modify(). Such a PTE should be impossible to create, and there may
    be places that assume that pte_dirty() implies pte_hw_dirty().
    
    Signed-off-by: James Houghton <jthoughton@google.com>
    Fixes: 031e6e6b4e12 ("arm64: hugetlb: Avoid unnecessary clearing in huge_ptep_set_access_flags")
    Cc: <stable@vger.kernel.org>
    Acked-by: Will Deacon <will@kernel.org>
    Reviewed-by: Ryan Roberts <ryan.roberts@arm.com>
    Link: https://lore.kernel.org/r/20231204172646.2541916-3-jthoughton@google.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d228e98dfacb205d4e9ae181f5a8f467e28fc777
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Fri Dec 8 18:01:44 2023 -0800

    Revert "selftests: error out if kernel header files are not yet built"
    
    commit 43e8832fed08438e2a27afed9bac21acd0ceffe5 upstream.
    
    This reverts commit 9fc96c7c19df ("selftests: error out if kernel header
    files are not yet built").
    
    It turns out that requiring the kernel headers to be built as a
    prerequisite to building selftests, does not work in many cases. For
    example, Peter Zijlstra writes:
    
    "My biggest beef with the whole thing is that I simply do not want to use
    'make headers', it doesn't work for me.
    
    I have a ton of output directories and I don't care to build tools into
    the output dirs, in fact some of them flat out refuse to work that way
    (bpf comes to mind)." [1]
    
    Therefore, stop erroring out on the selftests build. Additional patches
    will be required in order to change over to not requiring the kernel
    headers.
    
    [1] https://lore.kernel.org/20231208221007.GO28727@noisy.programming.kicks-ass.net
    
    Link: https://lkml.kernel.org/r/20231209020144.244759-1-jhubbard@nvidia.com
    Fixes: 9fc96c7c19df ("selftests: error out if kernel header files are not yet built")
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Cc: Anders Roxell <anders.roxell@linaro.org>
    Cc: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Marcos Paulo de Souza <mpdesouza@suse.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f18d187fb2a99f181b1aab0322f3f8451255b6b
Author: Baokun Li <libaokun1@huawei.com>
Date:   Mon Nov 27 14:33:13 2023 +0800

    ext4: prevent the normalized size from exceeding EXT_MAX_BLOCKS
    
    commit 2dcf5fde6dffb312a4bfb8ef940cea2d1f402e32 upstream.
    
    For files with logical blocks close to EXT_MAX_BLOCKS, the file size
    predicted in ext4_mb_normalize_request() may exceed EXT_MAX_BLOCKS.
    This can cause some blocks to be preallocated that will not be used.
    And after [Fixes], the following issue may be triggered:
    
    =========================================================
     kernel BUG at fs/ext4/mballoc.c:4653!
     Internal error: Oops - BUG: 00000000f2000800 [#1] SMP
     CPU: 1 PID: 2357 Comm: xfs_io 6.7.0-rc2-00195-g0f5cc96c367f
     Hardware name: linux,dummy-virt (DT)
     pc : ext4_mb_use_inode_pa+0x148/0x208
     lr : ext4_mb_use_inode_pa+0x98/0x208
     Call trace:
      ext4_mb_use_inode_pa+0x148/0x208
      ext4_mb_new_inode_pa+0x240/0x4a8
      ext4_mb_use_best_found+0x1d4/0x208
      ext4_mb_try_best_found+0xc8/0x110
      ext4_mb_regular_allocator+0x11c/0xf48
      ext4_mb_new_blocks+0x790/0xaa8
      ext4_ext_map_blocks+0x7cc/0xd20
      ext4_map_blocks+0x170/0x600
      ext4_iomap_begin+0x1c0/0x348
    =========================================================
    
    Here is a calculation when adjusting ac_b_ex in ext4_mb_new_inode_pa():
    
            ex.fe_logical = orig_goal_end - EXT4_C2B(sbi, ex.fe_len);
            if (ac->ac_o_ex.fe_logical >= ex.fe_logical)
                    goto adjust_bex;
    
    The problem is that when orig_goal_end is subtracted from ac_b_ex.fe_len
    it is still greater than EXT_MAX_BLOCKS, which causes ex.fe_logical to
    overflow to a very small value, which ultimately triggers a BUG_ON in
    ext4_mb_new_inode_pa() because pa->pa_free < len.
    
    The last logical block of an actual write request does not exceed
    EXT_MAX_BLOCKS, so in ext4_mb_normalize_request() also avoids normalizing
    the last logical block to exceed EXT_MAX_BLOCKS to avoid the above issue.
    
    The test case in [Link] can reproduce the above issue with 64k block size.
    
    Link: https://patchwork.kernel.org/project/fstests/list/?series=804003
    Cc:  <stable@kernel.org> # 6.4
    Fixes: 93cdf49f6eca ("ext4: Fix best extent lstart adjustment logic in ext4_mb_new_inode_pa()")
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20231127063313.3734294-1-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40abc387459a0fc1bfd52feab095b2384a79c262
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Nov 24 19:01:36 2023 +0100

    soundwire: stream: fix NULL pointer dereference for multi_link
    
    commit e199bf52ffda8f98f129728d57244a9cd9ad5623 upstream.
    
    If bus is marked as multi_link, but number of masters in the stream is
    not higher than bus->hw_sync_min_links (bus->multi_link && m_rt_count >=
    bus->hw_sync_min_links), bank switching should not happen.  The first
    part of do_bank_switch() code properly takes these conditions into
    account, but second part (sdw_ml_sync_bank_switch()) relies purely on
    bus->multi_link property.  This is not balanced and leads to NULL
    pointer dereference:
    
      Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
      ...
      Call trace:
       wait_for_completion_timeout+0x124/0x1f0
       do_bank_switch+0x370/0x6f8
       sdw_prepare_stream+0x2d0/0x438
       qcom_snd_sdw_prepare+0xa0/0x118
       sm8450_snd_prepare+0x128/0x148
       snd_soc_link_prepare+0x5c/0xe8
       __soc_pcm_prepare+0x28/0x1ec
       dpcm_be_dai_prepare+0x1e0/0x2c0
       dpcm_fe_dai_prepare+0x108/0x28c
       snd_pcm_do_prepare+0x44/0x68
       snd_pcm_action_single+0x54/0xc0
       snd_pcm_action_nonatomic+0xe4/0xec
       snd_pcm_prepare+0xc4/0x114
       snd_pcm_common_ioctl+0x1154/0x1cc0
       snd_pcm_ioctl+0x54/0x74
    
    Fixes: ce6e74d008ff ("soundwire: Add support for multi link bank switch")
    Cc: stable@vger.kernel.org
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20231124180136.390621-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1d2d084751dfd8a8dc71856f741a4e0170af115
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Dec 6 19:11:14 2023 -0800

    cxl/hdm: Fix dpa translation locking
    
    commit 6f5c4eca48ffe18307b4e1d375817691c9005c87 upstream.
    
    The helper, cxl_dpa_resource_start(), snapshots the dpa-address of an
    endpoint-decoder after acquiring the cxl_dpa_rwsem. However, it is
    sufficient to assert that cxl_dpa_rwsem is held rather than acquire it
    in the helper. Otherwise, it triggers multiple lockdep reports:
    
    1/ Tracing callbacks are in an atomic context that can not acquire sleeping
    locks:
    
        BUG: sleeping function called from invalid context at kernel/locking/rwsem.c:1525
        in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 1288, name: bash
        preempt_count: 2, expected: 0
        RCU nest depth: 0, expected: 0
        [..]
        Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS edk2-20230524-3.fc38 05/24/2023
        Call Trace:
         <TASK>
         dump_stack_lvl+0x71/0x90
         __might_resched+0x1b2/0x2c0
         down_read+0x1a/0x190
         cxl_dpa_resource_start+0x15/0x50 [cxl_core]
         cxl_trace_hpa+0x122/0x300 [cxl_core]
         trace_event_raw_event_cxl_poison+0x1c9/0x2d0 [cxl_core]
    
    2/ The rwsem is already held in the inject poison path:
    
        WARNING: possible recursive locking detected
        6.7.0-rc2+ #12 Tainted: G        W  OE    N
        --------------------------------------------
        bash/1288 is trying to acquire lock:
        ffffffffc05f73d0 (cxl_dpa_rwsem){++++}-{3:3}, at: cxl_dpa_resource_start+0x15/0x50 [cxl_core]
    
        but task is already holding lock:
        ffffffffc05f73d0 (cxl_dpa_rwsem){++++}-{3:3}, at: cxl_inject_poison+0x7d/0x1e0 [cxl_core]
        [..]
        Call Trace:
         <TASK>
         dump_stack_lvl+0x71/0x90
         __might_resched+0x1b2/0x2c0
         down_read+0x1a/0x190
         cxl_dpa_resource_start+0x15/0x50 [cxl_core]
         cxl_trace_hpa+0x122/0x300 [cxl_core]
         trace_event_raw_event_cxl_poison+0x1c9/0x2d0 [cxl_core]
         __traceiter_cxl_poison+0x5c/0x80 [cxl_core]
         cxl_inject_poison+0x1bc/0x1e0 [cxl_core]
    
    This appears to have been an issue since the initial implementation and
    uncovered by the new cxl-poison.sh test [1]. That test is now passing with
    these changes.
    
    Fixes: 28a3ae4ff66c ("cxl/trace: Add an HPA to cxl_poison trace events")
    Link: http://lore.kernel.org/r/e4f2716646918135ddbadf4146e92abb659de734.1700615159.git.alison.schofield@intel.com [1]
    Cc: <stable@vger.kernel.org>
    Cc: Alison Schofield <alison.schofield@intel.com>
    Cc: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 654461744af8c33ee6943b7937272e5a4945e5c9
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Dec 15 10:01:44 2023 -0500

    btrfs: do not allow non subvolume root targets for snapshot
    
    commit a8892fd71933126ebae3d60aec5918d4dceaae76 upstream.
    
    Our btrfs subvolume snapshot <source> <destination> utility enforces
    that <source> is the root of the subvolume, however this isn't enforced
    in the kernel.  Update the kernel to also enforce this limitation to
    avoid problems with other users of this ioctl that don't have the
    appropriate checks in place.
    
    Reported-by: Martin Michaelis <code@mgjm.de>
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Neal Gompa <neal@gompa.dev>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 545d55a3e0c8f4e59fbc9d92c99ef5725c799014
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Dec 15 11:24:50 2023 +0000

    perf: Fix perf_event_validate_size() lockdep splat
    
    commit 7e2c1e4b34f07d9aa8937fab88359d4a0fce468e upstream.
    
    When lockdep is enabled, the for_each_sibling_event(sibling, event)
    macro checks that event->ctx->mutex is held. When creating a new group
    leader event, we call perf_event_validate_size() on a partially
    initialized event where event->ctx is NULL, and so when
    for_each_sibling_event() attempts to check event->ctx->mutex, we get a
    splat, as reported by Lucas De Marchi:
    
      WARNING: CPU: 8 PID: 1471 at kernel/events/core.c:1950 __do_sys_perf_event_open+0xf37/0x1080
    
    This only happens for a new event which is its own group_leader, and in
    this case there cannot be any sibling events. Thus it's safe to skip the
    check for siblings, which avoids having to make invasive and ugly
    changes to for_each_sibling_event().
    
    Avoid the splat by bailing out early when the new event is its own
    group_leader.
    
    Fixes: 382c27f4ed28f803 ("perf: Fix perf_event_validate_size()")
    Closes: https://lore.kernel.org/lkml/20231214000620.3081018-1-lucas.demarchi@intel.com/
    Closes: https://lore.kernel.org/lkml/ZXpm6gQ%2Fd59jGsuW@xpf.sh.intel.com/
    Reported-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reported-by: Pengfei Xu <pengfei.xu@intel.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20231215112450.3972309-1-mark.rutland@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ce0fb87311d17907910e06e0a9b1306da4c62b2
Author: Denis Benato <benato.denis96@gmail.com>
Date:   Fri Nov 17 14:15:55 2023 +1300

    HID: hid-asus: add const to read-only outgoing usb buffer
    
    [ Upstream commit 06ae5afce8cc1f7621cc5c7751e449ce20d68af7 ]
    
    In the function asus_kbd_set_report the parameter buf is read-only
    as it gets copied in a memory portion suitable for USB transfer,
    but the parameter is not marked as const: add the missing const and mark
    const immutable buffers passed to that function.
    
    Signed-off-by: Denis Benato <benato.denis96@gmail.com>
    Signed-off-by: Luke D. Jones <luke@ljones.dev>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 610610da58af14a2da813c550264616e99a1a756
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Nov 19 14:32:34 2023 +0900

    arm64: add dependency between vmlinuz.efi and Image
    
    [ Upstream commit c0a8574204054effad6ac83cc75c02576e2985fe ]
    
    A common issue in Makefile is a race in parallel building.
    
    You need to be careful to prevent multiple threads from writing to the
    same file simultaneously.
    
    Commit 3939f3345050 ("ARM: 8418/1: add boot image dependencies to not
    generate invalid images") addressed such a bad scenario.
    
    A similar symptom occurs with the following command:
    
      $ make -j$(nproc) ARCH=arm64 Image vmlinuz.efi
        [ snip ]
        SORTTAB vmlinux
        OBJCOPY arch/arm64/boot/Image
        OBJCOPY arch/arm64/boot/Image
        AS      arch/arm64/boot/zboot-header.o
        PAD     arch/arm64/boot/vmlinux.bin
        GZIP    arch/arm64/boot/vmlinuz
        OBJCOPY arch/arm64/boot/vmlinuz.o
        LD      arch/arm64/boot/vmlinuz.efi.elf
        OBJCOPY arch/arm64/boot/vmlinuz.efi
    
    The log "OBJCOPY arch/arm64/boot/Image" is displayed twice.
    
    It indicates that two threads simultaneously enter arch/arm64/boot/
    and write to arch/arm64/boot/Image.
    
    It occasionally leads to a build failure:
    
      $ make -j$(nproc) ARCH=arm64 Image vmlinuz.efi
        [ snip ]
        SORTTAB vmlinux
        OBJCOPY arch/arm64/boot/Image
        PAD     arch/arm64/boot/vmlinux.bin
      truncate: Invalid number: 'arch/arm64/boot/vmlinux.bin'
      make[2]: *** [drivers/firmware/efi/libstub/Makefile.zboot:13:
      arch/arm64/boot/vmlinux.bin] Error 1
      make[2]: *** Deleting file 'arch/arm64/boot/vmlinux.bin'
      make[1]: *** [arch/arm64/Makefile:163: vmlinuz.efi] Error 2
      make[1]: *** Waiting for unfinished jobs....
      make: *** [Makefile:234: __sub-make] Error 2
    
    vmlinuz.efi depends on Image, but such a dependency is not specified
    in arch/arm64/Makefile.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: SImon Glass <sjg@chromium.org>
    Link: https://lore.kernel.org/r/20231119053234.2367621-1-masahiroy@kernel.org
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df32e887d32b80875c410e2a1091be166549e051
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Tue Nov 21 20:12:54 2023 -0300

    smb: client: set correct file type from NFS reparse points
    
    [ Upstream commit 45e724022e2704b5a5193fd96f378822b0448e07 ]
    
    Handle all file types in NFS reparse points as specified in MS-FSCC
    2.1.2.6 Network File System (NFS) Reparse Data Buffer.
    
    The client is now able to set all file types based on the parsed NFS
    reparse point, which used to support only symlinks.  This works for
    SMB1+.
    
    Before patch:
    
    $ mount.cifs //srv/share /mnt -o ...
    $ ls -l /mnt
    ls: cannot access 'block': Operation not supported
    ls: cannot access 'char': Operation not supported
    ls: cannot access 'fifo': Operation not supported
    ls: cannot access 'sock': Operation not supported
    total 1
    l????????? ? ?    ?    ?            ? block
    l????????? ? ?    ?    ?            ? char
    -rwxr-xr-x 1 root root 5 Nov 18 23:22 f0
    l????????? ? ?    ?    ?            ? fifo
    l--------- 1 root root 0 Nov 18 23:23 link -> f0
    l????????? ? ?    ?    ?            ? sock
    
    After patch:
    
    $ mount.cifs //srv/share /mnt -o ...
    $ ls -l /mnt
    total 1
    brwxr-xr-x 1 root root  123,  123 Nov 18 00:34 block
    crwxr-xr-x 1 root root 1234, 1234 Nov 18 00:33 char
    -rwxr-xr-x 1 root root          5 Nov 18 23:22 f0
    prwxr-xr-x 1 root root          0 Nov 18 23:23 fifo
    lrwxr-xr-x 1 root root          0 Nov 18 23:23 link -> f0
    srwxr-xr-x 1 root root          0 Nov 19  2023 sock
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d07e5df13877921cbbebd1e305b50f512c241ee
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Tue Nov 21 20:12:53 2023 -0300

    smb: client: introduce ->parse_reparse_point()
    
    [ Upstream commit 539aad7f14dab7f947e5ab81901c0b20513a50db ]
    
    Parse reparse point into cifs_open_info_data structure and feed it
    through cifs_open_info_to_fattr().
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5c959a1dba6b21ba305ca173ffee89891640b03
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Tue Nov 21 20:12:52 2023 -0300

    smb: client: implement ->query_reparse_point() for SMB1
    
    [ Upstream commit ed3e0a149b58ea8cfd10cc4f7cefb39877ff07ac ]
    
    Reparse points are not limited to symlinks, so implement
    ->query_reparse_point() in order to handle different file types.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e25ee0c2459ae021b19d81febea329baad641eba
Author: Lech Perczak <lech.perczak@gmail.com>
Date:   Sat Nov 18 00:19:18 2023 +0100

    net: usb: qmi_wwan: claim interface 4 for ZTE MF290
    
    [ Upstream commit 99360d9620f09fb8bc15548d855011bbb198c680 ]
    
    Interface 4 is used by for QMI interface in stock firmware of MF28D, the
    router which uses MF290 modem. Rebind it to qmi_wwan after freeing it up
    from option driver.
    The proper configuration is:
    
    Interface mapping is:
    0: QCDM, 1: (unknown), 2: AT (PCUI), 2: AT (Modem), 4: QMI
    
    T:  Bus=01 Lev=02 Prnt=02 Port=00 Cnt=01 Dev#=  4 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=19d2 ProdID=0189 Rev= 0.00
    S:  Manufacturer=ZTE, Incorporated
    S:  Product=ZTE LTE Technologies MSM
    C:* #Ifs= 5 Cfg#= 1 Atr=e0 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=4ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=4ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=4ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=84(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=4ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=86(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=4ms
    
    Cc: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Lech Perczak <lech.perczak@gmail.com>
    Link: https://lore.kernel.org/r/20231117231918.100278-3-lech.perczak@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6abb8c223ce12078a0f2c129656a13338dfe960b
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Nov 21 18:10:06 2023 -0500

    eventfs: Do not allow NULL parent to eventfs_start_creating()
    
    [ Upstream commit fc4561226feaad5fcdcb55646c348d77b8ee69c5 ]
    
    The eventfs directory is dynamically created via the meta data supplied by
    the existing trace events. All files and directories in eventfs has a
    parent. Do not allow NULL to be passed into eventfs_start_creating() as
    the parent because that should never happen. Warn if it does.
    
    Link: https://lkml.kernel.org/r/20231121231112.693841807@goodmis.org
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a739ceb7474561e522250b6209f73c12f15c0b77
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 9 22:22:13 2023 -0800

    asm-generic: qspinlock: fix queued_spin_value_unlocked() implementation
    
    [ Upstream commit 125b0bb95dd6bec81b806b997a4ccb026eeecf8f ]
    
    We really don't want to do atomic_read() or anything like that, since we
    already have the value, not the lock.  The whole point of this is that
    we've loaded the lock from memory, and we want to check whether the
    value we loaded was a locked one or not.
    
    The main use of this is the lockref code, which loads both the lock and
    the reference count in one atomic operation, and then works on that
    combined value.  With the atomic_read(), the compiler would pointlessly
    spill the value to the stack, in order to then be able to read it back
    "atomically".
    
    This is the qspinlock version of commit c6f4a9002252 ("asm-generic:
    ticket-lock: Optimize arch_spin_value_unlocked()") which fixed this same
    bug for ticket locks.
    
    Cc: Guo Ren <guoren@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Waiman Long <longman@redhat.com>
    Link: https://lore.kernel.org/all/CAHk-=whNRv0v6kQiV5QO6DJhjH4KEL36vWQ6Re8Csrnh4zbRkQ@mail.gmail.com/
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97774998f8e18dd1dfd728701ddbf82e73fa037f
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Mon Nov 20 13:00:00 2023 +0100

    scripts/checkstack.pl: match all stack sizes for s390
    
    [ Upstream commit aab1f809d7540def24498e81347740a7239a74d5 ]
    
    For some unknown reason the regular expression for checkstack only matches
    three digit numbers starting with the number "3", or any higher
    number. Which means that it skips any stack sizes smaller than 304
    bytes. This makes the checkstack script a bit less useful than it could be.
    
    Change the script to match any number. To be filtered out stack sizes
    can be configured with the min_stack variable, which omits any stack
    frame sizes smaller than 100 bytes by default.
    
    Tested-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f75542ce7c4e958386fb4932185842c3c8e1c4d
Author: Nguyen Dinh Phi <phind.uet@gmail.com>
Date:   Tue Nov 21 15:53:57 2023 +0800

    nfc: virtual_ncidev: Add variable to check if ndev is running
    
    [ Upstream commit 84d2db91f14a32dc856a5972e3f0907089093c7a ]
    
    syzbot reported an memory leak that happens when an skb is add to
    send_buff after virtual nci closed.
    This patch adds a variable to track if the ndev is running before
    handling new skb in send function.
    
    Signed-off-by: Nguyen Dinh Phi <phind.uet@gmail.com>
    Reported-by: syzbot+6eb09d75211863f15e3e@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/lkml/00000000000075472b06007df4fb@google.com
    Reviewed-by: Bongsu Jeon
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9d25e4639c1d95d384e08d48d7b89cf690db9d1
Author: Aoba K <nexp_0x17@outlook.com>
Date:   Tue Nov 21 20:23:11 2023 +0800

    HID: multitouch: Add quirk for HONOR GLO-GXXX touchpad
    
    [ Upstream commit 9ffccb691adb854e7b7f3ee57fbbda12ff70533f ]
    
    Honor MagicBook 13 2023 has a touchpad which do not switch to the multitouch
    mode until the input mode feature is written by the host.  The touchpad do
    report the input mode at touchpad(3), while itself working under mouse mode. As
    a workaround, it is possible to call MT_QUIRE_FORCE_GET_FEATURE to force set
    feature in mt_set_input_mode for such device.
    
    The touchpad reports as BLTP7853, which cannot retrive any useful manufacture
    information on the internel by this string at present.  As the serial number of
    the laptop is GLO-G52, while DMI info reports the laptop serial number as
    GLO-GXXX, this workaround should applied to all models which has the GLO-GXXX.
    
    Signed-off-by: Aoba K <nexp_0x17@outlook.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fc2827c02425c1a74233acaa258e725043d7d59
Author: Denis Benato <benato.denis96@gmail.com>
Date:   Fri Nov 17 14:15:56 2023 +1300

    HID: hid-asus: reset the backlight brightness level on resume
    
    [ Upstream commit 546edbd26cff7ae990e480a59150e801a06f77b1 ]
    
    Some devices managed by this driver automatically set brightness to 0
    before entering a suspended state and reset it back to a default
    brightness level after the resume:
    this has the effect of having the kernel report wrong brightness
    status after a sleep, and on some devices (like the Asus RC71L) that
    brightness is the intensity of LEDs directly facing the user.
    
    Fix the above issue by setting back brightness to the level it had
    before entering a sleep state.
    
    Signed-off-by: Denis Benato <benato.denis96@gmail.com>
    Signed-off-by: Luke D. Jones <luke@ljones.dev>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3ebe19c197b4dd8731de0ec7fd31fe9c12c774d
Author: Li Nan <linan122@huawei.com>
Date:   Mon Sep 11 10:33:08 2023 +0800

    nbd: pass nbd_sock to nbd_read_reply() instead of index
    
    [ Upstream commit 98c598afc22d4e43c2ad91860b65996d0c099a5d ]
    
    If a socket is processing ioctl 'NBD_SET_SOCK', config->socks might be
    krealloc in nbd_add_socket(), and a garbage request is received now, a UAF
    may occurs.
    
      T1
      nbd_ioctl
       __nbd_ioctl
        nbd_add_socket
         blk_mq_freeze_queue
                                    T2
                                    recv_work
                                     nbd_read_reply
                                      sock_xmit
         krealloc config->socks
                                       def config->socks
    
    Pass nbd_sock to nbd_read_reply(). And introduce a new function
    sock_xmit_recv(), which differs from sock_xmit only in the way it get
    socket.
    
    ==================================================================
    BUG: KASAN: use-after-free in sock_xmit+0x525/0x550
    Read of size 8 at addr ffff8880188ec428 by task kworker/u12:1/18779
    
    Workqueue: knbd4-recv recv_work
    Call Trace:
     __dump_stack
     dump_stack+0xbe/0xfd
     print_address_description.constprop.0+0x19/0x170
     __kasan_report.cold+0x6c/0x84
     kasan_report+0x3a/0x50
     sock_xmit+0x525/0x550
     nbd_read_reply+0xfe/0x2c0
     recv_work+0x1c2/0x750
     process_one_work+0x6b6/0xf10
     worker_thread+0xdd/0xd80
     kthread+0x30a/0x410
     ret_from_fork+0x22/0x30
    
    Allocated by task 18784:
     kasan_save_stack+0x1b/0x40
     kasan_set_track
     set_alloc_info
     __kasan_kmalloc
     __kasan_kmalloc.constprop.0+0xf0/0x130
     slab_post_alloc_hook
     slab_alloc_node
     slab_alloc
     __kmalloc_track_caller+0x157/0x550
     __do_krealloc
     krealloc+0x37/0xb0
     nbd_add_socket
     +0x2d3/0x880
     __nbd_ioctl
     nbd_ioctl+0x584/0x8e0
     __blkdev_driver_ioctl
     blkdev_ioctl+0x2a0/0x6e0
     block_ioctl+0xee/0x130
     vfs_ioctl
     __do_sys_ioctl
     __se_sys_ioctl+0x138/0x190
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    Freed by task 18784:
     kasan_save_stack+0x1b/0x40
     kasan_set_track+0x1c/0x30
     kasan_set_free_info+0x20/0x40
     __kasan_slab_free.part.0+0x13f/0x1b0
     slab_free_hook
     slab_free_freelist_hook
     slab_free
     kfree+0xcb/0x6c0
     krealloc+0x56/0xb0
     nbd_add_socket+0x2d3/0x880
     __nbd_ioctl
     nbd_ioctl+0x584/0x8e0
     __blkdev_driver_ioctl
     blkdev_ioctl+0x2a0/0x6e0
     block_ioctl+0xee/0x130
     vfs_ioctl
     __do_sys_ioctl
     __se_sys_ioctl+0x138/0x190
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    Signed-off-by: Li Nan <linan122@huawei.com>
    Reviewed-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20230911023308.3467802-1-linan666@huaweicloud.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af48c4099bd86ae0b600eabfc3911f0923526525
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Nov 14 15:54:30 2023 +0100

    HID: add ALWAYS_POLL quirk for Apple kb
    
    [ Upstream commit c55092187d9ad7b2f8f5a8645286fa03997d442f ]
    
    These devices disconnect if suspended without remote wakeup. They can operate
    with the standard driver.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c38f7b0f554f0403eb90516332a9b70a64cadc75
Author: Brett Raye <braye@fastmail.com>
Date:   Thu Nov 2 18:10:38 2023 -0700

    HID: glorious: fix Glorious Model I HID report
    
    [ Upstream commit a5e913c25b6b2b6ae02acef6d9400645ac03dfdf ]
    
    The Glorious Model I mouse has a buggy HID report descriptor for its
    keyboard endpoint (used for programmable buttons). For report ID 2, there
    is a mismatch between Logical Minimum and Usage Minimum in the array that
    reports keycodes.
    
    The offending portion of the descriptor: (from hid-decode)
    
    0x95, 0x05,                    //  Report Count (5)                   30
    0x75, 0x08,                    //  Report Size (8)                    32
    0x15, 0x00,                    //  Logical Minimum (0)                34
    0x25, 0x65,                    //  Logical Maximum (101)              36
    0x05, 0x07,                    //  Usage Page (Keyboard)              38
    0x19, 0x01,                    //  Usage Minimum (1)                  40
    0x29, 0x65,                    //  Usage Maximum (101)                42
    0x81, 0x00,                    //  Input (Data,Arr,Abs)               44
    
    This bug shifts all programmed keycodes up by 1. Importantly, this causes
    "empty" array indexes of 0x00 to be interpreted as 0x01, ErrorRollOver.
    The presence of ErrorRollOver causes the system to ignore all keypresses
    from the endpoint and breaks the ability to use the programmable buttons.
    
    Setting byte 41 to 0x00 fixes this, and causes keycodes to be interpreted
    correctly.
    
    Also, USB_VENDOR_ID_GLORIOUS is changed to USB_VENDOR_ID_SINOWEALTH,
    and a new ID for Laview Technology is added. Glorious seems to be
    white-labeling controller boards or mice from these vendors. There isn't a
    single canonical vendor ID for Glorious products.
    
    Signed-off-by: Brett Raye <braye@fastmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b3507b8ea55aae5377aaccd6d9cb9f6e0204136
Author: Yihong Cao <caoyihong4@outlook.com>
Date:   Mon Oct 30 01:05:38 2023 +0800

    HID: apple: add Jamesdonkey and A3R to non-apple keyboards list
    
    [ Upstream commit 113f736655e4f20633e107d731dd5bd097d5938c ]
    
    Jamesdonkey A3R keyboard is identified as "Jamesdonkey A3R" in wired
    mode, "A3R-U" in wireless mode and "A3R" in bluetooth mode. Adding them
    to non-apple keyboards fixes function key.
    
    Signed-off-by: Yihong Cao <caoyihong4@outlook.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4b50ac06ea6e47bdd2b04e97d1090c673c80645
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Wed Oct 25 16:55:11 2023 +1300

    HID: mcp2221: Allow IO to start during probe
    
    [ Upstream commit 73ce9f1f2741a38f5d27393e627702ae2c46e6f2 ]
    
    During the probe we add an I2C adapter and as soon as we add that adapter
    it may be used for a transfer (e.g via the code in i2cdetect()).
    Those transfers are not able to complete and time out. This is because the
    HID raw_event callback (mcp2221_raw_event) will not be invoked until the
    HID device's 'driver_input_lock' is marked up at the completion of the
    probe in hid_device_probe(). This starves the driver of the responses it
    is waiting for.
    In order to allow the I2C transfers to complete while we are still in the
    probe, start the IO once we have completed init of the HID device.
    
    This issue seems to have been seen before and a patch was submitted but
    it seems it was never accepted. See:
    https://lore.kernel.org/all/20221103222714.21566-3-Enrik.Berkhan@inka.de/
    
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2afe67cfe8f121b1b9dd244a0edc01b89cd65813
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Wed Oct 25 16:55:10 2023 +1300

    HID: mcp2221: Set driver data before I2C adapter add
    
    [ Upstream commit f2d4a5834638bbc967371b9168c0b481519f7c5e ]
    
    The process of adding an I2C adapter can invoke I2C accesses on that new
    adapter (see i2c_detect()).
    
    Ensure we have set the adapter's driver data to avoid null pointer
    dereferences in the xfer functions during the adapter add.
    
    This has been noted in the past and the same fix proposed but not
    completed. See:
    https://lore.kernel.org/lkml/ef597e73-ed71-168e-52af-0d19b03734ac@vigem.de/
    
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 086f91f3ce3b8d13cb794b955002b74444a384fa
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Nov 20 17:07:56 2023 +0200

    platform/x86: intel_telemetry: Fix kernel doc descriptions
    
    [ Upstream commit a6584711e64d9d12ab79a450ec3628fd35e4f476 ]
    
    LKP found issues with a kernel doc in the driver:
    
    core.c:116: warning: Function parameter or member 'ioss_evtconfig' not described in 'telemetry_update_events'
    core.c:188: warning: Function parameter or member 'ioss_evtconfig' not described in 'telemetry_get_eventconfig'
    
    It looks like it were copy'n'paste typos when these descriptions
    had been introduced. Fix the typos.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202310070743.WALmRGSY-lkp@intel.com/
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20231120150756.1661425-1-andriy.shevchenko@linux.intel.com
    Reviewed-by: Rajneesh Bhardwaj <irenic.rajneesh@gmail.com>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f61771aec67660c24b50202b58861cc8ecc11382
Author: Bibo Mao <maobibo@loongson.cn>
Date:   Tue Nov 21 15:03:25 2023 +0800

    LoongArch: Implement constant timer shutdown interface
    
    [ Upstream commit d43f37b73468c172bc89ac4824a1511b411f0778 ]
    
    When a cpu is hot-unplugged, it is put in idle state and the function
    arch_cpu_idle_dead() is called. The timer interrupt for this processor
    should be disabled, otherwise there will be pending timer interrupt for
    the unplugged cpu, so that vcpu is prevented from giving up scheduling
    when system is running in vm mode.
    
    This patch implements the timer shutdown interface so that the constant
    timer will be properly disabled when a CPU is hot-unplugged.
    
    Reviewed-by: WANG Xuerui <git@xen0n.name>
    Signed-off-by: Bibo Mao <maobibo@loongson.cn>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c28fec461df3869355c95b6baed3c36aa870f1fe
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Tue Nov 21 15:03:25 2023 +0800

    LoongArch: Mark {dmw,tlb}_virt_to_page() exports as non-GPL
    
    [ Upstream commit 19d86a496233731882aea7ec24505ce6641b1c0c ]
    
    Mark {dmw,tlb}_virt_to_page() exports as non-GPL, in order to let
    out-of-tree modules (e.g. OpenZFS) be built without errors. Otherwise
    we get:
    
    ERROR: modpost: GPL-incompatible module zfs.ko uses GPL-only symbol 'dmw_virt_to_page'
    ERROR: modpost: GPL-incompatible module zfs.ko uses GPL-only symbol 'tlb_virt_to_page'
    
    Reported-by: Haowu Ge <gehaowu@bitmoe.com>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71d8348cca92fa423538df047771653bf14f7810
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Tue Nov 21 15:03:25 2023 +0800

    LoongArch: Silence the boot warning about 'nokaslr'
    
    [ Upstream commit 902d75cdf0cf0a3fb58550089ee519abf12566f5 ]
    
    The kernel parameter 'nokaslr' is handled before start_kernel(), so we
    don't need early_param() to mark it technically. But it can cause a boot
    warning as follows:
    
    Unknown kernel command line parameters "nokaslr", will be passed to user space.
    
    When we use 'init=/bin/bash', 'nokaslr' which passed to user space will
    even cause a kernel panic. So we use early_param() to mark 'nokaslr',
    simply print a notice and silence the boot warning (also fix a potential
    panic). This logic is similar to RISC-V.
    
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab3f300524697919f64ae920e904d0836b4057b0
Author: WANG Rui <wangrui@loongson.cn>
Date:   Tue Nov 21 15:03:25 2023 +0800

    LoongArch: Record pc instead of offset in la_abs relocation
    
    [ Upstream commit aa0cbc1b506b090c3a775b547c693ada108cc0d7 ]
    
    To clarify, the previous version functioned flawlessly. However, it's
    worth noting that the LLVM's LoongArch backend currently lacks support
    for cross-section label calculations. With this patch, we enable the use
    of clang to compile relocatable kernels.
    
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: WANG Rui <wangrui@loongson.cn>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03372601f5f1f143e759b611d93c0f2c2cb0b0b3
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Tue Nov 21 15:03:25 2023 +0800

    LoongArch: Add dependency between vmlinuz.efi and vmlinux.efi
    
    [ Upstream commit d3ec75bc635cb0cb8185b63293d33a3d1b942d22 ]
    
    A common issue in Makefile is a race in parallel building.
    
    You need to be careful to prevent multiple threads from writing to the
    same file simultaneously.
    
    Commit 3939f3345050 ("ARM: 8418/1: add boot image dependencies to not
    generate invalid images") addressed such a bad scenario.
    
    A similar symptom occurs with the following command:
    
      $ make -j$(nproc) ARCH=loongarch vmlinux.efi vmlinuz.efi
        [ snip ]
        SORTTAB vmlinux
        OBJCOPY arch/loongarch/boot/vmlinux.efi
        OBJCOPY arch/loongarch/boot/vmlinux.efi
        PAD     arch/loongarch/boot/vmlinux.bin
        GZIP    arch/loongarch/boot/vmlinuz
        OBJCOPY arch/loongarch/boot/vmlinuz.o
        LD      arch/loongarch/boot/vmlinuz.efi.elf
        OBJCOPY arch/loongarch/boot/vmlinuz.efi
    
    The log "OBJCOPY arch/loongarch/boot/vmlinux.efi" is displayed twice.
    
    It indicates that two threads simultaneously enter arch/loongarch/boot/
    and write to arch/loongarch/boot/vmlinux.efi.
    
    It occasionally leads to a build failure:
    
      $ make -j$(nproc) ARCH=loongarch vmlinux.efi vmlinuz.efi
        [ snip ]
        SORTTAB vmlinux
        OBJCOPY arch/loongarch/boot/vmlinux.efi
        PAD     arch/loongarch/boot/vmlinux.bin
      truncate: Invalid number: ‘arch/loongarch/boot/vmlinux.bin’
      make[2]: *** [drivers/firmware/efi/libstub/Makefile.zboot:13:
      arch/loongarch/boot/vmlinux.bin] Error 1
      make[2]: *** Deleting file 'arch/loongarch/boot/vmlinux.bin'
      make[1]: *** [arch/loongarch/Makefile:146: vmlinuz.efi] Error 2
      make[1]: *** Waiting for unfinished jobs....
      make: *** [Makefile:234: __sub-make] Error 2
    
    vmlinuz.efi depends on vmlinux.efi, but such a dependency is not
    specified in arch/loongarch/Makefile.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ade0b82faf7b8dec11075fe8ea38a7dba898042
Author: Eduard Zingerman <eddyz87@gmail.com>
Date:   Tue Nov 21 04:06:53 2023 +0200

    selftests/bpf: fix bpf_loop_bench for new callback verification scheme
    
    [ Upstream commit f40bfd1679446b22d321e64a1fa98b7d07d2be08 ]
    
    This is a preparatory change. A follow-up patch "bpf: verify callbacks
    as if they are called unknown number of times" changes logic for
    callbacks handling. While previously callbacks were verified as a
    single function call, new scheme takes into account that callbacks
    could be executed unknown number of times.
    
    This has dire implications for bpf_loop_bench:
    
        SEC("fentry/" SYS_PREFIX "sys_getpgid")
        int benchmark(void *ctx)
        {
                for (int i = 0; i < 1000; i++) {
                        bpf_loop(nr_loops, empty_callback, NULL, 0);
                        __sync_add_and_fetch(&hits, nr_loops);
                }
                return 0;
        }
    
    W/o callbacks change verifier sees it as a 1000 calls to
    empty_callback(). However, with callbacks change things become
    exponential:
    - i=0: state exploring empty_callback is scheduled with i=0 (a);
    - i=1: state exploring empty_callback is scheduled with i=1;
      ...
    - i=999: state exploring empty_callback is scheduled with i=999;
    - state (a) is popped from stack;
    - i=1: state exploring empty_callback is scheduled with i=1;
      ...
    
    Avoid this issue by rewriting outer loop as bpf_loop().
    Unfortunately, this adds a function call to a loop at runtime, which
    negatively affects performance:
    
                throughput               latency
       before:  149.919 ± 0.168 M ops/s, 6.670 ns/op
       after :  137.040 ± 0.187 M ops/s, 7.297 ns/op
    
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Link: https://lore.kernel.org/r/20231121020701.26440-4-eddyz87@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9514925a9abc4e26ce58ec93f70bfb565b53bd72
Author: Hannes Reinecke <hare@suse.de>
Date:   Tue Nov 14 14:27:01 2023 +0100

    nvme: catch errors from nvme_configure_metadata()
    
    [ Upstream commit cd9aed606088d36a7ffff3e808db4e76b1854285 ]
    
    nvme_configure_metadata() is issuing I/O, so we might incur an I/O
    error which will cause the connection to be reset.
    But in that case any further probing will race with reset and
    cause UAF errors.
    So return a status from nvme_configure_metadata() and abort
    probing if there was an I/O error.
    
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89fc9028e86e9968294ea4cb66d94fa7e5438871
Author: Mark O'Donovan <shiftee@posteo.net>
Date:   Wed Oct 11 08:45:12 2023 +0000

    nvme-auth: set explanation code for failure2 msgs
    
    [ Upstream commit 38ce1570e2c46e7e9af983aa337edd7e43723aa2 ]
    
    Some error cases were not setting an auth-failure-reason-code-explanation.
    This means an AUTH_Failure2 message will be sent with an explanation value
    of 0 which is a reserved value.
    
    Signed-off-by: Mark O'Donovan <shiftee@posteo.net>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c34fa2d16e98ec26251939d9958731ef74d5c493
Author: Li Nan <linan122@huawei.com>
Date:   Fri Nov 17 00:23:16 2023 +0800

    nbd: fix null-ptr-dereference while accessing 'nbd->config'
    
    [ Upstream commit c2da049f419417808466c529999170f5c3ef7d3d ]
    
    Memory reordering may occur in nbd_genl_connect(), causing config_refs
    to be set to 1 while nbd->config is still empty. Opening nbd at this
    time will cause null-ptr-dereference.
    
       T1                      T2
       nbd_open
        nbd_get_config_unlocked
                               nbd_genl_connect
                                nbd_alloc_and_init_config
                                 //memory reordered
                                 refcount_set(&nbd->config_refs, 1)  // 2
         nbd->config
          ->null point
                                 nbd->config = config  // 1
    
    Fix it by adding smp barrier to guarantee the execution sequence.
    
    Signed-off-by: Li Nan <linan122@huawei.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Link: https://lore.kernel.org/r/20231116162316.1740402-4-linan666@huaweicloud.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c1517344116cc47bdde5fb9b140189e7938a74c
Author: Li Nan <linan122@huawei.com>
Date:   Fri Nov 17 00:23:15 2023 +0800

    nbd: factor out a helper to get nbd_config without holding 'config_lock'
    
    [ Upstream commit 3123ac77923341774ca3ad1196ad20bb0732bf70 ]
    
    There are no functional changes, just to make code cleaner and prepare
    to fix null-ptr-dereference while accessing 'nbd->config'.
    
    Signed-off-by: Li Nan <linan122@huawei.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Link: https://lore.kernel.org/r/20231116162316.1740402-3-linan666@huaweicloud.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4087936a97b899efa0f51d5b71f31f52cd34f302
Author: Li Nan <linan122@huawei.com>
Date:   Fri Nov 17 00:23:14 2023 +0800

    nbd: fold nbd config initialization into nbd_alloc_config()
    
    [ Upstream commit 1b59860540a4018e8071dc18d4893ec389506b7d ]
    
    There are no functional changes, make the code cleaner and prepare to
    fix null-ptr-dereference while accessing 'nbd->config'.
    
    Signed-off-by: Li Nan <linan122@huawei.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Link: https://lore.kernel.org/r/20231116162316.1740402-2-linan666@huaweicloud.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a4bba9f0470d0cb6afd8c8e880b04567585f542
Author: Coly Li <colyli@suse.de>
Date:   Mon Nov 20 13:25:03 2023 +0800

    bcache: avoid NULL checking to c->root in run_cache_set()
    
    [ Upstream commit 3eba5e0b2422aec3c9e79822029599961fdcab97 ]
    
    In run_cache_set() after c->root returned from bch_btree_node_get(), it
    is checked by IS_ERR_OR_NULL(). Indeed it is unncessary to check NULL
    because bch_btree_node_get() will not return NULL pointer to caller.
    
    This patch replaces IS_ERR_OR_NULL() by IS_ERR() for the above reason.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Link: https://lore.kernel.org/r/20231120052503.6122-11-colyli@suse.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 286918928ed7094d53e6fd08513e4a3f1a09f1d0
Author: Coly Li <colyli@suse.de>
Date:   Mon Nov 20 13:25:02 2023 +0800

    bcache: add code comments for bch_btree_node_get() and __bch_btree_node_alloc()
    
    [ Upstream commit 31f5b956a197d4ec25c8a07cb3a2ab69d0c0b82f ]
    
    This patch adds code comments to bch_btree_node_get() and
    __bch_btree_node_alloc() that NULL pointer will not be returned and it
    is unnecessary to check NULL pointer by the callers of these routines.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Link: https://lore.kernel.org/r/20231120052503.6122-10-colyli@suse.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 665341724499addb5400202294eef513b0f5f5de
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Mon Nov 20 13:24:56 2023 +0800

    bcache: remove redundant assignment to variable cur_idx
    
    [ Upstream commit be93825f0e6428c2d3f03a6e4d447dc48d33d7ff ]
    
    Variable cur_idx is being initialized with a value that is never read,
    it is being re-assigned later in a while-loop. Remove the redundant
    assignment. Cleans up clang scan build warning:
    
    drivers/md/bcache/writeback.c:916:2: warning: Value stored to 'cur_idx'
    is never read [deadcode.DeadStores]
    
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Reviewed-by: Coly Li <colyli@suse.de>
    Signed-off-by: Coly Li <colyli@suse.de>
    Link: https://lore.kernel.org/r/20231120052503.6122-4-colyli@suse.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09bdafb89a56a267c070fdb96d385934c14d2735
Author: Coly Li <colyli@suse.de>
Date:   Mon Nov 20 13:24:54 2023 +0800

    bcache: avoid oversize memory allocation by small stripe_size
    
    [ Upstream commit baf8fb7e0e5ec54ea0839f0c534f2cdcd79bea9c ]
    
    Arraies bcache->stripe_sectors_dirty and bcache->full_dirty_stripes are
    used for dirty data writeback, their sizes are decided by backing device
    capacity and stripe size. Larger backing device capacity or smaller
    stripe size make these two arraies occupies more dynamic memory space.
    
    Currently bcache->stripe_size is directly inherited from
    queue->limits.io_opt of underlying storage device. For normal hard
    drives, its limits.io_opt is 0, and bcache sets the corresponding
    stripe_size to 1TB (1<<31 sectors), it works fine 10+ years. But for
    devices do declare value for queue->limits.io_opt, small stripe_size
    (comparing to 1TB) becomes an issue for oversize memory allocations of
    bcache->stripe_sectors_dirty and bcache->full_dirty_stripes, while the
    capacity of hard drives gets much larger in recent decade.
    
    For example a raid5 array assembled by three 20TB hardrives, the raid
    device capacity is 40TB with typical 512KB limits.io_opt. After the math
    calculation in bcache code, these two arraies will occupy 400MB dynamic
    memory. Even worse Andrea Tomassetti reports that a 4KB limits.io_opt is
    declared on a new 2TB hard drive, then these two arraies request 2GB and
    512MB dynamic memory from kzalloc(). The result is that bcache device
    always fails to initialize on his system.
    
    To avoid the oversize memory allocation, bcache->stripe_size should not
    directly inherited by queue->limits.io_opt from the underlying device.
    This patch defines BCH_MIN_STRIPE_SZ (4MB) as minimal bcache stripe size
    and set bcache device's stripe size against the declared limits.io_opt
    value from the underlying storage device,
    - If the declared limits.io_opt > BCH_MIN_STRIPE_SZ, bcache device will
      set its stripe size directly by this limits.io_opt value.
    - If the declared limits.io_opt < BCH_MIN_STRIPE_SZ, bcache device will
      set its stripe size by a value multiplying limits.io_opt and euqal or
      large than BCH_MIN_STRIPE_SZ.
    
    Then the minimal stripe size of a bcache device will always be >= 4MB.
    For a 40TB raid5 device with 512KB limits.io_opt, memory occupied by
    bcache->stripe_sectors_dirty and bcache->full_dirty_stripes will be 50MB
    in total. For a 2TB hard drive with 4KB limits.io_opt, memory occupied
    by these two arraies will be 2.5MB in total.
    
    Such mount of memory allocated for bcache->stripe_sectors_dirty and
    bcache->full_dirty_stripes is reasonable for most of storage devices.
    
    Reported-by: Andrea Tomassetti <andrea.tomassetti-opensource@devo.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Reviewed-by: Eric Wheeler <bcache@lists.ewheeler.net>
    Link: https://lore.kernel.org/r/20231120052503.6122-2-colyli@suse.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0730b1e32a0b032a3a4fddebfec54d7102056414
Author: Ming Lei <ming.lei@redhat.com>
Date:   Fri Nov 17 10:35:24 2023 +0800

    blk-cgroup: bypass blkcg_deactivate_policy after destroying
    
    [ Upstream commit e63a57303599b17290cd8bc48e6f20b24289a8bc ]
    
    blkcg_deactivate_policy() can be called after blkg_destroy_all()
    returns, and it isn't necessary since blkg_destroy_all has covered
    policy deactivation.
    
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20231117023527.3188627-4-ming.lei@redhat.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5aba47ce61b7c277246e367f51fdcc930af6a699
Author: Ming Lei <ming.lei@redhat.com>
Date:   Fri Nov 17 10:35:22 2023 +0800

    blk-throttle: fix lockdep warning of "cgroup_mutex or RCU read lock required!"
    
    [ Upstream commit 27b13e209ddca5979847a1b57890e0372c1edcee ]
    
    Inside blkg_for_each_descendant_pre(), both
    css_for_each_descendant_pre() and blkg_lookup() requires RCU read lock,
    and either cgroup_assert_mutex_or_rcu_locked() or rcu_read_lock_held()
    is called.
    
    Fix the warning by adding rcu read lock.
    
    Reported-by: Changhui Zhong <czhong@redhat.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20231117023527.3188627-2-ming.lei@redhat.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 462f1111d9459baa1ff98c3bc966b64d480b9ea0
Author: David Howells <dhowells@redhat.com>
Date:   Wed Nov 15 17:15:40 2023 +0000

    rxrpc: Fix some minor issues with bundle tracing
    
    [ Upstream commit 0c3bd086d12d185650d095a906662593ec607bd0 ]
    
    Fix some superficial issues with the tracing of rxrpc_bundle structs,
    including:
    
     (1) Set the debug_id when the bundle is allocated rather than when it is
         set up so that the "NEW" trace line displays the correct bundle ID.
    
     (2) Show the refcount when emitting the "FREE" traceline.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: "David S. Miller" <davem@davemloft.net>
    cc: Eric Dumazet <edumazet@google.com>
    cc: Jakub Kicinski <kuba@kernel.org>
    cc: Paolo Abeni <pabeni@redhat.com>
    cc: linux-afs@lists.infradead.org
    cc: netdev@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c40c0b89bf1d243de9b3d5f233d8d19ac51f9eae
Author: Jean Delvare <jdelvare@suse.de>
Date:   Wed Nov 15 11:53:31 2023 +0100

    stmmac: dwmac-loongson: Add architecture dependency
    
    [ Upstream commit 7fbd5fc2b35a8f559a6b380dfa9bcd964a758186 ]
    
    Only present the DWMAC_LOONGSON option on architectures where it can
    actually be used.
    
    This follows the same logic as the DWMAC_INTEL option.
    
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Cc: Keguang Zhang <keguang.zhang@gmail.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ebf775f0541ae0d474836fa0cf3220e502f8e3e
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Nov 15 11:08:57 2023 +0100

    usb: aqc111: check packet for fixup for true limit
    
    [ Upstream commit ccab434e674ca95d483788b1895a70c21b7f016a ]
    
    If a device sends a packet that is inbetween 0
    and sizeof(u64) the value passed to skb_trim()
    as length will wrap around ending up as some very
    large value.
    
    The driver will then proceed to parse the header
    located at that position, which will either oops or
    process some random value.
    
    The fix is to check against sizeof(u64) rather than
    0, which the driver currently does. The issue exists
    since the introduction of the driver.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54d8c1d3261dfb8be84ffc17cf94fa231c9d88d4
Author: Saurabh Sengar <ssengar@linux.microsoft.com>
Date:   Sat Nov 11 00:37:47 2023 -0800

    x86/hyperv: Fix the detection of E820_TYPE_PRAM in a Gen2 VM
    
    [ Upstream commit 7e8037b099c0bbe8f2109dc452dbcab8d400fc53 ]
    
    A Gen2 VM doesn't support legacy PCI/PCIe, so both raw_pci_ops and
    raw_pci_ext_ops are NULL, and pci_subsys_init() -> pcibios_init()
    doesn't call pcibios_resource_survey() -> e820__reserve_resources_late();
    as a result, any emulated persistent memory of E820_TYPE_PRAM (12) via
    the kernel parameter memmap=nn[KMG]!ss is not added into iomem_resource
    and hence can't be detected by register_e820_pmem().
    
    Fix this by directly calling e820__reserve_resources_late() in
    hv_pci_init(), which is called from arch_initcall(pci_arch_init).
    
    It's ok to move a Gen2 VM's e820__reserve_resources_late() from
    subsys_initcall(pci_subsys_init) to arch_initcall(pci_arch_init) because
    the code in-between doesn't depend on the E820 resources.
    e820__reserve_resources_late() depends on e820__reserve_resources(),
    which has been called earlier from setup_arch().
    
    For a Gen-2 VM, the new hv_pci_init() also adds any memory of
    E820_TYPE_PMEM (7) into iomem_resource, and acpi_nfit_register_region() ->
    acpi_nfit_insert_resource() -> region_intersects() returns
    REGION_INTERSECTS, so the memory of E820_TYPE_PMEM won't get added twice.
    
    Changed the local variable "int gen2vm" to "bool gen2vm".
    
    Signed-off-by: Saurabh Sengar <ssengar@linux.microsoft.com>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Message-ID: <1699691867-9827-1-git-send-email-ssengar@linux.microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca3ebcf2c448f04ae144ddb19ad68b4cab6fcad2
Author: David Hildenbrand <david@redhat.com>
Date:   Wed Dec 6 11:35:58 2023 +0100

    selftests/mm: cow: print ksft header before printing anything else
    
    [ Upstream commit a6fcd57cf2df409d35e9225b8dbad6f937b28df0 ]
    
    Doing a ksft_print_msg() before the ksft_print_header() seems to confuse
    the ksft framework in a strange way: running the test on the cmdline
    results in the expected output.
    
    But piping the output somewhere else, results in some odd output,
    whereby we repeatedly get the same info printed:
            # [INFO] detected THP size: 2048 KiB
            # [INFO] detected hugetlb page size: 2048 KiB
            # [INFO] detected hugetlb page size: 1048576 KiB
            # [INFO] huge zeropage is enabled
            TAP version 13
            1..190
            # [INFO] Anonymous memory tests in private mappings
            # [RUN] Basic COW after fork() ... with base page
            # [INFO] detected THP size: 2048 KiB
            # [INFO] detected hugetlb page size: 2048 KiB
            # [INFO] detected hugetlb page size: 1048576 KiB
            # [INFO] huge zeropage is enabled
            TAP version 13
            1..190
            # [INFO] Anonymous memory tests in private mappings
            # [RUN] Basic COW after fork() ... with base page
            ok 1 No leak from parent into child
            # [RUN] Basic COW after fork() ... with swapped out base page
            # [INFO] detected THP size: 2048 KiB
            # [INFO] detected hugetlb page size: 2048 KiB
            # [INFO] detected hugetlb page size: 1048576 KiB
            # [INFO] huge zeropage is enabled
    
    Doing the ksft_print_header() first seems to resolve that and gives us
    the output we expect:
            TAP version 13
            # [INFO] detected THP size: 2048 KiB
            # [INFO] detected hugetlb page size: 2048 KiB
            # [INFO] detected hugetlb page size: 1048576 KiB
            # [INFO] huge zeropage is enabled
            1..190
            # [INFO] Anonymous memory tests in private mappings
            # [RUN] Basic COW after fork() ... with base page
            ok 1 No leak from parent into child
            # [RUN] Basic COW after fork() ... with swapped out base page
            ok 2 No leak from parent into child
            # [RUN] Basic COW after fork() ... with THP
            ok 3 No leak from parent into child
            # [RUN] Basic COW after fork() ... with swapped-out THP
            ok 4 No leak from parent into child
            # [RUN] Basic COW after fork() ... with PTE-mapped THP
            ok 5 No leak from parent into child
    
    Link: https://lkml.kernel.org/r/20231206103558.38040-1-david@redhat.com
    Fixes: f4b5fd6946e2 ("selftests/vm: anon_cow: THP tests")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reported-by: Nico Pache <npache@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd378c371ba080652a9c4d02f77d0737ff0d126e
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Fri Dec 1 12:21:09 2023 +0000

    drm/i915: Use internal class when counting engine resets
    
    [ Upstream commit 1f721a93a528268fa97875cff515d1fcb69f4f44 ]
    
    Commit 503579448db9 ("drm/i915/gsc: Mark internal GSC engine with reserved uabi class")
    made the GSC0 engine not have a valid uabi class and so broke the engine
    reset counting, which in turn was made class based in cb823ed9915b ("drm/i915/gt: Use intel_gt as the primary object for handling resets").
    
    Despite the title and commit text of the latter is not mentioning it (and
    has left the storage array incorrectly sized), tracking by class, despite
    it adding aliasing in hypthotetical multi-tile systems, is handy for
    virtual engines which for instance do not have a valid engine->id.
    
    Therefore we keep that but just change it to use the internal class which
    is always valid. We also add a helper to increment the count, which
    aligns with the existing getter.
    
    What was broken without this fix were out of bounds reads every time a
    reset would happen on the GSC0 engine, or during selftests when storing
    and cross-checking the counts in igt_live_test_begin and
    igt_live_test_end.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Fixes: 503579448db9 ("drm/i915/gsc: Mark internal GSC engine with reserved uabi class")
    [tursulin: fixed Fixes tag]
    Reported-by: Alan Previn Teres Alexis <alan.previn.teres.alexis@intel.com>
    Cc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
    Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231201122109.729006-2-tvrtko.ursulin@linux.intel.com
    (cherry picked from commit cf9cb028ac56696ff879af1154c4b2f0b12701fd)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54d08313a34faf7cdfa29cd6da320d1aa58b5235
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Fri Dec 1 12:21:08 2023 +0000

    drm/i915/selftests: Fix engine reset count storage for multi-tile
    
    [ Upstream commit 7c7c863bf89c5f76d8c7fda177a81559b61dc15b ]
    
    Engine->id namespace is per-tile so struct igt_live_test->reset_engine[]
    needs to be two-dimensional so engine reset counts from all tiles can be
    stored with no aliasing. With aliasing, if we had a real multi-tile
    platform, the reset counts would be incorrect for same engine instance on
    different tiles.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Fixes: 0c29efa23f5c ("drm/i915/selftests: Consider multi-gt instead of to_gt()")
    Reported-by: Alan Previn Teres Alexis <alan.previn.teres.alexis@intel.com>
    Cc: Tejas Upadhyay <tejas.upadhyay@intel.com>
    Cc: Andi Shyti <andi.shyti@linux.intel.com>
    Cc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231201122109.729006-1-tvrtko.ursulin@linux.intel.com
    (cherry picked from commit 0647ece3819b018cb62a71c3bcb7c2c3243e78ac)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83a42d791ba206978ec5381743dbcc49f3357e1d
Author: Andrzej Kacprowski <Andrzej.Kacprowski@intel.com>
Date:   Mon Dec 4 13:23:31 2023 +0100

    accel/ivpu/37xx: Fix interrupt_clear_with_0 WA initialization
    
    [ Upstream commit 35c49cfc8b702eda7a0d3f05497b16f81b69e289 ]
    
    Using PCI Device ID/Revision to initialize the interrupt_clear_with_0
    workaround is problematic - there are many pre-production
    steppings with different behavior, even with the same PCI ID/Revision
    
    Instead of checking for PCI Device ID/Revision, check the VPU
    buttress interrupt status register behavior - if this register
    is not zero after writing 1s it means there register is RW
    instead of RW1C and we need to enable the interrupt_clear_with_0
    workaround.
    
    Fixes: 7f34e01f77f8 ("accel/ivpu: Clear specific interrupt status bits on C0")
    Signed-off-by: Andrzej Kacprowski <Andrzej.Kacprowski@intel.com>
    Signed-off-by: Jacek Lawrynowicz <jacek.lawrynowicz@linux.intel.com>
    Reviewed-by: Jeffrey Hugo <quic_jhugo@quicinc.com>
    Link: https://lore.kernel.org/all/20231204122331.40560-1-jacek.lawrynowicz@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0afcc6291024dc8fa32b966a0da27345b82bc6cd
Author: Stanislaw Gruszka <stanislaw.gruszka@linux.intel.com>
Date:   Fri Sep 1 11:49:51 2023 +0200

    accel/ivpu: Print information about used workarounds
    
    [ Upstream commit eefa13a69053a09f20b2d1c00dda59be9c98cfe9 ]
    
    Use ivpu_dbg(MISC) to print information about workarounds.
    
    Reviewed-by: Karol Wachowski <karol.wachowski@linux.intel.com>
    Reviewed-by: Jeffrey Hugo <quic_jhugo@quicinc.com>
    Signed-off-by: Stanislaw Gruszka <stanislaw.gruszka@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230901094957.168898-6-stanislaw.gruszka@linux.intel.com
    Stable-dep-of: 35c49cfc8b70 ("accel/ivpu/37xx: Fix interrupt_clear_with_0 WA initialization")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d6e9cb7b95165b40e7718b017c16b543d93411a
Author: Jason-JH.Lin <jason-jh.lin@mediatek.com>
Date:   Wed Sep 20 17:06:58 2023 +0800

    drm/mediatek: Add spinlock for setting vblank event in atomic_begin
    
    [ Upstream commit fe4c5f662097978b6c91c23a13c24ed92339a180 ]
    
    Add spinlock protection to avoid race condition on vblank event
    between mtk_drm_crtc_atomic_begin() and mtk_drm_finish_page_flip().
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Jason-JH.Lin <jason-jh.lin@mediatek.com>
    Suggested-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: Alexandre Mergnat <amergnat@baylibre.com>
    Reviewed-by: Fei Shao <fshao@chromium.org>
    Tested-by: Fei Shao <fshao@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: CK Hu <ck.hu@mediatek.com>
    Link: https://patchwork.kernel.org/project/dri-devel/patch/20230920090658.31181-1-jason-jh.lin@mediatek.com/
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8964524158ace2f0fcc055e663ab5308cae40175
Author: Michael Walle <mwalle@kernel.org>
Date:   Tue Sep 5 10:49:21 2023 +0200

    drm/mediatek: fix kernel oops if no crtc is found
    
    [ Upstream commit 4662817aed5a9d6c695658d0105d8ff4b84ac6cb ]
    
    drm_crtc_from_index(0) might return NULL if there are no CRTCs
    registered at all which will lead to a kernel oops in
    mtk_drm_crtc_dma_dev_get(). Add the missing return value check.
    
    Fixes: 0d9eee9118b7 ("drm/mediatek: Add drm ovl_adaptor sub driver for MT8195")
    Signed-off-by: Michael Walle <mwalle@kernel.org>
    Reviewed-by: Nícolas F. R. A. Prado <nfraprado@collabora.com>
    Tested-by: Nícolas F. R. A. Prado <nfraprado@collabora.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Tested-by: Eugen Hristev <eugen.hristev@collabora.com>
    Reviewed-by: Eugen Hristev <eugen.hristev@collabora.com>
    Link: https://patchwork.kernel.org/project/dri-devel/patch/20230905084922.3908121-1-mwalle@kernel.org/
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98bd0b4ad5d46fe746c9f99e0f11da7cfec8d8bc
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Nov 28 09:15:08 2023 +0100

    PCI: vmd: Fix potential deadlock when enabling ASPM
    
    commit 49de0dc87965079a8e2803ee4b39f9d946259423 upstream.
    
    The vmd_pm_enable_quirk() helper is called from pci_walk_bus() during
    probe to enable ASPM for controllers with VMD_FEAT_BIOS_PM_QUIRK set.
    
    Since pci_walk_bus() already holds a pci_bus_sem read lock, use
    pci_enable_link_state_locked() to enable link states in order to avoid a
    potential deadlock (e.g. in case someone takes a write lock before
    reacquiring the read lock).
    
    Fixes: f492edb40b54 ("PCI: vmd: Add quirk to configure PCIe ASPM and LTR")
    Link: https://lore.kernel.org/r/20231128081512.19387-3-johan+linaro@kernel.org
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    [bhelgaas: add "potential" in subject since the deadlock has only been
    reported by lockdep, include helper name in commit log]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Cc: <stable@vger.kernel.org>    # 6.3
    Cc: Michael Bottini <michael.a.bottini@linux.intel.com>
    Cc: David E. Box <david.e.box@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f94c44342f0a5612be4710c0d3122198244ffa59
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Wed Dec 6 08:23:49 2023 +0900

    ksmbd: fix wrong name of SMB2_CREATE_ALLOCATION_SIZE
    
    commit 13736654481198e519059d4a2e2e3b20fa9fdb3e upstream.
    
    MS confirm that "AISi" name of SMB2_CREATE_ALLOCATION_SIZE in MS-SMB2
    specification is a typo. cifs/ksmbd have been using this wrong name from
    MS-SMB2. It should be "AlSi". Also It will cause problem when running
    smb2.create.open test in smbtorture against ksmbd.
    
    Cc: stable@vger.kernel.org
    Fixes: 12197a7fdda9 ("Clarify SMB2/SMB3 create context and add missing ones")
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e1f461ea574b1a9aba7ffcc15d8721c087c5cda
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Nov 28 09:15:07 2023 +0100

    PCI/ASPM: Add pci_enable_link_state_locked()
    
    commit 718ab8226636a1a3a7d281f5d6a7ad7c925efe5a upstream.
    
    Add pci_enable_link_state_locked() for enabling link states that can be
    used in contexts where a pci_bus_sem read lock is already held (e.g. from
    pci_walk_bus()).
    
    This helper will be used to fix a couple of potential deadlocks where
    the current helper is called with the lock already held, hence the CC
    stable tag.
    
    Fixes: f492edb40b54 ("PCI: vmd: Add quirk to configure PCIe ASPM and LTR")
    Link: https://lore.kernel.org/r/20231128081512.19387-2-johan+linaro@kernel.org
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    [bhelgaas: include helper name in subject, commit log]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Cc: <stable@vger.kernel.org>    # 6.3
    Cc: Michael Bottini <michael.a.bottini@linux.intel.com>
    Cc: David E. Box <david.e.box@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fb5358c574e1b49a55e090dbe26cd4ddaa6c639
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Fri Dec 1 11:50:28 2023 +0000

    PCI: loongson: Limit MRRS to 256
    
    commit ef61a0405742a9f7f6051bc6fd2f017d87d07911 upstream.
    
    This is a partial revert of 8b3517f88ff2 ("PCI: loongson: Prevent LS7A MRRS
    increases") for MIPS-based Loongson.
    
    Some MIPS Loongson systems don't support arbitrary Max_Read_Request_Size
    (MRRS) settings.  8b3517f88ff2 ("PCI: loongson: Prevent LS7A MRRS
    increases") worked around that by (1) assuming that firmware configured
    MRRS to the maximum supported value and (2) preventing the PCI core from
    increasing MRRS.
    
    Unfortunately, some firmware doesn't set that maximum MRRS correctly, which
    results in devices not being initialized correctly.  One symptom, from the
    Debian report below, is this:
    
      ata4.00: exception Emask 0x0 SAct 0x20000000 SErr 0x0 action 0x6 frozen
      ata4.00: failed command: WRITE FPDMA QUEUED
      ata4.00: cmd 61/20:e8:00:f0:e1/00:00:00:00:00/40 tag 29 ncq dma 16384 out
               res 40/00:00:00:00:00/00:00:00:00:00/00 Emask 0x4 (timeout)
      ata4.00: status: { DRDY }
      ata4: hard resetting link
    
    Limit MRRS to 256 because MIPS Loongson with higher MRRS support is
    considered rare.
    
    This must be done at device enablement stage because the MRRS setting may
    get lost if PCI_COMMAND_MASTER on the parent bridge is cleared, and we are
    only sure parent bridge is enabled at this point.
    
    Fixes: 8b3517f88ff2 ("PCI: loongson: Prevent LS7A MRRS increases")
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217680
    Link: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1035587
    Link: https://lore.kernel.org/r/20231201115028.84351-1-jiaxun.yang@flygoat.com
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Huacai Chen <chenhuacai@loongson.cn>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cc8d88a1b94b900fd74abda744c29ff5845430b
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Thu Dec 14 09:08:56 2023 -0600

    Revert "PCI: acpiphp: Reassign resources on bridge if necessary"
    
    commit 5df12742b7e3aae2594a30a9d14d5d6e9e7699f4 upstream.
    
    This reverts commit 40613da52b13fb21c5566f10b287e0ca8c12c4e9 and the
    subsequent fix to it:
    
      cc22522fd55e ("PCI: acpiphp: Use pci_assign_unassigned_bridge_resources() only for non-root bus")
    
    40613da52b13 fixed a problem where hot-adding a device with large BARs
    failed if the bridge windows programmed by firmware were not large enough.
    
    cc22522fd55e ("PCI: acpiphp: Use pci_assign_unassigned_bridge_resources()
    only for non-root bus") fixed a problem with 40613da52b13: an ACPI hot-add
    of a device on a PCI root bus (common in the virt world) or firmware
    sending ACPI Bus Check to non-existent Root Ports (e.g., on Dell Inspiron
    7352/0W6WV0) caused a NULL pointer dereference and suspend/resume hangs.
    
    Unfortunately the combination of 40613da52b13 and cc22522fd55e caused other
    problems:
    
      - Fiona reported that hot-add of SCSI disks in QEMU virtual machine fails
        sometimes.
    
      - Dongli reported a similar problem with hot-add of SCSI disks.
    
      - Jonathan reported a console freeze during boot on bare metal due to an
        error in radeon GPU initialization.
    
    Revert both patches to avoid adding these problems.  This means we will
    again see the problems with hot-adding devices with large BARs and the NULL
    pointer dereferences and suspend/resume issues that 40613da52b13 and
    cc22522fd55e were intended to fix.
    
    Fixes: 40613da52b13 ("PCI: acpiphp: Reassign resources on bridge if necessary")
    Fixes: cc22522fd55e ("PCI: acpiphp: Use pci_assign_unassigned_bridge_resources() only for non-root bus")
    Reported-by: Fiona Ebner <f.ebner@proxmox.com>
    Closes: https://lore.kernel.org/r/9eb669c0-d8f2-431d-a700-6da13053ae54@proxmox.com
    Reported-by: Dongli Zhang <dongli.zhang@oracle.com>
    Closes: https://lore.kernel.org/r/3c4a446a-b167-11b8-f36f-d3c1b49b42e9@oracle.com
    Reported-by: Jonathan Woithe <jwoithe@just42.net>
    Closes: https://lore.kernel.org/r/ZXpaNCLiDM+Kv38H@marvin.atrad.com.au
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Igor Mammedov <imammedo@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56e22123449cf0be89db7bbf7c4667eb9c6bb953
Author: Gergo Koteles <soyer@irl.hu>
Date:   Thu Dec 14 00:49:20 2023 +0100

    ALSA: hda/tas2781: reset the amp before component_add
    
    commit 315deab289924c83ab1ded50022e8db95d6e428b upstream.
    
    Calling component_add starts loading the firmware, the callback function
    writes the program to the amplifiers. If the module resets the
    amplifiers after component_add, it happens that one of the amplifiers
    does not work because the reset and program writing are interleaving.
    
    Call tas2781_reset before component_add to ensure reliable
    initialization.
    
    Fixes: 5be27f1e3ec9 ("ALSA: hda/tas2781: Add tas2781 HDA driver")
    CC: stable@vger.kernel.org
    Signed-off-by: Gergo Koteles <soyer@irl.hu>
    Link: https://lore.kernel.org/r/4d23bf58558e23ee8097de01f70f1eb8d9de2d15.1702511246.git.soyer@irl.hu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d94fad04a64b2a58157940ec7ab59d4ccd400a1c
Author: Gergo Koteles <soyer@irl.hu>
Date:   Thu Dec 14 00:28:16 2023 +0100

    ALSA: hda/tas2781: call cleanup functions only once
    
    commit 6c6fa2641402e8e753262fb61ed9a15a7cb225ad upstream.
    
    If the module can load the RCA but not the firmware binary, it will call
    the cleanup functions. Then unloading the module causes general
    protection fault due to double free.
    
    Do not call the cleanup functions in tasdev_fw_ready.
    
    general protection fault, probably for non-canonical address
    0x6f2b8a2bff4c8fec: 0000 [#1] PREEMPT SMP NOPTI
    Call Trace:
     <TASK>
     ? die_addr+0x36/0x90
     ? exc_general_protection+0x1c5/0x430
     ? asm_exc_general_protection+0x26/0x30
     ? tasdevice_config_info_remove+0x6d/0xd0 [snd_soc_tas2781_fmwlib]
     tas2781_hda_unbind+0xaa/0x100 [snd_hda_scodec_tas2781_i2c]
     component_unbind+0x2e/0x50
     component_unbind_all+0x92/0xa0
     component_del+0xa8/0x140
     tas2781_hda_remove.isra.0+0x32/0x60 [snd_hda_scodec_tas2781_i2c]
     i2c_device_remove+0x26/0xb0
    
    Fixes: 5be27f1e3ec9 ("ALSA: hda/tas2781: Add tas2781 HDA driver")
    CC: stable@vger.kernel.org
    Signed-off-by: Gergo Koteles <soyer@irl.hu>
    Link: https://lore.kernel.org/r/1a0885c424bb21172702d254655882b59ef6477a.1702510018.git.soyer@irl.hu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 795e91c599c29ab9b6b6cd57548b497d0d78e0d6
Author: Gergo Koteles <soyer@irl.hu>
Date:   Mon Dec 11 00:37:33 2023 +0100

    ALSA: hda/tas2781: handle missing EFI calibration data
    
    commit 33071422714a4c9587753b0ccc130ca59323bf42 upstream.
    
    The code does not properly check whether the calibration variable is
    available in the EFI. If it is not available, it causes a NULL pointer
    dereference.
    
    Check the return value of the first get_variable call also.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    Call Trace:
     <TASK>
     ? __die+0x23/0x70
     ? page_fault_oops+0x171/0x4e0
     ? srso_alias_return_thunk+0x5/0x7f
     ? schedule+0x5e/0xd0
     ? exc_page_fault+0x7f/0x180
     ? asm_exc_page_fault+0x26/0x30
     ? crc32_body+0x2c/0x120
     ? tas2781_save_calibration+0xe4/0x220 [snd_hda_scodec_tas2781_i2c]
     tasdev_fw_ready+0x1af/0x280 [snd_hda_scodec_tas2781_i2c]
     request_firmware_work_func+0x59/0xa0
    
    Fixes: 5be27f1e3ec9 ("ALSA: hda/tas2781: Add tas2781 HDA driver")
    CC: stable@vger.kernel.org
    Signed-off-by: Gergo Koteles <soyer@irl.hu>
    Link: https://lore.kernel.org/r/f1f6583bda918f78556f67d522ca7b3b91cebbd5.1702251102.git.soyer@irl.hu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fc8bfdb7007ccd013eb786c76f6619da56a98f2
Author: Gergo Koteles <soyer@irl.hu>
Date:   Sat Dec 9 22:18:29 2023 +0100

    ALSA: hda/tas2781: leave hda_component in usable state
    
    commit 75a25d31b80770485641ad2789a854955f5c1e40 upstream.
    
    Unloading then loading the module causes a NULL ponter dereference.
    
    The hda_unbind zeroes the hda_component, later the hda_bind tries
    to dereference the codec field.
    
    The hda_component is only initialized once by tas2781_generic_fixup.
    
    Set only previously modified fields to NULL.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000322
    Call Trace:
     <TASK>
     ? __die+0x23/0x70
     ? page_fault_oops+0x171/0x4e0
     ? exc_page_fault+0x7f/0x180
     ? asm_exc_page_fault+0x26/0x30
     ? tas2781_hda_bind+0x59/0x140 [snd_hda_scodec_tas2781_i2c]
     component_bind_all+0xf3/0x240
     try_to_bring_up_aggregate_device+0x1c3/0x270
     __component_add+0xbc/0x1a0
     tas2781_hda_i2c_probe+0x289/0x3a0 [snd_hda_scodec_tas2781_i2c]
     i2c_device_probe+0x136/0x2e0
    
    Fixes: 5be27f1e3ec9 ("ALSA: hda/tas2781: Add tas2781 HDA driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gergo Koteles <soyer@irl.hu>
    Link: https://lore.kernel.org/r/8b8ed2bd5f75fbb32e354a3226c2f966fa85b46b.1702156522.git.soyer@irl.hu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffd1fe12d4c95c5644152fcbc85696a4195190ae
Author: Hartmut Knaack <knaack.h@gmx.de>
Date:   Sat Dec 9 15:47:07 2023 +0100

    ALSA: hda/realtek: Apply mute LED quirk for HP15-db
    
    commit 9b726bf6ae11add6a7a52883a21f90ff9cbca916 upstream.
    
    The HP laptop 15-db0403ng uses the ALC236 codec and controls the mute
    LED using COEF 0x07 index 1.
    Sound card subsystem: Hewlett-Packard Company Device [103c:84ae]
    
    Use the existing quirk for this model.
    
    Signed-off-by: Hartmut Knaack <knaack.h@gmx.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/e61815d0-f1c7-b164-e49d-6ca84771476a@gmx.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ec57c10b01832d699bb61d4049e57031592625d
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Fri Dec 8 15:21:27 2023 +0200

    ALSA: hda/hdmi: add force-connect quirks for ASUSTeK Z170 variants
    
    commit 924f5ca2975b2993ee81a7ecc3c809943a70f334 upstream.
    
    On ASUSTeK Z170M PLUS and Z170 PRO GAMING systems, the display codec
    pins are not registered properly without the force-connect quirk. The
    codec will report only one pin as having external connectivity, but i915
    finds all three connectors on the system, so the two drivers are not
    in sync.
    
    Issue found with DRM igt-gpu-tools test kms_hdmi_inject@inject-audio.
    
    Link: https://gitlab.freedesktop.org/drm/intel/-/issues/9801
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Jani Saarinen <jani.saarinen@intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231208132127.2438067-3-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c52ebaf742734113b41b4b6bf8bd9a86e34e4445
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Fri Dec 8 15:21:26 2023 +0200

    ALSA: hda/hdmi: add force-connect quirk for NUC5CPYB
    
    commit 3b1ff57e24a7bcd2e2a8426dd2013a80d1fa96eb upstream.
    
    Add one more older NUC model that requires quirk to force all pins to be
    connected. The display codec pins are not registered properly without
    the force-connect quirk. The codec will report only one pin as having
    external connectivity, but i915 finds all three connectors on the
    system, so the two drivers are not in sync.
    
    Issue found with DRM igt-gpu-tools test kms_hdmi_inject@inject-audio.
    
    Link: https://gitlab.freedesktop.org/drm/igt-gpu-tools/-/issues/3
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Jani Saarinen <jani.saarinen@intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231208132127.2438067-2-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9566ef570cc4c9a69af493fdba5f8b4ea101426f
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Dec 14 21:34:08 2023 +0000

    io_uring/cmd: fix breakage in SOCKET_URING_OP_SIOC* implementation
    
    commit 1ba0e9d69b2000e95267c888cbfa91d823388d47 upstream.
    
            In 8e9fad0e70b7 "io_uring: Add io_uring command support for sockets"
    you've got an include of asm-generic/ioctls.h done in io_uring/uring_cmd.c.
    That had been done for the sake of this chunk -
    +               ret = prot->ioctl(sk, SIOCINQ, &arg);
    +               if (ret)
    +                       return ret;
    +               return arg;
    +       case SOCKET_URING_OP_SIOCOUTQ:
    +               ret = prot->ioctl(sk, SIOCOUTQ, &arg);
    
    SIOC{IN,OUT}Q are defined to symbols (FIONREAD and TIOCOUTQ) that come from
    ioctls.h, all right, but the values vary by the architecture.
    
    FIONREAD is
            0x467F on mips
            0x4004667F on alpha, powerpc and sparc
            0x8004667F on sh and xtensa
            0x541B everywhere else
    TIOCOUTQ is
            0x7472 on mips
            0x40047473 on alpha, powerpc and sparc
            0x80047473 on sh and xtensa
            0x5411 everywhere else
    
    ->ioctl() expects the same values it would've gotten from userland; all
    places where we compare with SIOC{IN,OUT}Q are using asm/ioctls.h, so
    they pick the correct values.  io_uring_cmd_sock(), OTOH, ends up
    passing the default ones.
    
    Fixes: 8e9fad0e70b7 ("io_uring: Add io_uring command support for sockets")
    Cc:  <stable@vger.kernel.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Link: https://lore.kernel.org/r/20231214213408.GT1674809@ZenIV
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce5a6df21a00a02c155f2cf269f0e258aa522346
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Thu Nov 16 15:57:26 2023 +0800

    fuse: dax: set fc->dax to NULL in fuse_dax_conn_free()
    
    commit 7f8ed28d1401320bcb02dda81b3c23ab2dc5a6d8 upstream.
    
    fuse_dax_conn_free() will be called when fuse_fill_super_common() fails
    after fuse_dax_conn_alloc(). Then deactivate_locked_super() in
    virtio_fs_get_tree() will call virtio_kill_sb() to release the discarded
    superblock. This will call fuse_dax_conn_free() again in fuse_conn_put(),
    resulting in a possible double free.
    
    Fixes: 1dd539577c42 ("virtiofs: add a mount option to enable dax")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Acked-by: Vivek Goyal <vgoyal@redhat.com>
    Reviewed-by: Jingbo Xu <jefflexu@linux.alibaba.com>
    Cc: <stable@vger.kernel.org> # v5.10
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbcddc7410625f90a3c1352c503d286bb23c1a60
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Sun Dec 3 09:42:33 2023 +0200

    fuse: disable FOPEN_PARALLEL_DIRECT_WRITES with FUSE_DIRECT_IO_ALLOW_MMAP
    
    commit 3f29f1c336c0e8a4bec52f1e5217f88835553e5b upstream.
    
    The new fuse init flag FUSE_DIRECT_IO_ALLOW_MMAP breaks assumptions made by
    FOPEN_PARALLEL_DIRECT_WRITES and causes test generic/095 to hit
    BUG_ON(fi->writectr < 0) assertions in fuse_set_nowrite():
    
    generic/095 5s ...
      kernel BUG at fs/fuse/dir.c:1756!
    ...
      ? fuse_set_nowrite+0x3d/0xdd
      ? do_raw_spin_unlock+0x88/0x8f
      ? _raw_spin_unlock+0x2d/0x43
      ? fuse_range_is_writeback+0x71/0x84
      fuse_sync_writes+0xf/0x19
      fuse_direct_io+0x167/0x5bd
      fuse_direct_write_iter+0xf0/0x146
    
    Auto disable FOPEN_PARALLEL_DIRECT_WRITES when server negotiated
    FUSE_DIRECT_IO_ALLOW_MMAP.
    
    Fixes: e78662e818f9 ("fuse: add a new fuse init flag to relax restrictions in no cache mode")
    Cc: <stable@vger.kernel.org> # v6.6
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2939dd306b1f00faf71472f2b16dead077f74c36
Author: Krister Johansen <kjlx@templeofstupid.com>
Date:   Fri Nov 3 10:39:47 2023 -0700

    fuse: share lookup state between submount and its parent
    
    commit c4d361f66ac91db8fc65061a9671682f61f4ca9d upstream.
    
    Fuse submounts do not perform a lookup for the nodeid that they inherit
    from their parent.  Instead, the code decrements the nlookup on the
    submount's fuse_inode when it is instantiated, and no forget is
    performed when a submount root is evicted.
    
    Trouble arises when the submount's parent is evicted despite the
    submount itself being in use.  In this author's case, the submount was
    in a container and deatched from the initial mount namespace via a
    MNT_DEATCH operation.  When memory pressure triggered the shrinker, the
    inode from the parent was evicted, which triggered enough forgets to
    render the submount's nodeid invalid.
    
    Since submounts should still function, even if their parent goes away,
    solve this problem by sharing refcounted state between the parent and
    its submount.  When all of the references on this shared state reach
    zero, it's safe to forget the final lookup of the fuse nodeid.
    
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Cc: stable@vger.kernel.org
    Fixes: 1866d779d5d2 ("fuse: Allow fuse_fill_super_common() for submounts")
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f36c1c5132f3a03f420e88924b8829b508c59b8
Author: Tyler Fanelli <tfanelli@redhat.com>
Date:   Tue Sep 19 22:40:00 2023 -0400

    fuse: Rename DIRECT_IO_RELAX to DIRECT_IO_ALLOW_MMAP
    
    commit c55e0a55b165202f18cbc4a20650d2e1becd5507 upstream.
    
    Although DIRECT_IO_RELAX's initial usage is to allow shared mmap, its
    description indicates a purpose of reducing memory footprint. This
    may imply that it could be further used to relax other DIRECT_IO
    operations in the future.
    
    Replace it with a flag DIRECT_IO_ALLOW_MMAP which does only one thing,
    allow shared mmap of DIRECT_IO files while still bypassing the cache
    on regular reads and writes.
    
    [Miklos] Also Keep DIRECT_IO_RELAX definition for backward compatibility.
    
    Signed-off-by: Tyler Fanelli <tfanelli@redhat.com>
    Fixes: e78662e818f9 ("fuse: add a new fuse init flag to relax restrictions in no cache mode")
    Cc: <stable@vger.kernel.org> # v6.6
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e5782b1e18b9dfe01fe220f14d5d4f25292a40e
Author: Sebastian Parschauer <s.parschauer@gmx.de>
Date:   Mon Nov 27 23:49:37 2023 +0100

    HID: Add quirk for Labtec/ODDOR/aikeec handbrake
    
    commit 31e52523267faab5ed8569b9d5c22c9a2283872f upstream.
    
    This device needs ALWAYS_POLL quirk, otherwise it keeps reconnecting
    indefinitely. It is a handbrake for sim racing detected as joystick.
    Reported and tested by GitHub user N0th1ngM4tt3rs.
    
    Link: https://github.com/sriemer/fix-linux-mouse issue 22
    Signed-off-by: Sebastian Parschauer <s.parschauer@gmx.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fea8562f51b001de81a8115e34d138386b525afb
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Sat Dec 2 21:24:30 2023 -0600

    HID: i2c-hid: Add IDEA5002 to i2c_hid_acpi_blacklist[]
    
    commit a9f68ffe1170ca4bc17ab29067d806a354a026e0 upstream.
    
    Users have reported problems with recent Lenovo laptops that contain
    an IDEA5002 I2C HID device. Reports include fans turning on and
    running even at idle and spurious wakeups from suspend.
    
    Presumably in the Windows ecosystem there is an application that
    uses the HID device. Maybe that puts it into a lower power state so
    it doesn't cause spurious events.
    
    This device doesn't serve any functional purpose in Linux as nothing
    interacts with it so blacklist it from being probed. This will
    prevent the GPIO driver from setting up the GPIO and the spurious
    interrupts and wake events will not occur.
    
    Cc: stable@vger.kernel.org # 6.1
    Reported-and-tested-by: Marcus Aram <marcus+oss@oxar.nl>
    Reported-and-tested-by: Mark Herbert <mark.herbert42@gmail.com>
    Closes: https://gitlab.freedesktop.org/drm/amd/-/issues/2812
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 207f135d819344c03333246f784f6666e652e081
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Dec 15 13:40:57 2023 -0700

    cred: get rid of CONFIG_DEBUG_CREDENTIALS
    
    commit ae1914174a63a558113e80d24ccac2773f9f7b2b upstream.
    
    This code is rarely (never?) enabled by distros, and it hasn't caught
    anything in decades. Let's kill off this legacy debug code.
    
    Suggested-by: Linus Torvalds <torvalds@linuxfoundation.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6a7ce5ae416925954a23be83dee621dc8a4b98a
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Dec 15 13:24:10 2023 -0700

    cred: switch to using atomic_long_t
    
    commit f8fa5d76925991976b3e7076f9d1052515ec1fca upstream.
    
    There are multiple ways to grab references to credentials, and the only
    protection we have against overflowing it is the memory required to do
    so.
    
    With memory sizes only moving in one direction, let's bump the reference
    count to 64-bit and move it outside the realm of feasibly overflowing.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b5daf20c426b04d9278c0d3d6e3c7e0d6f5c852
Author: Igor Russkikh <irusskikh@marvell.com>
Date:   Wed Dec 13 10:40:44 2023 +0100

    net: atlantic: fix double free in ring reinit logic
    
    [ Upstream commit 7bb26ea74aa86fdf894b7dbd8c5712c5b4187da7 ]
    
    Driver has a logic leak in ring data allocation/free,
    where double free may happen in aq_ring_free if system is under
    stress and driver init/deinit is happening.
    
    The probability is higher to get this during suspend/resume cycle.
    
    Verification was done simulating same conditions with
    
        stress -m 2000 --vm-bytes 20M --vm-hang 10 --backoff 1000
        while true; do sudo ifconfig enp1s0 down; sudo ifconfig enp1s0 up; done
    
    Fixed by explicitly clearing pointers to NULL on deallocation
    
    Fixes: 018423e90bee ("net: ethernet: aquantia: Add ring support code")
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Closes: https://lore.kernel.org/netdev/CAHk-=wiZZi7FcvqVSUirHBjx0bBUZ4dFrMDVLc3+3HCrtq0rBA@mail.gmail.com/
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Link: https://lore.kernel.org/r/20231213094044.22988-1-irusskikh@marvell.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e15ded324a3911358e8541a1b573665f99f216ef
Author: Hyunwoo Kim <v4bel@theori.io>
Date:   Tue Dec 12 23:10:56 2023 -0500

    appletalk: Fix Use-After-Free in atalk_ioctl
    
    [ Upstream commit 189ff16722ee36ced4d2a2469d4ab65a8fee4198 ]
    
    Because atalk_ioctl() accesses sk->sk_receive_queue
    without holding a sk->sk_receive_queue.lock, it can
    cause a race with atalk_recvmsg().
    A use-after-free for skb occurs with the following flow.
    ```
    atalk_ioctl() -> skb_peek()
    atalk_recvmsg() -> skb_recv_datagram() -> skb_free_datagram()
    ```
    Add sk->sk_receive_queue.lock to atalk_ioctl() to fix this issue.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Hyunwoo Kim <v4bel@theori.io>
    Link: https://lore.kernel.org/r/20231213041056.GA519680@v4bel-B760M-AORUS-ELITE-AX
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58c556661641c5ecbfc064067a31729d8d2c193d
Author: Andrew Halaney <ahalaney@redhat.com>
Date:   Tue Dec 12 16:18:33 2023 -0600

    net: stmmac: Handle disabled MDIO busses from devicetree
    
    [ Upstream commit e23c0d21ce9234fbc31ece35663ababbb83f9347 ]
    
    Many hardware configurations have the MDIO bus disabled, and are instead
    using some other MDIO bus to talk to the MAC's phy.
    
    of_mdiobus_register() returns -ENODEV in this case. Let's handle it
    gracefully instead of failing to probe the MAC.
    
    Fixes: 47dd7a540b8a ("net: add support for STMicroelectronics Ethernet controllers.")
    Signed-off-by: Andrew Halaney <ahalaney@redhat.com>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Link: https://lore.kernel.org/r/20231212-b4-stmmac-handle-mdio-enodev-v2-1-600171acf79f@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad531dfcc648eb24d512a4acfeec76000eabaf42
Author: Sneh Shah <quic_snehshah@quicinc.com>
Date:   Tue Dec 12 14:52:08 2023 +0530

    net: stmmac: dwmac-qcom-ethqos: Fix drops in 10M SGMII RX
    
    [ Upstream commit 981d947bcd382c3950a593690e0e13d194d65b1c ]
    
    In 10M SGMII mode all the packets are being dropped due to wrong Rx clock.
    SGMII 10MBPS mode needs RX clock divider programmed to avoid drops in Rx.
    Update configure SGMII function with Rx clk divider programming.
    
    Fixes: 463120c31c58 ("net: stmmac: dwmac-qcom-ethqos: add support for SGMII")
    Tested-by: Andrew Halaney <ahalaney@redhat.com>
    Signed-off-by: Sneh Shah <quic_snehshah@quicinc.com>
    Reviewed-by: Bjorn Andersson <quic_bjorande@quicinc.com>
    Link: https://lore.kernel.org/r/20231212092208.22393-1-quic_snehshah@quicinc.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da8732cb38eac4461d7cbbfe51f6b43db18965c7
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Tue Dec 12 18:43:26 2023 +0200

    dpaa2-switch: do not ask for MDB, VLAN and FDB replay
    
    [ Upstream commit f24a49a375f65e8e75ee1b19d806f46dbaae57fd ]
    
    Starting with commit 4e51bf44a03a ("net: bridge: move the switchdev
    object replay helpers to "push" mode") the switchdev_bridge_port_offload()
    helper was extended with the intention to provide switchdev drivers easy
    access to object addition and deletion replays. This works by calling
    the replay helpers with non-NULL notifier blocks.
    
    In the same commit, the dpaa2-switch driver was updated so that it
    passes valid notifier blocks to the helper. At that moment, no
    regression was identified through testing.
    
    In the meantime, the blamed commit changed the behavior in terms of
    which ports get hit by the replay. Before this commit, only the initial
    port which identified itself as offloaded through
    switchdev_bridge_port_offload() got a replay of all port objects and
    FDBs. After this, the newly joining port will trigger a replay of
    objects on all bridge ports and on the bridge itself.
    
    This behavior leads to errors in dpaa2_switch_port_vlans_add() when a
    VLAN gets installed on the same interface multiple times.
    
    The intended mechanism to address this is to pass a non-NULL ctx to the
    switchdev_bridge_port_offload() helper and then check it against the
    port's private structure. But since the driver does not have any use for
    the replayed port objects and FDBs until it gains support for LAG
    offload, it's better to fix the issue by reverting the dpaa2-switch
    driver to not ask for replay. The pointers will be added back when we
    are prepared to ignore replays on unrelated ports.
    
    Fixes: b28d580e2939 ("net: bridge: switchdev: replay all VLAN groups")
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Link: https://lore.kernel.org/r/20231212164326.2753457-3-ioana.ciornei@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77e566c8813024d9e75ce6b8e9618d94eb9f05fa
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Tue Dec 12 18:43:25 2023 +0200

    dpaa2-switch: fix size of the dma_unmap
    
    [ Upstream commit 2aad7d4189a923b24efa8ea6ad09059882b1bfe4 ]
    
    The size of the DMA unmap was wrongly put as a sizeof of a pointer.
    Change the value of the DMA unmap to be the actual macro used for the
    allocation and the DMA map.
    
    Fixes: 1110318d83e8 ("dpaa2-switch: add tc flower hardware offload on ingress traffic")
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Link: https://lore.kernel.org/r/20231212164326.2753457-2-ioana.ciornei@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa634779ffcc6938882bb6ac28308973c4975eab
Author: Nikolay Kuratov <kniv@yandex-team.ru>
Date:   Mon Dec 11 19:23:17 2023 +0300

    vsock/virtio: Fix unsigned integer wrap around in virtio_transport_has_space()
    
    [ Upstream commit 60316d7f10b17a7ebb1ead0642fee8710e1560e0 ]
    
    We need to do signed arithmetic if we expect condition
    `if (bytes < 0)` to be possible
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE
    
    Fixes: 06a8fc78367d ("VSOCK: Introduce virtio_vsock_common.ko")
    Signed-off-by: Nikolay Kuratov <kniv@yandex-team.ru>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20231211162317.4116625-1-kniv@yandex-team.ru
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f18ac4bae15ea7821716c8d46707bdeaa594b64e
Author: Yusong Gao <a869920004@gmail.com>
Date:   Wed Dec 13 10:31:10 2023 +0000

    sign-file: Fix incorrect return values check
    
    [ Upstream commit 829649443e78d85db0cff0c37cadb28fbb1a5f6f ]
    
    There are some wrong return values check in sign-file when call OpenSSL
    API. The ERR() check cond is wrong because of the program only check the
    return value is < 0 which ignored the return val is 0. For example:
    1. CMS_final() return 1 for success or 0 for failure.
    2. i2d_CMS_bio_stream() returns 1 for success or 0 for failure.
    3. i2d_TYPEbio() return 1 for success and 0 for failure.
    4. BIO_free() return 1 for success and 0 for failure.
    
    Link: https://www.openssl.org/docs/manmaster/man3/
    Fixes: e5a2e3c84782 ("scripts/sign-file.c: Add support for signing with a raw signature")
    Signed-off-by: Yusong Gao <a869920004@gmail.com>
    Reviewed-by: Juerg Haefliger <juerg.haefliger@canonical.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Link: https://lore.kernel.org/r/20231213024405.624692-1-a869920004@gmail.com/ # v5
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0069c26c552c5c7f1009918eedac31a1eaa141b
Author: Yanteng Si <siyanteng@loongson.cn>
Date:   Mon Dec 11 18:33:11 2023 +0800

    stmmac: dwmac-loongson: Make sure MDIO is initialized before use
    
    [ Upstream commit e87d3a1370ce9f04770d789bcf7cce44865d2e8d ]
    
    Generic code will use mdio. If it is not initialized before use,
    the kernel will Oops.
    
    Fixes: 30bba69d7db4 ("stmmac: pci: Add dwmac support for Loongson")
    Signed-off-by: Yanteng Si <siyanteng@loongson.cn>
    Signed-off-by: Feiyang Chen <chenfeiyang@loongson.cn>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cc8ffc3ad31b5618ad6b34450274d3a9817ce1f
Author: David Arinzon <darinzon@amazon.com>
Date:   Mon Dec 11 06:28:01 2023 +0000

    net: ena: Fix XDP redirection error
    
    [ Upstream commit 4ab138ca0a340e6d6e7a6a9bd5004bd8f83127ca ]
    
    When sending TX packets, the meta descriptor can be all zeroes
    as no meta information is required (as in XDP).
    
    This patch removes the validity check, as when
    `disable_meta_caching` is enabled, such TX packets will be
    dropped otherwise.
    
    Fixes: 0e3a3f6dacf0 ("net: ena: support new LLQ acceleration mode")
    Signed-off-by: Shay Agroskin <shayagr@amazon.com>
    Signed-off-by: David Arinzon <darinzon@amazon.com>
    Link: https://lore.kernel.org/r/20231211062801.27891-5-darinzon@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0116e02cee5a1a6d304f64faa22eea8cccb4ca9f
Author: David Arinzon <darinzon@amazon.com>
Date:   Mon Dec 11 06:28:00 2023 +0000

    net: ena: Fix DMA syncing in XDP path when SWIOTLB is on
    
    [ Upstream commit d760117060cf2e90b5c59c5492cab179a4dbce01 ]
    
    This patch fixes two issues:
    
    Issue 1
    -------
    Description
    ```````````
    Current code does not call dma_sync_single_for_cpu() to sync data from
    the device side memory to the CPU side memory before the XDP code path
    uses the CPU side data.
    This causes the XDP code path to read the unset garbage data in the CPU
    side memory, resulting in incorrect handling of the packet by XDP.
    
    Solution
    ````````
    1. Add a call to dma_sync_single_for_cpu() before the XDP code starts to
       use the data in the CPU side memory.
    2. The XDP code verdict can be XDP_PASS, in which case there is a
       fallback to the non-XDP code, which also calls
       dma_sync_single_for_cpu().
       To avoid calling dma_sync_single_for_cpu() twice:
    2.1. Put the dma_sync_single_for_cpu() in the code in such a place where
         it happens before XDP and non-XDP code.
    2.2. Remove the calls to dma_sync_single_for_cpu() in the non-XDP code
         for the first buffer only (rx_copybreak and non-rx_copybreak
         cases), since the new call that was added covers these cases.
         The call to dma_sync_single_for_cpu() for the second buffer and on
         stays because only the first buffer is handled by the newly added
         dma_sync_single_for_cpu(). And there is no need for special
         handling of the second buffer and on for the XDP path since
         currently the driver supports only single buffer packets.
    
    Issue 2
    -------
    Description
    ```````````
    In case the XDP code forwarded the packet (ENA_XDP_FORWARDED),
    ena_unmap_rx_buff_attrs() is called with attrs set to 0.
    This means that before unmapping the buffer, the internal function
    dma_unmap_page_attrs() will also call dma_sync_single_for_cpu() on
    the whole buffer (not only on the data part of it).
    This sync is both wasteful (since a sync was already explicitly
    called before) and also causes a bug, which will be explained
    using the below diagram.
    
    The following diagram shows the flow of events causing the bug.
    The order of events is (1)-(4) as shown in the diagram.
    
    CPU side memory area
    
         (3)convert_to_xdp_frame() initializes the
            headroom with xdpf metadata
                          ||
                          \/
              ___________________________________
             |                                   |
     0       |                                   V                       4K
     ---------------------------------------------------------------------
     | xdpf->data      | other xdpf       |   < data >   | tailroom ||...|
     |                 | fields           |              | GARBAGE  ||   |
     ---------------------------------------------------------------------
    
                       /\                        /\
                       ||                        ||
       (4)ena_unmap_rx_buff_attrs() calls     (2)dma_sync_single_for_cpu()
          dma_sync_single_for_cpu() on the       copies data from device
          whole buffer page, overwriting         side to CPU side memory
          the xdpf->data with GARBAGE.           ||
     0                                                                   4K
     ---------------------------------------------------------------------
     | headroom                           |   < data >   | tailroom ||...|
     | GARBAGE                            |              | GARBAGE  ||   |
     ---------------------------------------------------------------------
    
    Device side memory area                      /\
                                                 ||
                                   (1) device writes RX packet data
    
    After the call to ena_unmap_rx_buff_attrs() in (4), the xdpf->data
    becomes corrupted, and so when it is later accessed in
    ena_clean_xdp_irq()->xdp_return_frame(), it causes a page fault,
    crashing the kernel.
    
    Solution
    ````````
    Explicitly tell ena_unmap_rx_buff_attrs() not to call
    dma_sync_single_for_cpu() by passing it the ENA_DMA_ATTR_SKIP_CPU_SYNC
    flag.
    
    Fixes: f7d625adeb7b ("net: ena: Add dynamic recycling mechanism for rx buffers")
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David Arinzon <darinzon@amazon.com>
    Link: https://lore.kernel.org/r/20231211062801.27891-4-darinzon@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cb2021b968e701582c984382b9a9efa55c36466
Author: David Arinzon <darinzon@amazon.com>
Date:   Mon Dec 11 06:27:59 2023 +0000

    net: ena: Fix xdp drops handling due to multibuf packets
    
    [ Upstream commit 505b1a88d311ff6f8c44a34f94e3be21745cce6f ]
    
    Current xdp code drops packets larger than ENA_XDP_MAX_MTU.
    This is an incorrect condition since the problem is not the
    size of the packet, rather the number of buffers it contains.
    
    This commit:
    
    1. Identifies and drops XDP multi-buffer packets at the
       beginning of the function.
    2. Increases the xdp drop statistic when this drop occurs.
    3. Adds a one-time print that such drops are happening to
       give better indication to the user.
    
    Fixes: 838c93dc5449 ("net: ena: implement XDP drop support")
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David Arinzon <darinzon@amazon.com>
    Link: https://lore.kernel.org/r/20231211062801.27891-3-darinzon@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c22877fafd6b905e2714701fb3611953ff1b869e
Author: David Arinzon <darinzon@amazon.com>
Date:   Mon Dec 11 06:27:58 2023 +0000

    net: ena: Destroy correct number of xdp queues upon failure
    
    [ Upstream commit 41db6f99b5489a0d2ef26afe816ef0c6118d1d47 ]
    
    The ena_setup_and_create_all_xdp_queues() function freed all the
    resources upon failure, after creating only xdp_num_queues queues,
    instead of freeing just the created ones.
    
    In this patch, the only resources that are freed, are the ones
    allocated right before the failure occurs.
    
    Fixes: 548c4940b9f1 ("net: ena: Implement XDP_TX action")
    Signed-off-by: Shahar Itzko <itzko@amazon.com>
    Signed-off-by: David Arinzon <darinzon@amazon.com>
    Link: https://lore.kernel.org/r/20231211062801.27891-2-darinzon@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6bef004987084ec0db319b0ec3f087b6f56f880
Author: Dong Chenchen <dongchenchen2@huawei.com>
Date:   Sun Dec 10 10:02:00 2023 +0800

    net: Remove acked SYN flag from packet in the transmit queue correctly
    
    [ Upstream commit f99cd56230f56c8b6b33713c5be4da5d6766be1f ]
    
    syzkaller report:
    
     kernel BUG at net/core/skbuff.c:3452!
     invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI
     CPU: 0 PID: 0 Comm: swapper/0 Not tainted 6.7.0-rc4-00009-gbee0e7762ad2-dirty #135
     RIP: 0010:skb_copy_and_csum_bits (net/core/skbuff.c:3452)
     Call Trace:
     icmp_glue_bits (net/ipv4/icmp.c:357)
     __ip_append_data.isra.0 (net/ipv4/ip_output.c:1165)
     ip_append_data (net/ipv4/ip_output.c:1362 net/ipv4/ip_output.c:1341)
     icmp_push_reply (net/ipv4/icmp.c:370)
     __icmp_send (./include/net/route.h:252 net/ipv4/icmp.c:772)
     ip_fragment.constprop.0 (./include/linux/skbuff.h:1234 net/ipv4/ip_output.c:592 net/ipv4/ip_output.c:577)
     __ip_finish_output (net/ipv4/ip_output.c:311 net/ipv4/ip_output.c:295)
     ip_output (net/ipv4/ip_output.c:427)
     __ip_queue_xmit (net/ipv4/ip_output.c:535)
     __tcp_transmit_skb (net/ipv4/tcp_output.c:1462)
     __tcp_retransmit_skb (net/ipv4/tcp_output.c:3387)
     tcp_retransmit_skb (net/ipv4/tcp_output.c:3404)
     tcp_retransmit_timer (net/ipv4/tcp_timer.c:604)
     tcp_write_timer (./include/linux/spinlock.h:391 net/ipv4/tcp_timer.c:716)
    
    The panic issue was trigered by tcp simultaneous initiation.
    The initiation process is as follows:
    
          TCP A                                            TCP B
    
      1.  CLOSED                                           CLOSED
    
      2.  SYN-SENT     --> <SEQ=100><CTL=SYN>              ...
    
      3.  SYN-RECEIVED <-- <SEQ=300><CTL=SYN>              <-- SYN-SENT
    
      4.               ... <SEQ=100><CTL=SYN>              --> SYN-RECEIVED
    
      5.  SYN-RECEIVED --> <SEQ=100><ACK=301><CTL=SYN,ACK> ...
    
      // TCP B: not send challenge ack for ack limit or packet loss
      // TCP A: close
            tcp_close
               tcp_send_fin
                  if (!tskb && tcp_under_memory_pressure(sk))
                      tskb = skb_rb_last(&sk->tcp_rtx_queue); //pick SYN_ACK packet
               TCP_SKB_CB(tskb)->tcp_flags |= TCPHDR_FIN;  // set FIN flag
    
      6.  FIN_WAIT_1  --> <SEQ=100><ACK=301><END_SEQ=102><CTL=SYN,FIN,ACK> ...
    
      // TCP B: send challenge ack to SYN_FIN_ACK
    
      7.               ... <SEQ=301><ACK=101><CTL=ACK>   <-- SYN-RECEIVED //challenge ack
    
      // TCP A:  <SND.UNA=101>
    
      8.  FIN_WAIT_1 --> <SEQ=101><ACK=301><END_SEQ=102><CTL=SYN,FIN,ACK> ... // retransmit panic
    
            __tcp_retransmit_skb  //skb->len=0
                tcp_trim_head
                    len = tp->snd_una - TCP_SKB_CB(skb)->seq // len=101-100
                        __pskb_trim_head
                            skb->data_len -= len // skb->len=-1, wrap around
                ... ...
                ip_fragment
                    icmp_glue_bits //BUG_ON
    
    If we use tcp_trim_head() to remove acked SYN from packet that contains data
    or other flags, skb->len will be incorrectly decremented. We can remove SYN
    flag that has been acked from rtx_queue earlier than tcp_trim_head(), which
    can fix the problem mentioned above.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Co-developed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Dong Chenchen <dongchenchen2@huawei.com>
    Link: https://lore.kernel.org/r/20231210020200.1539875-1-dongchenchen2@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7106a15b96d7debc1da1c16623881ec94ac2b018
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Dec 10 12:52:55 2023 +0800

    qed: Fix a potential use-after-free in qed_cxt_tables_alloc
    
    [ Upstream commit b65d52ac9c085c0c52dee012a210d4e2f352611b ]
    
    qed_ilt_shadow_alloc() will call qed_ilt_shadow_free() to
    free p_hwfn->p_cxt_mngr->ilt_shadow on error. However,
    qed_cxt_tables_alloc() accesses the freed pointer on failure
    of qed_ilt_shadow_alloc() through calling qed_cxt_mngr_free(),
    which may lead to use-after-free. Fix this issue by setting
    p_mngr->ilt_shadow to NULL in qed_ilt_shadow_free().
    
    Fixes: fe56b9e6a8d9 ("qed: Add module with basic common support")
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20231210045255.21383-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54f59a242bcfcd7ef7bbb9e1928edd39d908c8d5
Author: Slawomir Laba <slawomirx.laba@intel.com>
Date:   Wed Nov 29 10:35:26 2023 -0500

    iavf: Fix iavf_shutdown to call iavf_remove instead iavf_close
    
    [ Upstream commit 7ae42ef308ed0f6250b36f43e4eeb182ebbe6215 ]
    
    Make the flow for pci shutdown be the same to the pci remove.
    
    iavf_shutdown was implementing an incomplete version
    of iavf_remove. It misses several calls to the kernel like
    iavf_free_misc_irq, iavf_reset_interrupt_capability, iounmap
    that might break the system on reboot or hibernation.
    
    Implement the call of iavf_remove directly in iavf_shutdown to
    close this gap.
    
    Fixes below error messages (dmesg) during shutdown stress tests -
    [685814.900917] ice 0000:88:00.0: MAC 02:d0:5f:82:43:5d does not exist for
     VF 0
    [685814.900928] ice 0000:88:00.0: MAC 33:33:00:00:00:01 does not exist for
    VF 0
    
    Reproduction:
    
    1. Create one VF interface:
    echo 1 > /sys/class/net/<interface_name>/device/sriov_numvfs
    
    2. Run live dmesg on the host:
    dmesg -wH
    
    3. On SUT, script below steps into vf_namespace_assignment.sh
    
    <#!/bin/sh> // Remove <>. Git removes # line
    if=<VF name> (edit this per VF name)
    loop=0
    
    while true; do
    
    echo test round $loop
    let loop++
    
    ip netns add ns$loop
    ip link set dev $if up
    ip link set dev $if netns ns$loop
    ip netns exec ns$loop ip link set dev $if up
    ip netns exec ns$loop ip link set dev $if netns 1
    ip netns delete ns$loop
    
    done
    
    4. Run the script for at least 1000 iterations on SUT:
    ./vf_namespace_assignment.sh
    
    Expected result:
    No errors in dmesg.
    
    Fixes: 129cf89e5856 ("iavf: rename functions and structs to new name")
    Signed-off-by: Slawomir Laba <slawomirx.laba@intel.com>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Reviewed-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Co-developed-by: Ranganatha Rao <ranganatha.rao@intel.com>
    Signed-off-by: Ranganatha Rao <ranganatha.rao@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e768a04908de2d72caaf8bc491472597c922cb39
Author: Piotr Gardocki <piotrx.gardocki@intel.com>
Date:   Tue Nov 21 22:47:16 2023 -0500

    iavf: Handle ntuple on/off based on new state machines for flow director
    
    [ Upstream commit 09d23b8918f9ab0f8114f6b94f2faf8bde3fb52a ]
    
    ntuple-filter feature on/off:
    Default is on. If turned off, the filters will be removed from both
    PF and iavf list. The removal is irrespective of current filter state.
    
    Steps to reproduce:
    -------------------
    
    1. Ensure ntuple is on.
    
    ethtool -K enp8s0 ntuple-filters on
    
    2. Create a filter to receive the traffic into non-default rx-queue like 15
    and ensure traffic is flowing into queue into 15.
    Now, turn off ntuple. Traffic should not flow to configured queue 15.
    It should flow to default RX queue.
    
    Fixes: 0dbfbabb840d ("iavf: Add framework to enable ethtool ntuple filters")
    Signed-off-by: Piotr Gardocki <piotrx.gardocki@intel.com>
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Signed-off-by: Ranganatha Rao <ranganatha.rao@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3beb9d66e4422d1c3865da9027eee49863bff9e1
Author: Piotr Gardocki <piotrx.gardocki@intel.com>
Date:   Tue Nov 21 22:47:15 2023 -0500

    iavf: Introduce new state machines for flow director
    
    [ Upstream commit 3a0b5a2929fdeda63fc921c2dbed237059acf732 ]
    
    New states introduced:
    
     IAVF_FDIR_FLTR_DIS_REQUEST
     IAVF_FDIR_FLTR_DIS_PENDING
     IAVF_FDIR_FLTR_INACTIVE
    
    Current FDIR state machines (SM) are not adequate to handle a few
    scenarios in the link DOWN/UP event, reset event and ntuple-feature.
    
    For example, when VF link goes DOWN and comes back UP administratively,
    the expectation is that previously installed filters should also be
    restored. But with current SM, filters are not restored.
    So with new SM, during link DOWN filters are marked as INACTIVE in
    the iavf list but removed from PF. After link UP, SM will transition
    from INACTIVE to ADD_REQUEST to restore the filter.
    
    Similarly, with VF reset, filters will be removed from the PF, but
    marked as INACTIVE in the iavf list. Filters will be restored after
    reset completion.
    
    Steps to reproduce:
    -------------------
    
    1. Create a VF. Here VF is enp8s0.
    
    2. Assign IP addresses to VF and link partner and ping continuously
    from remote. Here remote IP is 1.1.1.1.
    
    3. Check default RX Queue of traffic.
    
    ethtool -S enp8s0 | grep -E "rx-[[:digit:]]+\.packets"
    
    4. Add filter - change default RX Queue (to 15 here)
    
    ethtool -U ens8s0 flow-type ip4 src-ip 1.1.1.1 action 15 loc 5
    
    5. Ensure filter gets added and traffic is received on RX queue 15 now.
    
    Link event testing:
    -------------------
    6. Bring VF link down and up. If traffic flows to configured queue 15,
    test is success, otherwise it is a failure.
    
    Reset event testing:
    --------------------
    7. Reset the VF. If traffic flows to configured queue 15, test is success,
    otherwise it is a failure.
    
    Fixes: 0dbfbabb840d ("iavf: Add framework to enable ethtool ntuple filters")
    Signed-off-by: Piotr Gardocki <piotrx.gardocki@intel.com>
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Signed-off-by: Ranganatha Rao <ranganatha.rao@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63caa51833e8701248a8a89d83effe96f30e4c80
Author: Hyunwoo Kim <v4bel@theori.io>
Date:   Sat Dec 9 05:05:38 2023 -0500

    net/rose: Fix Use-After-Free in rose_ioctl
    
    [ Upstream commit 810c38a369a0a0ce625b5c12169abce1dd9ccd53 ]
    
    Because rose_ioctl() accesses sk->sk_receive_queue
    without holding a sk->sk_receive_queue.lock, it can
    cause a race with rose_accept().
    A use-after-free for skb occurs with the following flow.
    ```
    rose_ioctl() -> skb_peek()
    rose_accept() -> skb_dequeue() -> kfree_skb()
    ```
    Add sk->sk_receive_queue.lock to rose_ioctl() to fix this issue.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Hyunwoo Kim <v4bel@theori.io>
    Link: https://lore.kernel.org/r/20231209100538.GA407321@v4bel-B760M-AORUS-ELITE-AX
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 531fd46f92895bcdc41bedd12533266c397196da
Author: Hyunwoo Kim <v4bel@theori.io>
Date:   Sat Dec 9 04:42:10 2023 -0500

    atm: Fix Use-After-Free in do_vcc_ioctl
    
    [ Upstream commit 24e90b9e34f9e039f56b5f25f6e6eb92cdd8f4b3 ]
    
    Because do_vcc_ioctl() accesses sk->sk_receive_queue
    without holding a sk->sk_receive_queue.lock, it can
    cause a race with vcc_recvmsg().
    A use-after-free for skb occurs with the following flow.
    ```
    do_vcc_ioctl() -> skb_peek()
    vcc_recvmsg() -> skb_recv_datagram() -> skb_free_datagram()
    ```
    Add sk->sk_receive_queue.lock to do_vcc_ioctl() to fix this issue.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Hyunwoo Kim <v4bel@theori.io>
    Link: https://lore.kernel.org/r/20231209094210.GA403126@v4bel-B760M-AORUS-ELITE-AX
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f115b31d7e96b4674f99427126e78721ef96a2ae
Author: Hariprasad Kelam <hkelam@marvell.com>
Date:   Fri Dec 8 14:57:54 2023 +0530

    octeontx2-af: Fix pause frame configuration
    
    [ Upstream commit e307b5a845c5951dabafc48d00b6424ee64716c4 ]
    
    The current implementation's default Pause Forward setting is causing
    unnecessary network traffic. This patch disables Pause Forward to
    address this issue.
    
    Fixes: 1121f6b02e7a ("octeontx2-af: Priority flow control configuration support")
    Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
    Signed-off-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b5de31e372cc79ade47b54d8cbb6d258887497d
Author: Hariprasad Kelam <hkelam@marvell.com>
Date:   Fri Dec 8 12:26:10 2023 +0530

    octeontx2-af: Update RSS algorithm index
    
    [ Upstream commit 570ba37898ecd9069beb58bf0b6cf84daba6e0fe ]
    
    The RSS flow algorithm is not set up correctly for promiscuous or all
    multi MCAM entries. This has an impact on flow distribution.
    
    This patch fixes the issue by updating flow algorithm index in above
    mentioned MCAM entries.
    
    Fixes: 967db3529eca ("octeontx2-af: add support for multicast/promisc packet replication feature")
    Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
    Signed-off-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5295d2ad9103381daba63b206b34cfed08bdba69
Author: Hariprasad Kelam <hkelam@marvell.com>
Date:   Fri Dec 8 12:26:09 2023 +0530

    octeontx2-pf: Fix promisc mcam entry action
    
    [ Upstream commit dbda436824ded8ef6a05bb82cd9baa8d42377a49 ]
    
    Current implementation is such that, promisc mcam entry action
    is set as multicast even when there are no trusted VFs. multicast
    action causes the hardware to copy packet data, which reduces
    the performance.
    
    This patch fixes this issue by setting the promisc mcam entry action to
    unicast instead of multicast when there are no trusted VFs. The same
    change is made for the 'allmulti' mcam entry action.
    
    Fixes: ffd2f89ad05c ("octeontx2-pf: Enable promisc/allmulti match MCAM entries.")
    Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
    Signed-off-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6047060105e44c7108c715535fc92c0226995a40
Author: Shinas Rasheed <srasheed@marvell.com>
Date:   Thu Dec 7 21:56:46 2023 -0800

    octeon_ep: explicitly test for firmware ready value
    
    [ Upstream commit 284f717622417cb267e344a9174f8e5698d1e3c1 ]
    
    The firmware ready value is 1, and get firmware ready status
    function should explicitly test for that value. The firmware
    ready value read will be 2 after driver load, and on unbind
    till firmware rewrites the firmware ready back to 0, the value
    seen by driver will be 2, which should be regarded as not ready.
    
    Fixes: 10c073e40469 ("octeon_ep: defer probe if firmware not ready")
    Signed-off-by: Shinas Rasheed <srasheed@marvell.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15f300ed1d5e21ac85ab63de504dc246839fdf12
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Tue Dec 5 18:25:54 2023 +0100

    net/sched: act_ct: Take per-cb reference to tcf_ct_flow_table
    
    [ Upstream commit 125f1c7f26ffcdbf96177abe75b70c1a6ceb17bc ]
    
    The referenced change added custom cleanup code to act_ct to delete any
    callbacks registered on the parent block when deleting the
    tcf_ct_flow_table instance. However, the underlying issue is that the
    drivers don't obtain the reference to the tcf_ct_flow_table instance when
    registering callbacks which means that not only driver callbacks may still
    be on the table when deleting it but also that the driver can still have
    pointers to its internal nf_flowtable and can use it concurrently which
    results either warning in netfilter[0] or use-after-free.
    
    Fix the issue by taking a reference to the underlying struct
    tcf_ct_flow_table instance when registering the callback and release the
    reference when unregistering. Expose new API required for such reference
    counting by adding two new callbacks to nf_flowtable_type and implementing
    them for act_ct flowtable_ct type. This fixes the issue by extending the
    lifetime of nf_flowtable until all users have unregistered.
    
    [0]:
    [106170.938634] ------------[ cut here ]------------
    [106170.939111] WARNING: CPU: 21 PID: 3688 at include/net/netfilter/nf_flow_table.h:262 mlx5_tc_ct_del_ft_cb+0x267/0x2b0 [mlx5_core]
    [106170.940108] Modules linked in: act_ct nf_flow_table act_mirred act_skbedit act_tunnel_key vxlan cls_matchall nfnetlink_cttimeout act_gact cls_flower sch_ingress mlx5_vdpa vringh vhost_iotlb vdpa bonding openvswitch nsh rpcrdma rdma_ucm
    ib_iser libiscsi scsi_transport_iscsi ib_umad rdma_cm ib_ipoib iw_cm ib_cm mlx5_ib ib_uverbs ib_core xt_MASQUERADE nf_conntrack_netlink nfnetlink iptable_nat xt_addrtype xt_conntrack nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_regis
    try overlay mlx5_core
    [106170.943496] CPU: 21 PID: 3688 Comm: kworker/u48:0 Not tainted 6.6.0-rc7_for_upstream_min_debug_2023_11_01_13_02 #1
    [106170.944361] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
    [106170.945292] Workqueue: mlx5e mlx5e_rep_neigh_update [mlx5_core]
    [106170.945846] RIP: 0010:mlx5_tc_ct_del_ft_cb+0x267/0x2b0 [mlx5_core]
    [106170.946413] Code: 89 ef 48 83 05 71 a4 14 00 01 e8 f4 06 04 e1 48 83 05 6c a4 14 00 01 48 83 c4 28 5b 5d 41 5c 41 5d c3 48 83 05 d1 8b 14 00 01 <0f> 0b 48 83 05 d7 8b 14 00 01 e9 96 fe ff ff 48 83 05 a2 90 14 00
    [106170.947924] RSP: 0018:ffff88813ff0fcb8 EFLAGS: 00010202
    [106170.948397] RAX: 0000000000000000 RBX: ffff88811eabac40 RCX: ffff88811eabad48
    [106170.949040] RDX: ffff88811eab8000 RSI: ffffffffa02cd560 RDI: 0000000000000000
    [106170.949679] RBP: ffff88811eab8000 R08: 0000000000000001 R09: ffffffffa0229700
    [106170.950317] R10: ffff888103538fc0 R11: 0000000000000001 R12: ffff88811eabad58
    [106170.950969] R13: ffff888110c01c00 R14: ffff888106b40000 R15: 0000000000000000
    [106170.951616] FS:  0000000000000000(0000) GS:ffff88885fd40000(0000) knlGS:0000000000000000
    [106170.952329] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [106170.952834] CR2: 00007f1cefd28cb0 CR3: 000000012181b006 CR4: 0000000000370ea0
    [106170.953482] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [106170.954121] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [106170.954766] Call Trace:
    [106170.955057]  <TASK>
    [106170.955315]  ? __warn+0x79/0x120
    [106170.955648]  ? mlx5_tc_ct_del_ft_cb+0x267/0x2b0 [mlx5_core]
    [106170.956172]  ? report_bug+0x17c/0x190
    [106170.956537]  ? handle_bug+0x3c/0x60
    [106170.956891]  ? exc_invalid_op+0x14/0x70
    [106170.957264]  ? asm_exc_invalid_op+0x16/0x20
    [106170.957666]  ? mlx5_del_flow_rules+0x10/0x310 [mlx5_core]
    [106170.958172]  ? mlx5_tc_ct_block_flow_offload_add+0x1240/0x1240 [mlx5_core]
    [106170.958788]  ? mlx5_tc_ct_del_ft_cb+0x267/0x2b0 [mlx5_core]
    [106170.959339]  ? mlx5_tc_ct_del_ft_cb+0xc6/0x2b0 [mlx5_core]
    [106170.959854]  ? mapping_remove+0x154/0x1d0 [mlx5_core]
    [106170.960342]  ? mlx5e_tc_action_miss_mapping_put+0x4f/0x80 [mlx5_core]
    [106170.960927]  mlx5_tc_ct_delete_flow+0x76/0xc0 [mlx5_core]
    [106170.961441]  mlx5_free_flow_attr_actions+0x13b/0x220 [mlx5_core]
    [106170.962001]  mlx5e_tc_del_fdb_flow+0x22c/0x3b0 [mlx5_core]
    [106170.962524]  mlx5e_tc_del_flow+0x95/0x3c0 [mlx5_core]
    [106170.963034]  mlx5e_flow_put+0x73/0xe0 [mlx5_core]
    [106170.963506]  mlx5e_put_flow_list+0x38/0x70 [mlx5_core]
    [106170.964002]  mlx5e_rep_update_flows+0xec/0x290 [mlx5_core]
    [106170.964525]  mlx5e_rep_neigh_update+0x1da/0x310 [mlx5_core]
    [106170.965056]  process_one_work+0x13a/0x2c0
    [106170.965443]  worker_thread+0x2e5/0x3f0
    [106170.965808]  ? rescuer_thread+0x410/0x410
    [106170.966192]  kthread+0xc6/0xf0
    [106170.966515]  ? kthread_complete_and_exit+0x20/0x20
    [106170.966970]  ret_from_fork+0x2d/0x50
    [106170.967332]  ? kthread_complete_and_exit+0x20/0x20
    [106170.967774]  ret_from_fork_asm+0x11/0x20
    [106170.970466]  </TASK>
    [106170.970726] ---[ end trace 0000000000000000 ]---
    
    Fixes: 77ac5e40c44e ("net/sched: act_ct: remove and free nf_table callbacks")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Reviewed-by: Paul Blakey <paulb@nvidia.com>
    Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd75adfdc2865724c156b180c833ea63650c54a7
Author: Zhipeng Lu <alexious@zju.edu.cn>
Date:   Thu Dec 7 17:49:16 2023 +0800

    octeontx2-af: fix a use-after-free in rvu_nix_register_reporters
    
    [ Upstream commit 28a7cb045ab700de5554193a1642917602787784 ]
    
    The rvu_dl will be freed in rvu_nix_health_reporters_destroy(rvu_dl)
    after the create_workqueue fails, and after that free, the rvu_dl will
    be translate back through the following call chain:
    
    rvu_nix_health_reporters_destroy
      |-> rvu_nix_health_reporters_create
           |-> rvu_health_reporters_create
                 |-> rvu_register_dl (label err_dl_health)
    
    Finally. in the err_dl_health label, rvu_dl being freed again in
    rvu_health_reporters_destroy(rvu) by rvu_nix_health_reporters_destroy.
    In the second calls of rvu_nix_health_reporters_destroy, however,
    it uses rvu_dl->rvu_nix_health_reporter, which is already freed at
    the end of rvu_nix_health_reporters_destroy in the first call.
    
    So this patch prevents the first destroy by instantly returning -ENONMEN
    when create_workqueue fails. In addition, since the failure of
    create_workqueue is the only entrence of label err, it has been
    integrated into the error-handling path of create_workqueue.
    
    Fixes: 5ed66306eab6 ("octeontx2-af: Add devlink health reporters for NIX")
    Signed-off-by: Zhipeng Lu <alexious@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4317fba45ff3eb5a4ce31d7781b6eb3e71abcca4
Author: Radu Bulie <radu-andrei.bulie@nxp.com>
Date:   Thu Dec 7 16:38:01 2023 +0800

    net: fec: correct queue selection
    
    [ Upstream commit 9fc95fe95c3e2a63ced8eeca4b256518ab204b63 ]
    
    The old implementation extracted VLAN TCI info from the payload
    before the VLAN tag has been pushed in the payload.
    
    Another problem was that the VLAN TCI was extracted even if the
    packet did not have VLAN protocol header.
    
    This resulted in invalid VLAN TCI and as a consequence a random
    queue was computed.
    
    This patch fixes the above issues and use the VLAN TCI from the
    skb if it is present or VLAN TCI from payload if present. If no
    VLAN header is present queue 0 is selected.
    
    Fixes: 52c4a1a85f4b ("net: fec: add ndo_select_queue to fix TX bandwidth fluctuations")
    Signed-off-by: Radu Bulie <radu-andrei.bulie@nxp.com>
    Signed-off-by: Wei Fang <wei.fang@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82102501e08e3ce28ee52f8df97d2ac98a3cea51
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Thu Dec 7 12:34:53 2023 +0000

    atm: solos-pci: Fix potential deadlock on &tx_queue_lock
    
    [ Upstream commit 15319a4e8ee4b098118591c6ccbd17237f841613 ]
    
    As &card->tx_queue_lock is acquired under softirq context along the
    following call chain from solos_bh(), other acquisition of the same
    lock inside process context should disable at least bh to avoid double
    lock.
    
    <deadlock #2>
    pclose()
    --> spin_lock(&card->tx_queue_lock)
    <interrupt>
       --> solos_bh()
       --> fpga_tx()
       --> spin_lock(&card->tx_queue_lock)
    
    This flaw was found by an experimental static analysis tool I am
    developing for irq-related deadlock.
    
    To prevent the potential deadlock, the patch uses spin_lock_bh()
    on &card->tx_queue_lock under process context code consistently to
    prevent the possible deadlock scenario.
    
    Fixes: 213e85d38912 ("solos-pci: clean up pclose() function")
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4faf39c4252ae5eb5bdacc92c85e087f240dd3e0
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Thu Dec 7 12:34:37 2023 +0000

    atm: solos-pci: Fix potential deadlock on &cli_queue_lock
    
    [ Upstream commit d5dba32b8f6cb39be708b726044ba30dbc088b30 ]
    
    As &card->cli_queue_lock is acquired under softirq context along the
    following call chain from solos_bh(), other acquisition of the same
    lock inside process context should disable at least bh to avoid double
    lock.
    
    <deadlock #1>
    console_show()
    --> spin_lock(&card->cli_queue_lock)
    <interrupt>
       --> solos_bh()
       --> spin_lock(&card->cli_queue_lock)
    
    This flaw was found by an experimental static analysis tool I am
    developing for irq-related deadlock.
    
    To prevent the potential deadlock, the patch uses spin_lock_bh()
    on the card->cli_queue_lock under process context code consistently
    to prevent the possible deadlock scenario.
    
    Fixes: 9c54004ea717 ("atm: Driver for Solos PCI ADSL2+ card.")
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9542105eb4ffe5fb498737dd93d57532b3f5ab58
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Thu Dec 7 16:16:58 2023 -0800

    bnxt_en: Fix HWTSTAMP_FILTER_ALL packet timestamp logic
    
    [ Upstream commit c13e268c0768659cdaae4bfe2fb24860bcc8ddb4 ]
    
    When the chip is configured to timestamp all receive packets, the
    timestamp in the RX completion is only valid if the metadata
    present flag is not set for packets received on the wire.  In
    addition, internal loopback packets will never have a valid timestamp
    and the timestamp field will always be zero.  We must exclude
    any 0 value in the timestamp field because there is no way to
    determine if it is a loopback packet or not.
    
    Add a new function bnxt_rx_ts_valid() to check for all timestamp
    valid conditions.
    
    Fixes: 66ed81dcedc6 ("bnxt_en: Enable packet timestamping for all RX packets")
    Reviewed-by: Andy Gospodarek <andrew.gospodarek@broadcom.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/20231208001658.14230-5-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 909f5a48bf23b0b2e5e45fc68f8b4e136c5153ac
Author: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
Date:   Thu Dec 7 16:16:57 2023 -0800

    bnxt_en: Fix wrong return value check in bnxt_close_nic()
    
    [ Upstream commit bd6781c18cb5b5e5d8c5873fa9a51668e89ec76e ]
    
    The wait_event_interruptible_timeout() function returns 0
    if the timeout elapsed, -ERESTARTSYS if it was interrupted
    by a signal, and the remaining jiffies otherwise if the
    condition evaluated to true before the timeout elapsed.
    
    Driver should have checked for zero return value instead of
    a positive value.
    
    MChan: Print a warning for -ERESTARTSYS.  The close operation
    will proceed anyway when wait_event_interruptible_timeout()
    returns for any reason.  Since we do the close no matter what,
    we should not return this error code to the caller.  Change
    bnxt_close_nic() to a void function and remove all error
    handling from some of the callers.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reviewed-by: Andy Gospodarek <andrew.gospodarek@broadcom.com>
    Reviewed-by: Vikas Gupta <vikas.gupta@broadcom.com>
    Reviewed-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Signed-off-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/20231208001658.14230-4-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8ea6b0d549bb1d7522d17124a66d6e52e8c4d9e
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Thu Dec 7 16:16:56 2023 -0800

    bnxt_en: Fix skb recycling logic in bnxt_deliver_skb()
    
    [ Upstream commit aded5d1feb08e48d544845d3594d70c4d5fe6e54 ]
    
    Receive SKBs can go through the VF-rep path or the normal path.
    skb_mark_for_recycle() is only called for the normal path.  Fix it
    to do it for both paths to fix possible stalled page pool shutdown
    errors.
    
    Fixes: 86b05508f775 ("bnxt_en: Use the unified RX page pool buffers for XDP and non-XDP")
    Reviewed-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Reviewed-by: Andy Gospodarek <andrew.gospodarek@broadcom.com>
    Reviewed-by: Vikas Gupta <vikas.gupta@broadcom.com>
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/20231208001658.14230-3-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf9ceb1633621d15e83723ec87c938e4b73b301f
Author: Somnath Kotur <somnath.kotur@broadcom.com>
Date:   Thu Dec 7 16:16:55 2023 -0800

    bnxt_en: Clear resource reservation during resume
    
    [ Upstream commit 9ef7c58f5abe41e6d91f37f28fe2d851ffedd92a ]
    
    We are issuing HWRM_FUNC_RESET cmd to reset the device including
    all reserved resources, but not clearing the reservations
    within the driver struct. As a result, when the driver re-initializes
    as part of resume, it believes that there is no need to do any
    resource reservation and goes ahead and tries to allocate rings
    which will eventually fail beyond a certain number pre-reserved by
    the firmware.
    
    Fixes: 674f50a5b026 ("bnxt_en: Implement new method to reserve rings.")
    Reviewed-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
    Reviewed-by: Ajit Khaparde <ajit.khaparde@broadcom.com>
    Reviewed-by: Andy Gospodarek <andrew.gospodarek@broadcom.com>
    Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/20231208001658.14230-2-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7dac967e17081a84b718990a85e48bc74fb9412
Author: Stefan Wahren <wahrenst@gmx.net>
Date:   Wed Dec 6 15:12:22 2023 +0100

    qca_spi: Fix reset behavior
    
    [ Upstream commit 1057812d146dd658c9a9a96d869c2551150207b5 ]
    
    In case of a reset triggered by the QCA7000 itself, the behavior of the
    qca_spi driver was not quite correct:
    - in case of a pending RX frame decoding the drop counter must be
      incremented and decoding state machine reseted
    - also the reset counter must always be incremented regardless of sync
      state
    
    Fixes: 291ab06ecf67 ("net: qualcomm: new Ethernet over SPI driver for QCA7000")
    Signed-off-by: Stefan Wahren <wahrenst@gmx.net>
    Link: https://lore.kernel.org/r/20231206141222.52029-4-wahrenst@gmx.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02296b1d8449980b81cab590717ca10743d93527
Author: Stefan Wahren <wahrenst@gmx.net>
Date:   Wed Dec 6 15:12:21 2023 +0100

    qca_debug: Fix ethtool -G iface tx behavior
    
    [ Upstream commit 96a7e861d9e04d07febd3011c30cd84cd141d81f ]
    
    After calling ethtool -g it was not possible to adjust the TX ring
    size again:
    
      # ethtool -g eth1
      Ring parameters for eth1:
      Pre-set maximums:
      RX:           4
      RX Mini:      n/a
      RX Jumbo:     n/a
      TX:           10
      Current hardware settings:
      RX:           4
      RX Mini:      n/a
      RX Jumbo:     n/a
      TX:           10
      # ethtool -G eth1 tx 8
      netlink error: Invalid argument
    
    The reason for this is that the readonly setting rx_pending get
    initialized and after that the range check in qcaspi_set_ringparam()
    fails regardless of the provided parameter. So fix this by accepting
    the exposed RX defaults. Instead of adding another magic number
    better use a new define here.
    
    Fixes: 291ab06ecf67 ("net: qualcomm: new Ethernet over SPI driver for QCA7000")
    Suggested-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Stefan Wahren <wahrenst@gmx.net>
    Link: https://lore.kernel.org/r/20231206141222.52029-3-wahrenst@gmx.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21b9dc814d3fe447b8f1fef67efeb7a3bc0f1502
Author: Stefan Wahren <wahrenst@gmx.net>
Date:   Wed Dec 6 15:12:20 2023 +0100

    qca_debug: Prevent crash on TX ring changes
    
    [ Upstream commit f4e6064c97c050bd9904925ff7d53d0c9954fc7b ]
    
    The qca_spi driver stop and restart the SPI kernel thread
    (via ndo_stop & ndo_open) in case of TX ring changes. This is
    a big issue because it allows userspace to prevent restart of
    the SPI kernel thread (via signals). A subsequent change of
    TX ring wrongly assume a valid spi_thread pointer which result
    in a crash.
    
    So prevent this by stopping the network traffic handling and
    temporary park the SPI thread.
    
    Fixes: 291ab06ecf67 ("net: qualcomm: new Ethernet over SPI driver for QCA7000")
    Signed-off-by: Stefan Wahren <wahrenst@gmx.net>
    Link: https://lore.kernel.org/r/20231206141222.52029-2-wahrenst@gmx.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92d813f73f649a32cb936583030c2edcc309eb37
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Dec 6 09:36:12 2023 -0800

    net: ipv6: support reporting otherwise unknown prefix flags in RTM_NEWPREFIX
    
    [ Upstream commit bd4a816752bab609dd6d65ae021387beb9e2ddbd ]
    
    Lorenzo points out that we effectively clear all unknown
    flags from PIO when copying them to userspace in the netlink
    RTM_NEWPREFIX notification.
    
    We could fix this one at a time as new flags are defined,
    or in one fell swoop - I choose the latter.
    
    We could either define 6 new reserved flags (reserved1..6) and handle
    them individually (and rename them as new flags are defined), or we
    could simply copy the entire unmodified byte over - I choose the latter.
    
    This unfortunately requires some anonymous union/struct magic,
    so we add a static assert on the struct size for a little extra safety.
    
    Cc: David Ahern <dsahern@kernel.org>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cb39c79bca9ed05ba9b33083a6f09211d79f05e
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Nov 3 09:36:20 2023 +0300

    net/mlx5: Fix a NULL vs IS_ERR() check
    
    [ Upstream commit ca4ef28d0ad831d2521fa2b16952f37fd9324ca3 ]
    
    The mlx5_esw_offloads_devlink_port() function returns error pointers, not
    NULL.
    
    Fixes: 7bef147a6ab6 ("net/mlx5: Don't skip vport check")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef3b2d5f21526a47067ac0ab885fd1c096fcec82
Author: Gavin Li <gavinl@nvidia.com>
Date:   Thu Aug 31 05:47:09 2023 +0300

    net/mlx5e: Check netdev pointer before checking its net ns
    
    [ Upstream commit 7aaf975238c47b710fcc4eca0da1e7902a53abe2 ]
    
    Previously, when comparing the net namespaces, the case where the netdev
    doesn't exist wasn't taken into account, and therefore can cause a crash.
    In such a case, the comparing function should return false, as there is no
    netdev->net to compare the devlink->net to.
    
    Furthermore, this will result in an attempt to enter switchdev mode
    without a netdev to fail, and which is the desired result as there is no
    meaning in switchdev mode without a net device.
    
    Fixes: 662404b24a4c ("net/mlx5e: Block entering switchdev mode with ns inconsistency")
    Signed-off-by: Gavin Li <gavinl@nvidia.com>
    Reviewed-by: Gavi Teitz <gavi@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4839771d7b9d74b98b8209967ffdbfb28ae9104
Author: Moshe Shemesh <moshe@nvidia.com>
Date:   Mon Aug 7 13:11:32 2023 +0300

    net/mlx5: Nack sync reset request when HotPlug is enabled
    
    [ Upstream commit 3d7a3f2612d75de5f371a681038b089ded6667eb ]
    
    Current sync reset flow is not supported when PCIe bridge connected
    directly to mlx5 device has HotPlug interrupt enabled and can be
    triggered on link state change event. Return nack on reset request in
    such case.
    
    Fixes: 92501fa6e421 ("net/mlx5: Ack on sync_reset_request only if PF can do reset_now")
    Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Shay Drory <shayd@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b766f8b8d4d13d358ebc4d169ededd50d1468a74
Author: Chris Mi <cmi@nvidia.com>
Date:   Mon Sep 11 13:28:10 2023 +0300

    net/mlx5e: TC, Don't offload post action rule if not supported
    
    [ Upstream commit ccbe33003b109f14c4dde2a4fca9c2a50c423601 ]
    
    If post action is not supported, eg. ignore_flow_level is not
    supported, don't offload post action rule. Otherwise, will hit
    panic [1].
    
    Fix it by checking if post action table is valid or not.
    
    [1]
    [445537.863880] BUG: unable to handle page fault for address: ffffffffffffffb1
    [445537.864617] #PF: supervisor read access in kernel mode
    [445537.865244] #PF: error_code(0x0000) - not-present page
    [445537.865860] PGD 70683a067 P4D 70683a067 PUD 70683c067 PMD 0
    [445537.866497] Oops: 0000 [#1] PREEMPT SMP NOPTI
    [445537.867077] CPU: 19 PID: 248742 Comm: tc Kdump: loaded Tainted: G           O       6.5.0+ #1
    [445537.867888] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
    [445537.868834] RIP: 0010:mlx5e_tc_post_act_add+0x51/0x130 [mlx5_core]
    [445537.869635] Code: c0 0d 00 00 e8 20 96 c6 d3 48 85 c0 0f 84 e5 00 00 00 c7 83 b0 01 00 00 00 00 00 00 49 89 c5 31 c0 31 d2 66 89 83 b4 01 00 00 <49> 8b 44 24 10 83 23 df 83 8b d8 01 00 00 04 48 89 83 c0 01 00 00
    [445537.871318] RSP: 0018:ffffb98741cef428 EFLAGS: 00010246
    [445537.871962] RAX: 0000000000000000 RBX: ffff8df341167000 RCX: 0000000000000001
    [445537.872704] RDX: 0000000000000000 RSI: ffffffff954844e1 RDI: ffffffff9546e9cb
    [445537.873430] RBP: ffffb98741cef448 R08: 0000000000000020 R09: 0000000000000246
    [445537.874160] R10: 0000000000000000 R11: ffffffff943f73ff R12: ffffffffffffffa1
    [445537.874893] R13: ffff8df36d336c20 R14: ffffffffffffffa1 R15: ffff8df341167000
    [445537.875628] FS:  00007fcd6564f800(0000) GS:ffff8dfa9ea00000(0000) knlGS:0000000000000000
    [445537.876425] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [445537.877090] CR2: ffffffffffffffb1 CR3: 00000003b5884001 CR4: 0000000000770ee0
    [445537.877832] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [445537.878564] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [445537.879300] PKRU: 55555554
    [445537.879797] Call Trace:
    [445537.880263]  <TASK>
    [445537.880713]  ? show_regs+0x6e/0x80
    [445537.881232]  ? __die+0x29/0x70
    [445537.881731]  ? page_fault_oops+0x85/0x160
    [445537.882276]  ? search_exception_tables+0x65/0x70
    [445537.882852]  ? kernelmode_fixup_or_oops+0xa2/0x120
    [445537.883432]  ? __bad_area_nosemaphore+0x18b/0x250
    [445537.884019]  ? bad_area_nosemaphore+0x16/0x20
    [445537.884566]  ? do_kern_addr_fault+0x8b/0xa0
    [445537.885105]  ? exc_page_fault+0xf5/0x1c0
    [445537.885623]  ? asm_exc_page_fault+0x2b/0x30
    [445537.886149]  ? __kmem_cache_alloc_node+0x1df/0x2a0
    [445537.886717]  ? mlx5e_tc_post_act_add+0x51/0x130 [mlx5_core]
    [445537.887431]  ? mlx5e_tc_post_act_add+0x30/0x130 [mlx5_core]
    [445537.888172]  alloc_flow_post_acts+0xfb/0x1c0 [mlx5_core]
    [445537.888849]  parse_tc_actions+0x582/0x5c0 [mlx5_core]
    [445537.889505]  parse_tc_fdb_actions+0xd7/0x1f0 [mlx5_core]
    [445537.890175]  __mlx5e_add_fdb_flow+0x1ab/0x2b0 [mlx5_core]
    [445537.890843]  mlx5e_add_fdb_flow+0x56/0x120 [mlx5_core]
    [445537.891491]  ? debug_smp_processor_id+0x1b/0x30
    [445537.892037]  mlx5e_tc_add_flow+0x79/0x90 [mlx5_core]
    [445537.892676]  mlx5e_configure_flower+0x305/0x450 [mlx5_core]
    [445537.893341]  mlx5e_rep_setup_tc_cls_flower+0x3d/0x80 [mlx5_core]
    [445537.894037]  mlx5e_rep_setup_tc_cb+0x5c/0xa0 [mlx5_core]
    [445537.894693]  tc_setup_cb_add+0xdc/0x220
    [445537.895177]  fl_hw_replace_filter+0x15f/0x220 [cls_flower]
    [445537.895767]  fl_change+0xe87/0x1190 [cls_flower]
    [445537.896302]  tc_new_tfilter+0x484/0xa50
    
    Fixes: f0da4daa3413 ("net/mlx5e: Refactor ct to use post action infrastructure")
    Signed-off-by: Chris Mi <cmi@nvidia.com>
    Reviewed-by: Jianbo Liu <jianbol@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Reviewed-by: Automatic Verification <verifier@nvidia.com>
    Reviewed-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Shachar Kagan <skagan@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ce3d969348a7c7fa3469588eb1319f9f3cc0eaa
Author: Moshe Shemesh <moshe@nvidia.com>
Date:   Wed Sep 21 18:45:11 2022 +0300

    net/mlx5e: Fix possible deadlock on mlx5e_tx_timeout_work
    
    [ Upstream commit eab0da38912ebdad922ed0388209f7eb0a5163cd ]
    
    Due to the cited patch, devlink health commands take devlink lock and
    this may result in deadlock for mlx5e_tx_reporter as it takes local
    state_lock before calling devlink health report and on the other hand
    devlink health commands such as diagnose for same reporter take local
    state_lock after taking devlink lock (see kernel log below).
    
    To fix it, remove local state_lock from mlx5e_tx_timeout_work() before
    calling devlink_health_report() and take care to cancel the work before
    any call to close channels, which may free the SQs that should be
    handled by the work. Before cancel_work_sync(), use current_work() to
    check we are not calling it from within the work, as
    mlx5e_tx_timeout_work() itself may close the channels and reopen as part
    of recovery flow.
    
    While removing state_lock from mlx5e_tx_timeout_work() keep rtnl_lock to
    ensure no change in netdev->real_num_tx_queues, but use rtnl_trylock()
    and a flag to avoid deadlock by calling cancel_work_sync() before
    closing the channels while holding rtnl_lock too.
    
    Kernel log:
    ======================================================
    WARNING: possible circular locking dependency detected
    6.0.0-rc3_for_upstream_debug_2022_08_30_13_10 #1 Not tainted
    ------------------------------------------------------
    kworker/u16:2/65 is trying to acquire lock:
    ffff888122f6c2f8 (&devlink->lock_key#2){+.+.}-{3:3}, at: devlink_health_report+0x2f1/0x7e0
    
    but task is already holding lock:
    ffff888121d20be0 (&priv->state_lock){+.+.}-{3:3}, at: mlx5e_tx_timeout_work+0x70/0x280 [mlx5_core]
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (&priv->state_lock){+.+.}-{3:3}:
           __mutex_lock+0x12c/0x14b0
           mlx5e_rx_reporter_diagnose+0x71/0x700 [mlx5_core]
           devlink_nl_cmd_health_reporter_diagnose_doit+0x212/0xa50
           genl_family_rcv_msg_doit+0x1e9/0x2f0
           genl_rcv_msg+0x2e9/0x530
           netlink_rcv_skb+0x11d/0x340
           genl_rcv+0x24/0x40
           netlink_unicast+0x438/0x710
           netlink_sendmsg+0x788/0xc40
           sock_sendmsg+0xb0/0xe0
           __sys_sendto+0x1c1/0x290
           __x64_sys_sendto+0xdd/0x1b0
           do_syscall_64+0x3d/0x90
           entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    -> #0 (&devlink->lock_key#2){+.+.}-{3:3}:
           __lock_acquire+0x2c8a/0x6200
           lock_acquire+0x1c1/0x550
           __mutex_lock+0x12c/0x14b0
           devlink_health_report+0x2f1/0x7e0
           mlx5e_health_report+0xc9/0xd7 [mlx5_core]
           mlx5e_reporter_tx_timeout+0x2ab/0x3d0 [mlx5_core]
           mlx5e_tx_timeout_work+0x1c1/0x280 [mlx5_core]
           process_one_work+0x7c2/0x1340
           worker_thread+0x59d/0xec0
           kthread+0x28f/0x330
           ret_from_fork+0x1f/0x30
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&priv->state_lock);
                                   lock(&devlink->lock_key#2);
                                   lock(&priv->state_lock);
      lock(&devlink->lock_key#2);
    
     *** DEADLOCK ***
    
    4 locks held by kworker/u16:2/65:
     #0: ffff88811a55b138 ((wq_completion)mlx5e#2){+.+.}-{0:0}, at: process_one_work+0x6e2/0x1340
     #1: ffff888101de7db8 ((work_completion)(&priv->tx_timeout_work)){+.+.}-{0:0}, at: process_one_work+0x70f/0x1340
     #2: ffffffff84ce8328 (rtnl_mutex){+.+.}-{3:3}, at: mlx5e_tx_timeout_work+0x53/0x280 [mlx5_core]
     #3: ffff888121d20be0 (&priv->state_lock){+.+.}-{3:3}, at: mlx5e_tx_timeout_work+0x70/0x280 [mlx5_core]
    
    stack backtrace:
    CPU: 1 PID: 65 Comm: kworker/u16:2 Not tainted 6.0.0-rc3_for_upstream_debug_2022_08_30_13_10 #1
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    Workqueue: mlx5e mlx5e_tx_timeout_work [mlx5_core]
    Call Trace:
     <TASK>
     dump_stack_lvl+0x57/0x7d
     check_noncircular+0x278/0x300
     ? print_circular_bug+0x460/0x460
     ? find_held_lock+0x2d/0x110
     ? __stack_depot_save+0x24c/0x520
     ? alloc_chain_hlocks+0x228/0x700
     __lock_acquire+0x2c8a/0x6200
     ? register_lock_class+0x1860/0x1860
     ? kasan_save_stack+0x1e/0x40
     ? kasan_set_free_info+0x20/0x30
     ? ____kasan_slab_free+0x11d/0x1b0
     ? kfree+0x1ba/0x520
     ? devlink_health_do_dump.part.0+0x171/0x3a0
     ? devlink_health_report+0x3d5/0x7e0
     lock_acquire+0x1c1/0x550
     ? devlink_health_report+0x2f1/0x7e0
     ? lockdep_hardirqs_on_prepare+0x400/0x400
     ? find_held_lock+0x2d/0x110
     __mutex_lock+0x12c/0x14b0
     ? devlink_health_report+0x2f1/0x7e0
     ? devlink_health_report+0x2f1/0x7e0
     ? mutex_lock_io_nested+0x1320/0x1320
     ? trace_hardirqs_on+0x2d/0x100
     ? bit_wait_io_timeout+0x170/0x170
     ? devlink_health_do_dump.part.0+0x171/0x3a0
     ? kfree+0x1ba/0x520
     ? devlink_health_do_dump.part.0+0x171/0x3a0
     devlink_health_report+0x2f1/0x7e0
     mlx5e_health_report+0xc9/0xd7 [mlx5_core]
     mlx5e_reporter_tx_timeout+0x2ab/0x3d0 [mlx5_core]
     ? lockdep_hardirqs_on_prepare+0x400/0x400
     ? mlx5e_reporter_tx_err_cqe+0x1b0/0x1b0 [mlx5_core]
     ? mlx5e_tx_reporter_timeout_dump+0x70/0x70 [mlx5_core]
     ? mlx5e_tx_reporter_dump_sq+0x320/0x320 [mlx5_core]
     ? mlx5e_tx_timeout_work+0x70/0x280 [mlx5_core]
     ? mutex_lock_io_nested+0x1320/0x1320
     ? process_one_work+0x70f/0x1340
     ? lockdep_hardirqs_on_prepare+0x400/0x400
     ? lock_downgrade+0x6e0/0x6e0
     mlx5e_tx_timeout_work+0x1c1/0x280 [mlx5_core]
     process_one_work+0x7c2/0x1340
     ? lockdep_hardirqs_on_prepare+0x400/0x400
     ? pwq_dec_nr_in_flight+0x230/0x230
     ? rwlock_bug.part.0+0x90/0x90
     worker_thread+0x59d/0xec0
     ? process_one_work+0x1340/0x1340
     kthread+0x28f/0x330
     ? kthread_complete_and_exit+0x20/0x20
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: c90005b5f75c ("devlink: Hold the instance lock in health callbacks")
    Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e46db5e2a311ff4b28d8a4e0a3f23d9cdf3e78b
Author: Chris Mi <cmi@nvidia.com>
Date:   Mon Oct 30 15:44:47 2023 +0200

    net/mlx5e: Disable IPsec offload support if not FW steering
    
    [ Upstream commit 762a55a54eec4217e4cec9265ab6e5d4c11b61bd ]
    
    IPsec FDB offload can only work with FW steering as of now,
    disable the cap upon non FW steering.
    
    And since the IPSec cap is dynamic now based on steering mode.
    Cleanup the resources if they exist instead of checking the
    IPsec cap again.
    
    Fixes: edd8b295f9e2 ("Merge branch 'mlx5-ipsec-packet-offload-support-in-eswitch-mode'")
    Signed-off-by: Chris Mi <cmi@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdd350fe5e1a8a87b3bda46792a72980b93e72ab
Author: Patrisious Haddad <phaddad@nvidia.com>
Date:   Thu Sep 21 15:10:27 2023 +0300

    RDMA/mlx5: Send events from IB driver about device affiliation state
    
    [ Upstream commit 0d293714ac32650bfb669ceadf7cc2fad8161401 ]
    
    Send blocking events from IB driver whenever the device is done being
    affiliated or if it is removed from an affiliation.
    
    This is useful since now the EN driver can register to those event and
    know when a device is affiliated or not.
    
    Signed-off-by: Patrisious Haddad <phaddad@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Link: https://lore.kernel.org/r/a7491c3e483cfd8d962f5f75b9a25f253043384a.1695296682.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Stable-dep-of: 762a55a54eec ("net/mlx5e: Disable IPsec offload support if not FW steering")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a95f412b7ee000b279df4842ad227a6eadec89c
Author: Jianbo Liu <jianbol@nvidia.com>
Date:   Thu Oct 12 02:00:44 2023 +0000

    net/mlx5e: Check the number of elements before walk TC rhashtable
    
    [ Upstream commit 4e25b661f484df54b6751b65f9ea2434a3b67539 ]
    
    After IPSec TX tables are destroyed, the flow rules in TC rhashtable,
    which have the destination to IPSec, are restored to the original
    one, the uplink.
    
    However, when the device is in switchdev mode and unload driver with
    IPSec rules configured, TC rhashtable cleanup is done before IPSec
    cleanup, which means tc_ht->tbl is already freed when walking TC
    rhashtable, in order to restore the destination. So add the checking
    before walking to avoid unexpected behavior.
    
    Fixes: d1569537a837 ("net/mlx5e: Modify and restore TC rules for IPSec TX rules")
    Signed-off-by: Jianbo Liu <jianbol@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 594a306461de8617a4b497b88a0c7670c4d93f2e
Author: Jianbo Liu <jianbol@nvidia.com>
Date:   Wed Oct 11 03:38:29 2023 +0000

    net/mlx5e: Reduce eswitch mode_lock protection context
    
    [ Upstream commit baac8351f74c543896b8fd40138b7ad9365587a3 ]
    
    Currently eswitch mode_lock is so heavy, for example, it's locked
    during the whole process of the mode change, which may need to hold
    other locks. As the mode_lock is also used by IPSec to block mode and
    encap change now, it is easy to cause lock dependency.
    
    Since some of protections are also done by devlink lock, the eswitch
    mode_lock is not needed at those places, and thus the possibility of
    lockdep issue is reduced.
    
    Fixes: c8e350e62fc5 ("net/mlx5e: Make TC and IPsec offloads mutually exclusive on a netdev")
    Signed-off-by: Jianbo Liu <jianbol@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a0d0e97a750f883b0f4ae6938346092bc41fcdb
Author: Leon Romanovsky <leon@kernel.org>
Date:   Sun Nov 12 13:50:00 2023 +0200

    net/mlx5e: Tidy up IPsec NAT-T SA discovery
    
    [ Upstream commit c2bf84f1d1a1595dcc45fe867f0e02b331993fee ]
    
    IPsec NAT-T packets are UDP encapsulated packets over ESP normal ones.
    In case they arrive to RX, the SPI and ESP are located in inner header,
    while the check was performed on outer header instead.
    
    That wrong check caused to the situation where received rekeying request
    was missed and caused to rekey timeout, which "compensated" this failure
    by completing rekeying.
    
    Fixes: d65954934937 ("net/mlx5e: Support IPsec NAT-T functionality")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20af7afcd8b85a4cb413072d631bf9a6469eee3a
Author: Patrisious Haddad <phaddad@nvidia.com>
Date:   Thu Sep 21 14:06:18 2023 +0300

    net/mlx5e: Unify esw and normal IPsec status table creation/destruction
    
    [ Upstream commit 94af50c0a9bb961fe93cf0fdd14eb0883da86721 ]
    
    Change normal IPsec flow to use the same creation/destruction functions
    for status flow table as that of ESW, which first of all refines the
    code to have less code duplication.
    
    And more importantly, the ESW status table handles IPsec syndrome
    checks at steering by HW, which is more efficient than the previous
    behaviour we had where it was copied to WQE meta data and checked
    by the driver.
    
    Fixes: 1762f132d542 ("net/mlx5e: Support IPsec packet offload for RX in switchdev mode")
    Signed-off-by: Patrisious Haddad <phaddad@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80299a1c685fff46755f336faed4b7a29cbd44fb
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed Sep 20 10:07:13 2023 +0300

    net/mlx5e: Ensure that IPsec sequence packet number starts from 1
    
    [ Upstream commit 3d42c8cc67a8fcbff0181f9ed6d03d353edcee07 ]
    
    According to RFC4303, section "3.3.3. Sequence Number Generation",
    the first packet sent using a given SA will contain a sequence
    number of 1.
    
    However if user didn't set seq/oseq, the HW used zero as first sequence
    packet number. Such misconfiguration causes to drop of first packet
    if replay window protection was enabled in SA.
    
    To fix it, set sequence number to be at least 1.
    
    Fixes: 7db21ef4566e ("net/mlx5e: Set IPsec replay sequence numbers")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17e600e438c6b597ac1cf8c592b2ab53c680f6e4
Author: Leon Romanovsky <leon@kernel.org>
Date:   Sun Aug 20 20:58:56 2023 +0300

    net/mlx5e: Honor user choice of IPsec replay window size
    
    [ Upstream commit a5e400a985df8041ed4659ed1462aa9134318130 ]
    
    Users can configure IPsec replay window size, but mlx5 driver didn't
    honor their choice and set always 32bits. Fix assignment logic to
    configure right size from the beginning.
    
    Fixes: 7db21ef4566e ("net/mlx5e: Set IPsec replay sequence numbers")
    Reviewed-by: Patrisious Haddad <phaddad@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b89b7c7635705e0b1661e0a2a5965560ac37a0f2
Author: Mikhail Khvainitski <me@khvoinitsky.org>
Date:   Tue Dec 12 15:31:48 2023 +0200

    HID: lenovo: Restrict detection of patched firmware only to USB cptkbd
    
    [ Upstream commit 43527a0094c10dfbf0d5a2e7979395a38de3ff65 ]
    
    Commit 46a0a2c96f0f ("HID: lenovo: Detect quirk-free fw on cptkbd and
    stop applying workaround") introduced a regression for ThinkPad
    TrackPoint Keyboard II which has similar quirks to cptkbd (so it uses
    the same workarounds) but slightly different so that there are
    false-positives during detecting well-behaving firmware. This commit
    restricts detecting well-behaving firmware to the only model which
    known to have one and have stable enough quirks to not cause
    false-positives.
    
    Fixes: 46a0a2c96f0f ("HID: lenovo: Detect quirk-free fw on cptkbd and stop applying workaround")
    Link: https://lore.kernel.org/linux-input/ZXRiiPsBKNasioqH@jekhomev/
    Link: https://bbs.archlinux.org/viewtopic.php?pid=2135468#p2135468
    Signed-off-by: Mikhail Khvainitski <me@khvoinitsky.org>
    Tested-by: Yauhen Kharuzhy <jekhor@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8715fe2fc1e8b462b29381d342ab1ecd895d2637
Author: David Howells <dhowells@redhat.com>
Date:   Mon Dec 11 21:43:52 2023 +0000

    afs: Fix refcount underflow from error handling race
    
    [ Upstream commit 52bf9f6c09fca8c74388cd41cc24e5d1bff812a9 ]
    
    If an AFS cell that has an unreachable (eg. ENETUNREACH) server listed (VL
    server or fileserver), an asynchronous probe to one of its addresses may
    fail immediately because sendmsg() returns an error.  When this happens, a
    refcount underflow can happen if certain events hit a very small window.
    
    The way this occurs is:
    
     (1) There are two levels of "call" object, the afs_call and the
         rxrpc_call.  Each of them can be transitioned to a "completed" state
         in the event of success or failure.
    
     (2) Asynchronous afs_calls are self-referential whilst they are active to
         prevent them from evaporating when they're not being processed.  This
         reference is disposed of when the afs_call is completed.
    
         Note that an afs_call may only be completed once; once completed
         completing it again will do nothing.
    
     (3) When a call transmission is made, the app-side rxrpc code queues a Tx
         buffer for the rxrpc I/O thread to transmit.  The I/O thread invokes
         sendmsg() to transmit it - and in the case of failure, it transitions
         the rxrpc_call to the completed state.
    
     (4) When an rxrpc_call is completed, the app layer is notified.  In this
         case, the app is kafs and it schedules a work item to process events
         pertaining to an afs_call.
    
     (5) When the afs_call event processor is run, it goes down through the
         RPC-specific handler to afs_extract_data() to retrieve data from rxrpc
         - and, in this case, it picks up the error from the rxrpc_call and
         returns it.
    
         The error is then propagated to the afs_call and that is completed
         too.  At this point the self-reference is released.
    
     (6) If the rxrpc I/O thread manages to complete the rxrpc_call within the
         window between rxrpc_send_data() queuing the request packet and
         checking for call completion on the way out, then
         rxrpc_kernel_send_data() will return the error from sendmsg() to the
         app.
    
     (7) Then afs_make_call() will see an error and will jump to the error
         handling path which will attempt to clean up the afs_call.
    
     (8) The problem comes when the error handling path in afs_make_call()
         tries to unconditionally drop an async afs_call's self-reference.
         This self-reference, however, may already have been dropped by
         afs_extract_data() completing the afs_call
    
     (9) The refcount underflows when we return to afs_do_probe_vlserver() and
         that tries to drop its reference on the afs_call.
    
    Fix this by making afs_make_call() attempt to complete the afs_call rather
    than unconditionally putting it.  That way, if afs_extract_data() manages
    to complete the call first, afs_make_call() won't do anything.
    
    The bug can be forced by making do_udp_sendmsg() return -ENETUNREACH and
    sticking an msleep() in rxrpc_send_data() after the 'success:' label to
    widen the race window.
    
    The error message looks something like:
    
        refcount_t: underflow; use-after-free.
        WARNING: CPU: 3 PID: 720 at lib/refcount.c:28 refcount_warn_saturate+0xba/0x110
        ...
        RIP: 0010:refcount_warn_saturate+0xba/0x110
        ...
        afs_put_call+0x1dc/0x1f0 [kafs]
        afs_fs_get_capabilities+0x8b/0xe0 [kafs]
        afs_fs_probe_fileserver+0x188/0x1e0 [kafs]
        afs_lookup_server+0x3bf/0x3f0 [kafs]
        afs_alloc_server_list+0x130/0x2e0 [kafs]
        afs_create_volume+0x162/0x400 [kafs]
        afs_get_tree+0x266/0x410 [kafs]
        vfs_get_tree+0x25/0xc0
        fc_mount+0xe/0x40
        afs_d_automount+0x1b3/0x390 [kafs]
        __traverse_mounts+0x8f/0x210
        step_into+0x340/0x760
        path_openat+0x13a/0x1260
        do_filp_open+0xaf/0x160
        do_sys_openat2+0xaf/0x170
    
    or something like:
    
        refcount_t: underflow; use-after-free.
        ...
        RIP: 0010:refcount_warn_saturate+0x99/0xda
        ...
        afs_put_call+0x4a/0x175
        afs_send_vl_probes+0x108/0x172
        afs_select_vlserver+0xd6/0x311
        afs_do_cell_detect_alias+0x5e/0x1e9
        afs_cell_detect_alias+0x44/0x92
        afs_validate_fc+0x9d/0x134
        afs_get_tree+0x20/0x2e6
        vfs_get_tree+0x1d/0xc9
        fc_mount+0xe/0x33
        afs_d_automount+0x48/0x9d
        __traverse_mounts+0xe0/0x166
        step_into+0x140/0x274
        open_last_lookups+0x1c1/0x1df
        path_openat+0x138/0x1c3
        do_filp_open+0x55/0xb4
        do_sys_openat2+0x6c/0xb6
    
    Fixes: 34fa47612bfe ("afs: Fix race in async call refcounting")
    Reported-by: Bill MacAllister <bill@ca-zephyr.org>
    Closes: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1052304
    Suggested-by: Jeffrey E Altman <jaltman@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeffrey Altman <jaltman@auristor.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Link: https://lore.kernel.org/r/2633992.1702073229@warthog.procyon.org.uk/ # v1
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 800f84d8f0de521c5681c0c6df4284b004588202
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Dec 11 10:00:57 2023 +0100

    efi/x86: Avoid physical KASLR on older Dell systems
    
    [ Upstream commit 50d7cdf7a9b1ab6f4f74a69c84e974d5dc0c1bf1 ]
    
    River reports boot hangs with v6.6 and v6.7, and the bisect points to
    commit
    
      a1b87d54f4e4 ("x86/efistub: Avoid legacy decompressor when doing EFI boot")
    
    which moves the memory allocation and kernel decompression from the
    legacy decompressor (which executes *after* ExitBootServices()) to the
    EFI stub, using boot services for allocating the memory. The memory
    allocation succeeds but the subsequent call to decompress_kernel() never
    returns, resulting in a failed boot and a hanging system.
    
    As it turns out, this issue only occurs when physical address
    randomization (KASLR) is enabled, and given that this is a feature we
    can live without (virtual KASLR is much more important), let's disable
    the physical part of KASLR when booting on AMI UEFI firmware claiming to
    implement revision v2.0 of the specification (which was released in
    2006), as this is the version these systems advertise.
    
    Fixes: a1b87d54f4e4 ("x86/efistub: Avoid legacy decompressor when doing EFI boot")
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218173
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 809d50d36e71bbd56a2b253d94c991e82fe1d2dc
Author: Zizhi Wo <wozizhi@huawei.com>
Date:   Fri Dec 1 22:50:48 2023 +0800

    ksmbd: fix memory leak in smb2_lock()
    
    [ Upstream commit 8f1752723019db900fb60a5b9d0dfd3a2bdea36c ]
    
    In smb2_lock(), if setup_async_work() executes successfully,
    work->cancel_argv will bind the argv that generated by kmalloc(). And
    release_async_work() is called in ksmbd_conn_try_dequeue_request() or
    smb2_lock() to release argv.
    However, when setup_async_work function fails, work->cancel_argv has not
    been bound to the argv, resulting in the previously allocated argv not
    being released. Call kfree() to fix it.
    
    Fixes: e2f34481b24d ("cifsd: add server-side procedures for SMB3")
    Signed-off-by: Zizhi Wo <wozizhi@huawei.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73dddf9858ff68b6cb6bd3193b1c53b3331a8efb
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 30 10:56:53 2023 +0100

    ext4: fix warning in ext4_dio_write_end_io()
    
    [ Upstream commit 619f75dae2cf117b1d07f27b046b9ffb071c4685 ]
    
    The syzbot has reported that it can hit the warning in
    ext4_dio_write_end_io() because i_size < i_disksize. Indeed the
    reproducer creates a race between DIO IO completion and truncate
    expanding the file and thus ext4_dio_write_end_io() sees an inconsistent
    inode state where i_disksize is already updated but i_size is not
    updated yet. Since we are careful when setting up DIO write and consider
    it extending (and thus performing the IO synchronously with i_rwsem held
    exclusively) whenever it goes past either of i_size or i_disksize, we
    can use the same test during IO completion without risking entering
    ext4_handle_inode_extension() without i_rwsem held. This way we make it
    obvious both i_size and i_disksize are large enough when we report DIO
    completion without relying on unreliable WARN_ON.
    
    Reported-by:  <syzbot+47479b71cdfc78f56d30@syzkaller.appspotmail.com>
    Fixes: 91562895f803 ("ext4: properly sync file size update after O_SYNC direct IO")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20231130095653.22679-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da94fb0217e52ef10993135dd67263857b170b63
Author: Kelly Kane <kelly@hawknetworks.com>
Date:   Sat Dec 2 17:17:12 2023 -0800

    r8152: add vendor/device ID pair for ASUS USB-C2500
    
    [ Upstream commit 7037d95a047cd89b1f680eed253c6ab586bef1ed ]
    
    The ASUS USB-C2500 is an RTL8156 based 2.5G Ethernet controller.
    
    Add the vendor and product ID values to the driver. This makes Ethernet
    work with the adapter.
    
    Signed-off-by: Kelly Kane <kelly@hawknetworks.com>
    Link: https://lore.kernel.org/r/20231203011712.6314-1-kelly@hawknetworks.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4b582b9a9fdcbfea8f371110f352a0a8fbe2ef7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun May 1 17:00:38 2022 +0200

    Linux 4.19.241
    
    Link: https://lore.kernel.org/r/20220429104048.459089941@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 455431805699e91c2fd66b7fe43db27643d9b3fd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Apr 29 11:31:23 2022 +0200

    lightnvm: disable the subsystem
    
    In commit 9ea9b9c48387 ("remove the lightnvm subsystem") the lightnvm
    subsystem was removed as there is no hardware in the wild for it, and
    the code is known to have problems.  This should also be disabled for
    older LTS kernels as well to prevent anyone from accidentally using it.
    
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Matias Bjørling <mb@lightnvm.io>
    Cc: Javier González <javier@javigon.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1671aab6a47dead1e56a24bbaccbb8d4072c7765
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Apr 29 11:19:38 2022 +0200

    Revert "net: ethernet: stmmac: fix altr_tse_pcs function when using a fixed-link"
    
    This reverts commit e2423aa174e6c3e9805e96db778245ba73cdd88c which is
    commit a6aaa00324240967272b451bfa772547bd576ee6 upstream.
    
    Pavel reports that it causes boot issues, so revert it for now.
    
    Link: https://lore.kernel.org/r/20220429074341.GB1423@amd
    Reported-by: Pavel Machek <pavel@denx.de>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1231c925c8d5c2d711ef82a91823b3c6607807a0
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Tue Apr 26 23:26:24 2022 +0900

    ia64: kprobes: Fix to pass correct trampoline address to the handler
    
    commit a7fe2378454cf46cd5e2776d05e72bbe8f0a468c upstream.
    
    The following commit:
    
       Commit e792ff804f49 ("ia64: kprobes: Use generic kretprobe trampoline handler")
    
    Passed the wrong trampoline address to __kretprobe_trampoline_handler(): it
    passes the descriptor address instead of function entry address.
    
    Pass the right parameter.
    
    Also use correct symbol dereference function to get the function address
    from 'kretprobe_trampoline' - an IA64 special.
    
    Link: https://lkml.kernel.org/r/163163042696.489837.12551102356265354730.stgit@devnote2
    
    Fixes: e792ff804f49 ("ia64: kprobes: Use generic kretprobe trampoline handler")
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: X86 ML <x86@kernel.org>
    Cc: Daniel Xu <dxu@dxuuu.xyz>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Abhishek Sagar <sagar.abhishek@gmail.com>
    Cc: Andrii Nakryiko <andrii.nakryiko@gmail.com>
    Cc: Paul McKenney <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd0323180bbcb4a6f2ff178eec10dd92e1c57c8e
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Tue Apr 26 23:26:14 2022 +0900

    Revert "ia64: kprobes: Use generic kretprobe trampoline handler"
    
    This reverts commit d3380de483d55d904fb94a241406b34ed2fada7d.
    
    Since this commit is a part of generic kretprobe trampoline
    handler series, without the other patches in that series, this
    causes a build error on ia64.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 505545f740a60368fff2bee62fb20706730597fa
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Tue Apr 26 23:26:04 2022 +0900

    Revert "ia64: kprobes: Fix to pass correct trampoline address to the handler"
    
    This reverts commit f5f96e3643dc33d6117cf7047e73512046e4858b.
    
    The commit f5f96e3643dc ("ia64: kprobes: Fix to pass correct trampoline
    address to the handler") was wrongly backported. It involves another
    commit which is a part of another bigger series, so it should not be
    backported to the stable tree.
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf1b11ac0d180f495c23fe8e5a691d53a3c815f1
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Apr 28 22:41:50 2022 +1000

    powerpc/64s: Unmerge EX_LR and EX_DAR
    
    The SLB miss handler is not fully re-entrant, it is able to work because
    we ensure that the SLB entries for the kernel text and data segment, as
    well as the kernel stack are pinned in the SLB. Accesses to kernel data
    outside of those areas has to be carefully managed and can only occur in
    certain parts of the code. One way we deal with that is by storing some
    values in temporary slots in the paca.
    
    In v4.13 in commit dbeea1d6b4bd ("powerpc/64s/paca: EX_LR can be merged
    with EX_DAR") we merged the storage for two temporary slots for register
    storage during SLB miss handling. That was safe at the time because the
    two slots were never used at the same time.
    
    Unfortunately in v4.17 in commit c2b4d8b7417a ("powerpc/mm/hash64:
    Increase the VA range") we broke that condition, and introduced a case
    where the two slots could be in use at the same time, leading to one
    being corrupted.
    
    Specifically in slb_miss_common() when we detect that we're handling a
    fault for a large virtual address (> 512TB) we go to the "8" label,
    there we store the original fault address into paca->exslb[EX_DAR],
    before jumping to large_addr_slb() (using rfid).
    
    We then use the EXCEPTION_PROLOG_COMMON and RECONCILE_IRQ_STATE macros
    to do exception setup, before reloading the fault address from
    paca->exslb[EX_DAR] and storing it into pt_regs->dar (Data Address
    Register).
    
    However the code generated by those macros can cause a recursive SLB
    miss on a kernel address in three places.
    
    Firstly is the saving of the PPR (Program Priority Register), which
    happens on all CPUs since Power7, the PPR is saved to the thread struct
    which can be anywhere in memory. There is also the call to
    accumulate_stolen_time() if CONFIG_VIRT_CPU_ACCOUNTING_NATIVE=y and
    CONFIG_PPC_SPLPAR=y, and also the call to trace_hardirqs_off() if
    CONFIG_TRACE_IRQFLAGS=y. The latter two call into generic C code and can
    lead to accesses anywhere in memory.
    
    On modern 64-bit CPUs we have 1TB segments, so for any of those accesses
    to cause an SLB fault they must access memory more than 1TB away from
    the kernel text, data and kernel stack. That typically only happens on
    machines with more than 1TB of RAM. However it is possible on multi-node
    Power9 systems, because memory on the 2nd node begins at 32TB in the
    linear mapping.
    
    If we take a recursive SLB fault then we will corrupt the original fault
    address with the LR (Link Register) value, because the EX_DAR and EX_LR
    slots share storage. Subsequently we will think we're trying to fault
    that LR address, which is the wrong address, and will also mostly likely
    lead to a segfault because the LR address will be < 512TB and so will be
    rejected by slb_miss_large_addr().
    
    This appears as a spurious segfault to userspace, and if
    show_unhandled_signals is enabled you will see a fault reported in dmesg
    with the LR address, not the expected fault address, eg:
    
      prog[123]: segfault (11) at 128a61808 nip 128a618cc lr 128a61808 code 3 in prog[128a60000+10000]
      prog[123]: code: 4bffffa4 39200040 3ce00004 7d2903a6 3c000200 78e707c6 780083e4 7d3b4b78
      prog[123]: code: 7d455378 7d7d5b78 7d9f6378 7da46b78 <f8670000> 7d3a4b78 7d465378 7d7c5b78
    
    Notice that the fault address == the LR, and the faulting instruction is
    a simple store that should never use LR.
    
    In upstream this was fixed in v4.20 in commit
    48e7b7695745 ("powerpc/64s/hash: Convert SLB miss handlers to C"),
    however that is a huge rewrite and not backportable.
    
    The minimal fix for stable is to just unmerge the EX_LR and EX_DAR slots
    again, avoiding the corruption of the DAR value. This uses an extra 8
    bytes per CPU, which is negligble.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 972fb50cf06c0ab52c8e6e5ce42f4545fc8e7389
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Thu Apr 28 22:41:49 2022 +1000

    powerpc/64/interrupt: Temporarily save PPR on stack to fix register corruption due to SLB miss
    
    This is a minimal stable kernel fix for the problem solved by
    4c2de74cc869 ("powerpc/64: Interrupts save PPR on stack rather than
    thread_struct").
    
    Upstream kernels between 4.17-4.20 have this bug, so I propose this
    patch for 4.19 stable.
    
    Longer description from mpe:
    
    In commit f384796c4 ("powerpc/mm: Add support for handling > 512TB
    address in SLB miss") we added support for using multiple context ids
    per process. Previously accessing past the first context id was a fatal
    error for the process. With the new support it became non-fatal, and so
    the previous "bad_addr_slb" handler was changed to be the
    "large_addr_slb" handler.
    
    That handler uses the EXCEPTION_PROLOG_COMMON() macro, which in-turn
    calls the SAVE_PPR() macro. At the point where SAVE_PPR() is used, the
    r9-13 register values from the original user fault are saved in
    paca->exslb. It's not until later in EXCEPTION_PROLOG_COMMON_2() that
    they are saved from paca->exslb onto the kernel stack.
    
    The PPR is saved into current->thread.ppr, which is notably not on the
    kernel stack the way pt_regs are. This means we can take an SLB miss on
    current->thread.ppr. If that happens in the "large_addr_slb" case we
    will clobber the saved user r9-r13 in paca->exslb with kernel values.
    Later we will save those clobbered values into the pt_regs on the stack,
    and when we return to userspace those kernel values will be restored.
    
    Typically this appears as some sort of segfault in userspace, with an
    address that looks like a kernel address. In dmesg it can appear as:
    
      [19117.440331] some_program[1869625]: unhandled signal 11 at c00000000f6bda10 nip 00007fff780d559c lr 00007fff781ae56c code 30001
    
    The upstream fix for this issue was to move PPR into pt_regs, on the
    kernel stack, avoiding the possibility of an SLB fault when saving it.
    
    However changing the size of pt_regs is an intrusive change, and has
    side effects in other parts of the kernel. A minimal fix is to
    temporarily save the PPR in an unused part of pt_regs, then save the
    user register values from paca->exslb into pt_regs, and then move the
    saved PPR into thread.ppr.
    
    Fixes: f384796c40dc ("powerpc/mm: Add support for handling > 512TB address in SLB miss")
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220316033235.903657-1-npiggin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75b0cc7904da7b40c6e8f2cf3ec4223b292b1184
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 13 10:35:41 2022 -0700

    net/sched: cls_u32: fix netns refcount changes in u32_change()
    
    commit 3db09e762dc79584a69c10d74a6b98f89a9979f8 upstream.
    
    We are now able to detect extra put_net() at the moment
    they happen, instead of much later in correct code paths.
    
    u32_init_knode() / tcf_exts_init() populates the ->exts.net
    pointer, but as mentioned in tcf_exts_init(),
    the refcount on netns has not been elevated yet.
    
    The refcount is taken only once tcf_exts_get_net()
    is called.
    
    So the two u32_destroy_key() calls from u32_change()
    are attempting to release an invalid reference on the netns.
    
    syzbot report:
    
    refcount_t: decrement hit 0; leaking memory.
    WARNING: CPU: 0 PID: 21708 at lib/refcount.c:31 refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Modules linked in:
    CPU: 0 PID: 21708 Comm: syz-executor.5 Not tainted 5.18.0-rc2-next-20220412-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:refcount_warn_saturate+0xbf/0x1e0 lib/refcount.c:31
    Code: 1d 14 b6 b2 09 31 ff 89 de e8 6d e9 89 fd 84 db 75 e0 e8 84 e5 89 fd 48 c7 c7 40 aa 26 8a c6 05 f4 b5 b2 09 01 e8 e5 81 2e 05 <0f> 0b eb c4 e8 68 e5 89 fd 0f b6 1d e3 b5 b2 09 31 ff 89 de e8 38
    RSP: 0018:ffffc900051af1b0 EFLAGS: 00010286
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000040000 RSI: ffffffff8160a0c8 RDI: fffff52000a35e28
    RBP: 0000000000000004 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff81604a9e R11: 0000000000000000 R12: 1ffff92000a35e3b
    R13: 00000000ffffffef R14: ffff8880211a0194 R15: ffff8880577d0a00
    FS:  00007f25d183e700(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f19c859c028 CR3: 0000000051009000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     __refcount_dec include/linux/refcount.h:344 [inline]
     refcount_dec include/linux/refcount.h:359 [inline]
     ref_tracker_free+0x535/0x6b0 lib/ref_tracker.c:118
     netns_tracker_free include/net/net_namespace.h:327 [inline]
     put_net_track include/net/net_namespace.h:341 [inline]
     tcf_exts_put_net include/net/pkt_cls.h:255 [inline]
     u32_destroy_key.isra.0+0xa7/0x2b0 net/sched/cls_u32.c:394
     u32_change+0xe01/0x3140 net/sched/cls_u32.c:909
     tc_new_tfilter+0x98d/0x2200 net/sched/cls_api.c:2148
     rtnetlink_rcv_msg+0x80d/0xb80 net/core/rtnetlink.c:6016
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2495
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x543/0x7f0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x904/0xe00 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:705 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:725
     ____sys_sendmsg+0x6e2/0x800 net/socket.c:2413
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2467
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2496
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f25d0689049
    Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f25d183e168 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f25d079c030 RCX: 00007f25d0689049
    RDX: 0000000000000000 RSI: 0000000020000340 RDI: 0000000000000005
    RBP: 00007f25d06e308d R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007ffd0b752e3f R14: 00007f25d183e300 R15: 0000000000022000
     </TASK>
    
    Fixes: 35c55fc156d8 ("cls_u32: use tcf_exts_get_net() before call_rcu()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    [rkolchmeyer: Backported to 4.19: adjusted u32_destroy_key() signature]
    Signed-off-by: Robert Kolchmeyer <rkolchmeyer@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3befa9b67f2205f10c3b01cc687672e3969be569
Author: Lin Ma <linma@zju.edu.cn>
Date:   Thu Nov 11 22:14:02 2021 +0800

    hamradio: remove needs_free_netdev to avoid UAF
    
    commit 81b1d548d00bcd028303c4f3150fa753b9b8aa71 upstream.
    
    The former patch "defer 6pack kfree after unregister_netdev" reorders
    the kfree of two buffer after the unregister_netdev to prevent the race
    condition. It also adds free_netdev() function in sixpack_close(), which
    is a direct copy from the similar code in mkiss_close().
    
    However, in sixpack driver, the flag needs_free_netdev is set to true in
    sp_setup(), hence the unregister_netdev() will free the netdev
    automatically. Therefore, as the sp is netdev_priv, use-after-free
    occurs.
    
    This patch removes the needs_free_netdev = true and just let the
    free_netdev to finish this deallocation task.
    
    Fixes: 0b9111922b1f ("hamradio: defer 6pack kfree after unregister_netdev")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Link: https://lore.kernel.org/r/20211111141402.7551-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d2a1b180f0d5fdf0844cb4c740fafd67bebb9d2
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 8 18:37:59 2021 +0800

    hamradio: defer 6pack kfree after unregister_netdev
    
    commit 0b9111922b1f399aba6ed1e1b8f2079c3da1aed8 upstream.
    
    There is a possible race condition (use-after-free) like below
    
     (USE)                       |  (FREE)
      dev_queue_xmit             |
       __dev_queue_xmit          |
        __dev_xmit_skb           |
         sch_direct_xmit         | ...
          xmit_one               |
           netdev_start_xmit     | tty_ldisc_kill
            __netdev_start_xmit  |  6pack_close
             sp_xmit             |   kfree
              sp_encaps          |
                                 |
    
    According to the patch "defer ax25 kfree after unregister_netdev", this
    patch reorder the kfree after the unregister_netdev to avoid the possible
    UAF as the unregister_netdev() is well synchronized and won't return if
    there is a running routine.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e535976774504af36fab1dfb54f3d4d6cc577a9
Author: Willy Tarreau <w@1wt.eu>
Date:   Tue Apr 26 23:41:05 2022 +0300

    floppy: disable FDRAWCMD by default
    
    commit 233087ca063686964a53c829d547c7571e3f67bf upstream.
    
    Minh Yuan reported a concurrency use-after-free issue in the floppy code
    between raw_cmd_ioctl and seek_interrupt.
    
    [ It turns out this has been around, and that others have reported the
      KASAN splats over the years, but Minh Yuan had a reproducer for it and
      so gets primary credit for reporting it for this fix   - Linus ]
    
    The problem is, this driver tends to break very easily and nowadays,
    nobody is expected to use FDRAWCMD anyway since it was used to
    manipulate non-standard formats.  The risk of breaking the driver is
    higher than the risk presented by this race, and accessing the device
    requires privileges anyway.
    
    Let's just add a config option to completely disable this ioctl and
    leave it disabled by default.  Distros shouldn't use it, and only those
    running on antique hardware might need to enable it.
    
    Link: https://lore.kernel.org/all/000000000000b71cdd05d703f6bf@google.com/
    Link: https://lore.kernel.org/lkml/CAKcFiNC=MfYVW-Jt9A3=FPJpTwCD2PL_ULNCpsCVE5s8ZeBQgQ@mail.gmail.com
    Link: https://lore.kernel.org/all/CAEAjamu1FRhz6StCe_55XY5s389ZP_xmCF69k987En+1z53=eg@mail.gmail.com
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Reported-by: syzbot+8e8958586909d62b6840@syzkaller.appspotmail.com
    Reported-by: cruise k <cruise4k@gmail.com>
    Reported-by: Kyungtae Kim <kt0755@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linuxfoundation.org>
    Tested-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c335e76a28de3365b855a1428177baaac23b9f18
Author: Dafna Hirschfeld <dafna3@gmail.com>
Date:   Wed Mar 6 16:13:25 2019 -0500

    media: vicodec: upon release, call m2m release before freeing ctrl handler
    
    commit 4d10452cd1ed619d95fde81cef837069f4c754cd upstream.
    
    'v4l2_m2m_ctx_release' calls request complete
    so it should be called before 'v4l2_ctrl_handler_free'.
    
    Signed-off-by: Dafna Hirschfeld <dafna3@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Cc: Minh Yuan <yuanmingbuaa@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32c9cdbe383c153af23cfa1df0a352b97ab3df7a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Oct 25 12:03:17 2023 +0200

    Linux 6.1.60
    
    Link: https://lore.kernel.org/r/20231023104828.488041585@linuxfoundation.org
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Ricardo B. Marliere <ricardo@marliere.net>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f5bb254be8dca8432e558ad76e4cc657cd73e9b
Author: Matthieu Baerts <matttbe@kernel.org>
Date:   Wed Oct 18 11:23:56 2023 -0700

    selftests: mptcp: join: no RST when rm subflow/addr
    
    commit 2cfaa8b3b7aece3c7b13dd10db20dcea65875692 upstream.
    
    Recently, we noticed that some RST were wrongly generated when removing
    the initial subflow.
    
    This patch makes sure RST are not sent when removing any subflows or any
    addresses.
    
    Fixes: c2b2ae3925b6 ("mptcp: handle correctly disconnect() failures")
    Cc: stable@vger.kernel.org
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Matthieu Baerts <matttbe@kernel.org>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Link: https://lore.kernel.org/r/20231018-send-net-20231018-v1-5-17ecb002e41d@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matttbe@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e0123e0e53dd7628f57188a175d956680dbb7f5
Author: Matthieu Baerts <matttbe@kernel.org>
Date:   Wed Oct 18 11:23:52 2023 -0700

    selftests: mptcp: join: correctly check for no RST
    
    commit b134a5805455d1886662a6516c965cdb9df9fbcc upstream.
    
    The commit mentioned below was more tolerant with the number of RST seen
    during a test because in some uncontrollable situations, multiple RST
    can be generated.
    
    But it was not taking into account the case where no RST are expected:
    this validation was then no longer reporting issues for the 0 RST case
    because it is not possible to have less than 0 RST in the counter. This
    patch fixes the issue by adding a specific condition.
    
    Fixes: 6bf41020b72b ("selftests: mptcp: update and extend fastclose test-cases")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: Matthieu Baerts <matttbe@kernel.org>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Link: https://lore.kernel.org/r/20231018-send-net-20231018-v1-1-17ecb002e41d@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matttbe@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 300447c5722a675f2c1d9c3ddeb11a60c5b5fc4a
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Wed Oct 18 11:23:55 2023 -0700

    mptcp: avoid sending RST when closing the initial subflow
    
    commit 14c56686a64c65ba716ff48f1f4b19c85f4cb2a9 upstream.
    
    When closing the first subflow, the MPTCP protocol unconditionally
    calls tcp_disconnect(), which in turn generates a reset if the subflow
    is established.
    
    That is unexpected and different from what MPTCP does with MPJ
    subflows, where resets are generated only on FASTCLOSE and other edge
    scenarios.
    
    We can't reuse for the first subflow the same code in place for MPJ
    subflows, as MPTCP clean them up completely via a tcp_close() call,
    while must keep the first subflow socket alive for later re-usage, due
    to implementation constraints.
    
    This patch adds a new helper __mptcp_subflow_disconnect() that
    encapsulates, a logic similar to tcp_close, issuing a reset only when
    the MPTCP_CF_FASTCLOSE flag is set, and performing a clean shutdown
    otherwise.
    
    Fixes: c2b2ae3925b6 ("mptcp: handle correctly disconnect() failures")
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthieu Baerts <matttbe@kernel.org>
    Co-developed-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Link: https://lore.kernel.org/r/20231018-send-net-20231018-v1-4-17ecb002e41d@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Matthieu Baerts <matttbe@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c04f416730ac5086187d7df1c878d971ed2d1431
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Oct 11 09:31:44 2023 -0700

    Bluetooth: hci_sock: Correctly bounds check and pad HCI_MON_NEW_INDEX name
    
    commit cb3871b1cd135a6662b732fbc6b3db4afcdb4a64 upstream.
    
    The code pattern of memcpy(dst, src, strlen(src)) is almost always
    wrong. In this case it is wrong because it leaves memory uninitialized
    if it is less than sizeof(ni->name), and overflows ni->name when longer.
    
    Normally strtomem_pad() could be used here, but since ni->name is a
    trailing array in struct hci_mon_new_index, compilers that don't support
    -fstrict-flex-arrays=3 can't tell how large this array is via
    __builtin_object_size(). Instead, open-code the helper and use sizeof()
    since it will work correctly.
    
    Additionally mark ni->name as __nonstring since it appears to not be a
    %NUL terminated C string.
    
    Cc: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Edward AD <twuufnxlz@gmail.com>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: Johan Hedberg <johan.hedberg@gmail.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: linux-bluetooth@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Fixes: 18f547f3fc07 ("Bluetooth: hci_sock: fix slab oob read in create_monitor_event")
    Link: https://lore.kernel.org/lkml/202310110908.F2639D3276@keescook/
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a429d65428d5e253782ad8371e2d03542c2b85f2
Author: Edward AD <twuufnxlz@gmail.com>
Date:   Tue Oct 10 13:36:57 2023 +0800

    Bluetooth: hci_sock: fix slab oob read in create_monitor_event
    
    commit 18f547f3fc074500ab5d419cf482240324e73a7e upstream.
    
    When accessing hdev->name, the actual string length should prevail
    
    Reported-by: syzbot+c90849c50ed209d77689@syzkaller.appspotmail.com
    Fixes: dcda165706b9 ("Bluetooth: hci_core: Fix build warnings")
    Signed-off-by: Edward AD <twuufnxlz@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46de539282f278cae142d38ae32aed3e20f07a09
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Oct 17 18:38:16 2023 -0700

    net: move altnames together with the netdevice
    
    commit 8e15aee621618a3ee3abecaf1fd8c1428098b7ef upstream.
    
    The altname nodes are currently not moved to the new netns
    when netdevice itself moves:
    
      [ ~]# ip netns add test
      [ ~]# ip -netns test link add name eth0 type dummy
      [ ~]# ip -netns test link property add dev eth0 altname some-name
      [ ~]# ip -netns test link show dev some-name
      2: eth0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
          link/ether 1e:67:ed:19:3d:24 brd ff:ff:ff:ff:ff:ff
          altname some-name
      [ ~]# ip -netns test link set dev eth0 netns 1
      [ ~]# ip link
      ...
      3: eth0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
          link/ether 02:40:88:62:ec:b8 brd ff:ff:ff:ff:ff:ff
          altname some-name
      [ ~]# ip li show dev some-name
      Device "some-name" does not exist.
    
    Remove them from the hash table when device is unlisted
    and add back when listed again.
    
    Fixes: 36fbf1e52bd3 ("net: rtnetlink: add linkprop commands to add and delete alternative ifnames")
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1d531aa095bad92877d3cb4d3416a313f03a497
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Sep 13 09:04:29 2023 +0300

    phy: mapphone-mdm6600: Fix pinctrl_pm handling for sleep pins
    
    [ Upstream commit 3b384cc74b00b5ac21d18e4c1efc3c1da5300971 ]
    
    Looks like the driver sleep pins configuration is unusable. Adding the
    sleep pins causes the usb phy to not respond. We need to use the default
    pins in probe, and only set sleep pins at phy_mdm6600_device_power_off().
    
    As the modem can also be booted to a serial port mode for firmware
    flashing, let's make the pin changes limited to probe and remove. For
    probe, we get the default pins automatically. We only need to set the
    sleep pins in phy_mdm6600_device_power_off() to prevent the modem from
    waking up because the gpio line glitches.
    
    If it turns out that we need a separate state for phy_mdm6600_power_on()
    and phy_mdm6600_power_off(), we can use the pinctrl idle state.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Fixes: 2ad2af081622 ("phy: mapphone-mdm6600: Improve phy related runtime PM calls")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Link: https://lore.kernel.org/r/20230913060433.48373-3-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13a45130bb17f0c7b4e23becf8162e4d05ae8596
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Sep 13 09:04:28 2023 +0300

    phy: mapphone-mdm6600: Fix runtime PM for remove
    
    [ Upstream commit b99e0ba9633af51638e5ee1668da2e33620c134f ]
    
    Otherwise we will get an underflow on remove.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Fixes: f7f50b2a7b05 ("phy: mapphone-mdm6600: Add runtime PM support for n_gsm on USB suspend")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Link: https://lore.kernel.org/r/20230913060433.48373-2-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fcce3258b6ec11e345377d6b4e5f3baae0dfa12
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Sep 13 09:04:27 2023 +0300

    phy: mapphone-mdm6600: Fix runtime disable on probe
    
    [ Upstream commit 719606154c7033c068a5d4c1dc5f9163b814b3c8 ]
    
    Commit d644e0d79829 ("phy: mapphone-mdm6600: Fix PM error handling in
    phy_mdm6600_probe") caused a regression where we now unconditionally
    disable runtime PM at the end of the probe while it is only needed on
    errors.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Miaoqian Lin <linmq006@gmail.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Fixes: d644e0d79829 ("phy: mapphone-mdm6600: Fix PM error handling in phy_mdm6600_probe")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230913060433.48373-1-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4eac2cf444afc2d3cf936a7f9d19ae9ee90f78d1
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Tue Oct 17 18:42:36 2023 +0800

    gpio: vf610: mask the gpio irq in system suspend and support wakeup
    
    [ Upstream commit 430232619791e7de95191f2cd8ebaa4c380d17d0 ]
    
    Add flag IRQCHIP_MASK_ON_SUSPEND to make sure gpio irq is masked on
    suspend, if lack this flag, current irq arctitecture will not mask
    the irq, and these unmasked gpio irq will wrongly wakeup the system
    even they are not config as wakeup source.
    
    Also add flag IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND to make sure the gpio
    irq which is configed as wakeup source can work as expect.
    
    Fixes: 7f2691a19627 ("gpio: vf610: add gpiolib/IRQ chip driver for Vybrid")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b0f8a9dfdac3988384ba0fc2178eb6e12da574f
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Wed Feb 15 10:52:49 2023 +0100

    gpio: vf610: make irq_chip immutable
    
    [ Upstream commit e6ef4f8ede09f4af7cde000717b349b50bc62576 ]
    
    Since recently, the kernel is nagging about mutable irq_chips:
    
        "not an immutable chip, please consider fixing it!"
    
    Drop the unneeded copy, flag it as IRQCHIP_IMMUTABLE, add the new
    helper functions and call the appropriate gpiolib functions.
    
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Stable-dep-of: 430232619791 ("gpio: vf610: mask the gpio irq in system suspend and support wakeup")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f38ead73f25a889b15fca0ae78b8712dab77692
Author: Francis Laniel <flaniel@linux.microsoft.com>
Date:   Fri Oct 20 13:42:49 2023 +0300

    tracing/kprobes: Return EADDRNOTAVAIL when func matches several symbols
    
    [ Upstream commit b022f0c7e404887a7c5229788fc99eff9f9a80d5 ]
    
    When a kprobe is attached to a function that's name is not unique (is
    static and shares the name with other functions in the kernel), the
    kprobe is attached to the first function it finds. This is a bug as the
    function that it is attaching to is not necessarily the one that the
    user wants to attach to.
    
    Instead of blindly picking a function to attach to what is ambiguous,
    error with EADDRNOTAVAIL to let the user know that this function is not
    unique, and that the user must use another unique function with an
    address offset to get to the function they want to attach to.
    
    Link: https://lore.kernel.org/all/20231020104250.9537-2-flaniel@linux.microsoft.com/
    
    Cc: stable@vger.kernel.org
    Fixes: 413d37d1eb69 ("tracing: Add kprobe-based event tracer")
    Suggested-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Francis Laniel <flaniel@linux.microsoft.com>
    Link: https://lore.kernel.org/lkml/20230819101105.b0c104ae4494a7d1f2eea742@kernel.org/
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9b4b7256736e92bb0f66be0594a021a8b98c861
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Wed Nov 2 16:49:17 2022 +0800

    kallsyms: Add helper kallsyms_on_each_match_symbol()
    
    [ Upstream commit 4dc533e0f2c04174e1ae4aa98e7cffc1c04b9998 ]
    
    Function kallsyms_on_each_symbol() traverses all symbols and submits each
    symbol to the hook 'fn' for judgment and processing. For some cases, the
    hook actually only handles the matched symbol, such as livepatch.
    
    Because all symbols are currently sorted by name, all the symbols with the
    same name are clustered together. Function kallsyms_lookup_names() gets
    the start and end positions of the set corresponding to the specified
    name. So we can easily and quickly traverse all the matches.
    
    The test results are as follows (twice): (x86)
    kallsyms_on_each_match_symbol:     7454,     7984
    kallsyms_on_each_symbol      : 11733809, 11785803
    
    kallsyms_on_each_match_symbol() consumes only 0.066% of
    kallsyms_on_each_symbol()'s time. In other words, 1523x better
    performance.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Stable-dep-of: b022f0c7e404 ("tracing/kprobes: Return EADDRNOTAVAIL when func matches several symbols")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da359f699f5942ca383f528d144fc17c7c95e78a
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Wed Nov 2 16:49:16 2022 +0800

    kallsyms: Reduce the memory occupied by kallsyms_seqs_of_names[]
    
    [ Upstream commit 19bd8981dc2ee35fdc81ab1b0104b607c917d470 ]
    
    kallsyms_seqs_of_names[] records the symbol index sorted by address, the
    maximum value in kallsyms_seqs_of_names[] is the number of symbols. And
    2^24 = 16777216, which means that three bytes are enough to store the
    index. This can help us save (1 * kallsyms_num_syms) bytes of memory.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Stable-dep-of: b022f0c7e404 ("tracing/kprobes: Return EADDRNOTAVAIL when func matches several symbols")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3918cada8f1b247ad11a41872584232361e1d140
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed May 17 22:20:07 2023 +0200

    serial: 8250: omap: convert to modern PM ops
    
    commit ae62c49c0ceff20dc7c1fad4a5b8f91d64b4f628 upstream.
    
    The new uart_write() function is only called from suspend/resume code, causing
    a build warning when those are left out:
    
    drivers/tty/serial/8250/8250_omap.c:169:13: error: 'uart_write' defined but not used [-Werror=unused-function]
    
    Remove the #ifdefs and use the modern pm_ops/pm_sleep_ops and their wrappers
    to let the compiler see where it's used but still drop the dead code.
    
    Fixes: 398cecc24846 ("serial: 8250: omap: Fix imprecise external abort for omap_8250_pm()")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230517202012.634386-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70a841eb4f998a5d2a9b251895503ff0e11075cc
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Mon May 15 08:57:06 2023 +0200

    serial: 8250: omap: Move uart_write() inside PM section
    
    commit c53aab20762255ee03e65dd66b3cba3887ad39d1 upstream.
    
    If CONFIG_PM is not set (e.g. m68k/allmodconfig):
    
        drivers/tty/serial/8250/8250_omap.c:169:13: error: ‘uart_write’ defined but not used [-Werror=unused-function]
          169 | static void uart_write(struct omap8250_priv *priv, u32 reg, u32 val)
              |             ^~~~~~~~~~
    
    Fix tis by moving uart_write() inside the existing section protected
    by #ifdef CONFIG_PM.
    
    Reported-by: noreply@ellerman.id.au
    Link: http://kisskb.ellerman.id.au/kisskb/buildresult/14925095/
    Fixes: 398cecc24846e867 ("serial: 8250: omap: Fix imprecise external abort for omap_8250_pm()")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230515065706.1723477-1-geert@linux-m68k.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6df4c9dee0111c0667c706f5c62e46267ee0a4af
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Mon Oct 2 16:54:06 2023 -0700

    drm/bridge: ti-sn65dsi86: Associate DSI device lifetime with auxiliary device
    
    [ Upstream commit 7b821db95140e2c118567aee22a78bf85f3617e0 ]
    
    The kernel produces a warning splat and the DSI device fails to register
    in this driver if the i2c driver probes, populates child auxiliary
    devices, and then somewhere in ti_sn_bridge_probe() a function call
    returns -EPROBE_DEFER. When the auxiliary driver probe defers, the dsi
    device created by devm_mipi_dsi_device_register_full() is left
    registered because the devm managed device used to manage the lifetime
    of the DSI device is the parent i2c device, not the auxiliary device
    that is being probed.
    
    Associate the DSI device created and managed by this driver to the
    lifetime of the auxiliary device, not the i2c device, so that the DSI
    device is removed when the auxiliary driver unbinds. Similarly change
    the device pointer used for dev_err_probe() so the deferred probe errors
    are associated with the auxiliary device instead of the parent i2c
    device so we can narrow down future problems faster.
    
    Cc: Douglas Anderson <dianders@chromium.org>
    Cc: Maxime Ripard <maxime@cerno.tech>
    Fixes: c3b75d4734cb ("drm/bridge: sn65dsi86: Register and attach our DSI device at probe")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231002235407.769399-1-swboyd@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d57f6ac641c1875146e0f1601a0ee46fc0e71f7
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Thu Oct 5 17:00:24 2023 +0300

    ASoC: pxa: fix a memory leak in probe()
    
    [ Upstream commit aa6464edbd51af4a2f8db43df866a7642b244b5f ]
    
    Free the "priv" pointer before returning the error code.
    
    Fixes: 90eb6b59d311 ("ASoC: pxa-ssp: add support for an external clock in devicetree")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/84ac2313-1420-471a-b2cb-3269a2e12a7c@moroto.mountain
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14a1a7beb3d3e60c3571b9b18d84b1374e36d3a4
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Oct 18 11:00:17 2023 +0200

    gpio: vf610: set value before the direction to avoid a glitch
    
    commit fc363413ef8ea842ae7a99e3caf5465dafdd3a49 upstream.
    
    We found a glitch when configuring the pad as output high. To avoid this
    glitch, move the data value setting before direction config in the
    function vf610_gpio_direction_output().
    
    Fixes: 659d8a62311f ("gpio: vf610: add imx7ulp support")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    [Bartosz: tweak the commit message]
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ec224d98070dc162d528d199899165ea8c87300
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Oct 17 11:07:25 2023 +0200

    platform/x86: asus-wmi: Map 0x2a code, Ignore 0x2b and 0x2c events
    
    commit 235985d1763f7aba92c1c64e5f5aaec26c2c9b18 upstream.
    
    Newer Asus laptops send the following new WMI event codes when some
    of the F1 - F12 "media" hotkeys are pressed:
    
    0x2a Screen Capture
    0x2b PrintScreen
    0x2c CapsLock
    
    Map 0x2a to KEY_SELECTIVE_SCREENSHOT mirroring how similar hotkeys
    are mapped on other laptops.
    
    PrintScreem and CapsLock are also reported as normal PS/2 keyboard events,
    map these event codes to KE_IGNORE to avoid "Unknown key code 0x%x\n" log
    messages.
    
    Reported-by: James John <me@donjajo.com>
    Closes: https://lore.kernel.org/platform-driver-x86/a2c441fe-457e-44cf-a146-0ecd86b037cf@donjajo.com/
    Closes: https://bbs.archlinux.org/viewtopic.php?pid=2123716
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231017090725.38163-4-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baf191abecf7711b64007050b870bf7827666928
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Oct 17 11:07:24 2023 +0200

    platform/x86: asus-wmi: Only map brightness codes when using asus-wmi backlight control
    
    commit a5b92be2482e5f9ef30be4e4cda12ed484381493 upstream.
    
    Older Asus laptops change the backlight level themselves and then send
    WMI events with different codes for different backlight levels.
    
    The asus-wmi.c code maps the entire range of codes reported on
    brightness down keypresses to an internal ASUS_WMI_BRN_DOWN code:
    
    define NOTIFY_BRNUP_MIN                0x11
    define NOTIFY_BRNUP_MAX                0x1f
    define NOTIFY_BRNDOWN_MIN              0x20
    define NOTIFY_BRNDOWN_MAX              0x2e
    
            if (code >= NOTIFY_BRNUP_MIN && code <= NOTIFY_BRNUP_MAX)
                    code = ASUS_WMI_BRN_UP;
            else if (code >= NOTIFY_BRNDOWN_MIN && code <= NOTIFY_BRNDOWN_MAX)
                    code = ASUS_WMI_BRN_DOWN;
    
    This mapping is causing issues on new laptop models which actually
    send 0x2b events for printscreen presses and 0x2c events for
    capslock presses, which get translated into spurious brightness-down
    presses.
    
    This mapping is really only necessary when asus-wmi has registered
    a backlight-device for backlight control. In this case the mapping
    was used to decide to filter out the keypresss since in this case
    the firmware has already modified the brightness itself and instead
    of reporting a keypress asus-wmi will just report the new brightness
    value to userspace.
    
    OTOH when the firmware does not adjust the brightness itself then
    it seems to always report 0x2e for brightness-down presses and
    0x2f for brightness up presses independent of the actual brightness
    level. So in this case the mapping of the code is not necessary
    and this translation actually leads to spurious brightness-down
    presses being send to userspace when pressing printscreen or capslock.
    
    Modify asus_wmi_handle_event_code() to only do the mapping
    when using asus-wmi backlight control to fix the spurious
    brightness-down presses.
    
    Reported-by: James John <me@donjajo.com>
    Closes: https://lore.kernel.org/platform-driver-x86/a2c441fe-457e-44cf-a146-0ecd86b037cf@donjajo.com/
    Closes: https://bbs.archlinux.org/viewtopic.php?pid=2123716
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231017090725.38163-3-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4186c79c130df1b90804eb0c2efc748650a79ea1
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Oct 17 11:07:23 2023 +0200

    platform/x86: asus-wmi: Change ASUS_WMI_BRN_DOWN code from 0x20 to 0x2e
    
    commit f37cc2fc277b371fc491890afb7d8a26e36bb3a1 upstream.
    
    Older Asus laptops change the backlight level themselves and then send
    WMI events with different codes for different backlight levels.
    
    The asus-wmi.c code maps the entire range of codes reported on
    brightness down keypresses to an internal ASUS_WMI_BRN_DOWN code:
    
    define NOTIFY_BRNUP_MIN                0x11
    define NOTIFY_BRNUP_MAX                0x1f
    define NOTIFY_BRNDOWN_MIN              0x20
    define NOTIFY_BRNDOWN_MAX              0x2e
    
            if (code >= NOTIFY_BRNUP_MIN && code <= NOTIFY_BRNUP_MAX)
                    code = ASUS_WMI_BRN_UP;
            else if (code >= NOTIFY_BRNDOWN_MIN && code <= NOTIFY_BRNDOWN_MAX)
                    code = ASUS_WMI_BRN_DOWN;
    
    Before this commit all the NOTIFY_BRNDOWN_MIN - NOTIFY_BRNDOWN_MAX
    aka 0x20 - 0x2e events were mapped to 0x20.
    
    This mapping is causing issues on new laptop models which actually
    send 0x2b events for printscreen presses and 0x2c events for
    capslock presses, which get translated into spurious brightness-down
    presses.
    
    The plan is disable the 0x11-0x2e special mapping on laptops
    where asus-wmi does not register a backlight-device to avoid
    the spurious brightness-down keypresses. New laptops always send
    0x2e for brightness-down presses, change the special internal
    ASUS_WMI_BRN_DOWN value from 0x20 to 0x2e to match this in
    preparation for fixing the spurious brightness-down presses.
    
    This change does not have any functional impact since all
    of 0x20 - 0x2e is mapped to ASUS_WMI_BRN_DOWN first and only
    then checked against the keymap code and the new 0x2e
    value is still in the 0x20 - 0x2e range.
    
    Reported-by: James John <me@donjajo.com>
    Closes: https://lore.kernel.org/platform-driver-x86/a2c441fe-457e-44cf-a146-0ecd86b037cf@donjajo.com/
    Closes: https://bbs.archlinux.org/viewtopic.php?pid=2123716
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231017090725.38163-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52d54f1d4e032204f2bf53fb04afb89d7f7ab6e5
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Wed Oct 4 11:19:15 2023 -0700

    platform/x86: intel-uncore-freq: Conditionally create attribute for read frequency
    
    commit 4d73c6772ab771cbbe7e46a73e7c78ba490350fa upstream.
    
    When the current uncore frequency can't be read, don't create attribute
    "current_freq_khz" as any read will fail later. Some user space
    applications like turbostat fail to continue with the failure. So, check
    error during attribute creation.
    
    Fixes: 414eef27283a ("platform/x86/intel/uncore-freq: Display uncore current frequency")
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20231004181915.1887913-1-srinivas.pandruvada@linux.intel.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a4b575d00ef9051bf66ca3a564b86cd776e0595
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Sun Oct 15 01:54:49 2023 +0200

    platform/surface: platform_profile: Propagate error if profile registration fails
    
    commit fe0e04cf66a12ffe6d1b43725ddaabd5599d024f upstream.
    
    If platform_profile_register() fails, the driver does not propagate
    the error, but instead probes successfully. This means when the driver
    unbinds, the a warning might be issued by platform_profile_remove().
    
    Fix this by propagating the error back to the caller of
    surface_platform_profile_probe().
    
    Compile-tested only.
    
    Fixes: b78b4982d763 ("platform/surface: Add platform profile driver")
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Reviewed-by: Maximilian Luz <luzmaximilian@gmail.com>
    Tested-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20231014235449.288702-1-W_Armin@gmx.de
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fec769b9fd25cc8a4df96ebbdb251262fe51cca3
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Sep 21 15:14:12 2023 +0800

    s390/cio: fix a memleak in css_alloc_subchannel
    
    commit 63e8b94ad1840f02462633abdb363397f56bc642 upstream.
    
    When dma_set_coherent_mask() fails, sch->lock has not been
    freed, which is allocated in css_sch_create_locks(), leading
    to a memleak.
    
    Fixes: 4520a91a976e ("s390/cio: use dma helpers for setting masks")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Message-Id: <20230921071412.13806-1-dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/linux-s390/bd38baa8-7b9d-4d89-9422-7e943d626d6e@linux.ibm.com/
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7241c2627c14002acb2f95388b29a79c1265e075
Author: Francis Laniel <flaniel@linux.microsoft.com>
Date:   Fri Oct 20 13:42:50 2023 +0300

    selftests/ftrace: Add new test case which checks non unique symbol
    
    commit 03b80ff8023adae6780e491f66e932df8165e3a0 upstream.
    
    If name_show() is non unique, this test will try to install a kprobe on this
    function which should fail returning EADDRNOTAVAIL.
    On kernel where name_show() is not unique, this test is skipped.
    
    Link: https://lore.kernel.org/all/20231020104250.9537-3-flaniel@linux.microsoft.com/
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Francis Laniel <flaniel@linux.microsoft.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 324c31b0e0d72635dd8e3e0598ff6fac9f3f35c1
Author: Niklas Schnelle <schnelle@linux.ibm.com>
Date:   Tue Oct 17 15:37:29 2023 +0200

    s390/pci: fix iommu bitmap allocation
    
    commit c1ae1c59c8c6e0b66a718308c623e0cb394dab6b upstream.
    
    Since the fixed commits both zdev->iommu_bitmap and zdev->lazy_bitmap
    are allocated as vzalloc(zdev->iommu_pages / 8). The problem is that
    zdev->iommu_bitmap is a pointer to unsigned long but the above only
    yields an allocation that is a multiple of sizeof(unsigned long) which
    is 8 on s390x if the number of IOMMU pages is a multiple of 64.
    This in turn is the case only if the effective IOMMU aperture is
    a multiple of 64 * 4K = 256K. This is usually the case and so didn't
    cause visible issues since both the virt_to_phys(high_memory) reduced
    limit and hardware limits use nice numbers.
    
    Under KVM, and in particular with QEMU limiting the IOMMU aperture to
    the vfio DMA limit (default 65535), it is possible for the reported
    aperture not to be a multiple of 256K however. In this case we end up
    with an iommu_bitmap whose allocation is not a multiple of
    8 causing bitmap operations to access it out of bounds.
    
    Sadly we can't just fix this in the obvious way and use bitmap_zalloc()
    because for large RAM systems (tested on 8 TiB) the zdev->iommu_bitmap
    grows too large for kmalloc(). So add our own bitmap_vzalloc() wrapper.
    This might be a candidate for common code, but this area of code will
    be replaced by the upcoming conversion to use the common code DMA API on
    s390 so just add a local routine.
    
    Fixes: 224593215525 ("s390/pci: use virtual memory for iommu bitmap")
    Fixes: 13954fd6913a ("s390/pci_dma: improve lazy flush for unmap")
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthew Rosato <mjrosato@linux.ibm.com>
    Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6952655a61264900ed08e9d642adad8222f8e29
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Oct 18 13:56:54 2023 +0200

    perf: Disallow mis-matched inherited group reads
    
    commit 32671e3799ca2e4590773fd0e63aaa4229e50c06 upstream.
    
    Because group consistency is non-atomic between parent (filedesc) and children
    (inherited) events, it is possible for PERF_FORMAT_GROUP read() to try and sum
    non-matching counter groups -- with non-sensical results.
    
    Add group_generation to distinguish the case where a parent group removes and
    adds an event and thus has the same number, but a different configuration of
    events as inherited groups.
    
    This became a problem when commit fa8c269353d5 ("perf/core: Invert
    perf_read_group() loops") flipped the order of child_list and sibling_list.
    Previously it would iterate the group (sibling_list) first, and for each
    sibling traverse the child_list. In this order, only the group composition of
    the parent is relevant. By flipping the order the group composition of the
    child (inherited) events becomes an issue and the mis-match in group
    composition becomes evident.
    
    That said; even prior to this commit, while reading of a group that is not
    equally inherited was not broken, it still made no sense.
    
    (Ab)use ECHILD as error return to indicate issues with child process group
    composition.
    
    Fixes: fa8c269353d5 ("perf/core: Invert perf_read_group() loops")
    Reported-by: Budimir Markovic <markovicbudimir@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20231018115654.GK33217@noisy.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 908c62800584a69a474b80a308bd771cc7762fb2
Author: Puliang Lu <puliang.lu@fibocom.com>
Date:   Mon Oct 16 15:36:16 2023 +0800

    USB: serial: option: add Fibocom to DELL custom modem FM101R-GL
    
    commit 52480e1f1a259c93d749ba3961af0bffedfe7a7a upstream.
    
    Update the USB serial option driver support for the Fibocom
    FM101R-GL LTE modules as there are actually several different variants.
    
    - VID:PID 413C:8213, FM101R-GL are laptop M.2 cards (with
      MBIM interfaces for Linux)
    
    - VID:PID 413C:8215, FM101R-GL ESIM are laptop M.2 cards (with
      MBIM interface for Linux)
    
    0x8213: mbim, tty
    0x8215: mbim, tty
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=8213 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=a3b7cbf0
    C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  3 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=8215 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=a3b7cbf0
    C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Signed-off-by: Puliang Lu <puliang.lu@fibocom.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acced163ab6a9c959f0ed8d37ed8d818d32464f1
Author: Benoît Monin <benoit.monin@gmx.fr>
Date:   Mon Oct 2 17:51:40 2023 +0200

    USB: serial: option: add entry for Sierra EM9191 with new firmware
    
    commit 064f6e2ba9eb59b2c87b866e1e968e79ccedf9dd upstream.
    
    Following a firmware update of the modem, the interface for the AT
    command port changed, so add it back.
    
    T:  Bus=08 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=1199 ProdID=90d3 Rev=00.06
    S:  Manufacturer=Sierra Wireless, Incorporated
    S:  Product=Sierra Wireless EM9191
    S:  SerialNumber=xxxxxxxxxxxxxxxx
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    Signed-off-by: Benoît Monin <benoit.monin@gmx.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dce40c9e6d84bc974801d1ad0cafed16cfd6758
Author: Fabio Porcedda <fabio.porcedda@gmail.com>
Date:   Tue Sep 5 09:37:24 2023 +0200

    USB: serial: option: add Telit LE910C4-WWX 0x1035 composition
    
    commit 6a7be48e9bd18d309ba25c223a27790ad1bf0fa3 upstream.
    
    Add support for the following Telit LE910C4-WWX composition:
    
    0x1035: TTY, TTY, ECM
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  5 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=1bc7 ProdID=1035 Rev=00.00
    S:  Manufacturer=Telit
    S:  Product=LE910C4-WWX
    S:  SerialNumber=e1b117c7
    C:  #Ifs= 4 Cfg#= 1 Atr=e0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=fe Prot=ff Driver=option
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 2 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=85(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    I:  If#= 3 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Fabio Porcedda <fabio.porcedda@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Daniele Palmas <dnlplm@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59aa39697fc2bd05f53e9b588ef842ff9e6d0bb3
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Thu Nov 24 18:59:37 2022 +0100

    HID: input: map battery system charging
    
    commit a608dc1c06397dc50ab773498433432fb5938f92 upstream.
    
    HID descriptors with Battery System (0x85) Charging (0x44) usage are
    ignored and POWER_SUPPLY_STATUS_DISCHARGING is always reported to user
    space, even when the device is charging.
    
    Map this usage and when it is reported set the right charging status.
    
    In addition, add KUnit tests to make sure that the charging status is
    correctly set and reported. They can be run with the usual command:
    
        $ ./tools/testing/kunit/kunit.py run --kunitconfig=drivers/hid
    
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea0e0473093fe7b154392ba99b1293471de12c73
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Sep 15 17:39:15 2023 -0700

    KVM: x86/mmu: Stop zapping invalidated TDP MMU roots asynchronously
    
    commit 0df9dab891ff0d9b646d82e4fe038229e4c02451 upstream.
    
    Stop zapping invalidate TDP MMU roots via work queue now that KVM
    preserves TDP MMU roots until they are explicitly invalidated.  Zapping
    roots asynchronously was effectively a workaround to avoid stalling a vCPU
    for an extended during if a vCPU unloaded a root, which at the time
    happened whenever the guest toggled CR0.WP (a frequent operation for some
    guest kernels).
    
    While a clever hack, zapping roots via an unbound worker had subtle,
    unintended consequences on host scheduling, especially when zapping
    multiple roots, e.g. as part of a memslot.  Because the work of zapping a
    root is no longer bound to the task that initiated the zap, things like
    the CPU affinity and priority of the original task get lost.  Losing the
    affinity and priority can be especially problematic if unbound workqueues
    aren't affined to a small number of CPUs, as zapping multiple roots can
    cause KVM to heavily utilize the majority of CPUs in the system, *beyond*
    the CPUs KVM is already using to run vCPUs.
    
    When deleting a memslot via KVM_SET_USER_MEMORY_REGION, the async root
    zap can result in KVM occupying all logical CPUs for ~8ms, and result in
    high priority tasks not being scheduled in in a timely manner.  In v5.15,
    which doesn't preserve unloaded roots, the issues were even more noticeable
    as KVM would zap roots more frequently and could occupy all CPUs for 50ms+.
    
    Consuming all CPUs for an extended duration can lead to significant jitter
    throughout the system, e.g. on ChromeOS with virtio-gpu, deleting memslots
    is a semi-frequent operation as memslots are deleted and recreated with
    different host virtual addresses to react to host GPU drivers allocating
    and freeing GPU blobs.  On ChromeOS, the jitter manifests as audio blips
    during games due to the audio server's tasks not getting scheduled in
    promptly, despite the tasks having a high realtime priority.
    
    Deleting memslots isn't exactly a fast path and should be avoided when
    possible, and ChromeOS is working towards utilizing MAP_FIXED to avoid the
    memslot shenanigans, but KVM is squarely in the wrong.  Not to mention
    that removing the async zapping eliminates a non-trivial amount of
    complexity.
    
    Note, one of the subtle behaviors hidden behind the async zapping is that
    KVM would zap invalidated roots only once (ignoring partial zaps from
    things like mmu_notifier events).  Preserve this behavior by adding a flag
    to identify roots that are scheduled to be zapped versus roots that have
    already been zapped but not yet freed.
    
    Add a comment calling out why kvm_tdp_mmu_invalidate_all_roots() can
    encounter invalid roots, as it's not at all obvious why zapping
    invalidated roots shouldn't simply zap all invalid roots.
    
    Reported-by: Pattara Teerapong <pteerapong@google.com>
    Cc: David Stevens <stevensd@google.com>
    Cc: Yiwei Zhang<zzyiwei@google.com>
    Cc: Paul Hsia <paulhsia@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230916003916.2545000-4-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: David Matlack <dmatlack@google.com>
    Tested-by: David Matlack <dmatlack@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3519cee444bc3459b2380eaf2285ba17559a3517
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Mon Jul 31 12:37:58 2023 +0200

    nvme-rdma: do not try to stop unallocated queues
    
    commit 3820c4fdc247b6f0a4162733bdb8ddf8f2e8a1e4 upstream.
    
    Trying to stop a queue which hasn't been allocated will result
    in a warning due to calling mutex_lock() against an uninitialized mutex.
    
     DEBUG_LOCKS_WARN_ON(lock->magic != lock)
     WARNING: CPU: 4 PID: 104150 at kernel/locking/mutex.c:579
    
     Call trace:
      RIP: 0010:__mutex_lock+0x1173/0x14a0
      nvme_rdma_stop_queue+0x1b/0xa0 [nvme_rdma]
      nvme_rdma_teardown_io_queues.part.0+0xb0/0x1d0 [nvme_rdma]
      nvme_rdma_delete_ctrl+0x50/0x100 [nvme_rdma]
      nvme_do_delete_ctrl+0x149/0x158 [nvme_core]
    
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bec9cb90fee100342bcbb0248d2a1a1c39c1c542
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Tue Oct 17 10:28:45 2023 +0200

    nvmet-auth: complete a request only after freeing the dhchap pointers
    
    commit f965b281fd872b2e18bd82dd97730db9834d0750 upstream.
    
    It may happen that the work to destroy a queue
    (for example nvmet_tcp_release_queue_work()) is started while
    an auth-send or auth-receive command is still completing.
    
    nvmet_sq_destroy() will block, waiting for all the references
    to the sq to be dropped, the last reference is then
    dropped when nvmet_req_complete() is called.
    
    When this happens, both nvmet_sq_destroy() and
    nvmet_execute_auth_send()/_receive() will free the dhchap pointers by
    calling nvmet_auth_sq_free().
    Since there isn't any lock, the two threads may race against each other,
    causing double frees and memory corruptions, as reported by KASAN.
    
    Reproduced by stress blktests nvme/041 nvme/042 nvme/043
    
     nvme nvme2: qid 0: authenticated with hash hmac(sha512) dhgroup ffdhe4096
     ==================================================================
     BUG: KASAN: double-free in kfree+0xec/0x4b0
    
     Call Trace:
      <TASK>
      kfree+0xec/0x4b0
      nvmet_auth_sq_free+0xe1/0x160 [nvmet]
      nvmet_execute_auth_send+0x482/0x16d0 [nvmet]
      process_one_work+0x8e5/0x1510
    
     Allocated by task 191846:
      __kasan_kmalloc+0x81/0xa0
      nvmet_auth_ctrl_sesskey+0xf6/0x380 [nvmet]
      nvmet_auth_reply+0x119/0x990 [nvmet]
    
     Freed by task 143270:
      kfree+0xec/0x4b0
      nvmet_auth_sq_free+0xe1/0x160 [nvmet]
      process_one_work+0x8e5/0x1510
    
    Fix this bug by calling nvmet_req_complete() only after freeing the
    pointers, so we will prevent the race by holding the sq reference.
    
    V2: remove redundant code
    
    Fixes: db1312dd9548 ("nvmet: implement basic In-Band Authentication")
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ec655ad659d99aae6baa62d7cc3025da2454587
Author: Keith Busch <kbusch@kernel.org>
Date:   Thu Oct 12 11:13:51 2023 -0700

    nvme-pci: add BOGUS_NID for Intel 0a54 device
    
    commit 5c3f4066462a5f6cac04d3dd81c9f551fabbc6c7 upstream.
    
    These ones claim cmic and nmic capable, so need special consideration to ignore
    their duplicate identifiers.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217981
    Reported-by: welsh@cassens.com
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c0b40c310a5d360aa322c7f7a0e8e43e0bd22d1
Author: Keith Busch <kbusch@kernel.org>
Date:   Mon Oct 16 13:12:47 2023 -0700

    nvme: sanitize metadata bounce buffer for reads
    
    commit 2b32c76e2b0154b98b9322ae7546b8156cd703e6 upstream.
    
    User can request more metadata bytes than the device will write. Ensure
    kernel buffer is initialized so we're not leaking unsanitized memory on
    the copy-out.
    
    Fixes: 0b7f1f26f95a51a ("nvme: use the block layer for userspace passthrough metadata")
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Kanchan Joshi <joshi.k@samsung.com>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a54974b0076f028f3533e6bb07f7652fc1b913ab
Author: Dai Ngo <dai.ngo@oracle.com>
Date:   Mon Sep 18 23:30:20 2023 -0700

    nfs42: client needs to strip file mode's suid/sgid bit after ALLOCATE op
    
    commit f588d72bd95f748849685412b1f0c7959ca228cf upstream.
    
    The Linux NFS server strips the SUID and SGID from the file mode
    on ALLOCATE op.
    
    Modify _nfs42_proc_fallocate to add NFS_INO_REVAL_FORCED to
    nfs_set_cache_invalid's argument to force update of the file
    mode suid/sgid bit.
    
    Suggested-by: Trond Myklebust <trondmy@hammerspace.com>
    Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Tested-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d69b47443e8119d03a6e4f0bfcbf33f83e755a4
Author: Sunil V L <sunilvl@ventanamicro.com>
Date:   Mon Oct 16 22:39:39 2023 +0530

    ACPI: irq: Fix incorrect return value in acpi_register_gsi()
    
    commit 0c21a18d5d6c6a73d098fb9b4701572370942df9 upstream.
    
    acpi_register_gsi() should return a negative value in case of failure.
    
    Currently, it returns the return value from irq_create_fwspec_mapping().
    However, irq_create_fwspec_mapping() returns 0 for failure. Fix the
    issue by returning -EINVAL if irq_create_fwspec_mapping() returns zero.
    
    Fixes: d44fa3d46079 ("ACPI: Add support for ResourceSource/IRQ domain mapping")
    Cc: 4.11+ <stable@vger.kernel.org> # 4.11+
    Signed-off-by: Sunil V L <sunilvl@ventanamicro.com>
    [ rjw: Rename a new local variable ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c462bf4ef88a09f64e20e186292032e65966c796
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Mon Oct 9 10:59:01 2023 -0400

    NFSv4.1: fixup use EXCHGID4_FLAG_USE_PNFS_DS for DS server
    
    commit 379e4adfddd6a2f95a4f2029b8ddcbacf92b21f9 upstream.
    
    This patches fixes commit 51d674a5e488 "NFSv4.1: use
    EXCHGID4_FLAG_USE_PNFS_DS for DS server", purpose of that
    commit was to mark EXCHANGE_ID to the DS with the appropriate
    flag.
    
    However, connection to MDS can return both EXCHGID4_FLAG_USE_PNFS_DS
    and EXCHGID4_FLAG_USE_PNFS_MDS set but previous patch would only
    remember the USE_PNFS_DS and for the 2nd EXCHANGE_ID send that
    to the MDS.
    
    Instead, just mark the pnfs path exclusively.
    
    Fixes: 51d674a5e488 ("NFSv4.1: use EXCHGID4_FLAG_USE_PNFS_DS for DS server")
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab65424d618b4398ba0a72570be4f27f787cae8d
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 8 14:28:46 2023 -0400

    pNFS/flexfiles: Check the layout validity in ff_layout_mirror_prepare_stats
    
    commit e1c6cfbb3bd1377e2ddcbe06cf8fb1ec323ea7d3 upstream.
    
    Ensure that we check the layout pointer and validity after dereferencing
    it in ff_layout_mirror_prepare_stats.
    
    Fixes: 08e2e5bc6c9a ("pNFS/flexfiles: Clean up layoutstats")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 730bbbbe16b7a9a870c2d9486b04798748826554
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 8 14:20:19 2023 -0400

    pNFS: Fix a hang in nfs4_evict_inode()
    
    commit f63955721a8020e979b99cc417dcb6da3106aa24 upstream.
    
    We are not allowed to call pnfs_mark_matching_lsegs_return() without
    also holding a reference to the layout header, since doing so could lead
    to the reference count going to zero when we call
    pnfs_layout_remove_lseg(). This again can lead to a hang when we get to
    nfs4_evict_inode() and are unable to clear the layout pointer.
    
    pnfs_layout_return_unused_byserver() is guilty of this behaviour, and
    has been seen to trigger the refcount warning prior to a hang.
    
    Fixes: b6d49ecd1081 ("NFSv4: Fix a pNFS layout related use-after-free race when freeing the inode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbd8b28fe4a29d3e059f6d20fed7d875895485be
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Oct 17 17:18:06 2023 +0300

    Revert "pinctrl: avoid unsafe code pattern in find_pinctrl()"
    
    commit 62140a1e4dec4594d5d1e1d353747bf2ef434e8b upstream.
    
    The commit breaks MMC enumeration on the Intel Merrifield
    plaform.
    
    Before:
    [   36.439057] mmc0: SDHCI controller on PCI [0000:00:01.0] using ADMA
    [   36.450924] mmc2: SDHCI controller on PCI [0000:00:01.3] using ADMA
    [   36.459355] mmc1: SDHCI controller on PCI [0000:00:01.2] using ADMA
    [   36.706399] mmc0: new DDR MMC card at address 0001
    [   37.058972] mmc2: new ultra high speed DDR50 SDIO card at address 0001
    [   37.278977] mmcblk0: mmc0:0001 H4G1d 3.64 GiB
    [   37.297300]  mmcblk0: p1 p2 p3 p4 p5 p6 p7 p8 p9 p10
    
    After:
    [   36.436704] mmc2: SDHCI controller on PCI [0000:00:01.3] using ADMA
    [   36.436720] mmc1: SDHCI controller on PCI [0000:00:01.0] using ADMA
    [   36.463685] mmc0: SDHCI controller on PCI [0000:00:01.2] using ADMA
    [   36.720627] mmc1: new DDR MMC card at address 0001
    [   37.068181] mmc2: new ultra high speed DDR50 SDIO card at address 0001
    [   37.279998] mmcblk1: mmc1:0001 H4G1d 3.64 GiB
    [   37.302670]  mmcblk1: p1 p2 p3 p4 p5 p6 p7 p8 p9 p10
    
    This reverts commit c153a4edff6ab01370fcac8e46f9c89cca1060c2.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20231017141806.535191-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4b7b119c56cf6046091733d1c2926901287bca7
Author: Avri Altman <avri.altman@wdc.com>
Date:   Wed Sep 27 10:15:00 2023 +0300

    mmc: core: Capture correct oemid-bits for eMMC cards
    
    commit 84ee19bffc9306128cd0f1c650e89767079efeff upstream.
    
    The OEMID is an 8-bit binary number rather than 16-bit as the current code
    parses for. The OEMID occupies bits [111:104] in the CID register, see the
    eMMC spec JESD84-B51 paragraph 7.2.3. It seems that the 16-bit comes from
    the legacy MMC specs (v3.31 and before).
    
    Let's fix the parsing by simply move to use 8-bit instead of 16-bit. This
    means we ignore the impact on some of those old MMC cards that may be out
    there, but on the other hand this shouldn't be a problem as the OEMID seems
    not be an important feature for these cards.
    
    Signed-off-by: Avri Altman <avri.altman@wdc.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230927071500.1791882-1-avri.altman@wdc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85664ad23f8b5b31c8f5f16e7f70b5b6602854a5
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Aug 30 17:39:22 2023 +0800

    mmc: core: sdio: hold retuning if sdio in 1-bit mode
    
    commit 32a9cdb8869dc111a0c96cf8e1762be9684af15b upstream.
    
    tuning only support in 4-bit mode or 8 bit mode, so in 1-bit mode,
    need to hold retuning.
    
    Find this issue when use manual tuning method on imx93. When system
    resume back, SDIO WIFI try to switch back to 4 bit mode, first will
    trigger retuning, and all tuning command failed.
    
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: dfa13ebbe334 ("mmc: host: Add facility to support re-tuning")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230830093922.3095850-1-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaa476a7ad50a1ba3d4db5ed34d7442af51256ec
Author: Pablo Sun <pablo.sun@mediatek.com>
Date:   Fri Sep 22 17:53:48 2023 +0800

    mmc: mtk-sd: Use readl_poll_timeout_atomic in msdc_reset_hw
    
    commit c7bb120c1c66672b657e95d0942c989b8275aeb3 upstream.
    
    Use atomic readl_poll_timeout_atomic, because msdc_reset_hw
    may be invoked in IRQ handler in the following context:
    
      msdc_irq() -> msdc_cmd_done() -> msdc_reset_hw()
    
    The following kernel BUG stack trace can be observed on
    Genio 1200 EVK after initializing MSDC1 hardware during kernel boot:
    
    [    1.187441] BUG: scheduling while atomic: swapper/0/0/0x00010002
    [    1.189157] Modules linked in:
    [    1.204633] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W         5.15.42-mtk+modified #1
    [    1.205713] Hardware name: MediaTek Genio 1200 EVK-P1V2-EMMC (DT)
    [    1.206484] Call trace:
    [    1.206796]  dump_backtrace+0x0/0x1ac
    [    1.207266]  show_stack+0x24/0x30
    [    1.207692]  dump_stack_lvl+0x68/0x84
    [    1.208162]  dump_stack+0x1c/0x38
    [    1.208587]  __schedule_bug+0x68/0x80
    [    1.209056]  __schedule+0x6ec/0x7c0
    [    1.209502]  schedule+0x7c/0x110
    [    1.209915]  schedule_hrtimeout_range_clock+0xc4/0x1f0
    [    1.210569]  schedule_hrtimeout_range+0x20/0x30
    [    1.211148]  usleep_range_state+0x84/0xc0
    [    1.211661]  msdc_reset_hw+0xc8/0x1b0
    [    1.212134]  msdc_cmd_done.isra.0+0x4ac/0x5f0
    [    1.212693]  msdc_irq+0x104/0x2d4
    [    1.213121]  __handle_irq_event_percpu+0x68/0x280
    [    1.213725]  handle_irq_event+0x70/0x15c
    [    1.214230]  handle_fasteoi_irq+0xb0/0x1a4
    [    1.214755]  handle_domain_irq+0x6c/0x9c
    [    1.215260]  gic_handle_irq+0xc4/0x180
    [    1.215741]  call_on_irq_stack+0x2c/0x54
    [    1.216245]  do_interrupt_handler+0x5c/0x70
    [    1.216782]  el1_interrupt+0x30/0x80
    [    1.217242]  el1h_64_irq_handler+0x1c/0x2c
    [    1.217769]  el1h_64_irq+0x78/0x7c
    [    1.218206]  cpuidle_enter_state+0xc8/0x600
    [    1.218744]  cpuidle_enter+0x44/0x5c
    [    1.219205]  do_idle+0x224/0x2d0
    [    1.219624]  cpu_startup_entry+0x30/0x80
    [    1.220129]  rest_init+0x108/0x134
    [    1.220568]  arch_call_rest_init+0x1c/0x28
    [    1.221094]  start_kernel+0x6c0/0x700
    [    1.221564]  __primary_switched+0xc0/0xc8
    
    Fixes: ffaea6ebfe9c ("mmc: mtk-sd: Use readl_poll_timeout instead of open-coded polling")
    Signed-off-by: Pablo Sun <pablo.sun@mediatek.com>
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioachino.delregno@collabora.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230922095348.22182-1-pablo.sun@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43f588b82070f72b3e301f15a80ff4fae76893dd
Author: Sven van Ashbrook <svenva@chromium.org>
Date:   Thu Aug 31 16:00:56 2023 +0000

    mmc: sdhci-pci-gli: fix LPM negotiation so x86/S0ix SoCs can suspend
    
    commit 1202d617e3d04c8d27a14ef30784a698c48170b3 upstream.
    
    To improve the r/w performance of GL9763E, the current driver inhibits LPM
    negotiation while the device is active.
    
    This prevents a large number of SoCs from suspending, notably x86 systems
    which commonly use S0ix as the suspend mechanism - for example, Intel
    Alder Lake and Raptor Lake processors.
    
    Failure description:
    1. Userspace initiates s2idle suspend (e.g. via writing to
       /sys/power/state)
    2. This switches the runtime_pm device state to active, which disables
       LPM negotiation, then calls the "regular" suspend callback
    3. With LPM negotiation disabled, the bus cannot enter low-power state
    4. On a large number of SoCs, if the bus not in a low-power state, S0ix
       cannot be entered, which in turn prevents the SoC from entering
       suspend.
    
    Fix by re-enabling LPM negotiation in the device's suspend callback.
    
    Suggested-by: Stanislaw Kardach <skardach@google.com>
    Fixes: f9e5b33934ce ("mmc: host: Improve I/O read/write performance for GL9763E")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven van Ashbrook <svenva@chromium.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20230831160055.v3.1.I7ed1ca09797be2dd76ca914c57d88b32d24dac88@changeid
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55c2428658ec0dd833877448db7cd8cbbb76cf2e
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Aug 25 15:55:02 2023 +0200

    dt-bindings: mmc: sdhci-msm: correct minimum number of clocks
    
    commit 1bbac8d6af085408885675c1e29b2581250be124 upstream.
    
    In the TXT binding before conversion, the "xo" clock was listed as
    optional.  Conversion kept it optional in "clock-names", but not in
    "clocks".  This fixes dbts_check warnings like:
    
      qcom-sdx65-mtp.dtb: mmc@8804000: clocks: [[13, 59], [13, 58]] is too short
    
    Cc: <stable@vger.kernel.org>
    Fixes: a45537723f4b ("dt-bindings: mmc: sdhci-msm: Convert bindings to yaml")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Acked-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/r/20230825135503.282135-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73915d26b4747523b8b30b6f145323f410f903bc
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Aug 30 17:00:34 2023 +0200

    mtd: physmap-core: Restore map_rom fallback
    
    commit 6792b7fce610bcd1cf3e07af3607fe7e2c38c1d8 upstream.
    
    When the exact mapping type driver was not available, the old
    physmap_of_core driver fell back to mapping the region as ROM.
    Unfortunately this feature was lost when the DT and pdata cases were
    merged.  Revive this useful feature.
    
    Fixes: 642b1e8dbed7bbbf ("mtd: maps: Merge physmap_of.c into physmap-core.c")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/550e8c8c1da4c4baeb3d71ff79b14a18d4194f9e.1693407371.git.geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 578687563e71f50d85df480faecc83c0479b448d
Author: Martin Kurbanov <mmkurbanov@sberdevices.ru>
Date:   Tue Sep 5 17:56:37 2023 +0300

    mtd: spinand: micron: correct bitmask for ecc status
    
    commit 9836a987860e33943945d4b257729a4f94eae576 upstream.
    
    Valid bitmask is 0x70 in the status register.
    
    Fixes: a508e8875e13 ("mtd: spinand: Add initial support for Micron MT29F2G01ABAGD")
    Signed-off-by: Martin Kurbanov <mmkurbanov@sberdevices.ru>
    Reviewed-by: Frieder Schrempf <frieder.schrempf@kontron.de>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230905145637.139068-1-mmkurbanov@sberdevices.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b2b755a1a52496850653627836084f694d30985
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Jul 17 21:42:20 2023 +0200

    mtd: rawnand: arasan: Ensure program page operations are successful
    
    commit 3a4a893dbb19e229db3b753f0462520b561dee98 upstream.
    
    The NAND core complies with the ONFI specification, which itself
    mentions that after any program or erase operation, a status check
    should be performed to see whether the operation was finished *and*
    successful.
    
    The NAND core offers helpers to finish a page write (sending the
    "PAGE PROG" command, waiting for the NAND chip to be ready again, and
    checking the operation status). But in some cases, advanced controller
    drivers might want to optimize this and craft their own page write
    helper to leverage additional hardware capabilities, thus not always
    using the core facilities.
    
    Some drivers, like this one, do not use the core helper to finish a page
    write because the final cycles are automatically managed by the
    hardware. In this case, the additional care must be taken to manually
    perform the final status check.
    
    Let's read the NAND chip status at the end of the page write helper and
    return -EIO upon error.
    
    Cc: Michal Simek <michal.simek@amd.com>
    Cc: stable@vger.kernel.org
    Fixes: 88ffef1b65cf ("mtd: rawnand: arasan: Support the hardware BCH ECC engine")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Michal Simek <michal.simek@amd.com>
    Link: https://lore.kernel.org/linux-mtd/20230717194221.229778-2-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58277212f5762efe491e0fa0e749a61c5abec9f5
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Jul 17 21:42:19 2023 +0200

    mtd: rawnand: marvell: Ensure program page operations are successful
    
    commit 3e01d5254698ea3d18e09d96b974c762328352cd upstream.
    
    The NAND core complies with the ONFI specification, which itself
    mentions that after any program or erase operation, a status check
    should be performed to see whether the operation was finished *and*
    successful.
    
    The NAND core offers helpers to finish a page write (sending the
    "PAGE PROG" command, waiting for the NAND chip to be ready again, and
    checking the operation status). But in some cases, advanced controller
    drivers might want to optimize this and craft their own page write
    helper to leverage additional hardware capabilities, thus not always
    using the core facilities.
    
    Some drivers, like this one, do not use the core helper to finish a page
    write because the final cycles are automatically managed by the
    hardware. In this case, the additional care must be taken to manually
    perform the final status check.
    
    Let's read the NAND chip status at the end of the page write helper and
    return -EIO upon error.
    
    Cc: stable@vger.kernel.org
    Fixes: 02f26ecf8c77 ("mtd: nand: add reworked Marvell NAND controller driver")
    Reported-by: Aviram Dali <aviramd@marvell.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Tested-by: Ravi Chandra Minnikanti <rminnikanti@marvell.com>
    Link: https://lore.kernel.org/linux-mtd/20230717194221.229778-1-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 250feed792f8278bdab9c3003aa1c7fe5cafb41a
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Jul 17 21:42:21 2023 +0200

    mtd: rawnand: pl353: Ensure program page operations are successful
    
    commit 9777cc13fd2c3212618904636354be60835e10bb upstream.
    
    The NAND core complies with the ONFI specification, which itself
    mentions that after any program or erase operation, a status check
    should be performed to see whether the operation was finished *and*
    successful.
    
    The NAND core offers helpers to finish a page write (sending the
    "PAGE PROG" command, waiting for the NAND chip to be ready again, and
    checking the operation status). But in some cases, advanced controller
    drivers might want to optimize this and craft their own page write
    helper to leverage additional hardware capabilities, thus not always
    using the core facilities.
    
    Some drivers, like this one, do not use the core helper to finish a page
    write because the final cycles are automatically managed by the
    hardware. In this case, the additional care must be taken to manually
    perform the final status check.
    
    Let's read the NAND chip status at the end of the page write helper and
    return -EIO upon error.
    
    Cc: Michal Simek <michal.simek@amd.com>
    Cc: stable@vger.kernel.org
    Fixes: 08d8c62164a3 ("mtd: rawnand: pl353: Add support for the ARM PL353 SMC NAND controller")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Tested-by: Michal Simek <michal.simek@amd.com>
    Link: https://lore.kernel.org/linux-mtd/20230717194221.229778-3-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58454486132c9f4c0e772229417a43c9e3e26914
Author: Bibek Kumar Patro <quic_bibekkum@quicinc.com>
Date:   Wed Sep 13 12:37:02 2023 +0530

    mtd: rawnand: qcom: Unmap the right resource upon probe failure
    
    commit 5279f4a9eed3ee7d222b76511ea7a22c89e7eefd upstream.
    
    We currently provide the physical address of the DMA region
    rather than the output of dma_map_resource() which is obviously wrong.
    
    Fixes: 7330fc505af4 ("mtd: rawnand: qcom: stop using phys_to_dma()")
    Cc: stable@vger.kernel.org
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Signed-off-by: Bibek Kumar Patro <quic_bibekkum@quicinc.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230913070702.12707-1-quic_bibekkum@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7f5558ec2db28d7b7180b02c1863cd9e4c8ffdf
Author: Albert Huang <huangjie.albert@bytedance.com>
Date:   Wed Oct 11 15:48:51 2023 +0800

    net/smc: fix smc clc failed issue when netdevice not in init_net
    
    [ Upstream commit c68681ae46eaaa1640b52fe366d21a93b2185df5 ]
    
    If the netdevice is within a container and communicates externally
    through network technologies such as VxLAN, we won't be able to find
    routing information in the init_net namespace. To address this issue,
    we need to add a struct net parameter to the smc_ib_find_route function.
    This allow us to locate the routing information within the corresponding
    net namespace, ensuring the correct completion of the SMC CLC interaction.
    
    Fixes: e5c4744cfb59 ("net/smc: add SMC-Rv2 connection establishment")
    Signed-off-by: Albert Huang <huangjie.albert@bytedance.com>
    Reviewed-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Link: https://lore.kernel.org/r/20231011074851.95280-1-huangjie.albert@bytedance.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2efcdbef13c9e0f73c8cecb84cbe387eb8e4b453
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Oct 17 17:49:51 2023 +0200

    tcp_bpf: properly release resources on error paths
    
    [ Upstream commit 68b54aeff804acceb02f228ea2e28419272c1fb9 ]
    
    In the blamed commit below, I completely forgot to release the acquired
    resources before erroring out in the TCP BPF code, as reported by Dan.
    
    Address the issues by replacing the bogus return with a jump to the
    relevant cleanup code.
    
    Fixes: 419ce133ab92 ("tcp: allow again tcp_disconnect() when threads are waiting")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/8f99194c698bcef12666f0a9a999c58f8b1cb52c.1697557782.git.pabeni@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3e70048ac25e4e203411e8d93ba29697c73ae68
Author: Aaron Conole <aconole@redhat.com>
Date:   Wed Oct 11 15:49:36 2023 -0400

    selftests: openvswitch: Add version check for pyroute2
    
    [ Upstream commit 92e37f20f20a23fec4626ae72eda50f127acb130 ]
    
    Paolo Abeni reports that on some systems the pyroute2 version isn't
    new enough to run the test suite.  Ensure that we support a minimum
    version of 0.6 for all cases (which does include the existing ones).
    The 0.6.1 version was released in May of 2021, so should be
    propagated to most installations at this point.
    
    The alternative that Paolo proposed was to only skip when the
    add-flow is being run.  This would be okay for most cases, except
    if a future test case is added that needs to do flow dump without
    an associated add (just guessing).  In that case, it could also be
    broken and we would need additional skip logic anyway.  Just draw
    a line in the sand now.
    
    Fixes: 25f16c873fb1 ("selftests: add openvswitch selftest suite")
    Reported-by: Paolo Abeni <pabeni@redhat.com>
    Closes: https://lore.kernel.org/lkml/8470c431e0930d2ea204a9363a60937289b7fdbe.camel@redhat.com/
    Signed-off-by: Aaron Conole <aconole@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1a9e57037e022ec77bcbda08bb460684af8f44b
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Oct 5 13:59:59 2023 -0700

    Bluetooth: hci_event: Fix using memcmp when comparing keys
    
    [ Upstream commit b541260615f601ae1b5d6d0cc54e790de706303b ]
    
    memcmp is not consider safe to use with cryptographic secrets:
    
     'Do  not  use memcmp() to compare security critical data, such as
     cryptographic secrets, because the required CPU time depends on the
     number of equal bytes.'
    
    While usage of memcmp for ZERO_KEY may not be considered a security
    critical data, it can lead to more usage of memcmp with pairing keys
    which could introduce more security problems.
    
    Fixes: 455c2ff0a558 ("Bluetooth: Fix BR/EDR out-of-band pairing with only initiator data")
    Fixes: 33155c4aae52 ("Bluetooth: hci_event: Ignore NULL link key")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 758610516f0b66adecb3e2308c2d1f7cd34ba8b6
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Wed Jan 18 17:46:09 2023 -0600

    ice: Remove redundant pci_enable_pcie_error_reporting()
    
    [ Upstream commit ba153552c18d7eb839ec0bad7d7484e29ba4719c ]
    
    pci_enable_pcie_error_reporting() enables the device to send ERR_*
    Messages.  Since f26e58bf6f54 ("PCI/AER: Enable error reporting when AER is
    native"), the PCI core does this for all devices during enumeration.
    
    Remove the redundant pci_enable_pcie_error_reporting() call from the
    driver.  Also remove the corresponding pci_disable_pcie_error_reporting()
    from the driver .remove() path.
    
    Note that this doesn't control interrupt generation by the Root Port; that
    is controlled by the AER Root Error Command register, which is managed by
    the AER service driver.
    
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Cc: Tony Nguyen <anthony.l.nguyen@intel.com>
    Cc: intel-wired-lan@lists.osuosl.org
    Cc: netdev@vger.kernel.org
    Tested-by: Gurucharan G <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: 0288c3e709e5 ("ice: reset first in crash dump kernels")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec9bc89a018842006d63f6545c50768e79bd89f8
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Oct 11 09:20:55 2023 +0200

    tcp: allow again tcp_disconnect() when threads are waiting
    
    [ Upstream commit 419ce133ab928ab5efd7b50b2ef36ddfd4eadbd2 ]
    
    As reported by Tom, .NET and applications build on top of it rely
    on connect(AF_UNSPEC) to async cancel pending I/O operations on TCP
    socket.
    
    The blamed commit below caused a regression, as such cancellation
    can now fail.
    
    As suggested by Eric, this change addresses the problem explicitly
    causing blocking I/O operation to terminate immediately (with an error)
    when a concurrent disconnect() is executed.
    
    Instead of tracking the number of threads blocked on a given socket,
    track the number of disconnect() issued on such socket. If such counter
    changes after a blocking operation releasing and re-acquiring the socket
    lock, error out the current operation.
    
    Fixes: 4faeee0cf8a5 ("tcp: deny tcp_disconnect() when threads are waiting")
    Reported-by: Tom Deseyn <tdeseyn@redhat.com>
    Closes: https://bugzilla.redhat.com/show_bug.cgi?id=1886305
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/f3b95e47e3dbed840960548aebaa8d954372db41.1697008693.git.pabeni@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9dc02f41d54e24009795173376ef03f9dc27f971
Author: Hannes Reinecke <hare@suse.de>
Date:   Wed Jul 26 21:15:55 2023 +0200

    net/tls: split tls_rx_reader_lock
    
    [ Upstream commit f9ae3204fb45d0749befc1cdff50f691c7461e5a ]
    
    Split tls_rx_reader_{lock,unlock} into an 'acquire/release' and
    the actual locking part.
    With that we can use the tls_rx_reader_lock in situations where
    the socket is already locked.
    
    Suggested-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20230726191556.41714-6-hare@suse.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 419ce133ab92 ("tcp: allow again tcp_disconnect() when threads are waiting")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76f96854aa25280bfb17ab10d20b01014b291bb4
Author: Jianbo Liu <jianbol@nvidia.com>
Date:   Tue Sep 12 02:28:47 2023 +0000

    net/mlx5e: Don't offload internal port if filter device is out device
    
    [ Upstream commit 06b4eac9c4beda520b8a4dbbb8e33dba9d1c8fba ]
    
    In the cited commit, if the routing device is ovs internal port, the
    out device is set to uplink, and packets go out after encapsulation.
    
    If filter device is uplink, it can trigger the following syndrome:
    mlx5_core 0000:08:00.0: mlx5_cmd_out_err:803:(pid 3966): SET_FLOW_TABLE_ENTRY(0x936) op_mod(0x0) failed, status bad parameter(0x3), syndrome (0xcdb051), err(-22)
    
    Fix this issue by not offloading internal port if filter device is out
    device. In this case, packets are not forwarded to the root table to
    be processed, the termination table is used instead to forward them
    from uplink to uplink.
    
    Fixes: 100ad4e2d758 ("net/mlx5e: Offload internal port as encap route device")
    Signed-off-by: Jianbo Liu <jianbol@nvidia.com>
    Reviewed-by: Ariel Levkovich <lariel@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 107ff0034bbc914691d38fe3f2df77f2f8f7980a
Author: Maher Sanalla <msanalla@nvidia.com>
Date:   Wed Sep 6 21:48:30 2023 +0300

    net/mlx5: Handle fw tracer change ownership event based on MTRC
    
    [ Upstream commit 92fd39634541eb0a11bf1bafbc8ba92d6ddb8dba ]
    
    Currently, whenever fw issues a change ownership event, the PF that owns
    the fw tracer drops its ownership directly and the other PFs try to pick
    up the ownership via what MTRC register suggests.
    
    In some cases, driver releases the ownership of the tracer and reacquires
    it later on. Whenever the driver releases ownership of the tracer, fw
    issues a change ownership event. This event can be delayed and come after
    driver has reacquired ownership of the tracer. Thus the late event will
    trigger the tracer owner PF to release the ownership again and lead to a
    scenario where no PF is owning the tracer.
    
    To prevent the scenario described above, when handling a change
    ownership event, do not drop ownership of the tracer directly, instead
    read the fw MTRC register to retrieve the up-to-date owner of the tracer
    and set it accordingly in driver level.
    
    Fixes: f53aaa31cce7 ("net/mlx5: FW tracer, implement tracer logic")
    Signed-off-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Shay Drory <shayd@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0aa1e83a20f12e9eaad32f72212ebc7fe0c29c95
Author: Shay Drory <shayd@nvidia.com>
Date:   Sun Aug 27 13:31:53 2023 +0300

    net/mlx5: E-switch, register event handler before arming the event
    
    [ Upstream commit 7624e58a8b3a251e3e5108b32f2183b34453db32 ]
    
    Currently, mlx5 is registering event handler for vport context change
    event some time after arming the event. this can lead to missing an
    event, which will result in wrong rules in the FDB.
    Hence, register the event handler before arming the event.
    
    This solution is valid since FW is sending vport context change event
    only on vports which SW armed, and SW arming the vport when enabling
    it, which is done after the FDB has been created.
    
    Fixes: 6933a9379559 ("net/mlx5: E-Switch, Use async events chain")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c21bff1c99b6ba30d1f7725ee04abc98b74108db
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Sep 15 19:20:41 2023 +0800

    xfrm6: fix inet6_dev refcount underflow problem
    
    [ Upstream commit cc9b364bb1d58d3dae270c7a931a8cc717dc2b3b ]
    
    There are race conditions that may lead to inet6_dev refcount underflow
    in xfrm6_dst_destroy() and rt6_uncached_list_flush_dev().
    
    One of the refcount underflow bugs is shown below:
            (cpu 1)                 |       (cpu 2)
    xfrm6_dst_destroy()             |
      ...                           |
      in6_dev_put()                 |
                                    |  rt6_uncached_list_flush_dev()
      ...                           |    ...
                                    |    in6_dev_put()
      rt6_uncached_list_del()       |    ...
      ...                           |
    
    xfrm6_dst_destroy() calls rt6_uncached_list_del() after in6_dev_put(),
    so rt6_uncached_list_flush_dev() has a chance to call in6_dev_put()
    again for the same inet6_dev.
    
    Fix it by moving in6_dev_put() after rt6_uncached_list_del() in
    xfrm6_dst_destroy().
    
    Fixes: 510c321b5571 ("xfrm: reuse uncached_list to track xdsts")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d91723f6ca3c8cf2309d3f45bf942c877b05ddb0
Author: Dong Chenchen <dongchenchen2@huawei.com>
Date:   Tue Aug 15 22:18:34 2023 +0800

    net: xfrm: skip policies marked as dead while reinserting policies
    
    [ Upstream commit 6d41d4fe28724db16ca1016df0713a07e0cc7448 ]
    
    BUG: KASAN: slab-use-after-free in xfrm_policy_inexact_list_reinsert+0xb6/0x430
    Read of size 1 at addr ffff8881051f3bf8 by task ip/668
    
    CPU: 2 PID: 668 Comm: ip Not tainted 6.5.0-rc5-00182-g25aa0bebba72-dirty #64
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13 04/01/2014
    Call Trace:
     <TASK>
     dump_stack_lvl+0x72/0xa0
     print_report+0xd0/0x620
     kasan_report+0xb6/0xf0
     xfrm_policy_inexact_list_reinsert+0xb6/0x430
     xfrm_policy_inexact_insert_node.constprop.0+0x537/0x800
     xfrm_policy_inexact_alloc_chain+0x23f/0x320
     xfrm_policy_inexact_insert+0x6b/0x590
     xfrm_policy_insert+0x3b1/0x480
     xfrm_add_policy+0x23c/0x3c0
     xfrm_user_rcv_msg+0x2d0/0x510
     netlink_rcv_skb+0x10d/0x2d0
     xfrm_netlink_rcv+0x49/0x60
     netlink_unicast+0x3fe/0x540
     netlink_sendmsg+0x528/0x970
     sock_sendmsg+0x14a/0x160
     ____sys_sendmsg+0x4fc/0x580
     ___sys_sendmsg+0xef/0x160
     __sys_sendmsg+0xf7/0x1b0
     do_syscall_64+0x3f/0x90
     entry_SYSCALL_64_after_hwframe+0x73/0xdd
    
    The root cause is:
    
    cpu 0                   cpu1
    xfrm_dump_policy
    xfrm_policy_walk
    list_move_tail
                            xfrm_add_policy
                            ... ...
                            xfrm_policy_inexact_list_reinsert
                            list_for_each_entry_reverse
                                    if (!policy->bydst_reinsert)
                                    //read non-existent policy
    xfrm_dump_policy_done
    xfrm_policy_walk_done
    list_del(&walk->walk.all);
    
    If dump_one_policy() returns err (triggered by netlink socket),
    xfrm_policy_walk() will move walk initialized by socket to list
    net->xfrm.policy_all. so this socket becomes visible in the global
    policy list. The head *walk can be traversed when users add policies
    with different prefixlen and trigger xfrm_policy node merge.
    
    The issue can also be triggered by policy list traversal while rehashing
    and flushing policies.
    
    It can be fixed by skip such "policies" with walk.dead set to 1.
    
    Fixes: 9cf545ebd591 ("xfrm: policy: store inexact policies in a tree ordered by destination address")
    Fixes: 12a169e7d8f4 ("ipsec: Put dumpers on the dump list")
    Signed-off-by: Dong Chenchen <dongchenchen2@huawei.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df2cc87f2c38eba1e0cf4607f8a29513c0a41aa3
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Tue Oct 17 08:49:45 2023 +0900

    fprobe: Fix to ensure the number of active retprobes is not zero
    
    [ Upstream commit 700b2b439766e8aab8a7174991198497345bd411 ]
    
    The number of active retprobes can be zero but it is not acceptable,
    so return EINVAL error if detected.
    
    Link: https://lore.kernel.org/all/169750018550.186853.11198884812017796410.stgit@devnote2/
    
    Reported-by: wuqiang.matt <wuqiang.matt@bytedance.com>
    Closes: https://lore.kernel.org/all/20231016222103.cb9f426edc60220eabd8aa6a@kernel.org/
    Fixes: 5b0ab78998e3 ("fprobe: Add exit_handler support")
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f177a579d2e870fa32aceaf13a0e1c540de2f9e2
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Thu Feb 2 00:56:19 2023 +0900

    fprobe: Add nr_maxactive to specify rethook_node pool size
    
    [ Upstream commit 59a7a298565aa0ce44ce8e4fbcbb89a19730013a ]
    
    Add nr_maxactive to specify rethook_node pool size. This means
    the maximum number of actively running target functions concurrently
    for probing by exit_handler. Note that if the running function is
    preempted or sleep, it is still counted as 'active'.
    
    Link: https://lkml.kernel.org/r/167526697917.433354.17779774988245113106.stgit@mhiramat.roam.corp.google.com
    
    Cc: Florent Revest <revest@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Stable-dep-of: 700b2b439766 ("fprobe: Fix to ensure the number of active retprobes is not zero")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0806cb1e6c63951fd98d33a8c4f0cfcaa58556d8
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Thu Feb 2 00:56:01 2023 +0900

    fprobe: Pass entry_data to handlers
    
    [ Upstream commit 76d0de5729c0569c4071e7f21fcab394e502f03a ]
    
    Pass the private entry_data to the entry and exit handlers so that
    they can share the context data, something like saved function
    arguments etc.
    User must specify the private entry_data size by @entry_data_size
    field before registering the fprobe.
    
    Link: https://lkml.kernel.org/r/167526696173.433354.17408372048319432574.stgit@mhiramat.roam.corp.google.com
    
    Cc: Florent Revest <revest@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Stable-dep-of: 700b2b439766 ("fprobe: Fix to ensure the number of active retprobes is not zero")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bacf8c749adda30a58836ab50d3efadfc1a3b49f
Author: Xuewen Yan <xuewen.yan@unisoc.com>
Date:   Wed Jul 19 21:05:27 2023 +0800

    cpufreq: schedutil: Update next_freq when cpufreq_limits change
    
    [ Upstream commit 9e0bc36ab07c550d791bf17feeb479f1dfc42d89 ]
    
    When cpufreq's policy is 'single', there is a scenario that will
    cause sg_policy's next_freq to be unable to update.
    
    When the CPU's util is always max, the cpufreq will be max,
    and then if we change the policy's scaling_max_freq to be a
    lower freq, indeed, the sg_policy's next_freq need change to
    be the lower freq, however, because the cpu_is_busy, the next_freq
    would keep the max_freq.
    
    For example:
    
    The cpu7 is a single CPU:
    
      unisoc:/sys/devices/system/cpu/cpufreq/policy7 # while true;do done& [1] 4737
      unisoc:/sys/devices/system/cpu/cpufreq/policy7 # taskset -p 80 4737
      pid 4737's current affinity mask: ff
      pid 4737's new affinity mask: 80
      unisoc:/sys/devices/system/cpu/cpufreq/policy7 # cat scaling_max_freq
      2301000
      unisoc:/sys/devices/system/cpu/cpufreq/policy7 # cat scaling_cur_freq
      2301000
      unisoc:/sys/devices/system/cpu/cpufreq/policy7 # echo 2171000 > scaling_max_freq
      unisoc:/sys/devices/system/cpu/cpufreq/policy7 # cat scaling_max_freq
      2171000
    
    At this time, the sg_policy's next_freq would stay at 2301000, which
    is wrong.
    
    To fix this, add a check for the ->need_freq_update flag.
    
    [ mingo: Clarified the changelog. ]
    
    Co-developed-by: Guohua Yan <guohua.yan@unisoc.com>
    Signed-off-by: Xuewen Yan <xuewen.yan@unisoc.com>
    Signed-off-by: Guohua Yan <guohua.yan@unisoc.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: "Rafael J. Wysocki" <rafael@kernel.org>
    Link: https://lore.kernel.org/r/20230719130527.8074-1-xuewen.yan@unisoc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62733bbae12c41c84c3690af929becb71d17fae6
Author: Renan Guilherme Lebre Ramos <japareaggae@gmail.com>
Date:   Wed Oct 4 19:59:00 2023 -0400

    platform/x86: touchscreen_dmi: Add info for the Positivo C4128B
    
    [ Upstream commit aa7dcba3bae6869122828b144a3cfd231718089d ]
    
    Add information for the Positivo C4128B, a notebook/tablet convertible.
    
    Link: https://github.com/onitake/gsl-firmware/pull/217
    Signed-off-by: Renan Guilherme Lebre Ramos <japareaggae@gmail.com>
    Link: https://lore.kernel.org/r/20231004235900.426240-1-japareaggae@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60dc7e39dff870ab0660fa1972b9bb9dd626f62f
Author: Martino Fontana <tinozzo123@gmail.com>
Date:   Sun Sep 24 16:06:01 2023 +0200

    HID: nintendo: reinitialize USB Pro Controller after resuming from suspend
    
    [ Upstream commit 95ea4d9fd385fe335b989f22d409df079a042b7a ]
    
    When suspending the computer, a Switch Pro Controller connected via USB will
    lose its internal status. However, because the USB connection was technically
    never lost, when resuming the computer, the driver will attempt to communicate
    with the controller as if nothing happened (and fail).
    Because of this, the user was forced to manually disconnect the controller
    (or to press the sync button on the controller to power it off), so that it
    can be re-initialized.
    
    With this patch, the controller will be automatically re-initialized after
    resuming from suspend.
    
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=216233
    
    Signed-off-by: Martino Fontana <tinozzo123@gmail.com>
    Reviewed-by: Daniel J. Ogorchock <djogorchock@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef8cdee81ef52aebb5fc80b67a80f0215be784af
Author: Rahul Rameshbabu <sergeantsagara@protonmail.com>
Date:   Sun Sep 17 16:18:43 2023 +0000

    HID: multitouch: Add required quirk for Synaptics 0xcd7e device
    
    [ Upstream commit 1437e4547edf41689d7135faaca4222ef0081bc1 ]
    
    Register the Synaptics device as a special multitouch device with certain
    quirks that may improve usability of the touchpad device.
    
    Reported-by: Rain <rain@sunshowers.io>
    Closes: https://lore.kernel.org/linux-input/2bbb8e1d-1793-4df1-810f-cb0137341ff4@app.fastmail.com/
    Signed-off-by: Rahul Rameshbabu <sergeantsagara@protonmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a2df4f74f3746b614af686a9cbaa390d3828b09
Author: Kenneth Feng <kenneth.feng@amd.com>
Date:   Fri Aug 11 12:25:26 2023 +0800

    drm/amd/pm: add unique_id for gc 11.0.3
    
    [ Upstream commit 4953856f280b2b606089a72a93a1e9212a3adaca ]
    
    add unique_id for gc 11.0.3
    
    Signed-off-by: Kenneth Feng <kenneth.feng@amd.com>
    Reviewed-by: Feifei Xu <Feifei.Xu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1869638a1444d10380f25f4927d868f4667b6b04
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 27 12:09:23 2023 +0100

    btrfs: error out when reallocating block for defrag using a stale transaction
    
    [ Upstream commit e36f94914021e58ee88a8856c7fdf35adf9c7ee1 ]
    
    At btrfs_realloc_node() we have these checks to verify we are not using a
    stale transaction (a past transaction with an unblocked state or higher),
    and the only thing we do is to trigger two WARN_ON(). This however is a
    critical problem, highly unexpected and if it happens it's most likely due
    to a bug, so we should error out and turn the fs into error state so that
    such issue is much more easily noticed if it's triggered.
    
    The problem is critical because in btrfs_realloc_node() we COW tree blocks,
    and using such stale transaction will lead to not persisting the extent
    buffers used for the COW operations, as allocating tree block adds the
    range of the respective extent buffers to the ->dirty_pages iotree of the
    transaction, and a stale transaction, in the unlocked state or higher,
    will not flush dirty extent buffers anymore, therefore resulting in not
    persisting the tree block and resource leaks (not cleaning the dirty_pages
    iotree for example).
    
    So do the following changes:
    
    1) Return -EUCLEAN if we find a stale transaction;
    
    2) Turn the fs into error state, with error -EUCLEAN, so that no
       transaction can be committed, and generate a stack trace;
    
    3) Combine both conditions into a single if statement, as both are related
       and have the same error message;
    
    4) Mark the check as unlikely, since this is not expected to ever happen.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f174c8d2c634929f93c3a1115a1fad18a38718f7
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 27 12:09:22 2023 +0100

    btrfs: error when COWing block from a root that is being deleted
    
    [ Upstream commit a2caab29884397e583d09be6546259a83ebfbdb1 ]
    
    At btrfs_cow_block() we check if the block being COWed belongs to a root
    that is being deleted and if so we log an error message. However this is
    an unexpected case and it indicates a bug somewhere, so we should return
    an error and abort the transaction. So change this in the following ways:
    
    1) Abort the transaction with -EUCLEAN, so that if the issue ever happens
       it can easily be noticed;
    
    2) Change the logged message level from error to critical, and change the
       message itself to print the block's logical address and the ID of the
       root;
    
    3) Return -EUCLEAN to the caller;
    
    4) As this is an unexpected scenario, that should never happen, mark the
       check as unlikely, allowing the compiler to potentially generate better
       code.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c833f1e28d137158be066f80fe0d7f2c17fe9a4b
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 27 12:09:21 2023 +0100

    btrfs: error out when COWing block using a stale transaction
    
    [ Upstream commit 48774f3bf8b4dd3b1a0e155825c9ce48483db14c ]
    
    At btrfs_cow_block() we have these checks to verify we are not using a
    stale transaction (a past transaction with an unblocked state or higher),
    and the only thing we do is to trigger a WARN with a message and a stack
    trace. This however is a critical problem, highly unexpected and if it
    happens it's most likely due to a bug, so we should error out and turn the
    fs into error state so that such issue is much more easily noticed if it's
    triggered.
    
    The problem is critical because using such stale transaction will lead to
    not persisting the extent buffer used for the COW operation, as allocating
    a tree block adds the range of the respective extent buffer to the
    ->dirty_pages iotree of the transaction, and a stale transaction, in the
    unlocked state or higher, will not flush dirty extent buffers anymore,
    therefore resulting in not persisting the tree block and resource leaks
    (not cleaning the dirty_pages iotree for example).
    
    So do the following changes:
    
    1) Return -EUCLEAN if we find a stale transaction;
    
    2) Turn the fs into error state, with error -EUCLEAN, so that no
       transaction can be committed, and generate a stack trace;
    
    3) Combine both conditions into a single if statement, as both are related
       and have the same error message;
    
    4) Mark the check as unlikely, since this is not expected to ever happen.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d99acb6a1622186118042debe294076a1c272ab
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 26 15:47:27 2023 -0400

    btrfs: fix some -Wmaybe-uninitialized warnings in ioctl.c
    
    [ Upstream commit 9147b9ded499d9853bdf0e9804b7eaa99c4429ed ]
    
    Jens reported the following warnings from -Wmaybe-uninitialized recent
    Linus' branch.
    
      In file included from ./include/asm-generic/rwonce.h:26,
                       from ./arch/arm64/include/asm/rwonce.h:71,
                       from ./include/linux/compiler.h:246,
                       from ./include/linux/export.h:5,
                       from ./include/linux/linkage.h:7,
                       from ./include/linux/kernel.h:17,
                       from fs/btrfs/ioctl.c:6:
      In function ‘instrument_copy_from_user_before’,
          inlined from ‘_copy_from_user’ at ./include/linux/uaccess.h:148:3,
          inlined from ‘copy_from_user’ at ./include/linux/uaccess.h:183:7,
          inlined from ‘btrfs_ioctl_space_info’ at fs/btrfs/ioctl.c:2999:6,
          inlined from ‘btrfs_ioctl’ at fs/btrfs/ioctl.c:4616:10:
      ./include/linux/kasan-checks.h:38:27: warning: ‘space_args’ may be used
      uninitialized [-Wmaybe-uninitialized]
         38 | #define kasan_check_write __kasan_check_write
      ./include/linux/instrumented.h:129:9: note: in expansion of macro
      ‘kasan_check_write’
        129 |         kasan_check_write(to, n);
            |         ^~~~~~~~~~~~~~~~~
      ./include/linux/kasan-checks.h: In function ‘btrfs_ioctl’:
      ./include/linux/kasan-checks.h:20:6: note: by argument 1 of type ‘const
      volatile void *’ to ‘__kasan_check_write’ declared here
         20 | bool __kasan_check_write(const volatile void *p, unsigned int
            size);
            |      ^~~~~~~~~~~~~~~~~~~
      fs/btrfs/ioctl.c:2981:39: note: ‘space_args’ declared here
       2981 |         struct btrfs_ioctl_space_args space_args;
            |                                       ^~~~~~~~~~
      In function ‘instrument_copy_from_user_before’,
          inlined from ‘_copy_from_user’ at ./include/linux/uaccess.h:148:3,
          inlined from ‘copy_from_user’ at ./include/linux/uaccess.h:183:7,
          inlined from ‘_btrfs_ioctl_send’ at fs/btrfs/ioctl.c:4343:9,
          inlined from ‘btrfs_ioctl’ at fs/btrfs/ioctl.c:4658:10:
      ./include/linux/kasan-checks.h:38:27: warning: ‘args32’ may be used
      uninitialized [-Wmaybe-uninitialized]
         38 | #define kasan_check_write __kasan_check_write
      ./include/linux/instrumented.h:129:9: note: in expansion of macro
      ‘kasan_check_write’
        129 |         kasan_check_write(to, n);
            |         ^~~~~~~~~~~~~~~~~
      ./include/linux/kasan-checks.h: In function ‘btrfs_ioctl’:
      ./include/linux/kasan-checks.h:20:6: note: by argument 1 of type ‘const
      volatile void *’ to ‘__kasan_check_write’ declared here
         20 | bool __kasan_check_write(const volatile void *p, unsigned int
            size);
            |      ^~~~~~~~~~~~~~~~~~~
      fs/btrfs/ioctl.c:4341:49: note: ‘args32’ declared here
       4341 |                 struct btrfs_ioctl_send_args_32 args32;
            |                                                 ^~~~~~
    
    This was due to his config options and having KASAN turned on,
    which adds some extra checks around copy_from_user(), which then
    triggered the -Wmaybe-uninitialized checker for these cases.
    
    Fix the warnings by initializing the different structs we're copying
    into.
    
    Reported-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3657e5fa7b6310a485f59ca965d12a618e0c8df
Author: Kai Uwe Broulik <foss-linux@broulik.de>
Date:   Sun Oct 1 13:47:10 2023 +0200

    drm: panel-orientation-quirks: Add quirk for One Mix 2S
    
    [ Upstream commit cbb7eb2dbd9472816e42a1b0fdb51af49abbf812 ]
    
    The One Mix 2S is a mini laptop with a 1200x1920 portrait screen
    mounted in a landscape oriented clamshell case. Because of the too
    generic DMI strings this entry is also doing bios-date matching.
    
    Signed-off-by: Kai Uwe Broulik <foss-linux@broulik.de>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Liviu Dudau <liviu.dudau@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231001114710.336172-1-foss-linux@broulik.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffbb01fe9a15cacc688817a8f54f0d1fa09f03fe
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Sep 22 15:55:08 2023 +0800

    ipv4/fib: send notify when delete source address routes
    
    [ Upstream commit 4b2b606075e50cdae62ab2356b0a1e206947c354 ]
    
    After deleting an interface address in fib_del_ifaddr(), the function
    scans the fib_info list for stray entries and calls fib_flush() and
    fib_table_flush(). Then the stray entries will be deleted silently and no
    RTM_DELROUTE notification will be sent.
    
    This lack of notification can make routing daemons, or monitor like
    `ip monitor route` miss the routing changes. e.g.
    
    + ip link add dummy1 type dummy
    + ip link add dummy2 type dummy
    + ip link set dummy1 up
    + ip link set dummy2 up
    + ip addr add 192.168.5.5/24 dev dummy1
    + ip route add 7.7.7.0/24 dev dummy2 src 192.168.5.5
    + ip -4 route
    7.7.7.0/24 dev dummy2 scope link src 192.168.5.5
    192.168.5.0/24 dev dummy1 proto kernel scope link src 192.168.5.5
    + ip monitor route
    + ip addr del 192.168.5.5/24 dev dummy1
    Deleted 192.168.5.0/24 dev dummy1 proto kernel scope link src 192.168.5.5
    Deleted broadcast 192.168.5.255 dev dummy1 table local proto kernel scope link src 192.168.5.5
    Deleted local 192.168.5.5 dev dummy1 table local proto kernel scope host src 192.168.5.5
    
    As Ido reminded, fib_table_flush() isn't only called when an address is
    deleted, but also when an interface is deleted or put down. The lack of
    notification in these cases is deliberate. And commit 7c6bb7d2faaf
    ("net/ipv6: Add knob to skip DELROUTE message on device down") introduced
    a sysctl to make IPv6 behave like IPv4 in this regard. So we can't send
    the route delete notify blindly in fib_table_flush().
    
    To fix this issue, let's add a new flag in "struct fib_info" to track the
    deleted prefer source address routes, and only send notify for them.
    
    After update:
    + ip monitor route
    + ip addr del 192.168.5.5/24 dev dummy1
    Deleted 192.168.5.0/24 dev dummy1 proto kernel scope link src 192.168.5.5
    Deleted broadcast 192.168.5.255 dev dummy1 table local proto kernel scope link src 192.168.5.5
    Deleted local 192.168.5.5 dev dummy1 table local proto kernel scope host src 192.168.5.5
    Deleted 7.7.7.0/24 dev dummy2 scope link src 192.168.5.5
    
    Suggested-by: Thomas Haller <thaller@redhat.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230922075508.848925-1-liuhangbin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52080d6edc9afdeaf2106395b5786f420b34519b
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Sep 22 09:50:39 2023 -0700

    sky2: Make sure there is at least one frag_addr available
    
    [ Upstream commit 6a70e5cbedaf8ad10528ac9ac114f3ec20f422df ]
    
    In the pathological case of building sky2 with 16k PAGE_SIZE, the
    frag_addr[] array would never be used, so the original code was correct
    that size should be 0. But the compiler now gets upset with 0 size arrays
    in places where it hasn't eliminated the code that might access such an
    array (it can't figure out that in this case an rx skb with fragments
    would never be created). To keep the compiler happy, make sure there is
    at least 1 frag_addr in struct rx_ring_info:
    
       In file included from include/linux/skbuff.h:28,
                        from include/net/net_namespace.h:43,
                        from include/linux/netdevice.h:38,
                        from drivers/net/ethernet/marvell/sky2.c:18:
       drivers/net/ethernet/marvell/sky2.c: In function 'sky2_rx_unmap_skb':
       include/linux/dma-mapping.h:416:36: warning: array subscript i is outside array bounds of 'dma_addr_t[0]' {aka 'long long unsigned int[]'} [-Warray-bounds=]
         416 | #define dma_unmap_page(d, a, s, r) dma_unmap_page_attrs(d, a, s, r, 0)
             |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       drivers/net/ethernet/marvell/sky2.c:1257:17: note: in expansion of macro 'dma_unmap_page'
        1257 |                 dma_unmap_page(&pdev->dev, re->frag_addr[i],
             |                 ^~~~~~~~~~~~~~
       In file included from drivers/net/ethernet/marvell/sky2.c:41:
       drivers/net/ethernet/marvell/sky2.h:2198:25: note: while referencing 'frag_addr'
        2198 |         dma_addr_t      frag_addr[ETH_JUMBO_MTU >> PAGE_SHIFT];
             |                         ^~~~~~~~~
    
    With CONFIG_PAGE_SIZE_16KB=y, PAGE_SHIFT == 14, so:
    
      #define ETH_JUMBO_MTU   9000
    
    causes "ETH_JUMBO_MTU >> PAGE_SHIFT" to be 0. Use "?: 1" to solve this build warning.
    
    Cc: Mirko Lindner <mlindner@marvell.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: netdev@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202309191958.UBw1cjXk-lkp@intel.com/
    Reviewed-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d63d39e7f95e7586507a0e196add71fd8c3d6d43
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Tue Sep 19 00:50:27 2023 +0200

    regulator/core: Revert "fix kobject release warning and memory leak in regulator_register()"
    
    [ Upstream commit 6e800968f6a715c0661716d2ec5e1f56ed9f9c08 ]
    
    This reverts commit 5f4b204b6b8153923d5be8002c5f7082985d153f.
    
    Since rdev->dev now has a release() callback, the proper way of freeing
    the initialized device can be restored.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/d7f469f3f7b1f0e1d52f9a7ede3f3c5703382090.1695077303.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2353f64762330cef00636b3584f413233a77c5a1
Author: Benjamin Berg <benjamin.berg@intel.com>
Date:   Mon Sep 25 17:18:56 2023 +0200

    wifi: cfg80211: avoid leaking stack data into trace
    
    [ Upstream commit 334bf33eec5701a1e4e967bcb7cc8611a998334b ]
    
    If the structure is not initialized then boolean types might be copied
    into the tracing data without being initialised. This causes data from
    the stack to leak into the trace and also triggers a UBSAN failure which
    can easily be avoided here.
    
    Signed-off-by: Benjamin Berg <benjamin.berg@intel.com>
    Link: https://lore.kernel.org/r/20230925171855.a9271ef53b05.I8180bae663984c91a3e036b87f36a640ba409817@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fd88f5632e193b7bba97e50ea746bfe15b28940
Author: Wen Gong <quic_wgong@quicinc.com>
Date:   Tue Aug 1 02:47:51 2023 -0400

    wifi: mac80211: allow transmitting EAPOL frames with tainted key
    
    [ Upstream commit 61304336c67358d49a989e5e0060d8c99bad6ca8 ]
    
    Lower layer device driver stop/wake TX by calling ieee80211_stop_queue()/
    ieee80211_wake_queue() while hw scan. Sometimes hw scan and PTK rekey are
    running in parallel, when M4 sent from wpa_supplicant arrive while the TX
    queue is stopped, then the M4 will pending send, and then new key install
    from wpa_supplicant. After TX queue wake up by lower layer device driver,
    the M4 will be dropped by below call stack.
    
    When key install started, the current key flag is set KEY_FLAG_TAINTED in
    ieee80211_pairwise_rekey(), and then mac80211 wait key install complete by
    lower layer device driver. Meanwhile ieee80211_tx_h_select_key() will return
    TX_DROP for the M4 in step 12 below, and then ieee80211_free_txskb() called
    by ieee80211_tx_dequeue(), so the M4 will not send and free, then the rekey
    process failed becaue AP not receive M4. Please see details in steps below.
    
    There are a interval between KEY_FLAG_TAINTED set for current key flag and
    install key complete by lower layer device driver, the KEY_FLAG_TAINTED is
    set in this interval, all packet including M4 will be dropped in this
    interval, the interval is step 8~13 as below.
    
    issue steps:
          TX thread                 install key thread
    1.   stop_queue                      -idle-
    2.   sending M4                      -idle-
    3.   M4 pending                      -idle-
    4.     -idle-                  starting install key from wpa_supplicant
    5.     -idle-                  =>ieee80211_key_replace()
    6.     -idle-                  =>ieee80211_pairwise_rekey() and set
                                     currently key->flags |= KEY_FLAG_TAINTED
    7.     -idle-                  =>ieee80211_key_enable_hw_accel()
    8.     -idle-                  =>drv_set_key() and waiting key install
                                     complete from lower layer device driver
    9.   wake_queue                     -waiting state-
    10.  re-sending M4                  -waiting state-
    11.  =>ieee80211_tx_h_select_key()  -waiting state-
    12.  drop M4 by KEY_FLAG_TAINTED    -waiting state-
    13.    -idle-                   install key complete with success/fail
                                      success: clear flag KEY_FLAG_TAINTED
                                      fail: start disconnect
    
    Hence add check in step 11 above to allow the EAPOL send out in the
    interval. If lower layer device driver use the old key/cipher to encrypt
    the M4, then AP received/decrypt M4 correctly, after M4 send out, lower
    layer device driver install the new key/cipher to hardware and return
    success.
    
    If lower layer device driver use new key/cipher to send the M4, then AP
    will/should drop the M4, then it is same result with this issue, AP will/
    should kick out station as well as this issue.
    
    issue log:
    kworker/u16:4-5238  [000]  6456.108926: stop_queue:           phy1 queue:0, reason:0
    wpa_supplicant-961  [003]  6456.119737: rdev_tx_control_port: wiphy_name=phy1 name=wlan0 ifindex=6 dest=ARRAY[9e, 05, 31, 20, 9b, d0] proto=36488 unencrypted=0
    wpa_supplicant-961  [003]  6456.119839: rdev_return_int_cookie: phy1, returned 0, cookie: 504
    wpa_supplicant-961  [003]  6456.120287: rdev_add_key:         phy1, netdev:wlan0(6), key_index: 0, mode: 0, pairwise: true, mac addr: 9e:05:31:20:9b:d0
    wpa_supplicant-961  [003]  6456.120453: drv_set_key:          phy1 vif:wlan0(2) sta:9e:05:31:20:9b:d0 cipher:0xfac04, flags=0x9, keyidx=0, hw_key_idx=0
    kworker/u16:9-3829  [001]  6456.168240: wake_queue:           phy1 queue:0, reason:0
    kworker/u16:9-3829  [001]  6456.168255: drv_wake_tx_queue:    phy1 vif:wlan0(2) sta:9e:05:31:20:9b:d0 ac:0 tid:7
    kworker/u16:9-3829  [001]  6456.168305: cfg80211_control_port_tx_status: wdev(1), cookie: 504, ack: false
    wpa_supplicant-961  [003]  6459.167982: drv_return_int:       phy1 - -110
    
    issue call stack:
    nl80211_frame_tx_status+0x230/0x340 [cfg80211]
    cfg80211_control_port_tx_status+0x1c/0x28 [cfg80211]
    ieee80211_report_used_skb+0x374/0x3e8 [mac80211]
    ieee80211_free_txskb+0x24/0x40 [mac80211]
    ieee80211_tx_dequeue+0x644/0x954 [mac80211]
    ath10k_mac_tx_push_txq+0xac/0x238 [ath10k_core]
    ath10k_mac_op_wake_tx_queue+0xac/0xe0 [ath10k_core]
    drv_wake_tx_queue+0x80/0x168 [mac80211]
    __ieee80211_wake_txqs+0xe8/0x1c8 [mac80211]
    _ieee80211_wake_txqs+0xb4/0x120 [mac80211]
    ieee80211_wake_txqs+0x48/0x80 [mac80211]
    tasklet_action_common+0xa8/0x254
    tasklet_action+0x2c/0x38
    __do_softirq+0xdc/0x384
    
    Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
    Link: https://lore.kernel.org/r/20230801064751.25803-1-quic_wgong@quicinc.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9285fea3a22e972a033528daa232cb413fcba9f3
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Sep 18 14:10:55 2023 +0300

    wifi: mac80211: work around Cisco AP 9115 VHT MPDU length
    
    [ Upstream commit 084cf2aeca97566db4fa15d55653c1cba2db83ed ]
    
    Cisco AP module 9115 with FW 17.3 has a bug and sends a too
    large maximum MPDU length in the association response
    (indicating 12k) that it cannot actually process.
    
    Work around that by taking the minimum between what's in the
    association response and the BSS elements (from beacon or
    probe response).
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230918140607.d1966a9a532e.I090225babb7cd4d1081ee9acd40e7de7e41c15ae@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbbb6090c9b2619efc617d1a5648b8fb3641e593
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Mon Sep 18 14:10:54 2023 +0300

    wifi: cfg80211: Fix 6GHz scan configuration
    
    [ Upstream commit 0914468adf92296c4cba8a2134e06e3dea150f2e ]
    
    When the scan request includes a non broadcast BSSID, when adding the
    scan parameters for 6GHz collocated scanning, do not include entries
    that do not match the given BSSID.
    
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230918140607.6d31d2a96baf.I6c4e3e3075d1d1878ee41f45190fdc6b86f18708@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a55d53ad5c86aee3f6da50ee73626008997673fa
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Sep 15 14:42:27 2023 -0700

    Bluetooth: hci_core: Fix build warnings
    
    [ Upstream commit dcda165706b9fbfd685898d46a6749d7d397e0c0 ]
    
    This fixes the following warnings:
    
    net/bluetooth/hci_core.c: In function ‘hci_register_dev’:
    net/bluetooth/hci_core.c:2620:54: warning: ‘%d’ directive output may
    be truncated writing between 1 and 10 bytes into a region of size 5
    [-Wformat-truncation=]
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |                                                      ^~
    net/bluetooth/hci_core.c:2620:50: note: directive argument in the range
    [0, 2147483647]
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |                                                  ^~~~~~~
    net/bluetooth/hci_core.c:2620:9: note: ‘snprintf’ output between 5 and
    14 bytes into a destination of size 8
     2620 |         snprintf(hdev->name, sizeof(hdev->name), "hci%d", id);
          |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aad0760c26074f7af302ff1d75d6e19bb40be785
Author: Ying Hsu <yinghsu@chromium.org>
Date:   Thu Sep 7 04:39:34 2023 +0000

    Bluetooth: Avoid redundant authentication
    
    [ Upstream commit 1d8e801422d66e4b8c7b187c52196bef94eed887 ]
    
    While executing the Android 13 CTS Verifier Secure Server test on a
    ChromeOS device, it was observed that the Bluetooth host initiates
    authentication for an RFCOMM connection after SSP completes.
    When this happens, some Intel Bluetooth controllers, like AC9560, would
    disconnect with "Connection Rejected due to Security Reasons (0x0e)".
    
    Historically, BlueZ did not mandate this authentication while an
    authenticated combination key was already in use for the connection.
    This behavior was changed since commit 7b5a9241b780
    ("Bluetooth: Introduce requirements for security level 4").
    So, this patch addresses the aforementioned disconnection issue by
    restoring the previous behavior.
    
    Signed-off-by: Ying Hsu <yinghsu@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7045675fc9165ff03ce6898c2a458fa90160d3ee
Author: Rocky Liao <quic_rjliao@quicinc.com>
Date:   Mon Aug 7 14:46:26 2023 +0800

    Bluetooth: btusb: add shutdown function for QCA6174
    
    [ Upstream commit 187f8b648cc16f07c66ab1d89d961bdcff779bf7 ]
    
    We should send hci reset command before bt turn off, which can reset bt
    firmware status.
    
    Signed-off-by: Rocky Liao <quic_rjliao@quicinc.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d823a1071c6365066608a2762378bd9344ad1b5
Author: Ma Ke <make_ruc2021@163.com>
Date:   Mon Sep 18 10:40:59 2023 +0800

    HID: holtek: fix slab-out-of-bounds Write in holtek_kbd_input_event
    
    [ Upstream commit ffe3b7837a2bb421df84d0177481db9f52c93a71 ]
    
    There is a slab-out-of-bounds Write bug in hid-holtek-kbd driver.
    The problem is the driver assumes the device must have an input
    but some malicious devices violate this assumption.
    
    Fix this by checking hid_device's input is non-empty before its usage.
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f45752f1eb91aacdc6abebce80b04755396ae38c
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Aug 28 00:24:38 2023 +0200

    HID: logitech-hidpp: Add Bluetooth ID for the Logitech M720 Triathlon mouse
    
    [ Upstream commit 2d866603e25b1ce7e536839f62d1faae1c03d92f ]
    
    Using hidpp for the M720 adds battery info reporting and hires
    scrolling support.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Bastien Nocera <hadess@hadess.net>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e045b6a921298b138d15f5dc300f519e5d42cc1d
Author: Ben Greear <greearb@candelatech.com>
Date:   Tue Aug 8 13:56:05 2023 -0700

    wifi: iwlwifi: Ensure ack flag is properly cleared.
    
    [ Upstream commit e8fbe99e87877f0412655f40d7c45bf8471470ac ]
    
    Debugging indicates that nothing else is clearing the info->flags,
    so some frames were flagged as ACKed when they should not be.
    Explicitly clear the ack flag to ensure this does not happen.
    
    Signed-off-by: Ben Greear <greearb@candelatech.com>
    Acked-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230808205605.4105670-1-greearb@candelatech.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb7ae9ed63c6f92e714260f373559c73ee4bab89
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Aug 24 21:10:45 2023 -0600

    wifi: mwifiex: Sanity check tlv_len and tlv_bitmap_len
    
    [ Upstream commit d5a93b7d2877aae4ba7590ad6cb65f8d33079489 ]
    
    Add sanity checks for both `tlv_len` and `tlv_bitmap_len` before
    decoding data from `event_buf`.
    
    This prevents any malicious or buggy firmware from overflowing
    `event_buf` through large values for `tlv_len` and `tlv_bitmap_len`.
    
    Suggested-by: Dan Williams <dcbw@redhat.com>
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/d4f8780527d551552ee96f17a0229e02e1c200d1.1692931954.git.gustavoars@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b812b31696287049fad7d65a26d12bc4c2122c72
Author: Clément Léger <cleger@rivosinc.com>
Date:   Fri Sep 29 21:16:37 2023 +0200

    tracing: relax trace_event_eval_update() execution with cond_resched()
    
    [ Upstream commit 23cce5f25491968b23fb9c399bbfb25f13870cd9 ]
    
    When kernel is compiled without preemption, the eval_map_work_func()
    (which calls trace_event_eval_update()) will not be preempted up to its
    complete execution. This can actually cause a problem since if another
    CPU call stop_machine(), the call will have to wait for the
    eval_map_work_func() function to finish executing in the workqueue
    before being able to be scheduled. This problem was observe on a SMP
    system at boot time, when the CPU calling the initcalls executed
    clocksource_done_booting() which in the end calls stop_machine(). We
    observed a 1 second delay because one CPU was executing
    eval_map_work_func() and was not preempted by the stop_machine() task.
    
    Adding a call to cond_resched() in trace_event_eval_update() allows
    other tasks to be executed and thus continue working asynchronously
    like before without blocking any pending task at boot time.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230929191637.416931-1-cleger@rivosinc.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Clément Léger <cleger@rivosinc.com>
    Tested-by: Atish Patra <atishp@rivosinc.com>
    Reviewed-by: Atish Patra <atishp@rivosinc.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c859abdd7de27153179a156ad316ef30d75431d
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Tue Sep 12 09:08:40 2023 +0900

    ata: libata-eh: Fix compilation warning in ata_eh_link_report()
    
    [ Upstream commit 49728bdc702391902a473b9393f1620eea32acb0 ]
    
    The 6 bytes length of the tries_buf string in ata_eh_link_report() is
    too short and results in a gcc compilation warning with W-!:
    
    drivers/ata/libata-eh.c: In function ‘ata_eh_link_report’:
    drivers/ata/libata-eh.c:2371:59: warning: ‘%d’ directive output may be truncated writing between 1 and 11 bytes into a region of size 4 [-Wformat-truncation=]
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                                                           ^~
    drivers/ata/libata-eh.c:2371:56: note: directive argument in the range [-2147483648, 4]
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                                                        ^~~~~~
    drivers/ata/libata-eh.c:2371:17: note: ‘snprintf’ output between 4 and 14 bytes into a destination of size 6
     2371 |                 snprintf(tries_buf, sizeof(tries_buf), " t%d",
          |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     2372 |                          ap->eh_tries);
          |                          ~~~~~~~~~~~~~
    
    Avoid this warning by increasing the string size to 16B.
    
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4ce5ce29a1c7496a2aef51cef025d3291b46938
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Tue Sep 12 08:46:22 2023 +0900

    ata: libata-core: Fix compilation warning in ata_dev_config_ncq()
    
    [ Upstream commit ed518d9ba980dc0d27c7d1dea1e627ba001d1977 ]
    
    The 24 bytes length allocated to the ncq_desc string in
    ata_dev_config_lba() for ata_dev_config_ncq() to use is too short,
    causing the following gcc compilation warnings when compiling with W=1:
    
    drivers/ata/libata-core.c: In function ‘ata_dev_configure’:
    drivers/ata/libata-core.c:2378:56: warning: ‘%d’ directive output may be truncated writing between 1 and 2 bytes into a region of size between 1 and 11 [-Wformat-truncation=]
     2378 |                 snprintf(desc, desc_sz, "NCQ (depth %d/%d)%s", hdepth,
          |                                                        ^~
    In function ‘ata_dev_config_ncq’,
        inlined from ‘ata_dev_config_lba’ at drivers/ata/libata-core.c:2649:8,
        inlined from ‘ata_dev_configure’ at drivers/ata/libata-core.c:2952:9:
    drivers/ata/libata-core.c:2378:41: note: directive argument in the range [1, 32]
     2378 |                 snprintf(desc, desc_sz, "NCQ (depth %d/%d)%s", hdepth,
          |                                         ^~~~~~~~~~~~~~~~~~~~~
    drivers/ata/libata-core.c:2378:17: note: ‘snprintf’ output between 16 and 31 bytes into a destination of size 24
     2378 |                 snprintf(desc, desc_sz, "NCQ (depth %d/%d)%s", hdepth,
          |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     2379 |                         ddepth, aa_desc);
          |                         ~~~~~~~~~~~~~~~~
    
    Avoid these warnings and the potential truncation by changing the size
    of the ncq_desc string to 32 characters.
    
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5075570a3edebfd3241ad8687eb0f7f19061546a
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Tue Sep 26 10:29:14 2023 +0000

    gpio: timberdale: Fix potential deadlock on &tgpio->lock
    
    [ Upstream commit 9e8bc2dda5a7a8e2babc9975f4b11c9a6196e490 ]
    
    As timbgpio_irq_enable()/timbgpio_irq_disable() callback could be
    executed under irq context, it could introduce double locks on
    &tgpio->lock if it preempts other execution units requiring
    the same locks.
    
    timbgpio_gpio_set()
    --> timbgpio_update_bit()
    --> spin_lock(&tgpio->lock)
    <interrupt>
       --> timbgpio_irq_disable()
       --> spin_lock_irqsave(&tgpio->lock)
    
    This flaw was found by an experimental static analysis tool I am
    developing for irq-related deadlock.
    
    To prevent the potential deadlock, the patch uses spin_lock_irqsave()
    on &tgpio->lock inside timbgpio_gpio_set() to prevent the possible
    deadlock scenario.
    
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0dab9dd327a1e3ca9b26d4d25895683ac05f886
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Sep 13 09:33:12 2023 -0400

    overlayfs: set ctime when setting mtime and atime
    
    [ Upstream commit 03dbab3bba5f009d053635c729d1244f2c8bad38 ]
    
    Nathan reported that he was seeing the new warning in
    setattr_copy_mgtime pop when starting podman containers. Overlayfs is
    trying to set the atime and mtime via notify_change without also
    setting the ctime.
    
    POSIX states that when the atime and mtime are updated via utimes() that
    we must also update the ctime to the current time. The situation with
    overlayfs copy-up is analogies, so add ATTR_CTIME to the bitmask.
    notify_change will fill in the value.
    
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Christian Brauner <brauner@kernel.org>
    Acked-by: Amir Goldstein <amir73il@gmail.com>
    Message-Id: <20230913-ctime-v1-1-c6bc509cbc27@kernel.org>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6133f63d4d871cb50d3ea0286ad9f84b15dbb7fa
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Sep 23 23:54:06 2023 +0200

    i2c: mux: Avoid potential false error message in i2c_mux_add_adapter
    
    [ Upstream commit b13e59e74ff71a1004e0508107e91e9a84fd7388 ]
    
    I2C_CLASS_DEPRECATED is a flag and not an actual class.
    There's nothing speaking against both, parent and child, having
    I2C_CLASS_DEPRECATED set. Therefore exclude it from the check.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Acked-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit febcad3d32abfcb354bcc3977081cc5cc94abfb4
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 5 12:15:24 2023 -0400

    btrfs: initialize start_slot in btrfs_log_prealloc_extents
    
    [ Upstream commit b4c639f699349880b7918b861e1bd360442ec450 ]
    
    Jens reported a compiler warning when using
    CONFIG_CC_OPTIMIZE_FOR_SIZE=y that looks like this
    
      fs/btrfs/tree-log.c: In function ‘btrfs_log_prealloc_extents’:
      fs/btrfs/tree-log.c:4828:23: warning: ‘start_slot’ may be used
      uninitialized [-Wmaybe-uninitialized]
       4828 |                 ret = copy_items(trans, inode, dst_path, path,
            |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       4829 |                                  start_slot, ins_nr, 1, 0);
            |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~
      fs/btrfs/tree-log.c:4725:13: note: ‘start_slot’ was declared here
       4725 |         int start_slot;
            |             ^~~~~~~~~~
    
    The compiler is incorrect, as we only use this code when ins_len > 0,
    and when ins_len > 0 we have start_slot properly initialized.  However
    we generally find the -Wmaybe-uninitialized warnings valuable, so
    initialize start_slot to get rid of the warning.
    
    Reported-by: Jens Axboe <axboe@kernel.dk>
    Tested-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 563853bf3b8455871bed3c6d9a64fc23eccf863f
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Sep 8 18:20:23 2023 +0100

    btrfs: return -EUCLEAN for delayed tree ref with a ref count not equals to 1
    
    [ Upstream commit 1bf76df3fee56d6637718e267f7c34ed70d0c7dc ]
    
    When running a delayed tree reference, if we find a ref count different
    from 1, we return -EIO. This isn't an IO error, as it indicates either a
    bug in the delayed refs code or a memory corruption, so change the error
    code from -EIO to -EUCLEAN. Also tag the branch as 'unlikely' as this is
    not expected to ever happen, and change the error message to print the
    tree block's bytenr without the parenthesis (and there was a missing space
    between the 'block' word and the opening parenthesis), for consistency as
    that's the style we used everywhere else.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a4e34fe1baa5fcbe4c0a1b75b8317ac2f387c59
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Sep 8 18:20:19 2023 +0100

    btrfs: prevent transaction block reserve underflow when starting transaction
    
    [ Upstream commit a7ddeeb079505961355cf0106154da0110f1fdff ]
    
    When starting a transaction, with a non-zero number of items, we reserve
    metadata space for that number of items and for delayed refs by doing a
    call to btrfs_block_rsv_add(), with the transaction block reserve passed
    as the block reserve argument. This reserves metadata space and adds it
    to the transaction block reserve. Later we migrate the space we reserved
    for delayed references from the transaction block reserve into the delayed
    refs block reserve, by calling btrfs_migrate_to_delayed_refs_rsv().
    
    btrfs_migrate_to_delayed_refs_rsv() decrements the number of bytes to
    migrate from the source block reserve, and this however may result in an
    underflow in case the space added to the transaction block reserve ended
    up being used by another task that has not reserved enough space for its
    own use - examples are tasks doing reflinks or hole punching because they
    end up calling btrfs_replace_file_extents() -> btrfs_drop_extents() and
    may need to modify/COW a variable number of leaves/paths, so they keep
    trying to use space from the transaction block reserve when they need to
    COW an extent buffer, and may end up trying to use more space then they
    have reserved (1 unit/path only for removing file extent items).
    
    This can be avoided by simply reserving space first without adding it to
    the transaction block reserve, then add the space for delayed refs to the
    delayed refs block reserve and finally add the remaining reserved space
    to the transaction block reserve. This also makes the code a bit shorter
    and simpler. So just do that.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c194e184a8996026b50298c56ab056152a9bf463
Author: Chunhai Guo <guochunhai@vivo.com>
Date:   Fri Sep 15 22:51:31 2023 -0600

    fs-writeback: do not requeue a clean inode having skipped pages
    
    [ Upstream commit be049c3a088d512187407b7fd036cecfab46d565 ]
    
    When writing back an inode and performing an fsync on it concurrently, a
    deadlock issue may arise as shown below. In each writeback iteration, a
    clean inode is requeued to the wb->b_dirty queue due to non-zero
    pages_skipped, without anything actually being written. This causes an
    infinite loop and prevents the plug from being flushed, resulting in a
    deadlock. We now avoid requeuing the clean inode to prevent this issue.
    
        wb_writeback        fsync (inode-Y)
    blk_start_plug(&plug)
    for (;;) {
      iter i-1: some reqs with page-X added into plug->mq_list // f2fs node page-X with PG_writeback
                            filemap_fdatawrite
                              __filemap_fdatawrite_range // write inode-Y with sync_mode WB_SYNC_ALL
                               do_writepages
                                f2fs_write_data_pages
                                 __f2fs_write_data_pages // wb_sync_req[DATA]++ for WB_SYNC_ALL
                                  f2fs_write_cache_pages
                                   f2fs_write_single_data_page
                                    f2fs_do_write_data_page
                                     f2fs_outplace_write_data
                                      f2fs_update_data_blkaddr
                                       f2fs_wait_on_page_writeback
                                         wait_on_page_writeback // wait for f2fs node page-X
      iter i:
        progress = __writeback_inodes_wb(wb, work)
        . writeback_sb_inodes
        .   __writeback_single_inode // write inode-Y with sync_mode WB_SYNC_NONE
        .   . do_writepages
        .   .   f2fs_write_data_pages
        .   .   .  __f2fs_write_data_pages // skip writepages due to (wb_sync_req[DATA]>0)
        .   .   .   wbc->pages_skipped += get_dirty_pages(inode) // wbc->pages_skipped = 1
        .   if (!(inode->i_state & I_DIRTY_ALL)) // i_state = I_SYNC | I_SYNC_QUEUED
        .    total_wrote++;  // total_wrote = 1
        .   requeue_inode // requeue inode-Y to wb->b_dirty queue due to non-zero pages_skipped
        if (progress) // progress = 1
          continue;
      iter i+1:
          queue_io
          // similar process with iter i, infinite for-loop !
    }
    blk_finish_plug(&plug)   // flush plug won't be called
    
    Signed-off-by: Chunhai Guo <guochunhai@vivo.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230916045131.957929-1-guochunhai@vivo.com>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7354d90642dc099fa6095c854d066a27d871d3e
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 11 07:07:38 2023 +0300

    ARM: dts: ti: omap: Fix noisy serial with overrun-throttle-ms for mapphone
    
    [ Upstream commit 5ad37b5e30433afa7a5513e3eb61f69fa0976785 ]
    
    On mapphone devices we may get lots of noise on the micro-USB port in debug
    uart mode until the phy-cpcap-usb driver probes. Let's limit the noise by
    using overrun-throttle-ms.
    
    Note that there is also a related separate issue where the charger cable
    connected may cause random sysrq requests until phy-cpcap-usb probes that
    still remains.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c972cb674e3ca88b773087c8bd60d0c48a91598
Author: David Thompson <davthompson@nvidia.com>
Date:   Wed Aug 23 09:37:43 2023 -0400

    pwr-mlxbf: extend Kconfig to include gpio-mlxbf3 dependency
    
    [ Upstream commit 82f07f1acf417b81e793145c167dd5e156024de4 ]
    
    The BlueField power handling driver (pwr-mlxbf.c) provides
    functionality for both BlueField-2 and BlueField-3 based
    platforms.  This driver also depends on the SoC-specific
    BlueField GPIO driver, whether gpio-mlxbf2 or gpio-mlxbf3.
    This patch extends the Kconfig definition to include the
    dependency on the gpio-mlxbf3 driver, if applicable.
    
    Signed-off-by: David Thompson <davthompson@nvidia.com>
    Reviewed-by: Asmaa Mnebhi <asmaa@nvidia.com>
    Link: https://lore.kernel.org/r/20230823133743.31275-1-davthompson@nvidia.com
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82a93c65a4e0d6ca830577982f8fc89228c476c7
Author: Alisa-Dariana Roman <alisa.roman@analog.com>
Date:   Sun Sep 24 18:21:48 2023 +0300

    iio: adc: ad7192: Correct reference voltage
    
    [ Upstream commit 7e7dcab620cd6d34939f615cac63fc0ef7e81c72 ]
    
    The avdd and the reference voltage are two different sources but the
    reference voltage was assigned according to the avdd supply.
    
    Add vref regulator structure and set the reference voltage according to
    the vref supply from the devicetree.
    
    In case vref supply is missing, reference voltage is set according to
    the avdd supply for compatibility with old devicetrees.
    
    Fixes: b581f748cce0 ("staging: iio: adc: ad7192: move out of staging")
    Signed-off-by: Alisa-Dariana Roman <alisa.roman@analog.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230924152149.41884-1-alisadariana@gmail.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee1d783be55d19ef913fe949b5192fa76dcc41c1
Author: Matti Vaittinen <mazziesaccount@gmail.com>
Date:   Fri Aug 19 22:19:01 2022 +0300

    iio: adc: ad7192: Simplify using devm_regulator_get_enable()
    
    [ Upstream commit 1ccef2e6e9205e209ad958d2e591bcca60981007 ]
    
    Use devm_regulator_get_enable() instead of open coded get, enable,
    add-action-to-disable-at-detach - pattern. Also drop the seemingly unused
    struct member 'dvdd'.
    
    Signed-off-by: Matti Vaittinen <mazziesaccount@gmail.com>
    Link: https://lore.kernel.org/r/9719c445c095d3d308e2fc9f4f93294f5806c41c.1660934107.git.mazziesaccount@gmail.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 7e7dcab620cd ("iio: adc: ad7192: Correct reference voltage")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b02dbd1cd54d6184b904ea17ee664ba15186a77
Author: Tzung-Bi Shih <tzungbi@kernel.org>
Date:   Tue Aug 29 11:06:22 2023 +0800

    iio: cros_ec: fix an use-after-free in cros_ec_sensors_push_data()
    
    [ Upstream commit 7771c8c80d62ad065637ef74ed2962983f6c5f6d ]
    
    cros_ec_sensors_push_data() reads `indio_dev->active_scan_mask` and
    calls iio_push_to_buffers_with_timestamp() without making sure the
    `indio_dev` stays in buffer mode.  There is a race if `indio_dev` exits
    buffer mode right before cros_ec_sensors_push_data() accesses them.
    
    An use-after-free on `indio_dev->active_scan_mask` was observed.  The
    call trace:
    [...]
     _find_next_bit
     cros_ec_sensors_push_data
     cros_ec_sensorhub_event
     blocking_notifier_call_chain
     cros_ec_irq_thread
    
    It was caused by a race condition: one thread just freed
    `active_scan_mask` at [1]; while another thread tried to access the
    memory at [2].
    
    Fix it by calling iio_device_claim_buffer_mode() to ensure the
    `indio_dev` can't exit buffer mode during cros_ec_sensors_push_data().
    
    [1]: https://elixir.bootlin.com/linux/v6.5/source/drivers/iio/industrialio-buffer.c#L1189
    [2]: https://elixir.bootlin.com/linux/v6.5/source/drivers/iio/common/cros_ec_sensors/cros_ec_sensors_core.c#L198
    
    Cc: stable@vger.kernel.org
    Fixes: aa984f1ba4a4 ("iio: cros_ec: Register to cros_ec_sensorhub when EC supports FIFO")
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230829030622.1571852-1-tzungbi@kernel.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bca0af538a49dacb1470f233be0676bdc09605b
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Wed Oct 12 17:16:17 2022 +0200

    iio: core: introduce iio_device_{claim|release}_buffer_mode() APIs
    
    [ Upstream commit 0a8565425afd8ba0e1a0ea73e21da119ee6dacea ]
    
    These APIs are analogous to iio_device_claim_direct_mode() and
    iio_device_release_direct_mode() but, as the name suggests, with the
    logic flipped. While this looks odd enough, it will have at least two
    users (in following changes) and it will be important to move the IIO
    mlock to the private struct.
    
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20221012151620.1725215-2-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 7771c8c80d62 ("iio: cros_ec: fix an use-after-free in cros_ec_sensors_push_data()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 681c8a2c238b3a6743659a14e222bca54e482fe7
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Sep 26 09:13:17 2023 +0300

    serial: 8250_omap: Fix errors with no_console_suspend
    
    [ Upstream commit 560706eff7c8e5621b0d63afe0866e0e1906e87e ]
    
    We now get errors on system suspend if no_console_suspend is set as
    reported by Thomas. The errors started with commit 20a41a62618d ("serial:
    8250_omap: Use force_suspend and resume for system suspend").
    
    Let's fix the issue by checking for console_suspend_enabled in the system
    suspend and resume path.
    
    Note that with this fix the checks for console_suspend_enabled in
    omap8250_runtime_suspend() become useless. We now keep runtime PM usage
    count for an attached kernel console starting with commit bedb404e91bb
    ("serial: 8250_port: Don't use power management for kernel console").
    
    Fixes: 20a41a62618d ("serial: 8250_omap: Use force_suspend and resume for system suspend")
    Cc: stable <stable@kernel.org>
    Cc: Udit Kumar <u-kumar1@ti.com>
    Reported-by: Thomas Richard <thomas.richard@bootlin.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Thomas Richard <thomas.richard@bootlin.com>
    Reviewed-by: Dhruva Gole <d-gole@ti.com>
    Link: https://lore.kernel.org/r/20230926061319.15140-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9424a0a456915292ecc55b55b5add4f5cd23cb7a
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon May 8 11:20:12 2023 +0300

    serial: 8250: omap: Fix imprecise external abort for omap_8250_pm()
    
    [ Upstream commit 398cecc24846e867b9f90a0bd22730e3df6b05be ]
    
    We must idle the uart only after serial8250_unregister_port(). Otherwise
    unbinding the uart via sysfs while doing cat on the port produces an
    imprecise external abort:
    
    mem_serial_in from omap_8250_pm+0x44/0xf4
    omap_8250_pm from uart_hangup+0xe0/0x194
    uart_hangup from __tty_hangup.part.0+0x37c/0x3a8
    __tty_hangup.part.0 from uart_remove_one_port+0x9c/0x22c
    uart_remove_one_port from serial8250_unregister_port+0x60/0xe8
    serial8250_unregister_port from omap8250_remove+0x6c/0xd0
    omap8250_remove from platform_remove+0x28/0x54
    
    Turns out the driver needs to have runtime PM functional before the
    driver probe calls serial8250_register_8250_port(). And it needs
    runtime PM after driver remove calls serial8250_unregister_port().
    
    On probe, we need to read registers before registering the port in
    omap_serial_fill_features_erratas(). We do that with custom uart_read()
    already.
    
    On remove, after serial8250_unregister_port(), we need to write to the
    uart registers to idle the device. Let's add a custom uart_write() for
    that.
    
    Currently the uart register access depends on port->membase to be
    initialized, which won't work after serial8250_unregister_port().
    Let's use priv->membase instead, and use it for runtime PM related
    functions to remove the dependency to port->membase for early and
    late register access.
    
    Note that during use, we need to check for a valid port in the runtime PM
    related functions. This is needed for the optional wakeup configuration.
    We now need to set the drvdata a bit earlier so it's available for the
    runtime PM functions.
    
    With the port checks in runtime PM functions, the old checks for priv in
    omap8250_runtime_suspend() and omap8250_runtime_resume() functions are no
    longer needed and are removed.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230508082014.23083-3-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 560706eff7c8 ("serial: 8250_omap: Fix errors with no_console_suspend")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7067c3cf0823a4d1d7987bd4bab1bce0dce25c36
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Sep 21 16:52:33 2023 +0200

    serial: Reduce spinlocked portion of uart_rs485_config()
    
    [ Upstream commit 8679328eb859d06a1984ab48d90ac35d11bbcaf1 ]
    
    Commit 44b27aec9d96 ("serial: core, 8250: set RS485 termination GPIO in
    serial core") enabled support for RS485 termination GPIOs behind i2c
    expanders by setting the GPIO outside of the critical section protected
    by the port spinlock.  Access to the i2c expander may sleep, which
    caused a splat with the port spinlock held.
    
    Commit 7c7f9bc986e6 ("serial: Deassert Transmit Enable on probe in
    driver-specific way") erroneously regressed that by spinlocking the
    GPIO manipulation again.
    
    Fix by moving uart_rs485_config() (the function manipulating the GPIO)
    outside of the spinlocked section and acquiring the spinlock inside of
    uart_rs485_config() for the invocation of ->rs485_config() only.
    
    This gets us one step closer to pushing the spinlock down into the
    ->rs485_config() callbacks which actually need it.  (Some callbacks
    do not want to be spinlocked because they perform sleepable register
    accesses, see e.g. sc16is7xx_config_rs485().)
    
    Stack trace for posterity:
    
     Voluntary context switch within RCU read-side critical section!
     WARNING: CPU: 0 PID: 56 at kernel/rcu/tree_plugin.h:318 rcu_note_context_switch
     Call trace:
     rcu_note_context_switch
     __schedule
     schedule
     schedule_timeout
     wait_for_completion_timeout
     bcm2835_i2c_xfer
     __i2c_transfer
     i2c_transfer
     i2c_transfer_buffer_flags
     regmap_i2c_write
     _regmap_raw_write_impl
     _regmap_bus_raw_write
     _regmap_write
     _regmap_update_bits
     regmap_update_bits_base
     pca953x_gpio_set_value
     gpiod_set_raw_value_commit
     gpiod_set_value_nocheck
     gpiod_set_value_cansleep
     uart_rs485_config
     uart_add_one_port
     pl011_register_port
     pl011_probe
    
    Fixes: 7c7f9bc986e6 ("serial: Deassert Transmit Enable on probe in driver-specific way")
    Suggested-by: Lino Sanfilippo <LinoSanfilippo@gmx.de>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v6.1+
    Link: https://lore.kernel.org/r/f3a35967c28b32f3c6432d0aa5936e6a9908282d.1695307688.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 147156b19cd0d9de5909b944835812defd7e8053
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Thu Mar 9 10:09:20 2023 +0200

    serial: Rename uart_change_speed() to uart_change_line_settings()
    
    [ Upstream commit 826736a6c7c8c3185bfb10e03c10d03d53d6cf94 ]
    
    uart_change_speed() changes more than just speed so rename it to more
    generic uart_change_line_settings().
    
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20230309080923.11778-6-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 8679328eb859 ("serial: Reduce spinlocked portion of uart_rs485_config()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4df8000bdd36b1310e82ae3e59acb29564610b6
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Thu Mar 9 10:09:19 2023 +0200

    serial: Move uart_change_speed() earlier
    
    [ Upstream commit 8e90cf29aef77b59ed6a6f6466add2af79621f26 ]
    
    Move uart_change_speed() earlier to get rid of its forward declaration.
    
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20230309080923.11778-5-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 8679328eb859 ("serial: Reduce spinlocked portion of uart_rs485_config()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d382ba65ddb627cbf59fc8d1e36031375f642b9
Author: Javier Carrasco <javier.carrasco@wolfvision.net>
Date:   Mon Sep 11 10:22:38 2023 +0200

    usb: misc: onboard_hub: add support for Microchip USB2412 USB 2.0 hub
    
    [ Upstream commit e59e38158c61162f2e8beb4620df21a1585117df ]
    
    The USB2412 is a 2-Port USB 2.0 hub controller that provides a reset pin
    and a single 3v3 powre source, which makes it suitable to be controlled
    by the onboard_hub driver.
    
    This hub has the same reset timings as USB2514/2517 and the same
    onboard hub specific-data can be reused for USB2412.
    
    Signed-off-by: Javier Carrasco <javier.carrasco@wolfvision.net>
    Cc: stable <stable@kernel.org>
    Acked-by: Matthias Kaehlcke <mka@chromium.org>
    Link: https://lore.kernel.org/r/20230911-topic-2412_onboard_hub-v1-1-7704181ddfff@wolfvision.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e939c21f60f2b7681582d6e5a23cfdccba1d0bb
Author: Anand Moon <linux.amoon@gmail.com>
Date:   Fri Jun 23 16:22:28 2023 +0200

    usb: misc: onboard_usb_hub: add Genesys Logic GL3523 hub support
    
    [ Upstream commit d97b4b35adcecd4b747d3e1c262e10e4a093cefa ]
    
    Genesys Logic GL3523 is a 4-port USB 3.1 hub that has a reset pin to
    toggle and a 5.0V core supply exported though an integrated LDO is
    available for powering it.
    
    Add the support for this hub, for controlling the reset pin and the core
    power supply.
    
    Signed-off-by: Anand Moon <linux.amoon@gmail.com>
    [m.felsch@pengutronix.de: include review feedback & port to 6.4]
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Link: https://lore.kernel.org/r/20230623142228.4069084-2-m.felsch@pengutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: e59e38158c61 ("usb: misc: onboard_hub: add support for Microchip USB2412 USB 2.0 hub")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a46907e1f6b6fe77887e34c8d6e0a94ac396965f
Author: Anand Moon <linux.amoon@gmail.com>
Date:   Wed Jan 18 04:44:12 2023 +0000

    usb: misc: onboard_usb_hub: add Genesys Logic GL852G hub support
    
    [ Upstream commit db7cab26c3d1382ec85d8cadf642f57250edea58 ]
    
    Genesys Logic GL852G is a 4-port USB 2.0 STT hub that has a reset pin to
    toggle and a 5.0V core supply exported though an integrated LDO is
    available for powering it.
    
    Add the support for this hub, for controlling the reset pin and the core
    power supply.
    
    Signed-off-by: Anand Moon <linux.amoon@gmail.com>
    Acked-by: Matthias Kaehlcke <mka@chromium.org>
    Link: https://lore.kernel.org/r/20230118044418.875-5-linux.amoon@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: e59e38158c61 ("usb: misc: onboard_hub: add support for Microchip USB2412 USB 2.0 hub")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2431e7e8bdd022dd1a828cb984f959af0338603
Author: Icenowy Zheng <uwu@icenowy.me>
Date:   Tue Dec 6 13:52:25 2022 +0800

    usb: misc: onboard_usb_hub: add Genesys Logic GL850G hub support
    
    [ Upstream commit 9bae996ffa28ac03b6d95382a2a082eb219e745a ]
    
    Genesys Logic GL850G is a 4-port USB 2.0 STT hub that has a reset pin to
    toggle and a 3.3V core supply exported (although an integrated LDO is
    available for powering it with 5V).
    
    Add the support for this hub, for controlling the reset pin and the core
    power supply.
    
    Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
    Acked-by: Matthias Kaehlcke <mka@chromium.org>
    Link: https://lore.kernel.org/r/20221206055228.306074-4-uwu@icenowy.me
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: e59e38158c61 ("usb: misc: onboard_hub: add support for Microchip USB2412 USB 2.0 hub")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e7275e43292c458b1aa778509582e0f6d20cd13
Author: Juntong Deng <juntong.deng@outlook.com>
Date:   Wed Sep 27 02:19:44 2023 +0800

    selftests/mm: fix awk usage in charge_reserved_hugetlb.sh and hugetlb_reparenting_test.sh that may cause error
    
    [ Upstream commit bbe246f875d064ecfb872fe4f66152e743dfd22d ]
    
    According to the awk manual, the -e option does not need to be specified
    in front of 'program' (unless you need to mix program-file).
    
    The redundant -e option can cause error when users use awk tools other
    than gawk (for example, mawk does not support the -e option).
    
    Error Example:
    awk: not an option: -e
    
    Link: https://lkml.kernel.org/r/VI1P193MB075228810591AF2FDD7D42C599C3A@VI1P193MB0752.EURP193.PROD.OUTLOOK.COM
    Signed-off-by: Juntong Deng <juntong.deng@outlook.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 673edcffa0960fc154085d639e10f80b6317d3bd
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Oct 17 18:38:14 2023 -0700

    net: check for altname conflicts when changing netdev's netns
    
    commit 7663d522099ecc464512164e660bc771b2ff7b64 upstream.
    
    It's currently possible to create an altname conflicting
    with an altname or real name of another device by creating
    it in another netns and moving it over:
    
     [ ~]$ ip link add dev eth0 type dummy
    
     [ ~]$ ip netns add test
     [ ~]$ ip -netns test link add dev ethX netns test type dummy
     [ ~]$ ip -netns test link property add dev ethX altname eth0
     [ ~]$ ip -netns test link set dev ethX netns 1
    
     [ ~]$ ip link
     ...
     3: eth0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
         link/ether 02:40:88:62:ec:b8 brd ff:ff:ff:ff:ff:ff
     ...
     5: ethX: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
         link/ether 26:b7:28:78:38:0f brd ff:ff:ff:ff:ff:ff
         altname eth0
    
    Create a macro for walking the altnames, this hopefully makes
    it clearer that the list we walk contains only altnames.
    Which is otherwise not entirely intuitive.
    
    Fixes: 36fbf1e52bd3 ("net: rtnetlink: add linkprop commands to add and delete alternative ifnames")
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9307f5f59a4a9e309fc8c72058e3ae74d300f39e
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Oct 17 18:38:13 2023 -0700

    net: fix ifname in netlink ntf during netns move
    
    commit 311cca40661f428b7aa114fb5af578cfdbe3e8b6 upstream.
    
    dev_get_valid_name() overwrites the netdev's name on success.
    This makes it hard to use in prepare-commit-like fashion,
    where we do validation first, and "commit" to the change
    later.
    
    Factor out a helper which lets us save the new name to a buffer.
    Use it to fix the problem of notification on netns move having
    incorrect name:
    
     5: eth0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default
         link/ether be:4d:58:f9:d5:40 brd ff:ff:ff:ff:ff:ff
     6: eth1: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default
         link/ether 1e:4a:34:36:e3:cd brd ff:ff:ff:ff:ff:ff
    
     [ ~]# ip link set dev eth0 netns 1 name eth1
    
    ip monitor inside netns:
     Deleted inet eth0
     Deleted inet6 eth0
     Deleted 5: eth1: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default
         link/ether be:4d:58:f9:d5:40 brd ff:ff:ff:ff:ff:ff new-netnsid 0 new-ifindex 7
    
    Name is reported as eth1 in old netns for ifindex 5, already renamed.
    
    Fixes: d90310243fd7 ("net: device name allocation cleanups")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b92433493bcc81674851fd9869ba1d474fa6f032
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Oct 17 18:38:15 2023 -0700

    net: avoid UAF on deleted altname
    
    commit 1a83f4a7c156fa6bbd6b530e89fa3270bf3d9d1b upstream.
    
    Altnames are accessed under RCU (dev_get_by_name_rcu())
    but freed by kfree() with no synchronization point.
    
    Each node has one or two allocations (node and a variable-size
    name, sometimes the name is netdev->name). Adding rcu_heads
    here is a bit tedious. Besides most code which unlists the names
    already has rcu barriers - so take the simpler approach of adding
    synchronize_rcu(). Note that the one on the unregistration path
    (which matters more) is removed by the next fix.
    
    Fixes: ff92741270bf ("net: introduce name_node struct to be used in hashlist")
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cf912054a08a548ff229fc6225a34e46bd02786
Author: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
Date:   Mon Oct 16 14:08:59 2023 +0000

    net: pktgen: Fix interface flags printing
    
    commit 1d30162f35c7a73fc2f8cdcdcdbd690bedb99d1a upstream.
    
    Device flags are displayed incorrectly:
    1) The comparison (i == F_FLOW_SEQ) is always false, because F_FLOW_SEQ
    is equal to (1 << FLOW_SEQ_SHIFT) == 2048, and the maximum value
    of the 'i' variable is (NR_PKT_FLAG - 1) == 17. It should be compared
    with FLOW_SEQ_SHIFT.
    
    2) Similarly to the F_IPSEC flag.
    
    3) Also add spaces to the print end of the string literal "spi:%u"
    to prevent the output from merging with the flag that follows.
    
    Found by InfoTeCS on behalf of Linux Verification Center
    (linuxtesting.org) with SVACE.
    
    Fixes: 99c6d3d20d62 ("pktgen: Remove brute-force printing of flags")
    Signed-off-by: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fb84f52142d22c4e2ce30aa7b1ca375d9b4d5bf
Author: Florian Fainelli <florian.fainelli@broadcom.com>
Date:   Tue Oct 17 13:51:19 2023 -0700

    net: phy: bcm7xxx: Add missing 16nm EPHY statistics
    
    commit 6200e00e112ce2d17b066a20dd2476d9aecbefa6 upstream.
    
    The .probe() function would allocate the necessary space and ensure that
    the library call sizes the number of statistics but the callbacks
    necessary to fetch the name and values were not wired up.
    
    Reported-by: Justin Chen <justin.chen@broadcom.com>
    Fixes: f68d08c437f9 ("net: phy: bcm7xxx: Add EPHY entry for 72165")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20231017205119.416392-1-florian.fainelli@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1512ff1ecb8f390ddefcebe074d6975bd7bc97b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Oct 18 13:18:39 2023 +0200

    netfilter: nf_tables: revert do not remove elements if set backend implements .abort
    
    commit f86fb94011aeb3b26337fc22204ca726aeb8bc24 upstream.
    
    nf_tables_abort_release() path calls nft_set_elem_destroy() for
    NFT_MSG_NEWSETELEM which releases the element, however, a reference to
    the element still remains in the working copy.
    
    Fixes: ebd032fa8818 ("netfilter: nf_tables: do not remove elements if set backend implements .abort")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2eaa8319f991a9857210785c394a7f92dfebb5b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Oct 4 13:12:58 2023 +0200

    netfilter: nf_tables: do not remove elements if set backend implements .abort
    
    commit ebd032fa881882fef2acb9da1bbde48d8233241d upstream.
    
    pipapo set backend maintains two copies of the datastructure, removing
    the elements from the copy that is going to be discarded slows down
    the abort path significantly, from several minutes to few seconds after
    this patch.
    
    Fixes: 212ed75dc5fb ("netfilter: nf_tables: integrate pipapo into commit protocol")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e8cdddf010be6131628f499003e8ee8cc7de0f5
Author: Christoph Paasch <cpaasch@apple.com>
Date:   Thu Oct 12 21:14:48 2023 -0700

    netlink: Correct offload_xstats size
    
    commit 503930f8e113edc86f92b767efb4ea57bdffffb2 upstream.
    
    rtnl_offload_xstats_get_size_hw_s_info_one() conditionalizes the
    size-computation for IFLA_OFFLOAD_XSTATS_HW_S_INFO_USED based on whether
    or not the device has offload_xstats enabled.
    
    However, rtnl_offload_xstats_fill_hw_s_info_one() is adding the u8 for
    that field uncondtionally.
    
    syzkaller triggered a WARNING in rtnl_stats_get due to this:
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 754 at net/core/rtnetlink.c:5982 rtnl_stats_get+0x2f4/0x300
    Modules linked in:
    CPU: 0 PID: 754 Comm: syz-executor148 Not tainted 6.6.0-rc2-g331b78eb12af #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
    RIP: 0010:rtnl_stats_get+0x2f4/0x300 net/core/rtnetlink.c:5982
    Code: ff ff 89 ee e8 7d 72 50 ff 83 fd a6 74 17 e8 33 6e 50 ff 4c 89 ef be 02 00 00 00 e8 86 00 fa ff e9 7b fe ff ff e8 1c 6e 50 ff <0f> 0b eb e5 e8 73 79 7b 00 0f 1f 00 90 90 90 90 90 90 90 90 90 90
    RSP: 0018:ffffc900006837c0 EFLAGS: 00010293
    RAX: ffffffff81cf7f24 RBX: ffff8881015d9000 RCX: ffff888101815a00
    RDX: 0000000000000000 RSI: 00000000ffffffa6 RDI: 00000000ffffffa6
    RBP: 00000000ffffffa6 R08: ffffffff81cf7f03 R09: 0000000000000001
    R10: ffff888101ba47b9 R11: ffff888101815a00 R12: ffff8881017dae00
    R13: ffff8881017dad00 R14: ffffc90000683ab8 R15: ffffffff83c1f740
    FS:  00007fbc22dbc740(0000) GS:ffff88813bc00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020000046 CR3: 000000010264e003 CR4: 0000000000170ef0
    Call Trace:
     <TASK>
     rtnetlink_rcv_msg+0x677/0x710 net/core/rtnetlink.c:6480
     netlink_rcv_skb+0xea/0x1c0 net/netlink/af_netlink.c:2545
     netlink_unicast+0x430/0x500 net/netlink/af_netlink.c:1342
     netlink_sendmsg+0x4fc/0x620 net/netlink/af_netlink.c:1910
     sock_sendmsg+0xa8/0xd0 net/socket.c:730
     ____sys_sendmsg+0x22a/0x320 net/socket.c:2541
     ___sys_sendmsg+0x143/0x190 net/socket.c:2595
     __x64_sys_sendmsg+0xd8/0x150 net/socket.c:2624
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x47/0xa0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x6e/0xd8
    RIP: 0033:0x7fbc22e8d6a9
    Code: 5c c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 4f 37 0d 00 f7 d8 64 89 01 48
    RSP: 002b:00007ffc4320e778 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004007d0 RCX: 00007fbc22e8d6a9
    RDX: 0000000000000000 RSI: 0000000020000000 RDI: 0000000000000003
    RBP: 0000000000000001 R08: 0000000000000000 R09: 00000000004007d0
    R10: 0000000000000008 R11: 0000000000000246 R12: 00007ffc4320e898
    R13: 00007ffc4320e8a8 R14: 00000000004004a0 R15: 00007fbc22fa5a80
     </TASK>
    ---[ end trace 0000000000000000 ]---
    
    Which didn't happen prior to commit bf9f1baa279f ("net: add dedicated
    kmem_cache for typical/small skb->head") as the skb always was large
    enough.
    
    Fixes: 0e7788fd7622 ("net: rtnetlink: Add UAPI for obtaining L3 offload xstats")
    Signed-off-by: Christoph Paasch <cpaasch@apple.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Link: https://lore.kernel.org/r/20231013041448.8229-1-cpaasch@apple.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0697918ec0c0cd3da84b76bb1106d57f6f58c378
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Oct 17 12:28:27 2023 +0200

    netfilter: nft_set_rbtree: .deactivate fails if element has expired
    
    commit d111692a59c1470ae530cbb39bcf0346c950ecc7 upstream.
    
    This allows to remove an expired element which is not possible in other
    existing set backends, this is more noticeable if gc-interval is high so
    expired elements remain in the tree. On-demand gc also does not help in
    this case, because this is delete element path. Return NULL if element
    has expired.
    
    Fixes: 8d8540c4f5e0 ("netfilter: nft_set_rbtree: add timeout support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9d289b78c5116151724ceebf1eeaa7c2e3cc019
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 13 22:02:24 2023 +0200

    selftests: netfilter: Run nft_audit.sh in its own netns
    
    commit 2e2d9c7d4d37d74873583d7b0c94eac8b6869486 upstream.
    
    Don't mess with the host's firewall ruleset. Since audit logging is not
    per-netns, add an initial delay of a second so other selftests' netns
    cleanups have a chance to finish.
    
    Fixes: e8dbde59ca3f ("selftests: netfilter: Test nf_tables audit logging")
    Signed-off-by: Phil Sutter <phil@nwl.cc>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bb15735121d2e3f02a979cf8f4d2a1d8f221c11
Author: Aaron Conole <aconole@redhat.com>
Date:   Wed Oct 11 15:49:37 2023 -0400

    selftests: openvswitch: Catch cases where the tests are killed
    
    commit af846afad5ca1c1a24d320adf9e48255e97db84e upstream.
    
    In case of fatal signal, or early abort at least cleanup the current
    test case.
    
    Fixes: 25f16c873fb1 ("selftests: add openvswitch selftest suite")
    Signed-off-by: Aaron Conole <aconole@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0914e5a05dda752b42a25f112053f2fb3e60780
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Oct 16 14:49:04 2023 +0200

    neighbor: tracing: Move pin6 inside CONFIG_IPV6=y section
    
    commit 2915240eddba96b37de4c7e9a3d0ac6f9548454b upstream.
    
    When CONFIG_IPV6=n, and building with W=1:
    
        In file included from include/trace/define_trace.h:102,
                         from include/trace/events/neigh.h:255,
                         from net/core/net-traces.c:51:
        include/trace/events/neigh.h: In function ‘trace_event_raw_event_neigh_create’:
        include/trace/events/neigh.h:42:34: error: variable ‘pin6’ set but not used [-Werror=unused-but-set-variable]
           42 |                 struct in6_addr *pin6;
              |                                  ^~~~
        include/trace/trace_events.h:402:11: note: in definition of macro ‘DECLARE_EVENT_CLASS’
          402 |         { assign; }                                                     \
              |           ^~~~~~
        include/trace/trace_events.h:44:30: note: in expansion of macro ‘PARAMS’
           44 |                              PARAMS(assign),                   \
              |                              ^~~~~~
        include/trace/events/neigh.h:23:1: note: in expansion of macro ‘TRACE_EVENT’
           23 | TRACE_EVENT(neigh_create,
              | ^~~~~~~~~~~
        include/trace/events/neigh.h:41:9: note: in expansion of macro ‘TP_fast_assign’
           41 |         TP_fast_assign(
              |         ^~~~~~~~~~~~~~
        In file included from include/trace/define_trace.h:103,
                         from include/trace/events/neigh.h:255,
                         from net/core/net-traces.c:51:
        include/trace/events/neigh.h: In function ‘perf_trace_neigh_create’:
        include/trace/events/neigh.h:42:34: error: variable ‘pin6’ set but not used [-Werror=unused-but-set-variable]
           42 |                 struct in6_addr *pin6;
              |                                  ^~~~
        include/trace/perf.h:51:11: note: in definition of macro ‘DECLARE_EVENT_CLASS’
           51 |         { assign; }                                                     \
              |           ^~~~~~
        include/trace/trace_events.h:44:30: note: in expansion of macro ‘PARAMS’
           44 |                              PARAMS(assign),                   \
              |                              ^~~~~~
        include/trace/events/neigh.h:23:1: note: in expansion of macro ‘TRACE_EVENT’
           23 | TRACE_EVENT(neigh_create,
              | ^~~~~~~~~~~
        include/trace/events/neigh.h:41:9: note: in expansion of macro ‘TP_fast_assign’
           41 |         TP_fast_assign(
              |         ^~~~~~~~~~~~~~
    
    Indeed, the variable pin6 is declared and initialized unconditionally,
    while it is only used and needlessly re-initialized when support for
    IPv6 is enabled.
    
    Fix this by dropping the unused variable initialization, and moving the
    variable declaration inside the existing section protected by a check
    for CONFIG_IPV6.
    
    Fixes: fc651001d2c5ca4f ("neighbor: Add tracepoint to __neigh_create")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Simon Horman <horms@kernel.org> # build-tested
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d80bc191420a2edecb555bb4df95c615324d2d67
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Tue Oct 17 11:36:02 2023 -0300

    net/sched: sch_hfsc: upgrade 'rt' to 'sc' when it becomes a inner curve
    
    commit a13b67c9a015c4e21601ef9aa4ec9c5d972df1b4 upstream.
    
    Christian Theune says:
       I upgraded from 6.1.38 to 6.1.55 this morning and it broke my traffic shaping script,
       leaving me with a non-functional uplink on a remote router.
    
    A 'rt' curve cannot be used as a inner curve (parent class), but we were
    allowing such configurations since the qdisc was introduced. Such
    configurations would trigger a UAF as Budimir explains:
       The parent will have vttree_insert() called on it in init_vf(),
       but will not have vttree_remove() called on it in update_vf()
       because it does not have the HFSC_FSC flag set.
    
    The qdisc always assumes that inner classes have the HFSC_FSC flag set.
    This is by design as it doesn't make sense 'qdisc wise' for an 'rt'
    curve to be an inner curve.
    
    Budimir's original patch disallows users to add classes with a 'rt'
    parent, but this is too strict as it breaks users that have been using
    'rt' as a inner class. Another approach, taken by this patch, is to
    upgrade the inner 'rt' into a 'sc', warning the user in the process.
    It avoids the UAF reported by Budimir while also being more permissive
    to bad scripts/users/code using 'rt' as a inner class.
    
    Users checking the `tc class ls [...]` or `tc class get [...]` dumps would
    observe the curve change and are potentially breaking with this change.
    
    v1->v2: https://lore.kernel.org/all/20231013151057.2611860-1-pctammela@mojatatu.com/
    - Correct 'Fixes' tag and merge with revert (Jakub)
    
    Cc: Christian Theune <ct@flyingcircus.io>
    Cc: Budimir Markovic <markovicbudimir@gmail.com>
    Fixes: b3d26c5702c7 ("net/sched: sch_hfsc: Ensure inner classes have fsc curve")
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Link: https://lore.kernel.org/r/20231017143602.3191556-1-pctammela@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec7393fe63cbee265894deb15e6be808e2e0cd76
Author: Jiri Wiesner <jwiesner@suse.de>
Date:   Tue Oct 10 18:39:33 2023 +0200

    bonding: Return pointer to data after pull on skb
    
    commit d93f3f992780af4a21e6c1ab86946b7c5602f1b9 upstream.
    
    Since 429e3d123d9a ("bonding: Fix extraction of ports from the packet
    headers"), header offsets used to compute a hash in bond_xmit_hash() are
    relative to skb->data and not skb->head. If the tail of the header buffer
    of an skb really needs to be advanced and the operation is successful, the
    pointer to the data must be returned (and not a pointer to the head of the
    buffer).
    
    Fixes: 429e3d123d9a ("bonding: Fix extraction of ports from the packet headers")
    Signed-off-by: Jiri Wiesner <jwiesner@suse.de>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3065fabd17c52de10e6bfb56719c66fdfe309a24
Author: Jinjie Ruan <ruanjinjie@huawei.com>
Date:   Wed Oct 11 11:24:19 2023 +0800

    net: dsa: bcm_sf2: Fix possible memory leak in bcm_sf2_mdio_register()
    
    commit 61b40cefe51af005c72dbdcf975a3d166c6e6406 upstream.
    
    In bcm_sf2_mdio_register(), the class_find_device() will call get_device()
    to increment reference count for priv->master_mii_bus->dev if
    of_mdio_find_bus() succeeds. If mdiobus_alloc() or mdiobus_register()
    fails, it will call get_device() twice without decrement reference count
    for the device. And it is the same if bcm_sf2_mdio_register() succeeds but
    fails in bcm_sf2_sw_probe(), or if bcm_sf2_sw_probe() succeeds. If the
    reference count has not decremented to zero, the dev related resource will
    not be freed.
    
    So remove the get_device() in bcm_sf2_mdio_register(), and call
    put_device() if mdiobus_alloc() or mdiobus_register() fails and in
    bcm_sf2_mdio_unregister() to solve the issue.
    
    And as Simon suggested, unwind from errors for bcm_sf2_mdio_register() and
    just return 0 if it succeeds to make it cleaner.
    
    Fixes: 461cd1b03e32 ("net: dsa: bcm_sf2: Register our slave MDIO bus")
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Suggested-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20231011032419.2423290-1-ruanjinjie@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c3d276fa866281cb4ec7ea4ccf2bd00fdb2f0b2
Author: Michal Schmidt <mschmidt@redhat.com>
Date:   Wed Oct 11 16:33:32 2023 -0700

    i40e: prevent crash on probe if hw registers have invalid values
    
    commit fc6f716a5069180c40a8c9b63631e97da34f64a3 upstream.
    
    The hardware provides the indexes of the first and the last available
    queue and VF. From the indexes, the driver calculates the numbers of
    queues and VFs. In theory, a faulty device might say the last index is
    smaller than the first index. In that case, the driver's calculation
    would underflow, it would attempt to write to non-existent registers
    outside of the ioremapped range and crash.
    
    I ran into this not by having a faulty device, but by an operator error.
    I accidentally ran a QE test meant for i40e devices on an ice device.
    The test used 'echo i40e > /sys/...ice PCI device.../driver_override',
    bound the driver to the device and crashed in one of the wr32 calls in
    i40e_clear_hw.
    
    Add checks to prevent underflows in the calculations of num_queues and
    num_vfs. With this fix, the wrong device probing reports errors and
    returns a failure without crashing.
    
    Fixes: 838d41d92a90 ("i40e: clear all queues and interrupts")
    Signed-off-by: Michal Schmidt <mschmidt@redhat.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Link: https://lore.kernel.org/r/20231011233334.336092-2-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0ab9b0922fc07a22e112df4694d77b3df38c5f2
Author: Shinas Rasheed <srasheed@marvell.com>
Date:   Tue Oct 17 03:50:30 2023 -0700

    octeon_ep: update BQL sent bytes before ringing doorbell
    
    commit a0ca6b9dfef0b3cc83aa8bb485ed61a018f84982 upstream.
    
    Sometimes Tx is completed immediately after doorbell is updated, which
    causes Tx completion routing to update completion bytes before the
    same packet bytes are updated in sent bytes in transmit function, hence
    hitting BUG_ON() in dql_completed(). To avoid this, update BQL
    sent bytes before ringing doorbell.
    
    Fixes: 37d79d059606 ("octeon_ep: add Tx/Rx processing and interrupt support")
    Signed-off-by: Shinas Rasheed <srasheed@marvell.com>
    Link: https://lore.kernel.org/r/20231017105030.2310966-1-srasheed@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a68d440112ab0de771a9db974271d1a8616681e
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Oct 16 20:28:10 2023 +0300

    net: usb: smsc95xx: Fix an error code in smsc95xx_reset()
    
    commit c53647a5df9e66dd9fedf240198e1fe50d88c286 upstream.
    
    Return a negative error code instead of success.
    
    Fixes: 2f7ca802bdae ("net: Add SMSC LAN9500 USB2.0 10/100 ethernet adapter driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/147927f0-9ada-45cc-81ff-75a19dd30b76@moroto.mountain
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c6451d665fb8d50dcf2e58fec361c332fb7e8ef
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 17 19:23:04 2023 +0000

    ipv4: fib: annotate races around nh->nh_saddr_genid and nh->nh_saddr
    
    commit 195374d893681da43a39796e53b30ac4f20400c4 upstream.
    
    syzbot reported a data-race while accessing nh->nh_saddr_genid [1]
    
    Add annotations, but leave the code lazy as intended.
    
    [1]
    BUG: KCSAN: data-race in fib_select_path / fib_select_path
    
    write to 0xffff8881387166f0 of 4 bytes by task 6778 on cpu 1:
    fib_info_update_nhc_saddr net/ipv4/fib_semantics.c:1334 [inline]
    fib_result_prefsrc net/ipv4/fib_semantics.c:1354 [inline]
    fib_select_path+0x292/0x330 net/ipv4/fib_semantics.c:2269
    ip_route_output_key_hash_rcu+0x659/0x12c0 net/ipv4/route.c:2810
    ip_route_output_key_hash net/ipv4/route.c:2644 [inline]
    __ip_route_output_key include/net/route.h:134 [inline]
    ip_route_output_flow+0xa6/0x150 net/ipv4/route.c:2872
    send4+0x1f5/0x520 drivers/net/wireguard/socket.c:61
    wg_socket_send_skb_to_peer+0x94/0x130 drivers/net/wireguard/socket.c:175
    wg_socket_send_buffer_to_peer+0xd6/0x100 drivers/net/wireguard/socket.c:200
    wg_packet_send_handshake_initiation drivers/net/wireguard/send.c:40 [inline]
    wg_packet_handshake_send_worker+0x10c/0x150 drivers/net/wireguard/send.c:51
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    read to 0xffff8881387166f0 of 4 bytes by task 6759 on cpu 0:
    fib_result_prefsrc net/ipv4/fib_semantics.c:1350 [inline]
    fib_select_path+0x1cb/0x330 net/ipv4/fib_semantics.c:2269
    ip_route_output_key_hash_rcu+0x659/0x12c0 net/ipv4/route.c:2810
    ip_route_output_key_hash net/ipv4/route.c:2644 [inline]
    __ip_route_output_key include/net/route.h:134 [inline]
    ip_route_output_flow+0xa6/0x150 net/ipv4/route.c:2872
    send4+0x1f5/0x520 drivers/net/wireguard/socket.c:61
    wg_socket_send_skb_to_peer+0x94/0x130 drivers/net/wireguard/socket.c:175
    wg_socket_send_buffer_to_peer+0xd6/0x100 drivers/net/wireguard/socket.c:200
    wg_packet_send_handshake_initiation drivers/net/wireguard/send.c:40 [inline]
    wg_packet_handshake_send_worker+0x10c/0x150 drivers/net/wireguard/send.c:51
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    value changed: 0x959d3217 -> 0x959d3218
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 6759 Comm: kworker/u4:15 Not tainted 6.6.0-rc4-syzkaller-00029-gcbf3a2cb156a #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/06/2023
    Workqueue: wg-kex-wg1 wg_packet_handshake_send_worker
    
    Fixes: 436c3b66ec98 ("ipv4: Invalidate nexthop cache nh_saddr more correctly.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20231017192304.82626-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9570bee67850785adfd9f2b928b3c479d97f3cef
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 16 18:08:51 2023 +0000

    tun: prevent negative ifindex
    
    commit cbfbfe3aee718dc4c3c837f5d2463170ee59d78c upstream.
    
    After commit 956db0a13b47 ("net: warn about attempts to register
    negative ifindex") syzbot is able to trigger the following splat.
    
    Negative ifindex are not supported.
    
    WARNING: CPU: 1 PID: 6003 at net/core/dev.c:9596 dev_index_reserve+0x104/0x210
    Modules linked in:
    CPU: 1 PID: 6003 Comm: syz-executor926 Not tainted 6.6.0-rc4-syzkaller-g19af4a4ed414 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/06/2023
    pstate: 80400005 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : dev_index_reserve+0x104/0x210
    lr : dev_index_reserve+0x100/0x210
    sp : ffff800096a878e0
    x29: ffff800096a87930 x28: ffff0000d04380d0 x27: ffff0000d04380f8
    x26: ffff0000d04380f0 x25: 1ffff00012d50f20 x24: 1ffff00012d50f1c
    x23: dfff800000000000 x22: ffff8000929c21c0 x21: 00000000ffffffea
    x20: ffff0000d04380e0 x19: ffff800096a87900 x18: ffff800096a874c0
    x17: ffff800084df5008 x16: ffff80008051f9c4 x15: 0000000000000001
    x14: 1fffe0001a087198 x13: 0000000000000000 x12: 0000000000000000
    x11: 0000000000000000 x10: 0000000000000000 x9 : 0000000000000000
    x8 : ffff0000d41c9bc0 x7 : 0000000000000000 x6 : 0000000000000000
    x5 : ffff800091763d88 x4 : 0000000000000000 x3 : ffff800084e04748
    x2 : 0000000000000001 x1 : 00000000fead71c7 x0 : 0000000000000000
    Call trace:
    dev_index_reserve+0x104/0x210
    register_netdevice+0x598/0x1074 net/core/dev.c:10084
    tun_set_iff+0x630/0xb0c drivers/net/tun.c:2850
    __tun_chr_ioctl+0x788/0x2af8 drivers/net/tun.c:3118
    tun_chr_ioctl+0x38/0x4c drivers/net/tun.c:3403
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:871 [inline]
    __se_sys_ioctl fs/ioctl.c:857 [inline]
    __arm64_sys_ioctl+0x14c/0x1c8 fs/ioctl.c:857
    __invoke_syscall arch/arm64/kernel/syscall.c:37 [inline]
    invoke_syscall+0x98/0x2b8 arch/arm64/kernel/syscall.c:51
    el0_svc_common+0x130/0x23c arch/arm64/kernel/syscall.c:136
    do_el0_svc+0x48/0x58 arch/arm64/kernel/syscall.c:155
    el0_svc+0x58/0x16c arch/arm64/kernel/entry-common.c:678
    el0t_64_sync_handler+0x84/0xfc arch/arm64/kernel/entry-common.c:696
    el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:595
    irq event stamp: 11348
    hardirqs last enabled at (11347): [<ffff80008a716574>] __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:151 [inline]
    hardirqs last enabled at (11347): [<ffff80008a716574>] _raw_spin_unlock_irqrestore+0x38/0x98 kernel/locking/spinlock.c:194
    hardirqs last disabled at (11348): [<ffff80008a627820>] el1_dbg+0x24/0x80 arch/arm64/kernel/entry-common.c:436
    softirqs last enabled at (11138): [<ffff8000887ca53c>] spin_unlock_bh include/linux/spinlock.h:396 [inline]
    softirqs last enabled at (11138): [<ffff8000887ca53c>] release_sock+0x15c/0x1b0 net/core/sock.c:3531
    softirqs last disabled at (11136): [<ffff8000887ca41c>] spin_lock_bh include/linux/spinlock.h:356 [inline]
    softirqs last disabled at (11136): [<ffff8000887ca41c>] release_sock+0x3c/0x1b0 net/core/sock.c:3518
    
    Fixes: fb7589a16216 ("tun: Add ability to create tun device with given index")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Link: https://lore.kernel.org/r/20231016180851.3560092-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b9c79c0ecd2805f063840d49ca0809fb47cbac8
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Oct 9 18:38:14 2023 -0700

    tcp: Fix listen() warning with v4-mapped-v6 address.
    
    commit 8702cf12e6ba91616a72d684e90357977972991b upstream.
    
    syzbot reported a warning [0] introduced by commit c48ef9c4aed3 ("tcp: Fix
    bind() regression for v4-mapped-v6 non-wildcard address.").
    
    After the cited commit, a v4 socket's address matches the corresponding
    v4-mapped-v6 tb2 in inet_bind2_bucket_match_addr(), not vice versa.
    
    During X.X.X.X -> ::ffff:X.X.X.X order bind()s, the second bind() uses
    bhash and conflicts properly without checking bhash2 so that we need not
    check if a v4-mapped-v6 sk matches the corresponding v4 address tb2 in
    inet_bind2_bucket_match_addr().  However, the repro shows that we need
    to check that in a no-conflict case.
    
    The repro bind()s two sockets to the 2-tuples using SO_REUSEPORT and calls
    listen() for the first socket:
    
      from socket import *
    
      s1 = socket()
      s1.setsockopt(SOL_SOCKET, SO_REUSEPORT, 1)
      s1.bind(('127.0.0.1', 0))
    
      s2 = socket(AF_INET6)
      s2.setsockopt(SOL_SOCKET, SO_REUSEPORT, 1)
      s2.bind(('::ffff:127.0.0.1', s1.getsockname()[1]))
    
      s1.listen()
    
    The second socket should belong to the first socket's tb2, but the second
    bind() creates another tb2 bucket because inet_bind2_bucket_find() returns
    NULL in inet_csk_get_port() as the v4-mapped-v6 sk does not match the
    corresponding v4 address tb2.
    
      bhash2[] -> tb2(::ffff:X.X.X.X) -> tb2(X.X.X.X)
    
    Then, listen() for the first socket calls inet_csk_get_port(), where the
    v4 address matches the v4-mapped-v6 tb2 and WARN_ON() is triggered.
    
    To avoid that, we need to check if v4-mapped-v6 sk address matches with
    the corresponding v4 address tb2 in inet_bind2_bucket_match().
    
    The same checks are needed in inet_bind2_bucket_addr_match() too, so we
    can move all checks there and call it from inet_bind2_bucket_match().
    
    Note that now tb->family is just an address family of tb->(v6_)?rcv_saddr
    and not of sockets in the bucket.  This could be refactored later by
    defining tb->rcv_saddr as tb->v6_rcv_saddr.s6_addr32[3] and prepending
    ::ffff: when creating v4 tb2.
    
    [0]:
    WARNING: CPU: 0 PID: 5049 at net/ipv4/inet_connection_sock.c:587 inet_csk_get_port+0xf96/0x2350 net/ipv4/inet_connection_sock.c:587
    Modules linked in:
    CPU: 0 PID: 5049 Comm: syz-executor288 Not tainted 6.6.0-rc2-syzkaller-00018-g2cf0f7156238 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/04/2023
    RIP: 0010:inet_csk_get_port+0xf96/0x2350 net/ipv4/inet_connection_sock.c:587
    Code: 7c 24 08 e8 4c b6 8a 01 31 d2 be 88 01 00 00 48 c7 c7 e0 94 ae 8b e8 59 2e a3 f8 2e 2e 2e 31 c0 e9 04 fe ff ff e8 ca 88 d0 f8 <0f> 0b e9 0f f9 ff ff e8 be 88 d0 f8 49 8d 7e 48 e8 65 ca 5a 00 31
    RSP: 0018:ffffc90003abfbf0 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff888026429100 RCX: 0000000000000000
    RDX: ffff88807edcbb80 RSI: ffffffff88b73d66 RDI: ffff888026c49f38
    RBP: ffff888026c49f30 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000000000001 R11: 0000000000000000 R12: ffffffff9260f200
    R13: ffff888026c49880 R14: 0000000000000000 R15: ffff888026429100
    FS:  00005555557d5380(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000000045ad50 CR3: 0000000025754000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     inet_csk_listen_start+0x155/0x360 net/ipv4/inet_connection_sock.c:1256
     __inet_listen_sk+0x1b8/0x5c0 net/ipv4/af_inet.c:217
     inet_listen+0x93/0xd0 net/ipv4/af_inet.c:239
     __sys_listen+0x194/0x270 net/socket.c:1866
     __do_sys_listen net/socket.c:1875 [inline]
     __se_sys_listen net/socket.c:1873 [inline]
     __x64_sys_listen+0x53/0x80 net/socket.c:1873
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f3a5bce3af9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 c1 17 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffc1a1c79e8 EFLAGS: 00000246 ORIG_RAX: 0000000000000032
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f3a5bce3af9
    RDX: 00007f3a5bce3af9 RSI: 0000000000000000 RDI: 0000000000000003
    RBP: 00007f3a5bd565f0 R08: 0000000000000006 R09: 0000000000000006
    R10: 0000000000000006 R11: 0000000000000246 R12: 0000000000000001
    R13: 431bde82d7b634db R14: 0000000000000001 R15: 0000000000000001
     </TASK>
    
    Fixes: c48ef9c4aed3 ("tcp: Fix bind() regression for v4-mapped-v6 non-wildcard address.")
    Reported-by: syzbot+71e724675ba3958edb31@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=71e724675ba3958edb31
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231010013814.70571-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f534a513e8c37b9381137c47a88eed03616ecd8d
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 17 12:45:26 2023 +0000

    tcp: tsq: relax tcp_small_queue_check() when rtx queue contains a single skb
    
    commit f921a4a5bffa8a0005b190fb9421a7fc1fd716b6 upstream.
    
    In commit 75eefc6c59fd ("tcp: tsq: add a shortcut in tcp_small_queue_check()")
    we allowed to send an skb regardless of TSQ limits being hit if rtx queue
    was empty or had a single skb, in order to better fill the pipe
    when/if TX completions were slow.
    
    Then later, commit 75c119afe14f ("tcp: implement rb-tree based
    retransmit queue") accidentally removed the special case for
    one skb in rtx queue.
    
    Stefan Wahren reported a regression in single TCP flow throughput
    using a 100Mbit fec link, starting from commit 65466904b015 ("tcp: adjust
    TSO packet sizes based on min_rtt"). This last commit only made the
    regression more visible, because it locked the TCP flow on a particular
    behavior where TSQ prevented two skbs being pushed downstream,
    adding silences on the wire between each TSO packet.
    
    Many thanks to Stefan for his invaluable help !
    
    Fixes: 75c119afe14f ("tcp: implement rb-tree based retransmit queue")
    Link: https://lore.kernel.org/netdev/7f31ddc8-9971-495e-a1f6-819df542e0af@gmx.net/
    Reported-by: Stefan Wahren <wahrenst@gmx.net>
    Tested-by: Stefan Wahren <wahrenst@gmx.net>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Link: https://lore.kernel.org/r/20231017124526.4060202-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e1f3457e9af502030de1ecfeea58d91344e86bc
Author: Neal Cardwell <ncardwell@google.com>
Date:   Sun Oct 15 13:47:00 2023 -0400

    tcp: fix excessive TLP and RACK timeouts from HZ rounding
    
    commit 1c2709cfff1dedbb9591e989e2f001484208d914 upstream.
    
    We discovered from packet traces of slow loss recovery on kernels with
    the default HZ=250 setting (and min_rtt < 1ms) that after reordering,
    when receiving a SACKed sequence range, the RACK reordering timer was
    firing after about 16ms rather than the desired value of roughly
    min_rtt/4 + 2ms. The problem is largely due to the RACK reorder timer
    calculation adding in TCP_TIMEOUT_MIN, which is 2 jiffies. On kernels
    with HZ=250, this is 2*4ms = 8ms. The TLP timer calculation has the
    exact same issue.
    
    This commit fixes the TLP transmit timer and RACK reordering timer
    floor calculation to more closely match the intended 2ms floor even on
    kernels with HZ=250. It does this by adding in a new
    TCP_TIMEOUT_MIN_US floor of 2000 us and then converting to jiffies,
    instead of the current approach of converting to jiffies and then
    adding th TCP_TIMEOUT_MIN value of 2 jiffies.
    
    Our testing has verified that on kernels with HZ=1000, as expected,
    this does not produce significant changes in behavior, but on kernels
    with the default HZ=250 the latency improvement can be large. For
    example, our tests show that for HZ=250 kernels at low RTTs this fix
    roughly halves the latency for the RACK reorder timer: instead of
    mostly firing at 16ms it mostly fires at 8ms.
    
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Fixes: bb4d991a28cc ("tcp: adjust tail loss probe timeout")
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231015174700.2206872-1-ncardwell.sw@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df5ee37bf29db125e992698fcc282f4b2ad05e15
Author: Josua Mayer <josua@solid-run.com>
Date:   Wed Oct 4 18:39:28 2023 +0200

    net: rfkill: gpio: prevent value glitch during probe
    
    commit b2f750c3a80b285cd60c9346f8c96bd0a2a66cde upstream.
    
    When either reset- or shutdown-gpio have are initially deasserted,
    e.g. after a reboot - or when the hardware does not include pull-down,
    there will be a short toggle of both IOs to logical 0 and back to 1.
    
    It seems that the rfkill default is unblocked, so the driver should not
    glitch to output low during probe.
    It can lead e.g. to unexpected lte modem reconnect:
    
    [1] root@localhost:~# dmesg | grep "usb 2-1"
    [    2.136124] usb 2-1: new SuperSpeed USB device number 2 using xhci-hcd
    [   21.215278] usb 2-1: USB disconnect, device number 2
    [   28.833977] usb 2-1: new SuperSpeed USB device number 3 using xhci-hcd
    
    The glitch has been discovered on an arm64 board, now that device-tree
    support for the rfkill-gpio driver has finally appeared :).
    
    Change the flags for devm_gpiod_get_optional from GPIOD_OUT_LOW to
    GPIOD_ASIS to avoid any glitches.
    The rfkill driver will set the intended value during rfkill_sync_work.
    
    Fixes: 7176ba23f8b5 ("net: rfkill: add generic gpio rfkill driver")
    Signed-off-by: Josua Mayer <josua@solid-run.com>
    Link: https://lore.kernel.org/r/20231004163928.14609-1-josua@solid-run.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a6fc637c625cd7b045f72d448ec640db9d2f8cc
Author: Ma Ke <make_ruc2021@163.com>
Date:   Sat Oct 7 08:59:53 2023 +0800

    net: ipv6: fix return value check in esp_remove_trailer
    
    commit dad4e491e30b20f4dc615c9da65d2142d703b5c2 upstream.
    
    In esp_remove_trailer(), to avoid an unexpected result returned by
    pskb_trim, we should check the return value of pskb_trim().
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55d794cef3532ce2a974c37529a9bbd4a4bc1e2f
Author: Ma Ke <make_ruc2021@163.com>
Date:   Mon Oct 9 09:13:37 2023 +0800

    net: ipv4: fix return value check in esp_remove_trailer
    
    commit 513f61e2193350c7a345da98559b80f61aec4fa6 upstream.
    
    In esp_remove_trailer(), to avoid an unexpected result returned by
    pskb_trim, we should check the return value of pskb_trim().
    
    Signed-off-by: Ma Ke <make_ruc2021@163.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49b9165ead33dab3f4c48622c5512cde1468f95b
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Oct 9 10:18:01 2023 +0200

    wifi: cfg80211: use system_unbound_wq for wiphy work
    
    commit 91d20ab9d9ca035527af503d00e1e30d6c375f2a upstream.
    
    Since wiphy work items can run pretty much arbitrary
    code in the stack/driver, it can take longer to run
    all of this, so we shouldn't be using system_wq via
    schedule_work(). Also, we lock the wiphy (which is
    the reason this exists), so use system_unbound_wq.
    
    Reported-and-tested-by: Kalle Valo <kvalo@kernel.org>
    Fixes: a3ee4dc84c4e ("wifi: cfg80211: add a work abstraction with special semantics")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 405dbaf049816e7dd32e856be2549ccd7d967a4d
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Sep 5 13:23:03 2023 +0000

    xfrm: interface: use DEV_STATS_INC()
    
    commit f7c4e3e5d4f6609b4725a97451948ca2e425379a upstream.
    
    syzbot/KCSAN reported data-races in xfrm whenever dev->stats fields
    are updated.
    
    It appears all of these updates can happen from multiple cpus.
    
    Adopt SMP safe DEV_STATS_INC() to update dev->stats fields.
    
    BUG: KCSAN: data-race in xfrmi_xmit / xfrmi_xmit
    
    read-write to 0xffff88813726b160 of 8 bytes by task 23986 on cpu 1:
    xfrmi_xmit+0x74e/0xb20 net/xfrm/xfrm_interface_core.c:583
    __netdev_start_xmit include/linux/netdevice.h:4889 [inline]
    netdev_start_xmit include/linux/netdevice.h:4903 [inline]
    xmit_one net/core/dev.c:3544 [inline]
    dev_hard_start_xmit+0x11b/0x3f0 net/core/dev.c:3560
    __dev_queue_xmit+0xeee/0x1de0 net/core/dev.c:4340
    dev_queue_xmit include/linux/netdevice.h:3082 [inline]
    neigh_connected_output+0x231/0x2a0 net/core/neighbour.c:1581
    neigh_output include/net/neighbour.h:542 [inline]
    ip_finish_output2+0x74a/0x850 net/ipv4/ip_output.c:230
    ip_finish_output+0xf4/0x240 net/ipv4/ip_output.c:318
    NF_HOOK_COND include/linux/netfilter.h:293 [inline]
    ip_output+0xe5/0x1b0 net/ipv4/ip_output.c:432
    dst_output include/net/dst.h:458 [inline]
    ip_local_out net/ipv4/ip_output.c:127 [inline]
    ip_send_skb+0x72/0xe0 net/ipv4/ip_output.c:1487
    udp_send_skb+0x6a4/0x990 net/ipv4/udp.c:963
    udp_sendmsg+0x1249/0x12d0 net/ipv4/udp.c:1246
    inet_sendmsg+0x63/0x80 net/ipv4/af_inet.c:840
    sock_sendmsg_nosec net/socket.c:730 [inline]
    sock_sendmsg net/socket.c:753 [inline]
    ____sys_sendmsg+0x37c/0x4d0 net/socket.c:2540
    ___sys_sendmsg net/socket.c:2594 [inline]
    __sys_sendmmsg+0x269/0x500 net/socket.c:2680
    __do_sys_sendmmsg net/socket.c:2709 [inline]
    __se_sys_sendmmsg net/socket.c:2706 [inline]
    __x64_sys_sendmmsg+0x57/0x60 net/socket.c:2706
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read-write to 0xffff88813726b160 of 8 bytes by task 23987 on cpu 0:
    xfrmi_xmit+0x74e/0xb20 net/xfrm/xfrm_interface_core.c:583
    __netdev_start_xmit include/linux/netdevice.h:4889 [inline]
    netdev_start_xmit include/linux/netdevice.h:4903 [inline]
    xmit_one net/core/dev.c:3544 [inline]
    dev_hard_start_xmit+0x11b/0x3f0 net/core/dev.c:3560
    __dev_queue_xmit+0xeee/0x1de0 net/core/dev.c:4340
    dev_queue_xmit include/linux/netdevice.h:3082 [inline]
    neigh_connected_output+0x231/0x2a0 net/core/neighbour.c:1581
    neigh_output include/net/neighbour.h:542 [inline]
    ip_finish_output2+0x74a/0x850 net/ipv4/ip_output.c:230
    ip_finish_output+0xf4/0x240 net/ipv4/ip_output.c:318
    NF_HOOK_COND include/linux/netfilter.h:293 [inline]
    ip_output+0xe5/0x1b0 net/ipv4/ip_output.c:432
    dst_output include/net/dst.h:458 [inline]
    ip_local_out net/ipv4/ip_output.c:127 [inline]
    ip_send_skb+0x72/0xe0 net/ipv4/ip_output.c:1487
    udp_send_skb+0x6a4/0x990 net/ipv4/udp.c:963
    udp_sendmsg+0x1249/0x12d0 net/ipv4/udp.c:1246
    inet_sendmsg+0x63/0x80 net/ipv4/af_inet.c:840
    sock_sendmsg_nosec net/socket.c:730 [inline]
    sock_sendmsg net/socket.c:753 [inline]
    ____sys_sendmsg+0x37c/0x4d0 net/socket.c:2540
    ___sys_sendmsg net/socket.c:2594 [inline]
    __sys_sendmmsg+0x269/0x500 net/socket.c:2680
    __do_sys_sendmmsg net/socket.c:2709 [inline]
    __se_sys_sendmmsg net/socket.c:2706 [inline]
    __x64_sys_sendmmsg+0x57/0x60 net/socket.c:2706
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x00000000000010d7 -> 0x00000000000010d8
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 23987 Comm: syz-executor.5 Not tainted 6.5.0-syzkaller-10885-g0468be89b3fa #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023
    
    Fixes: f203b76d7809 ("xfrm: Add virtual xfrm interfaces")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b372db2b8d1829217db5c7fba2baffd30e160edb
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 8 18:13:59 2023 +0000

    xfrm: fix a data-race in xfrm_gen_index()
    
    commit 3e4bc23926b83c3c67e5f61ae8571602754131a6 upstream.
    
    xfrm_gen_index() mutual exclusion uses net->xfrm.xfrm_policy_lock.
    
    This means we must use a per-netns idx_generator variable,
    instead of a static one.
    Alternative would be to use an atomic variable.
    
    syzbot reported:
    
    BUG: KCSAN: data-race in xfrm_sk_policy_insert / xfrm_sk_policy_insert
    
    write to 0xffffffff87005938 of 4 bytes by task 29466 on cpu 0:
    xfrm_gen_index net/xfrm/xfrm_policy.c:1385 [inline]
    xfrm_sk_policy_insert+0x262/0x640 net/xfrm/xfrm_policy.c:2347
    xfrm_user_policy+0x413/0x540 net/xfrm/xfrm_state.c:2639
    do_ipv6_setsockopt+0x1317/0x2ce0 net/ipv6/ipv6_sockglue.c:943
    ipv6_setsockopt+0x57/0x130 net/ipv6/ipv6_sockglue.c:1012
    rawv6_setsockopt+0x21e/0x410 net/ipv6/raw.c:1054
    sock_common_setsockopt+0x61/0x70 net/core/sock.c:3697
    __sys_setsockopt+0x1c9/0x230 net/socket.c:2263
    __do_sys_setsockopt net/socket.c:2274 [inline]
    __se_sys_setsockopt net/socket.c:2271 [inline]
    __x64_sys_setsockopt+0x66/0x80 net/socket.c:2271
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffffffff87005938 of 4 bytes by task 29460 on cpu 1:
    xfrm_sk_policy_insert+0x13e/0x640
    xfrm_user_policy+0x413/0x540 net/xfrm/xfrm_state.c:2639
    do_ipv6_setsockopt+0x1317/0x2ce0 net/ipv6/ipv6_sockglue.c:943
    ipv6_setsockopt+0x57/0x130 net/ipv6/ipv6_sockglue.c:1012
    rawv6_setsockopt+0x21e/0x410 net/ipv6/raw.c:1054
    sock_common_setsockopt+0x61/0x70 net/core/sock.c:3697
    __sys_setsockopt+0x1c9/0x230 net/socket.c:2263
    __do_sys_setsockopt net/socket.c:2274 [inline]
    __se_sys_setsockopt net/socket.c:2271 [inline]
    __x64_sys_setsockopt+0x66/0x80 net/socket.c:2271
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x00006ad8 -> 0x00006b18
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 29460 Comm: syz-executor.1 Not tainted 6.5.0-rc5-syzkaller-00243-g9106536c1aa3 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023
    
    Fixes: 1121994c803f ("netns xfrm: policy insertion in netns")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3065fa2cdd7a66228fcb2cf7f0bded4011c6ca1c
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 11 10:24:29 2023 +0000

    xfrm: fix a data-race in xfrm_lookup_with_ifid()
    
    commit de5724ca38fd5e442bae9c1fab31942b6544012d upstream.
    
    syzbot complains about a race in xfrm_lookup_with_ifid() [1]
    
    When preparing commit 0a9e5794b21e ("xfrm: annotate data-race
    around use_time") I thought xfrm_lookup_with_ifid() was modifying
    a still private structure.
    
    [1]
    BUG: KCSAN: data-race in xfrm_lookup_with_ifid / xfrm_lookup_with_ifid
    
    write to 0xffff88813ea41108 of 8 bytes by task 8150 on cpu 1:
    xfrm_lookup_with_ifid+0xce7/0x12d0 net/xfrm/xfrm_policy.c:3218
    xfrm_lookup net/xfrm/xfrm_policy.c:3270 [inline]
    xfrm_lookup_route+0x3b/0x100 net/xfrm/xfrm_policy.c:3281
    ip6_dst_lookup_flow+0x98/0xc0 net/ipv6/ip6_output.c:1246
    send6+0x241/0x3c0 drivers/net/wireguard/socket.c:139
    wg_socket_send_skb_to_peer+0xbd/0x130 drivers/net/wireguard/socket.c:178
    wg_socket_send_buffer_to_peer+0xd6/0x100 drivers/net/wireguard/socket.c:200
    wg_packet_send_handshake_initiation drivers/net/wireguard/send.c:40 [inline]
    wg_packet_handshake_send_worker+0x10c/0x150 drivers/net/wireguard/send.c:51
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    write to 0xffff88813ea41108 of 8 bytes by task 15867 on cpu 0:
    xfrm_lookup_with_ifid+0xce7/0x12d0 net/xfrm/xfrm_policy.c:3218
    xfrm_lookup net/xfrm/xfrm_policy.c:3270 [inline]
    xfrm_lookup_route+0x3b/0x100 net/xfrm/xfrm_policy.c:3281
    ip6_dst_lookup_flow+0x98/0xc0 net/ipv6/ip6_output.c:1246
    send6+0x241/0x3c0 drivers/net/wireguard/socket.c:139
    wg_socket_send_skb_to_peer+0xbd/0x130 drivers/net/wireguard/socket.c:178
    wg_socket_send_buffer_to_peer+0xd6/0x100 drivers/net/wireguard/socket.c:200
    wg_packet_send_handshake_initiation drivers/net/wireguard/send.c:40 [inline]
    wg_packet_handshake_send_worker+0x10c/0x150 drivers/net/wireguard/send.c:51
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    value changed: 0x00000000651cd9d1 -> 0x00000000651cd9d2
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 15867 Comm: kworker/u4:58 Not tainted 6.6.0-rc4-syzkaller-00016-g5e62ed3b1c8a #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/06/2023
    Workqueue: wg-kex-wg2 wg_packet_handshake_send_worker
    
    Fixes: 0a9e5794b21e ("xfrm: annotate data-race around use_time")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c7ec9e9ea703e33c5c975e2302227bb5daa2e54
Author: Manish Chopra <manishc@marvell.com>
Date:   Fri Oct 13 18:48:12 2023 +0530

    qed: fix LL2 RX buffer allocation
    
    commit 2f3389c73832ad90b63208c0fc281ad080114c7a upstream.
    
    Driver allocates the LL2 rx buffers from kmalloc()
    area to construct the skb using slab_build_skb()
    
    The required size allocation seems to have overlooked
    for accounting both skb_shared_info size and device
    placement padding bytes which results into the below
    panic when doing skb_put() for a standard MTU sized frame.
    
    skbuff: skb_over_panic: text:ffffffffc0b0225f len:1514 put:1514
    head:ff3dabceaf39c000 data:ff3dabceaf39c042 tail:0x62c end:0x566
    dev:<NULL>
    …
    skb_panic+0x48/0x4a
    skb_put.cold+0x10/0x10
    qed_ll2b_complete_rx_packet+0x14f/0x260 [qed]
    qed_ll2_rxq_handle_completion.constprop.0+0x169/0x200 [qed]
    qed_ll2_rxq_completion+0xba/0x320 [qed]
    qed_int_sp_dpc+0x1a7/0x1e0 [qed]
    
    This patch fixes this by accouting skb_shared_info and device
    placement padding size bytes when allocating the buffers.
    
    Cc: David S. Miller <davem@davemloft.net>
    Fixes: 0a7fb11c23c0 ("qed: Add Light L2 support")
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc87f4db1417356289b7fe20eb7aea0369d33c38
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:54 2023 +0200

    ASoC: codecs: wcd938x: fix resource leaks on bind errors
    
    commit da29b94ed3547cee9d510d02eca4009f2de476cf upstream.
    
    Add the missing code to release resources on bind errors, including the
    references taken by wcd938x_sdw_device_get() which also need to be
    dropped on unbind().
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-4-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8092aed6237564a2f0910da4fea49a361cfeaff3
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:53 2023 +0200

    ASoC: codecs: wcd938x: fix unbind tear down order
    
    commit fa2f8a991ba4aa733ac1c3b1be0c86148aa4c52c upstream.
    
    Make sure to deregister the component before tearing down the resources
    it depends on during unbind().
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-3-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2974b20e40dac9fcd7aef4e98bf8556ce70b9c2
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:52 2023 +0200

    ASoC: codecs: wcd938x: drop bogus bind error handling
    
    commit bfbc79de60c53e5fed505390440b87ef59ee268c upstream.
    
    Drop the bogus error handling for a soundwire device backcast during
    bind() that cannot fail.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-2-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 569afdedde6851b66cb9254485c84187fcad403c
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:58 2023 +0200

    ASoC: codecs: wcd938x-sdw: fix runtime PM imbalance on probe errors
    
    commit c5c0383082eace13da2ffceeea154db2780165e7 upstream.
    
    Make sure to balance the runtime PM operations, including the disable
    count, on probe errors and on driver unbind.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-8-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d912daab475d309c0cb800e1cb9175d9be17cfd
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Oct 3 17:55:57 2023 +0200

    ASoC: codecs: wcd938x-sdw: fix use after free on driver unbind
    
    commit f0dfdcbe706462495d47982eecd13a61aabd644d upstream.
    
    Make sure to deregister the component when the driver is being unbound
    and before the underlying device-managed resources are freed.
    
    Fixes: 16572522aece ("ASoC: codecs: wcd938x-sdw: add SoundWire driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231003155558.27079-7-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d496b6638c2023a0b04c102b7a8d0c2dee0e4ab0
Author: Luka Guzenko <l.guzenko@web.de>
Date:   Tue Oct 17 00:13:28 2023 +0200

    ALSA: hda/relatek: Enable Mute LED on HP Laptop 15s-fq5xxx
    
    commit 56e85993896b914032d11e32ecbf8415e7b2f621 upstream.
    
    This HP Laptop uses ALC236 codec with COEF 0x07 controlling the
    mute LED. Enable existing quirk for this device.
    
    Signed-off-by: Luka Guzenko <l.guzenko@web.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231016221328.1521674-1-l.guzenko@web.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 086babbbf8e0ccee09dc04e55f89d6b1674f067f
Author: Artem Borisov <dedsa2002@gmail.com>
Date:   Sat Oct 14 10:50:42 2023 +0300

    ALSA: hda/realtek: Add quirk for ASUS ROG GU603ZV
    
    commit 5dedc9f53eef7ec07b23686381100d03fb259f50 upstream.
    
    Enables the SPI-connected Cirrus amp and the required pins
    for headset mic detection.
    
    As of BIOS version 313 it is still necessary to modify the
    ACPI table to add the related _DSD properties:
      https://gist.github.com/Flex1911/1bce378645fc95a5743671bd5deabfc8
    
    Signed-off-by: Artem Borisov <dedsa2002@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231014075044.17474-1-dedsa2002@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcf883e244dd52ccdb5aea50fbcc3139179ca864
Author: Kailang Yang <kailang@realtek.com>
Date:   Tue Oct 17 15:30:24 2023 +0800

    ALSA: hda/realtek - Fixed ASUS platform headset Mic issue
    
    commit c8c0a03ec1be6b3f3ec1ce91685351235212db19 upstream.
    
    ASUS platform Headset Mic was disable by default.
    Assigned verb table for Mic pin will enable it.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1155d914c20c40569f56d36c79254879@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9519099e323591ef56b52ac75746a74a4240e9a
Author: Chen-Yu Tsai <wenst@chromium.org>
Date:   Wed Oct 4 16:32:24 2023 +0800

    drm/mediatek: Correctly free sg_table in gem prime vmap
    
    commit dcc583c225e659d5da34b4ad83914fd6b51e3dbf upstream.
    
    The MediaTek DRM driver implements GEM PRIME vmap by fetching the
    sg_table for the object, iterating through the pages, and then
    vmapping them. In essence, unlike the GEM DMA helpers which vmap
    when the object is first created or imported, the MediaTek version
    does it on request.
    
    Unfortunately, the code never correctly frees the sg_table contents.
    This results in a kernel memory leak. On a Hayato device with a text
    console on the internal display, this results in the system running
    out of memory in a few days from all the console screen cursor updates.
    
    Add sg_free_table() to correctly free the contents of the sg_table. This
    was missing despite explicitly required by mtk_gem_prime_get_sg_table().
    
    Also move the "out" shortcut label to after the kfree() call for the
    sg_table. Having sg_free_table() together with kfree() makes more sense.
    The shortcut is only used when the object already has a kernel address,
    in which case the pointer is NULL and kfree() does nothing. Hence this
    change causes no functional change.
    
    Fixes: 3df64d7b0a4f ("drm/mediatek: Implement gem prime vmap/vunmap function")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: CK Hu <ck.hu@mediatek.com>
    Link: https://patchwork.kernel.org/project/dri-devel/patch/20231004083226.1940055-1-wenst@chromium.org/
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit add2eeda1d6e3ead1d61db70e37615e5ef6c5e75
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 12 16:28:01 2023 +0300

    drm/i915: Retry gtt fault when out of fence registers
    
    commit e339c6d628fe66c9b64bf31040a55770952aec57 upstream.
    
    If we can't find a free fence register to handle a fault in the GMADR
    range just return VM_FAULT_NOPAGE without populating the PTE so that
    userspace will retry the access and trigger another fault. Eventually
    we should find a free fence and the fault will get properly handled.
    
    A further improvement idea might be to reserve a fence (or one per CPU?)
    for the express purpose of handling faults without having to retry. But
    that would require some additional work.
    
    Looks like this may have gotten broken originally by
    commit 39965b376601 ("drm/i915: don't trash the gtt when running out of fences")
    as that changed the errno to -EDEADLK which wasn't handle by the gtt
    fault code either. But later in commit 2feeb52859fc ("drm/i915/gt: Fix
    -EDEADLK handling regression") I changed it again to -ENOBUFS as -EDEADLK
    was now getting used for the ww mutex dance. So this fix only makes
    sense after that last commit.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/9479
    Fixes: 2feeb52859fc ("drm/i915/gt: Fix -EDEADLK handling regression")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231012132801.16292-1-ville.syrjala@linux.intel.com
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    (cherry picked from commit 7f403caabe811b88ab0de3811ff3f4782c415761)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f691ec5a548257edb3aacd952e2a574e4e57b2c4
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Oct 2 13:54:28 2023 +0300

    nvmet-tcp: Fix a possible UAF in queue intialization setup
    
    commit d920abd1e7c4884f9ecd0749d1921b7ab19ddfbd upstream.
    
    From Alon:
    "Due to a logical bug in the NVMe-oF/TCP subsystem in the Linux kernel,
    a malicious user can cause a UAF and a double free, which may lead to
    RCE (may also lead to an LPE in case the attacker already has local
    privileges)."
    
    Hence, when a queue initialization fails after the ahash requests are
    allocated, it is guaranteed that the queue removal async work will be
    called, hence leave the deallocation to the queue removal.
    
    Also, be extra careful not to continue processing the socket, so set
    queue rcv_state to NVMET_TCP_RECV_ERR upon a socket error.
    
    Cc: stable@vger.kernel.org
    Reported-by: Alon Zahavi <zahavi.alon@gmail.com>
    Tested-by: Alon Zahavi <zahavi.alon@gmail.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02322c5177e819fb68583de9a02c402860fa1685
Author: Florian Westphal <fw@strlen.de>
Date:   Sun Oct 8 19:36:53 2023 +0200

    netfilter: nft_payload: fix wrong mac header matching
    
    commit d351c1ea2de3e36e608fc355d8ae7d0cc80e6cd6 upstream.
    
    mcast packets get looped back to the local machine.
    Such packets have a 0-length mac header, we should treat
    this like "mac header not set" and abort rule evaluation.
    
    As-is, we just copy data from the network header instead.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Reported-by: Blažej Krajňák <krajnak@levonet.sk>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36a315c923e02b27caaa136b921ba42ceb2f07bc
Author: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
Date:   Fri Jun 30 16:22:53 2023 +0400

    fs/ntfs3: fix deadlock in mark_as_free_ex
    
    commit bfbe5b31caa74ab97f1784fe9ade5f45e0d3de91 upstream.
    
    Reported-by: syzbot+e94d98936a0ed08bde43@syzkaller.appspotmail.com
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1f2638e315bac360e41277f3d2bc1017a542ef1
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Thu Apr 20 15:46:22 2023 +0800

    fs/ntfs3: fix panic about slab-out-of-bounds caused by ntfs_list_ea()
    
    commit 8e7e27b2ee1e19c4040d4987e345f678a74c0aed upstream.
    
    Here is a BUG report about linux-6.1 from syzbot, but it still remains
    within upstream:
    
    BUG: KASAN: slab-out-of-bounds in ntfs_list_ea fs/ntfs3/xattr.c:191 [inline]
    BUG: KASAN: slab-out-of-bounds in ntfs_listxattr+0x401/0x570 fs/ntfs3/xattr.c:710
    Read of size 1 at addr ffff888021acaf3d by task syz-executor128/3632
    
    Call Trace:
     kasan_report+0x139/0x170 mm/kasan/report.c:495
     ntfs_list_ea fs/ntfs3/xattr.c:191 [inline]
     ntfs_listxattr+0x401/0x570 fs/ntfs3/xattr.c:710
     vfs_listxattr fs/xattr.c:457 [inline]
     listxattr+0x293/0x2d0 fs/xattr.c:804
     path_listxattr fs/xattr.c:828 [inline]
     __do_sys_llistxattr fs/xattr.c:846 [inline]
    
    Before derefering field members of `ea` in unpacked_ea_size(), we need to
    check whether the EA_FULL struct is located in access validate range.
    
    Similarly, when derefering `ea->name` field member, we need to check
    whethe the ea->name is located in access validate range, too.
    
    Fixes: be71b5cba2e6 ("fs/ntfs3: Add attrib operations")
    Reported-by: syzbot+9fcea5ef6dc4dc72d334@syzkaller.appspotmail.com
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    [almaz.alexandrovich@paragon-software.com: took the ret variable out of the loop block]
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb80a28fef2b8be5854c5e8961d0d166c7960c9a
Author: Ziqi Zhao <astrajoan@yahoo.com>
Date:   Wed Aug 9 12:11:18 2023 -0700

    fs/ntfs3: Fix possible null-pointer dereference in hdr_find_e()
    
    commit 1f9b94af923c88539426ed811ae7e9543834a5c5 upstream.
    
    Upon investigation of the C reproducer provided by Syzbot, it seemed
    the reproducer was trying to mount a corrupted NTFS filesystem, then
    issue a rename syscall to some nodes in the filesystem. This can be
    shown by modifying the reproducer to only include the mount syscall,
    and investigating the filesystem by e.g. `ls` and `rm` commands. As a
    result, during the problematic call to `hdr_fine_e`, the `inode` being
    supplied did not go through `indx_init`, hence the `cmp` function
    pointer was never set.
    
    The fix is simply to check whether `cmp` is not set, and return NULL
    if that's the case, in order to be consistent with other error
    scenarios of the `hdr_find_e` method. The rationale behind this patch
    is that:
    
    - We should prevent crashing the kernel even if the mounted filesystem
      is corrupted. Any syscalls made on the filesystem could return
      invalid, but the kernel should be able to sustain these calls.
    
    - Only very specific corruption would lead to this bug, so it would be
      a pretty rare case in actual usage anyways. Therefore, introducing a
      check to specifically protect against this bug seems appropriate.
      Because of its rarity, an `unlikely` clause is used to wrap around
      this nullity check.
    
    Reported-by: syzbot+60cf892fc31d1f4358fc@syzkaller.appspotmail.com
    Signed-off-by: Ziqi Zhao <astrajoan@yahoo.com>
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4ae85b883f3c373af888154c9e04f9ca8a69afd
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Oct 18 11:23:54 2023 -0700

    mptcp: more conservative check for zero probes
    
    commit 72377ab2d671befd6390a1d5677f5cca61235b65 upstream.
    
    Christoph reported that the MPTCP protocol can find the subflow-level
    write queue unexpectedly not empty while crafting a zero-window probe,
    hitting a warning:
    
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 188 at net/mptcp/protocol.c:1312 mptcp_sendmsg_frag+0xc06/0xe70
    Modules linked in:
    CPU: 0 PID: 188 Comm: kworker/0:2 Not tainted 6.6.0-rc2-g1176aa719d7a #47
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
    Workqueue: events mptcp_worker
    RIP: 0010:mptcp_sendmsg_frag+0xc06/0xe70 net/mptcp/protocol.c:1312
    RAX: 47d0530de347ff6a RBX: 47d0530de347ff6b RCX: ffff8881015d3c00
    RDX: ffff8881015d3c00 RSI: 47d0530de347ff6b RDI: 47d0530de347ff6b
    RBP: 47d0530de347ff6b R08: ffffffff8243c6a8 R09: ffffffff82042d9c
    R10: 0000000000000002 R11: ffffffff82056850 R12: ffff88812a13d580
    R13: 0000000000000001 R14: ffff88812b375e50 R15: ffff88812bbf3200
    FS:  0000000000000000(0000) GS:ffff88813bc00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000695118 CR3: 0000000115dfc001 CR4: 0000000000170ef0
    Call Trace:
     <TASK>
     __subflow_push_pending+0xa4/0x420 net/mptcp/protocol.c:1545
     __mptcp_push_pending+0x128/0x3b0 net/mptcp/protocol.c:1614
     mptcp_release_cb+0x218/0x5b0 net/mptcp/protocol.c:3391
     release_sock+0xf6/0x100 net/core/sock.c:3521
     mptcp_worker+0x6e8/0x8f0 net/mptcp/protocol.c:2746
     process_scheduled_works+0x341/0x690 kernel/workqueue.c:2630
     worker_thread+0x3a7/0x610 kernel/workqueue.c:2784
     kthread+0x143/0x180 kernel/kthread.c:388
     ret_from_fork+0x4d/0x60 arch/x86/kernel/process.c:147
     ret_from_fork_asm+0x1b/0x30 arch/x86/entry/entry_64.S:304
     </TASK>
    
    The root cause of the issue is that expectations are wrong: e.g. due
    to MPTCP-level re-injection we can hit the critical condition.
    
    Explicitly avoid the zero-window probe when the subflow write queue
    is not empty and drop the related warnings.
    
    Reported-by: Christoph Paasch <cpaasch@apple.com>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/444
    Fixes: f70cad1085d1 ("mptcp: stop relying on tcp_tx_skb_cache")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Link: https://lore.kernel.org/r/20231018-send-net-20231018-v1-3-17ecb002e41d@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80990979a94655582ccf6f8608d478a47cb620c1
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Oct 18 11:23:53 2023 -0700

    tcp: check mptcp-level constraints for backlog coalescing
    
    commit 6db8a37dfc541e059851652cfd4f0bb13b8ff6af upstream.
    
    The MPTCP protocol can acquire the subflow-level socket lock and
    cause the tcp backlog usage. When inserting new skbs into the
    backlog, the stack will try to coalesce them.
    
    Currently, we have no check in place to ensure that such coalescing
    will respect the MPTCP-level DSS, and that may cause data stream
    corruption, as reported by Christoph.
    
    Address the issue by adding the relevant admission check for coalescing
    in tcp_add_backlog().
    
    Note the issue is not easy to reproduce, as the MPTCP protocol tries
    hard to avoid acquiring the subflow-level socket lock.
    
    Fixes: 648ef4b88673 ("mptcp: Implement MPTCP receive path")
    Cc: stable@vger.kernel.org
    Reported-by: Christoph Paasch <cpaasch@apple.com>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/420
    Reviewed-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Mat Martineau <martineau@kernel.org>
    Link: https://lore.kernel.org/r/20231018-send-net-20231018-v1-2-17ecb002e41d@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7e65c03d5bff682b9266b37345b861a808024cb
Author: Dan Clash <daclash@linux.microsoft.com>
Date:   Thu Oct 12 14:55:18 2023 -0700

    audit,io_uring: io_uring openat triggers audit reference count underflow
    
    commit 03adc61edad49e1bbecfb53f7ea5d78f398fe368 upstream.
    
    An io_uring openat operation can update an audit reference count
    from multiple threads resulting in the call trace below.
    
    A call to io_uring_submit() with a single openat op with a flag of
    IOSQE_ASYNC results in the following reference count updates.
    
    These first part of the system call performs two increments that do not race.
    
    do_syscall_64()
      __do_sys_io_uring_enter()
        io_submit_sqes()
          io_openat_prep()
            __io_openat_prep()
              getname()
                getname_flags()       /* update 1 (increment) */
                  __audit_getname()   /* update 2 (increment) */
    
    The openat op is queued to an io_uring worker thread which starts the
    opportunity for a race.  The system call exit performs one decrement.
    
    do_syscall_64()
      syscall_exit_to_user_mode()
        syscall_exit_to_user_mode_prepare()
          __audit_syscall_exit()
            audit_reset_context()
               putname()              /* update 3 (decrement) */
    
    The io_uring worker thread performs one increment and two decrements.
    These updates can race with the system call decrement.
    
    io_wqe_worker()
      io_worker_handle_work()
        io_wq_submit_work()
          io_issue_sqe()
            io_openat()
              io_openat2()
                do_filp_open()
                  path_openat()
                    __audit_inode()   /* update 4 (increment) */
                putname()             /* update 5 (decrement) */
            __audit_uring_exit()
              audit_reset_context()
                putname()             /* update 6 (decrement) */
    
    The fix is to change the refcnt member of struct audit_names
    from int to atomic_t.
    
    kernel BUG at fs/namei.c:262!
    Call Trace:
    ...
     ? putname+0x68/0x70
     audit_reset_context.part.0.constprop.0+0xe1/0x300
     __audit_uring_exit+0xda/0x1c0
     io_issue_sqe+0x1f3/0x450
     ? lock_timer_base+0x3b/0xd0
     io_wq_submit_work+0x8d/0x2b0
     ? __try_to_del_timer_sync+0x67/0xa0
     io_worker_handle_work+0x17c/0x2b0
     io_wqe_worker+0x10a/0x350
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/lkml/MW2PR2101MB1033FFF044A258F84AEAA584F1C9A@MW2PR2101MB1033.namprd21.prod.outlook.com/
    Fixes: 5bd2182d58e9 ("audit,io_uring,io-wq: add some basic audit support to io_uring")
    Signed-off-by: Dan Clash <daclash@linux.microsoft.com>
    Link: https://lore.kernel.org/r/20231012215518.GA4048@linuxonhyperv3.guj3yctzbm1etfxqx2vob5hsef.xx.internal.cloudapp.net
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a556a0df8df0ad27b759a41dffe47eba3db1d98f
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Thu Sep 28 20:33:53 2023 +0300

    x86: KVM: SVM: refresh AVIC inhibition in svm_leave_nested()
    
    commit 3fdc6087df3be73a212a81ce5dd6516638568806 upstream.
    
    svm_leave_nested() similar to a nested VM exit, get the vCPU out of nested
    mode and thus should end the local inhibition of AVIC on this vCPU.
    
    Failure to do so, can lead to hangs on guest reboot.
    
    Raise the KVM_REQ_APICV_UPDATE request to refresh the AVIC state of the
    current vCPU in this case.
    
    Fixes: f44509f849fe ("KVM: x86: SVM: allow AVIC to co-exist with a nested guest running")
    Cc: stable@vger.kernel.org
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230928173354.217464-4-mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54f030271d6b81996e5cb1059fd846f6a0af4bb8
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Thu Sep 28 20:33:52 2023 +0300

    x86: KVM: SVM: add support for Invalid IPI Vector interception
    
    commit 2dcf37abf9d3aab7f975002d29fc7c17272def38 upstream.
    
    In later revisions of AMD's APM, there is a new 'incomplete IPI' exit code:
    
    "Invalid IPI Vector - The vector for the specified IPI was set to an
    illegal value (VEC < 16)"
    
    Note that tests on Zen2 machine show that this VM exit doesn't happen and
    instead AVIC just does nothing.
    
    Add support for this exit code by doing nothing, instead of filling
    the kernel log with errors.
    
    Also replace an unthrottled 'pr_err()' if another unknown incomplete
    IPI exit happens with vcpu_unimpl()
    
    (e.g in case AMD adds yet another 'Invalid IPI' exit reason)
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230928173354.217464-3-mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 482565df3508f6e246996caa3947373ab1d1369b
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Sep 27 17:19:53 2023 -0700

    KVM: x86: Constrain guest-supported xfeatures only at KVM_GET_XSAVE{2}
    
    commit 8647c52e9504c99752a39f1d44f6268f82c40a5c upstream.
    
    Mask off xfeatures that aren't exposed to the guest only when saving guest
    state via KVM_GET_XSAVE{2} instead of modifying user_xfeatures directly.
    Preserving the maximal set of xfeatures in user_xfeatures restores KVM's
    ABI for KVM_SET_XSAVE, which prior to commit ad856280ddea ("x86/kvm/fpu:
    Limit guest user_xfeatures to supported bits of XCR0") allowed userspace
    to load xfeatures that are supported by the host, irrespective of what
    xfeatures are exposed to the guest.
    
    There is no known use case where userspace *intentionally* loads xfeatures
    that aren't exposed to the guest, but the bug fixed by commit ad856280ddea
    was specifically that KVM_GET_SAVE{2} would save xfeatures that weren't
    exposed to the guest, e.g. would lead to userspace unintentionally loading
    guest-unsupported xfeatures when live migrating a VM.
    
    Restricting KVM_SET_XSAVE to guest-supported xfeatures is especially
    problematic for QEMU-based setups, as QEMU has a bug where instead of
    terminating the VM if KVM_SET_XSAVE fails, QEMU instead simply stops
    loading guest state, i.e. resumes the guest after live migration with
    incomplete guest state, and ultimately results in guest data corruption.
    
    Note, letting userspace restore all host-supported xfeatures does not fix
    setups where a VM is migrated from a host *without* commit ad856280ddea,
    to a target with a subset of host-supported xfeatures.  However there is
    no way to safely address that scenario, e.g. KVM could silently drop the
    unsupported features, but that would be a clear violation of KVM's ABI and
    so would require userspace to opt-in, at which point userspace could
    simply be updated to sanitize the to-be-loaded XSAVE state.
    
    Reported-by: Tyler Stachecki <stachecki.tyler@gmail.com>
    Closes: https://lore.kernel.org/all/20230914010003.358162-1-tstachecki@bloomberg.net
    Fixes: ad856280ddea ("x86/kvm/fpu: Limit guest user_xfeatures to supported bits of XCR0")
    Cc: stable@vger.kernel.org
    Cc: Leonardo Bras <leobras@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Message-Id: <20230928001956.924301-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20695711e2984688e0c3d93ec3e52adb22775115
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Sep 27 17:19:52 2023 -0700

    x86/fpu: Allow caller to constrain xfeatures when copying to uabi buffer
    
    commit 18164f66e6c59fda15c198b371fa008431efdb22 upstream.
    
    Plumb an xfeatures mask into __copy_xstate_to_uabi_buf() so that KVM can
    constrain which xfeatures are saved into the userspace buffer without
    having to modify the user_xfeatures field in KVM's guest_fpu state.
    
    KVM's ABI for KVM_GET_XSAVE{2} is that features that are not exposed to
    guest must not show up in the effective xstate_bv field of the buffer.
    Saving only the guest-supported xfeatures allows userspace to load the
    saved state on a different host with a fewer xfeatures, so long as the
    target host supports the xfeatures that are exposed to the guest.
    
    KVM currently sets user_xfeatures directly to restrict KVM_GET_XSAVE{2} to
    the set of guest-supported xfeatures, but doing so broke KVM's historical
    ABI for KVM_SET_XSAVE, which allows userspace to load any xfeatures that
    are supported by the *host*.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230928001956.924301-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57d0639f60f1ff04cbe7fd52823b94b894d7f812
Author: Joerg Roedel <jroedel@suse.de>
Date:   Mon Oct 16 14:42:50 2023 +0200

    x86/sev: Check for user-space IOIO pointing to kernel space
    
    Upstream commit: 63e44bc52047f182601e7817da969a105aa1f721
    
    Check the memory operand of INS/OUTS before emulating the instruction.
    The #VC exception can get raised from user-space, but the memory operand
    can be manipulated to access kernel memory before the emulation actually
    begins and after the exception handler has run.
    
      [ bp: Massage commit message. ]
    
    Fixes: 597cfe48212a ("x86/boot/compressed/64: Setup a GHCB-based VC Exception handler")
    Reported-by: Tom Dohrmann <erbse.13@gmx.de>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit def94eb9a804acdcdba5b959ad72cf9119f03f3b
Author: Joerg Roedel <jroedel@suse.de>
Date:   Wed Jun 21 17:42:42 2023 +0200

    x86/sev: Check IOBM for IOIO exceptions from user-space
    
    Upstream commit: b9cb9c45583b911e0db71d09caa6b56469eb2bdf
    
    Check the IO permission bitmap (if present) before emulating IOIO #VC
    exceptions for user-space. These permissions are checked by hardware
    already before the #VC is raised, but due to the VC-handler decoding
    race it needs to be checked again in software.
    
    Fixes: 25189d08e516 ("x86/sev-es: Add support for handling IOIO exceptions")
    Reported-by: Tom Dohrmann <erbse.13@gmx.de>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: Tom Dohrmann <erbse.13@gmx.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95ff590b802757f8b6bd32e7e5b21ef9b91e2583
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Thu Oct 5 11:06:36 2023 +0200

    x86/sev: Disable MMIO emulation from user mode
    
    Upstream commit: a37cd2a59d0cb270b1bba568fd3a3b8668b9d3ba
    
    A virt scenario can be constructed where MMIO memory can be user memory.
    When that happens, a race condition opens between when the hardware
    raises the #VC and when the #VC handler gets to emulate the instruction.
    
    If the MOVS is replaced with a MOVS accessing kernel memory in that
    small race window, then write to kernel memory happens as the access
    checks are not done at emulation time.
    
    Disable MMIO emulation in user mode temporarily until a sensible use
    case appears and justifies properly handling the race window.
    
    Fixes: 0118b604c2c9 ("x86/sev-es: Handle MMIO String Instructions")
    Reported-by: Tom Dohrmann <erbse.13@gmx.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: Tom Dohrmann <erbse.13@gmx.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19ffa9b2515a60c79202872098c0c9ba519062cc
Author: Jim Mattson <jmattson@google.com>
Date:   Mon Sep 25 17:34:47 2023 +0000

    KVM: x86: Mask LVTPC when handling a PMI
    
    commit a16eb25b09c02a54c1c1b449d4b6cfa2cf3f013a upstream.
    
    Per the SDM, "When the local APIC handles a performance-monitoring
    counters interrupt, it automatically sets the mask flag in the LVT
    performance counter register."  Add this behavior to KVM's local APIC
    emulation.
    
    Failure to mask the LVTPC entry results in spurious PMIs, e.g. when
    running Linux as a guest, PMI handlers that do a "late_ack" spew a large
    number of "dazed and confused" spurious NMI warnings.
    
    Fixes: f5132b01386b ("KVM: Expose a version 2 architectural PMU to a guests")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Tested-by: Mingwei Zhang <mizhang@google.com>
    Signed-off-by: Mingwei Zhang <mizhang@google.com>
    Link: https://lore.kernel.org/r/20230925173448.3518223-3-mizhang@google.com
    [sean: massage changelog, correct Fixes]
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d11cfd1f30d6a243f74e02ae975dc69e819d3da1
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Oct 6 10:21:04 2023 +0200

    regmap: fix NULL deref on lookup
    
    commit c6df843348d6b71ea986266c12831cb60c2cf325 upstream.
    
    Not all regmaps have a name so make sure to check for that to avoid
    dereferencing a NULL pointer when dev_get_regmap() is used to lookup a
    named regmap.
    
    Fixes: e84861fec32d ("regmap: dev_get_regmap_match(): fix string comparison")
    Cc: stable@vger.kernel.org      # 5.8
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231006082104.16707-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7dbdbe3800a908eecd4975c31be47dd45e2104a
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Oct 13 20:41:29 2023 +0200

    nfc: nci: fix possible NULL pointer dereference in send_acknowledge()
    
    commit 7937609cd387246aed994e81aa4fa951358fba41 upstream.
    
    Handle memory allocation failure from nci_skb_alloc() (calling
    alloc_skb()) to avoid possible NULL pointer dereference.
    
    Reported-by: 黄思聪 <huangsicong@iie.ac.cn>
    Fixes: 391d8a2da787 ("NFC: Add NCI over SPI receive")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20231013184129.18738-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb8e1608b0e558650be083dc952b17df3b48a350
Author: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
Date:   Sat Oct 7 01:14:21 2023 -0400

    btrfs: fix stripe length calculation for non-zoned data chunk allocation
    
    commit 8a540e990d7da36813cb71a4a422712bfba448a4 upstream.
    
    Commit f6fca3917b4d "btrfs: store chunk size in space-info struct"
    broke data chunk allocations on non-zoned multi-device filesystems when
    using default chunk_size.  Commit 5da431b71d4b "btrfs: fix the max chunk
    size and stripe length calculation" partially fixed that, and this patch
    completes the fix for that case.
    
    After commit f6fca3917b4d and 5da431b71d4b, the sequence of events for
    a data chunk allocation on a non-zoned filesystem is:
    
            1.  btrfs_create_chunk calls init_alloc_chunk_ctl, which copies
            space_info->chunk_size (default 10 GiB) to ctl->max_stripe_len
            unmodified.  Before f6fca3917b4d, ctl->max_stripe_len value was
            1 GiB for non-zoned data chunks and not configurable.
    
            2.  btrfs_create_chunk calls gather_device_info which consumes
            and produces more fields of chunk_ctl.
    
            3.  gather_device_info multiplies ctl->max_stripe_len by
            ctl->dev_stripes (which is 1 in all cases except dup)
            and calls find_free_dev_extent with that number as num_bytes.
    
            4.  find_free_dev_extent locates the first dev_extent hole on
            a device which is at least as large as num_bytes.  With default
            max_chunk_size from f6fca3917b4d, it finds the first hole which is
            longer than 10 GiB, or the largest hole if that hole is shorter
            than 10 GiB.  This is different from the pre-f6fca3917b4d
            behavior, where num_bytes is 1 GiB, and find_free_dev_extent
            may choose a different hole.
    
            5.  gather_device_info repeats step 4 with all devices to find
            the first or largest dev_extent hole that can be allocated on
            each device.
    
            6.  gather_device_info sorts the device list by the hole size
            on each device, using total unallocated space on each device to
            break ties, then returns to btrfs_create_chunk with the list.
    
            7.  btrfs_create_chunk calls decide_stripe_size_regular.
    
            8.  decide_stripe_size_regular finds the largest stripe_len that
            fits across the first nr_devs device dev_extent holes that were
            found by gather_device_info (and satisfies other constraints
            on stripe_len that are not relevant here).
    
            9.  decide_stripe_size_regular caps the length of the stripe it
            computed at 1 GiB.  This cap appeared in 5da431b71d4b to correct
            one of the other regressions introduced in f6fca3917b4d.
    
            10.  btrfs_create_chunk creates a new chunk with the above
            computed size and number of devices.
    
    At step 4, gather_device_info() has found a location where stripe up to
    10 GiB in length could be allocated on several devices, and selected
    which devices should have a dev_extent allocated on them, but at step
    9, only 1 GiB of the space that was found on each device can be used.
    This mismatch causes new suboptimal chunk allocation cases that did not
    occur in pre-f6fca3917b4d kernels.
    
    Consider a filesystem using raid1 profile with 3 devices.  After some
    balances, device 1 has 10x 1 GiB unallocated space, while devices 2
    and 3 have 1x 10 GiB unallocated space, i.e. the same total amount of
    space, but distributed across different numbers of dev_extent holes.
    For visualization, let's ignore all the chunks that were allocated before
    this point, and focus on the remaining holes:
    
            Device 1:  [_] [_] [_] [_] [_] [_] [_] [_] [_] [_] (10x 1 GiB unallocated)
            Device 2:  [__________] (10 GiB contig unallocated)
            Device 3:  [__________] (10 GiB contig unallocated)
    
    Before f6fca3917b4d, the allocator would fill these optimally by
    allocating chunks with dev_extents on devices 1 and 2 ([12]), 1 and 3
    ([13]), or 2 and 3 ([23]):
    
            [after 0 chunk allocations]
            Device 1:  [_] [_] [_] [_] [_] [_] [_] [_] [_] [_] (10 GiB)
            Device 2:  [__________] (10 GiB)
            Device 3:  [__________] (10 GiB)
    
            [after 1 chunk allocation]
            Device 1:  [12] [_] [_] [_] [_] [_] [_] [_] [_] [_]
            Device 2:  [12] [_________] (9 GiB)
            Device 3:  [__________] (10 GiB)
    
            [after 2 chunk allocations]
            Device 1:  [12] [13] [_] [_] [_] [_] [_] [_] [_] [_] (8 GiB)
            Device 2:  [12] [_________] (9 GiB)
            Device 3:  [13] [_________] (9 GiB)
    
            [after 3 chunk allocations]
            Device 1:  [12] [13] [12] [_] [_] [_] [_] [_] [_] [_] (7 GiB)
            Device 2:  [12] [12] [________] (8 GiB)
            Device 3:  [13] [_________] (9 GiB)
    
            [...]
    
            [after 12 chunk allocations]
            Device 1:  [12] [13] [12] [13] [12] [13] [12] [13] [_] [_] (2 GiB)
            Device 2:  [12] [12] [23] [23] [12] [12] [23] [23] [__] (2 GiB)
            Device 3:  [13] [13] [23] [23] [13] [23] [13] [23] [__] (2 GiB)
    
            [after 13 chunk allocations]
            Device 1:  [12] [13] [12] [13] [12] [13] [12] [13] [12] [_] (1 GiB)
            Device 2:  [12] [12] [23] [23] [12] [12] [23] [23] [12] [_] (1 GiB)
            Device 3:  [13] [13] [23] [23] [13] [23] [13] [23] [__] (2 GiB)
    
            [after 14 chunk allocations]
            Device 1:  [12] [13] [12] [13] [12] [13] [12] [13] [12] [13] (full)
            Device 2:  [12] [12] [23] [23] [12] [12] [23] [23] [12] [_] (1 GiB)
            Device 3:  [13] [13] [23] [23] [13] [23] [13] [23] [13] [_] (1 GiB)
    
            [after 15 chunk allocations]
            Device 1:  [12] [13] [12] [13] [12] [13] [12] [13] [12] [13] (full)
            Device 2:  [12] [12] [23] [23] [12] [12] [23] [23] [12] [23] (full)
            Device 3:  [13] [13] [23] [23] [13] [23] [13] [23] [13] [23] (full)
    
    This allocates all of the space with no waste.  The sorting function used
    by gather_device_info considers free space holes above 1 GiB in length
    to be equal to 1 GiB, so once find_free_dev_extent locates a sufficiently
    long hole on each device, all the holes appear equal in the sort, and the
    comparison falls back to sorting devices by total free space.  This keeps
    usable space on each device equal so they can all be filled completely.
    
    After f6fca3917b4d, the allocator prefers the devices with larger holes
    over the devices with more free space, so it makes bad allocation choices:
    
            [after 1 chunk allocation]
            Device 1:  [_] [_] [_] [_] [_] [_] [_] [_] [_] [_] (10 GiB)
            Device 2:  [23] [_________] (9 GiB)
            Device 3:  [23] [_________] (9 GiB)
    
            [after 2 chunk allocations]
            Device 1:  [_] [_] [_] [_] [_] [_] [_] [_] [_] [_] (10 GiB)
            Device 2:  [23] [23] [________] (8 GiB)
            Device 3:  [23] [23] [________] (8 GiB)
    
            [after 3 chunk allocations]
            Device 1:  [_] [_] [_] [_] [_] [_] [_] [_] [_] [_] (10 GiB)
            Device 2:  [23] [23] [23] [_______] (7 GiB)
            Device 3:  [23] [23] [23] [_______] (7 GiB)
    
            [...]
    
            [after 9 chunk allocations]
            Device 1:  [_] [_] [_] [_] [_] [_] [_] [_] [_] [_] (10 GiB)
            Device 2:  [23] [23] [23] [23] [23] [23] [23] [23] [23] [_] (1 GiB)
            Device 3:  [23] [23] [23] [23] [23] [23] [23] [23] [23] [_] (1 GiB)
    
            [after 10 chunk allocations]
            Device 1:  [12] [_] [_] [_] [_] [_] [_] [_] [_] [_] (9 GiB)
            Device 2:  [23] [23] [23] [23] [23] [23] [23] [23] [12] (full)
            Device 3:  [23] [23] [23] [23] [23] [23] [23] [23] [_] (1 GiB)
    
            [after 11 chunk allocations]
            Device 1:  [12] [13] [_] [_] [_] [_] [_] [_] [_] [_] (8 GiB)
            Device 2:  [23] [23] [23] [23] [23] [23] [23] [23] [12] (full)
            Device 3:  [23] [23] [23] [23] [23] [23] [23] [23] [13] (full)
    
    No further allocations are possible, with 8 GiB wasted (4 GiB of data
    space).  The sort in gather_device_info now considers free space in
    holes longer than 1 GiB to be distinct, so it will prefer devices 2 and
    3 over device 1 until all but 1 GiB is allocated on devices 2 and 3.
    At that point, with only 1 GiB unallocated on every device, the largest
    hole length on each device is equal at 1 GiB, so the sort finally moves
    to ordering the devices with the most free space, but by this time it
    is too late to make use of the free space on device 1.
    
    Note that it's possible to contrive a case where the pre-f6fca3917b4d
    allocator fails the same way, but these cases generally have extensive
    dev_extent fragmentation as a precondition (e.g. many holes of 768M
    in length on one device, and few holes 1 GiB in length on the others).
    With the regression in f6fca3917b4d, bad chunk allocation can occur even
    under optimal conditions, when all dev_extent holes are exact multiples
    of stripe_len in length, as in the example above.
    
    Also note that post-f6fca3917b4d kernels do treat dev_extent holes
    larger than 10 GiB as equal, so the bad behavior won't show up on a
    freshly formatted filesystem; however, as the filesystem ages and fills
    up, and holes ranging from 1 GiB to 10 GiB in size appear, the problem
    can show up as a failure to balance after adding or removing devices,
    or an unexpected shortfall in available space due to unequal allocation.
    
    To fix the regression and make data chunk allocation work
    again, set ctl->max_stripe_len back to the original SZ_1G, or
    space_info->chunk_size if that's smaller (the latter can happen if the
    user set space_info->chunk_size to less than 1 GiB via sysfs, or it's
    a 32 MiB system chunk with a hardcoded chunk_size and stripe_len).
    
    While researching the background of the earlier commits, I found that an
    identical fix was already proposed at:
    
      https://lore.kernel.org/linux-btrfs/de83ac46-a4a3-88d3-85ce-255b7abc5249@gmx.com/
    
    The previous review missed one detail:  ctl->max_stripe_len is used
    before decide_stripe_size_regular() is called, when it is too late for
    the changes in that function to have any effect.  ctl->max_stripe_len is
    not used directly by decide_stripe_size_regular(), but the parameter
    does heavily influence the per-device free space data presented to
    the function.
    
    Fixes: f6fca3917b4d ("btrfs: store chunk size in space-info struct")
    CC: stable@vger.kernel.org # 6.1+
    Link: https://lore.kernel.org/linux-btrfs/20231007051421.19657-1-ce3g8jdj@umail.furryterror.org/
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 753ef5ef4c3b53daeee92f0e08258128ba5bd210
Author: Dust Li <dust.li@linux.alibaba.com>
Date:   Thu Oct 12 20:37:29 2023 +0800

    net/smc: return the right falback reason when prefix checks fail
    
    commit 4abbd2e3c1db671fa1286390f1310aec78386f1d upstream.
    
    In the smc_listen_work(), if smc_listen_prfx_check() failed,
    the real reason: SMC_CLC_DECL_DIFFPREFIX was dropped, and
    SMC_CLC_DECL_NOSMCDEV was returned.
    
    Althrough this is also kind of SMC_CLC_DECL_NOSMCDEV, but return
    the real reason is much friendly for debugging.
    
    Fixes: e49300a6bf62 ("net/smc: add listen processing for SMC-Rv2")
    Signed-off-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Link: https://lore.kernel.org/r/20231012123729.29307-1-dust.li@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d994502fdc66a946ce5cf4e32a428676eccb5e6c
Author: Jesse Brandeburg <jesse.brandeburg@intel.com>
Date:   Wed Oct 11 16:33:33 2023 -0700

    ice: reset first in crash dump kernels
    
    commit 0288c3e709e5fabd51e84715c5c798a02f43061a upstream.
    
    When the system boots into the crash dump kernel after a panic, the ice
    networking device may still have pending transactions that can cause errors
    or machine checks when the device is re-enabled. This can prevent the crash
    dump kernel from loading the driver or collecting the crash data.
    
    To avoid this issue, perform a function level reset (FLR) on the ice device
    via PCIe config space before enabling it on the crash kernel. This will
    clear any outstanding transactions and stop all queues and interrupts.
    Restore the config space after the FLR, otherwise it was found in testing
    that the driver wouldn't load successfully.
    
    The following sequence causes the original issue:
    - Load the ice driver with modprobe ice
    - Enable SR-IOV with 2 VFs: echo 2 > /sys/class/net/eth0/device/sriov_num_vfs
    - Trigger a crash with echo c > /proc/sysrq-trigger
    - Load the ice driver again (or let it load automatically) with modprobe ice
    - The system crashes again during pcim_enable_device()
    
    Fixes: 837f08fdecbe ("ice: Add basic driver framework for Intel(R) E800 Series")
    Reported-by: Vishal Agrawal <vagrawal@redhat.com>
    Reviewed-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Link: https://lore.kernel.org/r/20231011233334.336092-3-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f8d381adaa98b70ae105839a1d3b96ce019191d
Author: Jesse Brandeburg <jesse.brandeburg@intel.com>
Date:   Tue Oct 10 13:30:59 2023 -0700

    ice: fix over-shifted variable
    
    commit 242e34500a32631f85c2b4eb6cb42a368a39e54f upstream.
    
    Since the introduction of the ice driver the code has been
    double-shifting the RSS enabling field, because the define already has
    shifts in it and can't have the regular pattern of "a << shiftval &
    mask" applied.
    
    Most places in the code got it right, but one line was still wrong. Fix
    this one location for easy backports to stable. An in-progress patch
    fixes the defines to "standard" and will be applied as part of the
    regular -next process sometime after this one.
    
    Fixes: d76a60ba7afb ("ice: Add support for VLANs and offloads")
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Link: https://lore.kernel.org/r/20231010203101.406248-1-jacob.e.keller@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbc5c96f8214ca6266904ff53f9938d6d00e9015
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 9 22:31:31 2023 +0200

    Bluetooth: avoid memcmp() out of bounds warning
    
    commit 9d1a3c74746428102d55371fbf74b484733937d9 upstream.
    
    bacmp() is a wrapper around memcpy(), which contain compile-time
    checks for buffer overflow. Since the hci_conn_request_evt() also calls
    bt_dev_dbg() with an implicit NULL pointer check, the compiler is now
    aware of a case where 'hdev' is NULL and treats this as meaning that
    zero bytes are available:
    
    In file included from net/bluetooth/hci_event.c:32:
    In function 'bacmp',
        inlined from 'hci_conn_request_evt' at net/bluetooth/hci_event.c:3276:7:
    include/net/bluetooth/bluetooth.h:364:16: error: 'memcmp' specified bound 6 exceeds source size 0 [-Werror=stringop-overread]
      364 |         return memcmp(ba1, ba2, sizeof(bdaddr_t));
          |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Add another NULL pointer check before the bacmp() to ensure the compiler
    understands the code flow enough to not warn about it.  Since the patch
    that introduced the warning is marked for stable backports, this one
    should also go that way to avoid introducing build regressions.
    
    Fixes: 1ffc6f8cc332 ("Bluetooth: Reject connection with the device which has same BD_ADDR")
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Lee, Chun-Yi" <jlee@suse.com>
    Cc: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit feffabdd0acee2fe8256bda7053879fb025d83db
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Oct 5 14:12:19 2023 -0700

    Bluetooth: hci_event: Fix coding style
    
    commit 35d91d95a0cd61ebb90e0246dc917fd25e519b8c upstream.
    
    This fixes the following code style problem:
    
    ERROR: that open brace { should be on the previous line
    +       if (!bacmp(&hdev->bdaddr, &ev->bdaddr))
    +       {
    
    Fixes: 1ffc6f8cc332 ("Bluetooth: Reject connection with the device which has same BD_ADDR")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99ccf8d79bdd0cf4ffee9747fa3a89885603ff3a
Author: Arkadiusz Bokowy <arkadiusz.bokowy@gmail.com>
Date:   Wed Sep 20 17:30:07 2023 +0200

    Bluetooth: vhci: Fix race when opening vhci device
    
    commit 92d4abd66f7080075793970fc8f241239e58a9e7 upstream.
    
    When the vhci device is opened in the two-step way, i.e.: open device
    then write a vendor packet with requested controller type, the device
    shall respond with a vendor packet which includes HCI index of created
    interface.
    
    When the virtual HCI is created, the host sends a reset request to the
    controller. This request is processed by the vhci_send_frame() function.
    However, this request is send by a different thread, so it might happen
    that this HCI request will be received before the vendor response is
    queued in the read queue. This results in the HCI vendor response and
    HCI reset request inversion in the read queue which leads to improper
    behavior of btvirt:
    
    > dmesg
    [1754256.640122] Bluetooth: MGMT ver 1.22
    [1754263.023806] Bluetooth: MGMT ver 1.22
    [1754265.043775] Bluetooth: hci1: Opcode 0x c03 failed: -110
    
    In order to synchronize vhci two-step open/setup process with virtual
    HCI initialization, this patch adds internal lock when queuing data in
    the vhci_send_frame() function.
    
    Signed-off-by: Arkadiusz Bokowy <arkadiusz.bokowy@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25e5d2883002e235f3378b8592aad14aeeef898c
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Wed Oct 4 20:42:24 2023 +0800

    Bluetooth: Fix a refcnt underflow problem for hci_conn
    
    commit c7f59461f5a78994613afc112cdd73688aef9076 upstream.
    
    Syzbot reports a warning as follows:
    
    WARNING: CPU: 1 PID: 26946 at net/bluetooth/hci_conn.c:619
    hci_conn_timeout+0x122/0x210 net/bluetooth/hci_conn.c:619
    ...
    Call Trace:
     <TASK>
     process_one_work+0x884/0x15c0 kernel/workqueue.c:2630
     process_scheduled_works kernel/workqueue.c:2703 [inline]
     worker_thread+0x8b9/0x1290 kernel/workqueue.c:2784
     kthread+0x33c/0x440 kernel/kthread.c:388
     ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147
     ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
     </TASK>
    
    It is because the HCI_EV_SIMPLE_PAIR_COMPLETE event handler drops
    hci_conn directly without check Simple Pairing whether be enabled. But
    the Simple Pairing process can only be used if both sides have the
    support enabled in the host stack.
    
    Add hci_conn_ssp_enabled() for hci_conn in HCI_EV_IO_CAPA_REQUEST and
    HCI_EV_SIMPLE_PAIR_COMPLETE event handlers to fix the problem.
    
    Fixes: 0493684ed239 ("[Bluetooth] Disable disconnect timer during Simple Pairing")
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit faa6366605d6961df92ec5843d6c74854ffe9346
Author: Lee, Chun-Yi <jlee@suse.com>
Date:   Sun Oct 1 16:59:58 2023 +0800

    Bluetooth: Reject connection with the device which has same BD_ADDR
    
    commit 1ffc6f8cc33268731fcf9629fc4438f6db1191fc upstream.
    
    This change is used to relieve CVE-2020-26555. The description of
    the CVE:
    
    Bluetooth legacy BR/EDR PIN code pairing in Bluetooth Core Specification
    1.0B through 5.2 may permit an unauthenticated nearby device to spoof
    the BD_ADDR of the peer device to complete pairing without knowledge
    of the PIN. [1]
    
    The detail of this attack is in IEEE paper:
    BlueMirror: Reflections on Bluetooth Pairing and Provisioning Protocols
    [2]
    
    It's a reflection attack. The paper mentioned that attacker can induce
    the attacked target to generate null link key (zero key) without PIN
    code. In BR/EDR, the key generation is actually handled in the controller
    which is below HCI.
    
    A condition of this attack is that attacker should change the
    BR_ADDR of his hacking device (Host B) to equal to the BR_ADDR with
    the target device being attacked (Host A).
    
    Thus, we reject the connection with device which has same BD_ADDR
    both on HCI_Create_Connection and HCI_Connection_Request to prevent
    the attack. A similar implementation also shows in btstack project.
    [3][4]
    
    Cc: stable@vger.kernel.org
    Link: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26555 [1]
    Link: https://ieeexplore.ieee.org/abstract/document/9474325/authors#authors [2]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L3523 [3]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L7297 [4]
    Signed-off-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d76a44d26153e970209d118525dd957ab118bca
Author: Lee, Chun-Yi <jlee@suse.com>
Date:   Sun Oct 1 16:59:31 2023 +0800

    Bluetooth: hci_event: Ignore NULL link key
    
    commit 33155c4aae5260475def6f7438e4e35564f4f3ba upstream.
    
    This change is used to relieve CVE-2020-26555. The description of the
    CVE:
    
    Bluetooth legacy BR/EDR PIN code pairing in Bluetooth Core Specification
    1.0B through 5.2 may permit an unauthenticated nearby device to spoof
    the BD_ADDR of the peer device to complete pairing without knowledge
    of the PIN. [1]
    
    The detail of this attack is in IEEE paper:
    BlueMirror: Reflections on Bluetooth Pairing and Provisioning Protocols
    [2]
    
    It's a reflection attack. The paper mentioned that attacker can induce
    the attacked target to generate null link key (zero key) without PIN
    code. In BR/EDR, the key generation is actually handled in the controller
    which is below HCI.
    
    Thus, we can ignore null link key in the handler of "Link Key Notification
    event" to relieve the attack. A similar implementation also shows in
    btstack project. [3]
    
    v3: Drop the connection when null link key be detected.
    
    v2:
    - Used Link: tag instead of Closes:
    - Used bt_dev_dbg instead of BT_DBG
    - Added Fixes: tag
    
    Cc: stable@vger.kernel.org
    Fixes: 55ed8ca10f35 ("Bluetooth: Implement link key handling for the management interface")
    Link: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26555 [1]
    Link: https://ieeexplore.ieee.org/abstract/document/9474325/authors#authors [2]
    Link: https://github.com/bluekitchen/btstack/blob/master/src/hci.c#L3722 [3]
    Signed-off-by: Lee, Chun-Yi <jlee@suse.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84523aeeeaf910b49bcec655856d444ce12c07e3
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Wed Jun 7 14:32:29 2023 -0700

    igc: Fix race condition in PTP tx code
    
    commit 9c50e2b150c8ee0eee5f8154e2ad168cdd748877 upstream.
    
    Currently, the igc driver supports timestamping only one tx packet at a
    time. During the transmission flow, the skb that requires hardware
    timestamping is saved in adapter->ptp_tx_skb. Once hardware has the
    timestamp, an interrupt is delivered, and adapter->ptp_tx_work is
    scheduled. In igc_ptp_tx_work(), we read the timestamp register, update
    adapter->ptp_tx_skb, and notify the network stack.
    
    While the thread executing the transmission flow (the user process
    running in kernel mode) and the thread executing ptp_tx_work don't
    access adapter->ptp_tx_skb concurrently, there are two other places
    where adapter->ptp_tx_skb is accessed: igc_ptp_tx_hang() and
    igc_ptp_suspend().
    
    igc_ptp_tx_hang() is executed by the adapter->watchdog_task worker
    thread which runs periodically so it is possible we have two threads
    accessing ptp_tx_skb at the same time. Consider the following scenario:
    right after __IGC_PTP_TX_IN_PROGRESS is set in igc_xmit_frame_ring(),
    igc_ptp_tx_hang() is executed. Since adapter->ptp_tx_start hasn't been
    written yet, this is considered a timeout and adapter->ptp_tx_skb is
    cleaned up.
    
    This patch fixes the issue described above by adding the ptp_tx_lock to
    protect access to ptp_tx_skb and ptp_tx_start fields from igc_adapter.
    Since igc_xmit_frame_ring() called in atomic context by the networking
    stack, ptp_tx_lock is defined as a spinlock, and the irq safe variants
    of lock/unlock are used.
    
    With the introduction of the ptp_tx_lock, the __IGC_PTP_TX_IN_PROGRESS
    flag doesn't provide much of a use anymore so this patch gets rid of it.
    
    Fixes: 2c344ae24501 ("igc: Add support for TX timestamping")
    Signed-off-by: Andre Guedes <andre.guedes@intel.com>
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Reviewed-by: Kurt Kanzenbach <kurt@linutronix.de>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff996d61dddeaeaa8348d4ac5a2386931f80a4aa
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Mon May 15 14:03:36 2023 +0800

    igc: Add condition for qbv_config_change_errors counter
    
    commit ed89b74d2dc920cb61d3094e0e97ec8775b13086 upstream.
    
    Add condition to increase the qbv counter during taprio qbv
    configuration only.
    
    There might be a case when TC already been setup then user configure
    the ETF/CBS qdisc and this counter will increase if no condition above.
    
    Fixes: ae4fe4698300 ("igc: Add qbv_config_change_errors counter")
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd7b19dc5f3c00e8766ba59b4ce473c08de3ac66
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Thu Feb 16 10:07:31 2023 +0800

    igc: Add qbv_config_change_errors counter
    
    commit ae4fe46983007bc46d87dcb284a5e5851c3e1c84 upstream.
    
    Add ConfigChangeError(qbv_config_change_errors) when user try to set the
    AdminBaseTime to past value while the current GCL is still running.
    
    The ConfigChangeError counter should not be increased when a gate control
    list is scheduled into the future.
    
    User can use "ethtool -S <interface> | grep qbv_config_change_errors"
    command to check the counter values.
    
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88421f474136b1fcaf99470ded3723980a7c3a93
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Thu Dec 15 00:29:09 2022 +0800

    igc: Remove reset adapter task for i226 during disable tsn config
    
    commit 1d1b4c63ba739c6ca695cb2ea13fefa9dfbff60d upstream.
    
    I225 have limitation when programming the BaseTime register which required
    a power cycle of the controller. This limitation already lifted in I226.
    This patch removes the restriction so that when user configure/remove any
    TSN mode, it would not go into power cycle reset adapter.
    
    How to test:
    
    Schedule any gate control list configuration or delete it.
    
    Example:
    
    1)
    
    BASE_TIME=$(date +%s%N)
    tc qdisc replace dev $interface_name parent root handle 100 taprio \
        num_tc 4 \
        map 3 1 0 2 3 3 3 3 3 3 3 3 3 3 3 3 \
        queues 1@0 1@1 1@2 1@3 \
        base-time $BASE_TIME \
        sched-entry S 0F 1000000 \
        flags 0x2
    
    2) tc qdisc del dev $intername_name root
    
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c3418a586556670712cc8e3f45bf0cb01258667
Author: Tan Tee Min <tee.min.tan@linux.intel.com>
Date:   Thu Dec 15 00:29:08 2022 +0800

    igc: enable Qbv configuration for 2nd GCL
    
    commit 5ac1231ac14d1b8a1098048e51cad45f11b85c0a upstream.
    
    Make reset task only executes for i225 and Qbv disabling to allow
    i226 configure for 2nd GCL without resetting the adapter.
    
    In i226, Tx won't hang if there is a GCL is already running, so in
    this case we don't need to set FutScdDis bit.
    
    Signed-off-by: Tan Tee Min <tee.min.tan@linux.intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8420fe4dd2d9a10ca6babe02ca0f3c25fc799892
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Thu Dec 15 00:29:07 2022 +0800

    igc: remove I226 Qbv BaseTime restriction
    
    commit b8897dc54e3bc9d25281bbb42a7d730782ff4588 upstream.
    
    Remove the Qbv BaseTime restriction for I226 so that the BaseTime can be
    scheduled to the future time. A new register bit of Tx Qav Control
    (Bit-7: FutScdDis) was introduced to allow I226 scheduling future time as
    Qbv BaseTime and not having the Tx hang timeout issue.
    
    Besides, according to datasheet section 7.5.2.9.3.3, FutScdDis bit has to
    be configured first before the cycle time and base time.
    
    Indeed the FutScdDis bit is only active on re-configuration, thus we have
    to set the BASET_L to zero and then only set it to the desired value.
    
    Please also note that the Qbv configuration flow is moved around based on
    the Qbv programming guideline that is documented in the latest datasheet.
    
    Co-developed-by: Tan Tee Min <tee.min.tan@linux.intel.com>
    Signed-off-by: Tan Tee Min <tee.min.tan@linux.intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db4677b35047b706cf20932ddd72139780b21589
Author: Hyeonggon Yoo <42.hyeyoo@gmail.com>
Date:   Sat Jan 21 12:39:42 2023 +0900

    lib/Kconfig.debug: do not enable DEBUG_PREEMPT by default
    
    commit cc6003916ed46d7a67d91ee32de0f9138047d55f upstream.
    
    In workloads where this_cpu operations are frequently performed,
    enabling DEBUG_PREEMPT may result in significant increase in
    runtime overhead due to frequent invocation of
    __this_cpu_preempt_check() function.
    
    This can be demonstrated through benchmarks such as hackbench where this
    configuration results in a 10% reduction in performance, primarily due to
    the added overhead within memcg charging path.
    
    Therefore, do not to enable DEBUG_PREEMPT by default and make users aware
    of its potential impact on performance in some workloads.
    
    hackbench-process-sockets
                          debug_preempt      no_debug_preempt
    Amean     1       0.4743 (   0.00%)      0.4295 *   9.45%*
    Amean     4       1.4191 (   0.00%)      1.2650 *  10.86%*
    Amean     7       2.2677 (   0.00%)      2.0094 *  11.39%*
    Amean     12      3.6821 (   0.00%)      3.2115 *  12.78%*
    Amean     21      6.6752 (   0.00%)      5.7956 *  13.18%*
    Amean     30      9.6646 (   0.00%)      8.5197 *  11.85%*
    Amean     48     15.3363 (   0.00%)     13.5559 *  11.61%*
    Amean     79     24.8603 (   0.00%)     22.0597 *  11.27%*
    Amean     96     30.1240 (   0.00%)     26.8073 *  11.01%*
    
    Link: https://lkml.kernel.org/r/20230121033942.350387-1-42.hyeyoo@gmail.com
    Signed-off-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Acked-by: Roman Gushchin <roman.gushchin@linux.dev>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Ben Segall <bsegall@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Daniel Bristot de Oliveira <bristot@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Dennis Zhou <dennis@kernel.org>
    Cc: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Juri Lelli <juri.lelli@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Muchun Song <muchun.song@linux.dev>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Steven Rostedt (Google) <rostedt@goodmis.org>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Valentin Schneider <vschneid@redhat.com>
    Cc: Vincent Guittot <vincent.guittot@linaro.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Luiz Capitulino <luizcap@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

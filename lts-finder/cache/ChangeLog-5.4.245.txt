commit cf0b1e5482eaeb4db15c9e703267483dba88b575
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jun 5 08:17:33 2023 +0200

    Linux 5.4.245
    
    Link: https://lore.kernel.org/r/20230601131931.947241286@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec14c6e0a2e56acff04e63ee2a788cd25b9ee920
Author: Paul Blakey <paulb@nvidia.com>
Date:   Wed Mar 22 09:35:32 2023 +0200

    netfilter: ctnetlink: Support offloaded conntrack entry deletion
    
    commit 9b7c68b3911aef84afa4cbfc31bce20f10570d51 upstream.
    
    Currently, offloaded conntrack entries (flows) can only be deleted
    after they are removed from offload, which is either by timeout,
    tcp state change or tc ct rule deletion. This can cause issues for
    users wishing to manually delete or flush existing entries.
    
    Support deletion of offloaded conntrack entries.
    
    Example usage:
     # Delete all offloaded (and non offloaded) conntrack entries
     # whose source address is 1.2.3.4
     $ conntrack -D -s 1.2.3.4
     # Delete all entries
     $ conntrack -F
    
    Signed-off-by: Paul Blakey <paulb@nvidia.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Cc: Demi Marie Obenour <demi@invisiblethingslab.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b7d4d91c047f797117d48e959e2737bcf7e2d71
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon May 22 14:08:20 2023 +0200

    ipv{4,6}/raw: fix output xfrm lookup wrt protocol
    
    commit 3632679d9e4f879f49949bb5b050e0de553e4739 upstream.
    
    With a raw socket bound to IPPROTO_RAW (ie with hdrincl enabled), the
    protocol field of the flow structure, build by raw_sendmsg() /
    rawv6_sendmsg()),  is set to IPPROTO_RAW. This breaks the ipsec policy
    lookup when some policies are defined with a protocol in the selector.
    
    For ipv6, the sin6_port field from 'struct sockaddr_in6' could be used to
    specify the protocol. Just accept all values for IPPROTO_RAW socket.
    
    For ipv4, the sin_port field of 'struct sockaddr_in' could not be used
    without breaking backward compatibility (the value of this field was never
    checked). Let's add a new kind of control message, so that the userland
    could specify which protocol is used.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    CC: stable@vger.kernel.org
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Link: https://lore.kernel.org/r/20230522120820.1319391-1-nicolas.dichtel@6wind.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c88024cab83c820604db5f6a998ef3ae5682f1c
Author: Carlos Llamas <cmllamas@google.com>
Date:   Fri May 5 20:30:20 2023 +0000

    binder: fix UAF caused by faulty buffer cleanup
    
    commit bdc1c5fac982845a58d28690cdb56db8c88a530d upstream.
    
    In binder_transaction_buffer_release() the 'failed_at' offset indicates
    the number of objects to clean up. However, this function was changed by
    commit 44d8047f1d87 ("binder: use standard functions to allocate fds"),
    to release all the objects in the buffer when 'failed_at' is zero.
    
    This introduced an issue when a transaction buffer is released without
    any objects having been processed so far. In this case, 'failed_at' is
    indeed zero yet it is misinterpreted as releasing the entire buffer.
    
    This leads to use-after-free errors where nodes are incorrectly freed
    and subsequently accessed. Such is the case in the following KASAN
    report:
    
      ==================================================================
      BUG: KASAN: slab-use-after-free in binder_thread_read+0xc40/0x1f30
      Read of size 8 at addr ffff4faf037cfc58 by task poc/474
    
      CPU: 6 PID: 474 Comm: poc Not tainted 6.3.0-12570-g7df047b3f0aa #5
      Hardware name: linux,dummy-virt (DT)
      Call trace:
       dump_backtrace+0x94/0xec
       show_stack+0x18/0x24
       dump_stack_lvl+0x48/0x60
       print_report+0xf8/0x5b8
       kasan_report+0xb8/0xfc
       __asan_load8+0x9c/0xb8
       binder_thread_read+0xc40/0x1f30
       binder_ioctl+0xd9c/0x1768
       __arm64_sys_ioctl+0xd4/0x118
       invoke_syscall+0x60/0x188
      [...]
    
      Allocated by task 474:
       kasan_save_stack+0x3c/0x64
       kasan_set_track+0x2c/0x40
       kasan_save_alloc_info+0x24/0x34
       __kasan_kmalloc+0xb8/0xbc
       kmalloc_trace+0x48/0x5c
       binder_new_node+0x3c/0x3a4
       binder_transaction+0x2b58/0x36f0
       binder_thread_write+0x8e0/0x1b78
       binder_ioctl+0x14a0/0x1768
       __arm64_sys_ioctl+0xd4/0x118
       invoke_syscall+0x60/0x188
      [...]
    
      Freed by task 475:
       kasan_save_stack+0x3c/0x64
       kasan_set_track+0x2c/0x40
       kasan_save_free_info+0x38/0x5c
       __kasan_slab_free+0xe8/0x154
       __kmem_cache_free+0x128/0x2bc
       kfree+0x58/0x70
       binder_dec_node_tmpref+0x178/0x1fc
       binder_transaction_buffer_release+0x430/0x628
       binder_transaction+0x1954/0x36f0
       binder_thread_write+0x8e0/0x1b78
       binder_ioctl+0x14a0/0x1768
       __arm64_sys_ioctl+0xd4/0x118
       invoke_syscall+0x60/0x188
      [...]
      ==================================================================
    
    In order to avoid these issues, let's always calculate the intended
    'failed_at' offset beforehand. This is renamed and wrapped in a helper
    function to make it clear and convenient.
    
    Fixes: 32e9f56a96d8 ("binder: don't detect sender/target during buffer cleanup")
    Reported-by: Zi Fan Tan <zifantan@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Acked-by: Todd Kjos <tkjos@google.com>
    Link: https://lore.kernel.org/r/20230505203020.4101154-1-cmllamas@google.com
    [cmllamas: resolve trivial conflict due to missing commit 9864bb4801331]
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6183912ee90d6145bdde96b7d53ffba2793d3ad
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Sun Apr 16 16:02:51 2023 +0800

    bluetooth: Add cmd validity checks at the start of hci_sock_ioctl()
    
    commit 000c2fa2c144c499c881a101819cf1936a1f7cf2 upstream.
    
    Previously, channel open messages were always sent to monitors on the first
    ioctl() call for unbound HCI sockets, even if the command and arguments
    were completely invalid. This can leave an exploitable hole with the abuse
    of invalid ioctl calls.
    
    This commit hardens the ioctl processing logic by first checking if the
    command is valid, and immediately returning with an ENOIOCTLCMD error code
    if it is not. This ensures that ioctl calls with invalid commands are free
    of side effects, and increases the difficulty of further exploitation by
    forcing exploitation to find a way to pass a valid command first.
    
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Co-developed-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Dragos-Marian Panait <dragos.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ba28194ea50707f282da264c0c351770ec40b3e
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue May 23 08:26:06 2023 -0600

    io_uring: have io_kill_timeout() honor the request references
    
    No upstream commit exists for this patch.
    
    Don't free the request unconditionally, if the request is issued async
    then someone else may be holding a submit reference to it.
    
    Reported-and-tested-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6de3014d4bd8ff3e7017614741f2dbb02bca9361
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue May 23 08:24:31 2023 -0600

    io_uring: don't drop completion lock before timer is fully initialized
    
    No upstream commit exists for this patch.
    
    If we drop the lock right after adding it to the timeout list, then
    someone attempting to kill timeouts will find it in an indeterminate
    state. That means that cancelation could attempt to cancel and remove
    a timeout, and then io_timeout() proceeds to init and add the timer
    afterwards.
    
    Ensure the timeout request is fully setup before we drop the
    completion lock, which guards cancelation as well.
    
    Reported-and-tested-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0bfceaa8c0e164541af1a28e85b575a1cd4ef91
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue May 23 08:23:32 2023 -0600

    io_uring: always grab lock in io_cancel_async_work()
    
    No upstream commit exists for this patch.
    
    It's not necessarily safe to check the task_list locklessly, remove
    this micro optimization and always grab task_lock before deeming it
    empty.
    
    Reported-and-tested-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00395fd7f9a0153753957d2a92b6863313e6dc1e
Author: Alexander Bersenev <bay@hackerdom.ru>
Date:   Sat Mar 14 10:33:24 2020 +0500

    cdc_ncm: Fix the build warning
    
    [ Upstream commit 5d0ab06b63fc9c727a7bb72c81321c0114be540b ]
    
    The ndp32->wLength is two bytes long, so replace cpu_to_le32 with cpu_to_le16.
    
    Fixes: 0fa81b304a79 ("cdc_ncm: Implement the 32-bit version of NCM Transfer Block")
    Signed-off-by: Alexander Bersenev <bay@hackerdom.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 672e59995e704fb72d984b596a7bbdb46c6290fa
Author: Shay Drory <shayd@nvidia.com>
Date:   Tue May 2 13:36:42 2023 +0300

    net/mlx5: Devcom, serialize devcom registration
    
    [ Upstream commit 1f893f57a3bf9fe1f4bcb25b55aea7f7f9712fe7 ]
    
    From one hand, mlx5 driver is allowing to probe PFs in parallel.
    From the other hand, devcom, which is a share resource between PFs, is
    registered without any lock. This might resulted in memory problems.
    
    Hence, use the global mlx5_dev_list_lock in order to serialize devcom
    registration.
    
    Fixes: fadd59fc50d0 ("net/mlx5: Introduce inter-device communication mechanism")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f42feb29bad9336c0016867476d252879124f158
Author: Mark Bloch <mbloch@nvidia.com>
Date:   Sun Feb 27 12:23:34 2022 +0000

    net/mlx5: devcom only supports 2 ports
    
    [ Upstream commit 8a6e75e5f57e9ac82268d9bfca3403598d9d0292 ]
    
    Devcom API is intended to be used between 2 devices only add this
    implied assumption into the code and check when it's no true.
    
    Signed-off-by: Mark Bloch <mbloch@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Stable-dep-of: 1f893f57a3bf ("net/mlx5: Devcom, serialize devcom registration")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67637a7ee6bd4de3ed8dd0f65a009b6f71e87511
Author: Hao Ge <gehao@kylinos.cn>
Date:   Mon Apr 24 13:18:35 2023 +0800

    fs: fix undefined behavior in bit shift for SB_NOUSER
    
    [ Upstream commit f15afbd34d8fadbd375f1212e97837e32bc170cc ]
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. It was spotted by UBSAN.
    
    So let's just fix this by using the BIT() helper for all SB_* flags.
    
    Fixes: e462ec50cb5f ("VFS: Differentiate mount flags (MS_*) from internal superblock flags")
    Signed-off-by: Hao Ge <gehao@kylinos.cn>
    Message-Id: <20230424051835.374204-1-gehao@kylinos.cn>
    [brauner@kernel.org: use BIT() for all SB_* flags]
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02281c23d069d57eb4eb003f48b0adb6a95af83e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:41 2023 +0200

    power: supply: bq24190: Call power_supply_changed() after updating input current
    
    [ Upstream commit 77c2a3097d7029441e8a91aa0de1b4e5464593da ]
    
    The bq24192 model relies on external charger-type detection and once
    that is done the bq24190_charger code will update the input current.
    
    In this case, when the initial power_supply_changed() call is made
    from the interrupt handler, the input settings are 5V/0.5A which
    on many devices is not enough power to charge (while the device is on).
    
    On many devices the fuel-gauge relies in its external_power_changed
    callback to timely signal userspace about charging <-> discharging
    status changes. Add a power_supply_changed() call after updating
    the input current. This allows the fuel-gauge driver to timely recheck
    if the battery is charging after the new input current has been applied
    and then it can immediately notify userspace about this.
    
    Fixes: 18f8e6f695ac ("power: supply: bq24190_charger: Get input_current_limit from our supplier")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6518954c1466808b6dbd71621b3a40805addd35
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Feb 1 14:06:47 2022 +0100

    power: supply: core: Refactor power_supply_set_input_current_limit_from_supplier()
    
    [ Upstream commit 2220af8ca61ae67de4ec3deec1c6395a2f65b9fd ]
    
    Some (USB) charger ICs have variants with USB D+ and D- pins to do their
    own builtin charger-type detection, like e.g. the bq24190 and bq25890 and
    also variants which lack this functionality, e.g. the bq24192 and bq25892.
    
    In case the charger-type; and thus the input-current-limit detection is
    done outside the charger IC then we need some way to communicate this to
    the charger IC. In the past extcon was used for this, but if the external
    detection does e.g. full USB PD negotiation then the extcon cable-types do
    not convey enough information.
    
    For these setups it was decided to model the external charging "brick"
    and the parameters negotiated with it as a power_supply class-device
    itself; and power_supply_set_input_current_limit_from_supplier() was
    introduced to allow drivers to get the input-current-limit this way.
    
    But in some cases psy drivers may want to know other properties, e.g. the
    bq25892 can do "quick-charge" negotiation by pulsing its current draw,
    but this should only be done if the usb_type psy-property of its supplier
    is set to DCP (and device-properties indicate the board allows higher
    voltages).
    
    Instead of adding extra helper functions for each property which
    a psy-driver wants to query from its supplier, refactor
    power_supply_set_input_current_limit_from_supplier() into a
    more generic power_supply_get_property_from_supplier() function.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Stable-dep-of: 77c2a3097d70 ("power: supply: bq24190: Call power_supply_changed() after updating input current")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db00ef8fd6094bf76df837f51d0d1f857e3c2556
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:38 2023 +0200

    power: supply: bq27xxx: After charger plug in/out wait 0.5s for things to stabilize
    
    [ Upstream commit 59a99cd462fbdf71f4e845e09f37783035088b4f ]
    
    bq27xxx_external_power_changed() gets called when the charger is plugged
    in or out. Rather then immediately scheduling an update wait 0.5 seconds
    for things to stabilize, so that e.g. the (dis)charge current is stable
    when bq27xxx_battery_update() runs.
    
    Fixes: 740b755a3b34 ("bq27x00: Poll battery state")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff484163dfb61b58f23e4dbd007de1094427669c
Author: Tudor Ambarus <tudor.ambarus@linaro.org>
Date:   Wed May 17 13:38:08 2023 +0000

    net: cdc_ncm: Deal with too low values of dwNtbOutMaxSize
    
    [ Upstream commit 7e01c7f7046efc2c7c192c3619db43292b98e997 ]
    
    Currently in cdc_ncm_check_tx_max(), if dwNtbOutMaxSize is lower than
    the calculated "min" value, but greater than zero, the logic sets
    tx_max to dwNtbOutMaxSize. This is then used to allocate a new SKB in
    cdc_ncm_fill_tx_frame() where all the data is handled.
    
    For small values of dwNtbOutMaxSize the memory allocated during
    alloc_skb(dwNtbOutMaxSize, GFP_ATOMIC) will have the same size, due to
    how size is aligned at alloc time:
            size = SKB_DATA_ALIGN(size);
            size += SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
    Thus we hit the same bug that we tried to squash with
    commit 2be6d4d16a084 ("net: cdc_ncm: Allow for dwNtbOutMaxSize to be unset or zero")
    
    Low values of dwNtbOutMaxSize do not cause an issue presently because at
    alloc_skb() time more memory (512b) is allocated than required for the
    SKB headers alone (320b), leaving some space (512b - 320b = 192b)
    for CDC data (172b).
    
    However, if more elements (for example 3 x u64 = [24b]) were added to
    one of the SKB header structs, say 'struct skb_shared_info',
    increasing its original size (320b [320b aligned]) to something larger
    (344b [384b aligned]), then suddenly the CDC data (172b) no longer
    fits in the spare SKB data area (512b - 384b = 128b).
    
    Consequently the SKB bounds checking semantics fails and panics:
    
    skbuff: skb_over_panic: text:ffffffff831f755b len:184 put:172 head:ffff88811f1c6c00 data:ffff88811f1c6c00 tail:0xb8 end:0x80 dev:<NULL>
    ------------[ cut here ]------------
    kernel BUG at net/core/skbuff.c:113!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 57 Comm: kworker/0:2 Not tainted 5.15.106-syzkaller-00249-g19c0ed55a470 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/14/2023
    Workqueue: mld mld_ifc_work
    RIP: 0010:skb_panic net/core/skbuff.c:113 [inline]
    RIP: 0010:skb_over_panic+0x14c/0x150 net/core/skbuff.c:118
    [snip]
    Call Trace:
     <TASK>
     skb_put+0x151/0x210 net/core/skbuff.c:2047
     skb_put_zero include/linux/skbuff.h:2422 [inline]
     cdc_ncm_ndp16 drivers/net/usb/cdc_ncm.c:1131 [inline]
     cdc_ncm_fill_tx_frame+0x11ab/0x3da0 drivers/net/usb/cdc_ncm.c:1308
     cdc_ncm_tx_fixup+0xa3/0x100
    
    Deal with too low values of dwNtbOutMaxSize, clamp it in the range
    [USB_CDC_NCM_NTB_MIN_OUT_SIZE, CDC_NCM_NTB_MAX_SIZE_TX]. We ensure
    enough data space is allocated to handle CDC data by making sure
    dwNtbOutMaxSize is not smaller than USB_CDC_NCM_NTB_MIN_OUT_SIZE.
    
    Fixes: 289507d3364f ("net: cdc_ncm: use sysfs for rx/tx aggregation tuning")
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+9f575a1f15fc0c01ed69@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=b982f1059506db48409d
    Link: https://lore.kernel.org/all/20211202143437.1411410-1-lee.jones@linaro.org/
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230517133808.1873695-2-tudor.ambarus@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a270ca35a9499b58366d696d3290eaa4697a42db
Author: Alexander Bersenev <bay@hackerdom.ru>
Date:   Fri Mar 6 01:33:16 2020 +0500

    cdc_ncm: Implement the 32-bit version of NCM Transfer Block
    
    [ Upstream commit 0fa81b304a7973a499f844176ca031109487dd31 ]
    
    The NCM specification defines two formats of transfer blocks: with 16-bit
    fields (NTB-16) and with 32-bit fields (NTB-32). Currently only NTB-16 is
    implemented.
    
    This patch adds the support of NTB-32. The motivation behind this is that
    some devices such as E5785 or E5885 from the current generation of Huawei
    LTE routers do not support NTB-16. The previous generations of Huawei
    devices are also use NTB-32 by default.
    
    Also this patch enables NTB-32 by default for Huawei devices.
    
    During the 2019 ValdikSS made five attempts to contact Huawei to add the
    NTB-16 support to their router firmware, but they were unsuccessful.
    
    Signed-off-by: Alexander Bersenev <bay@hackerdom.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 7e01c7f7046e ("net: cdc_ncm: Deal with too low values of dwNtbOutMaxSize")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61fd484b2cf6bc8022e8e5ea6f693a9991740ac2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 5 18:27:38 2023 +0100

    Linux 6.1.38
    
    Link: https://lore.kernel.org/r/20230703184519.121965745@linuxfoundation.org
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Link: https://lore.kernel.org/r/20230704084611.071971014@linuxfoundation.org
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Markus Reichelt <lkt+2023@mareichelt.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c50065a3927932cd9baf3d5c94c91b58c31200d5
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Fri Feb 24 11:35:43 2023 -0700

    drm/amd/display: Ensure vmin and vmax adjust for DCE
    
    commit 2820433be2a33beb44b13b367e155cf221f29610 upstream.
    
    [Why & How]
    In the commit 32953485c558 ("drm/amd/display: Do not update DRR while
    BW optimizations pending"), a modification was added to avoid adjusting
    DRR if optimized bandwidth is set. This change was only intended for
    DCN, but one part of the patch changed the code path for DCE devices and
    caused regressions to the kms_vrr test. To address this problem, this
    commit adds a modification in which dc_stream_adjust_vmin_vmax will be
    fully executed in DCE devices.
    
    Fixes: 32953485c558 ("drm/amd/display: Do not update DRR while BW optimizations pending")
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d0b2afadfd71e9bedd593358bd7ac4701e46477
Author: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date:   Sat May 13 14:51:00 2023 +0200

    drm/amdgpu: Validate VM ioctl flags.
    
    commit a2b308044dcaca8d3e580959a4f867a1d5c37fac upstream.
    
    None have been defined yet, so reject anybody setting any. Mesa sets
    it to 0 anyway.
    
    Signed-off-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe56f507a11a72aeba7044a29653c049ce6c1374
Author: Ahmed S. Darwish <darwi@linutronix.de>
Date:   Mon May 15 19:32:17 2023 +0200

    docs: Set minimal gtags / GNU GLOBAL version to 6.6.5
    
    commit b230235b386589d8f0d631b1c77a95ca79bb0732 upstream.
    
    Kernel build now uses the gtags "-C (--directory)" option, available
    since GNU GLOBAL v6.6.5.  Update the documentation accordingly.
    
    Signed-off-by: Ahmed S. Darwish <darwi@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lists.gnu.org/archive/html/info-global/2020-09/msg00000.html
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c437b26bc3ae511521c1d4884c13b36bb292dce6
Author: Ahmed S. Darwish <darwi@linutronix.de>
Date:   Mon May 15 19:32:16 2023 +0200

    scripts/tags.sh: Resolve gtags empty index generation
    
    commit e1b37563caffc410bb4b55f153ccb14dede66815 upstream.
    
    gtags considers any file outside of its current working directory
    "outside the source tree" and refuses to index it. For O= kernel builds,
    or when "make" is invoked from a directory other then the kernel source
    tree, gtags ignores the entire kernel source and generates an empty
    index.
    
    Force-set gtags current working directory to the kernel source tree.
    
    Due to commit 9da0763bdd82 ("kbuild: Use relative path when building in
    a subdir of the source tree"), if the kernel build is done in a
    sub-directory of the kernel source tree, the kernel Makefile will set
    the kernel's $srctree to ".." for shorter compile-time and run-time
    warnings. Consequently, the list of files to be indexed will be in the
    "../*" form, rendering all such paths invalid once gtags switches to the
    kernel source tree as its current working directory.
    
    If gtags indexing is requested and the build directory is not the kernel
    source tree, index all files in absolute-path form.
    
    Note, indexing in absolute-path form will not affect the generated
    index, as paths in gtags indices are always relative to the gtags "root
    directory" anyway (as evidenced by "gtags --dump").
    
    Signed-off-by: Ahmed S. Darwish <darwi@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50e36c2897ba97af09fc0ce4dfe2ded47ecebbb1
Author: Krister Johansen <kjlx@templeofstupid.com>
Date:   Wed Jan 25 10:34:18 2023 -0800

    perf symbols: Symbol lookup with kcore can fail if multiple segments match stext
    
    commit 1c249565426e3a9940102c0ba9f63914f7cda73d upstream.
    
    This problem was encountered on an arm64 system with a lot of memory.
    Without kernel debug symbols installed, and with both kcore and kallsyms
    available, perf managed to get confused and returned "unknown" for all
    of the kernel symbols that it tried to look up.
    
    On this system, stext fell within the vmalloc segment.  The kcore symbol
    matching code tries to find the first segment that contains stext and
    uses that to replace the segment generated from just the kallsyms
    information.  In this case, however, there were two: a very large
    vmalloc segment, and the text segment.  This caused perf to get confused
    because multiple overlapping segments were inserted into the RB tree
    that holds the discovered segments.  However, that alone wasn't
    sufficient to cause the problem. Even when we could find the segment,
    the offsets were adjusted in such a way that the newly generated symbols
    didn't line up with the instruction addresses in the trace.  The most
    obvious solution would be to consult which segment type is text from
    kcore, but this information is not exposed to users.
    
    Instead, select the smallest matching segment that contains stext
    instead of the first matching segment.  This allows us to match the text
    segment instead of vmalloc, if one is contained within the other.
    
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: David Reaver <me@davidreaver.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20230125183418.GD1963@templeofstupid.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67e3b5230cefed1eca470c460a2035f02986cebb
Author: Finn Thain <fthain@linux-m68k.org>
Date:   Tue Mar 14 19:51:59 2023 +1100

    nubus: Partially revert proc_create_single_data() conversion
    
    commit 0e96647cff9224db564a1cee6efccb13dbe11ee2 upstream.
    
    The conversion to proc_create_single_data() introduced a regression
    whereby reading a file in /proc/bus/nubus results in a seg fault:
    
        # grep -r . /proc/bus/nubus/e/
        Data read fault at 0x00000020 in Super Data (pc=0x1074c2)
        BAD KERNEL BUSERR
        Oops: 00000000
        Modules linked in:
        PC: [<001074c2>] PDE_DATA+0xc/0x16
        SR: 2010  SP: 38284958  a2: 01152370
        d0: 00000001    d1: 01013000    d2: 01002790    d3: 00000000
        d4: 00000001    d5: 0008ce2e    a0: 00000000    a1: 00222a40
        Process grep (pid: 45, task=142f8727)
        Frame format=B ssw=074d isc=2008 isb=4e5e daddr=00000020 dobuf=01199e70
        baddr=001074c8 dibuf=ffffffff ver=f
        Stack from 01199e48:
                01199e70 00222a58 01002790 00000000 011a3000 01199eb0 015000c0 00000000
                00000000 01199ec0 01199ec0 000d551a 011a3000 00000001 00000000 00018000
                d003f000 00000003 00000001 0002800d 01052840 01199fa8 c01f8000 00000000
                00000029 0b532b80 00000000 00000000 00000029 0b532b80 01199ee4 00103640
                011198c0 d003f000 00018000 01199fa8 00000000 011198c0 00000000 01199f4c
                000b3344 011198c0 d003f000 00018000 01199fa8 00000000 00018000 011198c0
        Call Trace: [<00222a58>] nubus_proc_rsrc_show+0x18/0xa0
         [<000d551a>] seq_read+0xc4/0x510
         [<00018000>] fp_fcos+0x2/0x82
         [<0002800d>] __sys_setreuid+0x115/0x1c6
         [<00103640>] proc_reg_read+0x5c/0xb0
         [<00018000>] fp_fcos+0x2/0x82
         [<000b3344>] __vfs_read+0x2c/0x13c
         [<00018000>] fp_fcos+0x2/0x82
         [<00018000>] fp_fcos+0x2/0x82
         [<000b8aa2>] sys_statx+0x60/0x7e
         [<000b34b6>] vfs_read+0x62/0x12a
         [<00018000>] fp_fcos+0x2/0x82
         [<00018000>] fp_fcos+0x2/0x82
         [<000b39c2>] ksys_read+0x48/0xbe
         [<00018000>] fp_fcos+0x2/0x82
         [<000b3a4e>] sys_read+0x16/0x1a
         [<00018000>] fp_fcos+0x2/0x82
         [<00002b84>] syscall+0x8/0xc
         [<00018000>] fp_fcos+0x2/0x82
         [<0000c016>] not_ext+0xa/0x18
        Code: 4e5e 4e75 4e56 0000 206e 0008 2068 ffe8 <2068> 0020 2008 4e5e 4e75 4e56 0000 2f0b 206e 0008 2068 0004 2668 0020 206b ffe8
        Disabling lock debugging due to kernel taint
    
        Segmentation fault
    
    The proc_create_single_data() conversion does not work because
    single_open(file, nubus_proc_rsrc_show, PDE_DATA(inode)) is not
    equivalent to the original code.
    
    Fixes: 3f3942aca6da ("proc: introduce proc_create_single{,_data}")
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org # 5.6+
    Signed-off-by: Finn Thain <fthain@linux-m68k.org>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/d4e2a586e793cc8d9442595684ab8a077c0fe726.1678783919.git.fthain@linux-m68k.org
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 296927dbae7d2418cfd65b98788cbec2fd48afa1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 2 23:20:17 2023 -0700

    execve: always mark stack as growing down during early stack setup
    
    commit f66066bc5136f25e36a2daff4896c768f18c211e upstream.
    
    While our user stacks can grow either down (all common architectures) or
    up (parisc and the ia64 register stack), the initial stack setup when we
    copy the argument and environment strings to the new stack at execve()
    time is always done by extending the stack downwards.
    
    But it turns out that in commit 8d7071af8907 ("mm: always expand the
    stack with the mmap write lock held"), as part of making the stack
    growing code more robust, 'expand_downwards()' was now made to actually
    check the vma flags:
    
            if (!(vma->vm_flags & VM_GROWSDOWN))
                    return -EFAULT;
    
    and that meant that this execve-time stack expansion started failing on
    parisc, because on that architecture, the stack flags do not contain the
    VM_GROWSDOWN bit.
    
    At the same time the new check in expand_downwards() is clearly correct,
    and simplified the callers, so let's not remove it.
    
    The solution is instead to just codify the fact that yes, during
    execve(), the stack grows down.  This not only matches reality, it ends
    up being particularly simple: we already have special execve-time flags
    for the stack (VM_STACK_INCOMPLETE_SETUP) and use those flags to avoid
    page migration during this setup time (see vma_is_temporary_stack() and
    invalid_migration_vma()).
    
    So just add VM_GROWSDOWN to that set of temporary flags, and now our
    stack flags automatically match reality, and the parisc stack expansion
    works again.
    
    Note that the VM_STACK_INCOMPLETE_SETUP bits will be cleared when the
    stack is finalized, so we only add the extra VM_GROWSDOWN bit on
    CONFIG_STACK_GROWSUP architectures (ie parisc) rather than adding it in
    general.
    
    Link: https://lore.kernel.org/all/612eaa53-6904-6e16-67fc-394f4faa0e16@bell.net/
    Link: https://lore.kernel.org/all/5fd98a09-4792-1433-752d-029ae3545168@gmx.de/
    Fixes: 8d7071af8907 ("mm: always expand the stack with the mmap write lock held")
    Reported-by: John David Anglin <dave.anglin@bell.net>
    Reported-and-tested-by: Helge Deller <deller@gmx.de>
    Reported-and-tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d856e6f8a0b44cfb233b669fb289edb25b9c2fb9
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue Jun 20 09:04:51 2023 -0500

    PCI/ACPI: Call _REG when transitioning D-states
    
    commit 112a7f9c8edbf76f7cb83856a6cb6b60a210b659 upstream.
    
    ACPI r6.5, sec 6.5.4, describes how AML is unable to access an
    OperationRegion unless _REG has been called to connect a handler:
    
      The OS runs _REG control methods to inform AML code of a change in the
      availability of an operation region. When an operation region handler is
      unavailable, AML cannot access data fields in that region.  (Operation
      region writes will be ignored and reads will return indeterminate data.)
    
    The PCI core does not call _REG at any time, leading to the undefined
    behavior mentioned in the spec.
    
    The spec explains that _REG should be executed to indicate whether a
    given region can be accessed:
    
      Once _REG has been executed for a particular operation region, indicating
      that the operation region handler is ready, a control method can access
      fields in the operation region. Conversely, control methods must not
      access fields in operation regions when _REG method execution has not
      indicated that the operation region handler is ready.
    
    An example included in the spec demonstrates calling _REG when devices are
    turned off: "when the host controller or bridge controller is turned off
    or disabled, PCI Config Space Operation Regions for child devices are
    no longer available. As such, ETH0’s _REG method will be run when it
    is turned off and will again be run when PCI1 is turned off."
    
    It is reported that ASMedia PCIe GPIO controllers fail functional tests
    after the system has returning from suspend (S3 or s2idle). This is because
    the BIOS checks whether the OSPM has called the _REG method to determine
    whether it can interact with the OperationRegion assigned to the device as
    part of the other AML called for the device.
    
    To fix this issue, call acpi_evaluate_reg() when devices are transitioning
    to D3cold or D0.
    
    [bhelgaas: split pci_power_t checking to preliminary patch]
    Link: https://uefi.org/specs/ACPI/6.5/06_Device_Configuration.html#reg-region
    Link: https://lore.kernel.org/r/20230620140451.21007-1-mario.limonciello@amd.com
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 788c76c33df9758778b7fa7f25309a91276c9be1
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Wed Jun 21 16:36:12 2023 -0500

    PCI/ACPI: Validate acpi_pci_set_power_state() parameter
    
    commit 5557b62634abbd55bab7b154ce4bca348ad7f96f upstream.
    
    Previously acpi_pci_set_power_state() assumed the requested power state was
    valid (PCI_D0 ... PCI_D3cold).  If a caller supplied something else, we
    could index outside the state_conv[] array and pass junk to
    acpi_device_set_power().
    
    Validate the pci_power_t parameter and return -EINVAL if it's invalid.
    
    Link: https://lore.kernel.org/r/20230621222857.GA122930@bhelgaas
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a905b0b318ad7d37c3041573454129923e0a0723
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Wed Feb 8 19:51:42 2023 -0500

    drm/amd/display: Do not update DRR while BW optimizations pending
    
    commit 32953485c558cecf08f33fbfa251e80e44cef981 upstream.
    
    [why]
    While bandwidth optimizations are pending, it's possible a pstate change
    will occur.  During this time, VSYNC handler should not also try to update
    DRR parameters causing pstate hang
    
    [how]
    Do not adjust DRR if optimize bandwidth is set.
    
    Reviewed-by: Aric Cyr <aric.cyr@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd6d6f9d47aebf50713fb857f91402a1c6c3131c
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Thu Oct 20 11:46:49 2022 -0400

    drm/amd/display: Remove optimization for VRR updates
    
    commit 3442f4e0e55555d14b099c17382453fdfd2508d5 upstream.
    
    Optimization caused unexpected regression, so remove for now.
    
    Tested-by: Mark Broadworth <mark.broadworth@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b2849b3e05d5dcda36a000ec81a15caa828e0a8
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Sat Jul 1 03:31:55 2023 -0700

    xtensa: fix lock_mm_and_find_vma in case VMA not found
    
    commit 03f889378f33aa9a9d8e5f49ba94134cf6158090 upstream.
    
    MMU version of lock_mm_and_find_vma releases the mm lock before
    returning when VMA is not found. Do the same in noMMU version.
    This fixes hang on an attempt to handle protection fault.
    
    Fixes: d85a143b69ab ("xtensa: fix NOMMU build with lock_mm_and_find_vma() conversion")
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

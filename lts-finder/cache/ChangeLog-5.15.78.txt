commit 509a32764e1a5692935c4f26ed96fbe94c480186
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 10 18:15:43 2022 +0100

    Linux 5.15.78
    
    Link: https://lore.kernel.org/r/20221108133345.346704162@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Slade Watkins <srw@sladewatkins.net>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7038af4ce95105146d22e461eaa450829f28eeaf
Author: Dokyung Song <dokyung.song@gmail.com>
Date:   Fri Oct 21 15:13:59 2022 +0900

    wifi: brcmfmac: Fix potential buffer overflow in brcmf_fweh_event_worker()
    
    commit 6788ba8aed4e28e90f72d68a9d794e34eac17295 upstream.
    
    This patch fixes an intra-object buffer overflow in brcmfmac that occurs
    when the device provides a 'bsscfgidx' equal to or greater than the
    buffer size. The patch adds a check that leads to a safe failure if that
    is the case.
    
    This fixes CVE-2022-3628.
    
    UBSAN: array-index-out-of-bounds in drivers/net/wireless/broadcom/brcm80211/brcmfmac/fweh.c
    index 52 is out of range for type 'brcmf_if *[16]'
    CPU: 0 PID: 1898 Comm: kworker/0:2 Tainted: G           O      5.14.0+ #132
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Workqueue: events brcmf_fweh_event_worker
    Call Trace:
     dump_stack_lvl+0x57/0x7d
     ubsan_epilogue+0x5/0x40
     __ubsan_handle_out_of_bounds+0x69/0x80
     ? memcpy+0x39/0x60
     brcmf_fweh_event_worker+0xae1/0xc00
     ? brcmf_fweh_call_event_handler.isra.0+0x100/0x100
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     process_one_work+0x873/0x13e0
     ? lock_release+0x640/0x640
     ? pwq_dec_nr_in_flight+0x320/0x320
     ? rwlock_bug.part.0+0x90/0x90
     worker_thread+0x8b/0xd10
     ? __kthread_parkme+0xd9/0x1d0
     ? process_one_work+0x13e0/0x13e0
     kthread+0x379/0x450
     ? _raw_spin_unlock_irq+0x24/0x30
     ? set_kthread_struct+0x100/0x100
     ret_from_fork+0x1f/0x30
    ================================================================================
    general protection fault, probably for non-canonical address 0xe5601c0020023fff: 0000 [#1] SMP KASAN
    KASAN: maybe wild-memory-access in range [0x2b0100010011fff8-0x2b0100010011ffff]
    CPU: 0 PID: 1898 Comm: kworker/0:2 Tainted: G           O      5.14.0+ #132
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Workqueue: events brcmf_fweh_event_worker
    RIP: 0010:brcmf_fweh_call_event_handler.isra.0+0x42/0x100
    Code: 89 f5 53 48 89 fb 48 83 ec 08 e8 79 0b 38 fe 48 85 ed 74 7e e8 6f 0b 38 fe 48 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 8b 00 00 00 4c 8b 7d 00 44 89 e0 48 ba 00 00 00
    RSP: 0018:ffffc9000259fbd8 EFLAGS: 00010207
    RAX: dffffc0000000000 RBX: ffff888115d8cd50 RCX: 0000000000000000
    RDX: 0560200020023fff RSI: ffffffff8304bc91 RDI: ffff888115d8cd50
    RBP: 2b0100010011ffff R08: ffff888112340050 R09: ffffed1023549809
    R10: ffff88811aa4c047 R11: ffffed1023549808 R12: 0000000000000045
    R13: ffffc9000259fca0 R14: ffff888112340050 R15: ffff888112340000
    FS:  0000000000000000(0000) GS:ffff88811aa00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000004053ccc0 CR3: 0000000112740000 CR4: 0000000000750ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     brcmf_fweh_event_worker+0x117/0xc00
     ? brcmf_fweh_call_event_handler.isra.0+0x100/0x100
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     process_one_work+0x873/0x13e0
     ? lock_release+0x640/0x640
     ? pwq_dec_nr_in_flight+0x320/0x320
     ? rwlock_bug.part.0+0x90/0x90
     worker_thread+0x8b/0xd10
     ? __kthread_parkme+0xd9/0x1d0
     ? process_one_work+0x13e0/0x13e0
     kthread+0x379/0x450
     ? _raw_spin_unlock_irq+0x24/0x30
     ? set_kthread_struct+0x100/0x100
     ret_from_fork+0x1f/0x30
    Modules linked in: 88XXau(O) 88x2bu(O)
    ---[ end trace 41d302138f3ff55a ]---
    RIP: 0010:brcmf_fweh_call_event_handler.isra.0+0x42/0x100
    Code: 89 f5 53 48 89 fb 48 83 ec 08 e8 79 0b 38 fe 48 85 ed 74 7e e8 6f 0b 38 fe 48 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 8b 00 00 00 4c 8b 7d 00 44 89 e0 48 ba 00 00 00
    RSP: 0018:ffffc9000259fbd8 EFLAGS: 00010207
    RAX: dffffc0000000000 RBX: ffff888115d8cd50 RCX: 0000000000000000
    RDX: 0560200020023fff RSI: ffffffff8304bc91 RDI: ffff888115d8cd50
    RBP: 2b0100010011ffff R08: ffff888112340050 R09: ffffed1023549809
    R10: ffff88811aa4c047 R11: ffffed1023549808 R12: 0000000000000045
    R13: ffffc9000259fca0 R14: ffff888112340050 R15: ffff888112340000
    FS:  0000000000000000(0000) GS:ffff88811aa00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000004053ccc0 CR3: 0000000112740000 CR4: 0000000000750ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Kernel panic - not syncing: Fatal exception
    
    Reported-by: Dokyung Song <dokyungs@yonsei.ac.kr>
    Reported-by: Jisoo Jang <jisoo.jang@yonsei.ac.kr>
    Reported-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Reviewed-by: Arend van Spriel <aspriel@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dokyung Song <dokyung.song@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20221021061359.GA550858@laguna
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b66617cc3c2f51ac53c2885cf9b3ff2684dd0bf7
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 26 13:11:28 2022 +0300

    drm/i915/sdvo: Setup DDC fully before output init
    
    commit e79762512120f11c51317570519a1553c70805d8 upstream.
    
    Call intel_sdvo_select_ddc_bus() before initializing any
    of the outputs. And before that is functional (assuming no VBT)
    we have to set up the controlled_outputs thing. Otherwise DDC
    won't be functional during the output init but LVDS really
    needs it for the fixed mode setup.
    
    Note that the whole multi output support still looks very
    bogus, and more work will be needed to make it correct.
    But for now this should at least fix the LVDS EDID fixed mode
    setup.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/7301
    Fixes: aa2b88074a56 ("drm/i915/sdvo: Fix multi function encoder stuff")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026101134.20865-3-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit 64b7b557dc8a96d9cfed6aedbf81de2df80c025d)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73d52322c4afe173a407e991d378709d54782c14
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 26 13:11:27 2022 +0300

    drm/i915/sdvo: Filter out invalid outputs more sensibly
    
    commit 3e206b6aa6df7eed4297577e0cf8403169b800a2 upstream.
    
    We try to filter out the corresponding xxx1 output
    if the xxx0 output is not present. But the way that is
    being done is pretty awkward. Make it less so.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026101134.20865-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit cc1e66394daaa7e9f005e2487a84e34a39f9308b)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2219b6aad345cc393e275d06f2bab9836fa495c6
Author: Brian Norris <briannorris@chromium.org>
Date:   Wed Oct 19 17:03:49 2022 -0700

    drm/rockchip: dsi: Force synchronous probe
    
    commit 81e592f86f7afdb76d655e7fbd7803d7b8f985d8 upstream.
    
    We can't safely probe a dual-DSI display asynchronously
    (driver_async_probe='*' or driver_async_probe='dw-mipi-dsi-rockchip'
    cmdline), because dw_mipi_dsi_rockchip_find_second() pokes one DSI
    device's drvdata from the other device without any locking.
    
    Request synchronous probe, at least until this driver learns some
    appropriate locking for dual-DSI initialization.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221019170255.2.I6b985b0ca372b7e35c6d9ea970b24bcb262d4fc1@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd955eb4e616e308597ecf3bac4d8aabc7cd2941
Author: Brian Norris <briannorris@chromium.org>
Date:   Wed Oct 19 17:03:48 2022 -0700

    drm/rockchip: dsi: Clean up 'usage_mode' when failing to attach
    
    commit 0be67e0556e469c57100ffe3c90df90abc796f3b upstream.
    
    If we fail to attach the first time (especially: EPROBE_DEFER), we fail
    to clean up 'usage_mode', and thus will fail to attach on any subsequent
    attempts, with "dsi controller already in use".
    
    Re-set to DW_DSI_USAGE_IDLE on attach failure.
    
    This is especially common to hit when enabling asynchronous probe on a
    duel-DSI system (such as RK3399 Gru/Scarlet), such that we're more
    likely to fail dw_mipi_dsi_rockchip_find_second() the first time.
    
    Fixes: 71f68fe7f121 ("drm/rockchip: dsi: add ability to work as a phy instead of full dsi")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221019170255.1.Ia68dfb27b835d31d22bfe23812baf366ee1c6eac@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfa8a89af9f22ae9641ced992b4fe3ec4e6f4f09
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Oct 12 09:12:07 2022 +1000

    cifs: fix regression in very old smb1 mounts
    
    commit 2f6f19c7aaad5005dc75298a413eb0243c5d312d upstream.
    
    BZ: 215375
    
    Fixes: 76a3c92ec9e0 ("cifs: remove support for NTLM and weaker authentication algorithms")
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3189de0ac310c3ca6e8576e46f2ff7539e1ffc33
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Wed Oct 12 20:34:19 2022 +0100

    ext4,f2fs: fix readahead of verity data
    
    commit 4fa0e3ff217f775cb58d2d6d51820ec519243fb9 upstream.
    
    The recent change of page_cache_ra_unbounded() arguments was buggy in the
    two callers, causing us to readahead the wrong pages.  Move the definition
    of ractl down to after the index is set correctly.  This affected
    performance on configurations that use fs-verity.
    
    Link: https://lkml.kernel.org/r/20221012193419.1453558-1-willy@infradead.org
    Fixes: 73bb49da50cd ("mm/readahead: make page_cache_ra_unbounded take a readahead_control")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reported-by: Jintao Yin <nicememory@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a663e6ab17a2eed537139ca7b23e0928e7923d86
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Tue Nov 8 16:23:01 2022 +0530

    tee: Fix tee_shm_register() for kernel TEE drivers
    
    Commit 056d3fed3d1f ("tee: add tee_shm_register_{user,kernel}_buf()")
    refactored tee_shm_register() into corresponding user and kernel space
    functions named tee_shm_register_{user,kernel}_buf(). The upstream fix
    commit 573ae4f13f63 ("tee: add overflow check in register_shm_helper()")
    only applied to tee_shm_register_user_buf().
    
    But the stable kernel 4.19, 5.4, 5.10 and 5.15 don't have the above
    mentioned tee_shm_register() refactoring commit. Hence a direct backport
    wasn't possible and the fix has to be rather applied to
    tee_ioctl_shm_register().
    
    Somehow the fix was correctly backported to 4.19 and 5.4 stable kernels
    but the backports for 5.10 and 5.15 stable kernels were broken as fix
    was applied to common tee_shm_register() function which broke its kernel
    space users such as trusted keys driver.
    
    Fortunately the backport for 5.10 stable kernel was incidently fixed by:
    commit 606fe84a4185 ("tee: fix memory leak in tee_shm_register()"). So
    fix the backport for 5.15 stable kernel as well.
    
    Fixes: 578c349570d2 ("tee: add overflow check in register_shm_helper()")
    Cc: stable@vger.kernel.org # 5.15
    Reported-by: Sahil Malhotra <sahil.malhotra@nxp.com>
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d46db722a0af02587d301d8e73c058b81cd8114e
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Tue Oct 25 15:47:31 2022 +0300

    KVM: x86: emulator: update the emulation mode after CR0 write
    
    commit ad8f9e69942c7db90758d9d774157e53bce94840 upstream.
    
    Update the emulation mode when handling writes to CR0, because
    toggling CR0.PE switches between Real and Protected Mode, and toggling
    CR0.PG when EFER.LME=1 switches between Long and Protected Mode.
    
    This is likely a benign bug because there is no writeback of state,
    other than the RIP increment, and when toggling CR0.PE, the CPU has
    to execute code from a very low memory address.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20221025124741.228045-14-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 942aec252b23a5f7bf8314df738da24ceb21e9ae
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Tue Oct 25 15:47:30 2022 +0300

    KVM: x86: emulator: update the emulation mode after rsm
    
    commit 055f37f84e304e59c046d1accfd8f08462f52c4c upstream.
    
    Update the emulation mode after RSM so that RIP will be correctly
    written back, because the RSM instruction can switch the CPU mode from
    32 bit (or less) to 64 bit.
    
    This fixes a guest crash in case the #SMI is received while the guest
    runs a code from an address > 32 bit.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20221025124741.228045-13-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9df4bb7b3863d018be1dd32f161148e5269c7070
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Tue Oct 25 15:47:29 2022 +0300

    KVM: x86: emulator: introduce emulator_recalc_and_set_mode
    
    commit d087e0f79fa0dd336a9a6b2f79ec23120f5eff73 upstream.
    
    Some instructions update the cpu execution mode, which needs to update the
    emulation mode.
    
    Extract this code, and make assign_eip_far use it.
    
    assign_eip_far now reads CS, instead of getting it via a parameter,
    which is ok, because callers always assign CS to the same value
    before calling this function.
    
    No functional change is intended.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20221025124741.228045-12-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 311f1e51a290c89de47ec37d7468373b7e10b5b1
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Tue Oct 25 15:47:28 2022 +0300

    KVM: x86: emulator: em_sysexit should update ctxt->mode
    
    commit 5015bb89b58225f97df6ac44383e7e8c8662c8c9 upstream.
    
    SYSEXIT is one of the instructions that can change the
    processor mode, thus ctxt->mode should be updated after it.
    
    Note that this is likely a benign bug, because the only problematic
    mode change is from 32 bit to 64 bit which can lead to truncation of RIP,
    and it is not possible to do with sysexit,
    since sysexit running in 32 bit mode will be limited to 32 bit version.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20221025124741.228045-11-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37a03de2d0c568151d0fbebbb9324cadb657ccb1
Author: Ryan Roberts <ryan.roberts@arm.com>
Date:   Thu Oct 27 13:09:45 2022 +0100

    KVM: arm64: Fix bad dereference on MTE-enabled systems
    
    commit b6bcdc9f6b8321e4471ff45413b6410e16762a8d upstream.
    
    enter_exception64() performs an MTE check, which involves dereferencing
    vcpu->kvm. While vcpu has already been fixed up to be a HYP VA pointer,
    kvm is still a pointer in the kernel VA space.
    
    This only affects nVHE configurations with MTE enabled, as in other
    cases, the pointer is either valid (VHE) or not dereferenced (!MTE).
    
    Fix this by first converting kvm to a HYP VA pointer.
    
    Fixes: ea7fc1bb1cd1 ("KVM: arm64: Introduce MTE VM feature")
    Signed-off-by: Ryan Roberts <ryan.roberts@arm.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    [maz: commit message tidy-up]
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221027120945.29679-1-ryan.roberts@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 167dca5e210b5b973ba925f8fd0c8119521d94c9
Author: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Date:   Tue Oct 25 08:37:49 2022 -0400

    KVM: VMX: fully disable SGX if SECONDARY_EXEC_ENCLS_EXITING unavailable
    
    commit 1c1a41497ab879ac9608f3047f230af833eeef3d upstream.
    
    Clear enable_sgx if ENCLS-exiting is not supported, i.e. if SGX cannot be
    virtualized.  When KVM is loaded, adjust_vmx_controls checks that the
    bit is available before enabling the feature; however, other parts of the
    code check enable_sgx and not clearing the variable caused two different
    bugs, mostly affecting nested virtualization scenarios.
    
    First, because enable_sgx remained true, SECONDARY_EXEC_ENCLS_EXITING
    would be marked available in the capability MSR that are accessed by a
    nested hypervisor.  KVM would then propagate the control from vmcs12
    to vmcs02 even if it isn't supported by the processor, thus causing an
    unexpected VM-Fail (exit code 0x7) in L1.
    
    Second, vmx_set_cpu_caps() would not clear the SGX bits when hardware
    support is unavailable.  This is a much less problematic bug as it only
    happens if SGX is soft-disabled (available in the processor but hidden
    in CPUID) or if SGX is supported for bare metal but not in the VMCS
    (will never happen when running on bare metal, but can theoertically
    happen when running in a VM).
    
    Last but not least, this ensures that module params in sysfs reflect
    KVM's actual configuration.
    
    RHBZ: https://bugzilla.redhat.com/show_bug.cgi?id=2127128
    Fixes: 72add915fbd5 ("KVM: VMX: Enable SGX virtualization for SGX1, SGX2 and LC")
    Cc: stable@vger.kernel.org
    Suggested-by: Sean Christopherson <seanjc@google.com>
    Suggested-by: Bandan Das <bsd@redhat.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20221025123749.2201649-1-eesposit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19c2b2ffbeec0de64202b261f974686eb1dc33d0
Author: Jim Mattson <jmattson@google.com>
Date:   Thu Sep 29 15:52:03 2022 -0700

    KVM: x86: Mask off reserved bits in CPUID.8000001FH
    
    commit 86c4f0d547f6460d0426ebb3ba0614f1134b8cda upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. CPUID.8000001FH:EBX[31:16] are reserved bits and
    should be masked off.
    
    Fixes: 8765d75329a3 ("KVM: X86: Extend CPUID range to include new leaf")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220929225203.2234702-6-jmattson@google.com>
    Cc: stable@vger.kernel.org
    [Clear NumVMPL too. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 553fd40d3bf7f9077cb59f4f49dcbce082c745a3
Author: Jim Mattson <jmattson@google.com>
Date:   Fri Sep 30 00:51:58 2022 +0200

    KVM: x86: Mask off reserved bits in CPUID.80000001H
    
    commit 0469e56a14bf8cfb80507e51b7aeec0332cdbc13 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. CPUID.80000001:EBX[27:16] are reserved bits and
    should be masked off.
    
    Fixes: 0771671749b5 ("KVM: Enhance guest cpuid management")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 006366b96c16090c9b73e8930b8dba0251658d83
Author: Jim Mattson <jmattson@google.com>
Date:   Thu Sep 29 15:52:00 2022 -0700

    KVM: x86: Mask off reserved bits in CPUID.80000008H
    
    commit 7030d8530e533844e2f4b0e7476498afcd324634 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. The following ranges of CPUID.80000008H are reserved
    and should be masked off:
        ECX[31:18]
        ECX[11:8]
    
    In addition, the PerfTscSize field at ECX[17:16] should also be zero
    because KVM does not set the PERFTSC bit at CPUID.80000001H.ECX[27].
    
    Fixes: 24c82e576b78 ("KVM: Sanitize cpuid")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220929225203.2234702-3-jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc796fd861fa05e94a98e0d0e4e00580e1c21d66
Author: Jim Mattson <jmattson@google.com>
Date:   Thu Sep 29 15:52:01 2022 -0700

    KVM: x86: Mask off reserved bits in CPUID.8000001AH
    
    commit 079f6889818dd07903fb36c252532ab47ebb6d48 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. In the case of CPUID.8000001AH, only three bits are
    currently defined. The 125 reserved bits should be masked off.
    
    Fixes: 24c82e576b78 ("KVM: Sanitize cpuid")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220929225203.2234702-4-jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef7716398a781abe764d560eb20edd72ea62542a
Author: Jim Mattson <jmattson@google.com>
Date:   Thu Sep 29 15:51:59 2022 -0700

    KVM: x86: Mask off reserved bits in CPUID.80000006H
    
    commit eeb69eab57c6604ac90b3fd8e5ac43f24a5535b1 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. CPUID.80000006H:EDX[17:16] are reserved bits and
    should be masked off.
    
    Fixes: 43d05de2bee7 ("KVM: pass through CPUID(0x80000006)")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220929225203.2234702-2-jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a88998446b6d7d8dae201862db470abe1b5097d2
Author: Jiri Olsa <olsajiri@gmail.com>
Date:   Tue Oct 18 14:27:08 2022 +0200

    x86/syscall: Include asm/ptrace.h in syscall_wrapper header
    
    commit 9440c42941606af4c379afa3cf8624f0dc43a629 upstream.
    
    With just the forward declaration of the 'struct pt_regs' in
    syscall_wrapper.h, the syscall stub functions:
    
      __[x64|ia32]_sys_*(struct pt_regs *regs)
    
    will have different definition of 'regs' argument in BTF data
    based on which object file they are defined in.
    
    If the syscall's object includes 'struct pt_regs' definition,
    the BTF argument data will point to a 'struct pt_regs' record,
    like:
    
      [226] STRUCT 'pt_regs' size=168 vlen=21
             'r15' type_id=1 bits_offset=0
             'r14' type_id=1 bits_offset=64
             'r13' type_id=1 bits_offset=128
      ...
    
    If not, it will point to a fwd declaration record:
    
      [15439] FWD 'pt_regs' fwd_kind=struct
    
    and make bpf tracing program hooking on those functions unable
    to access fields from 'struct pt_regs'.
    
    Include asm/ptrace.h directly in syscall_wrapper.h to make sure all
    syscalls see 'struct pt_regs' definition. This then results in BTF for
    '__*_sys_*(struct pt_regs *regs)' functions to point to the actual
    struct, not just the forward declaration.
    
      [ bp: No Fixes tag as this is not really a bug fix but "adjustment" so
        that BTF is happy. ]
    
    Reported-by: Akihiro HARAI <jharai0815@gmail.com>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Cc: <stable@vger.kernel.org> # this is needed only for BTF so kernels >= 5.15
    Link: https://lore.kernel.org/r/20221018122708.823792-1-jolsa@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 999cff2b6ce3b45c08abf793bf55534777421327
Author: Luís Henriques <lhenriques@suse.de>
Date:   Wed Oct 12 14:13:30 2022 +0100

    ext4: fix BUG_ON() when directory entry has invalid rec_len
    
    commit 17a0bc9bd697f75cfdf9b378d5eb2d7409c91340 upstream.
    
    The rec_len field in the directory entry has to be a multiple of 4.  A
    corrupted filesystem image can be used to hit a BUG() in
    ext4_rec_len_to_disk(), called from make_indexed_dir().
    
     ------------[ cut here ]------------
     kernel BUG at fs/ext4/ext4.h:2413!
     ...
     RIP: 0010:make_indexed_dir+0x53f/0x5f0
     ...
     Call Trace:
      <TASK>
      ? add_dirent_to_buf+0x1b2/0x200
      ext4_add_entry+0x36e/0x480
      ext4_add_nondir+0x2b/0xc0
      ext4_create+0x163/0x200
      path_openat+0x635/0xe90
      do_filp_open+0xb4/0x160
      ? __create_object.isra.0+0x1de/0x3b0
      ? _raw_spin_unlock+0x12/0x30
      do_sys_openat2+0x91/0x150
      __x64_sys_open+0x6c/0xa0
      do_syscall_64+0x3c/0x80
      entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    The fix simply adds a call to ext4_check_dir_entry() to validate the
    directory entry, returning -EFSCORRUPTED if the entry is invalid.
    
    CC: stable@kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216540
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Link: https://lore.kernel.org/r/20221012131330.32456-1-lhenriques@suse.de
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a43c015e98121c91a76154edf42280ce1a8a883
Author: Ye Bin <yebin10@huawei.com>
Date:   Tue Oct 18 10:27:01 2022 +0800

    ext4: fix warning in 'ext4_da_release_space'
    
    commit 1b8f787ef547230a3249bcf897221ef0cc78481b upstream.
    
    Syzkaller report issue as follows:
    EXT4-fs (loop0): Free/Dirty block details
    EXT4-fs (loop0): free_blocks=0
    EXT4-fs (loop0): dirty_blocks=0
    EXT4-fs (loop0): Block reservation details
    EXT4-fs (loop0): i_reserved_data_blocks=0
    EXT4-fs warning (device loop0): ext4_da_release_space:1527: ext4_da_release_space: ino 18, to_free 1 with only 0 reserved data blocks
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 92 at fs/ext4/inode.c:1528 ext4_da_release_space+0x25e/0x370 fs/ext4/inode.c:1524
    Modules linked in:
    CPU: 0 PID: 92 Comm: kworker/u4:4 Not tainted 6.0.0-syzkaller-09423-g493ffd6605b2 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/22/2022
    Workqueue: writeback wb_workfn (flush-7:0)
    RIP: 0010:ext4_da_release_space+0x25e/0x370 fs/ext4/inode.c:1528
    RSP: 0018:ffffc900015f6c90 EFLAGS: 00010296
    RAX: 42215896cd52ea00 RBX: 0000000000000000 RCX: 42215896cd52ea00
    RDX: 0000000000000000 RSI: 0000000080000001 RDI: 0000000000000000
    RBP: 1ffff1100e907d96 R08: ffffffff816aa79d R09: fffff520002bece5
    R10: fffff520002bece5 R11: 1ffff920002bece4 R12: ffff888021fd2000
    R13: ffff88807483ecb0 R14: 0000000000000001 R15: ffff88807483e740
    FS:  0000000000000000(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00005555569ba628 CR3: 000000000c88e000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     ext4_es_remove_extent+0x1ab/0x260 fs/ext4/extents_status.c:1461
     mpage_release_unused_pages+0x24d/0xef0 fs/ext4/inode.c:1589
     ext4_writepages+0x12eb/0x3be0 fs/ext4/inode.c:2852
     do_writepages+0x3c3/0x680 mm/page-writeback.c:2469
     __writeback_single_inode+0xd1/0x670 fs/fs-writeback.c:1587
     writeback_sb_inodes+0xb3b/0x18f0 fs/fs-writeback.c:1870
     wb_writeback+0x41f/0x7b0 fs/fs-writeback.c:2044
     wb_do_writeback fs/fs-writeback.c:2187 [inline]
     wb_workfn+0x3cb/0xef0 fs/fs-writeback.c:2227
     process_one_work+0x877/0xdb0 kernel/workqueue.c:2289
     worker_thread+0xb14/0x1330 kernel/workqueue.c:2436
     kthread+0x266/0x300 kernel/kthread.c:376
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
     </TASK>
    
    Above issue may happens as follows:
    ext4_da_write_begin
      ext4_create_inline_data
        ext4_clear_inode_flag(inode, EXT4_INODE_EXTENTS);
        ext4_set_inode_flag(inode, EXT4_INODE_INLINE_DATA);
    __ext4_ioctl
      ext4_ext_migrate -> will lead to eh->eh_entries not zero, and set extent flag
    ext4_da_write_begin
      ext4_da_convert_inline_data_to_extent
        ext4_da_write_inline_data_begin
          ext4_da_map_blocks
            ext4_insert_delayed_block
              if (!ext4_es_scan_clu(inode, &ext4_es_is_delonly, lblk))
                if (!ext4_es_scan_clu(inode, &ext4_es_is_mapped, lblk))
                  ext4_clu_mapped(inode, EXT4_B2C(sbi, lblk)); -> will return 1
                   allocated = true;
              ext4_es_insert_delayed_block(inode, lblk, allocated);
    ext4_writepages
      mpage_map_and_submit_extent(handle, &mpd, &give_up_on_write); -> return -ENOSPC
      mpage_release_unused_pages(&mpd, give_up_on_write); -> give_up_on_write == 1
        ext4_es_remove_extent
          ext4_da_release_space(inode, reserved);
            if (unlikely(to_free > ei->i_reserved_data_blocks))
              -> to_free == 1  but ei->i_reserved_data_blocks == 0
              -> then trigger warning as above
    
    To solve above issue, forbid inode do migrate which has inline data.
    
    Cc: stable@kernel.org
    Reported-by: syzbot+c740bb18df70ad00952e@syzkaller.appspotmail.com
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221018022701.683489-1-yebin10@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ada82803a7739cb2778eccb78336a8b183fdffa1
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 28 18:12:49 2022 +0200

    parisc: Avoid printing the hardware path twice
    
    commit 2b6ae0962b421103feb41a80406732944b0665b3 upstream.
    
    Avoid that the hardware path is shown twice in the kernel log, and clean
    up the output of the version numbers to show up in the same order as
    they are listed in the hardware database in the hardware.c file.
    Additionally, optimize the memory footprint of the hardware database
    and mark some code as init code.
    
    Fixes: cab56b51ec0e ("parisc: Fix device names in /proc/iomem")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v4.9+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 081ff43a778630ba0d71712f91bff830e91c3410
Author: Helge Deller <deller@gmx.de>
Date:   Thu Oct 27 09:12:05 2022 +0200

    parisc: Export iosapic_serial_irq() symbol for serial port driver
    
    commit a0c9f1f2e53b8eb2ae43987a30e547ba56b4fa18 upstream.
    
    The parisc serial port driver needs this symbol when it's compiled
    as module.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5daf985dd0f3eb96a6d2bd151d4ce0cbc369a3c2
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 21 07:44:49 2022 +0200

    parisc: Make 8250_gsc driver dependend on CONFIG_PARISC
    
    commit e8a18e3f00f3ee8d07c17ab1ea3ad4df4a3b6fe0 upstream.
    
    Although the name of the driver 8250_gsc.c suggests that it handles
    only serial ports on the GSC bus, it does handle serial ports listed
    in the parisc machine inventory as well, e.g. the serial ports in a
    C8000 PCI-only workstation.
    
    Change the dependency to CONFIG_PARISC, so that the driver gets included
    in the kernel even if CONFIG_GSC isn't set.
    
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 425fe99771bfe21ffb8ba0dd9b97f90722efbf67
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon Oct 31 08:41:19 2022 -0700

    perf/x86/intel: Fix pebs event constraints for SPR
    
    commit 0916886bb978e7eae1ca3955ba07f51c020da20c upstream.
    
    According to the latest event list, update the MEM_INST_RETIRED events
    which support the DataLA facility for SPR.
    
    Fixes: 61b985e3e775 ("perf/x86/intel: Add perf core PMU support for Sapphire Rapids")
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221031154119.571386-2-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4613a450172e7f93268ecdef7da5da8bbf6551b4
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon Oct 31 08:45:50 2022 -0700

    perf/x86/intel: Add Cooper Lake stepping to isolation_ucodes[]
    
    commit 6f8faf471446844bb9c318e0340221049d5c19f4 upstream.
    
    The intel_pebs_isolation quirk checks both model number and stepping.
    Cooper Lake has a different stepping (11) than the other Skylake Xeon.
    It cannot benefit from the optimization in commit 9b545c04abd4f
    ("perf/x86/kvm: Avoid unnecessary work in guest filtering").
    
    Add the stepping of Cooper Lake into the isolation_ucodes[] table.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221031154550.571663-1-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7de3fe6a1354b3f8f4576230d99f4b84736091f3
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon Oct 31 08:41:18 2022 -0700

    perf/x86/intel: Fix pebs event constraints for ICL
    
    commit acc5568b90c19ac6375508a93b9676cd18a92a35 upstream.
    
    According to the latest event list, update the MEM_INST_RETIRED events
    which support the DataLA facility.
    
    Fixes: 6017608936c1 ("perf/x86/intel: Add Icelake support")
    Reported-by: Jannis Klinkenberg <jannis.klinkenberg@rwth-aachen.de>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221031154119.571386-1-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71d6c33fe223255f4416a01514da2c0bc3e283e7
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Oct 17 10:01:57 2022 +0100

    arm64: entry: avoid kprobe recursion
    
    commit 024f4b2e1f874934943eb2d3d288ebc52c79f55c upstream.
    
    The cortex_a76_erratum_1463225_debug_handler() function is called when
    handling debug exceptions (and synchronous exceptions from BRK
    instructions), and so is called when a probed function executes. If the
    compiler does not inline cortex_a76_erratum_1463225_debug_handler(), it
    can be probed.
    
    If cortex_a76_erratum_1463225_debug_handler() is probed, any debug
    exception or software breakpoint exception will result in recursive
    exceptions leading to a stack overflow. This can be triggered with the
    ftrace multiple_probes selftest, and as per the example splat below.
    
    This is a regression caused by commit:
    
      6459b8469753e9fe ("arm64: entry: consolidate Cortex-A76 erratum 1463225 workaround")
    
    ... which removed the NOKPROBE_SYMBOL() annotation associated with the
    function.
    
    My intent was that cortex_a76_erratum_1463225_debug_handler() would be
    inlined into its caller, el1_dbg(), which is marked noinstr and cannot
    be probed. Mark cortex_a76_erratum_1463225_debug_handler() as
    __always_inline to ensure this.
    
    Example splat prior to this patch (with recursive entries elided):
    
    | # echo p cortex_a76_erratum_1463225_debug_handler > /sys/kernel/debug/tracing/kprobe_events
    | # echo p do_el0_svc >> /sys/kernel/debug/tracing/kprobe_events
    | # echo 1 > /sys/kernel/debug/tracing/events/kprobes/enable
    | Insufficient stack space to handle exception!
    | ESR: 0x0000000096000047 -- DABT (current EL)
    | FAR: 0xffff800009cefff0
    | Task stack:     [0xffff800009cf0000..0xffff800009cf4000]
    | IRQ stack:      [0xffff800008000000..0xffff800008004000]
    | Overflow stack: [0xffff00007fbc00f0..0xffff00007fbc10f0]
    | CPU: 0 PID: 145 Comm: sh Not tainted 6.0.0 #2
    | Hardware name: linux,dummy-virt (DT)
    | pstate: 604003c5 (nZCv DAIF +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    | pc : arm64_enter_el1_dbg+0x4/0x20
    | lr : el1_dbg+0x24/0x5c
    | sp : ffff800009cf0000
    | x29: ffff800009cf0000 x28: ffff000002c74740 x27: 0000000000000000
    | x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000
    | x23: 00000000604003c5 x22: ffff80000801745c x21: 0000aaaac95ac068
    | x20: 00000000f2000004 x19: ffff800009cf0040 x18: 0000000000000000
    | x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000000000
    | x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000000000
    | x11: 0000000000000010 x10: ffff800008c87190 x9 : ffff800008ca00d0
    | x8 : 000000000000003c x7 : 0000000000000000 x6 : 0000000000000000
    | x5 : 0000000000000000 x4 : 0000000000000000 x3 : 00000000000043a4
    | x2 : 00000000f2000004 x1 : 00000000f2000004 x0 : ffff800009cf0040
    | Kernel panic - not syncing: kernel stack overflow
    | CPU: 0 PID: 145 Comm: sh Not tainted 6.0.0 #2
    | Hardware name: linux,dummy-virt (DT)
    | Call trace:
    |  dump_backtrace+0xe4/0x104
    |  show_stack+0x18/0x4c
    |  dump_stack_lvl+0x64/0x7c
    |  dump_stack+0x18/0x38
    |  panic+0x14c/0x338
    |  test_taint+0x0/0x2c
    |  panic_bad_stack+0x104/0x118
    |  handle_bad_stack+0x34/0x48
    |  __bad_stack+0x78/0x7c
    |  arm64_enter_el1_dbg+0x4/0x20
    |  el1h_64_sync_handler+0x40/0x98
    |  el1h_64_sync+0x64/0x68
    |  cortex_a76_erratum_1463225_debug_handler+0x0/0x34
    ...
    |  el1h_64_sync_handler+0x40/0x98
    |  el1h_64_sync+0x64/0x68
    |  cortex_a76_erratum_1463225_debug_handler+0x0/0x34
    ...
    |  el1h_64_sync_handler+0x40/0x98
    |  el1h_64_sync+0x64/0x68
    |  cortex_a76_erratum_1463225_debug_handler+0x0/0x34
    |  el1h_64_sync_handler+0x40/0x98
    |  el1h_64_sync+0x64/0x68
    |  do_el0_svc+0x0/0x28
    |  el0t_64_sync_handler+0x84/0xf0
    |  el0t_64_sync+0x18c/0x190
    | Kernel Offset: disabled
    | CPU features: 0x0080,00005021,19001080
    | Memory Limit: none
    | ---[ end Kernel panic - not syncing: kernel stack overflow ]---
    
    With this patch, cortex_a76_erratum_1463225_debug_handler() is inlined
    into el1_dbg(), and el1_dbg() cannot be probed:
    
    | # echo p cortex_a76_erratum_1463225_debug_handler > /sys/kernel/debug/tracing/kprobe_events
    | sh: write error: No such file or directory
    | # grep -w cortex_a76_erratum_1463225_debug_handler /proc/kallsyms | wc -l
    | 0
    | # echo p el1_dbg > /sys/kernel/debug/tracing/kprobe_events
    | sh: write error: Invalid argument
    | # grep -w el1_dbg /proc/kallsyms | wc -l
    | 1
    
    Fixes: 6459b8469753 ("arm64: entry: consolidate Cortex-A76 erratum 1463225 workaround")
    Cc: <stable@vger.kernel.org> # 5.12.x
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221017090157.2881408-1-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52be536155f57a03fb7bdabf814ded77952ae311
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Oct 20 10:39:09 2022 +0200

    efi: random: Use 'ACPI reclaim' memory for random seed
    
    commit 7d866e38c7e9ece8a096d0d098fa9d92b9d4f97e upstream.
    
    EFI runtime services data is guaranteed to be preserved by the OS,
    making it a suitable candidate for the EFI random seed table, which may
    be passed to kexec kernels as well (after refreshing the seed), and so
    we need to ensure that the memory is preserved without support from the
    OS itself.
    
    However, runtime services data is intended for allocations that are
    relevant to the implementations of the runtime services themselves, and
    so they are unmapped from the kernel linear map, and mapped into the EFI
    page tables that are active while runtime service invocations are in
    progress. None of this is needed for the RNG seed.
    
    So let's switch to EFI 'ACPI reclaim' memory: in spite of the name,
    there is nothing exclusively ACPI about it, it is simply a type of
    allocation that carries firmware provided data which may or may not be
    relevant to the OS, and it is left up to the OS to decide whether to
    reclaim it after having consumed its contents.
    
    Given that in Linux, we never reclaim these allocations, it is a good
    choice for the EFI RNG seed, as the allocation is guaranteed to survive
    kexec reboots.
    
    One additional reason for changing this now is to align it with the
    upcoming recommendation for EFI bootloader provided RNG seeds, which
    must not use EFI runtime services code/data allocations.
    
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83b5ec7ee82d74973ee7e1f565e8bf95ace72a94
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Oct 20 10:39:08 2022 +0200

    efi: random: reduce seed size to 32 bytes
    
    commit 161a438d730dade2ba2b1bf8785f0759aba4ca5f upstream.
    
    We no longer need at least 64 bytes of random seed to permit the early
    crng init to complete. The RNG is now based on Blake2s, so reduce the
    EFI seed size to the Blake2s hash size, which is sufficient for our
    purposes.
    
    While at it, drop the READ_ONCE(), which was supposed to prevent size
    from being evaluated after seed was unmapped. However, this cannot
    actually happen, so READ_ONCE() is unnecessary here.
    
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Acked-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0417f70b8588e03b16651897035bd99b0d144e93
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 28 14:25:20 2022 +0200

    fuse: add file_modified() to fallocate
    
    commit 4a6f278d4827b59ba26ceae0ff4529ee826aa258 upstream.
    
    Add missing file_modified() call to fuse_file_fallocate().  Without this
    fallocate on fuse failed to clear privileges.
    
    Fixes: 05ba1f082300 ("fuse: add FALLOCATE operation")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2de8eec8afb75792440b8900a01d52b8f6742fd1
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Oct 25 21:33:57 2022 +0800

    capabilities: fix potential memleak on error path from vfs_getxattr_alloc()
    
    commit 8cf0a1bc12870d148ae830a4ba88cfdf0e879cee upstream.
    
    In cap_inode_getsecurity(), we will use vfs_getxattr_alloc() to
    complete the memory allocation of tmpbuf, if we have completed
    the memory allocation of tmpbuf, but failed to call handler->get(...),
    there will be a memleak in below logic:
    
      |-- ret = (int)vfs_getxattr_alloc(mnt_userns, ...)
        |           /* ^^^ alloc for tmpbuf */
        |-- value = krealloc(*xattr_value, error + 1, flags)
        |           /* ^^^ alloc memory */
        |-- error = handler->get(handler, ...)
        |           /* error! */
        |-- *xattr_value = value
        |           /* xattr_value is &tmpbuf (memory leak!) */
    
    So we will try to free(tmpbuf) after vfs_getxattr_alloc() fails to fix it.
    
    Cc: stable@vger.kernel.org
    Fixes: 8db6c34f1dbc ("Introduce v3 namespaced file capabilities")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Acked-by: Serge Hallyn <serge@hallyn.com>
    [PM: subject line and backtrace tweaks]
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd07f8067b35153190ad63e5174987e0a1335031
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Mon Oct 17 10:38:06 2022 +0000

    tracing/histogram: Update document for KEYS_MAX size
    
    commit a635beeacc6d56d2b71c39e6c0103f85b53d108e upstream.
    
    After commit 4f36c2d85ced ("tracing: Increase tracing map KEYS_MAX size"),
    'keys' supports up to three fields.
    
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Cc: stable@vger.kernel.org
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Link: https://lore.kernel.org/r/20221017103806.2479139-1-zhengyejian1@huawei.com
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27b4406f9c35bb1fe9049fdd833d36665fc2b077
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Fri Oct 21 08:01:53 2022 +0200

    tools/nolibc/string: Fix memcmp() implementation
    
    commit b3f4f51ea68a495f8a5956064c33dce711a2df91 upstream.
    
    The C standard says that memcmp() must treat the buffers as consisting
    of "unsigned chars". If char happens to be unsigned, the casts are ok,
    but then obviously the c1 variable can never contain a negative
    value. And when char is signed, the casts are wrong, and there's still
    a problem with using an 8-bit quantity to hold the difference, because
    that can range from -255 to +255.
    
    For example, assuming char is signed, comparing two 1-byte buffers,
    one containing 0x00 and another 0x80, the current implementation would
    return -128 for both memcmp(a, b, 1) and memcmp(b, a, 1), whereas one
    of those should of course return something positive.
    
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Fixes: 66b6f755ad45 ("rcutorture: Import a copy of nolibc")
    Cc: stable@vger.kernel.org # v5.0+
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5074df412bf3df9d6ce096b6fa03eb1082d05c9
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Nov 1 19:10:09 2022 -0400

    ring-buffer: Check for NULL cpu_buffer in ring_buffer_wake_waiters()
    
    commit 7433632c9ff68a991bd0bc38cabf354e9d2de410 upstream.
    
    On some machines the number of listed CPUs may be bigger than the actual
    CPUs that exist. The tracing subsystem allocates a per_cpu directory with
    access to the per CPU ring buffer via a cpuX file. But to save space, the
    ring buffer will only allocate buffers for online CPUs, even though the
    CPU array will be as big as the nr_cpu_ids.
    
    With the addition of waking waiters on the ring buffer when closing the
    file, the ring_buffer_wake_waiters() now needs to make sure that the
    buffer is allocated (with the irq_work allocated with it) before trying to
    wake waiters, as it will cause a NULL pointer dereference.
    
    While debugging this, I added a NULL check for the buffer itself (which is
    OK to do), and also NULL pointer checks against buffer->buffers (which is
    not fine, and will WARN) as well as making sure the CPU number passed in
    is within the nr_cpu_ids (which is also not fine if it isn't).
    
    Link: https://lore.kernel.org/all/87h6zklb6n.wl-tiwai@suse.de/
    Link: https://lore.kernel.org/all/CAM6Wdxc0KRJMXVAA0Y=u6Jh2V=uWB-_Fn6M4xRuNppfXzL1mUg@mail.gmail.com/
    Link: https://lkml.kernel.org/linux-trace-kernel/20221101191009.1e7378c8@rorschach.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Steven Noonan <steven.noonan@gmail.com>
    Bugzilla: https://bugzilla.opensuse.org/show_bug.cgi?id=1204705
    Reported-by: Takashi Iwai <tiwai@suse.de>
    Reported-by: Roland Ruckerbauer <roland.rucky@gmail.com>
    Fixes: f3ddb74ad079 ("tracing: Wake up ring buffer waiters on closing of the file")
    Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85f3caa9557976930f9825d6342d05d020976e3e
Author: Li Qiang <liq3ea@163.com>
Date:   Fri Nov 4 08:49:31 2022 +0900

    kprobe: reverse kp->flags when arm_kprobe failed
    
    commit 4a6f316d6855a434f56dbbeba05e14c01acde8f8 upstream.
    
    In aggregate kprobe case, when arm_kprobe failed,
    we need set the kp->flags with KPROBE_FLAG_DISABLED again.
    If not, the 'kp' kprobe will been considered as enabled
    but it actually not enabled.
    
    Link: https://lore.kernel.org/all/20220902155820.34755-1-liq3ea@163.com/
    
    Fixes: 12310e343755 ("kprobes: Propagate error from arm_kprobe_ftrace()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1b6a8e3414aeaa0985139180c145d2d0fbd2a49
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Wed Nov 2 15:29:54 2022 +0800

    tracing: kprobe: Fix memory leak in test_gen_kprobe/kretprobe_cmd()
    
    commit 66f0919c953ef7b55e5ab94389a013da2ce80a2c upstream.
    
    test_gen_kprobe_cmd() only free buf in fail path, hence buf will leak
    when there is no failure. Move kfree(buf) from fail path to common path
    to prevent the memleak. The same reason and solution in
    test_gen_kretprobe_cmd().
    
    unreferenced object 0xffff888143b14000 (size 2048):
      comm "insmod", pid 52490, jiffies 4301890980 (age 40.553s)
      hex dump (first 32 bytes):
        70 3a 6b 70 72 6f 62 65 73 2f 67 65 6e 5f 6b 70  p:kprobes/gen_kp
        72 6f 62 65 5f 74 65 73 74 20 64 6f 5f 73 79 73  robe_test do_sys
      backtrace:
        [<000000006d7b836b>] kmalloc_trace+0x27/0xa0
        [<0000000009528b5b>] 0xffffffffa059006f
        [<000000008408b580>] do_one_initcall+0x87/0x2a0
        [<00000000c4980a7e>] do_init_module+0xdf/0x320
        [<00000000d775aad0>] load_module+0x3006/0x3390
        [<00000000e9a74b80>] __do_sys_finit_module+0x113/0x1b0
        [<000000003726480d>] do_syscall_64+0x35/0x80
        [<000000003441e93b>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Link: https://lore.kernel.org/all/20221102072954.26555-1-shangxiaojing@huawei.com/
    
    Fixes: 64836248dda2 ("tracing: Add kprobe event command generation test module")
    Cc: stable@vger.kernel.org
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 828577e0baafabb52fb59d0e1ae75eddf83347ed
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 10:52:07 2022 -0700

    tcp/udp: Make early_demux back namespacified.
    
    commit 11052589cf5c0bab3b4884d423d5f60c38fcf25d upstream.
    
    Commit e21145a9871a ("ipv4: namespacify ip_early_demux sysctl knob") made
    it possible to enable/disable early_demux on a per-netns basis.  Then, we
    introduced two knobs, tcp_early_demux and udp_early_demux, to switch it for
    TCP/UDP in commit dddb64bcb346 ("net: Add sysctl to toggle early demux for
    tcp and udp").  However, the .proc_handler() was wrong and actually
    disabled us from changing the behaviour in each netns.
    
    We can execute early_demux if net.ipv4.ip_early_demux is on and each proto
    .early_demux() handler is not NULL.  When we toggle (tcp|udp)_early_demux,
    the change itself is saved in each netns variable, but the .early_demux()
    handler is a global variable, so the handler is switched based on the
    init_net's sysctl variable.  Thus, netns (tcp|udp)_early_demux knobs have
    nothing to do with the logic.  Whether we CAN execute proto .early_demux()
    is always decided by init_net's sysctl knob, and whether we DO it or not is
    by each netns ip_early_demux knob.
    
    This patch namespacifies (tcp|udp)_early_demux again.  For now, the users
    of the .early_demux() handler are TCP and UDP only, and they are called
    directly to avoid retpoline.  So, we can remove the .early_demux() handler
    from inet6?_protos and need not dereference them in ip6?_rcv_finish_core().
    If another proto needs .early_demux(), we can restore it at that time.
    
    Fixes: dddb64bcb346 ("net: Add sysctl to toggle early demux for tcp and udp")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20220713175207.7727-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88561a66777e7a2fe06638c6dcb22a9fae0b6733
Author: Li Huafei <lihuafei1@huawei.com>
Date:   Thu Nov 3 11:10:10 2022 +0800

    ftrace: Fix use-after-free for dynamic ftrace_ops
    
    commit 0e792b89e6800cd9cb4757a76a96f7ef3e8b6294 upstream.
    
    KASAN reported a use-after-free with ftrace ops [1]. It was found from
    vmcore that perf had registered two ops with the same content
    successively, both dynamic. After unregistering the second ops, a
    use-after-free occurred.
    
    In ftrace_shutdown(), when the second ops is unregistered, the
    FTRACE_UPDATE_CALLS command is not set because there is another enabled
    ops with the same content.  Also, both ops are dynamic and the ftrace
    callback function is ftrace_ops_list_func, so the
    FTRACE_UPDATE_TRACE_FUNC command will not be set. Eventually the value
    of 'command' will be 0 and ftrace_shutdown() will skip the rcu
    synchronization.
    
    However, ftrace may be activated. When the ops is released, another CPU
    may be accessing the ops.  Add the missing synchronization to fix this
    problem.
    
    [1]
    BUG: KASAN: use-after-free in __ftrace_ops_list_func kernel/trace/ftrace.c:7020 [inline]
    BUG: KASAN: use-after-free in ftrace_ops_list_func+0x2b0/0x31c kernel/trace/ftrace.c:7049
    Read of size 8 at addr ffff56551965bbc8 by task syz-executor.2/14468
    
    CPU: 1 PID: 14468 Comm: syz-executor.2 Not tainted 5.10.0 #7
    Hardware name: linux,dummy-virt (DT)
    Call trace:
     dump_backtrace+0x0/0x40c arch/arm64/kernel/stacktrace.c:132
     show_stack+0x30/0x40 arch/arm64/kernel/stacktrace.c:196
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b4/0x248 lib/dump_stack.c:118
     print_address_description.constprop.0+0x28/0x48c mm/kasan/report.c:387
     __kasan_report mm/kasan/report.c:547 [inline]
     kasan_report+0x118/0x210 mm/kasan/report.c:564
     check_memory_region_inline mm/kasan/generic.c:187 [inline]
     __asan_load8+0x98/0xc0 mm/kasan/generic.c:253
     __ftrace_ops_list_func kernel/trace/ftrace.c:7020 [inline]
     ftrace_ops_list_func+0x2b0/0x31c kernel/trace/ftrace.c:7049
     ftrace_graph_call+0x0/0x4
     __might_sleep+0x8/0x100 include/linux/perf_event.h:1170
     __might_fault mm/memory.c:5183 [inline]
     __might_fault+0x58/0x70 mm/memory.c:5171
     do_strncpy_from_user lib/strncpy_from_user.c:41 [inline]
     strncpy_from_user+0x1f4/0x4b0 lib/strncpy_from_user.c:139
     getname_flags+0xb0/0x31c fs/namei.c:149
     getname+0x2c/0x40 fs/namei.c:209
     [...]
    
    Allocated by task 14445:
     kasan_save_stack+0x24/0x50 mm/kasan/common.c:48
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc mm/kasan/common.c:479 [inline]
     __kasan_kmalloc.constprop.0+0x110/0x13c mm/kasan/common.c:449
     kasan_kmalloc+0xc/0x14 mm/kasan/common.c:493
     kmem_cache_alloc_trace+0x440/0x924 mm/slub.c:2950
     kmalloc include/linux/slab.h:563 [inline]
     kzalloc include/linux/slab.h:675 [inline]
     perf_event_alloc.part.0+0xb4/0x1350 kernel/events/core.c:11230
     perf_event_alloc kernel/events/core.c:11733 [inline]
     __do_sys_perf_event_open kernel/events/core.c:11831 [inline]
     __se_sys_perf_event_open+0x550/0x15f4 kernel/events/core.c:11723
     __arm64_sys_perf_event_open+0x6c/0x80 kernel/events/core.c:11723
     [...]
    
    Freed by task 14445:
     kasan_save_stack+0x24/0x50 mm/kasan/common.c:48
     kasan_set_track+0x24/0x34 mm/kasan/common.c:56
     kasan_set_free_info+0x20/0x40 mm/kasan/generic.c:358
     __kasan_slab_free.part.0+0x11c/0x1b0 mm/kasan/common.c:437
     __kasan_slab_free mm/kasan/common.c:445 [inline]
     kasan_slab_free+0x2c/0x40 mm/kasan/common.c:446
     slab_free_hook mm/slub.c:1569 [inline]
     slab_free_freelist_hook mm/slub.c:1608 [inline]
     slab_free mm/slub.c:3179 [inline]
     kfree+0x12c/0xc10 mm/slub.c:4176
     perf_event_alloc.part.0+0xa0c/0x1350 kernel/events/core.c:11434
     perf_event_alloc kernel/events/core.c:11733 [inline]
     __do_sys_perf_event_open kernel/events/core.c:11831 [inline]
     __se_sys_perf_event_open+0x550/0x15f4 kernel/events/core.c:11723
     [...]
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221103031010.166498-1-lihuafei1@huawei.com
    
    Fixes: edb096e00724f ("ftrace: Fix memleak when unregistering dynamic ops when tracing disabled")
    Cc: stable@vger.kernel.org
    Suggested-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 450d7480705e2bbac462f0c0fc780f9fc2dcf25f
Author: David Sterba <dsterba@suse.com>
Date:   Tue Oct 18 16:05:52 2022 +0200

    btrfs: fix type of parameter generation in btrfs_get_dentry
    
    commit 2398091f9c2c8e0040f4f9928666787a3e8108a7 upstream.
    
    The type of parameter generation has been u32 since the beginning,
    however all callers pass a u64 generation, so unify the types to prevent
    potential loss.
    
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 007058eb8292efc4c88f921752194b83269da085
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Oct 14 08:52:46 2022 -0400

    btrfs: fix tree mod log mishandling of reallocated nodes
    
    commit 968b71583130b6104c9f33ba60446d598e327a8b upstream.
    
    We have been seeing the following panic in production
    
      kernel BUG at fs/btrfs/tree-mod-log.c:677!
      invalid opcode: 0000 [#1] SMP
      RIP: 0010:tree_mod_log_rewind+0x1b4/0x200
      RSP: 0000:ffffc9002c02f890 EFLAGS: 00010293
      RAX: 0000000000000003 RBX: ffff8882b448c700 RCX: 0000000000000000
      RDX: 0000000000008000 RSI: 00000000000000a7 RDI: ffff88877d831c00
      RBP: 0000000000000002 R08: 000000000000009f R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000100c40 R12: 0000000000000001
      R13: ffff8886c26d6a00 R14: ffff88829f5424f8 R15: ffff88877d831a00
      FS:  00007fee1d80c780(0000) GS:ffff8890400c0000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007fee1963a020 CR3: 0000000434f33002 CR4: 00000000007706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
       btrfs_get_old_root+0x12b/0x420
       btrfs_search_old_slot+0x64/0x2f0
       ? tree_mod_log_oldest_root+0x3d/0xf0
       resolve_indirect_ref+0xfd/0x660
       ? ulist_alloc+0x31/0x60
       ? kmem_cache_alloc_trace+0x114/0x2c0
       find_parent_nodes+0x97a/0x17e0
       ? ulist_alloc+0x30/0x60
       btrfs_find_all_roots_safe+0x97/0x150
       iterate_extent_inodes+0x154/0x370
       ? btrfs_search_path_in_tree+0x240/0x240
       iterate_inodes_from_logical+0x98/0xd0
       ? btrfs_search_path_in_tree+0x240/0x240
       btrfs_ioctl_logical_to_ino+0xd9/0x180
       btrfs_ioctl+0xe2/0x2ec0
       ? __mod_memcg_lruvec_state+0x3d/0x280
       ? do_sys_openat2+0x6d/0x140
       ? kretprobe_dispatcher+0x47/0x70
       ? kretprobe_rethook_handler+0x38/0x50
       ? rethook_trampoline_handler+0x82/0x140
       ? arch_rethook_trampoline_callback+0x3b/0x50
       ? kmem_cache_free+0xfb/0x270
       ? do_sys_openat2+0xd5/0x140
       __x64_sys_ioctl+0x71/0xb0
       do_syscall_64+0x2d/0x40
    
    Which is this code in tree_mod_log_rewind()
    
            switch (tm->op) {
            case BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING:
                    BUG_ON(tm->slot < n);
    
    This occurs because we replay the nodes in order that they happened, and
    when we do a REPLACE we will log a REMOVE_WHILE_FREEING for every slot,
    starting at 0.  'n' here is the number of items in this block, which in
    this case was 1, but we had 2 REMOVE_WHILE_FREEING operations.
    
    The actual root cause of this was that we were replaying operations for
    a block that shouldn't have been replayed.  Consider the following
    sequence of events
    
    1. We have an already modified root, and we do a btrfs_get_tree_mod_seq().
    2. We begin removing items from this root, triggering KEY_REPLACE for
       it's child slots.
    3. We remove one of the 2 children this root node points to, thus triggering
       the root node promotion of the remaining child, and freeing this node.
    4. We modify a new root, and re-allocate the above node to the root node of
       this other root.
    
    The tree mod log looks something like this
    
            logical 0       op KEY_REPLACE (slot 1)                 seq 2
            logical 0       op KEY_REMOVE (slot 1)                  seq 3
            logical 0       op KEY_REMOVE_WHILE_FREEING (slot 0)    seq 4
            logical 4096    op LOG_ROOT_REPLACE (old logical 0)     seq 5
            logical 8192    op KEY_REMOVE_WHILE_FREEING (slot 1)    seq 6
            logical 8192    op KEY_REMOVE_WHILE_FREEING (slot 0)    seq 7
            logical 0       op LOG_ROOT_REPLACE (old logical 8192)  seq 8
    
    >From here the bug is triggered by the following steps
    
    1.  Call btrfs_get_old_root() on the new_root.
    2.  We call tree_mod_log_oldest_root(btrfs_root_node(new_root)), which is
        currently logical 0.
    3.  tree_mod_log_oldest_root() calls tree_mod_log_search_oldest(), which
        gives us the KEY_REPLACE seq 2, and since that's not a
        LOG_ROOT_REPLACE we incorrectly believe that we don't have an old
        root, because we expect that the most recent change should be a
        LOG_ROOT_REPLACE.
    4.  Back in tree_mod_log_oldest_root() we don't have a LOG_ROOT_REPLACE,
        so we don't set old_root, we simply use our existing extent buffer.
    5.  Since we're using our existing extent buffer (logical 0) we call
        tree_mod_log_search(0) in order to get the newest change to start the
        rewind from, which ends up being the LOG_ROOT_REPLACE at seq 8.
    6.  Again since we didn't find an old_root we simply clone logical 0 at
        it's current state.
    7.  We call tree_mod_log_rewind() with the cloned extent buffer.
    8.  Set n = btrfs_header_nritems(logical 0), which would be whatever the
        original nritems was when we COWed the original root, say for this
        example it's 2.
    9.  We start from the newest operation and work our way forward, so we
        see LOG_ROOT_REPLACE which we ignore.
    10. Next we see KEY_REMOVE_WHILE_FREEING for slot 0, which triggers the
        BUG_ON(tm->slot < n), because it expects if we've done this we have a
        completely empty extent buffer to replay completely.
    
    The correct thing would be to find the first LOG_ROOT_REPLACE, and then
    get the old_root set to logical 8192.  In fact making that change fixes
    this particular problem.
    
    However consider the much more complicated case.  We have a child node
    in this tree and the above situation.  In the above case we freed one
    of the child blocks at the seq 3 operation.  If this block was also
    re-allocated and got new tree mod log operations we would have a
    different problem.  btrfs_search_old_slot(orig root) would get down to
    the logical 0 root that still pointed at that node.  However in
    btrfs_search_old_slot() we call tree_mod_log_rewind(buf) directly.  This
    is not context aware enough to know which operations we should be
    replaying.  If the block was re-allocated multiple times we may only
    want to replay a range of operations, and determining what that range is
    isn't possible to determine.
    
    We could maybe solve this by keeping track of which root the node
    belonged to at every tree mod log operation, and then passing this
    around to make sure we're only replaying operations that relate to the
    root we're trying to rewind.
    
    However there's a simpler way to solve this problem, simply disallow
    reallocations if we have currently running tree mod log users.  We
    already do this for leaf's, so we're simply expanding this to nodes as
    well.  This is a relatively uncommon occurrence, and the problem is
    complicated enough I'm worried that we will still have corner cases in
    the reallocation case.  So fix this in the most straightforward way
    possible.
    
    Fixes: bd989ba359f2 ("Btrfs: add tree modification log functions")
    CC: stable@vger.kernel.org # 3.3+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 336fdd295c14d3c4cfe0de2e8c9e007c27a3963e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Oct 28 13:15:35 2022 +0100

    btrfs: fix lost file sync on direct IO write with nowait and dsync iocb
    
    commit 8184620ae21213d51eaf2e0bd4186baacb928172 upstream.
    
    When doing a direct IO write using a iocb with nowait and dsync set, we
    end up not syncing the file once the write completes.
    
    This is because we tell iomap to not call generic_write_sync(), which
    would result in calling btrfs_sync_file(), in order to avoid a deadlock
    since iomap can call it while we are holding the inode's lock and
    btrfs_sync_file() needs to acquire the inode's lock. The deadlock happens
    only if the write happens synchronously, when iomap_dio_rw() calls
    iomap_dio_complete() before it returns. Instead we do the sync ourselves
    at btrfs_do_write_iter().
    
    For a nowait write however we can end up not doing the sync ourselves at
    at btrfs_do_write_iter() because the write could have been queued, and
    therefore we get -EIOCBQUEUED returned from iomap in such case. That makes
    us skip the sync call at btrfs_do_write_iter(), as we don't do it for
    any error returned from btrfs_direct_write(). We can't simply do the call
    even if -EIOCBQUEUED is returned, since that would block the task waiting
    for IO, both for the data since there are bios still in progress as well
    as potentially blocking when joining a log transaction and when syncing
    the log (writing log trees, super blocks, etc).
    
    So let iomap do the sync call itself and in order to avoid deadlocks for
    the case of synchronous writes (without nowait), use __iomap_dio_rw() and
    have ourselves call iomap_dio_complete() after unlocking the inode.
    
    A test case will later be sent for fstests, after this is fixed in Linus'
    tree.
    
    Fixes: 51bd9563b678 ("btrfs: fix deadlock due to page faults during direct IO reads and writes")
    Reported-by: Марк Коренберг <socketpair@gmail.com>
    Link: https://lore.kernel.org/linux-btrfs/CAEmTpZGRKbzc16fWPvxbr6AfFsQoLmz-Lcg-7OgJOZDboJ+SGQ@mail.gmail.com/
    CC: stable@vger.kernel.org # 6.0+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cff805b1518f38d57866065343db2285f2dcd5ab
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Nov 4 16:12:45 2022 -0700

    fscrypt: fix keyring memory leak on mount failure
    
    commit ccd30a476f8e864732de220bd50e6f372f5ebcab upstream.
    
    Commit d7e7b9af104c ("fscrypt: stop using keyrings subsystem for
    fscrypt_master_key") moved the keyring destruction from __put_super() to
    generic_shutdown_super() so that the filesystem's block device(s) are
    still available.  Unfortunately, this causes a memory leak in the case
    where a mount is attempted with the test_dummy_encryption mount option,
    but the mount fails after the option has already been processed.
    
    To fix this, attempt the keyring destruction in both places.
    
    Reported-by: syzbot+104c2a89561289cec13e@syzkaller.appspotmail.com
    Fixes: d7e7b9af104c ("fscrypt: stop using keyrings subsystem for fscrypt_master_key")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Link: https://lore.kernel.org/r/20221011213838.209879-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6f4fd85ef1ee6ab356bfbd64df28c1cb73aee7e
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Nov 4 16:12:44 2022 -0700

    fscrypt: stop using keyrings subsystem for fscrypt_master_key
    
    commit d7e7b9af104c7b389a0c21eb26532511bce4b510 upstream.
    
    The approach of fs/crypto/ internally managing the fscrypt_master_key
    structs as the payloads of "struct key" objects contained in a
    "struct key" keyring has outlived its usefulness.  The original idea was
    to simplify the code by reusing code from the keyrings subsystem.
    However, several issues have arisen that can't easily be resolved:
    
    - When a master key struct is destroyed, blk_crypto_evict_key() must be
      called on any per-mode keys embedded in it.  (This started being the
      case when inline encryption support was added.)  Yet, the keyrings
      subsystem can arbitrarily delay the destruction of keys, even past the
      time the filesystem was unmounted.  Therefore, currently there is no
      easy way to call blk_crypto_evict_key() when a master key is
      destroyed.  Currently, this is worked around by holding an extra
      reference to the filesystem's request_queue(s).  But it was overlooked
      that the request_queue reference is *not* guaranteed to pin the
      corresponding blk_crypto_profile too; for device-mapper devices that
      support inline crypto, it doesn't.  This can cause a use-after-free.
    
    - When the last inode that was using an incompletely-removed master key
      is evicted, the master key removal is completed by removing the key
      struct from the keyring.  Currently this is done via key_invalidate().
      Yet, key_invalidate() takes the key semaphore.  This can deadlock when
      called from the shrinker, since in fscrypt_ioctl_add_key(), memory is
      allocated with GFP_KERNEL under the same semaphore.
    
    - More generally, the fact that the keyrings subsystem can arbitrarily
      delay the destruction of keys (via garbage collection delay, or via
      random processes getting temporary key references) is undesirable, as
      it means we can't strictly guarantee that all secrets are ever wiped.
    
    - Doing the master key lookups via the keyrings subsystem results in the
      key_permission LSM hook being called.  fscrypt doesn't want this, as
      all access control for encrypted files is designed to happen via the
      files themselves, like any other files.  The workaround which SELinux
      users are using is to change their SELinux policy to grant key search
      access to all domains.  This works, but it is an odd extra step that
      shouldn't really have to be done.
    
    The fix for all these issues is to change the implementation to what I
    should have done originally: don't use the keyrings subsystem to keep
    track of the filesystem's fscrypt_master_key structs.  Instead, just
    store them in a regular kernel data structure, and rework the reference
    counting, locking, and lifetime accordingly.  Retain support for
    RCU-mode key lookups by using a hash table.  Replace fscrypt_sb_free()
    with fscrypt_sb_delete(), which releases the keys synchronously and runs
    a bit earlier during unmount, so that block devices are still available.
    
    A side effect of this patch is that neither the master keys themselves
    nor the filesystem keyrings will be listed in /proc/keys anymore.
    ("Master key users" and the master key users keyrings will still be
    listed.)  However, this was mostly an implementation detail, and it was
    intended just for debugging purposes.  I don't know of anyone using it.
    
    This patch does *not* change how "master key users" (->mk_users) works;
    that still uses the keyrings subsystem.  That is still needed for key
    quotas, and changing that isn't necessary to solve the issues listed
    above.  If we decide to change that too, it would be a separate patch.
    
    I've marked this as fixing the original commit that added the fscrypt
    keyring, but as noted above the most important issue that this patch
    fixes wasn't introduced until the addition of inline encryption support.
    
    Fixes: 22d94f493bfb ("fscrypt: add FS_IOC_ADD_ENCRYPTION_KEY ioctl")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20220901193208.138056-2-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3975affcf55f93814a8ae14333d7fc7f183e60a4
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu Sep 29 08:52:04 2022 -0700

    af_unix: Fix memory leaks of the whole sk due to OOB skb.
    
    commit 7a62ed61367b8fd01bae1e18e30602c25060d824 upstream.
    
    syzbot reported a sequence of memory leaks, and one of them indicated we
    failed to free a whole sk:
    
      unreferenced object 0xffff8880126e0000 (size 1088):
        comm "syz-executor419", pid 326, jiffies 4294773607 (age 12.609s)
        hex dump (first 32 bytes):
          00 00 00 00 00 00 00 00 7d 00 00 00 00 00 00 00  ........}.......
          01 00 07 40 00 00 00 00 00 00 00 00 00 00 00 00  ...@............
        backtrace:
          [<000000006fefe750>] sk_prot_alloc+0x64/0x2a0 net/core/sock.c:1970
          [<0000000074006db5>] sk_alloc+0x3b/0x800 net/core/sock.c:2029
          [<00000000728cd434>] unix_create1+0xaf/0x920 net/unix/af_unix.c:928
          [<00000000a279a139>] unix_create+0x113/0x1d0 net/unix/af_unix.c:997
          [<0000000068259812>] __sock_create+0x2ab/0x550 net/socket.c:1516
          [<00000000da1521e1>] sock_create net/socket.c:1566 [inline]
          [<00000000da1521e1>] __sys_socketpair+0x1a8/0x550 net/socket.c:1698
          [<000000007ab259e1>] __do_sys_socketpair net/socket.c:1751 [inline]
          [<000000007ab259e1>] __se_sys_socketpair net/socket.c:1748 [inline]
          [<000000007ab259e1>] __x64_sys_socketpair+0x97/0x100 net/socket.c:1748
          [<000000007dedddc1>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]
          [<000000007dedddc1>] do_syscall_64+0x38/0x90 arch/x86/entry/common.c:80
          [<000000009456679f>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    We can reproduce this issue by creating two AF_UNIX SOCK_STREAM sockets,
    send()ing an OOB skb to each other, and close()ing them without consuming
    the OOB skbs.
    
      int skpair[2];
    
      socketpair(AF_UNIX, SOCK_STREAM, 0, skpair);
    
      send(skpair[0], "x", 1, MSG_OOB);
      send(skpair[1], "x", 1, MSG_OOB);
    
      close(skpair[0]);
      close(skpair[1]);
    
    Currently, we free an OOB skb in unix_sock_destructor() which is called via
    __sk_free(), but it's too late because the receiver's unix_sk(sk)->oob_skb
    is accounted against the sender's sk->sk_wmem_alloc and __sk_free() is
    called only when sk->sk_wmem_alloc is 0.
    
    In the repro sequences, we do not consume the OOB skb, so both two sk's
    sock_put() never reach __sk_free() due to the positive sk->sk_wmem_alloc.
    Then, no one can consume the OOB skb nor call __sk_free(), and we finally
    leak the two whole sk.
    
    Thus, we must free the unconsumed OOB skb earlier when close()ing the
    socket.
    
    Fixes: 314001f0bf92 ("af_unix: Add OOB support")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Anil Altinay <aaltinay@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4302806dbfea3efe9909c00a8bfabdf9c07fc77f
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Fri May 13 10:35:06 2022 +0800

    block, bfq: protect 'bfqd->queued' by 'bfqd->lock'
    
    commit 181490d5321806e537dc5386db5ea640b826bf78 upstream.
    
    If bfq_schedule_dispatch() is called from bfq_idle_slice_timer_body(),
    then 'bfqd->queued' is read without holding 'bfqd->lock'. This is
    wrong since it can be wrote concurrently.
    
    Fix the problem by holding 'bfqd->lock' in such case.
    
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Link: https://lore.kernel.org/r/20220513023507.2625717-2-yukuai3@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Khazhy Kumykov <khazhy@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e4697ffdfbb38a2755012c4e571546c89ab6422
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Oct 31 16:10:52 2022 -0700

    Bluetooth: L2CAP: Fix attempting to access uninitialized memory
    
    commit b1a2cd50c0357f243b7435a732b4e62ba3157a2e upstream.
    
    On l2cap_parse_conf_req the variable efs is only initialized if
    remote_efs has been set.
    
    CVE: CVE-2022-42895
    CC: stable@vger.kernel.org
    Reported-by: Tamás Koczka <poprdi@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Reviewed-by: Tedd Ho-Jeong An <tedd.an@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81035e1201e26d57d9733ac59140a3e29befbc5a
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Oct 31 16:10:32 2022 -0700

    Bluetooth: L2CAP: Fix accepting connection request for invalid SPSM
    
    commit 711f8c3fb3db61897080468586b970c87c61d9e4 upstream.
    
    The Bluetooth spec states that the valid range for SPSM is from
    0x0001-0x00ff so it is invalid to accept values outside of this range:
    
      BLUETOOTH CORE SPECIFICATION Version 5.3 | Vol 3, Part A
      page 1059:
      Table 4.15: L2CAP_LE_CREDIT_BASED_CONNECTION_REQ SPSM ranges
    
    CVE: CVE-2022-42896
    CC: stable@vger.kernel.org
    Reported-by: Tamás Koczka <poprdi@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Reviewed-by: Tedd Ho-Jeong An <tedd.an@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d78ccdce662e88f41e87e90cf2bee63c1715d2a5
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Thu Oct 27 20:13:53 2022 +0800

    i2c: piix4: Fix adapter not be removed in piix4_remove()
    
    [ Upstream commit 569bea74c94d37785682b11bab76f557520477cd ]
    
    In piix4_probe(), the piix4 adapter will be registered in:
    
       piix4_probe()
         piix4_add_adapters_sb800() / piix4_add_adapter()
           i2c_add_adapter()
    
    Based on the probed device type, piix4_add_adapters_sb800() or single
    piix4_add_adapter() will be called.
    For the former case, piix4_adapter_count is set as the number of adapters,
    while for antoher case it is not set and kept default *zero*.
    
    When piix4 is removed, piix4_remove() removes the adapters added in
    piix4_probe(), basing on the piix4_adapter_count value.
    Because the count is zero for the single adapter case, the adapter won't
    be removed and makes the sources allocated for adapter leaked, such as
    the i2c client and device.
    
    These sources can still be accessed by i2c or bus and cause problems.
    An easily reproduced case is that if a new adapter is registered, i2c
    will get the leaked adapter and try to call smbus_algorithm, which was
    already freed:
    
    Triggered by: rmmod i2c_piix4 && modprobe max31730
    
     BUG: unable to handle page fault for address: ffffffffc053d860
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     Oops: 0000 [#1] PREEMPT SMP KASAN
     CPU: 0 PID: 3752 Comm: modprobe Tainted: G
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
     RIP: 0010:i2c_default_probe (drivers/i2c/i2c-core-base.c:2259) i2c_core
     RSP: 0018:ffff888107477710 EFLAGS: 00000246
     ...
     <TASK>
      i2c_detect (drivers/i2c/i2c-core-base.c:2302) i2c_core
      __process_new_driver (drivers/i2c/i2c-core-base.c:1336) i2c_core
      bus_for_each_dev (drivers/base/bus.c:301)
      i2c_for_each_dev (drivers/i2c/i2c-core-base.c:1823) i2c_core
      i2c_register_driver (drivers/i2c/i2c-core-base.c:1861) i2c_core
      do_one_initcall (init/main.c:1296)
      do_init_module (kernel/module/main.c:2455)
      ...
     </TASK>
     ---[ end trace 0000000000000000 ]---
    
    Fix this problem by correctly set piix4_adapter_count as 1 for the
    single adapter so it can be normally removed.
    
    Fixes: 528d53a1592b ("i2c: piix4: Fix probing of reserved ports on AMD Family 16h Model 30h")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c76ff8ae113f89aa07b5752bc131520615ab25fd
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:33 2022 +0100

    arm64: dts: juno: Add thermal critical trip points
    
    [ Upstream commit c4a7b9b587ca1bb4678d48d8be7132492b23a81c ]
    
    When thermnal zones are defined, trip points definitions are mandatory.
    Define a couple of critical trip points for monitoring of existing
    PMIC and SOC thermal zones.
    
    This was lost between txt to yaml conversion and was re-enforced recently
    via the commit 8c596324232d ("dt-bindings: thermal: Fix missing required property")
    
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski+dt@linaro.org>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Fixes: f7b636a8d83c ("arm64: dts: juno: add thermal zones for scpi sensors")
    Link: https://lore.kernel.org/r/20221028140833.280091-8-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7398435e616ded7a65d901db61de8470e8c3b050
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:30 2022 +0100

    firmware: arm_scmi: Fix devres allocation device in virtio transport
    
    [ Upstream commit 5ffc1c4cb896f8d2cf10309422da3633a616d60f ]
    
    SCMI virtio transport device managed allocations must use the main
    platform device in devres operations instead of the channel devices.
    
    Cc: Peter Hilber <peter.hilber@opensynergy.com>
    Fixes: 46abe13b5e3d ("firmware: arm_scmi: Add virtio transport")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-5-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3653cdc21b9e8a1f559e6c7f5a60bf5b8bc190e2
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:29 2022 +0100

    firmware: arm_scmi: Make Rx chan_setup fail on memory errors
    
    [ Upstream commit be9ba1f7f9e0b565b19f4294f5871da9d654bc6d ]
    
    SCMI Rx channels are optional and they can fail to be setup when not
    present but anyway channels setup routines must bail-out on memory errors.
    
    Make channels setup, and related probing, fail when memory errors are
    reported on Rx channels.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-4-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e514d67b23646f26da1dbe7875143446bff84d27
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:27 2022 +0100

    firmware: arm_scmi: Suppress the driver's bind attributes
    
    [ Upstream commit fd96fbc8fad35d6b1872c90df8a2f5d721f14d91 ]
    
    Suppress the capability to unbind the core SCMI driver since all the
    SCMI stack protocol drivers depend on it.
    
    Fixes: aa4f886f3893 ("firmware: arm_scmi: add basic driver infrastructure for SCMI")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-2-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e68c5da60cd79950bd56287ae80b39d6261f995
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Sat Oct 29 15:13:55 2022 +0800

    block: Fix possible memory leak for rq_wb on add_disk failure
    
    [ Upstream commit fa81cbafbf5764ad5053512152345fab37a1fe18 ]
    
    kmemleak reported memory leaks in device_add_disk():
    
    kmemleak: 3 new suspected memory leaks
    
    unreferenced object 0xffff88800f420800 (size 512):
      comm "modprobe", pid 4275, jiffies 4295639067 (age 223.512s)
      hex dump (first 32 bytes):
        04 00 00 00 08 00 00 00 01 00 00 00 00 00 00 00  ................
        00 e1 f5 05 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000d3662699>] kmalloc_trace+0x26/0x60
        [<00000000edc7aadc>] wbt_init+0x50/0x6f0
        [<0000000069601d16>] wbt_enable_default+0x157/0x1c0
        [<0000000028fc393f>] blk_register_queue+0x2a4/0x420
        [<000000007345a042>] device_add_disk+0x6fd/0xe40
        [<0000000060e6aab0>] nbd_dev_add+0x828/0xbf0 [nbd]
        ...
    
    It is because the memory allocated in wbt_enable_default() is not
    released in device_add_disk() error path.
    Normally, these memory are freed in:
    
    del_gendisk()
      rq_qos_exit()
        rqos->ops->exit(rqos);
          wbt_exit()
    
    So rq_qos_exit() is called to free the rq_wb memory for wbt_init().
    However in the error path of device_add_disk(), only
    blk_unregister_queue() is called and make rq_wb memory leaked.
    
    Add rq_qos_exit() to the error path to fix it.
    
    Fixes: 83cbce957446 ("block: add error handling for device_add_disk / add_disk")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20221029071355.35462-1-chenzhongjin@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf822b6980a6a47237eafa208cc22a7f6cdd9b4a
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Tue Oct 25 17:41:17 2022 +0300

    arm64: dts: ls208xa: specify clock frequencies for the MDIO controllers
    
    [ Upstream commit d5c921a53c80dfa942f6dff36253db5a50775a5f ]
    
    Up until now, the external MDIO controller frequency values relied
    either on the default ones out of reset or on those setup by u-boot.
    Let's just properly specify the MDC frequency in the DTS so that even
    without u-boot's intervention Linux can drive the MDIO bus.
    
    Fixes: 0420dde30a90 ("arm64: dts: ls208xa: add the external MDIO nodes")
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2329886e567a877cf971d65bbae3c509c546a45
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Tue Oct 25 17:41:16 2022 +0300

    arm64: dts: ls1088a: specify clock frequencies for the MDIO controllers
    
    [ Upstream commit d78a57426e64fc4c61e6189e450a0432d24536ca ]
    
    Up until now, the external MDIO controller frequency values relied
    either on the default ones out of reset or on those setup by u-boot.
    Let's just properly specify the MDC frequency in the DTS so that even
    without u-boot's intervention Linux can drive the MDIO bus.
    
    Fixes: bbe75af7b092 ("arm64: dts: ls1088a: add external MDIO device nodes")
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33fcc55dbc5b15de13881dce5388eb3440280b27
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Tue Oct 25 17:41:15 2022 +0300

    arm64: dts: lx2160a: specify clock frequencies for the MDIO controllers
    
    [ Upstream commit c126a0abc5dadd7df236f20aae6d8c3d103f095c ]
    
    Up until now, the external MDIO controller frequency values relied
    either on the default ones out of reset or on those setup by u-boot.
    Let's just properly specify the MDC frequency in the DTS so that even
    without u-boot's intervention Linux can drive the MDIO bus.
    
    Fixes: 6e1b8fae892d ("arm64: dts: lx2160a: add emdio1 node")
    Fixes: 5705b9dcda57 ("arm64: dts: lx2160a: add emdio2 node")
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3429a1e4924af840d448aa5521234c065d3631b
Author: Peng Fan <peng.fan@nxp.com>
Date:   Mon Oct 10 18:07:47 2022 +0800

    arm64: dts: imx8: correct clock order
    
    [ Upstream commit 06acb824d7d00a30e9400f67eee481b218371b5a ]
    
    Per bindings/mmc/fsl-imx-esdhc.yaml, the clock order is ipg, ahb, per,
    otherwise warning: "
    mmc@5b020000: clock-names:1: 'ahb' was expected
    mmc@5b020000: clock-names:2: 'per' was expected "
    
    Fixes: 16c4ea7501b1 ("arm64: dts: imx8: switch to new lpcg clock binding")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de2a83186ad39b9e2655703cdb0aaeda3718df77
Author: Tim Harvey <tharvey@gateworks.com>
Date:   Thu Sep 29 12:52:22 2022 -0700

    ARM: dts: imx6qdl-gw59{10,13}: fix user pushbutton GPIO offset
    
    [ Upstream commit bb5ad73941dc3f4e3c2241348f385da6501d50ea ]
    
    The GW5910 and GW5913 have a user pushbutton that is tied to the
    Gateworks System Controller GPIO offset 2. Fix the invalid offset of 0.
    
    Fixes: 64bf0a0af18d ("ARM: dts: imx6qdl-gw: add Gateworks System Controller support")
    Signed-off-by: Tim Harvey <tharvey@gateworks.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb9ce8910a6f0171d4a49d319a88a01be2a4d5d2
Author: Taniya Das <quic_tdas@quicinc.com>
Date:   Wed Oct 19 11:35:35 2022 +0530

    clk: qcom: Update the force mem core bit for GPU clocks
    
    [ Upstream commit ffa20aa581cf5377fc397b0d0ff9d67ea823629b ]
    
    There are few GPU clocks which are powering up the memories
    and thus enable the FORCE_MEM_PERIPH always for these clocks
    to force the periph_on signal to remain active during halt
    state of the clock.
    
    Fixes: a3cc092196ef ("clk: qcom: Add Global Clock controller (GCC) driver for SC7280")
    Fixes: 3e0f01d6c7e7 ("clk: qcom: Add graphics clock controller driver for SC7280")
    Signed-off-by: Taniya Das <quic_tdas@quicinc.com>
    Signed-off-by: Satya Priya <quic_c_skakit@quicinc.com>
    Link: https://lore.kernel.org/r/1666159535-6447-1-git-send-email-quic_c_skakit@quicinc.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdc118249698ff0aba0fa266a422e02279293007
Author: Jerry Snitselaar <jsnitsel@redhat.com>
Date:   Sat Oct 22 08:23:52 2022 -0700

    efi/tpm: Pass correct address to memblock_reserve
    
    [ Upstream commit f4cd18c5b2000df0c382f6530eeca9141ea41faf ]
    
    memblock_reserve() expects a physical address, but the address being
    passed for the TPM final events log is what was returned from
    early_memremap(). This results in something like the following:
    
    [    0.000000] memblock_reserve: [0xffffffffff2c0000-0xffffffffff2c00e4] efi_tpm_eventlog_init+0x324/0x370
    
    Pass the address from efi like what is done for the TPM events log.
    
    Fixes: c46f3405692d ("tpm: Reserve the TPM final events table")
    Cc: Matthew Garrett <mjg59@google.com>
    Cc: Jarkko Sakkinen <jarkko@kernel.org>
    Cc: Bartosz Szczepanek <bsz@semihalf.com>
    Cc: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a4d6f165eacfa127bf9a2cfaef6df0d1c1d5c82
Author: Martin Tůma <martin.tuma@digiteqautomotive.com>
Date:   Tue Oct 18 16:03:37 2022 +0200

    i2c: xiic: Add platform module alias
    
    [ Upstream commit b8caf0a0e04583fb71e21495bef84509182227ea ]
    
    The missing "platform" alias is required for the mgb4 v4l2 driver to load
    the i2c controller driver when probing the HW.
    
    Signed-off-by: Martin Tůma <martin.tuma@digiteqautomotive.com>
    Acked-by: Michal Simek <michal.simek@amd.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62eea4014a9b5b96f4fd97140232d98a5bc6dd4f
Author: Danijel Slivka <danijel.slivka@amd.com>
Date:   Tue Oct 4 15:39:44 2022 +0200

    drm/amdgpu: set vm_update_mode=0 as default for Sienna Cichlid in SRIOV case
    
    [ Upstream commit 65f8682b9aaae20c2cdee993e6fe52374ad513c9 ]
    
    For asic with VF MMIO access protection avoid using CPU for VM table updates.
    CPU pagetable updates have issues with HDP flush as VF MMIO access protection
    blocks write to mmBIF_BX_DEV0_EPF0_VF0_HDP_MEM_COHERENCY_FLUSH_CNTL register
    during sriov runtime.
    
    v3: introduce virtualization capability flag AMDGPU_VF_MMIO_ACCESS_PROTECT
    which indicates that VF MMIO write access is not allowed in sriov runtime
    
    Signed-off-by: Danijel Slivka <danijel.slivka@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a2547cac2e076215832de263350ab8ad480c043
Author: Samuel Bailey <samuel.bailey1@gmail.com>
Date:   Wed Oct 5 19:51:23 2022 +0100

    HID: saitek: add madcatz variant of MMO7 mouse device ID
    
    [ Upstream commit 79425b297f56bd481c6e97700a9a4e44c7bcfa35 ]
    
    The MadCatz variant of the MMO7 mouse has the ID 0738:1713 and the same
    quirks as the Saitek variant.
    
    Signed-off-by: Samuel Bailey <samuel.bailey1@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 931c97a54cd1e7ec05f7a5a876b5f2b2879f340a
Author: Uday Shankar <ushankar@purestorage.com>
Date:   Fri Sep 23 18:02:42 2022 -0600

    scsi: core: Restrict legal sdev_state transitions via sysfs
    
    [ Upstream commit 2331ce6126be8864b39490e705286b66e2344aac ]
    
    Userspace can currently write to sysfs to transition sdev_state to RUNNING
    or OFFLINE from any source state. This causes issues because proper
    transitioning out of some states involves steps besides just changing
    sdev_state, so allowing userspace to change sdev_state regardless of the
    source state can result in inconsistencies; e.g. with ISCSI we can end up
    with sdev_state == SDEV_RUNNING while the device queue is quiesced. Any
    task attempting I/O on the device will then hang, and in more recent
    kernels, iscsid will hang as well.
    
    More detail about this bug is provided in my first attempt:
    
    https://groups.google.com/g/open-iscsi/c/PNKca4HgPDs/m/CXaDkntOAQAJ
    
    Link: https://lore.kernel.org/r/20220924000241.2967323-1-ushankar@purestorage.com
    Signed-off-by: Uday Shankar <ushankar@purestorage.com>
    Suggested-by: Mike Christie <michael.christie@oracle.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c50ec15725e005e9fb20bce69b6c23b135a4a9b7
Author: Ashish Kalra <ashish.kalra@amd.com>
Date:   Wed Oct 5 16:32:53 2022 +0000

    ACPI: APEI: Fix integer overflow in ghes_estatus_pool_init()
    
    [ Upstream commit 43d2748394c3feb86c0c771466f5847e274fc043 ]
    
    Change num_ghes from int to unsigned int, preventing an overflow
    and causing subsequent vmalloc() to fail.
    
    The overflow happens in ghes_estatus_pool_init() when calculating
    len during execution of the statement below as both multiplication
    operands here are signed int:
    
    len += (num_ghes * GHES_ESOURCE_PREALLOC_MAX_SIZE);
    
    The following call trace is observed because of this bug:
    
    [    9.317108] swapper/0: vmalloc error: size 18446744071562596352, exceeds total pages, mode:0xcc0(GFP_KERNEL), nodemask=(null),cpuset=/,mems_allowed=0-1
    [    9.317131] Call Trace:
    [    9.317134]  <TASK>
    [    9.317137]  dump_stack_lvl+0x49/0x5f
    [    9.317145]  dump_stack+0x10/0x12
    [    9.317146]  warn_alloc.cold+0x7b/0xdf
    [    9.317150]  ? __device_attach+0x16a/0x1b0
    [    9.317155]  __vmalloc_node_range+0x702/0x740
    [    9.317160]  ? device_add+0x17f/0x920
    [    9.317164]  ? dev_set_name+0x53/0x70
    [    9.317166]  ? platform_device_add+0xf9/0x240
    [    9.317168]  __vmalloc_node+0x49/0x50
    [    9.317170]  ? ghes_estatus_pool_init+0x43/0xa0
    [    9.317176]  vmalloc+0x21/0x30
    [    9.317177]  ghes_estatus_pool_init+0x43/0xa0
    [    9.317179]  acpi_hest_init+0x129/0x19c
    [    9.317185]  acpi_init+0x434/0x4a4
    [    9.317188]  ? acpi_sleep_proc_init+0x2a/0x2a
    [    9.317190]  do_one_initcall+0x48/0x200
    [    9.317195]  kernel_init_freeable+0x221/0x284
    [    9.317200]  ? rest_init+0xe0/0xe0
    [    9.317204]  kernel_init+0x1a/0x130
    [    9.317205]  ret_from_fork+0x22/0x30
    [    9.317208]  </TASK>
    
    Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
    [ rjw: Subject and changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ecd1db58b7acbf87651f9d78478e2feb7cbf907
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Fri Aug 26 13:53:58 2022 +0200

    media: v4l: subdev: Fail graciously when getting try data for NULL state
    
    [ Upstream commit 2ba3e38517f5a4ebf9c997168079dca01b7f9fc6 ]
    
    The state argument for the functions for obtaining various parts of the
    state is NULL if it is called by drivers for active state. Fail graciously
    in that case instead of dereferencing a NULL pointer.
    
    Suggested-by: Bingbu Cao <bingbu.cao@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Tomi Valkeinen <tomi.valkeinen@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f96ad391d054bd5c36994f98afd6a12cbb5600bf
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Tue Sep 6 09:46:30 2022 +0200

    media: meson: vdec: fix possible refcount leak in vdec_probe()
    
    [ Upstream commit 7718999356234d9cc6a11b4641bb773928f1390f ]
    
    v4l2_device_unregister need to be called to put the refcount got by
    v4l2_device_register when vdec_probe fails or vdec_remove is called.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b785cdcd3cb3343815ef96feea5de0458a87886
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Aug 30 07:59:24 2022 +0200

    media: dvb-frontends/drxk: initialize err to 0
    
    [ Upstream commit 20694e96ca089ce6693c2348f8f628ee621e4e74 ]
    
    Fix a compiler warning:
    
    drivers/media/dvb-frontends/drxk_hard.c: In function 'drxk_read_ucblocks':
    drivers/media/dvb-frontends/drxk_hard.c:6673:21: warning: 'err' may be used uninitialized [-Wmaybe-uninitialized]
     6673 |         *ucblocks = (u32) err;
          |                     ^~~~~~~~~
    drivers/media/dvb-frontends/drxk_hard.c:6663:13: note: 'err' was declared here
     6663 |         u16 err;
          |             ^~~
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73dfb64213381d0a63041af440f6d4aaacdbb4da
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Wed Aug 24 09:06:19 2022 +0200

    media: cros-ec-cec: limit msg.len to CEC_MAX_MSG_SIZE
    
    [ Upstream commit 2dc73b48665411a08c4e5f0f823dea8510761603 ]
    
    I expect that the hardware will have limited this to 16, but just in
    case it hasn't, check for this corner case.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbfa26936f318b16ccf9ca31b8e8b30c0dc087bd
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Wed Aug 24 09:02:42 2022 +0200

    media: s5p_cec: limit msg.len to CEC_MAX_MSG_SIZE
    
    [ Upstream commit 93f65ce036863893c164ca410938e0968964b26c ]
    
    I expect that the hardware will have limited this to 16, but just in
    case it hasn't, check for this corner case.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 647c12c47ee0f9f9d17d869b48839b1748153a49
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Tue Aug 23 17:11:36 2022 +0200

    media: rkisp1: Zero v4l2_subdev_format fields in when validating links
    
    [ Upstream commit c53e3a049f35978a150526671587fd46b1ae7ca1 ]
    
    The local sd_fmt variable in rkisp1_capture_link_validate() has
    uninitialized fields, which causes random failures when calling the
    subdev .get_fmt() operation. Fix it by initializing the variable when
    declaring it, which zeros all other fields.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Paul Elder <paul.elder@ideasonboard.com>
    Reviewed-by: Dafna Hirschfeld <dafna@fastmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abbeb8f7271b62292d580604be07e668c3ae289d
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Wed Aug 17 01:53:57 2022 +0200

    media: rkisp1: Use correct macro for gradient registers
    
    [ Upstream commit 4c3501f13e8e60f6e7e7308c77ac4404e1007c18 ]
    
    The rkisp1_lsc_config() function incorrectly uses the
    RKISP1_CIF_ISP_LSC_SECT_SIZE() macro for the gradient registers. Replace
    it with the correct macro, and rename it from
    RKISP1_CIF_ISP_LSC_GRAD_SIZE() to RKISP1_CIF_ISP_LSC_SECT_GRAD() as the
    corresponding registers store the gradients for each sector, not a size.
    This doesn't cause any functional change as the two macros are defined
    identically (the size and gradient registers store fields in the same
    number of bits at the same positions).
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Dafna Hirschfeld <dafna@fastmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03b30e5a369d89d9ffcfa2baace8a3cbe820a679
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sat Aug 13 00:44:14 2022 +0200

    media: rkisp1: Initialize color space on resizer sink and source pads
    
    [ Upstream commit 83b9296e399367862845d3b19984444fc756bd61 ]
    
    Initialize the four color space fields on the sink and source video pads
    of the resizer in the .init_cfg() operation. The resizer can't perform
    any color space conversion, so set the sink and source color spaces to
    the same defaults, which match the ISP source video pad default.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Paul Elder <paul.elder@ideasonboard.com>
    Reviewed-by: Dafna Hirschfeld <dafna@fastmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d58b6b665c8823ae23da922bcd6d125501c7daaa
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sat Aug 13 00:44:14 2022 +0200

    media: rkisp1: Don't pass the quantization to rkisp1_csm_config()
    
    [ Upstream commit 711d91497e203b058cf0a08c0f7d41c04efbde76 ]
    
    The rkisp1_csm_config() function takes a pointer to the rkisp1_params
    structure which contains the quantization value. There's no need to pass
    it separately to the function. Drop it from the function parameters.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Dafna Hirschfeld <dafna@fastmail.com>
    Reviewed-by: Paul Elder <paul.elder@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e501fd0f38e42304bfa0d46a812d93f80294a87
Author: Peter Oberparleiter <oberpar@linux.ibm.com>
Date:   Fri Oct 14 12:24:58 2022 +0200

    s390/cio: fix out-of-bounds access on cio_ignore free
    
    [ Upstream commit 1b6074112742f65ece71b0f299ca5a6a887d2db6 ]
    
    The channel-subsystem-driver scans for newly available devices whenever
    device-IDs are removed from the cio_ignore list using a command such as:
    
      echo free >/proc/cio_ignore
    
    Since an I/O device scan might interfer with running I/Os, commit
    172da89ed0ea ("s390/cio: avoid excessive path-verification requests")
    introduced an optimization to exclude online devices from the scan.
    
    The newly added check for online devices incorrectly assumes that
    an I/O-subchannel's drvdata points to a struct io_subchannel_private.
    For devices that are bound to a non-default I/O subchannel driver, such
    as the vfio_ccw driver, this results in an out-of-bounds read access
    during each scan.
    
    Fix this by changing the scan logic to rely on a driver-independent
    online indication. For this we can use struct subchannel->config.ena,
    which is the driver's requested subchannel-enabled state. Since I/Os
    can only be started on enabled subchannels, this matches the intent
    of the original optimization of not scanning devices where I/O might
    be running.
    
    Fixes: 172da89ed0ea ("s390/cio: avoid excessive path-verification requests")
    Fixes: 0c3812c347bf ("s390/cio: derive cdev information only for IO-subchannels")
    Cc: <stable@vger.kernel.org> # v5.15
    Reported-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Reviewed-by: Vineeth Vijayan <vneethv@linux.ibm.com>
    Signed-off-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c65cc569370c3558de15e8bdd13287623fc02fd2
Author: Vineeth Vijayan <vneethv@linux.ibm.com>
Date:   Fri Sep 17 15:04:01 2021 +0200

    s390/cio: derive cdev information only for IO-subchannels
    
    [ Upstream commit 0c3812c347bfb0dc213556a195e79850c55702f5 ]
    
    cdev->online for the purge function must not be checked for the
    non-IO subchannel type. Make sure that we are deriving the cdev only
    from sch-type SUBCHANNEL_TYPE_IO.
    
    Signed-off-by: Vineeth Vijayan <vneethv@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Stable-dep-of: 1b6074112742 ("s390/cio: fix out-of-bounds access on cio_ignore free")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c64be93f1e5183faaed6e312647ea8cecb50ed2b
Author: Peter Oberparleiter <oberpar@linux.ibm.com>
Date:   Fri Sep 16 15:01:36 2022 +0200

    s390/boot: add secure boot trailer
    
    [ Upstream commit aa127a069ef312aca02b730d5137e1778d0c3ba7 ]
    
    This patch enhances the kernel image adding a trailer as required for
    secure boot by future firmware versions.
    
    Cc: <stable@vger.kernel.org> # 5.2+
    Signed-off-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Reviewed-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cdaca8f00a77fa2f83a0ebe61896654d1591e40
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Tue Oct 18 13:39:43 2022 +0200

    s390/uaccess: add missing EX_TABLE entries to __clear_user()
    
    [ Upstream commit 4e1b5a86a5edfbefc9396d41b0fc1a2ebd0101b6 ]
    
    For some exception types the instruction address points behind the
    instruction that caused the exception. Take that into account and add
    the missing exception table entries.
    
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 509cbbdec9d767cfe6c7884f17cbb96dff9af557
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Oct 18 11:11:29 2022 +0200

    mtd: parsers: bcm47xxpart: Fix halfblock reads
    
    [ Upstream commit 05e258c6ec669d6d18c494ea03d35962d6f5b545 ]
    
    There is some code in the parser that tries to read 0x8000
    bytes into a block to "read in the middle" of the block. Well
    that only works if the block is also 0x10000 bytes all the time,
    else we get these parse errors as we reach the end of the flash:
    
    spi-nor spi0.0: mx25l1606e (2048 Kbytes)
    mtd_read error while parsing (offset: 0x200000): -22
    mtd_read error while parsing (offset: 0x201000): -22
    (...)
    
    Fix the code to do what I think was intended.
    
    Cc: stable@vger.kernel.org
    Fixes: f0501e81fbaa ("mtd: bcm47xxpart: alternative MAGIC for board_data partition")
    Cc: Rafał Miłecki <zajec5@gmail.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221018091129.280026-1-linus.walleij@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b8797e9dbf73c75d4d2db1b822db4fedd3202fd
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Thu Mar 17 12:43:16 2022 +0100

    mtd: parsers: bcm47xxpart: print correct offset on read error
    
    [ Upstream commit 4c38eded807043f40f4dc49da6df097f9dcac393 ]
    
    mtd_read() gets called with offset + 0x8000 as argument so use the same
    value in pr_err().
    
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20220317114316.29827-1-zajec5@gmail.com
    Stable-dep-of: 05e258c6ec66 ("mtd: parsers: bcm47xxpart: Fix halfblock reads")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f07635876bdbf8591c508b3793efebea2e73ee5
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 14 20:01:17 2022 +0200

    fbdev: stifb: Fall back to cfb_fillrect() on 32-bit HCRX cards
    
    [ Upstream commit 776d875fd4cbb3884860ea7f63c3958f02b0c80e ]
    
    When the text console is scrolling text upwards it calls the fillrect()
    function to empty the new line. The current implementation doesn't seem
    to work correctly on HCRX cards in 32-bit mode and leave garbage in that
    line instead. Fix it by falling back to standard cfb_fillrect() in that
    case.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 154934c74f976b8d35820e8f53a0c2800d651dd0
Author: Helge Deller <deller@gmx.de>
Date:   Thu Jan 13 16:35:53 2022 +0100

    video/fbdev/stifb: Implement the stifb_fillrect() function
    
    [ Upstream commit 9c379c65241707e44072139d782bc2dfec9b4ab3 ]
    
    The stifb driver (for Artist/HCRX graphics on PA-RISC) was missing
    the fillrect function.
    Tested on a 715/64 PA-RISC machine and in qemu.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Stable-dep-of: 776d875fd4cb ("fbdev: stifb: Fall back to cfb_fillrect() on 32-bit HCRX cards")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b524b41806e988bd754d92ebe852e5621aeed41c
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Sep 13 10:53:18 2022 +0200

    drm/msm/hdmi: fix IRQ lifetime
    
    [ Upstream commit 152d394842bb564148e68b92486a87db0bf54859 ]
    
    Device-managed resources allocated post component bind must be tied to
    the lifetime of the aggregate DRM device or they will not necessarily be
    released when binding of the aggregate device is deferred.
    
    This is specifically true for the HDMI IRQ, which will otherwise remain
    requested so that the next bind attempt fails when requesting the IRQ a
    second time.
    
    Fix this by tying the device-managed lifetime of the HDMI IRQ to the DRM
    device so that it is released when bind fails.
    
    Fixes: 067fef372c73 ("drm/msm/hdmi: refactor bind/init")
    Cc: stable@vger.kernel.org      # 3.19
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Kuogee Hsieh <quic_khsieh@quicinc.com>
    Reviewed-by: Kuogee Hsieh <quic_khsieh@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/502666/
    Link: https://lore.kernel.org/r/20220913085320.8577-9-johan+linaro@kernel.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c55dd62001310f912b9d8f9fd509c2e1766e1cf6
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Tue Feb 1 17:47:33 2022 +0000

    drm/msm/hdmi: Remove spurious IRQF_ONESHOT flag
    
    [ Upstream commit 088604d37e23e9ec01a501d0e3630bc4f02027a0 ]
    
    Quoting the header comments, IRQF_ONESHOT is "Used by threaded interrupts
    which need to keep the irq line disabled until the threaded handler has
    been run.". When applied to an interrupt that doesn't request a threaded
    irq then IRQF_ONESHOT has a lesser known (undocumented?) side effect,
    which it to disable the forced threading of irqs. For "normal" kernels
    if there is no thread_fn then IRQF_ONESHOT is a nop.
    
    In this case disabling forced threading is not appropriate because the
    driver calls wake_up_all() (via msm_hdmi_i2c_irq) and also directly uses
    the regular spinlock API for locking (in msm_hdmi_hdcp_irq() ). Neither
    of these APIs can be called from no-thread interrupt handlers on
    PREEMPT_RT systems.
    
    Fix this by removing IRQF_ONESHOT.
    
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20220201174734.196718-3-daniel.thompson@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Stable-dep-of: 152d394842bb ("drm/msm/hdmi: fix IRQ lifetime")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d153d468c43d67ebd86e4a7227c5de434749ecd3
Author: Dexuan Cui <decui@microsoft.com>
Date:   Mon Oct 31 19:17:06 2022 -0700

    vsock: fix possible infinite sleep in vsock_connectible_wait_data()
    
    [ Upstream commit 466a85336fee6e3b35eb97b8405a28302fd25809 ]
    
    Currently vsock_connectible_has_data() may miss a wakeup operation
    between vsock_connectible_has_data() == 0 and the prepare_to_wait().
    
    Fix the race by adding the process to the wait queue before checking
    vsock_connectible_has_data().
    
    Fixes: b3f7fd54881b ("af_vsock: separate wait data loop")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Reported-by: Frédéric Dalleau <frederic.dalleau@docker.com>
    Tested-by: Frédéric Dalleau <frederic.dalleau@docker.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ed71af4d017d2bd2cbb8f7254f613a4914def26
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Wed Nov 2 10:06:10 2022 +0800

    ipv6: fix WARNING in ip6_route_net_exit_late()
    
    [ Upstream commit 768b3c745fe5789f2430bdab02f35a9ad1148d97 ]
    
    During the initialization of ip6_route_net_init_late(), if file
    ipv6_route or rt6_stats fails to be created, the initialization is
    successful by default. Therefore, the ipv6_route or rt6_stats file
    doesn't be found during the remove in ip6_route_net_exit_late(). It
    will cause WRNING.
    
    The following is the stack information:
    name 'rt6_stats'
    WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:712 remove_proc_entry+0x389/0x460
    Modules linked in:
    Workqueue: netns cleanup_net
    RIP: 0010:remove_proc_entry+0x389/0x460
    PKRU: 55555554
    Call Trace:
    <TASK>
    ops_exit_list+0xb0/0x170
    cleanup_net+0x4ea/0xb00
    process_one_work+0x9bf/0x1710
    worker_thread+0x665/0x1080
    kthread+0x2e4/0x3a0
    ret_from_fork+0x1f/0x30
    </TASK>
    
    Fixes: cdb1876192db ("[NETNS][IPV6] route6 - create route6 proc files for the namespace")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20221102020610.351330-1-shaozhengchao@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b45d6d0c41cb9593868e476681efb1aae5078a1
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Nov 1 20:15:52 2022 +0800

    net, neigh: Fix null-ptr-deref in neigh_table_clear()
    
    [ Upstream commit f8017317cb0b279b8ab98b0f3901a2e0ac880dad ]
    
    When IPv6 module gets initialized but hits an error in the middle,
    kenel panic with:
    
    KASAN: null-ptr-deref in range [0x0000000000000598-0x000000000000059f]
    CPU: 1 PID: 361 Comm: insmod
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
    RIP: 0010:__neigh_ifdown.isra.0+0x24b/0x370
    RSP: 0018:ffff888012677908 EFLAGS: 00000202
    ...
    Call Trace:
     <TASK>
     neigh_table_clear+0x94/0x2d0
     ndisc_cleanup+0x27/0x40 [ipv6]
     inet6_init+0x21c/0x2cb [ipv6]
     do_one_initcall+0xd3/0x4d0
     do_init_module+0x1ae/0x670
    ...
    Kernel panic - not syncing: Fatal exception
    
    When ipv6 initialization fails, it will try to cleanup and calls:
    
    neigh_table_clear()
      neigh_ifdown(tbl, NULL)
        pneigh_queue_purge(&tbl->proxy_queue, dev_net(dev == NULL))
        # dev_net(NULL) triggers null-ptr-deref.
    
    Fix it by passing NULL to pneigh_queue_purge() in neigh_ifdown() if dev
    is NULL, to make kernel not panic immediately.
    
    Fixes: 66ba215cb513 ("neigh: fix possible DoS due to net iface start/stop loop")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Link: https://lore.kernel.org/r/20221101121552.21890-1-chenzhongjin@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61defd6450a9ef4a1487090449999b0fd83518ef
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Nov 1 17:37:22 2022 +0800

    net/smc: Fix possible leaked pernet namespace in smc_init()
    
    [ Upstream commit 62ff373da2534534c55debe6c724c7fe14adb97f ]
    
    In smc_init(), register_pernet_subsys(&smc_net_stat_ops) is called
    without any error handling.
    If it fails, registering of &smc_net_ops won't be reverted.
    And if smc_nl_init() fails, &smc_net_stat_ops itself won't be reverted.
    
    This leaves wild ops in subsystem linkedlist and when another module
    tries to call register_pernet_operations() it triggers page fault:
    
    BUG: unable to handle page fault for address: fffffbfff81b964c
    RIP: 0010:register_pernet_operations+0x1b9/0x5f0
    Call Trace:
      <TASK>
      register_pernet_subsys+0x29/0x40
      ebtables_init+0x58/0x1000 [ebtables]
      ...
    
    Fixes: 194730a9beb5 ("net/smc: Make SMC statistics network namespace aware")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221101093722.127223-1-chenzhongjin@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de889774273ff2c4835fd99bc47c5b02eee58631
Author: Liu Peibao <liupeibao@loongson.cn>
Date:   Tue Nov 1 14:02:18 2022 +0800

    stmmac: dwmac-loongson: fix invalid mdio_node
    
    [ Upstream commit 2ae34111fe4eebb69986f6490015b57c88804373 ]
    
    In current code "plat->mdio_node" is always NULL, the mdio
    support is lost as there is no "mdio_bus_data". The original
    driver could work as the "mdio" variable is never set to
    false, which is described in commit <b0e03950dd71> ("stmmac:
    dwmac-loongson: fix uninitialized variable ......"). And
    after this commit merged, the "mdio" variable is always
    false, causing the mdio supoort logic lost.
    
    Fixes: 30bba69d7db4 ("stmmac: pci: Add dwmac support for Loongson")
    Signed-off-by: Liu Peibao <liupeibao@loongson.cn>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20221101060218.16453-1-liupeibao@loongson.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 535b78739ae75f257c894a05b1afa86ad9a3669e
Author: Nick Child <nnac123@linux.ibm.com>
Date:   Mon Oct 31 10:06:42 2022 -0500

    ibmvnic: Free rwi on reset success
    
    [ Upstream commit d6dd2fe71153f0ff748bf188bd4af076fe09a0a6 ]
    
    Free the rwi structure in the event that the last rwi in the list
    processed successfully. The logic in commit 4f408e1fa6e1 ("ibmvnic:
    retry reset if there are no other resets") introduces an issue that
    results in a 32 byte memory leak whenever the last rwi in the list
    gets processed.
    
    Fixes: 4f408e1fa6e1 ("ibmvnic: retry reset if there are no other resets")
    Signed-off-by: Nick Child <nnac123@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221031150642.13356-1-nnac123@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 985a88bf0b27193522bba7856b1763f428cef19d
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Oct 31 21:26:45 2022 +0800

    net: mdio: fix undefined behavior in bit shift for __mdiobus_register
    
    [ Upstream commit 40e4eb324c59e11fcb927aa46742d28aba6ecb8a ]
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in drivers/net/phy/mdio_bus.c:586:27
    left shift of 1 by 31 places cannot be represented in type 'int'
    Call Trace:
     <TASK>
     dump_stack_lvl+0x7d/0xa5
     dump_stack+0x15/0x1b
     ubsan_epilogue+0xe/0x4e
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x20c
     __mdiobus_register+0x49d/0x4e0
     fixed_mdio_bus_init+0xd8/0x12d
     do_one_initcall+0x76/0x430
     kernel_init_freeable+0x3b3/0x422
     kernel_init+0x24/0x1e0
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: 4fd5f812c23c ("phylib: allow incremental scanning of an mii bus")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20221031132645.168421-1-cuigaosheng1@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa16cac06b752e5f609c106735bd7838f444784c
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Tue Oct 18 10:18:51 2022 +0800

    Bluetooth: L2CAP: Fix memory leak in vhci_write
    
    [ Upstream commit 7c9524d929648935bac2bbb4c20437df8f9c3f42 ]
    
    Syzkaller reports a memory leak as follows:
    ====================================
    BUG: memory leak
    unreferenced object 0xffff88810d81ac00 (size 240):
      [...]
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<ffffffff838733d9>] __alloc_skb+0x1f9/0x270 net/core/skbuff.c:418
        [<ffffffff833f742f>] alloc_skb include/linux/skbuff.h:1257 [inline]
        [<ffffffff833f742f>] bt_skb_alloc include/net/bluetooth/bluetooth.h:469 [inline]
        [<ffffffff833f742f>] vhci_get_user drivers/bluetooth/hci_vhci.c:391 [inline]
        [<ffffffff833f742f>] vhci_write+0x5f/0x230 drivers/bluetooth/hci_vhci.c:511
        [<ffffffff815e398d>] call_write_iter include/linux/fs.h:2192 [inline]
        [<ffffffff815e398d>] new_sync_write fs/read_write.c:491 [inline]
        [<ffffffff815e398d>] vfs_write+0x42d/0x540 fs/read_write.c:578
        [<ffffffff815e3cdd>] ksys_write+0x9d/0x160 fs/read_write.c:631
        [<ffffffff845e0645>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]
        [<ffffffff845e0645>] do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
        [<ffffffff84600087>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    ====================================
    
    HCI core will uses hci_rx_work() to process frame, which is queued to
    the hdev->rx_q tail in hci_recv_frame() by HCI driver.
    
    Yet the problem is that, HCI core may not free the skb after handling
    ACL data packets. To be more specific, when start fragment does not
    contain the L2CAP length, HCI core just copies skb into conn->rx_skb and
    finishes frame process in l2cap_recv_acldata(), without freeing the skb,
    which triggers the above memory leak.
    
    This patch solves it by releasing the relative skb, after processing
    the above case in l2cap_recv_acldata().
    
    Fixes: 4d7ea8ee90e4 ("Bluetooth: L2CAP: Fix handling fragmented length")
    Link: https://lore.kernel.org/all/0000000000000d0b1905e6aaef64@google.com/
    Reported-and-tested-by: syzbot+8f819e36e01022991cfa@syzkaller.appspotmail.com
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3a7b2ac64de232edb67279e804932cb42f0b52a
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Oct 17 15:58:13 2022 +0800

    Bluetooth: L2CAP: fix use-after-free in l2cap_conn_del()
    
    [ Upstream commit 0d0e2d032811280b927650ff3c15fe5020e82533 ]
    
    When l2cap_recv_frame() is invoked to receive data, and the cid is
    L2CAP_CID_A2MP, if the channel does not exist, it will create a channel.
    However, after a channel is created, the hold operation of the channel
    is not performed. In this case, the value of channel reference counting
    is 1. As a result, after hci_error_reset() is triggered, l2cap_conn_del()
    invokes the close hook function of A2MP to release the channel. Then
     l2cap_chan_unlock(chan) will trigger UAF issue.
    
    The process is as follows:
    Receive data:
    l2cap_data_channel()
        a2mp_channel_create()  --->channel ref is 2
        l2cap_chan_put()       --->channel ref is 1
    
    Triger event:
        hci_error_reset()
            hci_dev_do_close()
            ...
            l2cap_disconn_cfm()
                l2cap_conn_del()
                    l2cap_chan_hold()    --->channel ref is 2
                    l2cap_chan_del()     --->channel ref is 1
                    a2mp_chan_close_cb() --->channel ref is 0, release channel
                    l2cap_chan_unlock()  --->UAF of channel
    
    The detailed Call Trace is as follows:
    BUG: KASAN: use-after-free in __mutex_unlock_slowpath+0xa6/0x5e0
    Read of size 8 at addr ffff8880160664b8 by task kworker/u11:1/7593
    Workqueue: hci0 hci_error_reset
    Call Trace:
     <TASK>
     dump_stack_lvl+0xcd/0x134
     print_report.cold+0x2ba/0x719
     kasan_report+0xb1/0x1e0
     kasan_check_range+0x140/0x190
     __mutex_unlock_slowpath+0xa6/0x5e0
     l2cap_conn_del+0x404/0x7b0
     l2cap_disconn_cfm+0x8c/0xc0
     hci_conn_hash_flush+0x11f/0x260
     hci_dev_close_sync+0x5f5/0x11f0
     hci_dev_do_close+0x2d/0x70
     hci_error_reset+0x9e/0x140
     process_one_work+0x98a/0x1620
     worker_thread+0x665/0x1080
     kthread+0x2e4/0x3a0
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Allocated by task 7593:
     kasan_save_stack+0x1e/0x40
     __kasan_kmalloc+0xa9/0xd0
     l2cap_chan_create+0x40/0x930
     amp_mgr_create+0x96/0x990
     a2mp_channel_create+0x7d/0x150
     l2cap_recv_frame+0x51b8/0x9a70
     l2cap_recv_acldata+0xaa3/0xc00
     hci_rx_work+0x702/0x1220
     process_one_work+0x98a/0x1620
     worker_thread+0x665/0x1080
     kthread+0x2e4/0x3a0
     ret_from_fork+0x1f/0x30
    
    Freed by task 7593:
     kasan_save_stack+0x1e/0x40
     kasan_set_track+0x21/0x30
     kasan_set_free_info+0x20/0x30
     ____kasan_slab_free+0x167/0x1c0
     slab_free_freelist_hook+0x89/0x1c0
     kfree+0xe2/0x580
     l2cap_chan_put+0x22a/0x2d0
     l2cap_conn_del+0x3fc/0x7b0
     l2cap_disconn_cfm+0x8c/0xc0
     hci_conn_hash_flush+0x11f/0x260
     hci_dev_close_sync+0x5f5/0x11f0
     hci_dev_do_close+0x2d/0x70
     hci_error_reset+0x9e/0x140
     process_one_work+0x98a/0x1620
     worker_thread+0x665/0x1080
     kthread+0x2e4/0x3a0
     ret_from_fork+0x1f/0x30
    
    Last potentially related work creation:
     kasan_save_stack+0x1e/0x40
     __kasan_record_aux_stack+0xbe/0xd0
     call_rcu+0x99/0x740
     netlink_release+0xe6a/0x1cf0
     __sock_release+0xcd/0x280
     sock_close+0x18/0x20
     __fput+0x27c/0xa90
     task_work_run+0xdd/0x1a0
     exit_to_user_mode_prepare+0x23c/0x250
     syscall_exit_to_user_mode+0x19/0x50
     do_syscall_64+0x42/0x80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Second to last potentially related work creation:
     kasan_save_stack+0x1e/0x40
     __kasan_record_aux_stack+0xbe/0xd0
     call_rcu+0x99/0x740
     netlink_release+0xe6a/0x1cf0
     __sock_release+0xcd/0x280
     sock_close+0x18/0x20
     __fput+0x27c/0xa90
     task_work_run+0xdd/0x1a0
     exit_to_user_mode_prepare+0x23c/0x250
     syscall_exit_to_user_mode+0x19/0x50
     do_syscall_64+0x42/0x80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: d0be8347c623 ("Bluetooth: L2CAP: Fix use-after-free caused by l2cap_chan_put")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf2719a21fdb9d4c8e9c834d279163609bef575d
Author: Soenke Huster <soenke.huster@eknoes.de>
Date:   Wed Oct 12 09:45:06 2022 +0200

    Bluetooth: virtio_bt: Use skb_put to set length
    
    [ Upstream commit 160fbcf3bfb93c3c086427f9f4c8bc70f217e9be ]
    
    By using skb_put we ensure that skb->tail is set
    correctly. Currently, skb->tail is always zero, which
    leads to errors, such as the following page fault in
    rfcomm_recv_frame:
    
        BUG: unable to handle page fault for address: ffffed1021de29ff
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        RIP: 0010:rfcomm_run+0x831/0x4040 (net/bluetooth/rfcomm/core.c:1751)
    
    Fixes: afd2daa26c7a ("Bluetooth: Add support for virtio transport driver")
    Signed-off-by: Soenke Huster <soenke.huster@eknoes.de>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8278a87bb1eeea94350d675ef961ee5a03341fde
Author: Maxim Mikityanskiy <maxtram95@gmail.com>
Date:   Wed Oct 5 00:27:18 2022 +0300

    Bluetooth: L2CAP: Fix use-after-free caused by l2cap_reassemble_sdu
    
    [ Upstream commit 3aff8aaca4e36dc8b17eaa011684881a80238966 ]
    
    Fix the race condition between the following two flows that run in
    parallel:
    
    1. l2cap_reassemble_sdu -> chan->ops->recv (l2cap_sock_recv_cb) ->
       __sock_queue_rcv_skb.
    
    2. bt_sock_recvmsg -> skb_recv_datagram, skb_free_datagram.
    
    An SKB can be queued by the first flow and immediately dequeued and
    freed by the second flow, therefore the callers of l2cap_reassemble_sdu
    can't use the SKB after that function returns. However, some places
    continue accessing struct l2cap_ctrl that resides in the SKB's CB for a
    short time after l2cap_reassemble_sdu returns, leading to a
    use-after-free condition (the stack trace is below, line numbers for
    kernel 5.19.8).
    
    Fix it by keeping a local copy of struct l2cap_ctrl.
    
    BUG: KASAN: use-after-free in l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
    Read of size 1 at addr ffff88812025f2f0 by task kworker/u17:3/43169
    
    Workqueue: hci0 hci_rx_work [bluetooth]
    Call Trace:
     <TASK>
     dump_stack_lvl (lib/dump_stack.c:107 (discriminator 4))
     print_report.cold (mm/kasan/report.c:314 mm/kasan/report.c:429)
     ? l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
     kasan_report (mm/kasan/report.c:162 mm/kasan/report.c:493)
     ? l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
     l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
     l2cap_rx (net/bluetooth/l2cap_core.c:7236 net/bluetooth/l2cap_core.c:7271) bluetooth
     ret_from_fork (arch/x86/entry/entry_64.S:306)
     </TASK>
    
    Allocated by task 43169:
     kasan_save_stack (mm/kasan/common.c:39)
     __kasan_slab_alloc (mm/kasan/common.c:45 mm/kasan/common.c:436 mm/kasan/common.c:469)
     kmem_cache_alloc_node (mm/slab.h:750 mm/slub.c:3243 mm/slub.c:3293)
     __alloc_skb (net/core/skbuff.c:414)
     l2cap_recv_frag (./include/net/bluetooth/bluetooth.h:425 net/bluetooth/l2cap_core.c:8329) bluetooth
     l2cap_recv_acldata (net/bluetooth/l2cap_core.c:8442) bluetooth
     hci_rx_work (net/bluetooth/hci_core.c:3642 net/bluetooth/hci_core.c:3832) bluetooth
     process_one_work (kernel/workqueue.c:2289)
     worker_thread (./include/linux/list.h:292 kernel/workqueue.c:2437)
     kthread (kernel/kthread.c:376)
     ret_from_fork (arch/x86/entry/entry_64.S:306)
    
    Freed by task 27920:
     kasan_save_stack (mm/kasan/common.c:39)
     kasan_set_track (mm/kasan/common.c:45)
     kasan_set_free_info (mm/kasan/generic.c:372)
     ____kasan_slab_free (mm/kasan/common.c:368 mm/kasan/common.c:328)
     slab_free_freelist_hook (mm/slub.c:1780)
     kmem_cache_free (mm/slub.c:3536 mm/slub.c:3553)
     skb_free_datagram (./include/net/sock.h:1578 ./include/net/sock.h:1639 net/core/datagram.c:323)
     bt_sock_recvmsg (net/bluetooth/af_bluetooth.c:295) bluetooth
     l2cap_sock_recvmsg (net/bluetooth/l2cap_sock.c:1212) bluetooth
     sock_read_iter (net/socket.c:1087)
     new_sync_read (./include/linux/fs.h:2052 fs/read_write.c:401)
     vfs_read (fs/read_write.c:482)
     ksys_read (fs/read_write.c:620)
     do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
     entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    
    Link: https://lore.kernel.org/linux-bluetooth/CAKErNvoqga1WcmoR3-0875esY6TVWFQDandbVZncSiuGPBQXLA@mail.gmail.com/T/#u
    Fixes: d2a7ac5d5d3a ("Bluetooth: Add the ERTM receive state machine")
    Fixes: 4b51dae96731 ("Bluetooth: Add streaming mode receive and incoming packet classifier")
    Signed-off-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42d20d5e24575c9afa2d66d9a51e7386db9514f5
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Wed Nov 2 10:40:47 2022 +0100

    netfilter: ipset: enforce documented limit to prevent allocating huge memory
    
    [ Upstream commit 510841da1fcc16f702440ab58ef0b4d82a9056b7 ]
    
    Daniel Xu reported that the hash:net,iface type of the ipset subsystem does
    not limit adding the same network with different interfaces to a set, which
    can lead to huge memory usage or allocation failure.
    
    The quick reproducer is
    
    $ ipset create ACL.IN.ALL_PERMIT hash:net,iface hashsize 1048576 timeout 0
    $ for i in $(seq 0 100); do /sbin/ipset add ACL.IN.ALL_PERMIT 0.0.0.0/0,kaf_$i timeout 0 -exist; done
    
    The backtrace when vmalloc fails:
    
            [Tue Oct 25 00:13:08 2022] ipset: vmalloc error: size 1073741848, exceeds total pages
            <...>
            [Tue Oct 25 00:13:08 2022] Call Trace:
            [Tue Oct 25 00:13:08 2022]  <TASK>
            [Tue Oct 25 00:13:08 2022]  dump_stack_lvl+0x48/0x60
            [Tue Oct 25 00:13:08 2022]  warn_alloc+0x155/0x180
            [Tue Oct 25 00:13:08 2022]  __vmalloc_node_range+0x72a/0x760
            [Tue Oct 25 00:13:08 2022]  ? hash_netiface4_add+0x7c0/0xb20
            [Tue Oct 25 00:13:08 2022]  ? __kmalloc_large_node+0x4a/0x90
            [Tue Oct 25 00:13:08 2022]  kvmalloc_node+0xa6/0xd0
            [Tue Oct 25 00:13:08 2022]  ? hash_netiface4_resize+0x99/0x710
            <...>
    
    The fix is to enforce the limit documented in the ipset(8) manpage:
    
    >  The internal restriction of the hash:net,iface set type is that the same
    >  network prefix cannot be stored with more than 64 different interfaces
    >  in a single set.
    
    Fixes: ccf0a4b7fc68 ("netfilter: ipset: Add bucketsize parameter to all hash types")
    Reported-by: Daniel Xu <dxu@dxuuu.xyz>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f46ea5fa3320dca4fe0c0926b49a5f14cb85de62
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:39 2022 +0000

    btrfs: fix ulist leaks in error paths of qgroup self tests
    
    [ Upstream commit d37de92b38932d40e4a251e876cc388f9aee5f42 ]
    
    In the test_no_shared_qgroup() and test_multiple_refs() qgroup self tests,
    if we fail to add the tree ref, remove the extent item or remove the
    extent ref, we are returning from the test function without freeing the
    "old_roots" ulist that was allocated by the previous calls to
    btrfs_find_all_roots(). Fix that by calling ulist_free() before returning.
    
    Fixes: 442244c96332 ("btrfs: qgroup: Switch self test to extent-oriented qgroup mechanism.")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 222a3d533027b9492d5b7f5ecdc01a90f57bb5a9
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:38 2022 +0000

    btrfs: fix inode list leak during backref walking at find_parent_nodes()
    
    [ Upstream commit 92876eec382a0f19f33d09d2c939e9ca49038ae5 ]
    
    During backref walking, at find_parent_nodes(), if we are dealing with a
    data extent and we get an error while resolving the indirect backrefs, at
    resolve_indirect_refs(), or in the while loop that iterates over the refs
    in the direct refs rbtree, we end up leaking the inode lists attached to
    the direct refs we have in the direct refs rbtree that were not yet added
    to the refs ulist passed as argument to find_parent_nodes(). Since they
    were not yet added to the refs ulist and prelim_release() does not free
    the lists, on error the caller can only free the lists attached to the
    refs that were added to the refs ulist, all the remaining refs get their
    inode lists never freed, therefore leaking their memory.
    
    Fix this by having prelim_release() always free any attached inode list
    to each ref found in the rbtree, and have find_parent_nodes() set the
    ref's inode list to NULL once it transfers ownership of the inode list
    to a ref added to the refs ulist passed to find_parent_nodes().
    
    Fixes: 86d5f9944252 ("btrfs: convert prelimary reference tracking to use rbtrees")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ba3479f9e96b9ad460c7e77abc26dd16e5dec4f
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:37 2022 +0000

    btrfs: fix inode list leak during backref walking at resolve_indirect_refs()
    
    [ Upstream commit 5614dc3a47e3310fbc77ea3b67eaadd1c6417bf1 ]
    
    During backref walking, at resolve_indirect_refs(), if we get an error
    we jump to the 'out' label and call ulist_free() on the 'parents' ulist,
    which frees all the elements in the ulist - however that does not free
    any inode lists that may be attached to elements, through the 'aux' field
    of a ulist node, so we end up leaking lists if we have any attached to
    the unodes.
    
    Fix this by calling free_leaf_list() instead of ulist_free() when we exit
    from resolve_indirect_refs(). The static function free_leaf_list() is
    moved up for this to be possible and it's slightly simplified by removing
    unnecessary code.
    
    Fixes: 3301958b7c1d ("Btrfs: add inodes before dropping the extent lock in find_all_leafs")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a80634f392af8c42a5a9d2b3822acc6e7795c8be
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 31 20:13:41 2022 +0800

    isdn: mISDN: netjet: fix wrong check of device registration
    
    [ Upstream commit bf00f5426074249058a106a6edbb89e4b25a4d79 ]
    
    The class is set in mISDN_register_device(), but if device_add() returns
    error, it will lead to delete a device without added, fix this by using
    device_is_registered() to check if the device is registered.
    
    Fixes: a900845e5661 ("mISDN: Add support for Traverse Technologies NETJet PCI cards")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 029d5b7688a2f3a86f2a3be5a6ba9cc968c80e41
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 31 20:13:40 2022 +0800

    mISDN: fix possible memory leak in mISDN_register_device()
    
    [ Upstream commit e7d1d4d9ac0dfa40be4c2c8abd0731659869b297 ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically,
    add put_device() to give up the reference, so that the name can be
    freed in kobject_cleanup() when the refcount is 0.
    
    Set device class before put_device() to avoid null release() function
    WARN message in device_release().
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e2129c67daca21043a26575108f6286c85e71f6
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Oct 29 00:10:49 2022 +0800

    rose: Fix NULL pointer dereference in rose_send_frame()
    
    [ Upstream commit e97c089d7a49f67027395ddf70bf327eeac2611e ]
    
    The syzkaller reported an issue:
    
    KASAN: null-ptr-deref in range [0x0000000000000380-0x0000000000000387]
    CPU: 0 PID: 4069 Comm: kworker/0:15 Not tainted 6.0.0-syzkaller-02734-g0326074ff465 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/22/2022
    Workqueue: rcu_gp srcu_invoke_callbacks
    RIP: 0010:rose_send_frame+0x1dd/0x2f0 net/rose/rose_link.c:101
    Call Trace:
     <IRQ>
     rose_transmit_clear_request+0x1d5/0x290 net/rose/rose_link.c:255
     rose_rx_call_request+0x4c0/0x1bc0 net/rose/af_rose.c:1009
     rose_loopback_timer+0x19e/0x590 net/rose/rose_loopback.c:111
     call_timer_fn+0x1a0/0x6b0 kernel/time/timer.c:1474
     expire_timers kernel/time/timer.c:1519 [inline]
     __run_timers.part.0+0x674/0xa80 kernel/time/timer.c:1790
     __run_timers kernel/time/timer.c:1768 [inline]
     run_timer_softirq+0xb3/0x1d0 kernel/time/timer.c:1803
     __do_softirq+0x1d0/0x9c8 kernel/softirq.c:571
     [...]
     </IRQ>
    
    It triggers NULL pointer dereference when 'neigh->dev->dev_addr' is
    called in the rose_send_frame(). It's the first occurrence of the
    `neigh` is in rose_loopback_timer() as `rose_loopback_neigh', and
    the 'dev' in 'rose_loopback_neigh' is initialized sa nullptr.
    
    It had been fixed by commit 3b3fd068c56e3fbea30090859216a368398e39bf
    ("rose: Fix Null pointer dereference in rose_send_frame()") ever.
    But it's introduced by commit 3c53cd65dece47dd1f9d3a809f32e59d1d87b2b8
    ("rose: check NULL rose_loopback_neigh->loopback") again.
    
    We fix it by add NULL check in rose_transmit_clear_request(). When
    the 'dev' in 'neigh' is NULL, we don't reply the request and just
    clear it.
    
    syzkaller don't provide repro, and I provide a syz repro like:
    r0 = syz_init_net_socket$bt_sco(0x1f, 0x5, 0x2)
    ioctl$sock_inet_SIOCSIFFLAGS(r0, 0x8914, &(0x7f0000000180)={'rose0\x00', 0x201})
    r1 = syz_init_net_socket$rose(0xb, 0x5, 0x0)
    bind$rose(r1, &(0x7f00000000c0)=@full={0xb, @dev, @null, 0x0, [@null, @null, @netrom, @netrom, @default, @null]}, 0x40)
    connect$rose(r1, &(0x7f0000000240)=@short={0xb, @dev={0xbb, 0xbb, 0xbb, 0x1, 0x0}, @remote={0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x1}, 0x1, @netrom={0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x0, 0x0}}, 0x1c)
    
    Fixes: 3c53cd65dece ("rose: check NULL rose_loopback_neigh->loopback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06d7596d18725f1a93cf817662d36050e5afb989
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Oct 31 20:07:05 2022 +0800

    ipvs: fix WARNING in ip_vs_app_net_cleanup()
    
    [ Upstream commit 5663ed63adb9619c98ab7479aa4606fa9b7a548c ]
    
    During the initialization of ip_vs_app_net_init(), if file ip_vs_app
    fails to be created, the initialization is successful by default.
    Therefore, the ip_vs_app file doesn't be found during the remove in
    ip_vs_app_net_cleanup(). It will cause WRNING.
    
    The following is the stack information:
    name 'ip_vs_app'
    WARNING: CPU: 1 PID: 9 at fs/proc/generic.c:712 remove_proc_entry+0x389/0x460
    Modules linked in:
    Workqueue: netns cleanup_net
    RIP: 0010:remove_proc_entry+0x389/0x460
    Call Trace:
    <TASK>
    ops_exit_list+0x125/0x170
    cleanup_net+0x4ea/0xb00
    process_one_work+0x9bf/0x1710
    worker_thread+0x665/0x1080
    kthread+0x2e4/0x3a0
    ret_from_fork+0x1f/0x30
    </TASK>
    
    Fixes: 457c4cbc5a3d ("[NET]: Make /proc/net per network namespace")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ee2d6b726b0ce339e36569e5849692f4cf4595e
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Oct 31 20:07:04 2022 +0800

    ipvs: fix WARNING in __ip_vs_cleanup_batch()
    
    [ Upstream commit 3d00c6a0da8ddcf75213e004765e4a42acc71d5d ]
    
    During the initialization of ip_vs_conn_net_init(), if file ip_vs_conn
    or ip_vs_conn_sync fails to be created, the initialization is successful
    by default. Therefore, the ip_vs_conn or ip_vs_conn_sync file doesn't
    be found during the remove.
    
    The following is the stack information:
    name 'ip_vs_conn_sync'
    WARNING: CPU: 3 PID: 9 at fs/proc/generic.c:712
    remove_proc_entry+0x389/0x460
    Modules linked in:
    Workqueue: netns cleanup_net
    RIP: 0010:remove_proc_entry+0x389/0x460
    Call Trace:
    <TASK>
    __ip_vs_cleanup_batch+0x7d/0x120
    ops_exit_list+0x125/0x170
    cleanup_net+0x4ea/0xb00
    process_one_work+0x9bf/0x1710
    worker_thread+0x665/0x1080
    kthread+0x2e4/0x3a0
    ret_from_fork+0x1f/0x30
    </TASK>
    
    Fixes: 61b1ab4583e2 ("IPVS: netns, add basic init per netns.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33e7783bc07e2c64be1f55bdea47ae3017db9cf7
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Oct 26 14:32:16 2022 +0200

    ipvs: use explicitly signed chars
    
    [ Upstream commit 5c26159c97b324dc5174a5713eafb8c855cf8106 ]
    
    The `char` type with no explicit sign is sometimes signed and sometimes
    unsigned. This code will break on platforms such as arm, where char is
    unsigned. So mark it here as explicitly signed, so that the
    todrop_counter decrement and subsequent comparison is correct.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6044791b7be707fd0e709f26e961a446424e5051
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Oct 26 09:54:45 2022 +0200

    netfilter: nf_tables: release flow rule object from commit path
    
    [ Upstream commit 26b5934ff4194e13196bedcba373cd4915071d0e ]
    
    No need to postpone this to the commit release path, since no packets
    are walking over this object, this is accessed from control plane only.
    This helped uncovered UAF triggered by races with the netlink notifier.
    
    Fixes: 9dd732e0bdf5 ("netfilter: nf_tables: memleak flow rule from commit path")
    Reported-by: syzbot+8f747f62763bc6c32916@syzkaller.appspotmail.com
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ffe7100411a8b9015115ce124cd6c9c9da6f8e3
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Oct 26 09:52:36 2022 +0200

    netfilter: nf_tables: netlink notifier might race to release objects
    
    [ Upstream commit d4bc8271db21ea9f1c86a1ca4d64999f184d4aae ]
    
    commit release path is invoked via call_rcu and it runs lockless to
    release the objects after rcu grace period. The netlink notifier handler
    might win race to remove objects that the transaction context is still
    referencing from the commit release path.
    
    Call rcu_barrier() to ensure pending rcu callbacks run to completion
    if the list of transactions to be destroyed is not empty.
    
    Fixes: 6001a930ce03 ("netfilter: nftables: introduce table ownership")
    Reported-by: syzbot+8f747f62763bc6c32916@syzkaller.appspotmail.com
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcc79cf735b8ec4bedaa82c53bed8c62721c042b
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Sat Oct 29 17:41:01 2022 +0800

    net: tun: fix bugs for oversize packet when napi frags enabled
    
    [ Upstream commit 363a5328f4b0517e59572118ccfb7c626d81dca9 ]
    
    Recently, we got two syzkaller problems because of oversize packet
    when napi frags enabled.
    
    One of the problems is because the first seg size of the iov_iter
    from user space is very big, it is 2147479538 which is bigger than
    the threshold value for bail out early in __alloc_pages(). And
    skb->pfmemalloc is true, __kmalloc_reserve() would use pfmemalloc
    reserves without __GFP_NOWARN flag. Thus we got a warning as following:
    
    ========================================================
    WARNING: CPU: 1 PID: 17965 at mm/page_alloc.c:5295 __alloc_pages+0x1308/0x16c4 mm/page_alloc.c:5295
    ...
    Call trace:
     __alloc_pages+0x1308/0x16c4 mm/page_alloc.c:5295
     __alloc_pages_node include/linux/gfp.h:550 [inline]
     alloc_pages_node include/linux/gfp.h:564 [inline]
     kmalloc_large_node+0x94/0x350 mm/slub.c:4038
     __kmalloc_node_track_caller+0x620/0x8e4 mm/slub.c:4545
     __kmalloc_reserve.constprop.0+0x1e4/0x2b0 net/core/skbuff.c:151
     pskb_expand_head+0x130/0x8b0 net/core/skbuff.c:1654
     __skb_grow include/linux/skbuff.h:2779 [inline]
     tun_napi_alloc_frags+0x144/0x610 drivers/net/tun.c:1477
     tun_get_user+0x31c/0x2010 drivers/net/tun.c:1835
     tun_chr_write_iter+0x98/0x100 drivers/net/tun.c:2036
    
    The other problem is because odd IPv6 packets without NEXTHDR_NONE
    extension header and have big packet length, it is 2127925 which is
    bigger than ETH_MAX_MTU(65535). After ipv6_gso_pull_exthdrs() in
    ipv6_gro_receive(), network_header offset and transport_header offset
    are all bigger than U16_MAX. That would trigger skb->network_header
    and skb->transport_header overflow error, because they are all '__u16'
    type. Eventually, it would affect the value for __skb_push(skb, value),
    and make it be a big value. After __skb_push() in ipv6_gro_receive(),
    skb->data would less than skb->head, an out of bounds memory bug occurred.
    That would trigger the problem as following:
    
    ==================================================================
    BUG: KASAN: use-after-free in eth_type_trans+0x100/0x260
    ...
    Call trace:
     dump_backtrace+0xd8/0x130
     show_stack+0x1c/0x50
     dump_stack_lvl+0x64/0x7c
     print_address_description.constprop.0+0xbc/0x2e8
     print_report+0x100/0x1e4
     kasan_report+0x80/0x120
     __asan_load8+0x78/0xa0
     eth_type_trans+0x100/0x260
     napi_gro_frags+0x164/0x550
     tun_get_user+0xda4/0x1270
     tun_chr_write_iter+0x74/0x130
     do_iter_readv_writev+0x130/0x1ec
     do_iter_write+0xbc/0x1e0
     vfs_writev+0x13c/0x26c
    
    To fix the problems, restrict the packet size less than
    (ETH_MAX_MTU - NET_SKB_PAD - NET_IP_ALIGN) which has considered reserved
    skb space in napi_alloc_skb() because transport_header is an offset from
    skb->head. Add len check in tun_napi_alloc_frags() simply.
    
    Fixes: 90e33d459407 ("tun: enable napi_gro_frags() for TUN/TAP driver")
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20221029094101.1653855-1-william.xuanziyang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc4b50adb400ee5ec527a04073174e8e73a139fa
Author: Dan Carpenter <error27@gmail.com>
Date:   Fri Oct 28 18:05:00 2022 +0300

    net: sched: Fix use after free in red_enqueue()
    
    [ Upstream commit 8bdc2acd420c6f3dd1f1c78750ec989f02a1e2b9 ]
    
    We can't use "skb" again after passing it to qdisc_enqueue().  This is
    basically identical to commit 2f09707d0c97 ("sch_sfb: Also store skb
    len before calling child enqueue").
    
    Fixes: d7f4f332f082 ("sch_red: update backlog as well")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab80025ea7ac61f83932c702fa9341d2d8e85f70
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Oct 29 00:07:06 2022 +0300

    ata: pata_legacy: fix pdc20230_set_piomode()
    
    [ Upstream commit 171a93182eccd6e6835d2c86b40787f9f832efaa ]
    
    Clang gives a warning when compiling pata_legacy.c with 'make W=1' about
    the 'rt' local variable in pdc20230_set_piomode() being set but unused.
    Quite obviously, there is an outb() call missing to write back the updated
    variable. Moreover, checking the docs by Petr Soucek revealed that bitwise
    AND should have been done with a negated timing mask and the master/slave
    timing masks were swapped while updating...
    
    Fixes: 669a5db411d8 ("[libata] Add a bunch of PATA drivers.")
    Reported-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dede9ba02705e84ff5aae0ebffbad5a37ea24a54
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Oct 28 10:09:11 2022 +0800

    net: fec: fix improper use of NETDEV_TX_BUSY
    
    [ Upstream commit 06a4df5863f73af193a4ff7abf7cb04058584f06 ]
    
    The ndo_start_xmit() method must not free skb when returning
    NETDEV_TX_BUSY, since caller is going to requeue freed skb.
    
    Fix it by returning NETDEV_TX_OK in case of dma_map_single() fails.
    
    Fixes: 79f339125ea3 ("net: fec: Add software TSO support")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dfdac5e3f8db5f4445228c44f64091045644a3b
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:32 2022 +0800

    nfc: nfcmrvl: Fix potential memory leak in nfcmrvl_i2c_nci_send()
    
    [ Upstream commit 93d904a734a74c54d945a9884b4962977f1176cd ]
    
    nfcmrvl_i2c_nci_send() will be called by nfcmrvl_nci_send(), and skb
    should be freed in nfcmrvl_i2c_nci_send(). However, nfcmrvl_nci_send()
    will only free skb when i2c_master_send() return >=0, which means skb
    will memleak when i2c_master_send() failed. Free skb no matter whether
    i2c_master_send() succeeds.
    
    Fixes: b5b3e23e4cac ("NFC: nfcmrvl: add i2c driver")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7486f5c90078648de73d2544f51c64c8eac026bc
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:31 2022 +0800

    nfc: s3fwrn5: Fix potential memory leak in s3fwrn5_nci_send()
    
    [ Upstream commit 3a146b7e3099dc7cf3114f627d9b79291e2d2203 ]
    
    s3fwrn5_nci_send() will call s3fwrn5_i2c_write() or s3fwrn82_uart_write(),
    and free the skb if write() failed. However, even if the write() run
    succeeds, the skb will not be freed in write(). As the result, the skb
    will memleak. s3fwrn5_nci_send() should also free the skb when write()
    succeeds.
    
    Fixes: c04c674fadeb ("nfc: s3fwrn5: Add driver for Samsung S3FWRN5 NFC Chip")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cba1f061bfe23fece2841129ca2862cdec29d5c
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:30 2022 +0800

    nfc: nxp-nci: Fix potential memory leak in nxp_nci_send()
    
    [ Upstream commit 7bf1ed6aff0f70434bd0cdd45495e83f1dffb551 ]
    
    nxp_nci_send() will call nxp_nci_i2c_write(), and only free skb when
    nxp_nci_i2c_write() failed. However, even if the nxp_nci_i2c_write()
    run succeeds, the skb will not be freed in nxp_nci_i2c_write(). As the
    result, the skb will memleak. nxp_nci_send() should also free the skb
    when nxp_nci_i2c_write() succeeds.
    
    Fixes: dece45855a8b ("NFC: nxp-nci: Add support for NXP NCI chips")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44bc1868a4f542502ea2221fe5ad88ca66d1c6b6
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:29 2022 +0800

    nfc: fdp: Fix potential memory leak in fdp_nci_send()
    
    [ Upstream commit 8e4aae6b8ca76afb1fb64dcb24be44ba814e7f8a ]
    
    fdp_nci_send() will call fdp_nci_i2c_write that will not free skb in
    the function. As a result, when fdp_nci_i2c_write() finished, the skb
    will memleak. fdp_nci_send() should free skb after fdp_nci_i2c_write()
    finished.
    
    Fixes: a06347c04c13 ("NFC: Add Intel Fields Peak NFC solution driver")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bef9a89f2f563f8c19c86b4779f6152a5fff528
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Thu Oct 27 17:54:39 2022 +0300

    net: dsa: fall back to default tagger if we can't load the one from DT
    
    [ Upstream commit a2c65a9d0568b6737c02b54f00b80716a53fac61 ]
    
    DSA tagging protocol drivers can be changed at runtime through sysfs and
    at probe time through the device tree (support for the latter was added
    later).
    
    When changing through sysfs, it is assumed that the module for the new
    tagging protocol was already loaded into the kernel (in fact this is
    only a concern for Ocelot/Felix switches, where we have tag_ocelot.ko
    and tag_ocelot_8021q.ko; for every other switch, the default and
    alternative protocols are compiled within the same .ko, so there is
    nothing for the user to load).
    
    The kernel cannot currently call request_module(), because it has no way
    of constructing the modalias name of the tagging protocol driver
    ("dsa_tag-%d", where the number is one of DSA_TAG_PROTO_*_VALUE).
    The device tree only contains the string name of the tagging protocol
    ("ocelot-8021q"), and the only mapping between the string and the
    DSA_TAG_PROTO_OCELOT_8021Q_VALUE is present in tag_ocelot_8021q.ko.
    So this is a chicken-and-egg situation and dsa_core.ko has nothing based
    on which it can automatically request the insertion of the module.
    
    As a consequence, if CONFIG_NET_DSA_TAG_OCELOT_8021Q is built as module,
    the switch will forever defer probing.
    
    The long-term solution is to make DSA call request_module() somehow,
    but that probably needs some refactoring.
    
    What we can do to keep operating with existing device tree blobs is to
    cancel the attempt to change the tagging protocol with the one specified
    there, and to remain operating with the default one. Depending on the
    situation, the default protocol might still allow some functionality
    (in the case of ocelot, it does), and it's better to have that than to
    fail to probe.
    
    Fixes: deff710703d8 ("net: dsa: Allow default tag protocol to be overridden from DT")
    Link: https://lore.kernel.org/lkml/20221027113248.420216-1-michael@walle.cc/
    Reported-by: Heiko Thiery <heiko.thiery@gmail.com>
    Reported-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Tested-by: Michael Walle <michael@walle.cc>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20221027145439.3086017-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06f9e0b37f7e4a34faa96cb3a54f3a68e9c62c1c
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Oct 25 18:32:32 2022 +0300

    RDMA/qedr: clean up work queue on failure in qedr_alloc_resources()
    
    [ Upstream commit 7a47e077e503feb73d56e491ce89aa73b67a3972 ]
    
    Add a check for if create_singlethread_workqueue() fails and also destroy
    the work queue on failure paths.
    
    Fixes: e411e0587e0d ("RDMA/qedr: Add iWARP connection management functions")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/Y1gBkDucQhhWj5YM@kili
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b3d5dcb12347f3518308c2c9d2cf72453a3e1e5
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Oct 25 10:41:46 2022 +0800

    RDMA/core: Fix null-ptr-deref in ib_core_cleanup()
    
    [ Upstream commit 07c0d131cc0fe1f3981a42958fc52d573d303d89 ]
    
    KASAN reported a null-ptr-deref error:
    
      KASAN: null-ptr-deref in range [0x0000000000000118-0x000000000000011f]
      CPU: 1 PID: 379
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
      RIP: 0010:destroy_workqueue+0x2f/0x740
      RSP: 0018:ffff888016137df8 EFLAGS: 00000202
      ...
      Call Trace:
       ib_core_cleanup+0xa/0xa1 [ib_core]
       __do_sys_delete_module.constprop.0+0x34f/0x5b0
       do_syscall_64+0x3a/0x90
       entry_SYSCALL_64_after_hwframe+0x63/0xcd
      RIP: 0033:0x7fa1a0d221b7
      ...
    
    It is because the fail of roce_gid_mgmt_init() is ignored:
    
     ib_core_init()
       roce_gid_mgmt_init()
         gid_cache_wq = alloc_ordered_workqueue # fail
     ...
     ib_core_cleanup()
       roce_gid_mgmt_cleanup()
         destroy_workqueue(gid_cache_wq)
         # destroy an unallocated wq
    
    Fix this by catching the fail of roce_gid_mgmt_init() in ib_core_init().
    
    Fixes: 03db3a2d81e6 ("IB/core: Add RoCE GID table management")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221025024146.109137-1-chenzhongjin@huawei.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f555b1584fc2d5d16ee3c4d9438e93ac7c502c7
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Wed Oct 26 10:03:21 2022 +0800

    net: dsa: Fix possible memory leaks in dsa_loop_init()
    
    [ Upstream commit 633efc8b3dc96f56f5a57f2a49764853a2fa3f50 ]
    
    kmemleak reported memory leaks in dsa_loop_init():
    
    kmemleak: 12 new suspected memory leaks
    
    unreferenced object 0xffff8880138ce000 (size 2048):
      comm "modprobe", pid 390, jiffies 4295040478 (age 238.976s)
      backtrace:
        [<000000006a94f1d5>] kmalloc_trace+0x26/0x60
        [<00000000a9c44622>] phy_device_create+0x5d/0x970
        [<00000000d0ee2afc>] get_phy_device+0xf3/0x2b0
        [<00000000dca0c71f>] __fixed_phy_register.part.0+0x92/0x4e0
        [<000000008a834798>] fixed_phy_register+0x84/0xb0
        [<0000000055223fcb>] dsa_loop_init+0xa9/0x116 [dsa_loop]
        ...
    
    There are two reasons for memleak in dsa_loop_init().
    
    First, fixed_phy_register() create and register phy_device:
    
    fixed_phy_register()
      get_phy_device()
        phy_device_create() # freed by phy_device_free()
      phy_device_register() # freed by phy_device_remove()
    
    But fixed_phy_unregister() only calls phy_device_remove().
    So the memory allocated in phy_device_create() is leaked.
    
    Second, when mdio_driver_register() fail in dsa_loop_init(),
    it just returns and there is no cleanup for phydevs.
    
    Fix the problems by catching the error of mdio_driver_register()
    in dsa_loop_init(), then calling both fixed_phy_unregister() and
    phy_device_free() to release phydevs.
    Also add a function for phydevs cleanup to avoid duplacate.
    
    Fixes: 98cd1552ea27 ("net: dsa: Mock-up driver")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24641993a7dce6b1628645f4e1d97ca06c9f765d
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Thu Oct 20 11:20:54 2022 +0800

    nfs4: Fix kmemleak when allocate slot failed
    
    [ Upstream commit 7e8436728e22181c3f12a5dbabd35ed3a8b8c593 ]
    
    If one of the slot allocate failed, should cleanup all the other
    allocated slots, otherwise, the allocated slots will leak:
    
      unreferenced object 0xffff8881115aa100 (size 64):
        comm ""mount.nfs"", pid 679, jiffies 4294744957 (age 115.037s)
        hex dump (first 32 bytes):
          00 cc 19 73 81 88 ff ff 00 a0 5a 11 81 88 ff ff  ...s......Z.....
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<000000007a4c434a>] nfs4_find_or_create_slot+0x8e/0x130
          [<000000005472a39c>] nfs4_realloc_slot_table+0x23f/0x270
          [<00000000cd8ca0eb>] nfs40_init_client+0x4a/0x90
          [<00000000128486db>] nfs4_init_client+0xce/0x270
          [<000000008d2cacad>] nfs4_set_client+0x1a2/0x2b0
          [<000000000e593b52>] nfs4_create_server+0x300/0x5f0
          [<00000000e4425dd2>] nfs4_try_get_tree+0x65/0x110
          [<00000000d3a6176f>] vfs_get_tree+0x41/0xf0
          [<0000000016b5ad4c>] path_mount+0x9b3/0xdd0
          [<00000000494cae71>] __x64_sys_mount+0x190/0x1d0
          [<000000005d56bdec>] do_syscall_64+0x35/0x80
          [<00000000687c9ae4>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Fixes: abf79bb341bf ("NFS: Add a slot table to struct nfs_client for NFSv4.0 transport blocking")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0797c85433cc15d216cbf8f93ff6d352b3c30eb9
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Thu Oct 13 11:58:01 2022 -0400

    NFSv4.2: Fixup CLONE dest file size for zero-length count
    
    [ Upstream commit 038efb6348ce96228f6828354cb809c22a661681 ]
    
    When holding a delegation, the NFS client optimizes away setting the
    attributes of a file from the GETATTR in the compound after CLONE, and for
    a zero-length CLONE we will end up setting the inode's size to zero in
    nfs42_copy_dest_done().  Handle this case by computing the resulting count
    from the server's reported size after CLONE's GETATTR.
    
    Suggested-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Fixes: 94d202d5ca39 ("NFSv42: Copy offload should update the file size when appropriate")
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d59722d088a9d86ce6d9d39979e5d1d669d249f7
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Thu Oct 20 11:42:17 2022 +0800

    SUNRPC: Fix null-ptr-deref when xps sysfs alloc failed
    
    [ Upstream commit cbdeaee94a415800c65a8c3fa04d9664a8b8fb3a ]
    
    There is a null-ptr-deref when xps sysfs alloc failed:
      BUG: KASAN: null-ptr-deref in sysfs_do_create_link_sd+0x40/0xd0
      Read of size 8 at addr 0000000000000030 by task gssproxy/457
    
      CPU: 5 PID: 457 Comm: gssproxy Not tainted 6.0.0-09040-g02357b27ee03 #9
      Call Trace:
       <TASK>
       dump_stack_lvl+0x34/0x44
       kasan_report+0xa3/0x120
       sysfs_do_create_link_sd+0x40/0xd0
       rpc_sysfs_client_setup+0x161/0x1b0
       rpc_new_client+0x3fc/0x6e0
       rpc_create_xprt+0x71/0x220
       rpc_create+0x1d4/0x350
       gssp_rpc_create+0xc3/0x160
       set_gssp_clnt+0xbc/0x140
       write_gssp+0x116/0x1a0
       proc_reg_write+0xd6/0x130
       vfs_write+0x177/0x690
       ksys_write+0xb9/0x150
       do_syscall_64+0x35/0x80
       entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    When the xprt_switch sysfs alloc failed, should not add xprt and
    switch sysfs to it, otherwise, maybe null-ptr-deref; also initialize
    the 'xps_sysfs' to NULL to avoid oops when destroy it.
    
    Fixes: 2a338a543163 ("sunrpc: add a symlink from rpc-client directory to the xprt_switch")
    Fixes: d408ebe04ac5 ("sunrpc: add add sysfs directory per xprt under each xprt_switch")
    Fixes: baea99445dd4 ("sunrpc: add xprt_switch direcotry to sunrpc's sysfs")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dea7ef05deea3e13eaf82e0cabbe73a29ffb30b6
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 16 14:44:33 2022 -0400

    NFSv4.1: We must always send RECLAIM_COMPLETE after a reboot
    
    [ Upstream commit e59679f2b7e522ecad99974e5636291ffd47c184 ]
    
    Currently, we are only guaranteed to send RECLAIM_COMPLETE if we have
    open state to recover. Fix the client to always send RECLAIM_COMPLETE
    after setting up the lease.
    
    Fixes: fce5c838e133 ("nfs41: RECLAIM_COMPLETE functionality")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b1c2458dec1c43a7828e071cb6d53db5ae48d79
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 16 14:44:32 2022 -0400

    NFSv4.1: Handle RECLAIM_COMPLETE trunking errors
    
    [ Upstream commit 5d917cba3201e5c25059df96c29252fd99c4f6a7 ]
    
    If RECLAIM_COMPLETE sets the NFS4CLNT_BIND_CONN_TO_SESSION flag, then we
    need to loop back in order to handle it.
    
    Fixes: 0048fdd06614 ("NFSv4.1: RECLAIM_COMPLETE must handle NFS4ERR_CONN_NOT_BOUND_TO_SESSION")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ec017e300898d5d02555f3006594967f3c139c6
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 16 14:44:31 2022 -0400

    NFSv4: Fix a potential state reclaim deadlock
    
    [ Upstream commit 1ba04394e028ea8b45d92685cc0d6ab582cf7647 ]
    
    If the server reboots while we are engaged in a delegation return, and
    there is a pNFS layout with return-on-close set, then the current code
    can end up deadlocking in pnfs_roc() when nfs_inode_set_delegation()
    tries to return the old delegation.
    Now that delegreturn actually uses its own copy of the stateid, it
    should be safe to just always update the delegation stateid in place.
    
    Fixes: 078000d02d57 ("pNFS: We want return-on-close to complete when evicting the inode")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3e53c5af56325e36b9df5f5d3372dc2e0b51bea
Author: Yangyang Li <liyangyang20@huawei.com>
Date:   Mon Oct 24 16:38:13 2022 +0800

    RDMA/hns: Disable local invalidate operation
    
    [ Upstream commit 9e272ed69ad6f6952fafd0599d6993575512408e ]
    
    When function reset and local invalidate are mixed, HNS RoCEE may hang.
    Before introducing the cause of the problem, two hardware internal
    concepts need to be introduced:
    
        1. Execution queue: The queue of hardware execution instructions,
        function reset and local invalidate are queued for execution in this
        queue.
    
        2.Local queue: A queue that stores local operation instructions. The
        instructions in the local queue will be sent to the execution queue
        for execution. The instructions in the local queue will not be removed
        until the execution is completed.
    
    The reason for the problem is as follows:
    
        1. There is a function reset instruction in the execution queue, which
        is currently being executed. A necessary condition for the successful
        execution of function reset is: the hardware pipeline needs to empty
        the instructions that were not completed before;
    
        2. A local invalidate instruction at the head of the local queue is
        sent to the execution queue. Now there are two instructions in the
        execution queue, the first is the function reset instruction, and the
        second is the local invalidate instruction, which will be executed in
        se quence;
    
        3. The user has issued many local invalidate operations, causing the
        local queue to be filled up.
    
        4. The user still has a new local operation command and is queuing to
        enter the local queue. But the local queue is full and cannot receive
        new instructions, this instruction is temporarily stored at the
        hardware pipeline.
    
        5. The function reset has been waiting for the instruction before the
        hardware pipeline stage is drained. The hardware pipeline stage also
        caches a local invalidate instruction, so the function reset cannot be
        completed, and the instructions after it cannot be executed.
    
    These factors together cause the execution logic deadlock of the hardware,
    and the consequence is that RoCEE will not have any response.  Considering
    that the local operation command may potentially cause RoCEE to hang, this
    feature is no longer supported.
    
    Fixes: e93df0108579 ("RDMA/hns: Support local invalidate for hip08 in kernel space")
    Signed-off-by: Yangyang Li <liyangyang20@huawei.com>
    Signed-off-by: Wenpeng Liang <liangwenpeng@huawei.com>
    Signed-off-by: Haoyue Xu <xuhaoyue1@hisilicon.com>
    Link: https://lore.kernel.org/r/20221024083814.1089722-2-xuhaoyue1@hisilicon.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85ab79ac94135a1db4c88d281a23766563c35be2
Author: Wenpeng Liang <liangwenpeng@huawei.com>
Date:   Thu May 12 16:00:11 2022 +0800

    RDMA/hns: Use hr_reg_xxx() instead of remaining roce_set_xxx()
    
    [ Upstream commit 82600b2d3cd57428bdb03c66ae67708d3c8f7281 ]
    
    To reduce the code size and make the code clearer, replace all
    roce_set_xxx() with hr_reg_xxx() to write the data fields.
    
    Link: https://lore.kernel.org/r/20220512080012.38728-2-liangwenpeng@huawei.com
    Signed-off-by: Wenpeng Liang <liangwenpeng@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Stable-dep-of: 9e272ed69ad6 ("RDMA/hns: Disable local invalidate operation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be16cc7abdae599dc3265b613bae38ed2f38c421
Author: Xinhao Liu <liuxinhao5@hisilicon.com>
Date:   Fri Nov 19 22:02:08 2021 +0800

    RDMA/hns: Remove magic number
    
    [ Upstream commit 9c3631d17054a8766dbdc1abf8d29306260e7c7f ]
    
    Don't use unintelligible constants.
    
    Link: https://lore.kernel.org/r/20211119140208.40416-10-liangwenpeng@huawei.com
    Signed-off-by: Xinhao Liu <liuxinhao5@hisilicon.com>
    Signed-off-by: Wenpeng Liang <liangwenpeng@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Stable-dep-of: 9e272ed69ad6 ("RDMA/hns: Disable local invalidate operation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba95409d6b580501ff6d78efd00064f7df669926
Author: Dean Luick <dean.luick@cornelisnetworks.com>
Date:   Tue Oct 18 10:27:50 2022 -0400

    IB/hfi1: Correctly move list in sc_disable()
    
    [ Upstream commit 1afac08b39d85437187bb2a92d89a741b1078f55 ]
    
    Commit 13bac861952a ("IB/hfi1: Fix abba locking issue with sc_disable()")
    incorrectly tries to move a list from one list head to another.  The
    result is a kernel crash.
    
    The crash is triggered when a link goes down and there are waiters for a
    send to complete.  The following signature is seen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000030
      [...]
      Call Trace:
       sc_disable+0x1ba/0x240 [hfi1]
       pio_freeze+0x3d/0x60 [hfi1]
       handle_freeze+0x27/0x1b0 [hfi1]
       process_one_work+0x1b0/0x380
       ? process_one_work+0x380/0x380
       worker_thread+0x30/0x360
       ? process_one_work+0x380/0x380
       kthread+0xd7/0x100
       ? kthread_complete_and_exit+0x20/0x20
       ret_from_fork+0x1f/0x30
    
    The fix is to use the correct call to move the list.
    
    Fixes: 13bac861952a ("IB/hfi1: Fix abba locking issue with sc_disable()")
    Signed-off-by: Dean Luick <dean.luick@cornelisnetworks.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Link: https://lore.kernel.org/r/166610327042.674422.6146908799669288976.stgit@awfm-02.cornelisnetworks.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 484d9690370e03f542f1a6aad9eab466ef5d6a89
Author: Håkon Bugge <haakon.bugge@oracle.com>
Date:   Wed Oct 12 16:15:42 2022 +0200

    RDMA/cma: Use output interface for net_dev check
    
    [ Upstream commit eb83f502adb036cd56c27e13b9ca3b2aabfa790b ]
    
    Commit 27cfde795a96 ("RDMA/cma: Fix arguments order in net device
    validation") swapped the src and dst addresses in the call to
    validate_net_dev().
    
    As a consequence, the test in validate_ipv4_net_dev() to see if the
    net_dev is the right one, is incorrect for port 1 <-> 2 communication when
    the ports are on the same sub-net. This is fixed by denoting the
    flowi4_oif as the device instead of the incoming one.
    
    The bug has not been observed using IPv6 addresses.
    
    Fixes: 27cfde795a96 ("RDMA/cma: Fix arguments order in net device validation")
    Signed-off-by: Håkon Bugge <haakon.bugge@oracle.com>
    Link: https://lore.kernel.org/r/20221012141542.16925-1-haakon.bugge@oracle.com
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7d9de8a0d332bee0fffd96b46e1417eeaba306f
Author: Alexander Graf <graf@amazon.com>
Date:   Mon Oct 17 20:45:41 2022 +0200

    KVM: x86: Add compat handler for KVM_X86_SET_MSR_FILTER
    
    [ Upstream commit 1739c7017fb1d759965dcbab925ff5980a5318cb ]
    
    The KVM_X86_SET_MSR_FILTER ioctls contains a pointer in the passed in
    struct which means it has a different struct size depending on whether
    it gets called from 32bit or 64bit code.
    
    This patch introduces compat code that converts from the 32bit struct to
    its 64bit counterpart which then gets used going forward internally.
    With this applied, 32bit QEMU can successfully set MSR bitmaps when
    running on 64bit kernels.
    
    Reported-by: Andrew Randrianasulu <randrianasulu@gmail.com>
    Fixes: 1a155254ff937 ("KVM: x86: Introduce MSR filtering")
    Signed-off-by: Alexander Graf <graf@amazon.com>
    Message-Id: <20221017184541.2658-4-graf@amazon.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7b66f13ac094e605aefd3e4a822da2fdd3d71f5
Author: Alexander Graf <graf@amazon.com>
Date:   Mon Oct 17 20:45:40 2022 +0200

    KVM: x86: Copy filter arg outside kvm_vm_ioctl_set_msr_filter()
    
    [ Upstream commit 2e3272bc1790825c43d2c39690bf2836b81c6d36 ]
    
    In the next patch we want to introduce a second caller to
    set_msr_filter() which constructs its own filter list on the stack.
    Refactor the original function so it takes it as argument instead of
    reading it through copy_from_user().
    
    Signed-off-by: Alexander Graf <graf@amazon.com>
    Message-Id: <20221017184541.2658-3-graf@amazon.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c60fa7f55182b6064b4482022c7b480ce728221
Author: Aaron Lewis <aaronlewis@google.com>
Date:   Thu Jul 14 16:13:15 2022 +0000

    KVM: x86: Protect the unused bits in MSR exiting flags
    
    [ Upstream commit cf5029d5dd7cb0aaa53250fa9e389abd231606b3 ]
    
    The flags for KVM_CAP_X86_USER_SPACE_MSR and KVM_X86_SET_MSR_FILTER
    have no protection for their unused bits.  Without protection, future
    development for these features will be difficult.  Add the protection
    needed to make it possible to extend these features in the future.
    
    Signed-off-by: Aaron Lewis <aaronlewis@google.com>
    Message-Id: <20220714161314.1715227-1-aaronlewis@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 2e3272bc1790 ("KVM: x86: Copy filter arg outside kvm_vm_ioctl_set_msr_filter()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad8e4868dd167fbea4bfa98750ce44395143c4ec
Author: Roderick Colenbrander <roderick@gaikai.com>
Date:   Mon Oct 10 14:23:12 2022 -0700

    HID: playstation: add initial DualSense Edge controller support
    
    [ Upstream commit b8a968efab301743fd659b5649c5d7d3e30e63a6 ]
    
    Provide initial support for the DualSense Edge controller. The brings
    support up to the level of the original DualSense, but won't yet provide
    support for new features (e.g. reprogrammable buttons).
    
    Signed-off-by: Roderick Colenbrander <roderick.colenbrander@sony.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Link: https://lore.kernel.org/r/20221010212313.78275-3-roderick.colenbrander@sony.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a44ae4afaa5318baed3c6e2959f24454e0ae4ff
Author: Baolin Wang <baolin.wang@linux.alibaba.com>
Date:   Thu Sep 1 18:41:31 2022 +0800

    mm/hugetlb: fix races when looking up a CONT-PTE/PMD size hugetlb page
    
    [ Upstream commit fac35ba763ed07ba93154c95ffc0c4a55023707f ]
    
    On some architectures (like ARM64), it can support CONT-PTE/PMD size
    hugetlb, which means it can support not only PMD/PUD size hugetlb (2M and
    1G), but also CONT-PTE/PMD size(64K and 32M) if a 4K page size specified.
    
    So when looking up a CONT-PTE size hugetlb page by follow_page(), it will
    use pte_offset_map_lock() to get the pte entry lock for the CONT-PTE size
    hugetlb in follow_page_pte().  However this pte entry lock is incorrect
    for the CONT-PTE size hugetlb, since we should use huge_pte_lock() to get
    the correct lock, which is mm->page_table_lock.
    
    That means the pte entry of the CONT-PTE size hugetlb under current pte
    lock is unstable in follow_page_pte(), we can continue to migrate or
    poison the pte entry of the CONT-PTE size hugetlb, which can cause some
    potential race issues, even though they are under the 'pte lock'.
    
    For example, suppose thread A is trying to look up a CONT-PTE size hugetlb
    page by move_pages() syscall under the lock, however antoher thread B can
    migrate the CONT-PTE hugetlb page at the same time, which will cause
    thread A to get an incorrect page, if thread A also wants to do page
    migration, then data inconsistency error occurs.
    
    Moreover we have the same issue for CONT-PMD size hugetlb in
    follow_huge_pmd().
    
    To fix above issues, rename the follow_huge_pmd() as follow_huge_pmd_pte()
    to handle PMD and PTE level size hugetlb, which uses huge_pte_lock() to
    get the correct pte entry lock to make the pte entry stable.
    
    Mike said:
    
    Support for CONT_PMD/_PTE was added with bb9dd3df8ee9 ("arm64: hugetlb:
    refactor find_num_contig()").  Patch series "Support for contiguous pte
    hugepages", v4.  However, I do not believe these code paths were
    executed until migration support was added with 5480280d3f2d ("arm64/mm:
    enable HugeTLB migration for contiguous bit HugeTLB pages") I would go
    with 5480280d3f2d for the Fixes: targe.
    
    Link: https://lkml.kernel.org/r/635f43bdd85ac2615a58405da82b4d33c6e5eb05.1662017562.git.baolin.wang@linux.alibaba.com
    Fixes: 5480280d3f2d ("arm64/mm: enable HugeTLB migration for contiguous bit HugeTLB pages")
    Signed-off-by: Baolin Wang <baolin.wang@linux.alibaba.com>
    Suggested-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8576d7edeaa5553d95e9205ae76d894e087e3aed
Author: Shirish S <shirish.s@amd.com>
Date:   Fri Oct 7 20:31:49 2022 +0530

    drm/amd/display: explicitly disable psr_feature_enable appropriately
    
    [ Upstream commit 6094b9136ca9038b61e9c4b5d25cd5512ce50b34 ]
    
    [Why]
    If psr_feature_enable is set to true by default, it continues to be enabled
    for non capable links.
    
    [How]
    explicitly disable the feature on links that are not capable of the same.
    
    Fixes: 8c322309e48e9 ("drm/amd/display: Enable PSR")
    Signed-off-by: Shirish S <shirish.s@amd.com>
    Reviewed-by: Leo Li <sunpeng.li@amd.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.15+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 058b3a11f7487f3642ee48f5b47549afe5fea13c
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Aug 30 23:15:55 2022 +0000

    KVM: x86: Treat #DBs from the emulator as fault-like (code and DR7.GD=1)
    
    [ Upstream commit 5623f751bd9c438ed12840e086f33c4646440d19 ]
    
    Add a dedicated "exception type" for #DBs, as #DBs can be fault-like or
    trap-like depending the sub-type of #DB, and effectively defer the
    decision of what to do with the #DB to the caller.
    
    For the emulator's two calls to exception_type(), treat the #DB as
    fault-like, as the emulator handles only code breakpoint and general
    detect #DBs, both of which are fault-like.
    
    For event injection, which uses exception_type() to determine whether to
    set EFLAGS.RF=1 on the stack, keep the current behavior of not setting
    RF=1 for #DBs.  Intel and AMD explicitly state RF isn't set on code #DBs,
    so exempting by failing the "== EXCPT_FAULT" check is correct.  The only
    other fault-like #DB is General Detect, and despite Intel and AMD both
    strongly implying (through omission) that General Detect #DBs should set
    RF=1, hardware (multiple generations of both Intel and AMD), in fact does
    not.  Through insider knowledge, extreme foresight, sheer dumb luck, or
    some combination thereof, KVM correctly handled RF for General Detect #DBs.
    
    Fixes: 38827dbd3fb8 ("KVM: x86: Do not update EFLAGS on faulting emulation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Link: https://lore.kernel.org/r/20220830231614.3580124-9-seanjc@google.com
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ee32892c767127a63688aabfff73ae021ffa905
Author: Sean Christopherson <seanjc@google.com>
Date:   Mon May 2 00:07:31 2022 +0200

    KVM: x86: Trace re-injected exceptions
    
    [ Upstream commit a61d7c5432ac5a953bbcec17af031661c2bd201d ]
    
    Trace exceptions that are re-injected, not just those that KVM is
    injecting for the first time.  Debugging re-injection bugs is painful
    enough as is, not having visibility into what KVM is doing only makes
    things worse.
    
    Delay propagating pending=>injected in the non-reinjection path so that
    the tracing can properly identify reinjected exceptions.
    
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Maciej S. Szmigiero <maciej.szmigiero@oracle.com>
    Message-Id: <25470690a38b4d2b32b6204875dd35676c65c9f2.1651440202.git.maciej.szmigiero@oracle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 5623f751bd9c ("KVM: x86: Treat #DBs from the emulator as fault-like (code and DR7.GD=1)")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c9c1306d6bd5bac51ad24079d8c85fc4b960652
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Nov 5 09:46:40 2022 -0400

    serial: ar933x: Deassert Transmit Enable on ->rs485_config()
    
    commit 3a939433ddc1bab98be028903aaa286e5e7461d7 upstream.
    
    The ar933x_uart driver neglects to deassert Transmit Enable when
    ->rs485_config() is invoked.  Fix it.
    
    Fixes: 9be1064fe524 ("serial: ar933x_uart: add RS485 support")
    Cc: stable@vger.kernel.org # v5.7+
    Cc: Daniel Golle <daniel@makrotopia.org>
    Reviewed-by: Ilpo JÃ€rvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21d65b35169112af9b6f873c8eeab972e60107c2
Author: James Smart <jsmart2021@gmail.com>
Date:   Thu Aug 18 18:17:32 2022 -0700

    scsi: lpfc: Rework MIB Rx Monitor debug info logic
    
    [ Upstream commit bd269188ea94e40ab002cad7b0df8f12b8f0de54 ]
    
    The kernel test robot reported the following sparse warning:
    
    arch/arm64/include/asm/cmpxchg.h:88:1: sparse: sparse: cast truncates
       bits from constant value (369 becomes 69)
    
    On arm64, atomic_xchg only works on 8-bit byte fields.  Thus, the macro
    usage of LPFC_RXMONITOR_TABLE_IN_USE can be unintentionally truncated
    leading to all logic involving the LPFC_RXMONITOR_TABLE_IN_USE macro to not
    work properly.
    
    Replace the Rx Table atomic_t indexing logic with a new
    lpfc_rx_info_monitor structure that holds a circular ring buffer.  For
    locking semantics, a spinlock_t is used.
    
    Link: https://lore.kernel.org/r/20220819011736.14141-4-jsmart2021@gmail.com
    Fixes: 17b27ac59224 ("scsi: lpfc: Add rx monitoring statistics")
    Cc: <stable@vger.kernel.org> # v5.15+
    Co-developed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d70705e131d66c551e0c4506d42926adddcaaa0d
Author: James Smart <jsmart2021@gmail.com>
Date:   Fri Dec 3 16:26:41 2021 -0800

    scsi: lpfc: Adjust CMF total bytes and rxmonitor
    
    [ Upstream commit a6269f837045acb02904f31f05acde847ec8f8a7 ]
    
    Calculate any extra bytes needed to account for timer accuracy. If we are
    less than LPFC_CMF_INTERVAL, then calculate the adjustment needed for total
    to reflect a full LPFC_CMF_INTERVAL.
    
    Add additional info to rxmonitor, and adjust some log formatting.
    
    Link: https://lore.kernel.org/r/20211204002644.116455-7-jsmart2021@gmail.com
    Co-developed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: bd269188ea94 ("scsi: lpfc: Rework MIB Rx Monitor debug info logic")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ebc6e8ad13b472356f8867ac0b249268bad9ceb
Author: James Smart <jsmart2021@gmail.com>
Date:   Fri Sep 10 16:31:55 2021 -0700

    scsi: lpfc: Adjust bytes received vales during cmf timer interval
    
    [ Upstream commit d5ac69b332d8859d1f8bd5d4dee31f3267f6b0d2 ]
    
    The newly added congestion mgmt framework is seeing unexpected congestion
    FPINs and signals.  In analysis, time values given to the adapter are not
    at hard time intervals. Thus the drift vs the transfer count seen is
    affecting how the framework manages things.
    
    Adjust counters to cover the drift.
    
    Link: https://lore.kernel.org/r/20210910233159.115896-11-jsmart2021@gmail.com
    Co-developed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: bd269188ea94 ("scsi: lpfc: Rework MIB Rx Monitor debug info logic")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

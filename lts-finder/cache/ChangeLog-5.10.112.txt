commit 1052f9bce62982023737a95b7ff1ad26a5149af6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 20 09:23:32 2022 +0200

    Linux 5.10.112
    
    Link: https://lore.kernel.org/r/20220418121145.140991388@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c62d3bf14100a88d30888b925fcb61a8c11c012
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:33 2022 +0300

    ax25: Fix UAF bugs in ax25 timers
    
    commit 82e31755e55fbcea6a9dfaae5fe4860ade17cbc0 upstream.
    
    There are race conditions that may lead to UAF bugs in
    ax25_heartbeat_expiry(), ax25_t1timer_expiry(), ax25_t2timer_expiry(),
    ax25_t3timer_expiry() and ax25_idletimer_expiry(), when we call
    ax25_release() to deallocate ax25_dev.
    
    One of the UAF bugs caused by ax25_release() is shown below:
    
          (Thread 1)                    |      (Thread 2)
    ax25_dev_device_up() //(1)          |
    ...                                 | ax25_kill_by_device()
    ax25_bind()          //(2)          |
    ax25_connect()                      | ...
     ax25_std_establish_data_link()     |
      ax25_start_t1timer()              | ax25_dev_device_down() //(3)
       mod_timer(&ax25->t1timer,..)     |
                                        | ax25_release()
       (wait a time)                    |  ...
                                        |  ax25_dev_put(ax25_dev) //(4)FREE
       ax25_t1timer_expiry()            |
        ax25->ax25_dev->values[..] //USE|  ...
         ...                            |
    
    We increase the refcount of ax25_dev in position (1) and (2), and
    decrease the refcount of ax25_dev in position (3) and (4).
    The ax25_dev will be freed in position (4) and be used in
    ax25_t1timer_expiry().
    
    The fail log is shown below:
    ==============================================================
    
    [  106.116942] BUG: KASAN: use-after-free in ax25_t1timer_expiry+0x1c/0x60
    [  106.116942] Read of size 8 at addr ffff88800bda9028 by task swapper/0/0
    [  106.116942] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.17.0-06123-g0905eec574
    [  106.116942] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-14
    [  106.116942] Call Trace:
    ...
    [  106.116942]  ax25_t1timer_expiry+0x1c/0x60
    [  106.116942]  call_timer_fn+0x122/0x3d0
    [  106.116942]  __run_timers.part.0+0x3f6/0x520
    [  106.116942]  run_timer_softirq+0x4f/0xb0
    [  106.116942]  __do_softirq+0x1c2/0x651
    ...
    
    This patch adds del_timer_sync() in ax25_release(), which could ensure
    that all timers stop before we deallocate ax25_dev.
    
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    [OP: backport to 5.10: adjust context]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f934fa478dd17411bc6884153dc824ff9e7505d8
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:32 2022 +0300

    ax25: Fix NULL pointer dereferences in ax25 timers
    
    commit fc6d01ff9ef03b66d4a3a23b46fc3c3d8cf92009 upstream.
    
    The previous commit 7ec02f5ac8a5 ("ax25: fix NPD bug in ax25_disconnect")
    move ax25_disconnect into lock_sock() in order to prevent NPD bugs. But
    there are race conditions that may lead to null pointer dereferences in
    ax25_heartbeat_expiry(), ax25_t1timer_expiry(), ax25_t2timer_expiry(),
    ax25_t3timer_expiry() and ax25_idletimer_expiry(), when we use
    ax25_kill_by_device() to detach the ax25 device.
    
    One of the race conditions that cause null pointer dereferences can be
    shown as below:
    
          (Thread 1)                    |      (Thread 2)
    ax25_connect()                      |
     ax25_std_establish_data_link()     |
      ax25_start_t1timer()              |
       mod_timer(&ax25->t1timer,..)     |
                                        | ax25_kill_by_device()
       (wait a time)                    |  ...
                                        |  s->ax25_dev = NULL; //(1)
       ax25_t1timer_expiry()            |
        ax25->ax25_dev->values[..] //(2)|  ...
         ...                            |
    
    We set null to ax25_cb->ax25_dev in position (1) and dereference
    the null pointer in position (2).
    
    The corresponding fail log is shown below:
    ===============================================================
    BUG: kernel NULL pointer dereference, address: 0000000000000050
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.17.0-rc6-00794-g45690b7d0
    RIP: 0010:ax25_t1timer_expiry+0x12/0x40
    ...
    Call Trace:
     call_timer_fn+0x21/0x120
     __run_timers.part.0+0x1ca/0x250
     run_timer_softirq+0x2c/0x60
     __do_softirq+0xef/0x2f3
     irq_exit_rcu+0xb6/0x100
     sysvec_apic_timer_interrupt+0xa2/0xd0
    ...
    
    This patch moves ax25_disconnect() before s->ax25_dev = NULL
    and uses del_timer_sync() to delete timers in ax25_disconnect().
    If ax25_disconnect() is called by ax25_kill_by_device() or
    ax25->ax25_dev is NULL, the reason in ax25_disconnect() will be
    equal to ENETUNREACH, it will wait all timers to stop before we
    set null to s->ax25_dev in ax25_kill_by_device().
    
    Fixes: 7ec02f5ac8a5 ("ax25: fix NPD bug in ax25_disconnect")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [OP: backport to 5.10: adjust context]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 145ea8d213e8f46667cd904ae79d17f298750f00
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:31 2022 +0300

    ax25: fix NPD bug in ax25_disconnect
    
    commit 7ec02f5ac8a5be5a3f20611731243dc5e1d9ba10 upstream.
    
    The ax25_disconnect() in ax25_kill_by_device() is not
    protected by any locks, thus there is a race condition
    between ax25_disconnect() and ax25_destroy_socket().
    when ax25->sk is assigned as NULL by ax25_destroy_socket(),
    a NULL pointer dereference bug will occur if site (1) or (2)
    dereferences ax25->sk.
    
    ax25_kill_by_device()                | ax25_release()
      ax25_disconnect()                  |   ax25_destroy_socket()
        ...                              |
        if(ax25->sk != NULL)             |     ...
          ...                            |     ax25->sk = NULL;
          bh_lock_sock(ax25->sk); //(1)  |     ...
          ...                            |
          bh_unlock_sock(ax25->sk); //(2)|
    
    This patch moves ax25_disconnect() into lock_sock(), which can
    synchronize with ax25_destroy_socket() in ax25_release().
    
    Fail log:
    ===============================================================
    BUG: kernel NULL pointer dereference, address: 0000000000000088
    ...
    RIP: 0010:_raw_spin_lock+0x7e/0xd0
    ...
    Call Trace:
    ax25_disconnect+0xf6/0x220
    ax25_device_event+0x187/0x250
    raw_notifier_call_chain+0x5e/0x70
    dev_close_many+0x17d/0x230
    rollback_registered_many+0x1f1/0x950
    unregister_netdevice_queue+0x133/0x200
    unregister_netdev+0x13/0x20
    ...
    
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [OP: backport to 5.10: adjust context]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4942c6fea879972a7fee50f7e92e2e10f3fc23e
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:30 2022 +0300

    ax25: fix UAF bug in ax25_send_control()
    
    commit 5352a761308397a0e6250fdc629bb3f615b94747 upstream.
    
    There are UAF bugs in ax25_send_control(), when we call ax25_release()
    to deallocate ax25_dev. The possible race condition is shown below:
    
          (Thread 1)              |     (Thread 2)
    ax25_dev_device_up() //(1)    |
                                  | ax25_kill_by_device()
    ax25_bind()          //(2)    |
    ax25_connect()                | ...
     ax25->state = AX25_STATE_1   |
     ...                          | ax25_dev_device_down() //(3)
    
          (Thread 3)
    ax25_release()                |
     ax25_dev_put()  //(4) FREE   |
     case AX25_STATE_1:           |
      ax25_send_control()         |
       alloc_skb()       //USE    |
    
    The refcount of ax25_dev increases in position (1) and (2), and
    decreases in position (3) and (4). The ax25_dev will be freed
    before dereference sites in ax25_send_control().
    
    The following is part of the report:
    
    [  102.297448] BUG: KASAN: use-after-free in ax25_send_control+0x33/0x210
    [  102.297448] Read of size 8 at addr ffff888009e6e408 by task ax25_close/602
    [  102.297448] Call Trace:
    [  102.303751]  ax25_send_control+0x33/0x210
    [  102.303751]  ax25_release+0x356/0x450
    [  102.305431]  __sock_release+0x6d/0x120
    [  102.305431]  sock_close+0xf/0x20
    [  102.305431]  __fput+0x11f/0x420
    [  102.305431]  task_work_run+0x86/0xd0
    [  102.307130]  get_signal+0x1075/0x1220
    [  102.308253]  arch_do_signal_or_restart+0x1df/0xc00
    [  102.308253]  exit_to_user_mode_prepare+0x150/0x1e0
    [  102.308253]  syscall_exit_to_user_mode+0x19/0x50
    [  102.308253]  do_syscall_64+0x48/0x90
    [  102.308253]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  102.308253] RIP: 0033:0x405ae7
    
    This patch defers the free operation of ax25_dev and net_device after
    all corresponding dereference sites in ax25_release() to avoid UAF.
    
    Fixes: 9fd75b66b8f6 ("ax25: Fix refcount leaks caused by ax25_cb_del()")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    [OP: backport to 5.10: adjust dev_put_track()->dev_put()]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b20a5ab0f5fb175750c6bafd4cf12daccf00c738
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:29 2022 +0300

    ax25: Fix refcount leaks caused by ax25_cb_del()
    
    commit 9fd75b66b8f68498454d685dc4ba13192ae069b0 upstream.
    
    The previous commit d01ffb9eee4a ("ax25: add refcount in ax25_dev to
    avoid UAF bugs") and commit feef318c855a ("ax25: fix UAF bugs of
    net_device caused by rebinding operation") increase the refcounts of
    ax25_dev and net_device in ax25_bind() and decrease the matching refcounts
    in ax25_kill_by_device() in order to prevent UAF bugs, but there are
    reference count leaks.
    
    The root cause of refcount leaks is shown below:
    
         (Thread 1)                      |      (Thread 2)
    ax25_bind()                          |
     ...                                 |
     ax25_addr_ax25dev()                 |
      ax25_dev_hold()   //(1)            |
      ...                                |
     dev_hold_track()   //(2)            |
     ...                                 | ax25_destroy_socket()
                                         |  ax25_cb_del()
                                         |   ...
                                         |   hlist_del_init() //(3)
                                         |
                                         |
         (Thread 3)                      |
    ax25_kill_by_device()                |
     ...                                 |
     ax25_for_each(s, &ax25_list) {      |
      if (s->ax25_dev == ax25_dev) //(4) |
       ...                               |
    
    Firstly, we use ax25_bind() to increase the refcount of ax25_dev in
    position (1) and increase the refcount of net_device in position (2).
    Then, we use ax25_cb_del() invoked by ax25_destroy_socket() to delete
    ax25_cb in hlist in position (3) before calling ax25_kill_by_device().
    Finally, the decrements of refcounts in ax25_kill_by_device() will not
    be executed, because no s->ax25_dev equals to ax25_dev in position (4).
    
    This patch adds decrements of refcounts in ax25_release() and use
    lock_sock() to do synchronization. If refcounts decrease in ax25_release(),
    the decrements of refcounts in ax25_kill_by_device() will not be
    executed and vice versa.
    
    Fixes: d01ffb9eee4a ("ax25: add refcount in ax25_dev to avoid UAF bugs")
    Fixes: 87563a043cef ("ax25: fix reference count leaks of ax25_dev")
    Fixes: feef318c855a ("ax25: fix UAF bugs of net_device caused by rebinding operation")
    Reported-by: Thomas Osterried <thomas@osterried.de>
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [OP: backport to 5.10: adjust dev_put_track()->dev_put()]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57cc15f5fd550316e4104eaf84b90fbc640fd7a5
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:28 2022 +0300

    ax25: fix UAF bugs of net_device caused by rebinding operation
    
    commit feef318c855a361a1eccd880f33e88c460eb63b4 upstream.
    
    The ax25_kill_by_device() will set s->ax25_dev = NULL and
    call ax25_disconnect() to change states of ax25_cb and
    sock, if we call ax25_bind() before ax25_kill_by_device().
    
    However, if we call ax25_bind() again between the window of
    ax25_kill_by_device() and ax25_dev_device_down(), the values
    and states changed by ax25_kill_by_device() will be reassigned.
    
    Finally, ax25_dev_device_down() will deallocate net_device.
    If we dereference net_device in syscall functions such as
    ax25_release(), ax25_sendmsg(), ax25_getsockopt(), ax25_getname()
    and ax25_info_show(), a UAF bug will occur.
    
    One of the possible race conditions is shown below:
    
          (USE)                   |      (FREE)
    ax25_bind()                   |
                                  |  ax25_kill_by_device()
    ax25_bind()                   |
    ax25_connect()                |    ...
                                  |  ax25_dev_device_down()
                                  |    ...
                                  |    dev_put_track(dev, ...) //FREE
    ax25_release()                |    ...
      ax25_send_control()         |
        alloc_skb()      //USE    |
    
    the corresponding fail log is shown below:
    ===============================================================
    BUG: KASAN: use-after-free in ax25_send_control+0x43/0x210
    ...
    Call Trace:
      ...
      ax25_send_control+0x43/0x210
      ax25_release+0x2db/0x3b0
      __sock_release+0x6d/0x120
      sock_close+0xf/0x20
      __fput+0x11f/0x420
      ...
    Allocated by task 1283:
      ...
      __kasan_kmalloc+0x81/0xa0
      alloc_netdev_mqs+0x5a/0x680
      mkiss_open+0x6c/0x380
      tty_ldisc_open+0x55/0x90
      ...
    Freed by task 1969:
      ...
      kfree+0xa3/0x2c0
      device_release+0x54/0xe0
      kobject_put+0xa5/0x120
      tty_ldisc_kill+0x3e/0x80
      ...
    
    In order to fix these UAF bugs caused by rebinding operation,
    this patch adds dev_hold_track() into ax25_bind() and
    corresponding dev_put_track() into ax25_kill_by_device().
    
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [OP: backport to 5.10: adjust dev_put_track()->dev_put() and
    dev_hold_track()->dev_hold()]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ddae8d064412ed868610127561652e90acabeea
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:27 2022 +0300

    ax25: fix reference count leaks of ax25_dev
    
    commit 87563a043cef044fed5db7967a75741cc16ad2b1 upstream.
    
    The previous commit d01ffb9eee4a ("ax25: add refcount in ax25_dev
    to avoid UAF bugs") introduces refcount into ax25_dev, but there
    are reference leak paths in ax25_ctl_ioctl(), ax25_fwd_ioctl(),
    ax25_rt_add(), ax25_rt_del() and ax25_rt_opt().
    
    This patch uses ax25_dev_put() and adjusts the position of
    ax25_addr_ax25dev() to fix reference cout leaks of ax25_dev.
    
    Fixes: d01ffb9eee4a ("ax25: add refcount in ax25_dev to avoid UAF bugs")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20220203150811.42256-1-duoming@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    [OP: backport to 5.10: adjust context]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ea00fc60676c0eebfa8560ec461209d638bca9d
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Apr 15 20:49:26 2022 +0300

    ax25: add refcount in ax25_dev to avoid UAF bugs
    
    commit d01ffb9eee4af165d83b08dd73ebdf9fe94a519b upstream.
    
    If we dereference ax25_dev after we call kfree(ax25_dev) in
    ax25_dev_device_down(), it will lead to concurrency UAF bugs.
    There are eight syscall functions suffer from UAF bugs, include
    ax25_bind(), ax25_release(), ax25_connect(), ax25_ioctl(),
    ax25_getname(), ax25_sendmsg(), ax25_getsockopt() and
    ax25_info_show().
    
    One of the concurrency UAF can be shown as below:
    
      (USE)                       |    (FREE)
                                  |  ax25_device_event
                                  |    ax25_dev_device_down
    ax25_bind                     |    ...
      ...                         |      kfree(ax25_dev)
      ax25_fillin_cb()            |    ...
        ax25_fillin_cb_from_dev() |
      ...                         |
    
    The root cause of UAF bugs is that kfree(ax25_dev) in
    ax25_dev_device_down() is not protected by any locks.
    When ax25_dev, which there are still pointers point to,
    is released, the concurrency UAF bug will happen.
    
    This patch introduces refcount into ax25_dev in order to
    guarantee that there are no pointers point to it when ax25_dev
    is released.
    
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [OP: backport to 5.10: adjusted context]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 361288633bfa0927b936ed3e1f01b605fb239994
Author: Mike Christie <michael.christie@oracle.com>
Date:   Thu Apr 7 19:13:10 2022 -0500

    scsi: iscsi: Fix unbound endpoint error handling
    
    commit 03690d81974535f228e892a14f0d2d44404fe555 upstream.
    
    If a driver raises a connection error before the connection is bound, we
    can leave a cleanup_work queued that can later run and disconnect/stop a
    connection that is logged in. The problem is that drivers can call
    iscsi_conn_error_event for endpoints that are connected but not yet bound
    when something like the network port they are using is brought down.
    iscsi_cleanup_conn_work_fn will check for this and exit early, but if the
    cleanup_work is stuck behind other works, it might not get run until after
    userspace has done ep_disconnect. Because the endpoint is not yet bound
    there was no way for ep_disconnect to flush the work.
    
    The bug of leaving stop_conns queued was added in:
    
    Commit 23d6fefbb3f6 ("scsi: iscsi: Fix in-kernel conn failure handling")
    
    and:
    
    Commit 0ab710458da1 ("scsi: iscsi: Perform connection failure entirely in
    kernel space")
    
    was supposed to fix it, but left this case.
    
    This patch moves the conn state check to before we even queue the work so
    we can avoid queueing.
    
    Link: https://lore.kernel.org/r/20220408001314.5014-7-michael.christie@oracle.com
    Fixes: 0ab710458da1 ("scsi: iscsi: Perform connection failure entirely in kernel space")
    Tested-by: Manish Rangankar <mrangankar@marvell.com>
    Reviewed-by: Lee Duncan <lduncan@@suse.com>
    Reviewed-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 129db30599bc8b4a7cd0f219feb1e0154802e3d2
Author: Mike Christie <michael.christie@oracle.com>
Date:   Thu Apr 7 19:13:08 2022 -0500

    scsi: iscsi: Fix endpoint reuse regression
    
    commit 0aadafb5c34403a7cced1a8d61877048dc059f70 upstream.
    
    This patch fixes a bug where when using iSCSI offload we can free an
    endpoint while userspace still thinks it's active. That then causes the
    endpoint ID to be reused for a new connection's endpoint while userspace
    still thinks the ID is for the original connection. Userspace will then end
    up disconnecting a running connection's endpoint or trying to bind to
    another connection's endpoint.
    
    This bug is a regression added in:
    
    Commit 23d6fefbb3f6 ("scsi: iscsi: Fix in-kernel conn failure handling")
    
    where we added a in kernel ep_disconnect call to fix a bug in:
    
    Commit 0ab710458da1 ("scsi: iscsi: Perform connection failure entirely in
    kernel space")
    
    where we would call stop_conn without having done ep_disconnect. This early
    ep_disconnect call will then free the endpoint and it's ID while userspace
    still thinks the ID is valid.
    
    Fix the early release of the ID by having the in kernel recovery code keep
    a reference to the endpoint until userspace has called into the kernel to
    finish cleaning up the endpoint/connection. It requires the previous commit
    "scsi: iscsi: Release endpoint ID when its freed" which moved the freeing
    of the ID until when the endpoint is released.
    
    Link: https://lore.kernel.org/r/20220408001314.5014-5-michael.christie@oracle.com
    Fixes: 23d6fefbb3f6 ("scsi: iscsi: Fix in-kernel conn failure handling")
    Tested-by: Manish Rangankar <mrangankar@marvell.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26f827e095aba4141ffd684276ef54025de27574
Author: Chao Gao <chao.gao@intel.com>
Date:   Wed Apr 13 08:32:22 2022 +0200

    dma-direct: avoid redundant memory sync for swiotlb
    
    commit 9e02977bfad006af328add9434c8bffa40e053bb upstream.
    
    When we looked into FIO performance with swiotlb enabled in VM, we found
    swiotlb_bounce() is always called one more time than expected for each DMA
    read request.
    
    It turns out that the bounce buffer is copied to original DMA buffer twice
    after the completion of a DMA request (one is done by in
    dma_direct_sync_single_for_cpu(), the other by swiotlb_tbl_unmap_single()).
    But the content in bounce buffer actually doesn't change between the two
    rounds of copy. So, one round of copy is redundant.
    
    Pass DMA_ATTR_SKIP_CPU_SYNC flag to swiotlb_tbl_unmap_single() to
    skip the memory copy in it.
    
    This fix increases FIO 64KB sequential read throughput in a guest with
    swiotlb=force by 5.6%.
    
    Fixes: 55897af63091 ("dma-direct: merge swiotlb_dma_ops into the dma_direct code")
    Reported-by: Wang Zhaoyang1 <zhaoyang1.wang@intel.com>
    Reported-by: Gao Liang <liang.gao@intel.com>
    Signed-off-by: Chao Gao <chao.gao@intel.com>
    Reviewed-by: Kevin Tian <kevin.tian@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a5a4d23e24d39784b643e5db2e4c3a97da4a1ac
Author: Anna-Maria Behnsen <anna-maria@linutronix.de>
Date:   Tue Apr 5 21:17:32 2022 +0200

    timers: Fix warning condition in __run_timers()
    
    commit c54bc0fc84214b203f7a0ebfd1bd308ce2abe920 upstream.
    
    When the timer base is empty, base::next_expiry is set to base::clk +
    NEXT_TIMER_MAX_DELTA and base::next_expiry_recalc is false. When no timer
    is queued until jiffies reaches base::next_expiry value, the warning for
    not finding any expired timer and base::next_expiry_recalc is false in
    __run_timers() triggers.
    
    To prevent triggering the warning in this valid scenario
    base::timers_pending needs to be added to the warning condition.
    
    Fixes: 31cd0e119d50 ("timers: Recalculate next timer interrupt only when necessary")
    Reported-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Anna-Maria Behnsen <anna-maria@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Frederic Weisbecker <frederic@kernel.org>
    Link: https://lore.kernel.org/r/20220405191732.7438-3-anna-maria@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84837f43e56fc2594f07a49399667c467de527a3
Author: Martin Povišer <povik+lin@cutebit.org>
Date:   Tue Mar 29 20:38:17 2022 +0200

    i2c: pasemi: Wait for write xfers to finish
    
    commit bd8963e602c77adc76dbbbfc3417c3cf14fed76b upstream.
    
    Wait for completion of write transfers before returning from the driver.
    At first sight it may seem advantageous to leave write transfers queued
    for the controller to carry out on its own time, but there's a couple of
    issues with it:
    
     * Driver doesn't check for FIFO space.
    
     * The queued writes can complete while the driver is in its I2C read
       transfer path which means it will get confused by the raising of
       XEN (the 'transaction ended' signal). This can cause a spurious
       ENODATA error due to premature reading of the MRXFIFO register.
    
    Adding the wait fixes some unreliability issues with the driver. There's
    some efficiency cost to it (especially with pasemi_smb_waitready doing
    its polling), but that will be alleviated once the driver receives
    interrupt support.
    
    Fixes: beb58aa39e6e ("i2c: PA Semi SMBus driver")
    Signed-off-by: Martin Povišer <povik+lin@cutebit.org>
    Reviewed-by: Sven Peter <sven@svenpeter.dev>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89496d80bf847b49cb1349a7028b8b3c6e595d95
Author: Nadav Amit <namit@vmware.com>
Date:   Sat Mar 19 00:20:15 2022 -0700

    smp: Fix offline cpu check in flush_smp_call_function_queue()
    
    commit 9e949a3886356fe9112c6f6f34a6e23d1d35407f upstream.
    
    The check in flush_smp_call_function_queue() for callbacks that are sent
    to offline CPUs currently checks whether the queue is empty.
    
    However, flush_smp_call_function_queue() has just deleted all the
    callbacks from the queue and moved all the entries into a local list.
    This checks would only be positive if some callbacks were added in the
    short time after llist_del_all() was called. This does not seem to be
    the intention of this check.
    
    Change the check to look at the local list to which the entries were
    moved instead of the queue from which all the callbacks were just
    removed.
    
    Fixes: 8d056c48e4862 ("CPU hotplug, smp: flush any pending IPI callbacks before CPU offline")
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20220319072015.1495036-1-namit@vmware.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd02b2687d66f0a8e716384de4b9a0671331f1dc
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Sun Apr 3 14:38:22 2022 -0400

    dm integrity: fix memory corruption when tag_size is less than digest size
    
    commit 08c1af8f1c13bbf210f1760132f4df24d0ed46d6 upstream.
    
    It is possible to set up dm-integrity in such a way that the
    "tag_size" parameter is less than the actual digest size. In this
    situation, a part of the digest beyond tag_size is ignored.
    
    In this case, dm-integrity would write beyond the end of the
    ic->recalc_tags array and corrupt memory. The corruption happened in
    integrity_recalc->integrity_sector_checksum->crypto_shash_final.
    
    Fix this corruption by increasing the tags array so that it has enough
    padding at the end to accomodate the loop in integrity_recalc() being
    able to write a full digest size for the last member of the tags
    array.
    
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a312ec66a03133d28570f07bc52749ccfef54da
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Dec 23 15:21:41 2021 -0700

    ARM: davinci: da850-evm: Avoid NULL pointer dereference
    
    commit 83a1cde5c74bfb44b49cb2a940d044bb2380f4ea upstream.
    
    With newer versions of GCC, there is a panic in da850_evm_config_emac()
    when booting multi_v5_defconfig in QEMU under the palmetto-bmc machine:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000020
    pgd = (ptrval)
    [00000020] *pgd=00000000
    Internal error: Oops: 5 [#1] PREEMPT ARM
    Modules linked in:
    CPU: 0 PID: 1 Comm: swapper Not tainted 5.15.0 #1
    Hardware name: Generic DT based system
    PC is at da850_evm_config_emac+0x1c/0x120
    LR is at do_one_initcall+0x50/0x1e0
    
    The emac_pdata pointer in soc_info is NULL because davinci_soc_info only
    gets populated on davinci machines but da850_evm_config_emac() is called
    on all machines via device_initcall().
    
    Move the rmii_en assignment below the machine check so that it is only
    dereferenced when running on a supported SoC.
    
    Fixes: bae105879f2f ("davinci: DA850/OMAP-L138 EVM: implement autodetect of RMII PHY")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/YcS4xVWs6bQlQSPC@archlinux-ax161/
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0806f1930562c1522cef061353e3d6a8d78899d0
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Dec 6 09:59:50 2021 -0500

    tick/nohz: Use WARN_ON_ONCE() to prevent console saturation
    
    commit 40e97e42961f8c6cc7bd5fe67cc18417e02d78f1 upstream.
    
    While running some testing on code that happened to allow the variable
    tick_nohz_full_running to get set but with no "possible" NOHZ cores to
    back up that setting, this warning triggered:
    
            if (unlikely(tick_do_timer_cpu == TICK_DO_TIMER_NONE))
                    WARN_ON(tick_nohz_full_running);
    
    The console was overwhemled with an endless stream of one WARN per tick
    per core and there was no way to even see what was going on w/o using a
    serial console to capture it and then trace it back to this.
    
    Change it to WARN_ON_ONCE().
    
    Fixes: 08ae95f4fd3b ("nohz_full: Allow the boot CPU to be nohz_full")
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211206145950.10927-3-paul.gortmaker@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0275c75955d1cdec07bc6d4f6551dbf253c2aaeb
Author: Rei Yamamoto <yamamoto.rei@jp.fujitsu.com>
Date:   Thu Mar 31 09:33:09 2022 +0900

    genirq/affinity: Consider that CPUs on nodes can be unbalanced
    
    commit 08d835dff916bfe8f45acc7b92c7af6c4081c8a7 upstream.
    
    If CPUs on a node are offline at boot time, the number of nodes is
    different when building affinity masks for present cpus and when building
    affinity masks for possible cpus. This causes the following problem:
    
    In the case that the number of vectors is less than the number of nodes
    there are cases where bits of masks for present cpus are overwritten when
    building masks for possible cpus.
    
    Fix this by excluding CPUs, which are not part of the current build mask
    (present/possible).
    
    [ tglx: Massaged changelog and added comment ]
    
    Fixes: b82592199032 ("genirq/affinity: Spread IRQs to all available NUMA nodes")
    Signed-off-by: Rei Yamamoto <yamamoto.rei@jp.fujitsu.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220331003309.10891-1-yamamoto.rei@jp.fujitsu.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fcfe37d170ad81d8a5432f49e76c2b2b2918274
Author: Tomasz Moń <desowin@gmail.com>
Date:   Wed Apr 6 21:49:21 2022 +0200

    drm/amdgpu: Enable gfxoff quirk on MacBook Pro
    
    commit 4593c1b6d159f1e5c35c07a7f125e79e5a864302 upstream.
    
    Enabling gfxoff quirk results in perfectly usable graphical user
    interface on MacBook Pro (15-inch, 2019) with Radeon Pro Vega 20 4 GB.
    
    Without the quirk, X server is completely unusable as every few seconds
    there is gpu reset due to ring gfx timeout.
    
    Signed-off-by: Tomasz Moń <desowin@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68ae52efa132601bf11f5a3f11521846f7d0ea76
Author: Melissa Wen <mwen@igalia.com>
Date:   Tue Mar 29 19:18:35 2022 -0100

    drm/amd/display: don't ignore alpha property on pre-multiplied mode
    
    commit e4f1541caf60fcbe5a59e9d25805c0b5865e546a upstream.
    
    "Pre-multiplied" is the default pixel blend mode for KMS/DRM, as
    documented in supported_modes of drm_plane_create_blend_mode_property():
    https://cgit.freedesktop.org/drm/drm-misc/tree/drivers/gpu/drm/drm_blend.c
    
    In this mode, both 'pixel alpha' and 'plane alpha' participate in the
    calculation, as described by the pixel blend mode formula in KMS/DRM
    documentation:
    
    out.rgb = plane_alpha * fg.rgb +
              (1 - (plane_alpha * fg.alpha)) * bg.rgb
    
    Considering the blend config mechanisms we have in the driver so far,
    the alpha mode that better fits this blend mode is the
    _PER_PIXEL_ALPHA_COMBINED_GLOBAL_GAIN, where the value for global_gain
    is the plane alpha (global_alpha).
    
    With this change, alpha property stops to be ignored. It also addresses
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/1734
    
    v2:
     * keep the 8-bit value for global_alpha_value (Nicholas)
     * correct the logical ordering for combined global gain (Nicholas)
     * apply to dcn10 too (Nicholas)
    
    Signed-off-by: Melissa Wen <mwen@igalia.com>
    Tested-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Tested-by: Simon Ser <contact@emersion.fr>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a263712ba8c9ded25dd9d2d5ced11bcea5b33a3e
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Fri Apr 8 16:03:42 2022 +0200

    ipv6: fix panic when forwarding a pkt with no in6 dev
    
    commit e3fa461d8b0e185b7da8a101fe94dfe6dd500ac0 upstream.
    
    kongweibin reported a kernel panic in ip6_forward() when input interface
    has no in6 dev associated.
    
    The following tc commands were used to reproduce this panic:
    tc qdisc del dev vxlan100 root
    tc qdisc add dev vxlan100 root netem corrupt 5%
    
    CC: stable@vger.kernel.org
    Fixes: ccd27f05ae7b ("ipv6: fix 'disable_policy' for fwd packets")
    Reported-by: kongweibin <kongweibin2@huawei.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 659214603bf26d2699039099cad1bea5b13bcae0
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Apr 11 11:42:03 2022 +0200

    nl80211: correctly check NL80211_ATTR_REG_ALPHA2 size
    
    commit 6624bb34b4eb19f715db9908cca00122748765d7 upstream.
    
    We need this to be at least two bytes, so we can access
    alpha2[0] and alpha2[1]. It may be three in case some
    userspace used NUL-termination since it was NLA_STRING
    (and we also push it out with NUL-termination).
    
    Cc: stable@vger.kernel.org
    Reported-by: Lee Jones <lee.jones@linaro.org>
    Link: https://lore.kernel.org/r/20220411114201.fd4a31f06541.Ie7ff4be2cf348d8cc28ed0d626fc54becf7ea799@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 912797e54c99a98f0722f21313e13a3938bb6dba
Author: Fabio M. De Francesco <fmdefrancesco@gmail.com>
Date:   Sat Apr 9 03:26:55 2022 +0200

    ALSA: pcm: Test for "silence" field in struct "pcm_format_data"
    
    commit 2f7a26abb8241a0208c68d22815aa247c5ddacab upstream.
    
    Syzbot reports "KASAN: null-ptr-deref Write in
    snd_pcm_format_set_silence".[1]
    
    It is due to missing validation of the "silence" field of struct
    "pcm_format_data" in "pcm_formats" array.
    
    Add a test for valid "pat" and, if it is not so, return -EINVAL.
    
    [1] https://lore.kernel.org/lkml/000000000000d188ef05dc2c7279@google.com/
    
    Reported-and-tested-by: syzbot+205eb15961852c2c5974@syzkaller.appspotmail.com
    Signed-off-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220409012655.9399-1-fmdefrancesco@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48d070ca5e7e015b7aa24d355656037863247910
Author: Tao Jin <tao-j@outlook.com>
Date:   Sat Apr 9 18:44:24 2022 -0400

    ALSA: hda/realtek: add quirk for Lenovo Thinkpad X12 speakers
    
    commit 264fb03497ec1c7841bba872571bcd11beed57a7 upstream.
    
    For this specific device on Lenovo Thinkpad X12 tablet, the verbs were
    dumped by qemu running a guest OS that init this codec properly.
    After studying the dump, it turns out that
    the same quirk used by the other Lenovo devices can be reused.
    
    The patch was tested working against the mainline kernel.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tao Jin <tao-j@outlook.com>
    Link: https://lore.kernel.org/r/CO6PR03MB6241CD73310B37858FE64C85E1E89@CO6PR03MB6241.namprd03.prod.outlook.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 163e162471308932c2f57f98a9a5fc25a8991247
Author: Tim Crawford <tcrawford@system76.com>
Date:   Tue Apr 5 12:20:29 2022 -0600

    ALSA: hda/realtek: Add quirk for Clevo PD50PNT
    
    commit 9eb6f5c388060d8cef3c8b616cc31b765e022359 upstream.
    
    Fixes speaker output and headset detection on Clevo PD50PNT.
    
    Signed-off-by: Tim Crawford <tcrawford@system76.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220405182029.27431-1-tcrawford@system76.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e4dd1799883941cd9590415a47d967909c8d2ac
Author: Naohiro Aota <naohiro.aota@wdc.com>
Date:   Tue Mar 29 15:55:58 2022 +0900

    btrfs: mark resumed async balance as writing
    
    commit a690e5f2db4d1dca742ce734aaff9f3112d63764 upstream.
    
    When btrfs balance is interrupted with umount, the background balance
    resumes on the next mount. There is a potential deadlock with FS freezing
    here like as described in commit 26559780b953 ("btrfs: zoned: mark
    relocation as writing"). Mark the process as sb_writing to avoid it.
    
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    CC: stable@vger.kernel.org # 4.9+
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d2eda18f6ffbd9902594469c6e1a055014eb2ac
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Thu Mar 24 06:44:54 2022 -0700

    btrfs: fix root ref counts in error handling in btrfs_get_root_ref
    
    commit 168a2f776b9762f4021421008512dd7ab7474df1 upstream.
    
    In btrfs_get_root_ref(), when btrfs_insert_fs_root() fails,
    btrfs_put_root() can happen for two reasons:
    
    - the root already exists in the tree, in that case it returns the
      reference obtained in btrfs_lookup_fs_root()
    
    - another error so the cleanup is done in the fail label
    
    Calling btrfs_put_root() unconditionally would lead to double decrement
    of the root reference possibly freeing it in the second case.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Fixes: bc44d7c4b2b1 ("btrfs: push btrfs_grab_fs_root into btrfs_get_fs_root")
    CC: stable@vger.kernel.org # 5.10+
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b7ec35253c9d23f3471e8ae6e7a956d86bb2a2c
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Apr 4 22:48:00 2022 +0200

    ath9k: Fix usage of driver-private space in tx_info
    
    commit 5a6b06f5927c940fa44026695779c30b7536474c upstream.
    
    The ieee80211_tx_info_clear_status() helper also clears the rate counts and
    the driver-private part of struct ieee80211_tx_info, so using it breaks
    quite a few other things. So back out of using it, and instead define a
    ath-internal helper that only clears the area between the
    status_driver_data and the rates info. Combined with moving the
    ath_frame_info struct to status_driver_data, this avoids clearing anything
    we shouldn't be, and so we can keep the existing code for handling the rate
    information.
    
    While fixing this I also noticed that the setting of
    tx_info->status.rates[tx_rateindex].count on hardware underrun errors was
    always immediately overridden by the normal setting of the same fields, so
    rearrange the code so that the underrun detection actually takes effect.
    
    The new helper could be generalised to a 'memset_between()' helper, but
    leave it as a driver-internal helper for now since this needs to go to
    stable.
    
    Cc: stable@vger.kernel.org
    Reported-by: Peter Seiderer <ps.report@gmx.net>
    Fixes: 037250f0a45c ("ath9k: Properly clear TX status area before reporting to mac80211")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Reviewed-by: Peter Seiderer <ps.report@gmx.net>
    Tested-by: Peter Seiderer <ps.report@gmx.net>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220404204800.2681133-1-toke@toke.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f65cedae5009ad004dde18e66694615adfc7365
Author: Toke Høiland-Jørgensen <toke@toke.dk>
Date:   Wed Mar 30 18:44:09 2022 +0200

    ath9k: Properly clear TX status area before reporting to mac80211
    
    commit 037250f0a45cf9ecf5b52d4b9ff8eadeb609c800 upstream.
    
    The ath9k driver was not properly clearing the status area in the
    ieee80211_tx_info struct before reporting TX status to mac80211. Instead,
    it was manually filling in fields, which meant that fields introduced later
    were left as-is.
    
    Conveniently, mac80211 actually provides a helper to zero out the status
    area, so use that to make sure we zero everything.
    
    The last commit touching the driver function writing the status information
    seems to have actually been fixing an issue that was also caused by the
    area being uninitialised; but it only added clearing of a single field
    instead of the whole struct. That is now redundant, though, so revert that
    commit and use it as a convenient Fixes tag.
    
    Fixes: cc591d77aba1 ("ath9k: Make sure to zero status.tx_time before reporting TX status")
    Reported-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220330164409.16645-1-toke@toke.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc21ae932656483b07982afcec7e38a5bd6acc0c
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Apr 6 00:28:15 2022 +0200

    gcc-plugins: latent_entropy: use /dev/urandom
    
    commit c40160f2998c897231f8454bf797558d30a20375 upstream.
    
    While the latent entropy plugin mostly doesn't derive entropy from
    get_random_const() for measuring the call graph, when __latent_entropy is
    applied to a constant, then it's initialized statically to output from
    get_random_const(). In that case, this data is derived from a 64-bit
    seed, which means a buffer of 512 bits doesn't really have that amount
    of compile-time entropy.
    
    This patch fixes that shortcoming by just buffering chunks of
    /dev/urandom output and doling it out as requested.
    
    At the same time, it's important that we don't break the use of
    -frandom-seed, for people who want the runtime benefits of the latent
    entropy plugin, while still having compile-time determinism. In that
    case, we detect whether gcc's set_random_seed() has been called by
    making a call to get_random_seed(noinit=true) in the plugin init
    function, which is called after set_random_seed() is called but before
    anything that calls get_random_seed(noinit=false), and seeing if it's
    zero or not. If it's not zero, we're in deterministic mode, and so we
    just generate numbers with a basic xorshift prng.
    
    Note that we don't detect if -frandom-seed is being used using the
    documented local_tick variable, because it's assigned via:
       local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;
    which may well overflow and become -1 on its own, and so isn't
    reliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171
    
    [kees: The 256 byte rnd_buf size was chosen based on average (250),
     median (64), and std deviation (575) bytes of used entropy for a
     defconfig x86_64 build]
    
    Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")
    Cc: stable@vger.kernel.org
    Cc: PaX Team <pageexec@freemail.hu>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c089ffc846c85f200db34ad208338f4f81a6d82d
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 3 19:06:32 2022 +0100

    memory: renesas-rpc-if: fix platform-device leak in error path
    
    commit b452dbf24d7d9a990d70118462925f6ee287d135 upstream.
    
    Make sure to free the flash platform device in the event that
    registration fails during probe.
    
    Fixes: ca7d8b980b67 ("memory: add Renesas RPC-IF driver")
    Cc: stable@vger.kernel.org      # 5.8
    Cc: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20220303180632.3194-1-johan@kernel.org
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 342454231ee5f2c2782f5510cab2e7a968486fef
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Mar 31 22:13:59 2022 +0000

    KVM: x86/mmu: Resolve nx_huge_pages when kvm.ko is loaded
    
    commit 1d0e84806047f38027d7572adb4702ef7c09b317 upstream.
    
    Resolve nx_huge_pages to true/false when kvm.ko is loaded, leaving it as
    -1 is technically undefined behavior when its value is read out by
    param_get_bool(), as boolean values are supposed to be '0' or '1'.
    
    Alternatively, KVM could define a custom getter for the param, but the
    auto value doesn't depend on the vendor module in any way, and printing
    "auto" would be unnecessarily unfriendly to the user.
    
    In addition to fixing the undefined behavior, resolving the auto value
    also fixes the scenario where the auto value resolves to N and no vendor
    module is loaded.  Previously, -1 would result in Y being printed even
    though KVM would ultimately disable the mitigation.
    
    Rename the existing MMU module init/exit helpers to clarify that they're
    invoked with respect to the vendor module, and add comments to document
    why KVM has two separate "module init" flows.
    
      =========================================================================
      UBSAN: invalid-load in kernel/params.c:320:33
      load of value 255 is not a valid value for type '_Bool'
      CPU: 6 PID: 892 Comm: tail Not tainted 5.17.0-rc3+ #799
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      Call Trace:
       <TASK>
       dump_stack_lvl+0x34/0x44
       ubsan_epilogue+0x5/0x40
       __ubsan_handle_load_invalid_value.cold+0x43/0x48
       param_get_bool.cold+0xf/0x14
       param_attr_show+0x55/0x80
       module_attr_show+0x1c/0x30
       sysfs_kf_seq_show+0x93/0xc0
       seq_read_iter+0x11c/0x450
       new_sync_read+0x11b/0x1a0
       vfs_read+0xf0/0x190
       ksys_read+0x5f/0xe0
       do_syscall_64+0x3b/0xc0
       entry_SYSCALL_64_after_hwframe+0x44/0xae
       </TASK>
      =========================================================================
    
    Fixes: b8e8c8303ff2 ("kvm: mmu: ITLB_MULTIHIT mitigation")
    Cc: stable@vger.kernel.org
    Reported-by: Bruno Goncalves <bgoncalv@redhat.com>
    Reported-by: Jan Stancek <jstancek@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20220331221359.3912754-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06c348fde545ec90e25de3e5bc4b814bff70ae9f
Author: Patrick Wang <patrick.wang.shcn@gmail.com>
Date:   Thu Apr 14 19:14:04 2022 -0700

    mm: kmemleak: take a full lowmem check in kmemleak_*_phys()
    
    commit 23c2d497de21f25898fbea70aeb292ab8acc8c94 upstream.
    
    The kmemleak_*_phys() apis do not check the address for lowmem's min
    boundary, while the caller may pass an address below lowmem, which will
    trigger an oops:
    
      # echo scan > /sys/kernel/debug/kmemleak
      Unable to handle kernel paging request at virtual address ff5fffffffe00000
      Oops [#1]
      Modules linked in:
      CPU: 2 PID: 134 Comm: bash Not tainted 5.18.0-rc1-next-20220407 #33
      Hardware name: riscv-virtio,qemu (DT)
      epc : scan_block+0x74/0x15c
       ra : scan_block+0x72/0x15c
      epc : ffffffff801e5806 ra : ffffffff801e5804 sp : ff200000104abc30
       gp : ffffffff815cd4e8 tp : ff60000004cfa340 t0 : 0000000000000200
       t1 : 00aaaaaac23954cc t2 : 00000000000003ff s0 : ff200000104abc90
       s1 : ffffffff81b0ff28 a0 : 0000000000000000 a1 : ff5fffffffe01000
       a2 : ffffffff81b0ff28 a3 : 0000000000000002 a4 : 0000000000000001
       a5 : 0000000000000000 a6 : ff200000104abd7c a7 : 0000000000000005
       s2 : ff5fffffffe00ff9 s3 : ffffffff815cd998 s4 : ffffffff815d0e90
       s5 : ffffffff81b0ff28 s6 : 0000000000000020 s7 : ffffffff815d0eb0
       s8 : ffffffffffffffff s9 : ff5fffffffe00000 s10: ff5fffffffe01000
       s11: 0000000000000022 t3 : 00ffffffaa17db4c t4 : 000000000000000f
       t5 : 0000000000000001 t6 : 0000000000000000
      status: 0000000000000100 badaddr: ff5fffffffe00000 cause: 000000000000000d
        scan_gray_list+0x12e/0x1a6
        kmemleak_scan+0x2aa/0x57e
        kmemleak_write+0x32a/0x40c
        full_proxy_write+0x56/0x82
        vfs_write+0xa6/0x2a6
        ksys_write+0x6c/0xe2
        sys_write+0x22/0x2a
        ret_from_syscall+0x0/0x2
    
    The callers may not quite know the actual address they pass(e.g. from
    devicetree).  So the kmemleak_*_phys() apis should guarantee the address
    they finally use is in lowmem range, so check the address for lowmem's
    min boundary.
    
    Link: https://lkml.kernel.org/r/20220413122925.33856-1-patrick.wang.shcn@gmail.com
    Signed-off-by: Patrick Wang <patrick.wang.shcn@gmail.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20ed94f8181a25212e7404e44958e234f407624b
Author: Minchan Kim <minchan@kernel.org>
Date:   Thu Apr 14 19:13:46 2022 -0700

    mm: fix unexpected zeroed page mapping with zram swap
    
    commit e914d8f00391520ecc4495dd0ca0124538ab7119 upstream.
    
    Two processes under CLONE_VM cloning, user process can be corrupted by
    seeing zeroed page unexpectedly.
    
          CPU A                        CPU B
    
      do_swap_page                do_swap_page
      SWP_SYNCHRONOUS_IO path     SWP_SYNCHRONOUS_IO path
      swap_readpage valid data
        swap_slot_free_notify
          delete zram entry
                                  swap_readpage zeroed(invalid) data
                                  pte_lock
                                  map the *zero data* to userspace
                                  pte_unlock
      pte_lock
      if (!pte_same)
        goto out_nomap;
      pte_unlock
      return and next refault will
      read zeroed data
    
    The swap_slot_free_notify is bogus for CLONE_VM case since it doesn't
    increase the refcount of swap slot at copy_mm so it couldn't catch up
    whether it's safe or not to discard data from backing device.  In the
    case, only the lock it could rely on to synchronize swap slot freeing is
    page table lock.  Thus, this patch gets rid of the swap_slot_free_notify
    function.  With this patch, CPU A will see correct data.
    
          CPU A                        CPU B
    
      do_swap_page                do_swap_page
      SWP_SYNCHRONOUS_IO path     SWP_SYNCHRONOUS_IO path
                                  swap_readpage original data
                                  pte_lock
                                  map the original data
                                  swap_free
                                    swap_range_free
                                      bd_disk->fops->swap_slot_free_notify
      swap_readpage read zeroed data
                                  pte_unlock
      pte_lock
      if (!pte_same)
        goto out_nomap;
      pte_unlock
      return
      on next refault will see mapped data by CPU B
    
    The concern of the patch would increase memory consumption since it
    could keep wasted memory with compressed form in zram as well as
    uncompressed form in address space.  However, most of cases of zram uses
    no readahead and do_swap_page is followed by swap_free so it will free
    the compressed form from in zram quickly.
    
    Link: https://lkml.kernel.org/r/YjTVVxIAsnKAXjTd@google.com
    Fixes: 0bcac06f27d7 ("mm, swap: skip swapcache for swapin of synchronous device")
    Reported-by: Ivan Babrou <ivan@cloudflare.com>
    Tested-by: Ivan Babrou <ivan@cloudflare.com>
    Signed-off-by: Minchan Kim <minchan@kernel.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Cc: Sergey Senozhatsky <senozhatsky@chromium.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: <stable@vger.kernel.org>    [4.14+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 192e507ef894b558f51e12ae87e938a959b7dfb6
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Apr 14 19:13:43 2022 -0700

    mm, page_alloc: fix build_zonerefs_node()
    
    commit e553f62f10d93551eb883eca227ac54d1a4fad84 upstream.
    
    Since commit 6aa303defb74 ("mm, vmscan: only allocate and reclaim from
    zones with pages managed by the buddy allocator") only zones with free
    memory are included in a built zonelist.  This is problematic when e.g.
    all memory of a zone has been ballooned out when zonelists are being
    rebuilt.
    
    The decision whether to rebuild the zonelists when onlining new memory
    is done based on populated_zone() returning 0 for the zone the memory
    will be added to.  The new zone is added to the zonelists only, if it
    has free memory pages (managed_zone() returns a non-zero value) after
    the memory has been onlined.  This implies, that onlining memory will
    always free the added pages to the allocator immediately, but this is
    not true in all cases: when e.g. running as a Xen guest the onlined new
    memory will be added only to the ballooned memory list, it will be freed
    only when the guest is being ballooned up afterwards.
    
    Another problem with using managed_zone() for the decision whether a
    zone is being added to the zonelists is, that a zone with all memory
    used will in fact be removed from all zonelists in case the zonelists
    happen to be rebuilt.
    
    Use populated_zone() when building a zonelist as it has been done before
    that commit.
    
    There was a report that QubesOS (based on Xen) is hitting this problem.
    Xen has switched to use the zone device functionality in kernel 5.9 and
    QubesOS wants to use memory hotplugging for guests in order to be able
    to start a guest with minimal memory and expand it as needed.  This was
    the report leading to the patch.
    
    Link: https://lkml.kernel.org/r/20220407120637.9035-1-jgross@suse.com
    Fixes: 6aa303defb74 ("mm, vmscan: only allocate and reclaim from zones with pages managed by the buddy allocator")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reported-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Reviewed-by: Wei Yang <richard.weiyang@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 000b3921b4d52399865ea398e5f6c999246437f4
Author: Borislav Petkov <bp@suse.de>
Date:   Tue Apr 5 17:15:15 2022 +0200

    perf/imx_ddr: Fix undefined behavior due to shift overflowing the constant
    
    [ Upstream commit d02b4dd84e1a90f7f1444d027c0289bf355b0d5a ]
    
    Fix:
    
      In file included from <command-line>:0:0:
      In function ‘ddr_perf_counter_enable’,
          inlined from ‘ddr_perf_irq_handler’ at drivers/perf/fsl_imx8_ddr_perf.c:651:2:
      ././include/linux/compiler_types.h:352:38: error: call to ‘__compiletime_assert_729’ \
            declared with attribute error: FIELD_PREP: mask is not constant
        _compiletime_assert(condition, msg, __compiletime_assert_, __COUNTER__)
    ...
    
    See https://lore.kernel.org/r/YkwQ6%2BtIH8GQpuct@zn.tnic for the gory
    details as to why it triggers with older gccs only.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Frank Li <Frank.li@nxp.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Pengutronix Kernel Team <kernel@pengutronix.de>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: NXP Linux Team <linux-imx@nxp.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20220405151517.29753-10-bp@alien8.de
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca24c5e8f0ac3d43ec0cff29e1c861be73aff165
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Tue Apr 5 21:22:06 2022 +0800

    drivers: net: slip: fix NPD bug in sl_tx_timeout()
    
    [ Upstream commit ec4eb8a86ade4d22633e1da2a7d85a846b7d1798 ]
    
    When a slip driver is detaching, the slip_close() will act to
    cleanup necessary resources and sl->tty is set to NULL in
    slip_close(). Meanwhile, the packet we transmit is blocked,
    sl_tx_timeout() will be called. Although slip_close() and
    sl_tx_timeout() use sl->lock to synchronize, we don`t judge
    whether sl->tty equals to NULL in sl_tx_timeout() and the
    null pointer dereference bug will happen.
    
       (Thread 1)                 |      (Thread 2)
                                  | slip_close()
                                  |   spin_lock_bh(&sl->lock)
                                  |   ...
    ...                           |   sl->tty = NULL //(1)
    sl_tx_timeout()               |   spin_unlock_bh(&sl->lock)
      spin_lock(&sl->lock);       |
      ...                         |   ...
      tty_chars_in_buffer(sl->tty)|
        if (tty->ops->..) //(2)   |
        ...                       |   synchronize_rcu()
    
    We set NULL to sl->tty in position (1) and dereference sl->tty
    in position (2).
    
    This patch adds check in sl_tx_timeout(). If sl->tty equals to
    NULL, sl_tx_timeout() will goto out.
    
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Link: https://lore.kernel.org/r/20220405132206.55291-1-duoming@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8cf1e4d953d7022704f57aca4e5ccce6cee14ea
Author: Chandrakanth patil <chandrakanth.patil@broadcom.com>
Date:   Thu Mar 24 02:47:11 2022 -0700

    scsi: megaraid_sas: Target with invalid LUN ID is deleted during scan
    
    [ Upstream commit 56495f295d8e021f77d065b890fc0100e3f9f6d8 ]
    
    The megaraid_sas driver supports single LUN for RAID devices. That is LUN
    0. All other LUNs are unsupported. When a device scan on a logical target
    with invalid LUN number is invoked through sysfs, that target ends up
    getting removed.
    
    Add LUN ID validation in the slave destroy function to avoid the target
    deletion.
    
    Link: https://lore.kernel.org/r/20220324094711.48833-1-chandrakanth.patil@broadcom.com
    Signed-off-by: Chandrakanth patil <chandrakanth.patil@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b7ce74b6bc8c7e6ee3cb8b22b8c5e3e27943339
Author: Alexey Galakhov <agalakhov@gmail.com>
Date:   Wed Mar 9 22:25:35 2022 +0100

    scsi: mvsas: Add PCI ID of RocketRaid 2640
    
    [ Upstream commit 5f2bce1e222028dc1c15f130109a17aa654ae6e8 ]
    
    The HighPoint RocketRaid 2640 is a low-cost SAS controller based on Marvell
    chip. The chip in question was already supported by the kernel, just the
    PCI ID of this particular board was missing.
    
    Link: https://lore.kernel.org/r/20220309212535.402987-1-agalakhov@gmail.com
    Signed-off-by: Alexey Galakhov <agalakhov@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b44cd5840577479ee6ed387371dd1d1252ca921
Author: Roman Li <Roman.Li@amd.com>
Date:   Thu Mar 17 19:55:05 2022 -0400

    drm/amd/display: Fix allocate_mst_payload assert on resume
    
    [ Upstream commit f4346fb3edf7720db3f7f5e1cab1f667cd024280 ]
    
    [Why]
    On resume we do link detection for all non-MST connectors.
    MST is handled separately. However the condition for telling
    if connector is on mst branch is not enough for mst hub case.
    Link detection for mst branch link leads to mst topology reset.
    That causes assert in dc_link_allocate_mst_payload()
    
    [How]
    Use link type as indicator for mst link.
    
    Reviewed-by: Wayne Lin <Wayne.Lin@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34ea097fb63d116d857e6c23b97cb94ff02ccf42
Author: Martin Leung <Martin.Leung@amd.com>
Date:   Fri Mar 18 11:12:36 2022 -0400

    drm/amd/display: Revert FEC check in validation
    
    [ Upstream commit b2075fce104b88b789c15ef1ed2b91dc94198e26 ]
    
    why and how:
    causes failure on install on certain machines
    
    Reviewed-by: George Shen <George.Shen@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Martin Leung <Martin.Leung@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa5ee7c4232cc9976c0db483b914519639de75dc
Author: Xiaomeng Tong <xiam0nd.tong@gmail.com>
Date:   Wed Apr 6 11:55:56 2022 +0800

    myri10ge: fix an incorrect free for skb in myri10ge_sw_tso
    
    [ Upstream commit b423e54ba965b4469b48e46fd16941f1e1701697 ]
    
    All remaining skbs should be released when myri10ge_xmit fails to
    transmit a packet. Fix it within another skb_list_walk_safe.
    
    Signed-off-by: Xiaomeng Tong <xiam0nd.tong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d90df6da50c56ad8b1a132e3cf86b6cdf8f507b7
Author: Marcin Kozlowski <marcinguy@gmail.com>
Date:   Wed Apr 6 10:05:37 2022 +0200

    net: usb: aqc111: Fix out-of-bounds accesses in RX fixup
    
    [ Upstream commit afb8e246527536848b9b4025b40e613edf776a9d ]
    
    aqc111_rx_fixup() contains several out-of-bounds accesses that can be
    triggered by a malicious (or defective) USB device, in particular:
    
     - The metadata array (desc_offset..desc_offset+2*pkt_count) can be out of bounds,
       causing OOB reads and (on big-endian systems) OOB endianness flips.
     - A packet can overlap the metadata array, causing a later OOB
       endianness flip to corrupt data used by a cloned SKB that has already
       been handed off into the network stack.
     - A packet SKB can be constructed whose tail is far beyond its end,
       causing out-of-bounds heap data to be considered part of the SKB's
       data.
    
    Found doing variant analysis. Tested it with another driver (ax88179_178a), since
    I don't have a aqc111 device to test it, but the code looks very similar.
    
    Signed-off-by: Marcin Kozlowski <marcinguy@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c12fcf1d864b20bdbb422804b69b2dec936839b
Author: Andy Chiu <andy.chiu@sifive.com>
Date:   Tue Apr 5 17:19:26 2022 +0800

    net: axienet: setup mdio unconditionally
    
    [ Upstream commit d1c4f93e3f0a023024a6f022a61528c06cf1daa9 ]
    
    The call to axienet_mdio_setup should not depend on whether "phy-node"
    pressents on the DT. Besides, since `lp->phy_node` is used if PHY is in
    SGMII or 100Base-X modes, move it into the if statement. And the next patch
    will remove `lp->phy_node` from driver's private structure and do an
    of_node_put on it right away after use since it is not used elsewhere.
    
    Signed-off-by: Andy Chiu <andy.chiu@sifive.com>
    Reviewed-by: Greentime Hu <greentime.hu@sifive.com>
    Reviewed-by: Robert Hancock <robert.hancock@calian.com>
    Reviewed-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b643807a735e2d80eec972ad22536dcb66f79c2e
Author: Steve Capper <steve.capper@arm.com>
Date:   Wed Mar 30 12:25:43 2022 +0100

    tlb: hugetlb: Add more sizes to tlb_remove_huge_tlb_entry
    
    [ Upstream commit 697a1d44af8ba0477ee729e632f4ade37999249a ]
    
    tlb_remove_huge_tlb_entry only considers PMD_SIZE and PUD_SIZE when
    updating the mmu_gather structure.
    
    Unfortunately on arm64 there are two additional huge page sizes that
    need to be covered: CONT_PTE_SIZE and CONT_PMD_SIZE. Where an end-user
    attempts to employ contiguous huge pages, a VM_BUG_ON can be experienced
    due to the fact that the tlb structure hasn't been correctly updated by
    the relevant tlb_flush_p.._range() call from tlb_remove_huge_tlb_entry.
    
    This patch adds inequality logic to the generic implementation of
    tlb_remove_huge_tlb_entry s.t. CONT_PTE_SIZE and CONT_PMD_SIZE are
    effectively covered on arm64. Also, as well as ptes, pmds and puds;
    p4ds are now considered too.
    
    Reported-by: David Hildenbrand <david@redhat.com>
    Suggested-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/linux-mm/811c5c8e-b3a2-85d2-049c-717f17c3a03a@redhat.com/
    Signed-off-by: Steve Capper <steve.capper@arm.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220330112543.863-1-steve.capper@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98973d2bdd4a9af53cc7ec9560ddbddf01216eba
Author: Joey Gouly <joey.gouly@arm.com>
Date:   Tue Apr 5 11:47:33 2022 +0100

    arm64: alternatives: mark patch_alternative() as `noinstr`
    
    [ Upstream commit a2c0b0fbe01419f8f5d1c0b9c581631f34ffce8b ]
    
    The alternatives code must be `noinstr` such that it does not patch itself,
    as the cache invalidation is only performed after all the alternatives have
    been applied.
    
    Mark patch_alternative() as `noinstr`. Mark branch_insn_requires_update()
    and get_alt_insn() with `__always_inline` since they are both only called
    through patch_alternative().
    
    Booting a kernel in QEMU TCG with KCSAN=y and ARM64_USE_LSE_ATOMICS=y caused
    a boot hang:
    [    0.241121] CPU: All CPU(s) started at EL2
    
    The alternatives code was patching the atomics in __tsan_read4() from LL/SC
    atomics to LSE atomics.
    
    The following fragment is using LL/SC atomics in the .text section:
      | <__tsan_unaligned_read4+304>:     ldxr    x6, [x2]
      | <__tsan_unaligned_read4+308>:     add     x6, x6, x5
      | <__tsan_unaligned_read4+312>:     stxr    w7, x6, [x2]
      | <__tsan_unaligned_read4+316>:     cbnz    w7, <__tsan_unaligned_read4+304>
    
    This LL/SC atomic sequence was to be replaced with LSE atomics. However since
    the alternatives code was instrumentable, __tsan_read4() was being called after
    only the first instruction was replaced, which led to the following code in memory:
      | <__tsan_unaligned_read4+304>:     ldadd   x5, x6, [x2]
      | <__tsan_unaligned_read4+308>:     add     x6, x6, x5
      | <__tsan_unaligned_read4+312>:     stxr    w7, x6, [x2]
      | <__tsan_unaligned_read4+316>:     cbnz    w7, <__tsan_unaligned_read4+304>
    
    This caused an infinite loop as the `stxr` instruction never completed successfully,
    so `w7` was always 0.
    
    Signed-off-by: Joey Gouly <joey.gouly@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20220405104733.11476-1-joey.gouly@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2462faffbfa582698906a6aa5fe677cf35003851
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Sun Mar 27 18:01:54 2022 -0700

    regulator: wm8994: Add an off-on delay for WM8994 variant
    
    [ Upstream commit 92d96b603738ec4f35cde7198c303ae264dd47cb ]
    
    As per Table 130 of the wm8994 datasheet at [1], there is an off-on
    delay for LDO1 and LDO2.  In the wm8958 datasheet [2], I could not
    find any reference to it.  I could not find a wm1811 datasheet to
    double-check there, but as no one has complained presumably it works
    without it.
    
    This solves the issue on Samsung Aries boards with a wm8994 where
    register writes fail when the device is powered off and back-on
    quickly.
    
    [1] https://statics.cirrus.com/pubs/proDatasheet/WM8994_Rev4.6.pdf
    [2] https://statics.cirrus.com/pubs/proDatasheet/WM8958_v3.5.pdf
    
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/CY4PR04MB056771CFB80DC447C30D5A31CB1D9@CY4PR04MB0567.namprd04.prod.outlook.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa8cdedaf7606fc0e7e16cdf67c1d651f2c93b5f
Author: Leo Ruan <tingquan.ruan@cn.bosch.com>
Date:   Mon Feb 7 16:14:11 2022 +0100

    gpu: ipu-v3: Fix dev_dbg frequency output
    
    [ Upstream commit 070a88fd4a03f921b73a2059e97d55faaa447dab ]
    
    This commit corrects the printing of the IPU clock error percentage if
    it is between -0.1% to -0.9%. For example, if the pixel clock requested
    is 27.2 MHz but only 27.0 MHz can be achieved the deviation is -0.8%.
    But the fixed point math had a flaw and calculated error of 0.2%.
    
    Before:
      Clocks: IPU 270000000Hz DI 24716667Hz Needed 27200000Hz
      IPU clock can give 27000000 with divider 10, error 0.2%
      Want 27200000Hz IPU 270000000Hz DI 24716667Hz using IPU, 27000000Hz
    
    After:
      Clocks: IPU 270000000Hz DI 24716667Hz Needed 27200000Hz
      IPU clock can give 27000000 with divider 10, error -0.8%
      Want 27200000Hz IPU 270000000Hz DI 24716667Hz using IPU, 27000000Hz
    
    Signed-off-by: Leo Ruan <tingquan.ruan@cn.bosch.com>
    Signed-off-by: Mark Jonas <mark.jonas@de.bosch.com>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Link: https://lore.kernel.org/r/20220207151411.5009-1-mark.jonas@de.bosch.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 150fe861c57c042510c81b24bddf4a9818ceb5a2
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Sat Mar 19 21:11:03 2022 +0100

    ata: libata-core: Disable READ LOG DMA EXT for Samsung 840 EVOs
    
    [ Upstream commit 5399752299396a3c9df6617f4b3c907d7aa4ded8 ]
    
    Samsung' 840 EVO with the latest firmware (EXT0DB6Q) locks up with
    the a message: "READ LOG DMA EXT failed, trying PIO" during boot.
    
    Initially this was discovered because it caused a crash
    with the sata_dwc_460ex controller on a WD MyBook Live DUO.
    
    The reporter "Tice Rex" which has the unique opportunity that he
    has two Samsung 840 EVO SSD! One with the older firmware "EXT0BB0Q"
    which booted fine and didn't expose "READ LOG DMA EXT". But the
    newer/latest firmware "EXT0DB6Q" caused the headaches.
    
    BugLink: https://github.com/openwrt/openwrt/issues/9505
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ff5359afa5ec0dd09fe76183dc4fa24b50e4125
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 31 22:42:44 2022 -0700

    net: micrel: fix KS8851_MLL Kconfig
    
    [ Upstream commit c3efcedd272aa6dd5929e20cf902a52ddaa1197a ]
    
    KS8851_MLL selects MICREL_PHY, which depends on PTP_1588_CLOCK_OPTIONAL,
    so make KS8851_MLL also depend on PTP_1588_CLOCK_OPTIONAL since
    'select' does not follow any dependency chains.
    
    Fixes kconfig warning and build errors:
    
    WARNING: unmet direct dependencies detected for MICREL_PHY
      Depends on [m]: NETDEVICES [=y] && PHYLIB [=y] && PTP_1588_CLOCK_OPTIONAL [=m]
      Selected by [y]:
      - KS8851_MLL [=y] && NETDEVICES [=y] && ETHERNET [=y] && NET_VENDOR_MICREL [=y] && HAS_IOMEM [=y]
    
    ld: drivers/net/phy/micrel.o: in function `lan8814_ts_info':
    micrel.c:(.text+0xb35): undefined reference to `ptp_clock_index'
    ld: drivers/net/phy/micrel.o: in function `lan8814_probe':
    micrel.c:(.text+0x2586): undefined reference to `ptp_clock_register'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3478709edf2cb84a46f87f7960d555f5797a967
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Tue Mar 22 12:44:43 2022 -0700

    scsi: ibmvscsis: Increase INITIAL_SRP_LIMIT to 1024
    
    [ Upstream commit 0bade8e53279157c7cc9dd95d573b7e82223d78a ]
    
    The adapter request_limit is hardcoded to be INITIAL_SRP_LIMIT which is
    currently an arbitrary value of 800. Increase this value to 1024 which
    better matches the characteristics of the typical IBMi Initiator that
    supports 32 LUNs and a queue depth of 32.
    
    This change also has the secondary benefit of being a power of two as
    required by the kfifo API. Since, Commit ab9bb6318b09 ("Partially revert
    "kfifo: fix kfifo_alloc() and kfifo_init()"") the size of IU pool for each
    target has been rounded down to 512 when attempting to kfifo_init() those
    pools with the current request_limit size of 800.
    
    Link: https://lore.kernel.org/r/20220322194443.678433-1-tyreld@linux.ibm.com
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9a110fa755b2a144c677254938d709bdbea36ac
Author: James Smart <jsmart2021@gmail.com>
Date:   Wed Mar 16 20:27:36 2022 -0700

    scsi: lpfc: Fix queue failures when recovering from PCI parity error
    
    [ Upstream commit df0101197c4d9596682901631f3ee193ed354873 ]
    
    When recovering from a pci-parity error the driver is failing to re-create
    queues, causing recovery to fail. Looking deeper, it was found that the
    interrupt vector count allocated on the recovery was fewer than the vectors
    originally allocated. This disparity resulted in CPU map entries with stale
    information. When the driver tries to re-create the queues, it attempts to
    use the stale information which indicates an eq/interrupt vector that was
    no longer created.
    
    Fix by clearng the cpup map array before enabling and requesting the IRQs
    in the lpfc_sli_reset_slot_s4 routine().
    
    Link: https://lore.kernel.org/r/20220317032737.45308-4-jsmart2021@gmail.com
    Co-developed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aec36b98a1bbaa84bfd8299a306e4c12314af626
Author: Xiaoguang Wang <xiaoguang.wang@linux.alibaba.com>
Date:   Fri Mar 11 21:22:05 2022 +0800

    scsi: target: tcmu: Fix possible page UAF
    
    [ Upstream commit a6968f7a367f128d120447360734344d5a3d5336 ]
    
    tcmu_try_get_data_page() looks up pages under cmdr_lock, but it does not
    take refcount properly and just returns page pointer. When
    tcmu_try_get_data_page() returns, the returned page may have been freed by
    tcmu_blocks_release().
    
    We need to get_page() under cmdr_lock to avoid concurrent
    tcmu_blocks_release().
    
    Link: https://lore.kernel.org/r/20220311132206.24515-1-xiaoguang.wang@linux.alibaba.com
    Reviewed-by: Bodo Stroesser <bostroesser@gmail.com>
    Signed-off-by: Xiaoguang Wang <xiaoguang.wang@linux.alibaba.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43666798059c7cb5c374ce1f79f51e147aa5d419
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Sun Mar 27 08:25:10 2022 -0700

    Drivers: hv: vmbus: Prevent load re-ordering when reading ring buffer
    
    [ Upstream commit b6cae15b5710c8097aad26a2e5e752c323ee5348 ]
    
    When reading a packet from a host-to-guest ring buffer, there is no
    memory barrier between reading the write index (to see if there is
    a packet to read) and reading the contents of the packet. The Hyper-V
    host uses store-release when updating the write index to ensure that
    writes of the packet data are completed first. On the guest side,
    the processor can reorder and read the packet data before the write
    index, and sometimes get stale packet data. Getting such stale packet
    data has been observed in a reproducible case in a VM on ARM64.
    
    Fix this by using virt_load_acquire() to read the write index,
    ensuring that reads of the packet data cannot be reordered
    before it. Preventing such reordering is logically correct, and
    with this change, getting stale data can no longer be reproduced.
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Andrea Parri (Microsoft) <parri.andrea@gmail.com>
    Link: https://lore.kernel.org/r/1648394710-33480-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d7a5aae884ca727d41c7ed15d4c82fdb67c040c
Author: QintaoShen <unSimple1993@163.com>
Date:   Thu Mar 24 16:26:23 2022 +0800

    drm/amdkfd: Check for potential null return of kmalloc_array()
    
    [ Upstream commit ebbb7bb9e80305820dc2328a371c1b35679f2667 ]
    
    As the kmalloc_array() may return null, the 'event_waiters[i].wait' would lead to null-pointer dereference.
    Therefore, it is better to check the return value of kmalloc_array() to avoid this confusion.
    
    Signed-off-by: QintaoShen <unSimple1993@163.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5afacc826a80cd82ac3f9eb26bc80e45cd14c20
Author: Tianci Yin <tianci.yin@amd.com>
Date:   Wed Mar 23 23:54:58 2022 +0800

    drm/amdgpu/vcn: improve vcn dpg stop procedure
    
    [ Upstream commit 6ea239adc2a712eb318f04f5c29b018ba65ea38a ]
    
    Prior to disabling dpg, VCN need unpausing dpg mode, or VCN will hang in
    S3 resuming.
    
    Reviewed-by: James Zhu <James.Zhu@amd.com>
    Signed-off-by: Tianci Yin <tianci.yin@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2e0931e6d84d133a78b87b70d32d5776ee2b101
Author: Tushar Patel <tushar.patel@amd.com>
Date:   Thu Mar 17 15:31:22 2022 -0400

    drm/amdkfd: Fix Incorrect VMIDs passed to HWS
    
    [ Upstream commit b7dfbd2e601f3fee545bc158feceba4f340fe7cf ]
    
    Compute-only GPUs have more than 8 VMIDs allocated to KFD. Fix
    this by passing correct number of VMIDs to HWS
    
    v2: squash in warning fix (Alex)
    
    Signed-off-by: Tushar Patel <tushar.patel@amd.com>
    Reviewed-by: Felix Kuehling <felix.kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fc0610ad8182d05596e671c950bca1f3921d5e0
Author: Leo (Hanghong) Ma <hanghong.ma@amd.com>
Date:   Fri Mar 11 11:35:29 2022 -0500

    drm/amd/display: Update VTEM Infopacket definition
    
    [ Upstream commit c9fbf6435162ed5fb7201d1d4adf6585c6a8c327 ]
    
    [Why & How]
    The latest HDMI SPEC has updated the VTEM packet structure,
    so change the VTEM Infopacket defined in the driver side to align
    with the SPEC.
    
    Reviewed-by: Chris Park <Chris.Park@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Leo (Hanghong) Ma <hanghong.ma@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6906e05cf3ad2cfe704eda003de59aa0cb89b291
Author: Chiawen Huang <chiawen.huang@amd.com>
Date:   Thu Mar 10 00:07:59 2022 +0800

    drm/amd/display: FEC check in timing validation
    
    [ Upstream commit 7d56a154e22ffb3613fdebf83ec34d5225a22993 ]
    
    [Why]
    disable/enable leads FEC mismatch between hw/sw FEC state.
    
    [How]
    check FEC status to fastboot on/off.
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Chiawen Huang <chiawen.huang@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 756c61c1680f435292b7d06072a8f390f551bca6
Author: Charlene Liu <Charlene.Liu@amd.com>
Date:   Mon Mar 7 18:31:29 2022 -0500

    drm/amd/display: fix audio format not updated after edid updated
    
    [ Upstream commit 5e8a71cf13bc9184fee915b2220be71b4c6cac74 ]
    
    [why]
    for the case edid change only changed audio format.
    driver still need to update stream.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Charlene Liu <Charlene.Liu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76e086ce7b2d71b0d7a1a121c5f53b5fa07c1c8c
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Mar 23 11:30:36 2022 -0400

    btrfs: do not warn for free space inode in cow_file_range
    
    [ Upstream commit a7d16d9a07bbcb7dcd5214a1bea75c808830bc0d ]
    
    This is a long time leftover from when I originally added the free space
    inode, the point was to catch cases where we weren't honoring the NOCOW
    flag.  However there exists a race with relocation, if we allocate our
    free space inode in a block group that is about to be relocated, we
    could trigger the COW path before the relocation has the opportunity to
    find the extents and delete the free space cache.  In production where
    we have auto-relocation enabled we're seeing this WARN_ON_ONCE() around
    5k times in a 2 week period, so not super common but enough that it's at
    the top of our metrics.
    
    We're properly handling the error here, and with us phasing out v1 space
    cache anyway just drop the WARN_ON_ONCE.
    
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 217190dc66efdf58e04a5c1f239f330c4c47d81b
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Mon Mar 14 10:55:32 2022 -0700

    btrfs: fix fallocate to use file_modified to update permissions consistently
    
    [ Upstream commit 05fd9564e9faf0f23b4676385e27d9405cef6637 ]
    
    Since the initial introduction of (posix) fallocate back at the turn of
    the century, it has been possible to use this syscall to change the
    user-visible contents of files.  This can happen by extending the file
    size during a preallocation, or through any of the newer modes (punch,
    zero range).  Because the call can be used to change file contents, we
    should treat it like we do any other modification to a file -- update
    the mtime, and drop set[ug]id privileges/capabilities.
    
    The VFS function file_modified() does all this for us if pass it a
    locked inode, so let's make fallocate drop permissions correctly.
    
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b5d1b3413d784fea12c387c27dbd10e3446e404
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Tue Mar 15 14:53:24 2022 -0400

    drm/amd: Add USBC connector ID
    
    [ Upstream commit c5c948aa894a831f96fccd025e47186b1ee41615 ]
    
    [Why&How] Add a dedicated AMDGPU specific ID for use with
    newer ASICs that support USB-C output
    
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f9c06501d288c96ebfb651443dd365b0aca3757
Author: Jeremy Linton <jeremy.linton@arm.com>
Date:   Tue Apr 12 16:04:20 2022 -0500

    net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"
    
    [ Upstream commit 2df3fc4a84e917a422935cc5bae18f43f9955d31 ]
    
    It turns out after digging deeper into this bug, that it was being
    triggered by GCC12 failing to call the bcmgenet_enable_dma()
    routine. Given that a gcc12 fix has been merged [1] and the genet
    driver now works properly when built with gcc12, this commit should
    be reverted.
    
    [1]
    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160
    https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57
    
    Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")
    Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 504c15f07f541f87185113ccd485a814adf31e4f
Author: Khazhismel Kumykov <khazhy@google.com>
Date:   Mon Apr 11 15:03:35 2022 -0700

    dm mpath: only use ktime_get_ns() in historical selector
    
    [ Upstream commit ce40426fdc3c92acdba6b5ca74bc7277ffaa6a3d ]
    
    Mixing sched_clock() and ktime_get_ns() usage will give bad results.
    
    Switch hst_select_path() from using sched_clock() to ktime_get_ns().
    Also rename path_service_time()'s 'sched_now' variable to 'now'.
    
    Fixes: 2613eab11996 ("dm mpath: add Historical Service Time Path Selector")
    Signed-off-by: Khazhismel Kumykov <khazhy@google.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e166a41180be2f1e66bbb6d46448e80a9a5ec05
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Wed Apr 13 04:42:51 2022 -0700

    cifs: potential buffer overflow in handling symlinks
    
    [ Upstream commit 64c4a37ac04eeb43c42d272f6e6c8c12bfcf4304 ]
    
    Smatch printed a warning:
            arch/x86/crypto/poly1305_glue.c:198 poly1305_update_arch() error:
            __memcpy() 'dctx->buf' too small (16 vs u32max)
    
    It's caused because Smatch marks 'link_len' as untrusted since it comes
    from sscanf(). Add a check to ensure that 'link_len' is not larger than
    the size of the 'link_str' buffer.
    
    Fixes: c69c1b6eaea1 ("cifs: implement CIFSParseMFSymlink()")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67677050cecbe0edfdd81cd508415e9636ba7c65
Author: Lin Ma <linma@zju.edu.cn>
Date:   Wed Apr 13 00:04:30 2022 +0800

    nfc: nci: add flush_workqueue to prevent uaf
    
    [ Upstream commit ef27324e2cb7bb24542d6cb2571740eefe6b00dc ]
    
    Our detector found a concurrent use-after-free bug when detaching an
    NCI device. The main reason for this bug is the unexpected scheduling
    between the used delayed mechanism (timer and workqueue).
    
    The race can be demonstrated below:
    
    Thread-1                           Thread-2
                                     | nci_dev_up()
                                     |   nci_open_device()
                                     |     __nci_request(nci_reset_req)
                                     |       nci_send_cmd
                                     |         queue_work(cmd_work)
    nci_unregister_device()          |
      nci_close_device()             | ...
        del_timer_sync(cmd_timer)[1] |
    ...                              | Worker
    nci_free_device()                | nci_cmd_work()
      kfree(ndev)[3]                 |   mod_timer(cmd_timer)[2]
    
    In short, the cleanup routine thought that the cmd_timer has already
    been detached by [1] but the mod_timer can re-attach the timer [2], even
    it is already released [3], resulting in UAF.
    
    This UAF is easy to trigger, crash trace by POC is like below
    
    [   66.703713] ==================================================================
    [   66.703974] BUG: KASAN: use-after-free in enqueue_timer+0x448/0x490
    [   66.703974] Write of size 8 at addr ffff888009fb7058 by task kworker/u4:1/33
    [   66.703974]
    [   66.703974] CPU: 1 PID: 33 Comm: kworker/u4:1 Not tainted 5.18.0-rc2 #5
    [   66.703974] Workqueue: nfc2_nci_cmd_wq nci_cmd_work
    [   66.703974] Call Trace:
    [   66.703974]  <TASK>
    [   66.703974]  dump_stack_lvl+0x57/0x7d
    [   66.703974]  print_report.cold+0x5e/0x5db
    [   66.703974]  ? enqueue_timer+0x448/0x490
    [   66.703974]  kasan_report+0xbe/0x1c0
    [   66.703974]  ? enqueue_timer+0x448/0x490
    [   66.703974]  enqueue_timer+0x448/0x490
    [   66.703974]  __mod_timer+0x5e6/0xb80
    [   66.703974]  ? mark_held_locks+0x9e/0xe0
    [   66.703974]  ? try_to_del_timer_sync+0xf0/0xf0
    [   66.703974]  ? lockdep_hardirqs_on_prepare+0x17b/0x410
    [   66.703974]  ? queue_work_on+0x61/0x80
    [   66.703974]  ? lockdep_hardirqs_on+0xbf/0x130
    [   66.703974]  process_one_work+0x8bb/0x1510
    [   66.703974]  ? lockdep_hardirqs_on_prepare+0x410/0x410
    [   66.703974]  ? pwq_dec_nr_in_flight+0x230/0x230
    [   66.703974]  ? rwlock_bug.part.0+0x90/0x90
    [   66.703974]  ? _raw_spin_lock_irq+0x41/0x50
    [   66.703974]  worker_thread+0x575/0x1190
    [   66.703974]  ? process_one_work+0x1510/0x1510
    [   66.703974]  kthread+0x2a0/0x340
    [   66.703974]  ? kthread_complete_and_exit+0x20/0x20
    [   66.703974]  ret_from_fork+0x22/0x30
    [   66.703974]  </TASK>
    [   66.703974]
    [   66.703974] Allocated by task 267:
    [   66.703974]  kasan_save_stack+0x1e/0x40
    [   66.703974]  __kasan_kmalloc+0x81/0xa0
    [   66.703974]  nci_allocate_device+0xd3/0x390
    [   66.703974]  nfcmrvl_nci_register_dev+0x183/0x2c0
    [   66.703974]  nfcmrvl_nci_uart_open+0xf2/0x1dd
    [   66.703974]  nci_uart_tty_ioctl+0x2c3/0x4a0
    [   66.703974]  tty_ioctl+0x764/0x1310
    [   66.703974]  __x64_sys_ioctl+0x122/0x190
    [   66.703974]  do_syscall_64+0x3b/0x90
    [   66.703974]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [   66.703974]
    [   66.703974] Freed by task 406:
    [   66.703974]  kasan_save_stack+0x1e/0x40
    [   66.703974]  kasan_set_track+0x21/0x30
    [   66.703974]  kasan_set_free_info+0x20/0x30
    [   66.703974]  __kasan_slab_free+0x108/0x170
    [   66.703974]  kfree+0xb0/0x330
    [   66.703974]  nfcmrvl_nci_unregister_dev+0x90/0xd0
    [   66.703974]  nci_uart_tty_close+0xdf/0x180
    [   66.703974]  tty_ldisc_kill+0x73/0x110
    [   66.703974]  tty_ldisc_hangup+0x281/0x5b0
    [   66.703974]  __tty_hangup.part.0+0x431/0x890
    [   66.703974]  tty_release+0x3a8/0xc80
    [   66.703974]  __fput+0x1f0/0x8c0
    [   66.703974]  task_work_run+0xc9/0x170
    [   66.703974]  exit_to_user_mode_prepare+0x194/0x1a0
    [   66.703974]  syscall_exit_to_user_mode+0x19/0x50
    [   66.703974]  do_syscall_64+0x48/0x90
    [   66.703974]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    To fix the UAF, this patch adds flush_workqueue() to ensure the
    nci_cmd_work is finished before the following del_timer_sync.
    This combination will promise the timer is actually detached.
    
    Fixes: 6a2968aaf50c ("NFC: basic NCI protocol implementation")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfba9722cf2e801af181a56072f92f924ad7b156
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Apr 11 09:17:58 2022 +0300

    perf tools: Fix misleading add event PMU debug message
    
    [ Upstream commit f034fc50d3c7d9385c20d505ab4cf56b8fd18ac7 ]
    
    Fix incorrect debug message:
    
       Attempting to add event pmu 'intel_pt' with '' that may result in
       non-fatal errors
    
    which always appears with perf record -vv and intel_pt e.g.
    
        perf record -vv -e intel_pt//u uname
    
    The message is incorrect because there will never be non-fatal errors.
    
    Suppress the message if the PMU is 'selectable' i.e. meant to be
    selected directly as an event.
    
    Fixes: 4ac22b484d4c79e8 ("perf parse-events: Make add PMU verbose output clearer")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Link: http://lore.kernel.org/lkml/20220411061758.2458417-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 280f721edc54a782f1dfcec573ee929e92bf186a
Author: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Date:   Fri Apr 8 12:54:31 2022 +0530

    testing/selftests/mqueue: Fix mq_perf_tests to free the allocated cpu set
    
    [ Upstream commit ce64763c63854b4079f2e036638aa881a1fb3fbc ]
    
    The selftest "mqueue/mq_perf_tests.c" use CPU_ALLOC to allocate
    CPU set. This cpu set is used further in pthread_attr_setaffinity_np
    and by pthread_create in the code. But in current code, allocated
    cpu set is not freed.
    
    Fix this issue by adding CPU_FREE in the "shutdown" function which
    is called in most of the error/exit path for the cleanup. There are
    few error paths which exit without using shutdown. Add a common goto
    error path with CPU_FREE for these cases.
    
    Fixes: 7820b0715b6f ("tools/selftests: add mq_perf_tests")
    Signed-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb8873b324d918eeaa572d08d1d05785f4fb1e0a
Author: Petr Malat <oss@malat.biz>
Date:   Sat Apr 9 08:36:11 2022 +0200

    sctp: Initialize daddr on peeled off socket
    
    [ Upstream commit 8467dda0c26583547731e7f3ea73fc3856bae3bf ]
    
    Function sctp_do_peeloff() wrongly initializes daddr of the original
    socket instead of the peeled off socket, which makes getpeername()
    return zeroes instead of the primary address. Initialize the new socket
    instead.
    
    Fixes: d570ee490fb1 ("[SCTP]: Correctly set daddr for IPv6 sockets during peeloff")
    Signed-off-by: Petr Malat <oss@malat.biz>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Link: https://lore.kernel.org/r/20220409063611.673193-1-oss@malat.biz
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45226fac4d316fea68357b307cb46a4aac764ec6
Author: Mike Christie <michael.christie@oracle.com>
Date:   Thu Apr 7 19:13:09 2022 -0500

    scsi: iscsi: Fix conn cleanup and stop race during iscsid restart
    
    [ Upstream commit 7c6e99c18167ed89729bf167ccb4a7e3ab3115ba ]
    
    If iscsid is doing a stop_conn at the same time the kernel is starting
    error recovery we can hit a race that allows the cleanup work to run on a
    valid connection. In the race, iscsi_if_stop_conn sees the cleanup bit set,
    but it calls flush_work on the clean_work before iscsi_conn_error_event has
    queued it. The flush then returns before the queueing and so the
    cleanup_work can run later and disconnect/stop a conn while it's in a
    connected state.
    
    The patch:
    
    Commit 0ab710458da1 ("scsi: iscsi: Perform connection failure entirely in
    kernel space")
    
    added the late stop_conn call bug originally, and the patch:
    
    Commit 23d6fefbb3f6 ("scsi: iscsi: Fix in-kernel conn failure handling")
    
    attempted to fix it but only fixed the normal EH case and left the above
    race for the iscsid restart case. For the normal EH case we don't hit the
    race because we only signal userspace to start recovery after we have done
    the queueing, so the flush will always catch the queued work or see it
    completed.
    
    For iscsid restart cases like boot, we can hit the race because iscsid will
    call down to the kernel before the kernel has signaled any error, so both
    code paths can be running at the same time. This adds a lock around the
    setting of the cleanup bit and queueing so they happen together.
    
    Link: https://lore.kernel.org/r/20220408001314.5014-6-michael.christie@oracle.com
    Fixes: 0ab710458da1 ("scsi: iscsi: Perform connection failure entirely in kernel space")
    Tested-by: Manish Rangankar <mrangankar@marvell.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73805795c99ff32154c9e37c4334968c037c0f7f
Author: Mike Christie <michael.christie@oracle.com>
Date:   Thu Apr 7 19:13:06 2022 -0500

    scsi: iscsi: Fix offload conn cleanup when iscsid restarts
    
    [ Upstream commit cbd2283aaf47fef4ded4b29124b1ef3beb515f3a ]
    
    When userspace restarts during boot or upgrades it won't know about the
    offload driver's endpoint and connection mappings. iscsid will start by
    cleaning up the old session by doing a stop_conn call. Later, if we are
    able to create a new connection, we clean up the old endpoint during the
    binding stage. The problem is that if we do stop_conn before doing the
    ep_disconnect call offload, drivers can still be executing I/O. We then
    might free tasks from the under the card/driver.
    
    This moves the ep_disconnect call to before we do the stop_conn call for
    this case. It will then work and look like a normal recovery/cleanup
    procedure from the driver's point of view.
    
    Link: https://lore.kernel.org/r/20220408001314.5014-3-michael.christie@oracle.com
    Tested-by: Manish Rangankar <mrangankar@marvell.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 699bd835c36e095dc80bea21d9a15cd7f7bc8b9f
Author: Mike Christie <michael.christie@oracle.com>
Date:   Thu Apr 7 19:13:05 2022 -0500

    scsi: iscsi: Move iscsi_ep_disconnect()
    
    [ Upstream commit c34f95e98d8fb750eefd4f3fe58b4f8b5e89253b ]
    
    This patch moves iscsi_ep_disconnect() so it can be called earlier in the
    next patch.
    
    Link: https://lore.kernel.org/r/20220408001314.5014-2-michael.christie@oracle.com
    Tested-by: Manish Rangankar <mrangankar@marvell.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46f37a34a53d4c12fa413b7aec7fe7c3e5cece51
Author: Mike Christie <michael.christie@oracle.com>
Date:   Tue May 25 13:18:00 2021 -0500

    scsi: iscsi: Fix in-kernel conn failure handling
    
    [ Upstream commit 23d6fefbb3f6b1cc29794427588b470ed06ff64e ]
    
    Commit 0ab710458da1 ("scsi: iscsi: Perform connection failure entirely in
    kernel space") has the following regressions/bugs that this patch fixes:
    
    1. It can return cmds to upper layers like dm-multipath where that can
    retry them. After they are successful the fs/app can send new I/O to the
    same sectors, but we've left the cmds running in FW or in the net layer.
    We need to be calling ep_disconnect if userspace is not up.
    
    This patch only fixes the issue for offload drivers. iscsi_tcp will be
    fixed in separate commit because it doesn't have a ep_disconnect call.
    
    2. The drivers that implement ep_disconnect expect that it's called before
    conn_stop. Besides crashes, if the cleanup_task callout is called before
    ep_disconnect it might free up driver/card resources for session1 then they
    could be allocated for session2. But because the driver's ep_disconnect is
    not called it has not cleaned up the firmware so the card is still using
    the resources for the original cmd.
    
    3. The stop_conn_work_fn can run after userspace has done its recovery and
    we are happily using the session. We will then end up with various bugs
    depending on what is going on at the time.
    
    We may also run stop_conn_work_fn late after userspace has called stop_conn
    and ep_disconnect and is now going to call start/bind conn. If
    stop_conn_work_fn runs after bind but before start, we would leave the conn
    in a unbound but sort of started state where IO might be allowed even
    though the drivers have been set in a state where they no longer expect
    I/O.
    
    4. Returning -EAGAIN in iscsi_if_destroy_conn if we haven't yet run the in
    kernel stop_conn function is breaking userspace. We should have been doing
    this for the caller.
    
    Link: https://lore.kernel.org/r/20210525181821.7617-8-michael.christie@oracle.com
    Fixes: 0ab710458da1 ("scsi: iscsi: Perform connection failure entirely in kernel space")
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 812573896711f3ffb083c374f26f5807efca3b2f
Author: Mike Christie <michael.christie@oracle.com>
Date:   Tue May 25 13:17:59 2021 -0500

    scsi: iscsi: Rel ref after iscsi_lookup_endpoint()
    
    [ Upstream commit 9e5fe1700896c85040943fdc0d3fee0dd3e0d36f ]
    
    Subsequent commits allow the kernel to do ep_disconnect. In that case we
    will have to get a proper refcount on the ep so one thread does not delete
    it from under another.
    
    Link: https://lore.kernel.org/r/20210525181821.7617-7-michael.christie@oracle.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22608545b834b855c0a7fd9f675edc884b7d21a3
Author: Mike Christie <michael.christie@oracle.com>
Date:   Tue May 25 13:17:58 2021 -0500

    scsi: iscsi: Use system_unbound_wq for destroy_work
    
    [ Upstream commit b25b957d2db1585602c2c70fdf4261a5641fe6b7 ]
    
    Use the system_unbound_wq for async session destruction. We don't need a
    dedicated workqueue for async session destruction because:
    
     1. perf does not seem to be an issue since we only allow 1 active work.
    
     2. it does not have deps with other system works and we can run them in
        parallel with each other.
    
    Link: https://lore.kernel.org/r/20210525181821.7617-6-michael.christie@oracle.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4029a1e992fc6a0e29ff56c74a9632317fe76022
Author: Mike Christie <michael.christie@oracle.com>
Date:   Tue May 25 13:17:57 2021 -0500

    scsi: iscsi: Force immediate failure during shutdown
    
    [ Upstream commit 06c203a5566beecebb1f8838d026de8a61c8df71 ]
    
    If the system is not up, we can just fail immediately since iscsid is not
    going to ever answer our netlink events. We are already setting the
    recovery_tmo to 0, but by passing stop_conn STOP_CONN_TERM we never will
    block the session and start the recovery timer, because for that flag
    userspace will do the unbind and destroy events which would remove the
    devices and wake up and kill the eh.
    
    Since the conn is dead and the system is going dowm this just has us use
    STOP_CONN_RECOVER with recovery_tmo=0 so we fail immediately. However, if
    the user has set the recovery_tmo=-1 we let the system hang like they
    requested since they might have used that setting for specific reasons
    (one known reason is for buggy cluster software).
    
    Link: https://lore.kernel.org/r/20210525181821.7617-5-michael.christie@oracle.com
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17d14456f6262b87f2ce6e749cc52ebdfa90949d
Author: Mike Christie <michael.christie@oracle.com>
Date:   Tue May 25 13:17:55 2021 -0500

    scsi: iscsi: Stop queueing during ep_disconnect
    
    [ Upstream commit 891e2639deae721dc43764a44fa255890dc34313 ]
    
    During ep_disconnect we have been doing iscsi_suspend_tx/queue to block new
    I/O but every driver except cxgbi and iscsi_tcp can still get I/O from
    __iscsi_conn_send_pdu() if we haven't called iscsi_conn_failure() before
    ep_disconnect. This could happen if we were terminating the session, and
    the logout timed out before it was even sent to libiscsi.
    
    Fix the issue by adding a helper which reverses the bind_conn call that
    allows new I/O to be queued. Drivers implementing ep_disconnect can use this
    to make sure new I/O is not queued to them when handling the disconnect.
    
    Link: https://lore.kernel.org/r/20210525181821.7617-3-michael.christie@oracle.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da9cf24aa739f48cdbf5b2624eacb4a6c81cf9e9
Author: Ajish Koshy <Ajish.Koshy@microchip.com>
Date:   Mon Apr 11 12:16:03 2022 +0530

    scsi: pm80xx: Enable upper inbound, outbound queues
    
    [ Upstream commit bcd8a45223470e00b5f254018174d64a75db4bbe ]
    
    Executing driver on servers with more than 32 CPUs were faced with command
    timeouts. This is because we were not geting completions for commands
    submitted on IQ32 - IQ63.
    
    Set E64Q bit to enable upper inbound and outbound queues 32 to 63 in the
    MPI main configuration table.
    
    Added 500ms delay after successful MPI initialization as mentioned in
    controller datasheet.
    
    Link: https://lore.kernel.org/r/20220411064603.668448-3-Ajish.Koshy@microchip.com
    Fixes: 05c6c029a44d ("scsi: pm80xx: Increase number of supported queues")
    Reviewed-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Ajish Koshy <Ajish.Koshy@microchip.com>
    Signed-off-by: Viswas G <Viswas.G@microchip.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e08d26971237d1af8c3ca456f5729f3f4033890b
Author: Ajish Koshy <Ajish.Koshy@microchip.com>
Date:   Mon Apr 11 12:16:02 2022 +0530

    scsi: pm80xx: Mask and unmask upper interrupt vectors 32-63
    
    [ Upstream commit 294080eacf92a0781e6d43663448a55001ec8c64 ]
    
    When upper inbound and outbound queues 32-63 are enabled, we see upper
    vectors 32-63 in interrupt service routine. We need corresponding registers
    to handle masking and unmasking of these upper interrupts.
    
    To achieve this, we use registers MSGU_ODMR_U(0x34) to mask and
    MSGU_ODMR_CLR_U(0x3C) to unmask the interrupts. In these registers bit 0-31
    represents interrupt vectors 32-63.
    
    Link: https://lore.kernel.org/r/20220411064603.668448-2-Ajish.Koshy@microchip.com
    Fixes: 05c6c029a44d ("scsi: pm80xx: Increase number of supported queues")
    Reviewed-by: John Garry <john.garry@huawei.com>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Ajish Koshy <Ajish.Koshy@microchip.com>
    Signed-off-by: Viswas G <Viswas.G@microchip.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35b91e49bc80ca944a8679c3b139ddaf2f8eea0f
Author: Karsten Graul <kgraul@linux.ibm.com>
Date:   Fri Apr 8 17:10:34 2022 +0200

    net/smc: Fix NULL pointer dereference in smc_pnet_find_ib()
    
    [ Upstream commit d22f4f977236f97e01255a80bca2ea93a8094fc8 ]
    
    dev_name() was called with dev.parent as argument but without to
    NULL-check it before.
    Solve this by checking the pointer before the call to dev_name().
    
    Fixes: af5f60c7e3d5 ("net/smc: allow PCI IDs as ib device names in the pnet table")
    Reported-by: syzbot+03e3e228510223dabd34@syzkaller.appspotmail.com
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98a7f6c4ada4ca97fcb0d508e097f8597df19d4d
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Thu Mar 17 17:07:31 2022 -0700

    drm/msm/dsi: Use connector directly in msm_dsi_manager_connector_init()
    
    [ Upstream commit 47b7de6b88b962ef339a2427a023d2a23d161654 ]
    
    The member 'msm_dsi->connector' isn't assigned until
    msm_dsi_manager_connector_init() returns (see msm_dsi_modeset_init() and
    how it assigns the return value). Therefore this pointer is going to be
    NULL here. Let's use 'connector' which is what was intended.
    
    Cc: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Cc: Sean Paul <seanpaul@chromium.org>
    Fixes: 6d5e78406991 ("drm/msm/dsi: Move dsi panel init into modeset init path")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/478693/
    Link: https://lore.kernel.org/r/20220318000731.2823718-1-swboyd@chromium.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f78ad93837c61ed62a6f7b10a960c0c9218382c
Author: Rob Clark <robdclark@chromium.org>
Date:   Thu Apr 7 13:28:33 2022 -0700

    drm/msm: Fix range size vs end confusion
    
    [ Upstream commit 537fef808be5ea56f6fc06932162550819a3b3c3 ]
    
    The fourth param is size, rather than range_end.
    
    Note that we could increase the address space size if we had a way to
    prevent buffers from spanning a 4G split, mostly just to avoid fw bugs
    with 64b math.
    
    Fixes: 84c31ee16f90 ("drm/msm/a6xx: Add support for per-instance pagetables")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Link: https://lore.kernel.org/r/20220407202836.1211268-1-robdclark@gmail.com
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5513f9a0b0684383c1bc120ea37b35ae944a709a
Author: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date:   Mon Apr 11 14:37:51 2022 +0530

    cfg80211: hold bss_lock while updating nontrans_list
    
    [ Upstream commit a5199b5626cd6913cf8776a835bc63d40e0686ad ]
    
    Synchronize additions to nontrans_list of transmitting BSS with
    bss_lock to avoid races. Also when cfg80211_add_nontrans_list() fails
    __cfg80211_unlink_bss() needs bss_lock to be held (has lockdep assert
    on bss_lock). So protect the whole block with bss_lock to avoid
    races and warnings. Found during code review.
    
    Fixes: 0b8fb8235be8 ("cfg80211: Parsing of Multiple BSSID information in scanning")
    Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
    Link: https://lore.kernel.org/r/1649668071-9370-1-git-send-email-quic_ramess@quicinc.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a44938950e5e12dd676ec2b38701b6d3c4e1a281
Author: Benedikt Spranger <b.spranger@linutronix.de>
Date:   Fri Apr 8 11:47:45 2022 +0200

    net/sched: taprio: Check if socket flags are valid
    
    [ Upstream commit e8a64bbaaad1f6548cec5508297bc6d45e8ab69e ]
    
    A user may set the SO_TXTIME socket option to ensure a packet is send
    at a given time. The taprio scheduler has to confirm, that it is allowed
    to send a packet at that given time, by a check against the packet time
    schedule. The scheduler drop the packet, if the gates are closed at the
    given send time.
    
    The check, if SO_TXTIME is set, may fail since sk_flags are part of an
    union and the union is used otherwise. This happen, if a socket is not
    a full socket, like a request socket for example.
    
    Add a check to verify, if the union is used for sk_flags.
    
    Fixes: 4cfd5779bd6e ("taprio: Add support for txtime-assist mode")
    Signed-off-by: Benedikt Spranger <b.spranger@linutronix.de>
    Reviewed-by: Kurt Kanzenbach <kurt@linutronix.de>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08d5e3e954537931c8da7428034808d202e98299
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Thu Apr 7 08:25:21 2022 -0500

    net: ethernet: stmmac: fix altr_tse_pcs function when using a fixed-link
    
    [ Upstream commit a6aaa00324240967272b451bfa772547bd576ee6 ]
    
    When using a fixed-link, the altr_tse_pcs driver crashes
    due to null-pointer dereference as no phy_device is provided to
    tse_pcs_fix_mac_speed function. Fix this by adding a check for
    phy_dev before calling the tse_pcs_fix_mac_speed() function.
    
    Also clean up the tse_pcs_fix_mac_speed function a bit. There is
    no need to check for splitter_base and sgmii_adapter_base
    because the driver will fail if these 2 variables are not
    derived from the device tree.
    
    Fixes: fb3bbdb85989 ("net: ethernet: Add TSE PCS support to dwmac-socfpga")
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ad9d890d850db6c55ec2d9b5b3cbb7ca5178f3f
Author: Michael Walle <michael@walle.cc>
Date:   Fri Apr 8 12:15:21 2022 +0200

    net: dsa: felix: suppress -EPROBE_DEFER errors
    
    [ Upstream commit e6934e4048c91502efcb21da92b7ae37cd8fa741 ]
    
    The DSA master might not have been probed yet in which case the probe of
    the felix switch fails with -EPROBE_DEFER:
    [    4.435305] mscc_felix 0000:00:00.5: Failed to register DSA switch: -517
    
    It is not an error. Use dev_err_probe() to demote this particular error
    to a debug message.
    
    Fixes: 56051948773e ("net: dsa: ocelot: add driver for Felix switch family")
    Signed-off-by: Michael Walle <michael@walle.cc>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20220408101521.281886-1-michael@walle.cc
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2cc341fcc42a2507d9c36e94317f5e0834fc5fd
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Thu Apr 7 11:29:23 2022 -0300

    net/sched: fix initialization order when updating chain 0 head
    
    [ Upstream commit e65812fd22eba32f11abe28cb377cbd64cfb1ba0 ]
    
    Currently, when inserting a new filter that needs to sit at the head
    of chain 0, it will first update the heads pointer on all devices using
    the (shared) block, and only then complete the initialization of the new
    element so that it has a "next" element.
    
    This can lead to a situation that the chain 0 head is propagated to
    another CPU before the "next" initialization is done. When this race
    condition is triggered, packets being matched on that CPU will simply
    miss all other filters, and will flow through the stack as if there were
    no other filters installed. If the system is using OVS + TC, such
    packets will get handled by vswitchd via upcall, which results in much
    higher latency and reordering. For other applications it may result in
    packet drops.
    
    This is reproducible with a tc only setup, but it varies from system to
    system. It could be reproduced with a shared block amongst 10 veth
    tunnels, and an ingress filter mirroring packets to another veth.
    That's because using the last added veth tunnel to the shared block to
    do the actual traffic, it makes the race window bigger and easier to
    trigger.
    
    The fix is rather simple, to just initialize the next pointer of the new
    filter instance (tp) before propagating the head change.
    
    The fixes tag is pointing to the original code though this issue should
    only be observed when using it unlocked.
    
    Fixes: 2190d1d0944f ("net: sched: introduce helpers to work with filter chains")
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Reviewed-by: Davide Caratti <dcaratti@redhat.com>
    Link: https://lore.kernel.org/r/b97d5f4eaffeeb9d058155bcab63347527261abf.1649341369.git.marcelo.leitner@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a7cf84148416d93d5904eb9a7cf5499ab852b84
Author: Vadim Pasternak <vadimp@nvidia.com>
Date:   Thu Apr 7 10:07:03 2022 +0300

    mlxsw: i2c: Fix initialization error flow
    
    [ Upstream commit d452088cdfd5a4ad9d96d847d2273fe958d6339b ]
    
    Add mutex_destroy() call in driver initialization error flow.
    
    Fixes: 6882b0aee180f ("mlxsw: Introduce support for I2C bus")
    Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Link: https://lore.kernel.org/r/20220407070703.2421076-1-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43e58e119a2b913d3b7576455b0b1f56b569ca0b
Author: Calvin Johnson <calvin.johnson@oss.nxp.com>
Date:   Mon Mar 15 16:19:05 2021 +0530

    net: mdio: Alphabetically sort header inclusion
    
    [ Upstream commit 1bf343665057312167750509b0c48e8299293ac5 ]
    
    Alphabetically sort header inclusion
    
    Signed-off-by: Calvin Johnson <calvin.johnson@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9709c8b5cdc88b1adb77acdbfd6e8a3f942d9af5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Mar 19 16:21:09 2022 -0700

    gpiolib: acpi: use correct format characters
    
    [ Upstream commit 213d266ebfb1621aab79cfe63388facc520a1381 ]
    
    When compiling with -Wformat, clang emits the following warning:
    
      gpiolib-acpi.c:393:4: warning: format specifies type 'unsigned char' but the argument has type 'int' [-Wformat]
                            pin);
                            ^~~
    
    So warning that '%hhX' is paired with an 'int' is all just completely
    mindless and wrong. Sadly, I can see a different bogus warning reason
    why people would want to use '%02hhX'.
    
    Again, the *sane* thing from a human perspective is to use '%02X. But
    if the compiler doesn't do any range analysis at all, it could decide
    that "Oh, that print format could need up to 8 bytes of space in the
    result". Using '%02hhX' would cut that down to two.
    
    And since we use
    
            char ev_name[5];
    
    and currently use "_%c%02hhX" as the format string, even a compiler
    that doesn't notice that "pin <= 255" test that guards this all will
    go "OK, that's at most 4 bytes and the final NUL termination, so it's
    fine".
    
    While a compiler - like gcc - that only sees that the original source
    of the 'pin' value is a 'unsigned short' array, and then doesn't take
    the "pin <= 255" into account, will warn like this:
    
      gpiolib-acpi.c: In function 'acpi_gpiochip_request_interrupt':
      gpiolib-acpi.c:206:24: warning: '%02X' directive writing between 2 and 4 bytes into a region of size 3 [-Wformat-overflow=]
           sprintf(ev_name, "_%c%02X",
                                ^~~~
      gpiolib-acpi.c:206:20: note: directive argument in the range [0, 65535]
    
    because gcc isn't being very good at that argument range analysis either.
    
    In other words, the original use of 'hhx' was bogus to begin with, and
    due to *another* compiler warning being bad, and we had that bad code
    being written back in 2016 to work around _that_ compiler warning
    (commit e40a3ae1f794: "gpio: acpi: work around false-positive
    -Wstring-overflow warning").
    
    Sadly, two different bad compiler warnings together does not make for
    one good one.
    
    It just makes for even more pain.
    
    End result: I think the simplest and cleanest option is simply the
    proposed change which undoes that '%hhX' change for gcc, and replaces
    it with just using a slightly bigger stack allocation. It's not like
    a 5-byte allocation is in any way likely to have saved any actual stack,
    since all the other variables in that function are 'int' or bigger.
    
    False-positive compiler warnings really do make people write worse
    code, and that's a problem. But on a scale of bad code, I feel that
    extending the buffer trivially is better than adding a pointless cast
    that literally makes no sense.
    
    At least in this case the end result isn't unreadable or buggy. We've
    had several cases of bad compiler warnings that caused changes that
    were actually horrendously wrong.
    
    Fixes: e40a3ae1f794 ("gpio: acpi: work around false-positive -Wstring-overflow warning")
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d67c900f1947d64ba8a64f693504bcaab8d9000c
Author: Guillaume Nault <gnault@redhat.com>
Date:   Wed Apr 6 16:18:54 2022 +0200

    veth: Ensure eth header is in skb's linear part
    
    [ Upstream commit 726e2c5929de841fdcef4e2bf995680688ae1b87 ]
    
    After feeding a decapsulated packet to a veth device with act_mirred,
    skb_headlen() may be 0. But veth_xmit() calls __dev_forward_skb(),
    which expects at least ETH_HLEN byte of linear data (as
    __dev_forward_skb2() calls eth_type_trans(), which pulls ETH_HLEN bytes
    unconditionally).
    
    Use pskb_may_pull() to ensure veth_xmit() respects this constraint.
    
    kernel BUG at include/linux/skbuff.h:2328!
    RIP: 0010:eth_type_trans+0xcf/0x140
    Call Trace:
     <IRQ>
     __dev_forward_skb2+0xe3/0x160
     veth_xmit+0x6e/0x250 [veth]
     dev_hard_start_xmit+0xc7/0x200
     __dev_queue_xmit+0x47f/0x520
     ? skb_ensure_writable+0x85/0xa0
     ? skb_mpls_pop+0x98/0x1c0
     tcf_mirred_act+0x442/0x47e [act_mirred]
     tcf_action_exec+0x86/0x140
     fl_classify+0x1d8/0x1e0 [cls_flower]
     ? dma_pte_clear_level+0x129/0x1a0
     ? dma_pte_clear_level+0x129/0x1a0
     ? prb_fill_curr_block+0x2f/0xc0
     ? skb_copy_bits+0x11a/0x220
     __tcf_classify+0x58/0x110
     tcf_classify_ingress+0x6b/0x140
     __netif_receive_skb_core.constprop.0+0x47d/0xfd0
     ? __iommu_dma_unmap_swiotlb+0x44/0x90
     __netif_receive_skb_one_core+0x3d/0xa0
     netif_receive_skb+0x116/0x170
     be_process_rx+0x22f/0x330 [be2net]
     be_poll+0x13c/0x370 [be2net]
     __napi_poll+0x2a/0x170
     net_rx_action+0x22f/0x2f0
     __do_softirq+0xca/0x2a8
     __irq_exit_rcu+0xc1/0xe0
     common_interrupt+0x83/0xa0
    
    Fixes: e314dbdc1c0d ("[NET]: Virtual ethernet device driver.")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 845f44ce3d9f13e45a1e4bedbe7c15a262568523
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Wed Apr 6 14:22:41 2022 +0300

    net/sched: flower: fix parsing of ethertype following VLAN header
    
    [ Upstream commit 2105f700b53c24aa48b65c15652acc386044d26a ]
    
    A tc flower filter matching TCA_FLOWER_KEY_VLAN_ETH_TYPE is expected to
    match the L2 ethertype following the first VLAN header, as confirmed by
    linked discussion with the maintainer. However, such rule also matches
    packets that have additional second VLAN header, even though filter has
    both eth_type and vlan_ethtype set to "ipv4". Looking at the code this
    seems to be mostly an artifact of the way flower uses flow dissector.
    First, even though looking at the uAPI eth_type and vlan_ethtype appear
    like a distinct fields, in flower they are all mapped to the same
    key->basic.n_proto. Second, flow dissector skips following VLAN header as
    no keys for FLOW_DISSECTOR_KEY_CVLAN are set and eventually assigns the
    value of n_proto to last parsed header. With these, such filters ignore any
    headers present between first VLAN header and first "non magic"
    header (ipv4 in this case) that doesn't result
    FLOW_DISSECT_RET_PROTO_AGAIN.
    
    Fix the issue by extending flow dissector VLAN key structure with new
    'vlan_eth_type' field that matches first ethertype following previously
    parsed VLAN header. Modify flower classifier to set the new
    flow_dissector_key_vlan->vlan_eth_type with value obtained from
    TCA_FLOWER_KEY_VLAN_ETH_TYPE/TCA_FLOWER_KEY_CVLAN_ETH_TYPE uAPIs.
    
    Link: https://lore.kernel.org/all/Yjhgi48BpTGh6dig@nanopsycho/
    Fixes: 9399ae9a6cb2 ("net_sched: flower: Add vlan support")
    Fixes: d64efd0926ba ("net/sched: flower: Add supprt for matching on QinQ vlan headers")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85ee17ca21cf92989e8c923e3ea4514c291e9d38
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Wed Apr 6 13:51:32 2022 -0400

    SUNRPC: Fix the svc_deferred_event trace class
    
    [ Upstream commit 4d5004451ab2218eab94a30e1841462c9316ba19 ]
    
    Fix a NULL deref crash that occurs when an svc_rqst is deferred
    while the sunrpc tracing subsystem is enabled. svc_revisit() sets
    dr->xprt to NULL, so it can't be relied upon in the tracepoint to
    provide the remote's address.
    
    Unfortunately we can't revert the "svc_deferred_class" hunk in
    commit ece200ddd54b ("sunrpc: Save remote presentation address in
    svc_xprt for trace events") because there is now a specific check
    of event format specifiers for unsafe dereferences. The warning
    that check emits is:
    
      event svc_defer_recv has unsafe dereference of argument 1
    
    A "%pISpc" format specifier with a "struct sockaddr *" is indeed
    flagged by this check.
    
    Instead, take the brute-force approach used by the svcrdma_qp_error
    tracepoint. Convert the dr::addr field into a presentation address
    in the TP_fast_assign() arm of the trace event, and store that as
    a string. This fix can be backported to -stable kernels.
    
    In the meantime, commit c6ced22997ad ("tracing: Update print fmt
    check to handle new __get_sockaddr() macro") is now in v5.18, so
    this wonky fix can be replaced with __sockaddr() and friends
    properly during the v5.19 merge window.
    
    Fixes: ece200ddd54b ("sunrpc: Save remote presentation address in svc_xprt for trace events")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af12dd71235cf9f06ed3e98b1c28f55951effa6d
Author: Kyle Copperfield <kmcopper@danwin1210.me>
Date:   Sat Nov 20 13:23:02 2021 +0100

    media: rockchip/rga: do proper error checking in probe
    
    [ Upstream commit 6150f276073a1480030242a7e006a89e161d6cd6 ]
    
    The latest fix for probe error handling contained a typo that causes
    probing to fail with the following message:
    
      rockchip-rga: probe of ff680000.rga failed with error -12
    
    This patch fixes the typo.
    
    Fixes: e58430e1d4fd (media: rockchip/rga: fix error handling in probe)
    Reviewed-by: Dragan Simic <dragan.simic@gmail.com>
    Signed-off-by: Kyle Copperfield <kmcopper@danwin1210.me>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5637129712023680c1b165a758c2c4d702bcd199
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Mar 18 09:28:13 2022 +0000

    firmware: arm_scmi: Fix sorting of retrieved clock rates
    
    [ Upstream commit 23274739a5b6166f74d8d9cb5243d7bf6b46aab9 ]
    
    During SCMI Clock protocol initialization, after having retrieved from the
    SCMI platform all the available discrete rates for a specific clock, the
    clock rates array is sorted, unfortunately using a pointer to its end as
    a base instead of its start, so that sorting does not work.
    
    Fix invocation of sort() passing as base a pointer to the start of the
    retrieved clock rates array.
    
    Link: https://lore.kernel.org/r/20220318092813.49283-1-cristian.marussi@arm.com
    Fixes: dccec73de91d ("firmware: arm_scmi: Keep the discrete clock rates sorted")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16c628b0c6faa2fab1a75ffce80860f8106cf002
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Mar 9 11:01:43 2022 +0000

    memory: atmel-ebi: Fix missing of_node_put in atmel_ebi_probe
    
    [ Upstream commit 6f296a9665ba5ac68937bf11f96214eb9de81baa ]
    
    The device_node pointer is returned by of_parse_phandle() with refcount
    incremented. We should use of_node_put() on it when done.
    
    Fixes: 87108dc78eb8 ("memory: atmel-ebi: Enable the SMC clock if specified")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220309110144.22412-1-linmq006@gmail.com
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb66641f81060a5a5d88f85d2aeb73860edc79df
Author: Rob Clark <robdclark@chromium.org>
Date:   Thu Mar 17 11:45:49 2022 -0700

    drm/msm: Add missing put_task_struct() in debugfs path
    
    [ Upstream commit ac3e4f42d5ec459f701743debd9c1ad2f2247402 ]
    
    Fixes: 25faf2f2e065 ("drm/msm: Show process names in gem_describe")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Link: https://lore.kernel.org/r/20220317184550.227991-1-robdclark@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 921fdc45a08456e456ae031dfa2b0996173097db
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Mar 24 08:36:45 2022 -0700

    btrfs: remove unused variable in btrfs_{start,write}_dirty_block_groups()
    
    commit 6d4a6b515c39f1f8763093e0f828959b2fbc2f45 upstream.
    
    Clang's version of -Wunused-but-set-variable recently gained support for
    unary operations, which reveals two unused variables:
    
      fs/btrfs/block-group.c:2949:6: error: variable 'num_started' set but not used [-Werror,-Wunused-but-set-variable]
              int num_started = 0;
                  ^
      fs/btrfs/block-group.c:3116:6: error: variable 'num_started' set but not used [-Werror,-Wunused-but-set-variable]
              int num_started = 0;
                  ^
      2 errors generated.
    
    These variables appear to be unused from their introduction, so just
    remove them to silence the warnings.
    
    Fixes: c9dc4c657850 ("Btrfs: two stage dirty block group writeout")
    Fixes: 1bbc621ef284 ("Btrfs: allow block group cache writeout outside critical section in commit")
    CC: stable@vger.kernel.org # 5.4+
    Link: https://github.com/ClangBuiltLinux/linux/issues/1614
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d131318bb8765839e45c0e55fd1f57483e62a50
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Feb 25 13:06:46 2022 -0600

    ACPI: processor idle: Check for architectural support for LPI
    
    commit eb087f305919ee8169ad65665610313e74260463 upstream.
    
    When `osc_pc_lpi_support_confirmed` is set through `_OSC` and `_LPI` is
    populated then the cpuidle driver assumes that LPI is fully functional.
    
    However currently the kernel only provides architectural support for LPI
    on ARM.  This leads to high power consumption on X86 platforms that
    otherwise try to enable LPI.
    
    So probe whether or not LPI support is implemented before enabling LPI in
    the kernel.  This is done by overloading `acpi_processor_ffh_lpi_probe` to
    check whether it returns `-EOPNOTSUPP`. It also means that all future
    implementations of `acpi_processor_ffh_lpi_probe` will need to follow
    these semantics as well.
    
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 503934df3108c75bb4f913c6d483df2ae2c3eff0
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Feb 25 13:06:45 2022 -0600

    cpuidle: PSCI: Move the `has_lpi` check to the beginning of the function
    
    commit 01f6c7338ce267959975da65d86ba34f44d54220 upstream.
    
    Currently the first thing checked is whether the PCSI cpu_suspend function
    has been initialized.
    
    Another change will be overloading `acpi_processor_ffh_lpi_probe` and
    calling it sooner.  So make the `has_lpi` check the first thing checked
    to prepare for that change.
    
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfa98ffc42f16a432b77e438e2fefcdb942eeb04
Author: Lin Ma <linma@zju.edu.cn>
Date:   Thu Nov 11 22:14:02 2021 +0800

    hamradio: remove needs_free_netdev to avoid UAF
    
    commit 81b1d548d00bcd028303c4f3150fa753b9b8aa71 upstream.
    
    The former patch "defer 6pack kfree after unregister_netdev" reorders
    the kfree of two buffer after the unregister_netdev to prevent the race
    condition. It also adds free_netdev() function in sixpack_close(), which
    is a direct copy from the similar code in mkiss_close().
    
    However, in sixpack driver, the flag needs_free_netdev is set to true in
    sp_setup(), hence the unregister_netdev() will free the netdev
    automatically. Therefore, as the sp is netdev_priv, use-after-free
    occurs.
    
    This patch removes the needs_free_netdev = true and just let the
    free_netdev to finish this deallocation task.
    
    Fixes: 0b9111922b1f ("hamradio: defer 6pack kfree after unregister_netdev")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Link: https://lore.kernel.org/r/20211111141402.7551-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Xu Jia <xujia39@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80a4df14643f78b14f1e8e2c7f9ca3da41b01654
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 8 18:37:59 2021 +0800

    hamradio: defer 6pack kfree after unregister_netdev
    
    commit 0b9111922b1f399aba6ed1e1b8f2079c3da1aed8 upstream.
    
    There is a possible race condition (use-after-free) like below
    
     (USE)                       |  (FREE)
      dev_queue_xmit             |
       __dev_queue_xmit          |
        __dev_xmit_skb           |
         sch_direct_xmit         | ...
          xmit_one               |
           netdev_start_xmit     | tty_ldisc_kill
            __netdev_start_xmit  |  6pack_close
             sp_xmit             |   kfree
              sp_encaps          |
                                 |
    
    According to the patch "defer ax25 kfree after unregister_netdev", this
    patch reorder the kfree after the unregister_netdev to avoid the possible
    UAF as the unregister_netdev() is well synchronized and won't return if
    there is a running routine.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Xu Jia <xujia39@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0c31f192f38c76c2ab09469dd1e636984fb9093
Author: Felix Kuehling <Felix.Kuehling@amd.com>
Date:   Wed Apr 7 18:19:58 2021 -0400

    drm/amdkfd: Use drm_priv to pass VM from KFD to amdgpu
    
    commit b40a6ab2cf9213923bf8e821ce7fa7f6a0a26990 upstream.
    
    amdgpu_amdkfd_gpuvm_alloc_memory_of_gpu needs the drm_priv to allow mmap
    to access the BO through the corresponding file descriptor. The VM can
    also be extracted from drm_priv, so drm_priv can replace the vm parameter
    in the kfd2kgd interface.
    
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Philip Yang <philip.yang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [This is a partial cherry-pick of the upstream commit.]
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

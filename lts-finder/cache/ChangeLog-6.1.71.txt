commit 38fb82ecd144fa22c5e41cb6e56f1fa8c98d6f61
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jan 5 15:18:41 2024 +0100

    Linux 6.1.71
    
    Link: https://lore.kernel.org/r/20240103164856.169912722@linuxfoundation.org
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Kelsey Steele <kelseysteele@linux.microsoft.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Namjae Jeon <linkinjeon@kernel.org>
    Tested-by: Yann Sionneau <ysionneau@kalrayinc.com>
    Tested-by: kernelci.org bot <bot@kernelci.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74c4c7d57cf2fbb6f596c6b16f5dcf6e4f9a0da3
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Thu Jan 4 20:40:50 2024 +0900

    Revert "platform/x86: p2sb: Allow p2sb_bar() calls during PCI device probe"
    
    commit b20712e853305cbd04673f02b7e52ba5b12c11a9 upstream.
    
    This reverts commit b28ff7a7c3245d7f62acc20f15b4361292fe4117.
    
    The commit introduced P2SB device scan and resource cache during the
    boot process to avoid deadlock. But it caused detection failure of
    IDE controllers on old systems [1]. The IDE controllers on old systems
    and P2SB devices on newer systems have same PCI DEVFN. It is suspected
    the confusion between those two is the failure cause. Revert the change
    at this moment until the proper solution gets ready.
    
    Link: https://lore.kernel.org/platform-driver-x86/CABq1_vjfyp_B-f4LAL6pg394bP6nDFyvg110TOLHHb0x4aCPeg@mail.gmail.com/T/#m07b30468d9676fc5e3bb2122371121e4559bb383 [1]
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Link: https://lore.kernel.org/r/20240104114050.3142690-1-shinichiro.kawasaki@wdc.com
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7709b16bdbd5d7700c811073b87d975180de49f6
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Fri Oct 27 16:31:26 2023 -0700

    tracing/kprobes: Fix symbol counting logic by looking at modules as well
    
    commit 926fe783c8a64b33997fec405cf1af3e61aed441 upstream.
    
    Recent changes to count number of matching symbols when creating
    a kprobe event failed to take into account kernel modules. As such, it
    breaks kprobes on kernel module symbols, by assuming there is no match.
    
    Fix this my calling module_kallsyms_on_each_symbol() in addition to
    kallsyms_on_each_match_symbol() to perform a proper counting.
    
    Link: https://lore.kernel.org/all/20231027233126.2073148-1-andrii@kernel.org/
    
    Cc: Francis Laniel <flaniel@linux.microsoft.com>
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Fixes: b022f0c7e404 ("tracing/kprobes: Return EADDRNOTAVAIL when func matches several symbols")
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: Song Liu <song@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Hao Wei Tee <angelsl@in04.sg>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dd295341dc17dc886bc0cdf24ef88150fed6526
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Tue Oct 25 15:41:41 2022 +0200

    kallsyms: Make module_kallsyms_on_each_symbol generally available
    
    commit 73feb8d5fa3b755bb51077c0aabfb6aa556fd498 upstream.
    
    Making module_kallsyms_on_each_symbol generally available, so it
    can be used outside CONFIG_LIVEPATCH option in following changes.
    
    Rather than adding another ifdef option let's make the function
    generally available (when CONFIG_KALLSYMS and CONFIG_MODULES
    options are defined).
    
    Cc: Christoph Hellwig <hch@lst.de>
    Acked-by: Song Liu <song@kernel.org>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Link: https://lore.kernel.org/r/20221025134148.3300700-2-jolsa@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29cb16577189b1db9b39d4efce5e37a7c4acc183
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Oct 4 12:21:25 2022 +0300

    device property: Allow const parameter to dev_fwnode()
    
    commit b295d484b97081feba72b071ffcb72fb4638ccfd upstream.
    
    It's not fully correct to take a const parameter pointer to a struct
    and return a non-const pointer to a member of that struct.
    
    Instead, introduce a const version of the dev_fwnode() API which takes
    and returns const pointers and use it where it's applicable.
    
    With this, convert dev_fwnode() to be a macro wrapper on top of const
    and non-const APIs that chooses one based on the type.
    
    Suggested-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Fixes: aade55c86033 ("device property: Add const qualifier to device_get_match_data() parameter")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Link: https://lore.kernel.org/r/20221004092129.19412-2-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7b04372179e2f4d1693787c8d06a4b8de5f0d0c
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Mar 13 11:58:37 2023 +0100

    spi: Constify spi parameters of chip select APIs
    
    commit d2f19eec510424caa55ea949f016ddabe2d8173a upstream.
    
    The "spi" parameters of spi_get_chipselect() and spi_get_csgpiod() can
    be const.
    
    Fixes: 303feb3cc06ac066 ("spi: Add APIs in spi core to set/get spi->chip_select and spi->cs_gpiod")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/b112de79e7a1e9095a3b6ff22b639f39e39d7748.1678704562.git.geert+renesas@glider.be
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9a01938e07910224d4a2fd00583725d686c3f38
Author: NeilBrown <neilb@suse.de>
Date:   Tue Sep 12 11:25:00 2023 +1000

    NFSD: fix possible oops when nfsd/pool_stats is closed.
    
    commit 88956eabfdea7d01d550535af120d4ef265b1d02 upstream.
    
    If /proc/fs/nfsd/pool_stats is open when the last nfsd thread exits, then
    when the file is closed a NULL pointer is dereferenced.
    This is because nfsd_pool_stats_release() assumes that the
    pointer to the svc_serv cannot become NULL while a reference is held.
    
    This used to be the case but a recent patch split nfsd_last_thread() out
    from nfsd_put(), and clearing the pointer is done in nfsd_last_thread().
    
    This is easily reproduced by running
       rpc.nfsd 8 ; ( rpc.nfsd 0;true) < /proc/fs/nfsd/pool_stats
    
    Fortunately nfsd_pool_stats_release() has easy access to the svc_serv
    pointer, and so can call svc_put() on it directly.
    
    Fixes: 9f28a971ee9f ("nfsd: separate nfsd_last_thread() from nfsd_put()")
    Signed-off-by: NeilBrown <neilb@suse.de>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 899ac41804d896fea05fa77302eaab11a81e8f8a
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Mon Dec 18 23:07:12 2023 -0500

    ring-buffer: Fix slowpath of interrupted event
    
    commit b803d7c664d55705831729d2f2e29c874bcd62ea upstream.
    
    To synchronize the timestamps with the ring buffer reservation, there are
    two timestamps that are saved in the buffer meta data.
    
    1. before_stamp
    2. write_stamp
    
    When the two are equal, the write_stamp is considered valid, as in, it may
    be used to calculate the delta of the next event as the write_stamp is the
    timestamp of the previous reserved event on the buffer.
    
    This is done by the following:
    
     /*A*/  w = current position on the ring buffer
            before = before_stamp
            after = write_stamp
            ts = read current timestamp
    
            if (before != after) {
                    write_stamp is not valid, force adding an absolute
                    timestamp.
            }
    
     /*B*/  before_stamp = ts
    
     /*C*/  write = local_add_return(event length, position on ring buffer)
    
            if (w == write - event length) {
                    /* Nothing interrupted between A and C */
     /*E*/          write_stamp = ts;
                    delta = ts - after
                    /*
                     * If nothing interrupted again,
                     * before_stamp == write_stamp and write_stamp
                     * can be used to calculate the delta for
                     * events that come in after this one.
                     */
            } else {
    
                    /*
                     * The slow path!
                     * Was interrupted between A and C.
                     */
    
    This is the place that there's a bug. We currently have:
    
                    after = write_stamp
                    ts = read current timestamp
    
     /*F*/          if (write == current position on the ring buffer &&
                        after < ts && cmpxchg(write_stamp, after, ts)) {
    
                            delta = ts - after;
    
                    } else {
                            delta = 0;
                    }
    
    The assumption is that if the current position on the ring buffer hasn't
    moved between C and F, then it also was not interrupted, and that the last
    event written has a timestamp that matches the write_stamp. That is the
    write_stamp is valid.
    
    But this may not be the case:
    
    If a task context event was interrupted by softirq between B and C.
    
    And the softirq wrote an event that got interrupted by a hard irq between
    C and E.
    
    and the hard irq wrote an event (does not need to be interrupted)
    
    We have:
    
     /*B*/ before_stamp = ts of normal context
    
       ---> interrupted by softirq
    
            /*B*/ before_stamp = ts of softirq context
    
              ---> interrupted by hardirq
    
                    /*B*/ before_stamp = ts of hard irq context
                    /*E*/ write_stamp = ts of hard irq context
    
                    /* matches and write_stamp valid */
              <----
    
            /*E*/ write_stamp = ts of softirq context
    
            /* No longer matches before_stamp, write_stamp is not valid! */
    
       <---
    
     w != write - length, go to slow path
    
    // Right now the order of events in the ring buffer is:
    //
    // |-- softirq event --|-- hard irq event --|-- normal context event --|
    //
    
     after = write_stamp (this is the ts of softirq)
     ts = read current timestamp
    
     if (write == current position on the ring buffer [true] &&
         after < ts [true] && cmpxchg(write_stamp, after, ts) [true]) {
    
            delta = ts - after  [Wrong!]
    
    The delta is to be between the hard irq event and the normal context
    event, but the above logic made the delta between the softirq event and
    the normal context event, where the hard irq event is between the two. This
    will shift all the remaining event timestamps on the sub-buffer
    incorrectly.
    
    The write_stamp is only valid if it matches the before_stamp. The cmpxchg
    does nothing to help this.
    
    Instead, the following logic can be done to fix this:
    
            before = before_stamp
            ts = read current timestamp
            before_stamp = ts
    
            after = write_stamp
    
            if (write == current position on the ring buffer &&
                after == before && after < ts) {
    
                    delta = ts - after
    
            } else {
                    delta = 0;
            }
    
    The above will only use the write_stamp if it still matches before_stamp
    and was tested to not have changed since C.
    
    As a bonus, with this logic we do not need any 64-bit cmpxchg() at all!
    
    This means the 32-bit rb_time_t workaround can finally be removed. But
    that's for a later time.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231218175229.58ec3daf@gandalf.local.home/
    Link: https://lore.kernel.org/linux-trace-kernel/20231218230712.3a76b081@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Fixes: dd93942570789 ("ring-buffer: Do not try to put back write_stamp")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0105571f80edb96f81bb4bbdd5233a9130dc345b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Dec 19 19:44:49 2023 +0100

    netfilter: nf_tables: skip set commit for deleted/destroyed sets
    
    commit 7315dc1e122c85ffdfc8defffbb8f8b616c2eb1a upstream.
    
    NFT_MSG_DELSET deactivates all elements in the set, skip
    set->ops->commit() to avoid the unnecessary clone (for the pipapo case)
    as well as the sync GC cycle, which could deactivate again expired
    elements in such set.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Reported-by: Kevin Rich <kevinrich1337@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4768430d5a69801c0cd405e56f9de23866c7c92c
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Fri Dec 15 08:18:10 2023 -0500

    ring-buffer: Remove useless update to write_stamp in rb_try_to_discard()
    
    commit 083e9f65bd215582bf8f6a920db729fadf16704f upstream.
    
    When filtering is enabled, a temporary buffer is created to place the
    content of the trace event output so that the filter logic can decide
    from the trace event output if the trace event should be filtered out or
    not. If it is to be filtered out, the content in the temporary buffer is
    simply discarded, otherwise it is written into the trace buffer.
    
    But if an interrupt were to come in while a previous event was using that
    temporary buffer, the event written by the interrupt would actually go
    into the ring buffer itself to prevent corrupting the data on the
    temporary buffer. If the event is to be filtered out, the event in the
    ring buffer is discarded, or if it fails to discard because another event
    were to have already come in, it is turned into padding.
    
    The update to the write_stamp in the rb_try_to_discard() happens after a
    fix was made to force the next event after the discard to use an absolute
    timestamp by setting the before_stamp to zero so it does not match the
    write_stamp (which causes an event to use the absolute timestamp).
    
    But there's an effort in rb_try_to_discard() to put back the write_stamp
    to what it was before the event was added. But this is useless and
    wasteful because nothing is going to be using that write_stamp for
    calculations as it still will not match the before_stamp.
    
    Remove this useless update, and in doing so, we remove another
    cmpxchg64()!
    
    Also update the comments to reflect this change as well as remove some
    extra white space in another comment.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231215081810.1f4f38fe@rorschach.local.home
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Joel Fernandes <joel@joelfernandes.org>
    Cc: Vincent Donnefort   <vdonnefort@google.com>
    Fixes: b2dd797543cf ("ring-buffer: Force absolute timestamp on discard of event")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f33c4e4cabcee3d3c6819317405b70744e0bf90b
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Dec 28 09:51:49 2023 -0500

    tracing: Fix blocked reader of snapshot buffer
    
    commit 39a7dc23a1ed0fe81141792a09449d124c5953bd upstream.
    
    If an application blocks on the snapshot or snapshot_raw files, expecting
    to be woken up when a snapshot occurs, it will not happen. Or it may
    happen with an unexpected result.
    
    That result is that the application will be reading the main buffer
    instead of the snapshot buffer. That is because when the snapshot occurs,
    the main and snapshot buffers are swapped. But the reader has a descriptor
    still pointing to the buffer that it originally connected to.
    
    This is fine for the main buffer readers, as they may be blocked waiting
    for a watermark to be hit, and when a snapshot occurs, the data that the
    main readers want is now on the snapshot buffer.
    
    But for waiters of the snapshot buffer, they are waiting for an event to
    occur that will trigger the snapshot and they can then consume it quickly
    to save the snapshot before the next snapshot occurs. But to do this, they
    need to read the new snapshot buffer, not the old one that is now
    receiving new data.
    
    Also, it does not make sense to have a watermark "buffer_percent" on the
    snapshot buffer, as the snapshot buffer is static and does not receive new
    data except all at once.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231228095149.77f5b45d@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Fixes: debdd57f5145f ("tracing: Make a snapshot feature available from userspace")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09640899e6b79d17a74db1794d2c6e2d3b8076f6
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 26 12:59:02 2023 -0500

    ring-buffer: Fix wake ups when buffer_percent is set to 100
    
    commit 623b1f896fa8a669a277ee5a258307a16c7377a3 upstream.
    
    The tracefs file "buffer_percent" is to allow user space to set a
    water-mark on how much of the tracing ring buffer needs to be filled in
    order to wake up a blocked reader.
    
     0 - is to wait until any data is in the buffer
     1 - is to wait for 1% of the sub buffers to be filled
     50 - would be half of the sub buffers are filled with data
     100 - is not to wake the waiter until the ring buffer is completely full
    
    Unfortunately the test for being full was:
    
            dirty = ring_buffer_nr_dirty_pages(buffer, cpu);
            return (dirty * 100) > (full * nr_pages);
    
    Where "full" is the value for "buffer_percent".
    
    There is two issues with the above when full == 100.
    
    1. dirty * 100 > 100 * nr_pages will never be true
       That is, the above is basically saying that if the user sets
       buffer_percent to 100, more pages need to be dirty than exist in the
       ring buffer!
    
    2. The page that the writer is on is never considered dirty, as dirty
       pages are only those that are full. When the writer goes to a new
       sub-buffer, it clears the contents of that sub-buffer.
    
    That is, even if the check was ">=" it would still not be equal as the
    most pages that can be considered "dirty" is nr_pages - 1.
    
    To fix this, add one to dirty and use ">=" in the compare.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231226125902.4a057f1d@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Fixes: 03329f9939781 ("tracing: Add tracefs file buffer_percentage")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ee9d9291b95d9227e1a2eb50d6d89afcff7aad7
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Mon Dec 18 13:58:36 2023 +0000

    mm/memory-failure: check the mapcount of the precise page
    
    commit c79c5a0a00a9457718056b588f312baadf44e471 upstream.
    
    A process may map only some of the pages in a folio, and might be missed
    if it maps the poisoned page but not the head page.  Or it might be
    unnecessarily hit if it maps the head page, but not the poisoned page.
    
    Link: https://lkml.kernel.org/r/20231218135837.3310403-3-willy@infradead.org
    Fixes: 7af446a841a2 ("HWPOISON, hugetlb: enable error handling path for hugepage")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb21c9780a316953a61af6657b55f745722783bb
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Mon Dec 18 13:58:37 2023 +0000

    mm/memory-failure: cast index to loff_t before shifting it
    
    commit 39ebd6dce62d8cfe3864e16148927a139f11bc9a upstream.
    
    On 32-bit systems, we'll lose the top bits of index because arithmetic
    will be performed in unsigned long instead of unsigned long long.  This
    affects files over 4GB in size.
    
    Link: https://lkml.kernel.org/r/20231218135837.3310403-4-willy@infradead.org
    Fixes: 6100e34b2526 ("mm, memory_failure: Teach memory_failure() about dev_pagemap pages")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be72d197b2281e2ee3f28017fc9be1ab17e26d16
Author: Charan Teja Kalla <quic_charante@quicinc.com>
Date:   Thu Dec 14 04:58:41 2023 +0000

    mm: migrate high-order folios in swap cache correctly
    
    commit fc346d0a70a13d52fe1c4bc49516d83a42cd7c4c upstream.
    
    Large folios occupy N consecutive entries in the swap cache instead of
    using multi-index entries like the page cache.  However, if a large folio
    is re-added to the LRU list, it can be migrated.  The migration code was
    not aware of the difference between the swap cache and the page cache and
    assumed that a single xas_store() would be sufficient.
    
    This leaves potentially many stale pointers to the now-migrated folio in
    the swap cache, which can lead to almost arbitrary data corruption in the
    future.  This can also manifest as infinite loops with the RCU read lock
    held.
    
    [willy@infradead.org: modifications to the changelog & tweaked the fix]
    Fixes: 3417013e0d18 ("mm/migrate: Add folio_migrate_mapping()")
    Link: https://lkml.kernel.org/r/20231214045841.961776-1-willy@infradead.org
    Signed-off-by: Charan Teja Kalla <quic_charante@quicinc.com>
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reported-by: Charan Teja Kalla <quic_charante@quicinc.com>
    Closes: https://lkml.kernel.org/r/1700569840-17327-1-git-send-email-quic_charante@quicinc.com
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8df791470fb900d215ee8ad731f66861a4f1f79
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Dec 13 14:23:24 2023 +0800

    mm/filemap: avoid buffered read/write race to read inconsistent data
    
    commit e2c27b803bb664748e090d99042ac128b3f88d92 upstream.
    
    The following concurrency may cause the data read to be inconsistent with
    the data on disk:
    
                 cpu1                           cpu2
    ------------------------------|------------------------------
                                   // Buffered write 2048 from 0
                                   ext4_buffered_write_iter
                                    generic_perform_write
                                     copy_page_from_iter_atomic
                                     ext4_da_write_end
                                      ext4_da_do_write_end
                                       block_write_end
                                        __block_commit_write
                                         folio_mark_uptodate
    // Buffered read 4096 from 0          smp_wmb()
    ext4_file_read_iter                   set_bit(PG_uptodate, folio_flags)
     generic_file_read_iter            i_size_write // 2048
      filemap_read                     unlock_page(page)
       filemap_get_pages
        filemap_get_read_batch
        folio_test_uptodate(folio)
         ret = test_bit(PG_uptodate, folio_flags)
         if (ret)
          smp_rmb();
          // Ensure that the data in page 0-2048 is up-to-date.
    
                                   // New buffered write 2048 from 2048
                                   ext4_buffered_write_iter
                                    generic_perform_write
                                     copy_page_from_iter_atomic
                                     ext4_da_write_end
                                      ext4_da_do_write_end
                                       block_write_end
                                        __block_commit_write
                                         folio_mark_uptodate
                                          smp_wmb()
                                          set_bit(PG_uptodate, folio_flags)
                                       i_size_write // 4096
                                       unlock_page(page)
    
       isize = i_size_read(inode) // 4096
       // Read the latest isize 4096, but without smp_rmb(), there may be
       // Load-Load disorder resulting in the data in the 2048-4096 range
       // in the page is not up-to-date.
       copy_page_to_iter
       // copyout 4096
    
    In the concurrency above, we read the updated i_size, but there is no read
    barrier to ensure that the data in the page is the same as the i_size at
    this point, so we may copy the unsynchronized page out.  Hence adding the
    missing read memory barrier to fix this.
    
    This is a Load-Load reordering issue, which only occurs on some weak
    mem-ordering architectures (e.g.  ARM64, ALPHA), but not on strong
    mem-ordering architectures (e.g.  X86).  And theoretically the problem
    doesn't only happen on ext4, filesystems that call filemap_read() but
    don't hold inode lock (e.g.  btrfs, f2fs, ubifs ...) will have this
    problem, while filesystems with inode lock (e.g.  xfs, nfs) won't have
    this problem.
    
    Link: https://lkml.kernel.org/r/20231213062324.739009-1-libaokun1@huawei.com
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Andreas Dilger <adilger.kernel@dilger.ca>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Dave Chinner <david@fromorbit.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Cc: yangerkun <yangerkun@huawei.com>
    Cc: Yu Kuai <yukuai3@huawei.com>
    Cc: Zhang Yi <yi.zhang@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b954b92ef08fd8d42f50f55da59c12eedd0083e2
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Fri Dec 29 15:39:11 2023 +0900

    platform/x86: p2sb: Allow p2sb_bar() calls during PCI device probe
    
    commit b28ff7a7c3245d7f62acc20f15b4361292fe4117 upstream.
    
    p2sb_bar() unhides P2SB device to get resources from the device. It
    guards the operation by locking pci_rescan_remove_lock so that parallel
    rescans do not find the P2SB device. However, this lock causes deadlock
    when PCI bus rescan is triggered by /sys/bus/pci/rescan. The rescan
    locks pci_rescan_remove_lock and probes PCI devices. When PCI devices
    call p2sb_bar() during probe, it locks pci_rescan_remove_lock again.
    Hence the deadlock.
    
    To avoid the deadlock, do not lock pci_rescan_remove_lock in p2sb_bar().
    Instead, do the lock at fs_initcall. Introduce p2sb_cache_resources()
    for fs_initcall which gets and caches the P2SB resources. At p2sb_bar(),
    refer the cache and return to the caller.
    
    Suggested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Fixes: 9745fb07474f ("platform/x86/intel: Add Primary to Sideband (P2SB) bridge support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/linux-pci/6xb24fjmptxxn5js2fjrrddjae6twex5bjaftwqsuawuqqqydx@7cl3uik5ef6j/
    Link: https://lore.kernel.org/r/20231229063912.2517922-2-shinichiro.kawasaki@wdc.com
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a3bbbadac4be9d30b45e9f1134e94294f79ce77
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Wed Dec 20 15:52:11 2023 +0900

    ksmbd: fix slab-out-of-bounds in smb_strndup_from_utf16()
    
    commit d10c77873ba1e9e6b91905018e29e196fd5f863d upstream.
    
    If ->NameOffset/Length is bigger than ->CreateContextsOffset/Length,
    ksmbd_check_message doesn't validate request buffer it correctly.
    So slab-out-of-bounds warning from calling smb_strndup_from_utf16()
    in smb2_open() could happen. If ->NameLength is non-zero, Set the larger
    of the two sums (Name and CreateContext size) as the offset and length of
    the data area.
    
    Reported-by: Yang Chaoming <lometsj@live.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9c5f0fd5cd5a38ea5420fa93b2669a092b556ba
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Dec 26 08:15:24 2023 +0000

    block: renumber QUEUE_FLAG_HW_WC
    
    [ Upstream commit 02d374f3418df577c850f0cd45c3da9245ead547 ]
    
    For the QUEUE_FLAG_HW_WC to actually work, it needs to have a separate
    number from QUEUE_FLAG_FUA, doh.
    
    Fixes: 43c9835b144c ("block: don't allow enabling a cache on devices that don't support it")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20231226081524.180289-1-hch@lst.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e21b5fc5b88774feb518436562ee09e6ee3c2bdc
Author: Louis Chauvet <louis.chauvet@bootlin.com>
Date:   Mon Dec 4 16:49:03 2023 +0100

    spi: atmel: Fix clock issue when using devices with different polarities
    
    [ Upstream commit fc70d643a2f6678cbe0f5c86433c1aeb4d613fcc ]
    
    The current Atmel SPI controller driver (v2) behaves incorrectly when
    using two SPI devices with different clock polarities and GPIO CS.
    
    When switching from one device to another, the controller driver first
    enables the CS and then applies whatever configuration suits the targeted
    device (typically, the polarities). The side effect of such order is the
    apparition of a spurious clock edge after enabling the CS when the clock
    polarity needs to be inverted wrt. the previous configuration of the
    controller.
    
    This parasitic clock edge is problematic when the SPI device uses that edge
    for internal processing, which is perfectly legitimate given that its CS
    was asserted. Indeed, devices such as HVS8080 driven by driver gpio-sr in
    the kernel are shift registers and will process this first clock edge to
    perform a first register shift. In this case, the first bit gets lost and
    the whole data block that will later be read by the kernel is all shifted
    by one.
    
        Current behavior:
          The actual switching of the clock polarity only occurs after the CS
          when the controller sends the first message:
    
        CLK ------------\   /-\ /-\
                        |   | | | |    . . .
                        \---/ \-/ \
        CS  -----\
                 |
                 \------------------
    
                 ^      ^   ^
                 |      |   |
                 |      |   Actual clock of the message sent
                 |      |
                 |      Change of clock polarity, which occurs with the first
                 |      write to the bus. This edge occurs when the CS is
                 |      already asserted, and can be interpreted as
                 |      the first clock edge by the receiver.
                 |
                 GPIO CS toggle
    
    This issue is specific to this controller because while the SPI core
    performs the operations in the right order, the controller however does
    not. In practice, the controller only applies the clock configuration right
    before the first transmission.
    
    So this is not a problem when using the controller's dedicated CS, as the
    controller does things correctly, but it becomes a problem when you need to
    change the clock polarity and use an external GPIO for the CS.
    
    One possible approach to solve this problem is to send a dummy message
    before actually activating the CS, so that the controller applies the clock
    polarity beforehand.
    
    New behavior:
    
    CLK     ------\      /-\     /-\      /-\     /-\
                  |      | | ... | |      | | ... | |
                  \------/ \-   -/ \------/ \-   -/ \------
    
    CS      -\/-----------------------\
             ||                       |
             \/                       \---------------------
             ^    ^       ^           ^    ^
             |    |       |           |    |
             |    |       |           |    Expected clock cycles when
             |    |       |           |    sending the message
             |    |       |           |
             |    |       |           Actual GPIO CS activation, occurs inside
             |    |       |           the driver
             |    |       |
             |    |       Dummy message, to trigger clock polarity
             |    |       reconfiguration. This message is not received and
             |    |       processed by the device because CS is low.
             |    |
             |    Change of clock polarity, forced by the dummy message. This
             |    time, the edge is not detected by the receiver.
             |
             This small spike in CS activation is due to the fact that the
             spi-core activates the CS gpio before calling the driver's
             set_cs callback, which deactivates this gpio again until the
             clock polarity is correct.
    
    To avoid having to systematically send a dummy packet, the driver keeps
    track of the clock's current polarity. In this way, it only sends the dummy
    packet when necessary, ensuring that the clock will have the correct
    polarity when the CS is toggled.
    
    There could be two hardware problems with this patch:
    1- Maybe the small CS activation peak can confuse SPI devices
    2- If on a design, a single wire is used to select two devices depending
    on its state, the dummy message may disturb them.
    
    Fixes: 5ee36c989831 ("spi: atmel_spi update chipselect handling")
    Cc:  <stable@vger.kernel.org>
    Signed-off-by: Louis Chauvet <louis.chauvet@bootlin.com>
    Link: https://msgid.link/r/20231204154903.11607-1-louis.chauvet@bootlin.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 025cf65f68d47b1da5c03f90933e93c2902e5243
Author: Amit Kumar Mahapatra <amit.kumar-mahapatra@amd.com>
Date:   Fri Jan 20 00:23:30 2023 +0530

    spi: Add APIs in spi core to set/get spi->chip_select and spi->cs_gpiod
    
    [ Upstream commit 303feb3cc06ac0665d0ee9c1414941200e60e8a3 ]
    
    Supporting multi-cs in spi core and spi controller drivers would require
    the chip_select & cs_gpiod members of struct spi_device to be an array.
    But changing the type of these members to array would break the spi driver
    functionality. To make the transition smoother introduced four new APIs to
    get/set the spi->chip_select & spi->cs_gpiod and replaced all
    spi->chip_select and spi->cs_gpiod references in spi core with the API
    calls.
    While adding multi-cs support in further patches the chip_select & cs_gpiod
    members of the spi_device structure would be converted to arrays & the
    "idx" parameter of the APIs would be used as array index i.e.,
    spi->chip_select[idx] & spi->cs_gpiod[idx] respectively.
    
    Suggested-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Amit Kumar Mahapatra <amit.kumar-mahapatra@amd.com>
    Reviewed-by: Michal Simek <michal.simek@amd.com>
    Link: https://lore.kernel.org/r/20230119185342.2093323-2-amit.kumar-mahapatra@amd.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: fc70d643a2f6 ("spi: atmel: Fix clock issue when using devices with different polarities")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64a4eb2982db793835777085ecc621d074cfb10f
Author: Tudor Ambarus <tudor.ambarus@linaro.org>
Date:   Thu Nov 17 12:52:44 2022 +0200

    spi: Reintroduce spi_set_cs_timing()
    
    [ Upstream commit 684a47847ae639689e7b823251975348a8e5434f ]
    
    commit 4ccf359849ce ("spi: remove spi_set_cs_timing()"), removed the
    method as noboby used it. Nobody used it probably because some SPI
    controllers use some default large cs-setup time that covers the usual
    cs-setup time required by the spi devices. There are though SPI controllers
    that have a smaller granularity for the cs-setup time and their default
    value can't fulfill the spi device requirements. That's the case for the
    at91 QSPI IPs where the default cs-setup time is half of the QSPI clock
    period. This was observed when using an sst26vf064b SPI NOR flash which
    needs a spi-cs-setup-ns = <7>; in order to be operated close to its maximum
    104 MHz frequency.
    
    Call spi_set_cs_timing() in spi_setup() just before calling spi_set_cs(),
    as the latter needs the CS timings already set.
    If spi->controller->set_cs_timing is not set, the method will return 0.
    There's no functional impact expected for the existing drivers. Even if the
    spi-mt65xx.c and spi-tegra114.c drivers set the set_cs_timing method,
    there's no user for them as of now. The only tested user of this support
    will be a SPI NOR flash that comunicates with the Atmel QSPI controller for
    which the support follows in the next patches.
    
    One will notice that this support is a bit different from the one that was
    removed in commit 4ccf359849ce ("spi: remove spi_set_cs_timing()"),
    because this patch adapts to the changes done after the removal: the move
    of the cs delays to the spi device, the retirement of the lelgacy GPIO
    handling. The mutex handling was removed from spi_set_cs_timing() because
    we now always call spi_set_cs_timing() in spi_setup(), which already
    handles the spi->controller->io_mutex, so use the mutex handling from
    spi_setup().
    
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Link: https://lore.kernel.org/r/20221117105249.115649-4-tudor.ambarus@microchip.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: fc70d643a2f6 ("spi: atmel: Fix clock issue when using devices with different polarities")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95e21657ffe90b031ed1e789255389fb2122fdb4
Author: Helge Deller <deller@gmx.de>
Date:   Thu Dec 28 11:36:03 2023 +0100

    linux/export: Ensure natural alignment of kcrctab array
    
    [ Upstream commit 753547de0daecbdbd1af3618987ddade325d9aaa ]
    
    The ___kcrctab section holds an array of 32-bit CRC values.
    Add a .balign 4 to tell the linker the correct memory alignment.
    
    Fixes: f3304ecd7f06 ("linux/export: use inline assembler to populate symbol CRCs")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb4f791cb2de1140d0fbcedfe9e791ff364021d7
Author: NeilBrown <neilb@suse.de>
Date:   Fri Dec 15 11:56:31 2023 +1100

    nfsd: call nfsd_last_thread() before final nfsd_put()
    
    [ Upstream commit 2a501f55cd641eb4d3c16a2eab0d678693fac663 ]
    
    If write_ports_addfd or write_ports_addxprt fail, they call nfsd_put()
    without calling nfsd_last_thread().  This leaves nn->nfsd_serv pointing
    to a structure that has been freed.
    
    So remove 'static' from nfsd_last_thread() and call it when the
    nfsd_serv is about to be destroyed.
    
    Fixes: ec52361df99b ("SUNRPC: stop using ->sv_nrthreads as a refcount")
    Signed-off-by: NeilBrown <neilb@suse.de>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03d68ffc48b94cc1e15bbf3b4f16f1e1e4fa286a
Author: NeilBrown <neilb@suse.de>
Date:   Mon Jul 31 16:48:32 2023 +1000

    nfsd: separate nfsd_last_thread() from nfsd_put()
    
    [ Upstream commit 9f28a971ee9fdf1bf8ce8c88b103f483be610277 ]
    
    Now that the last nfsd thread is stopped by an explicit act of calling
    svc_set_num_threads() with a count of zero, we only have a limited
    number of places that can happen, and don't need to call
    nfsd_last_thread() in nfsd_put()
    
    So separate that out and call it at the two places where the number of
    threads is set to zero.
    
    Move the clearing of ->nfsd_serv and the call to svc_xprt_destroy_all()
    into nfsd_last_thread(), as they are really part of the same action.
    
    nfsd_put() is now a thin wrapper around svc_put(), so make it a static
    inline.
    
    nfsd_put() cannot be called after nfsd_last_thread(), so in a couple of
    places we have to use svc_put() instead.
    
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Stable-dep-of: 2a501f55cd64 ("nfsd: call nfsd_last_thread() before final nfsd_put()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 481561a431fff2e00b353fabe59cef7ba6d6f946
Author: Nuno Sa <nuno.sa@analog.com>
Date:   Thu Nov 2 13:52:58 2023 +0100

    iio: imu: adis16475: add spi_device_id table
    
    [ Upstream commit ee4d79055aeea27f1b8c42233cc0c90d0a8b5355 ]
    
    This prevents the warning message "SPI driver has no spi_device_id for..."
    when registering the driver. More importantly, it makes sure that
    module autoloading works as spi relies on spi: modaliases and not of.
    
    While at it, move the of_device_id table to it's natural place.
    
    Fixes: fff7352bf7a3c ("iio: imu: Add support for adis16475")
    Signed-off-by: Nuno Sa <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20231102125258.3284830-1-nuno.sa@analog.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 027eaeaf3294607104e90e84cec3f55e792cab22
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Oct 20 22:54:21 2022 +0300

    spi: Introduce spi_get_device_match_data() helper
    
    [ Upstream commit aea672d054a21782ed8450c75febb6ba3c208ca4 ]
    
    The proposed spi_get_device_match_data() helper is for retrieving
    a driver data associated with the ID in an ID table. First, it tries
    to get driver data of the device enumerated by firmware interface
    (usually Device Tree or ACPI). If none is found it falls back to
    the SPI ID table matching.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221020195421.10482-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: ee4d79055aee ("iio: imu: adis16475: add spi_device_id table")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 457a219c845318045e3f4de9d9581bbea7180441
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Wed Dec 13 16:22:43 2023 +0300

    usb: fotg210-hcd: delete an incorrect bounds test
    
    [ Upstream commit 7fbcd195e2b8cc952e4aeaeb50867b798040314c ]
    
    Here "temp" is the number of characters that we have written and "size"
    is the size of the buffer.  The intent was clearly to say that if we have
    written to the end of the buffer then stop.
    
    However, for that to work the comparison should have been done on the
    original "size" value instead of the "size -= temp" value.  Not only
    will that not trigger when we want to, but there is a small chance that
    it will trigger incorrectly before we want it to and we break from the
    loop slightly earlier than intended.
    
    This code was recently changed from using snprintf() to scnprintf().  With
    snprintf() we likely would have continued looping and passed a negative
    size parameter to snprintf().  This would have triggered an annoying
    WARN().  Now that we have converted to scnprintf() "size" will never
    drop below 1 and there is no real need for this test.  We could change
    the condition to "if (temp <= 1) goto done;" but just deleting the test
    is cleanest.
    
    Fixes: 7d50195f6c50 ("usb: host: Faraday fotg210-hcd driver")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Lee Jones <lee@kernel.org>
    Link: https://lore.kernel.org/r/ZXmwIwHe35wGfgzu@suswa
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 119127273b5dd8e3a92c7a15679c2c61f01297bb
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Dec 12 15:50:35 2023 +0200

    ARM: dts: Fix occasional boot hang for am3 usb
    
    [ Upstream commit 9b6a51aab5f5f9f71d2fa16e8b4d530e1643dfcb ]
    
    With subtle timings changes, we can now sometimes get an external abort on
    non-linefetch error booting am3 devices at sysc_reset(). This is because
    of a missing reset delay needed for the usb target module.
    
    Looks like we never enabled the delay earlier for am3, although a similar
    issue was seen earlier with a similar usb setup for dm814x as described in
    commit ebf244148092 ("ARM: OMAP2+: Use srst_udelay for USB on dm814x").
    
    Cc: stable@vger.kernel.org
    Fixes: 0782e8572ce4 ("ARM: dts: Probe am335x musb with ti-sysc")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98235bc13aa8cc939d297fcc68852d9721fa25b3
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:32 2023 +0900

    ksmbd: fix wrong allocation size update in smb2_open()
    
    [ Upstream commit a9f106c765c12d2f58aa33431bd8ce8e9d8a404a ]
    
    When client send SMB2_CREATE_ALLOCATION_SIZE create context, ksmbd update
    old size to ->AllocationSize in smb2 create response. ksmbd_vfs_getattr()
    should be called after it to get updated stat result.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04b8e04f8f89f255ae3fec250b149e3ffd724a7c
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:31 2023 +0900

    ksmbd: avoid duplicate opinfo_put() call on error of smb21_lease_break_ack()
    
    [ Upstream commit 658609d9a618d8881bf549b5893c0ba8fcff4526 ]
    
    opinfo_put() could be called twice on error of smb21_lease_break_ack().
    It will cause UAF issue if opinfo is referenced on other places.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34f7d5b5c972f34d65fc51782a1fb5b63f50eaa2
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:30 2023 +0900

    ksmbd: lazy v2 lease break on smb2_write()
    
    [ Upstream commit c2a721eead71202a0d8ddd9b56ec8dce652c71d1 ]
    
    Don't immediately send directory lease break notification on smb2_write().
    Instead, It postpones it until smb2_close().
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 500c7a5e9af82667e16bd6cbce4d1287e6e644e2
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:29 2023 +0900

    ksmbd: send v2 lease break notification for directory
    
    [ Upstream commit d47d9886aeef79feba7adac701a510d65f3682b5 ]
    
    If client send different parent key, different client guid, or there is
    no parent lease key flags in create context v2 lease, ksmbd send lease
    break to client.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1993959460c001b30f2e40d8dc810c333dfb6591
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:28 2023 +0900

    ksmbd: downgrade RWH lease caching state to RH for directory
    
    [ Upstream commit eb547407f3572d2110cb1194ecd8865b3371a7a4 ]
    
    RWH(Read + Write + Handle) caching state is not supported for directory.
    ksmbd downgrade it to RH for directory if client send RWH caching lease
    state.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fcb46df346022c167082e400ad8a7bf0297db31
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:27 2023 +0900

    ksmbd: set v2 lease capability
    
    [ Upstream commit 18dd1c367c31d0a060f737d48345747662369b64 ]
    
    Set SMB2_GLOBAL_CAP_DIRECTORY_LEASING to ->capabilities to inform server
    support directory lease to client.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3eddc811a7c85ea8361959fed465296e5f3c23c7
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:26 2023 +0900

    ksmbd: set epoch in create context v2 lease
    
    [ Upstream commit d045850b628aaf931fc776c90feaf824dca5a1cf ]
    
    To support v2 lease(directory lease), ksmbd set epoch in create context
    v2 lease response.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52a32eafd0a5982068116d4e6a5fac4298075402
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:25 2023 +0900

    ksmbd: don't update ->op_state as OPLOCK_STATE_NONE on error
    
    [ Upstream commit cd80ce7e68f1624ac29cd0a6b057789d1236641e ]
    
    ksmbd set ->op_state as OPLOCK_STATE_NONE on lease break ack error.
    op_state of lease should not be updated because client can send lease
    break ack again. This patch fix smb2.lease.breaking2 test failure.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bc46c2370ee8e0e023f8f3773c6b6c9d63fc41e
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:24 2023 +0900

    ksmbd: move setting SMB2_FLAGS_ASYNC_COMMAND and AsyncId
    
    [ Upstream commit 9ac45ac7cf65b0623ceeab9b28b307a08efa22dc ]
    
    Directly set SMB2_FLAGS_ASYNC_COMMAND flags and AsyncId in smb2 header of
    interim response instead of current response header.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9aa5c19084e509ce2468cafb9ea393474d9a95e
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:23 2023 +0900

    ksmbd: release interim response after sending status pending response
    
    [ Upstream commit 2a3f7857ec742e212d6cee7fbbf7b0e2ae7f5161 ]
    
    Add missing release async id and delete interim response entry after
    sending status pending response. This only cause when smb2 lease is enable.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 013bf453af0d491746f75e65da82322df898b2f8
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:22 2023 +0900

    ksmbd: move oplock handling after unlock parent dir
    
    [ Upstream commit 2e450920d58b4991a436c8cecf3484bcacd8e535 ]
    
    ksmbd should process secound parallel smb2 create request during waiting
    oplock break ack. parent lock range that is too large in smb2_open() causes
    smb2_open() to be serialized. Move the oplock handling to the bottom of
    smb2_open() and make it called after parent unlock. This fixes the failure
    of smb2.lease.breaking1 testcase.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20dd92c237566627da03e0614545fbaf90d1cee6
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:21 2023 +0900

    ksmbd: separately allocate ci per dentry
    
    [ Upstream commit 4274a9dc6aeb9fea66bffba15697a35ae8983b6a ]
    
    xfstests generic/002 test fail when enabling smb2 leases feature.
    This test create hard link file, but removeal failed.
    ci has a file open count to count file open through the smb client,
    but in the case of hard link files, The allocation of ci per inode
    cause incorrectly open count for file deletion. This patch allocate
    ci per dentry to counts open counts for hard link.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5651972e5c5e32c718a6c01ca57bef038dbb0a9
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:20 2023 +0900

    ksmbd: fix possible deadlock in smb2_open
    
    [ Upstream commit 864fb5d3716303a045c3ffb397f651bfd37bfb36 ]
    
    [ 8743.393379] ======================================================
    [ 8743.393385] WARNING: possible circular locking dependency detected
    [ 8743.393391] 6.4.0-rc1+ #11 Tainted: G           OE
    [ 8743.393397] ------------------------------------------------------
    [ 8743.393402] kworker/0:2/12921 is trying to acquire lock:
    [ 8743.393408] ffff888127a14460 (sb_writers#8){.+.+}-{0:0}, at: ksmbd_vfs_setxattr+0x3d/0xd0 [ksmbd]
    [ 8743.393510]
                   but task is already holding lock:
    [ 8743.393515] ffff8880360d97f0 (&type->i_mutex_dir_key#6/1){+.+.}-{3:3}, at: ksmbd_vfs_kern_path_locked+0x181/0x670 [ksmbd]
    [ 8743.393618]
                   which lock already depends on the new lock.
    
    [ 8743.393623]
                   the existing dependency chain (in reverse order) is:
    [ 8743.393628]
                   -> #1 (&type->i_mutex_dir_key#6/1){+.+.}-{3:3}:
    [ 8743.393648]        down_write_nested+0x9a/0x1b0
    [ 8743.393660]        filename_create+0x128/0x270
    [ 8743.393670]        do_mkdirat+0xab/0x1f0
    [ 8743.393680]        __x64_sys_mkdir+0x47/0x60
    [ 8743.393690]        do_syscall_64+0x5d/0x90
    [ 8743.393701]        entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [ 8743.393711]
                   -> #0 (sb_writers#8){.+.+}-{0:0}:
    [ 8743.393728]        __lock_acquire+0x2201/0x3b80
    [ 8743.393737]        lock_acquire+0x18f/0x440
    [ 8743.393746]        mnt_want_write+0x5f/0x240
    [ 8743.393755]        ksmbd_vfs_setxattr+0x3d/0xd0 [ksmbd]
    [ 8743.393839]        ksmbd_vfs_set_dos_attrib_xattr+0xcc/0x110 [ksmbd]
    [ 8743.393924]        compat_ksmbd_vfs_set_dos_attrib_xattr+0x39/0x50 [ksmbd]
    [ 8743.394010]        smb2_open+0x3432/0x3cc0 [ksmbd]
    [ 8743.394099]        handle_ksmbd_work+0x2c9/0x7b0 [ksmbd]
    [ 8743.394187]        process_one_work+0x65a/0xb30
    [ 8743.394198]        worker_thread+0x2cf/0x700
    [ 8743.394209]        kthread+0x1ad/0x1f0
    [ 8743.394218]        ret_from_fork+0x29/0x50
    
    This patch add mnt_want_write() above parent inode lock and remove
    nested mnt_want_write calls in smb2_open().
    
    Fixes: 40b268d384a2 ("ksmbd: add mnt_want_write to ksmbd vfs functions")
    Cc: stable@vger.kernel.org
    Reported-by: Marios Makassikis <mmakassikis@freebox.fr>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aabc944ebf087ee91793729dc127b2378d4f66ec
Author: Zongmin Zhou <zhouzongmin@kylinos.cn>
Date:   Sun Dec 31 16:13:19 2023 +0900

    ksmbd: prevent memory leak on error return
    
    [ Upstream commit 90044481e7cca6cb3125b3906544954a25f1309f ]
    
    When allocated memory for 'new' failed,just return
    will cause memory leak of 'ar'.
    
    Fixes: 1819a9042999 ("ksmbd: reorganize ksmbd_iov_pin_rsp()")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <error27@gmail.com>
    Closes: https://lore.kernel.org/r/202311031837.H3yo7JVl-lkp@intel.com/
    Signed-off-by: Zongmin Zhou<zhouzongmin@kylinos.cn>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4a269bb89dd1963dbaf9eb474e5c98ef4bb8646
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:18 2023 +0900

    ksmbd: fix kernel-doc comment of ksmbd_vfs_kern_path_locked()
    
    [ Upstream commit f6049712e520287ad695e9d4f1572ab76807fa0c ]
    
    Fix argument list that the kdoc format and script verified in
    ksmbd_vfs_kern_path_locked().
    
    fs/smb/server/vfs.c:1207: warning: Function parameter or member 'parent_path'
    not described in 'ksmbd_vfs_kern_path_locked'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 699ad8d03cc5e5af2210b035cd3b76b42c1566c1
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:17 2023 +0900

    ksmbd: no need to wait for binded connection termination at logoff
    
    [ Upstream commit 67797da8a4b82446d42c52b6ee1419a3100d78ff ]
    
    The connection could be binded to the existing session for Multichannel.
    session will be destroyed when binded connections are released.
    So no need to wait for that's connection at logoff.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cf44550814c9ed5968d6d0fbe8e7db8511ba7ce
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:16 2023 +0900

    ksmbd: add support for surrogate pair conversion
    
    [ Upstream commit 0c180317c654a494fe429adbf7bc9b0793caf9e2 ]
    
    ksmbd is missing supporting to convert filename included surrogate pair
    characters. It triggers a "file or folder does not exist" error in
    Windows client.
    
    [Steps to Reproduce for bug]
    1. Create surrogate pair file
     touch $(echo -e '\xf0\x9d\x9f\xa3')
     touch $(echo -e '\xf0\x9d\x9f\xa4')
    
    2. Try to open these files in ksmbd share through Windows client.
    
    This patch update unicode functions not to consider about surrogate pair
    (and IVS).
    
    Reviewed-by: Marios Makassikis <mmakassikis@freebox.fr>
    Tested-by: Marios Makassikis <mmakassikis@freebox.fr>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d26e024a5ead58acd76d7003e0ec3cc1966d2c09
Author: Kangjing Huang <huangkangjing@gmail.com>
Date:   Sun Dec 31 16:13:15 2023 +0900

    ksmbd: fix missing RDMA-capable flag for IPoIB device in ksmbd_rdma_capable_netdev()
    
    [ Upstream commit ecce70cf17d91c3dd87a0c4ea00b2d1387729701 ]
    
    Physical ib_device does not have an underlying net_device, thus its
    association with IPoIB net_device cannot be retrieved via
    ops.get_netdev() or ib_device_get_by_netdev(). ksmbd reads physical
    ib_device port GUID from the lower 16 bytes of the hardware addresses on
    IPoIB net_device and match its underlying ib_device using ib_find_gid()
    
    Signed-off-by: Kangjing Huang <huangkangjing@gmail.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Tom Talpey <tom@talpey.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5113f7222554f68faf63d2bd39ba67feee697556
Author: Marios Makassikis <mmakassikis@freebox.fr>
Date:   Sun Dec 31 16:13:14 2023 +0900

    ksmbd: fix recursive locking in vfs helpers
    
    [ Upstream commit 807252f028c59b9a3bac4d62ad84761548c10f11 ]
    
    Running smb2.rename test from Samba smbtorture suite against a kernel built
    with lockdep triggers a "possible recursive locking detected" warning.
    
    This is because mnt_want_write() is called twice with no mnt_drop_write()
    in between:
      -> ksmbd_vfs_mkdir()
        -> ksmbd_vfs_kern_path_create()
           -> kern_path_create()
              -> filename_create()
                -> mnt_want_write()
           -> mnt_want_write()
    
    Fix this by removing the mnt_want_write/mnt_drop_write calls from vfs
    helpers that call kern_path_create().
    
    Full lockdep trace below:
    
    ============================================
    WARNING: possible recursive locking detected
    6.6.0-rc5 #775 Not tainted
    --------------------------------------------
    kworker/1:1/32 is trying to acquire lock:
    ffff888005ac83f8 (sb_writers#5){.+.+}-{0:0}, at: ksmbd_vfs_mkdir+0xe1/0x410
    
    but task is already holding lock:
    ffff888005ac83f8 (sb_writers#5){.+.+}-{0:0}, at: filename_create+0xb6/0x260
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(sb_writers#5);
      lock(sb_writers#5);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    4 locks held by kworker/1:1/32:
     #0: ffff8880064e4138 ((wq_completion)ksmbd-io){+.+.}-{0:0}, at: process_one_work+0x40e/0x980
     #1: ffff888005b0fdd0 ((work_completion)(&work->work)){+.+.}-{0:0}, at: process_one_work+0x40e/0x980
     #2: ffff888005ac83f8 (sb_writers#5){.+.+}-{0:0}, at: filename_create+0xb6/0x260
     #3: ffff8880057ce760 (&type->i_mutex_dir_key#3/1){+.+.}-{3:3}, at: filename_create+0x123/0x260
    
    Cc: stable@vger.kernel.org
    Fixes: 40b268d384a2 ("ksmbd: add mnt_want_write to ksmbd vfs functions")
    Signed-off-by: Marios Makassikis <mmakassikis@freebox.fr>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42e56982bed195161adbac6368bb003d1acb80cc
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:13 2023 +0900

    ksmbd: fix kernel-doc comment of ksmbd_vfs_setxattr()
    
    [ Upstream commit 3354db668808d5b6d7c5e0cb19ff4c9da4bb5e58 ]
    
    Fix argument list that the kdoc format and script verified in
    ksmbd_vfs_setxattr().
    
    fs/smb/server/vfs.c:929: warning: Function parameter or member 'path'
    not described in 'ksmbd_vfs_setxattr'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 533e6dc4469fab8fc70dd916d38db79ce6e2f24d
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:12 2023 +0900

    ksmbd: reorganize ksmbd_iov_pin_rsp()
    
    [ Upstream commit 1819a904299942b309f687cc0f08b123500aa178 ]
    
    If ksmbd_iov_pin_rsp fail, io vertor should be rollback.
    This patch moves memory allocations to before setting the io vector
    to avoid rollbacks.
    
    Fixes: e2b76ab8b5c9 ("ksmbd: add support for read compound")
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d95c5a541841a46b6a93757ca775eabd9713961
Author: Cheng-Han Wu <hank20010209@gmail.com>
Date:   Sun Dec 31 16:13:11 2023 +0900

    ksmbd: Remove unused field in ksmbd_user struct
    
    [ Upstream commit eacc655e18d1dec9b50660d16a1ddeeb4d6c48f2 ]
    
    fs/smb/server/mgmt/user_config.h:21: Remove the unused field 'failed_login_count' from the ksmbd_user struct.
    
    Signed-off-by: Cheng-Han Wu <hank20010209@gmail.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5929e98f3bb76c04e129b1b9df5231b0d9736634
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:10 2023 +0900

    ksmbd: fix potential double free on smb2_read_pipe() error path
    
    [ Upstream commit 1903e6d0578118e9aab1ee23f4a9de55737d1d05 ]
    
    Fix new smatch warnings:
    fs/smb/server/smb2pdu.c:6131 smb2_read_pipe() error: double free of 'rpc_resp'
    
    Fixes: e2b76ab8b5c9 ("ksmbd: add support for read compound")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7aae713eaf2ac26a9745bbc1a29b61b8b46d134
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:09 2023 +0900

    ksmbd: fix Null pointer dereferences in ksmbd_update_fstate()
    
    [ Upstream commit 414849040fcf11d45025b8ae26c9fd91da1465da ]
    
    Coverity Scan report the following one. This report is a false alarm.
    Because fp is never NULL when rc is zero. This patch add null check for fp
    in ksmbd_update_fstate to make alarm silence.
    
    *** CID 1568583:  Null pointer dereferences  (FORWARD_NULL)
    /fs/smb/server/smb2pdu.c: 3408 in smb2_open()
    3402                    path_put(&path);
    3403                    path_put(&parent_path);
    3404            }
    3405            ksmbd_revert_fsids(work);
    3406     err_out1:
    3407            if (!rc) {
    >>>     CID 1568583:  Null pointer dereferences  (FORWARD_NULL)
    >>>     Passing null pointer "fp" to "ksmbd_update_fstate", which dereferences it.
    3408                    ksmbd_update_fstate(&work->sess->file_table, fp, FP_INITED);
    3409                    rc = ksmbd_iov_pin_rsp(work, (void *)rsp, iov_len);
    3410            }
    3411            if (rc) {
    3412                    if (rc == -EINVAL)
    3413                            rsp->hdr.Status = STATUS_INVALID_PARAMETER;
    
    Fixes: e2b76ab8b5c9 ("ksmbd: add support for read compound")
    Reported-by: Coverity Scan <scan-admin@coverity.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 943cebf9ea3415ddefcd670d24d8883e97ba3d60
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:08 2023 +0900

    ksmbd: fix wrong error response status by using set_smb2_rsp_status()
    
    [ Upstream commit be0f89d4419dc5413a1cf06db3671c9949be0d52 ]
    
    set_smb2_rsp_status() after __process_request() sets the wrong error
    status. This patch resets all iov vectors and sets the error status
    on clean one.
    
    Fixes: e2b76ab8b5c9 ("ksmbd: add support for read compound")
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b58ee8d0b91359554cf219cd4f33872ea2afd66
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:07 2023 +0900

    ksmbd: fix race condition between tree conn lookup and disconnect
    
    [ Upstream commit 33b235a6e6ebe0f05f3586a71e8d281d00f71e2e ]
    
    if thread A in smb2_write is using work-tcon, other thread B use
    smb2_tree_disconnect free the tcon, then thread A will use free'd tcon.
    
                                Time
                                 +
     Thread A                    | Thread A
     smb2_write                  | smb2_tree_disconnect
                                 |
                                 |
                                 |   kfree(tree_conn)
                                 |
      // UAF!                    |
      work->tcon->share_conf     |
                                 +
    
    This patch add state, reference count and lock for tree conn to fix race
    condition issue.
    
    Reported-by: luosili <rootlab@huawei.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0090f0bfc2256ce25054cba1096d71fd0b143c1d
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:06 2023 +0900

    ksmbd: fix race condition from parallel smb2 lock requests
    
    [ Upstream commit 75ac9a3dd65f7eab4d12b0a0f744234b5300a491 ]
    
    There is a race condition issue between parallel smb2 lock request.
    
                                                Time
                                                 +
    Thread A                                     | Thread A
    smb2_lock                                    | smb2_lock
                                                 |
     insert smb_lock to lock_list                |
     spin_unlock(&work->conn->llist_lock)        |
                                                 |
                                                 |   spin_lock(&conn->llist_lock);
                                                 |   kfree(cmp_lock);
                                                 |
     // UAF!                                     |
     list_add(&smb_lock->llist, &rollback_list)  +
    
    This patch swaps the line for adding the smb lock to the rollback list and
    adding the lock list of connection to fix the race issue.
    
    Reported-by: luosili <rootlab@huawei.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6584ca894f30c9674fb1508fd16aa2cf909361b9
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:05 2023 +0900

    ksmbd: fix race condition from parallel smb2 logoff requests
    
    [ Upstream commit 7ca9da7d873ee8024e9548d3366101c2b6843eab ]
    
    If parallel smb2 logoff requests come in before closing door, running
    request count becomes more than 1 even though connection status is set to
    KSMBD_SESS_NEED_RECONNECT. It can't get condition true, and sleep forever.
    This patch fix race condition problem by returning error if connection
    status was already set to KSMBD_SESS_NEED_RECONNECT.
    
    Reported-by: luosili <rootlab@huawei.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3a843caed292c4f986d28edbfe1c171e7f5b8d6
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:04 2023 +0900

    ksmbd: fix race condition with fp
    
    [ Upstream commit 5a7ee91d1154f35418367a6eaae74046fd06ed89 ]
    
    fp can used in each command. If smb2_close command is coming at the
    same time, UAF issue can happen by race condition.
    
                               Time
                                +
    Thread A                    | Thread B1 B2 .... B5
    smb2_open                   | smb2_close
                                |
     __open_id                  |
       insert fp to file_table  |
                                |
                                |   atomic_dec_and_test(&fp->refcount)
                                |   if fp->refcount == 0, free fp by kfree.
     // UAF!                    |
     use fp                     |
                                +
    This patch add f_state not to use freed fp is used and not to free fp in
    use.
    
    Reported-by: luosili <rootlab@huawei.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7345f5dbf66dd1bda6ee626cbd5630b00080599a
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:03 2023 +0900

    ksmbd: check iov vector index in ksmbd_conn_write()
    
    [ Upstream commit 73f949ea87c7d697210653501ca21efe57295327 ]
    
    If ->iov_idx is zero, This means that the iov vector for the response
    was not added during the request process. In other words, it means that
    there is a problem in generating a response, So this patch return as
    an error to avoid NULL pointer dereferencing problem.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8beae8a0a06532741d40f0b28f2db299a72270e4
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:02 2023 +0900

    ksmbd: return invalid parameter error response if smb2 request is invalid
    
    [ Upstream commit f2f11fca5d7112e2f91c4854cddd68a059fdaa4a ]
    
    If smb2 request from client is invalid, The following kernel oops could
    happen. The patch e2b76ab8b5c9: "ksmbd: add support for read compound"
    leads this issue. When request is invalid, It doesn't set anything in
    the response buffer. This patch add missing set invalid parameter error
    response.
    
    [  673.085542] ksmbd: cli req too short, len 184 not 142. cmd:5 mid:109
    [  673.085580] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [  673.085591] #PF: supervisor read access in kernel mode
    [  673.085600] #PF: error_code(0x0000) - not-present page
    [  673.085608] PGD 0 P4D 0
    [  673.085620] Oops: 0000 [#1] PREEMPT SMP NOPTI
    [  673.085631] CPU: 3 PID: 1039 Comm: kworker/3:0 Not tainted 6.6.0-rc2-tmt #16
    [  673.085643] Hardware name: AZW U59/U59, BIOS JTKT001 05/05/2022
    [  673.085651] Workqueue: ksmbd-io handle_ksmbd_work [ksmbd]
    [  673.085719] RIP: 0010:ksmbd_conn_write+0x68/0xc0 [ksmbd]
    [  673.085808] RAX: 0000000000000000 RBX: ffff88811ade4f00 RCX: 0000000000000000
    [  673.085817] RDX: 0000000000000000 RSI: ffff88810c2a9780 RDI: ffff88810c2a9ac0
    [  673.085826] RBP: ffffc900005e3e00 R08: 0000000000000000 R09: 0000000000000000
    [  673.085834] R10: ffffffffa3168160 R11: 63203a64626d736b R12: ffff8881057c8800
    [  673.085842] R13: ffff8881057c8820 R14: ffff8882781b2380 R15: ffff8881057c8800
    [  673.085852] FS:  0000000000000000(0000) GS:ffff888278180000(0000) knlGS:0000000000000000
    [  673.085864] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  673.085872] CR2: 0000000000000000 CR3: 000000015b63c000 CR4: 0000000000350ee0
    [  673.085883] Call Trace:
    [  673.085890]  <TASK>
    [  673.085900]  ? show_regs+0x6a/0x80
    [  673.085916]  ? __die+0x25/0x70
    [  673.085926]  ? page_fault_oops+0x154/0x4b0
    [  673.085938]  ? tick_nohz_tick_stopped+0x18/0x50
    [  673.085954]  ? __irq_work_queue_local+0xba/0x140
    [  673.085967]  ? do_user_addr_fault+0x30f/0x6c0
    [  673.085979]  ? exc_page_fault+0x79/0x180
    [  673.085992]  ? asm_exc_page_fault+0x27/0x30
    [  673.086009]  ? ksmbd_conn_write+0x68/0xc0 [ksmbd]
    [  673.086067]  ? ksmbd_conn_write+0x46/0xc0 [ksmbd]
    [  673.086123]  handle_ksmbd_work+0x28d/0x4b0 [ksmbd]
    [  673.086177]  process_one_work+0x178/0x350
    [  673.086193]  ? __pfx_worker_thread+0x10/0x10
    [  673.086202]  worker_thread+0x2f3/0x420
    [  673.086210]  ? _raw_spin_unlock_irqrestore+0x27/0x50
    [  673.086222]  ? __pfx_worker_thread+0x10/0x10
    [  673.086230]  kthread+0x103/0x140
    [  673.086242]  ? __pfx_kthread+0x10/0x10
    [  673.086253]  ret_from_fork+0x39/0x60
    [  673.086263]  ? __pfx_kthread+0x10/0x10
    [  673.086274]  ret_from_fork_asm+0x1b/0x30
    
    Fixes: e2b76ab8b5c9 ("ksmbd: add support for read compound")
    Reported-by: Tom Talpey <tom@talpey.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e523a26c056728ae7bc9ebce5940914da0edc65c
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:01 2023 +0900

    ksmbd: fix passing freed memory 'aux_payload_buf'
    
    [ Upstream commit 59d8d24f4610333560cf2e8fe3f44cafe30322eb ]
    
    The patch e2b76ab8b5c9: "ksmbd: add support for read compound" leads
    to the following Smatch static checker warning:
    
      fs/smb/server/smb2pdu.c:6329 smb2_read()
            warn: passing freed memory 'aux_payload_buf'
    
    It doesn't matter that we're passing a freed variable because nbytes is
    zero. This patch set "aux_payload_buf = NULL" to make smatch silence.
    
    Fixes: e2b76ab8b5c9 ("ksmbd: add support for read compound")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4b3fd1a95b43f9b86e785da7bf251b98809a07d
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:13:00 2023 +0900

    ksmbd: remove unneeded mark_inode_dirty in set_info_sec()
    
    [ Upstream commit e4e14095cc68a2efefba6f77d95efe1137e751d4 ]
    
    mark_inode_dirty will be called in notify_change().
    This patch remove unneeded mark_inode_dirty in set_info_sec().
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ee419e08fa1a977881ebb19a91833891b70d904
Author: Steve French <stfrench@microsoft.com>
Date:   Sun Dec 31 16:12:59 2023 +0900

    ksmbd: remove experimental warning
    
    [ Upstream commit f5069159f32c8c943e047f22731317463c8e9b84 ]
    
    ksmbd has made significant improvements over the past two
    years and is regularly tested and used.  Remove the experimental
    warning.
    
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83b01f7330d7495601bf836bfe10fe85357fd5ab
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:58 2023 +0900

    ksmbd: add missing calling smb2_set_err_rsp() on error
    
    [ Upstream commit 0e2378eaa2b3a663726cf740d4aaa8a801e2cb31 ]
    
    If some error happen on smb2_sess_setup(), Need to call
    smb2_set_err_rsp() to set error response.
    This patch add missing calling smb2_set_err_rsp() on error.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 422c0cd01693ffeb285167e261109c22ba1f222e
Author: Yang Li <yang.lee@linux.alibaba.com>
Date:   Sun Dec 31 16:12:57 2023 +0900

    ksmbd: Fix one kernel-doc comment
    
    [ Upstream commit bf26f1b4e0918f017775edfeacf6d867204b680b ]
    
    Fix one kernel-doc comment to silence the warning:
    fs/smb/server/smb2pdu.c:4160: warning: Excess function parameter 'infoclass_size' description in 'buffer_check_err'
    
    Signed-off-by: Yang Li <yang.lee@linux.alibaba.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c20105a8975cfdfd475e54601ae9c3f52dc377c0
Author: Atte Heikkilä <atteh.mailbox@gmail.com>
Date:   Sun Dec 31 16:12:56 2023 +0900

    ksmbd: fix `force create mode' and `force directory mode'
    
    [ Upstream commit 65656f5242e500dcfeffa6a0a1519eae14724f86 ]
    
    `force create mode' and `force directory mode' should be bitwise ORed
    with the perms after `create mask' and `directory mask' have been
    applied, respectively.
    
    Signed-off-by: Atte Heikkilä <atteh.mailbox@gmail.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8cf1ebb7de62c7d807707ce4abb69d483629263
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:55 2023 +0900

    ksmbd: fix wrong interim response on compound
    
    [ Upstream commit 041bba4414cda37d00063952c9bff9c3d5812a19 ]
    
    If smb2_lock or smb2_open request is compound, ksmbd could send wrong
    interim response to client. ksmbd allocate new interim buffer instead of
    using resonse buffer to support compound request.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f297df20d93411c0b4ddad7f88ba04a7cd36e77
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:54 2023 +0900

    ksmbd: add support for read compound
    
    [ Upstream commit e2b76ab8b5c9327ab2dae6da05d0752eb2f4771d ]
    
    MacOS sends a compound request including read to the server
    (e.g. open-read-close). So far, ksmbd has not handled read as
    a compound request. For compatibility between ksmbd and an OS that
    supports SMB, This patch provides compound support for read requests.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 673e60c69124dcdf6dba66625568e96c3296f525
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sun Dec 31 16:12:53 2023 +0900

    ksmbd: switch to use kmemdup_nul() helper
    
    [ Upstream commit 084ba46fc41c21ba827fd92e61f78def7a6e52ea ]
    
    Use kmemdup_nul() helper instead of open-coding to
    simplify the code.
    
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a9b91f45e88f99cfa30f03e80ca836b83b7f336
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:52 2023 +0900

    ksmbd: check if a mount point is crossed during path lookup
    
    [ Upstream commit 2b57a4322b1b14348940744fdc02f9a86cbbdbeb ]
    
    Since commit 74d7970febf7 ("ksmbd: fix racy issue from using ->d_parent and
    ->d_name"), ksmbd can not lookup cross mount points. If last component is
    a cross mount point during path lookup, check if it is crossed to follow it
    down. And allow path lookup to cross a mount point when a crossmnt
    parameter is set to 'yes' in smb.conf.
    
    Cc: stable@vger.kernel.org
    Fixes: 74d7970febf7 ("ksmbd: fix racy issue from using ->d_parent and ->d_name")
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d782f42eed93b267cd013935c4a5426aeb9adfca
Author: Wang Ming <machel@vivo.com>
Date:   Sun Dec 31 16:12:51 2023 +0900

    ksmbd: Fix unsigned expression compared with zero
    
    [ Upstream commit 0266a2f791294e0b4ba36f4a1d89b8615ea3cac0 ]
    
    The return value of the ksmbd_vfs_getcasexattr() is signed.
    However, the return value is being assigned to an unsigned
    variable and subsequently recasted, causing warnings. Use
    a signed type.
    
    Signed-off-by: Wang Ming <machel@vivo.com>
    Acked-by: Tom Talpey <tom@talpey.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48cc49384048f0037691aa7f589d93199dde81da
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Sun Dec 31 16:12:50 2023 +0900

    ksmbd: Replace one-element array with flexible-array member
    
    [ Upstream commit 11d5e2061e973a8d4ff2b95a114b4b8ef8652633 ]
    
    One-element arrays are deprecated, and we are replacing them with flexible
    array members instead. So, replace one-element array with flexible-array
    member in struct smb_negotiate_req.
    
    This results in no differences in binary output.
    
    Link: https://github.com/KSPP/linux/issues/79
    Link: https://github.com/KSPP/linux/issues/317
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63fbfd212c82761830dc61a4d7876885f7549916
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Sun Dec 31 16:12:49 2023 +0900

    ksmbd: Use struct_size() helper in ksmbd_negotiate_smb_dialect()
    
    [ Upstream commit 5211cc8727ed9701b04976ab47602955e5641bda ]
    
    Prefer struct_size() over open-coded versions.
    
    Link: https://github.com/KSPP/linux/issues/160
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7ab53bd81b044b5301290bae086de83619eb7d2
Author: Lu Hongfei <luhongfei@vivo.com>
Date:   Sun Dec 31 16:12:48 2023 +0900

    ksmbd: Replace the ternary conditional operator with min()
    
    [ Upstream commit f65fadb0422537d73f9a6472861852dc2f7a6a5b ]
    
    It would be better to replace the traditional ternary conditional
    operator with min() in compare_sids.
    
    Signed-off-by: Lu Hongfei <luhongfei@vivo.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 143da652cee848c56faa03af95608df7ebf7aef2
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:47 2023 +0900

    ksmbd: use kvzalloc instead of kvmalloc
    
    [ Upstream commit 81a94b27847f7d2e499415db14dd9dc7c22b19b0 ]
    
    Use kvzalloc instead of kvmalloc.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de43cdaa88c27c7e3d54e48ead7dff58eec27da1
Author: Lu Hongfei <luhongfei@vivo.com>
Date:   Sun Dec 31 16:12:46 2023 +0900

    ksmbd: Change the return value of ksmbd_vfs_query_maximal_access to void
    
    [ Upstream commit ccb5889af97c03c67a83fcd649602034578c0d61 ]
    
    The return value of ksmbd_vfs_query_maximal_access is meaningless,
    it is better to modify it to void.
    
    Signed-off-by: Lu Hongfei <luhongfei@vivo.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit deb79f20be21db51369d45ea5a3002c480a19d00
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:45 2023 +0900

    ksmbd: return a literal instead of 'err' in ksmbd_vfs_kern_path_locked()
    
    [ Upstream commit cf5e7f734f445588a30350591360bca2f6bf016f ]
    
    Return a literal instead of 'err' in ksmbd_vfs_kern_path_locked().
    
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe7977b872a6f74d91d1b7679362a076c0464231
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:44 2023 +0900

    ksmbd: use kzalloc() instead of __GFP_ZERO
    
    [ Upstream commit f87d4f85f43f0d4b12ef64b015478d8053e1a33e ]
    
    Use kzalloc() instead of __GFP_ZERO.
    
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 294a275f374b945c31b00497e9337834bc62da99
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:43 2023 +0900

    ksmbd: remove unused ksmbd_tree_conn_share function
    
    [ Upstream commit 7bd9f0876fdef00f4e155be35e6b304981a53f80 ]
    
    Remove unused ksmbd_tree_conn_share function.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b069977b2b471a0496d82fa71d46248d732a384d
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:42 2023 +0900

    ksmbd: add mnt_want_write to ksmbd vfs functions
    
    [ Upstream commit 40b268d384a22276dca1450549f53eed60e21deb ]
    
    ksmbd is doing write access using vfs helpers. There are the cases that
    mnt_want_write() is not called in vfs helper. This patch add missing
    mnt_want_write() to ksmbd vfs functions.
    
    Cc: stable@vger.kernel.org
    Cc: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13a5045011ec989e490228c29dc1eea5d73f354b
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:41 2023 +0900

    ksmbd: fix posix_acls and acls dereferencing possible ERR_PTR()
    
    [ Upstream commit 25933573ef48f3586f559c2cac6c436c62dcf63f ]
    
    Dan reported the following error message:
    
    fs/smb/server/smbacl.c:1296 smb_check_perm_dacl()
        error: 'posix_acls' dereferencing possible ERR_PTR()
    fs/smb/server/vfs.c:1323 ksmbd_vfs_make_xattr_posix_acl()
        error: 'posix_acls' dereferencing possible ERR_PTR()
    fs/smb/server/vfs.c:1830 ksmbd_vfs_inherit_posix_acl()
        error: 'acls' dereferencing possible ERR_PTR()
    
    __get_acl() returns a mix of error pointers and NULL. This change it
    with IS_ERR_OR_NULL().
    
    Fixes: e2f34481b24d ("cifsd: add server-side procedures for SMB3")
    Cc: stable@vger.kernel.org
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1524884c3efb603193278735a00f1295452c1fd4
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:40 2023 +0900

    ksmbd: call putname after using the last component
    
    [ Upstream commit 6fe55c2799bc29624770c26f98ba7b06214f43e0 ]
    
    last component point filename struct. Currently putname is called after
    vfs_path_parent_lookup(). And then last component is used for
    lookup_one_qstr_excl(). name in last component is freed by previous
    calling putname(). And It cause file lookup failure when testing
    generic/464 test of xfstest.
    
    Fixes: 74d7970febf7 ("ksmbd: fix racy issue from using ->d_parent and ->d_name")
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30a1344198aa90f77063d91e80c021fe90748135
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:39 2023 +0900

    ksmbd: fix uninitialized pointer read in smb2_create_link()
    
    [ Upstream commit df14afeed2e6c1bbadef7d2f9c46887bbd6d8d94 ]
    
    There is a case that file_present is true and path is uninitialized.
    This patch change file_present is set to false by default and set to
    true when patch is initialized.
    
    Fixes: 74d7970febf7 ("ksmbd: fix racy issue from using ->d_parent and ->d_name")
    Reported-by: Coverity Scan <scan-admin@coverity.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d4e21e369f3c09e6a25056b9af2be9571855665
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:38 2023 +0900

    ksmbd: fix uninitialized pointer read in ksmbd_vfs_rename()
    
    [ Upstream commit 48b47f0caaa8a9f05ed803cb4f335fa3a7bfc622 ]
    
    Uninitialized rd.delegated_inode can be used in vfs_rename().
    Fix this by setting rd.delegated_inode to NULL to avoid the uninitialized
    read.
    
    Fixes: 74d7970febf7 ("ksmbd: fix racy issue from using ->d_parent and ->d_name")
    Reported-by: Coverity Scan <scan-admin@coverity.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6927ffe7479c72e7ebf885507227266a75f7c97d
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:37 2023 +0900

    ksmbd: fix racy issue from using ->d_parent and ->d_name
    
    [ Upstream commit 74d7970febf7e9005375aeda0df821d2edffc9f7 ]
    
    Al pointed out that ksmbd has racy issue from using ->d_parent and ->d_name
    in ksmbd_vfs_unlink and smb2_vfs_rename(). and use new lock_rename_child()
    to lock stable parent while underlying rename racy.
    Introduce vfs_path_parent_lookup helper to avoid out of share access and
    export vfs functions like the following ones to use
    vfs_path_parent_lookup().
     - rename __lookup_hash() to lookup_one_qstr_excl().
     - export lookup_one_qstr_excl().
     - export getname_kernel() and putname().
    
    vfs_path_parent_lookup() is used for parent lookup of destination file
    using absolute pathname given from FILE_RENAME_INFORMATION request.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e99fbb4296ad0a2f8c6674246a345045ef1eccb
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Dec 31 16:12:36 2023 +0900

    fs: introduce lock_rename_child() helper
    
    [ Upstream commit 9bc37e04823b5280dd0f22b6680fc23fe81ca325 ]
    
    Pass the dentry of a source file and the dentry of a destination directory
    to lock parent inodes for rename. As soon as this function returns,
    ->d_parent of the source file dentry is stable and inodes are properly
    locked for calling vfs-rename. This helper is needed for ksmbd server.
    rename request of SMB protocol has to rename an opened file, no matter
    which directory it's in.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 965eb8650737e626544f67545d597895f1ee252b
Author: David Disseldorp <ddiss@suse.de>
Date:   Sun Dec 31 16:12:35 2023 +0900

    ksmbd: remove unused compression negotiate ctx packing
    
    [ Upstream commit af36c51e0e111de4e908328d49cba49de758f66e ]
    
    build_compression_ctxt() is currently unreachable due to
    conn.compress_algorithm remaining zero (SMB3_COMPRESS_NONE).
    
    It appears to have been broken in a couple of subtle ways over the
    years:
    - prior to d6c9ad23b421 ("ksmbd: use the common definitions for
      NEGOTIATE_PROTOCOL") smb2_compression_ctx.DataLength was set to 8,
      which didn't account for the single CompressionAlgorithms flexible
      array member.
    - post d6c9ad23b421 smb2_compression_capabilities_context
      CompressionAlgorithms is a three member array, while
      CompressionAlgorithmCount is set to indicate only one member.
      assemble_neg_contexts() ctxt_size is also incorrectly incremented by
      sizeof(struct smb2_compression_capabilities_context) + 2, which
      assumes one flexible array member.
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49d9f6ad1ee064c52662538fc48b2ada33ae3fd2
Author: David Disseldorp <ddiss@suse.de>
Date:   Sun Dec 31 16:12:34 2023 +0900

    ksmbd: avoid duplicate negotiate ctx offset increments
    
    [ Upstream commit a12a07a85aff72e19520328f78b1c64d2281a1ec ]
    
    Both pneg_ctxt and ctxt_size change in unison, with each adding the
    length of the previously added context, rounded up to an eight byte
    boundary.
    Drop pneg_ctxt increments and instead use the ctxt_size offset when
    passing output pointers to per-context helper functions. This slightly
    simplifies offset tracking and shaves off a few text bytes.
    Before (x86-64 gcc 7.5):
       text    data     bss     dec     hex filename
     213234    8677     672  222583   36577 ksmbd.ko
    
    After:
       text    data     bss     dec     hex filename
     213218    8677     672  222567   36567 ksmbd.ko
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2182d96ec0b790a0cf981889bf7e9e615102d4ee
Author: David Disseldorp <ddiss@suse.de>
Date:   Sun Dec 31 16:12:33 2023 +0900

    ksmbd: set NegotiateContextCount once instead of every inc
    
    [ Upstream commit 34e8ccf9ce24b6b2e275bbe35cd392e18fbbd369 ]
    
    There are no early returns, so marshalling the incremented
    NegotiateContextCount with every context is unnecessary.
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d271ef5e5cac8a470076891b248a28a2c57fb1e
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:32 2023 +0900

    ksmbd: delete asynchronous work from list
    
    [ Upstream commit 3a9b557f44ea8f216aab515a7db20e23f0eb51b9 ]
    
    When smb2_lock request is canceled by smb2_cancel or smb2_close(),
    ksmbd is missing deleting async_request_entry async_requests list.
    Because calling init_smb2_rsp_hdr() in smb2_lock() mark ->synchronous
    as true and then it will not be deleted in
    ksmbd_conn_try_dequeue_request(). This patch add release_async_work() to
    release the ones allocated for async work.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ef3fd2f85bb1bcaabb9fd2c5ad8d7d99d0c8e90
Author: Tom Rix <trix@redhat.com>
Date:   Sun Dec 31 16:12:31 2023 +0900

    ksmbd: remove unused is_char_allowed function
    
    [ Upstream commit 2824861773eb512b37547516d81ef78108032cb2 ]
    
    clang with W=1 reports
    fs/ksmbd/unicode.c:122:19: error: unused function
      'is_char_allowed' [-Werror,-Wunused-function]
    static inline int is_char_allowed(char *ch)
                      ^
    This function is not used so remove it.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 226aaaa59365f22f900b58e77f3ee6f87140d6e8
Author: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
Date:   Sun Dec 31 16:12:30 2023 +0900

    ksmbd: Fix parameter name and comment mismatch
    
    [ Upstream commit 63f09a9986eb58578ed6ad0e27a6e2c54e49f797 ]
    
    fs/ksmbd/vfs.c:965: warning: Function parameter or member 'attr_value' not described in 'ksmbd_vfs_setxattr'.
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Link: https://bugzilla.openanolis.cn/show_bug.cgi?id=3946
    Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8c49f9364c59b4ca40a68a66c8880cbd1eb95fb
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Sun Dec 31 16:12:29 2023 +0900

    ksmbd: Fix spelling mistake "excceed" -> "exceeded"
    
    [ Upstream commit 7a17c61ee3b2683c40090179c273f4701fca9677 ]
    
    There is a spelling mistake in an error message. Fix it.
    
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ada8bcc48acd6005360168f04e4216cdfa372ccd
Author: Steve French <stfrench@microsoft.com>
Date:   Sun Dec 31 16:12:28 2023 +0900

    ksmbd: update Kconfig to note Kerberos support and fix indentation
    
    [ Upstream commit d280a958f8b2b62610c280ecdf35d780e7922620 ]
    
    Fix indentation of server config options, and also since
    support for very old, less secure, NTLM authentication was removed
    (and quite a while ago), remove the mention of that in Kconfig, but
    do note Kerberos (not just NTLMv2) which are supported and much
    more secure.
    
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Acked-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c0306b0abcd45fd20e46d4b97ad5c51020518c3
Author: Dawei Li <set_pte_at@outlook.com>
Date:   Sun Dec 31 16:12:27 2023 +0900

    ksmbd: Remove duplicated codes
    
    [ Upstream commit 7010357004096e54c884813e702d71147dc081f8 ]
    
    ksmbd_neg_token_init_mech_token() and ksmbd_neg_token_targ_resp_token()
    share same implementation, unify them.
    
    Signed-off-by: Dawei Li <set_pte_at@outlook.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6502c34cf30d9e02c7a33aefaebf34dffc3d2fa
Author: Dawei Li <set_pte_at@outlook.com>
Date:   Sun Dec 31 16:12:26 2023 +0900

    ksmbd: fix typo, syncronous->synchronous
    
    [ Upstream commit f8d6e7442aa716a233c7eba99dec628f8885e00b ]
    
    syncronous->synchronous
    
    Signed-off-by: Dawei Li <set_pte_at@outlook.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 052b41ef2abe274f068e892aee81406f11bd1f3a
Author: Dawei Li <set_pte_at@outlook.com>
Date:   Sun Dec 31 16:12:25 2023 +0900

    ksmbd: Implements sess->rpc_handle_list as xarray
    
    [ Upstream commit b685757c7b08d5073046fb379be965fd6c06aafc ]
    
    For some ops on rpc handle:
    1. ksmbd_session_rpc_method(), possibly on high frequency.
    2. ksmbd_session_rpc_close().
    
    id is used as indexing key to lookup channel, in that case,
    linear search based on list may suffer a bit for performance.
    
    Implements sess->rpc_handle_list as xarray.
    
    Signed-off-by: Dawei Li <set_pte_at@outlook.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 264547e13f80437a05f4f28fb636898750a3c644
Author: ye xingchen <ye.xingchen@zte.com.cn>
Date:   Sun Dec 31 16:12:24 2023 +0900

    ksmbd: Convert to use sysfs_emit()/sysfs_emit_at() APIs
    
    [ Upstream commit 72ee45fd46d0d3578c4e6046f66fae3218543ce3 ]
    
    Follow the advice of the Documentation/filesystems/sysfs.rst and show()
    should only use sysfs_emit() or sysfs_emit_at() when formatting the
    value to be returned to user space.
    
    Signed-off-by: ye xingchen <ye.xingchen@zte.com.cn>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87ffbb9e24badbb56873c3f84f1fbd062af316bb
Author: Marios Makassikis <mmakassikis@freebox.fr>
Date:   Sun Dec 31 16:12:23 2023 +0900

    ksmbd: Fix resource leak in smb2_lock()
    
    [ Upstream commit 01f6c61bae3d658058ee6322af77acea26a5ee3a ]
    
    "flock" is leaked if an error happens before smb2_lock_init(), as the
    lock is not added to the lock_list to be cleaned up.
    
    Signed-off-by: Marios Makassikis <mmakassikis@freebox.fr>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d847b75883419177e165353ffc4b8e6a436b3612
Author: Jeff Layton <jlayton@kernel.org>
Date:   Sun Dec 31 16:12:22 2023 +0900

    ksmbd: use F_SETLK when unlocking a file
    
    [ Upstream commit 7ecbe92696bb7fe32c80b6cf64736a0d157717a9 ]
    
    ksmbd seems to be trying to use a cmd value of 0 when unlocking a file.
    That activity requires a type of F_UNLCK with a cmd of F_SETLK. For
    local POSIX locking, it doesn't matter much since vfs_lock_file ignores
    @cmd, but filesystems that define their own ->lock operation expect to
    see it set sanely.
    
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: David Howells <dhowells@redhat.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 343d667deee178829cd586d875bab482db66981c
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Dec 31 16:12:21 2023 +0900

    ksmbd: set SMB2_SESSION_FLAG_ENCRYPT_DATA when enforcing data encryption for this share
    
    [ Upstream commit 37ba7b005a7a4454046bd8659c7a9c5330552396 ]
    
    Currently, SMB2_SESSION_FLAG_ENCRYPT_DATA is always set session setup
    response. Since this forces data encryption from the client, there is a
    problem that data is always encrypted regardless of the use of the cifs
    seal mount option. SMB2_SESSION_FLAG_ENCRYPT_DATA should be set according
    to KSMBD_GLOBAL_FLAG_SMB2_ENCRYPTION flags, and in case of
    KSMBD_GLOBAL_FLAG_SMB2_ENCRYPTION_OFF, encryption mode is turned off for
    all connections.
    
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab69d3e8f7a02596ee9575bf36d8dd213fea8b2b
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Sun Dec 31 16:12:20 2023 +0900

    ksmbd: replace one-element arrays with flexible-array members
    
    [ Upstream commit d272e01fa0a2f15c5c331a37cd99c6875c7b7186 ]
    
    One-element arrays are deprecated, and we are replacing them with flexible
    array members instead. So, replace one-element arrays with flexible-array
    members in multiple structs in fs/ksmbd/smb_common.h and one in
    fs/ksmbd/smb2pdu.h.
    
    Important to mention is that doing a build before/after this patch results
    in no binary output differences.
    
    This helps with the ongoing efforts to tighten the FORTIFY_SOURCE routines
    on memcpy() and help us make progress towards globally enabling
    -fstrict-flex-arrays=3 [1].
    
    Link: https://github.com/KSPP/linux/issues/242
    Link: https://github.com/KSPP/linux/issues/79
    Link: https://gcc.gnu.org/pipermail/gcc-patches/2022-October/602902.html [1]
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/Y3OxronfaPYv9qGP@work
    Signed-off-by: Sasha Levin <sashal@kernel.org>

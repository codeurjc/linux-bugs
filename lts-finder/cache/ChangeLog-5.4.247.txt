commit 61a2f83e4762ee0c766f86944e612305f5888bcb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 14 11:00:00 2023 +0200

    Linux 5.4.247
    
    Link: https://lore.kernel.org/r/20230612101654.644983109@linuxfoundation.org
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b0199bc81892ae5a47ea8146ec7965ba51d9894
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jun 12 12:06:32 2023 +0200

    Revert "staging: rtl8192e: Replace macro RTL_PCI_DEVICE with PCI_DEVICE"
    
    This reverts commit 8a65476dd1cad790ca67ea639be98c14fcd86288 which is
    commit fda2093860df4812d69052a8cf4997e53853a340 upstream.
    
    Ben reports that this should not have been backported to the older
    kernels as the rest of the macro is not empty.  It was a clean-up patch
    in 6.4-rc1 only, it did not add new device ids.
    
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: Philipp Hortmann <philipp.g.hortmann@gmail.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Link: https://lore.kernel.org/r/aa0d401a7f63448cd4c2fe4a2d7e8495d9aa123e.camel@decadent.org.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85258ae3070848d9d0f6fbee385be2db80e8cf26
Author: YouChing Lin <ycllin@mxic.com.tw>
Date:   Thu Nov 5 15:23:40 2020 +0800

    mtd: spinand: macronix: Add support for MX35LFxGE4AD
    
    commit 5ece78de88739b4c68263e9f2582380c1fd8314f upstream.
    
    The Macronix MX35LF2GE4AD / MX35LF4GE4AD are 3V, 2G / 4Gbit serial
    SLC NAND flash device (with on-die ECC).
    
    Validated by read, erase, read back, write, read back and nandtest
    on Xilinx Zynq PicoZed FPGA board which included Macronix SPI Host
    (drivers/spi/spi-mxic.c).
    
    Signed-off-by: YouChing Lin <ycllin@mxic.com.tw>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/1604561020-13499-1-git-send-email-ycllin@mxic.com.tw
    Signed-off-by: JaimeLiao <jaimeliao.tw@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e546674031fc1576da501e27a8fd165222e5a37
Author: Zixuan Fu <r33s3n6@gmail.com>
Date:   Thu Jul 21 15:48:29 2022 +0800

    btrfs: unset reloc control if transaction commit fails in prepare_to_relocate()
    
    commit 85f02d6c856b9f3a0acf5219de6e32f58b9778eb upstream.
    
    In btrfs_relocate_block_group(), the rc is allocated.  Then
    btrfs_relocate_block_group() calls
    
    relocate_block_group()
      prepare_to_relocate()
        set_reloc_control()
    
    that assigns rc to the variable fs_info->reloc_ctl. When
    prepare_to_relocate() returns, it calls
    
    btrfs_commit_transaction()
      btrfs_start_dirty_block_groups()
        btrfs_alloc_path()
          kmem_cache_zalloc()
    
    which may fail for example (or other errors could happen). When the
    failure occurs, btrfs_relocate_block_group() detects the error and frees
    rc and doesn't set fs_info->reloc_ctl to NULL. After that, in
    btrfs_init_reloc_root(), rc is retrieved from fs_info->reloc_ctl and
    then used, which may cause a use-after-free bug.
    
    This possible bug can be triggered by calling btrfs_ioctl_balance()
    before calling btrfs_ioctl_defrag().
    
    To fix this possible bug, in prepare_to_relocate(), check if
    btrfs_commit_transaction() fails. If the failure occurs,
    unset_reloc_control() is called to set fs_info->reloc_ctl to NULL.
    
    The error log in our fault-injection testing is shown as follows:
    
      [   58.751070] BUG: KASAN: use-after-free in btrfs_init_reloc_root+0x7ca/0x920 [btrfs]
      ...
      [   58.753577] Call Trace:
      ...
      [   58.755800]  kasan_report+0x45/0x60
      [   58.756066]  btrfs_init_reloc_root+0x7ca/0x920 [btrfs]
      [   58.757304]  record_root_in_trans+0x792/0xa10 [btrfs]
      [   58.757748]  btrfs_record_root_in_trans+0x463/0x4f0 [btrfs]
      [   58.758231]  start_transaction+0x896/0x2950 [btrfs]
      [   58.758661]  btrfs_defrag_root+0x250/0xc00 [btrfs]
      [   58.759083]  btrfs_ioctl_defrag+0x467/0xa00 [btrfs]
      [   58.759513]  btrfs_ioctl+0x3c95/0x114e0 [btrfs]
      ...
      [   58.768510] Allocated by task 23683:
      [   58.768777]  ____kasan_kmalloc+0xb5/0xf0
      [   58.769069]  __kmalloc+0x227/0x3d0
      [   58.769325]  alloc_reloc_control+0x10a/0x3d0 [btrfs]
      [   58.769755]  btrfs_relocate_block_group+0x7aa/0x1e20 [btrfs]
      [   58.770228]  btrfs_relocate_chunk+0xf1/0x760 [btrfs]
      [   58.770655]  __btrfs_balance+0x1326/0x1f10 [btrfs]
      [   58.771071]  btrfs_balance+0x3150/0x3d30 [btrfs]
      [   58.771472]  btrfs_ioctl_balance+0xd84/0x1410 [btrfs]
      [   58.771902]  btrfs_ioctl+0x4caa/0x114e0 [btrfs]
      ...
      [   58.773337] Freed by task 23683:
      ...
      [   58.774815]  kfree+0xda/0x2b0
      [   58.775038]  free_reloc_control+0x1d6/0x220 [btrfs]
      [   58.775465]  btrfs_relocate_block_group+0x115c/0x1e20 [btrfs]
      [   58.775944]  btrfs_relocate_chunk+0xf1/0x760 [btrfs]
      [   58.776369]  __btrfs_balance+0x1326/0x1f10 [btrfs]
      [   58.776784]  btrfs_balance+0x3150/0x3d30 [btrfs]
      [   58.777185]  btrfs_ioctl_balance+0xd84/0x1410 [btrfs]
      [   58.777621]  btrfs_ioctl+0x4caa/0x114e0 [btrfs]
      ...
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    CC: stable@vger.kernel.org # 5.15+
    Reviewed-by: Sweet Tea Dorminy <sweettea-kernel@dorminy.me>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Zixuan Fu <r33s3n6@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Stefan Ghinea <stefan.ghinea@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4223d91ca1b5bf3928e5722c3c6b3fdb49250ab3
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Mar 12 15:25:34 2021 -0500

    btrfs: check return value of btrfs_commit_transaction in relocation
    
    commit fb686c6824dd6294ca772b92424b8fba666e7d00 upstream.
    
    There are a few places where we don't check the return value of
    btrfs_commit_transaction in relocation.c.  Thankfully all these places
    have straightforward error handling, so simply change all of the sites
    at once.
    
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Stefan Ghinea <stefan.ghinea@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a35d89d3605ba085eee458303730d8f21c595560
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Mon Jun 5 16:33:35 2023 +0200

    rbd: get snapshot context after exclusive lock is ensured to be held
    
    commit 870611e4877eff1e8413c3fb92a585e45d5291f6 upstream.
    
    Move capturing the snapshot context into the image request state
    machine, after exclusive lock is ensured to be held for the duration of
    dealing with the image request.  This is needed to ensure correctness
    of fast-diff states (OBJECT_EXISTS vs OBJECT_EXISTS_CLEAN) and object
    deltas computed based off of them.  Otherwise the object map that is
    forked for the snapshot isn't guaranteed to accurately reflect the
    contents of the snapshot when the snapshot is taken under I/O.  This
    breaks differential backup and snapshot-based mirroring use cases with
    fast-diff enabled: since some object deltas may be incomplete, the
    destination image may get corrupted.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/61472
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    [idryomov@gmail.com: backport to 5.4: no rbd_img_capture_header(),
     img_request not embedded in blk-mq pdu]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52a40eaa55d60a4554bb39c12e57652a859706bd
Author: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Date:   Wed Feb 9 11:19:27 2022 +0200

    drm/atomic: Don't pollute crtc_state->mode_blob with error pointers
    
    commit 439cf34c8e0a8a33d8c15a31be1b7423426bc765 upstream.
    
    Make sure we don't assign an error pointer to crtc_state->mode_blob
    as that will break all kinds of places that assume either NULL or a
    valid pointer (eg. drm_property_blob_put()).
    
    Cc: stable@vger.kernel.org
    Reported-by: fuyufan <fuyufan@huawei.com>
    Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220209091928.14766-1-ville.syrjala@linux.intel.com
    Acked-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cc5d40e4d49ec05d01538a2a6ee8c5cd737fe2b
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Tue Jul 21 09:36:41 2020 -0300

    cifs: handle empty list of targets in cifs_reconnect()
    
    commit a52930353eaf443489a350a135c5525a4acbbf56 upstream.
    
    In case there were no cached DFS referrals in
    reconn_setup_dfs_targets(), set cifs_sb to NULL prior to calling
    reconn_set_next_dfs_target() so it would not try to access an empty
    tgt_list.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Rishabh Bhatnagar <risbhat@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 307ffb7162821737a57cf7cb6e1d86e110be9877
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Tue May 19 15:38:29 2020 -0300

    cifs: get rid of unused parameter in reconn_setup_dfs_targets()
    
    commit baf3f08ef4083b76ca67b143e135213a7f941879 upstream.
    
    The target iterator parameter "it" is not used in
    reconn_setup_dfs_targets(), so just remove it.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Rishabh Bhatnagar <risbhat@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73ed7996bbecb7d361acf7e6ee022e1f2ce7b48d
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Jun 8 10:06:40 2023 -0400

    ext4: only check dquot_initialize_needed() when debugging
    
    commit dea9d8f7643fab07bf89a1155f1f94f37d096a5e upstream.
    
    ext4_xattr_block_set() relies on its caller to call dquot_initialize()
    on the inode.  To assure that this has happened there are WARN_ON
    checks.  Unfortunately, this is subject to false positives if there is
    an antagonist thread which is flipping the file system at high rates
    between r/o and rw.  So only do the check if EXT4_XATTR_DEBUG is
    enabled.
    
    Link: https://lore.kernel.org/r/20230608044056.GA1418535@mit.edu
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d0a29c74a312366c013161787a1a59691e6aa39
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Jun 7 19:54:24 2023 -0700

    eeprom: at24: also select REGMAP
    
    [ Upstream commit 7f3c782b3914e510b646a77aedc3adeac2e4a63b ]
    
    Selecting only REGMAP_I2C can leave REGMAP unset, causing build errors,
    so also select REGMAP to prevent the build errors.
    
    ../drivers/misc/eeprom/at24.c:540:42: warning: 'struct regmap_config' declared inside parameter list will not be visible outside of this definition or declaration
      540 |                                   struct regmap_config *regmap_config)
    ../drivers/misc/eeprom/at24.c: In function 'at24_make_dummy_client':
    ../drivers/misc/eeprom/at24.c:552:18: error: implicit declaration of function 'devm_regmap_init_i2c' [-Werror=implicit-function-declaration]
      552 |         regmap = devm_regmap_init_i2c(dummy_client, regmap_config);
    ../drivers/misc/eeprom/at24.c:552:16: warning: assignment to 'struct regmap *' from 'int' makes pointer from integer without a cast [-Wint-conversion]
      552 |         regmap = devm_regmap_init_i2c(dummy_client, regmap_config);
    ../drivers/misc/eeprom/at24.c: In function 'at24_probe':
    ../drivers/misc/eeprom/at24.c:586:16: error: variable 'regmap_config' has initializer but incomplete type
      586 |         struct regmap_config regmap_config = { };
    ../drivers/misc/eeprom/at24.c:586:30: error: storage size of 'regmap_config' isn't known
      586 |         struct regmap_config regmap_config = { };
    ../drivers/misc/eeprom/at24.c:586:30: warning: unused variable 'regmap_config' [-Wunused-variable]
    
    Fixes: 5c015258478e ("eeprom: at24: add basic regmap_i2c support")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0360652bf6abf82551d75290ea7828b41f005be1
Author: Uwe Kleine-K철nig <u.kleine-koenig@pengutronix.de>
Date:   Thu Mar 9 10:58:19 2023 +0100

    i2c: sprd: Delete i2c adapter in .remove's error path
    
    [ Upstream commit ca0aa17f2db3468fd017038d23a78e17388e2f67 ]
    
    If pm runtime resume fails the .remove callback used to exit early. This
    resulted in an error message by the driver core but the device gets
    removed anyhow. This lets the registered i2c adapter stay around with an
    unbound parent device.
    
    So only skip clk disabling if resume failed, but do delete the adapter.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Signed-off-by: Uwe Kleine-K철nig <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c73f1c2f6816c6b5f5b3bedfd809337fb9d6caa9
Author: Jiri Slaby (SUSE) <jirislaby@kernel.org>
Date:   Mon Oct 31 12:44:09 2022 +0100

    bonding (gcc13): synchronize bond_{a,t}lb_xmit() types
    
    commit 777fa87c7682228e155cf0892ba61cb2ab1fe3ae upstream.
    
    Both bond_alb_xmit() and bond_tlb_xmit() produce a valid warning with
    gcc-13:
      drivers/net/bonding/bond_alb.c:1409:13: error: conflicting types for 'bond_tlb_xmit' due to enum/integer mismatch; have 'netdev_tx_t(struct sk_buff *, struct net_device *)' ...
      include/net/bond_alb.h:160:5: note: previous declaration of 'bond_tlb_xmit' with type 'int(struct sk_buff *, struct net_device *)'
    
      drivers/net/bonding/bond_alb.c:1523:13: error: conflicting types for 'bond_alb_xmit' due to enum/integer mismatch; have 'netdev_tx_t(struct sk_buff *, struct net_device *)' ...
      include/net/bond_alb.h:159:5: note: previous declaration of 'bond_alb_xmit' with type 'int(struct sk_buff *, struct net_device *)'
    
    I.e. the return type of the declaration is int, while the definitions
    spell netdev_tx_t. Synchronize both of them to the latter.
    
    Cc: Martin Liska <mliska@suse.cz>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: Jiri Slaby (SUSE) <jirislaby@kernel.org>
    Link: https://lore.kernel.org/r/20221031114409.10417-1-jirislaby@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec946898039a479ea95c3347f0c45c7ce5e4cbcc
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Mon May 15 21:09:56 2023 +0800

    usb: usbfs: Use consistent mmap functions
    
    commit d0b861653f8c16839c3035875b556afc4472f941 upstream.
    
    When hcd->localmem_pool is non-null, localmem_pool is used to allocate
    DMA memory. In this case, the dma address will be properly returned (in
    dma_handle), and dma_mmap_coherent should be used to map this memory
    into the user space. However, the current implementation uses
    pfn_remap_range, which is supposed to map normal pages.
    
    Instead of repeating the logic in the memory allocation function, this
    patch introduces a more robust solution. Here, the type of allocated
    memory is checked by testing whether dma_handle is properly set. If
    dma_handle is properly returned, it means some DMA pages are allocated
    and dma_mmap_coherent should be used to map them. Otherwise, normal
    pages are allocated and pfn_remap_range should be called. This ensures
    that the correct mmap functions are used consistently, independently
    with logic details that determine which type of memory gets allocated.
    
    Fixes: a0e710a7def4 ("USB: usbfs: fix mmap dma mismatch")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Link: https://lore.kernel.org/r/20230515130958.32471-3-lrh2000@pku.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0147952d158b674a05556b06e1f0540d8368103d
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Mon May 15 21:09:55 2023 +0800

    usb: usbfs: Enforce page requirements for mmap
    
    commit 0143d148d1e882fb1538dc9974c94d63961719b9 upstream.
    
    The current implementation of usbdev_mmap uses usb_alloc_coherent to
    allocate memory pages that will later be mapped into the user space.
    Meanwhile, usb_alloc_coherent employs three different methods to
    allocate memory, as outlined below:
     * If hcd->localmem_pool is non-null, it uses gen_pool_dma_alloc to
       allocate memory;
     * If DMA is not available, it uses kmalloc to allocate memory;
     * Otherwise, it uses dma_alloc_coherent.
    
    However, it should be noted that gen_pool_dma_alloc does not guarantee
    that the resulting memory will be page-aligned. Furthermore, trying to
    map slab pages (i.e., memory allocated by kmalloc) into the user space
    is not resonable and can lead to problems, such as a type confusion bug
    when PAGE_TABLE_CHECK=y [1].
    
    To address these issues, this patch introduces hcd_alloc_coherent_pages,
    which addresses the above two problems. Specifically,
    hcd_alloc_coherent_pages uses gen_pool_dma_alloc_align instead of
    gen_pool_dma_alloc to ensure that the memory is page-aligned. To replace
    kmalloc, hcd_alloc_coherent_pages directly allocates pages by calling
    __get_free_pages.
    
    Reported-by: syzbot+fcf1a817ceb50935ce99@syzkaller.appspotmail.comm
    Closes: https://lore.kernel.org/lkml/000000000000258e5e05fae79fc1@google.com/ [1]
    Fixes: f7d34b445abc ("USB: Add support for usbfs zerocopy.")
    Fixes: ff2437befd8f ("usb: host: Fix excessive alignment restriction for local memory allocations")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20230515130958.32471-2-lrh2000@pku.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 090878903dd391d2f538ca0cbd3621b307408e46
Author: Martin Hundeb첩ll <martin@geanix.com>
Date:   Fri May 12 08:49:25 2023 +0200

    pinctrl: meson-axg: add missing GPIOA_18 gpio group
    
    commit 5b10ff013e8a57f8845615ac2cc37edf7f6eef05 upstream.
    
    Without this, the gpio cannot be explicitly mux'ed to its gpio function.
    
    Fixes: 83c566806a68a ("pinctrl: meson-axg: Add new pinctrl driver for Meson AXG SoC")
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Hundeb첩ll <martin@geanix.com>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Reviewed-by: Dmitry Rokosov <ddrokosov@sberdevices.ru>
    Link: https://lore.kernel.org/r/20230512064925.133516-1-martin@geanix.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6e842555050ad24c10de41a23101e87fa80b1a3
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Mon Jun 5 16:33:35 2023 +0200

    rbd: move RBD_OBJ_FLAG_COPYUP_ENABLED flag setting
    
    commit 09fe05c57b5aaf23e2c35036c98ea9f282b19a77 upstream.
    
    Move RBD_OBJ_FLAG_COPYUP_ENABLED flag setting into the object request
    state machine to allow for the snapshot context to be captured in the
    image request state machine rather than in rbd_queue_workfn().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69653f9416198329bee4733a113be961d34d147a
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Tue May 30 13:48:44 2023 -0700

    Bluetooth: Fix use-after-free in hci_remove_ltk/hci_remove_irk
    
    commit c5d2b6fa26b5b8386a9cc902cdece3a46bef2bd2 upstream.
    
    Similar to commit 0f7d9b31ce7a ("netfilter: nf_tables: fix use-after-free
    in nft_set_catchall_destroy()"). We can not access k after kfree_rcu()
    call.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Min Li <lm0963hack@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 953335a377b6a829570916d4951f821394d048a1
Author: Xiubo Li <xiubli@redhat.com>
Date:   Thu Jun 1 08:59:31 2023 +0800

    ceph: fix use-after-free bug for inodes when flushing capsnaps
    
    commit 409e873ea3c1fd3079909718bbeb06ac1ec7f38b upstream.
    
    There is a race between capsnaps flush and removing the inode from
    'mdsc->snap_flush_list' list:
    
       == Thread A ==                     == Thread B ==
    ceph_queue_cap_snap()
     -> allocate 'capsnapA'
     ->ihold('&ci->vfs_inode')
     ->add 'capsnapA' to 'ci->i_cap_snaps'
     ->add 'ci' to 'mdsc->snap_flush_list'
        ...
       == Thread C ==
    ceph_flush_snaps()
     ->__ceph_flush_snaps()
      ->__send_flush_snap()
                                    handle_cap_flushsnap_ack()
                                     ->iput('&ci->vfs_inode')
                                       this also will release 'ci'
                                        ...
                                          == Thread D ==
                                    ceph_handle_snap()
                                     ->flush_snaps()
                                      ->iterate 'mdsc->snap_flush_list'
                                       ->get the stale 'ci'
     ->remove 'ci' from                ->ihold(&ci->vfs_inode) this
       'mdsc->snap_flush_list'           will WARNING
    
    To fix this we will increase the inode's i_count ref when adding 'ci'
    to the 'mdsc->snap_flush_list' list.
    
    [ idryomov: need_put int -> bool ]
    
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2209299
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Milind Changire <mchangir@redhat.com>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2416bac0e7b21113aa8047ecf8e97c9d559e26a3
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Fri May 26 20:19:10 2023 +0300

    can: j1939: avoid possible use-after-free when j1939_can_rx_register fails
    
    commit 9f16eb106aa5fce15904625661312623ec783ed3 upstream.
    
    Syzkaller reports the following failure:
    
    BUG: KASAN: use-after-free in kref_put include/linux/kref.h:64 [inline]
    BUG: KASAN: use-after-free in j1939_priv_put+0x25/0xa0 net/can/j1939/main.c:172
    Write of size 4 at addr ffff888141c15058 by task swapper/3/0
    
    CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.10.144-syzkaller #0
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x107/0x167 lib/dump_stack.c:118
     print_address_description.constprop.0+0x1c/0x220 mm/kasan/report.c:385
     __kasan_report mm/kasan/report.c:545 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:562
     check_memory_region_inline mm/kasan/generic.c:186 [inline]
     check_memory_region+0x145/0x190 mm/kasan/generic.c:192
     instrument_atomic_read_write include/linux/instrumented.h:101 [inline]
     atomic_fetch_sub_release include/asm-generic/atomic-instrumented.h:220 [inline]
     __refcount_sub_and_test include/linux/refcount.h:272 [inline]
     __refcount_dec_and_test include/linux/refcount.h:315 [inline]
     refcount_dec_and_test include/linux/refcount.h:333 [inline]
     kref_put include/linux/kref.h:64 [inline]
     j1939_priv_put+0x25/0xa0 net/can/j1939/main.c:172
     j1939_sk_sock_destruct+0x44/0x90 net/can/j1939/socket.c:374
     __sk_destruct+0x4e/0x820 net/core/sock.c:1784
     rcu_do_batch kernel/rcu/tree.c:2485 [inline]
     rcu_core+0xb35/0x1a30 kernel/rcu/tree.c:2726
     __do_softirq+0x289/0x9a3 kernel/softirq.c:298
     asm_call_irq_on_stack+0x12/0x20
     </IRQ>
     __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
     run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
     do_softirq_own_stack+0xaa/0xe0 arch/x86/kernel/irq_64.c:77
     invoke_softirq kernel/softirq.c:393 [inline]
     __irq_exit_rcu kernel/softirq.c:423 [inline]
     irq_exit_rcu+0x136/0x200 kernel/softirq.c:435
     sysvec_apic_timer_interrupt+0x4d/0x100 arch/x86/kernel/apic/apic.c:1095
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:635
    
    Allocated by task 1141:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc.constprop.0+0xc9/0xd0 mm/kasan/common.c:461
     kmalloc include/linux/slab.h:552 [inline]
     kzalloc include/linux/slab.h:664 [inline]
     j1939_priv_create net/can/j1939/main.c:131 [inline]
     j1939_netdev_start+0x111/0x860 net/can/j1939/main.c:268
     j1939_sk_bind+0x8ea/0xd30 net/can/j1939/socket.c:485
     __sys_bind+0x1f2/0x260 net/socket.c:1645
     __do_sys_bind net/socket.c:1656 [inline]
     __se_sys_bind net/socket.c:1654 [inline]
     __x64_sys_bind+0x6f/0xb0 net/socket.c:1654
     do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    Freed by task 1141:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track+0x1c/0x30 mm/kasan/common.c:56
     kasan_set_free_info+0x1b/0x30 mm/kasan/generic.c:355
     __kasan_slab_free+0x112/0x170 mm/kasan/common.c:422
     slab_free_hook mm/slub.c:1542 [inline]
     slab_free_freelist_hook+0xad/0x190 mm/slub.c:1576
     slab_free mm/slub.c:3149 [inline]
     kfree+0xd9/0x3b0 mm/slub.c:4125
     j1939_netdev_start+0x5ee/0x860 net/can/j1939/main.c:300
     j1939_sk_bind+0x8ea/0xd30 net/can/j1939/socket.c:485
     __sys_bind+0x1f2/0x260 net/socket.c:1645
     __do_sys_bind net/socket.c:1656 [inline]
     __se_sys_bind net/socket.c:1654 [inline]
     __x64_sys_bind+0x6f/0xb0 net/socket.c:1654
     do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    It can be caused by this scenario:
    
    CPU0                                    CPU1
    j1939_sk_bind(socket0, ndev0, ...)
      j1939_netdev_start()
                                            j1939_sk_bind(socket1, ndev0, ...)
                                              j1939_netdev_start()
      mutex_lock(&j1939_netdev_lock)
      j1939_priv_set(ndev0, priv)
      mutex_unlock(&j1939_netdev_lock)
                                              if (priv_new)
                                                kref_get(&priv_new->rx_kref)
                                                return priv_new;
                                              /* inside j1939_sk_bind() */
                                              jsk->priv = priv
      j1939_can_rx_register(priv) // fails
      j1939_priv_set(ndev, NULL)
      kfree(priv)
                                            j1939_sk_sock_destruct()
                                            j1939_priv_put() // <- uaf
    
    To avoid this, call j1939_can_rx_register() under j1939_netdev_lock so
    that a concurrent thread cannot process j1939_priv before
    j1939_can_rx_register() returns.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20230526171910.227615-3-pchelkin@ispras.ru
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf0245bd44c0913472fbfb26434906d4cb1b7caa
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Fri May 26 20:19:09 2023 +0300

    can: j1939: change j1939_netdev_lock type to mutex
    
    commit cd9c790de2088b0d797dc4d244b4f174f9962554 upstream.
    
    It turns out access to j1939_can_rx_register() needs to be serialized,
    otherwise j1939_priv can be corrupted when parallel threads call
    j1939_netdev_start() and j1939_can_rx_register() fails. This issue is
    thoroughly covered in other commit which serializes access to
    j1939_can_rx_register().
    
    Change j1939_netdev_lock type to mutex so that we do not need to remove
    GFP_KERNEL from can_rx_register().
    
    j1939_netdev_lock seems to be used in normal contexts where mutex usage
    is not prohibited.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Suggested-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20230526171910.227615-2-pchelkin@ispras.ru
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9eed68d62e2aa835b9366ba93062b7446bd47584
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Fri May 26 10:19:46 2023 +0200

    can: j1939: j1939_sk_send_loop_abort(): improved error queue handling in J1939 Socket
    
    commit 2a84aea80e925ecba6349090559754f8e8eb68ef upstream.
    
    This patch addresses an issue within the j1939_sk_send_loop_abort()
    function in the j1939/socket.c file, specifically in the context of
    Transport Protocol (TP) sessions.
    
    Without this patch, when a TP session is initiated and a Clear To Send
    (CTS) frame is received from the remote side requesting one data packet,
    the kernel dispatches the first Data Transport (DT) frame and then waits
    for the next CTS. If the remote side doesn't respond with another CTS,
    the kernel aborts due to a timeout. This leads to the user-space
    receiving an EPOLLERR on the socket, and the socket becomes active.
    
    However, when trying to read the error queue from the socket with
    sock.recvmsg(, , socket.MSG_ERRQUEUE), it returns -EAGAIN,
    given that the socket is non-blocking. This situation results in an
    infinite loop: the user-space repeatedly calls epoll(), epoll() returns
    the socket file descriptor with EPOLLERR, but the socket then blocks on
    the recv() of ERRQUEUE.
    
    This patch introduces an additional check for the J1939_SOCK_ERRQUEUE
    flag within the j1939_sk_send_loop_abort() function. If the flag is set,
    it indicates that the application has subscribed to receive error queue
    messages. In such cases, the kernel can communicate the current transfer
    state via the error queue. This allows for the function to return early,
    preventing the unnecessary setting of the socket into an error state,
    and breaking the infinite loop. It is crucial to note that a socket
    error is only needed if the application isn't using the error queue, as,
    without it, the application wouldn't be aware of transfer issues.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Reported-by: David Jander <david@protonic.nl>
    Tested-by: David Jander <david@protonic.nl>
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20230526081946.715190-1-o.rempel@pengutronix.de
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fc62d51d3e404b37fc0ba891fd3162cb46efde4
Author: Chia-I Wu <olvaffe@gmail.com>
Date:   Thu Jun 1 14:48:08 2023 -0700

    drm/amdgpu: fix xclk freq on CHIP_STONEY
    
    commit b447b079cf3a9971ea4d31301e673f49612ccc18 upstream.
    
    According to Alex, most APUs from that time seem to have the same issue
    (vbios says 48Mhz, actual is 100Mhz).  I only have a CHIP_STONEY so I
    limit the fixup to CHIP_STONEY
    
    Signed-off-by: Chia-I Wu <olvaffe@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e752bb1c039f448eaf6f6e60ac558fabb28aa445
Author: RenHai <kean0048@gmail.com>
Date:   Fri Jun 2 08:36:04 2023 +0800

    ALSA: hda/realtek: Add Lenovo P3 Tower platform
    
    commit 7ca4c8d4d3f41c2cd9b4cf22bb829bf03dac0956 upstream.
    
    Headset microphone on this platform does not work without
    ALC897_FIXUP_HEADSET_MIC_PIN fixup.
    
    Signed-off-by: RenHai <kean0048@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230602003604.975892-1-kean0048@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca599db7a5e080cd41494b61bfd670f692f84e41
Author: Ai Chao <aichao@kylinos.cn>
Date:   Fri May 26 17:47:04 2023 +0800

    ALSA: hda/realtek: Add a quirk for HP Slim Desktop S01
    
    commit 527c356b51f3ddee02c9ed5277538f85e30a2cdc upstream.
    
    Add a quirk for HP Slim Desktop S01 to fixup headset MIC no presence.
    
    Signed-off-by: Ai Chao <aichao@kylinos.cn>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230526094704.14597-1-aichao@kylinos.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5ca4799e6d3e7f2fc7cad2932a4a79696d023d3
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Thu May 11 12:08:37 2023 -0700

    Input: psmouse - fix OOB access in Elantech protocol
    
    commit 7b63a88bb62ba2ddf5fcd956be85fe46624628b9 upstream.
    
    The kernel only allocate 5 MT slots; check that transmitted slot ID
    falls within the acceptable range.
    
    Link: https://lore.kernel.org/r/ZFnEL91nrT789dbG@google.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 282a96e3f88fcecb80a00689b2c1758a8f22259a
Author: Ismael Ferreras Morezuelas <swyterzone@gmail.com>
Date:   Tue May 23 14:45:10 2023 -0700

    Input: xpad - delete a Razer DeathAdder mouse VID/PID entry
    
    commit feee70f4568650cf44c573488798ffc0a2faeea3 upstream.
    
    While doing my research to improve the xpad device names I noticed
    that the 1532:0037 VID/PID seems to be used by the DeathAdder 2013,
    so that Razer Sabertooth instance looked wrong and very suspect to
    me. I didn't see any mention in the official drivers, either.
    
    After doing more research, it turns out that the xpad list
    is used by many other projects (like Steam) as-is [1], this
    issue was reported [2] and Valve/Sam Lantinga fixed it [3]:
    
    [1]: https://github.com/libsdl-org/SDL/blob/dcc5eef0e2395854b254ea2873a4899edab347c6/src/joystick/controller_type.h#L251
    [2]: https://steamcommunity.com/app/353380/discussions/0/1743392486228754770/
    [3]: https://hg.libsdl.org/SDL/rev/29809f6f0271
    
    (With multiple Internet users reporting similar issues, not linked here)
    
    After not being able to find the correct VID/PID combination anywhere
    on the Internet and not receiving any reply from Razer support I did
    some additional detective work, it seems like it presents itself as
    "Razer Sabertooth Gaming Controller (XBOX360)", code 1689:FE00.
    
    Leaving us with this:
     * Razer Sabertooth (1689:fe00)
     * Razer Sabertooth Elite (24c6:5d04)
     * Razer DeathAdder 2013 (1532:0037) [note: not a gamepad]
    
    So, to sum things up; remove this conflicting/duplicate entry:
    
    { 0x1532, 0x0037, "Razer Sabertooth", 0, XTYPE_XBOX360 },
    
    As the real/correct one is already present there, even if
    the Internet as a whole insists on presenting it as the
    Razer Sabertooth Elite, which (by all accounts) is not:
    
    { 0x1689, 0xfe00, "Razer Sabertooth", 0, XTYPE_XBOX360 },
    
    Actual change in SDL2 referencing this kernel issue:
    https://github.com/libsdl-org/SDL/commit/e5e54169754ca5d3e86339d968b20126d9da0a15
    
    For more information of the device, take a look here:
    https://github.com/xboxdrv/xboxdrv/pull/59
    
    You can see a lsusb dump here: https://github.com/xboxdrv/xboxdrv/files/76581/Qa6dBcrv.txt
    
    Fixes: f554f619b70 ("Input: xpad - sync device IDs with xboxdrv")
    Signed-off-by: Ismael Ferreras Morezuelas <swyterzone@gmail.com>
    Reviewed-by: Cameron Gutman <aicommander@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/5c12dbdb-5774-fc68-5c58-ca596383663e@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3a99a069eb955f7e090c9fa45e37afca62985bd
Author: Vladislav Efanov <VEfanov@ispras.ru>
Date:   Fri May 26 19:16:32 2023 +0300

    batman-adv: Broken sync while rescheduling delayed work
    
    commit abac3ac97fe8734b620e7322a116450d7f90aa43 upstream.
    
    Syzkaller got a lot of crashes like:
    KASAN: use-after-free Write in *_timers*
    
    All of these crashes point to the same memory area:
    
    The buggy address belongs to the object at ffff88801f870000
     which belongs to the cache kmalloc-8k of size 8192
    The buggy address is located 5320 bytes inside of
     8192-byte region [ffff88801f870000, ffff88801f872000)
    
    This area belongs to :
            batadv_priv->batadv_priv_dat->delayed_work->timer_list
    
    The reason for these issues is the lack of synchronization. Delayed
    work (batadv_dat_purge) schedules new timer/work while the device
    is being deleted. As the result new timer/delayed work is set after
    cancel_delayed_work_sync() was called. So after the device is freed
    the timer list contains pointer to already freed memory.
    
    Found by Linux Verification Center (linuxtesting.org) with syzkaller.
    
    Cc: stable@kernel.org
    Fixes: 2f1dfbe18507 ("batman-adv: Distributed ARP Table - implement local storage")
    Signed-off-by: Vladislav Efanov <VEfanov@ispras.ru>
    Acked-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df7044fc099b93e22259c7514c681f3cca1f2be9
Author: Somnath Kotur <somnath.kotur@broadcom.com>
Date:   Wed Jun 7 00:54:06 2023 -0700

    bnxt_en: Query default VLAN before VNIC setup on a VF
    
    [ Upstream commit 1a9e4f501bc6ff1b6ecb60df54fbf2b54db43bfe ]
    
    We need to call bnxt_hwrm_func_qcfg() on a VF to query the default
    VLAN that may be setup by the PF.  If a default VLAN is enabled,
    the VF cannot support VLAN acceleration on the receive side and
    the VNIC must be setup to strip out the default VLAN tag.  If a
    default VLAN is not enabled, the VF can support VLAN acceleration
    on the receive side.  The VNIC should be set up to strip or not
    strip the VLAN based on the RX VLAN acceleration setting.
    
    Without this call to determine the default VLAN before calling
    bnxt_setup_vnic(), the VNIC may not be set up correctly.  For
    example, bnxt_setup_vnic() may set up to strip the VLAN tag based
    on stale default VLAN information.  If RX VLAN acceleration is
    not enabled, the VLAN tag will be incorrectly stripped and the
    RX data path will not work correctly.
    
    Fixes: cf6645f8ebc6 ("bnxt_en: Add function for VF driver to query default VLAN.")
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6ca812973923229e1582efd1c8e221b4382308a
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Fri Jun 2 20:28:15 2023 +0200

    lib: cpu_rmap: Fix potential use-after-free in irq_cpu_rmap_release()
    
    [ Upstream commit 7c5d4801ecf0564c860033d89726b99723c55146 ]
    
    irq_cpu_rmap_release() calls cpu_rmap_put(), which may free the rmap.
    So we need to clear the pointer to our glue structure in rmap before
    doing that, not after.
    
    Fixes: 4e0473f1060a ("lib: cpu_rmap: Avoid use after free on rmap->obj array entries")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/ZHo0vwquhOy3FaXc@decadent.org.uk
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 198da74a4e8d4c2b2669eebc9f85e19e80cfae5a
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 7 10:23:01 2023 +0800

    net: sched: fix possible refcount leak in tc_chain_tmplt_add()
    
    [ Upstream commit 44f8baaf230c655c249467ca415b570deca8df77 ]
    
    try_module_get will be called in tcf_proto_lookup_ops. So module_put needs
    to be called to drop the refcount if ops don't implement the required
    function.
    
    Fixes: 9f407f1768d3 ("net: sched: introduce chain templates")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f7cbd6d5e39a7597a81b63b6db593aaa93077f9
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 11:42:33 2023 +0000

    net: sched: move rtm_tca_policy declaration to include file
    
    [ Upstream commit 886bc7d6ed3357975c5f1d3c784da96000d4bbb4 ]
    
    rtm_tca_policy is used from net/sched/sch_api.c and net/sched/cls_api.c,
    thus should be declared in an include file.
    
    This fixes the following sparse warning:
    net/sched/sch_api.c:1434:25: warning: symbol 'rtm_tca_policy' was not declared. Should it be static?
    
    Fixes: e331473fee3d ("net/sched: cls_api: add missing validation of netlink attributes")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8b90f92444b6b5e9a54e5ce073a79bf0372123c
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 07:41:15 2023 +0000

    rfs: annotate lockless accesses to RFS sock flow table
    
    [ Upstream commit 5c3b74a92aa285a3df722bf6329ba7ccf70346d6 ]
    
    Add READ_ONCE()/WRITE_ONCE() on accesses to the sock flow table.
    
    This also prevents a (smart ?) compiler to remove the condition in:
    
    if (table->ents[index] != newval)
            table->ents[index] = newval;
    
    We need the condition to avoid dirtying a shared cache line.
    
    Fixes: fec5e652e58f ("rfs: Receive Flow Steering")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28ac3cf2ac2140c073902a20220bf86a3f0df8ab
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 6 07:41:14 2023 +0000

    rfs: annotate lockless accesses to sk->sk_rxhash
    
    [ Upstream commit 1e5c647c3f6d4f8497dedcd226204e1880e0ffb3 ]
    
    Add READ_ONCE()/WRITE_ONCE() on accesses to sk->sk_rxhash.
    
    This also prevents a (smart ?) compiler to remove the condition in:
    
    if (sk->sk_rxhash != newval)
            sk->sk_rxhash = newval;
    
    We need the condition to avoid dirtying a shared cache line.
    
    Fixes: fec5e652e58f ("rfs: Receive Flow Steering")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4c72805fda436a82bc31fe046a4f79c712045b6
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu May 18 10:33:00 2023 -0700

    netfilter: ipset: Add schedule point in call_ad().
    
    [ Upstream commit 24e227896bbf003165e006732dccb3516f87f88e ]
    
    syzkaller found a repro that causes Hung Task [0] with ipset.  The repro
    first creates an ipset and then tries to delete a large number of IPs
    from the ipset concurrently:
    
      IPSET_ATTR_IPADDR_IPV4 : 172.20.20.187
      IPSET_ATTR_CIDR        : 2
    
    The first deleting thread hogs a CPU with nfnl_lock(NFNL_SUBSYS_IPSET)
    held, and other threads wait for it to be released.
    
    Previously, the same issue existed in set->variant->uadt() that could run
    so long under ip_set_lock(set).  Commit 5e29dc36bd5e ("netfilter: ipset:
    Rework long task execution when adding/deleting entries") tried to fix it,
    but the issue still exists in the caller with another mutex.
    
    While adding/deleting many IPs, we should release the CPU periodically to
    prevent someone from abusing ipset to hang the system.
    
    Note we need to increment the ipset's refcnt to prevent the ipset from
    being destroyed while rescheduling.
    
    [0]:
    INFO: task syz-executor174:268 blocked for more than 143 seconds.
          Not tainted 6.4.0-rc1-00145-gba79e9a73284 #1
    "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    task:syz-executor174 state:D stack:0     pid:268   ppid:260    flags:0x0000000d
    Call trace:
     __switch_to+0x308/0x714 arch/arm64/kernel/process.c:556
     context_switch kernel/sched/core.c:5343 [inline]
     __schedule+0xd84/0x1648 kernel/sched/core.c:6669
     schedule+0xf0/0x214 kernel/sched/core.c:6745
     schedule_preempt_disabled+0x58/0xf0 kernel/sched/core.c:6804
     __mutex_lock_common kernel/locking/mutex.c:679 [inline]
     __mutex_lock+0x6fc/0xdb0 kernel/locking/mutex.c:747
     __mutex_lock_slowpath+0x14/0x20 kernel/locking/mutex.c:1035
     mutex_lock+0x98/0xf0 kernel/locking/mutex.c:286
     nfnl_lock net/netfilter/nfnetlink.c:98 [inline]
     nfnetlink_rcv_msg+0x480/0x70c net/netfilter/nfnetlink.c:295
     netlink_rcv_skb+0x1c0/0x350 net/netlink/af_netlink.c:2546
     nfnetlink_rcv+0x18c/0x199c net/netfilter/nfnetlink.c:658
     netlink_unicast_kernel net/netlink/af_netlink.c:1339 [inline]
     netlink_unicast+0x664/0x8cc net/netlink/af_netlink.c:1365
     netlink_sendmsg+0x6d0/0xa4c net/netlink/af_netlink.c:1913
     sock_sendmsg_nosec net/socket.c:724 [inline]
     sock_sendmsg net/socket.c:747 [inline]
     ____sys_sendmsg+0x4b8/0x810 net/socket.c:2503
     ___sys_sendmsg net/socket.c:2557 [inline]
     __sys_sendmsg+0x1f8/0x2a4 net/socket.c:2586
     __do_sys_sendmsg net/socket.c:2595 [inline]
     __se_sys_sendmsg net/socket.c:2593 [inline]
     __arm64_sys_sendmsg+0x80/0x94 net/socket.c:2593
     __invoke_syscall arch/arm64/kernel/syscall.c:38 [inline]
     invoke_syscall+0x84/0x270 arch/arm64/kernel/syscall.c:52
     el0_svc_common+0x134/0x24c arch/arm64/kernel/syscall.c:142
     do_el0_svc+0x64/0x198 arch/arm64/kernel/syscall.c:193
     el0_svc+0x2c/0x7c arch/arm64/kernel/entry-common.c:637
     el0t_64_sync_handler+0x84/0xf0 arch/arm64/kernel/entry-common.c:655
     el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:591
    
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Fixes: a7b4f989a629 ("netfilter: ipset: IP set core support")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b705ed9d4036257cf32a74535186c442a0bcb43
Author: Tijs Van Buggenhout <tijs.van.buggenhout@axsguard.com>
Date:   Thu May 25 12:25:26 2023 +0200

    netfilter: conntrack: fix NULL pointer dereference in nf_confirm_cthelper
    
    [ Upstream commit e1f543dc660b44618a1bd72ddb4ca0828a95f7ad ]
    
    An nf_conntrack_helper from nf_conn_help may become NULL after DNAT.
    
    Observed when TCP port 1720 (Q931_PORT), associated with h323 conntrack
    helper, is DNAT'ed to another destination port (e.g. 1730), while
    nfqueue is being used for final acceptance (e.g. snort).
    
    This happenned after transition from kernel 4.14 to 5.10.161.
    
    Workarounds:
     * keep the same port (1720) in DNAT
     * disable nfqueue
     * disable/unload h323 NAT helper
    
    $ linux-5.10/scripts/decode_stacktrace.sh vmlinux < /tmp/kernel.log
    BUG: kernel NULL pointer dereference, address: 0000000000000084
    [..]
    RIP: 0010:nf_conntrack_update (net/netfilter/nf_conntrack_core.c:2080 net/netfilter/nf_conntrack_core.c:2134) nf_conntrack
    [..]
    nfqnl_reinject (net/netfilter/nfnetlink_queue.c:237) nfnetlink_queue
    nfqnl_recv_verdict (net/netfilter/nfnetlink_queue.c:1230) nfnetlink_queue
    nfnetlink_rcv_msg (net/netfilter/nfnetlink.c:241) nfnetlink
    [..]
    
    Fixes: ee04805ff54a ("netfilter: conntrack: make conntrack userspace helpers work again")
    Signed-off-by: Tijs Van Buggenhout <tijs.van.buggenhout@axsguard.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2c6133eebaf3eb2e16147b856e5bc63f70b48eb
Author: Sungwoo Kim <iam@sung-woo.kim>
Date:   Sat Jun 3 08:28:09 2023 -0400

    Bluetooth: L2CAP: Add missing checks for invalid DCID
    
    [ Upstream commit 75767213f3d9b97f63694d02260b6a49a2271876 ]
    
    When receiving a connect response we should make sure that the DCID is
    within the valid range and that we don't already have another channel
    allocated for the same DCID.
    Missing checks may violate the specification (BLUETOOTH CORE SPECIFICATION
    Version 5.4 | Vol 3, Part A, Page 1046).
    
    Fixes: 40624183c202 ("Bluetooth: L2CAP: Add missing checks for invalid LE DCID")
    Signed-off-by: Sungwoo Kim <iam@sung-woo.kim>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f841f80390d5ffb8a01071b1286213789da1c60
Author: Ying Hsu <yinghsu@chromium.org>
Date:   Wed May 31 03:44:56 2023 +0000

    Bluetooth: Fix l2cap_disconnect_req deadlock
    
    [ Upstream commit 02c5ea5246a44d6ffde0fddebfc1d56188052976 ]
    
    L2CAP assumes that the locks conn->chan_lock and chan->lock are
    acquired in the order conn->chan_lock, chan->lock to avoid
    potential deadlock.
    For example, l2sock_shutdown acquires these locks in the order:
      mutex_lock(&conn->chan_lock)
      l2cap_chan_lock(chan)
    
    However, l2cap_disconnect_req acquires chan->lock in
    l2cap_get_chan_by_scid first and then acquires conn->chan_lock
    before calling l2cap_chan_del. This means that these locks are
    acquired in unexpected order, which leads to potential deadlock:
      l2cap_chan_lock(c)
      mutex_lock(&conn->chan_lock)
    
    This patch releases chan->lock before acquiring the conn_chan_lock
    to avoid the potential deadlock.
    
    Fixes: a2a9339e1c9d ("Bluetooth: L2CAP: Fix use-after-free in l2cap_disconnect_{req,rsp}")
    Signed-off-by: Ying Hsu <yinghsu@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0b1b97702a5bf1e24cb6e6bb6c666662ef9ab95
Author: Alexander Sverdlin <alexander.sverdlin@siemens.com>
Date:   Wed May 31 16:38:26 2023 +0200

    net: dsa: lan9303: allow vid != 0 in port_fdb_{add|del} methods
    
    [ Upstream commit 5a59a58ec25d44f853c26bdbfda47d73b3067435 ]
    
    LAN9303 doesn't associate FDB (ALR) entries with VLANs, it has just one
    global Address Logic Resolution table [1].
    
    Ignore VID in port_fdb_{add|del} methods, go on with the global table. This
    is the same semantics as hellcreek or RZ/N1 implement.
    
    Visible symptoms:
    LAN9303_MDIO 5b050000.ethernet-1:00: port 2 failed to delete 00:xx:xx:xx:xx:cf vid 1 from fdb: -2
    LAN9303_MDIO 5b050000.ethernet-1:00: port 2 failed to add 00:xx:xx:xx:xx:cf vid 1 to fdb: -95
    
    [1] https://ww1.microchip.com/downloads/en/DeviceDoc/00002308A.pdf
    
    Fixes: 0620427ea0d6 ("net: dsa: lan9303: Add fdb/mdb manipulation")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@siemens.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20230531143826.477267-1-alexander.sverdlin@siemens.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e0da73ce546ae2f1f449b1d7207eeead9cb530d
Author: Qingfang DENG <qingfang.deng@siflower.com.cn>
Date:   Thu Jun 1 09:54:32 2023 +0800

    neighbour: fix unaligned access to pneigh_entry
    
    [ Upstream commit ed779fe4c9b5a20b4ab4fd6f3e19807445bb78c7 ]
    
    After the blamed commit, the member key is longer 4-byte aligned. On
    platforms that do not support unaligned access, e.g., MIPS32R2 with
    unaligned_action set to 1, this will trigger a crash when accessing
    an IPv6 pneigh_entry, as the key is cast to an in6_addr pointer.
    
    Change the type of the key to u32 to make it aligned.
    
    Fixes: 62dd93181aaa ("[IPV6] NDISC: Set per-entry is_router flag in Proxy NA.")
    Signed-off-by: Qingfang DENG <qingfang.deng@siflower.com.cn>
    Link: https://lore.kernel.org/r/20230601015432.159066-1-dqfext@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 314713ff4c9bf10392e1c6ce274cad7ab107b666
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Fri Feb 28 19:05:02 2020 -0600

    neighbour: Replace zero-length array with flexible-array member
    
    [ Upstream commit 08ca27d027c238ed3f9b9968d349cebde44d99a6 ]
    
    The current codebase makes use of the zero-length array language
    extension to the C90 standard, but the preferred mechanism to declare
    variable-length types such as these ones is a flexible array member[1][2],
    introduced in C99:
    
    struct foo {
            int stuff;
            struct boo array[];
    };
    
    By making use of the mechanism above, we will get a compiler warning
    in case the flexible array does not occur last in the structure, which
    will help us prevent some kind of undefined behavior bugs from being
    inadvertently introduced[3] to the codebase from now on.
    
    Also, notice that, dynamic memory allocations won't be affected by
    this change:
    
    "Flexible array members have incomplete type, and so the sizeof operator
    may not be applied. As a quirk of the original implementation of
    zero-length arrays, sizeof evaluates to zero."[1]
    
    This issue was found with the help of Coccinelle.
    
    [1] https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html
    [2] https://github.com/KSPP/linux/issues/21
    [3] commit 76497732932f ("cxgb3/l2t: Fix undefined behaviour")
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: ed779fe4c9b5 ("neighbour: fix unaligned access to pneigh_entry")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e96f52705a630aaef0a06fef81ce523f5548c3c0
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Thu May 18 15:04:25 2023 +0200

    spi: qup: Request DMA before enabling clocks
    
    [ Upstream commit 0c331fd1dccfba657129380ee084b95c1cedfbef ]
    
    It is usually better to request all necessary resources (clocks,
    regulators, ...) before starting to make use of them. That way they do
    not change state in case one of the resources is not available yet and
    probe deferral (-EPROBE_DEFER) is necessary. This is particularly
    important for DMA channels and IOMMUs which are not enforced by
    fw_devlink yet (unless you use fw_devlink.strict=1).
    
    spi-qup does this in the wrong order, the clocks are enabled and
    disabled again when the DMA channels are not available yet.
    
    This causes issues in some cases: On most SoCs one of the SPI QUP
    clocks is shared with the UART controller. When using earlycon UART is
    actively used during boot but might not have probed yet, usually for
    the same reason (waiting for the DMA controller). In this case, the
    brief enable/disable cycle ends up gating the clock and further UART
    console output will halt the system completely.
    
    Avoid this by requesting the DMA channels before changing the clock
    state.
    
    Fixes: 612762e82ae6 ("spi: qup: Add DMA capabilities")
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20230518-spi-qup-clk-defer-v1-1-f49fc9ca4e02@gerhold.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cc6435cd704cb7598a526980d02ab8edf821bb4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jun 9 17:10:11 2023 +0200

    i40e: fix build warnings in i40e_alloc.h
    
    Not upstream as it was fixed in a much larger api change in newer
    kernels.
    
    gcc-13 rightfully complains that enum is not the same as an int, so fix
    up the function prototypes in i40e_alloc.h to be correct, solving a
    bunch of build warnings.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc75b8973de4ca046ebec0989a28fe3e043dfb75
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jun 9 16:58:27 2023 +0200

    i40iw: fix build warning in i40iw_manage_apbvt()
    
    Not upstream as this function is no longer around anymore.
    
    The function i40iw_manage_apbvt() has the wrong prototype match from the
    .h file to the .c declaration, so fix it up, otherwise gcc-13 complains
    (rightfully) that the type is incorrect.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c425e71826e4ddfda4fc6112f8116d9b7d61d199
Author: Jiri Slaby (SUSE) <jirislaby@kernel.org>
Date:   Tue Dec 13 13:08:26 2022 +0100

    block/blk-iocost (gcc13): keep large values in a new enum
    
    commit ff1cc97b1f4c10db224f276d9615b22835b8c424 upstream.
    
    Since gcc13, each member of an enum has the same type as the enum [1]. And
    that is inherited from its members. Provided:
      VTIME_PER_SEC_SHIFT     = 37,
      VTIME_PER_SEC           = 1LLU << VTIME_PER_SEC_SHIFT,
      ...
      AUTOP_CYCLE_NSEC        = 10LLU * NSEC_PER_SEC,
    the named type is unsigned long.
    
    This generates warnings with gcc-13:
      block/blk-iocost.c: In function 'ioc_weight_prfill':
      block/blk-iocost.c:3037:37: error: format '%u' expects argument of type 'unsigned int', but argument 4 has type 'long unsigned int'
    
      block/blk-iocost.c: In function 'ioc_weight_show':
      block/blk-iocost.c:3047:34: error: format '%u' expects argument of type 'unsigned int', but argument 3 has type 'long unsigned int'
    
    So split the anonymous enum with large values to a separate enum, so
    that they don't affect other members.
    
    [1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=36113
    
    Cc: Martin Liska <mliska@suse.cz>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Josef Bacik <josef@toxicpanda.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: cgroups@vger.kernel.org
    Cc: linux-block@vger.kernel.org
    Signed-off-by: Jiri Slaby (SUSE) <jirislaby@kernel.org>
    Link: https://lore.kernel.org/r/20221213120826.17446-1-jirislaby@kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec97af8e8a36d75dd6936220e734fcc8648863b9
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 18 09:07:01 2023 +0100

    blk-iocost: avoid 64-bit division in ioc_timer_fn
    
    commit 5f2779dfa7b8cc7dfd4a1b6586d86e0d193266f3 upstream.
    
    The behavior of 'enum' types has changed in gcc-13, so now the
    UNBUSY_THR_PCT constant is interpreted as a 64-bit number because
    it is defined as part of the same enum definition as some other
    constants that do not fit within a 32-bit integer. This in turn
    leads to some inefficient code on 32-bit architectures as well
    as a link error:
    
    arm-linux-gnueabi/bin/arm-linux-gnueabi-ld: block/blk-iocost.o: in function `ioc_timer_fn':
    blk-iocost.c:(.text+0x68e8): undefined reference to `__aeabi_uldivmod'
    arm-linux-gnueabi-ld: blk-iocost.c:(.text+0x6908): undefined reference to `__aeabi_uldivmod'
    
    Split the enum definition to keep the 64-bit timing constants in
    a separate enum type from those constants that can clearly fit
    within a smaller type.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Tejun Heo <tj@kernel.org>
    Link: https://lore.kernel.org/r/20230118080706.3303186-1-arnd@kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

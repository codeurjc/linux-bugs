commit 7d8048d4e064d4ef7719e9520f6c123c051fca99
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jul 29 17:25:34 2022 +0200

    Linux 5.15.58
    
    Link: https://lore.kernel.org/r/20220727161026.977588183@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20220728133327.660846209@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6e4817ab622f526d6afe9e02c6d85b177b3e846
Author: Hayden Goodfellow <Hayden.Goodfellow@amd.com>
Date:   Sun Sep 12 21:32:09 2021 -0400

    drm/amd/display: Fix wrong format specifier in amdgpu_dm.c
    
    commit 655c167edc8c260b6df08bdcfaca8afde0efbeb6 upstream.
    
    [Why]
    Currently, the 32bit kernel build fails due to an incorrect string
    format specifier. ARRAY_SIZE() returns size_t type as it uses sizeof().
    However, we specify it in a string as %ld. This causes a compiler error
    and causes the 32bit build to fail.
    
    [How]
    Change the %ld to %zu as size_t (which sizeof() returns) is an unsigned
    integer data type. We use 'z' to ensure it also works with 64bit build.
    
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Hayden Goodfellow <Hayden.Goodfellow@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 198a6f40822eda39f713e345cebdb8523645d3ce
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Jan 11 12:11:14 2022 +0100

    x86/entry_32: Fix segment exceptions
    
    commit 9cdbeec4096804083944d05da96bbaf59a1eb4f9 upstream.
    
    The LKP robot reported that commit in Fixes: caused a failure. Turns out
    the ldt_gdt_32 selftest turns into an infinite loop trying to clear the
    segment.
    
    As discovered by Sean, what happens is that PARANOID_EXIT_TO_KERNEL_MODE
    in the handle_exception_return path overwrites the entry stack data with
    the task stack data, restoring the "bad" segment value.
    
    Instead of having the exception retry the instruction, have it emulate
    the full instruction. Replace EX_TYPE_POP_ZERO with EX_TYPE_POP_REG
    which will do the equivalent of: POP %reg; MOV $imm, %reg.
    
    In order to encode the segment registers, add them as registers 8-11 for
    32-bit.
    
    By setting regs->[defg]s the (nested) RESTORE_REGS will pop this value
    at the end of the exception handler and by increasing regs->sp, it will
    have skipped the stack slot.
    
    This was debugged by Sean Christopherson <seanjc@google.com>.
    
     [ bp: Add EX_REG_GS too. ]
    
    Fixes: aa93e2ad7464 ("x86/entry_32: Remove .fixup usage")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/Yd1l0gInc4zRcnt/@hirez.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec9ec3bc08b18c5b1b2feafd306ea7c348013898
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon May 16 10:05:48 2022 +0300

    drm/amdgpu: Off by one in dm_dmub_outbox1_low_irq()
    
    commit a35faec3db0e13aac8ea720bc1a3503081dd5a3d upstream.
    
    The > ARRAY_SIZE() should be >= ARRAY_SIZE() to prevent an out of bounds
    access.
    
    Fixes: e27c41d5b068 ("drm/amd/display: Support for DMUB HPD interrupt handling")
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4481000ac689119ed042caf499bd86b69f14642
Author: Jan Beulich <jbeulich@suse.com>
Date:   Tue Jun 7 17:00:53 2022 +0200

    x86: drop bogus "cc" clobber from __try_cmpxchg_user_asm()
    
    commit 1df931d95f4dc1c11db1123e85d4e08156e46ef9 upstream.
    
    As noted (and fixed) a couple of times in the past, "=@cc<cond>" outputs
    and clobbering of "cc" don't work well together. The compiler appears to
    mean to reject such, but doesn't - in its upstream form - quite manage
    to yet for "cc". Furthermore two similar macros don't clobber "cc", and
    clobbering "cc" is pointless in asm()-s for x86 anyway - the compiler
    always assumes status flags to be clobbered there.
    
    Fixes: 989b5db215a2 ("x86/uaccess: Implement macros for CMPXCHG on user addresses")
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Message-Id: <485c0c0b-a3a7-0b7c-5264-7d00c01de032@suse.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9444462d6343566155aa18a9dddb0144dd2f1a6e
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Thu May 12 13:14:20 2022 +0300

    KVM: x86: fix typo in __try_cmpxchg_user causing non-atomicness
    
    commit 33fbe6befa622c082f7d417896832856814bdde0 upstream.
    
    This shows up as a TDP MMU leak when running nested.  Non-working cmpxchg on L0
    relies makes L1 install two different shadow pages under same spte, and one of
    them is leaked.
    
    Fixes: 1c2361f667f36 ("KVM: x86: Use __try_cmpxchg_user() to emulate atomic accesses")
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20220512101420.306759-1-mlevitsk@redhat.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6c24afba608b9faed82bd24a3adf2efac269f73
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue Mar 29 13:21:45 2022 -0700

    x86/extable: Prefer local labels in .set directives
    
    commit 334865b2915c33080624e0d06f1c3e917036472c upstream.
    
    Bernardo reported an error that Nathan bisected down to
    (x86_64) defconfig+LTO_CLANG_FULL+X86_PMEM_LEGACY.
    
        LTO     vmlinux.o
      ld.lld: error: <instantiation>:1:13: redefinition of 'found'
      .set found, 0
                  ^
    
      <inline asm>:29:1: while in macro instantiation
      extable_type_reg reg=%eax, type=(17 | ((0) << 16))
      ^
    
    This appears to be another LTO specific issue similar to what was folded
    into commit 4b5305decc84 ("x86/extable: Extend extable functionality"),
    where the `.set found, 0` in DEFINE_EXTABLE_TYPE_REG in
    arch/x86/include/asm/asm.h conflicts with the symbol for the static
    function `found` in arch/x86/kernel/pmem.c.
    
    Assembler .set directive declare symbols with global visibility, so the
    assembler may not rename such symbols in the event of a conflict. LTO
    could rename static functions if there was a conflict in C sources, but
    it cannot see into symbols defined in inline asm.
    
    The symbols are also retained in the symbol table, regardless of LTO.
    
    Give the symbols .L prefixes making them locally visible, so that they
    may be renamed for LTO to avoid conflicts, and to drop them from the
    symbol table regardless of LTO.
    
    Fixes: 4b5305decc84 ("x86/extable: Extend extable functionality")
    Reported-by: Bernardo Meurer Costa <beme@google.com>
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20220329202148.2379697-1-ndesaulniers@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f85a6046f7718f11c6ad015a0ba25d897194b1ac
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Sun Jan 9 19:42:45 2022 +0100

    drm/amd/display: invalid parameter check in dmub_hpd_callback
    
    commit 978ffac878fd64039f95798b15b430032d2d89d5 upstream.
    
    The function performs a check on the "adev" input parameter, however, it
    is used before the check.
    
    Initialize the "dev" variable after the sanity check to avoid a possible
    NULL pointer dereference.
    
    Fixes: e27c41d5b0681 ("drm/amd/display: Support for DMUB HPD interrupt handling")
    Addresses-Coverity-ID: 1493909 ("Null pointer dereference")
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 760fe32034931a8c97c773edef2f1b7c7346f43a
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Nov 4 16:52:06 2021 -0400

    drm/amd/display: Don't lock connection_mutex for DMUB HPD
    
    commit d82b3266ef88dc10fe0e7031b2bd8ba7eedb7e59 upstream.
    
    [Why]
    Per DRM spec we only need to hold that lock when touching
    connector->state - which we do not do in that handler.
    
    Taking this locking introduces unnecessary dependencies with other
    threads which is bad for performance and opens up the potential for
    a deadlock since there are multiple locks being held at once.
    
    [How]
    Remove the connection_mutex lock/unlock routine and just iterate over
    the drm connectors normally. The iter helpers implicitly lock the
    connection list so this is safe to do.
    
    DC link access also does not need to be guarded since the link
    table is static at creation - we don't dynamically add or remove links,
    just streams.
    
    Fixes: e27c41d5b068 ("drm/amd/display: Support for DMUB HPD interrupt handling")
    
    Reviewed-by: Jude Shih <shenshih@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d026ed6eda29b2d9c5ace9f8142cd6d1ec819c0b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 21 10:30:14 2022 -0700

    watch-queue: remove spurious double semicolon
    
    commit 44e29e64cf1ac0cffb152e0532227ea6d002aa28 upstream.
    
    Sedat Dilek noticed that I had an extraneous semicolon at the end of a
    line in the previous patch.
    
    It's harmless, but unintentional, and while compilers just treat it as
    an extra empty statement, for all I know some other tooling might warn
    about it. So clean it up before other people notice too ;)
    
    Fixes: 353f7988dd84 ("watchqueue: make sure to serialize 'wqueue->defunct' properly")
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b34229f4b212367196d787170b02be6f31802622
Author: Jose Alonso <joalonsof@gmail.com>
Date:   Mon Jun 13 15:32:44 2022 -0300

    net: usb: ax88179_178a needs FLAG_SEND_ZLP
    
    commit 36a15e1cb134c0395261ba1940762703f778438c upstream.
    
    The extra byte inserted by usbnet.c when
     (length % dev->maxpacket == 0) is causing problems to device.
    
    This patch sets FLAG_SEND_ZLP to avoid this.
    
    Tested with: 0b95:1790 ASIX Electronics Corp. AX88179 Gigabit Ethernet
    
    Problems observed:
    ======================================================================
    1) Using ssh/sshfs. The remote sshd daemon can abort with the message:
       "message authentication code incorrect"
       This happens because the tcp message sent is corrupted during the
       USB "Bulk out". The device calculate the tcp checksum and send a
       valid tcp message to the remote sshd. Then the encryption detects
       the error and aborts.
    2) NETDEV WATCHDOG: ... (ax88179_178a): transmit queue 0 timed out
    3) Stop normal work without any log message.
       The "Bulk in" continue receiving packets normally.
       The host sends "Bulk out" and the device responds with -ECONNRESET.
       (The netusb.c code tx_complete ignore -ECONNRESET)
    Under normal conditions these errors take days to happen and in
    intense usage take hours.
    
    A test with ping gives packet loss, showing that something is wrong:
    ping -4 -s 462 {destination}    # 462 = 512 - 42 - 8
    Not all packets fail.
    My guess is that the device tries to find another packet starting
    at the extra byte and will fail or not depending on the next
    bytes (old buffer content).
    ======================================================================
    
    Signed-off-by: Jose Alonso <joalonsof@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2d1e4cd558cffec6bfe318f5d74e6cffc374d29
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Thu Jul 7 10:25:58 2022 +0200

    tty: use new tty_insert_flip_string_and_push_buffer() in pty_write()
    
    commit a501ab75e7624d133a5a3c7ec010687c8b961d23 upstream.
    
    There is a race in pty_write(). pty_write() can be called in parallel
    with e.g. ioctl(TIOCSTI) or ioctl(TCXONC) which also inserts chars to
    the buffer. Provided, tty_flip_buffer_push() in pty_write() is called
    outside the lock, it can commit inconsistent tail. This can lead to out
    of bounds writes and other issues. See the Link below.
    
    To fix this, we have to introduce a new helper called
    tty_insert_flip_string_and_push_buffer(). It does both
    tty_insert_flip_string() and tty_flip_buffer_commit() under the port
    lock. It also calls queue_work(), but outside the lock. See
    71a174b39f10 (pty: do tty_flip_buffer_push without port->lock in
    pty_write) for the reasons.
    
    Keep the helper internal-only (in drivers' tty.h). It is not intended to
    be used widely.
    
    Link: https://seclists.org/oss-sec/2022/q2/155
    Fixes: 71a174b39f10 (pty: do tty_flip_buffer_push without port->lock in pty_write)
    Cc: 一只狗 <chennbnbnb@gmail.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Suggested-by: Hillf Danton <hdanton@sina.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20220707082558.9250-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 816c301b6a739ae0a78b566248acc0bc81fe05c7
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Thu Jul 7 10:25:57 2022 +0200

    tty: extract tty_flip_buffer_commit() from tty_flip_buffer_push()
    
    commit 716b10580283fda66f2b88140e3964f8a7f9da89 upstream.
    
    We will need this new helper in the next patch.
    
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: 一只狗 <chennbnbnb@gmail.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20220707082558.9250-1-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35545303454a0a711db2f61eae693647e3a87b4b
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Mon Nov 22 12:16:48 2021 +0100

    tty: drop tty_schedule_flip()
    
    commit 5db96ef23bda6c2a61a51693c85b78b52d03f654 upstream.
    
    Since commit a9c3f68f3cd8d (tty: Fix low_latency BUG) in 2014,
    tty_flip_buffer_push() is only a wrapper to tty_schedule_flip(). All
    users were converted in the previous patches, so remove
    tty_schedule_flip() completely while inlining its body into
    tty_flip_buffer_push().
    
    One less exported function.
    
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20211122111648.30379-4-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6219f5b54ad8f0c5c8ae50c17166e67193366aa1
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Mon Nov 22 12:16:47 2021 +0100

    tty: the rest, stop using tty_schedule_flip()
    
    commit b68b914494df4f79b4e9b58953110574af1cb7a2 upstream.
    
    Since commit a9c3f68f3cd8d (tty: Fix low_latency BUG) in 2014,
    tty_flip_buffer_push() is only a wrapper to tty_schedule_flip(). We are
    going to remove the latter (as it is used less), so call the former in
    the rest of the users.
    
    Cc: Richard Henderson <rth@twiddle.net>
    Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Cc: Matt Turner <mattst88@gmail.com>
    Cc: William Hubbs <w.d.hubbs@gmail.com>
    Cc: Chris Brannon <chris@the-brannons.com>
    Cc: Kirk Reiser <kirk@reisers.ca>
    Cc: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Alexander Gordeev <agordeev@linux.ibm.com>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20211122111648.30379-3-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea255921c4b5ea04090fdca9bd9ae1b81f613a07
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Mon Nov 22 12:16:46 2021 +0100

    tty: drivers/tty/, stop using tty_schedule_flip()
    
    commit 5f6a85158ccacc3f09744b3aafe8b11ab3b6c6f6 upstream.
    
    Since commit a9c3f68f3cd8d (tty: Fix low_latency BUG) in 2014,
    tty_flip_buffer_push() is only a wrapper to tty_schedule_flip(). We are
    going to remove the latter (as it is used less), so call the former in
    drivers/tty/.
    
    Cc: Vladimir Zapolskiy <vz@mleia.com>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20211122111648.30379-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba3a8af8a21a81cfd0c8c689a81261caba934f97
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 19 11:09:01 2022 -0700

    watchqueue: make sure to serialize 'wqueue->defunct' properly
    
    commit 353f7988dd8413c47718f7ca79c030b6fb62cfe5 upstream.
    
    When the pipe is closed, we mark the associated watchqueue defunct by
    calling watch_queue_clear().  However, while that is protected by the
    watchqueue lock, new watchqueue entries aren't actually added under that
    lock at all: they use the pipe->rd_wait.lock instead, and looking up
    that pipe happens without any locking.
    
    The watchqueue code uses the RCU read-side section to make sure that the
    wqueue entry itself hasn't disappeared, but that does not protect the
    pipe_info in any way.
    
    So make sure to actually hold the wqueue lock when posting watch events,
    properly serializing against the pipe being torn down.
    
    Reported-by: Noam Rathaus <noamr@ssd-disclosure.com>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49338b651f5a6ba0863296678735f0d7bb75c1ed
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Jul 13 14:38:19 2022 -0700

    x86/alternative: Report missing return thunk details
    
    commit 65cdf0d623bedf0e069bb64ed52e8bb20105e2ba upstream.
    
    Debugging missing return thunks is easier if we can see where they're
    happening.
    
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/lkml/Ys66hwtFcGbYmoiZ@hirez.programming.kicks-ass.net/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8842d5d70713896ac95423ce795366b350b1b0d7
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Jul 18 13:41:37 2022 +0200

    x86/amd: Use IBPB for firmware calls
    
    commit 28a99e95f55c61855983d36a88c05c178d966bb7 upstream.
    
    On AMD IBRS does not prevent Retbleed; as such use IBPB before a
    firmware call to flush the branch history state.
    
    And because in order to do an EFI call, the kernel maps a whole lot of
    the kernel page table into the EFI page table, do an IBPB just in case
    in order to prevent the scenario of poisoning the BTB and causing an EFI
    call using the unprotected RET there.
    
      [ bp: Massage. ]
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20220715194550.793957-1-cascardo@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2b484d784c8dfc3eb62fd4f9ff11515b6e78e19
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Tue Oct 12 10:04:03 2021 -0400

    drm/amd/display: Fix surface optimization regression on Carrizo
    
    commit 62e5a7e2333a9f5395f6a9db766b7b06c949fe7a upstream.
    
    [Why]
    DCE legacy optimization path isn't well tested under new DC optimization
    flow which can result in underflow occuring when initializing X11 on
    Carrizo.
    
    [How]
    Retain the legacy optimization flow for DCE and keep the new one for DCN
    to satisfy optimizations being correctly applied for ASIC that can
    support it.
    
    Fixes: 34316c1e561db0 ("drm/amd/display: Optimize bandwidth on following fast update")
    Reported-by: Tom St Denis <tom.stdenis@amd.com>
    Tested-by: Tom St Denis <tom.stdenis@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9581511948582a0ed8da03fb91d2ab658087283d
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Aug 19 16:36:09 2021 -0400

    drm/amd/display: Optimize bandwidth on following fast update
    
    commit 34316c1e561db0b24e341029f04a5a5bead9a7bc upstream.
    
    [Why]
    The current call to optimize_bandwidth never occurs because flip is
    always pending from the FULL and FAST updates.
    
    [How]
    Optimize on the following flip when it's a FAST update and we know we
    aren't going to be modifying the clocks again.
    
    Reviewed-by: Bhawanpreet Lakha <bhawanpreet.lakha@amd.com>
    Acked-by: Mikita Lipski <mikita.lipski@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3f16976b9ed7afafa2caf12ef5539fafc34d48d
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Dec 10 15:04:05 2021 -0800

    drm/amd/display: Reset DMCUB before HW init
    
    commit 791255ca9fbe38042cfd55df5deb116dc11fef18 upstream.
    
    [Why]
    If the firmware wasn't reset by PSP or HW and is currently running
    then the firmware will hang or perform underfined behavior when we
    modify its firmware state underneath it.
    
    [How]
    Reset DMCUB before setting up cache windows and performing HW init.
    
    Reviewed-by: Aurabindo Jayamohanan Pillai <Aurabindo.Pillai@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Limonciello, Mario" <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b4b1f8dfeb7814aa69666d9a15769bb15e5a36a
Author: Sungjong Seo <sj1557.seo@samsung.com>
Date:   Wed Jun 8 00:05:21 2022 +0900

    exfat: use updated exfat_chain directly during renaming
    
    commit 204e6ceaa1035cb7b92b156517e88842ebb4c7ff upstream.
    
    In order for a file to access its own directory entry set,
    exfat_inode_info(ei) has two copied values. One is ei->dir, which is
    a snapshot of exfat_chain of the parent directory, and the other is
    ei->entry, which is the offset of the start of the directory entry set
    in the parent directory.
    
    Since the parent directory can be updated after the snapshot point,
    it should be used only for accessing one's own directory entry set.
    
    However, as of now, during renaming, it could try to traverse or to
    allocate clusters via snapshot values, it does not make sense.
    
    This potential problem has been revealed when exfat_update_parent_info()
    was removed by commit d8dad2588add ("exfat: fix referencing wrong parent
    directory information after renaming"). However, I don't think it's good
    idea to bring exfat_update_parent_info() back.
    
    Instead, let's use the updated exfat_chain of parent directory diectly.
    
    Fixes: d8dad2588add ("exfat: fix referencing wrong parent directory information after renaming")
    Reported-by: Wang Yugui <wangyugui@e16-tech.com>
    Signed-off-by: Sungjong Seo <sj1557.seo@samsung.com>
    Tested-by: Wang Yugui <wangyugui@e16-tech.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 000473ac997a46f787a9beaa55110e4b2d21b9f2
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Feb 14 17:59:38 2022 -0800

    Bluetooth: Fix bt_skb_sendmmsg not allocating partial chunks
    
    commit 29fb608396d6a62c1b85acc421ad7a4399085b9f upstream.
    
    Since bt_skb_sendmmsg can be used with the likes of SOCK_STREAM it
    shall return the partial chunks it could allocate instead of freeing
    everything as otherwise it can cause problems like bellow.
    
    Fixes: 81be03e026dc ("Bluetooth: RFCOMM: Replace use of memcpy_from_msg with bt_skb_sendmmsg")
    Reported-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Link: https://lore.kernel.org/r/d7206e12-1b99-c3be-84f4-df22af427ef5@molgen.mpg.de
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=215594
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Tested-by: Paul Menzel <pmenzel@molgen.mpg.de> (Nokia N9 (MeeGo/Harmattan)
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d01605a01f0103fc8c05ac211ba08d452f9d1fa1
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Sep 16 13:10:49 2021 -0700

    Bluetooth: SCO: Fix sco_send_frame returning skb->len
    
    commit 037ce005af6b8a3e40ee07c6e9266c8997e6a4d6 upstream.
    
    The skb in modified by hci_send_sco which pushes SCO headers thus
    changing skb->len causing sco_sock_sendmsg to fail.
    
    Fixes: 0771cbb3b97d ("Bluetooth: SCO: Replace use of memcpy_from_msg with bt_skb_sendmsg")
    Tested-by: Tedd Ho-Jeong An <tedd.an@intel.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ae749f40d0166be68d845781fe61bfcfa147ba4
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Sep 16 13:10:48 2021 -0700

    Bluetooth: Fix passing NULL to PTR_ERR
    
    commit 266191aa8d14b84958aaeb5e96ee4e97839e3d87 upstream.
    
    Passing NULL to PTR_ERR will result in 0 (success), also since the likes of
    bt_skb_sendmsg does never return NULL it is safe to replace the instances of
    IS_ERR_OR_NULL with IS_ERR when checking its return.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Tested-by: Tedd Ho-Jeong An <tedd.an@intel.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 367becefb8a1b4512d6ec4d6dc7e84006f8ac773
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Sep 3 15:27:32 2021 -0700

    Bluetooth: RFCOMM: Replace use of memcpy_from_msg with bt_skb_sendmmsg
    
    commit 81be03e026dc0c16dc1c64e088b2a53b73caa895 upstream.
    
    This makes use of bt_skb_sendmmsg instead using memcpy_from_msg which
    is not considered safe to be used when lock_sock is held.
    
    Also make rfcomm_dlc_send handle skb with fragments and queue them all
    atomically.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1864e820a5ac4747845247497d9daf8d87c9c8c4
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Sep 3 15:27:31 2021 -0700

    Bluetooth: SCO: Replace use of memcpy_from_msg with bt_skb_sendmsg
    
    commit 0771cbb3b97d3c1d68eecd7f00055f599954c34e upstream.
    
    This makes use of bt_skb_sendmsg instead of allocating a different
    buffer to be used with memcpy_from_msg which cause one extra copy.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb7ed8c7fe5b20091c2297f7d3e2d36ebcd95672
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Sep 3 15:27:30 2021 -0700

    Bluetooth: Add bt_skb_sendmmsg helper
    
    commit 97e4e80299844bb5f6ce5a7540742ffbffae3d97 upstream.
    
    This works similarly to bt_skb_sendmsg but can split the msg into
    multiple skb fragments which is useful for stream sockets.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4e8071be33756e8c5b19224359ff6221129f66b
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Fri Sep 3 15:27:29 2021 -0700

    Bluetooth: Add bt_skb_sendmsg helper
    
    commit 38f64f650dc0e44c146ff88d15a7339efa325918 upstream.
    
    bt_skb_sendmsg helps takes care of allocation the skb and copying the
    the contents of msg over to the skb while checking for possible errors
    so it should be safe to call it without holding lock_sock.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59f132fda50d7b617b0c2910b27428b037209245
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue May 17 22:52:50 2022 +0200

    um: virtio_uml: Fix broken device handling in time-travel
    
    [ Upstream commit af9fb41ed315ce95f659f0b10b4d59a71975381d ]
    
    If a device implementation crashes, virtio_uml will mark it
    as dead by calling virtio_break_device() and scheduling the
    work that will remove it.
    
    This still seems like the right thing to do, but it's done
    directly while reading the message, and if time-travel is
    used, this is in the time-travel handler, outside of the
    normal Linux machinery. Therefore, we cannot acquire locks
    or do normal "linux-y" things because e.g. lockdep will be
    confused about the context.
    
    Move handling this situation out of the read function and
    into the actual IRQ handler and response handling instead,
    so that in the case of time-travel we don't call it in the
    wrong context.
    
    Chances are the system will still crash immediately, since
    the device implementation crashing may also cause the time-
    travel controller to go down, but at least all of that now
    happens without strange warnings from lockdep.
    
    Fixes: c8177aba37ca ("um: time-travel: rework interrupt handling in ext mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38a28bb80f001fb5c11504d94680214a56983ebe
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Tue Dec 21 10:04:46 2021 +0100

    um: virtio_uml: Allow probing from devicetree
    
    [ Upstream commit db0dd9cee82270e032123169ceff659eced5115d ]
    
    Allow the virtio_uml device to be probed from the devicetree so that
    sub-devices can be specified using the standard virtio bindings, for
    example:
    
      virtio@1 {
        compatible = "virtio,uml";
        socket-path = "i2c.sock";
        virtio-device-id = <0x22>;
    
        i2c-controller {
          compatible = "virtio,device22";
          #address-cells = <0x01>;
          #size-cells = <0x00>;
    
          light-sensor@01 {
            compatible = "ti,opt3001";
            reg = <0x01>;
          };
        };
      };
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8413b16feee83d9e00fbfe332ec401726079fe7
Author: Wonhyuk Yang <vvghjk1234@gmail.com>
Date:   Tue May 3 14:05:46 2022 +0900

    tracing: Fix return value of trace_pid_write()
    
    [ Upstream commit b27f266f74fbda4ee36c2b2b04d15992860cf23b ]
    
    Setting set_event_pid with trailing whitespace lead to endless write
    system calls like below.
    
        $ strace echo "123 " > /sys/kernel/debug/tracing/set_event_pid
        execve("/usr/bin/echo", ["echo", "123 "], ...) = 0
        ...
        write(1, "123 \n", 5)                   = 4
        write(1, "\n", 1)                       = 0
        write(1, "\n", 1)                       = 0
        write(1, "\n", 1)                       = 0
        write(1, "\n", 1)                       = 0
        write(1, "\n", 1)                       = 0
        ....
    
    This is because, the result of trace_get_user's are not returned when it
    read at least one pid. To fix it, update read variable even if
    parser->idx == 0.
    
    The result of applied patch is below.
    
        $ strace echo "123 " > /sys/kernel/debug/tracing/set_event_pid
        execve("/usr/bin/echo", ["echo", "123 "], ...) = 0
        ...
        write(1, "123 \n", 5)                   = 5
        close(1)                                = 0
    
    Link: https://lkml.kernel.org/r/20220503050546.288911-1-vvghjk1234@gmail.com
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Baik Song An <bsahn@etri.re.kr>
    Cc: Hong Yeon Kim <kimhy@etri.re.kr>
    Cc: Taeung Song <taeung@reallinux.co.kr>
    Cc: linuxgeek@linuxgeek.io
    Cc: stable@vger.kernel.org
    Fixes: 4909010788640 ("tracing: Add set_event_pid directory for future use")
    Signed-off-by: Wonhyuk Yang <vvghjk1234@gmail.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9777061727b759e999fb04a302ff50a9fd33225
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Sep 23 21:03:49 2021 -0400

    tracing: Place trace_pid_list logic into abstract functions
    
    [ Upstream commit 6954e415264eeb5ee6be0d22d789ad12c995ee64 ]
    
    Instead of having the logic that does trace_pid_list open coded, wrap it in
    abstract functions. This will allow a rewrite of the logic that implements
    the trace_pid_list without affecting the users.
    
    Note, this causes a change in behavior. Every time a pid is written into
    the set_*_pid file, it creates a new list and uses RCU to update it. If
    pid_max is lowered, but there was a pid currently in the list that was
    higher than pid_max, those pids will now be removed on updating the list.
    The old behavior kept that from happening.
    
    The rewrite of the pid_list logic will no longer depend on pid_max,
    and will return the old behavior.
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6107b014163f04252ced73e8171139ab9c8b7804
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Apr 7 14:56:32 2022 -0400

    tracing: Have event format check not flag %p* on __get_dynamic_array()
    
    [ Upstream commit 499f12168aebd6da8fa32c9b7d6203ca9b5eb88d ]
    
    The print fmt check against trace events to make sure that the format does
    not use pointers that may be freed from the time of the trace to the time
    the event is read, gives a false positive on %pISpc when reading data that
    was saved in __get_dynamic_array() when it is perfectly fine to do so, as
    the data being read is on the ring buffer.
    
    Link: https://lore.kernel.org/all/20220407144524.2a592ed6@canb.auug.org.au/
    
    Cc: stable@vger.kernel.org
    Fixes: 5013f454a352c ("tracing: Add check of trace event print fmts for dereferencing pointers")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 621c1d8c1bd118fae7f723b3fa3830b76435be2f
Author: Yuezhang Mo <Yuezhang.Mo@sony.com>
Date:   Mon Apr 4 11:58:06 2022 +0900

    exfat: fix referencing wrong parent directory information after renaming
    
    [ Upstream commit d8dad2588addd1d861ce19e7df3b702330f0c7e3 ]
    
    During renaming, the parent directory information maybe
    updated. But the file/directory still references to the
    old parent directory information.
    
    This bug will cause 2 problems.
    
    (1) The renamed file can not be written.
    
        [10768.175172] exFAT-fs (sda1): error, failed to bmap (inode : 7afd50e4 iblock : 0, err : -5)
        [10768.184285] exFAT-fs (sda1): Filesystem has been set read-only
        ash: write error: Input/output error
    
    (2) Some dentries of the renamed file/directory are not set
        to deleted after removing the file/directory.
    
    exfat_update_parent_info() is a workaround for the wrong parent
    directory information being used after renaming. Now that bug is
    fixed, this is no longer needed, so remove it.
    
    Fixes: 5f2aa075070c ("exfat: add inode operations")
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>
    Reviewed-by: Andy Wu <Andy.Wu@sony.com>
    Reviewed-by: Aoyama Wataru <wataru.aoyama@sony.com>
    Reviewed-by: Daniel Palmer <daniel.palmer@sony.com>
    Reviewed-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72e0ec16f17236b860796cbcc38495356d27dedd
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:17 2022 +0100

    crypto: qat - re-enable registration of algorithms
    
    [ Upstream commit d09144745959bf7852ccafd73243dd7d1eaeb163 ]
    
    Re-enable the registration of algorithms after fixes to (1) use
    pre-allocated buffers in the datapath and (2) support the
    CRYPTO_TFM_REQ_MAY_BACKLOG flag.
    
    This reverts commit 8893d27ffcaf6ec6267038a177cb87bcde4dd3de.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Reviewed-by: Adam Guerin <adam.guerin@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7f979ed51f96495328157df663c835b17db1e30
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:15 2022 +0100

    crypto: qat - add param check for DH
    
    [ Upstream commit 2acbb8771f6ac82422886e63832ee7a0f4b1635b ]
    
    Reject requests with a source buffer that is bigger than the size of the
    key. This is to prevent a possible integer underflow that might happen
    when copying the source scatterlist into a linear buffer.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Adam Guerin <adam.guerin@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d6d2adce08788b7667a6e58002682ea1bbf6a79
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:14 2022 +0100

    crypto: qat - add param check for RSA
    
    [ Upstream commit 9714061423b8b24b8afb31b8eb4df977c63f19c4 ]
    
    Reject requests with a source buffer that is bigger than the size of the
    key. This is to prevent a possible integer underflow that might happen
    when copying the source scatterlist into a linear buffer.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Adam Guerin <adam.guerin@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2488286d3e77606f8ab923c2420889d38876ac9b
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:13 2022 +0100

    crypto: qat - remove dma_free_coherent() for DH
    
    [ Upstream commit 029aa4624a7fe35233bdd3d1354dc7be260380bf ]
    
    The functions qat_dh_compute_value() allocates memory with
    dma_alloc_coherent() if the source or the destination buffers are made
    of multiple flat buffers or of a size that is not compatible with the
    hardware.
    This memory is then freed with dma_free_coherent() in the context of a
    tasklet invoked to handle the response for the corresponding request.
    
    According to Documentation/core-api/dma-api-howto.rst, the function
    dma_free_coherent() cannot be called in an interrupt context.
    
    Replace allocations with dma_alloc_coherent() in the function
    qat_dh_compute_value() with kmalloc() + dma_map_single().
    
    Cc: stable@vger.kernel.org
    Fixes: c9839143ebbf ("crypto: qat - Add DH support")
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Adam Guerin <adam.guerin@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e8606e7ae401251f74c91423fb5bb8e5d11a0c8
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:12 2022 +0100

    crypto: qat - remove dma_free_coherent() for RSA
    
    [ Upstream commit 3dfaf0071ed74d7a9c6b3c9ea4df7a6f8e423c2a ]
    
    After commit f5ff79fddf0e ("dma-mapping: remove CONFIG_DMA_REMAP"), if
    the algorithms are enabled, the driver crashes with a BUG_ON while
    executing vunmap() in the context of a tasklet. This is due to the fact
    that the function dma_free_coherent() cannot be called in an interrupt
    context (see Documentation/core-api/dma-api-howto.rst).
    
    The functions qat_rsa_enc() and qat_rsa_dec() allocate memory with
    dma_alloc_coherent() if the source or the destination buffers are made
    of multiple flat buffers or of a size that is not compatible with the
    hardware.
    This memory is then freed with dma_free_coherent() in the context of a
    tasklet invoked to handle the response for the corresponding request.
    
    Replace allocations with dma_alloc_coherent() in the functions
    qat_rsa_enc() and qat_rsa_dec() with kmalloc() + dma_map_single().
    
    Cc: stable@vger.kernel.org
    Fixes: a990532023b9 ("crypto: qat - Add support for RSA algorithm")
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Adam Guerin <adam.guerin@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a843925e0287eebb4aa808666bf22c664dfe4c53
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:11 2022 +0100

    crypto: qat - fix memory leak in RSA
    
    [ Upstream commit 80a52e1ee7757b742f96bfb0d58f0c14eb6583d0 ]
    
    When an RSA key represented in form 2 (as defined in PKCS #1 V2.1) is
    used, some components of the private key persist even after the TFM is
    released.
    Replace the explicit calls to free the buffers in qat_rsa_exit_tfm()
    with a call to qat_rsa_clear_ctx() which frees all buffers referenced in
    the TFM context.
    
    Cc: stable@vger.kernel.org
    Fixes: 879f77e9071f ("crypto: qat - Add RSA CRT mode")
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Adam Guerin <adam.guerin@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef5594895df27d668ad31979fbed77737e64a611
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:10 2022 +0100

    crypto: qat - add backlog mechanism
    
    [ Upstream commit 38682383973280e5be2802ba8a8d4a636d36cb19 ]
    
    The implementations of the crypto algorithms (aead, skcipher, etc) in
    the QAT driver do not properly support requests with the
    CRYPTO_TFM_REQ_MAY_BACKLOG flag set. If the HW queue is full, the driver
    returns -EBUSY but does not enqueue the request. This can result in
    applications like dm-crypt waiting indefinitely for the completion of a
    request that was never submitted to the hardware.
    
    Fix this by adding a software backlog queue: if the ring buffer is more
    than eighty percent full, then the request is enqueued to a backlog
    list and the error code -EBUSY is returned back to the caller.
    Requests in the backlog queue are resubmitted at a later time, in the
    context of the callback of a previously submitted request.
    The request for which -EBUSY is returned is then marked as -EINPROGRESS
    once submitted to the HW queues.
    
    The submission loop inside the function qat_alg_send_message() has been
    modified to decide which submission policy to use based on the request
    flags. If the request does not have the CRYPTO_TFM_REQ_MAY_BACKLOG set,
    the previous behaviour has been preserved.
    
    Based on a patch by
    Vishnu Das Ramachandran <vishnu.dasx.ramachandran@intel.com>
    
    Cc: stable@vger.kernel.org
    Fixes: d370cec32194 ("crypto: qat - Intel(R) QAT crypto interface")
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Reported-by: Kyle Sanderson <kyle.leet@gmail.com>
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cac903b63031a80fedf2bc3c8fbd489d1310876
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:09 2022 +0100

    crypto: qat - refactor submission logic
    
    [ Upstream commit af88d3c109aa5edfaa11c9a26d9c0ff21ddf501c ]
    
    All the algorithms in qat_algs.c and qat_asym_algs.c use the same
    pattern to submit messages to the HW queues. Move the submission loop
    to a new function, qat_alg_send_message(), and share it between the
    symmetric and the asymmetric algorithms.
    
    As part of this rework, since the number of retries before returning an
    error is inconsistent between the symmetric and asymmetric
    implementations, set it to a value that works for both (i.e. 20, was 10
    in qat_algs.c and 100 in qat_asym_algs.c)
    
    In addition fix the return code reported when the HW queues are full.
    In that case return -ENOSPC instead of -EBUSY.
    
    Including stable in CC since (1) the error code returned if the HW queues
    are full is incorrect and (2) to facilitate the backport of the next fix
    "crypto: qat - add backlog mechanism".
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f576c7e01a6a9293402523e39827df2ee2001cf1
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:34:08 2022 +0100

    crypto: qat - use pre-allocated buffers in datapath
    
    [ Upstream commit e0831e7af4e03f2715de102e18e9179ec0a81562 ]
    
    In order to do DMAs, the QAT device requires that the scatterlist
    structures are mapped and translated into a format that the firmware can
    understand. This is defined as the composition of a scatter gather list
    (SGL) descriptor header, the struct qat_alg_buf_list, plus a variable
    number of flat buffer descriptors, the struct qat_alg_buf.
    
    The allocation and mapping of these data structures is done each time a
    request is received from the skcipher and aead APIs.
    In an OOM situation, this behaviour might lead to a dead-lock if an
    allocation fails.
    
    Based on the conversation in [1], increase the size of the aead and
    skcipher request contexts to include an SGL descriptor that can handle
    a maximum of 4 flat buffers.
    If requests exceed 4 entries buffers, memory is allocated dynamically.
    
    [1] https://lore.kernel.org/linux-crypto/20200722072932.GA27544@gondor.apana.org.au/
    
    Cc: stable@vger.kernel.org
    Fixes: d370cec32194 ("crypto: qat - Intel(R) QAT crypto interface")
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 343cee3eafda7e221641723993ed9f6bf407e74a
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Mon May 9 14:19:27 2022 +0100

    crypto: qat - set to zero DH parameters before free
    
    [ Upstream commit 1731160ff7c7bbb11bb1aacb14dd25e18d522779 ]
    
    Set to zero the context buffers containing the DH key before they are
    freed.
    This is a defense in depth measure that avoids keys to be recovered from
    memory in case the system is compromised between the free of the buffer
    and when that area of memory (containing keys) gets overwritten.
    
    Cc: stable@vger.kernel.org
    Fixes: c9839143ebbf ("crypto: qat - Add DH support")
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Adam Guerin <adam.guerin@intel.com>
    Reviewed-by: Wojciech Ziemba <wojciech.ziemba@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1f6637fe1c2e14edf53fb69f0d0eef2d6e4c0e9
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sun Oct 24 18:20:26 2021 +0300

    iwlwifi: fw: uefi: add missing include guards
    
    [ Upstream commit 91000fdf82195b66350b4f88413c2e8b5f94d994 ]
    
    We still don't use #pragma once in the kernel, but even if
    we did it'd be missing. Add the missing include guards.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Fixes: 84c3c9952afb ("iwlwifi: move UEFI code to a separate file")
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211024181719.7fc9988ed49b.I87e300fab664047581e51fb9b02744c75320d08c@changeid
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4448327b41738dbfcda680eb4935ff835568f468
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Mar 25 22:01:43 2022 +0100

    mt76: fix use-after-free by removing a non-RCU wcid pointer
    
    [ Upstream commit 51fb1278aa57ae0fc54adaa786e1965362bed4fb ]
    
    Fixes an issue caught by KASAN about use-after-free in mt76_txq_schedule
    by protecting mtxq->wcid with rcu_lock between mt76_txq_schedule and
    sta_info_[alloc, free].
    
    [18853.876689] ==================================================================
    [18853.876751] BUG: KASAN: use-after-free in mt76_txq_schedule+0x204/0xaf8 [mt76]
    [18853.876773] Read of size 8 at addr ffffffaf989a2138 by task mt76-tx phy0/883
    [18853.876786]
    [18853.876810] CPU: 5 PID: 883 Comm: mt76-tx phy0 Not tainted 5.10.100-fix-510-56778d365941-kasan #5 0b01fbbcf41a530f52043508fec2e31a4215
    
    [18853.876840] Call trace:
    [18853.876861]  dump_backtrace+0x0/0x3ec
    [18853.876878]  show_stack+0x20/0x2c
    [18853.876899]  dump_stack+0x11c/0x1ac
    [18853.876918]  print_address_description+0x74/0x514
    [18853.876934]  kasan_report+0x134/0x174
    [18853.876948]  __asan_report_load8_noabort+0x44/0x50
    [18853.876976]  mt76_txq_schedule+0x204/0xaf8 [mt76 074e03e4640e97fe7405ee1fab547b81c4fa45d2]
    [18853.877002]  mt76_txq_schedule_all+0x2c/0x48 [mt76 074e03e4640e97fe7405ee1fab547b81c4fa45d2]
    [18853.877030]  mt7921_tx_worker+0xa0/0x1cc [mt7921_common f0875ebac9d7b4754e1010549e7db50fbd90a047]
    [18853.877054]  __mt76_worker_fn+0x190/0x22c [mt76 074e03e4640e97fe7405ee1fab547b81c4fa45d2]
    [18853.877071]  kthread+0x2f8/0x3b8
    [18853.877087]  ret_from_fork+0x10/0x30
    [18853.877098]
    [18853.877112] Allocated by task 941:
    [18853.877131]  kasan_save_stack+0x38/0x68
    [18853.877147]  __kasan_kmalloc+0xd4/0xfc
    [18853.877163]  kasan_kmalloc+0x10/0x1c
    [18853.877177]  __kmalloc+0x264/0x3c4
    [18853.877294]  sta_info_alloc+0x460/0xf88 [mac80211]
    [18853.877410]  ieee80211_prep_connection+0x204/0x1ee0 [mac80211]
    [18853.877523]  ieee80211_mgd_auth+0x6c4/0xa4c [mac80211]
    [18853.877635]  ieee80211_auth+0x20/0x2c [mac80211]
    [18853.877733]  rdev_auth+0x7c/0x438 [cfg80211]
    [18853.877826]  cfg80211_mlme_auth+0x26c/0x390 [cfg80211]
    [18853.877919]  nl80211_authenticate+0x6d4/0x904 [cfg80211]
    [18853.877938]  genl_rcv_msg+0x748/0x93c
    [18853.877954]  netlink_rcv_skb+0x160/0x2a8
    [18853.877969]  genl_rcv+0x3c/0x54
    [18853.877985]  netlink_unicast_kernel+0x104/0x1ec
    [18853.877999]  netlink_unicast+0x178/0x268
    [18853.878015]  netlink_sendmsg+0x3cc/0x5f0
    [18853.878030]  sock_sendmsg+0xb4/0xd8
    [18853.878043]  ____sys_sendmsg+0x2f8/0x53c
    [18853.878058]  ___sys_sendmsg+0xe8/0x150
    [18853.878071]  __sys_sendmsg+0xc4/0x1f4
    [18853.878087]  __arm64_compat_sys_sendmsg+0x88/0x9c
    [18853.878101]  el0_svc_common+0x1b4/0x390
    [18853.878115]  do_el0_svc_compat+0x8c/0xdc
    [18853.878131]  el0_svc_compat+0x10/0x1c
    [18853.878146]  el0_sync_compat_handler+0xa8/0xcc
    [18853.878161]  el0_sync_compat+0x188/0x1c0
    [18853.878171]
    [18853.878183] Freed by task 10927:
    [18853.878200]  kasan_save_stack+0x38/0x68
    [18853.878215]  kasan_set_track+0x28/0x3c
    [18853.878228]  kasan_set_free_info+0x24/0x48
    [18853.878244]  __kasan_slab_free+0x11c/0x154
    [18853.878259]  kasan_slab_free+0x14/0x24
    [18853.878273]  slab_free_freelist_hook+0xac/0x1b0
    [18853.878287]  kfree+0x104/0x390
    [18853.878402]  sta_info_free+0x198/0x210 [mac80211]
    [18853.878515]  __sta_info_destroy_part2+0x230/0x2d4 [mac80211]
    [18853.878628]  __sta_info_flush+0x300/0x37c [mac80211]
    [18853.878740]  ieee80211_set_disassoc+0x2cc/0xa7c [mac80211]
    [18853.878851]  ieee80211_mgd_deauth+0x4a4/0x10a0 [mac80211]
    [18853.878962]  ieee80211_deauth+0x20/0x2c [mac80211]
    [18853.879057]  rdev_deauth+0x7c/0x438 [cfg80211]
    [18853.879150]  cfg80211_mlme_deauth+0x274/0x414 [cfg80211]
    [18853.879243]  cfg80211_mlme_down+0xe4/0x118 [cfg80211]
    [18853.879335]  cfg80211_disconnect+0x218/0x2d8 [cfg80211]
    [18853.879427]  __cfg80211_leave+0x17c/0x240 [cfg80211]
    [18853.879519]  cfg80211_leave+0x3c/0x58 [cfg80211]
    [18853.879611]  wiphy_suspend+0xdc/0x200 [cfg80211]
    [18853.879628]  dpm_run_callback+0x58/0x408
    [18853.879642]  __device_suspend+0x4cc/0x864
    [18853.879658]  async_suspend+0x34/0xf4
    [18853.879673]  async_run_entry_fn+0xe0/0x37c
    [18853.879689]  process_one_work+0x508/0xb98
    [18853.879702]  worker_thread+0x7f4/0xcd4
    [18853.879717]  kthread+0x2f8/0x3b8
    [18853.879731]  ret_from_fork+0x10/0x30
    [18853.879741]
    [18853.879757] The buggy address belongs to the object at ffffffaf989a2000
    [18853.879757]  which belongs to the cache kmalloc-8k of size 8192
    [18853.879774] The buggy address is located 312 bytes inside of
    [18853.879774]  8192-byte region [ffffffaf989a2000, ffffffaf989a4000)
    [18853.879787] The buggy address belongs to the page:
    [18853.879807] page:000000004bda2a59 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1d89a0
    [18853.879823] head:000000004bda2a59 order:3 compound_mapcount:0 compound_pincount:0
    [18853.879839] flags: 0x8000000000010200(slab|head)
    [18853.879857] raw: 8000000000010200 ffffffffbc89e208 ffffffffb7fb5208 ffffffaec000cc80
    [18853.879873] raw: 0000000000000000 0000000000010001 00000001ffffffff 0000000000000000
    [18853.879885] page dumped because: kasan: bad access detected
    [18853.879896]
    [18853.879907] Memory state around the buggy address:
    [18853.879922]  ffffffaf989a2000: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [18853.879935]  ffffffaf989a2080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [18853.879948] >ffffffaf989a2100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [18853.879961]                                         ^
    [18853.879973]  ffffffaf989a2180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [18853.879986]  ffffffaf989a2200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [18853.879998] ==================================================================
    
    Cc: stable@vger.kernel.org
    Reported-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 829baf398f2c93ef1a3f37aefc7655cda7c8c8fd
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue May 10 14:46:30 2022 +0530

    xhci: Set HCD flag to defer primary roothub registration
    
    [ Upstream commit b7a4f9b5d0e4b6dd937678c546c0b322dd1a4054 ]
    
    Set "HCD_FLAG_DEFER_RH_REGISTER" to hcd->flags in xhci_run() to defer
    registering primary roothub in usb_add_hcd() if xhci has two roothubs.
    This will make sure both primary roothub and secondary roothub will be
    registered along with the second HCD.
    This is required for cold plugged USB devices to be detected in certain
    PCIe USB cards (like Inateck USB card connected to AM64 EVM or J7200 EVM).
    
    This patch has been added and reverted earier as it triggered a race
    in usb device enumeration.
    That race is now fixed in 5.16-rc3, and in stable back to 5.4
    commit 6cca13de26ee ("usb: hub: Fix locking issues with address0_mutex")
    commit 6ae6dc22d2d1 ("usb: hub: Fix usb enumeration issue due to address0
    race")
    
    [minor rebase change, and commit message update -Mathias]
    
    CC: stable@vger.kernel.org # 5.4+
    Suggested-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Tested-by: Chris Chiu <chris.chiu@canonical.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Link: https://lore.kernel.org/r/20220510091630.16564-3-kishon@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 813f4b49e81ccedcc86efeb05f724b4938ad3b55
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Wed Feb 16 11:51:47 2022 +0200

    xhci: dbc: Rename xhci_dbc_init and xhci_dbc_exit
    
    [ Upstream commit 5c44d9d7570b244ca08fef817c4c90aa7a1f1b5f ]
    
    These names give the impression the functions are related to
    module init calls, but are in fact creating and removing the dbc
    fake device
    
    Rename them to xhci_create_dbc_dev() and xhci_remove_dbc_dev().
    
    We will need the _init and _exit names for actual dbc module init
    and exit calls.
    
    No functional changes
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20220216095153.1303105-4-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 413c5f751f7ceb2f2f2787561465a17932ca51cb
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Wed Feb 16 11:51:46 2022 +0200

    xhci: dbc: create and remove dbc structure in dbgtty driver.
    
    [ Upstream commit 5ce036b98dd3301fc43bb06a6383ef07b6c776bc ]
    
    Turn the dbgtty closer to a device driver by allocating the dbc
    structure in its own xhci_dbc_tty_probe() function, and freeing it
    in xhci_dbc_tty_remove()
    
    Remove xhci_do_dbc_exit() as its no longer needed.
    
    allocate and create the dbc strcuture in xhci_dbc_tty_probe()
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20220216095153.1303105-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7afb4a13f6c6ee7df7d0bfc67b4ef19ece6d802
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Wed Feb 16 11:51:45 2022 +0200

    xhci: dbc: refactor xhci_dbc_init()
    
    [ Upstream commit 534675942e901959b5d8dc11ea526c4e48817d8e ]
    
    Refactor xhci_dbc_init(), splitting it into logical
    parts closer to the Linux device model.
    
    - Create the fake dbc device, depends on xhci strucure
    - Allocate a dbc structure, xhci agnostic
    - Call xhci_dbc_tty_probe(), similar to actual probe.
    
    Adjustments to xhci_dbc_exit and xhci_dbc_remove are also needed
    as a result to the xhci_dbc_init() changes
    
    Mostly non-functional changes, except for creating the dbc sysfs
    entry earlier, together with the dbc structure.
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20220216095153.1303105-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d97c0667c1e61ded6639117b4b9584a9c12b7e66
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Feb 2 00:49:44 2022 +0000

    KVM: x86: Use __try_cmpxchg_user() to emulate atomic accesses
    
    [ Upstream commit 1c2361f667f3648855ceae25f1332c18413fdb9f ]
    
    Use the recently introduce __try_cmpxchg_user() to emulate atomic guest
    accesses via the associated userspace address instead of mapping the
    backing pfn into kernel address space.  Using kvm_vcpu_map() is unsafe as
    it does not coordinate with KVM's mmu_notifier to ensure the hva=>pfn
    translation isn't changed/unmapped in the memremap() path, i.e. when
    there's no struct page and thus no elevated refcount.
    
    Fixes: 42e35f8072c3 ("KVM/X86: Use kvm_vcpu_map in emulator_cmpxchg_emulated")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20220202004945.2540433-5-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88eded8104d2ca0429703755dd250f8cbecc1447
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 10 11:01:11 2021 +0100

    x86/futex: Remove .fixup usage
    
    [ Upstream commit 4c132d1d844a53fc4e4b5c34e36ef10d6124b783 ]
    
    Use the new EX_TYPE_IMM_REG to store -EFAULT into the designated 'ret'
    register, this removes the need for anonymous .fixup code.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/20211110101325.426016322@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6875d2425be8975cfe9173de1a13be0bf17b3932
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 10 11:01:10 2021 +0100

    x86/msr: Remove .fixup usage
    
    [ Upstream commit d52a7344bdfa9c3442d3f86fb3501d9343726c76 ]
    
    Rework the MSR accessors to remove .fixup usage. Add two new extable
    types (to the 4 already existing msr ones) using the new register
    infrastructure to record which register should get the error value.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/20211110101325.364084212@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f637fbc7bda60c0dca47925d5e2da948598230b6
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 10 11:01:09 2021 +0100

    x86/extable: Extend extable functionality
    
    [ Upstream commit 4b5305decc8436bfe363d1c1773e8fa1c828b14d ]
    
    In order to remove further .fixup usage, extend the extable
    infrastructure to take additional information from the extable entry
    sites.
    
    Specifically add _ASM_EXTABLE_TYPE_REG() and EX_TYPE_IMM_REG that
    extend the existing _ASM_EXTABLE_TYPE() by taking an additional
    register argument and encoding that and an s16 immediate into the
    existing s32 type field. This limits the actual types to the first
    byte, 255 seem plenty.
    
    Also add a few flags into the type word, specifically CLEAR_AX and
    CLEAR_DX which clear the return and extended return register.
    
    Notes:
     - due to the % in our register names it's hard to make it more
       generally usable as arm64 did.
     - the s16 is far larger than used in these patches, future extentions
       can easily shrink this to get more bits.
     - without the bitfield fix this will not compile, because: 0xFF > -1
       and we can't even extract the TYPE field.
    
    [nathanchance: Build fix for clang-lto builds:
     https://lkml.kernel.org/r/20211210234953.3420108-1-nathan@kernel.org
    ]
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20211110101325.303890153@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bbc9a07e050ffb141950e198f227e2caa9962d4
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 10 11:01:08 2021 +0100

    x86/entry_32: Remove .fixup usage
    
    [ Upstream commit aa93e2ad7464ffb90155a5ffdde963816f86d5dc ]
    
    Where possible, push the .fixup into code, at the tail of functions.
    
    This is hard for macros since they're used in multiple functions,
    therefore introduce a new extable handler to pop zeros.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/20211110101325.245184699@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e89d805e77f20724b97a9a6983c4d7d7c80652f0
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 10 11:01:03 2021 +0100

    bitfield.h: Fix "type of reg too small for mask" test
    
    [ Upstream commit bff8c3848e071d387d8b0784dc91fa49cd563774 ]
    
    The test: 'mask > (typeof(_reg))~0ull' only works correctly when both
    sides are unsigned, consider:
    
     - 0xff000000 vs (int)~0ull
     - 0x000000ff vs (int)~0ull
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/20211110101324.950210584@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a86201c3ae79f3652b4a865028fc9b71a2904289
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Sep 8 15:29:19 2021 +0200

    x86/extable: Provide EX_TYPE_DEFAULT_MCE_SAFE and EX_TYPE_FAULT_MCE_SAFE
    
    [ Upstream commit 2cadf5248b9316d3c8af876e795d61c55476f6e9 ]
    
    Provide exception fixup types which can be used to identify fixups which
    allow in kernel #MC recovery and make them invoke the existing handlers.
    
    These will be used at places where #MC recovery is handled correctly by the
    caller.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20210908132525.269689153@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3461326e1a9e60d9e260da443972f73fef5d8e38
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Sep 8 15:29:18 2021 +0200

    x86/extable: Rework the exception table mechanics
    
    [ Upstream commit 46d28947d9876fc0f8f93d3c69813ef6e9852595 ]
    
    The exception table entries contain the instruction address, the fixup
    address and the handler address. All addresses are relative. Storing the
    handler address has a few downsides:
    
     1) Most handlers need to be exported
    
     2) Handlers can be defined everywhere and there is no overview about the
        handler types
    
     3) MCE needs to check the handler type to decide whether an in kernel #MC
        can be recovered. The functionality of the handler itself is not in any
        way special, but for these checks there need to be separate functions
        which in the worst case have to be exported.
    
        Some of these 'recoverable' exception fixups are pretty obscure and
        just reuse some other handler to spare code. That obfuscates e.g. the
        #MC safe copy functions. Cleaning that up would require more handlers
        and exports
    
    Rework the exception fixup mechanics by storing a fixup type number instead
    of the handler address and invoke the proper handler for each fixup
    type. Also teach the extable sort to leave the type field alone.
    
    This makes most handlers static except for special cases like the MCE
    MSR fixup and the BPF fixup. This allows to add more types for cleaning up
    the obscure places without adding more handler code and exports.
    
    There is a marginal code size reduction for a production config and it
    removes _eight_ exported symbols.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lkml.kernel.org/r/20210908132525.211958725@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad2d98ea72d247fe8ca6f79de69ca287952c7770
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Sep 8 15:29:15 2021 +0200

    x86/mce: Deduplicate exception handling
    
    [ Upstream commit e42404afc4ca856c48f1e05752541faa3587c472 ]
    
    Prepare code for further simplification. No functional change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20210908132525.096452100@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e6392ba3dceb8fef2db9d3095d503531ded2a0a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Sep 8 15:29:13 2021 +0200

    x86/extable: Get rid of redundant macros
    
    [ Upstream commit 32fd8b59f91fcd3bf9459aa72d90345735cc2588 ]
    
    No point in defining the identical macros twice depending on C or assembly
    mode. They are still identical.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20210908132525.023659534@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3135da29e1ad79cdee3a6c3686a4f4d3942e87f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Sep 8 15:29:12 2021 +0200

    x86/extable: Tidy up redundant handler functions
    
    [ Upstream commit 326b567f82df0c4c8f50092b9af9a3014616fb3c ]
    
    No need to have the same code all over the place.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20210908132524.963232825@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 823424905d03eefdaafa4c194ca775999998b2ba
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Feb 2 00:49:42 2022 +0000

    x86/uaccess: Implement macros for CMPXCHG on user addresses
    
    [ Upstream commit 989b5db215a2f22f89d730b607b071d964780f10 ]
    
    Add support for CMPXCHG loops on userspace addresses.  Provide both an
    "unsafe" version for tight loops that do their own uaccess begin/end, as
    well as a "safe" version for use cases where the CMPXCHG is not buried in
    a loop, e.g. KVM will resume the guest instead of looping when emulation
    of a guest atomic accesses fails the CMPXCHG.
    
    Provide 8-byte versions for 32-bit kernels so that KVM can do CMPXCHG on
    guest PAE PTEs, which are accessed via userspace addresses.
    
    Guard the asm_volatile_goto() variation with CC_HAS_ASM_GOTO_TIED_OUTPUT,
    the "+m" constraint fails on some compilers that otherwise support
    CC_HAS_ASM_GOTO_OUTPUT.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Co-developed-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20220202004945.2540433-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1062cfb47e565792b6fd72d7e36b0f7b542ec78a
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed Apr 6 13:34:16 2022 -0400

    dlm: fix pending remove if msg allocation fails
    
    [ Upstream commit ba58995909b5098ca4003af65b0ccd5a8d13dd25 ]
    
    This patch unsets ls_remove_len and ls_remove_name if a message
    allocation of a remove messages fails. In this case we never send a
    remove message out but set the per ls ls_remove_len ls_remove_name
    variable for a pending remove. Unset those variable should indicate
    possible waiters in wait_pending_remove() that no pending remove is
    going on at this moment.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 765f802e0d25e19278a0bdc98e985bb2e523451b
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu Jul 14 16:15:35 2022 -0700

    x86/bugs: Warn when "ibrs" mitigation is selected on Enhanced IBRS parts
    
    commit eb23b5ef9131e6d65011de349a4d25ef1b3d4314 upstream.
    
    IBRS mitigation for spectre_v2 forces write to MSR_IA32_SPEC_CTRL at
    every kernel entry/exit. On Enhanced IBRS parts setting
    MSR_IA32_SPEC_CTRL[IBRS] only once at boot is sufficient. MSR writes at
    every kernel entry/exit incur unnecessary performance loss.
    
    When Enhanced IBRS feature is present, print a warning about this
    unnecessary performance loss.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/2a5eaf54583c2bfe0edc4fea64006656256cca17.1657814857.git.pawan.kumar.gupta@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46d5575df8a12baf8fbe947ef7980a39351313e8
Author: Juri Lelli <juri.lelli@redhat.com>
Date:   Thu Jul 14 17:19:08 2022 +0200

    sched/deadline: Fix BUG_ON condition for deboosted tasks
    
    commit ddfc710395cccc61247348df9eb18ea50321cbed upstream.
    
    Tasks the are being deboosted from SCHED_DEADLINE might enter
    enqueue_task_dl() one last time and hit an erroneous BUG_ON condition:
    since they are not boosted anymore, the if (is_dl_boosted()) branch is
    not taken, but the else if (!dl_prio) is and inside this one we
    BUG_ON(!is_dl_boosted), which is of course false (BUG_ON triggered)
    otherwise we had entered the if branch above. Long story short, the
    current condition doesn't make sense and always leads to triggering of a
    BUG.
    
    Fix this by only checking enqueue flags, properly: ENQUEUE_REPLENISH has
    to be present, but additional flags are not a problem.
    
    Fixes: 64be6f1f5f71 ("sched/deadline: Don't replenish from a !SCHED_DEADLINE entity")
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20220714151908.533052-1-juri.lelli@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc1fb3c53afd3372042a8be728937c21bc3b735a
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jul 7 12:39:00 2022 +0000

    bpf: Make sure mac_header was set before using it
    
    commit 0326195f523a549e0a9d7fd44c70b26fd7265090 upstream.
    
    Classic BPF has a way to load bytes starting from the mac header.
    
    Some skbs do not have a mac header, and skb_mac_header()
    in this case is returning a pointer that 65535 bytes after
    skb->head.
    
    Existing range check in bpf_internal_load_pointer_neg_helper()
    was properly kicking and no illegal access was happening.
    
    New sanity check in skb_mac_header() is firing, so we need
    to avoid it.
    
    WARNING: CPU: 1 PID: 28990 at include/linux/skbuff.h:2785 skb_mac_header include/linux/skbuff.h:2785 [inline]
    WARNING: CPU: 1 PID: 28990 at include/linux/skbuff.h:2785 bpf_internal_load_pointer_neg_helper+0x1b1/0x1c0 kernel/bpf/core.c:74
    Modules linked in:
    CPU: 1 PID: 28990 Comm: syz-executor.0 Not tainted 5.19.0-rc4-syzkaller-00865-g4874fb9484be #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 06/29/2022
    RIP: 0010:skb_mac_header include/linux/skbuff.h:2785 [inline]
    RIP: 0010:bpf_internal_load_pointer_neg_helper+0x1b1/0x1c0 kernel/bpf/core.c:74
    Code: ff ff 45 31 f6 e9 5a ff ff ff e8 aa 27 40 00 e9 3b ff ff ff e8 90 27 40 00 e9 df fe ff ff e8 86 27 40 00 eb 9e e8 2f 2c f3 ff <0f> 0b eb b1 e8 96 27 40 00 e9 79 fe ff ff 90 41 57 41 56 41 55 41
    RSP: 0018:ffffc9000309f668 EFLAGS: 00010216
    RAX: 0000000000000118 RBX: ffffffffffeff00c RCX: ffffc9000e417000
    RDX: 0000000000040000 RSI: ffffffff81873f21 RDI: 0000000000000003
    RBP: ffff8880842878c0 R08: 0000000000000003 R09: 000000000000ffff
    R10: 000000000000ffff R11: 0000000000000001 R12: 0000000000000004
    R13: ffff88803ac56c00 R14: 000000000000ffff R15: dffffc0000000000
    FS: 00007f5c88a16700(0000) GS:ffff8880b9b00000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fdaa9f6c058 CR3: 000000003a82c000 CR4: 00000000003506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    ____bpf_skb_load_helper_32 net/core/filter.c:276 [inline]
    bpf_skb_load_helper_32+0x191/0x220 net/core/filter.c:264
    
    Fixes: f9aefd6b2aa3 ("net: warn if mac header was not set")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20220707123900.945305-1-edumazet@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c5429a04ccd8dbcc3c753dab2f4126774ec28d4
Author: Wang Cheng <wanngchenng@gmail.com>
Date:   Thu May 19 14:08:54 2022 -0700

    mm/mempolicy: fix uninit-value in mpol_rebind_policy()
    
    commit 018160ad314d75b1409129b2247b614a9f35894c upstream.
    
    mpol_set_nodemask()(mm/mempolicy.c) does not set up nodemask when
    pol->mode is MPOL_LOCAL.  Check pol->mode before access
    pol->w.cpuset_mems_allowed in mpol_rebind_policy()(mm/mempolicy.c).
    
    BUG: KMSAN: uninit-value in mpol_rebind_policy mm/mempolicy.c:352 [inline]
    BUG: KMSAN: uninit-value in mpol_rebind_task+0x2ac/0x2c0 mm/mempolicy.c:368
     mpol_rebind_policy mm/mempolicy.c:352 [inline]
     mpol_rebind_task+0x2ac/0x2c0 mm/mempolicy.c:368
     cpuset_change_task_nodemask kernel/cgroup/cpuset.c:1711 [inline]
     cpuset_attach+0x787/0x15e0 kernel/cgroup/cpuset.c:2278
     cgroup_migrate_execute+0x1023/0x1d20 kernel/cgroup/cgroup.c:2515
     cgroup_migrate kernel/cgroup/cgroup.c:2771 [inline]
     cgroup_attach_task+0x540/0x8b0 kernel/cgroup/cgroup.c:2804
     __cgroup1_procs_write+0x5cc/0x7a0 kernel/cgroup/cgroup-v1.c:520
     cgroup1_tasks_write+0x94/0xb0 kernel/cgroup/cgroup-v1.c:539
     cgroup_file_write+0x4c2/0x9e0 kernel/cgroup/cgroup.c:3852
     kernfs_fop_write_iter+0x66a/0x9f0 fs/kernfs/file.c:296
     call_write_iter include/linux/fs.h:2162 [inline]
     new_sync_write fs/read_write.c:503 [inline]
     vfs_write+0x1318/0x2030 fs/read_write.c:590
     ksys_write+0x28b/0x510 fs/read_write.c:643
     __do_sys_write fs/read_write.c:655 [inline]
     __se_sys_write fs/read_write.c:652 [inline]
     __x64_sys_write+0xdb/0x120 fs/read_write.c:652
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was created at:
     slab_post_alloc_hook mm/slab.h:524 [inline]
     slab_alloc_node mm/slub.c:3251 [inline]
     slab_alloc mm/slub.c:3259 [inline]
     kmem_cache_alloc+0x902/0x11c0 mm/slub.c:3264
     mpol_new mm/mempolicy.c:293 [inline]
     do_set_mempolicy+0x421/0xb70 mm/mempolicy.c:853
     kernel_set_mempolicy mm/mempolicy.c:1504 [inline]
     __do_sys_set_mempolicy mm/mempolicy.c:1510 [inline]
     __se_sys_set_mempolicy+0x44c/0xb60 mm/mempolicy.c:1507
     __x64_sys_set_mempolicy+0xd8/0x110 mm/mempolicy.c:1507
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    KMSAN: uninit-value in mpol_rebind_task (2)
    https://syzkaller.appspot.com/bug?id=d6eb90f952c2a5de9ea718a1b873c55cb13b59dc
    
    This patch seems to fix below bug too.
    KMSAN: uninit-value in mpol_rebind_mm (2)
    https://syzkaller.appspot.com/bug?id=f2fecd0d7013f54ec4162f60743a2b28df40926b
    
    The uninit-value is pol->w.cpuset_mems_allowed in mpol_rebind_policy().
    When syzkaller reproducer runs to the beginning of mpol_new(),
    
                mpol_new() mm/mempolicy.c
              do_mbind() mm/mempolicy.c
            kernel_mbind() mm/mempolicy.c
    
    `mode` is 1(MPOL_PREFERRED), nodes_empty(*nodes) is `true` and `flags`
    is 0. Then
    
            mode = MPOL_LOCAL;
            ...
            policy->mode = mode;
            policy->flags = flags;
    
    will be executed. So in mpol_set_nodemask(),
    
                mpol_set_nodemask() mm/mempolicy.c
              do_mbind()
            kernel_mbind()
    
    pol->mode is 4 (MPOL_LOCAL), that `nodemask` in `pol` is not initialized,
    which will be accessed in mpol_rebind_policy().
    
    Link: https://lkml.kernel.org/r/20220512123428.fq3wofedp6oiotd4@ppc.localdomain
    Signed-off-by: Wang Cheng <wanngchenng@gmail.com>
    Reported-by: <syzbot+217f792c92599518a2ab@syzkaller.appspotmail.com>
    Tested-by: <syzbot+217f792c92599518a2ab@syzkaller.appspotmail.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e91665fbbf3ccb268b268a7d71a6513538d813ac
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Wed Jun 1 03:43:28 2022 +0200

    KVM: Don't null dereference ops->destroy
    
    commit e8bc2427018826e02add7b0ed0fc625a60390ae5 upstream.
    
    A KVM device cleanup happens in either of two callbacks:
    1) destroy() which is called when the VM is being destroyed;
    2) release() which is called when a device fd is closed.
    
    Most KVM devices use 1) but Book3s's interrupt controller KVM devices
    (XICS, XIVE, XIVE-native) use 2) as they need to close and reopen during
    the machine execution. The error handling in kvm_ioctl_create_device()
    assumes destroy() is always defined which leads to NULL dereference as
    discovered by Syzkaller.
    
    This adds a checks for destroy!=NULL and adds a missing release().
    
    This is not changing kvm_destroy_devices() as devices with defined
    release() should have been removed from the KVM devices list by then.
    
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58466e05390043d2805685c70f55f3f59711bdf2
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Jul 19 09:22:35 2022 +0200

    spi: bcm2835: bcm2835_spi_handle_err(): fix NULL pointer deref for non DMA transfers
    
    commit 4ceaa684459d414992acbefb4e4c31f2dfc50641 upstream.
    
    In case a IRQ based transfer times out the bcm2835_spi_handle_err()
    function is called. Since commit 1513ceee70f2 ("spi: bcm2835: Drop
    dma_pending flag") the TX and RX DMA transfers are unconditionally
    canceled, leading to NULL pointer derefs if ctlr->dma_tx or
    ctlr->dma_rx are not set.
    
    Fix the NULL pointer deref by checking that ctlr->dma_tx and
    ctlr->dma_rx are valid pointers before accessing them.
    
    Fixes: 1513ceee70f2 ("spi: bcm2835: Drop dma_pending flag")
    Cc: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Link: https://lore.kernel.org/r/20220719072234.2782764-1-mkl@pengutronix.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd9f96aa8f57a8377bfe27ecf887464365ff4aa5
Author: Gavin Shan <gshan@redhat.com>
Date:   Tue Jul 19 10:08:30 2022 +0800

    KVM: selftests: Fix target thread to be migrated in rseq_test
    
    commit e923b0537d28e15c9d31ce8b38f810b325816903 upstream.
    
    In rseq_test, there are two threads, which are vCPU thread and migration
    worker separately. Unfortunately, the test has the wrong PID passed to
    sched_setaffinity() in the migration worker. It forces migration on the
    migration worker because zeroed PID represents the calling thread, which
    is the migration worker itself. It means the vCPU thread is never enforced
    to migration and it can migrate at any time, which eventually leads to
    failure as the following logs show.
    
      host# uname -r
      5.19.0-rc6-gavin+
      host# # cat /proc/cpuinfo | grep processor | tail -n 1
      processor    : 223
      host# pwd
      /home/gavin/sandbox/linux.main/tools/testing/selftests/kvm
      host# for i in `seq 1 100`; do \
            echo "--------> $i"; ./rseq_test; done
      --------> 1
      --------> 2
      --------> 3
      --------> 4
      --------> 5
      --------> 6
      ==== Test Assertion Failure ====
        rseq_test.c:265: rseq_cpu == cpu
        pid=3925 tid=3925 errno=4 - Interrupted system call
           1  0x0000000000401963: main at rseq_test.c:265 (discriminator 2)
           2  0x0000ffffb044affb: ?? ??:0
           3  0x0000ffffb044b0c7: ?? ??:0
           4  0x0000000000401a6f: _start at ??:?
        rseq CPU = 4, sched CPU = 27
    
    Fix the issue by passing correct parameter, TID of the vCPU thread, to
    sched_setaffinity() in the migration worker.
    
    Fixes: 61e52f1630f5 ("KVM: selftests: Add a test for KVM_RUN+rseq to detect task migration bugs")
    Suggested-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Gavin Shan <gshan@redhat.com>
    Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
    Message-Id: <20220719020830.3479482-1-gshan@redhat.com>
    Reviewed-by: Andrew Jones <andrew.jones@linux.dev>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e129e5486b981d324057e6986059f852658b0d00
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Thu Jul 21 13:09:09 2022 +0530

    gpio: gpio-xilinx: Fix integer overflow
    
    [ Upstream commit 32c094a09d5829ad9b02cdf667569aefa8de0ea6 ]
    
    Current implementation is not able to configure more than 32 pins
    due to incorrect data type. So type casting with unsigned long
    to avoid it.
    
    Fixes: 02b3f84d9080 ("xilinx: Switch to use bitmap APIs")
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce3731c61589ed73364a5b55ce34131762ef9b60
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:53 2022 -0700

    tcp: Fix data-races around sysctl_tcp_max_reordering.
    
    [ Upstream commit a11e5b3e7a59fde1a90b0eaeaa82320495cf8cae ]
    
    While reading sysctl_tcp_max_reordering, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: dca145ffaa8d ("tcp: allow for bigger reordering level")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84cee470f77cb89d59b1c3f28ab2c7c4971ec473
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:52 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_abort_on_overflow.
    
    [ Upstream commit 2d17d9c7382327d00aeaea35af44e9b26d53206e ]
    
    While reading sysctl_tcp_abort_on_overflow, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46d05dab1b4f99bca838a85811f321b9997ac957
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:51 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_rfc1337.
    
    [ Upstream commit 0b484c91911e758e53656d570de58c2ed81ec6f2 ]
    
    While reading sysctl_tcp_rfc1337, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d46d55e3f9f8051585fada583fc92d7826d0731a
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:50 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_stdurg.
    
    [ Upstream commit 4e08ed41cb1194009fc1a916a59ce3ed4afd77cd ]
    
    While reading sysctl_tcp_stdurg, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a1aedbb7605314f4210174988fde8c99c25bb07
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:49 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_retrans_collapse.
    
    [ Upstream commit 1a63cb91f0c2fcdeced6d6edee8d1d886583d139 ]
    
    While reading sysctl_tcp_retrans_collapse, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41aeba4506f6b70ec7500c6fe202731a4ba29fe5
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:48 2022 -0700

    tcp: Fix data-races around sysctl_tcp_slow_start_after_idle.
    
    [ Upstream commit 4845b5713ab18a1bb6e31d1fbb4d600240b8b691 ]
    
    While reading sysctl_tcp_slow_start_after_idle, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 35089bb203f4 ("[TCP]: Add tcp_slow_start_after_idle sysctl.")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 404c53ccdebd11f96954f4070cffac8e0b4d5cb6
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:47 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_thin_linear_timeouts.
    
    [ Upstream commit 7c6f2a86ca590d5187a073d987e9599985fb1c7c ]
    
    While reading sysctl_tcp_thin_linear_timeouts, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 36e31b0af587 ("net: TCP thin linear timeouts")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a31e2d0cb5cfa2aae3144cac04f25031d5d20fb4
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:46 2022 -0700

    tcp: Fix data-races around sysctl_tcp_recovery.
    
    [ Upstream commit e7d2ef837e14a971a05f60ea08c47f3fed1a36e4 ]
    
    While reading sysctl_tcp_recovery, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 4f41b1c58a32 ("tcp: use RACK to detect losses")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5037ca9e4b169cc9aed0174d658c3d81fdaf8ea5
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:45 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_early_retrans.
    
    [ Upstream commit 52e65865deb6a36718a463030500f16530eaab74 ]
    
    While reading sysctl_tcp_early_retrans, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: eed530b6c676 ("tcp: early retransmit")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 329de75b9e16104d5442319107ce3af961f2c96a
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:44 2022 -0700

    tcp: Fix data-races around sysctl knobs related to SYN option.
    
    [ Upstream commit 3666f666e99600518ab20982af04a078bbdad277 ]
    
    While reading these knobs, they can be changed concurrently.
    Thus, we need to add READ_ONCE() to their readers.
    
      - tcp_sack
      - tcp_window_scaling
      - tcp_timestamps
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f2ac2d6511bb0652abf4d7388d65bb9ff1c641c
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:43 2022 -0700

    udp: Fix a data-race around sysctl_udp_l3mdev_accept.
    
    [ Upstream commit 3d72bb4188c708bb16758c60822fc4dda7a95174 ]
    
    While reading sysctl_udp_l3mdev_accept, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 63a6fff353d0 ("net: Avoid receiving packets with an l3mdev on unbound UDP sockets")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95724fe897a4ecf2be51452ef96e818568071664
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:42 2022 -0700

    ip: Fix data-races around sysctl_ip_prot_sock.
    
    [ Upstream commit 9b55c20f83369dd54541d9ddbe3a018a8377f451 ]
    
    sysctl_ip_prot_sock is accessed concurrently, and there is always a chance
    of data-race.  So, all readers and writers need some basic protection to
    avoid load/store-tearing.
    
    Fixes: 4548b683b781 ("Introduce a sysctl that modifies the value of PROT_SOCK.")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36f5b86f309b3b11295d087cd7433f1c897caf94
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:41 2022 -0700

    ipv4: Fix data-races around sysctl_fib_multipath_hash_fields.
    
    [ Upstream commit 8895a9c2ac76fb9d3922fed4fe092c8ec5e5cccc ]
    
    While reading sysctl_fib_multipath_hash_fields, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: ce5c9c20d364 ("ipv4: Add a sysctl to control multipath hash fields")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21fb844bc1dc1461f5038d655aa1a14f39e13049
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:40 2022 -0700

    ipv4: Fix data-races around sysctl_fib_multipath_hash_policy.
    
    [ Upstream commit 7998c12a08c97cc26660532c9f90a34bd7d8da5a ]
    
    While reading sysctl_fib_multipath_hash_policy, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: bf4e0a3db97e ("net: ipv4: add support for ECMP hash policy choice")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8d345db03b4deffb4f04219a51d3b1e94171b76
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 18 10:26:39 2022 -0700

    ipv4: Fix a data-race around sysctl_fib_multipath_use_neigh.
    
    [ Upstream commit 87507bcb4f5de16bb419e9509d874f4db6c0ad0f ]
    
    While reading sysctl_fib_multipath_use_neigh, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: a6db4494d218 ("net: ipv4: Consider failed nexthops in multipath routes")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94e4b855e22bba7f0cddd4815f968c9def0badd7
Author: Liang He <windhl@126.com>
Date:   Thu Jul 14 16:13:37 2022 +0800

    drm/imx/dcss: Add missing of_node_put() in fail path
    
    [ Upstream commit 02c87df2480ac855d88ee308ce3fa857d9bd55a8 ]
    
    In dcss_dev_create() and dcss_dev_destroy(), we should call of_node_put()
    in fail path or before the dcss's destroy as of_graph_get_port_by_id() has
    increased the refcount.
    
    Fixes: 9021c317b770 ("drm/imx: Add initial support for DCSS on iMX8MQ")
    Signed-off-by: Liang He <windhl@126.com>
    Reviewed-by: Laurentiu Palcu <laurentiu.palcu@oss.nxp.com>
    Signed-off-by: Laurentiu Palcu <laurentiu.palcu@oss.nxp.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220714081337.374761-1-windhl@126.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d13bf301e0673bb47b2c6ef587efb441c06b928
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Sun Jul 17 15:58:31 2022 +0200

    net: dsa: vitesse-vsc73xx: silent spi_device_id warnings
    
    [ Upstream commit 1774559f07993e1cac33c2406e99049d4bdea6c8 ]
    
    Add spi_device_id entries to silent SPI warnings.
    
    Fixes: 5fa6863ba692 ("spi: Check we have a spi_device_id for each DT compatible")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20220717135831.2492844-2-o.rempel@pengutronix.de
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25e1d782c9c3c57d7d25a5b90b11c866d1021630
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Sun Jul 17 15:58:30 2022 +0200

    net: dsa: sja1105: silent spi_device_id warnings
    
    [ Upstream commit 855fe49984a8a3899f07ae1d149d46cd8d4acb52 ]
    
    Add spi_device_id entries to silent following warnings:
     SPI driver sja1105 has no spi_device_id for nxp,sja1105e
     SPI driver sja1105 has no spi_device_id for nxp,sja1105t
     SPI driver sja1105 has no spi_device_id for nxp,sja1105p
     SPI driver sja1105 has no spi_device_id for nxp,sja1105q
     SPI driver sja1105 has no spi_device_id for nxp,sja1105r
     SPI driver sja1105 has no spi_device_id for nxp,sja1105s
     SPI driver sja1105 has no spi_device_id for nxp,sja1110a
     SPI driver sja1105 has no spi_device_id for nxp,sja1110b
     SPI driver sja1105 has no spi_device_id for nxp,sja1110c
     SPI driver sja1105 has no spi_device_id for nxp,sja1110d
    
    Fixes: 5fa6863ba692 ("spi: Check we have a spi_device_id for each DT compatible")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220717135831.2492844-1-o.rempel@pengutronix.de
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aba8ff847f4f927ad7a1a1ee4a9f29989a1a728f
Author: Hristo Venev <hristo@venev.name>
Date:   Sat Jul 16 11:51:34 2022 +0300

    be2net: Fix buffer overflow in be_get_module_eeprom
    
    [ Upstream commit d7241f679a59cfe27f92cb5c6272cb429fb1f7ec ]
    
    be_cmd_read_port_transceiver_data assumes that it is given a buffer that
    is at least PAGE_DATA_LEN long, or twice that if the module supports SFF
    8472. However, this is not always the case.
    
    Fix this by passing the desired offset and length to
    be_cmd_read_port_transceiver_data so that we only copy the bytes once.
    
    Fixes: e36edd9d26cf ("be2net: add ethtool "-m" option support")
    Signed-off-by: Hristo Venev <hristo@venev.name>
    Link: https://lore.kernel.org/r/20220716085134.6095-1-hristo@venev.name
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit caae64d3e91b1ebd861bccebd08ea520ec8227e0
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Mon Jul 18 16:31:43 2022 +0800

    gpio: pca953x: use the correct register address when regcache sync during init
    
    [ Upstream commit b8c768ccdd8338504fb78370747728d5002b1b5a ]
    
    For regcache_sync_region, we need to use pca953x_recalc_addr() to get
    the real register address.
    
    Fixes: ec82d1eba346 ("gpio: pca953x: Zap ad-hoc reg_output cache")
    Fixes: 0f25fda840a9 ("gpio: pca953x: Zap ad-hoc reg_direction cache")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfb4b67ff4df56787694d178d0defb996f24cdfc
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Mon Jul 18 16:31:42 2022 +0800

    gpio: pca953x: use the correct range when do regmap sync
    
    [ Upstream commit 2abc17a93867dc816f0ed9d32021dda8078e7330 ]
    
    regmap will sync a range of registers, here use the correct range
    to make sure the sync do not touch other unexpected registers.
    
    Find on pca9557pw on imx8qxp/dxl evk board, this device support
    8 pin, so only need one register(8 bits) to cover all the 8 pins's
    property setting. But when sync the output, we find it actually
    update two registers, output register and the following register.
    
    Fixes: b76574300504 ("gpio: pca953x: Restore registers after suspend/resume cycle")
    Fixes: ec82d1eba346 ("gpio: pca953x: Zap ad-hoc reg_output cache")
    Fixes: 0f25fda840a9 ("gpio: pca953x: Zap ad-hoc reg_direction cache")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9726ed46b9b7a8c4536845a294bee04910ba5aea
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Mon Jul 18 16:31:41 2022 +0800

    gpio: pca953x: only use single read/write for No AI mode
    
    [ Upstream commit db8edaa09d7461ec08672a92a2eef63d5882bb79 ]
    
    For the device use NO AI mode(not support auto address increment),
    only use the single read/write when config the regmap.
    
    We meet issue on PCA9557PW on i.MX8QXP/DXL evk board, this device
    do not support AI mode, but when do the regmap sync, regmap will
    sync 3 byte data to register 1, logically this means write first
    data to register 1, write second data to register 2, write third data
    to register 3. But this device do not support AI mode, finally, these
    three data write only into register 1 one by one. the reault is the
    value of register 1 alway equal to the latest data, here is the third
    data, no operation happened on register 2 and register 3. This is
    not what we expect.
    
    Fixes: 49427232764d ("gpio: pca953x: Perform basic regmap conversion")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6fc5472b8500a2479bdb0a3bb0ff00c58aaf50c
Author: Wong Vee Khee <vee.khee.wong@linux.intel.com>
Date:   Fri Jul 15 20:24:02 2022 +0800

    net: stmmac: remove redunctant disable xPCS EEE call
    
    [ Upstream commit da791bac104a3169b05b54270afe75daacba4641 ]
    
    Disable is done in stmmac_init_eee() on the event of MAC link down.
    Since setting enable/disable EEE via ethtool will eventually trigger
    a MAC down, removing this redunctant call in stmmac_ethtool.c to avoid
    calling xpcs_config_eee() twice.
    
    Fixes: d4aeaed80b0e ("net: stmmac: trigger PCS EEE to turn off on link down")
    Signed-off-by: Wong Vee Khee <vee.khee.wong@linux.intel.com>
    Link: https://lore.kernel.org/r/20220715122402.1017470-1-vee.khee.wong@linux.intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16f929a5e76fd047fd8697e1e568bdd7d771955c
Author: Piotr Skajewski <piotrx.skajewski@intel.com>
Date:   Fri Jul 15 14:44:56 2022 -0700

    ixgbe: Add locking to prevent panic when setting sriov_numvfs to zero
    
    [ Upstream commit 1e53834ce541d4fe271cdcca7703e50be0a44f8a ]
    
    It is possible to disable VFs while the PF driver is processing requests
    from the VF driver.  This can result in a panic.
    
    BUG: unable to handle kernel paging request at 000000000000106c
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP NOPTI
    CPU: 8 PID: 0 Comm: swapper/8 Kdump: loaded Tainted: G I      --------- -
    Hardware name: Dell Inc. PowerEdge R740/06WXJT, BIOS 2.8.2 08/27/2020
    RIP: 0010:ixgbe_msg_task+0x4c8/0x1690 [ixgbe]
    Code: 00 00 48 8d 04 40 48 c1 e0 05 89 7c 24 24 89 fd 48 89 44 24 10 83 ff
    01 0f 84 b8 04 00 00 4c 8b 64 24 10 4d 03 a5 48 22 00 00 <41> 80 7c 24 4c
    00 0f 84 8a 03 00 00 0f b7 c7 83 f8 08 0f 84 8f 0a
    RSP: 0018:ffffb337869f8df8 EFLAGS: 00010002
    RAX: 0000000000001020 RBX: 0000000000000000 RCX: 000000000000002b
    RDX: 0000000000000002 RSI: 0000000000000008 RDI: 0000000000000006
    RBP: 0000000000000006 R08: 0000000000000002 R09: 0000000000029780
    R10: 00006957d8f42832 R11: 0000000000000000 R12: 0000000000001020
    R13: ffff8a00e8978ac0 R14: 000000000000002b R15: ffff8a00e8979c80
    FS:  0000000000000000(0000) GS:ffff8a07dfd00000(0000) knlGS:00000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000000000106c CR3: 0000000063e10004 CR4: 00000000007726e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     <IRQ>
     ? ttwu_do_wakeup+0x19/0x140
     ? try_to_wake_up+0x1cd/0x550
     ? ixgbevf_update_xcast_mode+0x71/0xc0 [ixgbevf]
     ixgbe_msix_other+0x17e/0x310 [ixgbe]
     __handle_irq_event_percpu+0x40/0x180
     handle_irq_event_percpu+0x30/0x80
     handle_irq_event+0x36/0x53
     handle_edge_irq+0x82/0x190
     handle_irq+0x1c/0x30
     do_IRQ+0x49/0xd0
     common_interrupt+0xf/0xf
    
    This can be eventually be reproduced with the following script:
    
    while :
    do
        echo 63 > /sys/class/net/<devname>/device/sriov_numvfs
        sleep 1
        echo 0 > /sys/class/net/<devname>/device/sriov_numvfs
        sleep 1
    done
    
    Add lock when disabling SR-IOV to prevent process VF mailbox communication.
    
    Fixes: d773d1310625 ("ixgbe: Fix memory leak when SR-IOV VFs are direct assigned")
    Signed-off-by: Piotr Skajewski <piotrx.skajewski@intel.com>
    Tested-by: Marek Szlosek <marek.szlosek@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20220715214456.2968711-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 893ea2b35bb9338444f76fa2eb8deae7a0415afa
Author: Dawid Lukwinski <dawid.lukwinski@intel.com>
Date:   Fri Jul 15 14:45:41 2022 -0700

    i40e: Fix erroneous adapter reinitialization during recovery process
    
    [ Upstream commit f838a63369818faadec4ad1736cfbd20ab5da00e ]
    
    Fix an issue when driver incorrectly detects state
    of recovery process and erroneously reinitializes interrupts,
    which results in a kernel error and call trace message.
    
    The issue was caused by a combination of two factors:
    1. Assuming the EMP reset issued after completing
    firmware recovery means the whole recovery process is complete.
    2. Erroneous reinitialization of interrupt vector after detecting
    the above mentioned EMP reset.
    
    Fixes (1) by changing how recovery state change is detected
    and (2) by adjusting the conditional expression to ensure using proper
    interrupt reinitialization method, depending on the situation.
    
    Fixes: 4ff0ee1af016 ("i40e: Introduce recovery mode support")
    Signed-off-by: Dawid Lukwinski <dawid.lukwinski@intel.com>
    Signed-off-by: Jan Sokolowski <jan.sokolowski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20220715214542.2968762-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fad55088ad7384d9d26271e0fcb2ee36bb5dabe5
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Jul 17 02:37:45 2022 +0300

    pinctrl: armada-37xx: use raw spinlocks for regmap to avoid invalid wait context
    
    [ Upstream commit 4546760619cfa9b718fe2059ceb07101cf9ff61e ]
    
    The irqchip->irq_set_type method is called by __irq_set_trigger() under
    the desc->lock raw spinlock.
    
    The armada-37xx implementation, armada_37xx_irq_set_type(), uses an MMIO
    regmap created by of_syscon_register(), which uses plain spinlocks
    (the kind that are sleepable on RT).
    
    Therefore, this is an invalid locking scheme for which we get a kernel
    splat stating just that ("[ BUG: Invalid wait context ]"), because the
    context in which the plain spinlock may sleep is atomic due to the raw
    spinlock. We need to go raw spinlocks all the way.
    
    Make this driver create its own MMIO regmap, with use_raw_spinlock=true,
    and stop relying on syscon to provide it.
    
    This patch depends on commit 67021f25d952 ("regmap: teach regmap to use
    raw spinlocks if requested in the config").
    
    Cc: <stable@vger.kernel.org> # 5.15+
    Fixes: 2f227605394b ("pinctrl: armada-37xx: Add irqchip support")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20220716233745.1704677-3-vladimir.oltean@nxp.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d674108fe76a91be66b12ba1598221497072dae
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Nov 5 14:42:34 2021 +0200

    pinctrl: armada-37xx: Convert to use dev_err_probe()
    
    [ Upstream commit 06cb10ea0cd5c5f4db9627a33ab47fec32cb5960 ]
    
    It's fine to call dev_err_probe() in ->probe() when error code is known.
    Convert the driver to use dev_err_probe().
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47c9f6bfc23488169ee4ee10da806bc17431db63
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Nov 5 14:42:33 2021 +0200

    pinctrl: armada-37xx: Make use of the devm_platform_ioremap_resource()
    
    [ Upstream commit 49bdef501728acbfadc7eeafafb4f6c3fea415eb ]
    
    Use the devm_platform_ioremap_resource() helper instead of
    calling of_address_to_resource() and devm_ioremap_resource()
    separately.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cbb165131766799297333221d383cd08e938cf6
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Nov 5 14:42:32 2021 +0200

    pinctrl: armada-37xx: Use temporary variable for struct device
    
    [ Upstream commit 50cf2ed284e49028a885aa56c3ea50714c635879 ]
    
    Use temporary variable for struct device to make code neater.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2918419c06088f6709ceb543feb01752779ade4c
Author: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
Date:   Fri Jun 24 17:33:01 2022 -0700

    iavf: Fix handling of dummy receive descriptors
    
    [ Upstream commit a9f49e0060301a9bfebeca76739158d0cf91cdf6 ]
    
    Fix memory leak caused by not handling dummy receive descriptor properly.
    iavf_get_rx_buffer now sets the rx_buffer return value for dummy receive
    descriptors. Without this patch, when the hardware writes a dummy
    descriptor, iavf would not free the page allocated for the previous receive
    buffer. This is an unlikely event but can still happen.
    
    [Jesse: massaged commit message]
    
    Fixes: efa14c398582 ("iavf: allow null RX descriptors")
    Signed-off-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a77a75a0e7f397550ab039f96115103e78dd5c69
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:55 2022 -0700

    tcp: Fix data-races around sysctl_tcp_fastopen_blackhole_timeout.
    
    [ Upstream commit 021266ec640c7a4527e6cd4b7349a512b351de1d ]
    
    While reading sysctl_tcp_fastopen_blackhole_timeout, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: cf1ef3f0719b ("net/tcp_fastopen: Disable active side TFO in certain scenarios")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 539d9ab79eba3974b479cad61a8688c41fe62e12
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:54 2022 -0700

    tcp: Fix data-races around sysctl_tcp_fastopen.
    
    [ Upstream commit 5a54213318c43f4009ae158347aa6016e3b9b55a ]
    
    While reading sysctl_tcp_fastopen, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 2100c8d2d9db ("net-tcp: Fast Open base")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ae85dc62a023ca0956f8f26628494af51a6a824
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:53 2022 -0700

    tcp: Fix data-races around sysctl_max_syn_backlog.
    
    [ Upstream commit 79539f34743d3e14cc1fa6577d326a82cc64d62f ]
    
    While reading sysctl_max_syn_backlog, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58d5ea71aaa66767a9d2dbb527c8fdc8ca0c98fe
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:52 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_tw_reuse.
    
    [ Upstream commit cbfc6495586a3f09f6f07d9fb3c7cafe807e3c55 ]
    
    While reading sysctl_tcp_tw_reuse, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80d4d0c461674eea87f0977e12a2ecd334b9b79c
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:51 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_notsent_lowat.
    
    [ Upstream commit 55be873695ed8912eb77ff46d1d1cadf028bd0f3 ]
    
    While reading sysctl_tcp_notsent_lowat, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: c9bee3b7fdec ("tcp: TCP_NOTSENT_LOWAT socket option")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e816f8024617afd73cc755e79e4e15b3ceabc4f8
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:50 2022 -0700

    tcp: Fix data-races around some timeout sysctl knobs.
    
    [ Upstream commit 39e24435a776e9de5c6dd188836cf2523547804b ]
    
    While reading these sysctl knobs, they can be changed concurrently.
    Thus, we need to add READ_ONCE() to their readers.
    
      - tcp_retries1
      - tcp_retries2
      - tcp_orphan_retries
      - tcp_fin_timeout
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6ce6556958c080df6ac123b9d5371b170c4f15b
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:49 2022 -0700

    tcp: Fix data-races around sysctl_tcp_reordering.
    
    [ Upstream commit 46778cd16e6a5ad1b2e3a91f6c057c907379418e ]
    
    While reading sysctl_tcp_reordering, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcf6c6d8aeffebca66f37b17ef1b57112e5e09c1
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:48 2022 -0700

    tcp: Fix data-races around sysctl_tcp_migrate_req.
    
    [ Upstream commit 4177f545895b1da08447a80692f30617154efa6e ]
    
    While reading sysctl_tcp_migrate_req, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: f9ac779f881c ("net: Introduce net.ipv4.tcp_migrate_req.")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10a9ba97a40490f586a566c83e5774474db8bdd7
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:47 2022 -0700

    tcp: Fix data-races around sysctl_tcp_syncookies.
    
    [ Upstream commit f2e383b5bb6bbc60a0b94b87b3e49a2b1aefd11e ]
    
    While reading sysctl_tcp_syncookies, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78522951d71844aeb851be35e882bdc993f359eb
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:46 2022 -0700

    tcp: Fix data-races around sysctl_tcp_syn(ack)?_retries.
    
    [ Upstream commit 20a3b1c0f603e8c55c3396abd12dfcfb523e4d3c ]
    
    While reading sysctl_tcp_syn(ack)?_retries, they can be changed
    concurrently.  Thus, we need to add READ_ONCE() to their readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 906beda70c2f12a452d202692f0d59f7a40e1d9c
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:45 2022 -0700

    tcp: Fix data-races around keepalive sysctl knobs.
    
    [ Upstream commit f2f316e287e6c2e3a1c5bab8d9b77ee03daa0463 ]
    
    While reading sysctl_tcp_keepalive_(time|probes|intvl), they can be changed
    concurrently.  Thus, we need to add READ_ONCE() to their readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 849450279dfcbdfcadfc8b8552e0fe10a8edf33d
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:43 2022 -0700

    igmp: Fix data-races around sysctl_igmp_max_msf.
    
    [ Upstream commit 6ae0f2e553737b8cce49a1372573c81130ffa80e ]
    
    While reading sysctl_igmp_max_msf, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a408a4f423eb531b4aa47fea14ef638d12ba986
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:42 2022 -0700

    igmp: Fix a data-race around sysctl_igmp_max_memberships.
    
    [ Upstream commit 6305d821e3b9b5379d348528e5b5faf316383bc2 ]
    
    While reading sysctl_igmp_max_memberships, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 260446eb8e5541402b271343a4516f2b33dec1e4
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 15 10:17:41 2022 -0700

    igmp: Fix data-races around sysctl_igmp_llm_reports.
    
    [ Upstream commit f6da2267e71106474fbc0943dc24928b9cb79119 ]
    
    While reading sysctl_igmp_llm_reports, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    This test can be packed into a helper, so such changes will be in the
    follow-up series after net is merged into net-next.
    
      if (ipv4_is_local_multicast(pmc->multiaddr) &&
          !READ_ONCE(net->ipv4.sysctl_igmp_llm_reports))
    
    Fixes: df2cf4a78e48 ("IGMP: Inhibit reports for local multicast groups")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e8c8309329d8349de33098a6c42cade179f8b42
Author: Tariq Toukan <tariqt@nvidia.com>
Date:   Fri Jul 15 11:42:16 2022 +0300

    net/tls: Fix race in TLS device down flow
    
    [ Upstream commit f08d8c1bb97c48f24a82afaa2fd8c140f8d3da8b ]
    
    Socket destruction flow and tls_device_down function sync against each
    other using tls_device_lock and the context refcount, to guarantee the
    device resources are freed via tls_dev_del() by the end of
    tls_device_down.
    
    In the following unfortunate flow, this won't happen:
    - refcount is decreased to zero in tls_device_sk_destruct.
    - tls_device_down starts, skips the context as refcount is zero, going
      all the way until it flushes the gc work, and returns without freeing
      the device resources.
    - only then, tls_device_queue_ctx_destruction is called, queues the gc
      work and frees the context's device resources.
    
    Solve it by decreasing the refcount in the socket's destruction flow
    under the tls_device_lock, for perfect synchronization.  This does not
    slow down the common likely destructor flow, in which both the refcount
    is decreased and the spinlock is acquired, anyway.
    
    Fixes: e8f69799810c ("net/tls: Add generic NIC offload infrastructure")
    Reviewed-by: Maxim Mikityanskiy <maximmi@nvidia.com>
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c687a893f5cae5ca40d189635602e93af9bab73
Author: Junxiao Chang <junxiao.chang@intel.com>
Date:   Fri Jul 15 15:47:01 2022 +0800

    net: stmmac: fix dma queue left shift overflow issue
    
    [ Upstream commit 613b065ca32e90209024ec4a6bb5ca887ee70980 ]
    
    When queue number is > 4, left shift overflows due to 32 bits
    integer variable. Mask calculation is wrong for MTL_RXQ_DMA_MAP1.
    
    If CONFIG_UBSAN is enabled, kernel dumps below warning:
    [   10.363842] ==================================================================
    [   10.363882] UBSAN: shift-out-of-bounds in /build/linux-intel-iotg-5.15-8e6Tf4/
    linux-intel-iotg-5.15-5.15.0/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c:224:12
    [   10.363929] shift exponent 40 is too large for 32-bit type 'unsigned int'
    [   10.363953] CPU: 1 PID: 599 Comm: NetworkManager Not tainted 5.15.0-1003-intel-iotg
    [   10.363956] Hardware name: ADLINK Technology Inc. LEC-EL/LEC-EL, BIOS 0.15.11 12/22/2021
    [   10.363958] Call Trace:
    [   10.363960]  <TASK>
    [   10.363963]  dump_stack_lvl+0x4a/0x5f
    [   10.363971]  dump_stack+0x10/0x12
    [   10.363974]  ubsan_epilogue+0x9/0x45
    [   10.363976]  __ubsan_handle_shift_out_of_bounds.cold+0x61/0x10e
    [   10.363979]  ? wake_up_klogd+0x4a/0x50
    [   10.363983]  ? vprintk_emit+0x8f/0x240
    [   10.363986]  dwmac4_map_mtl_dma.cold+0x42/0x91 [stmmac]
    [   10.364001]  stmmac_mtl_configuration+0x1ce/0x7a0 [stmmac]
    [   10.364009]  ? dwmac410_dma_init_channel+0x70/0x70 [stmmac]
    [   10.364020]  stmmac_hw_setup.cold+0xf/0xb14 [stmmac]
    [   10.364030]  ? page_pool_alloc_pages+0x4d/0x70
    [   10.364034]  ? stmmac_clear_tx_descriptors+0x6e/0xe0 [stmmac]
    [   10.364042]  stmmac_open+0x39e/0x920 [stmmac]
    [   10.364050]  __dev_open+0xf0/0x1a0
    [   10.364054]  __dev_change_flags+0x188/0x1f0
    [   10.364057]  dev_change_flags+0x26/0x60
    [   10.364059]  do_setlink+0x908/0xc40
    [   10.364062]  ? do_setlink+0xb10/0xc40
    [   10.364064]  ? __nla_validate_parse+0x4c/0x1a0
    [   10.364068]  __rtnl_newlink+0x597/0xa10
    [   10.364072]  ? __nla_reserve+0x41/0x50
    [   10.364074]  ? __kmalloc_node_track_caller+0x1d0/0x4d0
    [   10.364079]  ? pskb_expand_head+0x75/0x310
    [   10.364082]  ? nla_reserve_64bit+0x21/0x40
    [   10.364086]  ? skb_free_head+0x65/0x80
    [   10.364089]  ? security_sock_rcv_skb+0x2c/0x50
    [   10.364094]  ? __cond_resched+0x19/0x30
    [   10.364097]  ? kmem_cache_alloc_trace+0x15a/0x420
    [   10.364100]  rtnl_newlink+0x49/0x70
    
    This change fixes MTL_RXQ_DMA_MAP1 mask issue and channel/queue
    mapping warning.
    
    Fixes: d43042f4da3e ("net: stmmac: mapping mtl rx to dma channel")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=216195
    Reported-by: Cedric Wassenaar <cedric@bytespeed.nl>
    Signed-off-by: Junxiao Chang <junxiao.chang@intel.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34e98fce9a9be91aec8b4f43c4f63ab4ce9aed70
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Jul 13 15:34:59 2022 +0300

    perf tests: Fix Convert perf time to TSC test for hybrid
    
    [ Upstream commit deb44a6249f696106645c63c0603eab08a6122af ]
    
    The test does not always correctly determine the number of events for
    hybrids, nor allow for more than 1 evsel when parsing.
    
    Fix by iterating the events actually created and getting the correct
    evsel for the events processed.
    
    Fixes: d9da6f70eb235110 ("perf tests: Support 'Convert perf time to TSC' test for hybrid")
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jin Yao <yao.jin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Thomas Richter <tmricht@linux.ibm.com>
    Link: https://lore.kernel.org/r/20220713123459.24145-3-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 196c21deb08a43e7d03910f69232352554dba095
Author: Robert Hancock <robert.hancock@calian.com>
Date:   Tue Jun 14 17:29:19 2022 -0600

    i2c: cadence: Change large transfer count reset logic to be unconditional
    
    [ Upstream commit 4ca8ca873d454635c20d508261bfc0081af75cf8 ]
    
    Problems were observed on the Xilinx ZynqMP platform with large I2C reads.
    When a read of 277 bytes was performed, the controller NAKed the transfer
    after only 252 bytes were transferred and returned an ENXIO error on the
    transfer.
    
    There is some code in cdns_i2c_master_isr to handle this case by resetting
    the transfer count in the controller before it reaches 0, to allow larger
    transfers to work, but it was conditional on the CDNS_I2C_BROKEN_HOLD_BIT
    quirk being set on the controller, and ZynqMP uses the r1p14 version of
    the core where this quirk is not being set. The requirement to do this to
    support larger reads seems like an inherently required workaround due to
    the core only having an 8-bit transfer size register, so it does not
    appear that this should be conditional on the broken HOLD bit quirk which
    is used elsewhere in the driver.
    
    Remove the dependency on the CDNS_I2C_BROKEN_HOLD_BIT for this transfer
    size reset logic to fix this problem.
    
    Fixes: 63cab195bf49 ("i2c: removed work arounds in i2c driver for Zynq Ultrascale+ MPSoC")
    Signed-off-by: Robert Hancock <robert.hancock@calian.com>
    Reviewed-by: Shubhrajyoti Datta <Shubhrajyoti.datta@amd.com>
    Acked-by: Michal Simek <michal.simek@amd.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66b73ef38d80a135b090f96948ca51ed1a3238d9
Author: Vadim Pasternak <vadimp@nvidia.com>
Date:   Wed Jul 13 12:14:05 2022 +0300

    i2c: mlxcpld: Fix register setting for 400KHz frequency
    
    [ Upstream commit e1f77ecc75aaee6bed04e8fd7830e00032af012e ]
    
    Fix setting of 'Half Cycle' register for 400KHz frequency.
    
    Fixes: fa1049135c15 ("i2c: mlxcpld: Modify register setting for 400KHz frequency")
    Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8e68fce6f0e5ad0e04f5d8c9bd4606e93ce461d
Author: Menglong Dong <imagedong@tencent.com>
Date:   Sat Feb 5 15:47:36 2022 +0800

    net: ipv4: use kfree_skb_reason() in ip_rcv_finish_core()
    
    [ Upstream commit c1f166d1f7eef212096a98b22f5acf92f9af353d ]
    
    Replace kfree_skb() with kfree_skb_reason() in ip_rcv_finish_core(),
    following drop reasons are introduced:
    
    SKB_DROP_REASON_IP_RPFILTER
    SKB_DROP_REASON_UNICAST_IN_L2_MULTICAST
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad5a78ed1356f4f3b397790802f7348b648465a0
Author: Menglong Dong <imagedong@tencent.com>
Date:   Sat Feb 5 15:47:35 2022 +0800

    net: ipv4: use kfree_skb_reason() in ip_rcv_core()
    
    [ Upstream commit 33cba42985c8144eef78d618fc1e51aaa074b169 ]
    
    Replace kfree_skb() with kfree_skb_reason() in ip_rcv_core(). Three new
    drop reasons are introduced:
    
    SKB_DROP_REASON_OTHERHOST
    SKB_DROP_REASON_IP_CSUM
    SKB_DROP_REASON_IP_INHDR
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82cda99184736367a8768782f28cc1d13c9794ed
Author: Menglong Dong <imagedong@tencent.com>
Date:   Sat Feb 5 15:47:34 2022 +0800

    net: netfilter: use kfree_drop_reason() for NF_DROP
    
    [ Upstream commit 2df3041ba3be950376e8c25a8f6da22f7fcc765c ]
    
    Replace kfree_skb() with kfree_skb_reason() in nf_hook_slow() when
    skb is dropped by reason of NF_DROP. Following new drop reasons
    are introduced:
    
    SKB_DROP_REASON_NETFILTER_DROP
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3ed670ef8500b41d58805792a5a10d4adb3563b
Author: Menglong Dong <imagedong@tencent.com>
Date:   Sat Feb 5 15:47:33 2022 +0800

    net: skb_drop_reason: add document for drop reasons
    
    [ Upstream commit 88590b369354092183bcba04e2368010c462557f ]
    
    Add document for following existing drop reasons:
    
    SKB_DROP_REASON_NOT_SPECIFIED
    SKB_DROP_REASON_NO_SOCKET
    SKB_DROP_REASON_PKT_TOO_SMALL
    SKB_DROP_REASON_TCP_CSUM
    SKB_DROP_REASON_SOCKET_FILTER
    SKB_DROP_REASON_UDP_CSUM
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ac90de3d13709a72537400245448c9275276041
Author: Menglong Dong <imagedong@tencent.com>
Date:   Thu Jan 27 17:13:01 2022 +0800

    net: socket: rename SKB_DROP_REASON_SOCKET_FILTER
    
    [ Upstream commit 364df53c081d93fcfd6b91085ff2650c7f17b3c7 ]
    
    Rename SKB_DROP_REASON_SOCKET_FILTER, which is used
    as the reason of skb drop out of socket filter before
    it's part of a released kernel. It will be used for
    more protocols than just TCP in future series.
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/all/20220127091308.91401-2-imagedong@tencent.com/
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7adefdae236f5e5aff9fa856a9fb6992abd7341
Author: Menglong Dong <imagedong@tencent.com>
Date:   Sun Jan 9 14:36:28 2022 +0800

    net: skb: use kfree_skb_reason() in __udp4_lib_rcv()
    
    [ Upstream commit 1c7fab70df085d866a3765955f397ca2b4025b15 ]
    
    Replace kfree_skb() with kfree_skb_reason() in __udp4_lib_rcv.
    New drop reason 'SKB_DROP_REASON_UDP_CSUM' is added for udp csum
    error.
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1629144da3838569a4023d16fd1764039e98705b
Author: Menglong Dong <imagedong@tencent.com>
Date:   Sun Jan 9 14:36:27 2022 +0800

    net: skb: use kfree_skb_reason() in tcp_v4_rcv()
    
    [ Upstream commit 85125597419aec3aa7b8f3b8713e415f997796f2 ]
    
    Replace kfree_skb() with kfree_skb_reason() in tcp_v4_rcv(). Following
    drop reasons are added:
    
    SKB_DROP_REASON_NO_SOCKET
    SKB_DROP_REASON_PKT_TOO_SMALL
    SKB_DROP_REASON_TCP_CSUM
    SKB_DROP_REASON_TCP_FILTER
    
    After this patch, 'kfree_skb' event will print message like this:
    
    $           TASK-PID     CPU#  |||||  TIMESTAMP  FUNCTION
    $              | |         |   |||||     |         |
              <idle>-0       [000] ..s1.    36.113438: kfree_skb: skbaddr=(____ptrval____) protocol=2048 location=(____ptrval____) reason: NO_SOCKET
    
    The reason of skb drop is printed too.
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5158e18225c06f39cde0176a431db6e60f52ebc2
Author: Menglong Dong <imagedong@tencent.com>
Date:   Sun Jan 9 14:36:26 2022 +0800

    net: skb: introduce kfree_skb_reason()
    
    [ Upstream commit c504e5c2f9648a1e5c2be01e8c3f59d394192bd3 ]
    
    Introduce the interface kfree_skb_reason(), which is able to pass
    the reason why the skb is dropped to 'kfree_skb' tracepoint.
    
    Add the 'reason' field to 'trace_kfree_skb', therefor user can get
    more detail information about abnormal skb with 'drop_monitor' or
    eBPF.
    
    All drop reasons are defined in the enum 'skb_drop_reason', and
    they will be print as string in 'kfree_skb' tracepoint in format
    of 'reason: XXX'.
    
    ( Maybe the reasons should be defined in a uapi header file, so that
    user space can use them? )
    
    Signed-off-by: Menglong Dong <imagedong@tencent.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88ec2ff42da3ac93b2437dc52fe25cd4372148e6
Author: Liang He <windhl@126.com>
Date:   Thu Jul 14 23:31:38 2022 +0800

    net: dsa: microchip: ksz_common: Fix refcount leak bug
    
    [ Upstream commit a14bd7475452c51835dd5a0cee4c8fa48dd0b539 ]
    
    In ksz_switch_register(), we should call of_node_put() for the
    reference returned by of_get_child_by_name() which has increased
    the refcount.
    
    Fixes: 912aae27c6af ("net: dsa: microchip: really look for phy-mode in port nodes")
    Signed-off-by: Liang He <windhl@126.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20220714153138.375919-1-windhl@126.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 212a5360ef4063f3ea3752e6e6a7e73e8e82acbd
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Fri Jul 1 13:03:41 2022 +0200

    mtd: rawnand: gpmi: Set WAIT_FOR_READY timeout based on program/erase times
    
    [ Upstream commit 0fddf9ad06fd9f439f137139861556671673e31c ]
    
    06781a5026350 Fixes the calculation of the DEVICE_BUSY_TIMEOUT register
    value from busy_timeout_cycles. busy_timeout_cycles is calculated wrong
    though: It is calculated based on the maximum page read time, but the
    timeout is also used for page write and block erase operations which
    require orders of magnitude bigger timeouts.
    
    Fix this by calculating busy_timeout_cycles from the maximum of
    tBERS_max and tPROG_max.
    
    This is for now the easiest and most obvious way to fix the driver.
    There's room for improvements though: The NAND_OP_WAITRDY_INSTR tells us
    the desired timeout for the current operation, so we could program the
    timeout dynamically for each operation instead of setting a fixed
    timeout. Also we could wire up the interrupt handler to actually detect
    and forward timeouts occurred when waiting for the chip being ready.
    
    As a sidenote I verified that the change in 06781a5026350 is really
    correct. I wired up the interrupt handler in my tree and measured the
    time between starting the operation and the timeout interrupt handler
    coming in. The time increases 41us with each step in the timeout
    register which corresponds to 4096 clock cycles with the 99MHz clock
    that I have.
    
    Fixes: 06781a5026350 ("mtd: rawnand: gpmi: Fix setting busy timeout setting")
    Fixes: b1206122069aa ("mtd: rawniand: gpmi: use core timings instead of an empirical derivation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Han Xu <han.xu@nxp.com>
    Tested-by: Tomasz Moń <tomasz.mon@camlingroup.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0156b402a5be677e0a2c5bbf7c2bb15c7ab9a889
Author: Dario Binacchi <dario.binacchi@amarulasolutions.com>
Date:   Tue Jan 18 10:54:33 2022 +0100

    mtd: rawnand: gpmi: validate controller clock rate
    
    [ Upstream commit 15e27d197a7ea69b4643791ca2f8467fdd998359 ]
    
    What to do when the real rate of the gpmi clock is not equal to the
    required one? The solutions proposed in [1] did not lead to a conclusion
    on how to validate the clock rate, so, inspired by the document [2], I
    consider the rate correct only if not lower or equal to the rate of the
    previous edo mode. In fact, in chapter 4.16.2 (NV-DDR) of the document [2],
    it is written that "If the host selects timing mode n, then its clock
    period shall be faster than the clock period of timing mode n-1 and
    slower than or equal to the clock period of timing mode n.". I thought
    that it could therefore also be used in this case, without therefore
    having to define the valid rate ranges empirically.
    
    For example, suppose that gpmi_nfc_compute_timings() is called to set
    edo mode 5 (100MHz) but the rate returned by clk_round_rate() is 80MHz
    (edo mode 4). In this case gpmi_nfc_compute_timings() will return error,
    and will be called again to set edo mode 4, which this time will be
    successful.
    
    [1] https://lore.kernel.org/r/20210702065350.209646-5-ebiggers@kernel.org
    [2] http://www.onfi.org/-/media/client/onfi/specs/onfi_3_0_gold.pdf?la=en
    
    Co-developed-by: Michael Trimarchi <michael@amarulasolutions.com>
    Signed-off-by: Michael Trimarchi <michael@amarulasolutions.com>
    Signed-off-by: Dario Binacchi <dario.binacchi@amarulasolutions.com>
    Tested-by: Sascha Hauer <s.hauer@pengutronix.de>
    Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20220118095434.35081-4-dario.binacchi@amarulasolutions.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f53c6ee5e7eb080611c33f02d788573068094999
Author: Biao Huang <biao.huang@mediatek.com>
Date:   Thu Jul 14 14:00:14 2022 +0800

    net: stmmac: fix unbalanced ptp clock issue in suspend/resume flow
    
    [ Upstream commit f4c7d8948e866918d61493264dbbd67e45ef2bda ]
    
    Current stmmac driver will prepare/enable ptp_ref clock in
    stmmac_init_tstamp_counter().
    
    The stmmac_pltfr_noirq_suspend will disable it once in suspend flow.
    
    But in resume flow,
            stmmac_pltfr_noirq_resume --> stmmac_init_tstamp_counter
            stmmac_resume --> stmmac_hw_setup --> stmmac_init_ptp --> stmmac_init_tstamp_counter
    ptp_ref clock reference counter increases twice, which leads to unbalance
    ptp clock when resume back.
    
    Move ptp_ref clock prepare/enable out of stmmac_init_tstamp_counter to fix it.
    
    Fixes: 0735e639f129d ("net: stmmac: skip only stmmac_ptp_register when resume from suspend")
    Signed-off-by: Biao Huang <biao.huang@mediatek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f784d232565b3f0bf7800968005378d3c7db8bd4
Author: Biao Huang <biao.huang@mediatek.com>
Date:   Thu Jul 14 14:00:13 2022 +0800

    net: stmmac: fix pm runtime issue in stmmac_dvr_remove()
    
    [ Upstream commit 0d9a15913b871e03fdd3b3d90a2e665fb22f9bcf ]
    
    If netif is running when stmmac_dvr_remove is invoked,
    the unregister_netdev will call ndo_stop(stmmac_release) and
    vlan_kill_rx_filter(stmmac_vlan_rx_kill_vid).
    
    Currently, stmmac_dvr_remove() will disable pm runtime before
    unregister_netdev. When stmmac_vlan_rx_kill_vid is invoked,
    pm_runtime_resume_and_get in it returns EACCESS error number,
    and reports:
    
            dwmac-mediatek 11021000.ethernet eth0: stmmac_dvr_remove: removing driver
            dwmac-mediatek 11021000.ethernet eth0: FPE workqueue stop
            dwmac-mediatek 11021000.ethernet eth0: failed to kill vid 0081/0
    
    Move the pm_runtime_disable to the end of stmmac_dvr_remove
    to fix this issue.
    
    Fixes: 6449520391dfc ("net: stmmac: properly handle with runtime pm in stmmac_dvr_remove()")
    Signed-off-by: Biao Huang <biao.huang@mediatek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6b6f027e2854a51f345a5e3e808d7a88001d4f8
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:52:05 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_probe_interval.
    
    [ Upstream commit 2a85388f1d94a9f8b5a529118a2c5eaa0520d85c ]
    
    While reading sysctl_tcp_probe_interval, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 05cbc0db03e8 ("ipv4: Create probe timer for tcp PMTU as per RFC4821")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f524c3e7f6cdad66b3b6a912cef47b656f8b0de3
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:52:04 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_probe_threshold.
    
    [ Upstream commit 92c0aa4175474483d6cf373314343d4e624e882a ]
    
    While reading sysctl_tcp_probe_threshold, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 6b58e0a5f32d ("ipv4: Use binary search to choose tcp PMTU probe_size")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc36c37f5fe066c4708e623ead96dc8f57224bf5
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:52:03 2022 -0700

    tcp: Fix a data-race around sysctl_tcp_mtu_probe_floor.
    
    [ Upstream commit 8e92d4423615a5257d0d871fc067aa561f597deb ]
    
    While reading sysctl_tcp_mtu_probe_floor, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: c04b79b6cfd7 ("tcp: add new tcp_mtu_probe_floor sysctl")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fc9357282df055e30990b29f4b7afa53ab42cdb
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:52:02 2022 -0700

    tcp: Fix data-races around sysctl_tcp_min_snd_mss.
    
    [ Upstream commit 78eb166cdefcc3221c8c7c1e2d514e91a2eb5014 ]
    
    While reading sysctl_tcp_min_snd_mss, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 5f3e2bf008c2 ("tcp: add tcp_min_snd_mss sysctl")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d7dea651b7fe0322be95054f64e3711afccc543
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:52:01 2022 -0700

    tcp: Fix data-races around sysctl_tcp_base_mss.
    
    [ Upstream commit 88d78bc097cd8ebc6541e93316c9d9bf651b13e8 ]
    
    While reading sysctl_tcp_base_mss, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 5d424d5a674f ("[TCP]: MTU probing")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aabe9438fdfe004e021d5a206227ec105dbe2416
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:52:00 2022 -0700

    tcp: Fix data-races around sysctl_tcp_mtu_probing.
    
    [ Upstream commit f47d00e077e7d61baf69e46dde3210c886360207 ]
    
    While reading sysctl_tcp_mtu_probing, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 5d424d5a674f ("[TCP]: MTU probing")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ba9cd43b5776c27d25e5a32dde9e80bdeb1c6a1
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:59 2022 -0700

    tcp: Fix data-races around sysctl_tcp_l3mdev_accept.
    
    [ Upstream commit 08a75f10679470552a3a443f9aefd1399604d31d ]
    
    While reading sysctl_tcp_l3mdev_accept, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 6dd9a14e92e5 ("net: Allow accepted sockets to be bound to l3mdev domain")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8e29f64458318efbbdf3fb9820a2722cbd509be
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri May 13 11:55:43 2022 -0700

    tcp: sk->sk_bound_dev_if once in inet_request_bound_dev_if()
    
    [ Upstream commit fdb5fd7f736ec7ae9fb36d2842ea6d9ebc4e7269 ]
    
    inet_request_bound_dev_if() reads sk->sk_bound_dev_if twice
    while listener socket is not locked.
    
    Another cpu could change this field under us.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf3134feffe61b7a0e21f60a04743f8da0958b53
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:58 2022 -0700

    tcp/dccp: Fix a data-race around sysctl_tcp_fwmark_accept.
    
    [ Upstream commit 1a0008f9df59451d0a17806c1ee1a19857032fa8 ]
    
    While reading sysctl_tcp_fwmark_accept, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 84f39b08d786 ("net: support marking accepting TCP sockets")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dccf8a67f30e18980d13f07006e5a536bbd1e136
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:57 2022 -0700

    ip: Fix a data-race around sysctl_fwmark_reflect.
    
    [ Upstream commit 85d0b4dbd74b95cc492b1f4e34497d3f894f5d9a ]
    
    While reading sysctl_fwmark_reflect, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: e110861f8609 ("net: add a sysctl to reflect the fwmark on replies")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87ceaa199a72c5856d49a030941fabcd5c3928d4
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:56 2022 -0700

    ip: Fix a data-race around sysctl_ip_autobind_reuse.
    
    [ Upstream commit 0db232765887d9807df8bcb7b6f29b2871539eab ]
    
    While reading sysctl_ip_autobind_reuse, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its reader.
    
    Fixes: 4b01a9674231 ("tcp: bind(0) remove the SO_REUSEADDR restriction when ephemeral ports are exhausted.")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fdf9bdb28835566d5648cd4c0200d37e4efa791
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:55 2022 -0700

    ip: Fix data-races around sysctl_ip_nonlocal_bind.
    
    [ Upstream commit 289d3b21fb0bfc94c4e98f10635bba1824e5f83c ]
    
    While reading sysctl_ip_nonlocal_bind, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 351f81f7d7185d18a9ff76f8f8c2fa8c4eea563b
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:54 2022 -0700

    ip: Fix data-races around sysctl_ip_fwd_update_priority.
    
    [ Upstream commit 7bf9e18d9a5e99e3c83482973557e9f047b051e7 ]
    
    While reading sysctl_ip_fwd_update_priority, it can be changed
    concurrently.  Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 432e05d32892 ("net: ipv4: Control SKB reprioritization after forwarding")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93fbc06da1d819f3981a7bd7928c3641ea67b364
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:53 2022 -0700

    ip: Fix data-races around sysctl_ip_fwd_use_pmtu.
    
    [ Upstream commit 60c158dc7b1f0558f6cadd5b50d0386da0000d50 ]
    
    While reading sysctl_ip_fwd_use_pmtu, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: f87c10a8aa1e ("ipv4: introduce ip_dst_mtu_maybe_forward and protect forwarding path against pmtu spoofing")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01083e3f9868a96e678496136cef195a89e292f9
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:52 2022 -0700

    ip: Fix data-races around sysctl_ip_no_pmtu_disc.
    
    [ Upstream commit 0968d2a441bf6afb551fd99e60fa65ed67068963 ]
    
    While reading sysctl_ip_no_pmtu_disc, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e75b73081f1ec169518773626c2ff3950476660b
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Thu Jun 2 18:58:11 2022 +0300

    igc: Reinstate IGC_REMOVED logic and implement it properly
    
    [ Upstream commit 7c1ddcee5311f3315096217881d2dbe47cc683f9 ]
    
    The initially merged version of the igc driver code (via commit
    146740f9abc4, "igc: Add support for PF") contained the following
    IGC_REMOVED checks in the igc_rd32/wr32() MMIO accessors:
    
            u32 igc_rd32(struct igc_hw *hw, u32 reg)
            {
                    u8 __iomem *hw_addr = READ_ONCE(hw->hw_addr);
                    u32 value = 0;
    
                    if (IGC_REMOVED(hw_addr))
                            return ~value;
    
                    value = readl(&hw_addr[reg]);
    
                    /* reads should not return all F's */
                    if (!(~value) && (!reg || !(~readl(hw_addr))))
                            hw->hw_addr = NULL;
    
                    return value;
            }
    
    And:
    
            #define wr32(reg, val) \
            do { \
                    u8 __iomem *hw_addr = READ_ONCE((hw)->hw_addr); \
                    if (!IGC_REMOVED(hw_addr)) \
                            writel((val), &hw_addr[(reg)]); \
            } while (0)
    
    E.g. igb has similar checks in its MMIO accessors, and has a similar
    macro E1000_REMOVED, which is implemented as follows:
    
            #define E1000_REMOVED(h) unlikely(!(h))
    
    These checks serve to detect and take note of an 0xffffffff MMIO read
    return from the device, which can be caused by a PCIe link flap or some
    other kind of PCI bus error, and to avoid performing MMIO reads and
    writes from that point onwards.
    
    However, the IGC_REMOVED macro was not originally implemented:
    
            #ifndef IGC_REMOVED
            #define IGC_REMOVED(a) (0)
            #endif /* IGC_REMOVED */
    
    This led to the IGC_REMOVED logic to be removed entirely in a
    subsequent commit (commit 3c215fb18e70, "igc: remove IGC_REMOVED
    function"), with the rationale that such checks matter only for
    virtualization and that igc does not support virtualization -- but a
    PCIe device can become detached even without virtualization being in
    use, and without proper checks, a PCIe bus error affecting an igc
    adapter will lead to various NULL pointer dereferences, as the first
    access after the error will set hw->hw_addr to NULL, and subsequent
    accesses will blindly dereference this now-NULL pointer.
    
    This patch reinstates the IGC_REMOVED checks in igc_rd32/wr32(), and
    implements IGC_REMOVED the way it is done for igb, by checking for the
    unlikely() case of hw_addr being NULL.  This change prevents the oopses
    seen when a PCIe link flap occurs on an igc adapter.
    
    Fixes: 146740f9abc4 ("igc: Add support for PF")
    Signed-off-by: Lennert Buytenhek <buytenh@arista.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4f7a9fbe24b3e3f7b78c9c9b4cc9458ea172745
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Mon May 9 11:52:54 2022 +0300

    Revert "e1000e: Fix possible HW unit hang after an s0ix exit"
    
    [ Upstream commit 6cfa45361d3eac31ba67d7d0bbef547151450106 ]
    
    This reverts commit 1866aa0d0d6492bc2f8d22d0df49abaccf50cddd.
    
    Commit 1866aa0d0d64 ("e1000e: Fix possible HW unit hang after an s0ix
    exit") was a workaround for CSME problem to handle messages comes via H2ME
    mailbox. This problem has been fixed by patch "e1000e: Enable the GPT
    clock before sending message to the CSME".
    
    Fixes: 3e55d231716e ("e1000e: Add handshake with the CSME to support S0ix")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=214821
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63aa107bce83eb1265336a80309dcbe3a128a924
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Sun May 8 10:09:05 2022 +0300

    e1000e: Enable GPT clock before sending message to CSME
    
    [ Upstream commit b49feacbeffc7635cc6692cbcc6a1eae2c17da6f ]
    
    On corporate (CSME) ADL systems, the Ethernet Controller may stop working
    ("HW unit hang") after exiting from the s0ix state. The reason is that
    CSME misses the message sent by the host. Enabling the dynamic GPT clock
    solves this problem. This clock is cleared upon HW initialization.
    
    Fixes: 3e55d231716e ("e1000e: Add handshake with the CSME to support S0ix")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=214821
    Reviewed-by: Dima Ruinskiy <dima.ruinskiy@intel.com>
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Chia-Lin Kao (AceLan) <acelan.kao@canonical.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98d81b2b154d1aea706057939fe6c1b6b57c3b55
Author: Israel Rukshin <israelr@nvidia.com>
Date:   Thu Jul 14 12:42:10 2022 +0000

    nvme: fix block device naming collision
    
    [ Upstream commit 6961b5e02876b3b47f030a1f1ee8fd3e631ac270 ]
    
    The issue exists when multipath is enabled and the namespace is
    shared, but all the other controller checks at nvme_is_unique_nsid()
    are false. The reason for this issue is that nvme_is_unique_nsid()
    returns false when is called from nvme_mpath_alloc_disk() due to an
    uninitialized value of head->shared. The patch fixes it by setting
    head->shared before nvme_mpath_alloc_disk() is called.
    
    Fixes: 5974ea7ce0f9 ("nvme: allow duplicate NSIDs for private namespaces")
    Signed-off-by: Israel Rukshin <israelr@nvidia.com>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Max Gurtovoy <mgurtovoy@nvidia.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 321abf90c5768093f275e93c09b75c2f670f64f4
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Feb 24 17:46:50 2022 +0100

    nvme: check for duplicate identifiers earlier
    
    [ Upstream commit e2d77d2e11c4f1e70a1a24cc8fe63ff3dc9b53ef ]
    
    Lift the check for duplicate identifiers into nvme_init_ns_head, which
    avoids pointless error unwinding in case they don't match, and also
    matches where we check identifier validity for the multipath case.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbedad96f416495b446dbb4348856a4a6fa52b85
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Fri Jul 8 17:00:27 2022 -0700

    scsi: ufs: core: Drop loglevel of WriteBoost message
    
    [ Upstream commit 2ae57c995003a7840cb6b5ec5f0c06193695321b ]
    
    Commit '3b5f3c0d0548 ("scsi: ufs: core: Tidy up WB configuration code")'
    changed the log level of the write boost enable/disable notification from
    debug to info. This results in a lot of noise in the kernel log during
    normal operation.
    
    Drop it back to debug level to avoid this.
    
    Link: https://lore.kernel.org/r/20220709000027.3929970-1-bjorn.andersson@linaro.org
    Fixes: 3b5f3c0d0548 ("scsi: ufs: core: Tidy up WB configuration code")
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Acked-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04ae8518745ce4ebb0acbe1dbcbdc18917841048
Author: Ming Lei <ming.lei@redhat.com>
Date:   Wed Jul 6 20:59:42 2022 +0800

    scsi: megaraid: Clear READ queue map's nr_queues
    
    [ Upstream commit 8312cd3a7b835ae3033a679e5f0014a40e7891c5 ]
    
    The megaraid SCSI driver sets set->nr_maps as 3 if poll_queues is > 0, and
    blk-mq actually initializes each map's nr_queues as nr_hw_queues.
    Consequently the driver has to clear READ queue map's nr_queues, otherwise
    the queue map becomes broken if poll_queues is set as non-zero.
    
    Link: https://lore.kernel.org/r/20220706125942.528533-1-ming.lei@redhat.com
    Fixes: 9e4bec5b2a23 ("scsi: megaraid_sas: mq_poll support")
    Cc: Kashyap Desai <kashyap.desai@broadcom.com>
    Cc: sumit.saxena@broadcom.com
    Cc: chandrakanth.patil@broadcom.com
    Cc: linux-block@vger.kernel.org
    Cc: Hannes Reinecke <hare@suse.de>
    Reported-by: Guangwu Zhang <guazhang@redhat.com>
    Tested-by: Guangwu Zhang <guazhang@redhat.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7720f23bb93628f30f16d033eaefbe2540f1b5e
Author: Fangzhi Zuo <Jerry.Zuo@amd.com>
Date:   Wed Jul 6 15:52:46 2022 -0400

    drm/amd/display: Ignore First MST Sideband Message Return Error
    
    [ Upstream commit acea108fa067d140bd155161a79b1fcd967f4137 ]
    
    [why]
    First MST sideband message returns AUX_RET_ERROR_HPD_DISCON
    on certain intel platform. Aux transaction considered failure
    if HPD unexpected pulled low. The actual aux transaction success
    in such case, hence do not return error.
    
    [how]
    Not returning error when AUX_RET_ERROR_HPD_DISCON detected
    on the first sideband message.
    
    v2: squash in additional DMI entries
    v3: squash in static fix
    
    Signed-off-by: Fangzhi Zuo <Jerry.Zuo@amd.com>
    Acked-by: Solomon Chiu <solomon.chiu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bae037b0fb429466fed1585440f337396d72efa
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Oct 20 16:45:00 2021 -0400

    drm/amdgpu/display: add quirk handling for stutter mode
    
    [ Upstream commit 3ce51649cdf23ab463494df2bd6d1e9529ebdc6a ]
    
    Stutter mode is a power saving feature on GPUs, however at
    least one early raven system exhibits stability issues with
    it.  Add a quirk to disable it for that system.
    
    Bug: https://bugzilla.kernel.org/show_bug.cgi?id=214417
    Fixes: 005440066f929b ("drm/amdgpu: enable gfxoff again on raven series (v2)")
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e980e1d978e0eb4c0399cff37f175779237db53b
Author: Wayne Lin <Wayne.Lin@amd.com>
Date:   Fri Jul 23 11:50:28 2021 +0800

    drm/amd/display: Fork thread to offload work of hpd_rx_irq
    
    [ Upstream commit 8e794421bc981586d0af4e959ec76d668c793a55 ]
    
    [Why]
    Currently, we will try to get dm.dc_lock in handle_hpd_rx_irq() when
    link lost happened, which is risky and could cause deadlock.
    e.g. If we are under procedure to enable MST streams and then monitor
    happens to toggle short hpd to notify link lost, then
    handle_hpd_rx_irq() will get blocked due to stream enabling flow has
    dc_lock. However, under MST, enabling streams involves communication
    with remote sinks which need to use handle_hpd_rx_irq() to handle
    sideband messages. Thus, we have deadlock here.
    
    [How]
    Target is to have handle_hpd_rx_irq() finished as soon as possilble.
    Hence we can react to interrupt quickly. Besides, we should avoid to
    grabe dm.dc_lock within handle_hpd_rx_irq() to avoid deadlock situation.
    
    Firstly, revert patches which introduced to use dm.dc_lock in
    handle_hpd_rx_irq():
    
    * commit ("drm/amd/display: NULL pointer error during ")
    
    * commit ("drm/amd/display: Only one display lights up while using MST")
    
    * commit ("drm/amd/display: take dc_lock in short pulse handler only")
    
    Instead, create work to handle irq events which needs dm.dc_lock.
    Besides:
    
    * Create struct hpd_rx_irq_offload_work_queue for each link to handle
      its short hpd events
    
    * Avoid to handle link lost/ automated test if the link is disconnected
    
    * Defer dc_lock needed works in dc_link_handle_hpd_rx_irq(). This
      function should just handle simple stuff for us (e.g. DPCD R/W).
      However, deferred works should still be handled by the order that
      dc_link_handle_hpd_rx_irq() used to be.
    
    * Change function name dm_handle_hpd_rx_irq() to
      dm_handle_mst_sideband_msg() to be more specific
    
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Mikita Lipski <mikita.lipski@amd.com>
    Signed-off-by: Wayne Lin <Wayne.Lin@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54740bc4b182c2522c6570c3fb0b96a912982bf3
Author: Wayne Lin <Wayne.Lin@amd.com>
Date:   Fri Aug 13 15:54:47 2021 +0800

    drm/amd/display: Add option to defer works of hpd_rx_irq
    
    [ Upstream commit 410ad92d7fecd30de7456c19e326e272c2153ff2 ]
    
    [Why & How]
    Due to some code flow constraints, we need to defer dc_lock needed works
    from dc_link_handle_hpd_rx_irq(). Thus, do following changes:
    
    * Change allow_hpd_rx_irq() from static to public
    * Change handle_automated_test() from static to public
    * Extract link lost handling flow out from dc_link_handle_hpd_rx_irq()
      and put those into a new function dc_link_dp_handle_link_loss()
    * Add one option parameter to decide whether defer works within
      dc_link_handle_hpd_rx_irq()
    
    Acked-by: Mikita Lipski <mikita.lipski@amd.com>
    Signed-off-by: Wayne Lin <Wayne.Lin@amd.com>
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 734d5ce02cb069cccedc993d8f1dc0ea41cfa3dd
Author: Jude Shih <shenshih@amd.com>
Date:   Sun Jul 25 13:55:02 2021 +0800

    drm/amd/display: Support for DMUB HPD interrupt handling
    
    [ Upstream commit e27c41d5b0681c597ac1894f4e02cf626e062250 ]
    
    [WHY]
    To add support for HPD interrupt handling from DMUB.
    HPD interrupt could be triggered from outbox1 from DMUB
    
    [HOW]
    1) Use queue_work to handle hpd task from outbox1
    
    2) Add handle_hpd_irq_helper to share interrupt handling code
    between legacy and DMUB HPD from outbox1
    
    3) Added DMUB HPD handling in dmub_srv_stat_get_notification().
    HPD handling callback function and wake up the DMUB thread.
    
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Jude Shih <shenshih@amd.com>
    Tested-by: Daniel Wheeler <Daniel.Wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1e0bbe081715827b7bf8d71d805ec49039c8fcd
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 11 17:15:30 2022 -0700

    tcp: Fix data-races around sysctl_tcp_ecn.
    
    [ Upstream commit 4785a66702f086cf2ea84bdbe6ec921f274bd9f2 ]
    
    While reading sysctl_tcp_ecn, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cb4959493cd13ee4e5080cb98437649470e650c
Author: Xiaoming Ni <nixiaoming@huawei.com>
Date:   Fri Jan 21 22:10:55 2022 -0800

    sysctl: move some boundary constants from sysctl.c to sysctl_vals
    
    [ Upstream commit 78e36f3b0dae586f623c4a37ec5eb5496f5abbe1 ]
    
    sysctl has helpers which let us specify boundary values for a min or max
    int value.  Since these are used for a boundary check only they don't
    change, so move these variables to sysctl_vals to avoid adding duplicate
    variables.  This will help with our cleanup of kernel/sysctl.c.
    
    [akpm@linux-foundation.org: update it for "mm/pagealloc: sysctl: change watermark_scale_factor max limit to 30%"]
    [mcgrof@kernel.org: major rebase]
    
    Link: https://lkml.kernel.org/r/20211123202347.818157-3-mcgrof@kernel.org
    Signed-off-by: Xiaoming Ni <nixiaoming@huawei.com>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Amir Goldstein <amir73il@gmail.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Benjamin LaHaise <bcrl@kvack.org>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Iurii Zaikin <yzaikin@google.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Paul Turner <pjt@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Qing Wang <wangqing@vivo.com>
    Cc: Sebastian Reichel <sre@kernel.org>
    Cc: Sergey Senozhatsky <senozhatsky@chromium.org>
    Cc: Stephen Kitt <steve@sk2.org>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Antti Palosaari <crope@iki.fi>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Clemens Ladisch <clemens@ladisch.de>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Julia Lawall <julia.lawall@inria.fr>
    Cc: Lukas Middendorf <kernel@tuxforce.de>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Phillip Potter <phil@philpotter.co.uk>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Douglas Gilbert <dgilbert@interlog.com>
    Cc: James E.J. Bottomley <jejb@linux.ibm.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: John Ogness <john.ogness@linutronix.de>
    Cc: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Suren Baghdasaryan <surenb@google.com>
    Cc: "Theodore Ts'o" <tytso@mit.edu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2b6c5f7ee95ba7f7ab374c8cc99b211b6be91e9
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Fri Jan 14 14:07:17 2022 -0800

    mm/pagealloc: sysctl: change watermark_scale_factor max limit to 30%
    
    [ Upstream commit 39c65a94cd9661532be150e88f8b02f4a6844a35 ]
    
    For embedded systems with low total memory, having to run applications
    with relatively large memory requirements, 10% max limitation for
    watermark_scale_factor poses an issue of triggering direct reclaim every
    time such application is started.  This results in slow application
    startup times and bad end-user experience.
    
    By increasing watermark_scale_factor max limit we allow vendors more
    flexibility to choose the right level of kswapd aggressiveness for their
    device and workload requirements.
    
    Link: https://lkml.kernel.org/r/20211124193604.2758863-1-surenb@google.com
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Lukas Middendorf <kernel@tuxforce.de>
    Cc: Antti Palosaari <crope@iki.fi>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Iurii Zaikin <yzaikin@google.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Zhang Yi <yi.zhang@huawei.com>
    Cc: Fengfei Xi <xi.fengfei@h3c.com>
    Cc: Mike Rapoport <rppt@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2dba226acb9baed97a714e0f7f81a89b2feb63b
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Fri Mar 4 06:55:06 2022 -0800

    net: tun: split run_ebpf_filter() and pskb_trim() into different "if statement"
    
    [ Upstream commit 45a15d89fbcd280571eba8e5ca309e14ba6afa8f ]
    
    No functional change.
    
    Just to split the if statement into different conditions to use
    kfree_skb_reason() to trace the reason later.
    
    Cc: Joao Martins <joao.m.martins@oracle.com>
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f52af853be7ac96ba8ced03c9136297fe5843b0b
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 24 12:24:57 2022 -0800

    ipv4/tcp: do not use per netns ctl sockets
    
    [ Upstream commit 37ba017dcc3b1123206808979834655ddcf93251 ]
    
    TCP ipv4 uses per-cpu/per-netns ctl sockets in order to send
    RST and some ACK packets (on behalf of TIMEWAIT sockets).
    
    This adds memory and cpu costs, which do not seem needed.
    Now typical servers have 256 or more cores, this adds considerable
    tax to netns users.
    
    tcp sockets are used from BH context, are not receiving packets,
    and do not store any persistent state but the 'struct net' pointer
    in order to be able to use IPv4 output functions.
    
    Note that I attempted a related change in the past, that had
    to be hot-fixed in commit bdbbb8527b6f ("ipv4: tcp: get rid of ugly unicast_sock")
    
    This patch could very well surface old bugs, on layers not
    taking care of sk->sk_kern_sock properly.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da3c256e2d0ebc87c7db0c605c9692b6f1722074
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Jul 5 15:07:26 2022 +0200

    perf/core: Fix data race between perf_event_set_output() and perf_mmap_close()
    
    [ Upstream commit 68e3c69803dada336893640110cb87221bb01dcf ]
    
    Yang Jihing reported a race between perf_event_set_output() and
    perf_mmap_close():
    
            CPU1                                    CPU2
    
            perf_mmap_close(e2)
              if (atomic_dec_and_test(&e2->rb->mmap_count)) // 1 - > 0
                detach_rest = true
    
                                                    ioctl(e1, IOC_SET_OUTPUT, e2)
                                                      perf_event_set_output(e1, e2)
    
              ...
              list_for_each_entry_rcu(e, &e2->rb->event_list, rb_entry)
                ring_buffer_attach(e, NULL);
                // e1 isn't yet added and
                // therefore not detached
    
                                                        ring_buffer_attach(e1, e2->rb)
                                                          list_add_rcu(&e1->rb_entry,
                                                                       &e2->rb->event_list)
    
    After this; e1 is attached to an unmapped rb and a subsequent
    perf_mmap() will loop forever more:
    
            again:
                    mutex_lock(&e->mmap_mutex);
                    if (event->rb) {
                            ...
                            if (!atomic_inc_not_zero(&e->rb->mmap_count)) {
                                    ...
                                    mutex_unlock(&e->mmap_mutex);
                                    goto again;
                            }
                    }
    
    The loop in perf_mmap_close() holds e2->mmap_mutex, while the attach
    in perf_event_set_output() holds e1->mmap_mutex. As such there is no
    serialization to avoid this race.
    
    Change perf_event_set_output() to take both e1->mmap_mutex and
    e2->mmap_mutex to alleviate that problem. Additionally, have the loop
    in perf_mmap() detach the rb directly, this avoids having to wait for
    the concurrent perf_mmap_close() to get around to doing it to make
    progress.
    
    Fixes: 9bb5d40cd93c ("perf: Fix mmap() accounting hole")
    Reported-by: Yang Jihong <yangjihong1@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: Yang Jihong <yangjihong1@huawei.com>
    Link: https://lkml.kernel.org/r/YsQ3jm2GR38SW7uD@worktop.programming.kicks-ass.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44016a85419ca0d4f1e4d0127b330f8e4e2a57d0
Author: William Dean <williamsukatube@gmail.com>
Date:   Sun Jul 10 23:49:22 2022 +0800

    pinctrl: ralink: Check for null return of devm_kcalloc
    
    [ Upstream commit c3b821e8e406d5650e587b7ac624ac24e9b780a8 ]
    
    Because of the possible failure of the allocation, data->domains might
    be NULL pointer and will cause the dereference of the NULL pointer
    later.
    Therefore, it might be better to check it and directly return -ENOMEM
    without releasing data manually if fails, because the comment of the
    devm_kmalloc() says "Memory allocated with this function is
    automatically freed on driver detach.".
    
    Fixes: a86854d0c599b ("treewide: devm_kzalloc() -> devm_kcalloc()")
    Reported-by: Hacash Robot <hacashRobot@santino.com>
    Signed-off-by: William Dean <williamsukatube@gmail.com>
    Link: https://lore.kernel.org/r/20220710154922.2610876-1-williamsukatube@163.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4e3187750f8da387774c2654a223f858391033b
Author: Arınç ÜNAL <arinc.unal@arinc9.com>
Date:   Thu Apr 14 20:39:04 2022 +0300

    pinctrl: ralink: rename pinctrl-rt2880 to pinctrl-ralink
    
    [ Upstream commit 6b3dd85b0bdec1a8308fa5dcbafcd5d55b5f3608 ]
    
    pinctrl-rt2880.c and pinmux.h make up the Ralink pinctrl driver. Rename
    pinctrl-rt2880.c to pinctrl-ralink.c. Rename pinmux.h to pinctrl-ralink.h.
    Fix references to it. Rename functions that include "rt2880" to "ralink".
    
    Remove PINCTRL_RT2880 symbol and make the existing PINCTRL_RALINK symbol
    compile pinctrl-ralink.c. Change the bool to "Ralink pinctrl driver".
    
    Signed-off-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Reviewed-by: Sergio Paracuellos <sergio.paracuellos@gmail.com>
    Acked-by: Sergio Paracuellos <sergio.paracuellos@gmail.com>
    Link: https://lore.kernel.org/r/20220414173916.5552-3-arinc.unal@arinc9.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d40def7cd05c7c08943b01e677650aaaf98dd43c
Author: Arınç ÜNAL <arinc.unal@arinc9.com>
Date:   Thu Apr 14 20:39:03 2022 +0300

    pinctrl: ralink: rename MT7628(an) functions to MT76X8
    
    [ Upstream commit 150438c86f55989632005b92c94f4aa2ec562ed6 ]
    
    The functions that include "MT7628(an)" are for MT7628 and MT7688 SoCs.
    Rename them to MT76X8 to refer to both of the SoCs.
    
    Signed-off-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Reviewed-by: Sergio Paracuellos <sergio.paracuellos@gmail.com>
    Acked-by: Sergio Paracuellos <sergio.paracuellos@gmail.com>
    Link: https://lore.kernel.org/r/20220414173916.5552-2-arinc.unal@arinc9.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4c5115140ed1833197bad9a6b80265840ff427f
Author: Mustafa Ismail <mustafa.ismail@intel.com>
Date:   Tue Jul 5 18:08:37 2022 -0500

    RDMA/irdma: Fix sleep from invalid context BUG
    
    [ Upstream commit cc0315564d6eec91c716d314b743321be24c70b3 ]
    
    Taking the qos_mutex to process RoCEv2 QP's on netdev events causes a
    kernel splat.
    
    Fix this by removing the handling for RoCEv2 in
    irdma_cm_teardown_connections that uses the mutex. This handling is only
    needed for iWARP to avoid having connections established while the link is
    down or having connections remain functional after the IP address is
    removed.
    
      BUG: sleeping function called from invalid context at kernel/locking/mutex.
      Call Trace:
      kernel: dump_stack+0x66/0x90
      kernel: ___might_sleep.cold.92+0x8d/0x9a
      kernel: mutex_lock+0x1c/0x40
      kernel: irdma_cm_teardown_connections+0x28e/0x4d0 [irdma]
      kernel: ? check_preempt_curr+0x7a/0x90
      kernel: ? select_idle_sibling+0x22/0x3c0
      kernel: ? select_task_rq_fair+0x94c/0xc90
      kernel: ? irdma_exec_cqp_cmd+0xc27/0x17c0 [irdma]
      kernel: ? __wake_up_common+0x7a/0x190
      kernel: irdma_if_notify+0x3cc/0x450 [irdma]
      kernel: ? sched_clock_cpu+0xc/0xb0
      kernel: irdma_inet6addr_event+0xc6/0x150 [irdma]
    
    Fixes: 146b9756f14c ("RDMA/irdma: Add connection manager")
    Signed-off-by: Mustafa Ismail <mustafa.ismail@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03fd151bdff0d27dccaf1586a6232c5d4bc82520
Author: Mustafa Ismail <mustafa.ismail@intel.com>
Date:   Tue Jul 5 18:08:36 2022 -0500

    RDMA/irdma: Do not advertise 1GB page size for x722
    
    [ Upstream commit 5e8afb8792f3b6ae7ccf700f8c19225382636401 ]
    
    x722 does not support 1GB page size but the irdma driver incorrectly
    advertises 1GB page size support for x722 device to ib_core to compute the
    best page size to use on this MR.  This could lead to incorrect start
    offsets computed by hardware on the MR.
    
    Fixes: b48c24c2d710 ("RDMA/irdma: Implement device supported verb APIs")
    Signed-off-by: Mustafa Ismail <mustafa.ismail@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71ab83ac65e2d671552374123bf920c1d698335a
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Mon May 23 18:10:09 2022 +0400

    power/reset: arm-versatile: Fix refcount leak in versatile_reboot_probe
    
    [ Upstream commit 80192eff64eee9b3bc0594a47381937b94b9d65a ]
    
    of_find_matching_node_and_match() returns a node pointer with refcount
    incremented, we should use of_node_put() on it when not need anymore.
    Add missing of_node_put() to avoid refcount leak.
    
    Fixes: 0e545f57b708 ("power: reset: driver for the Versatile syscon reboot")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8e32bca0676ac663266a3b16562cb017300adcd
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 1 14:46:25 2022 +0800

    xfrm: xfrm_policy: fix a possible double xfrm_pols_put() in xfrm_bundle_lookup()
    
    [ Upstream commit f85daf0e725358be78dfd208dea5fd665d8cb901 ]
    
    xfrm_policy_lookup() will call xfrm_pol_hold_rcu() to get a refcount of
    pols[0]. This refcount can be dropped in xfrm_expand_policies() when
    xfrm_expand_policies() return error. pols[0]'s refcount is balanced in
    here. But xfrm_bundle_lookup() will also call xfrm_pols_put() with
    num_pols == 1 to drop this refcount when xfrm_expand_policies() return
    error.
    
    This patch also fix an illegal address access. pols[0] will save a error
    point when xfrm_policy_lookup fails. This lead to xfrm_pols_put to resolve
    an illegal address in xfrm_bundle_lookup's error path.
    
    Fix these by setting num_pols = 0 in xfrm_expand_policies()'s error path.
    
    Fixes: 80c802f3073e ("xfrm: cache bundles instead of policies for outgoing flows")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d3eeb199970297305af56686eebf75da5ade7f5
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 13:51:51 2022 -0700

    ip: Fix data-races around sysctl_ip_default_ttl.
    
    commit 8281b7ec5c56b71cb2cc5a1728b41607be66959c upstream.
    
    While reading sysctl_ip_default_ttl, it can be changed concurrently.
    Thus, we need to add READ_ONCE() to its readers.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bf450d92d0c5673ea5a7934083758c579a7fef0
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Mon Jul 18 16:21:20 2022 +0800

    r8152: fix a WOL issue
    
    commit cdf0b86b250fd3c1c3e120c86583ea510c52e4ce upstream.
    
    This fixes that the platform is waked by an unexpected packet. The
    size and range of FIFO is different when the device enters S3 state,
    so it is necessary to correct some settings when suspending.
    
    Regardless of jumbo frame, set RMS to 1522 and MTPS to MTPS_DEFAULT.
    Besides, enable MCU_BORW_EN to update the method of calculating the
    pointer of data. Then, the hardware could get the correct data.
    
    Fixes: 195aae321c82 ("r8152: support new chips")
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Link: https://lore.kernel.org/r/20220718082120.10957-391-nic_swsd@realtek.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44addae95ed747f270fa74c7e90036854203e37b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jul 21 14:36:10 2022 -0700

    xfs: prevent a WARN_ONCE() in xfs_ioc_attr_list()
    
    [ Upstream commit 6ed6356b07714e0198be3bc3ecccc8b40a212de4 ]
    
    The "bufsize" comes from the root user.  If "bufsize" is negative then,
    because of type promotion, neither of the validation checks at the start
    of the function are able to catch it:
    
            if (bufsize < sizeof(struct xfs_attrlist) ||
                bufsize > XFS_XATTR_LIST_MAX)
                    return -EINVAL;
    
    This means "bufsize" will trigger (WARN_ON_ONCE(size > INT_MAX)) in
    kvmalloc_node().  Fix this by changing the type from int to size_t.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1da0b50ea07114fe1fe85ca126f8df1065633d59
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Jul 21 14:36:09 2022 -0700

    xfs: fix perag reference leak on iteration race with growfs
    
    [ Upstream commit 892a666fafa19ab04b5e948f6c92f98f1dafb489 ]
    
    The for_each_perag*() set of macros are hacky in that some (i.e.
    those based on sb_agcount) rely on the assumption that perag
    iteration terminates naturally with a NULL perag at the specified
    end_agno. Others allow for the final AG to have a valid perag and
    require the calling function to clean up any potential leftover
    xfs_perag reference on termination of the loop.
    
    Aside from providing a subtly inconsistent interface, the former
    variant is racy with growfs because growfs can create discoverable
    post-eofs perags before the final superblock update that completes
    the grow operation and increases sb_agcount. This leads to the
    following assert failure (reproduced by xfs/104) in the perag free
    path during unmount:
    
     XFS: Assertion failed: atomic_read(&pag->pag_ref) == 0, file: fs/xfs/libxfs/xfs_ag.c, line: 195
    
    This occurs because one of the many for_each_perag() loops in the
    code that is expected to terminate with a NULL pag (and thus has no
    post-loop xfs_perag_put() check) raced with a growfs and found a
    non-NULL post-EOFS perag, but terminated naturally based on the
    end_agno check without releasing the post-EOFS perag.
    
    Rework the iteration logic to lift the agno check from the main for
    loop conditional to the iteration helper function. The for loop now
    purely terminates on a NULL pag and xfs_perag_next() avoids taking a
    reference to any perag beyond end_agno in the first place.
    
    Fixes: f250eedcf762 ("xfs: make for_each_perag... a first class citizen")
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 768bfde1cf3e436393be175697cf02eb889ab46f
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Jul 21 14:36:08 2022 -0700

    xfs: terminate perag iteration reliably on agcount
    
    [ Upstream commit 8ed004eb9d07a5d6114db3e97a166707c186262d ]
    
    The for_each_perag_from() iteration macro relies on sb_agcount to
    process every perag currently within EOFS from a given starting
    point. It's perfectly valid to have perag structures beyond
    sb_agcount, however, such as if a growfs is in progress. If a perag
    loop happens to race with growfs in this manner, it will actually
    attempt to process the post-EOFS perag where ->pag_agno ==
    sb_agcount. This is reproduced by xfs/104 and manifests as the
    following assert failure in superblock write verifier context:
    
     XFS: Assertion failed: agno < mp->m_sb.sb_agcount, file: fs/xfs/libxfs/xfs_types.c, line: 22
    
    Update the corresponding macro to only process perags that are
    within the current sb_agcount.
    
    Fixes: 58d43a7e3263 ("xfs: pass perags around in fsmap data dev functions")
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2991d51b42a38b730b2309c9e699345892dd56d2
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Jul 21 14:36:07 2022 -0700

    xfs: rename the next_agno perag iteration variable
    
    [ Upstream commit f1788b5e5ee25bedf00bb4d25f82b93820d61189 ]
    
    Rename the next_agno variable to be consistent across the several
    iteration macros and shorten line length.
    
    [backport: dependency for 8ed004eb9d07a5d6114db3e97a166707c186262d]
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d6f22f6cc58affc9803b7030835ff68c6987802
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Jul 21 14:36:06 2022 -0700

    xfs: fold perag loop iteration logic into helper function
    
    [ Upstream commit bf2307b195135ed9c95eebb38920d8bd41843092 ]
    
    Fold the loop iteration logic into a helper in preparation for
    further fixups. No functional change in this patch.
    
    [backport: dependency for f1788b5e5ee25bedf00bb4d25f82b93820d61189]
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67cb74213a5216c4452a78a0dfbb5a3724c1b706
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Jul 21 14:36:05 2022 -0700

    xfs: fix maxlevels comparisons in the btree staging code
    
    [ Upstream commit 78e8ec83a404d63dcc86b251f42e4ee8aff27465 ]
    
    The btree geometry computation function has an off-by-one error in that
    it does not allow maximally tall btrees (nlevels == XFS_BTREE_MAXLEVELS).
    This can result in repairs failing unnecessarily on very fragmented
    filesystems.  Subsequent patches to remove MAXLEVELS usage in favor of
    the per-btree type computations will make this a much more likely
    occurrence.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Chandan Babu R <chandan.babu@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf719adb6fa91d49ef6009d1fab624dc0830ebcd
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Jul 15 12:59:26 2022 -0700

    mt76: mt7921: Fix the error handling path of mt7921_pci_probe()
    
    commit 4e90db5e21eb3bb272fe47386dc3506755e209e9 upstream.
    
    In case of error, some resources must be freed, as already done above and
    below the devm_kmemdup() and __mt7921e_mcu_drv_pmctrl() calls added in the
    commit in Fixes:.
    
    Fixes: 602cc0c9618a ("mt76: mt7921e: fix possible probe failure after reboot")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22b910a7a378108654784c3625361e334553327c
Author: Sean Wang <sean.wang@mediatek.com>
Date:   Fri Jul 15 12:59:25 2022 -0700

    mt76: mt7921e: fix possible probe failure after reboot
    
    commit 602cc0c9618a819ab00ea3c9400742a0ca318380 upstream.
    
    It doesn't guarantee the mt7921e gets started with ASPM L0 after each
    machine reboot on every platform.
    
    If mt7921e gets started with not ASPM L0, it would be possible that the
    driver encounters time to time failure in mt7921_pci_probe, like a
    weird chip identifier is read
    
    [  215.514503] mt7921e 0000:05:00.0: ASIC revision: feed0000
    [  216.604741] mt7921e: probe of 0000:05:00.0 failed with error -110
    
    or failing to init hardware because the driver is not allowed to access the
    register until the device is in ASPM L0 state. So, we call
    __mt7921e_mcu_drv_pmctrl in early mt7921_pci_probe to force the device
    to bring back to the L0 state for we can safely access registers in any
    case.
    
    In the patch, we move all functions from dma.c to pci.c and register mt76
    bus operation earilier, that is the __mt7921e_mcu_drv_pmctrl depends on.
    
    Fixes: bf3747ae2e25 ("mt76: mt7921: enable aspm by default")
    Reported-by: Kai-Chuan Hsieh <kaichuan.hsieh@canonical.com>
    Co-developed-by: Deren Wu <deren.wu@mediatek.com>
    Signed-off-by: Deren Wu <deren.wu@mediatek.com>
    Signed-off-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3bcf1f959f603e1525360523c2fce3a8b7ab3a2
Author: Sean Wang <sean.wang@mediatek.com>
Date:   Fri Jul 15 12:59:24 2022 -0700

    mt76: mt7921: use physical addr to unify register access
    
    commit f1e2eef111018a4f0d280656be4351c37e9e554b upstream.
    
    Use physical address to unify the register access and reorder the
    entries in fixed_map table to accelerate the address lookup for
    MT7921e. Cosmetics the patch with adding an extra space to make all
    entries in the array style consistent.
    
    Tested-by: Deren Wu <deren.wu@mediatek.com>
    Acked-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 191c16f921ad835d2901a630300daebf6379447e
Author: Sean Wang <sean.wang@mediatek.com>
Date:   Fri Jul 15 12:59:23 2022 -0700

    Revert "mt76: mt7921e: fix possible probe failure after reboot"
    
    This reverts commit 649178c0493e4080b2b226b0ef9fa2d834b1b412 that is the
    commit 602cc0c9618a819ab00ea3c9400742a0ca318380 upstream.
    
    Because there was mistake in
    '649178c0493e ("mt76: mt7921e: fix possible probe failure after reboot")'
    that caused WiFi reset cannot work well as the reported issue
    "PROBLEM: [Stable v5.15.42+] [mt7921] Wake after suspend locks up system
    when mt7921-driver is used on a Lenovo ThinkPad E15 G3" described in
    http://lists.infradead.org/pipermail/linux-mediatek/2022-June/042668.html
    So, we need to revert it before fixing and landing it again on the stable
    tree from upstream.
    
    Signed-off-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4666a6eb390c683e346d3ccb7bb8e41ef994afc5
Author: Sean Wang <sean.wang@mediatek.com>
Date:   Fri Jul 15 12:59:22 2022 -0700

    Revert "mt76: mt7921: Fix the error handling path of mt7921_pci_probe()"
    
    This reverts commit 663457f421d41e9d2fcb1e84baf43d1433f80c08 that is the
    commit 44c4237cf3436bda2b185ff728123651ad133f69 upstream.
    
    Because there was mistake in
    '649178c0493e ("mt76: mt7921e: fix possible probe failure after reboot")'
    that caused WiFi reset cannot work well as the reported issue
    "PROBLEM: [Stable v5.15.42+] [mt7921] Wake after suspend locks up system
    when mt7921-driver is used on a Lenovo ThinkPad E15 G3" described in
    http://lists.infradead.org/pipermail/linux-mediatek/2022-June/042668.html
    So we need to revert the patch first to avoid the conflict of reverting
    '649178c0493e ("mt76: mt7921e: fix possible probe failure after reboot")'
    and will be applied back later after fixing.
    
    Signed-off-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cac1c84e1ccdd71924c644f83e24f5ef47d6f7c
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Jul 19 18:08:12 2022 +0200

    batman-adv: Use netif_rx_any_context() any.
    
    This reverts the stable commit
       e65d78b12fbc0 ("batman-adv: Use netif_rx().")
    
    The commit message says:
    
    | Since commit
    |    baebdf48c3600 ("net: dev: Makes sure netif_rx() can be invoked in any context.")
    |
    | the function netif_rx() can be used in preemptible/thread context as
    | well as in interrupt context.
    
    This commit (baebdf48c3600) has not been backported to the 5.15 stable
    series and therefore, the commit which builds upon it, must not be
    backported either.
    
    Revert the backport and use netif_rx_any_context() again.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be56f007c41400f5115e390cab69ff4c464c2370
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Jun 28 12:09:22 2022 +0200

    serial: mvebu-uart: correctly report configured baudrate value
    
    commit 4f532c1e25319e42996ec18a1f473fd50c8e575d upstream.
    
    Functions tty_termios_encode_baud_rate() and uart_update_timeout() should
    be called with the baudrate value which was set to hardware. Linux then
    report exact values via ioctl(TCGETS2) to userspace.
    
    Change mvebu_uart_baud_rate_set() function to return baudrate value which
    was set to hardware and propagate this value to above mentioned functions.
    
    With this change userspace would see precise value in termios c_ospeed
    field.
    
    Fixes: 68a0db1d7da2 ("serial: mvebu-uart: add function to change baudrate")
    Cc: stable <stable@kernel.org>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Link: https://lore.kernel.org/r/20220628100922.10717-1-pali@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92dcb50f7f09971cad1b1cc67ec31756c5b78dec
Author: Jeffrey Hugo <quic_jhugo@quicinc.com>
Date:   Mon Jul 18 15:20:32 2022 +0000

    PCI: hv: Fix interrupt mapping for multi-MSI
    
    commit a2bad844a67b1c7740bda63e87453baf63c3a7f7 upstream.
    
    According to Dexuan, the hypervisor folks beleive that multi-msi
    allocations are not correct.  compose_msi_msg() will allocate multi-msi
    one by one.  However, multi-msi is a block of related MSIs, with alignment
    requirements.  In order for the hypervisor to allocate properly aligned
    and consecutive entries in the IOMMU Interrupt Remapping Table, there
    should be a single mapping request that requests all of the multi-msi
    vectors in one shot.
    
    Dexuan suggests detecting the multi-msi case and composing a single
    request related to the first MSI.  Then for the other MSIs in the same
    block, use the cached information.  This appears to be viable, so do it.
    
    5.15 backport - add hv_msi_get_int_vector helper function. Fixed merge
    conflict due to delivery_mode name change (APIC_DELIVERY_MODE_FIXED
    is the value given to DELIVERY_MODE on x86). Removed unused variable
    in hv_compose_msi_msg. Fixed reference to msi_desc->pci to point to
    the same is_msix variable.
    
    Suggested-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Jeffrey Hugo <quic_jhugo@quicinc.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Tested-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1652282599-21643-1-git-send-email-quic_jhugo@quicinc.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Carl Vanderlip <quic_carlv@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b77425d0ae4cf6338f7841e9e15fa1e61b8c9bf
Author: Jeffrey Hugo <quic_jhugo@quicinc.com>
Date:   Mon Jul 18 15:20:31 2022 +0000

    PCI: hv: Reuse existing IRTE allocation in compose_msi_msg()
    
    commit b4b77778ecc5bfbd4e77de1b2fd5c1dd3c655f1f upstream.
    
    Currently if compose_msi_msg() is called multiple times, it will free any
    previous IRTE allocation, and generate a new allocation.  While nothing
    prevents this from occurring, it is extraneous when Linux could just reuse
    the existing allocation and avoid a bunch of overhead.
    
    However, when future IRTE allocations operate on blocks of MSIs instead of
    a single line, freeing the allocation will impact all of the lines.  This
    could cause an issue where an allocation of N MSIs occurs, then some of
    the lines are retargeted, and finally the allocation is freed/reallocated.
    The freeing of the allocation removes all of the configuration for the
    entire block, which requires all the lines to be retargeted, which might
    not happen since some lines might already be unmasked/active.
    
    Signed-off-by: Jeffrey Hugo <quic_jhugo@quicinc.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Tested-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1652282582-21595-1-git-send-email-quic_jhugo@quicinc.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Carl Vanderlip <quic_carlv@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35d24b115a407c0a1a73900d025da77be2763ed3
Author: Jeffrey Hugo <quic_jhugo@quicinc.com>
Date:   Mon Jul 18 15:20:30 2022 +0000

    PCI: hv: Fix hv_arch_irq_unmask() for multi-MSI
    
    commit 455880dfe292a2bdd3b4ad6a107299fce610e64b upstream.
    
    In the multi-MSI case, hv_arch_irq_unmask() will only operate on the first
    MSI of the N allocated.  This is because only the first msi_desc is cached
    and it is shared by all the MSIs of the multi-MSI block.  This means that
    hv_arch_irq_unmask() gets the correct address, but the wrong data (always
    0).
    
    This can break MSIs.
    
    Lets assume MSI0 is vector 34 on CPU0, and MSI1 is vector 33 on CPU0.
    
    hv_arch_irq_unmask() is called on MSI0.  It uses a hypercall to configure
    the MSI address and data (0) to vector 34 of CPU0.  This is correct.  Then
    hv_arch_irq_unmask is called on MSI1.  It uses another hypercall to
    configure the MSI address and data (0) to vector 33 of CPU0.  This is
    wrong, and results in both MSI0 and MSI1 being routed to vector 33.  Linux
    will observe extra instances of MSI1 and no instances of MSI0 despite the
    endpoint device behaving correctly.
    
    For the multi-MSI case, we need unique address and data info for each MSI,
    but the cached msi_desc does not provide that.  However, that information
    can be gotten from the int_desc cached in the chip_data by
    compose_msi_msg().  Fix the multi-MSI case to use that cached information
    instead.  Since hv_set_msi_entry_from_desc() is no longer applicable,
    remove it.
    
    5.15 backport - no changes to code, but merge conflict due to refactor.
    
    Signed-off-by: Jeffrey Hugo <quic_jhugo@quicinc.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1651068453-29588-1-git-send-email-quic_jhugo@quicinc.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Carl Vanderlip <quic_carlv@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c676a214d6359ef84a673ca791716f8c76555cf
Author: Jeffrey Hugo <quic_jhugo@quicinc.com>
Date:   Mon Jul 18 15:20:29 2022 +0000

    PCI: hv: Fix multi-MSI to allow more than one MSI vector
    
    commit 08e61e861a0e47e5e1a3fb78406afd6b0cea6b6d upstream.
    
    If the allocation of multiple MSI vectors for multi-MSI fails in the core
    PCI framework, the framework will retry the allocation as a single MSI
    vector, assuming that meets the min_vecs specified by the requesting
    driver.
    
    Hyper-V advertises that multi-MSI is supported, but reuses the VECTOR
    domain to implement that for x86.  The VECTOR domain does not support
    multi-MSI, so the alloc will always fail and fallback to a single MSI
    allocation.
    
    In short, Hyper-V advertises a capability it does not implement.
    
    Hyper-V can support multi-MSI because it coordinates with the hypervisor
    to map the MSIs in the IOMMU's interrupt remapper, which is something the
    VECTOR domain does not have.  Therefore the fix is simple - copy what the
    x86 IOMMU drivers (AMD/Intel-IR) do by removing
    X86_IRQ_ALLOC_CONTIGUOUS_VECTORS after calling the VECTOR domain's
    pci_msi_prepare().
    
    5.15 backport - adds the hv_msi_prepare wrapper function
    
    Fixes: 4daace0d8ce8 ("PCI: hv: Add paravirtual PCI front-end for Microsoft Hyper-V VMs")
    Signed-off-by: Jeffrey Hugo <quic_jhugo@quicinc.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Link: https://lore.kernel.org/r/1649856981-14649-1-git-send-email-quic_jhugo@quicinc.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Carl Vanderlip <quic_carlv@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0791309aa0eb2d39c116ff95bab120e53b0c8f94
Author: Oleksandr Tymoshenko <ovt@google.com>
Date:   Fri Jul 15 23:15:42 2022 +0000

    Revert "selftest/vm: verify mmap addr in mremap_test"
    
    This reverts commit e8b9989597daac896b3400b7005f24bf15233d9a.
    
    The upstream commit 9c85a9bae267 ("selftest/vm: verify mmap addr in
    mremap_test") was backported as commit a17404fcbfd0 ("selftest/vm:
    verify mmap addr in mremap_test"). Repeated backport introduced the
    duplicate of function get_mmap_min_addr to the file breakign the vm
    selftest build.
    
    Fixes: e8b9989597da ("selftest/vm: verify mmap addr in mremap_test")
    Signed-off-by: Oleksandr Tymoshenko <ovt@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfd3a9be0ac423be41afcc7a07d708056bf097a8
Author: Oleksandr Tymoshenko <ovt@google.com>
Date:   Fri Jul 15 23:15:41 2022 +0000

    Revert "selftest/vm: verify remap destination address in mremap_test"
    
    This reverts commit 0b4e16093e081a3ab08b0d6cedf79b249f41b248.
    
    The upstream commit 18d609daa546 ("selftest/vm: verify remap destination
    address in mremap_test") was backported as commit 2688d967ec65
    ("selftest/vm: verify remap destination address in mremap_test").
    Repeated backport introduced the duplicate of function
    is_remap_region_valid to the file breakign the vm selftest build.
    
    Fixes: 0b4e16093e08 ("selftest/vm: verify remap destination address in mremap_test")
    Signed-off-by: Oleksandr Tymoshenko <ovt@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7c4f9b8ed62d5e3b1e1e7c520b16567084c8800
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Mon May 2 13:20:36 2022 +0200

    bus: mhi: host: pci_generic: add Telit FN990
    
    commit 77fc41204734042861210b9d05338c9b8360affb upstream.
    
    Add Telit FN990:
    
    01:00.0 Unassigned class [ff00]: Qualcomm Device 0308
            Subsystem: Device 1c5d:2010
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Link: https://lore.kernel.org/r/20220502112036.443618-1-dnlplm@gmail.com
    [mani: Added "host" to the subject]
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Fabio Porcedda <fabio.porcedda@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38b7bbe0ef1daa4f80d9a1685e25338a062867dc
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Wed Apr 27 09:26:48 2022 +0200

    bus: mhi: host: pci_generic: add Telit FN980 v1 hardware revision
    
    commit a96ef8b504efb2ad445dfb6d54f9488c3ddf23d2 upstream.
    
    Add Telit FN980 v1 hardware revision:
    
    01:00.0 Unassigned class [ff00]: Qualcomm Device [17cb:0306]
            Subsystem: Device [1c5d:2000]
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Link: https://lore.kernel.org/r/20220427072648.17635-1-dnlplm@gmail.com
    [mani: Added "host" to the subject]
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Fabio Porcedda <fabio.porcedda@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60e536b0a564eabaeae5fb3ac2f806df95134e78
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Jul 15 09:57:22 2022 +0200

    drm/ttm: fix locking in vmap/vunmap TTM GEM helpers
    
    commit dbd0da2453c694f2f74651834d90fb280b57f151 upstream.
    
    I've stumbled over this while reviewing patches for DMA-buf and it looks
    like we completely messed the locking up here.
    
    In general most TTM function should only be called while holding the
    appropriate BO resv lock. Without this we could break the internal
    buffer object state here.
    
    Only compile tested!
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Fixes: 43676605f890 ("drm/ttm: Add vmap/vunmap to TTM and TTM GEM helpers")
    Cc: stable@vger.kernel.org
    Reviewed-by: Dmitry Osipenko <dmitry.osipenko@collabora.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220715111533.467012-1-christian.koenig@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e66932a9dc9ba47e60405b392e3782a332bc44e
Author: Eric Snowberg <eric.snowberg@oracle.com>
Date:   Wed Jul 20 12:40:27 2022 -0400

    lockdown: Fix kexec lockdown bypass with ima policy
    
    commit 543ce63b664e2c2f9533d089a4664b559c3e6b5b upstream.
    
    The lockdown LSM is primarily used in conjunction with UEFI Secure Boot.
    This LSM may also be used on machines without UEFI.  It can also be
    enabled when UEFI Secure Boot is disabled.  One of lockdown's features
    is to prevent kexec from loading untrusted kernels.  Lockdown can be
    enabled through a bootparam or after the kernel has booted through
    securityfs.
    
    If IMA appraisal is used with the "ima_appraise=log" boot param,
    lockdown can be defeated with kexec on any machine when Secure Boot is
    disabled or unavailable.  IMA prevents setting "ima_appraise=log" from
    the boot param when Secure Boot is enabled, but this does not cover
    cases where lockdown is used without Secure Boot.
    
    To defeat lockdown, boot without Secure Boot and add ima_appraise=log to
    the kernel command line; then:
    
      $ echo "integrity" > /sys/kernel/security/lockdown
      $ echo "appraise func=KEXEC_KERNEL_CHECK appraise_type=imasig" > \
        /sys/kernel/security/ima/policy
      $ kexec -ls unsigned-kernel
    
    Add a call to verify ima appraisal is set to "enforce" whenever lockdown
    is enabled.  This fixes CVE-2022-21505.
    
    Cc: stable@vger.kernel.org
    Fixes: 29d3c1c8dfe7 ("kexec: Allow kexec_file() with appropriate IMA policy when locked down")
    Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
    Acked-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: John Haxby <john.haxby@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25ba5b824a721e2e6c8e93af60419aa211dcc8c8
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Jul 19 15:26:26 2022 +0300

    mlxsw: spectrum_router: Fix IPv4 nexthop gateway indication
    
    commit e5ec6a2513383fe2ecc2ee3b5f51d97acbbcd4d8 upstream.
    
    mlxsw needs to distinguish nexthops with a gateway from connected
    nexthops in order to write the former to the adjacency table of the
    device. The check used to rely on the fact that nexthops with a gateway
    have a 'link' scope whereas connected nexthops have a 'host' scope. This
    is no longer correct after commit 747c14307214 ("ip: fix dflt addr
    selection for connected nexthop").
    
    Fix that by instead checking the address family of the gateway IP. This
    is a more direct way and also consistent with the IPv6 counterpart in
    mlxsw_sp_rt6_is_gateway().
    
    Cc: stable@vger.kernel.org
    Fixes: 747c14307214 ("ip: fix dflt addr selection for connected nexthop")
    Fixes: 597cfe4fc339 ("nexthop: Add support for IPv4 nexthops")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Amit Cohen <amcohen@nvidia.com>
    Reviewed-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73846553bcde89d0eaffd74da8dc19d133c2c467
Author: Ben Dooks <ben.dooks@codethink.co.uk>
Date:   Sun May 29 16:22:00 2022 +0100

    riscv: add as-options for modules with assembly compontents
    
    commit c1f6eff304e4dfa4558b6a8c6b2d26a91db6c998 upstream.
    
    When trying to load modules built for RISC-V which include assembly files
    the kernel loader errors with "unexpected relocation type 'R_RISCV_ALIGN'"
    due to R_RISCV_ALIGN relocations being generated by the assembler.
    
    The R_RISCV_ALIGN relocations can be removed at the expense of code space
    by adding -mno-relax to gcc and as.  In commit 7a8e7da42250138
    ("RISC-V: Fixes to module loading") -mno-relax is added to the build
    variable KBUILD_CFLAGS_MODULE. See [1] for more info.
    
    The issue is that when kbuild builds a .S file, it invokes gcc with
    the -mno-relax flag, but this is not being passed through to the
    assembler. Adding -Wa,-mno-relax to KBUILD_AFLAGS_MODULE ensures that
    the assembler is invoked correctly. This may have now been fixed in
    gcc[2] and this addition should not stop newer gcc and as from working.
    
    [1] https://github.com/riscv/riscv-elf-psabi-doc/issues/183
    [2] https://github.com/gcc-mirror/gcc/commit/3b0a7d624e64eeb81e4d5e8c62c46d86ef521857
    
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Link: https://lore.kernel.org/r/20220529152200.609809-1-ben.dooks@codethink.co.uk
    Fixes: ab1ef68e5401 ("RISC-V: Add sections of PLT and GOT for kernel module")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aff42cea285f94c1c34ffc710622251b1ceed945
Author: Fabien Dessenne <fabien.dessenne@foss.st.com>
Date:   Mon Jun 27 16:23:50 2022 +0200

    pinctrl: stm32: fix optional IRQ support to gpios
    
    commit a1d4ef1adf8bbd302067534ead671a94759687ed upstream.
    
    To act as an interrupt controller, a gpio bank relies on the
    "interrupt-parent" of the pin controller.
    When this optional "interrupt-parent" misses, do not create any IRQ domain.
    
    This fixes a "NULL pointer in stm32_gpio_domain_alloc()" kernel crash when
    the interrupt-parent = <exti> property is not declared in the Device Tree.
    
    Fixes: 0eb9f683336d ("pinctrl: Add IRQ support to STM32 gpios")
    Signed-off-by: Fabien Dessenne <fabien.dessenne@foss.st.com>
    Link: https://lore.kernel.org/r/20220627142350.742973-1-fabien.dessenne@foss.st.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19ff2d645f7a9626146b6b3ba698488d60aa04de
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 14 10:16:53 2023 +0100

    Linux 5.10.163
    
    Link: https://lore.kernel.org/r/20230112135524.143670746@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de4a20e14823475363b36511dbba1fe6c7b754de
Author: Chris Chiu <chris.chiu@canonical.com>
Date:   Tue Jan 3 17:53:32 2023 +0800

    ALSA: hda - Enable headset mic on another Dell laptop with ALC3254
    
    commit a5751933a7f6abbdad90d98f25a25bb4b133a9e6 upstream.
    
    There is another Dell Latitude laptop (1028:0c03) with Realtek
    codec ALC3254 which needs the ALC269_FIXUP_DELL4_MIC_NO_PRESENCE
    instead of the default matched ALC269_FIXUP_DELL1_MIC_NO_PRESENCE.
    Apply correct fixup for this particular model to enable headset mic.
    
    Signed-off-by: Chris Chiu <chris.chiu@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230103095332.730677-1-chris.chiu@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ad275c139a3e992cb420d5df1786526f0552077
Author: Adrian Chan <adchan@google.com>
Date:   Mon Jan 9 16:05:20 2023 -0500

    ALSA: hda/hdmi: Add a HP device 0x8715 to force connect list
    
    commit de1ccb9e61728dd941fe0e955a7a129418657267 upstream.
    
    Add the 'HP Engage Flex Mini' device to the force connect list to
    enable audio through HDMI.
    
    Signed-off-by: Adrian Chan <adchan@google.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230109210520.16060-1-adchan@google.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df02234e6b87d2a9a82acd3198e44bdeff8488c6
Author: Clement Lecigne <clecigne@google.com>
Date:   Fri Jan 13 13:07:45 2023 +0100

    ALSA: pcm: Move rwsem lock inside snd_ctl_elem_read to prevent UAF
    
    [ Note: this is a fix that works around the bug equivalently as the
      two upstream commits:
       1fa4445f9adf ("ALSA: control - introduce snd_ctl_notify_one() helper")
       56b88b50565c ("ALSA: pcm: Move rwsem lock inside snd_ctl_elem_read to prevent UAF")
      but in a simpler way to fit with older stable trees -- tiwai ]
    
    Add missing locking in ctl_elem_read_user/ctl_elem_write_user which can be
    easily triggered and turned into an use-after-free.
    
    Example code paths with SNDRV_CTL_IOCTL_ELEM_READ:
    
    64-bits:
    snd_ctl_ioctl
      snd_ctl_elem_read_user
        [takes controls_rwsem]
        snd_ctl_elem_read [lock properly held, all good]
        [drops controls_rwsem]
    
    32-bits (compat):
    snd_ctl_ioctl_compat
      snd_ctl_elem_write_read_compat
        ctl_elem_write_read
          snd_ctl_elem_read [missing lock, not good]
    
    CVE-2023-0266 was assigned for this issue.
    
    Signed-off-by: Clement Lecigne <clecigne@google.com>
    Cc: stable@kernel.org # 5.12 and older
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8ed0a93b5d576bbaf01639ad816473bdfd1dcb0
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Jan 3 12:19:17 2023 +0100

    net/ulp: prevent ULP without clone op from entering the LISTEN status
    
    commit 2c02d41d71f90a5168391b6a5f2954112ba2307c upstream.
    
    When an ULP-enabled socket enters the LISTEN status, the listener ULP data
    pointer is copied inside the child/accepted sockets by sk_clone_lock().
    
    The relevant ULP can take care of de-duplicating the context pointer via
    the clone() operation, but only MPTCP and SMC implement such op.
    
    Other ULPs may end-up with a double-free at socket disposal time.
    
    We can't simply clear the ULP data at clone time, as TLS replaces the
    socket ops with custom ones assuming a valid TLS ULP context is
    available.
    
    Instead completely prevent clone-less ULP sockets from entering the
    LISTEN status.
    
    Fixes: 734942cc4ea6 ("tcp: ULP infrastructure")
    Reported-by: slipper <slipper.alive@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Link: https://lore.kernel.org/r/4b80c3d1dbe3d0ab072f80450c202d9bc88b4b03.1672740602.git.pabeni@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f7bc28a6b8afc2274e25650511555e93f45470f
Author: Frederick Lawler <fred@cloudflare.com>
Date:   Mon Jan 9 10:39:06 2023 -0600

    net: sched: disallow noqueue for qdisc classes
    
    commit 96398560f26aa07e8f2969d73c8197e6a6d10407 upstream.
    
    While experimenting with applying noqueue to a classful queue discipline,
    we discovered a NULL pointer dereference in the __dev_queue_xmit()
    path that generates a kernel OOPS:
    
        # dev=enp0s5
        # tc qdisc replace dev $dev root handle 1: htb default 1
        # tc class add dev $dev parent 1: classid 1:1 htb rate 10mbit
        # tc qdisc add dev $dev parent 1:1 handle 10: noqueue
        # ping -I $dev -w 1 -c 1 1.1.1.1
    
    [    2.172856] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [    2.173217] #PF: supervisor instruction fetch in kernel mode
    ...
    [    2.178451] Call Trace:
    [    2.178577]  <TASK>
    [    2.178686]  htb_enqueue+0x1c8/0x370
    [    2.178880]  dev_qdisc_enqueue+0x15/0x90
    [    2.179093]  __dev_queue_xmit+0x798/0xd00
    [    2.179305]  ? _raw_write_lock_bh+0xe/0x30
    [    2.179522]  ? __local_bh_enable_ip+0x32/0x70
    [    2.179759]  ? ___neigh_create+0x610/0x840
    [    2.179968]  ? eth_header+0x21/0xc0
    [    2.180144]  ip_finish_output2+0x15e/0x4f0
    [    2.180348]  ? dst_output+0x30/0x30
    [    2.180525]  ip_push_pending_frames+0x9d/0xb0
    [    2.180739]  raw_sendmsg+0x601/0xcb0
    [    2.180916]  ? _raw_spin_trylock+0xe/0x50
    [    2.181112]  ? _raw_spin_unlock_irqrestore+0x16/0x30
    [    2.181354]  ? get_page_from_freelist+0xcd6/0xdf0
    [    2.181594]  ? sock_sendmsg+0x56/0x60
    [    2.181781]  sock_sendmsg+0x56/0x60
    [    2.181958]  __sys_sendto+0xf7/0x160
    [    2.182139]  ? handle_mm_fault+0x6e/0x1d0
    [    2.182366]  ? do_user_addr_fault+0x1e1/0x660
    [    2.182627]  __x64_sys_sendto+0x1b/0x30
    [    2.182881]  do_syscall_64+0x38/0x90
    [    2.183085]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    ...
    [    2.187402]  </TASK>
    
    Previously in commit d66d6c3152e8 ("net: sched: register noqueue
    qdisc"), NULL was set for the noqueue discipline on noqueue init
    so that __dev_queue_xmit() falls through for the noqueue case. This
    also sets a bypass of the enqueue NULL check in the
    register_qdisc() function for the struct noqueue_disc_ops.
    
    Classful queue disciplines make it past the NULL check in
    __dev_queue_xmit() because the discipline is set to htb (in this case),
    and then in the call to __dev_xmit_skb(), it calls into htb_enqueue()
    which grabs a leaf node for a class and then calls qdisc_enqueue() by
    passing in a queue discipline which assumes ->enqueue() is not set to NULL.
    
    Fix this by not allowing classes to be assigned to the noqueue
    discipline. Linux TC Notes states that classes cannot be set to
    the noqueue discipline. [1] Let's enforce that here.
    
    Links:
    1. https://linux-tc-notes.sourceforge.net/tc/doc/sch_noqueue.txt
    
    Fixes: d66d6c3152e8 ("net: sched: register noqueue qdisc")
    Cc: stable@vger.kernel.org
    Signed-off-by: Frederick Lawler <fred@cloudflare.com>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Link: https://lore.kernel.org/r/20230109163906.706000-1-fred@cloudflare.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eb02c596ec02e5897ae377e065cb7df55337a96
Author: Mat Martineau <mathew.j.martineau@linux.intel.com>
Date:   Fri Jan 6 17:46:31 2023 -0800

    mptcp: use proper req destructor for IPv6
    
    From: Matthieu Baerts <matthieu.baerts@tessares.net>
    
    commit d3295fee3c756ece33ac0d935e172e68c0a4161b upstream.
    
    Before, only the destructor from TCP request sock in IPv4 was called
    even if the subflow was IPv6.
    
    It is important to use the right destructor to avoid memory leaks with
    some advanced IPv6 features, e.g. when the request socks contain
    specific IPv6 options.
    
    Fixes: 79c0949e9a09 ("mptcp: Add key generation and token tree")
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Cc: stable@vger.kernel.org # 5.10
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4c7afa951eaa1f87a904bba84258b315814b376
Author: Mat Martineau <mathew.j.martineau@linux.intel.com>
Date:   Fri Jan 6 17:46:30 2023 -0800

    mptcp: dedicated request sock for subflow in v6
    
    From: Matthieu Baerts <matthieu.baerts@tessares.net>
    
    commit 34b21d1ddc8ace77a8fa35c1b1e06377209e0dae upstream.
    
    tcp_request_sock_ops structure is specific to IPv4. It should then not
    be used with MPTCP subflows on top of IPv6.
    
    For example, it contains the 'family' field, initialised to AF_INET.
    This 'family' field is used by TCP FastOpen code to generate the cookie
    but also by TCP Metrics, SELinux and SYN Cookies. Using the wrong family
    will not lead to crashes but displaying/using/checking wrong things.
    
    Note that 'send_reset' callback from request_sock_ops structure is used
    in some error paths. It is then also important to use the correct one
    for IPv4 or IPv6.
    
    The slab name can also be different in IPv4 and IPv6, it will be used
    when printing some log messages. The slab pointer will anyway be the
    same because the object size is the same for both v4 and v6. A
    BUILD_BUG_ON() has also been added to make sure this size is the same.
    
    Fixes: cec37a6e41aa ("mptcp: Handle MP_CAPABLE options for outgoing connections")
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Cc: stable@vger.kernel.org # 5.10
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31472f94c68f5d9ebdd3432544044a9c27ea39d9
Author: Mat Martineau <mathew.j.martineau@linux.intel.com>
Date:   Fri Jan 6 17:46:29 2023 -0800

    mptcp: remove MPTCP 'ifdef' in TCP SYN cookies
    
    From: Matthieu Baerts <matthieu.baerts@tessares.net>
    
    commit 3fff88186f047627bb128d65155f42517f8e448f upstream.
    
    To ease the maintenance, it is often recommended to avoid having #ifdef
    preprocessor conditions.
    
    Here the section related to CONFIG_MPTCP was quite short but the next
    commit needs to add more code around. It is then cleaner to move
    specific MPTCP code to functions located in net/mptcp directory.
    
    Now that mptcp_subflow_request_sock_ops structure can be static, it can
    also be marked as "read only after init".
    
    Suggested-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Cc: stable@vger.kernel.org # 5.10
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aa15a8400cc3f05e7884975f29fa0c1f9362f2e
Author: Mat Martineau <mathew.j.martineau@linux.intel.com>
Date:   Fri Jan 6 17:46:28 2023 -0800

    mptcp: mark ops structures as ro_after_init
    
    From: Florian Westphal <fw@strlen.de>
    
    commit 51fa7f8ebf0e25c7a9039fa3988a623d5f3855aa upstream.
    
    These structures are initialised from the init hooks, so we can't make
    them 'const'.  But no writes occur afterwards, so we can use ro_after_init.
    
    Also, remove bogus EXPORT_SYMBOL, the only access comes from ip
    stack, not from kernel modules.
    
    Cc: stable@vger.kernel.org # 5.10
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5ef26276bb077e3da7a629e0c42875fa3e41911
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Fri Dec 23 13:23:54 2022 +0900

    serial: fixup backport of "serial: Deassert Transmit Enable on probe in driver-specific way"
    
    When 7c7f9bc986e6 ("serial: Deassert Transmit Enable on probe in
    driver-specific way") got backported to 5.10.y, there known as
    26a2b9c468de, some hunks were accidentally left out.
    
    In serial_core.c, it is possible that the omission in
    uart_suspend_port() is harmless, but the backport did have the
    corresponding hunk in uart_resume_port(), it runs counter to the
    original commit's intention of
    
      Skip any invocation of ->set_mctrl() if RS485 is enabled.
    
    and it's certainly better to be aligned with upstream.
    
    Link: https://lkml.kernel.org/r/20221222114414.1886632-1-linux@rasmusvillemoes.dk
    Fixes: 26a2b9c468de ("serial: Deassert Transmit Enable on probe in driver-specific way")
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    [the fsl_lpuart part of the 5.15 patch is not required on 5.10,
    because the code before 26a2b9c468de was incorrectly not calling
    uart_remove_one_port on failed_get_rs485]
    Signed-off-by: Dominique Martinet <dominique.martinet@atmark-techno.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ecf0819e441c074e18c543bcdb8a6f48cc98d3f
Author: Indan Zupancic <Indan.Zupancic@mep-info.com>
Date:   Thu May 5 13:47:50 2022 +0200

    fsl_lpuart: Don't enable interrupts too early
    
    commit 401fb66a355eb0f22096cf26864324f8e63c7d78 upstream.
    
    If an irq is pending when devm_request_irq() is called, the irq
    handler will cause a NULL pointer access because initialisation
    is not done yet.
    
    Fixes: 9d7ee0e28da59 ("tty: serial: lpuart: avoid report NULL interrupt")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Indan Zupancic <Indan.Zupancic@mep-info.com>
    Link: https://lore.kernel.org/r/20220505114750.45423-1-Indan.Zupancic@mep-info.com
    [5.10 did not have lpuart_global_reset or anything after
    uart_add_one_port(), so add the remove call in cleanup manually]
    Signed-off-by: Dominique Martinet <dominique.martinet@atmark-techno.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23ad034760dd38e12b0e0e1b28b9629f330810a1
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:36 2022 -0800

    ext4: don't set up encryption key during jbd2 transaction
    
    commit 4c0d5778385cb3618ff26a561ce41de2b7d9de70 upstream.
    
    Commit a80f7fcf1867 ("ext4: fixup ext4_fc_track_* functions' signature")
    extended the scope of the transaction in ext4_unlink() too far, making
    it include the call to ext4_find_entry().  However, ext4_find_entry()
    can deadlock when called from within a transaction because it may need
    to set up the directory's encryption key.
    
    Fix this by restoring the transaction to its original scope.
    
    Reported-by: syzbot+1a748d0007eeac3ab079@syzkaller.appspotmail.com
    Fixes: a80f7fcf1867 ("ext4: fixup ext4_fc_track_* functions' signature")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-3-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9ff5ad203b603164ea43de60bb3d5c5e8ce5792
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:35 2022 -0800

    ext4: disable fast-commit of encrypted dir operations
    
    commit 0fbcb5251fc81b58969b272c4fb7374a7b922e3e upstream.
    
    fast-commit of create, link, and unlink operations in encrypted
    directories is completely broken because the unencrypted filenames are
    being written to the fast-commit journal instead of the encrypted
    filenames.  These operations can't be replayed, as encryption keys
    aren't present at journal replay time.  It is also an information leak.
    
    Until if/when we can get this working properly, make encrypted directory
    operations ineligible for fast-commit.
    
    Note that fast-commit operations on encrypted regular files continue to
    be allowed, as they seem to work.
    
    Fixes: aa75f4d3daae ("ext4: main fast-commit commit path")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-2-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b700b9c0402b7040e6028536280600bba03182f
Author: Helge Deller <deller@gmx.de>
Date:   Sun Dec 11 19:50:20 2022 +0100

    parisc: Align parisc MADV_XXX constants with all other architectures
    
    commit 71bdea6f798b425bc0003780b13e3fdecb16a010 upstream.
    
    Adjust some MADV_XXX constants to be in sync what their values are on
    all other platforms. There is currently no reason to have an own
    numbering on parisc, but it requires workarounds in many userspace
    sources (e.g. glibc, qemu, ...) - which are often forgotten and thus
    introduce bugs and different behaviour on parisc.
    
    A wrapper avoids an ABI breakage for existing userspace applications by
    translating any old values to the new ones, so this change allows us to
    move over all programs to the new ABI over time.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07b3672c4090d1e8147b1ae9c2546d8a8d8e13ae
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Tue Jan 10 08:46:47 2023 -0800

    io_uring: Fix unsigned 'res' comparison with zero in io_fixup_rw_res()
    
    Smatch warning: io_fixup_rw_res() warn:
            unsigned 'res' is never less than zero.
    
    Change type of 'res' from unsigned to long.
    
    Fixes: d6b7efc722a2 ("io_uring/rw: fix error'ed retry return values")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b57d7b1dcda15c7b9a4722405566c387a7047a40
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Oct 20 10:39:10 2022 +0200

    efi: random: combine bootloader provided RNG seed with RNG protocol output
    
    commit 196dff2712ca5a2e651977bb2fe6b05474111a83 upstream.
    
    Instead of blindly creating the EFI random seed configuration table if
    the RNG protocol is implemented and works, check whether such a EFI
    configuration table was provided by an earlier boot stage and if so,
    concatenate the existing and the new seeds, leaving it up to the core
    code to mix it in and credit it the way it sees fit.
    
    This can be used for, e.g., systemd-boot, to pass an additional seed to
    Linux in a way that can be consumed by the kernel very early. In that
    case, the following definitions should be used to pass the seed to the
    EFI stub:
    
    struct linux_efi_random_seed {
          u32     size; // of the 'seed' array in bytes
          u8      seed[];
    };
    
    The memory for the struct must be allocated as EFI_ACPI_RECLAIM_MEMORY
    pool memory, and the address of the struct in memory should be installed
    as a EFI configuration table using the following GUID:
    
    LINUX_EFI_RANDOM_SEED_TABLE_GUID        1ce1e5bc-7ceb-42f2-81e5-8aadf180f57b
    
    Note that doing so is safe even on kernels that were built without this
    patch applied, but the seed will simply be overwritten with a seed
    derived from the EFI RNG protocol, if available. The recommended seed
    size is 32 bytes, and seeds larger than 512 bytes are considered
    corrupted and ignored entirely.
    
    In order to preserve forward secrecy, seeds from previous bootloaders
    are memzero'd out, and in order to preserve memory, those older seeds
    are also freed from memory. Freeing from memory without first memzeroing
    is not safe to do, as it's possible that nothing else will ever
    overwrite those pages used by EFI.
    
    Reviewed-by: Jason A. Donenfeld <Jason@zx2c4.com>
    [ardb: incorporate Jason's followup changes to extend the maximum seed
           size on the consumer end, memzero() it and drop a needless printk]
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da20f56a3532d7f407a6c7028d795381cdcff14e
Author: Jan Kara <jack@suse.cz>
Date:   Thu Sep 8 11:10:32 2022 +0200

    mbcache: Avoid nesting of cache->c_list_lock under bit locks
    
    commit 5fc4cbd9fde5d4630494fd6ffc884148fb618087 upstream.
    
    Commit 307af6c87937 ("mbcache: automatically delete entries from cache
    on freeing") started nesting cache->c_list_lock under the bit locks
    protecting hash buckets of the mbcache hash table in
    mb_cache_entry_create(). This causes problems for real-time kernels
    because there spinlocks are sleeping locks while bitlocks stay atomic.
    Luckily the nesting is easy to avoid by holding entry reference until
    the entry is added to the LRU list. This makes sure we cannot race with
    entry deletion.
    
    Cc: stable@kernel.org
    Fixes: 307af6c87937 ("mbcache: automatically delete entries from cache on freeing")
    Reported-by: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220908091032.10513-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be01f35efa876eb81cebab2cb0add068b7280ef4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jan 4 11:06:28 2023 -0800

    hfs/hfsplus: avoid WARN_ON() for sanity check, use proper error handling
    
    commit cb7a95af78d29442b8294683eca4897544b8ef46 upstream.
    
    Commit 55d1cbbbb29e ("hfs/hfsplus: use WARN_ON for sanity check") fixed
    a build warning by turning a comment into a WARN_ON(), but it turns out
    that syzbot then complains because it can trigger said warning with a
    corrupted hfs image.
    
    The warning actually does warn about a bad situation, but we are much
    better off just handling it as the error it is.  So rather than warn
    about us doing bad things, stop doing the bad things and return -EIO.
    
    While at it, also fix a memory leak that was introduced by an earlier
    fix for a similar syzbot warning situation, and add a check for one case
    that historically wasn't handled at all (ie neither comment nor
    subsequent WARN_ON).
    
    Reported-by: syzbot+7bb7cd3595533513a9e7@syzkaller.appspotmail.com
    Fixes: 55d1cbbbb29e ("hfs/hfsplus: use WARN_ON for sanity check")
    Fixes: 8d824e69d9f3 ("hfs: fix OOB Read in __hfs_brec_find")
    Link: https://lore.kernel.org/lkml/000000000000dbce4e05f170f289@google.com/
    Tested-by: Michael Schmitz <schmitzmic@gmail.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Viacheslav Dubeyko <slava@dubeyko.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f881d9201f6e0a917004a14329f9ff3d0bfa1e5
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 8 18:35:04 2021 -0800

    hfs/hfsplus: use WARN_ON for sanity check
    
    commit 55d1cbbbb29e6656c662ee8f73ba1fc4777532eb upstream.
    
    gcc warns about a couple of instances in which a sanity check exists but
    the author wasn't sure how to react to it failing, which makes it look
    like a possible bug:
    
      fs/hfsplus/inode.c: In function 'hfsplus_cat_read_inode':
      fs/hfsplus/inode.c:503:37: error: suggest braces around empty body in an 'if' statement [-Werror=empty-body]
        503 |                         /* panic? */;
            |                                     ^
      fs/hfsplus/inode.c:524:37: error: suggest braces around empty body in an 'if' statement [-Werror=empty-body]
        524 |                         /* panic? */;
            |                                     ^
      fs/hfsplus/inode.c: In function 'hfsplus_cat_write_inode':
      fs/hfsplus/inode.c:582:37: error: suggest braces around empty body in an 'if' statement [-Werror=empty-body]
        582 |                         /* panic? */;
            |                                     ^
      fs/hfsplus/inode.c:608:37: error: suggest braces around empty body in an 'if' statement [-Werror=empty-body]
        608 |                         /* panic? */;
            |                                     ^
      fs/hfs/inode.c: In function 'hfs_write_inode':
      fs/hfs/inode.c:464:37: error: suggest braces around empty body in an 'if' statement [-Werror=empty-body]
        464 |                         /* panic? */;
            |                                     ^
      fs/hfs/inode.c:485:37: error: suggest braces around empty body in an 'if' statement [-Werror=empty-body]
        485 |                         /* panic? */;
            |                                     ^
    
    panic() is probably not the correct choice here, but a WARN_ON
    seems appropriate and avoids the compile-time warning.
    
    Link: https://lkml.kernel.org/r/20210927102149.1809384-1-arnd@kernel.org
    Link: https://lore.kernel.org/all/20210322223249.2632268-1-arnd@kernel.org/
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 434909edcae3eedf5c28f99daaaa05b5c2670ede
Author: Muhammad Usama Anjum <usama.anjum@collabora.com>
Date:   Wed Jan 19 15:15:22 2022 +0500

    selftests: set the BUILD variable to absolute path
    
    commit 5ad51ab618de5d05f4e692ebabeb6fe6289aaa57 upstream.
    
    The build of kselftests fails if relative path is specified through
    KBUILD_OUTPUT or O=<path> method. BUILD variable is used to determine
    the path of the output objects. When make is run from other directories
    with relative paths, the exact path of the build objects is ambiguous
    and build fails.
    
            make[1]: Entering directory '/home/usama/repos/kernel/linux_mainline2/tools/testing/selftests/alsa'
            gcc     mixer-test.c -L/usr/lib/x86_64-linux-gnu -lasound  -o build/kselftest/alsa/mixer-test
            /usr/bin/ld: cannot open output file build/kselftest/alsa/mixer-test
    
    Set the BUILD variable to the absolute path of the output directory.
    Make the logic readable and easy to follow. Use spaces instead of tabs
    for indentation as if with tab indentation is considered recipe in make.
    
    Signed-off-by: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Tyler Hicks (Microsoft) <code@tyhicks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a41d63f2047169ff05c3225ff6a8da5f0df141dc
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Nov 1 22:33:12 2022 -0700

    ext4: don't allow journal inode to have encrypt flag
    
    commit 105c78e12468413e426625831faa7db4284e1fec upstream.
    
    Mounting a filesystem whose journal inode has the encrypt flag causes a
    NULL dereference in fscrypt_limit_io_blocks() when the 'inlinecrypt'
    mount option is used.
    
    The problem is that when jbd2_journal_init_inode() calls bmap(), it
    eventually finds its way into ext4_iomap_begin(), which calls
    fscrypt_limit_io_blocks().  fscrypt_limit_io_blocks() requires that if
    the inode is encrypted, then its encryption key must already be set up.
    That's not the case here, since the journal inode is never "opened" like
    a normal file would be.  Hence the crash.
    
    A reproducer is:
    
        mkfs.ext4 -F /dev/vdb
        debugfs -w /dev/vdb -R "set_inode_field <8> flags 0x80808"
        mount /dev/vdb /mnt -o inlinecrypt
    
    To fix this, make ext4 consider journal inodes with the encrypt flag to
    be invalid.  (Note, maybe other flags should be rejected on the journal
    inode too.  For now, this is just the minimal fix for the above issue.)
    
    I've marked this as fixing the commit that introduced the call to
    fscrypt_limit_io_blocks(), since that's what made an actual crash start
    being possible.  But this fix could be applied to any version of ext4
    that supports the encrypt feature.
    
    Reported-by: syzbot+ba9dac45bc76c490b7c3@syzkaller.appspotmail.com
    Fixes: 38ea50daa7a4 ("ext4: support direct I/O with fscrypt using blk-crypto")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221102053312.189962-1-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af90f8b36d78544433a48a3eda6a5faeafacd0a1
Author: Zhenyu Wang <zhenyuw@linux.intel.com>
Date:   Mon Dec 19 22:03:57 2022 +0800

    drm/i915/gvt: fix vgpu debugfs clean in remove
    
    commit 704f3384f322b40ba24d958473edfb1c9750c8fd upstream.
    
    Check carefully on root debugfs available when destroying vgpu,
    e.g in remove case drm minor's debugfs root might already be destroyed,
    which led to kernel oops like below.
    
    Console: switching to colour dummy device 80x25
    i915 0000:00:02.0: MDEV: Unregistering
    intel_vgpu_mdev b1338b2d-a709-4c23-b766-cc436c36cdf0: Removing from iommu group 14
    BUG: kernel NULL pointer dereference, address: 0000000000000150
    PGD 0 P4D 0
    Oops: 0000 [#1] PREEMPT SMP
    CPU: 3 PID: 1046 Comm: driverctl Not tainted 6.1.0-rc2+ #6
    Hardware name: HP HP ProDesk 600 G3 MT/829D, BIOS P02 Ver. 02.44 09/13/2022
    RIP: 0010:__lock_acquire+0x5e2/0x1f90
    Code: 87 ad 09 00 00 39 05 e1 1e cc 02 0f 82 f1 09 00 00 ba 01 00 00 00 48 83 c4 48 89 d0 5b 5d 41 5c 41 5d 41 5e 41 5f c3 45 31 ff <48> 81 3f 60 9e c2 b6 45 0f 45 f8 83 fe 01 0f 87 55 fa ff ff 89 f0
    RSP: 0018:ffff9f770274f948 EFLAGS: 00010046
    RAX: 0000000000000003 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000150
    RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000
    R10: ffff8895d1173300 R11: 0000000000000001 R12: 0000000000000000
    R13: 0000000000000150 R14: 0000000000000000 R15: 0000000000000000
    FS:  00007fc9b2ba0740(0000) GS:ffff889cdfcc0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000150 CR3: 000000010fd93005 CR4: 00000000003706e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     lock_acquire+0xbf/0x2b0
     ? simple_recursive_removal+0xa5/0x2b0
     ? lock_release+0x13d/0x2d0
     down_write+0x2a/0xd0
     ? simple_recursive_removal+0xa5/0x2b0
     simple_recursive_removal+0xa5/0x2b0
     ? start_creating.part.0+0x110/0x110
     ? _raw_spin_unlock+0x29/0x40
     debugfs_remove+0x40/0x60
     intel_gvt_debugfs_remove_vgpu+0x15/0x30 [kvmgt]
     intel_gvt_destroy_vgpu+0x60/0x100 [kvmgt]
     intel_vgpu_release_dev+0xe/0x20 [kvmgt]
     device_release+0x30/0x80
     kobject_put+0x79/0x1b0
     device_release_driver_internal+0x1b8/0x230
     bus_remove_device+0xec/0x160
     device_del+0x189/0x400
     ? up_write+0x9c/0x1b0
     ? mdev_device_remove_common+0x60/0x60 [mdev]
     mdev_device_remove_common+0x22/0x60 [mdev]
     mdev_device_remove_cb+0x17/0x20 [mdev]
     device_for_each_child+0x56/0x80
     mdev_unregister_parent+0x5a/0x81 [mdev]
     intel_gvt_clean_device+0x2d/0xe0 [kvmgt]
     intel_gvt_driver_remove+0x2e/0xb0 [i915]
     i915_driver_remove+0xac/0x100 [i915]
     i915_pci_remove+0x1a/0x30 [i915]
     pci_device_remove+0x31/0xa0
     device_release_driver_internal+0x1b8/0x230
     unbind_store+0xd8/0x100
     kernfs_fop_write_iter+0x156/0x210
     vfs_write+0x236/0x4a0
     ksys_write+0x61/0xd0
     do_syscall_64+0x55/0x80
     ? find_held_lock+0x2b/0x80
     ? lock_release+0x13d/0x2d0
     ? up_read+0x17/0x20
     ? lock_is_held_type+0xe3/0x140
     ? asm_exc_page_fault+0x22/0x30
     ? lockdep_hardirqs_on+0x7d/0x100
     entry_SYSCALL_64_after_hwframe+0x46/0xb0
    RIP: 0033:0x7fc9b2c9e0c4
    Code: 15 71 7d 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 00 f3 0f 1e fa 80 3d 3d 05 0e 00 00 74 13 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 c3 0f 1f 00 48 83 ec 28 48 89 54 24 18 48
    RSP: 002b:00007ffec29c81c8 EFLAGS: 00000202 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 000000000000000d RCX: 00007fc9b2c9e0c4
    RDX: 000000000000000d RSI: 0000559f8b5f48a0 RDI: 0000000000000001
    RBP: 0000559f8b5f48a0 R08: 0000559f8b5f3540 R09: 00007fc9b2d76d30
    R10: 0000000000000000 R11: 0000000000000202 R12: 000000000000000d
    R13: 00007fc9b2d77780 R14: 000000000000000d R15: 00007fc9b2d72a00
     </TASK>
    Modules linked in: sunrpc intel_rapl_msr intel_rapl_common intel_pmc_core_pltdrv intel_pmc_core intel_tcc_cooling x86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel ee1004 igbvf rapl vfat fat intel_cstate intel_uncore pktcdvd i2c_i801 pcspkr wmi_bmof i2c_smbus acpi_pad vfio_pci vfio_pci_core vfio_virqfd zram fuse dm_multipath kvmgt mdev vfio_iommu_type1 vfio kvm irqbypass i915 nvme e1000e igb nvme_core crct10dif_pclmul crc32_pclmul crc32c_intel polyval_clmulni polyval_generic serio_raw ghash_clmulni_intel sha512_ssse3 dca drm_buddy intel_gtt video wmi drm_display_helper ttm
    CR2: 0000000000000150
    ---[ end trace 0000000000000000 ]---
    
    Cc: Wang Zhi <zhi.a.wang@intel.com>
    Cc: He Yu <yu.he@intel.com>
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Zhi Wang <zhi.a.wang@intel.com>
    Tested-by: Yu He <yu.he@intel.com>
    Fixes: bc7b0be316ae ("drm/i915/gvt: Add basic debugfs infrastructure")
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20221219140357.769557-2-zhenyuw@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb7c7b2c89d2feb347b6f9bffc1c75987adb1048
Author: Zhenyu Wang <zhenyuw@linux.intel.com>
Date:   Mon Dec 19 22:03:56 2022 +0800

    drm/i915/gvt: fix gvt debugfs destroy
    
    commit c4b850d1f448a901fbf4f7f36dec38c84009b489 upstream.
    
    When gvt debug fs is destroyed, need to have a sane check if drm
    minor's debugfs root is still available or not, otherwise in case like
    device remove through unbinding, drm minor's debugfs directory has
    already been removed, then intel_gvt_debugfs_clean() would act upon
    dangling pointer like below oops.
    
    i915 0000:00:02.0: Direct firmware load for i915/gvt/vid_0x8086_did_0x1926_rid_0x0a.golden_hw_state failed with error -2
    i915 0000:00:02.0: MDEV: Registered
    Console: switching to colour dummy device 80x25
    i915 0000:00:02.0: MDEV: Unregistering
    BUG: kernel NULL pointer dereference, address: 00000000000000a0
    PGD 0 P4D 0
    Oops: 0002 [#1] PREEMPT SMP PTI
    CPU: 2 PID: 2486 Comm: gfx-unbind.sh Tainted: G          I        6.1.0-rc8+ #15
    Hardware name: Dell Inc. XPS 13 9350/0JXC1H, BIOS 1.13.0 02/10/2020
    RIP: 0010:down_write+0x1f/0x90
    Code: 1d ff ff 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 53 48 89 fb e8 62 c0 ff ff bf 01 00 00 00 e8 28 5e 31 ff 31 c0 ba 01 00 00 00 <f0> 48 0f b1 13 75 33 65 48 8b 04 25 c0 bd 01 00 48 89 43 08 bf 01
    RSP: 0018:ffff9eb3036ffcc8 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 00000000000000a0 RCX: ffffff8100000000
    RDX: 0000000000000001 RSI: 0000000000000064 RDI: ffffffffa48787a8
    RBP: ffff9eb3036ffd30 R08: ffffeb1fc45a0608 R09: ffffeb1fc45a05c0
    R10: 0000000000000002 R11: 0000000000000000 R12: 0000000000000000
    R13: ffff91acc33fa328 R14: ffff91acc033f080 R15: ffff91acced533e0
    FS:  00007f6947bba740(0000) GS:ffff91ae36d00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000000000a0 CR3: 00000001133a2002 CR4: 00000000003706e0
    Call Trace:
     <TASK>
     simple_recursive_removal+0x9f/0x2a0
     ? start_creating.part.0+0x120/0x120
     ? _raw_spin_lock+0x13/0x40
     debugfs_remove+0x40/0x60
     intel_gvt_debugfs_clean+0x15/0x30 [kvmgt]
     intel_gvt_clean_device+0x49/0xe0 [kvmgt]
     intel_gvt_driver_remove+0x2f/0xb0
     i915_driver_remove+0xa4/0xf0
     i915_pci_remove+0x1a/0x30
     pci_device_remove+0x33/0xa0
     device_release_driver_internal+0x1b2/0x230
     unbind_store+0xe0/0x110
     kernfs_fop_write_iter+0x11b/0x1f0
     vfs_write+0x203/0x3d0
     ksys_write+0x63/0xe0
     do_syscall_64+0x37/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f6947cb5190
    Code: 40 00 48 8b 15 71 9c 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 00 80 3d 51 24 0e 00 00 74 17 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 58 c3 0f 1f 80 00 00 00 00 48 83 ec 28 48 89
    RSP: 002b:00007ffcbac45a28 EFLAGS: 00000202 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 000000000000000d RCX: 00007f6947cb5190
    RDX: 000000000000000d RSI: 0000555e35c866a0 RDI: 0000000000000001
    RBP: 0000555e35c866a0 R08: 0000000000000002 R09: 0000555e358cb97c
    R10: 0000000000000000 R11: 0000000000000202 R12: 0000000000000001
    R13: 000000000000000d R14: 0000000000000000 R15: 0000555e358cb8e0
     </TASK>
    Modules linked in: kvmgt
    CR2: 00000000000000a0
    ---[ end trace 0000000000000000 ]---
    
    Cc: Wang, Zhi <zhi.a.wang@intel.com>
    Cc: He, Yu <yu.he@intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Zhi Wang <zhi.a.wang@intel.com>
    Fixes: bc7b0be316ae ("drm/i915/gvt: Add basic debugfs infrastructure")
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20221219140357.769557-1-zhenyuw@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc847857fbd8973b7e106b9abd920e409a051aae
Author: Ben Dooks <ben-linux@fluff.org>
Date:   Thu Dec 29 17:05:45 2022 +0000

    riscv: uaccess: fix type of 0 variable on error in get_user()
    
    commit b9b916aee6715cd7f3318af6dc360c4729417b94 upstream.
    
    If the get_user(x, ptr) has x as a pointer, then the setting
    of (x) = 0 is going to produce the following sparse warning,
    so fix this by forcing the type of 'x' when access_ok() fails.
    
    fs/aio.c:2073:21: warning: Using plain integer as NULL pointer
    
    Signed-off-by: Ben Dooks <ben-linux@fluff.org>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Link: https://lore.kernel.org/r/20221229170545.718264-1-ben-linux@fluff.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f64e56fb285a4684d287e5325e930e3fce312326
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Mon Jan 2 14:57:30 2023 +0100

    fbdev: matroxfb: G200eW: Increase max memory from 1 MB to 16 MB
    
    commit f685dd7a8025f2554f73748cfdb8143a21fb92c7 upstream.
    
    Commit 62d89a7d49af ("video: fbdev: matroxfb: set maxvram of vbG200eW to
    the same as vbG200 to avoid black screen") accidently decreases the
    maximum memory size for the Matrox G200eW (102b:0532) from 8 MB to 1 MB
    by missing one zero. This caused the driver initialization to fail with
    the messages below, as the minimum required VRAM size is 2 MB:
    
         [    9.436420] matroxfb: Matrox MGA-G200eW (PCI) detected
         [    9.444502] matroxfb: cannot determine memory size
         [    9.449316] matroxfb: probe of 0000:0a:03.0 failed with error -1
    
    So, add the missing 0 to make it the intended 16 MB. Successfully tested on
    the Dell PowerEdge R910/0KYD3D, BIOS 2.10.0 08/29/2013, that the warning is
    gone.
    
    While at it, add a leading 0 to the maxdisplayable entry, so it’s aligned
    properly. The value could probably also be increased from 8 MB to 16 MB, as
    the G200 uses the same values, but I have not checked any datasheet.
    
    Note, matroxfb is obsolete and superseded by the maintained DRM driver
    mga200, which is used by default on most systems where both drivers are
    available. Therefore, on most systems it was only a cosmetic issue.
    
    Fixes: 62d89a7d49af ("video: fbdev: matroxfb: set maxvram of vbG200eW to the same as vbG200 to avoid black screen")
    Link: https://lore.kernel.org/linux-fbdev/972999d3-b75d-5680-fcef-6e6905c52ac5@suse.de/T/#mb6953a9995ebd18acc8552f99d6db39787aec775
    Cc: it+linux-fbdev@molgen.mpg.de
    Cc: Z. Liu <liuzx@knownsec.com>
    Cc: Rich Felker <dalias@libc.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0c46b55d6d9962f532a0fd8af38272e5ce15927
Author: Jeff Layton <jlayton@kernel.org>
Date:   Tue Dec 13 13:08:26 2022 -0500

    nfsd: fix handling of readdir in v4root vs. mount upcall timeout
    
    commit cad853374d85fe678d721512cecfabd7636e51f3 upstream.
    
    If v4 READDIR operation hits a mountpoint and gets back an error,
    then it will include that entry in the reply and set RDATTR_ERROR for it
    to the error.
    
    That's fine for "normal" exported filesystems, but on the v4root, we
    need to be more careful to only expose the existence of dentries that
    lead to exports.
    
    If the mountd upcall times out while checking to see whether a
    mountpoint on the v4root is exported, then we have no recourse other
    than to fail the whole operation.
    
    Cc: Steve Dickson <steved@redhat.com>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216777
    Reported-by: JianHong Yin <yin-jianhong@163.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67e39c4f4cb318cfbbf8982ab016c649ed97edaf
Author: Rodrigo Branco <bsdaemon@google.com>
Date:   Tue Jan 3 14:17:51 2023 -0600

    x86/bugs: Flush IBP in ib_prctl_set()
    
    commit a664ec9158eeddd75121d39c9a0758016097fa96 upstream.
    
    We missed the window between the TIF flag update and the next reschedule.
    
    Signed-off-by: Rodrigo Branco <bsdaemon@google.com>
    Reviewed-by: Borislav Petkov (AMD) <bp@alien8.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f13301a69ababa6c2236fb4f0393b7e914e7e1e0
Author: Yanjun Zhang <zhangyanjun@cestc.cn>
Date:   Thu Dec 22 09:57:21 2022 +0800

    nvme: fix multipath crash caused by flush request when blktrace is enabled
    
    [ Upstream commit 3659fb5ac29a5e6102bebe494ac789fd47fb78f4 ]
    
    The flush request initialized by blk_kick_flush has NULL bio,
    and it may be dealt with nvme_end_req during io completion.
    When blktrace is enabled, nvme_trace_bio_complete with multipath
    activated trying to access NULL pointer bio from flush request
    results in the following crash:
    
    [ 2517.831677] BUG: kernel NULL pointer dereference, address: 000000000000001a
    [ 2517.835213] #PF: supervisor read access in kernel mode
    [ 2517.838724] #PF: error_code(0x0000) - not-present page
    [ 2517.842222] PGD 7b2d51067 P4D 0
    [ 2517.845684] Oops: 0000 [#1] SMP NOPTI
    [ 2517.849125] CPU: 2 PID: 732 Comm: kworker/2:1H Kdump: loaded Tainted: G S                5.15.67-0.cl9.x86_64 #1
    [ 2517.852723] Hardware name: XFUSION 2288H V6/BC13MBSBC, BIOS 1.13 07/27/2022
    [ 2517.856358] Workqueue: nvme_tcp_wq nvme_tcp_io_work [nvme_tcp]
    [ 2517.859993] RIP: 0010:blk_add_trace_bio_complete+0x6/0x30
    [ 2517.863628] Code: 1f 44 00 00 48 8b 46 08 31 c9 ba 04 00 10 00 48 8b 80 50 03 00 00 48 8b 78 50 e9 e5 fe ff ff 0f 1f 44 00 00 41 54 49 89 f4 55 <0f> b6 7a 1a 48 89 d5 e8 3e 1c 2b 00 48 89 ee 4c 89 e7 5d 89 c1 ba
    [ 2517.871269] RSP: 0018:ff7f6a008d9dbcd0 EFLAGS: 00010286
    [ 2517.875081] RAX: ff3d5b4be00b1d50 RBX: 0000000002040002 RCX: ff3d5b0a270f2000
    [ 2517.878966] RDX: 0000000000000000 RSI: ff3d5b0b021fb9f8 RDI: 0000000000000000
    [ 2517.882849] RBP: ff3d5b0b96a6fa00 R08: 0000000000000001 R09: 0000000000000000
    [ 2517.886718] R10: 000000000000000c R11: 000000000000000c R12: ff3d5b0b021fb9f8
    [ 2517.890575] R13: 0000000002000000 R14: ff3d5b0b021fb1b0 R15: 0000000000000018
    [ 2517.894434] FS:  0000000000000000(0000) GS:ff3d5b42bfc80000(0000) knlGS:0000000000000000
    [ 2517.898299] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 2517.902157] CR2: 000000000000001a CR3: 00000004f023e005 CR4: 0000000000771ee0
    [ 2517.906053] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 2517.909930] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 2517.913761] PKRU: 55555554
    [ 2517.917558] Call Trace:
    [ 2517.921294]  <TASK>
    [ 2517.924982]  nvme_complete_rq+0x1c3/0x1e0 [nvme_core]
    [ 2517.928715]  nvme_tcp_recv_pdu+0x4d7/0x540 [nvme_tcp]
    [ 2517.932442]  nvme_tcp_recv_skb+0x4f/0x240 [nvme_tcp]
    [ 2517.936137]  ? nvme_tcp_recv_pdu+0x540/0x540 [nvme_tcp]
    [ 2517.939830]  tcp_read_sock+0x9c/0x260
    [ 2517.943486]  nvme_tcp_try_recv+0x65/0xa0 [nvme_tcp]
    [ 2517.947173]  nvme_tcp_io_work+0x64/0x90 [nvme_tcp]
    [ 2517.950834]  process_one_work+0x1e8/0x390
    [ 2517.954473]  worker_thread+0x53/0x3c0
    [ 2517.958069]  ? process_one_work+0x390/0x390
    [ 2517.961655]  kthread+0x10c/0x130
    [ 2517.965211]  ? set_kthread_struct+0x40/0x40
    [ 2517.968760]  ret_from_fork+0x1f/0x30
    [ 2517.972285]  </TASK>
    
    To avoid this situation, add a NULL check for req->bio before
    calling trace_block_bio_complete.
    
    Signed-off-by: Yanjun Zhang <zhangyanjun@cestc.cn>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f257a98e54cfbbd9921eb38bcbe047a9745a203
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 13 13:32:46 2022 +0100

    ASoC: Intel: bytcr_rt5640: Add quirk for the Advantech MICA-071 tablet
    
    [ Upstream commit a1dec9d70b6ad97087b60b81d2492134a84208c6 ]
    
    The Advantech MICA-071 tablet deviates from the defaults for
    a non CR Bay Trail based tablet in several ways:
    
    1. It uses an analog MIC on IN3 rather then using DMIC1
    2. It only has 1 speaker
    3. It needs the OVCD current threshold to be set to 1500uA instead of
       the default 2000uA to reliable differentiate between headphones vs
       headsets
    
    Add a quirk with these settings for this tablet.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20221213123246.11226-1-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6df376e245699666f9e9c2f37d6b9908dc9b925e
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 21 17:45:51 2022 +0100

    udf: Fix extension of the last extent in the file
    
    [ Upstream commit 83c7423d1eb6806d13c521d1002cc1a012111719 ]
    
    When extending the last extent in the file within the last block, we
    wrongly computed the length of the last extent. This is mostly a
    cosmetical problem since the extent does not contain any data and the
    length will be fixed up by following operations but still.
    
    Fixes: 1f3868f06855 ("udf: Fix extending file within last block")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84b2cc7b36b7f6957d307fb3d01603f93cb2d655
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Wed Jan 4 14:51:46 2023 +0800

    caif: fix memory leak in cfctrl_linkup_request()
    
    [ Upstream commit fe69230f05897b3de758427b574fc98025dfc907 ]
    
    When linktype is unknown or kzalloc failed in cfctrl_linkup_request(),
    pkt is not released. Add release process to error path.
    
    Fixes: b482cd2053e3 ("net-caif: add CAIF core protocol stack")
    Fixes: 8d545c8f958f ("caif: Disconnect without waiting for response")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Link: https://lore.kernel.org/r/20230104065146.1153009-1-shaozhengchao@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5a05837445e48620636551d5de98ddd3939ad7f
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Nov 15 16:15:18 2022 +0300

    drm/i915: unpin on error in intel_vgpu_shadow_mm_pin()
    
    [ Upstream commit 3792fc508c095abd84b10ceae12bd773e61fdc36 ]
    
    Call intel_vgpu_unpin_mm() on this error path.
    
    Fixes: 418741480809 ("drm/i915/gvt: Adding ppgtt to GVT GEM context after shadow pdps settled.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/Y3OQ5tgZIVxyQ/WV@kili
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 232ef345e5d76e5542f430a29658a85dbef07f0b
Author: Szymon Heidrich <szymon.heidrich@gmail.com>
Date:   Tue Jan 3 10:17:09 2023 +0100

    usb: rndis_host: Secure rndis_query check against int overflow
    
    [ Upstream commit c7dd13805f8b8fc1ce3b6d40f6aff47e66b72ad2 ]
    
    Variables off and len typed as uint32 in rndis_query function
    are controlled by incoming RNDIS response message thus their
    value may be manipulated. Setting off to a unexpectetly large
    value will cause the sum with len and 8 to overflow and pass
    the implemented validation step. Consequently the response
    pointer will be referring to a location past the expected
    buffer boundaries allowing information leakage e.g. via
    RNDIS_OID_802_3_PERMANENT_ADDRESS OID.
    
    Fixes: ddda08624013 ("USB: rndis_host, various cleanups")
    Signed-off-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a9ee7c24b3260ac7e57b51bbe9f9813d8724fb9
Author: Daniil Tatianin <d-tatianin@yandex-team.ru>
Date:   Mon Jan 2 12:53:35 2023 +0300

    drivers/net/bonding/bond_3ad: return when there's no aggregator
    
    [ Upstream commit 9c807965483f42df1d053b7436eedd6cf28ece6f ]
    
    Otherwise we would dereference a NULL aggregator pointer when calling
    __set_agg_ports_ready on the line below.
    
    Found by Linux Verification Center (linuxtesting.org) with the SVACE
    static analysis tool.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Daniil Tatianin <d-tatianin@yandex-team.ru>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc6a0993bf8f026d8b67fcee9f75e6619324b5bb
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Dec 29 13:09:00 2022 +0400

    perf tools: Fix resources leak in perf_data__open_dir()
    
    [ Upstream commit 0a6564ebd953c4590663c9a3c99a3ea9920ade6f ]
    
    In perf_data__open_dir(), opendir() opens the directory stream.  Add
    missing closedir() to release it after use.
    
    Fixes: eb6176709b235b96 ("perf data: Add perf_data__open_dir_data function")
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20221229090903.1402395-1-linmq006@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee756980e491c829ba0495bb420b7224a9ee26b2
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Fri Dec 30 13:24:38 2022 +0100

    netfilter: ipset: Rework long task execution when adding/deleting entries
    
    [ Upstream commit 5e29dc36bd5e2166b834ceb19990d9e68a734d7d ]
    
    When adding/deleting large number of elements in one step in ipset, it can
    take a reasonable amount of time and can result in soft lockup errors. The
    patch 5f7b51bf09ba ("netfilter: ipset: Limit the maximal range of
    consecutive elements to add/delete") tried to fix it by limiting the max
    elements to process at all. However it was not enough, it is still possible
    that we get hung tasks. Lowering the limit is not reasonable, so the
    approach in this patch is as follows: rely on the method used at resizing
    sets and save the state when we reach a smaller internal batch limit,
    unlock/lock and proceed from the saved state. Thus we can avoid long
    continuous tasks and at the same time removed the limit to add/delete large
    number of elements in one step.
    
    The nfnl mutex is held during the whole operation which prevents one to
    issue other ipset commands in parallel.
    
    Fixes: 5f7b51bf09ba ("netfilter: ipset: Limit the maximal range of consecutive elements to add/delete")
    Reported-by: syzbot+9204e7399656300bf271@syzkaller.appspotmail.com
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba5d2790974535401155ae89e6077b766a64f001
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Fri Dec 30 13:24:37 2022 +0100

    netfilter: ipset: fix hash:net,port,net hang with /0 subnet
    
    [ Upstream commit a31d47be64b9b74f8cfedffe03e0a8a1f9e51f23 ]
    
    The hash:net,port,net set type supports /0 subnets. However, the patch
    commit 5f7b51bf09baca8e titled "netfilter: ipset: Limit the maximal range
    of consecutive elements to add/delete" did not take into account it and
    resulted in an endless loop. The bug is actually older but the patch
    5f7b51bf09baca8e brings it out earlier.
    
    Handle /0 subnets properly in hash:net,port,net set types.
    
    Fixes: 5f7b51bf09ba ("netfilter: ipset: Limit the maximal range of consecutive elements to add/delete")
    Reported-by: Марк Коренберг <socketpair@gmail.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2c917e510e5ddbc7896329c87d20036c8b82952
Author: Jamal Hadi Salim <jhs@mojatatu.com>
Date:   Sun Jan 1 16:57:44 2023 -0500

    net: sched: cbq: dont intepret cls results when asked to drop
    
    [ Upstream commit caa4b35b4317d5147b3ab0fbdc9c075c7d2e9c12 ]
    
    If asked to drop a packet via TC_ACT_SHOT it is unsafe to assume that
    res.class contains a valid pointer
    
    Sample splat reported by Kyle Zeng
    
    [    5.405624] 0: reclassify loop, rule prio 0, protocol 800
    [    5.406326] ==================================================================
    [    5.407240] BUG: KASAN: slab-out-of-bounds in cbq_enqueue+0x54b/0xea0
    [    5.407987] Read of size 1 at addr ffff88800e3122aa by task poc/299
    [    5.408731]
    [    5.408897] CPU: 0 PID: 299 Comm: poc Not tainted 5.10.155+ #15
    [    5.409516] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
    BIOS 1.15.0-1 04/01/2014
    [    5.410439] Call Trace:
    [    5.410764]  dump_stack+0x87/0xcd
    [    5.411153]  print_address_description+0x7a/0x6b0
    [    5.411687]  ? vprintk_func+0xb9/0xc0
    [    5.411905]  ? printk+0x76/0x96
    [    5.412110]  ? cbq_enqueue+0x54b/0xea0
    [    5.412323]  kasan_report+0x17d/0x220
    [    5.412591]  ? cbq_enqueue+0x54b/0xea0
    [    5.412803]  __asan_report_load1_noabort+0x10/0x20
    [    5.413119]  cbq_enqueue+0x54b/0xea0
    [    5.413400]  ? __kasan_check_write+0x10/0x20
    [    5.413679]  __dev_queue_xmit+0x9c0/0x1db0
    [    5.413922]  dev_queue_xmit+0xc/0x10
    [    5.414136]  ip_finish_output2+0x8bc/0xcd0
    [    5.414436]  __ip_finish_output+0x472/0x7a0
    [    5.414692]  ip_finish_output+0x5c/0x190
    [    5.414940]  ip_output+0x2d8/0x3c0
    [    5.415150]  ? ip_mc_finish_output+0x320/0x320
    [    5.415429]  __ip_queue_xmit+0x753/0x1760
    [    5.415664]  ip_queue_xmit+0x47/0x60
    [    5.415874]  __tcp_transmit_skb+0x1ef9/0x34c0
    [    5.416129]  tcp_connect+0x1f5e/0x4cb0
    [    5.416347]  tcp_v4_connect+0xc8d/0x18c0
    [    5.416577]  __inet_stream_connect+0x1ae/0xb40
    [    5.416836]  ? local_bh_enable+0x11/0x20
    [    5.417066]  ? lock_sock_nested+0x175/0x1d0
    [    5.417309]  inet_stream_connect+0x5d/0x90
    [    5.417548]  ? __inet_stream_connect+0xb40/0xb40
    [    5.417817]  __sys_connect+0x260/0x2b0
    [    5.418037]  __x64_sys_connect+0x76/0x80
    [    5.418267]  do_syscall_64+0x31/0x50
    [    5.418477]  entry_SYSCALL_64_after_hwframe+0x61/0xc6
    [    5.418770] RIP: 0033:0x473bb7
    [    5.418952] Code: 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00
    00 00 90 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2a 00 00
    00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 18 89 54 24 0c 48 89 34
    24 89
    [    5.420046] RSP: 002b:00007fffd20eb0f8 EFLAGS: 00000246 ORIG_RAX:
    000000000000002a
    [    5.420472] RAX: ffffffffffffffda RBX: 00007fffd20eb578 RCX: 0000000000473bb7
    [    5.420872] RDX: 0000000000000010 RSI: 00007fffd20eb110 RDI: 0000000000000007
    [    5.421271] RBP: 00007fffd20eb150 R08: 0000000000000001 R09: 0000000000000004
    [    5.421671] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000001
    [    5.422071] R13: 00007fffd20eb568 R14: 00000000004fc740 R15: 0000000000000002
    [    5.422471]
    [    5.422562] Allocated by task 299:
    [    5.422782]  __kasan_kmalloc+0x12d/0x160
    [    5.423007]  kasan_kmalloc+0x5/0x10
    [    5.423208]  kmem_cache_alloc_trace+0x201/0x2e0
    [    5.423492]  tcf_proto_create+0x65/0x290
    [    5.423721]  tc_new_tfilter+0x137e/0x1830
    [    5.423957]  rtnetlink_rcv_msg+0x730/0x9f0
    [    5.424197]  netlink_rcv_skb+0x166/0x300
    [    5.424428]  rtnetlink_rcv+0x11/0x20
    [    5.424639]  netlink_unicast+0x673/0x860
    [    5.424870]  netlink_sendmsg+0x6af/0x9f0
    [    5.425100]  __sys_sendto+0x58d/0x5a0
    [    5.425315]  __x64_sys_sendto+0xda/0xf0
    [    5.425539]  do_syscall_64+0x31/0x50
    [    5.425764]  entry_SYSCALL_64_after_hwframe+0x61/0xc6
    [    5.426065]
    [    5.426157] The buggy address belongs to the object at ffff88800e312200
    [    5.426157]  which belongs to the cache kmalloc-128 of size 128
    [    5.426955] The buggy address is located 42 bytes to the right of
    [    5.426955]  128-byte region [ffff88800e312200, ffff88800e312280)
    [    5.427688] The buggy address belongs to the page:
    [    5.427992] page:000000009875fabc refcount:1 mapcount:0
    mapping:0000000000000000 index:0x0 pfn:0xe312
    [    5.428562] flags: 0x100000000000200(slab)
    [    5.428812] raw: 0100000000000200 dead000000000100 dead000000000122
    ffff888007843680
    [    5.429325] raw: 0000000000000000 0000000000100010 00000001ffffffff
    ffff88800e312401
    [    5.429875] page dumped because: kasan: bad access detected
    [    5.430214] page->mem_cgroup:ffff88800e312401
    [    5.430471]
    [    5.430564] Memory state around the buggy address:
    [    5.430846]  ffff88800e312180: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [    5.431267]  ffff88800e312200: 00 00 00 00 00 00 00 00 00 00 00 00
    00 00 00 fc
    [    5.431705] >ffff88800e312280: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [    5.432123]                                   ^
    [    5.432391]  ffff88800e312300: 00 00 00 00 00 00 00 00 00 00 00 00
    00 00 00 fc
    [    5.432810]  ffff88800e312380: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [    5.433229] ==================================================================
    [    5.433648] Disabling lock debugging due to kernel taint
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Kyle Zeng <zengyhkyle@gmail.com>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f65f48516bfeebaab1ccc52c8fad698ddf21282
Author: Jamal Hadi Salim <jhs@mojatatu.com>
Date:   Sun Jan 1 16:57:43 2023 -0500

    net: sched: atm: dont intepret cls results when asked to drop
    
    [ Upstream commit a2965c7be0522eaa18808684b7b82b248515511b ]
    
    If asked to drop a packet via TC_ACT_SHOT it is unsafe to assume
    res.class contains a valid pointer
    Fixes: b0188d4dbe5f ("[NET_SCHED]: sch_atm: Lindent")
    
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4a2ad1002006548e235255c65a4f1d07312be9d
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Mon Jan 2 12:20:39 2023 +0400

    gpio: sifive: Fix refcount leak in sifive_gpio_probe
    
    [ Upstream commit 694175cd8a1643cde3acb45c9294bca44a8e08e9 ]
    
    of_irq_find_parent() returns a node pointer with refcount incremented,
    We should use of_node_put() on it when not needed anymore.
    Add missing of_node_put() to avoid refcount leak.
    
    Fixes: 96868dce644d ("gpio/sifive: Add GPIO driver for SiFive SoCs")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ec369e215bfeb08cb58150cc0d527fbc81d4d38
Author: Xiubo Li <xiubli@redhat.com>
Date:   Thu Nov 17 10:43:21 2022 +0800

    ceph: switch to vfs_inode_has_locks() to fix file lock bug
    
    [ Upstream commit 461ab10ef7e6ea9b41a0571a7fc6a72af9549a3c ]
    
    For the POSIX locks they are using the same owner, which is the
    thread id. And multiple POSIX locks could be merged into single one,
    so when checking whether the 'file' has locks may fail.
    
    For a file where some openers use locking and others don't is a
    really odd usage pattern though. Locks are like stoplights -- they
    only work if everyone pays attention to them.
    
    Just switch ceph_get_caps() to check whether any locks are set on
    the inode. If there are POSIX/OFD/FLOCK locks on the file at the
    time, we should set CHECK_FILELOCK, regardless of what fd was used
    to set the lock.
    
    Fixes: ff5d913dfc71 ("ceph: return -EIO if read/write against filp that lost file locks")
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 407710427dd53290b6406ca7583ba82ae7f7ba59
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Nov 14 08:33:09 2022 -0500

    filelock: new helper: vfs_inode_has_locks
    
    [ Upstream commit ab1ddef98a715eddb65309ffa83267e4e84a571e ]
    
    Ceph has a need to know whether a particular inode has any locks set on
    it. It's currently tracking that by a num_locks field in its
    filp->private_data, but that's problematic as it tries to decrement this
    field when releasing locks and that can race with the file being torn
    down.
    
    Add a new vfs_inode_has_locks helper that just returns whether any locks
    are currently held on the inode.
    
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Stable-dep-of: 461ab10ef7e6 ("ceph: switch to vfs_inode_has_locks() to fix file lock bug")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f0ff5de3e81635335e186f737f0c57be2526f4d
Author: Carlo Caione <ccaione@baylibre.com>
Date:   Mon Dec 19 09:43:05 2022 +0100

    drm/meson: Reduce the FIFO lines held when AFBC is not used
    
    [ Upstream commit 3b754ed6d1cd90017e66e5cc16f3923e4a952ffc ]
    
    Having a bigger number of FIFO lines held after vsync is only useful to
    SoCs using AFBC to give time to the AFBC decoder to be reset, configured
    and enabled again.
    
    For SoCs not using AFBC this, on the contrary, is causing on some
    displays issues and a few pixels vertical offset in the displayed image.
    
    Conditionally increase the number of lines held after vsync only for
    SoCs using AFBC, leaving the default value for all the others.
    
    Fixes: 24e0d4058eff ("drm/meson: hold 32 lines after vsync to give time for AFBC start")
    Signed-off-by: Carlo Caione <ccaione@baylibre.com>
    Acked-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Acked-by: Neil Armstrong <neil.armstrong@linaro.org>
    [narmstrong: added fixes tag]
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221216-afbc_s905x-v1-0-033bebf780d9@baylibre.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2639cd2c8cce5168a29be013b20ffa573be407
Author: Maor Gottlieb <maorg@nvidia.com>
Date:   Wed Dec 28 14:56:10 2022 +0200

    RDMA/mlx5: Fix validation of max_rd_atomic caps for DC
    
    [ Upstream commit 8de8482fe5732fbef4f5af82bc0c0362c804cd1f ]
    
    Currently, when modifying DC, we validate max_rd_atomic user attribute
    against the RC cap, validate against DC. RC and DC QP types have different
    device limitations.
    
    This can cause userspace created DC QPs to malfunction.
    
    Fixes: c32a4f296e1d ("IB/mlx5: Add support for DC Initiator QP")
    Link: https://lore.kernel.org/r/0c5aee72cea188c3bb770f4207cce7abc9b6fc74.1672231736.git.leonro@nvidia.com
    Signed-off-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 106d0d33c9d1ec4ddeeffc1fdc717ff09953d4ed
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Dec 29 10:29:25 2022 +0400

    net: phy: xgmiitorgmii: Fix refcount leak in xgmiitorgmii_probe
    
    [ Upstream commit d039535850ee47079d59527e96be18d8e0daa84b ]
    
    of_phy_find_device() return device node with refcount incremented.
    Call put_device() to relese it when not needed anymore.
    
    Fixes: ab4e6ee578e8 ("net: phy: xgmiitorgmii: Check phy_driver ready before accessing")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 398e14bb735d92097215ff0bf1949b78c8421c81
Author: Jiguang Xiao <jiguang.xiao@windriver.com>
Date:   Wed Dec 28 16:14:47 2022 +0800

    net: amd-xgbe: add missed tasklet_kill
    
    [ Upstream commit d530ece70f16f912e1d1bfeea694246ab78b0a4b ]
    
    The driver does not call tasklet_kill in several places.
    Add the calls to fix it.
    
    Fixes: 85b85c853401 ("amd-xgbe: Re-issue interrupt if interrupt status not cleared")
    Signed-off-by: Jiguang Xiao <jiguang.xiao@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3d90ca906524aa92aae5fe7c6e8b8fe5c34af35
Author: Adham Faris <afaris@nvidia.com>
Date:   Wed Dec 14 16:02:57 2022 +0200

    net/mlx5e: Fix hw mtu initializing at XDP SQ allocation
    
    [ Upstream commit 1e267ab88dc44c48f556218f7b7f14c76f7aa066 ]
    
    Current xdp xmit functions logic (mlx5e_xmit_xdp_frame_mpwqe or
    mlx5e_xmit_xdp_frame), validates xdp packet length by comparing it to
    hw mtu (configured at xdp sq allocation) before xmiting it. This check
    does not account for ethernet fcs length (calculated and filled by the
    nic). Hence, when we try sending packets with length > (hw-mtu -
    ethernet-fcs-size), the device port drops it and tx_errors_phy is
    incremented. Desired behavior is to catch these packets and drop them
    by the driver.
    
    Fix this behavior in XDP SQ allocation function (mlx5e_alloc_xdpsq) by
    subtracting ethernet FCS header size (4 Bytes) from current hw mtu
    value, since ethernet FCS is calculated and written to ethernet frames
    by the nic.
    
    Fixes: d8bec2b29a82 ("net/mlx5e: Support bpf_xdp_adjust_head()")
    Signed-off-by: Adham Faris <afaris@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d655a9d8251d1066104529c813ae138ed9f9de1
Author: Dragos Tatulea <dtatulea@nvidia.com>
Date:   Mon Nov 28 15:24:21 2022 +0200

    net/mlx5e: IPoIB, Don't allow CQE compression to be turned on by default
    
    [ Upstream commit b12d581e83e3ae1080c32ab83f123005bd89a840 ]
    
    mlx5e_build_nic_params will turn CQE compression on if the hardware
    capability is enabled and the slow_pci_heuristic condition is detected.
    As IPoIB doesn't support CQE compression, make sure to disable the
    feature in the IPoIB profile init.
    
    Please note that the feature is not exposed to the user for IPoIB
    interfaces, so it can't be subsequently turned on.
    
    Fixes: b797a684b0dd ("net/mlx5e: Enable CQE compression when PCI is slower than link")
    Signed-off-by: Dragos Tatulea <dtatulea@nvidia.com>
    Reviewed-by: Gal Pressman <gal@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 670b20617346d4d4e9ddbeed971037fdb98b19d3
Author: Shay Drory <shayd@nvidia.com>
Date:   Thu Nov 24 13:34:12 2022 +0200

    net/mlx5: Avoid recovery in probe flows
    
    [ Upstream commit 9078e843efec530f279a155f262793c58b0746bd ]
    
    Currently, recovery is done without considering whether the device is
    still in probe flow.
    This may lead to recovery before device have finished probed
    successfully. e.g.: while mlx5_init_one() is running. Recovery flow is
    using functionality that is loaded only by mlx5_init_one(), and there
    is no point in running recovery without mlx5_init_one() finished
    successfully.
    
    Fix it by waiting for probe flow to finish and checking whether the
    device is probed before trying to perform recovery.
    
    Fixes: 51d138c2610a ("net/mlx5: Fix health error state handling")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66b92b80c95ebd0fc080395d376b5f283bfc2266
Author: Jiri Pirko <jiri@nvidia.com>
Date:   Tue Oct 18 12:51:52 2022 +0200

    net/mlx5: Add forgotten cleanup calls into mlx5_init_once() error path
    
    [ Upstream commit 2a35b2c2e6a252eda2134aae6a756861d9299531 ]
    
    There are two cleanup calls missing in mlx5_init_once() error path.
    Add them making the error path flow to be the same as
    mlx5_cleanup_once().
    
    Fixes: 52ec462eca9b ("net/mlx5: Add reserved-gids support")
    Fixes: 7c39afb394c7 ("net/mlx5: PTP code migration to driver core section")
    Signed-off-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6c74d2376483d556c8156c3aadd550f1f2d4413
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Wed Nov 9 11:25:03 2022 +0100

    vhost: fix range used in translate_desc()
    
    [ Upstream commit 98047313cdb46828093894d0ac8b1183b8b317f9 ]
    
    vhost_iotlb_itree_first() requires `start` and `last` parameters
    to search for a mapping that overlaps the range.
    
    In translate_desc() we cyclically call vhost_iotlb_itree_first(),
    incrementing `addr` by the amount already translated, so rightly
    we move the `start` parameter passed to vhost_iotlb_itree_first(),
    but we should hold the `last` parameter constant.
    
    Let's fix it by saving the `last` parameter value before incrementing
    `addr` in the loop.
    
    Fixes: a9709d6874d5 ("vhost: convert pre sorted vhost memory array to interval tree")
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Message-Id: <20221109102503.18816-3-sgarzare@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 264fb6dcbfde48e0686158dcebde89598685ba01
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Wed Nov 9 11:25:02 2022 +0100

    vringh: fix range used in iotlb_translate()
    
    [ Upstream commit f85efa9b0f5381874f727bd98f56787840313f0b ]
    
    vhost_iotlb_itree_first() requires `start` and `last` parameters
    to search for a mapping that overlaps the range.
    
    In iotlb_translate() we cyclically call vhost_iotlb_itree_first(),
    incrementing `addr` by the amount already translated, so rightly
    we move the `start` parameter passed to vhost_iotlb_itree_first(),
    but we should hold the `last` parameter constant.
    
    Let's fix it by saving the `last` parameter value before incrementing
    `addr` in the loop.
    
    Fixes: 9ad9c49cfe97 ("vringh: IOTLB support")
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Message-Id: <20221109102503.18816-2-sgarzare@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eabb3ceb04cddbda22014059d29b8a27fc9607cb
Author: Yuan Can <yuancan@huawei.com>
Date:   Tue Nov 8 10:17:05 2022 +0000

    vhost/vsock: Fix error handling in vhost_vsock_init()
    
    [ Upstream commit 7a4efe182ca61fb3e5307e69b261c57cbf434cd4 ]
    
    A problem about modprobe vhost_vsock failed is triggered with the
    following log given:
    
    modprobe: ERROR: could not insert 'vhost_vsock': Device or resource busy
    
    The reason is that vhost_vsock_init() returns misc_register() directly
    without checking its return value, if misc_register() failed, it returns
    without calling vsock_core_unregister() on vhost_transport, resulting the
    vhost_vsock can never be installed later.
    A simple call graph is shown as below:
    
     vhost_vsock_init()
       vsock_core_register() # register vhost_transport
       misc_register()
         device_create_with_groups()
           device_create_groups_vargs()
             dev = kzalloc(...) # OOM happened
       # return without unregister vhost_transport
    
    Fix by calling vsock_core_unregister() when misc_register() returns error.
    
    Fixes: 433fc58e6bf2 ("VSOCK: Introduce vhost_vsock.ko")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Message-Id: <20221108101705.45981-1-yuancan@huawei.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0f5c962c066e769c187f037fedc883f8abd4e82
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Fri Dec 23 11:37:18 2022 +0400

    nfc: Fix potential resource leaks
    
    [ Upstream commit df49908f3c52d211aea5e2a14a93bbe67a2cb3af ]
    
    nfc_get_device() take reference for the device, add missing
    nfc_put_device() to release it when not need anymore.
    Also fix the style warnning by use error EOPNOTSUPP instead of
    ENOTSUPP.
    
    Fixes: 5ce3f32b5264 ("NFC: netlink: SE API implementation")
    Fixes: 29e76924cf08 ("nfc: netlink: Add capability to reply to vendor_cmd with data")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 513787ff9a331b461115e8a145a983d650a84fcb
Author: Daniil Tatianin <d-tatianin@yandex-team.ru>
Date:   Thu Dec 22 14:52:28 2022 +0300

    qlcnic: prevent ->dcb use-after-free on qlcnic_dcb_enable() failure
    
    [ Upstream commit 13a7c8964afcd8ca43c0b6001ebb0127baa95362 ]
    
    adapter->dcb would get silently freed inside qlcnic_dcb_enable() in
    case qlcnic_dcb_attach() would return an error, which always happens
    under OOM conditions. This would lead to use-after-free because both
    of the existing callers invoke qlcnic_dcb_get_info() on the obtained
    pointer, which is potentially freed at that point.
    
    Propagate errors from qlcnic_dcb_enable(), and instead free the dcb
    pointer at callsite using qlcnic_dcb_free(). This also removes the now
    unused qlcnic_clear_dcb_ops() helper, which was a simple wrapper around
    kfree() also causing memory leaks for partially initialized dcb.
    
    Found by Linux Verification Center (linuxtesting.org) with the SVACE
    static analysis tool.
    
    Fixes: 3c44bba1d270 ("qlcnic: Disable DCB operations from SR-IOV VFs")
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Signed-off-by: Daniil Tatianin <d-tatianin@yandex-team.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b314f6c3512108d7a656c5caf07c82d1bbbdc0f1
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Thu Dec 22 11:51:19 2022 +0800

    net: sched: fix memory leak in tcindex_set_parms
    
    [ Upstream commit 399ab7fe0fa0d846881685fd4e57e9a8ef7559f7 ]
    
    Syzkaller reports a memory leak as follows:
    ====================================
    BUG: memory leak
    unreferenced object 0xffff88810c287f00 (size 256):
      comm "syz-executor105", pid 3600, jiffies 4294943292 (age 12.990s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<ffffffff814cf9f0>] kmalloc_trace+0x20/0x90 mm/slab_common.c:1046
        [<ffffffff839c9e07>] kmalloc include/linux/slab.h:576 [inline]
        [<ffffffff839c9e07>] kmalloc_array include/linux/slab.h:627 [inline]
        [<ffffffff839c9e07>] kcalloc include/linux/slab.h:659 [inline]
        [<ffffffff839c9e07>] tcf_exts_init include/net/pkt_cls.h:250 [inline]
        [<ffffffff839c9e07>] tcindex_set_parms+0xa7/0xbe0 net/sched/cls_tcindex.c:342
        [<ffffffff839caa1f>] tcindex_change+0xdf/0x120 net/sched/cls_tcindex.c:553
        [<ffffffff8394db62>] tc_new_tfilter+0x4f2/0x1100 net/sched/cls_api.c:2147
        [<ffffffff8389e91c>] rtnetlink_rcv_msg+0x4dc/0x5d0 net/core/rtnetlink.c:6082
        [<ffffffff839eba67>] netlink_rcv_skb+0x87/0x1d0 net/netlink/af_netlink.c:2540
        [<ffffffff839eab87>] netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
        [<ffffffff839eab87>] netlink_unicast+0x397/0x4c0 net/netlink/af_netlink.c:1345
        [<ffffffff839eb046>] netlink_sendmsg+0x396/0x710 net/netlink/af_netlink.c:1921
        [<ffffffff8383e796>] sock_sendmsg_nosec net/socket.c:714 [inline]
        [<ffffffff8383e796>] sock_sendmsg+0x56/0x80 net/socket.c:734
        [<ffffffff8383eb08>] ____sys_sendmsg+0x178/0x410 net/socket.c:2482
        [<ffffffff83843678>] ___sys_sendmsg+0xa8/0x110 net/socket.c:2536
        [<ffffffff838439c5>] __sys_sendmmsg+0x105/0x330 net/socket.c:2622
        [<ffffffff83843c14>] __do_sys_sendmmsg net/socket.c:2651 [inline]
        [<ffffffff83843c14>] __se_sys_sendmmsg net/socket.c:2648 [inline]
        [<ffffffff83843c14>] __x64_sys_sendmmsg+0x24/0x30 net/socket.c:2648
        [<ffffffff84605fd5>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]
        [<ffffffff84605fd5>] do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
        [<ffffffff84800087>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    ====================================
    
    Kernel uses tcindex_change() to change an existing
    filter properties.
    
    Yet the problem is that, during the process of changing,
    if `old_r` is retrieved from `p->perfect`, then
    kernel uses tcindex_alloc_perfect_hash() to newly
    allocate filter results, uses tcindex_filter_result_init()
    to clear the old filter result, without destroying
    its tcf_exts structure, which triggers the above memory leak.
    
    To be more specific, there are only two source for the `old_r`,
    according to the tcindex_lookup(). `old_r` is retrieved from
    `p->perfect`, or `old_r` is retrieved from `p->h`.
    
      * If `old_r` is retrieved from `p->perfect`, kernel uses
    tcindex_alloc_perfect_hash() to newly allocate the
    filter results. Then `r` is assigned with `cp->perfect + handle`,
    which is newly allocated. So condition `old_r && old_r != r` is
    true in this situation, and kernel uses tcindex_filter_result_init()
    to clear the old filter result, without destroying
    its tcf_exts structure
    
      * If `old_r` is retrieved from `p->h`, then `p->perfect` is NULL
    according to the tcindex_lookup(). Considering that `cp->h`
    is directly copied from `p->h` and `p->perfect` is NULL,
    `r` is assigned with `tcindex_lookup(cp, handle)`, whose value
    should be the same as `old_r`, so condition `old_r && old_r != r`
    is false in this situation, kernel ignores using
    tcindex_filter_result_init() to clear the old filter result.
    
    So only when `old_r` is retrieved from `p->perfect` does kernel use
    tcindex_filter_result_init() to clear the old filter result, which
    triggers the above memory leak.
    
    Considering that there already exists a tc_filter_wq workqueue
    to destroy the old tcindex_data by tcindex_partial_destroy_work()
    at the end of tcindex_set_parms(), this patch solves
    this memory leak bug by removing this old filter result
    clearing part and delegating it to the tc_filter_wq workqueue.
    
    Note that this patch doesn't introduce any other issues. If
    `old_r` is retrieved from `p->perfect`, this patch just
    delegates old filter result clearing part to the
    tc_filter_wq workqueue; If `old_r` is retrieved from `p->h`,
    kernel doesn't reach the old filter result clearing part, so
    removing this part has no effect.
    
    [Thanks to the suggestion from Jakub Kicinski, Cong Wang, Paolo Abeni
    and Dmitry Vyukov]
    
    Fixes: b9a24bb76bf6 ("net_sched: properly handle failure case of tcf_exts_init()")
    Link: https://lore.kernel.org/all/0000000000001de5c505ebc9ec59@google.com/
    Reported-by: syzbot+232ebdbd36706c965ebf@syzkaller.appspotmail.com
    Tested-by: syzbot+232ebdbd36706c965ebf@syzkaller.appspotmail.com
    Cc: Cong Wang <cong.wang@bytedance.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4226ce95a9349f44c48e78b1fce1912fc7f90771
Author: Jie Wang <wangjie125@huawei.com>
Date:   Thu Dec 22 14:43:41 2022 +0800

    net: hns3: add interrupts re-initialization while doing VF FLR
    
    [ Upstream commit 09e6b30eeb254f1818a008cace3547159e908dfd ]
    
    Currently keep alive message between PF and VF may be lost and the VF is
    unalive in PF. So the VF will not do reset during PF FLR reset process.
    This would make the allocated interrupt resources of VF invalid and VF
    would't receive or respond to PF any more.
    
    So this patch adds VF interrupts re-initialization during VF FLR for VF
    recovery in above cases.
    
    Fixes: 862d969a3a4d ("net: hns3: do VF's pci re-initialization while PF doing FLR")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Hao Lan <lanhao@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 998ebbdc3bb14411817a04c8f19e9199c5b9df32
Author: Jeff Layton <jlayton@kernel.org>
Date:   Thu Dec 22 09:51:30 2022 -0500

    nfsd: shut down the NFSv4 state objects before the filecache
    
    [ Upstream commit 789e1e10f214c00ca18fc6610824c5b9876ba5f2 ]
    
    Currently, we shut down the filecache before trying to clean up the
    stateids that depend on it. This leads to the kernel trying to free an
    nfsd_file twice, and a refcount overput on the nf_mark.
    
    Change the shutdown procedure to tear down all of the stateids prior
    to shutting down the filecache.
    
    Reported-and-tested-by: Wang Yugui <wangyugui@e16-tech.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Fixes: 5e113224c17e ("nfsd: nfsd_file cache entries should be per net namespace")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69d896b60957f5612dc98c902fd4d5370b23923f
Author: Shawn Bohrer <sbohrer@cloudflare.com>
Date:   Tue Dec 20 12:59:03 2022 -0600

    veth: Fix race with AF_XDP exposing old or uninitialized descriptors
    
    [ Upstream commit fa349e396e4886d742fd6501c599ec627ef1353b ]
    
    When AF_XDP is used on on a veth interface the RX ring is updated in two
    steps.  veth_xdp_rcv() removes packet descriptors from the FILL ring
    fills them and places them in the RX ring updating the cached_prod
    pointer.  Later xdp_do_flush() syncs the RX ring prod pointer with the
    cached_prod pointer allowing user-space to see the recently filled in
    descriptors.  The rings are intended to be SPSC, however the existing
    order in veth_poll allows the xdp_do_flush() to run concurrently with
    another CPU creating a race condition that allows user-space to see old
    or uninitialized descriptors in the RX ring.  This bug has been observed
    in production systems.
    
    To summarize, we are expecting this ordering:
    
    CPU 0 __xsk_rcv_zc()
    CPU 0 __xsk_map_flush()
    CPU 2 __xsk_rcv_zc()
    CPU 2 __xsk_map_flush()
    
    But we are seeing this order:
    
    CPU 0 __xsk_rcv_zc()
    CPU 2 __xsk_rcv_zc()
    CPU 0 __xsk_map_flush()
    CPU 2 __xsk_map_flush()
    
    This occurs because we rely on NAPI to ensure that only one napi_poll
    handler is running at a time for the given veth receive queue.
    napi_schedule_prep() will prevent multiple instances from getting
    scheduled. However calling napi_complete_done() signals that this
    napi_poll is complete and allows subsequent calls to
    napi_schedule_prep() and __napi_schedule() to succeed in scheduling a
    concurrent napi_poll before the xdp_do_flush() has been called.  For the
    veth driver a concurrent call to napi_schedule_prep() and
    __napi_schedule() can occur on a different CPU because the veth xmit
    path can additionally schedule a napi_poll creating the race.
    
    The fix as suggested by Magnus Karlsson, is to simply move the
    xdp_do_flush() call before napi_complete_done().  This syncs the
    producer ring pointers before another instance of napi_poll can be
    scheduled on another CPU.  It will also slightly improve performance by
    moving the flush closer to when the descriptors were placed in the
    RX ring.
    
    Fixes: d1396004dd86 ("veth: Add XDP TX and REDIRECT")
    Suggested-by: Magnus Karlsson <magnus.karlsson@gmail.com>
    Signed-off-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Link: https://lore.kernel.org/r/20221220185903.1105011-1-sbohrer@cloudflare.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f41212dc2ec8cfc045740d0ca14ac1f32c7f9aa
Author: Ronak Doshi <doshir@vmware.com>
Date:   Tue Dec 20 12:25:55 2022 -0800

    vmxnet3: correctly report csum_level for encapsulated packet
    
    [ Upstream commit 3d8f2c4269d08f8793e946279dbdf5e972cc4911 ]
    
    Commit dacce2be3312 ("vmxnet3: add geneve and vxlan tunnel offload
    support") added support for encapsulation offload. However, the
    pathc did not report correctly the csum_level for encapsulated packet.
    
    This patch fixes this issue by reporting correct csum level for the
    encapsulated packet.
    
    Fixes: dacce2be3312 ("vmxnet3: add geneve and vxlan tunnel offload support")
    Signed-off-by: Ronak Doshi <doshir@vmware.com>
    Acked-by: Peng Li <lpeng@vmware.com>
    Link: https://lore.kernel.org/r/20221220202556.24421-1-doshir@vmware.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b70f6ea4d4f2b4d4b291d86ab76b4d07394932c
Author: Steven Price <steven.price@arm.com>
Date:   Mon Dec 19 14:01:30 2022 +0000

    drm/panfrost: Fix GEM handle creation ref-counting
    
    [ Upstream commit 4217c6ac817451d5116687f3cc6286220dc43d49 ]
    
    panfrost_gem_create_with_handle() previously returned a BO but with the
    only reference being from the handle, which user space could in theory
    guess and release, causing a use-after-free. Additionally if the call to
    panfrost_gem_mapping_get() in panfrost_ioctl_create_bo() failed then
    a(nother) reference on the BO was dropped.
    
    The _create_with_handle() is a problematic pattern, so ditch it and
    instead create the handle in panfrost_ioctl_create_bo(). If the call to
    panfrost_gem_mapping_get() fails then this means that user space has
    indeed gone behind our back and freed the handle. In which case just
    return an error code.
    
    Reported-by: Rob Clark <robdclark@chromium.org>
    Fixes: f3ba91228e8e ("drm/panfrost: Add initial panfrost driver")
    Signed-off-by: Steven Price <steven.price@arm.com>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221219140130.410578-1-steven.price@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e68e088d0d6ada6dcc226d1ca147488f60abca0e
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Dec 19 16:47:00 2022 -0800

    bpf: pull before calling skb_postpull_rcsum()
    
    [ Upstream commit 54c3f1a81421f85e60ae2eaae7be3727a09916ee ]
    
    Anand hit a BUG() when pulling off headers on egress to a SW tunnel.
    We get to skb_checksum_help() with an invalid checksum offset
    (commit d7ea0d9df2a6 ("net: remove two BUG() from skb_checksum_help()")
    converted those BUGs to WARN_ONs()).
    He points out oddness in how skb_postpull_rcsum() gets used.
    Indeed looks like we should pull before "postpull", otherwise
    the CHECKSUM_PARTIAL fixup from skb_postpull_rcsum() will not
    be able to do its job:
    
            if (skb->ip_summed == CHECKSUM_PARTIAL &&
                skb_checksum_start_offset(skb) < 0)
                    skb->ip_summed = CHECKSUM_NONE;
    
    Reported-by: Anand Parthasarathy <anpartha@meta.com>
    Fixes: 6578171a7ff0 ("bpf: add bpf_skb_change_proto helper")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/r/20221220004701.402165-1-kuba@kernel.org
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb0d627bc711ef429467b8193c7130abea6df42e
Author: minoura makoto <minoura@valinux.co.jp>
Date:   Tue Dec 13 13:14:31 2022 +0900

    SUNRPC: ensure the matching upcall is in-flight upon downcall
    
    [ Upstream commit b18cba09e374637a0a3759d856a6bca94c133952 ]
    
    Commit 9130b8dbc6ac ("SUNRPC: allow for upcalls for the same uid
    but different gss service") introduced `auth` argument to
    __gss_find_upcall(), but in gss_pipe_downcall() it was left as NULL
    since it (and auth->service) was not (yet) determined.
    
    When multiple upcalls with the same uid and different service are
    ongoing, it could happen that __gss_find_upcall(), which returns the
    first match found in the pipe->in_downcall list, could not find the
    correct gss_msg corresponding to the downcall we are looking for.
    Moreover, it might return a msg which is not sent to rpc.gssd yet.
    
    We could see mount.nfs process hung in D state with multiple mount.nfs
    are executed in parallel.  The call trace below is of CentOS 7.9
    kernel-3.10.0-1160.24.1.el7.x86_64 but we observed the same hang w/
    elrepo kernel-ml-6.0.7-1.el7.
    
    PID: 71258  TASK: ffff91ebd4be0000  CPU: 36  COMMAND: "mount.nfs"
     #0 [ffff9203ca3234f8] __schedule at ffffffffa3b8899f
     #1 [ffff9203ca323580] schedule at ffffffffa3b88eb9
     #2 [ffff9203ca323590] gss_cred_init at ffffffffc0355818 [auth_rpcgss]
     #3 [ffff9203ca323658] rpcauth_lookup_credcache at ffffffffc0421ebc
    [sunrpc]
     #4 [ffff9203ca3236d8] gss_lookup_cred at ffffffffc0353633 [auth_rpcgss]
     #5 [ffff9203ca3236e8] rpcauth_lookupcred at ffffffffc0421581 [sunrpc]
     #6 [ffff9203ca323740] rpcauth_refreshcred at ffffffffc04223d3 [sunrpc]
     #7 [ffff9203ca3237a0] call_refresh at ffffffffc04103dc [sunrpc]
     #8 [ffff9203ca3237b8] __rpc_execute at ffffffffc041e1c9 [sunrpc]
     #9 [ffff9203ca323820] rpc_execute at ffffffffc0420a48 [sunrpc]
    
    The scenario is like this. Let's say there are two upcalls for
    services A and B, A -> B in pipe->in_downcall, B -> A in pipe->pipe.
    
    When rpc.gssd reads pipe to get the upcall msg corresponding to
    service B from pipe->pipe and then writes the response, in
    gss_pipe_downcall the msg corresponding to service A will be picked
    because only uid is used to find the msg and it is before the one for
    B in pipe->in_downcall.  And the process waiting for the msg
    corresponding to service A will be woken up.
    
    Actual scheduing of that process might be after rpc.gssd processes the
    next msg.  In rpc_pipe_generic_upcall it clears msg->errno (for A).
    The process is scheduled to see gss_msg->ctx == NULL and
    gss_msg->msg.errno == 0, therefore it cannot break the loop in
    gss_create_upcall and is never woken up after that.
    
    This patch adds a simple check to ensure that a msg which is not
    sent to rpc.gssd yet is not chosen as the matching upcall upon
    receiving a downcall.
    
    Signed-off-by: minoura makoto <minoura@valinux.co.jp>
    Signed-off-by: Hiroshi Shimamoto <h-shimamoto@nec.com>
    Tested-by: Hiroshi Shimamoto <h-shimamoto@nec.com>
    Cc: Trond Myklebust <trondmy@hammerspace.com>
    Fixes: 9130b8dbc6ac ("SUNRPC: allow for upcalls for same uid but different gss service")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1be16a0c2f10186df505e28b0cc92d7f3366e2a8
Author: Jan Kara <jack@suse.cz>
Date:   Wed Nov 23 20:39:50 2022 +0100

    ext4: fix deadlock due to mbcache entry corruption
    
    [ Upstream commit a44e84a9b7764c72896f7241a0ec9ac7e7ef38dd ]
    
    When manipulating xattr blocks, we can deadlock infinitely looping
    inside ext4_xattr_block_set() where we constantly keep finding xattr
    block for reuse in mbcache but we are unable to reuse it because its
    reference count is too big. This happens because cache entry for the
    xattr block is marked as reusable (e_reusable set) although its
    reference count is too big. When this inconsistency happens, this
    inconsistent state is kept indefinitely and so ext4_xattr_block_set()
    keeps retrying indefinitely.
    
    The inconsistent state is caused by non-atomic update of e_reusable bit.
    e_reusable is part of a bitfield and e_reusable update can race with
    update of e_referenced bit in the same bitfield resulting in loss of one
    of the updates. Fix the problem by using atomic bitops instead.
    
    This bug has been around for many years, but it became *much* easier
    to hit after commit 65f8b80053a1 ("ext4: fix race when reusing xattr
    blocks").
    
    Cc: stable@vger.kernel.org
    Fixes: 6048c64b2609 ("mbcache: add reusable flag to cache entries")
    Fixes: 65f8b80053a1 ("ext4: fix race when reusing xattr blocks")
    Reported-and-tested-by: Jeremi Piotrowski <jpiotrowski@linux.microsoft.com>
    Reported-by: Thilo Fromm <t-lo@linux.microsoft.com>
    Link: https://lore.kernel.org/r/c77bf00f-4618-7149-56f1-b8d1664b9d07@linux.microsoft.com/
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20221123193950.16758-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0da99012d3f7ccec903e9db4013647e1b831bced
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jul 12 12:54:29 2022 +0200

    mbcache: automatically delete entries from cache on freeing
    
    [ Upstream commit 307af6c879377c1c63e71cbdd978201f9c7ee8df ]
    
    Use the fact that entries with elevated refcount are not removed from
    the hash and just move removal of the entry from the hash to the entry
    freeing time. When doing this we also change the generic code to hold
    one reference to the cache entry, not two of them, which makes code
    somewhat more obvious.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220712105436.32204-10-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44e84a9b776 ("ext4: fix deadlock due to mbcache entry corruption")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a56cd972ce121b6cf2517a47a578782bbd2ec95
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jul 12 12:54:24 2022 +0200

    ext4: fix race when reusing xattr blocks
    
    [ Upstream commit 65f8b80053a1b2fd602daa6814e62d6fa90e5e9b ]
    
    When ext4_xattr_block_set() decides to remove xattr block the following
    race can happen:
    
    CPU1                                    CPU2
    ext4_xattr_block_set()                  ext4_xattr_release_block()
      new_bh = ext4_xattr_block_cache_find()
    
                                              lock_buffer(bh);
                                              ref = le32_to_cpu(BHDR(bh)->h_refcount);
                                              if (ref == 1) {
                                                ...
                                                mb_cache_entry_delete();
                                                unlock_buffer(bh);
                                                ext4_free_blocks();
                                                  ...
                                                  ext4_forget(..., bh, ...);
                                                    jbd2_journal_revoke(..., bh);
    
      ext4_journal_get_write_access(..., new_bh, ...)
        do_get_write_access()
          jbd2_journal_cancel_revoke(..., new_bh);
    
    Later the code in ext4_xattr_block_set() finds out the block got freed
    and cancels reusal of the block but the revoke stays canceled and so in
    case of block reuse and journal replay the filesystem can get corrupted.
    If the race works out slightly differently, we can also hit assertions
    in the jbd2 code.
    
    Fix the problem by making sure that once matching mbcache entry is
    found, code dropping the last xattr block reference (or trying to modify
    xattr block in place) waits until the mbcache entry reference is
    dropped. This way code trying to reuse xattr block is protected from
    someone trying to drop the last reference to xattr block.
    
    Reported-and-tested-by: Ritesh Harjani <ritesh.list@gmail.com>
    CC: stable@vger.kernel.org
    Fixes: 82939d7999df ("ext4: convert to mbcache2")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220712105436.32204-5-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44e84a9b776 ("ext4: fix deadlock due to mbcache entry corruption")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4cc218e217bf0f7c1899615745ba6b433f09e416
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jul 12 12:54:23 2022 +0200

    ext4: unindent codeblock in ext4_xattr_block_set()
    
    [ Upstream commit fd48e9acdf26d0cbd80051de07d4a735d05d29b2 ]
    
    Remove unnecessary else (and thus indentation level) from a code block
    in ext4_xattr_block_set(). It will also make following code changes
    easier. No functional changes.
    
    CC: stable@vger.kernel.org
    Fixes: 82939d7999df ("ext4: convert to mbcache2")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220712105436.32204-4-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44e84a9b776 ("ext4: fix deadlock due to mbcache entry corruption")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e6fbc566fcc4c230bf80f76cf5df26b42142d8a
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jul 12 12:54:22 2022 +0200

    ext4: remove EA inode entry from mbcache on inode eviction
    
    [ Upstream commit 6bc0d63dad7f9f54d381925ee855b402f652fa39 ]
    
    Currently we remove EA inode from mbcache as soon as its xattr refcount
    drops to zero. However there can be pending attempts to reuse the inode
    and thus refcount handling code has to handle the situation when
    refcount increases from zero anyway. So save some work and just keep EA
    inode in mbcache until it is getting evicted. At that moment we are sure
    following iget() of EA inode will fail anyway (or wait for eviction to
    finish and load things from the disk again) and so removing mbcache
    entry at that moment is fine and simplifies the code a bit.
    
    CC: stable@vger.kernel.org
    Fixes: 82939d7999df ("ext4: convert to mbcache2")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220712105436.32204-3-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44e84a9b776 ("ext4: fix deadlock due to mbcache entry corruption")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27c08673978ebf31d56a822b3fb3aa74c8e1e4f2
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jul 12 12:54:21 2022 +0200

    mbcache: add functions to delete entry if unused
    
    [ Upstream commit 3dc96bba65f53daa217f0a8f43edad145286a8f5 ]
    
    Add function mb_cache_entry_delete_or_get() to delete mbcache entry if
    it is unused and also add a function to wait for entry to become unused
    - mb_cache_entry_wait_unused(). We do not share code between the two
    deleting function as one of them will go away soon.
    
    CC: stable@vger.kernel.org
    Fixes: 82939d7999df ("ext4: convert to mbcache2")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220712105436.32204-2-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44e84a9b776 ("ext4: fix deadlock due to mbcache entry corruption")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb59d12ae7f9f7584e6702d4c2e26ce10210af3d
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jul 12 12:54:20 2022 +0200

    mbcache: don't reclaim used entries
    
    [ Upstream commit 58318914186c157477b978b1739dfe2f1b9dc0fe ]
    
    Do not reclaim entries that are currently used by somebody from a
    shrinker. Firstly, these entries are likely useful. Secondly, we will
    need to keep such entries to protect pending increment of xattr block
    refcount.
    
    CC: stable@vger.kernel.org
    Fixes: 82939d7999df ("ext4: convert to mbcache2")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220712105436.32204-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44e84a9b776 ("ext4: fix deadlock due to mbcache entry corruption")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c363e2961cd80389c5581e5679332aafb9cbfc0
Author: Shuqi Zhang <zhangshuqi3@huawei.com>
Date:   Wed May 25 11:01:20 2022 +0800

    ext4: use kmemdup() to replace kmalloc + memcpy
    
    [ Upstream commit 4efd9f0d120c55b08852ee5605dbb02a77089a5d ]
    
    Replace kmalloc + memcpy with kmemdup()
    
    Signed-off-by: Shuqi Zhang <zhangshuqi3@huawei.com>
    Reviewed-by: Ritesh Harjani <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20220525030120.803330-1-zhangshuqi3@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44e84a9b776 ("ext4: fix deadlock due to mbcache entry corruption")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8b7922374b00a44137e5bcdd46ef86c8b065f27
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:37 2022 -0800

    ext4: fix leaking uninitialized memory in fast-commit journal
    
    [ Upstream commit 594bc43b410316d70bb42aeff168837888d96810 ]
    
    When space at the end of fast-commit journal blocks is unused, make sure
    to zero it out so that uninitialized memory is not leaked to disk.
    
    Fixes: aa75f4d3daae ("ext4: main fast-commit commit path")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-4-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5584ba9b3b6e522d00d9d59d53e20bdf80d6745
Author: Bhaskar Chowdhury <unixbhaskar@gmail.com>
Date:   Sat Mar 27 16:00:05 2021 +0530

    ext4: fix various seppling typos
    
    [ Upstream commit 3088e5a5153cda27ec26461e5edf2821e15e802c ]
    
    Signed-off-by: Bhaskar Chowdhury <unixbhaskar@gmail.com>
    Link: https://lore.kernel.org/r/cover.1616840203.git.unixbhaskar@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adfefe804b1f2fdcfa241a1f6018f54ac9d7929e
Author: Jan Kara <jack@suse.cz>
Date:   Fri Nov 27 12:33:59 2020 +0100

    ext4: simplify ext4 error translation
    
    [ Upstream commit 02a7780e4d2fcf438ac6773bc469e7ada2af56be ]
    
    We convert errno's to ext4 on-disk format error codes in
    save_error_info(). Add a function and a bit of macro magic to make this
    simpler.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20201127113405.26867-7-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95eaa8a95358d9b4a84b53ea59281936fbecaa11
Author: Jan Kara <jack@suse.cz>
Date:   Fri Nov 27 12:33:58 2020 +0100

    ext4: move functions in super.c
    
    [ Upstream commit 4067662388f97d0f360e568820d9d5bac6a3c9fa ]
    
    Just move error info related functions in super.c close to
    ext4_handle_error(). We'll want to combine save_error_info() with
    ext4_handle_error() and this makes change more obvious and saves a
    forward declaration as well. No functional change.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20201127113405.26867-6-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 769469f8f188573431927be905aff50712b34c5a
Author: Alexander Potapenko <glider@google.com>
Date:   Mon Nov 21 12:21:30 2022 +0100

    fs: ext4: initialize fsdata in pagecache_write()
    
    [ Upstream commit 956510c0c7439e90b8103aaeaf4da92878c622f0 ]
    
    When aops->write_begin() does not initialize fsdata, KMSAN reports
    an error passing the latter to aops->write_end().
    
    Fix this by unconditionally initializing fsdata.
    
    Cc: Eric Biggers <ebiggers@kernel.org>
    Fixes: c93d8f885809 ("ext4: add basic fs-verity support")
    Reported-by: syzbot+9767be679ef5016b6082@syzkaller.appspotmail.com
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221121112134.407362-1-glider@google.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b33e42d65efe06bb6d6281238d66f4c9573910f2
Author: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date:   Sun Feb 7 11:04:23 2021 -0800

    ext4: use memcpy_to_page() in pagecache_write()
    
    [ Upstream commit bd256fda92efe97b692dc72e246d35fa724d42d8 ]
    
    Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Link: https://lore.kernel.org/r/20210207190425.38107-7-chaitanya.kulkarni@wdc.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 956510c0c743 ("fs: ext4: initialize fsdata in pagecache_write()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60d4383c1bda704c4b97f231f24bbff2e4875af1
Author: Ira Weiny <ira.weiny@intel.com>
Date:   Tue Feb 9 22:22:14 2021 -0800

    mm/highmem: Lift memcpy_[to|from]_page to core
    
    [ Upstream commit bb90d4bc7b6a536b2e4db45f4763e467c2008251 ]
    
    Working through a conversion to a call kmap_local_page() instead of
    kmap() revealed many places where the pattern kmap/memcpy/kunmap
    occurred.
    
    Eric Biggers, Matthew Wilcox, Christoph Hellwig, Dan Williams, and Al
    Viro all suggested putting this code into helper functions.  Al Viro
    further pointed out that these functions already existed in the iov_iter
    code.[1]
    
    Various locations for the lifted functions were considered.
    
    Headers like mm.h or string.h seem ok but don't really portray the
    functionality well.  pagemap.h made some sense but is for page cache
    functionality.[2]
    
    Another alternative would be to create a new header for the promoted
    memcpy functions, but it masks the fact that these are designed to copy
    to/from pages using the kernel direct mappings and complicates matters
    with a new header.
    
    Placing these functions in 'highmem.h' is suboptimal especially with the
    changes being proposed in the functionality of kmap.  From a caller
    perspective including/using 'highmem.h' implies that the functions
    defined in that header are only required when highmem is in use which is
    increasingly not the case with modern processors.  However, highmem.h is
    where all the current functions like this reside (zero_user(),
    clear_highpage(), clear_user_highpage(), copy_user_highpage(), and
    copy_highpage()).  So it makes the most sense even though it is
    distasteful for some.[3]
    
    Lift memcpy_to_page() and memcpy_from_page() to pagemap.h.
    
    [1] https://lore.kernel.org/lkml/20201013200149.GI3576660@ZenIV.linux.org.uk/
        https://lore.kernel.org/lkml/20201013112544.GA5249@infradead.org/
    
    [2] https://lore.kernel.org/lkml/20201208122316.GH7338@casper.infradead.org/
    
    [3] https://lore.kernel.org/lkml/20201013200149.GI3576660@ZenIV.linux.org.uk/#t
        https://lore.kernel.org/lkml/20201208163814.GN1563847@iweiny-DESK2.sc.intel.com/
    
    Cc: Boris Pismenny <borisp@mellanox.com>
    Cc: Or Gerlitz <gerlitz.or@gmail.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Suggested-by: Matthew Wilcox <willy@infradead.org>
    Suggested-by: Christoph Hellwig <hch@infradead.org>
    Suggested-by: Dan Williams <dan.j.williams@intel.com>
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Suggested-by: Eric Biggers <ebiggers@kernel.org>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Stable-dep-of: 956510c0c743 ("fs: ext4: initialize fsdata in pagecache_write()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f86d3338c87c6dad55030974be3b623f4771cfcf
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Nov 9 15:43:43 2022 +0800

    ext4: correct inconsistent error msg in nojournal mode
    
    [ Upstream commit 89481b5fa8c0640e62ba84c6020cee895f7ac643 ]
    
    When we used the journal_async_commit mounting option in nojournal mode,
    the kernel told me that "can't mount with journal_checksum", was very
    confusing. I find that when we mount with journal_async_commit, both the
    JOURNAL_ASYNC_COMMIT and EXPLICIT_JOURNAL_CHECKSUM flags are set. However,
    in the error branch, CHECKSUM is checked before ASYNC_COMMIT. As a result,
    the above inconsistency occurs, and the ASYNC_COMMIT branch becomes dead
    code that cannot be executed. Therefore, we exchange the positions of the
    two judgments to make the error msg more accurate.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221109074343.4184862-1-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99017eb3deee4e907350a50a10351770cc926375
Author: Jason Yan <yanaijie@huawei.com>
Date:   Fri Sep 16 22:15:12 2022 +0800

    ext4: goto right label 'failed_mount3a'
    
    [ Upstream commit 43bd6f1b49b61f43de4d4e33661b8dbe8c911f14 ]
    
    Before these two branches neither loaded the journal nor created the
    xattr cache. So the right label to goto is 'failed_mount3a'. Although
    this did not cause any issues because the error handler validated if the
    pointer is null. However this still made me confused when reading
    the code. So it's still worth to modify to goto the right label.
    
    Signed-off-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20220916141527.1012715-2-yanaijie@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 89481b5fa8c0 ("ext4: correct inconsistent error msg in nojournal mode")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56d87959c654964699d8e5de3cd9a6c933af1897
Author: Guo Ren <guoren@kernel.org>
Date:   Wed Nov 9 01:49:36 2022 -0500

    riscv: stacktrace: Fixup ftrace_graph_ret_addr retp argument
    
    [ Upstream commit 5c3022e4a616d800cf5f4c3a981d7992179e44a1 ]
    
    The 'retp' is a pointer to the return address on the stack, so we
    must pass the current return address pointer as the 'retp'
    argument to ftrace_push_return_trace(). Not parent function's
    return address on the stack.
    
    Fixes: b785ec129bd9 ("riscv/ftrace: Add HAVE_FUNCTION_GRAPH_RET_ADDR_PTR support")
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Signed-off-by: Guo Ren <guoren@kernel.org>
    Link: https://lore.kernel.org/r/20221109064937.3643993-2-guoren@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ecb8e8b2e55f05af705ccdb544f7a23ee3c3ce1b
Author: Chen Huang <chenhuang5@huawei.com>
Date:   Mon Jan 11 20:40:14 2021 +0800

    riscv/stacktrace: Fix stack output without ra on the stack top
    
    [ Upstream commit f766f77a74f5784d8d4d3c36b1900731f97d08d0 ]
    
    When a function doesn't have a callee, then it will not
    push ra into the stack, such as lkdtm_BUG() function,
    
    addi    sp,sp,-16
    sd      s0,8(sp)
    addi    s0,sp,16
    ebreak
    
    The struct stackframe use {fp,ra} to get information from
    stack, if walk_stackframe() with pr_regs, we will obtain
    wrong value and bad stacktrace,
    
    [<ffffffe00066c56c>] lkdtm_BUG+0x6/0x8
    ---[ end trace 18da3fbdf08e25d5 ]---
    
    Correct the next fp and pc, after that, full stacktrace
    shown as expects,
    
    [<ffffffe00066c56c>] lkdtm_BUG+0x6/0x8
    [<ffffffe0008b24a4>] lkdtm_do_action+0x14/0x1c
    [<ffffffe00066c372>] direct_entry+0xc0/0x10a
    [<ffffffe000439f86>] full_proxy_write+0x42/0x6a
    [<ffffffe000309626>] vfs_write+0x7e/0x214
    [<ffffffe00030992a>] ksys_write+0x98/0xc0
    [<ffffffe000309960>] sys_write+0xe/0x16
    [<ffffffe0002014bc>] ret_from_syscall+0x0/0x2
    ---[ end trace 61917f3d9a9fadcd ]---
    
    Signed-off-by: Chen Huang <chenhuang5@huawei.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Stable-dep-of: 5c3022e4a616 ("riscv: stacktrace: Fixup ftrace_graph_ret_addr retp argument")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5c75efd0a6cc181ae19244685e86f480955ffce
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    [ Upstream commit c72a7e42592b2e18d862cf120876070947000d7a ]
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5451efb2ca30f3c42b9efb8327ce35b62870dbd3
Author: Luca Ceresoli <luca.ceresoli@bootlin.com>
Date:   Wed Nov 2 12:01:02 2022 +0100

    staging: media: tegra-video: fix device_node use after free
    
    [ Upstream commit c4d344163c3a7f90712525f931a6c016bbb35e18 ]
    
    At probe time this code path is followed:
    
     * tegra_csi_init
       * tegra_csi_channels_alloc
         * for_each_child_of_node(node, channel) -- iterates over channels
           * automatically gets 'channel'
             * tegra_csi_channel_alloc()
               * saves into chan->of_node a pointer to the channel OF node
           * automatically gets and puts 'channel'
           * now the node saved in chan->of_node has refcount 0, can disappear
       * tegra_csi_channels_init
         * iterates over channels
           * tegra_csi_channel_init -- uses chan->of_node
    
    After that, chan->of_node keeps storing the node until the device is
    removed.
    
    of_node_get() the node and of_node_put() it during teardown to avoid any
    risk.
    
    Fixes: 1ebaeb09830f ("media: tegra-video: Add support for external sensor capture")
    Cc: stable@vger.kernel.org
    Cc: Sowjanya Komatineni <skomatineni@nvidia.com>
    Signed-off-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f899baf6cb0f15fe7ca8ac74054986e449444f17
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Mon Dec 19 23:35:19 2022 +0900

    x86/kprobes: Fix optprobe optimization check with CONFIG_RETHUNK
    
    [ Upstream commit 63dc6325ff41ee9e570bde705ac34a39c5dbeb44 ]
    
    Since the CONFIG_RETHUNK and CONFIG_SLS will use INT3 for stopping
    speculative execution after function return, kprobe jump optimization
    always fails on the functions with such INT3 inside the function body.
    (It already checks the INT3 padding between functions, but not inside
     the function)
    
    To avoid this issue, as same as kprobes, check whether the INT3 comes
    from kgdb or not, and if so, stop decoding and make it fail. The other
    INT3 will come from CONFIG_RETHUNK/CONFIG_SLS and those can be
    treated as a one-byte instruction.
    
    Fixes: e463a09af2f0 ("x86: Add straight-line-speculation mitigation")
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/167146051929.1374301.7419382929328081706.stgit@devnote3
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d112deb2a02701536d2b4446b8f0d843fcf6c0e
Author: Borislav Petkov <bp@suse.de>
Date:   Mon Nov 16 18:10:11 2020 +0100

    x86/kprobes: Convert to insn_decode()
    
    [ Upstream commit 77e768ec1391dc0d6cd89822aa60b9a1c1bd8128 ]
    
    Simplify code, improve decoding error checking.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Link: https://lkml.kernel.org/r/20210304174237.31945-12-bp@alien8.de
    Stable-dep-of: 63dc6325ff41 ("x86/kprobes: Fix optprobe optimization check with CONFIG_RETHUNK")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1766efc5bbffefd4ca37cc7fcf3bf08f8eed109
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Sat Nov 5 12:01:14 2022 +0900

    perf probe: Fix to get the DW_AT_decl_file and DW_AT_call_file as unsinged data
    
    [ Upstream commit a9dfc46c67b52ad43b8e335e28f4cf8002c67793 ]
    
    DWARF version 5 standard Sec 2.14 says that
    
      Any debugging information entry representing the declaration of an object,
      module, subprogram or type may have DW_AT_decl_file, DW_AT_decl_line and
      DW_AT_decl_column attributes, each of whose value is an unsigned integer
      constant.
    
    So it should be an unsigned integer data. Also, even though the standard
    doesn't clearly say the DW_AT_call_file is signed or unsigned, the
    elfutils (eu-readelf) interprets it as unsigned integer data and it is
    natural to handle it as unsigned integer data as same as DW_AT_decl_file.
    This changes the DW_AT_call_file as unsigned integer data too.
    
    Fixes: 3f4460a28fb2f73d ("perf probe: Filter out redundant inline-instances")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Link: https://lore.kernel.org/r/166761727445.480106.3738447577082071942.stgit@devnote3
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5d0f7c24088b7b2bfd26419ac05ef840d3c2799
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Tue Nov 1 22:48:39 2022 +0900

    perf probe: Use dwarf_attr_integrate as generic DWARF attr accessor
    
    [ Upstream commit f828929ab7f0dc3353e4a617f94f297fa8f3dec3 ]
    
    Use dwarf_attr_integrate() instead of dwarf_attr() for generic attribute
    acccessor functions, so that it can find the specified attribute from
    abstact origin DIE etc.
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Link: https://lore.kernel.org/r/166731051988.2100653.13595339994343449770.stgit@devnote3
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Stable-dep-of: a9dfc46c67b5 ("perf probe: Fix to get the DW_AT_decl_file and DW_AT_call_file as unsinged data")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0a3d2158437ae4ad0737f1bf052d0ee18fcd52d
Author: Smitha T Murthy <smitha.t@samsung.com>
Date:   Wed Sep 7 16:02:25 2022 +0530

    media: s5p-mfc: Fix in register read and write for H264
    
    [ Upstream commit 06710cd5d2436135046898d7e4b9408c8bb99446 ]
    
    Few of the H264 encoder registers written were not getting reflected
    since the read values were not stored and getting overwritten.
    
    Fixes: 6a9c6f681257 ("[media] s5p-mfc: Add variants to access mfc registers")
    
    Cc: stable@vger.kernel.org
    Cc: linux-fsd@tesla.com
    Signed-off-by: Smitha T Murthy <smitha.t@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ff64edf9d16e8c277dcc8189794763624e6b4b8
Author: Smitha T Murthy <smitha.t@samsung.com>
Date:   Wed Sep 7 16:02:26 2022 +0530

    media: s5p-mfc: Clear workbit to handle error condition
    
    [ Upstream commit d3f3c2fe54e30b0636496d842ffbb5ad3a547f9b ]
    
    During error on CLOSE_INSTANCE command, ctx_work_bits was not getting
    cleared. During consequent mfc execution NULL pointer dereferencing of
    this context led to kernel panic. This patch fixes this issue by making
    sure to clear ctx_work_bits always.
    
    Fixes: 818cd91ab8c6 ("[media] s5p-mfc: Extract open/close MFC instance commands")
    Cc: stable@vger.kernel.org
    Cc: linux-fsd@tesla.com
    Signed-off-by: Smitha T Murthy <smitha.t@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcd1a4ade5902691e7224f5dcf154d49ebaf49b6
Author: Smitha T Murthy <smitha.t@samsung.com>
Date:   Wed Sep 7 16:02:27 2022 +0530

    media: s5p-mfc: Fix to handle reference queue during finishing
    
    [ Upstream commit d8a46bc4e1e0446459daa77c4ce14218d32dacf9 ]
    
    On receiving last buffer driver puts MFC to MFCINST_FINISHING state which
    in turn skips transferring of frame from SRC to REF queue. This causes
    driver to stop MFC encoding and last frame is lost.
    
    This patch guarantees safe handling of frames during MFCINST_FINISHING and
    correct clearing of workbit to avoid early stopping of encoding.
    
    Fixes: af9357467810 ("[media] MFC: Add MFC 5.1 V4L2 driver")
    
    Cc: stable@vger.kernel.org
    Cc: linux-fsd@tesla.com
    Signed-off-by: Smitha T Murthy <smitha.t@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97e7896000cef10156e2ce7c55a8e4befb00dfed
Author: Yazen Ghannam <yazen.ghannam@amd.com>
Date:   Tue Jun 21 15:59:43 2022 +0000

    x86/MCE/AMD: Clear DFR errors found in THR handler
    
    [ Upstream commit bc1b705b0eee4c645ad8b3bbff3c8a66e9688362 ]
    
    AMD's MCA Thresholding feature counts errors of all severity levels, not
    just correctable errors. If a deferred error causes the threshold limit
    to be reached (it was the error that caused the overflow), then both a
    deferred error interrupt and a thresholding interrupt will be triggered.
    
    The order of the interrupts is not guaranteed. If the threshold
    interrupt handler is executed first, then it will clear MCA_STATUS for
    the error. It will not check or clear MCA_DESTAT which also holds a copy
    of the deferred error. When the deferred error interrupt handler runs it
    will not find an error in MCA_STATUS, but it will find the error in
    MCA_DESTAT. This will cause two errors to be logged.
    
    Check for deferred errors when handling a threshold interrupt. If a bank
    contains a deferred error, then clear the bank's MCA_DESTAT register.
    
    Define a new helper function to do the deferred error check and clearing
    of MCA_DESTAT.
    
      [ bp: Simplify, convert comment to passive voice. ]
    
    Fixes: 37d43acfd79f ("x86/mce/AMD: Redo error logging from APIC LVT interrupt handlers")
    Signed-off-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220621155943.33623-1-yazen.ghannam@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec75bc43681bb1fc0695168123004a50b12aa9b3
Author: Borislav Petkov <bp@suse.de>
Date:   Thu Sep 2 13:33:22 2021 +0200

    x86/mce: Get rid of msr_ops
    
    [ Upstream commit 8121b8f947be0033f567619be204639a50cad298 ]
    
    Avoid having indirect calls and use a normal function which returns the
    proper MSR address based on ->smca setting.
    
    No functional changes.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Link: https://lkml.kernel.org/r/20210922165101.18951-4-bp@alien8.de
    Stable-dep-of: bc1b705b0eee ("x86/MCE/AMD: Clear DFR errors found in THR handler")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58de7a95f0e6c6da3f40fd0c49cfaf1cc06e21cc
Author: Sasha Levin <sashal@kernel.org>
Date:   Wed Jan 4 11:14:45 2023 -0500

    btrfs: replace strncpy() with strscpy()
    
    [ Upstream commit 63d5429f68a3d4c4aa27e65a05196c17f86c41d6 ]
    
    Using strncpy() on NUL-terminated strings are deprecated.  To avoid
    possible forming of non-terminated string strscpy() should be used.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    CC: stable@vger.kernel.org # 4.9+
    Signed-off-by: Artem Chernyshev <artem.chernyshev@red-soft.ru>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a04f850092460ecba9f5ba165ac1c74ccfc2e84
Author: Alexander Antonov <alexander.antonov@linux.intel.com>
Date:   Thu Nov 17 12:28:25 2022 +0000

    perf/x86/intel/uncore: Clear attr_update properly
    
    [ Upstream commit 6532783310e2b2f50dc13f46c49aa6546cb6e7a3 ]
    
    Current clear_attr_update procedure in pmu_set_mapping() sets attr_update
    field in NULL that is not correct because intel_uncore_type pmu types can
    contain several groups in attr_update field. For example, SPR platform
    already has uncore_alias_group to update and then UPI topology group will
    be added in next patches.
    
    Fix current behavior and clear attr_update group related to mapping only.
    
    Fixes: bb42b3d39781 ("perf/x86/intel/uncore: Expose an Uncore unit to IIO PMON mapping")
    Signed-off-by: Alexander Antonov <alexander.antonov@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221117122833.3103580-4-alexander.antonov@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53d24a9592eb7a34e03f5449b67151b0a3b1ed1f
Author: Alexander Antonov <alexander.antonov@linux.intel.com>
Date:   Mon Apr 26 16:16:12 2021 +0300

    perf/x86/intel/uncore: Generalize I/O stacks to PMON mapping procedure
    
    [ Upstream commit f471fac77b41a2573c7b677ef790bf18a0e64195 ]
    
    Currently I/O stacks to IIO PMON mapping is available on Skylake servers
    only and need to make code more general to easily enable further platforms.
    So, introduce get_topology() callback in struct intel_uncore_type which
    allows to move common code to separate function and make mapping procedure
    more general.
    
    Signed-off-by: Alexander Antonov <alexander.antonov@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Link: https://lkml.kernel.org/r/20210426131614.16205-2-alexander.antonov@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9620f8a5c72f57074ac09d5e392de89f0c02d60a
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Jan 4 07:48:37 2023 -0700

    ARM: renumber bits related to _TIF_WORK_MASK
    
    commit 191f8453fc99a537ea78b727acea739782378b0d upstream.
    
    We want to ensure that the mask related to calling do_work_pending()
    is within the first 16 bits. Move bits unrelated to that outside of
    that range, to avoid spuriously calling do_work_pending() when we don't
    need to.
    
    Cc: stable@vger.kernel.org
    Fixes: 32d59773da38 ("arm: add support for TIF_NOTIFY_SIGNAL")
    Reported-and-tested-by: Hui Tang <tanghui20@huawei.com>
    Suggested-by: Russell King (Oracle) <linux@armlinux.org.uk>
    Link: https://lore.kernel.org/lkml/7ecb8f3c-2aeb-a905-0d4a-aa768b9649b5@huawei.com/
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 630270978483a63dd641c1183a179437ab4900df
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Dec 7 11:08:53 2022 -0500

    drm/amdgpu: make display pinning more flexible (v2)
    
    commit 81d0bcf9900932633d270d5bc4a54ff599c6ebdb upstream.
    
    Only apply the static threshold for Stoney and Carrizo.
    This hardware has certain requirements that don't allow
    mixing of GTT and VRAM.  Newer asics do not have these
    requirements so we should be able to be more flexible
    with where buffers end up.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2270
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2291
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2255
    Acked-by: Luben Tuikov <luben.tuikov@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfc01905b87049229fab9ef8b41dd2ecdbf6813f
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Nov 21 15:52:19 2022 -0500

    drm/amdgpu: handle polaris10/11 overlap asics (v2)
    
    commit 1d4624cd72b912b2680c08d0be48338a1629a858 upstream.
    
    Some special polaris 10 chips overlap with the polaris11
    DID range.  Handle this properly in the driver.
    
    v2: use local flags for other function calls.
    
    Acked-by: Luben Tuikov <luben.tuikov@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30e95fdc9609f79c3a9818edeafdf17ab39b2a11
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Dec 8 10:32:31 2022 +0800

    ext4: allocate extended attribute value in vmalloc area
    
    commit cc12a6f25e07ed05d5825a1664b67a970842b2ca upstream.
    
    Now, extended attribute value maximum length is 64K. The memory
    requested here does not need continuous physical addresses, so it is
    appropriate to use kvmalloc to request memory. At the same time, it
    can also cope with the situation that the extended attribute will
    become longer in the future.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221208023233.1231330-3-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d3e87d43c62ac1d0ffc9f55c47942cfe585fa56
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 12:59:28 2022 +0100

    ext4: avoid unaccounted block allocation when expanding inode
    
    commit 8994d11395f8165b3deca1971946f549f0822630 upstream.
    
    When expanding inode space in ext4_expand_extra_isize_ea() we may need
    to allocate external xattr block. If quota is not initialized for the
    inode, the block allocation will not be accounted into quota usage. Make
    sure the quota is initialized before we try to expand inode space.
    
    Reported-by: Pengfei Xu <pengfei.xu@intel.com>
    Link: https://lore.kernel.org/all/Y5BT+k6xWqthZc1P@xpf.sh.intel.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221207115937.26601-2-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15d0cf84df077fc0007df098803dc910a1a087c9
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 12:59:27 2022 +0100

    ext4: initialize quota before expanding inode in setproject ioctl
    
    commit 1485f726c6dec1a1f85438f2962feaa3d585526f upstream.
    
    Make sure we initialize quotas before possibly expanding inode space
    (and thus maybe needing to allocate external xattr block) in
    ext4_ioctl_setproject(). This prevents not accounting the necessary
    block allocation.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221207115937.26601-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9882601ee689975c1c0076ee65bf222a2a35e535
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Dec 8 10:32:33 2022 +0800

    ext4: fix inode leak in ext4_xattr_inode_create() on an error path
    
    commit e4db04f7d3dbbe16680e0ded27ea2a65b10f766a upstream.
    
    There is issue as follows when do setxattr with inject fault:
    
    [localhost]# fsck.ext4  -fn  /dev/sda
    e2fsck 1.46.6-rc1 (12-Sep-2022)
    Pass 1: Checking inodes, blocks, and sizes
    Pass 2: Checking directory structure
    Pass 3: Checking directory connectivity
    Pass 4: Checking reference counts
    Unattached zero-length inode 15.  Clear? no
    
    Unattached inode 15
    Connect to /lost+found? no
    
    Pass 5: Checking group summary information
    
    /dev/sda: ********** WARNING: Filesystem still has errors **********
    
    /dev/sda: 15/655360 files (0.0% non-contiguous), 66755/2621440 blocks
    
    This occurs in 'ext4_xattr_inode_create()'. If 'ext4_mark_inode_dirty()'
    fails, dropping i_nlink of the inode is needed. Or will lead to inode leak.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221208023233.1231330-5-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 407f47728c6cce8e37f9dbd11fd659d0fd251c46
Author: Jan Kara <jack@suse.cz>
Date:   Mon Nov 21 14:09:29 2022 +0100

    ext4: avoid BUG_ON when creating xattrs
    
    commit b40ebaf63851b3a401b0dc9263843538f64f5ce6 upstream.
    
    Commit fb0a387dcdcd ("ext4: limit block allocations for indirect-block
    files to < 2^32") added code to try to allocate xattr block with 32-bit
    block number for indirect block based files on the grounds that these
    files cannot use larger block numbers. It also added BUG_ON when
    allocated block could not fit into 32 bits. This is however bogus
    reasoning because xattr block is stored in inode->i_file_acl and
    inode->i_file_acl_hi and as such even indirect block based files can
    happily use full 48 bits for xattr block number. The proper handling
    seems to be there basically since 64-bit block number support was added.
    So remove the bogus limitation and BUG_ON.
    
    Cc: Eric Sandeen <sandeen@redhat.com>
    Fixes: fb0a387dcdcd ("ext4: limit block allocations for indirect-block files to < 2^32")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221121130929.32031-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00092b218d2b06603dda6043dac6313cb61f18a8
Author: Luís Henriques <lhenriques@suse.de>
Date:   Wed Nov 9 18:14:45 2022 +0000

    ext4: fix error code return to user-space in ext4_get_branch()
    
    commit 26d75a16af285a70863ba6a81f85d81e7e65da50 upstream.
    
    If a block is out of range in ext4_get_branch(), -ENOMEM will be returned
    to user-space.  Obviously, this error code isn't really useful.  This
    patch fixes it by making sure the right error code (-EFSCORRUPTED) is
    propagated to user-space.  EUCLEAN is more informative than ENOMEM.
    
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Link: https://lore.kernel.org/r/20221109181445.17843-1-lhenriques@suse.de
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f06c980287f165d4e8e0628de0cdcda87ffa022f
Author: Baokun Li <libaokun1@huawei.com>
Date:   Thu Nov 17 12:03:41 2022 +0800

    ext4: fix corruption when online resizing a 1K bigalloc fs
    
    commit 0aeaa2559d6d53358fca3e3fce73807367adca74 upstream.
    
    When a backup superblock is updated in update_backups(), the primary
    superblock's offset in the group (that is, sbi->s_sbh->b_blocknr) is used
    as the backup superblock's offset in its group. However, when the block
    size is 1K and bigalloc is enabled, the two offsets are not equal. This
    causes the backup group descriptors to be overwritten by the superblock
    in update_backups(). Moreover, if meta_bg is enabled, the file system will
    be corrupted because this feature uses backup group descriptors.
    
    To solve this issue, we use a more accurate ext4_group_first_block_no() as
    the offset of the backup superblock in its group.
    
    Fixes: d77147ff443b ("ext4: add support for online resizing with bigalloc")
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221117040341.1380702-4-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9404839e0c9db5a517ea83c0ca3388b39d105fdf
Author: Eric Whitney <enwlinux@gmail.com>
Date:   Thu Nov 17 10:22:07 2022 -0500

    ext4: fix delayed allocation bug in ext4_clu_mapped for bigalloc + inline
    
    commit 131294c35ed6f777bd4e79d42af13b5c41bf2775 upstream.
    
    When converting files with inline data to extents, delayed allocations
    made on a file system created with both the bigalloc and inline options
    can result in invalid extent status cache content, incorrect reserved
    cluster counts, kernel memory leaks, and potential kernel panics.
    
    With bigalloc, the code that determines whether a block must be
    delayed allocated searches the extent tree to see if that block maps
    to a previously allocated cluster.  If not, the block is delayed
    allocated, and otherwise, it isn't.  However, if the inline option is
    also used, and if the file containing the block is marked as able to
    store data inline, there isn't a valid extent tree associated with
    the file.  The current code in ext4_clu_mapped() calls
    ext4_find_extent() to search the non-existent tree for a previously
    allocated cluster anyway, which typically finds nothing, as desired.
    However, a side effect of the search can be to cache invalid content
    from the non-existent tree (garbage) in the extent status tree,
    including bogus entries in the pending reservation tree.
    
    To fix this, avoid searching the extent tree when allocating blocks
    for bigalloc + inline files that are being converted from inline to
    extent mapped.
    
    Signed-off-by: Eric Whitney <enwlinux@gmail.com>
    Link: https://lore.kernel.org/r/20221117152207.2424-1-enwlinux@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84a2f2ed49d6a4d92b354219077434c57d334620
Author: Ye Bin <yebin10@huawei.com>
Date:   Mon Nov 7 09:53:35 2022 +0800

    ext4: init quota for 'old.inode' in 'ext4_rename'
    
    commit fae381a3d79bb94aa2eb752170d47458d778b797 upstream.
    
    Syzbot found the following issue:
    ext4_parse_param: s_want_extra_isize=128
    ext4_inode_info_init: s_want_extra_isize=32
    ext4_rename: old.inode=ffff88823869a2c8 old.dir=ffff888238699828 new.inode=ffff88823869d7e8 new.dir=ffff888238699828
    __ext4_mark_inode_dirty: inode=ffff888238699828 ea_isize=32 want_ea_size=128
    __ext4_mark_inode_dirty: inode=ffff88823869a2c8 ea_isize=32 want_ea_size=128
    ext4_xattr_block_set: inode=ffff88823869a2c8
    ------------[ cut here ]------------
    WARNING: CPU: 13 PID: 2234 at fs/ext4/xattr.c:2070 ext4_xattr_block_set.cold+0x22/0x980
    Modules linked in:
    RIP: 0010:ext4_xattr_block_set.cold+0x22/0x980
    RSP: 0018:ffff888227d3f3b0 EFLAGS: 00010202
    RAX: 0000000000000001 RBX: ffff88823007a000 RCX: 0000000000000000
    RDX: 0000000000000a03 RSI: 0000000000000040 RDI: ffff888230078178
    RBP: 0000000000000000 R08: 000000000000002c R09: ffffed1075c7df8e
    R10: ffff8883ae3efc6b R11: ffffed1075c7df8d R12: 0000000000000000
    R13: ffff88823869a2c8 R14: ffff8881012e0460 R15: dffffc0000000000
    FS:  00007f350ac1f740(0000) GS:ffff8883ae200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f350a6ed6a0 CR3: 0000000237456000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     ? ext4_xattr_set_entry+0x3b7/0x2320
     ? ext4_xattr_block_set+0x0/0x2020
     ? ext4_xattr_set_entry+0x0/0x2320
     ? ext4_xattr_check_entries+0x77/0x310
     ? ext4_xattr_ibody_set+0x23b/0x340
     ext4_xattr_move_to_block+0x594/0x720
     ext4_expand_extra_isize_ea+0x59a/0x10f0
     __ext4_expand_extra_isize+0x278/0x3f0
     __ext4_mark_inode_dirty.cold+0x347/0x410
     ext4_rename+0xed3/0x174f
     vfs_rename+0x13a7/0x2510
     do_renameat2+0x55d/0x920
     __x64_sys_rename+0x7d/0xb0
     do_syscall_64+0x3b/0xa0
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    As 'ext4_rename' will modify 'old.inode' ctime and mark inode dirty,
    which may trigger expand 'extra_isize' and allocate block. If inode
    didn't init quota will lead to warning.  To solve above issue, init
    'old.inode' firstly in 'ext4_rename'.
    
    Reported-by: syzbot+98346927678ac3059c77@syzkaller.appspotmail.com
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221107015335.2524319-1-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71e99ec1315fe98d322b17b9a28f204aaf15ffee
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:10 2022 +0800

    ext4: fix bug_on in __es_tree_search caused by bad boot loader inode
    
    commit 991ed014de0840c5dc405b679168924afb2952ac upstream.
    
    We got a issue as fllows:
    ==================================================================
     kernel BUG at fs/ext4/extents_status.c:203!
     invalid opcode: 0000 [#1] PREEMPT SMP
     CPU: 1 PID: 945 Comm: cat Not tainted 6.0.0-next-20221007-dirty #349
     RIP: 0010:ext4_es_end.isra.0+0x34/0x42
     RSP: 0018:ffffc9000143b768 EFLAGS: 00010203
     RAX: 0000000000000000 RBX: ffff8881769cd0b8 RCX: 0000000000000000
     RDX: 0000000000000000 RSI: ffffffff8fc27cf7 RDI: 00000000ffffffff
     RBP: ffff8881769cd0bc R08: 0000000000000000 R09: ffffc9000143b5f8
     R10: 0000000000000001 R11: 0000000000000001 R12: ffff8881769cd0a0
     R13: ffff8881768e5668 R14: 00000000768e52f0 R15: 0000000000000000
     FS: 00007f359f7f05c0(0000)GS:ffff88842fd00000(0000)knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007f359f5a2000 CR3: 000000017130c000 CR4: 00000000000006e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      __es_tree_search.isra.0+0x6d/0xf5
      ext4_es_cache_extent+0xfa/0x230
      ext4_cache_extents+0xd2/0x110
      ext4_find_extent+0x5d5/0x8c0
      ext4_ext_map_blocks+0x9c/0x1d30
      ext4_map_blocks+0x431/0xa50
      ext4_mpage_readpages+0x48e/0xe40
      ext4_readahead+0x47/0x50
      read_pages+0x82/0x530
      page_cache_ra_unbounded+0x199/0x2a0
      do_page_cache_ra+0x47/0x70
      page_cache_ra_order+0x242/0x400
      ondemand_readahead+0x1e8/0x4b0
      page_cache_sync_ra+0xf4/0x110
      filemap_get_pages+0x131/0xb20
      filemap_read+0xda/0x4b0
      generic_file_read_iter+0x13a/0x250
      ext4_file_read_iter+0x59/0x1d0
      vfs_read+0x28f/0x460
      ksys_read+0x73/0x160
      __x64_sys_read+0x1e/0x30
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
    ==================================================================
    
    In the above issue, ioctl invokes the swap_inode_boot_loader function to
    swap inode<5> and inode<12>. However, inode<5> contain incorrect imode and
    disordered extents, and i_nlink is set to 1. The extents check for inode in
    the ext4_iget function can be bypassed bacause 5 is EXT4_BOOT_LOADER_INO.
    While links_count is set to 1, the extents are not initialized in
    swap_inode_boot_loader. After the ioctl command is executed successfully,
    the extents are swapped to inode<12>, in this case, run the `cat` command
    to view inode<12>. And Bug_ON is triggered due to the incorrect extents.
    
    When the boot loader inode is not initialized, its imode can be one of the
    following:
    1) the imode is a bad type, which is marked as bad_inode in ext4_iget and
       set to S_IFREG.
    2) the imode is good type but not S_IFREG.
    3) the imode is S_IFREG.
    
    The BUG_ON may be triggered by bypassing the check in cases 1 and 2.
    Therefore, when the boot loader inode is bad_inode or its imode is not
    S_IFREG, initialize the inode to avoid triggering the BUG.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-5-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9020f56a3cad1c97b81c7dab2aa67027b59c8f73
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Jun 29 19:26:47 2022 +0800

    ext4: check and assert if marking an no_delete evicting inode dirty
    
    commit 318cdc822c63b6e2befcfdc2088378ae6fa18def upstream.
    
    In ext4_evict_inode(), if we evicting an inode in the 'no_delete' path,
    it cannot be raced by another mark_inode_dirty(). If it happens,
    someone else may accidentally dirty it without holding inode refcount
    and probably cause use-after-free issues in the writeback procedure.
    It's indiscoverable and hard to debug, so add an WARN_ON_ONCE() to
    check and detect this issue in advance.
    
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220629112647.4141034-2-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86c2a2ec4bd3c7c74cbdc0c30fbf16e5862d834e
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Dec 8 11:34:24 2022 +0800

    ext4: fix reserved cluster accounting in __es_remove_extent()
    
    commit 1da18e38cb97e9521e93d63034521a9649524f64 upstream.
    
    When bigalloc is enabled, reserved cluster accounting for delayed
    allocation is handled in extent_status.c.  With a corrupted file
    system, it's possible for this accounting to be incorrect,
    dsicovered by Syzbot:
    
    EXT4-fs error (device loop0): ext4_validate_block_bitmap:398: comm rep:
            bg 0: block 5: invalid block bitmap
    EXT4-fs (loop0): Delayed block allocation failed for inode 18 at logical
            offset 0 with max blocks 32 with error 28
    EXT4-fs (loop0): This should not happen!! Data will be lost
    
    EXT4-fs (loop0): Total free blocks count 0
    EXT4-fs (loop0): Free/Dirty block details
    EXT4-fs (loop0): free_blocks=0
    EXT4-fs (loop0): dirty_blocks=32
    EXT4-fs (loop0): Block reservation details
    EXT4-fs (loop0): i_reserved_data_blocks=2
    EXT4-fs (loop0): Inode 18 (00000000845cd634):
            i_reserved_data_blocks (1) not cleared!
    
    Above issue happens as follows:
    Assume:
    sbi->s_cluster_ratio = 16
    Step1:
    Insert delay block [0, 31] -> ei->i_reserved_data_blocks=2
    Step2:
    ext4_writepages
      mpage_map_and_submit_extent -> return failed
      mpage_release_unused_pages -> to release [0, 30]
        ext4_es_remove_extent -> remove lblk=0 end=30
          __es_remove_extent -> len1=0 len2=31-30=1
     __es_remove_extent:
     ...
     if (len2 > 0) {
      ...
              if (len1 > 0) {
                      ...
              } else {
                    es->es_lblk = end + 1;
                    es->es_len = len2;
                    ...
              }
            if (count_reserved)
                    count_rsvd(inode, lblk, ...);
            goto out; -> will return but didn't calculate 'reserved'
     ...
    Step3:
    ext4_destroy_inode -> trigger "i_reserved_data_blocks (1) not cleared!"
    
    To solve above issue if 'len2>0' call 'get_rsvd()' before goto out.
    
    Reported-by: syzbot+05a0f0ccab4a25626e38@syzkaller.appspotmail.com
    Fixes: 8fcc3a580651 ("ext4: rework reserved cluster accounting when invalidating pages")
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Eric Whitney <enwlinux@gmail.com>
    Link: https://lore.kernel.org/r/20221208033426.1832460-2-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98004f926d27eaccdd2d336b7916a42e07392da1
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:07 2022 +0800

    ext4: fix bug_on in __es_tree_search caused by bad quota inode
    
    commit d323877484765aaacbb2769b06e355c2041ed115 upstream.
    
    We got a issue as fllows:
    ==================================================================
     kernel BUG at fs/ext4/extents_status.c:202!
     invalid opcode: 0000 [#1] PREEMPT SMP
     CPU: 1 PID: 810 Comm: mount Not tainted 6.1.0-rc1-next-g9631525255e3 #352
     RIP: 0010:__es_tree_search.isra.0+0xb8/0xe0
     RSP: 0018:ffffc90001227900 EFLAGS: 00010202
     RAX: 0000000000000000 RBX: 0000000077512a0f RCX: 0000000000000000
     RDX: 0000000000000002 RSI: 0000000000002a10 RDI: ffff8881004cd0c8
     RBP: ffff888177512ac8 R08: 47ffffffffffffff R09: 0000000000000001
     R10: 0000000000000001 R11: 00000000000679af R12: 0000000000002a10
     R13: ffff888177512d88 R14: 0000000077512a10 R15: 0000000000000000
     FS: 00007f4bd76dbc40(0000)GS:ffff88842fd00000(0000)knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00005653bf993cf8 CR3: 000000017bfdf000 CR4: 00000000000006e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      ext4_es_cache_extent+0xe2/0x210
      ext4_cache_extents+0xd2/0x110
      ext4_find_extent+0x5d5/0x8c0
      ext4_ext_map_blocks+0x9c/0x1d30
      ext4_map_blocks+0x431/0xa50
      ext4_getblk+0x82/0x340
      ext4_bread+0x14/0x110
      ext4_quota_read+0xf0/0x180
      v2_read_header+0x24/0x90
      v2_check_quota_file+0x2f/0xa0
      dquot_load_quota_sb+0x26c/0x760
      dquot_load_quota_inode+0xa5/0x190
      ext4_enable_quotas+0x14c/0x300
      __ext4_fill_super+0x31cc/0x32c0
      ext4_fill_super+0x115/0x2d0
      get_tree_bdev+0x1d2/0x360
      ext4_get_tree+0x19/0x30
      vfs_get_tree+0x26/0xe0
      path_mount+0x81d/0xfc0
      do_mount+0x8d/0xc0
      __x64_sys_mount+0xc0/0x160
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
    ==================================================================
    
    Above issue may happen as follows:
    -------------------------------------
    ext4_fill_super
     ext4_orphan_cleanup
      ext4_enable_quotas
       ext4_quota_enable
        ext4_iget --> get error inode <5>
         ext4_ext_check_inode --> Wrong imode makes it escape inspection
         make_bad_inode(inode) --> EXT4_BOOT_LOADER_INO set imode
        dquot_load_quota_inode
         vfs_setup_quota_inode --> check pass
         dquot_load_quota_sb
          v2_check_quota_file
           v2_read_header
            ext4_quota_read
             ext4_bread
              ext4_getblk
               ext4_map_blocks
                ext4_ext_map_blocks
                 ext4_find_extent
                  ext4_cache_extents
                   ext4_es_cache_extent
                    __es_tree_search.isra.0
                     ext4_es_end --> Wrong extents trigger BUG_ON
    
    In the above issue, s_usr_quota_inum is set to 5, but inode<5> contains
    incorrect imode and disordered extents. Because 5 is EXT4_BOOT_LOADER_INO,
    the ext4_ext_check_inode check in the ext4_iget function can be bypassed,
    finally, the extents that are not checked trigger the BUG_ON in the
    __es_tree_search function. To solve this issue, check whether the inode is
    bad_inode in vfs_setup_quota_inode().
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-2-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20af66617eef36797340f0ef02d23e913a4c9a91
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:08 2022 +0800

    ext4: add helper to check quota inums
    
    commit 07342ec259df2a35d6a34aebce010567a80a0e15 upstream.
    
    Before quota is enabled, a check on the preset quota inums in
    ext4_super_block is added to prevent wrong quota inodes from being loaded.
    In addition, when the quota fails to be enabled, the quota type and quota
    inum are printed to facilitate fault locating.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0a738875c2e9c8c3366d792f8bf7fe508d5e5a5
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:09 2022 +0800

    ext4: add EXT4_IGET_BAD flag to prevent unexpected bad inode
    
    commit 63b1e9bccb71fe7d7e3ddc9877dbdc85e5d2d023 upstream.
    
    There are many places that will get unhappy (and crash) when ext4_iget()
    returns a bad inode. However, if iget the boot loader inode, allows a bad
    inode to be returned, because the inode may not be initialized. This
    mechanism can be used to bypass some checks and cause panic. To solve this
    problem, we add a special iget flag EXT4_IGET_BAD. Only with this flag
    we'd be returning bad inode from ext4_iget(), otherwise we always return
    the error code if the inode is bad inode.(suggested by Jan Kara)
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-4-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9cd6980800bbfd11bf94eb5f942049d4d4eaa52
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Oct 31 13:58:33 2022 +0800

    ext4: fix undefined behavior in bit shift for ext4_check_flag_values
    
    commit 3bf678a0f9c017c9ba7c581541dbc8453452a7ae upstream.
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in fs/ext4/ext4.h:591:2
    left shift of 1 by 31 places cannot be represented in type 'int'
    Call Trace:
     <TASK>
     dump_stack_lvl+0x7d/0xa5
     dump_stack+0x15/0x1b
     ubsan_epilogue+0xe/0x4e
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x20c
     ext4_init_fs+0x5a/0x277
     do_one_initcall+0x76/0x430
     kernel_init_freeable+0x3b3/0x422
     kernel_init+0x24/0x1e0
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: 9a4c80194713 ("ext4: ensure Inode flags consistency are checked at build time")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221031055833.3966222-1-cuigaosheng1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7223d5e75f26352354ea2c0ccf8b579821b52adf
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Nov 2 16:06:33 2022 +0800

    ext4: fix use-after-free in ext4_orphan_cleanup
    
    commit a71248b1accb2b42e4980afef4fa4a27fa0e36f5 upstream.
    
    I caught a issue as follows:
    ==================================================================
     BUG: KASAN: use-after-free in __list_add_valid+0x28/0x1a0
     Read of size 8 at addr ffff88814b13f378 by task mount/710
    
     CPU: 1 PID: 710 Comm: mount Not tainted 6.1.0-rc3-next #370
     Call Trace:
      <TASK>
      dump_stack_lvl+0x73/0x9f
      print_report+0x25d/0x759
      kasan_report+0xc0/0x120
      __asan_load8+0x99/0x140
      __list_add_valid+0x28/0x1a0
      ext4_orphan_cleanup+0x564/0x9d0 [ext4]
      __ext4_fill_super+0x48e2/0x5300 [ext4]
      ext4_fill_super+0x19f/0x3a0 [ext4]
      get_tree_bdev+0x27b/0x450
      ext4_get_tree+0x19/0x30 [ext4]
      vfs_get_tree+0x49/0x150
      path_mount+0xaae/0x1350
      do_mount+0xe2/0x110
      __x64_sys_mount+0xf0/0x190
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
     [...]
    ==================================================================
    
    Above issue may happen as follows:
    -------------------------------------
    ext4_fill_super
      ext4_orphan_cleanup
       --- loop1: assume last_orphan is 12 ---
        list_add(&EXT4_I(inode)->i_orphan, &EXT4_SB(sb)->s_orphan)
        ext4_truncate --> return 0
          ext4_inode_attach_jinode --> return -ENOMEM
        iput(inode) --> free inode<12>
       --- loop2: last_orphan is still 12 ---
        list_add(&EXT4_I(inode)->i_orphan, &EXT4_SB(sb)->s_orphan);
        // use inode<12> and trigger UAF
    
    To solve this issue, we need to propagate the return value of
    ext4_inode_attach_jinode() appropriately.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221102080633.1630225-1-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6d18d6e2d068e6d1e62f7d8cd1a1a2139c7b3df
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Aug 17 21:27:01 2022 +0800

    ext4: add inode table check in __ext4_get_inode_loc to aovid possible infinite loop
    
    commit eee22187b53611e173161e38f61de1c7ecbeb876 upstream.
    
    In do_writepages, if the value returned by ext4_writepages is "-ENOMEM"
    and "wbc->sync_mode == WB_SYNC_ALL", retry until the condition is not met.
    
    In __ext4_get_inode_loc, if the bh returned by sb_getblk is NULL,
    the function returns -ENOMEM.
    
    In __getblk_slow, if the return value of grow_buffers is less than 0,
    the function returns NULL.
    
    When the three processes are connected in series like the following stack,
    an infinite loop may occur:
    
    do_writepages                                   <--- keep retrying
     ext4_writepages
      mpage_map_and_submit_extent
       mpage_map_one_extent
        ext4_map_blocks
         ext4_ext_map_blocks
          ext4_ext_handle_unwritten_extents
           ext4_ext_convert_to_initialized
            ext4_split_extent
             ext4_split_extent_at
              __ext4_ext_dirty
               __ext4_mark_inode_dirty
                ext4_reserve_inode_write
                 ext4_get_inode_loc
                  __ext4_get_inode_loc              <--- return -ENOMEM
                   sb_getblk
                    __getblk_gfp
                     __getblk_slow                  <--- return NULL
                      grow_buffers
                       grow_dev_page                <--- return -ENXIO
                        ret = (block < end_block) ? 1 : -ENXIO;
    
    In this issue, bg_inode_table_hi is overwritten as an incorrect value.
    As a result, `block < end_block` cannot be met in grow_dev_page.
    Therefore, __ext4_get_inode_loc always returns '-ENOMEM' and do_writepages
    keeps retrying. As a result, the writeback process is in the D state due
    to an infinite loop.
    
    Add a check on inode table block in the __ext4_get_inode_loc function by
    referring to ext4_read_inode_bitmap to avoid this infinite loop.
    
    Cc: stable@kernel.org
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20220817132701.3015912-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdc698ce91f232fd5eb11d2373e9f82f687314b8
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Jun 29 19:26:46 2022 +0800

    ext4: silence the warning when evicting inode with dioread_nolock
    
    commit bc12ac98ea2e1b70adc6478c8b473a0003b659d3 upstream.
    
    When evicting an inode with default dioread_nolock, it could be raced by
    the unwritten extents converting kworker after writeback some new
    allocated dirty blocks. It convert unwritten extents to written, the
    extents could be merged to upper level and free extent blocks, so it
    could mark the inode dirty again even this inode has been marked
    I_FREEING. But the inode->i_io_list check and warning in
    ext4_evict_inode() missing this corner case. Fortunately,
    ext4_evict_inode() will wait all extents converting finished before this
    check, so it will not lead to inode use-after-free problem, every thing
    is OK besides this warning. The WARN_ON_ONCE was originally designed
    for finding inode use-after-free issues in advance, but if we add
    current dioread_nolock case in, it will become not quite useful, so fix
    this warning by just remove this check.
    
     ======
     WARNING: CPU: 7 PID: 1092 at fs/ext4/inode.c:227
     ext4_evict_inode+0x875/0xc60
     ...
     RIP: 0010:ext4_evict_inode+0x875/0xc60
     ...
     Call Trace:
      <TASK>
      evict+0x11c/0x2b0
      iput+0x236/0x3a0
      do_unlinkat+0x1b4/0x490
      __x64_sys_unlinkat+0x4c/0xb0
      do_syscall_64+0x3b/0x90
      entry_SYSCALL_64_after_hwframe+0x46/0xb0
     RIP: 0033:0x7fa933c1115b
     ======
    
    rm                          kworker
                                ext4_end_io_end()
    vfs_unlink()
     ext4_unlink()
                                 ext4_convert_unwritten_io_end_vec()
                                  ext4_convert_unwritten_extents()
                                   ext4_map_blocks()
                                    ext4_ext_map_blocks()
                                     ext4_ext_try_to_merge_up()
                                      __mark_inode_dirty()
                                       check !I_FREEING
                                       locked_inode_to_wb_and_lock_list()
     iput()
      iput_final()
       evict()
        ext4_evict_inode()
         truncate_inode_pages_final() //wait release io_end
                                        inode_io_list_move_locked()
                                 ext4_release_io_end()
         trigger WARN_ON_ONCE()
    
    Cc: stable@kernel.org
    Fixes: ceff86fddae8 ("ext4: Avoid freeing inodes on dirty list")
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220629112647.4141034-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68af1a4842b4e69e1ac4a3488fad387972e98ee0
Author: Yuan Can <yuancan@huawei.com>
Date:   Fri Nov 4 06:45:12 2022 +0000

    drm/ingenic: Fix missing platform_driver_unregister() call in ingenic_drm_init()
    
    commit 47078311b8efebdefd5b3b2f87e2b02b14f49c66 upstream.
    
    A problem about modprobe ingenic-drm failed is triggered with the following
    log given:
    
     [  303.561088] Error: Driver 'ingenic-ipu' is already registered, aborting...
     modprobe: ERROR: could not insert 'ingenic_drm': Device or resource busy
    
    The reason is that ingenic_drm_init() returns platform_driver_register()
    directly without checking its return value, if platform_driver_register()
    failed, it returns without unregistering ingenic_ipu_driver_ptr, resulting
    the ingenic-drm can never be installed later.
    A simple call graph is shown as below:
    
     ingenic_drm_init()
       platform_driver_register() # ingenic_ipu_driver_ptr are registered
       platform_driver_register()
         driver_register()
           bus_add_driver()
             priv = kzalloc(...) # OOM happened
       # return without unregister ingenic_ipu_driver_ptr
    
    Fixing this problem by checking the return value of
    platform_driver_register() and do platform_unregister_drivers() if
    error happened.
    
    Fixes: fc1acf317b01 ("drm/ingenic: Add support for the IPU")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221104064512.8569-1-yuancan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf83a303f2b56fc996ee9afd53a0a2cc71ffffad
Author: Mikko Kovanen <mikko.kovanen@aavamobile.com>
Date:   Sat Nov 26 13:27:13 2022 +0000

    drm/i915/dsi: fix VBT send packet port selection for dual link DSI
    
    commit f9cdf4130671d767071607d0a7568c9bd36a68d0 upstream.
    
    intel_dsi->ports contains bitmask of enabled ports and correspondingly
    logic for selecting port for VBT packet sending must use port specific
    bitmask when deciding appropriate port.
    
    Fixes: 08c59dde71b7 ("drm/i915/dsi: fix VBT send packet port selection for ICL+")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mikko Kovanen <mikko.kovanen@aavamobile.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/DBBPR09MB466592B16885D99ABBF2393A91119@DBBPR09MB4665.eurprd09.prod.outlook.com
    (cherry picked from commit 8d58bb7991c45f6b60710cc04c9498c6ea96db90)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 439cbbc1519547f9a7b483f0de33b556ebfec901
Author: Zack Rusin <zackr@vmware.com>
Date:   Tue Oct 25 23:19:35 2022 -0400

    drm/vmwgfx: Validate the box size for the snooped cursor
    
    commit 4cf949c7fafe21e085a4ee386bb2dade9067316e upstream.
    
    Invalid userspace dma surface copies could potentially overflow
    the memcpy from the surface to the snooped image leading to crashes.
    To fix it the dimensions of the copybox have to be validated
    against the expected size of the snooped cursor.
    
    Signed-off-by: Zack Rusin <zackr@vmware.com>
    Fixes: 2ac863719e51 ("vmwgfx: Snoop DMA transfers with non-covering sizes")
    Cc: <stable@vger.kernel.org> # v3.2+
    Reviewed-by: Michael Banack <banackm@vmware.com>
    Reviewed-by: Martin Krastev <krastevm@vmware.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026031936.1004280-1-zack@kde.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a0662d597de4e6bf120ed8c89edfad33be343b6
Author: Simon Ser <contact@emersion.fr>
Date:   Mon Oct 17 15:32:01 2022 +0000

    drm/connector: send hotplug uevent on connector cleanup
    
    commit 6fdc2d490ea1369d17afd7e6eb66fecc5b7209bc upstream.
    
    A typical DP-MST unplug removes a KMS connector. However care must
    be taken to properly synchronize with user-space. The expected
    sequence of events is the following:
    
    1. The kernel notices that the DP-MST port is gone.
    2. The kernel marks the connector as disconnected, then sends a
       uevent to make user-space re-scan the connector list.
    3. User-space notices the connector goes from connected to disconnected,
       disables it.
    4. Kernel handles the IOCTL disabling the connector. On success,
       the very last reference to the struct drm_connector is dropped and
       drm_connector_cleanup() is called.
    5. The connector is removed from the list, and a uevent is sent to tell
       user-space that the connector disappeared.
    
    The very last step was missing. As a result, user-space thought the
    connector still existed and could try to disable it again. Since the
    kernel no longer knows about the connector, that would end up with
    EINVAL and confused user-space.
    
    Fix this by sending a hotplug uevent from drm_connector_cleanup().
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Cc: stable@vger.kernel.org
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Jonas Ådahl <jadahl@redhat.com>
    Tested-by: Jonas Ådahl <jadahl@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221017153150.60675-2-contact@emersion.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21a773ec89946522690132b09e5d0bec13bb5d0f
Author: Wang Weiyang <wangweiyang2@huawei.com>
Date:   Tue Oct 25 19:31:01 2022 +0800

    device_cgroup: Roll back to original exceptions after copy failure
    
    commit e68bfbd3b3c3a0ec3cf8c230996ad8cabe90322f upstream.
    
    When add the 'a *:* rwm' entry to devcgroup A's whitelist, at first A's
    exceptions will be cleaned and A's behavior is changed to
    DEVCG_DEFAULT_ALLOW. Then parent's exceptions will be copyed to A's
    whitelist. If copy failure occurs, just return leaving A to grant
    permissions to all devices. And A may grant more permissions than
    parent.
    
    Backup A's whitelist and recover original exceptions after copy
    failure.
    
    Cc: stable@vger.kernel.org
    Fixes: 4cef7299b478 ("device_cgroup: add proper checking when changing default behavior")
    Signed-off-by: Wang Weiyang <wangweiyang2@huawei.com>
    Reviewed-by: Aristeu Rozanski <aris@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3505c187b86136250b39e62c72a3a70435277af6
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 17 10:45:14 2022 +0800

    parisc: led: Fix potential null-ptr-deref in start_task()
    
    commit 41f563ab3c33698bdfc3403c7c2e6c94e73681e4 upstream.
    
    start_task() calls create_singlethread_workqueue() and not checked the
    ret value, which may return NULL. And a null-ptr-deref may happen:
    
    start_task()
        create_singlethread_workqueue() # failed, led_wq is NULL
        queue_delayed_work()
            queue_delayed_work_on()
                __queue_delayed_work()  # warning here, but continue
                    __queue_work()      # access wq->flags, null-ptr-deref
    
    Check the ret value and return -ENOMEM if it is NULL.
    
    Fixes: 3499495205a6 ("[PARISC] Use work queue in LED/LCD driver instead of tasklet.")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c7c487cd85083d1aa1a403372e1ad576a3efeb4
Author: Maria Yu <quic_aiquny@quicinc.com>
Date:   Tue Dec 6 09:59:57 2022 +0800

    remoteproc: core: Do pm_relax when in RPROC_OFFLINE state
    
    commit 11c7f9e3131ad14b27a957496088fa488b153a48 upstream.
    
    Make sure that pm_relax() happens even when the remoteproc
    is stopped before the crash handler work is scheduled.
    
    Signed-off-by: Maria Yu <quic_aiquny@quicinc.com>
    Cc: stable <stable@vger.kernel.org>
    Fixes: a781e5aa5911 ("remoteproc: core: Prevent system suspend during remoteproc recovery")
    Link: https://lore.kernel.org/r/20221206015957.2616-2-quic_aiquny@quicinc.com
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e291dea722decb58b177451a24ae88be791db849
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Mon Sep 19 10:56:37 2022 -0500

    iommu/amd: Fix ivrs_acpihid cmdline parsing code
    
    commit 5f18e9f8868c6d4eae71678e7ebd4977b7d8c8cf upstream.
    
    The second (UID) strcmp in acpi_dev_hid_uid_match considers
    "0" and "00" different, which can prevent device registration.
    
    Have the AMD IOMMU driver's ivrs_acpihid parsing code remove
    any leading zeroes to make the UID strcmp succeed.  Now users
    can safely specify "AMDxxxxx:00" or "AMDxxxxx:0" and expect
    the same behaviour.
    
    Fixes: ca3bf5d47cec ("iommu/amd: Introduces ivrs_acpihid kernel parameter")
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Cc: stable@vger.kernel.org
    Cc: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
    Cc: Joerg Roedel <jroedel@suse.de>
    Link: https://lore.kernel.org/r/20220919155638.391481-1-kim.phillips@amd.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28e71fd8d5d9b1792f33cf86cbd9fcb53e1b7987
Author: Isaac J. Manjarres <isaacmanjarres@google.com>
Date:   Tue Sep 20 17:14:13 2022 -0700

    driver core: Fix bus_type.match() error handling in __driver_attach()
    
    commit 27c0d217340e47ec995557f61423ef415afba987 upstream.
    
    When a driver registers with a bus, it will attempt to match with every
    device on the bus through the __driver_attach() function. Currently, if
    the bus_type.match() function encounters an error that is not
    -EPROBE_DEFER, __driver_attach() will return a negative error code, which
    causes the driver registration logic to stop trying to match with the
    remaining devices on the bus.
    
    This behavior is not correct; a failure while matching a driver to a
    device does not mean that the driver won't be able to match and bind
    with other devices on the bus. Update the logic in __driver_attach()
    to reflect this.
    
    Fixes: 656b8035b0ee ("ARM: 8524/1: driver cohandle -EPROBE_DEFER from bus_type.match()")
    Cc: stable@vger.kernel.org
    Cc: Saravana Kannan <saravanak@google.com>
    Signed-off-by: Isaac J. Manjarres <isaacmanjarres@google.com>
    Link: https://lore.kernel.org/r/20220921001414.4046492-1-isaacmanjarres@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 772dbbfc208437a43b7dfa4bce1a30f3598e61ca
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Thu Oct 6 04:34:19 2022 +0000

    crypto: n2 - add missing hash statesize
    
    commit 76a4e874593543a2dff91d249c95bac728df2774 upstream.
    
    Add missing statesize to hash templates.
    This is mandatory otherwise no algorithms can be registered as the core
    requires statesize to be set.
    
    CC: stable@kernel.org # 4.3+
    Reported-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Tested-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Fixes: 0a625fd2abaa ("crypto: n2 - Add Niagara2 crypto driver")
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c44205748edc229d580a6beaec1efe4a7b38ec1
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue Nov 8 17:05:59 2022 -0600

    PCI/sysfs: Fix double free in error path
    
    commit aa382ffa705bea9931ec92b6f3c70e1fdb372195 upstream.
    
    When pci_create_attr() fails, pci_remove_resource_files() is called which
    will iterate over the res_attr[_wc] arrays and frees every non NULL entry.
    To avoid a double free here set the array entry only after it's clear we
    successfully initialized it.
    
    Fixes: b562ec8f74e4 ("PCI: Don't leak memory if sysfs_create_bin_file() fails")
    Link: https://lore.kernel.org/r/20221007070735.GX986@pengutronix.de/
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99ef6cc791584495987dd11b14769b450dfa5820
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Wed Oct 26 02:11:21 2022 -0400

    PCI: Fix pci_device_is_present() for VFs by checking PF
    
    commit 98b04dd0b4577894520493d96bc4623387767445 upstream.
    
    pci_device_is_present() previously didn't work for VFs because it reads the
    Vendor and Device ID, which are 0xffff for VFs, which looks like they
    aren't present.  Check the PF instead.
    
    Wei Gong reported that if virtio I/O is in progress when the driver is
    unbound or "0" is written to /sys/.../sriov_numvfs, the virtio I/O
    operation hangs, which may result in output like this:
    
      task:bash state:D stack:    0 pid: 1773 ppid:  1241 flags:0x00004002
      Call Trace:
       schedule+0x4f/0xc0
       blk_mq_freeze_queue_wait+0x69/0xa0
       blk_mq_freeze_queue+0x1b/0x20
       blk_cleanup_queue+0x3d/0xd0
       virtblk_remove+0x3c/0xb0 [virtio_blk]
       virtio_dev_remove+0x4b/0x80
       ...
       device_unregister+0x1b/0x60
       unregister_virtio_device+0x18/0x30
       virtio_pci_remove+0x41/0x80
       pci_device_remove+0x3e/0xb0
    
    This happened because pci_device_is_present(VF) returned "false" in
    virtio_pci_remove(), so it called virtio_break_device().  The broken vq
    meant that vring_interrupt() skipped the vq.callback() that would have
    completed the virtio I/O operation via virtblk_done().
    
    [bhelgaas: commit log, simplify to always use pci_physfn(), add stable tag]
    Link: https://lore.kernel.org/r/20221026060912.173250-1-mst@redhat.com
    Reported-by: Wei Gong <gongwei833x@gmail.com>
    Tested-by: Wei Gong <gongwei833x@gmail.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f29d127b372e1b7662397d92341d9f7de198ff99
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Nov 15 16:17:43 2022 +0300

    ipmi: fix use after free in _ipmi_destroy_user()
    
    commit a92ce570c81dc0feaeb12a429b4bc65686d17967 upstream.
    
    The intf_free() function frees the "intf" pointer so we cannot
    dereference it again on the next line.
    
    Fixes: cbb79863fc31 ("ipmi: Don't allow device module unload when in use")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Message-Id: <Y3M8xa1drZv4CToE@kili>
    Cc: <stable@vger.kernel.org> # 5.5+
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfe1e039a0fdeafdf6bdfed037fd13ec4b86372b
Author: Huaxin Lu <luhuaxin1@huawei.com>
Date:   Thu Nov 3 00:09:49 2022 +0800

    ima: Fix a potential NULL pointer access in ima_restore_measurement_list
    
    commit 11220db412edae8dba58853238f53258268bdb88 upstream.
    
    In restore_template_fmt, when kstrdup fails, a non-NULL value will still be
    returned, which causes a NULL pointer access in template_desc_init_fields.
    
    Fixes: c7d09367702e ("ima: support restoring multiple template formats")
    Cc: stable@kernel.org
    Co-developed-by: Jiaming Li <lijiaming30@huawei.com>
    Signed-off-by: Jiaming Li <lijiaming30@huawei.com>
    Signed-off-by: Huaxin Lu <luhuaxin1@huawei.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62307558e71eda3fea488ddf50a3b76bcbe91787
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Nov 19 09:14:12 2021 +0100

    mtd: spi-nor: Check for zero erase size in spi_nor_find_best_erase_type()
    
    commit 2ebc336be08160debfe27f87660cf550d710f3e9 upstream.
    
    Erase can be zeroed in spi_nor_parse_4bait() or
    spi_nor_init_non_uniform_erase_map(). In practice it happened with
    mt25qu256a, which supports 4K, 32K, 64K erases with 3b address commands,
    but only 4K and 64K erase with 4b address commands.
    
    Fixes: dc92843159a7 ("mtd: spi-nor: fix erase_type array to indicate current map conf")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211119081412.29732-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e17819cb3023ef40dd4a1d1694d631cca69df04
Author: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
Date:   Fri Oct 7 17:26:16 2022 +0800

    ipmi: fix long wait in unload when IPMI disconnect
    
    commit f6f1234d98cce69578bfac79df147a1f6660596c upstream.
    
    When fixing the problem mentioned in PATCH1, we also found
    the following problem:
    
    If the IPMI is disconnected and in the sending process, the
    uninstallation driver will be stuck for a long time.
    
    The main problem is that uninstalling the driver waits for curr_msg to
    be sent or HOSED. After stopping tasklet, the only place to trigger the
    timeout mechanism is the circular poll in shutdown_smi.
    
    The poll function delays 10us and calls smi_event_handler(smi_info,10).
    Smi_event_handler deducts 10us from kcs->ibf_timeout.
    
    But the poll func is followed by schedule_timeout_uninterruptible(1).
    The time consumed here is not counted in kcs->ibf_timeout.
    
    So when 10us is deducted from kcs->ibf_timeout, at least 1 jiffies has
    actually passed. The waiting time has increased by more than a
    hundredfold.
    
    Now instead of calling poll(). call smi_event_handler() directly and
    calculate the elapsed time.
    
    For verification, you can directly use ebpf to check the kcs->
    ibf_timeout for each call to kcs_event() when IPMI is disconnected.
    Decrement at normal rate before unloading. The decrement rate becomes
    very slow after unloading.
    
      $ bpftrace -e 'kprobe:kcs_event {printf("kcs->ibftimeout : %d\n",
          *(arg0+584));}'
    
    Signed-off-by: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
    Message-Id: <20221007092617.87597-3-zhangyuchen.lcr@bytedance.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24bc27ea4e71df53d98ecffd6e5f1a1f031389b8
Author: Aidan MacDonald <aidanmacdonald.0x0@gmail.com>
Date:   Sun Oct 23 15:33:20 2022 +0100

    ASoC: jz4740-i2s: Handle independent FIFO flush bits
    
    commit 8b3a9ad86239f80ed569e23c3954a311f66481d6 upstream.
    
    On the JZ4740, there is a single bit that flushes (empties) both
    the transmit and receive FIFO. Later SoCs have independent flush
    bits for each FIFO.
    
    Independent FIFOs can be flushed before the snd_soc_dai_active()
    check because it won't disturb other active streams. This ensures
    that the FIFO we're about to use is always flushed before starting
    up. With shared FIFOs we can't do that because if another substream
    is active, flushing its FIFO would cause underrun errors.
    
    This also fixes a bug: since we were only setting the JZ4740's
    flush bit, which corresponds to the TX FIFO flush bit on other
    SoCs, other SoCs were not having their RX FIFO flushed at all.
    
    Fixes: 967beb2e8777 ("ASoC: jz4740: Add jz4780 support")
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Aidan MacDonald <aidanmacdonald.0x0@gmail.com>
    Link: https://lore.kernel.org/r/20221023143328.160866-2-aidanmacdonald.0x0@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 652f1d66a8bedc1463fc525c6b3cb84f98edbb30
Author: Michael Walle <michael@walle.cc>
Date:   Thu Oct 27 19:12:21 2022 +0200

    wifi: wilc1000: sdio: fix module autoloading
    
    commit 57d545b5a3d6ce3a8fb6b093f02bfcbb908973f3 upstream.
    
    There are no SDIO module aliases included in the driver, therefore,
    module autoloading isn't working. Add the proper MODULE_DEVICE_TABLE().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20221027171221.491937-1-michael@walle.cc
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9f6614a732b012bc34ce3d25ddddd45e64b79a8
Author: Aditya Garg <gargaditya08@live.com>
Date:   Thu Oct 27 10:01:43 2022 +0000

    efi: Add iMac Pro 2017 to uefi skip cert quirk
    
    commit 0be56a116220f9e5731a6609e66a11accfe8d8e2 upstream.
    
    The iMac Pro 2017 is also a T2 Mac. Thus add it to the list of uefi skip
    cert.
    
    Cc: stable@vger.kernel.org
    Fixes: 155ca952c7ca ("efi: Do not import certificates from UEFI Secure Boot for T2 Macs")
    Link: https://lore.kernel.org/linux-integrity/9D46D92F-1381-4F10-989C-1A12CD2FFDD8@live.com/
    Signed-off-by: Aditya Garg <gargaditya08@live.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffcf71676d3b4f13c03b1b6cd8ac1bd06954d30a
Author: Florian-Ewald Mueller <florian-ewald.mueller@ionos.com>
Date:   Tue Oct 25 09:37:05 2022 +0200

    md/bitmap: Fix bitmap chunk size overflow issues
    
    commit 4555211190798b6b6fa2c37667d175bf67945c78 upstream.
    
    - limit bitmap chunk size internal u64 variable to values not overflowing
      the u32 bitmap superblock structure variable stored on persistent media
    - assign bitmap chunk size internal u64 variable from unsigned values to
      avoid possible sign extension artifacts when assigning from a s32 value
    
    The bug has been there since at least kernel 4.0.
    Steps to reproduce it:
    1: mdadm -C /dev/mdx -l 1 --bitmap=internal --bitmap-chunk=256M -e 1.2
    -n2 /dev/rnbd1 /dev/rnbd2
    2 resize member device rnbd1 and rnbd2 to 8 TB
    3 mdadm --grow /dev/mdx --size=max
    
    The bitmap_chunksize will overflow without patch.
    
    Cc: stable@vger.kernel.org
    
    Signed-off-by: Florian-Ewald Mueller <florian-ewald.mueller@ionos.com>
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e94443252b4656bbdce1de6da451437ed7f7158a
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Oct 27 17:32:49 2022 +0100

    rtc: ds1347: fix value written to century register
    
    commit 4dfe05bdc1ade79b943d4979a2e2a8b5ef68fbb5 upstream.
    
    In `ds1347_set_time()`, the wrong value is being written to the
    `DS1347_CENTURY_REG` register.  It needs to be converted to BCD.  Fix
    it.
    
    Fixes: 147dae76dbb9 ("rtc: ds1347: handle century register")
    Cc: <stable@vger.kernel.org> # v5.5+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20221027163249.447416-1-abbotti@mev.co.uk
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6155aed4768ccd7b8a4d427e1b2db2accd5eff46
Author: Steve French <stfrench@microsoft.com>
Date:   Sun Dec 11 13:54:21 2022 -0600

    cifs: fix missing display of three mount options
    
    commit 2bfd81043e944af0e52835ef6d9b41795af22341 upstream.
    
    Three mount options: "tcpnodelay" and "noautotune" and "noblocksend"
    were not displayed when passed in on cifs/smb3 mounts (e.g. displayed
    in /proc/mounts e.g.).  No change to defaults so these are not
    displayed if not specified on mount.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c82733e2408a4012d84fbfbc39698ef387ade98
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Fri Dec 16 22:03:41 2022 -0300

    cifs: fix confusing debug message
    
    commit a85ceafd41927e41a4103d228a993df7edd8823b upstream.
    
    Since rc was initialised to -ENOMEM in cifs_get_smb_ses(), when an
    existing smb session was found, free_xid() would be called and then
    print
    
      CIFS: fs/cifs/connect.c: Existing tcp session with server found
      CIFS: fs/cifs/connect.c: VFS: in cifs_get_smb_ses as Xid: 44 with uid: 0
      CIFS: fs/cifs/connect.c: Existing smb sess found (status=1)
      CIFS: fs/cifs/connect.c: VFS: leaving cifs_get_smb_ses (xid = 44) rc = -12
    
    Fix this by initialising rc to 0 and then let free_xid() print this
    instead
    
      CIFS: fs/cifs/connect.c: Existing tcp session with server found
      CIFS: fs/cifs/connect.c: VFS: in cifs_get_smb_ses as Xid: 14 with uid: 0
      CIFS: fs/cifs/connect.c: Existing smb sess found (status=1)
      CIFS: fs/cifs/connect.c: VFS: leaving cifs_get_smb_ses (xid = 14) rc = 0
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3df07728abde249e2d3f47cf22f134cb4d4f5fb1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 31 11:02:45 2022 +0100

    media: dvb-core: Fix UAF due to refcount races at releasing
    
    commit fd3d91ab1c6ab0628fe642dd570b56302c30a792 upstream.
    
    The dvb-core tries to sync the releases of opened files at
    dvb_dmxdev_release() with two refcounts: dvbdev->users and
    dvr_dvbdev->users.  A problem is present in those two syncs: when yet
    another dvb_demux_open() is called during those sync waits,
    dvb_demux_open() continues to process even if the device is being
    closed.  This includes the increment of the former refcount, resulting
    in the leftover refcount after the sync of the latter refcount at
    dvb_dmxdev_release().  It ends up with use-after-free, since the
    function believes that all usages were gone and releases the
    resources.
    
    This patch addresses the problem by adding the check of dmxdev->exit
    flag at dvb_demux_open(), just like dvb_dvr_open() already does.  With
    the exit flag check, the second call of dvb_demux_open() fails, hence
    the further corruption can be avoided.
    
    Also for avoiding the races of the dmxdev->exit flag reference, this
    patch serializes the dmxdev->exit set up and the sync waits with the
    dmxdev->mutex lock at dvb_dmxdev_release().  Without the mutex lock,
    dvb_demux_open() (or dvb_dvr_open()) may run concurrently with
    dvb_dmxdev_release(), which allows to skip the exit flag check and
    continue the open process that is being closed.
    
    CVE-2022-41218 is assigned to those bugs above.
    
    Reported-by: Hyunwoo Kim <imv4bel@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/20220908132754.30532-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dd5a68cdbbbe7fc67ba701cb52ba10d8ba149f8
Author: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
Date:   Tue Apr 26 06:29:19 2022 +0100

    media: dvb-core: Fix double free in dvb_register_device()
    
    commit 6b0d0477fce747d4137aa65856318b55fba72198 upstream.
    
    In function dvb_register_device() -> dvb_register_media_device() ->
    dvb_create_media_entity(), dvb->entity is allocated and initialized. If
    the initialization fails, it frees the dvb->entity, and return an error
    code. The caller takes the error code and handles the error by calling
    dvb_media_device_free(), which unregisters the entity and frees the
    field again if it is not NULL. As dvb->entity may not NULLed in
    dvb_create_media_entity() when the allocation of dvbdev->pad fails, a
    double free may occur. This may also cause an Use After free in
    media_device_unregister_entity().
    
    Fix this by storing NULL to dvb->entity when it is freed.
    
    Link: https://lore.kernel.org/linux-media/20220426052921.2088416-1-keitasuzuki.park@sslab.ics.keio.ac.jp
    Fixes: fcd5ce4b3936 ("media: dvb-core: fix a memory leak bug")
    Cc: stable@vger.kernel.org
    Cc: Wenwen Wang <wenwen@cs.uga.edu>
    Signed-off-by: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1032520b2109d17980ed21135aac891d995f7206
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue Oct 11 20:00:12 2022 +0100

    ARM: 9256/1: NWFPE: avoid compiler-generated __aeabi_uldivmod
    
    commit 3220022038b9a3845eea762af85f1c5694b9f861 upstream.
    
    clang-15's ability to elide loops completely became more aggressive when
    it can deduce how a variable is being updated in a loop. Counting down
    one variable by an increment of another can be replaced by a modulo
    operation.
    
    For 64b variables on 32b ARM EABI targets, this can result in the
    compiler generating calls to __aeabi_uldivmod, which it does for a do
    while loop in float64_rem().
    
    For the kernel, we'd generally prefer that developers not open code 64b
    division via binary / operators and instead use the more explicit
    helpers from div64.h. On arm-linux-gnuabi targets, failure to do so can
    result in linkage failures due to undefined references to
    __aeabi_uldivmod().
    
    While developers can avoid open coding divisions on 64b variables, the
    compiler doesn't know that the Linux kernel has a partial implementation
    of a compiler runtime (--rtlib) to enforce this convention.
    
    It's also undecidable for the compiler whether the code in question
    would be faster to execute the loop vs elide it and do the 64b division.
    
    While I actively avoid using the internal -mllvm command line flags, I
    think we get better code than using barrier() here, which will force
    reloads+spills in the loop for all toolchains.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1666
    
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1306614412b8ffe319333356c376ac293a758d48
Author: Luca Ceresoli <luca.ceresoli@bootlin.com>
Date:   Wed Nov 2 12:01:01 2022 +0100

    staging: media: tegra-video: fix chan->mipi value on error
    
    commit 10b5ce6743c839fa75336042c64e2479caec9430 upstream.
    
    chan->mipi takes the return value of tegra_mipi_request() which can be a
    valid pointer or an error. However chan->mipi is checked in several places,
    including error-cleanup code in tegra_csi_channels_cleanup(), as 'if
    (chan->mipi)', which suggests the initial intent was that chan->mipi should
    be either NULL or a valid pointer, never an error. As a consequence,
    cleanup code in case of tegra_mipi_request() errors would dereference an
    invalid pointer.
    
    Fix by ensuring chan->mipi always contains either NULL or a void pointer.
    
    Also add that to the documentation.
    
    Fixes: 523c857e34ce ("media: tegra-video: Add CSI MIPI pads calibration")
    Cc: stable@vger.kernel.org
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52c0622e53ea0566efdff22115363e9d67c18900
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Nov 29 19:30:09 2022 +0800

    tracing: Fix infinite loop in tracing_read_pipe on overflowed print_trace_line
    
    commit c1ac03af6ed45d05786c219d102f37eb44880f28 upstream.
    
    print_trace_line may overflow seq_file buffer. If the event is not
    consumed, the while loop keeps peeking this event, causing a infinite loop.
    
    Link: https://lkml.kernel.org/r/20221129113009.182425-1-yangjihong1@huawei.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 088b1e427dbba ("ftrace: pipe fixes")
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b838b1b9ca700859153642a5a184c83923c56bba
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Dec 7 11:46:35 2022 +0800

    tracing/hist: Fix wrong return value in parse_action_params()
    
    commit 2cc6a528882d0e0ccbc1bca5f95b8c963cedac54 upstream.
    
    When number of synth fields is more than SYNTH_FIELDS_MAX,
    parse_action_params() should return -EINVAL.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221207034635.2253990-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: c282a386a397 ("tracing: Add 'onmatch' hist trigger action support")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff3dd2c1befe48da9eb9d4042fa3aede31156a12
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Mon Dec 19 23:35:10 2022 +0900

    x86/kprobes: Fix kprobes instruction boudary check with CONFIG_RETHUNK
    
    commit 1993bf97992df2d560287f3c4120eda57426843d upstream.
    
    Since the CONFIG_RETHUNK and CONFIG_SLS will use INT3 for stopping
    speculative execution after RET instruction, kprobes always failes to
    check the probed instruction boundary by decoding the function body if
    the probed address is after such sequence. (Note that some conditional
    code blocks will be placed after function return, if compiler decides
    it is not on the hot path.)
    
    This is because kprobes expects kgdb puts the INT3 as a software
    breakpoint and it will replace the original instruction.
    But these INT3 are not such purpose, it doesn't need to recover the
    original instruction.
    
    To avoid this issue, kprobes checks whether the INT3 is owned by
    kgdb or not, and if so, stop decoding and make it fail. The other
    INT3 will come from CONFIG_RETHUNK/CONFIG_SLS and those can be
    treated as a one-byte instruction.
    
    Fixes: e463a09af2f0 ("x86: Add straight-line-speculation mitigation")
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/167146051026.1374301.392728975473572291.stgit@devnote3
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 362495bf451f772db24b95bf35374338eb342a5a
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Fri Dec 9 10:52:47 2022 -0500

    ftrace/x86: Add back ftrace_expected for ftrace bug reports
    
    commit fd3dc56253acbe9c641a66d312d8393cd55eb04c upstream.
    
    After someone reported a bug report with a failed modification due to the
    expected value not matching what was found, it came to my attention that
    the ftrace_expected is no longer set when that happens. This makes for
    debugging the issue a bit more difficult.
    
    Set ftrace_expected to the expected code before calling ftrace_bug, so
    that it shows what was expected and why it failed.
    
    Link: https://lore.kernel.org/all/CA+wXwBQ-VhK+hpBtYtyZP-NiX4g8fqRRWithFOHQW-0coQ3vLg@mail.gmail.com/
    Link: https://lore.kernel.org/linux-trace-kernel/20221209105247.01d4e51d@gandalf.local.home
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "x86@kernel.org" <x86@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 768ae4406a5c ("x86/ftrace: Use text_poke()")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b677629caebb3d3fdb5f9479550ce454a2247c0b
Author: Ashok Raj <ashok.raj@intel.com>
Date:   Tue Nov 29 13:08:27 2022 -0800

    x86/microcode/intel: Do not retry microcode reloading on the APs
    
    commit be1b670f61443aa5d0d01782e9b8ea0ee825d018 upstream.
    
    The retries in load_ucode_intel_ap() were in place to support systems
    with mixed steppings. Mixed steppings are no longer supported and there is
    only one microcode image at a time. Any retries will simply reattempt to
    apply the same image over and over without making progress.
    
      [ bp: Zap the circumstantial reasoning from the commit message. ]
    
    Fixes: 06b8534cb728 ("x86/microcode: Rework microcode loading")
    Signed-off-by: Ashok Raj <ashok.raj@intel.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221129210832.107850-3-ashok.raj@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43dd254853aa274d356bb1d3ab01a8ca880b07b0
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Oct 6 00:19:56 2022 +0000

    KVM: nVMX: Inject #GP, not #UD, if "generic" VMXON CR0/CR4 check fails
    
    commit 9cc409325ddd776f6fd6293d5ce93ce1248af6e4 upstream.
    
    Inject #GP for if VMXON is attempting with a CR0/CR4 that fails the
    generic "is CRx valid" check, but passes the CR4.VMXE check, and do the
    generic checks _after_ handling the post-VMXON VM-Fail.
    
    The CR4.VMXE check, and all other #UD cases, are special pre-conditions
    that are enforced prior to pivoting on the current VMX mode, i.e. occur
    before interception if VMXON is attempted in VMX non-root mode.
    
    All other CR0/CR4 checks generate #GP and effectively have lower priority
    than the post-VMXON check.
    
    Per the SDM:
    
        IF (register operand) or (CR0.PE = 0) or (CR4.VMXE = 0) or ...
            THEN #UD;
        ELSIF not in VMX operation
            THEN
                IF (CPL > 0) or (in A20M mode) or
                (the values of CR0 and CR4 are not supported in VMX operation)
                    THEN #GP(0);
        ELSIF in VMX non-root operation
            THEN VMexit;
        ELSIF CPL > 0
            THEN #GP(0);
        ELSE VMfail("VMXON executed in VMX root operation");
        FI;
    
    which, if re-written without ELSIF, yields:
    
        IF (register operand) or (CR0.PE = 0) or (CR4.VMXE = 0) or ...
            THEN #UD
    
        IF in VMX non-root operation
            THEN VMexit;
    
        IF CPL > 0
            THEN #GP(0)
    
        IF in VMX operation
            THEN VMfail("VMXON executed in VMX root operation");
    
        IF (in A20M mode) or
           (the values of CR0 and CR4 are not supported in VMX operation)
                    THEN #GP(0);
    
    Note, KVM unconditionally forwards VMXON VM-Exits that occur in L2 to L1,
    i.e. there is no need to check the vCPU is not in VMX non-root mode.  Add
    a comment to explain why unconditionally forwarding such exits is
    functionally correct.
    
    Reported-by: Eric Li <ercli@ucdavis.edu>
    Fixes: c7d855c2aff2 ("KVM: nVMX: Inject #UD if VMXON is attempted with incompatible CR0/CR4")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Link: https://lore.kernel.org/r/20221006001956.329314-1-seanjc@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e61eacf9936441af33062c944c37ba1d1d6704e8
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Tue Dec 20 14:31:40 2022 -0800

    perf/core: Call LSM hook after copying perf_event_attr
    
    commit 0a041ebca4956292cadfb14a63ace3a9c1dcb0a3 upstream.
    
    It passes the attr struct to the security_perf_event_open() but it's
    not initialized yet.
    
    Fixes: da97e18458fb ("perf_event: Add support for LSM and SELinux checks")
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221220223140.4020470-1-namhyung@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cb31bd88361edb96cfc622648717ba348f0f4dc
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Dec 7 11:51:43 2022 +0800

    tracing/hist: Fix out-of-bound write on 'action_data.var_ref_idx'
    
    commit 82470f7d9044842618c847a7166de2b7458157a7 upstream.
    
    When generate a synthetic event with many params and then create a trace
    action for it [1], kernel panic happened [2].
    
    It is because that in trace_action_create() 'data->n_params' is up to
    SYNTH_FIELDS_MAX (current value is 64), and array 'data->var_ref_idx'
    keeps indices into array 'hist_data->var_refs' for each synthetic event
    param, but the length of 'data->var_ref_idx' is TRACING_MAP_VARS_MAX
    (current value is 16), so out-of-bound write happened when 'data->n_params'
    more than 16. In this case, 'data->match_data.event' is overwritten and
    eventually cause the panic.
    
    To solve the issue, adjust the length of 'data->var_ref_idx' to be
    SYNTH_FIELDS_MAX and add sanity checks to avoid out-of-bound write.
    
    [1]
     # cd /sys/kernel/tracing/
     # echo "my_synth_event int v1; int v2; int v3; int v4; int v5; int v6;\
    int v7; int v8; int v9; int v10; int v11; int v12; int v13; int v14;\
    int v15; int v16; int v17; int v18; int v19; int v20; int v21; int v22;\
    int v23; int v24; int v25; int v26; int v27; int v28; int v29; int v30;\
    int v31; int v32; int v33; int v34; int v35; int v36; int v37; int v38;\
    int v39; int v40; int v41; int v42; int v43; int v44; int v45; int v46;\
    int v47; int v48; int v49; int v50; int v51; int v52; int v53; int v54;\
    int v55; int v56; int v57; int v58; int v59; int v60; int v61; int v62;\
    int v63" >> synthetic_events
     # echo 'hist:keys=pid:ts0=common_timestamp.usecs if comm=="bash"' >> \
    events/sched/sched_waking/trigger
     # echo "hist:keys=next_pid:onmatch(sched.sched_waking).my_synth_event(\
    pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,\
    pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,\
    pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,\
    pid,pid,pid,pid,pid,pid,pid,pid,pid)" >> events/sched/sched_switch/trigger
    
    [2]
    BUG: unable to handle page fault for address: ffff91c900000000
    PGD 61001067 P4D 61001067 PUD 0
    Oops: 0000 [#1] PREEMPT SMP NOPTI
    CPU: 2 PID: 322 Comm: bash Tainted: G        W          6.1.0-rc8+ #229
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    RIP: 0010:strcmp+0xc/0x30
    Code: 75 f7 31 d2 44 0f b6 04 16 44 88 04 11 48 83 c2 01 45 84 c0 75 ee
    c3 cc cc cc cc 0f 1f 00 31 c0 eb 08 48 83 c0 01 84 d2 74 13 <0f> b6 14
    07 3a 14 06 74 ef 19 c0 83 c8 01 c3 cc cc cc cc 31 c3
    RSP: 0018:ffff9b3b00f53c48 EFLAGS: 00000246
    RAX: 0000000000000000 RBX: ffffffffba958a68 RCX: 0000000000000000
    RDX: 0000000000000010 RSI: ffff91c943d33a90 RDI: ffff91c900000000
    RBP: ffff91c900000000 R08: 00000018d604b529 R09: 0000000000000000
    R10: ffff91c9483eddb1 R11: ffff91ca483eddab R12: ffff91c946171580
    R13: ffff91c9479f0538 R14: ffff91c9457c2848 R15: ffff91c9479f0538
    FS:  00007f1d1cfbe740(0000) GS:ffff91c9bdc80000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff91c900000000 CR3: 0000000006316000 CR4: 00000000000006e0
    Call Trace:
     <TASK>
     __find_event_file+0x55/0x90
     action_create+0x76c/0x1060
     event_hist_trigger_parse+0x146d/0x2060
     ? event_trigger_write+0x31/0xd0
     trigger_process_regex+0xbb/0x110
     event_trigger_write+0x6b/0xd0
     vfs_write+0xc8/0x3e0
     ? alloc_fd+0xc0/0x160
     ? preempt_count_add+0x4d/0xa0
     ? preempt_count_add+0x70/0xa0
     ksys_write+0x5f/0xe0
     do_syscall_64+0x3b/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f1d1d0cf077
    Code: 64 89 02 48 c7 c0 ff ff ff ff eb bb 0f 1f 80 00 00 00 00 f3 0f 1e
    fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 01 00 00 00 0f 05 <48> 3d 00
    f0 ff ff 77 51 c3 48 83 ec 28 48 89 54 24 18 48 89 74
    RSP: 002b:00007ffcebb0e568 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000143 RCX: 00007f1d1d0cf077
    RDX: 0000000000000143 RSI: 00005639265aa7e0 RDI: 0000000000000001
    RBP: 00005639265aa7e0 R08: 000000000000000a R09: 0000000000000142
    R10: 000056392639c017 R11: 0000000000000246 R12: 0000000000000143
    R13: 00007f1d1d1ae6a0 R14: 00007f1d1d1aa4a0 R15: 00007f1d1d1a98a0
     </TASK>
    Modules linked in:
    CR2: ffff91c900000000
    ---[ end trace 0000000000000000 ]---
    RIP: 0010:strcmp+0xc/0x30
    Code: 75 f7 31 d2 44 0f b6 04 16 44 88 04 11 48 83 c2 01 45 84 c0 75 ee
    c3 cc cc cc cc 0f 1f 00 31 c0 eb 08 48 83 c0 01 84 d2 74 13 <0f> b6 14
    07 3a 14 06 74 ef 19 c0 83 c8 01 c3 cc cc cc cc 31 c3
    RSP: 0018:ffff9b3b00f53c48 EFLAGS: 00000246
    RAX: 0000000000000000 RBX: ffffffffba958a68 RCX: 0000000000000000
    RDX: 0000000000000010 RSI: ffff91c943d33a90 RDI: ffff91c900000000
    RBP: ffff91c900000000 R08: 00000018d604b529 R09: 0000000000000000
    R10: ffff91c9483eddb1 R11: ffff91ca483eddab R12: ffff91c946171580
    R13: ffff91c9479f0538 R14: ffff91c9457c2848 R15: ffff91c9479f0538
    FS:  00007f1d1cfbe740(0000) GS:ffff91c9bdc80000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff91c900000000 CR3: 0000000006316000 CR4: 00000000000006e0
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221207035143.2278781-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: d380dcde9a07 ("tracing: Fix now invalid var_ref_vals assumption in trace action")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18a489a3fda74a0eb0e68ace8131a1fc11348358
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Nov 30 14:02:47 2022 -0500

    dm cache: set needs_check flag after aborting metadata
    
    commit 6b9973861cb2e96dcd0bb0f1baddc5c034207c5c upstream.
    
    Otherwise the commit that will be aborted will be associated with the
    metadata objects that will be torn down.  Must write needs_check flag
    to metadata with a reset block manager.
    
    Found through code-inspection (and compared against dm-thin.c).
    
    Cc: stable@vger.kernel.org
    Fixes: 028ae9f76f29 ("dm cache: add fail io mode and needs_check flag")
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b17026685a270b2beaf1cdd9857fcedd3505c7e
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:49 2022 +0800

    dm cache: Fix UAF in destroy()
    
    commit 6a459d8edbdbe7b24db42a5a9f21e6aa9e00c2aa upstream.
    
    Dm_cache also has the same UAF problem when dm_resume()
    and dm_destroy() are concurrent.
    
    Therefore, cancelling timer again in destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: c6b4fcbad044e ("dm: add cache target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 342cfd8426dff4228e6c714bcb9fc8295a2748dd
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:48 2022 +0800

    dm clone: Fix UAF in clone_dtr()
    
    commit e4b5957c6f749a501c464f92792f1c8e26b61a94 upstream.
    
    Dm_clone also has the same UAF problem when dm_resume()
    and dm_destroy() are concurrent.
    
    Therefore, cancelling timer again in clone_dtr().
    
    Cc: stable@vger.kernel.org
    Fixes: 7431b7835f554 ("dm: add clone target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a506b5c92757b034034ef683e667bffc456c600b
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:50 2022 +0800

    dm integrity: Fix UAF in dm_integrity_dtr()
    
    commit f50cb2cbabd6c4a60add93d72451728f86e4791c upstream.
    
    Dm_integrity also has the same UAF problem when dm_resume()
    and dm_destroy() are concurrent.
    
    Therefore, cancelling timer again in dm_integrity_dtr().
    
    Cc: stable@vger.kernel.org
    Fixes: 7eada909bfd7a ("dm: add integrity target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34fe9c2251f19786a6689149a6212c6c0de1d63b
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c84d1ca2285b40287fe0f70f4b60debc2ab21bef
Author: Luo Meng <luomeng12@huawei.com>
Date:   Wed Nov 30 10:09:45 2022 +0800

    dm thin: resume even if in FAIL mode
    
    commit 19eb1650afeb1aa86151f61900e9e5f1de5d8d02 upstream.
    
    If a thinpool set fail_io while suspending, resume will fail with:
     device-mapper: resume ioctl on vg-thinpool  failed: Invalid argument
    
    The thin-pool also can't be removed if an in-flight bio is in the
    deferred list.
    
    This can be easily reproduced using:
    
      echo "offline" > /sys/block/sda/device/state
      dd if=/dev/zero of=/dev/mapper/thin bs=4K count=1
      dmsetup suspend /dev/mapper/pool
      mkfs.ext4 /dev/mapper/thin
      dmsetup resume /dev/mapper/pool
    
    The root cause is maybe_resize_data_dev() will check fail_io and return
    error before called dm_resume.
    
    Fix this by adding FAIL mode check at the end of pool_preresume().
    
    Cc: stable@vger.kernel.org
    Fixes: da105ed5fd7e ("dm thin metadata: introduce dm_pool_abort_metadata")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94f01ecc2aa0be992865acc80ebb6701f731f955
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Thu Dec 8 22:28:02 2022 +0800

    dm thin: Use last transaction's pmd->root when commit failed
    
    commit 7991dbff6849f67e823b7cc0c15e5a90b0549b9f upstream.
    
    Recently we found a softlock up problem in dm thin pool btree lookup
    code due to corrupted metadata:
    
     Kernel panic - not syncing: softlockup: hung tasks
     CPU: 7 PID: 2669225 Comm: kworker/u16:3
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
     Workqueue: dm-thin do_worker [dm_thin_pool]
     Call Trace:
       <IRQ>
       dump_stack+0x9c/0xd3
       panic+0x35d/0x6b9
       watchdog_timer_fn.cold+0x16/0x25
       __run_hrtimer+0xa2/0x2d0
       </IRQ>
       RIP: 0010:__relink_lru+0x102/0x220 [dm_bufio]
       __bufio_new+0x11f/0x4f0 [dm_bufio]
       new_read+0xa3/0x1e0 [dm_bufio]
       dm_bm_read_lock+0x33/0xd0 [dm_persistent_data]
       ro_step+0x63/0x100 [dm_persistent_data]
       btree_lookup_raw.constprop.0+0x44/0x220 [dm_persistent_data]
       dm_btree_lookup+0x16f/0x210 [dm_persistent_data]
       dm_thin_find_block+0x12c/0x210 [dm_thin_pool]
       __process_bio_read_only+0xc5/0x400 [dm_thin_pool]
       process_thin_deferred_bios+0x1a4/0x4a0 [dm_thin_pool]
       process_one_work+0x3c5/0x730
    
    Following process may generate a broken btree mixed with fresh and
    stale btree nodes, which could get dm thin trapped in an infinite loop
    while looking up data block:
     Transaction 1: pmd->root = A, A->B->C   // One path in btree
                    pmd->root = X, X->Y->Z   // Copy-up
     Transaction 2: X,Z is updated on disk, Y write failed.
                    // Commit failed, dm thin becomes read-only.
                    process_bio_read_only
                     dm_thin_find_block
                      __find_block
                       dm_btree_lookup(pmd->root)
    The pmd->root points to a broken btree, Y may contain stale node
    pointing to any block, for example X, which gets dm thin trapped into
    a dead loop while looking up Z.
    
    Fix this by setting pmd->root in __open_metadata(), so that dm thin
    will use the last transaction's pmd->root if commit failed.
    
    Fetch a reproducer in [Link].
    
    Linke: https://bugzilla.kernel.org/show_bug.cgi?id=216790
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0 ("dm: add thin provisioning target")
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Acked-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e37578069737b04955c71dd85db8a3bc2709eff
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Wed Nov 30 21:31:34 2022 +0800

    dm thin: Fix ABBA deadlock between shrink_slab and dm_pool_abort_metadata
    
    commit 8111964f1b8524c4bb56b02cd9c7a37725ea21fd upstream.
    
    Following concurrent processes:
    
              P1(drop cache)                P2(kworker)
    drop_caches_sysctl_handler
     drop_slab
      shrink_slab
       down_read(&shrinker_rwsem)  - LOCK A
       do_shrink_slab
        super_cache_scan
         prune_icache_sb
          dispose_list
           evict
            ext4_evict_inode
             ext4_clear_inode
              ext4_discard_preallocations
               ext4_mb_load_buddy_gfp
                ext4_mb_init_cache
                 ext4_read_block_bitmap_nowait
                  ext4_read_bh_nowait
                   submit_bh
                    dm_submit_bio
                                     do_worker
                                      process_deferred_bios
                                       commit
                                        metadata_operation_failed
                                         dm_pool_abort_metadata
                                          down_write(&pmd->root_lock) - LOCK B
                                          __destroy_persistent_data_objects
                                           dm_block_manager_destroy
                                            dm_bufio_client_destroy
                                             unregister_shrinker
                                              down_write(&shrinker_rwsem)
                     thin_map                            |
                      dm_thin_find_block                 ↓
                       down_read(&pmd->root_lock) --> ABBA deadlock
    
    , which triggers hung task:
    
    [   76.974820] INFO: task kworker/u4:3:63 blocked for more than 15 seconds.
    [   76.976019]       Not tainted 6.1.0-rc4-00011-g8f17dd350364-dirty #910
    [   76.978521] task:kworker/u4:3    state:D stack:0     pid:63    ppid:2
    [   76.978534] Workqueue: dm-thin do_worker
    [   76.978552] Call Trace:
    [   76.978564]  __schedule+0x6ba/0x10f0
    [   76.978582]  schedule+0x9d/0x1e0
    [   76.978588]  rwsem_down_write_slowpath+0x587/0xdf0
    [   76.978600]  down_write+0xec/0x110
    [   76.978607]  unregister_shrinker+0x2c/0xf0
    [   76.978616]  dm_bufio_client_destroy+0x116/0x3d0
    [   76.978625]  dm_block_manager_destroy+0x19/0x40
    [   76.978629]  __destroy_persistent_data_objects+0x5e/0x70
    [   76.978636]  dm_pool_abort_metadata+0x8e/0x100
    [   76.978643]  metadata_operation_failed+0x86/0x110
    [   76.978649]  commit+0x6a/0x230
    [   76.978655]  do_worker+0xc6e/0xd90
    [   76.978702]  process_one_work+0x269/0x630
    [   76.978714]  worker_thread+0x266/0x630
    [   76.978730]  kthread+0x151/0x1b0
    [   76.978772] INFO: task test.sh:2646 blocked for more than 15 seconds.
    [   76.979756]       Not tainted 6.1.0-rc4-00011-g8f17dd350364-dirty #910
    [   76.982111] task:test.sh         state:D stack:0     pid:2646  ppid:2459
    [   76.982128] Call Trace:
    [   76.982139]  __schedule+0x6ba/0x10f0
    [   76.982155]  schedule+0x9d/0x1e0
    [   76.982159]  rwsem_down_read_slowpath+0x4f4/0x910
    [   76.982173]  down_read+0x84/0x170
    [   76.982177]  dm_thin_find_block+0x4c/0xd0
    [   76.982183]  thin_map+0x201/0x3d0
    [   76.982188]  __map_bio+0x5b/0x350
    [   76.982195]  dm_submit_bio+0x2b6/0x930
    [   76.982202]  __submit_bio+0x123/0x2d0
    [   76.982209]  submit_bio_noacct_nocheck+0x101/0x3e0
    [   76.982222]  submit_bio_noacct+0x389/0x770
    [   76.982227]  submit_bio+0x50/0xc0
    [   76.982232]  submit_bh_wbc+0x15e/0x230
    [   76.982238]  submit_bh+0x14/0x20
    [   76.982241]  ext4_read_bh_nowait+0xc5/0x130
    [   76.982247]  ext4_read_block_bitmap_nowait+0x340/0xc60
    [   76.982254]  ext4_mb_init_cache+0x1ce/0xdc0
    [   76.982259]  ext4_mb_load_buddy_gfp+0x987/0xfa0
    [   76.982263]  ext4_discard_preallocations+0x45d/0x830
    [   76.982274]  ext4_clear_inode+0x48/0xf0
    [   76.982280]  ext4_evict_inode+0xcf/0xc70
    [   76.982285]  evict+0x119/0x2b0
    [   76.982290]  dispose_list+0x43/0xa0
    [   76.982294]  prune_icache_sb+0x64/0x90
    [   76.982298]  super_cache_scan+0x155/0x210
    [   76.982303]  do_shrink_slab+0x19e/0x4e0
    [   76.982310]  shrink_slab+0x2bd/0x450
    [   76.982317]  drop_slab+0xcc/0x1a0
    [   76.982323]  drop_caches_sysctl_handler+0xb7/0xe0
    [   76.982327]  proc_sys_call_handler+0x1bc/0x300
    [   76.982331]  proc_sys_write+0x17/0x20
    [   76.982334]  vfs_write+0x3d3/0x570
    [   76.982342]  ksys_write+0x73/0x160
    [   76.982347]  __x64_sys_write+0x1e/0x30
    [   76.982352]  do_syscall_64+0x35/0x80
    [   76.982357]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Function metadata_operation_failed() is called when operations failed
    on dm pool metadata, dm pool will destroy and recreate metadata. So,
    shrinker will be unregistered and registered, which could down write
    shrinker_rwsem under pmd_write_lock.
    
    Fix it by allocating dm_block_manager before locking pmd->root_lock
    and destroying old dm_block_manager after unlocking pmd->root_lock,
    then old dm_block_manager is replaced with new dm_block_manager under
    pmd->root_lock. So, shrinker register/unregister could be done without
    holding pmd->root_lock.
    
    Fetch a reproducer in [Link].
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216676
    Cc: stable@vger.kernel.org #v5.2+
    Fixes: e49e582965b3 ("dm thin: add read only and fail io modes")
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b45e77b79215405bd039a690f5b06cc03e8ed27d
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Nov 30 13:26:32 2022 -0500

    dm cache: Fix ABBA deadlock between shrink_slab and dm_cache_metadata_abort
    
    commit 352b837a5541690d4f843819028cf2b8be83d424 upstream.
    
    Same ABBA deadlock pattern fixed in commit 4b60f452ec51 ("dm thin: Fix
    ABBA deadlock between shrink_slab and dm_pool_abort_metadata") to
    DM-cache's metadata.
    
    Reported-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: stable@vger.kernel.org
    Fixes: 028ae9f76f29 ("dm cache: add fail io mode and needs_check flag")
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9fa243ab26ccc7c9965f79e2c8557acde2e5d10
Author: Chris Chiu <chris.chiu@canonical.com>
Date:   Mon Dec 26 19:43:03 2022 +0800

    ALSA: hda/realtek: Apply dual codec fixup for Dell Latitude laptops
    
    [ Upstream commit a4517c4f3423c7c448f2c359218f97c1173523a1 ]
    
    The Dell Latiture 3340/3440/3540 laptops with Realtek ALC3204 have
    dual codecs and need the ALC1220_FIXUP_GB_DUAL_CODECS to fix the
    conflicts of Master controls. The existing headset mic fixup for
    Dell is also required to enable the jack sense and the headset mic.
    
    Introduce a new fixup to fix the dual codec and headset mic issues
    for particular Dell laptops since other old Dell laptops with the
    same codec configuration are already well handled by the fixup in
    alc269_fallback_pin_fixup_tbl[].
    
    Signed-off-by: Chris Chiu <chris.chiu@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221226114303.4027500-1-chris.chiu@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2437b06223422aa8d92a9fa1f582465d388bc841
Author: Philipp Jungkamp <p.jungkamp@gmx.net>
Date:   Mon Dec 5 17:37:13 2022 +0100

    ALSA: patch_realtek: Fix Dell Inspiron Plus 16
    
    [ Upstream commit 2912cdda734d9136615ed05636d9fcbca2a7a3c5 ]
    
    The Dell Inspiron Plus 16, in both laptop and 2in1 form factor, has top
    speakers connected on NID 0x17, which the codec reports as unconnected.
    These speakers should be connected to the DAC on NID 0x03.
    
    Signed-off-by: Philipp Jungkamp <p.jungkamp@gmx.net>
    Link: https://lore.kernel.org/r/20221205163713.7476-1-p.jungkamp@gmx.net
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Stable-dep-of: a4517c4f3423 ("ALSA: hda/realtek: Apply dual codec fixup for Dell Latitude laptops")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e379b88a8f8cffc99b318e028705ed9e3da0e1e0
Author: Yongqiang Liu <liuyongqiang13@huawei.com>
Date:   Thu Nov 10 14:23:07 2022 +0000

    cpufreq: Init completion before kobject_init_and_add()
    
    commit 5c51054896bcce1d33d39fead2af73fec24f40b6 upstream.
    
    In cpufreq_policy_alloc(), it will call uninitialed completion in
    cpufreq_sysfs_release() when kobject_init_and_add() fails. And
    that will cause a crash such as the following page fault in complete:
    
    BUG: unable to handle page fault for address: fffffffffffffff8
    [..]
    RIP: 0010:complete+0x98/0x1f0
    [..]
    Call Trace:
     kobject_put+0x1be/0x4c0
     cpufreq_online.cold+0xee/0x1fd
     cpufreq_add_dev+0x183/0x1e0
     subsys_interface_register+0x3f5/0x4e0
     cpufreq_register_driver+0x3b7/0x670
     acpi_cpufreq_init+0x56c/0x1000 [acpi_cpufreq]
     do_one_initcall+0x13d/0x780
     do_init_module+0x1c3/0x630
     load_module+0x6e67/0x73b0
     __do_sys_finit_module+0x181/0x240
     do_syscall_64+0x35/0x80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 4ebe36c94aed ("cpufreq: Fix kobject memleak")
    Signed-off-by: Yongqiang Liu <liuyongqiang13@huawei.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: 5.2+ <stable@vger.kernel.org> # 5.2+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cea018aaf7218a50bdbf17540b311e6b2982d883
Author: Kant Fan <kant@allwinnertech.com>
Date:   Tue Oct 25 15:21:09 2022 +0800

    PM/devfreq: governor: Add a private governor_data for governor
    
    commit 5fdded8448924e3631d466eea499b11606c43640 upstream.
    
    The member void *data in the structure devfreq can be overwrite
    by governor_userspace. For example:
    1. The device driver assigned the devfreq governor to simple_ondemand
    by the function devfreq_add_device() and init the devfreq member
    void *data to a pointer of a static structure devfreq_simple_ondemand_data
    by the function devfreq_add_device().
    2. The user changed the devfreq governor to userspace by the command
    "echo userspace > /sys/class/devfreq/.../governor".
    3. The governor userspace alloced a dynamic memory for the struct
    userspace_data and assigend the member void *data of devfreq to
    this memory by the function userspace_init().
    4. The user changed the devfreq governor back to simple_ondemand
    by the command "echo simple_ondemand > /sys/class/devfreq/.../governor".
    5. The governor userspace exited and assigned the member void *data
    in the structure devfreq to NULL by the function userspace_exit().
    6. The governor simple_ondemand fetched the static information of
    devfreq_simple_ondemand_data in the function
    devfreq_simple_ondemand_func() but the member void *data of devfreq was
    assigned to NULL by the function userspace_exit().
    7. The information of upthreshold and downdifferential is lost
    and the governor simple_ondemand can't work correctly.
    
    The member void *data in the structure devfreq is designed for
    a static pointer used in a governor and inited by the function
    devfreq_add_device(). This patch add an element named governor_data
    in the devfreq structure which can be used by a governor(E.g userspace)
    who want to assign a private data to do some private things.
    
    Fixes: ce26c5bb9569 ("PM / devfreq: Add basic governors")
    Cc: stable@vger.kernel.org # 5.10+
    Reviewed-by: Chanwoo Choi <cwchoi00@gmail.com>
    Acked-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Kant Fan <kant@allwinnertech.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1d73c303458a148f8b77fca99aa71074c69eb49
Author: Mickaël Salaün <mic@digikod.net>
Date:   Fri Sep 9 12:39:01 2022 +0200

    selftests: Use optional USERCFLAGS and USERLDFLAGS
    
    commit de3ee3f63400a23954e7c1ad1cb8c20f29ab6fe3 upstream.
    
    This change enables to extend CFLAGS and LDFLAGS from command line, e.g.
    to extend compiler checks: make USERCFLAGS=-Werror USERLDFLAGS=-static
    
    USERCFLAGS and USERLDFLAGS are documented in
    Documentation/kbuild/makefiles.rst and Documentation/kbuild/kbuild.rst
    
    This should be backported (down to 5.10) to improve previous kernel
    versions testing as well.
    
    Cc: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mickaël Salaün <mic@digikod.net>
    Link: https://lore.kernel.org/r/20220909103901.1503436-1-mic@digikod.net
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12576d2ebf655a43d57b71137ed49721a405179c
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Sep 30 21:20:37 2022 +0200

    arm64: dts: qcom: sdm850-lenovo-yoga-c630: correct I2C12 pins drive strength
    
    commit fd49776d8f458bba5499384131eddc0b8bcaf50c upstream.
    
    The pin configuration (done with generic pin controller helpers and
    as expressed by bindings) requires children nodes with either:
    1. "pins" property and the actual configuration,
    2. another set of nodes with above point.
    
    The qup_i2c12_default pin configuration used second method - with a
    "pinmux" child.
    
    Fixes: 44acee207844 ("arm64: dts: qcom: Add Lenovo Yoga C630")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220930192039.240486-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8546f11c42bdf78faf2db7cfd9c6480297a0a497
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Nov 8 13:37:55 2022 +0100

    ARM: ux500: do not directly dereference __iomem
    
    commit 65b0e307a1a9193571db12910f382f84195a3d29 upstream.
    
    Sparse reports that calling add_device_randomness() on `uid` is a
    violation of address spaces. And indeed the next usage uses readl()
    properly, but that was left out when passing it toadd_device_
    randomness(). So instead copy the whole thing to the stack first.
    
    Fixes: 4040d10a3d44 ("ARM: ux500: add DB serial number to entropy pool")
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/202210230819.loF90KDh-lkp@intel.com/
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Link: https://lore.kernel.org/r/20221108123755.207438-1-Jason@zx2c4.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0061ab5153fb8bc574b44fbb773680d0ede48c9c
Author: Boris Burkov <boris@bur.io>
Date:   Wed Dec 14 15:05:08 2022 -0800

    btrfs: fix resolving backrefs for inline extent followed by prealloc
    
    commit 560840afc3e63bbe5d9c5ef6b2ecf8f3589adff6 upstream.
    
    If a file consists of an inline extent followed by a regular or prealloc
    extent, then a legitimate attempt to resolve a logical address in the
    non-inline region will result in add_all_parents reading the invalid
    offset field of the inline extent. If the inline extent item is placed
    in the leaf eb s.t. it is the first item, attempting to access the
    offset field will not only be meaningless, it will go past the end of
    the eb and cause this panic:
    
      [17.626048] BTRFS warning (device dm-2): bad eb member end: ptr 0x3fd4 start 30834688 member offset 16377 size 8
      [17.631693] general protection fault, probably for non-canonical address 0x5088000000000: 0000 [#1] SMP PTI
      [17.635041] CPU: 2 PID: 1267 Comm: btrfs Not tainted 5.12.0-07246-g75175d5adc74-dirty #199
      [17.637969] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
      [17.641995] RIP: 0010:btrfs_get_64+0xe7/0x110
      [17.649890] RSP: 0018:ffffc90001f73a08 EFLAGS: 00010202
      [17.651652] RAX: 0000000000000001 RBX: ffff88810c42d000 RCX: 0000000000000000
      [17.653921] RDX: 0005088000000000 RSI: ffffc90001f73a0f RDI: 0000000000000001
      [17.656174] RBP: 0000000000000ff9 R08: 0000000000000007 R09: c0000000fffeffff
      [17.658441] R10: ffffc90001f73790 R11: ffffc90001f73788 R12: ffff888106afe918
      [17.661070] R13: 0000000000003fd4 R14: 0000000000003f6f R15: cdcdcdcdcdcdcdcd
      [17.663617] FS:  00007f64e7627d80(0000) GS:ffff888237c80000(0000) knlGS:0000000000000000
      [17.666525] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [17.668664] CR2: 000055d4a39152e8 CR3: 000000010c596002 CR4: 0000000000770ee0
      [17.671253] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [17.673634] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [17.676034] PKRU: 55555554
      [17.677004] Call Trace:
      [17.677877]  add_all_parents+0x276/0x480
      [17.679325]  find_parent_nodes+0xfae/0x1590
      [17.680771]  btrfs_find_all_leafs+0x5e/0xa0
      [17.682217]  iterate_extent_inodes+0xce/0x260
      [17.683809]  ? btrfs_inode_flags_to_xflags+0x50/0x50
      [17.685597]  ? iterate_inodes_from_logical+0xa1/0xd0
      [17.687404]  iterate_inodes_from_logical+0xa1/0xd0
      [17.689121]  ? btrfs_inode_flags_to_xflags+0x50/0x50
      [17.691010]  btrfs_ioctl_logical_to_ino+0x131/0x190
      [17.692946]  btrfs_ioctl+0x104a/0x2f60
      [17.694384]  ? selinux_file_ioctl+0x182/0x220
      [17.695995]  ? __x64_sys_ioctl+0x84/0xc0
      [17.697394]  __x64_sys_ioctl+0x84/0xc0
      [17.698697]  do_syscall_64+0x33/0x40
      [17.700017]  entry_SYSCALL_64_after_hwframe+0x44/0xae
      [17.701753] RIP: 0033:0x7f64e72761b7
      [17.709355] RSP: 002b:00007ffefb067f58 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [17.712088] RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f64e72761b7
      [17.714667] RDX: 00007ffefb067fb0 RSI: 00000000c0389424 RDI: 0000000000000003
      [17.717386] RBP: 00007ffefb06d188 R08: 000055d4a390d2b0 R09: 00007f64e7340a60
      [17.719938] R10: 0000000000000231 R11: 0000000000000246 R12: 0000000000000001
      [17.722383] R13: 0000000000000000 R14: 00000000c0389424 R15: 000055d4a38fd2a0
      [17.724839] Modules linked in:
    
    Fix the bug by detecting the inline extent item in add_all_parents and
    skipping to the next extent item.
    
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Boris Burkov <boris@bur.io>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0aa6e6ab08d991765f8b1c986bf654513859453
Author: Wenchao Chen <wenchao.chen@unisoc.com>
Date:   Wed Dec 7 13:19:09 2022 +0800

    mmc: sdhci-sprd: Disable CLK_AUTO when the clock is less than 400K
    
    commit ff874dbc4f868af128b412a9bd92637103cf11d7 upstream.
    
    When the clock is less than 400K, some SD cards fail to initialize
    because CLK_AUTO is enabled.
    
    Fixes: fb8bd90f83c4 ("mmc: sdhci-sprd: Add Spreadtrum's initial host controller")
    Signed-off-by: Wenchao Chen <wenchao.chen@unisoc.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221207051909.32126-1-wenchao.chen@unisoc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e918762f8a08c0b32375afc5680b93e2bf1cbb11
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Mon Oct 10 07:44:13 2022 -0400

    arm64: dts: qcom: sdm845-db845c: correct SPI2 pins drive strength
    
    commit 9905370560d9c29adc15f4937c5a0c0dac05f0b4 upstream.
    
    The pin configuration (done with generic pin controller helpers and
    as expressed by bindings) requires children nodes with either:
    1. "pins" property and the actual configuration,
    2. another set of nodes with above point.
    
    The qup_spi2_default pin configuration uses alreaady the second method
    with a "pinmux" child, so configure drive-strength similarly in
    "pinconf".  Otherwise the PIN drive strength would not be applied.
    
    Fixes: 8d23a0040475 ("arm64: dts: qcom: db845c: add Low speed expansion i2c and spi nodes")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221010114417.29859-2-krzysztof.kozlowski@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c023597baecb0fe5c10708bdc3460b59ca8a8194
Author: Bixuan Cui <cuibixuan@linux.alibaba.com>
Date:   Tue Oct 11 19:33:44 2022 +0800

    jbd2: use the correct print format
    
    commit d87a7b4c77a997d5388566dd511ca8e6b8e8a0a8 upstream.
    
    The print format error was found when using ftrace event:
        <...>-1406 [000] .... 23599442.895823: jbd2_end_commit: dev 252,8 transaction -1866216965 sync 0 head -1866217368
        <...>-1406 [000] .... 23599442.896299: jbd2_start_commit: dev 252,8 transaction -1866216964 sync 0
    
    Use the correct print format for transaction, head and tid.
    
    Fixes: 879c5e6b7cb4 ('jbd2: convert instrumentation from markers to tracepoints')
    Signed-off-by: Bixuan Cui <cuibixuan@linux.alibaba.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Link: https://lore.kernel.org/r/1665488024-95172-1-git-send-email-cuibixuan@linux.alibaba.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c444b3061f05b2f97d4ca6eac1738db7d3eb037
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Fri Dec 2 11:59:36 2022 -0500

    ktest.pl minconfig: Unset configs instead of just removing them
    
    commit ef784eebb56425eed6e9b16e7d47e5c00dcf9c38 upstream.
    
    After a full run of a make_min_config test, I noticed there were a lot of
    CONFIGs still enabled that really should not be. Looking at them, I
    noticed they were all defined as "default y". The issue is that the test
    simple removes the config and re-runs make oldconfig, which enables it
    again because it is set to default 'y'. Instead, explicitly disable the
    config with writing "# CONFIG_FOO is not set" to the file to keep it from
    being set again.
    
    With this change, one of my box's minconfigs went from 768 configs set,
    down to 521 configs set.
    
    Link: https://lkml.kernel.org/r/20221202115936.016fce23@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 0a05c769a9de5 ("ktest: Added config_bisect test type")
    Reviewed-by: John 'Warthog9' Hawley (VMware) <warthog9@eaglescrag.net>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5148dfceab557f7137c82671fedaf13a68beca1a
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Wed Nov 30 17:54:34 2022 -0500

    kest.pl: Fix grub2 menu handling for rebooting
    
    commit 26df05a8c1420ad3de314fdd407e7fc2058cc7aa upstream.
    
    grub2 has submenus where to use grub-reboot, it requires:
    
      grub-reboot X>Y
    
    where X is the main index and Y is the submenu. Thus if you have:
    
    menuentry 'Debian GNU/Linux' --class debian --class gnu-linux ...
            [...]
    }
    submenu 'Advanced options for Debian GNU/Linux' $menuentry_id_option ...
            menuentry 'Debian GNU/Linux, with Linux 6.0.0-4-amd64' --class debian --class gnu-linux ...
                    [...]
            }
            menuentry 'Debian GNU/Linux, with Linux 6.0.0-4-amd64 (recovery mode)' --class debian --class gnu-linux ...
                    [...]
            }
            menuentry 'Debian GNU/Linux, with Linux test' --class debian --class gnu-linux ...
                    [...]
            }
    
    And wanted to boot to the "Linux test" kernel, you need to run:
    
     # grub-reboot 1>2
    
    As 1 is the second top menu (the submenu) and 2 is the third of the sub
    menu entries.
    
    Have the grub.cfg parsing for grub2 handle such cases.
    
    Cc: stable@vger.kernel.org
    Fixes: a15ba91361d46 ("ktest: Add support for grub2")
    Reviewed-by: John 'Warthog9' Hawley (VMware) <warthog9@eaglescrag.net>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 780297af3c85266d2f286e778132e9016630735f
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Tue Nov 29 12:41:59 2022 +0530

    soc: qcom: Select REMAP_MMIO for LLCC driver
    
    commit 5d2fe2d7b616b8baa18348ead857b504fc2de336 upstream.
    
    LLCC driver uses REGMAP_MMIO for accessing the hardware registers. So
    select the dependency in Kconfig. Without this, there will be errors
    while building the driver with COMPILE_TEST only:
    
    ERROR: modpost: "__devm_regmap_init_mmio_clk" [drivers/soc/qcom/llcc-qcom.ko] undefined!
    make[1]: *** [scripts/Makefile.modpost:126: Module.symvers] Error 1
    make: *** [Makefile:1944: modpost] Error 2
    
    Cc: <stable@vger.kernel.org> # 4.19
    Fixes: a3134fb09e0b ("drivers: soc: Add LLCC driver")
    Reported-by: Borislav Petkov <bp@alien8.de>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221129071201.30024-2-manivannan.sadhasivam@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5db9aaf1b47c6acf16bc94e9703636cb9a6f5f9
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Oct 24 17:23:43 2022 +0200

    media: stv0288: use explicitly signed char
    
    commit 7392134428c92a4cb541bd5c8f4f5c8d2e88364d upstream.
    
    With char becoming unsigned by default, and with `char` alone being
    ambiguous and based on architecture, signed chars need to be marked
    explicitly as such. Use `s8` and `u8` types here, since that's what
    surrounding code does. This fixes:
    
    drivers/media/dvb-frontends/stv0288.c:471 stv0288_set_frontend() warn: assigning (-9) to unsigned variable 'tm'
    drivers/media/dvb-frontends/stv0288.c:471 stv0288_set_frontend() warn: we never enter this loop
    
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: linux-media@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25dbd87379f8e8c520197f0d632efea838519e88
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jun 2 09:18:59 2022 -0700

    net/af_packet: make sure to pull mac header
    
    commit e9d3f80935b6607dcdc5682b00b1d4b28e0a0c5d upstream.
    
    GSO assumes skb->head contains link layer headers.
    
    tun device in some case can provide base 14 bytes,
    regardless of VLAN being used or not.
    
    After blamed commit, we can end up setting a network
    header offset of 18+, we better pull the missing
    bytes to avoid a posible crash in GSO.
    
    syzbot report was:
    kernel BUG at include/linux/skbuff.h:2699!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 3601 Comm: syz-executor210 Not tainted 5.18.0-syzkaller-11338-g2c5ca23f7414 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__skb_pull include/linux/skbuff.h:2699 [inline]
    RIP: 0010:skb_mac_gso_segment+0x48f/0x530 net/core/gro.c:136
    Code: 00 48 c7 c7 00 96 d4 8a c6 05 cb d3 45 06 01 e8 26 bb d0 01 e9 2f fd ff ff 49 c7 c4 ea ff ff ff e9 f1 fe ff ff e8 91 84 19 fa <0f> 0b 48 89 df e8 97 44 66 fa e9 7f fd ff ff e8 ad 44 66 fa e9 48
    RSP: 0018:ffffc90002e2f4b8 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: 0000000000000012 RCX: 0000000000000000
    RDX: ffff88805bb58000 RSI: ffffffff8760ed0f RDI: 0000000000000004
    RBP: 0000000000005dbc R08: 0000000000000004 R09: 0000000000000fe0
    R10: 0000000000000fe4 R11: 0000000000000000 R12: 0000000000000fe0
    R13: ffff88807194d780 R14: 1ffff920005c5e9b R15: 0000000000000012
    FS:  000055555730f300(0000) GS:ffff8880b9d00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000200015c0 CR3: 0000000071ff8000 CR4: 0000000000350ee0
    Call Trace:
     <TASK>
     __skb_gso_segment+0x327/0x6e0 net/core/dev.c:3411
     skb_gso_segment include/linux/netdevice.h:4749 [inline]
     validate_xmit_skb+0x6bc/0xf10 net/core/dev.c:3669
     validate_xmit_skb_list+0xbc/0x120 net/core/dev.c:3719
     sch_direct_xmit+0x3d1/0xbe0 net/sched/sch_generic.c:327
     __dev_xmit_skb net/core/dev.c:3815 [inline]
     __dev_queue_xmit+0x14a1/0x3a00 net/core/dev.c:4219
     packet_snd net/packet/af_packet.c:3071 [inline]
     packet_sendmsg+0x21cb/0x5550 net/packet/af_packet.c:3102
     sock_sendmsg_nosec net/socket.c:714 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:734
     ____sys_sendmsg+0x6eb/0x810 net/socket.c:2492
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2546
     __sys_sendmsg net/socket.c:2575 [inline]
     __do_sys_sendmsg net/socket.c:2584 [inline]
     __se_sys_sendmsg net/socket.c:2582 [inline]
     __x64_sys_sendmsg+0x132/0x220 net/socket.c:2582
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x46/0xb0
    RIP: 0033:0x7f4b95da06c9
    Code: 28 c3 e8 4a 15 00 00 66 2e 0f 1f 84 00 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffd7defc4c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007ffd7defc4f0 RCX: 00007f4b95da06c9
    RDX: 0000000000000000 RSI: 0000000020000140 RDI: 0000000000000003
    RBP: 0000000000000003 R08: bb1414ac00000050 R09: bb1414ac00000050
    R10: 0000000000000004 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007ffd7defc4e0 R14: 00007ffd7defc4d8 R15: 00007ffd7defc4d4
     </TASK>
    
    Fixes: dfed913e8b55 ("net/af_packet: add VLAN support for AF_PACKET SOCK_RAW GSO")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2137d565ceb505de69593c181a0543bc4083838
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Mon Apr 25 09:45:02 2022 +0800

    net/af_packet: add VLAN support for AF_PACKET SOCK_RAW GSO
    
    commit dfed913e8b55a0c2c4906f1242fd38fd9a116e49 upstream.
    
    Currently, the kernel drops GSO VLAN tagged packet if it's created with
    socket(AF_PACKET, SOCK_RAW, 0) plus virtio_net_hdr.
    
    The reason is AF_PACKET doesn't adjust the skb network header if there is
    a VLAN tag. Then after virtio_net_hdr_set_proto() called, the skb->protocol
    will be set to ETH_P_IP/IPv6. And in later inet/ipv6_gso_segment() the skb
    is dropped as network header position is invalid.
    
    Let's handle VLAN packets by adjusting network header position in
    packet_parse_headers(). The adjustment is safe and does not affect the
    later xmit as tap device also did that.
    
    In packet_snd(), packet_parse_headers() need to be moved before calling
    virtio_net_hdr_set_proto(), so we can set correct skb->protocol and
    network header first.
    
    There is no need to update tpacket_snd() as it calls packet_parse_headers()
    in tpacket_fill_skb(), which is already before calling virtio_net_hdr_*
    functions.
    
    skb->no_fcs setting is also moved upper to make all skb settings together
    and keep consistency with function packet_sendmsg_spkt().
    
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/20220425014502.985464-1-liuhangbin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c15d7ecce0064fd0724422ec84d074a4b4eecef
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Oct 13 12:39:23 2020 -0700

    rcu: Prevent lockdep-RCU splats on lock acquisition/release
    
    commit 4d60b475f858ebdb06c1339f01a890f287b5e587 upstream.
    
    The rcu_cpu_starting() and rcu_report_dead() functions transition the
    current CPU between online and offline state from an RCU perspective.
    Unfortunately, this means that the rcu_cpu_starting() function's lock
    acquisition and the rcu_report_dead() function's lock releases happen
    while the CPU is offline from an RCU perspective, which can result
    in lockdep-RCU splats about using RCU from an offline CPU.  And this
    situation can also result in too-short grace periods, especially in
    guest OSes that are subject to vCPU preemption.
    
    This commit therefore uses sequence-count-like synchronization to forgive
    use of RCU while RCU thinks a CPU is offline across the full extent of
    the rcu_cpu_starting() and rcu_report_dead() function's lock acquisitions
    and releases.
    
    One approach would have been to use the actual sequence-count primitives
    provided by the Linux kernel.  Unfortunately, the resulting code looks
    completely broken and wrong, and is likely to result in patches that
    break RCU in an attempt to address this appearance of broken wrongness.
    Plus there is no net savings in lines of code, given the additional
    explicit memory barriers required.
    
    Therefore, this sequence count is instead implemented by a new ->ofl_seq
    field in the rcu_node structure.  If this counter's value is an odd
    number, RCU forgives RCU read-side critical sections on other CPUs covered
    by the same rcu_node structure, even if those CPUs are offline from
    an RCU perspective.  In addition, if a given leaf rcu_node structure's
    ->ofl_seq counter value is an odd number, rcu_gp_init() delays starting
    the grace period until that counter value changes.
    
    [ paulmck: Apply Peter Zijlstra feedback. ]
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c57f612f433f667c454191a8ff078b135dfcc4d
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Wed Sep 16 10:10:10 2020 -0700

    torture: Exclude "NOHZ tick-stop error" from fatal errors
    
    commit 8d68e68a781db80606c8e8f3e4383be6974878fd upstream.
    
    The "NOHZ tick-stop error: Non-RCU local softirq work is pending"
    warning happens frequently and appears to be irrelevant to the various
    torture tests.  This commit therefore filters it out.
    
    If there proves to be a need to pay attention to it a later commit will
    add an "advice" category to allow the user to immediately see that
    although something happened, it was not an indictment of the system
    being tortured.
    
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 289f512d08c4edffd3defa7b030debe22132d31b
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Mon Aug 1 19:33:45 2022 +0800

    wifi: rtlwifi: 8192de: correct checking of IQK reload
    
    commit 93fbc1ebd978cf408ef5765e9c1630fce9a8621b upstream.
    
    Since IQK could spend time, we make a cache of IQK result matrix that looks
    like iqk_matrix[channel_idx].val[x][y], and we can reload the matrix if we
    have made a cache. To determine a cache is made, we check
    iqk_matrix[channel_idx].val[0][0].
    
    The initial commit 7274a8c22980 ("rtlwifi: rtl8192de: Merge phy routines")
    make a mistake that checks incorrect iqk_matrix[channel_idx].val[0] that
    is always true, and this mistake is found by commit ee3db469dd31
    ("wifi: rtlwifi: remove always-true condition pointed out by GCC 12"), so
    I recall the vendor driver to find fix and apply the correctness.
    
    Fixes: 7274a8c22980 ("rtlwifi: rtl8192de: Merge phy routines")
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220801113345.42016-1-pkshih@realtek.com
    Signed-off-by: Semyon Verchenko <semverchenko@factor-ts.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f6d6974b08e1f0b904466b2b7a0ff47b2c70140
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri May 20 12:43:15 2022 -0700

    wifi: rtlwifi: remove always-true condition pointed out by GCC 12
    
    commit ee3db469dd317e82f57b13aa3bc61be5cb60c2b4 upstream.
    
    The .value is a two-dim array, not a pointer.
    
    struct iqk_matrix_regs {
            bool iqk_done;
            long value[1][IQK_MATRIX_REG_NUM];
    };
    
    Acked-by: Kalle Valo <kvalo@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Semyon Verchenko <semverchenko@factor-ts.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40b844796b6bd041b77c928f6373e02ff4c68f9f
Author: Dima Chumak <dchumak@nvidia.com>
Date:   Mon Apr 26 15:16:26 2021 +0300

    net/mlx5e: Fix nullptr in mlx5e_tc_add_fdb_flow()
    
    commit fe7738eb3ca3631a75844e790f6cb576c0fe7b00 upstream.
    
    The result of __dev_get_by_index() is not checked for NULL, which then
    passed to mlx5e_attach_encap() and gets dereferenced.
    
    Also, in case of a successful lookup, the net_device reference count is
    not incremented, which may result in net_device pointer becoming invalid
    at any time during mlx5e_attach_encap() execution.
    
    Fix by using dev_get_by_index(), which does proper reference counting on
    the net_device pointer. Also, handle nullptr return value when mirred
    device is not found.
    
    It's safe to call dev_put() on the mirred net_device pointer, right
    after mlx5e_attach_encap() call, because it's not being saved/copied
    down the call chain.
    
    Fixes: 3c37745ec614 ("net/mlx5e: Properly deal with encap flows add/del under neigh update")
    Addresses-Coverity: ("Dereference null return value")
    Signed-off-by: Dima Chumak <dchumak@nvidia.com>
    Reviewed-by: Vlad Buslov <vladbu@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b20aab8cfd0fe311a5388765d43d0e5febbcc81
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Dec 24 10:10:31 2021 +0800

    ASoC/SoundWire: dai: expand 'stream' concept beyond SoundWire
    
    commit e8444560b4d9302a511f0996f4cfdf85b628f4ca upstream.
    
    The HDAudio ASoC support relies on the set_tdm_slots() helper to store
    the HDaudio stream tag in the tx_mask. This only works because of the
    pre-existing order in soc-pcm.c, where the hw_params() is handled for
    codec_dais *before* cpu_dais. When the order is reversed, the
    stream_tag is used as a mask in the codec fixup functions:
    
            /* fixup params based on TDM slot masks */
            if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK &&
                codec_dai->tx_mask)
                    soc_pcm_codec_params_fixup(&codec_params,
                                               codec_dai->tx_mask);
    
    As a result of this confusion, the codec_params_fixup() ends-up
    generating bad channel masks, depending on what stream_tag was
    allocated.
    
    We could add a flag to state that the tx_mask is really not a mask,
    but it would be quite ugly to persist in overloading concepts.
    
    Instead, this patch suggests a more generic get/set 'stream' API based
    on the existing model for SoundWire. We can expand the concept to
    store 'stream' opaque information that is specific to different DAI
    types. In the case of HDAudio DAIs, we only need to store a stream tag
    as an unsigned char pointer. The TDM rx_ and tx_masks should really
    only be used to store masks.
    
    Rename get_sdw_stream/set_sdw_stream callbacks and helpers as
    get_stream/set_stream. No functionality change beyond the rename.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Acked-By: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20211224021034.26635-5-yung-chuan.liao@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 185c141946e0fd1921638593181311b39b51255f
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Dec 24 10:10:32 2021 +0800

    ASoC: Intel/SOF: use set_stream() instead of set_tdm_slots() for HDAudio
    
    commit 636110411ca726f19ef8e87b0be51bb9a4cdef06 upstream.
    
    Overloading the tx_mask with a linear value is asking for trouble and
    only works because the codec_dai hw_params() is called before the
    cpu_dai hw_params().
    
    Move to the more generic set_stream() API to pass the hdac_stream
    information.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20211224021034.26635-6-yung-chuan.liao@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b3631a2e17dc7283abd684df9cfd258d909a8b3
Author: Marco Elver <elver@google.com>
Date:   Mon Sep 12 11:45:40 2022 +0200

    kcsan: Instrument memcpy/memset/memmove with newer Clang
    
    commit 7c201739beef1a586d806463f1465429cdce34c5 upstream.
    
    With Clang version 16+, -fsanitize=thread will turn
    memcpy/memset/memmove calls in instrumented functions into
    __tsan_memcpy/__tsan_memset/__tsan_memmove calls respectively.
    
    Add these functions to the core KCSAN runtime, so that we (a) catch data
    races with mem* functions, and (b) won't run into linker errors with
    such newer compilers.
    
    Cc: stable@vger.kernel.org # v5.10+
    Signed-off-by: Marco Elver <elver@google.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    [ elver@google.com: adjust check_access() call for v5.15 and earlier. ]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cd6026e257362f030c8be57abaf7fc0049df60a
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Sat Nov 26 15:55:18 2022 -0500

    SUNRPC: Don't leak netobj memory when gss_read_proxy_verf() fails
    
    commit da522b5fe1a5f8b7c20a0023e87b52a150e53bf5 upstream.
    
    Fixes: 030d794bf498 ("SUNRPC: Use gssproxy upcall for server RPCGSS authentication.")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b6c822238da9ee8984803355601bcc603d49cb5
Author: Hanjun Guo <guohanjun@huawei.com>
Date:   Thu Nov 17 19:23:42 2022 +0800

    tpm: tpm_tis: Add the missed acpi_put_table() to fix memory leak
    
    commit db9622f762104459ff87ecdf885cc42c18053fd9 upstream.
    
    In check_acpi_tpm2(), we get the TPM2 table just to make
    sure the table is there, not used after the init, so the
    acpi_put_table() should be added to release the ACPI memory.
    
    Fixes: 4cb586a188d4 ("tpm_tis: Consolidate the platform and acpi probe flow")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bd9b4be721c776f77adcaf34105dfca3007ddb9
Author: Hanjun Guo <guohanjun@huawei.com>
Date:   Thu Nov 17 19:23:41 2022 +0800

    tpm: tpm_crb: Add the missed acpi_put_table() to fix memory leak
    
    commit 37e90c374dd11cf4919c51e847c6d6ced0abc555 upstream.
    
    In crb_acpi_add(), we get the TPM2 table to retrieve information
    like start method, and then assign them to the priv data, so the
    TPM2 table is not used after the init, should be freed, call
    acpi_put_table() to fix the memory leak.
    
    Fixes: 30fc8d138e91 ("tpm: TPM 2.0 CRB Interface")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hanjun Guo <guohanjun@huawei.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ddc48068ac85740d3d5f9f3b0b323e733a35b33
Author: Hanjun Guo <guohanjun@huawei.com>
Date:   Thu Nov 17 19:23:40 2022 +0800

    tpm: acpi: Call acpi_put_table() to fix memory leak
    
    commit 8740a12ca2e2959531ad253bac99ada338b33d80 upstream.
    
    The start and length of the event log area are obtained from
    TPM2 or TCPA table, so we call acpi_get_table() to get the
    ACPI information, but the acpi_get_table() should be coupled with
    acpi_put_table() to release the ACPI memory, add the acpi_put_table()
    properly to fix the memory leak.
    
    While we are at it, remove the redundant empty line at the
    end of the tpm_read_log_acpi().
    
    Fixes: 0bfb23746052 ("tpm: Move eventlog files to a subdirectory")
    Fixes: 85467f63a05c ("tpm: Add support for event log pointer found in TPM2 ACPI table")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hanjun Guo <guohanjun@huawei.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b51d5fed9f53e07ce9fc65efb4ff1abe021a4c16
Author: Deren Wu <deren.wu@mediatek.com>
Date:   Sun Dec 4 16:24:16 2022 +0800

    mmc: vub300: fix warning - do not call blocking ops when !TASK_RUNNING
    
    commit 4a44cd249604e29e7b90ae796d7692f5773dd348 upstream.
    
    vub300_enable_sdio_irq() works with mutex and need TASK_RUNNING here.
    Ensure that we mark current as TASK_RUNNING for sleepable context.
    
    [   77.554641] do not call blocking ops when !TASK_RUNNING; state=1 set at [<ffffffff92a72c1d>] sdio_irq_thread+0x17d/0x5b0
    [   77.554652] WARNING: CPU: 2 PID: 1983 at kernel/sched/core.c:9813 __might_sleep+0x116/0x160
    [   77.554905] CPU: 2 PID: 1983 Comm: ksdioirqd/mmc1 Tainted: G           OE      6.1.0-rc5 #1
    [   77.554910] Hardware name: Intel(R) Client Systems NUC8i7BEH/NUC8BEB, BIOS BECFL357.86A.0081.2020.0504.1834 05/04/2020
    [   77.554912] RIP: 0010:__might_sleep+0x116/0x160
    [   77.554920] RSP: 0018:ffff888107b7fdb8 EFLAGS: 00010282
    [   77.554923] RAX: 0000000000000000 RBX: ffff888118c1b740 RCX: 0000000000000000
    [   77.554926] RDX: 0000000000000001 RSI: 0000000000000004 RDI: ffffed1020f6ffa9
    [   77.554928] RBP: ffff888107b7fde0 R08: 0000000000000001 R09: ffffed1043ea60ba
    [   77.554930] R10: ffff88821f5305cb R11: ffffed1043ea60b9 R12: ffffffff93aa3a60
    [   77.554932] R13: 000000000000011b R14: 7fffffffffffffff R15: ffffffffc0558660
    [   77.554934] FS:  0000000000000000(0000) GS:ffff88821f500000(0000) knlGS:0000000000000000
    [   77.554937] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   77.554939] CR2: 00007f8a44010d68 CR3: 000000024421a003 CR4: 00000000003706e0
    [   77.554942] Call Trace:
    [   77.554944]  <TASK>
    [   77.554952]  mutex_lock+0x78/0xf0
    [   77.554973]  vub300_enable_sdio_irq+0x103/0x3c0 [vub300]
    [   77.554981]  sdio_irq_thread+0x25c/0x5b0
    [   77.555006]  kthread+0x2b8/0x370
    [   77.555017]  ret_from_fork+0x1f/0x30
    [   77.555023]  </TASK>
    [   77.555025] ---[ end trace 0000000000000000 ]---
    
    Fixes: 88095e7b473a ("mmc: Add new VUB300 USB-to-SD/SDIO/MMC driver")
    Signed-off-by: Deren Wu <deren.wu@mediatek.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87dc45b122d26d63c80532976813c9365d7160b3.1670140888.git.deren.wu@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 252a720882807fb29c085ff286867c5c63167569
Author: Pavel Machek <pavel@denx.de>
Date:   Mon Oct 24 19:30:12 2022 +0200

    f2fs: should put a page when checking the summary info
    
    commit c3db3c2fd9992c08f49aa93752d3c103c3a4f6aa upstream.
    
    The commit introduces another bug.
    
    Cc: stable@vger.kernel.org
    Fixes: c6ad7fd16657e ("f2fs: fix to do sanity check on summary info")
    Signed-off-by: Pavel Machek <pavel@denx.de>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 882734bbc5873143b17292cd29504bda9142d565
Author: NARIBAYASHI Akira <a.naribayashi@fujitsu.com>
Date:   Wed Oct 26 20:24:38 2022 +0900

    mm, compaction: fix fast_isolate_around() to stay within boundaries
    
    commit be21b32afe470c5ae98e27e49201158a47032942 upstream.
    
    Depending on the memory configuration, isolate_freepages_block() may scan
    pages out of the target range and causes panic.
    
    Panic can occur on systems with multiple zones in a single pageblock.
    
    The reason it is rare is that it only happens in special
    configurations.  Depending on how many similar systems there are, it
    may be a good idea to fix this problem for older kernels as well.
    
    The problem is that pfn as argument of fast_isolate_around() could be out
    of the target range.  Therefore we should consider the case where pfn <
    start_pfn, and also the case where end_pfn < pfn.
    
    This problem should have been addressd by the commit 6e2b7044c199 ("mm,
    compaction: make fast_isolate_freepages() stay within zone") but there was
    an oversight.
    
     Case1: pfn < start_pfn
    
      <at memory compaction for node Y>
      |  node X's zone  | node Y's zone
      +-----------------+------------------------------...
       pageblock    ^   ^     ^
      +-----------+-----------+-----------+-----------+...
                    ^   ^     ^
                    ^   ^      end_pfn
                    ^    start_pfn = cc->zone->zone_start_pfn
                     pfn
                    <---------> scanned range by "Scan After"
    
     Case2: end_pfn < pfn
    
      <at memory compaction for node X>
      |  node X's zone  | node Y's zone
      +-----------------+------------------------------...
       pageblock  ^     ^   ^
      +-----------+-----------+-----------+-----------+...
                  ^     ^   ^
                  ^     ^    pfn
                  ^      end_pfn
                   start_pfn
                  <---------> scanned range by "Scan Before"
    
    It seems that there is no good reason to skip nr_isolated pages just after
    given pfn.  So let perform simple scan from start to end instead of
    dividing the scan into "Before" and "After".
    
    Link: https://lkml.kernel.org/r/20221026112438.236336-1-a.naribayashi@fujitsu.com
    Fixes: 6e2b7044c199 ("mm, compaction: make fast_isolate_freepages() stay within zone").
    Signed-off-by: NARIBAYASHI Akira <a.naribayashi@fujitsu.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae7793027766491c5f8635b12d15a5940d3b8698
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Nov 4 09:53:38 2022 -0400

    md: fix a crash in mempool_free
    
    commit 341097ee53573e06ab9fc675d96a052385b851fa upstream.
    
    There's a crash in mempool_free when running the lvm test
    shell/lvchange-rebuild-raid.sh.
    
    The reason for the crash is this:
    * super_written calls atomic_dec_and_test(&mddev->pending_writes) and
      wake_up(&mddev->sb_wait). Then it calls rdev_dec_pending(rdev, mddev)
      and bio_put(bio).
    * so, the process that waited on sb_wait and that is woken up is racing
      with bio_put(bio).
    * if the process wins the race, it calls bioset_exit before bio_put(bio)
      is executed.
    * bio_put(bio) attempts to free a bio into a destroyed bio set - causing
      a crash in mempool_free.
    
    We fix this bug by moving bio_put before atomic_dec_and_test.
    
    We also move rdev_dec_pending before atomic_dec_and_test as suggested by
    Neil Brown.
    
    The function md_end_flush has a similar bug - we must call bio_put before
    we decrement the number of in-progress bios.
    
     BUG: kernel NULL pointer dereference, address: 0000000000000000
     #PF: supervisor write access in kernel mode
     #PF: error_code(0x0002) - not-present page
     PGD 11557f0067 P4D 11557f0067 PUD 0
     Oops: 0002 [#1] PREEMPT SMP
     CPU: 0 PID: 73 Comm: kworker/0:1 Not tainted 6.1.0-rc3 #5
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-2 04/01/2014
     Workqueue: kdelayd flush_expired_bios [dm_delay]
     RIP: 0010:mempool_free+0x47/0x80
     Code: 48 89 ef 5b 5d ff e0 f3 c3 48 89 f7 e8 32 45 3f 00 48 63 53 08 48 89 c6 3b 53 04 7d 2d 48 8b 43 10 8d 4a 01 48 89 df 89 4b 08 <48> 89 2c d0 e8 b0 45 3f 00 48 8d 7b 30 5b 5d 31 c9 ba 01 00 00 00
     RSP: 0018:ffff88910036bda8 EFLAGS: 00010093
     RAX: 0000000000000000 RBX: ffff8891037b65d8 RCX: 0000000000000001
     RDX: 0000000000000000 RSI: 0000000000000202 RDI: ffff8891037b65d8
     RBP: ffff8891447ba240 R08: 0000000000012908 R09: 00000000003d0900
     R10: 0000000000000000 R11: 0000000000173544 R12: ffff889101a14000
     R13: ffff8891562ac300 R14: ffff889102b41440 R15: ffffe8ffffa00d05
     FS:  0000000000000000(0000) GS:ffff88942fa00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000000 CR3: 0000001102e99000 CR4: 00000000000006b0
     Call Trace:
      <TASK>
      clone_endio+0xf4/0x1c0 [dm_mod]
      clone_endio+0xf4/0x1c0 [dm_mod]
      __submit_bio+0x76/0x120
      submit_bio_noacct_nocheck+0xb6/0x2a0
      flush_expired_bios+0x28/0x2f [dm_delay]
      process_one_work+0x1b4/0x300
      worker_thread+0x45/0x3e0
      ? rescuer_thread+0x380/0x380
      kthread+0xc2/0x100
      ? kthread_complete_and_exit+0x20/0x20
      ret_from_fork+0x1f/0x30
      </TASK>
     Modules linked in: brd dm_delay dm_raid dm_mod af_packet uvesafb cfbfillrect cfbimgblt cn cfbcopyarea fb font fbdev tun autofs4 binfmt_misc configfs ipv6 virtio_rng virtio_balloon rng_core virtio_net pcspkr net_failover failover qemu_fw_cfg button mousedev raid10 raid456 libcrc32c async_raid6_recov async_memcpy async_pq raid6_pq async_xor xor async_tx raid1 raid0 md_mod sd_mod t10_pi crc64_rocksoft crc64 virtio_scsi scsi_mod evdev psmouse bsg scsi_common [last unloaded: brd]
     CR2: 0000000000000000
     ---[ end trace 0000000000000000 ]---
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b591b2919d018ef91b4a9571edca94105bcad3df
Author: Christian Brauner <brauner@kernel.org>
Date:   Sat Dec 17 22:28:40 2022 +0100

    pnode: terminate at peers of source
    
    commit 11933cf1d91d57da9e5c53822a540bbdc2656c16 upstream.
    
    The propagate_mnt() function handles mount propagation when creating
    mounts and propagates the source mount tree @source_mnt to all
    applicable nodes of the destination propagation mount tree headed by
    @dest_mnt.
    
    Unfortunately it contains a bug where it fails to terminate at peers of
    @source_mnt when looking up copies of the source mount that become
    masters for copies of the source mount tree mounted on top of slaves in
    the destination propagation tree causing a NULL dereference.
    
    Once the mechanics of the bug are understood it's easy to trigger.
    Because of unprivileged user namespaces it is available to unprivileged
    users.
    
    While fixing this bug we've gotten confused multiple times due to
    unclear terminology or missing concepts. So let's start this with some
    clarifications:
    
    * The terms "master" or "peer" denote a shared mount. A shared mount
      belongs to a peer group.
    
    * A peer group is a set of shared mounts that propagate to each other.
      They are identified by a peer group id. The peer group id is available
      in @shared_mnt->mnt_group_id.
      Shared mounts within the same peer group have the same peer group id.
      The peers in a peer group can be reached via @shared_mnt->mnt_share.
    
    * The terms "slave mount" or "dependent mount" denote a mount that
      receives propagation from a peer in a peer group. IOW, shared mounts
      may have slave mounts and slave mounts have shared mounts as their
      master. Slave mounts of a given peer in a peer group are listed on
      that peers slave list available at @shared_mnt->mnt_slave_list.
    
    * The term "master mount" denotes a mount in a peer group. IOW, it
      denotes a shared mount or a peer mount in a peer group. The term
      "master mount" - or "master" for short - is mostly used when talking
      in the context of slave mounts that receive propagation from a master
      mount. A master mount of a slave identifies the closest peer group a
      slave mount receives propagation from. The master mount of a slave can
      be identified via @slave_mount->mnt_master. Different slaves may point
      to different masters in the same peer group.
    
    * Multiple peers in a peer group can have non-empty ->mnt_slave_lists.
      Non-empty ->mnt_slave_lists of peers don't intersect. Consequently, to
      ensure all slave mounts of a peer group are visited the
      ->mnt_slave_lists of all peers in a peer group have to be walked.
    
    * Slave mounts point to a peer in the closest peer group they receive
      propagation from via @slave_mnt->mnt_master (see above). Together with
      these peers they form a propagation group (see below). The closest
      peer group can thus be identified through the peer group id
      @slave_mnt->mnt_master->mnt_group_id of the peer/master that a slave
      mount receives propagation from.
    
    * A shared-slave mount is a slave mount to a peer group pg1 while also
      a peer in another peer group pg2. IOW, a peer group may receive
      propagation from another peer group.
    
      If a peer group pg1 is a slave to another peer group pg2 then all
      peers in peer group pg1 point to the same peer in peer group pg2 via
      ->mnt_master. IOW, all peers in peer group pg1 appear on the same
      ->mnt_slave_list. IOW, they cannot be slaves to different peer groups.
    
    * A pure slave mount is a slave mount that is a slave to a peer group
      but is not a peer in another peer group.
    
    * A propagation group denotes the set of mounts consisting of a single
      peer group pg1 and all slave mounts and shared-slave mounts that point
      to a peer in that peer group via ->mnt_master. IOW, all slave mounts
      such that @slave_mnt->mnt_master->mnt_group_id is equal to
      @shared_mnt->mnt_group_id.
    
      The concept of a propagation group makes it easier to talk about a
      single propagation level in a propagation tree.
    
      For example, in propagate_mnt() the immediate peers of @dest_mnt and
      all slaves of @dest_mnt's peer group form a propagation group propg1.
      So a shared-slave mount that is a slave in propg1 and that is a peer
      in another peer group pg2 forms another propagation group propg2
      together with all slaves that point to that shared-slave mount in
      their ->mnt_master.
    
    * A propagation tree refers to all mounts that receive propagation
      starting from a specific shared mount.
    
      For example, for propagate_mnt() @dest_mnt is the start of a
      propagation tree. The propagation tree ecompasses all mounts that
      receive propagation from @dest_mnt's peer group down to the leafs.
    
    With that out of the way let's get to the actual algorithm.
    
    We know that @dest_mnt is guaranteed to be a pure shared mount or a
    shared-slave mount. This is guaranteed by a check in
    attach_recursive_mnt(). So propagate_mnt() will first propagate the
    source mount tree to all peers in @dest_mnt's peer group:
    
    for (n = next_peer(dest_mnt); n != dest_mnt; n = next_peer(n)) {
            ret = propagate_one(n);
            if (ret)
                   goto out;
    }
    
    Notice, that the peer propagation loop of propagate_mnt() doesn't
    propagate @dest_mnt itself. @dest_mnt is mounted directly in
    attach_recursive_mnt() after we propagated to the destination
    propagation tree.
    
    The mount that will be mounted on top of @dest_mnt is @source_mnt. This
    copy was created earlier even before we entered attach_recursive_mnt()
    and doesn't concern us a lot here.
    
    It's just important to notice that when propagate_mnt() is called
    @source_mnt will not yet have been mounted on top of @dest_mnt. Thus,
    @source_mnt->mnt_parent will either still point to @source_mnt or - in
    the case @source_mnt is moved and thus already attached - still to its
    former parent.
    
    For each peer @m in @dest_mnt's peer group propagate_one() will create a
    new copy of the source mount tree and mount that copy @child on @m such
    that @child->mnt_parent points to @m after propagate_one() returns.
    
    propagate_one() will stash the last destination propagation node @m in
    @last_dest and the last copy it created for the source mount tree in
    @last_source.
    
    Hence, if we call into propagate_one() again for the next destination
    propagation node @m, @last_dest will point to the previous destination
    propagation node and @last_source will point to the previous copy of the
    source mount tree and mounted on @last_dest.
    
    Each new copy of the source mount tree is created from the previous copy
    of the source mount tree. This will become important later.
    
    The peer loop in propagate_mnt() is straightforward. We iterate through
    the peers copying and updating @last_source and @last_dest as we go
    through them and mount each copy of the source mount tree @child on a
    peer @m in @dest_mnt's peer group.
    
    After propagate_mnt() handled the peers in @dest_mnt's peer group
    propagate_mnt() will propagate the source mount tree down the
    propagation tree that @dest_mnt's peer group propagates to:
    
    for (m = next_group(dest_mnt, dest_mnt); m;
                    m = next_group(m, dest_mnt)) {
            /* everything in that slave group */
            n = m;
            do {
                    ret = propagate_one(n);
                    if (ret)
                            goto out;
                    n = next_peer(n);
            } while (n != m);
    }
    
    The next_group() helper will recursively walk the destination
    propagation tree, descending into each propagation group of the
    propagation tree.
    
    The important part is that it takes care to propagate the source mount
    tree to all peers in the peer group of a propagation group before it
    propagates to the slaves to those peers in the propagation group. IOW,
    it creates and mounts copies of the source mount tree that become
    masters before it creates and mounts copies of the source mount tree
    that become slaves to these masters.
    
    It is important to remember that propagating the source mount tree to
    each mount @m in the destination propagation tree simply means that we
    create and mount new copies @child of the source mount tree on @m such
    that @child->mnt_parent points to @m.
    
    Since we know that each node @m in the destination propagation tree
    headed by @dest_mnt's peer group will be overmounted with a copy of the
    source mount tree and since we know that the propagation properties of
    each copy of the source mount tree we create and mount at @m will mostly
    mirror the propagation properties of @m. We can use that information to
    create and mount the copies of the source mount tree that become masters
    before their slaves.
    
    The easy case is always when @m and @last_dest are peers in a peer group
    of a given propagation group. In that case we know that we can simply
    copy @last_source without having to figure out what the master for the
    new copy @child of the source mount tree needs to be as we've done that
    in a previous call to propagate_one().
    
    The hard case is when we're dealing with a slave mount or a shared-slave
    mount @m in a destination propagation group that we need to create and
    mount a copy of the source mount tree on.
    
    For each propagation group in the destination propagation tree we
    propagate the source mount tree to we want to make sure that the copies
    @child of the source mount tree we create and mount on slaves @m pick an
    ealier copy of the source mount tree that we mounted on a master @m of
    the destination propagation group as their master. This is a mouthful
    but as far as we can tell that's the core of it all.
    
    But, if we keep track of the masters in the destination propagation tree
    @m we can use the information to find the correct master for each copy
    of the source mount tree we create and mount at the slaves in the
    destination propagation tree @m.
    
    Let's walk through the base case as that's still fairly easy to grasp.
    
    If we're dealing with the first slave in the propagation group that
    @dest_mnt is in then we don't yet have marked any masters in the
    destination propagation tree.
    
    We know the master for the first slave to @dest_mnt's peer group is
    simple @dest_mnt. So we expect this algorithm to yield a copy of the
    source mount tree that was mounted on a peer in @dest_mnt's peer group
    as the master for the copy of the source mount tree we want to mount at
    the first slave @m:
    
    for (n = m; ; n = p) {
            p = n->mnt_master;
            if (p == dest_master || IS_MNT_MARKED(p))
                    break;
    }
    
    For the first slave we walk the destination propagation tree all the way
    up to a peer in @dest_mnt's peer group. IOW, the propagation hierarchy
    can be walked by walking up the @mnt->mnt_master hierarchy of the
    destination propagation tree @m. We will ultimately find a peer in
    @dest_mnt's peer group and thus ultimately @dest_mnt->mnt_master.
    
    Btw, here the assumption we listed at the beginning becomes important.
    Namely, that peers in a peer group pg1 that are slaves in another peer
    group pg2 appear on the same ->mnt_slave_list. IOW, all slaves who are
    peers in peer group pg1 point to the same peer in peer group pg2 via
    their ->mnt_master. Otherwise the termination condition in the code
    above would be wrong and next_group() would be broken too.
    
    So the first iteration sets:
    
    n = m;
    p = n->mnt_master;
    
    such that @p now points to a peer or @dest_mnt itself. We walk up one
    more level since we don't have any marked mounts. So we end up with:
    
    n = dest_mnt;
    p = dest_mnt->mnt_master;
    
    If @dest_mnt's peer group is not slave to another peer group then @p is
    now NULL. If @dest_mnt's peer group is a slave to another peer group
    then @p now points to @dest_mnt->mnt_master points which is a master
    outside the propagation tree we're dealing with.
    
    Now we need to figure out the master for the copy of the source mount
    tree we're about to create and mount on the first slave of @dest_mnt's
    peer group:
    
    do {
            struct mount *parent = last_source->mnt_parent;
            if (last_source == first_source)
                    break;
            done = parent->mnt_master == p;
            if (done && peers(n, parent))
                    break;
            last_source = last_source->mnt_master;
    } while (!done);
    
    We know that @last_source->mnt_parent points to @last_dest and
    @last_dest is the last peer in @dest_mnt's peer group we propagated to
    in the peer loop in propagate_mnt().
    
    Consequently, @last_source is the last copy we created and mount on that
    last peer in @dest_mnt's peer group. So @last_source is the master we
    want to pick.
    
    We know that @last_source->mnt_parent->mnt_master points to
    @last_dest->mnt_master. We also know that @last_dest->mnt_master is
    either NULL or points to a master outside of the destination propagation
    tree and so does @p. Hence:
    
    done = parent->mnt_master == p;
    
    is trivially true in the base condition.
    
    We also know that for the first slave mount of @dest_mnt's peer group
    that @last_dest either points @dest_mnt itself because it was
    initialized to:
    
    last_dest = dest_mnt;
    
    at the beginning of propagate_mnt() or it will point to a peer of
    @dest_mnt in its peer group. In both cases it is guaranteed that on the
    first iteration @n and @parent are peers (Please note the check for
    peers here as that's important.):
    
    if (done && peers(n, parent))
            break;
    
    So, as we expected, we select @last_source, which referes to the last
    copy of the source mount tree we mounted on the last peer in @dest_mnt's
    peer group, as the master of the first slave in @dest_mnt's peer group.
    The rest is taken care of by clone_mnt(last_source, ...). We'll skip
    over that part otherwise this becomes a blogpost.
    
    At the end of propagate_mnt() we now mark @m->mnt_master as the first
    master in the destination propagation tree that is distinct from
    @dest_mnt->mnt_master. IOW, we mark @dest_mnt itself as a master.
    
    By marking @dest_mnt or one of it's peers we are able to easily find it
    again when we later lookup masters for other copies of the source mount
    tree we mount copies of the source mount tree on slaves @m to
    @dest_mnt's peer group. This, in turn allows us to find the master we
    selected for the copies of the source mount tree we mounted on master in
    the destination propagation tree again.
    
    The important part is to realize that the code makes use of the fact
    that the last copy of the source mount tree stashed in @last_source was
    mounted on top of the previous destination propagation node @last_dest.
    What this means is that @last_source allows us to walk the destination
    propagation hierarchy the same way each destination propagation node @m
    does.
    
    If we take @last_source, which is the copy of @source_mnt we have
    mounted on @last_dest in the previous iteration of propagate_one(), then
    we know @last_source->mnt_parent points to @last_dest but we also know
    that as we walk through the destination propagation tree that
    @last_source->mnt_master will point to an earlier copy of the source
    mount tree we mounted one an earlier destination propagation node @m.
    
    IOW, @last_source->mnt_parent will be our hook into the destination
    propagation tree and each consecutive @last_source->mnt_master will lead
    us to an earlier propagation node @m via
    @last_source->mnt_master->mnt_parent.
    
    Hence, by walking up @last_source->mnt_master, each of which is mounted
    on a node that is a master @m in the destination propagation tree we can
    also walk up the destination propagation hierarchy.
    
    So, for each new destination propagation node @m we use the previous
    copy of @last_source and the fact it's mounted on the previous
    propagation node @last_dest via @last_source->mnt_master->mnt_parent to
    determine what the master of the new copy of @last_source needs to be.
    
    The goal is to find the _closest_ master that the new copy of the source
    mount tree we are about to create and mount on a slave @m in the
    destination propagation tree needs to pick. IOW, we want to find a
    suitable master in the propagation group.
    
    As the propagation structure of the source mount propagation tree we
    create mirrors the propagation structure of the destination propagation
    tree we can find @m's closest master - i.e., a marked master - which is
    a peer in the closest peer group that @m receives propagation from. We
    store that closest master of @m in @p as before and record the slave to
    that master in @n
    
    We then search for this master @p via @last_source by walking up the
    master hierarchy starting from the last copy of the source mount tree
    stored in @last_source that we created and mounted on the previous
    destination propagation node @m.
    
    We will try to find the master by walking @last_source->mnt_master and
    by comparing @last_source->mnt_master->mnt_parent->mnt_master to @p. If
    we find @p then we can figure out what earlier copy of the source mount
    tree needs to be the master for the new copy of the source mount tree
    we're about to create and mount at the current destination propagation
    node @m.
    
    If @last_source->mnt_master->mnt_parent and @n are peers then we know
    that the closest master they receive propagation from is
    @last_source->mnt_master->mnt_parent->mnt_master. If not then the
    closest immediate peer group that they receive propagation from must be
    one level higher up.
    
    This builds on the earlier clarification at the beginning that all peers
    in a peer group which are slaves of other peer groups all point to the
    same ->mnt_master, i.e., appear on the same ->mnt_slave_list, of the
    closest peer group that they receive propagation from.
    
    However, terminating the walk has corner cases.
    
    If the closest marked master for a given destination node @m cannot be
    found by walking up the master hierarchy via @last_source->mnt_master
    then we need to terminate the walk when we encounter @source_mnt again.
    
    This isn't an arbitrary termination. It simply means that the new copy
    of the source mount tree we're about to create has a copy of the source
    mount tree we created and mounted on a peer in @dest_mnt's peer group as
    its master. IOW, @source_mnt is the peer in the closest peer group that
    the new copy of the source mount tree receives propagation from.
    
    We absolutely have to stop @source_mnt because @last_source->mnt_master
    either points outside the propagation hierarchy we're dealing with or it
    is NULL because @source_mnt isn't a shared-slave.
    
    So continuing the walk past @source_mnt would cause a NULL dereference
    via @last_source->mnt_master->mnt_parent. And so we have to stop the
    walk when we encounter @source_mnt again.
    
    One scenario where this can happen is when we first handled a series of
    slaves of @dest_mnt's peer group and then encounter peers in a new peer
    group that is a slave to @dest_mnt's peer group. We handle them and then
    we encounter another slave mount to @dest_mnt that is a pure slave to
    @dest_mnt's peer group. That pure slave will have a peer in @dest_mnt's
    peer group as its master. Consequently, the new copy of the source mount
    tree will need to have @source_mnt as it's master. So we walk the
    propagation hierarchy all the way up to @source_mnt based on
    @last_source->mnt_master.
    
    So terminate on @source_mnt, easy peasy. Except, that the check misses
    something that the rest of the algorithm already handles.
    
    If @dest_mnt has peers in it's peer group the peer loop in
    propagate_mnt():
    
    for (n = next_peer(dest_mnt); n != dest_mnt; n = next_peer(n)) {
            ret = propagate_one(n);
            if (ret)
                    goto out;
    }
    
    will consecutively update @last_source with each previous copy of the
    source mount tree we created and mounted at the previous peer in
    @dest_mnt's peer group. So after that loop terminates @last_source will
    point to whatever copy of the source mount tree was created and mounted
    on the last peer in @dest_mnt's peer group.
    
    Furthermore, if there is even a single additional peer in @dest_mnt's
    peer group then @last_source will __not__ point to @source_mnt anymore.
    Because, as we mentioned above, @dest_mnt isn't even handled in this
    loop but directly in attach_recursive_mnt(). So it can't even accidently
    come last in that peer loop.
    
    So the first time we handle a slave mount @m of @dest_mnt's peer group
    the copy of the source mount tree we create will make the __last copy of
    the source mount tree we created and mounted on the last peer in
    @dest_mnt's peer group the master of the new copy of the source mount
    tree we create and mount on the first slave of @dest_mnt's peer group__.
    
    But this means that the termination condition that checks for
    @source_mnt is wrong. The @source_mnt cannot be found anymore by
    propagate_one(). Instead it will find the last copy of the source mount
    tree we created and mounted for the last peer of @dest_mnt's peer group
    again. And that is a peer of @source_mnt not @source_mnt itself.
    
    IOW, we fail to terminate the loop correctly and ultimately dereference
    @last_source->mnt_master->mnt_parent. When @source_mnt's peer group
    isn't slave to another peer group then @last_source->mnt_master is NULL
    causing the splat below.
    
    For example, assume @dest_mnt is a pure shared mount and has three peers
    in its peer group:
    
    ===================================================================================
                                             mount-id   mount-parent-id   peer-group-id
    ===================================================================================
    (@dest_mnt) mnt_master[216]              309        297               shared:216
        \
         (@source_mnt) mnt_master[218]:      609        609               shared:218
    
    (1) mnt_master[216]:                     607        605               shared:216
        \
         (P1) mnt_master[218]:               624        607               shared:218
    
    (2) mnt_master[216]:                     576        574               shared:216
        \
         (P2) mnt_master[218]:               625        576               shared:218
    
    (3) mnt_master[216]:                     545        543               shared:216
        \
         (P3) mnt_master[218]:               626        545               shared:218
    
    After this sequence has been processed @last_source will point to (P3),
    the copy generated for the third peer in @dest_mnt's peer group we
    handled. So the copy of the source mount tree (P4) we create and mount
    on the first slave of @dest_mnt's peer group:
    
    ===================================================================================
                                             mount-id   mount-parent-id   peer-group-id
    ===================================================================================
        mnt_master[216]                      309        297               shared:216
       /
      /
    (S0) mnt_slave                           483        481               master:216
      \
       \    (P3) mnt_master[218]             626        545               shared:218
        \  /
         \/
        (P4) mnt_slave                       627        483               master:218
    
    will pick the last copy of the source mount tree (P3) as master, not (S0).
    
    When walking the propagation hierarchy via @last_source's master
    hierarchy we encounter (P3) but not (S0), i.e., @source_mnt.
    
    We can fix this in multiple ways:
    
    (1) By setting @last_source to @source_mnt after we processed the peers
        in @dest_mnt's peer group right after the peer loop in
        propagate_mnt().
    
    (2) By changing the termination condition that relies on finding exactly
        @source_mnt to finding a peer of @source_mnt.
    
    (3) By only moving @last_source when we actually venture into a new peer
        group or some clever variant thereof.
    
    The first two options are minimally invasive and what we want as a fix.
    The third option is more intrusive but something we'd like to explore in
    the near future.
    
    This passes all LTP tests and specifically the mount propagation
    testsuite part of it. It also holds up against all known reproducers of
    this issues.
    
    Final words.
    First, this is a clever but __worringly__ underdocumented algorithm.
    There isn't a single detailed comment to be found in next_group(),
    propagate_one() or anywhere else in that file for that matter. This has
    been a giant pain to understand and work through and a bug like this is
    insanely difficult to fix without a detailed understanding of what's
    happening. Let's not talk about the amount of time that was sunk into
    fixing this.
    
    Second, all the cool kids with access to
    unshare --mount --user --map-root --propagation=unchanged
    are going to have a lot of fun. IOW, triggerable by unprivileged users
    while namespace_lock() lock is held.
    
    [  115.848393] BUG: kernel NULL pointer dereference, address: 0000000000000010
    [  115.848967] #PF: supervisor read access in kernel mode
    [  115.849386] #PF: error_code(0x0000) - not-present page
    [  115.849803] PGD 0 P4D 0
    [  115.850012] Oops: 0000 [#1] PREEMPT SMP PTI
    [  115.850354] CPU: 0 PID: 15591 Comm: mount Not tainted 6.1.0-rc7 #3
    [  115.850851] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS
    VirtualBox 12/01/2006
    [  115.851510] RIP: 0010:propagate_one.part.0+0x7f/0x1a0
    [  115.851924] Code: 75 eb 4c 8b 05 c2 25 37 02 4c 89 ca 48 8b 4a 10
    49 39 d0 74 1e 48 3b 81 e0 00 00 00 74 26 48 8b 92 e0 00 00 00 be 01
    00 00 00 <48> 8b 4a 10 49 39 d0 75 e2 40 84 f6 74 38 4c 89 05 84 25 37
    02 4d
    [  115.853441] RSP: 0018:ffffb8d5443d7d50 EFLAGS: 00010282
    [  115.853865] RAX: ffff8e4d87c41c80 RBX: ffff8e4d88ded780 RCX: ffff8e4da4333a00
    [  115.854458] RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8e4d88ded780
    [  115.855044] RBP: ffff8e4d88ded780 R08: ffff8e4da4338000 R09: ffff8e4da43388c0
    [  115.855693] R10: 0000000000000002 R11: ffffb8d540158000 R12: ffffb8d5443d7da8
    [  115.856304] R13: ffff8e4d88ded780 R14: 0000000000000000 R15: 0000000000000000
    [  115.856859] FS:  00007f92c90c9800(0000) GS:ffff8e4dfdc00000(0000)
    knlGS:0000000000000000
    [  115.857531] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  115.858006] CR2: 0000000000000010 CR3: 0000000022f4c002 CR4: 00000000000706f0
    [  115.858598] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  115.859393] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  115.860099] Call Trace:
    [  115.860358]  <TASK>
    [  115.860535]  propagate_mnt+0x14d/0x190
    [  115.860848]  attach_recursive_mnt+0x274/0x3e0
    [  115.861212]  path_mount+0x8c8/0xa60
    [  115.861503]  __x64_sys_mount+0xf6/0x140
    [  115.861819]  do_syscall_64+0x5b/0x80
    [  115.862117]  ? do_faccessat+0x123/0x250
    [  115.862435]  ? syscall_exit_to_user_mode+0x17/0x40
    [  115.862826]  ? do_syscall_64+0x67/0x80
    [  115.863133]  ? syscall_exit_to_user_mode+0x17/0x40
    [  115.863527]  ? do_syscall_64+0x67/0x80
    [  115.863835]  ? do_syscall_64+0x67/0x80
    [  115.864144]  ? do_syscall_64+0x67/0x80
    [  115.864452]  ? exc_page_fault+0x70/0x170
    [  115.864775]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    [  115.865187] RIP: 0033:0x7f92c92b0ebe
    [  115.865480] Code: 48 8b 0d 75 4f 0c 00 f7 d8 64 89 01 48 83 c8 ff
    c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 49 89 ca b8 a5 00 00
    00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 42 4f 0c 00 f7 d8 64 89
    01 48
    [  115.866984] RSP: 002b:00007fff000aa728 EFLAGS: 00000246 ORIG_RAX:
    00000000000000a5
    [  115.867607] RAX: ffffffffffffffda RBX: 000055a77888d6b0 RCX: 00007f92c92b0ebe
    [  115.868240] RDX: 000055a77888d8e0 RSI: 000055a77888e6e0 RDI: 000055a77888e620
    [  115.868823] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000001
    [  115.869403] R10: 0000000000001000 R11: 0000000000000246 R12: 000055a77888e620
    [  115.869994] R13: 000055a77888d8e0 R14: 00000000ffffffff R15: 00007f92c93e4076
    [  115.870581]  </TASK>
    [  115.870763] Modules linked in: nft_fib_inet nft_fib_ipv4
    nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6
    nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6
    nf_defrag_ipv4 ip_set rfkill nf_tables nfnetlink qrtr snd_intel8x0
    sunrpc snd_ac97_codec ac97_bus snd_pcm snd_timer intel_rapl_msr
    intel_rapl_common snd vboxguest intel_powerclamp video rapl joydev
    soundcore i2c_piix4 wmi fuse zram xfs vmwgfx crct10dif_pclmul
    crc32_pclmul crc32c_intel polyval_clmulni polyval_generic
    drm_ttm_helper ttm e1000 ghash_clmulni_intel serio_raw ata_generic
    pata_acpi scsi_dh_rdac scsi_dh_emc scsi_dh_alua dm_multipath
    [  115.875288] CR2: 0000000000000010
    [  115.875641] ---[ end trace 0000000000000000 ]---
    [  115.876135] RIP: 0010:propagate_one.part.0+0x7f/0x1a0
    [  115.876551] Code: 75 eb 4c 8b 05 c2 25 37 02 4c 89 ca 48 8b 4a 10
    49 39 d0 74 1e 48 3b 81 e0 00 00 00 74 26 48 8b 92 e0 00 00 00 be 01
    00 00 00 <48> 8b 4a 10 49 39 d0 75 e2 40 84 f6 74 38 4c 89 05 84 25 37
    02 4d
    [  115.878086] RSP: 0018:ffffb8d5443d7d50 EFLAGS: 00010282
    [  115.878511] RAX: ffff8e4d87c41c80 RBX: ffff8e4d88ded780 RCX: ffff8e4da4333a00
    [  115.879128] RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8e4d88ded780
    [  115.879715] RBP: ffff8e4d88ded780 R08: ffff8e4da4338000 R09: ffff8e4da43388c0
    [  115.880359] R10: 0000000000000002 R11: ffffb8d540158000 R12: ffffb8d5443d7da8
    [  115.880962] R13: ffff8e4d88ded780 R14: 0000000000000000 R15: 0000000000000000
    [  115.881548] FS:  00007f92c90c9800(0000) GS:ffff8e4dfdc00000(0000)
    knlGS:0000000000000000
    [  115.882234] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  115.882713] CR2: 0000000000000010 CR3: 0000000022f4c002 CR4: 00000000000706f0
    [  115.883314] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  115.883966] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Fixes: f2ebb3a921c1 ("smarter propagate_mnt()")
    Fixes: 5ec0811d3037 ("propogate_mnt: Handle the first propogated copy being a slave")
    Cc: <stable@vger.kernel.org>
    Reported-by: Ditang Chen <ditang.c@gmail.com>
    Signed-off-by: Seth Forshee (Digital Ocean) <sforshee@kernel.org>
    Signed-off-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66f359ad66d49f75d39ac729f9114dabf90b81bb
Author: Artem Egorkine <arteme@gmail.com>
Date:   Sun Dec 25 12:57:28 2022 +0200

    ALSA: line6: fix stack overflow in line6_midi_transmit
    
    commit b8800d324abb50160560c636bfafe2c81001b66c upstream.
    
    Correctly calculate available space including the size of the chunk
    buffer. This fixes a buffer overflow when multiple MIDI sysex
    messages are sent to a PODxt device.
    
    Signed-off-by: Artem Egorkine <arteme@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221225105728.1153989-2-arteme@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e79f77ea42fdc7dc147f640cbc2c925b318954e
Author: Artem Egorkine <arteme@gmail.com>
Date:   Sun Dec 25 12:57:27 2022 +0200

    ALSA: line6: correct midi status byte when receiving data from podxt
    
    commit 8508fa2e7472f673edbeedf1b1d2b7a6bb898ecc upstream.
    
    A PODxt device sends 0xb2, 0xc2 or 0xf2 as a status byte for MIDI
    messages over USB that should otherwise have a 0xb0, 0xc0 or 0xf0
    status byte. This is usually corrected by the driver on other OSes.
    
    This fixes MIDI sysex messages sent by PODxt.
    
    [ tiwai: fixed white spaces ]
    
    Signed-off-by: Artem Egorkine <arteme@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221225105728.1153989-1-arteme@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56abf8046bc1e12b3c21335dd50386be773a1522
Author: Zhang Tianci <zhangtianci.1997@bytedance.com>
Date:   Thu Sep 1 16:29:29 2022 +0800

    ovl: Use ovl mounter's fsuid and fsgid in ovl_link()
    
    commit 5b0db51215e895a361bc63132caa7cca36a53d6a upstream.
    
    There is a wrong case of link() on overlay:
      $ mkdir /lower /fuse /merge
      $ mount -t fuse /fuse
      $ mkdir /fuse/upper /fuse/work
      $ mount -t overlay /merge -o lowerdir=/lower,upperdir=/fuse/upper,\
        workdir=work
      $ touch /merge/file
      $ chown bin.bin /merge/file // the file's caller becomes "bin"
      $ ln /merge/file /merge/lnkfile
    
    Then we will get an error(EACCES) because fuse daemon checks the link()'s
    caller is "bin", it denied this request.
    
    In the changing history of ovl_link(), there are two key commits:
    
    The first is commit bb0d2b8ad296 ("ovl: fix sgid on directory") which
    overrides the cred's fsuid/fsgid using the new inode. The new inode's
    owner is initialized by inode_init_owner(), and inode->fsuid is
    assigned to the current user. So the override fsuid becomes the
    current user. We know link() is actually modifying the directory, so
    the caller must have the MAY_WRITE permission on the directory. The
    current caller may should have this permission. This is acceptable
    to use the caller's fsuid.
    
    The second is commit 51f7e52dc943 ("ovl: share inode for hard link")
    which removed the inode creation in ovl_link(). This commit move
    inode_init_owner() into ovl_create_object(), so the ovl_link() just
    give the old inode to ovl_create_or_link(). Then the override fsuid
    becomes the old inode's fsuid, neither the caller nor the overlay's
    mounter! So this is incorrect.
    
    Fix this bug by using ovl mounter's fsuid/fsgid to do underlying
    fs's link().
    
    Link: https://lore.kernel.org/all/20220817102952.xnvesg3a7rbv576x@wittgenstein/T
    Link: https://lore.kernel.org/lkml/20220825130552.29587-1-zhangtianci.1997@bytedance.com/t
    Signed-off-by: Zhang Tianci <zhangtianci.1997@bytedance.com>
    Signed-off-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Reviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Fixes: 51f7e52dc943 ("ovl: share inode for hard link")
    Cc: <stable@vger.kernel.org> # v4.8
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3e8bbcbaa87d15ffc179abc0dcabb1e94f4757e
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Fri Dec 2 09:41:01 2022 +0800

    binfmt: Fix error return code in load_elf_fdpic_binary()
    
    commit e7f703ff2507f4e9f496da96cd4b78fd3026120c upstream.
    
    Fix to return a negative error code from create_elf_fdpic_tables()
    instead of 0.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/1669945261-30271-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12407462d3fccd865b0db8123d9d3972fd3c2aa5
Author: Aditya Garg <gargaditya08@live.com>
Date:   Wed Dec 7 03:05:40 2022 +0000

    hfsplus: fix bug causing custom uid and gid being unable to be assigned with mount
    
    commit 9f2b5debc07073e6dfdd774e3594d0224b991927 upstream.
    
    Despite specifying UID and GID in mount command, the specified UID and GID
    were not being assigned. This patch fixes this issue.
    
    Link: https://lkml.kernel.org/r/C0264BF5-059C-45CF-B8DA-3A3BD2C803A2@live.com
    Signed-off-by: Aditya Garg <gargaditya08@live.com>
    Reviewed-by: Viacheslav Dubeyko <slava@dubeyko.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44cf50587e822714f52ceeadd16b6c38d1b29d0f
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Sun Sep 4 23:17:13 2022 +0800

    pstore/zone: Use GFP_ATOMIC to allocate zone buffer
    
    commit 99b3b837855b987563bcfb397cf9ddd88262814b upstream.
    
    There is a case found when triggering a panic_on_oom, pstore fails to dump
    kmsg. Because psz_kmsg_write_record can't get the new buffer.
    
    Handle this by using GFP_ATOMIC to allocate a buffer at lower watermark.
    
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Fixes: 335426c6dcdd ("pstore/zone: Provide way to skip "broken" zone for MTD devices")
    Cc: WeiXiong Liao <gmpy.liaowx@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/CAJRQjofRCF7wjrYmw3D7zd5QZnwHQq+F8U-mJDJ6NZ4bddYdLA@mail.gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d992c044cfb2c552f03ee7e5fb99c034391f61b
Author: Terry Junge <linuxhid@cosmicgizmosystems.com>
Date:   Thu Dec 8 15:05:06 2022 -0800

    HID: plantronics: Additional PIDs for double volume key presses quirk
    
    [ Upstream commit 3d57f36c89d8ba32b2c312f397a37fd1a2dc7cfc ]
    
    I no longer work for Plantronics (aka Poly, aka HP) and do not have
    access to the headsets in order to test. However, as noted by Maxim,
    the other 32xx models that share the same base code set as the 3220
    would need the same quirk. This patch adds the PIDs for the rest of
    the Blackwire 32XX product family that require the quirk.
    
    Plantronics Blackwire 3210 Series (047f:c055)
    Plantronics Blackwire 3215 Series (047f:c057)
    Plantronics Blackwire 3225 Series (047f:c058)
    
    Quote from previous patch by Maxim Mikityanskiy
    Plantronics Blackwire 3220 Series (047f:c056) sends HID reports twice
    for each volume key press. This patch adds a quirk to hid-plantronics
    for this product ID, which will ignore the second volume key press if
    it happens within 5 ms from the last one that was handled.
    
    The patch was tested on the mentioned model only, it shouldn't affect
    other models, however, this quirk might be needed for them too.
    Auto-repeat (when a key is held pressed) is not affected, because the
    rate is about 3 times per second, which is far less frequent than once
    in 5 ms.
    End quote
    
    Signed-off-by: Terry Junge <linuxhid@cosmicgizmosystems.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eaf0b782269f38642bc6fad72c9ace022fdeef78
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Mon Nov 28 17:57:05 2022 +0100

    HID: multitouch: fix Asus ExpertBook P2 P2451FA trackpoint
    
    [ Upstream commit 4eab1c2fe06c98a4dff258dd64800b6986c101e9 ]
    
    The HID descriptor of this device contains two mouse collections, one
    for mouse emulation and the other for the trackpoint.
    
    Both collections get merged and, because the first one defines X and Y,
    the movemenent events reported by the trackpoint collection are
    ignored.
    
    Set the MT_CLS_WIN_8_FORCE_MULTI_INPUT class for this device to be able
    to receive its reports.
    
    This fix is similar to/based on commit 40d5bb87377a ("HID: multitouch:
    enable multi-input as a quirk for some devices").
    
    Link: https://gitlab.freedesktop.org/libinput/libinput/-/issues/825
    Reported-by: Akito <the@akito.ooo>
    Tested-by: Akito <the@akito.ooo>
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f7e2fcab73372a371ab4017cbedf7a71f4f9b40
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Fri Nov 18 09:07:42 2022 -0600

    powerpc/rtas: avoid scheduling in rtas_os_term()
    
    [ Upstream commit 6c606e57eecc37d6b36d732b1ff7e55b7dc32dd4 ]
    
    It's unsafe to use rtas_busy_delay() to handle a busy status from
    the ibm,os-term RTAS function in rtas_os_term():
    
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    BUG: sleeping function called from invalid context at arch/powerpc/kernel/rtas.c:618
    in_atomic(): 1, irqs_disabled(): 1, non_block: 0, pid: 1, name: swapper/0
    preempt_count: 2, expected: 0
    CPU: 7 PID: 1 Comm: swapper/0 Tainted: G      D            6.0.0-rc5-02182-gf8553a572277-dirty #9
    Call Trace:
    [c000000007b8f000] [c000000001337110] dump_stack_lvl+0xb4/0x110 (unreliable)
    [c000000007b8f040] [c0000000002440e4] __might_resched+0x394/0x3c0
    [c000000007b8f0e0] [c00000000004f680] rtas_busy_delay+0x120/0x1b0
    [c000000007b8f100] [c000000000052d04] rtas_os_term+0xb8/0xf4
    [c000000007b8f180] [c0000000001150fc] pseries_panic+0x50/0x68
    [c000000007b8f1f0] [c000000000036354] ppc_panic_platform_handler+0x34/0x50
    [c000000007b8f210] [c0000000002303c4] notifier_call_chain+0xd4/0x1c0
    [c000000007b8f2b0] [c0000000002306cc] atomic_notifier_call_chain+0xac/0x1c0
    [c000000007b8f2f0] [c0000000001d62b8] panic+0x228/0x4d0
    [c000000007b8f390] [c0000000001e573c] do_exit+0x140c/0x1420
    [c000000007b8f480] [c0000000001e586c] make_task_dead+0xdc/0x200
    
    Use rtas_busy_delay_time() instead, which signals without side effects
    whether to attempt the ibm,os-term RTAS call again.
    
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Reviewed-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221118150751.469393-5-nathanl@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2167f10fcca68ab9ae3f8d94d2c704c5541ac69
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Fri Nov 18 09:07:41 2022 -0600

    powerpc/rtas: avoid device tree lookups in rtas_os_term()
    
    [ Upstream commit ed2213bfb192ab51f09f12e9b49b5d482c6493f3 ]
    
    rtas_os_term() is called during panic. Its behavior depends on a couple
    of conditions in the /rtas node of the device tree, the traversal of
    which entails locking and local IRQ state changes. If the kernel panics
    while devtree_lock is held, rtas_os_term() as currently written could
    hang.
    
    Instead of discovering the relevant characteristics at panic time,
    cache them in file-static variables at boot. Note the lookup for
    "ibm,extended-os-term" is converted to of_property_read_bool() since it
    is a boolean property, not an RTAS function token.
    
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Reviewed-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Andrew Donnellan <ajd@linux.ibm.com>
    [mpe: Incorporate suggested change from Nick]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221118150751.469393-4-nathanl@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0af0e115ff59d638f45416a004cdd8edb38db40c
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Nov 14 23:27:46 2022 +0530

    objtool: Fix SEGFAULT
    
    [ Upstream commit efb11fdb3e1a9f694fa12b70b21e69e55ec59c36 ]
    
    find_insn() will return NULL in case of failure. Check insn in order
    to avoid a kernel Oops for NULL pointer dereference.
    
    Tested-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Reviewed-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221114175754.1131267-9-sv@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57ae492f620ceaaad0188bd39ce3a3dc4bdac64c
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Dec 21 09:51:19 2022 +0100

    nvmet: don't defer passthrough commands with trivial effects to the workqueue
    
    [ Upstream commit 2a459f6933e1c459bffb7cc73fd6c900edc714bd ]
    
    Mask out the "Command Supported" and "Logical Block Content Change" bits
    and only defer execution of commands that have non-trivial effects to
    the workqueue for synchronous execution.  This allows to execute admin
    commands asynchronously on controllers that provide a Command Supported
    and Effects log page, and will keep allowing to execute Write commands
    asynchronously once command effects on I/O commands are taken into
    account.
    
    Fixes: c1fef73f793b ("nvmet: add passthru code to process commands")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Kanchan Joshi <joshi.k@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b3282a9779c079c4fa5a911ccae4cf7c30a580f
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Dec 21 10:30:45 2022 +0100

    nvme: fix the NVME_CMD_EFFECTS_CSE_MASK definition
    
    [ Upstream commit 685e6311637e46f3212439ce2789f8a300e5050f ]
    
    3 << 16 does not generate the correct mask for bits 16, 17 and 18.
    Use the GENMASK macro to generate the correct mask instead.
    
    Fixes: 84fef62d135b ("nvme: check admin passthru command effects")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Kanchan Joshi <joshi.k@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab711f3eda7a62c800b41997e818b675812f53a9
Author: Adam Vodopjan <grozzly@protonmail.com>
Date:   Fri Dec 9 09:26:34 2022 +0000

    ata: ahci: Fix PCS quirk application for suspend
    
    [ Upstream commit 37e14e4f3715428b809e4df9a9958baa64c77d51 ]
    
    Since kernel 5.3.4 my laptop (ICH8M controller) does not see Kingston
    SV300S37A60G SSD disk connected into a SATA connector on wake from
    suspend.  The problem was introduced in c312ef176399 ("libata/ahci: Drop
    PCS quirk for Denverton and beyond"): the quirk is not applied on wake
    from suspend as it originally was.
    
    It is worth to mention the commit contained another bug: the quirk is
    not applied at all to controllers which require it. The fix commit
    09d6ac8dc51a ("libata/ahci: Fix PCS quirk application") landed in 5.3.8.
    So testing my patch anywhere between commits c312ef176399 and
    09d6ac8dc51a is pointless.
    
    Not all disks trigger the problem. For example nothing bad happens with
    Western Digital WD5000LPCX HDD.
    
    Test hardware:
    - Acer 5920G with ICH8M SATA controller
    - sda: some SATA HDD connnected into the DVD drive IDE port with a
      SATA-IDE caddy. It is a boot disk
    - sdb: Kingston SV300S37A60G SSD connected into the only SATA port
    
    Sample "dmesg --notime | grep -E '^(sd |ata)'" output on wake:
    
    sd 0:0:0:0: [sda] Starting disk
    sd 2:0:0:0: [sdb] Starting disk
    ata4: SATA link down (SStatus 4 SControl 300)
    ata3: SATA link down (SStatus 4 SControl 300)
    ata1.00: ACPI cmd ef/03:0c:00:00:00:a0 (SET FEATURES) filtered out
    ata1.00: ACPI cmd ef/03:42:00:00:00:a0 (SET FEATURES) filtered out
    ata1: FORCE: cable set to 80c
    ata5: SATA link down (SStatus 0 SControl 300)
    ata3: SATA link down (SStatus 4 SControl 300)
    ata3: SATA link down (SStatus 4 SControl 300)
    ata3.00: disabled
    sd 2:0:0:0: rejecting I/O to offline device
    ata3.00: detaching (SCSI 2:0:0:0)
    sd 2:0:0:0: [sdb] Start/Stop Unit failed: Result: hostbyte=DID_NO_CONNECT
            driverbyte=DRIVER_OK
    sd 2:0:0:0: [sdb] Synchronizing SCSI cache
    sd 2:0:0:0: [sdb] Synchronize Cache(10) failed: Result:
            hostbyte=DID_BAD_TARGET driverbyte=DRIVER_OK
    sd 2:0:0:0: [sdb] Stopping disk
    sd 2:0:0:0: [sdb] Start/Stop Unit failed: Result: hostbyte=DID_BAD_TARGET
            driverbyte=DRIVER_OK
    
    Commit c312ef176399 dropped ahci_pci_reset_controller() which internally
    calls ahci_reset_controller() and applies the PCS quirk if needed after
    that. It was called each time a reset was required instead of just
    ahci_reset_controller(). This patch puts the function back in place.
    
    Fixes: c312ef176399 ("libata/ahci: Drop PCS quirk for Denverton and beyond")
    Signed-off-by: Adam Vodopjan <grozzly@protonmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc512539c44f173c2a5fc967e4feb0043bc5773d
Author: Keith Busch <kbusch@kernel.org>
Date:   Mon Dec 19 13:54:55 2022 -0800

    nvme-pci: fix page size checks
    
    [ Upstream commit 841734234a28fd5cd0889b84bd4d93a0988fa11e ]
    
    The size allocated out of the dma pool is at most NVME_CTRL_PAGE_SIZE,
    which may be smaller than the PAGE_SIZE.
    
    Fixes: c61b82c7b7134 ("nvme-pci: fix PRP pool size")
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfb6d54893d544151e7f480bc44cfe7823f5ad23
Author: Keith Busch <kbusch@kernel.org>
Date:   Mon Dec 19 10:59:06 2022 -0800

    nvme-pci: fix mempool alloc size
    
    [ Upstream commit c89a529e823d51dd23c7ec0c047c7a454a428541 ]
    
    Convert the max size to bytes to match the units of the divisor that
    calculates the worst-case number of PRP entries.
    
    The result is used to determine how many PRP Lists are required. The
    code was previously rounding this to 1 list, but we can require 2 in the
    worst case. In that scenario, the driver would corrupt memory beyond the
    size provided by the mempool.
    
    While unlikely to occur (you'd need a 4MB in exactly 127 phys segments
    on a queue that doesn't support SGLs), this memory corruption has been
    observed by kfence.
    
    Cc: Jens Axboe <axboe@kernel.dk>
    Fixes: 943e942e6266f ("nvme-pci: limit max IO size and segments to avoid high order allocations")
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Kanchan Joshi <joshi.k@samsung.com>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5d8738fbe33e71959b5a69221ecf515032d3fc7
Author: Klaus Jensen <k.jensen@samsung.com>
Date:   Tue Dec 13 09:58:07 2022 +0100

    nvme-pci: fix doorbell buffer value endianness
    
    [ Upstream commit b5f96cb719d8ba220b565ddd3ba4ac0d8bcfb130 ]
    
    When using shadow doorbells, the event index and the doorbell values are
    written to host memory. Prior to this patch, the values written would
    erroneously be written in host endianness. This causes trouble on
    big-endian platforms. Fix this by adding missing endian conversions.
    
    This issue was noticed by Guenter while testing various big-endian
    platforms under QEMU[1]. A similar fix required for hw/nvme in QEMU is
    up for review as well[2].
    
      [1]: https://lore.kernel.org/qemu-devel/20221209110022.GA3396194@roeck-us.net/
      [2]: https://lore.kernel.org/qemu-devel/20221212114409.34972-4-its@irrelevant.dk/
    
    Fixes: f9f38e33389c ("nvme: improve performance for virtual NVMe devices")
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Klaus Jensen <k.jensen@samsung.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe6ea044c4f05706cb71040055b1c70c6c8275e0
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Sun Dec 11 18:18:55 2022 -0300

    cifs: fix oops during encryption
    
    [ Upstream commit f7f291e14dde32a07b1f0aa06921d28f875a7b54 ]
    
    When running xfstests against Azure the following oops occurred on an
    arm64 system
    
      Unable to handle kernel write to read-only memory at virtual address
      ffff0001221cf000
      Mem abort info:
        ESR = 0x9600004f
        EC = 0x25: DABT (current EL), IL = 32 bits
        SET = 0, FnV = 0
        EA = 0, S1PTW = 0
        FSC = 0x0f: level 3 permission fault
      Data abort info:
        ISV = 0, ISS = 0x0000004f
        CM = 0, WnR = 1
      swapper pgtable: 4k pages, 48-bit VAs, pgdp=00000000294f3000
      [ffff0001221cf000] pgd=18000001ffff8003, p4d=18000001ffff8003,
      pud=18000001ff82e003, pmd=18000001ff71d003, pte=00600001221cf787
      Internal error: Oops: 9600004f [#1] PREEMPT SMP
      ...
      pstate: 80000005 (Nzcv daif -PAN -UAO -TCO BTYPE=--)
      pc : __memcpy+0x40/0x230
      lr : scatterwalk_copychunks+0xe0/0x200
      sp : ffff800014e92de0
      x29: ffff800014e92de0 x28: ffff000114f9de80 x27: 0000000000000008
      x26: 0000000000000008 x25: ffff800014e92e78 x24: 0000000000000008
      x23: 0000000000000001 x22: 0000040000000000 x21: ffff000000000000
      x20: 0000000000000001 x19: ffff0001037c4488 x18: 0000000000000014
      x17: 235e1c0d6efa9661 x16: a435f9576b6edd6c x15: 0000000000000058
      x14: 0000000000000001 x13: 0000000000000008 x12: ffff000114f2e590
      x11: ffffffffffffffff x10: 0000040000000000 x9 : ffff8000105c3580
      x8 : 2e9413b10000001a x7 : 534b4410fb86b005 x6 : 534b4410fb86b005
      x5 : ffff0001221cf008 x4 : ffff0001037c4490 x3 : 0000000000000001
      x2 : 0000000000000008 x1 : ffff0001037c4488 x0 : ffff0001221cf000
      Call trace:
       __memcpy+0x40/0x230
       scatterwalk_map_and_copy+0x98/0x100
       crypto_ccm_encrypt+0x150/0x180
       crypto_aead_encrypt+0x2c/0x40
       crypt_message+0x750/0x880
       smb3_init_transform_rq+0x298/0x340
       smb_send_rqst.part.11+0xd8/0x180
       smb_send_rqst+0x3c/0x100
       compound_send_recv+0x534/0xbc0
       smb2_query_info_compound+0x32c/0x440
       smb2_set_ea+0x438/0x4c0
       cifs_xattr_set+0x5d4/0x7c0
    
    This is because in scatterwalk_copychunks(), we attempted to write to
    a buffer (@sign) that was allocated in the stack (vmalloc area) by
    crypt_message() and thus accessing its remaining 8 (x2) bytes ended up
    crossing a page boundary.
    
    To simply fix it, we could just pass @sign kmalloc'd from
    crypt_message() and then we're done.  Luckily, we don't seem to pass
    any other vmalloc'd buffers in smb_rqst::rq_iov...
    
    Instead, let's map the correct pages and offsets from vmalloc buffers
    as well in cifs_sg_set_buf() and then avoiding such oopses.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9089b95548f0272e02a89989c511e235561d051
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Tue Dec 6 12:17:31 2022 +0400

    usb: dwc3: qcom: Fix memory leak in dwc3_qcom_interconnect_init
    
    [ Upstream commit 97a48da1619ba6bd42a0e5da0a03aa490a9496b1 ]
    
    of_icc_get() alloc resources for path handle, we should release it when not
    need anymore. Like the release in dwc3_qcom_interconnect_exit() function.
    Add icc_put() in error handling to fix this.
    
    Fixes: bea46b981515 ("usb: dwc3: qcom: Add interconnect support in dwc3 driver")
    Cc: stable <stable@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20221206081731.818107-1-linmq006@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce2462bcf3ff0e3d8886220f6571474985ca2458
Author: Steven Price <steven.price@arm.com>
Date:   Thu Nov 10 11:45:48 2022 +0000

    pwm: tegra: Fix 32 bit build
    
    [ Upstream commit dd1f1da4ada5d8ac774c2ebe97230637820b3323 ]
    
    The value of NSEC_PER_SEC << PWM_DUTY_WIDTH doesn't fix within a 32 bit
    integer causing a build warning/error (and the value truncated):
    
      drivers/pwm/pwm-tegra.c: In function ‘tegra_pwm_config’:
      drivers/pwm/pwm-tegra.c:148:53: error: result of ‘1000000000 << 8’ requires 39 bits to represent, but ‘long int’ only has 32 bits [-Werror=shift-overflow=]
        148 |   required_clk_rate = DIV_ROUND_UP_ULL(NSEC_PER_SEC << PWM_DUTY_WIDTH,
            |                                                     ^~
    
    Explicitly cast to a u64 to ensure the correct result.
    
    Fixes: cfcb68817fb3 ("pwm: tegra: Improve required rate calculation")
    Signed-off-by: Steven Price <steven.price@arm.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8be7c2787b98cf43b5c308094d2e2b1c8ce19b6
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 28 16:21:59 2022 +0000

    media: dvbdev: fix refcnt bug
    
    commit 3a664569b71b0a52be5ffb9fb87cc4f83d29bd71 upstream.
    
    Previous commit initialize the dvbdev->ref before the template copy,
    which will overwrite the reference and cause refcnt bug.
    
    refcount_t: addition on 0; use-after-free.
    WARNING: CPU: 0 PID: 1 at lib/refcount.c:25 refcount_warn_saturate+0x17c/0x1f0 lib/refcount.c:25
    Modules linked in:
    CPU: 0 PID: 1 Comm: swapper/0 Not tainted 6.1.0-rc6-next-20221128-syzkaller #0
    ...
    RIP: 0010:refcount_warn_saturate+0x17c/0x1f0 lib/refcount.c:25
    RSP: 0000:ffffc900000678d0 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff88813ff58000 RSI: ffffffff81660e7c RDI: fffff5200000cf0c
    RBP: ffff888022a45010 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000080000000 R11: 0000000000000000 R12: 0000000000000001
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000001
    FS:  0000000000000000(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff88823ffff000 CR3: 000000000c48e000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     __refcount_add include/linux/refcount.h:199 [inline]
     __refcount_inc include/linux/refcount.h:250 [inline]
     refcount_inc include/linux/refcount.h:267 [inline]
     kref_get include/linux/kref.h:45 [inline]
     dvb_device_get drivers/media/dvb-core/dvbdev.c:585 [inline]
     dvb_register_device+0xe83/0x16e0 drivers/media/dvb-core/dvbdev.c:517
    ...
    
    Just place the kref_init at correct position.
    
    Reported-by: syzbot+fce48a3dd3368645bd6c@syzkaller.appspotmail.com
    Fixes: 0fc044b2b5e2 ("media: dvbdev: adopts refcnt to avoid UAF")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 153319671a08bab75399a9ff6a2eaf54bd0cc4cb
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 28 08:39:03 2022 +0000

    media: dvbdev: fix build warning due to comments
    
    commit 3edfd14bb50fa6f94ed1a37bbb17d9f1c2793b57 upstream.
    
    Previous commit that introduces reference counter does not add proper
    comments, which will lead to warning when building htmldocs. Fix them.
    
    Reported-by: "Stephen Rothwell" <sfr@canb.auug.org.au>
    Fixes: 0fc044b2b5e2 ("media: dvbdev: adopts refcnt to avoid UAF")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 740c537f52c1f54aff9094744483d1515c7c8b7b
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Mon Nov 28 11:33:05 2022 +0100

    ovl: fix use inode directly in rcu-walk mode
    
    commit 672e4268b2863d7e4978dfed29552b31c2f9bd4e upstream.
    
    ovl_dentry_revalidate_common() can be called in rcu-walk mode.  As document
    said, "in rcu-walk mode, d_parent and d_inode should not be used without
    care".
    
    Check inode here to protect access under rcu-walk mode.
    
    Fixes: bccece1ead36 ("ovl: allow remote upper")
    Reported-and-tested-by: syzbot+a4055c78774bbf3498bb@syzkaller.appspotmail.com
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Cc: <stable@vger.kernel.org> # v5.7
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f24474d12e68dfb3fa051ece57ff6bb11361d7f8
Author: Rickard x Andersson <rickaran@axis.com>
Date:   Tue Dec 20 11:23:18 2022 +0100

    gcov: add support for checksum field
    
    commit e96b95c2b7a63a454b6498e2df67aac14d046d13 upstream.
    
    In GCC version 12.1 a checksum field was added.
    
    This patch fixes a kernel crash occurring during boot when using
    gcov-kernel with GCC version 12.2.  The crash occurred on a system running
    on i.MX6SX.
    
    Link: https://lkml.kernel.org/r/20221220102318.3418501-1-rickaran@axis.com
    Fixes: 977ef30a7d88 ("gcov: support GCC 12.1 and newer compilers")
    Signed-off-by: Rickard x Andersson <rickaran@axis.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Tested-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Reviewed-by: Martin Liska <mliska@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36be7afca1031d0c50b9dda31393123e42acc9f5
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Thu Dec 15 11:46:46 2022 +0100

    regulator: core: fix deadlock on regulator enable
    
    commit cb3543cff90a4448ed560ac86c98033ad5fecda9 upstream.
    
    When updating the operating mode as part of regulator enable, the caller
    has already locked the regulator tree and drms_uA_update() must not try
    to do the same in order not to trigger a deadlock.
    
    The lock inversion is reported by lockdep as:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      6.1.0-next-20221215 #142 Not tainted
      ------------------------------------------------------
      udevd/154 is trying to acquire lock:
      ffffc11f123d7e50 (regulator_list_mutex){+.+.}-{3:3}, at: regulator_lock_dependent+0x54/0x280
    
      but task is already holding lock:
      ffff80000e4c36e8 (regulator_ww_class_acquire){+.+.}-{0:0}, at: regulator_enable+0x34/0x80
    
      which lock already depends on the new lock.
    
      ...
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(regulator_ww_class_acquire);
                                     lock(regulator_list_mutex);
                                     lock(regulator_ww_class_acquire);
        lock(regulator_list_mutex);
    
       *** DEADLOCK ***
    
    just before probe of a Qualcomm UFS controller (occasionally) deadlocks
    when enabling one of its regulators.
    
    Fixes: 9243a195be7a ("regulator: core: Change voltage setting path")
    Fixes: f8702f9e4aa7 ("regulator: core: Use ww_mutex for regulators locking")
    Cc: stable@vger.kernel.org      # 5.0
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20221215104646.19818-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e12f4c321247bd420664a4771f3d6faa9b45ce96
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Tue Nov 15 14:23:23 2022 +0100

    iio: adc128s052: add proper .data members in adc128_of_match table
    
    commit e2af60f5900c6ade53477b494ffb54690eee11f5 upstream.
    
    Prior to commit bd5d54e4d49d ("iio: adc128s052: add ACPI _HID
    AANT1280"), the driver unconditionally used spi_get_device_id() to get
    the index into the adc128_config array.
    
    However, with that commit, OF-based boards now incorrectly treat all
    supported sensors as if they are an adc128s052, because all the .data
    members of the adc128_of_match table are implicitly 0. Our board,
    which has an adc122s021, thus exposes 8 channels whereas it really
    only has two.
    
    Fixes: bd5d54e4d49d ("iio: adc128s052: add ACPI _HID AANT1280")
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221115132324.1078169-1-linux@rasmusvillemoes.dk
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f604702b765ee6a594a952b024dfaf916518e46
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Tue Sep 20 13:28:07 2022 +0200

    iio: adc: ad_sigma_delta: do not use internal iio_dev lock
    
    commit 20228a1d5a55e7db0c6720840f2c7d2b48c55f69 upstream.
    
    Drop 'mlock' usage by making use of iio_device_claim_direct_mode().
    This change actually makes sure we cannot do a single conversion while
    buffering is enable. Note there was a potential race in the previous
    code since we were only acquiring the lock after checking if the bus is
    enabled.
    
    Fixes: af3008485ea0 ("iio:adc: Add common code for ADI Sigma Delta devices")
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: <Stable@vger.kernel.org> #No rush as race is very old.
    Link: https://lore.kernel.org/r/20220920112821.975359-2-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 582f5fc2c5863b595df7b6255797cf92f9e9ab3f
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Thu Nov 10 10:46:35 2022 +0100

    reiserfs: Add missing calls to reiserfs_security_free()
    
    commit 572302af1258459e124437b8f3369357447afac7 upstream.
    
    Commit 57fe60df6241 ("reiserfs: add atomic addition of selinux attributes
    during inode creation") defined reiserfs_security_free() to free the name
    and value of a security xattr allocated by the active LSM through
    security_old_inode_init_security(). However, this function is not called
    in the reiserfs code.
    
    Thus, add a call to reiserfs_security_free() whenever
    reiserfs_security_init() is called, and initialize value to NULL, to avoid
    to call kfree() on an uninitialized pointer.
    
    Finally, remove the kfree() for the xattr name, as it is not allocated
    anymore.
    
    Fixes: 57fe60df6241 ("reiserfs: add atomic addition of selinux attributes during inode creation")
    Cc: stable@vger.kernel.org
    Cc: Jeff Mahoney <jeffm@suse.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: Mimi Zohar <zohar@linux.ibm.com>
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08371068fff82fae6d4d22b4843683812742f2d8
Author: Enrik Berkhan <Enrik.Berkhan@inka.de>
Date:   Thu Nov 3 23:27:12 2022 +0100

    HID: mcp2221: don't connect hidraw
    
    commit 67c90d14018775556d5420382ace86521421f9ff upstream.
    
    The MCP2221 driver should not connect to the hidraw userspace interface,
    as it needs exclusive access to the chip.
    
    If you want to use /dev/hidrawX with the MCP2221, you need to avoid
    binding this driver to the device and use the hid generic driver instead
    (e.g. using udev rules).
    
    Cc: stable@vger.kernel.org
    Reported-by: Sven Zühlsdorf <sven.zuehlsdorf@vigem.de>
    Signed-off-by: Enrik Berkhan <Enrik.Berkhan@inka.de>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Link: https://lore.kernel.org/r/20221103222714.21566-2-Enrik.Berkhan@inka.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a203471b9800f2eecbeab67664294c7ef49f8ca
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Thu Dec 1 15:11:41 2022 -0800

    HID: wacom: Ensure bootloader PID is usable in hidraw mode
    
    commit 1db1f392591aff13fd643f0ec7c1d5e27391d700 upstream.
    
    Some Wacom devices have a special "bootloader" mode that is used for
    firmware flashing. When operating in this mode, the device cannot be
    used for input, and the HID descriptor is not able to be processed by
    the driver. The driver generates an "Unknown device_type" warning and
    then returns an error code from wacom_probe(). This is a problem because
    userspace still needs to be able to interact with the device via hidraw
    to perform the firmware flash.
    
    This commit adds a non-generic device definition for 056a:0094 which
    is used when devices are in "bootloader" mode. It marks the devices
    with a special BOOTLOADER type that is recognized by wacom_probe() and
    wacom_raw_event(). When we see this type we ensure a hidraw device is
    created and otherwise keep our hands off so that userspace is in full
    control.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Tested-by: Tatsunosuke Tobita <tatsunosuke.tobita@wacom.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 723ffde78af50c5e707641e0855a8d56ffd16526
Author: Ferry Toth <ftoth@exalondelft.nl>
Date:   Mon Dec 5 21:15:27 2022 +0100

    usb: dwc3: core: defer probe on ulpi_read_id timeout
    
    commit 63130462c919ece0ad0d9bb5a1f795ef8d79687e upstream.
    
    Since commit 0f0101719138 ("usb: dwc3: Don't switch OTG -> peripheral
    if extcon is present"), Dual Role support on Intel Merrifield platform
    broke due to rearranging the call to dwc3_get_extcon().
    
    It appears to be caused by ulpi_read_id() masking the timeout on the first
    test write. In the past dwc3 probe continued by calling dwc3_core_soft_reset()
    followed by dwc3_get_extcon() which happend to return -EPROBE_DEFER.
    On deferred probe ulpi_read_id() finally succeeded. Due to above mentioned
    rearranging -EPROBE_DEFER is not returned and probe completes without phy.
    
    On Intel Merrifield the timeout on the first test write issue is reproducible
    but it is difficult to find the root cause. Using a mainline kernel and
    rootfs with buildroot ulpi_read_id() succeeds. As soon as adding
    ftrace / bootconfig to find out why, ulpi_read_id() fails and we can't
    analyze the flow. Using another rootfs ulpi_read_id() fails even without
    adding ftrace. We suspect the issue is some kind of timing / race, but
    merely retrying ulpi_read_id() does not resolve the issue.
    
    As we now changed ulpi_read_id() to return -ETIMEDOUT in this case, we
    need to handle the error by calling dwc3_core_soft_reset() and request
    -EPROBE_DEFER. On deferred probe ulpi_read_id() is retried and succeeds.
    
    Fixes: ef6a7bcfb01c ("usb: ulpi: Support device discovery via DT")
    Cc: stable@vger.kernel.org
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Ferry Toth <ftoth@exalondelft.nl>
    Link: https://lore.kernel.org/r/20221205201527.13525-3-ftoth@exalondelft.nl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d17c82aad67ab0be12edd551f0b8654d35804b69
Author: Sven Peter <sven@svenpeter.dev>
Date:   Mon Nov 28 17:15:26 2022 +0100

    usb: dwc3: Fix race between dwc3_set_mode and __dwc3_set_mode
    
    commit 62c73bfea048e66168df09da6d3e4510ecda40bb upstream.
    
    dwc->desired_dr_role is changed by dwc3_set_mode inside a spinlock but
    then read by __dwc3_set_mode outside of that lock. This can lead to a
    race condition when very quick successive role switch events happen:
    
    CPU A
            dwc3_set_mode(DWC3_GCTL_PRTCAP_HOST) // first role switch event
                    spin_lock_irqsave(&dwc->lock, flags);
                    dwc->desired_dr_role = mode; // DWC3_GCTL_PRTCAP_HOST
                    spin_unlock_irqrestore(&dwc->lock, flags);
                    queue_work(system_freezable_wq, &dwc->drd_work);
    
    CPU B
            __dwc3_set_mode
                    // ....
                    spin_lock_irqsave(&dwc->lock, flags);
                    // desired_dr_role is DWC3_GCTL_PRTCAP_HOST
                    dwc3_set_prtcap(dwc, dwc->desired_dr_role);
                    spin_unlock_irqrestore(&dwc->lock, flags);
    
    CPU A
            dwc3_set_mode(DWC3_GCTL_PRTCAP_DEVICE) // second event
                    spin_lock_irqsave(&dwc->lock, flags);
                    dwc->desired_dr_role = mode; // DWC3_GCTL_PRTCAP_DEVICE
                    spin_unlock_irqrestore(&dwc->lock, flags);
    
    CPU B (continues running __dwc3_set_mode)
            switch (dwc->desired_dr_role) { // DWC3_GCTL_PRTCAP_DEVICE
            // ....
            case DWC3_GCTL_PRTCAP_DEVICE:
                    // ....
                    ret = dwc3_gadget_init(dwc);
    
    We then have DWC3_GCTL.DWC3_GCTL_PRTCAPDIR = DWC3_GCTL_PRTCAP_HOST and
    dwc->current_dr_role = DWC3_GCTL_PRTCAP_HOST but initialized the
    controller in device mode. It's also possible to get into a state
    where both host and device are intialized at the same time.
    Fix this race by creating a local copy of desired_dr_role inside
    __dwc3_set_mode while holding dwc->lock.
    
    Fixes: 41ce1456e1db ("usb: dwc3: core: make dwc3_set_mode() work properly")
    Cc: stable <stable@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Sven Peter <sven@svenpeter.dev>
    Link: https://lore.kernel.org/r/20221128161526.79730-1-sven@svenpeter.dev
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b725b6fbbe6577dbe5aa931522cec6475da9140
Author: Jiao Zhou <jiaozhou@google.com>
Date:   Tue Dec 6 13:53:11 2022 -0500

    ALSA: hda/hdmi: Add HP Device 0x8711 to force connect list
    
    commit 31b573946ea55e1ea0e08ae8e83bcf879b30f83a upstream.
    
    HDMI audio is not working on the HP EliteDesk 800 G6 because the pin is
    unconnected. This issue can be resolved by using the 'hdajackretask'
    tool to override the unconnected pin to force it to connect.
    
    Signed-off-by: Jiao Zhou <jiaozhou@google.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221206185311.3669950-1-jiaozhou@google.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c863b673503eb64188d25c4a3cfa863ce4d68fef
Author: Edward Pacman <edward@edward-p.xyz>
Date:   Wed Dec 7 21:32:18 2022 +0800

    ALSA: hda/realtek: Add quirk for Lenovo TianYi510Pro-14IOB
    
    commit 4bf5bf54476dffe60e6b6d8d539f67309ff599e2 upstream.
    
    Lenovo TianYi510Pro-14IOB (17aa:3742)
    require quirk for enabling headset-mic
    
    Signed-off-by: Edward Pacman <edward@edward-p.xyz>
    Cc: <stable@vger.kernel.org>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216756
    Link: https://lore.kernel.org/r/20221207133218.18989-1-edward@edward-p.xyz
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3767082ebfa8390f8bc11a55303ee072626b00c
Author: wangdicheng <wangdicheng@kylinos.cn>
Date:   Wed Dec 7 16:20:36 2022 +0800

    ALSA: usb-audio: add the quirk for KT0206 device
    
    commit 696b66ac26ef953aed5783ef26a252ec8f207013 upstream.
    
    Add relevant information to the quirks-table.h file.
    The test passes and the sound source file plays normally.
    
    Signed-off-by: wangdicheng <wangdicheng@kylinos.cn>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/SG2PR02MB587849631CB96809CF90DBED8A1A9@SG2PR02MB5878.apcprd02.prod.outlook.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7691fa41024eed0a87d45f50a3bb0bcbae5dda41
Author: GUO Zihua <guozihua@huawei.com>
Date:   Wed Sep 21 20:58:03 2022 +0800

    ima: Simplify ima_lsm_copy_rule
    
    [ Upstream commit d57378d3aa4d864d9e590482602068af1b20c0c5 ]
    
    Currently ima_lsm_copy_rule() set the arg_p field of the source rule to
    NULL, so that the source rule could be freed afterward. It does not make
    sense for this behavior to be inside a "copy" function. So move it
    outside and let the caller handle this field.
    
    ima_lsm_copy_rule() now produce a shallow copy of the original entry
    including args_p field. Meaning only the lsm.rule and the rule itself
    should be freed for the original rule. Thus, instead of calling
    ima_lsm_free_rule() which frees lsm.rule as well as args_p field, free
    the lsm.rule directly.
    
    Signed-off-by: GUO Zihua <guozihua@huawei.com>
    Reviewed-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d8dcc3dadf95d92d078dfedfc9efaad772090b6
Author: John Stultz <jstultz@google.com>
Date:   Wed Dec 21 05:18:55 2022 +0000

    pstore: Make sure CONFIG_PSTORE_PMSG selects CONFIG_RT_MUTEXES
    
    [ Upstream commit 2f4fec5943407318b9523f01ce1f5d668c028332 ]
    
    In commit 76d62f24db07 ("pstore: Switch pmsg_lock to an rt_mutex
    to avoid priority inversion") I changed a lock to an rt_mutex.
    
    However, its possible that CONFIG_RT_MUTEXES is not enabled,
    which then results in a build failure, as the 0day bot detected:
      https://lore.kernel.org/linux-mm/202212211244.TwzWZD3H-lkp@intel.com/
    
    Thus this patch changes CONFIG_PSTORE_PMSG to select
    CONFIG_RT_MUTEXES, which ensures the build will not fail.
    
    Cc: Wei Wang <wvw@google.com>
    Cc: Midas Chien<midaschieh@google.com>
    Cc: Connor O'Brien <connoro@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Anton Vorontsov <anton@enomsg.org>
    Cc: Colin Cross <ccross@android.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: kernel test robot <lkp@intel.com>
    Cc: kernel-team@android.com
    Fixes: 76d62f24db07 ("pstore: Switch pmsg_lock to an rt_mutex to avoid priority inversion")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: John Stultz <jstultz@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221221051855.15761-1-jstultz@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07b0ce902e2810ef4a3070015cb12ed289a1628f
Author: David Howells <dhowells@redhat.com>
Date:   Wed Dec 21 14:30:48 2022 +0000

    afs: Fix lost servers_outstanding count
    
    [ Upstream commit 36f82c93ee0bd88f1c95a52537906b8178b537f1 ]
    
    The afs_fs_probe_dispatcher() work function is passed a count on
    net->servers_outstanding when it is scheduled (which may come via its
    timer).  This is passed back to the work_item, passed to the timer or
    dropped at the end of the dispatcher function.
    
    But, at the top of the dispatcher function, there are two checks which
    skip the rest of the function: if the network namespace is being destroyed
    or if there are no fileservers to probe.  These two return paths, however,
    do not drop the count passed to the dispatcher, and so, sometimes, the
    destruction of a network namespace, such as induced by rmmod of the kafs
    module, may get stuck in afs_purge_servers(), waiting for
    net->servers_outstanding to become zero.
    
    Fix this by adding the missing decrements in afs_fs_probe_dispatcher().
    
    Fixes: f6cbb368bcb0 ("afs: Actively poll fileservers to maintain NAT or firewall openings")
    Reported-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Link: https://lore.kernel.org/r/167164544917.2072364.3759519569649459359.stgit@warthog.procyon.org.uk/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1080729b9a565b386a808c42b628494f294daeb2
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Dec 20 11:57:00 2022 +0800

    perf debug: Set debug_peo_args and redirect_to_stderr variable to correct values in perf_quiet_option()
    
    [ Upstream commit 188ac720d364035008a54d249cf47b4cc100f819 ]
    
    When perf uses quiet mode, perf_quiet_option() sets the 'debug_peo_args'
    variable to -1, and display_attr() incorrectly determines the value of
    'debug_peo_args'.  As a result, unexpected information is displayed.
    
    Before:
    
      # perf record --quiet -- ls > /dev/null
      ------------------------------------------------------------
      perf_event_attr:
        size                             128
        { sample_period, sample_freq }   4000
        sample_type                      IP|TID|TIME|PERIOD
        read_format                      ID|LOST
        disabled                         1
        inherit                          1
        mmap                             1
        comm                             1
        freq                             1
        enable_on_exec                   1
        task                             1
        precise_ip                       3
        sample_id_all                    1
        exclude_guest                    1
        mmap2                            1
        comm_exec                        1
        ksymbol                          1
        bpf_event                        1
      ------------------------------------------------------------
      ...
    
    After:
      # perf record --quiet -- ls > /dev/null
      #
    
    redirect_to_stderr is a similar problem.
    
    Fixes: f78eaef0e0493f60 ("perf tools: Allow to force redirect pr_debug to stderr.")
    Fixes: ccd26741f5e6bdf2 ("perf tool: Provide an option to print perf_event_open args and return value")
    Suggested-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Carsten Haitzler <carsten.haitzler@arm.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: martin.lau@kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ravi Bangoria <ravi.bangoria@amd.com>
    Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221220035702.188413-2-yangjihong1@huawei.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c7b03d00c070dba9b9998bbd474c7346efb1f43
Author: John Stultz <jstultz@google.com>
Date:   Wed Dec 14 23:18:34 2022 +0000

    pstore: Switch pmsg_lock to an rt_mutex to avoid priority inversion
    
    [ Upstream commit 76d62f24db07f22ccf9bc18ca793c27d4ebef721 ]
    
    Wei Wang reported seeing priority inversion caused latencies
    caused by contention on pmsg_lock, and suggested it be switched
    to a rt_mutex.
    
    I was initially hesitant this would help, as the tasks in that
    trace all seemed to be SCHED_NORMAL, so the benefit would be
    limited to only nice boosting.
    
    However, another similar issue was raised where the priority
    inversion was seen did involve a blocked RT task so it is clear
    this would be helpful in that case.
    
    Cc: Wei Wang <wvw@google.com>
    Cc: Midas Chien<midaschieh@google.com>
    Cc: Connor O'Brien <connoro@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Anton Vorontsov <anton@enomsg.org>
    Cc: Colin Cross <ccross@android.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: kernel-team@android.com
    Fixes: 9d5438f462ab ("pstore: Add pmsg - user-space accessible pstore object")
    Reported-by: Wei Wang <wvw@google.com>
    Signed-off-by: John Stultz <jstultz@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221214231834.3711880-1-jstultz@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3607ed7edfb73f194abfe8d5bbdb8a857266a1f
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Dec 9 11:54:57 2022 -0800

    LoadPin: Ignore the "contents" argument of the LSM hooks
    
    [ Upstream commit 1a17e5b513ceebf21100027745b8731b4728edf7 ]
    
    LoadPin only enforces the read-only origin of kernel file reads. Whether
    or not it was a partial read isn't important. Remove the overly
    conservative checks so that things like partial firmware reads will
    succeed (i.e. reading a firmware header).
    
    Fixes: 2039bda1fa8d ("LSM: Add "contents" flag to kernel_read_file hook")
    Cc: Paul Moore <paul@paul-moore.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: "Serge E. Hallyn" <serge@hallyn.com>
    Cc: linux-security-module@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Serge Hallyn <serge@hallyn.com>
    Tested-by: Ping-Ke Shih <pkshih@realtek.com>
    Link: https://lore.kernel.org/r/20221209195453.never.494-kees@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4138e1b7751c5b14d6e10eb2b3b063c45b0eb9f6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 13 13:33:19 2022 +0100

    ASoC: rt5670: Remove unbalanced pm_runtime_put()
    
    [ Upstream commit 6c900dcc3f7331a67ed29739d74524e428d137fb ]
    
    For some reason rt5670_i2c_probe() does a pm_runtime_put() at the end
    of a successful probe. But it has never done a pm_runtime_get() leading
    to the following error being logged into dmesg:
    
     rt5670 i2c-10EC5640:00: Runtime PM usage count underflow!
    
    Fix this by removing the unnecessary pm_runtime_put().
    
    Fixes: 64e89e5f5548 ("ASoC: rt5670: Add runtime PM support")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20221213123319.11285-1-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd49dc17c3d71a4d402b85c38171e9d0342ec9c9
Author: Wang Jingjin <wangjingjin1@huawei.com>
Date:   Thu Dec 8 14:39:00 2022 +0800

    ASoC: rockchip: spdif: Add missing clk_disable_unprepare() in rk_spdif_runtime_resume()
    
    [ Upstream commit 6d94d0090527b1763872275a7ccd44df7219b31e ]
    
    rk_spdif_runtime_resume() may have called clk_prepare_enable() before return
    from failed branches, add missing clk_disable_unprepare() in this case.
    
    Fixes: f874b80e1571 ("ASoC: rockchip: Add rockchip SPDIF transceiver driver")
    Signed-off-by: Wang Jingjin <wangjingjin1@huawei.com>
    Link: https://lore.kernel.org/r/20221208063900.4180790-1-wangjingjin1@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0ae46693b8563efa56131b95f4d015d14e1c6ba
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Fri Dec 9 10:16:57 2022 +0100

    ASoC: wm8994: Fix potential deadlock
    
    [ Upstream commit 9529dc167ffcdfd201b9f0eda71015f174095f7e ]
    
    Fix this by dropping wm8994->accdet_lock while calling
    cancel_delayed_work_sync(&wm8994->mic_work) in wm1811_jackdet_irq().
    
    Fixes: c0cc3f166525 ("ASoC: wm8994: Allow a delay between jack insertion and microphone detect")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221209091657.1183-1-m.szyprowski@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4a8573b046087c869406ed9f54ef153b8043939
Author: Wang Jingjin <wangjingjin1@huawei.com>
Date:   Mon Dec 5 11:28:02 2022 +0800

    ASoC: rockchip: pdm: Add missing clk_disable_unprepare() in rockchip_pdm_runtime_resume()
    
    [ Upstream commit ef0a098efb36660326c133af9b5a04a96a00e3ca ]
    
    The clk_disable_unprepare() should be called in the error handling of
    rockchip_pdm_runtime_resume().
    
    Fixes: fc05a5b22253 ("ASoC: rockchip: add support for pdm controller")
    Signed-off-by: Wang Jingjin <wangjingjin1@huawei.com>
    Link: https://lore.kernel.org/r/20221205032802.2422983-1-wangjingjin1@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06c9d468c06806dab752eb8e72addbf3792c1023
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Mon Dec 5 16:15:27 2022 +0800

    ASoC: audio-graph-card: fix refcount leak of cpu_ep in __graph_for_each_link()
    
    [ Upstream commit 8ab2d12c726f0fde0692fa5d81d8019b3dcd62d0 ]
    
    The of_get_next_child() returns a node with refcount incremented, and
    decrements the refcount of prev. So in the error path of the while loop,
    of_node_put() needs be called for cpu_ep.
    
    Fixes: fce9b90c1ab7 ("ASoC: audio-graph-card: cleanup DAI link loop method - step2")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Link: https://lore.kernel.org/r/1670228127-13835-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 812a18e48efb239c4417541ca25707c8888fdd11
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Mon Dec 5 18:04:24 2022 +0800

    ASoC: mediatek: mt8173-rt5650-rt5514: fix refcount leak in mt8173_rt5650_rt5514_dev_probe()
    
    [ Upstream commit 3327d721114c109ba0575f86f8fda3b525404054 ]
    
    The node returned by of_parse_phandle() with refcount incremented,
    of_node_put() needs be called when finish using it. So add it in the
    error path in mt8173_rt5650_rt5514_dev_probe().
    
    Fixes: 0d1d7a664288 ("ASoC: mediatek: Refine mt8173 driver and change config option")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Link: https://lore.kernel.org/r/1670234664-24246-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2eb1a3877f593cb022b9e32564037536f0fe763
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Mon Dec 5 09:53:29 2022 +0100

    ASoC: Intel: Skylake: Fix driver hang during shutdown
    
    [ Upstream commit 171107237246d66bce04f3769d33648f896b4ce3 ]
    
    AudioDSP cores and HDAudio links need to be turned off on shutdown to
    ensure no communication or data transfer occurs during the procedure.
    
    Fixes: c5a76a246989 ("ASoC: Intel: Skylake: Add shutdown callback")
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Tested-by: Lukasz Majczak <lma@semihlaf.com>
    Link: https://lore.kernel.org/r/20221205085330.857665-6-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72c0e552bc863860dac56bb8525f54565a569c79
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Sep 19 14:10:38 2022 +0200

    ALSA: hda: add snd_hdac_stop_streams() helper
    
    [ Upstream commit 24ad3835a6db4f8857975effa6bf47730371a5ff ]
    
    Minor code reuse, no functionality change.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20220919121041.43463-6-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Stable-dep-of: 171107237246 ("ASoC: Intel: Skylake: Fix driver hang during shutdown")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3a8925d6c1de1ba97ed47f30347491da26a844b
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Thu Dec 16 17:11:27 2021 -0600

    ALSA/ASoC: hda: move/rename snd_hdac_ext_stop_streams to hdac_stream.c
    
    [ Upstream commit 12054f0ce8be7d2003ec068ab27c9eb608397b98 ]
    
    snd_hdac_ext_stop_streams() has really nothing to do with the
    extension, it just loops over the bus streams.
    
    Move it to the hdac_stream layer and rename to remove the 'ext'
    prefix and add the precision that the chip will also be stopped.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20211216231128.344321-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Stable-dep-of: 171107237246 ("ASoC: Intel: Skylake: Fix driver hang during shutdown")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2727dbfe8d06ca094f7977f43d76d458ae4c158d
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Oct 27 14:29:31 2022 +0800

    hwmon: (jc42) Fix missing unlock on error in jc42_write()
    
    [ Upstream commit b744db17abf6a2efc2bfa80870cc88e9799a8ccc ]
    
    Add the missing unlock before return from function jc42_write()
    in the error handling case.
    
    Fixes: 37dedaee8bc6 ("hwmon: (jc42) Convert register access and caching to regmap/regcache")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20221027062931.598247-1-yangyingliang@huawei.com
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a076490b0211990ec6764328c22cb744dd782bd9
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Oct 18 12:40:07 2022 +0800

    orangefs: Fix kmemleak in orangefs_{kernel,client}_debug_init()
    
    [ Upstream commit 31720a2b109b3080eb77e97b8f6f50a27b4ae599 ]
    
    When insert and remove the orangefs module, there are memory leaked
    as below:
    
    unreferenced object 0xffff88816b0cc000 (size 2048):
      comm "insmod", pid 783, jiffies 4294813439 (age 65.512s)
      hex dump (first 32 bytes):
        6e 6f 6e 65 0a 00 00 00 00 00 00 00 00 00 00 00  none............
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<0000000031ab7788>] kmalloc_trace+0x27/0xa0
        [<000000005b405fee>] orangefs_debugfs_init.cold+0xaf/0x17f
        [<00000000e5a0085b>] 0xffffffffa02780f9
        [<000000004232d9f7>] do_one_initcall+0x87/0x2a0
        [<0000000054f22384>] do_init_module+0xdf/0x320
        [<000000003263bdea>] load_module+0x2f98/0x3330
        [<0000000052cd4153>] __do_sys_finit_module+0x113/0x1b0
        [<00000000250ae02b>] do_syscall_64+0x35/0x80
        [<00000000f11c03c7>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Use the golbal variable as the buffer rather than dynamic allocate to
    slove the problem.
    
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8affa0c6405ee968dcb6030bee2cf719a464752
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Oct 18 12:40:05 2022 +0800

    orangefs: Fix kmemleak in orangefs_prepare_debugfs_help_string()
    
    [ Upstream commit d23417a5bf3a3afc55de5442eb46e1e60458b0a1 ]
    
    When insert and remove the orangefs module, then debug_help_string will
    be leaked:
    
      unreferenced object 0xffff8881652ba000 (size 4096):
        comm "insmod", pid 1701, jiffies 4294893639 (age 13218.530s)
        hex dump (first 32 bytes):
          43 6c 69 65 6e 74 20 44 65 62 75 67 20 4b 65 79  Client Debug Key
          77 6f 72 64 73 20 61 72 65 20 75 6e 6b 6e 6f 77  words are unknow
        backtrace:
          [<0000000004e6f8e3>] kmalloc_trace+0x27/0xa0
          [<0000000006f75d85>] orangefs_prepare_debugfs_help_string+0x5e/0x480 [orangefs]
          [<0000000091270a2a>] _sub_I_65535_1+0x57/0xf70 [crc_itu_t]
          [<000000004b1ee1a3>] do_one_initcall+0x87/0x2a0
          [<000000001d0614ae>] do_init_module+0xdf/0x320
          [<00000000efef068c>] load_module+0x2f98/0x3330
          [<000000006533b44d>] __do_sys_finit_module+0x113/0x1b0
          [<00000000a0da6f99>] do_syscall_64+0x35/0x80
          [<000000007790b19b>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    When remove the module, should always free debug_help_string. Should
    always free the allocated buffer when change the free_debug_help_string.
    
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e3c4d3fa5d458d685561ecbaf8daa9dba14979e
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 08:56:23 2022 -0700

    drm/sti: Fix return type of sti_{dvo,hda,hdmi}_connector_mode_valid()
    
    [ Upstream commit 0ad811cc08a937d875cbad0149c1bab17f84ba05 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/gpu/drm/sti/sti_hda.c:637:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = sti_hda_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
      drivers/gpu/drm/sti/sti_dvo.c:376:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = sti_dvo_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
      drivers/gpu/drm/sti/sti_hdmi.c:1035:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = sti_hdmi_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    ->mode_valid() in 'struct drm_connector_helper_funcs' expects a return
    type of 'enum drm_mode_status', not 'int'. Adjust the return type of
    sti_{dvo,hda,hdmi}_connector_mode_valid() to match the prototype's to
    resolve the warning and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102155623.3042869-1-nathan@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3d3f3564e8b28d39c540d30262dc34ab9e959d3
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 08:42:15 2022 -0700

    drm/fsl-dcu: Fix return type of fsl_dcu_drm_connector_mode_valid()
    
    [ Upstream commit 96d845a67b7e406cfed7880a724c8ca6121e022e ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/gpu/drm/fsl-dcu/fsl_dcu_drm_rgb.c:74:16: error: incompatible function pointer types initializing 'enum drm_mode_status (*)(struct drm_connector *, struct drm_display_mode *)' with an expression of type 'int (struct drm_connector *, struct drm_display_mode *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .mode_valid = fsl_dcu_drm_connector_mode_valid,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      1 error generated.
    
    ->mode_valid() in 'struct drm_connector_helper_funcs' expects a return
    type of 'enum drm_mode_status', not 'int'. Adjust the return type of
    fsl_dcu_drm_connector_mode_valid() to match the prototype's to resolve
    the warning and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102154215.78059-1-nathan@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcd28191be9bbf307ba51a5b485773a55b0037c4
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Fri Oct 21 07:16:08 2022 +0800

    hugetlbfs: fix null-ptr-deref in hugetlbfs_parse_param()
    
    [ Upstream commit 26215b7ee923b9251f7bb12c4e5f09dc465d35f2 ]
    
    Syzkaller reports a null-ptr-deref bug as follows:
    ======================================================
    KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    RIP: 0010:hugetlbfs_parse_param+0x1dd/0x8e0 fs/hugetlbfs/inode.c:1380
    [...]
    Call Trace:
     <TASK>
     vfs_parse_fs_param fs/fs_context.c:148 [inline]
     vfs_parse_fs_param+0x1f9/0x3c0 fs/fs_context.c:129
     vfs_parse_fs_string+0xdb/0x170 fs/fs_context.c:191
     generic_parse_monolithic+0x16f/0x1f0 fs/fs_context.c:231
     do_new_mount fs/namespace.c:3036 [inline]
     path_mount+0x12de/0x1e20 fs/namespace.c:3370
     do_mount fs/namespace.c:3383 [inline]
     __do_sys_mount fs/namespace.c:3591 [inline]
     __se_sys_mount fs/namespace.c:3568 [inline]
     __x64_sys_mount+0x27f/0x300 fs/namespace.c:3568
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
     [...]
     </TASK>
    ======================================================
    
    According to commit "vfs: parse: deal with zero length string value",
    kernel will set the param->string to null pointer in vfs_parse_fs_string()
    if fs string has zero length.
    
    Yet the problem is that, hugetlbfs_parse_param() will dereference the
    param->string, without checking whether it is a null pointer.  To be more
    specific, if hugetlbfs_parse_param() parses an illegal mount parameter,
    such as "size=,", kernel will constructs struct fs_parameter with null
    pointer in vfs_parse_fs_string(), then passes this struct fs_parameter to
    hugetlbfs_parse_param(), which triggers the above null-ptr-deref bug.
    
    This patch solves it by adding sanity check on param->string
    in hugetlbfs_parse_param().
    
    Link: https://lkml.kernel.org/r/20221020231609.4810-1-yin31149@gmail.com
    Reported-by: syzbot+a3e6acd85ded5c16a709@syzkaller.appspotmail.com
    Tested-by: syzbot+a3e6acd85ded5c16a709@syzkaller.appspotmail.com
      Link: https://lore.kernel.org/all/0000000000005ad00405eb7148c6@google.com/
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Hawkins Jiawei <yin31149@gmail.com>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efd025f32fce27a8ada9bcb4731e8a84476e5b3d
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Tue Nov 22 21:36:14 2022 +0800

    clk: st: Fix memory leak in st_of_quadfs_setup()
    
    [ Upstream commit cfd3ffb36f0d566846163118651d868e607300ba ]
    
    If st_clk_register_quadfs_pll() fails, @lock should be freed before goto
    @err_exit, otherwise will cause meory leak issue, fix it.
    
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Link: https://lore.kernel.org/r/20221122133614.184910-1-xiujianfeng@huawei.com
    Reviewed-by: Patrice Chotard <patrice.chotard@foss.st.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c6447d0fc68650e51586dde79b5090d9d77f13a
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Wed Nov 23 03:51:59 2022 +0900

    media: si470x: Fix use-after-free in si470x_int_in_callback()
    
    [ Upstream commit 7d21e0b1b41b21d628bf2afce777727bd4479aa5 ]
    
    syzbot reported use-after-free in si470x_int_in_callback() [1].  This
    indicates that urb->context, which contains struct si470x_device
    object, is freed when si470x_int_in_callback() is called.
    
    The cause of this issue is that si470x_int_in_callback() is called for
    freed urb.
    
    si470x_usb_driver_probe() calls si470x_start_usb(), which then calls
    usb_submit_urb() and si470x_start().  If si470x_start_usb() fails,
    si470x_usb_driver_probe() doesn't kill urb, but it just frees struct
    si470x_device object, as depicted below:
    
    si470x_usb_driver_probe()
      ...
      si470x_start_usb()
        ...
        usb_submit_urb()
        retval = si470x_start()
        return retval
      if (retval < 0)
        free struct si470x_device object, but don't kill urb
    
    This patch fixes this issue by killing urb when si470x_start_usb()
    fails and urb is submitted.  If si470x_start_usb() fails and urb is
    not submitted, i.e. submitting usb fails, it just frees struct
    si470x_device object.
    
    Reported-by: syzbot+9ca7a12fd736d93e0232@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=94ed6dddd5a55e90fd4bab942aa4bb297741d977 [1]
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a63a1ae13469079994af1a24167f6f42b49eab34
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Sun Nov 20 12:34:55 2022 +0100

    mmc: renesas_sdhi: better reset from HS400 mode
    
    [ Upstream commit 0da69dd2155019ed4c444ede0e79ce7a4a6af627 ]
    
    Up to now, HS400 adjustment mode was only disabled on soft reset when a
    calibration table was in use. It is safer, though, to disable it as soon
    as the instance has an adjustment related quirk set, i.e. bad taps or a
    calibration table.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/20221120113457.42010-3-wsa+renesas@sang-engineering.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58e21146c0f99958a5ad89fdc16ce0f387351899
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Nov 11 17:10:33 2022 +0900

    mmc: f-sdh30: Add quirks for broken timeout clock capability
    
    [ Upstream commit aae9d3a440736691b3c1cb09ae2c32c4f1ee2e67 ]
    
    There is a case where the timeout clock is not supplied to the capability.
    Add a quirk for that.
    
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Acked-by: Jassi Brar <jaswinder.singh@linaro.org>
    Link: https://lore.kernel.org/r/20221111081033.3813-7-hayashi.kunihiko@socionext.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b737246ff50f810d6ab4be13c1388a07f0c14b1
Author: Rui Zhang <zr.zhang@vivo.com>
Date:   Thu Dec 1 11:38:06 2022 +0800

    regulator: core: fix use_count leakage when handling boot-on
    
    [ Upstream commit 0591b14ce0398125439c759f889647369aa616a0 ]
    
    I found a use_count leakage towards supply regulator of rdev with
    boot-on option.
    
    ┌───────────────────┐           ┌───────────────────┐
    │  regulator_dev A  │           │  regulator_dev B  │
    │     (boot-on)     │           │     (boot-on)     │
    │    use_count=0    │◀──supply──│    use_count=1    │
    │                   │           │                   │
    └───────────────────┘           └───────────────────┘
    
    In case of rdev(A) configured with `regulator-boot-on', the use_count
    of supplying regulator(B) will increment inside
    regulator_enable(rdev->supply).
    
    Thus, B will acts like always-on, and further balanced
    regulator_enable/disable cannot actually disable it anymore.
    
    However, B was also configured with `regulator-boot-on', we wish it
    could be disabled afterwards.
    
    Signed-off-by: Rui Zhang <zr.zhang@vivo.com>
    Link: https://lore.kernel.org/r/20221201033806.2567812-1-zr.zhang@vivo.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17c2eb9ce8c16439b1ead765f565a38238cd94e0
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Wed Nov 30 12:00:12 2022 -0800

    libbpf: Avoid enum forward-declarations in public API in C++ mode
    
    [ Upstream commit b42693415b86f608049cf1b4870adc1dc65e58b0 ]
    
    C++ enum forward declarations are fundamentally not compatible with pure
    C enum definitions, and so libbpf's use of `enum bpf_stats_type;`
    forward declaration in libbpf/bpf.h public API header is causing C++
    compilation issues.
    
    More details can be found in [0], but it comes down to C++ supporting
    enum forward declaration only with explicitly specified backing type:
    
      enum bpf_stats_type: int;
    
    In C (and I believe it's a GCC extension also), such forward declaration
    is simply:
    
      enum bpf_stats_type;
    
    Further, in Linux UAPI this enum is defined in pure C way:
    
    enum bpf_stats_type { BPF_STATS_RUN_TIME = 0; }
    
    And even though in both cases backing type is int, which can be
    confirmed by looking at DWARF information, for C++ compiler actual enum
    definition and forward declaration are incompatible.
    
    To eliminate this problem, for C++ mode define input argument as int,
    which makes enum unnecessary in libbpf public header. This solves the
    issue and as demonstrated by next patch doesn't cause any unwanted
    compiler warnings, at least with default warnings setting.
    
      [0] https://stackoverflow.com/questions/42766839/c11-enum-forward-causes-underlying-type-mismatch
      [1] Closes: https://github.com/libbpf/libbpf/issues/249
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20221130200013.2997831-1-andrii@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8022da1fa2fdf2fa204b445dd3354e7a66d085a
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Nov 17 10:29:40 2022 +0800

    blk-mq: fix possible memleak when register 'hctx' failed
    
    [ Upstream commit 4b7a21c57b14fbcd0e1729150189e5933f5088e9 ]
    
    There's issue as follows when do fault injection test:
    unreferenced object 0xffff888132a9f400 (size 512):
      comm "insmod", pid 308021, jiffies 4324277909 (age 509.733s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 08 f4 a9 32 81 88 ff ff  ...........2....
        08 f4 a9 32 81 88 ff ff 00 00 00 00 00 00 00 00  ...2............
      backtrace:
        [<00000000e8952bb4>] kmalloc_node_trace+0x22/0xa0
        [<00000000f9980e0f>] blk_mq_alloc_and_init_hctx+0x3f1/0x7e0
        [<000000002e719efa>] blk_mq_realloc_hw_ctxs+0x1e6/0x230
        [<000000004f1fda40>] blk_mq_init_allocated_queue+0x27e/0x910
        [<00000000287123ec>] __blk_mq_alloc_disk+0x67/0xf0
        [<00000000a2a34657>] 0xffffffffa2ad310f
        [<00000000b173f718>] 0xffffffffa2af824a
        [<0000000095a1dabb>] do_one_initcall+0x87/0x2a0
        [<00000000f32fdf93>] do_init_module+0xdf/0x320
        [<00000000cbe8541e>] load_module+0x3006/0x3390
        [<0000000069ed1bdb>] __do_sys_finit_module+0x113/0x1b0
        [<00000000a1a29ae8>] do_syscall_64+0x35/0x80
        [<000000009cd878b0>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Fault injection context as follows:
     kobject_add
     blk_mq_register_hctx
     blk_mq_sysfs_register
     blk_register_queue
     device_add_disk
     null_add_dev.part.0 [null_blk]
    
    As 'blk_mq_register_hctx' may already add some objects when failed halfway,
    but there isn't do fallback, caller don't know which objects add failed.
    To solve above issue just do fallback when add objects failed halfway in
    'blk_mq_register_hctx'.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20221117022940.873959-1-yebin@huaweicloud.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d7ab25ead969594df05fb09ee46ca931d46c5c8
Author: Mazin Al Haddad <mazinalhaddad05@gmail.com>
Date:   Wed Aug 24 02:21:52 2022 +0100

    media: dvb-usb: fix memory leak in dvb_usb_adapter_init()
    
    [ Upstream commit 94d90fb06b94a90c176270d38861bcba34ce377d ]
    
    Syzbot reports a memory leak in "dvb_usb_adapter_init()".
    The leak is due to not accounting for and freeing current iteration's
    adapter->priv in case of an error. Currently if an error occurs,
    it will exit before incrementing "num_adapters_initalized",
    which is used as a reference counter to free all adap->priv
    in "dvb_usb_adapter_exit()". There are multiple error paths that
    can exit from before incrementing the counter. Including the
    error handling paths for "dvb_usb_adapter_stream_init()",
    "dvb_usb_adapter_dvb_init()" and "dvb_usb_adapter_frontend_init()"
    within "dvb_usb_adapter_init()".
    
    This means that in case of an error in any of these functions the
    current iteration is not accounted for and the current iteration's
    adap->priv is not freed.
    
    Fix this by freeing the current iteration's adap->priv in the
    "stream_init_err:" label in the error path. The rest of the
    (accounted for) adap->priv objects are freed in dvb_usb_adapter_exit()
    as expected using the num_adapters_initalized variable.
    
    Syzbot report:
    
    BUG: memory leak
    unreferenced object 0xffff8881172f1a00 (size 512):
      comm "kworker/0:2", pid 139, jiffies 4294994873 (age 10.960s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    backtrace:
        [<ffffffff844af012>] dvb_usb_adapter_init drivers/media/usb/dvb-usb/dvb-usb-init.c:75 [inline]
        [<ffffffff844af012>] dvb_usb_init drivers/media/usb/dvb-usb/dvb-usb-init.c:184 [inline]
        [<ffffffff844af012>] dvb_usb_device_init.cold+0x4e5/0x79e drivers/media/usb/dvb-usb/dvb-usb-init.c:308
        [<ffffffff830db21d>] dib0700_probe+0x8d/0x1b0 drivers/media/usb/dvb-usb/dib0700_core.c:883
        [<ffffffff82d3fdc7>] usb_probe_interface+0x177/0x370 drivers/usb/core/driver.c:396
        [<ffffffff8274ab37>] call_driver_probe drivers/base/dd.c:542 [inline]
        [<ffffffff8274ab37>] really_probe.part.0+0xe7/0x310 drivers/base/dd.c:621
        [<ffffffff8274ae6c>] really_probe drivers/base/dd.c:583 [inline]
        [<ffffffff8274ae6c>] __driver_probe_device+0x10c/0x1e0 drivers/base/dd.c:752
        [<ffffffff8274af6a>] driver_probe_device+0x2a/0x120 drivers/base/dd.c:782
        [<ffffffff8274b786>] __device_attach_driver+0xf6/0x140 drivers/base/dd.c:899
        [<ffffffff82747c87>] bus_for_each_drv+0xb7/0x100 drivers/base/bus.c:427
        [<ffffffff8274b352>] __device_attach+0x122/0x260 drivers/base/dd.c:970
        [<ffffffff827498f6>] bus_probe_device+0xc6/0xe0 drivers/base/bus.c:487
        [<ffffffff82745cdb>] device_add+0x5fb/0xdf0 drivers/base/core.c:3405
        [<ffffffff82d3d202>] usb_set_configuration+0x8f2/0xb80 drivers/usb/core/message.c:2170
        [<ffffffff82d4dbfc>] usb_generic_driver_probe+0x8c/0xc0 drivers/usb/core/generic.c:238
        [<ffffffff82d3f49c>] usb_probe_device+0x5c/0x140 drivers/usb/core/driver.c:293
        [<ffffffff8274ab37>] call_driver_probe drivers/base/dd.c:542 [inline]
        [<ffffffff8274ab37>] really_probe.part.0+0xe7/0x310 drivers/base/dd.c:621
        [<ffffffff8274ae6c>] really_probe drivers/base/dd.c:583 [inline]
        [<ffffffff8274ae6c>] __driver_probe_device+0x10c/0x1e0 drivers/base/dd.c:752
    
    Link: https://syzkaller.appspot.com/bug?extid=f66dd31987e6740657be
    Reported-and-tested-by: syzbot+f66dd31987e6740657be@syzkaller.appspotmail.com
    
    Link: https://lore.kernel.org/linux-media/20220824012152.539788-1-mazinalhaddad05@gmail.com
    Signed-off-by: Mazin Al Haddad <mazinalhaddad05@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2abd73433872194bccdf1432a0980e4ec5273c2a
Author: Lin Ma <linma@zju.edu.cn>
Date:   Sun Aug 7 15:59:52 2022 +0100

    media: dvbdev: adopts refcnt to avoid UAF
    
    [ Upstream commit 0fc044b2b5e2d05a1fa1fb0d7f270367a7855d79 ]
    
    dvb_unregister_device() is known that prone to use-after-free.
    That is, the cleanup from dvb_unregister_device() releases the dvb_device
    even if there are pointers stored in file->private_data still refer to it.
    
    This patch adds a reference counter into struct dvb_device and delays its
    deallocation until no pointer refers to the object.
    
    Link: https://lore.kernel.org/linux-media/20220807145952.10368-1-linma@zju.edu.cn
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b42580c8d8aac11a66046897979cc13cfd04c541
Author: Yan Lei <yan_lei@dahuatech.com>
Date:   Sun Apr 10 07:19:25 2022 +0100

    media: dvb-frontends: fix leak of memory fw
    
    [ Upstream commit a15fe8d9f1bf460a804bcf18a890bfd2cf0d5caa ]
    
    Link: https://lore.kernel.org/linux-media/20220410061925.4107-1-chinayanlei2002@163.com
    Signed-off-by: Yan Lei <yan_lei@dahuatech.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd1e1bf916da66ab23ae476a90bd3b943ccc3248
Author: Maxim Korotkov <korotkov.maxim.s@gmail.com>
Date:   Tue Nov 22 15:29:01 2022 +0300

    ethtool: avoiding integer overflow in ethtool_phys_id()
    
    [ Upstream commit 64a8f8f7127da228d59a39e2c5e75f86590f90b4 ]
    
    The value of an arithmetic expression "n * id.data" is subject
    to possible overflow due to a failure to cast operands to a larger data
    type before performing arithmetic. Used macro for multiplication instead
    operator for avoiding overflow.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Signed-off-by: Maxim Korotkov <korotkov.maxim.s@gmail.com>
    Reviewed-by: Alexander Lobakin <alexandr.lobakin@intel.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20221122122901.22294-1-korotkov.maxim.s@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 329a76635548ee8fceb3b78c7d54d96524e80925
Author: Stanislav Fomichev <sdf@google.com>
Date:   Tue Nov 22 19:54:22 2022 -0800

    bpf: Prevent decl_tag from being referenced in func_proto arg
    
    [ Upstream commit f17472d4599697d701aa239b4c475a506bccfd19 ]
    
    Syzkaller managed to hit another decl_tag issue:
    
      btf_func_proto_check kernel/bpf/btf.c:4506 [inline]
      btf_check_all_types kernel/bpf/btf.c:4734 [inline]
      btf_parse_type_sec+0x1175/0x1980 kernel/bpf/btf.c:4763
      btf_parse kernel/bpf/btf.c:5042 [inline]
      btf_new_fd+0x65a/0xb00 kernel/bpf/btf.c:6709
      bpf_btf_load+0x6f/0x90 kernel/bpf/syscall.c:4342
      __sys_bpf+0x50a/0x6c0 kernel/bpf/syscall.c:5034
      __do_sys_bpf kernel/bpf/syscall.c:5093 [inline]
      __se_sys_bpf kernel/bpf/syscall.c:5091 [inline]
      __x64_sys_bpf+0x7c/0x90 kernel/bpf/syscall.c:5091
      do_syscall_64+0x54/0x70 arch/x86/entry/common.c:48
    
    This seems similar to commit ea68376c8bed ("bpf: prevent decl_tag from being
    referenced in func_proto") but for the argument.
    
    Reported-by: syzbot+8dd0551dda6020944c5d@syzkaller.appspotmail.com
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20221123035422.872531-2-sdf@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 148dcbd3af039ae39c3af697a3183008c7995805
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Nov 21 10:29:13 2022 -0800

    ppp: associate skb with a device at tx
    
    [ Upstream commit 9f225444467b98579cf28d94f4ad053460dfdb84 ]
    
    Syzkaller triggered flow dissector warning with the following:
    
    r0 = openat$ppp(0xffffffffffffff9c, &(0x7f0000000000), 0xc0802, 0x0)
    ioctl$PPPIOCNEWUNIT(r0, 0xc004743e, &(0x7f00000000c0))
    ioctl$PPPIOCSACTIVE(r0, 0x40107446, &(0x7f0000000240)={0x2, &(0x7f0000000180)=[{0x20, 0x0, 0x0, 0xfffff034}, {0x6}]})
    pwritev(r0, &(0x7f0000000040)=[{&(0x7f0000000140)='\x00!', 0x2}], 0x1, 0x0, 0x0)
    
    [    9.485814] WARNING: CPU: 3 PID: 329 at net/core/flow_dissector.c:1016 __skb_flow_dissect+0x1ee0/0x1fa0
    [    9.485929]  skb_get_poff+0x53/0xa0
    [    9.485937]  bpf_skb_get_pay_offset+0xe/0x20
    [    9.485944]  ? ppp_send_frame+0xc2/0x5b0
    [    9.485949]  ? _raw_spin_unlock_irqrestore+0x40/0x60
    [    9.485958]  ? __ppp_xmit_process+0x7a/0xe0
    [    9.485968]  ? ppp_xmit_process+0x5b/0xb0
    [    9.485974]  ? ppp_write+0x12a/0x190
    [    9.485981]  ? do_iter_write+0x18e/0x2d0
    [    9.485987]  ? __import_iovec+0x30/0x130
    [    9.485997]  ? do_pwritev+0x1b6/0x240
    [    9.486016]  ? trace_hardirqs_on+0x47/0x50
    [    9.486023]  ? __x64_sys_pwritev+0x24/0x30
    [    9.486026]  ? do_syscall_64+0x3d/0x80
    [    9.486031]  ? entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Flow dissector tries to find skb net namespace either via device
    or via socket. Neigher is set in ppp_send_frame, so let's manually
    use ppp->dev.
    
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: linux-ppp@vger.kernel.org
    Reported-by: syzbot+41cab52ab62ee99ed24a@syzkaller.appspotmail.com
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 755eb0879224ffc2a43de724554aeaf0e51e5a64
Author: Schspa Shi <schspa@gmail.com>
Date:   Wed Nov 16 19:45:11 2022 +0800

    mrp: introduce active flags to prevent UAF when applicant uninit
    
    [ Upstream commit ab0377803dafc58f1e22296708c1c28e309414d6 ]
    
    The caller of del_timer_sync must prevent restarting of the timer, If
    we have no this synchronization, there is a small probability that the
    cancellation will not be successful.
    
    And syzbot report the fellowing crash:
    ==================================================================
    BUG: KASAN: use-after-free in hlist_add_head include/linux/list.h:929 [inline]
    BUG: KASAN: use-after-free in enqueue_timer+0x18/0xa4 kernel/time/timer.c:605
    Write at addr f9ff000024df6058 by task syz-fuzzer/2256
    Pointer tag: [f9], memory tag: [fe]
    
    CPU: 1 PID: 2256 Comm: syz-fuzzer Not tainted 6.1.0-rc5-syzkaller-00008-
    ge01d50cbd6ee #0
    Hardware name: linux,dummy-virt (DT)
    Call trace:
     dump_backtrace.part.0+0xe0/0xf0 arch/arm64/kernel/stacktrace.c:156
     dump_backtrace arch/arm64/kernel/stacktrace.c:162 [inline]
     show_stack+0x18/0x40 arch/arm64/kernel/stacktrace.c:163
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x68/0x84 lib/dump_stack.c:106
     print_address_description mm/kasan/report.c:284 [inline]
     print_report+0x1a8/0x4a0 mm/kasan/report.c:395
     kasan_report+0x94/0xb4 mm/kasan/report.c:495
     __do_kernel_fault+0x164/0x1e0 arch/arm64/mm/fault.c:320
     do_bad_area arch/arm64/mm/fault.c:473 [inline]
     do_tag_check_fault+0x78/0x8c arch/arm64/mm/fault.c:749
     do_mem_abort+0x44/0x94 arch/arm64/mm/fault.c:825
     el1_abort+0x40/0x60 arch/arm64/kernel/entry-common.c:367
     el1h_64_sync_handler+0xd8/0xe4 arch/arm64/kernel/entry-common.c:427
     el1h_64_sync+0x64/0x68 arch/arm64/kernel/entry.S:576
     hlist_add_head include/linux/list.h:929 [inline]
     enqueue_timer+0x18/0xa4 kernel/time/timer.c:605
     mod_timer+0x14/0x20 kernel/time/timer.c:1161
     mrp_periodic_timer_arm net/802/mrp.c:614 [inline]
     mrp_periodic_timer+0xa0/0xc0 net/802/mrp.c:627
     call_timer_fn.constprop.0+0x24/0x80 kernel/time/timer.c:1474
     expire_timers+0x98/0xc4 kernel/time/timer.c:1519
    
    To fix it, we can introduce a new active flags to make sure the timer will
    not restart.
    
    Reported-by: syzbot+6fd64001c20aa99e34a4@syzkaller.appspotmail.com
    
    Signed-off-by: Schspa Shi <schspa@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 037db10e3f93f0d51ab3f52fbdaa7e67a7edd0b8
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Nov 15 08:53:55 2022 +0000

    net: add atomic_long_t to net_device_stats fields
    
    [ Upstream commit 6c1c5097781f563b70a81683ea6fdac21637573b ]
    
    Long standing KCSAN issues are caused by data-race around
    some dev->stats changes.
    
    Most performance critical paths already use per-cpu
    variables, or per-queue ones.
    
    It is reasonable (and more correct) to use atomic operations
    for the slow paths.
    
    This patch adds an union for each field of net_device_stats,
    so that we can convert paths that are not yet protected
    by a spinlock or a mutex.
    
    netdev_stats_to_stats64() no longer has an #if BITS_PER_LONG==64
    
    Note that the memcpy() we were using on 64bit arches
    had no provision to avoid load-tearing,
    while atomic_long_read() is providing the needed protection
    at no cost.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2d60023aff444152c996093c0dc4ffd229e5143
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Wed Nov 2 15:35:53 2022 -0400

    drm/amd/display: fix array index out of bound error in bios parser
    
    [ Upstream commit 4fc1ba4aa589ca267468ad23fedef37562227d32 ]
    
    [Why&How]
    Firmware headers dictate that gpio_pin array only has a size of 8. The
    count returned from vbios however is greater than 8.
    
    Fix this by not using array indexing but incrementing the pointer since
    gpio_pin definition in atomfirmware.h is hardcoded to size 8
    
    Reviewed-by: Martin Leung <Martin.Leung@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10d713532ffc67b13df61ed9c138a8ce0a186236
Author: Jiang Li <jiang.li@ugreen.com>
Date:   Mon Nov 7 22:16:59 2022 +0800

    md/raid1: stop mdx_raid1 thread when raid1 array run failed
    
    [ Upstream commit b611ad14006e5be2170d9e8e611bf49dff288911 ]
    
    fail run raid1 array when we assemble array with the inactive disk only,
    but the mdx_raid1 thread were not stop, Even if the associated resources
    have been released. it will caused a NULL dereference when we do poweroff.
    
    This causes the following Oops:
        [  287.587787] BUG: kernel NULL pointer dereference, address: 0000000000000070
        [  287.594762] #PF: supervisor read access in kernel mode
        [  287.599912] #PF: error_code(0x0000) - not-present page
        [  287.605061] PGD 0 P4D 0
        [  287.607612] Oops: 0000 [#1] SMP NOPTI
        [  287.611287] CPU: 3 PID: 5265 Comm: md0_raid1 Tainted: G     U            5.10.146 #0
        [  287.619029] Hardware name: xxxxxxx/To be filled by O.E.M, BIOS 5.19 06/16/2022
        [  287.626775] RIP: 0010:md_check_recovery+0x57/0x500 [md_mod]
        [  287.632357] Code: fe 01 00 00 48 83 bb 10 03 00 00 00 74 08 48 89 ......
        [  287.651118] RSP: 0018:ffffc90000433d78 EFLAGS: 00010202
        [  287.656347] RAX: 0000000000000000 RBX: ffff888105986800 RCX: 0000000000000000
        [  287.663491] RDX: ffffc90000433bb0 RSI: 00000000ffffefff RDI: ffff888105986800
        [  287.670634] RBP: ffffc90000433da0 R08: 0000000000000000 R09: c0000000ffffefff
        [  287.677771] R10: 0000000000000001 R11: ffffc90000433ba8 R12: ffff888105986800
        [  287.684907] R13: 0000000000000000 R14: fffffffffffffe00 R15: ffff888100b6b500
        [  287.692052] FS:  0000000000000000(0000) GS:ffff888277f80000(0000) knlGS:0000000000000000
        [  287.700149] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        [  287.705897] CR2: 0000000000000070 CR3: 000000000320a000 CR4: 0000000000350ee0
        [  287.713033] Call Trace:
        [  287.715498]  raid1d+0x6c/0xbbb [raid1]
        [  287.719256]  ? __schedule+0x1ff/0x760
        [  287.722930]  ? schedule+0x3b/0xb0
        [  287.726260]  ? schedule_timeout+0x1ed/0x290
        [  287.730456]  ? __switch_to+0x11f/0x400
        [  287.734219]  md_thread+0xe9/0x140 [md_mod]
        [  287.738328]  ? md_thread+0xe9/0x140 [md_mod]
        [  287.742601]  ? wait_woken+0x80/0x80
        [  287.746097]  ? md_register_thread+0xe0/0xe0 [md_mod]
        [  287.751064]  kthread+0x11a/0x140
        [  287.754300]  ? kthread_park+0x90/0x90
        [  287.757974]  ret_from_fork+0x1f/0x30
    
    In fact, when raid1 array run fail, we need to do
    md_unregister_thread() before raid1_free().
    
    Signed-off-by: Jiang Li <jiang.li@ugreen.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 100caacfa0ed26e061954c90cdc835d42f709536
Author: Li Zhong <floridsleeves@gmail.com>
Date:   Fri Sep 16 16:33:05 2022 -0700

    drivers/md/md-bitmap: check the return value of md_bitmap_get_counter()
    
    [ Upstream commit 3bd548e5b819b8c0f2c9085de775c5c7bff9052f ]
    
    Check the return value of md_bitmap_get_counter() in case it returns
    NULL pointer, which will result in a null pointer dereference.
    
    v2: update the check to include other dereference
    
    Signed-off-by: Li Zhong <floridsleeves@gmail.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d86851c304aa75835cb82675230eb3a302f6afb
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 7 21:25:45 2022 +0200

    drm/sti: Use drm_mode_copy()
    
    [ Upstream commit 442cf8e22ba25a77cb9092d78733fdbac9844e50 ]
    
    struct drm_display_mode embeds a list head, so overwriting
    the full struct with another one will corrupt the list
    (if the destination mode is on a list). Use drm_mode_copy()
    instead which explicitly preserves the list head of
    the destination mode.
    
    Even if we know the destination mode is not on any list
    using drm_mode_copy() seems decent as it sets a good
    example. Bad examples of not using it might eventually
    get copied into code where preserving the list head
    actually matters.
    
    Obviously one case not covered here is when the mode
    itself is embedded in a larger structure and the whole
    structure is copied. But if we are careful when copying
    into modes embedded in structures I think we can be a
    little more reassured that bogus list heads haven't been
    propagated in.
    
    @is_mode_copy@
    @@
    drm_mode_copy(...)
    {
    ...
    }
    
    @depends on !is_mode_copy@
    struct drm_display_mode *mode;
    expression E, S;
    @@
    (
    - *mode = E
    + drm_mode_copy(mode, &E)
    |
    - memcpy(mode, E, S)
    + drm_mode_copy(mode, E)
    )
    
    @depends on !is_mode_copy@
    struct drm_display_mode mode;
    expression E;
    @@
    (
    - mode = E
    + drm_mode_copy(&mode, &E)
    |
    - memcpy(&mode, E, S)
    + drm_mode_copy(&mode, E)
    )
    
    @@
    struct drm_display_mode *mode;
    @@
    - &*mode
    + mode
    
    Cc: Alain Volmat <alain.volmat@foss.st.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221107192545.9896-8-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd31d73040182cf5b8e6c3bc40e29e9d8c892a83
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 7 21:25:44 2022 +0200

    drm/rockchip: Use drm_mode_copy()
    
    [ Upstream commit 2bfaa28000d2830d3209161a4541cce0660e1b84 ]
    
    struct drm_display_mode embeds a list head, so overwriting
    the full struct with another one will corrupt the list
    (if the destination mode is on a list). Use drm_mode_copy()
    instead which explicitly preserves the list head of
    the destination mode.
    
    Even if we know the destination mode is not on any list
    using drm_mode_copy() seems decent as it sets a good
    example. Bad examples of not using it might eventually
    get copied into code where preserving the list head
    actually matters.
    
    Obviously one case not covered here is when the mode
    itself is embedded in a larger structure and the whole
    structure is copied. But if we are careful when copying
    into modes embedded in structures I think we can be a
    little more reassured that bogus list heads haven't been
    propagated in.
    
    @is_mode_copy@
    @@
    drm_mode_copy(...)
    {
    ...
    }
    
    @depends on !is_mode_copy@
    struct drm_display_mode *mode;
    expression E, S;
    @@
    (
    - *mode = E
    + drm_mode_copy(mode, &E)
    |
    - memcpy(mode, E, S)
    + drm_mode_copy(mode, E)
    )
    
    @depends on !is_mode_copy@
    struct drm_display_mode mode;
    expression E;
    @@
    (
    - mode = E
    + drm_mode_copy(&mode, &E)
    |
    - memcpy(&mode, E, S)
    + drm_mode_copy(&mode, E)
    )
    
    @@
    struct drm_display_mode *mode;
    @@
    - &*mode
    + mode
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Sandy Huang <hjc@rock-chips.com>
    Cc: "Heiko Stübner" <heiko@sntech.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-rockchip@lists.infradead.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20221107192545.9896-7-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f238212c7c06fd07b16d5db5af8ab9cc10086dc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 7 21:25:42 2022 +0200

    drm/msm: Use drm_mode_copy()
    
    [ Upstream commit b2a1c5ca50db22b3677676dd5bad5f6092429acf ]
    
    struct drm_display_mode embeds a list head, so overwriting
    the full struct with another one will corrupt the list
    (if the destination mode is on a list). Use drm_mode_copy()
    instead which explicitly preserves the list head of
    the destination mode.
    
    Even if we know the destination mode is not on any list
    using drm_mode_copy() seems decent as it sets a good
    example. Bad examples of not using it might eventually
    get copied into code where preserving the list head
    actually matters.
    
    Obviously one case not covered here is when the mode
    itself is embedded in a larger structure and the whole
    structure is copied. But if we are careful when copying
    into modes embedded in structures I think we can be a
    little more reassured that bogus list heads haven't been
    propagated in.
    
    @is_mode_copy@
    @@
    drm_mode_copy(...)
    {
    ...
    }
    
    @depends on !is_mode_copy@
    struct drm_display_mode *mode;
    expression E, S;
    @@
    (
    - *mode = E
    + drm_mode_copy(mode, &E)
    |
    - memcpy(mode, E, S)
    + drm_mode_copy(mode, E)
    )
    
    @depends on !is_mode_copy@
    struct drm_display_mode mode;
    expression E;
    @@
    (
    - mode = E
    + drm_mode_copy(&mode, &E)
    |
    - memcpy(&mode, E, S)
    + drm_mode_copy(&mode, E)
    )
    
    @@
    struct drm_display_mode *mode;
    @@
    - &*mode
    + mode
    
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Cc: linux-arm-msm@vger.kernel.org
    Cc: freedreno@lists.freedesktop.org
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221107192545.9896-5-ville.syrjala@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebc3c77785dc8b5b626309c0032a38fbb139287a
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Nov 3 10:01:30 2022 -0700

    s390/lcs: Fix return type of lcs_start_xmit()
    
    [ Upstream commit bb16db8393658e0978c3f0d30ae069e878264fa3 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/s390/net/lcs.c:2090:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = lcs_start_xmit,
                                        ^~~~~~~~~~~~~~
      drivers/s390/net/lcs.c:2097:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = lcs_start_xmit,
                                        ^~~~~~~~~~~~~~
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of lcs_start_xmit() to
    match the prototype's to resolve the warning and potential CFI failure,
    should s390 select ARCH_SUPPORTS_CFI_CLANG in the future.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ac0217ca9186c2f9af9a0113a331a42aa847894
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Nov 3 10:01:29 2022 -0700

    s390/netiucv: Fix return type of netiucv_tx()
    
    [ Upstream commit 88d86d18d7cf7e9137c95f9d212bb9fff8a1b4be ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/s390/net/netiucv.c:1854:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = netiucv_tx,
                                        ^~~~~~~~~~
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of netiucv_tx() to
    match the prototype's to resolve the warning and potential CFI failure,
    should s390 select ARCH_SUPPORTS_CFI_CLANG in the future.
    
    Additionally, while in the area, remove a comment block that is no
    longer relevant.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eeb75f80bceb88091722611b694042879aea1231
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Nov 3 10:01:28 2022 -0700

    s390/ctcm: Fix return type of ctc{mp,}m_tx()
    
    [ Upstream commit aa5bf80c3c067b82b4362cd6e8e2194623bcaca6 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/s390/net/ctcm_main.c:1064:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = ctcm_tx,
                                        ^~~~~~~
      drivers/s390/net/ctcm_main.c:1072:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = ctcmpc_tx,
                                        ^~~~~~~~~
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of ctc{mp,}m_tx() to
    match the prototype's to resolve the warning and potential CFI failure,
    should s390 select ARCH_SUPPORTS_CFI_CLANG in the future.
    
    Additionally, while in the area, remove a comment block that is no
    longer relevant.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9606bbc271ac86c266d1f4a0285dd69b3fda2d0f
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 08:25:40 2022 -0700

    drm/amdgpu: Fix type of second parameter in odn_edit_dpm_table() callback
    
    [ Upstream commit e4d0ef752081e7aa6ffb7ccac11c499c732a2e05 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/gpu/drm/amd/amdgpu/../pm/swsmu/amdgpu_smu.c:3008:29: error: incompatible function pointer types initializing 'int (*)(void *, uint32_t, long *, uint32_t)' (aka 'int (*)(void *, unsigned int, long *, unsigned int)') with an expression of type 'int (void *, enum PP_OD_DPM_TABLE_COMMAND, long *, uint32_t)' (aka 'int (void *, enum PP_OD_DPM_TABLE_COMMAND, long *, unsigned int)') [-Werror,-Wincompatible-function-pointer-types-strict]
              .odn_edit_dpm_table      = smu_od_edit_dpm_table,
                                         ^~~~~~~~~~~~~~~~~~~~~
      1 error generated.
    
    There are only two implementations of ->odn_edit_dpm_table() in 'struct
    amd_pm_funcs': smu_od_edit_dpm_table() and pp_odn_edit_dpm_table(). One
    has a second parameter type of 'enum PP_OD_DPM_TABLE_COMMAND' and the
    other uses 'u32'. Ultimately, smu_od_edit_dpm_table() calls
    ->od_edit_dpm_table() from 'struct pptable_funcs' and
    pp_odn_edit_dpm_table() calls ->odn_edit_dpm_table() from 'struct
    pp_hwmgr_func', which both have a second parameter type of 'enum
    PP_OD_DPM_TABLE_COMMAND'.
    
    Update the type parameter in both the prototype in 'struct amd_pm_funcs'
    and pp_odn_edit_dpm_table() to 'enum PP_OD_DPM_TABLE_COMMAND', which
    cleans up the warning.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a42a23bdae61a3aa789d1ad2da6d5583508262ca
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 08:25:39 2022 -0700

    drm/amdgpu: Fix type of second parameter in trans_msg() callback
    
    [ Upstream commit f0d0f1087333714ee683cc134a95afe331d7ddd9 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/gpu/drm/amd/amdgpu/mxgpu_ai.c:412:15: error: incompatible function pointer types initializing 'void (*)(struct amdgpu_device *, u32, u32, u32, u32)' (aka 'void (*)(struct amdgpu_device *, unsigned int, unsigned int, unsigned int, unsigned int)') with an expression of type 'void (struct amdgpu_device *, enum idh_request, u32, u32, u32)' (aka 'void (struct amdgpu_device *, enum idh_request, unsigned int, unsigned int, unsigned int)') [-Werror,-Wincompatible-function-pointer-types-strict]
              .trans_msg = xgpu_ai_mailbox_trans_msg,
                          ^~~~~~~~~~~~~~~~~~~~~~~~~
      1 error generated.
    
      drivers/gpu/drm/amd/amdgpu/mxgpu_nv.c:435:15: error: incompatible function pointer types initializing 'void (*)(struct amdgpu_device *, u32, u32, u32, u32)' (aka 'void (*)(struct amdgpu_device *, unsigned int, unsigned int, unsigned int, unsigned int)') with an expression of type 'void (struct amdgpu_device *, enum idh_request, u32, u32, u32)' (aka 'void (struct amdgpu_device *, enum idh_request, unsigned int, unsigned int, unsigned int)') [-Werror,-Wincompatible-function-pointer-types-strict]
              .trans_msg = xgpu_nv_mailbox_trans_msg,
                          ^~~~~~~~~~~~~~~~~~~~~~~~~
      1 error generated.
    
    The type of the second parameter in the prototype should be 'enum
    idh_request' instead of 'u32'. Update it to clear up the warnings.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cb18dea11196fb4a06f78294cec5e61985e1aff
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Oct 18 02:25:24 2022 -0700

    igb: Do not free q_vector unless new one was allocated
    
    [ Upstream commit 0668716506ca66f90d395f36ccdaebc3e0e84801 ]
    
    Avoid potential use-after-free condition under memory pressure. If the
    kzalloc() fails, q_vector will be freed but left in the original
    adapter->q_vector[v_idx] array position.
    
    Cc: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Cc: Tony Nguyen <anthony.l.nguyen@intel.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: intel-wired-lan@lists.osuosl.org
    Cc: netdev@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87792567d9ed93fd336d2c3b8d7870f44e141e6d
Author: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
Date:   Mon Oct 24 16:13:29 2022 +0900

    wifi: brcmfmac: Fix potential shift-out-of-bounds in brcmf_fw_alloc_request()
    
    [ Upstream commit 81d17f6f3331f03c8eafdacea68ab773426c1e3c ]
    
    This patch fixes a shift-out-of-bounds in brcmfmac that occurs in
    BIT(chiprev) when a 'chiprev' provided by the device is too large.
    It should also not be equal to or greater than BITS_PER_TYPE(u32)
    as we do bitwise AND with a u32 variable and BIT(chiprev). The patch
    adds a check that makes the function return NULL if that is the case.
    Note that the NULL case is later handled by the bus-specific caller,
    brcmf_usb_probe_cb() or brcmf_usb_reset_resume(), for example.
    
    Found by a modified version of syzkaller.
    
    UBSAN: shift-out-of-bounds in drivers/net/wireless/broadcom/brcm80211/brcmfmac/firmware.c
    shift exponent 151055786 is too large for 64-bit type 'long unsigned int'
    CPU: 0 PID: 1885 Comm: kworker/0:2 Tainted: G           O      5.14.0+ #132
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Workqueue: usb_hub_wq hub_event
    Call Trace:
     dump_stack_lvl+0x57/0x7d
     ubsan_epilogue+0x5/0x40
     __ubsan_handle_shift_out_of_bounds.cold+0x53/0xdb
     ? lock_chain_count+0x20/0x20
     brcmf_fw_alloc_request.cold+0x19/0x3ea
     ? brcmf_fw_get_firmwares+0x250/0x250
     ? brcmf_usb_ioctl_resp_wait+0x1a7/0x1f0
     brcmf_usb_get_fwname+0x114/0x1a0
     ? brcmf_usb_reset_resume+0x120/0x120
     ? number+0x6c4/0x9a0
     brcmf_c_process_clm_blob+0x168/0x590
     ? put_dec+0x90/0x90
     ? enable_ptr_key_workfn+0x20/0x20
     ? brcmf_common_pd_remove+0x50/0x50
     ? rcu_read_lock_sched_held+0xa1/0xd0
     brcmf_c_preinit_dcmds+0x673/0xc40
     ? brcmf_c_set_joinpref_default+0x100/0x100
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lock_acquire+0x19d/0x4e0
     ? find_held_lock+0x2d/0x110
     ? brcmf_usb_deq+0x1cc/0x260
     ? mark_held_locks+0x9f/0xe0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     ? _raw_spin_unlock_irqrestore+0x47/0x50
     ? trace_hardirqs_on+0x1c/0x120
     ? brcmf_usb_deq+0x1a7/0x260
     ? brcmf_usb_rx_fill_all+0x5a/0xf0
     brcmf_attach+0x246/0xd40
     ? wiphy_new_nm+0x1476/0x1d50
     ? kmemdup+0x30/0x40
     brcmf_usb_probe+0x12de/0x1690
     ? brcmf_usbdev_qinit.constprop.0+0x470/0x470
     usb_probe_interface+0x25f/0x710
     really_probe+0x1be/0xa90
     __driver_probe_device+0x2ab/0x460
     ? usb_match_id.part.0+0x88/0xc0
     driver_probe_device+0x49/0x120
     __device_attach_driver+0x18a/0x250
     ? driver_allows_async_probing+0x120/0x120
     bus_for_each_drv+0x123/0x1a0
     ? bus_rescan_devices+0x20/0x20
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     ? trace_hardirqs_on+0x1c/0x120
     __device_attach+0x207/0x330
     ? device_bind_driver+0xb0/0xb0
     ? kobject_uevent_env+0x230/0x12c0
     bus_probe_device+0x1a2/0x260
     device_add+0xa61/0x1ce0
     ? __mutex_unlock_slowpath+0xe7/0x660
     ? __fw_devlink_link_to_suppliers+0x550/0x550
     usb_set_configuration+0x984/0x1770
     ? kernfs_create_link+0x175/0x230
     usb_generic_driver_probe+0x69/0x90
     usb_probe_device+0x9c/0x220
     really_probe+0x1be/0xa90
     __driver_probe_device+0x2ab/0x460
     driver_probe_device+0x49/0x120
     __device_attach_driver+0x18a/0x250
     ? driver_allows_async_probing+0x120/0x120
     bus_for_each_drv+0x123/0x1a0
     ? bus_rescan_devices+0x20/0x20
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     ? trace_hardirqs_on+0x1c/0x120
     __device_attach+0x207/0x330
     ? device_bind_driver+0xb0/0xb0
     ? kobject_uevent_env+0x230/0x12c0
     bus_probe_device+0x1a2/0x260
     device_add+0xa61/0x1ce0
     ? __fw_devlink_link_to_suppliers+0x550/0x550
     usb_new_device.cold+0x463/0xf66
     ? hub_disconnect+0x400/0x400
     ? _raw_spin_unlock_irq+0x24/0x30
     hub_event+0x10d5/0x3330
     ? hub_port_debounce+0x280/0x280
     ? __lock_acquire+0x1671/0x5790
     ? wq_calc_node_cpumask+0x170/0x2a0
     ? lock_release+0x640/0x640
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     process_one_work+0x873/0x13e0
     ? lock_release+0x640/0x640
     ? pwq_dec_nr_in_flight+0x320/0x320
     ? rwlock_bug.part.0+0x90/0x90
     worker_thread+0x8b/0xd10
     ? __kthread_parkme+0xd9/0x1d0
     ? process_one_work+0x13e0/0x13e0
     kthread+0x379/0x450
     ? _raw_spin_unlock_irq+0x24/0x30
     ? set_kthread_struct+0x100/0x100
     ret_from_fork+0x1f/0x30
    
    Reported-by: Dokyung Song <dokyungs@yonsei.ac.kr>
    Reported-by: Jisoo Jang <jisoo.jang@yonsei.ac.kr>
    Reported-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Signed-off-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20221024071329.504277-1-linuxlovemin@yonsei.ac.kr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7aa8a4709d4b028c72f56cc146499d82d1d97a9
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 09:06:10 2022 -0700

    hamradio: baycom_epp: Fix return type of baycom_send_packet()
    
    [ Upstream commit c5733e5b15d91ab679646ec3149e192996a27d5d ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/net/hamradio/baycom_epp.c:1119:25: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit      = baycom_send_packet,
                                    ^~~~~~~~~~~~~~~~~~
      1 error generated.
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of baycom_send_packet()
    to match the prototype's to resolve the warning and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102160610.1186145-1-nathan@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b0b6553bf4ad3a435a57e02c68d6075f384e1be
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Nov 2 09:09:33 2022 -0700

    net: ethernet: ti: Fix return type of netcp_ndo_start_xmit()
    
    [ Upstream commit 63fe6ff674a96cfcfc0fa8df1051a27aa31c70b4 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    proposed warning in clang aims to catch these at compile time, which
    reveals:
    
      drivers/net/ethernet/ti/netcp_core.c:1944:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = netcp_ndo_start_xmit,
                                        ^~~~~~~~~~~~~~~~~~~~
      1 error generated.
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of
    netcp_ndo_start_xmit() to match the prototype's to resolve the warning
    and CFI failure.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102160933.1601260-1-nathan@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d935a02658be82585ecb39aab339faa84496650
Author: Stanislav Fomichev <sdf@google.com>
Date:   Thu Oct 27 15:55:37 2022 -0700

    bpf: make sure skb->len != 0 when redirecting to a tunneling device
    
    [ Upstream commit 07ec7b502800ba9f7b8b15cb01dd6556bb41aaca ]
    
    syzkaller managed to trigger another case where skb->len == 0
    when we enter __dev_queue_xmit:
    
    WARNING: CPU: 0 PID: 2470 at include/linux/skbuff.h:2576 skb_assert_len include/linux/skbuff.h:2576 [inline]
    WARNING: CPU: 0 PID: 2470 at include/linux/skbuff.h:2576 __dev_queue_xmit+0x2069/0x35e0 net/core/dev.c:4295
    
    Call Trace:
     dev_queue_xmit+0x17/0x20 net/core/dev.c:4406
     __bpf_tx_skb net/core/filter.c:2115 [inline]
     __bpf_redirect_no_mac net/core/filter.c:2140 [inline]
     __bpf_redirect+0x5fb/0xda0 net/core/filter.c:2163
     ____bpf_clone_redirect net/core/filter.c:2447 [inline]
     bpf_clone_redirect+0x247/0x390 net/core/filter.c:2419
     bpf_prog_48159a89cb4a9a16+0x59/0x5e
     bpf_dispatcher_nop_func include/linux/bpf.h:897 [inline]
     __bpf_prog_run include/linux/filter.h:596 [inline]
     bpf_prog_run include/linux/filter.h:603 [inline]
     bpf_test_run+0x46c/0x890 net/bpf/test_run.c:402
     bpf_prog_test_run_skb+0xbdc/0x14c0 net/bpf/test_run.c:1170
     bpf_prog_test_run+0x345/0x3c0 kernel/bpf/syscall.c:3648
     __sys_bpf+0x43a/0x6c0 kernel/bpf/syscall.c:5005
     __do_sys_bpf kernel/bpf/syscall.c:5091 [inline]
     __se_sys_bpf kernel/bpf/syscall.c:5089 [inline]
     __x64_sys_bpf+0x7c/0x90 kernel/bpf/syscall.c:5089
     do_syscall_64+0x54/0x70 arch/x86/entry/common.c:48
     entry_SYSCALL_64_after_hwframe+0x61/0xc6
    
    The reproducer doesn't really reproduce outside of syzkaller
    environment, so I'm taking a guess here. It looks like we
    do generate correct ETH_HLEN-sized packet, but we redirect
    the packet to the tunneling device. Before we do so, we
    __skb_pull l2 header and arrive again at skb->len == 0.
    Doesn't seem like we can do anything better than having
    an explicit check after __skb_pull?
    
    Cc: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+f635e86ec3fa0a37e019@syzkaller.appspotmail.com
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/r/20221027225537.353077-1-sdf@google.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebc2fb6afc9856188ce0bbb64185a7115c80a1a6
Author: Jiri Slaby (SUSE) <jirislaby@kernel.org>
Date:   Mon Oct 31 12:43:54 2022 +0100

    qed (gcc13): use u16 for fid to be big enough
    
    [ Upstream commit 7d84118229bf7f7290438c85caa8e49de52d50c1 ]
    
    gcc 13 correctly reports overflow in qed_grc_dump_addr_range():
    In file included from drivers/net/ethernet/qlogic/qed/qed.h:23,
                     from drivers/net/ethernet/qlogic/qed/qed_debug.c:10:
    drivers/net/ethernet/qlogic/qed/qed_debug.c: In function 'qed_grc_dump_addr_range':
    include/linux/qed/qed_if.h:1217:9: error: overflow in conversion from 'int' to 'u8' {aka 'unsigned char'} changes value from '(int)vf_id << 8 | 128' to '128' [-Werror=overflow]
    
    We do:
      u8 fid;
      ...
      fid = vf_id << 8 | 128;
    
    Since fid is 16bit (and the stored value above too), fid should be u16,
    not u8. Fix that.
    
    Cc: Martin Liska <mliska@suse.cz>
    Cc: Ariel Elior <aelior@marvell.com>
    Cc: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Jiri Slaby (SUSE) <jirislaby@kernel.org>
    Link: https://lore.kernel.org/r/20221031114354.10398-1-jirislaby@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 648cdb8bf376e722169a681489820b747eda8415
Author: gehao <gehao@kylinos.cn>
Date:   Wed Oct 26 17:54:05 2022 +0800

    drm/amd/display: prevent memory leak
    
    [ Upstream commit d232afb1f3417ae8194ccf19ad3a8360e70e104e ]
    
    In dce6(0,1,4)_create_resource_pool and dce80_create_resource_pool
    the allocated memory should be released if construct pool fails.
    
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: gehao <gehao@kylinos.cn>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c69bc8e34df4fc5db06e0b4a9a9ffffb1b241436
Author: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
Date:   Fri Oct 7 17:26:17 2022 +0800

    ipmi: fix memleak when unload ipmi driver
    
    [ Upstream commit 36992eb6b9b83f7f9cdc8e74fb5799d7b52e83e9 ]
    
    After the IPMI disconnect problem, the memory kept rising and we tried
    to unload the driver to free the memory. However, only part of the
    free memory is recovered after the driver is uninstalled. Using
    ebpf to hook free functions, we find that neither ipmi_user nor
    ipmi_smi_msg is free, only ipmi_recv_msg is free.
    
    We find that the deliver_smi_err_response call in clean_smi_msgs does
    the destroy processing on each message from the xmit_msg queue without
    checking the return value and free ipmi_smi_msg.
    
    deliver_smi_err_response is called only at this location. Adding the
    free handling has no effect.
    
    To verify, try using ebpf to trace the free function.
    
      $ bpftrace -e 'kretprobe:ipmi_alloc_recv_msg {printf("alloc rcv
          %p\n",retval);} kprobe:free_recv_msg {printf("free recv %p\n",
          arg0)} kretprobe:ipmi_alloc_smi_msg {printf("alloc smi %p\n",
            retval);} kprobe:free_smi_msg {printf("free smi  %p\n",arg0)}'
    
    Signed-off-by: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
    Message-Id: <20221007092617.87597-4-zhangyuchen.lcr@bytedance.com>
    [Fixed the comment above handle_one_recv_msg().]
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be4cd23cd36bc1ecfdefd2cd01a83cf5c3423b98
Author: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Date:   Mon Oct 10 14:19:43 2022 +0200

    ASoC: codecs: rt298: Add quirk for KBL-R RVP platform
    
    [ Upstream commit 953dbd1cef18ce9ac0d69c1bd735b929fe52a17e ]
    
    KBL-R RVP platforms also use combojack, so we need to enable that
    configuration for them.
    
    Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20221010121955.718168-4-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8af52492717e3538eba3f81d012b1476af8a89a6
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Mon Oct 10 03:32:23 2022 +0900

    wifi: ar5523: Fix use-after-free on ar5523_cmd() timed out
    
    [ Upstream commit b6702a942a069c2a975478d719e98d83cdae1797 ]
    
    syzkaller reported use-after-free with the stack trace like below [1]:
    
    [   38.960489][    C3] ==================================================================
    [   38.963216][    C3] BUG: KASAN: use-after-free in ar5523_cmd_tx_cb+0x220/0x240
    [   38.964950][    C3] Read of size 8 at addr ffff888048e03450 by task swapper/3/0
    [   38.966363][    C3]
    [   38.967053][    C3] CPU: 3 PID: 0 Comm: swapper/3 Not tainted 6.0.0-09039-ga6afa4199d3d-dirty #18
    [   38.968464][    C3] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.0-1.fc36 04/01/2014
    [   38.969959][    C3] Call Trace:
    [   38.970841][    C3]  <IRQ>
    [   38.971663][    C3]  dump_stack_lvl+0xfc/0x174
    [   38.972620][    C3]  print_report.cold+0x2c3/0x752
    [   38.973626][    C3]  ? ar5523_cmd_tx_cb+0x220/0x240
    [   38.974644][    C3]  kasan_report+0xb1/0x1d0
    [   38.975720][    C3]  ? ar5523_cmd_tx_cb+0x220/0x240
    [   38.976831][    C3]  ar5523_cmd_tx_cb+0x220/0x240
    [   38.978412][    C3]  __usb_hcd_giveback_urb+0x353/0x5b0
    [   38.979755][    C3]  usb_hcd_giveback_urb+0x385/0x430
    [   38.981266][    C3]  dummy_timer+0x140c/0x34e0
    [   38.982925][    C3]  ? notifier_call_chain+0xb5/0x1e0
    [   38.984761][    C3]  ? rcu_read_lock_sched_held+0xb/0x60
    [   38.986242][    C3]  ? lock_release+0x51c/0x790
    [   38.987323][    C3]  ? _raw_read_unlock_irqrestore+0x37/0x70
    [   38.988483][    C3]  ? __wake_up_common_lock+0xde/0x130
    [   38.989621][    C3]  ? reacquire_held_locks+0x4a0/0x4a0
    [   38.990777][    C3]  ? lock_acquire+0x472/0x550
    [   38.991919][    C3]  ? rcu_read_lock_sched_held+0xb/0x60
    [   38.993138][    C3]  ? lock_acquire+0x472/0x550
    [   38.994890][    C3]  ? dummy_urb_enqueue+0x860/0x860
    [   38.996266][    C3]  ? do_raw_spin_unlock+0x16f/0x230
    [   38.997670][    C3]  ? dummy_urb_enqueue+0x860/0x860
    [   38.999116][    C3]  call_timer_fn+0x1a0/0x6a0
    [   39.000668][    C3]  ? add_timer_on+0x4a0/0x4a0
    [   39.002137][    C3]  ? reacquire_held_locks+0x4a0/0x4a0
    [   39.003809][    C3]  ? __next_timer_interrupt+0x226/0x2a0
    [   39.005509][    C3]  __run_timers.part.0+0x69a/0xac0
    [   39.007025][    C3]  ? dummy_urb_enqueue+0x860/0x860
    [   39.008716][    C3]  ? call_timer_fn+0x6a0/0x6a0
    [   39.010254][    C3]  ? cpuacct_percpu_seq_show+0x10/0x10
    [   39.011795][    C3]  ? kvm_sched_clock_read+0x14/0x40
    [   39.013277][    C3]  ? sched_clock_cpu+0x69/0x2b0
    [   39.014724][    C3]  run_timer_softirq+0xb6/0x1d0
    [   39.016196][    C3]  __do_softirq+0x1d2/0x9be
    [   39.017616][    C3]  __irq_exit_rcu+0xeb/0x190
    [   39.019004][    C3]  irq_exit_rcu+0x5/0x20
    [   39.020361][    C3]  sysvec_apic_timer_interrupt+0x8f/0xb0
    [   39.021965][    C3]  </IRQ>
    [   39.023237][    C3]  <TASK>
    
    In ar5523_probe(), ar5523_host_available() calls ar5523_cmd() as below
    (there are other functions which finally call ar5523_cmd()):
    
    ar5523_probe()
    -> ar5523_host_available()
       -> ar5523_cmd_read()
          -> ar5523_cmd()
    
    If ar5523_cmd() timed out, then ar5523_host_available() failed and
    ar5523_probe() freed the device structure.  So, ar5523_cmd_tx_cb()
    might touch the freed structure.
    
    This patch fixes this issue by canceling in-flight tx cmd if submitted
    urb timed out.
    
    Link: https://syzkaller.appspot.com/bug?id=9e12b2d54300842b71bdd18b54971385ff0d0d3a [1]
    Reported-by: syzbot+95001b1fd6dfcc716c29@syzkaller.appspotmail.com
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221009183223.420015-1-syoshida@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1824ccabee5445347b83642e4087cc2eca070343
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Sun Oct 9 00:15:32 2022 +0300

    wifi: ath9k: verify the expected usb_endpoints are present
    
    [ Upstream commit 16ef02bad239f11f322df8425d302be62f0443ce ]
    
    The bug arises when a USB device claims to be an ATH9K but doesn't
    have the expected endpoints. (In this case there was an interrupt
    endpoint where the driver expected a bulk endpoint.) The kernel
    needs to be able to handle such devices without getting an internal error.
    
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 3 PID: 500 at drivers/usb/core/urb.c:493 usb_submit_urb+0xce2/0x1430 drivers/usb/core/urb.c:493
    Modules linked in:
    CPU: 3 PID: 500 Comm: kworker/3:2 Not tainted 5.10.135-syzkaller #0
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Workqueue: events request_firmware_work_func
    RIP: 0010:usb_submit_urb+0xce2/0x1430 drivers/usb/core/urb.c:493
    Call Trace:
     ath9k_hif_usb_alloc_rx_urbs drivers/net/wireless/ath/ath9k/hif_usb.c:908 [inline]
     ath9k_hif_usb_alloc_urbs+0x75e/0x1010 drivers/net/wireless/ath/ath9k/hif_usb.c:1019
     ath9k_hif_usb_dev_init drivers/net/wireless/ath/ath9k/hif_usb.c:1109 [inline]
     ath9k_hif_usb_firmware_cb+0x142/0x530 drivers/net/wireless/ath/ath9k/hif_usb.c:1242
     request_firmware_work_func+0x12e/0x240 drivers/base/firmware_loader/main.c:1097
     process_one_work+0x9af/0x1600 kernel/workqueue.c:2279
     worker_thread+0x61d/0x12f0 kernel/workqueue.c:2425
     kthread+0x3b4/0x4a0 kernel/kthread.c:313
     ret_from_fork+0x22/0x30 arch/x86/entry/entry_64.S:299
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221008211532.74583-1-pchelkin@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e8bb402b060a6c22160de3d72cee057698177c8
Author: Wright Feng <wright.feng@cypress.com>
Date:   Wed Sep 28 22:10:00 2022 -0500

    brcmfmac: return error when getting invalid max_flowrings from dongle
    
    [ Upstream commit 2aca4f3734bd717e04943ddf340d49ab62299a00 ]
    
    When firmware hit trap at initialization, host will read abnormal
    max_flowrings number from dongle, and it will cause kernel panic when
    doing iowrite to initialize dongle ring.
    To detect this error at early stage, we directly return error when getting
    invalid max_flowrings(>256).
    
    Signed-off-by: Wright Feng <wright.feng@cypress.com>
    Signed-off-by: Chi-hsien Lin <chi-hsien.lin@cypress.com>
    Signed-off-by: Ian Lin <ian.lin@infineon.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220929031001.9962-3-ian.lin@infineon.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cd4865bb4bef8fbbb4aac7bc9db6d6a6d256887
Author: Doug Brown <doug@schmorgal.com>
Date:   Sat Sep 10 13:29:38 2022 -0700

    drm/etnaviv: add missing quirks for GC300
    
    [ Upstream commit cc7d3fb446a91f24978a6aa59cbb578f92e22242 ]
    
    The GC300's features register doesn't specify that a 2D pipe is
    available, and like the GC600, its idle register reports zero bits where
    modules aren't present.
    
    Signed-off-by: Doug Brown <doug@schmorgal.com>
    Reviewed-by: Christian Gmeiner <christian.gmeiner@gmail.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fd3a11804c8877ff11fec59c5c53f1635331e3e
Author: ZhangPeng <zhangpeng362@huawei.com>
Date:   Wed Nov 30 06:59:59 2022 +0000

    hfs: fix OOB Read in __hfs_brec_find
    
    [ Upstream commit 8d824e69d9f3fa3121b2dda25053bae71e2460d2 ]
    
    Syzbot reported a OOB read bug:
    
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in hfs_strcmp+0x117/0x190
    fs/hfs/string.c:84
    Read of size 1 at addr ffff88807eb62c4e by task kworker/u4:1/11
    CPU: 1 PID: 11 Comm: kworker/u4:1 Not tainted
    6.1.0-rc6-syzkaller-00308-g644e9524388a #0
    Workqueue: writeback wb_workfn (flush-7:0)
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1b1/0x28e lib/dump_stack.c:106
     print_address_description+0x74/0x340 mm/kasan/report.c:284
     print_report+0x107/0x1f0 mm/kasan/report.c:395
     kasan_report+0xcd/0x100 mm/kasan/report.c:495
     hfs_strcmp+0x117/0x190 fs/hfs/string.c:84
     __hfs_brec_find+0x213/0x5c0 fs/hfs/bfind.c:75
     hfs_brec_find+0x276/0x520 fs/hfs/bfind.c:138
     hfs_write_inode+0x34c/0xb40 fs/hfs/inode.c:462
     write_inode fs/fs-writeback.c:1440 [inline]
    
    If the input inode of hfs_write_inode() is incorrect:
    struct inode
      struct hfs_inode_info
        struct hfs_cat_key
          struct hfs_name
            u8 len # len is greater than HFS_NAMELEN(31) which is the
    maximum length of an HFS filename
    
    OOB read occurred:
    hfs_write_inode()
      hfs_brec_find()
        __hfs_brec_find()
          hfs_cat_keycmp()
            hfs_strcmp() # OOB read occurred due to len is too large
    
    Fix this by adding a Check on len in hfs_write_inode() before calling
    hfs_brec_find().
    
    Link: https://lkml.kernel.org/r/20221130065959.2168236-1-zhangpeng362@huawei.com
    Signed-off-by: ZhangPeng <zhangpeng362@huawei.com>
    Reported-by: <syzbot+e836ff7133ac02be825f@syzkaller.appspotmail.com>
    Cc: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Nanyong Sun <sunnanyong@huawei.com>
    Cc: Viacheslav Dubeyko <slava@dubeyko.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6edd0cdee5780fd5f43356b72b29a2a6d48ef6da
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Sat May 15 22:06:31 2021 +0800

    acct: fix potential integer overflow in encode_comp_t()
    
    [ Upstream commit c5f31c655bcc01b6da53b836ac951c1556245305 ]
    
    The integer overflow is descripted with following codes:
      > 317 static comp_t encode_comp_t(u64 value)
      > 318 {
      > 319         int exp, rnd;
        ......
      > 341         exp <<= MANTSIZE;
      > 342         exp += value;
      > 343         return exp;
      > 344 }
    
    Currently comp_t is defined as type of '__u16', but the variable 'exp' is
    type of 'int', so overflow would happen when variable 'exp' in line 343 is
    greater than 65535.
    
    Link: https://lkml.kernel.org/r/20210515140631.369106-3-zhengyejian1@huawei.com
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Cc: Hanjun Guo <guohanjun@huawei.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Zhang Jinhao <zhangjinhao2@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec93b5430ec0f60877a5388bb023d60624f9ab9f
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Thu Oct 27 13:43:06 2022 +0900

    nilfs2: fix shift-out-of-bounds due to too large exponent of block size
    
    [ Upstream commit ebeccaaef67a4895d2496ab8d9c2fb8d89201211 ]
    
    If field s_log_block_size of superblock data is corrupted and too large,
    init_nilfs() and load_nilfs() still can trigger a shift-out-of-bounds
    warning followed by a kernel panic (if panic_on_warn is set):
    
     shift exponent 38973 is too large for 32-bit type 'int'
     Call Trace:
      <TASK>
      dump_stack_lvl+0xcd/0x134
      ubsan_epilogue+0xb/0x50
      __ubsan_handle_shift_out_of_bounds.cold.12+0x17b/0x1f5
      init_nilfs.cold.11+0x18/0x1d [nilfs2]
      nilfs_mount+0x9b5/0x12b0 [nilfs2]
      ...
    
    This fixes the issue by adding and using a new helper function for getting
    block size with sanity check.
    
    Link: https://lkml.kernel.org/r/20221027044306.42774-3-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d464b035c0613856d012cf1704879d3ff3f057fb
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Thu Oct 27 13:43:05 2022 +0900

    nilfs2: fix shift-out-of-bounds/overflow in nilfs_sb2_bad_offset()
    
    [ Upstream commit 610a2a3d7d8be3537458a378ec69396a76c385b6 ]
    
    Patch series "nilfs2: fix UBSAN shift-out-of-bounds warnings on mount
    time".
    
    The first patch fixes a bug reported by syzbot, and the second one fixes
    the remaining bug of the same kind.  Although they are triggered by the
    same super block data anomaly, I divided it into the above two because the
    details of the issues and how to fix it are different.
    
    Both are required to eliminate the shift-out-of-bounds issues at mount
    time.
    
    This patch (of 2):
    
    If the block size exponent information written in an on-disk superblock is
    corrupted, nilfs_sb2_bad_offset helper function can trigger
    shift-out-of-bounds warning followed by a kernel panic (if panic_on_warn
    is set):
    
     shift exponent 38983 is too large for 64-bit type 'unsigned long long'
     Call Trace:
      <TASK>
      __dump_stack lib/dump_stack.c:88 [inline]
      dump_stack_lvl+0x1b1/0x28e lib/dump_stack.c:106
      ubsan_epilogue lib/ubsan.c:151 [inline]
      __ubsan_handle_shift_out_of_bounds+0x33d/0x3b0 lib/ubsan.c:322
      nilfs_sb2_bad_offset fs/nilfs2/the_nilfs.c:449 [inline]
      nilfs_load_super_block+0xdf5/0xe00 fs/nilfs2/the_nilfs.c:523
      init_nilfs+0xb7/0x7d0 fs/nilfs2/the_nilfs.c:577
      nilfs_fill_super+0xb1/0x5d0 fs/nilfs2/super.c:1047
      nilfs_mount+0x613/0x9b0 fs/nilfs2/super.c:1317
      ...
    
    In addition, since nilfs_sb2_bad_offset() performs multiplication without
    considering the upper bound, the computation may overflow if the disk
    layout parameters are not normal.
    
    This fixes these issues by inserting preliminary sanity checks for those
    parameters and by converting the comparison from one involving
    multiplication and left bit-shifting to one using division and right
    bit-shifting.
    
    Link: https://lkml.kernel.org/r/20221027044306.42774-1-konishi.ryusuke@gmail.com
    Link: https://lkml.kernel.org/r/20221027044306.42774-2-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+e91619dd4c11c4960706@syzkaller.appspotmail.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0b83d3f3ffa96e8395c56b83d6197e184902a34
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Nov 7 18:42:36 2022 +0100

    ACPICA: Fix error code path in acpi_ds_call_control_method()
    
    [ Upstream commit 404ec60438add1afadaffaed34bb5fe4ddcadd40 ]
    
    A use-after-free in acpi_ps_parse_aml() after a failing invocaion of
    acpi_ds_call_control_method() is reported by KASAN [1] and code
    inspection reveals that next_walk_state pushed to the thread by
    acpi_ds_create_walk_state() is freed on errors, but it is not popped
    from the thread beforehand.  Thus acpi_ds_get_current_walk_state()
    called by acpi_ps_parse_aml() subsequently returns it as the new
    walk state which is incorrect.
    
    To address this, make acpi_ds_call_control_method() call
    acpi_ds_pop_walk_state() to pop next_walk_state from the thread before
    returning an error.
    
    Link: https://lore.kernel.org/linux-acpi/20221019073443.248215-1-chenzhongjin@huawei.com/ # [1]
    Reported-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 911999b193735cd378517b6cd5fe585ee345d49c
Author: Hoi Pok Wu <wuhoipok@gmail.com>
Date:   Tue Oct 25 23:20:45 2022 +0800

    fs: jfs: fix shift-out-of-bounds in dbDiscardAG
    
    [ Upstream commit 25e70c6162f207828dd405b432d8f2a98dbf7082 ]
    
    This should be applied to most URSAN bugs found recently by syzbot,
    by guarding the dbMount. As syzbot feeding rubbish into the bmap
    descriptor.
    
    Signed-off-by: Hoi Pok Wu <wuhoipok@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40dba68d418237b1ae2beaa06d46a94dd946278e
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Sun Oct 23 18:57:41 2022 +0900

    udf: Avoid double brelse() in udf_rename()
    
    [ Upstream commit c791730f2554a9ebb8f18df9368dc27d4ebc38c2 ]
    
    syzbot reported a warning like below [1]:
    
    VFS: brelse: Trying to free free buffer
    WARNING: CPU: 2 PID: 7301 at fs/buffer.c:1145 __brelse+0x67/0xa0
    ...
    Call Trace:
     <TASK>
     invalidate_bh_lru+0x99/0x150
     smp_call_function_many_cond+0xe2a/0x10c0
     ? generic_remap_file_range_prep+0x50/0x50
     ? __brelse+0xa0/0xa0
     ? __mutex_lock+0x21c/0x12d0
     ? smp_call_on_cpu+0x250/0x250
     ? rcu_read_lock_sched_held+0xb/0x60
     ? lock_release+0x587/0x810
     ? __brelse+0xa0/0xa0
     ? generic_remap_file_range_prep+0x50/0x50
     on_each_cpu_cond_mask+0x3c/0x80
     blkdev_flush_mapping+0x13a/0x2f0
     blkdev_put_whole+0xd3/0xf0
     blkdev_put+0x222/0x760
     deactivate_locked_super+0x96/0x160
     deactivate_super+0xda/0x100
     cleanup_mnt+0x222/0x3d0
     task_work_run+0x149/0x240
     ? task_work_cancel+0x30/0x30
     do_exit+0xb29/0x2a40
     ? reacquire_held_locks+0x4a0/0x4a0
     ? do_raw_spin_lock+0x12a/0x2b0
     ? mm_update_next_owner+0x7c0/0x7c0
     ? rwlock_bug.part.0+0x90/0x90
     ? zap_other_threads+0x234/0x2d0
     do_group_exit+0xd0/0x2a0
     __x64_sys_exit_group+0x3a/0x50
     do_syscall_64+0x34/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The cause of the issue is that brelse() is called on both ofibh.sbh
    and ofibh.ebh by udf_find_entry() when it returns NULL.  However,
    brelse() is called by udf_rename(), too.  So, b_count on buffer_head
    becomes unbalanced.
    
    This patch fixes the issue by not calling brelse() by udf_rename()
    when udf_find_entry() returns NULL.
    
    Link: https://syzkaller.appspot.com/bug?id=8297f45698159c6bca8a1f87dc983667c1a1c851 [1]
    Reported-by: syzbot+7902cd7684bc35306224@syzkaller.appspotmail.com
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221023095741.271430-1-syoshida@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e997e4ce8ae7ab89d72334120f6aee49c5bbdbd
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Tue Oct 18 08:48:07 2022 -0500

    fs: jfs: fix shift-out-of-bounds in dbAllocAG
    
    [ Upstream commit 898f706695682b9954f280d95e49fa86ffa55d08 ]
    
    Syzbot found a crash : UBSAN: shift-out-of-bounds in dbAllocAG. The
    underlying bug is the missing check of bmp->db_agl2size. The field can
    be greater than 64 and trigger the shift-out-of-bounds.
    
    Fix this bug by adding a check of bmp->db_agl2size in dbMount since this
    field is used in many following functions. The upper bound for this
    field is L2MAXL2SIZE - L2MAXAG, thanks for the help of Dave Kleikamp.
    Note that, for maintenance, I reorganized error handling code of dbMount.
    
    Reported-by: syzbot+15342c1aa6a00fb7a438@syzkaller.appspotmail.com
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcbc51d31d0afbd45e830e3cf565a7b3ca7bf0d8
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Wed Nov 2 10:51:23 2022 +0800

    binfmt_misc: fix shift-out-of-bounds in check_special_flags
    
    [ Upstream commit 6a46bf558803dd2b959ca7435a5c143efe837217 ]
    
    UBSAN reported a shift-out-of-bounds warning:
    
     left shift of 1 by 31 places cannot be represented in type 'int'
     Call Trace:
      <TASK>
      __dump_stack lib/dump_stack.c:88 [inline]
      dump_stack_lvl+0x8d/0xcf lib/dump_stack.c:106
      ubsan_epilogue+0xa/0x44 lib/ubsan.c:151
      __ubsan_handle_shift_out_of_bounds+0x1e7/0x208 lib/ubsan.c:322
      check_special_flags fs/binfmt_misc.c:241 [inline]
      create_entry fs/binfmt_misc.c:456 [inline]
      bm_register_write+0x9d3/0xa20 fs/binfmt_misc.c:654
      vfs_write+0x11e/0x580 fs/read_write.c:582
      ksys_write+0xcf/0x120 fs/read_write.c:637
      do_syscall_x64 arch/x86/entry/common.c:50 [inline]
      do_syscall_64+0x34/0x80 arch/x86/entry/common.c:80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
     RIP: 0033:0x4194e1
    
    Since the type of Node's flags is unsigned long, we should define these
    macros with same type too.
    
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221102025123.1117184-1-liushixin2@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22c1d8f24cdb2022f59aa9a88f6d8fa9938eff1e
Author: Gaurav Kohli <gauravkohli@linux.microsoft.com>
Date:   Fri Nov 25 22:14:51 2022 -0800

    x86/hyperv: Remove unregister syscore call from Hyper-V cleanup
    
    [ Upstream commit 32c97d980e2eef25465d453f2956a9ca68926a3c ]
    
    Hyper-V cleanup code comes under panic path where preemption and irq
    is already disabled. So calling of unregister_syscore_ops might schedule
    out the thread even for the case where mutex lock is free.
    hyperv_cleanup
            unregister_syscore_ops
                            mutex_lock(&syscore_ops_lock)
                                    might_sleep
    Here might_sleep might schedule out this thread, where voluntary preemption
    config is on and this thread will never comes back. And also this was added
    earlier to maintain the symmetry which is not required as this can comes
    during crash shutdown path only.
    
    To prevent the same, removing unregister_syscore_ops function call.
    
    Signed-off-by: Gaurav Kohli <gauravkohli@linux.microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1669443291-2575-1-git-send-email-gauravkohli@linux.microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b267051c82a6f7be6638b6834c10ede312f8335
Author: Guilherme G. Piccoli <gpiccoli@igalia.com>
Date:   Fri Aug 19 19:17:29 2022 -0300

    video: hyperv_fb: Avoid taking busy spinlock on panic path
    
    [ Upstream commit 1d044ca035dc22df0d3b39e56f2881071d9118bd ]
    
    The Hyper-V framebuffer code registers a panic notifier in order
    to try updating its fbdev if the kernel crashed. The notifier
    callback is straightforward, but it calls the vmbus_sendpacket()
    routine eventually, and such function takes a spinlock for the
    ring buffer operations.
    
    Panic path runs in atomic context, with local interrupts and
    preemption disabled, and all secondary CPUs shutdown. That said,
    taking a spinlock might cause a lockup if a secondary CPU was
    disabled with such lock taken. Fix it here by checking if the
    ring buffer spinlock is busy on Hyper-V framebuffer panic notifier;
    if so, bail-out avoiding the potential lockup scenario.
    
    Cc: Andrea Parri (Microsoft) <parri.andrea@gmail.com>
    Cc: Dexuan Cui <decui@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Michael Kelley <mikelley@microsoft.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Cc: Wei Liu <wei.liu@kernel.org>
    Tested-by: Fabio A M Martins <fabiomirmar@gmail.com>
    Signed-off-by: Guilherme G. Piccoli <gpiccoli@igalia.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20220819221731.480795-10-gpiccoli@igalia.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0461a8c278b8fe74d19e58bc224327bef645e295
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Nov 14 14:40:42 2022 +0000

    arm64: make is_ttbrX_addr() noinstr-safe
    
    [ Upstream commit d8c1d798a2e5091128c391c6dadcc9be334af3f5 ]
    
    We use is_ttbr0_addr() in noinstr code, but as it's only marked as
    inline, it's theoretically possible for the compiler to place it
    out-of-line and instrument it, which would be problematic.
    
    Mark is_ttbr0_addr() as __always_inline such that that can safely be
    used from noinstr code. For consistency, do the same to is_ttbr1_addr().
    Note that while is_ttbr1_addr() calls arch_kasan_reset_tag(), this is a
    macro (and its callees are either macros or __always_inline), so there
    is not a risk of transient instrumentation.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221114144042.3001140-1-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a52380b8193cf8be6c4a6b94b86ef64ed80c0dc
Author: Zqiang <qiang1.zhang@intel.com>
Date:   Thu Oct 13 12:41:48 2022 +0800

    rcu: Fix __this_cpu_read() lockdep warning in rcu_force_quiescent_state()
    
    [ Upstream commit ceb1c8c9b8aa9199da46a0f29d2d5f08d9b44c15 ]
    
    Running rcutorture with non-zero fqs_duration module parameter in a
    kernel built with CONFIG_PREEMPTION=y results in the following splat:
    
    BUG: using __this_cpu_read() in preemptible [00000000]
    code: rcu_torture_fqs/398
    caller is __this_cpu_preempt_check+0x13/0x20
    CPU: 3 PID: 398 Comm: rcu_torture_fqs Not tainted 6.0.0-rc1-yoctodev-standard+
    Call Trace:
    <TASK>
    dump_stack_lvl+0x5b/0x86
    dump_stack+0x10/0x16
    check_preemption_disabled+0xe5/0xf0
    __this_cpu_preempt_check+0x13/0x20
    rcu_force_quiescent_state.part.0+0x1c/0x170
    rcu_force_quiescent_state+0x1e/0x30
    rcu_torture_fqs+0xca/0x160
    ? rcu_torture_boost+0x430/0x430
    kthread+0x192/0x1d0
    ? kthread_complete_and_exit+0x30/0x30
    ret_from_fork+0x22/0x30
    </TASK>
    
    The problem is that rcu_force_quiescent_state() uses __this_cpu_read()
    in preemptible code instead of the proper raw_cpu_read().  This commit
    therefore changes __this_cpu_read() to raw_cpu_read().
    
    Signed-off-by: Zqiang <qiang1.zhang@intel.com>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9062493811676ee0efe6c74d98f00ca38c4e17d4
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 16 16:29:17 2022 +0000

    net: stream: purge sk_error_queue in sk_stream_kill_queues()
    
    [ Upstream commit e0c8bccd40fc1c19e1d246c39bcf79e357e1ada3 ]
    
    Changheon Lee reported TCP socket leaks, with a nice repro.
    
    It seems we leak TCP sockets with the following sequence:
    
    1) SOF_TIMESTAMPING_TX_ACK is enabled on the socket.
    
       Each ACK will cook an skb put in error queue, from __skb_tstamp_tx().
       __skb_tstamp_tx() is using skb_clone(), unless
       SOF_TIMESTAMPING_OPT_TSONLY was also requested.
    
    2) If the application is also using MSG_ZEROCOPY, then we put in the
       error queue cloned skbs that had a struct ubuf_info attached to them.
    
       Whenever an struct ubuf_info is allocated, sock_zerocopy_alloc()
       does a sock_hold().
    
       As long as the cloned skbs are still in sk_error_queue,
       socket refcount is kept elevated.
    
    3) Application closes the socket, while error queue is not empty.
    
    Since tcp_close() no longer purges the socket error queue,
    we might end up with a TCP socket with at least one skb in
    error queue keeping the socket alive forever.
    
    This bug can be (ab)used to consume all kernel memory
    and freeze the host.
    
    We need to purge the error queue, with proper synchronization
    against concurrent writers.
    
    Fixes: 24bcbe1cc69f ("net: stream: don't purge sk_error_queue in sk_stream_kill_queues()")
    Reported-by: Changheon Lee <darklight2357@icloud.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c3a20bfd23bdb0d92e8b9ac00feafd438adce61
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Dec 18 19:08:40 2022 +0100

    myri10ge: Fix an error handling path in myri10ge_probe()
    
    [ Upstream commit d83b950d44d2982c0e62e3d81b0f35ab09431008 ]
    
    Some memory allocated in myri10ge_probe_slices() is not released in the
    error handling path of myri10ge_probe().
    
    Add the corresponding kfree(), as already done in the remove function.
    
    Fixes: 0dcffac1a329 ("myri10ge: add multislices support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c973736909fd95548cea68616321c2e522fdeeb
Author: David Howells <dhowells@redhat.com>
Date:   Thu Dec 15 16:19:47 2022 +0000

    rxrpc: Fix missing unlock in rxrpc_do_sendmsg()
    
    [ Upstream commit 4feb2c44629e6f9b459b41a5a60491069d346a95 ]
    
    One of the error paths in rxrpc_do_sendmsg() doesn't unlock the call mutex
    before returning.  Fix it to do this.
    
    Note that this still doesn't get rid of the checker warning:
    
       ../net/rxrpc/sendmsg.c:617:5: warning: context imbalance in 'rxrpc_do_sendmsg' - wrong count at exit
    
    I think the interplay between the socket lock and the call's user_mutex may
    be too complicated for checker to analyse, especially as
    rxrpc_new_client_call_for_sendmsg(), which it calls, returns with the
    call's user_mutex if successful but unconditionally drops the socket lock.
    
    Fixes: e754eba685aa ("rxrpc: Provide a cmsg to specify the amount of Tx data for a call")
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c544c7c6afab7ac7eb9aa8eefe49bbc45e95bd7
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Sat Dec 17 14:17:07 2022 -0800

    net_sched: reject TCF_EM_SIMPLE case for complex ematch module
    
    [ Upstream commit 9cd3fd2054c3b3055163accbf2f31a4426f10317 ]
    
    When TCF_EM_SIMPLE was introduced, it is supposed to be convenient
    for ematch implementation:
    
    https://lore.kernel.org/all/20050105110048.GO26856@postel.suug.ch/
    
    "You don't have to, providing a 32bit data chunk without TCF_EM_SIMPLE
    set will simply result in allocating & copy. It's an optimization,
    nothing more."
    
    So if an ematch module provides ops->datalen that means it wants a
    complex data structure (saved in its em->data) instead of a simple u32
    value. We should simply reject such a combination, otherwise this u32
    could be misinterpreted as a pointer.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: syzbot+4caeae4c7103813598ae@syzkaller.appspotmail.com
    Reported-by: Jun Nie <jun.nie@linaro.org>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a39b4de0804f9fe0ae911b359ffd4afe7d9d933b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 10 23:08:22 2022 +0800

    mailbox: zynq-ipi: fix error handling while device_register() fails
    
    [ Upstream commit a6792a0cdef0b1c2d77920246283a72537e60e94 ]
    
    If device_register() fails, it has two issues:
    1. The name allocated by dev_set_name() is leaked.
    2. The parent of device is not NULL, device_unregister() is called
       in zynqmp_ipi_free_mboxes(), it will lead a kernel crash because
       of removing not added device.
    
    Call put_device() to give up the reference, so the name is freed in
    kobject_cleanup(). Add device registered check in zynqmp_ipi_free_mboxes()
    to avoid null-ptr-deref.
    
    Fixes: 4981b82ba2ff ("mailbox: ZynqMP IPI mailbox controller")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 821be5a5ab09a40ba09cb5ba354f18cf7996fea0
Author: Subash Abhinov Kasiviswanathan <quic_subashab@quicinc.com>
Date:   Wed Dec 14 23:11:58 2022 -0700

    skbuff: Account for tail adjustment during pull operations
    
    [ Upstream commit 2d7afdcbc9d32423f177ee12b7c93783aea338fb ]
    
    Extending the tail can have some unexpected side effects if a program uses
    a helper like BPF_FUNC_skb_pull_data to read partial content beyond the
    head skb headlen when all the skbs in the gso frag_list are linear with no
    head_frag -
    
      kernel BUG at net/core/skbuff.c:4219!
      pc : skb_segment+0xcf4/0xd2c
      lr : skb_segment+0x63c/0xd2c
      Call trace:
       skb_segment+0xcf4/0xd2c
       __udp_gso_segment+0xa4/0x544
       udp4_ufo_fragment+0x184/0x1c0
       inet_gso_segment+0x16c/0x3a4
       skb_mac_gso_segment+0xd4/0x1b0
       __skb_gso_segment+0xcc/0x12c
       udp_rcv_segment+0x54/0x16c
       udp_queue_rcv_skb+0x78/0x144
       udp_unicast_rcv_skb+0x8c/0xa4
       __udp4_lib_rcv+0x490/0x68c
       udp_rcv+0x20/0x30
       ip_protocol_deliver_rcu+0x1b0/0x33c
       ip_local_deliver+0xd8/0x1f0
       ip_rcv+0x98/0x1a4
       deliver_ptype_list_skb+0x98/0x1ec
       __netif_receive_skb_core+0x978/0xc60
    
    Fix this by marking these skbs as GSO_DODGY so segmentation can handle
    the tail updates accordingly.
    
    Fixes: 3dcbdb134f32 ("net: gso: Fix skb_segment splat when splitting gso_size mangled skb having linear-headed frag_list")
    Signed-off-by: Sean Tranchetti <quic_stranche@quicinc.com>
    Signed-off-by: Subash Abhinov Kasiviswanathan <quic_subashab@quicinc.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Link: https://lore.kernel.org/r/1671084718-24796-1-git-send-email-quic_subashab@quicinc.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6736b61ecf230dd656464de0f514bdeadb384f20
Author: Eelco Chaudron <echaudro@redhat.com>
Date:   Thu Dec 15 15:46:33 2022 +0100

    openvswitch: Fix flow lookup to use unmasked key
    
    [ Upstream commit 68bb10101e6b0a6bb44e9c908ef795fc4af99eae ]
    
    The commit mentioned below causes the ovs_flow_tbl_lookup() function
    to be called with the masked key. However, it's supposed to be called
    with the unmasked key. This due to the fact that the datapath supports
    installing wider flows, and OVS relies on this behavior. For example
    if ipv4(src=1.1.1.1/192.0.0.0, dst=1.1.1.2/192.0.0.0) exists, a wider
    flow (smaller mask) of ipv4(src=192.1.1.1/128.0.0.0,dst=192.1.1.2/
    128.0.0.0) is allowed to be added.
    
    However, if we try to add a wildcard rule, the installation fails:
    
    $ ovs-appctl dpctl/add-flow system@myDP "in_port(1),eth_type(0x0800), \
      ipv4(src=1.1.1.1/192.0.0.0,dst=1.1.1.2/192.0.0.0,frag=no)" 2
    $ ovs-appctl dpctl/add-flow system@myDP "in_port(1),eth_type(0x0800), \
      ipv4(src=192.1.1.1/0.0.0.0,dst=49.1.1.2/0.0.0.0,frag=no)" 2
    ovs-vswitchd: updating flow table (File exists)
    
    The reason is that the key used to determine if the flow is already
    present in the system uses the original key ANDed with the mask.
    This results in the IP address not being part of the (miniflow) key,
    i.e., being substituted with an all-zero value. When doing the actual
    lookup, this results in the key wrongfully matching the first flow,
    and therefore the flow does not get installed.
    
    This change reverses the commit below, but rather than having the key
    on the stack, it's allocated.
    
    Fixes: 190aa3e77880 ("openvswitch: Fix Frame-size larger than 1024 bytes warning.")
    
    Signed-off-by: Eelco Chaudron <echaudro@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea14220031b333d3c620f7e401a308b3a6896081
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Dec 14 18:01:01 2022 -0800

    selftests: devlink: fix the fd redirect in dummy_reporter_test
    
    [ Upstream commit 2fc60e2ff972d3dca836bff0b08cbe503c4ca1ce ]
    
    $number + > bash means redirect FD $number, e.g. commonly
    used 2> redirects stderr (fd 2). The test uses 8192> to
    write the number 8192 to a file, this results in:
    
      ./devlink.sh: line 499: 8192: Bad file descriptor
    
    Oddly the test also papers over this issue by checking
    for failure (expecting an error rather than success)
    so it passes, anyway.
    
    Fixes: ff18176ad806 ("selftests: Add a test of large binary to devlink health test")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57ce1a36c060e480e1b2be82c4e27fb56619326c
Author: GUO Zihua <guozihua@huawei.com>
Date:   Tue Nov 22 16:50:46 2022 +0800

    rtc: mxc_v2: Add missing clk_disable_unprepare()
    
    [ Upstream commit 55d5a86618d3b1a768bce01882b74cbbd2651975 ]
    
    The call to clk_disable_unprepare() is left out in the error handling of
    devm_rtc_allocate_device. Add it back.
    
    Fixes: 5490a1e018a4 ("rtc: mxc_v2: fix possible race condition")
    Signed-off-by: GUO Zihua <guozihua@huawei.com>
    Link: https://lore.kernel.org/r/20221122085046.21689-1-guozihua@huawei.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e2a27dab1e5aefeeff963ace5ffb066ebf82a20
Author: Tan Tee Min <tee.min.tan@linux.intel.com>
Date:   Fri Dec 9 12:15:22 2022 +0800

    igc: Set Qbv start_time and end_time to end_time if not being configured in GCL
    
    [ Upstream commit 72abeedd83982c1bc6023f631e412db78374d9b4 ]
    
    The default setting of end_time minus start_time is whole 1 second.
    Thus, if it's not being configured in any GCL entry then it will be
    staying at original 1 second.
    
    This patch is changing the start_time and end_time to be end_time as
    if setting zero will be having weird HW behavior where the gate will
    not be fully closed.
    
    Fixes: ec50a9d437f0 ("igc: Add support for taprio offloading")
    Signed-off-by: Tan Tee Min <tee.min.tan@linux.intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edb995b5ec32a1dfcd5ce44aa92644c07fc80afb
Author: Kurt Kanzenbach <kurt@linutronix.de>
Date:   Mon Jun 6 11:27:47 2022 +0200

    igc: Lift TAPRIO schedule restriction
    
    [ Upstream commit a5fd39464a4081ce11c801d7e20c4551ba7cb983 ]
    
    Add support for Qbv schedules where one queue stays open
    in consecutive entries. Currently that's not supported.
    
    Example schedule:
    
    |tc qdisc replace dev ${INTERFACE} handle 100 parent root taprio num_tc 3 \
    |   map 2 2 1 0 2 2 2 2 2 2 2 2 2 2 2 2 \
    |   queues 1@0 1@1 2@2 \
    |   base-time ${BASETIME} \
    |   sched-entry S 0x01 300000 \ # Stream High/Low
    |   sched-entry S 0x06 500000 \ # Management and Best Effort
    |   sched-entry S 0x04 200000 \ # Best Effort
    |   flags 0x02
    
    Signed-off-by: Kurt Kanzenbach <kurt@linutronix.de>
    Reviewed-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: 72abeedd8398 ("igc: Set Qbv start_time and end_time to end_time if not being configured in GCL")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b48d3db89161ac20ff4f002bb9e8837b2acd6001
Author: Tan Tee Min <tee.min.tan@linux.intel.com>
Date:   Fri Dec 9 12:15:21 2022 +0800

    igc: recalculate Qbv end_time by considering cycle time
    
    [ Upstream commit 6d05251d537a4d3835959a8cdd8cbbbdcdc0c904 ]
    
    Qbv users can specify a cycle time that is not equal to the total GCL
    intervals. Hence, recalculation is necessary here to exclude the time
    interval that exceeds the cycle time. As those GCL which exceeds the
    cycle time will be truncated.
    
    According to IEEE Std. 802.1Q-2018 section 8.6.9.2, once the end of
    the list is reached, it will switch to the END_OF_CYCLE state and
    leave the gates in the same state until the next cycle is started.
    
    Fixes: ec50a9d437f0 ("igc: Add support for taprio offloading")
    Signed-off-by: Tan Tee Min <tee.min.tan@linux.intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f2a944c23e869017216355d01ea8940ac7dd4a2
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Fri Dec 9 12:15:19 2022 +0800

    igc: Add checking for basetime less than zero
    
    [ Upstream commit 3b61764fb49a6e147ac90d71dccdddc9d5508ba1 ]
    
    Using the tc qdisc command, the user can set basetime to any value.
    Checking should be done on the driver's side to prevent registering
    basetime values that are less than zero.
    
    Fixes: ec50a9d437f0 ("igc: Add support for taprio offloading")
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0e2295c2aed508365a2343dafe392fd0d3d57ae
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Fri Dec 9 12:15:18 2022 +0800

    igc: Use strict cycles for Qbv scheduling
    
    [ Upstream commit d8f45be01dd9381065a3778a579385249ed011dc ]
    
    Configuring strict cycle mode in the controller forces more well
    behaved transmissions when taprio is offloaded.
    
    When set this strict_cycle and strict_end, transmission is not
    enabled if the whole packet cannot be completed before end of
    the Qbv cycle.
    
    Fixes: 82faa9b79950 ("igc: Add support for ETF offloading")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: Aravindhan Gunasekaran <aravindhan.gunasekaran@intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 413fe82420aa6b5b89fbf3aac006ce191619450c
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Fri Dec 9 12:15:17 2022 +0800

    igc: Enhance Qbv scheduling by using first flag bit
    
    [ Upstream commit db0b124f02ba68de6517ac303d431af220ccfe9f ]
    
    The I225 hardware has a limitation that packets can only be scheduled
    in the [0, cycle-time] interval. So, scheduling a packet to the start
    of the next cycle doesn't usually work.
    
    To overcome this, we use the Transmit Descriptor first flag to indicates
    that a packet should be the first packet (from a queue) in a cycle
    according to the section 7.5.2.9.3.4 The First Packet on Each QBV Cycle
    in Intel Discrete I225/6 User Manual.
    
    But this only works if there was any packet from that queue during the
    current cycle, to avoid this issue, we issue an empty packet if that's
    not the case. Also require one more descriptor to be available, to take
    into account the empty packet that might be issued.
    
    Test Setup:
    
    Talker: Use l2_tai to generate the launchtime into packet load.
    
    Listener: Use timedump.c to compute the delta between packet arrival
    and LaunchTime packet payload.
    
    Test Result:
    
    Before:
    
    1666000610127300000,1666000610127300096,96,621273
    1666000610127400000,1666000610127400192,192,621274
    1666000610127500000,1666000610127500032,32,621275
    1666000610127600000,1666000610127600128,128,621276
    1666000610127700000,1666000610127700224,224,621277
    1666000610127800000,1666000610127800064,64,621278
    1666000610127900000,1666000610127900160,160,621279
    1666000610128000000,1666000610128000000,0,621280
    1666000610128100000,1666000610128100096,96,621281
    1666000610128200000,1666000610128200192,192,621282
    1666000610128300000,1666000610128300032,32,621283
    1666000610128400000,1666000610128301056,-98944,621284
    1666000610128500000,1666000610128302080,-197920,621285
    1666000610128600000,1666000610128302848,-297152,621286
    1666000610128700000,1666000610128303872,-396128,621287
    1666000610128800000,1666000610128304896,-495104,621288
    1666000610128900000,1666000610128305664,-594336,621289
    1666000610129000000,1666000610128306688,-693312,621290
    1666000610129100000,1666000610128307712,-792288,621291
    1666000610129200000,1666000610128308480,-891520,621292
    1666000610129300000,1666000610128309504,-990496,621293
    1666000610129400000,1666000610128310528,-1089472,621294
    1666000610129500000,1666000610128311296,-1188704,621295
    1666000610129600000,1666000610128312320,-1287680,621296
    1666000610129700000,1666000610128313344,-1386656,621297
    1666000610129800000,1666000610128314112,-1485888,621298
    1666000610129900000,1666000610128315136,-1584864,621299
    1666000610130000000,1666000610128316160,-1683840,621300
    1666000610130100000,1666000610128316928,-1783072,621301
    1666000610130200000,1666000610128317952,-1882048,621302
    1666000610130300000,1666000610128318976,-1981024,621303
    1666000610130400000,1666000610128319744,-2080256,621304
    1666000610130500000,1666000610128320768,-2179232,621305
    1666000610130600000,1666000610128321792,-2278208,621306
    1666000610130700000,1666000610128322816,-2377184,621307
    1666000610130800000,1666000610128323584,-2476416,621308
    1666000610130900000,1666000610128324608,-2575392,621309
    1666000610131000000,1666000610128325632,-2674368,621310
    1666000610131100000,1666000610128326400,-2773600,621311
    1666000610131200000,1666000610128327424,-2872576,621312
    1666000610131300000,1666000610128328448,-2971552,621313
    1666000610131400000,1666000610128329216,-3070784,621314
    1666000610131500000,1666000610131500032,32,621315
    1666000610131600000,1666000610131600128,128,621316
    1666000610131700000,1666000610131700224,224,621317
    
    After:
    
    1666073510646200000,1666073510646200064,64,2676462
    1666073510646300000,1666073510646300160,160,2676463
    1666073510646400000,1666073510646400256,256,2676464
    1666073510646500000,1666073510646500096,96,2676465
    1666073510646600000,1666073510646600192,192,2676466
    1666073510646700000,1666073510646700032,32,2676467
    1666073510646800000,1666073510646800128,128,2676468
    1666073510646900000,1666073510646900224,224,2676469
    1666073510647000000,1666073510647000064,64,2676470
    1666073510647100000,1666073510647100160,160,2676471
    1666073510647200000,1666073510647200256,256,2676472
    1666073510647300000,1666073510647300096,96,2676473
    1666073510647400000,1666073510647400192,192,2676474
    1666073510647500000,1666073510647500032,32,2676475
    1666073510647600000,1666073510647600128,128,2676476
    1666073510647700000,1666073510647700224,224,2676477
    1666073510647800000,1666073510647800064,64,2676478
    1666073510647900000,1666073510647900160,160,2676479
    1666073510648000000,1666073510648000000,0,2676480
    1666073510648100000,1666073510648100096,96,2676481
    1666073510648200000,1666073510648200192,192,2676482
    1666073510648300000,1666073510648300032,32,2676483
    1666073510648400000,1666073510648400128,128,2676484
    1666073510648500000,1666073510648500224,224,2676485
    1666073510648600000,1666073510648600064,64,2676486
    1666073510648700000,1666073510648700160,160,2676487
    1666073510648800000,1666073510648800000,0,2676488
    1666073510648900000,1666073510648900096,96,2676489
    1666073510649000000,1666073510649000192,192,2676490
    1666073510649100000,1666073510649100032,32,2676491
    1666073510649200000,1666073510649200128,128,2676492
    1666073510649300000,1666073510649300224,224,2676493
    1666073510649400000,1666073510649400064,64,2676494
    1666073510649500000,1666073510649500160,160,2676495
    1666073510649600000,1666073510649600000,0,2676496
    1666073510649700000,1666073510649700096,96,2676497
    1666073510649800000,1666073510649800192,192,2676498
    1666073510649900000,1666073510649900032,32,2676499
    1666073510650000000,1666073510650000128,128,2676500
    
    Fixes: 82faa9b79950 ("igc: Add support for ETF offloading")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Co-developed-by: Aravindhan Gunasekaran <aravindhan.gunasekaran@intel.com>
    Signed-off-by: Aravindhan Gunasekaran <aravindhan.gunasekaran@intel.com>
    Co-developed-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Signed-off-by: Malli C <mallikarjuna.chilakala@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8f9698a05b5fb17d517d0777b8a14ffe88c6ecb
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Wed Mar 10 16:50:44 2021 +0200

    net: add a helper to avoid issues with HW TX timestamping and SO_TXTIME
    
    [ Upstream commit 847cbfc014adafeac401e19e349b0fd524f201c3 ]
    
    As explained in commit 29d98f54a4fe ("net: enetc: allow hardware
    timestamping on TX queues with tc-etf enabled"), hardware TX
    timestamping requires an skb with skb->tstamp = 0. When a packet is sent
    with SO_TXTIME, the skb->skb_mstamp_ns corrupts the value of skb->tstamp,
    so the drivers need to explicitly reset skb->tstamp to zero after
    consuming the TX time.
    
    Create a helper named skb_txtime_consumed() which does just that. All
    drivers which offload TC_SETUP_QDISC_ETF should implement it, and it
    would make it easier to assess during review whether they do the right
    thing in order to be compatible with hardware timestamping or not.
    
    Suggested-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: db0b124f02ba ("igc: Enhance Qbv scheduling by using first flag bit")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae5d96bae3cce68aca11571963ee509586c949f8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Jan 16 14:13:40 2021 +0800

    net: igc: use skb_csum_is_sctp instead of protocol check
    
    [ Upstream commit 609d29a9d2429a840a2f1f44e77b71d58e3e9a33 ]
    
    Using skb_csum_is_sctp is a easier way to validate it's a SCTP CRC
    checksum offload packet, and yet it also makes igc support SCTP
    CRC checksum offload for UDP and GRE encapped packets, just as it
    does in igb driver.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: db0b124f02ba ("igc: Enhance Qbv scheduling by using first flag bit")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4794d07fe635a87b959db3383fd01d081a65c937
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Jan 16 14:13:37 2021 +0800

    net: add inline function skb_csum_is_sctp
    
    [ Upstream commit fa82117010430aff2ce86400f7328f55a31b48a6 ]
    
    This patch is to define a inline function skb_csum_is_sctp(), and
    also replace all places where it checks if it's a SCTP CSUM skb.
    This function would be used later in many networking drivers in
    the following patches.
    
    Suggested-by: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: db0b124f02ba ("igc: Enhance Qbv scheduling by using first flag bit")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67349025f00d0749e36386cfcfc32c2887f47fdb
Author: Marco Elver <elver@google.com>
Date:   Wed Nov 25 23:48:40 2020 +0100

    net: switch to storing KCOV handle directly in sk_buff
    
    [ Upstream commit fa69ee5aa48b5b52e8028c2eb486906e9998d081 ]
    
    It turns out that usage of skb extensions can cause memory leaks. Ido
    Schimmel reported: "[...] there are instances that blindly overwrite
    'skb->extensions' by invoking skb_copy_header() after __alloc_skb()."
    
    Therefore, give up on using skb extensions for KCOV handle, and instead
    directly store kcov_handle in sk_buff.
    
    Fixes: 6370cc3bbd8a ("net: add kcov handle to skb extensions")
    Fixes: 85ce50d337d1 ("net: kcov: don't select SKB_EXTENSIONS when there is no NET")
    Fixes: 97f53a08cba1 ("net: linux/skbuff.h: combine SKB_EXTENSIONS + KCOV handling")
    Link: https://lore.kernel.org/linux-wireless/20201121160941.GA485907@shredder.lan/
    Reported-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Marco Elver <elver@google.com>
    Link: https://lore.kernel.org/r/20201125224840.2014773-1-elver@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: db0b124f02ba ("igc: Enhance Qbv scheduling by using first flag bit")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d5f83a62e8235d235534b3dc6f197d8a822c269
Author: Li Zetao <lizetao1@huawei.com>
Date:   Tue Dec 13 20:56:14 2022 +0800

    r6040: Fix kmemleak in probe and remove
    
    [ Upstream commit 7e43039a49c2da45edc1d9d7c9ede4003ab45a5f ]
    
    There is a memory leaks reported by kmemleak:
    
      unreferenced object 0xffff888116111000 (size 2048):
        comm "modprobe", pid 817, jiffies 4294759745 (age 76.502s)
        hex dump (first 32 bytes):
          00 c4 0a 04 81 88 ff ff 08 10 11 16 81 88 ff ff  ................
          08 10 11 16 81 88 ff ff 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<ffffffff815bcd82>] kmalloc_trace+0x22/0x60
          [<ffffffff827e20ee>] phy_device_create+0x4e/0x90
          [<ffffffff827e6072>] get_phy_device+0xd2/0x220
          [<ffffffff827e7844>] mdiobus_scan+0xa4/0x2e0
          [<ffffffff827e8be2>] __mdiobus_register+0x482/0x8b0
          [<ffffffffa01f5d24>] r6040_init_one+0x714/0xd2c [r6040]
          ...
    
    The problem occurs in probe process as follows:
      r6040_init_one:
        mdiobus_register
          mdiobus_scan    <- alloc and register phy_device,
                             the reference count of phy_device is 3
        r6040_mii_probe
          phy_connect     <- connect to the first phy_device,
                             so the reference count of the first
                             phy_device is 4, others are 3
        register_netdev   <- fault inject succeeded, goto error handling path
    
        // error handling path
        err_out_mdio_unregister:
          mdiobus_unregister(lp->mii_bus);
        err_out_mdio:
          mdiobus_free(lp->mii_bus);    <- the reference count of the first
                                           phy_device is 1, it is not released
                                           and other phy_devices are released
      // similarly, the remove process also has the same problem
    
    The root cause is traced to the phy_device is not disconnected when
    removes one r6040 device in r6040_remove_one() or on error handling path
    after r6040_mii probed successfully. In r6040_mii_probe(), a net ethernet
    device is connected to the first PHY device of mii_bus, in order to
    notify the connected driver when the link status changes, which is the
    default behavior of the PHY infrastructure to handle everything.
    Therefore the phy_device should be disconnected when removes one r6040
    device or on error handling path.
    
    Fix it by adding phy_disconnect() when removes one r6040 device or on
    error handling path after r6040_mii probed successfully.
    
    Fixes: 3831861b4ad8 ("r6040: implement phylib")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221213125614.927754-1-lizetao1@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aea9e64dec2cc6cd742e07ecd4e6236fc76b389b
Author: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
Date:   Wed Dec 14 10:51:39 2022 +0900

    nfc: pn533: Clear nfc_target before being used
    
    [ Upstream commit 9f28157778ede0d4f183f7ab3b46995bb400abbe ]
    
    Fix a slab-out-of-bounds read that occurs in nla_put() called from
    nfc_genl_send_target() when target->sensb_res_len, which is duplicated
    from an nfc_target in pn533, is too large as the nfc_target is not
    properly initialized and retains garbage values. Clear nfc_targets with
    memset() before they are used.
    
    Found by a modified version of syzkaller.
    
    BUG: KASAN: slab-out-of-bounds in nla_put
    Call Trace:
     memcpy
     nla_put
     nfc_genl_dump_targets
     genl_lock_dumpit
     netlink_dump
     __netlink_dump_start
     genl_family_rcv_msg_dumpit
     genl_rcv_msg
     netlink_rcv_skb
     genl_rcv
     netlink_unicast
     netlink_sendmsg
     sock_sendmsg
     ____sys_sendmsg
     ___sys_sendmsg
     __sys_sendmsg
     do_syscall_64
    
    Fixes: 673088fb42d0 ("NFC: pn533: Send ATR_REQ directly for active device detection")
    Fixes: 361f3cb7f9cf ("NFC: DEP link hook implementation for pn533")
    Signed-off-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20221214015139.119673-1-linuxlovemin@yonsei.ac.kr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6939f84e5369a5597ae5c57634aa7e5c8207bbfc
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Dec 12 16:41:39 2022 +0800

    mISDN: hfcmulti: don't call dev_kfree_skb/kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 1232946cf522b8de9e398828bde325d7c41f29dd ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    skb_queue_purge() is called under spin_lock_irqsave() in handle_dmsg()
    and hfcm_l1callback(), kfree_skb() is called in them, to fix this, use
    skb_queue_splice_init() to move the dch->squeue to a free queue, also
    enqueue the tx_skb and rx_skb, at last calling __skb_queue_purge() to
    free the SKBs afer unlock.
    
    Fixes: af69fb3a8ffa ("Add mISDN HFC multiport driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b58c8719666d6096b40f6780da4ea0c50bd34450
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Dec 12 16:41:38 2022 +0800

    mISDN: hfcpci: don't call dev_kfree_skb/kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit f0f596bd75a9d573ca9b587abb39cee0b916bb82 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    skb_queue_purge() is called under spin_lock_irqsave() in hfcpci_l2l1D(),
    kfree_skb() is called in it, to fix this, use skb_queue_splice_init()
    to move the dch->squeue to a free queue, also enqueue the tx_skb and
    rx_skb, at last calling __skb_queue_purge() to free the SKBs afer unlock.
    
    Fixes: 1700fe1a10dc ("Add mISDN HFC PCI driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30e0a066b611f0e16581ac6ec8d4e54b92c99a56
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Dec 12 16:41:37 2022 +0800

    mISDN: hfcsusb: don't call dev_kfree_skb/kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit ddc9648db162eee556edd5222d2808fe33730203 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    skb_queue_purge() is called under spin_lock_irqsave() in hfcusb_l2l1D(),
    kfree_skb() is called in it, to fix this, use skb_queue_splice_init()
    to move the dch->squeue to a free queue, also enqueue the tx_skb and
    rx_skb, at last calling __skb_queue_purge() to free the SKBs afer unlock.
    
    In tx_iso_complete(), dev_kfree_skb() is called to consume the transmitted
    SKB, so replace it with dev_consume_skb_irq().
    
    Fixes: 69f52adb2d53 ("mISDN: Add HFC USB driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a930b75bf93d7d844d778a207e990dd02526c5c
Author: Emeel Hakim <ehakim@nvidia.com>
Date:   Sun Dec 11 09:55:32 2022 +0200

    net: macsec: fix net device access prior to holding a lock
    
    [ Upstream commit f3b4a00f0f62da252c598310698dfc82ef2f2e2e ]
    
    Currently macsec offload selection update routine accesses
    the net device prior to holding the relevant lock.
    Fix by holding the lock prior to the device access.
    
    Fixes: dcb780fb2795 ("net: macsec: add nla support for changing the offloading selection")
    Reviewed-by: Raed Salem <raeds@nvidia.com>
    Signed-off-by: Emeel Hakim <ehakim@nvidia.com>
    Link: https://lore.kernel.org/r/20221211075532.28099-1-ehakim@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1207219a4bfa50121c9345d5d165470d0a82531
Author: Dan Aloni <dan.aloni@vastdata.com>
Date:   Mon Dec 12 13:11:06 2022 +0200

    nfsd: under NFSv4.1, fix double svc_xprt_put on rpc_create failure
    
    [ Upstream commit 3bc8edc98bd43540dbe648e4ef91f443d6d20a24 ]
    
    On error situation `clp->cl_cb_conn.cb_xprt` should not be given
    a reference to the xprt otherwise both client cleanup and the
    error handling path of the caller call to put it. Better to
    delay handing over the reference to a later branch.
    
    [   72.530665] refcount_t: underflow; use-after-free.
    [   72.531933] WARNING: CPU: 0 PID: 173 at lib/refcount.c:28 refcount_warn_saturate+0xcf/0x120
    [   72.533075] Modules linked in: nfsd(OE) nfsv4(OE) nfsv3(OE) nfs(OE) lockd(OE) compat_nfs_ssc(OE) nfs_acl(OE) rpcsec_gss_krb5(OE) auth_rpcgss(OE) rpcrdma(OE) dns_resolver fscache netfs grace rdma_cm iw_cm ib_cm sunrpc(OE) mlx5_ib mlx5_core mlxfw pci_hyperv_intf ib_uverbs ib_core xt_MASQUERADE nf_conntrack_netlink nft_counter xt_addrtype nft_compat br_netfilter bridge stp llc nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 ip_set overlay nf_tables nfnetlink crct10dif_pclmul crc32_pclmul ghash_clmulni_intel xfs serio_raw virtio_net virtio_blk net_failover failover fuse [last unloaded: sunrpc]
    [   72.540389] CPU: 0 PID: 173 Comm: kworker/u16:5 Tainted: G           OE     5.15.82-dan #1
    [   72.541511] Hardware name: Red Hat KVM/RHEL-AV, BIOS 1.16.0-3.module+el8.7.0+1084+97b81f61 04/01/2014
    [   72.542717] Workqueue: nfsd4_callbacks nfsd4_run_cb_work [nfsd]
    [   72.543575] RIP: 0010:refcount_warn_saturate+0xcf/0x120
    [   72.544299] Code: 55 00 0f 0b 5d e9 01 50 98 00 80 3d 75 9e 39 08 00 0f 85 74 ff ff ff 48 c7 c7 e8 d1 60 8e c6 05 61 9e 39 08 01 e8 f6 51 55 00 <0f> 0b 5d e9 d9 4f 98 00 80 3d 4b 9e 39 08 00 0f 85 4c ff ff ff 48
    [   72.546666] RSP: 0018:ffffb3f841157cf0 EFLAGS: 00010286
    [   72.547393] RAX: 0000000000000026 RBX: ffff89ac6231d478 RCX: 0000000000000000
    [   72.548324] RDX: ffff89adb7c2c2c0 RSI: ffff89adb7c205c0 RDI: ffff89adb7c205c0
    [   72.549271] RBP: ffffb3f841157cf0 R08: 0000000000000000 R09: c0000000ffefffff
    [   72.550209] R10: 0000000000000001 R11: ffffb3f841157ad0 R12: ffff89ac6231d180
    [   72.551142] R13: ffff89ac6231d478 R14: ffff89ac40c06180 R15: ffff89ac6231d4b0
    [   72.552089] FS:  0000000000000000(0000) GS:ffff89adb7c00000(0000) knlGS:0000000000000000
    [   72.553175] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   72.553934] CR2: 0000563a310506a8 CR3: 0000000109a66000 CR4: 0000000000350ef0
    [   72.554874] Call Trace:
    [   72.555278]  <TASK>
    [   72.555614]  svc_xprt_put+0xaf/0xe0 [sunrpc]
    [   72.556276]  nfsd4_process_cb_update.isra.11+0xb7/0x410 [nfsd]
    [   72.557087]  ? update_load_avg+0x82/0x610
    [   72.557652]  ? cpuacct_charge+0x60/0x70
    [   72.558212]  ? dequeue_entity+0xdb/0x3e0
    [   72.558765]  ? queued_spin_unlock+0x9/0x20
    [   72.559358]  nfsd4_run_cb_work+0xfc/0x270 [nfsd]
    [   72.560031]  process_one_work+0x1df/0x390
    [   72.560600]  worker_thread+0x37/0x3b0
    [   72.561644]  ? process_one_work+0x390/0x390
    [   72.562247]  kthread+0x12f/0x150
    [   72.562710]  ? set_kthread_struct+0x50/0x50
    [   72.563309]  ret_from_fork+0x22/0x30
    [   72.563818]  </TASK>
    [   72.564189] ---[ end trace 031117b1c72ec616 ]---
    [   72.566019] list_add corruption. next->prev should be prev (ffff89ac4977e538), but was ffff89ac4763e018. (next=ffff89ac4763e018).
    [   72.567647] ------------[ cut here ]------------
    
    Fixes: a4abc6b12eb1 ("nfsd: Fix svc_xprt refcnt leak when setup callback client failed")
    Cc: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Cc: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Dan Aloni <dan.aloni@vastdata.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 452e85cc3edf1eb03e6861b258c3eea0c2e8cb08
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Fri May 14 15:56:56 2021 -0400

    NFSD: Remove spurious cb_setup_err tracepoint
    
    [ Upstream commit 9f57c6062bf3ce2c6ab9ba60040b34e8134ef259 ]
    
    This path is not really an error path, so the tracepoint I added
    there is just noise.
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Stable-dep-of: 3bc8edc98bd4 ("nfsd: under NFSv4.1, fix double svc_xprt_put on rpc_create failure")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09c007e2392321e74483cea3ab1e99c0b629700a
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sun Dec 11 23:35:53 2022 +0100

    rtc: pcf85063: fix pcf85063_clkout_control
    
    [ Upstream commit c2d12e85336f6d4172fb2bab5935027c446d7343 ]
    
    pcf85063_clkout_control reads the wrong register but then update the
    correct one.
    
    Reported-by: Janne Terho <janne.terho@ouman.fi>
    Fixes: 8c229ab6048b ("rtc: pcf85063: Add pcf85063 clkout control to common clock framework")
    Link: https://lore.kernel.org/r/20221211223553.59955-1-alexandre.belloni@bootlin.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9453c13ae9ce19ff8109171b5736ad46bd64a4f
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Wed Nov 23 09:59:53 2022 +0800

    rtc: pic32: Move devm_rtc_allocate_device earlier in pic32_rtc_probe()
    
    [ Upstream commit 90cd5c88830140c9fade92a8027e0fb2c6e4cc49 ]
    
    The pic32_rtc_enable(pdata, 0) and clk_disable_unprepare(pdata->clk)
    should be called in the error handling of devm_rtc_allocate_device(),
    so we should move devm_rtc_allocate_device earlier in pic32_rtc_probe()
    to fix it.
    
    Fixes: 6515e23b9fde ("rtc: pic32: convert to devm_rtc_allocate_device")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221123015953.1998521-1-cuigaosheng1@huawei.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34836c592345f087eff0b6cc2c48ee3153997cb4
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Wed Nov 23 09:48:05 2022 +0800

    rtc: st-lpc: Add missing clk_disable_unprepare in st_rtc_probe()
    
    [ Upstream commit 5fb733d7bd6949e90028efdce8bd528c6ab7cf1e ]
    
    The clk_disable_unprepare() should be called in the error handling
    of clk_get_rate(), fix it.
    
    Fixes: b5b2bdfc2893 ("rtc: st: Add new driver for ST's LPC RTC")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221123014805.1993052-1-cuigaosheng1@huawei.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e65e707640b762de21aa50aa6e8948071fcaab4
Author: Qingfang DENG <dqfext@gmail.com>
Date:   Thu Dec 8 20:35:29 2022 +0800

    netfilter: flowtable: really fix NAT IPv6 offload
    
    [ Upstream commit 5fb45f95eec682621748b7cb012c6a8f0f981e6a ]
    
    The for-loop was broken from the start. It translates to:
    
            for (i = 0; i < 4; i += 4)
    
    which means the loop statement is run only once, so only the highest
    32-bit of the IPv6 address gets mangled.
    
    Fix the loop increment.
    
    Fixes: 0e07e25b481a ("netfilter: flowtable: fix NAT IPv6 offload mangling")
    Fixes: 5c27d8d76ce8 ("netfilter: nf_flow_table_offload: add IPv6 support")
    Signed-off-by: Qingfang DENG <dqfext@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f5571cb1d7be29df8d4cc4cb6ab1c6a5039ee54
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Fri Nov 18 09:07:43 2022 -0600

    powerpc/pseries/eeh: use correct API for error log size
    
    [ Upstream commit 9aafbfa5f57a4b75bafd3bed0191e8429c5fa618 ]
    
    rtas-error-log-max is not the name of an RTAS function, so rtas_token()
    is not the appropriate API for retrieving its value. We already have
    rtas_get_error_log_max() which returns a sensible value if the property
    is absent for any reason, so use that instead.
    
    Fixes: 8d633291b4fc ("powerpc/eeh: pseries platform EEH error log retrieval")
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    [mpe: Drop no-longer possible error handling as noticed by ajd]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221118150751.469393-6-nathanl@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9dc96fee2648252c56ccebd4be258634ce48769a
Author: Haowen Bai <baihaowen@meizu.com>
Date:   Wed May 11 09:27:56 2022 +0800

    powerpc/eeh: Drop redundant spinlock initialization
    
    [ Upstream commit 3def164a5cedad9117859dd4610cae2cc59cb6d2 ]
    
    slot_errbuf_lock has declared and initialized by DEFINE_SPINLOCK,
    so we don't need to spin_lock_init again, drop it.
    
    Signed-off-by: Haowen Bai <baihaowen@meizu.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1652232476-9696-1-git-send-email-baihaowen@meizu.com
    Stable-dep-of: 9aafbfa5f57a ("powerpc/pseries/eeh: use correct API for error log size")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12654b7d8deb777b5f04a3a5c1c9dd8375383bcc
Author: Yuan Can <yuancan@huawei.com>
Date:   Sat Dec 3 07:06:39 2022 +0000

    remoteproc: qcom_q6v5_pas: Fix missing of_node_put() in adsp_alloc_memory_region()
    
    [ Upstream commit 38e7d9c19276832ebb0277f415b9214bf7baeb37 ]
    
    The pointer node is returned by of_parse_phandle() with refcount
    incremented. We should use of_node_put() on it when done.
    
    Fixes: b9e718e950c3 ("remoteproc: Introduce Qualcomm ADSP PIL")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221203070639.15128-1-yuancan@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be5816b27bff4438c7da487b6c873409d2d565c5
Author: Luca Weiss <luca.weiss@fairphone.com>
Date:   Fri Nov 18 10:08:16 2022 +0100

    remoteproc: qcom_q6v5_pas: detach power domains on remove
    
    [ Upstream commit 34d01df00b84127be04c914fc9f8e8be1fcdf851 ]
    
    We need to detach from the power domains also on remove, not just on
    probe fail so a subsequent probe works as expected.
    
    Otherwise the following error appears on re-probe:
    
    [   29.452005] sysfs: cannot create duplicate filename '/devices/genpd:0:3000000.remoteproc'
    [   29.477121] CPU: 1 PID: 483 Comm: sh Tainted: G        W          6.1.0-rc4-00075-g71a113770bda #78
    [   29.510319] Hardware name: Fairphone 4 (DT)
    [   29.538335] Call trace:
    [   29.564470]  dump_backtrace.part.0+0xe0/0xf0
    [   29.592602]  show_stack+0x18/0x30
    [   29.619616]  dump_stack_lvl+0x64/0x80
    [   29.646834]  dump_stack+0x18/0x34
    [   29.673541]  sysfs_warn_dup+0x60/0x7c
    [   29.700592]  sysfs_create_dir_ns+0xec/0x110
    [   29.728057]  kobject_add_internal+0xb8/0x374
    [   29.755530]  kobject_add+0x9c/0x104
    [   29.782072]  device_add+0xbc/0x8a0
    [   29.808445]  device_register+0x20/0x30
    [   29.835175]  genpd_dev_pm_attach_by_id+0xa4/0x190
    [   29.862851]  genpd_dev_pm_attach_by_name+0x3c/0xb0
    [   29.890472]  dev_pm_domain_attach_by_name+0x20/0x30
    [   29.918212]  adsp_probe+0x278/0x580
    [   29.944384]  platform_probe+0x68/0xc0
    [   29.970603]  really_probe+0xbc/0x2dc
    [   29.996662]  __driver_probe_device+0x78/0xe0
    [   30.023491]  device_driver_attach+0x48/0xac
    [   30.050215]  bind_store+0xb8/0x114
    [   30.075957]  drv_attr_store+0x24/0x3c
    [   30.101874]  sysfs_kf_write+0x44/0x54
    [   30.127751]  kernfs_fop_write_iter+0x120/0x1f0
    [   30.154448]  vfs_write+0x1ac/0x380
    [   30.179937]  ksys_write+0x70/0x104
    [   30.205274]  __arm64_sys_write+0x1c/0x2c
    [   30.231060]  invoke_syscall+0x48/0x114
    [   30.256594]  el0_svc_common.constprop.0+0x44/0xec
    [   30.283183]  do_el0_svc+0x2c/0xd0
    [   30.308320]  el0_svc+0x2c/0x84
    [   30.333059]  el0t_64_sync_handler+0xf4/0x120
    [   30.359001]  el0t_64_sync+0x18c/0x190
    [   30.384385] kobject_add_internal failed for genpd:0:3000000.remoteproc with -EEXIST, don't try to register things with the same name in the same directory.
    [   30.406029] remoteproc remoteproc0: releasing 3000000.remoteproc
    [   30.416064] qcom_q6v5_pas: probe of 3000000.remoteproc failed with error -17
    
    Fixes: 17ee2fb4e856 ("remoteproc: qcom: pas: Vote for active/proxy power domains")
    Reviewed-by: Sibi Sankar <quic_sibis@quicinc.com>
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Signed-off-by: Luca Weiss <luca.weiss@fairphone.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221118090816.100012-2-luca.weiss@fairphone.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 582dd58a186cc7f3b3b7ca1a6f8bdd98256f43f4
Author: Luca Weiss <luca.weiss@fairphone.com>
Date:   Fri Nov 18 10:08:15 2022 +0100

    remoteproc: qcom_q6v5_pas: disable wakeup on probe fail or remove
    
    [ Upstream commit 9a70551996e699fda262e8d54bbd41739d7aad6d ]
    
    Leaving wakeup enabled during probe fail (-EPROBE_DEFER) or remove makes
    the subsequent probe fail.
    
    [    3.749454] remoteproc remoteproc0: releasing 3000000.remoteproc
    [    3.752949] qcom_q6v5_pas: probe of 3000000.remoteproc failed with error -17
    [    3.878935] remoteproc remoteproc0: releasing 4080000.remoteproc
    [    3.887602] qcom_q6v5_pas: probe of 4080000.remoteproc failed with error -17
    [    4.319552] remoteproc remoteproc0: releasing 8300000.remoteproc
    [    4.332716] qcom_q6v5_pas: probe of 8300000.remoteproc failed with error -17
    
    Fix this by disabling wakeup in both cases so the driver can properly
    probe on the next try.
    
    Fixes: a781e5aa5911 ("remoteproc: core: Prevent system suspend during remoteproc recovery")
    Fixes: dc86c129b4fb ("remoteproc: qcom: pas: Mark devices as wakeup capable")
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Signed-off-by: Luca Weiss <luca.weiss@fairphone.com>
    Reviewed-by: Caleb Connolly <caleb.connolly@linaro.org>
    Reviewed-by: Sibi Sankar <quic_sibis@quicinc.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221118090816.100012-1-luca.weiss@fairphone.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4539eb5c0c342567183fe386d0699c8dab49490
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Nov 29 18:56:50 2022 +0800

    remoteproc: sysmon: fix memory leak in qcom_add_sysmon_subdev()
    
    [ Upstream commit e01ce676aaef3b13d02343d7e70f9637d93a3367 ]
    
    The kfree() should be called when of_irq_get_byname() fails or
    devm_request_threaded_irq() fails in qcom_add_sysmon_subdev(),
    otherwise there will be a memory leak, so add kfree() to fix it.
    
    Fixes: 027045a6e2b7 ("remoteproc: qcom: Add shutdown-ack irq")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221129105650.1539187-1-cuigaosheng1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a65f4644b65a1c1858a30661b46a30af6cc5f48
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Fri Dec 2 19:35:05 2022 +0100

    pwm: sifive: Call pwm_sifive_update_clock() while mutex is held
    
    [ Upstream commit 45558b3abb87eeb2cedb8a59cb2699c120b5102a ]
    
    As was documented in commit 0f02f491b786 ("pwm: sifive: Reduce time the
    controller lock is held") a caller of pwm_sifive_update_clock() must
    hold the mutex. So fix pwm_sifive_clock_notifier() to grab the lock.
    
    While this necessity was only documented later, the race exists since
    the driver was introduced.
    
    Fixes: 9e37a53eb051 ("pwm: sifive: Add a driver for SiFive SoC PWM")
    Reported-by: Emil Renner Berthing <emil.renner.berthing@canonical.com>
    Reviewed-by: Emil Renner Berthing <emil.renner.berthing@canonical.com>
    Link: https://lore.kernel.org/r/20221018061656.1428111-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57f215a231673eba851fb3db9d30379296cacd97
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Mon Nov 28 10:06:28 2022 -0400

    iommu/sun50i: Remove IOMMU_DOMAIN_IDENTITY
    
    [ Upstream commit ef5bb8e7a7127218f826b9ccdf7508e7a339f4c2 ]
    
    This driver treats IOMMU_DOMAIN_IDENTITY the same as UNMANAGED, which
    cannot possibly be correct.
    
    UNMANAGED domains are required to start out blocking all DMAs. This seems
    to be what this driver does as it allocates a first level 'dt' for the IO
    page table that is 0 filled.
    
    Thus UNMANAGED looks like a working IO page table, and so IDENTITY must be
    a mistake. Remove it.
    
    Fixes: 4100b8c229b3 ("iommu: Add Allwinner H6 IOMMU driver")
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/0-v1-97f0adf27b5e+1f0-s50_identity_jgg@nvidia.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc02d8e59d36080dddaba22f19fe813f8b473918
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Mon Dec 5 12:44:27 2022 +0400

    selftests/powerpc: Fix resource leaks
    
    [ Upstream commit 8f4ab7da904ab7027ccd43ddb4f0094e932a5877 ]
    
    In check_all_cpu_dscr_defaults, opendir() opens the directory stream.
    Add missing closedir() in the error path to release it.
    
    In check_cpu_dscr_default, open() creates an open file descriptor.
    Add missing close() in the error path to release it.
    
    Fixes: ebd5858c904b ("selftests/powerpc: Add test for all DSCR sysfs interfaces")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221205084429.570654-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 464506de9bb3cb15e92ce2dc127e963614af7d27
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Wed Nov 30 23:15:13 2022 +0530

    powerpc/hv-gpci: Fix hv_gpci event list
    
    [ Upstream commit 03f7c1d2a49acd30e38789cd809d3300721e9b0e ]
    
    Based on getPerfCountInfo v1.018 documentation, some of the
    hv_gpci events were deprecated for platform firmware that
    supports counter_info_version 0x8 or above.
    
    Fix the hv_gpci event list by adding a new attribute group
    called "hv_gpci_event_attrs_v6" and a "ENABLE_EVENTS_COUNTERINFO_V6"
    macro to enable these events for platform firmware
    that supports counter_info_version 0x6 or below. And assigning
    the hv_gpci event list based on output counter info version
    of underlying plaform.
    
    Fixes: 97bf2640184f ("powerpc/perf/hv-gpci: add the remaining gpci requests")
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Reviewed-by: Madhavan Srinivasan <maddy@linux.ibm.com>
    Reviewed-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221130174513.87501-1-kjain@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0abfe735be5487cbeec3a41a881326fd6278e512
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:16:26 2022 +0800

    powerpc/83xx/mpc832x_rdb: call platform_device_put() in error case in of_fsl_spi_probe()
    
    [ Upstream commit 4d0eea415216fe3791da2f65eb41399e70c7bedf ]
    
    If platform_device_add() is not called or failed, it can not call
    platform_device_del() to clean up memory, it should call
    platform_device_put() in error case.
    
    Fixes: 26f6cb999366 ("[POWERPC] fsl_soc: add support for fsl_spi")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221029111626.429971-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da1a33795dfda0c52b484351647ba2981dbfaf7b
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Sun Nov 27 22:49:28 2022 +1000

    powerpc/perf: callchain validate kernel stack pointer bounds
    
    [ Upstream commit 32c5209214bd8d4f8c4e9d9b630ef4c671f58e79 ]
    
    The interrupt frame detection and loads from the hypothetical pt_regs
    are not bounds-checked. The next-frame validation only bounds-checks
    STACK_FRAME_OVERHEAD, which does not include the pt_regs. Add another
    test for this.
    
    The user could set r1 to be equal to the address matching the first
    interrupt frame - STACK_INT_FRAME_SIZE, which is in the previous page
    due to the kernel redzone, and induce the kernel to load the marker from
    there. Possibly this could cause a crash at least. If the user could
    induce the previous page to contain a valid marker, then it might be
    able to direct perf to read specific memory addresses in a way that
    could be transmitted back to the user in the perf data.
    
    Fixes: 20002ded4d93 ("perf_counter: powerpc: Add callchain support")
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221127124942.1665522-4-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d2ff5b3e28d81fb925647295f54759989f3f31a
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Aug 28 11:39:50 2022 +0900

    kbuild: refactor single builds of *.ko
    
    [ Upstream commit f110e5a250e3c5db417e094b3dd86f1c135291ca ]
    
    Remove the potentially invalid modules.order instead of using
    the temporary file.
    
    Also, KBUILD_MODULES is don't care for single builds. No need to
    cancel it.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Stable-dep-of: c7b98de745cf ("phy: qcom-qmp-combo: fix runtime suspend")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3bdda22b49e7a3cba2faa59377f5d39398c0b66
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Wed Mar 31 22:38:03 2021 +0900

    kbuild: unify modules(_install) for in-tree and external modules
    
    [ Upstream commit 3e3005df73b535cb849cf4ec8075d6aa3c460f68 ]
    
    If you attempt to build or install modules ('make modules(_install)'
    with CONFIG_MODULES disabled, you will get a clear error message, but
    nothing for external module builds.
    
    Factor out the modules and modules_install rules into the common part,
    so you will get the same error message when you try to build external
    modules with CONFIG_MODULES=n.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Stable-dep-of: c7b98de745cf ("phy: qcom-qmp-combo: fix runtime suspend")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2155129599f96d29005721803ecb35bbf6d1ceb
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Wed Mar 31 22:38:02 2021 +0900

    kbuild: remove unneeded mkdir for external modules_install
    
    [ Upstream commit 4b97ec0e9cfd5995f41b9726c88566a31f4625cc ]
    
    scripts/Makefile.modinst creates directories as needed.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Stable-dep-of: c7b98de745cf ("phy: qcom-qmp-combo: fix runtime suspend")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 195cb98861dc7716060def6b42a2f2b34232aad1
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 17 11:23:33 2022 +0800

    powerpc/xive: add missing iounmap() in error path in xive_spapr_populate_irq_data()
    
    [ Upstream commit 8b49670f3bb3f10cd4d5a6dca17f5a31b173ecdc ]
    
    If remapping 'data->trig_page' fails, the 'data->eoi_mmio' need be unmapped
    before returning from xive_spapr_populate_irq_data().
    
    Fixes: eac1e731b59e ("powerpc/xive: guest exploitation of the XIVE interrupt controller")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221017032333.1852406-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0bd6504e580644d65fb8075c901e700962f16de
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Fri Sep 16 15:15:04 2022 +0100

    powerpc/xmon: Fix -Wswitch-unreachable warning in bpt_cmds
    
    [ Upstream commit 1c4a4a4c8410be4a231a58b23e7a30923ff954ac ]
    
    When building with automatic stack variable initialization, GCC 12
    complains about variables defined outside of switch case statements.
    Move the variable into the case that uses it, which silences the warning:
    
    arch/powerpc/xmon/xmon.c: In function ‘bpt_cmds’:
    arch/powerpc/xmon/xmon.c:1529:13: warning: statement will never be executed [-Wswitch-unreachable]
     1529 |         int mode;
          |             ^~~~
    
    Fixes: 09b6c1129f89 ("powerpc/xmon: Fix compile error with PPC_8xx=y")
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/YySE6FHiOcbWWR+9@work
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76957b6aed995ab411aa1b05802c23d785fb803b
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Wed Dec 23 09:38:48 2020 +0000

    powerpc/xmon: Enable breakpoints on 8xx
    
    [ Upstream commit 30662217885d7341161924acf1665924d7d37d64 ]
    
    Since commit 4ad8622dc548 ("powerpc/8xx: Implement hw_breakpoint"),
    8xx has breakpoints so there is no reason to opt breakpoint logic
    out of xmon for the 8xx.
    
    Fixes: 4ad8622dc548 ("powerpc/8xx: Implement hw_breakpoint")
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/b0607f1113d1558e73476bb06db0ee16d31a6e5b.1608716197.git.christophe.leroy@csgroup.eu
    Stable-dep-of: 1c4a4a4c8410 ("powerpc/xmon: Fix -Wswitch-unreachable warning in bpt_cmds")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81c8bbf5b2b5f0c8030fff1716c00849cda8571a
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Jun 5 10:00:38 2022 +0400

    cxl: Fix refcount leak in cxl_calc_capp_routing
    
    [ Upstream commit 1d09697ff22908ae487fc8c4fbde1811732be523 ]
    
    of_get_next_parent() returns a node pointer with refcount incremented,
    we should use of_node_put() on it when not need anymore.
    This function only calls of_node_put() in normal path,
    missing it in the error path.
    Add missing of_node_put() to avoid refcount leak.
    
    Fixes: f24be42aab37 ("cxl: Add psl9 specific code")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220605060038.62217-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40b4be399e0db7073dec5a0de5ca9994f7e31e58
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Jan 29 08:16:04 2022 +0100

    powerpc/52xx: Fix a resource leak in an error handling path
    
    [ Upstream commit 5836947613ef33d311b4eff6a32d019580a214f5 ]
    
    The error handling path of mpc52xx_lpbfifo_probe() has a request_irq()
    that is not balanced by a corresponding free_irq().
    
    Add the missing call, as already done in the remove function.
    
    Fixes: 3c9059d79f5e ("powerpc/5200: add LocalPlus bus FIFO device driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/dec1496d46ccd5311d0f6e9f9ca4238be11bf6a6.1643440531.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fded04fbbb8fd6d2cad45c079909c6625969d6a
Author: Xie Shaowen <studentxswpy@163.com>
Date:   Tue Aug 2 15:41:48 2022 +0800

    macintosh/macio-adb: check the return value of ioremap()
    
    [ Upstream commit dbaa3105736d4d73063ea0a3b01cd7fafce924e6 ]
    
    The function ioremap() in macio_init() can fail, so its return value
    should be checked.
    
    Fixes: 36874579dbf4c ("[PATCH] powerpc: macio-adb build fix")
    Reported-by: Hacash Robot <hacashRobot@santino.com>
    Signed-off-by: Xie Shaowen <studentxswpy@163.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220802074148.3213659-1-studentxswpy@163.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ac0a7059b7bcbed35bfffa34a82c9a9e99638ef
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 4 11:25:51 2022 +0800

    macintosh: fix possible memory leak in macio_add_one_device()
    
    [ Upstream commit 5ca86eae55a2f006e6c1edd2029b2cacb6979515 ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically. It
    needs to be freed when of_device_register() fails. Call put_device() to
    give up the reference that's taken in device_initialize(), so that it
    can be freed in kobject_cleanup() when the refcount hits 0.
    
    macio device is freed in macio_release_dev(), so the kfree() can be
    removed.
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221104032551.1075335-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d240ac0e4c35d3f64fc782c11433138c1bd016e
Author: Yuan Can <yuancan@huawei.com>
Date:   Mon Nov 21 08:20:22 2022 +0000

    iommu/fsl_pamu: Fix resource leak in fsl_pamu_probe()
    
    [ Upstream commit 73f5fc5f884ad0c5f7d57f66303af64f9f002526 ]
    
    The fsl_pamu_probe() returns directly when create_csd() failed, leaving
    irq and memories unreleased.
    Fix by jumping to error if create_csd() returns error.
    
    Fixes: 695093e38c3e ("iommu/fsl: Freescale PAMU driver and iommu implementation.")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221121082022.19091-1-yuancan@huawei.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03f51c72997559e73b327608f0cccfded715c9a0
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 18 17:36:04 2022 +0800

    iommu/amd: Fix pci device refcount leak in ppr_notifier()
    
    [ Upstream commit 6cf0981c2233f97d56938d9d61845383d6eb227c ]
    
    As comment of pci_get_domain_bus_and_slot() says, it returns
    a pci device with refcount increment, when finish using it,
    the caller must decrement the reference count by calling
    pci_dev_put(). So call it before returning from ppr_notifier()
    to avoid refcount leak.
    
    Fixes: daae2d25a477 ("iommu/amd: Don't copy GCR3 table root pointer")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221118093604.216371-1-yangyingliang@huawei.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3929576f10ea67743bd2a44ed628c2a25bdbb559
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Wed Sep 21 09:41:41 2022 +0200

    rtc: pcf85063: Fix reading alarm
    
    [ Upstream commit a6ceee26fd5ed9b5bd37322b1ca88e4548cee4a3 ]
    
    If the alarms are disabled the topmost bit (AEN_*) is set in the alarm
    registers. This is also interpreted in BCD number leading to this warning:
    rtc rtc0: invalid alarm value: 2022-09-21T80:80:80
    
    Fix this by masking alarm enabling and reserved bits.
    
    Fixes: 05cb3a56ee8c ("rtc: pcf85063: add alarm support")
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Link: https://lore.kernel.org/r/20220921074141.3903104-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aaed333e2237da8a391cdc0e675da1993347c4e4
Author: Stefan Eichenberger <stefan.eichenberger@toradex.com>
Date:   Sun Nov 6 12:59:15 2022 +0100

    rtc: snvs: Allow a time difference on clock register read
    
    [ Upstream commit 0462681e207ccc44778a77b3297af728b1cf5b9f ]
    
    On an iMX6ULL the following message appears when a wakealarm is set:
    
    echo 0 > /sys/class/rtc/rtc1/wakealarm
    rtc rtc1: Timeout trying to get valid LPSRT Counter read
    
    This does not always happen but is reproducible quite often (7 out of 10
    times). The problem appears because the iMX6ULL is not able to read the
    registers within one 32kHz clock cycle which is the base clock of the
    RTC. Therefore, this patch allows a difference of up to 320 cycles
    (10ms). 10ms was chosen to be big enough even on systems with less cpu
    power (e.g. iMX6ULL). According to the reference manual a difference is
    fine:
    - If the two consecutive reads are similar, the value is correct.
    The values have to be similar, not equal.
    
    Fixes: cd7f3a249dbe ("rtc: snvs: Add timeouts to avoid kernel lockups")
    Reviewed-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Signed-off-by: Stefan Eichenberger <stefan.eichenberger@toradex.com>
    Signed-off-by: Francesco Dolcini <francesco@dolcini.it>
    Link: https://lore.kernel.org/r/20221106115915.7930-1-francesco@dolcini.it
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0c36ea4248a0133451dec8b5ad571cf0972ff98
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Nov 9 13:15:36 2022 +0100

    rtc: cmos: Disable ACPI RTC event on removal
    
    [ Upstream commit 83ebb7b3036d151ee39a4a752018665648fc3bd4 ]
    
    Make cmos_do_remove() drop the ACPI RTC fixed event handler so as to
    prevent it from operating on stale data in case the event triggers
    after driver removal.
    
    Fixes: 311ee9c151ad ("rtc: cmos: allow using ACPI for RTC alarm instead of HPET")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/2224609.iZASKD2KPV@kreacher
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca8cb20c2254a3f56fad3635cb6e51e671df3327
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Nov 9 13:12:00 2022 +0100

    rtc: cmos: Rename ACPI-related functions
    
    [ Upstream commit d13e9ad9f5146f066a5c5a1cc993d09e4fb21ead ]
    
    The names of rtc_wake_setup() and cmos_wake_setup() don't indicate
    that these functions are ACPI-related, which is the case, and the
    former doesn't really reflect the role of the function.
    
    Rename them to acpi_rtc_event_setup() and acpi_cmos_wake_setup(),
    respectively, to address this shortcoming.
    
    No intentional functional impact.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/3225614.44csPzL39Z@kreacher
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f9923baa2916732939cb66c6317769cc2a91b8f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Nov 9 13:09:32 2022 +0100

    rtc: cmos: Eliminate forward declarations of some functions
    
    [ Upstream commit dca4d3b71c8a09a16951add656711fbd6f5bfbb0 ]
    
    Reorder the ACPI-related code before cmos_do_probe() so as to eliminate
    excessive forward declarations of some functions.
    
    While at it, for consistency, add the inline modifier to the
    definitions of empty stub static funtions and remove it from the
    corresponding definitions of functions with non-empty bodies.
    
    No intentional functional impact.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/13157911.uLZWGnKmhe@kreacher
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 462db582e8eb53c4925f45015e38637e2436e23e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Nov 9 13:09:07 2022 +0100

    rtc: cmos: Call rtc_wake_setup() from cmos_do_probe()
    
    [ Upstream commit 375bbba09692fe4c5218eddee8e312dd733fa846 ]
    
    To reduce code duplication, move the invocation of rtc_wake_setup()
    into cmos_do_probe() and simplify the callers of the latter.
    
    No intentional functional impact.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/2143522.irdbgypaU6@kreacher
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14ad1353c5154dc5d489a86af10d4e92340a1f47
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Nov 9 13:07:08 2022 +0100

    rtc: cmos: Call cmos_wake_setup() from cmos_do_probe()
    
    [ Upstream commit 508ccdfb86b21da37ad091003a4d4567709d5dfb ]
    
    Notice that cmos_wake_setup() is the only user of acpi_rtc_info and it
    can operate on the cmos_rtc variable directly, so it need not set the
    platform_data pointer before cmos_do_probe() is called.  Instead, it
    can be called by cmos_do_probe() in the case when the platform_data
    pointer is not set to implement the default behavior (which is to use
    the FADT information as long as ACPI support is enabled).
    
    Modify the code accordingly.
    
    While at it, drop a comment that doesn't really match the code it is
    supposed to be describing.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Zhang Rui <rui.zhang@intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/4803444.31r3eYUQgx@kreacher
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45b96601a6ece7e232e005b715c2ef894fa34e64
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Tue Oct 18 22:35:11 2022 +0200

    rtc: cmos: fix build on non-ACPI platforms
    
    [ Upstream commit db4e955ae333567dea02822624106c0b96a2f84f ]
    
    Now that rtc_wake_setup is called outside of cmos_wake_setup, it also need
    to be defined on non-ACPI platforms.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/r/20221018203512.2532407-1-alexandre.belloni@bootlin.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2ece2c722be915337e733a5533d09c6f0ec02e0
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Oct 18 18:09:31 2022 +0200

    rtc: cmos: Fix wake alarm breakage
    
    [ Upstream commit 0782b66ed2fbb035dda76111df0954515e417b24 ]
    
    Commit 4919d3eb2ec0 ("rtc: cmos: Fix event handler registration
    ordering issue") overlooked the fact that cmos_do_probe() depended
    on the preparations carried out by cmos_wake_setup() and the wake
    alarm stopped working after the ordering of them had been changed.
    
    Address this by partially reverting commit 4919d3eb2ec0 so that
    cmos_wake_setup() is called before cmos_do_probe() again and moving
    the rtc_wake_setup() invocation from cmos_wake_setup() directly to the
    callers of cmos_do_probe() where it will happen after a successful
    completion of the latter.
    
    Fixes: 4919d3eb2ec0 ("rtc: cmos: Fix event handler registration ordering issue")
    Reported-by: Zhang Rui <rui.zhang@intel.com>
    Reported-by: Todd Brandt <todd.e.brandt@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Link: https://lore.kernel.org/r/5887691.lOV4Wx5bFT@kreacher
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bcfccb48696aba475f046c2021f0733659ce0ef
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Oct 12 20:07:01 2022 +0200

    rtc: cmos: Fix event handler registration ordering issue
    
    [ Upstream commit 4919d3eb2ec0ee364f7e3cf2d99646c1b224fae8 ]
    
    Because acpi_install_fixed_event_handler() enables the event
    automatically on success, it is incorrect to call it before the
    handler routine passed to it is ready to handle events.
    
    Unfortunately, the rtc-cmos driver does exactly the incorrect thing
    by calling cmos_wake_setup(), which passes rtc_handler() to
    acpi_install_fixed_event_handler(), before cmos_do_probe(), because
    rtc_handler() uses dev_get_drvdata() to get to the cmos object
    pointer and the driver data pointer is only populated in
    cmos_do_probe().
    
    This leads to a NULL pointer dereference in rtc_handler() on boot
    if the RTC fixed event happens to be active at the init time.
    
    To address this issue, change the initialization ordering of the
    driver so that cmos_wake_setup() is always called after a successful
    cmos_do_probe() call.
    
    While at it, change cmos_pnp_probe() to call cmos_do_probe() after
    the initial if () statement used for computing the IRQ argument to
    be passed to cmos_do_probe() which is cleaner than calling it in
    each branch of that if () (local variable "irq" can be of type int,
    because it is passed to that function as an argument of type int).
    
    Note that commit 6492fed7d8c9 ("rtc: rtc-cmos: Do not check
    ACPI_FADT_LOW_POWER_S0") caused this issue to affect a larger number
    of systems, because previously it only affected systems with
    ACPI_FADT_LOW_POWER_S0 set, but it is present regardless of that
    commit.
    
    Fixes: 6492fed7d8c9 ("rtc: rtc-cmos: Do not check ACPI_FADT_LOW_POWER_S0")
    Fixes: a474aaedac99 ("rtc-cmos: move wake setup from ACPI glue into RTC driver")
    Link: https://lore.kernel.org/linux-acpi/20221010141630.zfzi7mk7zvnmclzy@techsingularity.net/
    Reported-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Bjorn Helgaas <bhelgaas@google.com>
    Tested-by: Mel Gorman <mgorman@techsingularity.net>
    Link: https://lore.kernel.org/r/5629262.DvuYhMxLoT@kreacher
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5814d77e2f72fb1eec7c8e7bcf7c26b294516e37
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Aug 8 20:23:59 2022 +0200

    rtc: rtc-cmos: Do not check ACPI_FADT_LOW_POWER_S0
    
    [ Upstream commit 6492fed7d8c95f53b0b804ef541324d924d95d41 ]
    
    The ACPI_FADT_LOW_POWER_S0 flag merely means that it is better to
    use low-power S0 idle on the given platform than S3 (provided that
    the latter is supported) and it doesn't preclude using either of
    them (which of them will be used depends on the choices made by user
    space).
    
    For this reason, there is no benefit from checking that flag in
    use_acpi_alarm_quirks().
    
    First off, it cannot be a bug to do S3 with use_acpi_alarm set,
    because S3 can be used on systems with ACPI_FADT_LOW_POWER_S0 and it
    must work if really supported, so the ACPI_FADT_LOW_POWER_S0 check is
    not needed to protect the S3-capable systems from failing.
    
    Second, suspend-to-idle can be carried out on a system with
    ACPI_FADT_LOW_POWER_S0 unset and it is expected to work, so if setting
    use_acpi_alarm is needed to handle that case correctly, it should be
    set regardless of the ACPI_FADT_LOW_POWER_S0 value.
    
    Accordingly, drop the ACPI_FADT_LOW_POWER_S0 check from
    use_acpi_alarm_quirks().
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/12054246.O9o76ZdvQC@kreacher
    Stable-dep-of: 83ebb7b3036d ("rtc: cmos: Disable ACPI RTC event on removal")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 490b233677de945349c700a552fac23be8b754eb
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Thu Nov 10 17:27:15 2022 -0800

    dmaengine: idxd: Fix crc_val field for completion record
    
    [ Upstream commit dc901d98b1fe6e52ab81cd3e0879379168e06daa ]
    
    The crc_val in the completion record should be 64 bits and not 32 bits.
    
    Fixes: 4ac823e9cd85 ("dmaengine: idxd: fix delta_rec and crc size field for completion record")
    Reported-by: Nirav N Shah <nirav.n.shah@intel.com>
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/20221111012715.2031481-1-fenghua.yu@intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a42e95547522fc7714ffb63c440322a2548f0baf
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Fri Oct 28 13:33:55 2022 +0100

    pwm: tegra: Improve required rate calculation
    
    [ Upstream commit f271946117dde2ca8741b8138b347b2d68e6ad56 ]
    
    For the case where dev_pm_opp_set_rate() is called to set the PWM clock
    rate, the requested rate is calculated as ...
    
     required_clk_rate = (NSEC_PER_SEC / period_ns) << PWM_DUTY_WIDTH;
    
    The above calculation may lead to rounding errors because the
    NSEC_PER_SEC is divided by 'period_ns' before applying the
    PWM_DUTY_WIDTH multiplication factor. For example, if the period is
    45334ns, the above calculation yields a rate of 5646848Hz instead of
    5646976Hz. Fix this by applying the multiplication factor before
    dividing and using the DIV_ROUND_UP macro which yields the expected
    result of 5646976Hz.
    
    Fixes: 1d7796bdb63a ("pwm: tegra: Support dynamic clock frequency configuration")
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddd2bb08bd99b7ee4442fbbe0f9b80236fdd71d2
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Tue Sep 27 14:52:56 2022 -0700

    include/uapi/linux/swab: Fix potentially missing __always_inline
    
    [ Upstream commit defbab270d45e32b068e7e73c3567232d745c60f ]
    
    Commit bc27fb68aaad ("include/uapi/linux/byteorder, swab: force inlining
    of some byteswap operations") added __always_inline to swab functions
    and commit 283d75737837 ("uapi/linux/stddef.h: Provide __always_inline to
    userspace headers") added a definition of __always_inline for use in
    exported headers when the kernel's compiler.h is not available.
    
    However, since swab.h does not include stddef.h, if the header soup does
    not indirectly include it, the definition of __always_inline is missing,
    resulting in a compilation failure, which was observed compiling the
    perf tool using exported headers containing this commit:
    
    In file included from /usr/include/linux/byteorder/little_endian.h:12:0,
                     from /usr/include/asm/byteorder.h:14,
                     from tools/include/uapi/linux/perf_event.h:20,
                     from perf.h:8,
                     from builtin-bench.c:18:
    /usr/include/linux/swab.h:160:8: error: unknown type name `__always_inline'
     static __always_inline __u16 __swab16p(const __u16 *p)
    
    Fix this by replacing the inclusion of linux/compiler.h with
    linux/stddef.h to ensure that we pick up that definition if required,
    without relying on it's indirect inclusion. compiler.h is then included
    indirectly, via stddef.h.
    
    Fixes: 283d75737837 ("uapi/linux/stddef.h: Provide __always_inline to userspace headers")
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Petr Vaněk <arkamar@atlas.cz>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2a98433421ea23872ffb6d404c49552b391137a
Author: Al Cooper <alcooperx@gmail.com>
Date:   Wed Oct 5 14:30:14 2022 -0700

    phy: usb: s2 WoL wakeup_count not incremented for USB->Eth devices
    
    [ Upstream commit f7fc5b7090372fc4dd7798c874635ca41b8ba733 ]
    
    The PHY's "wakeup_count" is not incrementing when waking from
    WoL. The wakeup count can be found in sysfs at:
    /sys/bus/platform/devices/rdb/*.usb-phy/power/wakeup_count.
    The problem is that the system wakup event handler was being passed
    the wrong "device" by the PHY driver.
    
    Fixes: f1c0db40a3ad ("phy: usb: Add "wake on" functionality")
    Signed-off-by: Al Cooper <alcooperx@gmail.com>
    Signed-off-by: Justin Chen <justinpopo6@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/1665005418-15807-3-git-send-email-justinpopo6@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca31ad0932af7e77719c16ca8334c821421ba618
Author: Jernej Skrabec <jernej.skrabec@gmail.com>
Date:   Tue Oct 25 18:54:14 2022 +0200

    iommu/sun50i: Fix flush size
    
    [ Upstream commit 67a8a67f9eceb72e4c73d1d09ed9ab04f4b8e12d ]
    
    Function sun50i_table_flush() takes number of entries as an argument,
    not number of bytes. Fix that mistake in sun50i_dte_get_page_table().
    
    Fixes: 4100b8c229b3 ("iommu: Add Allwinner H6 IOMMU driver")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20221025165415.307591-5-jernej.skrabec@gmail.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 147af0c1e7fd5db272256107bd2eb2647d966e9e
Author: Jernej Skrabec <jernej.skrabec@gmail.com>
Date:   Tue Oct 25 18:54:13 2022 +0200

    iommu/sun50i: Fix R/W permission check
    
    [ Upstream commit eac0104dc69be50bed86926d6f32e82b44f8c921 ]
    
    Because driver has enum type permissions and iommu subsystem has bitmap
    type, we have to be careful how check for combined read and write
    permissions is done. In such case, we have to mask both permissions and
    check that both are set at the same time.
    
    Current code just masks both flags but doesn't check that both are set.
    In short, it always sets R/W permission, regardles if requested
    permissions were RO, WO or RW. Fix that.
    
    Fixes: 4100b8c229b3 ("iommu: Add Allwinner H6 IOMMU driver")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20221025165415.307591-4-jernej.skrabec@gmail.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a63c4ff57bf0c7b7c1ac1c86b1b546bf95604d6
Author: Jernej Skrabec <jernej.skrabec@gmail.com>
Date:   Tue Oct 25 18:54:12 2022 +0200

    iommu/sun50i: Consider all fault sources for reset
    
    [ Upstream commit cef20703e2b2276aaa402ec5a65ec9a09963b83e ]
    
    We have to reset masters for all faults - permissions, L1 fault or L2
    fault. Currently it's done only for permissions. If other type of fault
    happens, master is in locked up state. Fix that by really considering
    all fault sources.
    
    Fixes: 4100b8c229b3 ("iommu: Add Allwinner H6 IOMMU driver")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20221025165415.307591-3-jernej.skrabec@gmail.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 160b92ab4a253dfb0f7cc03b9c33617e9c530104
Author: Jernej Skrabec <jernej.skrabec@gmail.com>
Date:   Tue Oct 25 18:54:11 2022 +0200

    iommu/sun50i: Fix reset release
    
    [ Upstream commit 9ad0c1252e84dbc664f0462707182245ed603237 ]
    
    Reset signal is asserted by writing 0 to the corresponding locations of
    masters we want to reset. So in order to deassert all reset signals, we
    should write 1's to all locations.
    
    Current code writes 1's to locations of masters which were just reset
    which is good. However, at the same time it also writes 0's to other
    locations and thus asserts reset signals of remaining masters. Fix code
    by writing all 1's when we want to deassert all reset signals.
    
    This bug was discovered when working with Cedrus (video decoder). When
    it faulted, display went blank due to reset signal assertion.
    
    Fixes: 4100b8c229b3 ("iommu: Add Allwinner H6 IOMMU driver")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20221025165415.307591-2-jernej.skrabec@gmail.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aeef93416c0954fd8c057342bd6a1a0303ccc4c0
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 15 18:03:43 2022 +0100

    RDMA/siw: Fix pointer cast warning
    
    [ Upstream commit 5244ca88671a1981ceec09c5c8809f003e6a62aa ]
    
    The previous build fix left a remaining issue in configurations with
    64-bit dma_addr_t on 32-bit architectures:
    
    drivers/infiniband/sw/siw/siw_qp_tx.c: In function 'siw_get_pblpage':
    drivers/infiniband/sw/siw/siw_qp_tx.c:32:37: error: cast to pointer from integer of different size [-Werror=int-to-pointer-cast]
       32 |                 return virt_to_page((void *)paddr);
          |                                     ^
    
    Use the same double cast here that the driver uses elsewhere to convert
    between dma_addr_t and void*.
    
    Fixes: 0d1b756acf60 ("RDMA/siw: Pass a pointer to virt_to_page()")
    Link: https://lore.kernel.org/r/20221215170347.2612403-1-arnd@kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Bernard Metzler <bmt@zurich.ibm.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5beadb55f4e36fafe5d6df5dcd5f85d803f3f134
Author: ruanjinjie <ruanjinjie@huawei.com>
Date:   Mon Dec 5 15:51:53 2022 +0800

    power: supply: fix null pointer dereferencing in power_supply_get_battery_info
    
    [ Upstream commit 104bb8a663451404a26331263ce5b96c34504049 ]
    
    when kmalloc() fail to allocate memory in kasprintf(), propname
    will be NULL, strcmp() called by of_get_property() will cause
    null pointer dereference.
    
    So return ENOMEM if kasprintf() return NULL pointer.
    
    Fixes: 3afb50d7125b ("power: supply: core: Add some helpers to use the battery OCV capacity table")
    Signed-off-by: ruanjinjie <ruanjinjie@huawei.com>
    Reviewed-by: Baolin Wang <baolin.wang@linux.alibaba.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72283ecfdc84cabe544cb5b007afd8db9fbe6623
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 24 11:33:32 2022 +0000

    HSI: omap_ssi_core: Fix error handling in ssi_init()
    
    [ Upstream commit 3ffa9f713c39a213a08d9ff13ab983a8aa5d8b5d ]
    
    The ssi_init() returns the platform_driver_register() directly without
    checking its return value, if platform_driver_register() failed, the
    ssi_pdriver is not unregistered.
    Fix by unregister ssi_pdriver when the last platform_driver_register()
    failed.
    
    Fixes: 0fae198988b8 ("HSI: omap_ssi: built omap_ssi and omap_ssi_port into one module")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73ca3b19d902492a7aef7cabae58507984e0f963
Author: Ajay Kaher <akaher@vmware.com>
Date:   Wed Nov 23 15:48:16 2022 +0530

    perf symbol: correction while adjusting symbol
    
    [ Upstream commit 6f520ce17920b3cdfbd2479b3ccf27f9706219d0 ]
    
    perf doesn't provide proper symbol information for specially crafted
    .debug files.
    
    Sometimes .debug file may not have similar program header as runtime
    ELF file. For example if we generate .debug file using objcopy
    --only-keep-debug resulting file will not contain .text, .data and
    other runtime sections. That means corresponding program headers will
    have zero FileSiz and modified Offset.
    
    Example: program header of text section of libxxx.so:
    
    Type           Offset             VirtAddr           PhysAddr
                   FileSiz            MemSiz              Flags  Align
    LOAD        0x00000000003d3000 0x00000000003d3000 0x00000000003d3000
                0x000000000055ae80 0x000000000055ae80  R E    0x1000
    
    Same program header after executing:
    objcopy --only-keep-debug libxxx.so libxxx.so.debug
    
    LOAD        0x0000000000001000 0x00000000003d3000 0x00000000003d3000
                0x0000000000000000 0x000000000055ae80  R E    0x1000
    
    Offset and FileSiz have been changed.
    
    Following formula will not provide correct value, if program header
    taken from .debug file (syms_ss):
    
        sym.st_value -= phdr.p_vaddr - phdr.p_offset;
    
    Correct program header information is located inside runtime ELF
    file (runtime_ss).
    
    Fixes: 2d86612aacb7805f ("perf symbol: Correct address for bss symbols")
    Signed-off-by: Ajay Kaher <akaher@vmware.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexey Makhalov <amakhalov@vmware.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Srivatsa S. Bhat <srivatsab@vmware.com>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Vasavi Sirnapalli <vsirnapalli@vmware.com>
    Link: http://lore.kernel.org/lkml/1669198696-50547-1-git-send-email-akaher@vmware.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8e77bd7499f51b7378bc36fe43dc1c9d5fa4e16
Author: Leo Yan <leo.yan@linaro.org>
Date:   Mon Nov 21 07:52:35 2022 +0000

    perf trace: Handle failure when trace point folder is missed
    
    [ Upstream commit 03e9a5d8eb552a1bf692a9c8a5ecd50f4e428006 ]
    
    On Arm64 a case is perf tools fails to find the corresponding trace
    point folder for system calls listed in the table 'syscalltbl_arm64',
    e.g. the generated system call table contains "lookup_dcookie" but we
    cannot find out the matched trace point folder for it.
    
    We need to figure out if there have any issue for the generated system
    call table, on the other hand, we need to handle the case when trace
    point folder is missed under sysfs, this patch sets the flag
    syscall::nonexistent as true and returns the error from
    trace__read_syscall_info().
    
    Another problem is for trace__syscall_info(), it returns two different
    values if a system call doesn't exist: at the first time calling
    trace__syscall_info() it returns NULL when the system call doesn't exist,
    later if call trace__syscall_info() again for the same missed system
    call, it returns pointer of syscall.  trace__syscall_info() checks the
    condition 'syscalls.table[id].name == NULL', but the name will be
    assigned in the first invoking even the system call is not found.
    
    So checking system call's name in trace__syscall_info() is not the right
    thing to do, this patch simply checks flag syscall::nonexistent to make
    decision if a system call exists or not, finally trace__syscall_info()
    returns the consistent result (NULL) if a system call doesn't existed.
    
    Fixes: b8b1033fcaa091d8 ("perf trace: Mark syscall ids that are not allocated to avoid unnecessary error messages")
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Acked-by: Ian Rogers <irogers@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: bpf@vger.kernel.org
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20221121075237.127706-4-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd29da58046aa772c775548ee6f502cc5f3aa489
Author: Leo Yan <leo.yan@linaro.org>
Date:   Mon Nov 21 07:52:33 2022 +0000

    perf trace: Use macro RAW_SYSCALL_ARGS_NUM to replace number
    
    [ Upstream commit eadcab4c7a66e1df03d32da0db55d89fd9343fcc ]
    
    This patch defines a macro RAW_SYSCALL_ARGS_NUM to replace the open
    coded number '6'.
    
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Acked-by: Ian Rogers <irogers@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: bpf@vger.kernel.org
    Link: https://lore.kernel.org/r/20221121075237.127706-2-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Stable-dep-of: 03e9a5d8eb55 ("perf trace: Handle failure when trace point folder is missed")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6364577ae225ddec98e36f5db6d40b2dedb84ea7
Author: Leo Yan <leo.yan@linaro.org>
Date:   Mon Nov 21 07:52:34 2022 +0000

    perf trace: Return error if a system call doesn't exist
    
    [ Upstream commit d4223e1776c30b2ce8d0e6eaadcbf696e60fca3c ]
    
    When a system call is not detected, the reason is either because the
    system call ID is out of scope or failure to find the corresponding path
    in the sysfs, trace__read_syscall_info() returns zero.  Finally, without
    returning an error value it introduces confusion for the caller.
    
    This patch lets the function trace__read_syscall_info() to return
    -EEXIST when a system call doesn't exist.
    
    Fixes: b8b1033fcaa091d8 ("perf trace: Mark syscall ids that are not allocated to avoid unnecessary error messages")
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Acked-by: Ian Rogers <irogers@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: bpf@vger.kernel.org
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20221121075237.127706-3-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d6d90994a8d32e44b89b5e62a78d9fd50686772
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Thu Nov 17 16:32:19 2022 +0800

    power: supply: fix residue sysfs file in error handle route of __power_supply_register()
    
    [ Upstream commit 5b79480ce1978864ac3f06f2134dfa3b6691fe74 ]
    
    If device_add() succeeds, we should call device_del() when want to
    get rid of it, so move it into proper jump symbol.
    
    Otherwise, when __power_supply_register() returns fail and goto
    wakeup_init_failed to exit, there is still residue device file in sysfs.
    When attempt to probe device again, sysfs would complain as below:
    
    sysfs: cannot create duplicate filename '/devices/platform/i2c/i2c-0/0-001c/power_supply/adp5061'
    Call Trace:
     dump_stack_lvl+0x68/0x85
     sysfs_warn_dup.cold+0x1c/0x29
     sysfs_create_dir_ns+0x1b1/0x1d0
     kobject_add_internal+0x143/0x390
     kobject_add+0x108/0x170
    
    Fixes: 80c6463e2fa3 ("power_supply: Fix Oops from NULL pointer dereference from wakeup_source_activate")
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2eb995abb90d07a43e9d5cdc22fd0a41ccf174
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 31 15:43:37 2022 +0800

    HSI: omap_ssi_core: fix possible memory leak in ssi_probe()
    
    [ Upstream commit 1aff514e1d2bd47854dbbdf867970b9d463d4c57 ]
    
    If ssi_add_controller() returns error, it should call hsi_put_controller()
    to give up the reference that was set in hsi_alloc_controller(), so that
    it can call hsi_controller_release() to free controller and ports that
    allocated in hsi_alloc_controller().
    
    Fixes: b209e047bc74 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ba4b00f8837f8c10407119ea887d7ecf9864938
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 11:41:18 2022 +0800

    HSI: omap_ssi_core: fix unbalanced pm_runtime_disable()
    
    [ Upstream commit f5181c35ed7ba0ceb6e42872aad1334d994b0175 ]
    
    In error label 'out1' path in ssi_probe(), the pm_runtime_enable()
    has not been called yet, so pm_runtime_disable() is not needed.
    
    Fixes: b209e047bc74 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee13e2aec330f47262692a9f0bed5924c0bb3394
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 10 12:35:22 2022 +0100

    fbdev: uvesafb: Fixes an error handling path in uvesafb_probe()
    
    [ Upstream commit a94371040712031ba129c7e9d8ff04a06a2f8207 ]
    
    If an error occurs after a successful uvesafb_init_mtrr() call, it must be
    undone by a corresponding arch_phys_wc_del() call, as already done in the
    remove function.
    
    This has been added in the remove function in commit 63e28a7a5ffc
    ("uvesafb: Clean up MTRR code")
    
    Fixes: 8bdb3a2d7df4 ("uvesafb: the driver core")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 164857bc0223e287d6332a47d90f5c44daa0f5c3
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Mon Nov 14 16:56:54 2022 +0800

    fbdev: vermilion: decrease reference count in error path
    
    [ Upstream commit 001f2cdb952a9566c77fb4b5470cc361db5601bb ]
    
    pci_get_device() will increase the reference count for the returned
    pci_dev. For the error path, we need to use pci_dev_put() to decrease
    the reference count.
    
    Fixes: dbe7e429fedb ("vmlfb: framebuffer driver for Intel Vermilion Range")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71bca42bc44f7141f39d4f3f240e6d2aeb245e3c
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Mon Nov 14 09:08:52 2022 +0800

    fbdev: via: Fix error in via_core_init()
    
    [ Upstream commit 5886b130de953cfb8826f7771ec8640a79934a7f ]
    
    via_core_init() won't exit the driver when pci_register_driver() failed.
    Exit the viafb-i2c and the viafb-gpio in failed path to prevent error.
    
    VIA Graphics Integration Chipset framebuffer 2.4 initializing
    Error: Driver 'viafb-i2c' is already registered, aborting...
    Error: Driver 'viafb-gpio' is already registered, aborting...
    
    Fixes: 7582eb9be85f ("viafb: Turn GPIO and i2c into proper platform devices")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3922415e4c3f03baddfc756e66aabaa9e2f4d798
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Nov 12 17:55:10 2022 +0800

    fbdev: pm2fb: fix missing pci_disable_device()
    
    [ Upstream commit ed359a464846b48f76ea6cc5cd8257e545ac97f4 ]
    
    Add missing pci_disable_device() in error path of probe() and remove() path.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f279a7af799d2e783ac8b48c059ff5e95f21561a
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Nov 1 17:09:46 2022 +0200

    fbdev: ssd1307fb: Drop optional dependency
    
    [ Upstream commit 025e3b507a3a8e1ee96a3112bb67495c77d6cdb6 ]
    
    Only a single out of three devices need a PWM, so from driver it's
    optional. Moreover it's a single driver in the entire kernel that
    currently selects PWM. Unfortunately this selection is a root cause
    of the circular dependencies when we want to enable optional PWM
    for some other drivers that select GPIOLIB.
    
    Fixes: a2ed00da5047 ("drivers/video: add support for the Solomon SSD1307 OLED Controller")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c56c1449ccc3e40614e5941e96caf405da224362
Author: Marcus Folkesson <marcus.folkesson@gmail.com>
Date:   Fri Oct 14 09:35:07 2022 +0200

    thermal/drivers/imx8mm_thermal: Validate temperature range
    
    [ Upstream commit d37edc7370273306d8747097fafa62436c1cfe16 ]
    
    Check against the upper temperature limit (125 degrees C) before
    consider the temperature valid.
    
    Fixes: 5eed800a6811 ("thermal: imx8mm: Add support for i.MX8MM thermal monitoring unit")
    Signed-off-by: Marcus Folkesson <marcus.folkesson@gmail.com>
    Reviewed-by: Jacky Bai <ping.bai@nxp.com>
    Link: https://lore.kernel.org/r/20221014073507.1594844-1-marcus.folkesson@gmail.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86fa7bb4e2d562714555eb48f7129e92fc4bb975
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Dec 8 09:33:41 2022 +0800

    samples: vfio-mdev: Fix missing pci_disable_device() in mdpy_fb_probe()
    
    [ Upstream commit d1f0f50fbbbbca1e3e8157e51934613bf88f6d44 ]
    
    Add missing pci_disable_device() in fail path of mdpy_fb_probe().
    Besides, fix missing release functions in mdpy_fb_remove().
    
    Fixes: cacade1946a4 ("sample: vfio mdev display - guest driver")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Link: https://lore.kernel.org/r/20221208013341.3999-1-shangxiaojing@huawei.com
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 962f869b36789591c4c71a8bb5e8f971d623d808
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Dec 7 21:53:26 2022 +0800

    tracing/hist: Fix issue of losting command info in error_log
    
    [ Upstream commit 608c6ed3337850c767ab0dd6c583477922233e29 ]
    
    When input some constructed invalid 'trigger' command, command info
    in 'error_log' are lost [1].
    
    The root cause is that there is a path that event_hist_trigger_parse()
    is recursely called once and 'last_cmd' which save origin command is
    cleared, then later calling of hist_err() will no longer record origin
    command info:
    
      event_hist_trigger_parse() {
        last_cmd_set()  // <1> 'last_cmd' save origin command here at first
        create_actions() {
          onmatch_create() {
            action_create() {
              trace_action_create() {
                trace_action_create_field_var() {
                  create_field_var_hist() {
                    event_hist_trigger_parse() {  // <2> recursely called once
                      hist_err_clear()  // <3> 'last_cmd' is cleared here
                    }
                    hist_err()  // <4> No longer find origin command!!!
    
    Since 'glob' is empty string while running into the recurse call, we
    can trickly check it and bypass the call of hist_err_clear() to solve it.
    
    [1]
     # cd /sys/kernel/tracing
     # echo "my_synth_event int v1; int v2; int v3;" >> synthetic_events
     # echo 'hist:keys=pid' >> events/sched/sched_waking/trigger
     # echo "hist:keys=next_pid:onmatch(sched.sched_waking).my_synth_event(\
    pid,pid1)" >> events/sched/sched_switch/trigger
     # cat error_log
    [  8.405018] hist:sched:sched_switch: error: Couldn't find synthetic event
      Command:
    hist:keys=next_pid:onmatch(sched.sched_waking).my_synth_event(pid,pid1)
                                                              ^
    [  8.816902] hist:sched:sched_switch: error: Couldn't find field
      Command:
    hist:keys=next_pid:onmatch(sched.sched_waking).my_synth_event(pid,pid1)
                              ^
    [  8.816902] hist:sched:sched_switch: error: Couldn't parse field variable
      Command:
    hist:keys=next_pid:onmatch(sched.sched_waking).my_synth_event(pid,pid1)
                              ^
    [  8.999880] : error: Couldn't find field
      Command:
               ^
    [  8.999880] : error: Couldn't parse field variable
      Command:
               ^
    [  8.999880] : error: Couldn't find field
      Command:
               ^
    [  8.999880] : error: Couldn't create histogram for field
      Command:
               ^
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221207135326.3483216-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Fixes: f404da6e1d46 ("tracing: Add 'last error' error facility for hist triggers")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7bf15aa197314c1adfcef5894385c0f2557bb8c
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Dec 8 19:00:58 2022 +0800

    usb: storage: Add check for kcalloc
    
    [ Upstream commit c35ca10f53c51eeb610d3f8fbc6dd6d511b58a58 ]
    
    As kcalloc may return NULL pointer, the return value should
    be checked and return error if fails as same as the ones in
    alauda_read_map.
    
    Fixes: e80b0fade09e ("[PATCH] USB Storage: add alauda support")
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Link: https://lore.kernel.org/r/20221208110058.12983-1-jiasheng@iscas.ac.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ac541a0898e8ec187a3fa7024b9701cffae6bf2
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Fri Jul 29 19:02:16 2022 +0800

    i2c: ismt: Fix an out-of-bounds bug in ismt_access()
    
    [ Upstream commit 39244cc754829bf707dccd12e2ce37510f5b1f8d ]
    
    When the driver does not check the data from the user, the variable
    'data->block[0]' may be very large to cause an out-of-bounds bug.
    
    The following log can reveal it:
    
    [   33.995542] i2c i2c-1: ioctl, cmd=0x720, arg=0x7ffcb3dc3a20
    [   33.995978] ismt_smbus 0000:00:05.0: I2C_SMBUS_BLOCK_DATA:  WRITE
    [   33.996475] ==================================================================
    [   33.996995] BUG: KASAN: out-of-bounds in ismt_access.cold+0x374/0x214b
    [   33.997473] Read of size 18446744073709551615 at addr ffff88810efcfdb1 by task ismt_poc/485
    [   33.999450] Call Trace:
    [   34.001849]  memcpy+0x20/0x60
    [   34.002077]  ismt_access.cold+0x374/0x214b
    [   34.003382]  __i2c_smbus_xfer+0x44f/0xfb0
    [   34.004007]  i2c_smbus_xfer+0x10a/0x390
    [   34.004291]  i2cdev_ioctl_smbus+0x2c8/0x710
    [   34.005196]  i2cdev_ioctl+0x5ec/0x74c
    
    Fix this bug by checking the size of 'data->block[0]' first.
    
    Fixes: 13f35ac14cd0 ("i2c: Adding support for Intel iSMT SMBus 2.0 host controller")
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61df25c41b8e0d2c988ccf17139f70075a2e1ba4
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 17:38:25 2022 +0800

    i2c: mux: reg: check return value after calling platform_get_resource()
    
    [ Upstream commit 2d47b79d2bd39cc6369eccf94a06568d84c906ae ]
    
    It will cause null-ptr-deref in resource_size(), if platform_get_resource()
    returns NULL, move calling resource_size() after devm_ioremap_resource() that
    will check 'res' to avoid null-ptr-deref.
    And use devm_platform_get_and_ioremap_resource() to simplify code.
    
    Fixes: b3fdd32799d8 ("i2c: mux: Add register-based mux i2c-mux-reg")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d79546622baab843172b52c3af035f83c1b21df
Author: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
Date:   Mon Dec 5 13:39:02 2022 +0100

    gpiolib: cdev: fix NULL-pointer dereferences
    
    [ Upstream commit 533aae7c94dbc2b14301cfd68ae7e0e90f0c8438 ]
    
    There are several places where we can crash the kernel by requesting
    lines, unbinding the GPIO device, then calling any of the system calls
    relevant to the GPIO character device's annonymous file descriptors:
    ioctl(), read(), poll().
    
    While I observed it with the GPIO simulator, it will also happen for any
    of the GPIO devices that can be hot-unplugged - for instance any HID GPIO
    expander (e.g. CP2112).
    
    This affects both v1 and v2 uAPI.
    
    This fixes it partially by checking if gdev->chip is not NULL but it
    doesn't entirely remedy the situation as we still have a race condition
    in which another thread can remove the device after the check.
    
    Fixes: d7c51b47ac11 ("gpio: userspace ABI for reading/writing GPIO lines")
    Fixes: 3c0d9c635ae2 ("gpiolib: cdev: support GPIO_V2_GET_LINE_IOCTL and GPIO_V2_LINE_GET_VALUES_IOCTL")
    Fixes: aad955842d1c ("gpiolib: cdev: support GPIO_V2_GET_LINEINFO_IOCTL and GPIO_V2_GET_LINEINFO_WATCH_IOCTL")
    Fixes: a54756cb24ea ("gpiolib: cdev: support GPIO_V2_LINE_SET_CONFIG_IOCTL")
    Fixes: 7b8e00d98168 ("gpiolib: cdev: support GPIO_V2_LINE_SET_VALUES_IOCTL")
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aeee7ad0897f83721a8213df85010c77927c705b
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Mar 30 18:06:20 2022 +0300

    gpiolib: Get rid of redundant 'else'
    
    [ Upstream commit 1cef8b5019769d46725932eeace7a383bca97905 ]
    
    In the snippets like the following
    
            if (...)
                    return / goto / break / continue ...;
            else
                    ...
    
    the 'else' is redundant. Get rid of it. In case of IOCTLs use
    switch-case pattern that seems the usual in such cases.
    
    While at it, clarify necessity of else in gpiod_direction_output()
    by attaching else if to the closing curly brace on a previous line.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Stable-dep-of: 533aae7c94db ("gpiolib: cdev: fix NULL-pointer dereferences")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37d3de40c1ffb6a5e626bf46ff5ef5766c824e2c
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Mon Dec 5 16:48:05 2022 +0800

    vme: Fix error not catched in fake_init()
    
    [ Upstream commit 7bef797d707f1744f71156b21d41e3b8c946631f ]
    
    In fake_init(), __root_device_register() is possible to fail but it's
    ignored, which can cause unregistering vme_root fail when exit.
    
     general protection fault,
     probably for non-canonical address 0xdffffc000000008c
     KASAN: null-ptr-deref in range [0x0000000000000460-0x0000000000000467]
     RIP: 0010:root_device_unregister+0x26/0x60
     Call Trace:
      <TASK>
      __x64_sys_delete_module+0x34f/0x540
      do_syscall_64+0x38/0x90
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Return error when __root_device_register() fails.
    
    Fixes: 658bcdae9c67 ("vme: Adding Fake VME driver")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221205084805.147436-1-chenzhongjin@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9fa01fb3140f1e2a7989a4b4ab86296f8b9c064
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Nov 23 16:12:53 2022 +0800

    staging: rtl8192e: Fix potential use-after-free in rtllib_rx_Monitor()
    
    [ Upstream commit d30f4436f364b4ad915ca2c09be07cd0f93ceb44 ]
    
    The skb is delivered to netif_rx() in rtllib_monitor_rx(), which may free it,
    after calling this, dereferencing skb may trigger use-after-free.
    Found by Smatch.
    
    Fixes: 94a799425eee ("From: wlanfae <wlanfae@realtek.com> [PATCH 1/8] rtl8192e: Import new version of driver from realtek")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221123081253.22296-1-yuehaibing@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit daa8045a991363ccdae5615d170f35aa1135e7a7
Author: Dan Carpenter <error27@gmail.com>
Date:   Wed Nov 23 09:43:14 2022 +0300

    staging: rtl8192u: Fix use after free in ieee80211_rx()
    
    [ Upstream commit bcc5e2dcf09089b337b76fc1a589f6ff95ca19ac ]
    
    We cannot dereference the "skb" pointer after calling
    ieee80211_monitor_rx(), because it is a use after free.
    
    Fixes: 8fc8598e61f6 ("Staging: Added Realtek rtl8192u driver to staging")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Link: https://lore.kernel.org/r/Y33BArx3k/aw6yv/@kili
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46b3885c8cb4e5c9dd0d01ef2b22468a2a962cf1
Author: Hui Tang <tanghui20@huawei.com>
Date:   Mon Nov 14 17:25:40 2022 +0800

    i2c: pxa-pci: fix missing pci_disable_device() on error in ce4100_i2c_probe
    
    [ Upstream commit d78a167332e1ca8113268ed922c1212fd71b73ad ]
    
    Using pcim_enable_device() to avoid missing pci_disable_device().
    
    Fixes: 7e94dd154e93 ("i2c-pxa2xx: Add PCI support for PXA I2C controller")
    Signed-off-by: Hui Tang <tanghui20@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c46db6088bccff5115674d583fef46ede80077a2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Dec 2 11:02:37 2022 +0800

    chardev: fix error handling in cdev_device_add()
    
    [ Upstream commit 11fa7fefe3d8fac7da56bc9aa3dd5fb3081ca797 ]
    
    While doing fault injection test, I got the following report:
    
    ------------[ cut here ]------------
    kobject: '(null)' (0000000039956980): is not initialized, yet kobject_put() is being called.
    WARNING: CPU: 3 PID: 6306 at kobject_put+0x23d/0x4e0
    CPU: 3 PID: 6306 Comm: 283 Tainted: G        W          6.1.0-rc2-00005-g307c1086d7c9 #1253
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
    RIP: 0010:kobject_put+0x23d/0x4e0
    Call Trace:
     <TASK>
     cdev_device_add+0x15e/0x1b0
     __iio_device_register+0x13b4/0x1af0 [industrialio]
     __devm_iio_device_register+0x22/0x90 [industrialio]
     max517_probe+0x3d8/0x6b4 [max517]
     i2c_device_probe+0xa81/0xc00
    
    When device_add() is injected fault and returns error, if dev->devt is not set,
    cdev_add() is not called, cdev_del() is not needed. Fix this by checking dev->devt
    in error path.
    
    Fixes: 233ed09d7fda ("chardev: add helper function to register char devs with a struct device")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221202030237.520280-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b289b791a59386dc23a00d3cf17a0db984b40d3
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Dec 2 01:38:50 2022 -0800

    mcb: mcb-parse: fix error handing in chameleon_parse_gdd()
    
    [ Upstream commit 728ac3389296caf68638628c987aeae6c8851e2d ]
    
    If mcb_device_register() returns error in chameleon_parse_gdd(), the refcount
    of bus and device name are leaked. Fix this by calling put_device() to give up
    the reference, so they can be released in mcb_release_dev() and kobject_cleanup().
    
    Fixes: 3764e82e5150 ("drivers: Introduce MEN Chameleon Bus")
    Reviewed-by: Johannes Thumshirn <jth@kernel.org>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Link: https://lore.kernel.org/r/ebfb06e39b19272f0197fa9136b5e4b6f34ad732.1669624063.git.johannes.thumshirn@wdc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d1c2c8db28919c4351000d7c1692f1767bdc4f7
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Fri Dec 2 01:38:49 2022 -0800

    drivers: mcb: fix resource leak in mcb_probe()
    
    [ Upstream commit d7237462561fcd224fa687c56ccb68629f50fc0d ]
    
    When probe hook function failed in mcb_probe(), it doesn't put the device.
    Compiled test only.
    
    Fixes: 7bc364097a89 ("mcb: Acquire reference to device in probe")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Link: https://lore.kernel.org/r/9f87de36bfb85158b506cb78c6fc9db3f6a3bad1.1669624063.git.johannes.thumshirn@wdc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e88b89a096af0001bcff6bf7ad2feb1486487173
Author: John Keeping <john@metanate.com>
Date:   Tue Nov 22 12:35:22 2022 +0000

    usb: gadget: f_hid: fix refcount leak on error path
    
    [ Upstream commit 70a3288a7586526315105c699b687d78cd32559a ]
    
    When failing to allocate report_desc, opts->refcnt has already been
    incremented so it needs to be decremented to avoid leaving the options
    structure permanently locked.
    
    Fixes: 21a9476a7ba8 ("usb: gadget: hid: add configfs support")
    Tested-by: Lee Jones <lee@kernel.org>
    Reviewed-by: Andrzej Pietrasiewicz <andrzej.p@collabora.com>
    Reviewed-by: Lee Jones <lee@kernel.org>
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20221122123523.3068034-3-john@metanate.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b6a53e447ec3d81623610c8c7ec5082b47dfdce
Author: John Keeping <john@metanate.com>
Date:   Tue Nov 22 12:35:21 2022 +0000

    usb: gadget: f_hid: fix f_hidg lifetime vs cdev
    
    [ Upstream commit 89ff3dfac604614287ad5aad9370c3f984ea3f4b ]
    
    The embedded struct cdev does not have its lifetime correctly tied to
    the enclosing struct f_hidg, so there is a use-after-free if /dev/hidgN
    is held open while the gadget is deleted.
    
    This can readily be replicated with libusbgx's example programs (for
    conciseness - operating directly via configfs is equivalent):
    
            gadget-hid
            exec 3<> /dev/hidg0
            gadget-vid-pid-remove
            exec 3<&-
    
    Pull the existing device up in to struct f_hidg and make use of the
    cdev_device_{add,del}() helpers.  This changes the lifetime of the
    device object to match struct f_hidg, but note that it is still added
    and deleted at the same time.
    
    Fixes: 71adf1189469 ("USB: gadget: add HID gadget driver")
    Tested-by: Lee Jones <lee@kernel.org>
    Reviewed-by: Andrzej Pietrasiewicz <andrzej.p@collabora.com>
    Reviewed-by: Lee Jones <lee@kernel.org>
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20221122123523.3068034-2-john@metanate.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52302c30b2186b37158e251560338074a44210cc
Author: Maxim Devaev <mdevaev@gmail.com>
Date:   Sat Aug 21 16:40:04 2021 +0300

    usb: gadget: f_hid: optional SETUP/SET_REPORT mode
    
    [ Upstream commit d7428bc26fc767942c38d74b80299bcd4f01e7cb ]
    
    f_hid provides the OUT Endpoint as only way for receiving reports
    from the host. SETUP/SET_REPORT method is not supported, and this causes
    a number of compatibility problems with various host drivers, especially
    in the case of keyboard emulation using f_hid.
    
      - Some hosts do not support the OUT Endpoint and ignore it,
        so it becomes impossible for the gadget to receive a report
        from the host. In the case of a keyboard, the gadget loses
        the ability to receive the status of the LEDs.
    
      - Some BIOSes/UEFIs can't work with HID devices with the OUT Endpoint
        at all. This may be due to their bugs or incomplete implementation
        of the HID standard.
        For example, absolutely all Apple UEFIs can't handle the OUT Endpoint
        if it goes after IN Endpoint in the descriptor and require the reverse
        order (OUT, IN) which is a violation of the standard.
        Other hosts either do not initialize gadgets with a descriptor
        containing the OUT Endpoint completely (like some HP and DELL BIOSes
        and embedded firmwares like on KVM switches), or initialize them,
        but will not poll the IN Endpoint.
    
    This patch adds configfs option no_out_endpoint=1 to disable
    the OUT Endpoint and allows f_hid to receive reports from the host
    via SETUP/SET_REPORT.
    
    Previously, there was such a feature in f_hid, but it was replaced
    by the OUT Endpoint [1] in the commit 99c515005857 ("usb: gadget: hidg:
    register OUT INT endpoint for SET_REPORT"). So this patch actually
    returns the removed functionality while making it optional.
    For backward compatibility reasons, the OUT Endpoint mode remains
    the default behaviour.
    
      - The OUT Endpoint mode provides the report queue and reduces
        USB overhead (eliminating SETUP routine) on transmitting a report
        from the host.
    
      - If the SETUP/SET_REPORT mode is used, there is no report queue,
        so the userspace will only read last report. For classic HID devices
        like keyboards this is not a problem, since it's intended to transmit
        the status of the LEDs and only the last report is important.
        This mode provides better compatibility with strange and buggy
        host drivers.
    
    Both modes passed USBCV tests. Checking with the USB protocol analyzer
    also confirmed that everything is working as it should and the new mode
    ensures operability in all of the described cases.
    
    Link: https://www.spinics.net/lists/linux-usb/msg65494.html [1]
    Reviewed-by: Maciej Żenczykowski <zenczykowski@gmail.com>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Maxim Devaev <mdevaev@gmail.com>
    Link: https://lore.kernel.org/r/20210821134004.363217-1-mdevaev@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 89ff3dfac604 ("usb: gadget: f_hid: fix f_hidg lifetime vs cdev")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3767f81056bc2ccb41f0de49b0716d24167edd2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 22 19:12:26 2022 +0800

    usb: roles: fix of node refcount leak in usb_role_switch_is_parent()
    
    [ Upstream commit 1ab30c610630da5391a373cddb8a065bf4c4bc01 ]
    
    I got the following report while doing device(mt6370-tcpc) load
    test with CONFIG_OF_UNITTEST and CONFIG_OF_DYNAMIC enabled:
    
      OF: ERROR: memory leak, expected refcount 1 instead of 2,
      of_node_get()/of_node_put() unbalanced - destroy cset entry:
      attach overlay node /i2c/pmic@34
    
    The 'parent' returned by fwnode_get_parent() with refcount incremented.
    it needs be put after using.
    
    Fixes: 6fadd72943b8 ("usb: roles: get usb-role-switch from parent")
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221122111226.251588-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07905a92497ca95cc419db7759d4264bfd89efcf
Author: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date:   Wed Nov 23 14:36:09 2022 +0100

    counter: stm32-lptimer-cnt: fix the check on arr and cmp registers update
    
    [ Upstream commit fd5ac974fc25feed084c2d1599d0dddb4e0556bc ]
    
    The ARR (auto reload register) and CMP (compare) registers are
    successively written. The status bits to check the update of these
    registers are polled together with regmap_read_poll_timeout().
    The condition to end the loop may become true, even if one of the register
    isn't correctly updated.
    So ensure both status bits are set before clearing them.
    
    Fixes: d8958824cf07 ("iio: counter: Add support for STM32 LPTimer")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Link: https://lore.kernel.org/r/20221123133609.465614-1-fabrice.gasnier@foss.st.com/
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb5e9402b24e24421ac34af4e267ef855a292102
Author: Ramona Bolboaca <ramona.bolboaca@analog.com>
Date:   Tue Nov 22 10:27:49 2022 +0200

    iio: adis: add '__adis_enable_irq()' implementation
    
    [ Upstream commit 99c05e4283a19a02a256f14100ca4ec3b2da3f62 ]
    
    Add '__adis_enable_irq()' implementation which is the unlocked
    version of 'adis_enable_irq()'.
    Call '__adis_enable_irq()' instead of 'adis_enable_irq()' from
    '__adis_intial_startup()' to keep the expected unlocked functionality.
    
    This fix is needed to remove a deadlock for all devices which are
    using 'adis_initial_startup()'. The deadlock occurs because the
    same mutex is acquired twice, without releasing it.
    The mutex is acquired once inside 'adis_initial_startup()', before
    calling '__adis_initial_startup()', and once inside
    'adis_enable_irq()', which is called by '__adis_initial_startup()'.
    The deadlock is removed by calling '__adis_enable_irq()', instead of
    'adis_enable_irq()' from within '__adis_initial_startup()'.
    
    Fixes: b600bd7eb3335 ("iio: adis: do not disabe IRQs in 'adis_init()'")
    Signed-off-by: Ramona Bolboaca <ramona.bolboaca@analog.com>
    Reviewed-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20221122082757.449452-2-ramona.bolboaca@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3feb8fd8bf936756990047563833cde6d59117fe
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jan 30 20:56:53 2022 +0000

    iio:imu:adis: Move exports into IIO_ADISLIB namespace
    
    [ Upstream commit 6c9304d6af122f9afea41885ad82ed627e9442a8 ]
    
    In order to avoid unneessary pollution of the global symbol namespace
    move the common/library functions into a specific namespace and import
    that into the various specific device drivers that use them.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Song Bao Hua (Barry Song) <song.bao.hua@hisilicon.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20220130205701.334592-9-jic23@kernel.org
    Stable-dep-of: 99c05e4283a1 ("iio: adis: add '__adis_enable_irq()' implementation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83e321a2ec4d7e81e6b043a37607095f12b53079
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Sat Jan 22 14:09:05 2022 +0100

    iio: adis: stylistic changes
    
    [ Upstream commit c39010ea6ba13bdf0003bd353e1d4c663aaac0a8 ]
    
    Minor stylistic changes to address checkptach complains when called with
    '--strict'.
    
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20220122130905.99-3-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 99c05e4283a1 ("iio: adis: add '__adis_enable_irq()' implementation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1b73eebc70defee59236a4ae37477d668c7b67b
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Fri Sep 3 16:14:20 2021 +0200

    iio: adis: handle devices that cannot unmask the drdy pin
    
    [ Upstream commit 31fa357ac809affd9f9a7d0b5d1991951e16beec ]
    
    Some devices can't mask/unmask the data ready pin and in those cases
    each driver was just calling '{dis}enable_irq()' to control the trigger
    state. This change, moves that handling into the library by introducing
    a new boolean in the data structure that tells the library that the
    device cannot unmask the pin.
    
    On top of controlling the trigger state, we can also use this flag to
    automatically request the IRQ with 'IRQF_NO_AUTOEN' in case it is set.
    So far, all users of the library want to start operation with IRQs/DRDY
    pin disabled so it should be fairly safe to do this inside the library.
    
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20210903141423.517028-3-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 99c05e4283a1 ("iio: adis: add '__adis_enable_irq()' implementation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8eb2a679c603a59c7caa3611906597a090001622
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Fri Apr 2 19:45:43 2021 +0100

    iio:imu:adis: Use IRQF_NO_AUTOEN instead of irq request then disable
    
    [ Upstream commit 30f6a542b7d39b1ba990a28a3891bc03691d8d41 ]
    
    This is a bit involved as the adis library code already has some
    sanity checking of the flags of the requested irq that we need
    to ensure is happy to pass through the IRQF_NO_AUTOEN flag untouched.
    
    Using this flag avoids us autoenabling the irq in the adis16460 and
    adis16475 drivers which cover parts that don't have any means of
    masking the interrupt on the device end.
    
    Note, compile tested only!
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: Alexandru Ardelean <ardeleanalex@gmail.com>
    Reviewed-by: Nuno Sa <nuno.sa@analog.com>
    Reviewed-by: Barry Song <song.bao.hua@hisilicon.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
    Link: https://lore.kernel.org/r/20210402184544.488862-7-jic23@kernel.org
    Stable-dep-of: 99c05e4283a1 ("iio: adis: add '__adis_enable_irq()' implementation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50aaa6b1742cb26f718bc72f4196aaf6a4efa7a7
Author: Barry Song <song.bao.hua@hisilicon.com>
Date:   Wed Mar 3 11:49:15 2021 +1300

    genirq: Add IRQF_NO_AUTOEN for request_irq/nmi()
    
    [ Upstream commit cbe16f35bee6880becca6f20d2ebf6b457148552 ]
    
    Many drivers don't want interrupts enabled automatically via request_irq().
    So they are handling this issue by either way of the below two:
    
    (1)
      irq_set_status_flags(irq, IRQ_NOAUTOEN);
      request_irq(dev, irq...);
    
    (2)
      request_irq(dev, irq...);
      disable_irq(irq);
    
    The code in the second way is silly and unsafe. In the small time gap
    between request_irq() and disable_irq(), interrupts can still come.
    
    The code in the first way is safe though it's subobtimal.
    
    Add a new IRQF_NO_AUTOEN flag which can be handed in by drivers to
    request_irq() and request_nmi(). It prevents the automatic enabling of the
    requested interrupt/nmi in the same safe way as #1 above. With that the
    various usage sites of #1 and #2 above can be simplified and corrected.
    
    Signed-off-by: Barry Song <song.bao.hua@hisilicon.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: dmitry.torokhov@gmail.com
    Link: https://lore.kernel.org/r/20210302224916.13980-2-song.bao.hua@hisilicon.com
    Stable-dep-of: 99c05e4283a1 ("iio: adis: add '__adis_enable_irq()' implementation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b22e715bb5bba3ec5844cf5b58a9f6021939698
Author: Cosmin Tanislav <cosmin.tanislav@analog.com>
Date:   Thu Nov 3 15:00:29 2022 +0200

    iio: temperature: ltc2983: make bulk write buffer DMA-safe
    
    [ Upstream commit 5e0176213949724fbe9a8e4a39817edce337b8a0 ]
    
    regmap_bulk_write() does not guarantee implicit DMA-safety,
    even though the current implementation duplicates the given
    buffer. Do not rely on it.
    
    Fixes: f110f3188e56 ("iio: temperature: Add support for LTC2983")
    Signed-off-by: Cosmin Tanislav <cosmin.tanislav@analog.com>
    Link: https://lore.kernel.org/r/20221103130041.2153295-2-demonsingur@gmail.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f63c0ddc2ea20d783d29243f4dbe0f9e95dfdec
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 22:54:40 2022 +0800

    cxl: fix possible null-ptr-deref in cxl_pci_init_afu|adapter()
    
    [ Upstream commit 02cd3032b154fa02fdf90e7467abaeed889330b2 ]
    
    If device_register() fails in cxl_pci_afu|adapter(), the device
    is not added, device_unregister() can not be called in the error
    path, otherwise it will cause a null-ptr-deref because of removing
    not added device.
    
    As comment of device_register() says, it should use put_device() to give
    up the reference in the error path. So split device_unregister() into
    device_del() and put_device(), then goes to put dev when register fails.
    
    Fixes: f204e0b8cedd ("cxl: Driver code for powernv PCIe based cards for userspace access")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221111145440.2426970-2-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 170e8c2d2b61e15e7f7cfeded81bc1e959a15ed8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 22:54:39 2022 +0800

    cxl: fix possible null-ptr-deref in cxl_guest_init_afu|adapter()
    
    [ Upstream commit 61c80d1c3833e196256fb060382db94f24d3d9a7 ]
    
    If device_register() fails in cxl_register_afu|adapter(), the device
    is not added, device_unregister() can not be called in the error path,
    otherwise it will cause a null-ptr-deref because of removing not added
    device.
    
    As comment of device_register() says, it should use put_device() to give
    up the reference in the error path. So split device_unregister() into
    device_del() and put_device(), then goes to put dev when register fails.
    
    Fixes: 14baf4d9c739 ("cxl: Add guest-specific code")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221111145440.2426970-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d34742245e4366579f9a80f8cfe4a63248e838e0
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 17 15:06:36 2022 +0800

    firmware: raspberrypi: fix possible memory leak in rpi_firmware_probe()
    
    [ Upstream commit 7b51161696e803fd5f9ad55b20a64c2df313f95c ]
    
    In rpi_firmware_probe(), if mbox_request_channel() fails, the 'fw' will
    not be freed through rpi_firmware_delete(), fix this leak by calling
    kfree() in the error path.
    
    Fixes: 1e7c57355a3b ("firmware: raspberrypi: Keep count of all consumers")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221117070636.3849773-1-yangyingliang@huawei.com
    Acked-by: Joel Savitz <jsavitz@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f67ed565f20ea2fdd98e3b0b0169d9e580bb83c
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Thu Nov 10 11:50:33 2022 +0800

    misc: sgi-gru: fix use-after-free error in gru_set_context_option, gru_fault and gru_handle_user_call_os
    
    [ Upstream commit 643a16a0eb1d6ac23744bb6e90a00fc21148a9dc ]
    
    In some bad situation, the gts may be freed gru_check_chiplet_assignment.
    The call chain can be gru_unload_context->gru_free_gru_context->gts_drop
    and kfree finally. However, the caller didn't know if the gts is freed
    or not and use it afterwards. This will trigger a Use after Free bug.
    
    Fix it by introducing a return value to see if it's in error path or not.
    Free the gts in caller if gru_check_chiplet_assignment check failed.
    
    Fixes: 55484c45dbec ("gru: allow users to specify gru chiplet 2")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Acked-by: Dimitri Sivanich <sivanich@hpe.com>
    Link: https://lore.kernel.org/r/20221110035033.19498-1-zyytlz.wz@163.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57c857353d5020bdec8284d9c0fee447484fe5e0
Author: ruanjinjie <ruanjinjie@huawei.com>
Date:   Thu Nov 17 14:47:25 2022 +0800

    misc: tifm: fix possible memory leak in tifm_7xx1_switch_media()
    
    [ Upstream commit fd2c930cf6a5b9176382c15f9acb1996e76e25ad ]
    
    If device_register() returns error in tifm_7xx1_switch_media(),
    name of kobject which is allocated in dev_set_name() called in device_add()
    is leaked.
    
    Never directly free @dev after calling device_register(), even
    if it returned an error! Always use put_device() to give up the
    reference initialized.
    
    Fixes: 2428a8fe2261 ("tifm: move common device management tasks from tifm_7xx1 to tifm_core")
    Signed-off-by: ruanjinjie <ruanjinjie@huawei.com>
    Link: https://lore.kernel.org/r/20221117064725.3478402-1-ruanjinjie@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a40e1b0a922a53fa925ea8b296e3de30a31ed028
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 21 23:43:39 2022 +0800

    ocxl: fix pci device refcount leak when calling get_function_0()
    
    [ Upstream commit 27158c72678b39ee01cc01de1aba6b51c71abe2f ]
    
    get_function_0() calls pci_get_domain_bus_and_slot(), as comment
    says, it returns a pci device with refcount increment, so after
    using it, pci_dev_put() needs be called.
    
    Get the device reference when get_function_0() is not called, so
    pci_dev_put() can be called in the error path and callers
    unconditionally. And add comment above get_dvsec_vendor0() to tell
    callers to call pci_dev_put().
    
    Fixes: 87db7579ebd5 ("ocxl: control via sysfs whether the FPGA is reloaded on a link reset")
    Suggested-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221121154339.4088935-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7525741cb302a1672b8c3a5edb2a08e4229b5c7c
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 22:59:29 2022 +0800

    misc: ocxl: fix possible name leak in ocxl_file_register_afu()
    
    [ Upstream commit a4cb1004aeed2ab893a058fad00a5b41a12c4691 ]
    
    If device_register() returns error in ocxl_file_register_afu(),
    the name allocated by dev_set_name() need be freed. As comment
    of device_register() says, it should use put_device() to give
    up the reference in the error path. So fix this by calling
    put_device(), then the name can be freed in kobject_cleanup(),
    and info is freed in info_release().
    
    Fixes: 75ca758adbaf ("ocxl: Create a clear delineation between ocxl backend & frontend")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Link: https://lore.kernel.org/r/20221111145929.2429271-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b5a89e8bce1ea43687742b4de8e216189ff94ac
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Sat Nov 19 11:57:21 2022 +0800

    test_firmware: fix memory leak in test_firmware_init()
    
    [ Upstream commit 7610615e8cdb3f6f5bbd9d8e7a5d8a63e3cabf2e ]
    
    When misc_register() failed in test_firmware_init(), the memory pointed
    by test_fw_config->name is not released. The memory leak information is
    as follows:
    unreferenced object 0xffff88810a34cb00 (size 32):
      comm "insmod", pid 7952, jiffies 4294948236 (age 49.060s)
      hex dump (first 32 bytes):
        74 65 73 74 2d 66 69 72 6d 77 61 72 65 2e 62 69  test-firmware.bi
        6e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  n...............
      backtrace:
        [<ffffffff81b21fcb>] __kmalloc_node_track_caller+0x4b/0xc0
        [<ffffffff81affb96>] kstrndup+0x46/0xc0
        [<ffffffffa0403a49>] __test_firmware_config_init+0x29/0x380 [test_firmware]
        [<ffffffffa040f068>] 0xffffffffa040f068
        [<ffffffff81002c41>] do_one_initcall+0x141/0x780
        [<ffffffff816a72c3>] do_init_module+0x1c3/0x630
        [<ffffffff816adb9e>] load_module+0x623e/0x76a0
        [<ffffffff816af471>] __do_sys_finit_module+0x181/0x240
        [<ffffffff89978f99>] do_syscall_64+0x39/0xb0
        [<ffffffff89a0008b>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: c92316bf8e94 ("test_firmware: add batched firmware tests")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/20221119035721.18268-1-shaozhengchao@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7c4331c073aa4fa9e721c8d5d9842f91f25fcd2
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Nov 23 06:12:12 2022 +0000

    serial: sunsab: Fix error handling in sunsab_init()
    
    [ Upstream commit 1a6ec673fb627c26e2267ca0a03849f91dbd9b40 ]
    
    The sunsab_init() returns the platform_driver_register() directly without
    checking its return value, if platform_driver_register() failed, the
    allocated sunsab_ports is leaked.
    Fix by free sunsab_ports and set it to NULL when platform_driver_register()
    failed.
    
    Fixes: c4d37215a824 ("[SERIAL] sunsab: Convert to of_driver framework.")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221123061212.52593-1-yuancan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a26b13d158ae39c40e080e5a827a73261095d74a
Author: Gabriel Somlo <gsomlo@gmail.com>
Date:   Tue Nov 22 15:04:26 2022 -0500

    serial: altera_uart: fix locking in polling mode
    
    [ Upstream commit 1307c5d33cce8a41dd77c2571e4df65a5b627feb ]
    
    Since altera_uart_interrupt() may also be called from
    a poll timer in "serving_softirq" context, use
    spin_[lock_irqsave|unlock_irqrestore] variants, which
    are appropriate for both softirq and hardware interrupt
    contexts.
    
    Fixes: 2f8b9c15cd88 ("altera_uart: Add support for polling mode (IRQ-less)")
    Signed-off-by: Gabriel Somlo <gsomlo@gmail.com>
    Link: https://lore.kernel.org/r/20221122200426.888349-1-gsomlo@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ff88d007f1b4d296b01925a7f237e829c207a75
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Tue Sep 20 07:20:43 2022 +0200

    tty: serial: altera_uart_{r,t}x_chars() need only uart_port
    
    [ Upstream commit 3af44d9bb0539d5fa27d6159d696fda5f3747bff ]
    
    Both altera_uart_{r,t}x_chars() need only uart_port, not altera_uart. So
    pass the former from altera_uart_interrupt() directly.
    
    Apart it maybe saves a dereference, this makes the transition of
    altera_uart_tx_chars() easier to follow in the next patch.
    
    Cc: Tobias Klauser <tklauser@distanz.ch>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Acked-by: Tobias Klauser <tklauser@distanz.ch>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20220920052049.20507-4-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 1307c5d33cce ("serial: altera_uart: fix locking in polling mode")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af320d1a3cefec9c08a6682eab471e27528dbbcb
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Tue Sep 20 07:20:42 2022 +0200

    tty: serial: clean up stop-tx part in altera_uart_tx_chars()
    
    [ Upstream commit d9c128117da41cf4cb0e80ae565b5d3ac79dffac ]
    
    The "stop TX" path in altera_uart_tx_chars() is open-coded, so:
    * use uart_circ_empty() to check if the buffer is empty, and
    * when true, call altera_uart_stop_tx().
    
    Cc: Tobias Klauser <tklauser@distanz.ch>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Acked-by: Tobias Klauser <tklauser@distanz.ch>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20220920052049.20507-3-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 1307c5d33cce ("serial: altera_uart: fix locking in polling mode")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07f4ca68b0f6bf84b6b391c14b59fd179fcde9c5
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Nov 22 19:45:59 2022 +0800

    serial: pch: Fix PCI device refcount leak in pch_request_dma()
    
    [ Upstream commit 8be3a7bf773700534a6e8f87f6ed2ed111254be5 ]
    
    As comment of pci_get_slot() says, it returns a pci_device with its
    refcount increased. The caller must decrement the reference count by
    calling pci_dev_put().
    
    Since 'dma_dev' is only used to filter the channel in filter(), we can
    call pci_dev_put() before exiting from pch_request_dma(). Add the
    missing pci_dev_put() for the normal and error path.
    
    Fixes: 3c6a483275f4 ("Serial: EG20T: add PCH_UART driver")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Link: https://lore.kernel.org/r/20221122114559.27692-1-wangxiongfeng2@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46d08b0e0be590377c0e1b79b65d8f860abdb883
Author: delisun <delisun@pateo.com.cn>
Date:   Thu Nov 10 10:01:08 2022 +0800

    serial: pl011: Do not clear RX FIFO & RX interrupt in unthrottle.
    
    [ Upstream commit 032d5a71ed378ffc6a2d41a187d8488a4f9fe415 ]
    
    Clearing the RX FIFO will cause data loss.
    Copy the pl011_enabl_interrupts implementation, and remove the clear
    interrupt and FIFO part of the code.
    
    Fixes: 211565b10099 ("serial: pl011: UPSTAT_AUTORTS requires .throttle/unthrottle")
    Signed-off-by: delisun <delisun@pateo.com.cn>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20221110020108.7700-1-delisun@pateo.com.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5b16eb076f46c88d02d41ece5bec4e0d89158bb
Author: Jiamei Xie <jiamei.xie@arm.com>
Date:   Thu Nov 17 18:32:37 2022 +0800

    serial: amba-pl011: avoid SBSA UART accessing DMACR register
    
    [ Upstream commit 94cdb9f33698478b0e7062586633c42c6158a786 ]
    
    Chapter "B Generic UART" in "ARM Server Base System Architecture" [1]
    documentation describes a generic UART interface. Such generic UART
    does not support DMA. In current code, sbsa_uart_pops and
    amba_pl011_pops share the same stop_rx operation, which will invoke
    pl011_dma_rx_stop, leading to an access of the DMACR register. This
    commit adds a using_rx_dma check in pl011_dma_rx_stop to avoid the
    access to DMACR register for SBSA UARTs which does not support DMA.
    
    When the kernel enables DMA engine with "CONFIG_DMA_ENGINE=y", Linux
    SBSA PL011 driver will access PL011 DMACR register in some functions.
    For most real SBSA Pl011 hardware implementations, the DMACR write
    behaviour will be ignored. So these DMACR operations will not cause
    obvious problems. But for some virtual SBSA PL011 hardware, like Xen
    virtual SBSA PL011 (vpl011) device, the behaviour might be different.
    Xen vpl011 emulation will inject a data abort to guest, when guest is
    accessing an unimplemented UART register. As Xen VPL011 is SBSA
    compatible, it will not implement DMACR register. So when Linux SBSA
    PL011 driver access DMACR register, it will get an unhandled data abort
    fault and the application will get a segmentation fault:
    Unhandled fault at 0xffffffc00944d048
    Mem abort info:
      ESR = 0x96000000
      EC = 0x25: DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
      FSC = 0x00: ttbr address size fault
    Data abort info:
      ISV = 0, ISS = 0x00000000
      CM = 0, WnR = 0
    swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000020e2e000
    [ffffffc00944d048] pgd=100000003ffff803, p4d=100000003ffff803, pud=100000003ffff803, pmd=100000003fffa803, pte=006800009c090f13
    Internal error: ttbr address size fault: 96000000 [#1] PREEMPT SMP
    ...
    Call trace:
     pl011_stop_rx+0x70/0x80
     tty_port_shutdown+0x7c/0xb4
     tty_port_close+0x60/0xcc
     uart_close+0x34/0x8c
     tty_release+0x144/0x4c0
     __fput+0x78/0x220
     ____fput+0x1c/0x30
     task_work_run+0x88/0xc0
     do_notify_resume+0x8d0/0x123c
     el0_svc+0xa8/0xc0
     el0t_64_sync_handler+0xa4/0x130
     el0t_64_sync+0x1a0/0x1a4
    Code: b9000083 b901f001 794038a0 8b000042 (b9000041)
    ---[ end trace 83dd93df15c3216f ]---
    note: bootlogd[132] exited with preempt_count 1
    /etc/rcS.d/S07bootlogd: line 47: 132 Segmentation fault start-stop-daemon
    
    This has been discussed in the Xen community, and we think it should fix
    this in Linux. See [2] for more information.
    
    [1] https://developer.arm.com/documentation/den0094/c/?lang=en
    [2] https://lists.xenproject.org/archives/html/xen-devel/2022-11/msg00543.html
    
    Fixes: 0dd1e247fd39 (drivers: PL011: add support for the ARM SBSA generic UART)
    Signed-off-by: Jiamei Xie <jiamei.xie@arm.com>
    Reviewed-by: Andre Przywara <andre.przywara@arm.com>
    Link: https://lore.kernel.org/r/20221117103237.86856-1-jiamei.xie@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fab27438abe2930bc345b90ed63b9f9939bb285d
Author: Sven Peter <sven@svenpeter.dev>
Date:   Mon Nov 14 18:44:47 2022 +0100

    usb: typec: tipd: Fix spurious fwnode_handle_put in error path
    
    [ Upstream commit 782c70edc4852a5d39be12377a85501546236212 ]
    
    The err_role_put error path always calls fwnode_handle_put to release
    the fwnode. This path can be reached after probe itself has already
    released that fwnode though. Fix that by moving fwnode_handle_put in the
    happy path to the very end.
    
    Fixes: 18a6c866bb19 ("usb: typec: tps6598x: Add USB role switching logic")
    Signed-off-by: Sven Peter <sven@svenpeter.dev>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20221114174449.34634-2-sven@svenpeter.dev
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3b6c28a71f111a6c67ddc3238aab95910fd86cf
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 21 14:24:16 2022 +0800

    usb: typec: tcpci: fix of node refcount leak in tcpci_register_port()
    
    [ Upstream commit 0384e87e3fec735e47f1c133c796f32ef7a72a9b ]
    
    I got the following report while doing device(mt6370-tcpc) load
    test with CONFIG_OF_UNITTEST and CONFIG_OF_DYNAMIC enabled:
    
      OF: ERROR: memory leak, expected refcount 1 instead of 2,
      of_node_get()/of_node_put() unbalanced - destroy cset entry:
      attach overlay node /i2c/pmic@34/tcpc/connector
    
    The 'fwnode' set in tcpci_parse_config() which is called
    in tcpci_register_port(), its node refcount is increased
    in device_get_named_child_node(). It needs be put while
    exiting, so call fwnode_handle_put() in the error path of
    tcpci_register_port() and in tcpci_unregister_port() to
    avoid leak.
    
    Fixes: 5e85a04c8c0d ("usb: typec: add fwnode to tcpc")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20221121062416.1026192-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ca02df871adf04e26134863065521e504e03cd5
Author: Sven Peter <sven@svenpeter.dev>
Date:   Mon Nov 14 17:59:24 2022 +0100

    usb: typec: Check for ops->exit instead of ops->enter in altmode_exit
    
    [ Upstream commit b6ddd180e3d9f92c1e482b3cdeec7dda086b1341 ]
    
    typec_altmode_exit checks if ops->enter is not NULL but then calls
    ops->exit a few lines below. Fix that and check for the function
    pointer it's about to call instead.
    
    Fixes: 8a37d87d72f0 ("usb: typec: Bus type for alternate modes")
    Signed-off-by: Sven Peter <sven@svenpeter.dev>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20221114165924.33487-1-sven@svenpeter.dev
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d2b286eb034af114f67d9967fc3fbc1829bb712
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Nov 17 11:59:14 2022 +0800

    staging: vme_user: Fix possible UAF in tsi148_dma_list_add
    
    [ Upstream commit 357057ee55d3c99a5de5abe8150f7bca04f8e53b ]
    
    Smatch report warning as follows:
    
    drivers/staging/vme_user/vme_tsi148.c:1757 tsi148_dma_list_add() warn:
      '&entry->list' not removed from list
    
    In tsi148_dma_list_add(), the error path "goto err_dma" will not
    remove entry->list from list->entries, but entry will be freed,
    then list traversal may cause UAF.
    
    Fix by removeing it from list->entries before free().
    
    Fixes: b2383c90a9d6 ("vme: tsi148: fix first DMA item mapping")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221117035914.2954454-1-cuigaosheng1@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 775a6f8bed8725f3189b85bec3e1179dd03fc253
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Nov 11 10:03:17 2022 +0100

    usb: fotg210-udc: Fix ages old endianness issues
    
    [ Upstream commit 46ed6026ca2181c917c8334a82e3eaf40a6234dd ]
    
    The code in the FOTG210 driver isn't entirely endianness-agnostic
    as reported by the kernel robot sparse testing. This came to
    the surface while moving the files around.
    
    The driver is only used on little-endian systems, so this causes
    no real-world regression, but it is nice to be strict and have
    some compile coverage also on big endian machines, so fix it
    up with the right LE accessors.
    
    Fixes: b84a8dee23fd ("usb: gadget: add Faraday fotg210_udc driver")
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/linux-usb/202211110910.0dJ7nZCn-lkp@intel.com/
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20221111090317.94228-1-linus.walleij@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fcb7c7d52194c0f0c412c1d960899b8e922bab5
Author: Rafael Mendonca <rafaelmendsr@gmail.com>
Date:   Fri Sep 30 19:40:58 2022 -0300

    uio: uio_dmem_genirq: Fix deadlock between irq config and handling
    
    [ Upstream commit 118b918018175d9fcd8db667f905012e986cc2c9 ]
    
    This fixes a concurrency issue addressed in commit 34cb27528398 ("UIO: Fix
    concurrency issue"):
    
      "In a SMP case there was a race condition issue between
      Uio_pdrv_genirq_irqcontrol() running on one CPU and irq handler on
      another CPU. Fix it by spin_locking shared resources access inside irq
      handler."
    
    The implementation of "uio_dmem_genirq" was based on "uio_pdrv_genirq" and
    it is used in a similar manner to the "uio_pdrv_genirq" driver with respect
    to interrupt configuration and handling. At the time "uio_dmem_genirq" was
    merged, both had the same implementation of the 'uio_info' handlers
    irqcontrol() and handler(), thus, both had the same concurrency issue
    mentioned by the above commit. However, the above patch was only applied to
    the "uio_pdrv_genirq" driver.
    
    Split out from commit 34cb27528398 ("UIO: Fix concurrency issue").
    
    Fixes: 0a0c3b5a24bd ("Add new uio device for dynamic memory allocation")
    Signed-off-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Link: https://lore.kernel.org/r/20220930224100.816175-3-rafaelmendsr@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bf7a0b2b15cd12e15f7858072bd89933746de67
Author: Rafael Mendonca <rafaelmendsr@gmail.com>
Date:   Fri Sep 30 19:40:57 2022 -0300

    uio: uio_dmem_genirq: Fix missing unlock in irq configuration
    
    [ Upstream commit 9de255c461d1b3f0242b3ad1450c3323a3e00b34 ]
    
    Commit b74351287d4b ("uio: fix a sleep-in-atomic-context bug in
    uio_dmem_genirq_irqcontrol()") started calling disable_irq() without
    holding the spinlock because it can sleep. However, that fix introduced
    another bug: if interrupt is already disabled and a new disable request
    comes in, then the spinlock is not unlocked:
    
    root@localhost:~# printf '\x00\x00\x00\x00' > /dev/uio0
    root@localhost:~# printf '\x00\x00\x00\x00' > /dev/uio0
    root@localhost:~# [   14.851538] BUG: scheduling while atomic: bash/223/0x00000002
    [   14.851991] Modules linked in: uio_dmem_genirq uio myfpga(OE) bochs drm_vram_helper drm_ttm_helper ttm drm_kms_helper drm snd_pcm ppdev joydev psmouse snd_timer snd e1000fb_sys_fops syscopyarea parport sysfillrect soundcore sysimgblt input_leds pcspkr i2c_piix4 serio_raw floppy evbug qemu_fw_cfg mac_hid pata_acpi ip_tables x_tables autofs4 [last unloaded: parport_pc]
    [   14.854206] CPU: 0 PID: 223 Comm: bash Tainted: G           OE      6.0.0-rc7 #21
    [   14.854786] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    [   14.855664] Call Trace:
    [   14.855861]  <TASK>
    [   14.856025]  dump_stack_lvl+0x4d/0x67
    [   14.856325]  dump_stack+0x14/0x1a
    [   14.856583]  __schedule_bug.cold+0x4b/0x5c
    [   14.856915]  __schedule+0xe81/0x13d0
    [   14.857199]  ? idr_find+0x13/0x20
    [   14.857456]  ? get_work_pool+0x2d/0x50
    [   14.857756]  ? __flush_work+0x233/0x280
    [   14.858068]  ? __schedule+0xa95/0x13d0
    [   14.858307]  ? idr_find+0x13/0x20
    [   14.858519]  ? get_work_pool+0x2d/0x50
    [   14.858798]  schedule+0x6c/0x100
    [   14.859009]  schedule_hrtimeout_range_clock+0xff/0x110
    [   14.859335]  ? tty_write_room+0x1f/0x30
    [   14.859598]  ? n_tty_poll+0x1ec/0x220
    [   14.859830]  ? tty_ldisc_deref+0x1a/0x20
    [   14.860090]  schedule_hrtimeout_range+0x17/0x20
    [   14.860373]  do_select+0x596/0x840
    [   14.860627]  ? __kernel_text_address+0x16/0x50
    [   14.860954]  ? poll_freewait+0xb0/0xb0
    [   14.861235]  ? poll_freewait+0xb0/0xb0
    [   14.861517]  ? rpm_resume+0x49d/0x780
    [   14.861798]  ? common_interrupt+0x59/0xa0
    [   14.862127]  ? asm_common_interrupt+0x2b/0x40
    [   14.862511]  ? __uart_start.isra.0+0x61/0x70
    [   14.862902]  ? __check_object_size+0x61/0x280
    [   14.863255]  core_sys_select+0x1c6/0x400
    [   14.863575]  ? vfs_write+0x1c9/0x3d0
    [   14.863853]  ? vfs_write+0x1c9/0x3d0
    [   14.864121]  ? _copy_from_user+0x45/0x70
    [   14.864526]  do_pselect.constprop.0+0xb3/0xf0
    [   14.864893]  ? do_syscall_64+0x6d/0x90
    [   14.865228]  ? do_syscall_64+0x6d/0x90
    [   14.865556]  __x64_sys_pselect6+0x76/0xa0
    [   14.865906]  do_syscall_64+0x60/0x90
    [   14.866214]  ? syscall_exit_to_user_mode+0x2a/0x50
    [   14.866640]  ? do_syscall_64+0x6d/0x90
    [   14.866972]  ? do_syscall_64+0x6d/0x90
    [   14.867286]  ? do_syscall_64+0x6d/0x90
    [   14.867626]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    [...] stripped
    [   14.872959]  </TASK>
    
    ('myfpga' is a simple 'uio_dmem_genirq' driver I wrote to test this)
    
    The implementation of "uio_dmem_genirq" was based on "uio_pdrv_genirq" and
    it is used in a similar manner to the "uio_pdrv_genirq" driver with respect
    to interrupt configuration and handling. At the time "uio_dmem_genirq" was
    introduced, both had the same implementation of the 'uio_info' handlers
    irqcontrol() and handler(). Then commit 34cb27528398 ("UIO: Fix concurrency
    issue"), which was only applied to "uio_pdrv_genirq", ended up making them
    a little different. That commit, among other things, changed disable_irq()
    to disable_irq_nosync() in the implementation of irqcontrol(). The
    motivation there was to avoid a deadlock between irqcontrol() and
    handler(), since it added a spinlock in the irq handler, and disable_irq()
    waits for the completion of the irq handler.
    
    By changing disable_irq() to disable_irq_nosync() in irqcontrol(), we also
    avoid the sleeping-while-atomic bug that commit b74351287d4b ("uio: fix a
    sleep-in-atomic-context bug in uio_dmem_genirq_irqcontrol()") was trying to
    fix. Thus, this fixes the missing unlock in irqcontrol() by importing the
    implementation of irqcontrol() handler from the "uio_pdrv_genirq" driver.
    In the end, it reverts commit b74351287d4b ("uio: fix a
    sleep-in-atomic-context bug in uio_dmem_genirq_irqcontrol()") and change
    disable_irq() to disable_irq_nosync().
    
    It is worth noting that this still does not address the concurrency issue
    fixed by commit 34cb27528398 ("UIO: Fix concurrency issue"). It will be
    addressed separately in the next commits.
    
    Split out from commit 34cb27528398 ("UIO: Fix concurrency issue").
    
    Fixes: b74351287d4b ("uio: fix a sleep-in-atomic-context bug in uio_dmem_genirq_irqcontrol()")
    Signed-off-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Link: https://lore.kernel.org/r/20220930224100.816175-2-rafaelmendsr@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27b612bd09bd74c21eabd81a6bad5ba1d2dd11d0
Author: Rafael Mendonca <rafaelmendsr@gmail.com>
Date:   Tue Oct 18 12:28:25 2022 -0300

    vfio: platform: Do not pass return buffer to ACPI _RST method
    
    [ Upstream commit e67e070632a665c932d534b8b800477bb3111449 ]
    
    The ACPI _RST method has no return value, there's no need to pass a return
    buffer to acpi_evaluate_object().
    
    Fixes: d30daa33ec1d ("vfio: platform: call _RST method when using ACPI")
    Signed-off-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Link: https://lore.kernel.org/r/20221018152825.891032-1-rafaelmendsr@gmail.com
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18a7200646958cf8e1b8a933de08122fc50676cd
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Oct 26 16:28:03 2022 +0800

    class: fix possible memory leak in __class_register()
    
    [ Upstream commit 8c3e8a6bdb5253b97ad532570f8b5db5f7a06407 ]
    
    If class_add_groups() returns error, the 'cp->subsys' need be
    unregister, and the 'cp' need be freed.
    
    We can not call kset_unregister() here, because the 'cls' will
    be freed in callback function class_release() and it's also
    freed in caller's error path, it will cause double free.
    
    So fix this by calling kobject_del() and kfree_const(name) to
    cleanup kobject. Besides, call kfree() to free the 'cp'.
    
    Fault injection test can trigger this:
    
    unreferenced object 0xffff888102fa8190 (size 8):
      comm "modprobe", pid 502, jiffies 4294906074 (age 49.296s)
      hex dump (first 8 bytes):
        70 6b 74 63 64 76 64 00                          pktcdvd.
      backtrace:
        [<00000000e7c7703d>] __kmalloc_track_caller+0x1ae/0x320
        [<000000005e4d70bc>] kstrdup+0x3a/0x70
        [<00000000c2e5e85a>] kstrdup_const+0x68/0x80
        [<000000000049a8c7>] kvasprintf_const+0x10b/0x190
        [<0000000029123163>] kobject_set_name_vargs+0x56/0x150
        [<00000000747219c9>] kobject_set_name+0xab/0xe0
        [<0000000005f1ea4e>] __class_register+0x15c/0x49a
    
    unreferenced object 0xffff888037274000 (size 1024):
      comm "modprobe", pid 502, jiffies 4294906074 (age 49.296s)
      hex dump (first 32 bytes):
        00 40 27 37 80 88 ff ff 00 40 27 37 80 88 ff ff  .@'7.....@'7....
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
      backtrace:
        [<00000000151f9600>] kmem_cache_alloc_trace+0x17c/0x2f0
        [<00000000ecf3dd95>] __class_register+0x86/0x49a
    
    Fixes: ced6473e7486 ("driver core: class: add class_groups support")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221026082803.3458760-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e74868a38b4e0994c58a1d8352e6fbaaa785f6c
Author: Kartik <kkartik@nvidia.com>
Date:   Tue Oct 18 20:28:06 2022 +0530

    serial: tegra: Read DMA status before terminating
    
    [ Upstream commit 109a951a9f1fd8a34ebd1896cbbd5d5cede880a7 ]
    
    Read the DMA status before terminating the DMA, as doing so deletes
    the DMA desc.
    
    Also, to get the correct transfer status information, pause the DMA
    using dmaengine_pause() before reading the DMA status.
    
    Fixes: e9ea096dd225 ("serial: tegra: add serial driver")
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Akhil R <akhilrajeev@nvidia.com>
    Signed-off-by: Kartik <kkartik@nvidia.com>
    Link: https://lore.kernel.org/r/1666105086-17326-1-git-send-email-kkartik@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fce9890e1be4c0460dad850cc8c00414a9d25f0f
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 14:40:36 2022 +0800

    drivers: dio: fix possible memory leak in dio_init()
    
    [ Upstream commit e63e99397b2613d50a5f4f02ed07307e67a190f1 ]
    
    If device_register() returns error, the 'dev' and name needs be
    freed. Add a release function, and then call put_device() in the
    error path, so the name is freed in kobject_cleanup() and to the
    'dev' is freed in release function.
    
    Fixes: 2e4c77bea3d8 ("m68k: dio - Kill warn_unused_result warnings")
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109064036.1835346-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d21714134505bc23daa0455b295f3b63730b3b42
Author: Dragos Tatulea <dtatulea@nvidia.com>
Date:   Thu Dec 8 09:52:54 2022 +0200

    IB/IPoIB: Fix queue count inconsistency for PKEY child interfaces
    
    [ Upstream commit dbc94a0fb81771a38733c0e8f2ea8c4fa6934dc1 ]
    
    There are 2 ways to create IPoIB PKEY child interfaces:
    1) Writing a PKEY to /sys/class/net/<ib parent interface>/create_child.
    2) Using netlink with iproute.
    
    While with sysfs the child interface has the same number of tx and
    rx queues as the parent, with netlink there will always be 1 tx
    and 1 rx queue for the child interface. That's because the
    get_num_tx/rx_queues() netlink ops are missing and the default value
    of 1 is taken for the number of queues (in rtnl_create_link()).
    
    This change adds the get_num_tx/rx_queues() ops which allows for
    interfaces with multiple queues to be created over netlink. This
    constant only represents the max number of tx and rx queues on that
    net device.
    
    Fixes: 9baa0b036410 ("IB/ipoib: Add rtnl_link_ops support")
    Signed-off-by: Dragos Tatulea <dtatulea@nvidia.com>
    Link: https://lore.kernel.org/r/f4a42c8aa43c02d5ae5559a60c3e5e0f18c82531.1670485816.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa96aff394a511cc7bb7df08d1b8504d4d97671e
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Dec 2 21:22:34 2022 +0800

    hwrng: geode - Fix PCI device refcount leak
    
    [ Upstream commit 9f6ec8dc574efb7f4f3d7ee9cd59ae307e78f445 ]
    
    for_each_pci_dev() is implemented by pci_get_device(). The comment of
    pci_get_device() says that it will increase the reference count for the
    returned pci_dev and also decrease the reference count for the input
    pci_dev @from if it is not NULL.
    
    If we break for_each_pci_dev() loop with pdev not NULL, we need to call
    pci_dev_put() to decrease the reference count. We add a new struct
    'amd_geode_priv' to record pointer of the pci_dev and membase, and then
    add missing pci_dev_put() for the normal and error path.
    
    Fixes: ef5d862734b8 ("[PATCH] Add Geode HW RNG driver")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5998e5c30e839f73e62cb29e0d9617b0d16ccba3
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Dec 2 21:22:33 2022 +0800

    hwrng: amd - Fix PCI device refcount leak
    
    [ Upstream commit ecadb5b0111ea19fc7c240bb25d424a94471eb7d ]
    
    for_each_pci_dev() is implemented by pci_get_device(). The comment of
    pci_get_device() says that it will increase the reference count for the
    returned pci_dev and also decrease the reference count for the input
    pci_dev @from if it is not NULL.
    
    If we break for_each_pci_dev() loop with pdev not NULL, we need to call
    pci_dev_put() to decrease the reference count. Add the missing
    pci_dev_put() for the normal and error path.
    
    Fixes: 96d63c0297cc ("[PATCH] Add AMD HW RNG driver")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38da26c8552ee431c8276bb2afc41194e93a5eb0
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Dec 1 14:25:26 2022 +0800

    crypto: img-hash - Fix variable dereferenced before check 'hdev->req'
    
    [ Upstream commit 04ba54e5af8f8f0137b08cb51a0b3a2e1ea46c94 ]
    
    Smatch report warning as follows:
    
    drivers/crypto/img-hash.c:366 img_hash_dma_task() warn: variable
    dereferenced before check 'hdev->req'
    
    Variable dereferenced should be done after check 'hdev->req',
    fix it.
    
    Fixes: d358f1abbf71 ("crypto: img-hash - Add Imagination Technologies hw hash accelerator")
    Fixes: 10badea259fa ("crypto: img-hash - Fix null pointer exception")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15ca148940187d04d506c3e66ab43df06f2f56c4
Author: Chengchang Tang <tangchengchang@huawei.com>
Date:   Sat Nov 26 18:29:09 2022 +0800

    RDMA/hns: Fix page size cap from firmware
    
    [ Upstream commit 99dc5a0712883d5d13b620d25b3759d429577bc8 ]
    
    Add verification to make sure the roce page size cap is supported by the
    system page size.
    
    Fixes: ba6bb7e97421 ("RDMA/hns: Add interfaces to get pf capabilities from firmware")
    Link: https://lore.kernel.org/r/20221126102911.2921820-5-xuhaoyue1@hisilicon.com
    Signed-off-by: Chengchang Tang <tangchengchang@huawei.com>
    Signed-off-by: Haoyue Xu <xuhaoyue1@hisilicon.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83b2c33b53b2292e624ef8823d0608163c486790
Author: Chengchang Tang <tangchengchang@huawei.com>
Date:   Sat Nov 26 18:29:08 2022 +0800

    RDMA/hns: Fix PBL page MTR find
    
    [ Upstream commit 9fb39ef2ff3e18f1740625ba04093dfbef086d2b ]
    
    Now, The address of the first two pages in the MR will be searched, which
    use to speed up the lookup of the pbl table for hardware.  An exception
    will occur when there is only one page in this MR.  This patch fix the
    number of page to search.
    
    Fixes: 9b2cf76c9f05 ("RDMA/hns: Optimize PBL buffer allocation process")
    Link: https://lore.kernel.org/r/20221126102911.2921820-4-xuhaoyue1@hisilicon.com
    Signed-off-by: Chengchang Tang <tangchengchang@huawei.com>
    Signed-off-by: Haoyue Xu <xuhaoyue1@hisilicon.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73ab1c956a32a97e231327bc9f80ebf313a45082
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Oct 18 12:40:04 2022 +0800

    orangefs: Fix sysfs not cleanup when dev init failed
    
    [ Upstream commit ea60a4ad0cf88b411cde6888b8c890935686ecd7 ]
    
    When the dev init failed, should cleanup the sysfs, otherwise, the
    module will never be loaded since can not create duplicate sysfs
    directory:
    
      sysfs: cannot create duplicate filename '/fs/orangefs'
    
      CPU: 1 PID: 6549 Comm: insmod Tainted: G        W          6.0.0+ #44
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x34/0x44
       sysfs_warn_dup.cold+0x17/0x24
       sysfs_create_dir_ns+0x16d/0x180
       kobject_add_internal+0x156/0x3a0
       kobject_init_and_add+0xcf/0x120
       orangefs_sysfs_init+0x7e/0x3a0 [orangefs]
       orangefs_init+0xfe/0x1000 [orangefs]
       do_one_initcall+0x87/0x2a0
       do_init_module+0xdf/0x320
       load_module+0x2f98/0x3330
       __do_sys_finit_module+0x113/0x1b0
       do_syscall_64+0x35/0x80
       entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
      kobject_add_internal failed for orangefs with -EEXIST, don't try to register things with the same name in the same directory.
    
    Fixes: 2f83ace37181 ("orangefs: put register_chrdev immediately before register_filesystem")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c53bb661f0a8e8f4cc60aac0515c50c7b375490
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Fri Dec 2 12:00:38 2022 +0800

    RDMA/srp: Fix error return code in srp_parse_options()
    
    [ Upstream commit ed461b30b22c8fa85c25189c14cb89f29595cd14 ]
    
    In the previous iteration of the while loop, the "ret" may have been
    assigned a value of 0, so the error return code -EINVAL may have been
    incorrectly set to 0. To fix set valid return code before calling to
    goto. Also investigate each case separately as Andy suggessted.
    
    Fixes: e711f968c49c ("IB/srp: replace custom implementation of hex2bin()")
    Fixes: 2a174df0c602 ("IB/srp: Use kstrtoull() instead of simple_strtoull()")
    Fixes: 19f313438c77 ("IB/srp: Add RDMA/CM support")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Link: https://lore.kernel.org/r/1669953638-11747-2-git-send-email-wangyufen@huawei.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cbf2fc276f7a467db7ec051f17fddfd8abd9e54
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Fri Dec 2 12:00:37 2022 +0800

    RDMA/hfi1: Fix error return code in parse_platform_config()
    
    [ Upstream commit 725349f8ba1e78a146c6ff8f3ee5e2712e517106 ]
    
    In the previous iteration of the while loop, the "ret" may have been
    assigned a value of 0, so the error return code -EINVAL may have been
    incorrectly set to 0. To fix set valid return code before calling to
    goto.
    
    Fixes: 97167e813415 ("staging/rdma/hfi1: Tune for unknown channel if configuration file is absent")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Link: https://lore.kernel.org/r/1669953638-11747-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61c5b47c5b2826f46abc3a06ad03ab274c0a6dcc
Author: Tong Tiangen <tongtiangen@huawei.com>
Date:   Mon Oct 24 09:47:25 2022 +0000

    riscv/mm: add arch hook arch_clear_hugepage_flags
    
    [ Upstream commit d8bf77a1dc3079692f54be3087a5fd16d90027b0 ]
    
    With the PG_arch_1 we keep track if the page's data cache is clean,
    architecture rely on this property to treat new pages as dirty with
    respect to the data cache and perform the flushing before mapping the pages
    into userspace.
    
    This patch adds a new architecture hook, arch_clear_hugepage_flags,so that
    architectures which rely on the page flags being in a particular state for
    fresh allocations can adjust the flags accordingly when a page is freed
    into the pool.
    
    Fixes: 9e953cda5cdf ("riscv: Introduce huge page support for 32/64bit kernel")
    Signed-off-by: Tong Tiangen <tongtiangen@huawei.com>
    Link: https://lore.kernel.org/r/20221024094725.3054311-3-tongtiangen@huawei.com
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09814c669d18d0478ea00aaab71bd3d12006543e
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:49:40 2022 +0800

    crypto: omap-sham - Use pm_runtime_resume_and_get() in omap_sham_probe()
    
    [ Upstream commit 7bcceb4c9896b1b672b636ae70fe75110d6bf1ad ]
    
    omap_sham_probe() calls pm_runtime_get_sync() and calls
    pm_runtime_put_sync() latter to put usage_counter. However,
    pm_runtime_get_sync() will increment usage_counter even it failed. Fix
    it by replacing it with pm_runtime_resume_and_get() to keep usage
    counter balanced.
    
    Fixes: b359f034c8bf ("crypto: omap-sham - Convert to use pm_runtime API")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75c7b5d6b53497e6dc0e1158f9c96f43f1654f72
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Nov 22 22:56:19 2022 +0100

    crypto: amlogic - Remove kcalloc without check
    
    [ Upstream commit 3d780c8a9850ad60dee47a8d971ba7888f3d1bd3 ]
    
    There is no real point in allocating dedicated memory for the irqs array.
    MAXFLOW is only 2, so it is easier to allocated the needed space
    directly within the 'meson_dev' structure.
    
    This saves some memory allocation and avoids an indirection when using the
    irqs array.
    
    Fixes: 48fe583fe541 ("crypto: amlogic - Add crypto accelerator...")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 357f3e1756309a7fd43999cd51691d4275b98064
Author: Mark Zhang <markzhang@nvidia.com>
Date:   Mon Nov 28 13:52:46 2022 +0200

    RDMA/nldev: Fix failure to send large messages
    
    [ Upstream commit fc8f93ad3e5485d45c992233c96acd902992dfc4 ]
    
    Return "-EMSGSIZE" instead of "-EINVAL" when filling a QP entry, so that
    new SKBs will be allocated if there's not enough room in current SKB.
    
    Fixes: 65959522f806 ("RDMA: Add support to dump resource tracker in RAW format")
    Signed-off-by: Mark Zhang <markzhang@nvidia.com>
    Reviewed-by: Patrisious Haddad <phaddad@nvidia.com>
    Link: https://lore.kernel.org/r/b5e9c62f6b8369acab5648b661bf539cbceeffdc.1669636336.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25a8dabaabf6d2937ed43460d76c6cc2cd83cd55
Author: Yonggil Song <yonggil.song@samsung.com>
Date:   Tue Nov 22 18:03:20 2022 +0900

    f2fs: avoid victim selection from previous victim section
    
    [ Upstream commit e219aecfd4b766c4e878a3769057e9809f7fcadc ]
    
    When f2fs chooses GC victim in large section & LFS mode,
    next_victim_seg[gc_type] is referenced first. After segment is freed,
    next_victim_seg[gc_type] has the next segment number.
    However, next_victim_seg[gc_type] still has the last segment number
    even after the last segment of section is freed. In this case, when f2fs
    chooses a victim for the next GC round, the last segment of previous victim
    section is chosen as a victim.
    
    Initialize next_victim_seg[gc_type] to NULL_SEGNO for the last segment in
    large section.
    
    Fixes: e3080b0120a1 ("f2fs: support subsectional garbage collection")
    Signed-off-by: Yonggil Song <yonggil.song@samsung.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1b85d28834573681dd60cdcdf5dfdcb4f022b67
Author: Yuan Can <yuancan@huawei.com>
Date:   Sat Nov 26 04:34:10 2022 +0000

    RDMA/nldev: Add checks for nla_nest_start() in fill_stat_counter_qps()
    
    [ Upstream commit ea5ef136e215fdef35f14010bc51fcd6686e6922 ]
    
    As the nla_nest_start() may fail with NULL returned, the return value needs
    to be checked.
    
    Fixes: c4ffee7c9bdb ("RDMA/netlink: Implement counter dumpit calback")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221126043410.85632-1-yuancan@huawei.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad27f74e901fc48729733c88818e6b96c813057d
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Nov 17 11:51:00 2022 +0800

    scsi: snic: Fix possible UAF in snic_tgt_create()
    
    [ Upstream commit e118df492320176af94deec000ae034cc92be754 ]
    
    Smatch reports a warning as follows:
    
    drivers/scsi/snic/snic_disc.c:307 snic_tgt_create() warn:
      '&tgt->list' not removed from list
    
    If device_add() fails in snic_tgt_create(), tgt will be freed, but
    tgt->list will not be removed from snic->disc.tgt_list, then list traversal
    may cause UAF.
    
    Remove from snic->disc.tgt_list before free().
    
    Fixes: c8806b6c9e82 ("snic: driver for Cisco SCSI HBA")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221117035100.2944812-1-cuigaosheng1@huawei.com
    Acked-by: Narsimhulu Musini <nmusini@cisco.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22e8c7a56bb1cd2ed0beaaccb34282ac9cbbe27e
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Nov 15 17:24:42 2022 +0800

    scsi: fcoe: Fix transport not deattached when fcoe_if_init() fails
    
    [ Upstream commit 4155658cee394b22b24c6d64e49247bf26d95b92 ]
    
    fcoe_init() calls fcoe_transport_attach(&fcoe_sw_transport), but when
    fcoe_if_init() fails, &fcoe_sw_transport is not detached and leaves freed
    &fcoe_sw_transport on fcoe_transports list. This causes panic when
    reinserting module.
    
     BUG: unable to handle page fault for address: fffffbfff82e2213
     RIP: 0010:fcoe_transport_attach+0xe1/0x230 [libfcoe]
     Call Trace:
      <TASK>
      do_one_initcall+0xd0/0x4e0
      load_module+0x5eee/0x7210
      ...
    
    Fixes: 78a582463c1e ("[SCSI] fcoe: convert fcoe.ko to become an fcoe transport provider driver")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221115092442.133088-1-chenzhongjin@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4ba143b04a17559f2c85e18b47db117f40d8cf3
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Sun Nov 13 14:45:13 2022 +0800

    scsi: ipr: Fix WARNING in ipr_init()
    
    [ Upstream commit e6f108bffc3708ddcff72324f7d40dfcd0204894 ]
    
    ipr_init() will not call unregister_reboot_notifier() when
    pci_register_driver() fails, which causes a WARNING. Call
    unregister_reboot_notifier() when pci_register_driver() fails.
    
    notifier callback ipr_halt [ipr] already registered
    WARNING: CPU: 3 PID: 299 at kernel/notifier.c:29
    notifier_chain_register+0x16d/0x230
    Modules linked in: ipr(+) xhci_pci_renesas xhci_hcd ehci_hcd usbcore
    led_class gpu_sched drm_buddy video wmi drm_ttm_helper ttm
    drm_display_helper drm_kms_helper drm drm_panel_orientation_quirks
    agpgart cfbft
    CPU: 3 PID: 299 Comm: modprobe Tainted: G        W
    6.1.0-rc1-00190-g39508d23b672-dirty #332
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    RIP: 0010:notifier_chain_register+0x16d/0x230
    Call Trace:
     <TASK>
     __blocking_notifier_chain_register+0x73/0xb0
     ipr_init+0x30/0x1000 [ipr]
     do_one_initcall+0xdb/0x480
     do_init_module+0x1cf/0x680
     load_module+0x6a50/0x70a0
     __do_sys_finit_module+0x12f/0x1c0
     do_syscall_64+0x3f/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: f72919ec2bbb ("[SCSI] ipr: implement shutdown changes and remove obsolete write cache parameter")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Link: https://lore.kernel.org/r/20221113064513.14028-1-shangxiaojing@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b520a32796812a7fa343931f4f015b47620a8e71
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Nov 12 21:10:10 2022 +0800

    scsi: scsi_debug: Fix possible name leak in sdebug_add_host_helper()
    
    [ Upstream commit e6d773f93a49e0eda88a903a2a6542ca83380eb1 ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id
    string array"), the name of device is allocated dynamically, it needs be
    freed when device_register() returns error.
    
    As comment of device_register() says, one should use put_device() to give
    up the reference in the error path. Fix this by calling put_device(), then
    the name can be freed in kobject_cleanup(), and sdbg_host is freed in
    sdebug_release_adapter().
    
    When the device release is not set, it means the device is not initialized.
    We can not call put_device() in this case. Use kfree() to free memory.
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221112131010.3757845-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d0ad1e2bae72ae7f97d5374bb2d7b46c5ca7bd6
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Nov 12 17:43:10 2022 +0800

    scsi: fcoe: Fix possible name leak when device_register() fails
    
    [ Upstream commit 47b6a122c7b69a876c7ee2fc064a26b09627de9d ]
    
    If device_register() returns an error, the name allocated by dev_set_name()
    needs to be freed. As the comment of device_register() says, one should use
    put_device() to give up the reference in the error path. Fix this by
    calling put_device(), then the name can be freed in kobject_cleanup().
    
    The 'fcf' is freed in fcoe_fcf_device_release(), so the kfree() in the
    error path can be removed.
    
    The 'ctlr' is freed in fcoe_ctlr_device_release(), so don't use the error
    label, just return NULL after calling put_device().
    
    Fixes: 9a74e884ee71 ("[SCSI] libfcoe: Add fcoe_sysfs")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221112094310.3633291-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b142f6046ceb19e35ea77b9ad4578f19d751eb9
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Fri Nov 11 23:06:12 2022 -0800

    scsi: scsi_debug: Fix a warning in resp_report_zones()
    
    [ Upstream commit 07f2ca139d9a7a1ba71c4c03997c8de161db2346 ]
    
    As 'alloc_len' is user controlled data, if user tries to allocate memory
    larger than(>=) MAX_ORDER, then kcalloc() will fail, it creates a stack
    trace and messes up dmesg with a warning.
    
    Add __GFP_NOWARN in order to avoid too large allocation warning.  This is
    detected by static analysis using smatch.
    
    Fixes: 7db0e0c8190a ("scsi: scsi_debug: Fix buffer size of REPORT ZONES command")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Link: https://lore.kernel.org/r/20221112070612.2121535-1-harshit.m.mogalapalli@oracle.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eaa71cdae88abc75281f6116bf6ff69e432713cb
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Fri Nov 11 23:00:31 2022 -0800

    scsi: scsi_debug: Fix a warning in resp_verify()
    
    [ Upstream commit ed0f17b748b20271cb568c7ca0b23b120316a47d ]
    
    As 'vnum' is controlled by user, so if user tries to allocate memory larger
    than(>=) MAX_ORDER, then kcalloc() will fail, it creates a stack trace and
    messes up dmesg with a warning.
    
    Add __GFP_NOWARN in order to avoid too large allocation warning.  This is
    detected by static analysis using smatch.
    
    Fixes: c3e2fe9222d4 ("scsi: scsi_debug: Implement VERIFY(10), add VERIFY(16)")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Link: https://lore.kernel.org/r/20221112070031.2121068-1-harshit.m.mogalapalli@oracle.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac5cfe8bbbf91b99838e1996faa661295e59830d
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 12:30:12 2022 +0800

    scsi: hpsa: Fix possible memory leak in hpsa_add_sas_device()
    
    [ Upstream commit fda34a5d304d0b98cc967e8763b52221b66dc202 ]
    
    If hpsa_sas_port_add_rphy() returns an error, the 'rphy' allocated in
    sas_end_device_alloc() needs to be freed. Address this by calling
    sas_rphy_free() in the error path.
    
    Fixes: d04e62b9d63a ("hpsa: add in sas transport class")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221111043012.1074466-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f671a3f2869d31ec81912f1d1d9f628d4d46e011
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 10 23:11:29 2022 +0800

    scsi: hpsa: Fix error handling in hpsa_add_sas_host()
    
    [ Upstream commit 4ef174a3ad9b5d73c1b6573e244ebba2b0d86eac ]
    
    hpsa_sas_port_add_phy() does:
      ...
      sas_phy_add()  -> may return error here
      sas_port_add_phy()
      ...
    
    Whereas hpsa_free_sas_phy() does:
      ...
      sas_port_delete_phy()
      sas_phy_delete()
      ...
    
    If hpsa_sas_port_add_phy() returns an error, hpsa_free_sas_phy() can not be
    called to free the memory because the port and the phy have not been added
    yet.
    
    Replace hpsa_free_sas_phy() with sas_phy_free() and kfree() to avoid kernel
    crash in this case.
    
    Fixes: d04e62b9d63a ("hpsa: add in sas transport class")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221110151129.394389-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce1a69cc85006b494353911b35171da195d79e25
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 11:24:03 2022 +0800

    scsi: mpt3sas: Fix possible resource leaks in mpt3sas_transport_port_add()
    
    [ Upstream commit 78316e9dfc24906dd474630928ed1d3c562b568e ]
    
    In mpt3sas_transport_port_add(), if sas_rphy_add() returns error,
    sas_rphy_free() needs be called to free the resource allocated in
    sas_end_device_alloc(). Otherwise a kernel crash will happen:
    
    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000108
    CPU: 45 PID: 37020 Comm: bash Kdump: loaded Tainted: G        W          6.1.0-rc1+ #189
    pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : device_del+0x54/0x3d0
    lr : device_del+0x37c/0x3d0
    Call trace:
     device_del+0x54/0x3d0
     attribute_container_class_device_del+0x28/0x38
     transport_remove_classdev+0x6c/0x80
     attribute_container_device_trigger+0x108/0x110
     transport_remove_device+0x28/0x38
     sas_rphy_remove+0x50/0x78 [scsi_transport_sas]
     sas_port_delete+0x30/0x148 [scsi_transport_sas]
     do_sas_phy_delete+0x78/0x80 [scsi_transport_sas]
     device_for_each_child+0x68/0xb0
     sas_remove_children+0x30/0x50 [scsi_transport_sas]
     sas_rphy_remove+0x38/0x78 [scsi_transport_sas]
     sas_port_delete+0x30/0x148 [scsi_transport_sas]
     do_sas_phy_delete+0x78/0x80 [scsi_transport_sas]
     device_for_each_child+0x68/0xb0
     sas_remove_children+0x30/0x50 [scsi_transport_sas]
     sas_remove_host+0x20/0x38 [scsi_transport_sas]
     scsih_remove+0xd8/0x420 [mpt3sas]
    
    Because transport_add_device() is not called when sas_rphy_add() fails, the
    device is not added. When sas_rphy_remove() is subsequently called to
    remove the device in the remove() path, a NULL pointer dereference happens.
    
    Fixes: f92363d12359 ("[SCSI] mpt3sas: add new driver supporting 12GB SAS")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109032403.1636422-1-yangyingliang@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ccfc2bb587941dd569122913daa1252e2612631
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Wed Nov 16 20:28:04 2022 -0500

    padata: Fix list iterator in padata_do_serial()
    
    [ Upstream commit 57ddfecc72a6c9941d159543e1c0c0a74fe9afdd ]
    
    list_for_each_entry_reverse() assumes that the iterated list is nonempty
    and that every list_head is embedded in the same type, but its use in
    padata_do_serial() breaks both rules.
    
    This doesn't cause any issues now because padata_priv and padata_list
    happen to have their list fields at the same offset, but we really
    shouldn't be relying on that.
    
    Fixes: bfde23ce200e ("padata: unbind parallel jobs from specific CPUs")
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e0681dd4eee029eb1d533d06993f7cb091efb73
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Wed Nov 16 20:28:02 2022 -0500

    padata: Always leave BHs disabled when running ->parallel()
    
    [ Upstream commit 34c3a47d20ae55b3600fed733bf96eafe9c500d5 ]
    
    A deadlock can happen when an overloaded system runs ->parallel() in the
    context of the current task:
    
        padata_do_parallel
          ->parallel()
            pcrypt_aead_enc/dec
              padata_do_serial
                spin_lock(&reorder->lock) // BHs still enabled
                  <interrupt>
                    ...
                      __do_softirq
                        ...
                          padata_do_serial
                            spin_lock(&reorder->lock)
    
    It's a bug for BHs to be on in _do_serial as Steffen points out, so
    ensure they're off in the "current task" case like they are in
    padata_parallel_worker to avoid this situation.
    
    Reported-by: syzbot+bc05445bc14148d51915@syzkaller.appspotmail.com
    Fixes: 4611ce224688 ("padata: allocate work structures for parallel jobs from a pool")
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Acked-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a99e6a1049cad270a9c7a8608d063f9f1df1abf
Author: Zhang Yiqun <zhangyiqun@phytium.com.cn>
Date:   Wed Nov 16 17:24:11 2022 +0800

    crypto: tcrypt - Fix multibuffer skcipher speed test mem leak
    
    [ Upstream commit 1aa33fc8d4032227253ceb736f47c52b859d9683 ]
    
    In the past, the data for mb-skcipher test has been allocated
    twice, that means the first allcated memory area is without
    free, which may cause a potential memory leakage. So this
    patch is to remove one allocation to fix this error.
    
    Fixes: e161c5930c15 ("crypto: tcrypt - add multibuf skcipher...")
    Signed-off-by: Zhang Yiqun <zhangyiqun@phytium.com.cn>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c808edbf580bfc454671cbe66e9d7c2e938e7601
Author: Yuan Can <yuancan@huawei.com>
Date:   Tue Nov 22 01:57:51 2022 +0000

    scsi: hpsa: Fix possible memory leak in hpsa_init_one()
    
    [ Upstream commit 9c9ff300e0de07475796495d86f449340d454a0c ]
    
    The hpda_alloc_ctlr_info() allocates h and its field reply_map. However, in
    hpsa_init_one(), if alloc_percpu() failed, the hpsa_init_one() jumps to
    clean1 directly, which frees h and leaks the h->reply_map.
    
    Fix by calling hpda_free_ctlr_info() to release h->replay_map and h instead
    free h directly.
    
    Fixes: 8b834bff1b73 ("scsi: hpsa: fix selection of reply queue")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221122015751.87284-1-yuancan@huawei.com
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bb5a62bfd624039b05157745c234068508393a9
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Nov 22 23:14:37 2022 +0800

    RDMA/rxe: Fix NULL-ptr-deref in rxe_qp_do_cleanup() when socket create failed
    
    [ Upstream commit f67376d801499f4fa0838c18c1efcad8840e550d ]
    
    There is a null-ptr-deref when mount.cifs over rdma:
    
      BUG: KASAN: null-ptr-deref in rxe_qp_do_cleanup+0x2f3/0x360 [rdma_rxe]
      Read of size 8 at addr 0000000000000018 by task mount.cifs/3046
    
      CPU: 2 PID: 3046 Comm: mount.cifs Not tainted 6.1.0-rc5+ #62
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc3
      Call Trace:
       <TASK>
       dump_stack_lvl+0x34/0x44
       kasan_report+0xad/0x130
       rxe_qp_do_cleanup+0x2f3/0x360 [rdma_rxe]
       execute_in_process_context+0x25/0x90
       __rxe_cleanup+0x101/0x1d0 [rdma_rxe]
       rxe_create_qp+0x16a/0x180 [rdma_rxe]
       create_qp.part.0+0x27d/0x340
       ib_create_qp_kernel+0x73/0x160
       rdma_create_qp+0x100/0x230
       _smbd_get_connection+0x752/0x20f0
       smbd_get_connection+0x21/0x40
       cifs_get_tcp_session+0x8ef/0xda0
       mount_get_conns+0x60/0x750
       cifs_mount+0x103/0xd00
       cifs_smb3_do_mount+0x1dd/0xcb0
       smb3_get_tree+0x1d5/0x300
       vfs_get_tree+0x41/0xf0
       path_mount+0x9b3/0xdd0
       __x64_sys_mount+0x190/0x1d0
       do_syscall_64+0x35/0x80
       entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    The root cause of the issue is the socket create failed in
    rxe_qp_init_req().
    
    So move the reset rxe_qp_do_cleanup() after the NULL ptr check.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20221122151437.1057671-1-zhangxiaoxu5@huawei.com
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 164fa80330a81db67c26d10d071083941d29a510
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Sat Nov 19 15:08:34 2022 +0800

    RDMA/hns: fix memory leak in hns_roce_alloc_mr()
    
    [ Upstream commit a115aa00b18f7b8982b8f458149632caf64a862a ]
    
    When hns_roce_mr_enable() failed in hns_roce_alloc_mr(), mr_key is not
    released. Compiled test only.
    
    Fixes: 9b2cf76c9f05 ("RDMA/hns: Optimize PBL buffer allocation process")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20221119070834.48502-1-shaozhengchao@huawei.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d47544ba0c723f3844e41d286b30040b4c84651
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 21 18:22:36 2022 +0100

    crypto: ccree - Make cc_debugfs_global_fini() available for module init function
    
    [ Upstream commit 8e96729fc26c8967db45a3fb7a60387619f77a22 ]
    
    ccree_init() calls cc_debugfs_global_fini(), the former is an init
    function and the latter an exit function though.
    
    A modular build emits:
    
            WARNING: modpost: drivers/crypto/ccree/ccree.o: section mismatch in reference: init_module (section: .init.text) -> cc_debugfs_global_fini (section: .exit.text)
    
    (with CONFIG_DEBUG_SECTION_MISMATCH=y).
    
    Fixes: 4f1c596df706 ("crypto: ccree - Remove debugfs when platform_driver_register failed")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34bab85c2e1f1d8f71443c45b37de5067342767f
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Thu Nov 17 21:15:46 2022 +0800

    RDMA/hfi: Decrease PCI device reference count in error path
    
    [ Upstream commit 9b51d072da1d27e1193e84708201c48e385ad912 ]
    
    pci_get_device() will increase the reference count for the returned
    pci_dev, and also decrease the reference count for the input parameter
    *from* if it is not NULL.
    
    If we break out the loop in node_affinity_init() with 'dev' not NULL, we
    need to call pci_dev_put() to decrease the reference count. Add missing
    pci_dev_put() in error path.
    
    Fixes: c513de490f80 ("IB/hfi1: Invalid NUMA node information can cause a divide by zero")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Link: https://lore.kernel.org/r/20221117131546.113280-1-wangxiongfeng2@huawei.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8f2a0bc52a8cef83cbb74bf26e0ca4d94382154
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Mon Nov 21 10:00:29 2022 +0800

    PCI: Check for alloc failure in pci_request_irq()
    
    [ Upstream commit 2d9cd957d40c3ac491b358e7cff0515bb07a3a9c ]
    
    When kvasprintf() fails to allocate memory, it returns a NULL pointer.
    Return error from pci_request_irq() so we don't dereference it.
    
    [bhelgaas: commit log]
    Fixes: 704e8953d3e9 ("PCI/irq: Add pci_request_irq() and pci_free_irq() helpers")
    Link: https://lore.kernel.org/r/20221121020029.3759444-1-zengheng4@huawei.com
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b5f1af3352aed7a8680506ded4c2b2cf7d8726d
Author: Luoyouming <luoyouming@huawei.com>
Date:   Tue Nov 8 21:38:46 2022 +0800

    RDMA/hns: Fix ext_sge num error when post send
    
    [ Upstream commit 8eaa6f7d569b4a22bfc1b0a3fdfeeb401feb65a4 ]
    
    In the HNS ROCE driver, The sge is divided into standard sge and extended
    sge.  There are 2 standard sge in RC/XRC, and the UD standard sge is 0.
    In the scenario of RC SQ inline, if the data does not exceed 32bytes, the
    standard sge will be used. If it exceeds, only the extended sge will be
    used to fill the data.
    
    Currently, when filling the extended sge, max_gs is directly used as the
    number of the extended sge, which did not subtract the number of standard
    sge.  There is a logical error. The new algorithm subtracts the number of
    standard sge from max_gs to get the actual number of extended sge.
    
    Fixes: 30b707886aeb ("RDMA/hns: Support inline data in extented sge space for RC")
    Link: https://lore.kernel.org/r/20221108133847.2304539-2-xuhaoyue1@hisilicon.com
    Signed-off-by: Luoyouming <luoyouming@huawei.com>
    Signed-off-by: Haoyue Xu <xuhaoyue1@hisilicon.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc5e9153586ac5d16ca2426da785ffd7641f9de7
Author: Luoyouming <luoyouming@huawei.com>
Date:   Thu Sep 22 20:33:13 2022 +0800

    RDMA/hns: Repacing 'dseg_len' by macros in fill_ext_sge_inl_data()
    
    [ Upstream commit 3b1f864c904915b3baebffb31ea05ee704b0df3c ]
    
    The sge size is known to be constant, so it's unnecessary to use sizeof to
    calculate.
    
    Link: https://lore.kernel.org/r/20220922123315.3732205-11-xuhaoyue1@hisilicon.com
    Signed-off-by: Luoyouming <luoyouming@huawei.com>
    Signed-off-by: Haoyue Xu <xuhaoyue1@hisilicon.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Stable-dep-of: 8eaa6f7d569b ("RDMA/hns: Fix ext_sge num error when post send")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed97ade655ea8965dce65c3e2055574cd98b5487
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Nov 11 18:00:36 2022 +0800

    crypto: hisilicon/qm - add missing pci_dev_put() in q_num_set()
    
    [ Upstream commit cc7710d0d4ebc6998f04035cde4f32c5ddbe9d7f ]
    
    pci_get_device() will increase the reference count for the returned
    pci_dev. We need to use pci_dev_put() to decrease the reference count
    before q_num_set() returns.
    
    Fixes: c8b4b477079d ("crypto: hisilicon - add HiSilicon HPRE accelerator")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Reviewed-by: Weili Qian <qianweili@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dfe1d221e1ab6e568b1026c38735d061c2c3cae
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Nov 11 17:59:17 2022 +0800

    crypto: cryptd - Use request context instead of stack for sub-request
    
    [ Upstream commit 3a58c231172537f7b0e19d93ed33decd04f80eab ]
    
    cryptd is buggy as it tries to use sync_skcipher without going
    through the proper sync_skcipher interface.  In fact it doesn't
    even need sync_skcipher since it's already a proper skcipher and
    can easily access the request context instead of using something
    off the stack.
    
    Fixes: 36b3875a97b8 ("crypto: cryptd - Remove VLA usage of skcipher")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ab9e15b14414670c9dcad5f466de16ea953bfb6
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Nov 8 16:29:12 2022 +0800

    crypto: ccree - Remove debugfs when platform_driver_register failed
    
    [ Upstream commit 4f1c596df706c9aca662b6c214fad84047ae2a97 ]
    
    When platform_driver_register failed, we need to remove debugfs,
    which will caused a resource leak, fix it.
    
    Failed logs as follows:
    [   32.606488] debugfs: Directory 'ccree' with parent '/' already present!
    
    Fixes: 4c3f97276e15 ("crypto: ccree - introduce CryptoCell driver")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33260f4c3ed35f0ccf7b995f9b6aa38132186157
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Fri Nov 11 02:05:25 2022 -0800

    scsi: scsi_debug: Fix a warning in resp_write_scat()
    
    [ Upstream commit 216e179724c1d9f57a8ababf8bd7aaabef67f01b ]
    
    As 'lbdof_blen' is coming from user, if the size in kzalloc() is >=
    MAX_ORDER then we hit a warning.
    
    Call trace:
    
    sg_ioctl
     sg_ioctl_common
       scsi_ioctl
        sg_scsi_ioctl
         blk_execute_rq
          blk_mq_sched_insert_request
           blk_mq_run_hw_queue
            __blk_mq_delay_run_hw_queue
             __blk_mq_run_hw_queue
              blk_mq_sched_dispatch_requests
               __blk_mq_sched_dispatch_requests
                blk_mq_dispatch_rq_list
                 scsi_queue_rq
                  scsi_dispatch_cmd
                   scsi_debug_queuecommand
                    schedule_resp
                     resp_write_scat
    
    If you try to allocate a memory larger than(>=) MAX_ORDER, then kmalloc()
    will definitely fail.  It creates a stack trace and messes up dmesg.  The
    user controls the size here so if they specify a too large size it will
    fail.
    
    Add __GFP_NOWARN in order to avoid too large allocation warning.  This is
    detected by static analysis using smatch.
    
    Fixes: 481b5e5c7949 ("scsi: scsi_debug: add resp_write_scat function")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Link: https://lore.kernel.org/r/20221111100526.1790533-1-harshit.m.mogalapalli@oracle.com
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 917bf4c0a76df2f9b58832a09fc833d27e484469
Author: Bernard Metzler <bmt@zurich.ibm.com>
Date:   Tue Nov 15 18:07:47 2022 +0100

    RDMA/siw: Set defined status for work completion with undefined status
    
    [ Upstream commit 60da2d11fcbc043304910e4d2ca82f9bab953e63 ]
    
    A malicious user may write undefined values into memory mapped completion
    queue elements status or opcode. Undefined status or opcode values will
    result in out-of-bounds access to an array mapping siw internal
    representation of opcode and status to RDMA core representation when
    reaping CQ elements. While siw detects those undefined values, it did not
    correctly set completion status to a defined value, thus defeating the
    whole purpose of the check.
    
    This bug leads to the following Smatch static checker warning:
    
            drivers/infiniband/sw/siw/siw_cq.c:96 siw_reap_cqe()
            error: buffer overflow 'map_cqe_status' 10 <= 21
    
    Fixes: bdf1da5df9da ("RDMA/siw: Fix immediate work request flush to completion queue")
    Link: https://lore.kernel.org/r/20221115170747.1263298-1-bmt@zurich.ibm.com
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Bernard Metzler <bmt@zurich.ibm.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 237a8936d6213c8af75165aa92394dc902abc368
Author: Mark Zhang <markzhang@nvidia.com>
Date:   Mon Nov 7 10:51:36 2022 +0200

    RDMA/nldev: Return "-EAGAIN" if the cm_id isn't from expected port
    
    [ Upstream commit ecacb3751f254572af0009b9501e2cdc83a30b6a ]
    
    When filling a cm_id entry, return "-EAGAIN" instead of 0 if the cm_id
    doesn'the have the same port as requested, otherwise an incomplete entry
    may be returned, which causes "rdam res show cm_id" to return an error.
    
    For example on a machine with two rdma devices with "rping -C 1 -v -s"
    running background, the "rdma" command fails:
      $ rdma -V
      rdma utility, iproute2-5.19.0
      $ rdma res show cm_id
      link mlx5_0/- cm-idn 0 state LISTEN ps TCP pid 28056 comm rping src-addr 0.0.0.0:7174
      error: Protocol not available
    
    While with this fix it succeeds:
      $ rdma res show cm_id
      link mlx5_0/- cm-idn 0 state LISTEN ps TCP pid 26395 comm rping src-addr 0.0.0.0:7174
      link mlx5_1/- cm-idn 0 state LISTEN ps TCP pid 26395 comm rping src-addr 0.0.0.0:7174
    
    Fixes: 00313983cda6 ("RDMA/nldev: provide detailed CM_ID information")
    Signed-off-by: Mark Zhang <markzhang@nvidia.com>
    Link: https://lore.kernel.org/r/a08e898cdac5e28428eb749a99d9d981571b8ea7.1667810736.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75af03fdf35acf15a3977f7115f6b8d10dff4bc7
Author: Bernard Metzler <bmt@zurich.ibm.com>
Date:   Mon Nov 7 15:50:57 2022 +0100

    RDMA/siw: Fix immediate work request flush to completion queue
    
    [ Upstream commit bdf1da5df9da680589a7f74448dd0a94dd3e1446 ]
    
    Correctly set send queue element opcode during immediate work request
    flushing in post sendqueue operation, if the QP is in ERROR state.
    An undefined ocode value results in out-of-bounds access to an array
    for mapping the opcode between siw internal and RDMA core representation
    in work completion generation. It resulted in a KASAN BUG report
    of type 'global-out-of-bounds' during NFSoRDMA testing.
    
    This patch further fixes a potential case of a malicious user which may
    write undefined values for completion queue elements status or opcode,
    if the CQ is memory mapped to user land. It avoids the same out-of-bounds
    access to arrays for status and opcode mapping as described above.
    
    Fixes: 303ae1cdfdf7 ("rdma/siw: application interface")
    Fixes: b0fff7317bb4 ("rdma/siw: completion queue methods")
    Reported-by: Olga Kornievskaia <kolga@netapp.com>
    Reviewed-by: Tom Talpey <tom@talpey.com>
    Signed-off-by: Bernard Metzler <bmt@zurich.ibm.com>
    Link: https://lore.kernel.org/r/20221107145057.895747-1-bmt@zurich.ibm.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef8e236832fbd86a9314e13f6f13102da936de85
Author: Dongdong Zhang <zhangdongdong1@oppo.com>
Date:   Tue Oct 25 17:40:36 2022 +0800

    f2fs: fix normal discard process
    
    [ Upstream commit b5f1a218ae5e4339130d6e733f0e63d623e09a2c ]
    
    In the DPOLICY_BG mode, there is a conflict between
    the two conditions "i + 1 < dpolicy->granularity" and
    "i < DEFAULT_DISCARD_GRANULARITY". If i = 15, the first
    condition is false, it will enter the second condition
    and dispatch all small granularity discards in function
     __issue_discard_cmd_orderly. The restrictive effect
    of the first condition to small discards will be
    invalidated. These two conditions should align.
    
    Fixes: 20ee4382322c ("f2fs: issue small discard by LBA order")
    Signed-off-by: Dongdong Zhang <zhangdongdong1@oppo.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a32aa87a25d800b2c6f47bc2749a7bfd9a486f3
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Fri Oct 28 20:33:20 2022 +0800

    apparmor: Fix memleak in alloc_ns()
    
    [ Upstream commit e9e6fa49dbab6d84c676666f3fe7d360497fd65b ]
    
    After changes in commit a1bd627b46d1 ("apparmor: share profile name on
    replacement"), the hname member of struct aa_policy is not valid slab
    object, but a subset of that, it can not be freed by kfree_sensitive(),
    use aa_policy_destroy() to fix it.
    
    Fixes: a1bd627b46d1 ("apparmor: share profile name on replacement")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 417ef568a72527d61b17c240fed680f1fc851d4b
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 07:54:48 2022 +0000

    crypto: rockchip - rework by using crypto_engine
    
    [ Upstream commit 57d67c6e8219b2a034c16d6149e30fb40fd39935 ]
    
    Instead of doing manual queue management, let's use the crypto/engine
    for that.
    In the same time, rework the requests handling to be easier to
    understand (and fix all bugs related to them).
    
    Fixes: ce0183cb6464b ("crypto: rockchip - switch to skcipher API")
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cd8bbb089be07b0e6c2a4ab70f8549b6c6e2273
Author: Kai Ye <yekai13@huawei.com>
Date:   Thu Apr 1 11:01:39 2021 +0800

    crypto: rockchip - delete unneeded variable initialization
    
    [ Upstream commit 3d8c5f5a08c39835a365c69d1a6d9518722ed19e ]
    
    Delete unneeded variable initialization
    
    Signed-off-by: Kai Ye <yekai13@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Stable-dep-of: 57d67c6e8219 ("crypto: rockchip - rework by using crypto_engine")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de041a2e7091247b8bcf1808af16b32c37360974
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 07:54:47 2022 +0000

    crypto: rockchip - remove non-aligned handling
    
    [ Upstream commit bb3c7b73363c9a149b12b74c44ae94b73a8fddf8 ]
    
    Now driver have fallback for un-aligned cases, remove all code handling
    those cases.
    
    Fixes: ce0183cb6464b ("crypto: rockchip - switch to skcipher API")
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0971bc99d124d78aa6779630753ef5a313eabd76
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 07:54:46 2022 +0000

    crypto: rockchip - better handle cipher key
    
    [ Upstream commit d6b23ccef82816050c2fd458c9dabfa0e0af09b9 ]
    
    The key should not be set in hardware too much in advance, this will
    fail it 2 TFM with different keys generate alternative requests.
    The key should be stored and used just before doing cipher operations.
    
    Fixes: ce0183cb6464b ("crypto: rockchip - switch to skcipher API")
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0b9635f09e0229960b660736351b89d03bb4858
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 07:54:45 2022 +0000

    crypto: rockchip - add fallback for ahash
    
    [ Upstream commit 816600485cb597b3ff7d6806a95a78512839f775 ]
    
    Adds a fallback for all case hardware cannot handle.
    
    Fixes: ce0183cb6464b ("crypto: rockchip - switch to skcipher API")
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbd5f112dc9d7f61c9cdf21efcac2d58b3c23cbe
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 07:54:44 2022 +0000

    crypto: rockchip - add fallback for cipher
    
    [ Upstream commit 68ef8af09a1a912a5ed2cfaa4cca7606f52cef90 ]
    
    The hardware does not handle 0 size length request, let's add a
    fallback.
    Furthermore fallback will be used for all unaligned case the hardware
    cannot handle.
    
    Fixes: ce0183cb6464b ("crypto: rockchip - switch to skcipher API")
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86f1e7f46ba9a68ff8438935fb76d7ab6c9180d7
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 07:54:43 2022 +0000

    crypto: rockchip - do not store mode globally
    
    [ Upstream commit 87e356c4966444866186f68f05832fdcc0f351a3 ]
    
    Storing the mode globally does not work if 2 requests are handled in the
    same time.
    We should store it in a request context.
    
    Fixes: ce0183cb6464b ("crypto: rockchip - switch to skcipher API")
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a13c0ff862afcd659868599870eba00d680badce
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 07:54:41 2022 +0000

    crypto: rockchip - do not do custom power management
    
    [ Upstream commit c50ef1411c8cbad0c7db100c477126076b6e3348 ]
    
    The clock enable/disable at tfm init/exit is fragile,
    if 2 tfm are init in the same time and one is removed just after,
    it will leave the hardware uncloked even if a user remains.
    
    Instead simply enable clocks at probe time.
    We will do PM later.
    
    Fixes: ce0183cb6464b ("crypto: rockchip - switch to skcipher API")
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1acf7e69355751bc09a70d9e5fefe3b4d1e02d2
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Oct 18 10:45:32 2022 +0800

    f2fs: Fix the race condition of resize flag between resizefs
    
    [ Upstream commit 28fc4e9077ce59ab28c89c20dc6be5154473218f ]
    
    Because the set/clear SBI_IS_RESIZEFS flag not between any locks,
    In the following case:
      thread1                       thread2
       ->ioctl(resizefs)
        ->set RESIZEFS flag          ->ioctl(resizefs)
        ...                           ->set RESIZEFS flag
        ->clear RESIZEFS flag
                                      ->resizefs stream
                                        # No RESIZEFS flag in the stream
    
    Also before freeze_super, the resizefs not started, we should not set
    the SBI_IS_RESIZEFS flag.
    
    So move the set/clear SBI_IS_RESIZEFS flag between the cp_mutex and
    gc_lock.
    
    Fixes: b4b10061ef98 ("f2fs: refactor resize_fs to avoid meta updates in progress")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c42d8120bf4728561101142a1568e6660f416cae
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Thu Aug 25 18:01:01 2022 +0900

    PCI: pci-epf-test: Register notifier if only core_init_notifier is enabled
    
    [ Upstream commit 6acd25cc98ce0c9ee4fefdaf44fc8bca534b26e5 ]
    
    The pci_epf_test_notifier function should be installed also if only
    core_init_notifier is enabled. Fix the current logic.
    
    Link: https://lore.kernel.org/r/20220825090101.20474-1-hayashi.kunihiko@socionext.com
    Fixes: 5e50ee27d4a5 ("PCI: pci-epf-test: Add support to defer core initialization")
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Signed-off-by: Lorenzo Pieralisi <lpieralisi@kernel.org>
    Acked-by: Om Prakash Singh <omp@nvidia.com>
    Acked-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16db9aaa41510fdee765107a8589a31e0c905f33
Author: Leon Romanovsky <leon@kernel.org>
Date:   Tue Oct 25 10:37:13 2022 +0300

    RDMA/core: Fix order of nldev_exit call
    
    [ Upstream commit 4508d32ccced24c972bc4592104513e1ff8439b5 ]
    
    Create symmetrical exit flow by calling to nldev_exit() after
    call to rdma_nl_unregister(RDMA_NL_LS).
    
    Fixes: 6c80b41abe22 ("RDMA/netlink: Add nldev initialization flows")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/64e676774a53a406f4cde265d5a4cfd6b8e97df9.1666683334.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9784b01eb46c6ca1342a50d0f76cb4c664fff3f4
Author: Vidya Sagar <vidyas@nvidia.com>
Date:   Mon Sep 26 16:49:23 2022 +0530

    PCI: dwc: Fix n_fts[] array overrun
    
    [ Upstream commit 66110361281b2f7da0c8bd51eaf1f152f4236035 ]
    
    commit aeaa0bfe89654 ("PCI: dwc: Move N_FTS setup to common setup")
    incorrectly uses pci->link_gen in deriving the index to the
    n_fts[] array also introducing the issue of accessing beyond the
    boundaries of array for greater than Gen-2 speeds. This change fixes
    that issue.
    
    Link: https://lore.kernel.org/r/20220926111923.22487-1-vidyas@nvidia.com
    Fixes: aeaa0bfe8965 ("PCI: dwc: Move N_FTS setup to common setup")
    Signed-off-by: Vidya Sagar <vidyas@nvidia.com>
    Signed-off-by: Lorenzo Pieralisi <lpieralisi@kernel.org>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Acked-by: Jingoo Han <jingoohan1@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6962f682d0c370cd4668390ff6c81154026b5e49
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Fri Oct 21 08:46:04 2022 +0800

    apparmor: Use pointer to struct aa_label for lbs_cred
    
    [ Upstream commit 37923d4321b1e38170086da2c117f78f2b0f49c6 ]
    
    According to the implementations of cred_label() and set_cred_label(),
    we should use pointer to struct aa_label for lbs_cred instead of struct
    aa_task_ctx, this patch fixes it.
    
    Fixes: bbd3662a8348 ("Infrastructure management of the cred security blob")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4c917a4b0304d7565ff1a13c716aa2ebac53022
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Oct 18 13:29:49 2022 -0700

    scsi: core: Fix a race between scsi_done() and scsi_timeout()
    
    [ Upstream commit 978b7922d3dca672b41bb4b8ce6c06ab77112741 ]
    
    If there is a race between scsi_done() and scsi_timeout() and if
    scsi_timeout() loses the race, scsi_timeout() should not reset the request
    timer. Hence change the return value for this case from BLK_EH_RESET_TIMER
    into BLK_EH_DONE.
    
    Although the block layer holds a reference on a request (req->ref) while
    calling a timeout handler, restarting the timer (blk_add_timer()) while a
    request is being completed is racy.
    
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Cc: Keith Busch <kbusch@kernel.org>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: John Garry <john.garry@huawei.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Reported-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: 15f73f5b3e59 ("blk-mq: move failure injection out of blk_mq_complete_request")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Link: https://lore.kernel.org/r/20221018202958.1902564-2-bvanassche@acm.org
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bebfa5f93456656f0525022debdc729ec457fbd
Author: Natalia Petrova <n.petrova@fintech.ru>
Date:   Wed Sep 28 13:25:05 2022 +0300

    crypto: nitrox - avoid double free on error path in nitrox_sriov_init()
    
    [ Upstream commit 094528b6a5a755b1195a01e10b13597d67d1a0e6 ]
    
    If alloc_workqueue() fails in nitrox_mbox_init() it deallocates
    ndev->iov.vfdev and returns error code, but then nitrox_sriov_init()
    calls nitrox_sriov_cleanup() where ndev->iov.vfdev is deallocated
    again.
    
    Fix this by nulling ndev->iov.vfdev after the first deallocation.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 9e5de3e06e54 ("crypto: cavium/nitrox - Add mailbox...")
    Signed-off-by: Natalia Petrova <n.petrova@fintech.ru>
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee3cffc38efe1609723888dfb3c8640f84226d31
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Tue Sep 27 08:55:55 2022 +0000

    crypto: sun8i-ss - use dma_addr instead u32
    
    [ Upstream commit 839b8ae2fc10f205317bcc32c9de18456756e1f5 ]
    
    The DMA address need to be stored in a dma_addr_t
    
    Fixes: 359e893e8af4 ("crypto: sun8i-ss - rework handling of IV")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf4d7c66a18abb726455cd41502af0403d6d4378
Author: John Johansen <john.johansen@canonical.com>
Date:   Fri May 6 18:57:12 2022 -0700

    apparmor: Fix abi check to include v8 abi
    
    [ Upstream commit 1b5a6198f5a9d0aa5497da0dc4bcd4fc166ee516 ]
    
    The v8 abi is supported by the kernel but the userspace supported
    version check does not allow for it. This was missed when v8 was added
    due to a bug in the userspace compiler which was setting an older abi
    version for v8 encoding (which is forward compatible except on the
    network encoding). However it is possible to detect the network
    encoding by checking the policydb network support which the code
    does. The end result was that missing the abi flag worked until
    userspace was fixed and began correctly checking for the v8 abi
    version.
    
    Fixes: 56974a6fcfef ("apparmor: add base infastructure for socket mediation")
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78629ca972ac3d98e105a3b89581ab618bd959d3
Author: John Johansen <john.johansen@canonical.com>
Date:   Tue Sep 6 03:39:55 2022 -0700

    apparmor: fix lockdep warning when removing a namespace
    
    [ Upstream commit 9c4557efc558a68e4cd973490fd936d6e3414db8 ]
    
    Fix the following lockdep warning
    
    [ 1119.158984] ============================================
    [ 1119.158988] WARNING: possible recursive locking detected
    [ 1119.158996] 6.0.0-rc1+ #257 Tainted: G            E    N
    [ 1119.158999] --------------------------------------------
    [ 1119.159001] bash/80100 is trying to acquire lock:
    [ 1119.159007] ffff88803e79b4a0 (&ns->lock/1){+.+.}-{4:4}, at: destroy_ns.part.0+0x43/0x140
    [ 1119.159028]
                   but task is already holding lock:
    [ 1119.159030] ffff8881009764a0 (&ns->lock/1){+.+.}-{4:4}, at: aa_remove_profiles+0x3f0/0x640
    [ 1119.159040]
                   other info that might help us debug this:
    [ 1119.159042]  Possible unsafe locking scenario:
    
    [ 1119.159043]        CPU0
    [ 1119.159045]        ----
    [ 1119.159047]   lock(&ns->lock/1);
    [ 1119.159051]   lock(&ns->lock/1);
    [ 1119.159055]
                    *** DEADLOCK ***
    
    Which is caused by an incorrect lockdep nesting notation
    
    Fixes: feb3c766a3ab ("apparmor: fix possible recursive lock warning in __aa_create_ns")
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 935d86b29093e75b6c547d90b3979c2c2d23f1c4
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Aug 23 09:15:03 2022 +0800

    apparmor: fix a memleak in multi_transaction_new()
    
    [ Upstream commit c73275cf6834787ca090317f1d20dbfa3b7f05aa ]
    
    In multi_transaction_new(), the variable t is not freed or passed out
    on the failure of copy_from_user(t->data, buf, size), which could lead
    to a memleak.
    
    Fix this bug by adding a put_multi_transaction(t) in the error path.
    
    Fixes: 1dea3b41e84c5 ("apparmor: speed up transactional queries")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f694e627c603cf46481a3f53febb8a4eb33f4917
Author: Piergiorgio Beruto <piergiorgio.beruto@gmail.com>
Date:   Sat Dec 10 23:37:22 2022 +0100

    stmmac: fix potential division by 0
    
    [ Upstream commit ede5a389852d3640a28e7187fb32b7f204380901 ]
    
    When the MAC is connected to a 10 Mb/s PHY and the PTP clock is derived
    from the MAC reference clock (default), the clk_ptp_rate becomes too
    small and the calculated sub second increment becomes 0 when computed by
    the stmmac_config_sub_second_increment() function within
    stmmac_init_tstamp_counter().
    
    Therefore, the subsequent div_u64 in stmmac_init_tstamp_counter()
    operation triggers a divide by 0 exception as shown below.
    
    [   95.062067] socfpga-dwmac ff700000.ethernet eth0: Register MEM_TYPE_PAGE_POOL RxQ-0
    [   95.076440] socfpga-dwmac ff700000.ethernet eth0: PHY [stmmac-0:08] driver [NCN26000] (irq=49)
    [   95.095964] dwmac1000: Master AXI performs any burst length
    [   95.101588] socfpga-dwmac ff700000.ethernet eth0: No Safety Features support found
    [   95.109428] Division by zero in kernel.
    [   95.113447] CPU: 0 PID: 239 Comm: ifconfig Not tainted 6.1.0-rc7-centurion3-1.0.3.0-01574-gb624218205b7-dirty #77
    [   95.123686] Hardware name: Altera SOCFPGA
    [   95.127695]  unwind_backtrace from show_stack+0x10/0x14
    [   95.132938]  show_stack from dump_stack_lvl+0x40/0x4c
    [   95.137992]  dump_stack_lvl from Ldiv0+0x8/0x10
    [   95.142527]  Ldiv0 from __aeabi_uidivmod+0x8/0x18
    [   95.147232]  __aeabi_uidivmod from div_u64_rem+0x1c/0x40
    [   95.152552]  div_u64_rem from stmmac_init_tstamp_counter+0xd0/0x164
    [   95.158826]  stmmac_init_tstamp_counter from stmmac_hw_setup+0x430/0xf00
    [   95.165533]  stmmac_hw_setup from __stmmac_open+0x214/0x2d4
    [   95.171117]  __stmmac_open from stmmac_open+0x30/0x44
    [   95.176182]  stmmac_open from __dev_open+0x11c/0x134
    [   95.181172]  __dev_open from __dev_change_flags+0x168/0x17c
    [   95.186750]  __dev_change_flags from dev_change_flags+0x14/0x50
    [   95.192662]  dev_change_flags from devinet_ioctl+0x2b4/0x604
    [   95.198321]  devinet_ioctl from inet_ioctl+0x1ec/0x214
    [   95.203462]  inet_ioctl from sock_ioctl+0x14c/0x3c4
    [   95.208354]  sock_ioctl from vfs_ioctl+0x20/0x38
    [   95.212984]  vfs_ioctl from sys_ioctl+0x250/0x844
    [   95.217691]  sys_ioctl from ret_fast_syscall+0x0/0x4c
    [   95.222743] Exception stack(0xd0ee1fa8 to 0xd0ee1ff0)
    [   95.227790] 1fa0:                   00574c4f be9aeca4 00000003 00008914 be9aeca4 be9aec50
    [   95.235945] 1fc0: 00574c4f be9aeca4 0059f078 00000036 be9aee8c be9aef7a 00000015 00000000
    [   95.244096] 1fe0: 005a01f0 be9aec38 004d7484 b6e67d74
    
    Signed-off-by: Piergiorgio Beruto <piergiorgio.beruto@gmail.com>
    Fixes: 91a2559c1dc5 ("net: stmmac: Fix sub-second increment")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/de4c64ccac9084952c56a06a8171d738604c4770.1670678513.git.piergiorgio.beruto@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 815b961c71af3136c686467fef47b91456046761
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:35 2022 +0800

    Bluetooth: RFCOMM: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 0ba18967d4544955b2eff2fbc4f2a8750c4df90a ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 81be03e026dc ("Bluetooth: RFCOMM: Replace use of memcpy_from_msg with bt_skb_sendmmsg")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4002180e0761a2bfa7fd6d44ce858713bbf93080
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:34 2022 +0800

    Bluetooth: hci_core: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 39c1eb6fcbae8ce9bb71b2ac5cb609355a2b181b ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 9238f36a5a50 ("Bluetooth: Add request cmd_complete and cmd_status functions")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82256faaeb3abe4f9cf27e668f3d9f9ff20491d3
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:33 2022 +0800

    Bluetooth: hci_bcsp: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 7b503e339c1a80bf0051ec2d19c3bc777014ac61 ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33af776a8d988ddd0942923ef09ff7fb8ecaf279
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:32 2022 +0800

    Bluetooth: hci_h5: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 383630cc6758d619874c2e8bb2f68a61f3f9ef6e ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 43eb12d78960 ("Bluetooth: Fix/implement Three-wire reliable packet sending")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5991402fe091c33ee0702d92026a3520ee6440fc
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:31 2022 +0800

    Bluetooth: hci_ll: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 8f458f783dfbb19c1f1cb58ed06eeb701f52091b ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 166d2f6a4332 ("[Bluetooth] Add UART driver for Texas Instruments' BRF63xx chips")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0169acb41bc8634c50d3428edb2cae7ca304f673
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 7 10:18:30 2022 +0800

    Bluetooth: hci_qca: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit df4cfc91208e0a98f078223793f5871b1a82cc54 ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 0ff252c1976d ("Bluetooth: hciuart: Add support QCA chipset for UART")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7dc27702b598452141868ec108f40e1151f5171
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Dec 6 20:59:10 2022 +0800

    Bluetooth: btusb: don't call kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit b15a6bd3c80c77faec8317319b97f976b1a08332 ]
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So replace kfree_skb()
    with dev_kfree_skb_irq() under spin_lock_irqsave().
    
    Fixes: 803b58367ffb ("Bluetooth: btusb: Implement driver internal packet reassembly")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 214346a517241af1272171126b1f79cf16dcaf99
Author: Firo Yang <firo.yang@suse.com>
Date:   Fri Dec 9 13:48:54 2022 +0800

    sctp: sysctl: make extra pointers netns aware
    
    [ Upstream commit da05cecc4939c0410d56c29e252998b192756318 ]
    
    Recently, a customer reported that from their container whose
    net namespace is different to the host's init_net, they can't set
    the container's net.sctp.rto_max to any value smaller than
    init_net.sctp.rto_min.
    
    For instance,
    Host:
    sudo sysctl net.sctp.rto_min
    net.sctp.rto_min = 1000
    
    Container:
    echo 100 > /mnt/proc-net/sctp/rto_min
    echo 400 > /mnt/proc-net/sctp/rto_max
    echo: write error: Invalid argument
    
    This is caused by the check made from this'commit 4f3fdf3bc59c
    ("sctp: add check rto_min and rto_max in sysctl")'
    When validating the input value, it's always referring the boundary
    value set for the init_net namespace.
    
    Having container's rto_max smaller than host's init_net.sctp.rto_min
    does make sense. Consider that the rto between two containers on the
    same host is very likely smaller than it for two hosts.
    
    So to fix this problem, as suggested by Marcelo, this patch makes the
    extra pointers of rto_min, rto_max, pf_retrans, and ps_retrans point
    to the corresponding variables from the newly created net namespace while
    the new net namespace is being registered in sctp_sysctl_net_register.
    
    Fixes: 4f3fdf3bc59c ("sctp: add check rto_min and rto_max in sysctl")
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Firo Yang <firo.yang@suse.com>
    Link: https://lore.kernel.org/r/20221209054854.23889-1-firo.yang@suse.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13286ad1c7c49c606fdcba4cf66f953a1a16c1ca
Author: Eric Pilmore <epilmore@gigaio.com>
Date:   Thu Dec 8 16:06:59 2022 -0800

    ntb_netdev: Use dev_kfree_skb_any() in interrupt context
    
    [ Upstream commit 5f7d78b2b12a9d561f48fa00bab29b40f4616dad ]
    
    TX/RX callback handlers (ntb_netdev_tx_handler(),
    ntb_netdev_rx_handler()) can be called in interrupt
    context via the DMA framework when the respective
    DMA operations have completed. As such, any calls
    by these routines to free skb's, should use the
    interrupt context safe dev_kfree_skb_any() function.
    
    Previously, these callback handlers would call the
    interrupt unsafe version of dev_kfree_skb(). This has
    not presented an issue on Intel IOAT DMA engines as
    that driver utilizes tasklets rather than a hard
    interrupt handler, like the AMD PTDMA DMA driver.
    On AMD systems, a kernel WARNING message is
    encountered, which is being issued from
    skb_release_head_state() due to in_hardirq()
    being true.
    
    Besides the user visible WARNING from the kernel,
    the other symptom of this bug was that TCP/IP performance
    across the ntb_netdev interface was very poor, i.e.
    approximately an order of magnitude below what was
    expected. With the repair to use dev_kfree_skb_any(),
    kernel WARNINGs from skb_release_head_state() ceased
    and TCP/IP performance, as measured by iperf, was on
    par with expected results, approximately 20 Gb/s on
    AMD Milan based server. Note that this performance
    is comparable with Intel based servers.
    
    Fixes: 765ccc7bc3d91 ("ntb_netdev: correct skb leak")
    Fixes: 548c237c0a997 ("net: Add support for NTB virtual ethernet device")
    Signed-off-by: Eric Pilmore <epilmore@gigaio.com>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/20221209000659.8318-1-epilmore@gigaio.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4df544f592adbf6f65be0303af5d28da29ed78ee
Author: Jerry Ray <jerry.ray@microchip.com>
Date:   Fri Dec 9 09:35:02 2022 -0600

    net: lan9303: Fix read error execution path
    
    [ Upstream commit 8964916d206071b058c6351f88b1966bd58cbde0 ]
    
    This patch fixes an issue where a read failure of a port statistic counter
    will return unknown results.  While it is highly unlikely the read will
    ever fail, it is much cleaner to return a zero for the stat count.
    
    Fixes: a1292595e006 ("net: dsa: add new DSA switch driver for the SMSC-LAN9303")
    Signed-off-by: Jerry Ray <jerry.ray@microchip.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20221209153502.7429-1-jerry.ray@microchip.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39b48a92edaf66292a16106194e51a198ba1ada9
Author: Markus Schneider-Pargmann <msp@baylibre.com>
Date:   Tue Dec 6 12:57:25 2022 +0100

    can: tcan4x5x: Remove invalid write in clear_interrupts
    
    [ Upstream commit 40c9e4f676abbe194541d88e796341c92d5a13c0 ]
    
    Register 0x824 TCAN4X5X_MCAN_INT_REG is a read-only register. Any writes
    to this register do not have any effect.
    
    Remove this write. The m_can driver aldready clears the interrupts in
    m_can_isr() by writing to M_CAN_IR which is translated to register
    0x1050 which is a writable version of this register.
    
    Fixes: 5443c226ba91 ("can: tcan4x5x: Add tcan4x5x driver to the kernel")
    Signed-off-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Link: https://lore.kernel.org/all/20221206115728.1056014-9-msp@baylibre.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 334c9fb892323690add0e6d53e664a67830c6fa1
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Thu Dec 8 10:22:25 2022 -0600

    net: amd-xgbe: Check only the minimum speed for active/passive cables
    
    [ Upstream commit f8ab263d4d48e6dab752029bf562f20a2ee630ed ]
    
    There are cables that exist that can support speeds in excess of 10GbE.
    The driver, however, restricts the EEPROM advertised nominal bitrate to
    a specific range, which can prevent usage of cables that can support,
    for example, up to 25GbE.
    
    Rather than checking that an active or passive cable supports a specific
    range, only check for a minimum supported speed.
    
    Fixes: abf0a1c2b26a ("amd-xgbe: Add support for SFP+ modules")
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03ea9ba5fd239fbb61dc5865cb52bc27c243c125
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Thu Dec 8 10:22:24 2022 -0600

    net: amd-xgbe: Fix logic around active and passive cables
    
    [ Upstream commit 4998006c73afe44e2f639d55bd331c6c26eb039f ]
    
    SFP+ active and passive cables are copper cables with fixed SFP+ end
    connectors. Due to a misinterpretation of this, SFP+ active cables could
    end up not being recognized, causing the driver to fail to establish a
    connection.
    
    Introduce a new enum in SFP+ cable types, XGBE_SFP_CABLE_FIBER, that is
    the default cable type, and handle active and passive cables when they are
    specifically detected.
    
    Fixes: abf0a1c2b26a ("amd-xgbe: Add support for SFP+ modules")
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8eb5f8ae51323d892fb143a19094159d3e2412c7
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:47 2022 +0800

    net: amd: lance: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 6151d105dfce8c23edf30eed35e97f3d9b96a35c ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In these two cases, dev_kfree_skb() is called consume the xmited SKB,
    so replace it with dev_consume_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee3b1364af268e6ed0487165f301a69dd82000a4
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:46 2022 +0800

    hamradio: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 3727f742915f04f6fc550b80cf406999bd4e90d0 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In scc_discard_buffers(), dev_kfree_skb() is called to discard the SKBs,
    so replace it with dev_kfree_skb_irq().
    
    In scc_net_tx(), dev_kfree_skb() is called to drop the SKB that exceed
    queue length, so replace it with dev_kfree_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b242358a27a768f56814c4d9136d4662f5405e16
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:45 2022 +0800

    net: ethernet: dnet: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit f07fadcbee2a5e84caa67c7c445424200bffb60b ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    In this case, the lock is used to protected 'bp', so we can move
    dev_kfree_skb() after the spin_unlock_irqrestore().
    
    Fixes: 4796417417a6 ("dnet: Dave DNET ethernet controller driver (updated)")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit decede59ea06358416c855ae56b543cf0dbc35df
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 22:21:44 2022 +0800

    net: emaclite: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit d1678bf45f21fa5ae4a456f821858679556ea5f8 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in xemaclite_tx_timeout() to
    drop the SKB, when tx timeout, so replace it with dev_kfree_skb_irq().
    
    Fixes: bb81b2ddfa19 ("net: add Xilinx emac lite device driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c43def060cae288a9684861b495e7784d41ea084
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 21:37:35 2022 +0800

    net: apple: bmac: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 5fe02e046e6422c4adfdbc50206ec7186077da24 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in bmac_tx_timeout() to drop
    the SKB, when tx timeout, so replace it with dev_kfree_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e23250149f498044cbb4d8747a2f233858e36ff
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 21:37:34 2022 +0800

    net: apple: mace: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 3dfe3486c1cd4f82b466b7d307f23777137b8acc ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in mace_tx_timeout() to drop
    the SKB, when tx timeout, so replace it with dev_kfree_skb_irq().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91f09a776ae335ca836ed864b8f2a9461882a280
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Dec 8 20:04:52 2022 +0800

    net/tunnel: wait until all sk_user_data reader finish before releasing the sock
    
    [ Upstream commit 3cf7203ca620682165706f70a1b12b5194607dce ]
    
    There is a race condition in vxlan that when deleting a vxlan device
    during receiving packets, there is a possibility that the sock is
    released after getting vxlan_sock vs from sk_user_data. Then in
    later vxlan_ecn_decapsulate(), vxlan_get_sk_family() we will got
    NULL pointer dereference. e.g.
    
       #0 [ffffa25ec6978a38] machine_kexec at ffffffff8c669757
       #1 [ffffa25ec6978a90] __crash_kexec at ffffffff8c7c0a4d
       #2 [ffffa25ec6978b58] crash_kexec at ffffffff8c7c1c48
       #3 [ffffa25ec6978b60] oops_end at ffffffff8c627f2b
       #4 [ffffa25ec6978b80] page_fault_oops at ffffffff8c678fcb
       #5 [ffffa25ec6978bd8] exc_page_fault at ffffffff8d109542
       #6 [ffffa25ec6978c00] asm_exc_page_fault at ffffffff8d200b62
          [exception RIP: vxlan_ecn_decapsulate+0x3b]
          RIP: ffffffffc1014e7b  RSP: ffffa25ec6978cb0  RFLAGS: 00010246
          RAX: 0000000000000008  RBX: ffff8aa000888000  RCX: 0000000000000000
          RDX: 000000000000000e  RSI: ffff8a9fc7ab803e  RDI: ffff8a9fd1168700
          RBP: ffff8a9fc7ab803e   R8: 0000000000700000   R9: 00000000000010ae
          R10: ffff8a9fcb748980  R11: 0000000000000000  R12: ffff8a9fd1168700
          R13: ffff8aa000888000  R14: 00000000002a0000  R15: 00000000000010ae
          ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
       #7 [ffffa25ec6978ce8] vxlan_rcv at ffffffffc10189cd [vxlan]
       #8 [ffffa25ec6978d90] udp_queue_rcv_one_skb at ffffffff8cfb6507
       #9 [ffffa25ec6978dc0] udp_unicast_rcv_skb at ffffffff8cfb6e45
      #10 [ffffa25ec6978dc8] __udp4_lib_rcv at ffffffff8cfb8807
      #11 [ffffa25ec6978e20] ip_protocol_deliver_rcu at ffffffff8cf76951
      #12 [ffffa25ec6978e48] ip_local_deliver at ffffffff8cf76bde
      #13 [ffffa25ec6978ea0] __netif_receive_skb_one_core at ffffffff8cecde9b
      #14 [ffffa25ec6978ec8] process_backlog at ffffffff8cece139
      #15 [ffffa25ec6978f00] __napi_poll at ffffffff8ceced1a
      #16 [ffffa25ec6978f28] net_rx_action at ffffffff8cecf1f3
      #17 [ffffa25ec6978fa0] __softirqentry_text_start at ffffffff8d4000ca
      #18 [ffffa25ec6978ff0] do_softirq at ffffffff8c6fbdc3
    
    Reproducer: https://github.com/Mellanox/ovs-tests/blob/master/test-ovs-vxlan-remove-tunnel-during-traffic.sh
    
    Fix this by waiting for all sk_user_data reader to finish before
    releasing the sock.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Suggested-by: Jakub Sitnicki <jakub@cloudflare.com>
    Fixes: 6a93cc905274 ("udp-tunnel: Add a few more UDP tunnel APIs")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51e2d1b84acac39f79cacb60e6e154ce00a9d308
Author: Li Zetao <lizetao1@huawei.com>
Date:   Thu Dec 8 20:05:40 2022 +0800

    net: farsync: Fix kmemleak when rmmods farsync
    
    [ Upstream commit 2f623aaf9f31de968dea6169849706a2f9be444c ]
    
    There are two memory leaks reported by kmemleak:
    
      unreferenced object 0xffff888114b20200 (size 128):
        comm "modprobe", pid 4846, jiffies 4295146524 (age 401.345s)
        hex dump (first 32 bytes):
          e0 62 57 09 81 88 ff ff e0 62 57 09 81 88 ff ff  .bW......bW.....
          01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<ffffffff815bcd82>] kmalloc_trace+0x22/0x60
          [<ffffffff83d35c78>] __hw_addr_add_ex+0x198/0x6c0
          [<ffffffff83d3989d>] dev_addr_init+0x13d/0x230
          [<ffffffff83d1063d>] alloc_netdev_mqs+0x10d/0xe50
          [<ffffffff82b4a06e>] alloc_hdlcdev+0x2e/0x80
          [<ffffffffa016a741>] fst_add_one+0x601/0x10e0 [farsync]
          ...
    
      unreferenced object 0xffff88810b85b000 (size 1024):
        comm "modprobe", pid 4846, jiffies 4295146523 (age 401.346s)
        hex dump (first 32 bytes):
          00 00 b0 02 00 c9 ff ff 00 70 0a 00 00 c9 ff ff  .........p......
          00 00 00 f2 00 00 00 f3 0a 00 00 00 02 00 00 00  ................
        backtrace:
          [<ffffffff815bcd82>] kmalloc_trace+0x22/0x60
          [<ffffffffa016a294>] fst_add_one+0x154/0x10e0 [farsync]
          [<ffffffff82060e83>] local_pci_probe+0xd3/0x170
          ...
    
    The root cause is traced to the netdev and fst_card_info are not freed
    when removes one fst in fst_remove_one(), which may trigger oom if
    repeated insmod and rmmod module.
    
    Fix it by adding free_netdev() and kfree() in fst_remove_one(), just as
    the operations on the error handling path in fst_add_one().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b3f452d0cf7d8c10329bad52bf22aef2103c62b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 20:01:21 2022 +0800

    ethernet: s2io: don't call dev_kfree_skb() under spin_lock_irqsave()
    
    [ Upstream commit 6cee96e09df54ae17784c0f38a49e0ed8229b825 ]
    
    It is not allowed to call kfree_skb() or consume_skb() from hardware
    interrupt context or with hardware interrupts being disabled.
    
    It should use dev_kfree_skb_irq() or dev_consume_skb_irq() instead.
    The difference between them is free reason, dev_kfree_skb_irq() means
    the SKB is dropped in error and dev_consume_skb_irq() means the SKB
    is consumed in normal.
    
    In this case, dev_kfree_skb() is called in free_tx_buffers() to drop
    the SKBs in tx buffers, when the card is down, so replace it with
    dev_kfree_skb_irq() here.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b4af99b44861646013821019dd13a4ac48c0219
Author: ruanjinjie <ruanjinjie@huawei.com>
Date:   Sun Dec 11 10:33:37 2022 +0800

    of: overlay: fix null pointer dereferencing in find_dup_cset_node_entry() and find_dup_cset_prop()
    
    [ Upstream commit ee9d7a0e754568180a2f8ebc4aad226278a9116f ]
    
    When kmalloc() fail to allocate memory in kasprintf(), fn_1 or fn_2 will
    be NULL, and strcmp() will cause null pointer dereference.
    
    Fixes: 2fe0e8769df9 ("of: overlay: check prevents multiple fragments touching same property")
    Signed-off-by: ruanjinjie <ruanjinjie@huawei.com>
    Link: https://lore.kernel.org/r/20221211023337.592266-1-ruanjinjie@huawei.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14b349a15c297cf3e01b5deb4116f7cf297b6184
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Dec 7 08:54:10 2022 +0000

    drivers: net: qlcnic: Fix potential memory leak in qlcnic_sriov_init()
    
    [ Upstream commit 01de1123322e4fe1bbd0fcdf0982511b55519c03 ]
    
    If vp alloc failed in qlcnic_sriov_init(), all previously allocated vp
    needs to be freed.
    
    Fixes: f197a7aa6288 ("qlcnic: VF-PF communication channel implementation")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 787d1bae7f1101d161a3ced9fb2b9fe800da1322
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Dec 7 16:31:59 2022 +0800

    net: stmmac: selftests: fix potential memleak in stmmac_test_arpoffload()
    
    [ Upstream commit f150b63f3fa5fdd81e0dd6151e8850268e29438c ]
    
    The skb allocated by stmmac_test_get_arp_skb() hasn't been released in
    some error handling case, which will lead to a memory leak. Fix this up
    by adding kfree_skb() to release skb.
    
    Compile tested only.
    
    Fixes: 5e3fb0a6e2b3 ("net: stmmac: selftests: Implement the ARP Offload test")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ed99944572b118770253c81493a620673a0f96b
Author: Yongqiang Liu <liuyongqiang13@huawei.com>
Date:   Wed Dec 7 07:20:45 2022 +0000

    net: defxx: Fix missing err handling in dfx_init()
    
    [ Upstream commit ae18dcdff0f8d7e84cd3fd9f496518b5e72d185d ]
    
    When eisa_driver_register() or tc_register_driver() failed,
    the modprobe defxx would fail with some err log as follows:
    
     Error: Driver 'defxx' is already registered, aborting...
    
    Fix this issue by adding err hanling in dfx_init().
    
    Fixes: e89a2cfb7d7b5 ("[TC] defxx: TURBOchannel support")
    Signed-off-by: Yongqiang Liu <liuyongqiang13@huawei.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2227eee7ae1c57daeae350b47cfe050bfe9cdda
Author: Artem Chernyshev <artem.chernyshev@red-soft.ru>
Date:   Tue Dec 6 09:58:34 2022 +0300

    net: vmw_vsock: vmci: Check memcpy_from_msg()
    
    [ Upstream commit 44aa5a6dba8283bfda28b1517af4de711c5652a4 ]
    
    vmci_transport_dgram_enqueue() does not check the return value
    of memcpy_from_msg().  If memcpy_from_msg() fails, it is possible that
    uninitialized memory contents are sent unintentionally instead of user's
    message in the datagram to the destination.  Return with an error if
    memcpy_from_msg() fails.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 0f7db23a07af ("vmci_transport: switch ->enqeue_dgram, ->enqueue_stream and ->dequeue_stream to msghdr")
    Signed-off-by: Artem Chernyshev <artem.chernyshev@red-soft.ru>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e8fd1d0fab4d5c9a50d225dddc207deac12f13a
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 23 11:16:22 2022 +0800

    clk: socfpga: Fix memory leak in socfpga_gate_init()
    
    [ Upstream commit 0b8ba891ad4d1ef6bfa4c72efc83f9f9f855f68b ]
    
    Free @socfpga_clk and @ops on the error path to avoid memory leak issue.
    
    Fixes: a30a67be7b6e ("clk: socfpga: Don't have get_parent for single parent ops")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Link: https://lore.kernel.org/r/20221123031622.63171-1-xiujianfeng@huawei.com
    Acked-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b672ee71c1c32725b71a49be52ac974ea519c4a
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Tue Mar 2 15:41:49 2021 -0600

    clk: socfpga: use clk_hw_register for a5/c5
    
    [ Upstream commit 2c2b9c6067170de2a63e7e3d9f5bb205b870de7c ]
    
    As recommended by Stephen Boyd, convert the cyclone5/arria5 clock driver
    to use the clk_hw registration method.
    
    Suggested-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Link: https://lore.kernel.org/r/20210302214151.1333447-1-dinguyen@kernel.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Stable-dep-of: 0b8ba891ad4d ("clk: socfpga: Fix memory leak in socfpga_gate_init()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae8190f19f964ee1d2ad02044152fce4e505e00a
Author: Lee Jones <lee.jones@linaro.org>
Date:   Wed Jan 20 09:30:27 2021 +0000

    clk: socfpga: clk-pll: Remove unused variable 'rc'
    
    [ Upstream commit 75fddccbca32349570b2d53955982b4117fa5515 ]
    
    Fixes the following W=1 kernel build warning(s):
    
     drivers/clk/socfpga/clk-pll.c: In function ‘__socfpga_pll_init’:
     drivers/clk/socfpga/clk-pll.c:83:6: warning: variable ‘rc’ set but not used [-Wunused-but-set-variable]
    
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: linux-clk@vger.kernel.org
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Link: https://lore.kernel.org/r/20210120093040.1719407-8-lee.jones@linaro.org
    Acked-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Stable-dep-of: 0b8ba891ad4d ("clk: socfpga: Fix memory leak in socfpga_gate_init()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 782d0444eac986a4536cca2fb0f7e23de9e9e643
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Nov 22 12:04:10 2022 +0800

    blktrace: Fix output non-blktrace event when blk_classic option enabled
    
    [ Upstream commit f596da3efaf4130ff61cd029558845808df9bf99 ]
    
    When the blk_classic option is enabled, non-blktrace events must be
    filtered out. Otherwise, events of other types are output in the blktrace
    classic format, which is unexpected.
    
    The problem can be triggered in the following ways:
    
      # echo 1 > /sys/kernel/debug/tracing/options/blk_classic
      # echo 1 > /sys/kernel/debug/tracing/events/enable
      # echo blk > /sys/kernel/debug/tracing/current_tracer
      # cat /sys/kernel/debug/tracing/trace_pipe
    
    Fixes: c71a89615411 ("blktrace: add ftrace plugin")
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Link: https://lore.kernel.org/r/20221122040410.85113-1-yangjihong1@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2484f159648031989a69e3950f79b938697152fa
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Fri Dec 2 13:35:42 2022 +0800

    wifi: brcmfmac: Fix error return code in brcmf_sdio_download_firmware()
    
    [ Upstream commit c2f2924bc7f9ea75ef8d95863e710168f8196256 ]
    
    Fix to return a negative error code instead of 0 when
    brcmf_chip_set_active() fails. In addition, change the return
    value for brcmf_pcie_exit_download_state() to keep consistent.
    
    Fixes: d380ebc9b6fb ("brcmfmac: rename chip download functions")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Reviewed-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/1669959342-27144-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f89c0fbb8bdb8cf8139520a9631210dfbd5902bb
Author: Bitterblue Smith <rtl8821cerfe2@gmail.com>
Date:   Thu Dec 1 16:15:08 2022 +0200

    wifi: rtl8xxxu: Fix the channel width reporting
    
    [ Upstream commit 76c16af2cb10282274596e21add2c9f0b95c941b ]
    
    The gen 2 chips RTL8192EU and RTL8188FU periodically send the driver
    reports about the TX rate, and the driver passes these reports to
    sta_statistics. The reports from RTL8192EU may or may not include the
    channel width. The reports from RTL8188FU do not include it.
    
    Only access the c2h->ra_report.bw field if the report (skb) is big
    enough.
    
    The other problem fixed here is that the code was actually never
    changing the channel width initially reported by
    rtl8xxxu_bss_info_changed because the value of RATE_INFO_BW_20 is 0.
    
    Fixes: 0985d3a410ac ("rtl8xxxu: Feed current txrate information for mac80211")
    Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
    Reviewed-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/5b41f1ae-72e7-6b7a-2459-b736399a1c40@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d43003724879139e5e7140bae85bd6f670813d2f
Author: Bitterblue Smith <rtl8821cerfe2@gmail.com>
Date:   Thu Dec 1 16:13:57 2022 +0200

    wifi: rtl8xxxu: Add __packed to struct rtl8723bu_c2h
    
    [ Upstream commit dd469a754afdb782ba3033cee102147493dc39f4 ]
    
    This struct is used to access a sequence of bytes received from the
    wifi chip. It must not have any padding bytes between the members.
    
    This doesn't change anything on my system, possibly because currently
    none of the members need more than byte alignment.
    
    Fixes: b2b43b7837ba ("rtl8xxxu: Initial functionality to handle C2H events for 8723bu")
    Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
    Reviewed-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/1a270918-da22-ff5f-29fc-7855f740c5ba@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f3b4fa482220c539a0f2a73be3275482dd85def
Author: Kris Bahnsen <kris@embeddedTS.com>
Date:   Wed Dec 7 15:08:53 2022 -0800

    spi: spi-gpio: Don't set MOSI as an input if not 3WIRE mode
    
    [ Upstream commit 3a6f994f848a69deb2bf3cd9d130dd0c09730e55 ]
    
    The addition of 3WIRE support would affect MOSI direction even
    when still in standard (4 wire) mode. This can lead to MOSI being
    at an invalid logic level when a device driver sets an SPI
    message with a NULL tx_buf.
    
    spi.h states that if tx_buf is NULL then "zeros will be shifted
    out ... " If MOSI is tristated then the data shifted out is subject
    to pull resistors, keepers, or in the absence of those, noise.
    
    This issue came to light when using spi-gpio connected to an
    ADS7843 touchscreen controller. MOSI pulled high when clocking
    MISO data in caused the SPI device to interpret this as a command
    which would put the device in an unexpected and non-functional
    state.
    
    Fixes: 4b859db2c606 ("spi: spi-gpio: add SPI_3WIRE support")
    Fixes: 5132b3d28371 ("spi: gpio: Support 3WIRE high-impedance turn-around")
    Signed-off-by: Kris Bahnsen <kris@embeddedTS.com>
    Link: https://lore.kernel.org/r/20221207230853.6174-1-kris@embeddedTS.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da13355bb9961316d124f94dfc7a1385d0fb035a
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 23 11:20:15 2022 +0800

    clk: samsung: Fix memory leak in _samsung_clk_register_pll()
    
    [ Upstream commit 5174e5b0d1b669a489524192b6adcbb3c54ebc72 ]
    
    If clk_register() fails, @pll->rate_table may have allocated memory by
    kmemdup(), so it needs to be freed, otherwise will cause memory leak
    issue, this patch fixes it.
    
    Fixes: 3ff6e0d8d64d ("clk: samsung: Add support to register rate_table for samsung plls")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Link: https://lore.kernel.org/r/20221123032015.63980-1-xiujianfeng@huawei.com
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9b37ea8869e4e6da90c07a310d819a78cbd23d2
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Nov 17 15:02:36 2022 +0800

    media: coda: Add check for kmalloc
    
    [ Upstream commit 6e5e5defdb8b0186312c2f855ace175aee6daf9b ]
    
    As the kmalloc may return NULL pointer,
    it should be better to check the return value
    in order to avoid NULL poineter dereference,
    same as the others.
    
    Fixes: cb1d3a336371 ("[media] coda: add CODA7541 JPEG support")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35ddd00b36589cf948875b825eedaab1aefd5ad5
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Nov 17 14:56:52 2022 +0800

    media: coda: Add check for dcoda_iram_alloc
    
    [ Upstream commit 6b8082238fb8bb20f67e46388123e67a5bbc558d ]
    
    As the coda_iram_alloc may return NULL pointer,
    it should be better to check the return value
    in order to avoid NULL poineter dereference,
    same as the others.
    
    Fixes: b313bcc9a467 ("[media] coda: simplify IRAM setup")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fdb8661b964667454346ad6e7937b4e98990e35
Author: Liang He <windhl@126.com>
Date:   Tue Jul 19 22:10:23 2022 +0800

    media: c8sectpfe: Add of_node_put() when breaking out of loop
    
    [ Upstream commit 63ff05a1ad242a5a0f897921c87b70d601bda59c ]
    
    In configure_channels(), we should call of_node_put() when breaking
    out of for_each_child_of_node() which will automatically increase
    and decrease the refcount.
    
    Fixes: c5f5d0f99794 ("[media] c8sectpfe: STiH407/10 Linux DVB demux support")
    Signed-off-by: Liang He <windhl@126.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b1e96d3fd6a4d5dfe77cdbbf975868890312f96
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 21:35:39 2022 +0800

    mmc: mmci: fix return value check of mmc_add_host()
    
    [ Upstream commit b38a20f29a49ae04d23750d104b25400b792b98c ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    So fix this by checking the return value and goto error path which
    will call mmc_free_host().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109133539.3275664-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1922def5cb13528e23c9ddc13cf334e31499feb6
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 21:32:37 2022 +0800

    mmc: wbsd: fix return value check of mmc_add_host()
    
    [ Upstream commit dc5b9b50fc9d1334407e316e6e29a5097ef833bd ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    So fix this by checking the return value and goto error path which
    will call mmc_free_host(), besides, other resources also need be
    released.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109133237.3273558-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63400da6cd37a9793c19bb6aed7131b58b975a04
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 21:09:49 2022 +0800

    mmc: via-sdmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit e4e46fb61e3bb4628170810d3f2b996b709b90d9 ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    Fix this by checking the return value and goto error path which
    will call mmc_free_host().
    
    Fixes: f0bf7f61b840 ("mmc: Add new via-sdmmc host controller driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221108130949.1067699-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64b2c441171febf075bd9632aca579afda8ab9fb
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 20:34:17 2022 +0800

    mmc: meson-gx: fix return value check of mmc_add_host()
    
    [ Upstream commit 90935f16f2650ab7416fa2ffbe5c28cb39cf3f1e ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    Fix this by checking the return value and goto error path which
    will call mmc_free_host().
    
    Fixes: 51c5d8447bd7 ("MMC: meson: initial support for GX platforms")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://lore.kernel.org/r/20221108123417.479045-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb3d596267a98813a7a8206097d8d46c98505a0d
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 20:13:16 2022 +0800

    mmc: omap_hsmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit a525cad241c339ca00bf7ebf03c5180f2a9b767c ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    Fix this by checking the return value and goto error path wihch
    will call mmc_free_host().
    
    Fixes: a45c6cb81647 ("[ARM] 5369/1: omap mmc: Add new omap hsmmc controller for 2430 and 34xx, v3")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221108121316.340354-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00ac0f5f95920f003cd6ece53cdc759549b69118
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 20:28:19 2022 +0800

    mmc: atmel-mci: fix return value check of mmc_add_host()
    
    [ Upstream commit 9e6e8c43726673ca2abcaac87640b9215fd72f4c ]
    
    mmc_add_host() may return error, if we ignore its return value,
    it will lead two issues:
    1. The memory that allocated in mmc_alloc_host() is leaked.
    2. In the remove() path, mmc_remove_host() will be called to
       delete device, but it's not added yet, it will lead a kernel
       crash because of null-ptr-deref in device_del().
    
    So fix this by checking the return value and calling mmc_free_host()
    in the error path.
    
    Fixes: 7d2be0749a59 ("atmel-mci: Driver for Atmel on-chip MMC controllers")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221108122819.429975-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bedf64dda84b29151e41591d8ded9ff0e6d336a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:23 2022 +0800

    mmc: wmt-sdmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit 29276d56f6ed138db0f38cd31aedc0b725c8c76c ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host(), besides, clk_disable_unprepare() also needs be called.
    
    Fixes: 3a96dff0f828 ("mmc: SD/MMC Host Controller for Wondermedia WM8505/WM8650")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-10-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3049a3b927a40d89d4582ff1033cd7953be773c7
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:22 2022 +0800

    mmc: vub300: fix return value check of mmc_add_host()
    
    [ Upstream commit 0613ad2401f88bdeae5594c30afe318e93b14676 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host(), besides, the timer added before mmc_add_host() needs be del.
    
    And this patch fixes another missing call mmc_free_host() if usb_control_msg()
    fails.
    
    Fixes: 88095e7b473a ("mmc: Add new VUB300 USB-to-SD/SDIO/MMC driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-9-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aabbedcb6c9a72d12d35dc672e83f0c8064d8a61
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:21 2022 +0800

    mmc: toshsd: fix return value check of mmc_add_host()
    
    [ Upstream commit f670744a316ea983113a65313dcd387b5a992444 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host(), besides, free_irq() also needs be called.
    
    Fixes: a5eb8bbd66cc ("mmc: add Toshiba PCI SD controller driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-8-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fa922c7a3dd623fd59f1af50e8896fd9ca7f654
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:20 2022 +0800

    mmc: rtsx_usb_sdmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit fc38a5a10e9e5a75eb9189854abeb8405b214cc9 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and calling mmc_free_host() in the
    error path, besides, led_classdev_unregister() and pm_runtime_disable() also
    need be called.
    
    Fixes: c7f6558d84af ("mmc: Add realtek USB sdmmc host driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-7-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b896a9b7a0c37e9201fe4bc4d519a2ec193bd489
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:18 2022 +0800

    mmc: pxamci: fix return value check of mmc_add_host()
    
    [ Upstream commit 80e1ef3afb8bfbe768380b70ffe1b6cab87d1a3b ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host(), besides, ->exit() need be called to uninit the pdata.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-5-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3904eb97bb78fdca3e16d30a38ce5697b9686110
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:17 2022 +0800

    mmc: mxcmmc: fix return value check of mmc_add_host()
    
    [ Upstream commit cde600af7b413c9fe03e85c58c4279df90e91d13 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host().
    
    Fixes: d96be879ff46 ("mmc: Add a MX2/MX3 specific SDHC driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-4-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c3b301ca8b0cab392c71da8fcdfa499074f8e97
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:16 2022 +0800

    mmc: moxart: fix return value check of mmc_add_host()
    
    [ Upstream commit 0ca18d09c744fb030ae9bc5836c3e357e0237dea ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and goto error path which will call
    mmc_free_host().
    
    Fixes: 1b66e94e6b99 ("mmc: moxart: Add MOXA ART SD/MMC driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-3-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a6e5d0222804a3eaf2ea4cf893f412e7cf98cb2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 1 14:30:15 2022 +0800

    mmc: alcor: fix return value check of mmc_add_host()
    
    [ Upstream commit e93d1468f429475a753d6baa79b853b7ee5ef8c0 ]
    
    mmc_add_host() may return error, if we ignore its return value, the memory
    that allocated in mmc_alloc_host() will be leaked and it will lead a kernel
    crash because of deleting not added device in the remove path.
    
    So fix this by checking the return value and calling mmc_free_host() in the
    error path.
    
    Fixes: c5413ad815a6 ("mmc: add new Alcor Micro Cardreader SD/MMC driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221101063023.1664968-2-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81ea3d964f2b1ab7f64197375bca1fbc10a8c92d
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Dec 6 12:42:59 2022 -0500

    NFSv4.x: Fail client initialisation if state manager thread can't run
    
    [ Upstream commit b4e4f66901658fae0614dea5bf91062a5387eda7 ]
    
    If the state manager thread fails to start, then we should just mark the
    client initialisation as failed so that other processes or threads don't
    get stuck in nfs_wait_client_init_complete().
    
    Reported-by: ChenXiaoSong <chenxiaosong2@huawei.com>
    Fixes: 4697bd5e9419 ("NFSv4: Fix a race in the net namespace mount notification")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fbc3c78fa32d2e7b713a9031ba44a231a9f55b5
Author: Wang ShaoBo <bobo.shaobowang@huawei.com>
Date:   Thu Nov 24 17:23:42 2022 +0800

    SUNRPC: Fix missing release socket in rpc_sockname()
    
    [ Upstream commit 50fa355bc0d75911fe9d5072a5ba52cdb803aff7 ]
    
    socket dynamically created is not released when getting an unintended
    address family type in rpc_sockname(), direct to out_release for calling
    sock_release().
    
    Fixes: 2e738fdce22f ("SUNRPC: Add API to acquire source address")
    Signed-off-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be7d90fc3a8f59adf7f9440ec4451fe8c1f13d7c
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sun Nov 20 15:34:29 2022 +0800

    xprtrdma: Fix regbuf data not freed in rpcrdma_req_create()
    
    [ Upstream commit 9181f40fb2952fd59ecb75e7158620c9c669eee3 ]
    
    If rdma receive buffer allocate failed, should call rpcrdma_regbuf_free()
    to free the send buffer, otherwise, the buffer data will be leaked.
    
    Fixes: bb93a1ae2bf4 ("xprtrdma: Allocate req's regbufs at xprt create time")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0649129359219ce6ff380ec401f87308485c6ae3
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Dec 6 14:10:04 2022 +0800

    ALSA: mts64: fix possible null-ptr-defer in snd_mts64_interrupt
    
    [ Upstream commit cf2ea3c86ad90d63d1c572b43e1ca9276b0357ad ]
    
    I got a null-ptr-defer error report when I do the following tests
    on the qemu platform:
    
    make defconfig and CONFIG_PARPORT=m, CONFIG_PARPORT_PC=m,
    CONFIG_SND_MTS64=m
    
    Then making test scripts:
    cat>test_mod1.sh<<EOF
    modprobe snd-mts64
    modprobe snd-mts64
    EOF
    
    Executing the script, perhaps several times, we will get a null-ptr-defer
    report, as follow:
    
    syzkaller:~# ./test_mod.sh
    snd_mts64: probe of snd_mts64.0 failed with error -5
    modprobe: ERROR: could not insert 'snd_mts64': No such device
     BUG: kernel NULL pointer dereference, address: 0000000000000000
     #PF: supervisor write access in kernel mode
     #PF: error_code(0x0002) - not-present page
     PGD 0 P4D 0
     Oops: 0002 [#1] PREEMPT SMP PTI
     CPU: 0 PID: 205 Comm: modprobe Not tainted 6.1.0-rc8-00588-g76dcd734eca2 #6
     Call Trace:
      <IRQ>
      snd_mts64_interrupt+0x24/0xa0 [snd_mts64]
      parport_irq_handler+0x37/0x50 [parport]
      __handle_irq_event_percpu+0x39/0x190
      handle_irq_event_percpu+0xa/0x30
      handle_irq_event+0x2f/0x50
      handle_edge_irq+0x99/0x1b0
      __common_interrupt+0x5d/0x100
      common_interrupt+0xa0/0xc0
      </IRQ>
      <TASK>
      asm_common_interrupt+0x22/0x40
     RIP: 0010:_raw_write_unlock_irqrestore+0x11/0x30
      parport_claim+0xbd/0x230 [parport]
      snd_mts64_probe+0x14a/0x465 [snd_mts64]
      platform_probe+0x3f/0xa0
      really_probe+0x129/0x2c0
      __driver_probe_device+0x6d/0xc0
      driver_probe_device+0x1a/0xa0
      __device_attach_driver+0x7a/0xb0
      bus_for_each_drv+0x62/0xb0
      __device_attach+0xe4/0x180
      bus_probe_device+0x82/0xa0
      device_add+0x550/0x920
      platform_device_add+0x106/0x220
      snd_mts64_attach+0x2e/0x80 [snd_mts64]
      port_check+0x14/0x20 [parport]
      bus_for_each_dev+0x6e/0xc0
      __parport_register_driver+0x7c/0xb0 [parport]
      snd_mts64_module_init+0x31/0x1000 [snd_mts64]
      do_one_initcall+0x3c/0x1f0
      do_init_module+0x46/0x1c6
      load_module+0x1d8d/0x1e10
      __do_sys_finit_module+0xa2/0xf0
      do_syscall_64+0x37/0x90
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
     Kernel panic - not syncing: Fatal exception in interrupt
     Rebooting in 1 seconds..
    
    The mts wa not initialized during interrupt,  we add check for
    mts to fix this bug.
    
    Fixes: 68ab801e32bb ("[ALSA] Add snd-mts64 driver for ESI Miditerminal 4140")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221206061004.1222966-1-cuigaosheng1@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7df1fbe49bd2963e0478dfb7fa4c1062ab1e996a
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Sat Nov 26 11:31:26 2022 +0000

    media: saa7164: fix missing pci_disable_device()
    
    [ Upstream commit 57fb35d7542384cac8f198cd1c927540ad38b61a ]
    
    Add missing pci_disable_device() in the error path in saa7164_initdev().
    
    Fixes: 443c1228d505 ("V4L/DVB (12923): SAA7164: Add support for the NXP SAA7164 silicon")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46a9b31369d76ba0f01950a0331e924be05fff58
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Dec 5 14:21:22 2022 +0100

    ALSA: pcm: Set missing stop_operating flag at undoing trigger start
    
    [ Upstream commit 5c8cc93b06d1ff860327a273abf3ac006290d242 ]
    
    When a PCM trigger-start fails at snd_pcm_do_start(), PCM core tries
    to undo the action at snd_pcm_undo_start() by issuing the trigger STOP
    manually.  At that point, we forgot to set the stop_operating flag,
    hence the sync-stop won't be issued at the next prepare or other
    calls.
    
    This patch adds the missing stop_operating flag at
    snd_pcm_undo_start().
    
    Fixes: 1e850beea278 ("ALSA: pcm: Add the support for sync-stop operation")
    Link: https://lore.kernel.org/r/b4e71631-4a94-613-27b2-fb595792630@carlh.net
    Link: https://lore.kernel.org/r/20221205132124.11585-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be719496ae6a7fc325e9e5056a52f63ebc84cc0c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 2 11:16:40 2022 +0000

    bpf, sockmap: fix race in sock_map_free()
    
    [ Upstream commit 0a182f8d607464911756b4dbef5d6cad8de22469 ]
    
    sock_map_free() calls release_sock(sk) without owning a reference
    on the socket. This can cause use-after-free as syzbot found [1]
    
    Jakub Sitnicki already took care of a similar issue
    in sock_hash_free() in commit 75e68e5bf2c7 ("bpf, sockhash:
    Synchronize delete from bucket list on map free")
    
    [1]
    refcount_t: decrement hit 0; leaking memory.
    WARNING: CPU: 0 PID: 3785 at lib/refcount.c:31 refcount_warn_saturate+0x17c/0x1a0 lib/refcount.c:31
    Modules linked in:
    CPU: 0 PID: 3785 Comm: kworker/u4:6 Not tainted 6.1.0-rc7-syzkaller-00103-gef4d3ea40565 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
    Workqueue: events_unbound bpf_map_free_deferred
    RIP: 0010:refcount_warn_saturate+0x17c/0x1a0 lib/refcount.c:31
    Code: 68 8b 31 c0 e8 75 71 15 fd 0f 0b e9 64 ff ff ff e8 d9 6e 4e fd c6 05 62 9c 3d 0a 01 48 c7 c7 80 bb 68 8b 31 c0 e8 54 71 15 fd <0f> 0b e9 43 ff ff ff 89 d9 80 e1 07 80 c1 03 38 c1 0f 8c a2 fe ff
    RSP: 0018:ffffc9000456fb60 EFLAGS: 00010246
    RAX: eae59bab72dcd700 RBX: 0000000000000004 RCX: ffff8880207057c0
    RDX: 0000000000000000 RSI: 0000000000000201 RDI: 0000000000000000
    RBP: 0000000000000004 R08: ffffffff816fdabd R09: fffff520008adee5
    R10: fffff520008adee5 R11: 1ffff920008adee4 R12: 0000000000000004
    R13: dffffc0000000000 R14: ffff88807b1c6c00 R15: 1ffff1100f638dcf
    FS: 0000000000000000(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30c30000 CR3: 000000000d08e000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    __refcount_dec include/linux/refcount.h:344 [inline]
    refcount_dec include/linux/refcount.h:359 [inline]
    __sock_put include/net/sock.h:779 [inline]
    tcp_release_cb+0x2d0/0x360 net/ipv4/tcp_output.c:1092
    release_sock+0xaf/0x1c0 net/core/sock.c:3468
    sock_map_free+0x219/0x2c0 net/core/sock_map.c:356
    process_one_work+0x81c/0xd10 kernel/workqueue.c:2289
    worker_thread+0xb14/0x1330 kernel/workqueue.c:2436
    kthread+0x266/0x300 kernel/kthread.c:376
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    </TASK>
    
    Fixes: 7e81a3530206 ("bpf: Sockmap, ensure sock lock held during tear down")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jakub Sitnicki <jakub@cloudflare.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Song Liu <songliubraving@fb.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/20221202111640.2745533-1-edumazet@google.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c3ef38a0d58d2aa9b597a1d7ae485f765ce7b86
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Oct 23 23:31:57 2022 +0200

    hwmon: (jc42) Restore the min/max/critical temperatures on resume
    
    [ Upstream commit 084ed144c448fd5bc8ed5a58247153fbbfd115c3 ]
    
    The JC42 compatible thermal sensor on Kingston KSM32ES8/16ME DIMMs
    (using Micron E-Die) is an ST Microelectronics STTS2004 (manufacturer
    0x104a, device 0x2201). It does not keep the previously programmed
    minimum, maximum and critical temperatures after system suspend and
    resume (which is a shutdown / startup cycle for the JC42 temperature
    sensor). This results in an alarm on system resume because the hardware
    default for these values is 0°C (so any environment temperature greater
    than 0°C will trigger the alarm).
    
    Example before system suspend:
      jc42-i2c-0-1a
      Adapter: SMBus PIIX4 adapter port 0 at 0b00
      temp1:        +34.8°C  (low  =  +0.0°C)
                             (high = +85.0°C, hyst = +85.0°C)
                             (crit = +95.0°C, hyst = +95.0°C)
    
    Example after system resume (without this change):
      jc42-i2c-0-1a
      Adapter: SMBus PIIX4 adapter port 0 at 0b00
      temp1:        +34.8°C  (low  =  +0.0°C)             ALARM (HIGH, CRIT)
                             (high =  +0.0°C, hyst =  +0.0°C)
                             (crit =  +0.0°C, hyst =  +0.0°C)
    
    Apply the cached values from the JC42_REG_TEMP_UPPER,
    JC42_REG_TEMP_LOWER, JC42_REG_TEMP_CRITICAL and JC42_REG_SMBUS (where
    the SMBUS register is not related to this issue but a side-effect of
    using regcache_sync() during system resume with the previously
    cached/programmed values. This fixes the alarm due to the hardware
    defaults of 0°C because the previously applied limits (set by userspace)
    are re-applied on system resume.
    
    Fixes: 175c490c9e7f ("hwmon: (jc42) Add support for STTS2004 and AT30TSE004")
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20221023213157.11078-3-martin.blumenstingl@googlemail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7720ef53b23b965717ccdbf9038294f54dfa506
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Oct 23 23:31:56 2022 +0200

    hwmon: (jc42) Convert register access and caching to regmap/regcache
    
    [ Upstream commit 8f2fa4726faf01094d7a5be7bd0c120c565f54d9 ]
    
    Switch the jc42 driver to use an I2C regmap to access the registers.
    Also move over to regmap's built-in caching instead of adding a
    custom caching implementation. This works for JC42_REG_TEMP_UPPER,
    JC42_REG_TEMP_LOWER and JC42_REG_TEMP_CRITICAL as these values never
    change except when explicitly written. The cache For JC42_REG_TEMP is
    dropped (regmap can't cache it because it's volatile, meaning it can
    change at any time) as well for simplicity and consistency with other
    drivers.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20221023213157.11078-2-martin.blumenstingl@googlemail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Stable-dep-of: 084ed144c448 ("hwmon: (jc42) Restore the min/max/critical temperatures on resume")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a03c31d08f95dca9633a552de167b9e625833a8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Dec 2 10:51:11 2022 +0800

    regulator: core: fix resource leak in regulator_register()
    
    [ Upstream commit ba62319a42c50e6254e98b3f316464fac8e77968 ]
    
    I got some resource leak reports while doing fault injection test:
    
      OF: ERROR: memory leak, expected refcount 1 instead of 100,
      of_node_get()/of_node_put() unbalanced - destroy cset entry:
      attach overlay node /i2c/pmic@64/regulators/buck1
    
    unreferenced object 0xffff88810deea000 (size 512):
      comm "490-i2c-rt5190a", pid 253, jiffies 4294859840 (age 5061.046s)
      hex dump (first 32 bytes):
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
        ff ff ff ff ff ff ff ff a0 1e 00 a1 ff ff ff ff  ................
      backtrace:
        [<00000000d78541e2>] kmalloc_trace+0x21/0x110
        [<00000000b343d153>] device_private_init+0x32/0xd0
        [<00000000be1f0c70>] device_add+0xb2d/0x1030
        [<00000000e3e6344d>] regulator_register+0xaf2/0x12a0
        [<00000000e2f5e754>] devm_regulator_register+0x57/0xb0
        [<000000008b898197>] rt5190a_probe+0x52a/0x861 [rt5190a_regulator]
    
    unreferenced object 0xffff88810b617b80 (size 32):
      comm "490-i2c-rt5190a", pid 253, jiffies 4294859904 (age 5060.983s)
      hex dump (first 32 bytes):
        72 65 67 75 6c 61 74 6f 72 2e 32 38 36 38 2d 53  regulator.2868-S
        55 50 50 4c 59 00 ff ff 29 00 00 00 2b 00 00 00  UPPLY...)...+...
      backtrace:
        [<000000009da9280d>] __kmalloc_node_track_caller+0x44/0x1b0
        [<0000000025c6a4e5>] kstrdup+0x3a/0x70
        [<00000000790efb69>] create_regulator+0xc0/0x4e0
        [<0000000005ed203a>] regulator_resolve_supply+0x2d4/0x440
        [<0000000045796214>] regulator_register+0x10b3/0x12a0
        [<00000000e2f5e754>] devm_regulator_register+0x57/0xb0
        [<000000008b898197>] rt5190a_probe+0x52a/0x861 [rt5190a_regulator]
    
    After calling regulator_resolve_supply(), the 'rdev->supply' is set
    by set_supply(), after this set, in the error path, the resources
    need be released, so call regulator_put() to avoid the leaks.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Fixes: 8a866d527ac0 ("regulator: core: Resolve supply name earlier to prevent double-init")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221202025111.496402-1-yangyingliang@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74ac7c9ee2d486c501e7864c903f5098fc477acd
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Mon Oct 17 09:42:30 2022 +0800

    configfs: fix possible memory leak in configfs_create_dir()
    
    [ Upstream commit c65234b283a65cfbfc94619655e820a5e55199eb ]
    
    kmemleak reported memory leaks in configfs_create_dir():
    
    unreferenced object 0xffff888009f6af00 (size 192):
      comm "modprobe", pid 3777, jiffies 4295537735 (age 233.784s)
      backtrace:
        kmem_cache_alloc (mm/slub.c:3250 mm/slub.c:3256 mm/slub.c:3263 mm/slub.c:3273)
        new_fragment (./include/linux/slab.h:600 fs/configfs/dir.c:163)
        configfs_register_subsystem (fs/configfs/dir.c:1857)
        basic_write (drivers/hwtracing/stm/p_basic.c:14) stm_p_basic
        do_one_initcall (init/main.c:1296)
        do_init_module (kernel/module/main.c:2455)
        ...
    
    unreferenced object 0xffff888003ba7180 (size 96):
      comm "modprobe", pid 3777, jiffies 4295537735 (age 233.784s)
      backtrace:
        kmem_cache_alloc (mm/slub.c:3250 mm/slub.c:3256 mm/slub.c:3263 mm/slub.c:3273)
        configfs_new_dirent (./include/linux/slab.h:723 fs/configfs/dir.c:194)
        configfs_make_dirent (fs/configfs/dir.c:248)
        configfs_create_dir (fs/configfs/dir.c:296)
        configfs_attach_group.isra.28 (fs/configfs/dir.c:816 fs/configfs/dir.c:852)
        configfs_register_subsystem (fs/configfs/dir.c:1881)
        basic_write (drivers/hwtracing/stm/p_basic.c:14) stm_p_basic
        do_one_initcall (init/main.c:1296)
        do_init_module (kernel/module/main.c:2455)
        ...
    
    This is because the refcount is not correct in configfs_make_dirent().
    For normal stage, the refcount is changing as:
    
    configfs_register_subsystem()
      configfs_create_dir()
        configfs_make_dirent()
          configfs_new_dirent() # set s_count = 1
          dentry->d_fsdata = configfs_get(sd); # s_count = 2
    ...
    configfs_unregister_subsystem()
      configfs_remove_dir()
        remove_dir()
          configfs_remove_dirent() # s_count = 1
        dput() ...
          *dentry_unlink_inode()*
            configfs_d_iput() # s_count = 0, release
    
    However, if we failed in configfs_create():
    
    configfs_register_subsystem()
      configfs_create_dir()
        configfs_make_dirent() # s_count = 2
        ...
        configfs_create() # fail
        ->out_remove:
        configfs_remove_dirent(dentry)
          configfs_put(sd) # s_count = 1
          return PTR_ERR(inode);
    
    There is no inode in the error path, so the configfs_d_iput() is lost
    and makes sd and fragment memory leaked.
    
    To fix this, when we failed in configfs_create(), manually call
    configfs_put(sd) to keep the refcount correct.
    
    Fixes: 7063fbf22611 ("[PATCH] configfs: User-driven configuration filesystem")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cf92d23569223f00a108327a03584a754924895
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Nov 29 17:48:13 2022 +0100

    hsr: Synchronize sequence number updates.
    
    [ Upstream commit 5c7aa13210c3abdd34fd421f62347665ec6eb551 ]
    
    hsr_register_frame_out() compares new sequence_nr vs the old one
    recorded in hsr_node::seq_out and if the new sequence_nr is higher then
    it will be written to hsr_node::seq_out as the new value.
    
    This operation isn't locked so it is possible that two frames with the
    same sequence number arrive (via the two slave devices) and are fed to
    hsr_register_frame_out() at the same time. Both will pass the check and
    update the sequence counter later to the same value. As a result the
    content of the same packet is fed into the stack twice.
    
    This was noticed by running ping and observing DUP being reported from
    time to time.
    
    Instead of using the hsr_priv::seqnr_lock for the whole receive path (as
    it is for sending in the master node) add an additional lock that is only
    used for sequence number checks and updates.
    
    Add a per-node lock that is used during sequence number reads and
    updates.
    
    Fixes: f421436a591d3 ("net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c671f2d10d83cd685123af485f8d1663a725a785
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Nov 29 17:48:12 2022 +0100

    hsr: Synchronize sending frames to have always incremented outgoing seq nr.
    
    [ Upstream commit 06afd2c31d338fa762548580c1bf088703dd1e03 ]
    
    Sending frames via the hsr (master) device requires a sequence number
    which is tracked in hsr_priv::sequence_nr and protected by
    hsr_priv::seqnr_lock. Each time a new frame is sent, it will obtain a
    new id and then send it via the slave devices.
    Each time a packet is sent (via hsr_forward_do()) the sequence number is
    checked via hsr_register_frame_out() to ensure that a frame is not
    handled twice. This make sense for the receiving side to ensure that the
    frame is not injected into the stack twice after it has been received
    from both slave ports.
    
    There is no locking to cover the sending path which means the following
    scenario is possible:
    
      CPU0                          CPU1
      hsr_dev_xmit(skb1)            hsr_dev_xmit(skb2)
       fill_frame_info()             fill_frame_info()
        hsr_fill_frame_info()         hsr_fill_frame_info()
         handle_std_frame()            handle_std_frame()
          skb1's sequence_nr = 1
                                        skb2's sequence_nr = 2
       hsr_forward_do()              hsr_forward_do()
    
                                       hsr_register_frame_out(, 2)  // okay, send)
    
        hsr_register_frame_out(, 1) // stop, lower seq duplicate
    
    Both skbs (or their struct hsr_frame_info) received an unique id.
    However since skb2 was sent before skb1, the higher sequence number was
    recorded in hsr_register_frame_out() and the late arriving skb1 was
    dropped and never sent.
    
    This scenario has been observed in a three node HSR setup, with node1 +
    node2 having ping and iperf running in parallel. From time to time ping
    reported a missing packet. Based on tracing that missing ping packet did
    not leave the system.
    
    It might be possible (didn't check) to drop the sequence number check on
    the sending side. But if the higher sequence number leaves on wire
    before the lower does and the destination receives them in that order
    and it will drop the packet with the lower sequence number and never
    inject into the stack.
    Therefore it seems the only way is to lock the whole path from obtaining
    the sequence number and sending via dev_queue_xmit() and assuming the
    packets leave on wire in the same order (and don't get reordered by the
    NIC).
    
    Cover the whole path for the master interface from obtaining the ID
    until after it has been forwarded via hsr_forward_skb() to ensure the
    skbs are sent to the NIC in the order of the assigned sequence numbers.
    
    Fixes: f421436a591d3 ("net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28921ec555d526f42bd305458f51e2f827765844
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Nov 29 17:48:11 2022 +0100

    hsr: Disable netpoll.
    
    [ Upstream commit d5c7652eb16fa203d82546e0285136d7b321ffa9 ]
    
    The hsr device is a software device. Its
    net_device_ops::ndo_start_xmit() routine will process the packet and
    then pass the resulting skb to dev_queue_xmit().
    During processing, hsr acquires a lock with spin_lock_bh()
    (hsr_add_node()) which needs to be promoted to the _irq() suffix in
    order to avoid a potential deadlock.
    Then there are the warnings in dev_queue_xmit() (due to
    local_bh_disable() with disabled interrupts) left.
    
    Instead trying to address those (there is qdisc and…) for netpoll sake,
    just disable netpoll on hsr.
    
    Disable netpoll on hsr and replace the _irqsave() locking with _bh().
    
    Fixes: f421436a591d3 ("net/hsr: Add support for the High-availability Seamless Redundancy protocol (HSRv0)")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cee8543f002174f7501eb4d024da2b12121971d
Author: George McCollister <george.mccollister@gmail.com>
Date:   Tue Feb 9 19:02:10 2021 -0600

    net: hsr: generate supervision frame without HSR/PRP tag
    
    [ Upstream commit 78be9217c4014cebac4d549cc2db1f2886d5a8fb ]
    
    For a switch to offload insertion of HSR/PRP tags, frames must not be
    sent to the CPU facing switch port with a tag. Generate supervision frames
    (eth type ETH_P_PRP) without HSR v1 (ETH_P_HSR)/PRP tag and rely on
    create_tagged_frame which inserts it later. This will allow skipping the
    tag insertion for all outgoing frames in the future which is required for
    HSR v1/PRP tag insertions to be offloaded.
    
    HSR v0 supervision frames always contain tag information so insertion of
    the tag can't be offloaded. IEC 62439-3 Ed.2.0 (HSR v1) specifically
    notes that this was changed since v0 to allow offloading.
    
    Signed-off-by: George McCollister <george.mccollister@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Tested-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: d5c7652eb16f ("hsr: Disable netpoll.")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38d13a2a9e522582cf872b9453477940a0fa9a7e
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Nov 29 17:48:09 2022 +0100

    hsr: Add a rcu-read lock to hsr_forward_skb().
    
    [ Upstream commit 5aa2820177af650293b2f9f1873c1f6f8e4ad7a4 ]
    
    hsr_forward_skb() a skb and keeps information in an on-stack
    hsr_frame_info. hsr_get_node() assigns hsr_frame_info::node_src which is
    from a RCU list. This pointer is used later in hsr_forward_do().
    I don't see a reason why this pointer can't vanish midway since there is
    no guarantee that hsr_forward_skb() is invoked from an RCU read section.
    
    Use rcu_read_lock() to protect hsr_frame_info::node_src from its
    assignment until it is no longer used.
    
    Fixes: f266a683a4804 ("net/hsr: Better frame dispatch")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee4425e81d9b5bc7cd9c650acf07b586338815c0
Author: Christian Marangi <ansuelsmth@gmail.com>
Date:   Tue Nov 8 22:56:25 2022 +0100

    clk: qcom: clk-krait: fix wrong div2 functions
    
    [ Upstream commit d676d3a3717cf726d3affedbe5ba98fc4ccad7b3 ]
    
    Currently div2 value is applied to the wrong bits. This is caused by a
    bug in the code where the shift is done only for lpl, for anything
    else the mask is not shifted to the correct bits.
    
    Fix this by correctly shift if lpl is not supported.
    
    Fixes: 4d7dc77babfe ("clk: qcom: Add support for Krait clocks")
    Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221108215625.30186-1-ansuelsmth@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f25402d8a00a6b12ead75b96c03c5b7813f2aa8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 1 20:27:05 2022 +0800

    regulator: core: fix module refcount leak in set_supply()
    
    [ Upstream commit da46ee19cbd8344d6860816b4827a7ce95764867 ]
    
    If create_regulator() fails in set_supply(), the module refcount
    needs be put to keep refcount balanced.
    
    Fixes: e2c09ae7a74d ("regulator: core: Increase refcount for regulator supply's module")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221201122706.4055992-2-yangyingliang@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f532db69ab1342b16a8ba90ace9a55b79bbb8011
Author: Deren Wu <deren.wu@mediatek.com>
Date:   Sun Nov 27 10:35:37 2022 +0800

    wifi: mt76: fix coverity overrun-call in mt76_get_txpower()
    
    [ Upstream commit 03dd0d49de7db680a856fa566963bb8421f46368 ]
    
    Make sure the nss is valid for nss_delta array. Return zero
    if the index is invalid.
    
    Coverity message:
    Event overrun-call: Overrunning callee's array of size 4 by passing
    argument "n_chains" (which evaluates to 15) in call to
    "mt76_tx_power_nss_delta".
    int delta = mt76_tx_power_nss_delta(n_chains);
    
    Fixes: 07cda406308b ("mt76: fix rounding issues on converting per-chain and combined txpower")
    Signed-off-by: Deren Wu <deren.wu@mediatek.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ecb7a6e61b1e1605f49bb8a195e599e777baa4a
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Wed Nov 9 17:02:37 2022 +0800

    wifi: cfg80211: Fix not unregister reg_pdev when load_builtin_regdb_keys() fails
    
    [ Upstream commit 833a9fd28c9b7ccb39a334721379e992dc1c0c89 ]
    
    In regulatory_init_db(), when it's going to return a error, reg_pdev
    should be unregistered. When load_builtin_regdb_keys() fails it doesn't
    do it and makes cfg80211 can't be reload with report:
    
    sysfs: cannot create duplicate filename '/devices/platform/regulatory.0'
     ...
     <TASK>
     dump_stack_lvl+0x79/0x9b
     sysfs_warn_dup.cold+0x1c/0x29
     sysfs_create_dir_ns+0x22d/0x290
     kobject_add_internal+0x247/0x800
     kobject_add+0x135/0x1b0
     device_add+0x389/0x1be0
     platform_device_add+0x28f/0x790
     platform_device_register_full+0x376/0x4b0
     regulatory_init+0x9a/0x4b2 [cfg80211]
     cfg80211_init+0x84/0x113 [cfg80211]
     ...
    
    Fixes: 90a53e4432b1 ("cfg80211: implement regdb signature checking")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221109090237.214127-1-chenzhongjin@huawei.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2c0b94f48373ee743a4d63825a9d52364418837
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Thu Nov 17 14:45:00 2022 +0800

    wifi: mac80211: fix memory leak in ieee80211_if_add()
    
    [ Upstream commit 13e5afd3d773c6fc6ca2b89027befaaaa1ea7293 ]
    
    When register_netdevice() failed in ieee80211_if_add(), ndev->tstats
    isn't released. Fix it.
    
    Fixes: 5a490510ba5f ("mac80211: use per-CPU TX/RX statistics")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20221117064500.319983-1-shaozhengchao@huawei.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0163248dbafcd7a108b4a2b66f64d668f6e35bb
Author: Alexander Sverdlin <alexander.sverdlin@siemens.com>
Date:   Wed Nov 30 17:29:27 2022 +0100

    spi: spidev: mask SPI_CS_HIGH in SPI_IOC_RD_MODE
    
    [ Upstream commit 7dbfa445ff7393d1c4c066c1727c9e0af1251958 ]
    
    Commit f3186dd87669 ("spi: Optionally use GPIO descriptors for CS GPIOs")
    has changed the user-space interface so that bogus SPI_CS_HIGH started
    to appear in the mask returned by SPI_IOC_RD_MODE even for active-low CS
    pins. Commit 138c9c32f090
    ("spi: spidev: Fix CS polarity if GPIO descriptors are used") fixed only
    SPI_IOC_WR_MODE part of the problem. Let's fix SPI_IOC_RD_MODE
    symmetrically.
    
    Test case:
    
            #include <sys/ioctl.h>
            #include <fcntl.h>
            #include <linux/spi/spidev.h>
    
            int main(int argc, char **argv)
            {
                    char modew = SPI_CPHA;
                    char moder;
                    int f = open("/dev/spidev0.0", O_RDWR);
    
                    if (f < 0)
                            return 1;
    
                    ioctl(f, SPI_IOC_WR_MODE, &modew);
                    ioctl(f, SPI_IOC_RD_MODE, &moder);
    
                    return moder == modew ? 0 : 2;
            }
    
    Fixes: f3186dd87669 ("spi: Optionally use GPIO descriptors for CS GPIOs")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@siemens.com>
    Link: https://lore.kernel.org/r/20221130162927.539512-1-alexander.sverdlin@siemens.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab19f402a12d61969642ea6889b63e7441504fe9
Author: Dan Carpenter <error27@gmail.com>
Date:   Mon Nov 28 14:06:14 2022 +0300

    bonding: uninitialized variable in bond_miimon_inspect()
    
    [ Upstream commit e5214f363dabca240446272dac54d404501ad5e5 ]
    
    The "ignore_updelay" variable needs to be initialized to false.
    
    Fixes: f8a65ab2f3ff ("bonding: fix link recovery in mode 2 when updelay is nonzero")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Link: https://lore.kernel.org/r/Y4SWJlh3ohJ6EPTL@kili
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c58df40e3e67fd7603290b5dd24c47cdc1f9ef74
Author: Pengcheng Yang <yangpc@wangsu.com>
Date:   Tue Nov 29 18:40:40 2022 +0800

    bpf, sockmap: Fix data loss caused by using apply_bytes on ingress redirect
    
    [ Upstream commit 9072931f020bfd907d6d89ee21ff1481cd78b407 ]
    
    Use apply_bytes on ingress redirect, when apply_bytes is less than
    the length of msg data, some data may be skipped and lost in
    bpf_tcp_ingress().
    
    If there is still data in the scatterlist that has not been consumed,
    we cannot move the msg iter.
    
    Fixes: 604326b41a6f ("bpf, sockmap: convert to generic sk_msg interface")
    Signed-off-by: Pengcheng Yang <yangpc@wangsu.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
    Link: https://lore.kernel.org/bpf/1669718441-2654-4-git-send-email-yangpc@wangsu.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28e4a763cd4a2b1a78852216ef4bd7df3a05cec6
Author: Pengcheng Yang <yangpc@wangsu.com>
Date:   Tue Nov 29 18:40:38 2022 +0800

    bpf, sockmap: Fix repeated calls to sock_put() when msg has more_data
    
    [ Upstream commit 7a9841ca025275b5b0edfb0b618934abb6ceec15 ]
    
    In tcp_bpf_send_verdict() redirection, the eval variable is assigned to
    __SK_REDIRECT after the apply_bytes data is sent, if msg has more_data,
    sock_put() will be called multiple times.
    
    We should reset the eval variable to __SK_NONE every time more_data
    starts.
    
    This causes:
    
    IPv4: Attempt to release TCP socket in state 1 00000000b4c925d7
    ------------[ cut here ]------------
    refcount_t: addition on 0; use-after-free.
    WARNING: CPU: 5 PID: 4482 at lib/refcount.c:25 refcount_warn_saturate+0x7d/0x110
    Modules linked in:
    CPU: 5 PID: 4482 Comm: sockhash_bypass Kdump: loaded Not tainted 6.0.0 #1
    Hardware name: Red Hat KVM, BIOS 1.11.0-2.el7 04/01/2014
    Call Trace:
     <TASK>
     __tcp_transmit_skb+0xa1b/0xb90
     ? __alloc_skb+0x8c/0x1a0
     ? __kmalloc_node_track_caller+0x184/0x320
     tcp_write_xmit+0x22a/0x1110
     __tcp_push_pending_frames+0x32/0xf0
     do_tcp_sendpages+0x62d/0x640
     tcp_bpf_push+0xae/0x2c0
     tcp_bpf_sendmsg_redir+0x260/0x410
     ? preempt_count_add+0x70/0xa0
     tcp_bpf_send_verdict+0x386/0x4b0
     tcp_bpf_sendmsg+0x21b/0x3b0
     sock_sendmsg+0x58/0x70
     __sys_sendto+0xfa/0x170
     ? xfd_validate_state+0x1d/0x80
     ? switch_fpu_return+0x59/0xe0
     __x64_sys_sendto+0x24/0x30
     do_syscall_64+0x37/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: cd9733f5d75c ("tcp_bpf: Fix one concurrency problem in the tcp_bpf_send_verdict function")
    Signed-off-by: Pengcheng Yang <yangpc@wangsu.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
    Link: https://lore.kernel.org/bpf/1669718441-2654-2-git-send-email-yangpc@wangsu.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 429a2a4258d524b2144dd9c9d87ba93f7492c7f6
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Nov 22 16:00:09 2022 +0100

    netfilter: conntrack: set icmpv6 redirects as RELATED
    
    [ Upstream commit 7d7cfb48d81353e826493d24c7cec7360950968f ]
    
    icmp conntrack will set icmp redirects as RELATED, but icmpv6 will not
    do this.
    
    For icmpv6, only icmp errors (code <= 128) are examined for RELATED state.
    ICMPV6 Redirects are part of neighbour discovery mechanism, those are
    handled by marking a selected subset (e.g.  neighbour solicitations) as
    UNTRACKED, but not REDIRECT -- they will thus be flagged as INVALID.
    
    Add minimal support for REDIRECTs.  No parsing of neighbour options is
    added for simplicity, so this will only check that we have the embeeded
    original header (ND_OPT_REDIRECT_HDR), and then attempt to do a flow
    lookup for this tuple.
    
    Also extend the existing test case to cover redirects.
    
    Fixes: 9fb9cbb1082d ("[NETFILTER]: Add nf_conntrack subsystem.")
    Reported-by: Eric Garver <eric@garver.life>
    Link: https://github.com/firewalld/firewalld/issues/1046
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Acked-by: Eric Garver <eric@garver.life>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd0e9ee50cb59926f9056cb3cd08f818bc039876
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 29 00:04:02 2022 +0800

    ASoC: pcm512x: Fix PM disable depth imbalance in pcm512x_probe
    
    [ Upstream commit 97b801be6f8e53676b9f2b105f54e35c745c1b22 ]
    
    The pm_runtime_enable will increase power disable depth. Thus
    a pairing decrement is needed on the error handling path to
    keep it balanced according to context. We fix it by going to
    err_pm instead of err_clk.
    
    Fixes:f086ba9d5389c ("ASoC: pcm512x: Support mastering BCLK/LRCLK using the PLL")
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220928160402.126140-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c1ddf7c664b5bc91f14b1bdeaa45520ef1760e4
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Nov 22 19:30:43 2022 +0800

    drm/amdgpu: Fix PCI device refcount leak in amdgpu_atrm_get_bios()
    
    [ Upstream commit ca54639c7752edf1304d92ff4d0c049d4efc9ba0 ]
    
    As comment of pci_get_class() says, it returns a pci_device with its
    refcount increased and decreased the refcount for the input parameter
    @from if it is not NULL.
    
    If we break the loop in amdgpu_atrm_get_bios() with 'pdev' not NULL, we
    need to call pci_dev_put() to decrease the refcount. Add the missing
    pci_dev_put() to avoid refcount leak.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3991d98a8a07b71c02f3a39f77d6d9a7f575a5c4
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Nov 22 19:30:42 2022 +0800

    drm/radeon: Fix PCI device refcount leak in radeon_atrm_get_bios()
    
    [ Upstream commit 725a521a18734f65de05b8d353b5bd0d3ca4c37a ]
    
    As comment of pci_get_class() says, it returns a pci_device with its
    refcount increased and decreased the refcount for the input parameter
    @from if it is not NULL.
    
    If we break the loop in radeon_atrm_get_bios() with 'pdev' not NULL, we
    need to call pci_dev_put() to decrease the refcount. Add the missing
    pci_dev_put() to avoid refcount leak.
    
    Fixes: d8ade3526b2a ("drm/radeon: handle non-VGA class pci devices with ATRM")
    Fixes: c61e2775873f ("drm/radeon: split ATRM support out from the ATPX handler (v3)")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a012cdd4fd62b947bea6d746f3ee99c752c3dbdf
Author: Guchun Chen <guchun.chen@amd.com>
Date:   Tue Nov 22 17:33:24 2022 +0800

    drm/amd/pm/smu11: BACO is supported when it's in BACO state
    
    [ Upstream commit 6dca7efe6e522bf213c7dab691fa580d82f48f74 ]
    
    Return true early if ASIC is in BACO state already, no need
    to talk to SMU. It can fix the issue that driver was not
    calling BACO exit at all in runtime pm resume, and a timing
    issue leading to a PCI AER error happened eventually.
    
    Fixes: 8795e182b02d ("PCI/portdrv: Don't disable AER reporting in get_port_device_capability()")
    Suggested-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Guchun Chen <guchun.chen@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57491967ad8f865a9a81d08c36b26facd14d84e5
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Mon Nov 28 11:49:16 2022 +0100

    ASoC: mediatek: mt8173: Enable IRQ when pdata is ready
    
    [ Upstream commit 4cbb264d4e9136acab2c8fd39e39ab1b1402b84b ]
    
    If the device does not come straight from reset, we might receive an IRQ
    before we are ready to handle it.
    
    Fixes:
    
    [    2.334737] Unable to handle kernel read from unreadable memory at virtual address 00000000000001e4
    [    2.522601] Call trace:
    [    2.525040]  regmap_read+0x1c/0x80
    [    2.528434]  mt8173_afe_irq_handler+0x40/0xf0
    ...
    [    2.598921]  start_kernel+0x338/0x42c
    
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Fixes: ee0bcaff109f ("ASoC: mediatek: Add AFE platform driver")
    Link: https://lore.kernel.org/r/20221128-mt8173-afe-v1-0-70728221628f@chromium.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52c9ad56c19d45ac03cfd6e8258166deb70802e7
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Nov 11 17:11:08 2021 +0100

    ASoC: mediatek: mt8173: Fix debugfs registration for components
    
    [ Upstream commit 8c32984bc7da29828260ac514d5d4967f7e8f62d ]
    
    When registering the mt8173-afe-pcm driver, we are also adding two
    components: one is for the PCM DAIs and one is for the HDMI DAIs, but
    when debugfs is enabled, we're getting the following issue:
    
    [   17.279176] debugfs: Directory '11220000.audio-controller' with parent 'mtk-rt5650' already present!
    [   17.288345] debugfs: Directory '11220000.audio-controller' with parent 'mtk-rt5650' already present!
    
    To overcome to that without any potentially big rewrite of this driver,
    similarly to what was done in mt8195-afe-pcm, add a debugfs_prefix to
    the components before actually adding them.
    
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20211111161108.502344-1-angelogioacchino.delregno@collabora.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: 4cbb264d4e91 ("ASoC: mediatek: mt8173: Enable IRQ when pdata is ready")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae966649f665bc3868b935157dd4a3c31810dcc0
Author: Ben Greear <greearb@candelatech.com>
Date:   Wed Nov 23 23:02:06 2022 +0200

    wifi: iwlwifi: mvm: fix double free on tx path.
    
    [ Upstream commit 0473cbae2137b963bd0eaa74336131cb1d3bc6c3 ]
    
    We see kernel crashes and lockups and KASAN errors related to ax210
    firmware crashes.  One of the KASAN dumps pointed at the tx path,
    and it appears there is indeed a way to double-free an skb.
    
    If iwl_mvm_tx_skb_sta returns non-zero, then the 'skb' sent into the
    method will be freed.  But, in case where we build TSO skb buffer,
    the skb may also be freed in error case.  So, return 0 in that particular
    error case and do cleanup manually.
    
    BUG: KASAN: use-after-free in __list_del_entry_valid+0x12/0x90
    iwlwifi 0000:06:00.0: 0x00000000 | tsf hi
    Read of size 8 at addr ffff88813cfa4ba0 by task btserver/9650
    
    CPU: 4 PID: 9650 Comm: btserver Tainted: G        W         5.19.8+ #5
    iwlwifi 0000:06:00.0: 0x00000000 | time gp1
    Hardware name: Default string Default string/SKYBAY, BIOS 5.12 02/19/2019
    Call Trace:
     <TASK>
     dump_stack_lvl+0x55/0x6d
     print_report.cold.12+0xf2/0x684
    iwlwifi 0000:06:00.0: 0x1D0915A8 | time gp2
     ? __list_del_entry_valid+0x12/0x90
     kasan_report+0x8b/0x180
    iwlwifi 0000:06:00.0: 0x00000001 | uCode revision type
     ? __list_del_entry_valid+0x12/0x90
     __list_del_entry_valid+0x12/0x90
    iwlwifi 0000:06:00.0: 0x00000048 | uCode version major
     tcp_update_skb_after_send+0x5d/0x170
     __tcp_transmit_skb+0xb61/0x15c0
    iwlwifi 0000:06:00.0: 0xDAA05125 | uCode version minor
     ? __tcp_select_window+0x490/0x490
    iwlwifi 0000:06:00.0: 0x00000420 | hw version
     ? trace_kmalloc_node+0x29/0xd0
     ? __kmalloc_node_track_caller+0x12a/0x260
     ? memset+0x1f/0x40
     ? __build_skb_around+0x125/0x150
     ? __alloc_skb+0x1d4/0x220
     ? skb_zerocopy_clone+0x55/0x230
    iwlwifi 0000:06:00.0: 0x00489002 | board version
     ? kmalloc_reserve+0x80/0x80
     ? rcu_read_lock_bh_held+0x60/0xb0
     tcp_write_xmit+0x3f1/0x24d0
    iwlwifi 0000:06:00.0: 0x034E001C | hcmd
     ? __check_object_size+0x180/0x350
    iwlwifi 0000:06:00.0: 0x24020000 | isr0
     tcp_sendmsg_locked+0x8a9/0x1520
    iwlwifi 0000:06:00.0: 0x01400000 | isr1
     ? tcp_sendpage+0x50/0x50
    iwlwifi 0000:06:00.0: 0x48F0000A | isr2
     ? lock_release+0xb9/0x400
     ? tcp_sendmsg+0x14/0x40
    iwlwifi 0000:06:00.0: 0x00C3080C | isr3
     ? lock_downgrade+0x390/0x390
     ? do_raw_spin_lock+0x114/0x1d0
    iwlwifi 0000:06:00.0: 0x00200000 | isr4
     ? rwlock_bug.part.2+0x50/0x50
    iwlwifi 0000:06:00.0: 0x034A001C | last cmd Id
     ? rwlock_bug.part.2+0x50/0x50
     ? lockdep_hardirqs_on_prepare+0xe/0x200
    iwlwifi 0000:06:00.0: 0x0000C2F0 | wait_event
     ? __local_bh_enable_ip+0x87/0xe0
     ? inet_send_prepare+0x220/0x220
    iwlwifi 0000:06:00.0: 0x000000C4 | l2p_control
     tcp_sendmsg+0x22/0x40
     sock_sendmsg+0x5f/0x70
    iwlwifi 0000:06:00.0: 0x00010034 | l2p_duration
     __sys_sendto+0x19d/0x250
    iwlwifi 0000:06:00.0: 0x00000007 | l2p_mhvalid
     ? __ia32_sys_getpeername+0x40/0x40
    iwlwifi 0000:06:00.0: 0x00000000 | l2p_addr_match
     ? rcu_read_lock_held_common+0x12/0x50
     ? rcu_read_lock_sched_held+0x5a/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? rcu_read_lock_sched_held+0x5a/0xd0
     ? rcu_read_lock_sched_held+0x5a/0xd0
     ? lock_release+0xb9/0x400
     ? lock_downgrade+0x390/0x390
     ? ktime_get+0x64/0x130
     ? ktime_get+0x8d/0x130
     ? rcu_read_lock_held_common+0x12/0x50
     ? rcu_read_lock_sched_held+0x5a/0xd0
     ? rcu_read_lock_held_common+0x12/0x50
     ? rcu_read_lock_sched_held+0x5a/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     __x64_sys_sendto+0x6f/0x80
     do_syscall_64+0x34/0xb0
     entry_SYSCALL_64_after_hwframe+0x46/0xb0
    RIP: 0033:0x7f1d126e4531
    Code: 00 00 00 00 0f 1f 44 00 00 f3 0f 1e fa 48 8d 05 35 80 0c 00 41 89 ca 8b 00 85 c0 75 1c 45 31 c9 45 31 c0 b8 2c 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 67 c3 66 0f 1f 44 00 00 55 48 83 ec 20 48 89
    RSP: 002b:00007ffe21a679d8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 000000000000ffdc RCX: 00007f1d126e4531
    RDX: 0000000000010000 RSI: 000000000374acf0 RDI: 0000000000000014
    RBP: 00007ffe21a67ac0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000010
    R13: 0000000000000000 R14: 0000000000000001 R15: 0000000000000000
     </TASK>
    
    Allocated by task 9650:
     kasan_save_stack+0x1c/0x40
     __kasan_slab_alloc+0x6d/0x90
     kmem_cache_alloc_node+0xf3/0x2b0
     __alloc_skb+0x191/0x220
     tcp_stream_alloc_skb+0x3f/0x330
     tcp_sendmsg_locked+0x67c/0x1520
     tcp_sendmsg+0x22/0x40
     sock_sendmsg+0x5f/0x70
     __sys_sendto+0x19d/0x250
     __x64_sys_sendto+0x6f/0x80
     do_syscall_64+0x34/0xb0
     entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Freed by task 9650:
     kasan_save_stack+0x1c/0x40
     kasan_set_track+0x21/0x30
     kasan_set_free_info+0x20/0x30
     __kasan_slab_free+0x102/0x170
     kmem_cache_free+0xc8/0x3e0
     iwl_mvm_mac_itxq_xmit+0x124/0x270 [iwlmvm]
     ieee80211_queue_skb+0x874/0xd10 [mac80211]
     ieee80211_xmit_fast+0xf80/0x1180 [mac80211]
     __ieee80211_subif_start_xmit+0x287/0x680 [mac80211]
     ieee80211_subif_start_xmit+0xcd/0x730 [mac80211]
     dev_hard_start_xmit+0xf6/0x420
     __dev_queue_xmit+0x165b/0x1b50
     ip_finish_output2+0x66e/0xfb0
     __ip_finish_output+0x487/0x6d0
     ip_output+0x11c/0x350
     __ip_queue_xmit+0x36b/0x9d0
     __tcp_transmit_skb+0xb35/0x15c0
     tcp_write_xmit+0x3f1/0x24d0
     tcp_sendmsg_locked+0x8a9/0x1520
     tcp_sendmsg+0x22/0x40
     sock_sendmsg+0x5f/0x70
     __sys_sendto+0x19d/0x250
     __x64_sys_sendto+0x6f/0x80
     do_syscall_64+0x34/0xb0
     entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    The buggy address belongs to the object at ffff88813cfa4b40
     which belongs to the cache skbuff_fclone_cache of size 472
    The buggy address is located 96 bytes inside of
     472-byte region [ffff88813cfa4b40, ffff88813cfa4d18)
    
    The buggy address belongs to the physical page:
    page:ffffea0004f3e900 refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff88813cfa6c40 pfn:0x13cfa4
    head:ffffea0004f3e900 order:2 compound_mapcount:0 compound_pincount:0
    flags: 0x5fff8000010200(slab|head|node=0|zone=2|lastcpupid=0x3fff)
    raw: 005fff8000010200 ffffea0004656b08 ffffea0008e8cf08 ffff8881081a5240
    raw: ffff88813cfa6c40 0000000000170015 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88813cfa4a80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff88813cfa4b00: fc fc fc fc fc fc fc fc fa fb fb fb fb fb fb fb
    >ffff88813cfa4b80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                   ^
     ffff88813cfa4c00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88813cfa4c80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Fixes: 08f7d8b69aaf ("iwlwifi: mvm: bring back mvm GSO code")
    Link: https://lore.kernel.org/linux-wireless/20220928193057.16132-1-greearb@candelatech.com/
    Tested-by: Amol Jawale <amol.jawale@candelatech.com>
    Signed-off-by: Ben Greear <greearb@candelatech.com>
    Link: https://lore.kernel.org/r/20221123225313.21b1ee31d666.I3b3ba184433dd2a544d91eeeda29b467021824ae@changeid
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae66695aa1eb38734c84939ddfad72413c1b6509
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Sat Nov 26 10:14:29 2022 +0800

    ALSA: asihpi: fix missing pci_disable_device()
    
    [ Upstream commit 9d86515c3d4c0564a0c31a2df87d735353a1971e ]
    
    pci_disable_device() need be called while module exiting, switch to use
    pcim_enable(), pci_disable_device() will be called in pcim_release().
    
    Fixes: 3285ea10e9b0 ("ALSA: asihpi - Interrelated HPI tidy up.")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Link: https://lore.kernel.org/r/20221126021429.3029562-1-liushixin2@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5458bc0f9df639d83471ca384152cc62dbee0aeb
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Nov 14 17:30:39 2022 -0500

    NFS: Fix an Oops in nfs_d_automount()
    
    [ Upstream commit 35e3b6ae84935d0d7ff76cbdaa83411b0ad5e471 ]
    
    When mounting from a NFSv4 referral, path->dentry can end up being a
    negative dentry, so derive the struct nfs_server from the dentry
    itself instead.
    
    Fixes: 2b0143b5c986 ("VFS: normal filesystems (and lustre): d_inode() annotations")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc60485b9347e6dd3e0e6511ba9491d09e5608f8
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Fri Nov 4 13:20:01 2022 -0400

    NFSv4: Fix a deadlock between nfs4_open_recover_helper() and delegreturn
    
    [ Upstream commit 51069e4aef6257b0454057359faed0ab0c9af083 ]
    
    If we're asked to recover open state while a delegation return is
    outstanding, then the state manager thread cannot use a cached open, so
    if the server returns a delegation, we can end up deadlocked behind the
    pending delegreturn.
    To avoid this problem, let's just ask the server not to give us a
    delegation unless we're explicitly reclaiming one.
    
    Fixes: be36e185bd26 ("NFSv4: nfs4_open_recover_helper() must set share access")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d16d7870fd8f48dabbe35ce4092d5101bca30e7c
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Wed Oct 19 13:12:11 2022 -0400

    NFSv4.2: Fix initialisation of struct nfs4_label
    
    [ Upstream commit c528f70f504434eaff993a5ddd52203a2010d51f ]
    
    The call to nfs4_label_init_security() should return a fully initialised
    label.
    
    Fixes: aa9c2669626c ("NFS: Client implementation of Labeled-NFS")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15feece7afcff25766a66aacc380652eebc0a114
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Oct 18 18:21:14 2022 -0400

    NFSv4.2: Fix a memory stomp in decode_attr_security_label
    
    [ Upstream commit 43c1031f7110967c240cb6e922adcfc4b8899183 ]
    
    We must not change the value of label->len if it is zero, since that
    indicates we stored a label.
    
    Fixes: b4487b935452 ("nfs: Fix getxattr kernel panic and memory overflow")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58a1023eb5f71a7560b7dd502696d3dee380444b
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Oct 18 16:44:47 2022 -0400

    NFSv4.2: Clear FATTR4_WORD2_SECURITY_LABEL when done decoding
    
    [ Upstream commit eef7314caf2d73a94b68ba293cd105154d3a664e ]
    
    We need to clear the FATTR4_WORD2_SECURITY_LABEL bitmap flag
    irrespective of whether or not the label is too long.
    
    Fixes: aa9c2669626c ("NFS: Client implementation of Labeled-NFS")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 193691ff5b7619308433ce4cdfb3e1eda5ec3d41
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Nov 16 11:07:50 2022 +0800

    ASoC: mediatek: mtk-btcvsd: Add checks for write and read of mtk_btcvsd_snd
    
    [ Upstream commit d067b3378a78c9c3048ac535e31c171b6f5b5846 ]
    
    As the mtk_btcvsd_snd_write and mtk_btcvsd_snd_read may return error,
    it should be better to catch the exception.
    
    Fixes: 4bd8597dc36c ("ASoC: mediatek: add btcvsd driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Link: https://lore.kernel.org/r/20221116030750.40500-1-jiasheng@iscas.ac.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6013c3de955711ae977b4ca62247aa21fb961676
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Thu Oct 27 00:46:48 2022 -0700

    ASoC: dt-bindings: wcd9335: fix reset line polarity in example
    
    [ Upstream commit 34cb111f8a7b98b5fec809dd194003bca20ef1b2 ]
    
    When resetting the block, the reset line is being driven low and then
    high, which means that the line in DTS should be annotated as "active
    low".
    
    Fixes: 1877c9fda1b7 ("ASoC: dt-bindings: add dt bindings for wcd9335 audio codec")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20221027074652.1044235-2-dmitry.torokhov@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf2cbca714725d2a7698e777a4263b4f33483ac6
Author: Zhang Zekun <zhangzekun11@huawei.com>
Date:   Tue Aug 2 08:50:50 2022 +0000

    drm/tegra: Add missing clk_disable_unprepare() in tegra_dc_probe()
    
    [ Upstream commit 7ad4384d53c67672a8720cdc2ef638d7d1710ab8 ]
    
    Add the missing clk_disable_unprepare() before return from
    tegra_dc_probe() in the error handling path.
    
    Fixes: f68ba6912bd2 ("drm/tegra: dc: Link DC1 to DC0 on Tegra20")
    Signed-off-by: Zhang Zekun <zhangzekun11@huawei.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54ab1276001b11312dc144e84a7805be420b70db
Author: Aakarsh Jain <aakarsh.jain@samsung.com>
Date:   Mon Nov 14 11:50:23 2022 +0000

    media: s5p-mfc: Add variant data for MFC v7 hardware for Exynos 3250 SoC
    
    [ Upstream commit f50ebe10f5d8092c37e2bd430c78e03bf38b1e20 ]
    
    Commit 5441e9dafdfc6dc40 ("[media] s5p-mfc: Core support for MFC v7")
    which adds mfc v7 support for Exynos3250 and use the same compatible
    string as used by Exynos5240 but both the IPs are a bit different in
    terms of IP clock.
    Add variant driver data based on the new compatible string
    "samsung,exynos3250-mfc" for Exynos3250 SoC.
    
    Suggested-by: Alim Akhtar <alim.akhtar@samsung.com>
    Fixes: 5441e9dafdfc ("[media] s5p-mfc: Core support for MFC v7")
    Signed-off-by: Aakarsh Jain <aakarsh.jain@samsung.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 559891d430e3f3a178040c4371ed419edbfa7d65
Author: Baisong Zhong <zhongbaisong@huawei.com>
Date:   Sun Nov 20 06:59:18 2022 +0000

    media: dvb-usb: az6027: fix null-ptr-deref in az6027_i2c_xfer()
    
    [ Upstream commit 0ed554fd769a19ea8464bb83e9ac201002ef74ad ]
    
    Wei Chen reports a kernel bug as blew:
    
    general protection fault, probably for non-canonical address
    KASAN: null-ptr-deref in range [0x0000000000000010-0x0000000000000017]
    ...
    Call Trace:
    <TASK>
    __i2c_transfer+0x77e/0x1930 drivers/i2c/i2c-core-base.c:2109
    i2c_transfer+0x1d5/0x3d0 drivers/i2c/i2c-core-base.c:2170
    i2cdev_ioctl_rdwr+0x393/0x660 drivers/i2c/i2c-dev.c:297
    i2cdev_ioctl+0x75d/0x9f0 drivers/i2c/i2c-dev.c:458
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:870 [inline]
    __se_sys_ioctl+0xfb/0x170 fs/ioctl.c:856
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7fd834a8bded
    
    In az6027_i2c_xfer(), if msg[i].addr is 0x99,
    a null-ptr-deref will caused when accessing msg[i].buf.
    For msg[i].len is 0 and msg[i].buf is null.
    
    Fix this by checking msg[i].len in az6027_i2c_xfer().
    
    Link: https://lore.kernel.org/lkml/CAO4mrfcPHB5aQJO=mpqV+p8mPLNg-Fok0gw8gZ=zemAfMGTzMg@mail.gmail.com/
    
    Link: https://lore.kernel.org/linux-media/20221120065918.2160782-1-zhongbaisong@huawei.com
    Fixes: 76f9a820c867 ("V4L/DVB: AZ6027: Initial import of the driver")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Baisong Zhong <zhongbaisong@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e34cf6caccf5bbb3698ed7d49f2f4a3b8d9ebd91
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Nov 8 03:30:05 2022 +0000

    media: dvb-core: Fix ignored return value in dvb_register_frontend()
    
    [ Upstream commit a574359e2e71ce16be212df3a082ed60a4bd2c5f ]
    
    In dvb_register_frontend(), dvb_register_device() is possible to fail
    but its return value is ignored.
    
    It will cause use-after-free when module is removed, because in
    dvb_unregister_frontend() it tries to unregister a not registered
    device.
    
    BUG: KASAN: use-after-free in dvb_remove_device+0x18b/0x1f0 [dvb_core]
    Read of size 4 at addr ffff88800dff4824 by task rmmod/428
    CPU: 3 PID: 428 Comm: rmmod
    Call Trace:
     <TASK>
     ...
     dvb_remove_device+0x18b/0x1f0 [dvb_core]
     dvb_unregister_frontend+0x7b/0x130 [dvb_core]
     vidtv_bridge_remove+0x6e/0x160 [dvb_vidtv_bridge]
     ...
    
    Fix this by catching return value of dvb_register_device().
    However the fe->refcount can't be put to zero immediately, because
    there are still modules calling dvb_frontend_detach() when
    dvb_register_frontend() fails.
    
    Link: https://lore.kernel.org/linux-media/20221108033005.169095-1-chenzhongjin@huawei.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05be5d56f7adfbd89dae445ab4f9d15868c53a7f
Author: ZhangPeng <zhangpeng362@huawei.com>
Date:   Fri Nov 25 07:01:56 2022 +0000

    pinctrl: pinconf-generic: add missing of_node_put()
    
    [ Upstream commit 5ead93289815a075d43c415e35c8beafafb801c9 ]
    
    of_node_put() needs to be called when jumping out of the loop, since
    for_each_available_child_of_node() will increase the refcount of node.
    
    Fixes: c7289500e29d ("pinctrl: pinconf-generic: scan also referenced phandle node")
    Signed-off-by: ZhangPeng <zhangpeng362@huawei.com>
    Link: https://lore.kernel.org/r/20221125070156.3535855-1-zhangpeng362@huawei.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9916497a12397ef59b30e1b02601a31ec07e157c
Author: Dario Binacchi <dario.binacchi@amarulasolutions.com>
Date:   Thu Nov 17 12:36:34 2022 +0100

    clk: imx: replace osc_hdmi with dummy
    
    [ Upstream commit e7fa365ff66f16772dc06b480cd78f858d10856b ]
    
    There is no occurrence of the hdmi oscillator in the reference manual
    (document IMX8MNRM Rev 2, 07/2022). Further, if we consider the indexes
    76-81 and 134 of the "Clock Root" table of chapter 5 of the RM, there is
    no entry for the source select bits 101b, which is the setting referenced
    by "osc_hdmi".
    Fix by renaming "osc_hdmi" with "dummy", a clock which has already been
    used for missing source select bits.
    
    Tested on the BSH SystemMaster (SMM) S2 board.
    
    Fixes: 96d6392b54dbb ("clk: imx: Add support for i.MX8MN clock driver")
    Signed-off-by: Dario Binacchi <dario.binacchi@amarulasolutions.com>
    Acked-by: Marco Felsch <m.felsch@pengutronix.de>
    Signed-off-by: Abel Vesa <abel.vesa@linaro.org>
    Link: https://lore.kernel.org/r/20221117113637.1978703-3-dario.binacchi@amarulasolutions.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dabf7b675c1672a4b564e603f4cdd06649fbc372
Author: Gautam Menghani <gautammenghani201@gmail.com>
Date:   Wed Oct 19 06:02:14 2022 +0100

    media: imon: fix a race condition in send_packet()
    
    [ Upstream commit 813ceef062b53d68f296aa3cb944b21a091fabdb ]
    
    The function send_packet() has a race condition as follows:
    
    func send_packet()
    {
        // do work
        call usb_submit_urb()
        mutex_unlock()
        wait_for_event_interruptible()  <-- lock gone
        mutex_lock()
    }
    
    func vfd_write()
    {
        mutex_lock()
        call send_packet()  <- prev call is not completed
        mutex_unlock()
    }
    
    When the mutex is unlocked and the function send_packet() waits for the
    call to complete, vfd_write() can start another call, which leads to the
    "URB submitted while active" warning in usb_submit_urb().
    Fix this by removing the mutex_unlock() call in send_packet() and using
    mutex_lock_interruptible().
    
    Link: https://syzkaller.appspot.com/bug?id=e378e6a51fbe6c5cc43e34f131cc9a315ef0337e
    
    Fixes: 21677cfc562a ("V4L/DVB: ir-core: add imon driver")
    Reported-by: syzbot+0c3cb6dc05fbbdc3ad66@syzkaller.appspotmail.com
    Signed-off-by: Gautam Menghani <gautammenghani201@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14d85b600bb1f6f8ef61fa8fc1907e2e623d8350
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Thu Nov 10 07:26:33 2022 +0000

    media: vimc: Fix wrong function called when vimc_init() fails
    
    [ Upstream commit f74d3f326d1d5b8951ce263c59a121ecfa65e7c0 ]
    
    In vimc_init(), when platform_driver_register(&vimc_pdrv) fails,
    platform_driver_unregister(&vimc_pdrv) is wrongly called rather than
    platform_device_unregister(&vimc_pdev), which causes kernel warning:
    
     Unexpected driver unregister!
     WARNING: CPU: 1 PID: 14517 at drivers/base/driver.c:270 driver_unregister+0x8f/0xb0
     RIP: 0010:driver_unregister+0x8f/0xb0
     Call Trace:
      <TASK>
      vimc_init+0x7d/0x1000 [vimc]
      do_one_initcall+0xd0/0x4e0
      do_init_module+0x1cf/0x6b0
      load_module+0x65c2/0x7820
    
    Fixes: 4a29b7090749 ("[media] vimc: Subdevices as modules")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4518d7cc38b7d1a7ce5a7878ca601c91e19fe47d
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 24 14:05:10 2022 +0000

    ASoC: qcom: Add checks for devm_kcalloc
    
    [ Upstream commit 1bf5ee979076ceb121ee51c95197d890b1cee7f4 ]
    
    As the devm_kcalloc may return NULL, the return value needs to be checked
    to avoid NULL poineter dereference.
    
    Fixes: 24caf8d9eb10 ("ASoC: qcom: lpass-sc7180: Add platform driver for lpass audio")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221124140510.63468-1-yuancan@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b73fac67f3559bd0f5d093b06cef3747569f9c07
Author: Xiaomeng Tong <xiam0nd.tong@gmail.com>
Date:   Wed Apr 6 21:04:44 2022 +0200

    drbd: fix an invalid memory access caused by incorrect use of list iterator
    
    [ Upstream commit ae4d37b5df749926891583d42a6801b5da11e3c1 ]
    
    The bug is here:
            idr_remove(&connection->peer_devices, vnr);
    
    If the previous for_each_connection() don't exit early (no goto hit
    inside the loop), the iterator 'connection' after the loop will be a
    bogus pointer to an invalid structure object containing the HEAD
    (&resource->connections). As a result, the use of 'connection' above
    will lead to a invalid memory access (including a possible invalid free
    as idr_remove could call free_layer).
    
    The original intention should have been to remove all peer_devices,
    but the following lines have already done the work. So just remove
    this line and the unneeded label, to fix this bug.
    
    Cc: stable@vger.kernel.org
    Fixes: c06ece6ba6f1b ("drbd: Turn connection->volumes into connection->peer_devices")
    Signed-off-by: Xiaomeng Tong <xiam0nd.tong@gmail.com>
    Reviewed-by: Christoph Böhmwalder <christoph.boehmwalder@linbit.com>
    Reviewed-by: Lars Ellenberg <lars.ellenberg@linbit.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d0c2b762dad2b8dd166e17c0e90b88b86a3284f
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sat Nov 19 07:33:07 2022 +0000

    mtd: maps: pxa2xx-flash: fix memory leak in probe
    
    [ Upstream commit 2399401feee27c639addc5b7e6ba519d3ca341bf ]
    
    Free 'info' upon remapping error to avoid a memory leak.
    
    Fixes: e644f7d62894 ("[MTD] MAPS: Merge Lubbock and Mainstone drivers into common PXA2xx driver")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    [<miquel.raynal@bootlin.com>: Reword the commit log]
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221119073307.22929-1-zhengyongjun3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d1e0d237c4cb59eb209063f958d2bf911c6904d
Author: Jonathan Toppins <jtoppins@redhat.com>
Date:   Tue Nov 22 16:24:29 2022 -0500

    bonding: fix link recovery in mode 2 when updelay is nonzero
    
    [ Upstream commit f8a65ab2f3ff7410921ebbf0dc55453102c33c56 ]
    
    Before this change when a bond in mode 2 lost link, all of its slaves
    lost link, the bonding device would never recover even after the
    expiration of updelay. This change removes the updelay when the bond
    currently has no usable links. Conforming to bonding.txt section 13.1
    paragraph 4.
    
    Fixes: 41f891004063 ("bonding: ignore updelay param when there is no active slave")
    Signed-off-by: Jonathan Toppins <jtoppins@redhat.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3725a8f26bdbc38dfdf545836117f1e069277c91
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 17 23:00:03 2022 +0800

    drm/amdgpu: fix pci device refcount leak
    
    [ Upstream commit b85e285e3d6352b02947fc1b72303673dfacb0aa ]
    
    As comment of pci_get_domain_bus_and_slot() says, it returns
    a pci device with refcount increment, when finish using it,
    the caller must decrement the reference count by calling
    pci_dev_put().
    
    So before returning from amdgpu_device_resume|suspend_display_audio(),
    pci_dev_put() is called to avoid refcount leak.
    
    Fixes: 3f12acc8d6d4 ("drm/amdgpu: put the audio codec into suspend state before gpu reset V3")
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4d70c139d313948e02360304a6cbcd3a4f5deb5
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 23 17:12:01 2022 +0800

    clk: rockchip: Fix memory leak in rockchip_clk_register_pll()
    
    [ Upstream commit 739a6a6bbdb793bd57938cb24aa5a6df89983546 ]
    
    If clk_register() fails, @pll->rate_table may have allocated memory by
    kmemdup(), so it needs to be freed, otherwise will cause memory leak
    issue, this patch fixes it.
    
    Fixes: 90c590254051 ("clk: rockchip: add clock type for pll clocks and pll used on rk3066")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Link: https://lore.kernel.org/r/20221123091201.199819-1-xiujianfeng@huawei.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a065be02433e0bfb053789be23df028b317f9b56
Author: Wang ShaoBo <bobo.shaobowang@huawei.com>
Date:   Wed Nov 23 11:46:16 2022 +0800

    regulator: core: use kfree_const() to free space conditionally
    
    [ Upstream commit dc8d006d15b623c1d80b90b45d6dcb6e890dad09 ]
    
    Use kfree_const() to free supply_name conditionally in create_regulator()
    as supply_name may be allocated from kmalloc() or directly from .rodata
    section.
    
    Fixes: 87fe29b61f95 ("regulator: push allocations in create_regulator() outside of lock")
    Signed-off-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Link: https://lore.kernel.org/r/20221123034616.3609537-1-bobo.shaobowang@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7198b63cbeeb8b4b9fa6dfe0a39074d49513f4f
Author: Baisong Zhong <zhongbaisong@huawei.com>
Date:   Mon Nov 21 19:16:30 2022 +0800

    ALSA: seq: fix undefined behavior in bit shift for SNDRV_SEQ_FILTER_USE_EVENT
    
    [ Upstream commit cf59e1e4c79bf741905484cdb13c130b53576a16 ]
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in sound/core/seq/seq_clientmgr.c:509:22
    left shift of 1 by 31 places cannot be represented in type 'int'
    ...
    Call Trace:
     <TASK>
     dump_stack_lvl+0x8d/0xcf
     ubsan_epilogue+0xa/0x44
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x208
     snd_seq_deliver_single_event.constprop.21+0x191/0x2f0
     snd_seq_deliver_event+0x1a2/0x350
     snd_seq_kernel_client_dispatch+0x8b/0xb0
     snd_seq_client_notify_subscription+0x72/0xa0
     snd_seq_ioctl_subscribe_port+0x128/0x160
     snd_seq_kernel_client_ctl+0xce/0xf0
     snd_seq_oss_create_client+0x109/0x15b
     alsa_seq_oss_init+0x11c/0x1aa
     do_one_initcall+0x80/0x440
     kernel_init_freeable+0x370/0x3c3
     kernel_init+0x1b/0x190
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Baisong Zhong <zhongbaisong@huawei.com>
    Link: https://lore.kernel.org/r/20221121111630.3119259-1-zhongbaisong@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88550b4446478eb7e3c8337e8a641291e5b7e5a1
Author: Baisong Zhong <zhongbaisong@huawei.com>
Date:   Mon Nov 21 19:00:44 2022 +0800

    ALSA: pcm: fix undefined behavior in bit shift for SNDRV_PCM_RATE_KNOT
    
    [ Upstream commit b5172e62458f8e6ff359e5f096044a488db90ac5 ]
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in sound/core/pcm_native.c:2676:21
    left shift of 1 by 31 places cannot be represented in type 'int'
    ...
    Call Trace:
     <TASK>
     dump_stack_lvl+0x8d/0xcf
     ubsan_epilogue+0xa/0x44
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x208
     snd_pcm_open_substream+0x9f0/0xa90
     snd_pcm_oss_open.part.26+0x313/0x670
     snd_pcm_oss_open+0x30/0x40
     soundcore_open+0x18b/0x2e0
     chrdev_open+0xe2/0x270
     do_dentry_open+0x2f7/0x620
     path_openat+0xd66/0xe70
     do_filp_open+0xe3/0x170
     do_sys_openat2+0x357/0x4a0
     do_sys_open+0x87/0xd0
     do_syscall_64+0x34/0x80
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Baisong Zhong <zhongbaisong@huawei.com>
    Link: https://lore.kernel.org/r/20221121110044.3115686-1-zhongbaisong@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad2d0a3dc224657002ce65aa8a50ce3e86e7cd9f
Author: Marcus Folkesson <marcus.folkesson@gmail.com>
Date:   Thu Nov 17 13:13:26 2022 +0100

    HID: hid-sensor-custom: set fixed size for custom attributes
    
    [ Upstream commit 9d013910df22de91333a0acc81d1dbb115bd76f6 ]
    
    This is no bugfix (so no Fixes: tag is necessary) as it is
    taken care of in hid_sensor_custom_add_attributes().
    
    The motivation for this patch is that:
    hid_sensor_custom_field.attr_name and
    hid_sensor_custom_field.attrs
    has the size of HID_CUSTOM_TOTAL_ATTRS and used in same context.
    
    We compare against HID_CUSTOM_TOTAL_ATTRS when
    looping through hid_custom_attrs.
    
    We will silent the smatch error:
    hid_sensor_custom_add_attributes() error: buffer overflow
    'hid_custom_attrs' 8 <= 10
    
    Signed-off-by: Marcus Folkesson <marcus.folkesson@gmail.com>
    Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d6ae25da5cbe08109c6dd0b265a5ddc71bce25e
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Nov 21 10:03:39 2022 -0800

    bpf: Move skb->len == 0 checks into __bpf_redirect
    
    [ Upstream commit 114039b342014680911c35bd6b72624180fd669a ]
    
    To avoid potentially breaking existing users.
    
    Both mac/no-mac cases have to be amended; mac_header >= network_header
    is not enough (verified with a new test, see next patch).
    
    Fixes: fd1894224407 ("bpf: Don't redirect packets with invalid pkt_len")
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Link: https://lore.kernel.org/r/20221121180340.1983627-1-sdf@google.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9920e87a84ec491f0791c76eb42d2524301989bd
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri May 13 11:55:46 2022 -0700

    inet: add READ_ONCE(sk->sk_bound_dev_if) in inet_csk_bind_conflict()
    
    [ Upstream commit d2c135619cb89d1d5693df81ab408c5e8e97e898 ]
    
    inet_csk_bind_conflict() can access sk->sk_bound_dev_if for
    unlocked sockets.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49aa080951aa26974fac6e38bb1a023adc18c00d
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Dec 18 11:39:07 2019 +0100

    media: videobuf-dma-contig: use dma_mmap_coherent
    
    [ Upstream commit b3dc3f8e49577840dc8ac8a365c5b3da4edb10b8 ]
    
    dma_alloc_coherent does not return a physical address, but a DMA address,
    which might be remapped or have an offset.  Passing the DMA address to
    vm_iomap_memory is thus broken.
    
    Use the proper dma_mmap_coherent helper instead, and stop passing
    __GFP_COMP to dma_alloc_coherent, as the memory management inside the
    DMA allocator is hidden from the callers and does not require it.
    
    With this the gfp_t argument to __videobuf_dc_alloc can be removed and
    hard coded to GFP_KERNEL.
    
    Fixes: a8f3c203e19b ("[media] videobuf-dma-contig: add cache support")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8470060019538dfe2801f613d94d00cce7eddf7e
Author: Yuan Can <yuancan@huawei.com>
Date:   Fri Nov 11 06:08:53 2022 +0000

    media: platform: exynos4-is: Fix error handling in fimc_md_init()
    
    [ Upstream commit b434422c45282a0573d8123239abc41fa72665d4 ]
    
    A problem about modprobe s5p_fimc failed is triggered with the
    following log given:
    
     [  272.075275] Error: Driver 'exynos4-fimc' is already registered, aborting...
     modprobe: ERROR: could not insert 's5p_fimc': Device or resource busy
    
    The reason is that fimc_md_init() returns platform_driver_register()
    directly without checking its return value, if platform_driver_register()
    failed, it returns without unregister fimc_driver, resulting the
    s5p_fimc can never be installed later.
    A simple call graph is shown as below:
    
     fimc_md_init()
       fimc_register_driver() # register fimc_driver
       platform_driver_register()
         platform_driver_register()
           driver_register()
             bus_add_driver()
               dev = kzalloc(...) # OOM happened
       # return without unregister fimc_driver
    
    Fix by unregister fimc_driver when platform_driver_register() returns
    error.
    
    Fixes: d3953223b090 ("[media] s5p-fimc: Add the media device driver")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49060c0da57a381563e482e331dc9d4c3725b41b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 10 16:24:23 2022 +0800

    media: solo6x10: fix possible memory leak in solo_sysfs_init()
    
    [ Upstream commit 7f5866dd96d95b74e439f6ee17b8abd8195179fb ]
    
    If device_register() returns error in solo_sysfs_init(), the
    name allocated by dev_set_name() need be freed. As comment of
    device_register() says, it should use put_device() to give up
    the reference in the error path. So fix this by calling
    put_device(), then the name can be freed in kobject_cleanup().
    
    Fixes: dcae5dacbce5 ("[media] solo6x10: sync to latest code from Bluecherry's git repo")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0369af6fe33d4053899b121b32e91f870b2cf0ae
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Nov 8 15:06:30 2022 +0800

    media: vidtv: Fix use-after-free in vidtv_bridge_dvb_init()
    
    [ Upstream commit ba8d9405935097e296bcf7a942c3a01df0edb865 ]
    
    KASAN reports a use-after-free:
    BUG: KASAN: use-after-free in dvb_dmxdev_release+0x4d5/0x5d0 [dvb_core]
    Call Trace:
     ...
     dvb_dmxdev_release+0x4d5/0x5d0 [dvb_core]
     vidtv_bridge_probe+0x7bf/0xa40 [dvb_vidtv_bridge]
     platform_probe+0xb6/0x170
     ...
    Allocated by task 1238:
     ...
     dvb_register_device+0x1a7/0xa70 [dvb_core]
     dvb_dmxdev_init+0x2af/0x4a0 [dvb_core]
     vidtv_bridge_probe+0x766/0xa40 [dvb_vidtv_bridge]
     ...
    Freed by task 1238:
     dvb_register_device+0x6d2/0xa70 [dvb_core]
     dvb_dmxdev_init+0x2af/0x4a0 [dvb_core]
     vidtv_bridge_probe+0x766/0xa40 [dvb_vidtv_bridge]
     ...
    
    It is because the error handling in vidtv_bridge_dvb_init() is wrong.
    
    First, vidtv_bridge_dmx(dev)_init() will clean themselves when fail, but
    goto fail_dmx(_dev): calls release functions again, which causes
    use-after-free.
    
    Also, in fail_fe, fail_tuner_probe and fail_demod_probe, j = i will cause
    out-of-bound when i finished its loop (i == NUM_FE). And the loop
    releasing is wrong, although now NUM_FE is 1 so it won't cause problem.
    
    Fix this by correctly releasing everything.
    
    Fixes: f90cf6079bf6 ("media: vidtv: add a bridge driver")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3afd738e7712473bf0d9a8ccb4b1092d59345f01
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Nov 17 21:49:19 2022 -0800

    Input: elants_i2c - properly handle the reset GPIO when power is off
    
    [ Upstream commit a85fbd6498441694475716a4d5c65f9d3e073faf ]
    
    As can be seen in elants_i2c_power_off(), we want the reset GPIO
    asserted when power is off. The reset GPIO is active low so we need
    the reset line logic low when power is off to avoid leakage.
    
    We have a problem, though, at probe time. At probe time we haven't
    powered the regulators on yet but we have:
    
      devm_gpiod_get(&client->dev, "reset", GPIOD_OUT_LOW);
    
    While that _looks_ right, it turns out that it's not. The
    GPIOD_OUT_LOW doesn't mean to init the GPIO to low. It means init the
    GPIO to "not asserted". Since this is an active low GPIO that inits it
    to be high.
    
    Let's fix this to properly init the GPIO. Now after both probe and
    power off the state of the GPIO is consistent (it's "asserted" or
    level low).
    
    Once we fix this, we can see that at power on time we no longer to
    assert the reset GPIO as the first thing. The reset GPIO is _always_
    asserted before powering on. Let's fix powering on to account for
    this.
    
    Fixes: afe10358e47a ("Input: elants_i2c - wire up regulator support")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20221117123805.1.I9959ac561dd6e1e8e1ce7085e4de6167b27c574f@changeid
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0919982a1744346269320615615c7deb14106661
Author: Hui Tang <tanghui20@huawei.com>
Date:   Mon Nov 14 17:02:40 2022 +0800

    mtd: lpddr2_nvm: Fix possible null-ptr-deref
    
    [ Upstream commit 6bdd45d795adf9e73b38ced5e7f750cd199499ff ]
    
    It will cause null-ptr-deref when resource_size(add_range) invoked,
    if platform_get_resource() returns NULL.
    
    Fixes: 96ba9dd65788 ("mtd: lpddr: add driver for LPDDR2-NVM PCM memories")
    Signed-off-by: Hui Tang <tanghui20@huawei.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221114090240.244172-1-tanghui20@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit effbf636162bddcbcb38b78e11995c759a76bae1
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Thu Nov 10 14:19:26 2022 +0800

    wifi: ath10k: Fix return value in ath10k_pci_init()
    
    [ Upstream commit 2af7749047d8d6ad43feff69f555a13a6a6c2831 ]
    
    This driver is attempting to register to support two different buses.
    if either of these is successful then ath10k_pci_init() should return 0
    so that hardware attached to the successful bus can be probed and
    supported. only if both of these are unsuccessful should ath10k_pci_init()
    return an errno.
    
    Fixes: 0b523ced9a3c ("ath10k: add basic skeleton to support ahb")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Reviewed-by: Jeff Johnson <quic_jjohnson@quicinc.com>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221110061926.18163-1-xiujianfeng@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adf03c30996881a9292a8b9d175f5ad5c410110a
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Sat Nov 12 17:27:19 2022 +0800

    ima: Fix misuse of dereference of pointer in template_desc_init_fields()
    
    [ Upstream commit 25369175ce84813dd99d6604e710dc2491f68523 ]
    
    The input parameter @fields is type of struct ima_template_field ***, so
    when allocates array memory for @fields, the size of element should be
    sizeof(**field) instead of sizeof(*field).
    
    Actually the original code would not cause any runtime error, but it's
    better to make it logically right.
    
    Fixes: adf53a778a0a ("ima: new templates management mechanism")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Reviewed-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bd737289c26be3cee4b9afaf61ef784a2af9d6e
Author: GUO Zihua <guozihua@huawei.com>
Date:   Fri Nov 11 18:13:17 2022 +0800

    integrity: Fix memory leakage in keyring allocation error path
    
    [ Upstream commit 39419ef7af0916cc3620ecf1ed42d29659109bf3 ]
    
    Key restriction is allocated in integrity_init_keyring(). However, if
    keyring allocation failed, it is not freed, causing memory leaks.
    
    Fixes: 2b6aa412ff23 ("KEYS: Use structure to capture key restriction function and data")
    Signed-off-by: GUO Zihua <guozihua@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 102df01caf5ebf8948d00de1ae53fd730a454905
Author: Brian Starkey <brian.starkey@arm.com>
Date:   Tue Sep 13 15:43:06 2022 +0100

    drm/fourcc: Fix vsub/hsub for Q410 and Q401
    
    [ Upstream commit b230555f3257f197dd98641ef6ebaf778b52dd51 ]
    
    These formats are not subsampled, but that means hsub and vsub should be
    1, not 0.
    
    Fixes: 94b292b27734 ("drm: drm_fourcc: add NV15, Q410, Q401 YUV formats")
    Reported-by: George Kennedy <george.kennedy@oracle.com>
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    Signed-off-by: Brian Starkey <brian.starkey@arm.com>
    Reviewed-by: Liviu Dudau <liviu.dudau@arm.com>
    Signed-off-by: Liviu Dudau <liviu.dudau@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220913144306.17279-1-brian.starkey@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f6a99fb620dc09e424986aa9c3492bb74a138bf
Author: Dave Stevenson <dave.stevenson@raspberrypi.com>
Date:   Wed Dec 15 10:17:37 2021 +0100

    drm/fourcc: Add packed 10bit YUV 4:2:0 format
    
    [ Upstream commit 006ea1b5822f9019bd722ffc6242bc0880879e3d ]
    
    Adds a format that is 3 10bit YUV 4:2:0 samples packed into
    a 32bit word (with 2 spare bits).
    
    Supported on Broadcom BCM2711 chips.
    
    Signed-off-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://lore.kernel.org/r/20211215091739.135042-2-maxime@cerno.tech
    Stable-dep-of: b230555f3257 ("drm/fourcc: Fix vsub/hsub for Q410 and Q401")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85273b4a7076ed5328c8ace02234e4e7e10972d5
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Nov 15 15:56:57 2022 +0300

    amdgpu/pm: prevent array underflow in vega20_odn_edit_dpm_table()
    
    [ Upstream commit d27252b5706e51188aed7647126e44dcf9e940c1 ]
    
    In the PP_OD_EDIT_VDDC_CURVE case the "input_index" variable is capped at
    2 but not checked for negative values so it results in an out of bounds
    read.  This value comes from the user via sysfs.
    
    Fixes: d5bf26539494 ("drm/amd/powerplay: added vega20 overdrive support V3")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f48c474efe05cf9ce5e535b5e0ddd710e963936c
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 15 17:15:08 2022 +0800

    regulator: core: fix unbalanced of node refcount in regulator_dev_lookup()
    
    [ Upstream commit f2b41b748c19962b82709d9f23c6b2b0ce9d2f91 ]
    
    I got the the following report:
    
      OF: ERROR: memory leak, expected refcount 1 instead of 2,
      of_node_get()/of_node_put() unbalanced - destroy cset entry:
      attach overlay node /i2c/pmic@62/regulators/exten
    
    In of_get_regulator(), the node is returned from of_parse_phandle()
    with refcount incremented, after using it, of_node_put() need be called.
    
    Fixes: 69511a452e6d ("regulator: map consumer regulator based on device tree")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221115091508.900752-1-yangyingliang@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21a1409e8cf73053b54f7860548e3043dfa351a9
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Mon Nov 14 16:56:29 2022 +0800

    ASoC: pxa: fix null-pointer dereference in filter()
    
    [ Upstream commit ec7bf231aaa1bdbcb69d23bc50c753c80fb22429 ]
    
    kasprintf() would return NULL pointer when kmalloc() fail to allocate.
    Need to check the return pointer before calling strcmp().
    
    Fixes: 7a824e214e25 ("ASoC: mmp: add audio dma support")
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    Link: https://lore.kernel.org/r/20221114085629.1910435-1-zengheng4@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 698bbaf0b4ed93321c205a026fc8262b8b3264d5
Author: Xinlei Lee <xinlei.lee@mediatek.com>
Date:   Wed Nov 9 18:00:59 2022 +0800

    drm/mediatek: Modify dpi power on/off sequence.
    
    [ Upstream commit ff446c0f6290185cefafe3b376bb86063a3a9f6a ]
    
    Modify dpi power on/off sequence so that the first gpio operation will
    take effect.
    
    Fixes: 6bd4763fd532 ("drm/mediatek: set dpi pin mode to gpio low to avoid leakage current")
    Signed-off-by: Xinlei Lee <xinlei.lee@mediatek.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4b30f56ec512e2c35fc0761bc90b0e519d8fa6e
Author: Hanjun Guo <guohanjun@huawei.com>
Date:   Fri Nov 4 17:50:02 2022 +0800

    drm/radeon: Add the missed acpi_put_table() to fix memory leak
    
    [ Upstream commit 10276a20be1115e1f76c189330da2992df980eee ]
    
    When the radeon driver reads the bios information from ACPI
    table in radeon_acpi_vfct_bios(), it misses to call acpi_put_table()
    to release the ACPI memory after the init, so add acpi_put_table()
    properly to fix the memory leak.
    
    v2: fix text formatting (Alex)
    
    Fixes: 268ba0a99f89 ("drm/radeon: implement ACPI VFCT vbios fetch (v3)")
    Signed-off-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cea79ae89b6b3f22722da2bbf936097afdaa944b
Author: David Howells <dhowells@redhat.com>
Date:   Wed Sep 7 19:17:29 2022 +0100

    rxrpc: Fix ack.bufferSize to be 0 when generating an ack
    
    [ Upstream commit 8889a711f9b4dcf4dd1330fa493081beebd118c9 ]
    
    ack.bufferSize should be set to 0 when generating an ack.
    
    Fixes: 8d94aa381dab ("rxrpc: Calls shouldn't hold socket refs")
    Reported-by: Jeffrey Altman <jaltman@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00fce49d142d9a952381fc5c8c28f4c0965163dd
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 3 07:34:21 2022 +0100

    net, proc: Provide PROC_FS=n fallback for proc_create_net_single_write()
    
    [ Upstream commit c3d96f690a790074b508fe183a41e36a00cd7ddd ]
    
    Provide a CONFIG_PROC_FS=n fallback for proc_create_net_single_write().
    
    Also provide a fallback for proc_create_net_data_write().
    
    Fixes: 564def71765c ("proc: Add a way to make network proc files writable")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    cc: netdev@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d5cab726e3b370fea1b6e67183f0e13c409ce5c
Author: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
Date:   Mon Jul 4 10:44:37 2022 +0100

    media: camss: Clean up received buffers on failed start of streaming
    
    [ Upstream commit c8f3582345e6a69da65ab588f7c4c2d1685b0e80 ]
    
    It is required to return the received buffers, if streaming can not be
    started. For instance media_pipeline_start() may fail with EPIPE, if
    a link validation between entities is not passed, and in such a case
    a user gets a kernel warning:
    
      WARNING: CPU: 1 PID: 520 at drivers/media/common/videobuf2/videobuf2-core.c:1592 vb2_start_streaming+0xec/0x160
      <snip>
      Call trace:
       vb2_start_streaming+0xec/0x160
       vb2_core_streamon+0x9c/0x1a0
       vb2_ioctl_streamon+0x68/0xbc
       v4l_streamon+0x30/0x3c
       __video_do_ioctl+0x184/0x3e0
       video_usercopy+0x37c/0x7b0
       video_ioctl2+0x24/0x40
       v4l2_ioctl+0x4c/0x70
    
    The fix is to correct the error path in video_start_streaming() of camss.
    
    Fixes: 0ac2586c410f ("media: camss: Add files which handle the video device nodes")
    Signed-off-by: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61c96d99d42cfb71cd1cfc6e4d60f8e3765db883
Author: Marek Vasut <marex@denx.de>
Date:   Fri Nov 4 17:33:39 2022 +0100

    wifi: rsi: Fix handling of 802.3 EAPOL frames sent via control port
    
    [ Upstream commit b8f6efccbb9dc0ff5dee7e20d69a4747298ee603 ]
    
    When using wpa_supplicant v2.10, this driver is no longer able to
    associate with any AP and fails in the EAPOL 4-way handshake while
    sending the 2/4 message to the AP. The problem is not present in
    wpa_supplicant v2.9 or older. The problem stems from HostAP commit
    144314eaa ("wpa_supplicant: Send EAPOL frames over nl80211 where available")
    which changes the way EAPOL frames are sent, from them being send
    at L2 frames to them being sent via nl80211 control port.
    
    An EAPOL frame sent as L2 frame is passed to the WiFi driver with
    skb->protocol ETH_P_PAE, while EAPOL frame sent via nl80211 control
    port has skb->protocol set to ETH_P_802_3 . The later happens in
    ieee80211_tx_control_port(), where the EAPOL frame is encapsulated
    into 802.3 frame.
    
    The rsi_91x driver handles ETH_P_PAE EAPOL frames as high-priority
    frames and sends them via highest-priority transmit queue, while
    the ETH_P_802_3 frames are sent as regular frames. The EAPOL 4-way
    handshake frames must be sent as highest-priority, otherwise the
    4-way handshake times out.
    
    Therefore, to fix this problem, inspect the skb control flags and
    if flag IEEE80211_TX_CTRL_PORT_CTRL_PROTO is set, assume this is
    an EAPOL frame and transmit the frame via high-priority queue just
    like other ETH_P_PAE frames.
    
    Fixes: 0eb42586cf87 ("rsi: data packet descriptor enhancements")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20221104163339.227432-1-marex@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 624438195c324a47b797b302e6643448f9498717
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Nov 4 13:12:38 2022 -0700

    Input: joystick - fix Kconfig warning for JOYSTICK_ADC
    
    [ Upstream commit 6100a19c4fcfe154dd32f8a8ef4e8c0b1f607c75 ]
    
    Fix a Kconfig warning for JOYSTICK_ADC by also selecting
    IIO_BUFFER.
    
    WARNING: unmet direct dependencies detected for IIO_BUFFER_CB
      Depends on [n]: IIO [=y] && IIO_BUFFER [=n]
      Selected by [y]:
      - JOYSTICK_ADC [=y] && INPUT [=y] && INPUT_JOYSTICK [=y] && IIO [=y]
    
    Fixes: 2c2b364fddd5 ("Input: joystick - add ADC attached joystick driver.")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Link: https://lore.kernel.org/r/20221104201238.31628-1-rdunlap@infradead.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 330bc5533e8a8ed69cb951d5a8edce9bddb9db21
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Oct 22 20:13:52 2022 +0800

    mtd: Fix device name leak when register device failed in add_mtd_device()
    
    [ Upstream commit 895d68a39481a75c680aa421546931fb11942fa6 ]
    
    There is a kmemleak when register device failed:
      unreferenced object 0xffff888101aab550 (size 8):
        comm "insmod", pid 3922, jiffies 4295277753 (age 925.408s)
        hex dump (first 8 bytes):
          6d 74 64 30 00 88 ff ff                          mtd0....
        backtrace:
          [<00000000bde26724>] __kmalloc_node_track_caller+0x4e/0x150
          [<000000003c32b416>] kvasprintf+0xb0/0x130
          [<000000001f7a8f15>] kobject_set_name_vargs+0x2f/0xb0
          [<000000006e781163>] dev_set_name+0xab/0xe0
          [<00000000e30d0c78>] add_mtd_device+0x4bb/0x700
          [<00000000f3d34de7>] mtd_device_parse_register+0x2ac/0x3f0
          [<00000000c0d88488>] 0xffffffffa0238457
          [<00000000b40d0922>] 0xffffffffa02a008f
          [<0000000023d17b9d>] do_one_initcall+0x87/0x2a0
          [<00000000770f6ca6>] do_init_module+0xdf/0x320
          [<000000007b6768fe>] load_module+0x2f98/0x3330
          [<00000000346bed5a>] __do_sys_finit_module+0x113/0x1b0
          [<00000000674c2290>] do_syscall_64+0x35/0x80
          [<000000004c6a8d97>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    If register device failed, should call put_device() to give up the
    reference.
    
    Fixes: 1f24b5a8ecbb ("[MTD] driver model updates")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221022121352.2534682-1-zhangxiaoxu5@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a79539f4e8b24e234c2e7fc2050e416e9ce212d
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Wed Nov 2 14:43:20 2022 +0530

    clk: qcom: gcc-sm8250: Use retention mode for USB GDSCs
    
    [ Upstream commit ac1c5a03d3772b1db25e8092f771aa33f6ae2f7e ]
    
    USB controllers on SM8250 doesn't work after coming back from suspend.
    This can be fixed by keeping the USB GDSCs in retention mode so that
    hardware can keep them ON and put into rentention mode once the parent
    domain goes to a low power state.
    
    Fixes: 3e5770921a88 ("clk: qcom: gcc: Add global clock controller driver for SM8250")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221102091320.66007-1-manivannan.sadhasivam@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1989d808b86f1c690a060f75b928f3db81cd977
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Fri Nov 4 09:36:45 2022 -0700

    bpf: propagate precision across all frames, not just the last one
    
    [ Upstream commit 529409ea92d590659be487ba0839710329bd8074 ]
    
    When equivalent completed state is found and it has additional precision
    restrictions, BPF verifier propagates precision to
    currently-being-verified state chain (i.e., including parent states) so
    that if some of the states in the chain are not yet completed, necessary
    precision restrictions are enforced.
    
    Unfortunately, right now this happens only for the last frame (deepest
    active subprogram's frame), not all the frames. This can lead to
    incorrect matching of states due to missing precision marker. Currently
    this doesn't seem possible as BPF verifier forces everything to precise
    when validated BPF program has any subprograms. But with the next patch
    lifting this restriction, this becomes problematic.
    
    In fact, without this fix, we'll start getting failure in one of the
    existing test_verifier test cases:
    
      #906/p precise: cross frame pruning FAIL
      Unexpected success to load!
      verification time 48 usec
      stack depth 0+0
      processed 26 insns (limit 1000000) max_states_per_insn 3 total_states 17 peak_states 17 mark_read 8
    
    This patch adds precision propagation across all frames.
    
    Fixes: a3ce685dd01a ("bpf: fix precision tracking")
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20221104163649.121784-3-andrii@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cdd73a5ed0840da88a3b9ad353f568e6f156d417
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Tue Sep 21 17:49:34 2021 -0700

    bpf: Check the other end of slot_type for STACK_SPILL
    
    [ Upstream commit 27113c59b6d0a587b29ae72d4ff3f832f58b0651 ]
    
    Every 8 bytes of the stack is tracked by a bpf_stack_state.
    Within each bpf_stack_state, there is a 'u8 slot_type[8]' to track
    the type of each byte.  Verifier tests slot_type[0] == STACK_SPILL
    to decide if the spilled reg state is saved.  Verifier currently only
    saves the reg state if the whole 8 bytes are spilled to the stack,
    so checking the slot_type[7] is the same as checking slot_type[0].
    
    The later patch will allow verifier to save the bounded scalar
    reg also for <8 bytes spill.  There is a llvm patch [1] to ensure
    the <8 bytes spill will be 8-byte aligned,  so checking
    slot_type[7] instead of slot_type[0] is required.
    
    While at it, this patch refactors the slot_type[0] == STACK_SPILL
    test into a new function is_spilled_reg() and change the
    slot_type[0] check to slot_type[7] check in there also.
    
    [1] https://reviews.llvm.org/D109073
    
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20210922004934.624194-1-kafai@fb.com
    Stable-dep-of: 529409ea92d5 ("bpf: propagate precision across all frames, not just the last one")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42b2b7382aaba04b7cf6c9868da00d9c914fa500
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Fri Nov 4 09:36:44 2022 -0700

    bpf: propagate precision in ALU/ALU64 operations
    
    [ Upstream commit a3b666bfa9c9edc05bca62a87abafe0936bd7f97 ]
    
    When processing ALU/ALU64 operations (apart from BPF_MOV, which is
    handled correctly already; and BPF_NEG and BPF_END are special and don't
    have source register), if destination register is already marked
    precise, this causes problem with potentially missing precision tracking
    for the source register. E.g., when we have r1 >>= r5 and r1 is marked
    precise, but r5 isn't, this will lead to r5 staying as imprecise. This
    is due to the precision backtracking logic stopping early when it sees
    r1 is already marked precise. If r1 wasn't precise, we'd keep
    backtracking and would add r5 to the set of registers that need to be
    marked precise. So there is a discrepancy here which can lead to invalid
    and incompatible states matched due to lack of precision marking on r5.
    If r1 wasn't precise, precision backtracking would correctly mark both
    r1 and r5 as precise.
    
    This is simple to fix, though. During the forward instruction simulation
    pass, for arithmetic operations of `scalar <op>= scalar` form (where
    <op> is ALU or ALU64 operations), if destination register is already
    precise, mark source register as precise. This applies only when both
    involved registers are SCALARs. `ptr += scalar` and `scalar += ptr`
    cases are already handled correctly.
    
    This does have (negative) effect on some selftest programs and few
    Cilium programs.  ~/baseline-tmp-results.csv are veristat results with
    this patch, while ~/baseline-results.csv is without it. See post
    scriptum for instructions on how to make Cilium programs testable with
    veristat. Correctness has a price.
    
    $ ./veristat -C -e file,prog,insns,states ~/baseline-results.csv ~/baseline-tmp-results.csv | grep -v '+0'
    File                     Program               Total insns (A)  Total insns (B)  Total insns (DIFF)  Total states (A)  Total states (B)  Total states (DIFF)
    -----------------------  --------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    bpf_cubic.bpf.linked1.o  bpf_cubic_cong_avoid              997             1700      +703 (+70.51%)                62                90        +28 (+45.16%)
    test_l4lb.bpf.linked1.o  balancer_ingress                 4559             5469      +910 (+19.96%)               118               126          +8 (+6.78%)
    -----------------------  --------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    
    $ ./veristat -C -e file,prog,verdict,insns,states ~/baseline-results-cilium.csv ~/baseline-tmp-results-cilium.csv | grep -v '+0'
    File           Program                         Total insns (A)  Total insns (B)  Total insns (DIFF)  Total states (A)  Total states (B)  Total states (DIFF)
    -------------  ------------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    bpf_host.o     tail_nodeport_nat_ingress_ipv6             4448             5261      +813 (+18.28%)               234               247         +13 (+5.56%)
    bpf_host.o     tail_nodeport_nat_ipv6_egress              3396             3446        +50 (+1.47%)               201               203          +2 (+1.00%)
    bpf_lxc.o      tail_nodeport_nat_ingress_ipv6             4448             5261      +813 (+18.28%)               234               247         +13 (+5.56%)
    bpf_overlay.o  tail_nodeport_nat_ingress_ipv6             4448             5261      +813 (+18.28%)               234               247         +13 (+5.56%)
    bpf_xdp.o      tail_lb_ipv4                              71736            73442      +1706 (+2.38%)              4295              4370         +75 (+1.75%)
    -------------  ------------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    
    P.S. To make Cilium ([0]) programs libbpf-compatible and thus
    veristat-loadable, apply changes from topmost commit in [1], which does
    minimal changes to Cilium source code, mostly around SEC() annotations
    and BPF map definitions.
    
      [0] https://github.com/cilium/cilium/
      [1] https://github.com/anakryiko/cilium/commits/libbpf-friendliness
    
    Fixes: b5dc0163d8fd ("bpf: precise scalar_value tracking")
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20221104163649.121784-2-andrii@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fc38327fd648876368b983d2f29cc17ddea73e9
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 24 21:46:50 2022 +0800

    media: platform: exynos4-is: fix return value check in fimc_md_probe()
    
    [ Upstream commit e38e42c078da4af962d322b97e726dcb2f184e3f ]
    
    devm_pinctrl_get() may return ERR_PTR(-EPROBE_DEFER), add a minus sign
    to fix it.
    
    Fixes: 4163851f7b99 ("[media] s5p-fimc: Use pinctrl API for camera ports configuration")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9d19f3a044ca651b0be52a4bf951ffe74259b9f
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Thu Oct 27 20:38:55 2022 +0800

    media: vivid: fix compose size exceed boundary
    
    [ Upstream commit 94a7ad9283464b75b12516c5512541d467cefcf8 ]
    
    syzkaller found a bug:
    
     BUG: unable to handle page fault for address: ffffc9000a3b1000
     #PF: supervisor write access in kernel mode
     #PF: error_code(0x0002) - not-present page
     PGD 100000067 P4D 100000067 PUD 10015f067 PMD 1121ca067 PTE 0
     Oops: 0002 [#1] PREEMPT SMP
     CPU: 0 PID: 23489 Comm: vivid-000-vid-c Not tainted 6.1.0-rc1+ #512
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
     RIP: 0010:memcpy_erms+0x6/0x10
    [...]
     Call Trace:
      <TASK>
      ? tpg_fill_plane_buffer+0x856/0x15b0
      vivid_fillbuff+0x8ac/0x1110
      vivid_thread_vid_cap_tick+0x361/0xc90
      vivid_thread_vid_cap+0x21a/0x3a0
      kthread+0x143/0x180
      ret_from_fork+0x1f/0x30
      </TASK>
    
    This is because we forget to check boundary after adjust compose->height
    int V4L2_SEL_TGT_CROP case. Add v4l2_rect_map_inside() to fix this problem
    for this case.
    
    Fixes: ef834f7836ec ("[media] vivid: add the video capture and output parts")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72e8d9c731a78a30d7347fa8104ca0547a295e09
Author: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Date:   Fri Nov 4 00:39:53 2022 +0530

    bpf: Fix slot type check in check_stack_write_var_off
    
    [ Upstream commit f5e477a861e4a20d8a1c5f7a245f3a3c3c376b03 ]
    
    For the case where allow_ptr_leaks is false, code is checking whether
    slot type is STACK_INVALID and STACK_SPILL and rejecting other cases.
    This is a consequence of incorrectly checking for register type instead
    of the slot type (NOT_INIT and SCALAR_VALUE respectively). Fix the
    check.
    
    Fixes: 01f810ace9ed ("bpf: Allow variable-offset stack access")
    Signed-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
    Link: https://lore.kernel.org/r/20221103191013.1236066-5-memxor@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d959ff7fa9e512c54522bcc8127223c56a586558
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Thu Jun 9 15:23:42 2022 +0300

    drm/msm/hdmi: drop unused GPIO support
    
    [ Upstream commit 68e674b13b17ed41aac2763d12ece6deaae8df58 ]
    
    The HDMI driver has code to configure extra GPIOs, which predates
    pinctrl support. Nowadays all platforms should use pinctrl instead.
    Neither of upstreamed Qualcomm platforms uses these properties, so it's
    safe to drop them.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Patchwork: https://patchwork.freedesktop.org/patch/488858/
    Link: https://lore.kernel.org/r/20220609122350.3157529-7-dmitry.baryshkov@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Stable-dep-of: b964444b2b64 ("drm/msm/hdmi: use devres helper for runtime PM management")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b12f354fe61f8c2bf677ea82e1f366cc0ed47da8
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Oct 15 03:11:00 2021 +0300

    drm/msm/hdmi: switch to drm_bridge_connector
    
    [ Upstream commit caa24223463dfd75702a24daac13c93edb4aafac ]
    
    Merge old hdmi_bridge and hdmi_connector implementations. Use
    drm_bridge_connector instead.
    
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Link: https://lore.kernel.org/r/20211015001100.4193241-2-dmitry.baryshkov@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Stable-dep-of: b964444b2b64 ("drm/msm/hdmi: use devres helper for runtime PM management")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4b035b1f036ddd53fbfced49046e586c5ad8a3e
Author: GUO Zihua <guozihua@huawei.com>
Date:   Wed Sep 21 20:58:04 2022 +0800

    ima: Handle -ESTALE returned by ima_filter_rule_match()
    
    [ Upstream commit c7423dbdbc9ecef7fff5239d144cad4b9887f4de ]
    
    IMA relies on the blocking LSM policy notifier callback to update the
    LSM based IMA policy rules.
    
    When SELinux update its policies, IMA would be notified and starts
    updating all its lsm rules one-by-one. During this time, -ESTALE would
    be returned by ima_filter_rule_match() if it is called with a LSM rule
    that has not yet been updated. In ima_match_rules(), -ESTALE is not
    handled, and the LSM rule is considered a match, causing extra files
    to be measured by IMA.
    
    Fix it by re-initializing a temporary rule if -ESTALE is returned by
    ima_filter_rule_match(). The origin rule in the rule list would be
    updated by the LSM policy notifier callback.
    
    Fixes: b16942455193 ("ima: use the lsm policy update notifier")
    Signed-off-by: GUO Zihua <guozihua@huawei.com>
    Reviewed-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5b227f0d28d629f6782b0dda091fd78fbcfbb1f
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Fri Nov 20 12:25:46 2020 -0600

    ima: Fix fall-through warnings for Clang
    
    [ Upstream commit 28073eb09c5aa29e879490edb88cfd3e7073821e ]
    
    In preparation to enable -Wimplicit-fallthrough for Clang, fix multiple
    warnings by explicitly adding multiple break statements instead of just
    letting the code fall through to the next case.
    
    Link: https://github.com/KSPP/linux/issues/115
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Stable-dep-of: c7423dbdbc9e ("ima: Handle -ESTALE returned by ima_filter_rule_match()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 576828e59a0e03bbc763872912b04f3e3a1b3311
Author: Marek Vasut <marex@denx.de>
Date:   Sat Oct 15 01:11:06 2022 +0200

    drm/panel/panel-sitronix-st7701: Remove panel on DSI attach failure
    
    [ Upstream commit c62102165dd79284d42383d2f7ed17301bd8e629 ]
    
    In case mipi_dsi_attach() fails, call drm_panel_remove() to
    avoid memory leak.
    
    Fixes: 849b2e3ff969 ("drm/panel: Add Sitronix ST7701 panel driver")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221014231106.468063-1-marex@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1aa976857a310f38a420f4a65e9b007ae9272fd
Author: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
Date:   Tue Nov 1 18:32:51 2022 +0100

    spi: Update reference to struct spi_controller
    
    [ Upstream commit bf585ccee22faf469d82727cf375868105b362f7 ]
    
    struct spi_master has been renamed to struct spi_controller. Update the
    reference in spi.rst to make it clickable again.
    
    Fixes: 8caab75fd2c2 ("spi: Generalize SPI "master" to "controller"")
    Signed-off-by: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
    Link: https://lore.kernel.org/r/20221101173252.1069294-1-j.neuschaefer@gmx.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd958c7f3e77bcdafaa43c2d9ed16fa62fc11c82
Author: Marek Vasut <marex@denx.de>
Date:   Fri Oct 28 13:38:34 2022 +0200

    clk: renesas: r9a06g032: Repair grave increment error
    
    [ Upstream commit 02693e11611e082e3c4d8653e8af028e43d31164 ]
    
    If condition (clkspec.np != pd->dev.of_node) is true, then the driver
    ends up in an endless loop, forever, locking up the machine.
    
    Fixes: aad03a66f902 ("clk: renesas: r9a06g032: Add clock domain support")
    Reviewed-by: Ralph Siemsen <ralph.siemsen@linaro.org>
    Signed-off-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Gareth Williams <gareth.williams.jx@renesas.com>
    Link: https://lore.kernel.org/r/20221028113834.7496-1-marex@denx.de
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 110bf15825edf4f20bc4e56aba624297861b06ab
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 21:21:07 2022 +0800

    drm/rockchip: lvds: fix PM usage counter unbalance in poweron
    
    [ Upstream commit 4dba27f1a14592ac4cf71c3bc1cc1fd05dea8015 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it by replacing it with the newest pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    Fixes: 34cc0aa25456 ("drm/rockchip: Add support for Rockchip Soc LVDS")
    Fixes: cca1705c3d89 ("drm/rockchip: lvds: Add PX30 support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220922132107.105419-3-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1874f9143fbaccd10214b5a500e0c1e8717527e7
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Mon Oct 10 20:52:37 2022 +0200

    can: kvaser_usb: Compare requested bittiming parameters with actual parameters in do_set_{,data}_bittiming
    
    [ Upstream commit 39d3df6b0ea80f9b515c632ca07b39b1c156edee ]
    
    The device will respond with a CMD_ERROR_EVENT command, with error_code
    KVASER_USB_{LEAF,HYDRA}_ERROR_EVENT_PARAM, if the CMD_SET_BUSPARAMS_REQ
    contains invalid bittiming parameters.
    However, this command does not contain any channel reference.
    
    To check if the CMD_SET_BUSPARAMS_REQ was successful, redback and compare
    the requested bittiming parameters with the device reported parameters.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Fixes: aec5fb2268b7 ("can: kvaser_usb: Add support for Kvaser USB hydra family")
    Tested-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Co-developed-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-12-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 669bdf121fa47832866434e47c7673bba66fe82e
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Mon Oct 10 20:52:36 2022 +0200

    can: kvaser_usb: Add struct kvaser_usb_busparams
    
    [ Upstream commit 00e5786177649c1e3110f9454fdd34e336597265 ]
    
    Add struct kvaser_usb_busparams containing the busparameters used in
    CMD_{SET,GET}_BUSPARAMS* commands.
    
    Tested-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-11-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Stable-dep-of: 39d3df6b0ea8 ("can: kvaser_usb: Compare requested bittiming parameters with actual parameters in do_set_{,data}_bittiming")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a50ad6772f6f9255549112e3a463336cc4fa4f99
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Mon Oct 10 20:52:35 2022 +0200

    can: kvaser_usb_leaf: Fix bogus restart events
    
    [ Upstream commit 90904d326269a38fe5dd895fb2db7c03199654c4 ]
    
    When auto-restart is enabled, the kvaser_usb_leaf driver considers
    transition from any state >= CAN_STATE_BUS_OFF as a bus-off recovery
    event (restart).
    
    However, these events may occur at interface startup time before
    kvaser_usb_open() has set the state to CAN_STATE_ERROR_ACTIVE, causing
    restarts counter to increase and CAN_ERR_RESTARTED to be sent despite no
    actual restart having occurred.
    
    Fix that by making the auto-restart condition checks more strict so that
    they only trigger when the interface was actually in the BUS_OFF state.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Tested-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-10-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd56718e7cb605754f3249a066cb6f3ea465cfa3
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Mon Oct 10 20:52:33 2022 +0200

    can: kvaser_usb_leaf: Fix wrong CAN state after stopping
    
    [ Upstream commit a11249acf802341294557895d8e5f6aef080253f ]
    
    0bfd:0124 Kvaser Mini PCI Express 2xHS FW 4.18.778 sends a
    CMD_CHIP_STATE_EVENT indicating bus-off after stopping the device,
    causing a stopped device to appear as CAN_STATE_BUS_OFF instead of
    CAN_STATE_STOPPED.
    
    Fix that by not handling error events on stopped devices.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Tested-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-8-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f83742285f779806e095dac23b6942dfb4a7ed49
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Mon Oct 10 20:52:32 2022 +0200

    can: kvaser_usb_leaf: Fix improved state not being reported
    
    [ Upstream commit 8d21f5927ae604881f98587fabf6753f88730968 ]
    
    The tested 0bfd:0017 Kvaser Memorator Professional HS/HS FW 2.0.50 and
    0bfd:0124 Kvaser Mini PCI Express 2xHS FW 4.18.778 do not seem to send
    any unsolicited events when error counters decrease or when the device
    transitions from ERROR_PASSIVE to ERROR_ACTIVE (or WARNING).
    
    This causes the interface to e.g. indefinitely stay in the ERROR_PASSIVE
    state.
    
    Fix that by asking for chip state (inc. counters) event every 0.5 secs
    when error counters are non-zero.
    
    Since there are non-error-counter devices, also always poll in
    ERROR_PASSIVE even if the counters show zero.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Tested-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-7-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbd155fe14c83f489c2ca33607ead0474530805a
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Mon Oct 10 20:52:31 2022 +0200

    can: kvaser_usb_leaf: Set Warning state even without bus errors
    
    [ Upstream commit df1b7af2761b935f63b4a53e789d41ed859edf61 ]
    
    kvaser_usb_leaf_rx_error_update_can_state() sets error state according
    to error counters when the hardware does not indicate a specific state
    directly.
    
    However, this is currently gated behind a check for
    M16C_STATE_BUS_ERROR which does not always seem to be set when error
    counters are increasing, and may not be set when error counters are
    decreasing.
    
    This causes the CAN_STATE_ERROR_WARNING state to not be set in some
    cases even when appropriate.
    
    Change the code to set error state from counters even without
    M16C_STATE_BUS_ERROR.
    
    The Error-Passive case seems superfluous as it is already set via
    M16C_STATE_BUS_PASSIVE flag above, but it is kept for now.
    
    Tested with 0bfd:0124 Kvaser Mini PCI Express 2xHS FW 4.18.778.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Tested-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-6-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96af45b1b46ea57c4781f7788128e31f8be72fcd
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Mon Oct 10 20:52:30 2022 +0200

    can: kvaser_usb: kvaser_usb_leaf: Handle CMD_ERROR_EVENT
    
    [ Upstream commit b24cb2d169e0c9dce664a959e1f2aa9781285dc9 ]
    
    The device will send an error event command, to indicate certain errors.
    This indicates a misbehaving driver, and should never occur.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Tested-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Co-developed-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-5-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit caea629409dc4d2676d345fb460021a5c8127538
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Mon Oct 10 20:52:29 2022 +0200

    can: kvaser_usb: kvaser_usb_leaf: Rename {leaf,usbcan}_cmd_error_event to {leaf,usbcan}_cmd_can_error_event
    
    [ Upstream commit 7ea56128dbf904a3359bcf9289cccdfa3c85c7e8 ]
    
    Prepare for handling CMD_ERROR_EVENT. Rename struct
    {leaf,usbcan}_cmd_error_event to {leaf,usbcan}_cmd_can_error_event.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Reported-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Tested-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-4-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eafcf1b5997ece092e6edc168686538e99303959
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Mon Oct 10 20:52:28 2022 +0200

    can: kvaser_usb: kvaser_usb_leaf: Get capabilities from device
    
    [ Upstream commit 35364f5b41a4917fe94a3f393d149b63ec583297 ]
    
    Use the CMD_GET_CAPABILITIES_REQ command to query the device for certain
    capabilities. We are only interested in LISTENONLY mode and wither the
    device reports CAN error counters.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Reported-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Tested-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/all/20221010185237.319219-3-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd50258e9c28e20473abe95ae17fb6848c6d0095
Author: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
Date:   Tue Dec 7 21:15:28 2021 +0900

    can: kvaser_usb: do not increase tx statistics when sending error message frames
    
    [ Upstream commit 0b0ce2c67795672115ac6ca28351a78799cd114b ]
    
    The CAN error message frames (i.e. error skb) are an interface
    specific to socket CAN. The payload of the CAN error message frames
    does not correspond to any actual data sent on the wire. Only an error
    flag and a delimiter are transmitted when an error occurs (c.f. ISO
    11898-1 section 10.4.4.2 "Error flag").
    
    For this reason, it makes no sense to increment the tx_packets and
    tx_bytes fields of struct net_device_stats when sending an error
    message frame because no actual payload will be transmitted on the
    wire.
    
    N.B. Sending error message frames is a very specific feature which, at
    the moment, is only supported by the Kvaser Hydra hardware. Please
    refer to [1] for more details on the topic.
    
    [1] https://lore.kernel.org/linux-can/CAMZ6RqK0rTNg3u3mBpZOoY51jLZ-et-J01tY6-+mWsM4meVw-A@mail.gmail.com/t/#u
    
    Link: https://lore.kernel.org/all/20211207121531.42941-3-mailhol.vincent@wanadoo.fr
    Co-developed-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Stable-dep-of: 35364f5b41a4 ("can: kvaser_usb: kvaser_usb_leaf: Get capabilities from device")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 580c79fd57f38823d3864d76b746ee9ae06b42a8
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Fri Sep 23 11:42:01 2022 +0200

    media: exynos4-is: don't rely on the v4l2_async_subdev internals
    
    [ Upstream commit f98a5c2e1c4396488c27274ba82afc11725a4bcc ]
    
    Commit 1f391df44607 ("media: v4l2-async: Use endpoints in
    __v4l2_async_nf_add_fwnode_remote()") changed the data that is stored in
    the v4l2_async_subdev internals from the fwnode pointer to the parent
    device to the fwnode pointer to the matched endpoint. This broke the
    sensor matching code, which relied on the particular fwnode data in the
    v4l2_async_subdev internals. Fix this by simply matching the
    v4l2_async_subdev pointer, which is already available there.
    
    Reported-by: Daniel Scally <djrscally@gmail.com>
    Fixes: fa91f1056f17 ("[media] exynos4-is: Add support for asynchronous subdevices registration")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Daniel Scally <djrscally@gmail.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c93cac58a7e502f09bbe3f3dc695c6d4657cd616
Author: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Date:   Mon Jan 18 02:52:48 2021 +0100

    media: exynos4-is: Use v4l2_async_notifier_add_fwnode_remote_subdev
    
    [ Upstream commit 3a2822bfe45c50abd9f76a8547a77a1f6a0e8c8d ]
    
    The use of v4l2_async_notifier_add_subdev will be discouraged.
    Drivers are instead encouraged to use a helper such as
    v4l2_async_notifier_add_fwnode_remote_subdev.
    
    This fixes a misuse of the API, as v4l2_async_notifier_add_subdev
    should get a kmalloc'ed struct v4l2_async_subdev,
    removing some boilerplate code while at it.
    
    Use the appropriate helper v4l2_async_notifier_add_fwnode_remote_subdev,
    which handles the needed setup, instead of open-coding it.
    
    Signed-off-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Jacopo Mondi <jacopo+renesas@jmondi.org>
    Reviewed-by: Helen Koike <helen.koike@collabora.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Stable-dep-of: f98a5c2e1c43 ("media: exynos4-is: don't rely on the v4l2_async_subdev internals")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4882492ad3f08a35fbc4a02a40b416583f0d5056
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Tue Sep 13 14:37:00 2022 +0800

    venus: pm_helpers: Fix error check in vcodec_domains_get()
    
    [ Upstream commit 0f6e8d8c94a82e85e1b9b62a7671990740dc6f70 ]
    
    In the function vcodec_domains_get(), dev_pm_domain_attach_by_name()
    may return NULL in some cases, so IS_ERR() doesn't meet the
    requirements. Thus fix it.
    
    Fixes: 7482a983dea3 ("media: venus: redesign clocks and pm domains control")
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86d531c1d7947d5cd845d8b280262ad53fd10cc2
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Wed Sep 21 13:38:00 2022 +0200

    media: i2c: ad5820: Fix error path
    
    [ Upstream commit 9fce241660f37d9e95e93c0ae6fba8cfefa5797b ]
    
    Error path seems to be swaped. Fix the order and provide some meaningful
    names.
    
    Fixes: bee3d5115611 ("[media] ad5820: Add driver for auto-focus coil")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83f7e3c988710202d0f5a742c96c0817ccfee326
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue Sep 27 09:28:13 2022 +0800

    media: coda: jpeg: Add check for kmalloc
    
    [ Upstream commit f30ce3d3760b22ee33c8d9c2e223764ad30bdc5f ]
    
    As kmalloc can return NULL pointer, it should be better to
    check the return value and return error, same as
    coda_jpeg_decode_header.
    
    Fixes: 96f6f62c4656 ("media: coda: jpeg: add CODA960 JPEG encoder support")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e0ba56c7e5f150af14c15425d2eec1f9ee3e735
Author: Junlin Yang <yangjunlin@yulong.com>
Date:   Fri Apr 9 21:54:26 2021 +0800

    pata_ipx4xx_cf: Fix unsigned comparison with less than zero
    
    [ Upstream commit c38ae56ee034623c59e39c0130ca0dec086c1a39 ]
    
    The return from the call to platform_get_irq() is int, it can be
    a negative error code, however this is being assigned to an unsigned
    int variable 'irq', so making 'irq' an int, and change the position to
    keep the code format.
    
    ./drivers/ata/pata_ixp4xx_cf.c:168:5-8:
    WARNING: Unsigned expression compared with zero: irq > 0
    
    Signed-off-by: Junlin Yang <yangjunlin@yulong.com>
    Link: https://lore.kernel.org/r/20210409135426.1773-1-angkery@163.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85b297d7986c64f36825020b848f09f0415f325a
Author: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Date:   Wed Oct 12 10:23:53 2022 +0800

    libbpf: Fix null-pointer dereference in find_prog_by_sec_insn()
    
    [ Upstream commit d0d382f95a9270dcf803539d6781d6bd67e3f5b2 ]
    
    When there are no program sections, obj->programs is left unallocated,
    and find_prog_by_sec_insn()'s search lands on &obj->programs[0] == NULL,
    and will cause null-pointer dereference in the following access to
    prog->sec_idx.
    
    Guard the search with obj->nr_programs similar to what's being done in
    __bpf_program__iter() to prevent null-pointer access from happening.
    
    Fixes: db2b8b06423c ("libbpf: Support CO-RE relocations for multi-prog sections")
    Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20221012022353.7350-4-shung-hsi.yu@suse.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c61650b869e0b6fb0c0a28ed42d928eea969afc8
Author: Xu Kuohai <xukuohai@huawei.com>
Date:   Tue Oct 11 08:01:03 2022 -0400

    libbpf: Fix use-after-free in btf_dump_name_dups
    
    [ Upstream commit 93c660ca40b5d2f7c1b1626e955a8e9fa30e0749 ]
    
    ASAN reports an use-after-free in btf_dump_name_dups:
    
    ERROR: AddressSanitizer: heap-use-after-free on address 0xffff927006db at pc 0xaaaab5dfb618 bp 0xffffdd89b890 sp 0xffffdd89b928
    READ of size 2 at 0xffff927006db thread T0
        #0 0xaaaab5dfb614 in __interceptor_strcmp.part.0 (test_progs+0x21b614)
        #1 0xaaaab635f144 in str_equal_fn tools/lib/bpf/btf_dump.c:127
        #2 0xaaaab635e3e0 in hashmap_find_entry tools/lib/bpf/hashmap.c:143
        #3 0xaaaab635e72c in hashmap__find tools/lib/bpf/hashmap.c:212
        #4 0xaaaab6362258 in btf_dump_name_dups tools/lib/bpf/btf_dump.c:1525
        #5 0xaaaab636240c in btf_dump_resolve_name tools/lib/bpf/btf_dump.c:1552
        #6 0xaaaab6362598 in btf_dump_type_name tools/lib/bpf/btf_dump.c:1567
        #7 0xaaaab6360b48 in btf_dump_emit_struct_def tools/lib/bpf/btf_dump.c:912
        #8 0xaaaab6360630 in btf_dump_emit_type tools/lib/bpf/btf_dump.c:798
        #9 0xaaaab635f720 in btf_dump__dump_type tools/lib/bpf/btf_dump.c:282
        #10 0xaaaab608523c in test_btf_dump_incremental tools/testing/selftests/bpf/prog_tests/btf_dump.c:236
        #11 0xaaaab6097530 in test_btf_dump tools/testing/selftests/bpf/prog_tests/btf_dump.c:875
        #12 0xaaaab6314ed0 in run_one_test tools/testing/selftests/bpf/test_progs.c:1062
        #13 0xaaaab631a0a8 in main tools/testing/selftests/bpf/test_progs.c:1697
        #14 0xffff9676d214 in __libc_start_main ../csu/libc-start.c:308
        #15 0xaaaab5d65990  (test_progs+0x185990)
    
    0xffff927006db is located 11 bytes inside of 16-byte region [0xffff927006d0,0xffff927006e0)
    freed by thread T0 here:
        #0 0xaaaab5e2c7c4 in realloc (test_progs+0x24c7c4)
        #1 0xaaaab634f4a0 in libbpf_reallocarray tools/lib/bpf/libbpf_internal.h:191
        #2 0xaaaab634f840 in libbpf_add_mem tools/lib/bpf/btf.c:163
        #3 0xaaaab636643c in strset_add_str_mem tools/lib/bpf/strset.c:106
        #4 0xaaaab6366560 in strset__add_str tools/lib/bpf/strset.c:157
        #5 0xaaaab6352d70 in btf__add_str tools/lib/bpf/btf.c:1519
        #6 0xaaaab6353e10 in btf__add_field tools/lib/bpf/btf.c:2032
        #7 0xaaaab6084fcc in test_btf_dump_incremental tools/testing/selftests/bpf/prog_tests/btf_dump.c:232
        #8 0xaaaab6097530 in test_btf_dump tools/testing/selftests/bpf/prog_tests/btf_dump.c:875
        #9 0xaaaab6314ed0 in run_one_test tools/testing/selftests/bpf/test_progs.c:1062
        #10 0xaaaab631a0a8 in main tools/testing/selftests/bpf/test_progs.c:1697
        #11 0xffff9676d214 in __libc_start_main ../csu/libc-start.c:308
        #12 0xaaaab5d65990  (test_progs+0x185990)
    
    previously allocated by thread T0 here:
        #0 0xaaaab5e2c7c4 in realloc (test_progs+0x24c7c4)
        #1 0xaaaab634f4a0 in libbpf_reallocarray tools/lib/bpf/libbpf_internal.h:191
        #2 0xaaaab634f840 in libbpf_add_mem tools/lib/bpf/btf.c:163
        #3 0xaaaab636643c in strset_add_str_mem tools/lib/bpf/strset.c:106
        #4 0xaaaab6366560 in strset__add_str tools/lib/bpf/strset.c:157
        #5 0xaaaab6352d70 in btf__add_str tools/lib/bpf/btf.c:1519
        #6 0xaaaab6353ff0 in btf_add_enum_common tools/lib/bpf/btf.c:2070
        #7 0xaaaab6354080 in btf__add_enum tools/lib/bpf/btf.c:2102
        #8 0xaaaab6082f50 in test_btf_dump_incremental tools/testing/selftests/bpf/prog_tests/btf_dump.c:162
        #9 0xaaaab6097530 in test_btf_dump tools/testing/selftests/bpf/prog_tests/btf_dump.c:875
        #10 0xaaaab6314ed0 in run_one_test tools/testing/selftests/bpf/test_progs.c:1062
        #11 0xaaaab631a0a8 in main tools/testing/selftests/bpf/test_progs.c:1697
        #12 0xffff9676d214 in __libc_start_main ../csu/libc-start.c:308
        #13 0xaaaab5d65990  (test_progs+0x185990)
    
    The reason is that the key stored in hash table name_map is a string
    address, and the string memory is allocated by realloc() function, when
    the memory is resized by realloc() later, the old memory may be freed,
    so the address stored in name_map references to a freed memory, causing
    use-after-free.
    
    Fix it by storing duplicated string address in name_map.
    
    Fixes: 919d2b1dbb07 ("libbpf: Allow modification of BTF and add btf__add_str API")
    Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: Martin KaFai Lau <martin.lau@kernel.org>
    Link: https://lore.kernel.org/bpf/20221011120108.782373-2-xukuohai@huaweicloud.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26ce3f0c8f61d578786d1e1e6bed8cefc1e4844a
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Tue Oct 11 14:10:49 2022 -0700

    drm/bridge: adv7533: remove dynamic lane switching from adv7533 bridge
    
    [ Upstream commit 9a0cdcd6649b76f0b7ceec0e55b0a718321e34d3 ]
    
    adv7533 bridge tries to dynamically switch lanes based on the
    mode by detaching and attaching the mipi dsi device.
    
    This approach is incorrect because this method of dynamic switch of
    detaching and attaching the mipi dsi device also results in removing
    and adding the component which is not necessary.
    
    This approach is also prone to deadlocks. So for example, on the
    db410c whenever this path is executed with lockdep enabled,
    this results in a deadlock due to below ordering of locks.
    
    -> #1 (crtc_ww_class_acquire){+.+.}-{0:0}:
            lock_acquire+0x6c/0x90
            drm_modeset_acquire_init+0xf4/0x150
            drmm_mode_config_init+0x220/0x770
            msm_drm_bind+0x13c/0x654
            try_to_bring_up_aggregate_device+0x164/0x1d0
            __component_add+0xa8/0x174
            component_add+0x18/0x2c
            dsi_dev_attach+0x24/0x30
            dsi_host_attach+0x98/0x14c
            devm_mipi_dsi_attach+0x38/0xb0
            adv7533_attach_dsi+0x8c/0x110
            adv7511_probe+0x5a0/0x930
            i2c_device_probe+0x30c/0x350
            really_probe.part.0+0x9c/0x2b0
            __driver_probe_device+0x98/0x144
            driver_probe_device+0xac/0x14c
            __device_attach_driver+0xbc/0x124
            bus_for_each_drv+0x78/0xd0
            __device_attach+0xa8/0x1c0
            device_initial_probe+0x18/0x24
            bus_probe_device+0xa0/0xac
            deferred_probe_work_func+0x90/0xd0
            process_one_work+0x28c/0x6b0
            worker_thread+0x240/0x444
            kthread+0x110/0x114
            ret_from_fork+0x10/0x20
    
    -> #0 (component_mutex){+.+.}-{3:3}:
            __lock_acquire+0x1280/0x20ac
            lock_acquire.part.0+0xe0/0x230
            lock_acquire+0x6c/0x90
            __mutex_lock+0x84/0x400
            mutex_lock_nested+0x3c/0x70
            component_del+0x34/0x170
            dsi_dev_detach+0x24/0x30
            dsi_host_detach+0x20/0x64
            mipi_dsi_detach+0x2c/0x40
            adv7533_mode_set+0x64/0x90
            adv7511_bridge_mode_set+0x210/0x214
            drm_bridge_chain_mode_set+0x5c/0x84
            crtc_set_mode+0x18c/0x1dc
            drm_atomic_helper_commit_modeset_disables+0x40/0x50
            msm_atomic_commit_tail+0x1d0/0x6e0
            commit_tail+0xa4/0x180
            drm_atomic_helper_commit+0x178/0x3b0
            drm_atomic_commit+0xa4/0xe0
            drm_client_modeset_commit_atomic+0x228/0x284
            drm_client_modeset_commit_locked+0x64/0x1d0
            drm_client_modeset_commit+0x34/0x60
            drm_fb_helper_lastclose+0x74/0xcc
            drm_lastclose+0x3c/0x80
            drm_release+0xfc/0x114
            __fput+0x70/0x224
            ____fput+0x14/0x20
            task_work_run+0x88/0x1a0
            do_exit+0x350/0xa50
            do_group_exit+0x38/0xa4
            __wake_up_parent+0x0/0x34
            invoke_syscall+0x48/0x114
            el0_svc_common.constprop.0+0x60/0x11c
            do_el0_svc+0x30/0xc0
            el0_svc+0x58/0x100
            el0t_64_sync_handler+0x1b0/0x1bc
            el0t_64_sync+0x18c/0x190
    
    Due to above reasons, remove the dynamic lane switching
    code from adv7533 bridge chip and filter out the modes
    which would need different number of lanes as compared
    to the initialization time using the mode_valid callback.
    
    This can be potentially re-introduced by using the pre_enable()
    callback but this needs to be evaluated first whether such an
    approach will work so this will be done with a separate change.
    
    changes since RFC:
            - Fix commit text and add TODO comment
    
    changes in v2:
            - Fix checkpatch formatting errors
    
    Fixes: 62b2f026cd8e ("drm/bridge: adv7533: Change number of DSI lanes dynamically")
    Closes: https://gitlab.freedesktop.org/drm/msm/-/issues/16
    Suggested-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Link: https://lore.kernel.org/r/1661797363-7564-1-git-send-email-quic_abhinavk@quicinc.com
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1665522649-3423-1-git-send-email-quic_abhinavk@quicinc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b6851c1826356c573391230e7629ba6ec53a3de
Author: Bitterblue Smith <rtl8821cerfe2@gmail.com>
Date:   Sat Oct 8 13:56:09 2022 +0300

    wifi: rtl8xxxu: Fix reading the vendor of combo chips
    
    [ Upstream commit 6f103aeb5e985ac08f3a4a049a2c17294f40cff9 ]
    
    The wifi + bluetooth combo chips (RTL8723AU and RTL8723BU) read the
    chip vendor from the wrong register because the val32 variable gets
    overwritten. Add one more variable to avoid this.
    
    This had no real effect on RTL8723BU. It may have had an effect on
    RTL8723AU.
    
    Fixes: 26f1fad29ad9 ("New driver: rtl8xxxu (mac80211)")
    Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/24af8024-2f07-552b-93d8-38823d8e3cb0@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98d9172822dc6f38138333941984bd759a89d419
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Sat Oct 8 14:49:17 2022 +0300

    wifi: ath9k: hif_usb: Fix use-after-free in ath9k_hif_usb_reg_in_cb()
    
    [ Upstream commit dd95f2239fc846795fc926787c3ae0ca701c9840 ]
    
    It is possible that skb is freed in ath9k_htc_rx_msg(), then
    usb_submit_urb() fails and we try to free skb again. It causes
    use-after-free bug. Moreover, if alloc_skb() fails, urb->context becomes
    NULL but rx_buf is not freed and there can be a memory leak.
    
    The patch removes unnecessary nskb and makes skb processing more clear: it
    is supposed that ath9k_htc_rx_msg() either frees old skb or passes its
    managing to another callback function.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 3deff76095c4 ("ath9k_htc: Increase URB count for REG_IN pipe")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20221008114917.21404-1-pchelkin@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3fb3e9a2c0c1a0fa492d90eb19bcfa92a5f884d
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Mon Jul 25 18:13:59 2022 +0300

    wifi: ath9k: hif_usb: fix memory leak of urbs in ath9k_hif_usb_dealloc_tx_urbs()
    
    [ Upstream commit c2a94de38c74e86f49124ac14f093d6a5c377a90 ]
    
    Syzkaller reports a long-known leak of urbs in
    ath9k_hif_usb_dealloc_tx_urbs().
    
    The cause of the leak is that usb_get_urb() is called but usb_free_urb()
    (or usb_put_urb()) is not called inside usb_kill_urb() as urb->dev or
    urb->ep fields have not been initialized and usb_kill_urb() returns
    immediately.
    
    The patch removes trying to kill urbs located in hif_dev->tx.tx_buf
    because hif_dev->tx.tx_buf is not supposed to contain urbs which are in
    pending state (the pending urbs are stored in hif_dev->tx.tx_pending).
    The tx.tx_lock is acquired so there should not be any changes in the list.
    
    Found by Linux Verification Center (linuxtesting.org) with Syzkaller.
    
    Fixes: 03fb92a432ea ("ath9k: hif_usb: fix race condition between usb_get_urb() and usb_kill_anchored_urbs()")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220725151359.283704-1-pchelkin@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53915ecc43c5139d6cdd1caa4fdc9290b9597008
Author: Cai Xinchen <caixinchen1@huawei.com>
Date:   Sat Dec 3 08:57:21 2022 +0000

    rapidio: devices: fix missing put_device in mport_cdev_open
    
    [ Upstream commit d5b6e6eba3af11cb2a2791fa36a2524990fcde1a ]
    
    When kfifo_alloc fails, the refcount of chdev->dev is left incremental.
    We should use put_device(&chdev->dev) to decrease the ref count of
    chdev->dev to avoid refcount leak.
    
    Link: https://lkml.kernel.org/r/20221203085721.13146-1-caixinchen1@huawei.com
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Signed-off-by: Cai Xinchen <caixinchen1@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Jakob Koschel <jakobkoschel@gmail.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Wang Weiyang <wangweiyang2@huawei.com>
    Cc: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cff9fefdfbf5744afbb6d70bff2b49ec2065d23d
Author: ZhangPeng <zhangpeng362@huawei.com>
Date:   Fri Dec 2 03:00:38 2022 +0000

    hfs: Fix OOB Write in hfs_asc2mac
    
    [ Upstream commit c53ed55cb275344086e32a7080a6b19cb183650b ]
    
    Syzbot reported a OOB Write bug:
    
    loop0: detected capacity change from 0 to 64
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in hfs_asc2mac+0x467/0x9a0
    fs/hfs/trans.c:133
    Write of size 1 at addr ffff88801848314e by task syz-executor391/3632
    
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1b1/0x28e lib/dump_stack.c:106
     print_address_description+0x74/0x340 mm/kasan/report.c:284
     print_report+0x107/0x1f0 mm/kasan/report.c:395
     kasan_report+0xcd/0x100 mm/kasan/report.c:495
     hfs_asc2mac+0x467/0x9a0 fs/hfs/trans.c:133
     hfs_cat_build_key+0x92/0x170 fs/hfs/catalog.c:28
     hfs_lookup+0x1ab/0x2c0 fs/hfs/dir.c:31
     lookup_open fs/namei.c:3391 [inline]
     open_last_lookups fs/namei.c:3481 [inline]
     path_openat+0x10e6/0x2df0 fs/namei.c:3710
     do_filp_open+0x264/0x4f0 fs/namei.c:3740
    
    If in->len is much larger than HFS_NAMELEN(31) which is the maximum
    length of an HFS filename, a OOB write could occur in hfs_asc2mac(). In
    that case, when the dst reaches the boundary, the srclen is still
    greater than 0, which causes a OOB write.
    Fix this by adding a check on dstlen in while() before writing to dst
    address.
    
    Link: https://lkml.kernel.org/r/20221202030038.1391945-1-zhangpeng362@huawei.com
    Fixes: 328b92278650 ("[PATCH] hfs: NLS support")
    Signed-off-by: ZhangPeng <zhangpeng362@huawei.com>
    Reviewed-by: Viacheslav Dubeyko <slava@dubeyko.com>
    Reported-by: <syzbot+dc3b1cf9111ab5fe98e7@syzkaller.appspotmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93cdd1263691df25b7ec710f3b9ba2264724f1a3
Author: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
Date:   Tue Nov 29 09:23:38 2022 +0000

    relay: fix type mismatch when allocating memory in relay_create_buf()
    
    [ Upstream commit 4d8586e04602fe42f0a782d2005956f8b6302678 ]
    
    The 'padding' field of the 'rchan_buf' structure is an array of 'size_t'
    elements, but the memory is allocated for an array of 'size_t *' elements.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Link: https://lkml.kernel.org/r/20221129092002.3538384-1-Ilia.Gavrilov@infotecs.ru
    Fixes: b86ff981a825 ("[PATCH] relay: migrate from relayfs to a generic relay API")
    Signed-off-by: Ilia.Gavrilov <Ilia.Gavrilov@infotecs.ru>
    Cc: Colin Ian King <colin.i.king@gmail.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: wuchi <wuchi.zero@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbaa9ca063298dadc37715103f860332b1c42989
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Nov 24 22:01:54 2022 +0800

    eventfd: change int to __u64 in eventfd_signal() ifndef CONFIG_EVENTFD
    
    [ Upstream commit fd4e60bf0ef8eb9edcfa12dda39e8b6ee9060492 ]
    
    Commit ee62c6b2dc93 ("eventfd: change int to __u64 in eventfd_signal()")
    forgot to change int to __u64 in the CONFIG_EVENTFD=n stub function.
    
    Link: https://lkml.kernel.org/r/20221124140154.104680-1-zhangqilong3@huawei.com
    Fixes: ee62c6b2dc93 ("eventfd: change int to __u64 in eventfd_signal()")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Cc: Dylan Yudaken <dylany@fb.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Sha Zhengju <handai.szj@taobao.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ee850645e42f541ce1ea8130c2b27cc495f965c
Author: Wang Weiyang <wangweiyang2@huawei.com>
Date:   Wed Nov 23 17:51:47 2022 +0800

    rapidio: fix possible UAF when kfifo_alloc() fails
    
    [ Upstream commit 02d7d89f816951e0862147d751b1150d67aaebdd ]
    
    If kfifo_alloc() fails in mport_cdev_open(), goto err_fifo and just free
    priv. But priv is still in the chdev->file_list, then list traversal
    may cause UAF. This fixes the following smatch warning:
    
    drivers/rapidio/devices/rio_mport_cdev.c:1930 mport_cdev_open() warn: '&priv->list' not removed from list
    
    Link: https://lkml.kernel.org/r/20221123095147.52408-1-wangweiyang2@huawei.com
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Signed-off-by: Wang Weiyang <wangweiyang2@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Jakob Koschel <jakobkoschel@gmail.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad4842634d6819994c567073f9fb43bd5c9b1ee9
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Fri Dec 9 18:04:48 2022 +0800

    fs: sysv: Fix sysv_nblocks() returns wrong value
    
    [ Upstream commit e0c49bd2b4d3cd1751491eb2d940bce968ac65e9 ]
    
    sysv_nblocks() returns 'blocks' rather than 'res', which only counting
    the number of triple-indirect blocks and causing sysv_getattr() gets a
    wrong result.
    
    [AV: this is actually a sysv counterpart of minixfs fix -
    0fcd426de9d0 "[PATCH] minix block usage counting fix" in
    historical tree; mea culpa, should've thought to check
    fs/sysv back then...]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f8ef1de8c655c5622f7d239d99a8a081a0f4f0b
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Thu Dec 8 12:25:57 2022 +0100

    MIPS: OCTEON: warn only once if deprecated link status is being used
    
    [ Upstream commit 4c587a982603d7e7e751b4925809a1512099a690 ]
    
    Avoid flooding kernel log with warnings.
    
    Fixes: 2c0756d306c2 ("MIPS: OCTEON: warn if deprecated link status is being used")
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@linaro.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b88747d6d9815f9b92d48a5c68e88a741bfe806
Author: Anastasia Belova <abelova@astralinux.ru>
Date:   Fri Dec 9 13:05:50 2022 +0300

    MIPS: BCM63xx: Add check for NULL for clk in clk_enable
    
    [ Upstream commit ee9ef11bd2a59c2fefaa0959e5efcdf040d7c654 ]
    
    Check clk for NULL before calling clk_enable_unlocked where clk
    is dereferenced. There is such check in other implementations
    of clk_enable.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: e7300d04bd08 ("MIPS: BCM63xx: Add support for the Broadcom BCM63xx family of SOCs.")
    Signed-off-by: Anastasia Belova <abelova@astralinux.ru>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@linaro.org>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4c38ee665a228663af0926c380670528d08aa63
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Dec 8 23:19:16 2022 +0800

    platform/x86: intel_scu_ipc: fix possible name leak in __intel_scu_ipc_register()
    
    [ Upstream commit 0b3d0cb7c0bed2fd6454f77ed75e7a662c6efd12 ]
    
    In some error paths before device_register(), the names allocated
    by dev_set_name() are not freed. Move dev_set_name() front to
    device_register(), so the name can be freed while calling
    put_device().
    
    Fixes: 54b34aa0a729 ("platform/x86: intel_scu_ipc: Split out SCU IPC functionality from the SCU driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221208151916.2404977-1-yangyingliang@huawei.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17cd8c46cbec4e6ad593fb9159928b8e7608c11a
Author: Yu Liao <liaoyu15@huawei.com>
Date:   Tue Nov 29 09:11:01 2022 +0800

    platform/x86: mxm-wmi: fix memleak in mxm_wmi_call_mx[ds|mx]()
    
    [ Upstream commit 727cc0147f5066e359aca65cc6cc5e6d64cc15d8 ]
    
    The ACPI buffer memory (out.pointer) returned by wmi_evaluate_method()
    is not freed after the call, so it leads to memory leak.
    
    The method results in ACPI buffer is not used, so just pass NULL to
    wmi_evaluate_method() which fixes the memory leak.
    
    Fixes: 99b38b4acc0d ("platform/x86: add MXM WMI driver.")
    Signed-off-by: Yu Liao <liaoyu15@huawei.com>
    Link: https://lore.kernel.org/r/20221129011101.2042315-1-liaoyu15@huawei.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f983afc4326c91062abdab6d95312b98a9de0654
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Dec 2 15:30:28 2022 +0100

    PM: runtime: Do not call __rpm_callback() from rpm_idle()
    
    [ Upstream commit bc80c2e438dcbfcf748452ec0f7ad5b79ff3ad88 ]
    
    Calling __rpm_callback() from rpm_idle() after adding device links
    support to the former is a clear mistake.
    
    Not only it causes rpm_idle() to carry out unnecessary actions, but it
    is also against the assumption regarding the stability of PM-runtime
    status across __rpm_callback() invocations, because rpm_suspend() and
    rpm_resume() may run in parallel with __rpm_callback() when it is called
    by rpm_idle() and the device's PM-runtime status can be updated by any
    of them.
    
    Fixes: 21d5c57b3726 ("PM / runtime: Use device links")
    Link: https://lore.kernel.org/linux-pm/36aed941-a73e-d937-2721-4f0decd61ce0@quicinc.com
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cbbd78e08bc8645a2a39eba17f0bcbbf467a6f4
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Jun 8 11:02:48 2021 +0200

    PM: runtime: Improve path in rpm_idle() when no callback
    
    [ Upstream commit 5a2bd1b1c64e1ac5627db3767ac465f18606315c ]
    
    When pm_runtime_no_callbacks() has been called for a struct device to set
    the dev->power.no_callbacks flag for it, it enables rpm_idle() to take a
    slightly quicker path by assuming that a ->runtime_idle() callback would
    have returned 0 to indicate success.
    
    A device that does not have the dev->power.no_callbacks flag set for it,
    may still be missing a corresponding ->runtime_idle() callback, in which
    case the slower path in rpm_idle() is taken. Let's improve the behaviour
    for this case, by aligning code to the quicker path.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Stable-dep-of: bc80c2e438dc ("PM: runtime: Do not call __rpm_callback() from rpm_idle()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46026bb057c35f5bb111bf95e00cd8366d2e34d4
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Fri Nov 25 21:07:45 2022 -0800

    xen/privcmd: Fix a possible warning in privcmd_ioctl_mmap_resource()
    
    [ Upstream commit 8b997b2bb2c53b76a6db6c195930e9ab8e4b0c79 ]
    
    As 'kdata.num' is user-controlled data, if user tries to allocate
    memory larger than(>=) MAX_ORDER, then kcalloc() will fail, it
    creates a stack trace and messes up dmesg with a warning.
    
    Call trace:
    -> privcmd_ioctl
    --> privcmd_ioctl_mmap_resource
    
    Add __GFP_NOWARN in order to avoid too large allocation warning.
    This is detected by static analysis using smatch.
    
    Fixes: 3ad0876554ca ("xen/privcmd: add IOCTL_PRIVCMD_MMAP_RESOURCE")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20221126050745.778967-1-harshit.m.mogalapalli@oracle.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70e7f308d7a8e915c7fbc0f1d959968eab8000cd
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 23 23:58:58 2022 +0800

    x86/xen: Fix memory leak in xen_init_lock_cpu()
    
    [ Upstream commit ca84ce153d887b1dc8b118029976cc9faf2a9b40 ]
    
    In xen_init_lock_cpu(), the @name has allocated new string by kasprintf(),
    if bind_ipi_to_irqhandler() fails, it should be freed, otherwise may lead
    to a memory leak issue, fix it.
    
    Fixes: 2d9e1e2f58b5 ("xen: implement Xen-specific spinlocks")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20221123155858.11382-3-xiujianfeng@huawei.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc134c355b5299495b14a54dd9bb7af8a646cb7c
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 23 23:58:57 2022 +0800

    x86/xen: Fix memory leak in xen_smp_intr_init{_pv}()
    
    [ Upstream commit 69143f60868b3939ddc89289b29db593b647295e ]
    
    These local variables @{resched|pmu|callfunc...}_name saves the new
    string allocated by kasprintf(), and when bind_{v}ipi_to_irqhandler()
    fails, it goes to the @fail tag, and calls xen_smp_intr_free{_pv}() to
    free resource, however the new string is not saved, which cause a memory
    leak issue. fix it.
    
    Fixes: 9702785a747a ("i386: move xen")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20221123155858.11382-2-xiujianfeng@huawei.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95dbcb7e1c34502dc9f5333abb74553e4086505a
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Sun Dec 4 18:39:33 2022 +0100

    uprobes/x86: Allow to probe a NOP instruction with 0x66 prefix
    
    [ Upstream commit cefa72129e45313655d53a065b8055aaeb01a0c9 ]
    
    Intel ICC -hotpatch inserts 2-byte "0x66 0x90" NOP at the start of each
    function to reserve extra space for hot-patching, and currently it is not
    possible to probe these functions because branch_setup_xol_ops() wrongly
    rejects NOP with REP prefix as it treats them like word-sized branch
    instructions.
    
    Fixes: 250bbd12c2fe ("uprobes/x86: Refuse to attach uprobe to "word-sized" branch insns")
    Reported-by: Seiji Nishikawa <snishika@redhat.com>
    Suggested-by: Denys Vlasenko <dvlasenk@redhat.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Link: https://lore.kernel.org/r/20221204173933.GA31544@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02617006b5a46f2ea55ac61f5693c7afd7bf9276
Author: Li Zetao <lizetao1@huawei.com>
Date:   Thu Dec 1 16:05:14 2022 +0800

    ACPICA: Fix use-after-free in acpi_ut_copy_ipackage_to_ipackage()
    
    [ Upstream commit 470188b09e92d83c5a997f25f0e8fb8cd2bc3469 ]
    
    There is an use-after-free reported by KASAN:
    
      BUG: KASAN: use-after-free in acpi_ut_remove_reference+0x3b/0x82
      Read of size 1 at addr ffff888112afc460 by task modprobe/2111
      CPU: 0 PID: 2111 Comm: modprobe Not tainted 6.1.0-rc7-dirty
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
      Call Trace:
       <TASK>
       kasan_report+0xae/0xe0
       acpi_ut_remove_reference+0x3b/0x82
       acpi_ut_copy_iobject_to_iobject+0x3be/0x3d5
       acpi_ds_store_object_to_local+0x15d/0x3a0
       acpi_ex_store+0x78d/0x7fd
       acpi_ex_opcode_1A_1T_1R+0xbe4/0xf9b
       acpi_ps_parse_aml+0x217/0x8d5
       ...
       </TASK>
    
    The root cause of the problem is that the acpi_operand_object
    is freed when acpi_ut_walk_package_tree() fails in
    acpi_ut_copy_ipackage_to_ipackage(), lead to repeated release in
    acpi_ut_copy_iobject_to_iobject(). The problem was introduced
    by "8aa5e56eeb61" commit, this commit is to fix memory leak in
    acpi_ut_copy_iobject_to_iobject(), repeatedly adding remove
    operation, lead to "acpi_operand_object" used after free.
    
    Fix it by removing acpi_ut_remove_reference() in
    acpi_ut_copy_ipackage_to_ipackage(). acpi_ut_copy_ipackage_to_ipackage()
    is called to copy an internal package object into another internal
    package object, when it fails, the memory of acpi_operand_object
    should be freed by the caller.
    
    Fixes: 8aa5e56eeb61 ("ACPICA: Utilities: Fix memory leak in acpi_ut_copy_iobject_to_iobject")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bc9c5ad522b98d9c8744bb1a5651278b6cd02c2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:44:27 2022 +0800

    clocksource/drivers/timer-ti-dm: Fix missing clk_disable_unprepare in dmtimer_systimer_init_clock()
    
    [ Upstream commit 180d35a7c05d520314a590c99ad8643d0213f28b ]
    
    If clk_get_rate() fails which is called after clk_prepare_enable(),
    clk_disable_unprepare() need be called in error path to disable the
    clock in dmtimer_systimer_init_clock().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221029114427.946520-1-yangyingliang@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 270700e7df960fa227c2106718578302bab8ce44
Author: Phil Auld <pauld@redhat.com>
Date:   Thu Nov 17 11:23:28 2022 -0500

    cpu/hotplug: Make target_store() a nop when target == state
    
    [ Upstream commit 64ea6e44f85b9b75925ebe1ba0e6e8430cc4e06f ]
    
    Writing the current state back in hotplug/target calls cpu_down()
    which will set cpu dying even when it isn't and then nothing will
    ever clear it. A stress test that reads values and writes them back
    for all cpu device files in sysfs will trigger the BUG() in
    select_fallback_rq once all cpus are marked as dying.
    
    kernel/cpu.c::target_store()
            ...
            if (st->state < target)
                    ret = cpu_up(dev->id, target);
            else
                    ret = cpu_down(dev->id, target);
    
    cpu_down() -> cpu_set_state()
             bool bringup = st->state < target;
             ...
             if (cpu_dying(cpu) != !bringup)
                    set_cpu_dying(cpu, !bringup);
    
    Fix this by letting state==target fall through in the target_store()
    conditional. Also make sure st->target == target in that case.
    
    Fixes: 757c989b9994 ("cpu/hotplug: Make target state writeable")
    Signed-off-by: Phil Auld <pauld@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Valentin Schneider <vschneid@redhat.com>
    Link: https://lore.kernel.org/r/20221117162329.3164999-2-pauld@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc89b8853aec7ee07b31ae45e8f980369a79871d
Author: Alexey Izbyshev <izbyshev@ispras.ru>
Date:   Sat Nov 12 00:54:39 2022 +0300

    futex: Resend potentially swallowed owner death notification
    
    [ Upstream commit 90d758896787048fa3d4209309d4800f3920e66f ]
    
    Commit ca16d5bee598 ("futex: Prevent robust futex exit race") addressed
    two cases when tasks waiting on a robust non-PI futex remained blocked
    despite the futex not being owned anymore:
    
    * if the owner died after writing zero to the futex word, but before
      waking up a waiter
    
    * if a task waiting on the futex was woken up, but died before updating
      the futex word (effectively swallowing the notification without acting
      on it)
    
    In the second case, the task could be woken up either by the previous
    owner (after the futex word was reset to zero) or by the kernel (after
    the OWNER_DIED bit was set and the TID part of the futex word was reset
    to zero) if the previous owner died without the resetting the futex.
    
    Because the referenced commit wakes up a potential waiter only if the
    whole futex word is zero, the latter subcase remains unaddressed.
    
    Fix this by looking only at the TID part of the futex when deciding
    whether a wake up is needed.
    
    Fixes: ca16d5bee598 ("futex: Prevent robust futex exit race")
    Signed-off-by: Alexey Izbyshev <izbyshev@ispras.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20221111215439.248185-1-izbyshev@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4750cac4df681ae7bcfa294312f340238b3eadab
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Sep 23 14:10:50 2021 -0300

    futex: Move to kernel/futex/
    
    [ Upstream commit 77e52ae35463521041906c510fe580d15663bb93 ]
    
    In preparation for splitup..
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: André Almeida <andrealmeid@collabora.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: André Almeida <andrealmeid@collabora.com>
    Link: https://lore.kernel.org/r/20210923171111.300673-2-andrealmeid@collabora.com
    Stable-dep-of: 90d758896787 ("futex: Resend potentially swallowed owner death notification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8e7a44f488c1190ebadde6e038bf7940f50664a
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Nov 30 22:06:09 2022 +0100

    clocksource/drivers/sh_cmt: Access registers according to spec
    
    [ Upstream commit 3f44f7156f59cae06e9160eafb5d8b2dfd09e639 ]
    
    Documentation for most CMTs say that it takes two input clocks before
    changes propagate to the timer. This is especially relevant when the timer
    is stopped to change further settings.
    
    Implement the delays according to the spec. To avoid unnecessary delays in
    atomic mode, also check if the to-be-written value actually differs.
    
    CMCNT is a bit special because testing showed that it requires 3 cycles to
    propagate, which affects all CMTs. Also, the WRFLAG needs to be checked
    before writing. This fixes "cannot clear CMCNT" messages which occur often
    on R-Car Gen4 SoCs, but only very rarely on older SoCs for some reason.
    
    Fixes: 81b3b2711072 ("clocksource: sh_cmt: Add support for multiple channels per device")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221130210609.7718-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0853787db28e99dc6d014761479ace7b8b4704d9
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Dec 10 20:46:48 2020 +0100

    clocksource/drivers/sh_cmt: Make sure channel clock supply is enabled
    
    [ Upstream commit 2a97d55333e4299f32c98cca6dc5c4db1c5855fc ]
    
    The Renesas Compare Match Timer 0 and 1 (CMT0/1) variants have a
    register to control the clock supply to the individual channels.
    Currently the driver does not touch this register, and relies on the
    documented initial value, which has the clock supply enabled for all
    channels present.
    
    However, when Linux starts on the APE6-EVM development board, only the
    clock supply to the first CMT1 channel is enabled.  Hence the first
    channel (used as a clockevent) works, while the second channel (used as
    a clocksource) does not.  Note that the default system clocksource is
    the Cortex-A15 architectured timer, and the user needs to manually
    switch to the CMT1 clocksource to trigger the broken behavior.
    
    Fix this by removing the fragile dependency on implicit reset and/or
    boot loader state, and by enabling the clock supply explicitly for all
    channels used instead.  This requires postponing the clk_disable() call,
    else the timer's registers cannot be accessed in sh_cmt_setup_channel().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201210194648.2901899-1-geert+renesas@glider.be
    Stable-dep-of: 3f44f7156f59 ("clocksource/drivers/sh_cmt: Access registers according to spec")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97d9eb45ffa67ffa112a6659953321b8f7db0065
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 14 23:26:36 2022 +0800

    rapidio: rio: fix possible name leak in rio_register_mport()
    
    [ Upstream commit e92a216d16bde65d21a3227e0fb2aa0794576525 ]
    
    If device_register() returns error, the name allocated by dev_set_name()
    need be freed.  It should use put_device() to give up the reference in the
    error path, so that the name can be freed in kobject_cleanup(), and
    list_del() is called to delete the port from rio_mports.
    
    Link: https://lkml.kernel.org/r/20221114152636.2939035-3-yangyingliang@huawei.com
    Fixes: 2aaf308b95b2 ("rapidio: rework device hierarchy and introduce mport class of devices")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88fa351b20ca300693a206ccd3c4b0e0647944d8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 14 23:26:35 2022 +0800

    rapidio: fix possible name leaks when rio_add_device() fails
    
    [ Upstream commit f9574cd48679926e2a569e1957a5a1bcc8a719ac ]
    
    Patch series "rapidio: fix three possible memory leaks".
    
    This patchset fixes three name leaks in error handling.
     - patch #1 fixes two name leaks while rio_add_device() fails.
     - patch #2 fixes a name leak while  rio_register_mport() fails.
    
    This patch (of 2):
    
    If rio_add_device() returns error, the name allocated by dev_set_name()
    need be freed.  It should use put_device() to give up the reference in the
    error path, so that the name can be freed in kobject_cleanup(), and the
    'rdev' can be freed in rio_release_dev().
    
    Link: https://lkml.kernel.org/r/20221114152636.2939035-1-yangyingliang@huawei.com
    Link: https://lkml.kernel.org/r/20221114152636.2939035-2-yangyingliang@huawei.com
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b7e59ed2e77136e9360274f8f0fc208a003e95c
Author: Li Zetao <ocfs2-devel@oss.oracle.com>
Date:   Wed Nov 9 15:46:27 2022 +0800

    ocfs2: fix memory leak in ocfs2_mount_volume()
    
    [ Upstream commit ce2fcf1516d674a174d9b34d1e1024d64de9fba3 ]
    
    There is a memory leak reported by kmemleak:
    
      unreferenced object 0xffff88810cc65e60 (size 32):
        comm "mount.ocfs2", pid 23753, jiffies 4302528942 (age 34735.105s)
        hex dump (first 32 bytes):
          10 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01  ................
          01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<ffffffff8170f73d>] __kmalloc+0x4d/0x150
          [<ffffffffa0ac3f51>] ocfs2_compute_replay_slots+0x121/0x330 [ocfs2]
          [<ffffffffa0b65165>] ocfs2_check_volume+0x485/0x900 [ocfs2]
          [<ffffffffa0b68129>] ocfs2_mount_volume.isra.0+0x1e9/0x650 [ocfs2]
          [<ffffffffa0b7160b>] ocfs2_fill_super+0xe0b/0x1740 [ocfs2]
          [<ffffffff818e1fe2>] mount_bdev+0x312/0x400
          [<ffffffff819a086d>] legacy_get_tree+0xed/0x1d0
          [<ffffffff818de82d>] vfs_get_tree+0x7d/0x230
          [<ffffffff81957f92>] path_mount+0xd62/0x1760
          [<ffffffff81958a5a>] do_mount+0xca/0xe0
          [<ffffffff81958d3c>] __x64_sys_mount+0x12c/0x1a0
          [<ffffffff82f26f15>] do_syscall_64+0x35/0x80
          [<ffffffff8300006a>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    This call stack is related to two problems.  Firstly, the ocfs2 super uses
    "replay_map" to trace online/offline slots, in order to recover offline
    slots during recovery and mount.  But when ocfs2_truncate_log_init()
    returns an error in ocfs2_mount_volume(), the memory of "replay_map" will
    not be freed in error handling path.  Secondly, the memory of "replay_map"
    will not be freed if d_make_root() returns an error in ocfs2_fill_super().
    But the memory of "replay_map" will be freed normally when completing
    recovery and mount in ocfs2_complete_mount_recovery().
    
    Fix the first problem by adding error handling path to free "replay_map"
    when ocfs2_truncate_log_init() fails.  And fix the second problem by
    calling ocfs2_free_replay_slots(osb) in the error handling path
    "out_dismount".  In addition, since ocfs2_free_replay_slots() is static,
    it is necessary to remove its static attribute and declare it in header
    file.
    
    Link: https://lkml.kernel.org/r/20221109074627.2303950-1-lizetao1@huawei.com
    Fixes: 9140db04ef18 ("ocfs2: recover orphans in offline slots during recovery and mount")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45dabd8fe8a825e325eda57c2243af8c6549babd
Author: Heming Zhao via Ocfs2-devel <ocfs2-devel@oss.oracle.com>
Date:   Fri Apr 29 14:37:58 2022 -0700

    ocfs2: rewrite error handling of ocfs2_fill_super
    
    [ Upstream commit f1e75d128b46e3b066e7b2e7cfca10491109d44d ]
    
    Current ocfs2_fill_super() uses one goto label "read_super_error" to
    handle all error cases.  And with previous serial patches, the error
    handling should fork more branches to handle different error cases.  This
    patch rewrite the error handling of ocfs2_fill_super.
    
    Link: https://lkml.kernel.org/r/20220424130952.2436-6-heming.zhao@suse.com
    Signed-off-by: Heming Zhao <heming.zhao@suse.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Stable-dep-of: ce2fcf1516d6 ("ocfs2: fix memory leak in ocfs2_mount_volume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e403024c832b718a3225b256991cfbadc84bdaf6
Author: Heming Zhao via Ocfs2-devel <ocfs2-devel@oss.oracle.com>
Date:   Fri Apr 29 14:37:58 2022 -0700

    ocfs2: ocfs2_mount_volume does cleanup job before return error
    
    [ Upstream commit 0737e01de9c411e4db87dcedf4a9789d41b1c5c1 ]
    
    After this patch, when error, ocfs2_fill_super doesn't take care to
    release resources which are allocated in ocfs2_mount_volume.
    
    Link: https://lkml.kernel.org/r/20220424130952.2436-5-heming.zhao@suse.com
    Signed-off-by: Heming Zhao <heming.zhao@suse.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Stable-dep-of: ce2fcf1516d6 ("ocfs2: fix memory leak in ocfs2_mount_volume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81d26aa9036aa0254d55ec462145183aef5d5379
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Tue Sep 20 02:24:18 2022 +0900

    debugfs: fix error when writing negative value to atomic_t debugfs file
    
    [ Upstream commit d472cf797c4e268613dbce5ec9b95d0bcae19ecb ]
    
    The simple attribute files do not accept a negative value since the commit
    488dac0c9237 ("libfs: fix error cast of negative value in
    simple_attr_write()"), so we have to use a 64-bit value to write a
    negative value for a debugfs file created by debugfs_create_atomic_t().
    
    This restores the previous behaviour by introducing
    DEFINE_DEBUGFS_ATTRIBUTE_SIGNED for a signed value.
    
    Link: https://lkml.kernel.org/r/20220919172418.45257-4-akinobu.mita@gmail.com
    Fixes: 488dac0c9237 ("libfs: fix error cast of negative value in simple_attr_write()")
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Reported-by: Zhao Gongyi <zhaogongyi@huawei.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Wei Yongjun <weiyongjun1@huawei.com>
    Cc: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f649e18c9c1036f02d372afff036f4afb1beeaf9
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Thu Jun 3 14:58:41 2021 +0200

    docs: fault-injection: fix non-working usage of negative values
    
    [ Upstream commit 005747526d4f3c2ec995891e95cb7625161022f9 ]
    
    Fault injection uses debugfs in a way that the provided values via sysfs
    are interpreted as u64. Providing negative numbers results in an error:
    
    /sys/kernel/debug/fail_function# echo -1 > times
    sh: write error: Invalid argument
    
    Update the docs and examples to use "printf %#x <val>" in these cases.
    For "retval", reword the paragraph a little and fix a typo.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Link: https://lore.kernel.org/r/20210603125841.27436-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Stable-dep-of: d472cf797c4e ("debugfs: fix error when writing negative value to atomic_t debugfs file")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 869a37ad6f7827893082d0796e6191e879b6a5ef
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Tue Sep 20 02:24:17 2022 +0900

    lib/notifier-error-inject: fix error when writing -errno to debugfs file
    
    [ Upstream commit f883c3edd2c432a2931ec8773c70a570115a50fe ]
    
    The simple attribute files do not accept a negative value since the commit
    488dac0c9237 ("libfs: fix error cast of negative value in
    simple_attr_write()").
    
    This restores the previous behaviour by using newly introduced
    DEFINE_SIMPLE_ATTRIBUTE_SIGNED instead of DEFINE_SIMPLE_ATTRIBUTE.
    
    Link: https://lkml.kernel.org/r/20220919172418.45257-3-akinobu.mita@gmail.com
    Fixes: 488dac0c9237 ("libfs: fix error cast of negative value in simple_attr_write()")
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Reported-by: Zhao Gongyi <zhaogongyi@huawei.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Wei Yongjun <weiyongjun1@huawei.com>
    Cc: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c39aa503f47115160ffb8e4bce7a34033ccd3870
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Tue Sep 20 02:24:16 2022 +0900

    libfs: add DEFINE_SIMPLE_ATTRIBUTE_SIGNED for signed value
    
    [ Upstream commit 2e41f274f9aa71cdcc69dc1f26a3f9304a651804 ]
    
    Patch series "fix error when writing negative value to simple attribute
    files".
    
    The simple attribute files do not accept a negative value since the commit
    488dac0c9237 ("libfs: fix error cast of negative value in
    simple_attr_write()"), but some attribute files want to accept a negative
    value.
    
    This patch (of 3):
    
    The simple attribute files do not accept a negative value since the commit
    488dac0c9237 ("libfs: fix error cast of negative value in
    simple_attr_write()"), so we have to use a 64-bit value to write a
    negative value.
    
    This adds DEFINE_SIMPLE_ATTRIBUTE_SIGNED for a signed value.
    
    Link: https://lkml.kernel.org/r/20220919172418.45257-1-akinobu.mita@gmail.com
    Link: https://lkml.kernel.org/r/20220919172418.45257-2-akinobu.mita@gmail.com
    Fixes: 488dac0c9237 ("libfs: fix error cast of negative value in simple_attr_write()")
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Reported-by: Zhao Gongyi <zhaogongyi@huawei.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Wei Yongjun <weiyongjun1@huawei.com>
    Cc: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0080461624e98ccff5bf9a43441a6862ff1ca4ed
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Wed Nov 16 19:33:39 2022 +0800

    cpufreq: amd_freq_sensitivity: Add missing pci_dev_put()
    
    [ Upstream commit 91fda1f88c0968f1491ab150bb01690525af150a ]
    
    pci_get_device() will increase the reference count for the returned
    pci_dev. We need to use pci_dev_put() to decrease the reference count
    after using pci_get_device(). Let's add it.
    
    Fixes: 59a3b3a8db16 ("cpufreq: AMD: Ignore the check for ProcFeedback in ST/CZ")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9346517ed2c2767159060085185d6537fbfda619
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 28 23:16:12 2022 +0800

    genirq/irqdesc: Don't try to remove non-existing sysfs files
    
    [ Upstream commit 9049e1ca41983ab773d7ea244bee86d7835ec9f5 ]
    
    Fault injection tests trigger warnings like this:
    
      kernfs: can not remove 'chip_name', no directory
      WARNING: CPU: 0 PID: 253 at fs/kernfs/dir.c:1616 kernfs_remove_by_name_ns+0xce/0xe0
      RIP: 0010:kernfs_remove_by_name_ns+0xce/0xe0
      Call Trace:
       <TASK>
       remove_files.isra.1+0x3f/0xb0
       sysfs_remove_group+0x68/0xe0
       sysfs_remove_groups+0x41/0x70
       __kobject_del+0x45/0xc0
       kobject_del+0x29/0x40
       free_desc+0x42/0x70
       irq_free_descs+0x5e/0x90
    
    The reason is that the interrupt descriptor sysfs handling does not roll
    back on a failing kobject_add() during allocation. If the descriptor is
    freed later on, kobject_del() is invoked with a not added kobject resulting
    in the above warnings.
    
    A proper rollback in case of a kobject_add() failure would be the straight
    forward solution. But this is not possible due to the way how interrupt
    descriptor sysfs handling works.
    
    Interrupt descriptors are allocated before sysfs becomes available. So the
    sysfs files for the early allocated descriptors are added later in the boot
    process. At this point there can be nothing useful done about a failing
    kobject_add(). For consistency the interrupt descriptor allocation always
    treats kobject_add() failures as non-critical and just emits a warning.
    
    To solve this problem, keep track in the interrupt descriptor whether
    kobject_add() was successful or not and make the invocation of
    kobject_del() conditional on that.
    
    [ tglx: Massage changelog, comments and use a state bit. ]
    
    Fixes: ecb3f394c5db ("genirq: Expose interrupt information through sysfs")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20221128151612.1786122-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d97e58f72875a5498bfdaea0685d67059b202f95
Author: Jeff Layton <jlayton@kernel.org>
Date:   Fri Oct 28 08:13:53 2022 -0400

    nfsd: don't call nfsd_file_put from client states seqfile display
    
    [ Upstream commit e0aa651068bfd520afcd357af8ecd2de005fc83d ]
    
    We had a report of this:
    
        BUG: sleeping function called from invalid context at fs/nfsd/filecache.c:440
    
    ...with a stack trace showing nfsd_file_put being called from
    nfs4_show_open. This code has always tried to call fput while holding a
    spinlock, but we recently changed this to use the filecache, and that
    started triggering the might_sleep() in nfsd_file_put.
    
    states_start takes and holds the cl_lock while iterating over the
    client's states, and we can't sleep with that held.
    
    Have the various nfs4_show_* functions instead hold the fi_lock instead
    of taking a nfsd_file reference.
    
    Fixes: 78599c42ae3c ("nfsd4: add file to display list of client's opens")
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2138357
    Reported-by: Zhi Li <yieli@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2db53c7059167b63cc790366ef1a9e286e71980b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 28 14:55:12 2022 +0800

    EDAC/i10nm: fix refcount leak in pci_get_dev_wrapper()
    
    [ Upstream commit 9c8921555907f4d723f01ed2d859b66f2d14f08e ]
    
    As the comment of pci_get_domain_bus_and_slot() says, it returns
    a PCI device with refcount incremented, so it doesn't need to
    call an extra pci_dev_get() in pci_get_dev_wrapper(), and the PCI
    device needs to be put in the error path.
    
    Fixes: d4dc89d069aa ("EDAC, i10nm: Add a driver for Intel 10nm server processors")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Link: https://lore.kernel.org/r/20221128065512.3572550-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f870d5863e8e2ec0019a9a237b14dda175f93a31
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c0cacdd354987f8f5348d16908716f154047890
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 17 08:08:23 2022 +0000

    platform/chrome: cros_usbpd_notify: Fix error handling in cros_usbpd_notify_init()
    
    [ Upstream commit 5a2d96623670155d94aca72c320c0ac27bdc6bd2 ]
    
    The following WARNING message was given when rmmod cros_usbpd_notify:
    
     Unexpected driver unregister!
     WARNING: CPU: 0 PID: 253 at drivers/base/driver.c:270 driver_unregister+0x8a/0xb0
     Modules linked in: cros_usbpd_notify(-)
     CPU: 0 PID: 253 Comm: rmmod Not tainted 6.1.0-rc3 #24
     ...
     Call Trace:
      <TASK>
      cros_usbpd_notify_exit+0x11/0x1e [cros_usbpd_notify]
      __x64_sys_delete_module+0x3c7/0x570
      ? __ia32_sys_delete_module+0x570/0x570
      ? lock_is_held_type+0xe3/0x140
      ? syscall_enter_from_user_mode+0x17/0x50
      ? rcu_read_lock_sched_held+0xa0/0xd0
      ? syscall_enter_from_user_mode+0x1c/0x50
      do_syscall_64+0x37/0x90
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
     RIP: 0033:0x7f333fe9b1b7
    
    The reason is that the cros_usbpd_notify_init() does not check the return
    value of platform_driver_register(), and the cros_usbpd_notify can
    install successfully even if platform_driver_register() failed.
    
    Fix by checking the return value of platform_driver_register() and
    unregister cros_usbpd_notify_plat_driver when it failed.
    
    Fixes: ec2daf6e33f9 ("platform: chrome: Add cros-usbpd-notify driver")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Link: https://lore.kernel.org/r/20221117080823.77549-1-yuancan@huawei.com
    Signed-off-by: Prashant Malani <pmalani@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0afcb759f6f61192f79dbd6264cb077b088718c2
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Nov 18 14:31:37 2022 +0800

    perf/x86/intel/uncore: Fix reference count leak in __uncore_imc_init_box()
    
    [ Upstream commit 17b8d847b92d815d1638f0de154654081d66b281 ]
    
    pci_get_device() will increase the reference count for the returned
    pci_dev, so tgl_uncore_get_mc_dev() will return a pci_dev with its
    reference count increased. We need to call pci_dev_put() to decrease the
    reference count before exiting from __uncore_imc_init_box(). Add
    pci_dev_put() for both normal and error path.
    
    Fixes: fdb64822443e ("perf/x86: Add Intel Tiger Lake uncore support")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Link: https://lore.kernel.org/r/20221118063137.121512-5-wangxiongfeng2@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2afced51108813256d8072c6e464b0c9f0bb890
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Nov 18 14:31:36 2022 +0800

    perf/x86/intel/uncore: Fix reference count leak in snr_uncore_mmio_map()
    
    [ Upstream commit 8ebd16c11c346751b3944d708e6c181ed4746c39 ]
    
    pci_get_device() will increase the reference count for the returned
    pci_dev, so snr_uncore_get_mc_dev() will return a pci_dev with its
    reference count increased. We need to call pci_dev_put() to decrease the
    reference count. Let's add the missing pci_dev_put().
    
    Fixes: ee49532b38dd ("perf/x86/intel/uncore: Add IMC uncore support for Snow Ridge")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Link: https://lore.kernel.org/r/20221118063137.121512-4-wangxiongfeng2@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0539d5d474ee6fa4ebc41f927a0f98f81244f25
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Nov 18 14:31:35 2022 +0800

    perf/x86/intel/uncore: Fix reference count leak in hswep_has_limit_sbox()
    
    [ Upstream commit 1ff9dd6e7071a561f803135c1d684b13c7a7d01d ]
    
    pci_get_device() will increase the reference count for the returned
    'dev'. We need to call pci_dev_put() to decrease the reference count.
    Since 'dev' is only used in pci_read_config_dword(), let's add
    pci_dev_put() right after it.
    
    Fixes: 9d480158ee86 ("perf/x86/intel/uncore: Remove uncore extra PCI dev HSWEP_PCI_PCU_3")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Link: https://lore.kernel.org/r/20221118063137.121512-3-wangxiongfeng2@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dac87e295cddc8ab316cff14ab2071b5221d84fa
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 11 09:23:58 2022 +0800

    PNP: fix name memory leak in pnp_alloc_dev()
    
    [ Upstream commit 110d7b0325c55ff3620073ba4201845f59e22ebf ]
    
    After commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically,
    move dev_set_name() after pnp_add_id() to avoid memory leak.
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1049bf0ca5b6466e5ea6e6312ef528dbe880091
Author: Zhao Gongyi <zhaogongyi@huawei.com>
Date:   Tue Nov 22 19:26:26 2022 +0800

    selftests/efivarfs: Add checking of the test return value
    
    [ Upstream commit c93924267fe6f2b44af1849f714ae9cd8117a9cd ]
    
    Add checking of the test return value, otherwise it will report success
    forever for test_create_read().
    
    Fixes: dff6d2ae56d0 ("selftests/efivarfs: clean up test files from test_create*()")
    Signed-off-by: Zhao Gongyi <zhaogongyi@huawei.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 911773f08ce6eae9f6203a7cdb2fd27f977b07ba
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 4 11:39:45 2022 +0800

    MIPS: vpe-cmp: fix possible memory leak while module exiting
    
    [ Upstream commit c5ed1fe0801f0c66b0fbce2785239a5664629057 ]
    
    dev_set_name() allocates memory for name, it need be freed
    when module exiting, call put_device() to give up reference,
    so that it can be freed in kobject_cleanup() when the refcount
    hit to 0. The vpe_device is static, so remove kfree() from
    vpe_device_release().
    
    Fixes: 17a1d523aa58 ("MIPS: APRP: Add VPE loader support for CMP platforms.")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48d42f4464d713fbdd79f334fdcd6e5be534cc67
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 4 11:39:44 2022 +0800

    MIPS: vpe-mt: fix possible memory leak while module exiting
    
    [ Upstream commit 5822e8cc84ee37338ab0bdc3124f6eec04dc232d ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically,
    it need be freed when module exiting, call put_device() to give up
    reference, so that it can be freed in kobject_cleanup() when the
    refcount hit to 0. The vpe_device is static, so remove kfree() from
    vpe_device_release().
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5f2682d3a34dd8350bf63f232d885fd95f25b92
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Tue Nov 1 19:15:33 2022 +0800

    ocfs2: fix memory leak in ocfs2_stack_glue_init()
    
    [ Upstream commit 13b6269dd022aaa69ca8d1df374ab327504121cf ]
    
    ocfs2_table_header should be free in ocfs2_stack_glue_init() if
    ocfs2_sysfs_init() failed, otherwise kmemleak will report memleak.
    
    BUG: memory leak
    unreferenced object 0xffff88810eeb5800 (size 128):
      comm "modprobe", pid 4507, jiffies 4296182506 (age 55.888s)
      hex dump (first 32 bytes):
        c0 40 14 a0 ff ff ff ff 00 00 00 00 01 00 00 00  .@..............
        01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<000000001e59e1cd>] __register_sysctl_table+0xca/0xef0
        [<00000000c04f70f7>] 0xffffffffa0050037
        [<000000001bd12912>] do_one_initcall+0xdb/0x480
        [<0000000064f766c9>] do_init_module+0x1cf/0x680
        [<000000002ba52db0>] load_module+0x6441/0x6f20
        [<000000009772580d>] __do_sys_finit_module+0x12f/0x1c0
        [<00000000380c1f22>] do_syscall_64+0x3f/0x90
        [<000000004cf473bc>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Link: https://lkml.kernel.org/r/41651ca1-432a-db34-eb97-d35744559de1@linux.alibaba.com
    Fixes: 3878f110f71a ("ocfs2: Move the hb_ctl_path sysctl into the stack glue.")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9a9aa02f0fa3318e0ae5774f404419a1b4759ca
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Oct 31 19:38:29 2022 +0800

    lib/fonts: fix undefined behavior in bit shift for get_default_font
    
    [ Upstream commit 6fe888c4d2fb174408e4540bb2d5602b9f507f90 ]
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned.  The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in lib/fonts/fonts.c:139:20
    left shift of 1 by 31 places cannot be represented in type 'int'
     <TASK>
     dump_stack_lvl+0x7d/0xa5
     dump_stack+0x15/0x1b
     ubsan_epilogue+0xe/0x4e
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x20c
     get_default_font+0x1c7/0x1f0
     fbcon_startup+0x347/0x3a0
     do_take_over_console+0xce/0x270
     do_fbcon_takeover+0xa1/0x170
     do_fb_registered+0x2a8/0x340
     fbcon_fb_registered+0x47/0xe0
     register_framebuffer+0x294/0x4a0
     __drm_fb_helper_initial_config_and_unlock+0x43c/0x880 [drm_kms_helper]
     drm_fb_helper_initial_config+0x52/0x80 [drm_kms_helper]
     drm_fbdev_client_hotplug+0x156/0x1b0 [drm_kms_helper]
     drm_fbdev_generic_setup+0xfc/0x290 [drm_kms_helper]
     bochs_pci_probe+0x6ca/0x772 [bochs]
     local_pci_probe+0x4d/0xb0
     pci_device_probe+0x119/0x320
     really_probe+0x181/0x550
     __driver_probe_device+0xc6/0x220
     driver_probe_device+0x32/0x100
     __driver_attach+0x195/0x200
     bus_for_each_dev+0xbb/0x120
     driver_attach+0x27/0x30
     bus_add_driver+0x22e/0x2f0
     driver_register+0xa9/0x190
     __pci_register_driver+0x90/0xa0
     bochs_pci_driver_init+0x52/0x1000 [bochs]
     do_one_initcall+0x76/0x430
     do_init_module+0x61/0x28a
     load_module+0x1f82/0x2e50
     __do_sys_finit_module+0xf8/0x190
     __x64_sys_finit_module+0x23/0x30
     do_syscall_64+0x58/0x80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
     </TASK>
    
    Link: https://lkml.kernel.org/r/20221031113829.4183153-1-cuigaosheng1@huawei.com
    Fixes: c81f717cb9e0 ("fbcon: Fix typo and bogus logic in get_default_font")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f6ea28f295f5f93349391b37ccde6a68edc5eee
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Mon Oct 24 21:08:09 2022 +0300

    proc: fixup uptime selftest
    
    [ Upstream commit 5cc81d5c81af0dee54da9a67a3ebe4be076a13db ]
    
    syscall(3) returns -1 and sets errno on error, unlike "syscall"
    instruction.
    
    Systems which have <= 32/64 CPUs are unaffected. Test won't bounce
    to all CPUs before completing if there are more of them.
    
    Link: https://lkml.kernel.org/r/Y1bUiT7VRXlXPQa1@p183
    Fixes: 1f5bd0547654 ("proc: selftests: test /proc/uptime")
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5bf025c5b7169f6f1d3d9ca9a36c6f0b39e39cb
Author: Barnabás Pőcze <pobrn@protonmail.com>
Date:   Mon Nov 14 19:54:23 2022 +0000

    timerqueue: Use rb_entry_safe() in timerqueue_getnext()
    
    [ Upstream commit 2f117484329b233455ee278f2d9b0a4356835060 ]
    
    When `timerqueue_getnext()` is called on an empty timer queue, it will
    use `rb_entry()` on a NULL pointer, which is invalid. Fix that by using
    `rb_entry_safe()` which handles NULL pointers.
    
    This has not caused any issues so far because the offset of the `rb_node`
    member in `timerqueue_node` is 0, so `rb_entry()` is essentially a no-op.
    
    Fixes: 511885d7061e ("lib/timerqueue: Rely on rbtree semantics for next timer")
    Signed-off-by: Barnabás Pőcze <pobrn@protonmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221114195421.342929-1-pobrn@protonmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f2ae35c001213d35e49590380613978e4584389
Author: Barnabás Pőcze <pobrn@protonmail.com>
Date:   Wed Oct 5 15:00:45 2022 +0000

    platform/x86: huawei-wmi: fix return value calculation
    
    [ Upstream commit 0b9a1dcdb6a2c841899389bf2dd7a3e0e2aa0e99 ]
    
    Previously, `huawei_wmi_input_setup()` returned the result of
    logical or-ing the return values of two functions that return negative
    errno-style error codes and one that returns `acpi_status`. If this
    returned value was non-zero, then it was propagated from the platform
    driver's probe function. That function should return a negative
    errno-style error code, so the result of the logical or that
    `huawei_wmi_input_setup()` returned was not appropriate.
    
    Fix that by checking each function separately and returning the
    error code unmodified.
    
    Fixes: 1ac9abeb2e5b ("platform/x86: huawei-wmi: Move to platform driver")
    Signed-off-by: Barnabás Pőcze <pobrn@protonmail.com>
    Link: https://lore.kernel.org/r/20221005150032.173198-2-pobrn@protonmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1014fbc83e799003b60ae2b745c65147cebb86c
Author: wuchi <wuchi.zero@gmail.com>
Date:   Sat Jun 11 21:06:34 2022 +0800

    lib/debugobjects: fix stat count and optimize debug_objects_mem_init
    
    [ Upstream commit eabb7f1ace53e127309407b2b5e74e8199e85270 ]
    
    1. Var debug_objects_allocated tracks valid kmem_cache_alloc calls, so
       track it in debug_objects_replace_static_objects.  Do similar things in
       object_cpu_offline.
    
    2. In debug_objects_mem_init, there is no need to call function
       cpuhp_setup_state_nocalls when debug_objects_enabled = 0 (out of
       memory).
    
    Link: https://lkml.kernel.org/r/20220611130634.99741-1-wuchi.zero@gmail.com
    Fixes: 634d61f45d6f ("debugobjects: Percpu pool lookahead freeing/allocation")
    Fixes: c4b73aabd098 ("debugobjects: Track number of kmem_cache_alloc/kmem_cache_free done")
    Signed-off-by: wuchi <wuchi.zero@gmail.com>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60a7a0aa9dd81e3374fbdbb5a75ca456d12fb46b
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Fri Nov 11 18:36:53 2022 +0800

    perf: Fix possible memleak in pmu_dev_alloc()
    
    [ Upstream commit e8d7a90c08ce963c592fb49845f2ccc606a2ac21 ]
    
    In pmu_dev_alloc(), when dev_set_name() failed, it will goto free_dev
    and call put_device(pmu->dev) to release it.
    However pmu->dev->release is assigned after this, which makes warning
    and memleak.
    Call dev_set_name() after pmu->dev->release = pmu_dev_release to fix it.
    
      Device '(null)' does not have a release() function...
      WARNING: CPU: 2 PID: 441 at drivers/base/core.c:2332 device_release+0x1b9/0x240
      ...
      Call Trace:
        <TASK>
        kobject_put+0x17f/0x460
        put_device+0x20/0x30
        pmu_dev_alloc+0x152/0x400
        perf_pmu_register+0x96b/0xee0
        ...
      kmemleak: 1 new suspected memory leaks (see /sys/kernel/debug/kmemleak)
      unreferenced object 0xffff888014759000 (size 2048):
        comm "modprobe", pid 441, jiffies 4294931444 (age 38.332s)
        backtrace:
          [<0000000005aed3b4>] kmalloc_trace+0x27/0x110
          [<000000006b38f9b8>] pmu_dev_alloc+0x50/0x400
          [<00000000735f17be>] perf_pmu_register+0x96b/0xee0
          [<00000000e38477f1>] 0xffffffffc0ad8603
          [<000000004e162216>] do_one_initcall+0xd0/0x4e0
          ...
    
    Fixes: abe43400579d ("perf: Sysfs enumeration")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20221111103653.91058-1-chenzhongjin@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 294ed8bfc9375a18499a14bd2bc7c0696a492eaa
Author: Yipeng Zou <zouyipeng@huawei.com>
Date:   Fri Nov 4 10:09:31 2022 +0800

    selftests/ftrace: event_triggers: wait longer for test_event_enable
    
    [ Upstream commit a1d6cd88c8973cfb08ee85722488b1d6d5d16327 ]
    
    In some platform, the schedule event may came slowly, delay 100ms can't
    cover it.
    
    I was notice that on my board which running in low cpu_freq,and this
    selftests allways gose fail.
    
    So maybe we can check more times here to wait longer.
    
    Fixes: 43bb45da82f9 ("selftests: ftrace: Add a selftest to test event enable/disable func trigger")
    Signed-off-by: Yipeng Zou <zouyipeng@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Acked-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ef12a4a8ef5553af9c3fd2719a616637a102568
Author: Chen Hui <judy.chenhui@huawei.com>
Date:   Tue Nov 8 15:23:02 2022 +0800

    cpufreq: qcom-hw: Fix memory leak in qcom_cpufreq_hw_read_lut()
    
    [ Upstream commit 9901c21bcaf2f01fe5078f750d624f4ddfa8f81b ]
    
    If "cpu_dev" fails to get opp table in qcom_cpufreq_hw_read_lut(),
    the program will return, resulting in "table" resource is not released.
    
    Fixes: 51c843cf77bb ("cpufreq: qcom: Update the bandwidth levels on frequency change")
    Signed-off-by: Chen Hui <judy.chenhui@huawei.com>
    Reviewed-by: Sibi Sankar <quic_sibis@quicinc.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa5f2912bb2e17c952d223212f792b000302c26c
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Thu Nov 3 16:12:05 2022 +0100

    fs: don't audit the capability check in simple_xattr_list()
    
    [ Upstream commit e7eda157c4071cd1e69f4b1687b0fbe1ae5e6f46 ]
    
    The check being unconditional may lead to unwanted denials reported by
    LSMs when a process has the capability granted by DAC, but denied by an
    LSM. In the case of SELinux such denials are a problem, since they can't
    be effectively filtered out via the policy and when not silenced, they
    produce noise that may hide a true problem or an attack.
    
    Checking for the capability only if any trusted xattr is actually
    present wouldn't really address the issue, since calling listxattr(2) on
    such node on its own doesn't indicate an explicit attempt to see the
    trusted xattrs. Additionally, it could potentially leak the presence of
    trusted xattrs to an unprivileged user if they can check for the denials
    (e.g. through dmesg).
    
    Therefore, it's best (and simplest) to keep the check unconditional and
    instead use ns_capable_noaudit() that will silence any associated LSM
    denials.
    
    Fixes: 38f38657444d ("xattr: extract simple_xattr code from tmpfs")
    Reported-by: Martin Pitt <mpitt@redhat.com>
    Suggested-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Reviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Reviewed-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e760e0cf28fc9d9ba4eee3e97f2301a64e60526
Author: xiongxin <xiongxin@kylinos.cn>
Date:   Tue Nov 1 10:28:39 2022 +0800

    PM: hibernate: Fix mistake in kerneldoc comment
    
    [ Upstream commit 6e5d7300cbe7c3541bc31f16db3e9266e6027b4b ]
    
    The actual maximum image size formula in hibernate_preallocate_memory()
    is as follows:
    
    max_size = (count - (size + PAGES_FOR_IO)) / 2
                - 2 * DIV_ROUND_UP(reserved_size, PAGE_SIZE);
    
    but the one in the kerneldoc comment of the function is different and
    incorrect.
    
    Fixes: ddeb64870810 ("PM / Hibernate: Add sysfs knob to control size of memory for drivers")
    Signed-off-by: xiongxin <xiongxin@kylinos.cn>
    [ rjw: Subject and changelog rewrite ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef875e1c07dd95b729ca58a2accec093af4d8812
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Sep 18 18:18:48 2021 -0400

    alpha: fix syscall entry in !AUDUT_SYSCALL case
    
    [ Upstream commit f7b2431a6d22f7a91c567708e071dfcd6d66db14 ]
    
    We only want to take the slow path if SYSCALL_TRACE or SYSCALL_AUDIT is
    set; on !AUDIT_SYSCALL configs the current tree hits it whenever _any_
    thread flag (including NEED_RESCHED, NOTIFY_SIGNAL, etc.) happens to
    be set.
    
    Fixes: a9302e843944 "alpha: Enable system-call auditing support"
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1498d2723e74eac6fb06100eeaeca560c57d754e
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Oct 21 17:10:12 2022 +0200

    cpuidle: dt: Return the correct numbers of parsed idle states
    
    [ Upstream commit ee3c2c8ad6ba6785f14a60e4081d7c82e88162a2 ]
    
    While we correctly skips to initialize an idle state from a disabled idle
    state node in DT, the returned value from dt_init_idle_driver() don't get
    adjusted accordingly. Instead the number of found idle state nodes are
    returned, while the callers are expecting the number of successfully
    initialized idle states from DT.
    
    This leads to cpuidle drivers unnecessarily continues to initialize their
    idle state specific data. Moreover, in the case when all idle states have
    been disabled in DT, we would end up registering a cpuidle driver, rather
    than relying on the default arch specific idle call.
    
    Fixes: 9f14da345599 ("drivers: cpuidle: implement DT based idle states infrastructure")
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ff401441711b2b902c3b0a55113e9cd01380195
Author: Qais Yousef <qyousef@layalina.io>
Date:   Thu Aug 4 15:36:01 2022 +0100

    sched/uclamp: Fix relationship between uclamp and migration margin
    
    [ Upstream commit 48d5e9daa8b767e75ed9421665b037a49ce4bc04 ]
    
    fits_capacity() verifies that a util is within 20% margin of the
    capacity of a CPU, which is an attempt to speed up upmigration.
    
    But when uclamp is used, this 20% margin is problematic because for
    example if a task is boosted to 1024, then it will not fit on any CPU
    according to fits_capacity() logic.
    
    Or if a task is boosted to capacity_orig_of(medium_cpu). The task will
    end up on big instead on the desired medium CPU.
    
    Similar corner cases exist for uclamp and usage of capacity_of().
    Slightest irq pressure on biggest CPU for example will make a 1024
    boosted task look like it can't fit.
    
    What we really want is for uclamp comparisons to ignore the migration
    margin and capacity pressure, yet retain them for when checking the
    _actual_ util signal.
    
    For example, task p:
    
            p->util_avg = 300
            p->uclamp[UCLAMP_MIN] = 1024
    
    Will fit a big CPU. But
    
            p->util_avg = 900
            p->uclamp[UCLAMP_MIN] = 1024
    
    will not, this should trigger overutilized state because the big CPU is
    now *actually* being saturated.
    
    Similar reasoning applies to capping tasks with UCLAMP_MAX. For example:
    
            p->util_avg = 1024
            p->uclamp[UCLAMP_MAX] = capacity_orig_of(medium_cpu)
    
    Should fit the task on medium cpus without triggering overutilized
    state.
    
    Inlined comments expand more on desired behavior in more scenarios.
    
    Introduce new util_fits_cpu() function which encapsulates the new logic.
    The new function is not used anywhere yet, but will be used to update
    various users of fits_capacity() in later patches.
    
    Fixes: af24bde8df202 ("sched/uclamp: Add uclamp support to energy_compute()")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-2-qais.yousef@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca9ef12bf7657687ef1c484584ce03e3c743561d
Author: Vincent Donnefort <vincent.donnefort@arm.com>
Date:   Tue Dec 7 09:57:55 2021 +0000

    sched/fair: Cleanup task_util and capacity type
    
    [ Upstream commit ef8df9798d469b7c45c66664550e93469749f1e8 ]
    
    task_util and capacity are comparable unsigned long values. There is no
    need for an intermidiate implicit signed cast.
    
    Signed-off-by: Vincent Donnefort <vincent.donnefort@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20211207095755.859972-1-vincent.donnefort@arm.com
    Stable-dep-of: 48d5e9daa8b7 ("sched/uclamp: Fix relationship between uclamp and migration margin")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6389c163c92bf7446a65114ac0cf957cc486c512
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Fri Nov 11 11:38:53 2022 -0800

    tpm/tpm_crb: Fix error message in __crb_relinquish_locality()
    
    [ Upstream commit f5264068071964b56dc02c9dab3d11574aaca6ff ]
    
    The error message in __crb_relinquish_locality() mentions requestAccess
    instead of Relinquish. Fix it.
    
    Fixes: 888d867df441 ("tpm: cmd_ready command can be issued only after granting locality")
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Acked-by: Tomas Winkler <tomas.winkler@intel.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b217f4e79c066b001c66e3b7aa062c2bc5c8ceb
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 24 03:19:26 2022 +0000

    tpm/tpm_ftpm_tee: Fix error handling in ftpm_mod_init()
    
    [ Upstream commit 2b7d07f7acaac2c7750e420dcf4414588ede6d03 ]
    
    The ftpm_mod_init() returns the driver_register() directly without checking
    its return value, if driver_register() failed, the ftpm_tee_plat_driver is
    not unregistered.
    
    Fix by unregister ftpm_tee_plat_driver when driver_register() failed.
    
    Fixes: 9f1944c23c8c ("tpm_ftpm_tee: register driver on TEE bus")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Maxim Uvarov <maxim.uvarov@linaro.org>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 295f59cd2cdeed841850d02dddde3a122cbf6fc6
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Mon Dec 5 15:31:36 2022 -0800

    pstore: Avoid kcore oops by vmap()ing with VM_IOREMAP
    
    [ Upstream commit e6b842741b4f39007215fd7e545cb55aa3d358a2 ]
    
    An oops can be induced by running 'cat /proc/kcore > /dev/null' on
    devices using pstore with the ram backend because kmap_atomic() assumes
    lowmem pages are accessible with __va().
    
     Unable to handle kernel paging request at virtual address ffffff807ff2b000
     Mem abort info:
     ESR = 0x96000006
     EC = 0x25: DABT (current EL), IL = 32 bits
     SET = 0, FnV = 0
     EA = 0, S1PTW = 0
     FSC = 0x06: level 2 translation fault
     Data abort info:
     ISV = 0, ISS = 0x00000006
     CM = 0, WnR = 0
     swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000081d87000
     [ffffff807ff2b000] pgd=180000017fe18003, p4d=180000017fe18003, pud=180000017fe18003, pmd=0000000000000000
     Internal error: Oops: 96000006 [#1] PREEMPT SMP
     Modules linked in: dm_integrity
     CPU: 7 PID: 21179 Comm: perf Not tainted 5.15.67-10882-ge4eb2eb988cd #1 baa443fb8e8477896a370b31a821eb2009f9bfba
     Hardware name: Google Lazor (rev3 - 8) (DT)
     pstate: a0400009 (NzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
     pc : __memcpy+0x110/0x260
     lr : vread+0x194/0x294
     sp : ffffffc013ee39d0
     x29: ffffffc013ee39f0 x28: 0000000000001000 x27: ffffff807ff2b000
     x26: 0000000000001000 x25: ffffffc0085a2000 x24: ffffff802d4b3000
     x23: ffffff80f8a60000 x22: ffffff802d4b3000 x21: ffffffc0085a2000
     x20: ffffff8080b7bc68 x19: 0000000000001000 x18: 0000000000000000
     x17: 0000000000000000 x16: 0000000000000000 x15: ffffffd3073f2e60
     x14: ffffffffad588000 x13: 0000000000000000 x12: 0000000000000001
     x11: 00000000000001a2 x10: 00680000fff2bf0b x9 : 03fffffff807ff2b
     x8 : 0000000000000001 x7 : 0000000000000000 x6 : 0000000000000000
     x5 : ffffff802d4b4000 x4 : ffffff807ff2c000 x3 : ffffffc013ee3a78
     x2 : 0000000000001000 x1 : ffffff807ff2b000 x0 : ffffff802d4b3000
     Call trace:
     __memcpy+0x110/0x260
     read_kcore+0x584/0x778
     proc_reg_read+0xb4/0xe4
    
    During early boot, memblock reserves the pages for the ramoops reserved
    memory node in DT that would otherwise be part of the direct lowmem
    mapping. Pstore's ram backend reuses those reserved pages to change the
    memory type (writeback or non-cached) by passing the pages to vmap()
    (see pfn_to_page() usage in persistent_ram_vmap() for more details) with
    specific flags. When read_kcore() starts iterating over the vmalloc
    region, it runs over the virtual address that vmap() returned for
    ramoops. In aligned_vread() the virtual address is passed to
    vmalloc_to_page() which returns the page struct for the reserved lowmem
    area. That lowmem page is passed to kmap_atomic(), which effectively
    calls page_to_virt() that assumes a lowmem page struct must be directly
    accessible with __va() and friends. These pages are mapped via vmap()
    though, and the lowmem mapping was never made, so accessing them via the
    lowmem virtual address oopses like above.
    
    Let's side-step this problem by passing VM_IOREMAP to vmap(). This will
    tell vread() to not include the ramoops region in the kcore. Instead the
    area will look like a bunch of zeros. The alternative is to teach kmap()
    about vmalloc areas that intersect with lowmem. Presumably such a change
    isn't a one-liner, and there isn't much interest in inspecting the
    ramoops region in kcore files anyway, so the most expedient route is
    taken for now.
    
    Cc: Brian Geffon <bgeffon@google.com>
    Cc: Mike Rapoport <rppt@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: 404a6043385d ("staging: android: persistent_ram: handle reserving and mapping memory")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20221205233136.3420802-1-swboyd@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 480bc6a165d6fe23d3521bf273fe47bd561970b3
Author: Doug Brown <doug@schmorgal.com>
Date:   Sat Dec 3 16:51:17 2022 -0800

    ARM: mmp: fix timer_read delay
    
    [ Upstream commit e348b4014c31041e13ff370669ba3348c4d385e3 ]
    
    timer_read() was using an empty 100-iteration loop to wait for the
    TMR_CVWR register to capture the latest timer counter value. The delay
    wasn't long enough. This resulted in CPU idle time being extremely
    underreported on PXA168 with CONFIG_NO_HZ_IDLE=y.
    
    Switch to the approach used in the vendor kernel, which implements the
    capture delay by reading TMR_CVWR a few times instead.
    
    Fixes: 49cbe78637eb ("[ARM] pxa: add base support for Marvell's PXA168 processor line")
    Signed-off-by: Doug Brown <doug@schmorgal.com>
    Link: https://lore.kernel.org/r/20221204005117.53452-3-doug@schmorgal.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1b3164d0e11a2849c22822cfc606eda34e24c36
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Fri Dec 2 16:22:54 2022 +0800

    pstore/ram: Fix error return code in ramoops_probe()
    
    [ Upstream commit e1fce564900f8734edf15b87f028c57e14f6e28d ]
    
    In the if (dev_of_node(dev) && !pdata) path, the "err" may be assigned a
    value of 0, so the error return code -EINVAL may be incorrectly set
    to 0. To fix set valid return code before calling to goto.
    
    Fixes: 35da60941e44 ("pstore/ram: add Device Tree bindings")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/1669969374-46582-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dad729f7c24b8cbe72012f7d4ff332047a7073d
Author: Pali Rohár <pali@kernel.org>
Date:   Sat Sep 24 13:58:26 2022 +0200

    arm64: dts: armada-3720-turris-mox: Add missing interrupt for RTC
    
    [ Upstream commit 21aad8ba615e9c39cee6c5d0b76726f63791926c ]
    
    MCP7940MT-I/MNY RTC has connected interrupt line to GPIO2_5.
    
    Fixes: 7109d817db2e ("arm64: dts: marvell: add DTS for Turris Mox")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 872865db3b952a44f63381a557a5871e5fb33491
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 25 14:21:02 2022 +0200

    ARM: dts: turris-omnia: Add switch port 6 node
    
    [ Upstream commit f87db2005f73876602211af0ee156817019b6bda ]
    
    Switch port 6 is connected to eth0, so add appropriate device tree node for it.
    
    Fixes: 26ca8b52d6e1 ("ARM: dts: add support for Turris Omnia")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1322d5f6969f37ed3efea303bd218f0ffeade85
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Jul 27 15:09:26 2022 +0200

    ARM: dts: turris-omnia: Add ethernet aliases
    
    [ Upstream commit f1f3e530c59a7e8c5f06172f4c28b945a6b4bfb8 ]
    
    This allows bootloader to correctly pass MAC addresses used by bootloader
    to individual interfaces into kernel device tree.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: 26ca8b52d6e1 ("ARM: dts: add support for Turris Omnia")
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d050513e6f5985686655c853fa090532f2eba6cc
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:53 2022 +0200

    ARM: dts: armada-39x: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit 69236d2391b4d7324b11c3252921571577892e7b ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 538da83ddbea ("ARM: mvebu: add Device Tree files for Armada 39x SoC and board")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bac1a77b85e04c15e345f6f78894c728e9418315
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:52 2022 +0200

    ARM: dts: armada-38x: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit 44f47b7a8fa4678ce4c38ea74837e4996b9df6d6 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 0d3d96ab0059 ("ARM: mvebu: add Device Tree description of the Armada 380/385 SoCs")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea907f30320532ddaa84206c52ccba345b43e8d5
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:51 2022 +0200

    ARM: dts: armada-375: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit 823956d2436f70ced74c0fe8ab99facd8abfc060 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 4de59085091f ("ARM: mvebu: add Device Tree description of the Armada 375 SoC")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea8e313bb9ba843343eb4a21e538fec4fe5e568e
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:50 2022 +0200

    ARM: dts: armada-xp: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit eab276787f456cbea89fabea110fe0728673d308 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 9d8f44f02d4a ("arm: mvebu: add PCIe Device Tree informations for Armada XP")
    Fixes: 12b69a599745 ("ARM: mvebu: second PCIe unit of Armada XP mv78230 is only x1 capable")
    Fixes: 2163e61c92d9 ("ARM: mvebu: fix second and third PCIe unit of Armada XP mv78260")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 697b92a648f2c0e11fe881941198b7ea2f1e6c52
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:49 2022 +0200

    ARM: dts: armada-370: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit d9208b0fa2e803d16b28d91bf1d46b7ee9ea13c6 ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: a09a0b7c6ff1 ("arm: mvebu: add PCIe Device Tree informations for Armada 370")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73ab831afdc813209b47c658968abd78826591ab
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Aug 18 00:30:48 2022 +0200

    ARM: dts: dove: Fix assigned-addresses for every PCIe Root Port
    
    [ Upstream commit dcc7d8c72b64a479b8017e4332d99179deb8802d ]
    
    BDF of resource in DT assigned-addresses property of Marvell PCIe Root Port
    (PCI-to-PCI bridge) should match BDF in address part in that DT node name
    as specified resource belongs to Marvell PCIe Root Port itself.
    
    Fixes: 74ecaa403a74 ("ARM: dove: add PCIe controllers to SoC DT")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2cb1683d12192bc61e4b913548efa1690d50d54
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 13 17:22:12 2022 +0200

    arm64: dts: mediatek: mt6797: Fix 26M oscillator unit name
    
    [ Upstream commit 5f535cc583759c9c60d4cc9b8d221762e2d75387 ]
    
    Update its unit name to oscillator-26m and remove the unneeded unit
    address to fix a unit_address_vs_reg warning.
    
    Fixes: 464c510f60c6 ("arm64: dts: mediatek: add mt6797 support")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221013152212.416661-9-angelogioacchino.delregno@collabora.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1261352836118f9f05573cfa1f36c9ca69759031
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 13 17:22:11 2022 +0200

    arm64: dts: mediatek: pumpkin-common: Fix devicetree warnings
    
    [ Upstream commit 509438336ce75c8b4e6ce8e8d507dc77d0783bdd ]
    
    Fix the pinctrl submodes and optee node to remove unneeded unit address,
    fixing all unit_address_vs_reg warnings.
    
    Fixes: 9983822c8cf9 ("arm64: dts: mediatek: add pumpkin board dts")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221013152212.416661-8-angelogioacchino.delregno@collabora.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 853d57e9612e1c9cb6a37e28bac39c65a6ef42a1
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 13 17:22:10 2022 +0200

    arm64: dts: mt2712-evb: Fix usb vbus regulators unit names
    
    [ Upstream commit ec1ae39a8d25cfb067b5459fac7c5b7b9bce6f6a ]
    
    Update the names to regulator-usb-p{0-3}-vbus to fix unit_address_vs_reg
    warnings for those.
    
    Fixes: 1724f4cc5133 ("arm64: dts: Add USB3 related nodes for MT2712")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221013152212.416661-7-angelogioacchino.delregno@collabora.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 436ac713a4a3309fdcda2046360fb4cf70dc4402
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 13 17:22:09 2022 +0200

    arm64: dts: mt2712-evb: Fix vproc fixed regulators unit names
    
    [ Upstream commit 377063156893bf6c088309ac799fe5c6dce2822d ]
    
    Update the names to regulator-vproc-buck{0,1} to fix unit_addres_vs_reg
    warnings for those.
    
    Fixes: f75dd8bdd344 ("arm64: dts: mediatek: add mt2712 cpufreq related device nodes")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221013152212.416661-6-angelogioacchino.delregno@collabora.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 148e77355797421dc2640dd088d8e18bf507da8d
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 13 17:22:08 2022 +0200

    arm64: dts: mt2712e: Fix unit address for pinctrl node
    
    [ Upstream commit 1d4516f53a611b362db7ba7a8889923d469f57e1 ]
    
    The unit address for the pinctrl node is (0x)1000b000 and not
    (0x)10005000, which is the syscfg_pctl_a address instead.
    
    This fixes the following warning:
    arch/arm64/boot/dts/mediatek/mt2712e.dtsi:264.40-267.4: Warning
    (unique_unit_address): /syscfg_pctl_a@10005000: duplicate
    unit-address (also used in node /pinctrl@10005000)
    
    Fixes: f0c64340b748 ("arm64: dts: mt2712: add pintcrl device node.")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221013152212.416661-5-angelogioacchino.delregno@collabora.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a938c2a77492da4b81c8901d09f46da5bab0e96f
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 13 17:22:07 2022 +0200

    arm64: dts: mt2712e: Fix unit_address_vs_reg warning for oscillators
    
    [ Upstream commit e4495a0a8b3d84816c9a46edf3ce060bbf267475 ]
    
    Rename the fixed-clock oscillators to remove the unit address.
    
    This solves unit_address_vs_reg warnings.
    
    Fixes: 5d4839709c8e ("arm64: dts: mt2712: Add clock controller device nodes")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221013152212.416661-4-angelogioacchino.delregno@collabora.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a455b0c509c938af2c5d63e28b6ca440803d1fe6
Author: Jayesh Choudhary <j-choudhary@ti.com>
Date:   Mon Oct 31 20:55:19 2022 +0530

    arm64: dts: ti: k3-j721e-main: Drop dma-coherent in crypto node
    
    [ Upstream commit 26c5012403f3f1fd3bf8f7d3389ee539ae5cc162 ]
    
    crypto driver itself is not dma-coherent. So drop it.
    
    Fixes: 8ebcaaae8017 ("arm64: dts: ti: k3-j721e-main: Add crypto accelerator node")
    Signed-off-by: Jayesh Choudhary <j-choudhary@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Manorit Chawdhry <m-chawdhry@ti.com>
    Link: https://lore.kernel.org/r/20221031152520.355653-3-j-choudhary@ti.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42d97a024ef6384b99c79871afa33a52fe637284
Author: Jayesh Choudhary <j-choudhary@ti.com>
Date:   Mon Oct 31 20:55:18 2022 +0530

    arm64: dts: ti: k3-am65-main: Drop dma-coherent in crypto node
    
    [ Upstream commit b86833ab3653dbb0dc453eec4eef8615e63de4e2 ]
    
    crypto driver itself is not dma-coherent. So drop it.
    
    Fixes: b366b2409c97 ("arm64: dts: ti: k3-am6: Add crypto accelarator node")
    Signed-off-by: Jayesh Choudhary <j-choudhary@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Manorit Chawdhry <m-chawdhry@ti.com>
    Link: https://lore.kernel.org/r/20221031152520.355653-2-j-choudhary@ti.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 359286f886feef38536eaa7e673dc3440f03b0a1
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Tue Nov 15 19:55:40 2022 +0800

    perf/smmuv3: Fix hotplug callback leak in arm_smmu_pmu_init()
    
    [ Upstream commit 6f2d566b46436a50a80d6445e82879686b89588c ]
    
    arm_smmu_pmu_init() won't remove the callback added by
    cpuhp_setup_state_multi() when platform_driver_register() failed. Remove
    the callback by cpuhp_remove_multi_state() in fail path.
    
    Similar to the handling of arm_ccn_init() in commit 26242b330093 ("bus:
    arm-ccn: Prevent hotplug callback leak")
    
    Fixes: 7d839b4b9e00 ("perf/smmuv3: Add arm64 smmuv3 pmu driver")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Reviewed-by: Punit Agrawal <punit.agrawal@bytedance.com>
    Link: https://lore.kernel.org/r/20221115115540.6245-3-shangxiaojing@huawei.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9afac95b87fa1816ac3362168a7d77a280380594
Author: Yuan Can <yuancan@huawei.com>
Date:   Tue Nov 15 07:02:06 2022 +0000

    perf: arm_dsu: Fix hotplug callback leak in dsu_pmu_init()
    
    [ Upstream commit facafab7611f7b872c6b9eeaff53461ef11f482e ]
    
    dsu_pmu_init() won't remove the callback added by cpuhp_setup_state_multi()
    when platform_driver_register() failed. Remove the callback by
    cpuhp_remove_multi_state() in fail path.
    
    Similar to the handling of arm_ccn_init() in commit 26242b330093 ("bus:
    arm-ccn: Prevent hotplug callback leak")
    
    Fixes: 7520fa99246d ("perf: ARM DynamIQ Shared Unit PMU support")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Acked-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20221115070207.32634-2-yuancan@huawei.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e88aec62e7f5497676fb560074b1067c28c5698
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 8 16:03:22 2022 +0800

    soc: ti: smartreflex: Fix PM disable depth imbalance in omap_sr_probe
    
    [ Upstream commit 69460e68eb662064ab4188d4e129ff31c1f23ed9 ]
    
    The pm_runtime_enable will increase power disable depth. Thus
    a pairing decrement is needed on the error handling path to
    keep it balanced according to context.
    
    Fixes: 984aa6dbf4ca ("OMAP3: PM: Adding smartreflex driver support.")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20221108080322.52268-3-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a9a31c578879420fe187cd6797a275f7de5bd08
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 8 16:03:21 2022 +0800

    soc: ti: knav_qmss_queue: Fix PM disable depth imbalance in knav_queue_probe
    
    [ Upstream commit e961c0f19450fd4a26bd043dd2979990bf12caf6 ]
    
    The pm_runtime_enable will increase power disable depth. Thus
    a pairing decrement is needed on the error handling path to
    keep it balanced according to context.
    
    Fixes: 41f93af900a2 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20221108080322.52268-2-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e325b4ee414b0d84815873e3015bb486d8ffc573
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 06:29:55 2022 +0000

    soc: ti: knav_qmss_queue: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    [ Upstream commit 12eeb74925da70eb39d90abead9de9793be3d4c8 ]
    
    Using pm_runtime_resume_and_get is more appropriate for simplifying
    code.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20220418062955.2557949-1-chi.minghao@zte.com.cn
    Stable-dep-of: e961c0f19450 ("soc: ti: knav_qmss_queue: Fix PM disable depth imbalance in knav_queue_probe")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0542d56e6333795a5592b2c0dbbec95728e67352
Author: Kory Maincent <kory.maincent@bootlin.com>
Date:   Wed Nov 2 18:10:06 2022 +0100

    arm: dts: spear600: Fix clcd interrupt
    
    [ Upstream commit 0336e2ce34e7a89832b6c214f924eb7bc58940be ]
    
    Interrupt 12 of the Interrupt controller belongs to the SMI controller,
    the right one for the display controller is the interrupt 13.
    
    Fixes: 8113ba917dfa ("ARM: SPEAr: DT: Update device nodes")
    Signed-off-by: Kory Maincent <kory.maincent@bootlin.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8d4fb0bf10b38e973d6910909594b6a5bf99bf5
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Mon Nov 7 09:44:03 2022 +0800

    soc: qcom: apr: Add check for idr_alloc and of_property_read_string_index
    
    [ Upstream commit 6d7860f5750d73da2fa1a1f6c9405058a593fa32 ]
    
    As idr_alloc() and of_property_read_string_index() can return negative
    numbers, it should be better to check the return value and deal with
    the exception.
    Therefore, it should be better to use goto statement to stop and return
    error.
    
    Fixes: 6adba21eb434 ("soc: qcom: Add APR bus driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Reviewed-by: Bjorn Andersson <andersson@kernel.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221107014403.3606-1-jiasheng@iscas.ac.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6213df4f5fc2e1bb1e7c832179b4258b8543fcc7
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Mon Sep 27 14:55:40 2021 +0100

    soc: qcom: apr: make code more reuseable
    
    [ Upstream commit 99139b80c1b3d73026ed8be2de42c52e2976ab64 ]
    
    APR and other packet routers like GPR are pretty much same and
    interact with other drivers in similar way.
    
    Ex: GPR ports can be considered as APR services, only difference
    is they are allocated dynamically.
    
    Other difference is packet layout, which should not matter
    with the apis abstracted. Apart from this the rest of the
    functionality is pretty much identical across APR and GPR.
    
    Make the apr code more reusable by abstracting it service level,
    rather than device level so that we do not need to write
    new drivers for other new packet routers like GPR.
    
    This patch is in preparation to add GPR support to this driver.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20210927135559.738-4-srinivas.kandagatla@linaro.org
    Stable-dep-of: 6d7860f5750d ("soc: qcom: apr: Add check for idr_alloc and of_property_read_string_index")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45d180a9f64b9aead769cfc5c2d70e85c7a64f47
Author: Luca Weiss <luca.weiss@fairphone.com>
Date:   Fri Nov 4 16:30:41 2022 +0100

    soc: qcom: llcc: make irq truly optional
    
    [ Upstream commit c882c899ead3545102a4d71b5fbe73b9e4bc2657 ]
    
    The function platform_get_irq prints an error message into the kernel
    log when the irq isn't found.
    
    Since the interrupt is actually optional and not provided by some SoCs,
    use platform_get_irq_optional which does not print an error message.
    
    Fixes: c081f3060fab ("soc: qcom: Add support to register LLCC EDAC driver")
    Signed-off-by: Luca Weiss <luca.weiss@fairphone.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221104153041.412020-1-luca.weiss@fairphone.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fb204a4b5ac84dc98753b06df44aa2a05a4f3aa
Author: Chen Jiahao <chenjiahao16@huawei.com>
Date:   Wed Oct 19 23:32:12 2022 +0800

    drivers: soc: ti: knav_qmss_queue: Mark knav_acc_firmwares as static
    
    [ Upstream commit adf85adc2a7199b41e7a4da083bd17274a3d6969 ]
    
    There is a sparse warning shown below:
    
    drivers/soc/ti/knav_qmss_queue.c:70:12: warning: symbol
    'knav_acc_firmwares' was not declared. Should it be static?
    
    Since 'knav_acc_firmwares' is only called within knav_qmss_queue.c,
    mark it as static to fix the warning.
    
    Fixes: 96ee19becc3b ("soc: ti: add firmware file name as part of the driver")
    Signed-off-by: Chen Jiahao <chenjiahao16@huawei.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20221019153212.72350-1-chenjiahao16@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a2faf6fcefd7e6e91e429911c568e4e2ab52916
Author: Marek Vasut <marex@denx.de>
Date:   Fri Oct 21 12:00:57 2022 +0200

    ARM: dts: stm32: Fix AV96 WLAN regulator gpio property
    
    [ Upstream commit d5d577e3d50713ad11d98dbdaa48bb494346c26d ]
    
    The WLAN regulator uses 'gpios' property instead of 'gpio' to specify
    regulator enable GPIO. While the former is also currently handled by
    the Linux kernel regulator-fixed driver, the later is the correct one
    per DT bindings. Update the DT to use the later.
    
    Fixes: 7dd5cbba42c93 ("ARM: dts: stm32: Enable WiFi on AV96")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d1b6dc38fe01dcce6cf60ea31dcac5170718f64
Author: Marek Vasut <marex@denx.de>
Date:   Fri Sep 23 04:37:45 2022 +0200

    ARM: dts: stm32: Drop stm32mp15xc.dtsi from Avenger96
    
    [ Upstream commit 3b835f1b8acef53c8882b25f40f48d7f5982c938 ]
    
    The Avenger96 is populated with STM32MP157A DHCOR SoM, drop the
    stm32mp15xc.dtsi which should only be included in DTs of devices
    which are populated with STM32MP15xC/F SoC as the stm32mp15xc.dtsi
    enables CRYP block not present in the STM32MP15xA/D SoC .
    
    Fixes: 7e76f82acd9e1 ("ARM: dts: stm32: Split Avenger96 into DHCOR SoM and Avenger96 board")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Patrice Chotard <patrice.chotard@foss.st.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 933499bed78dc9daa9be8ede7c7c9be1951a2d87
Author: Marco Elver <elver@google.com>
Date:   Mon Sep 12 11:45:41 2022 +0200

    objtool, kcsan: Add volatile read/write instrumentation to whitelist
    
    [ Upstream commit 63646fcba5bb4b59a19031c21913f94e46a3d0d4 ]
    
    Adds KCSAN's volatile instrumentation to objtool's uaccess whitelist.
    
    Recent kernel change have shown that this was missing from the uaccess
    whitelist (since the first upstreamed version of KCSAN):
    
      mm/gup.o: warning: objtool: fault_in_readable+0x101: call to __tsan_volatile_write1() with UACCESS enabled
    
    Fixes: 75d75b7a4d54 ("kcsan: Support distinguishing volatile accesses")
    Signed-off-by: Marco Elver <elver@google.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 275a67e909f784e52a0d064eb841d77a79bd3632
Author: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
Date:   Mon Jul 18 16:03:40 2022 +0200

    arm64: dts: qcom: msm8916: Drop MSS fallback compatible
    
    [ Upstream commit ff02ac621634e82c0c34d02a79d402ae700cdfd0 ]
    
    MSM8916 was originally using the "qcom,q6v5-pil" compatible for the
    MSS remoteproc. Later it was decided to use SoC-specific compatibles
    instead, so "qcom,msm8916-mss-pil" is now the preferred compatible.
    
    Commit 60a05ed059a0 ("arm64: dts: qcom: msm8916: Add MSM8916-specific
    compatibles to SCM/MSS") updated the MSM8916 device tree to make use of
    the new compatible but still kept the old "qcom,q6v5-pil" as fallback.
    
    This is inconsistent with other SoCs and conflicts with the description
    in the binding documentation (which says that only one compatible should
    be present). Also, it has no functional advantage since older kernels
    could not handle this DT anyway (e.g. "power-domains" in the MSS node is
    only supported by kernels that also support "qcom,msm8916-mss-pil").
    
    Make this consistent with other SoCs by using only the
    "qcom,msm8916-mss-pil" compatible.
    
    Fixes: 60a05ed059a0 ("arm64: dts: qcom: msm8916: Add MSM8916-specific compatibles to SCM/MSS")
    Signed-off-by: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220718140344.1831731-2-stephan.gerhold@kernkonzept.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82baee2263b73d51811d36e3ae45bf2f1122f9f8
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Mon Oct 10 07:44:14 2022 -0400

    arm64: dts: qcom: sdm845-cheza: fix AP suspend pin bias
    
    [ Upstream commit 9bce41fab14da8f21027dc9847535ef5e22cbe8b ]
    
    There is no "bias-no-pull" property.  Assume intentions were disabling
    bias.
    
    Fixes: 79e7739f7b87 ("arm64: dts: qcom: sdm845-cheza: add initial cheza dt")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221010114417.29859-3-krzysztof.kozlowski@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82569f7e4044cffabbb4d90ca974d903a0ffb8ca
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Mon Oct 10 07:44:12 2022 -0400

    arm64: dts: qcom: sdm630: fix UART1 pin bias
    
    [ Upstream commit 780f836fe071a9e8703fe6a05ae00129acf83391 ]
    
    There is no "bias-no-pull" property.  Assume intentions were disabling
    bias.
    
    Fixes: b190fb010664 ("arm64: dts: qcom: sdm630: Add sdm630 dts file")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221010114417.29859-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4cef81dec2f1ef42153e5d1eb4f1ac048e185fc8
Author: Luca Weiss <luca@z3ntu.xyz>
Date:   Thu Oct 13 21:06:57 2022 +0200

    ARM: dts: qcom: apq8064: fix coresight compatible
    
    [ Upstream commit a42b1ee868361f1cb0492f1bdaefb43e0751e468 ]
    
    There's a typo missing the arm, prefix of arm,coresight-etb10. Fix it to
    make devicetree validation happier.
    
    Signed-off-by: Luca Weiss <luca@z3ntu.xyz>
    Fixes: 7a5c275fd821 ("ARM: dts: qcom: Add apq8064 CoreSight components")
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221013190657.48499-3-luca@z3ntu.xyz
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5465b9a813fb700f125d03fc27459c19a71d8c40
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Sun Jul 24 17:04:20 2022 +0300

    arm64: dts: qcom: msm8996: fix GPU OPP table
    
    [ Upstream commit 0d440d811e6e2f37093e54db55bc27fe66678170 ]
    
    Fix Adreno OPP table according to the msm-3.18. Enable 624 MHz for the
    speed bin 3 and 560 MHz for bins 2 and 3.
    
    Fixes: 69cc3114ab0f ("arm64: dts: Add Adreno GPU definitions")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220724140421.1933004-7-dmitry.baryshkov@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cad948c9f4a480444b3d5afa99ef0f48da0349a
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Thu Oct 6 14:46:26 2022 +0200

    arm64: dts: qcom: ipq6018-cp01-c1: use BLSPI1 pins
    
    [ Upstream commit 4871d3c38893c8a585e3e96364b7fb91cda8322e ]
    
    When BLSPI1 (originally SPI0, later renamed in commit f82c48d46852
    ("arm64: dts: qcom: ipq6018: correct QUP peripheral labels")) was added,
    the device node lacked respective pin configuration assignment.
    
    Fixes: 5bf635621245 ("arm64: dts: ipq6018: Add a few device nodes")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Bjorn Andersson <andersson@kernel.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221006124659.217540-2-krzysztof.kozlowski@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60184b1437db4152096cebde5f364411cfaf8501
Author: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
Date:   Fri Nov 25 20:21:15 2022 +0200

    usb: musb: remove extra check in musb_gadget_vbus_draw
    
    [ Upstream commit ecec4b20d29c3d6922dafe7d2555254a454272d2 ]
    
    The checks for musb->xceiv and musb->xceiv->set_power duplicate those in
    usb_phy_set_power(), so there is no need of them. Moreover, not calling
    usb_phy_set_power() results in usb_phy_set_charger_current() not being
    called, so current USB config max current is not propagated through USB
    charger framework and charger drivers may try to draw more current than
    allowed or possible.
    
    Fix that by removing those extra checks and calling usb_phy_set_power()
    directly.
    
    Tested on Motorola Droid4 and Nokia N900
    
    Fixes: a9081a008f84 ("usb: phy: Add USB charger support")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Link: https://lore.kernel.org/r/1669400475-4762-1-git-send-email-ivo.g.dimitrov.75@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

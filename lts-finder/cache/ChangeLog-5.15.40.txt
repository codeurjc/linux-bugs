commit ae766496dbd448eea2af4b3be8e2b2172ce38a79
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun May 15 20:18:54 2022 +0200

    Linux 5.15.40
    
    Link: https://lore.kernel.org/r/20220513142229.874949670@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f00232112217f68e7fd8d456e91f7ac19e7f955
Author: Peter Xu <peterx@redhat.com>
Date:   Tue Mar 22 14:39:37 2022 -0700

    mm: fix invalid page pointer returned with FOLL_PIN gups
    
    commit 7196040e19ad634293acd3eff7083149d7669031 upstream.
    
    Patch series "mm/gup: some cleanups", v5.
    
    This patch (of 5):
    
    Alex reported invalid page pointer returned with pin_user_pages_remote()
    from vfio after upstream commit 4b6c33b32296 ("vfio/type1: Prepare for
    batched pinning with struct vfio_batch").
    
    It turns out that it's not the fault of the vfio commit; however after
    vfio switches to a full page buffer to store the page pointers it starts
    to expose the problem easier.
    
    The problem is for VM_PFNMAP vmas we should normally fail with an
    -EFAULT then vfio will carry on to handle the MMIO regions.  However
    when the bug triggered, follow_page_mask() returned -EEXIST for such a
    page, which will jump over the current page, leaving that entry in
    **pages untouched.  However the caller is not aware of it, hence the
    caller will reference the page as usual even if the pointer data can be
    anything.
    
    We had that -EEXIST logic since commit 1027e4436b6a ("mm: make GUP
    handle pfn mapping unless FOLL_GET is requested") which seems very
    reasonable.  It could be that when we reworked GUP with FOLL_PIN we
    could have overlooked that special path in commit 3faa52c03f44 ("mm/gup:
    track FOLL_PIN pages"), even if that commit rightfully touched up
    follow_devmap_pud() on checking FOLL_PIN when it needs to return an
    -EEXIST.
    
    Attaching the Fixes to the FOLL_PIN rework commit, as it happened later
    than 1027e4436b6a.
    
    [jhubbard@nvidia.com: added some tags, removed a reference to an out of tree module.]
    
    Link: https://lkml.kernel.org/r/20220207062213.235127-1-jhubbard@nvidia.com
    Link: https://lkml.kernel.org/r/20220204020010.68930-1-jhubbard@nvidia.com
    Link: https://lkml.kernel.org/r/20220204020010.68930-2-jhubbard@nvidia.com
    Fixes: 3faa52c03f44 ("mm/gup: track FOLL_PIN pages")
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reported-by: Alex Williamson <alex.williamson@redhat.com>
    Debugged-by: Alex Williamson <alex.williamson@redhat.com>
    Tested-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 954c78ed8c841b15a9476ec03146d0031dac42e5
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Mar 22 14:44:56 2022 -0700

    mm/mlock: fix potential imbalanced rlimit ucounts adjustment
    
    commit 5c2a956c3eea173b2bc89f632507c0eeaebf6c4a upstream.
    
    user_shm_lock forgets to set allowed to 0 when get_ucounts fails.  So
    the later user_shm_unlock might do the extra dec_rlimit_ucounts.  Fix
    this by resetting allowed to 0.
    
    Link: https://lkml.kernel.org/r/20220310132417.41189-1-linmiaohe@huawei.com
    Fixes: d7c9e99aee48 ("Reimplement RLIMIT_MEMLOCK on top of ucounts")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: Herbert van den Bergh <herbert.van.den.bergh@oracle.com>
    Cc: Chris Mason <chris.mason@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acf3e6843a85c49330d53eacb41c8812ca5f898f
Author: Naoya Horiguchi <naoya.horiguchi@nec.com>
Date:   Tue Mar 22 14:44:06 2022 -0700

    mm/hwpoison: fix error page recovered but reported "not recovered"
    
    commit 046545a661af2beec21de7b90ca0e35f05088a81 upstream.
    
    When an uncorrected memory error is consumed there is a race between the
    CMCI from the memory controller reporting an uncorrected error with a
    UCNA signature, and the core reporting and SRAR signature machine check
    when the data is about to be consumed.
    
    If the CMCI wins that race, the page is marked poisoned when
    uc_decode_notifier() calls memory_failure() and the machine check
    processing code finds the page already poisoned.  It calls
    kill_accessing_process() to make sure a SIGBUS is sent.  But returns the
    wrong error code.
    
    Console log looks like this:
    
      mce: Uncorrected hardware memory error in user-access at 3710b3400
      Memory failure: 0x3710b3: recovery action for dirty LRU page: Recovered
      Memory failure: 0x3710b3: already hardware poisoned
      Memory failure: 0x3710b3: Sending SIGBUS to einj_mem_uc:361438 due to hardware memory corruption
      mce: Memory error not recovered
    
    kill_accessing_process() is supposed to return -EHWPOISON to notify that
    SIGBUS is already set to the process and kill_me_maybe() doesn't have to
    send it again.  But current code simply fails to do this, so fix it to
    make sure to work as intended.  This change avoids the noise message
    "Memory error not recovered" and skips duplicate SIGBUSs.
    
    [tony.luck@intel.com: reword some parts of commit message]
    
    Link: https://lkml.kernel.org/r/20220113231117.1021405-1-naoya.horiguchi@linux.dev
    Fixes: a3f5d80ea401 ("mm,hwpoison: send SIGBUS with error virutal address")
    Signed-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Reported-by: Youquan Song <youquan.song@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13d75c31a8add30d8de4beadd6ef1ee2dfdedcd8
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Tue Mar 22 14:42:08 2022 -0700

    mm: userfaultfd: fix missing cache flush in mcopy_atomic_pte() and __mcopy_atomic()
    
    commit 7c25a0b89a487878b0691e6524fb5a8827322194 upstream.
    
    userfaultfd calls mcopy_atomic_pte() and __mcopy_atomic() which do not
    do any cache flushing for the target page.  Then the target page will be
    mapped to the user space with a different address (user address), which
    might have an alias issue with the kernel address used to copy the data
    from the user to.  Fix this by insert flush_dcache_page() after
    copy_from_user() succeeds.
    
    Link: https://lkml.kernel.org/r/20220210123058.79206-7-songmuchun@bytedance.com
    Fixes: b6ebaedb4cb1 ("userfaultfd: avoid mmap_sem read recursion in mcopy_atomic")
    Fixes: c1a4de99fada ("userfaultfd: mcopy_atomic|mfill_zeropage: UFFDIO_COPY|UFFDIO_ZEROPAGE preparation")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Fam Zheng <fam.zheng@bytedance.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Lars Persson <lars.persson@axis.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Xiongchun Duan <duanxiongchun@bytedance.com>
    Cc: Zi Yan <ziy@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72dd0487237d8e801ae9f538baeb58b7a0e6d8aa
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Tue Mar 22 14:42:05 2022 -0700

    mm: shmem: fix missing cache flush in shmem_mfill_atomic_pte()
    
    commit 19b482c29b6f3805f1d8e93015847b89e2f7f3b1 upstream.
    
    userfaultfd calls shmem_mfill_atomic_pte() which does not do any cache
    flushing for the target page.  Then the target page will be mapped to
    the user space with a different address (user address), which might have
    an alias issue with the kernel address used to copy the data from the
    user to.  Insert flush_dcache_page() in non-zero-page case.  And replace
    clear_highpage() with clear_user_highpage() which already considers the
    cache maintenance.
    
    Link: https://lkml.kernel.org/r/20220210123058.79206-6-songmuchun@bytedance.com
    Fixes: 8d1039634206 ("userfaultfd: shmem: add shmem_mfill_zeropage_pte for userfaultfd support")
    Fixes: 4c27fe4c4c84 ("userfaultfd: shmem: add shmem_mcopy_atomic_pte for userfaultfd support")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Fam Zheng <fam.zheng@bytedance.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Lars Persson <lars.persson@axis.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Xiongchun Duan <duanxiongchun@bytedance.com>
    Cc: Zi Yan <ziy@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e36b476a829c61f69a0729029104513a89a5bef4
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Tue Mar 22 14:41:59 2022 -0700

    mm: hugetlb: fix missing cache flush in copy_huge_page_from_user()
    
    commit e763243cc6cb1fcc720ec58cfd6e7c35ae90a479 upstream.
    
    userfaultfd calls copy_huge_page_from_user() which does not do any cache
    flushing for the target page.  Then the target page will be mapped to
    the user space with a different address (user address), which might have
    an alias issue with the kernel address used to copy the data from the
    user to.
    
    Fix this issue by flushing dcache in copy_huge_page_from_user().
    
    Link: https://lkml.kernel.org/r/20220210123058.79206-4-songmuchun@bytedance.com
    Fixes: fa4d75c1de13 ("userfaultfd: hugetlbfs: add copy_huge_page_from_user for hugetlb userfaultfd support")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Fam Zheng <fam.zheng@bytedance.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Lars Persson <lars.persson@axis.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Xiongchun Duan <duanxiongchun@bytedance.com>
    Cc: Zi Yan <ziy@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97a9f80290aabcfe2d817a2366cb979613134aac
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Tue Mar 22 14:41:56 2022 -0700

    mm: fix missing cache flush for all tail pages of compound page
    
    commit 2771739a7162782c0aa6424b2e3dd874e884a15d upstream.
    
    The D-cache maintenance inside move_to_new_page() only consider one
    page, there is still D-cache maintenance issue for tail pages of
    compound page (e.g. THP or HugeTLB).
    
    THP migration is only enabled on x86_64, ARM64 and powerpc, while
    powerpc and arm64 need to maintain the consistency between I-Cache and
    D-Cache, which depends on flush_dcache_page() to maintain the
    consistency between I-Cache and D-Cache.
    
    But there is no issues on arm64 and powerpc since they already considers
    the compound page cache flushing in their icache flush function.
    HugeTLB migration is enabled on arm, arm64, mips, parisc, powerpc,
    riscv, s390 and sh, while arm has handled the compound page cache flush
    in flush_dcache_page(), but most others do not.
    
    In theory, the issue exists on many architectures.  Fix this by not
    using flush_dcache_folio() since it is not backportable.
    
    Link: https://lkml.kernel.org/r/20220210123058.79206-3-songmuchun@bytedance.com
    Fixes: 290408d4a250 ("hugetlb: hugepage migration core")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Zi Yan <ziy@nvidia.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Fam Zheng <fam.zheng@bytedance.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Lars Persson <lars.persson@axis.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Xiongchun Duan <duanxiongchun@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e951f2d85c9430ea8ae0c8448e47e3c234f1580
Author: Jan Kara <jack@suse.cz>
Date:   Tue May 10 12:36:04 2022 +0200

    udf: Avoid using stale lengthOfImpUse
    
    commit c1ad35dd0548ce947d97aaf92f7f2f9a202951cf upstream.
    
    udf_write_fi() uses lengthOfImpUse of the entry it is writing to.
    However this field has not yet been initialized so it either contains
    completely bogus value or value from last directory entry at that place.
    In either case this is wrong and can lead to filesystem corruption or
    kernel crashes.
    
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    CC: stable@vger.kernel.org
    Fixes: 979a6e28dd96 ("udf: Get rid of 0-length arrays in struct fileIdentDesc")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d9c1d39237eb0495616447a82a312ee957d60f8
Author: Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>
Date:   Fri May 6 17:24:54 2022 +0000

    rfkill: uapi: fix RFKILL_IOCTL_MAX_SIZE ioctl request definition
    
    commit a36e07dfe6ee71e209383ea9288cd8d1617e14f9 upstream.
    
    The definition of RFKILL_IOCTL_MAX_SIZE introduced by commit
    54f586a91532 ("rfkill: make new event layout opt-in") is unusable
    since it is based on RFKILL_IOC_EXT_SIZE which has not been defined.
    Fix that by replacing the undefined constant with the constant which
    is intended to be used in this definition.
    
    Fixes: 54f586a91532 ("rfkill: make new event layout opt-in")
    Cc: stable@vger.kernel.org # 5.11+
    Signed-off-by: Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>
    Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
    Link: https://lore.kernel.org/r/20220506172454.120319-1-glebfm@altlinux.org
    [add commit message provided later by Dmitry]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b063e8cbec3cfc44d292cc1e684cba9a17c3afab
Author: Itay Iellin <ieitayie@gmail.com>
Date:   Sat May 7 08:32:48 2022 -0400

    Bluetooth: Fix the creation of hdev->name
    
    commit 103a2f3255a95991252f8f13375c3a96a75011cd upstream.
    
    Set a size limit of 8 bytes of the written buffer to "hdev->name"
    including the terminating null byte, as the size of "hdev->name" is 8
    bytes. If an id value which is greater than 9999 is allocated,
    then the "snprintf(hdev->name, sizeof(hdev->name), "hci%d", id)"
    function call would lead to a truncation of the id value in decimal
    notation.
    
    Set an explicit maximum id parameter in the id allocation function call.
    The id allocation function defines the maximum allocated id value as the
    maximum id parameter value minus one. Therefore, HCI_MAX_ID is defined
    as 10000.
    
    Signed-off-by: Itay Iellin <ieitayie@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01986c7dbf9d62aa182169659d9c24575a2b82e9
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Mar 23 23:35:01 2022 +0100

    objtool: Fix SLS validation for kcov tail-call replacement
    
    [ Upstream commit 7a53f408902d913cd541b4f8ad7dbcd4961f5b82 ]
    
    Since not all compilers have a function attribute to disable KCOV
    instrumentation, objtool can rewrite KCOV instrumentation in noinstr
    functions as per commit:
    
      f56dae88a81f ("objtool: Handle __sanitize_cov*() tail calls")
    
    However, this has subtle interaction with the SLS validation from
    commit:
    
      1cc1e4c8aab4 ("objtool: Add straight-line-speculation validation")
    
    In that when a tail-call instrucion is replaced with a RET an
    additional INT3 instruction is also written, but is not represented in
    the decoded instruction stream.
    
    This then leads to false positive missing INT3 objtool warnings in
    noinstr code.
    
    Instead of adding additional struct instruction objects, mark the RET
    instruction with retpoline_safe to suppress the warning (since we know
    there really is an INT3).
    
    Fixes: 1cc1e4c8aab4 ("objtool: Add straight-line-speculation validation")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20220323230712.GA8939@worktop.programming.kicks-ass.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41b6878eedf8c550332e94dd12d1f2e5dfc46541
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Mar 24 00:05:55 2022 +0100

    crypto: x86/poly1305 - Fixup SLS
    
    [ Upstream commit 7ed7aa4de9421229be6d331ed52d5cd09c99f409 ]
    
    Due to being a perl generated asm file, it got missed by the mass
    convertion script.
    
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_init_x86_64()+0x3a: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_x86_64()+0xf2: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_emit_x86_64()+0x37: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: __poly1305_block()+0x6d: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: __poly1305_init_avx()+0x1e8: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_avx()+0x18a: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_avx()+0xaf8: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_emit_avx()+0x99: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_avx2()+0x18a: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_avx2()+0x776: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_avx512()+0x18a: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_avx512()+0x796: missing int3 after ret
    arch/x86/crypto/poly1305-x86_64-cryptogams.o: warning: objtool: poly1305_blocks_avx512()+0x10bd: missing int3 after ret
    
    Fixes: f94909ceb1ed ("x86: Prepare asm files for straight-line-speculation")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f277e36addadf04c79fbacd3df06bcfd240eb382
Author: Borislav Petkov <bp@suse.de>
Date:   Wed Mar 16 22:05:52 2022 +0100

    kvm/emulate: Fix SETcc emulation function offsets with SLS
    
    [ Upstream commit fe83f5eae432ccc8e90082d6ed506d5233547473 ]
    
    The commit in Fixes started adding INT3 after RETs as a mitigation
    against straight-line speculation.
    
    The fastop SETcc implementation in kvm's insn emulator uses macro magic
    to generate all possible SETcc functions and to jump to them when
    emulating the respective instruction.
    
    However, it hardcodes the size and alignment of those functions to 4: a
    three-byte SETcc insn and a single-byte RET. BUT, with SLS, there's an
    INT3 that gets slapped after the RET, which brings the whole scheme out
    of alignment:
    
      15:   0f 90 c0                seto   %al
      18:   c3                      ret
      19:   cc                      int3
      1a:   0f 1f 00                nopl   (%rax)
      1d:   0f 91 c0                setno  %al
      20:   c3                      ret
      21:   cc                      int3
      22:   0f 1f 00                nopl   (%rax)
      25:   0f 92 c0                setb   %al
      28:   c3                      ret
      29:   cc                      int3
    
    and this explodes like this:
    
      int3: 0000 [#1] PREEMPT SMP PTI
      CPU: 0 PID: 2435 Comm: qemu-system-x86 Not tainted 5.17.0-rc8-sls #1
      Hardware name: Dell Inc. Precision WorkStation T3400  /0TP412, BIOS A14 04/30/2012
      RIP: 0010:setc+0x5/0x8 [kvm]
      Code: 00 00 0f 1f 00 0f b6 05 43 24 06 00 c3 cc 0f 1f 80 00 00 00 00 0f 90 c0 c3 cc 0f \
              1f 00 0f 91 c0 c3 cc 0f 1f 00 0f 92 c0 c3 cc <0f> 1f 00 0f 93 c0 c3 cc 0f 1f 00 \
              0f 94 c0 c3 cc 0f 1f 00 0f 95 c0
      Call Trace:
       <TASK>
       ? x86_emulate_insn [kvm]
       ? x86_emulate_instruction [kvm]
       ? vmx_handle_exit [kvm_intel]
       ? kvm_arch_vcpu_ioctl_run [kvm]
       ? kvm_vcpu_ioctl [kvm]
       ? __x64_sys_ioctl
       ? do_syscall_64
       ? entry_SYSCALL_64_after_hwframe
       </TASK>
    
    Raise the alignment value when SLS is enabled and use a macro for that
    instead of hard-coding naked numbers.
    
    Fixes: e463a09af2f0 ("x86: Add straight-line-speculation mitigation")
    Reported-by: Jamie Heilman <jamie@audible.transient.net>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: Jamie Heilman <jamie@audible.transient.net>
    Link: https://lore.kernel.org/r/YjGzJwjrvxg5YZ0Z@audible.transient.net
    [Add a comment and a bit of safety checking, since this is going to be changed
     again for IBT support. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80c8ac8eca778b5dc8516840adc277c2655a20b6
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Sun May 9 10:19:37 2021 -0300

    tools arch: Update arch/x86/lib/mem{cpy,set}_64.S copies used in 'perf bench mem memcpy'
    
    [ Upstream commit 35cb8c713a496e8c114eed5e2a5a30b359876df2 ]
    
    To bring in the change made in this cset:
    
      f94909ceb1ed4bfd ("x86: Prepare asm files for straight-line-speculation")
    
    It silences these perf tools build warnings, no change in the tools:
    
      Warning: Kernel ABI header at 'tools/arch/x86/lib/memcpy_64.S' differs from latest version at 'arch/x86/lib/memcpy_64.S'
      diff -u tools/arch/x86/lib/memcpy_64.S arch/x86/lib/memcpy_64.S
      Warning: Kernel ABI header at 'tools/arch/x86/lib/memset_64.S' differs from latest version at 'arch/x86/lib/memset_64.S'
      diff -u tools/arch/x86/lib/memset_64.S arch/x86/lib/memset_64.S
    
    The code generated was checked before and after using 'objdump -d /tmp/build/perf/bench/mem-memcpy-x86-64-asm.o',
    no changes.
    
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 370d33da35e31c1544eb77bcf2539f09b1064b9c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Sat Dec 4 14:43:44 2021 +0100

    x86: Add straight-line-speculation mitigation
    
    [ Upstream commit e463a09af2f0677b9485a7e8e4e70b396b2ffb6f ]
    
    Make use of an upcoming GCC feature to mitigate
    straight-line-speculation for x86:
    
      https://gcc.gnu.org/g:53a643f8568067d7700a9f2facc8ba39974973d3
      https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952
      https://bugs.llvm.org/show_bug.cgi?id=52323
    
    It's built tested on x86_64-allyesconfig using GCC-12 and GCC-11.
    
    Maintenance overhead of this should be fairly low due to objtool
    validation.
    
    Size overhead of all these additional int3 instructions comes to:
    
         text          data     bss     dec     hex filename
      22267751      6933356 2011368 31212475        1dc43bb defconfig-build/vmlinux
      22804126      6933356 1470696 31208178        1dc32f2 defconfig-build/vmlinux.sls
    
    Or roughly 2.4% additional text.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211204134908.140103474@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d11f96d0c0c30e6ed73049c752a1ca7621e7062f
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Tue Aug 31 16:39:52 2021 +0900

    kbuild: move objtool_args back to scripts/Makefile.build
    
    [ Upstream commit 8f0c32c788fffa8e88f995372415864039347c8a ]
    
    Commit b1a1a1a09b46 ("kbuild: lto: postpone objtool") moved objtool_args
    to Makefile.lib, so the arguments can be used in Makefile.modfinal as
    well as Makefile.build.
    
    With commit 850ded46c642 ("kbuild: Fix TRIM_UNUSED_KSYMS with
    LTO_CLANG"), module LTO linking came back to scripts/Makefile.build
    again.
    
    So, there is no more reason to keep objtool_args in a separate file.
    
    Get it back to the original place, close to the objtool command.
    
    Remove the stale comment too.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f835241fdb0f018e8d796e0151697e8431b6631b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Sat Dec 4 14:43:43 2021 +0100

    x86/alternative: Relax text_poke_bp() constraint
    
    [ Upstream commit 26c44b776dba4ac692a0bf5a3836feb8a63fea6b ]
    
    Currently, text_poke_bp() is very strict to only allow patching a
    single instruction; however with straight-line-speculation it will be
    required to patch: ret; int3, which is two instructions.
    
    As such, relax the constraints a little to allow int3 padding for all
    instructions that do not imply the execution of the next instruction,
    ie: RET, JMP.d8 and JMP.d32.
    
    While there, rename the text_poke_loc::rel32 field to ::disp.
    
    Note: this fills up the text_poke_loc structure which is now a round
      16 bytes big.
    
      [ bp: Put comments ontop instead of on the side. ]
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211204134908.082342723@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee4724cc045fd566b826d292f2cb69e741b9ce7c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Sat Dec 4 14:43:42 2021 +0100

    objtool: Add straight-line-speculation validation
    
    [ Upstream commit 1cc1e4c8aab4213bd4e6353dec2620476a233d6d ]
    
    Teach objtool to validate the straight-line-speculation constraints:
    
     - speculation trap after indirect calls
     - speculation trap after RET
    
    Notable: when an instruction is annotated RETPOLINE_SAFE, indicating
      speculation isn't a problem, also don't care about sls for that
      instruction.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211204134908.023037659@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a467f694a46d3096bc1d0aa24cfbf44291d22c84
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Sat Dec 4 14:43:41 2021 +0100

    x86: Prepare inline-asm for straight-line-speculation
    
    [ Upstream commit b17c2baa305cccbd16bafa289fd743cc2db77966 ]
    
    Replace all ret/retq instructions with ASM_RET in preparation of
    making it more than a single instruction.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211204134907.964635458@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14b476e07fab62d47d872bc99843a0d707f7cc94
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Sat Dec 4 14:43:40 2021 +0100

    x86: Prepare asm files for straight-line-speculation
    
    [ Upstream commit f94909ceb1ed4bfdb2ada72f93236305e6d6951f ]
    
    Replace all ret/retq instructions with RET in preparation of making
    RET a macro. Since AS is case insensitive it's a big no-op without
    RET defined.
    
      find arch/x86/ -name \*.S | while read file
      do
            sed -i 's/\<ret[q]*\>/RET/' $file
      done
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211204134907.905503893@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89837223d00d52d2d1e641c626acda11d9ef1a6c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Sat Dec 4 14:43:39 2021 +0100

    x86/lib/atomic64_386_32: Rename things
    
    [ Upstream commit 22da5a07c75e1104caf6a42f189c97b83d070073 ]
    
    Principally, in order to get rid of #define RET in this code to make
    place for a new RET, but also to clarify the code, rename a bunch of
    things:
    
      s/UNLOCK/IRQ_RESTORE/
      s/LOCK/IRQ_SAVE/
      s/BEGIN/BEGIN_IRQ_SAVE/
      s/\<RET\>/RET_IRQ_RESTORE/
      s/RET_ENDP/\tRET_IRQ_RESTORE\rENDP/
    
    which then leaves RET unused so it can be removed.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lore.kernel.org/r/20211204134907.841623970@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

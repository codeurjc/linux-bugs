commit 5ddfe5cc87167343bd4c17f776de7b7aa1475b0c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Aug 26 14:23:41 2023 +0200

    Linux 5.15.128
    
    Link: https://lore.kernel.org/r/20230824145023.559380953@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9080f4fcc20260a1c9e15f19e660e824ccc9b994
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Tue Aug 15 11:53:13 2023 +0200

    x86/srso: Correct the mitigation status when SMT is disabled
    
    commit 6405b72e8d17bd1875a56ae52d23ec3cd51b9d66 upstream.
    
    Specify how is SRSO mitigated when SMT is disabled. Also, correct the
    SMT check for that.
    
    Fixes: e9fbc47b818b ("x86/srso: Disable the mitigation on unaffected configurations")
    Suggested-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Link: https://lore.kernel.org/r/20230814200813.p5czl47zssuej7nv@treble
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 484eefc6ff9c6dc03f056d0ec4056fc667cef3d2
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Aug 16 13:59:21 2023 +0200

    objtool/x86: Fixup frame-pointer vs rethunk
    
    commit dbf46008775516f7f25c95b7760041c286299783 upstream.
    
    For stack-validation of a frame-pointer build, objtool validates that
    every CALL instruction is preceded by a frame-setup. The new SRSO
    return thunks violate this with their RSB stuffing trickery.
    
    Extend the __fentry__ exception to also cover the embedded_insn case
    used for this. This cures:
    
      vmlinux.o: warning: objtool: srso_untrain_ret+0xd: call without frame pointer save/setup
    
    Fixes: 4ae68b26c3ab ("objtool/x86: Fix SRSO mess")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Link: https://lore.kernel.org/r/20230816115921.GH980931@hirez.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55f1cbeaa15945e38bf892380966a9eb90f7734b
Author: Petr Pavlu <petr.pavlu@suse.com>
Date:   Tue Jul 11 11:19:51 2023 +0200

    x86/retpoline,kprobes: Fix position of thunk sections with CONFIG_LTO_CLANG
    
    commit 79cd2a11224eab86d6673fe8a11d2046ae9d2757 upstream.
    
    The linker script arch/x86/kernel/vmlinux.lds.S matches the thunk
    sections ".text.__x86.*" from arch/x86/lib/retpoline.S as follows:
    
      .text {
        [...]
        TEXT_TEXT
        [...]
        __indirect_thunk_start = .;
        *(.text.__x86.*)
        __indirect_thunk_end = .;
        [...]
      }
    
    Macro TEXT_TEXT references TEXT_MAIN which normally expands to only
    ".text". However, with CONFIG_LTO_CLANG, TEXT_MAIN becomes
    ".text .text.[0-9a-zA-Z_]*" which wrongly matches also the thunk
    sections. The output layout is then different than expected. For
    instance, the currently defined range [__indirect_thunk_start,
    __indirect_thunk_end] becomes empty.
    
    Prevent the problem by using ".." as the first separator, for example,
    ".text..__x86.indirect_thunk". This pattern is utilized by other
    explicit section names which start with one of the standard prefixes,
    such as ".text" or ".data", and that need to be individually selected in
    the linker script.
    
      [ nathan: Fix conflicts with SRSO and fold in fix issue brought up by
        Andrew Cooper in post-review:
        https://lore.kernel.org/20230803230323.1478869-1-andrew.cooper3@citrix.com ]
    
    Fixes: dc5723b02e52 ("kbuild: add support for Clang LTO")
    Signed-off-by: Petr Pavlu <petr.pavlu@suse.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230711091952.27944-2-petr.pavlu@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa24cd0fbcb7245229509dfef6db528bc9f187f9
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Sun Aug 13 12:39:34 2023 +0200

    x86/srso: Disable the mitigation on unaffected configurations
    
    commit e9fbc47b818b964ddff5df5b2d5c0f5f32f4a147 upstream.
    
    Skip the srso cmd line parsing which is not needed on Zen1/2 with SMT
    disabled and with the proper microcode applied (latter should be the
    case anyway) as those are not affected.
    
    Fixes: 5a15d8348881 ("x86/srso: Tie SBPB bit setting to microcode patch detection")
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230813104517.3346-1-bp@alien8.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa0777ce0d3d3237ffb59cd065420f64ad85d4c2
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Fri Aug 11 23:38:24 2023 +0200

    x86/CPU/AMD: Fix the DIV(0) initial fix attempt
    
    commit f58d6fbcb7c848b7f2469be339bc571f2e9d245b upstream.
    
    Initially, it was thought that doing an innocuous division in the #DE
    handler would take care to prevent any leaking of old data from the
    divider but by the time the fault is raised, the speculation has already
    advanced too far and such data could already have been used by younger
    operations.
    
    Therefore, do the innocuous division on every exit to userspace so that
    userspace doesn't see any potentially old data from integer divisions in
    kernel space.
    
    Do the same before VMRUN too, to protect host data from leaking into the
    guest too.
    
    Fixes: 77245f1c3c64 ("x86/CPU/AMD: Do not leak quotient data after a division by 0")
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230811213824.10025-1-bp@alien8.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbe585239d4fb4dd5f0235446fa86c5abdd0098b
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Aug 11 08:52:55 2023 -0700

    x86/retpoline: Don't clobber RFLAGS during srso_safe_ret()
    
    commit ba5ca5e5e6a1d55923e88b4a83da452166f5560e upstream.
    
    Use LEA instead of ADD when adjusting %rsp in srso_safe_ret{,_alias}()
    so as to avoid clobbering flags.  Drop one of the INT3 instructions to
    account for the LEA consuming one more byte than the ADD.
    
    KVM's emulator makes indirect calls into a jump table of sorts, where
    the destination of each call is a small blob of code that performs fast
    emulation by executing the target instruction with fixed operands.
    
    E.g. to emulate ADC, fastop() invokes adcb_al_dl():
    
      adcb_al_dl:
        <+0>:  adc    %dl,%al
        <+2>:  jmp    <__x86_return_thunk>
    
    A major motivation for doing fast emulation is to leverage the CPU to
    handle consumption and manipulation of arithmetic flags, i.e. RFLAGS is
    both an input and output to the target of the call.  fastop() collects
    the RFLAGS result by pushing RFLAGS onto the stack and popping them back
    into a variable (held in %rdi in this case):
    
      asm("push %[flags]; popf; " CALL_NOSPEC " ; pushf; pop %[flags]\n"
    
      <+71>: mov    0xc0(%r8),%rdx
      <+78>: mov    0x100(%r8),%rcx
      <+85>: push   %rdi
      <+86>: popf
      <+87>: call   *%rsi
      <+89>: nop
      <+90>: nop
      <+91>: nop
      <+92>: pushf
      <+93>: pop    %rdi
    
    and then propagating the arithmetic flags into the vCPU's emulator state:
    
      ctxt->eflags = (ctxt->eflags & ~EFLAGS_MASK) | (flags & EFLAGS_MASK);
    
      <+64>:  and    $0xfffffffffffff72a,%r9
      <+94>:  and    $0x8d5,%edi
      <+109>: or     %rdi,%r9
      <+122>: mov    %r9,0x10(%r8)
    
    The failures can be most easily reproduced by running the "emulator"
    test in KVM-Unit-Tests.
    
    If you're feeling a bit of deja vu, see commit b63f20a778c8
    ("x86/retpoline: Don't clobber RFLAGS during CALL_NOSPEC on i386").
    
    In addition, this breaks booting of clang-compiled guest on
    a gcc-compiled host where the host contains the %rsp-modifying SRSO
    mitigations.
    
      [ bp: Massage commit message, extend, remove addresses. ]
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Closes: https://lore.kernel.org/all/de474347-122d-54cd-eabf-9dcc95ab9eae@amd.com
    Reported-by: Srikanth Aithal <sraithal@amd.com>
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/20230810013334.GA5354@dev-arch.thelio-3990X/
    Link: https://lore.kernel.org/r/20230811155255.250835-1-seanjc@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19f23d16b0e0bf433644772ef6593d7492e9b03b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Aug 16 12:44:19 2023 +0200

    x86/static_call: Fix __static_call_fixup()
    
    commit 54097309620ef0dc2d7083783dc521c6a5fef957 upstream.
    
    Christian reported spurious module load crashes after some of Song's
    module memory layout patches.
    
    Turns out that if the very last instruction on the very last page of the
    module is a 'JMP __x86_return_thunk' then __static_call_fixup() will
    trip a fault and die.
    
    And while the module rework made this slightly more likely to happen,
    it's always been possible.
    
    Fixes: ee88d363d156 ("x86,static_call: Use alternative RET encoding")
    Reported-by: Christian Bricart <christian@bricart.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Link: https://lkml.kernel.org/r/20230816104419.GA982867@hirez.programming.kicks-ass.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df6495f203a77be3f799630b02ab012e06659554
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Mon Aug 14 21:29:50 2023 +0200

    x86/srso: Explain the untraining sequences a bit more
    
    commit 9dbd23e42ff0b10c9b02c9e649c76e5228241a8e upstream.
    
    The goal is to eventually have a proper documentation about all this.
    
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814164447.GFZNpZ/64H4lENIe94@fat_crate.local
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43548590ad7e794392ad6f3f8c13d8c1593bdf61
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:34 2023 +0200

    x86/cpu: Cleanup the untrain mess
    
    commit e7c25c441e9e0fa75b4c83e0b26306b702cfe90d upstream.
    
    Since there can only be one active return_thunk, there only needs be
    one (matching) untrain_ret. It fundamentally doesn't make sense to
    allow multiple untrain_ret at the same time.
    
    Fold all the 3 different untrain methods into a single (temporary)
    helper stub.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121149.042774962@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 035e906bfc9367c3f7fe0d98011aa702edcfeeef
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:33 2023 +0200

    x86/cpu: Rename srso_(.*)_alias to srso_alias_\1
    
    commit 42be649dd1f2eee6b1fb185f1a231b9494cf095f upstream.
    
    For a more consistent namespace.
    
      [ bp: Fixup names in the doc too. ]
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121148.976236447@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19c1c049965094bae561de10d9e0311988c7858f
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:32 2023 +0200

    x86/cpu: Rename original retbleed methods
    
    commit d025b7bac07a6e90b6b98b487f88854ad9247c39 upstream.
    
    Rename the original retbleed return thunk and untrain_ret to
    retbleed_return_thunk() and retbleed_untrain_ret().
    
    No functional changes.
    
    Suggested-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121148.909378169@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f77dbb90962b58c1b3b0a5f60b772582d1caa3d2
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:31 2023 +0200

    x86/cpu: Clean up SRSO return thunk mess
    
    commit d43490d0ab824023e11d0b57d0aeec17a6e0ca13 upstream.
    
    Use the existing configurable return thunk. There is absolute no
    justification for having created this __x86_return_thunk alternative.
    
    To clarify, the whole thing looks like:
    
    Zen3/4 does:
    
      srso_alias_untrain_ret:
              nop2
              lfence
              jmp srso_alias_return_thunk
              int3
    
      srso_alias_safe_ret: // aliasses srso_alias_untrain_ret just so
              add $8, %rsp
              ret
              int3
    
      srso_alias_return_thunk:
              call srso_alias_safe_ret
              ud2
    
    While Zen1/2 does:
    
      srso_untrain_ret:
              movabs $foo, %rax
              lfence
              call srso_safe_ret           (jmp srso_return_thunk ?)
              int3
    
      srso_safe_ret: // embedded in movabs instruction
              add $8,%rsp
              ret
              int3
    
      srso_return_thunk:
              call srso_safe_ret
              ud2
    
    While retbleed does:
    
      zen_untrain_ret:
              test $0xcc, %bl
              lfence
              jmp zen_return_thunk
              int3
    
      zen_return_thunk: // embedded in the test instruction
              ret
              int3
    
    Where Zen1/2 flush the BTB entry using the instruction decoder trick
    (test,movabs) Zen3/4 use BTB aliasing. SRSO adds a return sequence
    (srso_safe_ret()) which forces the function return instruction to
    speculate into a trap (UD2).  This RET will then mispredict and
    execution will continue at the return site read from the top of the
    stack.
    
    Pick one of three options at boot (evey function can only ever return
    once).
    
      [ bp: Fixup commit message uarch details and add them in a comment in
        the code too. Add a comment about the srso_select_mitigation()
        dependency on retbleed_select_mitigation(). Add moar ifdeffery for
        32-bit builds. Add a dummy srso_untrain_ret_alias() definition for
        32-bit alternatives needing the symbol. ]
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121148.842775684@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f624ce6c7fc27468cb52623222ed61921822edc0
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Mar 8 16:30:18 2022 +0100

    x86/ibt: Add ANNOTATE_NOENDBR
    
    [ Upstream commit c8c301abeae58ec756b8fcb2178a632bd3c9e284 ]
    
    In order to have objtool warn about code references to !ENDBR
    instruction, we need an annotation to allow this for non-control-flow
    instances -- consider text range checks, text patching, or return
    trampolines etc.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Link: https://lore.kernel.org/r/20220308154317.578968224@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1171d455d94f15ae70b8965b82c3f039f187a63
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Tue Sep 14 23:41:13 2021 +0900

    objtool: Add frame-pointer-specific function ignore
    
    [ Upstream commit e028c4f7ac7ca8c96126fe46c54ab3d56ffe6a66 ]
    
    Add a CONFIG_FRAME_POINTER-specific version of
    STACK_FRAME_NON_STANDARD() for the case where a function is
    intentionally missing frame pointer setup, but otherwise needs
    objtool/ORC coverage when frame pointers are disabled.
    
    Link: https://lkml.kernel.org/r/163163047364.489837.17377799909553689661.stgit@devnote2
    
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Stable-dep-of: c8c301abeae5 ("x86/ibt: Add ANNOTATE_NOENDBR")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08f7cfd44f77b2796582bc26164fdef44dd33b6c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:30 2023 +0200

    x86/alternative: Make custom return thunk unconditional
    
    commit 095b8303f3835c68ac4a8b6d754ca1c3b6230711 upstream.
    
    There is infrastructure to rewrite return thunks to point to any
    random thunk one desires, unwrap that from CALL_THUNKS, which up to
    now was the sole user of that.
    
      [ bp: Make the thunks visible on 32-bit and add ifdeffery for the
        32-bit builds. ]
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121148.775293785@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d810eff090c30535f5cb8db6a6cfbaed7aa499a
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:28 2023 +0200

    x86/cpu: Fix up srso_safe_ret() and __x86_return_thunk()
    
    commit af023ef335f13c8b579298fc432daeef609a9e60 upstream.
    
      vmlinux.o: warning: objtool: srso_untrain_ret() falls through to next function __x86_return_skl()
      vmlinux.o: warning: objtool: __x86_return_thunk() falls through to next function __x86_return_skl()
    
    This is because these functions (can) end with CALL, which objtool
    does not consider a terminating instruction. Therefore, replace the
    INT3 instruction (which is a non-fatal trap) with UD2 (which is a
    fatal-trap).
    
    This indicates execution will not continue past this point.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121148.637802730@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8089aae6020e51d556dcc6af54495c9aa99a761c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Aug 14 13:44:27 2023 +0200

    x86/cpu: Fix __x86_return_thunk symbol type
    
    commit 77f67119004296a9b2503b377d610e08b08afc2a upstream.
    
    Commit
    
      fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    
    reimplemented __x86_return_thunk with a mix of SYM_FUNC_START and
    SYM_CODE_END, this is not a sane combination.
    
    Since nothing should ever actually 'CALL' this, make it consistently
    CODE.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20230814121148.571027074@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b28fda5fdee72e93b12b44db158882d7e3f3e92
Author: Yangtao Li <frank.li@vivo.com>
Date:   Thu Jul 27 15:00:51 2023 +0800

    mmc: f-sdh30: fix order of function calls in sdhci_f_sdh30_remove
    
    commit 58abdd80b93b09023ca03007b608685c41e3a289 upstream.
    
    The order of function calls in sdhci_f_sdh30_remove is wrong,
    let's call sdhci_pltfm_unregister first.
    
    Cc: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Fixes: 5def5c1c15bf ("mmc: sdhci-f-sdh30: Replace with sdhci_pltfm")
    Signed-off-by: Yangtao Li <frank.li@vivo.com>
    Reported-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230727070051.17778-62-frank.li@vivo.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8c5081da2cc3dffa3ae1062121f2db3aa9c0cd2
Author: Jason Xing <kernelxing@tencent.com>
Date:   Fri Aug 11 10:37:47 2023 +0800

    net: fix the RTO timer retransmitting skb every 1ms if linear option is enabled
    
    commit e4dd0d3a2f64b8bd8029ec70f52bdbebd0644408 upstream.
    
    In the real workload, I encountered an issue which could cause the RTO
    timer to retransmit the skb per 1ms with linear option enabled. The amount
    of lost-retransmitted skbs can go up to 1000+ instantly.
    
    The root cause is that if the icsk_rto happens to be zero in the 6th round
    (which is the TCP_THIN_LINEAR_RETRIES value), then it will always be zero
    due to the changed calculation method in tcp_retransmit_timer() as follows:
    
    icsk->icsk_rto = min(icsk->icsk_rto << 1, TCP_RTO_MAX);
    
    Above line could be converted to
    icsk->icsk_rto = min(0 << 1, TCP_RTO_MAX) = 0
    
    Therefore, the timer expires so quickly without any doubt.
    
    I read through the RFC 6298 and found that the RTO value can be rounded
    up to a certain value, in Linux, say TCP_RTO_MIN as default, which is
    regarded as the lower bound in this patch as suggested by Eric.
    
    Fixes: 36e31b0af587 ("net: TCP thin linear timeouts")
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Jason Xing <kernelxing@tencent.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 431db3f48c286462ad7453ccdf284f590aafa949
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Aug 9 23:12:56 2023 -0400

    virtio-net: set queues after driver_ok
    
    commit 51b813176f098ff61bd2833f627f5319ead098a5 upstream.
    
    Commit 25266128fe16 ("virtio-net: fix race between set queues and
    probe") tries to fix the race between set queues and probe by calling
    _virtnet_set_queues() before DRIVER_OK is set. This violates virtio
    spec. Fixing this by setting queues after virtio_device_ready().
    
    Note that rtnl needs to be held for userspace requests to change the
    number of queues. So we are serialized in this way.
    
    Fixes: 25266128fe16 ("virtio-net: fix race between set queues and probe")
    Reported-by: Dragos Tatulea <dtatulea@nvidia.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d39fc9b94dc0719afa4bc8e58341a5eb41febef3
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Aug 21 10:55:05 2023 -0700

    af_unix: Fix null-ptr-deref in unix_stream_sendpage().
    
    Bing-Jhong Billy Jheng reported null-ptr-deref in unix_stream_sendpage()
    with detailed analysis and a nice repro.
    
    unix_stream_sendpage() tries to add data to the last skb in the peer's
    recv queue without locking the queue.
    
    If the peer's FD is passed to another socket and the socket's FD is
    passed to the peer, there is a loop between them.  If we close both
    sockets without receiving FD, the sockets will be cleaned up by garbage
    collection.
    
    The garbage collection iterates such sockets and unlinks skb with
    FD from the socket's receive queue under the queue's lock.
    
    So, there is a race where unix_stream_sendpage() could access an skb
    locklessly that is being released by garbage collection, resulting in
    use-after-free.
    
    To avoid the issue, unix_stream_sendpage() must lock the peer's recv
    queue.
    
    Note the issue does not exist in 6.5+ thanks to the recent sendpage()
    refactoring.
    
    This patch is originally written by Linus Torvalds.
    
    BUG: unable to handle page fault for address: ffff988004dd6870
    PF: supervisor read access in kernel mode
    PF: error_code(0x0000) - not-present page
    PGD 0 P4D 0
    PREEMPT SMP PTI
    CPU: 4 PID: 297 Comm: garbage_uaf Not tainted 6.1.46 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    RIP: 0010:kmem_cache_alloc_node+0xa2/0x1e0
    Code: c0 0f 84 32 01 00 00 41 83 fd ff 74 10 48 8b 00 48 c1 e8 3a 41 39 c5 0f 85 1c 01 00 00 41 8b 44 24 28 49 8b 3c 24 48 8d 4a 40 <49> 8b 1c 06 4c 89 f0 65 48 0f c7 0f 0f 94 c0 84 c0 74 a1 41 8b 44
    RSP: 0018:ffffc9000079fac0 EFLAGS: 00000246
    RAX: 0000000000000070 RBX: 0000000000000005 RCX: 000000000001a284
    RDX: 000000000001a244 RSI: 0000000000400cc0 RDI: 000000000002eee0
    RBP: 0000000000400cc0 R08: 0000000000400cc0 R09: 0000000000000003
    R10: 0000000000000001 R11: 0000000000000000 R12: ffff888003970f00
    R13: 00000000ffffffff R14: ffff988004dd6800 R15: 00000000000000e8
    FS:  00007f174d6f3600(0000) GS:ffff88807db00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff988004dd6870 CR3: 00000000092be000 CR4: 00000000007506e0
    PKRU: 55555554
    Call Trace:
     <TASK>
     ? __die_body.cold+0x1a/0x1f
     ? page_fault_oops+0xa9/0x1e0
     ? fixup_exception+0x1d/0x310
     ? exc_page_fault+0xa8/0x150
     ? asm_exc_page_fault+0x22/0x30
     ? kmem_cache_alloc_node+0xa2/0x1e0
     ? __alloc_skb+0x16c/0x1e0
     __alloc_skb+0x16c/0x1e0
     alloc_skb_with_frags+0x48/0x1e0
     sock_alloc_send_pskb+0x234/0x270
     unix_stream_sendmsg+0x1f5/0x690
     sock_sendmsg+0x5d/0x60
     ____sys_sendmsg+0x210/0x260
     ___sys_sendmsg+0x83/0xd0
     ? kmem_cache_alloc+0xc6/0x1c0
     ? avc_disable+0x20/0x20
     ? percpu_counter_add_batch+0x53/0xc0
     ? alloc_empty_file+0x5d/0xb0
     ? alloc_file+0x91/0x170
     ? alloc_file_pseudo+0x94/0x100
     ? __fget_light+0x9f/0x120
     __sys_sendmsg+0x54/0xa0
     do_syscall_64+0x3b/0x90
     entry_SYSCALL_64_after_hwframe+0x69/0xd3
    RIP: 0033:0x7f174d639a7d
    Code: 28 89 54 24 1c 48 89 74 24 10 89 7c 24 08 e8 8a c1 f4 ff 8b 54 24 1c 48 8b 74 24 10 41 89 c0 8b 7c 24 08 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 33 44 89 c7 48 89 44 24 08 e8 de c1 f4 ff 48
    RSP: 002b:00007ffcb563ea50 EFLAGS: 00000293 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f174d639a7d
    RDX: 0000000000000000 RSI: 00007ffcb563eab0 RDI: 0000000000000007
    RBP: 00007ffcb563eb10 R08: 0000000000000000 R09: 00000000ffffffff
    R10: 00000000004040a0 R11: 0000000000000293 R12: 00007ffcb563ec28
    R13: 0000000000401398 R14: 0000000000403e00 R15: 00007f174d72c000
     </TASK>
    
    Fixes: 869e7c62486e ("net: af_unix: implement stream sendpage support")
    Reported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Reviewed-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Co-developed-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a4d8dc706c2523ea084e29e47b9a63bb0ca83d9
Author: Christopher Obbard <chris.obbard@collabora.com>
Date:   Wed Jul 5 15:42:54 2023 +0100

    arm64: dts: rockchip: Disable HS400 for eMMC on ROCK Pi 4
    
    commit cee572756aa2cb46e959e9797ad4b730b78a050b upstream.
    
    There is some instablity with some eMMC modules on ROCK Pi 4 SBCs running
    in HS400 mode. This ends up resulting in some block errors after a while
    or after a "heavy" operation utilising the eMMC (e.g. resizing a
    filesystem). An example of these errors is as follows:
    
        [  289.171014] mmc1: running CQE recovery
        [  290.048972] mmc1: running CQE recovery
        [  290.054834] mmc1: running CQE recovery
        [  290.060817] mmc1: running CQE recovery
        [  290.061337] blk_update_request: I/O error, dev mmcblk1, sector 1411072 op 0x1:(WRITE) flags 0x800 phys_seg 36 prio class 0
        [  290.061370] EXT4-fs warning (device mmcblk1p1): ext4_end_bio:348: I/O error 10 writing to inode 29547 starting block 176466)
        [  290.061484] Buffer I/O error on device mmcblk1p1, logical block 172288
        [  290.061531] Buffer I/O error on device mmcblk1p1, logical block 172289
        [  290.061551] Buffer I/O error on device mmcblk1p1, logical block 172290
        [  290.061574] Buffer I/O error on device mmcblk1p1, logical block 172291
        [  290.061592] Buffer I/O error on device mmcblk1p1, logical block 172292
        [  290.061615] Buffer I/O error on device mmcblk1p1, logical block 172293
        [  290.061632] Buffer I/O error on device mmcblk1p1, logical block 172294
        [  290.061654] Buffer I/O error on device mmcblk1p1, logical block 172295
        [  290.061673] Buffer I/O error on device mmcblk1p1, logical block 172296
        [  290.061695] Buffer I/O error on device mmcblk1p1, logical block 172297
    
    Disabling the Command Queue seems to stop the CQE recovery from running,
    but doesn't seem to improve the I/O errors. Until this can be investigated
    further, disable HS400 mode on the ROCK Pi 4 SBCs to at least stop I/O
    errors from occurring.
    
    While we are here, set the eMMC maximum clock frequency to 1.5MHz to
    follow the ROCK 4C+.
    
    Fixes: 1b5715c602fd ("arm64: dts: rockchip: add ROCK Pi 4 DTS support")
    Signed-off-by: Christopher Obbard <chris.obbard@collabora.com>
    Tested-By: Folker Schwesinger <dev@folker-schwesinger.de>
    Link: https://lore.kernel.org/r/20230705144255.115299-2-chris.obbard@collabora.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b64974e02ea82d0bae917f1fa79495a1a59b5bf
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Thu Jul 13 21:59:37 2023 +0900

    exfat: check if filename entries exceeds max filename length
    
    commit d42334578eba1390859012ebb91e1e556d51db49 upstream.
    
    exfat_extract_uni_name copies characters from a given file name entry into
    the 'uniname' variable. This variable is actually defined on the stack of
    the exfat_readdir() function. According to the definition of
    the 'exfat_uni_name' type, the file name should be limited 255 characters
    (+ null teminator space), but the exfat_get_uniname_from_ext_entry()
    function can write more characters because there is no check if filename
    entries exceeds max filename length. This patch add the check not to copy
    filename characters when exceeding max filename length.
    
    Cc: stable@vger.kernel.org
    Cc: Yuezhang Mo <Yuezhang.Mo@sony.com>
    Reported-by: Maxim Suhanov <dfirblog@gmail.com>
    Reviewed-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    [Harshit: backport to 5.15.y]
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6065b3017107eb7f7bac44dda46b7ff09165c701
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Aug 15 14:08:47 2023 -0400

    netfilter: set default timeout to 3 secs for sctp shutdown send and recv state
    
    commit 9bfab6d23a2865966a4f89a96536fbf23f83bc8c upstream.
    
    In SCTP protocol, it is using the same timer (T2 timer) for SHUTDOWN and
    SHUTDOWN_ACK retransmission. However in sctp conntrack the default timeout
    value for SCTP_CONNTRACK_SHUTDOWN_ACK_SENT state is 3 secs while it's 300
    msecs for SCTP_CONNTRACK_SHUTDOWN_SEND/RECV state.
    
    As Paolo Valerio noticed, this might cause unwanted expiration of the ct
    entry. In my test, with 1s tc netem delay set on the NAT path, after the
    SHUTDOWN is sent, the sctp ct entry enters SCTP_CONNTRACK_SHUTDOWN_SEND
    state. However, due to 300ms (too short) delay, when the SHUTDOWN_ACK is
    sent back from the peer, the sctp ct entry has expired and been deleted,
    and then the SHUTDOWN_ACK has to be dropped.
    
    Also, it is confusing these two sysctl options always show 0 due to all
    timeout values using sec as unit:
    
      net.netfilter.nf_conntrack_sctp_timeout_shutdown_recd = 0
      net.netfilter.nf_conntrack_sctp_timeout_shutdown_sent = 0
    
    This patch fixes it by also using 3 secs for sctp shutdown send and recv
    state in sctp conntrack, which is also RTO.initial value in SCTP protocol.
    
    Note that the very short time value for SCTP_CONNTRACK_SHUTDOWN_SEND/RECV
    was probably used for a rare scenario where SHUTDOWN is sent on 1st path
    but SHUTDOWN_ACK is replied on 2nd path, then a new connection started
    immediately on 1st path. So this patch also moves from SHUTDOWN_SEND/RECV
    to CLOSE when receiving INIT in the ORIGINAL direction.
    
    Fixes: 9fb9cbb1082d ("[NETFILTER]: Add nf_conntrack subsystem.")
    Reported-by: Paolo Valerio <pvalerio@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a00c5d2c208b7e40403524bd413f01055b73a9f4
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Thu May 18 11:52:51 2023 -0500

    drm/amd: flush any delayed gfxoff on suspend entry
    
    commit a7b7d9e8aee4f71b4c7151702fd74237b8cef989 upstream.
    
    DCN 3.1.4 is reported to hang on s2idle entry if graphics activity
    is happening during entry.  This is because GFXOFF was scheduled as
    delayed but RLC gets disabled in s2idle entry sequence which will
    hang GFX IP if not already in GFXOFF.
    
    To help this problem, flush any delayed work for GFXOFF early in
    s2idle entry sequence to ensure that it's off when RLC is changed.
    
    commit 4b31b92b143f ("drm/amdgpu: complete gfxoff allow signal during
    suspend without delay") modified power gating flow so that if called
    in s0ix that it ensured that GFXOFF wasn't put in work queue but
    instead processed immediately.
    
    This is dead code due to commit 10cb67eb8a1b ("drm/amdgpu: skip
    CG/PG for gfx during S0ix") because GFXOFF will now not be explicitly
    called as part of the suspend entry code.  Remove that dead code.
    
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Tim Huang <tim.huang@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d578c919deb786b4d6ba8c7639255cb658731671
Author: Wander Lairson Costa <wander@redhat.com>
Date:   Mon Aug 14 13:51:19 2023 -0300

    drm/qxl: fix UAF on handle creation
    
    commit c611589b4259ed63b9b77be6872b1ce07ec0ac16 upstream.
    
    qxl_mode_dumb_create() dereferences the qobj returned by
    qxl_gem_object_create_with_handle(), but the handle is the only one
    holding a reference to it.
    
    A potential attacker could guess the returned handle value and closes it
    between the return of qxl_gem_object_create_with_handle() and the qobj
    usage, triggering a use-after-free scenario.
    
    Reproducer:
    
    int dri_fd =-1;
    struct drm_mode_create_dumb arg = {0};
    
    void gem_close(int handle);
    
    void* trigger(void* ptr)
    {
            int ret;
            arg.width = arg.height = 0x20;
            arg.bpp = 32;
            ret = ioctl(dri_fd, DRM_IOCTL_MODE_CREATE_DUMB, &arg);
            if(ret)
            {
                    perror("[*] DRM_IOCTL_MODE_CREATE_DUMB Failed");
                    exit(-1);
            }
            gem_close(arg.handle);
            while(1) {
                    struct drm_mode_create_dumb args = {0};
                    args.width = args.height = 0x20;
                    args.bpp = 32;
                    ret = ioctl(dri_fd, DRM_IOCTL_MODE_CREATE_DUMB, &args);
                    if (ret) {
                            perror("[*] DRM_IOCTL_MODE_CREATE_DUMB Failed");
                            exit(-1);
                    }
    
                    printf("[*] DRM_IOCTL_MODE_CREATE_DUMB created, %d\n", args.handle);
                    gem_close(args.handle);
            }
            return NULL;
    }
    
    void gem_close(int handle)
    {
            struct drm_gem_close args;
            args.handle = handle;
            int ret = ioctl(dri_fd, DRM_IOCTL_GEM_CLOSE, &args); // gem close handle
            if (!ret)
                    printf("gem close handle %d\n", args.handle);
    }
    
    int main(void)
    {
            dri_fd= open("/dev/dri/card0", O_RDWR);
            printf("fd:%d\n", dri_fd);
    
            if(dri_fd == -1)
                    return -1;
    
            pthread_t tid1;
    
            if(pthread_create(&tid1,NULL,trigger,NULL)){
                    perror("[*] thread_create tid1\n");
                    return -1;
            }
            while (1)
            {
                    gem_close(arg.handle);
            }
            return 0;
    }
    
    This is a KASAN report:
    
    ==================================================================
    BUG: KASAN: slab-use-after-free in qxl_mode_dumb_create+0x3c2/0x400 linux/drivers/gpu/drm/qxl/qxl_dumb.c:69
    Write of size 1 at addr ffff88801136c240 by task poc/515
    
    CPU: 1 PID: 515 Comm: poc Not tainted 6.3.0 #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.0-debian-1.16.0-4 04/01/2014
    Call Trace:
    <TASK>
    __dump_stack linux/lib/dump_stack.c:88
    dump_stack_lvl+0x48/0x70 linux/lib/dump_stack.c:106
    print_address_description linux/mm/kasan/report.c:319
    print_report+0xd2/0x660 linux/mm/kasan/report.c:430
    kasan_report+0xd2/0x110 linux/mm/kasan/report.c:536
    __asan_report_store1_noabort+0x17/0x30 linux/mm/kasan/report_generic.c:383
    qxl_mode_dumb_create+0x3c2/0x400 linux/drivers/gpu/drm/qxl/qxl_dumb.c:69
    drm_mode_create_dumb linux/drivers/gpu/drm/drm_dumb_buffers.c:96
    drm_mode_create_dumb_ioctl+0x1f5/0x2d0 linux/drivers/gpu/drm/drm_dumb_buffers.c:102
    drm_ioctl_kernel+0x21d/0x430 linux/drivers/gpu/drm/drm_ioctl.c:788
    drm_ioctl+0x56f/0xcc0 linux/drivers/gpu/drm/drm_ioctl.c:891
    vfs_ioctl linux/fs/ioctl.c:51
    __do_sys_ioctl linux/fs/ioctl.c:870
    __se_sys_ioctl linux/fs/ioctl.c:856
    __x64_sys_ioctl+0x13d/0x1c0 linux/fs/ioctl.c:856
    do_syscall_x64 linux/arch/x86/entry/common.c:50
    do_syscall_64+0x5b/0x90 linux/arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x72/0xdc linux/arch/x86/entry/entry_64.S:120
    RIP: 0033:0x7ff5004ff5f7
    Code: 00 00 00 48 8b 05 99 c8 0d 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 69 c8 0d 00 f7 d8 64 89 01 48
    
    RSP: 002b:00007ff500408ea8 EFLAGS: 00000286 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007ff5004ff5f7
    RDX: 00007ff500408ec0 RSI: 00000000c02064b2 RDI: 0000000000000003
    RBP: 00007ff500408ef0 R08: 0000000000000000 R09: 000000000000002a
    R10: 0000000000000000 R11: 0000000000000286 R12: 00007fff1c6cdafe
    R13: 00007fff1c6cdaff R14: 00007ff500408fc0 R15: 0000000000802000
    </TASK>
    
    Allocated by task 515:
    kasan_save_stack+0x38/0x70 linux/mm/kasan/common.c:45
    kasan_set_track+0x25/0x40 linux/mm/kasan/common.c:52
    kasan_save_alloc_info+0x1e/0x40 linux/mm/kasan/generic.c:510
    ____kasan_kmalloc linux/mm/kasan/common.c:374
    __kasan_kmalloc+0xc3/0xd0 linux/mm/kasan/common.c:383
    kasan_kmalloc linux/./include/linux/kasan.h:196
    kmalloc_trace+0x48/0xc0 linux/mm/slab_common.c:1066
    kmalloc linux/./include/linux/slab.h:580
    kzalloc linux/./include/linux/slab.h:720
    qxl_bo_create+0x11a/0x610 linux/drivers/gpu/drm/qxl/qxl_object.c:124
    qxl_gem_object_create+0xd9/0x360 linux/drivers/gpu/drm/qxl/qxl_gem.c:58
    qxl_gem_object_create_with_handle+0xa1/0x180 linux/drivers/gpu/drm/qxl/qxl_gem.c:89
    qxl_mode_dumb_create+0x1cd/0x400 linux/drivers/gpu/drm/qxl/qxl_dumb.c:63
    drm_mode_create_dumb linux/drivers/gpu/drm/drm_dumb_buffers.c:96
    drm_mode_create_dumb_ioctl+0x1f5/0x2d0 linux/drivers/gpu/drm/drm_dumb_buffers.c:102
    drm_ioctl_kernel+0x21d/0x430 linux/drivers/gpu/drm/drm_ioctl.c:788
    drm_ioctl+0x56f/0xcc0 linux/drivers/gpu/drm/drm_ioctl.c:891
    vfs_ioctl linux/fs/ioctl.c:51
    __do_sys_ioctl linux/fs/ioctl.c:870
    __se_sys_ioctl linux/fs/ioctl.c:856
    __x64_sys_ioctl+0x13d/0x1c0 linux/fs/ioctl.c:856
    do_syscall_x64 linux/arch/x86/entry/common.c:50
    do_syscall_64+0x5b/0x90 linux/arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x72/0xdc linux/arch/x86/entry/entry_64.S:120
    
    Freed by task 515:
    kasan_save_stack+0x38/0x70 linux/mm/kasan/common.c:45
    kasan_set_track+0x25/0x40 linux/mm/kasan/common.c:52
    kasan_save_free_info+0x2e/0x60 linux/mm/kasan/generic.c:521
    ____kasan_slab_free linux/mm/kasan/common.c:236
    ____kasan_slab_free+0x180/0x1f0 linux/mm/kasan/common.c:200
    __kasan_slab_free+0x12/0x30 linux/mm/kasan/common.c:244
    kasan_slab_free linux/./include/linux/kasan.h:162
    slab_free_hook linux/mm/slub.c:1781
    slab_free_freelist_hook+0xd2/0x1a0 linux/mm/slub.c:1807
    slab_free linux/mm/slub.c:3787
    __kmem_cache_free+0x196/0x2d0 linux/mm/slub.c:3800
    kfree+0x78/0x120 linux/mm/slab_common.c:1019
    qxl_ttm_bo_destroy+0x140/0x1a0 linux/drivers/gpu/drm/qxl/qxl_object.c:49
    ttm_bo_release+0x678/0xa30 linux/drivers/gpu/drm/ttm/ttm_bo.c:381
    kref_put linux/./include/linux/kref.h:65
    ttm_bo_put+0x50/0x80 linux/drivers/gpu/drm/ttm/ttm_bo.c:393
    qxl_gem_object_free+0x3e/0x60 linux/drivers/gpu/drm/qxl/qxl_gem.c:42
    drm_gem_object_free+0x5c/0x90 linux/drivers/gpu/drm/drm_gem.c:974
    kref_put linux/./include/linux/kref.h:65
    __drm_gem_object_put linux/./include/drm/drm_gem.h:431
    drm_gem_object_put linux/./include/drm/drm_gem.h:444
    qxl_gem_object_create_with_handle+0x151/0x180 linux/drivers/gpu/drm/qxl/qxl_gem.c:100
    qxl_mode_dumb_create+0x1cd/0x400 linux/drivers/gpu/drm/qxl/qxl_dumb.c:63
    drm_mode_create_dumb linux/drivers/gpu/drm/drm_dumb_buffers.c:96
    drm_mode_create_dumb_ioctl+0x1f5/0x2d0 linux/drivers/gpu/drm/drm_dumb_buffers.c:102
    drm_ioctl_kernel+0x21d/0x430 linux/drivers/gpu/drm/drm_ioctl.c:788
    drm_ioctl+0x56f/0xcc0 linux/drivers/gpu/drm/drm_ioctl.c:891
    vfs_ioctl linux/fs/ioctl.c:51
    __do_sys_ioctl linux/fs/ioctl.c:870
    __se_sys_ioctl linux/fs/ioctl.c:856
    __x64_sys_ioctl+0x13d/0x1c0 linux/fs/ioctl.c:856
    do_syscall_x64 linux/arch/x86/entry/common.c:50
    do_syscall_64+0x5b/0x90 linux/arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x72/0xdc linux/arch/x86/entry/entry_64.S:120
    
    The buggy address belongs to the object at ffff88801136c000
    which belongs to the cache kmalloc-1k of size 1024
    The buggy address is located 576 bytes inside of
    freed 1024-byte region [ffff88801136c000, ffff88801136c400)
    
    The buggy address belongs to the physical page:
    page:0000000089fc329b refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x11368
    head:0000000089fc329b order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0
    flags: 0xfffffc0010200(slab|head|node=0|zone=1|lastcpupid=0x1fffff)
    raw: 000fffffc0010200 ffff888007841dc0 dead000000000122 0000000000000000
    raw: 0000000000000000 0000000080100010 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
    ffff88801136c100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ffff88801136c180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88801136c200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ^
    ffff88801136c280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ffff88801136c300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    Disabling lock debugging due to kernel taint
    
    Instead of returning a weak reference to the qxl_bo object, return the
    created drm_gem_object and let the caller decrement the reference count
    when it no longer needs it. As a convenience, if the caller is not
    interested in the gobj object, it can pass NULL to the parameter and the
    reference counting is descremented internally.
    
    The bug and the reproducer were originally found by the Zero Day Initiative project (ZDI-CAN-20940).
    
    Link: https://www.zerodayinitiative.com/
    Signed-off-by: Wander Lairson Costa <wander@redhat.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230814165119.90847-1-wander@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff09f9e671ffba2e3b13627ec2b942a099811236
Author: Yibin Ding <yibin.ding@unisoc.com>
Date:   Wed Aug 2 10:30:23 2023 +0800

    mmc: block: Fix in_flight[issue_type] value error
    
    commit 4b430d4ac99750ee2ae2f893f1055c7af1ec3dc5 upstream.
    
    For a completed request, after the mmc_blk_mq_complete_rq(mq, req)
    function is executed, the bitmap_tags corresponding to the
    request will be cleared, that is, the request will be regarded as
    idle. If the request is acquired by a different type of process at
    this time, the issue_type of the request may change. It further
    caused the value of mq->in_flight[issue_type] to be abnormal,
    and a large number of requests could not be sent.
    
    p1:                                           p2:
    mmc_blk_mq_complete_rq
      blk_mq_free_request
                                                  blk_mq_get_request
                                                    blk_mq_rq_ctx_init
    mmc_blk_mq_dec_in_flight
      mmc_issue_type(mq, req)
    
    This strategy can ensure the consistency of issue_type
    before and after executing mmc_blk_mq_complete_rq.
    
    Fixes: 81196976ed94 ("mmc: block: Add blk-mq support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Yibin Ding <yibin.ding@unisoc.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20230802023023.1318134-1-yunlong.xing@unisoc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b803fedb6e509afe50dbe777afd47ae05c6bde8b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Aug 7 20:44:42 2023 +0800

    mmc: wbsd: fix double mmc_free_host() in wbsd_init()
    
    commit d83035433701919ac6db15f7737cbf554c36c1a6 upstream.
    
    mmc_free_host() has already be called in wbsd_free_mmc(),
    remove the mmc_free_host() in error path in wbsd_init().
    
    Fixes: dc5b9b50fc9d ("mmc: wbsd: fix return value check of mmc_add_host()")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230807124443.3431366-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 961f7ce16223aee2db583a43877d84e6d1f2b857
Author: Russell Harmon via samba-technical <samba-technical@lists.samba.org>
Date:   Thu Aug 10 00:19:22 2023 -0700

    cifs: Release folio lock on fscache read hit.
    
    commit 69513dd669e243928f7450893190915a88f84a2b upstream.
    
    Under the current code, when cifs_readpage_worker is called, the call
    contract is that the callee should unlock the page. This is documented
    in the read_folio section of Documentation/filesystems/vfs.rst as:
    
    > The filesystem should unlock the folio once the read has completed,
    > whether it was successful or not.
    
    Without this change, when fscache is in use and cache hit occurs during
    a read, the page lock is leaked, producing the following stack on
    subsequent reads (via mmap) to the page:
    
    $ cat /proc/3890/task/12864/stack
    [<0>] folio_wait_bit_common+0x124/0x350
    [<0>] filemap_read_folio+0xad/0xf0
    [<0>] filemap_fault+0x8b1/0xab0
    [<0>] __do_fault+0x39/0x150
    [<0>] do_fault+0x25c/0x3e0
    [<0>] __handle_mm_fault+0x6ca/0xc70
    [<0>] handle_mm_fault+0xe9/0x350
    [<0>] do_user_addr_fault+0x225/0x6c0
    [<0>] exc_page_fault+0x84/0x1b0
    [<0>] asm_exc_page_fault+0x27/0x30
    
    This requires a reboot to resolve; it is a deadlock.
    
    Note however that the call to cifs_readpage_from_fscache does mark the
    page clean, but does not free the folio lock. This happens in
    __cifs_readpage_from_fscache on success. Releasing the lock at that
    point however is not appropriate as cifs_readahead also calls
    cifs_readpage_from_fscache and *does* unconditionally release the lock
    after its return. This change therefore effectively makes
    cifs_readpage_worker work like cifs_readahead.
    
    Signed-off-by: Russell Harmon <russ@har.mn>
    Acked-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Reviewed-by: David Howells <dhowells@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc3f194f46e72c83b4357b2a50dbd1de676c8727
Author: dengxiang <dengxiang@nfschina.com>
Date:   Thu Aug 3 10:44:37 2023 +0800

    ALSA: usb-audio: Add support for Mythware XA001AU capture and playback interfaces.
    
    commit 788449ae57f4273111b779bbcaad552b67f517d5 upstream.
    
    This patch adds a USB quirk for Mythware XA001AU USB interface.
    
    Signed-off-by: dengxiang <dengxiang@nfschina.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230803024437.370069-1-dengxiang@nfschina.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18e27df4f2b4e257c317ba8076f31a888f6cc64b
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Aug 4 16:15:51 2023 +0300

    serial: 8250: Fix oops for port->pm on uart_change_pm()
    
    [ Upstream commit dfe2aeb226fd5e19b0ee795f4f6ed8bc494c1534 ]
    
    Unloading a hardware specific 8250 driver can produce error "Unable to
    handle kernel paging request at virtual address" about ten seconds after
    unloading the driver. This happens on uart_hangup() calling
    uart_change_pm().
    
    Turns out commit 04e82793f068 ("serial: 8250: Reinit port->pm on port
    specific driver unbind") was only a partial fix. If the hardware specific
    driver has initialized port->pm function, we need to clear port->pm too.
    Just reinitializing port->ops does not do this. Otherwise serial8250_pm()
    will call port->pm() instead of serial8250_do_pm().
    
    Fixes: 04e82793f068 ("serial: 8250: Reinit port->pm on port specific driver unbind")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230804131553.52927-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9b8ee715dbcaa1da94d1c0df2c52d587f46dec2
Author: Alexandre Ghiti <alexghiti@rivosinc.com>
Date:   Fri Aug 11 17:06:04 2023 +0200

    riscv: uaccess: Return the number of bytes effectively not copied
    
    [ Upstream commit 4b05b993900dd3eba0fc83ef5c5ddc7d65d786c6 ]
    
    It was reported that the riscv kernel hangs while executing the test
    in [1].
    
    Indeed, the test hangs when trying to write a buffer to a file. The
    problem is that the riscv implementation of raw_copy_from_user() does not
    return the correct number of bytes not written when an exception happens
    and is fixed up, instead it always returns the initial size to copy,
    even if some bytes were actually copied.
    
    generic_perform_write() pre-faults the user pages and bails out if nothing
    can be written, otherwise it will access the userspace buffer: here the
    riscv implementation keeps returning it was not able to copy any byte
    though the pre-faulting indicates otherwise. So generic_perform_write()
    keeps retrying to access the user memory and ends up in an infinite
    loop.
    
    Note that before the commit mentioned in [1] that introduced this
    regression, it worked because generic_perform_write() would bail out if
    only one byte could not be written.
    
    So fix this by returning the number of bytes effectively not written in
    __asm_copy_[to|from]_user() and __clear_user(), as it is expected.
    
    Link: https://lore.kernel.org/linux-riscv/20230309151841.bomov6hq3ybyp42a@debian/ [1]
    Fixes: ebcbd75e3962 ("riscv: Fix the bug in memory access fixup code")
    Reported-by: Bo YU <tsu.yubo@gmail.com>
    Closes: https://lore.kernel.org/linux-riscv/20230309151841.bomov6hq3ybyp42a@debian/#t
    Reported-by: Aurelien Jarno <aurelien@aurel32.net>
    Closes: https://lore.kernel.org/linux-riscv/ZNOnCakhwIeue3yr@aurel32.net/
    Signed-off-by: Alexandre Ghiti <alexghiti@rivosinc.com>
    Reviewed-by: Björn Töpel <bjorn@rivosinc.com>
    Tested-by: Aurelien Jarno <aurelien@aurel32.net>
    Reviewed-by: Aurelien Jarno <aurelien@aurel32.net>
    Link: https://lore.kernel.org/r/20230811150604.1621784-1-alexghiti@rivosinc.com
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2a331abcb03149f1365e6871e76878423e5041b
Author: Kailang Yang <kailang@realtek.com>
Date:   Tue Aug 15 15:54:23 2023 +0800

    ALSA: hda/realtek - Remodified 3k pull low procedure
    
    [ Upstream commit 46cdff2369cbdf8d78081a22526e77bd1323f563 ]
    
    Set spec->en_3kpull_low default to true.
    Then fillback ALC236 and ALC257 to false.
    
    Additional note: this addresses a regression caused by the previous
    fix 69ea4c9d02b7 ("ALSA: hda/realtek - remove 3k pull low procedure").
    The previous workaround was applied too widely without necessity,
    which resulted in the pop noise at PM again.  This patch corrects the
    condition and restores the old behavior for the devices that don't
    suffer from the original problem.
    
    Fixes: 69ea4c9d02b7 ("ALSA: hda/realtek - remove 3k pull low procedure")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217732
    Link: https://lore.kernel.org/r/01e212a538fc407ca6edd10b81ff7b05@realtek.com
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfb9676ed25be25ca7cd198d0f0e093b76b7bc7f
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Aug 10 22:01:04 2023 +0930

    soc: aspeed: socinfo: Add kfree for kstrdup
    
    [ Upstream commit 6e6d847a8ce18ab2fbec4f579f682486a82d2c6b ]
    
    Add kfree() in the later error handling in order to avoid memory leak.
    
    Fixes: e0218dca5787 ("soc: aspeed: Add soc info driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Link: https://lore.kernel.org/r/20230707021625.7727-1-jiasheng@iscas.ac.cn
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Link: https://lore.kernel.org/r/20230810123104.231167-1-joel@jms.id.au
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5ac7522a8db4afd87acaeb6bc2664bfd917161f
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Aug 9 19:19:31 2023 +0200

    ASoC: meson: axg-tdm-formatter: fix channel slot allocation
    
    [ Upstream commit c1f848f12103920ca165758aedb1c10904e193e1 ]
    
    When the tdm lane mask is computed, the driver currently fills the 1st lane
    before moving on to the next. If the stream has less channels than the
    lanes can accommodate, slots will be disabled on the last lanes.
    
    Unfortunately, the HW distribute channels in a different way. It distribute
    channels in pair on each lanes before moving on the next slots.
    
    This difference leads to problems if a device has an interface with more
    than 1 lane and with more than 2 slots per lane.
    
    For example: a playback interface with 2 lanes and 4 slots each (total 8
    slots - zero based numbering)
    - Playing a 8ch stream:
      - All slots activated by the driver
      - channel #2 will be played on lane #1 - slot #0 following HW placement
    - Playing a 4ch stream:
      - Lane #1 disabled by the driver
      - channel #2 will be played on lane #0 - slot #2
    
    This behaviour is obviously not desirable.
    
    Change the way slots are activated on the TDM lanes to follow what the HW
    does and make sure each channel always get mapped to the same slot/lane.
    
    Fixes: 1a11d88f499c ("ASoC: meson: add tdm formatter base driver")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20230809171931.1244502-1-jbrunet@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd346ef1cd2d3ccf576133a406c132597760a66d
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Tue Aug 1 23:59:11 2023 +0800

    ASoC: rt5665: add missed regulator_bulk_disable
    
    [ Upstream commit c163108e706909570f8aa9aa5bcf6806e2b4c98c ]
    
    The driver forgets to call regulator_bulk_disable()
    
    Add the missed call to fix it.
    
    Fixes: 33ada14a26c8 ("ASoC: add rt5665 codec driver")
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Link: https://lore.kernel.org/r/tencent_A560D01E3E0A00A85A12F137E4B5205B3508@qq.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e878458d820cb4d4c4fa5fd709beaa2e124af1f4
Author: Xiaolei Wang <xiaolei.wang@windriver.com>
Date:   Wed Jul 26 15:57:47 2023 +0800

    ARM: dts: imx: Set default tuning step for imx6sx usdhc
    
    [ Upstream commit 0a2b96e42a0284c4fc03022236f656a085ca714a ]
    
    If the tuning step is not set, the tuning step is set to 1.
    For some sd cards, the following Tuning timeout will occur.
    
    Tuning failed, falling back to fixed sampling clock
    
    So set the default tuning step. This refers to the NXP vendor's
    commit below:
    
    https://github.com/nxp-imx/linux-imx/blob/lf-6.1.y/
    arch/arm/boot/dts/imx6sx.dtsi#L1108-L1109
    
    Fixes: 1e336aa0c025 ("mmc: sdhci-esdhc-imx: correct the tuning start tap and step setting")
    Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 430c29a54e4a2c5d4e73a9dc1a818cb8ceebefbc
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Tue Jun 13 16:12:24 2023 +0300

    arm64: dts: qcom: qrb5165-rb5: fix thermal zone conflict
    
    [ Upstream commit 798f1df86e5709b7b6aedf493cc04c7fedbf544a ]
    
    The commit 3a786086c6f8 ("arm64: dts: qcom: Add missing "-thermal"
    suffix for thermal zones") renamed the thermal zone in the pm8150l.dtsi
    file to comply with the schema. However this resulted in a clash with
    the RB5 board file, which already contained the pm8150l-thermal zone for
    the on-board sensor. This resulted in the board file definition
    overriding the thermal zone defined in the PMIC include file (and thus
    the on-die PMIC temp alarm was not probing at all).
    
    Rename the thermal zone in qcom/qrb5165-rb5.dts to remove this override.
    
    Fixes: 3a786086c6f8 ("arm64: dts: qcom: Add missing "-thermal" suffix for thermal zones")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Link: https://lore.kernel.org/r/20230613131224.666668-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03522d73a4989a2757c42d7ae5e97d787e35a4c5
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Jun 14 10:18:23 2023 +0300

    bus: ti-sysc: Flush posted write on enable before reset
    
    [ Upstream commit 34539b442b3bc7d5bf10164750302b60b91f18a7 ]
    
    The am335x devices started producing boot errors for resetting musb module
    in because of subtle timing changes:
    
    Unhandled fault: external abort on non-linefetch (0x1008)
    ...
    sysc_poll_reset_sysconfig from sysc_reset+0x109/0x12
    sysc_reset from sysc_probe+0xa99/0xeb0
    ...
    
    The fix is to flush posted write after enable before reset during
    probe. Note that some devices also need to specify the delay after enable
    with ti,sysc-delay-us, but this is not needed for musb on am335x based on
    my tests.
    
    Reported-by: kernelci.org bot <bot@kernelci.org>
    Closes: https://storage.kernelci.org/next/master/next-20230614/arm/multi_v7_defconfig+CONFIG_THUMB2_KERNEL=y/gcc-10/lab-cip/baseline-beaglebone-black.html
    Fixes: 596e7955692b ("bus: ti-sysc: Add support for software reset")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 578371ce0d7f67ea1e65817c04478aaab0d36b68
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 14:21:58 2023 +0000

    net: do not allow gso_size to be set to GSO_BY_FRAGS
    
    [ Upstream commit b616be6b97688f2f2bd7c4a47ab32f27f94fb2a9 ]
    
    One missing check in virtio_net_hdr_to_skb() allowed
    syzbot to crash kernels again [1]
    
    Do not allow gso_size to be set to GSO_BY_FRAGS (0xffff),
    because this magic value is used by the kernel.
    
    [1]
    general protection fault, probably for non-canonical address 0xdffffc000000000e: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000070-0x0000000000000077]
    CPU: 0 PID: 5039 Comm: syz-executor401 Not tainted 6.5.0-rc5-next-20230809-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023
    RIP: 0010:skb_segment+0x1a52/0x3ef0 net/core/skbuff.c:4500
    Code: 00 00 00 e9 ab eb ff ff e8 6b 96 5d f9 48 8b 84 24 00 01 00 00 48 8d 78 70 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 84 c0 74 08 3c 03 0f 8e ea 21 00 00 48 8b 84 24 00 01
    RSP: 0018:ffffc90003d3f1c8 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 000000000001fffe RCX: 0000000000000000
    RDX: 000000000000000e RSI: ffffffff882a3115 RDI: 0000000000000070
    RBP: ffffc90003d3f378 R08: 0000000000000005 R09: 000000000000ffff
    R10: 000000000000ffff R11: 5ee4a93e456187d6 R12: 000000000001ffc6
    R13: dffffc0000000000 R14: 0000000000000008 R15: 000000000000ffff
    FS: 00005555563f2380(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020020000 CR3: 000000001626d000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    udp6_ufo_fragment+0x9d2/0xd50 net/ipv6/udp_offload.c:109
    ipv6_gso_segment+0x5c4/0x17b0 net/ipv6/ip6_offload.c:120
    skb_mac_gso_segment+0x292/0x610 net/core/gso.c:53
    __skb_gso_segment+0x339/0x710 net/core/gso.c:124
    skb_gso_segment include/net/gso.h:83 [inline]
    validate_xmit_skb+0x3a5/0xf10 net/core/dev.c:3625
    __dev_queue_xmit+0x8f0/0x3d60 net/core/dev.c:4329
    dev_queue_xmit include/linux/netdevice.h:3082 [inline]
    packet_xmit+0x257/0x380 net/packet/af_packet.c:276
    packet_snd net/packet/af_packet.c:3087 [inline]
    packet_sendmsg+0x24c7/0x5570 net/packet/af_packet.c:3119
    sock_sendmsg_nosec net/socket.c:727 [inline]
    sock_sendmsg+0xd9/0x180 net/socket.c:750
    ____sys_sendmsg+0x6ac/0x940 net/socket.c:2496
    ___sys_sendmsg+0x135/0x1d0 net/socket.c:2550
    __sys_sendmsg+0x117/0x1e0 net/socket.c:2579
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7ff27cdb34d9
    
    Fixes: 3953c46c3ac7 ("sk_buff: allow segmenting based on frag sizes")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Link: https://lore.kernel.org/r/20230816142158.1779798-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fc4fd3f3eb8056859dd396e7de349b4da560f0e
Author: Abel Wu <wuyun.abel@bytedance.com>
Date:   Wed Aug 16 17:12:22 2023 +0800

    sock: Fix misuse of sk_under_memory_pressure()
    
    [ Upstream commit 2d0c88e84e483982067a82073f6125490ddf3614 ]
    
    The status of global socket memory pressure is updated when:
    
      a) __sk_mem_raise_allocated():
    
            enter: sk_memory_allocated(sk) >  sysctl_mem[1]
            leave: sk_memory_allocated(sk) <= sysctl_mem[0]
    
      b) __sk_mem_reduce_allocated():
    
            leave: sk_under_memory_pressure(sk) &&
                    sk_memory_allocated(sk) < sysctl_mem[0]
    
    So the conditions of leaving global pressure are inconstant, which
    may lead to the situation that one pressured net-memcg prevents the
    global pressure from being cleared when there is indeed no global
    pressure, thus the global constrains are still in effect unexpectedly
    on the other sockets.
    
    This patch fixes this by ignoring the net-memcg's pressure when
    deciding whether should leave global memory pressure.
    
    Fixes: e1aab161e013 ("socket: initial cgroup code.")
    Signed-off-by: Abel Wu <wuyun.abel@bytedance.com>
    Acked-by: Shakeel Butt <shakeelb@google.com>
    Link: https://lore.kernel.org/r/20230816091226.1542-1-wuyun.abel@bytedance.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc3d82d295d1f65543d322af84a88f898fbade87
Author: Alfred Lee <l00g33k@gmail.com>
Date:   Mon Aug 14 17:13:23 2023 -0700

    net: dsa: mv88e6xxx: Wait for EEPROM done before HW reset
    
    [ Upstream commit 23d775f12dcd23d052a4927195f15e970e27ab26 ]
    
    If the switch is reset during active EEPROM transactions, as in
    just after an SoC reset after power up, the I2C bus transaction
    may be cut short leaving the EEPROM internal I2C state machine
    in the wrong state.  When the switch is reset again, the bad
    state machine state may result in data being read from the wrong
    memory location causing the switch to enter unexpected mode
    rendering it inoperational.
    
    Fixes: a3dcb3e7e70c ("net: dsa: mv88e6xxx: Wait for EEPROM done after HW reset")
    Signed-off-by: Alfred Lee <l00g33k@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20230815001323.24739-1-l00g33k@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f11c2802e143b949e6b4485a494207e5be98cf40
Author: Andrii Staikov <andrii.staikov@intel.com>
Date:   Wed Aug 2 09:47:32 2023 +0200

    i40e: fix misleading debug logs
    
    [ Upstream commit 2f2beb8874cb0844e84ad26e990f05f4f13ff63f ]
    
    Change "write" into the actual "read" word.
    Change parameters description.
    
    Fixes: 7073f46e443e ("i40e: Add AQ commands for NVM Update for X722")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Signed-off-by: Andrii Staikov <andrii.staikov@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ba2b936f3e1e6325d70e4e8de71ad905477478a
Author: Piotr Gardocki <piotrx.gardocki@intel.com>
Date:   Mon Aug 7 16:46:04 2023 +0200

    iavf: fix FDIR rule fields masks validation
    
    [ Upstream commit 751969e5b1196821ef78f0aa664a8a97c92c9057 ]
    
    Return an error if a field's mask is neither full nor empty. When a mask
    is only partial the field is not being used for rule programming but it
    gives a wrong impression it is used. Fix by returning an error on any
    partial mask to make it clear they are not supported.
    The ip_ver assignment is moved earlier in code to allow using it in
    iavf_validate_fdir_fltr_masks.
    
    Fixes: 527691bf0682 ("iavf: Support IPv4 Flow Director filters")
    Fixes: e90cbc257a6f ("iavf: Support IPv6 Flow Director filters")
    Signed-off-by: Piotr Gardocki <piotrx.gardocki@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae6834689fd69b6ee068d6f124a3b14714e0fc3b
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Mon Aug 14 11:23:01 2023 +0800

    team: Fix incorrect deletion of ETH_P_8021AD protocol vid from slaves
    
    [ Upstream commit dafcbce07136d799edc4c67f04f9fd69ff1eac1f ]
    
    Similar to commit 01f4fd270870 ("bonding: Fix incorrect deletion of
    ETH_P_8021AD protocol vid from slaves"), we can trigger BUG_ON(!vlan_info)
    in unregister_vlan_dev() with the following testcase:
    
      # ip netns add ns1
      # ip netns exec ns1 ip link add team1 type team
      # ip netns exec ns1 ip link add team_slave type veth peer veth2
      # ip netns exec ns1 ip link set team_slave master team1
      # ip netns exec ns1 ip link add link team_slave name team_slave.10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link add link team1 name team1.10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link set team_slave nomaster
      # ip netns del ns1
    
    Add S-VLAN tag related features support to team driver. So the team driver
    will always propagate the VLAN info to its slaves.
    
    Fixes: 8ad227ff89a7 ("net: vlan: add 802.1ad support")
    Suggested-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230814032301.2804971-1-william.xuanziyang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ffbc341cfaea151e4d9b0187e65aea51d7011f6
Author: Justin Chen <justin.chen@broadcom.com>
Date:   Sat Aug 12 21:41:47 2023 -0700

    net: phy: broadcom: stub c45 read/write for 54810
    
    [ Upstream commit 096516d092d54604d590827d05b1022c8f326639 ]
    
    The 54810 does not support c45. The mmd_phy_indirect accesses return
    arbirtary values leading to odd behavior like saying it supports EEE
    when it doesn't. We also see that reading/writing these non-existent
    MMD registers leads to phy instability in some cases.
    
    Fixes: b14995ac2527 ("net: phy: broadcom: Add BCM54810 PHY entry")
    Signed-off-by: Justin Chen <justin.chen@broadcom.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/1691901708-28650-1-git-send-email-justin.chen@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf221e5e4b19c5b463af94281cb3dc4f8c792741
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Aug 15 15:39:02 2023 +0200

    netfilter: nft_dynset: disallow object maps
    
    [ Upstream commit 23185c6aed1ffb8fc44087880ba2767aba493779 ]
    
    Do not allow to insert elements from datapath to objects maps.
    
    Fixes: 8aeff920dcc9 ("netfilter: nf_tables: add stateful object reference to set elements")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9177869b85ddd9184d4f5e09eaa3d2d8547089af
Author: Sishuai Gong <sishuai.system@gmail.com>
Date:   Thu Aug 10 15:12:42 2023 -0400

    ipvs: fix racy memcpy in proc_do_sync_threshold
    
    [ Upstream commit 5310760af1d4fbea1452bfc77db5f9a680f7ae47 ]
    
    When two threads run proc_do_sync_threshold() in parallel,
    data races could happen between the two memcpy():
    
    Thread-1                        Thread-2
    memcpy(val, valp, sizeof(val));
                                    memcpy(valp, val, sizeof(val));
    
    This race might mess up the (struct ctl_table *) table->data,
    so we add a mutex lock to serialize them.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/netdev/B6988E90-0A1E-4B85-BF26-2DAF6D482433@gmail.com/
    Signed-off-by: Sishuai Gong <sishuai.system@gmail.com>
    Acked-by: Simon Horman <horms@kernel.org>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1adaec4758d1cefbf348a291ad9b752aaa10f8d3
Author: Florian Westphal <fw@strlen.de>
Date:   Sat Aug 12 13:05:16 2023 +0200

    netfilter: nf_tables: deactivate catchall elements in next generation
    
    [ Upstream commit 90e5b3462efa37b8bba82d7c4e63683856e188af ]
    
    When flushing, individual set elements are disabled in the next
    generation via the ->flush callback.
    
    Catchall elements are not disabled.  This is incorrect and may lead to
    double-deactivations of catchall elements which then results in memory
    leaks:
    
    WARNING: CPU: 1 PID: 3300 at include/net/netfilter/nf_tables.h:1172 nft_map_deactivate+0x549/0x730
    CPU: 1 PID: 3300 Comm: nft Not tainted 6.5.0-rc5+ #60
    RIP: 0010:nft_map_deactivate+0x549/0x730
     [..]
     ? nft_map_deactivate+0x549/0x730
     nf_tables_delset+0xb66/0xeb0
    
    (the warn is due to nft_use_dec() detecting underflow).
    
    Fixes: aaa31047a6d2 ("netfilter: nftables: add catch-all set element support")
    Reported-by: lonial con <kongln9170@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82109740d6105c6fc5d354247e4c3cb360b5c3a9
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Aug 8 20:40:17 2023 +0200

    netfilter: nf_tables: fix false-positive lockdep splat
    
    [ Upstream commit b9f052dc68f69dac89fe1e24693354c033daa091 ]
    
    ->abort invocation may cause splat on debug kernels:
    
    WARNING: suspicious RCU usage
    net/netfilter/nft_set_pipapo.c:1697 suspicious rcu_dereference_check() usage!
    [..]
    rcu_scheduler_active = 2, debug_locks = 1
    1 lock held by nft/133554: [..] (nft_net->commit_mutex){+.+.}-{3:3}, at: nf_tables_valid_genid
    [..]
     lockdep_rcu_suspicious+0x1ad/0x260
     nft_pipapo_abort+0x145/0x180
     __nf_tables_abort+0x5359/0x63d0
     nf_tables_abort+0x24/0x40
     nfnetlink_rcv+0x1a0a/0x22c0
     netlink_unicast+0x73c/0x900
     netlink_sendmsg+0x7f0/0xc20
     ____sys_sendmsg+0x48d/0x760
    
    Transaction mutex is held, so parallel updates are not possible.
    Switch to _protected and check mutex is held for lockdep enabled builds.
    
    Fixes: 212ed75dc5fb ("netfilter: nf_tables: integrate pipapo into commit protocol")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2f6d73395cbac48977f209cf36de9214152b118
Author: Luca Ceresoli <luca.ceresoli@bootlin.com>
Date:   Fri Aug 4 17:12:39 2023 +0200

    drm/panel: simple: Fix AUO G121EAN01 panel timings according to the docs
    
    [ Upstream commit e8470c0a7bcaa82f78ad34282d662dd7bd9630c2 ]
    
    Commit 03e909acd95a ("drm/panel: simple: Add support for AUO G121EAN01.4
    panel") added support for this panel model, but the timings it implements
    are very different from what the datasheet describes. I checked both the
    G121EAN01.0 datasheet from [0] and the G121EAN01.4 one from [1] and they
    all have the same timings: for example the LVDS clock typical value is 74.4
    MHz, not 66.7 MHz as implemented.
    
    Replace the timings with the ones from the documentation. These timings
    have been tested and the clock frequencies verified with an oscilloscope to
    ensure they are correct.
    
    Also use struct display_timing instead of struct drm_display_mode in order
    to also specify the minimum and maximum values.
    
    [0] https://embedded.avnet.com/product/g121ean01-0/
    [1] https://embedded.avnet.com/product/g121ean01-4/
    
    Fixes: 03e909acd95a ("drm/panel: simple: Add support for AUO G121EAN01.4 panel")
    Signed-off-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230804151239.835216-1-luca.ceresoli@bootlin.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7207ee323afa9c69336689f08fe024bda4dbb8cf
Author: Petr Machata <petrm@nvidia.com>
Date:   Fri Aug 11 17:59:27 2023 +0200

    selftests: mirror_gre_changes: Tighten up the TTL test match
    
    [ Upstream commit 855067defa36b1f9effad8c219d9a85b655cf500 ]
    
    This test verifies whether the encapsulated packets have the correct
    configured TTL. It does so by sending ICMP packets through the test
    topology and mirroring them to a gretap netdevice. On a busy host
    however, more than just the test ICMP packets may end up flowing
    through the topology, get mirrored, and counted. This leads to
    potential spurious failures as the test observes much more mirrored
    packets than the sent test packets, and assumes a bug.
    
    Fix this by tightening up the mirror action match. Change it from
    matchall to a flower classifier matching on ICMP packets specifically.
    
    Fixes: 45315673e0c5 ("selftests: forwarding: Test changes in mirror-to-gretap")
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2a6ffe3f1a3e53e0572cf050cb09f314e2fca54
Author: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
Date:   Fri Aug 11 11:26:30 2023 +0100

    net: phy: fix IRQ-based wake-on-lan over hibernate / power off
    
    [ Upstream commit cc941e548bffc01b5816b4edc5cb432a137a58b3 ]
    
    Uwe reports:
    "Most PHYs signal WoL using an interrupt. So disabling interrupts [at
    shutdown] breaks WoL at least on PHYs covered by the marvell driver."
    
    Discussing with Ioana, the problem which was trying to be solved was:
    "The board in question is a LS1021ATSN which has two AR8031 PHYs that
    share an interrupt line. In case only one of the PHYs is probed and
    there are pending interrupts on the PHY#2 an IRQ storm will happen
    since there is no entity to clear the interrupt from PHY#2's registers.
    PHY#1's driver will get stuck in .handle_interrupt() indefinitely."
    
    Further confirmation that "the two AR8031 PHYs are on the same MDIO
    bus."
    
    With WoL using interrupts to wake the system, in such a case, the
    system will begin booting with an asserted interrupt. Thus, we need to
    cope with an interrupt asserted during boot.
    
    Solve this instead by disabling interrupts during PHY probe. This will
    ensure in Ioana's situation that both PHYs of the same type sharing an
    interrupt line on a common MDIO bus will have their interrupt outputs
    disabled when the driver probes the device, but before we hook in any
    interrupt handlers - thus avoiding the interrupt storm.
    
    A better fix would be for platform firmware to disable the interrupting
    devices at source during boot, before control is handed to the kernel.
    
    Fixes: e2f016cf7751 ("net: phy: add a shutdown procedure")
    Link: 20230804071757.383971-1-u.kleine-koenig@pengutronix.de
    Reported-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e5e967348caead2e03f047af28a4bcd79b80b9c
Author: Lin Ma <linma@zju.edu.cn>
Date:   Sun Jul 23 15:41:10 2023 +0800

    xfrm: add forgotten nla_policy for XFRMA_MTIMER_THRESH
    
    [ Upstream commit 5e2424708da7207087934c5c75211e8584d553a0 ]
    
    The previous commit 4e484b3e969b ("xfrm: rate limit SA mapping change
    message to user space") added one additional attribute named
    XFRMA_MTIMER_THRESH and described its type at compat_policy
    (net/xfrm/xfrm_compat.c).
    
    However, the author forgot to also describe the nla_policy at
    xfrma_policy (net/xfrm/xfrm_user.c). Hence, this suppose NLA_U32 (4
    bytes) value can be faked as empty (0 bytes) by a malicious user, which
    leads to 4 bytes overflow read and heap information leak when parsing
    nlattrs.
    
    To exploit this, one malicious user can spray the SLUB objects and then
    leverage this 4 bytes OOB read to leak the heap data into
    x->mapping_maxage (see xfrm_update_ae_params(...)), and leak it to
    userspace via copy_to_user_state_extra(...).
    
    The above bug is assigned CVE-2023-3773. To fix it, this commit just
    completes the nla_policy description for XFRMA_MTIMER_THRESH, which
    enforces the length check and avoids such OOB read.
    
    Fixes: 4e484b3e969b ("xfrm: rate limit SA mapping change message to user space")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 075448a2eb753f813fe873cfa52853e9fef8eedb
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Jul 21 22:51:03 2023 +0800

    xfrm: add NULL check in xfrm_update_ae_params
    
    [ Upstream commit 00374d9b6d9f932802b55181be9831aa948e5b7c ]
    
    Normally, x->replay_esn and x->preplay_esn should be allocated at
    xfrm_alloc_replay_state_esn(...) in xfrm_state_construct(...), hence the
    xfrm_update_ae_params(...) is okay to update them. However, the current
    implementation of xfrm_new_ae(...) allows a malicious user to directly
    dereference a NULL pointer and crash the kernel like below.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    PGD 8253067 P4D 8253067 PUD 8e0e067 PMD 0
    Oops: 0002 [#1] PREEMPT SMP KASAN NOPTI
    CPU: 0 PID: 98 Comm: poc.npd Not tainted 6.4.0-rc7-00072-gdad9774deaf1 #8
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.o4
    RIP: 0010:memcpy_orig+0xad/0x140
    Code: e8 4c 89 5f e0 48 8d 7f e0 73 d2 83 c2 20 48 29 d6 48 29 d7 83 fa 10 72 34 4c 8b 06 4c 8b 4e 08 c
    RSP: 0018:ffff888008f57658 EFLAGS: 00000202
    RAX: 0000000000000000 RBX: ffff888008bd0000 RCX: ffffffff8238e571
    RDX: 0000000000000018 RSI: ffff888007f64844 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff888008f57818
    R13: ffff888007f64aa4 R14: 0000000000000000 R15: 0000000000000000
    FS:  00000000014013c0(0000) GS:ffff88806d600000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000000 CR3: 00000000054d8000 CR4: 00000000000006f0
    Call Trace:
     <TASK>
     ? __die+0x1f/0x70
     ? page_fault_oops+0x1e8/0x500
     ? __pfx_is_prefetch.constprop.0+0x10/0x10
     ? __pfx_page_fault_oops+0x10/0x10
     ? _raw_spin_unlock_irqrestore+0x11/0x40
     ? fixup_exception+0x36/0x460
     ? _raw_spin_unlock_irqrestore+0x11/0x40
     ? exc_page_fault+0x5e/0xc0
     ? asm_exc_page_fault+0x26/0x30
     ? xfrm_update_ae_params+0xd1/0x260
     ? memcpy_orig+0xad/0x140
     ? __pfx__raw_spin_lock_bh+0x10/0x10
     xfrm_update_ae_params+0xe7/0x260
     xfrm_new_ae+0x298/0x4e0
     ? __pfx_xfrm_new_ae+0x10/0x10
     ? __pfx_xfrm_new_ae+0x10/0x10
     xfrm_user_rcv_msg+0x25a/0x410
     ? __pfx_xfrm_user_rcv_msg+0x10/0x10
     ? __alloc_skb+0xcf/0x210
     ? stack_trace_save+0x90/0xd0
     ? filter_irq_stacks+0x1c/0x70
     ? __stack_depot_save+0x39/0x4e0
     ? __kasan_slab_free+0x10a/0x190
     ? kmem_cache_free+0x9c/0x340
     ? netlink_recvmsg+0x23c/0x660
     ? sock_recvmsg+0xeb/0xf0
     ? __sys_recvfrom+0x13c/0x1f0
     ? __x64_sys_recvfrom+0x71/0x90
     ? do_syscall_64+0x3f/0x90
     ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
     ? copyout+0x3e/0x50
     netlink_rcv_skb+0xd6/0x210
     ? __pfx_xfrm_user_rcv_msg+0x10/0x10
     ? __pfx_netlink_rcv_skb+0x10/0x10
     ? __pfx_sock_has_perm+0x10/0x10
     ? mutex_lock+0x8d/0xe0
     ? __pfx_mutex_lock+0x10/0x10
     xfrm_netlink_rcv+0x44/0x50
     netlink_unicast+0x36f/0x4c0
     ? __pfx_netlink_unicast+0x10/0x10
     ? netlink_recvmsg+0x500/0x660
     netlink_sendmsg+0x3b7/0x700
    
    This Null-ptr-deref bug is assigned CVE-2023-3772. And this commit
    adds additional NULL check in xfrm_update_ae_params to fix the NPD.
    
    Fixes: d8647b79c3b7 ("xfrm: Add user interface for esn and big anti-replay windows")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1e04cc2ef2c0c0866c19f5627149a76c2baae32
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Jul 10 17:40:53 2023 +0800

    ip_vti: fix potential slab-use-after-free in decode_session6
    
    [ Upstream commit 6018a266279b1a75143c7c0804dd08a5fc4c3e0b ]
    
    When ip_vti device is set to the qdisc of the sfb type, the cb field
    of the sent skb may be modified during enqueuing. Then,
    slab-use-after-free may occur when ip_vti device sends IPv6 packets.
    As commit f855691975bb ("xfrm6: Fix the nexthdr offset in
    _decode_session6.") showed, xfrm_decode_session was originally intended
    only for the receive path. IP6CB(skb)->nhoff is not set during
    transmission. Therefore, set the cb field in the skb to 0 before
    sending packets.
    
    Fixes: f855691975bb ("xfrm6: Fix the nexthdr offset in _decode_session6.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1639a82ce14af76b6419778d343ccbff86ee626
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Jul 10 17:40:52 2023 +0800

    ip6_vti: fix slab-use-after-free in decode_session6
    
    [ Upstream commit 9fd41f1ba638938c9a1195d09bc6fa3be2712f25 ]
    
    When ipv6_vti device is set to the qdisc of the sfb type, the cb field
    of the sent skb may be modified during enqueuing. Then,
    slab-use-after-free may occur when ipv6_vti device sends IPv6 packets.
    
    The stack information is as follows:
    BUG: KASAN: slab-use-after-free in decode_session6+0x103f/0x1890
    Read of size 1 at addr ffff88802e08edc2 by task swapper/0/0
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 6.4.0-next-20230707-00001-g84e2cad7f979 #410
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
    Call Trace:
    <IRQ>
    dump_stack_lvl+0xd9/0x150
    print_address_description.constprop.0+0x2c/0x3c0
    kasan_report+0x11d/0x130
    decode_session6+0x103f/0x1890
    __xfrm_decode_session+0x54/0xb0
    vti6_tnl_xmit+0x3e6/0x1ee0
    dev_hard_start_xmit+0x187/0x700
    sch_direct_xmit+0x1a3/0xc30
    __qdisc_run+0x510/0x17a0
    __dev_queue_xmit+0x2215/0x3b10
    neigh_connected_output+0x3c2/0x550
    ip6_finish_output2+0x55a/0x1550
    ip6_finish_output+0x6b9/0x1270
    ip6_output+0x1f1/0x540
    ndisc_send_skb+0xa63/0x1890
    ndisc_send_rs+0x132/0x6f0
    addrconf_rs_timer+0x3f1/0x870
    call_timer_fn+0x1a0/0x580
    expire_timers+0x29b/0x4b0
    run_timer_softirq+0x326/0x910
    __do_softirq+0x1d4/0x905
    irq_exit_rcu+0xb7/0x120
    sysvec_apic_timer_interrupt+0x97/0xc0
    </IRQ>
    Allocated by task 9176:
    kasan_save_stack+0x22/0x40
    kasan_set_track+0x25/0x30
    __kasan_slab_alloc+0x7f/0x90
    kmem_cache_alloc_node+0x1cd/0x410
    kmalloc_reserve+0x165/0x270
    __alloc_skb+0x129/0x330
    netlink_sendmsg+0x9b1/0xe30
    sock_sendmsg+0xde/0x190
    ____sys_sendmsg+0x739/0x920
    ___sys_sendmsg+0x110/0x1b0
    __sys_sendmsg+0xf7/0x1c0
    do_syscall_64+0x39/0xb0
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    Freed by task 9176:
    kasan_save_stack+0x22/0x40
    kasan_set_track+0x25/0x30
    kasan_save_free_info+0x2b/0x40
    ____kasan_slab_free+0x160/0x1c0
    slab_free_freelist_hook+0x11b/0x220
    kmem_cache_free+0xf0/0x490
    skb_free_head+0x17f/0x1b0
    skb_release_data+0x59c/0x850
    consume_skb+0xd2/0x170
    netlink_unicast+0x54f/0x7f0
    netlink_sendmsg+0x926/0xe30
    sock_sendmsg+0xde/0x190
    ____sys_sendmsg+0x739/0x920
    ___sys_sendmsg+0x110/0x1b0
    __sys_sendmsg+0xf7/0x1c0
    do_syscall_64+0x39/0xb0
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    The buggy address belongs to the object at ffff88802e08ed00
    which belongs to the cache skbuff_small_head of size 640
    The buggy address is located 194 bytes inside of
    freed 640-byte region [ffff88802e08ed00, ffff88802e08ef80)
    
    As commit f855691975bb ("xfrm6: Fix the nexthdr offset in
    _decode_session6.") showed, xfrm_decode_session was originally intended
    only for the receive path. IP6CB(skb)->nhoff is not set during
    transmission. Therefore, set the cb field in the skb to 0 before
    sending packets.
    
    Fixes: f855691975bb ("xfrm6: Fix the nexthdr offset in _decode_session6.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44b3d40967009304617a7a6486490c1d6c12f899
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Jul 10 17:40:51 2023 +0800

    xfrm: fix slab-use-after-free in decode_session6
    
    [ Upstream commit 53223f2ed1ef5c90dad814daaaefea4e68a933c8 ]
    
    When the xfrm device is set to the qdisc of the sfb type, the cb field
    of the sent skb may be modified during enqueuing. Then,
    slab-use-after-free may occur when the xfrm device sends IPv6 packets.
    
    The stack information is as follows:
    BUG: KASAN: slab-use-after-free in decode_session6+0x103f/0x1890
    Read of size 1 at addr ffff8881111458ef by task swapper/3/0
    CPU: 3 PID: 0 Comm: swapper/3 Not tainted 6.4.0-next-20230707 #409
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
    Call Trace:
    <IRQ>
    dump_stack_lvl+0xd9/0x150
    print_address_description.constprop.0+0x2c/0x3c0
    kasan_report+0x11d/0x130
    decode_session6+0x103f/0x1890
    __xfrm_decode_session+0x54/0xb0
    xfrmi_xmit+0x173/0x1ca0
    dev_hard_start_xmit+0x187/0x700
    sch_direct_xmit+0x1a3/0xc30
    __qdisc_run+0x510/0x17a0
    __dev_queue_xmit+0x2215/0x3b10
    neigh_connected_output+0x3c2/0x550
    ip6_finish_output2+0x55a/0x1550
    ip6_finish_output+0x6b9/0x1270
    ip6_output+0x1f1/0x540
    ndisc_send_skb+0xa63/0x1890
    ndisc_send_rs+0x132/0x6f0
    addrconf_rs_timer+0x3f1/0x870
    call_timer_fn+0x1a0/0x580
    expire_timers+0x29b/0x4b0
    run_timer_softirq+0x326/0x910
    __do_softirq+0x1d4/0x905
    irq_exit_rcu+0xb7/0x120
    sysvec_apic_timer_interrupt+0x97/0xc0
    </IRQ>
    <TASK>
    asm_sysvec_apic_timer_interrupt+0x1a/0x20
    RIP: 0010:intel_idle_hlt+0x23/0x30
    Code: 1f 84 00 00 00 00 00 f3 0f 1e fa 41 54 41 89 d4 0f 1f 44 00 00 66 90 0f 1f 44 00 00 0f 00 2d c4 9f ab 00 0f 1f 44 00 00 fb f4 <fa> 44 89 e0 41 5c c3 66 0f 1f 44 00 00 f3 0f 1e fa 41 54 41 89 d4
    RSP: 0018:ffffc90000197d78 EFLAGS: 00000246
    RAX: 00000000000a83c3 RBX: ffffe8ffffd09c50 RCX: ffffffff8a22d8e5
    RDX: 0000000000000001 RSI: ffffffff8d3f8080 RDI: ffffe8ffffd09c50
    RBP: ffffffff8d3f8080 R08: 0000000000000001 R09: ffffed1026ba6d9d
    R10: ffff888135d36ceb R11: 0000000000000001 R12: 0000000000000001
    R13: ffffffff8d3f8100 R14: 0000000000000001 R15: 0000000000000000
    cpuidle_enter_state+0xd3/0x6f0
    cpuidle_enter+0x4e/0xa0
    do_idle+0x2fe/0x3c0
    cpu_startup_entry+0x18/0x20
    start_secondary+0x200/0x290
    secondary_startup_64_no_verify+0x167/0x16b
    </TASK>
    Allocated by task 939:
    kasan_save_stack+0x22/0x40
    kasan_set_track+0x25/0x30
    __kasan_slab_alloc+0x7f/0x90
    kmem_cache_alloc_node+0x1cd/0x410
    kmalloc_reserve+0x165/0x270
    __alloc_skb+0x129/0x330
    inet6_ifa_notify+0x118/0x230
    __ipv6_ifa_notify+0x177/0xbe0
    addrconf_dad_completed+0x133/0xe00
    addrconf_dad_work+0x764/0x1390
    process_one_work+0xa32/0x16f0
    worker_thread+0x67d/0x10c0
    kthread+0x344/0x440
    ret_from_fork+0x1f/0x30
    The buggy address belongs to the object at ffff888111145800
    which belongs to the cache skbuff_small_head of size 640
    The buggy address is located 239 bytes inside of
    freed 640-byte region [ffff888111145800, ffff888111145a80)
    
    As commit f855691975bb ("xfrm6: Fix the nexthdr offset in
    _decode_session6.") showed, xfrm_decode_session was originally intended
    only for the receive path. IP6CB(skb)->nhoff is not set during
    transmission. Therefore, set the cb field in the skb to 0 before
    sending packets.
    
    Fixes: f855691975bb ("xfrm6: Fix the nexthdr offset in _decode_session6.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a465ace883ac600fef37165b653b0ca5cc9c1a53
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Jun 30 16:19:11 2023 +0800

    net: xfrm: Amend XFRMA_SEC_CTX nla_policy structure
    
    [ Upstream commit d1e0e61d617ba17aa516db707aa871387566bbf7 ]
    
    According to all consumers code of attrs[XFRMA_SEC_CTX], like
    
    * verify_sec_ctx_len(), convert to xfrm_user_sec_ctx*
    * xfrm_state_construct(), call security_xfrm_state_alloc whose prototype
    is int security_xfrm_state_alloc(.., struct xfrm_user_sec_ctx *sec_ctx);
    * copy_from_user_sec_ctx(), convert to xfrm_user_sec_ctx *
    ...
    
    It seems that the expected parsing result for XFRMA_SEC_CTX should be
    structure xfrm_user_sec_ctx, and the current xfrm_sec_ctx is confusing
    and misleading (Luckily, they happen to have same size 8 bytes).
    
    This commit amend the policy structure to xfrm_user_sec_ctx to avoid
    ambiguity.
    
    Fixes: cf5cb79f6946 ("[XFRM] netlink: Establish an attribute policy")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fed1cd2cd3aa95dedb75d12d430c90d6203d6c32
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Jun 27 11:39:54 2023 +0800

    net: af_key: fix sadb_x_filter validation
    
    [ Upstream commit 75065a8929069bc93181848818e23f147a73f83a ]
    
    When running xfrm_state_walk_init(), the xfrm_address_filter being used
    is okay to have a splen/dplen that equals to sizeof(xfrm_address_t)<<3.
    This commit replaces >= to > to make sure the boundary checking is
    correct.
    
    Fixes: 37bd22420f85 ("af_key: pfkey_dump needs parameter validation")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1960f468078b3471d1ee9aafa0cf06c8c34a505f
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Jun 27 11:31:38 2023 +0800

    net: xfrm: Fix xfrm_address_filter OOB read
    
    [ Upstream commit dfa73c17d55b921e1d4e154976de35317e43a93a ]
    
    We found below OOB crash:
    
    [   44.211730] ==================================================================
    [   44.212045] BUG: KASAN: slab-out-of-bounds in memcmp+0x8b/0xb0
    [   44.212045] Read of size 8 at addr ffff88800870f320 by task poc.xfrm/97
    [   44.212045]
    [   44.212045] CPU: 0 PID: 97 Comm: poc.xfrm Not tainted 6.4.0-rc7-00072-gdad9774deaf1-dirty #4
    [   44.212045] Call Trace:
    [   44.212045]  <TASK>
    [   44.212045]  dump_stack_lvl+0x37/0x50
    [   44.212045]  print_report+0xcc/0x620
    [   44.212045]  ? __virt_addr_valid+0xf3/0x170
    [   44.212045]  ? memcmp+0x8b/0xb0
    [   44.212045]  kasan_report+0xb2/0xe0
    [   44.212045]  ? memcmp+0x8b/0xb0
    [   44.212045]  kasan_check_range+0x39/0x1c0
    [   44.212045]  memcmp+0x8b/0xb0
    [   44.212045]  xfrm_state_walk+0x21c/0x420
    [   44.212045]  ? __pfx_dump_one_state+0x10/0x10
    [   44.212045]  xfrm_dump_sa+0x1e2/0x290
    [   44.212045]  ? __pfx_xfrm_dump_sa+0x10/0x10
    [   44.212045]  ? __kernel_text_address+0xd/0x40
    [   44.212045]  ? kasan_unpoison+0x27/0x60
    [   44.212045]  ? mutex_lock+0x60/0xe0
    [   44.212045]  ? __pfx_mutex_lock+0x10/0x10
    [   44.212045]  ? kasan_save_stack+0x22/0x50
    [   44.212045]  netlink_dump+0x322/0x6c0
    [   44.212045]  ? __pfx_netlink_dump+0x10/0x10
    [   44.212045]  ? mutex_unlock+0x7f/0xd0
    [   44.212045]  ? __pfx_mutex_unlock+0x10/0x10
    [   44.212045]  __netlink_dump_start+0x353/0x430
    [   44.212045]  xfrm_user_rcv_msg+0x3a4/0x410
    [   44.212045]  ? __pfx__raw_spin_lock_irqsave+0x10/0x10
    [   44.212045]  ? __pfx_xfrm_user_rcv_msg+0x10/0x10
    [   44.212045]  ? __pfx_xfrm_dump_sa+0x10/0x10
    [   44.212045]  ? __pfx_xfrm_dump_sa_done+0x10/0x10
    [   44.212045]  ? __stack_depot_save+0x382/0x4e0
    [   44.212045]  ? filter_irq_stacks+0x1c/0x70
    [   44.212045]  ? kasan_save_stack+0x32/0x50
    [   44.212045]  ? kasan_save_stack+0x22/0x50
    [   44.212045]  ? kasan_set_track+0x25/0x30
    [   44.212045]  ? __kasan_slab_alloc+0x59/0x70
    [   44.212045]  ? kmem_cache_alloc_node+0xf7/0x260
    [   44.212045]  ? kmalloc_reserve+0xab/0x120
    [   44.212045]  ? __alloc_skb+0xcf/0x210
    [   44.212045]  ? netlink_sendmsg+0x509/0x700
    [   44.212045]  ? sock_sendmsg+0xde/0xe0
    [   44.212045]  ? __sys_sendto+0x18d/0x230
    [   44.212045]  ? __x64_sys_sendto+0x71/0x90
    [   44.212045]  ? do_syscall_64+0x3f/0x90
    [   44.212045]  ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]  ? netlink_sendmsg+0x509/0x700
    [   44.212045]  ? sock_sendmsg+0xde/0xe0
    [   44.212045]  ? __sys_sendto+0x18d/0x230
    [   44.212045]  ? __x64_sys_sendto+0x71/0x90
    [   44.212045]  ? do_syscall_64+0x3f/0x90
    [   44.212045]  ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]  ? kasan_save_stack+0x22/0x50
    [   44.212045]  ? kasan_set_track+0x25/0x30
    [   44.212045]  ? kasan_save_free_info+0x2e/0x50
    [   44.212045]  ? __kasan_slab_free+0x10a/0x190
    [   44.212045]  ? kmem_cache_free+0x9c/0x340
    [   44.212045]  ? netlink_recvmsg+0x23c/0x660
    [   44.212045]  ? sock_recvmsg+0xeb/0xf0
    [   44.212045]  ? __sys_recvfrom+0x13c/0x1f0
    [   44.212045]  ? __x64_sys_recvfrom+0x71/0x90
    [   44.212045]  ? do_syscall_64+0x3f/0x90
    [   44.212045]  ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]  ? copyout+0x3e/0x50
    [   44.212045]  netlink_rcv_skb+0xd6/0x210
    [   44.212045]  ? __pfx_xfrm_user_rcv_msg+0x10/0x10
    [   44.212045]  ? __pfx_netlink_rcv_skb+0x10/0x10
    [   44.212045]  ? __pfx_sock_has_perm+0x10/0x10
    [   44.212045]  ? mutex_lock+0x8d/0xe0
    [   44.212045]  ? __pfx_mutex_lock+0x10/0x10
    [   44.212045]  xfrm_netlink_rcv+0x44/0x50
    [   44.212045]  netlink_unicast+0x36f/0x4c0
    [   44.212045]  ? __pfx_netlink_unicast+0x10/0x10
    [   44.212045]  ? netlink_recvmsg+0x500/0x660
    [   44.212045]  netlink_sendmsg+0x3b7/0x700
    [   44.212045]  ? __pfx_netlink_sendmsg+0x10/0x10
    [   44.212045]  ? __pfx_netlink_sendmsg+0x10/0x10
    [   44.212045]  sock_sendmsg+0xde/0xe0
    [   44.212045]  __sys_sendto+0x18d/0x230
    [   44.212045]  ? __pfx___sys_sendto+0x10/0x10
    [   44.212045]  ? rcu_core+0x44a/0xe10
    [   44.212045]  ? __rseq_handle_notify_resume+0x45b/0x740
    [   44.212045]  ? _raw_spin_lock_irq+0x81/0xe0
    [   44.212045]  ? __pfx___rseq_handle_notify_resume+0x10/0x10
    [   44.212045]  ? __pfx_restore_fpregs_from_fpstate+0x10/0x10
    [   44.212045]  ? __pfx_blkcg_maybe_throttle_current+0x10/0x10
    [   44.212045]  ? __pfx_task_work_run+0x10/0x10
    [   44.212045]  __x64_sys_sendto+0x71/0x90
    [   44.212045]  do_syscall_64+0x3f/0x90
    [   44.212045]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045] RIP: 0033:0x44b7da
    [   44.212045] RSP: 002b:00007ffdc8838548 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    [   44.212045] RAX: ffffffffffffffda RBX: 00007ffdc8839978 RCX: 000000000044b7da
    [   44.212045] RDX: 0000000000000038 RSI: 00007ffdc8838770 RDI: 0000000000000003
    [   44.212045] RBP: 00007ffdc88385b0 R08: 00007ffdc883858c R09: 000000000000000c
    [   44.212045] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000001
    [   44.212045] R13: 00007ffdc8839968 R14: 00000000004c37d0 R15: 0000000000000001
    [   44.212045]  </TASK>
    [   44.212045]
    [   44.212045] Allocated by task 97:
    [   44.212045]  kasan_save_stack+0x22/0x50
    [   44.212045]  kasan_set_track+0x25/0x30
    [   44.212045]  __kasan_kmalloc+0x7f/0x90
    [   44.212045]  __kmalloc_node_track_caller+0x5b/0x140
    [   44.212045]  kmemdup+0x21/0x50
    [   44.212045]  xfrm_dump_sa+0x17d/0x290
    [   44.212045]  netlink_dump+0x322/0x6c0
    [   44.212045]  __netlink_dump_start+0x353/0x430
    [   44.212045]  xfrm_user_rcv_msg+0x3a4/0x410
    [   44.212045]  netlink_rcv_skb+0xd6/0x210
    [   44.212045]  xfrm_netlink_rcv+0x44/0x50
    [   44.212045]  netlink_unicast+0x36f/0x4c0
    [   44.212045]  netlink_sendmsg+0x3b7/0x700
    [   44.212045]  sock_sendmsg+0xde/0xe0
    [   44.212045]  __sys_sendto+0x18d/0x230
    [   44.212045]  __x64_sys_sendto+0x71/0x90
    [   44.212045]  do_syscall_64+0x3f/0x90
    [   44.212045]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]
    [   44.212045] The buggy address belongs to the object at ffff88800870f300
    [   44.212045]  which belongs to the cache kmalloc-64 of size 64
    [   44.212045] The buggy address is located 32 bytes inside of
    [   44.212045]  allocated 36-byte region [ffff88800870f300, ffff88800870f324)
    [   44.212045]
    [   44.212045] The buggy address belongs to the physical page:
    [   44.212045] page:00000000e4de16ee refcount:1 mapcount:0 mapping:000000000 ...
    [   44.212045] flags: 0x100000000000200(slab|node=0|zone=1)
    [   44.212045] page_type: 0xffffffff()
    [   44.212045] raw: 0100000000000200 ffff888004c41640 dead000000000122 0000000000000000
    [   44.212045] raw: 0000000000000000 0000000080200020 00000001ffffffff 0000000000000000
    [   44.212045] page dumped because: kasan: bad access detected
    [   44.212045]
    [   44.212045] Memory state around the buggy address:
    [   44.212045]  ffff88800870f200: fa fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [   44.212045]  ffff88800870f280: 00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045] >ffff88800870f300: 00 00 00 00 04 fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045]                                ^
    [   44.212045]  ffff88800870f380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045]  ffff88800870f400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045] ==================================================================
    
    By investigating the code, we find the root cause of this OOB is the lack
    of checks in xfrm_dump_sa(). The buggy code allows a malicious user to pass
    arbitrary value of filter->splen/dplen. Hence, with crafted xfrm states,
    the attacker can achieve 8 bytes heap OOB read, which causes info leak.
    
      if (attrs[XFRMA_ADDRESS_FILTER]) {
        filter = kmemdup(nla_data(attrs[XFRMA_ADDRESS_FILTER]),
            sizeof(*filter), GFP_KERNEL);
        if (filter == NULL)
          return -ENOMEM;
        // NO MORE CHECKS HERE !!!
      }
    
    This patch fixes the OOB by adding necessary boundary checks, just like
    the code in pfkey_dump() function.
    
    Fixes: d3623099d350 ("ipsec: add support of limited SA dump")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 080dedb1cad81c5f3d9a0aa1451622c60616f95a
Author: Tam Nguyen <tamnguyenchi@os.amperecomputing.com>
Date:   Wed Jul 26 15:00:01 2023 +0700

    i2c: designware: Handle invalid SMBus block data response length value
    
    commit 69f035c480d76f12bf061148ccfd578e1099e5fc upstream.
    
    In the I2C_FUNC_SMBUS_BLOCK_DATA case, the invalid length byte value
    (outside of 1-32) of the SMBus block data response from the Slave device
    is not correctly handled by the I2C Designware driver.
    
    In case IC_EMPTYFIFO_HOLD_MASTER_EN==1, which cannot be detected
    from the registers, the Master can be disabled only if the STOP bit
    is set. Without STOP bit set, the Master remains active, holding the bus
    until receiving a block data response length. This hangs the bus and
    is unrecoverable.
    
    Avoid this by issuing another dump read to reach the stop condition when
    an invalid length byte is received.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tam Nguyen <tamnguyenchi@os.amperecomputing.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Link: https://lore.kernel.org/r/20230726080001.337353-3-tamnguyenchi@os.amperecomputing.com
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 416c538684bd62f6f08291f25294470356c87da0
Author: Quan Nguyen <quan@os.amperecomputing.com>
Date:   Wed Jul 26 15:00:00 2023 +0700

    i2c: designware: Correct length byte validation logic
    
    commit 49d4db3953cb9004ff94efc0c176e026c820af5a upstream.
    
    Commit 0daede80f870 ("i2c: designware: Convert driver to using regmap API")
    changes the logic to validate the whole 32-bit return value of
    DW_IC_DATA_CMD register instead of 8-bit LSB without reason.
    
    Later, commit f53f15ba5a85 ("i2c: designware: Get right data length"),
    introduced partial fix but not enough because the "tmp > 0" still test
    tmp as 32-bit value and is wrong in case the IC_DATA_CMD[11] is set.
    
    Revert the logic to just before commit 0daede80f870
    ("i2c: designware: Convert driver to using regmap API").
    
    Fixes: f53f15ba5a85 ("i2c: designware: Get right data length")
    Fixes: 0daede80f870 ("i2c: designware: Convert driver to using regmap API")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tam Nguyen <tamnguyenchi@os.amperecomputing.com>
    Signed-off-by: Quan Nguyen <quan@os.amperecomputing.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Link: https://lore.kernel.org/r/20230726080001.337353-2-tamnguyenchi@os.amperecomputing.com
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b966e9e1e250dfdb41a7f41775faea4a37af923c
Author: xiaoshoukui <xiaoshoukui@gmail.com>
Date:   Tue Aug 15 02:55:59 2023 -0400

    btrfs: fix BUG_ON condition in btrfs_cancel_balance
    
    commit 29eefa6d0d07e185f7bfe9576f91e6dba98189c2 upstream.
    
    Pausing and canceling balance can race to interrupt balance lead to BUG_ON
    panic in btrfs_cancel_balance. The BUG_ON condition in btrfs_cancel_balance
    does not take this race scenario into account.
    
    However, the race condition has no other side effects. We can fix that.
    
    Reproducing it with panic trace like this:
    
      kernel BUG at fs/btrfs/volumes.c:4618!
      RIP: 0010:btrfs_cancel_balance+0x5cf/0x6a0
      Call Trace:
       <TASK>
       ? do_nanosleep+0x60/0x120
       ? hrtimer_nanosleep+0xb7/0x1a0
       ? sched_core_clone_cookie+0x70/0x70
       btrfs_ioctl_balance_ctl+0x55/0x70
       btrfs_ioctl+0xa46/0xd20
       __x64_sys_ioctl+0x7d/0xa0
       do_syscall_64+0x38/0x80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
      Race scenario as follows:
      > mutex_unlock(&fs_info->balance_mutex);
      > --------------------
      > .......issue pause and cancel req in another thread
      > --------------------
      > ret = __btrfs_balance(fs_info);
      >
      > mutex_lock(&fs_info->balance_mutex);
      > if (ret == -ECANCELED && atomic_read(&fs_info->balance_pause_req)) {
      >         btrfs_info(fs_info, "balance: paused");
      >         btrfs_exclop_balance(fs_info, BTRFS_EXCLOP_BALANCE_PAUSED);
      > }
    
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: xiaoshoukui <xiaoshoukui@ruijie.com.cn>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77698e6ff6f04c5f866b1832a183ca3acc073916
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Tue Aug 1 10:23:04 2023 +0800

    tty: serial: fsl_lpuart: Clear the error flags by writing 1 for lpuart32 platforms
    
    commit 282069845af388b08d622ad192b831dcd0549c62 upstream.
    
    Do not read the data register to clear the error flags for lpuart32
    platforms, the additional read may cause the receive FIFO underflow
    since the DMA has already read the data register.
    Actually all lpuart32 platforms support write 1 to clear those error
    bits, let's use this method to better clear the error flags.
    
    Fixes: 42b68768e51b ("serial: fsl_lpuart: DMA support for 32-bit variant")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Link: https://lore.kernel.org/r/20230801022304.24251-1-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a523446438376bb7c224f3169ae9b98ce0fb893
Author: Yi Yang <yiyang13@huawei.com>
Date:   Fri Aug 11 11:11:21 2023 +0800

    tty: n_gsm: fix the UAF caused by race condition in gsm_cleanup_mux
    
    commit 3c4f8333b582487a2d1e02171f1465531cde53e3 upstream.
    
    In commit 9b9c8195f3f0 ("tty: n_gsm: fix UAF in gsm_cleanup_mux"), the UAF
    problem is not completely fixed. There is a race condition in
    gsm_cleanup_mux(), which caused this UAF.
    
    The UAF problem is triggered by the following race:
    task[5046]                     task[5054]
    -----------------------        -----------------------
    gsm_cleanup_mux();
    dlci = gsm->dlci[0];
    mutex_lock(&gsm->mutex);
                                   gsm_cleanup_mux();
                                   dlci = gsm->dlci[0]; //Didn't take the lock
    gsm_dlci_release(gsm->dlci[i]);
    gsm->dlci[i] = NULL;
    mutex_unlock(&gsm->mutex);
                                   mutex_lock(&gsm->mutex);
                                   dlci->dead = true; //UAF
    
    Fix it by assigning values after mutex_lock().
    
    Link: https://syzkaller.appspot.com/text?tag=CrashReport&x=176188b5a80000
    Cc: stable <stable@kernel.org>
    Fixes: 9b9c8195f3f0 ("tty: n_gsm: fix UAF in gsm_cleanup_mux")
    Fixes: aa371e96f05d ("tty: n_gsm: fix restart handling via CLD command")
    Signed-off-by: Yi Yang <yiyang13@huawei.com>
    Co-developed-by: Qiumiao Zhang <zhangqiumiao1@huawei.com>
    Signed-off-by: Qiumiao Zhang <zhangqiumiao1@huawei.com>
    Link: https://lore.kernel.org/r/20230811031121.153237-1-yiyang13@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ef25fb13494e35c6dbe15445c7875fa92bc3e8b
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Thu Aug 10 22:37:55 2023 -0500

    powerpc/rtas_flash: allow user copy to flash block cache objects
    
    commit 4f3175979e62de3b929bfa54a0db4b87d36257a7 upstream.
    
    With hardened usercopy enabled (CONFIG_HARDENED_USERCOPY=y), using the
    /proc/powerpc/rtas/firmware_update interface to prepare a system
    firmware update yields a BUG():
    
      kernel BUG at mm/usercopy.c:102!
      Oops: Exception in kernel mode, sig: 5 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Modules linked in:
      CPU: 0 PID: 2232 Comm: dd Not tainted 6.5.0-rc3+ #2
      Hardware name: IBM,8408-E8E POWER8E (raw) 0x4b0201 0xf000004 of:IBM,FW860.50 (SV860_146) hv:phyp pSeries
      NIP:  c0000000005991d0 LR: c0000000005991cc CTR: 0000000000000000
      REGS: c0000000148c76a0 TRAP: 0700   Not tainted  (6.5.0-rc3+)
      MSR:  8000000000029033 <SF,EE,ME,IR,DR,RI,LE>  CR: 24002242  XER: 0000000c
      CFAR: c0000000001fbd34 IRQMASK: 0
      [ ... GPRs omitted ... ]
      NIP usercopy_abort+0xa0/0xb0
      LR  usercopy_abort+0x9c/0xb0
      Call Trace:
        usercopy_abort+0x9c/0xb0 (unreliable)
        __check_heap_object+0x1b4/0x1d0
        __check_object_size+0x2d0/0x380
        rtas_flash_write+0xe4/0x250
        proc_reg_write+0xfc/0x160
        vfs_write+0xfc/0x4e0
        ksys_write+0x90/0x160
        system_call_exception+0x178/0x320
        system_call_common+0x160/0x2c4
    
    The blocks of the firmware image are copied directly from user memory
    to objects allocated from flash_block_cache, so flash_block_cache must
    be created using kmem_cache_create_usercopy() to mark it safe for user
    access.
    
    Fixes: 6d07d1cd300f ("usercopy: Restrict non-usercopy caches to size 0")
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    [mpe: Trim and indent oops]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230810-rtas-flash-vs-hardened-usercopy-v2-1-dcf63793a938@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb70e2b70f8d917dd30d3b575faffc707976ef28
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Fri Jul 28 01:03:18 2023 +0800

    fbdev: mmp: fix value check in mmphw_probe()
    
    commit 0872b2c0abc0e84ac82472959c8e14e35277549c upstream.
    
    in mmphw_probe(), check the return value of clk_prepare_enable()
    and return the error code if clk_prepare_enable() returns an
    unexpected value.
    
    Fixes: d63028c38905 ("video: mmp display controller support")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 184f1b68bb99b5927ab63aefb4a58ec2f9cc6ca9
Author: Yicong Yang <yangyicong@hisilicon.com>
Date:   Tue Aug 1 20:46:25 2023 +0800

    i2c: hisi: Only handle the interrupt of the driver's transfer
    
    commit fff67c1b17ee093947bdcbac6f64d072e644159a upstream.
    
    The controller may be shared with other port, for example the firmware.
    Handle the interrupt from other sources will cause crash since some
    data are not initialized. So only handle the interrupt of the driver's
    transfer and discard others.
    
    Fixes: d62fbdb99a85 ("i2c: add support for HiSilicon I2C controller")
    Signed-off-by: Yicong Yang <yangyicong@hisilicon.com>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Link: https://lore.kernel.org/r/20230801124625.63587-1-yangyicong@huawei.com
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4e671dae50e04e08571b58d818825d8c93df040
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Fri Jul 7 08:49:41 2023 +0000

    i2c: bcm-iproc: Fix bcm_iproc_i2c_isr deadlock issue
    
    commit 4caf4cb1eaed469742ef719f2cc024b1ec3fa9e6 upstream.
    
    iproc_i2c_rd_reg() and iproc_i2c_wr_reg() are called from both
    interrupt context (e.g. bcm_iproc_i2c_isr) and process context
    (e.g. bcm_iproc_i2c_suspend). Therefore, interrupts should be
    disabled to avoid potential deadlock. To prevent this scenario,
    use spin_lock_irqsave().
    
    Fixes: 9a1038728037 ("i2c: iproc: add NIC I2C support")
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Acked-by: Ray Jui <ray.jui@broadcom.com>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b99f490ea87ebcca3a429fd8837067feb56a4c7c
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Aug 10 15:34:21 2023 -0500

    cifs: fix potential oops in cifs_oplock_break
    
    [ Upstream commit e8f5f849ffce24490eb9449e98312b66c0dba76f ]
    
    With deferred close we can have closes that race with lease breaks,
    and so with the current checks for whether to send the lease response,
    oplock_response(), this can mean that an unmount (kill_sb) can occur
    just before we were checking if the tcon->ses is valid.  See below:
    
    [Fri Aug  4 04:12:50 2023] RIP: 0010:cifs_oplock_break+0x1f7/0x5b0 [cifs]
    [Fri Aug  4 04:12:50 2023] Code: 7d a8 48 8b 7d c0 c0 e9 02 48 89 45 b8 41 89 cf e8 3e f5 ff ff 4c 89 f7 41 83 e7 01 e8 82 b3 03 f2 49 8b 45 50 48 85 c0 74 5e <48> 83 78 60 00 74 57 45 84 ff 75 52 48 8b 43 98 48 83 eb 68 48 39
    [Fri Aug  4 04:12:50 2023] RSP: 0018:ffffb30607ddbdf8 EFLAGS: 00010206
    [Fri Aug  4 04:12:50 2023] RAX: 632d223d32612022 RBX: ffff97136944b1e0 RCX: 0000000080100009
    [Fri Aug  4 04:12:50 2023] RDX: 0000000000000001 RSI: 0000000080100009 RDI: ffff97136944b188
    [Fri Aug  4 04:12:50 2023] RBP: ffffb30607ddbe58 R08: 0000000000000001 R09: ffffffffc08e0900
    [Fri Aug  4 04:12:50 2023] R10: 0000000000000001 R11: 000000000000000f R12: ffff97136944b138
    [Fri Aug  4 04:12:50 2023] R13: ffff97149147c000 R14: ffff97136944b188 R15: 0000000000000000
    [Fri Aug  4 04:12:50 2023] FS:  0000000000000000(0000) GS:ffff9714f7c00000(0000) knlGS:0000000000000000
    [Fri Aug  4 04:12:50 2023] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [Fri Aug  4 04:12:50 2023] CR2: 00007fd8de9c7590 CR3: 000000011228e000 CR4: 0000000000350ef0
    [Fri Aug  4 04:12:50 2023] Call Trace:
    [Fri Aug  4 04:12:50 2023]  <TASK>
    [Fri Aug  4 04:12:50 2023]  process_one_work+0x225/0x3d0
    [Fri Aug  4 04:12:50 2023]  worker_thread+0x4d/0x3e0
    [Fri Aug  4 04:12:50 2023]  ? process_one_work+0x3d0/0x3d0
    [Fri Aug  4 04:12:50 2023]  kthread+0x12a/0x150
    [Fri Aug  4 04:12:50 2023]  ? set_kthread_struct+0x50/0x50
    [Fri Aug  4 04:12:50 2023]  ret_from_fork+0x22/0x30
    [Fri Aug  4 04:12:50 2023]  </TASK>
    
    To fix this change the ordering of the checks before sending the oplock_response
    to first check if the openFileList is empty.
    
    Fixes: da787d5b7498 ("SMB3: Do not send lease break acknowledgment if all file handles have been closed")
    Suggested-by: Bharath SM <bharathsm@microsoft.com>
    Reviewed-by: Bharath SM <bharathsm@microsoft.com>
    Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5ae5a81bc191d82d27bafff554560f7fd8d8c4d
Author: Maxime Coquelin <maxime.coquelin@redhat.com>
Date:   Wed Jul 5 13:45:05 2023 +0200

    vduse: Use proper spinlock for IRQ injection
    
    [ Upstream commit 7ca26efb09a1543fddb29308ea3b63b66cb5d3ee ]
    
    The IRQ injection work used spin_lock_irq() to protect the
    scheduling of the softirq, but spin_lock_bh() should be
    used.
    
    With spin_lock_irq(), we noticed delay of more than 6
    seconds between the time a NAPI polling work is scheduled
    and the time it is executed.
    
    Fixes: c8a6153b6c59 ("vduse: Introduce VDUSE - vDPA Device in Userspace")
    Cc: xieyongji@bytedance.com
    
    Suggested-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Maxime Coquelin <maxime.coquelin@redhat.com>
    Message-Id: <20230705114505.63274-1-maxime.coquelin@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Xie Yongji <xieyongji@bytedance.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b7d5c2dd664eb8b9a06ecbc06e28d39359c422e
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Thu Jun 29 14:05:26 2023 +0200

    virtio-mmio: don't break lifecycle of vm_dev
    
    [ Upstream commit 55c91fedd03d7b9cf0c5199b2eb12b9b8e95281a ]
    
    vm_dev has a separate lifecycle because it has a 'struct device'
    embedded. Thus, having a release callback for it is correct.
    
    Allocating the vm_dev struct with devres totally breaks this protection,
    though. Instead of waiting for the vm_dev release callback, the memory
    is freed when the platform_device is removed. Resulting in a
    use-after-free when finally the callback is to be called.
    
    To easily see the problem, compile the kernel with
    CONFIG_DEBUG_KOBJECT_RELEASE and unbind with sysfs.
    
    The fix is easy, don't use devres in this case.
    
    Found during my research about object lifetime problems.
    
    Fixes: 7eb781b1bbb7 ("virtio_mmio: add cleanup for virtio_mmio_probe")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Message-Id: <20230629120526.7184-1-wsa+renesas@sang-engineering.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edf3b5aadb2515c808200b904baa5b70a727f0ac
Author: Naohiro Aota <naota@elisp.net>
Date:   Tue Jun 6 14:36:34 2023 +0900

    btrfs: move out now unused BG from the reclaim list
    
    [ Upstream commit a9f189716cf15913c453299d72f69c51a9b0f86b ]
    
    An unused block group is easy to remove to free up space and should be
    reclaimed fast. Such block group can often already be a target of the
    reclaim process. As we check list_empty(&bg->bg_list), we keep it in the
    reclaim list. That block group is never reclaimed until the file system
    is filled e.g. up to 75%.
    
    Instead, we can move unused block group to the unused list and delete it
    fast.
    
    Fixes: 18bb8bbf13c1 ("btrfs: zoned: automatically reclaim zones")
    CC: stable@vger.kernel.org # 5.15+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 170773563ef6c02acd0048ff1290b9f40d349e62
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Mon Jul 17 10:28:33 2023 +0800

    ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node
    
    [ Upstream commit ee70b908f77a9d8f689dea986f09e6d7dc481934 ]
    
    Property name "phy-3p0-supply" is used instead of "phy-reg_3p0-supply".
    
    Fixes: 9f30b6b1a957 ("ARM: dts: imx: Add basic dtsi file for imx6sll")
    cc: <stable@vger.kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ffbfe1c980f097ce5be97b0def096c24c6d14dd
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Sep 24 11:14:37 2021 +0200

    ARM: dts: imx6sll: fixup of operating points
    
    [ Upstream commit 1875903019ea6e32e6e544c1631b119e4fd60b20 ]
    
    Make operating point definitions comply with binding
    specifications.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: ee70b908f77a ("ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2ff5cf681a8e28a71c11ca7a0c7b9b150b441b2
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:21 2023 +0300

    mmc: sunxi: fix deferred probing
    
    [ Upstream commit c2df53c5806cfd746dae08e07bc8c4ad247c3b70 ]
    
    The driver overrides the error codes and IRQ0 returned by platform_get_irq()
    to -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the error
    codes upstream.  Since commit ce753ad1549c ("platform: finally disallow IRQ0
    in platform_get_irq() and its ilk") IRQ0 is no longer returned by those APIs,
    so we now can safely ignore it...
    
    Fixes: 2408a08583d2 ("mmc: sunxi-mmc: Handle return value of platform_get_irq")
    Cc: stable@vger.kernel.org # v5.19+
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Reviewed-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20230617203622.6812-12-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f93e8c5a7bd9fa4df7f6e71d2624b914f8e234a4
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:11 2023 +0300

    mmc: bcm2835: fix deferred probing
    
    [ Upstream commit 71150ac12558bcd9d75e6e24cf7c872c2efd80f3 ]
    
    The driver overrides the error codes and IRQ0 returned by platform_get_irq()
    to -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the error
    codes upstream.  Since commit ce753ad1549c ("platform: finally disallow IRQ0
    in platform_get_irq() and its ilk") IRQ0 is no longer returned by those APIs,
    so we now can safely ignore it...
    
    Fixes: 660fc733bd74 ("mmc: bcm2835: Add new driver for the sdhost controller.")
    Cc: stable@vger.kernel.org # v5.19+
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-2-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4eeba5d476fe224785838e99b20a72f0c4caa6c8
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jun 7 12:05:40 2023 +0200

    USB: dwc3: fix use-after-free on core driver unbind
    
    [ Upstream commit e3dbb657571509044be15184a13134fa7c1fdca1 ]
    
    Some dwc3 glue drivers are currently accessing the driver data of the
    child core device directly, which is clearly a bad idea as the child may
    not have probed yet or may have been unbound from its driver.
    
    As a workaround until the glue drivers have been fixed, clear the driver
    data pointer before allowing the glue parent device to runtime suspend
    to prevent its driver from accessing data that has been freed during
    unbind.
    
    Fixes: 6dd2565989b4 ("usb: dwc3: add imx8mp dwc3 glue layer driver")
    Fixes: 6895ea55c385 ("usb: dwc3: qcom: Configure wakeup interrupts during suspend")
    Cc: stable@vger.kernel.org      # 5.12
    Cc: Li Jun <jun.li@nxp.com>
    Cc: Sandeep Maheswaram <quic_c_sanm@quicinc.com>
    Cc: Krishna Kurapati <quic_kriskura@quicinc.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Message-ID: <20230607100540.31045-3-johan+linaro@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a78fe5c9d8d52cb9ad2c88e60a8603c29382fc5b
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jun 7 12:05:39 2023 +0200

    USB: dwc3: qcom: fix NULL-deref on suspend
    
    [ Upstream commit d2d69354226de0b333d4405981f3d9c41ba8430a ]
    
    The Qualcomm dwc3 glue driver is currently accessing the driver data of
    the child core device during suspend and on wakeup interrupts. This is
    clearly a bad idea as the child may not have probed yet or could have
    been unbound from its driver.
    
    The first such layering violation was part of the initial version of the
    driver, but this was later made worse when the hack that accesses the
    driver data of the grand child xhci device to configure the wakeup
    interrupts was added.
    
    Fixing this properly is not that easily done, so add a sanity check to
    make sure that the child driver data is non-NULL before dereferencing it
    for now.
    
    Note that this relies on subtleties like the fact that driver core is
    making sure that the parent is not suspended while the child is probing.
    
    Reported-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/all/20230325165217.31069-4-manivannan.sadhasivam@linaro.org/
    Fixes: d9152161b4bf ("usb: dwc3: Add Qualcomm DWC3 glue layer driver")
    Fixes: 6895ea55c385 ("usb: dwc3: qcom: Configure wakeup interrupts during suspend")
    Cc: stable@vger.kernel.org      # 3.18: a872ab303d5d: "usb: dwc3: qcom: fix use-after-free on runtime-PM wakeup"
    Cc: Sandeep Maheswaram <quic_c_sanm@quicinc.com>
    Cc: Krishna Kurapati <quic_kriskura@quicinc.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Message-ID: <20230607100540.31045-2-johan+linaro@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a6b7534020de17676066aecf53b0b2387e2151e
Author: Robert Hodaszi <robert.hodaszi@digi.com>
Date:   Fri Jun 9 14:13:34 2023 +0200

    tty: serial: fsl_lpuart: reduce RX watermark to 0 on LS1028A
    
    [ Upstream commit a82c3df955f8c1c726e4976527aa6ae924a67dd9 ]
    
    LS1028A is using DMA with LPUART. Having RX watermark set to 1, means
    DMA transactions are started only after receiving the second character.
    
    On other platforms with newer LPUART IP, Receiver Idle Empty function
    initiates the DMA request after the receiver is idling for 4 characters.
    But this feature is missing on LS1028A, which is causing a 1-character
    delay in the RX direction on this platform.
    
    Set RX watermark to 0 to initiate RX DMA after each character.
    
    Link: https://lore.kernel.org/linux-serial/20230607103459.1222426-1-robert.hodaszi@digi.com/
    Fixes: 9ad9df844754 ("tty: serial: fsl_lpuart: Fix the wrong RXWATER setting for rx dma case")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Robert Hodaszi <robert.hodaszi@digi.com>
    Message-ID: <20230609121334.1878626-1-robert.hodaszi@digi.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 701bb5fee7c3e1a22793ce872d81fbf56440756c
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Mon Jan 30 14:44:44 2023 +0800

    tty: serial: fsl_lpuart: make rx_watermark configurable for different platforms
    
    [ Upstream commit 34ebb26f12a84b744f43c5c4869516f122a2dfaa ]
    
    Add rx_watermark parameter for struct lpuart_port to make the receive
    watermark configurable for different platforms.
    No function changed.
    
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Link: https://lore.kernel.org/r/20230130064449.9564-2-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: a82c3df955f8 ("tty: serial: fsl_lpuart: reduce RX watermark to 0 on LS1028A")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa254ab7d02d52271187eccfea82f8b17771a78a
Author: Jesse Taube <mr.bossman075@gmail.com>
Date:   Wed Dec 15 17:05:36 2021 -0500

    tty: serial: fsl_lpuart: Add i.MXRT1050 support
    
    [ Upstream commit 443df57b31d14a920f23eaa265f4cb0dc3f94823 ]
    
    Add support for i.MXRT1050's uart.
    
    Cc: Giulio Benetti <giulio.benetti@benettiengineering.com>
    Signed-off-by: Jesse Taube <Mr.Bossman075@gmail.com>
    Link: https://lore.kernel.org/r/20211215220538.4180616-8-Mr.Bossman075@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: a82c3df955f8 ("tty: serial: fsl_lpuart: reduce RX watermark to 0 on LS1028A")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20351ddb1f41cfb3ae20e105425ef43a28393d76
Author: Roger Quadros <rogerq@kernel.org>
Date:   Wed May 3 14:00:48 2023 +0300

    usb: dwc3: gadget: Improve dwc3_gadget_suspend() and dwc3_gadget_resume()
    
    [ Upstream commit c8540870af4ce6ddeb27a7bb5498b75fb29b643c ]
    
    Prevent -ETIMEDOUT error on .suspend().
    e.g. If gadget driver is loaded and we are connected to a USB host,
    all transfers must be stopped before stopping the controller else
    we will not get a clean stop i.e. dwc3_gadget_run_stop() will take
    several seconds to complete and will return -ETIMEDOUT.
    
    Handle error cases properly in dwc3_gadget_suspend().
    Simplify dwc3_gadget_resume() by using the introduced helper function.
    
    Fixes: 9f8a67b65a49 ("usb: dwc3: gadget: fix gadget suspend/resume")
    Cc: stable@vger.kernel.org
    Suggested-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Roger Quadros <rogerq@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230503110048.30617-1-rogerq@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31a0e60fe16bc0c923aca5bd90f437046544be23
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Apr 4 09:25:17 2023 +0200

    USB: dwc3: gadget: drop dead hibernation code
    
    [ Upstream commit bdb19d01026a5cccfa437be8adcf2df472c5889e ]
    
    The hibernation code is broken and has never been enabled in mainline
    and should thus be dropped.
    
    Remove the hibernation bits from the gadget code, which effectively
    reverts commits e1dadd3b0f27 ("usb: dwc3: workaround: bogus hibernation
    events") and 7b2a0368bbc9 ("usb: dwc3: gadget: set KEEP_CONNECT in case
    of hibernation") except for the spurious interrupt warning.
    
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20230404072524.19014-5-johan+linaro@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: c8540870af4c ("usb: dwc3: gadget: Improve dwc3_gadget_suspend() and dwc3_gadget_resume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9e004104e45c8c46715b2740725535baf8dfa7c
Author: Kushagra Verma <kushagra765@outlook.com>
Date:   Tue Sep 13 19:56:49 2022 +0530

    usb: dwc3: Fix typos in gadget.c
    
    [ Upstream commit af870d93c706c302a8742d7c751a60a832f7bc64 ]
    
    Fixes the following two typos:
       1. reinitate -> reinitiate
       2. revison -> revision
    
    Signed-off-by: Kushagra Verma <kushagra765@outlook.com>
    Link: https://lore.kernel.org/r/HK0PR01MB280110FAB74B4B2ACE32EA5FF8479@HK0PR01MB2801.apcprd01.prod.exchangelabs.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: c8540870af4c ("usb: dwc3: gadget: Improve dwc3_gadget_suspend() and dwc3_gadget_resume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fa487a9466760a4fb6f147aed6219379dabfc2e
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Thu Sep 1 12:36:22 2022 -0700

    usb: dwc3: Remove DWC3 locking during gadget suspend/resume
    
    [ Upstream commit 5265397f94424eaea596026fd34dc7acf474dcec ]
    
    Remove the need for making dwc3_gadget_suspend() and dwc3_gadget_resume()
    to be called in a spinlock, as dwc3_gadget_run_stop() could potentially
    take some time to complete.
    
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Link: https://lore.kernel.org/r/20220901193625.8727-3-quic_wcheng@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: c8540870af4c ("usb: dwc3: gadget: Improve dwc3_gadget_suspend() and dwc3_gadget_resume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7dfb384e76ee72e57c0df198baf0056533238741
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Wed Aug 17 11:23:53 2022 -0700

    usb: dwc3: gadget: Synchronize IRQ between soft connect/disconnect
    
    [ Upstream commit 9711c67de7482c81e1daca3548fbc5c9603600e3 ]
    
    Ensure that there are no pending events being handled in between soft
    connect/disconnect transitions.  As we are keeping interrupts enabled,
    and EP0 events are still being serviced, this avoids any stale events from
    being serviced.
    
    Reviewed-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Link: https://lore.kernel.org/r/20220817182359.13550-4-quic_wcheng@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: c8540870af4c ("usb: dwc3: gadget: Improve dwc3_gadget_suspend() and dwc3_gadget_resume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3c82f24ee695e4e181ee420e7e7b77760faeb3c
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Tue Mar 28 10:45:24 2023 -0400

    drm/amd/display: fix access hdcp_workqueue assert
    
    [ Upstream commit cdff36a0217aadf5cbc167893ad1c0da869619cb ]
    
    [Why] hdcp are enabled for asics from raven. for old asics
    which hdcp are not enabled, hdcp_workqueue are null. some
    access to hdcp work queue are not guarded with pointer check.
    
    [How] add hdcp_workqueue pointer check before access workqueue.
    
    Reviewed-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ba6c7ba081e4ee55f326d46e56c3f6e3419fea1
Author: hersen wu <hersenxs.wu@amd.com>
Date:   Tue Nov 15 14:20:56 2022 -0500

    drm/amd/display: phase3 mst hdcp for multiple displays
    
    [ Upstream commit e8fd3eeb5e8711af39b00642da06474e52f4780c ]
    
    [Why]
    multiple display hdcp are enabled within event_property_validate,
    event_property_update by looping all displays on mst hub. when
    one of display on mst hub in unplugged or disabled, hdcp are
    disabled for all displays on mst hub within hdcp_reset_display
    by looping all displays of mst link. for displays still active,
    their encryption status are off. kernel driver will not run hdcp
    authentication again. therefore, hdcp are not enabled automatically.
    
    [How]
    within is_content_protection_different, check drm_crtc_state changes
    of all displays on mst hub, if need, triger hdcp_update_display to
    re-run hdcp authentication.
    
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: hersen wu <hersenxs.wu@amd.com>
    Reviewed-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: cdff36a0217a ("drm/amd/display: fix access hdcp_workqueue assert")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99c444d3c3c43db354b253d9bfac081073dcb484
Author: hersen wu <hersenxs.wu@amd.com>
Date:   Tue Nov 15 10:39:55 2022 -0500

    drm/amd/display: save restore hdcp state when display is unplugged from mst hub
    
    [ Upstream commit 82986fd631fa04bcedaefe11a6b3767601cbe84f ]
    
    [Why]
    connector hdcp properties are lost after display is
    unplgged from mst hub. connector is destroyed with
    dm_dp_mst_connector_destroy. when display is plugged
    back, hdcp is not desired and it wouldnt be enabled.
    
    [How]
    save hdcp properties into hdcp_work within
    amdgpu_dm_atomic_commit_tail. If the same display is
    plugged back with same display index, its hdcp
    properties will be retrieved from hdcp_work within
    dm_dp_mst_get_modes.
    
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: hersen wu <hersenxs.wu@amd.com>
    Reviewed-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: cdff36a0217a ("drm/amd/display: fix access hdcp_workqueue assert")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f1beb75f6525516d2bc9efe7792c0a48d459b5f
Author: Zev Weiss <zev@bewilderbeest.net>
Date:   Thu Feb 23 16:04:00 2023 -0800

    ARM: dts: aspeed: asrock: Correct firmware flash SPI clocks
    
    [ Upstream commit 9dedb724446913ea7b1591b4b3d2e3e909090980 ]
    
    While I'm not aware of any problems that have occurred running these
    at 100 MHz, the official word from ASRock is that 50 MHz is the
    correct speed to use, so let's be safe and use that instead.
    
    Signed-off-by: Zev Weiss <zev@bewilderbeest.net>
    Cc: stable@vger.kernel.org
    Fixes: 2b81613ce417 ("ARM: dts: aspeed: Add ASRock E3C246D4I BMC")
    Fixes: a9a3d60b937a ("ARM: dts: aspeed: Add ASRock ROMED8HM3 BMC")
    Link: https://lore.kernel.org/r/20230224000400.12226-4-zev@bewilderbeest.net
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f84c2ca3490c38b399d523f1f6a6c644eb46504b
Author: Song Yoong Siang <yoong.siang.song@intel.com>
Date:   Tue May 2 08:48:06 2023 -0700

    igc: read before write to SRRCTL register
    
    [ Upstream commit 3ce29c17dc847bf4245e16aad78a7617afa96297 ]
    
    igc_configure_rx_ring() function will be called as part of XDP program
    setup. If Rx hardware timestamp is enabled prio to XDP program setup,
    this timestamp enablement will be overwritten when buffer size is
    written into SRRCTL register.
    
    Thus, this commit read the register value before write to SRRCTL
    register. This commit is tested by using xdp_hw_metadata bpf selftest
    tool. The tool enables Rx hardware timestamp and then attach XDP program
    to igc driver. It will display hardware timestamp of UDP packet with
    port number 9092. Below are detail of test steps and results.
    
    Command on DUT:
      sudo ./xdp_hw_metadata <interface name>
    
    Command on Link Partner:
      echo -n skb | nc -u -q1 <destination IPv4 addr> 9092
    
    Result before this patch:
      skb hwtstamp is not found!
    
    Result after this patch:
      found skb hwtstamp = 1677800973.642836757
    
    Optionally, read PHC to confirm the values obtained are almost the same:
    Command:
      sudo ./testptp -d /dev/ptp0 -g
    Result:
      clock time: 1677800973.913598978 or Fri Mar  3 07:49:33 2023
    
    Fixes: fc9df2a0b520 ("igc: Enable RX via AF_XDP zero-copy")
    Cc: <stable@vger.kernel.org> # 5.14+
    Signed-off-by: Song Yoong Siang <yoong.siang.song@intel.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Tested-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fa82f031af8d30431ee0ce92ecae477be66585c
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Apr 6 10:40:11 2023 -0400

    iio: addac: stx104: Fix race condition when converting analog-to-digital
    
    [ Upstream commit 4f9b80aefb9e2f542a49d9ec087cf5919730e1dd ]
    
    The ADC conversion procedure requires several device I/O operations
    performed in a particular sequence. If stx104_read_raw() is called
    concurrently, the ADC conversion procedure could be clobbered. Prevent
    such a race condition by utilizing a mutex.
    
    Fixes: 4075a283ae83 ("iio: stx104: Add IIO support for the ADC channels")
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/2ae5e40eed5006ca735e4c12181a9ff5ced65547.1680790580.git.william.gray@linaro.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d31d04ec404c4464c043ce1a61358d0eaad05eeb
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Apr 6 10:40:10 2023 -0400

    iio: addac: stx104: Fix race condition for stx104_write_raw()
    
    [ Upstream commit 9740827468cea80c42db29e7171a50e99acf7328 ]
    
    The priv->chan_out_states array and actual DAC value can become
    mismatched if stx104_write_raw() is called concurrently. Prevent such a
    race condition by utilizing a mutex.
    
    Fixes: 97a445dad37a ("iio: Add IIO support for the DAC on the Apex Embedded Systems STX104")
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/c95c9a77fcef36b2a052282146950f23bbc1ebdc.1680790580.git.william.gray@linaro.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89a007f3a38359332136b48cf45a3d768fe76b1c
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Mon Aug 15 18:29:21 2022 -0400

    iio: stx104: Move to addac subdirectory
    
    [ Upstream commit 955c2aa9cff2dd07ff798ca8c883398731687972 ]
    
    The stx104 driver supports both ADC and DAC functionality.
    
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/20220815222921.138945-1-william.gray@linaro.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cadf8f2d7c9d06c3574a23745069fe4a73b62312
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Jul 7 13:21:24 2022 -0400

    iio: adc: stx104: Implement and utilize register structures
    
    [ Upstream commit 6cfd14c54b1f42f29097244c1b6208f8268d7d5b ]
    
    Reduce magic numbers and improve code readability by implementing and
    utilizing named register data structures.
    
    Tested-by: Fred Eckert <Frede@cmslaser.com>
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/8cb91d5b53e57b066120e42ea07000d6c7ef5543.1657213745.git.william.gray@linaro.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6089d354346f8e04f4354f09f873ae5d94cd8e05
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Tue May 10 13:30:59 2022 -0400

    iio: adc: stx104: Utilize iomap interface
    
    [ Upstream commit 73b8390cc27e096ab157be261ccc4eaaa6db87af ]
    
    This driver doesn't need to access I/O ports directly via inb()/outb()
    and friends. This patch abstracts such access by calling ioport_map()
    to enable the use of more typical ioread8()/iowrite8() I/O memory
    accessor calls.
    
    Suggested-by: David Laight <David.Laight@ACULAB.COM>
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/64673797df382c52fc32fce24348b25a0b05e73a.1652201921.git.william.gray@linaro.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 565b96d9a7ab68276d88a265ebe71c05026c7ceb
Author: Cosmin Tanislav <demonsingur@gmail.com>
Date:   Sun Dec 5 13:40:43 2021 +0200

    iio: add addac subdirectory
    
    [ Upstream commit b62e2e1763cda3a6c494ed754317f19be1249297 ]
    
    For IIO devices that expose both ADC and DAC functionality.
    
    Signed-off-by: Cosmin Tanislav <cosmin.tanislav@analog.com>
    Link: https://lore.kernel.org/r/20211205114045.173612-2-cosmin.tanislav@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49b830d75f03d5dd41146d10e4d3e2a8211c4b94
Author: Chen Lin <chen.lin5@zte.com.cn>
Date:   Wed Jul 19 15:58:47 2023 +0800

    ring-buffer: Do not swap cpu_buffer during resize process
    
    [ Upstream commit 8a96c0288d0737ad77882024974c075345c72011 ]
    
    When ring_buffer_swap_cpu was called during resize process,
    the cpu buffer was swapped in the middle, resulting in incorrect state.
    Continuing to run in the wrong state will result in oops.
    
    This issue can be easily reproduced using the following two scripts:
    /tmp # cat test1.sh
    //#! /bin/sh
    for i in `seq 0 100000`
    do
             echo 2000 > /sys/kernel/debug/tracing/buffer_size_kb
             sleep 0.5
             echo 5000 > /sys/kernel/debug/tracing/buffer_size_kb
             sleep 0.5
    done
    /tmp # cat test2.sh
    //#! /bin/sh
    for i in `seq 0 100000`
    do
            echo irqsoff > /sys/kernel/debug/tracing/current_tracer
            sleep 1
            echo nop > /sys/kernel/debug/tracing/current_tracer
            sleep 1
    done
    /tmp # ./test1.sh &
    /tmp # ./test2.sh &
    
    A typical oops log is as follows, sometimes with other different oops logs.
    
    [  231.711293] WARNING: CPU: 0 PID: 9 at kernel/trace/ring_buffer.c:2026 rb_update_pages+0x378/0x3f8
    [  231.713375] Modules linked in:
    [  231.714735] CPU: 0 PID: 9 Comm: kworker/0:1 Tainted: G        W          6.5.0-rc1-00276-g20edcec23f92 #15
    [  231.716750] Hardware name: linux,dummy-virt (DT)
    [  231.718152] Workqueue: events update_pages_handler
    [  231.719714] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    [  231.721171] pc : rb_update_pages+0x378/0x3f8
    [  231.722212] lr : rb_update_pages+0x25c/0x3f8
    [  231.723248] sp : ffff800082b9bd50
    [  231.724169] x29: ffff800082b9bd50 x28: ffff8000825f7000 x27: 0000000000000000
    [  231.726102] x26: 0000000000000001 x25: fffffffffffff010 x24: 0000000000000ff0
    [  231.728122] x23: ffff0000c3a0b600 x22: ffff0000c3a0b5c0 x21: fffffffffffffe0a
    [  231.730203] x20: ffff0000c3a0b600 x19: ffff0000c0102400 x18: 0000000000000000
    [  231.732329] x17: 0000000000000000 x16: 0000000000000000 x15: 0000ffffe7aa8510
    [  231.734212] x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000000002
    [  231.736291] x11: ffff8000826998a8 x10: ffff800082b9baf0 x9 : ffff800081137558
    [  231.738195] x8 : fffffc00030e82c8 x7 : 0000000000000000 x6 : 0000000000000001
    [  231.740192] x5 : ffff0000ffbafe00 x4 : 0000000000000000 x3 : 0000000000000000
    [  231.742118] x2 : 00000000000006aa x1 : 0000000000000001 x0 : ffff0000c0007208
    [  231.744196] Call trace:
    [  231.744892]  rb_update_pages+0x378/0x3f8
    [  231.745893]  update_pages_handler+0x1c/0x38
    [  231.746893]  process_one_work+0x1f0/0x468
    [  231.747852]  worker_thread+0x54/0x410
    [  231.748737]  kthread+0x124/0x138
    [  231.749549]  ret_from_fork+0x10/0x20
    [  231.750434] ---[ end trace 0000000000000000 ]---
    [  233.720486] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
    [  233.721696] Mem abort info:
    [  233.721935]   ESR = 0x0000000096000004
    [  233.722283]   EC = 0x25: DABT (current EL), IL = 32 bits
    [  233.722596]   SET = 0, FnV = 0
    [  233.722805]   EA = 0, S1PTW = 0
    [  233.723026]   FSC = 0x04: level 0 translation fault
    [  233.723458] Data abort info:
    [  233.723734]   ISV = 0, ISS = 0x00000004, ISS2 = 0x00000000
    [  233.724176]   CM = 0, WnR = 0, TnD = 0, TagAccess = 0
    [  233.724589]   GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0
    [  233.725075] user pgtable: 4k pages, 48-bit VAs, pgdp=0000000104943000
    [  233.725592] [0000000000000000] pgd=0000000000000000, p4d=0000000000000000
    [  233.726231] Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP
    [  233.726720] Modules linked in:
    [  233.727007] CPU: 0 PID: 9 Comm: kworker/0:1 Tainted: G        W          6.5.0-rc1-00276-g20edcec23f92 #15
    [  233.727777] Hardware name: linux,dummy-virt (DT)
    [  233.728225] Workqueue: events update_pages_handler
    [  233.728655] pstate: 200000c5 (nzCv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    [  233.729054] pc : rb_update_pages+0x1a8/0x3f8
    [  233.729334] lr : rb_update_pages+0x154/0x3f8
    [  233.729592] sp : ffff800082b9bd50
    [  233.729792] x29: ffff800082b9bd50 x28: ffff8000825f7000 x27: 0000000000000000
    [  233.730220] x26: 0000000000000000 x25: ffff800082a8b840 x24: ffff0000c0102418
    [  233.730653] x23: 0000000000000000 x22: fffffc000304c880 x21: 0000000000000003
    [  233.731105] x20: 00000000000001f4 x19: ffff0000c0102400 x18: ffff800082fcbc58
    [  233.731727] x17: 0000000000000000 x16: 0000000000000001 x15: 0000000000000001
    [  233.732282] x14: ffff8000825fe0c8 x13: 0000000000000001 x12: 0000000000000000
    [  233.732709] x11: ffff8000826998a8 x10: 0000000000000ae0 x9 : ffff8000801b760c
    [  233.733148] x8 : fefefefefefefeff x7 : 0000000000000018 x6 : ffff0000c03298c0
    [  233.733553] x5 : 0000000000000002 x4 : 0000000000000000 x3 : 0000000000000000
    [  233.733972] x2 : ffff0000c3a0b600 x1 : 0000000000000000 x0 : 0000000000000000
    [  233.734418] Call trace:
    [  233.734593]  rb_update_pages+0x1a8/0x3f8
    [  233.734853]  update_pages_handler+0x1c/0x38
    [  233.735148]  process_one_work+0x1f0/0x468
    [  233.735525]  worker_thread+0x54/0x410
    [  233.735852]  kthread+0x124/0x138
    [  233.736064]  ret_from_fork+0x10/0x20
    [  233.736387] Code: 92400000 910006b5 aa000021 aa0303f7 (f9400060)
    [  233.736959] ---[ end trace 0000000000000000 ]---
    
    After analysis, the seq of the error is as follows [1-5]:
    
    int ring_buffer_resize(struct trace_buffer *buffer, unsigned long size,
                            int cpu_id)
    {
            for_each_buffer_cpu(buffer, cpu) {
                    cpu_buffer = buffer->buffers[cpu];
                    //1. get cpu_buffer, aka cpu_buffer(A)
                    ...
                    ...
                    schedule_work_on(cpu,
                     &cpu_buffer->update_pages_work);
                    //2. 'update_pages_work' is queue on 'cpu', cpu_buffer(A) is passed to
                    // update_pages_handler, do the update process, set 'update_done' in
                    // complete(&cpu_buffer->update_done) and to wakeup resize process.
            //---->
                    //3. Just at this moment, ring_buffer_swap_cpu is triggered,
                    //cpu_buffer(A) be swaped to cpu_buffer(B), the max_buffer.
                    //ring_buffer_swap_cpu is called as the 'Call trace' below.
    
                    Call trace:
                     dump_backtrace+0x0/0x2f8
                     show_stack+0x18/0x28
                     dump_stack+0x12c/0x188
                     ring_buffer_swap_cpu+0x2f8/0x328
                     update_max_tr_single+0x180/0x210
                     check_critical_timing+0x2b4/0x2c8
                     tracer_hardirqs_on+0x1c0/0x200
                     trace_hardirqs_on+0xec/0x378
                     el0_svc_common+0x64/0x260
                     do_el0_svc+0x90/0xf8
                     el0_svc+0x20/0x30
                     el0_sync_handler+0xb0/0xb8
                     el0_sync+0x180/0x1c0
            //<----
    
            /* wait for all the updates to complete */
            for_each_buffer_cpu(buffer, cpu) {
                    cpu_buffer = buffer->buffers[cpu];
                    //4. get cpu_buffer, cpu_buffer(B) is used in the following process,
                    //the state of cpu_buffer(A) and cpu_buffer(B) is totally wrong.
                    //for example, cpu_buffer(A)->update_done will leave be set 1, and will
                    //not 'wait_for_completion' at the next resize round.
                      if (!cpu_buffer->nr_pages_to_update)
                            continue;
    
                    if (cpu_online(cpu))
                            wait_for_completion(&cpu_buffer->update_done);
                    cpu_buffer->nr_pages_to_update = 0;
            }
            ...
    }
            //5. the state of cpu_buffer(A) and cpu_buffer(B) is totally wrong,
            //Continuing to run in the wrong state, then oops occurs.
    
    Link: https://lore.kernel.org/linux-trace-kernel/202307191558478409990@zte.com.cn
    
    Signed-off-by: Chen Lin <chen.lin5@zte.com.cn>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6657ecbcc39cccf51a843538006b5eefcad927d8
Author: Benjamin Gray <bgray@linux.ibm.com>
Date:   Mon Jul 10 14:41:43 2023 +1000

    powerpc/kasan: Disable KCOV in KASAN code
    
    [ Upstream commit ccb381e1af1ace292153c88eb1fffa5683d16a20 ]
    
    As per the generic KASAN code in mm/kasan, disable KCOV with
    KCOV_INSTRUMENT := n in the makefile.
    
    This fixes a ppc64 boot hang when KCOV and KASAN are enabled.
    kasan_early_init() gets called before a PACA is initialised, but the
    KCOV hook expects a valid PACA.
    
    Suggested-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Benjamin Gray <bgray@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230710044143.146840-1-bgray@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8703b26387e1fa4f8749db98d24c67617b873acb
Author: Tuo Li <islituo@gmail.com>
Date:   Mon Jul 3 11:10:16 2023 +0800

    ALSA: hda: fix a possible null-pointer dereference due to data race in snd_hdac_regmap_sync()
    
    [ Upstream commit 1f4a08fed450db87fbb5ff5105354158bdbe1a22 ]
    
    The variable codec->regmap is often protected by the lock
    codec->regmap_lock when is accessed. However, it is accessed without
    holding the lock when is accessed in snd_hdac_regmap_sync():
    
      if (codec->regmap)
    
    In my opinion, this may be a harmful race, because if codec->regmap is
    set to NULL right after the condition is checked, a null-pointer
    dereference can occur in the called function regcache_sync():
    
      map->lock(map->lock_arg); --> Line 360 in drivers/base/regmap/regcache.c
    
    To fix this possible null-pointer dereference caused by data race, the
    mutex_lock coverage is extended to protect the if statement as well as the
    function call to regcache_sync().
    
    [ Note: the lack of the regmap_lock itself is harmless for the current
      codec driver implementations, as snd_hdac_regmap_sync() is only for
      PM runtime resume that is prohibited during the codec probe.
      But the change makes the whole code more consistent, so it's merged
      as is -- tiwai ]
    
    Reported-by: BassCheck <bass@buaa.edu.cn>
    Signed-off-by: Tuo Li <islituo@gmail.com>
    Link: https://lore.kernel.org/r/20230703031016.1184711-1-islituo@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ed4dbc137267ec55f6e51a19b66de2bbaa993d9
Author: dengxiang <dengxiang@nfschina.com>
Date:   Mon Jul 3 10:17:51 2023 +0800

    ALSA: hda/realtek: Add quirks for Unis H3C Desktop B760 & Q760
    
    [ Upstream commit 73f1c75d5e6bd8ce2a887ef493a66ad1b16ed704 ]
    
    These models use NSIWAY amplifiers for internal speaker, but cannot put
    sound outside from these amplifiers. So eapd verbs are needed to initialize
    the amplifiers. They can be added during boot to get working sound out
    of internal speaker.
    
    Signed-off-by: dengxiang <dengxiang@nfschina.com>
    Link: https://lore.kernel.org/r/20230703021751.2945750-1-dengxiang@nfschina.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7d8b5f46f06faad683dae416540d1ac6c5964e4
Author: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
Date:   Mon May 8 11:36:28 2023 +0400

    fs/ntfs3: Mark ntfs dirty when on-disk struct is corrupted
    
    [ Upstream commit e0f363a98830e8d7d70fbaf91c07ae0b7c57aafe ]
    
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a00ec562f8cb4c926583f1a18386c830ce3381f
Author: Jia-Ju Bai <baijiaju@buaa.edu.cn>
Date:   Tue Mar 21 21:22:11 2023 +0800

    fs: ntfs3: Fix possible null-pointer dereferences in mi_read()
    
    [ Upstream commit 97498cd610c0d030a7bd49a7efad974790661162 ]
    
    In a previous commit 2681631c2973 ("fs/ntfs3: Add null pointer check to
    attr_load_runs_vcn"), ni can be NULL in attr_load_runs_vcn(), and thus it
    should be checked before being used.
    
    However, in the call stack of this commit, mft_ni in mi_read() is
    aliased with ni in attr_load_runs_vcn(), and it is also used in
    mi_read() at two places:
    
    mi_read()
      rw_lock = &mft_ni->file.run_lock -> No check
      attr_load_runs_vcn(mft_ni, ...)
        ni (namely mft_ni) is checked in the previous commit
      attr_load_runs_vcn(..., &mft_ni->file.run) -> No check
    
    Thus, to avoid possible null-pointer dereferences, the related checks
    should be added.
    
    These bugs are reported by a static analysis tool implemented by myself,
    and they are found by extending a known bug fixed in the previous commit.
    Thus, they could be theoretical bugs.
    
    Signed-off-by: Jia-Ju Bai <baijiaju@buaa.edu.cn>
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7799bb4dbe26bfb665f29ea87981708fd6012d8
Author: Edward Lo <loyuantsung@gmail.com>
Date:   Thu Mar 16 10:56:55 2023 +0800

    fs/ntfs3: Enhance sanity check while generating attr_list
    
    [ Upstream commit fdec309c7672cbee4dc0229ee4cbb33c948a1bdd ]
    
    ni_create_attr_list uses WARN_ON to catch error cases while generating
    attribute list, which only prints out stack trace and may not be enough.
    This repalces them with more proper error handling flow.
    
    [   59.666332] BUG: kernel NULL pointer dereference, address: 000000000000000e
    [   59.673268] #PF: supervisor read access in kernel mode
    [   59.678354] #PF: error_code(0x0000) - not-present page
    [   59.682831] PGD 8000000005ff1067 P4D 8000000005ff1067 PUD 7dee067 PMD 0
    [   59.688556] Oops: 0000 [#1] PREEMPT SMP KASAN PTI
    [   59.692642] CPU: 0 PID: 198 Comm: poc Tainted: G    B   W          6.2.0-rc1+ #4
    [   59.698868] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    [   59.708795] RIP: 0010:ni_create_attr_list+0x505/0x860
    [   59.713657] Code: 7e 10 e8 5e d0 d0 ff 45 0f b7 76 10 48 8d 7b 16 e8 00 d1 d0 ff 66 44 89 73 16 4d 8d 75 0e 4c 89 f7 e8 3f d0 d0 ff 4c 8d8
    [   59.731559] RSP: 0018:ffff88800a56f1e0 EFLAGS: 00010282
    [   59.735691] RAX: 0000000000000001 RBX: ffff88800b7b5088 RCX: ffffffffb83079fe
    [   59.741792] RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffffffffbb7f9fc0
    [   59.748423] RBP: ffff88800a56f3a8 R08: ffff88800b7b50a0 R09: fffffbfff76ff3f9
    [   59.754654] R10: ffffffffbb7f9fc7 R11: fffffbfff76ff3f8 R12: ffff88800b756180
    [   59.761552] R13: 0000000000000000 R14: 000000000000000e R15: 0000000000000050
    [   59.768323] FS:  00007feaa8c96440(0000) GS:ffff88806d400000(0000) knlGS:0000000000000000
    [   59.776027] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.781395] CR2: 00007f3a2e0b1000 CR3: 000000000a5bc000 CR4: 00000000000006f0
    [   59.787607] Call Trace:
    [   59.790271]  <TASK>
    [   59.792488]  ? __pfx_ni_create_attr_list+0x10/0x10
    [   59.797235]  ? kernel_text_address+0xd3/0xe0
    [   59.800856]  ? unwind_get_return_address+0x3e/0x60
    [   59.805101]  ? __kasan_check_write+0x18/0x20
    [   59.809296]  ? preempt_count_sub+0x1c/0xd0
    [   59.813421]  ni_ins_attr_ext+0x52c/0x5c0
    [   59.817034]  ? __pfx_ni_ins_attr_ext+0x10/0x10
    [   59.821926]  ? __vfs_setxattr+0x121/0x170
    [   59.825718]  ? __vfs_setxattr_noperm+0x97/0x300
    [   59.829562]  ? __vfs_setxattr_locked+0x145/0x170
    [   59.833987]  ? vfs_setxattr+0x137/0x2a0
    [   59.836732]  ? do_setxattr+0xce/0x150
    [   59.839807]  ? setxattr+0x126/0x140
    [   59.842353]  ? path_setxattr+0x164/0x180
    [   59.845275]  ? __x64_sys_setxattr+0x71/0x90
    [   59.848838]  ? do_syscall_64+0x3f/0x90
    [   59.851898]  ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   59.857046]  ? stack_depot_save+0x17/0x20
    [   59.860299]  ni_insert_attr+0x1ba/0x420
    [   59.863104]  ? __pfx_ni_insert_attr+0x10/0x10
    [   59.867069]  ? preempt_count_sub+0x1c/0xd0
    [   59.869897]  ? _raw_spin_unlock_irqrestore+0x2b/0x50
    [   59.874088]  ? __create_object+0x3ae/0x5d0
    [   59.877865]  ni_insert_resident+0xc4/0x1c0
    [   59.881430]  ? __pfx_ni_insert_resident+0x10/0x10
    [   59.886355]  ? kasan_save_alloc_info+0x1f/0x30
    [   59.891117]  ? __kasan_kmalloc+0x8b/0xa0
    [   59.894383]  ntfs_set_ea+0x90d/0xbf0
    [   59.897703]  ? __pfx_ntfs_set_ea+0x10/0x10
    [   59.901011]  ? kernel_text_address+0xd3/0xe0
    [   59.905308]  ? __kernel_text_address+0x16/0x50
    [   59.909811]  ? unwind_get_return_address+0x3e/0x60
    [   59.914898]  ? __pfx_stack_trace_consume_entry+0x10/0x10
    [   59.920250]  ? arch_stack_walk+0xa2/0x100
    [   59.924560]  ? filter_irq_stacks+0x27/0x80
    [   59.928722]  ntfs_setxattr+0x405/0x440
    [   59.932512]  ? __pfx_ntfs_setxattr+0x10/0x10
    [   59.936634]  ? kvmalloc_node+0x2d/0x120
    [   59.940378]  ? kasan_save_stack+0x41/0x60
    [   59.943870]  ? kasan_save_stack+0x2a/0x60
    [   59.947719]  ? kasan_set_track+0x29/0x40
    [   59.951417]  ? kasan_save_alloc_info+0x1f/0x30
    [   59.955733]  ? __kasan_kmalloc+0x8b/0xa0
    [   59.959598]  ? __kmalloc_node+0x68/0x150
    [   59.963163]  ? kvmalloc_node+0x2d/0x120
    [   59.966490]  ? vmemdup_user+0x2b/0xa0
    [   59.969060]  __vfs_setxattr+0x121/0x170
    [   59.972456]  ? __pfx___vfs_setxattr+0x10/0x10
    [   59.976008]  __vfs_setxattr_noperm+0x97/0x300
    [   59.981562]  __vfs_setxattr_locked+0x145/0x170
    [   59.986100]  vfs_setxattr+0x137/0x2a0
    [   59.989964]  ? __pfx_vfs_setxattr+0x10/0x10
    [   59.993616]  ? __kasan_check_write+0x18/0x20
    [   59.997425]  do_setxattr+0xce/0x150
    [   60.000304]  setxattr+0x126/0x140
    [   60.002967]  ? __pfx_setxattr+0x10/0x10
    [   60.006471]  ? __virt_addr_valid+0xcb/0x140
    [   60.010461]  ? __call_rcu_common.constprop.0+0x1c7/0x330
    [   60.016037]  ? debug_smp_processor_id+0x1b/0x30
    [   60.021008]  ? kasan_quarantine_put+0x5b/0x190
    [   60.025545]  ? putname+0x84/0xa0
    [   60.027910]  ? __kasan_slab_free+0x11e/0x1b0
    [   60.031483]  ? putname+0x84/0xa0
    [   60.033986]  ? preempt_count_sub+0x1c/0xd0
    [   60.036876]  ? __mnt_want_write+0xae/0x100
    [   60.040738]  ? mnt_want_write+0x8f/0x150
    [   60.044317]  path_setxattr+0x164/0x180
    [   60.048096]  ? __pfx_path_setxattr+0x10/0x10
    [   60.052096]  ? strncpy_from_user+0x175/0x1c0
    [   60.056482]  ? debug_smp_processor_id+0x1b/0x30
    [   60.059848]  ? fpregs_assert_state_consistent+0x6b/0x80
    [   60.064557]  __x64_sys_setxattr+0x71/0x90
    [   60.068892]  do_syscall_64+0x3f/0x90
    [   60.072868]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   60.077523] RIP: 0033:0x7feaa86e4469
    [   60.080915] Code: 00 f3 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 088
    [   60.097353] RSP: 002b:00007ffdbd8311e8 EFLAGS: 00000286 ORIG_RAX: 00000000000000bc
    [   60.103386] RAX: ffffffffffffffda RBX: 9461c5e290baac00 RCX: 00007feaa86e4469
    [   60.110322] RDX: 00007ffdbd831fe0 RSI: 00007ffdbd831305 RDI: 00007ffdbd831263
    [   60.116808] RBP: 00007ffdbd836180 R08: 0000000000000001 R09: 00007ffdbd836268
    [   60.123879] R10: 000000000000007d R11: 0000000000000286 R12: 0000000000400500
    [   60.130540] R13: 00007ffdbd836260 R14: 0000000000000000 R15: 0000000000000000
    [   60.136553]  </TASK>
    [   60.138818] Modules linked in:
    [   60.141839] CR2: 000000000000000e
    [   60.144831] ---[ end trace 0000000000000000 ]---
    [   60.149058] RIP: 0010:ni_create_attr_list+0x505/0x860
    [   60.153975] Code: 7e 10 e8 5e d0 d0 ff 45 0f b7 76 10 48 8d 7b 16 e8 00 d1 d0 ff 66 44 89 73 16 4d 8d 75 0e 4c 89 f7 e8 3f d0 d0 ff 4c 8d8
    [   60.172443] RSP: 0018:ffff88800a56f1e0 EFLAGS: 00010282
    [   60.176246] RAX: 0000000000000001 RBX: ffff88800b7b5088 RCX: ffffffffb83079fe
    [   60.182752] RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffffffffbb7f9fc0
    [   60.189949] RBP: ffff88800a56f3a8 R08: ffff88800b7b50a0 R09: fffffbfff76ff3f9
    [   60.196950] R10: ffffffffbb7f9fc7 R11: fffffbfff76ff3f8 R12: ffff88800b756180
    [   60.203671] R13: 0000000000000000 R14: 000000000000000e R15: 0000000000000050
    [   60.209595] FS:  00007feaa8c96440(0000) GS:ffff88806d400000(0000) knlGS:0000000000000000
    [   60.216299] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   60.222276] CR2: 00007f3a2e0b1000 CR3: 000000000a5bc000 CR4: 00000000000006f0
    
    Signed-off-by: Edward Lo <loyuantsung@gmail.com>
    Signed-off-by: Konstantin Komarov <almaz.alexandrovich@paragon-software.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef568da1fd843581e855c79a368209b752dea2c1
Author: shanzhulig <shanzhulig@gmail.com>
Date:   Tue Jun 27 18:10:47 2023 -0700

    drm/amdgpu: Fix potential fence use-after-free v2
    
    [ Upstream commit 2e54154b9f27262efd0cb4f903cc7d5ad1fe9628 ]
    
    fence Decrements the reference count before exiting.
    Avoid Race Vulnerabilities for fence use-after-free.
    
    v2 (chk): actually fix the use after free and not just move it.
    
    Signed-off-by: shanzhulig <shanzhulig@gmail.com>
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5720c7e185d4b421cb317feb73b36896e0751272
Author: Matthew Anderson <ruinairas1992@gmail.com>
Date:   Sat Jun 24 12:08:10 2023 -0500

    Bluetooth: btusb: Add MT7922 bluetooth ID for the Asus Ally
    
    [ Upstream commit fa01eba11f0e57c767a5eab5291c7a01407a00be ]
    
    Adding the device ID from the Asus Ally gets the bluetooth working
    on the device.
    
    Signed-off-by: Matthew Anderson <ruinairas1992@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 548a6b64b3c0688f01119a6fcccceb41f8c984e4
Author: Zhengping Jiang <jiangzp@google.com>
Date:   Wed May 24 17:04:15 2023 -0700

    Bluetooth: L2CAP: Fix use-after-free
    
    [ Upstream commit f752a0b334bb95fe9b42ecb511e0864e2768046f ]
    
    Fix potential use-after-free in l2cap_le_command_rej.
    
    Signed-off-by: Zhengping Jiang <jiangzp@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 302d04596364e073351bdcfe91bdeeb3ebd64242
Author: Yuechao Zhao <yuechao.zhao@advantech.com.cn>
Date:   Mon Jun 12 11:19:07 2023 +0800

    watchdog: sp5100_tco: support Hygon FCH/SCH (Server Controller Hub)
    
    [ Upstream commit 009637de1f65cff452ad49554d1e8ef9fda99e43 ]
    
    Add PCI_VENDOR_ID_HYGON(Hygon vendor id [0x1d94]) in this driver
    
    Signed-off-by: Yuechao Zhao <yuechao.zhao@advantech.com.cn>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lkml.kernel.org/r/20230612031907.796461-1-a345351830@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ea70379e4f4efa95c9daa7f3f9bdd4d40aec927
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Fri Jun 23 13:39:35 2023 +0800

    firewire: net: fix use after free in fwnet_finish_incoming_packet()
    
    [ Upstream commit 3ff256751a2853e1ffaa36958ff933ccc98c6cb5 ]
    
    The netif_rx() function frees the skb so we can't dereference it to
    save the skb->len.
    
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Link: https://lore.kernel.org/r/tencent_3B3D24B66ED66A6BB73CC0E63C6A14E45109@qq.com
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97fd1c8e9c5aa833aab7e836760bc13103afa892
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Fri May 12 20:45:29 2023 +0200

    pcmcia: rsrc_nonstatic: Fix memory leak in nonstatic_release_resource_db()
    
    [ Upstream commit c85fd9422fe0f5d667305efb27f56d09eab120b0 ]
    
    When nonstatic_release_resource_db() frees all resources associated
    with an PCMCIA socket, it forgets to free socket_data too, causing
    a memory leak observable with kmemleak:
    
    unreferenced object 0xc28d1000 (size 64):
      comm "systemd-udevd", pid 297, jiffies 4294898478 (age 194.484s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 f0 85 0e c3 00 00 00 00  ................
        00 00 00 00 0c 10 8d c2 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<ffda4245>] __kmem_cache_alloc_node+0x2d7/0x4a0
        [<7e51f0c8>] kmalloc_trace+0x31/0xa4
        [<d52b4ca0>] nonstatic_init+0x24/0x1a4 [pcmcia_rsrc]
        [<a2f13e08>] pcmcia_register_socket+0x200/0x35c [pcmcia_core]
        [<a728be1b>] yenta_probe+0x4d8/0xa70 [yenta_socket]
        [<c48fac39>] pci_device_probe+0x99/0x194
        [<84b7c690>] really_probe+0x181/0x45c
        [<8060fe6e>] __driver_probe_device+0x75/0x1f4
        [<b9b76f43>] driver_probe_device+0x28/0xac
        [<648b766f>] __driver_attach+0xeb/0x1e4
        [<6e9659eb>] bus_for_each_dev+0x61/0xb4
        [<25a669f3>] driver_attach+0x1e/0x28
        [<d8671d6b>] bus_add_driver+0x102/0x20c
        [<df0d323c>] driver_register+0x5b/0x120
        [<942cd8a4>] __pci_register_driver+0x44/0x4c
        [<e536027e>] __UNIQUE_ID___addressable_cleanup_module188+0x1c/0xfffff000 [iTCO_vendor_support]
    
    Fix this by freeing socket_data too.
    
    Tested on a Acer Travelmate 4002WLMi by manually binding/unbinding
    the yenta_cardbus driver (yenta_socket).
    
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Message-ID: <20230512184529.5094-1-W_Armin@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85e888150075cb221270b64bf772341fc6bd11d9
Author: Tuo Li <islituo@gmail.com>
Date:   Tue Jun 13 11:06:37 2023 +0800

    gfs2: Fix possible data races in gfs2_show_options()
    
    [ Upstream commit 6fa0a72cbbe45db4ed967a51f9e6f4e3afe61d20 ]
    
    Some fields such as gt_logd_secs of the struct gfs2_tune are accessed
    without holding the lock gt_spin in gfs2_show_options():
    
      val = sdp->sd_tune.gt_logd_secs;
      if (val != 30)
        seq_printf(s, ",commit=%d", val);
    
    And thus can cause data races when gfs2_show_options() and other functions
    such as gfs2_reconfigure() are concurrently executed:
    
      spin_lock(&gt->gt_spin);
      gt->gt_logd_secs = newargs->ar_commit;
    
    To fix these possible data races, the lock sdp->sd_tune.gt_spin is
    acquired before accessing the fields of gfs2_tune and released after these
    accesses.
    
    Further changes by Andreas:
    
    - Don't hold the spin lock over the seq_printf operations.
    
    Reported-by: BassCheck <bass@buaa.edu.cn>
    Signed-off-by: Tuo Li <islituo@gmail.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eafb79d2448a027deb30bc0a486028ed190a9f7a
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Wed May 17 16:19:07 2023 +0800

    usb: chipidea: imx: add missing USB PHY DPDM wakeup setting
    
    [ Upstream commit 53d061c19dc4cb68409df6dc11c40389c8c42a75 ]
    
    USB PHY DPDM wakeup bit is enabled by default, when USB wakeup
    is not required(/sys/.../wakeup is disabled), this bit should be
    disabled, otherwise we will have unexpected wakeup if do USB device
    connect/disconnect while system sleep.
    This bit can be enabled for both host and device mode.
    
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Message-ID: <20230517081907.3410465-3-xu.yang_2@nxp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bdb4c96304937b865dc7d8142f71802d758907b
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Tue May 30 18:40:07 2023 +0800

    usb: chipidea: imx: don't request QoS for imx8ulp
    
    [ Upstream commit 9a070e8e208995a9d638b538ed7abf28bd6ea6f0 ]
    
    Use dedicated imx8ulp usb compatible to remove QoS request
    since imx8ulp has no such limitation of imx7ulp: DMA will
    not work if system enters idle.
    
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Message-ID: <20230530104007.1294702-2-xu.yang_2@nxp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25decbbb66e48f108c8bd7bdac070b42b0e1a24b
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri May 26 14:46:44 2023 +0300

    thunderbolt: Read retimer NVM authentication status prior tb_retimer_set_inbound_sbtx()
    
    [ Upstream commit 1402ba08abae5cfa583ff1a40b99c098a0532d41 ]
    
    According to the USB4 retimer guide the correct order is immediately
    after sending ENUMERATE_RETIMERS so update the code to follow this.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 776b34615a29551d69d82a0082e7319d5ea284bd
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Wed May 24 13:11:47 2023 +0100

    media: platform: mediatek: vpu: fix NULL ptr dereference
    
    [ Upstream commit 3df55cd773e8603b623425cc97b05e542854ad27 ]
    
    If pdev is NULL, then it is still dereferenced.
    
    This fixes this smatch warning:
    
    drivers/media/platform/mediatek/vpu/mtk_vpu.c:570 vpu_load_firmware() warn: address of NULL pointer 'pdev'
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: Yunfei Dong <yunfei.dong@mediatek.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb174344bf85d29d3c53180ac75a55dfbb45a56e
Author: Prashanth K <quic_prashk@quicinc.com>
Date:   Tue May 9 18:57:52 2023 +0530

    usb: gadget: u_serial: Avoid spinlock recursion in __gs_console_push
    
    [ Upstream commit e5990469943c711cb00bfde6338d2add6c6d0bfe ]
    
    When serial console over USB is enabled, gs_console_connect
    queues gs_console_work, where it acquires the spinlock and
    queues the usb request, and this request goes to gadget layer.
    Now consider a situation where gadget layer prints something
    to dmesg, this will eventually call gs_console_write() which
    requires cons->lock. And this causes spinlock recursion. Avoid
    this by excluding usb_ep_queue from the spinlock.
    
     spin_lock_irqsave //needs cons->lock
     gs_console_write
            .
            .
     _printk
     __warn_printk
     dev_warn/pr_err
            .
            .
     [USB Gadget Layer]
            .
            .
     usb_ep_queue
     gs_console_work
     __gs_console_push // acquires cons->lock
     process_one_work
    
    Signed-off-by: Prashanth K <quic_prashk@quicinc.com>
    Link: https://lore.kernel.org/r/1683638872-6885-1-git-send-email-quic_prashk@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1676748aa29099fc0abd71e0fb092e76e835f25c
Author: Yunfei Dong <yunfei.dong@mediatek.com>
Date:   Mon Apr 17 16:17:40 2023 +0800

    media: v4l2-mem2mem: add lock to protect parameter num_rdy
    
    [ Upstream commit 56b5c3e67b0f9af3f45cf393be048ee8d8a92694 ]
    
    Getting below error when using KCSAN to check the driver. Adding lock to
    protect parameter num_rdy when getting the value with function:
    v4l2_m2m_num_src_bufs_ready/v4l2_m2m_num_dst_bufs_ready.
    
    kworker/u16:3: [name:report&]BUG: KCSAN: data-race in v4l2_m2m_buf_queue
    kworker/u16:3: [name:report&]
    
    kworker/u16:3: [name:report&]read-write to 0xffffff8105f35b94 of 1 bytes by task 20865 on cpu 7:
    kworker/u16:3:  v4l2_m2m_buf_queue+0xd8/0x10c
    
    Signed-off-by: Pina Chen <pina.chen@mediatek.com>
    Signed-off-by: Yunfei Dong <yunfei.dong@mediatek.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9850867042674361f455ea8901375cff5b800be5
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Mon Jun 19 16:24:37 2023 -0300

    smb: client: fix warning in cifs_smb3_do_mount()
    
    [ Upstream commit 12c30f33cc6769bf411088a2872843c4f9ea32f9 ]
    
    This fixes the following warning reported by kernel test robot
    
      fs/smb/client/cifsfs.c:982 cifs_smb3_do_mount() warn: possible
      memory leak of 'cifs_sb'
    
    Link: https://lore.kernel.org/all/202306170124.CtQqzf0I-lkp@intel.com/
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3f252436e5701ae8a974869b7fe075a97e13472
Author: Christian Brauner <brauner@kernel.org>
Date:   Tue Jun 13 10:13:37 2023 +0200

    ovl: check type and offset of struct vfsmount in ovl_entry
    
    [ Upstream commit f723edb8a532cd26e1ff0a2b271d73762d48f762 ]
    
    Porting overlayfs to the new amount api I started experiencing random
    crashes that couldn't be explained easily. So after much debugging and
    reasoning it became clear that struct ovl_entry requires the point to
    struct vfsmount to be the first member and of type struct vfsmount.
    
    During the port I added a new member at the beginning of struct
    ovl_entry which broke all over the place in the form of random crashes
    and cache corruptions. While there's a comment in ovl_free_fs() to the
    effect of "Hack! Reuse ofs->layers as a vfsmount array before freeing
    it" there's no such comment on struct ovl_entry which makes this easy to
    trip over.
    
    Add a comment and two static asserts for both the offset and the type of
    pointer in struct ovl_entry.
    
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a650d3ccd79cdd5796edd864683a6b8dd0bf576
Author: Patrisious Haddad <phaddad@nvidia.com>
Date:   Mon Jun 5 13:14:07 2023 +0300

    RDMA/mlx5: Return the firmware result upon destroying QP/RQ
    
    [ Upstream commit 22664c06e997087fe37f9ba208008c948571214a ]
    
    Previously when destroying a QP/RQ, the result of the firmware
    destruction function was ignored and upper layers weren't informed
    about the failure.
    Which in turn could lead to various problems since when upper layer
    isn't aware of the failure it continues its operation thinking that the
    related QP/RQ was successfully destroyed while it actually wasn't,
    which could lead to the below kernel WARN.
    
    Currently, we return the correct firmware destruction status to upper
    layers which in case of the RQ would be mlx5_ib_destroy_wq() which
    was already capable of handling RQ destruction failure or in case of
    a QP to destroy_qp_common(), which now would actually warn upon qp
    destruction failure.
    
    WARNING: CPU: 3 PID: 995 at drivers/infiniband/core/rdma_core.c:940 uverbs_destroy_ufile_hw+0xcb/0xe0 [ib_uverbs]
    Modules linked in: xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi rdma_cm ib_umad ib_ipoib iw_cm ib_cm mlx5_ib ib_uverbs ib_core overlay mlx5_core fuse
    CPU: 3 PID: 995 Comm: python3 Not tainted 5.16.0-rc5+ #1
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
    RIP: 0010:uverbs_destroy_ufile_hw+0xcb/0xe0 [ib_uverbs]
    Code: 41 5c 41 5d 41 5e e9 44 34 f0 e0 48 89 df e8 4c 77 ff ff 49 8b 86 10 01 00 00 48 85 c0 74 a1 4c 89 e7 ff d0 eb 9a 0f 0b eb c1 <0f> 0b be 04 00 00 00 48 89 df e8 b6 f6 ff ff e9 75 ff ff ff 90 0f
    RSP: 0018:ffff8881533e3e78 EFLAGS: 00010287
    RAX: ffff88811b2cf3e0 RBX: ffff888106209700 RCX: 0000000000000000
    RDX: ffff888106209780 RSI: ffff8881533e3d30 RDI: ffff888109b101a0
    RBP: 0000000000000001 R08: ffff888127cb381c R09: 0de9890000000009
    R10: ffff888127cb3800 R11: 0000000000000000 R12: ffff888106209780
    R13: ffff888106209750 R14: ffff888100f20660 R15: 0000000000000000
    FS:  00007f8be353b740(0000) GS:ffff88852c980000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f8bd5b117c0 CR3: 000000012cd8a004 CR4: 0000000000370ea0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     ib_uverbs_close+0x1a/0x90 [ib_uverbs]
     __fput+0x82/0x230
     task_work_run+0x59/0x90
     exit_to_user_mode_prepare+0x138/0x140
     syscall_exit_to_user_mode+0x1d/0x50
     ? __x64_sys_close+0xe/0x40
     do_syscall_64+0x4a/0x90
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f8be3ae0abb
    Code: 03 00 00 00 0f 05 48 3d 00 f0 ff ff 77 41 c3 48 83 ec 18 89 7c 24 0c e8 83 43 f9 ff 8b 7c 24 0c 41 89 c0 b8 03 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 35 44 89 c7 89 44 24 0c e8 c1 43 f9 ff 8b 44
    RSP: 002b:00007ffdb51909c0 EFLAGS: 00000293 ORIG_RAX: 0000000000000003
    RAX: 0000000000000000 RBX: 0000557bb7f7c020 RCX: 00007f8be3ae0abb
    RDX: 0000557bb7c74010 RSI: 0000557bb7f14ca0 RDI: 0000000000000005
    RBP: 0000557bb7fbd598 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000293 R12: 0000557bb7fbd5b8
    R13: 0000557bb7fbd5a8 R14: 0000000000001000 R15: 0000557bb7f7c020
     </TASK>
    
    Signed-off-by: Patrisious Haddad <phaddad@nvidia.com>
    Link: https://lore.kernel.org/r/c6df677f931d18090bafbe7f7dbb9524047b7d9b.1685953497.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9631d88503abc1697cbd7ecf414bfaf36bcd7c65
Author: Marco Morandini <marco.morandini@polimi.it>
Date:   Tue May 30 15:40:08 2023 +0200

    HID: add quirk for 03f0:464a HP Elite Presenter Mouse
    
    [ Upstream commit 0db117359e47750d8bd310d19f13e1c4ef7fc26a ]
    
    HP Elite Presenter Mouse HID Record Descriptor shows
    two mouses (Repord ID 0x1 and 0x2), one keypad (Report ID 0x5),
    two Consumer Controls (Report IDs 0x6 and 0x3).
    Previous to this commit it registers one mouse, one keypad
    and one Consumer Control, and it was usable only as a
    digitl laser pointer (one of the two mouses). This patch defines
    the 464a USB device ID and enables the HID_QUIRK_MULTI_INPUT
    quirk for it, allowing to use the device both as a mouse
    and a digital laser pointer.
    
    Signed-off-by: Marco Morandini <marco.morandini@polimi.it>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4921792e04f2125b5eadef9dbe9417a8354c7eff
Author: Lang Yu <Lang.Yu@amd.com>
Date:   Fri May 5 20:14:15 2023 +0800

    drm/amdgpu: install stub fence into potential unused fence pointers
    
    [ Upstream commit 187916e6ed9d0c3b3abc27429f7a5f8c936bd1f0 ]
    
    When using cpu to update page tables, vm update fences are unused.
    Install stub fence into these fence pointers instead of NULL
    to avoid NULL dereference when calling dma_fence_wait() on them.
    
    Suggested-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Lang Yu <Lang.Yu@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd41646d435048fa57ae01f9e9afbc5587c5d357
Author: stuarthayhurst <stuart.a.hayhurst@gmail.com>
Date:   Tue May 30 15:44:28 2023 +0100

    HID: logitech-hidpp: Add USB and Bluetooth IDs for the Logitech G915 TKL Keyboard
    
    [ Upstream commit 48aea8b445c422a372cf15915101035a47105421 ]
    
    Adds the USB and Bluetooth IDs for the Logitech G915 TKL keyboard, for device detection
    For this device, this provides battery reporting on top of hid-generic
    
    Reviewed-by: Bastien Nocera <hadess@hadess.net>
    Signed-off-by: Stuart Hayhurst <stuart.a.hayhurst@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff10cd3e9b3a324578eb554a8e9fb1cf6a0b9442
Author: gaoxu <gaoxu2@hihonor.com>
Date:   Tue Jun 6 12:47:37 2023 +0000

    dma-remap: use kvmalloc_array/kvfree for larger dma memory remap
    
    [ Upstream commit 51ff97d54f02b4444dfc42e380ac4c058e12d5dd ]
    
    If dma_direct_alloc() alloc memory in size of 64MB, the inner function
    dma_common_contiguous_remap() will allocate 128KB memory by invoking
    the function kmalloc_array(). and the kmalloc_array seems to fail to try to
    allocate 128KB mem.
    
    Call trace:
    [14977.928623] qcrosvm: page allocation failure: order:5, mode:0x40cc0
    [14977.928638] dump_backtrace.cfi_jt+0x0/0x8
    [14977.928647] dump_stack_lvl+0x80/0xb8
    [14977.928652] warn_alloc+0x164/0x200
    [14977.928657] __alloc_pages_slowpath+0x9f0/0xb4c
    [14977.928660] __alloc_pages+0x21c/0x39c
    [14977.928662] kmalloc_order+0x48/0x108
    [14977.928666] kmalloc_order_trace+0x34/0x154
    [14977.928668] __kmalloc+0x548/0x7e4
    [14977.928673] dma_direct_alloc+0x11c/0x4f8
    [14977.928678] dma_alloc_attrs+0xf4/0x138
    [14977.928680] gh_vm_ioctl_set_fw_name+0x3c4/0x610 [gunyah]
    [14977.928698] gh_vm_ioctl+0x90/0x14c [gunyah]
    [14977.928705] __arm64_sys_ioctl+0x184/0x210
    
    work around by doing kvmalloc_array instead.
    
    Signed-off-by: Gao Xu <gaoxu2@hihonor.com>
    Reviewed-by: Suren Baghdasaryan <surenb@google.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9ce774052eeef0df32d5ab339170b988de0c260
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Jun 6 17:25:28 2023 -0500

    ASoC: SOF: Intel: fix SoundWire/HDaudio mutual exclusion
    
    [ Upstream commit f751b99255cacd9ffe8c4bbf99767ad670cee1f7 ]
    
    The functionality described in Commit 61bef9e68dca ("ASoC: SOF: Intel: hda: enforce exclusion between HDaudio and SoundWire")
    does not seem to be properly implemented with two issues that need to
    be corrected.
    
    a) The test used is incorrect when DisplayAudio codecs are not supported.
    
    b) Conversely when only Display Audio codecs can be found, we do want
    to start the SoundWire links, if any. That will help add the relevant
    topologies and machine descriptors, and identify cases where the
    SoundWire information in ACPI needs to be modified with a quirk.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Link: https://lore.kernel.org/r/20230606222529.57156-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d53d1e4765c3c300fb61e0ffd3c582009e97b9b
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Jun 2 10:50:36 2023 +0200

    iopoll: Call cpu_relax() in busy loops
    
    [ Upstream commit b407460ee99033503993ac7437d593451fcdfe44 ]
    
    It is considered good practice to call cpu_relax() in busy loops, see
    Documentation/process/volatile-considered-harmful.rst.  This can not
    only lower CPU power consumption or yield to a hyperthreaded twin
    processor, but also allows an architecture to mitigate hardware issues
    (e.g. ARM Erratum 754327 for Cortex-A9 prior to r2p0) in the
    architecture-specific cpu_relax() implementation.
    
    In addition, cpu_relax() is also a compiler barrier.  It is not
    immediately obvious that the @op argument "function" will result in an
    actual function call (e.g. in case of inlining).
    
    Where a function call is a C sequence point, this is lost on inlining.
    Therefore, with agressive enough optimization it might be possible for
    the compiler to hoist the:
    
            (val) = op(args);
    
    "load" out of the loop because it doesn't see the value changing. The
    addition of cpu_relax() would inhibit this.
    
    As the iopoll helpers lack calls to cpu_relax(), people are sometimes
    reluctant to use them, and may fall back to open-coded polling loops
    (including cpu_relax() calls) instead.
    
    Fix this by adding calls to cpu_relax() to the iopoll helpers:
      - For the non-atomic case, it is sufficient to call cpu_relax() in
        case of a zero sleep-between-reads value, as a call to
        usleep_range() is a safe barrier otherwise.  However, it doesn't
        hurt to add the call regardless, for simplicity, and for similarity
        with the atomic case below.
      - For the atomic case, cpu_relax() must be called regardless of the
        sleep-between-reads value, as there is no guarantee all
        architecture-specific implementations of udelay() handle this.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/45c87bec3397fdd704376807f0eec5cc71be440f.1685692810.git.geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca66e9dd98ef95cd878e85f55a80f75b18d4d159
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Tue May 30 14:03:44 2023 +0200

    ARM: dts: imx6dl: prtrvt, prtvt7, prti6q, prtwd2: fix USB related warnings
    
    [ Upstream commit 1d14bd943fa2bbdfda1efbcc080b298fed5f1803 ]
    
    Fix USB-related warnings in prtrvt, prtvt7, prti6q and prtwd2 device trees
    by disabling unused usbphynop1 and usbphynop2 USB PHYs and providing proper
    configuration for the over-current detection. This fixes the following
    warnings with the current kernel:
     usb_phy_generic usbphynop1: dummy supplies not allowed for exclusive requests
     usb_phy_generic usbphynop2: dummy supplies not allowed for exclusive requests
     imx_usb 2184200.usb: No over current polarity defined
    
    By the way, fix over-current detection on usbotg port for prtvt7, prti6q
    and prtwd2 boards. Only prtrvt do not have OC on USB OTG port.
    
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc159083085947c0d8466b2fd63699d0ad87b3cd
Author: Sumit Gupta <sumitg@nvidia.com>
Date:   Thu May 11 23:02:09 2023 +0530

    PCI: tegra194: Fix possible array out of bounds access
    
    [ Upstream commit 205b3d02d57ce6dce96f6d2b9c230f56a9bf9817 ]
    
    Add check to fix the possible array out of bounds violation by
    making speed equal to GEN1_CORE_CLK_FREQ when its value is more
    than the size of "pcie_gen_freq" array. This array has size of
    four but possible speed (CLS) values are from "0 to 0xF". So,
    "speed - 1" values are "-1 to 0xE".
    
    Suggested-by: Bjorn Helgaas <helgaas@kernel.org>
    Signed-off-by: Sumit Gupta <sumitg@nvidia.com>
    Link: https://lore.kernel.org/lkml/72b9168b-d4d6-4312-32ea-69358df2f2d0@nvidia.com/
    Acked-by: Lorenzo Pieralisi <lpieralisi@kernel.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2d10f1de1fac24e6e41bed71301d7a95aea43c6
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Aug 4 15:59:51 2023 -0700

    net: tls: avoid discarding data on record close
    
    [ Upstream commit 6b47808f223c70ff564f9b363446d2a5fa1e05b2 ]
    
    TLS records end with a 16B tag. For TLS device offload we only
    need to make space for this tag in the stream, the device will
    generate and replace it with the actual calculated tag.
    
    Long time ago the code would just re-reference the head frag
    which mostly worked but was suboptimal because it prevented TCP
    from combining the record into a single skb frag. I'm not sure
    if it was correct as the first frag may be shorter than the tag.
    
    The commit under fixes tried to replace that with using the page
    frag and if the allocation failed rolling back the data, if record
    was long enough. It achieves better fragment coalescing but is
    also buggy.
    
    We don't roll back the iterator, so unless we're at the end of
    send we'll skip the data we designated as tag and start the
    next record as if the rollback never happened.
    There's also the possibility that the record was constructed
    with MSG_MORE and the data came from a different syscall and
    we already told the user space that we "got it".
    
    Allocate a single dummy page and use it as fallback.
    
    Found by code inspection, and proven by forcing allocation
    failures.
    
    Fixes: e7b159a48ba6 ("net/tls: remove the record tail optimization")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a15ca893909e1b87d975d0726b79caf5b2f8830
Author: Tariq Toukan <tariqt@nvidia.com>
Date:   Wed Jul 27 12:43:42 2022 +0300

    net/tls: Multi-threaded calls to TX tls_dev_del
    
    [ Upstream commit 7adc91e0c93901a0eeeea10665d0feb48ffde2d4 ]
    
    Multiple TLS device-offloaded contexts can be added in parallel via
    concurrent calls to .tls_dev_add, while calls to .tls_dev_del are
    sequential in tls_device_gc_task.
    
    This is not a sustainable behavior. This creates a rate gap between add
    and del operations (addition rate outperforms the deletion rate).  When
    running for enough time, the TLS device resources could get exhausted,
    failing to offload new connections.
    
    Replace the single-threaded garbage collector work with a per-context
    alternative, so they can be handled on several cores in parallel. Use
    a new dedicated destruct workqueue for this.
    
    Tested with mlx5 device:
    Before: 22141 add/sec,   103 del/sec
    After:  11684 add/sec, 11684 del/sec
    
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Maxim Mikityanskiy <maximmi@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 6b47808f223c ("net: tls: avoid discarding data on record close")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d93157b7e2dac9acf3ee4e52189b4c79d1ac77c
Author: Tariq Toukan <tariqt@nvidia.com>
Date:   Wed Jul 27 12:43:41 2022 +0300

    net/tls: Perform immediate device ctx cleanup when possible
    
    [ Upstream commit 113671b255ee3b9f5585a6d496ef0e675e698698 ]
    
    TLS context destructor can be run in atomic context. Cleanup operations
    for device-offloaded contexts could require access and interaction with
    the device callbacks, which might sleep. Hence, the cleanup of such
    contexts must be deferred and completed inside an async work.
    
    For all others, this is not necessary, as cleanup is atomic. Invoke
    cleanup immediately for them, avoiding queueing redundant gc work.
    
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Maxim Mikityanskiy <maximmi@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 6b47808f223c ("net: tls: avoid discarding data on record close")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51222e1c77a17d239262f6c2fe4d45e91742f467
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 4 17:26:52 2023 +0000

    macsec: use DEV_STATS_INC()
    
    [ Upstream commit 32d0a49d36a2a306c2e47fe5659361e424f0ed3f ]
    
    syzbot/KCSAN reported data-races in macsec whenever dev->stats fields
    are updated.
    
    It appears all of these updates can happen from multiple cpus.
    
    Adopt SMP safe DEV_STATS_INC() to update dev->stats fields.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d64a232e4d92938597c5c3cec2483ac14e063f7
Author: Clayton Yager <Clayton_Yager@selinc.com>
Date:   Mon Aug 8 15:38:23 2022 -0700

    macsec: Fix traffic counters/statistics
    
    [ Upstream commit 91ec9bd57f3524ff3d86bfb7c9ee5a315019733c ]
    
    OutOctetsProtected, OutOctetsEncrypted, InOctetsValidated, and
    InOctetsDecrypted were incrementing by the total number of octets in frames
    instead of by the number of octets of User Data in frames.
    
    The Controlled Port statistics ifOutOctets and ifInOctets were incrementing
    by the total number of octets instead of the number of octets of the MSDUs
    plus octets of the destination and source MAC addresses.
    
    The Controlled Port statistics ifInDiscards and ifInErrors were not
    incrementing each time the counters they aggregate were.
    
    The Controlled Port statistic ifInErrors was not included in the output of
    macsec_get_stats64 so the value was not present in ip commands output.
    
    The ReceiveSA counters InPktsNotValid, InPktsNotUsingSA, and InPktsUnusedSA
    were not incrementing.
    
    Signed-off-by: Clayton Yager <Clayton_Yager@selinc.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 32d0a49d36a2 ("macsec: use DEV_STATS_INC()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 396a1921406a7e7eb7be653a2d9e5808285df545
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:57 2023 +0300

    selftests: forwarding: tc_actions: Use ncat instead of nc
    
    [ Upstream commit 5e8670610b93158ffacc3241f835454ff26a3469 ]
    
    The test relies on 'nc' being the netcat version from the nmap project.
    While this seems to be the case on Fedora, it is not the case on Ubuntu,
    resulting in failures such as [1].
    
    Fix by explicitly using the 'ncat' utility from the nmap project and the
    skip the test in case it is not installed.
    
    [1]
     # timeout set to 0
     # selftests: net/forwarding: tc_actions.sh
     # TEST: gact drop and ok (skip_hw)                                    [ OK ]
     # TEST: mirred egress flower redirect (skip_hw)                       [ OK ]
     # TEST: mirred egress flower mirror (skip_hw)                         [ OK ]
     # TEST: mirred egress matchall mirror (skip_hw)                       [ OK ]
     # TEST: mirred_egress_to_ingress (skip_hw)                            [ OK ]
     # nc: invalid option -- '-'
     # usage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl]
     #         [-m minttl] [-O length] [-P proxy_username] [-p source_port]
     #         [-q seconds] [-s sourceaddr] [-T keyword] [-V rtable] [-W recvlimit]
     #         [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]]
     #         [destination] [port]
     # nc: invalid option -- '-'
     # usage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl]
     #         [-m minttl] [-O length] [-P proxy_username] [-p source_port]
     #         [-q seconds] [-s sourceaddr] [-T keyword] [-V rtable] [-W recvlimit]
     #         [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]]
     #         [destination] [port]
     # TEST: mirred_egress_to_ingress_tcp (skip_hw)                        [FAIL]
     #       server output check failed
     # INFO: Could not test offloaded functionality
     not ok 80 selftests: net/forwarding: tc_actions.sh # exit=1
    
    Fixes: ca22da2fbd69 ("act_mirred: use the backlog for nested calls to mirred ingress")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/adc5e40d-d040-a65e-eb26-edf47dac5b02@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-12-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d61a0886d3365038f65f6c57afacdb7bdc820464
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Tue Feb 14 10:52:37 2023 +0100

    selftests: forwarding: tc_actions: cleanup temporary files when test is aborted
    
    [ Upstream commit f58531716ced8975a4ade108ef4af35f98722af7 ]
    
    remove temporary files created by 'mirred_egress_to_ingress_tcp' test
    in the cleanup() handler. Also, change variable names to avoid clashing
    with globals from lib.sh.
    
    Suggested-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Link: https://lore.kernel.org/r/091649045a017fc00095ecbb75884e5681f7025f.1676368027.git.dcaratti@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 5e8670610b93 ("selftests: forwarding: tc_actions: Use ncat instead of nc")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a798977df6d0636865b23e3b0f76255513c47546
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Jun 30 09:45:33 2023 +0900

    mmc: sdhci-f-sdh30: Replace with sdhci_pltfm
    
    [ Upstream commit 5def5c1c15bf22934ee227af85c1716762f3829f ]
    
    Even if sdhci_pltfm_pmops is specified for PM, this driver doesn't apply
    sdhci_pltfm, so the structure is not correctly referenced in PM functions.
    This applies sdhci_pltfm to this driver to fix this issue.
    
    - Call sdhci_pltfm_init() instead of sdhci_alloc_host() and
      other functions that covered by sdhci_pltfm.
    - Move ops and quirks to sdhci_pltfm_data
    - Replace sdhci_priv() with own private function sdhci_f_sdh30_priv().
    
    Fixes: 87a507459f49 ("mmc: sdhci: host: add new f_sdh30")
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230630004533.26644-1-hayashi.kunihiko@socionext.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9852b4dedfce0212d9c06d0d43f04626c6938b1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 30 16:31:57 2023 +0200

    Linux 4.19.293
    
    Link: https://lore.kernel.org/r/20230828101153.030066927@linuxfoundation.org
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aee58f4d80e9987ab89929726cc782b03ae74fe3
Author: Rob Clark <robdclark@chromium.org>
Date:   Fri Aug 18 07:59:38 2023 -0700

    dma-buf/sw_sync: Avoid recursive lock during fence signal
    
    [ Upstream commit e531fdb5cd5ee2564b7fe10c8a9219e2b2fac61e ]
    
    If a signal callback releases the sw_sync fence, that will trigger a
    deadlock as the timeline_fence_release recurses onto the fence->lock
    (used both for signaling and the the timeline tree).
    
    To avoid that, temporarily hold an extra reference to the signalled
    fences until after we drop the lock.
    
    (This is an alternative implementation of https://patchwork.kernel.org/patch/11664717/
    which avoids some potential UAF issues with the original patch.)
    
    v2: Remove now obsolete comment, use list_move_tail() and
        list_del_init()
    
    Reported-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Fixes: d3c6dd1fb30d ("dma-buf/sw_sync: Synchronize signal vs syncpt free")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230818145939.39697-1-robdclark@gmail.com
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92e79e1c0fdd233b67880c9edb17d2c8e4beae6b
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Tue Jul 25 18:51:40 2023 +0100

    clk: Fix undefined reference to `clk_rate_exclusive_{get,put}'
    
    [ Upstream commit 2746f13f6f1df7999001d6595b16f789ecc28ad1 ]
    
    The COMMON_CLK config is not enabled in some of the architectures.
    This causes below build issues:
    
    pwm-rz-mtu3.c:(.text+0x114):
    undefined reference to `clk_rate_exclusive_put'
    pwm-rz-mtu3.c:(.text+0x32c):
    undefined reference to `clk_rate_exclusive_get'
    
    Fix these issues by moving clk_rate_exclusive_{get,put} inside COMMON_CLK
    code block, as clk.c is enabled by COMMON_CLK.
    
    Fixes: 55e9b8b7b806 ("clk: add clk_rate_exclusive api")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/all/202307251752.vLfmmhYm-lkp@intel.com/
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Link: https://lore.kernel.org/r/20230725175140.361479-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11c867081830344f31cc879707359ca0473e7002
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Tue Aug 22 01:52:54 2023 +0000

    scsi: core: raid_class: Remove raid_component_add()
    
    commit 60c5fd2e8f3c42a5abc565ba9876ead1da5ad2b7 upstream.
    
    The raid_component_add() function was added to the kernel tree via patch
    "[SCSI] embryonic RAID class" (2005). Remove this function since it never
    has had any callers in the Linux kernel. And also raid_component_release()
    is only used in raid_component_add(), so it is also removed.
    
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Link: https://lore.kernel.org/r/20230822015254.184270-1-wangzhu9@huawei.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Fixes: 04b5b5cb0136 ("scsi: core: Fix possible memory leak if device_add() fails")
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 247661752b75832d2bdd61bc24edeb51e8f859be
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Sat Aug 19 08:39:41 2023 +0000

    scsi: snic: Fix double free in snic_tgt_create()
    
    commit 1bd3a76880b2bce017987cf53780b372cf59528e upstream.
    
    Commit 41320b18a0e0 ("scsi: snic: Fix possible memory leak if device_add()
    fails") fixed the memory leak caused by dev_set_name() when device_add()
    failed. However, it did not consider that 'tgt' has already been released
    when put_device(&tgt->dev) is called. Remove kfree(tgt) in the error path
    to avoid double free of 'tgt' and move put_device(&tgt->dev) after the
    removed kfree(tgt) to avoid a use-after-free.
    
    Fixes: 41320b18a0e0 ("scsi: snic: Fix possible memory leak if device_add() fails")
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Link: https://lore.kernel.org/r/20230819083941.164365-1-wangzhu9@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 884945d0988a3804e48153d31b69b01fb4ed99d1
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Mon Apr 24 11:31:55 2023 +0100

    irqchip/mips-gic: Don't touch vl_map if a local interrupt is not routable
    
    commit 2c6c9c049510163090b979ea5f92a68ae8d93c45 upstream.
    
    When a GIC local interrupt is not routable, it's vl_map will be used
    to control some internal states for core (providing IPTI, IPPCI, IPFDC
    input signal for core). Overriding it will interfere core's intetrupt
    controller.
    
    Do not touch vl_map if a local interrupt is not routable, we are not
    going to remap it.
    
    Before dd098a0e0319 (" irqchip/mips-gic: Get rid of the reliance on
    irq_cpu_online()"), if a local interrupt is not routable, then it won't
    be requested from GIC Local domain, and thus gic_all_vpes_irq_cpu_online
    won't be called for that particular interrupt.
    
    Fixes: dd098a0e0319 (" irqchip/mips-gic: Get rid of the reliance on irq_cpu_online()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Tested-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20230424103156.66753-2-jiaxun.yang@flygoat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42c8406432e730cb7442d97ecfdbf47084a5af4d
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Wed Aug 23 09:43:48 2023 +0300

    rtnetlink: Reject negative ifindexes in RTM_NEWLINK
    
    [ Upstream commit 30188bd7838c16a98a520db1fe9df01ffc6ed368 ]
    
    Negative ifindexes are illegal, but the kernel does not validate the
    ifindex in the ancillary header of RTM_NEWLINK messages, resulting in
    the kernel generating a warning [1] when such an ifindex is specified.
    
    Fix by rejecting negative ifindexes.
    
    [1]
    WARNING: CPU: 0 PID: 5031 at net/core/dev.c:9593 dev_index_reserve+0x1a2/0x1c0 net/core/dev.c:9593
    [...]
    Call Trace:
     <TASK>
     register_netdevice+0x69a/0x1490 net/core/dev.c:10081
     br_dev_newlink+0x27/0x110 net/bridge/br_netlink.c:1552
     rtnl_newlink_create net/core/rtnetlink.c:3471 [inline]
     __rtnl_newlink+0x115e/0x18c0 net/core/rtnetlink.c:3688
     rtnl_newlink+0x67/0xa0 net/core/rtnetlink.c:3701
     rtnetlink_rcv_msg+0x439/0xd30 net/core/rtnetlink.c:6427
     netlink_rcv_skb+0x16b/0x440 net/netlink/af_netlink.c:2545
     netlink_unicast_kernel net/netlink/af_netlink.c:1342 [inline]
     netlink_unicast+0x536/0x810 net/netlink/af_netlink.c:1368
     netlink_sendmsg+0x93c/0xe40 net/netlink/af_netlink.c:1910
     sock_sendmsg_nosec net/socket.c:728 [inline]
     sock_sendmsg+0xd9/0x180 net/socket.c:751
     ____sys_sendmsg+0x6ac/0x940 net/socket.c:2538
     ___sys_sendmsg+0x135/0x1d0 net/socket.c:2592
     __sys_sendmsg+0x117/0x1e0 net/socket.c:2621
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 38f7b870d4a6 ("[RTNETLINK]: Link creation API")
    Reported-by: syzbot+5ba06978f34abb058571@syzkaller.appspotmail.com
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20230823064348.2252280-1-idosch@nvidia.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 058a52e061c535a58269c57c4229eacafbdf7de1
Author: Vamsi Krishna Brahmajosyula <vbrahmajosyula@vmware.com>
Date:   Sat Aug 26 06:50:56 2023 +0000

    netfilter: nf_queue: fix socket leak
    
    Removal of the sock_hold got lost when backporting commit c3873070247d
    ("netfilter: nf_queue: fix possible use-after-free") to 4.19
    
    Fixes: 34dc4a6a7f26 ("netfilter: nf_queue: fix possible use-after-free") in 4.19
    
    Fixed in 4.14 with
    https://lore.kernel.org/all/20221024112958.115275475@linuxfoundation.org/
    
    Signed-off-by: Vimal Agrawal <vimal.agrawal@sophos.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    [vbrahmajosyula: The fix to the backport was missed in 4.19]
    Signed-off-by: Vamsi Krishna Brahmajosyula <vbrahmajosyula@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84d90fb72a053c034b018fcc3cfaa6f606faf1c6
Author: Pietro Borrello <borrello@diag.uniroma1.it>
Date:   Mon Feb 6 22:33:54 2023 +0000

    sched/rt: pick_next_rt_entity(): check list_entry
    
    commit 7c4a5b89a0b5a57a64b601775b296abf77a9fe97 upstream.
    
    Commit 326587b84078 ("sched: fix goto retry in pick_next_task_rt()")
    removed any path which could make pick_next_rt_entity() return NULL.
    However, BUG_ON(!rt_se) in _pick_next_task_rt() (the only caller of
    pick_next_rt_entity()) still checks the error condition, which can
    never happen, since list_entry() never returns NULL.
    Remove the BUG_ON check, and instead emit a warning in the only
    possible error condition here: the queue being empty which should
    never happen.
    
    Fixes: 326587b84078 ("sched: fix goto retry in pick_next_task_rt()")
    Signed-off-by: Pietro Borrello <borrello@diag.uniroma1.it>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Phil Auld <pauld@redhat.com>
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Link: https://lore.kernel.org/r/20230128-list-entry-null-check-sched-v3-1-b1a71bd1ac6b@diag.uniroma1.it
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    [ Fixes CVE-2023-1077: sched/rt: pick_next_rt_entity(): check list_entry
      An insufficient list empty checking in pick_next_rt_entity().  The
      _pick_next_task_rt() checks pick_next_rt_entity() returns NULL or not
      but pick_next_rt_entity() never returns NULL.  So, even if the list is
      empty, _pick_next_task_rt() continues its process. ]
    Signed-off-by: Srish Srinivasan <ssrish@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3cd44bff89566bca59fa9cdeb1cd29c8c57752e
Author: Yibin Ding <yibin.ding@unisoc.com>
Date:   Wed Aug 2 10:30:23 2023 +0800

    mmc: block: Fix in_flight[issue_type] value error
    
    commit 4b430d4ac99750ee2ae2f893f1055c7af1ec3dc5 upstream.
    
    For a completed request, after the mmc_blk_mq_complete_rq(mq, req)
    function is executed, the bitmap_tags corresponding to the
    request will be cleared, that is, the request will be regarded as
    idle. If the request is acquired by a different type of process at
    this time, the issue_type of the request may change. It further
    caused the value of mq->in_flight[issue_type] to be abnormal,
    and a large number of requests could not be sent.
    
    p1:                                           p2:
    mmc_blk_mq_complete_rq
      blk_mq_free_request
                                                  blk_mq_get_request
                                                    blk_mq_rq_ctx_init
    mmc_blk_mq_dec_in_flight
      mmc_issue_type(mq, req)
    
    This strategy can ensure the consistency of issue_type
    before and after executing mmc_blk_mq_complete_rq.
    
    Fixes: 81196976ed94 ("mmc: block: Add blk-mq support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Yibin Ding <yibin.ding@unisoc.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20230802023023.1318134-1-yunlong.xing@unisoc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52079dc77f7a4ec9dc1c882379d3354e2d6fe81e
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Aug 23 14:57:47 2023 +0800

    x86/fpu: Set X86_FEATURE_OSXSAVE feature after enabling OSXSAVE in CR4
    
    commit 2c66ca3949dc701da7f4c9407f2140ae425683a5 upstream.
    
    0-Day found a 34.6% regression in stress-ng's 'af-alg' test case, and
    bisected it to commit b81fac906a8f ("x86/fpu: Move FPU initialization into
    arch_cpu_finalize_init()"), which optimizes the FPU init order, and moves
    the CR4_OSXSAVE enabling into a later place:
    
       arch_cpu_finalize_init
           identify_boot_cpu
               identify_cpu
                   generic_identify
                       get_cpu_cap --> setup cpu capability
           ...
           fpu__init_cpu
               fpu__init_cpu_xstate
                   cr4_set_bits(X86_CR4_OSXSAVE);
    
    As the FPU is not yet initialized the CPU capability setup fails to set
    X86_FEATURE_OSXSAVE. Many security module like 'camellia_aesni_avx_x86_64'
    depend on this feature and therefore fail to load, causing the regression.
    
    Cure this by setting X86_FEATURE_OSXSAVE feature right after OSXSAVE
    enabling.
    
    [ tglx: Moved it into the actual BSP FPU initialization code and added a comment ]
    
    Fixes: b81fac906a8f ("x86/fpu: Move FPU initialization into arch_cpu_finalize_init()")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/lkml/202307192135.203ac24e-oliver.sang@intel.com
    Link: https://lore.kernel.org/lkml/20230823065747.92257-1-feng.tang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d300dd19e4fcd930a82a813fdc29d1b4137cb051
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Wed Jul 26 14:35:18 2023 +0200

    PCI: acpiphp: Use pci_assign_unassigned_bridge_resources() only for non-root bus
    
    commit cc22522fd55e257c86d340ae9aedc122e705a435 upstream.
    
    40613da52b13 ("PCI: acpiphp: Reassign resources on bridge if necessary")
    changed acpiphp hotplug to use pci_assign_unassigned_bridge_resources()
    which depends on bridge being available, however enable_slot() can be
    called without bridge associated:
    
      1. Legitimate case of hotplug on root bus (widely used in virt world)
    
      2. A (misbehaving) firmware, that sends ACPI Bus Check notifications to
         non existing root ports (Dell Inspiron 7352/0W6WV0), which end up at
         enable_slot(..., bridge = 0) where bus has no bridge assigned to it.
         acpihp doesn't know that it's a bridge, and bus specific 'PCI
         subsystem' can't augment ACPI context with bridge information since
         the PCI device to get this data from is/was not available.
    
    Issue is easy to reproduce with QEMU's 'pc' machine, which supports PCI
    hotplug on hostbridge slots. To reproduce, boot kernel at commit
    40613da52b13 in VM started with following CLI (assuming guest root fs is
    installed on sda1 partition):
    
      # qemu-system-x86_64 -M pc -m 1G -enable-kvm -cpu host \
            -monitor stdio -serial file:serial.log           \
            -kernel arch/x86/boot/bzImage                    \
            -append "root=/dev/sda1 console=ttyS0"           \
            guest_disk.img
    
    Once guest OS is fully booted at qemu prompt:
    
      (qemu) device_add e1000
    
    (check serial.log) it will cause NULL pointer dereference at:
    
      void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge)
      {
        struct pci_bus *parent = bridge->subordinate;
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
    
       ? pci_assign_unassigned_bridge_resources+0x1f/0x260
       enable_slot+0x21f/0x3e0
       acpiphp_hotplug_notify+0x13d/0x260
       acpi_device_hotplug+0xbc/0x540
       acpi_hotplug_work_fn+0x15/0x20
       process_one_work+0x1f7/0x370
       worker_thread+0x45/0x3b0
    
    The issue was discovered on Dell Inspiron 7352/0W6WV0 laptop with following
    sequence:
    
      1. Suspend to RAM
      2. Wake up with the same backtrace being observed:
      3. 2nd suspend to RAM attempt makes laptop freeze
    
    Fix it by using __pci_bus_assign_resources() instead of
    pci_assign_unassigned_bridge_resources() as we used to do, but only in case
    when bus doesn't have a bridge associated (to cover for the case of ACPI
    event on hostbridge or non existing root port).
    
    That lets us keep hotplug on root bus working like it used to and at the
    same time keeps resource reassignment usable on root ports (and other 1st
    level bridges) that was fixed by 40613da52b13.
    
    Fixes: 40613da52b13 ("PCI: acpiphp: Reassign resources on bridge if necessary")
    Link: https://lore.kernel.org/r/20230726123518.2361181-2-imammedo@redhat.com
    Reported-by: Woody Suwalski <terraluna977@gmail.com>
    Tested-by: Woody Suwalski <terraluna977@gmail.com>
    Tested-by: Michal Koutný <mkoutny@suse.com>
    Link: https://lore.kernel.org/r/11fc981c-af49-ce64-6b43-3e282728bd1a@gmail.com
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael@kernel.org>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cdad9b218aa3434bbbf52cd4c4b50be9bbce264
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Thu Aug 10 08:23:33 2023 +0000

    media: vcodec: Fix potential array out-of-bounds in encoder queue_setup
    
    commit e7f2e65699e2290fd547ec12a17008764e5d9620 upstream.
    
    variable *nplanes is provided by user via system call argument. The
    possible value of q_data->fmt->num_planes is 1-3, while the value
    of *nplanes can be 1-8. The array access by index i can cause array
    out-of-bounds.
    
    Fix this bug by checking *nplanes against the array size.
    
    Fixes: 4e855a6efa54 ("[media] vcodec: mediatek: Add Mediatek V4L2 Video Encoder Driver")
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c93b265da627b0b0bbce697478e46d5fefccc6f
Author: Helge Deller <deller@gmx.de>
Date:   Fri Aug 25 21:50:33 2023 +0200

    lib/clz_ctz.c: Fix __clzdi2() and __ctzdi2() for 32-bit kernels
    
    commit 382d4cd1847517ffcb1800fd462b625db7b2ebea upstream.
    
    The gcc compiler translates on some architectures the 64-bit
    __builtin_clzll() function to a call to the libgcc function __clzdi2(),
    which should take a 64-bit parameter on 32- and 64-bit platforms.
    
    But in the current kernel code, the built-in __clzdi2() function is
    defined to operate (wrongly) on 32-bit parameters if BITS_PER_LONG ==
    32, thus the return values on 32-bit kernels are in the range from
    [0..31] instead of the expected [0..63] range.
    
    This patch fixes the in-kernel functions __clzdi2() and __ctzdi2() to
    take a 64-bit parameter on 32-bit kernels as well, thus it makes the
    functions identical for 32- and 64-bit kernels.
    
    This bug went unnoticed since kernel 3.11 for over 10 years, and here
    are some possible reasons for that:
    
     a) Some architectures have assembly instructions to count the bits and
        which are used instead of calling __clzdi2(), e.g. on x86 the bsr
        instruction and on ppc cntlz is used. On such architectures the
        wrong __clzdi2() implementation isn't used and as such the bug has
        no effect and won't be noticed.
    
     b) Some architectures link to libgcc.a, and the in-kernel weak
        functions get replaced by the correct 64-bit variants from libgcc.a.
    
     c) __builtin_clzll() and __clzdi2() doesn't seem to be used in many
        places in the kernel, and most likely only in uncritical functions,
        e.g. when printing hex values via seq_put_hex_ll(). The wrong return
        value will still print the correct number, but just in a wrong
        formatting (e.g. with too many leading zeroes).
    
     d) 32-bit kernels aren't used that much any longer, so they are less
        tested.
    
    A trivial testcase to verify if the currently running 32-bit kernel is
    affected by the bug is to look at the output of /proc/self/maps:
    
    Here the kernel uses a correct implementation of __clzdi2():
    
      root@debian:~# cat /proc/self/maps
      00010000-00019000 r-xp 00000000 08:05 787324     /usr/bin/cat
      00019000-0001a000 rwxp 00009000 08:05 787324     /usr/bin/cat
      0001a000-0003b000 rwxp 00000000 00:00 0          [heap]
      f7551000-f770d000 r-xp 00000000 08:05 794765     /usr/lib/hppa-linux-gnu/libc.so.6
      ...
    
    and this kernel uses the broken implementation of __clzdi2():
    
      root@debian:~# cat /proc/self/maps
      0000000010000-0000000019000 r-xp 00000000 000000008:000000005 787324  /usr/bin/cat
      0000000019000-000000001a000 rwxp 000000009000 000000008:000000005 787324  /usr/bin/cat
      000000001a000-000000003b000 rwxp 00000000 00:00 0  [heap]
      00000000f73d1000-00000000f758d000 r-xp 00000000 000000008:000000005 794765  /usr/lib/hppa-linux-gnu/libc.so.6
      ...
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Fixes: 4df87bb7b6a22 ("lib: add weak clz/ctz functions")
    Cc: Chanho Min <chanho.min@lge.com>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: stable@vger.kernel.org # v3.11+
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64453d60e610409d61e2fb8b7262b849627ff8af
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Wed Aug 9 17:29:13 2023 +0200

    batman-adv: Fix batadv_v_ogm_aggr_send memory leak
    
    commit 421d467dc2d483175bad4fb76a31b9e5a3d744cf upstream.
    
    When batadv_v_ogm_aggr_send is called for an inactive interface, the skb
    is silently dropped by batadv_v_ogm_send_to_if() but never freed causing
    the following memory leak:
    
      unreferenced object 0xffff00000c164800 (size 512):
        comm "kworker/u8:1", pid 2648, jiffies 4295122303 (age 97.656s)
        hex dump (first 32 bytes):
          00 80 af 09 00 00 ff ff e1 09 00 00 75 01 60 83  ............u.`.
          1f 00 00 00 b8 00 00 00 15 00 05 00 da e3 d3 64  ...............d
        backtrace:
          [<0000000007ad20f6>] __kmalloc_track_caller+0x1a8/0x310
          [<00000000d1029e55>] kmalloc_reserve.constprop.0+0x70/0x13c
          [<000000008b9d4183>] __alloc_skb+0xec/0x1fc
          [<00000000c7af5051>] __netdev_alloc_skb+0x48/0x23c
          [<00000000642ee5f5>] batadv_v_ogm_aggr_send+0x50/0x36c
          [<0000000088660bd7>] batadv_v_ogm_aggr_work+0x24/0x40
          [<0000000042fc2606>] process_one_work+0x3b0/0x610
          [<000000002f2a0b1c>] worker_thread+0xa0/0x690
          [<0000000059fae5d4>] kthread+0x1fc/0x210
          [<000000000c587d3a>] ret_from_fork+0x10/0x20
    
    Free the skb in that case to fix this leak.
    
    Cc: stable@vger.kernel.org
    Fixes: 0da0035942d4 ("batman-adv: OGMv2 - add basic infrastructure")
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c1ebf799f57dd72b5c1d5b32d48fb1e599897fb
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Fri Aug 4 11:39:36 2023 +0200

    batman-adv: Fix TT global entry leak when client roamed back
    
    commit d25ddb7e788d34cf27ff1738d11a87cb4b67d446 upstream.
    
    When a client roamed back to a node before it got time to destroy the
    pending local entry (i.e. within the same originator interval) the old
    global one is directly removed from hash table and left as such.
    
    But because this entry had an extra reference taken at lookup (i.e using
    batadv_tt_global_hash_find) there is no way its memory will be reclaimed
    at any time causing the following memory leak:
    
      unreferenced object 0xffff0000073c8000 (size 18560):
        comm "softirq", pid 0, jiffies 4294907738 (age 228.644s)
        hex dump (first 32 bytes):
          06 31 ac 12 c7 7a 05 00 01 00 00 00 00 00 00 00  .1...z..........
          2c ad be 08 00 80 ff ff 6c b6 be 08 00 80 ff ff  ,.......l.......
        backtrace:
          [<00000000ee6e0ffa>] kmem_cache_alloc+0x1b4/0x300
          [<000000000ff2fdbc>] batadv_tt_global_add+0x700/0xe20
          [<00000000443897c7>] _batadv_tt_update_changes+0x21c/0x790
          [<000000005dd90463>] batadv_tt_update_changes+0x3c/0x110
          [<00000000a2d7fc57>] batadv_tt_tvlv_unicast_handler_v1+0xafc/0xe10
          [<0000000011793f2a>] batadv_tvlv_containers_process+0x168/0x2b0
          [<00000000b7cbe2ef>] batadv_recv_unicast_tvlv+0xec/0x1f4
          [<0000000042aef1d8>] batadv_batman_skb_recv+0x25c/0x3a0
          [<00000000bbd8b0a2>] __netif_receive_skb_core.isra.0+0x7a8/0xe90
          [<000000004033d428>] __netif_receive_skb_one_core+0x64/0x74
          [<000000000f39a009>] __netif_receive_skb+0x48/0xe0
          [<00000000f2cd8888>] process_backlog+0x174/0x344
          [<00000000507d6564>] __napi_poll+0x58/0x1f4
          [<00000000b64ef9eb>] net_rx_action+0x504/0x590
          [<00000000056fa5e4>] _stext+0x1b8/0x418
          [<00000000878879d6>] run_ksoftirqd+0x74/0xa4
      unreferenced object 0xffff00000bae1a80 (size 56):
        comm "softirq", pid 0, jiffies 4294910888 (age 216.092s)
        hex dump (first 32 bytes):
          00 78 b1 0b 00 00 ff ff 0d 50 00 00 00 00 00 00  .x.......P......
          00 00 00 00 00 00 00 00 50 c8 3c 07 00 00 ff ff  ........P.<.....
        backtrace:
          [<00000000ee6e0ffa>] kmem_cache_alloc+0x1b4/0x300
          [<00000000d9aaa49e>] batadv_tt_global_add+0x53c/0xe20
          [<00000000443897c7>] _batadv_tt_update_changes+0x21c/0x790
          [<000000005dd90463>] batadv_tt_update_changes+0x3c/0x110
          [<00000000a2d7fc57>] batadv_tt_tvlv_unicast_handler_v1+0xafc/0xe10
          [<0000000011793f2a>] batadv_tvlv_containers_process+0x168/0x2b0
          [<00000000b7cbe2ef>] batadv_recv_unicast_tvlv+0xec/0x1f4
          [<0000000042aef1d8>] batadv_batman_skb_recv+0x25c/0x3a0
          [<00000000bbd8b0a2>] __netif_receive_skb_core.isra.0+0x7a8/0xe90
          [<000000004033d428>] __netif_receive_skb_one_core+0x64/0x74
          [<000000000f39a009>] __netif_receive_skb+0x48/0xe0
          [<00000000f2cd8888>] process_backlog+0x174/0x344
          [<00000000507d6564>] __napi_poll+0x58/0x1f4
          [<00000000b64ef9eb>] net_rx_action+0x504/0x590
          [<00000000056fa5e4>] _stext+0x1b8/0x418
          [<00000000878879d6>] run_ksoftirqd+0x74/0xa4
    
    Releasing the extra reference from batadv_tt_global_hash_find even at
    roam back when batadv_tt_global_free is called fixes this memory leak.
    
    Cc: stable@vger.kernel.org
    Fixes: 068ee6e204e1 ("batman-adv: roaming handling mechanism redesign")
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by; Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa8fa81cb8e89344c696df1abb6e5cd69fecd0ff
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Fri Jul 28 15:38:50 2023 +0200

    batman-adv: Do not get eth header before batadv_check_management_packet
    
    commit eac27a41ab641de074655d2932fc7f8cdb446881 upstream.
    
    If received skb in batadv_v_elp_packet_recv or batadv_v_ogm_packet_recv
    is either cloned or non linearized then its data buffer will be
    reallocated by batadv_check_management_packet when skb_cow or
    skb_linearize get called. Thus geting ethernet header address inside
    skb data buffer before batadv_check_management_packet had any chance to
    reallocate it could lead to the following kernel panic:
    
      Unable to handle kernel paging request at virtual address ffffff8020ab069a
      Mem abort info:
        ESR = 0x96000007
        EC = 0x25: DABT (current EL), IL = 32 bits
        SET = 0, FnV = 0
        EA = 0, S1PTW = 0
        FSC = 0x07: level 3 translation fault
      Data abort info:
        ISV = 0, ISS = 0x00000007
        CM = 0, WnR = 0
      swapper pgtable: 4k pages, 39-bit VAs, pgdp=0000000040f45000
      [ffffff8020ab069a] pgd=180000007fffa003, p4d=180000007fffa003, pud=180000007fffa003, pmd=180000007fefe003, pte=0068000020ab0706
      Internal error: Oops: 96000007 [#1] SMP
      Modules linked in: ahci_mvebu libahci_platform libahci dvb_usb_af9035 dvb_usb_dib0700 dib0070 dib7000m dibx000_common ath11k_pci ath10k_pci ath10k_core mwl8k_new nf_nat_sip nf_conntrack_sip xhci_plat_hcd xhci_hcd nf_nat_pptp nf_conntrack_pptp at24 sbsa_gwdt
      CPU: 1 PID: 16 Comm: ksoftirqd/1 Not tainted 5.15.42-00066-g3242268d425c-dirty #550
      Hardware name: A8k (DT)
      pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
      pc : batadv_is_my_mac+0x60/0xc0
      lr : batadv_v_ogm_packet_recv+0x98/0x5d0
      sp : ffffff8000183820
      x29: ffffff8000183820 x28: 0000000000000001 x27: ffffff8014f9af00
      x26: 0000000000000000 x25: 0000000000000543 x24: 0000000000000003
      x23: ffffff8020ab0580 x22: 0000000000000110 x21: ffffff80168ae880
      x20: 0000000000000000 x19: ffffff800b561000 x18: 0000000000000000
      x17: 0000000000000000 x16: 0000000000000000 x15: 00dc098924ae0032
      x14: 0f0405433e0054b0 x13: ffffffff00000080 x12: 0000004000000001
      x11: 0000000000000000 x10: 0000000000000000 x9 : 0000000000000000
      x8 : 0000000000000000 x7 : ffffffc076dae000 x6 : ffffff8000183700
      x5 : ffffffc00955e698 x4 : ffffff80168ae000 x3 : ffffff80059cf000
      x2 : ffffff800b561000 x1 : ffffff8020ab0696 x0 : ffffff80168ae880
      Call trace:
       batadv_is_my_mac+0x60/0xc0
       batadv_v_ogm_packet_recv+0x98/0x5d0
       batadv_batman_skb_recv+0x1b8/0x244
       __netif_receive_skb_core.isra.0+0x440/0xc74
       __netif_receive_skb_one_core+0x14/0x20
       netif_receive_skb+0x68/0x140
       br_pass_frame_up+0x70/0x80
       br_handle_frame_finish+0x108/0x284
       br_handle_frame+0x190/0x250
       __netif_receive_skb_core.isra.0+0x240/0xc74
       __netif_receive_skb_list_core+0x6c/0x90
       netif_receive_skb_list_internal+0x1f4/0x310
       napi_complete_done+0x64/0x1d0
       gro_cell_poll+0x7c/0xa0
       __napi_poll+0x34/0x174
       net_rx_action+0xf8/0x2a0
       _stext+0x12c/0x2ac
       run_ksoftirqd+0x4c/0x7c
       smpboot_thread_fn+0x120/0x210
       kthread+0x140/0x150
       ret_from_fork+0x10/0x20
      Code: f9403844 eb03009f 54fffee1 f94
    
    Thus ethernet header address should only be fetched after
    batadv_check_management_packet has been called.
    
    Fixes: 0da0035942d4 ("batman-adv: OGMv2 - add basic infrastructure")
    Cc: stable@vger.kernel.org
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90cf70a6473dfd198748358ee921aa893222328b
Author: Sven Eckelmann <sven@narfation.org>
Date:   Wed Jul 19 10:01:15 2023 +0200

    batman-adv: Don't increase MTU when set by user
    
    commit d8e42a2b0addf238be8b3b37dcd9795a5c1be459 upstream.
    
    If the user set an MTU value, it usually means that there are special
    requirements for the MTU. But if an interface gots activated, the MTU was
    always recalculated and then the user set value was overwritten.
    
    The only reason why this user set value has to be overwritten, is when the
    MTU has to be decreased because batman-adv is not able to transfer packets
    with the user specified size.
    
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3035b3f54fcab353bc0754e80785040db16b86fb
Author: Sven Eckelmann <sven@narfation.org>
Date:   Wed Jul 19 09:29:29 2023 +0200

    batman-adv: Trigger events for auto adjusted MTU
    
    commit c6a953cce8d0438391e6da48c8d0793d3fbfcfa6 upstream.
    
    If an interface changes the MTU, it is expected that an NETDEV_PRECHANGEMTU
    and NETDEV_CHANGEMTU notification events is triggered. This worked fine for
    .ndo_change_mtu based changes because core networking code took care of it.
    But for auto-adjustments after hard-interfaces changes, these events were
    simply missing.
    
    Due to this problem, non-batman-adv components weren't aware of MTU changes
    and thus couldn't perform their own tasks correctly.
    
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da5abe4e40c12682cc602b8e5c0f9b22368d4a48
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Fri Aug 4 10:52:20 2023 -0400

    nfsd: Fix race to FREE_STATEID and cl_revoked
    
    commit 3b816601e279756e781e6c4d9b3f3bd21a72ac67 upstream.
    
    We have some reports of linux NFS clients that cannot satisfy a linux knfsd
    server that always sets SEQ4_STATUS_RECALLABLE_STATE_REVOKED even though
    those clients repeatedly walk all their known state using TEST_STATEID and
    receive NFS4_OK for all.
    
    Its possible for revoke_delegation() to set NFS4_REVOKED_DELEG_STID, then
    nfsd4_free_stateid() finds the delegation and returns NFS4_OK to
    FREE_STATEID.  Afterward, revoke_delegation() moves the same delegation to
    cl_revoked.  This would produce the observed client/server effect.
    
    Fix this by ensuring that the setting of sc_type to NFS4_REVOKED_DELEG_STID
    and move to cl_revoked happens within the same cl_lock.  This will allow
    nfsd4_free_stateid() to properly remove the delegation from cl_revoked.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2217103
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2176575
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Cc: stable@vger.kernel.org # v4.17+
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9199ba370964b1f6358e668e26695c3cb2daef3d
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Aug 23 14:51:39 2023 +1000

    ibmveth: Use dcbf rather than dcbfl
    
    commit bfedba3b2c7793ce127680bc8f70711e05ec7a17 upstream.
    
    When building for power4, newer binutils don't recognise the "dcbfl"
    extended mnemonic.
    
    dcbfl RA, RB is equivalent to dcbf RA, RB, 1.
    
    Switch to "dcbf" to avoid the build error.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76b61acc1178a8dd25a21c02d0d0626dbd44839d
Author: Sishuai Gong <sishuai.system@gmail.com>
Date:   Thu Aug 10 15:12:42 2023 -0400

    ipvs: fix racy memcpy in proc_do_sync_threshold
    
    commit 5310760af1d4fbea1452bfc77db5f9a680f7ae47 upstream.
    
    When two threads run proc_do_sync_threshold() in parallel,
    data races could happen between the two memcpy():
    
    Thread-1                        Thread-2
    memcpy(val, valp, sizeof(val));
                                    memcpy(valp, val, sizeof(val));
    
    This race might mess up the (struct ctl_table *) table->data,
    so we add a mutex lock to serialize them.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/netdev/B6988E90-0A1E-4B85-BF26-2DAF6D482433@gmail.com/
    Signed-off-by: Sishuai Gong <sishuai.system@gmail.com>
    Acked-by: Simon Horman <horms@kernel.org>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 005261c58453fc386e8bbd806c5cd521b80e739d
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu Aug 1 00:03:30 2019 +0800

    ipvs: Improve robustness to the ipvs sysctl
    
    commit 1b90af292e71b20d03b837d39406acfbdc5d4b2a upstream.
    
    The ipvs module parse the user buffer and save it to sysctl,
    then check if the value is valid. invalid value occurs
    over a period of time.
    Here, I add a variable, struct ctl_table tmp, used to read
    the value from the user buffer, and save only when it is valid.
    I delete proc_do_sync_mode and use extra1/2 in table for the
    proc_dointvec_minmax call.
    
    Fixes: f73181c8288f ("ipvs: add support for sync threads")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    [Julian: Backport by changing SYSCTL_ZERO/SYSCTL_ONE to zero/one]
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f916e5988ae429c65aed49ec0397ec72d57173f8
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Wed Aug 23 15:19:04 2023 +0800

    bonding: fix macvlan over alb bond support
    
    [ Upstream commit e74216b8def3803e98ae536de78733e9d7f3b109 ]
    
    The commit 14af9963ba1e ("bonding: Support macvlans on top of tlb/rlb mode
    bonds") aims to enable the use of macvlans on top of rlb bond mode. However,
    the current rlb bond mode only handles ARP packets to update remote neighbor
    entries. This causes an issue when a macvlan is on top of the bond, and
    remote devices send packets to the macvlan using the bond's MAC address
    as the destination. After delivering the packets to the macvlan, the macvlan
    will rejects them as the MAC address is incorrect. Consequently, this commit
    makes macvlan over bond non-functional.
    
    To address this problem, one potential solution is to check for the presence
    of a macvlan port on the bond device using netif_is_macvlan_port(bond->dev)
    and return NULL in the rlb_arp_xmit() function. However, this approach
    doesn't fully resolve the situation when a VLAN exists between the bond and
    macvlan.
    
    So let's just do a partial revert for commit 14af9963ba1e in rlb_arp_xmit().
    As the comment said, Don't modify or load balance ARPs that do not originate
    locally.
    
    Fixes: 14af9963ba1e ("bonding: Support macvlans on top of tlb/rlb mode bonds")
    Reported-by: susan.zheng@veritas.com
    Closes: https://bugzilla.redhat.com/show_bug.cgi?id=2117816
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed8528e17f31264cbe6b6655c9eff02715bfd195
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Jan 26 11:10:59 2022 -0800

    net: remove bond_slave_has_mac_rcu()
    
    [ Upstream commit 8b0fdcdc3a7d44aff907f0103f5ffb86b12bfe71 ]
    
    No caller since v3.16.
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: e74216b8def3 ("bonding: fix macvlan over alb bond support")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f131856125cecba35ae35010e6752b78ed4830c5
Author: Jamal Hadi Salim <jhs@mojatatu.com>
Date:   Tue Aug 22 06:12:31 2023 -0400

    net/sched: fix a qdisc modification with ambiguous command request
    
    [ Upstream commit da71714e359b64bd7aab3bd56ec53f307f058133 ]
    
    When replacing an existing root qdisc, with one that is of the same kind, the
    request boils down to essentially a parameterization change  i.e not one that
    requires allocation and grafting of a new qdisc. syzbot was able to create a
    scenario which resulted in a taprio qdisc replacing an existing taprio qdisc
    with a combination of NLM_F_CREATE, NLM_F_REPLACE and NLM_F_EXCL leading to
    create and graft scenario.
    The fix ensures that only when the qdisc kinds are different that we should
    allow a create and graft, otherwise it goes into the "change" codepath.
    
    While at it, fix the code and comments to improve readability.
    
    While syzbot was able to create the issue, it did not zone on the root cause.
    Analysis from Vladimir Oltean <vladimir.oltean@nxp.com> helped narrow it down.
    
    v1->V2 changes:
    - remove "inline" function definition (Vladmir)
    - remove extrenous braces in branches (Vladmir)
    - change inline function names (Pedro)
    - Run tdc tests (Victor)
    v2->v3 changes:
    - dont break else/if (Simon)
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+a3618a167af2021433cd@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/netdev/20230816225759.g25x76kmgzya2gei@skbuf/T/
    Tested-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Tested-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f886f1976a92bb59718eabee3fa0ae86e7a69db
Author: Alessio Igor Bogani <alessio.bogani@elettra.eu>
Date:   Mon Aug 21 10:19:27 2023 -0700

    igb: Avoid starting unnecessary workqueues
    
    [ Upstream commit b888c510f7b3d64ca75fc0f43b4a4bd1a611312f ]
    
    If ptp_clock_register() fails or CONFIG_PTP isn't enabled, avoid starting
    PTP related workqueues.
    
    In this way we can fix this:
     BUG: unable to handle page fault for address: ffffc9000440b6f8
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 100000067 P4D 100000067 PUD 1001e0067 PMD 107dc5067 PTE 0
     Oops: 0000 [#1] PREEMPT SMP
     [...]
     Workqueue: events igb_ptp_overflow_check
     RIP: 0010:igb_rd32+0x1f/0x60
     [...]
     Call Trace:
      igb_ptp_read_82580+0x20/0x50
      timecounter_read+0x15/0x60
      igb_ptp_overflow_check+0x1a/0x50
      process_one_work+0x1cb/0x3c0
      worker_thread+0x53/0x3f0
      ? rescuer_thread+0x370/0x370
      kthread+0x142/0x160
      ? kthread_associate_blkcg+0xc0/0xc0
      ret_from_fork+0x1f/0x30
    
    Fixes: 1f6e8178d685 ("igb: Prevent dropped Tx timestamps via work items and interrupts.")
    Fixes: d339b1331616 ("igb: add PTP Hardware Clock code")
    Signed-off-by: Alessio Igor Bogani <alessio.bogani@elettra.eu>
    Tested-by: Arpana Arland <arpanax.arland@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230821171927.2203644-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09c35cd626f520d09df18030ffe292ab5c610021
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 18 01:58:20 2023 +0000

    dccp: annotate data-races in dccp_poll()
    
    [ Upstream commit cba3f1786916063261e3e5ccbb803abc325b24ef ]
    
    We changed tcp_poll() over time, bug never updated dccp.
    
    Note that we also could remove dccp instead of maintaining it.
    
    Fixes: 7c657876b63c ("[DCCP]: Initial implementation")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230818015820.2701595-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8ba85563238f63f8826586c5c163a9516b6c24c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 18 01:51:32 2023 +0000

    sock: annotate data-races around prot->memory_pressure
    
    [ Upstream commit 76f33296d2e09f63118db78125c95ef56df438e9 ]
    
    *prot->memory_pressure is read/writen locklessly, we need
    to add proper annotations.
    
    A recent commit added a new race, it is time to audit all accesses.
    
    Fixes: 2d0c88e84e48 ("sock: Fix misuse of sk_under_memory_pressure()")
    Fixes: 4d93df0abd50 ("[SCTP]: Rewrite of sctp buffer management code")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Abel Wu <wuyun.abel@bytedance.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Link: https://lore.kernel.org/r/20230818015132.2699348-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d433eda76b66ab271f5924b26ddfec063eeb454
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Thu Aug 17 20:55:39 2023 +0800

    tracing: Fix memleak due to race between current_tracer and trace
    
    [ Upstream commit eecb91b9f98d6427d4af5fdb8f108f52572a39e7 ]
    
    Kmemleak report a leak in graph_trace_open():
    
      unreferenced object 0xffff0040b95f4a00 (size 128):
        comm "cat", pid 204981, jiffies 4301155872 (age 99771.964s)
        hex dump (first 32 bytes):
          e0 05 e7 b4 ab 7d 00 00 0b 00 01 00 00 00 00 00 .....}..........
          f4 00 01 10 00 a0 ff ff 00 00 00 00 65 00 10 00 ............e...
        backtrace:
          [<000000005db27c8b>] kmem_cache_alloc_trace+0x348/0x5f0
          [<000000007df90faa>] graph_trace_open+0xb0/0x344
          [<00000000737524cd>] __tracing_open+0x450/0xb10
          [<0000000098043327>] tracing_open+0x1a0/0x2a0
          [<00000000291c3876>] do_dentry_open+0x3c0/0xdc0
          [<000000004015bcd6>] vfs_open+0x98/0xd0
          [<000000002b5f60c9>] do_open+0x520/0x8d0
          [<00000000376c7820>] path_openat+0x1c0/0x3e0
          [<00000000336a54b5>] do_filp_open+0x14c/0x324
          [<000000002802df13>] do_sys_openat2+0x2c4/0x530
          [<0000000094eea458>] __arm64_sys_openat+0x130/0x1c4
          [<00000000a71d7881>] el0_svc_common.constprop.0+0xfc/0x394
          [<00000000313647bf>] do_el0_svc+0xac/0xec
          [<000000002ef1c651>] el0_svc+0x20/0x30
          [<000000002fd4692a>] el0_sync_handler+0xb0/0xb4
          [<000000000c309c35>] el0_sync+0x160/0x180
    
    The root cause is descripted as follows:
    
      __tracing_open() {  // 1. File 'trace' is being opened;
        ...
        *iter->trace = *tr->current_trace;  // 2. Tracer 'function_graph' is
                                            //    currently set;
        ...
        iter->trace->open(iter);  // 3. Call graph_trace_open() here,
                                  //    and memory are allocated in it;
        ...
      }
    
      s_start() {  // 4. The opened file is being read;
        ...
        *iter->trace = *tr->current_trace;  // 5. If tracer is switched to
                                            //    'nop' or others, then memory
                                            //    in step 3 are leaked!!!
        ...
      }
    
    To fix it, in s_start(), close tracer before switching then reopen the
    new tracer after switching. And some tracers like 'wakeup' may not update
    'iter->private' in some cases when reopen, then it should be cleared
    to avoid being mistakenly closed again.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230817125539.1646321-1-zhengyejian1@huawei.com
    
    Fixes: d7350c3f4569 ("tracing/core: make the read callbacks reentrants")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c298c2757fed7eaccdb179a287ac9a6316917dd
Author: Taimur Hassan <syed.hassan@amd.com>
Date:   Tue Jun 20 17:00:28 2023 -0400

    drm/amd/display: check TG is non-null before checking if enabled
    
    [ Upstream commit 5a25cefc0920088bb9afafeb80ad3dcd84fe278b ]
    
    [Why & How]
    If there is no TG allocation we can dereference a NULL pointer when
    checking if the TG is enabled.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Taimur Hassan <syed.hassan@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebfbe5fffa205fdd6b72fe2ce6436bea1fc590fc
Author: Josip Pavic <Josip.Pavic@amd.com>
Date:   Thu Mar 24 12:08:43 2022 -0400

    drm/amd/display: do not wait for mpc idle if tg is disabled
    
    [ Upstream commit 2513ed4f937999c0446fd824f7564f76b697d722 ]
    
    [Why]
    When booting, the driver waits for the MPC idle bit to be set as part of
    pipe initialization. However, on some systems this occurs before OTG is
    enabled, and since the MPC idle bit won't be set until the vupdate
    signal occurs (which requires OTG to be enabled), this never happens and
    the wait times out. This can add hundreds of milliseconds to the boot
    time.
    
    [How]
    Do not wait for mpc idle if tg is disabled
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Signed-off-by: Josip Pavic <Josip.Pavic@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: 5a25cefc0920 ("drm/amd/display: check TG is non-null before checking if enabled")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d05dec0f048ffb95680522d99ab592f214fd5481
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Jul 12 12:16:40 2023 +0100

    regmap: Account for register length in SMBus I/O limits
    
    [ Upstream commit 0c9d2eb5e94792fe64019008a04d4df5e57625af ]
    
    The SMBus I2C buses have limits on the size of transfers they can do but
    do not factor in the register length meaning we may try to do a transfer
    longer than our length limit, the core will not take care of this.
    Future changes will factor this out into the core but there are a number
    of users that assume current behaviour so let's just do something
    conservative here.
    
    This does not take account padding bits but practically speaking these
    are very rarely if ever used on I2C buses given that they generally run
    slowly enough to mean there's no issue.
    
    Cc: stable@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Xu Yilun <yilun.xu@intel.com>
    Link: https://lore.kernel.org/r/20230712-regmap-max-transfer-v1-2-80e2aed22e83@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52f186f7db6af3ef51a8890fa05f96bfee7f5e41
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Jun 26 16:44:34 2023 +0200

    dm integrity: reduce vmalloc space footprint on 32-bit architectures
    
    [ Upstream commit 6d50eb4725934fd22f5eeccb401000687c790fd0 ]
    
    It was reported that dm-integrity runs out of vmalloc space on 32-bit
    architectures. On x86, there is only 128MiB vmalloc space and dm-integrity
    consumes it quickly because it has a 64MiB journal and 8MiB recalculate
    buffer.
    
    Fix this by reducing the size of the journal to 4MiB and the size of
    the recalculate buffer to 1MiB, so that multiple dm-integrity devices
    can be created and activated on 32-bit architectures.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15569a09399ad24663310706da6f2208c34004ed
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Apr 27 11:57:43 2021 -0400

    dm integrity: increase RECALC_SECTORS to improve recalculate speed
    
    [ Upstream commit b1a2b9332050c7ae32a22c2c74bc443e39f37b23 ]
    
    Increase RECALC_SECTORS because it improves recalculate speed slightly
    (from 390kiB/s to 410kiB/s).
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Stable-dep-of: 6d50eb472593 ("dm integrity: reduce vmalloc space footprint on 32-bit architectures")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebd918f806bc93082dc661de92b0303f530c5a7e
Author: Naveen N Rao <naveen@kernel.org>
Date:   Tue May 30 11:44:36 2023 +0530

    powerpc: Fail build if using recordmcount with binutils v2.37
    
    [ Upstream commit 25ea739ea1d4d3de41acc4f4eb2d1a97eee0eb75 ]
    
    binutils v2.37 drops unused section symbols, which prevents recordmcount
    from capturing mcount locations in sections that have no non-weak
    symbols. This results in a build failure with a message such as:
            Cannot find symbol for section 12: .text.perf_callchain_kernel.
            kernel/events/callchain.o: failed
    
    The change to binutils was reverted for v2.38, so this behavior is
    specific to binutils v2.37:
    https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=c09c8b42021180eee9495bd50d8b35e683d3901b
    
    Objtool is able to cope with such sections, so this issue is specific to
    recordmcount.
    
    Fail the build and print a warning if binutils v2.37 is detected and if
    we are using recordmcount.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Naveen N Rao <naveen@kernel.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230530061436.56925-1-naveen@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ebeb142cdeb33786efd1cf56806d5f9ae356797
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon Oct 1 15:10:24 2018 +0900

    powerpc: remove leftover code of old GCC version checks
    
    [ Upstream commit bad96de8d31ba65dc26645af5550135315ea0b19 ]
    
    Clean up the leftover of commit f2910f0e6835 ("powerpc: remove old
    GCC version checks").
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Stable-dep-of: 25ea739ea1d4 ("powerpc: Fail build if using recordmcount with binutils v2.37")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c50ac26d5055fef96279142427bc15dd4db8c754
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Sep 27 07:05:53 2018 +0000

    powerpc/32: add stack protector support
    
    [ Upstream commit c3ff2a5193fa61b1b284cfb1d79628814ed0e95a ]
    
    This functionality was tentatively added in the past
    (commit 6533b7c16ee5 ("powerpc: Initial stack protector
    (-fstack-protector) support")) but had to be reverted
    (commit f2574030b0e3 ("powerpc: Revert the initial stack
    protector support") because of GCC implementing it differently
    whether it had been built with libc support or not.
    
    Now, GCC offers the possibility to manually set the
    stack-protector mode (global or tls) regardless of libc support.
    
    This time, the patch selects HAVE_STACKPROTECTOR only if
    -mstack-protector-guard=tls is supported by GCC.
    
    On PPC32, as register r2 points to current task_struct at
    all time, the stack_canary located inside task_struct can be
    used directly by using the following GCC options:
    -mstack-protector-guard=tls
    -mstack-protector-guard-reg=r2
    -mstack-protector-guard-offset=offsetof(struct task_struct, stack_canary))
    
    The protector is disabled for prom_init and bootx_init as
    it is too early to handle it properly.
    
     $ echo CORRUPT_STACK > /sys/kernel/debug/provoke-crash/DIRECT
    [  134.943666] Kernel panic - not syncing: stack-protector: Kernel stack is corrupted in: lkdtm_CORRUPT_STACK+0x64/0x64
    [  134.943666]
    [  134.955414] CPU: 0 PID: 283 Comm: sh Not tainted 4.18.0-s3k-dev-12143-ga3272be41209 #835
    [  134.963380] Call Trace:
    [  134.965860] [c6615d60] [c001f76c] panic+0x118/0x260 (unreliable)
    [  134.971775] [c6615dc0] [c001f654] panic+0x0/0x260
    [  134.976435] [c6615dd0] [c032c368] lkdtm_CORRUPT_STACK_STRONG+0x0/0x64
    [  134.982769] [c6615e00] [ffffffff] 0xffffffff
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Stable-dep-of: 25ea739ea1d4 ("powerpc: Fail build if using recordmcount with binutils v2.37")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e32b0ad436819927cccc5d774edf675ac7bb310f
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Sun Jun 25 00:16:49 2023 +0800

    fbdev: fix potential OOB read in fast_imageblit()
    
    [ Upstream commit c2d22806aecb24e2de55c30a06e5d6eb297d161d ]
    
    There is a potential OOB read at fast_imageblit, for
    "colortab[(*src >> 4)]" can become a negative value due to
    "const char *s = image->data, *src".
    This change makes sure the index for colortab always positive
    or zero.
    
    Similar commit:
    https://patchwork.kernel.org/patch/11746067
    
    Potential bug report:
    https://groups.google.com/g/syzkaller-bugs/c/9ubBXKeKXf4/m/k-QXy4UgAAAJ
    
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d41b658533dbfd9a52eba14e51d0f549083b448
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Sun Mar 13 20:29:51 2022 +0100

    fbdev: Fix sys_imageblit() for arbitrary image widths
    
    [ Upstream commit 61bfcb6a3b981e8f19e044ac8c3de6edbe6caf70 ]
    
    Commit 6f29e04938bf ("fbdev: Improve performance of sys_imageblit()")
    broke sys_imageblit() for image width that are not aligned to 8-bit
    boundaries. Fix this by handling the trailing pixels on each line
    separately. The performance improvements in the original commit do not
    regress by this change.
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Fixes: 6f29e04938bf ("fbdev: Improve performance of sys_imageblit()")
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Thomas Zimmermann <tzimmermann@suse.de>
    Cc: Javier Martinez Canillas <javierm@redhat.com>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220313192952.12058-2-tzimmermann@suse.de
    Stable-dep-of: c2d22806aecb ("fbdev: fix potential OOB read in fast_imageblit()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f19b70e9bc57079c20794216847c43a359befe8
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Wed Feb 23 20:38:01 2022 +0100

    fbdev: Improve performance of sys_imageblit()
    
    [ Upstream commit 6f29e04938bf509fccfad490a74284cf158891ce ]
    
    Improve the performance of sys_imageblit() by manually unrolling
    the inner blitting loop and moving some invariants out. The compiler
    failed to do this automatically. The resulting binary code was even
    slower than the cfb_imageblit() helper, which uses the same algorithm,
    but operates on I/O memory.
    
    A microbenchmark measures the average number of CPU cycles
    for sys_imageblit() after a stabilizing period of a few minutes
    (i7-4790, FullHD, simpledrm, kernel with debugging). The value
    for CFB is given as a reference.
    
      sys_imageblit(), new: 25934 cycles
      sys_imageblit(), old: 35944 cycles
      cfb_imageblit():      30566 cycles
    
    In the optimized case, sys_imageblit() is now ~30% faster than before
    and ~20% faster than cfb_imageblit().
    
    v2:
            * move switch out of inner loop (Gerd)
            * remove test for alignment of dst1 (Sam)
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223193804.18636-3-tzimmermann@suse.de
    Stable-dep-of: c2d22806aecb ("fbdev: fix potential OOB read in fast_imageblit()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e3147891d8a13a7d748700a8fbb5fe225cbe090
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Mon Jun 19 16:06:13 2023 +0800

    tty: serial: fsl_lpuart: add earlycon for imx8ulp platform
    
    [ Upstream commit e0edfdc15863ec80a1d9ac6e174dbccc00206dd0 ]
    
    Add earlycon support for imx8ulp platform.
    
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230619080613.16522-1-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69f7e484ca543de9485e3aac7f61224ead12f09b
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Wed Nov 24 08:31:09 2021 +0100

    Revert "tty: serial: fsl_lpuart: drop earlycon entry for i.MX8QXP"
    
    [ Upstream commit 4e9679738a918d8a482ac6a2cb2bb871f094bb84 ]
    
    Revert commit b4b844930f27 ("tty: serial: fsl_lpuart: drop earlycon entry
    for i.MX8QXP"), because this breaks earlycon support on imx8qm/imx8qxp.
    While it is true that for earlycon there is no difference between
    i.MX8QXP and i.MX7ULP (for now at least), there are differences
    regarding clocks and fixups for wakeup support. For that reason it was
    deemed unacceptable to add the imx7ulp compatible to device tree in
    order to get earlycon working again.
    
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Link: https://lore.kernel.org/r/20211124073109.805088-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: e0edfdc15863 ("tty: serial: fsl_lpuart: add earlycon for imx8ulp platform")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d043d0373fa9195125876cd8cb9c0079d6cf3697
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Wed Jun 7 13:51:22 2023 +0800

    MIPS: cpu-features: Use boot_cpu_type for CPU type based features
    
    [ Upstream commit 5487a7b60695a92cf998350e4beac17144c91fcd ]
    
    Some CPU feature macros were using current_cpu_type to mark feature
    availability.
    
    However current_cpu_type will use smp_processor_id, which is prohibited
    under preemptable context.
    
    Since those features are all uniform on all CPUs in a SMP system, use
    boot_cpu_type instead of current_cpu_type to fix preemptable kernel.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cee476bfadcf70e685cc26e0a188c0e22732a54b
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Tue Apr 4 10:33:44 2023 +0100

    MIPS: cpu-features: Enable octeon_cache by cpu_type
    
    [ Upstream commit f641519409a73403ee6612b8648b95a688ab85c2 ]
    
    cpu_has_octeon_cache was tied to 0 for generic cpu-features,
    whith this generic kernel built for octeon CPU won't boot.
    
    Just enable this flag by cpu_type. It won't hurt orther platforms
    because compiler will eliminate the code path on other processors.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Stable-dep-of: 5487a7b60695 ("MIPS: cpu-features: Use boot_cpu_type for CPU type based features")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aaa9d8d8425c6d284120be3269d194d1814e6894
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed May 24 12:02:04 2023 -0400

    fs: dlm: fix mismatch of plock results from userspace
    
    [ Upstream commit 57e2c2f2d94cfd551af91cedfa1af6d972487197 ]
    
    When a waiting plock request (F_SETLKW) is sent to userspace
    for processing (dlm_controld), the result is returned at a
    later time. That result could be incorrectly matched to a
    different waiting request in cases where the owner field is
    the same (e.g. different threads in a process.) This is fixed
    by comparing all the properties in the request and reply.
    
    The results for non-waiting plock requests are now matched
    based on list order because the results are returned in the
    same order they were sent.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 564addc053b64e3632b287ce56959e1727529528
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed Jun 22 14:45:08 2022 -0400

    fs: dlm: use dlm_plock_info for do_unlock_close
    
    [ Upstream commit 4d413ae9ced4180c0e2114553c3a7560b509b0f8 ]
    
    This patch refactors do_unlock_close() by using only struct dlm_plock_info
    as a parameter.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c3435d45abd823a4cb454fd623d5a34d52badd6
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed Jun 22 14:45:05 2022 -0400

    fs: dlm: change plock interrupted message to debug again
    
    [ Upstream commit ea06d4cabf529eefbe7e89e3a8325f1f89355ccd ]
    
    This patch reverses the commit bcfad4265ced ("dlm: improve plock logging
    if interrupted") by moving it to debug level and notifying the user an op
    was removed.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee26abc216e2881c589a8729f78bbbed5c7d0f17
Author: Alexander Aring <aahringo@redhat.com>
Date:   Wed Jun 22 14:45:06 2022 -0400

    fs: dlm: add pid to debug log
    
    [ Upstream commit 19d7ca051d303622c423b4cb39e6bde5d177328b ]
    
    This patch adds the pid information which requested the lock operation
    to the debug log output.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f27399dc0546ff08fae3727880fce637c1e29569
Author: Jakob Koschel <jakobkoschel@gmail.com>
Date:   Wed Apr 6 14:05:31 2022 -0400

    dlm: replace usage of found with dedicated list iterator variable
    
    [ Upstream commit dc1acd5c94699389a9ed023e94dd860c846ea1f6 ]
    
    To move the list iterator variable into the list_for_each_entry_*()
    macro in the future it should be avoided to use the list iterator
    variable after the loop body.
    
    To *never* use the list iterator variable after the loop it was
    concluded to use a separate iterator variable instead of a
    found boolean [1].
    
    This removes the need to use a found variable and simply checking if
    the variable was set, can determine if the break/goto was hit.
    
    Link: https://lore.kernel.org/all/CAHk-=wgRr_D8CB-D9Kg-c=EHreAsk5SqXPwr9Y7k9sA6cWXJ6w@mail.gmail.com/ [1]
    Signed-off-by: Jakob Koschel <jakobkoschel@gmail.com>
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a93c1454198df985dfedf74df8be697dcb6720d8
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 4 16:06:34 2022 -0400

    dlm: improve plock logging if interrupted
    
    [ Upstream commit bcfad4265cedf3adcac355e994ef9771b78407bd ]
    
    This patch changes the log level if a plock is removed when interrupted
    from debug to info. Additional it signals now that the plock entity was
    removed to let the user know what's happening.
    
    If on a dev_write() a pending plock cannot be find it will signal that
    it might have been removed because wait interruption.
    
    Before this patch there might be a "dev_write no op ..." info message
    and the users can only guess that the plock was removed before because
    the wait interruption. To be sure that is the case we log both messages
    on the same log level.
    
    Let both message be logged on info layer because it should not happened
    a lot and if it happens it should be clear why the op was not found.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 57e2c2f2d94c ("fs: dlm: fix mismatch of plock results from userspace")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 536155e3399c56c6319a7a973e1dbc38f9ead05d
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Mon Apr 24 21:15:57 2023 +0200

    PCI: acpiphp: Reassign resources on bridge if necessary
    
    [ Upstream commit 40613da52b13fb21c5566f10b287e0ca8c12c4e9 ]
    
    When using ACPI PCI hotplug, hotplugging a device with large BARs may fail
    if bridge windows programmed by firmware are not large enough.
    
    Reproducer:
      $ qemu-kvm -monitor stdio -M q35  -m 4G \
          -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=on \
          -device id=rp1,pcie-root-port,bus=pcie.0,chassis=4 \
          disk_image
    
     wait till linux guest boots, then hotplug device:
       (qemu) device_add qxl,bus=rp1
    
     hotplug on guest side fails with:
       pci 0000:01:00.0: [1b36:0100] type 00 class 0x038000
       pci 0000:01:00.0: reg 0x10: [mem 0x00000000-0x03ffffff]
       pci 0000:01:00.0: reg 0x14: [mem 0x00000000-0x03ffffff]
       pci 0000:01:00.0: reg 0x18: [mem 0x00000000-0x00001fff]
       pci 0000:01:00.0: reg 0x1c: [io  0x0000-0x001f]
       pci 0000:01:00.0: BAR 0: no space for [mem size 0x04000000]
       pci 0000:01:00.0: BAR 0: failed to assign [mem size 0x04000000]
       pci 0000:01:00.0: BAR 1: no space for [mem size 0x04000000]
       pci 0000:01:00.0: BAR 1: failed to assign [mem size 0x04000000]
       pci 0000:01:00.0: BAR 2: assigned [mem 0xfe800000-0xfe801fff]
       pci 0000:01:00.0: BAR 3: assigned [io  0x1000-0x101f]
       qxl 0000:01:00.0: enabling device (0000 -> 0003)
       Unable to create vram_mapping
       qxl: probe of 0000:01:00.0 failed with error -12
    
    However when using native PCIe hotplug
      '-global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off'
    it works fine, since kernel attempts to reassign unused resources.
    
    Use the same machinery as native PCIe hotplug to (re)assign resources.
    
    Link: https://lore.kernel.org/r/20230424191557.2464760-1-imammedo@redhat.com
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Rafael J. Wysocki <rafael@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f63100cf9a673eaef15a1b1415d7a480af1571c
Author: Justin Chen <justin.chen@broadcom.com>
Date:   Sat Aug 12 21:41:47 2023 -0700

    net: phy: broadcom: stub c45 read/write for 54810
    
    commit 096516d092d54604d590827d05b1022c8f326639 upstream.
    
    The 54810 does not support c45. The mmd_phy_indirect accesses return
    arbirtary values leading to odd behavior like saying it supports EEE
    when it doesn't. We also see that reading/writing these non-existent
    MMD registers leads to phy instability in some cases.
    
    Fixes: b14995ac2527 ("net: phy: broadcom: Add BCM54810 PHY entry")
    Signed-off-by: Justin Chen <justin.chen@broadcom.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/1691901708-28650-1-git-send-email-justin.chen@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    [florian: resolved conflicts in 4.19]
    Signed-off-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 996a40c68ba1fdedfd3b2a3dac1c0eac80611ebb
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Jun 30 16:19:11 2023 +0800

    net: xfrm: Amend XFRMA_SEC_CTX nla_policy structure
    
    commit d1e0e61d617ba17aa516db707aa871387566bbf7 upstream.
    
    According to all consumers code of attrs[XFRMA_SEC_CTX], like
    
    * verify_sec_ctx_len(), convert to xfrm_user_sec_ctx*
    * xfrm_state_construct(), call security_xfrm_state_alloc whose prototype
    is int security_xfrm_state_alloc(.., struct xfrm_user_sec_ctx *sec_ctx);
    * copy_from_user_sec_ctx(), convert to xfrm_user_sec_ctx *
    ...
    
    It seems that the expected parsing result for XFRMA_SEC_CTX should be
    structure xfrm_user_sec_ctx, and the current xfrm_sec_ctx is confusing
    and misleading (Luckily, they happen to have same size 8 bytes).
    
    This commit amend the policy structure to xfrm_user_sec_ctx to avoid
    ambiguity.
    
    Fixes: cf5cb79f6946 ("[XFRM] netlink: Establish an attribute policy")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d81cfe710ea128d2a21b411c1b2e9785d03d9e4e
Author: Jason Xing <kernelxing@tencent.com>
Date:   Fri Aug 11 10:37:47 2023 +0800

    net: fix the RTO timer retransmitting skb every 1ms if linear option is enabled
    
    commit e4dd0d3a2f64b8bd8029ec70f52bdbebd0644408 upstream.
    
    In the real workload, I encountered an issue which could cause the RTO
    timer to retransmit the skb per 1ms with linear option enabled. The amount
    of lost-retransmitted skbs can go up to 1000+ instantly.
    
    The root cause is that if the icsk_rto happens to be zero in the 6th round
    (which is the TCP_THIN_LINEAR_RETRIES value), then it will always be zero
    due to the changed calculation method in tcp_retransmit_timer() as follows:
    
    icsk->icsk_rto = min(icsk->icsk_rto << 1, TCP_RTO_MAX);
    
    Above line could be converted to
    icsk->icsk_rto = min(0 << 1, TCP_RTO_MAX) = 0
    
    Therefore, the timer expires so quickly without any doubt.
    
    I read through the RFC 6298 and found that the RTO value can be rounded
    up to a certain value, in Linux, say TCP_RTO_MIN as default, which is
    regarded as the lower bound in this patch as suggested by Eric.
    
    Fixes: 36e31b0af587 ("net: TCP thin linear timeouts")
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Jason Xing <kernelxing@tencent.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 834c99d99f7eaf63485ea3c5da8e8293f648b4f7
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Aug 9 23:12:56 2023 -0400

    virtio-net: set queues after driver_ok
    
    commit 51b813176f098ff61bd2833f627f5319ead098a5 upstream.
    
    Commit 25266128fe16 ("virtio-net: fix race between set queues and
    probe") tries to fix the race between set queues and probe by calling
    _virtnet_set_queues() before DRIVER_OK is set. This violates virtio
    spec. Fixing this by setting queues after virtio_device_ready().
    
    Note that rtnl needs to be held for userspace requests to change the
    number of queues. So we are serialized in this way.
    
    Fixes: 25266128fe16 ("virtio-net: fix race between set queues and probe")
    Reported-by: Dragos Tatulea <dtatulea@nvidia.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd6303bef49970ac7f9278a94473b587e19d1ee2
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Aug 21 10:55:05 2023 -0700

    af_unix: Fix null-ptr-deref in unix_stream_sendpage().
    
    Bing-Jhong Billy Jheng reported null-ptr-deref in unix_stream_sendpage()
    with detailed analysis and a nice repro.
    
    unix_stream_sendpage() tries to add data to the last skb in the peer's
    recv queue without locking the queue.
    
    If the peer's FD is passed to another socket and the socket's FD is
    passed to the peer, there is a loop between them.  If we close both
    sockets without receiving FD, the sockets will be cleaned up by garbage
    collection.
    
    The garbage collection iterates such sockets and unlinks skb with
    FD from the socket's receive queue under the queue's lock.
    
    So, there is a race where unix_stream_sendpage() could access an skb
    locklessly that is being released by garbage collection, resulting in
    use-after-free.
    
    To avoid the issue, unix_stream_sendpage() must lock the peer's recv
    queue.
    
    Note the issue does not exist in 6.5+ thanks to the recent sendpage()
    refactoring.
    
    This patch is originally written by Linus Torvalds.
    
    BUG: unable to handle page fault for address: ffff988004dd6870
    PF: supervisor read access in kernel mode
    PF: error_code(0x0000) - not-present page
    PGD 0 P4D 0
    PREEMPT SMP PTI
    CPU: 4 PID: 297 Comm: garbage_uaf Not tainted 6.1.46 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    RIP: 0010:kmem_cache_alloc_node+0xa2/0x1e0
    Code: c0 0f 84 32 01 00 00 41 83 fd ff 74 10 48 8b 00 48 c1 e8 3a 41 39 c5 0f 85 1c 01 00 00 41 8b 44 24 28 49 8b 3c 24 48 8d 4a 40 <49> 8b 1c 06 4c 89 f0 65 48 0f c7 0f 0f 94 c0 84 c0 74 a1 41 8b 44
    RSP: 0018:ffffc9000079fac0 EFLAGS: 00000246
    RAX: 0000000000000070 RBX: 0000000000000005 RCX: 000000000001a284
    RDX: 000000000001a244 RSI: 0000000000400cc0 RDI: 000000000002eee0
    RBP: 0000000000400cc0 R08: 0000000000400cc0 R09: 0000000000000003
    R10: 0000000000000001 R11: 0000000000000000 R12: ffff888003970f00
    R13: 00000000ffffffff R14: ffff988004dd6800 R15: 00000000000000e8
    FS:  00007f174d6f3600(0000) GS:ffff88807db00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff988004dd6870 CR3: 00000000092be000 CR4: 00000000007506e0
    PKRU: 55555554
    Call Trace:
     <TASK>
     ? __die_body.cold+0x1a/0x1f
     ? page_fault_oops+0xa9/0x1e0
     ? fixup_exception+0x1d/0x310
     ? exc_page_fault+0xa8/0x150
     ? asm_exc_page_fault+0x22/0x30
     ? kmem_cache_alloc_node+0xa2/0x1e0
     ? __alloc_skb+0x16c/0x1e0
     __alloc_skb+0x16c/0x1e0
     alloc_skb_with_frags+0x48/0x1e0
     sock_alloc_send_pskb+0x234/0x270
     unix_stream_sendmsg+0x1f5/0x690
     sock_sendmsg+0x5d/0x60
     ____sys_sendmsg+0x210/0x260
     ___sys_sendmsg+0x83/0xd0
     ? kmem_cache_alloc+0xc6/0x1c0
     ? avc_disable+0x20/0x20
     ? percpu_counter_add_batch+0x53/0xc0
     ? alloc_empty_file+0x5d/0xb0
     ? alloc_file+0x91/0x170
     ? alloc_file_pseudo+0x94/0x100
     ? __fget_light+0x9f/0x120
     __sys_sendmsg+0x54/0xa0
     do_syscall_64+0x3b/0x90
     entry_SYSCALL_64_after_hwframe+0x69/0xd3
    RIP: 0033:0x7f174d639a7d
    Code: 28 89 54 24 1c 48 89 74 24 10 89 7c 24 08 e8 8a c1 f4 ff 8b 54 24 1c 48 8b 74 24 10 41 89 c0 8b 7c 24 08 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 33 44 89 c7 48 89 44 24 08 e8 de c1 f4 ff 48
    RSP: 002b:00007ffcb563ea50 EFLAGS: 00000293 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f174d639a7d
    RDX: 0000000000000000 RSI: 00007ffcb563eab0 RDI: 0000000000000007
    RBP: 00007ffcb563eb10 R08: 0000000000000000 R09: 00000000ffffffff
    R10: 00000000004040a0 R11: 0000000000000293 R12: 00007ffcb563ec28
    R13: 0000000000401398 R14: 0000000000403e00 R15: 00007f174d72c000
     </TASK>
    
    Fixes: 869e7c62486e ("net: af_unix: implement stream sendpage support")
    Reported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Reviewed-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Co-developed-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 188e7c2249adc8bd2435dee4283507888e06ff88
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Aug 15 14:08:47 2023 -0400

    netfilter: set default timeout to 3 secs for sctp shutdown send and recv state
    
    commit 9bfab6d23a2865966a4f89a96536fbf23f83bc8c upstream.
    
    In SCTP protocol, it is using the same timer (T2 timer) for SHUTDOWN and
    SHUTDOWN_ACK retransmission. However in sctp conntrack the default timeout
    value for SCTP_CONNTRACK_SHUTDOWN_ACK_SENT state is 3 secs while it's 300
    msecs for SCTP_CONNTRACK_SHUTDOWN_SEND/RECV state.
    
    As Paolo Valerio noticed, this might cause unwanted expiration of the ct
    entry. In my test, with 1s tc netem delay set on the NAT path, after the
    SHUTDOWN is sent, the sctp ct entry enters SCTP_CONNTRACK_SHUTDOWN_SEND
    state. However, due to 300ms (too short) delay, when the SHUTDOWN_ACK is
    sent back from the peer, the sctp ct entry has expired and been deleted,
    and then the SHUTDOWN_ACK has to be dropped.
    
    Also, it is confusing these two sysctl options always show 0 due to all
    timeout values using sec as unit:
    
      net.netfilter.nf_conntrack_sctp_timeout_shutdown_recd = 0
      net.netfilter.nf_conntrack_sctp_timeout_shutdown_sent = 0
    
    This patch fixes it by also using 3 secs for sctp shutdown send and recv
    state in sctp conntrack, which is also RTO.initial value in SCTP protocol.
    
    Note that the very short time value for SCTP_CONNTRACK_SHUTDOWN_SEND/RECV
    was probably used for a rare scenario where SHUTDOWN is sent on 1st path
    but SHUTDOWN_ACK is replied on 2nd path, then a new connection started
    immediately on 1st path. So this patch also moves from SHUTDOWN_SEND/RECV
    to CLOSE when receiving INIT in the ORIGINAL direction.
    
    Fixes: 9fb9cbb1082d ("[NETFILTER]: Add nf_conntrack subsystem.")
    Reported-by: Paolo Valerio <pvalerio@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3127ab7eeea7b307b4ad6cb2d096f821fb5fcd0d
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue May 9 10:47:45 2023 +0200

    test_firmware: prevent race conditions by a correct implementation of locking
    
    commit 4acfe3dfde685a5a9eaec5555351918e2d7266a1 upstream.
    
    Dan Carpenter spotted a race condition in a couple of situations like
    these in the test_firmware driver:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            u8 val;
            int ret;
    
            ret = kstrtou8(buf, 10, &val);
            if (ret)
                    return ret;
    
            mutex_lock(&test_fw_mutex);
            *(u8 *)cfg = val;
            mutex_unlock(&test_fw_mutex);
    
            /* Always return full write size even if we didn't consume all */
            return size;
    }
    
    static ssize_t config_num_requests_store(struct device *dev,
                                             struct device_attribute *attr,
                                             const char *buf, size_t count)
    {
            int rc;
    
            mutex_lock(&test_fw_mutex);
            if (test_fw_config->reqs) {
                    pr_err("Must call release_all_firmware prior to changing config\n");
                    rc = -EINVAL;
                    mutex_unlock(&test_fw_mutex);
                    goto out;
            }
            mutex_unlock(&test_fw_mutex);
    
            rc = test_dev_config_update_u8(buf, count,
                                           &test_fw_config->num_requests);
    
    out:
            return rc;
    }
    
    static ssize_t config_read_fw_idx_store(struct device *dev,
                                            struct device_attribute *attr,
                                            const char *buf, size_t count)
    {
            return test_dev_config_update_u8(buf, count,
                                             &test_fw_config->read_fw_idx);
    }
    
    The function test_dev_config_update_u8() is called from both the locked
    and the unlocked context, function config_num_requests_store() and
    config_read_fw_idx_store() which can both be called asynchronously as
    they are driver's methods, while test_dev_config_update_u8() and siblings
    change their argument pointed to by u8 *cfg or similar pointer.
    
    To avoid deadlock on test_fw_mutex, the lock is dropped before calling
    test_dev_config_update_u8() and re-acquired within test_dev_config_update_u8()
    itself, but alas this creates a race condition.
    
    Having two locks wouldn't assure a race-proof mutual exclusion.
    
    This situation is best avoided by the introduction of a new, unlocked
    function __test_dev_config_update_u8() which can be called from the locked
    context and reducing test_dev_config_update_u8() to:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            int ret;
    
            mutex_lock(&test_fw_mutex);
            ret = __test_dev_config_update_u8(buf, size, cfg);
            mutex_unlock(&test_fw_mutex);
    
            return ret;
    }
    
    doing the locking and calling the unlocked primitive, which enables both
    locked and unlocked versions without duplication of code.
    
    The similar approach was applied to all functions called from the locked
    and the unlocked context, which safely mitigates both deadlocks and race
    conditions in the driver.
    
    __test_dev_config_update_bool(), __test_dev_config_update_u8() and
    __test_dev_config_update_size_t() unlocked versions of the functions
    were introduced to be called from the locked contexts as a workaround
    without releasing the main driver's lock and thereof causing a race
    condition.
    
    The test_dev_config_update_bool(), test_dev_config_update_u8() and
    test_dev_config_update_size_t() locked versions of the functions
    are being called from driver methods without the unnecessary multiplying
    of the locking and unlocking code for each method, and complicating
    the code with saving of the return value across lock.
    
    Fixes: 7feebfa487b92 ("test_firmware: add support for request_firmware_into_buf")
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Russ Weight <russell.h.weight@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tianfei Zhang <tianfei.zhang@intel.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Colin Ian King <colin.i.king@gmail.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: linux-kselftest@vger.kernel.org
    Cc: stable@vger.kernel.org # v5.4
    Suggested-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/r/20230509084746.48259-1-mirsad.todorovac@alu.unizg.hr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe1e06a27e6c8d98abcdac83d8a55225b7edeffc
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Aug 7 20:44:42 2023 +0800

    mmc: wbsd: fix double mmc_free_host() in wbsd_init()
    
    commit d83035433701919ac6db15f7737cbf554c36c1a6 upstream.
    
    mmc_free_host() has already be called in wbsd_free_mmc(),
    remove the mmc_free_host() in error path in wbsd_init().
    
    Fixes: dc5b9b50fc9d ("mmc: wbsd: fix return value check of mmc_add_host()")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230807124443.3431366-1-yangyingliang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a87735675147f848445f05fd1f06168188f91af
Author: Russell Harmon via samba-technical <samba-technical@lists.samba.org>
Date:   Thu Aug 10 00:19:22 2023 -0700

    cifs: Release folio lock on fscache read hit.
    
    commit 69513dd669e243928f7450893190915a88f84a2b upstream.
    
    Under the current code, when cifs_readpage_worker is called, the call
    contract is that the callee should unlock the page. This is documented
    in the read_folio section of Documentation/filesystems/vfs.rst as:
    
    > The filesystem should unlock the folio once the read has completed,
    > whether it was successful or not.
    
    Without this change, when fscache is in use and cache hit occurs during
    a read, the page lock is leaked, producing the following stack on
    subsequent reads (via mmap) to the page:
    
    $ cat /proc/3890/task/12864/stack
    [<0>] folio_wait_bit_common+0x124/0x350
    [<0>] filemap_read_folio+0xad/0xf0
    [<0>] filemap_fault+0x8b1/0xab0
    [<0>] __do_fault+0x39/0x150
    [<0>] do_fault+0x25c/0x3e0
    [<0>] __handle_mm_fault+0x6ca/0xc70
    [<0>] handle_mm_fault+0xe9/0x350
    [<0>] do_user_addr_fault+0x225/0x6c0
    [<0>] exc_page_fault+0x84/0x1b0
    [<0>] asm_exc_page_fault+0x27/0x30
    
    This requires a reboot to resolve; it is a deadlock.
    
    Note however that the call to cifs_readpage_from_fscache does mark the
    page clean, but does not free the folio lock. This happens in
    __cifs_readpage_from_fscache on success. Releasing the lock at that
    point however is not appropriate as cifs_readahead also calls
    cifs_readpage_from_fscache and *does* unconditionally release the lock
    after its return. This change therefore effectively makes
    cifs_readpage_worker work like cifs_readahead.
    
    Signed-off-by: Russell Harmon <russ@har.mn>
    Acked-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Reviewed-by: David Howells <dhowells@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ee111e315e37f117e5b97a6dd72760e5bdffae9
Author: dengxiang <dengxiang@nfschina.com>
Date:   Thu Aug 3 10:44:37 2023 +0800

    ALSA: usb-audio: Add support for Mythware XA001AU capture and playback interfaces.
    
    commit 788449ae57f4273111b779bbcaad552b67f517d5 upstream.
    
    This patch adds a USB quirk for Mythware XA001AU USB interface.
    
    Signed-off-by: dengxiang <dengxiang@nfschina.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230803024437.370069-1-dengxiang@nfschina.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 720a297b334e85d34099e83d1f375b92c3efedd6
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Aug 4 16:15:51 2023 +0300

    serial: 8250: Fix oops for port->pm on uart_change_pm()
    
    [ Upstream commit dfe2aeb226fd5e19b0ee795f4f6ed8bc494c1534 ]
    
    Unloading a hardware specific 8250 driver can produce error "Unable to
    handle kernel paging request at virtual address" about ten seconds after
    unloading the driver. This happens on uart_hangup() calling
    uart_change_pm().
    
    Turns out commit 04e82793f068 ("serial: 8250: Reinit port->pm on port
    specific driver unbind") was only a partial fix. If the hardware specific
    driver has initialized port->pm function, we need to clear port->pm too.
    Just reinitializing port->ops does not do this. Otherwise serial8250_pm()
    will call port->pm() instead of serial8250_do_pm().
    
    Fixes: 04e82793f068 ("serial: 8250: Reinit port->pm on port specific driver unbind")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230804131553.52927-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67d8b2cecbc8c8e9fdf433260bb1d146f9335a63
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Aug 9 19:19:31 2023 +0200

    ASoC: meson: axg-tdm-formatter: fix channel slot allocation
    
    [ Upstream commit c1f848f12103920ca165758aedb1c10904e193e1 ]
    
    When the tdm lane mask is computed, the driver currently fills the 1st lane
    before moving on to the next. If the stream has less channels than the
    lanes can accommodate, slots will be disabled on the last lanes.
    
    Unfortunately, the HW distribute channels in a different way. It distribute
    channels in pair on each lanes before moving on the next slots.
    
    This difference leads to problems if a device has an interface with more
    than 1 lane and with more than 2 slots per lane.
    
    For example: a playback interface with 2 lanes and 4 slots each (total 8
    slots - zero based numbering)
    - Playing a 8ch stream:
      - All slots activated by the driver
      - channel #2 will be played on lane #1 - slot #0 following HW placement
    - Playing a 4ch stream:
      - Lane #1 disabled by the driver
      - channel #2 will be played on lane #0 - slot #2
    
    This behaviour is obviously not desirable.
    
    Change the way slots are activated on the TDM lanes to follow what the HW
    does and make sure each channel always get mapped to the same slot/lane.
    
    Fixes: 1a11d88f499c ("ASoC: meson: add tdm formatter base driver")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20230809171931.1244502-1-jbrunet@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26c20d2a7e00ba7c5a483557fbf142b80199fd0d
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Tue Aug 1 23:59:11 2023 +0800

    ASoC: rt5665: add missed regulator_bulk_disable
    
    [ Upstream commit c163108e706909570f8aa9aa5bcf6806e2b4c98c ]
    
    The driver forgets to call regulator_bulk_disable()
    
    Add the missed call to fix it.
    
    Fixes: 33ada14a26c8 ("ASoC: add rt5665 codec driver")
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Link: https://lore.kernel.org/r/tencent_A560D01E3E0A00A85A12F137E4B5205B3508@qq.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c9bfadb4301daaceb6c575fa6ad3bc82c152e79
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 14:21:58 2023 +0000

    net: do not allow gso_size to be set to GSO_BY_FRAGS
    
    [ Upstream commit b616be6b97688f2f2bd7c4a47ab32f27f94fb2a9 ]
    
    One missing check in virtio_net_hdr_to_skb() allowed
    syzbot to crash kernels again [1]
    
    Do not allow gso_size to be set to GSO_BY_FRAGS (0xffff),
    because this magic value is used by the kernel.
    
    [1]
    general protection fault, probably for non-canonical address 0xdffffc000000000e: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000070-0x0000000000000077]
    CPU: 0 PID: 5039 Comm: syz-executor401 Not tainted 6.5.0-rc5-next-20230809-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/26/2023
    RIP: 0010:skb_segment+0x1a52/0x3ef0 net/core/skbuff.c:4500
    Code: 00 00 00 e9 ab eb ff ff e8 6b 96 5d f9 48 8b 84 24 00 01 00 00 48 8d 78 70 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 84 c0 74 08 3c 03 0f 8e ea 21 00 00 48 8b 84 24 00 01
    RSP: 0018:ffffc90003d3f1c8 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 000000000001fffe RCX: 0000000000000000
    RDX: 000000000000000e RSI: ffffffff882a3115 RDI: 0000000000000070
    RBP: ffffc90003d3f378 R08: 0000000000000005 R09: 000000000000ffff
    R10: 000000000000ffff R11: 5ee4a93e456187d6 R12: 000000000001ffc6
    R13: dffffc0000000000 R14: 0000000000000008 R15: 000000000000ffff
    FS: 00005555563f2380(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020020000 CR3: 000000001626d000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    udp6_ufo_fragment+0x9d2/0xd50 net/ipv6/udp_offload.c:109
    ipv6_gso_segment+0x5c4/0x17b0 net/ipv6/ip6_offload.c:120
    skb_mac_gso_segment+0x292/0x610 net/core/gso.c:53
    __skb_gso_segment+0x339/0x710 net/core/gso.c:124
    skb_gso_segment include/net/gso.h:83 [inline]
    validate_xmit_skb+0x3a5/0xf10 net/core/dev.c:3625
    __dev_queue_xmit+0x8f0/0x3d60 net/core/dev.c:4329
    dev_queue_xmit include/linux/netdevice.h:3082 [inline]
    packet_xmit+0x257/0x380 net/packet/af_packet.c:276
    packet_snd net/packet/af_packet.c:3087 [inline]
    packet_sendmsg+0x24c7/0x5570 net/packet/af_packet.c:3119
    sock_sendmsg_nosec net/socket.c:727 [inline]
    sock_sendmsg+0xd9/0x180 net/socket.c:750
    ____sys_sendmsg+0x6ac/0x940 net/socket.c:2496
    ___sys_sendmsg+0x135/0x1d0 net/socket.c:2550
    __sys_sendmsg+0x117/0x1e0 net/socket.c:2579
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7ff27cdb34d9
    
    Fixes: 3953c46c3ac7 ("sk_buff: allow segmenting based on frag sizes")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Link: https://lore.kernel.org/r/20230816142158.1779798-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98e6388d149152c9e7ee795f7613d4236eb69d36
Author: Abel Wu <wuyun.abel@bytedance.com>
Date:   Wed Aug 16 17:12:22 2023 +0800

    sock: Fix misuse of sk_under_memory_pressure()
    
    [ Upstream commit 2d0c88e84e483982067a82073f6125490ddf3614 ]
    
    The status of global socket memory pressure is updated when:
    
      a) __sk_mem_raise_allocated():
    
            enter: sk_memory_allocated(sk) >  sysctl_mem[1]
            leave: sk_memory_allocated(sk) <= sysctl_mem[0]
    
      b) __sk_mem_reduce_allocated():
    
            leave: sk_under_memory_pressure(sk) &&
                    sk_memory_allocated(sk) < sysctl_mem[0]
    
    So the conditions of leaving global pressure are inconstant, which
    may lead to the situation that one pressured net-memcg prevents the
    global pressure from being cleared when there is indeed no global
    pressure, thus the global constrains are still in effect unexpectedly
    on the other sockets.
    
    This patch fixes this by ignoring the net-memcg's pressure when
    deciding whether should leave global memory pressure.
    
    Fixes: e1aab161e013 ("socket: initial cgroup code.")
    Signed-off-by: Abel Wu <wuyun.abel@bytedance.com>
    Acked-by: Shakeel Butt <shakeelb@google.com>
    Link: https://lore.kernel.org/r/20230816091226.1542-1-wuyun.abel@bytedance.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b41ffee29a86163079def8c4172509065f5b724
Author: Andrii Staikov <andrii.staikov@intel.com>
Date:   Wed Aug 2 09:47:32 2023 +0200

    i40e: fix misleading debug logs
    
    [ Upstream commit 2f2beb8874cb0844e84ad26e990f05f4f13ff63f ]
    
    Change "write" into the actual "read" word.
    Change parameters description.
    
    Fixes: 7073f46e443e ("i40e: Add AQ commands for NVM Update for X722")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Signed-off-by: Andrii Staikov <andrii.staikov@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d15ae288a01f1327bf231f57373b60aff442a2f8
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Mon Aug 14 11:23:01 2023 +0800

    team: Fix incorrect deletion of ETH_P_8021AD protocol vid from slaves
    
    [ Upstream commit dafcbce07136d799edc4c67f04f9fd69ff1eac1f ]
    
    Similar to commit 01f4fd270870 ("bonding: Fix incorrect deletion of
    ETH_P_8021AD protocol vid from slaves"), we can trigger BUG_ON(!vlan_info)
    in unregister_vlan_dev() with the following testcase:
    
      # ip netns add ns1
      # ip netns exec ns1 ip link add team1 type team
      # ip netns exec ns1 ip link add team_slave type veth peer veth2
      # ip netns exec ns1 ip link set team_slave master team1
      # ip netns exec ns1 ip link add link team_slave name team_slave.10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link add link team1 name team1.10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link set team_slave nomaster
      # ip netns del ns1
    
    Add S-VLAN tag related features support to team driver. So the team driver
    will always propagate the VLAN info to its slaves.
    
    Fixes: 8ad227ff89a7 ("net: vlan: add 802.1ad support")
    Suggested-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230814032301.2804971-1-william.xuanziyang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 255bb7fd670589c00cb2f8a1353b721306135ca3
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Aug 15 15:39:02 2023 +0200

    netfilter: nft_dynset: disallow object maps
    
    [ Upstream commit 23185c6aed1ffb8fc44087880ba2767aba493779 ]
    
    Do not allow to insert elements from datapath to objects maps.
    
    Fixes: 8aeff920dcc9 ("netfilter: nf_tables: add stateful object reference to set elements")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c55ba238333a9d45234542f2d95667ad4bf3bbe2
Author: Petr Machata <petrm@nvidia.com>
Date:   Fri Aug 11 17:59:27 2023 +0200

    selftests: mirror_gre_changes: Tighten up the TTL test match
    
    [ Upstream commit 855067defa36b1f9effad8c219d9a85b655cf500 ]
    
    This test verifies whether the encapsulated packets have the correct
    configured TTL. It does so by sending ICMP packets through the test
    topology and mirroring them to a gretap netdevice. On a busy host
    however, more than just the test ICMP packets may end up flowing
    through the topology, get mirrored, and counted. This leads to
    potential spurious failures as the test observes much more mirrored
    packets than the sent test packets, and assumes a bug.
    
    Fix this by tightening up the mirror action match. Change it from
    matchall to a flower classifier matching on ICMP packets specifically.
    
    Fixes: 45315673e0c5 ("selftests: forwarding: Test changes in mirror-to-gretap")
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44f69c96f8a147413c23c68cda4d6fb5e23137cd
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Jul 21 22:51:03 2023 +0800

    xfrm: add NULL check in xfrm_update_ae_params
    
    [ Upstream commit 00374d9b6d9f932802b55181be9831aa948e5b7c ]
    
    Normally, x->replay_esn and x->preplay_esn should be allocated at
    xfrm_alloc_replay_state_esn(...) in xfrm_state_construct(...), hence the
    xfrm_update_ae_params(...) is okay to update them. However, the current
    implementation of xfrm_new_ae(...) allows a malicious user to directly
    dereference a NULL pointer and crash the kernel like below.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    PGD 8253067 P4D 8253067 PUD 8e0e067 PMD 0
    Oops: 0002 [#1] PREEMPT SMP KASAN NOPTI
    CPU: 0 PID: 98 Comm: poc.npd Not tainted 6.4.0-rc7-00072-gdad9774deaf1 #8
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.o4
    RIP: 0010:memcpy_orig+0xad/0x140
    Code: e8 4c 89 5f e0 48 8d 7f e0 73 d2 83 c2 20 48 29 d6 48 29 d7 83 fa 10 72 34 4c 8b 06 4c 8b 4e 08 c
    RSP: 0018:ffff888008f57658 EFLAGS: 00000202
    RAX: 0000000000000000 RBX: ffff888008bd0000 RCX: ffffffff8238e571
    RDX: 0000000000000018 RSI: ffff888007f64844 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff888008f57818
    R13: ffff888007f64aa4 R14: 0000000000000000 R15: 0000000000000000
    FS:  00000000014013c0(0000) GS:ffff88806d600000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000000 CR3: 00000000054d8000 CR4: 00000000000006f0
    Call Trace:
     <TASK>
     ? __die+0x1f/0x70
     ? page_fault_oops+0x1e8/0x500
     ? __pfx_is_prefetch.constprop.0+0x10/0x10
     ? __pfx_page_fault_oops+0x10/0x10
     ? _raw_spin_unlock_irqrestore+0x11/0x40
     ? fixup_exception+0x36/0x460
     ? _raw_spin_unlock_irqrestore+0x11/0x40
     ? exc_page_fault+0x5e/0xc0
     ? asm_exc_page_fault+0x26/0x30
     ? xfrm_update_ae_params+0xd1/0x260
     ? memcpy_orig+0xad/0x140
     ? __pfx__raw_spin_lock_bh+0x10/0x10
     xfrm_update_ae_params+0xe7/0x260
     xfrm_new_ae+0x298/0x4e0
     ? __pfx_xfrm_new_ae+0x10/0x10
     ? __pfx_xfrm_new_ae+0x10/0x10
     xfrm_user_rcv_msg+0x25a/0x410
     ? __pfx_xfrm_user_rcv_msg+0x10/0x10
     ? __alloc_skb+0xcf/0x210
     ? stack_trace_save+0x90/0xd0
     ? filter_irq_stacks+0x1c/0x70
     ? __stack_depot_save+0x39/0x4e0
     ? __kasan_slab_free+0x10a/0x190
     ? kmem_cache_free+0x9c/0x340
     ? netlink_recvmsg+0x23c/0x660
     ? sock_recvmsg+0xeb/0xf0
     ? __sys_recvfrom+0x13c/0x1f0
     ? __x64_sys_recvfrom+0x71/0x90
     ? do_syscall_64+0x3f/0x90
     ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
     ? copyout+0x3e/0x50
     netlink_rcv_skb+0xd6/0x210
     ? __pfx_xfrm_user_rcv_msg+0x10/0x10
     ? __pfx_netlink_rcv_skb+0x10/0x10
     ? __pfx_sock_has_perm+0x10/0x10
     ? mutex_lock+0x8d/0xe0
     ? __pfx_mutex_lock+0x10/0x10
     xfrm_netlink_rcv+0x44/0x50
     netlink_unicast+0x36f/0x4c0
     ? __pfx_netlink_unicast+0x10/0x10
     ? netlink_recvmsg+0x500/0x660
     netlink_sendmsg+0x3b7/0x700
    
    This Null-ptr-deref bug is assigned CVE-2023-3772. And this commit
    adds additional NULL check in xfrm_update_ae_params to fix the NPD.
    
    Fixes: d8647b79c3b7 ("xfrm: Add user interface for esn and big anti-replay windows")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7dfe23659f3677c08a60a0056cda2d91a79c15ca
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Jul 10 17:40:53 2023 +0800

    ip_vti: fix potential slab-use-after-free in decode_session6
    
    [ Upstream commit 6018a266279b1a75143c7c0804dd08a5fc4c3e0b ]
    
    When ip_vti device is set to the qdisc of the sfb type, the cb field
    of the sent skb may be modified during enqueuing. Then,
    slab-use-after-free may occur when ip_vti device sends IPv6 packets.
    As commit f855691975bb ("xfrm6: Fix the nexthdr offset in
    _decode_session6.") showed, xfrm_decode_session was originally intended
    only for the receive path. IP6CB(skb)->nhoff is not set during
    transmission. Therefore, set the cb field in the skb to 0 before
    sending packets.
    
    Fixes: f855691975bb ("xfrm6: Fix the nexthdr offset in _decode_session6.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa6c6c04f6c9b21b315023f487e5a07ae7fcf647
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Jul 10 17:40:52 2023 +0800

    ip6_vti: fix slab-use-after-free in decode_session6
    
    [ Upstream commit 9fd41f1ba638938c9a1195d09bc6fa3be2712f25 ]
    
    When ipv6_vti device is set to the qdisc of the sfb type, the cb field
    of the sent skb may be modified during enqueuing. Then,
    slab-use-after-free may occur when ipv6_vti device sends IPv6 packets.
    
    The stack information is as follows:
    BUG: KASAN: slab-use-after-free in decode_session6+0x103f/0x1890
    Read of size 1 at addr ffff88802e08edc2 by task swapper/0/0
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 6.4.0-next-20230707-00001-g84e2cad7f979 #410
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
    Call Trace:
    <IRQ>
    dump_stack_lvl+0xd9/0x150
    print_address_description.constprop.0+0x2c/0x3c0
    kasan_report+0x11d/0x130
    decode_session6+0x103f/0x1890
    __xfrm_decode_session+0x54/0xb0
    vti6_tnl_xmit+0x3e6/0x1ee0
    dev_hard_start_xmit+0x187/0x700
    sch_direct_xmit+0x1a3/0xc30
    __qdisc_run+0x510/0x17a0
    __dev_queue_xmit+0x2215/0x3b10
    neigh_connected_output+0x3c2/0x550
    ip6_finish_output2+0x55a/0x1550
    ip6_finish_output+0x6b9/0x1270
    ip6_output+0x1f1/0x540
    ndisc_send_skb+0xa63/0x1890
    ndisc_send_rs+0x132/0x6f0
    addrconf_rs_timer+0x3f1/0x870
    call_timer_fn+0x1a0/0x580
    expire_timers+0x29b/0x4b0
    run_timer_softirq+0x326/0x910
    __do_softirq+0x1d4/0x905
    irq_exit_rcu+0xb7/0x120
    sysvec_apic_timer_interrupt+0x97/0xc0
    </IRQ>
    Allocated by task 9176:
    kasan_save_stack+0x22/0x40
    kasan_set_track+0x25/0x30
    __kasan_slab_alloc+0x7f/0x90
    kmem_cache_alloc_node+0x1cd/0x410
    kmalloc_reserve+0x165/0x270
    __alloc_skb+0x129/0x330
    netlink_sendmsg+0x9b1/0xe30
    sock_sendmsg+0xde/0x190
    ____sys_sendmsg+0x739/0x920
    ___sys_sendmsg+0x110/0x1b0
    __sys_sendmsg+0xf7/0x1c0
    do_syscall_64+0x39/0xb0
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    Freed by task 9176:
    kasan_save_stack+0x22/0x40
    kasan_set_track+0x25/0x30
    kasan_save_free_info+0x2b/0x40
    ____kasan_slab_free+0x160/0x1c0
    slab_free_freelist_hook+0x11b/0x220
    kmem_cache_free+0xf0/0x490
    skb_free_head+0x17f/0x1b0
    skb_release_data+0x59c/0x850
    consume_skb+0xd2/0x170
    netlink_unicast+0x54f/0x7f0
    netlink_sendmsg+0x926/0xe30
    sock_sendmsg+0xde/0x190
    ____sys_sendmsg+0x739/0x920
    ___sys_sendmsg+0x110/0x1b0
    __sys_sendmsg+0xf7/0x1c0
    do_syscall_64+0x39/0xb0
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    The buggy address belongs to the object at ffff88802e08ed00
    which belongs to the cache skbuff_small_head of size 640
    The buggy address is located 194 bytes inside of
    freed 640-byte region [ffff88802e08ed00, ffff88802e08ef80)
    
    As commit f855691975bb ("xfrm6: Fix the nexthdr offset in
    _decode_session6.") showed, xfrm_decode_session was originally intended
    only for the receive path. IP6CB(skb)->nhoff is not set during
    transmission. Therefore, set the cb field in the skb to 0 before
    sending packets.
    
    Fixes: f855691975bb ("xfrm6: Fix the nexthdr offset in _decode_session6.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da4cbaa75ed088b6d70db77b9103a27e2359e243
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Jul 10 17:40:51 2023 +0800

    xfrm: fix slab-use-after-free in decode_session6
    
    [ Upstream commit 53223f2ed1ef5c90dad814daaaefea4e68a933c8 ]
    
    When the xfrm device is set to the qdisc of the sfb type, the cb field
    of the sent skb may be modified during enqueuing. Then,
    slab-use-after-free may occur when the xfrm device sends IPv6 packets.
    
    The stack information is as follows:
    BUG: KASAN: slab-use-after-free in decode_session6+0x103f/0x1890
    Read of size 1 at addr ffff8881111458ef by task swapper/3/0
    CPU: 3 PID: 0 Comm: swapper/3 Not tainted 6.4.0-next-20230707 #409
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
    Call Trace:
    <IRQ>
    dump_stack_lvl+0xd9/0x150
    print_address_description.constprop.0+0x2c/0x3c0
    kasan_report+0x11d/0x130
    decode_session6+0x103f/0x1890
    __xfrm_decode_session+0x54/0xb0
    xfrmi_xmit+0x173/0x1ca0
    dev_hard_start_xmit+0x187/0x700
    sch_direct_xmit+0x1a3/0xc30
    __qdisc_run+0x510/0x17a0
    __dev_queue_xmit+0x2215/0x3b10
    neigh_connected_output+0x3c2/0x550
    ip6_finish_output2+0x55a/0x1550
    ip6_finish_output+0x6b9/0x1270
    ip6_output+0x1f1/0x540
    ndisc_send_skb+0xa63/0x1890
    ndisc_send_rs+0x132/0x6f0
    addrconf_rs_timer+0x3f1/0x870
    call_timer_fn+0x1a0/0x580
    expire_timers+0x29b/0x4b0
    run_timer_softirq+0x326/0x910
    __do_softirq+0x1d4/0x905
    irq_exit_rcu+0xb7/0x120
    sysvec_apic_timer_interrupt+0x97/0xc0
    </IRQ>
    <TASK>
    asm_sysvec_apic_timer_interrupt+0x1a/0x20
    RIP: 0010:intel_idle_hlt+0x23/0x30
    Code: 1f 84 00 00 00 00 00 f3 0f 1e fa 41 54 41 89 d4 0f 1f 44 00 00 66 90 0f 1f 44 00 00 0f 00 2d c4 9f ab 00 0f 1f 44 00 00 fb f4 <fa> 44 89 e0 41 5c c3 66 0f 1f 44 00 00 f3 0f 1e fa 41 54 41 89 d4
    RSP: 0018:ffffc90000197d78 EFLAGS: 00000246
    RAX: 00000000000a83c3 RBX: ffffe8ffffd09c50 RCX: ffffffff8a22d8e5
    RDX: 0000000000000001 RSI: ffffffff8d3f8080 RDI: ffffe8ffffd09c50
    RBP: ffffffff8d3f8080 R08: 0000000000000001 R09: ffffed1026ba6d9d
    R10: ffff888135d36ceb R11: 0000000000000001 R12: 0000000000000001
    R13: ffffffff8d3f8100 R14: 0000000000000001 R15: 0000000000000000
    cpuidle_enter_state+0xd3/0x6f0
    cpuidle_enter+0x4e/0xa0
    do_idle+0x2fe/0x3c0
    cpu_startup_entry+0x18/0x20
    start_secondary+0x200/0x290
    secondary_startup_64_no_verify+0x167/0x16b
    </TASK>
    Allocated by task 939:
    kasan_save_stack+0x22/0x40
    kasan_set_track+0x25/0x30
    __kasan_slab_alloc+0x7f/0x90
    kmem_cache_alloc_node+0x1cd/0x410
    kmalloc_reserve+0x165/0x270
    __alloc_skb+0x129/0x330
    inet6_ifa_notify+0x118/0x230
    __ipv6_ifa_notify+0x177/0xbe0
    addrconf_dad_completed+0x133/0xe00
    addrconf_dad_work+0x764/0x1390
    process_one_work+0xa32/0x16f0
    worker_thread+0x67d/0x10c0
    kthread+0x344/0x440
    ret_from_fork+0x1f/0x30
    The buggy address belongs to the object at ffff888111145800
    which belongs to the cache skbuff_small_head of size 640
    The buggy address is located 239 bytes inside of
    freed 640-byte region [ffff888111145800, ffff888111145a80)
    
    As commit f855691975bb ("xfrm6: Fix the nexthdr offset in
    _decode_session6.") showed, xfrm_decode_session was originally intended
    only for the receive path. IP6CB(skb)->nhoff is not set during
    transmission. Therefore, set the cb field in the skb to 0 before
    sending packets.
    
    Fixes: f855691975bb ("xfrm6: Fix the nexthdr offset in _decode_session6.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e183a30d55b3fb79e0462a068644a3800ef7f619
Author: Eyal Birger <eyal.birger@gmail.com>
Date:   Sat Dec 3 10:46:56 2022 +0200

    xfrm: interface: rename xfrm_interface.c to xfrm_interface_core.c
    
    [ Upstream commit ee9a113ab63468137802898bcd2c598998c96938 ]
    
    This change allows adding additional files to the xfrm_interface module.
    
    Signed-off-by: Eyal Birger <eyal.birger@gmail.com>
    Link: https://lore.kernel.org/r/20221203084659.1837829-2-eyal.birger@gmail.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Stable-dep-of: 53223f2ed1ef ("xfrm: fix slab-use-after-free in decode_session6")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 843bcd3fa6bd6b0a3c323030c5a67eb26a9bfb90
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Jun 27 11:39:54 2023 +0800

    net: af_key: fix sadb_x_filter validation
    
    [ Upstream commit 75065a8929069bc93181848818e23f147a73f83a ]
    
    When running xfrm_state_walk_init(), the xfrm_address_filter being used
    is okay to have a splen/dplen that equals to sizeof(xfrm_address_t)<<3.
    This commit replaces >= to > to make sure the boundary checking is
    correct.
    
    Fixes: 37bd22420f85 ("af_key: pfkey_dump needs parameter validation")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a695f0e724330773283a6d67e149363b89087f76
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Jun 27 11:31:38 2023 +0800

    net: xfrm: Fix xfrm_address_filter OOB read
    
    [ Upstream commit dfa73c17d55b921e1d4e154976de35317e43a93a ]
    
    We found below OOB crash:
    
    [   44.211730] ==================================================================
    [   44.212045] BUG: KASAN: slab-out-of-bounds in memcmp+0x8b/0xb0
    [   44.212045] Read of size 8 at addr ffff88800870f320 by task poc.xfrm/97
    [   44.212045]
    [   44.212045] CPU: 0 PID: 97 Comm: poc.xfrm Not tainted 6.4.0-rc7-00072-gdad9774deaf1-dirty #4
    [   44.212045] Call Trace:
    [   44.212045]  <TASK>
    [   44.212045]  dump_stack_lvl+0x37/0x50
    [   44.212045]  print_report+0xcc/0x620
    [   44.212045]  ? __virt_addr_valid+0xf3/0x170
    [   44.212045]  ? memcmp+0x8b/0xb0
    [   44.212045]  kasan_report+0xb2/0xe0
    [   44.212045]  ? memcmp+0x8b/0xb0
    [   44.212045]  kasan_check_range+0x39/0x1c0
    [   44.212045]  memcmp+0x8b/0xb0
    [   44.212045]  xfrm_state_walk+0x21c/0x420
    [   44.212045]  ? __pfx_dump_one_state+0x10/0x10
    [   44.212045]  xfrm_dump_sa+0x1e2/0x290
    [   44.212045]  ? __pfx_xfrm_dump_sa+0x10/0x10
    [   44.212045]  ? __kernel_text_address+0xd/0x40
    [   44.212045]  ? kasan_unpoison+0x27/0x60
    [   44.212045]  ? mutex_lock+0x60/0xe0
    [   44.212045]  ? __pfx_mutex_lock+0x10/0x10
    [   44.212045]  ? kasan_save_stack+0x22/0x50
    [   44.212045]  netlink_dump+0x322/0x6c0
    [   44.212045]  ? __pfx_netlink_dump+0x10/0x10
    [   44.212045]  ? mutex_unlock+0x7f/0xd0
    [   44.212045]  ? __pfx_mutex_unlock+0x10/0x10
    [   44.212045]  __netlink_dump_start+0x353/0x430
    [   44.212045]  xfrm_user_rcv_msg+0x3a4/0x410
    [   44.212045]  ? __pfx__raw_spin_lock_irqsave+0x10/0x10
    [   44.212045]  ? __pfx_xfrm_user_rcv_msg+0x10/0x10
    [   44.212045]  ? __pfx_xfrm_dump_sa+0x10/0x10
    [   44.212045]  ? __pfx_xfrm_dump_sa_done+0x10/0x10
    [   44.212045]  ? __stack_depot_save+0x382/0x4e0
    [   44.212045]  ? filter_irq_stacks+0x1c/0x70
    [   44.212045]  ? kasan_save_stack+0x32/0x50
    [   44.212045]  ? kasan_save_stack+0x22/0x50
    [   44.212045]  ? kasan_set_track+0x25/0x30
    [   44.212045]  ? __kasan_slab_alloc+0x59/0x70
    [   44.212045]  ? kmem_cache_alloc_node+0xf7/0x260
    [   44.212045]  ? kmalloc_reserve+0xab/0x120
    [   44.212045]  ? __alloc_skb+0xcf/0x210
    [   44.212045]  ? netlink_sendmsg+0x509/0x700
    [   44.212045]  ? sock_sendmsg+0xde/0xe0
    [   44.212045]  ? __sys_sendto+0x18d/0x230
    [   44.212045]  ? __x64_sys_sendto+0x71/0x90
    [   44.212045]  ? do_syscall_64+0x3f/0x90
    [   44.212045]  ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]  ? netlink_sendmsg+0x509/0x700
    [   44.212045]  ? sock_sendmsg+0xde/0xe0
    [   44.212045]  ? __sys_sendto+0x18d/0x230
    [   44.212045]  ? __x64_sys_sendto+0x71/0x90
    [   44.212045]  ? do_syscall_64+0x3f/0x90
    [   44.212045]  ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]  ? kasan_save_stack+0x22/0x50
    [   44.212045]  ? kasan_set_track+0x25/0x30
    [   44.212045]  ? kasan_save_free_info+0x2e/0x50
    [   44.212045]  ? __kasan_slab_free+0x10a/0x190
    [   44.212045]  ? kmem_cache_free+0x9c/0x340
    [   44.212045]  ? netlink_recvmsg+0x23c/0x660
    [   44.212045]  ? sock_recvmsg+0xeb/0xf0
    [   44.212045]  ? __sys_recvfrom+0x13c/0x1f0
    [   44.212045]  ? __x64_sys_recvfrom+0x71/0x90
    [   44.212045]  ? do_syscall_64+0x3f/0x90
    [   44.212045]  ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]  ? copyout+0x3e/0x50
    [   44.212045]  netlink_rcv_skb+0xd6/0x210
    [   44.212045]  ? __pfx_xfrm_user_rcv_msg+0x10/0x10
    [   44.212045]  ? __pfx_netlink_rcv_skb+0x10/0x10
    [   44.212045]  ? __pfx_sock_has_perm+0x10/0x10
    [   44.212045]  ? mutex_lock+0x8d/0xe0
    [   44.212045]  ? __pfx_mutex_lock+0x10/0x10
    [   44.212045]  xfrm_netlink_rcv+0x44/0x50
    [   44.212045]  netlink_unicast+0x36f/0x4c0
    [   44.212045]  ? __pfx_netlink_unicast+0x10/0x10
    [   44.212045]  ? netlink_recvmsg+0x500/0x660
    [   44.212045]  netlink_sendmsg+0x3b7/0x700
    [   44.212045]  ? __pfx_netlink_sendmsg+0x10/0x10
    [   44.212045]  ? __pfx_netlink_sendmsg+0x10/0x10
    [   44.212045]  sock_sendmsg+0xde/0xe0
    [   44.212045]  __sys_sendto+0x18d/0x230
    [   44.212045]  ? __pfx___sys_sendto+0x10/0x10
    [   44.212045]  ? rcu_core+0x44a/0xe10
    [   44.212045]  ? __rseq_handle_notify_resume+0x45b/0x740
    [   44.212045]  ? _raw_spin_lock_irq+0x81/0xe0
    [   44.212045]  ? __pfx___rseq_handle_notify_resume+0x10/0x10
    [   44.212045]  ? __pfx_restore_fpregs_from_fpstate+0x10/0x10
    [   44.212045]  ? __pfx_blkcg_maybe_throttle_current+0x10/0x10
    [   44.212045]  ? __pfx_task_work_run+0x10/0x10
    [   44.212045]  __x64_sys_sendto+0x71/0x90
    [   44.212045]  do_syscall_64+0x3f/0x90
    [   44.212045]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045] RIP: 0033:0x44b7da
    [   44.212045] RSP: 002b:00007ffdc8838548 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    [   44.212045] RAX: ffffffffffffffda RBX: 00007ffdc8839978 RCX: 000000000044b7da
    [   44.212045] RDX: 0000000000000038 RSI: 00007ffdc8838770 RDI: 0000000000000003
    [   44.212045] RBP: 00007ffdc88385b0 R08: 00007ffdc883858c R09: 000000000000000c
    [   44.212045] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000001
    [   44.212045] R13: 00007ffdc8839968 R14: 00000000004c37d0 R15: 0000000000000001
    [   44.212045]  </TASK>
    [   44.212045]
    [   44.212045] Allocated by task 97:
    [   44.212045]  kasan_save_stack+0x22/0x50
    [   44.212045]  kasan_set_track+0x25/0x30
    [   44.212045]  __kasan_kmalloc+0x7f/0x90
    [   44.212045]  __kmalloc_node_track_caller+0x5b/0x140
    [   44.212045]  kmemdup+0x21/0x50
    [   44.212045]  xfrm_dump_sa+0x17d/0x290
    [   44.212045]  netlink_dump+0x322/0x6c0
    [   44.212045]  __netlink_dump_start+0x353/0x430
    [   44.212045]  xfrm_user_rcv_msg+0x3a4/0x410
    [   44.212045]  netlink_rcv_skb+0xd6/0x210
    [   44.212045]  xfrm_netlink_rcv+0x44/0x50
    [   44.212045]  netlink_unicast+0x36f/0x4c0
    [   44.212045]  netlink_sendmsg+0x3b7/0x700
    [   44.212045]  sock_sendmsg+0xde/0xe0
    [   44.212045]  __sys_sendto+0x18d/0x230
    [   44.212045]  __x64_sys_sendto+0x71/0x90
    [   44.212045]  do_syscall_64+0x3f/0x90
    [   44.212045]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [   44.212045]
    [   44.212045] The buggy address belongs to the object at ffff88800870f300
    [   44.212045]  which belongs to the cache kmalloc-64 of size 64
    [   44.212045] The buggy address is located 32 bytes inside of
    [   44.212045]  allocated 36-byte region [ffff88800870f300, ffff88800870f324)
    [   44.212045]
    [   44.212045] The buggy address belongs to the physical page:
    [   44.212045] page:00000000e4de16ee refcount:1 mapcount:0 mapping:000000000 ...
    [   44.212045] flags: 0x100000000000200(slab|node=0|zone=1)
    [   44.212045] page_type: 0xffffffff()
    [   44.212045] raw: 0100000000000200 ffff888004c41640 dead000000000122 0000000000000000
    [   44.212045] raw: 0000000000000000 0000000080200020 00000001ffffffff 0000000000000000
    [   44.212045] page dumped because: kasan: bad access detected
    [   44.212045]
    [   44.212045] Memory state around the buggy address:
    [   44.212045]  ffff88800870f200: fa fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [   44.212045]  ffff88800870f280: 00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045] >ffff88800870f300: 00 00 00 00 04 fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045]                                ^
    [   44.212045]  ffff88800870f380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045]  ffff88800870f400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   44.212045] ==================================================================
    
    By investigating the code, we find the root cause of this OOB is the lack
    of checks in xfrm_dump_sa(). The buggy code allows a malicious user to pass
    arbitrary value of filter->splen/dplen. Hence, with crafted xfrm states,
    the attacker can achieve 8 bytes heap OOB read, which causes info leak.
    
      if (attrs[XFRMA_ADDRESS_FILTER]) {
        filter = kmemdup(nla_data(attrs[XFRMA_ADDRESS_FILTER]),
            sizeof(*filter), GFP_KERNEL);
        if (filter == NULL)
          return -ENOMEM;
        // NO MORE CHECKS HERE !!!
      }
    
    This patch fixes the OOB by adding necessary boundary checks, just like
    the code in pfkey_dump() function.
    
    Fixes: d3623099d350 ("ipsec: add support of limited SA dump")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c93b89cd46636b5e74c12fa21dd86167bc6ea8d
Author: xiaoshoukui <xiaoshoukui@gmail.com>
Date:   Tue Aug 15 02:55:59 2023 -0400

    btrfs: fix BUG_ON condition in btrfs_cancel_balance
    
    commit 29eefa6d0d07e185f7bfe9576f91e6dba98189c2 upstream.
    
    Pausing and canceling balance can race to interrupt balance lead to BUG_ON
    panic in btrfs_cancel_balance. The BUG_ON condition in btrfs_cancel_balance
    does not take this race scenario into account.
    
    However, the race condition has no other side effects. We can fix that.
    
    Reproducing it with panic trace like this:
    
      kernel BUG at fs/btrfs/volumes.c:4618!
      RIP: 0010:btrfs_cancel_balance+0x5cf/0x6a0
      Call Trace:
       <TASK>
       ? do_nanosleep+0x60/0x120
       ? hrtimer_nanosleep+0xb7/0x1a0
       ? sched_core_clone_cookie+0x70/0x70
       btrfs_ioctl_balance_ctl+0x55/0x70
       btrfs_ioctl+0xa46/0xd20
       __x64_sys_ioctl+0x7d/0xa0
       do_syscall_64+0x38/0x80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
      Race scenario as follows:
      > mutex_unlock(&fs_info->balance_mutex);
      > --------------------
      > .......issue pause and cancel req in another thread
      > --------------------
      > ret = __btrfs_balance(fs_info);
      >
      > mutex_lock(&fs_info->balance_mutex);
      > if (ret == -ECANCELED && atomic_read(&fs_info->balance_pause_req)) {
      >         btrfs_info(fs_info, "balance: paused");
      >         btrfs_exclop_balance(fs_info, BTRFS_EXCLOP_BALANCE_PAUSED);
      > }
    
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: xiaoshoukui <xiaoshoukui@ruijie.com.cn>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f09cc15dcd91d16562400c51d24c7be0d5796fa
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Thu Aug 10 22:37:55 2023 -0500

    powerpc/rtas_flash: allow user copy to flash block cache objects
    
    commit 4f3175979e62de3b929bfa54a0db4b87d36257a7 upstream.
    
    With hardened usercopy enabled (CONFIG_HARDENED_USERCOPY=y), using the
    /proc/powerpc/rtas/firmware_update interface to prepare a system
    firmware update yields a BUG():
    
      kernel BUG at mm/usercopy.c:102!
      Oops: Exception in kernel mode, sig: 5 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Modules linked in:
      CPU: 0 PID: 2232 Comm: dd Not tainted 6.5.0-rc3+ #2
      Hardware name: IBM,8408-E8E POWER8E (raw) 0x4b0201 0xf000004 of:IBM,FW860.50 (SV860_146) hv:phyp pSeries
      NIP:  c0000000005991d0 LR: c0000000005991cc CTR: 0000000000000000
      REGS: c0000000148c76a0 TRAP: 0700   Not tainted  (6.5.0-rc3+)
      MSR:  8000000000029033 <SF,EE,ME,IR,DR,RI,LE>  CR: 24002242  XER: 0000000c
      CFAR: c0000000001fbd34 IRQMASK: 0
      [ ... GPRs omitted ... ]
      NIP usercopy_abort+0xa0/0xb0
      LR  usercopy_abort+0x9c/0xb0
      Call Trace:
        usercopy_abort+0x9c/0xb0 (unreliable)
        __check_heap_object+0x1b4/0x1d0
        __check_object_size+0x2d0/0x380
        rtas_flash_write+0xe4/0x250
        proc_reg_write+0xfc/0x160
        vfs_write+0xfc/0x4e0
        ksys_write+0x90/0x160
        system_call_exception+0x178/0x320
        system_call_common+0x160/0x2c4
    
    The blocks of the firmware image are copied directly from user memory
    to objects allocated from flash_block_cache, so flash_block_cache must
    be created using kmem_cache_create_usercopy() to mark it safe for user
    access.
    
    Fixes: 6d07d1cd300f ("usercopy: Restrict non-usercopy caches to size 0")
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    [mpe: Trim and indent oops]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230810-rtas-flash-vs-hardened-usercopy-v2-1-dcf63793a938@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10e935d3ff2ae36ddadf1636825b14dfd8b89ad5
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Fri Jul 28 01:03:18 2023 +0800

    fbdev: mmp: fix value check in mmphw_probe()
    
    commit 0872b2c0abc0e84ac82472959c8e14e35277549c upstream.
    
    in mmphw_probe(), check the return value of clk_prepare_enable()
    and return the error code if clk_prepare_enable() returns an
    unexpected value.
    
    Fixes: d63028c38905 ("video: mmp display controller support")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97a2d55ead76358245b446efd87818e919196d7a
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Thu Jun 29 14:05:26 2023 +0200

    virtio-mmio: don't break lifecycle of vm_dev
    
    [ Upstream commit 55c91fedd03d7b9cf0c5199b2eb12b9b8e95281a ]
    
    vm_dev has a separate lifecycle because it has a 'struct device'
    embedded. Thus, having a release callback for it is correct.
    
    Allocating the vm_dev struct with devres totally breaks this protection,
    though. Instead of waiting for the vm_dev release callback, the memory
    is freed when the platform_device is removed. Resulting in a
    use-after-free when finally the callback is to be called.
    
    To easily see the problem, compile the kernel with
    CONFIG_DEBUG_KOBJECT_RELEASE and unbind with sysfs.
    
    The fix is easy, don't use devres in this case.
    
    Found during my research about object lifetime problems.
    
    Fixes: 7eb781b1bbb7 ("virtio_mmio: add cleanup for virtio_mmio_probe")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Message-Id: <20230629120526.7184-1-wsa+renesas@sang-engineering.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd57abc1621969f970fb620d9d8fc2a9aa0084f6
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Mon Feb 22 13:57:24 2021 +0800

    virtio-mmio: Use to_virtio_mmio_device() to simply code
    
    [ Upstream commit da98b54d02981de5b07d8044b2a632bf6ba3ac45 ]
    
    The file virtio_mmio.c has defined the function to_virtio_mmio_device,
    so use it instead of container_of() to simply code.
    
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Link: https://lore.kernel.org/r/20210222055724.220-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Stable-dep-of: 55c91fedd03d ("virtio-mmio: don't break lifecycle of vm_dev")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3f343afe543f08242a6fa9183f67d1705b115fd
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sun Dec 22 19:08:39 2019 +0000

    virtio-mmio: convert to devm_platform_ioremap_resource
    
    [ Upstream commit c64eb62cfce242a57a7276ca8280ae0baab29d05 ]
    
    Use devm_platform_ioremap_resource() to simplify code, which
    contains platform_get_resource, devm_request_mem_region and
    devm_ioremap.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Stable-dep-of: 55c91fedd03d ("virtio-mmio: don't break lifecycle of vm_dev")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 600df3856f0bdc1968309c075b4b5c810a2b7948
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Jul 18 08:38:37 2023 -0400

    nfsd: Remove incorrect check in nfsd4_validate_stateid
    
    [ Upstream commit f75546f58a70da5cfdcec5a45ffc377885ccbee8 ]
    
    If the client is calling TEST_STATEID, then it is because some event
    occurred that requires it to check all the stateids for validity and
    call FREE_STATEID on the ones that have been revoked. In this case,
    either the stateid exists in the list of stateids associated with that
    nfs4_client, in which case it should be tested, or it does not. There
    are no additional conditions to be considered.
    
    Reported-by: "Frank Ch. Eigler" <fche@redhat.com>
    Fixes: 7df302f75ee2 ("NFSD: TEST_STATEID should not return NFS4ERR_STALE_STATEID")
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6ac11906599d4b573a4b535eb16622387ecb33a
Author: J. Bruce Fields <bfields@fieldses.org>
Date:   Thu Mar 19 10:18:49 2020 -0400

    nfsd4: kill warnings on testing stateids with mismatched clientids
    
    [ Upstream commit 663e36f07666ff924012defa521f88875f6e5402 ]
    
    It's normal for a client to test a stateid from a previous instance,
    e.g. after a network partition.
    
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Stable-dep-of: f75546f58a70 ("nfsd: Remove incorrect check in nfsd4_validate_stateid")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9ecde030c528943b1f1e3eaf0bd56b363860f03
Author: Michael Schmitz <schmitzmic@gmail.com>
Date:   Wed Jun 21 08:17:23 2023 +1200

    block: fix signed int overflow in Amiga partition support
    
    [ Upstream commit fc3d092c6bb48d5865fec15ed5b333c12f36288c ]
    
    The Amiga partition parser module uses signed int for partition sector
    address and count, which will overflow for disks larger than 1 TB.
    
    Use sector_t as type for sector address and size to allow using disks
    up to 2 TB without LBD support, and disks larger than 2 TB with LBD.
    
    This bug was reported originally in 2012, and the fix was created by
    the RDB author, Joanne Dow <jdow@earthlink.net>. A patch had been
    discussed and reviewed on linux-m68k at that time but never officially
    submitted. This patch differs from Joanne's patch only in its use of
    sector_t instead of unsigned int. No checking for overflows is done
    (see patch 3 of this series for that).
    
    Reported-by: Martin Steigerwald <Martin@lichtvoll.de>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=43511
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Message-ID: <201206192146.09327.Martin@lichtvoll.de>
    Cc: <stable@vger.kernel.org> # 5.2
    Signed-off-by: Michael Schmitz <schmitzmic@gmail.com>
    Tested-by: Martin Steigerwald <Martin@lichtvoll.de>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20230620201725.7020-2-schmitzmic@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f382111cd997cf0ed79e4a4ff689af1aaac4983
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:21 2023 +0300

    mmc: sunxi: fix deferred probing
    
    [ Upstream commit c2df53c5806cfd746dae08e07bc8c4ad247c3b70 ]
    
    The driver overrides the error codes and IRQ0 returned by platform_get_irq()
    to -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the error
    codes upstream.  Since commit ce753ad1549c ("platform: finally disallow IRQ0
    in platform_get_irq() and its ilk") IRQ0 is no longer returned by those APIs,
    so we now can safely ignore it...
    
    Fixes: 2408a08583d2 ("mmc: sunxi-mmc: Handle return value of platform_get_irq")
    Cc: stable@vger.kernel.org # v5.19+
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Reviewed-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20230617203622.6812-12-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38f5548d8770b1a8b720a1a2b296c4f8e1bd57b2
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Jun 17 23:36:11 2023 +0300

    mmc: bcm2835: fix deferred probing
    
    [ Upstream commit 71150ac12558bcd9d75e6e24cf7c872c2efd80f3 ]
    
    The driver overrides the error codes and IRQ0 returned by platform_get_irq()
    to -EINVAL, so if it returns -EPROBE_DEFER, the driver will fail the probe
    permanently instead of the deferred probing. Switch to propagating the error
    codes upstream.  Since commit ce753ad1549c ("platform: finally disallow IRQ0
    in platform_get_irq() and its ilk") IRQ0 is no longer returned by those APIs,
    so we now can safely ignore it...
    
    Fixes: 660fc733bd74 ("mmc: bcm2835: Add new driver for the sdhost controller.")
    Cc: stable@vger.kernel.org # v5.19+
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20230617203622.6812-2-s.shtylyov@omp.ru
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22b64a6b59fc2107d304715d8a778eebeb8659ae
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Tue Jul 30 11:15:29 2019 -0700

    mmc: Remove dev_err() usage after platform_get_irq()
    
    [ Upstream commit 9a7957d0c9557f7780cdda970a2530d6351bd861 ]
    
    We don't need dev_err() messages when platform_get_irq() fails now that
    platform_get_irq() prints an error message itself when something goes
    wrong. Let's remove these prints with a simple semantic patch.
    
    // <smpl>
    @@
    expression ret;
    struct platform_device *E;
    @@
    
    ret =
    (
    platform_get_irq(E, ...)
    |
    platform_get_irq_byname(E, ...)
    );
    
    if ( \( ret < 0 \| ret <= 0 \) )
    {
    (
    -if (ret != -EPROBE_DEFER)
    -{ ...
    -dev_err(...);
    -... }
    |
    ...
    -dev_err(...);
    )
    ...
    }
    // </smpl>
    
    While we're here, remove braces on if statements that only have one
    statement (manually).
    
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: linux-mmc@vger.kernel.org
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 71150ac12558 ("mmc: bcm2835: fix deferred probing")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee9780d7e7ad73ff30b1b49dd6535d88878d90d3
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Aug 23 13:44:16 2018 +0900

    mmc: tmio: move tmio_mmc_set_clock() to platform hook
    
    [ Upstream commit 0196c8db8363f7627df6f78615271ae0ba430500 ]
    
    tmio_mmc_set_clock() is full of quirks because different SoC vendors
    extended this in different ways.
    
    The original IP defines the divisor range 1/2 ... 1/512.
    
     bit 7 is set:    1/512
     bit 6 is set:    1/256
       ...
     bit 0 is set:    1/4
     all bits clear:  1/2
    
    It is platform-dependent how to achieve the 1/1 clock.
    
    I guess the TMIO-MFD variant uses the clock selector outside of this IP,
    as far as I see tmio_core_mmc_clk_div() in drivers/mfd/tmio_core.c
    
    I guess bit[7:0]=0xff is Renesas-specific extension.
    
    Socionext (and Panasonic) uses bit 10 (CLKSEL) for 1/1.  Also, newer
    versions of UniPhier SoC variants use bit 16 for 1/1024.
    
    host->clk_update() is only used by the Renesas variants, whereas
    host->set_clk_div() is only used by the TMIO-MFD variants.
    
    To cope with this mess, promote tmio_mmc_set_clock() to a new
    platform hook ->set_clock(), and melt the old two hooks into it.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 71150ac12558 ("mmc: bcm2835: fix deferred probing")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1036bf905f9ec7b01fd5ee946a9a94f9671ee83
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Aug 23 13:44:15 2018 +0900

    mmc: tmio: replace tmio_mmc_clk_stop() calls with tmio_mmc_set_clock()
    
    [ Upstream commit 74005a01f1ff66f98bf24163297932144d4da1ae ]
    
    tmio_mmc_clk_stop(host) is equivalent to tmio_mmc_set_clock(host, 0).
    This replacement is needed for the next commit.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 71150ac12558 ("mmc: bcm2835: fix deferred probing")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74fc50666e0af2514a7e6b0937166a75692c2a42
Author: Martin Hundebøll <martin@geanix.com>
Date:   Wed Jun 7 10:27:12 2023 +0200

    mmc: meson-gx: remove redundant mmc_request_done() call from irq context
    
    [ Upstream commit 3c40eb8145325b0f5b93b8a169146078cb2c49d6 ]
    
    The call to mmc_request_done() can schedule, so it must not be called
    from irq context. Wake the irq thread if it needs to be called, and let
    its existing logic do its work.
    
    Fixes the following kernel bug, which appears when running an RT patched
    kernel on the AmLogic Meson AXG A113X SoC:
    [   11.111407] BUG: scheduling while atomic: kworker/0:1H/75/0x00010001
    [   11.111438] Modules linked in:
    [   11.111451] CPU: 0 PID: 75 Comm: kworker/0:1H Not tainted 6.4.0-rc3-rt2-rtx-00081-gfd07f41ed6b4-dirty #1
    [   11.111461] Hardware name: RTX AXG A113X Linux Platform Board (DT)
    [   11.111469] Workqueue: kblockd blk_mq_run_work_fn
    [   11.111492] Call trace:
    [   11.111497]  dump_backtrace+0xac/0xe8
    [   11.111510]  show_stack+0x18/0x28
    [   11.111518]  dump_stack_lvl+0x48/0x60
    [   11.111530]  dump_stack+0x18/0x24
    [   11.111537]  __schedule_bug+0x4c/0x68
    [   11.111548]  __schedule+0x80/0x574
    [   11.111558]  schedule_loop+0x2c/0x50
    [   11.111567]  schedule_rtlock+0x14/0x20
    [   11.111576]  rtlock_slowlock_locked+0x468/0x730
    [   11.111587]  rt_spin_lock+0x40/0x64
    [   11.111596]  __wake_up_common_lock+0x5c/0xc4
    [   11.111610]  __wake_up+0x18/0x24
    [   11.111620]  mmc_blk_mq_req_done+0x68/0x138
    [   11.111633]  mmc_request_done+0x104/0x118
    [   11.111644]  meson_mmc_request_done+0x38/0x48
    [   11.111654]  meson_mmc_irq+0x128/0x1f0
    [   11.111663]  __handle_irq_event_percpu+0x70/0x114
    [   11.111674]  handle_irq_event_percpu+0x18/0x4c
    [   11.111683]  handle_irq_event+0x80/0xb8
    [   11.111691]  handle_fasteoi_irq+0xa4/0x120
    [   11.111704]  handle_irq_desc+0x20/0x38
    [   11.111712]  generic_handle_domain_irq+0x1c/0x28
    [   11.111721]  gic_handle_irq+0x8c/0xa8
    [   11.111735]  call_on_irq_stack+0x24/0x4c
    [   11.111746]  do_interrupt_handler+0x88/0x94
    [   11.111757]  el1_interrupt+0x34/0x64
    [   11.111769]  el1h_64_irq_handler+0x18/0x24
    [   11.111779]  el1h_64_irq+0x64/0x68
    [   11.111786]  __add_wait_queue+0x0/0x4c
    [   11.111795]  mmc_blk_rw_wait+0x84/0x118
    [   11.111804]  mmc_blk_mq_issue_rq+0x5c4/0x654
    [   11.111814]  mmc_mq_queue_rq+0x194/0x214
    [   11.111822]  blk_mq_dispatch_rq_list+0x3ac/0x528
    [   11.111834]  __blk_mq_sched_dispatch_requests+0x340/0x4d0
    [   11.111847]  blk_mq_sched_dispatch_requests+0x38/0x70
    [   11.111858]  blk_mq_run_work_fn+0x3c/0x70
    [   11.111865]  process_one_work+0x17c/0x1f0
    [   11.111876]  worker_thread+0x1d4/0x26c
    [   11.111885]  kthread+0xe4/0xf4
    [   11.111894]  ret_from_fork+0x10/0x20
    
    Fixes: 51c5d8447bd7 ("MMC: meson: initial support for GX platforms")
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Hundebøll <martin@geanix.com>
    Link: https://lore.kernel.org/r/20230607082713.517157-1-martin@geanix.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7aacfd2e388519434acf504a6b53099cc4da978
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Thu Dec 6 16:18:26 2018 +0100

    mmc: meson-gx: remove useless lock
    
    [ Upstream commit 83076d2268c72d123f3d1eaf186a9f56ec1b943a ]
    
    The spinlock is only used within the irq handler so it does not
    seem very useful.
    
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 3c40eb814532 ("mmc: meson-gx: remove redundant mmc_request_done() call from irq context")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebb623a34d09383afec0ce21dbe97f9b75728fb4
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jun 7 12:05:39 2023 +0200

    USB: dwc3: qcom: fix NULL-deref on suspend
    
    [ Upstream commit d2d69354226de0b333d4405981f3d9c41ba8430a ]
    
    The Qualcomm dwc3 glue driver is currently accessing the driver data of
    the child core device during suspend and on wakeup interrupts. This is
    clearly a bad idea as the child may not have probed yet or could have
    been unbound from its driver.
    
    The first such layering violation was part of the initial version of the
    driver, but this was later made worse when the hack that accesses the
    driver data of the grand child xhci device to configure the wakeup
    interrupts was added.
    
    Fixing this properly is not that easily done, so add a sanity check to
    make sure that the child driver data is non-NULL before dereferencing it
    for now.
    
    Note that this relies on subtleties like the fact that driver core is
    making sure that the parent is not suspended while the child is probing.
    
    Reported-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/all/20230325165217.31069-4-manivannan.sadhasivam@linaro.org/
    Fixes: d9152161b4bf ("usb: dwc3: Add Qualcomm DWC3 glue layer driver")
    Fixes: 6895ea55c385 ("usb: dwc3: qcom: Configure wakeup interrupts during suspend")
    Cc: stable@vger.kernel.org      # 3.18: a872ab303d5d: "usb: dwc3: qcom: fix use-after-free on runtime-PM wakeup"
    Cc: Sandeep Maheswaram <quic_c_sanm@quicinc.com>
    Cc: Krishna Kurapati <quic_kriskura@quicinc.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Message-ID: <20230607100540.31045-2-johan+linaro@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93363c95607a9376adc9c3a4aeb2a641a9fee1c8
Author: Sandeep Maheswaram <quic_c_sanm@quicinc.com>
Date:   Mon Jun 13 10:00:52 2022 +0530

    usb: dwc3: qcom: Add helper functions to enable,disable wake irqs
    
    [ Upstream commit 360e8230516de94d74d30c64f0cdcf228b8e8b67 ]
    
    Adding helper functions to enable,disable wake irqs to make
    the code simple and readable.
    
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Pavankumar Kondeti <quic_pkondeti@quicinc.com>
    Signed-off-by: Sandeep Maheswaram <quic_c_sanm@quicinc.com>
    Signed-off-by: Krishna Kurapati <quic_kriskura@quicinc.com>
    Link: https://lore.kernel.org/r/1655094654-24052-4-git-send-email-quic_kriskura@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: d2d69354226d ("USB: dwc3: qcom: fix NULL-deref on suspend")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbc6a5f11ca2a622f77bcb6901b274bd995653d6
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Mon Apr 24 11:31:56 2023 +0100

    irqchip/mips-gic: Use raw spinlock for gic_lock
    
    [ Upstream commit 3d6a0e4197c04599d75d85a608c8bb16a630a38c ]
    
    Since we may hold gic_lock in hardirq context, use raw spinlock
    makes more sense given that it is for low-level interrupt handling
    routine and the critical section is small.
    
    Fixes BUG:
    
    [    0.426106] =============================
    [    0.426257] [ BUG: Invalid wait context ]
    [    0.426422] 6.3.0-rc7-next-20230421-dirty #54 Not tainted
    [    0.426638] -----------------------------
    [    0.426766] swapper/0/1 is trying to lock:
    [    0.426954] ffffffff8104e7b8 (gic_lock){....}-{3:3}, at: gic_set_type+0x30/08
    
    Fixes: 95150ae8b330 ("irqchip: mips-gic: Implement irq_set_type callback")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Tested-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20230424103156.66753-3-jiaxun.yang@flygoat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb5fc6b67d31393b7202e9967c6b7e83564e7a25
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Oct 21 18:04:13 2021 +0100

    irqchip/mips-gic: Get rid of the reliance on irq_cpu_online()
    
    [ Upstream commit dd098a0e031928cf88c89f7577d31821e1f0e6de ]
    
    The MIPS GIC driver uses irq_cpu_online() to go and program the
    per-CPU interrupts. However, this method iterates over all IRQs
    in the system, despite only 3 per-CPU interrupts being of interest.
    
    Let's be terribly bold and do the iteration ourselves. To ensure
    mutual exclusion, hold the gic_lock spinlock that is otherwise
    taken while dealing with these interrupts.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Serge Semin <fancer.lancer@gmail.com>
    Link: https://lore.kernel.org/r/20211021170414.3341522-3-maz@kernel.org
    Stable-dep-of: 3d6a0e4197c0 ("irqchip/mips-gic: Use raw spinlock for gic_lock")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5867e5b6a780710251318cb2047e24c49935e43
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Mar 23 09:56:40 2023 +0800

    x86/topology: Fix erroneous smp_num_siblings on Intel Hybrid platforms
    
    [ Upstream commit edc0a2b5957652f4685ef3516f519f84807087db ]
    
    Traditionally, all CPUs in a system have identical numbers of SMT
    siblings.  That changes with hybrid processors where some logical CPUs
    have a sibling and others have none.
    
    Today, the CPU boot code sets the global variable smp_num_siblings when
    every CPU thread is brought up. The last thread to boot will overwrite
    it with the number of siblings of *that* thread. That last thread to
    boot will "win". If the thread is a Pcore, smp_num_siblings == 2.  If it
    is an Ecore, smp_num_siblings == 1.
    
    smp_num_siblings describes if the *system* supports SMT.  It should
    specify the maximum number of SMT threads among all cores.
    
    Ensure that smp_num_siblings represents the system-wide maximum number
    of siblings by always increasing its value. Never allow it to decrease.
    
    On MeteorLake-P platform, this fixes a problem that the Ecore CPUs are
    not updated in any cpu sibling map because the system is treated as an
    UP system when probing Ecore CPUs.
    
    Below shows part of the CPU topology information before and after the
    fix, for both Pcore and Ecore CPU (cpu0 is Pcore, cpu 12 is Ecore).
    ...
    -/sys/devices/system/cpu/cpu0/topology/package_cpus:000fff
    -/sys/devices/system/cpu/cpu0/topology/package_cpus_list:0-11
    +/sys/devices/system/cpu/cpu0/topology/package_cpus:3fffff
    +/sys/devices/system/cpu/cpu0/topology/package_cpus_list:0-21
    ...
    -/sys/devices/system/cpu/cpu12/topology/package_cpus:001000
    -/sys/devices/system/cpu/cpu12/topology/package_cpus_list:12
    +/sys/devices/system/cpu/cpu12/topology/package_cpus:3fffff
    +/sys/devices/system/cpu/cpu12/topology/package_cpus_list:0-21
    
    Notice that the "before" 'package_cpus_list' has only one CPU.  This
    means that userspace tools like lscpu will see a little laptop like
    an 11-socket system:
    
    -Core(s) per socket:  1
    -Socket(s):           11
    +Core(s) per socket:  16
    +Socket(s):           1
    
    This is also expected to make the scheduler do rather wonky things
    too.
    
    [ dhansen: remove CPUID detail from changelog, add end user effects ]
    
    CC: stable@kernel.org
    Fixes: bbb65d2d365e ("x86: use cpuid vector 0xb when available for detecting cpu topology")
    Fixes: 95f3d39ccf7a ("x86/cpu/topology: Provide detect_extended_topology_early()")
    Suggested-by: Len Brown <len.brown@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/all/20230323015640.27906-1-rui.zhang%40intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a685bfb7ae047381fb103a77f4658a87e198cc99
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 11 21:42:24 2023 +1000

    powerpc/64s/radix: Fix soft dirty tracking
    
    [ Upstream commit 66b2ca086210732954a7790d63d35542936fc664 ]
    
    It was reported that soft dirty tracking doesn't work when using the
    Radix MMU.
    
    The tracking is supposed to work by clearing the soft dirty bit for a
    mapping and then write protecting the PTE. If/when the page is written
    to, a page fault occurs and the soft dirty bit is added back via
    pte_mkdirty(). For example in wp_page_reuse():
    
            entry = maybe_mkwrite(pte_mkdirty(entry), vma);
            if (ptep_set_access_flags(vma, vmf->address, vmf->pte, entry, 1))
                    update_mmu_cache(vma, vmf->address, vmf->pte);
    
    Unfortunately on radix _PAGE_SOFTDIRTY is being dropped by
    radix__ptep_set_access_flags(), called from ptep_set_access_flags(),
    meaning the soft dirty bit is not set even though the page has been
    written to.
    
    Fix it by adding _PAGE_SOFTDIRTY to the set of bits that are able to be
    changed in radix__ptep_set_access_flags().
    
    Fixes: b0b5e9b13047 ("powerpc/mm/radix: Add radix pte #defines")
    Cc: stable@vger.kernel.org # v4.7+
    Reported-by: Dan Horák <dan@danny.cz>
    Link: https://lore.kernel.org/r/20230511095558.56663a50f86bdc4cd97700b7@danny.cz
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230511114224.977423-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afaaf12f0a72ef7dc99346bc4f192774ea559442
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Mon Feb 18 12:28:36 2019 +0000

    powerpc: Move page table dump files in a dedicated subdirectory
    
    [ Upstream commit e66c3209c7fd17209ccc4cbbee8b1b1bd5c438dd ]
    
    This patch moves the files related to page table dump in a
    dedicated subdirectory.
    
    The purpose is to clean a bit arch/powerpc/mm by regrouping
    multiple files handling a dedicated function.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    [mpe: Shorten the file names while we're at it]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Stable-dep-of: 66b2ca086210 ("powerpc/64s/radix: Fix soft dirty tracking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6c7e0fd52d320edf6a62670d3ee4aa8a13e19e0
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Mon Dec 3 17:40:25 2018 +0000

    powerpc/mm: dump block address translation on book3s/32
    
    [ Upstream commit 7c91efce1608325634494b25ff6491320208e457 ]
    
    This patch adds a debugfs file to dump block address translation:
    
    ~# cat /sys/kernel/debug/powerpc/block_address_translation
    ---[ Instruction Block Address Translations ]---
    0:         -
    1:         -
    2: 0xc0000000-0xcfffffff 0x00000000 Kernel EXEC coherent
    3: 0xd0000000-0xdfffffff 0x10000000 Kernel EXEC coherent
    4:         -
    5:         -
    6:         -
    7:         -
    
    ---[ Data Block Address Translations ]---
    0:         -
    1:         -
    2: 0xc0000000-0xcfffffff 0x00000000 Kernel RW coherent
    3: 0xd0000000-0xdfffffff 0x10000000 Kernel RW coherent
    4:         -
    5:         -
    6:         -
    7:         -
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Stable-dep-of: 66b2ca086210 ("powerpc/64s/radix: Fix soft dirty tracking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be149d86cb291d44b789420162090574dbc3e3ba
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Nov 16 17:06:43 2018 +0000

    powerpc/mm: dump segment registers on book3s/32
    
    [ Upstream commit 0261a508c9fcb33e60f09cac42032f85c31e2039 ]
    
    This patch creates a debugfs file to see content of
    segment registers
    
      # cat /sys/kernel/debug/segment_registers
      ---[ User Segments ]---
      0x00000000-0x0fffffff Kern key 1 User key 1 VSID 0xade2b0
      0x10000000-0x1fffffff Kern key 1 User key 1 VSID 0xade3c1
      0x20000000-0x2fffffff Kern key 1 User key 1 VSID 0xade4d2
      0x30000000-0x3fffffff Kern key 1 User key 1 VSID 0xade5e3
      0x40000000-0x4fffffff Kern key 1 User key 1 VSID 0xade6f4
      0x50000000-0x5fffffff Kern key 1 User key 1 VSID 0xade805
      0x60000000-0x6fffffff Kern key 1 User key 1 VSID 0xade916
      0x70000000-0x7fffffff Kern key 1 User key 1 VSID 0xadea27
      0x80000000-0x8fffffff Kern key 1 User key 1 VSID 0xadeb38
      0x90000000-0x9fffffff Kern key 1 User key 1 VSID 0xadec49
      0xa0000000-0xafffffff Kern key 1 User key 1 VSID 0xaded5a
      0xb0000000-0xbfffffff Kern key 1 User key 1 VSID 0xadee6b
    
      ---[ Kernel Segments ]---
      0xc0000000-0xcfffffff Kern key 0 User key 1 VSID 0x000ccc
      0xd0000000-0xdfffffff Kern key 0 User key 1 VSID 0x000ddd
      0xe0000000-0xefffffff Kern key 0 User key 1 VSID 0x000eee
      0xf0000000-0xffffffff Kern key 0 User key 1 VSID 0x000fff
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    [mpe: Move it under /sys/kernel/debug/powerpc, make sr_init() __init]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Stable-dep-of: 66b2ca086210 ("powerpc/64s/radix: Fix soft dirty tracking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0af15fdc1a13c39649b0b2520a245ae89cd16408
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Nov 29 14:06:57 2018 +0000

    powerpc/mm: Move pgtable_t into platform headers
    
    [ Upstream commit d09780f3a8d48fd49136d7bae8f0ae30de7f261a ]
    
    This patch move pgtable_t into platform headers.
    
    It gets rid of the CONFIG_PPC_64K_PAGES case for PPC64
    as nohash/64 doesn't support CONFIG_PPC_64K_PAGES.
    
    Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Stable-dep-of: 66b2ca086210 ("powerpc/64s/radix: Fix soft dirty tracking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6cbaae4d30f027895d3e4812a2321de24bc0da9
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Nov 29 14:06:55 2018 +0000

    powerpc/mm: move platform specific mmu-xxx.h in platform directories
    
    [ Upstream commit 994da93d196866f914c9d64aafb86e95e3decbb2 ]
    
    The purpose of this patch is to move platform specific
    mmu-xxx.h files in platform directories like pte-xxx.h files.
    
    In the meantime this patch creates common nohash and
    nohash/32 + nohash/64 mmu.h files for future common parts.
    
    Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Stable-dep-of: 66b2ca086210 ("powerpc/64s/radix: Fix soft dirty tracking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f7fcbc4c6ca99e60b71b3cebbb291321958e36a
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Apr 6 10:40:11 2023 -0400

    iio: addac: stx104: Fix race condition when converting analog-to-digital
    
    [ Upstream commit 4f9b80aefb9e2f542a49d9ec087cf5919730e1dd ]
    
    The ADC conversion procedure requires several device I/O operations
    performed in a particular sequence. If stx104_read_raw() is called
    concurrently, the ADC conversion procedure could be clobbered. Prevent
    such a race condition by utilizing a mutex.
    
    Fixes: 4075a283ae83 ("iio: stx104: Add IIO support for the ADC channels")
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/2ae5e40eed5006ca735e4c12181a9ff5ced65547.1680790580.git.william.gray@linaro.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47a00731efdcc2559f9060d5f6ce4529364259d4
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Apr 6 10:40:10 2023 -0400

    iio: addac: stx104: Fix race condition for stx104_write_raw()
    
    [ Upstream commit 9740827468cea80c42db29e7171a50e99acf7328 ]
    
    The priv->chan_out_states array and actual DAC value can become
    mismatched if stx104_write_raw() is called concurrently. Prevent such a
    race condition by utilizing a mutex.
    
    Fixes: 97a445dad37a ("iio: Add IIO support for the DAC on the Apex Embedded Systems STX104")
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/c95c9a77fcef36b2a052282146950f23bbc1ebdc.1680790580.git.william.gray@linaro.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d972b905d47f8dc6b9e1d86dd6c2827f410e615
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Jul 7 13:21:24 2022 -0400

    iio: adc: stx104: Implement and utilize register structures
    
    [ Upstream commit 6cfd14c54b1f42f29097244c1b6208f8268d7d5b ]
    
    Reduce magic numbers and improve code readability by implementing and
    utilizing named register data structures.
    
    Tested-by: Fred Eckert <Frede@cmslaser.com>
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/8cb91d5b53e57b066120e42ea07000d6c7ef5543.1657213745.git.william.gray@linaro.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cef87f8825943b3b2d42e08dc8ee7ba0fec9107b
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Tue May 10 13:30:59 2022 -0400

    iio: adc: stx104: Utilize iomap interface
    
    [ Upstream commit 73b8390cc27e096ab157be261ccc4eaaa6db87af ]
    
    This driver doesn't need to access I/O ports directly via inb()/outb()
    and friends. This patch abstracts such access by calling ioport_map()
    to enable the use of more typical ioread8()/iowrite8() I/O memory
    accessor calls.
    
    Suggested-by: David Laight <David.Laight@ACULAB.COM>
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/64673797df382c52fc32fce24348b25a0b05e73a.1652201921.git.william.gray@linaro.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ec71bbfd6fdb972e6b572d7a97711ae1f4d367a
Author: Cosmin Tanislav <demonsingur@gmail.com>
Date:   Sun Dec 5 13:40:43 2021 +0200

    iio: add addac subdirectory
    
    [ Upstream commit b62e2e1763cda3a6c494ed754317f19be1249297 ]
    
    For IIO devices that expose both ADC and DAC functionality.
    
    Signed-off-by: Cosmin Tanislav <cosmin.tanislav@analog.com>
    Link: https://lore.kernel.org/r/20211205114045.173612-2-cosmin.tanislav@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Stable-dep-of: 4f9b80aefb9e ("iio: addac: stx104: Fix race condition when converting analog-to-digital")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56804da32a6edef397e9d967b01e82a4b04a8e9d
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Feb 23 19:27:03 2023 -0800

    IMA: allow/fix UML builds
    
    [ Upstream commit 644f17412f5acf01a19af9d04a921937a2bc86c6 ]
    
    UML supports HAS_IOMEM since 0bbadafdc49d (um: allow disabling
    NO_IOMEM).
    
    Current IMA build on UML fails on allmodconfig (with TCG_TPM=m):
    
    ld: security/integrity/ima/ima_queue.o: in function `ima_add_template_entry':
    ima_queue.c:(.text+0x2d9): undefined reference to `tpm_pcr_extend'
    ld: security/integrity/ima/ima_init.o: in function `ima_init':
    ima_init.c:(.init.text+0x43f): undefined reference to `tpm_default_chip'
    ld: security/integrity/ima/ima_crypto.o: in function `ima_calc_boot_aggregate_tfm':
    ima_crypto.c:(.text+0x1044): undefined reference to `tpm_pcr_read'
    ld: ima_crypto.c:(.text+0x10d8): undefined reference to `tpm_pcr_read'
    
    Modify the IMA Kconfig entry so that it selects TCG_TPM if HAS_IOMEM
    is set, regardless of the UML Kconfig setting.
    This updates TCG_TPM from =m to =y and fixes the linker errors.
    
    Fixes: f4a0391dfa91 ("ima: fix Kconfig dependencies")
    Cc: Stable <stable@vger.kernel.org> # v5.14+
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Cc: linux-um@lists.infradead.org
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9da11d96bde3db277f061ac5a665c234d505787
Author: shanzhulig <shanzhulig@gmail.com>
Date:   Tue Jun 27 18:10:47 2023 -0700

    drm/amdgpu: Fix potential fence use-after-free v2
    
    [ Upstream commit 2e54154b9f27262efd0cb4f903cc7d5ad1fe9628 ]
    
    fence Decrements the reference count before exiting.
    Avoid Race Vulnerabilities for fence use-after-free.
    
    v2 (chk): actually fix the use after free and not just move it.
    
    Signed-off-by: shanzhulig <shanzhulig@gmail.com>
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a40c56e8bff3e424724d78a9a6b3272dd8a371d
Author: Zhengping Jiang <jiangzp@google.com>
Date:   Wed May 24 17:04:15 2023 -0700

    Bluetooth: L2CAP: Fix use-after-free
    
    [ Upstream commit f752a0b334bb95fe9b42ecb511e0864e2768046f ]
    
    Fix potential use-after-free in l2cap_le_command_rej.
    
    Signed-off-by: Zhengping Jiang <jiangzp@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d45e2be0be35a3d66863563ed2591ee18a6897e
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Fri May 12 20:45:29 2023 +0200

    pcmcia: rsrc_nonstatic: Fix memory leak in nonstatic_release_resource_db()
    
    [ Upstream commit c85fd9422fe0f5d667305efb27f56d09eab120b0 ]
    
    When nonstatic_release_resource_db() frees all resources associated
    with an PCMCIA socket, it forgets to free socket_data too, causing
    a memory leak observable with kmemleak:
    
    unreferenced object 0xc28d1000 (size 64):
      comm "systemd-udevd", pid 297, jiffies 4294898478 (age 194.484s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 f0 85 0e c3 00 00 00 00  ................
        00 00 00 00 0c 10 8d c2 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<ffda4245>] __kmem_cache_alloc_node+0x2d7/0x4a0
        [<7e51f0c8>] kmalloc_trace+0x31/0xa4
        [<d52b4ca0>] nonstatic_init+0x24/0x1a4 [pcmcia_rsrc]
        [<a2f13e08>] pcmcia_register_socket+0x200/0x35c [pcmcia_core]
        [<a728be1b>] yenta_probe+0x4d8/0xa70 [yenta_socket]
        [<c48fac39>] pci_device_probe+0x99/0x194
        [<84b7c690>] really_probe+0x181/0x45c
        [<8060fe6e>] __driver_probe_device+0x75/0x1f4
        [<b9b76f43>] driver_probe_device+0x28/0xac
        [<648b766f>] __driver_attach+0xeb/0x1e4
        [<6e9659eb>] bus_for_each_dev+0x61/0xb4
        [<25a669f3>] driver_attach+0x1e/0x28
        [<d8671d6b>] bus_add_driver+0x102/0x20c
        [<df0d323c>] driver_register+0x5b/0x120
        [<942cd8a4>] __pci_register_driver+0x44/0x4c
        [<e536027e>] __UNIQUE_ID___addressable_cleanup_module188+0x1c/0xfffff000 [iTCO_vendor_support]
    
    Fix this by freeing socket_data too.
    
    Tested on a Acer Travelmate 4002WLMi by manually binding/unbinding
    the yenta_cardbus driver (yenta_socket).
    
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Message-ID: <20230512184529.5094-1-W_Armin@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 235a5ae73cea29109a3e06f100493f17857e6a93
Author: Tuo Li <islituo@gmail.com>
Date:   Tue Jun 13 11:06:37 2023 +0800

    gfs2: Fix possible data races in gfs2_show_options()
    
    [ Upstream commit 6fa0a72cbbe45db4ed967a51f9e6f4e3afe61d20 ]
    
    Some fields such as gt_logd_secs of the struct gfs2_tune are accessed
    without holding the lock gt_spin in gfs2_show_options():
    
      val = sdp->sd_tune.gt_logd_secs;
      if (val != 30)
        seq_printf(s, ",commit=%d", val);
    
    And thus can cause data races when gfs2_show_options() and other functions
    such as gfs2_reconfigure() are concurrently executed:
    
      spin_lock(&gt->gt_spin);
      gt->gt_logd_secs = newargs->ar_commit;
    
    To fix these possible data races, the lock sdp->sd_tune.gt_spin is
    acquired before accessing the fields of gfs2_tune and released after these
    accesses.
    
    Further changes by Andreas:
    
    - Don't hold the spin lock over the seq_printf operations.
    
    Reported-by: BassCheck <bass@buaa.edu.cn>
    Signed-off-by: Tuo Li <islituo@gmail.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b3f25d3894a091abc247eadab266a2c9be64389
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Wed May 24 13:11:47 2023 +0100

    media: platform: mediatek: vpu: fix NULL ptr dereference
    
    [ Upstream commit 3df55cd773e8603b623425cc97b05e542854ad27 ]
    
    If pdev is NULL, then it is still dereferenced.
    
    This fixes this smatch warning:
    
    drivers/media/platform/mediatek/vpu/mtk_vpu.c:570 vpu_load_firmware() warn: address of NULL pointer 'pdev'
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: Yunfei Dong <yunfei.dong@mediatek.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fc7f87725805197388ba749a1801df33000fa50
Author: Yunfei Dong <yunfei.dong@mediatek.com>
Date:   Mon Apr 17 16:17:40 2023 +0800

    media: v4l2-mem2mem: add lock to protect parameter num_rdy
    
    [ Upstream commit 56b5c3e67b0f9af3f45cf393be048ee8d8a92694 ]
    
    Getting below error when using KCSAN to check the driver. Adding lock to
    protect parameter num_rdy when getting the value with function:
    v4l2_m2m_num_src_bufs_ready/v4l2_m2m_num_dst_bufs_ready.
    
    kworker/u16:3: [name:report&]BUG: KCSAN: data-race in v4l2_m2m_buf_queue
    kworker/u16:3: [name:report&]
    
    kworker/u16:3: [name:report&]read-write to 0xffffff8105f35b94 of 1 bytes by task 20865 on cpu 7:
    kworker/u16:3:  v4l2_m2m_buf_queue+0xd8/0x10c
    
    Signed-off-by: Pina Chen <pina.chen@mediatek.com>
    Signed-off-by: Yunfei Dong <yunfei.dong@mediatek.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97c1f26e4d4af55e8584e4646dd5c5fa7baf62c7
Author: Immad Mir <mirimmad17@gmail.com>
Date:   Fri Jun 23 19:17:08 2023 +0530

    FS: JFS: Check for read-only mounted filesystem in txBegin
    
    [ Upstream commit 95e2b352c03b0a86c5717ba1d24ea20969abcacc ]
    
     This patch adds a check for read-only mounted filesystem
     in txBegin before starting a transaction potentially saving
     from NULL pointer deref.
    
    Signed-off-by: Immad Mir <mirimmad17@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b4c144767736221cad92c132f72b3c6ed06a0ea
Author: Immad Mir <mirimmad17@gmail.com>
Date:   Fri Jun 23 19:14:01 2023 +0530

    FS: JFS: Fix null-ptr-deref Read in txBegin
    
    [ Upstream commit 47cfdc338d674d38f4b2f22b7612cc6a2763ba27 ]
    
     Syzkaller reported an issue where txBegin may be called
     on a superblock in a read-only mounted filesystem which leads
     to NULL pointer deref. This could be solved by checking if
     the filesystem is read-only before calling txBegin, and returning
     with appropiate error code.
    
    Reported-By: syzbot+f1faa20eec55e0c8644c@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=be7e52c50c5182cc09a09ea6fc456446b2039de3
    
    Signed-off-by: Immad Mir <mirimmad17@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdf9179411b8be122140483bd585d9a6603f8412
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Jun 22 17:43:57 2023 -0600

    MIPS: dec: prom: Address -Warray-bounds warning
    
    [ Upstream commit 7b191b9b55df2a844bd32d1d380f47a7df1c2896 ]
    
    Zero-length arrays are deprecated, and we are replacing them with flexible
    array members instead. So, replace zero-length array with flexible-array
    member in struct memmap.
    
    Address the following warning found after building (with GCC-13) mips64
    with decstation_64_defconfig:
    In function 'rex_setup_memory_region',
        inlined from 'prom_meminit' at arch/mips/dec/prom/memory.c:91:3:
    arch/mips/dec/prom/memory.c:72:31: error: array subscript i is outside array bounds of 'unsigned char[0]' [-Werror=array-bounds=]
       72 |                 if (bm->bitmap[i] == 0xff)
          |                     ~~~~~~~~~~^~~
    In file included from arch/mips/dec/prom/memory.c:16:
    ./arch/mips/include/asm/dec/prom.h: In function 'prom_meminit':
    ./arch/mips/include/asm/dec/prom.h:73:23: note: while referencing 'bitmap'
       73 |         unsigned char bitmap[0];
    
    This helps with the ongoing efforts to globally enable -Warray-bounds.
    
    This results in no differences in binary output.
    
    Link: https://github.com/KSPP/linux/issues/79
    Link: https://github.com/KSPP/linux/issues/323
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53b0a362aca2583729e8ca2936ca657ff3247d88
Author: Yogesh <yogi.kernel@gmail.com>
Date:   Thu Jun 22 00:07:03 2023 +0530

    fs: jfs: Fix UBSAN: array-index-out-of-bounds in dbAllocDmapLev
    
    [ Upstream commit 4e302336d5ca1767a06beee7596a72d3bdc8d983 ]
    
    Syzkaller reported the following issue:
    
    UBSAN: array-index-out-of-bounds in fs/jfs/jfs_dmap.c:1965:6
    index -84 is out of range for type 's8[341]' (aka 'signed char[341]')
    CPU: 1 PID: 4995 Comm: syz-executor146 Not tainted 6.4.0-rc6-syzkaller-00037-gb6dad5178cea #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/27/2023
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106
     ubsan_epilogue lib/ubsan.c:217 [inline]
     __ubsan_handle_out_of_bounds+0x11c/0x150 lib/ubsan.c:348
     dbAllocDmapLev+0x3e5/0x430 fs/jfs/jfs_dmap.c:1965
     dbAllocCtl+0x113/0x920 fs/jfs/jfs_dmap.c:1809
     dbAllocAG+0x28f/0x10b0 fs/jfs/jfs_dmap.c:1350
     dbAlloc+0x658/0xca0 fs/jfs/jfs_dmap.c:874
     dtSplitUp fs/jfs/jfs_dtree.c:974 [inline]
     dtInsert+0xda7/0x6b00 fs/jfs/jfs_dtree.c:863
     jfs_create+0x7b6/0xbb0 fs/jfs/namei.c:137
     lookup_open fs/namei.c:3492 [inline]
     open_last_lookups fs/namei.c:3560 [inline]
     path_openat+0x13df/0x3170 fs/namei.c:3788
     do_filp_open+0x234/0x490 fs/namei.c:3818
     do_sys_openat2+0x13f/0x500 fs/open.c:1356
     do_sys_open fs/open.c:1372 [inline]
     __do_sys_openat fs/open.c:1388 [inline]
     __se_sys_openat fs/open.c:1383 [inline]
     __x64_sys_openat+0x247/0x290 fs/open.c:1383
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f1f4e33f7e9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 51 14 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffc21129578 EFLAGS: 00000246 ORIG_RAX: 0000000000000101
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f1f4e33f7e9
    RDX: 000000000000275a RSI: 0000000020000040 RDI: 00000000ffffff9c
    RBP: 00007f1f4e2ff080 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f1f4e2ff110
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    
    The bug occurs when the dbAllocDmapLev()function attempts to access
    dp->tree.stree[leafidx + LEAFIND] while the leafidx value is negative.
    
    To rectify this, the patch introduces a safeguard within the
    dbAllocDmapLev() function. A check has been added to verify if leafidx is
    negative. If it is, the function immediately returns an I/O error, preventing
    any further execution that could potentially cause harm.
    
    Tested via syzbot.
    
    Reported-by: syzbot+853a6f4dfa3cf37d3aea@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=ae2f5a27a07ae44b0f17
    Signed-off-by: Yogesh <yogi.kernel@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b37f998d357102e8eb0f8eeb33f03fff22e49cbf
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jun 21 11:32:35 2023 +0200

    udf: Fix uninitialized array access for some pathnames
    
    [ Upstream commit 028f6055c912588e6f72722d89c30b401bbcf013 ]
    
    For filenames that begin with . and are between 2 and 5 characters long,
    UDF charset conversion code would read uninitialized memory in the
    output buffer. The only practical impact is that the name may be prepended a
    "unification hash" when it is not actually needed but still it is good
    to fix this.
    
    Reported-by: syzbot+cd311b1e43cc25f90d18@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/all/000000000000e2638a05fe9dc8f9@google.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e29df996dc46a837ff838eea5a21759aa8c24e0b
Author: Marco Morandini <marco.morandini@polimi.it>
Date:   Tue May 30 15:40:08 2023 +0200

    HID: add quirk for 03f0:464a HP Elite Presenter Mouse
    
    [ Upstream commit 0db117359e47750d8bd310d19f13e1c4ef7fc26a ]
    
    HP Elite Presenter Mouse HID Record Descriptor shows
    two mouses (Repord ID 0x1 and 0x2), one keypad (Report ID 0x5),
    two Consumer Controls (Report IDs 0x6 and 0x3).
    Previous to this commit it registers one mouse, one keypad
    and one Consumer Control, and it was usable only as a
    digitl laser pointer (one of the two mouses). This patch defines
    the 464a USB device ID and enables the HID_QUIRK_MULTI_INPUT
    quirk for it, allowing to use the device both as a mouse
    and a digital laser pointer.
    
    Signed-off-by: Marco Morandini <marco.morandini@polimi.it>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 965bad2bf1afef64ec16249da676dc7310cca32e
Author: Ye Bin <yebin10@huawei.com>
Date:   Mon Jun 5 22:07:31 2023 +0800

    quota: fix warning in dqgrab()
    
    [ Upstream commit d6a95db3c7ad160bc16b89e36449705309b52bcb ]
    
    There's issue as follows when do fault injection:
    WARNING: CPU: 1 PID: 14870 at include/linux/quotaops.h:51 dquot_disable+0x13b7/0x18c0
    Modules linked in:
    CPU: 1 PID: 14870 Comm: fsconfig Not tainted 6.3.0-next-20230505-00006-g5107a9c821af-dirty #541
    RIP: 0010:dquot_disable+0x13b7/0x18c0
    RSP: 0018:ffffc9000acc79e0 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff88825e41b980
    RDX: 0000000000000000 RSI: ffff88825e41b980 RDI: 0000000000000002
    RBP: ffff888179f68000 R08: ffffffff82087ca7 R09: 0000000000000000
    R10: 0000000000000001 R11: ffffed102f3ed026 R12: ffff888179f68130
    R13: ffff888179f68110 R14: dffffc0000000000 R15: ffff888179f68118
    FS:  00007f450a073740(0000) GS:ffff88882fc00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffe96f2efd8 CR3: 000000025c8ad000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     dquot_load_quota_sb+0xd53/0x1060
     dquot_resume+0x172/0x230
     ext4_reconfigure+0x1dc6/0x27b0
     reconfigure_super+0x515/0xa90
     __x64_sys_fsconfig+0xb19/0xd20
     do_syscall_64+0x39/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Above issue may happens as follows:
    ProcessA              ProcessB                    ProcessC
    sys_fsconfig
      vfs_fsconfig_locked
       reconfigure_super
         ext4_remount
          dquot_suspend -> suspend all type quota
    
                     sys_fsconfig
                      vfs_fsconfig_locked
                        reconfigure_super
                         ext4_remount
                          dquot_resume
                           ret = dquot_load_quota_sb
                            add_dquot_ref
                                               do_open  -> open file O_RDWR
                                                vfs_open
                                                 do_dentry_open
                                                  get_write_access
                                                   atomic_inc_unless_negative(&inode->i_writecount)
                                                  ext4_file_open
                                                   dquot_file_open
                                                    dquot_initialize
                                                      __dquot_initialize
                                                       dqget
                                                        atomic_inc(&dquot->dq_count);
    
                              __dquot_initialize
                               __dquot_initialize
                                dqget
                                 if (!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))
                                   ext4_acquire_dquot
                                    -> Return error DQ_ACTIVE_B flag isn't set
                             dquot_disable
                              invalidate_dquots
                               if (atomic_read(&dquot->dq_count))
                                dqgrab
                                 WARN_ON_ONCE(!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))
                                  -> Trigger warning
    
    In the above scenario, 'dquot->dq_flags' has no DQ_ACTIVE_B is normal when
    dqgrab().
    To solve above issue just replace the dqgrab() use in invalidate_dquots() with
    atomic_inc(&dquot->dq_count).
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230605140731.2427629-3-yebin10@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e69dfc09881f6fe1fd566898d7aa5639d0b6227
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jun 5 22:07:30 2023 +0800

    quota: Properly disable quotas when add_dquot_ref() fails
    
    [ Upstream commit 6a4e3363792e30177cc3965697e34ddcea8b900b ]
    
    When add_dquot_ref() fails (usually due to IO error or ENOMEM), we want
    to disable quotas we are trying to enable. However dquot_disable() call
    was passed just the flags we are enabling so in case flags ==
    DQUOT_USAGE_ENABLED dquot_disable() call will just fail with EINVAL
    instead of properly disabling quotas. Fix the problem by always passing
    DQUOT_LIMITS_ENABLED | DQUOT_USAGE_ENABLED to dquot_disable() in this
    case.
    
    Reported-and-tested-by: Ye Bin <yebin10@huawei.com>
    Reported-by: syzbot+e633c79ceaecbf479854@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230605140731.2427629-2-yebin10@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cdcf22df8c5462bf3eb877b2ce858639b34338e6
Author: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
Date:   Wed May 10 19:39:05 2023 +0200

    ALSA: emu10k1: roll up loops in DSP setup code for Audigy
    
    [ Upstream commit 8cabf83c7aa54530e699be56249fb44f9505c4f3 ]
    
    There is no apparent reason for the massive code duplication.
    
    Signed-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
    Link: https://lore.kernel.org/r/20230510173917.3073107-3-oswald.buddenhagen@gmx.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfa9148bafb2d3292b65de1bac79dcca65be2643
Author: hackyzh002 <hackyzh002@gmail.com>
Date:   Wed Apr 19 20:20:58 2023 +0800

    drm/radeon: Fix integer overflow in radeon_cs_parser_init
    
    [ Upstream commit f828b681d0cd566f86351c0b913e6cb6ed8c7b9c ]
    
    The type of size is unsigned, if size is 0x40000000, there will be an
    integer overflow, size will be zero after size *= sizeof(uint32_t),
    will cause uninitialized memory to be referenced later
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: hackyzh002 <hackyzh002@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4725130ed45292e26a8538e266e0ea9b8b7a6244
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:58 2023 +0300

    selftests: forwarding: tc_flower: Relax success criterion
    
    [ Upstream commit 9ee37e53e7687654b487fc94e82569377272a7a8 ]
    
    The test checks that filters that match on source or destination MAC
    were only hit once. A host can send more than one packet with a given
    source or destination MAC, resulting in failures.
    
    Fix by relaxing the success criterion and instead check that the filters
    were not hit zero times. Using tc_check_at_least_x_packets() is also an
    option, but it is not available in older kernels.
    
    Fixes: 07e5c75184a1 ("selftests: forwarding: Introduce tc flower matching tests")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/adc5e40d-d040-a65e-eb26-edf47dac5b02@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-13-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 706221e6cdc3f4005a9d2e0fb4c22876b2b7df83
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Mon Aug 12 12:32:57 2019 -0700

    lib/mpi: Eliminate unused umul_ppmm definitions for MIPS
    
    commit b0c091ae04f6746f541b9be91809e1f4f43e9a65 upstream.
    
    Clang errors out when building this macro:
    
    lib/mpi/generic_mpih-mul1.c:37:24: error: invalid use of a cast in a
    inline asm context requiring an l-value: remove the cast or build with
    -fheinous-gnu-extensions
                    umul_ppmm(prod_high, prod_low, s1_ptr[j], s2_limb);
                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    lib/mpi/longlong.h:652:20: note: expanded from macro 'umul_ppmm'
            : "=l" ((USItype)(w0)), \
                    ~~~~~~~~~~^~~
    lib/mpi/generic_mpih-mul1.c:37:3: error: invalid output constraint '=h'
    in asm
                    umul_ppmm(prod_high, prod_low, s1_ptr[j], s2_limb);
                    ^
    lib/mpi/longlong.h:653:7: note: expanded from macro 'umul_ppmm'
                 "=h" ((USItype)(w1)) \
                 ^
    2 errors generated.
    
    The C version that is used for GCC 4.4 and up works well with clang;
    however, it is not currently being used because Clang masks itself
    as GCC 4.2.1 for compatibility reasons. As Nick points out, we require
    GCC 4.6 and newer in the kernel so we can eliminate all of the
    versioning checks and just use the C version of umul_ppmm for all
    supported compilers.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/605
    Suggested-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

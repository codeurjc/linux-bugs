commit 71e496bd338221709b180b60ba419fa542c2b320
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Nov 26 09:24:52 2022 +0100

    Linux 5.15.80
    
    Link: https://lore.kernel.org/r/20221123084602.707860461@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>=20
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Link: https://lore.kernel.org/r/20221125075750.019489581@linuxfoundation.org
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b63ddb3ba61e2d3539f87e095c881e552bc45dab
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Thu Sep 1 00:09:38 2022 +0800

    ntfs: check overflow when iterating ATTR_RECORDs
    
    commit 63095f4f3af59322bea984a6ae44337439348fe0 upstream.
    
    Kernel iterates over ATTR_RECORDs in mft record in ntfs_attr_find().
    Because the ATTR_RECORDs are next to each other, kernel can get the next
    ATTR_RECORD from end address of current ATTR_RECORD, through current
    ATTR_RECORD length field.
    
    The problem is that during iteration, when kernel calculates the end
    address of current ATTR_RECORD, kernel may trigger an integer overflow bug
    in executing `a = (ATTR_RECORD*)((u8*)a + le32_to_cpu(a->length))`.  This
    may wrap, leading to a forever iteration on 32bit systems.
    
    This patch solves it by adding some checks on calculating end address
    of current ATTR_RECORD during iteration.
    
    Link: https://lkml.kernel.org/r/20220831160935.3409-4-yin31149@gmail.com
    Link: https://lore.kernel.org/all/20220827105842.GM2030@kadam/
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Anton Altaparmakov <anton@tuxera.com>
    Cc: chenxiaosong (A) <chenxiaosong2@huawei.com>
    Cc: syzkaller-bugs <syzkaller-bugs@googlegroups.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab6a1bb17e3c2f6670020d7edeea2fbfe6466690
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Thu Sep 1 00:09:36 2022 +0800

    ntfs: fix out-of-bounds read in ntfs_attr_find()
    
    commit 36a4d82dddbbd421d2b8e79e1cab68c8126d5075 upstream.
    
    Kernel iterates over ATTR_RECORDs in mft record in ntfs_attr_find().  To
    ensure access on these ATTR_RECORDs are within bounds, kernel will do some
    checking during iteration.
    
    The problem is that during checking whether ATTR_RECORD's name is within
    bounds, kernel will dereferences the ATTR_RECORD name_offset field, before
    checking this ATTR_RECORD strcture is within bounds.  This problem may
    result out-of-bounds read in ntfs_attr_find(), reported by Syzkaller:
    
    ==================================================================
    BUG: KASAN: use-after-free in ntfs_attr_find+0xc02/0xce0 fs/ntfs/attrib.c:597
    Read of size 2 at addr ffff88807e352009 by task syz-executor153/3607
    
    [...]
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description mm/kasan/report.c:317 [inline]
     print_report.cold+0x2ba/0x719 mm/kasan/report.c:433
     kasan_report+0xb1/0x1e0 mm/kasan/report.c:495
     ntfs_attr_find+0xc02/0xce0 fs/ntfs/attrib.c:597
     ntfs_attr_lookup+0x1056/0x2070 fs/ntfs/attrib.c:1193
     ntfs_read_inode_mount+0x89a/0x2580 fs/ntfs/inode.c:1845
     ntfs_fill_super+0x1799/0x9320 fs/ntfs/super.c:2854
     mount_bdev+0x34d/0x410 fs/super.c:1400
     legacy_get_tree+0x105/0x220 fs/fs_context.c:610
     vfs_get_tree+0x89/0x2f0 fs/super.c:1530
     do_new_mount fs/namespace.c:3040 [inline]
     path_mount+0x1326/0x1e20 fs/namespace.c:3370
     do_mount fs/namespace.c:3383 [inline]
     __do_sys_mount fs/namespace.c:3591 [inline]
     __se_sys_mount fs/namespace.c:3568 [inline]
     __x64_sys_mount+0x27f/0x300 fs/namespace.c:3568
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
     [...]
     </TASK>
    
    The buggy address belongs to the physical page:
    page:ffffea0001f8d400 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x7e350
    head:ffffea0001f8d400 order:3 compound_mapcount:0 compound_pincount:0
    flags: 0xfff00000010200(slab|head|node=0|zone=1|lastcpupid=0x7ff)
    raw: 00fff00000010200 0000000000000000 dead000000000122 ffff888011842140
    raw: 0000000000000000 0000000000040004 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    Memory state around the buggy address:
     ffff88807e351f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff88807e351f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88807e352000: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                          ^
     ffff88807e352080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88807e352100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    This patch solves it by moving the ATTR_RECORD strcture's bounds checking
    earlier, then checking whether ATTR_RECORD's name is within bounds.
    What's more, this patch also add some comments to improve its
    maintainability.
    
    Link: https://lkml.kernel.org/r/20220831160935.3409-3-yin31149@gmail.com
    Link: https://lore.kernel.org/all/1636796c-c85e-7f47-e96f-e074fee3c7d3@huawei.com/
    Link: https://groups.google.com/g/syzkaller-bugs/c/t_XdeKPGTR4/m/LECAuIGcBgAJ
    Signed-off-by: chenxiaosong (A) <chenxiaosong2@huawei.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Reported-by: syzbot+5f8dcabe4a3b2c51c607@syzkaller.appspotmail.com
    Tested-by: syzbot+5f8dcabe4a3b2c51c607@syzkaller.appspotmail.com
    Cc: Anton Altaparmakov <anton@tuxera.com>
    Cc: syzkaller-bugs <syzkaller-bugs@googlegroups.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5330c423b86263ac7883fef0260b9e2229cb531e
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Thu Sep 1 00:09:34 2022 +0800

    ntfs: fix use-after-free in ntfs_attr_find()
    
    commit d85a1bec8e8d552ab13163ca1874dcd82f3d1550 upstream.
    
    Patch series "ntfs: fix bugs about Attribute", v2.
    
    This patchset fixes three bugs relative to Attribute in record:
    
    Patch 1 adds a sanity check to ensure that, attrs_offset field in first
    mft record loading from disk is within bounds.
    
    Patch 2 moves the ATTR_RECORD's bounds checking earlier, to avoid
    dereferencing ATTR_RECORD before checking this ATTR_RECORD is within
    bounds.
    
    Patch 3 adds an overflow checking to avoid possible forever loop in
    ntfs_attr_find().
    
    Without patch 1 and patch 2, the kernel triggersa KASAN use-after-free
    detection as reported by Syzkaller.
    
    Although one of patch 1 or patch 2 can fix this, we still need both of
    them.  Because patch 1 fixes the root cause, and patch 2 not only fixes
    the direct cause, but also fixes the potential out-of-bounds bug.
    
    
    This patch (of 3):
    
    Syzkaller reported use-after-free read as follows:
    ==================================================================
    BUG: KASAN: use-after-free in ntfs_attr_find+0xc02/0xce0 fs/ntfs/attrib.c:597
    Read of size 2 at addr ffff88807e352009 by task syz-executor153/3607
    
    [...]
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description mm/kasan/report.c:317 [inline]
     print_report.cold+0x2ba/0x719 mm/kasan/report.c:433
     kasan_report+0xb1/0x1e0 mm/kasan/report.c:495
     ntfs_attr_find+0xc02/0xce0 fs/ntfs/attrib.c:597
     ntfs_attr_lookup+0x1056/0x2070 fs/ntfs/attrib.c:1193
     ntfs_read_inode_mount+0x89a/0x2580 fs/ntfs/inode.c:1845
     ntfs_fill_super+0x1799/0x9320 fs/ntfs/super.c:2854
     mount_bdev+0x34d/0x410 fs/super.c:1400
     legacy_get_tree+0x105/0x220 fs/fs_context.c:610
     vfs_get_tree+0x89/0x2f0 fs/super.c:1530
     do_new_mount fs/namespace.c:3040 [inline]
     path_mount+0x1326/0x1e20 fs/namespace.c:3370
     do_mount fs/namespace.c:3383 [inline]
     __do_sys_mount fs/namespace.c:3591 [inline]
     __se_sys_mount fs/namespace.c:3568 [inline]
     __x64_sys_mount+0x27f/0x300 fs/namespace.c:3568
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
     [...]
     </TASK>
    
    The buggy address belongs to the physical page:
    page:ffffea0001f8d400 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x7e350
    head:ffffea0001f8d400 order:3 compound_mapcount:0 compound_pincount:0
    flags: 0xfff00000010200(slab|head|node=0|zone=1|lastcpupid=0x7ff)
    raw: 00fff00000010200 0000000000000000 dead000000000122 ffff888011842140
    raw: 0000000000000000 0000000000040004 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    Memory state around the buggy address:
     ffff88807e351f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff88807e351f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88807e352000: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                          ^
     ffff88807e352080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88807e352100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Kernel will loads $MFT/$DATA's first mft record in
    ntfs_read_inode_mount().
    
    Yet the problem is that after loading, kernel doesn't check whether
    attrs_offset field is a valid value.
    
    To be more specific, if attrs_offset field is larger than bytes_allocated
    field, then it may trigger the out-of-bounds read bug(reported as
    use-after-free bug) in ntfs_attr_find(), when kernel tries to access the
    corresponding mft record's attribute.
    
    This patch solves it by adding the sanity check between attrs_offset field
    and bytes_allocated field, after loading the first mft record.
    
    Link: https://lkml.kernel.org/r/20220831160935.3409-1-yin31149@gmail.com
    Link: https://lkml.kernel.org/r/20220831160935.3409-2-yin31149@gmail.com
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Cc: Anton Altaparmakov <anton@tuxera.com>
    Cc: ChenXiaoSong <chenxiaosong2@huawei.com>
    Cc: syzkaller-bugs <syzkaller-bugs@googlegroups.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43bbadb7e4636dc02f6a283c2a39e6438e6173cd
Author: Dominique Martinet <asmadeus@codewreck.org>
Date:   Sun Sep 4 20:17:49 2022 +0900

    net/9p: use a dedicated spinlock for trans_fd
    
    commit 296ab4a813841ba1d5f40b03190fd1bd8f25aab0 upstream.
    
    Shamelessly copying the explanation from Tetsuo Handa's suggested
    patch[1] (slightly reworded):
    syzbot is reporting inconsistent lock state in p9_req_put()[2],
    for p9_tag_remove() from p9_req_put() from IRQ context is using
    spin_lock_irqsave() on "struct p9_client"->lock but trans_fd
    (not from IRQ context) is using spin_lock().
    
    Since the locks actually protect different things in client.c and in
    trans_fd.c, just replace trans_fd.c's lock by a new one specific to the
    transport (client.c's protect the idr for fid/tag allocations,
    while trans_fd.c's protects its own req list and request status field
    that acts as the transport's state machine)
    
    Link: https://lore.kernel.org/r/20220904112928.1308799-1-asmadeus@codewreck.org
    Link: https://lkml.kernel.org/r/2470e028-9b05-2013-7198-1fdad071d999@I-love.SAKURA.ne.jp [1]
    Link: https://syzkaller.appspot.com/bug?extid=2f20b523930c32c160cc [2]
    Reported-by: syzbot <syzbot+2f20b523930c32c160cc@syzkaller.appspotmail.com>
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9357fca9dad7e76994dec4c3c997269997c94101
Author: Alexander Potapenko <glider@google.com>
Date:   Thu Sep 15 17:04:16 2022 +0200

    mm: fs: initialize fsdata passed to write_begin/write_end interface
    
    commit 1468c6f4558b1bcd92aa0400f2920f9dc7588402 upstream.
    
    Functions implementing the a_ops->write_end() interface accept the `void
    *fsdata` parameter that is supposed to be initialized by the corresponding
    a_ops->write_begin() (which accepts `void **fsdata`).
    
    However not all a_ops->write_begin() implementations initialize `fsdata`
    unconditionally, so it may get passed uninitialized to a_ops->write_end(),
    resulting in undefined behavior.
    
    Fix this by initializing fsdata with NULL before the call to
    write_begin(), rather than doing so in all possible a_ops implementations.
    
    This patch covers only the following cases found by running x86 KMSAN
    under syzkaller:
    
     - generic_perform_write()
     - cont_expand_zero() and generic_cont_expand_simple()
     - page_symlink()
    
    Other cases of passing uninitialized fsdata may persist in the codebase.
    
    Link: https://lkml.kernel.org/r/20220915150417.722975-43-glider@google.com
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Andrey Konovalov <andreyknvl@gmail.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Eric Biggers <ebiggers@google.com>
    Cc: Eric Biggers <ebiggers@kernel.org>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ilya Leoshkevich <iii@linux.ibm.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Marco Elver <elver@google.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b334ab4c3347e028f050c17a79ec1bb249aefcd2
Author: Hawkins Jiawei <yin31149@gmail.com>
Date:   Tue Sep 27 07:34:59 2022 +0800

    wifi: wext: use flex array destination for memcpy()
    
    commit e3e6e1d16a4cf7b63159ec71774e822194071954 upstream.
    
    Syzkaller reports buffer overflow false positive as follows:
    ------------[ cut here ]------------
    memcpy: detected field-spanning write (size 8) of single field
            "&compat_event->pointer" at net/wireless/wext-core.c:623 (size 4)
    WARNING: CPU: 0 PID: 3607 at net/wireless/wext-core.c:623
            wireless_send_event+0xab5/0xca0 net/wireless/wext-core.c:623
    Modules linked in:
    CPU: 1 PID: 3607 Comm: syz-executor659 Not tainted
            6.0.0-rc6-next-20220921-syzkaller #0
    [...]
    Call Trace:
     <TASK>
     ioctl_standard_call+0x155/0x1f0 net/wireless/wext-core.c:1022
     wireless_process_ioctl+0xc8/0x4c0 net/wireless/wext-core.c:955
     wext_ioctl_dispatch net/wireless/wext-core.c:988 [inline]
     wext_ioctl_dispatch net/wireless/wext-core.c:976 [inline]
     wext_handle_ioctl+0x26b/0x280 net/wireless/wext-core.c:1049
     sock_ioctl+0x285/0x640 net/socket.c:1220
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:870 [inline]
     __se_sys_ioctl fs/ioctl.c:856 [inline]
     __x64_sys_ioctl+0x193/0x200 fs/ioctl.c:856
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
     [...]
     </TASK>
    
    Wireless events will be sent on the appropriate channels in
    wireless_send_event(). Different wireless events may have different
    payload structure and size, so kernel uses **len** and **cmd** field
    in struct __compat_iw_event as wireless event common LCP part, uses
    **pointer** as a label to mark the position of remaining different part.
    
    Yet the problem is that, **pointer** is a compat_caddr_t type, which may
    be smaller than the relative structure at the same position. So during
    wireless_send_event() tries to parse the wireless events payload, it may
    trigger the memcpy() run-time destination buffer bounds checking when the
    relative structure's data is copied to the position marked by **pointer**.
    
    This patch solves it by introducing flexible-array field **ptr_bytes**,
    to mark the position of the wireless events remaining part next to
    LCP part. What's more, this patch also adds **ptr_len** variable in
    wireless_send_event() to improve its maintainability.
    
    Reported-and-tested-by: syzbot+473754e5af963cf014cf@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/all/00000000000070db2005e95a5984@google.com/
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Hawkins Jiawei <yin31149@gmail.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e07032b4b4724b8ad1003698cb81083c1818999
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c7b7476b56ed81c7355e62db55ae0762171e6a5
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Fri Aug 26 15:12:17 2022 +0200

    gfs2: Switch from strlcpy to strscpy
    
    commit 204c0300c4e99707e9fb6e57840aa1127060e63f upstream.
    
    Switch from strlcpy to strscpy and make sure that @count is the size of
    the smaller of the source and destination buffers.  This prevents
    reading beyond the end of the source buffer when the source string isn't
    null terminated.
    
    Found by a modified version of syzkaller.
    
    Suggested-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28275a7c84d21c55ab3282d897f284d8d527173c
Author: Andrew Price <anprice@redhat.com>
Date:   Wed Aug 17 13:22:00 2022 +0100

    gfs2: Check sb_bsize_shift after reading superblock
    
    commit 670f8ce56dd0632dc29a0322e188cc73ce3c6b92 upstream.
    
    Fuzzers like to scribble over sb_bsize_shift but in reality it's very
    unlikely that this field would be corrupted on its own. Nevertheless it
    should be checked to avoid the possibility of messy mount errors due to
    bad calculations. It's always a fixed value based on the block size so
    we can just check that it's the expected value.
    
    Tested with:
    
        mkfs.gfs2 -O -p lock_nolock /dev/vdb
        for i in 0 -1 64 65 32 33; do
            gfs2_edit -p sb field sb_bsize_shift $i /dev/vdb
            mount /dev/vdb /mnt/test && umount /mnt/test
        done
    
    Before this patch we get a withdraw after
    
    [   76.413681] gfs2: fsid=loop0.0: fatal: invalid metadata block
    [   76.413681]   bh = 19 (type: exp=5, found=4)
    [   76.413681]   function = gfs2_meta_buffer, file = fs/gfs2/meta_io.c, line = 492
    
    and with UBSAN configured we also get complaints like
    
    [   76.373395] UBSAN: shift-out-of-bounds in fs/gfs2/ops_fstype.c:295:19
    [   76.373815] shift exponent 4294967287 is too large for 64-bit type 'long unsigned int'
    
    After the patch, these complaints don't appear, mount fails immediately
    and we get an explanation in dmesg.
    
    Reported-by: syzbot+dcf33a7aae997956fe06@syzkaller.appspotmail.com
    Signed-off-by: Andrew Price <anprice@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4f1a01b2e81378fce9ca528d4d8a049e4b58fcd
Author: Dominique Martinet <asmadeus@codewreck.org>
Date:   Wed Aug 17 14:58:44 2022 +0900

    9p: trans_fd/p9_conn_cancel: drop client lock earlier
    
    commit 52f1c45dde9136f964d63a77d19826c8a74e2c7f upstream.
    
    syzbot reported a double-lock here and we no longer need this
    lock after requests have been moved off to local list:
    just drop the lock earlier.
    
    Link: https://lkml.kernel.org/r/20220904064028.1305220-1-asmadeus@codewreck.org
    Reported-by: syzbot+50f7e8d06c3768dd97f3@syzkaller.appspotmail.com
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Tested-by: Schspa Shi <schspa@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7b0e95071bb4be4b811af3f0bfc3e200eedeaa3
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Sun Nov 13 16:51:19 2022 -0800

    kcm: close race conditions on sk_receive_queue
    
    commit 5121197ecc5db58c07da95eb1ff82b98b121a221 upstream.
    
    sk->sk_receive_queue is protected by skb queue lock, but for KCM
    sockets its RX path takes mux->rx_lock to protect more than just
    skb queue. However, kcm_recvmsg() still only grabs the skb queue
    lock, so race conditions still exist.
    
    We can teach kcm_recvmsg() to grab mux->rx_lock too but this would
    introduce a potential performance regression as struct kcm_mux can
    be shared by multiple KCM sockets.
    
    So we have to enforce skb queue lock in requeue_rx_msgs() and handle
    skb peek case carefully in kcm_wait_data(). Fortunately,
    skb_recv_datagram() already handles it nicely and is widely used by
    other sockets, we can just switch to skb_recv_datagram() after
    getting rid of the unnecessary sock lock in kcm_recvmsg() and
    kcm_splice_read(). Side note: SOCK_DONE is not used by KCM sockets,
    so it is safe to get rid of this check too.
    
    I ran the original syzbot reproducer for 30 min without seeing any
    issue.
    
    Fixes: ab7ac4eb9832 ("kcm: Kernel Connection Multiplexor module")
    Reported-by: syzbot+278279efdd2730dd14bf@syzkaller.appspotmail.com
    Reported-by: shaozhengchao <shaozhengchao@huawei.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Tom Herbert <tom@herbertland.com>
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Link: https://lore.kernel.org/r/20221114005119.597905-1-xiyou.wangcong@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27d706b0d394a907ff8c4f83ffef9d3e5817fa84
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 12 13:34:12 2022 +0000

    kcm: avoid potential race in kcm_tx_work
    
    commit ec7eede369fe5b0d085ac51fdbb95184f87bfc6c upstream.
    
    syzbot found that kcm_tx_work() could crash [1] in:
    
            /* Primarily for SOCK_SEQPACKET sockets */
            if (likely(sk->sk_socket) &&
                test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)) {
    <<*>>   clear_bit(SOCK_NOSPACE, &sk->sk_socket->flags);
                    sk->sk_write_space(sk);
            }
    
    I think the reason is that another thread might concurrently
    run in kcm_release() and call sock_orphan(sk) while sk is not
    locked. kcm_tx_work() find sk->sk_socket being NULL.
    
    [1]
    BUG: KASAN: null-ptr-deref in instrument_atomic_write include/linux/instrumented.h:86 [inline]
    BUG: KASAN: null-ptr-deref in clear_bit include/asm-generic/bitops/instrumented-atomic.h:41 [inline]
    BUG: KASAN: null-ptr-deref in kcm_tx_work+0xff/0x160 net/kcm/kcmsock.c:742
    Write of size 8 at addr 0000000000000008 by task kworker/u4:3/53
    
    CPU: 0 PID: 53 Comm: kworker/u4:3 Not tainted 5.19.0-rc3-next-20220621-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: kkcmd kcm_tx_work
    Call Trace:
    <TASK>
    __dump_stack lib/dump_stack.c:88 [inline]
    dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
    kasan_report+0xbe/0x1f0 mm/kasan/report.c:495
    check_region_inline mm/kasan/generic.c:183 [inline]
    kasan_check_range+0x13d/0x180 mm/kasan/generic.c:189
    instrument_atomic_write include/linux/instrumented.h:86 [inline]
    clear_bit include/asm-generic/bitops/instrumented-atomic.h:41 [inline]
    kcm_tx_work+0xff/0x160 net/kcm/kcmsock.c:742
    process_one_work+0x996/0x1610 kernel/workqueue.c:2289
    worker_thread+0x665/0x1080 kernel/workqueue.c:2436
    kthread+0x2e9/0x3a0 kernel/kthread.c:376
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:302
    </TASK>
    
    Fixes: ab7ac4eb9832 ("kcm: Kernel Connection Multiplexor module")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tom Herbert <tom@herbertland.com>
    Link: https://lore.kernel.org/r/20221012133412.519394-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b49026d9c86f35a4c5bfb8d7345c9c4379828c6b
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 11 15:07:48 2022 -0700

    tcp: cdg: allow tcp_cdg_release() to be called multiple times
    
    commit 72e560cb8c6f80fc2b4afc5d3634a32465e13a51 upstream.
    
    Apparently, mptcp is able to call tcp_disconnect() on an already
    disconnected flow. This is generally fine, unless current congestion
    control is CDG, because it might trigger a double-free [1]
    
    Instead of fixing MPTCP, and future bugs, we can make tcp_disconnect()
    more resilient.
    
    [1]
    BUG: KASAN: double-free in slab_free mm/slub.c:3539 [inline]
    BUG: KASAN: double-free in kfree+0xe2/0x580 mm/slub.c:4567
    
    CPU: 0 PID: 3645 Comm: kworker/0:7 Not tainted 6.0.0-syzkaller-02734-g0326074ff465 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/22/2022
    Workqueue: events mptcp_worker
    Call Trace:
    <TASK>
    __dump_stack lib/dump_stack.c:88 [inline]
    dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
    print_address_description mm/kasan/report.c:317 [inline]
    print_report.cold+0x2ba/0x719 mm/kasan/report.c:433
    kasan_report_invalid_free+0x81/0x190 mm/kasan/report.c:462
    ____kasan_slab_free+0x18b/0x1c0 mm/kasan/common.c:356
    kasan_slab_free include/linux/kasan.h:200 [inline]
    slab_free_hook mm/slub.c:1759 [inline]
    slab_free_freelist_hook+0x8b/0x1c0 mm/slub.c:1785
    slab_free mm/slub.c:3539 [inline]
    kfree+0xe2/0x580 mm/slub.c:4567
    tcp_disconnect+0x980/0x1e20 net/ipv4/tcp.c:3145
    __mptcp_close_ssk+0x5ca/0x7e0 net/mptcp/protocol.c:2327
    mptcp_do_fastclose net/mptcp/protocol.c:2592 [inline]
    mptcp_worker+0x78c/0xff0 net/mptcp/protocol.c:2627
    process_one_work+0x991/0x1610 kernel/workqueue.c:2289
    worker_thread+0x665/0x1080 kernel/workqueue.c:2436
    kthread+0x2e4/0x3a0 kernel/kthread.c:376
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    </TASK>
    
    Allocated by task 3671:
    kasan_save_stack+0x1e/0x40 mm/kasan/common.c:38
    kasan_set_track mm/kasan/common.c:45 [inline]
    set_alloc_info mm/kasan/common.c:437 [inline]
    ____kasan_kmalloc mm/kasan/common.c:516 [inline]
    ____kasan_kmalloc mm/kasan/common.c:475 [inline]
    __kasan_kmalloc+0xa9/0xd0 mm/kasan/common.c:525
    kmalloc_array include/linux/slab.h:640 [inline]
    kcalloc include/linux/slab.h:671 [inline]
    tcp_cdg_init+0x10d/0x170 net/ipv4/tcp_cdg.c:380
    tcp_init_congestion_control+0xab/0x550 net/ipv4/tcp_cong.c:193
    tcp_reinit_congestion_control net/ipv4/tcp_cong.c:217 [inline]
    tcp_set_congestion_control+0x96c/0xaa0 net/ipv4/tcp_cong.c:391
    do_tcp_setsockopt+0x505/0x2320 net/ipv4/tcp.c:3513
    tcp_setsockopt+0xd4/0x100 net/ipv4/tcp.c:3801
    mptcp_setsockopt+0x35f/0x2570 net/mptcp/sockopt.c:844
    __sys_setsockopt+0x2d6/0x690 net/socket.c:2252
    __do_sys_setsockopt net/socket.c:2263 [inline]
    __se_sys_setsockopt net/socket.c:2260 [inline]
    __x64_sys_setsockopt+0xba/0x150 net/socket.c:2260
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Freed by task 16:
    kasan_save_stack+0x1e/0x40 mm/kasan/common.c:38
    kasan_set_track+0x21/0x30 mm/kasan/common.c:45
    kasan_set_free_info+0x20/0x30 mm/kasan/generic.c:370
    ____kasan_slab_free mm/kasan/common.c:367 [inline]
    ____kasan_slab_free+0x166/0x1c0 mm/kasan/common.c:329
    kasan_slab_free include/linux/kasan.h:200 [inline]
    slab_free_hook mm/slub.c:1759 [inline]
    slab_free_freelist_hook+0x8b/0x1c0 mm/slub.c:1785
    slab_free mm/slub.c:3539 [inline]
    kfree+0xe2/0x580 mm/slub.c:4567
    tcp_cleanup_congestion_control+0x70/0x120 net/ipv4/tcp_cong.c:226
    tcp_v4_destroy_sock+0xdd/0x750 net/ipv4/tcp_ipv4.c:2254
    tcp_v6_destroy_sock+0x11/0x20 net/ipv6/tcp_ipv6.c:1969
    inet_csk_destroy_sock+0x196/0x440 net/ipv4/inet_connection_sock.c:1157
    tcp_done+0x23b/0x340 net/ipv4/tcp.c:4649
    tcp_rcv_state_process+0x40e7/0x4990 net/ipv4/tcp_input.c:6624
    tcp_v6_do_rcv+0x3fc/0x13c0 net/ipv6/tcp_ipv6.c:1525
    tcp_v6_rcv+0x2e8e/0x3830 net/ipv6/tcp_ipv6.c:1759
    ip6_protocol_deliver_rcu+0x2db/0x1950 net/ipv6/ip6_input.c:439
    ip6_input_finish+0x14c/0x2c0 net/ipv6/ip6_input.c:484
    NF_HOOK include/linux/netfilter.h:302 [inline]
    NF_HOOK include/linux/netfilter.h:296 [inline]
    ip6_input+0x9c/0xd0 net/ipv6/ip6_input.c:493
    dst_input include/net/dst.h:455 [inline]
    ip6_rcv_finish+0x193/0x2c0 net/ipv6/ip6_input.c:79
    ip_sabotage_in net/bridge/br_netfilter_hooks.c:874 [inline]
    ip_sabotage_in+0x1fa/0x260 net/bridge/br_netfilter_hooks.c:865
    nf_hook_entry_hookfn include/linux/netfilter.h:142 [inline]
    nf_hook_slow+0xc5/0x1f0 net/netfilter/core.c:614
    nf_hook.constprop.0+0x3ac/0x650 include/linux/netfilter.h:257
    NF_HOOK include/linux/netfilter.h:300 [inline]
    ipv6_rcv+0x9e/0x380 net/ipv6/ip6_input.c:309
    __netif_receive_skb_one_core+0x114/0x180 net/core/dev.c:5485
    __netif_receive_skb+0x1f/0x1c0 net/core/dev.c:5599
    netif_receive_skb_internal net/core/dev.c:5685 [inline]
    netif_receive_skb+0x12f/0x8d0 net/core/dev.c:5744
    NF_HOOK include/linux/netfilter.h:302 [inline]
    NF_HOOK include/linux/netfilter.h:296 [inline]
    br_pass_frame_up+0x303/0x410 net/bridge/br_input.c:68
    br_handle_frame_finish+0x909/0x1aa0 net/bridge/br_input.c:199
    br_nf_hook_thresh+0x2f8/0x3d0 net/bridge/br_netfilter_hooks.c:1041
    br_nf_pre_routing_finish_ipv6+0x695/0xef0 net/bridge/br_netfilter_ipv6.c:207
    NF_HOOK include/linux/netfilter.h:302 [inline]
    br_nf_pre_routing_ipv6+0x417/0x7c0 net/bridge/br_netfilter_ipv6.c:237
    br_nf_pre_routing+0x1496/0x1fe0 net/bridge/br_netfilter_hooks.c:507
    nf_hook_entry_hookfn include/linux/netfilter.h:142 [inline]
    nf_hook_bridge_pre net/bridge/br_input.c:255 [inline]
    br_handle_frame+0x9c9/0x12d0 net/bridge/br_input.c:399
    __netif_receive_skb_core+0x9fe/0x38f0 net/core/dev.c:5379
    __netif_receive_skb_one_core+0xae/0x180 net/core/dev.c:5483
    __netif_receive_skb+0x1f/0x1c0 net/core/dev.c:5599
    process_backlog+0x3a0/0x7c0 net/core/dev.c:5927
    __napi_poll+0xb3/0x6d0 net/core/dev.c:6494
    napi_poll net/core/dev.c:6561 [inline]
    net_rx_action+0x9c1/0xd90 net/core/dev.c:6672
    __do_softirq+0x1d0/0x9c8 kernel/softirq.c:571
    
    Fixes: 2b0a8c9eee81 ("tcp: add CDG congestion control")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e41cbf98df22d08402e65174d147cbb187fe1a33
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Oct 7 15:57:43 2022 -0700

    macvlan: enforce a consistent minimal mtu
    
    commit b64085b00044bdf3cd1c9825e9ef5b2e0feae91a upstream.
    
    macvlan should enforce a minimal mtu of 68, even at link creation.
    
    This patch avoids the current behavior (which could lead to crashes
    in ipv6 stack if the link is brought up)
    
    $ ip link add macvlan1 link eno1 mtu 8 type macvlan  # This should fail !
    $ ip link sh dev macvlan1
    5: macvlan1@eno1: <BROADCAST,MULTICAST> mtu 8 qdisc noop
        state DOWN mode DEFAULT group default qlen 1000
        link/ether 02:47:6c:24:74:82 brd ff:ff:ff:ff:ff:ff
    $ ip link set macvlan1 mtu 67
    Error: mtu less than device minimum.
    $ ip link set macvlan1 mtu 68
    $ ip link set macvlan1 mtu 8
    Error: mtu less than device minimum.
    
    Fixes: 91572088e3fd ("net: use core MTU range checking in core net infra")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5f7f6e63fed9c2ed09725d90059a28907e197e3
Author: Chen Jun <chenjun102@huawei.com>
Date:   Fri Nov 18 15:40:03 2022 -0800

    Input: i8042 - fix leaking of platform device on module removal
    
    [ Upstream commit 81cd7e8489278d28794e7b272950c3e00c344e44 ]
    
    Avoid resetting the module-wide i8042_platform_device pointer in
    i8042_probe() or i8042_remove(), so that the device can be properly
    destroyed by i8042_exit() on module unload.
    
    Fixes: 9222ba68c3f4 ("Input: i8042 - add deferred probe support")
    Signed-off-by: Chen Jun <chenjun102@huawei.com>
    Link: https://lore.kernel.org/r/20221109034148.23821-1-chenjun102@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c49cc2c059b503e962c2f13a806c105f9b757df4
Author: Li Huafei <lihuafei1@huawei.com>
Date:   Fri Nov 18 10:15:34 2022 +0900

    kprobes: Skip clearing aggrprobe's post_handler in kprobe-on-ftrace case
    
    [ Upstream commit 5dd7caf0bdc5d0bae7cf9776b4d739fb09bd5ebb ]
    
    In __unregister_kprobe_top(), if the currently unregistered probe has
    post_handler but other child probes of the aggrprobe do not have
    post_handler, the post_handler of the aggrprobe is cleared. If this is
    a ftrace-based probe, there is a problem. In later calls to
    disarm_kprobe(), we will use kprobe_ftrace_ops because post_handler is
    NULL. But we're armed with kprobe_ipmodify_ops. This triggers a WARN in
    __disarm_kprobe_ftrace() and may even cause use-after-free:
    
      Failed to disarm kprobe-ftrace at kernel_clone+0x0/0x3c0 (error -2)
      WARNING: CPU: 5 PID: 137 at kernel/kprobes.c:1135 __disarm_kprobe_ftrace.isra.21+0xcf/0xe0
      Modules linked in: testKprobe_007(-)
      CPU: 5 PID: 137 Comm: rmmod Not tainted 6.1.0-rc4-dirty #18
      [...]
      Call Trace:
       <TASK>
       __disable_kprobe+0xcd/0xe0
       __unregister_kprobe_top+0x12/0x150
       ? mutex_lock+0xe/0x30
       unregister_kprobes.part.23+0x31/0xa0
       unregister_kprobe+0x32/0x40
       __x64_sys_delete_module+0x15e/0x260
       ? do_user_addr_fault+0x2cd/0x6b0
       do_syscall_64+0x3a/0x90
       entry_SYSCALL_64_after_hwframe+0x63/0xcd
       [...]
    
    For the kprobe-on-ftrace case, we keep the post_handler setting to
    identify this aggrprobe armed with kprobe_ipmodify_ops. This way we
    can disarm it correctly.
    
    Link: https://lore.kernel.org/all/20221112070000.35299-1-lihuafei1@huawei.com/
    
    Fixes: 0bc11ed5ab60 ("kprobes: Allow kprobes coexist with livepatch")
    Reported-by: Zhao Gongyi <zhaogongyi@huawei.com>
    Suggested-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71beab7119d0afb7ea7f691b9945d73e30e031f4
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 17 08:44:21 2022 +0000

    scsi: scsi_debug: Fix possible UAF in sdebug_add_host_helper()
    
    [ Upstream commit e208a1d795a08d1ac0398c79ad9c58106531bcc5 ]
    
    If device_register() fails in sdebug_add_host_helper(), it will goto clean
    and sdbg_host will be freed, but sdbg_host->host_list will not be removed
    from sdebug_host_list, then list traversal may cause UAF. Fix it.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Link: https://lore.kernel.org/r/20221117084421.58918-1-yuancan@huawei.com
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a636772988bafab89278e7bb3420d8e8eacfe912
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 15 09:50:42 2022 +0800

    scsi: target: tcm_loop: Fix possible name leak in tcm_loop_setup_hba_bus()
    
    [ Upstream commit bc68e428d4963af0201e92159629ab96948f0893 ]
    
    If device_register() fails in tcm_loop_setup_hba_bus(), the name allocated
    by dev_set_name() need be freed. As comment of device_register() says, it
    should use put_device() to give up the reference in the error path. So fix
    this by calling put_device(), then the name can be freed in kobject_cleanup().
    The 'tl_hba' will be freed in tcm_loop_release_adapter(), so it don't need
    goto error label in this case.
    
    Fixes: 3703b2c5d041 ("[SCSI] tcm_loop: Add multi-fabric Linux/SCSI LLD fabric module")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221115015042.3652261-1-yangyingliang@huawei.com
    Reviewed-by: Mike Christie <michael.chritie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb7893c85ea88937df73814714a1b8ed1abeb9ac
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Tue Nov 15 22:24:00 2022 +0800

    net: use struct_group to copy ip/ipv6 header addresses
    
    [ Upstream commit 58e0be1ef6118c5352b56a4d06e974c5599993a5 ]
    
    kernel test robot reported warnings when build bonding module with
    make W=1 O=build_dir ARCH=x86_64 SHELL=/bin/bash drivers/net/bonding/:
    
                     from ../drivers/net/bonding/bond_main.c:35:
    In function ‘fortify_memcpy_chk’,
        inlined from ‘iph_to_flow_copy_v4addrs’ at ../include/net/ip.h:566:2,
        inlined from ‘bond_flow_ip’ at ../drivers/net/bonding/bond_main.c:3984:3:
    ../include/linux/fortify-string.h:413:25: warning: call to ‘__read_overflow2_field’ declared with attribute warning: detected read beyond size of f
    ield (2nd parameter); maybe use struct_group()? [-Wattribute-warning]
      413 |                         __read_overflow2_field(q_size_field, size);
          |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    In function ‘fortify_memcpy_chk’,
        inlined from ‘iph_to_flow_copy_v6addrs’ at ../include/net/ipv6.h:900:2,
        inlined from ‘bond_flow_ip’ at ../drivers/net/bonding/bond_main.c:3994:3:
    ../include/linux/fortify-string.h:413:25: warning: call to ‘__read_overflow2_field’ declared with attribute warning: detected read beyond size of f
    ield (2nd parameter); maybe use struct_group()? [-Wattribute-warning]
      413 |                         __read_overflow2_field(q_size_field, size);
          |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    This is because we try to copy the whole ip/ip6 address to the flow_key,
    while we only point the to ip/ip6 saddr. Note that since these are UAPI
    headers, __struct_group() is used to avoid the compiler warnings.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: c3f8324188fa ("net: Add full IPv6 addresses to flow_keys")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Link: https://lore.kernel.org/r/20221115142400.1204786-1-liuhangbin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b8c0c88f414ee5d47c43309a4b83397a028b193
Author: Aashish Sharma <shraash@google.com>
Date:   Mon Nov 7 21:35:56 2022 +0530

    tracing: Fix warning on variable 'struct trace_array'
    
    [ Upstream commit bedf06833b1f63c2627bd5634602e05592129d7a ]
    
    Move the declaration of 'struct trace_array' out of #ifdef
    CONFIG_TRACING block, to fix the following warning when CONFIG_TRACING
    is not set:
    
    >> include/linux/trace.h:63:45: warning: 'struct trace_array' declared
    inside parameter list will not be visible outside of this definition or
    declaration
    
    Link: https://lkml.kernel.org/r/20221107160556.2139463-1-shraash@google.com
    
    Fixes: 1a77dd1c2bb5 ("scsi: tracing: Fix compile error in trace_array calls when TRACING is disabled")
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Cc: Arun Easi <aeasi@marvell.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Aashish Sharma <shraash@google.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73cf0ff9a39369708c0d99d02ab378212d9c594d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Fri Oct 21 12:30:13 2022 -0400

    ring-buffer: Include dropped pages in counting dirty patches
    
    [ Upstream commit 31029a8b2c7e656a0289194ef16415050ae4c4ac ]
    
    The function ring_buffer_nr_dirty_pages() was created to find out how many
    pages are filled in the ring buffer. There's two running counters. One is
    incremented whenever a new page is touched (pages_touched) and the other
    is whenever a page is read (pages_read). The dirty count is the number
    touched minus the number read. This is used to determine if a blocked task
    should be woken up if the percentage of the ring buffer it is waiting for
    is hit.
    
    The problem is that it does not take into account dropped pages (when the
    new writes overwrite pages that were not read). And then the dirty pages
    will always be greater than the percentage.
    
    This makes the "buffer_percent" file inaccurate, as the number of dirty
    pages end up always being larger than the percentage, event when it's not
    and this causes user space to be woken up more than it wants to be.
    
    Add a new counter to keep track of lost pages, and include that in the
    accounting of dirty pages so that it is actually accurate.
    
    Link: https://lkml.kernel.org/r/20221021123013.55fb6055@gandalf.local.home
    
    Fixes: 2c2b0a78b3739 ("ring-buffer: Add percentage of ring buffer full to wake up reader")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35c60b4e8ca76712dd03bafe2598e31578248916
Author: Marco Elver <elver@google.com>
Date:   Mon Oct 31 10:35:13 2022 +0100

    perf: Improve missing SIGTRAP checking
    
    [ Upstream commit bb88f9695460bec25aa30ba9072595025cf6c8af ]
    
    To catch missing SIGTRAP we employ a WARN in __perf_event_overflow(),
    which fires if pending_sigtrap was already set: returning to user space
    without consuming pending_sigtrap, and then having the event fire again
    would re-enter the kernel and trigger the WARN.
    
    This, however, seemed to miss the case where some events not associated
    with progress in the user space task can fire and the interrupt handler
    runs before the IRQ work meant to consume pending_sigtrap (and generate
    the SIGTRAP).
    
    syzbot gifted us this stack trace:
    
     | WARNING: CPU: 0 PID: 3607 at kernel/events/core.c:9313 __perf_event_overflow
     | Modules linked in:
     | CPU: 0 PID: 3607 Comm: syz-executor100 Not tainted 6.1.0-rc2-syzkaller-00073-g88619e77b33d #0
     | Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/11/2022
     | RIP: 0010:__perf_event_overflow+0x498/0x540 kernel/events/core.c:9313
     | <...>
     | Call Trace:
     |  <TASK>
     |  perf_swevent_hrtimer+0x34f/0x3c0 kernel/events/core.c:10729
     |  __run_hrtimer kernel/time/hrtimer.c:1685 [inline]
     |  __hrtimer_run_queues+0x1c6/0xfb0 kernel/time/hrtimer.c:1749
     |  hrtimer_interrupt+0x31c/0x790 kernel/time/hrtimer.c:1811
     |  local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1096 [inline]
     |  __sysvec_apic_timer_interrupt+0x17c/0x640 arch/x86/kernel/apic/apic.c:1113
     |  sysvec_apic_timer_interrupt+0x40/0xc0 arch/x86/kernel/apic/apic.c:1107
     |  asm_sysvec_apic_timer_interrupt+0x16/0x20 arch/x86/include/asm/idtentry.h:649
     | <...>
     |  </TASK>
    
    In this case, syzbot produced a program with event type
    PERF_TYPE_SOFTWARE and config PERF_COUNT_SW_CPU_CLOCK. The hrtimer
    manages to fire again before the IRQ work got a chance to run, all while
    never having returned to user space.
    
    Improve the WARN to check for real progress in user space: approximate
    this by storing a 32-bit hash of the current IP into pending_sigtrap,
    and if an event fires while pending_sigtrap still matches the previous
    IP, we assume no progress (false negatives are possible given we could
    return to user space and trigger again on the same IP).
    
    Fixes: ca6c21327c6a ("perf: Fix missing SIGTRAPs")
    Reported-by: syzbot+b8ded3e2e2c6adde4990@syzkaller.appspotmail.com
    Signed-off-by: Marco Elver <elver@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20221031093513.3032814-1-elver@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ac6276864deb4c6593469deadc7ecec217640a3
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue Nov 8 14:19:51 2022 +0200

    serial: 8250_lpss: Use 16B DMA burst with Elkhart Lake
    
    commit 7090abd6ad0610a144523ce4ffcb8560909bf2a8 upstream.
    
    Configure DMA to use 16B burst size with Elkhart Lake. This makes the
    bus use more efficient and works around an issue which occurs with the
    previously used 1B.
    
    The fix was initially developed by Srikanth Thokala and Aman Kumar.
    This together with the previous config change is the cleaned up version
    of the original fix.
    
    Fixes: 0a9410b981e9 ("serial: 8250_lpss: Enable DMA on Intel Elkhart Lake")
    Cc: <stable@vger.kernel.org> # serial: 8250_lpss: Configure DMA also w/o DMA filter
    Reported-by: Wentong Wu <wentong.wu@intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221108121952.5497-4-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1a27b2aad936746e6ef64c8a24bcb6dce6f926a
Author: Keith Busch <kbusch@kernel.org>
Date:   Thu Sep 22 08:13:47 2022 -0700

    nvme: ensure subsystem reset is single threaded
    
    commit 1e866afd4bcdd01a70a5eddb4371158d3035ce03 upstream.
    
    The subsystem reset writes to a register, so we have to ensure the
    device state is capable of handling that otherwise the driver may access
    unmapped registers. Use the state machine to ensure the subsystem reset
    doesn't try to write registers on a device already undergoing this type
    of reset.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=214771
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bccece3c3331424b097daeb022c102e04a634b39
Author: Keith Busch <kbusch@kernel.org>
Date:   Thu Sep 22 07:54:06 2022 -0700

    nvme: restrict management ioctls to admin
    
    commit 23e085b2dead13b51fe86d27069895b740f749c0 upstream.
    
    The passthrough commands already have this restriction, but the other
    operations do not. Require the same capabilities for all users as all of
    these operations, which include resets and rescans, can be disruptive.
    
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cddb0d96b9cfe93852dfefca9fd67be149c379d
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Sat Nov 12 17:15:08 2022 +0200

    perf/x86/intel/pt: Fix sampling using single range output
    
    commit ce0d998be9274dd3a3d971cbeaa6fe28fd2c3062 upstream.
    
    Deal with errata TGL052, ADL037 and RPL017 "Trace May Contain Incorrect
    Data When Configured With Single Range Output Larger Than 4KB" by
    disabling single range output whenever larger than 4KB.
    
    Fixes: 670638477aed ("perf/x86/intel/pt: Opportunistically use single range output mode")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221112151508.13768-1-adrian.hunter@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e2f33c598370bcf828bab4d667d1d38bcd3c57d
Author: Alexander Potapenko <glider@google.com>
Date:   Fri Nov 4 18:58:49 2022 +0100

    misc/vmw_vmci: fix an infoleak in vmci_host_do_receive_datagram()
    
    commit e5b0d06d9b10f5f43101bd6598b076c347f9295f upstream.
    
    `struct vmci_event_qp` allocated by qp_notify_peer() contains padding,
    which may carry uninitialized data to the userspace, as observed by
    KMSAN:
    
      BUG: KMSAN: kernel-infoleak in instrument_copy_to_user ./include/linux/instrumented.h:121
       instrument_copy_to_user ./include/linux/instrumented.h:121
       _copy_to_user+0x5f/0xb0 lib/usercopy.c:33
       copy_to_user ./include/linux/uaccess.h:169
       vmci_host_do_receive_datagram drivers/misc/vmw_vmci/vmci_host.c:431
       vmci_host_unlocked_ioctl+0x33d/0x43d0 drivers/misc/vmw_vmci/vmci_host.c:925
       vfs_ioctl fs/ioctl.c:51
      ...
    
      Uninit was stored to memory at:
       kmemdup+0x74/0xb0 mm/util.c:131
       dg_dispatch_as_host drivers/misc/vmw_vmci/vmci_datagram.c:271
       vmci_datagram_dispatch+0x4f8/0xfc0 drivers/misc/vmw_vmci/vmci_datagram.c:339
       qp_notify_peer+0x19a/0x290 drivers/misc/vmw_vmci/vmci_queue_pair.c:1479
       qp_broker_attach drivers/misc/vmw_vmci/vmci_queue_pair.c:1662
       qp_broker_alloc+0x2977/0x2f30 drivers/misc/vmw_vmci/vmci_queue_pair.c:1750
       vmci_qp_broker_alloc+0x96/0xd0 drivers/misc/vmw_vmci/vmci_queue_pair.c:1940
       vmci_host_do_alloc_queuepair drivers/misc/vmw_vmci/vmci_host.c:488
       vmci_host_unlocked_ioctl+0x24fd/0x43d0 drivers/misc/vmw_vmci/vmci_host.c:927
      ...
    
      Local variable ev created at:
       qp_notify_peer+0x54/0x290 drivers/misc/vmw_vmci/vmci_queue_pair.c:1456
       qp_broker_attach drivers/misc/vmw_vmci/vmci_queue_pair.c:1662
       qp_broker_alloc+0x2977/0x2f30 drivers/misc/vmw_vmci/vmci_queue_pair.c:1750
    
      Bytes 28-31 of 48 are uninitialized
      Memory access of size 48 starts at ffff888035155e00
      Data copied to user address 0000000020000100
    
    Use memset() to prevent the infoleaks.
    
    Also speculatively fix qp_notify_peer_local(), which may suffer from the
    same problem.
    
    Reported-by: syzbot+39be4da489ed2493ba25@syzkaller.appspotmail.com
    Cc: stable <stable@kernel.org>
    Fixes: 06164d2b72aa ("VMCI: queue pairs implementation.")
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Link: https://lore.kernel.org/r/20221104175849.2782567-1-glider@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a72a46cb01dbb8da3dc130086dfa23231f1458c
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Tue Oct 11 11:14:17 2022 -0600

    docs: update mediator contact information in CoC doc
    
    commit 5fddf8962b429b8303c4a654291ecb6e61a7d747 upstream.
    
    Update mediator contact information in CoC interpretation document.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20221011171417.34286-1-skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a99a547658e5d451f01ed307426286716b6f01bf
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Mon Nov 14 16:31:00 2022 +0800

    mmc: sdhci-pci: Fix possible memory leak caused by missing pci_dev_put()
    
    commit 222cfa0118aa68687ace74aab8fdf77ce8fbd7e6 upstream.
    
    pci_get_device() will increase the reference count for the returned
    pci_dev. We need to use pci_dev_put() to decrease the reference count
    before amd_probe() returns. There is no problem for the 'smbus_dev ==
    NULL' branch because pci_dev_put() can also handle the NULL input
    parameter case.
    
    Fixes: 659c9bc114a8 ("mmc: sdhci-pci: Build o2micro support in the same module")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221114083100.149200-1-wangxiongfeng2@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a1b6f7839d3571d37ce344abdf60283298f6c83
Author: Chevron Li <chevron.li@bayhubtech.com>
Date:   Fri Nov 4 02:55:12 2022 -0700

    mmc: sdhci-pci-o2micro: fix card detect fail issue caused by CD# debounce timeout
    
    commit 096cc0cddf58232bded309336961784f1d1c85f8 upstream.
    
    The SD card is recognized failed sometimes when resume from suspend.
    Because CD# debounce time too long then card present report wrong.
    Finally, card is recognized failed.
    
    Signed-off-by: Chevron Li <chevron.li@bayhubtech.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221104095512.4068-1-chevron.li@bayhubtech.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd285d421563ca60b10ab46a5b2fbb8c249f63b3
Author: Yann Gautier <yann.gautier@foss.st.com>
Date:   Fri Oct 28 09:37:40 2022 +0200

    mmc: core: properly select voltage range without power cycle
    
    commit 39a72dbfe188291b156dd6523511e3d5761ce775 upstream.
    
    In mmc_select_voltage(), if there is no full power cycle, the voltage
    range selected at the end of the function will be on a single range
    (e.g. 3.3V/3.4V). To keep a range around the selected voltage (3.2V/3.4V),
    the mask shift should be reduced by 1.
    
    This issue was triggered by using a specific SD-card (Verbatim Premium
    16GB UHS-1) on an STM32MP157C-DK2 board. This board cannot do UHS modes
    and there is no power cycle. And the card was failing to switch to
    high-speed mode. When adding the range 3.2V/3.3V for this card with the
    proposed shift change, the card can switch to high-speed mode.
    
    Fixes: ce69d37b7d8f ("mmc: core: Prevent violation of specs while initializing cards")
    Signed-off-by: Yann Gautier <yann.gautier@foss.st.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221028073740.7259-1-yann.gautier@foss.st.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a9bae5f1b531c7337ea8e08b9f1689e6bc1c0a8
Author: Brian Norris <briannorris@chromium.org>
Date:   Wed Oct 19 18:10:53 2022 -0700

    firmware: coreboot: Register bus in module init
    
    commit 65946690ed8d972fdb91a74ee75ac0f0f0d68321 upstream.
    
    The coreboot_table driver registers a coreboot bus while probing a
    "coreboot_table" device representing the coreboot table memory region.
    Probing this device (i.e., registering the bus) is a dependency for the
    module_init() functions of any driver for this bus (e.g.,
    memconsole-coreboot.c / memconsole_driver_init()).
    
    With synchronous probe, this dependency works OK, as the link order in
    the Makefile ensures coreboot_table_driver_init() (and thus,
    coreboot_table_probe()) completes before a coreboot device driver tries
    to add itself to the bus.
    
    With asynchronous probe, however, coreboot_table_probe() may race with
    memconsole_driver_init(), and so we're liable to hit one of these two:
    
    1. coreboot_driver_register() eventually hits "[...] the bus was not
       initialized.", and the memconsole driver fails to register; or
    2. coreboot_driver_register() gets past #1, but still races with
       bus_register() and hits some other undefined/crashing behavior (e.g.,
       in driver_find() [1])
    
    We can resolve this by registering the bus in our initcall, and only
    deferring "device" work (scanning the coreboot memory region and
    creating sub-devices) to probe().
    
    [1] Example failure, using 'driver_async_probe=*' kernel command line:
    
    [    0.114217] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000010
    ...
    [    0.114307] CPU: 1 PID: 1 Comm: swapper/0 Not tainted 6.1.0-rc1 #63
    [    0.114316] Hardware name: Google Scarlet (DT)
    ...
    [    0.114488] Call trace:
    [    0.114494]  _raw_spin_lock+0x34/0x60
    [    0.114502]  kset_find_obj+0x28/0x84
    [    0.114511]  driver_find+0x30/0x50
    [    0.114520]  driver_register+0x64/0x10c
    [    0.114528]  coreboot_driver_register+0x30/0x3c
    [    0.114540]  memconsole_driver_init+0x24/0x30
    [    0.114550]  do_one_initcall+0x154/0x2e0
    [    0.114560]  do_initcall_level+0x134/0x160
    [    0.114571]  do_initcalls+0x60/0xa0
    [    0.114579]  do_basic_setup+0x28/0x34
    [    0.114588]  kernel_init_freeable+0xf8/0x150
    [    0.114596]  kernel_init+0x2c/0x12c
    [    0.114607]  ret_from_fork+0x10/0x20
    [    0.114624] Code: 5280002b 1100054a b900092a f9800011 (885ffc01)
    [    0.114631] ---[ end trace 0000000000000000 ]---
    
    Fixes: b81e3140e412 ("firmware: coreboot: Make bus registration symmetric")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20221019180934.1.If29e167d8a4771b0bf4a39c89c6946ed764817b9@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 052d0e79efe57f115c92e1e815d8687c79efc624
Author: Tina Zhang <tina.zhang@intel.com>
Date:   Wed Nov 16 13:15:44 2022 +0800

    iommu/vt-d: Set SRE bit only when hardware has SRS cap
    
    commit 7fc961cf7ffcb130c4e93ee9a5628134f9de700a upstream.
    
    SRS cap is the hardware cap telling if the hardware IOMMU can support
    requests seeking supervisor privilege or not. SRE bit in scalable-mode
    PASID table entry is treated as Reserved(0) for implementation not
    supporting SRS cap.
    
    Checking SRS cap before setting SRE bit can avoid the non-recoverable
    fault of "Non-zero reserved field set in PASID Table Entry" caused by
    setting SRE bit while there is no SRS cap support. The fault messages
    look like below:
    
     DMAR: DRHD: handling fault status reg 2
     DMAR: [DMA Read NO_PASID] Request device [00:0d.0] fault addr 0x1154e1000
           [fault reason 0x5a]
           SM: Non-zero reserved field set in PASID Table Entry
    
    Fixes: 6f7db75e1c46 ("iommu/vt-d: Add second level page table interface")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tina Zhang <tina.zhang@intel.com>
    Link: https://lore.kernel.org/r/20221115070346.1112273-1-tina.zhang@intel.com
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20221116051544.26540-3-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c31a792a825a68ba59355c5a5af6f5801f716650
Author: Tina Zhang <tina.zhang@intel.com>
Date:   Wed Nov 16 13:15:43 2022 +0800

    iommu/vt-d: Preset Access bit for IOVA in FL non-leaf paging entries
    
    commit 242b0aaeabbe2efbef1b9d42a8e56627e800964c upstream.
    
    The A/D bits are preseted for IOVA over first level(FL) usage for both
    kernel DMA (i.e, domain typs is IOMMU_DOMAIN_DMA) and user space DMA
    usage (i.e., domain type is IOMMU_DOMAIN_UNMANAGED).
    
    Presetting A bit in FL requires to preset the bit in every related paging
    entries, including the non-leaf ones. Otherwise, hardware may treat this
    as an error. For example, in a case of ECAP_REG.SMPWC==0, DMA faults might
    occur with below DMAR fault messages (wrapped for line length) dumped.
    
     DMAR: DRHD: handling fault status reg 2
     DMAR: [DMA Read NO_PASID] Request device [aa:00.0] fault addr 0x10c3a6000
        [fault reason 0x90]
        SM: A/D bit update needed in first-level entry when set up in no snoop
    
    Fixes: 289b3b005cb9 ("iommu/vt-d: Preset A/D bits for user space DMA usage")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tina Zhang <tina.zhang@intel.com>
    Link: https://lore.kernel.org/r/20221113010324.1094483-1-tina.zhang@intel.com
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20221116051544.26540-2-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11edbdee4399401f533adda9bffe94567aa08b96
Author: Benjamin Block <bblock@linux.ibm.com>
Date:   Wed Nov 16 11:50:37 2022 +0100

    scsi: zfcp: Fix double free of FSF request when qdio send fails
    
    commit 0954256e970ecf371b03a6c9af2cf91b9c4085ff upstream.
    
    We used to use the wrong type of integer in 'zfcp_fsf_req_send()' to cache
    the FSF request ID when sending a new FSF request. This is used in case the
    sending fails and we need to remove the request from our internal hash
    table again (so we don't keep an invalid reference and use it when we free
    the request again).
    
    In 'zfcp_fsf_req_send()' we used to cache the ID as 'int' (signed and 32
    bit wide), but the rest of the zfcp code (and the firmware specification)
    handles the ID as 'unsigned long'/'u64' (unsigned and 64 bit wide [s390x
    ELF ABI]).  For one this has the obvious problem that when the ID grows
    past 32 bit (this can happen reasonably fast) it is truncated to 32 bit
    when storing it in the cache variable and so doesn't match the original ID
    anymore.  The second less obvious problem is that even when the original ID
    has not yet grown past 32 bit, as soon as the 32nd bit is set in the
    original ID (0x80000000 = 2'147'483'648) we will have a mismatch when we
    cast it back to 'unsigned long'. As the cached variable is of a signed
    type, the compiler will choose a sign-extending instruction to load the 32
    bit variable into a 64 bit register (e.g.: 'lgf %r11,188(%r15)'). So once
    we pass the cached variable into 'zfcp_reqlist_find_rm()' to remove the
    request again all the leading zeros will be flipped to ones to extend the
    sign and won't match the original ID anymore (this has been observed in
    practice).
    
    If we can't successfully remove the request from the hash table again after
    'zfcp_qdio_send()' fails (this happens regularly when zfcp cannot notify
    the adapter about new work because the adapter is already gone during
    e.g. a ChpID toggle) we will end up with a double free.  We unconditionally
    free the request in the calling function when 'zfcp_fsf_req_send()' fails,
    but because the request is still in the hash table we end up with a stale
    memory reference, and once the zfcp adapter is either reset during recovery
    or shutdown we end up freeing the same memory twice.
    
    The resulting stack traces vary depending on the kernel and have no direct
    correlation to the place where the bug occurs. Here are three examples that
    have been seen in practice:
    
      list_del corruption. next->prev should be 00000001b9d13800, but was 00000000dead4ead. (next=00000001bd131a00)
      ------------[ cut here ]------------
      kernel BUG at lib/list_debug.c:62!
      monitor event: 0040 ilc:2 [#1] PREEMPT SMP
      Modules linked in: ...
      CPU: 9 PID: 1617 Comm: zfcperp0.0.1740 Kdump: loaded
      Hardware name: ...
      Krnl PSW : 0704d00180000000 00000003cbeea1f8 (__list_del_entry_valid+0x98/0x140)
                 R:0 T:1 IO:1 EX:1 Key:0 M:1 W:0 P:0 AS:3 CC:1 PM:0 RI:0 EA:3
      Krnl GPRS: 00000000916d12f1 0000000080000000 000000000000006d 00000003cb665cd6
                 0000000000000001 0000000000000000 0000000000000000 00000000d28d21e8
                 00000000d3844000 00000380099efd28 00000001bd131a00 00000001b9d13800
                 00000000d3290100 0000000000000000 00000003cbeea1f4 00000380099efc70
      Krnl Code: 00000003cbeea1e8: c020004f68a7        larl    %r2,00000003cc8d7336
                 00000003cbeea1ee: c0e50027fd65        brasl   %r14,00000003cc3e9cb8
                #00000003cbeea1f4: af000000            mc      0,0
                >00000003cbeea1f8: c02000920440        larl    %r2,00000003cd12aa78
                 00000003cbeea1fe: c0e500289c25        brasl   %r14,00000003cc3fda48
                 00000003cbeea204: b9040043            lgr     %r4,%r3
                 00000003cbeea208: b9040051            lgr     %r5,%r1
                 00000003cbeea20c: b9040032            lgr     %r3,%r2
      Call Trace:
       [<00000003cbeea1f8>] __list_del_entry_valid+0x98/0x140
      ([<00000003cbeea1f4>] __list_del_entry_valid+0x94/0x140)
       [<000003ff7ff502fe>] zfcp_fsf_req_dismiss_all+0xde/0x150 [zfcp]
       [<000003ff7ff49cd0>] zfcp_erp_strategy_do_action+0x160/0x280 [zfcp]
       [<000003ff7ff4a22e>] zfcp_erp_strategy+0x21e/0xca0 [zfcp]
       [<000003ff7ff4ad34>] zfcp_erp_thread+0x84/0x1a0 [zfcp]
       [<00000003cb5eece8>] kthread+0x138/0x150
       [<00000003cb557f3c>] __ret_from_fork+0x3c/0x60
       [<00000003cc4172ea>] ret_from_fork+0xa/0x40
      INFO: lockdep is turned off.
      Last Breaking-Event-Address:
       [<00000003cc3e9d04>] _printk+0x4c/0x58
      Kernel panic - not syncing: Fatal exception: panic_on_oops
    
    or:
    
      Unable to handle kernel pointer dereference in virtual kernel address space
      Failing address: 6b6b6b6b6b6b6000 TEID: 6b6b6b6b6b6b6803
      Fault in home space mode while using kernel ASCE.
      AS:0000000063b10007 R3:0000000000000024
      Oops: 0038 ilc:3 [#1] SMP
      Modules linked in: ...
      CPU: 10 PID: 0 Comm: swapper/10 Kdump: loaded
      Hardware name: ...
      Krnl PSW : 0404d00180000000 000003ff7febaf8e (zfcp_fsf_reqid_check+0x86/0x158 [zfcp])
                 R:0 T:1 IO:0 EX:0 Key:0 M:1 W:0 P:0 AS:3 CC:1 PM:0 RI:0 EA:3
      Krnl GPRS: 5a6f1cfa89c49ac3 00000000aff2c4c8 6b6b6b6b6b6b6b6b 00000000000002a8
                 0000000000000000 0000000000000055 0000000000000000 00000000a8515800
                 0700000000000000 00000000a6e14500 00000000aff2c000 000000008003c44c
                 000000008093c700 0000000000000010 00000380009ebba8 00000380009ebb48
      Krnl Code: 000003ff7febaf7e: a7f4003d            brc     15,000003ff7febaff8
                 000003ff7febaf82: e32020000004        lg      %r2,0(%r2)
                #000003ff7febaf88: ec2100388064        cgrj    %r2,%r1,8,000003ff7febaff8
                >000003ff7febaf8e: e3b020100020        cg      %r11,16(%r2)
                 000003ff7febaf94: a774fff7            brc     7,000003ff7febaf82
                 000003ff7febaf98: ec280030007c        cgij    %r2,0,8,000003ff7febaff8
                 000003ff7febaf9e: e31020080004        lg      %r1,8(%r2)
                 000003ff7febafa4: e33020000004        lg      %r3,0(%r2)
      Call Trace:
       [<000003ff7febaf8e>] zfcp_fsf_reqid_check+0x86/0x158 [zfcp]
       [<000003ff7febbdbc>] zfcp_qdio_int_resp+0x6c/0x170 [zfcp]
       [<000003ff7febbf90>] zfcp_qdio_irq_tasklet+0xd0/0x108 [zfcp]
       [<0000000061d90a04>] tasklet_action_common.constprop.0+0xdc/0x128
       [<000000006292f300>] __do_softirq+0x130/0x3c0
       [<0000000061d906c6>] irq_exit_rcu+0xfe/0x118
       [<000000006291e818>] do_io_irq+0xc8/0x168
       [<000000006292d516>] io_int_handler+0xd6/0x110
       [<000000006292d596>] psw_idle_exit+0x0/0xa
      ([<0000000061d3be50>] arch_cpu_idle+0x40/0xd0)
       [<000000006292ceea>] default_idle_call+0x52/0xf8
       [<0000000061de4fa4>] do_idle+0xd4/0x168
       [<0000000061de51fe>] cpu_startup_entry+0x36/0x40
       [<0000000061d4faac>] smp_start_secondary+0x12c/0x138
       [<000000006292d88e>] restart_int_handler+0x6e/0x90
      Last Breaking-Event-Address:
       [<000003ff7febaf94>] zfcp_fsf_reqid_check+0x8c/0x158 [zfcp]
      Kernel panic - not syncing: Fatal exception in interrupt
    
    or:
    
      Unable to handle kernel pointer dereference in virtual kernel address space
      Failing address: 523b05d3ae76a000 TEID: 523b05d3ae76a803
      Fault in home space mode while using kernel ASCE.
      AS:0000000077c40007 R3:0000000000000024
      Oops: 0038 ilc:3 [#1] SMP
      Modules linked in: ...
      CPU: 3 PID: 453 Comm: kworker/3:1H Kdump: loaded
      Hardware name: ...
      Workqueue: kblockd blk_mq_run_work_fn
      Krnl PSW : 0404d00180000000 0000000076fc0312 (__kmalloc+0xd2/0x398)
                 R:0 T:1 IO:0 EX:0 Key:0 M:1 W:0 P:0 AS:3 CC:1 PM:0 RI:0 EA:3
      Krnl GPRS: ffffffffffffffff 523b05d3ae76abf6 0000000000000000 0000000000092a20
                 0000000000000002 00000007e49b5cc0 00000007eda8f000 0000000000092a20
                 00000007eda8f000 00000003b02856b9 00000000000000a8 523b05d3ae76abf6
                 00000007dd662000 00000007eda8f000 0000000076fc02b2 000003e0037637a0
      Krnl Code: 0000000076fc0302: c004000000d4     brcl    0,76fc04aa
                 0000000076fc0308: b904001b         lgr     %r1,%r11
                #0000000076fc030c: e3106020001a     algf    %r1,32(%r6)
                >0000000076fc0312: e31010000082     xg      %r1,0(%r1)
                 0000000076fc0318: b9040001         lgr     %r0,%r1
                 0000000076fc031c: e30061700082     xg      %r0,368(%r6)
                 0000000076fc0322: ec59000100d9     aghik   %r5,%r9,1
                 0000000076fc0328: e34003b80004     lg      %r4,952
      Call Trace:
       [<0000000076fc0312>] __kmalloc+0xd2/0x398
       [<0000000076f318f2>] mempool_alloc+0x72/0x1f8
       [<000003ff8027c5f8>] zfcp_fsf_req_create.isra.7+0x40/0x268 [zfcp]
       [<000003ff8027f1bc>] zfcp_fsf_fcp_cmnd+0xac/0x3f0 [zfcp]
       [<000003ff80280f1a>] zfcp_scsi_queuecommand+0x122/0x1d0 [zfcp]
       [<000003ff800b4218>] scsi_queue_rq+0x778/0xa10 [scsi_mod]
       [<00000000771782a0>] __blk_mq_try_issue_directly+0x130/0x208
       [<000000007717a124>] blk_mq_request_issue_directly+0x4c/0xa8
       [<000003ff801302e2>] dm_mq_queue_rq+0x2ea/0x468 [dm_mod]
       [<0000000077178c12>] blk_mq_dispatch_rq_list+0x33a/0x818
       [<000000007717f064>] __blk_mq_do_dispatch_sched+0x284/0x2f0
       [<000000007717f44c>] __blk_mq_sched_dispatch_requests+0x1c4/0x218
       [<000000007717fa7a>] blk_mq_sched_dispatch_requests+0x52/0x90
       [<0000000077176d74>] __blk_mq_run_hw_queue+0x9c/0xc0
       [<0000000076da6d74>] process_one_work+0x274/0x4d0
       [<0000000076da7018>] worker_thread+0x48/0x560
       [<0000000076daef18>] kthread+0x140/0x160
       [<000000007751d144>] ret_from_fork+0x28/0x30
      Last Breaking-Event-Address:
       [<0000000076fc0474>] __kmalloc+0x234/0x398
      Kernel panic - not syncing: Fatal exception: panic_on_oops
    
    To fix this, simply change the type of the cache variable to 'unsigned
    long', like the rest of zfcp and also the argument for
    'zfcp_reqlist_find_rm()'. This prevents truncation and wrong sign extension
    and so can successfully remove the request from the hash table.
    
    Fixes: e60a6d69f1f8 ("[SCSI] zfcp: Remove function zfcp_reqlist_find_safe")
    Cc: <stable@vger.kernel.org> #v2.6.34+
    Signed-off-by: Benjamin Block <bblock@linux.ibm.com>
    Link: https://lore.kernel.org/r/979f6e6019d15f91ba56182f1aaf68d61bf37fc6.1668595505.git.bblock@linux.ibm.com
    Reviewed-by: Steffen Maier <maier@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdf87b5b30878df37572fdc356e17766407112b3
Author: Aminuddin Jamaluddin <aminuddin.jamaluddin@intel.com>
Date:   Mon Nov 14 14:53:02 2022 +0800

    net: phy: marvell: add sleep time after enabling the loopback bit
    
    commit 18c532e44939caa17f1fa380f7ac50dbc0718dbb upstream.
    
    Sleep time is added to ensure the phy to be ready after loopback
    bit was set. This to prevent the phy loopback test from failing.
    
    Fixes: 020a45aff119 ("net: phy: marvell: add Marvell specific PHY loopback")
    Cc: <stable@vger.kernel.org> # 5.15.x
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Signed-off-by: Aminuddin Jamaluddin <aminuddin.jamaluddin@intel.com>
    Link: https://lore.kernel.org/r/20221114065302.10625-1-aminuddin.jamaluddin@intel.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9648d760edf4320e23e2b819037501fb44cba291
Author: Alban Crequy <albancrequy@linux.microsoft.com>
Date:   Thu Nov 10 09:56:13 2022 +0100

    maccess: Fix writing offset in case of fault in strncpy_from_kernel_nofault()
    
    commit 8678ea06852cd1f819b870c773d43df888d15d46 upstream.
    
    If a page fault occurs while copying the first byte, this function resets one
    byte before dst.
    As a consequence, an address could be modified and leaded to kernel crashes if
    case the modified address was accessed later.
    
    Fixes: b58294ead14c ("maccess: allow architectures to provide kernel probing directly")
    Signed-off-by: Alban Crequy <albancrequy@linux.microsoft.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Tested-by: Francis Laniel <flaniel@linux.microsoft.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: <stable@vger.kernel.org> [5.8]
    Link: https://lore.kernel.org/bpf/20221110085614.111213-2-albancrequy@linux.microsoft.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdd57c20d4408cac3c3c535c120d244e083406c9
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Nov 7 10:21:40 2022 -0800

    Input: iforce - invert valid length check when fetching device IDs
    
    commit b8ebf250997c5fb253582f42bfe98673801ebebd upstream.
    
    syzbot is reporting uninitialized value at iforce_init_device() [1], for
    commit 6ac0aec6b0a6 ("Input: iforce - allow callers supply data buffer
    when fetching device IDs") is checking that valid length is shorter than
    bytes to read. Since iforce_get_id_packet() stores valid length when
    returning 0, the caller needs to check that valid length is longer than or
    equals to bytes to read.
    
    Reported-by: syzbot <syzbot+4dd880c1184280378821@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: 6ac0aec6b0a6 ("Input: iforce - allow callers supply data buffer when fetching device IDs")
    Link: https://lore.kernel.org/r/531fb432-7396-ad37-ecba-3e42e7f56d5c@I-love.SAKURA.ne.jp
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cafb719bed52a591539e247cfd5620759fd5b2a
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue Nov 8 14:19:50 2022 +0200

    serial: 8250_lpss: Configure DMA also w/o DMA filter
    
    commit 1bfcbe5805d0cfc83c3544dcd01e0a282c1f6790 upstream.
    
    If the platform doesn't use DMA device filter (as is the case with
    Elkhart Lake), whole lpss8250_dma_setup() setup is skipped. This
    results in skipping also *_maxburst setup which is undesirable.
    Refactor lpss8250_dma_setup() to configure DMA even if filter is not
    setup.
    
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221108121952.5497-3-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59f6596697f1c471a97eccbdce56e3a88f80823c
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue Nov 8 14:19:52 2022 +0200

    serial: 8250: Flush DMA Rx on RLSI
    
    commit 1980860e0c8299316cddaf0992dd9e1258ec9d88 upstream.
    
    Returning true from handle_rx_dma() without flushing DMA first creates
    a data ordering hazard. If DMA Rx has handled any character at the
    point when RLSI occurs, the non-DMA path handles any pending characters
    jumping them ahead of those characters that are pending under DMA.
    
    Fixes: 75df022b5f89 ("serial: 8250_dma: Fix RX handling")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221108121952.5497-5-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 118b52c2ae085aa1aef55f7cabace509acfff4a4
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue Nov 8 14:19:49 2022 +0200

    serial: 8250: Fall back to non-DMA Rx if IIR_RDI occurs
    
    commit a931237cbea256aff13bb403da13a97b2d1605d9 upstream.
    
    DW UART sometimes triggers IIR_RDI during DMA Rx when IIR_RX_TIMEOUT
    should have been triggered instead. Since IIR_RDI has higher priority
    than IIR_RX_TIMEOUT, this causes the Rx to hang into interrupt loop.
    The problem seems to occur at least with some combinations of
    small-sized transfers (I've reproduced the problem on Elkhart Lake PSE
    UARTs).
    
    If there's already an on-going Rx DMA and IIR_RDI triggers, fall
    graciously back to non-DMA Rx. That is, behave as if IIR_RX_TIMEOUT had
    occurred.
    
    8250_omap already considers IIR_RDI similar to this change so its
    nothing unheard of.
    
    Fixes: 75df022b5f89 ("serial: 8250_dma: Fix RX handling")
    Cc: <stable@vger.kernel.org>
    Co-developed-by: Srikanth Thokala <srikanth.thokala@intel.com>
    Signed-off-by: Srikanth Thokala <srikanth.thokala@intel.com>
    Co-developed-by: Aman Kumar <aman.kumar@intel.com>
    Signed-off-by: Aman Kumar <aman.kumar@intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221108121952.5497-2-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ffce7a92ef5c68f7e5d6f4d722c2f96280c064b
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Nov 1 16:53:35 2022 -0400

    dm ioctl: fix misbehavior if list_versions races with module loading
    
    commit 4fe1ec995483737f3d2a14c3fe1d8fe634972979 upstream.
    
    __list_versions will first estimate the required space using the
    "dm_target_iterate(list_version_get_needed, &needed)" call and then will
    fill the space using the "dm_target_iterate(list_version_get_info,
    &iter_info)" call. Each of these calls locks the targets using the
    "down_read(&_lock)" and "up_read(&_lock)" calls, however between the first
    and second "dm_target_iterate" there is no lock held and the target
    modules can be loaded at this point, so the second "dm_target_iterate"
    call may need more space than what was the first "dm_target_iterate"
    returned.
    
    The code tries to handle this overflow (see the beginning of
    list_version_get_info), however this handling is incorrect.
    
    The code sets "param->data_size = param->data_start + needed" and
    "iter_info.end = (char *)vers+len" - "needed" is the size returned by the
    first dm_target_iterate call; "len" is the size of the buffer allocated by
    userspace.
    
    "len" may be greater than "needed"; in this case, the code will write up
    to "len" bytes into the buffer, however param->data_size is set to
    "needed", so it may write data past the param->data_size value. The ioctl
    interface copies only up to param->data_size into userspace, thus part of
    the result will be truncated.
    
    Fix this bug by setting "iter_info.end = (char *)vers + needed;" - this
    guarantees that the second "dm_target_iterate" call will write only up to
    the "needed" buffer and it will exit with "DM_BUFFER_FULL_FLAG" if it
    overflows the "needed" space - in this case, userspace will allocate a
    larger buffer and retry.
    
    Note that there is also a bug in list_version_get_needed - we need to add
    "strlen(tt->name) + 1" to the needed size, not "strlen(tt->name)".
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b104973f7fd775af87109a9d8501521bae01b76
Author: Mitja Spes <mitja@lxnav.com>
Date:   Fri Oct 21 15:58:21 2022 +0200

    iio: pressure: ms5611: changed hardcoded SPI speed to value limited
    
    commit 741cec30cc52058d1c10d415f3b98319887e4f73 upstream.
    
    Don't hardcode the ms5611 SPI speed, limit it instead.
    
    Signed-off-by: Mitja Spes <mitja@lxnav.com>
    Fixes: c0644160a8b5 ("iio: pressure: add support for MS5611 pressure and temperature sensor")
    Link: https://lore.kernel.org/r/20221021135827.1444793-3-mitja@lxnav.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1678d4abb2dc2ca3b05b998a9d88616976e4f947
Author: Saravanan Sekar <sravanhome@gmail.com>
Date:   Sat Oct 29 11:29:55 2022 +0200

    iio: adc: mp2629: fix potential array out of bound access
    
    commit ca1547ab15f48dc81624183ae17a2fd1bad06dfc upstream.
    
    Add sentinel at end of maps to avoid potential array out of
    bound access in iio core.
    
    Fixes: 7abd9fb64682 ("iio: adc: mp2629: Add support for mp2629 ADC driver")
    Signed-off-by: Saravanan Sekar <sravanhome@gmail.com>
    Link: https://lore.kernel.org/r/20221029093000.45451-4-sravanhome@gmail.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd22c232ead9aaf246cb1430e2f0a8a0039b2bd8
Author: Saravanan Sekar <sravanhome@gmail.com>
Date:   Sat Oct 29 11:29:53 2022 +0200

    iio: adc: mp2629: fix wrong comparison of channel
    
    commit 1eb20332a082fa801fb89c347c5e62de916a4001 upstream.
    
    Input voltage channel enum is compared against iio address instead
    of the channel.
    
    Fixes: 7abd9fb64682 ("iio: adc: mp2629: Add support for mp2629 ADC driver")
    Signed-off-by: Saravanan Sekar <sravanhome@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20221029093000.45451-2-sravanhome@gmail.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 656f670613662b6cc77aad14112db2803ad18fa8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 22 15:42:12 2022 +0800

    iio: trigger: sysfs: fix possible memory leak in iio_sysfs_trig_init()
    
    commit efa17e90e1711bdb084e3954fa44afb6647331c0 upstream.
    
    dev_set_name() allocates memory for name, it need be freed
    when device_add() fails, call put_device() to give up the
    reference that hold in device_initialize(), so that it can
    be freed in kobject_cleanup() when the refcount hit to 0.
    
    Fault injection test can trigger this:
    
    unreferenced object 0xffff8e8340a7b4c0 (size 32):
      comm "modprobe", pid 243, jiffies 4294678145 (age 48.845s)
      hex dump (first 32 bytes):
        69 69 6f 5f 73 79 73 66 73 5f 74 72 69 67 67 65  iio_sysfs_trigge
        72 00 a7 40 83 8e ff ff 00 86 13 c4 f6 ee ff ff  r..@............
      backtrace:
        [<0000000074999de8>] __kmem_cache_alloc_node+0x1e9/0x360
        [<00000000497fd30b>] __kmalloc_node_track_caller+0x44/0x1a0
        [<000000003636c520>] kstrdup+0x2d/0x60
        [<0000000032f84da2>] kobject_set_name_vargs+0x1e/0x90
        [<0000000092efe493>] dev_set_name+0x4e/0x70
    
    Fixes: 1f785681a870 ("staging:iio:trigger sysfs userspace trigger rework.")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221022074212.1386424-1-yangyingliang@huawei.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bf8c0aff8fb5c4edf3ba6728e6bedbd610d7f4b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 24 16:45:11 2022 +0800

    iio: adc: at91_adc: fix possible memory leak in at91_adc_allocate_trigger()
    
    commit 65f20301607d07ee279b0804d11a05a62a6c1a1c upstream.
    
    If iio_trigger_register() returns error, it should call iio_trigger_free()
    to give up the reference that hold in iio_trigger_alloc(), so that it can
    call iio_trig_release() to free memory when the refcount hit to 0.
    
    Fixes: 0e589d5fb317 ("ARM: AT91: IIO: Add AT91 ADC driver.")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221024084511.815096-1-yangyingliang@huawei.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afc0aea70261abfd7a3f957fb7e9e7eac1caf679
Author: Rajat Khandelwal <rajat.khandelwal@linux.intel.com>
Date:   Mon Oct 24 22:46:11 2022 +0530

    usb: typec: mux: Enter safe mode only when pins need to be reconfigured
    
    commit 40bf8f162d0f95e0716e479d7db41443d931765c upstream.
    
    There is no point to enter safe mode during DP/TBT configuration
    if the DP/TBT was already configured in mux. This is because safe
    mode is only applicable when there is a need to reconfigure the
    pins in order to avoid damage within/to port partner.
    
    In some chrome systems, IOM/mux is already configured before OS
    comes up. Thus, when driver is probed, it blindly enters safe
    mode due to PD negotiations but only after gfx driver lowers
    dp_phy_ownership, will the IOM complete safe mode and send an
    ack to PMC.
    Since, that never happens, we see IPC timeout.
    
    Hence, allow safe mode only when pin reconfiguration is not
    required, which makes sense.
    
    Fixes: 43d596e32276 ("usb: typec: intel_pmc_mux: Check the port status before connect")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Rajat Khandelwal <rajat.khandelwal@linux.intel.com>
    Signed-off-by: Lee Shawn C <shawn.c.lee@intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20221024171611.181468-1-rajat.khandelwal@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8236628a549d27fb14f5a1a5e96c85fbc50857a4
Author: Li Jun <jun.li@nxp.com>
Date:   Wed Oct 26 15:07:49 2022 -0400

    usb: cdns3: host: fix endless superspeed hub port reset
    
    commit 9d5333c931347005352d5b8beaa43528c94cfc9c upstream.
    
    When usb 3.0 hub connect with one USB 2.0 device and NO USB 3.0 device,
    some usb hub reports endless port reset message.
    
    [  190.324169] usb 2-1: new SuperSpeed USB device number 88 using xhci-hcd
    [  190.352834] hub 2-1:1.0: USB hub found
    [  190.356995] hub 2-1:1.0: 4 ports detected
    [  190.700056] usb 2-1: USB disconnect, device number 88
    [  192.472139] usb 2-1: new SuperSpeed USB device number 89 using xhci-hcd
    [  192.500820] hub 2-1:1.0: USB hub found
    [  192.504977] hub 2-1:1.0: 4 ports detected
    [  192.852066] usb 2-1: USB disconnect, device number 89
    
    The reason is the runtime pm state of USB2.0 port is active and
    USB 3.0 port is suspend, so parent device is active state.
    
     cat /sys/bus/platform/devices/5b110000.usb/5b130000.usb/xhci-hcd.1.auto/usb2/power/runtime_status
    
     suspended
    
     cat /sys/bus/platform/devices/5b110000.usb/5b130000.usb/xhci-hcd.1.auto/usb1/power/runtime_status
    
     active
    
     cat /sys/bus/platform/devices/5b110000.usb/5b130000.usb/xhci-hcd.1.auto/power/runtime_status
    
     active
    
     cat /sys/bus/platform/devices/5b110000.usb/5b130000.usb/power/runtime_status
    
     active
    
    So xhci_cdns3_suspend_quirk() have not called. U3 configure is not applied.
    
    move U3 configure into host start. Reinit again in resume function in case
    controller power lost during suspend.
    
    Cc: stable@vger.kernel.org 5.10
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Reviewed-by: Peter Chen <peter.chen@kernel.org>
    Acked-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Link: https://lore.kernel.org/r/20221026190749.2280367-1-Frank.Li@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ead83b0db81f4ceeee7866820c1f3249b2d94db8
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Sun Sep 18 11:33:12 2022 +0800

    usb: chipidea: fix deadlock in ci_otg_del_timer
    
    commit 7a58b8d6021426b796eebfae80983374d9a80a75 upstream.
    
    There is a deadlock in ci_otg_del_timer(), the process is
    shown below:
    
        (thread 1)                  |        (thread 2)
    ci_otg_del_timer()              | ci_otg_hrtimer_func()
      ...                           |
      spin_lock_irqsave() //(1)     |  ...
      ...                           |
      hrtimer_cancel()              |  spin_lock_irqsave() //(2)
      (block forever)
    
    We hold ci->lock in position (1) and use hrtimer_cancel() to
    wait ci_otg_hrtimer_func() to stop, but ci_otg_hrtimer_func()
    also need ci->lock in position (2). As a result, the
    hrtimer_cancel() in ci_otg_del_timer() will be blocked forever.
    
    This patch extracts hrtimer_cancel() from the protection of
    spin_lock_irqsave() in order that the ci_otg_hrtimer_func()
    could obtain the ci->lock.
    
    What`s more, there will be no race happen. Because the
    "next_timer" is always under the protection of
    spin_lock_irqsave() and we only check whether "next_timer"
    equals to NUM_OTG_FSM_TIMERS in the following code.
    
    Fixes: 3a316ec4c91c ("usb: chipidea: use hrtimer for otg fsm timers")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Link: https://lore.kernel.org/r/20220918033312.94348-1-duoming@zju.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc9e6d8c55c91b642688e5cf0a181f7c095d7cda
Author: Nicolas Dumazet <ndumazet@google.com>
Date:   Wed Nov 9 13:29:46 2022 +0100

    usb: add NO_LPM quirk for Realforce 87U Keyboard
    
    commit 181135bb20dcb184edd89817831b888eb8132741 upstream.
    
    Before adding this quirk, this (mechanical keyboard) device would not be
    recognized, logging:
    
      new full-speed USB device number 56 using xhci_hcd
      unable to read config index 0 descriptor/start: -32
      chopping to 0 config(s)
    
    It would take dozens of plugging/unpuggling cycles for the keyboard to
    be recognized. Keyboard seems to simply work after applying this quirk.
    
    This issue had been reported by users in two places already ([1], [2])
    but nobody tried upstreaming a patch yet. After testing I believe their
    suggested fix (DELAY_INIT + NO_LPM + DEVICE_QUALIFIER) was probably a
    little overkill. I assume this particular combination was tested because
    it had been previously suggested in [3], but only NO_LPM seems
    sufficient for this device.
    
    [1]: https://qiita.com/float168/items/fed43d540c8e2201b543
    [2]: https://blog.kostic.dev/posts/making-the-realforce-87ub-work-with-usb30-on-Ubuntu/
    [3]: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1678477
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Nicolas Dumazet <ndumazet@google.com>
    Link: https://lore.kernel.org/r/20221109122946.706036-1-ndumazet@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70eca1d261b2b84cfec1a2aaf1161302c2cfa618
Author: Reinhard Speyerer <rspmn@arcor.de>
Date:   Wed Nov 9 22:24:15 2022 +0100

    USB: serial: option: add Fibocom FM160 0x0111 composition
    
    commit 148f4b32b4504d8a32cf82049b7b9499a4b299ab upstream.
    
    Add support for the following Fibocom FM160 composition:
    
    0x0111: MBIM + MODEM + DIAG + AT
    
    T:  Bus=01 Lev=02 Prnt=125 Port=01 Cnt=02 Dev#= 93 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=0111 Rev= 5.04
    S:  Manufacturer=Fibocom
    S:  Product=Fibocom FM160 Modem_SN:12345678
    S:  SerialNumber=12345678
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=86(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Reinhard Speyerer <rspmn@arcor.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b6a54885c40336127fed8816847cbe7dee76086
Author: Davide Tronchin <davide.tronchin.94@gmail.com>
Date:   Wed Nov 16 16:59:50 2022 +0100

    USB: serial: option: add u-blox LARA-L6 modem
    
    commit c1547f12df8b8e9ca2686accee43213ecd117efe upstream.
    
    Add LARA-L6 PIDs for three different USB compositions.
    
    LARA-L6 module can be configured (by AT interface) in three different
    USB modes:
    * Default mode (Vendor ID: 0x1546 Product ID: 0x1341) with 4 serial
    interfaces
    * RmNet mode (Vendor ID: 0x1546 Product ID: 0x1342) with 4 serial
    interfaces and 1 RmNet virtual network interface
    * CDC-ECM mode (Vendor ID: 0x1546 Product ID: 0x1343) with 4 serial
    interface and 1 CDC-ECM virtual network interface
    
    In default mode LARA-L6 exposes the following interfaces:
    If 0: Diagnostic
    If 1: AT parser
    If 2: AT parser
    If 3: AT parser/alternative functions
    
    In RmNet mode LARA-L6 exposes the following interfaces:
    If 0: Diagnostic
    If 1: AT parser
    If 2: AT parser
    If 3: AT parset/alternative functions
    If 4: RMNET interface
    
    In CDC-ECM mode LARA-L6 exposes the following interfaces:
    If 0: Diagnostic
    If 1: AT parser
    If 2: AT parser
    If 3: AT parset/alternative functions
    If 4: CDC-ECM interface
    
    Signed-off-by: Davide Tronchin <davide.tronchin.94@gmail.com>
    [ johan: drop PID defines in favour of comments ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0467d0059bcdb2856f3b3caa1e1ec27efc1ce07
Author: Davide Tronchin <davide.tronchin.94@gmail.com>
Date:   Wed Nov 16 16:59:49 2022 +0100

    USB: serial: option: add u-blox LARA-R6 00B modem
    
    commit d9e37a5c4d80ea25a7171ab8557a449115554e76 upstream.
    
    The official LARA-R6 (00B) modem uses 0x908b PID. LARA-R6 00B does not
    implement a QMI interface on port 4, the reservation (RSVD(4)) has been
    added to meet other companies that implement QMI on that interface.
    
    LARA-R6 00B USB composition exposes the following interfaces:
    If 0: Diagnostic
    If 1: AT parser
    If 2: AT parser
    If 3: AT parser/alternative functions
    
    Signed-off-by: Davide Tronchin <davide.tronchin.94@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95688a8a5735062bfc29881fa50d33985e88465e
Author: Davide Tronchin <davide.tronchin.94@gmail.com>
Date:   Wed Nov 16 16:59:48 2022 +0100

    USB: serial: option: remove old LARA-R6 PID
    
    commit 2ec106b96afc19698ff934323b633c0729d4c7f8 upstream.
    
    Remove the UBLOX_PRODUCT_R6XX 0x90fa association since LARA-R6 00B final
    product uses a new USB composition with different PID. 0x90fa PID used
    only by LARA-R6 internal prototypes.
    
    Move 0x90fa PID directly in the option_ids array since used by other
    Qualcomm based modem vendors as pointed out in:
    
      https://lore.kernel.org/all/6572c4e6-d8bc-b8d3-4396-d879e4e76338@gmail.com
    
    Signed-off-by: Davide Tronchin <davide.tronchin.94@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53dee78ea382308699430c86e2226b469aa15f41
Author: Benoît Monin <benoit.monin@gmx.fr>
Date:   Thu Oct 13 16:26:48 2022 +0200

    USB: serial: option: add Sierra Wireless EM9191
    
    commit df3414b0a245f43476061fddd78cee7d6cff797f upstream.
    
    Add support for the AT and diag ports, similar to other qualcomm SDX55
    modems. In QDL mode, the modem uses a different device ID and support
    is provided by qcserial in commit 11c52d250b34 ("USB: serial: qcserial:
    add EM9191 QDL support").
    
    T:  Bus=08 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  3 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=1199 ProdID=90d3 Rev=00.06
    S:  Manufacturer=Sierra Wireless, Incorporated
    S:  Product=Sierra Wireless EM9191
    S:  SerialNumber=xxxxxxxxxxxxxxxx
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    
    Signed-off-by: Benoît Monin <benoit.monin@gmx.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7764e88e6c4236b58e983315b3d17bc71d7320b
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Nov 7 10:07:53 2022 +0100

    USB: bcma: Make GPIO explicitly optional
    
    commit cd136706b4f925aa5d316642543babac90d45910 upstream.
    
    What the code does is to not check the return value from
    devm_gpiod_get() and then avoid using an erroneous GPIO descriptor
    with IS_ERR_OR_NULL().
    
    This will miss real errors from the GPIO core that should not be
    ignored, such as probe deferral.
    
    Instead request the GPIO as explicitly optional, which means that
    if it doesn't exist, the descriptor returned will be NULL.
    
    Then we can add error handling and also avoid just doing this on
    the device tree path, and simplify the site where the optional
    GPIO descriptor is used.
    
    There were some problems with cleaning up this GPIO descriptor
    use in the past, but this is the proper way to deal with it.
    
    Cc: Rafał Miłecki <rafal@milecki.pl>
    Cc: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20221107090753.1404679-1-linus.walleij@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a190a83db2848fef521dc190e51a8755c744287a
Author: Mushahid Hussain <mushi.shar@gmail.com>
Date:   Mon Oct 10 21:57:20 2022 +0500

    speakup: fix a segfault caused by switching consoles
    
    commit 0fc801f8018000c8e64a275a20cb1da7c54e46df upstream.
    
    This patch fixes a segfault by adding a null check on synth in
    speakup_con_update(). The segfault can be reproduced as follows:
    
            - Login into a text console
    
            - Load speakup and speakup_soft modules
    
            - Remove speakup_soft
    
            - Switch to a graphics console
    
    This is caused by lack of a null check on `synth` in
    speakup_con_update().
    
    Here's the sequence that causes the segfault:
    
            - When we remove the speakup_soft, synth_release() sets the synth
              to null.
    
            - After that, when we change the virtual console to graphics
              console, vt_notifier_call() is fired, which then calls
              speakup_con_update().
    
            - Inside speakup_con_update() there's no null check on synth,
              so it calls synth_printf().
    
            - Inside synth_printf(), synth_buffer_add() and synth_start(),
              both access synth, when it is null and causing a segfault.
    
    Therefore adding a null check on synth solves the issue.
    
    Fixes: 2610df41489f ("staging: speakup: Add pause command used on switching to graphical mode")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Mushahid Hussain <mushi.shar@gmail.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Link: https://lore.kernel.org/r/20221010165720.397042-1-mushi.shar@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3c6edbee48e5834cfeea337b2bcc2fdcc9a6129
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Thu Sep 29 18:52:02 2022 +0200

    slimbus: stream: correct presence rate frequencies
    
    commit b9c1939627f8185dec8ba6d741e9573a4c7a5834 upstream.
    
    Correct few frequencies in presence rate table - multiplied by 10
    (110250 instead of 11025 Hz).
    
    Fixes: abb9c9b8b51b ("slimbus: stream: add stream support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20220929165202.410937-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b35ac831555552028d5bd69eede69d4658f802c
Author: Zheng Bin <zhengbin13@huawei.com>
Date:   Thu Oct 27 17:59:04 2022 +0800

    slimbus: qcom-ngd: Fix build error when CONFIG_SLIM_QCOM_NGD_CTRL=y && CONFIG_QCOM_RPROC_COMMON=m
    
    commit e54fad8044db18cc400df8d01bfb86cada08b7cb upstream.
    
    If CONFIG_SLIM_QCOM_NGD_CTRL=y, CONFIG_QCOM_RPROC_COMMON=m, COMPILE_TEST=y,
    bulding fails:
    
    drivers/slimbus/qcom-ngd-ctrl.o: In function `qcom_slim_ngd_ctrl_probe':
    qcom-ngd-ctrl.c:(.text+0x330): undefined reference to `qcom_register_ssr_notifier'
    qcom-ngd-ctrl.c:(.text+0x5fc): undefined reference to `qcom_unregister_ssr_notifier'
    drivers/slimbus/qcom-ngd-ctrl.o: In function `qcom_slim_ngd_remove':
    qcom-ngd-ctrl.c:(.text+0x90c): undefined reference to `qcom_unregister_ssr_notifier'
    
    Make SLIM_QCOM_NGD_CTRL depends on QCOM_RPROC_COMMON || (COMPILE_TEST && !QCOM_RPROC_COMMON) to fix this.
    
    Fixes: e291691c6977 ("slimbus: qcom-ngd-ctrl: allow compile testing without QCOM_RPROC_COMMON")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Zheng Bin <zhengbin13@huawei.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20221027095904.3388959-1-zhengbin13@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f847462fea166988c60965f3530ba07962b195b
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Thu Nov 3 15:46:48 2022 +0100

    Revert "usb: dwc3: disable USB core PHY management"
    
    commit 5c294de36e7fb3e0cba0c4e1ef9a5f57bc080d0f upstream.
    
    This reverts commit 6000b8d900cd5f52fbcd0776d0cc396e88c8c2ea.
    
    The offending commit disabled the USB core PHY management as the dwc3
    already manages the PHYs in question.
    
    Unfortunately some platforms have started relying on having USB core
    also controlling the PHY and this is specifically currently needed on
    some Exynos platforms for PHY calibration or connected device may fail
    to enumerate.
    
    The PHY calibration was previously handled in the dwc3 driver, but to
    work around some issues related to how the dwc3 driver interacts with
    xhci (e.g. using multiple drivers) this was moved to USB core by commits
    34c7ed72f4f0 ("usb: core: phy: add support for PHY calibration") and
    a0a465569b45 ("usb: dwc3: remove generic PHY calibrate() calls").
    
    The same PHY obviously should not be controlled from two different
    places, which for example do no agree on the PHY mode or power state
    during suspend, but as the offending patch was backported to stable,
    let's revert it for now.
    
    Reported-by: Stefan Agner <stefan@agner.ch>
    Link: https://lore.kernel.org/lkml/808bdba846bb60456adf10a3016911ee@agner.ch/
    Fixes: 6000b8d900cd ("usb: dwc3: disable USB core PHY management")
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20221103144648.14197-1-johan+linaro@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23ad214a8665e0673032a69704594b0ed3e66a94
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 15 18:02:35 2022 +0100

    ALSA: hda/realtek: Fix the speaker output on Samsung Galaxy Book Pro 360
    
    commit 1abfd71ee8f3ed99c5d0df5d9843a360541d6808 upstream.
    
    Samsung Galaxy Book Pro 360 (13" 2021 NP930QBD-ke1US) with codec SSID
    144d:c1a6 requires the same workaround for enabling the speaker amp
    like other Samsung models with ALC298 codec.
    
    Link: https://bugzilla.opensuse.org/show_bug.cgi?id=1205100
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221115170235.18875-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a36b505749c61f2860641906b8e0dfa39603a9a4
Author: Emil Flink <emil.flink@gmail.com>
Date:   Tue Nov 15 15:45:01 2022 +0100

    ALSA: hda/realtek: fix speakers for Samsung Galaxy Book Pro
    
    commit b18a456330e1c1ca207b57b45872f10336741388 upstream.
    
    The Samsung Galaxy Book Pro seems to have the same issue as a few
    other Samsung laptops, detailed in kernel bug report 207423. Sound from
    headphone jack works, but not the built-in speakers.
    
    alsa-info: http://alsa-project.org/db/?f=b40ba609dc6ae28dc84ad404a0d8a4bbcd8bea6d
    
    Signed-off-by: Emil Flink <emil.flink@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221115144500.7782-1-emil.flink@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02b94885b2fdf1808b1874e009bfb90753f8f4db
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Nov 12 15:12:23 2022 +0100

    ALSA: usb-audio: Drop snd_BUG_ON() from snd_usbmidi_output_open()
    
    commit ad72c3c3f6eb81d2cb189ec71e888316adada5df upstream.
    
    snd_usbmidi_output_open() has a check of the NULL port with
    snd_BUG_ON().  snd_BUG_ON() was used as this shouldn't have happened,
    but in reality, the NULL port may be seen when the device gives an
    invalid endpoint setup at the descriptor, hence the driver skips the
    allocation.  That is, the check itself is valid and snd_BUG_ON()
    should be dropped from there.  Otherwise it's confusing as if it were
    a real bug, as recently syzbot stumbled on it.
    
    Reported-by: syzbot+9abda841d636d86c41da@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/syzbot+9abda841d636d86c41da@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20221112141223.6144-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7176d6f3adb92da6ceae607509e49dd929854f32
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Mon Oct 31 14:58:12 2022 -0400

    drm/amd/display: Add HUBP surface flip interrupt handler
    
    commit 7af87fc1ba136143314c870059b8f60180247cbd upstream.
    
    On IGT, there is a test named amd_hotplug, and when the subtest basic is
    executed on DCN31, we get the following error:
    
    [drm] *ERROR* [CRTC:71:crtc-0] flip_done timed out
    [drm] *ERROR* flip_done timed out
    [drm] *ERROR* [CRTC:71:crtc-0] commit wait timed out
    [drm] *ERROR* flip_done timed out
    [drm] *ERROR* [CONNECTOR:88:DP-1] commit wait timed out
    [drm] *ERROR* flip_done timed out
    [drm] *ERROR* [PLANE:59:plane-3] commit wait timed out
    
    After enable the page flip log with the below command:
    
     echo -n 'format "[PFLIP]" +p' > /sys/kernel/debug/dynamic_debug/control
    
    It is possible to see that the flip was submitted, but DC never replied
    back, which generates time-out issues. This is an indication that the
    HUBP surface flip is missing. This commit fixes this issue by adding
    hubp1_set_flip_int to DCN31.
    
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e57daa750369fedbf678346aec724a43b9a51749
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Fri Nov 18 10:15:34 2022 +0900

    tracing: kprobe: Fix potential null-ptr-deref on trace_array in kprobe_event_gen_test_exit()
    
    commit 22ea4ca9631eb137e64e5ab899e9c89cb6670959 upstream.
    
    When test_gen_kprobe_cmd() failed after kprobe_event_gen_cmd_end(), it
    will goto delete, which will call kprobe_event_delete() and release the
    corresponding resource. However, the trace_array in gen_kretprobe_test
    will point to the invalid resource. Set gen_kretprobe_test to NULL
    after called kprobe_event_delete() to prevent null-ptr-deref.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000070
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    CPU: 0 PID: 246 Comm: modprobe Tainted: G        W
    6.1.0-rc1-00174-g9522dc5c87da-dirty #248
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    RIP: 0010:__ftrace_set_clr_event_nolock+0x53/0x1b0
    Code: e8 82 26 fc ff 49 8b 1e c7 44 24 0c ea ff ff ff 49 39 de 0f 84 3c
    01 00 00 c7 44 24 18 00 00 00 00 e8 61 26 fc ff 48 8b 6b 10 <44> 8b 65
    70 4c 8b 6d 18 41 f7 c4 00 02 00 00 75 2f
    RSP: 0018:ffffc9000159fe00 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff88810971d268 RCX: 0000000000000000
    RDX: ffff8881080be600 RSI: ffffffff811b48ff RDI: ffff88810971d058
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000001
    R10: ffffc9000159fe58 R11: 0000000000000001 R12: ffffffffa0001064
    R13: ffffffffa000106c R14: ffff88810971d238 R15: 0000000000000000
    FS:  00007f89eeff6540(0000) GS:ffff88813b600000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000070 CR3: 000000010599e004 CR4: 0000000000330ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     __ftrace_set_clr_event+0x3e/0x60
     trace_array_set_clr_event+0x35/0x50
     ? 0xffffffffa0000000
     kprobe_event_gen_test_exit+0xcd/0x10b [kprobe_event_gen_test]
     __x64_sys_delete_module+0x206/0x380
     ? lockdep_hardirqs_on_prepare+0xd8/0x190
     ? syscall_enter_from_user_mode+0x1c/0x50
     do_syscall_64+0x3f/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f89eeb061b7
    
    Link: https://lore.kernel.org/all/20221108015130.28326-3-shangxiaojing@huawei.com/
    
    Fixes: 64836248dda2 ("tracing: Add kprobe event command generation test module")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Cc: stable@vger.kernel.org
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a41c0f2a5c3bf72b4c4e9dd4b1025378201e332
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Fri Nov 18 10:15:33 2022 +0900

    tracing: kprobe: Fix potential null-ptr-deref on trace_event_file in kprobe_event_gen_test_exit()
    
    commit e0d75267f59d7084e0468bd68beeb1bf9c71d7c0 upstream.
    
    When trace_get_event_file() failed, gen_kretprobe_test will be assigned
    as the error code. If module kprobe_event_gen_test is removed now, the
    null pointer dereference will happen in kprobe_event_gen_test_exit().
    Check if gen_kprobe_test or gen_kretprobe_test is error code or NULL
    before dereference them.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000012
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    CPU: 3 PID: 2210 Comm: modprobe Not tainted
    6.1.0-rc1-00171-g2159299a3b74-dirty #217
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    RIP: 0010:kprobe_event_gen_test_exit+0x1c/0xb5 [kprobe_event_gen_test]
    Code: Unable to access opcode bytes at 0xffffffff9ffffff2.
    RSP: 0018:ffffc900015bfeb8 EFLAGS: 00010246
    RAX: ffffffffffffffea RBX: ffffffffa0002080 RCX: 0000000000000000
    RDX: ffffffffa0001054 RSI: ffffffffa0001064 RDI: ffffffffdfc6349c
    RBP: ffffffffa0000000 R08: 0000000000000004 R09: 00000000001e95c0
    R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000800
    R13: ffffffffa0002420 R14: 0000000000000000 R15: 0000000000000000
    FS:  00007f56b75be540(0000) GS:ffff88813bc00000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffffff9ffffff2 CR3: 000000010874a006 CR4: 0000000000330ee0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     __x64_sys_delete_module+0x206/0x380
     ? lockdep_hardirqs_on_prepare+0xd8/0x190
     ? syscall_enter_from_user_mode+0x1c/0x50
     do_syscall_64+0x3f/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Link: https://lore.kernel.org/all/20221108015130.28326-2-shangxiaojing@huawei.com/
    
    Fixes: 64836248dda2 ("tracing: Add kprobe event command generation test module")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7291dec4f2d17a2d3fd1f789fb41e58476539f21
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Nov 17 21:42:49 2022 -0500

    tracing: Fix race where eprobes can be called before the event
    
    commit 94eedf3dded5fb472ce97bfaf3ac1c6c29c35d26 upstream.
    
    The flag that tells the event to call its triggers after reading the event
    is set for eprobes after the eprobe is enabled. This leads to a race where
    the eprobe may be triggered at the beginning of the event where the record
    information is NULL. The eprobe then dereferences the NULL record causing
    a NULL kernel pointer bug.
    
    Test for a NULL record to keep this from happening.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221116192552.1066630-1-rafaelmendsr@gmail.com/
    Link: https://lore.kernel.org/linux-trace-kernel/20221117214249.2addbe10@gandalf.local.home
    
    Cc: Linux Trace Kernel <linux-trace-kernel@vger.kernel.org>
    Cc: Tzvetomir Stoyanov <tz.stoyanov@gmail.com>
    Cc: Tom Zanussi <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 7491e2c442781 ("tracing: Add a probe that attaches to trace events")
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Reported-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6517b97134f724d12f673f9fb4f456d75c7a905f
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 17 09:23:46 2022 +0800

    tracing: Fix wild-memory-access in register_synth_event()
    
    commit 1b5f1c34d3f5a664a57a5a7557a50e4e3cc2505c upstream.
    
    In register_synth_event(), if set_synth_event_print_fmt() failed, then
    both trace_remove_event_call() and unregister_trace_event() will be
    called, which means the trace_event_call will call
    __unregister_trace_event() twice. As the result, the second unregister
    will causes the wild-memory-access.
    
    register_synth_event
        set_synth_event_print_fmt failed
        trace_remove_event_call
            event_remove
                if call->event.funcs then
                __unregister_trace_event (first call)
        unregister_trace_event
            __unregister_trace_event (second call)
    
    Fix the bug by avoiding to call the second __unregister_trace_event() by
    checking if the first one is called.
    
    general protection fault, probably for non-canonical address
            0xfbd59c0000000024: 0000 [#1] SMP KASAN PTI
    KASAN: maybe wild-memory-access in range
    [0xdead000000000120-0xdead000000000127]
    CPU: 0 PID: 3807 Comm: modprobe Not tainted
    6.1.0-rc1-00186-g76f33a7eedb4 #299
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    RIP: 0010:unregister_trace_event+0x6e/0x280
    Code: 00 fc ff df 4c 89 ea 48 c1 ea 03 80 3c 02 00 0f 85 0e 02 00 00 48
    b8 00 00 00 00 00 fc ff df 4c 8b 63 08 4c 89 e2 48 c1 ea 03 <80> 3c 02
    00 0f 85 e2 01 00 00 49 89 2c 24 48 85 ed 74 28 e8 7a 9b
    RSP: 0018:ffff88810413f370 EFLAGS: 00010a06
    RAX: dffffc0000000000 RBX: ffff888105d050b0 RCX: 0000000000000000
    RDX: 1bd5a00000000024 RSI: ffff888119e276e0 RDI: ffffffff835a8b20
    RBP: dead000000000100 R08: 0000000000000000 R09: fffffbfff0913481
    R10: ffffffff8489a407 R11: fffffbfff0913480 R12: dead000000000122
    R13: ffff888105d050b8 R14: 0000000000000000 R15: ffff888105d05028
    FS:  00007f7823e8d540(0000) GS:ffff888119e00000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f7823e7ebec CR3: 000000010a058002 CR4: 0000000000330ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     __create_synth_event+0x1e37/0x1eb0
     create_or_delete_synth_event+0x110/0x250
     synth_event_run_command+0x2f/0x110
     test_gen_synth_cmd+0x170/0x2eb [synth_event_gen_test]
     synth_event_gen_test_init+0x76/0x9bc [synth_event_gen_test]
     do_one_initcall+0xdb/0x480
     do_init_module+0x1cf/0x680
     load_module+0x6a50/0x70a0
     __do_sys_finit_module+0x12f/0x1c0
     do_syscall_64+0x3f/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Link: https://lkml.kernel.org/r/20221117012346.22647-3-shangxiaojing@huawei.com
    
    Fixes: 4b147936fa50 ("tracing: Add support for 'synthetic' events")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Cc: stable@vger.kernel.org
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Cc: <fengguang.wu@intel.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07ba4f0603aba288580866394f2916dfe55823a2
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 17 09:23:45 2022 +0800

    tracing: Fix memory leak in test_gen_synth_cmd() and test_empty_synth_event()
    
    commit a4527fef9afe5c903c718d0cd24609fe9c754250 upstream.
    
    test_gen_synth_cmd() only free buf in fail path, hence buf will leak
    when there is no failure. Add kfree(buf) to prevent the memleak. The
    same reason and solution in test_empty_synth_event().
    
    unreferenced object 0xffff8881127de000 (size 2048):
      comm "modprobe", pid 247, jiffies 4294972316 (age 78.756s)
      hex dump (first 32 bytes):
        20 67 65 6e 5f 73 79 6e 74 68 5f 74 65 73 74 20   gen_synth_test
        20 70 69 64 5f 74 20 6e 65 78 74 5f 70 69 64 5f   pid_t next_pid_
      backtrace:
        [<000000004254801a>] kmalloc_trace+0x26/0x100
        [<0000000039eb1cf5>] 0xffffffffa00083cd
        [<000000000e8c3bc8>] 0xffffffffa00086ba
        [<00000000c293d1ea>] do_one_initcall+0xdb/0x480
        [<00000000aa189e6d>] do_init_module+0x1cf/0x680
        [<00000000d513222b>] load_module+0x6a50/0x70a0
        [<000000001fd4d529>] __do_sys_finit_module+0x12f/0x1c0
        [<00000000b36c4c0f>] do_syscall_64+0x3f/0x90
        [<00000000bbf20cf3>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    unreferenced object 0xffff8881127df000 (size 2048):
      comm "modprobe", pid 247, jiffies 4294972324 (age 78.728s)
      hex dump (first 32 bytes):
        20 65 6d 70 74 79 5f 73 79 6e 74 68 5f 74 65 73   empty_synth_tes
        74 20 20 70 69 64 5f 74 20 6e 65 78 74 5f 70 69  t  pid_t next_pi
      backtrace:
        [<000000004254801a>] kmalloc_trace+0x26/0x100
        [<00000000d4db9a3d>] 0xffffffffa0008071
        [<00000000c31354a5>] 0xffffffffa00086ce
        [<00000000c293d1ea>] do_one_initcall+0xdb/0x480
        [<00000000aa189e6d>] do_init_module+0x1cf/0x680
        [<00000000d513222b>] load_module+0x6a50/0x70a0
        [<000000001fd4d529>] __do_sys_finit_module+0x12f/0x1c0
        [<00000000b36c4c0f>] do_syscall_64+0x3f/0x90
        [<00000000bbf20cf3>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Link: https://lkml.kernel.org/r/20221117012346.22647-2-shangxiaojing@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Cc: <fengguang.wu@intel.com>
    Cc: stable@vger.kernel.org
    Fixes: 9fe41efaca08 ("tracing: Add synth event generation test module")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b318f3032bf5395e1326380f7e04416386368b5
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Oct 20 23:14:27 2022 -0400

    tracing/ring-buffer: Have polling block on watermark
    
    commit 42fb0a1e84ff525ebe560e2baf9451ab69127e2b upstream.
    
    Currently the way polling works on the ring buffer is broken. It will
    return immediately if there's any data in the ring buffer whereas a read
    will block until the watermark (defined by the tracefs buffer_percent file)
    is hit.
    
    That is, a select() or poll() will return as if there's data available,
    but then the following read will block. This is broken for the way
    select()s and poll()s are supposed to work.
    
    Have the polling on the ring buffer also block the same way reads and
    splice does on the ring buffer.
    
    Link: https://lkml.kernel.org/r/20221020231427.41be3f26@gandalf.local.home
    
    Cc: Linux Trace Kernel <linux-trace-kernel@vger.kernel.org>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Primiano Tucci <primiano@google.com>
    Cc: stable@vger.kernel.org
    Fixes: 1e0d6714aceb7 ("ring-buffer: Do not wake up a splice waiter when page is not full")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c21ee020ce43d744ecd7f3e9bddfcaafef270ce
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Mon Nov 7 19:04:50 2022 +0800

    tracing: Fix memory leak in tracing_read_pipe()
    
    commit 649e72070cbbb8600eb823833e4748f5a0815116 upstream.
    
    kmemleak reports this issue:
    
    unreferenced object 0xffff888105a18900 (size 128):
      comm "test_progs", pid 18933, jiffies 4336275356 (age 22801.766s)
      hex dump (first 32 bytes):
        25 73 00 90 81 88 ff ff 26 05 00 00 42 01 58 04  %s......&...B.X.
        03 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000560143a1>] __kmalloc_node_track_caller+0x4a/0x140
        [<000000006af00822>] krealloc+0x8d/0xf0
        [<00000000c309be6a>] trace_iter_expand_format+0x99/0x150
        [<000000005a53bdb6>] trace_check_vprintf+0x1e0/0x11d0
        [<0000000065629d9d>] trace_event_printf+0xb6/0xf0
        [<000000009a690dc7>] trace_raw_output_bpf_trace_printk+0x89/0xc0
        [<00000000d22db172>] print_trace_line+0x73c/0x1480
        [<00000000cdba76ba>] tracing_read_pipe+0x45c/0x9f0
        [<0000000015b58459>] vfs_read+0x17b/0x7c0
        [<000000004aeee8ed>] ksys_read+0xed/0x1c0
        [<0000000063d3d898>] do_syscall_64+0x3b/0x90
        [<00000000a06dda7f>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    iter->fmt alloced in
      tracing_read_pipe() -> .. ->trace_iter_expand_format(), but not
    freed, to fix, add free in tracing_release_pipe()
    
    Link: https://lkml.kernel.org/r/1667819090-4643-1-git-send-email-wangyufen@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: efbbdaa22bb7 ("tracing: Show real address for trace event arguments")
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00f74b1a98a2d0a0067b2a11c13b55821ad73797
Author: Daniil Tatianin <d-tatianin@yandex-team.ru>
Date:   Mon Nov 14 17:31:29 2022 +0300

    ring_buffer: Do not deactivate non-existant pages
    
    commit 56f4ca0a79a9f1af98f26c54b9b89ba1f9bcc6bd upstream.
    
    rb_head_page_deactivate() expects cpu_buffer to contain a valid list of
    ->pages, so verify that the list is actually present before calling it.
    
    Found by Linux Verification Center (linuxtesting.org) with the SVACE
    static analysis tool.
    
    Link: https://lkml.kernel.org/r/20221114143129.3534443-1-d-tatianin@yandex-team.ru
    
    Cc: stable@vger.kernel.org
    Fixes: 77ae365eca895 ("ring-buffer: make lockless")
    Signed-off-by: Daniil Tatianin <d-tatianin@yandex-team.ru>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bea037a1abb23a6729bef36a2265a4565f5ea77
Author: Xiu Jianfeng <xiujianfeng@huawei.com>
Date:   Wed Nov 16 09:52:07 2022 +0800

    ftrace: Fix null pointer dereference in ftrace_add_mod()
    
    commit 19ba6c8af9382c4c05dc6a0a79af3013b9a35cd0 upstream.
    
    The @ftrace_mod is allocated by kzalloc(), so both the members {prev,next}
    of @ftrace_mode->list are NULL, it's not a valid state to call list_del().
    If kstrdup() for @ftrace_mod->{func|module} fails, it goes to @out_free
    tag and calls free_ftrace_mod() to destroy @ftrace_mod, then list_del()
    will write prev->next and next->prev, where null pointer dereference
    happens.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000008
    Oops: 0002 [#1] PREEMPT SMP NOPTI
    Call Trace:
     <TASK>
     ftrace_mod_callback+0x20d/0x220
     ? do_filp_open+0xd9/0x140
     ftrace_process_regex.isra.51+0xbf/0x130
     ftrace_regex_write.isra.52.part.53+0x6e/0x90
     vfs_write+0xee/0x3a0
     ? __audit_filter_op+0xb1/0x100
     ? auditd_test_task+0x38/0x50
     ksys_write+0xa5/0xe0
     do_syscall_64+0x3a/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    Kernel panic - not syncing: Fatal exception
    
    So call INIT_LIST_HEAD() to initialize the list member to fix this issue.
    
    Link: https://lkml.kernel.org/r/20221116015207.30858-1-xiujianfeng@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 673feb9d76ab ("ftrace: Add :mod: caching infrastructure to trace_array")
    Signed-off-by: Xiu Jianfeng <xiujianfeng@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fadfcf39fbcdc9916b8593b93e47116845f45875
Author: Wang Wensheng <wangwensheng4@huawei.com>
Date:   Wed Nov 9 09:44:33 2022 +0000

    ftrace: Optimize the allocation for mcount entries
    
    commit bcea02b096333dc74af987cb9685a4dbdd820840 upstream.
    
    If we can't allocate this size, try something smaller with half of the
    size. Its order should be decreased by one instead of divided by two.
    
    Link: https://lkml.kernel.org/r/20221109094434.84046-3-wangwensheng4@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Fixes: a79008755497d ("ftrace: Allocate the mcount record pages as groups")
    Signed-off-by: Wang Wensheng <wangwensheng4@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c5f2642898f86ec43462d62fc7859c3655b1251
Author: Wang Wensheng <wangwensheng4@huawei.com>
Date:   Wed Nov 9 09:44:32 2022 +0000

    ftrace: Fix the possible incorrect kernel message
    
    commit 08948caebe93482db1adfd2154eba124f66d161d upstream.
    
    If the number of mcount entries is an integer multiple of
    ENTRIES_PER_PAGE, the page count showing on the console would be wrong.
    
    Link: https://lkml.kernel.org/r/20221109094434.84046-2-wangwensheng4@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Fixes: 5821e1b74f0d0 ("function tracing: fix wrong pos computing when read buffer has been fulfilled")
    Signed-off-by: Wang Wensheng <wangwensheng4@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ab2494162440b9edf4a244e23ec75b47d6f8b59
Author: Anastasia Belova <abelova@astralinux.ru>
Date:   Wed Nov 16 17:10:27 2022 +0300

    cifs: add check for returning value of SMB2_set_info_init
    
    [ Upstream commit a51e5d293dd1c2e7bf6f7be788466cd9b5d280fb ]
    
    If the returning value of SMB2_set_info_init is an error-value,
    exit the function.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 0967e5457954 ("cifs: use a compound for setting an xattr")
    
    Signed-off-by: Anastasia Belova <abelova@astralinux.ru>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5783abda58d62f6f53572dcc47de7ff41663a93c
Author: Yuan Can <yuancan@huawei.com>
Date:   Mon Nov 14 14:22:25 2022 +0000

    net: thunderbolt: Fix error handling in tbnet_init()
    
    [ Upstream commit f524b7289bbb0c8ffaa2ba3c34c146e43da54fb2 ]
    
    A problem about insmod thunderbolt-net failed is triggered with following
    log given while lsmod does not show thunderbolt_net:
    
     insmod: ERROR: could not insert module thunderbolt-net.ko: File exists
    
    The reason is that tbnet_init() returns tb_register_service_driver()
    directly without checking its return value, if tb_register_service_driver()
    failed, it returns without removing property directory, resulting the
    property directory can never be created later.
    
     tbnet_init()
       tb_register_property_dir() # register property directory
       tb_register_service_driver()
         driver_register()
           bus_add_driver()
             priv = kzalloc(...) # OOM happened
       # return without remove property directory
    
    Fix by remove property directory when tb_register_service_driver() returns
    error.
    
    Fixes: e69b6c02b4c3 ("net: Add support for networking over Thunderbolt cable")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80e590aeb132887102c3fa79d99b338f099dc952
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Mon Nov 14 21:38:53 2022 +0800

    net: microchip: sparx5: Fix potential null-ptr-deref in sparx_stats_init() and sparx5_start()
    
    [ Upstream commit 639f5d006e36bb303f525d9479448c412b720c39 ]
    
    sparx_stats_init() calls create_singlethread_workqueue() and not
    checked the ret value, which may return NULL. And a null-ptr-deref may
    happen:
    
    sparx_stats_init()
        create_singlethread_workqueue() # failed, sparx5->stats_queue is NULL
        queue_delayed_work()
            queue_delayed_work_on()
                __queue_delayed_work()  # warning here, but continue
                    __queue_work()      # access wq->flags, null-ptr-deref
    
    Check the ret value and return -ENOMEM if it is NULL. So as
    sparx5_start().
    
    Fixes: af4b11022e2d ("net: sparx5: add ethtool configuration and statistics support")
    Fixes: b37a1bae742f ("net: sparx5: add mactable support")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a55aec1425fc8e9bd5ea7c2f837e8ea2f380ae1
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Nov 15 18:39:34 2022 +0800

    cifs: Fix wrong return value checking when GETFLAGS
    
    [ Upstream commit 92bbd67a55fee50743b42825d1c016e7fd5c79f9 ]
    
    The return value of CIFSGetExtAttr is negative, should be checked
    with -EOPNOTSUPP rather than EOPNOTSUPP.
    
    Fixes: 64a5cfa6db94 ("Allow setting per-file compression via SMB2/3")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8baf1fc248b2e88642f094fea9509a9bf98c5bb
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Nov 14 11:05:19 2022 +0000

    net/x25: Fix skb leak in x25_lapb_receive_frame()
    
    [ Upstream commit 2929cceb2fcf0ded7182562e4888afafece82cce ]
    
    x25_lapb_receive_frame() using skb_copy() to get a private copy of
    skb, the new skb should be freed in the undersized/fragmented skb
    error handling path. Otherwise there is a memory leak.
    
    Fixes: cb101ed2c3c7 ("x25: Handle undersized/fragmented skbs")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Martin Schiller <ms@dev.tdt.de>
    Link: https://lore.kernel.org/r/20221114110519.514538-1-weiyongjun@huaweicloud.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af4b57fa6bd018ed2142875a1e232833435eef50
Author: Liu Jian <liujian56@huawei.com>
Date:   Mon Nov 14 17:55:49 2022 +0800

    net: ag71xx: call phylink_disconnect_phy if ag71xx_hw_enable() fail in ag71xx_open()
    
    [ Upstream commit c9b895c6878bdb6789dc1d7af60fd10f4a9f1937 ]
    
    If ag71xx_hw_enable() fails, call phylink_disconnect_phy() to clean up.
    And if phylink_of_phy_connect() fails, nothing needs to be done.
    Compile tested only.
    
    Fixes: 892e09153fa3 ("net: ag71xx: port to phylink")
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Link: https://lore.kernel.org/r/20221114095549.40342-1-liujian56@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61404a182eb57649d3e55e73d7a40a629d87e50b
Author: Anastasia Belova <abelova@astralinux.ru>
Date:   Tue Nov 15 17:27:01 2022 +0300

    cifs: add check for returning value of SMB2_close_init
    
    [ Upstream commit d520de6cb42e88a1d008b54f935caf9fc05951da ]
    
    If the returning value of SMB2_close_init is an error-value,
    exit the function.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 352d96f3acc6 ("cifs: multichannel: move channel selection above transport layer")
    
    Signed-off-by: Anastasia Belova <abelova@astralinux.ru>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3233f4bf3ddd3fd2f24ef2cf5ad3ec796e4c13f
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Sun Nov 13 19:59:50 2022 +0100

    platform/surface: aggregator: Do not check for repeated unsequenced packets
    
    [ Upstream commit d9a477f643eb3de71fbea5ae6103b800ceb8f547 ]
    
    Currently, we check any received packet whether we have already seen it
    previously, regardless of the packet type (sequenced / unsequenced). We
    do this by checking the sequence number. This assumes that sequence
    numbers are valid for both sequenced and unsequenced packets. However,
    this assumption appears to be incorrect.
    
    On some devices, the sequence number field of unsequenced packets (in
    particular HID input events on the Surface Pro 9) is always zero. As a
    result, the current retransmission check kicks in and discards all but
    the first unsequenced packet, breaking (among other things) keyboard and
    touchpad input.
    
    Note that we have, so far, only seen packets being retransmitted in
    sequenced communication. In particular, this happens when there is an
    ACK timeout, causing the EC (or us) to re-send the packet waiting for an
    ACK. Arguably, retransmission / duplication of unsequenced packets
    should not be an issue as there is no logical condition (such as an ACK
    timeout) to determine when a packet should be sent again.
    
    Therefore, remove the retransmission check for unsequenced packets
    entirely to resolve the issue.
    
    Fixes: c167b9c7e3d6 ("platform/surface: Add Surface Aggregator subsystem")
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20221113185951.224759-1-luzmaximilian@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69691714035ba158c7eb89337de65b5f75ca9b86
Author: Roger Pau Monné <roger.pau@citrix.com>
Date:   Thu Nov 10 17:31:44 2022 +0100

    platform/x86/intel: pmc: Don't unconditionally attach Intel PMC when virtualized
    
    [ Upstream commit 2dbfb3f33350e1e868d3d7ed4c176d8777150878 ]
    
    The current logic in the Intel PMC driver will forcefully attach it
    when detecting any CPU on the intel_pmc_core_platform_ids array,
    even if the matching ACPI device is not present.
    
    There's no checking in pmc_core_probe() to assert that the PMC device
    is present, and hence on virtualized environments the PMC device
    probes successfully, even if the underlying registers are not present.
    Before commit 21ae43570940 ("platform/x86: intel_pmc_core: Substitute PCI
    with CPUID enumeration") the driver would check for the presence of a
    specific PCI device, and that prevented the driver from attaching when
    running virtualized.
    
    Fix by only forcefully attaching the PMC device when not running
    virtualized.  Note that virtualized platforms can still get the device
    to load if the appropriate ACPI device is present on the tables
    provided to the VM.
    
    Make an exception for the Xen initial domain, which does have full
    hardware access, and hence can attach to the PMC if present.
    
    Fixes: 21ae43570940 ("platform/x86: intel_pmc_core: Substitute PCI with CPUID enumeration")
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Acked-by: David E. Box <david.e.box@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20221110163145.80374-1-roger.pau@citrix.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d93417d596402ddd46bd76c721f205d09d0d025
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Nov 15 16:16:43 2022 +0300

    drbd: use after free in drbd_create_device()
    
    [ Upstream commit a7a1598189228b5007369a9622ccdf587be0730f ]
    
    The drbd_destroy_connection() frees the "connection" so use the _safe()
    iterator to prevent a use after free.
    
    Fixes: b6f85ef9538b ("drbd: Iterate over all connections")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Reviewed-by: Christoph Böhmwalder <christoph.boehmwalder@linbit.com>
    Link: https://lore.kernel.org/r/Y3Jd5iZRbNQ9w6gm@kili
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc16a2c81a3eb1cbba8775f5bdc67856df903a7c
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Mon Nov 14 10:45:09 2022 +0200

    bridge: switchdev: Fix memory leaks when changing VLAN protocol
    
    [ Upstream commit 9d45921ee4cb364910097e7d1b7558559c2f9fd2 ]
    
    The bridge driver can offload VLANs to the underlying hardware either
    via switchdev or the 8021q driver. When the former is used, the VLAN is
    marked in the bridge driver with the 'BR_VLFLAG_ADDED_BY_SWITCHDEV'
    private flag.
    
    To avoid the memory leaks mentioned in the cited commit, the bridge
    driver will try to delete a VLAN via the 8021q driver if the VLAN is not
    marked with the previously mentioned flag.
    
    When the VLAN protocol of the bridge changes, switchdev drivers are
    notified via the 'SWITCHDEV_ATTR_ID_BRIDGE_VLAN_PROTOCOL' attribute, but
    the 8021q driver is also called to add the existing VLANs with the new
    protocol and delete them with the old protocol.
    
    In case the VLANs were offloaded via switchdev, the above behavior is
    both redundant and buggy. Redundant because the VLANs are already
    programmed in hardware and drivers that support VLAN protocol change
    (currently only mlx5) change the protocol upon the switchdev attribute
    notification. Buggy because the 8021q driver is called despite these
    VLANs being marked with 'BR_VLFLAG_ADDED_BY_SWITCHDEV'. This leads to
    memory leaks [1] when the VLANs are deleted.
    
    Fix by not calling the 8021q driver for VLANs that were already
    programmed via switchdev.
    
    [1]
    unreferenced object 0xffff8881f6771200 (size 256):
      comm "ip", pid 446855, jiffies 4298238841 (age 55.240s)
      hex dump (first 32 bytes):
        00 00 7f 0e 83 88 ff ff 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000012819ac>] vlan_vid_add+0x437/0x750
        [<00000000f2281fad>] __br_vlan_set_proto+0x289/0x920
        [<000000000632b56f>] br_changelink+0x3d6/0x13f0
        [<0000000089d25f04>] __rtnl_newlink+0x8ae/0x14c0
        [<00000000f6276baf>] rtnl_newlink+0x5f/0x90
        [<00000000746dc902>] rtnetlink_rcv_msg+0x336/0xa00
        [<000000001c2241c0>] netlink_rcv_skb+0x11d/0x340
        [<0000000010588814>] netlink_unicast+0x438/0x710
        [<00000000e1a4cd5c>] netlink_sendmsg+0x788/0xc40
        [<00000000e8992d4e>] sock_sendmsg+0xb0/0xe0
        [<00000000621b8f91>] ____sys_sendmsg+0x4ff/0x6d0
        [<000000000ea26996>] ___sys_sendmsg+0x12e/0x1b0
        [<00000000684f7e25>] __sys_sendmsg+0xab/0x130
        [<000000004538b104>] do_syscall_64+0x3d/0x90
        [<0000000091ed9678>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Fixes: 279737939a81 ("net: bridge: Fix VLANs memory leak")
    Reported-by: Vlad Buslov <vladbu@nvidia.com>
    Tested-by: Vlad Buslov <vladbu@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20221114084509.860831-1-idosch@nvidia.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d90a668c4bc64e5c889b1a3dc15e714708fdfc3
Author: Guangbin Huang <huangguangbin2@huawei.com>
Date:   Mon Nov 14 16:20:48 2022 +0800

    net: hns3: fix setting incorrect phy link ksettings for firmware in resetting process
    
    [ Upstream commit 510d7b6ae842e59ee00d57e5f07ac15131b6d899 ]
    
    Currently, if driver is in phy-imp(phy controlled by imp firmware) mode, as
    driver did not update phy link ksettings after initialization process or
    not update advertising when getting phy link ksettings from firmware, it
    may set incorrect phy link ksettings for firmware in resetting process.
    So fix it.
    
    Fixes: f5f2b3e4dcc0 ("net: hns3: add support for imp-controlled PHYs")
    Fixes: c5ef83cbb1e9 ("net: hns3: fix for phy_addr error in hclge_mac_mdio_config")
    Fixes: 2312e050f42b ("net: hns3: Fix for deadlock problem occurring when unregistering ae_algo")
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: Hao Lan <lanhao@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f7b2ef8fe924e299bc339811ea3f1b9935c040f
Author: Yuan Can <yuancan@huawei.com>
Date:   Mon Nov 14 02:56:59 2022 +0000

    net: ena: Fix error handling in ena_init()
    
    [ Upstream commit d349e9be5a2c2d7588a2c4e4bfa0bb3dc1226769 ]
    
    The ena_init() won't destroy workqueue created by
    create_singlethread_workqueue() when pci_register_driver() failed.
    Call destroy_workqueue() when pci_register_driver() failed to prevent the
    resource leak.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Acked-by: Shay Agroskin <shayagr@amazon.com>
    Link: https://lore.kernel.org/r/20221114025659.124726-1-yuancan@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2540eea1bdc32aefedcf80a3cb9f40dc4a7be576
Author: Yuan Can <yuancan@huawei.com>
Date:   Sun Nov 13 09:29:29 2022 +0000

    net: ionic: Fix error handling in ionic_init_module()
    
    [ Upstream commit 280c0f7cd0aa4d190619b18243110e052a90775c ]
    
    A problem about ionic create debugfs failed is triggered with the
    following log given:
    
     [  415.799514] debugfs: Directory 'ionic' with parent '/' already present!
    
    The reason is that ionic_init_module() returns ionic_bus_register_driver()
    directly without checking its return value, if ionic_bus_register_driver()
    failed, it returns without destroy the newly created debugfs, resulting
    the debugfs of ionic can never be created later.
    
     ionic_init_module()
       ionic_debugfs_create() # create debugfs directory
       ionic_bus_register_driver()
         pci_register_driver()
           driver_register()
             bus_add_driver()
               priv = kzalloc(...) # OOM happened
       # return without destroy debugfs directory
    
    Fix by removing debugfs when ionic_bus_register_driver() returns error.
    
    Fixes: fbfb8031533c ("ionic: Add hardware init and device commands")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Acked-by: Shannon Nelson <snelson@pensando.io>
    Link: https://lore.kernel.org/r/20221113092929.19161-1-yuancan@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c08c13cb13fa3866dd0700db3b246fcd2043ab81
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Nov 10 23:24:41 2022 +0800

    xen/pcpu: fix possible memory leak in register_pcpu()
    
    [ Upstream commit da36a2a76b01b210ffaa55cdc2c99bc8783697c5 ]
    
    In device_add(), dev_set_name() is called to allocate name, if it returns
    error, the name need be freed. As comment of device_register() says, it
    should use put_device() to give up the reference in the error path. So fix
    this by calling put_device(), then the name can be freed in kobject_cleanup().
    
    Fixes: f65c9bb3fb72 ("xen/pcpu: Xen physical cpus online/offline sys interface")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20221110152441.401630-1-yangyingliang@huawei.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97009f07f2176297c2fab340f51e4f8423dd3cb8
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Nov 11 23:10:20 2022 +0200

    net: dsa: make dsa_master_ioctl() see through port_hwtstamp_get() shims
    
    [ Upstream commit ed1fe1bebe18884b11e5536b5ac42e3a48960835 ]
    
    There are multi-generational drivers like mv88e6xxx which have code like
    this:
    
    int mv88e6xxx_port_hwtstamp_get(struct dsa_switch *ds, int port,
                                    struct ifreq *ifr)
    {
            if (!chip->info->ptp_support)
                    return -EOPNOTSUPP;
    
            ...
    }
    
    DSA wants to deny PTP timestamping on the master if the switch supports
    timestamping too. However it currently relies on the presence of the
    port_hwtstamp_get() callback to determine PTP capability, and this
    clearly does not work in that case (method is present but returns
    -EOPNOTSUPP).
    
    We should not deny PTP on the DSA master for those switches which truly
    do not support hardware timestamping.
    
    Create a dsa_port_supports_hwtstamp() method which actually probes for
    support by calling port_hwtstamp_get() and seeing whether that returned
    -EOPNOTSUPP or not.
    
    Fixes: f685e609a301 ("net: dsa: Deny PTP on master if switch supports it")
    Link: https://patchwork.kernel.org/project/netdevbpf/patch/20221110124345.3901389-1-festevam@gmail.com/
    Reported-by: Fabio Estevam <festevam@gmail.com>
    Reported-by: Steffen Bätz <steffen@innosonix.de>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Tested-by: Fabio Estevam <festevam@denx.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88da008e5e2f9753726ea5a51ef2eb144e9de927
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Fri Nov 11 09:20:44 2022 +0000

    net: mhi: Fix memory leak in mhi_net_dellink()
    
    [ Upstream commit f7c125bd79f50ec6094761090be81d02726ec6f4 ]
    
    MHI driver registers network device without setting the
    needs_free_netdev flag, and does NOT call free_netdev() when
    unregisters network device, which causes a memory leak.
    
    This patch calls free_netdev() to fix it since netdev_priv
    is used after unregister.
    
    Fixes: 13adac032982 ("net: mhi_net: Register wwan_ops for link creation")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f839715d032f1d07136e8e0a69ffdc46fa6e0d7
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Fri Nov 11 15:04:33 2022 +0800

    bnxt_en: Remove debugfs when pci_register_driver failed
    
    [ Upstream commit 991aef4ee4f6eb999924f429b943441a32835c8f ]
    
    When pci_register_driver failed, we need to remove debugfs,
    which will caused a resource leak, fix it.
    
    Resource leak logs as follows:
    [   52.184456] debugfs: Directory 'bnxt_en' with parent '/' already present!
    
    Fixes: cabfb09d87bd ("bnxt_en: add debugfs support for DIM")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b88713d92bd322e77e76c95f1c20ffd4ab77a1ae
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Fri Nov 11 09:47:34 2022 +0800

    net: caif: fix double disconnect client in chnl_net_open()
    
    [ Upstream commit 8fbb53c8bfd8c56ecf1f78dc821778b58f505503 ]
    
    When connecting to client timeout, disconnect client for twice in
    chnl_net_open(). Remove one. Compile tested only.
    
    Fixes: 2aa40aef9deb ("caif: Use link layer MTU instead of fixed MTU")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d2403416089efc712b639f317d060c01e1a887e
Author: Chuang Wang <nashuiliang@gmail.com>
Date:   Fri Nov 11 09:41:30 2022 +0800

    net: macvlan: Use built-in RCU list checking
    
    [ Upstream commit 5df1341ea822292275c56744aab9c536d75c33be ]
    
    hlist_for_each_entry_rcu() has built-in RCU and lock checking.
    
    Pass cond argument to hlist_for_each_entry_rcu() to silence false
    lockdep warning when CONFIG_PROVE_RCU_LIST is enabled.
    
    Execute as follow:
    
     ip link add link eth0 type macvlan mode source macaddr add <MAC-ADDR>
    
    The rtnl_lock is held when macvlan_hash_lookup_source() or
    macvlan_fill_info_macaddr() are called in the non-RCU read side section.
    So, pass lockdep_rtnl_is_held() to silence false lockdep warning.
    
    Fixes: 79cf79abce71 ("macvlan: add source mode")
    Signed-off-by: Chuang Wang <nashuiliang@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 596230471da3415e92ae6b9d2a4e26f4a81cac5a
Author: Wang ShaoBo <bobo.shaobowang@huawei.com>
Date:   Thu Nov 10 19:38:23 2022 +0800

    mISDN: fix misuse of put_device() in mISDN_register_device()
    
    [ Upstream commit 2d25107e111a85c56f601a5470f1780ec054e6ac ]
    
    We should not release reference by put_device() before calling device_initialize().
    
    Fixes: e7d1d4d9ac0d ("mISDN: fix possible memory leak in mISDN_register_device()")
    Signed-off-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07a6a8cf1712ecd0de531ef19c011aea90989a66
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Thu Nov 10 18:30:37 2022 +0800

    net: liquidio: release resources when liquidio driver open failed
    
    [ Upstream commit 8979f428a4afc215e390006e5ea19fd4e22c7ca9 ]
    
    When liquidio driver open failed, it doesn't release resources. Compile
    tested only.
    
    Fixes: 5b07aee11227 ("liquidio: MSIX support for CN23XX")
    Fixes: dbc97bfd3918 ("net: liquidio: Add missing null pointer checks")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19feb6cf41368e9c8237c8a6be158f161ad2f2d9
Author: Xiaolei Wang <xiaolei.wang@windriver.com>
Date:   Fri Oct 28 12:14:18 2022 +0800

    soc: imx8m: Enable OCOTP clock before reading the register
    
    [ Upstream commit 836fb30949d9edf91d7de696a884ceeae7e426d2 ]
    
    Commit 7d981405d0fd ("soc: imx8m: change to use platform driver") ever
    removed the dependency on bootloader for enabling OCOTP clock.  It
    helped to fix a kexec kernel hang issue.  But unfortunately it caused
    a regression on CAAM driver and got reverted.
    
    This is the second try to enable the OCOTP clock by directly calling
    clock API instead of indirectly enabling the clock via nvmem API.
    
    Fixes: ac34de14ac30 ("Revert "soc: imx8m: change to use platform driver"")
    Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
    Reviewed-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c54d706d829ccbfebcf112745c2281430dee574
Author: Mohd Faizal Abdul Rahim <faizal.abdul.rahim@intel.com>
Date:   Thu Nov 10 14:45:52 2022 +0800

    net: stmmac: ensure tx function is not running in stmmac_xdp_release()
    
    [ Upstream commit 77711683a50477de39757d67ab1a3638220d6860 ]
    
    When stmmac_xdp_release() is called, there is a possibility that tx
    function is still running on other queues which will lead to tx queue
    timed out and reset adapter.
    
    This commit ensure that tx function is not running xdp before release
    flow continue to run.
    
    Fixes: ac746c8520d9 ("net: stmmac: enhance XDP ZC driver level switching performance")
    Signed-off-by: Song Yoong Siang <yoong.siang.song@intel.com>
    Signed-off-by: Mohd Faizal Abdul Rahim <faizal.abdul.rahim@intel.com>
    Signed-off-by: Noor Azura Ahmad Tarmizi <noor.azura.ahmad.tarmizi@intel.com>
    Link: https://lore.kernel.org/r/20221110064552.22504-1-noor.azura.ahmad.tarmizi@linux.intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6219f46c2b9d5874da5ba1bb15e334684f1aa164
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Nov 10 02:16:42 2022 +0000

    net: hinic: Fix error handling in hinic_module_init()
    
    [ Upstream commit 8eab9be56cc6b702a445d2b6d0256aa0992316b3 ]
    
    A problem about hinic create debugfs failed is triggered with the
    following log given:
    
     [  931.419023] debugfs: Directory 'hinic' with parent '/' already present!
    
    The reason is that hinic_module_init() returns pci_register_driver()
    directly without checking its return value, if pci_register_driver()
    failed, it returns without destroy the newly created debugfs, resulting
    the debugfs of hinic can never be created later.
    
     hinic_module_init()
       hinic_dbg_register_debugfs() # create debugfs directory
       pci_register_driver()
         driver_register()
           bus_add_driver()
             priv = kzalloc(...) # OOM happened
       # return without destroy debugfs directory
    
    Fix by removing debugfs when pci_register_driver() returns error.
    
    Fixes: 253ac3a97921 ("hinic: add support to query sq info")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221110021642.80378-1-yuancan@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a05e3929668c8cfef495c69752a9e91fac4878f
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 9 21:28:32 2022 +0800

    mISDN: fix possible memory leak in mISDN_dsp_element_register()
    
    [ Upstream commit 98a2ac1ca8fd6eca6867726fe238d06e75eb1acd ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically,
    use put_device() to give up the reference, so that the name can be
    freed in kobject_cleanup() when the refcount is 0.
    
    The 'entry' is going to be freed in mISDN_dsp_dev_release(), so the
    kfree() is removed. list_del() is called in mISDN_dsp_dev_release(),
    so it need be initialized.
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221109132832.3270119-1-yangyingliang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ee6455c9cfa6af2dddc2701673ccaf5fb0bd7d2
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Nov 9 15:01:36 2022 +0000

    net: bgmac: Drop free_netdev() from bgmac_enet_remove()
    
    [ Upstream commit 6f928ab8ee9bfbcb0e631c47ea8a16c3d5116ff1 ]
    
    netdev is allocated in bgmac_alloc() with devm_alloc_etherdev() and will
    be auto released in ->remove and ->probe failure path. Using free_netdev()
    in bgmac_enet_remove() leads to double free.
    
    Fixes: 34a5102c3235 ("net: bgmac: allocate struct bgmac just once & don't copy it")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    
    Link: https://lore.kernel.org/r/20221109150136.2991171-1-weiyongjun@huaweicloud.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ff4fa179e4e678cb6b423d8106657285c58d0af
Author: Xu Kuohai <xukuohai@huawei.com>
Date:   Thu Nov 10 07:21:28 2022 -0500

    bpf: Initialize same number of free nodes for each pcpu_freelist
    
    [ Upstream commit 4b45cd81f737d79d0fbfc0d320a1e518e7f0bbf0 ]
    
    pcpu_freelist_populate() initializes nr_elems / num_possible_cpus() + 1
    free nodes for some CPUs, and then possibly one CPU with fewer nodes,
    followed by remaining cpus with 0 nodes. For example, when nr_elems == 256
    and num_possible_cpus() == 32, CPU 0~27 each gets 9 free nodes, CPU 28 gets
    4 free nodes, CPU 29~31 get 0 free nodes, while in fact each CPU should get
    8 nodes equally.
    
    This patch initializes nr_elems / num_possible_cpus() free nodes for each
    CPU firstly, then allocates the remaining free nodes by one for each CPU
    until no free nodes left.
    
    Fixes: e19494edab82 ("bpf: introduce percpu_freelist")
    Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20221110122128.105214-1-xukuohai@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12f178cf05f3c59cb56970ba3222cd60aaf8afa1
Author: Liao Chang <liaochang1@huawei.com>
Date:   Thu Nov 3 09:18:15 2022 +0800

    MIPS: Loongson64: Add WARN_ON on kexec related kmalloc failed
    
    [ Upstream commit fa706927f4722a2df723b2a28d139b1904a3e7fa ]
    
    Add WARN_ON on kexec related kmalloc failed, avoid to pass NULL pointer
    to following memcpy and loongson_kexec_prepare.
    
    Fixes: 6ce48897ce47 ("MIPS: Loongson64: Add kexec/kdump support")
    Signed-off-by: Liao Chang <liaochang1@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4d6e024bea2526e91c1d4c70aa40a79cedb1b8c
Author: Rongwei Zhang <pudh4418@gmail.com>
Date:   Wed Nov 2 20:27:39 2022 +0800

    MIPS: fix duplicate definitions for exported symbols
    
    [ Upstream commit 612d80784fdc0c2e2ee2e2d901a55ef2f72ebf4b ]
    
    Building with clang-14 fails with:
    
    AS      arch/mips/kernel/relocate_kernel.o
    <unknown>:0: error: symbol 'kexec_args' is already defined
    <unknown>:0: error: symbol 'secondary_kexec_args' is already defined
    <unknown>:0: error: symbol 'kexec_start_address' is already defined
    <unknown>:0: error: symbol 'kexec_indirection_page' is already defined
    <unknown>:0: error: symbol 'relocate_new_kernel_size' is already defined
    
    It turns out EXPORT defined in asm/asm.h expands to a symbol definition,
    so there is no need to define these symbols again. Remove duplicated
    symbol definitions.
    
    Fixes: 7aa1c8f47e7e ("MIPS: kdump: Add support")
    Signed-off-by: Rongwei Zhang <pudh4418@gmail.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44142b652a2811df3c191cebb1c64b3c6ca6b409
Author: Jaco Coetzee <jaco.coetzee@corigine.com>
Date:   Wed Nov 9 15:27:57 2022 -0500

    nfp: change eeprom length to max length enumerators
    
    [ Upstream commit f3a72878a3de720661b7ed0d6b7f7c506ddb8a52 ]
    
    Extend the size of QSFP EEPROM for types SSF8436 and SFF8636
    from 256 to 640 bytes in order to expose all the EEPROM pages by
    ethtool.
    
    For SFF-8636 and SFF-8436 specifications, the driver exposes
    256 bytes of EEPROM data for ethtool's get_module_eeprom()
    callback, resulting in "netlink error: Invalid argument" when
    an EEPROM read with an offset larger than 256 bytes is attempted.
    
    Changing the length enumerators to the _MAX_LEN
    variants exposes all 640 bytes of the EEPROM allowing upper
    pages 1, 2 and 3 to be read.
    
    Fixes: 96d971e307cc ("ethtool: Add fallback to get_module_eeprom from netlink command")
    Signed-off-by: Jaco Coetzee <jaco.coetzee@corigine.com>
    Reviewed-by: Louis Peens <louis.peens@corigine.com>
    Signed-off-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f23058dc2398db1d8faca9a2b1ce30b85cdd8b22
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 21:40:04 2022 +0800

    ata: libata-transport: fix error handling in ata_tdev_add()
    
    [ Upstream commit 1ff36351309e3eadcff297480baf4785e726de9b ]
    
    In ata_tdev_add(), the return value of transport_add_device() is
    not checked. As a result, it causes null-ptr-deref while removing
    the module, because transport_remove_device() is called to remove
    the device that was not added.
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000000000000d0
    CPU: 13 PID: 13603 Comm: rmmod Kdump: loaded Tainted: G        W          6.1.0-rc3+ #36
    pstate: 60400009 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : device_del+0x48/0x3a0
    lr : device_del+0x44/0x3a0
    Call trace:
     device_del+0x48/0x3a0
     attribute_container_class_device_del+0x28/0x40
     transport_remove_classdev+0x60/0x7c
     attribute_container_device_trigger+0x118/0x120
     transport_remove_device+0x20/0x30
     ata_tdev_delete+0x24/0x50 [libata]
     ata_tlink_delete+0x40/0xa0 [libata]
     ata_tport_delete+0x2c/0x60 [libata]
     ata_port_detach+0x148/0x1b0 [libata]
     ata_pci_remove_one+0x50/0x80 [libata]
     ahci_remove_one+0x4c/0x8c [ahci]
    
    Fix this by checking and handling return value of transport_add_device()
    in ata_tdev_add(). In the error path, device_del() is called to delete
    the device which was added earlier in this function, and ata_tdev_free()
    is called to free ata_dev.
    
    Fixes: d9027470b886 ("[libata] Add ATA transport class")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67b219314628b90b3a314528e177335b0cd5c70b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 21:40:03 2022 +0800

    ata: libata-transport: fix error handling in ata_tlink_add()
    
    [ Upstream commit cf0816f6322c5c37ee52655f928e91ecf32da103 ]
    
    In ata_tlink_add(), the return value of transport_add_device() is
    not checked. As a result, it causes null-ptr-deref while removing
    the module, because transport_remove_device() is called to remove
    the device that was not added.
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000000000000d0
    CPU: 33 PID: 13850 Comm: rmmod Kdump: loaded Tainted: G        W          6.1.0-rc3+ #12
    pstate: 60400009 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : device_del+0x48/0x39c
    lr : device_del+0x44/0x39c
    Call trace:
     device_del+0x48/0x39c
     attribute_container_class_device_del+0x28/0x40
     transport_remove_classdev+0x60/0x7c
     attribute_container_device_trigger+0x118/0x120
     transport_remove_device+0x20/0x30
     ata_tlink_delete+0x88/0xb0 [libata]
     ata_tport_delete+0x2c/0x60 [libata]
     ata_port_detach+0x148/0x1b0 [libata]
     ata_pci_remove_one+0x50/0x80 [libata]
     ahci_remove_one+0x4c/0x8c [ahci]
    
    Fix this by checking and handling return value of transport_add_device()
    in ata_tlink_add().
    
    Fixes: d9027470b886 ("[libata] Add ATA transport class")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7bb1b7a7bf26f6b7372b7b683daece4a42fda02
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 21:40:02 2022 +0800

    ata: libata-transport: fix error handling in ata_tport_add()
    
    [ Upstream commit 3613dbe3909dcc637fe6be00e4dc43b4aa0470ee ]
    
    In ata_tport_add(), the return value of transport_add_device() is
    not checked. As a result, it causes null-ptr-deref while removing
    the module, because transport_remove_device() is called to remove
    the device that was not added.
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000000000000d0
    CPU: 12 PID: 13605 Comm: rmmod Kdump: loaded Tainted: G        W          6.1.0-rc3+ #8
    pstate: 60400009 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : device_del+0x48/0x39c
    lr : device_del+0x44/0x39c
    Call trace:
     device_del+0x48/0x39c
     attribute_container_class_device_del+0x28/0x40
     transport_remove_classdev+0x60/0x7c
     attribute_container_device_trigger+0x118/0x120
     transport_remove_device+0x20/0x30
     ata_tport_delete+0x34/0x60 [libata]
     ata_port_detach+0x148/0x1b0 [libata]
     ata_pci_remove_one+0x50/0x80 [libata]
     ahci_remove_one+0x4c/0x8c [ahci]
    
    Fix this by checking and handling return value of transport_add_device()
    in ata_tport_add().
    
    Fixes: d9027470b886 ("[libata] Add ATA transport class")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 377ff82c33c0cb74562a353361b64b33c09562cf
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 8 21:40:01 2022 +0800

    ata: libata-transport: fix double ata_host_put() in ata_tport_add()
    
    [ Upstream commit 8c76310740807ade5ecdab5888f70ecb6d35732e ]
    
    In the error path in ata_tport_add(), when calling put_device(),
    ata_tport_release() is called, it will put the refcount of 'ap->host'.
    
    And then ata_host_put() is called again, the refcount is decreased
    to 0, ata_host_release() is called, all ports are freed and set to
    null.
    
    When unbinding the device after failure, ata_host_stop() is called
    to release the resources, it leads a null-ptr-deref(), because all
    the ports all freed and null.
    
    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000008
    CPU: 7 PID: 18671 Comm: modprobe Kdump: loaded Tainted: G            E      6.1.0-rc3+ #8
    pstate: 80400009 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : ata_host_stop+0x3c/0x84 [libata]
    lr : release_nodes+0x64/0xd0
    Call trace:
     ata_host_stop+0x3c/0x84 [libata]
     release_nodes+0x64/0xd0
     devres_release_all+0xbc/0x1b0
     device_unbind_cleanup+0x20/0x70
     really_probe+0x158/0x320
     __driver_probe_device+0x84/0x120
     driver_probe_device+0x44/0x120
     __driver_attach+0xb4/0x220
     bus_for_each_dev+0x78/0xdc
     driver_attach+0x2c/0x40
     bus_add_driver+0x184/0x240
     driver_register+0x80/0x13c
     __pci_register_driver+0x4c/0x60
     ahci_pci_driver_init+0x30/0x1000 [ahci]
    
    Fix this by removing redundant ata_host_put() in the error path.
    
    Fixes: 2623c7a5f279 ("libata: add refcounting to ata_host")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 494df0b0efe81612567db680aa9893873ed2b4ef
Author: Marek Vasut <marex@denx.de>
Date:   Wed Nov 2 20:19:47 2022 +0100

    arm64: dts: imx8mn: Fix NAND controller size-cells
    
    [ Upstream commit 5468e93b5b1083eaa729f98e59da18c85d9c4126 ]
    
    The NAND controller size-cells should be 0 per DT bindings.
    Fix the following warning produces by DT bindings check:
    "
    nand-controller@33002000: #size-cells:0:0: 0 was expected
    nand-controller@33002000: Unevaluated properties are not allowed ('#address-cells', '#size-cells' were unexpected)
    "
    
    Fixes: 6c3debcbae47a ("arm64: dts: freescale: Add i.MX8MN dtsi support")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7178d568f7cc2b1f729f569345922785a00509a3
Author: Marek Vasut <marex@denx.de>
Date:   Wed Nov 2 20:19:46 2022 +0100

    arm64: dts: imx8mm: Fix NAND controller size-cells
    
    [ Upstream commit 1610233bc2c2cae2dff9e101e6ea5ef69cceb0e9 ]
    
    The NAND controller size-cells should be 0 per DT bindings.
    Fix the following warning produces by DT bindings check:
    "
    nand-controller@33002000: #size-cells:0:0: 0 was expected
    nand-controller@33002000: Unevaluated properties are not allowed ('#address-cells', '#size-cells' were unexpected)
    "
    Fix the missing space in node name too.
    
    Fixes: a05ea40eb384e ("arm64: dts: imx: Add i.mx8mm dtsi support")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ccf18c82a0a939074dcb45b663a81623a4b75a5
Author: Marek Vasut <marex@denx.de>
Date:   Wed Nov 2 20:19:45 2022 +0100

    ARM: dts: imx7: Fix NAND controller size-cells
    
    [ Upstream commit 753395ea1e45c724150070b5785900b6a44bd5fb ]
    
    The NAND controller size-cells should be 0 per DT bindings.
    Fix the following warning produces by DT bindings check:
    "
    nand-controller@33002000: #size-cells:0:0: 0 was expected
    nand-controller@33002000: Unevaluated properties are not allowed ('#address-cells', '#size-cells' were unexpected)
    "
    Fix the missing space in node name too.
    
    Fixes: e7495a45a76de ("ARM: dts: imx7: add GPMI NAND and APBH DMA")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e884a6c2d49a6c12761e5bed851e9fe93bd923a1
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Tue Nov 1 15:07:16 2022 +0800

    drm: Fix potential null-ptr-deref in drm_vblank_destroy_worker()
    
    [ Upstream commit 4979524f5a2a8210e87fde2f642b0dc060860821 ]
    
    drm_vblank_init() call drmm_add_action_or_reset() with
    drm_vblank_init_release() as action. If __drmm_add_action() failed, will
    directly call drm_vblank_init_release() with the vblank whose worker is
    NULL. As the resule, a null-ptr-deref will happen in
    kthread_destroy_worker(). Add the NULL check before calling
    drm_vblank_destroy_worker().
    
    BUG: null-ptr-deref
    KASAN: null-ptr-deref in range [0x0000000000000068-0x000000000000006f]
    CPU: 5 PID: 961 Comm: modprobe Not tainted 6.0.0-11331-gd465bff130bf-dirty
    RIP: 0010:kthread_destroy_worker+0x25/0xb0
      Call Trace:
        <TASK>
        drm_vblank_init_release+0x124/0x220 [drm]
        ? drm_crtc_vblank_restore+0x8b0/0x8b0 [drm]
        __drmm_add_action_or_reset+0x41/0x50 [drm]
        drm_vblank_init+0x282/0x310 [drm]
        vkms_init+0x35f/0x1000 [vkms]
        ? 0xffffffffc4508000
        ? lock_is_held_type+0xd7/0x130
        ? __kmem_cache_alloc_node+0x1c2/0x2b0
        ? lock_is_held_type+0xd7/0x130
        ? 0xffffffffc4508000
        do_one_initcall+0xd0/0x4f0
        ...
        do_syscall_64+0x35/0x80
        entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Fixes: 5e6c2b4f9161 ("drm/vblank: Add vblank works")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221101070716.9189-3-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07e56de8766fe5be67252596244b84ac0ec0de91
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Tue Nov 1 15:07:15 2022 +0800

    drm/drv: Fix potential memory leak in drm_dev_init()
    
    [ Upstream commit ff963634f7b2e0dc011349abb3fb81a0d074f443 ]
    
    drm_dev_init() will add drm_dev_init_release() as a callback. When
    drmm_add_action() failed, the release function won't be added. As the
    result, the ref cnt added by device_get() in drm_dev_init() won't be put
    by drm_dev_init_release(), which leads to the memleak. Use
    drmm_add_action_or_reset() instead of drmm_add_action() to prevent
    memleak.
    
    unreferenced object 0xffff88810bc0c800 (size 2048):
      comm "modprobe", pid 8322, jiffies 4305809845 (age 15.292s)
      hex dump (first 32 bytes):
        e8 cc c0 0b 81 88 ff ff ff ff ff ff 00 00 00 00  ................
        20 24 3c 0c 81 88 ff ff 18 c8 c0 0b 81 88 ff ff   $<.............
      backtrace:
        [<000000007251f72d>] __kmalloc+0x4b/0x1c0
        [<0000000045f21f26>] platform_device_alloc+0x2d/0xe0
        [<000000004452a479>] platform_device_register_full+0x24/0x1c0
        [<0000000089f4ea61>] 0xffffffffa0736051
        [<00000000235b2441>] do_one_initcall+0x7a/0x380
        [<0000000001a4a177>] do_init_module+0x5c/0x230
        [<000000002bf8a8e2>] load_module+0x227d/0x2420
        [<00000000637d6d0a>] __do_sys_finit_module+0xd5/0x140
        [<00000000c99fc324>] do_syscall_64+0x3f/0x90
        [<000000004d85aa77>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 2cbf7fc6718b ("drm: Use drmm_ for drm_dev_init cleanup")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221101070716.9189-2-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45c300613beee1b1cb65a9ac2d0dcff2567206e4
Author: Aishwarya Kothari <aishwarya.kothari@toradex.com>
Date:   Wed Aug 31 16:16:22 2022 +0200

    drm/panel: simple: set bpc field for logic technologies displays
    
    [ Upstream commit 876153ab068b2507a19aa3ef481f5b00a2cc780f ]
    
    In case bpc is not set for a panel it then throws a WARN(). Add bpc to
    the panels logictechno_lt170410_2whc and logictechno_lt161010_2nh.
    
    Fixes: 5728fe7fa539 ("drm/panel: simple: add display timings for logic technologies displays")
    Signed-off-by: Aishwarya Kothari <aishwarya.kothari@toradex.com>
    Signed-off-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220831141622.39605-1-francesco.dolcini@toradex.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 779f3f9e0cdc89db02720213200a2c8bbe990078
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Nov 10 17:44:45 2022 +0800

    drm/vc4: kms: Fix IS_ERR() vs NULL check for vc4_kms
    
    [ Upstream commit dba9e3467425800f9d3a14e8b6a0f85c731c1650 ]
    
    The drm_atomic_get_new_private_obj_state() function returns NULL
    on error path, drm_atomic_get_old_private_obj_state() function
    returns NULL on error path, too, they does not return error pointers.
    
    By the way, vc4_hvs_get_new/old_global_state() should return
    ERR_PTR(-EINVAL), otherwise there will be null-ptr-defer issue,
    such as follows:
    
    In function vc4_atomic_commit_tail():
      |-- old_hvs_state = vc4_hvs_get_old_global_state(state); <-- return NULL
      |-- if (WARN_ON(IS_ERR(old_hvs_state))) <-- no return
      |-- unsigned long state_rate = max(old_hvs_state->core_clock_rate,
            new_hvs_state->core_clock_rate); <-- null-ptr-defer
    
    Fixes: 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a commit")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221110094445.2930509-6-cuigaosheng1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97e5b508e96176f1a73888ed89df396d7041bfcb
Author: Zeng Heng <zengheng4@huawei.com>
Date:   Thu Nov 10 16:20:56 2022 +0800

    pinctrl: devicetree: fix null pointer dereferencing in pinctrl_dt_to_map
    
    [ Upstream commit 91d5c5060ee24fe8da88cd585bb43b843d2f0dce ]
    
    Here is the BUG report by KASAN about null pointer dereference:
    
    BUG: KASAN: null-ptr-deref in strcmp+0x2e/0x50
    Read of size 1 at addr 0000000000000000 by task python3/2640
    Call Trace:
     strcmp
     __of_find_property
     of_find_property
     pinctrl_dt_to_map
    
    kasprintf() would return NULL pointer when kmalloc() fail to allocate.
    So directly return ENOMEM, if kasprintf() return NULL pointer.
    
    Fixes: 57291ce295c0 ("pinctrl: core device tree mapping table parsing support")
    Signed-off-by: Zeng Heng <zengheng4@huawei.com>
    Link: https://lore.kernel.org/r/20221110082056.2014898-1-zengheng4@huawei.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a77b8557fdb05be01ffda6ae69439d8100fa101
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Fri Sep 23 19:52:08 2022 +0100

    parport_pc: Avoid FIFO port location truncation
    
    [ Upstream commit ab126f51c93a15093df604f661c9480854c005a3 ]
    
    Match the data type of a temporary holding a reference to the FIFO port
    with the type of the original reference coming from `struct parport',
    avoiding data truncation with LP64 ports such as SPARC64 that refer to
    PCI port I/O locations via their corresponding MMIO addresses and will
    therefore have non-zero bits in the high 32-bit part of the reference.
    And in any case it is cleaner to have the data types matching here.
    
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/linux-pci/20220419033752.GA1101844@bhelgaas/
    Acked-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2209231912550.29493@angie.orcam.me.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d03c2911c529ea4d6ebfec53425f1091e8d402b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri Nov 4 10:13:34 2022 +0800

    siox: fix possible memory leak in siox_device_add()
    
    [ Upstream commit 6e63153db50059fb78b8a8447b132664887d24e3 ]
    
    If device_register() returns error in siox_device_add(),
    the name allocated by dev_set_name() need be freed. As
    comment of device_register() says, it should use put_device()
    to give up the reference in the error path. So fix this
    by calling put_device(), then the name can be freed in
    kobject_cleanup(), and sdevice is freed in siox_device_release(),
    set it to null in error path.
    
    Fixes: bbecb07fa0af ("siox: new driver framework for eckelmann SIOX")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Link: https://lore.kernel.org/r/20221104021334.618189-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 530e987a02263a1651cc72f09f504ff1890ba8c3
Author: D Scott Phillips <scott@os.amperecomputing.com>
Date:   Wed Nov 2 09:01:06 2022 -0700

    arm64: Fix bit-shifting UB in the MIDR_CPU_MODEL() macro
    
    [ Upstream commit 8ec8490a1950efeccb00967698cf7cb2fcd25ca7 ]
    
    CONFIG_UBSAN_SHIFT with gcc-5 complains that the shifting of
    ARM_CPU_IMP_AMPERE (0xC0) into bits [31:24] by MIDR_CPU_MODEL() is
    undefined behavior. Well, sort of, it actually spells the error as:
    
     arch/arm64/kernel/proton-pack.c: In function 'spectre_bhb_loop_affected':
     arch/arm64/include/asm/cputype.h:44:2: error: initializer element is not constant
       (((imp)   << MIDR_IMPLEMENTOR_SHIFT) | \
       ^
    
    This isn't an issue for other Implementor codes, as all the other codes
    have zero in the top bit and so are representable as a signed int.
    
    Cast the implementor code to unsigned in MIDR_CPU_MODEL to remove the
    undefined behavior.
    
    Fixes: 0e5d5ae837c8 ("arm64: Add AMPERE1 to the Spectre-BHB affected list")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: D Scott Phillips <scott@os.amperecomputing.com>
    Link: https://lore.kernel.org/r/20221102160106.1096948-1-scott@os.amperecomputing.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4944497827a3d14bc5a26dbcfb7433eb5a956c0
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Tue Nov 8 13:11:31 2022 +0800

    bpf: Fix memory leaks in __check_func_call
    
    [ Upstream commit eb86559a691cea5fa63e57a03ec3dc9c31e97955 ]
    
    kmemleak reports this issue:
    
    unreferenced object 0xffff88817139d000 (size 2048):
      comm "test_progs", pid 33246, jiffies 4307381979 (age 45851.820s)
      hex dump (first 32 bytes):
        01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<0000000045f075f0>] kmalloc_trace+0x27/0xa0
        [<0000000098b7c90a>] __check_func_call+0x316/0x1230
        [<00000000b4c3c403>] check_helper_call+0x172e/0x4700
        [<00000000aa3875b7>] do_check+0x21d8/0x45e0
        [<000000001147357b>] do_check_common+0x767/0xaf0
        [<00000000b5a595b4>] bpf_check+0x43e3/0x5bc0
        [<0000000011e391b1>] bpf_prog_load+0xf26/0x1940
        [<0000000007f765c0>] __sys_bpf+0xd2c/0x3650
        [<00000000839815d6>] __x64_sys_bpf+0x75/0xc0
        [<00000000946ee250>] do_syscall_64+0x3b/0x90
        [<0000000000506b7f>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The root case here is: In function prepare_func_exit(), the callee is
    not released in the abnormal scenario after "state->curframe--;". To
    fix, move "state->curframe--;" to the very bottom of the function,
    right when we free callee and reset frame[] pointer to NULL, as Andrii
    suggested.
    
    In addition, function __check_func_call() has a similar problem. In
    the abnormal scenario before "state->curframe++;", the callee also
    should be released by free_func_state().
    
    Fixes: 69c087ba6225 ("bpf: Add bpf_for_each_map_elem() helper")
    Fixes: fd978bf7fd31 ("bpf: Add reference tracking to verifier")
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Link: https://lore.kernel.org/r/1667884291-15666-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25521fd2e217b03e24609908cdba8bcab186595b
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Mon Nov 7 23:39:44 2022 +0300

    block: sed-opal: kmalloc the cmd/resp buffers
    
    [ Upstream commit f829230dd51974c1f4478900ed30bb77ba530b40 ]
    
    In accordance with [1] the DMA-able memory buffers must be
    cacheline-aligned otherwise the cache writing-back and invalidation
    performed during the mapping may cause the adjacent data being lost. It's
    specifically required for the DMA-noncoherent platforms [2]. Seeing the
    opal_dev.{cmd,resp} buffers are implicitly used for DMAs in the NVME and
    SCSI/SD drivers in framework of the nvme_sec_submit() and sd_sec_submit()
    methods respectively they must be cacheline-aligned to prevent the denoted
    problem. One of the option to guarantee that is to kmalloc the buffers
    [2]. Let's explicitly allocate them then instead of embedding into the
    opal_dev structure instance.
    
    Note this fix was inspired by the commit c94b7f9bab22 ("nvme-hwmon:
    kmalloc the NVME SMART log buffer").
    
    [1] Documentation/core-api/dma-api.rst
    [2] Documentation/core-api/dma-api-howto.rst
    
    Fixes: 455a7b238cd6 ("block: Add Sed-opal library")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20221107203944.31686-1-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f21d653c648735657e23948b1d7ac7273de0f87
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Nov 7 20:48:28 2022 +0800

    scsi: scsi_transport_sas: Fix error handling in sas_phy_add()
    
    [ Upstream commit 5d7bebf2dfb0dc97aac1fbace0910e557ecdb16f ]
    
    If transport_add_device() fails in sas_phy_add(), the kernel will crash
    trying to delete the device in transport_remove_device() called from
    sas_remove_host().
    
    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000108
    CPU: 61 PID: 42829 Comm: rmmod Kdump: loaded Tainted: G        W          6.1.0-rc1+ #173
    pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : device_del+0x54/0x3d0
    lr : device_del+0x37c/0x3d0
    Call trace:
     device_del+0x54/0x3d0
     attribute_container_class_device_del+0x28/0x38
     transport_remove_classdev+0x6c/0x80
     attribute_container_device_trigger+0x108/0x110
     transport_remove_device+0x28/0x38
     sas_phy_delete+0x30/0x60 [scsi_transport_sas]
     do_sas_phy_delete+0x6c/0x80 [scsi_transport_sas]
     device_for_each_child+0x68/0xb0
     sas_remove_children+0x40/0x50 [scsi_transport_sas]
     sas_remove_host+0x20/0x38 [scsi_transport_sas]
     hisi_sas_remove+0x40/0x68 [hisi_sas_main]
     hisi_sas_v2_remove+0x20/0x30 [hisi_sas_v2_hw]
     platform_remove+0x2c/0x60
    
    Fix this by checking and handling return value of transport_add_device()
    in sas_phy_add().
    
    Fixes: c7ebbbce366c ("[SCSI] SAS transport class")
    Suggested-by: John Garry <john.g.garry@oracle.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20221107124828.115557-1-yangyingliang@huawei.com
    Reviewed-by: John Garry <john.g.garry@oracle.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cd28bc410d2014447bae8db9de5e81297c01c03
Author: Quentin Schulz <quentin.schulz@theobroma-systems.com>
Date:   Tue Oct 18 14:17:23 2022 +0200

    pinctrl: rockchip: list all pins in a possible mux route for PX30
    
    [ Upstream commit bee55f2e7a44e7a7676e264b42f026e34bd244d9 ]
    
    The mux routes are incomplete for the PX30. This was discovered because
    we had a HW design using cif-clkoutm1 with the correct pinmux in the
    Device Tree but the clock would still not work.
    
    There are actually two muxing required: the pin muxing (performed by the
    usual Device Tree pinctrl nodes) and the "function" muxing (m0 vs m1;
    performed by the mux routing inside the driver). The pin muxing was
    correct but the function muxing was not.
    
    This adds the missing pins and their configuration for the mux routes
    that are already specified in the driver.
    
    Note that there are some "conflicts": it is possible *in Device Tree* to
    (attempt to) mux the pins for e.g. clkoutm1 and clkinm0 at the same time
    but this is actually not possible in hardware (because both share the
    same bit for the function muxing). Since it is an impossible hardware
    design, it is not deemed necessary to prevent the user from attempting
    to "misconfigure" the pins/functions.
    
    Fixes: 87065ca9b8e5 ("pinctrl: rockchip: Add pinctrl support for PX30")
    Signed-off-by: Quentin Schulz <quentin.schulz@theobroma-systems.com>
    Link: https://lore.kernel.org/r/20221017-upstream-px30-cif-clkoutm1-v1-0-4ea1389237f7@theobroma-systems.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab79b8dbe21ebd7399bfc90d25a168ec63d87bb7
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Mon Oct 31 21:40:31 2022 +0800

    ASoC: soc-utils: Remove __exit for snd_soc_util_exit()
    
    [ Upstream commit 314d34fe7f0a5836cb0472950c1f17744b4efde8 ]
    
    snd_soc_util_exit() is called in __init snd_soc_init() for cleanup.
    Remove the __exit annotation for it to fix the build warning:
    
    WARNING: modpost: sound/soc/snd-soc-core.o: section mismatch in reference: init_module (section: .init.text) -> snd_soc_util_exit (section: .exit.text)
    
    Fixes: 6ec27c53886c ("ASoC: core: Fix use-after-free in snd_soc_exit()")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221031134031.256511-1-chenzhongjin@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eaa8edd86514afac9deb9bf9a5053e74f37edf40
Author: Baisong Zhong <zhongbaisong@huawei.com>
Date:   Wed Nov 2 16:16:20 2022 +0800

    bpf, test_run: Fix alignment problem in bpf_prog_test_run_skb()
    
    [ Upstream commit d3fd203f36d46aa29600a72d57a1b61af80e4a25 ]
    
    We got a syzkaller problem because of aarch64 alignment fault
    if KFENCE enabled. When the size from user bpf program is an odd
    number, like 399, 407, etc, it will cause the struct skb_shared_info's
    unaligned access. As seen below:
    
      BUG: KFENCE: use-after-free read in __skb_clone+0x23c/0x2a0 net/core/skbuff.c:1032
    
      Use-after-free read at 0xffff6254fffac077 (in kfence-#213):
       __lse_atomic_add arch/arm64/include/asm/atomic_lse.h:26 [inline]
       arch_atomic_add arch/arm64/include/asm/atomic.h:28 [inline]
       arch_atomic_inc include/linux/atomic-arch-fallback.h:270 [inline]
       atomic_inc include/asm-generic/atomic-instrumented.h:241 [inline]
       __skb_clone+0x23c/0x2a0 net/core/skbuff.c:1032
       skb_clone+0xf4/0x214 net/core/skbuff.c:1481
       ____bpf_clone_redirect net/core/filter.c:2433 [inline]
       bpf_clone_redirect+0x78/0x1c0 net/core/filter.c:2420
       bpf_prog_d3839dd9068ceb51+0x80/0x330
       bpf_dispatcher_nop_func include/linux/bpf.h:728 [inline]
       bpf_test_run+0x3c0/0x6c0 net/bpf/test_run.c:53
       bpf_prog_test_run_skb+0x638/0xa7c net/bpf/test_run.c:594
       bpf_prog_test_run kernel/bpf/syscall.c:3148 [inline]
       __do_sys_bpf kernel/bpf/syscall.c:4441 [inline]
       __se_sys_bpf+0xad0/0x1634 kernel/bpf/syscall.c:4381
    
      kfence-#213: 0xffff6254fffac000-0xffff6254fffac196, size=407, cache=kmalloc-512
    
      allocated by task 15074 on cpu 0 at 1342.585390s:
       kmalloc include/linux/slab.h:568 [inline]
       kzalloc include/linux/slab.h:675 [inline]
       bpf_test_init.isra.0+0xac/0x290 net/bpf/test_run.c:191
       bpf_prog_test_run_skb+0x11c/0xa7c net/bpf/test_run.c:512
       bpf_prog_test_run kernel/bpf/syscall.c:3148 [inline]
       __do_sys_bpf kernel/bpf/syscall.c:4441 [inline]
       __se_sys_bpf+0xad0/0x1634 kernel/bpf/syscall.c:4381
       __arm64_sys_bpf+0x50/0x60 kernel/bpf/syscall.c:4381
    
    To fix the problem, we adjust @size so that (@size + @hearoom) is a
    multiple of SMP_CACHE_BYTES. So we make sure the struct skb_shared_info
    is aligned to a cache line.
    
    Fixes: 1cf1cae963c2 ("bpf: introduce BPF_PROG_TEST_RUN command")
    Signed-off-by: Baisong Zhong <zhongbaisong@huawei.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/bpf/20221102081620.1465154-1-zhongbaisong@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33cabe04d2c8562c4a1d205b419b45d1339f0b64
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Sun Oct 2 12:07:09 2022 +0800

    tty: n_gsm: fix sleep-in-atomic-context bug in gsm_control_send
    
    [ Upstream commit 7b7dfe4833c70a11cdfa51b38705103bd31eddaa ]
    
    The function gsm_dlci_t1() is a timer handler that runs in an
    atomic context, but it calls "kzalloc(..., GFP_KERNEL)" that
    may sleep. As a result, the sleep-in-atomic-context bug will
    happen. The process is shown below:
    
    gsm_dlci_t1()
     gsm_dlci_open()
      gsm_modem_update()
       gsm_modem_upd_via_msc()
        gsm_control_send()
         kzalloc(sizeof(.., GFP_KERNEL) //may sleep
    
    This patch changes the gfp_t parameter of kzalloc() from GFP_KERNEL to
    GFP_ATOMIC in order to mitigate the bug.
    
    Fixes: e1eaea46bb40 ("tty: n_gsm line discipline")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Link: https://lore.kernel.org/r/20221002040709.27849-1-duoming@zju.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae22294e213a402a70fa1731538367d1b758ffe7
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Wed Oct 12 20:13:53 2022 +0800

    serial: imx: Add missing .thaw_noirq hook
    
    [ Upstream commit 4561d8008a467cb05ac632a215391d6b787f40aa ]
    
    The following warning is seen with non-console UART instance when
    system hibernates.
    
    [   37.371969] ------------[ cut here ]------------
    [   37.376599] uart3_root_clk already disabled
    [   37.380810] WARNING: CPU: 0 PID: 296 at drivers/clk/clk.c:952 clk_core_disable+0xa4/0xb0
    ...
    [   37.506986] Call trace:
    [   37.509432]  clk_core_disable+0xa4/0xb0
    [   37.513270]  clk_disable+0x34/0x50
    [   37.516672]  imx_uart_thaw+0x38/0x5c
    [   37.520250]  platform_pm_thaw+0x30/0x6c
    [   37.524089]  dpm_run_callback.constprop.0+0x3c/0xd4
    [   37.528972]  device_resume+0x7c/0x160
    [   37.532633]  dpm_resume+0xe8/0x230
    [   37.536036]  hibernation_snapshot+0x288/0x430
    [   37.540397]  hibernate+0x10c/0x2e0
    [   37.543798]  state_store+0xc4/0xd0
    [   37.547203]  kobj_attr_store+0x1c/0x30
    [   37.550953]  sysfs_kf_write+0x48/0x60
    [   37.554619]  kernfs_fop_write_iter+0x118/0x1ac
    [   37.559063]  new_sync_write+0xe8/0x184
    [   37.562812]  vfs_write+0x230/0x290
    [   37.566214]  ksys_write+0x68/0xf4
    [   37.569529]  __arm64_sys_write+0x20/0x2c
    [   37.573452]  invoke_syscall.constprop.0+0x50/0xf0
    [   37.578156]  do_el0_svc+0x11c/0x150
    [   37.581648]  el0_svc+0x30/0x140
    [   37.584792]  el0t_64_sync_handler+0xe8/0xf0
    [   37.588976]  el0t_64_sync+0x1a0/0x1a4
    [   37.592639] ---[ end trace 56e22eec54676d75 ]---
    
    On hibernating, pm core calls into related hooks in sequence like:
    
        .freeze
        .freeze_noirq
        .thaw_noirq
        .thaw
    
    With .thaw_noirq hook being absent, the clock will be disabled in a
    unbalanced call which results the warning above.
    
        imx_uart_freeze()
            clk_prepare_enable()
        imx_uart_suspend_noirq()
            clk_disable()
        imx_uart_thaw
            clk_disable_unprepare()
    
    Adding the missing .thaw_noirq hook as imx_uart_resume_noirq() will have
    the call sequence corrected as below and thus fix the warning.
    
        imx_uart_freeze()
            clk_prepare_enable()
        imx_uart_suspend_noirq()
            clk_disable()
        imx_uart_resume_noirq()
            clk_enable()
        imx_uart_thaw
            clk_disable_unprepare()
    
    Fixes: 09df0b3464e5 ("serial: imx: fix endless loop during suspend")
    Reviewed-by: Martin Kaiser <martin@kaiser.cx>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Link: https://lore.kernel.org/r/20221012121353.2346280-1-shawn.guo@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26db1cd5191e7844a456c69468c1806407c8ecb2
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Oct 28 14:00:44 2022 +0300

    serial: 8250: omap: Flush PM QOS work on remove
    
    [ Upstream commit d0b68629bd2fb61e0171a62f2e8da3db322f5cf6 ]
    
    Rebinding 8250_omap in a loop will at some point produce a warning for
    kernel/power/qos.c:296 cpu_latency_qos_update_request() with error
    "cpu_latency_qos_update_request called for unknown object". Let's flush
    the possibly pending PM QOS work scheduled from omap8250_runtime_suspend()
    before we disable runtime PM.
    
    Fixes: 61929cf0169d ("tty: serial: Add 8250-core based omap driver")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221028110044.54719-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0db709a58bdeb8966890882261a3f8438c5c9b7
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Oct 28 13:58:13 2022 +0300

    serial: 8250: omap: Fix unpaired pm_runtime_put_sync() in omap8250_remove()
    
    [ Upstream commit e3f0c638f428fd66b5871154b62706772045f91a ]
    
    On remove, we get an error for "Runtime PM usage count underflow!". I guess
    this driver is mostly built-in, and this issue has gone unnoticed for a
    while. Somehow I did not catch this issue with my earlier fix done with
    commit 4e0f5cc65098 ("serial: 8250_omap: Fix probe and remove for PM
    runtime").
    
    Fixes: 4e0f5cc65098 ("serial: 8250_omap: Fix probe and remove for PM runtime")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Depends-on: dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    Link: https://lore.kernel.org/r/20221028105813.54290-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83b6d4d6da675df0cf0f66bc6c0b5da9ff02423f
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Thu Oct 13 13:23:39 2022 +0200

    serial: 8250_omap: remove wait loop from Errata i202 workaround
    
    [ Upstream commit e828e56684d61b17317e0cfdef83791fa61cb76b ]
    
    We were occasionally seeing the "Errata i202: timedout" on an AM335x
    board when repeatedly opening and closing a UART connected to an active
    sender. As new input may arrive at any time, it is possible to miss the
    "RX FIFO empty" condition, forcing the loop to wait until it times out.
    
    Nothing in the i202 Advisory states that such a wait is even necessary;
    other FIFO clear functions like serial8250_clear_fifos() do not wait
    either. For this reason, it seems safe to remove the wait, fixing the
    mentioned issue.
    
    Fixes: 61929cf0169d ("tty: serial: Add 8250-core based omap driver")
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Link: https://lore.kernel.org/r/20221013112339.2540767-1-matthias.schiffer@ew.tq-group.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76db05ab70925f34fbb8c75a2a4ca2ab39c8c9cd
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Oct 24 09:36:13 2022 +0300

    serial: 8250: omap: Fix missing PM runtime calls for omap8250_set_mctrl()
    
    [ Upstream commit 93810191f5d23652c0b8a1a9b3a4a89d6fd5063e ]
    
    There are cases where omap8250_set_mctrl() may get called after the
    UART has already autoidled causing an asynchronous external abort.
    
    This can happen on ttyport_open():
    
    mem_serial_in from omap8250_set_mctrl+0x38/0xa0
    omap8250_set_mctrl from uart_update_mctrl+0x4c/0x58
    uart_update_mctrl from uart_dtr_rts+0x60/0xa8
    uart_dtr_rts from tty_port_block_til_ready+0xd0/0x2a8
    tty_port_block_til_ready from uart_open+0x14/0x1c
    uart_open from ttyport_open+0x64/0x148
    
    And on ttyport_close():
    
    omap8250_set_mctrl from uart_update_mctrl+0x3c/0x48
    uart_update_mctrl from uart_dtr_rts+0x54/0x9c
    uart_dtr_rts from tty_port_shutdown+0x78/0x9c
    tty_port_shutdown from tty_port_close+0x3c/0x74
    tty_port_close from ttyport_close+0x40/0x58
    
    It can also happen on disassociate_ctty() calling uart_shutdown()
    that ends up calling omap8250_set_mctrl().
    
    Let's fix the issue by adding missing PM runtime calls to
    omap8250_set_mctrl(). To do this, we need to add __omap8250_set_mctrl()
    that can be called from both omap8250_set_mctrl(), and from runtime PM
    resume path when restoring the registers.
    
    Fixes: 61929cf0169d ("tty: serial: Add 8250-core based omap driver")
    Reported-by: Merlijn Wajer <merlijn@wizzup.org>
    Reported-by: Romain Naour <romain.naour@smile.fr>
    Reported-by: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Tested-by: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Depends-on: dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    Link: https://lore.kernel.org/r/20221024063613.25943-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2aee616a6b1104ce3bf7db0ec37bb33c739a1062
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Oct 26 15:41:04 2022 +0300

    ARM: at91: pm: avoid soft resetting AC DLL
    
    [ Upstream commit cef8cdc0d0e7c701fe4dcfba4ed3fd25d28a6020 ]
    
    Do not soft reset AC DLL as controller is buggy and this operation my
    introduce glitches in the controller leading to undefined behavior.
    
    Fixes: f0bbf17958e8 ("ARM: at91: pm: add self-refresh support for sama7g5")
    Depends-on: a02875c4cbd6 ("ARM: at91: pm: fix self-refresh for sama7g5")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20221026124114.985876-2-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 188546c78006bcaec5e27318b672410066db0b3b
Author: Martin Povišer <povik+lin@cutebit.org>
Date:   Thu Oct 27 11:57:59 2022 +0200

    ASoC: tas2764: Fix set_tdm_slot in case of single slot
    
    [ Upstream commit faac764ea1ea6898d93e46c403271fb105c0906e ]
    
    There's a special branch in the set_tdm_slot op for the case of nslots
    being 1, but:
    
     (1) That branch can never work (there's a check for tx_mask being
         non-zero, later there's another check for it *being* zero; one or
         the other always throws -EINVAL).
    
     (2) The intention of the branch seems to be what the general other
         branch reduces to in case of nslots being 1.
    
    For those reasons remove the 'nslots being 1' special case.
    
    Fixes: 827ed8a0fa50 ("ASoC: tas2764: Add the driver for the TAS2764")
    Suggested-by: Jos Dehaes <jos.dehaes@gmail.com>
    Signed-off-by: Martin Povišer <povik+lin@cutebit.org>
    Link: https://lore.kernel.org/r/20221027095800.16094-2-povik+lin@cutebit.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5782896daf651f5c62b1f51d74c1788ccd9daa04
Author: Martin Povišer <povik+lin@cutebit.org>
Date:   Thu Oct 27 11:57:58 2022 +0200

    ASoC: tas2770: Fix set_tdm_slot in case of single slot
    
    [ Upstream commit e59bf547a7dd366f93bfebb7487959580ca6c0ec ]
    
    There's a special branch in the set_tdm_slot op for the case of nslots
    being 1, but:
    
     (1) That branch can never work (there's a check for tx_mask being
         non-zero, later there's another check for it *being* zero; one or
         the other always throws -EINVAL).
    
     (2) The intention of the branch seems to be what the general other
         branch reduces to in case of nslots being 1.
    
    For those reasons remove the 'nslots being 1' special case.
    
    Fixes: 1a476abc723e ("tas2770: add tas2770 smart PA kernel driver")
    Suggested-by: Jos Dehaes <jos.dehaes@gmail.com>
    Signed-off-by: Martin Povišer <povik+lin@cutebit.org>
    Link: https://lore.kernel.org/r/20221027095800.16094-1-povik+lin@cutebit.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34eee4189bcebbd5f6a2ff25ef0cb893ad33d51e
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Fri Oct 28 11:16:03 2022 +0800

    ASoC: core: Fix use-after-free in snd_soc_exit()
    
    [ Upstream commit 6ec27c53886c8963729885bcf2dd996eba2767a7 ]
    
    KASAN reports a use-after-free:
    
    BUG: KASAN: use-after-free in device_del+0xb5b/0xc60
    Read of size 8 at addr ffff888008655050 by task rmmod/387
    CPU: 2 PID: 387 Comm: rmmod
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
    Call Trace:
    <TASK>
    dump_stack_lvl+0x79/0x9a
    print_report+0x17f/0x47b
    kasan_report+0xbb/0xf0
    device_del+0xb5b/0xc60
    platform_device_del.part.0+0x24/0x200
    platform_device_unregister+0x2e/0x40
    snd_soc_exit+0xa/0x22 [snd_soc_core]
    __do_sys_delete_module.constprop.0+0x34f/0x5b0
    do_syscall_64+0x3a/0x90
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    ...
    </TASK>
    
    It's bacause in snd_soc_init(), snd_soc_util_init() is possble to fail,
    but its ret is ignored, which makes soc_dummy_dev unregistered twice.
    
    snd_soc_init()
        snd_soc_util_init()
            platform_device_register_simple(soc_dummy_dev)
            platform_driver_register() # fail
            platform_device_unregister(soc_dummy_dev)
        platform_driver_register() # success
    ...
    snd_soc_exit()
        snd_soc_util_exit()
        # soc_dummy_dev will be unregistered for second time
    
    To fix it, handle error and stop snd_soc_init() when util_init() fail.
    Also clean debugfs when util_init() or driver_register() fail.
    
    Fixes: fb257897bf20 ("ASoC: Work around allmodconfig failure")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221028031603.59416-1-chenzhongjin@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa6f8aecbbf23923cd7f17251f06fc4e52eacc8d
Author: Mihai Sain <mihai.sain@microchip.com>
Date:   Mon Oct 17 11:31:19 2022 +0300

    ARM: dts: at91: sama7g5: fix signal name of pin PB2
    
    [ Upstream commit 2b4337c8409b4e9e5aed15c597e4031dd567bdd8 ]
    
    The signal name of pin PB2 with function F is FLEXCOM11_IO1
    as it is defined in the datasheet.
    
    Fixes: 7540629e2fc7 ("ARM: dts: at91: add sama7g5 SoC DT and sama7g5-ek")
    Signed-off-by: Mihai Sain <mihai.sain@microchip.com>
    Reviewed-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20221017083119.1643-1-mihai.sain@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 487fff700f5f64941a4e2b09e4ba750984b96aa9
Author: Marek Vasut <marex@denx.de>
Date:   Tue Oct 18 20:35:13 2022 +0200

    spi: stm32: Print summary 'callbacks suppressed' message
    
    [ Upstream commit 195583504be28df5d608a4677dd796117aea875f ]
    
    The original fix "spi: stm32: Rate-limit the 'Communication suspended' message"
    still leads to "stm32h7_spi_irq_thread: 1696 callbacks suppressed" spew in the
    kernel log. Since this 'Communication suspended' message is a debug print, add
    RATELIMIT_MSG_ON_RELEASE flag to inhibit the "callbacks suspended" part during
    normal operation and only print summary at the end.
    
    Fixes: ea8be08cc9358 ("spi: stm32: Rate-limit the 'Communication suspended' message")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Link: https://lore.kernel.org/r/20221018183513.206706-1-marex@denx.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cec2f65c1e72a2dc9efd5076ae7a643cb0790ff
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon Aug 29 09:49:52 2022 -0700

    arm64: dts: qcom: sm8350-hdk: Specify which LDO modes are allowed
    
    [ Upstream commit 1ce8aaf6abdc35cde555924418b3d4516b4ec871 ]
    
    This board uses RPMH, specifies "regulator-allow-set-load" for LDOs,
    but doesn't specify any modes with "regulator-allowed-modes".
    
    Prior to commit efb0cb50c427 ("regulator: qcom-rpmh: Implement
    get_optimum_mode(), not set_load()") the above meant that we were able
    to set either LPM or HPM mode. After that commit (and fixes [1]) we'll
    be stuck at the initial mode. Discussion of this has resulted in the
    decision that the old dts files were wrong and should be fixed to
    fully restore old functionality.
    
    Let's re-enable the old functionality by fixing the dts.
    
    [1] https://lore.kernel.org/r/20220824142229.RFT.v2.2.I6f77860e5cd98bf5c67208fa9edda4a08847c304@changeid
    
    Fixes: 9208c19f2124 ("arm64: dts: qcom: Introduce SM8350 HDK")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Andrew Halaney <ahalaney@redhat.com>
    Reviewed-by: Vinod Koul <vkoul@kernel.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220829094903.v2.6.I6799be85cf36d3b494f803cba767a569080624f5@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44dbe66bb3eaa9bcb02b44ff9623329640cbb717
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon Aug 29 09:49:51 2022 -0700

    arm64: dts: qcom: sm8250-xperia-edo: Specify which LDO modes are allowed
    
    [ Upstream commit b7870d460c05ce31e2311036d91de1e2e0b32cea ]
    
    This board uses RPMH, specifies "regulator-allow-set-load" for LDOs,
    but doesn't specify any modes with "regulator-allowed-modes".
    
    Prior to commit efb0cb50c427 ("regulator: qcom-rpmh: Implement
    get_optimum_mode(), not set_load()") the above meant that we were able
    to set either LPM or HPM mode. After that commit (and fixes [1]) we'll
    be stuck at the initial mode. Discussion of this has resulted in the
    decision that the old dts files were wrong and should be fixed to
    fully restore old functionality.
    
    Let's re-enable the old functionality by fixing the dts.
    
    [1] https://lore.kernel.org/r/20220824142229.RFT.v2.2.I6f77860e5cd98bf5c67208fa9edda4a08847c304@changeid
    
    Fixes: 69cdb97ef652 ("arm64: dts: qcom: sm8250: Add support for SONY Xperia 1 II / 5 II (Edo platform)")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Andrew Halaney <ahalaney@redhat.com>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220829094903.v2.5.Ie446d5183d8b1e9ec4e32228ca300e604e3315eb@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b2eae7def2b5681a487b4ab18f2d29e1781789c
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon Aug 29 09:49:50 2022 -0700

    arm64: dts: qcom: sm8150-xperia-kumano: Specify which LDO modes are allowed
    
    [ Upstream commit aa30e786202e4ed1df980442d305658441f65859 ]
    
    This board uses RPMH, specifies "regulator-allow-set-load" for LDOs,
    but doesn't specify any modes with "regulator-allowed-modes".
    
    Prior to commit efb0cb50c427 ("regulator: qcom-rpmh: Implement
    get_optimum_mode(), not set_load()") the above meant that we were able
    to set either LPM or HPM mode. After that commit (and fixes [1]) we'll
    be stuck at the initial mode. Discussion of this has resulted in the
    decision that the old dts files were wrong and should be fixed to
    fully restore old functionality.
    
    Let's re-enable the old functionality by fixing the dts.
    
    [1] https://lore.kernel.org/r/20220824142229.RFT.v2.2.I6f77860e5cd98bf5c67208fa9edda4a08847c304@changeid
    
    Fixes: d0a6ce59ea4e ("arm64: dts: qcom: sm8150: Add support for SONY Xperia 1 / 5 (Kumano platform)")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Andrew Halaney <ahalaney@redhat.com>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220829094903.v2.4.I51d60414a42ba9e3008e208d60a04c9ffc425fa7@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8e76eeea77c9bca7453567ac1af761d108c2e70
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon Aug 29 09:49:47 2022 -0700

    arm64: dts: qcom: sa8155p-adp: Specify which LDO modes are allowed
    
    [ Upstream commit bd9f3dcf42d943b53190f99bcdbcfe98a56ac4cd ]
    
    This board uses RPMH, specifies "regulator-allow-set-load" for LDOs,
    but doesn't specify any modes with "regulator-allowed-modes".
    
    Prior to commit efb0cb50c427 ("regulator: qcom-rpmh: Implement
    get_optimum_mode(), not set_load()") the above meant that we were able
    to set either LPM or HPM mode. After that commit (and fixes [1]) we'll
    be stuck at the initial mode. Discussion of this has resulted in the
    decision that the old dts files were wrong and should be fixed to
    fully restore old functionality.
    
    Let's re-enable the old functionality by fixing the dts.
    
    NOTE: while here, let's also remove the nonsensical
    "regulator-allow-set-load" on the fixed regulator "vreg_s4a_1p8".
    
    [1] https://lore.kernel.org/r/20220824142229.RFT.v2.2.I6f77860e5cd98bf5c67208fa9edda4a08847c304@changeid
    
    Fixes: 5b85e8f2225c ("arm64: dts: qcom: sa8155p-adp: Add base dts file")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Andrew Halaney <ahalaney@redhat.com>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220829094903.v2.1.Id59c32b560c4662d8b3697de2bd494d08d654806@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30571f28bb35c826219971c63bcf60d2517112ed
Author: James Houghton <jthoughton@google.com>
Date:   Tue Oct 18 20:01:25 2022 +0000

    hugetlbfs: don't delete error page from pagecache
    
    [ Upstream commit 8625147cafaa9ba74713d682f5185eb62cb2aedb ]
    
    This change is very similar to the change that was made for shmem [1], and
    it solves the same problem but for HugeTLBFS instead.
    
    Currently, when poison is found in a HugeTLB page, the page is removed
    from the page cache.  That means that attempting to map or read that
    hugepage in the future will result in a new hugepage being allocated
    instead of notifying the user that the page was poisoned.  As [1] states,
    this is effectively memory corruption.
    
    The fix is to leave the page in the page cache.  If the user attempts to
    use a poisoned HugeTLB page with a syscall, the syscall will fail with
    EIO, the same error code that shmem uses.  For attempts to map the page,
    the thread will get a BUS_MCEERR_AR SIGBUS.
    
    [1]: commit a76054266661 ("mm: shmem: don't truncate page if memory failure happens")
    
    Link: https://lkml.kernel.org/r/20221018200125.848471-1-jthoughton@google.com
    Signed-off-by: James Houghton <jthoughton@google.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Tested-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: James Houghton <jthoughton@google.com>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14ddbb83c3429938f5285d3d93f7463fabbd9af4
Author: Like Xu <likexu@tencent.com>
Date:   Mon Sep 19 17:10:06 2022 +0800

    KVM: x86/pmu: Do not speculatively query Intel GP PMCs that don't exist yet
    
    [ Upstream commit 8631ef59b62290c7d88e7209e35dfb47f33f4902 ]
    
    The SDM lists an architectural MSR IA32_CORE_CAPABILITIES (0xCF)
    that limits the theoretical maximum value of the Intel GP PMC MSRs
    allocated at 0xC1 to 14; likewise the Intel April 2022 SDM adds
    IA32_OVERCLOCKING_STATUS at 0x195 which limits the number of event
    selection MSRs to 15 (0x186-0x194).
    
    Limiting the maximum number of counters to 14 or 18 based on the currently
    allocated MSRs is clearly fragile, and it seems likely that Intel will
    even place PMCs 8-15 at a completely different range of MSR indices.
    So stop at the maximum number of GP PMCs supported today on Intel
    processors.
    
    There are some machines, like Intel P4 with non Architectural PMU, that
    may indeed have 18 counters, but those counters are in a completely
    different MSR address range and are not supported by KVM.
    
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: cf05a67b68b8 ("KVM: x86: omit "impossible" pmu MSRs from MSR list")
    Suggested-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Like Xu <likexu@tencent.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220919091008.60695-1-likexu@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9b964ed7cf91cce5fe5b90a094602b0e0fd6704
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Oct 25 09:28:00 2022 +0300

    spi: intel: Use correct mask for flash and protected regions
    
    [ Upstream commit 92a66cbf6b30eda5719fbdfb24cd15fb341bba32 ]
    
    The flash and protected region mask is actually 0x7fff (30:16 and 14:0)
    and not 0x3fff so fix this accordingly. While there use GENMASK() instead.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Link: https://lore.kernel.org/r/20221025062800.22357-1-mika.westerberg@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4eb68642ed35000c9ddbc23677b6a8ec155737a
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Feb 9 15:27:04 2022 +0300

    mtd: spi-nor: intel-spi: Disable write protection only if asked
    
    [ Upstream commit cd149eff8d2201a63c074a6d9d03e52926aa535d ]
    
    Currently the driver tries to disable the BIOS write protection
    automatically even if this is not what the user wants. For this reason
    modify the driver so that by default it does not touch the write
    protection. Only if specifically asked by the user (setting writeable=1
    command line parameter) the driver tries to disable the BIOS write
    protection.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mauro Lima <mauro.lima@eclypsium.com>
    Reviewed-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Link: https://lore.kernel.org/r/20220209122706.42439-2-mika.westerberg@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: 92a66cbf6b30 ("spi: intel: Use correct mask for flash and protected regions")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 156d0c823c59fc367b459f7745d520c18aacc14e
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Wed Oct 19 08:16:39 2022 +0100

    ASoC: codecs: jz4725b: Fix spelling mistake "Sourc" -> "Source", "Routee" -> "Route"
    
    [ Upstream commit df496157a5afa1b6d1f4c46ad6549c2c346d1e59 ]
    
    There are two spelling mistakes in codec routing description. Fix it.
    
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@linaro.org>
    Acked-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://lore.kernel.org/r/20221019071639.1003730-1-colin.i.king@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5907ff9f2c8fc35f54d2bf24e4670fa1ac0e26e2
Author: Tony Luck <tony.luck@intel.com>
Date:   Thu Nov 3 13:33:10 2022 -0700

    x86/cpu: Add several Intel server CPU model numbers
    
    [ Upstream commit 7beade0dd41d42d797ccb7791b134a77fcebf35b ]
    
    These servers are all on the public versions of the roadmap. The model
    numbers for Grand Ridge, Granite Rapids, and Sierra Forest were included
    in the September 2022 edition of the Instruction Set Extensions document.
    
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lore.kernel.org/r/20221103203310.5058-1-tony.luck@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41e37d04e397ea8dd3bf0e74065703ca6c43c9e9
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Oct 31 16:10:33 2022 -0700

    Bluetooth: L2CAP: Fix l2cap_global_chan_by_psm
    
    [ Upstream commit f937b758a188d6fd328a81367087eddbb2fce50f ]
    
    l2cap_global_chan_by_psm shall not return fixed channels as they are not
    meant to be connected by (S)PSM.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Reviewed-by: Tedd Ho-Jeong An <tedd.an@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b02a025dd188915f1d4754e28b3ea021ac607186
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:40 2022 +0000

    btrfs: remove pointless and double ulist frees in error paths of qgroup tests
    
    [ Upstream commit d0ea17aec12ea0f7b9d2ed727d8ef8169d1e7699 ]
    
    Several places in the qgroup self tests follow the pattern of freeing the
    ulist pointer they passed to btrfs_find_all_roots() if the call to that
    function returned an error. That is pointless because that function always
    frees the ulist in case it returns an error.
    
    Also In some places like at test_multiple_refs(), after a call to
    btrfs_qgroup_account_extent() we also leave "old_roots" and "new_roots"
    pointing to ulists that were freed, because btrfs_qgroup_account_extent()
    has freed those ulists, and if after that the next call to
    btrfs_find_all_roots() fails, we call ulist_free() on the "old_roots"
    ulist again, resulting in a double free.
    
    So remove those calls to reduce the code size and avoid double ulist
    free in case of an error.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c366c206ff28844a87f79442faba0e98f47d77f
Author: Nathan Huckleberry <nhuck@google.com>
Date:   Tue Sep 13 13:55:44 2022 -0700

    drm/imx: imx-tve: Fix return type of imx_tve_connector_mode_valid
    
    [ Upstream commit fc007fb815ab5395c3962c09b79a1630b0fbed9c ]
    
    The mode_valid field in drm_connector_helper_funcs is expected to be of
    type:
    enum drm_mode_status (* mode_valid) (struct drm_connector *connector,
                                         struct drm_display_mode *mode);
    
    The mismatched return type breaks forward edge kCFI since the underlying
    function definition does not match the function hook definition.
    
    The return type of imx_tve_connector_mode_valid should be changed from
    int to enum drm_mode_status.
    
    Reported-by: Dan Carpenter <error27@gmail.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1703
    Cc: llvm@lists.linux.dev
    Signed-off-by: Nathan Huckleberry <nhuck@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220913205544.155106-1-nhuck@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c8ded1b3879ea718534df9cfde468ddc8d4d498
Author: Nam Cao <namcaov@gmail.com>
Date:   Thu Oct 6 16:54:40 2022 +0200

    i2c: i801: add lis3lv02d's I2C address for Vostro 5568
    
    [ Upstream commit d6643d7207c572c1b0305ed505101f15502c6c87 ]
    
    Dell Vostro 5568 laptop has lis3lv02d, but its i2c address is not known
    to the kernel. Add this address.
    
    Output of "cat /sys/devices/platform/lis3lv02d/position" on Dell Vostro
    5568 laptop:
        - Horizontal: (-18,0,1044)
        - Front elevated: (522,-18,1080)
        - Left elevated: (-18,-360,1080)
        - Upside down: (36,108,-1134)
    
    Signed-off-by: Nam Cao <namcaov@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b432581f19a0241102ca7230e77f576271837fb7
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Oct 20 16:39:33 2022 +0200

    i2c: tegra: Allocate DMA memory for DMA engine
    
    [ Upstream commit cdbf26251d3b35c4ccaea0c3a6de4318f727d3d2 ]
    
    When the I2C controllers are running in DMA mode, it is the DMA engine
    that performs the memory accesses rather than the I2C controller. Pass
    the DMA engine's struct device pointer to the DMA API to make sure the
    correct DMA operations are used.
    
    This fixes an issue where the DMA engine's SMMU stream ID needs to be
    misleadingly set for the I2C controllers in device tree.
    
    Suggested-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b0ae4c7b91817cc38299b9dd8db87803ed98141
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:26 2022 +0100

    firmware: arm_scmi: Cleanup the core driver removal callback
    
    [ Upstream commit 3f4071cbd2063b917486d1047a4da47718215fee ]
    
    Platform drivers .remove callbacks are not supposed to fail and report
    errors. Such errors are indeed ignored by the core platform drivers
    and the driver unbind process is anyway completed.
    
    The SCMI core platform driver as it is now, instead, bails out reporting
    an error in case of an explicit unbind request.
    
    Fix the removal path by adding proper device links between the core SCMI
    device and the SCMI protocol devices so that a full SCMI stack unbind is
    triggered when the core driver is removed. The remove process does not
    bail out anymore on the anomalous conditions triggered by an explicit
    unbind but the user is still warned.
    
    Reported-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-1-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a8a2fef273d49a689528510c8b4613ec821c2f3
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Oct 14 07:11:36 2022 -0500

    ACPI: x86: Add another system to quirk list for forcing StorageD3Enable
    
    [ Upstream commit 2124becad797245d49252d2d733aee0322233d7e ]
    
    commit 018d6711c26e4 ("ACPI: x86: Add a quirk for Dell Inspiron 14 2-in-1
    for StorageD3Enable") introduced a quirk to allow a system with ambiguous
    use of _ADR 0 to force StorageD3Enable.
    
    Julius Brockmann reports that Inspiron 16 5625 suffers that same symptoms.
    Add this other system to the list as well.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216440
    Reported-and-tested-by: Julius Brockmann <mail@juliusbrockmann.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a03a4a5cf6ddf75b8d7cd72b31702ec2ae0ad09
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Wed Oct 19 12:09:18 2022 -0400

    NFSv4: Retry LOCK on OLD_STATEID during delegation return
    
    [ Upstream commit f5ea16137a3fa2858620dc9084466491c128535f ]
    
    There's a small window where a LOCK sent during a delegation return can
    race with another OPEN on client, but the open stateid has not yet been
    updated.  In this case, the client doesn't handle the OLD_STATEID error
    from the server and will lose this lock, emitting:
    "NFS: nfs4_handle_delegation_recall_error: unhandled error -10024".
    
    Fix this by sending the task through the nfs4 error handling in
    nfs4_lock_done() when we may have to reconcile our stateid with what the
    server believes it to be.  For this case, the result is a retry of the
    LOCK operation with the updated stateid.
    
    Reported-by: Gonzalo Siero Humet <gsierohu@redhat.com>
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49ca2227c47baa8056ba3d64a2535e2d2ff5ebff
Author: Qu Wenruo <wqu@suse.com>
Date:   Mon Oct 10 18:36:06 2022 +0800

    btrfs: raid56: properly handle the error when unable to find the missing stripe
    
    [ Upstream commit f15fb2cd979a07fbfc666e2f04b8b30ec9233b2a ]
    
    In raid56_alloc_missing_rbio(), if we can not determine where the
    missing device is inside the full stripe, we just BUG_ON().
    
    This is not necessary especially the only caller inside scrub.c is
    already properly checking the return value, and will treat it as a
    memory allocation failure.
    
    Fix the error handling by:
    
    - Add an extra warning for the reason
      Although personally speaking it may be better to be an ASSERT().
    
    - Properly free the allocated rbio
    
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f7bd3a2dfe10b52ecd80f389f17d677f1c96863
Author: Michael Margolin <mrgolin@amazon.com>
Date:   Thu Oct 20 18:19:49 2022 +0300

    RDMA/efa: Add EFA 0xefa2 PCI ID
    
    [ Upstream commit b75927cff13e0b3b652a12da7eb9a012911799e8 ]
    
    Add support for 0xefa2 devices.
    
    Reviewed-by: Firas Jahjah <firasj@amazon.com>
    Reviewed-by: Yossi Leybovich <sleybo@amazon.com>
    Signed-off-by: Michael Margolin <mrgolin@amazon.com>
    Link: https://lore.kernel.org/r/20221020151949.1768-1-mrgolin@amazon.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a42d4363e78fdde2be88648f462cf0e5c9dbe665
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Oct 25 14:12:23 2022 +0200

    ACPI: scan: Add LATT2021 to acpi_ignore_dep_ids[]
    
    [ Upstream commit fa153b7cddce795662d38f78a87612c166c0f692 ]
    
    Some x86/ACPI laptops with MIPI cameras have a LATT2021 ACPI device
    in the _DEP dependency list of the ACPI devices for the camera-sensors
    (which have flags.honor_deps set).
    
    The _DDN for the LATT2021 device is "Lattice FW Update Client Driver",
    suggesting that this is used for firmware updates of something. There
    is no Linux driver for this and if Linux gets support for updates it
    will likely be in userspace through fwupd.
    
    For now add the LATT2021 HID to acpi_ignore_dep_ids[] so that
    acpi_dev_ready_for_enumeration() will return true once the other _DEP
    dependencies are met.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 004decd41b32cbdecbafade726ec27853c0c2449
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Oct 6 17:26:48 2022 -0400

    drm/amd/display: Remove wrong pipe control lock
    
    [ Upstream commit ca08a1725d0d78efca8d2dbdbce5ea70355da0f2 ]
    
    When using a device based on DCN32/321,
    we have an issue where a second
    4k@60Hz display does not light up,
    and the system becomes unresponsive
    for a few minutes. In the debug process,
    it was possible to see a hang
    in the function dcn20_post_unlock_program_front_end
    in this part:
    
    for (j = 0; j < TIMEOUT_FOR_PIPE_ENABLE_MS*1000
            && hubp->funcs->hubp_is_flip_pending(hubp); j++)
            mdelay(1);
    }
    
    The hubp_is_flip_pending always returns positive
    for waiting pending flips which is a symptom of
    pipe hang. Additionally, the dmesg log shows
    this message after a few minutes:
    
      BUG: soft lockup - CPU#4 stuck for 26s!
      ...
      [  +0.000003]  dcn20_post_unlock_program_front_end+0x112/0x340 [amdgpu]
      [  +0.000171]  dc_commit_state_no_check+0x63d/0xbf0 [amdgpu]
      [  +0.000155]  ? dc_validate_global_state+0x358/0x3d0 [amdgpu]
      [  +0.000154]  dc_commit_state+0xe2/0xf0 [amdgpu]
    
    This confirmed the hypothesis that we had a pipe
    hanging somewhere. Next, after checking the
    ftrace entries, we have the below weird
    sequence:
    
     [..]
      2)               |        dcn10_lock_all_pipes [amdgpu]() {
      2)   0.120 us    |          optc1_is_tg_enabled [amdgpu]();
      2)               |          dcn20_pipe_control_lock [amdgpu]() {
      2)               |            dc_dmub_srv_clear_inbox0_ack [amdgpu]() {
      2)   0.121 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.551 us    |            }
      2)               |            dc_dmub_srv_send_inbox0_cmd [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.511 us    |            }
      2)               |            dc_dmub_srv_wait_for_inbox0_ack [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
     [..]
    
    We are not expected to read from dmub register
    so many times and for so long. From the trace log,
    it was possible to identify that the function
    dcn20_pipe_control_lock was triggering the dmub
    operation when it was unnecessary and causing
    the hang issue. This commit drops the unnecessary
    dmub code and, consequently, fixes the second display not
    lighting up the issue.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7779efbb99bf4e97734d30851f419dde2e88ac39
Author: Shuming Fan <shumingf@realtek.com>
Date:   Wed Oct 19 17:57:15 2022 +0800

    ASoC: rt1308-sdw: add the default value of some registers
    
    [ Upstream commit 75d8b1662ca5c20cf8365575222abaef18ff1f50 ]
    
    The driver missed the default value of register 0xc070/0xc360.
    This patch adds that default value to avoid invalid register access
    when the device doesn't be enumerated yet.
    BugLink: https://github.com/thesofproject/linux/issues/3924
    
    Signed-off-by: Shuming Fan <shumingf@realtek.com>
    Link: https://lore.kernel.org/r/20221019095715.31082-1-shumingf@realtek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef1e4ed85814e5b71e31be35e2a6843cbdf2ac6e
Author: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
Date:   Mon Oct 10 08:38:11 2022 +0200

    selftests/intel_pstate: fix build for ARCH=x86_64
    
    [ Upstream commit beb7d862ed4ac6aa14625418970f22a7d55b8615 ]
    
    Handle the scenario where the build is launched with the ARCH envvar
    defined as x86_64.
    
    Signed-off-by: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfd3cc1ef3e2c521ccf7c98a6ce26020cf2c0232
Author: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
Date:   Mon Oct 10 08:37:02 2022 +0200

    selftests/futex: fix build for clang
    
    [ Upstream commit 03cab65a07e083b6c1010fbc8f9b817e9aca75d9 ]
    
    Don't use the test-specific header files as source files to force a
    target dependency, as clang will complain if more than one source file
    is used for a compile command with a single '-o' flag.
    
    Use the proper Makefile variables instead as defined in
    tools/testing/selftests/lib.mk.
    
    Signed-off-by: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
    Reviewed-by: André Almeida <andrealmeid@igalia.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 648467236c1280427c05afa2c33e9f0cf936305b
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Oct 17 15:40:54 2022 -0500

    ASoC: Intel: sof_sdw: add quirk variant for LAPBC710 NUC15
    
    [ Upstream commit 41deb2db64997d01110faaf763bd911d490dfde7 ]
    
    Some NUC15 LAPBC710 devices don't expose the same DMI information as
    the Intel reference, add additional entry in the match table.
    
    BugLink: https://github.com/thesofproject/linux/issues/3885
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20221017204054.207512-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64ee750c29dace1341f32f5f10e8015e7cf5bd6c
Author: Siarhei Volkau <lis8215@gmail.com>
Date:   Sun Oct 16 16:26:45 2022 +0300

    ASoC: codecs: jz4725b: fix capture selector naming
    
    [ Upstream commit 80852f8268769715db335a22305e81a0c4a38a84 ]
    
    At the moment Capture source selector appears on Playback
    tab in the alsamixer and has a senseless name.
    
    Let's fix that.
    
    Signed-off-by: Siarhei Volkau <lis8215@gmail.com>
    Link: https://lore.kernel.org/r/20221016132648.3011729-5-lis8215@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 150b74cd06255774eef7cfda9ceb1544ed8f842f
Author: Siarhei Volkau <lis8215@gmail.com>
Date:   Sun Oct 16 16:26:44 2022 +0300

    ASoC: codecs: jz4725b: use right control for Capture Volume
    
    [ Upstream commit 1538e2c8c9b7e7a656effcc6e4e7cfe8c1b405fd ]
    
    Line In Bypass control is used as Master Capture at the moment
    this is completely incorrect.
    
    Current control routed to Mixer instead of ADC, thus can't affect
    Capture path. ADC control shall be used instead.
    
    ADC volume control parameters are different, so the patch fixes that
    as well. Manual says (16.6.3.2 Programmable input attenuation amplifier:
    PGATM) that gain varies in range 0dB..22.5dB with 1.5dB step.
    
    Signed-off-by: Siarhei Volkau <lis8215@gmail.com>
    Link: https://lore.kernel.org/r/20221016132648.3011729-4-lis8215@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5352d8b315726d111deca784d8bfaa6a72322ecc
Author: Siarhei Volkau <lis8215@gmail.com>
Date:   Sun Oct 16 16:26:43 2022 +0300

    ASoC: codecs: jz4725b: fix reported volume for Master ctl
    
    [ Upstream commit 088777bf65b98cfa4b5378119d0a7d49a58ece44 ]
    
    DAC volume control is the Master Playback Volume at the moment
    and it reports wrong levels in alsamixer and other alsa apps.
    
    The patch fixes that, as stated in manual on the jz4725b SoC
    (16.6.3.4 Programmable attenuation: GOD) the ctl range varies
    from -22.5dB to 0dB with 1.5dB step.
    
    Signed-off-by: Siarhei Volkau <lis8215@gmail.com>
    Link: https://lore.kernel.org/r/20221016132648.3011729-3-lis8215@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85134577a7f22967e07ac59f87cab3d07e5124f2
Author: Siarhei Volkau <lis8215@gmail.com>
Date:   Sun Oct 16 16:26:42 2022 +0300

    ASoC: codecs: jz4725b: add missed Line In power control bit
    
    [ Upstream commit 1013999b431b4bcdc1f5ae47dd3338122751db31 ]
    
    Line In path stayed powered off during capturing or
    bypass to mixer.
    
    Signed-off-by: Siarhei Volkau <lis8215@gmail.com>
    Link: https://lore.kernel.org/r/20221016132648.3011729-2-lis8215@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e61dffb16dcbb31663de0a9a6010bd2b581406d
Author: Mauro Lima <mauro.lima@eclypsium.com>
Date:   Wed Oct 12 12:21:35 2022 -0300

    spi: intel: Fix the offset to get the 64K erase opcode
    
    [ Upstream commit 6a43cd02ddbc597dc9a1f82c1e433f871a2f6f06 ]
    
    According to documentation, the 64K erase opcode is located in VSCC
    range [16:23] instead of [8:15].
    Use the proper value to shift the mask over the correct range.
    
    Signed-off-by: Mauro Lima <mauro.lima@eclypsium.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Link: https://lore.kernel.org/r/20221012152135.28353-1-mauro.lima@eclypsium.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c697cb2e6663fced37fd3b766a1399a8d652e0d3
Author: Xiaolei Wang <xiaolei.wang@windriver.com>
Date:   Mon Oct 10 17:20:14 2022 +0800

    ASoC: wm8962: Add an event handler for TEMP_HP and TEMP_SPK
    
    [ Upstream commit ee1aa2ae3eaa96e70229fa61deee87ef4528ffdf ]
    
    In wm8962 driver, the WM8962_ADDITIONAL_CONTROL_4 is used as a volatile
    register, but this register mixes a bunch of volatile status bits and a
    bunch of non-volatile control bits. The dapm widgets TEMP_HP and
    TEMP_SPK leverages the control bits in this register. After the wm8962
    probe, the regmap will bet set to cache only mode, then a read error
    like below would be triggered when trying to read the initial power
    state of the dapm widgets TEMP_HP and TEMP_SPK.
      wm8962 0-001a: ASoC: error at soc_component_read_no_lock
      on wm8962.0-001a: -16
    
    In order to fix this issue, we add event handler to actually power
    up/down these widgets. With this change, we also need to explicitly
    power off these widgets in the wm8962 probe since they are enabled
    by default.
    
    Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
    Tested-by: Adam Ford <aford173@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221010092014.2229246-1-xiaolei.wang@windriver.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 569085124d754e4e497809d79a12deb4b2b63670
Author: Derek Fang <derek.fang@realtek.com>
Date:   Wed Oct 12 11:01:02 2022 +0800

    ASoC: rt1019: Fix the TDM settings
    
    [ Upstream commit f2635d45a750182c6d5de15e2d6b059e0c302d7e ]
    
    Complete the missing and correct the TDM settings.
    
    Signed-off-by: Derek Fang <derek.fang@realtek.com>
    Link: https://lore.kernel.org/r/20221012030102.4042-1-derek.fang@realtek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4160a515c75be6a0ed005aa410cab764f2ef0de4
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Oct 8 22:05:22 2022 +0800

    ASoC: mt6660: Keep the pm_runtime enables before component stuff in mt6660_i2c_probe
    
    [ Upstream commit c4ab29b0f3a6f1e167c5a627f7cd036c1d2b7d65 ]
    
    It would be better to keep the pm_runtime enables before the
    IRQ and component stuff. Both of those could start triggering
    PM runtime events.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221008140522.134912-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2963ec4535a1d30916c9517d3280beda810b4f89
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Oct 10 19:48:52 2022 +0800

    ASoC: wm8997: Revert "ASoC: wm8997: Fix PM disable depth imbalance in wm8997_probe"
    
    [ Upstream commit 68ce83e3bb26feba0fcdd59667fde942b3a600a1 ]
    
    This reverts commit 41a736ac20602f64773e80f0f5b32cde1830a44a.
    
    The pm_runtime_disable is redundant when error returns in
    wm8997_probe, we just revert the old patch to fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221010114852.88127-4-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30a2f9479c21c47585c8a83286f428346ade070e
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Oct 10 19:48:51 2022 +0800

    ASoC: wm5110: Revert "ASoC: wm5110: Fix PM disable depth imbalance in wm5110_probe"
    
    [ Upstream commit 7d4e966f4cd73ff69bf06934e8e14a33fb7ef447 ]
    
    This reverts commit 86b46bf1feb83898d89a2b4a8d08d21e9ea277a7.
    
    The pm_runtime_disable is redundant when error returns in
    wm5110_probe, we just revert the old patch to fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221010114852.88127-3-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bf6da38a2920a8dde2473264c2ebdf241ccff29
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Oct 10 19:48:50 2022 +0800

    ASoC: wm5102: Revert "ASoC: wm5102: Fix PM disable depth imbalance in wm5102_probe"
    
    [ Upstream commit de71d7567e358effd06dfc3e2a154b25f1331c10 ]
    
    This reverts commit fcbb60820cd3008bb44334a0395e5e57ccb77329.
    
    The pm_runtime_disable is redundant when error returns in
    wm5102_probe, we just revert the old patch to fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221010114852.88127-2-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94fa250ea55cd4eea8049011ea4045343547ebd8
Author: Yang Shi <shy828301@gmail.com>
Date:   Fri Jan 14 14:05:19 2022 -0800

    mm: shmem: don't truncate page if memory failure happens
    
    commit a7605426666196c5a460dd3de6f8dac1d3c21f00 upstream.
    
    The current behavior of memory failure is to truncate the page cache
    regardless of dirty or clean.  If the page is dirty the later access
    will get the obsolete data from disk without any notification to the
    users.  This may cause silent data loss.  It is even worse for shmem
    since shmem is in-memory filesystem, truncating page cache means
    discarding data blocks.  The later read would return all zero.
    
    The right approach is to keep the corrupted page in page cache, any
    later access would return error for syscalls or SIGBUS for page fault,
    until the file is truncated, hole punched or removed.  The regular
    storage backed filesystems would be more complicated so this patch is
    focused on shmem.  This also unblock the support for soft offlining
    shmem THP.
    
    [akpm@linux-foundation.org: coding style fixes]
    [arnd@arndb.de: fix uninitialized variable use in me_pagecache_clean()]
      Link: https://lkml.kernel.org/r/20211022064748.4173718-1-arnd@kernel.org
    [Fix invalid pointer dereference in shmem_read_mapping_page_gfp() with a
     slight different implementation from what Ajay Garg <ajaygargnsit@gmail.com>
     and Muchun Song <songmuchun@bytedance.com> proposed and reworked the
     error handling of shmem_write_begin() suggested by Linus]
      Link: https://lore.kernel.org/linux-mm/20211111084617.6746-1-ajaygargnsit@gmail.com/
    
    Link: https://lkml.kernel.org/r/20211020210755.23964-6-shy828301@gmail.com
    Link: https://lkml.kernel.org/r/20211116193247.21102-1-shy828301@gmail.com
    Signed-off-by: Yang Shi <shy828301@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Ajay Garg <ajaygargnsit@gmail.com>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: Andy Lavr <andy.lavr@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Naoya Horiguchi <naoya.horiguchi@linux.dev>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 003fa195911d7cac78e17611d6a41f377bff6245
Author: Yang Shi <shy828301@gmail.com>
Date:   Fri Nov 5 13:41:14 2021 -0700

    mm: hwpoison: handle non-anonymous THP correctly
    
    commit 4966455d9100236fd6dd72b0cd00818435fdb25d upstream.
    
    Currently hwpoison doesn't handle non-anonymous THP, but since v4.8 THP
    support for tmpfs and read-only file cache has been added.  They could
    be offlined by split THP, just like anonymous THP.
    
    Link: https://lkml.kernel.org/r/20211020210755.23964-7-shy828301@gmail.com
    Signed-off-by: Yang Shi <shy828301@gmail.com>
    Acked-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Peter Xu <peterx@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Naoya Horiguchi <naoya.horiguchi@linux.dev>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a62b1bc603a1ded739e7cf543da29a3eb93cc534
Author: Yang Shi <shy828301@gmail.com>
Date:   Fri Nov 5 13:41:07 2021 -0700

    mm: hwpoison: refactor refcount check handling
    
    commit dd0f230a0a80ff396c7ce587f16429f2a8131344 upstream.
    
    Memory failure will report failure if the page still has extra pinned
    refcount other than from hwpoison after the handler is done.  Actually
    the check is not necessary for all handlers, so move the check into
    specific handlers.  This would make the following keeping shmem page in
    page cache patch easier.
    
    There may be expected extra pin for some cases, for example, when the
    page is dirty and in swapcache.
    
    Link: https://lkml.kernel.org/r/20211020210755.23964-5-shy828301@gmail.com
    Signed-off-by: Yang Shi <shy828301@gmail.com>
    Signed-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Suggested-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Peter Xu <peterx@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Naoya Horiguchi <naoya.horiguchi@linux.dev>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

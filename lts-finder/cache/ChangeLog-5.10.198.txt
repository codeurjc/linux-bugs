commit a8d812240fdd12949c8344379b01d340e36726ba
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Oct 10 21:53:40 2023 +0200

    Linux 5.10.198
    
    Link: https://lore.kernel.org/r/20231009130126.697995596@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 660627c71bc1098aa94e5f208f14748b105b73bc
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Aug 28 08:09:47 2023 +0200

    xen/events: replace evtchn_rwlock with RCU
    
    commit 87797fad6cce28ec9be3c13f031776ff4f104cfc upstream.
    
    In unprivileged Xen guests event handling can cause a deadlock with
    Xen console handling. The evtchn_rwlock and the hvc_lock are taken in
    opposite sequence in __hvc_poll() and in Xen console IRQ handling.
    Normally this is no problem, as the evtchn_rwlock is taken as a reader
    in both paths, but as soon as an event channel is being closed, the
    lock will be taken as a writer, which will cause read_lock() to block:
    
    CPU0                     CPU1                CPU2
    (IRQ handling)           (__hvc_poll())      (closing event channel)
    
    read_lock(evtchn_rwlock)
                             spin_lock(hvc_lock)
                                                 write_lock(evtchn_rwlock)
                                                     [blocks]
    spin_lock(hvc_lock)
        [blocks]
                            read_lock(evtchn_rwlock)
                                [blocks due to writer waiting,
                                 and not in_interrupt()]
    
    This issue can be avoided by replacing evtchn_rwlock with RCU in
    xen_free_irq(). Note that RCU is used only to delay freeing of the
    irq_info memory. There is no RCU based dereferencing or replacement of
    pointers involved.
    
    In order to avoid potential races between removing the irq_info
    reference and handling of interrupts, set the irq_info pointer to NULL
    only when freeing its memory. The IRQ itself must be freed at that
    time, too, as otherwise the same IRQ number could be allocated again
    before handling of the old instance would have been finished.
    
    This is XSA-441 / CVE-2023-34324.
    
    Fixes: 54c9de89895e ("xen/events: add a new "late EOI" evtchn framework")
    Reported-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e3d016a95067ab3e6fcd245ba67b644a6b7d698
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Tue Nov 10 15:20:55 2020 +0100

    mmc: renesas_sdhi: only reset SCC when its pointer is populated
    
    commit 45bffc371fefd8537804b001080a47c6b69d5efa upstream.
    
    Only re-initialize SCC and tuning when an SCC was found during probe().
    This is currently a noop because all R-Car Gen2+ are considered to have
    an SCC. But this will change in a later patch, so we need this
    preparation.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/20201110142058.36393-2-wsa+renesas@sang-engineering.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d86a77c33ba1c357a7504341172cc1507f0698
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Sep 5 23:13:56 2023 +0200

    netfilter: nftables: exthdr: fix 4-byte stack OOB write
    
    commit fd94d9dadee58e09b49075240fe83423eb1dcd36 upstream.
    
    If priv->len is a multiple of 4, then dst[len / 4] can write past
    the destination array which leads to stack corruption.
    
    This construct is necessary to clean the remainder of the register
    in case ->len is NOT a multiple of the register size, so make it
    conditional just like nft_payload.c does.
    
    The bug was added in 4.1 cycle and then copied/inherited when
    tcp/sctp and ip option support was added.
    
    Bug reported by Zero Day Initiative project (ZDI-CAN-21950,
    ZDI-CAN-21951, ZDI-CAN-21961).
    
    Fixes: 49499c3e6e18 ("netfilter: nf_tables: switch registers to 32 bit addressing")
    Fixes: 935b7f643018 ("netfilter: nft_exthdr: add TCP option matching")
    Fixes: 133dc203d77d ("netfilter: nft_exthdr: Support SCTP chunks")
    Fixes: dbb5281a1f84 ("netfilter: nf_tables: add support for matching IPv4 options")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84f6b686df2d44e662cf5f169b47d7590a00144a
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 10 23:59:03 2023 +0200

    netfilter: nf_tables: fix kdoc warnings after gc rework
    
    commit 08713cb006b6f07434f276c5ee214fb20c7fd965 upstream.
    
    Jakub Kicinski says:
      We've got some new kdoc warnings here:
      net/netfilter/nft_set_pipapo.c:1557: warning: Function parameter or member '_set' not described in 'pipapo_gc'
      net/netfilter/nft_set_pipapo.c:1557: warning: Excess function parameter 'set' description in 'pipapo_gc'
      include/net/netfilter/nf_tables.h:577: warning: Function parameter or member 'dead' not described in 'nft_set'
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Closes: https://lore.kernel.org/netdev/20230810104638.746e46f1@kernel.org/
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c17446c0080571c2ac9038e47d8a6f856182d6e9
Author: John David Anglin <dave@parisc-linux.org>
Date:   Tue Sep 19 17:51:40 2023 +0000

    parisc: Restore __ldcw_align for PA-RISC 2.0 processors
    
    commit 914988e099fc658436fbd7b8f240160c352b6552 upstream.
    
    Back in 2005, Kyle McMartin removed the 16-byte alignment for
    ldcw semaphores on PA 2.0 machines (CONFIG_PA20). This broke
    spinlocks on pre PA8800 processors. The main symptom was random
    faults in mmap'd memory (e.g., gcc compilations, etc).
    
    Unfortunately, the errata for this ldcw change is lost.
    
    The issue is the 16-byte alignment required for ldcw semaphore
    instructions can only be reduced to natural alignment when the
    ldcw operation can be handled coherently in cache. Only PA8800
    and PA8900 processors actually support doing the operation in
    cache.
    
    Aligning the spinlock dynamically adds two integer instructions
    to each spinlock.
    
    Tested on rp3440, c8000 and a500.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Link: https://lore.kernel.org/linux-parisc/6b332788-2227-127f-ba6d-55e99ecf4ed8@bell.net/T/#t
    Link: https://lore.kernel.org/linux-parisc/20050609050702.GB4641@roadwarrior.mcmartin.ca/
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfc333393ae66fe00b84c6917bc44f93bedb638a
Author: Shay Drory <shayd@nvidia.com>
Date:   Wed Sep 20 13:01:56 2023 +0300

    RDMA/mlx5: Fix NULL string error
    
    commit dab994bcc609a172bfdab15a0d4cb7e50e8b5458 upstream.
    
    checkpath is complaining about NULL string, change it to 'Unknown'.
    
    Fixes: 37aa5c36aa70 ("IB/mlx5: Add UARs write-combining and non-cached mapping")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Link: https://lore.kernel.org/r/8638e5c14fadbde5fa9961874feae917073af920.1695203958.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d520cdb0cd095eac5d00078dfd318408c9b5eed
Author: Bernard Metzler <bmt@zurich.ibm.com>
Date:   Tue Sep 5 16:58:22 2023 +0200

    RDMA/siw: Fix connection failure handling
    
    commit 53a3f777049771496f791504e7dc8ef017cba590 upstream.
    
    In case immediate MPA request processing fails, the newly
    created endpoint unlinks the listening endpoint and is
    ready to be dropped. This special case was not handled
    correctly by the code handling the later TCP socket close,
    causing a NULL dereference crash in siw_cm_work_handler()
    when dereferencing a NULL listener. We now also cancel
    the useless MPA timeout, if immediate MPA request
    processing fails.
    
    This patch furthermore simplifies MPA processing in general:
    Scheduling a useless TCP socket read in sk_data_ready() upcall
    is now surpressed, if the socket is already moved out of
    TCP_ESTABLISHED state.
    
    Fixes: 6c52fdc244b5 ("rdma/siw: connection management")
    Signed-off-by: Bernard Metzler <bmt@zurich.ibm.com>
    Link: https://lore.kernel.org/r/20230905145822.446263-1-bmt@zurich.ibm.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a4a6a47e0740653e416d5dda370c8aed2d7a3d4
Author: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
Date:   Tue Sep 5 18:32:58 2023 +0800

    RDMA/uverbs: Fix typo of sizeof argument
    
    commit c489800e0d48097fc6afebd862c6afa039110a36 upstream.
    
    Since size of 'hdr' pointer and '*hdr' structure is equal on 64-bit
    machines issue probably didn't cause any wrong behavior. But anyway,
    fixing of typo is required.
    
    Fixes: da0f60df7bd5 ("RDMA/uverbs: Prohibit write() calls with too small buffers")
    Co-developed-by: Ivanov Mikhail <ivanov.mikhail1@huawei-partners.com>
    Signed-off-by: Ivanov Mikhail <ivanov.mikhail1@huawei-partners.com>
    Signed-off-by: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
    Link: https://lore.kernel.org/r/20230905103258.1738246-1-konstantin.meskhidze@huawei.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 626868282c361463f1da40255c346887aa8e44bd
Author: Leon Romanovsky <leon@kernel.org>
Date:   Mon Sep 11 15:18:06 2023 +0300

    RDMA/cma: Fix truncation compilation warning in make_cma_ports
    
    commit 18126c767658ae8a831257c6cb7776c5ba5e7249 upstream.
    
    The following compilation error is false alarm as RDMA devices don't
    have such large amount of ports to actually cause to format truncation.
    
    drivers/infiniband/core/cma_configfs.c: In function ‘make_cma_ports’:
    drivers/infiniband/core/cma_configfs.c:223:57: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]
      223 |                 snprintf(port_str, sizeof(port_str), "%u", i + 1);
          |                                                         ^
    drivers/infiniband/core/cma_configfs.c:223:17: note: ‘snprintf’ output between 2 and 11 bytes into a destination of size 10
      223 |                 snprintf(port_str, sizeof(port_str), "%u", i + 1);
          |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    cc1: all warnings being treated as errors
    make[5]: *** [scripts/Makefile.build:243: drivers/infiniband/core/cma_configfs.o] Error 1
    
    Fixes: 045959db65c6 ("IB/cma: Add configfs for rdma_cm")
    Link: https://lore.kernel.org/r/a7e3b347ee134167fa6a3787c56ef231a04bc8c2.1694434639.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7de0e42444e9bc18214eff4aaa04de230eb9eb3d
Author: Mark Zhang <markzhang@nvidia.com>
Date:   Wed Sep 27 12:05:11 2023 +0300

    RDMA/cma: Initialize ib_sa_multicast structure to 0 when join
    
    commit e0fe97efdb00f0f32b038a4836406a82886aec9c upstream.
    
    Initialize the structure to 0 so that it's fields won't have random
    values. For example fields like rec.traffic_class (as well as
    rec.flow_label and rec.sl) is used to generate the user AH through:
      cma_iboe_join_multicast
        cma_make_mc_event
          ib_init_ah_from_mcmember
    
    And a random traffic_class causes a random IP DSCP in RoCEv2.
    
    Fixes: b5de0c60cc30 ("RDMA/cma: Fix use after free race in roce multicast join")
    Signed-off-by: Mark Zhang <markzhang@nvidia.com>
    Link: https://lore.kernel.org/r/20230927090511.603595-1-markzhang@nvidia.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36953b4da78bc296d203a25330c3192bcad1ccd9
Author: Duje Mihanović <duje.mihanovic@skole.hr>
Date:   Fri Sep 29 17:41:57 2023 +0200

    gpio: pxa: disable pinctrl calls for MMP_GPIO
    
    commit f0575116507b981e6a810e78ce3c9040395b958b upstream.
    
    Similarly to PXA3xx and MMP2, pinctrl-single isn't capable of setting
    pin direction on MMP either.
    
    Fixes: a770d946371e ("gpio: pxa: add pin control gpio direction and request")
    Signed-off-by: Duje Mihanović <duje.mihanovic@skole.hr>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ad972e668708f965f963b6886ff67efc5603e9d
Author: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
Date:   Tue Oct 3 09:39:26 2023 +0200

    gpio: aspeed: fix the GPIO number passed to pinctrl_gpio_set_config()
    
    commit f9315f17bf778cb8079a29639419fcc8a41a3c84 upstream.
    
    pinctrl_gpio_set_config() expects the GPIO number from the global GPIO
    numberspace, not the controller-relative offset, which needs to be added
    to the chip base.
    
    Fixes: 5ae4cb94b313 ("gpio: aspeed: Add debounce support")
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Reviewed-by: Andrew Jeffery <andrew@codeconstruct.com.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7d8f1a679ece1edd12267f3c29e0533f50b53bb
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Sep 23 07:55:56 2023 +0200

    IB/mlx4: Fix the size of a buffer in add_port_entries()
    
    commit d7f393430a17c2bfcdf805462a5aa80be4285b27 upstream.
    
    In order to be sure that 'buff' is never truncated, its size should be
    12, not 11.
    
    When building with W=1, this fixes the following warnings:
    
      drivers/infiniband/hw/mlx4/sysfs.c: In function ‘add_port_entries’:
      drivers/infiniband/hw/mlx4/sysfs.c:268:34: error: ‘sprintf’ may write a terminating nul past the end of the destination [-Werror=format-overflow=]
        268 |                 sprintf(buff, "%d", i);
            |                                  ^
      drivers/infiniband/hw/mlx4/sysfs.c:268:17: note: ‘sprintf’ output between 2 and 12 bytes into a destination of size 11
        268 |                 sprintf(buff, "%d", i);
            |                 ^~~~~~~~~~~~~~~~~~~~~~
      drivers/infiniband/hw/mlx4/sysfs.c:286:34: error: ‘sprintf’ may write a terminating nul past the end of the destination [-Werror=format-overflow=]
        286 |                 sprintf(buff, "%d", i);
            |                                  ^
      drivers/infiniband/hw/mlx4/sysfs.c:286:17: note: ‘sprintf’ output between 2 and 12 bytes into a destination of size 11
        286 |                 sprintf(buff, "%d", i);
            |                 ^~~~~~~~~~~~~~~~~~~~~~
    
    Fixes: c1e7e466120b ("IB/mlx4: Add iov directory in sysfs under the ib device")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/0bb1443eb47308bc9be30232cc23004c4d4cf43e.1695448530.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 204c2d485f860e0d8fcc9468b2388e6a727dd18d
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Sep 8 10:03:50 2023 +0300

    of: dynamic: Fix potential memory leak in of_changeset_action()
    
    commit 55e95bfccf6db8d26a66c46e1de50d53c59a6774 upstream.
    
    Smatch complains that the error path where "action" is invalid leaks
    the "ce" allocation:
        drivers/of/dynamic.c:935 of_changeset_action()
        warn: possible memory leak of 'ce'
    
    Fix this by doing the validation before the allocation.
    
    Note that there is not any actual problem with upstream kernels. All
    callers of of_changeset_action() are static inlines with fixed action
    values.
    
    Fixes: 914d9d831e61 ("of: dynamic: Refactor action prints to not use "%pOF" inside devtree_lock")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/r/202309011059.EOdr4im9-lkp@intel.com/
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/7dfaf999-30ad-491c-9615-fb1138db121c@moroto.mountain
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b74f12f98b7f3bdc57879a25035a071dd9142fe5
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed Oct 4 21:17:49 2023 +0300

    RDMA/core: Require admin capabilities to set system parameters
    
    commit c38d23a54445f9a8aa6831fafc9af0496ba02f9e upstream.
    
    Like any other set command, require admin permissions to do it.
    
    Cc: stable@vger.kernel.org
    Fixes: 2b34c5580226 ("RDMA/core: Add command to set ib_core device net namspace sharing mode")
    Link: https://lore.kernel.org/r/75d329fdd7381b52cbdf87910bef16c9965abb1f.1696443438.git.leon@kernel.org
    Reviewed-by: Parav Pandit <parav@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccd87fe7a0f6f42bbe1c577125d432ebdcc59198
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Wed Sep 20 13:51:16 2023 +0300

    dm zoned: free dmz->ddev array in dmz_put_zoned_devices
    
    commit 9850ccd5dd88075b2b7fd28d96299d5535f58cc5 upstream.
    
    Commit 4dba12881f88 ("dm zoned: support arbitrary number of devices")
    made the pointers to additional zoned devices to be stored in a
    dynamically allocated dmz->ddev array. However, this array is not freed.
    
    Rename dmz_put_zoned_device to dmz_put_zoned_devices and fix it to
    free the dmz->ddev array when cleaning up zoned device information.
    Remove NULL assignment for all dmz->ddev elements and just free the
    dmz->ddev array instead.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: 4dba12881f88 ("dm zoned: support arbitrary number of devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82d87c944ea8d6bac436b88611ea9bf9be068349
Author: Ivan Babrou <ivan@cloudflare.com>
Date:   Mon Jan 4 15:57:18 2021 -0800

    cpupower: add Makefile dependencies for install targets
    
    commit fb7791e213a64495ec2336869b868fcd8af14346 upstream.
    
    This allows building cpupower in parallel rather than serially.
    
    Signed-off-by: Ivan Babrou <ivan@cloudflare.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 492241613cf44accb4d6059ddda4f4bab836afaa
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Oct 1 11:04:20 2023 -0400

    sctp: update hb timer immediately after users change hb_interval
    
    [ Upstream commit 1f4e803cd9c9166eb8b6c8b0b8e4124f7499fc07 ]
    
    Currently, when hb_interval is changed by users, it won't take effect
    until the next expiry of hb timer. As the default value is 30s, users
    have to wait up to 30s to wait its hb_interval update to work.
    
    This becomes pretty bad in containers where a much smaller value is
    usually set on hb_interval. This patch improves it by resetting the
    hb timer immediately once the value of hb_interval is updated by users.
    
    Note that we don't address the already existing 'problem' when sending
    a heartbeat 'on demand' if one hb has just been sent(from the timer)
    mentioned in:
    
      https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg590224.html
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/75465785f8ee5df2fb3acdca9b8fafdc18984098.1696172660.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f87658493898b8fd9bac04ea96b0f710800325ce
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Oct 1 10:58:45 2023 -0400

    sctp: update transport state when processing a dupcook packet
    
    [ Upstream commit 2222a78075f0c19ca18db53fd6623afb4aff602d ]
    
    During the 4-way handshake, the transport's state is set to ACTIVE in
    sctp_process_init() when processing INIT_ACK chunk on client or
    COOKIE_ECHO chunk on server.
    
    In the collision scenario below:
    
      192.168.1.2 > 192.168.1.1: sctp (1) [INIT] [init tag: 3922216408]
        192.168.1.1 > 192.168.1.2: sctp (1) [INIT] [init tag: 144230885]
        192.168.1.2 > 192.168.1.1: sctp (1) [INIT ACK] [init tag: 3922216408]
        192.168.1.1 > 192.168.1.2: sctp (1) [COOKIE ECHO]
        192.168.1.2 > 192.168.1.1: sctp (1) [COOKIE ACK]
      192.168.1.1 > 192.168.1.2: sctp (1) [INIT ACK] [init tag: 3914796021]
    
    when processing COOKIE_ECHO on 192.168.1.2, as it's in COOKIE_WAIT state,
    sctp_sf_do_dupcook_b() is called by sctp_sf_do_5_2_4_dupcook() where it
    creates a new association and sets its transport to ACTIVE then updates
    to the old association in sctp_assoc_update().
    
    However, in sctp_assoc_update(), it will skip the transport update if it
    finds a transport with the same ipaddr already existing in the old asoc,
    and this causes the old asoc's transport state not to move to ACTIVE
    after the handshake.
    
    This means if DATA retransmission happens at this moment, it won't be able
    to enter PF state because of the check 'transport->state == SCTP_ACTIVE'
    in sctp_do_8_2_transport_strike().
    
    This patch fixes it by updating the transport in sctp_assoc_update() with
    sctp_assoc_add_peer() where it updates the transport state if there is
    already a transport with the same ipaddr exists in the old asoc.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/fd17356abe49713ded425250cc1ae51e9f5846c6.1696172325.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff346b01eba52f1657ecb2b34bf684d7c1addd7d
Author: Neal Cardwell <ncardwell@google.com>
Date:   Sun Oct 1 11:12:39 2023 -0400

    tcp: fix delayed ACKs for MSS boundary condition
    
    [ Upstream commit 4720852ed9afb1c5ab84e96135cb5b73d5afde6f ]
    
    This commit fixes poor delayed ACK behavior that can cause poor TCP
    latency in a particular boundary condition: when an application makes
    a TCP socket write that is an exact multiple of the MSS size.
    
    The problem is that there is painful boundary discontinuity in the
    current delayed ACK behavior. With the current delayed ACK behavior,
    we have:
    
    (1) If an app reads data when > 1*MSS is unacknowledged, then
        tcp_cleanup_rbuf() ACKs immediately because of:
    
         tp->rcv_nxt - tp->rcv_wup > icsk->icsk_ack.rcv_mss ||
    
    (2) If an app reads all received data, and the packets were < 1*MSS,
        and either (a) the app is not ping-pong or (b) we received two
        packets < 1*MSS, then tcp_cleanup_rbuf() ACKs immediately beecause
        of:
    
         ((icsk->icsk_ack.pending & ICSK_ACK_PUSHED2) ||
          ((icsk->icsk_ack.pending & ICSK_ACK_PUSHED) &&
           !inet_csk_in_pingpong_mode(sk))) &&
    
    (3) *However*: if an app reads exactly 1*MSS of data,
        tcp_cleanup_rbuf() does not send an immediate ACK. This is true
        even if the app is not ping-pong and the 1*MSS of data had the PSH
        bit set, suggesting the sending application completed an
        application write.
    
    Thus if the app is not ping-pong, we have this painful case where
    >1*MSS gets an immediate ACK, and <1*MSS gets an immediate ACK, but a
    write whose last skb is an exact multiple of 1*MSS can get a 40ms
    delayed ACK. This means that any app that transfers data in one
    direction and takes care to align write size or packet size with MSS
    can suffer this problem. With receive zero copy making 4KB MSS values
    more common, it is becoming more common to have application writes
    naturally align with MSS, and more applications are likely to
    encounter this delayed ACK problem.
    
    The fix in this commit is to refine the delayed ACK heuristics with a
    simple check: immediately ACK a received 1*MSS skb with PSH bit set if
    the app reads all data. Why? If an skb has a len of exactly 1*MSS and
    has the PSH bit set then it is likely the end of an application
    write. So more data may not be arriving soon, and yet the data sender
    may be waiting for an ACK if cwnd-bound or using TX zero copy. Thus we
    set ICSK_ACK_PUSHED in this case so that tcp_cleanup_rbuf() will send
    an ACK immediately if the app reads all of the data and is not
    ping-pong. Note that this logic is also executed for the case where
    len > MSS, but in that case this logic does not matter (and does not
    hurt) because tcp_cleanup_rbuf() will always ACK immediately if the
    app reads data and there is more than an MSS of unACKed data.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Reviewed-by: Yuchung Cheng <ycheng@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Cc: Xin Guo <guoxin0309@gmail.com>
    Link: https://lore.kernel.org/r/20231001151239.1866845-2-ncardwell.sw@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 677aaa261e7ac0010b1e3ba4c3314f85f39caaf3
Author: Neal Cardwell <ncardwell@google.com>
Date:   Sun Oct 1 11:12:38 2023 -0400

    tcp: fix quick-ack counting to count actual ACKs of new data
    
    [ Upstream commit 059217c18be6757b95bfd77ba53fb50b48b8a816 ]
    
    This commit fixes quick-ack counting so that it only considers that a
    quick-ack has been provided if we are sending an ACK that newly
    acknowledges data.
    
    The code was erroneously using the number of data segments in outgoing
    skbs when deciding how many quick-ack credits to remove. This logic
    does not make sense, and could cause poor performance in
    request-response workloads, like RPC traffic, where requests or
    responses can be multi-segment skbs.
    
    When a TCP connection decides to send N quick-acks, that is to
    accelerate the cwnd growth of the congestion control module
    controlling the remote endpoint of the TCP connection. That quick-ack
    decision is purely about the incoming data and outgoing ACKs. It has
    nothing to do with the outgoing data or the size of outgoing data.
    
    And in particular, an ACK only serves the intended purpose of allowing
    the remote congestion control to grow the congestion window quickly if
    the ACK is ACKing or SACKing new data.
    
    The fix is simple: only count packets as serving the goal of the
    quickack mechanism if they are ACKing/SACKing new data. We can tell
    whether this is the case by checking inet_csk_ack_scheduled(), since
    we schedule an ACK exactly when we are ACKing/SACKing new data.
    
    Fixes: fc6415bcb0f5 ("[TCP]: Fix quick-ack decrementing with TSO.")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Reviewed-by: Yuchung Cheng <ycheng@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231001151239.1866845-1-ncardwell.sw@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a24d0661fa389c241d935da38e0f6a5ee8eb1ae
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Wed Sep 27 18:14:14 2023 +0000

    tipc: fix a potential deadlock on &tx->lock
    
    [ Upstream commit 08e50cf071847323414df0835109b6f3560d44f5 ]
    
    It seems that tipc_crypto_key_revoke() could be be invoked by
    wokequeue tipc_crypto_work_rx() under process context and
    timer/rx callback under softirq context, thus the lock acquisition
    on &tx->lock seems better use spin_lock_bh() to prevent possible
    deadlock.
    
    This flaw was found by an experimental static analysis tool I am
    developing for irq-related deadlock.
    
    tipc_crypto_work_rx() <workqueue>
    --> tipc_crypto_key_distr()
    --> tipc_bcast_xmit()
    --> tipc_bcbase_xmit()
    --> tipc_bearer_bc_xmit()
    --> tipc_crypto_xmit()
    --> tipc_ehdr_build()
    --> tipc_crypto_key_revoke()
    --> spin_lock(&tx->lock)
    <timer interrupt>
       --> tipc_disc_timeout()
       --> tipc_bearer_xmit_skb()
       --> tipc_crypto_xmit()
       --> tipc_ehdr_build()
       --> tipc_crypto_key_revoke()
       --> spin_lock(&tx->lock) <deadlock here>
    
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Link: https://lore.kernel.org/r/20230927181414.59928-1-dg573847474@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9f1568ba37f4c821f0c561852f09338df252e1d
Author: Ben Wolsieffer <ben.wolsieffer@hefring.com>
Date:   Wed Sep 27 13:57:49 2023 -0400

    net: stmmac: dwmac-stm32: fix resume on STM32 MCU
    
    [ Upstream commit 6f195d6b0da3b689922ba9e302af2f49592fa9fc ]
    
    The STM32MP1 keeps clk_rx enabled during suspend, and therefore the
    driver does not enable the clock in stm32_dwmac_init() if the device was
    suspended. The problem is that this same code runs on STM32 MCUs, which
    do disable clk_rx during suspend, causing the clock to never be
    re-enabled on resume.
    
    This patch adds a variant flag to indicate that clk_rx remains enabled
    during suspend, and uses this to decide whether to enable the clock in
    stm32_dwmac_init() if the device was suspended.
    
    This approach fixes this specific bug with limited opportunity for
    unintended side-effects, but I have a follow up patch that will refactor
    the clock configuration and hopefully make it less error prone.
    
    Fixes: 6528e02cc9ff ("net: ethernet: stmmac: add adaptation for stm32mp157c.")
    Signed-off-by: Ben Wolsieffer <ben.wolsieffer@hefring.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Link: https://lore.kernel.org/r/20230927175749.1419774-1-ben.wolsieffer@hefring.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a5142f017587b0aede42f19e0c5d05f174acea9
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Sep 28 15:12:44 2023 +0200

    netfilter: nf_tables: nft_set_rbtree: fix spurious insertion failure
    
    [ Upstream commit 087388278e0f301f4c61ddffb1911d3a180f84b8 ]
    
    nft_rbtree_gc_elem() walks back and removes the end interval element that
    comes before the expired element.
    
    There is a small chance that we've cached this element as 'rbe_ge'.
    If this happens, we hold and test a pointer that has been queued for
    freeing.
    
    It also causes spurious insertion failures:
    
    $ cat test-testcases-sets-0044interval_overlap_0.1/testout.log
    Error: Could not process rule: File exists
    add element t s {  0 -  2 }
                       ^^^^^^
    Failed to insert  0 -  2 given:
    table ip t {
            set s {
                    type inet_service
                    flags interval,timeout
                    timeout 2s
                    gc-interval 2s
            }
    }
    
    The set (rbtree) is empty. The 'failure' doesn't happen on next attempt.
    
    Reason is that when we try to insert, the tree may hold an expired
    element that collides with the range we're adding.
    While we do evict/erase this element, we can trip over this check:
    
    if (rbe_ge && nft_rbtree_interval_end(rbe_ge) && nft_rbtree_interval_end(new))
          return -ENOTEMPTY;
    
    rbe_ge was erased by the synchronous gc, we should not have done this
    check.  Next attempt won't find it, so retry results in successful
    insertion.
    
    Restart in-kernel to avoid such spurious errors.
    
    Such restart are rare, unless userspace intentionally adds very large
    numbers of elements with very short timeouts while setting a huge
    gc interval.
    
    Even in this case, this cannot loop forever, on each retry an existing
    element has been removed.
    
    As the caller is holding the transaction mutex, its impossible
    for a second entity to add more expiring elements to the tree.
    
    After this it also becomes feasible to remove the async gc worker
    and perform all garbage collection from the commit path.
    
    Fixes: c9e6978e2725 ("netfilter: nft_set_rbtree: Switch to node list walk for overlap detection")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ba9348532bd66b012fa6c87152be9c4b987a393
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 3 13:17:53 2023 -0400

    netfilter: handle the connecting collision properly in nf_conntrack_proto_sctp
    
    [ Upstream commit 8e56b063c86569e51eed1c5681ce6361fa97fc7a ]
    
    In Scenario A and B below, as the delayed INIT_ACK always changes the peer
    vtag, SCTP ct with the incorrect vtag may cause packet loss.
    
    Scenario A: INIT_ACK is delayed until the peer receives its own INIT_ACK
    
      192.168.1.2 > 192.168.1.1: [INIT] [init tag: 1328086772]
        192.168.1.1 > 192.168.1.2: [INIT] [init tag: 1414468151]
        192.168.1.2 > 192.168.1.1: [INIT ACK] [init tag: 1328086772]
      192.168.1.1 > 192.168.1.2: [INIT ACK] [init tag: 1650211246] *
      192.168.1.2 > 192.168.1.1: [COOKIE ECHO]
        192.168.1.1 > 192.168.1.2: [COOKIE ECHO]
        192.168.1.2 > 192.168.1.1: [COOKIE ACK]
    
    Scenario B: INIT_ACK is delayed until the peer completes its own handshake
    
      192.168.1.2 > 192.168.1.1: sctp (1) [INIT] [init tag: 3922216408]
        192.168.1.1 > 192.168.1.2: sctp (1) [INIT] [init tag: 144230885]
        192.168.1.2 > 192.168.1.1: sctp (1) [INIT ACK] [init tag: 3922216408]
        192.168.1.1 > 192.168.1.2: sctp (1) [COOKIE ECHO]
        192.168.1.2 > 192.168.1.1: sctp (1) [COOKIE ACK]
      192.168.1.1 > 192.168.1.2: sctp (1) [INIT ACK] [init tag: 3914796021] *
    
    This patch fixes it as below:
    
    In SCTP_CID_INIT processing:
    - clear ct->proto.sctp.init[!dir] if ct->proto.sctp.init[dir] &&
      ct->proto.sctp.init[!dir]. (Scenario E)
    - set ct->proto.sctp.init[dir].
    
    In SCTP_CID_INIT_ACK processing:
    - drop it if !ct->proto.sctp.init[!dir] && ct->proto.sctp.vtag[!dir] &&
      ct->proto.sctp.vtag[!dir] != ih->init_tag. (Scenario B, Scenario C)
    - drop it if ct->proto.sctp.init[dir] && ct->proto.sctp.init[!dir] &&
      ct->proto.sctp.vtag[!dir] != ih->init_tag. (Scenario A)
    
    In SCTP_CID_COOKIE_ACK processing:
    - clear ct->proto.sctp.init[dir] and ct->proto.sctp.init[!dir].
      (Scenario D)
    
    Also, it's important to allow the ct state to move forward with cookie_echo
    and cookie_ack from the opposite dir for the collision scenarios.
    
    There are also other Scenarios where it should allow the packet through,
    addressed by the processing above:
    
    Scenario C: new CT is created by INIT_ACK.
    
    Scenario D: start INIT on the existing ESTABLISHED ct.
    
    Scenario E: start INIT after the old collision on the existing ESTABLISHED
    ct.
    
      192.168.1.2 > 192.168.1.1: sctp (1) [INIT] [init tag: 3922216408]
      192.168.1.1 > 192.168.1.2: sctp (1) [INIT] [init tag: 144230885]
      (both side are stopped, then start new connection again in hours)
      192.168.1.2 > 192.168.1.1: sctp (1) [INIT] [init tag: 242308742]
    
    Fixes: 9fb9cbb1082d ("[NETFILTER]: Add nf_conntrack subsystem.")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b212f361a5d1d936cdf2958de1e9dfac1bccf06b
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Tue Sep 26 17:04:43 2023 +0300

    net: ethernet: ti: am65-cpsw: Fix error code in am65_cpsw_nuss_init_tx_chns()
    
    [ Upstream commit 37d4f55567982e445f86dc0ff4ecfa72921abfe8 ]
    
    This accidentally returns success, but it should return a negative error
    code.
    
    Fixes: 93a76530316a ("net: ethernet: ti: introduce am65x/j721e gigabit eth subsystem driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Roger Quadros <rogerq@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dba849cc98113b145c6e720122942c00b8012bdb
Author: Jeremy Cline <jeremy@jcline.org>
Date:   Fri Sep 8 19:58:53 2023 -0400

    net: nfc: llcp: Add lock when modifying device list
    
    [ Upstream commit dfc7f7a988dad34c3bf4c053124fb26aa6c5f916 ]
    
    The device list needs its associated lock held when modifying it, or the
    list could become corrupted, as syzbot discovered.
    
    Reported-and-tested-by: syzbot+c1d0a03d305972dbbe14@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=c1d0a03d305972dbbe14
    Signed-off-by: Jeremy Cline <jeremy@jcline.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Fixes: 6709d4b7bc2e ("net: nfc: Fix use-after-free caused by nfc_llcp_find_local")
    Link: https://lore.kernel.org/r/20230908235853.1319596-1-jeremy@jcline.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30bc4d7aebe33904b0f2d3aad4b4a9c6029ad0c5
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Sun Sep 24 02:35:49 2023 +0900

    net: usb: smsc75xx: Fix uninit-value access in __smsc75xx_read_reg
    
    [ Upstream commit e9c65989920f7c28775ec4e0c11b483910fb67b8 ]
    
    syzbot reported the following uninit-value access issue:
    
    =====================================================
    BUG: KMSAN: uninit-value in smsc75xx_wait_ready drivers/net/usb/smsc75xx.c:975 [inline]
    BUG: KMSAN: uninit-value in smsc75xx_bind+0x5c9/0x11e0 drivers/net/usb/smsc75xx.c:1482
    CPU: 0 PID: 8696 Comm: kworker/0:3 Not tainted 5.8.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: usb_hub_wq hub_event
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:121
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     smsc75xx_wait_ready drivers/net/usb/smsc75xx.c:975 [inline]
     smsc75xx_bind+0x5c9/0x11e0 drivers/net/usb/smsc75xx.c:1482
     usbnet_probe+0x1152/0x3f90 drivers/net/usb/usbnet.c:1737
     usb_probe_interface+0xece/0x1550 drivers/usb/core/driver.c:374
     really_probe+0xf20/0x20b0 drivers/base/dd.c:529
     driver_probe_device+0x293/0x390 drivers/base/dd.c:701
     __device_attach_driver+0x63f/0x830 drivers/base/dd.c:807
     bus_for_each_drv+0x2ca/0x3f0 drivers/base/bus.c:431
     __device_attach+0x4e2/0x7f0 drivers/base/dd.c:873
     device_initial_probe+0x4a/0x60 drivers/base/dd.c:920
     bus_probe_device+0x177/0x3d0 drivers/base/bus.c:491
     device_add+0x3b0e/0x40d0 drivers/base/core.c:2680
     usb_set_configuration+0x380f/0x3f10 drivers/usb/core/message.c:2032
     usb_generic_driver_probe+0x138/0x300 drivers/usb/core/generic.c:241
     usb_probe_device+0x311/0x490 drivers/usb/core/driver.c:272
     really_probe+0xf20/0x20b0 drivers/base/dd.c:529
     driver_probe_device+0x293/0x390 drivers/base/dd.c:701
     __device_attach_driver+0x63f/0x830 drivers/base/dd.c:807
     bus_for_each_drv+0x2ca/0x3f0 drivers/base/bus.c:431
     __device_attach+0x4e2/0x7f0 drivers/base/dd.c:873
     device_initial_probe+0x4a/0x60 drivers/base/dd.c:920
     bus_probe_device+0x177/0x3d0 drivers/base/bus.c:491
     device_add+0x3b0e/0x40d0 drivers/base/core.c:2680
     usb_new_device+0x1bd4/0x2a30 drivers/usb/core/hub.c:2554
     hub_port_connect drivers/usb/core/hub.c:5208 [inline]
     hub_port_connect_change drivers/usb/core/hub.c:5348 [inline]
     port_event drivers/usb/core/hub.c:5494 [inline]
     hub_event+0x5e7b/0x8a70 drivers/usb/core/hub.c:5576
     process_one_work+0x1688/0x2140 kernel/workqueue.c:2269
     worker_thread+0x10bc/0x2730 kernel/workqueue.c:2415
     kthread+0x551/0x590 kernel/kthread.c:292
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Local variable ----buf.i87@smsc75xx_bind created at:
     __smsc75xx_read_reg drivers/net/usb/smsc75xx.c:83 [inline]
     smsc75xx_wait_ready drivers/net/usb/smsc75xx.c:968 [inline]
     smsc75xx_bind+0x485/0x11e0 drivers/net/usb/smsc75xx.c:1482
     __smsc75xx_read_reg drivers/net/usb/smsc75xx.c:83 [inline]
     smsc75xx_wait_ready drivers/net/usb/smsc75xx.c:968 [inline]
     smsc75xx_bind+0x485/0x11e0 drivers/net/usb/smsc75xx.c:1482
    
    This issue is caused because usbnet_read_cmd() reads less bytes than requested
    (zero byte in the reproducer). In this case, 'buf' is not properly filled.
    
    This patch fixes the issue by returning -ENODATA if usbnet_read_cmd() reads
    less bytes than requested.
    
    Fixes: d0cad871703b ("smsc75xx: SMSC LAN75xx USB gigabit ethernet adapter driver")
    Reported-and-tested-by: syzbot+6966546b78d050bb0b5d@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=6966546b78d050bb0b5d
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230923173549.3284502-1-syoshida@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d44346dda7d4faca4a64b6233a3ea0a09dc615e4
Author: Fabio Estevam <festevam@denx.de>
Date:   Fri Sep 22 09:47:41 2023 -0300

    net: dsa: mv88e6xxx: Avoid EEPROM timeout when EEPROM is absent
    
    [ Upstream commit 6ccf50d4d4741e064ba35511a95402c63bbe21a8 ]
    
    Since commit 23d775f12dcd ("net: dsa: mv88e6xxx: Wait for EEPROM done
    before HW reset") the following error is seen on a imx8mn board with
    a 88E6320 switch:
    
    mv88e6085 30be0000.ethernet-1:00: Timeout waiting for EEPROM done
    
    This board does not have an EEPROM attached to the switch though.
    
    This problem is well explained by Andrew Lunn:
    
    "If there is an EEPROM, and the EEPROM contains a lot of data, it could
    be that when we perform a hardware reset towards the end of probe, it
    interrupts an I2C bus transaction, leaving the I2C bus in a bad state,
    and future reads of the EEPROM do not work.
    
    The work around for this was to poll the EEInt status and wait for it
    to go true before performing the hardware reset.
    
    However, we have discovered that for some boards which do not have an
    EEPROM, EEInt never indicates complete. As a result,
    mv88e6xxx_g1_wait_eeprom_done() spins for a second and then prints a
    warning.
    
    We probably need a different solution than calling
    mv88e6xxx_g1_wait_eeprom_done(). The datasheet for 6352 documents the
    EEPROM Command register:
    
    bit 15 is:
    
      EEPROM Unit Busy. This bit must be set to a one to start an EEPROM
      operation (see EEOp below). Only one EEPROM operation can be
      executing at one time so this bit must be zero before setting it to
      a one.  When the requested EEPROM operation completes this bit will
      automatically be cleared to a zero. The transition of this bit from
      a one to a zero can be used to generate an interrupt (the EEInt in
      Global 1, offset 0x00).
    
    and more interesting is bit 11:
    
      Register Loader Running. This bit is set to one whenever the
      register loader is busy executing instructions contained in the
      EEPROM."
    
    Change to using mv88e6xxx_g2_eeprom_wait() to fix the timeout error
    when the EEPROM chip is not present.
    
    Fixes: 23d775f12dcd ("net: dsa: mv88e6xxx: Wait for EEPROM done before HW reset")
    Suggested-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96b2e1090397217839fcd6c9b6d8f5d439e705ed
Author: David Howells <dhowells@redhat.com>
Date:   Thu Sep 21 11:41:19 2023 +0100

    ipv4, ipv6: Fix handling of transhdrlen in __ip{,6}_append_data()
    
    [ Upstream commit 9d4c75800f61e5d75c1659ba201b6c0c7ead3070 ]
    
    Including the transhdrlen in length is a problem when the packet is
    partially filled (e.g. something like send(MSG_MORE) happened previously)
    when appending to an IPv4 or IPv6 packet as we don't want to repeat the
    transport header or account for it twice.  This can happen under some
    circumstances, such as splicing into an L2TP socket.
    
    The symptom observed is a warning in __ip6_append_data():
    
        WARNING: CPU: 1 PID: 5042 at net/ipv6/ip6_output.c:1800 __ip6_append_data.isra.0+0x1be8/0x47f0 net/ipv6/ip6_output.c:1800
    
    that occurs when MSG_SPLICE_PAGES is used to append more data to an already
    partially occupied skbuff.  The warning occurs when 'copy' is larger than
    the amount of data in the message iterator.  This is because the requested
    length includes the transport header length when it shouldn't.  This can be
    triggered by, for example:
    
            sfd = socket(AF_INET6, SOCK_DGRAM, IPPROTO_L2TP);
            bind(sfd, ...); // ::1
            connect(sfd, ...); // ::1 port 7
            send(sfd, buffer, 4100, MSG_MORE);
            sendfile(sfd, dfd, NULL, 1024);
    
    Fix this by only adding transhdrlen into the length if the write queue is
    empty in l2tp_ip6_sendmsg(), analogously to how UDP does things.
    
    l2tp_ip_sendmsg() looks like it won't suffer from this problem as it builds
    the UDP packet itself.
    
    Fixes: a32e0eec7042 ("l2tp: introduce L2TPv3 IP encapsulation support for IPv6")
    Reported-by: syzbot+62cbf263225ae13ff153@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/0000000000001c12b30605378ce8@google.com/
    Suggested-by: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Eric Dumazet <edumazet@google.com>
    cc: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    cc: "David S. Miller" <davem@davemloft.net>
    cc: David Ahern <dsahern@kernel.org>
    cc: Paolo Abeni <pabeni@redhat.com>
    cc: Jakub Kicinski <kuba@kernel.org>
    cc: netdev@vger.kernel.org
    cc: bpf@vger.kernel.org
    cc: syzkaller-bugs@googlegroups.com
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ea52a2fb8e87067e26bbab4efb8872639240eb0
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Sep 21 08:46:26 2023 +0000

    net: fix possible store tearing in neigh_periodic_work()
    
    [ Upstream commit 25563b581ba3a1f263a00e8c9a97f5e7363be6fd ]
    
    While looking at a related syzbot report involving neigh_periodic_work(),
    I found that I forgot to add an annotation when deleting an
    RCU protected item from a list.
    
    Readers use rcu_deference(*np), we need to use either
    rcu_assign_pointer() or WRITE_ONCE() on writer side
    to prevent store tearing.
    
    I use rcu_assign_pointer() to have lockdep support,
    this was the choice made in neigh_flush_dev().
    
    Fixes: 767e97e1e0db ("neigh: RCU conversion of struct neighbour")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e3d9e5caba870287b857e59c4858fd0e90290cb
Author: Mauricio Faria de Oliveira <mfo@canonical.com>
Date:   Thu Sep 28 17:28:07 2023 -0300

    modpost: add missing else to the "of" check
    
    [ Upstream commit cbc3d00cf88fda95dbcafee3b38655b7a8f2650a ]
    
    Without this 'else' statement, an "usb" name goes into two handlers:
    the first/previous 'if' statement _AND_ the for-loop over 'devtable',
    but the latter is useless as it has no 'usb' device_id entry anyway.
    
    Tested with allmodconfig before/after patch; no changes to *.mod.c:
    
        git checkout v6.6-rc3
        make -j$(nproc) allmodconfig
        make -j$(nproc) olddefconfig
    
        make -j$(nproc)
        find . -name '*.mod.c' | cpio -pd /tmp/before
    
        # apply patch
    
        make -j$(nproc)
        find . -name '*.mod.c' | cpio -pd /tmp/after
    
        diff -r /tmp/before/ /tmp/after/
        # no difference
    
    Fixes: acbef7b76629 ("modpost: fix module autoloading for OF devices with generic compatible property")
    Signed-off-by: Mauricio Faria de Oliveira <mfo@canonical.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 225cd4f67bd4c2c6541e7021dd4ebe0ca23d1994
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Sep 17 19:05:50 2023 -0400

    NFSv4: Fix a nfs4_state_manager() race
    
    [ Upstream commit ed1cc05aa1f7fe8197d300e914afc28ab9818f89 ]
    
    If the NFS4CLNT_RUN_MANAGER flag got set just before we cleared
    NFS4CLNT_MANAGER_RUNNING, then we might have won the race against
    nfs4_schedule_state_manager(), and are responsible for handling the
    recovery situation.
    
    Fixes: aeabb3c96186 ("NFSv4: Fix a NFSv4 state manager deadlock")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8f2ba9ec3582ef83e2f3050e4a7c83c1e7d9d17
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Sep 27 09:22:14 2023 +0200

    ima: rework CONFIG_IMA dependency block
    
    [ Upstream commit 91e326563ee34509c35267808a4b1b3ea3db62a8 ]
    
    Changing the direct dependencies of IMA_BLACKLIST_KEYRING and
    IMA_LOAD_X509 caused them to no longer depend on IMA, but a
    a configuration without IMA results in link failures:
    
    arm-linux-gnueabi-ld: security/integrity/iint.o: in function `integrity_load_keys':
    iint.c:(.init.text+0xd8): undefined reference to `ima_load_x509'
    
    aarch64-linux-ld: security/integrity/digsig_asymmetric.o: in function `asymmetric_verify':
    digsig_asymmetric.c:(.text+0x104): undefined reference to `ima_blacklist_keyring'
    
    Adding explicit dependencies on IMA would fix this, but a more reliable
    way to do this is to enclose the entire Kconfig file in an 'if IMA' block.
    This also allows removing the existing direct dependencies.
    
    Fixes: be210c6d3597f ("ima: Finish deprecation of IMA_TRUSTED_KEYRING Kconfig")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77f82df960cbd457ae4741048cb405bdb73129c1
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Mon Sep 18 15:58:48 2023 -0700

    scsi: target: core: Fix deadlock due to recursive locking
    
    [ Upstream commit a154f5f643c6ecddd44847217a7a3845b4350003 ]
    
    The following call trace shows a deadlock issue due to recursive locking of
    mutex "device_mutex". First lock acquire is in target_for_each_device() and
    second in target_free_device().
    
     PID: 148266   TASK: ffff8be21ffb5d00  CPU: 10   COMMAND: "iscsi_ttx"
      #0 [ffffa2bfc9ec3b18] __schedule at ffffffffa8060e7f
      #1 [ffffa2bfc9ec3ba0] schedule at ffffffffa8061224
      #2 [ffffa2bfc9ec3bb8] schedule_preempt_disabled at ffffffffa80615ee
      #3 [ffffa2bfc9ec3bc8] __mutex_lock at ffffffffa8062fd7
      #4 [ffffa2bfc9ec3c40] __mutex_lock_slowpath at ffffffffa80631d3
      #5 [ffffa2bfc9ec3c50] mutex_lock at ffffffffa806320c
      #6 [ffffa2bfc9ec3c68] target_free_device at ffffffffc0935998 [target_core_mod]
      #7 [ffffa2bfc9ec3c90] target_core_dev_release at ffffffffc092f975 [target_core_mod]
      #8 [ffffa2bfc9ec3ca0] config_item_put at ffffffffa79d250f
      #9 [ffffa2bfc9ec3cd0] config_item_put at ffffffffa79d2583
     #10 [ffffa2bfc9ec3ce0] target_devices_idr_iter at ffffffffc0933f3a [target_core_mod]
     #11 [ffffa2bfc9ec3d00] idr_for_each at ffffffffa803f6fc
     #12 [ffffa2bfc9ec3d60] target_for_each_device at ffffffffc0935670 [target_core_mod]
     #13 [ffffa2bfc9ec3d98] transport_deregister_session at ffffffffc0946408 [target_core_mod]
     #14 [ffffa2bfc9ec3dc8] iscsit_close_session at ffffffffc09a44a6 [iscsi_target_mod]
     #15 [ffffa2bfc9ec3df0] iscsit_close_connection at ffffffffc09a4a88 [iscsi_target_mod]
     #16 [ffffa2bfc9ec3df8] finish_task_switch at ffffffffa76e5d07
     #17 [ffffa2bfc9ec3e78] iscsit_take_action_for_connection_exit at ffffffffc0991c23 [iscsi_target_mod]
     #18 [ffffa2bfc9ec3ea0] iscsi_target_tx_thread at ffffffffc09a403b [iscsi_target_mod]
     #19 [ffffa2bfc9ec3f08] kthread at ffffffffa76d8080
     #20 [ffffa2bfc9ec3f50] ret_from_fork at ffffffffa8200364
    
    Fixes: 36d4cb460bcb ("scsi: target: Avoid that EXTENDED COPY commands trigger lock inversion")
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Link: https://lore.kernel.org/r/20230918225848.66463-1-junxiao.bi@oracle.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9430129d8dbfce075b9392dd376ddfb3cc8a805
Author: Oleksandr Tymoshenko <ovt@google.com>
Date:   Thu Sep 21 06:45:05 2023 +0000

    ima: Finish deprecation of IMA_TRUSTED_KEYRING Kconfig
    
    [ Upstream commit be210c6d3597faf330cb9af33b9f1591d7b2a983 ]
    
    The removal of IMA_TRUSTED_KEYRING made IMA_LOAD_X509
    and IMA_BLACKLIST_KEYRING unavailable because the latter
    two depend on the former. Since IMA_TRUSTED_KEYRING was
    deprecated in favor of INTEGRITY_TRUSTED_KEYRING use it
    as a dependency for the two Kconfigs affected by the
    deprecation.
    
    Fixes: 5087fd9e80e5 ("ima: Remove deprecated IMA_TRUSTED_KEYRING Kconfig")
    Signed-off-by: Oleksandr Tymoshenko <ovt@google.com>
    Reviewed-by: Nayna Jain <nayna@linux.ibm.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 725fd20805590d91d8ab82197fff3fd527d27383
Author: Richard Fitzgerald <rf@opensource.cirrus.com>
Date:   Fri Sep 22 16:37:11 2023 +0100

    regmap: rbtree: Fix wrong register marked as in-cache when creating new node
    
    [ Upstream commit 7a795ac8d49e2433e1b97caf5e99129daf8e1b08 ]
    
    When regcache_rbtree_write() creates a new rbtree_node it was passing the
    wrong bit number to regcache_rbtree_set_register(). The bit number is the
    offset __in number of registers__, but in the case of creating a new block
    regcache_rbtree_write() was not dividing by the address stride to get the
    number of registers.
    
    Fix this by dividing by map->reg_stride.
    Compare with regcache_rbtree_read() where the bit is checked.
    
    This bug meant that the wrong register was marked as present. The register
    that was written to the cache could not be read from the cache because it
    was not marked as cached. But a nearby register could be marked as having
    a cached value even if it was never written to the cache.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Fixes: 3f4ff561bc88 ("regmap: rbtree: Make cache_present bitmap per node")
    Link: https://lore.kernel.org/r/20230922153711.28103-1-rf@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 666cdc43df2475807ae3aaa85e40f87c76ee2629
Author: Felix Fietkau <nbd@nbd.name>
Date:   Tue Sep 19 21:47:47 2023 +0200

    wifi: mt76: mt76x02: fix MT76x0 external LNA gain handling
    
    [ Upstream commit 684e45e120b82deccaf8b85633905304a3bbf56d ]
    
    On MT76x0, LNA gain should be applied for both external and internal LNA.
    On MT76x2, LNA gain should be treated as 0 for external LNA.
    Move the LNA type based logic to mt76x2 in order to fix mt76x0.
    
    Fixes: 2daa67588f34 ("mt76x0: unify lna_gain parsing")
    Reported-by: Shiji Yang <yangshiji66@outlook.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230919194747.31647-1-nbd@nbd.name
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54a4faab2baa7c5756a6d75438a129c183e9beb6
Author: Alexandra Diupina <adiupina@astralinux.ru>
Date:   Tue Sep 19 17:25:02 2023 +0300

    drivers/net: process the result of hdlc_open() and add call of hdlc_close() in uhdlc_close()
    
    [ Upstream commit a59addacf899b1b21a7b7449a1c52c98704c2472 ]
    
    Process the result of hdlc_open() and call uhdlc_close()
    in case of an error. It is necessary to pass the error
    code up the control flow, similar to a possible
    error in request_irq().
    Also add a hdlc_close() call to the uhdlc_close()
    because the comment to hdlc_close() says it must be called
    by the hardware driver when the HDLC device is being closed
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: c19b6d246a35 ("drivers/net: support hdlc function for QE-UCC")
    Signed-off-by: Alexandra Diupina <adiupina@astralinux.ru>
    Reviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93dd471d3a2f37fbd2c5f5fef61cd8b7c8eec027
Author: Leon Hwang <hffilwlqm@gmail.com>
Date:   Sun Sep 17 23:38:46 2023 +0800

    bpf: Fix tr dereferencing
    
    [ Upstream commit b724a6418f1f853bcb39c8923bf14a50c7bdbd07 ]
    
    Fix 'tr' dereferencing bug when CONFIG_BPF_JIT is turned off.
    
    When CONFIG_BPF_JIT is turned off, 'bpf_trampoline_get()' returns NULL,
    which is same as the cases when CONFIG_BPF_JIT is turned on.
    
    Closes: https://lore.kernel.org/r/202309131936.5Nc8eUD0-lkp@intel.com/
    Fixes: f7b12b6fea00 ("bpf: verifier: refactor check_attach_btf_id()")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Leon Hwang <hffilwlqm@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20230917153846.88732-1-hffilwlqm@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10a18c8bac7f60d32b7af22da03b66f350beee38
Author: Pin-yen Lin <treapking@chromium.org>
Date:   Fri Sep 8 18:41:12 2023 +0800

    wifi: mwifiex: Fix oob check condition in mwifiex_process_rx_packet
    
    [ Upstream commit aef7a0300047e7b4707ea0411dc9597cba108fc8 ]
    
    Only skip the code path trying to access the rfc1042 headers when the
    buffer is too small, so the driver can still process packets without
    rfc1042 headers.
    
    Fixes: 119585281617 ("wifi: mwifiex: Fix OOB and integer underflow when rx packets")
    Signed-off-by: Pin-yen Lin <treapking@chromium.org>
    Acked-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Matthew Wang <matthewmwang@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230908104308.1546501-1-treapking@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c15c1bcc5b543c5fd673d8f1f1d40bd7c81c135
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jun 16 11:03:34 2023 +0200

    wifi: iwlwifi: dbg_ini: fix structure packing
    
    [ Upstream commit 424c82e8ad56756bb98b08268ffcf68d12d183eb ]
    
    The iwl_fw_ini_error_dump_range structure has conflicting alignment
    requirements for the inner union and the outer struct:
    
    In file included from drivers/net/wireless/intel/iwlwifi/fw/dbg.c:9:
    drivers/net/wireless/intel/iwlwifi/fw/error-dump.h:312:2: error: field  within 'struct iwl_fw_ini_error_dump_range' is less aligned than 'union iwl_fw_ini_error_dump_range::(anonymous at drivers/net/wireless/intel/iwlwifi/fw/error-dump.h:312:2)' and is usually due to 'struct iwl_fw_ini_error_dump_range' being packed, which can lead to unaligned accesses [-Werror,-Wunaligned-access]
            union {
    
    As the original intention was apparently to make the entire structure
    unaligned, mark the innermost members the same way so the union
    becomes packed as well.
    
    Fixes: 973193554cae6 ("iwlwifi: dbg_ini: dump headers cleanup")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230616090343.2454061-1-arnd@kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5f643ab11631095c60c9852705220edf1659d6f
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Sun Apr 23 19:10:41 2023 +0800

    ubi: Refuse attaching if mtd's erasesize is 0
    
    [ Upstream commit 017c73a34a661a861712f7cc1393a123e5b2208c ]
    
    There exists mtd devices with zero erasesize, which will trigger a
    divide-by-zero exception while attaching ubi device.
    Fix it by refusing attaching if mtd's erasesize is 0.
    
    Fixes: 801c135ce73d ("UBI: Unsorted Block Images")
    Reported-by: Yu Hao <yhao016@ucr.edu>
    Link: https://lore.kernel.org/lkml/977347543.226888.1682011999468.JavaMail.zimbra@nod.at/T/
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33420a82067b5c9975426bbba4d551dc24389de6
Author: Rob Herring <robh@kernel.org>
Date:   Thu Sep 21 14:41:51 2023 -0500

    arm64: Add Cortex-A520 CPU part definition
    
    commit a654a69b9f9c06b2e56387d0b99f0e3e6b0ff4ef upstream.
    
    Add the CPU Part number for the new Arm design.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20230921194156.1050055-1-robh@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81d03e2518945c4bc7b9a7b3f1935203954bf3ba
Author: Jordan Rife <jrife@google.com>
Date:   Thu Sep 21 18:46:41 2023 -0500

    net: prevent rewrite of msg_name in sock_sendmsg()
    
    commit 86a7e0b69bd5b812e48a20c66c2161744f3caa16 upstream.
    
    Callers of sock_sendmsg(), and similarly kernel_sendmsg(), in kernel
    space may observe their value of msg_name change in cases where BPF
    sendmsg hooks rewrite the send address. This has been confirmed to break
    NFS mounts running in UDP mode and has the potential to break other
    systems.
    
    This patch:
    
    1) Creates a new function called __sock_sendmsg() with same logic as the
       old sock_sendmsg() function.
    2) Replaces calls to sock_sendmsg() made by __sys_sendto() and
       __sys_sendmsg() with __sock_sendmsg() to avoid an unnecessary copy,
       as these system calls are already protected.
    3) Modifies sock_sendmsg() so that it makes a copy of msg_name if
       present before passing it down the stack to insulate callers from
       changes to the send address.
    
    Link: https://lore.kernel.org/netdev/20230912013332.2048422-1-jrife@google.com/
    Fixes: 1cedee13d25a ("bpf: Hooks for sys_sendmsg")
    Cc: stable@vger.kernel.org
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jordan Rife <jrife@google.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72fc02ebfc93dc818da3fd1cd4c9fb03fd199c9d
Author: Jordan Rife <jrife@google.com>
Date:   Thu Sep 21 18:46:40 2023 -0500

    net: replace calls to sock->ops->connect() with kernel_connect()
    
    commit 26297b4ce1ce4ea40bc9a48ec99f45da3f64d2e2 upstream.
    
    commit 0bdf399342c5 ("net: Avoid address overwrite in kernel_connect")
    ensured that kernel_connect() will not overwrite the address parameter
    in cases where BPF connect hooks perform an address rewrite. This change
    replaces direct calls to sock->ops->connect() in net with kernel_connect()
    to make these call safe.
    
    Link: https://lore.kernel.org/netdev/20230912013332.2048422-1-jrife@google.com/
    Fixes: d74bad4e74ee ("bpf: Hooks for sys_connect")
    Cc: stable@vger.kernel.org
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jordan Rife <jrife@google.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1aeff207e2953e18c26811a49bd93e7c367b5d75
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Aug 24 21:06:51 2023 -0600

    wifi: mwifiex: Fix tlv_buf_left calculation
    
    commit eec679e4ac5f47507774956fb3479c206e761af7 upstream.
    
    In a TLV encoding scheme, the Length part represents the length after
    the header containing the values for type and length. In this case,
    `tlv_len` should be:
    
    tlv_len == (sizeof(*tlv_rxba) - 1) - sizeof(tlv_rxba->header) + tlv_bitmap_len
    
    Notice that the `- 1` accounts for the one-element array `bitmap`, which
    1-byte size is already included in `sizeof(*tlv_rxba)`.
    
    So, if the above is correct, there is a double-counting of some members
    in `struct mwifiex_ie_types_rxba_sync`, when `tlv_buf_left` and `tmp`
    are calculated:
    
    968                 tlv_buf_left -= (sizeof(*tlv_rxba) + tlv_len);
    969                 tmp = (u8 *)tlv_rxba + tlv_len + sizeof(*tlv_rxba);
    
    in specific, members:
    
    drivers/net/wireless/marvell/mwifiex/fw.h:777
     777         u8 mac[ETH_ALEN];
     778         u8 tid;
     779         u8 reserved;
     780         __le16 seq_num;
     781         __le16 bitmap_len;
    
    This is clearly wrong, and affects the subsequent decoding of data in
    `event_buf` through `tlv_rxba`:
    
    970                 tlv_rxba = (struct mwifiex_ie_types_rxba_sync *)tmp;
    
    Fix this by using `sizeof(tlv_rxba->header)` instead of `sizeof(*tlv_rxba)`
    in the calculation of `tlv_buf_left` and `tmp`.
    
    This results in the following binary differences before/after changes:
    
    | drivers/net/wireless/marvell/mwifiex/11n_rxreorder.o
    | @@ -4698,11 +4698,11 @@
    |  drivers/net/wireless/marvell/mwifiex/11n_rxreorder.c:968
    |                 tlv_buf_left -= (sizeof(tlv_rxba->header) + tlv_len);
    | -    1da7:      lea    -0x11(%rbx),%edx
    | +    1da7:      lea    -0x4(%rbx),%edx
    |      1daa:      movzwl %bp,%eax
    |  drivers/net/wireless/marvell/mwifiex/11n_rxreorder.c:969
    |                 tmp = (u8 *)tlv_rxba  + sizeof(tlv_rxba->header) + tlv_len;
    | -    1dad:      lea    0x11(%r15,%rbp,1),%r15
    | +    1dad:      lea    0x4(%r15,%rbp,1),%r15
    
    The above reflects the desired change: avoid counting 13 too many bytes;
    which is the total size of the double-counted members in
    `struct mwifiex_ie_types_rxba_sync`:
    
    $ pahole -C mwifiex_ie_types_rxba_sync drivers/net/wireless/marvell/mwifiex/11n_rxreorder.o
    struct mwifiex_ie_types_rxba_sync {
            struct mwifiex_ie_types_header header;           /*     0     4 */
    
         |-----------------------------------------------------------------------
         |  u8                         mac[6];               /*     4     6 */  |
         |  u8                         tid;                  /*    10     1 */  |
         |  u8                         reserved;             /*    11     1 */  |
         |  __le16                     seq_num;              /*    12     2 */  |
         |  __le16                     bitmap_len;           /*    14     2 */  |
         |  u8                         bitmap[1];            /*    16     1 */  |
         |----------------------------------------------------------------------|
                                                                      | 13 bytes|
                                                                      -----------
    
            /* size: 17, cachelines: 1, members: 7 */
            /* last cacheline: 17 bytes */
    } __attribute__((__packed__));
    
    Fixes: 99ffe72cdae4 ("mwifiex: process rxba_sync event")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/06668edd68e7a26bbfeebd1201ae077a2a7a8bce.1692931954.git.gustavoars@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6f25930fa346035b66e464c6fb35b27fa597168
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Sat Sep 23 19:15:59 2023 -0600

    qed/red_ll2: Fix undefined behavior bug in struct qed_ll2_info
    
    commit eea03d18af9c44235865a4bc9bec4d780ef6cf21 upstream.
    
    The flexible structure (a structure that contains a flexible-array member
    at the end) `qed_ll2_tx_packet` is nested within the second layer of
    `struct qed_ll2_info`:
    
    struct qed_ll2_tx_packet {
            ...
            /* Flexible Array of bds_set determined by max_bds_per_packet */
            struct {
                    struct core_tx_bd *txq_bd;
                    dma_addr_t tx_frag;
                    u16 frag_len;
            } bds_set[];
    };
    
    struct qed_ll2_tx_queue {
            ...
            struct qed_ll2_tx_packet cur_completing_packet;
    };
    
    struct qed_ll2_info {
            ...
            struct qed_ll2_tx_queue tx_queue;
            struct qed_ll2_cbs cbs;
    };
    
    The problem is that member `cbs` in `struct qed_ll2_info` is placed just
    after an object of type `struct qed_ll2_tx_queue`, which is in itself
    an implicit flexible structure, which by definition ends in a flexible
    array member, in this case `bds_set`. This causes an undefined behavior
    bug at run-time when dynamic memory is allocated for `bds_set`, which
    could lead to a serious issue if `cbs` in `struct qed_ll2_info` is
    overwritten by the contents of `bds_set`. Notice that the type of `cbs`
    is a structure full of function pointers (and a cookie :) ):
    
    include/linux/qed/qed_ll2_if.h:
    107 typedef
    108 void (*qed_ll2_complete_rx_packet_cb)(void *cxt,
    109                                       struct qed_ll2_comp_rx_data *data);
    110
    111 typedef
    112 void (*qed_ll2_release_rx_packet_cb)(void *cxt,
    113                                      u8 connection_handle,
    114                                      void *cookie,
    115                                      dma_addr_t rx_buf_addr,
    116                                      bool b_last_packet);
    117
    118 typedef
    119 void (*qed_ll2_complete_tx_packet_cb)(void *cxt,
    120                                       u8 connection_handle,
    121                                       void *cookie,
    122                                       dma_addr_t first_frag_addr,
    123                                       bool b_last_fragment,
    124                                       bool b_last_packet);
    125
    126 typedef
    127 void (*qed_ll2_release_tx_packet_cb)(void *cxt,
    128                                      u8 connection_handle,
    129                                      void *cookie,
    130                                      dma_addr_t first_frag_addr,
    131                                      bool b_last_fragment, bool b_last_packet);
    132
    133 typedef
    134 void (*qed_ll2_slowpath_cb)(void *cxt, u8 connection_handle,
    135                             u32 opaque_data_0, u32 opaque_data_1);
    136
    137 struct qed_ll2_cbs {
    138         qed_ll2_complete_rx_packet_cb rx_comp_cb;
    139         qed_ll2_release_rx_packet_cb rx_release_cb;
    140         qed_ll2_complete_tx_packet_cb tx_comp_cb;
    141         qed_ll2_release_tx_packet_cb tx_release_cb;
    142         qed_ll2_slowpath_cb slowpath_cb;
    143         void *cookie;
    144 };
    
    Fix this by moving the declaration of `cbs` to the  middle of its
    containing structure `qed_ll2_info`, preventing it from being
    overwritten by the contents of `bds_set` at run-time.
    
    This bug was introduced in 2017, when `bds_set` was converted to a
    one-element array, and started to be used as a Variable Length Object
    (VLO) at run-time.
    
    Fixes: f5823fe6897c ("qed: Add ll2 option to limit the number of bds per packet")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/ZQ+Nz8DfPg56pIzr@work
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9c4b3ca9016b47eb414c3e987e3f029a0b0e02d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Sep 23 18:37:23 2023 +0800

    scsi: zfcp: Fix a double put in zfcp_port_enqueue()
    
    commit b481f644d9174670b385c3a699617052cd2a79d3 upstream.
    
    When device_register() fails, zfcp_port_release() will be called after
    put_device(). As a result, zfcp_ccw_adapter_put() will be called twice: one
    in zfcp_port_release() and one in the error path after device_register().
    So the reference on the adapter object is doubly put, which may lead to a
    premature free. Fix this by adjusting the error tag after
    device_register().
    
    Fixes: f3450c7b9172 ("[SCSI] zfcp: Replace local reference counting with common kref")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20230923103723.10320-1-dinghao.liu@zju.edu.cn
    Acked-by: Benjamin Block <bblock@linux.ibm.com>
    Cc: stable@vger.kernel.org # v2.6.33+
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04b6b67a3e7726e427112b17dd34a5a71a9661be
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Oct 7 13:57:34 2023 +0200

    Revert "PCI: qcom: Disable write access to read only registers for IP v2.3.3"
    
    This reverts commit 48e11e7c81b91002a120a513312a4de9f5ba7f08 which is
    commit a33d700e8eea76c62120cb3dbf5e01328f18319a upstream.
    
    It was applied to the incorrect function as the original function the
    commit changed is not in this kernel branch.
    
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Link: https://lore.kernel.org/r/f23affddab4d8b3cc07508f2d8735d88d823821d.camel@decadent.org.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2cf152e8bb848608a151bc9c0e13c422175413f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Oct 7 13:42:26 2023 +0200

    Revert "clk: imx: pll14xx: dynamically configure PLL for 393216000/361267200Hz"
    
    This reverts commit 972acd701b1982da9cdbeb892bf17eeef2094508 which is
    commit 72d00e560d10665e6139c9431956a87ded6e9880 upstream.
    
    Marek writes:
            The commit message states 'Cc: stable@vger.kernel.org # v5.18+'
            and the commit should only be applied to Linux 5.18.y and newer,
            on anything older it breaks PLL configuration due to missing
            prerequisite patches.
    
    Reported-by: Marek Vasut <marex@denx.de>
    Cc: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Cc: Marco Felsch <m.felsch@pengutronix.de>
    Cc: Abel Vesa <abel.vesa@linaro.org>
    Link: https://lore.kernel.org/r/4e5fa5b2-66b8-8f0b-ccb9-c2b774054e4e@denx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f94471c0cc31d06cb939968950ecdc801e85cc31
Author: Ming Lei <ming.lei@redhat.com>
Date:   Thu Dec 15 10:16:29 2022 +0800

    block: fix use-after-free of q->q_usage_counter
    
    commit d36a9ea5e7766961e753ee38d4c331bbe6ef659b upstream.
    
    For blk-mq, queue release handler is usually called after
    blk_mq_freeze_queue_wait() returns. However, the
    q_usage_counter->release() handler may not be run yet at that time, so
    this can cause a use-after-free.
    
    Fix the issue by moving percpu_ref_exit() into blk_free_queue_rcu().
    Since ->release() is called with rcu read lock held, it is agreed that
    the race should be covered in caller per discussion from the two links.
    
    Reported-by: Zhang Wensheng <zhangwensheng@huaweicloud.com>
    Reported-by: Zhong Jinghua <zhongjinghua@huawei.com>
    Link: https://lore.kernel.org/linux-block/Y5prfOjyyjQKUrtH@T590/T/#u
    Link: https://lore.kernel.org/lkml/Y4%2FmzMd4evRg9yDi@fedora/
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Yu Kuai <yukuai3@huawei.com>
    Cc: Dennis Zhou <dennis@kernel.org>
    Fixes: 2b0d3d3e4fcf ("percpu_ref: reduce memory footprint of percpu_ref in fast path")
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20221215021629.74870-1-ming.lei@redhat.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Saranya Muruganandam <saranyamohan@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d6987d4a34c6f224453004944fa27f3e17153d1
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Thu Oct 5 11:59:35 2023 +0200

    rbd: take header_rwsem in rbd_dev_refresh() only when updating
    
    commit 0b207d02bd9ab8dcc31b262ca9f60dbc1822500d upstream.
    
    rbd_dev_refresh() has been holding header_rwsem across header and
    parent info read-in unnecessarily for ages.  With commit 870611e4877e
    ("rbd: get snapshot context after exclusive lock is ensured to be
    held"), the potential for deadlocks became much more real owning to
    a) header_rwsem now nesting inside lock_rwsem and b) rw_semaphores
    not allowing new readers after a writer is registered.
    
    For example, assuming that I/O request 1, I/O request 2 and header
    read-in request all target the same OSD:
    
    1. I/O request 1 comes in and gets submitted
    2. watch error occurs
    3. rbd_watch_errcb() takes lock_rwsem for write, clears owner_cid and
       releases lock_rwsem
    4. after reestablishing the watch, rbd_reregister_watch() calls
       rbd_dev_refresh() which takes header_rwsem for write and submits
       a header read-in request
    5. I/O request 2 comes in: after taking lock_rwsem for read in
       __rbd_img_handle_request(), it blocks trying to take header_rwsem
       for read in rbd_img_object_requests()
    6. another watch error occurs
    7. rbd_watch_errcb() blocks trying to take lock_rwsem for write
    8. I/O request 1 completion is received by the messenger but can't be
       processed because lock_rwsem won't be granted anymore
    9. header read-in request completion can't be received, let alone
       processed, because the messenger is stranded
    
    Change rbd_dev_refresh() to take header_rwsem only for actually
    updating rbd_dev->header.  Header and parent info read-in don't need
    any locking.
    
    Cc: stable@vger.kernel.org # 0b035401c570: rbd: move rbd_dev_refresh() definition
    Cc: stable@vger.kernel.org # 510a7330c82a: rbd: decouple header read-in from updating rbd_dev->header
    Cc: stable@vger.kernel.org # c10311776f0a: rbd: decouple parent info read-in from updating rbd_dev
    Cc: stable@vger.kernel.org
    Fixes: 870611e4877e ("rbd: get snapshot context after exclusive lock is ensured to be held")
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3d170c5fc0649e1ba9c310029849467cff50dfd
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Thu Oct 5 11:59:34 2023 +0200

    rbd: decouple parent info read-in from updating rbd_dev
    
    commit c10311776f0a8ddea2276df96e255625b07045a8 upstream.
    
    Unlike header read-in, parent info read-in is already decoupled in
    get_parent_info(), but it's buried in rbd_dev_v2_parent_info() along
    with the processing logic.
    
    Separate the initial read-in and update read-in logic into
    rbd_dev_setup_parent() and rbd_dev_update_parent() respectively and
    have rbd_dev_v2_parent_info() just populate struct parent_image_info
    (i.e. what get_parent_info() did).  Some existing QoI issues, like
    flatten of a standalone clone being disregarded on refresh, remain.
    
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ceb306f9b2d2e7a8c8d36f6815417cb056072cd
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Thu Oct 5 11:59:33 2023 +0200

    rbd: decouple header read-in from updating rbd_dev->header
    
    commit 510a7330c82a7754d5df0117a8589e8a539067c7 upstream.
    
    Make rbd_dev_header_info() populate a passed struct rbd_image_header
    instead of rbd_dev->header and introduce rbd_dev_update_header() for
    updating mutable fields in rbd_dev->header upon refresh.  The initial
    read-in of both mutable and immutable fields in rbd_dev_image_probe()
    passes in rbd_dev->header so no update step is required there.
    
    rbd_init_layout() is now called directly from rbd_dev_image_probe()
    instead of individually in format 1 and format 2 implementations.
    
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c4f11d73b2425420c0a6e2d5d8a37eee36dad17
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Thu Oct 5 11:59:32 2023 +0200

    rbd: move rbd_dev_refresh() definition
    
    commit 0b035401c57021fc6c300272cbb1c5a889d4fe45 upstream.
    
    Move rbd_dev_refresh() definition further down to avoid having to
    move struct parent_image_info definition in the next commit.  This
    spares some forward declarations too.
    
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    [idryomov@gmail.com: backport to 5.10-6.1: context]
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0952ce316d133fffc7a632c7ce0ab254702070a
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Sep 22 08:51:17 2023 -0700

    drm/mediatek: Fix backport issue in mtk_drm_gem_prime_vmap()
    
    When building with clang:
    
      drivers/gpu/drm/mediatek/mtk_drm_gem.c:255:10: error: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Wint-conversion]
        255 |                 return -ENOMEM;
            |                        ^~~~~~~
      1 error generated.
    
    GCC reports the same issue as a warning, rather than an error.
    
    Prior to commit 7e542ff8b463 ("drm/mediatek: Use struct dma_buf_map in
    GEM vmap ops"), this function returned a pointer rather than an integer.
    This function is indirectly called in drm_gem_vmap(), which treats NULL
    as -ENOMEM through an error pointer. Return NULL in this block to
    resolve the warning but keep the same end result.
    
    Fixes: 43f561e809aa ("drm/mediatek: Fix potential memory leak if vmap() fail")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c33d75a57a8199eedc03ffe7a599ddb7aaec7db9
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Thu Sep 21 20:54:25 2023 +0800

    ring-buffer: Fix bytes info in per_cpu buffer stats
    
    [ Upstream commit 45d99ea451d0c30bfd4864f0fe485d7dac014902 ]
    
    The 'bytes' info in file 'per_cpu/cpu<X>/stats' means the number of
    bytes in cpu buffer that have not been consumed. However, currently
    after consuming data by reading file 'trace_pipe', the 'bytes' info
    was not changed as expected.
    
      # cat per_cpu/cpu0/stats
      entries: 0
      overrun: 0
      commit overrun: 0
      bytes: 568             <--- 'bytes' is problematical !!!
      oldest event ts:  8651.371479
      now ts:  8653.912224
      dropped events: 0
      read events: 8
    
    The root cause is incorrect stat on cpu_buffer->read_bytes. To fix it:
      1. When stat 'read_bytes', account consumed event in rb_advance_reader();
      2. When stat 'entries_bytes', exclude the discarded padding event which
         is smaller than minimum size because it is invisible to reader. Then
         use rb_page_commit() instead of BUF_PAGE_SIZE at where accounting for
         page-based read/remove/overrun.
    
    Also correct the comments of ring_buffer_bytes_cpu() in this patch.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230921125425.1708423-1-zhengyejian1@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: c64e148a3be3 ("trace: Add ring buffer stats to measure rate of events")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ecde7dd766fcdaf9161a1ca039f036eb4f9b568
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Wed Mar 15 15:24:46 2023 +0100

    ring-buffer: remove obsolete comment for free_buffer_page()
    
    [ Upstream commit a98151ad53b53f010ee364ec2fd06445b328578b ]
    
    The comment refers to mm/slob.c which is being removed. It comes from
    commit ed56829cb319 ("ring_buffer: reset buffer page when freeing") and
    according to Steven the borrowed code was a page mapcount and mapping
    reset, which was later removed by commit e4c2ce82ca27 ("ring_buffer:
    allocate buffer page pointer"). Thus the comment is not accurate anyway,
    remove it.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230315142446.27040-1-vbabka@suse.cz
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Reported-by: Mike Rapoport <mike.rapoport@gmail.com>
    Suggested-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Fixes: e4c2ce82ca27 ("ring_buffer: allocate buffer page pointer")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Stable-dep-of: 45d99ea451d0 ("ring-buffer: Fix bytes info in per_cpu buffer stats")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ad1a1d3d61641a75c44c8008e00720782ab375f
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Sep 24 13:14:15 2023 -0400

    NFSv4: Fix a state manager thread deadlock regression
    
    [ Upstream commit 956fd46f97d238032cb5fa4771cdaccc6e760f9a ]
    
    Commit 4dc73c679114 reintroduces the deadlock that was fixed by commit
    aeabb3c96186 ("NFSv4: Fix a NFSv4 state manager deadlock") because it
    prevents the setup of new threads to handle reboot recovery, while the
    older recovery thread is stuck returning delegations.
    
    Fixes: 4dc73c679114 ("NFSv4: keep state manager thread active if swap is enabled")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec4325e80633c61cd82605901a4fc4b3f429dba7
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Thu Jun 15 14:07:22 2023 -0400

    NFS: rename nfs_client_kset to nfs_kset
    
    [ Upstream commit 8b18a2edecc0741b0eecf8b18fdb356a0f8682de ]
    
    Be brief and match the subsystem name.  There's no need to distinguish this
    kset variable from the server.
    
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Stable-dep-of: 956fd46f97d2 ("NFSv4: Fix a state manager thread deadlock regression")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 598539f38c72aa569f6af93f4857e8ee3d2a5dc4
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Thu Apr 20 12:17:35 2023 -0400

    NFS: Cleanup unused rpc_clnt variable
    
    [ Upstream commit e025f0a73f6acb920d86549b2177a5883535421d ]
    
    The root rpc_clnt is not used here, clean it up.
    
    Fixes: 4dc73c679114 ("NFSv4: keep state manager thread active if swap is enabled")
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Reviewed-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Stable-dep-of: 956fd46f97d2 ("NFSv4: Fix a state manager thread deadlock regression")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19f3d5d13b756b913be582a9e0d0afdeca9c397e
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Thu Jun 22 10:24:35 2023 +0200

    spi: zynqmp-gqspi: fix clock imbalance on probe failure
    
    [ Upstream commit 1527b076ae2cb6a9c590a02725ed39399fcad1cf ]
    
    Make sure that the device is not runtime suspended before explicitly
    disabling the clocks on probe failure and on driver unbind to avoid a
    clock enable-count imbalance.
    
    Fixes: 9e3a000362ae ("spi: zynqmp: Add pm runtime support")
    Cc: stable@vger.kernel.org      # 4.19
    Cc: Naga Sureshkumar Relli <naga.sureshkumar.relli@xilinx.com>
    Cc: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/Message-Id: <20230622082435.7873-1-johan+linaro@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cdec9c13f81313dd9f41f09c7cdecbfa4bea91d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 15 15:46:44 2021 +0800

    spi: spi-zynqmp-gqspi: Fix runtime PM imbalance in zynqmp_qspi_probe
    
    [ Upstream commit a21fbc42807b15b74b0891bd557063e6acf4fcae ]
    
    When platform_get_irq() fails, a pairing PM usage counter
    increment is needed to keep the counter balanced. It's the
    same for the following error paths.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20210408092559.3824-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: 1527b076ae2c ("spi: zynqmp-gqspi: fix clock imbalance on probe failure")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae03dafc3761e1f5e81cc2c9494fb6b50bdc2617
Author: Greg Ungerer <gerg@kernel.org>
Date:   Thu Sep 7 11:18:08 2023 +1000

    fs: binfmt_elf_efpic: fix personality for ELF-FDPIC
    
    commit 7c3151585730b7095287be8162b846d31e6eee61 upstream.
    
    The elf-fdpic loader hard sets the process personality to either
    PER_LINUX_FDPIC for true elf-fdpic binaries or to PER_LINUX for normal ELF
    binaries (in this case they would be constant displacement compiled with
    -pie for example).  The problem with that is that it will lose any other
    bits that may be in the ELF header personality (such as the "bug
    emulation" bits).
    
    On the ARM architecture the ADDR_LIMIT_32BIT flag is used to signify a
    normal 32bit binary - as opposed to a legacy 26bit address binary.  This
    matters since start_thread() will set the ARM CPSR register as required
    based on this flag.  If the elf-fdpic loader loses this bit the process
    will be mis-configured and crash out pretty quickly.
    
    Modify elf-fdpic loader personality setting so that it preserves the upper
    three bytes by using the SET_PERSONALITY macro to set it.  This macro in
    the generic case sets PER_LINUX and preserves the upper bytes.
    Architectures can override this for their specific use case, and ARM does
    exactly this.
    
    The problem shows up quite easily running under qemu using the ARM
    architecture, but not necessarily on all types of real ARM hardware.  If
    the underlying ARM processor does not support the legacy 26-bit addressing
    mode then everything will work as expected.
    
    Link: https://lkml.kernel.org/r/20230907011808.2985083-1-gerg@kernel.org
    Fixes: 1bde925d23547 ("fs/binfmt_elf_fdpic.c: provide NOMMU loader for regular ELF binaries")
    Signed-off-by: Greg Ungerer <gerg@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <brauner@kernel.org>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Greg Ungerer <gerg@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ec1abb59a9888b101c0928f8dde92b900bcb6e7
Author: Matthias Schiffer <mschiffer@universe-factory.net>
Date:   Fri Sep 22 22:55:16 2023 +0200

    ata: libata-sata: increase PMP SRST timeout to 10s
    
    commit 753a4d531bc518633ea88ac0ed02b25a16823d51 upstream.
    
    On certain SATA controllers, softreset fails after wakeup from S2RAM with
    the message "softreset failed (1st FIS failed)", sometimes resulting in
    drives not being detected again. With the increased timeout, this issue
    is avoided. Instead, "softreset failed (device not ready)" is now
    logged 1-2 times; this later failure seems to cause fewer problems
    however, and the drives are detected reliably once they've spun up and
    the probe is retried.
    
    The issue was observed with the primary SATA controller of the QNAP
    TS-453B, which is an "Intel Corporation Celeron/Pentium Silver Processor
    SATA Controller [8086:31e3] (rev 06)" integrated in the Celeron J4125 CPU,
    and the following drives:
    
    - Seagate IronWolf ST12000VN0008
    - Seagate IronWolf ST8000NE0004
    
    The SATA controller seems to be more relevant to this issue than the
    drives, as the same drives are always detected reliably on the secondary
    SATA controller on the same board (an ASMedia 106x) without any "softreset
    failed" errors even without the increased timeout.
    
    Fixes: e7d3ef13d52a ("libata: change drive ready wait after hard reset to 5s")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthias Schiffer <mschiffer@universe-factory.net>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc0bd0f2da5c530b45da538d02a2314a1eb3e189
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Fri Sep 8 20:04:52 2023 +0900

    ata: libata-core: Do not register PM operations for SAS ports
    
    commit 75e2bd5f1ede42a2bc88aa34b431e1ace8e0bea0 upstream.
    
    libsas does its own domain based power management of ports. For such
    ports, libata should not use a device type defining power management
    operations as executing these operations for suspend/resume in addition
    to libsas calls to ata_sas_port_suspend() and ata_sas_port_resume() is
    not necessary (and likely dangerous to do, even though problems are not
    seen currently).
    
    Introduce the new ata_port_sas_type device_type for ports managed by
    libsas. This new device type is used in ata_tport_add() and is defined
    without power management operations.
    
    Fixes: 2fcbdcb4c802 ("[SCSI] libata: export ata_port suspend/resume infrastructure for sas")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Chia-Lin Kao (AceLan) <acelan.kao@canonical.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: John Garry <john.g.garry@oracle.com>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 531d9f6dbfd5027c7a70d679403684c696533c24
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Sat Aug 26 13:07:36 2023 +0900

    ata: libata-core: Fix port and device removal
    
    commit 84d76529c650f887f1e18caee72d6f0589e1baf9 upstream.
    
    Whenever an ATA adapter driver is removed (e.g. rmmod),
    ata_port_detach() is called repeatedly for all the adapter ports to
    remove (unload) the devices attached to the port and delete the port
    device itself. Removing of devices is done using libata EH with the
    ATA_PFLAG_UNLOADING port flag set. This causes libata EH to execute
    ata_eh_unload() which disables all devices attached to the port.
    
    ata_port_detach() finishes by calling scsi_remove_host() to remove the
    scsi host associated with the port. This function will trigger the
    removal of all scsi devices attached to the host and in the case of
    disks, calls to sd_shutdown() which will flush the device write cache
    and stop the device. However, given that the devices were already
    disabled by ata_eh_unload(), the synchronize write cache command and
    start stop unit commands fail. E.g. running "rmmod ahci" with first
    removing sd_mod results in error messages like:
    
    ata13.00: disable device
    sd 0:0:0:0: [sda] Synchronizing SCSI cache
    sd 0:0:0:0: [sda] Synchronize Cache(10) failed: Result: hostbyte=DID_BAD_TARGET driverbyte=DRIVER_OK
    sd 0:0:0:0: [sda] Stopping disk
    sd 0:0:0:0: [sda] Start/Stop Unit failed: Result: hostbyte=DID_BAD_TARGET driverbyte=DRIVER_OK
    
    Fix this by removing all scsi devices of the ata devices connected to
    the port before scheduling libata EH to disable the ATA devices.
    
    Fixes: 720ba12620ee ("[PATCH] libata-hp: update unload-unplug")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Tested-by: Chia-Lin Kao (AceLan) <acelan.kao@canonical.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99d308c31923773683bcd768237e90e8e7d4ca4a
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Mon Sep 4 20:38:13 2023 +0900

    ata: libata-core: Fix ata_port_request_pm() locking
    
    commit 3b8e0af4a7a331d1510e963b8fd77e2fca0a77f1 upstream.
    
    The function ata_port_request_pm() checks the port flag
    ATA_PFLAG_PM_PENDING and calls ata_port_wait_eh() if this flag is set to
    ensure that power management operations for a port are not scheduled
    simultaneously. However, this flag check is done without holding the
    port lock.
    
    Fix this by taking the port lock on entry to the function and checking
    the flag under this lock. The lock is released and re-taken if
    ata_port_wait_eh() needs to be called. The two WARN_ON() macros checking
    that the ATA_PFLAG_PM_PENDING flag was cleared are removed as the first
    call is racy and the second one done without holding the port lock.
    
    Fixes: 5ef41082912b ("ata: add ata port system PM callbacks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Chia-Lin Kao (AceLan) <acelan.kao@canonical.com>
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eaf4496662213a6ebd10441a0bde86031bdc775d
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Sep 13 08:26:47 2023 +0300

    net: thunderbolt: Fix TCPv6 GSO checksum calculation
    
    commit e0b65f9b81fef180cf5f103adecbe5505c961153 upstream.
    
    Alex reported that running ssh over IPv6 does not work with
    Thunderbolt/USB4 networking driver. The reason for that is that driver
    should call skb_is_gso() before calling skb_is_gso_v6(), and it should
    not return false after calculates the checksum successfully. This probably
    was a copy paste error from the original driver where it was done properly.
    
    Reported-by: Alex Balcanquall <alex@alexbal.com>
    Fixes: e69b6c02b4c3 ("net: Add support for networking over Thunderbolt cable")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72595dbfcae3b3eac6ebdc1143b77a5130517817
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Fri Sep 15 10:34:28 2023 -0700

    bpf: Fix BTF_ID symbol generation collision in tools/
    
    commit c0bb9fb0e52a64601d38b3739b729d9138d4c8a1 upstream.
    
    Marcus and Satya reported an issue where BTF_ID macro generates same
    symbol in separate objects and that breaks final vmlinux link.
    
      ld.lld: error: ld-temp.o <inline asm>:14577:1: symbol
      '__BTF_ID__struct__cgroup__624' is already defined
    
    This can be triggered under specific configs when __COUNTER__ happens to
    be the same for the same symbol in two different translation units,
    which is already quite unlikely to happen.
    
    Add __LINE__ number suffix to make BTF_ID symbol more unique, which is
    not a complete fix, but it would help for now and meanwhile we can work
    on better solution as suggested by Andrii.
    
    Cc: stable@vger.kernel.org
    Reported-by: Satya Durga Srinivasu Prabhala <quic_satyap@quicinc.com>
    Reported-by: Marcus Seyfarth <m.seyfarth@gmail.com>
    Closes: https://github.com/ClangBuiltLinux/linux/issues/1913
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Co-developed-by: Jiri Olsa <jolsa@kernel.org>
    Link: https://lore.kernel.org/bpf/CAEf4Bzb5KQ2_LmhN769ifMeSJaWfebccUasQOfQKaOd0nQ51tw@mail.gmail.com/
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20230915-bpf_collision-v3-2-263fc519c21f@google.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a80578bd4410a3ed95b91048675b36e7611cec2
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Fri Sep 15 10:34:27 2023 -0700

    bpf: Fix BTF_ID symbol generation collision
    
    commit 8f908db77782630c45ba29dac35c434b5ce0b730 upstream.
    
    Marcus and Satya reported an issue where BTF_ID macro generates same
    symbol in separate objects and that breaks final vmlinux link.
    
    ld.lld: error: ld-temp.o <inline asm>:14577:1: symbol
    '__BTF_ID__struct__cgroup__624' is already defined
    
    This can be triggered under specific configs when __COUNTER__ happens to
    be the same for the same symbol in two different translation units,
    which is already quite unlikely to happen.
    
    Add __LINE__ number suffix to make BTF_ID symbol more unique, which is
    not a complete fix, but it would help for now and meanwhile we can work
    on better solution as suggested by Andrii.
    
    Cc: stable@vger.kernel.org
    Reported-by: Satya Durga Srinivasu Prabhala <quic_satyap@quicinc.com>
    Reported-by: Marcus Seyfarth <m.seyfarth@gmail.com>
    Closes: https://github.com/ClangBuiltLinux/linux/issues/1913
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/bpf/CAEf4Bzb5KQ2_LmhN769ifMeSJaWfebccUasQOfQKaOd0nQ51tw@mail.gmail.com/
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20230915-bpf_collision-v3-1-263fc519c21f@google.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbbfdb4bab700a72f681de2e49a8c22780b2bdf9
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Sep 18 10:34:51 2023 -0400

    btrfs: properly report 0 avail for very full file systems
    
    commit 58bfe2ccec5f9f137b41dd38f335290dcc13cd5c upstream.
    
    A user reported some issues with smaller file systems that get very
    full.  While investigating this issue I noticed that df wasn't showing
    100% full, despite having 0 chunk space and having < 1MiB of available
    metadata space.
    
    This turns out to be an overflow issue, we're doing:
    
      total_available_metadata_space - SZ_4M < global_block_rsv_size
    
    to determine if there's not enough space to make metadata allocations,
    which overflows if total_available_metadata_space is < 4M.  Fix this by
    checking to see if our available space is greater than the 4M threshold.
    This makes df properly report 100% usage on the file system.
    
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef47f25e98de9574c5b7ab15570a9854821c97de
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Fri Sep 29 18:01:13 2023 -0400

    ring-buffer: Update "shortest_full" in polling
    
    commit 1e0cb399c7653462d9dadf8ab9425337c355d358 upstream.
    
    It was discovered that the ring buffer polling was incorrectly stating
    that read would not block, but that's because polling did not take into
    account that reads will block if the "buffer-percent" was set. Instead,
    the ring buffer polling would say reads would not block if there was any
    data in the ring buffer. This was incorrect behavior from a user space
    point of view. This was fixed by commit 42fb0a1e84ff by having the polling
    code check if the ring buffer had more data than what the user specified
    "buffer percent" had.
    
    The problem now is that the polling code did not register itself to the
    writer that it wanted to wait for a specific "full" value of the ring
    buffer. The result was that the writer would wake the polling waiter
    whenever there was a new event. The polling waiter would then wake up, see
    that there's not enough data in the ring buffer to notify user space and
    then go back to sleep. The next event would wake it up again.
    
    Before the polling fix was added, the code would wake up around 100 times
    for a hackbench 30 benchmark. After the "fix", due to the constant waking
    of the writer, it would wake up over 11,0000 times! It would never leave
    the kernel, so the user space behavior was still "correct", but this
    definitely is not the desired effect.
    
    To fix this, have the polling code add what it's waiting for to the
    "shortest_full" variable, to tell the writer not to wake it up if the
    buffer is not as full as it expects to be.
    
    Note, after this fix, it appears that the waiter is now woken up around 2x
    the times it was before (~200). This is a tremendous improvement from the
    11,000 times, but I will need to spend some time to see why polling is
    more aggressive in its wakeups than the read blocking code.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230929180113.01c2cae3@rorschach.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Fixes: 42fb0a1e84ff ("tracing/ring-buffer: Have polling block on watermark")
    Reported-by: Julia Lawall <julia.lawall@inria.fr>
    Tested-by: Julia Lawall <julia.lawall@inria.fr>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7a0df4c08778e1398413a94f19a6319851b97ff
Author: Ben Wolsieffer <Ben.Wolsieffer@hefring.com>
Date:   Thu Sep 14 12:30:20 2023 -0400

    proc: nommu: /proc/<pid>/maps: release mmap read lock
    
    commit 578d7699e5c2add8c2e9549d9d75dfb56c460cb3 upstream.
    
    The no-MMU implementation of /proc/<pid>/map doesn't normally release
    the mmap read lock, because it uses !IS_ERR_OR_NULL(_vml) to determine
    whether to release the lock.  Since _vml is NULL when the end of the
    mappings is reached, the lock is not released.
    
    Reading /proc/1/maps twice doesn't cause a hang because it only
    takes the read lock, which can be taken multiple times and therefore
    doesn't show any problem if the lock isn't released. Instead, you need
    to perform some operation that attempts to take the write lock after
    reading /proc/<pid>/maps. To actually reproduce the bug, compile the
    following code as 'proc_maps_bug':
    
    #include <stdio.h>
    #include <unistd.h>
    #include <sys/mman.h>
    
    int main(int argc, char *argv[]) {
            void *buf;
            sleep(1);
            buf = mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
            puts("mmap returned");
            return 0;
    }
    
    Then, run:
    
      ./proc_maps_bug &; cat /proc/$!/maps; fg
    
    Without this patch, mmap() will hang and the command will never
    complete.
    
    This code was incorrectly adapted from the MMU implementation, which at
    the time released the lock in m_next() before returning the last entry.
    
    The MMU implementation has diverged further from the no-MMU version since
    then, so this patch brings their locking and error handling into sync,
    fixing the bug and hopefully avoiding similar issues in the future.
    
    Link: https://lkml.kernel.org/r/20230914163019.4050530-2-ben.wolsieffer@hefring.com
    Fixes: 47fecca15c09 ("fs/proc/task_nommu.c: don't use priv->task->mm")
    Signed-off-by: Ben Wolsieffer <ben.wolsieffer@hefring.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Giulio Benetti <giulio.benetti@benettiengineering.com>
    Cc: Greg Ungerer <gerg@uclinux.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acc7fc82d0addac5ae0998bb447401e44babbb92
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Sep 17 19:26:46 2023 -0400

    Revert "SUNRPC dont update timeout value on connection reset"
    
    commit a275ab62606bcd894ddff09460f7d253828313dc upstream.
    
    This reverts commit 88428cc4ae7abcc879295fbb19373dd76aad2bdd.
    
    The problem this commit is intended to fix was comprehensively fixed
    in commit 7de62bc09fe6 ("SUNRPC dont update timeout value on connection
    reset").
    Since then, this commit has been preventing the correct timeout of soft
    mounted requests.
    
    Cc: stable@vger.kernel.org # 5.9.x: 09252177d5f9: SUNRPC: Handle major timeout in xprt_adjust_timeout()
    Cc: stable@vger.kernel.org # 5.9.x: 7de62bc09fe6: SUNRPC dont update timeout value on connection reset
    Cc: stable@vger.kernel.org # 5.9.x
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3b8c9e0fc3c467dbf5179eecb869f6a5f5723dd
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Sep 14 23:08:44 2023 +0200

    i2c: i801: unregister tco_pdev in i801_probe() error path
    
    commit 3914784553f68c931fc666dbe7e86fe881aada38 upstream.
    
    We have to unregister tco_pdev also if i2c_add_adapter() fails.
    
    Fixes: 9424693035a5 ("i2c: i801: Create iTCO device on newer Intel PCHs")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b664e9db8d2c5e5d4e85277acd0815802a0d76fc
Author: Niklas Cassel <niklas.cassel@wdc.com>
Date:   Mon Sep 18 22:24:50 2023 +0200

    ata: libata-scsi: ignore reserved bits for REPORT SUPPORTED OPERATION CODES
    
    commit 3ef600923521616ebe192c893468ad0424de2afb upstream.
    
    For REPORT SUPPORTED OPERATION CODES command, the service action field is
    defined as bits 0-4 in the second byte in the CDB. Bits 5-7 in the second
    byte are reserved.
    
    Only look at the service action field in the second byte when determining
    if the MAINTENANCE IN opcode is a REPORT SUPPORTED OPERATION CODES command.
    
    This matches how we only look at the service action field in the second
    byte when determining if the SERVICE ACTION IN(16) opcode is a READ
    CAPACITY(16) command (reserved bits 5-7 in the second byte are ignored).
    
    Fixes: 7b2030942859 ("libata: Add support for SCT Write Same")
    Cc: stable@vger.kernel.org
    Signed-off-by: Niklas Cassel <niklas.cassel@wdc.com>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25872c67de20d2f33d7c48ef4e38296858bfcc21
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Sep 7 15:24:34 2023 +0800

    ALSA: hda: Disable power save for solving pop issue on Lenovo ThinkCentre M70q
    
    commit 057a28ef93bdbe84326d34cdb5543afdaab49fe1 upstream.
    
    Lenovo ThinkCentre M70q had boot up pop noise.
    Disable power save will solve pop issue.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/315900e2efef42fd9855eacfeb443abd@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a03b42ae1ed646eb5f5acceff1fb2b1d85ec077
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Sep 7 08:22:33 2023 +0200

    netfilter: nf_tables: disallow rule removal from chain binding
    
    [ Upstream commit f15f29fd4779be8a418b66e9d52979bb6d6c2325 ]
    
    Chain binding only requires the rule addition/insertion command within
    the same transaction. Removal of rules from chain bindings within the
    same transaction makes no sense, userspace does not utilize this
    feature. Replace nft_chain_is_bound() check to nft_chain_binding() in
    rule deletion commands. Replace command implies a rule deletion, reject
    this command too.
    
    Rule flush command can also safely rely on this nft_chain_binding()
    check because unbound chains are not allowed since 62e1e94b246e
    ("netfilter: nf_tables: reject unbound chain set before commit phase").
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Reported-by: Kevin Rich <kevinrich1337@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7130a87ca32396eb9bf48b71a2d42259ae44c6c7
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Sep 21 23:17:31 2023 +0900

    nilfs2: fix potential use after free in nilfs_gccache_submit_read_data()
    
    commit 7ee29facd8a9c5a26079148e36bcf07141b3a6bc upstream.
    
    In nilfs_gccache_submit_read_data(), brelse(bh) is called to drop the
    reference count of bh when the call to nilfs_dat_translate() fails.  If
    the reference count hits 0 and its owner page gets unlocked, bh may be
    freed.  However, bh->b_page is dereferenced to put the page after that,
    which may result in a use-after-free bug.  This patch moves the release
    operation after unlocking and putting the page.
    
    NOTE: The function in question is only called in GC, and in combination
    with current userland tools, address translation using DAT does not occur
    in that function, so the code path that causes this issue will not be
    executed.  However, it is possible to run that code path by intentionally
    modifying the userland GC library or by calling the GC ioctl directly.
    
    [konishi.ryusuke@gmail.com: NOTE added to the commit log]
    Link: https://lkml.kernel.org/r/1543201709-53191-1-git-send-email-bianpan2016@163.com
    Link: https://lkml.kernel.org/r/20230921141731.10073-1-konishi.ryusuke@gmail.com
    Fixes: a3d93f709e89 ("nilfs2: block cache for garbage collection")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reported-by: Ferry Meng <mengferry@linux.alibaba.com>
    Closes: https://lkml.kernel.org/r/20230818092022.111054-1-mengferry@linux.alibaba.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e14afa4450cb7e4cf93e993a765801203d41d014
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Sep 1 01:25:55 2023 +0300

    serial: 8250_port: Check IRQ data before use
    
    commit cce7fc8b29961b64fadb1ce398dc5ff32a79643b upstream.
    
    In case the leaf driver wants to use IRQ polling (irq = 0) and
    IIR register shows that an interrupt happened in the 8250 hardware
    the IRQ data can be NULL. In such a case we need to skip the wake
    event as we came to this path from the timer interrupt and quite
    likely system is already awake.
    
    Without this fix we have got an Oops:
    
        serial8250: ttyS0 at I/O 0x3f8 (irq = 0, base_baud = 115200) is a 16550A
        ...
        BUG: kernel NULL pointer dereference, address: 0000000000000010
        RIP: 0010:serial8250_handle_irq+0x7c/0x240
        Call Trace:
         ? serial8250_handle_irq+0x7c/0x240
         ? __pfx_serial8250_timeout+0x10/0x10
    
    Fixes: 0ba9e3a13c6a ("serial: 8250: Add missing wakeup event reporting")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20230831222555.614426-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d5c8862932d31a810b6545f7d69ecc124402c6e
Author: Daniel Starke <daniel.starke@siemens.com>
Date:   Thu Sep 14 07:15:07 2023 +0200

    Revert "tty: n_gsm: fix UAF in gsm_cleanup_mux"
    
    commit 29346e217b8ab8a52889b88f00b268278d6b7668 upstream.
    
    This reverts commit 9b9c8195f3f0d74a826077fc1c01b9ee74907239.
    
    The commit above is reverted as it did not solve the original issue.
    
    gsm_cleanup_mux() tries to free up the virtual ttys by calling
    gsm_dlci_release() for each available DLCI. There, dlci_put() is called to
    decrease the reference counter for the DLCI via tty_port_put() which
    finally calls gsm_dlci_free(). This already clears the pointer which is
    being checked in gsm_cleanup_mux() before calling gsm_dlci_release().
    Therefore, it is not necessary to clear this pointer in gsm_cleanup_mux()
    as done in the reverted commit. The commit introduces a null pointer
    dereference:
     <TASK>
     ? __die+0x1f/0x70
     ? page_fault_oops+0x156/0x420
     ? search_exception_tables+0x37/0x50
     ? fixup_exception+0x21/0x310
     ? exc_page_fault+0x69/0x150
     ? asm_exc_page_fault+0x26/0x30
     ? tty_port_put+0x19/0xa0
     gsmtty_cleanup+0x29/0x80 [n_gsm]
     release_one_tty+0x37/0xe0
     process_one_work+0x1e6/0x3e0
     worker_thread+0x4c/0x3d0
     ? __pfx_worker_thread+0x10/0x10
     kthread+0xe1/0x110
     ? __pfx_kthread+0x10/0x10
     ret_from_fork+0x2f/0x50
     ? __pfx_kthread+0x10/0x10
     ret_from_fork_asm+0x1b/0x30
     </TASK>
    
    The actual issue is that nothing guards dlci_put() from being called
    multiple times while the tty driver was triggered but did not yet finished
    calling gsm_dlci_free().
    
    Fixes: 9b9c8195f3f0 ("tty: n_gsm: fix UAF in gsm_cleanup_mux")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20230914051507.3240-1-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14443223e08c8bf4f2bf535e9551505143ced256
Author: Vishal Goel <vishal.goel@samsung.com>
Date:   Fri Sep 17 13:08:14 2021 +0530

    Smack:- Use overlay inode label in smack_inode_copy_up()
    
    [ Upstream commit 387ef964460f14fe1c1ea29aba70e22731ea7cf7 ]
    
    Currently in "smack_inode_copy_up()" function, process label is
    changed with the label on parent inode. Due to which,
    process is assigned directory label and whatever file or directory
    created by the process are also getting directory label
    which is wrong label.
    
    Changes has been done to use label of overlay inode instead
    of parent inode.
    
    Signed-off-by: Vishal Goel <vishal.goel@samsung.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 297c51c63fe156ef75eff20ec39b6a0b6c42d758
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Mon May 8 19:02:33 2023 +0200

    smack: Retrieve transmuting information in smack_inode_getsecurity()
    
    [ Upstream commit 3a3d8fce31a49363cc31880dce5e3b0617c9c38b ]
    
    Enhance smack_inode_getsecurity() to retrieve the value for
    SMACK64TRANSMUTE from the inode security blob, similarly to SMACK64.
    
    This helps to display accurate values in the situation where the security
    labels come from mount options and not from xattrs.
    
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41de7a6b95df8b22c77750421a2f9dfe241df731
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Mon May 8 19:02:34 2023 +0200

    smack: Record transmuting in smk_transmuted
    
    [ Upstream commit 2c085f3a8f23c9b444e8b99d93c15d7ce870fc4e ]
    
    smack_dentry_create_files_as() determines whether transmuting should occur
    based on the label of the parent directory the new inode will be added to,
    and not the label of the directory where it is created.
    
    This helps for example to do transmuting on overlayfs, since the latter
    first creates the inode in the working directory, and then moves it to the
    correct destination.
    
    However, despite smack_dentry_create_files_as() provides the correct label,
    smack_inode_init_security() does not know from passed information whether
    or not transmuting occurred. Without this information,
    smack_inode_init_security() cannot set SMK_INODE_CHANGED in smk_flags,
    which will result in the SMACK64TRANSMUTE xattr not being set in
    smack_d_instantiate().
    
    Thus, add the smk_transmuted field to the task_smack structure, and set it
    in smack_dentry_create_files_as() to smk_task if transmuting occurred. If
    smk_task is equal to smk_transmuted in smack_inode_init_security(), act as
    if transmuting was successful but without taking the label from the parent
    directory (the inode label was already set correctly from the current
    credentials in smack_inode_alloc_security()).
    
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 831f18c735e2fc16bf7bfb1ec41cc30e6be9eb0f
Author: Irvin Cote <irvin.cote@insa-lyon.fr>
Date:   Thu Feb 9 17:43:57 2023 -0300

    nvme-pci: always return an ERR_PTR from nvme_pci_alloc_dev
    
    [ Upstream commit dc785d69d753a3894c93afc23b91404652382ead ]
    
    Don't mix NULL and ERR_PTR returns.
    
    Fixes: 2e87570be9d2 ("nvme-pci: factor out a nvme_pci_alloc_dev helper")
    Signed-off-by: Irvin Cote <irvin.cote@insa-lyon.fr>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb28f89d50c0fad6da851b98526368c3709f17be
Author: Phil Sutter <phil@nwl.cc>
Date:   Tue Jun 8 11:40:57 2021 +0200

    netfilter: nft_exthdr: Fix for unsafe packet data read
    
    [ Upstream commit cf6b5ffdce5a78b2fcb0e53b3a2487c490bcbf7f ]
    
    While iterating through an SCTP packet's chunks, skb_header_pointer() is
    called for the minimum expected chunk header size. If (that part of) the
    skbuff is non-linear, the following memcpy() may read data past
    temporary buffer '_sch'. Use skb_copy_bits() instead which does the
    right thing in this situation.
    
    Fixes: 133dc203d77df ("netfilter: nft_exthdr: Support SCTP chunks")
    Suggested-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Phil Sutter <phil@nwl.cc>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e18216cd0ec7fef9bb87cf8b4124bc1212e5add1
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Jun 11 19:06:45 2021 +0200

    netfilter: nft_exthdr: Search chunks in SCTP packets only
    
    [ Upstream commit 5acc44f39458f43dac9724cefa4da29847cfe997 ]
    
    Since user space does not generate a payload dependency, plain sctp
    chunk matches cause searching in non-SCTP packets, too. Avoid this
    potential mis-interpretation of packet data by checking pkt->tprot.
    
    Fixes: 133dc203d77df ("netfilter: nft_exthdr: Support SCTP chunks")
    Signed-off-by: Phil Sutter <phil@nwl.cc>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 152b8ac839c97ab1c26669869a9ca400e05807dc
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Oct 2 09:05:35 2023 +0200

    watchdog: iTCO_wdt: Set NO_REBOOT if the watchdog is not already running
    
    commit ef9b7bf52c2f47f0a9bf988543c577b92c92d15e upstream.
    
    Daniel reported that the commit 1ae3e78c0820 ("watchdog: iTCO_wdt: No
    need to stop the timer in probe") makes QEMU implementation of the iTCO
    watchdog not to trigger reboot anymore when NO_REBOOT flag is initially
    cleared using this option (in QEMU command line):
    
      -global ICH9-LPC.noreboot=false
    
    The problem with the commit is that it left the unconditional setting of
    NO_REBOOT that is not cleared anymore when the kernel keeps pinging the
    watchdog (as opposed to the previous code that called iTCO_wdt_stop()
    that cleared it).
    
    Fix this so that we only set NO_REBOOT if the watchdog was not initially
    running.
    
    Fixes: 1ae3e78c0820 ("watchdog: iTCO_wdt: No need to stop the timer in probe")
    Reported-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20221028062750.45451-1-mika.westerberg@linux.intel.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13b7d49f339a59de67ef721f9fd324b3acf94688
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Oct 2 09:05:34 2023 +0200

    watchdog: iTCO_wdt: No need to stop the timer in probe
    
    commit 1ae3e78c08209ac657c59f6f7ea21bbbd7f6a1d4 upstream.
    
    The watchdog core can handle pinging of the watchdog before userspace
    opens the device. For this reason instead of stopping the timer, just
    mark it as running and let the watchdog core take care of it.
    
    Cc: Malin Jonsson <malin.jonsson@ericsson.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210921102900.61586-1-mika.westerberg@linux.intel.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d599a3f57a51014209ebd7a177da03fe9c6040f
Author: Pratyush Yadav <ptyadav@amazon.de>
Date:   Tue Sep 12 17:52:49 2023 +0200

    nvme-pci: do not set the NUMA node of device if it has none
    
    [ Upstream commit dad651b2a44eb6b201738f810254279dca29d30d ]
    
    If a device has no NUMA node information associated with it, the driver
    puts the device in node first_memory_node (say node 0). Not having a
    NUMA node and being associated with node 0 are completely different
    things and it makes little sense to mix the two.
    
    Signed-off-by: Pratyush Yadav <ptyadav@amazon.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97e148dcb97d2b1fefedc83bbc2238dada68d224
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Nov 8 09:44:00 2022 +0100

    nvme-pci: factor out a nvme_pci_alloc_dev helper
    
    [ Upstream commit 2e87570be9d2746e7c4e7ab1cc18fd3ca7de2768 ]
    
    Add a helper that allocates the nvme_dev structure up to the point where
    we can call nvme_init_ctrl.  This pairs with the free_ctrl method and can
    thus be used to cleanup the teardown path and make it more symmetric.
    
    Note that this now calls nvme_init_ctrl a lot earlier during probing,
    which also means the per-controller character device shows up earlier.
    Due to the controller state no commnds can be send on it, but it might
    make sense to delay the cdev registration until nvme_init_ctrl_finish.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Tested-by Gerd Bayer <gbayer@linxu.ibm.com>
    Stable-dep-of: dad651b2a44e ("nvme-pci: do not set the NUMA node of device if it has none")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71357c751fb25c9c7ced051419dbddd02250b91d
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Nov 8 09:41:41 2022 +0100

    nvme-pci: factor the iod mempool creation into a helper
    
    [ Upstream commit 081a7d958ce4b65f9aab6e70e65b0b2e0b92297c ]
    
    Add a helper to create the iod mempool.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Tested-by Gerd Bayer <gbayer@linxu.ibm.com>
    Stable-dep-of: dad651b2a44e ("nvme-pci: do not set the NUMA node of device if it has none")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38f82cf8609689b14cf3b52c7a2518344b4a070d
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Jun 9 13:40:17 2021 -0500

    ACPI: Check StorageD3Enable _DSD property in ACPI code
    
    [ Upstream commit 2744d7a0733503931b71c00d156119ced002f22c ]
    
    Although first implemented for NVME, this check may be usable by
    other drivers as well. Microsoft's specification explicitly mentions
    that is may be usable by SATA and AHCI devices.  Google also indicates
    that they have used this with SDHCI in a downstream kernel tree that
    a user can plug a storage device into.
    
    Link: https://docs.microsoft.com/en-us/windows-hardware/design/component-guidelines/power-management-for-storage-hardware-devices-intro
    Suggested-by: Keith Busch <kbusch@kernel.org>
    CC: Shyam-sundar S-k <Shyam-sundar.S-k@amd.com>
    CC: Alexander Deucher <Alexander.Deucher@amd.com>
    CC: Rafael J. Wysocki <rjw@rjwysocki.net>
    CC: Prike Liang <prike.liang@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Stable-dep-of: dad651b2a44e ("nvme-pci: do not set the NUMA node of device if it has none")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67025d56545099f4d6789be628bb2750e6064ac5
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Fri Sep 29 16:14:18 2023 +0300

    cgroup: Fix suspicious rcu_dereference_check() usage warning
    
    commit f2aa197e4794bf4c2c0c9570684f86e6fa103e8b upstream.
    
    task_css_set_check() will use rcu_dereference_check() to check for
    rcu_read_lock_held() on the read-side, which is not true after commit
    dc6e0818bc9a ("sched/cpuacct: Optimize away RCU read lock"). This
    commit drop explicit rcu_read_lock(), change to RCU-sched read-side
    critical section. So fix the RCU warning by adding check for
    rcu_read_lock_sched_held().
    
    Fixes: dc6e0818bc9a ("sched/cpuacct: Optimize away RCU read lock")
    Reported-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Reported-by: syzbot+16e3f2c77e7c5a0113f9@syzkaller.appspotmail.com
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Tested-by: Zhouyi Zhou <zhouzhouyi@gmail.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20220305034103.57123-1-zhouchengming@bytedance.com
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2788f6d492497e2b7014dab2387e9b3549a5ff9
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Fri Sep 29 16:14:17 2023 +0300

    sched/cpuacct: Optimize away RCU read lock
    
    commit dc6e0818bc9a0336d9accf3ea35d146d72aa7a18 upstream.
    
    Since cpuacct_charge() is called from the scheduler update_curr(),
    we must already have rq lock held, then the RCU read lock can
    be optimized away.
    
    And do the same thing in it's wrapper cgroup_account_cputime(),
    but we can't use lockdep_assert_rq_held() there, which defined
    in kernel/sched/sched.h.
    
    Suggested-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220220051426.5274-2-zhouchengming@bytedance.com
    [OP: adjusted lockdep_assert_rq_held() -> lockdep_assert_held()]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82756d8a23943bf80c3da55f4c20a1fdedfd40e4
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Fri Sep 29 16:14:16 2023 +0300

    sched/cpuacct: Fix charge percpu cpuusage
    
    commit 248cc9993d1cc12b8e9ed716cc3fc09f6c3517dd upstream.
    
    The cpuacct_account_field() is always called by the current task
    itself, so it's ok to use __this_cpu_add() to charge the tick time.
    
    But cpuacct_charge() maybe called by update_curr() in load_balance()
    on a random CPU, different from the CPU on which the task is running.
    So __this_cpu_add() will charge that cputime to a random incorrect CPU.
    
    Fixes: 73e6aafd9ea8 ("sched/cpuacct: Simplify the cpuacct code")
    Reported-by: Minye Zhu <zhuminye@bytedance.com>
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Link: https://lore.kernel.org/r/20220220051426.5274-1-zhouchengming@bytedance.com
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8e8e72c58c7b9ca5e5f8ca41feb0f92d732c6a6
Author: Andrey Ryabinin <arbn@yandex-team.com>
Date:   Fri Sep 29 16:14:15 2023 +0300

    sched/cpuacct: Fix user/system in shown cpuacct.usage*
    
    commit dd02d4234c9a2214a81c57a16484304a1a51872a upstream.
    
    cpuacct has 2 different ways of accounting and showing user
    and system times.
    
    The first one uses cpuacct_account_field() to account times
    and cpuacct.stat file to expose them. And this one seems to work ok.
    
    The second one is uses cpuacct_charge() function for accounting and
    set of cpuacct.usage* files to show times. Despite some attempts to
    fix it in the past it still doesn't work. Sometimes while running KVM
    guest the cpuacct_charge() accounts most of the guest time as
    system time. This doesn't match with user&system times shown in
    cpuacct.stat or proc/<pid>/stat.
    
    Demonstration:
     # git clone https://github.com/aryabinin/kvmsample
     # make
     # mkdir /sys/fs/cgroup/cpuacct/test
     # echo $$ > /sys/fs/cgroup/cpuacct/test/tasks
     # ./kvmsample &
     # for i in {1..5}; do cat /sys/fs/cgroup/cpuacct/test/cpuacct.usage_sys; sleep 1; done
     1976535645
     2979839428
     3979832704
     4983603153
     5983604157
    
    Use cpustats accounted in cpuacct_account_field() as the source
    of user/sys times for cpuacct.usage* files. Make cpuacct_charge()
    to account only summary execution time.
    
    Fixes: d740037fac70 ("sched/cpuacct: Split usage accounting into user_usage and sys_usage")
    Signed-off-by: Andrey Ryabinin <arbn@yandex-team.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211115164607.23784-3-arbn@yandex-team.com
    [OP: adjusted context for v5.10]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef3c728ca0d4d25776cb0c6c656a3e6e078c1194
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Jul 28 17:26:54 2023 -0300

    perf build: Define YYNOMEM as YYNOABORT for bison < 3.81
    
    [ Upstream commit 88cc47e24597971b05b6e94c28a2fc81d2a8d61a ]
    
    YYNOMEM was introduced in bison 3.81, so define it as YYABORT for older
    versions, which should provide the previous perf behaviour.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da91481c5d2bd1db68f48c8455d79259416d3cf1
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Mon Sep 18 11:03:49 2023 +0200

    fbdev/sh7760fb: Depend on FB=y
    
    [ Upstream commit f75f71b2c418a27a7c05139bb27a0c83adf88d19 ]
    
    Fix linker error if FB=m about missing fb_io_read and fb_io_write. The
    linker's error message suggests that this config setting has already
    been broken for other symbols.
    
      All errors (new ones prefixed by >>):
    
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o: in function `sh7760fb_probe':
         sh7760fb.c:(.text+0x374): undefined reference to `framebuffer_alloc'
         sh4-linux-ld: sh7760fb.c:(.text+0x394): undefined reference to `fb_videomode_to_var'
         sh4-linux-ld: sh7760fb.c:(.text+0x39c): undefined reference to `fb_alloc_cmap'
         sh4-linux-ld: sh7760fb.c:(.text+0x3a4): undefined reference to `register_framebuffer'
         sh4-linux-ld: sh7760fb.c:(.text+0x3ac): undefined reference to `fb_dealloc_cmap'
         sh4-linux-ld: sh7760fb.c:(.text+0x434): undefined reference to `framebuffer_release'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o: in function `sh7760fb_remove':
         sh7760fb.c:(.text+0x800): undefined reference to `unregister_framebuffer'
         sh4-linux-ld: sh7760fb.c:(.text+0x804): undefined reference to `fb_dealloc_cmap'
         sh4-linux-ld: sh7760fb.c:(.text+0x814): undefined reference to `framebuffer_release'
      >> sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0xc): undefined reference to `fb_io_read'
      >> sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x10): undefined reference to `fb_io_write'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x2c): undefined reference to `cfb_fillrect'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x30): undefined reference to `cfb_copyarea'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x34): undefined reference to `cfb_imageblit'
    
    Suggested-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202309130632.LS04CPWu-lkp@intel.com/
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Acked-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230918090400.13264-1-tzimmermann@suse.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffc459a93065e554f1041f86c1fbe297476ca521
Author: Johnathan Mantey <johnathanx.mantey@intel.com>
Date:   Fri Sep 15 09:12:35 2023 -0700

    ncsi: Propagate carrier gain/loss events to the NCSI controller
    
    [ Upstream commit 3780bb29311eccb7a1c9641032a112eed237f7e3 ]
    
    Report the carrier/no-carrier state for the network interface
    shared between the BMC and the passthrough channel. Without this
    functionality the BMC is unable to reconfigure the NIC in the event
    of a re-cabling to a different subnet.
    
    Signed-off-by: Johnathan Mantey <johnathanx.mantey@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c2500228b8f5ea9abcc4522dedca0963edd2f3b
Author: Benjamin Gray <bgray@linux.ibm.com>
Date:   Tue Aug 29 16:34:55 2023 +1000

    powerpc/watchpoints: Disable preemption in thread_change_pc()
    
    [ Upstream commit cc879ab3ce39bc39f9b1d238b283f43a5f6f957d ]
    
    thread_change_pc() uses CPU local data, so must be protected from
    swapping CPUs while it is reading the breakpoint struct.
    
    The error is more noticeable after 1e60f3564bad ("powerpc/watchpoints:
    Track perf single step directly on the breakpoint"), which added an
    unconditional __this_cpu_read() call in thread_change_pc(). However the
    existing __this_cpu_read() that runs if a breakpoint does need to be
    re-inserted has the same issue.
    
    Signed-off-by: Benjamin Gray <bgray@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230829063457.54157-2-bgray@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5bdbed0361cf56546942ea3f4cbedb154bf6466
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Aug 17 12:41:32 2023 +0200

    media: vb2: frame_vector.c: replace WARN_ONCE with a comment
    
    [ Upstream commit 735de5caf79e06cc9fb96b1b4f4974674ae3e917 ]
    
    The WARN_ONCE was issued also in cases that had nothing to do with VM_IO
    (e.g. if the start address was just a random value and uaccess fails with
    -EFAULT).
    
    There are no reports of WARN_ONCE being issued for actual VM_IO cases, so
    just drop it and instead add a note to the comment before the function.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reported-by: Yikebaer Aizezi <yikebaer61@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebc91848062e6abbe29265ce7e21fb3eded81601
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Sep 11 12:47:30 2023 -0700

    bpf: Clarify error expectations from bpf_clone_redirect
    
    [ Upstream commit 7cb779a6867fea00b4209bcf6de2f178a743247d ]
    
    Commit 151e887d8ff9 ("veth: Fixing transmit return status for dropped
    packets") exposed the fact that bpf_clone_redirect is capable of
    returning raw NET_XMIT_XXX return codes.
    
    This is in the conflict with its UAPI doc which says the following:
    "0 on success, or a negative error in case of failure."
    
    Update the UAPI to reflect the fact that bpf_clone_redirect can
    return positive error numbers, but don't explicitly define
    their meaning.
    
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20230911194731.286342-1-sdf@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0118244848a596c56efd8ed1805a59d37c7d9214
Author: Han Xu <han.xu@nxp.com>
Date:   Wed Sep 6 13:32:54 2023 -0500

    spi: nxp-fspi: reset the FLSHxCR1 registers
    
    [ Upstream commit 18495676f7886e105133f1dc06c1d5e8d5436f32 ]
    
    Reset the FLSHxCR1 registers to default value. ROM may set the register
    value and it affects the SPI NAND normal functions.
    
    Signed-off-by: Han Xu <han.xu@nxp.com>
    Link: https://lore.kernel.org/r/20230906183254.235847-1-han.xu@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6cf19c1b3134b777f1f3243bed7bcbc4e456a2b
Author: Niklas Cassel <niklas.cassel@wdc.com>
Date:   Thu Sep 14 00:19:16 2023 +0200

    ata: libata-eh: do not clear ATA_PFLAG_EH_PENDING in ata_eh_reset()
    
    [ Upstream commit 80cc944eca4f0baa9c381d0706f3160e491437f2 ]
    
    ata_scsi_port_error_handler() starts off by clearing ATA_PFLAG_EH_PENDING,
    before calling ap->ops->error_handler() (without holding the ap->lock).
    
    If an error IRQ is received while ap->ops->error_handler() is running,
    the irq handler will set ATA_PFLAG_EH_PENDING.
    
    Once ap->ops->error_handler() returns, ata_scsi_port_error_handler()
    checks if ATA_PFLAG_EH_PENDING is set, and if it is, another iteration
    of ATA EH is performed.
    
    The problem is that ATA_PFLAG_EH_PENDING is not only cleared by
    ata_scsi_port_error_handler(), it is also cleared by ata_eh_reset().
    
    ata_eh_reset() is called by ap->ops->error_handler(). This additional
    clearing done by ata_eh_reset() breaks the whole retry logic in
    ata_scsi_port_error_handler(). Thus, if an error IRQ is received while
    ap->ops->error_handler() is running, the port will currently remain
    frozen and will never get re-enabled.
    
    The additional clearing in ata_eh_reset() was introduced in commit
    1e641060c4b5 ("libata: clear eh_info on reset completion").
    
    Looking at the original error report:
    https://marc.info/?l=linux-ide&m=124765325828495&w=2
    
    We can see the following happening:
    [    1.074659] ata3: XXX port freeze
    [    1.074700] ata3: XXX hardresetting link, stopping engine
    [    1.074746] ata3: XXX flipping SControl
    
    [    1.411471] ata3: XXX irq_stat=400040 CONN|PHY
    [    1.411475] ata3: XXX port freeze
    
    [    1.420049] ata3: XXX starting engine
    [    1.420096] ata3: XXX rc=0, class=1
    [    1.420142] ata3: XXX clearing IRQs for thawing
    [    1.420188] ata3: XXX port thawed
    [    1.420234] ata3: SATA link up 3.0 Gbps (SStatus 123 SControl 300)
    
    We are not supposed to be able to receive an error IRQ while the port is
    frozen (PxIE is set to 0, i.e. all IRQs for the port are disabled).
    
    AHCI 1.3.1 section 10.7.1.1 First Tier (IS Register) states:
    "Each bit location can be thought of as reporting a '1' if the virtual
    "interrupt line" for that port is indicating it wishes to generate an
    interrupt. That is, if a port has one or more interrupt status bit set,
    and the enables for those status bits are set, then this bit shall be set."
    
    Additionally, AHCI state P:ComInit clearly shows that the state machine
    will only jump to P:ComInitSetIS (which sets IS.IPS(x) to '1'), if PxIE.PCE
    is set to '1'. In our case, PxIE is set to 0, so IS.IPS(x) won't get set.
    
    So IS.IPS(x) only gets set if PxIS and PxIE is set.
    
    AHCI 1.3.1 section 10.7.1.1 First Tier (IS Register) also states:
    "The bits in this register are read/write clear. It is set by the level of
    the virtual interrupt line being a set, and cleared by a write of '1' from
    the software."
    
    So if IS.IPS(x) is set, you need to explicitly clear it by writing a 1 to
    IS.IPS(x) for that port.
    
    Since PxIE is cleared, the only way to get an interrupt while the port is
    frozen, is if IS.IPS(x) is set, and the only way IS.IPS(x) can be set when
    the port is frozen, is if it was set before the port was frozen.
    
    However, since commit 737dd811a3db ("ata: libahci: clear pending interrupt
    status"), we clear both PxIS and IS.IPS(x) after freezing the port, but
    before the COMRESET, so the problem that commit 1e641060c4b5 ("libata:
    clear eh_info on reset completion") fixed can no longer happen.
    
    Thus, revert commit 1e641060c4b5 ("libata: clear eh_info on reset
    completion"), so that the retry logic in ata_scsi_port_error_handler()
    works once again. (The retry logic is still needed, since we can still
    get an error IRQ _after_ the port has been thawed, but before
    ata_scsi_port_error_handler() takes the ap->lock in order to check
    if ATA_PFLAG_EH_PENDING is set.)
    
    Signed-off-by: Niklas Cassel <niklas.cassel@wdc.com>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2afd8fcee0c4d65a482e30c3ad2a92c25e5e92d4
Author: Michal Grzedzicki <mge@meta.com>
Date:   Mon Sep 11 10:03:40 2023 -0700

    scsi: pm80xx: Avoid leaking tags when processing OPC_INB_SET_CONTROLLER_CONFIG command
    
    [ Upstream commit c13e7331745852d0dd7c35eabbe181cbd5b01172 ]
    
    Tags allocated for OPC_INB_SET_CONTROLLER_CONFIG command need to be freed
    when we receive the response.
    
    Signed-off-by: Michal Grzedzicki <mge@meta.com>
    Link: https://lore.kernel.org/r/20230911170340.699533-2-mge@meta.com
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0decc581e1dcd122c60a257f011ecffca33aed8e
Author: Michal Grzedzicki <mge@meta.com>
Date:   Wed Sep 13 08:56:10 2023 -0700

    scsi: pm80xx: Use phy-specific SAS address when sending PHY_START command
    
    [ Upstream commit 71996bb835aed58c7ec4967be1d05190a27339ec ]
    
    Some cards have more than one SAS address. Using an incorrect address
    causes communication issues with some devices like expanders.
    
    Closes: https://lore.kernel.org/linux-kernel/A57AEA84-5CA0-403E-8053-106033C73C70@fb.com/
    Signed-off-by: Michal Grzedzicki <mge@meta.com>
    Link: https://lore.kernel.org/r/20230913155611.3183612-1-mge@meta.com
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f44e66447c4f18b425a91cf6698ecdbf07414f95
Author: David Thompson <davthompson@nvidia.com>
Date:   Tue Sep 5 09:32:43 2023 -0400

    platform/mellanox: mlxbf-bootctl: add NET dependency into Kconfig
    
    [ Upstream commit c2dffda1d8f7511505bbbf16ba282f2079b30089 ]
    
    The latest version of the mlxbf_bootctl driver utilizes
    "sysfs_format_mac", and this API is only available if
    NET is defined in the kernel configuration. This patch
    changes the mlxbf_bootctl Kconfig to depend on NET.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202309031058.JvwNDBKt-lkp@intel.com/
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: David Thompson <davthompson@nvidia.com>
    Link: https://lore.kernel.org/r/20230905133243.31550-1-davthompson@nvidia.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cee5151c5410e868826b8afecfb356f3799ebea3
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Sep 7 12:28:20 2023 -0400

    ring-buffer: Do not attempt to read past "commit"
    
    [ Upstream commit 95a404bd60af6c4d9d8db01ad14fe8957ece31ca ]
    
    When iterating over the ring buffer while the ring buffer is active, the
    writer can corrupt the reader. There's barriers to help detect this and
    handle it, but that code missed the case where the last event was at the
    very end of the page and has only 4 bytes left.
    
    The checks to detect the corruption by the writer to reads needs to see the
    length of the event. If the length in the first 4 bytes is zero then the
    length is stored in the second 4 bytes. But if the writer is in the process
    of updating that code, there's a small window where the length in the first
    4 bytes could be zero even though the length is only 4 bytes. That will
    cause rb_event_length() to read the next 4 bytes which could happen to be off the
    allocated page.
    
    To protect against this, fail immediately if the next event pointer is
    less than 8 bytes from the end of the commit (last byte of data), as all
    events must be a minimum of 8 bytes anyway.
    
    Link: https://lore.kernel.org/all/20230905141245.26470-1-Tze-nan.Wu@mediatek.com/
    Link: https://lore.kernel.org/linux-trace-kernel/20230907122820.0899019c@gandalf.local.home
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Reported-by: Tze-nan Wu <Tze-nan.Wu@mediatek.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2956e33fb4f83c0d9c7381e198f2bf13a2d376cd
Author: Ricardo B. Marliere <rbmarliere@gmail.com>
Date:   Tue Aug 22 18:09:40 2023 -0300

    selftests: fix dependency checker script
    
    [ Upstream commit 5f9dd2e896a91bfca90f8463eb6808c03d535d8a ]
    
    This patch fixes inconsistencies in the parsing rules of the levels 1
    and 2 of the kselftest_deps.sh.  It was added the levels 4 and 5 to
    account for a few edge cases that are present in some tests, also some
    minor identation styling have been fixed (s/    /\t/g).
    
    Signed-off-by: Ricardo B. Marliere <rbmarliere@gmail.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ccce21bd77b117ede7d890bc4cef156768d8049
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Sep 6 16:19:30 2023 +0800

    ring-buffer: Avoid softlockup in ring_buffer_resize()
    
    [ Upstream commit f6bd2c92488c30ef53b5bd80c52f0a7eee9d545a ]
    
    When user resize all trace ring buffer through file 'buffer_size_kb',
    then in ring_buffer_resize(), kernel allocates buffer pages for each
    cpu in a loop.
    
    If the kernel preemption model is PREEMPT_NONE and there are many cpus
    and there are many buffer pages to be allocated, it may not give up cpu
    for a long time and finally cause a softlockup.
    
    To avoid it, call cond_resched() after each cpu buffer allocation.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230906081930.3939106-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dfcb92905b3593ed8aa56bb50fab4d8cb09d181
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Mon Jun 26 08:11:44 2023 +0800

    selftests/ftrace: Correctly enable event in instance-event.tc
    
    [ Upstream commit f4e4ada586995b17f828c6d147d1800eb1471450 ]
    
    Function instance_set() expects to enable event 'sched_switch', so we
    should set 1 to its 'enable' file.
    
    Testcase passed after this patch:
      # ./ftracetest test.d/instances/instance-event.tc
      === Ftrace unit tests ===
      [1] Test creation and deletion of trace instances while setting an event
      [PASS]
    
      # of passed:  1
      # of failed:  0
      # of unresolved:  0
      # of untested:  0
      # of unsupported:  0
      # of xfailed:  0
      # of undefined(test bug):  0
    
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Acked-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38ef4b2e4dca1770261d5eb88ba592727f2c24bb
Author: Javed Hasan <jhasan@marvell.com>
Date:   Fri Sep 1 11:36:46 2023 +0530

    scsi: qedf: Add synchronization between I/O completions and abort
    
    [ Upstream commit 7df0b2605489bef3f4223ad66f1f9bb8d50d4cd2 ]
    
    Avoid race condition between I/O completion and abort processing by
    protecting the cmd_type with the rport lock.
    
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Saurav Kashyap <skashyap@marvell.com>
    Link: https://lore.kernel.org/r/20230901060646.27885-1-skashyap@marvell.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2081b2a15b08933273f887e9b4018cf90599fa17
Author: Helge Deller <deller@gmx.de>
Date:   Thu Aug 31 22:36:12 2023 +0200

    parisc: irq: Make irq_stack_union static to avoid sparse warning
    
    [ Upstream commit b1bef1388c427cdad7331a9c8eb4ebbbe5b954b0 ]
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f47efdffdc130c53a3ea08fe46372e60af471188
Author: Helge Deller <deller@gmx.de>
Date:   Thu Aug 31 22:08:32 2023 +0200

    parisc: drivers: Fix sparse warning
    
    [ Upstream commit b137b9d60b8add5620a06c687a71ce18776730b0 ]
    
    Fix "warning: directive in macro's argument list" warning.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d967a9472bf9c94b2d2d28bb4aa6ab49d684ac17
Author: Helge Deller <deller@gmx.de>
Date:   Wed Aug 30 11:59:55 2023 +0200

    parisc: iosapic.c: Fix sparse warnings
    
    [ Upstream commit 927c6c8aa27c284a799b8c18784e37d3373af908 ]
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b2440c2d64f2d418fb726e3432ee46dec96c2e2
Author: Helge Deller <deller@gmx.de>
Date:   Wed Aug 30 08:10:01 2023 +0200

    parisc: sba: Fix compile warning wrt list of SBA devices
    
    [ Upstream commit eb3255ee8f6f4691471a28fbf22db5e8901116cd ]
    
    Fix this makecheck warning:
    drivers/parisc/sba_iommu.c:98:19: warning: symbol 'sba_list'
            was not declared. Should it be static?
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c79300599923daaa30f417c75555d5566b3d31ae
Author: Sergey Senozhatsky <senozhatsky@chromium.org>
Date:   Wed Aug 16 11:32:21 2023 +0900

    dma-debug: don't call __dma_entry_alloc_check_leak() under free_entries_lock
    
    [ Upstream commit fb5a4315591dae307a65fc246ca80b5159d296e1 ]
    
    __dma_entry_alloc_check_leak() calls into printk -> serial console
    output (qcom geni) and grabs port->lock under free_entries_lock
    spin lock, which is a reverse locking dependency chain as qcom_geni
    IRQ handler can call into dma-debug code and grab free_entries_lock
    under port->lock.
    
    Move __dma_entry_alloc_check_leak() call out of free_entries_lock
    scope so that we don't acquire serial console's port->lock under it.
    
    Trimmed-down lockdep splat:
    
     The existing dependency chain (in reverse order) is:
    
                   -> #2 (free_entries_lock){-.-.}-{2:2}:
            _raw_spin_lock_irqsave+0x60/0x80
            dma_entry_alloc+0x38/0x110
            debug_dma_map_page+0x60/0xf8
            dma_map_page_attrs+0x1e0/0x230
            dma_map_single_attrs.constprop.0+0x6c/0xc8
            geni_se_rx_dma_prep+0x40/0xcc
            qcom_geni_serial_isr+0x310/0x510
            __handle_irq_event_percpu+0x110/0x244
            handle_irq_event_percpu+0x20/0x54
            handle_irq_event+0x50/0x88
            handle_fasteoi_irq+0xa4/0xcc
            handle_irq_desc+0x28/0x40
            generic_handle_domain_irq+0x24/0x30
            gic_handle_irq+0xc4/0x148
            do_interrupt_handler+0xa4/0xb0
            el1_interrupt+0x34/0x64
            el1h_64_irq_handler+0x18/0x24
            el1h_64_irq+0x64/0x68
            arch_local_irq_enable+0x4/0x8
            ____do_softirq+0x18/0x24
            ...
    
                   -> #1 (&port_lock_key){-.-.}-{2:2}:
            _raw_spin_lock_irqsave+0x60/0x80
            qcom_geni_serial_console_write+0x184/0x1dc
            console_flush_all+0x344/0x454
            console_unlock+0x94/0xf0
            vprintk_emit+0x238/0x24c
            vprintk_default+0x3c/0x48
            vprintk+0xb4/0xbc
            _printk+0x68/0x90
            register_console+0x230/0x38c
            uart_add_one_port+0x338/0x494
            qcom_geni_serial_probe+0x390/0x424
            platform_probe+0x70/0xc0
            really_probe+0x148/0x280
            __driver_probe_device+0xfc/0x114
            driver_probe_device+0x44/0x100
            __device_attach_driver+0x64/0xdc
            bus_for_each_drv+0xb0/0xd8
            __device_attach+0xe4/0x140
            device_initial_probe+0x1c/0x28
            bus_probe_device+0x44/0xb0
            device_add+0x538/0x668
            of_device_add+0x44/0x50
            of_platform_device_create_pdata+0x94/0xc8
            of_platform_bus_create+0x270/0x304
            of_platform_populate+0xac/0xc4
            devm_of_platform_populate+0x60/0xac
            geni_se_probe+0x154/0x160
            platform_probe+0x70/0xc0
            ...
    
                   -> #0 (console_owner){-...}-{0:0}:
            __lock_acquire+0xdf8/0x109c
            lock_acquire+0x234/0x284
            console_flush_all+0x330/0x454
            console_unlock+0x94/0xf0
            vprintk_emit+0x238/0x24c
            vprintk_default+0x3c/0x48
            vprintk+0xb4/0xbc
            _printk+0x68/0x90
            dma_entry_alloc+0xb4/0x110
            debug_dma_map_sg+0xdc/0x2f8
            __dma_map_sg_attrs+0xac/0xe4
            dma_map_sgtable+0x30/0x4c
            get_pages+0x1d4/0x1e4 [msm]
            msm_gem_pin_pages_locked+0x38/0xac [msm]
            msm_gem_pin_vma_locked+0x58/0x88 [msm]
            msm_ioctl_gem_submit+0xde4/0x13ac [msm]
            drm_ioctl_kernel+0xe0/0x15c
            drm_ioctl+0x2e8/0x3f4
            vfs_ioctl+0x30/0x50
            ...
    
     Chain exists of:
       console_owner --> &port_lock_key --> free_entries_lock
    
      Possible unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(free_entries_lock);
                                    lock(&port_lock_key);
                                    lock(free_entries_lock);
       lock(console_owner);
    
                    *** DEADLOCK ***
    
     Call trace:
      dump_backtrace+0xb4/0xf0
      show_stack+0x20/0x30
      dump_stack_lvl+0x60/0x84
      dump_stack+0x18/0x24
      print_circular_bug+0x1cc/0x234
      check_noncircular+0x78/0xac
      __lock_acquire+0xdf8/0x109c
      lock_acquire+0x234/0x284
      console_flush_all+0x330/0x454
      console_unlock+0x94/0xf0
      vprintk_emit+0x238/0x24c
      vprintk_default+0x3c/0x48
      vprintk+0xb4/0xbc
      _printk+0x68/0x90
      dma_entry_alloc+0xb4/0x110
      debug_dma_map_sg+0xdc/0x2f8
      __dma_map_sg_attrs+0xac/0xe4
      dma_map_sgtable+0x30/0x4c
      get_pages+0x1d4/0x1e4 [msm]
      msm_gem_pin_pages_locked+0x38/0xac [msm]
      msm_gem_pin_vma_locked+0x58/0x88 [msm]
      msm_ioctl_gem_submit+0xde4/0x13ac [msm]
      drm_ioctl_kernel+0xe0/0x15c
      drm_ioctl+0x2e8/0x3f4
      vfs_ioctl+0x30/0x50
      ...
    
    Reported-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Acked-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 061f4027533827978daa432e31d2107d07e1f308
Author: William A. Kennington III <william@wkennington.com>
Date:   Sat Sep 23 18:02:14 2023 -0700

    i2c: npcm7xx: Fix callback completion ordering
    
    [ Upstream commit 92e73d807b68b2214fcafca4e130b5300a9d4b3c ]
    
    Sometimes, our completions race with new master transfers and override
    the bus->operation and bus->master_or_slave variables. This causes
    transactions to timeout and kernel crashes less frequently.
    
    To remedy this, we re-order all completions to the very end of the
    function.
    
    Fixes: 56a1485b102e ("i2c: npcm7xx: Add Nuvoton NPCM I2C controller driver")
    Signed-off-by: William A. Kennington III <william@wkennington.com>
    Reviewed-by: Tali Perry <tali.perry1@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd81e91b2efc73ee09c867a31d9f964b19c8e90e
Author: Wenhua Lin <Wenhua.Lin@unisoc.com>
Date:   Thu Sep 21 20:25:27 2023 +0800

    gpio: pmic-eic-sprd: Add can_sleep flag for PMIC EIC chip
    
    [ Upstream commit 26d9e5640d2130ee16df7b1fb6a908f460ab004c ]
    
    The drivers uses a mutex and I2C bus access in its PMIC EIC chip
    get implementation. This means these functions can sleep and the PMIC EIC
    chip should set the can_sleep property to true.
    
    This will ensure that a warning is printed when trying to get the
    value from a context that potentially can't sleep.
    
    Fixes: 348f3cde84ab ("gpio: Add Spreadtrum PMIC EIC driver support")
    Signed-off-by: Wenhua Lin <Wenhua.Lin@unisoc.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b317f69871ef38e1ecc2381fd021917f25c50cf3
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Wed Sep 20 04:41:09 2023 -0700

    xtensa: boot/lib: fix function prototypes
    
    [ Upstream commit f54d02c8f2cc4b46ba2a3bd8252a6750453b6f2b ]
    
    Add function prototype for gunzip() to the boot library code and make
    exit() and zalloc() static.
    
    arch/xtensa/boot/lib/zmem.c:8:6: warning: no previous prototype for 'exit' [-Wmissing-prototypes]
        8 | void exit (void)
    arch/xtensa/boot/lib/zmem.c:13:7: warning: no previous prototype for 'zalloc' [-Wmissing-prototypes]
       13 | void *zalloc(unsigned size)
    arch/xtensa/boot/lib/zmem.c:35:6: warning: no previous prototype for 'gunzip' [-Wmissing-prototypes]
       35 | void gunzip (void *dst, int dstlen, unsigned char *src, int *lenp)
    
    Fixes: 4bedea945451 ("xtensa: Architecture support for Tensilica Xtensa Part 2")
    Fixes: e7d163f76665 ("xtensa: Removed local copy of zlib and fixed O= support")
    Suggested-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be17dfdcc87a54c818524cabc3e1a206988b7e83
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Sep 19 22:21:37 2023 -0700

    xtensa: boot: don't add include-dirs
    
    [ Upstream commit 54d3d7d363823782c3444ddc41bb8cf1edc80514 ]
    
    Drop the -I<include-dir> options to prevent build warnings since there
    is not boot/include directory:
    
    cc1: warning: arch/xtensa/boot/include: No such file or directory [-Wmissing-include-dirs]
    
    Fixes: 437374e9a950 ("restore arch/{ppc/xtensa}/boot cflags")
    Fixes: 4bedea945451 ("xtensa: Architecture support for Tensilica Xtensa Part 2")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: Max Filippov <jcmvbkbc@gmail.com>
    Message-Id: <20230920052139.10570-15-rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a10bfbe599b7b8def7368789f215cc57e52b9b2d
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Sep 19 22:21:36 2023 -0700

    xtensa: iss/network: make functions static
    
    [ Upstream commit 1b59efeb59851277266318f4e0132aa61ce3455e ]
    
    Make 2 functions static to prevent build warnings:
    
    arch/xtensa/platforms/iss/network.c:204:16: warning: no previous prototype for 'tuntap_protocol' [-Wmissing-prototypes]
      204 | unsigned short tuntap_protocol(struct sk_buff *skb)
    arch/xtensa/platforms/iss/network.c:444:6: warning: no previous prototype for 'iss_net_user_timer_expire' [-Wmissing-prototypes]
      444 | void iss_net_user_timer_expire(struct timer_list *unused)
    
    Fixes: 7282bee78798 ("xtensa: Architecture support for Tensilica Xtensa Part 8")
    Fixes: d8479a21a98b ("xtensa: Convert timers to use timer_setup()")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: Max Filippov <jcmvbkbc@gmail.com>
    Message-Id: <20230920052139.10570-14-rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 608af5511a8f9f247f405c8471c17ed52fe405ec
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Wed Sep 20 04:15:22 2023 -0700

    xtensa: add default definition for XCHAL_HAVE_DIV32
    
    [ Upstream commit 494e87ffa0159b3f879694a9231089707792a44d ]
    
    When variant FSF is set, XCHAL_HAVE_DIV32 is not defined. Add default
    definition for that macro to prevent build warnings:
    
    arch/xtensa/lib/divsi3.S:9:5: warning: "XCHAL_HAVE_DIV32" is not defined, evaluates to 0 [-Wundef]
        9 | #if XCHAL_HAVE_DIV32
    arch/xtensa/lib/modsi3.S:9:5: warning: "XCHAL_HAVE_DIV32" is not defined, evaluates to 0 [-Wundef]
        9 | #if XCHAL_HAVE_DIV32
    
    Fixes: 173d6681380a ("xtensa: remove extra header files")
    Suggested-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: lore.kernel.org/r/202309150556.t0yCdv3g-lkp@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3696261859c5acca841df14783af4df9ea999966
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Jun 19 12:44:17 2023 +0300

    power: supply: ucs1002: fix error code in ucs1002_get_property()
    
    [ Upstream commit e35059949daa83f8dadf710d0f829ab3c3a72fe2 ]
    
    This function is supposed to return 0 for success instead of returning
    the val->intval.  This makes it the same as the other case statements
    in this function.
    
    Fixes: 81196e2e57fc ("power: supply: ucs1002: fix some health status issues")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/687f64a4-4c6e-4536-8204-98ad1df934e5@moroto.mountain
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eff55feb8b871a7ab0a2a6033b60949c319ecd3b
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Sep 7 08:53:28 2023 +0300

    bus: ti-sysc: Fix SYSC_QUIRK_SWSUP_SIDLE_ACT handling for uart wake-up
    
    [ Upstream commit e5deb8f76e64d94ccef715e75ebafffd0c312d80 ]
    
    The uarts should be tagged with SYSC_QUIRK_SWSUP_SIDLE instead of
    SYSC_QUIRK_SWSUP_SIDLE_ACT. The difference is that SYSC_QUIRK_SWSUP_SIDLE
    is used to force idle target modules rather than block idle during usage.
    
    The SYSC_QUIRK_SWSUP_SIDLE_ACT should disable autoidle and wake-up when
    a target module is active, and configure autoidle and wake-up when a
    target module is inactive. We are missing configuring the target module
    on sysc_disable_module(), and missing toggling of the wake-up bit.
    
    Let's fix the issue to allow uart wake-up to work.
    
    Fixes: fb685f1c190e ("bus: ti-sysc: Handle swsup idle mode quirks")
    Tested-by: Dhruva Gole <d-gole@ti.com>
    Tested-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bc88671960f561dc87cdaf075d60cad9aafbc38
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 11 07:07:38 2023 +0300

    ARM: dts: ti: omap: motorola-mapphone: Fix abe_clkctrl warning on boot
    
    [ Upstream commit ac08bda1569b06b7a62c7b4dd00d4c3b28ceaaec ]
    
    Commit 0840242e8875 ("ARM: dts: Configure clock parent for pwm vibra")
    attempted to fix the PWM settings but ended up causin an additional clock
    reparenting error:
    
    clk: failed to reparent abe-clkctrl:0060:24 to sys_clkin_ck: -22
    
    Only timer9 is in the PER domain and can use the sys_clkin_ck clock source.
    For timer8, the there is no sys_clkin_ck available as it's in the ABE
    domain, instead it should use syc_clk_div_ck. However, for power
    management, we want to use the always on sys_32k_ck instead.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Fixes: 0840242e8875 ("ARM: dts: Configure clock parent for pwm vibra")
    Depends-on: 61978617e905 ("ARM: dts: Add minimal support for Droid Bionic xt875")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2a592adad7cd844f7cb072160738c00da6b60a5
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Nov 18 14:19:24 2022 +0200

    ARM: dts: Unify pwm-omap-dmtimer node names
    
    [ Upstream commit 4f15fc7c0f28ffcd6e9a56396db6edcdfa4c9925 ]
    
    There is no reg property for pwm-omap-dmtimer.
    
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski+dt@linaro.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Stable-dep-of: ac08bda1569b ("ARM: dts: ti: omap: motorola-mapphone: Fix abe_clkctrl warning on boot")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d9c9589da6ac5e5d5d720edcb559558ba572578
Author: Gireesh Hiremath <Gireesh.Hiremath@in.bosch.com>
Date:   Fri Mar 25 10:06:05 2022 +0000

    ARM: dts: am335x: Guardian: Update beeper label
    
    [ Upstream commit b5bf6b434575d32aeaa70c82ec84b3cec92e2973 ]
    
     * Update lable pwm to guardian beeper
    
    Signed-off-by: Gireesh Hiremath <Gireesh.Hiremath@in.bosch.com>
    Message-Id: <20220325100613.1494-8-Gireesh.Hiremath@in.bosch.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Stable-dep-of: ac08bda1569b ("ARM: dts: ti: omap: motorola-mapphone: Fix abe_clkctrl warning on boot")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef83f35ced408c20da263420454510c564837544
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Dec 3 15:10:43 2021 +0100

    ARM: dts: motorola-mapphone: Drop second ti,wlcore compatible value
    
    [ Upstream commit 7ebe6e99f7702dad342486e5b30d989a0a6499af ]
    
    The TI wlcore DT bindings specify using a single compatible value for
    each variant, and the Linux kernel driver matches against the first
    compatible value since commit 078b30da3f074f2e ("wlcore: add wl1285
    compatible") in v4.13.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Stable-dep-of: ac08bda1569b ("ARM: dts: ti: omap: motorola-mapphone: Fix abe_clkctrl warning on boot")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12a28c379ef80d5b31b5f4f17cc29c97ea7413da
Author: Carl Philipp Klemm <philipp@uvos.xyz>
Date:   Wed Dec 30 10:42:32 2020 +0200

    ARM: dts: motorola-mapphone: Add 1.2GHz OPP
    
    [ Upstream commit 19e367147ea8864dff1fb153cfab6d8e8da10324 ]
    
    The omap4430 HS HIGH performance devces support 1.2GHz opp, lower speed
    variants do not. However for mapphone devices Motorola seems to have
    decided that this does not really matter for the SoC variants they have
    tested to use, and decided to clock all devices, including the ones with
    STANDARD performance chips at 1.2GHz upon release of the 3.0.8 vendor
    kernel shiped with Android 4.0. Therefore it seems safe to do the same,
    but let's only do it for Motorola devices as the others have not been
    tested.
    
    Note that we prevent overheating with the passive cooling device
    cpu_alert0 configured in the dts file that starts lowering the speed as
    needed.
    
    This also removes the "failed to find current OPP for freq 1200000000"
    warning.
    
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Carl Philipp Klemm <philipp@uvos.xyz>
    [tony@atomide.com: made motorola specific, updated comments]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Stable-dep-of: ac08bda1569b ("ARM: dts: ti: omap: motorola-mapphone: Fix abe_clkctrl warning on boot")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afdc40a74ae3269f892fb47885233377e731d11c
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Dec 30 10:42:31 2020 +0200

    ARM: dts: motorola-mapphone: Configure lower temperature passive cooling
    
    [ Upstream commit 5c3db2d4d4ed747e714387362afe007e6ae5e2d3 ]
    
    The current cooling device temperature is too high at 100C as we have a
    battery on the device right next to the SoC as pointed out by Carl Philipp
    Klemm <philipp@uvos.xyz>. Let's configure the max temperature to 80C.
    
    As we only have a tshut interrupt and no talert interrupt on 4430, we have
    a passive cooling device configured for 4430. However, we want the poll
    interval to be 10 seconds instead of 1 second for power management. The
    value of 10 seconds seems like plenty of time to notice the temperature
    increase above the 75C temperatures. Having the bandgap temperature change
    seems to take several tens of seconds because of heat dissipation above
    75C range as monitored with a full CPU load.
    
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Suggested-by: Carl Philipp Klemm <philipp@uvos.xyz>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Stable-dep-of: ac08bda1569b ("ARM: dts: ti: omap: motorola-mapphone: Fix abe_clkctrl warning on boot")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 093a9a02d4d56ee030afc8de5d698303dcac43ee
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 11 07:07:38 2023 +0300

    ARM: dts: ti: omap: Fix bandgap thermal cells addressing for omap3/4
    
    [ Upstream commit 6469b2feade8fd82d224dd3734e146536f3e9f0e ]
    
    Fix "thermal_sys: cpu_thermal: Failed to read thermal-sensors cells: -2"
    error on boot for omap3/4. This is caused by wrong addressing in the dts
    for bandgap sensor for single sensor instances.
    
    Note that omap4-cpu-thermal.dtsi is shared across omap4/5 and dra7, so
    we can't just change the addressing in omap4-cpu-thermal.dtsi.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Fixes: a761d517bbb1 ("ARM: dts: omap3: Add cpu_thermal zone")
    Fixes: 0bbf6c54d100 ("arm: dts: add omap4 CPU thermal data")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28e5423ad8fb13dda0fe541b40bb6eddee1ec0f3
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sun Oct 2 11:20:02 2022 +0200

    ARM: dts: omap: correct indentation
    
    [ Upstream commit 8ae9c7a69fa14e95d032e64d8d758e3f85bee132 ]
    
    Do not use spaces for indentation.
    
    Link: https://lore.kernel.org/r/20221002092002.68880-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Stable-dep-of: 6469b2feade8 ("ARM: dts: ti: omap: Fix bandgap thermal cells addressing for omap3/4")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50789f37239cf7ca06bce126e2d92ce2203a6f3e
Author: Timo Alho <talho@nvidia.com>
Date:   Tue Sep 12 14:29:50 2023 +0300

    clk: tegra: fix error return case for recalc_rate
    
    [ Upstream commit a47b44fbb13f5e7a981b4515dcddc93a321ae89c ]
    
    tegra-bpmp clocks driver makes implicit conversion of signed error
    code to unsigned value in recalc_rate operation. The behavior for
    recalc_rate, according to it's specification, should be that "If the
    driver cannot figure out a rate for this clock, it must return 0."
    
    Fixes: ca6f2796eef7 ("clk: tegra: Add BPMP clock driver")
    Signed-off-by: Timo Alho <talho@nvidia.com>
    Signed-off-by: Mikko Perttunen <mperttunen@nvidia.com>
    Link: https://lore.kernel.org/r/20230912112951.2330497-1-cyndis@kapsi.fi
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fd5839e250488d22dd8500d0905bfbf15ef90b8
Author: Adam Ford <aford173@gmail.com>
Date:   Wed Sep 6 18:34:42 2023 -0500

    bus: ti-sysc: Fix missing AM35xx SoC matching
    
    [ Upstream commit 11729caa520950e17cd81bc43ffc477c46cf791e ]
    
    Commit feaa8baee82a ("bus: ti-sysc: Implement SoC revision handling")
    created a list of SoC types searching for strings based on names
    and wildcards which associates the SoC to different families.
    
    The OMAP34xx and OMAP35xx are treated as SOC_3430 while
    OMAP36xx and OMAP37xx are treated as SOC_3630, but the AM35xx
    isn't listed.
    
    The AM35xx is mostly an OMAP3430, and a later commit a12315d6d270
    ("bus: ti-sysc: Make omap3 gpt12 quirk handling SoC specific") looks
    for the SOC type and behaves in a certain way if it's SOC_3430.
    
    This caused a regression on the AM3517 causing it to return two
    errors:
    
     ti-sysc: probe of 48318000.target-module failed with error -16
     ti-sysc: probe of 49032000.target-module failed with error -16
    
    Fix this by treating the creating SOC_AM35 and inserting it between
    the SOC_3430 and SOC_3630.  If it is treaed the same way as the
    SOC_3430 when checking the status of sysc_check_active_timer,
    the error conditions will disappear.
    
    Fixes: a12315d6d270 ("bus: ti-sysc: Make omap3 gpt12 quirk handling SoC specific")
    Fixes: feaa8baee82a ("bus: ti-sysc: Implement SoC revision handling")
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Message-ID: <20230906233442.270835-1-aford173@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d4d846e2a4948ec9ff19fb9b023dee5dd160baf
Author: Julien Panis <jpanis@baylibre.com>
Date:   Mon Aug 21 16:24:18 2023 +0200

    bus: ti-sysc: Use fsleep() instead of usleep_range() in sysc_reset()
    
    [ Upstream commit d929b2b7464f95ec01e47f560b1e687482ba8929 ]
    
    The am335x-evm started producing boot errors because of subtle timing
    changes:
    
    Unhandled fault: external abort on non-linefetch (0x1008) at 0xf03c1010
    ...
    sysc_reset from sysc_probe+0xf60/0x1514
    sysc_probe from platform_probe+0x5c/0xbc
    ...
    
    The fix consists in using the appropriate sleep function in sysc reset.
    For flexible sleeping, fsleep is recommended. Here, sysc delay parameter
    can take any value in [0 - 255] us range. As a result, fsleep() should
    be used, calling udelay() for a sysc delay lower than 10 us.
    
    Signed-off-by: Julien Panis <jpanis@baylibre.com>
    Fixes: e709ed70d122 ("bus: ti-sysc: Fix missing reset delay handling")
    Message-ID: <20230821-fix-ti-sysc-reset-v1-1-5a0a5d8fae55@baylibre.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8ee76d72737d7bfa8d6f63593334be55d3fac11
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Sep 5 09:06:56 2023 +0200

    MIPS: Alchemy: only build mmc support helpers if au1xmmc is enabled
    
    [ Upstream commit ef8f8f04a0b25e8f294b24350e8463a8d6a9ba0b ]
    
    While commit d4a5c59a955b ("mmc: au1xmmc: force non-modular build and
    remove symbol_get usage") to be built in, it can still build a kernel
    without MMC support and thuse no mmc_detect_change symbol at all.
    
    Add ifdefs to build the mmc support code in the alchemy arch code
    conditional on mmc support.
    
    Fixes: d4a5c59a955b ("mmc: au1xmmc: force non-modular build and remove symbol_get usage")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Tested-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d678c078f30268a29237595f573a467ff678356b
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Sep 19 11:44:42 2023 +0930

    btrfs: reset destination buffer when read_extent_buffer() gets invalid range
    
    [ Upstream commit 74ee79142c0a344d4eae2eb7012ebc4e82254109 ]
    
    Commit f98b6215d7d1 ("btrfs: extent_io: do extra check for extent buffer
    read write functions") changed how we handle invalid extent buffer range
    for read_extent_buffer().
    
    Previously if the range is invalid we just set the destination to zero,
    but after the patch we do nothing and error out.
    
    This can lead to smatch static checker errors like:
    
      fs/btrfs/print-tree.c:186 print_uuid_item() error: uninitialized symbol 'subvol_id'.
      fs/btrfs/tests/extent-io-tests.c:338 check_eb_bitmap() error: uninitialized symbol 'has'.
      fs/btrfs/tests/extent-io-tests.c:353 check_eb_bitmap() error: uninitialized symbol 'has'.
      fs/btrfs/uuid-tree.c:203 btrfs_uuid_tree_remove() error: uninitialized symbol 'read_subid'.
      fs/btrfs/uuid-tree.c:353 btrfs_uuid_tree_iterate() error: uninitialized symbol 'subid_le'.
      fs/btrfs/uuid-tree.c:72 btrfs_uuid_tree_lookup() error: uninitialized symbol 'data'.
      fs/btrfs/volumes.c:7415 btrfs_dev_stats_value() error: uninitialized symbol 'val'.
    
    Fix those warnings by reverting back to the old memset() behavior.
    By this we keep the static checker happy and would still make a lot of
    noise when such invalid ranges are passed in.
    
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Fixes: f98b6215d7d1 ("btrfs: extent_io: do extra check for extent buffer read write functions")
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1f85bc9bc69e7f9146a5f1068c7cc94c6678d27
Author: Werner Fischer <devlists@wefi.net>
Date:   Tue Aug 29 13:33:58 2023 +0200

    ata: ahci: Add Elkhart Lake AHCI controller
    
    [ Upstream commit 2a2df98ec592667927b5c1351afa6493ea125c9f ]
    
    Elkhart Lake is the successor of Apollo Lake and Gemini Lake. These
    CPUs and their PCHs are used in mobile and embedded environments.
    
    With this patch I suggest that Elkhart Lake SATA controllers [1] should
    use the default LPM policy for mobile chipsets.
    The disadvantage of missing hot-plug support with this setting should
    not be an issue, as those CPUs are used in embedded environments and
    not in servers with hot-plug backplanes.
    
    We discovered that the Elkhart Lake SATA controllers have been missing
    in ahci.c after a customer reported the throttling of his SATA SSD
    after a short period of higher I/O. We determined the high temperature
    of the SSD controller in idle mode as the root cause for that.
    
    Depending on the used SSD, we have seen up to 1.8 Watt lower system
    idle power usage and up to 30°C lower SSD controller temperatures in
    our tests, when we set med_power_with_dipm manually. I have provided a
    table showing seven different SATA SSDs from ATP, Intel/Solidigm and
    Samsung [2].
    
    Intel lists a total of 3 SATA controller IDs (4B60, 4B62, 4B63) in [1]
    for those mobile PCHs.
    This commit just adds 0x4b63 as I do not have test systems with 0x4b60
    and 0x4b62 SATA controllers.
    I have tested this patch with a system which uses 0x4b63 as SATA
    controller.
    
    [1] https://sata-io.org/product/8803
    [2] https://www.thomas-krenn.com/en/wiki/SATA_Link_Power_Management#Example_LES_v4
    
    Signed-off-by: Werner Fischer <devlists@wefi.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51d190cc98de3c72f197be963a3aa7bbd1d22459
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Feb 25 11:23:17 2022 -0600

    ata: ahci: Rename board_ahci_mobile
    
    [ Upstream commit 099849af27f74981c7e660dd93ff6a987307c1f2 ]
    
    This board definition was originally created for mobile devices to
    designate default link power managmeent policy to influence runtime
    power consumption.
    
    As this is interesting for more than just mobile designs, rename the
    board to `board_ahci_low_power` to make it clear it is about default
    policy.
    
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 2a2df98ec592 ("ata: ahci: Add Elkhart Lake AHCI controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8061c399c83b9e5fd46f6cfe5e4aa4bb25ba877b
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Wed Jan 5 16:36:18 2022 +0100

    ata: ahci: Add support for AMD A85 FCH (Hudson D4)
    
    [ Upstream commit a17ab7aba5df4135ef77d7f6d7105e1ea414936f ]
    
    Add support for the AMD A85 FCH (Hudson D4) AHCI adapter.
    
    Since this adapter does not require the default 200 ms debounce delay
    in sata_link_resume(), create a new board board_ahci_no_debounce_delay
    with the link flag ATA_LFLAG_NO_DEBOUNCE_DELAY, and, for now, configure
    the AMD A85 FCH (Hudson D4) to use it. On the ASUS F2A85-M PRO it
    reduces the Linux kernel boot time by the expected 200 ms from 787 ms
    to 585 ms.
    
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 2a2df98ec592 ("ata: ahci: Add Elkhart Lake AHCI controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0156cce71f8e5e2625638d79c27b775c026bb450
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Wed Jan 5 16:36:16 2022 +0100

    ata: libata: Rename link flag ATA_LFLAG_NO_DB_DELAY
    
    [ Upstream commit b9ba367c513dbc165dd6c01266a59db4be2a3564 ]
    
    Rename the link flag ATA_LFLAG_NO_DB_DELAY to
    ATA_LFLAG_NO_DEBOUNCE_DELAY. The new name is longer, but clearer.
    
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 2a2df98ec592 ("ata: ahci: Add Elkhart Lake AHCI controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f0d346630253327ab961d3fff61e4243d12bce5
Author: Xiao Liang <shaw.leon@gmail.com>
Date:   Fri Aug 25 13:33:27 2023 +0800

    netfilter: nft_exthdr: Fix non-linear header modification
    
    [ Upstream commit 28427f368f0e08d504ed06e74bc7cc79d6d06511 ]
    
    Fix skb_ensure_writable() size. Don't use nft_tcp_header_pointer() to
    make it explicit that pointers point to the packet (not local buffer).
    
    Fixes: 99d1712bc41c ("netfilter: exthdr: tcp option set support")
    Fixes: 7890cbea66e7 ("netfilter: exthdr: add support for tcp option removal")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiao Liang <shaw.leon@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed60b8014c9a7ea22a3f06d8beb8faad651e59f8
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Jan 28 13:00:36 2022 +0100

    netfilter: exthdr: add support for tcp option removal
    
    [ Upstream commit 7890cbea66e78a3a6037b2a12827118d7243270b ]
    
    This allows to replace a tcp option with nop padding to selectively disable
    a particular tcp option.
    
    Optstrip mode is chosen when userspace passes the exthdr expression with
    neither a source nor a destination register attribute.
    
    This is identical to xtables TCPOPTSTRIP extension.
    The only difference is that TCPOPTSTRIP allows to pass in a bitmap
    of options to remove rather than a single number.
    
    Unlike TCPOPTSTRIP this expression can be used multiple times
    in the same rule to get the same effect.
    
    We could add a new nested attribute later on in case there is a
    use case for single-expression-multi-remove.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 28427f368f0e ("netfilter: nft_exthdr: Fix non-linear header modification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10670abe111568c7f662981df79ebe4de23ce658
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Nov 30 11:34:04 2021 +0100

    netfilter: nft_exthdr: break evaluation if setting TCP option fails
    
    [ Upstream commit 962e5a40358787105f126ab1dc01604da3d169e9 ]
    
    Break rule evaluation on malformed TCP options.
    
    Fixes: 99d1712bc41c ("netfilter: exthdr: tcp option set support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 28427f368f0e ("netfilter: nft_exthdr: Fix non-linear header modification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45b3eb6afcffe8dda873ff1bf0cd179755143129
Author: Florian Westphal <fw@strlen.de>
Date:   Fri May 28 12:30:06 2021 +0200

    netfilter: nf_tables: add and use nft_thoff helper
    
    [ Upstream commit 2d7b4ace0754ebaaf71c6824880178d46aa0ab33 ]
    
    This allows to change storage placement later on without changing readers.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 28427f368f0e ("netfilter: nft_exthdr: Fix non-linear header modification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39546418b84d4abdbba9cc0db2458e577ff9758c
Author: Florian Westphal <fw@strlen.de>
Date:   Fri May 28 12:30:05 2021 +0200

    netfilter: nf_tables: add and use nft_sk helper
    
    [ Upstream commit 85554eb981e5a8b0b8947611193aef1737081ef2 ]
    
    This allows to change storage placement later on without changing readers.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 28427f368f0e ("netfilter: nft_exthdr: Fix non-linear header modification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af844ba799b56b5d866536cca21e35be8e2febaf
Author: Phil Sutter <phil@nwl.cc>
Date:   Tue May 4 17:54:06 2021 +0200

    netfilter: nft_exthdr: Support SCTP chunks
    
    [ Upstream commit 133dc203d77dff617d9c4673973ef3859be2c476 ]
    
    Chunks are SCTP header extensions similar in implementation to IPv6
    extension headers or TCP options. Reusing exthdr expression to find and
    extract field values from them is therefore pretty straightforward.
    
    For now, this supports extracting data from chunks at a fixed offset
    (and length) only - chunks themselves are an extensible data structure;
    in order to make all fields available, a nested extension search is
    needed.
    
    Signed-off-by: Phil Sutter <phil@nwl.cc>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 28427f368f0e ("netfilter: nft_exthdr: Fix non-linear header modification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 858ca1921639e122c152abac7ac93dfa83bfe239
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Sat Nov 21 12:11:51 2020 +0100

    netfilter: use actual socket sk for REJECT action
    
    [ Upstream commit 04295878beac396dae47ba93141cae0d9386e7ef ]
    
    True to the message of commit v5.10-rc1-105-g46d6c5ae953c, _do_
    actually make use of state->sk when possible, such as in the REJECT
    modules.
    
    Reported-by: Minqiang Chen <ptpt52@gmail.com>
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 28427f368f0e ("netfilter: nft_exthdr: Fix non-linear header modification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d9ea86f3c4a50c62597096c293d99f378af968a
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Tue May 30 14:30:36 2023 +0200

    media: venus: hfi_venus: Write to VIDC_CTRL_INIT after unmasking interrupts
    
    [ Upstream commit d74e481609808330b4625b3691cf01e1f56e255e ]
    
    The startup procedure shouldn't be started with interrupts masked, as that
    may entail silent failures.
    
    Kick off initialization only after the interrupts are unmasked.
    
    Cc: stable@vger.kernel.org # v4.12+
    Fixes: d96d3f30c0f2 ("[media] media: venus: hfi: add Venus HFI files")
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Signed-off-by: Stanimir Varbanov <stanimir.k.varbanov@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4cc1f690f191c97d1305b4666851db6816c3fee
Author: Dikshita Agarwal <quic_dikshita@quicinc.com>
Date:   Fri Apr 2 12:06:35 2021 +0200

    media: venus: hfi: Add a 6xx boot logic
    
    [ Upstream commit 255385ca433ce5ff621732f26a759211a27c8f85 ]
    
    This patch adds a 6xx specific boot logic. The goal is to share as much
    code as possible between 3xx, 4xx and 6xx silicon.
    
    We need to do a different write to WRAPPER_INTR_MASK with an additional
    write to CPU_CS_H2XSOFTINTEN_V6 and CPU_CS_X2RPMh_V6.
    
    The other writes are the same for 6xx and non-6xx silicon albeit at
    different absolute relative locations to the base of the venus address
    space.
    
    Signed-off-by: Dikshita Agarwal <dikshita@codeaurora.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Stable-dep-of: d74e48160980 ("media: venus: hfi_venus: Write to VIDC_CTRL_INIT after unmasking interrupts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4596fece3c2448c64e6b5b156f67eb752a4cf6a3
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Fri Apr 2 12:06:31 2021 +0200

    media: venus: core: Add differentiator IS_V6(core)
    
    [ Upstream commit ff027906308fcda1661e05beac6abdcbe2b93f6d ]
    
    This commit adds the macro helper IS_V6() which will be used to
    differentiate iris2/v6 silicon from previous versions.
    
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Stable-dep-of: d74e48160980 ("media: venus: hfi_venus: Write to VIDC_CTRL_INIT after unmasking interrupts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ed9d3dc244b0d819addf40f02f94bffde06585e
Author: Dikshita Agarwal <quic_dikshita@quicinc.com>
Date:   Fri Apr 2 12:06:30 2021 +0200

    media: venus: hfi: Define additional 6xx registers
    
    [ Upstream commit 7f6631295f46070ee5cdbe939136ce48cc617272 ]
    
    - Add X2 RPMh registers and definitions from the downstream example.
    - Add 6xx core power definitions
    - Add 6xx AON definitions
    - Add 6xx wrapper tz definitions
    - Add 6xx wrapper interrupt definitions
    - Add 6xx soft interrupt definitions
    - Define wrapper LPI register offsets
    
    Signed-off-by: Dikshita Agarwal <dikshita@codeaurora.org>
    Co-developed-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Stable-dep-of: d74e48160980 ("media: venus: hfi_venus: Write to VIDC_CTRL_INIT after unmasking interrupts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebccb53232ccde59da77874fc5392cb2c79e3c3b
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Fri Apr 2 12:06:28 2021 +0200

    media: venus: hfi,pm,firmware: Convert to block relative addressing
    
    [ Upstream commit ff2a7013b3e6a3d34d2b5c7786b8a73093d25319 ]
    
    An upcoming silicon change places a number of existing blocks within the
    Venus at different relative offsets to the base address of IO region.
    
    In order to handle this difference this patch changes the address offsets
    of the registers to function as offsets relative to the relevant sub-block
    of registers within the IO region not the base address of the IO region.
    
    As a result of this change venus_readl() and venus_writel() are deleted.
    
    Co-developed-by: Dikshita Agarwal <dikshita@codeaurora.org>
    Signed-off-by: Dikshita Agarwal <dikshita@codeaurora.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Stable-dep-of: d74e48160980 ("media: venus: hfi_venus: Write to VIDC_CTRL_INIT after unmasking interrupts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ccdeb68da0cc5b1e0443e0923683b421bd53dcb
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Fri Apr 2 12:06:27 2021 +0200

    media: venus: core: Add io base variables for each block
    
    [ Upstream commit b4053a2097ec2f8ea622e817ae5a46a83b23aefe ]
    
    New silicon means that the pre-determined offsets we have been using
    in this driver no longer hold. Existing blocks of registers can exist at
    different offsets relative to the IO base address.
    
    This commit adds a routine to assign the IO base hooks a subsequent commit
    will convert from absolute to relative addressing.
    
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Stable-dep-of: d74e48160980 ("media: venus: hfi_venus: Write to VIDC_CTRL_INIT after unmasking interrupts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d3745bbc3341d3b52f0e8f63987a1403f55f1f8
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 12 16:00:11 2023 +0200

    mmc: renesas_sdhi: register irqs before registering controller
    
    [ Upstream commit 74f45de394d979cc7770271f92fafa53e1ed3119 ]
    
    IRQs should be ready to serve when we call mmc_add_host() via
    tmio_mmc_host_probe(). To achieve that, ensure that all irqs are masked
    before registering the handlers.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Tested-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230712140011.18602-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 995ef65e4b5c824cb0e920761d4da924b2404899
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Tue Feb 23 11:08:29 2021 +0100

    mmc: tmio: support custom irq masks
    
    [ Upstream commit 0d856c4c68c639f96cb12c26aaeb906353b9a76e ]
    
    SDHI Gen2+ has a different value for TMIO_MASK_ALL, so add a member to
    support that. If the member is not used, the previous default value is
    applied.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/20210223100830.25125-2-wsa+renesas@sang-engineering.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 74f45de394d9 ("mmc: renesas_sdhi: register irqs before registering controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97eb045386dee8b269fdc647c5fac8f089c50b60
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Tue Nov 10 15:20:57 2020 +0100

    mmc: renesas_sdhi: populate SCC pointer at the proper place
    
    [ Upstream commit d14ac691bb6f6ebaa7eeec21ca04dd47300ff5b6 ]
    
    The SCC pointer is currently filled whenever the SoC is Gen2+. This is
    wrong because there is a Gen2-variant without SCC (SDHI_VER_GEN2_SDR50).
    We have been lucky because the writes to unintended registers have not
    caused problems so far. But further refactoring work exposed the
    problem. So, move the pointer initialization to the place where we know
    that the SDHI instance supports tuning. And also populate the 'reset'
    pointer unconditionally to make sure the interrupt enable register is
    always properly set for Gen2+.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/20201110142058.36393-4-wsa+renesas@sang-engineering.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 74f45de394d9 ("mmc: renesas_sdhi: register irqs before registering controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7217ceb61a47efd8c4ddd8f5d96702718fd9bfe9
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Tue Nov 10 15:20:56 2020 +0100

    mmc: renesas_sdhi: probe into TMIO after SCC parameters have been setup
    
    [ Upstream commit b161d87dfd3d9f3fb064a089a9e521d0e5d3e38f ]
    
    Setting up the SCC parameters does not need a probed TMIO device. But in
    the near future, probing the TMIO device needs the SCC parameters setup.
    So, fix the ordering.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/20201110142058.36393-3-wsa+renesas@sang-engineering.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 74f45de394d9 ("mmc: renesas_sdhi: register irqs before registering controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e492f8125133fcba80595ec6e233c000c8e014bd
Author: Werner Sembach <wse@tuxedocomputers.com>
Date:   Wed Jul 12 11:56:51 2023 -0700

    Input: i8042 - add quirk for TUXEDO Gemini 17 Gen1/Clevo PD70PN
    
    [ Upstream commit eb09074bdb05ffd6bfe77f8b4a41b76ef78c997b ]
    
    The touchpad of this device is both connected via PS/2 and i2c. This causes
    strange behavior when both driver fight for control. The easy fix is to
    prevent the PS/2 driver from accessing the mouse port as the full feature
    set of the touchpad is only supported in the i2c interface anyway.
    
    The strange behavior in this case is, that when an external screen is
    connected and the notebook is closed, the pointer on the external screen is
    moving to the lower right corner. When the notebook is opened again, this
    movement stops, but the touchpad clicks are unresponsive afterwards until
    reboot.
    
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230607173331.851192-1-wse@tuxedocomputers.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 677bff659fd37579bf7d4f0ea57795af9afa7e20
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Oct 1 14:28:34 2022 -0700

    Input: i8042 - rename i8042-x86ia64io.h to i8042-acpipnpio.h
    
    [ Upstream commit 8761b9b580d53162cca7868385069c0d4354c9e0 ]
    
    Now i8042-x86ia64io.h is shared by X86 and IA64, but it can be shared
    by more platforms (such as LoongArch) with ACPI firmware on which PNP
    typed keyboard and mouse is configured in DSDT. So rename it to i8042-
    acpipnpio.h.
    
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Reviewed-by: Mattijs Korpershoek <mkorpershoek@baylibre.com>
    Link: https://lore.kernel.org/r/20220917064020.1639709-1-chenhuacai@loongson.cn
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Stable-dep-of: eb09074bdb05 ("Input: i8042 - add quirk for TUXEDO Gemini 17 Gen1/Clevo PD70PN")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fac8ce48fa9fd61ee9056d3ed48b2edefca8b82
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Sep 27 17:30:07 2023 +0200

    netfilter: nf_tables: double hook unregistration in netns path
    
    commit f9a43007d3f7ba76d5e7f9421094f00f2ef202f8 upstream.
    
    [ This backport includes ab5e5c062f67 ("netfilter: nf_tables: use
      kfree_rcu(ptr, rcu) to release hooks in clean_net path") ]
    
    __nft_release_hooks() is called from pre_netns exit path which
    unregisters the hooks, then the NETDEV_UNREGISTER event is triggered
    which unregisters the hooks again.
    
    [  565.221461] WARNING: CPU: 18 PID: 193 at net/netfilter/core.c:495 __nf_unregister_net_hook+0x247/0x270
    [...]
    [  565.246890] CPU: 18 PID: 193 Comm: kworker/u64:1 Tainted: G            E     5.18.0-rc7+ #27
    [  565.253682] Workqueue: netns cleanup_net
    [  565.257059] RIP: 0010:__nf_unregister_net_hook+0x247/0x270
    [...]
    [  565.297120] Call Trace:
    [  565.300900]  <TASK>
    [  565.304683]  nf_tables_flowtable_event+0x16a/0x220 [nf_tables]
    [  565.308518]  raw_notifier_call_chain+0x63/0x80
    [  565.312386]  unregister_netdevice_many+0x54f/0xb50
    
    Unregister and destroy netdev hook from netns pre_exit via kfree_rcu
    so the NETDEV_UNREGISTER path see unregistered hooks.
    
    Fixes: 767d1216bff8 ("netfilter: nftables: fix possible UAF over chains from packet path in netns")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e51f30826bc5384801df98d76109c94953d1df64
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Sep 27 17:30:06 2023 +0200

    netfilter: nf_tables: unregister flowtable hooks on netns exit
    
    commit 6069da443bf65f513bb507bb21e2f87cfb1ad0b6 upstream.
    
    Unregister flowtable hooks before they are releases via
    nf_tables_flowtable_destroy() otherwise hook core reports UAF.
    
    BUG: KASAN: use-after-free in nf_hook_entries_grow+0x5a7/0x700 net/netfilter/core.c:142 net/netfilter/core.c:142
    Read of size 4 at addr ffff8880736f7438 by task syz-executor579/3666
    
    CPU: 0 PID: 3666 Comm: syz-executor579 Not tainted 5.16.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     __dump_stack lib/dump_stack.c:88 [inline] lib/dump_stack.c:106
     dump_stack_lvl+0x1dc/0x2d8 lib/dump_stack.c:106 lib/dump_stack.c:106
     print_address_description+0x65/0x380 mm/kasan/report.c:247 mm/kasan/report.c:247
     __kasan_report mm/kasan/report.c:433 [inline]
     __kasan_report mm/kasan/report.c:433 [inline] mm/kasan/report.c:450
     kasan_report+0x19a/0x1f0 mm/kasan/report.c:450 mm/kasan/report.c:450
     nf_hook_entries_grow+0x5a7/0x700 net/netfilter/core.c:142 net/netfilter/core.c:142
     __nf_register_net_hook+0x27e/0x8d0 net/netfilter/core.c:429 net/netfilter/core.c:429
     nf_register_net_hook+0xaa/0x180 net/netfilter/core.c:571 net/netfilter/core.c:571
     nft_register_flowtable_net_hooks+0x3c5/0x730 net/netfilter/nf_tables_api.c:7232 net/netfilter/nf_tables_api.c:7232
     nf_tables_newflowtable+0x2022/0x2cf0 net/netfilter/nf_tables_api.c:7430 net/netfilter/nf_tables_api.c:7430
     nfnetlink_rcv_batch net/netfilter/nfnetlink.c:513 [inline]
     nfnetlink_rcv_skb_batch net/netfilter/nfnetlink.c:634 [inline]
     nfnetlink_rcv_batch net/netfilter/nfnetlink.c:513 [inline] net/netfilter/nfnetlink.c:652
     nfnetlink_rcv_skb_batch net/netfilter/nfnetlink.c:634 [inline] net/netfilter/nfnetlink.c:652
     nfnetlink_rcv+0x10e6/0x2550 net/netfilter/nfnetlink.c:652 net/netfilter/nfnetlink.c:652
    
    __nft_release_hook() calls nft_unregister_flowtable_net_hooks() which
    only unregisters the hooks, then after RCU grace period, it is
    guaranteed that no packets add new entries to the flowtable (no flow
    offload rules and flowtable hooks are reachable from packet path), so it
    is safe to call nf_flow_table_free() which cleans up the remaining
    entries from the flowtable (both software and hardware) and it unbinds
    the flow_block.
    
    Fixes: ff4bf2f42a40 ("netfilter: nf_tables: add nft_unregister_flowtable_hook()")
    Reported-by: syzbot+e918523f77e62790d6d9@syzkaller.appspotmail.com
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e95c88e906161faab0a403d021d4414f4a29cc6
Author: Xiaoke Wang <xkernel.wang@foxmail.com>
Date:   Thu Mar 3 20:39:14 2022 +0800

    i2c: mux: demux-pinctrl: check the return value of devm_kstrdup()
    
    [ Upstream commit 7c0195fa9a9e263df204963f88a22b21688ffb66 ]
    
    devm_kstrdup() returns pointer to allocated string on success,
    NULL on failure. So it is better to check the return value of it.
    
    Fixes: e35478eac030 ("i2c: mux: demux-pinctrl: run properly with multiple instances")
    Signed-off-by: Xiaoke Wang <xkernel.wang@foxmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a78bcc2d526b08d1a3694d132ae5d5dbafde51c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Sep 3 08:13:21 2023 +0200

    gpio: tb10x: Fix an error handling path in tb10x_gpio_probe()
    
    [ Upstream commit b547b5e52a0587e6b25ea520bf2f9e03d00cbcb6 ]
    
    If an error occurs after a successful irq_domain_add_linear() call, it
    should be undone by a corresponding irq_domain_remove(), as already done
    in the remove function.
    
    Fixes: c6ce2b6bffe5 ("gpio: add TB10x GPIO driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f515112e833791001aaa8ab886af3ca78503617f
Author: Artem Chernyshev <artem.chernyshev@red-soft.ru>
Date:   Mon Sep 18 16:56:23 2023 +0300

    net: rds: Fix possible NULL-pointer dereference
    
    [ Upstream commit f1d95df0f31048f1c59092648997686e3f7d9478 ]
    
    In rds_rdma_cm_event_handler_cmn() check, if conn pointer exists
    before dereferencing it as rdma_set_service_type() argument
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: fd261ce6a30e ("rds: rdma: update rdma transport for tos")
    Signed-off-by: Artem Chernyshev <artem.chernyshev@red-soft.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 466e88548e19914e5d0b0d8406f95f47d9232753
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon Sep 18 17:36:10 2023 +0200

    bnxt_en: Flush XDP for bnxt_poll_nitroa0()'s NAPI
    
    [ Upstream commit edc0140cc3b7b91874ebe70eb7d2a851e8817ccc ]
    
    bnxt_poll_nitroa0() invokes bnxt_rx_pkt() which can run a XDP program
    which in turn can return XDP_REDIRECT. bnxt_rx_pkt() is also used by
    __bnxt_poll_work() which flushes (xdp_do_flush()) the packets after each
    round. bnxt_poll_nitroa0() lacks this feature.
    xdp_do_flush() should be invoked before leaving the NAPI callback.
    
    Invoke xdp_do_flush() after a redirect in bnxt_poll_nitroa0() NAPI.
    
    Cc: Michael Chan <michael.chan@broadcom.com>
    Fixes: f18c2b77b2e4e ("bnxt_en: optimized XDP_REDIRECT support")
    Reviewed-by: Andy Gospodarek <gospo@broadcom.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78106529b3908ca9a1e307044a80b0a72465a816
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed Sep 20 12:46:27 2023 +0200

    locking/seqlock: Do the lockdep annotation before locking in do_write_seqcount_begin_nested()
    
    [ Upstream commit 41b43b6c6e30a832c790b010a06772e793bca193 ]
    
    It was brought up by Tetsuo that the following sequence:
    
       write_seqlock_irqsave()
       printk_deferred_enter()
    
    could lead to a deadlock if the lockdep annotation within
    write_seqlock_irqsave() triggers.
    
    The problem is that the sequence counter is incremented before the lockdep
    annotation is performed. The lockdep splat would then attempt to invoke
    printk() but the reader side, of the same seqcount, could have a
    tty_port::lock acquired waiting for the sequence number to become even again.
    
    The other lockdep annotations come before the actual locking because "we
    want to see the locking error before it happens". There is no reason why
    seqcount should be different here.
    
    Do the lockdep annotation first then perform the locking operation (the
    sequence increment).
    
    Fixes: 1ca7d67cf5d5a ("seqcount: Add lockdep functionality to seqcount/seqlock structures")
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20230920104627._DTHgPyA@linutronix.de
    
    Closes: https://lore.kernel.org/20230621130641.-5iueY1I@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8dd21118b0fa33efd09b713cef79d02e72719e2
Author: Ahmed S. Darwish <a.darwish@linutronix.de>
Date:   Sun Dec 6 17:21:42 2020 +0100

    seqlock: Prefix internal seqcount_t-only macros with a "do_"
    
    [ Upstream commit 66bcfcdf89d00f2409f4b5da0f8c20c08318dc72 ]
    
    When the seqcount_LOCKNAME_t group of data types were introduced, two
    classes of seqlock.h sequence counter macros were added:
    
      - An external public API which can either take a plain seqcount_t or
        any of the seqcount_LOCKNAME_t variants.
    
      - An internal API which takes only a plain seqcount_t.
    
    To distinguish between the two groups, the "*_seqcount_t_*" pattern was
    used for the latter. This confused a number of mm/ call-site developers,
    and Linus also commented that it was not a standard practice for marking
    seqlock.h internal APIs.
    
    Distinguish the latter group of macros by prefixing a "do_".
    
    Signed-off-by: Ahmed S. Darwish <a.darwish@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/CAHk-=wikhGExmprXgaW+MVXG1zsGpztBbVwOb23vetk41EtTBQ@mail.gmail.com
    Stable-dep-of: 41b43b6c6e30 ("locking/seqlock: Do the lockdep annotation before locking in do_write_seqcount_begin_nested()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac01a0dd790593c3d448d7729a01c95bd37e002f
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Nov 10 13:44:17 2020 +0100

    seqlock: Rename __seqprop() users
    
    [ Upstream commit ab440b2c604b60fe90885270fcfeb5c3dd5d6fae ]
    
    More consistent naming should make it easier to untangle the _Generic
    token pasting maze called __seqprop().
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20201110115358.GE2594@hirez.programming.kicks-ass.net
    Stable-dep-of: 41b43b6c6e30 ("locking/seqlock: Do the lockdep annotation before locking in do_write_seqcount_begin_nested()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8460ee6c80b6bae053797842fbbdaa718166095
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 26 17:50:38 2020 +0100

    seqlock: avoid -Wshadow warnings
    
    [ Upstream commit a07c45312f06e288417049208c344ad76074627d ]
    
    When building with W=2, there is a flood of warnings about the seqlock
    macros shadowing local variables:
    
      19806 linux/seqlock.h:331:11: warning: declaration of 'seq' shadows a previous local [-Wshadow]
         48 linux/seqlock.h:348:11: warning: declaration of 'seq' shadows a previous local [-Wshadow]
          8 linux/seqlock.h:379:11: warning: declaration of 'seq' shadows a previous local [-Wshadow]
    
    Prefix the local variables to make the warning useful elsewhere again.
    
    Fixes: 52ac39e5db51 ("seqlock: seqcount_t: Implement all read APIs as statement expressions")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20201026165044.3722931-1-arnd@kernel.org
    Stable-dep-of: 41b43b6c6e30 ("locking/seqlock: Do the lockdep annotation before locking in do_write_seqcount_begin_nested()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1893feb20ea033bcd9c449b55df3dab3802c907
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Tue Sep 19 20:04:45 2023 +0200

    netfilter: ipset: Fix race between IPSET_CMD_CREATE and IPSET_CMD_SWAP
    
    [ Upstream commit 7433b6d2afd512d04398c73aa984d1e285be125b ]
    
    Kyle Zeng reported that there is a race between IPSET_CMD_ADD and IPSET_CMD_SWAP
    in netfilter/ip_set, which can lead to the invocation of `__ip_set_put` on a
    wrong `set`, triggering the `BUG_ON(set->ref == 0);` check in it.
    
    The race is caused by using the wrong reference counter, i.e. the ref counter instead
    of ref_netlink.
    
    Fixes: 24e227896bbf ("netfilter: ipset: Add schedule point in call_ad().")
    Reported-by: Kyle Zeng <zengyhkyle@gmail.com>
    Closes: https://lore.kernel.org/netfilter-devel/ZPZqetxOmH+w%2Fmyc@westworld/#r
    Tested-by: Kyle Zeng <zengyhkyle@gmail.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b44dd92e2afd89eb6e9d27616858e72a67bdc1a7
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Mon Sep 18 20:30:11 2023 +0800

    team: fix null-ptr-deref when team device type is changed
    
    [ Upstream commit 492032760127251e5540a5716a70996bacf2a3fd ]
    
    Get a null-ptr-deref bug as follows with reproducer [1].
    
    BUG: kernel NULL pointer dereference, address: 0000000000000228
    ...
    RIP: 0010:vlan_dev_hard_header+0x35/0x140 [8021q]
    ...
    Call Trace:
     <TASK>
     ? __die+0x24/0x70
     ? page_fault_oops+0x82/0x150
     ? exc_page_fault+0x69/0x150
     ? asm_exc_page_fault+0x26/0x30
     ? vlan_dev_hard_header+0x35/0x140 [8021q]
     ? vlan_dev_hard_header+0x8e/0x140 [8021q]
     neigh_connected_output+0xb2/0x100
     ip6_finish_output2+0x1cb/0x520
     ? nf_hook_slow+0x43/0xc0
     ? ip6_mtu+0x46/0x80
     ip6_finish_output+0x2a/0xb0
     mld_sendpack+0x18f/0x250
     mld_ifc_work+0x39/0x160
     process_one_work+0x1e6/0x3f0
     worker_thread+0x4d/0x2f0
     ? __pfx_worker_thread+0x10/0x10
     kthread+0xe5/0x120
     ? __pfx_kthread+0x10/0x10
     ret_from_fork+0x34/0x50
     ? __pfx_kthread+0x10/0x10
     ret_from_fork_asm+0x1b/0x30
    
    [1]
    $ teamd -t team0 -d -c '{"runner": {"name": "loadbalance"}}'
    $ ip link add name t-dummy type dummy
    $ ip link add link t-dummy name t-dummy.100 type vlan id 100
    $ ip link add name t-nlmon type nlmon
    $ ip link set t-nlmon master team0
    $ ip link set t-nlmon nomaster
    $ ip link set t-dummy up
    $ ip link set team0 up
    $ ip link set t-dummy.100 down
    $ ip link set t-dummy.100 master team0
    
    When enslave a vlan device to team device and team device type is changed
    from non-ether to ether, header_ops of team device is changed to
    vlan_header_ops. That is incorrect and will trigger null-ptr-deref
    for vlan->real_dev in vlan_dev_hard_header() because team device is not
    a vlan device.
    
    Cache eth_header_ops in team_setup(), then assign cached header_ops to
    header_ops of team net device when its type is changed from non-ether
    to ether to fix the bug.
    
    Fixes: 1d76efe1577b ("team: add support for non-ethernet devices")
    Suggested-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230918123011.1884401-1-william.xuanziyang@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04cc361f029c14dd067ad180525c7392334c9bfd
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Sep 18 09:13:51 2023 +0000

    net: bridge: use DEV_STATS_INC()
    
    [ Upstream commit 44bdb313da57322c9b3c108eb66981c6ec6509f4 ]
    
    syzbot/KCSAN reported data-races in br_handle_frame_finish() [1]
    This function can run from multiple cpus without mutual exclusion.
    
    Adopt SMP safe DEV_STATS_INC() to update dev->stats fields.
    
    Handles updates to dev->stats.tx_dropped while we are at it.
    
    [1]
    BUG: KCSAN: data-race in br_handle_frame_finish / br_handle_frame_finish
    
    read-write to 0xffff8881374b2178 of 8 bytes by interrupt on cpu 1:
    br_handle_frame_finish+0xd4f/0xef0 net/bridge/br_input.c:189
    br_nf_hook_thresh+0x1ed/0x220
    br_nf_pre_routing_finish_ipv6+0x50f/0x540
    NF_HOOK include/linux/netfilter.h:304 [inline]
    br_nf_pre_routing_ipv6+0x1e3/0x2a0 net/bridge/br_netfilter_ipv6.c:178
    br_nf_pre_routing+0x526/0xba0 net/bridge/br_netfilter_hooks.c:508
    nf_hook_entry_hookfn include/linux/netfilter.h:144 [inline]
    nf_hook_bridge_pre net/bridge/br_input.c:272 [inline]
    br_handle_frame+0x4c9/0x940 net/bridge/br_input.c:417
    __netif_receive_skb_core+0xa8a/0x21e0 net/core/dev.c:5417
    __netif_receive_skb_one_core net/core/dev.c:5521 [inline]
    __netif_receive_skb+0x57/0x1b0 net/core/dev.c:5637
    process_backlog+0x21f/0x380 net/core/dev.c:5965
    __napi_poll+0x60/0x3b0 net/core/dev.c:6527
    napi_poll net/core/dev.c:6594 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6727
    __do_softirq+0xc1/0x265 kernel/softirq.c:553
    run_ksoftirqd+0x17/0x20 kernel/softirq.c:921
    smpboot_thread_fn+0x30a/0x4a0 kernel/smpboot.c:164
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    read-write to 0xffff8881374b2178 of 8 bytes by interrupt on cpu 0:
    br_handle_frame_finish+0xd4f/0xef0 net/bridge/br_input.c:189
    br_nf_hook_thresh+0x1ed/0x220
    br_nf_pre_routing_finish_ipv6+0x50f/0x540
    NF_HOOK include/linux/netfilter.h:304 [inline]
    br_nf_pre_routing_ipv6+0x1e3/0x2a0 net/bridge/br_netfilter_ipv6.c:178
    br_nf_pre_routing+0x526/0xba0 net/bridge/br_netfilter_hooks.c:508
    nf_hook_entry_hookfn include/linux/netfilter.h:144 [inline]
    nf_hook_bridge_pre net/bridge/br_input.c:272 [inline]
    br_handle_frame+0x4c9/0x940 net/bridge/br_input.c:417
    __netif_receive_skb_core+0xa8a/0x21e0 net/core/dev.c:5417
    __netif_receive_skb_one_core net/core/dev.c:5521 [inline]
    __netif_receive_skb+0x57/0x1b0 net/core/dev.c:5637
    process_backlog+0x21f/0x380 net/core/dev.c:5965
    __napi_poll+0x60/0x3b0 net/core/dev.c:6527
    napi_poll net/core/dev.c:6594 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6727
    __do_softirq+0xc1/0x265 kernel/softirq.c:553
    do_softirq+0x5e/0x90 kernel/softirq.c:454
    __local_bh_enable_ip+0x64/0x70 kernel/softirq.c:381
    __raw_spin_unlock_bh include/linux/spinlock_api_smp.h:167 [inline]
    _raw_spin_unlock_bh+0x36/0x40 kernel/locking/spinlock.c:210
    spin_unlock_bh include/linux/spinlock.h:396 [inline]
    batadv_tt_local_purge+0x1a8/0x1f0 net/batman-adv/translation-table.c:1356
    batadv_tt_purge+0x2b/0x630 net/batman-adv/translation-table.c:3560
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    value changed: 0x00000000000d7190 -> 0x00000000000d7191
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 14848 Comm: kworker/u4:11 Not tainted 6.6.0-rc1-syzkaller-00236-gad8a69f361b9 #0
    
    Fixes: 1c29fc4989bc ("[BRIDGE]: keep track of received multicast packets")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Roopa Prabhu <roopa@nvidia.com>
    Cc: Nikolay Aleksandrov <razor@blackwall.org>
    Cc: bridge@lists.linux-foundation.org
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230918091351.1356153-1-edumazet@google.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1671dc1b25e5a338fcada0f8e692008b6fe6bcf6
Author: Jie Wang <wangjie125@huawei.com>
Date:   Mon Sep 18 15:48:40 2023 +0800

    net: hns3: add 5ms delay before clear firmware reset irq source
    
    [ Upstream commit 0770063096d5da4a8e467b6e73c1646a75589628 ]
    
    Currently the reset process in hns3 and firmware watchdog init process is
    asynchronous. we think firmware watchdog initialization is completed
    before hns3 clear the firmware interrupt source. However, firmware
    initialization may not complete early.
    
    so we add delay before hns3 clear firmware interrupt source and 5 ms delay
    is enough to avoid second firmware reset interrupt.
    
    Fixes: c1a81619d73a ("net: hns3: Add mailbox interrupt handling to PF driver")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 309af4a39b8e1e38e73929297bde9f03973af2c8
Author: Jian Shen <shenjian15@huawei.com>
Date:   Mon Sep 18 15:48:38 2023 +0800

    net: hns3: only enable unicast promisc when mac table full
    
    [ Upstream commit f2ed304922a55690529bcca59678dd92d7466ce8 ]
    
    Currently, the driver will enable unicast promisc for the function
    once configure mac address fail. It's unreasonable when the failure
    is caused by using same mac address with other functions. So only
    enable unicast promisc when mac table full.
    
    Fixes: c631c696823c ("net: hns3: refactor the promisc mode setting")
    Signed-off-by: Jian Shen <shenjian15@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae806c74c0634b0c23855066d8ba28d850fd1260
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Mon Sep 4 22:04:48 2023 -0700

    x86/srso: Fix SBPB enablement for spec_rstack_overflow=off
    
    [ Upstream commit 01b057b2f4cc2d905a0bd92195657dbd9a7005ab ]
    
    If the user has requested no SRSO mitigation, other mitigations can use
    the lighter-weight SBPB instead of IBPB.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/b20820c3cfd1003171135ec8d762a0b957348497.1693889988.git.jpoimboe@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 423ba1b3a5a768935b12b3f9dde6937fe7949039
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Mon Sep 4 22:04:45 2023 -0700

    x86/srso: Fix srso_show_state() side effect
    
    [ Upstream commit a8cf700c17d9ca6cb8ee7dc5c9330dbac3948237 ]
    
    Reading the 'spec_rstack_overflow' sysfs file can trigger an unnecessary
    MSR write, and possibly even a (handled) exception if the microcode
    hasn't been updated.
    
    Avoid all that by just checking X86_FEATURE_IBPB_BRTYPE instead, which
    gets set by srso_select_mitigation() if the updated microcode exists.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Reviewed-by: Nikolay Borisov <nik.borisov@suse.com>
    Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/27d128899cb8aee9eb2b57ddc996742b0c1d776b.1693889988.git.jpoimboe@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ec40ef6f7658e852f794e33b9c475f2557d4148
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:22 2023 -0700

    platform/x86: intel_scu_ipc: Fail IPC send if still busy
    
    [ Upstream commit 85e654c9f722853a595fa941dca60c157b707b86 ]
    
    It's possible for interrupts to get significantly delayed to the point
    that callers of intel_scu_ipc_dev_command() and friends can call the
    function once, hit a timeout, and call it again while the interrupt
    still hasn't been processed. This driver will get seriously confused if
    the interrupt is finally processed after the second IPC has been sent
    with ipc_command(). It won't know which IPC has been completed. This
    could be quite disastrous if calling code assumes something has happened
    upon return from intel_scu_ipc_dev_simple_command() when it actually
    hasn't.
    
    Let's avoid this scenario by simply returning -EBUSY in this case.
    Hopefully higher layers will know to back off or fail gracefully when
    this happens. It's all highly unlikely anyway, but it's better to be
    correct here as we have no way to know which IPC the status register is
    telling us about if we send a second IPC while the previous IPC is still
    processing.
    
    Cc: Prashant Malani <pmalani@chromium.org>
    Cc: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Fixes: ed12f295bfd5 ("ipc: Added support for IPC interrupt mode")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-5-swboyd@chromium.org
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c5eaf6d8bb4ea30f736946bb42b6f3de25c43ff
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:21 2023 -0700

    platform/x86: intel_scu_ipc: Don't override scu in intel_scu_ipc_dev_simple_command()
    
    [ Upstream commit efce78584e583226e9a1f6cb2fb555d6ff47c3e7 ]
    
    Andy discovered this bug during patch review. The 'scu' argument to this
    function shouldn't be overridden by the function itself. It doesn't make
    any sense. Looking at the commit history, we see that commit
    f57fa18583f5 ("platform/x86: intel_scu_ipc: Introduce new SCU IPC API")
    removed the setting of the scu to ipcdev in other functions, but not
    this one. That was an oversight. Remove this line so that we stop
    overriding the scu instance that is used by this function.
    
    Reported-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Closes: https://lore.kernel.org/r/ZPjdZ3xNmBEBvNiS@smile.fi.intel.com
    Cc: Prashant Malani <pmalani@chromium.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Fixes: f57fa18583f5 ("platform/x86: intel_scu_ipc: Introduce new SCU IPC API")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-4-swboyd@chromium.org
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 441b61d742effd40e186e6c5dcd9b5b01caae514
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:20 2023 -0700

    platform/x86: intel_scu_ipc: Check status upon timeout in ipc_wait_for_interrupt()
    
    [ Upstream commit 427fada620733e6474d783ae6037a66eae42bf8c ]
    
    It's possible for the completion in ipc_wait_for_interrupt() to timeout,
    simply because the interrupt was delayed in being processed. A timeout
    in itself is not an error. This driver should check the status register
    upon a timeout to ensure that scheduling or interrupt processing delays
    don't affect the outcome of the IPC return value.
    
     CPU0                                                   SCU
     ----                                                   ---
     ipc_wait_for_interrupt()
      wait_for_completion_timeout(&scu->cmd_complete)
      [TIMEOUT]                                             status[IPC_STATUS_BUSY]=0
    
    Fix this problem by reading the status bit in all cases, regardless of
    the timeout. If the completion times out, we'll assume the problem was
    that the IPC_STATUS_BUSY bit was still set, but if the status bit is
    cleared in the meantime we know that we hit some scheduling delay and we
    should just check the error bit.
    
    Cc: Prashant Malani <pmalani@chromium.org>
    Reviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Fixes: ed12f295bfd5 ("ipc: Added support for IPC interrupt mode")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-3-swboyd@chromium.org
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c463898b6e72e5327703dc11e223b6385fdb5e10
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:19 2023 -0700

    platform/x86: intel_scu_ipc: Check status after timeout in busy_loop()
    
    [ Upstream commit e0b4ab3bb92bda8d12f55842614362989d5b2cb3 ]
    
    It's possible for the polling loop in busy_loop() to get scheduled away
    for a long time.
    
      status = ipc_read_status(scu); // status = IPC_STATUS_BUSY
      <long time scheduled away>
      if (!(status & IPC_STATUS_BUSY))
    
    If this happens, then the status bit could change while the task is
    scheduled away and this function would never read the status again after
    timing out. Instead, the function will return -ETIMEDOUT when it's
    possible that scheduling didn't work out and the status bit was cleared.
    Bit polling code should always check the bit being polled one more time
    after the timeout in case this happens.
    
    Fix this by reading the status once more after the while loop breaks.
    The readl_poll_timeout() macro implements all of this, and it is
    shorter, so use that macro here to consolidate code and fix this.
    
    There were some concerns with using readl_poll_timeout() because it uses
    timekeeping, and timekeeping isn't running early on or during the late
    stages of system suspend or early stages of system resume, but an audit
    of the code concluded that this code isn't called during those times so
    it is safe to use the macro.
    
    Cc: Prashant Malani <pmalani@chromium.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Fixes: e7b7ab3847c9 ("platform/x86: intel_scu_ipc: Sleeping is fine when polling")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-2-swboyd@chromium.org
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60d73c62e3e4464f375758b6f2459c13d46465b6
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 15 19:00:35 2023 +0000

    dccp: fix dccp_v4_err()/dccp_v6_err() again
    
    [ Upstream commit 6af289746a636f71f4c0535a9801774118486c7a ]
    
    dh->dccph_x is the 9th byte (offset 8) in "struct dccp_hdr",
    not in the "byte 7" as Jann claimed.
    
    We need to make sure the ICMP messages are big enough,
    using more standard ways (no more assumptions).
    
    syzbot reported:
    BUG: KMSAN: uninit-value in pskb_may_pull_reason include/linux/skbuff.h:2667 [inline]
    BUG: KMSAN: uninit-value in pskb_may_pull include/linux/skbuff.h:2681 [inline]
    BUG: KMSAN: uninit-value in dccp_v6_err+0x426/0x1aa0 net/dccp/ipv6.c:94
    pskb_may_pull_reason include/linux/skbuff.h:2667 [inline]
    pskb_may_pull include/linux/skbuff.h:2681 [inline]
    dccp_v6_err+0x426/0x1aa0 net/dccp/ipv6.c:94
    icmpv6_notify+0x4c7/0x880 net/ipv6/icmp.c:867
    icmpv6_rcv+0x19d5/0x30d0
    ip6_protocol_deliver_rcu+0xda6/0x2a60 net/ipv6/ip6_input.c:438
    ip6_input_finish net/ipv6/ip6_input.c:483 [inline]
    NF_HOOK include/linux/netfilter.h:304 [inline]
    ip6_input+0x15d/0x430 net/ipv6/ip6_input.c:492
    ip6_mc_input+0xa7e/0xc80 net/ipv6/ip6_input.c:586
    dst_input include/net/dst.h:468 [inline]
    ip6_rcv_finish+0x5db/0x870 net/ipv6/ip6_input.c:79
    NF_HOOK include/linux/netfilter.h:304 [inline]
    ipv6_rcv+0xda/0x390 net/ipv6/ip6_input.c:310
    __netif_receive_skb_one_core net/core/dev.c:5523 [inline]
    __netif_receive_skb+0x1a6/0x5a0 net/core/dev.c:5637
    netif_receive_skb_internal net/core/dev.c:5723 [inline]
    netif_receive_skb+0x58/0x660 net/core/dev.c:5782
    tun_rx_batched+0x83b/0x920
    tun_get_user+0x564c/0x6940 drivers/net/tun.c:2002
    tun_chr_write_iter+0x3af/0x5d0 drivers/net/tun.c:2048
    call_write_iter include/linux/fs.h:1985 [inline]
    new_sync_write fs/read_write.c:491 [inline]
    vfs_write+0x8ef/0x15c0 fs/read_write.c:584
    ksys_write+0x20f/0x4c0 fs/read_write.c:637
    __do_sys_write fs/read_write.c:649 [inline]
    __se_sys_write fs/read_write.c:646 [inline]
    __x64_sys_write+0x93/0xd0 fs/read_write.c:646
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Uninit was created at:
    slab_post_alloc_hook+0x12f/0xb70 mm/slab.h:767
    slab_alloc_node mm/slub.c:3478 [inline]
    kmem_cache_alloc_node+0x577/0xa80 mm/slub.c:3523
    kmalloc_reserve+0x13d/0x4a0 net/core/skbuff.c:559
    __alloc_skb+0x318/0x740 net/core/skbuff.c:650
    alloc_skb include/linux/skbuff.h:1286 [inline]
    alloc_skb_with_frags+0xc8/0xbd0 net/core/skbuff.c:6313
    sock_alloc_send_pskb+0xa80/0xbf0 net/core/sock.c:2795
    tun_alloc_skb drivers/net/tun.c:1531 [inline]
    tun_get_user+0x23cf/0x6940 drivers/net/tun.c:1846
    tun_chr_write_iter+0x3af/0x5d0 drivers/net/tun.c:2048
    call_write_iter include/linux/fs.h:1985 [inline]
    new_sync_write fs/read_write.c:491 [inline]
    vfs_write+0x8ef/0x15c0 fs/read_write.c:584
    ksys_write+0x20f/0x4c0 fs/read_write.c:637
    __do_sys_write fs/read_write.c:649 [inline]
    __se_sys_write fs/read_write.c:646 [inline]
    __x64_sys_write+0x93/0xd0 fs/read_write.c:646
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    CPU: 0 PID: 4995 Comm: syz-executor153 Not tainted 6.6.0-rc1-syzkaller-00014-ga747acc0b752 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/04/2023
    
    Fixes: 977ad86c2a1b ("dccp: Fix out of bounds access in DCCP error handler")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jann Horn <jannh@google.com>
    Reviewed-by: Jann Horn <jannh@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09a1c790e1b9d2b5a58b668f29760c1e5c5ea1e9
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Fri Aug 25 11:26:01 2023 +0530

    powerpc/perf/hv-24x7: Update domain value check
    
    [ Upstream commit 4ff3ba4db5943cac1045e3e4a3c0463ea10f6930 ]
    
    Valid domain value is in range 1 to HV_PERF_DOMAIN_MAX. Current code has
    check for domain value greater than or equal to HV_PERF_DOMAIN_MAX. But
    the check for domain value 0 is missing.
    
    Fix this issue by adding check for domain value 0.
    
    Before:
      # ./perf stat -v -e hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/ sleep 1
      Using CPUID 00800200
      Control descriptor is not initialized
      Error:
      The sys_perf_event_open() syscall returned with 5 (Input/output error) for
      event (hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/).
      /bin/dmesg | grep -i perf may provide additional information.
    
      Result from dmesg:
      [   37.819387] hv-24x7: hcall failed: [0 0x60040000 0x100 0] => ret
      0xfffffffffffffffc (-4) detail=0x2000000 failing ix=0
    
    After:
      # ./perf stat -v -e hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/ sleep 1
      Using CPUID 00800200
      Control descriptor is not initialized
      Warning:
      hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/ event is not supported by the kernel.
      failed to read counter hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/
    
    Fixes: ebd4a5a3ebd9 ("powerpc/perf/hv-24x7: Minor improvements")
    Reported-by: Krishan Gopal Sarawast <krishang@linux.vnet.ibm.com>
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Tested-by: Disha Goel <disgoel@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230825055601.360083-1-kjain@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8689c9ace976d6c078e6dc844b09598796e84099
Author: Kyle Zeng <zengyhkyle@gmail.com>
Date:   Thu Sep 14 22:12:57 2023 -0700

    ipv4: fix null-deref in ipv4_link_failure
    
    [ Upstream commit 0113d9c9d1ccc07f5a3710dac4aa24b6d711278c ]
    
    Currently, we assume the skb is associated with a device before calling
    __ip_options_compile, which is not always the case if it is re-routed by
    ipvs.
    When skb->dev is NULL, dev_net(skb->dev) will become null-dereference.
    This patch adds a check for the edge case and switch to use the net_device
    from the rtable when skb->dev is NULL.
    
    Fixes: ed0de45a1008 ("ipv4: recompile ip options in ipv4_link_failure")
    Suggested-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: Kyle Zeng <zengyhkyle@gmail.com>
    Cc: Stephen Suryaputra <ssuryaextr@gmail.com>
    Cc: Vadim Fedorenko <vfedorenko@novek.ru>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47907ebeb77a96edfdb5ea1baa83cd334b5e0522
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Thu Sep 7 17:44:57 2023 +0200

    i40e: Fix VF VLAN offloading when port VLAN is configured
    
    [ Upstream commit d0d362ffa33da4acdcf7aee2116ceef8c8fef658 ]
    
    If port VLAN is configured on a VF then any other VLANs on top of this VF
    are broken.
    
    During i40e_ndo_set_vf_port_vlan() call the i40e driver reset the VF and
    iavf driver asks PF (using VIRTCHNL_OP_GET_VF_RESOURCES) for VF capabilities
    but this reset occurs too early, prior setting of vf->info.pvid field
    and because this field can be zero during i40e_vc_get_vf_resources_msg()
    then VIRTCHNL_VF_OFFLOAD_VLAN capability is reported to iavf driver.
    
    This is wrong because iavf driver should not report VLAN offloading
    capability when port VLAN is configured as i40e does not support QinQ
    offloading.
    
    Fix the issue by moving VF reset after setting of vf->port_vlan_id
    field.
    
    Without this patch:
    $ echo 1 > /sys/class/net/enp2s0f0/device/sriov_numvfs
    $ ip link set enp2s0f0 vf 0 vlan 3
    $ ip link set enp2s0f0v0 up
    $ ip link add link enp2s0f0v0 name vlan4 type vlan id 4
    $ ip link set vlan4 up
    ...
    $ ethtool -k enp2s0f0v0 | grep vlan-offload
    rx-vlan-offload: on
    tx-vlan-offload: on
    $ dmesg -l err | grep iavf
    [1292500.742914] iavf 0000:02:02.0: Failed to add VLAN filter, error IAVF_ERR_INVALID_QP_ID
    
    With this patch:
    $ echo 1 > /sys/class/net/enp2s0f0/device/sriov_numvfs
    $ ip link set enp2s0f0 vf 0 vlan 3
    $ ip link set enp2s0f0v0 up
    $ ip link add link enp2s0f0v0 name vlan4 type vlan id 4
    $ ip link set vlan4 up
    ...
    $ ethtool -k enp2s0f0v0 | grep vlan-offload
    rx-vlan-offload: off [requested on]
    tx-vlan-offload: off [requested on]
    $ dmesg -l err | grep iavf
    
    Fixes: f9b4b6278d51 ("i40e: Reset the VF upon conflicting VLAN configuration")
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a91861446f1c98b302ebad7c8681cfb5b39e9a9a
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Fri Sep 15 14:02:11 2023 +0800

    ASoC: imx-audmix: Fix return error with devm_clk_get()
    
    [ Upstream commit b19a5733de255cabba5feecabf6e900638b582d1 ]
    
    The devm_clk_get() can return -EPROBE_DEFER error,
    modify the error code to be -EINVAL is not correct, which
    cause the -EPROBE_DEFER error is not correctly handled.
    
    This patch is to fix the return error code.
    
    Fixes: b86ef5367761 ("ASoC: fsl: Add Audio Mixer machine driver")
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Link: https://lore.kernel.org/r/1694757731-18308-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4ecedf980b0b7e11947d2c97c7320ec771e998b
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Sep 12 16:16:25 2023 +0200

    selftests: tls: swap the TX and RX sockets in some tests
    
    [ Upstream commit c326ca98446e0ae4fee43a40acf79412b74cfedb ]
    
    tls.sendmsg_large and tls.sendmsg_multiple are trying to send through
    the self->cfd socket (only configured with TLS_RX) and to receive through
    the self->fd socket (only configured with TLS_TX), so they're not using
    kTLS at all. Swap the sockets.
    
    Fixes: 7f657d5bf507 ("selftests: tls: add selftests for TLS sockets")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78ef69b6e7705e0da62d2bb23ee92b95a00a1070
Author: Kees Cook <keescook@chromium.org>
Date:   Wed May 26 20:27:19 2021 -0700

    selftests/tls: Add {} to avoid static checker warning
    
    [ Upstream commit f50688b47c5858d2ff315d020332bf4cb6710837 ]
    
    This silences a static checker warning due to the unusual macro
    construction of EXPECT_*() by adding explicit {}s around the enclosing
    while loop.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 7f657d5bf507 ("selftests: tls: add selftests for TLS sockets")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Stable-dep-of: c326ca98446e ("selftests: tls: swap the TX and RX sockets in some tests")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 388c9d3eefaea99828ee5000c693128a5b41ee7c
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Sep 11 15:28:14 2023 +0200

    bpf: Avoid deadlock when using queue and stack maps from NMI
    
    [ Upstream commit a34a9f1a19afe9c60ca0ea61dfeee63a1c2baac8 ]
    
    Sysbot discovered that the queue and stack maps can deadlock if they are
    being used from a BPF program that can be called from NMI context (such as
    one that is attached to a perf HW counter event). To fix this, add an
    in_nmi() check and use raw_spin_trylock() in NMI context, erroring out if
    grabbing the lock fails.
    
    Fixes: f1a2e44a3aec ("bpf: add queue and stack maps")
    Reported-by: Hsin-Wei Hung <hsinweih@uci.edu>
    Tested-by: Hsin-Wei Hung <hsinweih@uci.edu>
    Co-developed-by: Hsin-Wei Hung <hsinweih@uci.edu>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Link: https://lore.kernel.org/r/20230911132815.717240-1-toke@redhat.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6dc85d848c264f9fae506c2b6967697222c9b58e
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Sep 10 19:04:45 2023 +0200

    netfilter: nf_tables: disallow element removal on anonymous sets
    
    [ Upstream commit 23a3bfd4ba7acd36abf52b78605f61b21bdac216 ]
    
    Anonymous sets need to be populated once at creation and then they are
    bound to rule since 938154b93be8 ("netfilter: nf_tables: reject unbound
    anonymous set before commit phase"), otherwise transaction reports
    EINVAL.
    
    Userspace does not need to delete elements of anonymous sets that are
    not yet bound, reject this with EOPNOTSUPP.
    
    From flush command path, skip anonymous sets, they are expected to be
    bound already. Otherwise, EINVAL is hit at the end of this transaction
    for unbound sets.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a45632f9971315aca1330213fd27e128c77dfc4d
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Thu Sep 7 11:05:04 2023 +0200

    ASoC: meson: spdifin: start hw on dai probe
    
    [ Upstream commit aedf323b66b2b875137422ecb7d2525179759076 ]
    
    For spdif input to report the locked rate correctly, even when no capture
    is running, the HW and reference clock must be started as soon as
    the dai is probed.
    
    Fixes: 5ce5658375e6 ("ASoC: meson: add axg spdif input")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20230907090504.12700-1-jbrunet@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09c85f2d21ab6b5acba31a037985b13e8e6565b8
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 19:01:18 2023 +0200

    netfilter: nf_tables: fix memleak when more than 255 elements expired
    
    commit cf5000a7787cbc10341091d37245a42c119d26c5 upstream.
    
    When more than 255 elements expired we're supposed to switch to a new gc
    container structure.
    
    This never happens: u8 type will wrap before reaching the boundary
    and nft_trans_gc_space() always returns true.
    
    This means we recycle the initial gc container structure and
    lose track of the elements that came before.
    
    While at it, don't deref 'gc' after we've passed it to call_rcu.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Reported-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4deaf1316b42ae9f6dff0911ba75435ab3475d5c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:17 2023 +0200

    netfilter: nft_set_hash: try later when GC hits EAGAIN on iteration
    
    commit b079155faae94e9b3ab9337e82100a914ebb4e8d upstream.
    
    Skip GC run if iterator rewinds to the beginning with EAGAIN, otherwise GC
    might collect the same element more than once.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26d0e4d632f8afee2ac73a5c6fb28e40144403af
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:16 2023 +0200

    netfilter: nft_set_pipapo: stop GC iteration if GC transaction allocation fails
    
    commit 6d365eabce3c018a80f6e0379b17df2abb17405e upstream.
    
    nft_trans_gc_queue_sync() enqueues the GC transaction and it allocates a
    new one. If this allocation fails, then stop this GC sync run and retry
    later.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b796c4e4bf29bbf9481eac0517449e4ce6385ad8
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:15 2023 +0200

    netfilter: nft_set_rbtree: use read spinlock to avoid datapath contention
    
    commit 96b33300fba880ec0eafcf3d82486f3463b4b6da upstream.
    
    rbtree GC does not modify the datastructure, instead it collects expired
    elements and it enqueues a GC transaction. Use a read spinlock instead
    to avoid data contention while GC worker is running.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c323ed65f66e5387ee0a73452118d49f1dae81b8
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:14 2023 +0200

    netfilter: nft_set_rbtree: skip sync GC for new elements in this transaction
    
    commit 2ee52ae94baabf7ee09cf2a8d854b990dac5d0e4 upstream.
    
    New elements in this transaction might expired before such transaction
    ends. Skip sync GC for such elements otherwise commit path might walk
    over an already released object. Once transaction is finished, async GC
    will collect such expired element.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09f2dda1e5762a60bad113bc1c04eeaf805ee565
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 19:01:13 2023 +0200

    netfilter: nf_tables: defer gc run if previous batch is still pending
    
    commit 8e51830e29e12670b4c10df070a4ea4c9593e961 upstream.
    
    Don't queue more gc work, else we may queue the same elements multiple
    times.
    
    If an element is flagged as dead, this can mean that either the previous
    gc request was invalidated/discarded by a transaction or that the previous
    request is still pending in the system work queue.
    
    The latter will happen if the gc interval is set to a very low value,
    e.g. 1ms, and system work queue is backlogged.
    
    The sets refcount is 1 if no previous gc requeusts are queued, so add
    a helper for this and skip gc run if old requests are pending.
    
    Add a helper for this and skip the gc run in this case.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b71dcee2fc9c07289f63c0122a5d39108f476ce1
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:12 2023 +0200

    netfilter: nf_tables: use correct lock to protect gc_list
    
    commit 8357bc946a2abc2a10ca40e5a2105d2b4c57515e upstream.
    
    Use nf_tables_gc_list_lock spinlock, not nf_tables_destroy_list_lock to
    protect the gc_list.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23292bdfda5f04e704a843b8f97b0eb95ace1ca6
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:11 2023 +0200

    netfilter: nf_tables: GC transaction race with abort path
    
    commit 720344340fb9be2765bbaab7b292ece0a4570eae upstream.
    
    Abort path is missing a synchronization point with GC transactions. Add
    GC sequence number hence any GC transaction losing race will be
    discarded.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc0b1f019554e601f57e78d8f5c70e59d77e49a5
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:10 2023 +0200

    netfilter: nf_tables: GC transaction race with netns dismantle
    
    commit 02c6c24402bf1c1e986899c14ba22a10b510916b upstream.
    
    Use maybe_get_net() since GC workqueue might race with netns exit path.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4046f2b56e5a7ba7e123ff961dd51187b8d59e78
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:09 2023 +0200

    netfilter: nf_tables: fix GC transaction races with netns and netlink event exit path
    
    commit 6a33d8b73dfac0a41f3877894b38082bd0c9a5bc upstream.
    
    Netlink event path is missing a synchronization point with GC
    transactions. Add GC sequence number update to netns release path and
    netlink event path, any GC transaction losing race will be discarded.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 891ca5dfe3b718b441fc786014a7ba8f517da188
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 19:01:08 2023 +0200

    netfilter: nf_tables: don't fail inserts if duplicate has expired
    
    commit 7845914f45f066497ac75b30c50dbc735e84e884 upstream.
    
    nftables selftests fail:
    run-tests.sh testcases/sets/0044interval_overlap_0
    Expected: 0-2 . 0-3, got:
    W: [FAILED]     ./testcases/sets/0044interval_overlap_0: got 1
    
    Insertion must ignore duplicate but expired entries.
    
    Moreover, there is a strange asymmetry in nft_pipapo_activate:
    
    It refetches the current element, whereas the other ->activate callbacks
    (bitmap, hash, rhash, rbtree) use elem->priv.
    Same for .remove: other set implementations take elem->priv,
    nft_pipapo_remove fetches elem->priv, then does a relookup,
    remove this.
    
    I suspect this was the reason for the change that prompted the
    removal of the expired check in pipapo_get() in the first place,
    but skipping exired elements there makes no sense to me, this helper
    is used for normal get requests, insertions (duplicate check)
    and deactivate callback.
    
    In first two cases expired elements must be skipped.
    
    For ->deactivate(), this gets called for DELSETELEM, so it
    seems to me that expired elements should be skipped as well, i.e.
    delete request should fail with -ENOENT error.
    
    Fixes: 24138933b97b ("netfilter: nf_tables: don't skip expired elements during walk")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 911dd3cdf1083f4c2e7df72aaab486a1d6dbcc0a
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:07 2023 +0200

    netfilter: nf_tables: remove busy mark and gc batch API
    
    commit a2dd0233cbc4d8a0abb5f64487487ffc9265beb5 upstream.
    
    Ditch it, it has been replace it by the GC transaction API and it has no
    clients anymore.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77046cb00850e35ba935944b5100996b2ce34bba
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:06 2023 +0200

    netfilter: nft_set_hash: mark set element as dead when deleting from packet path
    
    commit c92db3030492b8ad1d0faace7a93bbcf53850d0c upstream.
    
    Set on the NFT_SET_ELEM_DEAD_BIT flag on this element, instead of
    performing element removal which might race with an ongoing transaction.
    Enable gc when dynamic flag is set on since dynset deletion requires
    garbage collection after this patch.
    
    Fixes: d0a8d877da97 ("netfilter: nft_dynset: support for element deletion")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 146c76866795553dbc19998f36718d7986ad302b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:05 2023 +0200

    netfilter: nf_tables: adapt set backend to use GC transaction API
    
    commit f6c383b8c31a93752a52697f8430a71dcbc46adf upstream.
    
    Use the GC transaction API to replace the old and buggy gc API and the
    busy mark approach.
    
    No set elements are removed from async garbage collection anymore,
    instead the _DEAD bit is set on so the set element is not visible from
    lookup path anymore. Async GC enqueues transaction work that might be
    aborted and retried later.
    
    rbtree and pipapo set backends does not set on the _DEAD bit from the
    sync GC path since this runs in control plane path where mutex is held.
    In this case, set elements are deactivated, removed and then released
    via RCU callback, sync GC never fails.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Fixes: 8d8540c4f5e0 ("netfilter: nft_set_rbtree: add timeout support")
    Fixes: 9d0982927e79 ("netfilter: nft_hash: add support for timeouts")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 448be0774882f95a74fa5eb7519761152add601b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:04 2023 +0200

    netfilter: nf_tables: GC transaction API to avoid race with control plane
    
    commit 5f68718b34a531a556f2f50300ead2862278da26 upstream.
    
    The set types rhashtable and rbtree use a GC worker to reclaim memory.
    From system work queue, in periodic intervals, a scan of the table is
    done.
    
    The major caveat here is that the nft transaction mutex is not held.
    This causes a race between control plane and GC when they attempt to
    delete the same element.
    
    We cannot grab the netlink mutex from the work queue, because the
    control plane has to wait for the GC work queue in case the set is to be
    removed, so we get following deadlock:
    
       cpu 1                                cpu2
         GC work                            transaction comes in , lock nft mutex
           `acquire nft mutex // BLOCKS
                                            transaction asks to remove the set
                                            set destruction calls cancel_work_sync()
    
    cancel_work_sync will now block forever, because it is waiting for the
    mutex the caller already owns.
    
    This patch adds a new API that deals with garbage collection in two
    steps:
    
    1) Lockless GC of expired elements sets on the NFT_SET_ELEM_DEAD_BIT
       so they are not visible via lookup. Annotate current GC sequence in
       the GC transaction. Enqueue GC transaction work as soon as it is
       full. If ruleset is updated, then GC transaction is aborted and
       retried later.
    
    2) GC work grabs the mutex. If GC sequence has changed then this GC
       transaction lost race with control plane, abort it as it contains
       stale references to objects and let GC try again later. If the
       ruleset is intact, then this GC transaction deactivates and removes
       the elements and it uses call_rcu() to destroy elements.
    
    Note that no elements are removed from GC lockless path, the _DEAD bit
    is set and pointers are collected. GC catchall does not remove the
    elements anymore too. There is a new set->dead flag that is set on to
    abort the GC transaction to deal with set->ops->destroy() path which
    removes the remaining elements in the set from commit_release, where no
    mutex is held.
    
    To deal with GC when mutex is held, which allows safe deactivate and
    removal, add sync GC API which releases the set element object via
    call_rcu(). This is used by rbtree and pipapo backends which also
    perform garbage collection from control plane path.
    
    Since element removal from sets can happen from control plane and
    element garbage collection/timeout, it is necessary to keep the set
    structure alive until all elements have been deactivated and destroyed.
    
    We cannot do a cancel_work_sync or flush_work in nft_set_destroy because
    its called with the transaction mutex held, but the aforementioned async
    work queue might be blocked on the very mutex that nft_set_destroy()
    callchain is sitting on.
    
    This gives us the choice of ABBA deadlock or UaF.
    
    To avoid both, add set->refs refcount_t member. The GC API can then
    increment the set refcount and release it once the elements have been
    free'd.
    
    Set backends are adapted to use the GC transaction API in a follow up
    patch entitled:
    
      ("netfilter: nf_tables: use gc transaction API in set backends")
    
    This is joint work with Florian Westphal.
    
    Fixes: cfed7e1b1f8e ("netfilter: nf_tables: add set garbage collection helpers")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b15ea4017af82011dd55225ce77cce3d4dfc169c
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 19:01:03 2023 +0200

    netfilter: nf_tables: don't skip expired elements during walk
    
    commit 24138933b97b055d486e8064b4a1721702442a9b upstream.
    
    There is an asymmetry between commit/abort and preparation phase if the
    following conditions are met:
    
    1. set is a verdict map ("1.2.3.4 : jump foo")
    2. timeouts are enabled
    
    In this case, following sequence is problematic:
    
    1. element E in set S refers to chain C
    2. userspace requests removal of set S
    3. kernel does a set walk to decrement chain->use count for all elements
       from preparation phase
    4. kernel does another set walk to remove elements from the commit phase
       (or another walk to do a chain->use increment for all elements from
        abort phase)
    
    If E has already expired in 1), it will be ignored during list walk, so its use count
    won't have been changed.
    
    Then, when set is culled, ->destroy callback will zap the element via
    nf_tables_set_elem_destroy(), but this function is only safe for
    elements that have been deactivated earlier from the preparation phase:
    lack of earlier deactivate removes the element but leaks the chain use
    count, which results in a WARN splat when the chain gets removed later,
    plus a leak of the nft_chain structure.
    
    Update pipapo_get() not to skip expired elements, otherwise flush
    command reports bogus ENOENT errors.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Fixes: 8d8540c4f5e0 ("netfilter: nft_set_rbtree: add timeout support")
    Fixes: 9d0982927e79 ("netfilter: nft_hash: add support for timeouts")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8bf7706151a8d41c3107fc1ac37818a87b6afcd
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 19:01:02 2023 +0200

    netfilter: nf_tables: integrate pipapo into commit protocol
    
    commit 212ed75dc5fb9d1423b3942c8f872a868cda3466 upstream.
    
    The pipapo set backend follows copy-on-update approach, maintaining one
    clone of the existing datastructure that is being updated. The clone
    and current datastructures are swapped via rcu from the commit step.
    
    The existing integration with the commit protocol is flawed because
    there is no operation to clean up the clone if the transaction is
    aborted. Moreover, the datastructure swap happens on set element
    activation.
    
    This patch adds two new operations for sets: commit and abort, these new
    operations are invoked from the commit and abort steps, after the
    transactions have been digested, and it updates the pipapo set backend
    to use it.
    
    This patch adds a new ->pending_update field to sets to maintain a list
    of sets that require this new commit and abort operations.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b65bff30a61ee538b197fd147135b687b915b4d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Sep 6 22:47:16 2023 -0400

    tracing: Have event inject files inc the trace array ref count
    
    [ Upstream commit e5c624f027ac74f97e97c8f36c69228ac9f1102d ]
    
    The event inject files add events for a specific trace array. For an
    instance, if the file is opened and the instance is deleted, reading or
    writing to the file will cause a use after free.
    
    Up the ref count of the trace_array when a event inject file is opened.
    
    Link: https://lkml.kernel.org/r/20230907024804.292337868@goodmis.org
    Link: https://lore.kernel.org/all/1cb3aee2-19af-c472-e265-05176fe9bd84@huawei.com/
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Zheng Yejian <zhengyejian1@huawei.com>
    Fixes: 6c3edaf9fd6a ("tracing: Introduce trace event injection")
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8a86ab3c4a4acde551aaa86776a55cbba2d4a53
Author: Jan Kara <jack@suse.cz>
Date:   Wed Sep 13 17:04:55 2023 +0200

    ext4: do not let fstrim block system suspend
    
    [ Upstream commit 5229a658f6453362fbb9da6bf96872ef25a7097e ]
    
    Len Brown has reported that system suspend sometimes fail due to
    inability to freeze a task working in ext4_trim_fs() for one minute.
    Trimming a large filesystem on a disk that slowly processes discard
    requests can indeed take a long time. Since discard is just an advisory
    call, it is perfectly fine to interrupt it at any time and the return
    number of discarded blocks until that moment. Do that when we detect the
    task is being frozen.
    
    Cc: stable@kernel.org
    Reported-by: Len Brown <lenb@kernel.org>
    Suggested-by: Dave Chinner <david@fromorbit.com>
    References: https://bugzilla.kernel.org/show_bug.cgi?id=216322
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230913150504.9054-2-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c502b09d9befc39b483ec9e8dfb54754d594b779
Author: Jan Kara <jack@suse.cz>
Date:   Wed Sep 13 17:04:54 2023 +0200

    ext4: move setting of trimmed bit into ext4_try_to_trim_range()
    
    [ Upstream commit 45e4ab320c9b5fa67b1fc3b6a9b381cfcc0c8488 ]
    
    Currently we set the group's trimmed bit in ext4_trim_all_free() based
    on return value of ext4_try_to_trim_range(). However when we will want
    to abort trimming because of suspend attempt, we want to return success
    from ext4_try_to_trim_range() but not set the trimmed bit. Instead
    implementing awkward propagation of this information, just move setting
    of trimmed bit into ext4_try_to_trim_range() when the whole group is
    trimmed.
    
    Cc: stable@kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230913150504.9054-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e78e9f08a24e2fdc3dd23a8c03ff12860a46aa2d
Author: Kemeng Shi <shikemeng@huaweicloud.com>
Date:   Tue Aug 1 22:32:00 2023 +0800

    ext4: replace the traditional ternary conditional operator with with max()/min()
    
    [ Upstream commit de8bf0e5ee7482585450357c6d4eddec8efc5cb7 ]
    
    Replace the traditional ternary conditional operator with with max()/min()
    
    Signed-off-by: Kemeng Shi <shikemeng@huaweicloud.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20230801143204.2284343-7-shikemeng@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbf6a0f65404baa967806ac7ef402297dc88333c
Author: Dmitry Monakhov <dmtrmonakhov@yandex-team.ru>
Date:   Sun Apr 17 20:03:15 2022 +0300

    ext4: mark group as trimmed only if it was fully scanned
    
    [ Upstream commit d63c00ea435a5352f486c259665a4ced60399421 ]
    
    Otherwise nonaligned fstrim calls will works inconveniently for iterative
    scanners, for example:
    
    // trim [0,16MB] for group-1, but mark full group as trimmed
    fstrim  -o $((1024*1024*128)) -l $((1024*1024*16)) ./m
    // handle [16MB,16MB] for group-1, do nothing because group already has the flag.
    fstrim  -o $((1024*1024*144)) -l $((1024*1024*16)) ./m
    
    [ Update function documentation for ext4_trim_all_free -- TYT ]
    
    Signed-off-by: Dmitry Monakhov <dmtrmonakhov@yandex-team.ru>
    Link: https://lore.kernel.org/r/1650214995-860245-1-git-send-email-dmtrmonakhov@yandex-team.ru
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eaf4a1e06cf80240f7b62858eacc703ca500dba
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Wed Nov 3 15:51:21 2021 +0100

    ext4: change s_last_trim_minblks type to unsigned long
    
    [ Upstream commit 2327fb2e23416cfb2795ccca2f77d4d65925be99 ]
    
    There is no good reason for the s_last_trim_minblks to be atomic. There is
    no data integrity needed and there is no real danger in setting and
    reading it in a racy manner. Change it to be unsigned long, the same type
    as s_clusters_per_group which is the maximum that's allowed.
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Suggested-by: Andreas Dilger <adilger@dilger.ca>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20211103145122.17338-1-lczerner@redhat.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24a86315a3533d3c5fc6efcf56635484970561ee
Author: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date:   Fri Aug 20 14:08:53 2021 +0200

    ext4: scope ret locally in ext4_try_to_trim_range()
    
    [ Upstream commit afcc4e32f606dbfb47aa7309172c89174b86e74c ]
    
    As commit 6920b3913235 ("ext4: add new helper interface
    ext4_try_to_trim_range()") moves some code into the separate function
    ext4_try_to_trim_range(), the use of the variable ret within that
    function is more limited and can be adjusted as well.
    
    Scope the use of the variable ret locally and drop dead assignments.
    
    No functional change.
    
    Signed-off-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Link: https://lore.kernel.org/r/20210820120853.23134-1-lukas.bulwahn@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da1895f731f3d1fb7d79c3812d88ef1beadd30f2
Author: Wang Jianchao <wangjianchao@kuaishou.com>
Date:   Sat Jul 24 15:41:21 2021 +0800

    ext4: add new helper interface ext4_try_to_trim_range()
    
    [ Upstream commit 6920b3913235f517728bb69abe9b39047a987113 ]
    
    There is no functional change in this patch but just split the
    codes, which serachs free block and does trim, into a new function
    ext4_try_to_trim_range. This is preparing for the following async
    backgroup discard.
    
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Wang Jianchao <wangjianchao@kuaishou.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20210724074124.25731-3-jianchao.wan9@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f5fc957dfb7b2665c8b82c400dec3a38e961a9a
Author: Wang Jianchao <wangjianchao@kuaishou.com>
Date:   Sat Jul 24 15:41:20 2021 +0800

    ext4: remove the 'group' parameter of ext4_trim_extent
    
    [ Upstream commit bd2eea8d0a6b6a9aca22f20bf74f73b71d8808af ]
    
    Get rid of the 'group' parameter of ext4_trim_extent as we can get
    it from the 'e4b'.
    
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Wang Jianchao <wangjianchao@kuaishou.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20210724074124.25731-2-jianchao.wan9@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69c966583022fc3d1e52da717d9942a55907bff4
Author: Szuying Chen <chensiying21@gmail.com>
Date:   Thu Sep 7 16:17:10 2023 +0800

    ata: libahci: clear pending interrupt status
    
    [ Upstream commit 737dd811a3dbfd7edd4ad2ba5152e93d99074f83 ]
    
    When a CRC error occurs, the HBA asserts an interrupt to indicate an
    interface fatal error (PxIS.IFS). The ISR clears PxIE and PxIS, then
    does error recovery. If the adapter receives another SDB FIS
    with an error (PxIS.TFES) from the device before the start of the EH
    recovery process, the interrupt signaling the new SDB cannot be
    serviced as PxIE was cleared already. This in turn results in the HBA
    inability to issue any command during the error recovery process after
    setting PxCMD.ST to 1 because PxIS.TFES is still set.
    
    According to AHCI 1.3.1 specifications section 6.2.2, fatal errors
    notified by setting PxIS.HBFS, PxIS.HBDS, PxIS.IFS or PxIS.TFES will
    cause the HBA to enter the ERR:Fatal state. In this state, the HBA
    shall not issue any new commands.
    
    To avoid this situation, introduce the function
    ahci_port_clear_pending_irq() to clear pending interrupts before
    executing a COMRESET. This follows the AHCI 1.3.1 - section 6.2.2.2
    specification.
    
    Signed-off-by: Szuying Chen <Chloe_Chen@asmedia.com.tw>
    Fixes: e0bfd149973d ("[PATCH] ahci: stop engine during hard reset")
    Cc: stable@vger.kernel.org
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11d15a115c905034cd6842d55158ca60cb9e39ff
Author: Hannes Reinecke <hare@suse.de>
Date:   Tue Dec 21 08:20:47 2021 +0100

    ata: ahci: Drop pointless VPRINTK() calls and convert the remaining ones
    
    [ Upstream commit 93c7711494f47f9c829321e2a8711671b02f6e4c ]
    
    Drop pointless VPRINTK() calls for entering and existing interrupt
    routines and convert the remaining calls to dev_dbg().
    
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 737dd811a3db ("ata: libahci: clear pending interrupt status")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 407bf1c140f0757706c0b28604bcc90837d45ce2
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Sep 6 22:47:12 2023 -0400

    tracing: Increase trace array ref count on enable and filter files
    
    [ Upstream commit f5ca233e2e66dc1c249bf07eefa37e34a6c9346a ]
    
    When the trace event enable and filter files are opened, increment the
    trace array ref counter, otherwise they can be accessed when the trace
    array is being deleted. The ref counter keeps the trace array from being
    deleted while those files are opened.
    
    Link: https://lkml.kernel.org/r/20230907024803.456187066@goodmis.org
    Link: https://lore.kernel.org/all/1cb3aee2-19af-c472-e265-05176fe9bd84@huawei.com/
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: 8530dec63e7b4 ("tracing: Add tracing_check_open_get_tr()")
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Reported-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f7df02fa0d4c688ecd073e9612f52f5532d0b46
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Sep 4 12:50:09 2023 -0400

    SUNRPC: Mark the cred for revalidation if the server rejects it
    
    [ Upstream commit 611fa42dfa9d2f3918ac5f4dd5705dfad81b323d ]
    
    If the server rejects the credential as being stale, or bad, then we
    should mark it for revalidation before retransmitting.
    
    Fixes: 7f5667a5f8c4 ("SUNRPC: Clean up rpc_verify_header()")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25ae2b2fdb1239a90f42933a0f75f868d271bd98
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Sep 4 12:43:58 2023 -0400

    NFS/pNFS: Report EINVAL errors from connect() to the server
    
    [ Upstream commit dd7d7ee3ba2a70d12d02defb478790cf57d5b87b ]
    
    With IPv6, connect() can occasionally return EINVAL if a route is
    unavailable. If this happens during I/O to a data server, we want to
    report it using LAYOUTERROR as an inability to connect.
    
    Fixes: dd52128afdde ("NFSv4.1/pnfs Ensure flexfiles reports all connection related errors")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26db22a6397b62b34d4e8abecc56d54496a0ec32
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Sep 4 12:34:40 2023 -0400

    NFS: Use the correct commit info in nfs_join_page_group()
    
    [ Upstream commit b193a78ddb5ee7dba074d3f28dc050069ba083c0 ]
    
    Ensure that nfs_clear_request_commit() updates the correct counters when
    it removes them from the commit list.
    
    Fixes: ed5d588fe47f ("NFS: Try to join page groups before an O_DIRECT retransmission")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

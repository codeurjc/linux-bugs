commit 851c2b5fb7936d54e1147f76f88e2675f9f82b52
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Dec 19 12:24:17 2022 +0100

    Linux 5.4.228
    
    Link: https://lore.kernel.org/r/20221215172905.468656378@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff484a9ba4498b8fb89d055136a32b3e9288aa5a
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Fri Nov 25 16:23:47 2022 +0000

    ASoC: ops: Correct bounds check for second channel on SX controls
    
    commit f33bcc506050f89433a52a3052054d4ebd37b1c1 upstream.
    
    Currently the check against the max value for the control is being
    applied after the value has had the minimum applied and been masked. But
    the max value simply indicates the number of volume levels on an SX
    control, and as such should just be applied on the raw value.
    
    Fixes: 97eea946b939 ("ASoC: ops: Check bounds for second channel in snd_soc_put_volsw_sx()")
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221125162348.1288005-1-ckeepax@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d4aa092996303e04cfd32ff2dc58ea3cb36d114
Author: Yasushi SHOJI <yasushi.shoji@gmail.com>
Date:   Fri Nov 25 00:25:03 2022 +0900

    can: mcba_usb: Fix termination command argument
    
    [ Upstream commit 1a8e3bd25f1e789c8154e11ea24dc3ec5a4c1da0 ]
    
    Microchip USB Analyzer can activate the internal termination resistors
    by setting the "termination" option ON, or OFF to to deactivate them.
    As I've observed, both with my oscilloscope and captured USB packets
    below, you must send "0" to turn it ON, and "1" to turn it OFF.
    
    From the schematics in the user's guide, I can confirm that you must
    drive the CAN_RES signal LOW "0" to activate the resistors.
    
    Reverse the argument value of usb_msg.termination to fix this.
    
    These are the two commands sequence, ON then OFF.
    
    > No.     Time           Source                Destination           Protocol Length Info
    >       1 0.000000       host                  1.3.1                 USB      46     URB_BULK out
    >
    > Frame 1: 46 bytes on wire (368 bits), 46 bytes captured (368 bits)
    > USB URB
    > Leftover Capture Data: a80000000000000000000000000000000000a8
    >
    > No.     Time           Source                Destination           Protocol Length Info
    >       2 4.372547       host                  1.3.1                 USB      46     URB_BULK out
    >
    > Frame 2: 46 bytes on wire (368 bits), 46 bytes captured (368 bits)
    > USB URB
    > Leftover Capture Data: a80100000000000000000000000000000000a9
    
    Signed-off-by: Yasushi SHOJI <yashi@spacecubics.com>
    Link: https://lore.kernel.org/all/20221124152504.125994-1-yashi@spacecubics.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f843fdcac054800774db4069418f5ba7b2cf456e
Author: Heiko Schocher <hs@denx.de>
Date:   Wed Nov 23 08:16:36 2022 +0100

    can: sja1000: fix size of OCR_MODE_MASK define
    
    [ Upstream commit 26e8f6a75248247982458e8237b98c9fb2ffcf9d ]
    
    bitfield mode in ocr register has only 2 bits not 3, so correct
    the OCR_MODE_MASK define.
    
    Signed-off-by: Heiko Schocher <hs@denx.de>
    Link: https://lore.kernel.org/all/20221123071636.2407823-1-hs@denx.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b439b12d105073ab64ac9b0a7700207a43d208c6
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Tue Nov 22 00:38:55 2022 +0100

    pinctrl: meditatek: Startup with the IRQs disabled
    
    [ Upstream commit 11780e37565db4dd064d3243ca68f755c13f65b4 ]
    
    If the system is restarted via kexec(), the peripherals do not start
    with a known state.
    
    If the previous system had enabled an IRQs we will receive unexected
    IRQs that can lock the system.
    
    [   28.109251] watchdog: BUG: soft lockup - CPU#0 stuck for 26s!
    [swapper/0:0]
    [   28.109263] Modules linked in:
    [   28.109273] CPU: 0 PID: 0 Comm: swapper/0 Not tainted
    5.15.79-14458-g4b9edf7b1ac6 #1 9f2e76613148af94acccd64c609a552fb4b4354b
    [   28.109284] Hardware name: Google Elm (DT)
    [   28.109290] pstate: 40400005 (nZcv daif +PAN -UAO -TCO -DIT -SSBS
                    BTYPE=--)
    [   28.109298] pc : __do_softirq+0xa0/0x388
    [   28.109309] lr : __do_softirq+0x70/0x388
    [   28.109316] sp : ffffffc008003ee0
    [   28.109321] x29: ffffffc008003f00 x28: 000000000000000a x27:
    0000000000000080
    [   28.109334] x26: 0000000000000001 x25: ffffffefa7b350c0 x24:
    ffffffefa7b47480
    [   28.109346] x23: ffffffefa7b3d000 x22: 0000000000000000 x21:
    ffffffefa7b0fa40
    [   28.109358] x20: ffffffefa7b005b0 x19: ffffffefa7b47480 x18:
    0000000000065b6b
    [   28.109370] x17: ffffffefa749c8b0 x16: 000000000000018c x15:
    00000000000001b8
    [   28.109382] x14: 00000000000d3b6b x13: 0000000000000006 x12:
    0000000000057e91
    [   28.109394] x11: 0000000000000000 x10: 0000000000000000 x9 :
    ffffffefa7b47480
    [   28.109406] x8 : 00000000000000e0 x7 : 000000000f424000 x6 :
    0000000000000000
    [   28.109418] x5 : ffffffefa7dfaca0 x4 : ffffffefa7dfadf0 x3 :
    000000000000000f
    [   28.109429] x2 : 0000000000000000 x1 : 0000000000000100 x0 :
    0000000001ac65c5
    [   28.109441] Call trace:
    [   28.109447]  __do_softirq+0xa0/0x388
    [   28.109454]  irq_exit+0xc0/0xe0
    [   28.109464]  handle_domain_irq+0x68/0x90
    [   28.109473]  gic_handle_irq+0xac/0xf0
    [   28.109480]  call_on_irq_stack+0x28/0x50
    [   28.109488]  do_interrupt_handler+0x44/0x58
    [   28.109496]  el1_interrupt+0x30/0x58
    [   28.109506]  el1h_64_irq_handler+0x18/0x24
    [   28.109512]  el1h_64_irq+0x7c/0x80
    [   28.109519]  arch_local_irq_enable+0xc/0x18
    [   28.109529]  default_idle_call+0x40/0x140
    [   28.109539]  do_idle+0x108/0x290
    [   28.109547]  cpu_startup_entry+0x2c/0x30
    [   28.109554]  rest_init+0xe8/0xf8
    [   28.109562]  arch_call_rest_init+0x18/0x24
    [   28.109571]  start_kernel+0x338/0x42c
    [   28.109578]  __primary_switched+0xbc/0xc4
    [   28.109588] Kernel panic - not syncing: softlockup: hung tasks
    
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Link: https://lore.kernel.org/r/20221122-mtk-pinctrl-v1-1-bedf5655a3d2@chromium.org
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9796d07c753164b7e6b0d7ef23fb4482840a9ef8
Author: Mark Brown <broonie@kernel.org>
Date:   Wed May 11 14:41:37 2022 +0100

    ASoC: ops: Check bounds for second channel in snd_soc_put_volsw_sx()
    
    [ Upstream commit 97eea946b93961fffd29448dcda7398d0d51c4b2 ]
    
    The bounds checks in snd_soc_put_volsw_sx() are only being applied to the
    first channel, meaning it is possible to write out of bounds values to the
    second channel in stereo controls. Add appropriate checks.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20220511134137.169575-2-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c837460f920a63165961d2b88b425703f59affb
Author: Jialiang Wang <wangjialiang0806@163.com>
Date:   Wed Aug 10 15:30:57 2022 +0800

    nfp: fix use-after-free in area_cache_get()
    
    commit 02e1a114fdb71e59ee6770294166c30d437bf86a upstream.
    
    area_cache_get() is used to distribute cache->area and set cache->id,
     and if cache->id is not 0 and cache->area->kref refcount is 0, it will
     release the cache->area by nfp_cpp_area_release(). area_cache_get()
     set cache->id before cpp->op->area_init() and nfp_cpp_area_acquire().
    
    But if area_init() or nfp_cpp_area_acquire() fails, the cache->id is
     is already set but the refcount is not increased as expected. At this
     time, calling the nfp_cpp_area_release() will cause use-after-free.
    
    To avoid the use-after-free, set cache->id after area_init() and
     nfp_cpp_area_acquire() complete successfully.
    
    Note: This vulnerability is triggerable by providing emulated device
     equipped with specified configuration.
    
     BUG: KASAN: use-after-free in nfp6000_area_init (drivers/net/ethernet/netronome/nfp/nfpcore/nfp6000_pcie.c:760)
      Write of size 4 at addr ffff888005b7f4a0 by task swapper/0/1
    
     Call Trace:
      <TASK>
     nfp6000_area_init (drivers/net/ethernet/netronome/nfp/nfpcore/nfp6000_pcie.c:760)
     area_cache_get.constprop.8 (drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c:884)
    
     Allocated by task 1:
     nfp_cpp_area_alloc_with_name (drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c:303)
     nfp_cpp_area_cache_add (drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c:802)
     nfp6000_init (drivers/net/ethernet/netronome/nfp/nfpcore/nfp6000_pcie.c:1230)
     nfp_cpp_from_operations (drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c:1215)
     nfp_pci_probe (drivers/net/ethernet/netronome/nfp/nfp_main.c:744)
    
     Freed by task 1:
     kfree (mm/slub.c:4562)
     area_cache_get.constprop.8 (drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c:873)
     nfp_cpp_read (drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c:924 drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c:973)
     nfp_cpp_readl (drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cpplib.c:48)
    
    Signed-off-by: Jialiang Wang <wangjialiang0806@163.com>
    Reviewed-by: Yinjun Zhang <yinjun.zhang@corigine.com>
    Acked-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20220810073057.4032-1-wangjialiang0806@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a40c3c9ae58f39b007fc72f78bb6d57de28dd099
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Dec 13 15:16:03 2022 +0800

    block: unhash blkdev part inode when the part is deleted
    
    v5.11 changes the blkdev lookup mechanism completely since commit
    22ae8ce8b892 ("block: simplify bdev/disk lookup in blkdev_get"),
    and small part of the change is to unhash part bdev inode when
    deleting partition. Turns out this kind of change does fix one
    nasty issue in case of BLOCK_EXT_MAJOR:
    
    1) when one partition is deleted & closed, disk_put_part() is always
    called before bdput(bdev), see blkdev_put(); so the part's devt can
    be freed & re-used before the inode is dropped
    
    2) then new partition with same devt can be created just before the
    inode in 1) is dropped, then the old inode/bdev structurein 1) is
    re-used for this new partition, this way causes use-after-free and
    kernel panic.
    
    It isn't possible to backport the whole big patchset of "merge struct
    block_device and struct hd_struct v4" for addressing this issue.
    
    https://lore.kernel.org/linux-block/20201128161510.347752-1-hch@lst.de/
    
    So fixes it by unhashing part bdev in delete_partition(), and this way
    is actually aligned with v5.11+'s behavior.
    
    Backported from the following 5.10.y commit:
    
    5f2f77560591 ("block: unhash blkdev part inode when the part is deleted")
    
    Reported-by: Shiwei Cui <cuishw@inspur.com>
    Tested-by: Shiwei Cui <cuishw@inspur.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 176ba4c19d1bb153aa6baaa61d586e785b7d736c
Author: Baolin Wang <baolin.wang@linux.alibaba.com>
Date:   Thu Sep 1 18:41:31 2022 +0800

    mm/hugetlb: fix races when looking up a CONT-PTE/PMD size hugetlb page
    
    commit fac35ba763ed07ba93154c95ffc0c4a55023707f upstream.
    
    On some architectures (like ARM64), it can support CONT-PTE/PMD size
    hugetlb, which means it can support not only PMD/PUD size hugetlb (2M and
    1G), but also CONT-PTE/PMD size(64K and 32M) if a 4K page size specified.
    
    So when looking up a CONT-PTE size hugetlb page by follow_page(), it will
    use pte_offset_map_lock() to get the pte entry lock for the CONT-PTE size
    hugetlb in follow_page_pte().  However this pte entry lock is incorrect
    for the CONT-PTE size hugetlb, since we should use huge_pte_lock() to get
    the correct lock, which is mm->page_table_lock.
    
    That means the pte entry of the CONT-PTE size hugetlb under current pte
    lock is unstable in follow_page_pte(), we can continue to migrate or
    poison the pte entry of the CONT-PTE size hugetlb, which can cause some
    potential race issues, even though they are under the 'pte lock'.
    
    For example, suppose thread A is trying to look up a CONT-PTE size hugetlb
    page by move_pages() syscall under the lock, however antoher thread B can
    migrate the CONT-PTE hugetlb page at the same time, which will cause
    thread A to get an incorrect page, if thread A also wants to do page
    migration, then data inconsistency error occurs.
    
    Moreover we have the same issue for CONT-PMD size hugetlb in
    follow_huge_pmd().
    
    To fix above issues, rename the follow_huge_pmd() as follow_huge_pmd_pte()
    to handle PMD and PTE level size hugetlb, which uses huge_pte_lock() to
    get the correct pte entry lock to make the pte entry stable.
    
    Mike said:
    
    Support for CONT_PMD/_PTE was added with bb9dd3df8ee9 ("arm64: hugetlb:
    refactor find_num_contig()").  Patch series "Support for contiguous pte
    hugepages", v4.  However, I do not believe these code paths were
    executed until migration support was added with 5480280d3f2d ("arm64/mm:
    enable HugeTLB migration for contiguous bit HugeTLB pages") I would go
    with 5480280d3f2d for the Fixes: targe.
    
    Link: https://lkml.kernel.org/r/635f43bdd85ac2615a58405da82b4d33c6e5eb05.1662017562.git.baolin.wang@linux.alibaba.com
    Fixes: 5480280d3f2d ("arm64/mm: enable HugeTLB migration for contiguous bit HugeTLB pages")
    Signed-off-by: Baolin Wang <baolin.wang@linux.alibaba.com>
    Suggested-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    [5.4: Fixup contextual diffs before pin_user_pages()]
    Signed-off-by: Samuel Mendoza-Jonas <samjonas@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69d4f3baa6941d1abbe01aa8fb9cb03a90d380a0
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Oct 20 21:13:55 2020 -0700

    x86/smpboot: Move rcu_cpu_starting() earlier
    
    commit 29368e09392123800e5e2bf0f3eda91f16972e52 upstream.
    
    The call to rcu_cpu_starting() in mtrr_ap_init() is not early enough
    in the CPU-hotplug onlining process, which results in lockdep splats
    as follows:
    
    =============================
    WARNING: suspicious RCU usage
    5.9.0+ #268 Not tainted
    -----------------------------
    kernel/kprobes.c:300 RCU-list traversed in non-reader section!!
    
    other info that might help us debug this:
    
    RCU used illegally from offline CPU!
    rcu_scheduler_active = 1, debug_locks = 1
    no locks held by swapper/1/0.
    
    stack backtrace:
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.9.0+ #268
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     dump_stack+0x77/0x97
     __is_insn_slot_addr+0x15d/0x170
     kernel_text_address+0xba/0xe0
     ? get_stack_info+0x22/0xa0
     __kernel_text_address+0x9/0x30
     show_trace_log_lvl+0x17d/0x380
     ? dump_stack+0x77/0x97
     dump_stack+0x77/0x97
     __lock_acquire+0xdf7/0x1bf0
     lock_acquire+0x258/0x3d0
     ? vprintk_emit+0x6d/0x2c0
     _raw_spin_lock+0x27/0x40
     ? vprintk_emit+0x6d/0x2c0
     vprintk_emit+0x6d/0x2c0
     printk+0x4d/0x69
     start_secondary+0x1c/0x100
     secondary_startup_64_no_verify+0xb8/0xbb
    
    This is avoided by moving the call to rcu_cpu_starting up near
    the beginning of the start_secondary() function.  Note that the
    raw_smp_processor_id() is required in order to avoid calling into lockdep
    before RCU has declared the CPU to be watched for readers.
    
    Link: https://lore.kernel.org/lkml/160223032121.7002.1269740091547117869.tip-bot2@tip-bot2/
    Reported-by: Qian Cai <cai@redhat.com>
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Cc: Joel Fernandes <joel@joelfernandes.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1988bf2bba372463c71f21176d89ff3554aaf1e
Author: Lorenzo Colitti <lorenzo@google.com>
Date:   Mon Apr 20 11:34:08 2020 -0700

    net: bpf: Allow TC programs to call BPF_FUNC_skb_change_head
    
    commit 6f3f65d80dac8f2bafce2213005821fccdce194c upstream.
    
    This allows TC eBPF programs to modify and forward (redirect) packets
    from interfaces without ethernet headers (for example cellular)
    to interfaces with (for example ethernet/wifi).
    
    The lack of this appears to simply be an oversight.
    
    Tested:
      in active use in Android R on 4.14+ devices for ipv6
      cellular to wifi tethering offload.
    
    Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0102425ac76bd184704c698cab7cb4fe37997556
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Apr 13 16:55:40 2023 +0200

    Linux 6.1.24
    
    Link: https://lore.kernel.org/r/20230412082836.695875037@linuxfoundation.org
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Markus Reichelt <lkt+2023@mareichelt.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Slade Watkins <srw@sladewatkins.net =
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77e41187a3875ef747868ff19646a41375f2f508
Author: Eduard Zingerman <eddyz87@gmail.com>
Date:   Sat Oct 1 13:44:24 2022 +0300

    bpftool: Print newline before '}' for struct with padding only fields
    
    [ Upstream commit 44a726c3f23cf762ef4ce3c1709aefbcbe97f62c ]
    
    btf_dump_emit_struct_def attempts to print empty structures at a
    single line, e.g. `struct empty {}`. However, it has to account for a
    case when there are no regular but some padding fields in the struct.
    In such case `vlen` would be zero, but size would be non-zero.
    
    E.g. here is struct bpf_timer from vmlinux.h before this patch:
    
     struct bpf_timer {
            long: 64;
            long: 64;};
    
    And after this patch:
    
     struct bpf_dynptr {
            long: 64;
            long: 64;
     };
    
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20221001104425.415768-1-eddyz87@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c87a6f82a4e9bb8074a596c0acdc39ef9334473
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:55 2023 -0400

    mm: enable maple tree RCU mode by default.
    
    commit 3dd4432549415f3c65dd52d5c687629efbf4ece1 upstream.
    
    Use the maple tree in RCU mode for VMA tracking.
    
    The maple tree tracks the stack and is able to update the pivot
    (lower/upper boundary) in-place to allow the page fault handler to write
    to the tree while holding just the mmap read lock.  This is safe as the
    writes to the stack have a guard VMA which ensures there will always be
    a NULL in the direction of the growth and thus will only update a pivot.
    
    It is possible, but not recommended, to have VMAs that grow up/down
    without guard VMAs.  syzbot has constructed a testcase which sets up a
    VMA to grow and consume the empty space.  Overwriting the entire NULL
    entry causes the tree to be altered in a way that is not safe for
    concurrent readers; the readers may see a node being rewritten or one
    that does not match the maple state they are using.
    
    Enabling RCU mode allows the concurrent readers to see a stable node and
    will return the expected result.
    
    Link: https://lkml.kernel.org/r/20230227173632.3292573-9-surenb@google.com
    Cc: stable@vger.kernel.org
    Fixes: d4af56c5c7c6 ("mm: start tracking VMAs with maple tree")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Reported-by: syzbot+8d95422d3537159ca390@syzkaller.appspotmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b6627bc36aaf426f11b3531aa26d48513c68cbf
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:54 2023 -0400

    maple_tree: add RCU lock checking to rcu callback functions
    
    commit 790e1fa86b340c2bd4a327e01c161f7a1ad885f6 upstream.
    
    Dereferencing RCU objects within the RCU callback without the RCU check
    has caused lockdep to complain.  Fix the RCU dereferencing by using the
    RCU callback lock to ensure the operation is safe.
    
    Also stop creating a new lock to use for dereferencing during destruction
    of the tree or subtree.  Instead, pass through a pointer to the tree that
    has the lock that is held for RCU dereferencing checking.  It also does
    not make sense to use the maple state in the freeing scenario as the tree
    walk is a special case where the tree no longer has the normal encodings
    and parent pointers.
    
    Link: https://lkml.kernel.org/r/20230227173632.3292573-8-surenb@google.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Cc: stable@vger.kernel.org
    Reported-by: Suren Baghdasaryan <surenb@google.com>
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a29025a1b61cfe48d13dbc23e19b07507ef44054
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:53 2023 -0400

    maple_tree: add smp_rmb() to dead node detection
    
    commit 0a2b18d948838e16912b3b627b504ab062b7d02a upstream.
    
    Add an smp_rmb() before reading the parent pointer to ensure that anything
    read from the node prior to the parent pointer hasn't been reordered ahead
    of this check.
    
    The is necessary for RCU mode.
    
    Link: https://lkml.kernel.org/r/20230227173632.3292573-7-surenb@google.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Cc: stable@vger.kernel.org
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3af5f8a50dd75f4d071e00c16d9ac3f0ae3858f
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:52 2023 -0400

    maple_tree: remove extra smp_wmb() from mas_dead_leaves()
    
    commit 8372f4d83f96f35915106093cde4565836587123 upstream.
    
    The call to mte_set_dead_node() before the smp_wmb() already calls
    smp_wmb() so this is not needed.  This is an optimization for the RCU mode
    of the maple tree.
    
    Link: https://lkml.kernel.org/r/20230227173632.3292573-5-surenb@google.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Cc: stable@vger.kernel.org
    Signed-off-by: Liam Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc2f2507f3f05612c61c4b8f11bb91efbb9ad495
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:51 2023 -0400

    maple_tree: fix freeing of nodes in rcu mode
    
    commit 2e5b4921f8efc9e845f4f04741797d16f36847eb upstream.
    
    The walk to destroy the nodes was not always setting the node type and
    would result in a destroy method potentially using the values as nodes.
    Avoid this by setting the correct node types.  This is necessary for the
    RCU mode of the maple tree.
    
    Link: https://lkml.kernel.org/r/20230227173632.3292573-4-surenb@google.com
    Cc: <Stable@vger.kernel.org>
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f7c59126498f25959f81bd533af441f14ad7888
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:50 2023 -0400

    maple_tree: detect dead nodes in mas_start()
    
    commit a7b92d59c885018cb7bb88539892278e4fd64b29 upstream.
    
    When initially starting a search, the root node may already be in the
    process of being replaced in RCU mode.  Detect and restart the walk if
    this is the case.  This is necessary for RCU mode of the maple tree.
    
    Link: https://lkml.kernel.org/r/20230227173632.3292573-3-surenb@google.com
    Cc: <Stable@vger.kernel.org>
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3825e4495bccba46ec447d8444456d1fe5824580
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:49 2023 -0400

    maple_tree: refine ma_state init from mas_start()
    
    commit 46b345848261009477552d654cb2f65000c30e4d upstream.
    
    If mas->node is an MAS_START, there are three cases, and they all assign
    different values to mas->node and mas->offset.  So there is no need to set
    them to a default value before updating.
    
    Update them directly to make them easier to understand and for better
    readability.
    
    Link: https://lkml.kernel.org/r/20221221060058.609003-7-vernon2gm@gmail.com
    Cc: <Stable@vger.kernel.org>
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Vernon Yang <vernon2gm@gmail.com>
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64cb480523b46834e91f11dbcfd290af123d7d9d
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:48 2023 -0400

    maple_tree: be more cautious about dead nodes
    
    commit 39d0bd86c499ecd6abae42a9b7112056c5560691 upstream.
    
    ma_pivots() and ma_data_end() may be called with a dead node.  Ensure to
    that the node isn't dead before using the returned values.
    
    This is necessary for RCU mode of the maple tree.
    
    Link: https://lkml.kernel.org/r/20230227173632.3292573-1-surenb@google.com
    Link: https://lkml.kernel.org/r/20230227173632.3292573-2-surenb@google.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Liam Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a0372d1d2342ad53676ab039aa0836df81cede4
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:46 2023 -0400

    maple_tree: fix mas_prev() and mas_find() state handling
    
    commit 17dc622c7b0f94e49bed030726df4db12ecaa6b5 upstream.
    
    When mas_prev() does not find anything, set the state to MAS_NONE.
    
    Handle the MAS_NONE in mas_find() like a MAS_START.
    
    Link: https://lkml.kernel.org/r/20230120162650.984577-7-Liam.Howlett@oracle.com
    Cc: <Stable@vger.kernel.org>
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Reported-by: <syzbot+502859d610c661e56545@syzkaller.appspotmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19d8f782e380c0266b034cf445100361164837b4
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:45 2023 -0400

    maple_tree: fix handle of invalidated state in mas_wr_store_setup()
    
    commit 1202700c3f8cc5f7e4646c3cf05ee6f7c8bc6ccf upstream.
    
    If an invalidated maple state is encountered during write, reset the maple
    state to MAS_START.  This will result in a re-walk of the tree to the
    correct location for the write.
    
    Link: https://lore.kernel.org/all/20230107020126.1627-1-sj@kernel.org/
    Link: https://lkml.kernel.org/r/20230120162650.984577-6-Liam.Howlett@oracle.com
    Cc: <Stable@vger.kernel.org>
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Reported-by: SeongJae Park <sj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c9bc4903b96da06220c81b056d6506b2e8e50ad
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:44 2023 -0400

    maple_tree: reduce user error potential
    
    commit 50e81c82ad947045c7ed26ddc9acb17276b653b6 upstream.
    
    When iterating, a user may operate on the tree and cause the maple state
    to be altered and left in an unintuitive state.  Detect this scenario and
    correct it by setting to the limit and invalidating the state.
    
    Link: https://lkml.kernel.org/r/20230120162650.984577-4-Liam.Howlett@oracle.com
    Cc: <Stable@vger.kernel.org>
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f41e9e69277b08db8eab5f23715f17eb34418953
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:43 2023 -0400

    maple_tree: fix potential rcu issue
    
    commit 65be6f058b0eba98dc6c6f197ea9f62c9b6a519f upstream.
    
    Ensure the node isn't dead after reading the node end.
    
    Link: https://lkml.kernel.org/r/20230120162650.984577-3-Liam.Howlett@oracle.com
    Cc: <Stable@vger.kernel.org>
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edc5a4e880face9dd479e44c8a87e6d80d620e12
Author: Liam R. Howlett <Liam.Howlett@Oracle.com>
Date:   Tue Apr 11 11:10:42 2023 -0400

    maple_tree: remove GFP_ZERO from kmem_cache_alloc() and kmem_cache_alloc_bulk()
    
    commit 541e06b772c1aaffb3b6a245ccface36d7107af2 upstream.
    
    Preallocations are common in the VMA code to avoid allocating under
    certain locking conditions.  The preallocations must also cover the
    worst-case scenario.  Removing the GFP_ZERO flag from the
    kmem_cache_alloc() (and bulk variant) calls will reduce the amount of time
    spent zeroing memory that may not be used.  Only zero out the necessary
    area to keep track of the allocations in the maple state.  Zero the entire
    node prior to using it in the tree.
    
    This required internal changes to node counting on allocation, so the test
    code is also updated.
    
    This restores some micro-benchmark performance: up to +9% in mmtests mmap1
    by my testing +10% to +20% in mmap, mmapaddr, mmapmany tests reported by
    Red Hat
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2149636
    Link: https://lkml.kernel.org/r/20230105160427.2988454-1-Liam.Howlett@oracle.com
    Cc: stable@vger.kernel.org
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Liam Howlett <Liam.Howlett@oracle.com>
    Reported-by: Jirka Hladky <jhladky@redhat.com>
    Suggested-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b73b8ac30c3016e28dc20d922f18e4691213686
Author: Alistair Popple <apopple@nvidia.com>
Date:   Thu Mar 30 12:25:19 2023 +1100

    mm: take a page reference when removing device exclusive entries
    
    commit 7c7b962938ddda6a9cd095de557ee5250706ea88 upstream.
    
    Device exclusive page table entries are used to prevent CPU access to a
    page whilst it is being accessed from a device.  Typically this is used to
    implement atomic operations when the underlying bus does not support
    atomic access.  When a CPU thread encounters a device exclusive entry it
    locks the page and restores the original entry after calling mmu notifiers
    to signal drivers that exclusive access is no longer available.
    
    The device exclusive entry holds a reference to the page making it safe to
    access the struct page whilst the entry is present.  However the fault
    handling code does not hold the PTL when taking the page lock.  This means
    if there are multiple threads faulting concurrently on the device
    exclusive entry one will remove the entry whilst others will wait on the
    page lock without holding a reference.
    
    This can lead to threads locking or waiting on a folio with a zero
    refcount.  Whilst mmap_lock prevents the pages getting freed via munmap()
    they may still be freed by a migration.  This leads to warnings such as
    PAGE_FLAGS_CHECK_AT_FREE due to the page being locked when the refcount
    drops to zero.
    
    Fix this by trying to take a reference on the folio before locking it.
    The code already checks the PTE under the PTL and aborts if the entry is
    no longer there.  It is also possible the folio has been unmapped, freed
    and re-allocated allowing a reference to be taken on an unrelated folio.
    This case is also detected by the PTE check and the folio is unlocked
    without further changes.
    
    Link: https://lkml.kernel.org/r/20230330012519.804116-1-apopple@nvidia.com
    Fixes: b756a3b5e7ea ("mm: device exclusive memory access")
    Signed-off-by: Alistair Popple <apopple@nvidia.com>
    Reviewed-by: Ralph Campbell <rcampbell@nvidia.com>
    Reviewed-by: John Hubbard <jhubbard@nvidia.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 726825297dd6aaa2d91daf7c1c2fd030859cc6cb
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Mar 20 11:54:33 2023 +0200

    drm/i915: Split icl_color_commit_noarm() from skl_color_commit_noarm()
    
    commit 76b767d4d1cd052e455cf18e06929e8b2b70101d upstream.
    
    We're going to want different behavior for skl/glk vs. icl
    in .color_commit_noarm(), so split the hook into two. Arguably
    we already had slightly different behaviour since
    csc_enable/gamma_enable are never set on icl+, so the old
    code was perhaps a bit confusing as well.
    
    Cc: <stable@vger.kernel.org> #v5.19+
    Cc: Manasi Navare <navaremanasi@google.com>
    Cc: Drew Davenport <ddavenport@chromium.org>
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Jouni Högander <jouni.hogander@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230320095438.17328-2-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    (cherry picked from commit f161eb01f50ab31f2084975b43bce54b7b671e17)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64244a900ddff4abd4c894dcfa9ea7df898ad1eb
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 26 14:38:57 2022 +0300

    drm/i915: Use _MMIO_PIPE() for SKL_BOTTOM_COLOR
    
    commit 05ca98523481aa687c5a8dce8939fec539632153 upstream.
    
    No need to use _MMIO_PIPE2() for SKL_BOTTOM_COLOR
    since all pipe registers are evenly spread on skl+.
    Switch to _MMIO_PIPE() and thus avoid the hidden dev_priv.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026113906.10551-3-ville.syrjala@linux.intel.com
    Reviewed-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a3e21976517b82f4fb4f32ecb4a9e6ac8d5d411
Author: Robert Foss <rfoss@kernel.org>
Date:   Tue Dec 13 16:03:04 2022 +0100

    drm/bridge: lt9611: Fix PLL being unable to lock
    
    commit 2a9df204be0bbb896e087f00b9ee3fc559d5a608 upstream.
    
    This fixes PLL being unable to lock, and is derived from an equivalent
    downstream commit.
    
    Available LT9611 documentation does not list this register, neither does
    LT9611UXC (which is a different chip).
    
    This commit has been confirmed to fix HDMI output on DragonBoard 845c.
    
    Suggested-by: Amit Pundir <amit.pundir@linaro.org>
    Reviewed-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221213150304.4189760-1-robert.foss@linaro.org
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1297278ce23977853afeac7bfb65e42450a722dd
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Feb 6 13:48:56 2023 +0200

    drm/i915/dp_mst: Fix payload removal during output disabling
    
    commit eb50912ec931913e70640cecf75cb993fd26995f upstream.
    
    Use the correct old/new topology and payload states in
    intel_mst_disable_dp(). So far drm_atomic_get_mst_topology_state() it
    used returned either the old state, in case the state was added already
    earlier during the atomic check phase or otherwise the new state (but
    the latter could fail, which can't be handled in the enable/disable
    hooks). After the first patch in the patchset, the state should always
    get added already during the check phase, so here we can get the
    old/new states without a failure.
    
    drm_dp_remove_payload() should use time_slots from the old payload state
    and vc_start_slot in the new one. It should update the new payload
    states to reflect the sink's current payload table after the payload is
    removed. Pass the new topology state and the old and new payload states
    accordingly.
    
    This also fixes a problem where the payload allocations for multiple MST
    streams on the same link got inconsistent after a few commits, as
    during payload removal the old instead of the new payload state got
    updated, so the subsequent enabling sequence and commits used a stale
    payload state.
    
    v2: Constify the old payload state pointer. (Ville)
    
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: stable@vger.kernel.org # 6.1
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Daniel Vetter <daniel@ffwll.ch>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Acked-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230206114856.2665066-4-imre.deak@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c64d72fd3f21ac9d0da186809394d9593090ce7
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Feb 6 13:48:54 2023 +0200

    drm/display/dp_mst: Handle old/new payload states in drm_dp_remove_payload()
    
    commit e761cc20946a0094df71cb31a565a6a0d03bd8be upstream.
    
    Atm, drm_dp_remove_payload() uses the same payload state to both get the
    vc_start_slot required for the payload removal DPCD message and to
    deduct time_slots from vc_start_slot of all payloads after the one being
    removed.
    
    The above isn't always correct, as vc_start_slot must be the up-to-date
    version contained in the new payload state, but time_slots must be the
    one used when the payload was previously added, contained in the old
    payload state. The new payload's time_slots can change vs. the old one
    if the current atomic commit changes the corresponding mode.
    
    This patch let's drivers pass the old and new payload states to
    drm_dp_remove_payload(), but keeps these the same for now in all drivers
    not to change the behavior. A follow-up i915 patch will pass in that
    driver the correct old and new states to the function.
    
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Karol Herbst <kherbst@redhat.com>
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Wayne Lin <Wayne.Lin@amd.com>
    Cc: stable@vger.kernel.org # 6.1
    Cc: dri-devel@lists.freedesktop.org
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Daniel Vetter <daniel@ffwll.ch>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Acked-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230206114856.2665066-2-imre.deak@intel.com
    Hand modified for missing 8c7d980da9ba3eb67a1b40fd4b33bcf49397084b
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62de38c8201d853b130fc54ddbfab748180053e2
Author: Tim Huang <tim.huang@amd.com>
Date:   Fri Jan 20 22:27:32 2023 +0800

    drm/amdgpu: skip psp suspend for IMU enabled ASICs mode2 reset
    
    commit e11c775030c5585370fda43035204bb5fa23b139 upstream.
    
    The psp suspend & resume should be skipped to avoid destroy
    the TMR and reload FWs again for IMU enabled APU ASICs.
    
    Signed-off-by: Tim Huang <tim.huang@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73ca74fc7ab6c1679c3b2720579c0c20b73a9764
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Dec 2 10:13:40 2022 -0500

    drm/amdgpu: for S0ix, skip SDMA 5.x+ suspend/resume
    
    commit 2a7798ea7390fd78f191c9e9bf68f5581d3b4a02 upstream.
    
    SDMA 5.x is part of the GFX block so it's controlled via
    GFXOFF.  Skip suspend as it should be handled the same
    as GFX.
    
    v2: drop SDMA 4.x.  That requires special handling.
    
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Acked-by: Rajneesh Bhardwaj <rajneesh.bhardwaj@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Limonciello, Mario" <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 245525543f48cd9eabd2964d8931043e9e3c31cf
Author: Roman Li <roman.li@amd.com>
Date:   Thu Dec 1 09:49:23 2022 -0500

    drm/amd/display: Clear MST topology if it fails to resume
    
    commit 3f6752b4de41896c7f1609b1585db2080e8150d8 upstream.
    
    [Why]
    In case of failure to resume MST topology after suspend, an emtpty
    mst tree prevents further mst hub detection on the same connector.
    That causes the issue with MST hub hotplug after it's been unplug in
    suspend.
    
    [How]
    Stop topology manager on the connector after detecting DM_MST failure.
    
    Reviewed-by: Wayne Lin <Wayne.Lin@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Roman Li <roman.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Limonciello, Mario" <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 414207ff47d12850ce9ed1186de57218b710a312
Author: Kemeng Shi <shikemeng@huawei.com>
Date:   Mon Dec 5 19:57:02 2022 +0800

    blk-throttle: Fix that bps of child could exceed bps limited in parent
    
    commit 84aca0a7e039c8735abc0f89f3f48e9006c0dfc7 upstream.
    
    Consider situation as following (on the default hierarchy):
     HDD
      |
    root (bps limit: 4k)
      |
    child (bps limit :8k)
      |
    fio bs=8k
    Rate of fio is supposed to be 4k, but result is 8k. Reason is as
    following:
    Size of single IO from fio is larger than bytes allowed in one
    throtl_slice in child, so IOs are always queued in child group first.
    When queued IOs in child are dispatched to parent group, BIO_BPS_THROTTLED
    is set and these IOs will not be limited by tg_within_bps_limit anymore.
    Fix this by only set BIO_BPS_THROTTLED when the bio traversed the entire
    tree.
    
    There patch has no influence on situation which is not on the default
    hierarchy as each group is a single root group without parent.
    
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Kemeng Shi <shikemeng@huawei.com>
    Link: https://lore.kernel.org/r/20221205115709.251489-3-shikemeng@huaweicloud.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Khazhy Kumykov <khazhy@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 240bb94f3510e0ced4877a786520ee47743c880d
Author: Peng Zhang <zhangpeng.00@bytedance.com>
Date:   Tue Mar 14 20:42:03 2023 +0800

    maple_tree: fix a potential concurrency bug in RCU mode
    
    commit c45ea315a602d45569b08b93e9ab30f6a63a38aa upstream.
    
    There is a concurrency bug that may cause the wrong value to be loaded
    when a CPU is modifying the maple tree.
    
    CPU1:
    mtree_insert_range()
      mas_insert()
        mas_store_root()
          ...
          mas_root_expand()
            ...
            rcu_assign_pointer(mas->tree->ma_root, mte_mk_root(mas->node));
            ma_set_meta(node, maple_leaf_64, 0, slot);    <---IP
    
    CPU2:
    mtree_load()
      mtree_lookup_walk()
        ma_data_end();
    
    When CPU1 is about to execute the instruction pointed to by IP, the
    ma_data_end() executed by CPU2 may return the wrong end position, which
    will cause the value loaded by mtree_load() to be wrong.
    
    An example of triggering the bug:
    
    Add mdelay(100) between rcu_assign_pointer() and ma_set_meta() in
    mas_root_expand().
    
    static DEFINE_MTREE(tree);
    int work(void *p) {
            unsigned long val;
            for (int i = 0 ; i< 30; ++i) {
                    val = (unsigned long)mtree_load(&tree, 8);
                    mdelay(5);
                    pr_info("%lu",val);
            }
            return 0;
    }
    
    mt_init_flags(&tree, MT_FLAGS_USE_RCU);
    mtree_insert(&tree, 0, (void*)12345, GFP_KERNEL);
    run_thread(work)
    mtree_insert(&tree, 1, (void*)56789, GFP_KERNEL);
    
    In RCU mode, mtree_load() should always return the value before or after
    the data structure is modified, and in this example mtree_load(&tree, 8)
    may return 56789 which is not expected, it should always return NULL.  Fix
    it by put ma_set_meta() before rcu_assign_pointer().
    
    Link: https://lkml.kernel.org/r/20230314124203.91572-4-zhangpeng.00@bytedance.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Peng Zhang <zhangpeng.00@bytedance.com>
    Reviewed-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f5760757fa2eee2f118934d116569b6255c4e3b
Author: Peng Zhang <zhangpeng.00@bytedance.com>
Date:   Tue Mar 14 20:42:01 2023 +0800

    maple_tree: fix get wrong data_end in mtree_lookup_walk()
    
    commit ec07967d7523adb3670f9dfee0232e3bc868f3de upstream.
    
    if (likely(offset > end))
            max = pivots[offset];
    
    The above code should be changed to if (likely(offset < end)), which is
    correct.  This affects the correctness of ma_data_end().  Now it seems
    that the final result will not be wrong, but it is best to change it.
    This patch does not change the code as above, because it simplifies the
    code by the way.
    
    Link: https://lkml.kernel.org/r/20230314124203.91572-1-zhangpeng.00@bytedance.com
    Link: https://lkml.kernel.org/r/20230314124203.91572-2-zhangpeng.00@bytedance.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Peng Zhang <zhangpeng.00@bytedance.com>
    Reviewed-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f042ee354c827bf4946cf3113a3b5eaa030c6ea4
Author: Peter Xu <peterx@redhat.com>
Date:   Tue Mar 21 15:18:40 2023 -0400

    mm/hugetlb: fix uffd wr-protection for CoW optimization path
    
    commit 60d5b473d61be61ac315e544fcd6a8234a79500e upstream.
    
    This patch fixes an issue that a hugetlb uffd-wr-protected mapping can be
    writable even with uffd-wp bit set.  It only happens with hugetlb private
    mappings, when someone firstly wr-protects a missing pte (which will
    install a pte marker), then a write to the same page without any prior
    access to the page.
    
    Userfaultfd-wp trap for hugetlb was implemented in hugetlb_fault() before
    reaching hugetlb_wp() to avoid taking more locks that userfault won't
    need.  However there's one CoW optimization path that can trigger
    hugetlb_wp() inside hugetlb_no_page(), which will bypass the trap.
    
    This patch skips hugetlb_wp() for CoW and retries the fault if uffd-wp bit
    is detected.  The new path will only trigger in the CoW optimization path
    because generic hugetlb_fault() (e.g.  when a present pte was
    wr-protected) will resolve the uffd-wp bit already.  Also make sure
    anonymous UNSHARE won't be affected and can still be resolved, IOW only
    skip CoW not CoR.
    
    This patch will be needed for v5.19+ hence copy stable.
    
    [peterx@redhat.com: v2]
      Link: https://lkml.kernel.org/r/ZBzOqwF2wrHgBVZb@x1n
    [peterx@redhat.com: v3]
      Link: https://lkml.kernel.org/r/20230324142620.2344140-1-peterx@redhat.com
    Link: https://lkml.kernel.org/r/20230321191840.1897940-1-peterx@redhat.com
    Fixes: 166f3ecc0daf ("mm/hugetlb: hook page faults for uffd write protection")
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reported-by: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Tested-by: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Nadav Amit <nadav.amit@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85cc118ce6f1a627901b6db50c9d01f2ad78cdbf
Author: Rongwei Wang <rongwei.wang@linux.alibaba.com>
Date:   Tue Apr 4 23:47:16 2023 +0800

    mm/swap: fix swap_info_struct race between swapoff and get_swap_pages()
    
    commit 6fe7d6b992113719e96744d974212df3fcddc76c upstream.
    
    The si->lock must be held when deleting the si from the available list.
    Otherwise, another thread can re-add the si to the available list, which
    can lead to memory corruption.  The only place we have found where this
    happens is in the swapoff path.  This case can be described as below:
    
    core 0                       core 1
    swapoff
    
    del_from_avail_list(si)      waiting
    
    try lock si->lock            acquire swap_avail_lock
                                 and re-add si into
                                 swap_avail_head
    
    acquire si->lock but missing si already being added again, and continuing
    to clear SWP_WRITEOK, etc.
    
    It can be easily found that a massive warning messages can be triggered
    inside get_swap_pages() by some special cases, for example, we call
    madvise(MADV_PAGEOUT) on blocks of touched memory concurrently, meanwhile,
    run much swapon-swapoff operations (e.g.  stress-ng-swap).
    
    However, in the worst case, panic can be caused by the above scene.  In
    swapoff(), the memory used by si could be kept in swap_info[] after
    turning off a swap.  This means memory corruption will not be caused
    immediately until allocated and reset for a new swap in the swapon path.
    A panic message caused: (with CONFIG_PLIST_DEBUG enabled)
    
    ------------[ cut here ]------------
    top: 00000000e58a3003, n: 0000000013e75cda, p: 000000008cd4451a
    prev: 0000000035b1e58a, n: 000000008cd4451a, p: 000000002150ee8d
    next: 000000008cd4451a, n: 000000008cd4451a, p: 000000008cd4451a
    WARNING: CPU: 21 PID: 1843 at lib/plist.c:60 plist_check_prev_next_node+0x50/0x70
    Modules linked in: rfkill(E) crct10dif_ce(E)...
    CPU: 21 PID: 1843 Comm: stress-ng Kdump: ... 5.10.134+
    Hardware name: Alibaba Cloud ECS, BIOS 0.0.0 02/06/2015
    pstate: 60400005 (nZCv daif +PAN -UAO -TCO BTYPE=--)
    pc : plist_check_prev_next_node+0x50/0x70
    lr : plist_check_prev_next_node+0x50/0x70
    sp : ffff0018009d3c30
    x29: ffff0018009d3c40 x28: ffff800011b32a98
    x27: 0000000000000000 x26: ffff001803908000
    x25: ffff8000128ea088 x24: ffff800011b32a48
    x23: 0000000000000028 x22: ffff001800875c00
    x21: ffff800010f9e520 x20: ffff001800875c00
    x19: ffff001800fdc6e0 x18: 0000000000000030
    x17: 0000000000000000 x16: 0000000000000000
    x15: 0736076307640766 x14: 0730073007380731
    x13: 0736076307640766 x12: 0730073007380731
    x11: 000000000004058d x10: 0000000085a85b76
    x9 : ffff8000101436e4 x8 : ffff800011c8ce08
    x7 : 0000000000000000 x6 : 0000000000000001
    x5 : ffff0017df9ed338 x4 : 0000000000000001
    x3 : ffff8017ce62a000 x2 : ffff0017df9ed340
    x1 : 0000000000000000 x0 : 0000000000000000
    Call trace:
     plist_check_prev_next_node+0x50/0x70
     plist_check_head+0x80/0xf0
     plist_add+0x28/0x140
     add_to_avail_list+0x9c/0xf0
     _enable_swap_info+0x78/0xb4
     __do_sys_swapon+0x918/0xa10
     __arm64_sys_swapon+0x20/0x30
     el0_svc_common+0x8c/0x220
     do_el0_svc+0x2c/0x90
     el0_svc+0x1c/0x30
     el0_sync_handler+0xa8/0xb0
     el0_sync+0x148/0x180
    irq event stamp: 2082270
    
    Now, si->lock locked before calling 'del_from_avail_list()' to make sure
    other thread see the si had been deleted and SWP_WRITEOK cleared together,
    will not reinsert again.
    
    This problem exists in versions after stable 5.10.y.
    
    Link: https://lkml.kernel.org/r/20230404154716.23058-1-rongwei.wang@linux.alibaba.com
    Fixes: a2468cc9bfdff ("swap: choose swap device according to numa node")
    Tested-by: Yongchen Yin <wb-yyc939293@alibaba-inc.com>
    Signed-off-by: Rongwei Wang <rongwei.wang@linux.alibaba.com>
    Cc: Bagas Sanjaya <bagasdotme@gmail.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Aaron Lu <aaron.lu@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3663f5d5bb1f5a2b994c1faefe9bd5ab4bee38eb
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Sat Mar 25 10:12:47 2023 +0800

    ring-buffer: Fix race while reader and writer are on the same page
    
    commit 6455b6163d8c680366663cdb8c679514d55fc30c upstream.
    
    When user reads file 'trace_pipe', kernel keeps printing following logs
    that warn at "cpu_buffer->reader_page->read > rb_page_size(reader)" in
    rb_get_reader_page(). It just looks like there's an infinite loop in
    tracing_read_pipe(). This problem occurs several times on arm64 platform
    when testing v5.10 and below.
    
      Call trace:
       rb_get_reader_page+0x248/0x1300
       rb_buffer_peek+0x34/0x160
       ring_buffer_peek+0xbc/0x224
       peek_next_entry+0x98/0xbc
       __find_next_entry+0xc4/0x1c0
       trace_find_next_entry_inc+0x30/0x94
       tracing_read_pipe+0x198/0x304
       vfs_read+0xb4/0x1e0
       ksys_read+0x74/0x100
       __arm64_sys_read+0x24/0x30
       el0_svc_common.constprop.0+0x7c/0x1bc
       do_el0_svc+0x2c/0x94
       el0_svc+0x20/0x30
       el0_sync_handler+0xb0/0xb4
       el0_sync+0x160/0x180
    
    Then I dump the vmcore and look into the problematic per_cpu ring_buffer,
    I found that tail_page/commit_page/reader_page are on the same page while
    reader_page->read is obviously abnormal:
      tail_page == commit_page == reader_page == {
        .write = 0x100d20,
        .read = 0x8f9f4805,  // Far greater than 0xd20, obviously abnormal!!!
        .entries = 0x10004c,
        .real_end = 0x0,
        .page = {
          .time_stamp = 0x857257416af0,
          .commit = 0xd20,  // This page hasn't been full filled.
          // .data[0...0xd20] seems normal.
        }
     }
    
    The root cause is most likely the race that reader and writer are on the
    same page while reader saw an event that not fully committed by writer.
    
    To fix this, add memory barriers to make sure the reader can see the
    content of what is committed. Since commit a0fcaaed0c46 ("ring-buffer: Fix
    race between reset page and reading page") has added the read barrier in
    rb_get_reader_page(), here we just need to add the write barrier.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230325021247.2923907-1-zhengyejian1@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 77ae365eca89 ("ring-buffer: make lockless")
    Suggested-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 240b1502708858b5e3f10b6dc5ca3f148a322fef
Author: Min Li <lm0963hack@gmail.com>
Date:   Tue Mar 28 17:36:27 2023 +0800

    drm/i915: fix race condition UAF in i915_perf_add_config_ioctl
    
    commit dc30c011469165d57af9adac5baff7d767d20e5c upstream.
    
    Userspace can guess the id value and try to race oa_config object creation
    with config remove, resulting in a use-after-free if we dereference the
    object after unlocking the metrics_lock.  For that reason, unlocking the
    metrics_lock must be done after we are done dereferencing the object.
    
    Signed-off-by: Min Li <lm0963hack@gmail.com>
    Fixes: f89823c21224 ("drm/i915/perf: Implement I915_PERF_ADD/REMOVE_CONFIG interface")
    Cc: <stable@vger.kernel.org> # v4.14+
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Reviewed-by: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230328093627.5067-1-lm0963hack@gmail.com
    [tursulin: Manually added stable tag.]
    (cherry picked from commit 49f6f6483b652108bcb73accd0204a464b922395)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e29fb89f771316caed9e4d166213b10dd49eb2e
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Mon Mar 20 15:14:23 2023 +0000

    drm/i915: Fix context runtime accounting
    
    commit dc3421560a67361442f33ec962fc6dd48895a0df upstream.
    
    When considering whether to mark one context as stopped and another as
    started we need to look at whether the previous and new _contexts_ are
    different and not just requests. Otherwise the software tracked context
    start time was incorrectly updated to the most recent lite-restore time-
    stamp, which was in some cases resulting in active time going backward,
    until the context switch (typically the heartbeat pulse) would synchronise
    with the hardware tracked context runtime. Easiest use case to observe
    this behaviour was with a full screen clients with close to 100% engine
    load.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Fixes: bb6287cb1886 ("drm/i915: Track context current active time")
    Cc: <stable@vger.kernel.org> # v5.19+
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230320151423.1708436-1-tvrtko.ursulin@linux.intel.com
    [tursulin: Fix spelling in commit msg.]
    (cherry picked from commit b3e70051879c665acdd3a1ab50d0ed58d6a8001f)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e53d28a6df0e2a8e5fa06d283dd604014773463e
Author: Karol Herbst <kherbst@redhat.com>
Date:   Fri Mar 31 00:39:38 2023 +0200

    drm/nouveau/disp: Support more modes by checking with lower bpc
    
    commit 7f67aa097e875c87fba024e850cf405342300059 upstream.
    
    This allows us to advertise more modes especially on HDR displays.
    
    Fixes using 4K@60 modes on my TV and main display both using a HDMI to DP
    adapter. Also fixes similar issues for users running into this.
    
    Cc: stable@vger.kernel.org # 5.10+
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230330223938.4025569-1-kherbst@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c260efd82f5ea5d1a62f7d8f7f057823f6d3271
Author: Boris Brezillon <boris.brezillon@collabora.com>
Date:   Fri May 21 11:38:11 2021 +0200

    drm/panfrost: Fix the panfrost_mmu_map_fault_addr() error path
    
    commit 764a2ab9eb56e1200083e771aab16186836edf1d upstream.
    
    Make sure all bo->base.pages entries are either NULL or pointing to a
    valid page before calling drm_gem_shmem_put_pages().
    
    Reported-by: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 187d2929206e ("drm/panfrost: Add support for GPU heap allocations")
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210521093811.1018992-1-boris.brezillon@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4b37727bc7875dea9c00710539b5d56549765d0
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Apr 5 20:00:46 2023 -0600

    ublk: read any SQE values upfront
    
    commit 8c68ae3b22fa6fb2dbe83ef955ff10936503d28e upstream.
    
    Since SQE memory is shared with userspace, we should only be reading it
    once. We cannot read it multiple times, particularly when it's read once
    for validation and then read again for the actual use.
    
    ublk_ch_uring_cmd() is safe when called as a retry operation, as the
    memory backing is stable at that point. But for normal issue, we want
    to ensure that we only read ublksrv_io_cmd once. Wrap the function in
    a helper that reads the value into an on-stack copy of the struct.
    
    Cc: stable@vger.kernel.org # 6.0+
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94dd3a274bf530af4c0869d2835a9a9a8b4d5350
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Mar 30 11:12:59 2023 +0200

    wifi: mt76: ignore key disable commands
    
    commit e6db67fa871dee37d22701daba806bfcd4d9df49 upstream.
    
    This helps avoid cleartext leakage of already queued or powersave buffered
    packets, when a reassoc triggers the key deletion.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230330091259.61378-1-nbd@nbd.name
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef6bd8f64ce0ec56ed8c9025db2e96a7f031150f
Author: Yafang Shao <laoar.shao@gmail.com>
Date:   Thu Mar 30 16:26:25 2023 +0000

    mm: vmalloc: avoid warn_alloc noise caused by fatal signal
    
    commit f349b15e183d6956f1b63d6ff57849ff10c7edd5 upstream.
    
    There're some suspicious warn_alloc on my test serer, for example,
    
    [13366.518837] warn_alloc: 81 callbacks suppressed
    [13366.518841] test_verifier: vmalloc error: size 4096, page order 0, failed to allocate pages, mode:0x500dc2(GFP_HIGHUSER|__GFP_ZERO|__GFP_ACCOUNT), nodemask=(null),cpuset=/,mems_allowed=0-1
    [13366.522240] CPU: 30 PID: 722463 Comm: test_verifier Kdump: loaded Tainted: G        W  O       6.2.0+ #638
    [13366.524216] Call Trace:
    [13366.524702]  <TASK>
    [13366.525148]  dump_stack_lvl+0x6c/0x80
    [13366.525712]  dump_stack+0x10/0x20
    [13366.526239]  warn_alloc+0x119/0x190
    [13366.526783]  ? alloc_pages_bulk_array_mempolicy+0x9e/0x2a0
    [13366.527470]  __vmalloc_area_node+0x546/0x5b0
    [13366.528066]  __vmalloc_node_range+0xc2/0x210
    [13366.528660]  __vmalloc_node+0x42/0x50
    [13366.529186]  ? bpf_prog_realloc+0x53/0xc0
    [13366.529743]  __vmalloc+0x1e/0x30
    [13366.530235]  bpf_prog_realloc+0x53/0xc0
    [13366.530771]  bpf_patch_insn_single+0x80/0x1b0
    [13366.531351]  bpf_jit_blind_constants+0xe9/0x1c0
    [13366.531932]  ? __free_pages+0xee/0x100
    [13366.532457]  ? free_large_kmalloc+0x58/0xb0
    [13366.533002]  bpf_int_jit_compile+0x8c/0x5e0
    [13366.533546]  bpf_prog_select_runtime+0xb4/0x100
    [13366.534108]  bpf_prog_load+0x6b1/0xa50
    [13366.534610]  ? perf_event_task_tick+0x96/0xb0
    [13366.535151]  ? security_capable+0x3a/0x60
    [13366.535663]  __sys_bpf+0xb38/0x2190
    [13366.536120]  ? kvm_clock_get_cycles+0x9/0x10
    [13366.536643]  __x64_sys_bpf+0x1c/0x30
    [13366.537094]  do_syscall_64+0x38/0x90
    [13366.537554]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [13366.538107] RIP: 0033:0x7f78310f8e29
    [13366.538561] Code: 01 00 48 81 c4 80 00 00 00 e9 f1 fe ff ff 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 17 e0 2c 00 f7 d8 64 89 01 48
    [13366.540286] RSP: 002b:00007ffe2a61fff8 EFLAGS: 00000206 ORIG_RAX: 0000000000000141
    [13366.541031] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f78310f8e29
    [13366.541749] RDX: 0000000000000080 RSI: 00007ffe2a6200b0 RDI: 0000000000000005
    [13366.542470] RBP: 00007ffe2a620010 R08: 00007ffe2a6202a0 R09: 00007ffe2a6200b0
    [13366.543183] R10: 00000000000f423e R11: 0000000000000206 R12: 0000000000407800
    [13366.543900] R13: 00007ffe2a620540 R14: 0000000000000000 R15: 0000000000000000
    [13366.544623]  </TASK>
    [13366.545260] Mem-Info:
    [13366.546121] active_anon:81319 inactive_anon:20733 isolated_anon:0
     active_file:69450 inactive_file:5624 isolated_file:0
     unevictable:0 dirty:10 writeback:0
     slab_reclaimable:69649 slab_unreclaimable:48930
     mapped:27400 shmem:12868 pagetables:4929
     sec_pagetables:0 bounce:0
     kernel_misc_reclaimable:0
     free:15870308 free_pcp:142935 free_cma:0
    [13366.551886] Node 0 active_anon:224836kB inactive_anon:33528kB active_file:175692kB inactive_file:13752kB unevictable:0kB isolated(anon):0kB isolated(file):0kB mapped:59248kB dirty:32kB writeback:0kB shmem:18252kB shmem_thp: 0kB shmem_pmdmapped: 0kB anon_thp: 0kB writeback_tmp:0kB kernel_stack:4616kB pagetables:10664kB sec_pagetables:0kB all_unreclaimable? no
    [13366.555184] Node 1 active_anon:100440kB inactive_anon:49404kB active_file:102108kB inactive_file:8744kB unevictable:0kB isolated(anon):0kB isolated(file):0kB mapped:50352kB dirty:8kB writeback:0kB shmem:33220kB shmem_thp: 0kB shmem_pmdmapped: 0kB anon_thp: 0kB writeback_tmp:0kB kernel_stack:3896kB pagetables:9052kB sec_pagetables:0kB all_unreclaimable? no
    [13366.558262] Node 0 DMA free:15360kB boost:0kB min:304kB low:380kB high:456kB reserved_highatomic:0KB active_anon:0kB inactive_anon:0kB active_file:0kB inactive_file:0kB unevictable:0kB writepending:0kB present:15992kB managed:15360kB mlocked:0kB bounce:0kB free_pcp:0kB local_pcp:0kB free_cma:0kB
    [13366.560821] lowmem_reserve[]: 0 2735 31873 31873 31873
    [13366.561981] Node 0 DMA32 free:2790904kB boost:0kB min:56028kB low:70032kB high:84036kB reserved_highatomic:0KB active_anon:1936kB inactive_anon:20kB active_file:396kB inactive_file:344kB unevictable:0kB writepending:0kB present:3129200kB managed:2801520kB mlocked:0kB bounce:0kB free_pcp:5188kB local_pcp:0kB free_cma:0kB
    [13366.565148] lowmem_reserve[]: 0 0 29137 29137 29137
    [13366.566168] Node 0 Normal free:28533824kB boost:0kB min:596740kB low:745924kB high:895108kB reserved_highatomic:28672KB active_anon:222900kB inactive_anon:33508kB active_file:175296kB inactive_file:13408kB unevictable:0kB writepending:32kB present:30408704kB managed:29837172kB mlocked:0kB bounce:0kB free_pcp:295724kB local_pcp:0kB free_cma:0kB
    [13366.569485] lowmem_reserve[]: 0 0 0 0 0
    [13366.570416] Node 1 Normal free:32141144kB boost:0kB min:660504kB low:825628kB high:990752kB reserved_highatomic:69632KB active_anon:100440kB inactive_anon:49404kB active_file:102108kB inactive_file:8744kB unevictable:0kB writepending:8kB present:33554432kB managed:33025372kB mlocked:0kB bounce:0kB free_pcp:270880kB local_pcp:46860kB free_cma:0kB
    [13366.573403] lowmem_reserve[]: 0 0 0 0 0
    [13366.574015] Node 0 DMA: 0*4kB 0*8kB 0*16kB 0*32kB 0*64kB 0*128kB 0*256kB 0*512kB 1*1024kB (U) 1*2048kB (M) 3*4096kB (M) = 15360kB
    [13366.575474] Node 0 DMA32: 782*4kB (UME) 756*8kB (UME) 736*16kB (UME) 745*32kB (UME) 694*64kB (UME) 653*128kB (UME) 595*256kB (UME) 552*512kB (UME) 454*1024kB (UME) 347*2048kB (UME) 246*4096kB (UME) = 2790904kB
    [13366.577442] Node 0 Normal: 33856*4kB (UMEH) 51815*8kB (UMEH) 42418*16kB (UMEH) 36272*32kB (UMEH) 22195*64kB (UMEH) 10296*128kB (UMEH) 7238*256kB (UMEH) 5638*512kB (UEH) 5337*1024kB (UMEH) 3506*2048kB (UMEH) 1470*4096kB (UME) = 28533784kB
    [13366.580460] Node 1 Normal: 15776*4kB (UMEH) 37485*8kB (UMEH) 29509*16kB (UMEH) 21420*32kB (UMEH) 14818*64kB (UMEH) 13051*128kB (UMEH) 9918*256kB (UMEH) 7374*512kB (UMEH) 5397*1024kB (UMEH) 3887*2048kB (UMEH) 2002*4096kB (UME) = 32141240kB
    [13366.583027] Node 0 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=1048576kB
    [13366.584380] Node 0 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=2048kB
    [13366.585702] Node 1 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=1048576kB
    [13366.587042] Node 1 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=2048kB
    [13366.588372] 87386 total pagecache pages
    [13366.589266] 0 pages in swap cache
    [13366.590327] Free swap  = 0kB
    [13366.591227] Total swap = 0kB
    [13366.592142] 16777082 pages RAM
    [13366.593057] 0 pages HighMem/MovableOnly
    [13366.594037] 357226 pages reserved
    [13366.594979] 0 pages hwpoisoned
    
    This failure really confuse me as there're still lots of available pages.
    Finally I figured out it was caused by a fatal signal.  When a process is
    allocating memory via vm_area_alloc_pages(), it will break directly even
    if it hasn't allocated the requested pages when it receives a fatal
    signal.  In that case, we shouldn't show this warn_alloc, as it is
    useless.  We only need to show this warning when there're really no enough
    pages.
    
    Link: https://lkml.kernel.org/r/20230330162625.13604-1-laoar.shao@gmail.com
    Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
    Reviewed-by: Lorenzo Stoakes <lstoakes@gmail.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d33aa43516a27d3e47f98d36a1da940fd2a4352
Author: Sergey Senozhatsky <senozhatsky@chromium.org>
Date:   Sat Mar 25 11:46:31 2023 +0900

    zsmalloc: document freeable stats
    
    commit 618a8a917dbf5830e2064d2fa0568940eb5d2584 upstream.
    
    When freeable class stat was added to classes file (back in 2016) we
    forgot to update zsmalloc documentation.  Fix that.
    
    Link: https://lkml.kernel.org/r/20230325024631.2817153-3-senozhatsky@chromium.org
    Fixes: 1120ed548394 ("mm/zsmalloc: add `freeable' column to pool stat")
    Signed-off-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc48648699c77571de09f490051ca0fbafeb7c9d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Apr 6 11:10:33 2023 -0400

    tracing/synthetic: Make lastcmd_mutex static
    
    commit 31c683967174b487939efaf65e41f5ff1404e141 upstream.
    
    The lastcmd_mutex is only used in trace_events_synth.c and should be
    static.
    
    Link: https://lore.kernel.org/linux-trace-kernel/202304062033.cRStgOuP-lkp@intel.com/
    Link: https://lore.kernel.org/linux-trace-kernel/20230406111033.6e26de93@gandalf.local.home
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Tze-nan Wu <Tze-nan.Wu@mediatek.com>
    Fixes: 4ccf11c4e8a8e ("tracing/synthetic: Fix races on freeing last_cmd")
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14d34eb9b076a6451dbe81f064ce7d7058ec2d64
Author: Jason Montleon <jmontleo@redhat.com>
Date:   Fri Mar 24 13:07:11 2023 -0400

    ASoC: hdac_hdmi: use set_stream() instead of set_tdm_slots()
    
    commit f6887a71bdd2f0dcba9b8180dd2223cfa8637e85 upstream.
    
    hdac_hdmi was not updated to use set_stream() instead of set_tdm_slots()
    in the original commit so HDMI no longer produces audio.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/regressions/CAJD_bPKQdtaExvVEKxhQ47G-ZXDA=k+gzhMJRHLBe=mysPnuKA@mail.gmail.com/
    Fixes: 636110411ca7 ("ASoC: Intel/SOF: use set_stream() instead of set_tdm_slots() for HDAudio")
    Signed-off-by: Jason Montleon <jmontleo@redhat.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20230324170711.2526-1-jmontleo@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0cf0f55be043ef67c38f492aa37ed1986d2f6b6
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Apr 4 19:45:04 2023 -0400

    tracing: Free error logs of tracing instances
    
    commit 3357c6e429643231e60447b52ffbb7ac895aca22 upstream.
    
    When a tracing instance is removed, the error messages that hold errors
    that occurred in the instance needs to be freed. The following reports a
    memory leak:
    
     # cd /sys/kernel/tracing
     # mkdir instances/foo
     # echo 'hist:keys=x' > instances/foo/events/sched/sched_switch/trigger
     # cat instances/foo/error_log
     [  117.404795] hist:sched:sched_switch: error: Couldn't find field
       Command: hist:keys=x
                          ^
     # rmdir instances/foo
    
    Then check for memory leaks:
    
     # echo scan > /sys/kernel/debug/kmemleak
     # cat /sys/kernel/debug/kmemleak
    unreferenced object 0xffff88810d8ec700 (size 192):
      comm "bash", pid 869, jiffies 4294950577 (age 215.752s)
      hex dump (first 32 bytes):
        60 dd 68 61 81 88 ff ff 60 dd 68 61 81 88 ff ff  `.ha....`.ha....
        a0 30 8c 83 ff ff ff ff 26 00 0a 00 00 00 00 00  .0......&.......
      backtrace:
        [<00000000dae26536>] kmalloc_trace+0x2a/0xa0
        [<00000000b2938940>] tracing_log_err+0x277/0x2e0
        [<000000004a0e1b07>] parse_atom+0x966/0xb40
        [<0000000023b24337>] parse_expr+0x5f3/0xdb0
        [<00000000594ad074>] event_hist_trigger_parse+0x27f8/0x3560
        [<00000000293a9645>] trigger_process_regex+0x135/0x1a0
        [<000000005c22b4f2>] event_trigger_write+0x87/0xf0
        [<000000002cadc509>] vfs_write+0x162/0x670
        [<0000000059c3b9be>] ksys_write+0xca/0x170
        [<00000000f1cddc00>] do_syscall_64+0x3e/0xc0
        [<00000000868ac68c>] entry_SYSCALL_64_after_hwframe+0x72/0xdc
    unreferenced object 0xffff888170c35a00 (size 32):
      comm "bash", pid 869, jiffies 4294950577 (age 215.752s)
      hex dump (first 32 bytes):
        0a 20 20 43 6f 6d 6d 61 6e 64 3a 20 68 69 73 74  .  Command: hist
        3a 6b 65 79 73 3d 78 0a 00 00 00 00 00 00 00 00  :keys=x.........
      backtrace:
        [<000000006a747de5>] __kmalloc+0x4d/0x160
        [<000000000039df5f>] tracing_log_err+0x29b/0x2e0
        [<000000004a0e1b07>] parse_atom+0x966/0xb40
        [<0000000023b24337>] parse_expr+0x5f3/0xdb0
        [<00000000594ad074>] event_hist_trigger_parse+0x27f8/0x3560
        [<00000000293a9645>] trigger_process_regex+0x135/0x1a0
        [<000000005c22b4f2>] event_trigger_write+0x87/0xf0
        [<000000002cadc509>] vfs_write+0x162/0x670
        [<0000000059c3b9be>] ksys_write+0xca/0x170
        [<00000000f1cddc00>] do_syscall_64+0x3e/0xc0
        [<00000000868ac68c>] entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    The problem is that the error log needs to be freed when the instance is
    removed.
    
    Link: https://lore.kernel.org/lkml/76134d9f-a5ba-6a0d-37b3-28310b4a1e91@alu.unizg.hr/
    Link: https://lore.kernel.org/linux-trace-kernel/20230404194504.5790b95f@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Thorsten Leemhuis <regressions@leemhuis.info>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: Eric Biggers <ebiggers@kernel.org>
    Fixes: 2f754e771b1a6 ("tracing: Have the error logs show up in the proper instances")
    Reported-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ea5f8d1facd710c8be4bca5fca9808d8bc947d1
Author: Daniel Bristot de Oliveira <bristot@kernel.org>
Date:   Wed Mar 29 17:50:16 2023 +0200

    tracing/osnoise: Fix notify new tracing_max_latency
    
    commit d3cba7f02cd82118c32651c73374d8a5a459d9a6 upstream.
    
    osnoise/timerlat tracers are reporting new max latency on instances
    where the tracing is off, creating inconsistencies between the max
    reported values in the trace and in the tracing_max_latency. Thus
    only report new tracing_max_latency on active tracing instances.
    
    Link: https://lkml.kernel.org/r/ecd109fde4a0c24ab0f00ba1e9a144ac19a91322.1680104184.git.bristot@kernel.org
    
    Cc: stable@vger.kernel.org
    Fixes: dae181349f1e ("tracing/osnoise: Support a list of trace_array *tr")
    Signed-off-by: Daniel Bristot de Oliveira <bristot@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 162e6e6ff25f0d9225a26369be9faa6c244918e3
Author: Daniel Bristot de Oliveira <bristot@kernel.org>
Date:   Wed Mar 29 17:50:15 2023 +0200

    tracing/timerlat: Notify new max thread latency
    
    commit b9f451a9029a16eb7913ace09b92493d00f2e564 upstream.
    
    timerlat is not reporting a new tracing_max_latency for the thread
    latency. The reason is that it is not calling notify_new_max_latency()
    function after the new thread latency is sampled.
    
    Call notify_new_max_latency() after computing the thread latency.
    
    Link: https://lkml.kernel.org/r/16e18d61d69073d0192ace07bf61e405cca96e9c.1680104184.git.bristot@kernel.org
    
    Cc: stable@vger.kernel.org
    Fixes: dae181349f1e ("tracing/osnoise: Support a list of trace_array *tr")
    Signed-off-by: Daniel Bristot de Oliveira <bristot@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fe183f659a2704255e5d84f6ae308c234a113ec
Author: Tze-nan Wu <Tze-nan.Wu@mediatek.com>
Date:   Tue Mar 21 19:04:43 2023 +0800

    tracing/synthetic: Fix races on freeing last_cmd
    
    commit 4ccf11c4e8a8e051499d53a12f502196c97a758e upstream.
    
    Currently, the "last_cmd" variable can be accessed by multiple processes
    asynchronously when multiple users manipulate synthetic_events node
    at the same time, it could lead to use-after-free or double-free.
    
    This patch add "lastcmd_mutex" to prevent "last_cmd" from being accessed
    asynchronously.
    
    ================================================================
    
    It's easy to reproduce in the KASAN environment by running the two
    scripts below in different shells.
    
    script 1:
            while :
            do
                    echo -n -e '\x88' > /sys/kernel/tracing/synthetic_events
            done
    
    script 2:
            while :
            do
                    echo -n -e '\xb0' > /sys/kernel/tracing/synthetic_events
            done
    
    ================================================================
    double-free scenario:
    
        process A                       process B
    -------------------               ---------------
    1.kstrdup last_cmd
                                      2.free last_cmd
    3.free last_cmd(double-free)
    
    ================================================================
    use-after-free scenario:
    
        process A                       process B
    -------------------               ---------------
    1.kstrdup last_cmd
                                      2.free last_cmd
    3.tracing_log_err(use-after-free)
    
    ================================================================
    
    Appendix 1. KASAN report double-free:
    
    BUG: KASAN: double-free in kfree+0xdc/0x1d4
    Free of addr ***** by task sh/4879
    Call trace:
            ...
            kfree+0xdc/0x1d4
            create_or_delete_synth_event+0x60/0x1e8
            trace_parse_run_command+0x2bc/0x4b8
            synth_events_write+0x20/0x30
            vfs_write+0x200/0x830
            ...
    
    Allocated by task 4879:
            ...
            kstrdup+0x5c/0x98
            create_or_delete_synth_event+0x6c/0x1e8
            trace_parse_run_command+0x2bc/0x4b8
            synth_events_write+0x20/0x30
            vfs_write+0x200/0x830
            ...
    
    Freed by task 5464:
            ...
            kfree+0xdc/0x1d4
            create_or_delete_synth_event+0x60/0x1e8
            trace_parse_run_command+0x2bc/0x4b8
            synth_events_write+0x20/0x30
            vfs_write+0x200/0x830
            ...
    
    ================================================================
    Appendix 2. KASAN report use-after-free:
    
    BUG: KASAN: use-after-free in strlen+0x5c/0x7c
    Read of size 1 at addr ***** by task sh/5483
    sh: CPU: 7 PID: 5483 Comm: sh
            ...
            __asan_report_load1_noabort+0x34/0x44
            strlen+0x5c/0x7c
            tracing_log_err+0x60/0x444
            create_or_delete_synth_event+0xc4/0x204
            trace_parse_run_command+0x2bc/0x4b8
            synth_events_write+0x20/0x30
            vfs_write+0x200/0x830
            ...
    
    Allocated by task 5483:
            ...
            kstrdup+0x5c/0x98
            create_or_delete_synth_event+0x80/0x204
            trace_parse_run_command+0x2bc/0x4b8
            synth_events_write+0x20/0x30
            vfs_write+0x200/0x830
            ...
    
    Freed by task 5480:
            ...
            kfree+0xdc/0x1d4
            create_or_delete_synth_event+0x74/0x204
            trace_parse_run_command+0x2bc/0x4b8
            synth_events_write+0x20/0x30
            vfs_write+0x200/0x830
            ...
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230321110444.1587-1-Tze-nan.Wu@mediatek.com
    
    Fixes: 27c888da9867 ("tracing: Remove size restriction on synthetic event cmd error logging")
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Matthias Brugger <matthias.bgg@gmail.com>
    Cc: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Cc: "Tom Zanussi" <zanussi@kernel.org>
    Signed-off-by: Tze-nan Wu <Tze-nan.Wu@mediatek.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 101e8e6bbae5ce21f3e063bc9f12079a8e6cc886
Author: Song Yoong Siang <yoong.siang.song@intel.com>
Date:   Tue Apr 4 12:48:23 2023 +0800

    net: stmmac: Add queue reset into stmmac_xdp_open() function
    
    commit 24e3fce00c0b557491ff596c0682a29dee6fe848 upstream.
    
    Queue reset was moved out from __init_dma_rx_desc_rings() and
    __init_dma_tx_desc_rings() functions. Thus, the driver fails to transmit
    and receive packet after XDP prog setup.
    
    This commit adds the missing queue reset into stmmac_xdp_open() function.
    
    Fixes: f9ec5723c3db ("net: ethernet: stmicro: stmmac: move queue reset to dedicated functions")
    Cc: <stable@vger.kernel.org> # 6.0+
    Signed-off-by: Song Yoong Siang <yoong.siang.song@intel.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Link: https://lore.kernel.org/r/20230404044823.3226144-1-yoong.siang.song@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 106e64a2e6a519ed75c0dfdabd2f4c514b7a22be
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 4 13:02:49 2023 +0200

    ACPI: video: Add acpi_backlight=video quirk for Lenovo ThinkPad W530
    
    commit a5b2781dcab2c77979a4b8adda781d2543580901 upstream.
    
    The Lenovo ThinkPad W530 uses a nvidia k1000m GPU. When this gets used
    together with one of the older nvidia binary driver series (the latest
    series does not support it), then backlight control does not work.
    
    This is caused by commit 3dbc80a3e4c5 ("ACPI: video: Make backlight
    class device registration a separate step (v2)") combined with
    commit 5aa9d943e9b6 ("ACPI: video: Don't enable fallback path for
    creating ACPI backlight by default").
    
    After these changes the acpi_video# backlight device is only registered
    when requested by a GPU driver calling acpi_video_register_backlight()
    which the nvidia binary driver does not do.
    
    I realize that using the nvidia binary driver is not a supported use-case
    and users can workaround this by adding acpi_backlight=video on the kernel
    commandline, but the ThinkPad W530 is a popular model under Linux users,
    so it seems worthwhile to add a quirk for this.
    
    I will also email Nvidia asking them to make the driver call
    acpi_video_register_backlight() when an internal LCD panel is detected.
    So maybe the next maintenance release of the drivers will fix this...
    
    Fixes: 5aa9d943e9b6 ("ACPI: video: Don't enable fallback path for creating ACPI backlight by default")
    Cc: All applicable <stable@vger.kernel.org>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c2842a7fdac1d120d78a9c84d8a481d708c6a8b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 4 13:02:48 2023 +0200

    ACPI: video: Add acpi_backlight=video quirk for Apple iMac14,1 and iMac14,2
    
    commit 2699107989431d6db44f8a9e809ea74c387336d1 upstream.
    
    On the Apple iMac14,1 and iMac14,2 all-in-ones (monitors with builtin "PC")
    the connection between the GPU and the panel is seen by the GPU driver as
    regular DP instead of eDP, causing the GPU driver to never call
    acpi_video_register_backlight().
    
    (GPU drivers only call acpi_video_register_backlight() when an internal
     panel is detected, to avoid non working acpi_video# devices getting
     registered on desktops which unfortunately is a real issue.)
    
    Fix the missing acpi_video# backlight device on these all-in-ones by
    adding a acpi_backlight=video DMI quirk, so that video.ko will
    immediately register the backlight device instead of waiting for
    an acpi_video_register_backlight() call.
    
    Fixes: 5aa9d943e9b6 ("ACPI: video: Don't enable fallback path for creating ACPI backlight by default")
    Cc: All applicable <stable@vger.kernel.org>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9610adf8b2c807544b771194dc2d6e3a660933ca
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 4 13:02:47 2023 +0200

    ACPI: video: Make acpi_backlight=video work independent from GPU driver
    
    commit e506731c8f35699d746c615164ed620cd53c00ca upstream.
    
    Commit 3dbc80a3e4c5 ("ACPI: video: Make backlight class device
    registration a separate step (v2)") combined with
    commit 5aa9d943e9b6 ("ACPI: video: Don't enable fallback path for
    creating ACPI backlight by default")
    
    Means that the video.ko code now fully depends on the GPU driver calling
    acpi_video_register_backlight() for the acpi_video# backlight class
    devices to get registered.
    
    This means that if the GPU driver does not do this, acpi_backlight=video
    on the cmdline, or DMI quirks for selecting acpi_video# will not work.
    
    This is a problem on for example Apple iMac14,1 all-in-ones where
    the monitor's LCD panel shows up as a regular DP connection instead of
    eDP so the GPU driver will not call acpi_video_register_backlight() [1].
    
    Fix this by making video.ko directly register the acpi_video# devices
    when these have been explicitly requested either on the cmdline or
    through DMI quirks (rather then auto-detection being used).
    
    [1] GPU drivers only call acpi_video_register_backlight() when an internal
    panel is detected, to avoid non working acpi_video# devices getting
    registered on desktops which unfortunately is a real issue.
    
    Fixes: 5aa9d943e9b6 ("ACPI: video: Don't enable fallback path for creating ACPI backlight by default")
    Cc: All applicable <stable@vger.kernel.org>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be12e390c2469f5ca6f84bbc4bc7177458e13e10
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 4 13:02:46 2023 +0200

    ACPI: video: Add auto_detect arg to __acpi_video_get_backlight_type()
    
    commit 78dfc9d1d1abb9e400386fa9c5724a8f7d75e3b9 upstream.
    
    Allow callers of __acpi_video_get_backlight_type() to pass a pointer
    to a bool which will get set to false if the backlight-type comes from
    the cmdline or a DMI quirk and set to true if auto-detection was used.
    
    And make __acpi_video_get_backlight_type() non static so that it can
    be called directly outside of video_detect.c .
    
    While at it turn the acpi_video_get_backlight_type() and
    acpi_video_backlight_use_native() wrappers into static inline functions
    in include/acpi/video.h, so that we need to export one less symbol.
    
    Fixes: 5aa9d943e9b6 ("ACPI: video: Don't enable fallback path for creating ACPI backlight by default")
    Cc: All applicable <stable@vger.kernel.org>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b14abd688714c03317299783761318fb90ca1fbf
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Thu Mar 30 19:02:48 2023 +0200

    can: isotp: isotp_recvmsg(): use sock_recv_cmsgs() to get SOCK_RXQ_OVFL infos
    
    commit 0145462fc802cd447ef5d029758043c7f15b4b1e upstream.
    
    isotp.c was still using sock_recv_timestamp() which does not provide
    control messages to detect dropped PDUs in the receive path.
    
    Fixes: e057dd3fc20f ("can: add ISO 15765-2:2016 transport protocol")
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/all/20230330170248.62342-1-socketcan@hartkopp.net
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0bfe06c556981c091675ad34d9923cdad8ebedd
Author: Michal Sojka <michal.sojka@cvut.cz>
Date:   Fri Mar 31 14:55:11 2023 +0200

    can: isotp: isotp_ops: fix poll() to not report false EPOLLOUT events
    
    commit 79e19fa79cb5d5f1b3bf3e3ae24989ccb93c7b7b upstream.
    
    When using select()/poll()/epoll() with a non-blocking ISOTP socket to
    wait for when non-blocking write is possible, a false EPOLLOUT event
    is sometimes returned. This can happen at least after sending a
    message which must be split to multiple CAN frames.
    
    The reason is that isotp_sendmsg() returns -EAGAIN when tx.state is
    not equal to ISOTP_IDLE and this behavior is not reflected in
    datagram_poll(), which is used in isotp_ops.
    
    This is fixed by introducing ISOTP-specific poll function, which
    suppresses the EPOLLOUT events in that case.
    
    v2: https://lore.kernel.org/all/20230302092812.320643-1-michal.sojka@cvut.cz
    v1: https://lore.kernel.org/all/20230224010659.48420-1-michal.sojka@cvut.cz
        https://lore.kernel.org/all/b53a04a2-ba1f-3858-84c1-d3eb3301ae15@hartkopp.net
    
    Signed-off-by: Michal Sojka <michal.sojka@cvut.cz>
    Reported-by: Jakub Jira <jirajak2@fel.cvut.cz>
    Tested-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Fixes: e057dd3fc20f ("can: add ISO 15765-2:2016 transport protocol")
    Link: https://lore.kernel.org/all/20230331125511.372783-1-michal.sojka@cvut.cz
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db3f6340a7eb5951bf3202fcf429788691d74186
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Fri Mar 31 15:19:35 2023 +0200

    can: isotp: fix race between isotp_sendsmg() and isotp_release()
    
    commit 051737439eaee5bdd03d3c2ef5510d54a478fd05 upstream.
    
    As discussed with Dae R. Jeong and Hillf Danton here [1] the sendmsg()
    function in isotp.c might get into a race condition when restoring the
    former tx.state from the old_state.
    
    Remove the old_state concept and implement proper locking for the
    ISOTP_IDLE transitions in isotp_sendmsg(), inspired by a
    simplification idea from Hillf Danton.
    
    Introduce a new tx.state ISOTP_SHUTDOWN and use the same locking
    mechanism from isotp_release() which resolves a potential race between
    isotp_sendsmg() and isotp_release().
    
    [1] https://lore.kernel.org/linux-can/ZB%2F93xJxq%2FBUqAgG@dragonet
    
    v1: https://lore.kernel.org/all/20230331102114.15164-1-socketcan@hartkopp.net
    v2: https://lore.kernel.org/all/20230331123600.3550-1-socketcan@hartkopp.net
        take care of signal interrupts for wait_event_interruptible() in
        isotp_release()
    v3: https://lore.kernel.org/all/20230331130654.9886-1-socketcan@hartkopp.net
        take care of signal interrupts for wait_event_interruptible() in
        isotp_sendmsg() in the wait_tx_done case
    v4: https://lore.kernel.org/all/20230331131935.21465-1-socketcan@hartkopp.net
        take care of signal interrupts for wait_event_interruptible() in
        isotp_sendmsg() in ALL cases
    
    Cc: Dae R. Jeong <threeearcat@gmail.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Fixes: 4f027cba8216 ("can: isotp: split tx timer into transmission and timeout")
    Link: https://lore.kernel.org/all/20230331131935.21465-1-socketcan@hartkopp.net
    Cc: stable@vger.kernel.org
    [mkl: rephrase commit message]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c3fb22a6ec68258ee129a2e6b720f43dffc562f
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Tue Apr 4 09:31:28 2023 +0200

    can: j1939: j1939_tp_tx_dat_new(): fix out-of-bounds memory access
    
    commit b45193cb4df556fe6251b285a5ce44046dd36b4a upstream.
    
    In the j1939_tp_tx_dat_new() function, an out-of-bounds memory access
    could occur during the memcpy() operation if the size of skb->cb is
    larger than the size of struct j1939_sk_buff_cb. This is because the
    memcpy() operation uses the size of skb->cb, leading to a read beyond
    the struct j1939_sk_buff_cb.
    
    Updated the memcpy() operation to use the size of struct
    j1939_sk_buff_cb instead of the size of skb->cb. This ensures that the
    memcpy() operation only reads the memory within the bounds of struct
    j1939_sk_buff_cb, preventing out-of-bounds memory access.
    
    Additionally, add a BUILD_BUG_ON() to check that the size of skb->cb
    is greater than or equal to the size of struct j1939_sk_buff_cb. This
    ensures that the skb->cb buffer is large enough to hold the
    j1939_sk_buff_cb structure.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Reported-by: Shuangpeng Bai <sjb7183@psu.edu>
    Tested-by: Shuangpeng Bai <sjb7183@psu.edu>
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://groups.google.com/g/syzkaller/c/G_LL-C3plRs/m/-8xCi6dCAgAJ
    Link: https://lore.kernel.org/all/20230404073128.3173900-1-o.rempel@pengutronix.de
    Cc: stable@vger.kernel.org
    [mkl: rephrase commit message]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddca03d97daa7b07b60c52e3d3060762732c6666
Author: Christian Brauner <brauner@kernel.org>
Date:   Thu Mar 30 09:13:16 2023 +0200

    fs: drop peer group ids under namespace lock
    
    commit cb2239c198ad9fbd5aced22cf93e45562da781eb upstream.
    
    When cleaning up peer group ids in the failure path we need to make sure
    to hold on to the namespace lock. Otherwise another thread might just
    turn the mount from a shared into a non-shared mount concurrently.
    
    Link: https://lore.kernel.org/lkml/00000000000088694505f8132d77@google.com
    Fixes: 2a1867219c7b ("fs: add mount_setattr()")
    Reported-by: syzbot+8ac3859139c685c4f597@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org # 5.12+
    Message-Id: <20230330-vfs-mount_setattr-propagation-fix-v1-1-37548d91533b@kernel.org>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3caa69378107ace85644791b159258f1828693b1
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Thu Mar 30 10:52:23 2023 +0800

    ftrace: Fix issue that 'direct->addr' not restored in modify_ftrace_direct()
    
    commit 2a2d8c51defb446e8d89a83f42f8e5cd529111e9 upstream.
    
    Syzkaller report a WARNING: "WARN_ON(!direct)" in modify_ftrace_direct().
    
    Root cause is 'direct->addr' was changed from 'old_addr' to 'new_addr' but
    not restored if error happened on calling ftrace_modify_direct_caller().
    Then it can no longer find 'direct' by that 'old_addr'.
    
    To fix it, restore 'direct->addr' to 'old_addr' explicitly in error path.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230330025223.1046087-1-zhengyejian1@huawei.com
    
    Cc: stable@vger.kernel.org
    Cc: <mhiramat@kernel.org>
    Cc: <mark.rutland@arm.com>
    Cc: <ast@kernel.org>
    Cc: <daniel@iogearbox.net>
    Fixes: 8a141dd7f706 ("ftrace: Fix modify_ftrace_direct.")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68973c84ea231fae8d45152853a5a5c1fd93697a
Author: John Keeping <john@metanate.com>
Date:   Mon Mar 27 18:36:46 2023 +0100

    ftrace: Mark get_lock_parent_ip() __always_inline
    
    commit ea65b41807a26495ff2a73dd8b1bab2751940887 upstream.
    
    If the compiler decides not to inline this function then preemption
    tracing will always show an IP inside the preemption disabling path and
    never the function actually calling preempt_{enable,disable}.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230327173647.1690849-1-john@metanate.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Fixes: f904f58263e1d ("sched/debug: Fix preempt_disable_ip recording for preempt_disable()")
    Signed-off-by: John Keeping <john@metanate.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 023036e38923240350e8ddaca46c62f3d1579176
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Wed Mar 22 13:24:49 2023 -0700

    perf/core: Fix the same task check in perf_event_set_output
    
    [ Upstream commit 24d3ae2f37d8bc3c14b31d353c5d27baf582b6a6 ]
    
    The same task check in perf_event_set_output has some potential issues
    for some usages.
    
    For the current perf code, there is a problem if using of
    perf_event_open() to have multiple samples getting into the same mmap’d
    memory when they are both attached to the same process.
    https://lore.kernel.org/all/92645262-D319-4068-9C44-2409EF44888E@gmail.com/
    Because the event->ctx is not ready when the perf_event_set_output() is
    invoked in the perf_event_open().
    
    Besides the above issue, before the commit bd2756811766 ("perf: Rewrite
    core context handling"), perf record can errors out when sampling with
    a hardware event and a software event as below.
     $ perf record -e cycles,dummy --per-thread ls
     failed to mmap with 22 (Invalid argument)
    That's because that prior to the commit a hardware event and a software
    event are from different task context.
    
    The problem should be a long time issue since commit c3f00c70276d
    ("perk: Separate find_get_context() from event initialization").
    
    The task struct is stored in the event->hw.target for each per-thread
    event. It is a more reliable way to determine whether two events are
    attached to the same task.
    
    The event->hw.target was also introduced several years ago by the
    commit 50f16a8bf9d7 ("perf: Remove type specific target pointers"). It
    can not only be used to fix the issue with the current code, but also
    back port to fix the issues with an older kernel.
    
    Note: The event->hw.target was introduced later than commit
    c3f00c70276d. The patch may cannot be applied between the commit
    c3f00c70276d and commit 50f16a8bf9d7. Anybody that wants to back-port
    this at that period may have to find other solutions.
    
    Fixes: c3f00c70276d ("perf: Separate find_get_context() from event initialization")
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Link: https://lkml.kernel.org/r/20230322202449.512091-1-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2eb778aaceafca546cd2e9b4da59a628f68c344
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Wed Mar 22 11:59:26 2023 +0800

    block: don't set GD_NEED_PART_SCAN if scan partition failed
    
    [ Upstream commit 3723091ea1884d599cc8b8bf719d6f42e8d4d8b1 ]
    
    Currently if disk_scan_partitions() failed, GD_NEED_PART_SCAN will still
    set, and partition scan will be proceed again when blkdev_get_by_dev()
    is called. However, this will cause a problem that re-assemble partitioned
    raid device will creat partition for underlying disk.
    
    Test procedure:
    
    mdadm -CR /dev/md0 -l 1 -n 2 /dev/sda /dev/sdb -e 1.0
    sgdisk -n 0:0:+100MiB /dev/md0
    blockdev --rereadpt /dev/sda
    blockdev --rereadpt /dev/sdb
    mdadm -S /dev/md0
    mdadm -A /dev/md0 /dev/sda /dev/sdb
    
    Test result: underlying disk partition and raid partition can be
    observed at the same time
    
    Note that this can still happen in come corner cases that
    GD_NEED_PART_SCAN can be set for underlying disk while re-assemble raid
    device.
    
    Fixes: e5cfefa97bcc ("block: fix scan partition for exclusively open device again")
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 231a49460ac0203270da2471928d392e5586370f
Author: Ming Lei <ming.lei@redhat.com>
Date:   Thu Apr 6 20:40:59 2023 +0800

    block: ublk: make sure that block size is set correctly
    
    [ Upstream commit 1d1665279a845d16c93687389e364386e3fe0f38 ]
    
    block size is one very key setting for block layer, and bad block size
    could panic kernel easily.
    
    Make sure that block size is set correctly.
    
    Meantime if ublk_validate_params() fails, clear ub->params so that disk
    is prevented from being added.
    
    Fixes: 71f28f3136af ("ublk_drv: add io_uring based userspace block driver")
    Reported-and-tested-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb9ec305e7649aa76e6055d77cddd2bb691fd74a
Author: Thiago Rafael Becker <tbecker@redhat.com>
Date:   Wed Apr 5 10:16:48 2023 -0300

    cifs: sanitize paths in cifs_update_super_prepath.
    
    [ Upstream commit d19342c6609b67f2ba83b9eccca2777e3687f625 ]
    
    After a server reboot, clients are failing to move files with ENOENT.
    This is caused by DFS referrals containing multiple separators, which
    the server move call doesn't recognize.
    
    v1: Initial patch.
    v2: Move prototype to header.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2182472
    Fixes: a31080899d5f ("cifs: sanitize multiple delimiters in prepath")
    Actually-Fixes: 24e0a1eff9e2 ("cifs: switch to new mount api")
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Thiago Rafael Becker <tbecker@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 012c045d612806bcdc0d0db85393cb0589233f9f
Author: Keith Busch <kbusch@kernel.org>
Date:   Mon Apr 3 13:09:25 2023 -0700

    nvme: fix discard support without oncs
    
    [ Upstream commit d3205ab75e99a47539ec91ef85ba488f4ddfeaa9 ]
    
    The device can report discard support without setting the ONCS DSM bit.
    When not set, the driver clears max_discard_size expecting it to be set
    later. We don't know the size until we have the namespace format,
    though, so setting it is deferred until configuring one, but the driver
    was abandoning the discard settings due to that initial clearing.
    
    Move the max_discard_size calculation above the check for a '0' discard
    size.
    
    Fixes: 1a86924e4f46475 ("nvme: fix interpretation of DMRSL")
    Reported-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Tested-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e06a68fbbfcd8576eee8f7139fa2b13c9b72e91
Author: Zhong Jinghua <zhongjinghua@huawei.com>
Date:   Wed Mar 29 15:17:39 2023 +0800

    scsi: iscsi_tcp: Check that sock is valid before iscsi_set_param()
    
    [ Upstream commit 48b19b79cfa37b1e50da3b5a8af529f994c08901 ]
    
    The validity of sock should be checked before assignment to avoid incorrect
    values. Commit 57569c37f0ad ("scsi: iscsi: iscsi_tcp: Fix null-ptr-deref
    while calling getpeername()") introduced this change which may lead to
    inconsistent values of tcp_sw_conn->sendpage and conn->datadgst_en.
    
    Fix the issue by moving the position of the assignment.
    
    Fixes: 57569c37f0ad ("scsi: iscsi: iscsi_tcp: Fix null-ptr-deref while calling getpeername()")
    Signed-off-by: Zhong Jinghua <zhongjinghua@huawei.com>
    Link: https://lore.kernel.org/r/20230329071739.2175268-1-zhongjinghua@huaweicloud.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44374911ac63f769c442f56fdfadea673c5f4425
Author: Li Zetao <lizetao1@huawei.com>
Date:   Sat Mar 25 11:00:04 2023 +0000

    scsi: qla2xxx: Fix memory leak in qla2x00_probe_one()
    
    [ Upstream commit 85ade4010e13ef152ea925c74d94253db92e5428 ]
    
    There is a memory leak reported by kmemleak:
    
      unreferenced object 0xffffc900003f0000 (size 12288):
        comm "modprobe", pid 19117, jiffies 4299751452 (age 42490.264s)
        hex dump (first 32 bytes):
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<00000000629261a8>] __vmalloc_node_range+0xe56/0x1110
          [<0000000001906886>] __vmalloc_node+0xbd/0x150
          [<000000005bb4dc34>] vmalloc+0x25/0x30
          [<00000000a2dc1194>] qla2x00_create_host+0x7a0/0xe30 [qla2xxx]
          [<0000000062b14b47>] qla2x00_probe_one+0x2eb8/0xd160 [qla2xxx]
          [<00000000641ccc04>] local_pci_probe+0xeb/0x1a0
    
    The root cause is traced to an error-handling path in qla2x00_probe_one()
    when the adapter "base_vha" initialize failed. The fab_scan_rp "scan.l" is
    used to record the port information and it is allocated in
    qla2x00_create_host(). However, it is not released in the error handling
    path "probe_failed".
    
    Fix this by freeing the memory of "scan.l" when an error occurs in the
    adapter initialization process.
    
    Fixes: a4239945b8ad ("scsi: qla2xxx: Add switch command to simplify fabric discovery")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Link: https://lore.kernel.org/r/20230325110004.363898-1-lizetao1@huawei.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac48787f58d1068f4e06d627c1135784d64b4c72
Author: Wojciech Lukowicz <wlukowicz01@gmail.com>
Date:   Sat Apr 1 20:50:39 2023 +0100

    io_uring: fix memory leak when removing provided buffers
    
    [ Upstream commit b4a72c0589fdea6259720375426179888969d6a2 ]
    
    When removing provided buffers, io_buffer structs are not being disposed
    of, leading to a memory leak. They can't be freed individually, because
    they are allocated in page-sized groups. They need to be added to some
    free list instead, such as io_buffers_cache. All callers already hold
    the lock protecting it, apart from when destroying buffers, so had to
    extend the lock there.
    
    Fixes: cc3cec8367cb ("io_uring: speedup provided buffer handling")
    Signed-off-by: Wojciech Lukowicz <wlukowicz01@gmail.com>
    Link: https://lore.kernel.org/r/20230401195039.404909-2-wlukowicz01@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd4081fa1cd9563d112155a5aa58fbba7bb4f647
Author: Wojciech Lukowicz <wlukowicz01@gmail.com>
Date:   Sat Apr 1 20:50:38 2023 +0100

    io_uring: fix return value when removing provided buffers
    
    [ Upstream commit c0921e51dab767ef5adf6175c4a0ba3c6e1074a3 ]
    
    When a request to remove buffers is submitted, and the given number to be
    removed is larger than available in the specified buffer group, the
    resulting CQE result will be the number of removed buffers + 1, which is
    1 more than it should be.
    
    Previously, the head was part of the list and it got removed after the
    loop, so the increment was needed. Now, the head is not an element of
    the list, so the increment shouldn't be there anymore.
    
    Fixes: dbc7d452e7cf ("io_uring: manage provided buffers strictly ordered")
    Signed-off-by: Wojciech Lukowicz <wlukowicz01@gmail.com>
    Link: https://lore.kernel.org/r/20230401195039.404909-2-wlukowicz01@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f03d09b090cd07906917ac757e0efb28f37d2e4
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Fri Jan 20 13:46:45 2023 +0100

    iio: adc: ad7791: fix IRQ flags
    
    [ Upstream commit 0c6ef985a1fd8a74dcb5cad941ddcadd55cb8697 ]
    
    The interrupt is triggered on the falling edge rather than being a level
    low interrupt.
    
    Fixes: da4d3d6bb9f6 ("iio: adc: ad-sigma-delta: Allow custom IRQ flags")
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20230120124645.819910-1-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c8fb43419a99dd17a86b84c85100b13b0c57f46
Author: Keith Busch <kbusch@kernel.org>
Date:   Fri Mar 31 11:00:56 2023 -0700

    blk-mq: directly poll requests
    
    commit 38a8c4d1d45006841f0643f4cb29b5e50758837c upstream.
    
    Polling needs a bio with a valid bi_bdev, but neither of those are
    guaranteed for polled driver requests. Make request based polling
    directly use blk-mq's polling function instead.
    
    When executing a request from a polled hctx, we know the request's
    cookie, and that it's from a live blk-mq queue that supports polling, so
    we can safely skip everything that bio_poll provides.
    
    Cc: stable@kernel.org
    Reported-by: Martin Belanger <Martin.Belanger@dell.com>
    Reported-by: Daniel Wagner <dwagner@suse.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Tested-by: Daniel Wagner <dwagner@suse.de>
    Revieded-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Tested-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Link: https://lore.kernel.org/r/20230331180056.1155862-1-kbusch@meta.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a62d771e514ea9c111daa66739143bf45ded49c
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Mar 16 16:34:26 2023 -0400

    counter: 104-quad-8: Fix Synapse action reported for Index signals
    
    commit 00f4bc5184c19cb33f468f1ea409d70d19f8f502 upstream.
    
    Signal 16 and higher represent the device's Index lines. The
    priv->preset_enable array holds the device configuration for these Index
    lines. The preset_enable configuration is active low on the device, so
    invert the conditional check in quad8_action_read() to properly handle
    the logical state of preset_enable.
    
    Fixes: f1d8a071d45b ("counter: 104-quad-8: Add Generic Counter interface support")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230316203426.224745-1-william.gray@linaro.org/
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6284b686c276ac5e40759e5e14a4629c10376c0d
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Sun Mar 12 19:15:49 2023 -0400

    counter: 104-quad-8: Fix race condition between FLAG and CNTR reads
    
    commit 4aa3b75c74603c3374877d5fd18ad9cc3a9a62ed upstream.
    
    The Counter (CNTR) register is 24 bits wide, but we can have an
    effective 25-bit count value by setting bit 24 to the XOR of the Borrow
    flag and Carry flag. The flags can be read from the FLAG register, but a
    race condition exists: the Borrow flag and Carry flag are instantaneous
    and could change by the time the count value is read from the CNTR
    register.
    
    Since the race condition could result in an incorrect 25-bit count
    value, remove support for 25-bit count values from this driver;
    hard-coded maximum count values are replaced by a LS7267_CNTR_MAX define
    for consistency and clarity.
    
    Fixes: 28e5d3bb0325 ("iio: 104-quad-8: Add IIO support for the ACCES 104-QUAD-8")
    Cc: <stable@vger.kernel.org> # 6.1.x
    Cc: <stable@vger.kernel.org> # 6.2.x
    Link: https://lore.kernel.org/r/20230312231554.134858-1-william.gray@linaro.org/
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3d2f71fbf09c43cd9750616c25ce087ff077a79
Author: Steve Clevenger <scclevenger@os.amperecomputing.com>
Date:   Mon Feb 27 16:54:32 2023 -0700

    coresight-etm4: Fix for() loop drvdata->nr_addr_cmp range bug
    
    commit bf84937e882009075f57fd213836256fc65d96bc upstream.
    
    In etm4_enable_hw, fix for() loop range to represent address comparator pairs.
    
    Fixes: 2e1cdfe184b5 ("coresight-etm4x: Adding CoreSight ETM4x driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve Clevenger <scclevenger@os.amperecomputing.com>
    Reviewed-by: James Clark <james.clark@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/4a4ee61ce8ef402615a4528b21a051de3444fb7b.1677540079.git.scclevenger@os.amperecomputing.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13ec3c238f4b398e60c8fafdeabcbe31b59f5e9e
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Tue Mar 21 10:45:30 2023 +0000

    coresight: etm4x: Do not access TRCIDR1 for identification
    
    commit 735e7b30a53a1679c050cddb73f5e5316105d2e3 upstream.
    
    CoreSight ETM4x architecture clearly provides ways to identify a device
    via registers in the "Management" class, TRCDEVARCH and TRCDEVTYPE. These
    registers can be accessed without the Trace domain being powered on.
    We additionally added TRCIDR1 as fallback in order to cover for any
    ETMs that may not have implemented TRCDEVARCH. So far, nobody has
    reported hitting a WARNING we placed to catch such systems.
    
    Also, more importantly it is problematic to access TRCIDR1, which is a
    "Trace" register via MMIO access, without clearing the OSLK. But we cannot
    mess with the OSLK until we know for sure that this is an ETMv4 device.
    Thus, this kind of creates a chicken and egg problem unnecessarily for
    systems "which are compliant" to the ETMv4 architecture.
    
    Let us remove the TRCIDR1 fall back check and rely only on TRCDEVARCH.
    
    Fixes: 8b94db1edaee ("coresight: etm4x: Use TRCDEVARCH for component discovery")
    Cc: stable@vger.kernel.org
    Reported-by: Steve Clevenger <scclevenger@os.amperecomputing.com>
    Link: https://lore.kernel.org/all/143540e5623d4c7393d24833f2b80600d8d745d2.1677881753.git.scclevenger@os.amperecomputing.com/
    Cc: Mike Leach <mike.leach@linaro.org>
    Cc: James Clark <james.clark@arm.com>
    Reviewed-by: Mike Leach <mike.leach@linaro.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20230321104530.1547136-1-suzuki.poulose@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54df8e39ce257bc668427dc3bac6e1625e2e7c96
Author: Muchun Song <muchun.song@linux.dev>
Date:   Thu Mar 23 10:50:03 2023 +0800

    mm: kfence: fix handling discontiguous page
    
    commit 1f2803b2660f4b04d48d065072c0ae0c9ca255fd upstream.
    
    The struct pages could be discontiguous when the kfence pool is allocated
    via alloc_contig_pages() with CONFIG_SPARSEMEM and
    !CONFIG_SPARSEMEM_VMEMMAP.
    
    This may result in setting PG_slab and memcg_data to a arbitrary
    address (may be not used as a struct page), which in the worst case
    might corrupt the kernel.
    
    So the iteration should use nth_page().
    
    Link: https://lkml.kernel.org/r/20230323025003.94447-1-songmuchun@bytedance.com
    Fixes: 0ce20dd84089 ("mm: add Kernel Electric-Fence infrastructure")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Marco Elver <elver@google.com>
    Reviewed-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: SeongJae Park <sjpark@amazon.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 476699a8a7397bb5a147d256ed0c848d4e26b318
Author: Muchun Song <muchun.song@linux.dev>
Date:   Mon Mar 20 11:00:59 2023 +0800

    mm: kfence: fix PG_slab and memcg_data clearing
    
    commit 3ee2d7471fa4963a2ced0a84f0653ce88b43c5b2 upstream.
    
    It does not reset PG_slab and memcg_data when KFENCE fails to initialize
    kfence pool at runtime.  It is reporting a "Bad page state" message when
    kfence pool is freed to buddy.  The checking of whether it is a compound
    head page seems unnecessary since we already guarantee this when
    allocating kfence pool.   Remove the check to simplify the code.
    
    Link: https://lkml.kernel.org/r/20230320030059.20189-1-songmuchun@bytedance.com
    Fixes: 0ce20dd84089 ("mm: add Kernel Electric-Fence infrastructure")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Marco Elver <elver@google.com>
    Cc: Roman Gushchin <roman.gushchin@linux.dev>
    Cc: SeongJae Park <sjpark@amazon.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc54e4ea3190e953920be207d5fbf0371a683af5
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Mar 22 07:33:00 2023 -0700

    KVM: nVMX: Do not report error code when synthesizing VM-Exit from Real Mode
    
    commit 80962ec912db56d323883154efc2297473e692cb upstream.
    
    Don't report an error code to L1 when synthesizing a nested VM-Exit and
    L2 is in Real Mode.  Per Intel's SDM, regarding the error code valid bit:
    
      This bit is always 0 if the VM exit occurred while the logical processor
      was in real-address mode (CR0.PE=0).
    
    The bug was introduced by a recent fix for AMD's Paged Real Mode, which
    moved the error code suppression from the common "queue exception" path
    to the "inject exception" path, but missed VMX's "synthesize VM-Exit"
    path.
    
    Fixes: b97f07458373 ("KVM: x86: determine if an exception has an error code only when injecting it.")
    Cc: stable@vger.kernel.org
    Cc: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230322143300.2209476-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f35a72fcc8bb2ff2df6a18226d1f272dd1f03e8
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Mar 22 07:32:59 2023 -0700

    KVM: x86: Clear "has_error_code", not "error_code", for RM exception injection
    
    commit 6c41468c7c12d74843bb414fc00307ea8a6318c3 upstream.
    
    When injecting an exception into a vCPU in Real Mode, suppress the error
    code by clearing the flag that tracks whether the error code is valid, not
    by clearing the error code itself.  The "typo" was introduced by recent
    fix for SVM's funky Paged Real Mode.
    
    Opportunistically hoist the logic above the tracepoint so that the trace
    is coherent with respect to what is actually injected (this was also the
    behavior prior to the buggy commit).
    
    Fixes: b97f07458373 ("KVM: x86: determine if an exception has an error code only when injecting it.")
    Cc: stable@vger.kernel.org
    Cc: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230322143300.2209476-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da429cddabe0701469534c8dc7a11e2ccd9e098e
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Mar 29 12:45:35 2023 -0500

    x86/ACPI/boot: Use FADT version to check support for online capable
    
    commit a74fabfbd1b7013045afc8cc541e6cab3360ccb5 upstream.
    
    ACPI 6.3 introduced the online capable bit, and also introduced MADT
    version 5.
    
    Latter was used to distinguish whether the offset storing online capable
    could be used. However ACPI 6.2b has MADT version "45" which is for
    an errata version of the ACPI 6.2 spec.  This means that the Linux code
    for detecting availability of MADT will mistakenly flag ACPI 6.2b as
    supporting online capable which is inaccurate as it's an ACPI 6.3 feature.
    
    Instead use the FADT major and minor revision fields to distinguish this.
    
      [ bp: Massage. ]
    
    Fixes: aa06e20f1be6 ("x86/ACPI: Don't add CPUs that are not online capable")
    Reported-by: Eric DeVolder <eric.devolder@oracle.com>
    Reported-by: Borislav Petkov <bp@alien8.de>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/943d2445-84df-d939-f578-5d8240d342cc@unsolicited.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29e8d76446e876be21833a3c3bb2f7c6d1a709b4
Author: Eric DeVolder <eric.devolder@oracle.com>
Date:   Mon Mar 27 15:10:26 2023 -0400

    x86/acpi/boot: Correct acpi_is_processor_usable() check
    
    commit fed8d8773b8ea68ad99d9eee8c8343bef9da2c2c upstream.
    
    The logic in acpi_is_processor_usable() requires the online capable
    bit be set for hotpluggable CPUs.  The online capable bit has been
    introduced in ACPI 6.3.
    
    However, for ACPI revisions < 6.3 which do not support that bit, CPUs
    should be reported as usable, not the other way around.
    
    Reverse the check.
    
      [ bp: Rewrite commit message. ]
    
    Fixes: e2869bd7af60 ("x86/acpi/boot: Do not register processors that cannot be onlined for x2APIC")
    Suggested-by: Miguel Luis <miguel.luis@oracle.com>
    Suggested-by: Boris Ostrovsky <boris.ovstrosky@oracle.com>
    Signed-off-by: Eric DeVolder <eric.devolder@oracle.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: David R <david@unsolicited.net>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230327191026.3454-2-eric.devolder@oracle.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc53c92b7c96def1a4f7c77995f4b99ebf708b65
Author: Andy Chi <andy.chi@canonical.com>
Date:   Fri Mar 31 16:32:41 2023 +0800

    ALSA: hda/realtek: fix mute/micmute LEDs for a HP ProBook
    
    commit 9fdc1605c504204e0fdec7892b29c916579e06f3 upstream.
    
    There is a HP ProBook which using ALC236 codec and need the
    ALC236_FIXUP_HP_MUTE_LED_MICMUTE_VREF quirk to make mute LED and
    micmute LED work.
    
    Signed-off-by: Andy Chi <andy.chi@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230331083242.58416-1-andy.chi@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f66a18f8915cd6ea466a9c5160959a859c6b5faa
Author: Jeremy Soller <jeremy@system76.com>
Date:   Fri Mar 31 10:23:17 2023 -0600

    ALSA: hda/realtek: Add quirk for Clevo X370SNW
    
    commit 36d4d213c6d4fffae2645a601e8ae996de4c3645 upstream.
    
    Fixes speaker output and headset detection on Clevo X370SNW.
    
    Signed-off-by: Jeremy Soller <jeremy@system76.com>
    Signed-off-by: Tim Crawford <tcrawford@system76.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230331162317.14992-1-tcrawford@system76.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8334a0c535d0f0b4d64926c8fe0922ed98f7d43
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sat Apr 1 13:21:04 2023 +0900

    ksmbd: fix slab-out-of-bounds in init_smb2_rsp_hdr
    
    commit dc8289f912387c3bcfbc5d2db29c8947fa207c11 upstream.
    
    When smb1 mount fails, KASAN detect slab-out-of-bounds in
    init_smb2_rsp_hdr like the following one.
    For smb1 negotiate(56bytes) , init_smb2_rsp_hdr() for smb2 is called.
    The issue occurs while handling smb1 negotiate as smb2 server operations.
    Add smb server operations for smb1 (get_cmd_val, init_rsp_hdr,
    allocate_rsp_buf, check_user_session) to handle smb1 negotiate so that
    smb2 server operation does not handle it.
    
    [  411.400423] CIFS: VFS: Use of the less secure dialect vers=1.0 is
    not recommended unless required for access to very old servers
    [  411.400452] CIFS: Attempting to mount \\192.168.45.139\homes
    [  411.479312] ksmbd: init_smb2_rsp_hdr : 492
    [  411.479323] ==================================================================
    [  411.479327] BUG: KASAN: slab-out-of-bounds in
    init_smb2_rsp_hdr+0x1e2/0x1f4 [ksmbd]
    [  411.479369] Read of size 16 at addr ffff888488ed0734 by task kworker/14:1/199
    
    [  411.479379] CPU: 14 PID: 199 Comm: kworker/14:1 Tainted: G
     OE      6.1.21 #3
    [  411.479386] Hardware name: ASUSTeK COMPUTER INC. Z10PA-D8
    Series/Z10PA-D8 Series, BIOS 3801 08/23/2019
    [  411.479390] Workqueue: ksmbd-io handle_ksmbd_work [ksmbd]
    [  411.479425] Call Trace:
    [  411.479428]  <TASK>
    [  411.479432]  dump_stack_lvl+0x49/0x63
    [  411.479444]  print_report+0x171/0x4a8
    [  411.479452]  ? kasan_complete_mode_report_info+0x3c/0x200
    [  411.479463]  ? init_smb2_rsp_hdr+0x1e2/0x1f4 [ksmbd]
    [  411.479497]  kasan_report+0xb4/0x130
    [  411.479503]  ? init_smb2_rsp_hdr+0x1e2/0x1f4 [ksmbd]
    [  411.479537]  kasan_check_range+0x149/0x1e0
    [  411.479543]  memcpy+0x24/0x70
    [  411.479550]  init_smb2_rsp_hdr+0x1e2/0x1f4 [ksmbd]
    [  411.479585]  handle_ksmbd_work+0x109/0x760 [ksmbd]
    [  411.479616]  ? _raw_spin_unlock_irqrestore+0x50/0x50
    [  411.479624]  ? smb3_encrypt_resp+0x340/0x340 [ksmbd]
    [  411.479656]  process_one_work+0x49c/0x790
    [  411.479667]  worker_thread+0x2b1/0x6e0
    [  411.479674]  ? process_one_work+0x790/0x790
    [  411.479680]  kthread+0x177/0x1b0
    [  411.479686]  ? kthread_complete_and_exit+0x30/0x30
    [  411.479692]  ret_from_fork+0x22/0x30
    [  411.479702]  </TASK>
    
    Fixes: 39b291b86b59 ("ksmbd: return unsupported error on smb1 mount")
    Cc: stable@vger.kernel.org
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1f461ed5d243090442a9c1b06dce3512f44296e
Author: Marios Makassikis <mmakassikis@freebox.fr>
Date:   Thu Mar 16 14:40:43 2023 +0100

    ksmbd: do not call kvmalloc() with __GFP_NORETRY | __GFP_NO_WARN
    
    commit e416ea62a9166e6075a07a970cc5bf79255d2700 upstream.
    
    Commit 83dcedd5540d ("ksmbd: fix infinite loop in ksmbd_conn_handler_loop()"),
    changes GFP modifiers passed to kvmalloc(). This cause xfstests generic/551
    test to fail. We limit pdu length size according to connection status and
    maximum number of connections. In the rest, memory allocation of request
    is limited by credit management. so these flags are no longer needed.
    
    Fixes: 83dcedd5540d ("ksmbd: fix infinite loop in ksmbd_conn_handler_loop()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Marios Makassikis <mmakassikis@freebox.fr>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e736180eaf031704dcb9f43ad13eabbf5630e85e
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Fri Mar 17 12:30:34 2023 +0200

    serial: 8250: Prevent starting up DMA Rx on THRI interrupt
    
    commit 90b8596ac46043e4a782d9111f5b285251b13756 upstream.
    
    Hans de Goede reported Bluetooth adapters (HCIs) connected over an UART
    connection failed due corrupted Rx payload. The problem was narrowed
    down to DMA Rx starting on UART_IIR_THRI interrupt. The problem occurs
    despite LSR having DR bit set, which is precondition for attempting to
    start DMA Rx in the first place.
    
    From a debug patch:
    [x.807834] 8250irq: iir=cc lsr+saved=60 received=0/15 ier=0f dma_t/rx/err=0/0/0
    [x.808676] 8250irq: iir=c2 lsr+saved=61 received=0/0 ier=0f dma_t/rx/err=0/0/0
    [x.808776] 8250irq: iir=cc lsr+saved=60 received=1/12 ier=0d dma_t/rx/err=0/1/0
    [x.808870] Bluetooth: hci0: Frame reassembly failed (-84)
    
    In the debug snippet, received field indicates 1 byte was transferred
    over DMA and 12 bytes after that with the non-DMA Rx. The sole byte DMA
    handled was corrupted (gets zeroed) which leads to the HCI failure.
    
    This problem became apparent after commit e8ffbb71f783 ("serial: 8250:
    use THRE & __stop_tx also with DMA") changed Tx stop behavior. Tx stop
    is now triggered from a THRI interrupt.
    
    Despite that this problem looks like a HW bug, this fix is not adding
    UART_BUG_xx flag to the driver beucase it seems useful in general to
    avoid starting DMA when there are only a few bytes to transfer.
    Skipping DMA for small transfers avoids the extra overhead DMA incurs.
    
    Thus, don't setup DMA Rx on UART_IIR_THRI but leave it to a subsequent
    interrupt which has Rx a related IIR value.
    
    By returning false from handle_rx_dma(), the DMA vs non-DMA decision is
    postponed until either UART_IIR_RDI (FIFO threshold worth of bytes
    awaiting) or UART_IIR_TIMEOUT (inter-character timeout) triggers at a
    later time which allows better to discern whether the number of bytes
    warrants starting DMA or not.
    
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: e8ffbb71f783 ("serial: 8250: use THRE & __stop_tx also with DMA")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Acked-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230317103034.12881-1-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4230a94cbe37dd62c6f3f136596680c8685d2a1e
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Mar 17 10:46:57 2023 +0100

    dt-bindings: serial: renesas,scif: Fix 4th IRQ for 4-IRQ SCIFs
    
    commit 7b21f329ae0ab6361c0aebfc094db95821490cd1 upstream.
    
    The fourth interrupt on SCIF variants with four interrupts (RZ/A1) is
    the Break interrupt, not the Transmit End interrupt (like on SCI(g)).
    Update the description and interrupt name to fix this.
    
    Fixes: 384d00fae8e51f8f ("dt-bindings: serial: sh-sci: Convert to json-schema")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/719d1582e0ebbe3d674e3a48fc26295e1475a4c3.1679046394.git.geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1942ccb7d95f287a312fcbabfa8bc9ba501b1953
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Fri Mar 31 05:55:15 2023 +0900

    nilfs2: fix sysfs interface lifetime
    
    commit 42560f9c92cc43dce75dbf06cc0d840dced39b12 upstream.
    
    The current nilfs2 sysfs support has issues with the timing of creation
    and deletion of sysfs entries, potentially leading to null pointer
    dereferences, use-after-free, and lockdep warnings.
    
    Some of the sysfs attributes for nilfs2 per-filesystem instance refer to
    metadata file "cpfile", "sufile", or "dat", but
    nilfs_sysfs_create_device_group that creates those attributes is executed
    before the inodes for these metadata files are loaded, and
    nilfs_sysfs_delete_device_group which deletes these sysfs entries is
    called after releasing their metadata file inodes.
    
    Therefore, access to some of these sysfs attributes may occur outside of
    the lifetime of these metadata files, resulting in inode NULL pointer
    dereferences or use-after-free.
    
    In addition, the call to nilfs_sysfs_create_device_group() is made during
    the locking period of the semaphore "ns_sem" of nilfs object, so the
    shrinker call caused by the memory allocation for the sysfs entries, may
    derive lock dependencies "ns_sem" -> (shrinker) -> "locks acquired in
    nilfs_evict_inode()".
    
    Since nilfs2 may acquire "ns_sem" deep in the call stack holding other
    locks via its error handler __nilfs_error(), this causes lockdep to report
    circular locking.  This is a false positive and no circular locking
    actually occurs as no inodes exist yet when
    nilfs_sysfs_create_device_group() is called.  Fortunately, the lockdep
    warnings can be resolved by simply moving the call to
    nilfs_sysfs_create_device_group() out of "ns_sem".
    
    This fixes these sysfs issues by revising where the device's sysfs
    interface is created/deleted and keeping its lifetime within the lifetime
    of the metadata files above.
    
    Link: https://lkml.kernel.org/r/20230330205515.6167-1-konishi.ryusuke@gmail.com
    Fixes: dd70edbde262 ("nilfs2: integrate sysfs support into driver")
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+979fa7f9c0d086fdc282@syzkaller.appspotmail.com
      Link: https://lkml.kernel.org/r/0000000000003414b505f7885f7e@google.com
    Reported-by: syzbot+5b7d542076d9bddc3c6a@syzkaller.appspotmail.com
      Link: https://lkml.kernel.org/r/0000000000006ac86605f5f44eb9@google.com
    Cc: Viacheslav Dubeyko <slava@dubeyko.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bae009a2f1b7c2011d2e92d8c84868d315c0b97e
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Tue Mar 28 02:53:18 2023 +0900

    nilfs2: fix potential UAF of struct nilfs_sc_info in nilfs_segctor_thread()
    
    commit 6be49d100c22ffea3287a4b19d7639d259888e33 upstream.
    
    The finalization of nilfs_segctor_thread() can race with
    nilfs_segctor_kill_thread() which terminates that thread, potentially
    causing a use-after-free BUG as KASAN detected.
    
    At the end of nilfs_segctor_thread(), it assigns NULL to "sc_task" member
    of "struct nilfs_sc_info" to indicate the thread has finished, and then
    notifies nilfs_segctor_kill_thread() of this using waitqueue
    "sc_wait_task" on the struct nilfs_sc_info.
    
    However, here, immediately after the NULL assignment to "sc_task", it is
    possible that nilfs_segctor_kill_thread() will detect it and return to
    continue the deallocation, freeing the nilfs_sc_info structure before the
    thread does the notification.
    
    This fixes the issue by protecting the NULL assignment to "sc_task" and
    its notification, with spinlock "sc_state_lock" of the struct
    nilfs_sc_info.  Since nilfs_segctor_kill_thread() does a final check to
    see if "sc_task" is NULL with "sc_state_lock" locked, this can eliminate
    the race.
    
    Link: https://lkml.kernel.org/r/20230327175318.8060-1-konishi.ryusuke@gmail.com
    Reported-by: syzbot+b08ebcc22f8f3e6be43a@syzkaller.appspotmail.com
    Link: https://lkml.kernel.org/r/00000000000000660d05f7dfa877@google.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b347d5474225f2d8440020a44c2014f37b95b1ee
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Thu Mar 23 13:44:15 2023 +0800

    tty: serial: fsl_lpuart: avoid checking for transfer complete when UARTCTRL_SBK is asserted in lpuart32_tx_empty
    
    commit 9425914f3de6febbd6250395f56c8279676d9c3c upstream.
    
    According to LPUART RM, Transmission Complete Flag becomes 0 if queuing
    a break character by writing 1 to CTRL[SBK], so here need to avoid
    checking for transmission complete when UARTCTRL_SBK is asserted,
    otherwise the lpuart32_tx_empty may never get TIOCSER_TEMT.
    
    Commit 2411fd94ceaa("tty: serial: fsl_lpuart: skip waiting for
    transmission complete when UARTCTRL_SBK is asserted") only fix it in
    lpuart32_set_termios(), here also fix it in lpuart32_tx_empty().
    
    Fixes: 380c966c093e ("tty: serial: fsl_lpuart: add 32-bit register interface support")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Link: https://lore.kernel.org/r/20230323054415.20363-1-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fd57dd7a79d21ad90a8004b9dde6c80332208e1
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Tue Mar 21 11:47:50 2023 +0000

    tty: serial: sh-sci: Fix Rx on RZ/G2L SCI
    
    commit f92ed0cd9328aed918ebb0ebb64d259eccbcc6e7 upstream.
    
    SCI IP on RZ/G2L alike SoCs do not need regshift compared to other SCI
    IPs on the SH platform. Currently, it does regshift and configuring Rx
    wrongly. Drop adding regshift for RZ/G2L alike SoCs.
    
    Fixes: dfc80387aefb ("serial: sh-sci: Compute the regshift value for SCI ports")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Link: https://lore.kernel.org/r/20230321114753.75038-3-biju.das.jz@bp.renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a6dd54da5de274cb33a419a193e3103553b4e1f
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Fri Mar 17 15:04:03 2023 +0000

    tty: serial: sh-sci: Fix transmit end interrupt handler
    
    commit b43a18647f03c87e77d50d6fe74904b61b96323e upstream.
    
    The fourth interrupt on SCI port is transmit end interrupt compared to
    the break interrupt on other port types. So, shuffle the interrupts to fix
    the transmit end interrupt handler.
    
    Fixes: e1d0be616186 ("sh-sci: Add h8300 SCI")
    Cc: stable <stable@kernel.org>
    Suggested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Link: https://lore.kernel.org/r/20230317150403.154094-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85c3acbeef4147f712cc6344fcfb66aa91034dd1
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Thu Feb 23 10:00:59 2023 +0800

    iio: light: cm32181: Unregister second I2C client if present
    
    commit 099cc90a5a62e68b2fe3a42da011ab929b98bf73 upstream.
    
    If a second dummy client that talks to the actual I2C address was
    created in probe(), there should be a proper cleanup on driver and
    device removal to avoid leakage.
    
    So unregister the dummy client via another callback.
    
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Suggested-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: c1e62062ff54 ("iio: light: cm32181: Handle CM3218 ACPI devices with 2 I2C resources")
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2152281
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20230223020059.2013993-1-kai.heng.feng@canonical.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ba3466e6336e288d366d4909fb35181b3f77aba
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Thu Feb 16 11:14:51 2023 +0100

    iio: buffer: make sure O_NONBLOCK is respected
    
    commit 3da1814184582ed0faf039275a3f02e6f69944ee upstream.
    
    For output buffers, there's no guarantee that the buffer won't be full
    in the first iteration of the loop in which case we would block
    independently of userspace passing O_NONBLOCK or not. Fix it by always
    checking the flag before going to sleep.
    
    While at it (and as it's a bit related), refactored the loop so that the
    stop condition is 'written != n', i.e, run the loop until all data has
    been copied into the IIO buffers. This makes the code a bit simpler.
    
    Fixes: 9eeee3b0bf190 ("iio: Add output buffer support")
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
    Link: https://lore.kernel.org/r/20230216101452.591805-3-nuno.sa@analog.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1658d973b2f8fffd93d6d2ef6967e7dd6d207883
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Thu Feb 16 11:14:50 2023 +0100

    iio: buffer: correctly return bytes written in output buffers
    
    commit b5184a26a28fac1d708b0bfeeb958a9260c2924c upstream.
    
    If for some reason 'rb->access->write()' does not write the full
    requested data and the O_NONBLOCK is set, we would return 'n' to
    userspace which is not really truth. Hence, let's return the number of
    bytes we effectively wrote.
    
    Fixes: 9eeee3b0bf190 ("iio: Add output buffer support")
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
    Link: https://lore.kernel.org/r/20230216101452.591805-2-nuno.sa@analog.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59d667d7ae4673657843b985297bec067f0ed856
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Fri Mar 10 19:22:48 2023 -0500

    iio: dac: cio-dac: Fix max DAC write value check for 12-bit
    
    commit c3701185ee1973845db088d8b0fc443397ab0eb2 upstream.
    
    The CIO-DAC series of devices only supports DAC values up to 12-bit
    rather than 16-bit. Trying to write a 16-bit value results in only the
    lower 12 bits affecting the DAC output which is not what the user
    expects. Instead, adjust the DAC write value check to reject values
    larger than 12-bit so that they fail explicitly as invalid for the user.
    
    Fixes: 3b8df5fd526e ("iio: Add IIO support for the Measurement Computing CIO-DAC family")
    Cc: stable@vger.kernel.org
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/20230311002248.8548-1-william.gray@linaro.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c723a410a497048a069e4125136486f1f357da7a
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Sun Mar 12 14:09:33 2023 -0700

    iio: adc: ti-ads7950: Set `can_sleep` flag for GPIO chip
    
    commit 363c7dc72f79edd55bf1c4380e0fbf7f1bbc2c86 upstream.
    
    The ads7950 uses a mutex as well as SPI transfers in its GPIO callbacks.
    This means these callbacks can sleep and the `can_sleep` flag should be
    set.
    
    Having the flag set will make sure that warnings are generated when calling
    any of the callbacks from a potentially non-sleeping context.
    
    Fixes: c97dce792dc8 ("iio: adc: ti-ads7950: add GPIO support")
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: David Lechner <david@lechnology.com>
    Link: https://lore.kernel.org/r/20230312210933.2275376-1-lars@metafoo.de
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a09eb53a18f92ac60a1e0ab413cc45b779e92ac1
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Jan 18 12:06:23 2023 +0200

    iio: adc: qcom-spmi-adc5: Fix the channel name
    
    commit 701c875aded880013aacac608832995c4b052257 upstream.
    
    The node name can contain an address part which is unused
    by the driver. Moreover, this string is propagated into
    the userspace label, sysfs filenames *and breaking ABI*.
    
    Cut the address part out before assigning the channel name.
    
    Fixes: 4f47a236a23d ("iio: adc: qcom-spmi-adc5: convert to device properties")
    Reported-by: Marijn Suijten <marijn.suijten@somainline.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Marijn Suijten <marijn.suijten@somainline.org>
    Link: https://lore.kernel.org/r/20230118100623.42255-1-andriy.shevchenko@linux.intel.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a876adf4ad6d0d45e4d8efad32f7b865b3e75008
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 31 10:46:11 2023 +0100

    iio: adis16480: select CONFIG_CRC32
    
    commit d9b540ee461cca7edca0dd2c2a42625c6b9ffb8f upstream.
    
    In rare randconfig builds, the missing CRC32 helper causes
    a link error:
    
    ld.lld: error: undefined symbol: crc32_le
    >>> referenced by usercopy_64.c
    >>>               vmlinux.o:(adis16480_trigger_handler)
    
    Fixes: 941f130881fa ("iio: adis16480: support burst read function")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20230131094616.130238-1-arnd@kernel.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3ea2426cc224394516a97faed2087f14721a915
Author: Ian Ray <ian.ray@ge.com>
Date:   Fri Jan 27 14:57:14 2023 +0200

    drivers: iio: adc: ltc2497: fix LSB shift
    
    commit 6327a930ab7bfa1ab33bcdffd5f5f4b1e7131504 upstream.
    
    Correct the "sub_lsb" shift for the ltc2497 and drop the sub_lsb element
    which is now constant.
    
    An earlier version of the code shifted by 14 but this was a consequence
    of reading three bytes into a __be32 buffer and using be32_to_cpu(), so
    eight extra bits needed to be skipped.  Now we use get_unaligned_be24()
    and thus the additional skip is wrong.
    
    Fixes: 2187cfeb3626 ("drivers: iio: adc: ltc2497: LTC2499 support")
    Signed-off-by: Ian Ray <ian.ray@ge.com>
    Link: https://lore.kernel.org/r/20230127125714.44608-1-ian.ray@ge.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fc86605075122e0b0744635e3e9f3c43ab2c44c
Author: Bjørn Mork <bjorn@mork.no>
Date:   Tue Mar 28 20:41:31 2023 +0200

    USB: serial: option: add Quectel RM500U-CN modem
    
    commit 7708a3858e69db91a8b69487994f33b96d20192a upstream.
    
    This modem supports several modes with a class network function
    and a number of serial functions, all using ff/00/00
    
    The device ID is the same in all modes.
    
    RNDIS mode
    ----------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0900 Rev= 4.04
    S:  Manufacturer=Quectel
    S:  Product=RM500U-CN
    S:  SerialNumber=0123456789ABCDEF
    C:* #Ifs= 7 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=e0(wlcon) Sub=01 Prot=03
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=e0(wlcon) Sub=01 Prot=03 Driver=rndis_host
    E:  Ad=82(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    ECM mode
    --------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0900 Rev= 4.04
    S:  Manufacturer=Quectel
    S:  Product=RM500U-CN
    S:  SerialNumber=0123456789ABCDEF
    C:* #Ifs= 7 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=06 Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=82(I) Atr=03(Int.) MxPS=  16 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    NCM mode
    --------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  5 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0900 Rev= 4.04
    S:  Manufacturer=Quectel
    S:  Product=RM500U-CN
    S:  SerialNumber=0123456789ABCDEF
    C:* #Ifs= 7 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0d Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0d Prot=00 Driver=cdc_ncm
    E:  Ad=82(I) Atr=03(Int.) MxPS=  16 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=01 Driver=cdc_ncm
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=01 Driver=cdc_ncm
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Reported-by: Andrew Green <askgreen@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f91b9490a72cce685cc9a2d68af521c4c9a40340
Author: Enrico Sau <enrico.sau@gmail.com>
Date:   Tue Mar 14 10:00:59 2023 +0100

    USB: serial: option: add Telit FE990 compositions
    
    commit 773e8e7d07b753474b2ccd605ff092faaa9e65b9 upstream.
    
    Add the following Telit FE990 compositions:
    
    0x1080: tty, adb, rmnet, tty, tty, tty, tty
    0x1081: tty, adb, mbim, tty, tty, tty, tty
    0x1082: rndis, tty, adb, tty, tty, tty, tty
    0x1083: tty, adb, ecm, tty, tty, tty, tty
    
    Signed-off-by: Enrico Sau <enrico.sau@gmail.com>
    Link: https://lore.kernel.org/r/20230314090059.77876-1-enrico.sau@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9339f4b67417274b9e87543bd97dcb616cb4aae3
Author: RD Babiera <rdbabiera@google.com>
Date:   Wed Mar 29 21:51:59 2023 +0000

    usb: typec: altmodes/displayport: Fix configure initial pin assignment
    
    commit eddebe39602efe631b83ff8d03f26eba12cfd760 upstream.
    
    While determining the initial pin assignment to be sent in the configure
    message, using the DP_PIN_ASSIGN_DP_ONLY_MASK mask causes the DFP_U to
    send both Pin Assignment C and E when both are supported by the DFP_U and
    UFP_U. The spec (Table 5-7 DFP_U Pin Assignment Selection Mandates,
    VESA DisplayPort Alt Mode Standard v2.0) indicates that the DFP_U never
    selects Pin Assignment E when Pin Assignment C is offered.
    
    Update the DP_PIN_ASSIGN_DP_ONLY_MASK conditional to intially select only
    Pin Assignment C if it is available.
    
    Fixes: 0e3bb7d6894d ("usb: typec: Add driver for DisplayPort alternate mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: RD Babiera <rdbabiera@google.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20230329215159.2046932-1-rdbabiera@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2dc47de2874f557277b56164538ceb4e9a72e44
Author: Kees Jan Koster <kjkoster@kjkoster.org>
Date:   Sat Feb 18 15:18:30 2023 +0100

    USB: serial: cp210x: add Silicon Labs IFS-USB-DATACABLE IDs
    
    commit 71f8afa2b66e356f435b6141b4a9ccf953e18356 upstream.
    
    The Silicon Labs IFS-USB-DATACABLE is used in conjunction with for example
    the Quint UPSes. It is used to enable Modbus communication with the UPS to
    query configuration, power and battery status.
    
    Signed-off-by: Kees Jan Koster <kjkoster@kjkoster.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0105bcb9e5551cf784c2172956e41322949a2a47
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Thu Mar 30 18:02:24 2023 +0300

    usb: dwc3: pci: add support for the Intel Meteor Lake-S
    
    commit ec799c8a92e0be91e0940cc739a27f483242df65 upstream.
    
    This patch adds the necessary PCI ID for Intel Meteor Lake-S
    devices.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230330150224.89316-1-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 095eb65bba30a85251d8806ff6089010feefc868
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Fri Mar 31 05:06:00 2023 -0400

    usb: cdnsp: Fixes error: uninitialized symbol 'len'
    
    commit 1edf48991a783d00a3a18dc0d27c88139e4030a2 upstream.
    
    The patch 5bc38d33a5a1: "usb: cdnsp: Fixes issue with redundant
    Status Stage" leads to the following Smatch static checker warning:
    
      drivers/usb/cdns3/cdnsp-ep0.c:470 cdnsp_setup_analyze()
      error: uninitialized symbol 'len'.
    
    cc: <stable@vger.kernel.org>
    Fixes: 5bc38d33a5a1 ("usb: cdnsp: Fixes issue with redundant Status Stage")
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20230331090600.454674-1-pawell@cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 167c05646f67698ecd598a805238315e827ce4e1
Author: D Scott Phillips <scott@os.amperecomputing.com>
Date:   Thu Mar 30 17:30:54 2023 +0300

    xhci: also avoid the XHCI_ZERO_64B_REGS quirk with a passthrough iommu
    
    commit ecaa4902439298f6b0e29f47424a86b310a9ff4f upstream.
    
    Previously the quirk was skipped when no iommu was present. The same
    rationale for skipping the quirk also applies in the iommu.passthrough=1
    case.
    
    Skip applying the XHCI_ZERO_64B_REGS quirk if the device's iommu domain is
    passthrough.
    
    Fixes: 12de0a35c996 ("xhci: Add quirk to zero 64bit registers on Renesas PCIe controllers")
    Cc: stable <stable@kernel.org>
    Signed-off-by: D Scott Phillips <scott@os.amperecomputing.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20230330143056.1390020-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 745dbe21daf7e9c84655101d87ff118fb3ad057e
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu Mar 30 17:30:56 2023 +0300

    xhci: Free the command allocated for setting LPM if we return early
    
    commit f6caea4855553a8b99ba3ec23ecdb5ed8262f26c upstream.
    
    The command allocated to set exit latency LPM values need to be freed in
    case the command is never queued. This would be the case if there is no
    change in exit latency values, or device is missing.
    
    Reported-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/linux-usb/24263902-c9b3-ce29-237b-1c3d6918f4fe@alu.unizg.hr
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Fixes: 5c2a380a5aa8 ("xhci: Allocate separate command structures for each LPM command")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20230330143056.1390020-4-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 130c61c516cd0684282a8f6ab163281d60642fc5
Author: Wayne Chang <waynec@nvidia.com>
Date:   Mon Mar 27 17:55:48 2023 +0800

    usb: xhci: tegra: fix sleep in atomic call
    
    commit 4c7f9d2e413dc06a157c4e5dccde84aaf4655eb3 upstream.
    
    When we set the dual-role port to Host mode, we observed the following
    splat:
    [  167.057718] BUG: sleeping function called from invalid context at
    include/linux/sched/mm.h:229
    [  167.057872] Workqueue: events tegra_xusb_usb_phy_work
    [  167.057954] Call trace:
    [  167.057962]  dump_backtrace+0x0/0x210
    [  167.057996]  show_stack+0x30/0x50
    [  167.058020]  dump_stack_lvl+0x64/0x84
    [  167.058065]  dump_stack+0x14/0x34
    [  167.058100]  __might_resched+0x144/0x180
    [  167.058140]  __might_sleep+0x64/0xd0
    [  167.058171]  slab_pre_alloc_hook.constprop.0+0xa8/0x110
    [  167.058202]  __kmalloc_track_caller+0x74/0x2b0
    [  167.058233]  kvasprintf+0xa4/0x190
    [  167.058261]  kasprintf+0x58/0x90
    [  167.058285]  tegra_xusb_find_port_node.isra.0+0x58/0xd0
    [  167.058334]  tegra_xusb_find_port+0x38/0xa0
    [  167.058380]  tegra_xusb_padctl_get_usb3_companion+0x38/0xd0
    [  167.058430]  tegra_xhci_id_notify+0x8c/0x1e0
    [  167.058473]  notifier_call_chain+0x88/0x100
    [  167.058506]  atomic_notifier_call_chain+0x44/0x70
    [  167.058537]  tegra_xusb_usb_phy_work+0x60/0xd0
    [  167.058581]  process_one_work+0x1dc/0x4c0
    [  167.058618]  worker_thread+0x54/0x410
    [  167.058650]  kthread+0x188/0x1b0
    [  167.058672]  ret_from_fork+0x10/0x20
    
    The function tegra_xusb_padctl_get_usb3_companion eventually calls
    tegra_xusb_find_port and this in turn calls kasprintf which might sleep
    and so cannot be called from an atomic context.
    
    Fix this by moving the call to tegra_xusb_padctl_get_usb3_companion to
    the tegra_xhci_id_work function where it is really needed.
    
    Fixes: f836e7843036 ("usb: xhci-tegra: Add OTG support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Wayne Chang <waynec@nvidia.com>
    Signed-off-by: Haotien Hsu <haotienh@nvidia.com>
    Link: https://lore.kernel.org/r/20230327095548.1599470-1-haotienh@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a0e0f4773fe8032fb17e56f897bee32ce3cdc2b
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Mar 11 15:40:06 2023 +0100

    PCI/DOE: Fix memory leak with CONFIG_DEBUG_OBJECTS=y
    
    commit abf04be0e7071f2bcd39bf97ba407e7d4439785e upstream.
    
    After a pci_doe_task completes, its work_struct needs to be destroyed
    to avoid a memory leak with CONFIG_DEBUG_OBJECTS=y.
    
    Fixes: 9d24322e887b ("PCI/DOE: Add DOE mailbox support functions")
    Tested-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Reviewed-by: Davidlohr Bueso <dave@stgolabs.net>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: stable@vger.kernel.org # v6.0+
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Link: https://lore.kernel.org/r/775768b4912531c3b887d405fc51a50e465e1bf9.1678543498.git.lukas@wunner.de
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87f2d92fc892325418a88227fb6c4e6d71d12890
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Mar 11 15:40:05 2023 +0100

    PCI/DOE: Silence WARN splat with CONFIG_DEBUG_OBJECTS=y
    
    commit 92dc899c3b4927f3cfa23f55bf759171234b5802 upstream.
    
    Gregory Price reports a WARN splat with CONFIG_DEBUG_OBJECTS=y upon CXL
    probing because pci_doe_submit_task() invokes INIT_WORK() instead of
    INIT_WORK_ONSTACK() for a work_struct that was allocated on the stack.
    
    All callers of pci_doe_submit_task() allocate the work_struct on the
    stack, so replace INIT_WORK() with INIT_WORK_ONSTACK() as a backportable
    short-term fix.
    
    The long-term fix implemented by a subsequent commit is to move to a
    synchronous API which allocates the work_struct internally in the DOE
    library.
    
    Stacktrace for posterity:
    
    WARNING: CPU: 0 PID: 23 at lib/debugobjects.c:545 __debug_object_init.cold+0x18/0x183
    CPU: 0 PID: 23 Comm: kworker/u2:1 Not tainted 6.1.0-0.rc1.20221019gitaae703b02f92.17.fc38.x86_64 #1
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    Call Trace:
     pci_doe_submit_task+0x5d/0xd0
     pci_doe_discovery+0xb4/0x100
     pcim_doe_create_mb+0x219/0x290
     cxl_pci_probe+0x192/0x430
     local_pci_probe+0x41/0x80
     pci_device_probe+0xb3/0x220
     really_probe+0xde/0x380
     __driver_probe_device+0x78/0x170
     driver_probe_device+0x1f/0x90
     __driver_attach_async_helper+0x5c/0xe0
     async_run_entry_fn+0x30/0x130
     process_one_work+0x294/0x5b0
    
    Fixes: 9d24322e887b ("PCI/DOE: Add DOE mailbox support functions")
    Link: https://lore.kernel.org/linux-cxl/Y1bOniJliOFszvIK@memverge.com/
    Reported-by: Gregory Price <gregory.price@memverge.com>
    Tested-by: Ira Weiny <ira.weiny@intel.com>
    Tested-by: Gregory Price <gregory.price@memverge.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Gregory Price <gregory.price@memverge.com>
    Cc: stable@vger.kernel.org # v6.0+
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Link: https://lore.kernel.org/r/67a9117f463ecdb38a2dbca6a20391ce2f1e7a06.1678543498.git.lukas@wunner.de
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f625160b67ff5674947e4783d867612093baed5
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Mar 11 15:40:04 2023 +0100

    cxl/pci: Handle excessive CDAT length
    
    commit 4fe2c13d59d849be3b45371e3913ec5dc77fc0fb upstream.
    
    If the length in the CDAT header is larger than the concatenation of the
    header and all table entries, then the CDAT exposed to user space
    contains trailing null bytes.
    
    Not every consumer may be able to handle that.  Per Postel's robustness
    principle, "be liberal in what you accept" and silently reduce the
    cached length to avoid exposing those null bytes.
    
    Fixes: c97006046c79 ("cxl/port: Read CDAT table")
    Tested-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: stable@vger.kernel.org # v6.0+
    Link: https://lore.kernel.org/r/6d98b3c7da5343172bd3ccabfabbc1f31c079d74.1678543498.git.lukas@wunner.de
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d8dc8993a8d79681a85508c0da18a2d01651be8
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Mar 11 15:40:03 2023 +0100

    cxl/pci: Handle truncated CDAT entries
    
    commit b56faef2312057db20479b240eb71bd2e51fb51c upstream.
    
    If truncated CDAT entries are received from a device, the concatenation
    of those entries constitutes a corrupt CDAT, yet is happily exposed to
    user space.
    
    Avoid by verifying response lengths and erroring out if truncation is
    detected.
    
    The last CDAT entry may still be truncated despite the checks introduced
    herein if the length in the CDAT header is too small.  However, that is
    easily detectable by user space because it reaches EOF prematurely.
    A subsequent commit which rightsizes the CDAT response allocation closes
    that remaining loophole.
    
    The two lines introduced here which exceed 80 chars are shortened to
    less than 80 chars by a subsequent commit which migrates to a
    synchronous DOE API and replaces "t.task.rv" by "rc".
    
    The existing acpi_cdat_header and acpi_table_cdat struct definitions
    provided by ACPICA cannot be used because they do not employ __le16 or
    __le32 types.  I believe that cannot be changed because those types are
    Linux-specific and ACPI is specified for little endian platforms only,
    hence doesn't care about endianness.  So duplicate the structs.
    
    Fixes: c97006046c79 ("cxl/port: Read CDAT table")
    Tested-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: stable@vger.kernel.org # v6.0+
    Link: https://lore.kernel.org/r/bce3aebc0e8e18a1173425a7a865b232c3912963.1678543498.git.lukas@wunner.de
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff7edd1ac6435b98c8db0f144d04946d2b3e99b0
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Mar 11 15:40:02 2023 +0100

    cxl/pci: Handle truncated CDAT header
    
    commit 34bafc747c54fb58c1908ec3116fa6137393e596 upstream.
    
    cxl_cdat_get_length() only checks whether the DOE response size is
    sufficient for the Table Access response header (1 dword), but not the
    succeeding CDAT header (1 dword length plus other fields).
    
    It thus returns whatever uninitialized memory happens to be on the stack
    if a truncated DOE response with only 1 dword was received.  Fix it.
    
    Fixes: c97006046c79 ("cxl/port: Read CDAT table")
    Reported-by: Ming Li <ming4.li@intel.com>
    Tested-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Ming Li <ming4.li@intel.com>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: stable@vger.kernel.org # v6.0+
    Reviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Link: https://lore.kernel.org/r/000e69cd163461c8b1bc2cf4155b6e25402c29c7.1678543498.git.lukas@wunner.de
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 021544721f493c3f73fb42fabd7681b78a07c725
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Mar 11 15:40:01 2023 +0100

    cxl/pci: Fix CDAT retrieval on big endian
    
    commit fbaa38214cd9e150764ccaa82e04ecf42cc1140c upstream.
    
    The CDAT exposed in sysfs differs between little endian and big endian
    arches:  On big endian, every 4 bytes are byte-swapped.
    
    PCI Configuration Space is little endian (PCI r3.0 sec 6.1).  Accessors
    such as pci_read_config_dword() implicitly swap bytes on big endian.
    That way, the macros in include/uapi/linux/pci_regs.h work regardless of
    the arch's endianness.  For an example of implicit byte-swapping, see
    ppc4xx_pciex_read_config(), which calls in_le32(), which uses lwbrx
    (Load Word Byte-Reverse Indexed).
    
    DOE Read/Write Data Mailbox Registers are unlike other registers in
    Configuration Space in that they contain or receive a 4 byte portion of
    an opaque byte stream (a "Data Object" per PCIe r6.0 sec 7.9.24.5f).
    They need to be copied to or from the request/response buffer verbatim.
    So amend pci_doe_send_req() and pci_doe_recv_resp() to undo the implicit
    byte-swapping.
    
    The CXL_DOE_TABLE_ACCESS_* and PCI_DOE_DATA_OBJECT_DISC_* macros assume
    implicit byte-swapping.  Byte-swap requests after constructing them with
    those macros and byte-swap responses before parsing them.
    
    Change the request and response type to __le32 to avoid sparse warnings.
    Per a request from Jonathan, replace sizeof(u32) with sizeof(__le32) for
    consistency.
    
    Fixes: c97006046c79 ("cxl/port: Read CDAT table")
    Tested-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Cc: stable@vger.kernel.org # v6.0+
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Link: https://lore.kernel.org/r/3051114102f41d19df3debbee123129118fc5e6d.1678543498.git.lukas@wunner.de
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 435a319e3cc12d5e0cb77785c9ce42127b9a68c4
Author: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Date:   Thu Apr 6 10:45:41 2023 +0800

    net: stmmac: check fwnode for phy device before scanning for phy
    
    [ Upstream commit 8fbc10b995a506e173f1080dfa2764f232a65e02 ]
    
    Some DT devices already have phy device configured in the DT/ACPI.
    Current implementation scans for a phy unconditionally even though
    there is a phy listed in the DT/ACPI and already attached.
    
    We should check the fwnode if there is any phy device listed in
    fwnode and decide whether to scan for a phy to attach to.
    
    Fixes: fe2cfbc96803 ("net: stmmac: check if MAC needs to attach to a PHY")
    Reported-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/lkml/20230403212434.296975-1-martin.blumenstingl@googlemail.com/
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shahab Vahedi <shahab@synopsys.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Suggested-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
    Link: https://lore.kernel.org/r/20230406024541.3556305-1-michael.wei.hong.sit@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70f1913824fd704a44fc2e17ac22a88cb9652f5b
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Apr 4 12:36:25 2023 +0200

    arm64: compat: Work around uninitialized variable warning
    
    [ Upstream commit 32d85999680601d01b2a36713c9ffd7397c8688b ]
    
    Dan reports that smatch complains about a potential uninitialized
    variable being used in the compat alignment fixup code.
    
    The logic is not wrong per se, but we do end up using an uninitialized
    variable if reading the instruction that triggered the alignment fault
    from user space faults, even if the fault ensures that the uninitialized
    value doesn't propagate any further.
    
    Given that we just give up and return 1 if any fault occurs when reading
    the instruction, let's get rid of the 'success handling' pattern that
    captures the fault in a variable and aborts later, and instead, just
    return 1 immediately if any of the get_user() calls result in an
    exception.
    
    Fixes: 3fc24ef32d3b ("arm64: compat: Implement misalignment fixups for multiword loads")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <error27@gmail.com>
    Link: https://lore.kernel.org/r/202304021214.gekJ8yRc-lkp@intel.com/
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Link: https://lore.kernel.org/r/20230404103625.2386382-1-ardb@kernel.org
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 332e7f93f112bd5ee3bb876cc8b3da9083029e01
Author: Shailend Chand <shailend@google.com>
Date:   Mon Apr 3 10:28:09 2023 -0700

    gve: Secure enough bytes in the first TX desc for all TCP pkts
    
    [ Upstream commit 3ce9345580974863c060fa32971537996a7b2d57 ]
    
    Non-GSO TCP packets whose SKBs' linear portion did not include the
    entire TCP header were not populating the first Tx descriptor with
    as many bytes as the vNIC expected. This change ensures that all
    TCP packets populate the first descriptor with the correct number of
    bytes.
    
    Fixes: 893ce44df565 ("gve: Add basic driver framework for Compute Engine Virtual NIC")
    Signed-off-by: Shailend Chand <shailend@google.com>
    Link: https://lore.kernel.org/r/20230403172809.2939306-1-shailend@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3bcf2a77060bea4d8d09cb09d92c7056f07df5a
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 3 21:46:43 2023 +0000

    netlink: annotate lockless accesses to nlk->max_recvmsg_len
    
    [ Upstream commit a1865f2e7d10dde00d35a2122b38d2e469ae67ed ]
    
    syzbot reported a data-race in data-race in netlink_recvmsg() [1]
    
    Indeed, netlink_recvmsg() can be run concurrently,
    and netlink_dump() also needs protection.
    
    [1]
    BUG: KCSAN: data-race in netlink_recvmsg / netlink_recvmsg
    
    read to 0xffff888141840b38 of 8 bytes by task 23057 on cpu 0:
    netlink_recvmsg+0xea/0x730 net/netlink/af_netlink.c:1988
    sock_recvmsg_nosec net/socket.c:1017 [inline]
    sock_recvmsg net/socket.c:1038 [inline]
    __sys_recvfrom+0x1ee/0x2e0 net/socket.c:2194
    __do_sys_recvfrom net/socket.c:2212 [inline]
    __se_sys_recvfrom net/socket.c:2208 [inline]
    __x64_sys_recvfrom+0x78/0x90 net/socket.c:2208
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    write to 0xffff888141840b38 of 8 bytes by task 23037 on cpu 1:
    netlink_recvmsg+0x114/0x730 net/netlink/af_netlink.c:1989
    sock_recvmsg_nosec net/socket.c:1017 [inline]
    sock_recvmsg net/socket.c:1038 [inline]
    ____sys_recvmsg+0x156/0x310 net/socket.c:2720
    ___sys_recvmsg net/socket.c:2762 [inline]
    do_recvmmsg+0x2e5/0x710 net/socket.c:2856
    __sys_recvmmsg net/socket.c:2935 [inline]
    __do_sys_recvmmsg net/socket.c:2958 [inline]
    __se_sys_recvmmsg net/socket.c:2951 [inline]
    __x64_sys_recvmmsg+0xe2/0x160 net/socket.c:2951
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x0000000000000000 -> 0x0000000000001000
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 23037 Comm: syz-executor.2 Not tainted 6.3.0-rc4-syzkaller-00195-g5a57b48fdfcb #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/02/2023
    
    Fixes: 9063e21fb026 ("netlink: autosize skb lengthes")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230403214643.768555-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23a4bc3a2cece703b94bb3ba05aea1c45916f0db
Author: Andy Roulin <aroulin@nvidia.com>
Date:   Mon Apr 3 14:20:53 2023 -0700

    ethtool: reset #lanes when lanes is omitted
    
    [ Upstream commit e847c7675e19ef344913724dc68f83df31ad6a17 ]
    
    If the number of lanes was forced and then subsequently the user
    omits this parameter, the ksettings->lanes is reset. The driver
    should then reset the number of lanes to the device's default
    for the specified speed.
    
    However, although the ksettings->lanes is set to 0, the mod variable
    is not set to true to indicate the driver and userspace should be
    notified of the changes.
    
    The consequence is that the same ethtool operation will produce
    different results based on the initial state.
    
    If the initial state is:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 2
            Duplex: Full
            Auto-negotiation: on
    
    then executing 'ethtool -s swp1 speed 50000 autoneg off' will yield:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 2
            Duplex: Full
            Auto-negotiation: off
    
    While if the initial state is:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 1
            Duplex: Full
            Auto-negotiation: off
    
    executing the same 'ethtool -s swp1 speed 50000 autoneg off' results in:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 1
            Duplex: Full
            Auto-negotiation: off
    
    This patch fixes this behavior. Omitting lanes will always results in
    the driver choosing the default lane width for the chosen speed. In this
    scenario, regardless of the initial state, the end state will be, e.g.,
    
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 2
            Duplex: Full
            Auto-negotiation: off
    
    Fixes: 012ce4dd3102 ("ethtool: Extend link modes settings uAPI with lanes")
    Signed-off-by: Andy Roulin <aroulin@nvidia.com>
    Reviewed-by: Danielle Ratson <danieller@nvidia.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Link: https://lore.kernel.org/r/ac238d6b-8726-8156-3810-6471291dbc7f@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a08a32e624908890aa0a2eb442bb6a7669891a8
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Apr 3 12:49:59 2023 -0700

    ping: Fix potentail NULL deref for /proc/net/icmp.
    
    [ Upstream commit ab5fb73ffa01072b4d8031cc05801fa1cb653bee ]
    
    After commit dbca1596bbb0 ("ping: convert to RCU lookups, get rid
    of rwlock"), we use RCU for ping sockets, but we should use spinlock
    for /proc/net/icmp to avoid a potential NULL deref mentioned in
    the previous patch.
    
    Let's go back to using spinlock there.
    
    Note we can convert ping sockets to use hlist instead of hlist_nulls
    because we do not use SLAB_TYPESAFE_BY_RCU for ping sockets.
    
    Fixes: dbca1596bbb0 ("ping: convert to RCU lookups, get rid of rwlock")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b34056bedf04d08ef24f713a7f93bad1274a838d
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Apr 3 12:49:58 2023 -0700

    raw: Fix NULL deref in raw_get_next().
    
    [ Upstream commit 0a78cf7264d29abeca098eae0b188a10aabc8a32 ]
    
    Dae R. Jeong reported a NULL deref in raw_get_next() [0].
    
    It seems that the repro was running these sequences in parallel so
    that one thread was iterating on a socket that was being freed in
    another netns.
    
      unshare(0x40060200)
      r0 = syz_open_procfs(0x0, &(0x7f0000002080)='net/raw\x00')
      socket$inet_icmp_raw(0x2, 0x3, 0x1)
      pread64(r0, &(0x7f0000000000)=""/10, 0xa, 0x10000000007f)
    
    After commit 0daf07e52709 ("raw: convert raw sockets to RCU"), we
    use RCU and hlist_nulls_for_each_entry() to iterate over SOCK_RAW
    sockets.  However, we should use spinlock for slow paths to avoid
    the NULL deref.
    
    Also, SOCK_RAW does not use SLAB_TYPESAFE_BY_RCU, and the slab object
    is not reused during iteration in the grace period.  In fact, the
    lockless readers do not check the nulls marker with get_nulls_value().
    So, SOCK_RAW should use hlist instead of hlist_nulls.
    
    Instead of adding an unnecessary barrier by sk_nulls_for_each_rcu(),
    let's convert hlist_nulls to hlist and use sk_for_each_rcu() for
    fast paths and sk_for_each() and spinlock for /proc/net/raw.
    
    [0]:
    general protection fault, probably for non-canonical address 0xdffffc0000000005: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000028-0x000000000000002f]
    CPU: 2 PID: 20952 Comm: syz-executor.0 Not tainted 6.2.0-g048ec869bafd-dirty #7
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
    RIP: 0010:read_pnet include/net/net_namespace.h:383 [inline]
    RIP: 0010:sock_net include/net/sock.h:649 [inline]
    RIP: 0010:raw_get_next net/ipv4/raw.c:974 [inline]
    RIP: 0010:raw_get_idx net/ipv4/raw.c:986 [inline]
    RIP: 0010:raw_seq_start+0x431/0x800 net/ipv4/raw.c:995
    Code: ef e8 33 3d 94 f7 49 8b 6d 00 4c 89 ef e8 b7 65 5f f7 49 89 ed 49 83 c5 98 0f 84 9a 00 00 00 48 83 c5 c8 48 89 e8 48 c1 e8 03 <42> 80 3c 30 00 74 08 48 89 ef e8 00 3d 94 f7 4c 8b 7d 00 48 89 ef
    RSP: 0018:ffffc9001154f9b0 EFLAGS: 00010206
    RAX: 0000000000000005 RBX: 1ffff1100302c8fd RCX: 0000000000000000
    RDX: 0000000000000028 RSI: ffffc9001154f988 RDI: ffffc9000f77a338
    RBP: 0000000000000029 R08: ffffffff8a50ffb4 R09: fffffbfff24b6bd9
    R10: fffffbfff24b6bd9 R11: 0000000000000000 R12: ffff88801db73b78
    R13: fffffffffffffff9 R14: dffffc0000000000 R15: 0000000000000030
    FS:  00007f843ae8e700(0000) GS:ffff888063700000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000055bb9614b35f CR3: 000000003c672000 CR4: 00000000003506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     seq_read_iter+0x4c6/0x10f0 fs/seq_file.c:225
     seq_read+0x224/0x320 fs/seq_file.c:162
     pde_read fs/proc/inode.c:316 [inline]
     proc_reg_read+0x23f/0x330 fs/proc/inode.c:328
     vfs_read+0x31e/0xd30 fs/read_write.c:468
     ksys_pread64 fs/read_write.c:665 [inline]
     __do_sys_pread64 fs/read_write.c:675 [inline]
     __se_sys_pread64 fs/read_write.c:672 [inline]
     __x64_sys_pread64+0x1e9/0x280 fs/read_write.c:672
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x4e/0xa0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x478d29
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f843ae8dbe8 EFLAGS: 00000246 ORIG_RAX: 0000000000000011
    RAX: ffffffffffffffda RBX: 0000000000791408 RCX: 0000000000478d29
    RDX: 000000000000000a RSI: 0000000020000000 RDI: 0000000000000003
    RBP: 00000000f477909a R08: 0000000000000000 R09: 0000000000000000
    R10: 000010000000007f R11: 0000000000000246 R12: 0000000000791740
    R13: 0000000000791414 R14: 0000000000791408 R15: 00007ffc2eb48a50
     </TASK>
    Modules linked in:
    ---[ end trace 0000000000000000 ]---
    RIP: 0010:read_pnet include/net/net_namespace.h:383 [inline]
    RIP: 0010:sock_net include/net/sock.h:649 [inline]
    RIP: 0010:raw_get_next net/ipv4/raw.c:974 [inline]
    RIP: 0010:raw_get_idx net/ipv4/raw.c:986 [inline]
    RIP: 0010:raw_seq_start+0x431/0x800 net/ipv4/raw.c:995
    Code: ef e8 33 3d 94 f7 49 8b 6d 00 4c 89 ef e8 b7 65 5f f7 49 89 ed 49 83 c5 98 0f 84 9a 00 00 00 48 83 c5 c8 48 89 e8 48 c1 e8 03 <42> 80 3c 30 00 74 08 48 89 ef e8 00 3d 94 f7 4c 8b 7d 00 48 89 ef
    RSP: 0018:ffffc9001154f9b0 EFLAGS: 00010206
    RAX: 0000000000000005 RBX: 1ffff1100302c8fd RCX: 0000000000000000
    RDX: 0000000000000028 RSI: ffffc9001154f988 RDI: ffffc9000f77a338
    RBP: 0000000000000029 R08: ffffffff8a50ffb4 R09: fffffbfff24b6bd9
    R10: fffffbfff24b6bd9 R11: 0000000000000000 R12: ffff88801db73b78
    R13: fffffffffffffff9 R14: dffffc0000000000 R15: 0000000000000030
    FS:  00007f843ae8e700(0000) GS:ffff888063700000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f92ff166000 CR3: 000000003c672000 CR4: 00000000003506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Fixes: 0daf07e52709 ("raw: convert raw sockets to RCU")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reported-by: Dae R. Jeong <threeearcat@gmail.com>
    Link: https://lore.kernel.org/netdev/ZCA2mGV_cmq7lIfV@dragonet/
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53a0031217c9b8d7a53edfb70d1633a1935c4395
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 2 09:41:00 2023 +0000

    raw: use net_hash_mix() in hash function
    
    [ Upstream commit 6579f5bacc2c4cbc5ef6abb45352416939d1f844 ]
    
    Some applications seem to rely on RAW sockets.
    
    If they use private netns, we can avoid piling all RAW
    sockets bound to a given protocol into a single bucket.
    
    Also place (struct raw_hashinfo).lock into its own
    cache line to limit false sharing.
    
    Alternative would be to have per-netns hashtables,
    but this seems too expensive for most netns
    where RAW sockets are not used.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 0a78cf7264d2 ("raw: Fix NULL deref in raw_get_next().")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73b99db789ef6c18a0fd55a2ac6f7c1e59f06e01
Author: Lingyu Liu <lingyu.liu@intel.com>
Date:   Tue Mar 28 10:49:11 2023 +0000

    ice: Reset FDIR counter in FDIR init stage
    
    [ Upstream commit 83c911dc5e0e8e6eaa6431c06972a8f159bfe2fc ]
    
    Reset the FDIR counters when FDIR inits. Without this patch,
    when VF initializes or resets, all the FDIR counters are not
    cleaned, which may cause unexpected behaviors for future FDIR
    rule create (e.g., rule conflict).
    
    Fixes: 1f7ea1cd6a37 ("ice: Enable FDIR Configure for AVF")
    Signed-off-by: Junfeng Guo <junfeng.guo@intel.com>
    Signed-off-by: Lingyu Liu <lingyu.liu@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aad3b871efe26f36f45f8b4649653b5d3fd9c35e
Author: Simei Su <simei.su@intel.com>
Date:   Wed Mar 22 10:24:15 2023 +0800

    ice: fix wrong fallback logic for FDIR
    
    [ Upstream commit b4a01ace20f5c93c724abffc0a83ec84f514b98d ]
    
    When adding a FDIR filter, if ice_vc_fdir_set_irq_ctx returns failure,
    the inserted fdir entry will not be removed and if ice_vc_fdir_write_fltr
    returns failure, the fdir context info for irq handler will not be cleared
    which may lead to inconsistent or memory leak issue. This patch refines
    failure cases to resolve this issue.
    
    Fixes: 1f7ea1cd6a37 ("ice: Enable FDIR Configure for AVF")
    Signed-off-by: Simei Su <simei.su@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6460fee86abf141ae86c56ab98c72ccc95431b62
Author: Dai Ngo <dai.ngo@oracle.com>
Date:   Sat Apr 1 13:22:08 2023 -0700

    NFSD: callback request does not use correct credential for AUTH_SYS
    
    [ Upstream commit 7de82c2f36fb26aa78440bbf0efcf360b691d98b ]
    
    Currently callback request does not use the credential specified in
    CREATE_SESSION if the security flavor for the back channel is AUTH_SYS.
    
    Problem was discovered by pynfs 4.1 DELEG5 and DELEG7 test with error:
    DELEG5   st_delegation.testCBSecParms     : FAILURE
               expected callback with uid, gid == 17, 19, got 0, 0
    
    Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Fixes: 8276c902bbe9 ("SUNRPC: remove uid and gid from struct auth_cred")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94ef35dd2ea14f661865220a305d21961c9e8c92
Author: Jeff Layton <jlayton@kernel.org>
Date:   Thu Mar 30 14:24:27 2023 -0400

    sunrpc: only free unix grouplist after RCU settles
    
    [ Upstream commit 5085e41f9e83a1bec51da1f20b54f2ec3a13a3fe ]
    
    While the unix_gid object is rcu-freed, the group_info list that it
    contains is not. Ensure that we only put the group list reference once
    we are really freeing the unix_gid object.
    
    Reported-by: Zhi Li <yieli@redhat.com>
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2183056
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Fixes: fd5d2f78261b ("SUNRPC: Make server side AUTH_UNIX use lockless lookups")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 710392fd6546d3e90b79fa2d7fce2baec2503c64
Author: Corinna Vinschen <vinschen@redhat.com>
Date:   Mon Apr 3 14:11:20 2023 +0200

    net: stmmac: fix up RX flow hash indirection table when setting channels
    
    [ Upstream commit 218c597325f4faf7b7a6049233a30d7842b5b2dc ]
    
    stmmac_reinit_queues() fails to fix up the RX hash.  Even if the number
    of channels gets restricted, the output of `ethtool -x' indicates that
    all RX queues are used:
    
      $ ethtool -l enp0s29f2
      Channel parameters for enp0s29f2:
      Pre-set maximums:
      RX:           8
      TX:           8
      Other:                n/a
      Combined:     n/a
      Current hardware settings:
      RX:           8
      TX:           8
      Other:                n/a
      Combined:     n/a
      $ ethtool -x enp0s29f2
      RX flow hash indirection table for enp0s29f2 with 8 RX ring(s):
          0:      0     1     2     3     4     5     6     7
          8:      0     1     2     3     4     5     6     7
      [...]
      $ ethtool -L enp0s29f2 rx 3
      $ ethtool -x enp0s29f2
      RX flow hash indirection table for enp0s29f2 with 3 RX ring(s):
          0:      0     1     2     3     4     5     6     7
          8:      0     1     2     3     4     5     6     7
      [...]
    
    Fix this by setting the indirection table according to the number
    of specified queues.  The result is now as expected:
    
      $ ethtool -L enp0s29f2 rx 3
      $ ethtool -x enp0s29f2
      RX flow hash indirection table for enp0s29f2 with 3 RX ring(s):
          0:      0     1     2     0     1     2     0     1
          8:      2     0     1     2     0     1     2     0
      [...]
    
    Tested on Intel Elkhart Lake.
    
    Fixes: 0366f7e06a6b ("net: stmmac: add ethtool support for get/set channels")
    Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
    Link: https://lore.kernel.org/r/20230403121120.489138-1-vinschen@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b29e7b24de188f61e1fc57d89bb2d660834f17d6
Author: Siddharth Vadapalli <s-vadapalli@ti.com>
Date:   Mon Apr 3 14:33:21 2023 +0530

    net: ethernet: ti: am65-cpsw: Fix mdio cleanup in probe
    
    [ Upstream commit c6b486fb33680ad5a3a6390ce693c835caaae3f7 ]
    
    In the am65_cpsw_nuss_probe() function's cleanup path, the call to
    of_platform_device_destroy() for the common->mdio_dev device is invoked
    unconditionally. It is possible that either the MDIO node is not present
    in the device-tree, or the MDIO node is disabled in the device-tree. In
    both these cases, the MDIO device is not created, resulting in a NULL
    pointer dereference when the of_platform_device_destroy() function is
    invoked on the common->mdio_dev device on the cleanup path.
    
    Fix this by ensuring that the common->mdio_dev device exists, before
    attempting to invoke of_platform_device_destroy().
    
    Fixes: a45cfcc69a25 ("net: ethernet: ti: am65-cpsw-nuss: use of_platform_device_create() for mdio")
    Signed-off-by: Siddharth Vadapalli <s-vadapalli@ti.com>
    Reviewed-by: Roger Quadros <rogerq@kernel.org>
    Link: https://lore.kernel.org/r/20230403090321.835877-1-s-vadapalli@ti.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c35f0a48fbd0955fdf825ff1943295e7eb3d5903
Author: Dhruva Gole <d-gole@ti.com>
Date:   Mon Apr 3 12:54:43 2023 +0530

    gpio: davinci: Add irq chip flag to skip set wake
    
    [ Upstream commit 7b75c4703609a3ebaf67271813521bc0281e1ec1 ]
    
    Add the IRQCHIP_SKIP_SET_WAKE flag since there are no special IRQ Wake
    bits that can be set to enable wakeup IRQ.
    
    Fixes: 3d9edf09d452 ("[ARM] 4457/2: davinci: GPIO support")
    Signed-off-by: Dhruva Gole <d-gole@ti.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8309ca6f09b2020ef7305023d5bae2e8e2d10d53
Author: Dhruva Gole <d-gole@ti.com>
Date:   Mon Apr 3 12:54:42 2023 +0530

    gpio: davinci: Do not clear the bank intr enable bit in save_context
    
    [ Upstream commit fe092498cb9638418c96675be320c74a16306b48 ]
    
    The interrupt enable bits might be set if we want to use the GPIO as
    wakeup source. Clearing this will mean disabling of interrupts in the GPIO
    banks that we may want to wakeup from.
    Thus remove the line that was clearing this bit from the driver's save
    context function.
    
    Cc: Devarsh Thakkar <devarsht@ti.com>
    Fixes: 0651a730924b ("gpio: davinci: Add support for system suspend/resume PM")
    Signed-off-by: Dhruva Gole <d-gole@ti.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73e863aa2505ac3340c594158fa5d606acecbe3f
Author: Mark Pearson <mpearson-lenovo@squebb.ca>
Date:   Sun Apr 2 21:31:20 2023 -0400

    platform/x86: think-lmi: Clean up display of current_value on Thinkstation
    
    [ Upstream commit 7065655216d4d034d71164641f3bec0b189ad6fa ]
    
    On ThinkStations on retrieving the attribute value the BIOS appends the
    possible values to the string.
    Clean up the display in the current_value_show function so the options
    part is not displayed.
    
    Fixes: a40cd7ef22fb ("platform/x86: think-lmi: Add WMI interface support on Lenovo platforms")
    Reported by Mario Limoncello <Mario.Limonciello@amd.com>
    Link: https://github.com/fwupd/fwupd/issues/5077#issuecomment-1488730526
    Signed-off-by: Mark Pearson <mpearson-lenovo@squebb.ca>
    Link: https://lore.kernel.org/r/20230403013120.2105-2-mpearson-lenovo@squebb.ca
    Tested-by: Mario Limonciello <mario.limonciello@amd.com>
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 081da7b1c881828244b93b3befb7c18389f696bb
Author: Mark Pearson <mpearson-lenovo@squebb.ca>
Date:   Sun Apr 2 21:31:19 2023 -0400

    platform/x86: think-lmi: Fix memory leaks when parsing ThinkStation WMI strings
    
    [ Upstream commit e7d796fccdc8d17c2d21817ebe4c7bf5bbfe5433 ]
    
    My previous commit introduced a memory leak where the item allocated
    from tlmi_setting was not freed.
    This commit also renames it to avoid confusion with the similarly name
    variable in the same function.
    
    Fixes: 8a02d70679fc ("platform/x86: think-lmi: Add possible_values for ThinkStation")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/lkml/df26ff45-8933-f2b3-25f4-6ee51ccda7d8@gmx.de/T/
    Signed-off-by: Mark Pearson <mpearson-lenovo@squebb.ca>
    Link: https://lore.kernel.org/r/20230403013120.2105-1-mpearson-lenovo@squebb.ca
    Tested-by: Mario Limonciello <mario.limonciello@amd.com>
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9071525bfcb1f5674117dbed3eca0cd7b122813b
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Fri Mar 31 23:33:19 2023 +0200

    platform/x86: think-lmi: Fix memory leak when showing current settings
    
    [ Upstream commit a3c4c053014585dcf20f4df954791b74d8a8afcd ]
    
    When retriving a item string with tlmi_setting(), the result has to be
    freed using kfree(). In current_value_show() however, malformed
    item strings are not freed, causing a memory leak.
    Fix this by eliminating the early return responsible for this.
    
    Reported-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/platform-driver-x86/01e920bc-5882-ba0c-dd15-868bf0eca0b8@alu.unizg.hr/T/#t
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Fixes: 0fdf10e5fc96 ("platform/x86: think-lmi: Split current_value to reflect only the value")
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Link: https://lore.kernel.org/r/20230331213319.41040-1-W_Armin@gmx.de
    Tested-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c9cefc142c1dc2759e19a92d3b2b3715e985beb
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Mon Apr 3 15:34:17 2023 +0800

    ipv6: Fix an uninit variable access bug in __ip6_make_skb()
    
    [ Upstream commit ea30388baebcce37fd594d425a65037ca35e59e8 ]
    
    Syzbot reported a bug as following:
    
    =====================================================
    BUG: KMSAN: uninit-value in arch_atomic64_inc arch/x86/include/asm/atomic64_64.h:88 [inline]
    BUG: KMSAN: uninit-value in arch_atomic_long_inc include/linux/atomic/atomic-long.h:161 [inline]
    BUG: KMSAN: uninit-value in atomic_long_inc include/linux/atomic/atomic-instrumented.h:1429 [inline]
    BUG: KMSAN: uninit-value in __ip6_make_skb+0x2f37/0x30f0 net/ipv6/ip6_output.c:1956
     arch_atomic64_inc arch/x86/include/asm/atomic64_64.h:88 [inline]
     arch_atomic_long_inc include/linux/atomic/atomic-long.h:161 [inline]
     atomic_long_inc include/linux/atomic/atomic-instrumented.h:1429 [inline]
     __ip6_make_skb+0x2f37/0x30f0 net/ipv6/ip6_output.c:1956
     ip6_finish_skb include/net/ipv6.h:1122 [inline]
     ip6_push_pending_frames+0x10e/0x550 net/ipv6/ip6_output.c:1987
     rawv6_push_pending_frames+0xb12/0xb90 net/ipv6/raw.c:579
     rawv6_sendmsg+0x297e/0x2e60 net/ipv6/raw.c:922
     inet_sendmsg+0x101/0x180 net/ipv4/af_inet.c:827
     sock_sendmsg_nosec net/socket.c:714 [inline]
     sock_sendmsg net/socket.c:734 [inline]
     ____sys_sendmsg+0xa8e/0xe70 net/socket.c:2476
     ___sys_sendmsg+0x2a1/0x3f0 net/socket.c:2530
     __sys_sendmsg net/socket.c:2559 [inline]
     __do_sys_sendmsg net/socket.c:2568 [inline]
     __se_sys_sendmsg net/socket.c:2566 [inline]
     __x64_sys_sendmsg+0x367/0x540 net/socket.c:2566
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Uninit was created at:
     slab_post_alloc_hook mm/slab.h:766 [inline]
     slab_alloc_node mm/slub.c:3452 [inline]
     __kmem_cache_alloc_node+0x71f/0xce0 mm/slub.c:3491
     __do_kmalloc_node mm/slab_common.c:967 [inline]
     __kmalloc_node_track_caller+0x114/0x3b0 mm/slab_common.c:988
     kmalloc_reserve net/core/skbuff.c:492 [inline]
     __alloc_skb+0x3af/0x8f0 net/core/skbuff.c:565
     alloc_skb include/linux/skbuff.h:1270 [inline]
     __ip6_append_data+0x51c1/0x6bb0 net/ipv6/ip6_output.c:1684
     ip6_append_data+0x411/0x580 net/ipv6/ip6_output.c:1854
     rawv6_sendmsg+0x2882/0x2e60 net/ipv6/raw.c:915
     inet_sendmsg+0x101/0x180 net/ipv4/af_inet.c:827
     sock_sendmsg_nosec net/socket.c:714 [inline]
     sock_sendmsg net/socket.c:734 [inline]
     ____sys_sendmsg+0xa8e/0xe70 net/socket.c:2476
     ___sys_sendmsg+0x2a1/0x3f0 net/socket.c:2530
     __sys_sendmsg net/socket.c:2559 [inline]
     __do_sys_sendmsg net/socket.c:2568 [inline]
     __se_sys_sendmsg net/socket.c:2566 [inline]
     __x64_sys_sendmsg+0x367/0x540 net/socket.c:2566
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    It is because icmp6hdr does not in skb linear region under the scenario
    of SOCK_RAW socket. Access icmp6_hdr(skb)->icmp6_type directly will
    trigger the uninit variable access bug.
    
    Use a local variable icmp6_type to carry the correct value in different
    scenarios.
    
    Fixes: 14878f75abd5 ("[IPV6]: Add ICMPMsgStats MIB (RFC 4293) [rev 2]")
    Reported-by: syzbot+8257f4dcef79de670baf@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=3d605ec1d0a7f2a269a1a6936ac7f2b85975ee9c
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef5fa4de4cac8c237dd915e03a9f4c021b541ae7
Author: Sricharan Ramabadhran <quic_srichara@quicinc.com>
Date:   Mon Apr 3 12:28:51 2023 +0530

    net: qrtr: Do not do DEL_SERVER broadcast after DEL_CLIENT
    
    [ Upstream commit 839349d13905927d8a567ca4d21d88c82028e31d ]
    
    On the remote side, when QRTR socket is removed, af_qrtr will call
    qrtr_port_remove() which broadcasts the DEL_CLIENT packet to all neighbours
    including local NS. NS upon receiving the DEL_CLIENT packet, will remove
    the lookups associated with the node:port and broadcasts the DEL_SERVER
    packet.
    
    But on the host side, due to the arrival of the DEL_CLIENT packet, the NS
    would've already deleted the server belonging to that port. So when the
    remote's NS again broadcasts the DEL_SERVER for that port, it throws below
    error message on the host:
    
    "failed while handling packet from 2:-2"
    
    So fix this error by not broadcasting the DEL_SERVER packet when the
    DEL_CLIENT packet gets processed."
    
    Fixes: 0c2204a4ad71 ("net: qrtr: Migrate nameservice to kernel from userspace")
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Signed-off-by: Ram Kumar Dharuman <quic_ramd@quicinc.com>
    Signed-off-by: Sricharan Ramabadhran <quic_srichara@quicinc.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2128636b303aa9cf065055402ee6697409a8837
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Apr 1 19:09:57 2023 -0400

    sctp: check send stream number after wait_for_sndbuf
    
    [ Upstream commit 2584024b23552c00d95b50255e47bd18d306d31a ]
    
    This patch fixes a corner case where the asoc out stream count may change
    after wait_for_sndbuf.
    
    When the main thread in the client starts a connection, if its out stream
    count is set to N while the in stream count in the server is set to N - 2,
    another thread in the client keeps sending the msgs with stream number
    N - 1, and waits for sndbuf before processing INIT_ACK.
    
    However, after processing INIT_ACK, the out stream count in the client is
    shrunk to N - 2, the same to the in stream count in the server. The crash
    occurs when the thread waiting for sndbuf is awake and sends the msg in a
    non-existing stream(N - 1), the call trace is as below:
    
      KASAN: null-ptr-deref in range [0x0000000000000038-0x000000000000003f]
      Call Trace:
       <TASK>
       sctp_cmd_send_msg net/sctp/sm_sideeffect.c:1114 [inline]
       sctp_cmd_interpreter net/sctp/sm_sideeffect.c:1777 [inline]
       sctp_side_effects net/sctp/sm_sideeffect.c:1199 [inline]
       sctp_do_sm+0x197d/0x5310 net/sctp/sm_sideeffect.c:1170
       sctp_primitive_SEND+0x9f/0xc0 net/sctp/primitive.c:163
       sctp_sendmsg_to_asoc+0x10eb/0x1a30 net/sctp/socket.c:1868
       sctp_sendmsg+0x8d4/0x1d90 net/sctp/socket.c:2026
       inet_sendmsg+0x9d/0xe0 net/ipv4/af_inet.c:825
       sock_sendmsg_nosec net/socket.c:722 [inline]
       sock_sendmsg+0xde/0x190 net/socket.c:745
    
    The fix is to add an unlikely check for the send stream number after the
    thread wakes up from the wait_for_sndbuf.
    
    Fixes: 5bbbbe32a431 ("sctp: introduce stream scheduler foundations")
    Reported-by: syzbot+47c24ca20a2fa01f082e@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90c29c00b156061757ceaa14eb17a854c8f1f938
Author: Gustav Ekelund <gustaek@axis.com>
Date:   Fri Mar 31 10:40:13 2023 +0200

    net: dsa: mv88e6xxx: Reset mv88e6393x force WD event bit
    
    [ Upstream commit 089b91a0155c4de1209a07ff2a7dd299ff3ece47 ]
    
    The force watchdog event bit is not cleared during SW reset in the
    mv88e6393x switch. This is a different behavior compared to mv886390 which
    clears the force WD event bit as advertised. This causes a force WD event
    to be handled over and over again as the SW reset following the event never
    clears the force WD event bit.
    
    Explicitly clear the watchdog event register to 0 in irq_action when
    handling an event to prevent the switch from sending continuous interrupts.
    Marvell aren't aware of any other stuck bits apart from the force WD
    bit.
    
    Fixes: de776d0d316f ("net: dsa: mv88e6xxx: add support for mv88e6393x family"
    Signed-off-by: Gustav Ekelund <gustaek@axis.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e48e6a4652c5e368ac0df37802374c4f6bc65728
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Mar 30 19:21:44 2023 -0700

    net: don't let netpoll invoke NAPI if in xmit context
    
    [ Upstream commit 275b471e3d2daf1472ae8fa70dc1b50c9e0b9e75 ]
    
    Commit 0db3dc73f7a3 ("[NETPOLL]: tx lock deadlock fix") narrowed
    down the region under netif_tx_trylock() inside netpoll_send_skb().
    (At that point in time netif_tx_trylock() would lock all queues of
    the device.) Taking the tx lock was problematic because driver's
    cleanup method may take the same lock. So the change made us hold
    the xmit lock only around xmit, and expected the driver to take
    care of locking within ->ndo_poll_controller().
    
    Unfortunately this only works if netpoll isn't itself called with
    the xmit lock already held. Netpoll code is careful and uses
    trylock(). The drivers, however, may be using plain lock().
    Printing while holding the xmit lock is going to result in rare
    deadlocks.
    
    Luckily we record the xmit lock owners, so we can scan all the queues,
    the same way we scan NAPI owners. If any of the xmit locks is held
    by the local CPU we better not attempt any polling.
    
    It would be nice if we could narrow down the check to only the NAPIs
    and the queue we're trying to use. I don't see a way to do that now.
    
    Reported-by: Roman Gushchin <roman.gushchin@linux.dev>
    Fixes: 0db3dc73f7a3 ("[NETPOLL]: tx lock deadlock fix")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8354db05809227a2608f74d0cfe7cc70f0a09cbd
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Mar 31 16:22:17 2023 +0200

    ALSA: hda/hdmi: Preserve the previous PCM device upon re-enablement
    
    [ Upstream commit f785f5ee968f7045268b8be6b0abc850c4a4277c ]
    
    When a DRM driver turns on or off the screen with the audio
    capability, it notifies the ELD to HD-audio HDMI codec driver via
    component ops.  HDMI codec driver, in turn, attaches or detaches the
    PCM stream for the given port on the fly.
    
    The problem is that, since the recent code change, the HDMI driver
    always treats the PCM stream assignment dynamically; this ended up the
    confusion of the PCM device appearance.  e.g. when a screen goes once
    off and on again, it may appear on a different PCM device before the
    screen-off.  Although the application should treat such a change, it
    doesn't seem working gracefully with the current pipewire (maybe
    PulseAudio, too).
    
    As a workaround, this patch changes the HDMI codec driver behavior
    slightly to be more consistent.  Now it remembers the previous PCM
    slot for the given port and try to assign to it.  That is, if a port
    is re-enabled, the driver tries to use the same PCM slot that was
    assigned to that port previously.  If it conflicts, a new slot is
    searched and used like before, instead.
    
    Note that multiple monitor connections are the only typical case where
    the PCM slot preservation is effective.  As long as only a single
    monitor is connected, the behavior isn't changed, and the first PCM
    slot is still assigned always.
    
    Fixes: ef6f5494faf6 ("ALSA: hda/hdmi: Use only dynamic PCM device allocation")
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217259
    Link: https://lore.kernel.org/r/20230331142217.19791-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0185e87c69af53c9c3a93d7d7a3be3cbed149375
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Mar 30 17:45:02 2023 +0000

    icmp: guard against too small mtu
    
    [ Upstream commit 7d63b67125382ff0ffdfca434acbc94a38bd092b ]
    
    syzbot was able to trigger a panic [1] in icmp_glue_bits(), or
    more exactly in skb_copy_and_csum_bits()
    
    There is no repro yet, but I think the issue is that syzbot
    manages to lower device mtu to a small value, fooling __icmp_send()
    
    __icmp_send() must make sure there is enough room for the
    packet to include at least the headers.
    
    We might in the future refactor skb_copy_and_csum_bits() and its
    callers to no longer crash when something bad happens.
    
    [1]
    kernel BUG at net/core/skbuff.c:3343 !
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 15766 Comm: syz-executor.0 Not tainted 6.3.0-rc4-syzkaller-00039-gffe78bbd5121 #0
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    RIP: 0010:skb_copy_and_csum_bits+0x798/0x860 net/core/skbuff.c:3343
    Code: f0 c1 c8 08 41 89 c6 e9 73 ff ff ff e8 61 48 d4 f9 e9 41 fd ff ff 48 8b 7c 24 48 e8 52 48 d4 f9 e9 c3 fc ff ff e8 c8 27 84 f9 <0f> 0b 48 89 44 24 28 e8 3c 48 d4 f9 48 8b 44 24 28 e9 9d fb ff ff
    RSP: 0018:ffffc90000007620 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 00000000000001e8 RCX: 0000000000000100
    RDX: ffff8880276f6280 RSI: ffffffff87fdd138 RDI: 0000000000000005
    RBP: 0000000000000000 R08: 0000000000000005 R09: 0000000000000000
    R10: 00000000000001e8 R11: 0000000000000001 R12: 000000000000003c
    R13: 0000000000000000 R14: ffff888028244868 R15: 0000000000000b0e
    FS: 00007fbc81f1c700(0000) GS:ffff88802ca00000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2df43000 CR3: 00000000744db000 CR4: 0000000000150ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <IRQ>
    icmp_glue_bits+0x7b/0x210 net/ipv4/icmp.c:353
    __ip_append_data+0x1d1b/0x39f0 net/ipv4/ip_output.c:1161
    ip_append_data net/ipv4/ip_output.c:1343 [inline]
    ip_append_data+0x115/0x1a0 net/ipv4/ip_output.c:1322
    icmp_push_reply+0xa8/0x440 net/ipv4/icmp.c:370
    __icmp_send+0xb80/0x1430 net/ipv4/icmp.c:765
    ipv4_send_dest_unreach net/ipv4/route.c:1239 [inline]
    ipv4_link_failure+0x5a9/0x9e0 net/ipv4/route.c:1246
    dst_link_failure include/net/dst.h:423 [inline]
    arp_error_report+0xcb/0x1c0 net/ipv4/arp.c:296
    neigh_invalidate+0x20d/0x560 net/core/neighbour.c:1079
    neigh_timer_handler+0xc77/0xff0 net/core/neighbour.c:1166
    call_timer_fn+0x1a0/0x580 kernel/time/timer.c:1700
    expire_timers+0x29b/0x4b0 kernel/time/timer.c:1751
    __run_timers kernel/time/timer.c:2022 [inline]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+d373d60fddbdc915e666@syzkaller.appspotmail.com
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230330174502.1915328-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b623a8e5d38a69a3ef8644acb1030dd7c7bc28b3
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Mar 27 06:21:37 2023 -0400

    nfsd: call op_release, even when op_func returns an error
    
    [ Upstream commit 15a8b55dbb1ba154d82627547c5761cac884d810 ]
    
    For ops with "trivial" replies, nfsd4_encode_operation will shortcut
    most of the encoding work and skip to just marshalling up the status.
    One of the things it skips is calling op_release. This could cause a
    memory leak in the layoutget codepath if there is an error at an
    inopportune time.
    
    Have the compound processing engine always call op_release, even when
    op_func sets an error in op->status. With this change, we also need
    nfsd4_block_get_device_info_scsi to set the gd_device pointer to NULL
    on error to avoid a double free.
    
    Reported-by: Zhi Li <yieli@redhat.com>
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2181403
    Fixes: 34b1744c91cc ("nfsd4: define ->op_release for compound ops")
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffcbcf087581ae68ddc0a21460f7ecd4315bdd0e
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Fri Mar 31 16:31:19 2023 -0400

    NFSD: Avoid calling OPDESC() with ops->opnum == OP_ILLEGAL
    
    [ Upstream commit 804d8e0a6e54427268790472781e03bc243f4ee3 ]
    
    OPDESC() simply indexes into nfsd4_ops[] by the op's operation
    number, without range checking that value. It assumes callers are
    careful to avoid calling it with an out-of-bounds opnum value.
    
    nfsd4_decode_compound() is not so careful, and can invoke OPDESC()
    with opnum set to OP_ILLEGAL, which is 10044 -- well beyond the end
    of nfsd4_ops[].
    
    Reported-by: Jeff Layton <jlayton@kernel.org>
    Fixes: f4f9ef4a1b0a ("nfsd4: opdesc will be useful outside nfs4proc.c")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d2a6a508b9ffb46afe1486796b44342ad1d23ab
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 20 13:22:52 2023 +0100

    wifi: brcmfmac: Fix SDIO suspend/resume regression
    
    [ Upstream commit e4efa515d58f1363d8a27e548f9c5769d3121e03 ]
    
    After commit 92cadedd9d5f ("brcmfmac: Avoid keeping power to SDIO card
    unless WOWL is used"), the wifi adapter by default is turned off on suspend
    and then re-probed on resume.
    
    In at least 2 model x86/acpi tablets with brcmfmac43430a1 wifi adapters,
    the newly added re-probe on resume fails like this:
    
     brcmfmac: brcmf_sdio_bus_rxctl: resumed on timeout
     ieee80211 phy1: brcmf_bus_started: failed: -110
     ieee80211 phy1: brcmf_attach: dongle is not responding: err=-110
     brcmfmac: brcmf_sdio_firmware_callback: brcmf_attach failed
    
    It seems this specific brcmfmac model does not like being reprobed without
    it actually being turned off first.
    
    And the adapter is not being turned off during suspend because of
    commit f0992ace680c ("brcmfmac: prohibit ACPI power management for brcmfmac
    driver").
    
    Now that the driver is being reprobed on resume, the disabling of ACPI
    pm is no longer necessary, except when WOWL is used (in which case there
    is no-reprobe).
    
    Move the dis-/en-abling of ACPI pm to brcmf_sdio_wowl_config(), this fixes
    the brcmfmac43430a1 suspend/resume regression and should help save some
    power when suspended.
    
    This change means that the code now also may re-enable ACPI pm when WOWL
    gets disabled. ACPI pm should only be re-enabled if it was enabled by
    the ACPI core originally. Add a brcmf_sdiod_acpi_save_power_manageable()
    to save the original state for this.
    
    This has been tested on the following devices:
    
    Asus T100TA                brcmfmac43241b4-sdio
    Acer Iconia One 7 B1-750   brcmfmac43340-sdio
    Chuwi Hi8                  brcmfmac43430a0-sdio
    Chuwi Hi8                  brcmfmac43430a1-sdio
    
    (the Asus T100TA is the device for which the prohibiting of ACPI pm
     was originally added)
    
    Fixes: 92cadedd9d5f ("brcmfmac: Avoid keeping power to SDIO card unless WOWL is used")
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230320122252.240070-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f638a3d1b616cbc415169d4ebf1823e5ccf8de6
Author: Andrea Righi <andrea.righi@canonical.com>
Date:   Thu Mar 30 11:54:42 2023 +0200

    l2tp: generate correct module alias strings
    
    [ Upstream commit 154e07c164859fc90bf4e8143f2f6c1af9f3a35e ]
    
    Commit 65b32f801bfb ("uapi: move IPPROTO_L2TP to in.h") moved the
    definition of IPPROTO_L2TP from a define to an enum, but since
    __stringify doesn't work properly with enums, we ended up breaking the
    modalias strings for the l2tp modules:
    
     $ modinfo l2tp_ip l2tp_ip6 | grep alias
     alias:          net-pf-2-proto-IPPROTO_L2TP
     alias:          net-pf-2-proto-2-type-IPPROTO_L2TP
     alias:          net-pf-10-proto-IPPROTO_L2TP
     alias:          net-pf-10-proto-2-type-IPPROTO_L2TP
    
    Use the resolved number directly in MODULE_ALIAS_*() macros (as we
    already do with SOCK_DGRAM) to fix the alias strings:
    
    $ modinfo l2tp_ip l2tp_ip6 | grep alias
    alias:          net-pf-2-proto-115
    alias:          net-pf-2-proto-115-type-2
    alias:          net-pf-10-proto-115
    alias:          net-pf-10-proto-115-type-2
    
    Moreover, fix the ordering of the parameters passed to
    MODULE_ALIAS_NET_PF_PROTO_TYPE() by switching proto and type.
    
    Fixes: 65b32f801bfb ("uapi: move IPPROTO_L2TP to in.h")
    Link: https://lore.kernel.org/lkml/ZCQt7hmodtUaBlCP@righiandr-XPS-13-7390
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Tested-by:  Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c951c392a9d8fe46a52e637b963a58a57543dd3e
Author: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Date:   Thu Mar 30 17:14:04 2023 +0800

    net: stmmac: remove redundant fixup to support fixed-link mode
    
    [ Upstream commit 6fc21a6ed5953b1dd3a41ce7be1ea57f5ef8c081 ]
    
    Currently, intel_speed_mode_2500() will fix-up xpcs_an_inband
    to 1 if the underlying controller has a max speed of 1000Mbps.
    The value has been initialized and modified if it is
    a fixed-linked setup earlier.
    
    This patch removes the fix-up to allow for fixed-linked setup
    support. In stmmac_phy_setup(), ovr_an_inband is set based on
    the value of xpcs_an_inband. Which in turn will return an
    error in phylink_parse_mode() where MLO_AN_FIXED and
    ovr_an_inband are both set.
    
    Fixes: c82386310d95 ("stmmac: intel: prepare to support 1000BASE-X phy interface setting")
    Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1aca718e1a840f65b60488433a1f1dd56f37dd73
Author: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Date:   Thu Mar 30 17:14:03 2023 +0800

    net: stmmac: check if MAC needs to attach to a PHY
    
    [ Upstream commit fe2cfbc9680356a3d9f8adde8a38e715831e32f5 ]
    
    After the introduction of the fixed-link support, the MAC driver
    no longer attempt to scan for a PHY to attach to. This causes the
    non fixed-link setups to stop working.
    
    Using the phylink_expects_phy() to check and determine if the MAC
    should expect and attach a PHY.
    
    Fixes: ab21cf920928 ("net: stmmac: make mdio register skips PHY scanning for fixed-link")
    Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
    Signed-off-by: Lai Peter Jun Ann <peter.jun.ann.lai@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b15feabc95b902cd77c6ce820768360d9a06eac
Author: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Date:   Thu Mar 30 17:14:02 2023 +0800

    net: phylink: add phylink_expects_phy() method
    
    [ Upstream commit 653a180957a85c3fc30320cc7e84f5dc913a64f8 ]
    
    Provide phylink_expects_phy() to allow MAC drivers to check if it
    is expecting a PHY to attach to. Since fixed-linked setups do not
    need to attach to a PHY.
    
    Provides a boolean value as to if the MAC should expect a PHY.
    Returns true if a PHY is expected.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: fe2cfbc96803 ("net: stmmac: check if MAC needs to attach to a PHY")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa95efa187b4114075f312b3c4680d050b56fdec
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Thu Mar 30 09:25:32 2023 +0800

    net: qrtr: Fix a refcount bug in qrtr_recvmsg()
    
    [ Upstream commit 44d807320000db0d0013372ad39b53e12d52f758 ]
    
    Syzbot reported a bug as following:
    
    refcount_t: addition on 0; use-after-free.
    ...
    RIP: 0010:refcount_warn_saturate+0x17c/0x1f0 lib/refcount.c:25
    ...
    Call Trace:
     <TASK>
     __refcount_add include/linux/refcount.h:199 [inline]
     __refcount_inc include/linux/refcount.h:250 [inline]
     refcount_inc include/linux/refcount.h:267 [inline]
     kref_get include/linux/kref.h:45 [inline]
     qrtr_node_acquire net/qrtr/af_qrtr.c:202 [inline]
     qrtr_node_lookup net/qrtr/af_qrtr.c:398 [inline]
     qrtr_send_resume_tx net/qrtr/af_qrtr.c:1003 [inline]
     qrtr_recvmsg+0x85f/0x990 net/qrtr/af_qrtr.c:1070
     sock_recvmsg_nosec net/socket.c:1017 [inline]
     sock_recvmsg+0xe2/0x160 net/socket.c:1038
     qrtr_ns_worker+0x170/0x1700 net/qrtr/ns.c:688
     process_one_work+0x991/0x15c0 kernel/workqueue.c:2390
     worker_thread+0x669/0x1090 kernel/workqueue.c:2537
    
    It occurs in the concurrent scenario of qrtr_recvmsg() and
    qrtr_endpoint_unregister() as following:
    
            cpu0                                    cpu1
    qrtr_recvmsg                            qrtr_endpoint_unregister
    qrtr_send_resume_tx                     qrtr_node_release
    qrtr_node_lookup                        mutex_lock(&qrtr_node_lock)
    spin_lock_irqsave(&qrtr_nodes_lock, )   refcount_dec_and_test(&node->ref) [node->ref == 0]
    radix_tree_lookup [node != NULL]        __qrtr_node_release
    qrtr_node_acquire                       spin_lock_irqsave(&qrtr_nodes_lock, )
    kref_get(&node->ref) [WARNING]          ...
                                            mutex_unlock(&qrtr_node_lock)
    
    Use qrtr_node_lock to protect qrtr_node_lookup() implementation, this
    is actually improving the protection of node reference.
    
    Fixes: 0a7e0d0ef054 ("net: qrtr: Migrate node lookup tree to spinlock")
    Reported-by: syzbot+a7492efaa5d61b51db23@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=a7492efaa5d61b51db23
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 022c8320d9eb7394538bd716fa1a07a5ed92621b
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Mar 24 13:09:24 2023 +0100

    wifi: mac80211: fix invalid drv_sta_pre_rcu_remove calls for non-uploaded sta
    
    [ Upstream commit 12b220a6171faf10638ab683a975cadcf1a352d6 ]
    
    Avoid potential data corruption issues caused by uninitialized driver
    private data structures.
    
    Reported-by: Brian Coverstone <brian@mainsequence.net>
    Fixes: 6a9d1b91f34d ("mac80211: add pre-RCU-sync sta removal driver operation")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20230324120924.38412-3-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c46239e6295cd8719f773abd804ea987496beb0e
Author: Ryder Lee <ryder.lee@mediatek.com>
Date:   Tue Mar 28 01:07:41 2023 +0800

    wifi: mac80211: fix the size calculation of ieee80211_ie_len_eht_cap()
    
    [ Upstream commit dd01579e5ed922dcfcb8fec53fa03b81c7649a04 ]
    
    Here should return the size of ieee80211_eht_cap_elem_fixed, so fix it.
    
    Fixes: 820acc810fb6 ("mac80211: Add EHT capabilities to association/probe request")
    Signed-off-by: Ryder Lee <ryder.lee@mediatek.com>
    Link: https://lore.kernel.org/r/06c13635fc03bcff58a647b8e03e9f01a74294bd.1679935259.git.ryder.lee@mediatek.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d797b152ca343953351de8bd46512f54dc3feea
Author: Nico Boehr <nrb@linux.ibm.com>
Date:   Mon Feb 13 09:55:20 2023 +0100

    KVM: s390: pv: fix external interruption loop not always detected
    
    [ Upstream commit 21f27df854008b86349a203bf97fef79bb11f53e ]
    
    To determine whether the guest has caused an external interruption loop
    upon code 20 (external interrupt) intercepts, the ext_new_psw needs to
    be inspected to see whether external interrupts are enabled.
    
    Under non-PV, ext_new_psw can simply be taken from guest lowcore. Under
    PV, KVM can only access the encrypted guest lowcore and hence the
    ext_new_psw must not be taken from guest lowcore.
    
    handle_external_interrupt() incorrectly did that and hence was not able
    to reliably tell whether an external interruption loop is happening or
    not. False negatives cause spurious failures of my kvm-unit-test
    for extint loops[1] under PV.
    
    Since code 20 is only caused under PV if and only if the guest's
    ext_new_psw is enabled for external interrupts, false positive detection
    of a external interruption loop can not happen.
    
    Fix this issue by instead looking at the guest PSW in the state
    description. Since the PSW swap for external interrupt is done by the
    ultravisor before the intercept is caused, this reliably tells whether
    the guest is enabled for external interrupts in the ext_new_psw.
    
    Also update the comments to explain better what is happening.
    
    [1] https://lore.kernel.org/kvm/20220812062151.1980937-4-nrb@linux.ibm.com/
    
    Signed-off-by: Nico Boehr <nrb@linux.ibm.com>
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Fixes: 201ae986ead7 ("KVM: s390: protvirt: Implement interrupt injection")
    Link: https://lore.kernel.org/r/20230213085520.100756-2-nrb@linux.ibm.com
    Message-Id: <20230213085520.100756-2-nrb@linux.ibm.com>
    Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84f9405868452c05be2ccaa46baf7e3f43fd69f4
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Thu Mar 23 11:01:25 2023 +0000

    ASoC: codecs: lpass: fix the order or clks turn off during suspend
    
    [ Upstream commit a4a3203426f4b67535d6442ddc5dca8878a0678f ]
    
    The order in which clocks are stopped matters as some of the clock
    like NPL are derived from MCLK.
    
    Without this patch, Dragonboard RB5 DSP would crash with below error:
     qcom_q6v5_pas 17300000.remoteproc: fatal error received:
     ABT_dal.c:278:ABTimeout: AHB Bus hang is detected,
     Number of bus hang detected := 2 , addr0 = 0x3370000 , addr1 = 0x0!!!
    
    Turn off  fsgen first, followed by npl and then finally mclk, which is exactly
    the opposite order of enable sequence.
    
    Fixes: 1dc3459009c3 ("ASoC: codecs: lpass: register mclk after runtime pm")
    Reported-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Tested-by: Amit Pundir <amit.pundir@linaro.org>
    Link: https://lore.kernel.org/r/20230323110125.23790-1-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f62d2d396f166a6ea00aec9e00e2a2e76b76249
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:44 2023 +0100

    pwm: meson: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 8caa81eb950cb2e9d2d6959b37d853162d197f57 ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    This fixes a regression that was possible since commit c73a3107624d
    ("pwm: Handle .get_state() failures") which stopped to zero-initialize
    the state passed to the .get_state() callback. This was reported at
    https://forum.odroid.com/viewtopic.php?f=177&t=46360 . While this was an
    unintended side effect, the real issue is the driver's callback not
    setting the polarity.
    
    There is a complicating fact, that the .apply() callback fakes support
    for inversed polarity. This is not (and cannot) be matched by
    .get_state(). As fixing this isn't easy, only point it out in a comment
    to prevent authors of other drivers from copying that approach.
    
    Fixes: c375bcbaabdb ("pwm: meson: Read the full hardware state in meson_pwm_get_state()")
    Reported-by: Munehisa Kamata <kamatam@amazon.com>
    Acked-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20230310191405.2606296-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6af1a3ae767e26708b17e329e961b0eacffdfeb
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:43 2023 +0100

    pwm: sprd: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 2be4dcf6627e1bcbbef8e6ba1811f5127d39202c ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    Fixes: 8aae4b02e8a6 ("pwm: sprd: Add Spreadtrum PWM support")
    Link: https://lore.kernel.org/r/20230228135508.1798428-5-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 116a17f97764fa017637eca3d3f63f7a54f6cd17
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:42 2023 +0100

    pwm: iqs620a: Explicitly set .polarity in .get_state()
    
    [ Upstream commit b20b097128d9145fadcea1cbb45c4d186cb57466 ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    Fixes: 6f0841a8197b ("pwm: Add support for Azoteq IQS620A PWM generator")
    Reviewed-by: Jeff LaBundy <jeff@labundy.com>
    Link: https://lore.kernel.org/r/20230228135508.1798428-4-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a3a6a0aca8c92533792bc37a1040aa72941665a
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:41 2023 +0100

    pwm: cros-ec: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 30006b77c7e130e01d1ab2148cc8abf73dfcc4bf ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Fixes: 1f0d3bb02785 ("pwm: Add ChromeOS EC PWM driver")
    Link: https://lore.kernel.org/r/20230228135508.1798428-3-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98ba763cc91c8e0117ccc28e300640eee52f9b44
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:40 2023 +0100

    pwm: hibvt: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 6f57937980142715e927697a6ffd2050f38ed6f6 ]
    
    The driver only both polarities. Complete the implementation of
    .get_state() by setting .polarity according to the configured hardware
    state.
    
    Fixes: d09f00810850 ("pwm: Add PWM driver for HiSilicon BVT SOCs")
    Link: https://lore.kernel.org/r/20230228135508.1798428-2-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 547cc8dae2474605490912c64123c3df7f36df38
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Fri Dec 2 19:35:26 2022 +0100

    pwm: Make .get_state() callback return an error code
    
    [ Upstream commit 6c452cff79f8bf1c0146fda598d32061cfd25443 ]
    
    .get_state() might fail in some cases. To make it possible that a driver
    signals such a failure change the prototype of .get_state() to return an
    error code.
    
    This patch was created using coccinelle and the following semantic patch:
    
    @p1@
    identifier getstatefunc;
    identifier driver;
    @@
     struct pwm_ops driver = {
            ...,
            .get_state = getstatefunc
            ,...
     };
    
    @p2@
    identifier p1.getstatefunc;
    identifier chip, pwm, state;
    @@
    -void
    +int
     getstatefunc(struct pwm_chip *chip, struct pwm_device *pwm, struct pwm_state *state)
     {
       ...
    -  return;
    +  return 0;
       ...
     }
    
    plus the actual change of the prototype in include/linux/pwm.h (plus some
    manual fixing of indentions and empty lines).
    
    So for now all drivers return success unconditionally. They are adapted
    in the following patches to make the changes easier reviewable.
    
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Reviewed-by: Baolin Wang <baolin.wang@linux.alibaba.com>
    Reviewed-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Reviewed-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Reviewed-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Acked-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/r/20221130152148.2769768-2-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Stable-dep-of: 6f5793798014 ("pwm: hibvt: Explicitly set .polarity in .get_state()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eafd3967b9e71d2f7a9e8fb445272d18e162d4ae
Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Date:   Wed Mar 22 10:55:38 2023 +0200

    ASoC: SOF: ipc4: Ensure DSP is in D0I0 during sof_ipc4_set_get_data()
    
    [ Upstream commit e51f49512d98783b90799c9cc2002895ec3aa0eb ]
    
    The set_get_data() IPC op bypasses the check for the no_pm flag as done
    with the regular IPC tx_msg op. Since set_get_data should be performed
    when the DSP is in D0I0, set the DSP power state to D0I0 before sending
    the IPC's in sof_ipc4_set_get_data().
    
    Fixes: ceb89acc4dc8 ("ASoC: SOF: ipc4: Add support for mandatory message handling functionality")
    Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Link: https://lore.kernel.org/r/20230322085538.10214-1-peter.ujfalusi@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c3f0ae5435fd20bb1e3a8308488aa6ac33151ee
Author: Mohammed Gamal <mgamal@redhat.com>
Date:   Fri Feb 17 22:44:11 2023 +0200

    Drivers: vmbus: Check for channel allocation before looking up relids
    
    [ Upstream commit 1eb65c8687316c65140b48fad27133d583178e15 ]
    
    relid2channel() assumes vmbus channel array to be allocated when called.
    However, in cases such as kdump/kexec, not all relids will be reset by the host.
    When the second kernel boots and if the guest receives a vmbus interrupt during
    vmbus driver initialization before vmbus_connect() is called, before it finishes,
    or if it fails, the vmbus interrupt service routine is called which in turn calls
    relid2channel() and can cause a null pointer dereference.
    
    Print a warning and error out in relid2channel() for a channel id that's invalid
    in the second kernel.
    
    Fixes: 8b6a877c060e ("Drivers: hv: vmbus: Replace the per-CPU channel lists with a global array of channels")
    
    Signed-off-by: Mohammed Gamal <mgamal@redhat.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Link: https://lore.kernel.org/r/20230217204411.212709-1-mgamal@redhat.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8df93c8da5327b4eb1cfebf7efa5271c89b3a377
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Feb 25 21:39:48 2023 -0800

    gpio: GPIO_REGMAP: select REGMAP instead of depending on it
    
    [ Upstream commit d49765b5f4320a402fbc4ed5edfd73d87640f27c ]
    
    REGMAP is a hidden (not user visible) symbol. Users cannot set it
    directly thru "make *config", so drivers should select it instead of
    depending on it if they need it.
    
    Consistently using "select" or "depends on" can also help reduce
    Kconfig circular dependency issues.
    
    Therefore, change the use of "depends on REGMAP" to "select REGMAP".
    
    Fixes: ebe363197e52 ("gpio: add a reusable generic gpio_chip using regmap")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Michael Walle <michael@walle.cc>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Bartosz Golaszewski <brgl@bgdev.pl>
    Cc: linux-gpio@vger.kernel.org
    Acked-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74347b99d4ebbbab43ac21b7a4420ab03369c568
Author: Reiji Watanabe <reijiw@google.com>
Date:   Sun Mar 12 20:32:34 2023 -0700

    KVM: arm64: PMU: Don't save PMCR_EL0.{C,P} for the vCPU
    
    [ Upstream commit f6da81f650fa47b61b847488f3938d43f90d093d ]
    
    Presently, when a guest writes 1 to PMCR_EL0.{C,P}, which is WO/RAZ,
    KVM saves the register value, including these bits.
    When userspace reads the register using KVM_GET_ONE_REG, KVM returns
    the saved register value as it is (the saved value might have these
    bits set).  This could result in userspace setting these bits on the
    destination during migration.  Consequently, KVM may end up resetting
    the vPMU counter registers (PMCCNTR_EL0 and/or PMEVCNTR<n>_EL0) to
    zero on the first KVM_RUN after migration.
    
    Fix this by not saving those bits when a guest writes 1 to those bits.
    
    Fixes: ab9468340d2b ("arm64: KVM: Add access handler for PMCR register")
    Cc: stable@vger.kernel.org
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Reiji Watanabe <reijiw@google.com>
    Link: https://lore.kernel.org/r/20230313033234.1475987-1-reijiw@google.com
    Signed-off-by: Oliver Upton <oliver.upton@linux.dev>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d8c8a9ad53e96dccc941ee5159a7e19f2f33169
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Nov 24 10:44:59 2022 +0000

    KVM: arm64: PMU: Sanitise PMCR_EL0.LP on first vcpu run
    
    [ Upstream commit 64d6820d64c0a206e744bd8945374d563a76c16c ]
    
    Userspace can play some dirty tricks on us by selecting a given
    PMU version (such as PMUv3p5), restore a PMCR_EL0 value that
    has PMCR_EL0.LP set, and then switch the PMU version to PMUv3p1,
    for example. In this situation, we end-up with PMCR_EL0.LP being
    set and spreading havoc in the PMU emulation.
    
    This is specially hard as the first two step can be done on
    one vcpu and the third step on another, meaning that we need
    to sanitise *all* vcpus when the PMU version is changed.
    
    In orer to avoid a pretty complicated locking situation,
    defer the sanitisation of PMCR_EL0 to the point where the
    vcpu is actually run for the first tine, using the existing
    KVM_REQ_RELOAD_PMU request that calls into kvm_pmu_handle_pmcr().
    
    There is still an obscure corner case where userspace could
    do the above trick, and then save the VM without running it.
    They would then observe an inconsistent state (PMUv3.1 + LP set),
    but that state will be fixed on the first run anyway whenever
    the guest gets restored on a host.
    
    Reported-by: Reiji Watanabe <reijiw@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Stable-dep-of: f6da81f650fa ("KVM: arm64: PMU: Don't save PMCR_EL0.{C,P} for the vCPU")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 508d71a6770899facd26d4b92d9883656be67eaa
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Nov 13 16:38:20 2022 +0000

    KVM: arm64: PMU: Distinguish between 64bit counter and 64bit overflow
    
    [ Upstream commit c82d28cbf1d4f9fe174041b4485c635cb970afa7 ]
    
    The PMU architecture makes a subtle difference between a 64bit
    counter and a counter that has a 64bit overflow. This is for example
    the case of the cycle counter, which can generate an overflow on
    a 32bit boundary if PMCR_EL0.LC==0 despite the accumulation being
    done on 64 bits.
    
    Use this distinction in the few cases where it matters in the code,
    as we will reuse this with PMUv3p5 long counters.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221113163832.3154370-5-maz@kernel.org
    Stable-dep-of: f6da81f650fa ("KVM: arm64: PMU: Don't save PMCR_EL0.{C,P} for the vCPU")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb3df961021b9c018cc609aa63aec9b3938e9fc3
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Nov 13 16:38:18 2022 +0000

    KVM: arm64: PMU: Align chained counter implementation with architecture pseudocode
    
    [ Upstream commit bead02204e9806807bb290137b1ccabfcb4b16fd ]
    
    Ricardo recently pointed out that the PMU chained counter emulation
    in KVM wasn't quite behaving like the one on actual hardware, in
    the sense that a chained counter would expose an overflow on
    both halves of a chained counter, while KVM would only expose the
    overflow on the top half.
    
    The difference is subtle, but significant. What does the architecture
    say (DDI0087 H.a):
    
    - Up to PMUv3p4, all counters but the cycle counter are 32bit
    
    - A 32bit counter that overflows generates a CHAIN event on the
      adjacent counter after exposing its own overflow status
    
    - The CHAIN event is accounted if the counter is correctly
      configured (CHAIN event selected and counter enabled)
    
    This all means that our current implementation (which uses 64bit
    perf events) prevents us from emulating this overflow on the lower half.
    
    How to fix this? By implementing the above, to the letter.
    
    This largely results in code deletion, removing the notions of
    "counter pair", "chained counters", and "canonical counter".
    The code is further restructured to make the CHAIN handling similar
    to SWINC, as the two are now extremely similar in behaviour.
    
    Reported-by: Ricardo Koller <ricarkol@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Reiji Watanabe <reijiw@google.com>
    Link: https://lore.kernel.org/r/20221113163832.3154370-3-maz@kernel.org
    Stable-dep-of: f6da81f650fa ("KVM: arm64: PMU: Don't save PMCR_EL0.{C,P} for the vCPU")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d70c2e2f973e3aa8e43b0ae459dc9c1e0f72984
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Thu Mar 30 14:56:38 2023 -0400

    dm: fix improper splitting for abnormal bios
    
    [ Upstream commit f7b58a69fad9d2c4c90cab0247811155dd0d48e7 ]
    
    "Abnormal" bios include discards, write zeroes and secure erase. By no
    longer passing the calculated 'len' pointer, commit 7dd06a2548b2 ("dm:
    allow dm_accept_partial_bio() for dm_io without duplicate bios") took a
    senseless approach to disallowing dm_accept_partial_bio() from working
    for duplicate bios processed using __send_duplicate_bios().
    
    It inadvertently and incorrectly stopped the use of 'len' when
    initializing a target's io (in alloc_tio). As such the resulting tio
    could address more area of a device than it should.
    
    For example, when discarding an entire DM striped device with the
    following DM table:
     vg-lvol0: 0 159744 striped 2 128 7:0 2048 7:1 2048
     vg-lvol0: 159744 45056 striped 2 128 7:2 2048 7:3 2048
    
    Before this fix:
    
     device-mapper: striped: target_stripe=0, bdev=7:0, start=2048 len=102400
     blkdiscard: attempt to access beyond end of device
     loop0: rw=2051, sector=2048, nr_sectors = 102400 limit=81920
    
     device-mapper: striped: target_stripe=1, bdev=7:1, start=2048 len=102400
     blkdiscard: attempt to access beyond end of device
     loop1: rw=2051, sector=2048, nr_sectors = 102400 limit=81920
    
    After this fix;
    
     device-mapper: striped: target_stripe=0, bdev=7:0, start=2048 len=79872
     device-mapper: striped: target_stripe=1, bdev=7:1, start=2048 len=79872
    
    Fixes: 7dd06a2548b2 ("dm: allow dm_accept_partial_bio() for dm_io without duplicate bios")
    Cc: stable@vger.kernel.org
    Reported-by: Orange Kao <orange@aiven.io>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83ee6b2729429f7feadd42e081751c00225d2347
Author: Heinz Mauelshagen <heinzm@redhat.com>
Date:   Wed Jan 25 21:14:58 2023 +0100

    dm: change "unsigned" to "unsigned int"
    
    [ Upstream commit 86a3238c7b9b759cb864f4f768ab2e24687dc0e6 ]
    
    Signed-off-by: Heinz Mauelshagen <heinzm@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Stable-dep-of: f7b58a69fad9 ("dm: fix improper splitting for abnormal bios")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32bde86816aa27fb4ef8312a66f49b6bcbd514b9
Author: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
Date:   Tue Jan 31 14:09:41 2023 +0800

    dm integrity: Remove bi_sector that's only used by commented debug code
    
    [ Upstream commit 5cd6d1d53a1f74222e73d8b42ab7ecf28ee2f34f ]
    
    drivers/md/dm-integrity.c:1738:13: warning: variable 'bi_sector' set but not used.
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Link: https://bugzilla.openanolis.cn/show_bug.cgi?id=3895
    Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Stable-dep-of: f7b58a69fad9 ("dm: fix improper splitting for abnormal bios")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b1af0115f419c5360c88f3445da93453d9f1b0f
Author: Joe Thornber <ejt@redhat.com>
Date:   Thu Jan 26 10:14:26 2023 +0000

    dm cache: Add some documentation to dm-cache-background-tracker.h
    
    [ Upstream commit 22c40e134c4c7a828ac09d25a5a8597b1e45c031 ]
    
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Stable-dep-of: f7b58a69fad9 ("dm: fix improper splitting for abnormal bios")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 387078f9030cf336cd9fef521540db75b61615e0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 5 11:23:52 2023 +0200

    Linux 5.10.177
    
    Link: https://lore.kernel.org/r/20230403140414.174516815@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34a02011c5d1b9de0085e6e004f20abf0a9cbf42
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Wed Mar 15 21:25:17 2023 +0100

    hsr: ratelimit only when errors are printed
    
    commit 1b0120e4db0bf2838d1ce741195ce4b7cc100b91 upstream.
    
    Recently, when automatically merging -net and net-next in MPTCP devel
    tree, our CI reported [1] a conflict in hsr, the same as the one
    reported by Stephen in netdev [2].
    
    When looking at the conflict, I noticed it is in fact the v1 [3] that
    has been applied in -net and the v2 [4] in net-next. Maybe the v1 was
    applied by accident.
    
    As mentioned by Jakub Kicinski [5], the new condition makes more sense
    before the net_ratelimit(), not to update net_ratelimit's state which is
    unnecessary if we're not going to print either way.
    
    Here, this modification applies the v2 but in -net.
    
    Link: https://github.com/multipath-tcp/mptcp_net-next/actions/runs/4423171069 [1]
    Link: https://lore.kernel.org/netdev/20230315100914.53fc1760@canb.auug.org.au/ [2]
    Link: https://lore.kernel.org/netdev/20230307133229.127442-1-koverskeid@gmail.com/ [3]
    Link: https://lore.kernel.org/netdev/20230309092302.179586-1-koverskeid@gmail.com/ [4]
    Link: https://lore.kernel.org/netdev/20230308232001.2fb62013@kernel.org/ [5]
    Fixes: 28e8cabe80f3 ("net: hsr: Don't log netdev_err message on unknown prp dst node")
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Reviewed-by: Steen Hegelund <Steen.Hegelund@microchip.com>
    Link: https://lore.kernel.org/r/20230315-net-20230315-hsr_framereg-ratelimit-v1-1-61d2ef176d11@tessares.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c414f6f06e9a3934901b6edc3177ae5a1e07094
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Sun Dec 4 17:00:04 2022 +0100

    gfs2: Always check inode size of inline inodes
    
    commit 70376c7ff31221f1d21db5611d8209e677781d3a upstream.
    
    Check if the inode size of stuffed (inline) inodes is within the allowed
    range when reading inodes from disk (gfs2_dinode_in()).  This prevents
    us from on-disk corruption.
    
    The two checks in stuffed_readpage() and gfs2_unstuffer_page() that just
    truncate inline data to the maximum allowed size don't actually make
    sense, and they can be removed now as well.
    
    Reported-by: syzbot+7bb81dfa9cda07d9cd9d@syzkaller.appspotmail.com
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    [pchelkin@ispras.ru: adjust the inode variable inside gfs2_dinode_in with
    the format used before upstream commit 7db354444ad8 ("gfs2: Cosmetic
    gfs2_dinode_{in,out} cleanup")]
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3392d67af0a4bf13e7f6ef0cddfc622bc2e8c95e
Author: Ye Bin <yebin10@huawei.com>
Date:   Tue Dec 6 22:41:34 2022 +0800

    ext4: fix kernel BUG in 'ext4_write_inline_data_end()'
    
    commit 5c099c4fdc438014d5893629e70a8ba934433ee8 upstream.
    
    Syzbot report follow issue:
    ------------[ cut here ]------------
    kernel BUG at fs/ext4/inline.c:227!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 3629 Comm: syz-executor212 Not tainted 6.1.0-rc5-syzkaller-00018-g59d0d52c30d4 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
    RIP: 0010:ext4_write_inline_data+0x344/0x3e0 fs/ext4/inline.c:227
    RSP: 0018:ffffc90003b3f368 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff8880704e16c0 RCX: 0000000000000000
    RDX: ffff888021763a80 RSI: ffffffff821e31a4 RDI: 0000000000000006
    RBP: 000000000006818e R08: 0000000000000006 R09: 0000000000068199
    R10: 0000000000000079 R11: 0000000000000000 R12: 000000000000000b
    R13: 0000000000068199 R14: ffffc90003b3f408 R15: ffff8880704e1c82
    FS:  000055555723e3c0(0000) GS:ffff8880b9b00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fffe8ac9080 CR3: 0000000079f81000 CR4: 0000000000350ee0
    Call Trace:
     <TASK>
     ext4_write_inline_data_end+0x2a3/0x12f0 fs/ext4/inline.c:768
     ext4_write_end+0x242/0xdd0 fs/ext4/inode.c:1313
     ext4_da_write_end+0x3ed/0xa30 fs/ext4/inode.c:3063
     generic_perform_write+0x316/0x570 mm/filemap.c:3764
     ext4_buffered_write_iter+0x15b/0x460 fs/ext4/file.c:285
     ext4_file_write_iter+0x8bc/0x16e0 fs/ext4/file.c:700
     call_write_iter include/linux/fs.h:2191 [inline]
     do_iter_readv_writev+0x20b/0x3b0 fs/read_write.c:735
     do_iter_write+0x182/0x700 fs/read_write.c:861
     vfs_iter_write+0x74/0xa0 fs/read_write.c:902
     iter_file_splice_write+0x745/0xc90 fs/splice.c:686
     do_splice_from fs/splice.c:764 [inline]
     direct_splice_actor+0x114/0x180 fs/splice.c:931
     splice_direct_to_actor+0x335/0x8a0 fs/splice.c:886
     do_splice_direct+0x1ab/0x280 fs/splice.c:974
     do_sendfile+0xb19/0x1270 fs/read_write.c:1255
     __do_sys_sendfile64 fs/read_write.c:1323 [inline]
     __se_sys_sendfile64 fs/read_write.c:1309 [inline]
     __x64_sys_sendfile64+0x1d0/0x210 fs/read_write.c:1309
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    ---[ end trace 0000000000000000 ]---
    
    Above issue may happens as follows:
    ext4_da_write_begin
      ext4_da_write_inline_data_begin
        ext4_da_convert_inline_data_to_extent
          ext4_clear_inode_state(inode, EXT4_STATE_MAY_INLINE_DATA);
    ext4_da_write_end
    
    ext4_run_li_request
      ext4_mb_prefetch
        ext4_read_block_bitmap_nowait
          ext4_validate_block_bitmap
            ext4_mark_group_bitmap_corrupted(sb, block_group, EXT4_GROUP_INFO_BBITMAP_CORRUPT)
             percpu_counter_sub(&sbi->s_freeclusters_counter,grp->bb_free);
              -> sbi->s_freeclusters_counter become zero
    ext4_da_write_begin
      if (ext4_nonda_switch(inode->i_sb)) -> As freeclusters_counter is zero will return true
        *fsdata = (void *)FALL_BACK_TO_NONDELALLOC;
        ext4_write_begin
    ext4_da_write_end
      if (write_mode == FALL_BACK_TO_NONDELALLOC)
        ext4_write_end
          if (inline_data)
            ext4_write_inline_data_end
              ext4_write_inline_data
                BUG_ON(pos + len > EXT4_I(inode)->i_inline_size);
               -> As inode is already convert to extent, so 'pos + len' > inline_size
               -> then trigger BUG.
    
    To solve this issue, instead of checking ext4_has_inline_data() which
    is only cleared after data has been written back, check the
    EXT4_STATE_MAY_INLINE_DATA flag in ext4_write_end().
    
    Fixes: f19d5870cbf7 ("ext4: add normal write support for inline data")
    Reported-by: syzbot+4faa160fa96bfba639f8@syzkaller.appspotmail.com
    Reported-by: Jun Nie <jun.nie@linaro.org>
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Link: https://lore.kernel.org/r/20221206144134.1919987-1-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    [ta: Fix conflict in if expression and use the local variable inline_data
    as it is initialized with ext4_has_inline_data(inode) anyway.]
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4781477f397a9e10f36d035ffc76bfb67aa1639
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Thu Dec 15 10:36:05 2022 -0800

    libbpf: Fix btf_dump's packed struct determination
    
    [ Upstream commit 4fb877aaa179dcdb1676d55216482febaada457e ]
    
    Fix bug in btf_dump's logic of determining if a given struct type is
    packed or not. The notion of "natural alignment" is not needed and is
    even harmful in this case, so drop it altogether. The biggest difference
    in btf_is_struct_packed() compared to its original implementation is
    that we don't really use btf__align_of() to determine overall alignment
    of a struct type (because it could be 1 for both packed and non-packed
    struct, depending on specifci field definitions), and just use field's
    actual alignment to calculate whether any field is requiring packing or
    struct's size overall necessitates packing.
    
    Add two simple test cases that demonstrate the difference this change
    would make.
    
    Fixes: ea2ce1ba99aa ("libbpf: Fix BTF-to-C converter's padding logic")
    Reported-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Eduard Zingerman <eddyz87@gmail.com>
    Link: https://lore.kernel.org/bpf/20221215183605.4149488-1-andrii@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ad30ad8c684362364e629574ab02eec3b9bb1bc
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Mon Dec 12 13:15:05 2022 -0800

    selftests/bpf: Add few corner cases to test padding handling of btf_dump
    
    [ Upstream commit b148c8b9b926e257a59c8eb2cd6fa3adfd443254 ]
    
    Add few hand-crafted cases and few randomized cases found using script
    from [0] that tests btf_dump's padding logic.
    
      [0] https://lore.kernel.org/bpf/85f83c333f5355c8ac026f835b18d15060725fcb.camel@ericsson.com/
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20221212211505.558851-7-andrii@kernel.org
    Stable-dep-of: 4fb877aaa179 ("libbpf: Fix btf_dump's packed struct determination")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5a16bcb131c969befc4ede5542a1c2bd3ecf11b
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Mon Dec 12 13:15:04 2022 -0800

    libbpf: Fix BTF-to-C converter's padding logic
    
    [ Upstream commit ea2ce1ba99aa6a60c8d8a706e3abadf3de372163 ]
    
    Turns out that btf_dump API doesn't handle a bunch of tricky corner
    cases, as reported by Per, and further discovered using his testing
    Python script ([0]).
    
    This patch revamps btf_dump's padding logic significantly, making it
    more correct and also avoiding unnecessary explicit padding, where
    compiler would pad naturally. This overall topic turned out to be very
    tricky and subtle, there are lots of subtle corner cases. The comments
    in the code tries to give some clues, but comments themselves are
    supposed to be paired with good understanding of C alignment and padding
    rules. Plus some experimentation to figure out subtle things like
    whether `long :0;` means that struct is now forced to be long-aligned
    (no, it's not, turns out).
    
    Anyways, Per's script, while not completely correct in some known
    situations, doesn't show any obvious cases where this logic breaks, so
    this is a nice improvement over the previous state of this logic.
    
    Some selftests had to be adjusted to accommodate better use of natural
    alignment rules, eliminating some unnecessary padding, or changing it to
    `type: 0;` alignment markers.
    
    Note also that for when we are in between bitfields, we emit explicit
    bit size, while otherwise we use `: 0`, this feels much more natural in
    practice.
    
    Next patch will add few more test cases, found through randomized Per's
    script.
    
      [0] https://lore.kernel.org/bpf/85f83c333f5355c8ac026f835b18d15060725fcb.camel@ericsson.com/
    
    Reported-by: Per Sundström XP <per.xp.sundstrom@ericsson.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20221212211505.558851-6-andrii@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9f7422dd94a6ec5572a3e895157ec1dad2952a7
Author: Eduard Zingerman <eddyz87@gmail.com>
Date:   Sat Oct 1 13:44:25 2022 +0300

    selftests/bpf: Test btf dump for struct with padding only fields
    
    [ Upstream commit d503f1176b14f722a40ea5110312614982f9a80b ]
    
    Structures with zero regular fields but some padding constitute a
    special case in btf_dump.c:btf_dump_emit_struct_def with regards to
    newline before closing '}'.
    
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20221001104425.415768-2-eddyz87@gmail.com
    Stable-dep-of: ea2ce1ba99aa ("libbpf: Fix BTF-to-C converter's padding logic")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c17475a9dcb947dafcebc1c4940750ddf495bb
Author: Damien Le Moal <damien.lemoal@opensource.wdc.com>
Date:   Mon Mar 20 22:49:15 2023 +0900

    zonefs: Fix error message in zonefs_file_dio_append()
    
    commit 88b170088ad2c3e27086fe35769aa49f8a512564 upstream.
    
    Since the expected write location in a sequential file is always at the
    end of the file (append write), when an invalid write append location is
    detected in zonefs_file_dio_append(), print the invalid written location
    instead of the expected write location.
    
    Fixes: a608da3bd730 ("zonefs: Detect append writes at invalid locations")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b51e4422952b5c98dad46caa017c233ac783679f
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Mar 23 15:56:48 2023 +0800

    btrfs: scan device in non-exclusive mode
    
    commit 50d281fc434cb8e2497f5e70a309ccca6b1a09f0 upstream.
    
    This fixes mkfs/mount/check failures due to race with systemd-udevd
    scan.
    
    During the device scan initiated by systemd-udevd, other user space
    EXCL operations such as mkfs, mount, or check may get blocked and result
    in a "Device or resource busy" error. This is because the device
    scan process opens the device with the EXCL flag in the kernel.
    
    Two reports were received:
    
     - btrfs/179 test case, where the fsck command failed with the -EBUSY
       error
    
     - LTP pwritev03 test case, where mkfs.vfs failed with
       the -EBUSY error, when mkfs.vfs tried to overwrite old btrfs filesystem
       on the device.
    
    In both cases, fsck and mkfs (respectively) were racing with a
    systemd-udevd device scan, and systemd-udevd won, resulting in the
    -EBUSY error for fsck and mkfs.
    
    Reproducing the problem has been difficult because there is a very
    small window during which these userspace threads can race to
    acquire the exclusive device open. Even on the system where the problem
    was observed, the problem occurrences were anywhere between 10 to 400
    iterations and chances of reproducing decreases with debug printk()s.
    
    However, an exclusive device open is unnecessary for the scan process,
    as there are no write operations on the device during scan. Furthermore,
    during the mount process, the superblock is re-read in the below
    function call chain:
    
      btrfs_mount_root
       btrfs_open_devices
        open_fs_devices
         btrfs_open_one_device
           btrfs_get_bdev_and_sb
    
    So, to fix this issue, removes the FMODE_EXCL flag from the scan
    operation, and add a comment.
    
    The case where mkfs may still write to the device and a scan is running,
    the btrfs signature is not written at that time so scan will not
    recognize such device.
    
    Reported-by: Sherry Yang <sherry.yang@oracle.com>
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Link: https://lore.kernel.org/oe-lkp/202303170839.fdf23068-oliver.sang@intel.com
    CC: stable@vger.kernel.org # 5.4+
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3eeff8d26c6dceeaf10b552e8a5ce9010d818f41
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Thu Mar 23 13:09:16 2023 +0100

    s390/uaccess: add missing earlyclobber annotations to __clear_user()
    
    commit 89aba4c26fae4e459f755a18912845c348ee48f3 upstream.
    
    Add missing earlyclobber annotation to size, to, and tmp2 operands of the
    __clear_user() inline assembly since they are modified or written to before
    the last usage of all input operands. This can lead to incorrect register
    allocation for the inline assembly.
    
    Fixes: 6c2a9e6df604 ("[S390] Use alternative user-copy operations for new hardware.")
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/all/20230321122514.1743889-3-mark.rutland@arm.com/
    Cc: stable@vger.kernel.org
    Reviewed-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7051d51f1241d02a9db159485bddfe508427ab01
Author: Fangzhi Zuo <Jerry.Zuo@amd.com>
Date:   Fri Feb 24 13:45:21 2023 -0500

    drm/amd/display: Add DSC Support for Synaptics Cascaded MST Hub
    
    commit f4f3b7dedbe849e780c779ba67365bb1db0d8637 upstream.
    
    Traditional synaptics hub has one MST branch device without virtual dpcd.
    Synaptics cascaded hub has two chained MST branch devices. DSC decoding
    is performed via root MST branch device, instead of the second MST branch
    device.
    
    Reviewed-by: Hersen Wu <hersenxs.wu@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Fangzhi Zuo <Jerry.Zuo@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79815326a516f70af8a79f1a49e50f3efd11a1db
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Fri Feb 24 18:21:54 2023 +0100

    drm/etnaviv: fix reference leak when mmaping imported buffer
    
    commit 963b2e8c428f79489ceeb058e8314554ec9cbe6f upstream.
    
    drm_gem_prime_mmap() takes a reference on the GEM object, but before that
    drm_gem_mmap_obj() already takes a reference, which will be leaked as only
    one reference is dropped when the mapping is closed. Drop the extra
    reference when dma_buf_mmap() succeeds.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Christian Gmeiner <christian.gmeiner@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a484f8bec8ee33e596d6936241bb397e76144ef8
Author: Douglas Raillard <douglas.raillard@arm.com>
Date:   Mon Mar 6 12:27:43 2023 +0000

    rcu: Fix rcu_torture_read ftrace event
    
    commit d18a04157fc171fd48075e3dc96471bd3b87f0dd upstream.
    
    Fix the rcutorturename field so that its size is correctly reported in
    the text format embedded in trace.dat files. As it stands, it is
    reported as being of size 1:
    
        field:char rcutorturename[8];   offset:8;       size:1; signed:0;
    
    Signed-off-by: Douglas Raillard <douglas.raillard@arm.com>
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Cc: stable@vger.kernel.org
    Fixes: 04ae87a52074e ("ftrace: Rework event_create_dir()")
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    [ boqun: Add "Cc" and "Fixes" tags per Steven ]
    Signed-off-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08bfd05987df2756aaf7b2b8f014c4cdcc6bcb39
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Thu Mar 16 23:00:21 2023 -0700

    xtensa: fix KASAN report for show_stack
    
    commit 1d3b7a788ca7435156809a6bd5b20c95b2370d45 upstream.
    
    show_stack dumps raw stack contents which may trigger an unnecessary
    KASAN report. Fix it by copying stack contents to a temporary buffer
    with __memcpy and then printing that buffer instead of passing stack
    pointer directly to the print_hex_dump.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ada1b5c8b43222d962231c58aebe4c72e5bf90c
Author: huangwenhui <huangwenhuia@uniontech.com>
Date:   Tue Mar 28 15:46:44 2023 +0800

    ALSA: hda/realtek: Add quirk for Lenovo ZhaoYang CF4620Z
    
    commit 52aad39385e1bfdb34a1b405f699a8ef302c58b0 upstream.
    
    Fix headset microphone detection on Lenovo ZhaoYang CF4620Z.
    
    [ adjusted to be applicable to the latest tree -- tiwai ]
    
    Signed-off-by: huangwenhui <huangwenhuia@uniontech.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230328074644.30142-1-huangwenhuia@uniontech.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b6992bdf09d7e46e9bfb92a98c4ca1f2779466a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Mar 24 08:50:05 2023 +0100

    ALSA: usb-audio: Fix regression on detection of Roland VS-100
    
    commit fa4e7a6fa12b1132340785e14bd439cbe95b7a5a upstream.
    
    It's been reported that the recent kernel can't probe the PCM devices
    on Roland VS-100 properly, and it turned out to be a regression by the
    recent addition of the bit shift range check for the format bits.
    In the old code, we just did bit-shift and it resulted in zero, which
    is then corrected to the standard PCM format, while the new code
    explicitly returns an error in such a case.
    
    For addressing the regression, relax the check and fallback to the
    standard PCM type (with the info output).
    
    Fixes: 43d5ca88dfcd ("ALSA: usb-audio: Fix potential out-of-bounds shift")
    Cc: <stable@vger.kernel.org>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217084
    Link: https://lore.kernel.org/r/20230324075005.19403-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0044721f4f9553f4001f5a469ac45d2a10e17139
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 20 15:09:54 2023 +0100

    ALSA: hda/conexant: Partial revert of a quirk for Lenovo
    
    commit b871cb971c683f7f212e7ca3c9a6709a75785116 upstream.
    
    The recent commit f83bb2592482 ("ALSA: hda/conexant: Add quirk for
    LENOVO 20149 Notebook model") introduced a quirk for the device with
    17aa:3977, but this caused a regression on another model (Lenovo
    Ideadpad U31) with the very same PCI SSID.  And, through skimming over
    the net, it seems that this PCI SSID is used for multiple different
    models, so it's no good idea to apply the quirk with the SSID.
    
    Although we may take a different ID check (e.g. the codec SSID instead
    of the PCI SSID), unfortunately, the original patch author couldn't
    identify the hardware details any longer as the machine was returned,
    and we can't develop the further proper fix.
    
    In this patch, instead, we partially revert the change so that the
    quirk won't be applied as default for addressing the regression.
    Meanwhile, the quirk function itself is kept, and it's now made to be
    applicable via the explicit model=lenovo-20149 option.
    
    Fixes: f83bb2592482 ("ALSA: hda/conexant: Add quirk for LENOVO 20149 Notebook model")
    Reported-by: Jetro Jormalainen <jje-lxkl@jetro.fi>
    Link: https://lore.kernel.org/r/20230308215009.4d3e58a6@mopti
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230320140954.31154-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d328a17c8cb4117cfa8d711d91faeb7c7819484
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Mar 21 00:17:36 2023 -0400

    NFSv4: Fix hangs when recovering open state after a server reboot
    
    commit 6165a16a5ad9b237bb3131cff4d3c601ccb8f9a3 upstream.
    
    When we're using a cached open stateid or a delegation in order to avoid
    sending a CLAIM_PREVIOUS open RPC call to the server, we don't have a
    new open stateid to present to update_open_stateid().
    Instead rely on nfs4_try_open_cached(), just as if we were doing a
    normal open.
    
    Fixes: d2bfda2e7aa0 ("NFSv4: don't reprocess cached open CLAIM_PREVIOUS")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80a4200d51e5a7e046f4a90f5faa5bafd5a60c58
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Mar 26 16:15:57 2023 -0600

    powerpc: Don't try to copy PPR for task with NULL pt_regs
    
    commit fd7276189450110ed835eb0a334e62d2f1c4e3be upstream.
    
    powerpc sets up PF_KTHREAD and PF_IO_WORKER with a NULL pt_regs, which
    from my (arguably very short) checking is not commonly done for other
    archs. This is fine, except when PF_IO_WORKER's have been created and
    the task does something that causes a coredump to be generated. Then we
    get this crash:
    
      Kernel attempted to read user page (160) - exploit attempt? (uid: 1000)
      BUG: Kernel NULL pointer dereference on read at 0x00000160
      Faulting instruction address: 0xc0000000000c3a60
      Oops: Kernel access of bad area, sig: 11 [#1]
      LE PAGE_SIZE=64K MMU=Radix SMP NR_CPUS=32 NUMA pSeries
      Modules linked in: bochs drm_vram_helper drm_kms_helper xts binfmt_misc ecb ctr syscopyarea sysfillrect cbc sysimgblt drm_ttm_helper aes_generic ttm sg libaes evdev joydev virtio_balloon vmx_crypto gf128mul drm dm_mod fuse loop configfs drm_panel_orientation_quirks ip_tables x_tables autofs4 hid_generic usbhid hid xhci_pci xhci_hcd usbcore usb_common sd_mod
      CPU: 1 PID: 1982 Comm: ppc-crash Not tainted 6.3.0-rc2+ #88
      Hardware name: IBM pSeries (emulated by qemu) POWER9 (raw) 0x4e1202 0xf000005 of:SLOF,HEAD hv:linux,kvm pSeries
      NIP:  c0000000000c3a60 LR: c000000000039944 CTR: c0000000000398e0
      REGS: c0000000041833b0 TRAP: 0300   Not tainted  (6.3.0-rc2+)
      MSR:  800000000280b033 <SF,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 88082828  XER: 200400f8
      ...
      NIP memcpy_power7+0x200/0x7d0
      LR  ppr_get+0x64/0xb0
      Call Trace:
        ppr_get+0x40/0xb0 (unreliable)
        __regset_get+0x180/0x1f0
        regset_get_alloc+0x64/0x90
        elf_core_dump+0xb98/0x1b60
        do_coredump+0x1c34/0x24a0
        get_signal+0x71c/0x1410
        do_notify_resume+0x140/0x6f0
        interrupt_exit_user_prepare_main+0x29c/0x320
        interrupt_exit_user_prepare+0x6c/0xa0
        interrupt_return_srr_user+0x8/0x138
    
    Because ppr_get() is trying to copy from a PF_IO_WORKER with a NULL
    pt_regs.
    
    Check for a valid pt_regs in both ppc_get/ppr_set, and return an error
    if not set. The actual error value doesn't seem to be important here, so
    just pick -EINVAL.
    
    Fixes: fa439810cc1b ("powerpc/ptrace: Enable support for NT_PPPC_TAR, NT_PPC_PPR, NT_PPC_DSCR")
    Cc: stable@vger.kernel.org # v4.8+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [mpe: Trim oops in change log, add Fixes & Cc stable]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/d9f63344-fe7c-56ae-b420-4a1a04a2ae4c@kernel.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12c2612e18cabec2320b7068e829f0101d0254f2
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Feb 24 14:08:28 2023 +0100

    pinctrl: at91-pio4: fix domain name assignment
    
    commit 7bb97e360acdd38b68ad0a1defb89c6e89c85596 upstream.
    
    Since commit d59f6617eef0 ("genirq: Allow fwnode to carry name
    information only") an IRQ domain is always given a name during
    allocation (e.g. used for the debugfs entry).
    
    Drop the no longer valid name assignment, which would lead to an attempt
    to free a string constant when removing the domain on late probe
    failures (e.g. probe deferral).
    
    Fixes: d59f6617eef0 ("genirq: Allow fwnode to carry name information only")
    Cc: stable@vger.kernel.org      # 4.13
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Tested-by: Claudiu Beznea <claudiu.beznea@microchip.com> # on SAMA7G5
    Link: https://lore.kernel.org/r/20230224130828.27985-1-johan+linaro@kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25065ed83b5ffaada1768e0416c6e96fdb8da032
Author: Kornel Dulęba <korneld@chromium.org>
Date:   Mon Mar 20 09:32:59 2023 +0000

    pinctrl: amd: Disable and mask interrupts on resume
    
    commit b26cd9325be4c1fcd331b77f10acb627c560d4d7 upstream.
    
    This fixes a similar problem to the one observed in:
    commit 4e5a04be88fe ("pinctrl: amd: disable and mask interrupts on probe").
    
    On some systems, during suspend/resume cycle firmware leaves
    an interrupt enabled on a pin that is not used by the kernel.
    This confuses the AMD pinctrl driver and causes spurious interrupts.
    
    The driver already has logic to detect if a pin is used by the kernel.
    Leverage it to re-initialize interrupt fields of a pin only if it's not
    used by us.
    
    Cc: stable@vger.kernel.org
    Fixes: dbad75dd1f25 ("pinctrl: add AMD GPIO driver support.")
    Signed-off-by: Kornel Dulęba <korneld@chromium.org>
    Link: https://lore.kernel.org/r/20230320093259.845178-1-korneld@chromium.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbf3fe7f7bc3713ef191c1edcc30a46e90c1ea09
Author: Josua Mayer <josua@solid-run.com>
Date:   Thu Mar 23 12:25:36 2023 +0200

    net: phy: dp83869: fix default value for tx-/rx-internal-delay
    
    commit 82e2c39f9ef78896e9b634dfd82dc042e6956bb7 upstream.
    
    dp83869 internally uses a look-up table for mapping supported delays in
    nanoseconds to register values.
    When specific delays are defined in device-tree, phy_get_internal_delay
    does the lookup automatically returning an index.
    
    The default case wrongly assigns the nanoseconds value from the lookup
    table, resulting in numeric value 2000 applied to delay configuration
    register, rather than the expected index values 0-7 (7 for 2000).
    Ultimately this issue broke RX for 1Gbps links.
    
    Fix default delay configuration by assigning the intended index value
    directly.
    
    Cc: stable@vger.kernel.org
    Fixes: 736b25afe284 ("net: dp83869: Add RGMII internal delay configuration")
    Co-developed-by: Yazan Shhady <yazan.shhady@solid-run.com>
    Signed-off-by: Yazan Shhady <yazan.shhady@solid-run.com>
    Signed-off-by: Josua Mayer <josua@solid-run.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230323102536.31988-1-josua@solid-run.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3d7a4478ce0a32bccef6631d3330e3bbc4090a9
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Mar 27 10:36:45 2023 +0200

    xen/netback: don't do grant copy across page boundary
    
    commit 05310f31ca74673a96567fb14637b7d5d6c82ea5 upstream.
    
    Fix xenvif_get_requests() not to do grant copy operations across local
    page boundaries. This requires to double the maximum number of copy
    operations per queue, as each copy could now be split into 2.
    
    Make sure that struct xenvif_tx_cb doesn't grow too large.
    
    Cc: stable@vger.kernel.org
    Fixes: ad7f402ae4f4 ("xen/netback: Ensure protocol headers don't fall in the non-linear area")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Paul Durrant <paul@xen.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f6347034341bf45056ca1ec3fa72040152ecf83
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Mar 22 10:33:28 2023 +0000

    btrfs: fix race between quota disable and quota assign ioctls
    
    commit 2f1a6be12ab6c8470d5776e68644726c94257c54 upstream.
    
    The quota assign ioctl can currently run in parallel with a quota disable
    ioctl call. The assign ioctl uses the quota root, while the disable ioctl
    frees that root, and therefore we can have a use-after-free triggered in
    the assign ioctl, leading to a trace like the following when KASAN is
    enabled:
    
      [672.723][T736] BUG: KASAN: slab-use-after-free in btrfs_search_slot+0x2962/0x2db0
      [672.723][T736] Read of size 8 at addr ffff888022ec0208 by task btrfs_search_sl/27736
      [672.724][T736]
      [672.725][T736] CPU: 1 PID: 27736 Comm: btrfs_search_sl Not tainted 6.3.0-rc3 #37
      [672.723][T736] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
      [672.727][T736] Call Trace:
      [672.728][T736]  <TASK>
      [672.728][T736]  dump_stack_lvl+0xd9/0x150
      [672.725][T736]  print_report+0xc1/0x5e0
      [672.720][T736]  ? __virt_addr_valid+0x61/0x2e0
      [672.727][T736]  ? __phys_addr+0xc9/0x150
      [672.725][T736]  ? btrfs_search_slot+0x2962/0x2db0
      [672.722][T736]  kasan_report+0xc0/0xf0
      [672.729][T736]  ? btrfs_search_slot+0x2962/0x2db0
      [672.724][T736]  btrfs_search_slot+0x2962/0x2db0
      [672.723][T736]  ? fs_reclaim_acquire+0xba/0x160
      [672.722][T736]  ? split_leaf+0x13d0/0x13d0
      [672.726][T736]  ? rcu_is_watching+0x12/0xb0
      [672.723][T736]  ? kmem_cache_alloc+0x338/0x3c0
      [672.722][T736]  update_qgroup_status_item+0xf7/0x320
      [672.724][T736]  ? add_qgroup_rb+0x3d0/0x3d0
      [672.739][T736]  ? do_raw_spin_lock+0x12d/0x2b0
      [672.730][T736]  ? spin_bug+0x1d0/0x1d0
      [672.737][T736]  btrfs_run_qgroups+0x5de/0x840
      [672.730][T736]  ? btrfs_qgroup_rescan_worker+0xa70/0xa70
      [672.738][T736]  ? __del_qgroup_relation+0x4ba/0xe00
      [672.738][T736]  btrfs_ioctl+0x3d58/0x5d80
      [672.735][T736]  ? tomoyo_path_number_perm+0x16a/0x550
      [672.737][T736]  ? tomoyo_execute_permission+0x4a0/0x4a0
      [672.731][T736]  ? btrfs_ioctl_get_supported_features+0x50/0x50
      [672.737][T736]  ? __sanitizer_cov_trace_switch+0x54/0x90
      [672.734][T736]  ? do_vfs_ioctl+0x132/0x1660
      [672.730][T736]  ? vfs_fileattr_set+0xc40/0xc40
      [672.730][T736]  ? _raw_spin_unlock_irq+0x2e/0x50
      [672.732][T736]  ? sigprocmask+0xf2/0x340
      [672.737][T736]  ? __fget_files+0x26a/0x480
      [672.732][T736]  ? bpf_lsm_file_ioctl+0x9/0x10
      [672.738][T736]  ? btrfs_ioctl_get_supported_features+0x50/0x50
      [672.736][T736]  __x64_sys_ioctl+0x198/0x210
      [672.736][T736]  do_syscall_64+0x39/0xb0
      [672.731][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.739][T736] RIP: 0033:0x4556ad
      [672.742][T736]  </TASK>
      [672.743][T736]
      [672.748][T736] Allocated by task 27677:
      [672.743][T736]  kasan_save_stack+0x22/0x40
      [672.741][T736]  kasan_set_track+0x25/0x30
      [672.741][T736]  __kasan_kmalloc+0xa4/0xb0
      [672.749][T736]  btrfs_alloc_root+0x48/0x90
      [672.746][T736]  btrfs_create_tree+0x146/0xa20
      [672.744][T736]  btrfs_quota_enable+0x461/0x1d20
      [672.743][T736]  btrfs_ioctl+0x4a1c/0x5d80
      [672.747][T736]  __x64_sys_ioctl+0x198/0x210
      [672.749][T736]  do_syscall_64+0x39/0xb0
      [672.744][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.756][T736]
      [672.757][T736] Freed by task 27677:
      [672.759][T736]  kasan_save_stack+0x22/0x40
      [672.759][T736]  kasan_set_track+0x25/0x30
      [672.756][T736]  kasan_save_free_info+0x2e/0x50
      [672.751][T736]  ____kasan_slab_free+0x162/0x1c0
      [672.758][T736]  slab_free_freelist_hook+0x89/0x1c0
      [672.752][T736]  __kmem_cache_free+0xaf/0x2e0
      [672.752][T736]  btrfs_put_root+0x1ff/0x2b0
      [672.759][T736]  btrfs_quota_disable+0x80a/0xbc0
      [672.752][T736]  btrfs_ioctl+0x3e5f/0x5d80
      [672.756][T736]  __x64_sys_ioctl+0x198/0x210
      [672.753][T736]  do_syscall_64+0x39/0xb0
      [672.765][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.769][T736]
      [672.768][T736] The buggy address belongs to the object at ffff888022ec0000
      [672.768][T736]  which belongs to the cache kmalloc-4k of size 4096
      [672.769][T736] The buggy address is located 520 bytes inside of
      [672.769][T736]  freed 4096-byte region [ffff888022ec0000, ffff888022ec1000)
      [672.760][T736]
      [672.764][T736] The buggy address belongs to the physical page:
      [672.761][T736] page:ffffea00008bb000 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x22ec0
      [672.766][T736] head:ffffea00008bb000 order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0
      [672.779][T736] flags: 0xfff00000010200(slab|head|node=0|zone=1|lastcpupid=0x7ff)
      [672.770][T736] raw: 00fff00000010200 ffff888012842140 ffffea000054ba00 dead000000000002
      [672.770][T736] raw: 0000000000000000 0000000000040004 00000001ffffffff 0000000000000000
      [672.771][T736] page dumped because: kasan: bad access detected
      [672.778][T736] page_owner tracks the page as allocated
      [672.777][T736] page last allocated via order 3, migratetype Unmovable, gfp_mask 0xd2040(__GFP_IO|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC), pid 88
      [672.779][T736]  get_page_from_freelist+0x119c/0x2d50
      [672.779][T736]  __alloc_pages+0x1cb/0x4a0
      [672.776][T736]  alloc_pages+0x1aa/0x270
      [672.773][T736]  allocate_slab+0x260/0x390
      [672.771][T736]  ___slab_alloc+0xa9a/0x13e0
      [672.778][T736]  __slab_alloc.constprop.0+0x56/0xb0
      [672.771][T736]  __kmem_cache_alloc_node+0x136/0x320
      [672.789][T736]  __kmalloc+0x4e/0x1a0
      [672.783][T736]  tomoyo_realpath_from_path+0xc3/0x600
      [672.781][T736]  tomoyo_path_perm+0x22f/0x420
      [672.782][T736]  tomoyo_path_unlink+0x92/0xd0
      [672.780][T736]  security_path_unlink+0xdb/0x150
      [672.788][T736]  do_unlinkat+0x377/0x680
      [672.788][T736]  __x64_sys_unlink+0xca/0x110
      [672.789][T736]  do_syscall_64+0x39/0xb0
      [672.783][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.784][T736] page last free stack trace:
      [672.787][T736]  free_pcp_prepare+0x4e5/0x920
      [672.787][T736]  free_unref_page+0x1d/0x4e0
      [672.784][T736]  __unfreeze_partials+0x17c/0x1a0
      [672.797][T736]  qlist_free_all+0x6a/0x180
      [672.796][T736]  kasan_quarantine_reduce+0x189/0x1d0
      [672.797][T736]  __kasan_slab_alloc+0x64/0x90
      [672.793][T736]  kmem_cache_alloc+0x17c/0x3c0
      [672.799][T736]  getname_flags.part.0+0x50/0x4e0
      [672.799][T736]  getname_flags+0x9e/0xe0
      [672.792][T736]  vfs_fstatat+0x77/0xb0
      [672.791][T736]  __do_sys_newlstat+0x84/0x100
      [672.798][T736]  do_syscall_64+0x39/0xb0
      [672.796][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.790][T736]
      [672.791][T736] Memory state around the buggy address:
      [672.799][T736]  ffff888022ec0100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.805][T736]  ffff888022ec0180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.802][T736] >ffff888022ec0200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.809][T736]                       ^
      [672.809][T736]  ffff888022ec0280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.809][T736]  ffff888022ec0300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fix this by having the qgroup assign ioctl take the qgroup ioctl mutex
    before calling btrfs_run_qgroups(), which is what all qgroup ioctls should
    call.
    
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    Link: https://lore.kernel.org/linux-btrfs/CAFcO6XN3VD8ogmHwqRk4kbiwtpUSNySu2VAxN8waEPciCHJvMA@mail.gmail.com/
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba5deb64ddde2cb68b981f4d108b5cbed2633cfb
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Mar 17 03:13:12 2023 -0700

    Input: goodix - add Lenovo Yoga Book X90F to nine_bytes_report DMI table
    
    commit 8a0432bab6ea3203d220785da7ab3c7677f70ecb upstream.
    
    The Android Lenovo Yoga Book X90F / X90L uses the same goodix touchscreen
    with 9 bytes touch reports for its touch keyboard as the already supported
    Windows Lenovo Yoga Book X91F/L, add a DMI match for this to
    the nine_bytes_report DMI table.
    
    When the quirk for the X91F/L was initially added it was written to
    also apply to the X90F/L but this does not work because the Android
    version of the Yoga Book uses completely different DMI strings.
    Also adjust the X91F/L quirk to reflect that it only applies to
    the X91F/L models.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Bastien Nocera <hadess@hadess.net>
    Link: https://lore.kernel.org/r/20230315134442.71787-1-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26a32a212bc540f4773cd6af8cf73e967d72569c
Author: David Disseldorp <ddiss@suse.de>
Date:   Wed Mar 29 22:24:06 2023 +0200

    cifs: fix DFS traversal oops without CONFIG_CIFS_DFS_UPCALL
    
    commit 179a88a8558bbf42991d361595281f3e45d7edfc upstream.
    
    When compiled with CONFIG_CIFS_DFS_UPCALL disabled, cifs_dfs_d_automount
    is NULL. cifs.ko logic for mapping CIFS_FATTR_DFS_REFERRAL attributes to
    S_AUTOMOUNT and corresponding dentry flags is retained regardless of
    CONFIG_CIFS_DFS_UPCALL, leading to a NULL pointer dereference in
    VFS follow_automount() when traversing a DFS referral link:
      BUG: kernel NULL pointer dereference, address: 0000000000000000
      ...
      Call Trace:
       <TASK>
       __traverse_mounts+0xb5/0x220
       ? cifs_revalidate_mapping+0x65/0xc0 [cifs]
       step_into+0x195/0x610
       ? lookup_fast+0xe2/0xf0
       path_lookupat+0x64/0x140
       filename_lookup+0xc2/0x140
       ? __create_object+0x299/0x380
       ? kmem_cache_alloc+0x119/0x220
       ? user_path_at_empty+0x31/0x50
       user_path_at_empty+0x31/0x50
       __x64_sys_chdir+0x2a/0xd0
       ? exit_to_user_mode_prepare+0xca/0x100
       do_syscall_64+0x42/0x90
       entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    This fix adds an inline cifs_dfs_d_automount() {return -EREMOTE} handler
    when CONFIG_CIFS_DFS_UPCALL is disabled. An alternative would be to
    avoid flagging S_AUTOMOUNT, etc. without CONFIG_CIFS_DFS_UPCALL. This
    approach was chosen as it provides more control over the error path.
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Cc: stable@vger.kernel.org
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63bbe24b99f9187584be28a3a2336dddb5524c95
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Wed Mar 29 17:14:22 2023 -0300

    cifs: prevent infinite recursion in CIFSGetDFSRefer()
    
    commit 09ba47b44d26b475bbdf9c80db9e0193d2b58956 upstream.
    
    We can't call smb_init() in CIFSGetDFSRefer() as cifs_reconnect_tcon()
    may end up calling CIFSGetDFSRefer() again to get new DFS referrals
    and thus causing an infinite recursion.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Cc: stable@vger.kernel.org # 6.2
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b3d7ad3e8f13a90d56c4d6b3b4eee78634615ab
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Sun Mar 19 21:36:36 2023 -0700

    Input: focaltech - use explicitly signed char type
    
    commit 8980f190947ba29f23110408e712444884b74251 upstream.
    
    The recent change of -funsigned-char causes additions of negative
    numbers to become additions of large positive numbers, leading to wrong
    calculations of mouse movement. Change these casts to be explicitly
    signed, to take into account negative offsets.
    
    Fixes: 3bc753c06dd0 ("kbuild: treat char as always unsigned")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217211
    Link: https://lore.kernel.org/r/20230318133010.1285202-1-Jason@zx2c4.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 449a1a61f7f148aed285cd098e940ae6bc19246a
Author: msizanoen <msizanoen@qtmlabs.xyz>
Date:   Sun Mar 19 23:02:56 2023 -0700

    Input: alps - fix compatibility with -funsigned-char
    
    commit 754ff5060daf5a1cf4474eff9b4edeb6c17ef7ab upstream.
    
    The AlpsPS/2 code previously relied on the assumption that `char` is a
    signed type, which was true on x86 platforms (the only place where this
    driver is used) before kernel 6.2. However, on 6.2 and later, this
    assumption is broken due to the introduction of -funsigned-char as a new
    global compiler flag.
    
    Fix this by explicitly specifying the signedness of `char` when sign
    extending the values received from the device.
    
    Fixes: f3f33c677699 ("Input: alps - Rushmore and v7 resolution support")
    Signed-off-by: msizanoen <msizanoen@qtmlabs.xyz>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230320045228.182259-1-msizanoen@qtmlabs.xyz
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 988061d09972dba1374426924531a85e6d306f47
Author: Horatiu Vultur <horatiu.vultur@microchip.com>
Date:   Mon Feb 6 21:37:20 2023 +0100

    pinctrl: ocelot: Fix alt mode for ocelot
    
    [ Upstream commit 657fd9da2d4b4aa0a384105b236baa22fa0233bf ]
    
    In case the driver was trying to set an alternate mode for gpio
    0 or 32 then the mode was not set correctly. The reason is that
    there is computation error inside the function ocelot_pinmux_set_mux
    because in this case it was trying to shift to left by -1.
    Fix this by actually shifting the function bits and not the position.
    
    Fixes: 4b36082e2e09 ("pinctrl: ocelot: fix pinmuxing for pins after 31")
    Signed-off-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Link: https://lore.kernel.org/r/20230206203720.1177718-1-horatiu.vultur@microchip.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed3439a8c4fe7fc7d8c20b9e89aa16d45f8e0a70
Author: Steffen Bätz <steffen@innosonix.de>
Date:   Wed Mar 29 12:01:40 2023 -0300

    net: dsa: mv88e6xxx: Enable IGMP snooping on user ports only
    
    [ Upstream commit 7bcad0f0e6fbc1d613e49e0ee35c8e5f2e685bb0 ]
    
    Do not set the MV88E6XXX_PORT_CTL0_IGMP_MLD_SNOOP bit on CPU or DSA ports.
    
    This allows the host CPU port to be a regular IGMP listener by sending out
    IGMP Membership Reports, which would otherwise not be forwarded by the
    mv88exxx chip, but directly looped back to the CPU port itself.
    
    Fixes: 54d792f257c6 ("net: dsa: Centralise global and port setup code into mv88e6xxx.")
    Signed-off-by: Steffen Bätz <steffen@innosonix.de>
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20230329150140.701559-1-festevam@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8104c795517c2f10e2720c16b216abb9a68746ee
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Tue Mar 28 18:30:21 2023 -0700

    bnxt_en: Add missing 200G link speed reporting
    
    [ Upstream commit 581bce7bcb7e7f100908728e7b292e266c76895b ]
    
    bnxt_fw_to_ethtool_speed() is missing the case statement for 200G
    link speed reported by firmware.  As a result, ethtool will report
    unknown speed when the firmware reports 200G link speed.
    
    Fixes: 532262ba3b84 ("bnxt_en: ethtool: support PAM4 link speeds up to 200G")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62850a076353cafcb17adc8fa2dc67cc0aced58d
Author: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
Date:   Tue Mar 28 18:30:20 2023 -0700

    bnxt_en: Fix typo in PCI id to device description string mapping
    
    [ Upstream commit 62aad36ed31abc80f35db11e187e690448a79f7d ]
    
    Fix 57502 and 57508 NPAR description string entries.  The typos
    caused these devices to not match up with lspci output.
    
    Fixes: 49c98421e6ab ("bnxt_en: Add PCI IDs for 57500 series NPAR devices.")
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Signed-off-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f524d1e55013b64ec14be012d839b919d65d2481
Author: Radoslaw Tyl <radoslawx.tyl@intel.com>
Date:   Tue Mar 28 10:26:59 2023 -0700

    i40e: fix registers dump after run ethtool adapter self test
    
    [ Upstream commit c5cff16f461a4a434a9915a7be7ac9ced861a8a4 ]
    
    Fix invalid registers dump from ethtool -d ethX after adapter self test
    by ethtool -t ethY. It causes invalid data display.
    
    The problem was caused by overwriting i40e_reg_list[].elements
    which is common for ethtool self test and dump.
    
    Fixes: 22dd9ae8afcc ("i40e: Rework register diagnostic")
    Signed-off-by: Radoslaw Tyl <radoslawx.tyl@intel.com>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Tested-by: Arpana Arland <arpanax.arland@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20230328172659.3906413-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa7fafedc9fddfbc715132fdf35f6c2fa9c43e02
Author: Alex Elder <elder@linaro.org>
Date:   Tue Mar 28 11:27:51 2023 -0500

    net: ipa: compute DMA pool size properly
    
    [ Upstream commit 6c75dc94f2b27fff57b305af9236eea181a00b6c ]
    
    In gsi_trans_pool_init_dma(), the total size of a pool of memory
    used for DMA transactions is calculated.  However the calculation is
    done incorrectly.
    
    For 4KB pages, this total size is currently always more than one
    page, and as a result, the calculation produces a positive (though
    incorrect) total size.  The code still works in this case; we just
    end up with fewer DMA pool entries than we intended.
    
    Bjorn Andersson tested booting a kernel with 16KB pages, and hit a
    null pointer derereference in sg_alloc_append_table_from_pages(),
    descending from gsi_trans_pool_init_dma().  The cause of this was
    that a 16KB total size was going to be allocated, and with 16KB
    pages the order of that allocation is 0.  The total_size calculation
    yielded 0, which eventually led to the crash.
    
    Correcting the total_size calculation fixes the problem.
    
    Reported-by: Bjorn Andersson <quic_bjorande@quicinc.com>
    Tested-by: Bjorn Andersson <quic_bjorande@quicinc.com>
    Fixes: 9dd441e4ed57 ("soc: qcom: ipa: GSI transactions")
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Alex Elder <elder@linaro.org>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20230328162751.2861791-1-elder@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96e34c88000febc83e41aa7db0b0a41676314818
Author: Tasos Sahanidis <tasos@tasossah.com>
Date:   Wed Mar 29 06:28:08 2023 +0300

    ALSA: ymfpci: Fix BUG_ON in probe function
    
    [ Upstream commit 6be2e7522eb529b41c16d459f33bbdbcddbf5c15 ]
    
    The snd_dma_buffer.bytes field now contains the aligned size, which this
    snd_BUG_ON() did not account for, resulting in the following:
    
    [    9.625915] ------------[ cut here ]------------
    [    9.633440] WARNING: CPU: 0 PID: 126 at sound/pci/ymfpci/ymfpci_main.c:2168 snd_ymfpci_create+0x681/0x698 [snd_ymfpci]
    [    9.648926] Modules linked in: snd_ymfpci(+) snd_intel_dspcfg kvm(+) snd_intel_sdw_acpi snd_ac97_codec snd_mpu401_uart snd_opl3_lib irqbypass snd_hda_codec gameport snd_rawmidi crct10dif_pclmul crc32_pclmul cfg80211 snd_hda_core polyval_clmulni polyval_generic gf128mul snd_seq_device ghash_clmulni_intel snd_hwdep ac97_bus sha512_ssse3 rfkill snd_pcm aesni_intel tg3 snd_timer crypto_simd snd mxm_wmi libphy cryptd k10temp fam15h_power pcspkr soundcore sp5100_tco wmi acpi_cpufreq mac_hid dm_multipath sg loop fuse dm_mod bpf_preload ip_tables x_tables ext4 crc32c_generic crc16 mbcache jbd2 sr_mod cdrom ata_generic pata_acpi firewire_ohci crc32c_intel firewire_core xhci_pci crc_itu_t pata_via xhci_pci_renesas floppy
    [    9.711849] CPU: 0 PID: 126 Comm: kworker/0:2 Not tainted 6.1.21-1-lts #1 08d2e5ece03136efa7c6aeea9a9c40916b1bd8da
    [    9.722200] Hardware name: To Be Filled By O.E.M. To Be Filled By O.E.M./990FX Extreme4, BIOS P2.70 06/05/2014
    [    9.732204] Workqueue: events work_for_cpu_fn
    [    9.736580] RIP: 0010:snd_ymfpci_create+0x681/0x698 [snd_ymfpci]
    [    9.742594] Code: 8c c0 4c 89 e2 48 89 df 48 c7 c6 92 c6 8c c0 e8 15 d0 e9 ff 48 83 c4 08 44 89 e8 5b 5d 41 5c 41 5d 41 5e 41 5f e9 d3 7a 33 e3 <0f> 0b e9 cb fd ff ff 41 bd fb ff ff ff eb db 41 bd f4 ff ff ff eb
    [    9.761358] RSP: 0018:ffffab64804e7da0 EFLAGS: 00010287
    [    9.766594] RAX: ffff8fa2df06c400 RBX: ffff8fa3073a8000 RCX: ffff8fa303fbc4a8
    [    9.773734] RDX: ffff8fa2df06d000 RSI: 0000000000000010 RDI: 0000000000000020
    [    9.780876] RBP: ffff8fa300b5d0d0 R08: ffff8fa3073a8e50 R09: 00000000df06bf00
    [    9.788018] R10: ffff8fa2df06bf00 R11: 00000000df068200 R12: ffff8fa3073a8918
    [    9.795159] R13: 0000000000000000 R14: 0000000000000080 R15: ffff8fa2df068200
    [    9.802317] FS:  0000000000000000(0000) GS:ffff8fa9fec00000(0000) knlGS:0000000000000000
    [    9.810414] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    9.816158] CR2: 000055febaf66500 CR3: 0000000101a2e000 CR4: 00000000000406f0
    [    9.823301] Call Trace:
    [    9.825747]  <TASK>
    [    9.827889]  snd_card_ymfpci_probe+0x194/0x950 [snd_ymfpci b78a5fe64b5663a6390a909c67808567e3e73615]
    [    9.837030]  ? finish_task_switch.isra.0+0x90/0x2d0
    [    9.841918]  local_pci_probe+0x45/0x80
    [    9.845680]  work_for_cpu_fn+0x1a/0x30
    [    9.849431]  process_one_work+0x1c7/0x380
    [    9.853464]  worker_thread+0x1af/0x390
    [    9.857225]  ? rescuer_thread+0x3b0/0x3b0
    [    9.861254]  kthread+0xde/0x110
    [    9.864414]  ? kthread_complete_and_exit+0x20/0x20
    [    9.869210]  ret_from_fork+0x22/0x30
    [    9.872792]  </TASK>
    [    9.874985] ---[ end trace 0000000000000000 ]---
    
    Fixes: 5c1733e33c88 ("ALSA: memalloc: Align buffer allocations in page size")
    Signed-off-by: Tasos Sahanidis <tasos@tasossah.com>
    Link: https://lore.kernel.org/r/20230329032808.170403-1-tasos@tasossah.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 688b1178c443fd1bac47bfc5beb90f356f02569d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jun 8 16:05:26 2021 +0200

    ALSA: ymfpci: Fix assignment in if condition
    
    [ Upstream commit e7daaeedb4f270126792ae216f406c1ba2b8f4d9 ]
    
    PCI YMFPCI driver code contains lots of assignments in if condition,
    which is a bad coding style that may confuse readers and occasionally
    lead to bugs.
    
    This patch is merely for coding-style fixes, no functional changes.
    
    Link: https://lore.kernel.org/r/20210608140540.17885-53-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Stable-dep-of: 6be2e7522eb5 ("ALSA: ymfpci: Fix BUG_ON in probe function")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee17dea3072dec0bc34399a32fa884e26342e4ea
Author: Tony Krowiak <akrowiak@linux.ibm.com>
Date:   Mon Mar 20 11:04:47 2023 -0400

    s390/vfio-ap: fix memory leak in vfio_ap device driver
    
    [ Upstream commit 8f8cf767589f2131ae5d40f3758429095c701c84 ]
    
    The device release callback function invoked to release the matrix device
    uses the dev_get_drvdata(device *dev) function to retrieve the
    pointer to the vfio_matrix_dev object in order to free its storage. The
    problem is, this object is not stored as drvdata with the device; since the
    kfree function will accept a NULL pointer, the memory for the
    vfio_matrix_dev object is never freed.
    
    Since the device being released is contained within the vfio_matrix_dev
    object, the container_of macro will be used to retrieve its pointer.
    
    Fixes: 1fde573413b5 ("s390: vfio-ap: base implementation of VFIO AP device driver")
    Signed-off-by: Tony Krowiak <akrowiak@linux.ibm.com>
    Reviewed-by: Harald Freudenberger <freude@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230320150447.34557-1-akrowiak@linux.ibm.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab2a55907823f0bca56b6d03ea05e4071ba8535f
Author: Ivan Orlov <ivan.orlov0322@gmail.com>
Date:   Tue Mar 14 16:04:45 2023 +0400

    can: bcm: bcm_tx_setup(): fix KMSAN uninit-value in vfs_write
    
    [ Upstream commit 2b4c99f7d9a57ecd644eda9b1fb0a1072414959f ]
    
    Syzkaller reported the following issue:
    
    =====================================================
    BUG: KMSAN: uninit-value in aio_rw_done fs/aio.c:1520 [inline]
    BUG: KMSAN: uninit-value in aio_write+0x899/0x950 fs/aio.c:1600
     aio_rw_done fs/aio.c:1520 [inline]
     aio_write+0x899/0x950 fs/aio.c:1600
     io_submit_one+0x1d1c/0x3bf0 fs/aio.c:2019
     __do_sys_io_submit fs/aio.c:2078 [inline]
     __se_sys_io_submit+0x293/0x770 fs/aio.c:2048
     __x64_sys_io_submit+0x92/0xd0 fs/aio.c:2048
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Uninit was created at:
     slab_post_alloc_hook mm/slab.h:766 [inline]
     slab_alloc_node mm/slub.c:3452 [inline]
     __kmem_cache_alloc_node+0x71f/0xce0 mm/slub.c:3491
     __do_kmalloc_node mm/slab_common.c:967 [inline]
     __kmalloc+0x11d/0x3b0 mm/slab_common.c:981
     kmalloc_array include/linux/slab.h:636 [inline]
     bcm_tx_setup+0x80e/0x29d0 net/can/bcm.c:930
     bcm_sendmsg+0x3a2/0xce0 net/can/bcm.c:1351
     sock_sendmsg_nosec net/socket.c:714 [inline]
     sock_sendmsg net/socket.c:734 [inline]
     sock_write_iter+0x495/0x5e0 net/socket.c:1108
     call_write_iter include/linux/fs.h:2189 [inline]
     aio_write+0x63a/0x950 fs/aio.c:1600
     io_submit_one+0x1d1c/0x3bf0 fs/aio.c:2019
     __do_sys_io_submit fs/aio.c:2078 [inline]
     __se_sys_io_submit+0x293/0x770 fs/aio.c:2048
     __x64_sys_io_submit+0x92/0xd0 fs/aio.c:2048
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    CPU: 1 PID: 5034 Comm: syz-executor350 Not tainted 6.2.0-rc6-syzkaller-80422-geda666ff2276 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/12/2023
    =====================================================
    
    We can follow the call chain and find that 'bcm_tx_setup' function
    calls 'memcpy_from_msg' to copy some content to the newly allocated
    frame of 'op->frames'. After that the 'len' field of copied structure
    being compared with some constant value (64 or 8). However, if
    'memcpy_from_msg' returns an error, we will compare some uninitialized
    memory. This triggers 'uninit-value' issue.
    
    This patch will add 'memcpy_from_msg' possible errors processing to
    avoid uninit-value issue.
    
    Tested via syzkaller
    
    Reported-by: syzbot+c9bfd85eca611ebf5db1@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=47f897f8ad958bbde5790ebf389b5e7e0a345089
    Signed-off-by: Ivan Orlov <ivan.orlov0322@gmail.com>
    Fixes: 6f3b911d5f29b ("can: bcm: add support for CAN FD frames")
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/all/20230314120445.12407-1-ivan.orlov0322@gmail.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b22e0cfc4d737b4cf70debbbb835abd71c8121e
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sat Mar 25 13:28:15 2023 +0200

    net: stmmac: don't reject VLANs when IFF_PROMISC is set
    
    [ Upstream commit a7602e7332b97cfbec7bacb0f1ade99a575fe104 ]
    
    The blamed commit has introduced the following tests to
    dwmac4_add_hw_vlan_rx_fltr(), called from stmmac_vlan_rx_add_vid():
    
            if (hw->promisc) {
                    netdev_err(dev,
                               "Adding VLAN in promisc mode not supported\n");
                    return -EPERM;
            }
    
    "VLAN promiscuous" mode is keyed in this driver to IFF_PROMISC, and so,
    vlan_vid_add() and vlan_vid_del() calls cannot take place in IFF_PROMISC
    mode. I have the following 2 arguments that this restriction is.... hm,
    how shall I put it nicely... unproductive :)
    
    First, take the case of a Linux bridge. If the kernel is compiled with
    CONFIG_BRIDGE_VLAN_FILTERING=y, then this bridge shall have a VLAN
    database. The bridge shall try to call vlan_add_vid() on its bridge
    ports for each VLAN in the VLAN table. It will do this irrespectively of
    whether that port is *currently* VLAN-aware or not. So it will do this
    even when the bridge was created with vlan_filtering 0.
    But the Linux bridge, in VLAN-unaware mode, configures its ports in
    promiscuous (IFF_PROMISC) mode, so that they accept packets with any
    MAC DA (a switch must do this in order to forward those packets which
    are not directly targeted to its MAC address).
    
    As a result, the stmmac driver does not work as a bridge port, when the
    kernel is compiled with CONFIG_BRIDGE_VLAN_FILTERING=y.
    
    $ ip link add br0 type bridge && ip link set br0 up
    $ ip link set eth0 master br0 && ip link set eth0 up
    [ 2333.943296] br0: port 1(eth0) entered blocking state
    [ 2333.943381] br0: port 1(eth0) entered disabled state
    [ 2333.943782] device eth0 entered promiscuous mode
    [ 2333.944080] 4033c000.ethernet eth0: Adding VLAN in promisc mode not supported
    [ 2333.976509] 4033c000.ethernet eth0: failed to initialize vlan filtering on this port
    RTNETLINK answers: Operation not permitted
    
    Secondly, take the case of stmmac as DSA master. Some switch tagging
    protocols are based on 802.1Q VLANs (tag_sja1105.c), and as such,
    tag_8021q.c uses vlan_vid_add() to work with VLAN-filtering DSA masters.
    But also, when a DSA port becomes promiscuous (for example when it joins
    a bridge), the DSA framework also makes the DSA master promiscuous.
    
    Moreover, for every VLAN that a DSA switch sends to the CPU, DSA also
    programs a VLAN filter on the DSA master, because if the the DSA switch
    uses a tail tag, then the hardware frame parser of the DSA master will
    see VLAN as VLAN, and might filter them out, for being unknown.
    
    Due to the above 2 reasons, my belief is that the stmmac driver does not
    get to choose to not accept vlan_vid_add() calls while IFF_PROMISC is
    enabled, because the 2 are completely independent and there are code
    paths in the network stack which directly lead to this situation
    occurring, without the user's direct input.
    
    In fact, my belief is that "VLAN promiscuous" mode should have never
    been keyed on IFF_PROMISC in the first place, but rather, on the
    NETIF_F_HW_VLAN_CTAG_FILTER feature flag which can be toggled by the
    user through ethtool -k, when present in netdev->hw_features.
    
    In the stmmac driver, NETIF_F_HW_VLAN_CTAG_FILTER is only present in
    "features", making this feature "on [fixed]".
    
    I have this belief because I am unaware of any definition of promiscuity
    which implies having an effect on anything other than MAC DA (therefore
    not VLAN). However, I seem to be rather alone in having this opinion,
    looking back at the disagreements from this discussion:
    https://lore.kernel.org/netdev/20201110153958.ci5ekor3o2ekg3ky@ipetronik.com/
    
    In any case, to remove the vlan_vid_add() dependency on !IFF_PROMISC,
    one would need to remove the check and see what fails. I guess the test
    was there because of the way in which dwmac4_vlan_promisc_enable() is
    implemented.
    
    For context, the dwmac4 supports Perfect Filtering for a limited number
    of VLANs - dwmac4_get_num_vlan(), priv->hw->num_vlan, with a fallback on
    Hash Filtering - priv->dma_cap.vlhash - see stmmac_vlan_update(), also
    visible in cat /sys/kernel/debug/stmmaceth/eth0/dma_cap | grep 'VLAN
    Hash Filtering'.
    
    The perfect filtering is based on MAC_VLAN_Tag_Filter/MAC_VLAN_Tag_Data
    registers, accessed in the driver through dwmac4_write_vlan_filter().
    
    The hash filtering is based on the MAC_VLAN_Hash_Table register, named
    GMAC_VLAN_HASH_TABLE in the driver and accessed by dwmac4_update_vlan_hash().
    The control bit for enabling hash filtering is GMAC_VLAN_VTHM
    (MAC_VLAN_Tag_Ctrl bit VTHM: VLAN Tag Hash Table Match Enable).
    
    Now, the description of dwmac4_vlan_promisc_enable() is that it iterates
    through the driver's cache of perfect filter entries (hw->vlan_filter[i],
    added by dwmac4_add_hw_vlan_rx_fltr()), and evicts them from hardware by
    unsetting their GMAC_VLAN_TAG_DATA_VEN (MAC_VLAN_Tag_Data bit VEN - VLAN
    Tag Enable) bit. Then it unsets the GMAC_VLAN_VTHM bit, which disables
    hash matching.
    
    This leaves the MAC, according to table "VLAN Match Status" from the
    documentation, to always enter these data paths:
    
    VID    |VLAN Perfect Filter |VTHM Bit |VLAN Hash Filter |Final VLAN Match
           |Match Result        |         |Match Result     |Status
    -------|--------------------|---------|-----------------|----------------
    VID!=0 |Fail                |0        |don't care       |Pass
    
    So, dwmac4_vlan_promisc_enable() does its job, but by unsetting
    GMAC_VLAN_VTHM, it conflicts with the other code path which controls
    this bit: dwmac4_update_vlan_hash(), called through stmmac_update_vlan_hash()
    from stmmac_vlan_rx_add_vid() and from stmmac_vlan_rx_kill_vid().
    This is, I guess, why dwmac4_add_hw_vlan_rx_fltr() is not allowed to run
    after dwmac4_vlan_promisc_enable() has unset GMAC_VLAN_VTHM: because if
    it did, then dwmac4_update_vlan_hash() would set GMAC_VLAN_VTHM again,
    breaking the "VLAN promiscuity".
    
    It turns out that dwmac4_vlan_promisc_enable() is way too complicated
    for what needs to be done. The MAC_Packet_Filter register also has the
    VTFE bit (VLAN Tag Filter Enable), which simply controls whether VLAN
    tagged packets which don't match the filtering tables (either perfect or
    hash) are dropped or not. At the moment, this driver unconditionally
    sets GMAC_PACKET_FILTER_VTFE if NETIF_F_HW_VLAN_CTAG_FILTER was detected
    through the priv->dma_cap.vlhash capability bits of the device, in
    stmmac_dvr_probe().
    
    I would suggest deleting the unnecessarily complex logic from
    dwmac4_vlan_promisc_enable(), and simply unsetting GMAC_PACKET_FILTER_VTFE
    when becoming IFF_PROMISC, which has the same effect of allowing packets
    with any VLAN tags, but has the additional benefit of being able to run
    concurrently with stmmac_vlan_rx_add_vid() and stmmac_vlan_rx_kill_vid().
    
    As much as I believe that the VTFE bit should have been exclusively
    controlled by NETIF_F_HW_VLAN_CTAG_FILTER through ethtool, and not by
    IFF_PROMISC, changing that is not a punctual fix to the problem, and it
    would probably break the VFFQ feature added by the later commit
    e0f9956a3862 ("net: stmmac: Add option for VLAN filter fail queue
    enable"). From the commit description, VFFQ needs IFF_PROMISC=on and
    VTFE=off in order to work (and this change respects that). But if VTFE
    was changed to be controlled through ethtool -k, then a user-visible
    change would have been introduced in Intel's scripts (a need to run
    "ethtool -k eth0 rx-vlan-filter off" which did not exist before).
    
    The patch was tested with this set of commands:
    
      ip link set eth0 up
      ip link add link eth0 name eth0.100 type vlan id 100
      ip addr add 192.168.100.2/24 dev eth0.100 && ip link set eth0.100 up
      ip link set eth0 promisc on
      ip link add link eth0 name eth0.101 type vlan id 101
      ip addr add 192.168.101.2/24 dev eth0.101 && ip link set eth0.101 up
      ip link set eth0 promisc off
      ping -c 5 192.168.100.1
      ping -c 5 192.168.101.1
      ip link set eth0 promisc on
      ping -c 5 192.168.100.1
      ping -c 5 192.168.101.1
      ip link del eth0.100
      ip link del eth0.101
      # Wait for VLAN-tagged pings from the other end...
      # Check with "tcpdump -i eth0 -e -n -p" and we should see them
      ip link set eth0 promisc off
      # Wait for VLAN-tagged pings from the other end...
      # Check with "tcpdump -i eth0 -e -n -p" and we shouldn't see them
      # anymore, but remove the "-p" argument from tcpdump and they're there.
    
    Fixes: c89f44ff10fd ("net: stmmac: Add support for VLAN promiscuous mode")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f032e125149d914e542548c17ebd613851031368
Author: Faicker Mo <faicker.mo@ucloud.cn>
Date:   Fri Mar 24 17:19:54 2023 +0800

    net/net_failover: fix txq exceeding warning
    
    [ Upstream commit e3cbdcb0fbb61045ef3ce0e072927cc41737f787 ]
    
    The failover txq is inited as 16 queues.
    when a packet is transmitted from the failover device firstly,
    the failover device will select the queue which is returned from
    the primary device if the primary device is UP and running.
    If the primary device txq is bigger than the default 16,
    it can lead to the following warning:
    eth0 selects TX queue 18, but real number of TX queues is 16
    
    The warning backtrace is:
    [   32.146376] CPU: 18 PID: 9134 Comm: chronyd Tainted: G            E      6.2.8-1.el7.centos.x86_64 #1
    [   32.147175] Hardware name: Red Hat KVM, BIOS 1.10.2-3.el7_4.1 04/01/2014
    [   32.147730] Call Trace:
    [   32.147971]  <TASK>
    [   32.148183]  dump_stack_lvl+0x48/0x70
    [   32.148514]  dump_stack+0x10/0x20
    [   32.148820]  netdev_core_pick_tx+0xb1/0xe0
    [   32.149180]  __dev_queue_xmit+0x529/0xcf0
    [   32.149533]  ? __check_object_size.part.0+0x21c/0x2c0
    [   32.149967]  ip_finish_output2+0x278/0x560
    [   32.150327]  __ip_finish_output+0x1fe/0x2f0
    [   32.150690]  ip_finish_output+0x2a/0xd0
    [   32.151032]  ip_output+0x7a/0x110
    [   32.151337]  ? __pfx_ip_finish_output+0x10/0x10
    [   32.151733]  ip_local_out+0x5e/0x70
    [   32.152054]  ip_send_skb+0x19/0x50
    [   32.152366]  udp_send_skb.isra.0+0x163/0x3a0
    [   32.152736]  udp_sendmsg+0xba8/0xec0
    [   32.153060]  ? __folio_memcg_unlock+0x25/0x60
    [   32.153445]  ? __pfx_ip_generic_getfrag+0x10/0x10
    [   32.153854]  ? sock_has_perm+0x85/0xa0
    [   32.154190]  inet_sendmsg+0x6d/0x80
    [   32.154508]  ? inet_sendmsg+0x6d/0x80
    [   32.154838]  sock_sendmsg+0x62/0x70
    [   32.155152]  ____sys_sendmsg+0x134/0x290
    [   32.155499]  ___sys_sendmsg+0x81/0xc0
    [   32.155828]  ? _get_random_bytes.part.0+0x79/0x1a0
    [   32.156240]  ? ip4_datagram_release_cb+0x5f/0x1e0
    [   32.156649]  ? get_random_u16+0x69/0xf0
    [   32.156989]  ? __fget_light+0xcf/0x110
    [   32.157326]  __sys_sendmmsg+0xc4/0x210
    [   32.157657]  ? __sys_connect+0xb7/0xe0
    [   32.157995]  ? __audit_syscall_entry+0xce/0x140
    [   32.158388]  ? syscall_trace_enter.isra.0+0x12c/0x1a0
    [   32.158820]  __x64_sys_sendmmsg+0x24/0x30
    [   32.159171]  do_syscall_64+0x38/0x90
    [   32.159493]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Fix that by reducing txq number as the non-existent primary-dev does.
    
    Fixes: cfc80d9a1163 ("net: Introduce net_failover driver")
    Signed-off-by: Faicker Mo <faicker.mo@ucloud.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1025c471517bba5a43ded0f37be6f6ea2dbb5f29
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Mar 26 10:29:33 2023 +0200

    regulator: Handle deferred clk
    
    [ Upstream commit 02bcba0b9f9da706d5bd1e8cbeb83493863e17b5 ]
    
    devm_clk_get() can return -EPROBE_DEFER. So it is better to return the
    error code from devm_clk_get(), instead of a hard coded -ENOENT.
    
    This gives more opportunities to successfully probe the driver.
    
    Fixes: 8959e5324485 ("regulator: fixed: add possibility to enable by clock")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/18459fae3d017a66313699c7c8456b28158b2dd0.1679819354.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69ed49a7b881ffe6588058411b0205f49b81071a
Author: ChunHao Lin <hau@realtek.com>
Date:   Thu Mar 23 22:33:09 2023 +0800

    r8169: fix RTL8168H and RTL8107E rx crc error
    
    [ Upstream commit 33189f0a94b9639c058781fcf82e4ea3803b1682 ]
    
    When link speed is 10 Mbps and temperature is under -20°C, RTL8168H and
    RTL8107E may have rx crc error. Disable phy 10 Mbps pll off to fix this
    issue.
    
    Fixes: 6e1d0b898818 ("r8169:add support for RTL8168H and RTL8107E")
    Signed-off-by: ChunHao Lin <hau@realtek.com>
    Reviewed-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3907fcb5a439933cf8c10d6dc300bc11eba30de3
Author: SongJingyi <u201912584@hust.edu.cn>
Date:   Fri Mar 24 11:14:06 2023 +0800

    ptp_qoriq: fix memory leak in probe()
    
    [ Upstream commit f33642224e38d7e0d59336e10e7b4e370b1c4506 ]
    
    Smatch complains that:
    drivers/ptp/ptp_qoriq.c ptp_qoriq_probe()
    warn: 'base' from ioremap() not released.
    
    Fix this by revising the parameter from 'ptp_qoriq->base' to 'base'.
    This is only a bug if ptp_qoriq_init() returns on the
    first -ENODEV error path.
    For other error paths ptp_qoriq->base and base are the same.
    And this change makes the code more readable.
    
    Fixes: 7f4399ba405b ("ptp_qoriq: fix NULL access if ptp dt node missing")
    Signed-off-by: SongJingyi <u201912584@hust.edu.cn>
    Reviewed-by: Dan Carpenter <error27@gmail.com>
    Reviewed-by: Dongliang Mu <dzm91@hust.edu.cn>
    Link: https://lore.kernel.org/r/20230324031406.1895159-1-u201912584@hust.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ff4a54c0218a2e23b808648a3c0689589d0c502
Author: Tomas Henzl <thenzl@redhat.com>
Date:   Fri Mar 24 16:01:34 2023 +0100

    scsi: megaraid_sas: Fix crash after a double completion
    
    [ Upstream commit 2309df27111a51734cb9240b4d3c25f2f3c6ab06 ]
    
    When a physical disk is attached directly "without JBOD MAP support" (see
    megasas_get_tm_devhandle()) then there is no real error handling in the
    driver.  Return FAILED instead of SUCCESS.
    
    Fixes: 18365b138508 ("megaraid_sas: Task management support")
    Signed-off-by: Tomas Henzl <thenzl@redhat.com>
    Link: https://lore.kernel.org/r/20230324150134.14696-1-thenzl@redhat.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 059c3a7a3d6ddc48f6b93c21bdfb6585bc2a6888
Author: Íñigo Huguet <ihuguet@redhat.com>
Date:   Thu Mar 23 09:34:17 2023 +0100

    sfc: ef10: don't overwrite offload features at NIC reset
    
    [ Upstream commit ca4a80e4bb7e87daf33b27d2ab9e4f5311018a89 ]
    
    At NIC reset, some offload features related to encapsulated traffic
    might have changed (this mainly happens if the firmware-variant is
    changed with the sfboot userspace tool). Because of this, features are
    checked and set again at reset time.
    
    However, this was not done right, and some features were improperly
    overwritten at NIC reset:
    - Tunneled IPv6 segmentation was always disabled
    - Features disabled with ethtool were reenabled
    - Features that becomes unsupported after the reset were not disabled
    
    Also, checking if the device supports IPV6_CSUM to enable TSO6 is no
    longer necessary because all currently supported devices support it.
    Additionally, move the assignment of some other features to the
    EF10_OFFLOAD_FEATURES macro, like it is done in ef100, leaving the
    selection of features in efx_pci_probe_post_io a bit cleaner.
    
    Fixes: ffffd2454a7a ("sfc: correctly advertise tunneled IPv6 segmentation")
    Fixes: 24b2c3751aa3 ("sfc: advertise encapsulated offloads on EF10")
    Reported-by: Tianhao Zhao <tizhao@redhat.com>
    Suggested-by: Jonathan Cooper <jonathan.s.cooper@amd.com>
    Tested-by: Jonathan Cooper <jonathan.s.cooper@amd.com>
    Signed-off-by: Íñigo Huguet <ihuguet@redhat.com>
    Acked-by: Edward Cree <ecree.xilinx@gmail.com>
    Link: https://lore.kernel.org/r/20230323083417.7345-1-ihuguet@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a81e2da7297f0518e27308f8fcc41db380d4fbc
Author: Arseniy Krasnov <avkrasnov@sberdevices.ru>
Date:   Mon Mar 13 10:32:44 2023 +0300

    mtd: rawnand: meson: invalidate cache on polling ECC bit
    
    [ Upstream commit e732e39ed9929c05fd219035bc9653ba4100d4fa ]
    
    'info_buf' memory is cached and driver polls ECC bit in it. This bit
    is set by the NAND controller. If 'usleep_range()' returns before device
    sets this bit, 'info_buf' will be cached and driver won't see update of
    this bit and will loop forever.
    
    Fixes: 8fae856c5350 ("mtd: rawnand: meson: add support for Amlogic NAND flash controller")
    Signed-off-by: Arseniy Krasnov <AVKrasnov@sberdevices.ru>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/d4ef0bd6-816e-f6fa-9385-f05f775f0ae2@sberdevices.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47a449ec09b4479b89dcc6b27ec3829fc82ffafb
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Fri Mar 17 11:20:04 2023 +0100

    mips: bmips: BCM6358: disable RAC flush for TP1
    
    [ Upstream commit ab327f8acdf8d06601fbf058859a539a9422afff ]
    
    RAC flush causes kernel panics on BCM6358 with EHCI/OHCI when booting from TP1:
    [    3.881739] usb 1-1: new high-speed USB device number 2 using ehci-platform
    [    3.895011] Reserved instruction in kernel code[#1]:
    [    3.900113] CPU: 0 PID: 1 Comm: init Not tainted 5.10.16 #0
    [    3.905829] $ 0   : 00000000 10008700 00000000 77d94060
    [    3.911238] $ 4   : 7fd1f088 00000000 81431cac 81431ca0
    [    3.916641] $ 8   : 00000000 ffffefff 8075cd34 00000000
    [    3.922043] $12   : 806f8d40 f3e812b7 00000000 000d9aaa
    [    3.927446] $16   : 7fd1f068 7fd1f080 7ff559b8 81428470
    [    3.932848] $20   : 00000000 00000000 55590000 77d70000
    [    3.938251] $24   : 00000018 00000010
    [    3.943655] $28   : 81430000 81431e60 81431f28 800157fc
    [    3.949058] Hi    : 00000000
    [    3.952013] Lo    : 00000000
    [    3.955019] epc   : 80015808 setup_sigcontext+0x54/0x24c
    [    3.960464] ra    : 800157fc setup_sigcontext+0x48/0x24c
    [    3.965913] Status: 10008703 KERNEL EXL IE
    [    3.970216] Cause : 00800028 (ExcCode 0a)
    [    3.974340] PrId  : 0002a010 (Broadcom BMIPS4350)
    [    3.979170] Modules linked in: ohci_platform ohci_hcd fsl_mph_dr_of ehci_platform ehci_fsl ehci_hcd gpio_button_hotplug usbcore nls_base usb_common
    [    3.992907] Process init (pid: 1, threadinfo=(ptrval), task=(ptrval), tls=77e22ec8)
    [    4.000776] Stack : 81431ef4 7fd1f080 81431f28 81428470 7fd1f068 81431edc 7ff559b8 81428470
    [    4.009467]         81431f28 7fd1f080 55590000 77d70000 77d5498c 80015c70 806f0000 8063ae74
    [    4.018149]         08100002 81431f28 0000000a 08100002 81431f28 0000000a 77d6b418 00000003
    [    4.026831]         ffffffff 80016414 80080734 81431ecc 81431ecc 00000001 00000000 04000000
    [    4.035512]         77d54874 00000000 00000000 00000000 00000000 00000012 00000002 00000000
    [    4.044196]         ...
    [    4.046706] Call Trace:
    [    4.049238] [<80015808>] setup_sigcontext+0x54/0x24c
    [    4.054356] [<80015c70>] setup_frame+0xdc/0x124
    [    4.059015] [<80016414>] do_notify_resume+0x1dc/0x288
    [    4.064207] [<80011b50>] work_notifysig+0x10/0x18
    [    4.069036]
    [    4.070538] Code: 8fc300b4  00001025  26240008 <ac820000> ac830004  3c048063  0c0228aa  24846a00  26240010
    [    4.080686]
    [    4.082517] ---[ end trace 22a8edb41f5f983b ]---
    [    4.087374] Kernel panic - not syncing: Fatal exception
    [    4.092753] Rebooting in 1 seconds..
    
    Because the bootloader (CFE) is not initializing the Read-ahead cache properly
    on the second thread (TP1). Since the RAC was not initialized properly, we
    should avoid flushing it at the risk of corrupting the instruction stream as
    seen in the trace above.
    
    Fixes: d59098a0e9cb ("MIPS: bmips: use generic dma noncoherent ops")
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac63f78d9aca3cd10802b2d9e6c12a3f03b262c7
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Mon Mar 6 11:18:24 2023 -0800

    ca8210: Fix unsigned mac_len comparison with zero in ca8210_skb_tx()
    
    [ Upstream commit 748b2f5e82d17480404b3e2895388fc2925f7caf ]
    
    mac_len is of type unsigned, which can never be less than zero.
    
            mac_len = ieee802154_hdr_peek_addrs(skb, &header);
            if (mac_len < 0)
                    return mac_len;
    
    Change this to type int as ieee802154_hdr_peek_addrs() can return negative
    integers, this is found by static analysis with smatch.
    
    Fixes: 6c993779ea1d ("ca8210: fix mac_len negative array access")
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230306191824.4115839-1-harshit.m.mogalapalli@oracle.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b1269b709c9d3314cb2c6283474c4e5340621b7
Author: Anton Gusev <aagusev@ispras.ru>
Date:   Tue Jan 31 10:58:18 2023 +0300

    tracing: Fix wrong return in kprobe_event_gen_test.c
    
    [ Upstream commit bc4f359b3b607daac0290d0038561237a86b38cb ]
    
    Overwriting the error code with the deletion result may cause the
    function to return 0 despite encountering an error. Commit b111545d26c0
    ("tracing: Remove the useless value assignment in
    test_create_synth_event()") solves a similar issue by
    returning the original error code, so this patch does the same.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230131075818.5322-1-aagusev@ispras.ru
    
    Signed-off-by: Anton Gusev <aagusev@ispras.ru>
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 038765a095fd6dc13128c0d350c53d89ace690dc
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Thu Dec 15 10:18:16 2022 -0500

    tools/power turbostat: Fix /dev/cpu_dma_latency warnings
    
    [ Upstream commit 40aafc7d58d3544f152a863a0e9863014b6d5d8c ]
    
    When running as non-root the following error is seen in turbostat:
    
    turbostat: fopen /dev/cpu_dma_latency
    : Permission denied
    
    turbostat and the man page have information on how to avoid other
    permission errors, so these can be fixed the same way.
    
    Provide better /dev/cpu_dma_latency warnings that provide instructions on
    how to avoid the error, and update the man page.
    
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    Cc: linux-pm@vger.kernel.org
    Signed-off-by: Len Brown <len.brown@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ec5680dc656c80e4004969299bc6f27e2291434
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Wed Mar 15 09:22:54 2023 +0000

    fbdev: au1200fb: Fix potential divide by zero
    
    [ Upstream commit 44a3b36b42acfc433aaaf526191dd12fbb919fdb ]
    
    var->pixclock can be assigned to zero by user. Without
    proper check, divide by zero would occur when invoking
    macro PICOS2KHZ in au1200fb_fb_check_var.
    
    Error out if var->pixclock is zero.
    
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce5551db36294764bdbda7d2bf794d13d5dd352c
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Wed Mar 15 09:05:18 2023 +0000

    fbdev: lxfb: Fix potential divide by zero
    
    [ Upstream commit 61ac4b86a4c047c20d5cb423ddd87496f14d9868 ]
    
    var->pixclock can be assigned to zero by user. Without proper
    check, divide by zero would occur in lx_set_clock.
    
    Error out if var->pixclock is zero.
    
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2be7f80562dcc82382857cecc97d4c23c1140cf
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Wed Mar 15 08:33:47 2023 +0000

    fbdev: intelfb: Fix potential divide by zero
    
    [ Upstream commit d823685486a3446d061fed7c7d2f80af984f119a ]
    
    Variable var->pixclock is controlled by user and can be assigned
    to zero. Without proper check, divide by zero would occur in
    intelfbhw_validate_mode and intelfbhw_mode_to_hw.
    
    Error out if var->pixclock is zero.
    
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78eb964805f9ed40270a3c9339d68d7715cea18f
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Wed Mar 15 07:18:31 2023 +0000

    fbdev: nvidia: Fix potential divide by zero
    
    [ Upstream commit 92e2a00f2987483e1f9253625828622edd442e61 ]
    
    variable var->pixclock can be set by user. In case it
    equals to zero, divide by zero would occur in nvidiafb_set_par.
    
    Similar crashes have happened in other fbdev drivers. There
    is no check and modification on var->pixclock along the call
    chain to nvidia_check_var and nvidiafb_set_par. We believe it
    could also be triggered in driver nvidia from user site.
    
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f2a94baee431c73b7e2a3230b1adafef6128000
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 14 19:32:38 2023 -0700

    sched_getaffinity: don't assume 'cpumask_size()' is fully initialized
    
    [ Upstream commit 6015b1aca1a233379625385feb01dd014aca60b5 ]
    
    The getaffinity() system call uses 'cpumask_size()' to decide how big
    the CPU mask is - so far so good.  It is indeed the allocation size of a
    cpumask.
    
    But the code also assumes that the whole allocation is initialized
    without actually doing so itself.  That's wrong, because we might have
    fixed-size allocations (making copying and clearing more efficient), but
    not all of it is then necessarily used if 'nr_cpu_ids' is smaller.
    
    Having checked other users of 'cpumask_size()', they all seem to be ok,
    either using it purely for the allocation size, or explicitly zeroing
    the cpumask before using the size in bytes to copy it.
    
    See for example the ublk_ctrl_get_queue_affinity() function that uses
    the proper 'zalloc_cpumask_var()' to make sure that the whole mask is
    cleared, whether the storage is on the stack or if it was an external
    allocation.
    
    Fix this by just zeroing the allocation before using it.  Do the same
    for the compat version of sched_getaffinity(), which had the same logic.
    
    Also, for consistency, make sched_getaffinity() use 'cpumask_bits()' to
    access the bits.  For a cpumask_var_t, it ends up being a pointer to the
    same data either way, but it's just a good idea to treat it like you
    would a 'cpumask_t'.  The compat case already did that.
    
    Reported-by: Ryan Roberts <ryan.roberts@arm.com>
    Link: https://lore.kernel.org/lkml/7d026744-6bd6-6827-0471-b5e8eae0be3f@arm.com/
    Cc: Yury Norov <yury.norov@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6eaa2254cc5ed8fbc583186083fc87e8aece759a
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Tue Mar 7 13:08:56 2023 +0000

    fbdev: tgafb: Fix potential divide by zero
    
    [ Upstream commit f90bd245de82c095187d8c2cabb8b488a39eaecc ]
    
    fb_set_var would by called when user invokes ioctl with cmd
    FBIOPUT_VSCREENINFO. User-provided data would finally reach
    tgafb_check_var. In case var->pixclock is assigned to zero,
    divide by zero would occur when checking whether reciprocal
    of var->pixclock is too high.
    
    Similar crashes have happened in other fbdev drivers. There
    is no check and modification on var->pixclock along the call
    chain to tgafb_check_var. We believe it could also be triggered
    in driver tgafb from user site.
    
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit baef27176ea5fdc7ad0947e2dc7733855e35db71
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Mon Mar 13 00:50:28 2023 +0000

    ALSA: hda/ca0132: fixup buffer overrun at tuning_ctl_set()
    
    [ Upstream commit 98e5eb110095ec77cb6d775051d181edbf9cd3cf ]
    
    tuning_ctl_set() might have buffer overrun at (X) if it didn't break
    from loop by matching (A).
    
            static int tuning_ctl_set(...)
            {
                    for (i = 0; i < TUNING_CTLS_COUNT; i++)
    (A)                     if (nid == ca0132_tuning_ctls[i].nid)
                                    break;
    
                    snd_hda_power_up(...);
    (X)             dspio_set_param(..., ca0132_tuning_ctls[i].mid, ...);
                    snd_hda_power_down(...);                ^
    
                    return 1;
            }
    
    We will get below error by cppcheck
    
            sound/pci/hda/patch_ca0132.c:4229:2: note: After for loop, i has value 12
             for (i = 0; i < TUNING_CTLS_COUNT; i++)
             ^
            sound/pci/hda/patch_ca0132.c:4234:43: note: Array index out of bounds
             dspio_set_param(codec, ca0132_tuning_ctls[i].mid, 0x20,
                                                       ^
    This patch cares non match case.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Link: https://lore.kernel.org/r/87sfe9eap7.wl-kuninori.morimoto.gx@renesas.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcf80111a4f69c85e5b393870f7fc4374d383334
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Mon Mar 13 00:49:24 2023 +0000

    ALSA: asihpi: check pao in control_message()
    
    [ Upstream commit 9026c0bf233db53b86f74f4c620715e94eb32a09 ]
    
    control_message() might be called with pao = NULL.
    Here indicates control_message() as sample.
    
    (B)     static void control_message(struct hpi_adapter_obj *pao, ...)
            {                                                   ^^^
                    struct hpi_hw_obj *phw = pao->priv;
                    ...                      ^^^
            }
    
    (A)     void _HPI_6205(struct hpi_adapter_obj *pao, ...)
            {                                      ^^^
                    ...
                    case HPI_OBJ_CONTROL:
    (B)                     control_message(pao, phm, phr);
                            break;          ^^^
                    ...
            }
    
            void HPI_6205(...)
            {
                    ...
    (A)             _HPI_6205(NULL, phm, phr);
                    ...       ^^^^
            }
    
    Therefore, We will get too many warning via cppcheck, like below
    
            sound/pci/asihpi/hpi6205.c:238:27: warning: Possible null pointer dereference: pao [nullPointer]
                     struct hpi_hw_obj *phw = pao->priv;
                                              ^
            sound/pci/asihpi/hpi6205.c:433:13: note: Calling function '_HPI_6205', 1st argument 'NULL' value is 0
                      _HPI_6205(NULL, phm, phr);
                                ^
            sound/pci/asihpi/hpi6205.c:401:20: note: Calling function 'control_message', 1st argument 'pao' value is 0
               control_message(pao, phm, phr);
                               ^
    Set phr->error like many functions doing, and don't call _HPI_6205()
    with NULL.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Link: https://lore.kernel.org/r/87ttypeaqz.wl-kuninori.morimoto.gx@renesas.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b94ffa287415e3950b2fd846c9a10420533f7ef1
Author: Kristian Overskeid <koverskeid@gmail.com>
Date:   Tue Mar 7 14:32:29 2023 +0100

    net: hsr: Don't log netdev_err message on unknown prp dst node
    
    [ Upstream commit 28e8cabe80f3e6e3c98121576eda898eeb20f1b1 ]
    
    If no frames has been exchanged with a node for HSR_NODE_FORGET_TIME, the
    node will be deleted from the node_db list. If a frame is sent to the node
    after it is deleted, a netdev_err message for each slave interface is
    produced. This should not happen with dan nodes because of supervision
    frames, but can happen often with san nodes, which clutters the kernel
    log. Since the hsr protocol does not support sans, this is only relevant
    for the prp protocol.
    
    Signed-off-by: Kristian Overskeid <koverskeid@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74d6d33f3695070850cc15d3058d1315fb94d380
Author: NeilBrown <neilb@suse.de>
Date:   Mon Mar 6 09:36:25 2023 +1100

    md: avoid signed overflow in slot_store()
    
    [ Upstream commit 3bc57292278a0b6ac4656cad94c14f2453344b57 ]
    
    slot_store() uses kstrtouint() to get a slot number, but stores the
    result in an "int" variable (by casting a pointer).
    This can result in a negative slot number if the unsigned int value is
    very large.
    
    A negative number means that the slot is empty, but setting a negative
    slot number this way will not remove the device from the array.  I don't
    think this is a serious problem, but it could cause confusion and it is
    best to fix it.
    
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10941fd5c3e18e7958f2bca3904f6972d29b362a
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Mar 14 16:31:32 2023 -0700

    fsverity: don't drop pagecache at end of FS_IOC_ENABLE_VERITY
    
    [ Upstream commit a075bacde257f755bea0e53400c9f1cdd1b8e8e6 ]
    
    The full pagecache drop at the end of FS_IOC_ENABLE_VERITY is causing
    performance problems and is hindering adoption of fsverity.  It was
    intended to solve a race condition where unverified pages might be left
    in the pagecache.  But actually it doesn't solve it fully.
    
    Since the incomplete solution for this race condition has too much
    performance impact for it to be worth it, let's remove it for now.
    
    Fixes: 3fda4c617e84 ("fs-verity: implement FS_IOC_ENABLE_VERITY ioctl")
    Cc: stable@vger.kernel.org
    Reviewed-by: Victor Hsieh <victorhsieh@google.com>
    Link: https://lore.kernel.org/r/20230314235332.50270-1-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b9493b504fc15c63ec9c7d5b47e669a287837e6
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Mar 8 14:39:54 2023 -0500

    dm crypt: avoid accessing uninitialized tasklet
    
    [ Upstream commit d9a02e016aaf5a57fb44e9a5e6da8ccd3b9e2e70 ]
    
    When neither "no_read_workqueue" nor "no_write_workqueue" are enabled,
    tasklet_trylock() in crypt_dec_pending() may still return false due to
    an uninitialized state, and dm-crypt will unnecessarily do io completion
    in io_queue workqueue instead of current context.
    
    Fix this by adding an 'in_tasklet' flag to dm_crypt_io struct and
    initialize it to false in crypt_io_init(). Set this flag to true in
    kcryptd_queue_crypt() before calling tasklet_schedule(). If set
    crypt_dec_pending() will punt io completion to a workqueue.
    
    This also nicely avoids the tasklet_trylock/unlock hack when tasklets
    aren't in use.
    
    Fixes: 8e14f610159d ("dm crypt: do not call bio_endio() from the dm-crypt tasklet")
    Cc: stable@vger.kernel.org
    Reported-by: Hou Tao <houtao1@huawei.com>
    Suggested-by: Ignat Korchagin <ignat@cloudflare.com>
    Reviewed-by: Ignat Korchagin <ignat@cloudflare.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2d19565478f45b3055b70b034014a8bc10fdbfc
Author: Ivan Bornyakov <i.bornyakov@metrotek.ru>
Date:   Mon Mar 6 16:25:26 2023 +0300

    bus: imx-weim: fix branch condition evaluates to a garbage value
    
    [ Upstream commit 1adab2922c58e7ff4fa9f0b43695079402cce876 ]
    
    If bus type is other than imx50_weim_devtype and have no child devices,
    variable 'ret' in function weim_parse_dt() will not be initialized, but
    will be used as branch condition and return value. Fix this by
    initializing 'ret' with 0.
    
    This was discovered with help of clang-analyzer, but the situation is
    quite possible in real life.
    
    Fixes: 52c47b63412b ("bus: imx-weim: improve error handling upon child probe-failure")
    Signed-off-by: Ivan Bornyakov <i.bornyakov@metrotek.ru>
    Cc: stable@vger.kernel.org
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1635a062fa0e045fe9e0eddabdbeff2e66f038d2
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Mar 6 11:35:33 2023 +0100

    drm/meson: fix missing component unbind on bind errors
    
    [ Upstream commit ba98413bf45edbf33672e2539e321b851b2cfbd1 ]
    
    Make sure to unbind all subcomponents when binding the aggregate device
    fails.
    
    Fixes: a41e82e6c457 ("drm/meson: Add support for components")
    Cc: stable@vger.kernel.org      # 4.12
    Cc: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230306103533.4915-1-johan+linaro@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 794a6cea22688db942ee10c258c5f353e7e1649d
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Fri Dec 31 00:55:15 2021 +0100

    drm/meson: Fix error handling when afbcd.ops->init fails
    
    [ Upstream commit fa747d75f65d1b1cbc3f4691fa67b695e8a399c8 ]
    
    When afbcd.ops->init fails we need to free the struct drm_device. Also
    all errors which come after afbcd.ops->init was successful need to exit
    the AFBCD, just like meson_drv_unbind() does.
    
    Fixes: d1b5e41e13a7e9 ("drm/meson: Add AFBCD module driver")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211230235515.1627522-3-martin.blumenstingl@googlemail.com
    Stable-dep-of: ba98413bf45e ("drm/meson: fix missing component unbind on bind errors")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7385e0886cda36050e84b15cae2cdbf61415f3d
Author: Marco Elver <elver@google.com>
Date:   Thu Mar 16 23:47:05 2023 +0100

    kcsan: avoid passing -g for test
    
    [ Upstream commit 5eb39cde1e2487ba5ec1802dc5e58a77e700d99e ]
    
    Nathan reported that when building with GNU as and a version of clang that
    defaults to DWARF5, the assembler will complain with:
    
      Error: non-constant .uleb128 is not supported
    
    This is because `-g` defaults to the compiler debug info default. If the
    assembler does not support some of the directives used, the above errors
    occur. To fix, remove the explicit passing of `-g`.
    
    All the test wants is that stack traces print valid function names, and
    debug info is not required for that. (I currently cannot recall why I
    added the explicit `-g`.)
    
    Link: https://lkml.kernel.org/r/20230316224705.709984-2-elver@google.com
    Fixes: 1fe84fd4a402 ("kcsan: Add test suite")
    Signed-off-by: Marco Elver <elver@google.com>
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46ae204069e7d09b36413e71228820153419150e
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Mon Nov 28 11:43:58 2022 +0100

    kernel: kcsan: kcsan_test: build without structleak plugin
    
    [ Upstream commit 6fcd4267a840d0536b8e5334ad5f31e4105fce85 ]
    
    Building kcsan_test with structleak plugin enabled makes the stack frame
    size to grow.
    
    kernel/kcsan/kcsan_test.c:704:1: error: the frame size of 3296 bytes is larger than 2048 bytes [-Werror=frame-larger-than=]
    
    Turn off the structleak plugin checks for kcsan_test.
    
    Link: https://lkml.kernel.org/r/20221128104358.2660634-1-anders.roxell@linaro.org
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Marco Elver <elver@google.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: David Gow <davidgow@google.com>
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Stable-dep-of: 5eb39cde1e24 ("kcsan: avoid passing -g for test")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5ce0a559b66b001120af4dfacb75dce4c498c0b
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Mon Mar 6 12:05:57 2023 -0800

    usb: dwc3: gadget: Add 1ms delay after end transfer command without IOC
    
    [ Upstream commit d8a2bb4eb75866275b5cf7de2e593ac3449643e2 ]
    
    Previously, there was a 100uS delay inserted after issuing an end transfer
    command for specific controller revisions.  This was due to the fact that
    there was a GUCTL2 bit field which enabled synchronous completion of the
    end transfer command once the CMDACT bit was cleared in the DEPCMD
    register.  Since this bit does not exist for all controller revisions and
    the current implementation heavily relies on utizling the EndTransfer
    command completion interrupt, add the delay back in for uses where the
    interrupt on completion bit is not set, and increase the duration to 1ms
    for the controller to complete the command.
    
    An issue was seen where the USB request buffer was unmapped while the DWC3
    controller was still accessing the TRB.  However, it was confirmed that the
    end transfer command was successfully submitted. (no end transfer timeout)
    In situations, such as dwc3_gadget_soft_disconnect() and
    __dwc3_gadget_ep_disable(), the dwc3_remove_request() is utilized, which
    will issue the end transfer command, and follow up with
    dwc3_gadget_giveback().  At least for the USB ep disable path, it is
    required for any pending and started requests to be completed and returned
    to the function driver in the same context of the disable call.  Without
    the GUCTL2 bit, it is not ensured that the end transfer is completed before
    the buffers are unmapped.
    
    Fixes: cf2f8b63f7f1 ("usb: dwc3: gadget: Remove END_TRANSFER delay")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230306200557.29387-1-quic_wcheng@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddb1973e67650dfdc66179b07895b20568a3b251
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Sun Mar 6 22:12:51 2022 +0100

    usb: dwc3: gadget: move cmd_endtransfer to extra function
    
    [ Upstream commit e192cc7b52399d1b073f88cd3ba128b74d3a57f1 ]
    
    This patch adds the extra function __dwc3_stop_active_transfer to
    consolidate the same codepath.
    
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Link: https://lore.kernel.org/r/20220306211251.2281335-3-m.grzeschik@pengutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: d8a2bb4eb758 ("usb: dwc3: gadget: Add 1ms delay after end transfer command without IOC")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01e4c9c03de8a9f8839cb7342bc4bccf9104efe5
Author: Dai Ngo <dai.ngo@oracle.com>
Date:   Mon Dec 12 14:50:11 2022 -0800

    NFSD: fix use-after-free in __nfs42_ssc_open()
    
    commit 75333d48f92256a0dec91dbf07835e804fc411c0 upstream.
    
    Problem caused by source's vfsmount being unmounted but remains
    on the delayed unmount list. This happens when nfs42_ssc_open()
    return errors.
    
    Fixed by removing nfsd4_interssc_connect(), leave the vfsmount
    for the laundromat to unmount when idle time expires.
    
    We don't need to call nfs_do_sb_deactive when nfs42_ssc_open
    return errors since the file was not opened so nfs_server->active
    was not incremented. Same as in nfsd4_copy, if we fail to
    launch nfsd4_do_async_copy thread then there's no need to
    call nfs_do_sb_deactive
    
    Reported-by: Xingyuan Mo <hdthky0@gmail.com>
    Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
    Tested-by: Xingyuan Mo <hdthky0@gmail.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34ef9cd887d573babd5b7f689fc188eff14aa8ed
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Aug 23 14:34:14 2022 +0800

    KVM: fix memoryleak in kvm_init()
    
    commit 5a2a961be2ad6a16eb388a80442443b353c11d16 upstream.
    
    When alloc_cpumask_var_node() fails for a certain cpu, there might be some
    allocated cpumasks for percpu cpu_kick_mask. We should free these cpumasks
    or memoryleak will occur.
    
    Fixes: baff59ccdc65 ("KVM: Pre-allocate cpumasks for kvm_make_all_cpus_request_except()")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Link: https://lore.kernel.org/r/20220823063414.59778-1-linmiaohe@huawei.com
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6d345c3a31e1eaef6dbccfd57166a4da97c6dfe
Author: Brian Foster <bfoster@redhat.com>
Date:   Tue Mar 28 10:35:12 2023 +0300

    xfs: don't reuse busy extents on extent trim
    
    commit 06058bc40534530e617e5623775c53bb24f032cb upstream.
    
    Freed extents are marked busy from the point the freeing transaction
    commits until the associated CIL context is checkpointed to the log.
    This prevents reuse and overwrite of recently freed blocks before
    the changes are committed to disk, which can lead to corruption
    after a crash. The exception to this rule is that metadata
    allocation is allowed to reuse busy extents because metadata changes
    are also logged.
    
    As of commit 97d3ac75e5e0 ("xfs: exact busy extent tracking"), XFS
    has allowed modification or complete invalidation of outstanding
    busy extents for metadata allocations. This implementation assumes
    that use of the associated extent is imminent, which is not always
    the case. For example, the trimmed extent might not satisfy the
    minimum length of the allocation request, or the allocation
    algorithm might be involved in a search for the optimal result based
    on locality.
    
    generic/019 reproduces a corruption caused by this scenario. First,
    a metadata block (usually a bmbt or symlink block) is freed from an
    inode. A subsequent bmbt split on an unrelated inode attempts a near
    mode allocation request that invalidates the busy block during the
    search, but does not ultimately allocate it. Due to the busy state
    invalidation, the block is no longer considered busy to subsequent
    allocation. A direct I/O write request immediately allocates the
    block and writes to it. Finally, the filesystem crashes while in a
    state where the initial metadata block free had not committed to the
    on-disk log. After recovery, the original metadata block is in its
    original location as expected, but has been corrupted by the
    aforementioned dio.
    
    This demonstrates that it is fundamentally unsafe to modify busy
    extent state for extents that are not guaranteed to be allocated.
    This applies to pretty much all of the code paths that currently
    trim busy extents for one reason or another. Therefore to address
    this problem, drop the reuse mechanism from the busy extent trim
    path. This code already knows how to return partial non-busy ranges
    of the targeted free extent and higher level code tracks the busy
    state of the allocation attempt. If a block allocation fails where
    one or more candidate extents is busy, we force the log and retry
    the allocation.
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Chandan Babu R <chandanrlinux@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb61e1e36fb379228d41b6413487e8a33077828c
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Tue Mar 28 10:35:11 2023 +0300

    xfs: shut down the filesystem if we screw up quota reservation
    
    commit 2a4bdfa8558ca2904dc17b83497dc82aa7fc05e9 upstream.
    
    If we ever screw up the quota reservations enough to trip the
    assertions, something's wrong with the quota code.  Shut down the
    filesystem when this happens, because this is corruption.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91d7a4bd5656552d6259e2d0f8859f9e8cc5ef68
Author: Jan Kara via Ocfs2-devel <ocfs2-devel@oss.oracle.com>
Date:   Thu Mar 2 16:38:43 2023 +0100

    ocfs2: fix data corruption after failed write
    
    commit 90410bcf873cf05f54a32183afff0161f44f9715 upstream.
    
    When buffered write fails to copy data into underlying page cache page,
    ocfs2_write_end_nolock() just zeroes out and dirties the page.  This can
    leave dirty page beyond EOF and if page writeback tries to write this page
    before write succeeds and expands i_size, page gets into inconsistent
    state where page dirty bit is clear but buffer dirty bits stay set
    resulting in page data never getting written and so data copied to the
    page is lost.  Fix the problem by invalidating page beyond EOF after
    failed write.
    
    Link: https://lkml.kernel.org/r/20230302153843.18499-1-jack@suse.cz
    Fixes: 6dbf7bb55598 ("fs: Don't invalidate page buffers in block_write_full_page()")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    [ replace block_invalidate_folio to block_invalidatepage ]
    Signed-off-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4a5181ba1b1165b8607fa4e738ce7b4be68eb24
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Fri Mar 17 17:08:10 2023 +0100

    sched/fair: Sanitize vruntime of entity being migrated
    
    commit a53ce18cacb477dd0513c607f187d16f0fa96f71 upstream.
    
    Commit 829c1651e9c4 ("sched/fair: sanitize vruntime of entity being placed")
    fixes an overflowing bug, but ignore a case that se->exec_start is reset
    after a migration.
    
    For fixing this case, we delay the reset of se->exec_start after
    placing the entity which se->exec_start to detect long sleeping task.
    
    In order to take into account a possible divergence between the clock_task
    of 2 rqs, we increase the threshold to around 104 days.
    
    Fixes: 829c1651e9c4 ("sched/fair: sanitize vruntime of entity being placed")
    Originally-by: Zhang Qiao <zhangqiao22@huawei.com>
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: Zhang Qiao <zhangqiao22@huawei.com>
    Link: https://lore.kernel.org/r/20230317160810.107988-1-vincent.guittot@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfdcda25fb5e3c09394a28173f24b22e7c7e4731
Author: Zhang Qiao <zhangqiao22@huawei.com>
Date:   Mon Jan 30 13:22:16 2023 +0100

    sched/fair: sanitize vruntime of entity being placed
    
    commit 829c1651e9c4a6f78398d3e67651cef9bb6b42cc upstream.
    
    When a scheduling entity is placed onto cfs_rq, its vruntime is pulled
    to the base level (around cfs_rq->min_vruntime), so that the entity
    doesn't gain extra boost when placed backwards.
    
    However, if the entity being placed wasn't executed for a long time, its
    vruntime may get too far behind (e.g. while cfs_rq was executing a
    low-weight hog), which can inverse the vruntime comparison due to s64
    overflow.  This results in the entity being placed with its original
    vruntime way forwards, so that it will effectively never get to the cpu.
    
    To prevent that, ignore the vruntime of the entity being placed if it
    didn't execute for much longer than the characteristic sheduler time
    scale.
    
    [rkagan: formatted, adjusted commit log, comments, cutoff value]
    Signed-off-by: Zhang Qiao <zhangqiao22@huawei.com>
    Co-developed-by: Roman Kagan <rkagan@amazon.de>
    Signed-off-by: Roman Kagan <rkagan@amazon.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20230130122216.3555094-1-rkagan@amazon.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66ff37993dd7e9954b6446237fe2453b380ce40d
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Mar 6 11:17:58 2023 -0500

    dm crypt: add cond_resched() to dmcrypt_write()
    
    commit fb294b1c0ba982144ca467a75e7d01ff26304e2b upstream.
    
    The loop in dmcrypt_write may be running for unbounded amount of time,
    thus we need cond_resched() in it.
    
    This commit fixes the following warning:
    
    [ 3391.153255][   C12] watchdog: BUG: soft lockup - CPU#12 stuck for 23s! [dmcrypt_write/2:2897]
    ...
    [ 3391.387210][   C12] Call trace:
    [ 3391.390338][   C12]  blk_attempt_bio_merge.part.6+0x38/0x158
    [ 3391.395970][   C12]  blk_attempt_plug_merge+0xc0/0x1b0
    [ 3391.401085][   C12]  blk_mq_submit_bio+0x398/0x550
    [ 3391.405856][   C12]  submit_bio_noacct+0x308/0x380
    [ 3391.410630][   C12]  dmcrypt_write+0x1e4/0x208 [dm_crypt]
    [ 3391.416005][   C12]  kthread+0x130/0x138
    [ 3391.419911][   C12]  ret_from_fork+0x10/0x18
    
    Reported-by: yangerkun <yangerkun@huawei.com>
    Fixes: dc2676210c42 ("dm crypt: offload writes to thread")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c68f08cc745675a17894e1b4a5b5b9700ace6da4
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Mar 16 14:55:06 2023 +0800

    dm stats: check for and propagate alloc_percpu failure
    
    commit d3aa3e060c4a80827eb801fc448debc9daa7c46b upstream.
    
    Check alloc_precpu()'s return value and return an error from
    dm_stats_init() if it fails. Update alloc_dev() to fail if
    dm_stats_init() does.
    
    Otherwise, a NULL pointer dereference will occur in dm_stats_cleanup()
    even if dm-stats isn't being actively used.
    
    Fixes: fd2ed4d25270 ("dm: add statistics support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eaa2b7ae90c5a5e05586df310d804de250747d3
Author: Wei Chen <harperchen1110@gmail.com>
Date:   Tue Mar 14 16:54:21 2023 +0000

    i2c: xgene-slimpro: Fix out-of-bounds bug in xgene_slimpro_i2c_xfer()
    
    commit 92fbb6d1296f81f41f65effd7f5f8c0f74943d15 upstream.
    
    The data->block[0] variable comes from user and is a number between
    0-255. Without proper check, the variable may be very large to cause
    an out-of-bounds when performing memcpy in slimpro_i2c_blkwr.
    
    Fix this bug by checking the value of writelen.
    
    Fixes: f6505fbabc42 ("i2c: add SLIMpro I2C device driver on APM X-Gene platform")
    Signed-off-by: Wei Chen <harperchen1110@gmail.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85b637feee1e60e2dce3a8e9041ccfee202fbb4c
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Tue Mar 7 16:23:24 2023 +0000

    firmware: arm_scmi: Fix device node validation for mailbox transport
    
    commit 2ab4f4018cb6b8010ca5002c3bdc37783b5d28c2 upstream.
    
    When mailboxes are used as a transport it is possible to setup the SCMI
    transport layer, depending on the underlying channels configuration, to use
    one or two mailboxes, associated, respectively, to one or two, distinct,
    shared memory areas: any other combination should be treated as invalid.
    
    Add more strict checking of SCMI mailbox transport device node descriptors.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Cc: <stable@vger.kernel.org> # 4.19
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20230307162324.891866-1-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f632a90f8e39db39b322107b9a8d438b826a7f4f
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Tue Feb 28 15:11:20 2023 +0530

    tee: amdtee: fix race condition in amdtee_open_session
    
    commit f8502fba45bd30e1a6a354d9d898bc99d1a11e6d upstream.
    
    There is a potential race condition in amdtee_open_session that may
    lead to use-after-free. For instance, in amdtee_open_session() after
    sess->sess_mask is set, and before setting:
    
        sess->session_info[i] = session_info;
    
    if amdtee_close_session() closes this same session, then 'sess' data
    structure will be released, causing kernel panic when 'sess' is
    accessed within amdtee_open_session().
    
    The solution is to set the bit sess->sess_mask as the last step in
    amdtee_open_session().
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Acked-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ede0da36c2fcd1f315c93719d9f3b7c7a807512
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Feb 23 17:20:48 2023 +0200

    drm/i915: Preserve crtc_state->inherited during state clearing
    
    commit 3a84f2c6c9558c554a90ec26ad25df92fc5e05b7 upstream.
    
    intel_crtc_prepare_cleared_state() is unintentionally losing
    the "inherited" flag. This will happen if intel_initial_commit()
    is forced to go through the full modeset calculations for
    whatever reason.
    
    Afterwards the first real commit from userspace will not get
    forced to the full modeset path, and thus eg. audio state may
    not get recomputed properly. So if the monitor was already
    enabled during boot audio will not work until userspace itself
    does an explicit full modeset.
    
    Cc: stable@vger.kernel.org
    Tested-by: Lee Shawn C <shawn.c.lee@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230223152048.20878-1-ville.syrjala@linux.intel.com
    Reviewed-by: Uma Shankar <uma.shankar@intel.com>
    (cherry picked from commit 2553bacaf953b48c59357f5a622282bc0c45adae)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5329a06b4cb8bb79117c5ccb0bd3f1463881d21
Author: Nirmoy Das <nirmoy.das@intel.com>
Date:   Tue Mar 14 15:29:14 2023 +0100

    drm/i915/active: Fix missing debug object activation
    
    commit e92eb246feb9019b0b137706c934b8891cdfe3c2 upstream.
    
    debug_active_activate() expected ref->count to be zero
    which is not true anymore as __i915_active_activate() calls
    debug_active_activate() after incrementing the count.
    
    v2: No need to check for "ref->count == 1" as __i915_active_activate()
    already make sure of that(Janusz).
    
    References: https://gitlab.freedesktop.org/drm/intel/-/issues/6733
    Fixes: 04240e30ed06 ("drm/i915: Skip taking acquire mutex for no ref->active callback")
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Thomas Hellström <thomas.hellstrom@intel.com>
    Cc: Andi Shyti <andi.shyti@linux.intel.com>
    Cc: intel-gfx@lists.freedesktop.org
    Cc: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Nirmoy Das <nirmoy.das@intel.com>
    Reviewed-by: Janusz Krzysztofik <janusz.krzysztofik@linux.intel.com>
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230313114613.9874-1-nirmoy.das@intel.com
    (cherry picked from commit bfad380c542438a9b642f8190b7fd37bc77e2723)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d18db946cc6a394291539e030df32324285648f7
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Tue Mar 7 17:55:48 2023 +0900

    nilfs2: fix kernel-infoleak in nilfs_ioctl_wrap_copy()
    
    commit 003587000276f81d0114b5ce773d80c119d8cb30 upstream.
    
    The ioctl helper function nilfs_ioctl_wrap_copy(), which exchanges a
    metadata array to/from user space, may copy uninitialized buffer regions
    to user space memory for read-only ioctl commands NILFS_IOCTL_GET_SUINFO
    and NILFS_IOCTL_GET_CPINFO.
    
    This can occur when the element size of the user space metadata given by
    the v_size member of the argument nilfs_argv structure is larger than the
    size of the metadata element (nilfs_suinfo structure or nilfs_cpinfo
    structure) on the file system side.
    
    KMSAN-enabled kernels detect this issue as follows:
    
     BUG: KMSAN: kernel-infoleak in instrument_copy_to_user
     include/linux/instrumented.h:121 [inline]
     BUG: KMSAN: kernel-infoleak in _copy_to_user+0xc0/0x100 lib/usercopy.c:33
      instrument_copy_to_user include/linux/instrumented.h:121 [inline]
      _copy_to_user+0xc0/0x100 lib/usercopy.c:33
      copy_to_user include/linux/uaccess.h:169 [inline]
      nilfs_ioctl_wrap_copy+0x6fa/0xc10 fs/nilfs2/ioctl.c:99
      nilfs_ioctl_get_info fs/nilfs2/ioctl.c:1173 [inline]
      nilfs_ioctl+0x2402/0x4450 fs/nilfs2/ioctl.c:1290
      nilfs_compat_ioctl+0x1b8/0x200 fs/nilfs2/ioctl.c:1343
      __do_compat_sys_ioctl fs/ioctl.c:968 [inline]
      __se_compat_sys_ioctl+0x7dd/0x1000 fs/ioctl.c:910
      __ia32_compat_sys_ioctl+0x93/0xd0 fs/ioctl.c:910
      do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
      __do_fast_syscall_32+0xa2/0x100 arch/x86/entry/common.c:178
      do_fast_syscall_32+0x37/0x80 arch/x86/entry/common.c:203
      do_SYSENTER_32+0x1f/0x30 arch/x86/entry/common.c:246
      entry_SYSENTER_compat_after_hwframe+0x70/0x82
    
     Uninit was created at:
      __alloc_pages+0x9f6/0xe90 mm/page_alloc.c:5572
      alloc_pages+0xab0/0xd80 mm/mempolicy.c:2287
      __get_free_pages+0x34/0xc0 mm/page_alloc.c:5599
      nilfs_ioctl_wrap_copy+0x223/0xc10 fs/nilfs2/ioctl.c:74
      nilfs_ioctl_get_info fs/nilfs2/ioctl.c:1173 [inline]
      nilfs_ioctl+0x2402/0x4450 fs/nilfs2/ioctl.c:1290
      nilfs_compat_ioctl+0x1b8/0x200 fs/nilfs2/ioctl.c:1343
      __do_compat_sys_ioctl fs/ioctl.c:968 [inline]
      __se_compat_sys_ioctl+0x7dd/0x1000 fs/ioctl.c:910
      __ia32_compat_sys_ioctl+0x93/0xd0 fs/ioctl.c:910
      do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
      __do_fast_syscall_32+0xa2/0x100 arch/x86/entry/common.c:178
      do_fast_syscall_32+0x37/0x80 arch/x86/entry/common.c:203
      do_SYSENTER_32+0x1f/0x30 arch/x86/entry/common.c:246
      entry_SYSENTER_compat_after_hwframe+0x70/0x82
    
     Bytes 16-127 of 3968 are uninitialized
     ...
    
    This eliminates the leak issue by initializing the page allocated as
    buffer using get_zeroed_page().
    
    Link: https://lkml.kernel.org/r/20230307085548.6290-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+132fdd2f1e1805fdc591@syzkaller.appspotmail.com
      Link: https://lkml.kernel.org/r/000000000000a5bd2d05f63f04ae@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 560437bba14d0546de72e3e9d0a2f78d88e8cd91
Author: Felix Fietkau <nbd@nbd.name>
Date:   Tue Mar 14 10:59:50 2023 +0100

    wifi: mac80211: fix qos on mesh interfaces
    
    commit 4e348c6c6e23491ae6eb5e077848a42d0562339c upstream.
    
    When ieee80211_select_queue is called for mesh, the sta pointer is usually
    NULL, since the nexthop is looked up much later in the tx path.
    Explicitly check for unicast address in that case in order to make qos work
    again.
    
    Cc: stable@vger.kernel.org
    Fixes: 50e2ab392919 ("wifi: mac80211: fix queue selection for mesh/OCB interfaces")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20230314095956.62085-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6adfe9bbd6ac11e398b54ccd99a0f8eea09f3c0
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Mar 8 16:42:42 2023 +0100

    usb: ucsi: Fix NULL pointer deref in ucsi_connector_change()
    
    commit f87fb985452ab2083967103ac00bfd68fb182764 upstream.
    
    When ucsi_init() fails, ucsi->connector is NULL, yet in case of
    ucsi_acpi we may still get events which cause the ucs_acpi code to call
    ucsi_connector_change(), which then derefs the NULL ucsi->connector
    pointer.
    
    Fix this by not setting ucsi->ntfy inside ucsi_init() until ucsi_init()
    has succeeded, so that ucsi_connector_change() ignores the events
    because UCSI_ENABLE_NTFY_CONNECTOR_CHANGE is not set in the ntfy mask.
    
    Fixes: bdc62f2bae8f ("usb: typec: ucsi: Simplified registration and I/O API")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217106
    Cc: stable@vger.kernel.org
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230308154244.722337-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09671cfc2b22fa1a4cec29464205d9ac62f821e5
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Fri Mar 17 14:15:16 2023 +0800

    usb: chipidea: core: fix possible concurrent when switch role
    
    commit 451b15ed138ec15bffbebb58a00ebdd884c3e659 upstream.
    
    The user may call role_store() when driver is handling
    ci_handle_id_switch() which is triggerred by otg event or power lost
    event. Unfortunately, the controller may go into chaos in this case.
    Fix this by protecting it with mutex lock.
    
    Fixes: a932a8041ff9 ("usb: chipidea: core: add sysfs group")
    cc: <stable@vger.kernel.org>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Link: https://lore.kernel.org/r/20230317061516.2451728-2-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 073ce98aa3a6be039a7e17b87945dfea3b4d2b66
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Fri Mar 17 14:15:15 2023 +0800

    usb: chipdea: core: fix return -EINVAL if request role is the same with current role
    
    commit 3670de80678961eda7fa2220883fc77c16868951 upstream.
    
    It should not return -EINVAL if the request role is the same with current
    role, return non-error and without do anything instead.
    
    Fixes: a932a8041ff9 ("usb: chipidea: core: add sysfs group")
    cc: <stable@vger.kernel.org>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Link: https://lore.kernel.org/r/20230317061516.2451728-1-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a36b601aff3f22e9504763c6d9779f099d3f1bd
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Wed Mar 8 07:44:27 2023 -0500

    usb: cdns3: Fix issue with using incorrect PCI device function
    
    commit 1272fd652a226ccb34e9f47371b6121948048438 upstream.
    
    PCI based platform can have more than two PCI functions.
    USBSS PCI Glue driver during initialization should
    consider only DRD/HOST/DEVICE PCI functions and
    all other should be ignored. This patch adds additional
    condition which causes that only DRD and HOST/DEVICE
    function will be accepted.
    
    cc: <stable@vger.kernel.org>
    Fixes: 7733f6c32e36 ("usb: cdns3: Add Cadence USB3 DRD Driver")
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20230308124427.311245-1-pawell@cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aae6d1bf4d8e66d566b77a44b5bef2cad11ec02c
Author: Coly Li <colyli@suse.de>
Date:   Mon Feb 27 23:23:17 2023 +0800

    dm thin: fix deadlock when swapping to thin device
    
    commit 9bbf5feecc7eab2c370496c1c161bbfe62084028 upstream.
    
    This is an already known issue that dm-thin volume cannot be used as
    swap, otherwise a deadlock may happen when dm-thin internal memory
    demand triggers swap I/O on the dm-thin volume itself.
    
    But thanks to commit a666e5c05e7c ("dm: fix deadlock when swapping to
    encrypted device"), the limit_swap_bios target flag can also be used
    for dm-thin to avoid the recursive I/O when it is used as swap.
    
    Fix is to simply set ti->limit_swap_bios to true in both pool_ctr()
    and thin_ctr().
    
    In my test, I create a dm-thin volume /dev/vg/swap and use it as swap
    device. Then I run fio on another dm-thin volume /dev/vg/main and use
    large --blocksize to trigger swap I/O onto /dev/vg/swap.
    
    The following fio command line is used in my test,
      fio --name recursive-swap-io --lockmem 1 --iodepth 128 \
         --ioengine libaio --filename /dev/vg/main --rw randrw \
        --blocksize 1M --numjobs 32 --time_based --runtime=12h
    
    Without this fix, the whole system can be locked up within 15 seconds.
    
    With this fix, there is no any deadlock or hung task observed after
    2 hours of running fio.
    
    Furthermore, if blocksize is changed from 1M to 128M, after around 30
    seconds fio has no visible I/O, and the out-of-memory killer message
    shows up in kernel message. After around 20 minutes all fio processes
    are killed and the whole system is back to being alive.
    
    This is exactly what is expected when recursive I/O happens on dm-thin
    volume when it is used as swap.
    
    Depends-on: a666e5c05e7c ("dm: fix deadlock when swapping to encrypted device")
    Cc: stable@vger.kernel.org
    Signed-off-by: Coly Li <colyli@suse.de>
    Acked-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d2626e10709ff8474ffd1a9db3cf4647569e89c
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Mar 7 23:29:17 2023 +0800

    igb: revert rtnl_lock() that causes deadlock
    
    commit 65f69851e44d71248b952a687e44759a7abb5016 upstream.
    
    The commit 6faee3d4ee8b ("igb: Add lock to avoid data race") adds
    rtnl_lock to eliminate a false data race shown below
    
     (FREE from device detaching)      |   (USE from netdev core)
    igb_remove                         |  igb_ndo_get_vf_config
     igb_disable_sriov                 |  vf >= adapter->vfs_allocated_count?
      kfree(adapter->vf_data)          |
      adapter->vfs_allocated_count = 0 |
                                       |    memcpy(... adapter->vf_data[vf]
    
    The above race will never happen and the extra rtnl_lock causes deadlock
    below
    
    [  141.420169]  <TASK>
    [  141.420672]  __schedule+0x2dd/0x840
    [  141.421427]  schedule+0x50/0xc0
    [  141.422041]  schedule_preempt_disabled+0x11/0x20
    [  141.422678]  __mutex_lock.isra.13+0x431/0x6b0
    [  141.423324]  unregister_netdev+0xe/0x20
    [  141.423578]  igbvf_remove+0x45/0xe0 [igbvf]
    [  141.423791]  pci_device_remove+0x36/0xb0
    [  141.423990]  device_release_driver_internal+0xc1/0x160
    [  141.424270]  pci_stop_bus_device+0x6d/0x90
    [  141.424507]  pci_stop_and_remove_bus_device+0xe/0x20
    [  141.424789]  pci_iov_remove_virtfn+0xba/0x120
    [  141.425452]  sriov_disable+0x2f/0xf0
    [  141.425679]  igb_disable_sriov+0x4e/0x100 [igb]
    [  141.426353]  igb_remove+0xa0/0x130 [igb]
    [  141.426599]  pci_device_remove+0x36/0xb0
    [  141.426796]  device_release_driver_internal+0xc1/0x160
    [  141.427060]  driver_detach+0x44/0x90
    [  141.427253]  bus_remove_driver+0x55/0xe0
    [  141.427477]  pci_unregister_driver+0x2a/0xa0
    [  141.428296]  __x64_sys_delete_module+0x141/0x2b0
    [  141.429126]  ? mntput_no_expire+0x4a/0x240
    [  141.429363]  ? syscall_trace_enter.isra.19+0x126/0x1a0
    [  141.429653]  do_syscall_64+0x5b/0x80
    [  141.429847]  ? exit_to_user_mode_prepare+0x14d/0x1c0
    [  141.430109]  ? syscall_exit_to_user_mode+0x12/0x30
    [  141.430849]  ? do_syscall_64+0x67/0x80
    [  141.431083]  ? syscall_exit_to_user_mode_prepare+0x183/0x1b0
    [  141.431770]  ? syscall_exit_to_user_mode+0x12/0x30
    [  141.432482]  ? do_syscall_64+0x67/0x80
    [  141.432714]  ? exc_page_fault+0x64/0x140
    [  141.432911]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Since the igb_disable_sriov() will call pci_disable_sriov() before
    releasing any resources, the netdev core will synchronize the cleanup to
    avoid any races. This patch removes the useless rtnl_(un)lock to guarantee
    correctness.
    
    CC: stable@vger.kernel.org
    Fixes: 6faee3d4ee8b ("igb: Add lock to avoid data race")
    Reported-by: Corinna Vinschen <vinschen@redhat.com>
    Link: https://lore.kernel.org/intel-wired-lan/ZAcJvkEPqWeJHO2r@calimero.vinschen.de/
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Tested-by: Corinna Vinschen <vinschen@redhat.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e66f3039c7922cc76ec555363f3e2a4cd224397d
Author: Nathan Huckleberry <nhuck@google.com>
Date:   Fri Mar 10 11:33:25 2023 -0800

    fsverity: Remove WQ_UNBOUND from fsverity read workqueue
    
    commit f959325e6ac3f499450088b8d9c626d1177be160 upstream.
    
    WQ_UNBOUND causes significant scheduler latency on ARM64/Android.  This
    is problematic for latency sensitive workloads, like I/O
    post-processing.
    
    Removing WQ_UNBOUND gives a 96% reduction in fsverity workqueue related
    scheduler latency and improves app cold startup times by ~30ms.
    WQ_UNBOUND was also removed from the dm-verity workqueue for the same
    reason [1].
    
    This code was tested by running Android app startup benchmarks and
    measuring how long the fsverity workqueue spent in the runnable state.
    
    Before
    Total workqueue scheduler latency: 553800us
    After
    Total workqueue scheduler latency: 18962us
    
    [1]: https://lore.kernel.org/all/20230202012348.885402-1-nhuck@google.com/
    
    Signed-off-by: Nathan Huckleberry <nhuck@google.com>
    Fixes: 8a1d0f9cacc9 ("fs-verity: add data verification hooks for ->readpages()")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230310193325.620493-1-nhuck@google.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f341c1fc60e172a3515c51bdabee11e83d1ee9
Author: Alvin Šipraga <alsi@bang-olufsen.dk>
Date:   Thu Mar 2 17:36:47 2023 +0100

    usb: gadget: u_audio: don't let userspace block driver unbind
    
    commit 6c67ed9ad9b83e453e808f9b31a931a20a25629b upstream.
    
    In the unbind callback for f_uac1 and f_uac2, a call to snd_card_free()
    via g_audio_cleanup() will disconnect the card and then wait for all
    resources to be released, which happens when the refcount falls to zero.
    Since userspace can keep the refcount incremented by not closing the
    relevant file descriptor, the call to unbind may block indefinitely.
    This can cause a deadlock during reboot, as evidenced by the following
    blocked task observed on my machine:
    
      task:reboot  state:D stack:0   pid:2827  ppid:569    flags:0x0000000c
      Call trace:
       __switch_to+0xc8/0x140
       __schedule+0x2f0/0x7c0
       schedule+0x60/0xd0
       schedule_timeout+0x180/0x1d4
       wait_for_completion+0x78/0x180
       snd_card_free+0x90/0xa0
       g_audio_cleanup+0x2c/0x64
       afunc_unbind+0x28/0x60
       ...
       kernel_restart+0x4c/0xac
       __do_sys_reboot+0xcc/0x1ec
       __arm64_sys_reboot+0x28/0x30
       invoke_syscall+0x4c/0x110
       ...
    
    The issue can also be observed by opening the card with arecord and
    then stopping the process through the shell before unbinding:
    
      # arecord -D hw:UAC2Gadget -f S32_LE -c 2 -r 48000 /dev/null
      Recording WAVE '/dev/null' : Signed 32 bit Little Endian, Rate 48000 Hz, Stereo
      ^Z[1]+  Stopped                    arecord -D hw:UAC2Gadget -f S32_LE -c 2 -r 48000 /dev/null
      # echo gadget.0 > /sys/bus/gadget/drivers/configfs-gadget/unbind
      (observe that the unbind command never finishes)
    
    Fix the problem by using snd_card_free_when_closed() instead, which will
    still disconnect the card as desired, but defer the task of freeing the
    resources to the core once userspace closes its file descriptor.
    
    Fixes: 132fcb460839 ("usb: gadget: Add Audio Class 2.0 Driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Alvin Šipraga <alsi@bang-olufsen.dk>
    Reviewed-by: Ruslan Bilovol <ruslan.bilovol@gmail.com>
    Reviewed-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20230302163648.3349669-1-alvin@pqrs.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f01027c51eb16145e8e07fafea3ca07ef102d06
Author: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date:   Thu Mar 16 09:41:27 2023 +0100

    usb: dwc2: fix a devres leak in hw_enable upon suspend resume
    
    commit f747313249b74f323ddf841a9c8db14d989f296a upstream.
    
    Each time the platform goes to low power, PM suspend / resume routines
    call: __dwc2_lowlevel_hw_enable -> devm_add_action_or_reset().
    This adds a new devres each time.
    This may also happen at runtime, as dwc2_lowlevel_hw_enable() can be
    called from udc_start().
    
    This can be seen with tracing:
    - echo 1 > /sys/kernel/debug/tracing/events/dev/devres_log/enable
    - go to low power
    - cat /sys/kernel/debug/tracing/trace
    
    A new "ADD" entry is found upon each low power cycle:
    ... devres_log: 49000000.usb-otg ADD 82a13bba devm_action_release (8 bytes)
    ... devres_log: 49000000.usb-otg ADD 49889daf devm_action_release (8 bytes)
    ...
    
    A second issue is addressed here:
    - regulator_bulk_enable() is called upon each PM cycle (suspend/resume).
    - regulator_bulk_disable() never gets called.
    
    So the reference count for these regulators constantly increase, by one
    upon each low power cycle, due to missing regulator_bulk_disable() call
    in __dwc2_lowlevel_hw_disable().
    
    The original fix that introduced the devm_add_action_or_reset() call,
    fixed an issue during probe, that happens due to other errors in
    dwc2_driver_probe() -> dwc2_core_reset(). Then the probe fails without
    disabling regulators, when dr_mode == USB_DR_MODE_PERIPHERAL.
    
    Rather fix the error path: disable all the low level hardware in the
    error path, by using the "hsotg->ll_hw_enabled" flag. Checking dr_mode
    has been introduced to avoid a dual call to dwc2_lowlevel_hw_disable().
    "ll_hw_enabled" should achieve the same (and is used currently in the
    remove() routine).
    
    Fixes: 54c196060510 ("usb: dwc2: Always disable regulators on driver teardown")
    Fixes: 33a06f1300a7 ("usb: dwc2: Fix error path in gadget registration")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Link: https://lore.kernel.org/r/20230316084127.126084-1-fabrice.gasnier@foss.st.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dce128421554c7ad7c1f25a972b49c355ac2199e
Author: Joel Selvaraj <joelselvaraj.oss@gmail.com>
Date:   Sun Mar 12 23:14:02 2023 -0500

    scsi: core: Add BLIST_SKIP_VPD_PAGES for SKhynix H28U74301AMR
    
    commit a204b490595de71016b2360a1886ec8c12d0afac upstream.
    
    Xiaomi Poco F1 (qcom/sdm845-xiaomi-beryllium*.dts) comes with a SKhynix
    H28U74301AMR UFS. The sd_read_cpr() operation leads to a 120 second
    timeout, making the device bootup very slow:
    
    [  121.457736] sd 0:0:0:1: [sdb] tag#23 timing out command, waited 120s
    
    Setting the BLIST_SKIP_VPD_PAGES allows the device to skip the failing
    sd_read_cpr operation and boot normally.
    
    Signed-off-by: Joel Selvaraj <joelselvaraj.oss@gmail.com>
    Link: https://lore.kernel.org/r/20230313041402.39330-1-joelselvaraj.oss@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7a4ce3514262777f1a43b793d5a7daf24d517bc
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Thu Mar 9 13:23:29 2023 +0000

    cifs: empty interface list when server doesn't support query interfaces
    
    commit 896cd316b841053f6df95ab77b5f1322c16a8e18 upstream.
    
    When querying server interfaces returns -EOPNOTSUPP,
    clear the list of interfaces. Assumption is that multichannel
    would be disabled too.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8beb18c25beff12f27ffeb78f4e1de31a0e7cad0
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Mar 6 01:20:30 2023 +0000

    sh: sanitize the flags on sigreturn
    
    [ Upstream commit 573b22ccb7ce9ab7f0539a2e11a9d3609a8783f5 ]
    
    We fetch %SR value from sigframe; it might have been modified by signal
    handler, so we can't trust it with any bits that are not modifiable in
    user mode.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Rich Felker <dalias@libc.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87e800e3dc77e3a2b48f105e97bb75f864c65b71
Author: Enrico Sau <enrico.sau@gmail.com>
Date:   Mon Mar 6 13:05:28 2023 +0100

    net: usb: qmi_wwan: add Telit 0x1080 composition
    
    [ Upstream commit 382e363d5bed0cec5807b35761d14e55955eee63 ]
    
    Add the following Telit FE990 composition:
    
    0x1080: tty, adb, rmnet, tty, tty, tty, tty
    
    Signed-off-by: Enrico Sau <enrico.sau@gmail.com>
    Link: https://lore.kernel.org/r/20230306120528.198842-1-enrico.sau@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27d4ce4aa3bbf02e839f812843d0c183ac20061d
Author: Enrico Sau <enrico.sau@gmail.com>
Date:   Mon Mar 6 12:59:33 2023 +0100

    net: usb: cdc_mbim: avoid altsetting toggling for Telit FE990
    
    [ Upstream commit 418383e6ed6b4624a54ec05c535f13d184fbf33b ]
    
    Add quirk CDC_MBIM_FLAG_AVOID_ALTSETTING_TOGGLE for Telit FE990
    0x1081 composition in order to avoid bind error.
    
    Signed-off-by: Enrico Sau <enrico.sau@gmail.com>
    Link: https://lore.kernel.org/r/20230306115933.198259-1-enrico.sau@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddfc061793385d7342997c6868a5c9638f1550c8
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Mon Feb 27 08:48:34 2023 -0800

    scsi: storvsc: Handle BlockSize change in Hyper-V VHD/VHDX file
    
    [ Upstream commit 11d9874c4204a785f43d899a1ab12f9dc8d9de3e ]
    
    Hyper-V uses a VHD or VHDX file on the host as the underlying storage for a
    virtual disk.  The VHD/VHDX file format is a sparse format where real disk
    space on the host is assigned in chunks that the VHD/VHDX file format calls
    the BlockSize.  This BlockSize is not to be confused with the 512-byte (or
    4096-byte) sector size of the underlying storage device.  The default block
    size for a new VHD/VHDX file is 32 Mbytes.  When a guest VM touches any
    disk space within a 32 Mbyte chunk of the VHD/VHDX file, Hyper-V allocates
    32 Mbytes of real disk space for that section of the VHD/VHDX. Similarly,
    if a discard operation is done that covers an entire 32 Mbyte chunk,
    Hyper-V will free the real disk space for that portion of the VHD/VHDX.
    This BlockSize is surfaced in Linux as the "discard_granularity" in
    /sys/block/sd<x>/queue, which makes sense.
    
    Hyper-V also has differencing disks that can overlay a VHD/VHDX file to
    capture changes to the VHD/VHDX while preserving the original VHD/VHDX.
    One example of this differencing functionality is for VM snapshots.  When a
    snapshot is created, a differencing disk is created.  If the snapshot is
    rolled back, Hyper-V can just delete the differencing disk, and the VM will
    see the original disk contents at the time the snapshot was taken.
    Differencing disks are used in other scenarios as well.
    
    The BlockSize for a differencing disk defaults to 2 Mbytes, not 32 Mbytes.
    The smaller default is used because changes to differencing disks are
    typically scattered all over, and Hyper-V doesn't want to allocate 32
    Mbytes of real disk space for a stray write here or there.  The smaller
    BlockSize provides more efficient use of real disk space.
    
    When a differencing disk is added to a VHD/VHDX, Hyper-V reports
    UNIT_ATTENTION with a sense code indicating "Operating parameters have
    changed", because the value of discard_granularity should be changed to 2
    Mbytes. When the differencing disk is removed, discard_granularity should
    be changed back to 32 Mbytes.  However, current code simply reports a
    message from scsi_report_sense() and the value of
    /sys/block/sd<x>/queue/discard_granularity is not updated. The message
    isn't very actionable by a sysadmin.
    
    Fix this by having the storvsc driver check for the sense code indicating
    that the underly VHD/VHDX block size has changed, and do a rescan of the
    device to pick up the new discard_granularity.  With this change the entire
    transition to/from differencing disks is handled automatically and
    transparently, with no confusing messages being output.
    
    Link: https://lore.kernel.org/r/1677516514-86060-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e0a423a55a75a27537084ab9b2edae32b3df2b8
Author: Jakob Koschel <jkl820.git@gmail.com>
Date:   Wed Mar 1 18:19:14 2023 +0100

    scsi: lpfc: Avoid usage of list iterator variable after loop
    
    [ Upstream commit 2850b23e9f9ae3696e472d2883ea1b43aafa884e ]
    
    If the &epd_pool->list is empty when executing
    lpfc_get_io_buf_from_expedite_pool() the function would return an invalid
    pointer. Even in the case if the list is guaranteed to be populated, the
    iterator variable should not be used after the loop to be more robust for
    future changes.
    
    Linus proposed to avoid any use of the list iterator variable after the
    loop, in the attempt to move the list iterator variable declaration into
    the macro to avoid any potential misuse after the loop [1].
    
    Link: https://lore.kernel.org/all/CAHk-=wgRr_D8CB-D9Kg-c=EHreAsk5SqXPwr9Y7k9sA6cWXJ6w@mail.gmail.com/ [1]
    Signed-off-by: Jakob Koschel <jkl820.git@gmail.com>
    Link: https://lore.kernel.org/r/20230301-scsi-lpfc-avoid-list-iterator-after-loop-v1-1-325578ae7561@gmail.com
    Reviewed-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9a937f75ba2faf41b5acb1603f5ccf3c64b1e82
Author: Adrien Thierry <athierry@redhat.com>
Date:   Mon Feb 20 09:07:40 2023 -0500

    scsi: ufs: core: Add soft dependency on governor_simpleondemand
    
    [ Upstream commit 2ebe16155dc8bd4e602cad5b5f65458d2eaa1a75 ]
    
    The ufshcd driver uses simpleondemand governor for devfreq. Add it to the
    list of ufshcd softdeps to allow userspace initramfs tools like dracut to
    automatically pull the governor module into the initramfs together with UFS
    drivers.
    
    Link: https://lore.kernel.org/r/20230220140740.14379-1-athierry@redhat.com
    Signed-off-by: Adrien Thierry <athierry@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 522314863f7820f49ea80a8fb9d9e5526a578d9a
Author: Kang Chen <void0red@gmail.com>
Date:   Mon Feb 27 11:10:30 2023 +0800

    scsi: hisi_sas: Check devm_add_action() return value
    
    [ Upstream commit 06d1a90de60208054cca15ef200138cfdbb642a9 ]
    
    In case devm_add_action() fails, check it in the caller of
    interrupt_preinit_v3_hw().
    
    Link: https://lore.kernel.org/r/20230227031030.893324-1-void0red@gmail.com
    Signed-off-by: Kang Chen <void0red@gmail.com>
    Acked-by: Xiang Chen <chenxiang66@hisilicon.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 799d29a447dc2461a537fc8edeb44f9cfd630936
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Tue Feb 14 15:15:56 2023 +0100

    scsi: target: iscsi: Fix an error message in iscsi_check_key()
    
    [ Upstream commit 6cc55c969b7ce8d85e09a636693d4126c3676c11 ]
    
    The first half of the error message is printed by pr_err(), the second half
    is printed by pr_debug(). The user will therefore see only the first part
    of the message and will miss some useful information.
    
    Link: https://lore.kernel.org/r/20230214141556.762047-1-mlombard@redhat.com
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c42442887db59ac4b67aeaf8825d1192bc783d6
Author: Lorenz Bauer <lorenz.bauer@isovalent.com>
Date:   Mon Mar 6 11:21:38 2023 +0000

    selftests/bpf: check that modifier resolves after pointer
    
    [ Upstream commit dfdd608c3b365f0fd49d7e13911ebcde06b9865b ]
    
    Add a regression test that ensures that a VAR pointing at a
    modifier which follows a PTR (or STRUCT or ARRAY) is resolved
    correctly by the datasec validator.
    
    Signed-off-by: Lorenz Bauer <lmb@isovalent.com>
    Link: https://lore.kernel.org/r/20230306112138.155352-3-lmb@isovalent.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df1da53a7e98f0b2a0eb2241c154f148f2f2c1d8
Author: Michael Schmitz <schmitzmic@gmail.com>
Date:   Wed Mar 1 15:11:07 2023 +1300

    m68k: Only force 030 bus error if PC not in exception table
    
    [ Upstream commit e36a82bebbf7da814530d5a179bef9df5934b717 ]
    
    __get_kernel_nofault() does copy data in supervisor mode when
    forcing a task backtrace log through /proc/sysrq_trigger.
    This is expected cause a bus error exception on e.g. NULL
    pointer dereferencing when logging a kernel task has no
    workqueue associated. This bus error ought to be ignored.
    
    Our 030 bus error handler is ill equipped to deal with this:
    
    Whenever ssw indicates a kernel mode access on a data fault,
    we don't even attempt to handle the fault and instead always
    send a SEGV signal (or panic). As a result, the check
    for exception handling at the fault PC (buried in
    send_sig_fault() which gets called from do_page_fault()
    eventually) is never used.
    
    In contrast, both 040 and 060 access error handlers do not
    care whether a fault happened on supervisor mode access,
    and will call do_page_fault() on those, ultimately honoring
    the exception table.
    
    Add a check in bus_error030 to call do_page_fault() in case
    we do have an entry for the fault PC in our exception table.
    
    I had attempted a fix for this earlier in 2019 that did rely
    on testing pagefault_disabled() (see link below) to achieve
    the same thing, but this patch should be more generic.
    
    Tested on 030 Atari Falcon.
    
    Reported-by: Eero Tamminen <oak@helsinkinet.fi>
    Link: https://lore.kernel.org/r/alpine.LNX.2.21.1904091023540.25@nippy.intranet
    Link: https://lore.kernel.org/r/63130691-1984-c423-c1f2-73bfd8d3dcd3@gmail.com
    Signed-off-by: Michael Schmitz <schmitzmic@gmail.com>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/20230301021107.26307-1-schmitzmic@gmail.com
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7df72bedbdd1d02bb216e1f6eca0a16900238c4e
Author: Alexander Aring <aahringo@redhat.com>
Date:   Thu Feb 16 23:25:04 2023 -0500

    ca8210: fix mac_len negative array access
    
    [ Upstream commit 6c993779ea1d0cccdb3a5d7d45446dd229e610a3 ]
    
    This patch fixes a buffer overflow access of skb->data if
    ieee802154_hdr_peek_addrs() fails.
    
    Reported-by: lianhui tang <bluetlh@gmail.com>
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20230217042504.3303396-1-aahringo@redhat.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d8fafc5308f7657f93b9514556960936c79917c
Author: Danny Kaehn <kaehndan@gmail.com>
Date:   Fri Feb 10 11:00:44 2023 -0600

    HID: cp2112: Fix driver not registering GPIO IRQ chip as threaded
    
    [ Upstream commit 37f5b858a66543b2b67c0288280af623985abc29 ]
    
    The CP2112 generates interrupts from a polling routine on a thread,
    and can only support threaded interrupts. This patch configures the
    gpiochip irq chip with this flag, disallowing consumers to request
    a hard IRQ from this driver, which resulted in a segfault previously.
    
    Signed-off-by: Danny Kaehn <kaehndan@gmail.com>
    Link: https://lore.kernel.org/r/20230210170044.11835-1-kaehndan@gmail.com
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 082b8240a66af84dd837e48751689e9176feb146
Author: Alexandre Ghiti <alex@ghiti.fr>
Date:   Tue Mar 16 15:34:20 2021 -0400

    riscv: Bump COMMAND_LINE_SIZE value to 1024
    
    [ Upstream commit 61fc1ee8be26bc192d691932b0a67eabee45d12f ]
    
    Increase COMMAND_LINE_SIZE as the current default value is too low
    for syzbot kernel command line.
    
    There has been considerable discussion on this patch that has led to a
    larger patch set removing COMMAND_LINE_SIZE from the uapi headers on all
    ports.  That's not quite done yet, but it's gotten far enough we're
    confident this is not a uABI change so this is safe.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Alexandre Ghiti <alex@ghiti.fr>
    Link: https://lore.kernel.org/r/20210316193420.904-1-alex@ghiti.fr
    [Palmer: it's not uabi]
    Link: https://lore.kernel.org/linux-riscv/874b8076-b0d1-4aaa-bcd8-05d523060152@app.fastmail.com/#t
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d6c2dee59a396b22fff6d708db4b167281e78c2
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Mar 10 11:20:49 2023 -0600

    thunderbolt: Use const qualifier for `ring_interrupt_index`
    
    commit 1716efdb07938bd6510e1127d02012799112c433 upstream.
    
    `ring_interrupt_index` doesn't change the data for `ring` so mark it as
    const. This is needed by the following patch that disables interrupt
    auto clear for rings.
    
    Cc: Sanju Mehta <Sanju.Mehta@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06e04b450bb49f34d859f49c50d6609dd2008f2f
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Dec 27 11:55:26 2022 +0200

    thunderbolt: Use scale field when allocating USB3 bandwidth
    
    commit c82510b1d87bdebfe916048857d2ef46f1778aa5 upstream.
    
    When tunneling aggregated USB3 (20 Gb/s) the bandwidth values that are
    programmed to the ADP_USB3_CS_2 go higher than 4096 and that does not
    fit anymore to the 12-bit field. Fix this by scaling the value using
    the scale field accordingly.
    
    Fixes: 3b1d8d577ca8 ("thunderbolt: Implement USB3 bandwidth negotiation routines")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32fa53c27ea36b62e4444e7e859a5d03f6189d9e
Author: Yaroslav Furman <yaro330@gmail.com>
Date:   Sun Mar 12 11:07:45 2023 +0200

    uas: Add US_FL_NO_REPORT_OPCODES for JMicron JMS583Gen 2
    
    commit a37eb61b6ec064ac794b8a1e89fd33eb582fe51d upstream.
    
    Just like other JMicron JMS5xx enclosures, it chokes on report-opcodes,
    let's avoid them.
    
    Signed-off-by: Yaroslav Furman <yaro330@gmail.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230312090745.47962-1-yaro330@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 231cfa78ec5badd84a1a2b09465bfad1a926aba1
Author: Nilesh Javali <njavali@marvell.com>
Date:   Sun Mar 12 21:37:10 2023 -0700

    scsi: qla2xxx: Perform lockless command completion in abort path
    
    commit 0367076b0817d5c75dfb83001ce7ce5c64d803a9 upstream.
    
    While adding and removing the controller, the following call trace was
    observed:
    
    WARNING: CPU: 3 PID: 623596 at kernel/dma/mapping.c:532 dma_free_attrs+0x33/0x50
    CPU: 3 PID: 623596 Comm: sh Kdump: loaded Not tainted 5.14.0-96.el9.x86_64 #1
    RIP: 0010:dma_free_attrs+0x33/0x50
    
    Call Trace:
       qla2x00_async_sns_sp_done+0x107/0x1b0 [qla2xxx]
       qla2x00_abort_srb+0x8e/0x250 [qla2xxx]
       ? ql_dbg+0x70/0x100 [qla2xxx]
       __qla2x00_abort_all_cmds+0x108/0x190 [qla2xxx]
       qla2x00_abort_all_cmds+0x24/0x70 [qla2xxx]
       qla2x00_abort_isp_cleanup+0x305/0x3e0 [qla2xxx]
       qla2x00_remove_one+0x364/0x400 [qla2xxx]
       pci_device_remove+0x36/0xa0
       __device_release_driver+0x17a/0x230
       device_release_driver+0x24/0x30
       pci_stop_bus_device+0x68/0x90
       pci_stop_and_remove_bus_device_locked+0x16/0x30
       remove_store+0x75/0x90
       kernfs_fop_write_iter+0x11c/0x1b0
       new_sync_write+0x11f/0x1b0
       vfs_write+0x1eb/0x280
       ksys_write+0x5f/0xe0
       do_syscall_64+0x5c/0x80
       ? do_user_addr_fault+0x1d8/0x680
       ? do_syscall_64+0x69/0x80
       ? exc_page_fault+0x62/0x140
       ? asm_exc_page_fault+0x8/0x30
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The command was completed in the abort path during driver unload with a
    lock held, causing the warning in abort path. Hence complete the command
    without any lock held.
    
    Reported-by: Lin Li <lilin@redhat.com>
    Tested-by: Lin Li <lilin@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Link: https://lore.kernel.org/r/20230313043711.13500-2-njavali@marvell.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: John Meneghini <jmeneghi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f73a88df19b7997829fd05ae9bbc62f86541d789
Author: Frank Crawford <frank@crawford.emu.id.au>
Date:   Sat Mar 18 19:05:42 2023 +1100

    hwmon (it87): Fix voltage scaling for chips with 10.9mV ADCs
    
    [ Upstream commit 968b66ffeb7956acc72836a7797aeb7b2444ec51 ]
    
    Fix voltage scaling for chips that have 10.9mV ADCs, where scaling was
    not performed.
    
    Fixes: ead8080351c9 ("hwmon: (it87) Add support for IT8732F")
    Signed-off-by: Frank Crawford <frank@crawford.emu.id.au>
    Link: https://lore.kernel.org/r/20230318080543.1226700-2-frank@crawford.emu.id.au
    [groeck: Update subject and description to focus on bug fix]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33c2fa39fb9e7b3346e53fba055d5cacf9af6dce
Author: Phinex Hung <phinex@realtek.com>
Date:   Tue Mar 21 14:02:23 2023 +0800

    hwmon: fix potential sensor registration fail if of_node is missing
    
    [ Upstream commit 2315332efcbe7124252f080e03b57d3d2f1f4771 ]
    
    It is not sufficient to check of_node in current device.
    In some cases, this would cause the sensor registration to fail.
    
    This patch looks for device's ancestors to find a valid of_node if any.
    
    Fixes: d560168b5d0f ("hwmon: (core) New hwmon registration API")
    Signed-off-by: Phinex Hung <phinex@realtek.com>
    Link: https://lore.kernel.org/r/20230321060224.3819-1-phinex@realtek.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f86ff88a1548ccf5a13960c0e7625ca787ea0993
Author: Tzung-Bi Shih <tzungbi@kernel.org>
Date:   Fri Mar 24 09:06:58 2023 +0800

    platform/chrome: cros_ec_chardev: fix kernel data leak from ioctl
    
    [ Upstream commit b20cf3f89c56b5f6a38b7f76a8128bf9f291bbd3 ]
    
    It is possible to peep kernel page's data by providing larger `insize`
    in struct cros_ec_command[1] when invoking EC host commands.
    
    Fix it by using zeroed memory.
    
    [1]: https://elixir.bootlin.com/linux/v6.2/source/include/linux/platform_data/cros_ec_proto.h#L74
    
    Fixes: eda2e30c6684 ("mfd / platform: cros_ec: Miscellaneous character device to talk with the EC")
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Link: https://lore.kernel.org/r/20230324010658.1082361-1-tzungbi@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da3d3fdfb4d523c5da30e35a8dd90e04f0fd8962
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Thu Mar 9 16:07:39 2023 +0800

    Bluetooth: btsdio: fix use after free bug in btsdio_remove due to unfinished work
    
    [ Upstream commit 1e9ac114c4428fdb7ff4635b45d4f46017e8916f ]
    
    In btsdio_probe, &data->work was bound with btsdio_work.In
    btsdio_send_frame, it was started by schedule_work.
    
    If we call btsdio_remove with an unfinished job, there may
    be a race condition and cause UAF bug on hdev.
    
    Fixes: ddbaf13e3609 ("[Bluetooth] Add generic driver for Bluetooth SDIO devices")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fce0e47e9ec5afa6123ca403bf2112dae59a9b84
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Wed Mar 8 14:20:34 2023 -0800

    Bluetooth: L2CAP: Fix responding with wrong PDU type
    
    [ Upstream commit 9aa9d9473f1550d1936c31259720b3f1f4690576 ]
    
    L2CAP_ECRED_CONN_REQ shall be responded with L2CAP_ECRED_CONN_RSP not
    L2CAP_LE_CONN_RSP:
    
    L2CAP LE EATT Server - Reject - run
      Listening for connections
      New client connection with handle 0x002a
      Sending L2CAP Request from client
      Client received response code 0x15
      Unexpected L2CAP response code (expected 0x18)
    L2CAP LE EATT Server - Reject - test failed
    
    > ACL Data RX: Handle 42 flags 0x02 dlen 26
          LE L2CAP: Enhanced Credit Connection Request (0x17) ident 1 len 18
            PSM: 39 (0x0027)
            MTU: 64
            MPS: 64
            Credits: 5
            Source CID: 65
            Source CID: 66
            Source CID: 67
            Source CID: 68
            Source CID: 69
    < ACL Data TX: Handle 42 flags 0x00 dlen 16
          LE L2CAP: LE Connection Response (0x15) ident 1 len 8
            invalid size
            00 00 00 00 00 00 06 00
    
    L2CAP LE EATT Server - Reject - run
      Listening for connections
      New client connection with handle 0x002a
      Sending L2CAP Request from client
      Client received response code 0x18
    L2CAP LE EATT Server - Reject - test passed
    
    Fixes: 15f02b910562 ("Bluetooth: L2CAP: Add initial code for Enhanced Credit Based Mode")
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77a61df0a0e6cf9495b5524e65ffb32e06000871
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Mar 15 13:04:37 2021 -0700

    Bluetooth: L2CAP: Fix not checking for maximum number of DCID
    
    [ Upstream commit 7cf3b1dd6aa603fd80969e9e7160becf1455a0eb ]
    
    When receiving L2CAP_CREDIT_BASED_CONNECTION_REQ the remote may request
    more channels than allowed by the spec (10 octecs = 5 CIDs) so this
    checks if the number of channels is bigger than the maximum allowed and
    respond with an error.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Stable-dep-of: 9aa9d9473f15 ("Bluetooth: L2CAP: Fix responding with wrong PDU type")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65ceb170749b65292bb70406c74cd6dd6afcc013
Author: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
Date:   Wed Mar 8 14:31:55 2023 +0100

    Bluetooth: btqcomsmd: Fix command timeout after setting BD address
    
    [ Upstream commit 5d44ab9e204200a78ad55cdf185aa2bb109b5950 ]
    
    On most devices using the btqcomsmd driver (e.g. the DragonBoard 410c
    and other devices based on the Qualcomm MSM8916/MSM8909/... SoCs)
    the Bluetooth firmware seems to become unresponsive for a while after
    setting the BD address. On recent kernel versions (at least 5.17+)
    this often causes timeouts for subsequent commands, e.g. the HCI reset
    sent by the Bluetooth core during initialization:
    
        Bluetooth: hci0: Opcode 0x c03 failed: -110
    
    Unfortunately this behavior does not seem to be documented anywhere.
    Experimentation suggests that the minimum necessary delay to avoid
    the problem is ~150us. However, to be sure add a sleep for > 1ms
    in case it is a bit longer on other firmware versions.
    
    Older kernel versions are likely also affected, although perhaps with
    slightly different errors or less probability. Side effects can easily
    hide the issue in most cases, e.g. unrelated incoming interrupts that
    cause the necessary delay.
    
    Fixes: 1511cc750c3d ("Bluetooth: Introduce Qualcomm WCNSS SMD based HCI driver")
    Signed-off-by: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7aa3d03e1b308b4e8d640d11f516741bc4e81c99
Author: Liang He <windhl@126.com>
Date:   Wed Mar 22 14:20:57 2023 +0800

    net: mdio: thunder: Add missing fwnode_handle_put()
    
    [ Upstream commit b1de5c78ebe9858ccec9d49af2f76724f1d47e3e ]
    
    In device_for_each_child_node(), we should add fwnode_handle_put()
    when break out of the iteration device_for_each_child_node()
    as it will automatically increase and decrease the refcounter.
    
    Fixes: 379d7ac7ca31 ("phy: mdio-thunder: Add driver for Cavium Thunder SoC MDIO buses.")
    Signed-off-by: Liang He <windhl@126.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94ef1715d263ba3b19c55effc22e890af6bd262b
Author: Joshua Washington <joshwash@google.com>
Date:   Tue Mar 21 10:23:32 2023 -0700

    gve: Cache link_speed value from device
    
    [ Upstream commit 68c3e4fc8628b1487c965aabb29207249657eb5f ]
    
    The link speed is never changed for the uptime of a VM, and the current
    implementation sends an admin queue command for each call. Admin queue
    command invocations have nontrivial overhead (e.g., VM exits), which can
    be disruptive to users if triggered frequently. Our telemetry data shows
    that there are VMs that make frequent calls to this admin queue command.
    Caching the result of the original admin queue command would eliminate
    the need to send multiple admin queue commands on subsequent calls to
    retrieve link speed.
    
    Fixes: 7e074d5a76ca ("gve: Enable Link Speed Reporting in the driver.")
    Signed-off-by: Joshua Washington <joshwash@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230321172332.91678-1-joshwash@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c72445dadc33fd5ab44b3987a8c59b62da6f3b1
Author: Caleb Sander <csander@purestorage.com>
Date:   Mon Mar 20 09:57:36 2023 -0600

    nvme-tcp: fix nvme_tcp_term_pdu to match spec
    
    [ Upstream commit aa01c67de5926fdb276793180564f172c55fb0d7 ]
    
    The FEI field of C2HTermReq/H2CTermReq is 4 bytes but not 4-byte-aligned
    in the NVMe/TCP specification (it is located at offset 10 in the PDU).
    Split it into two 16-bit integers in struct nvme_tcp_term_pdu
    so no padding is inserted. There should also be 10 reserved bytes after.
    There are currently no users of this type.
    
    Fixes: fc221d05447aa6db ("nvme-tcp: Add protocol header")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Caleb Sander <csander@purestorage.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73db80dcdc20aceda0c6251f6b1289d7ae297b0d
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Tue Mar 21 14:45:43 2023 +1100

    net/sonic: use dma_mapping_error() for error check
    
    [ Upstream commit 4107b8746d93ace135b8c4da4f19bbae81db785f ]
    
    The DMA address returned by dma_map_single() should be checked with
    dma_mapping_error(). Fix it accordingly.
    
    Fixes: efcce839360f ("[PATCH] macsonic/jazzsonic network drivers update")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@linux-m68k.org>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/6645a4b5c1e364312103f48b7b36783b94e197a2.1679370343.git.fthain@linux-m68k.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8cec30541f5c5cc218e9a32138d45d227727f2f
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 20 16:34:27 2023 +0000

    erspan: do not use skb_mac_header() in ndo_start_xmit()
    
    [ Upstream commit 8e50ed774554f93d55426039b27b1e38d7fa64d8 ]
    
    Drivers should not assume skb_mac_header(skb) == skb->data in their
    ndo_start_xmit().
    
    Use skb_network_offset() and skb_transport_offset() which
    better describe what is needed in erspan_fb_xmit() and
    ip6erspan_tunnel_xmit()
    
    syzbot reported:
    WARNING: CPU: 0 PID: 5083 at include/linux/skbuff.h:2873 skb_mac_header include/linux/skbuff.h:2873 [inline]
    WARNING: CPU: 0 PID: 5083 at include/linux/skbuff.h:2873 ip6erspan_tunnel_xmit+0x1d9c/0x2d90 net/ipv6/ip6_gre.c:962
    Modules linked in:
    CPU: 0 PID: 5083 Comm: syz-executor406 Not tainted 6.3.0-rc2-syzkaller-00866-gd4671cb96fa3 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/02/2023
    RIP: 0010:skb_mac_header include/linux/skbuff.h:2873 [inline]
    RIP: 0010:ip6erspan_tunnel_xmit+0x1d9c/0x2d90 net/ipv6/ip6_gre.c:962
    Code: 04 02 41 01 de 84 c0 74 08 3c 03 0f 8e 1c 0a 00 00 45 89 b4 24 c8 00 00 00 c6 85 77 fe ff ff 01 e9 33 e7 ff ff e8 b4 27 a1 f8 <0f> 0b e9 b6 e7 ff ff e8 a8 27 a1 f8 49 8d bf f0 0c 00 00 48 b8 00
    RSP: 0018:ffffc90003b2f830 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: 000000000000ffff RCX: 0000000000000000
    RDX: ffff888021273a80 RSI: ffffffff88e1bd4c RDI: 0000000000000003
    RBP: ffffc90003b2f9d8 R08: 0000000000000003 R09: 000000000000ffff
    R10: 000000000000ffff R11: 0000000000000000 R12: ffff88802b28da00
    R13: 00000000000000d0 R14: ffff88807e25b6d0 R15: ffff888023408000
    FS: 0000555556a61300(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000055e5b11eb6e8 CR3: 0000000027c1b000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    __netdev_start_xmit include/linux/netdevice.h:4900 [inline]
    netdev_start_xmit include/linux/netdevice.h:4914 [inline]
    __dev_direct_xmit+0x504/0x730 net/core/dev.c:4300
    dev_direct_xmit include/linux/netdevice.h:3088 [inline]
    packet_xmit+0x20a/0x390 net/packet/af_packet.c:285
    packet_snd net/packet/af_packet.c:3075 [inline]
    packet_sendmsg+0x31a0/0x5150 net/packet/af_packet.c:3107
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg+0xde/0x190 net/socket.c:747
    __sys_sendto+0x23a/0x340 net/socket.c:2142
    __do_sys_sendto net/socket.c:2154 [inline]
    __se_sys_sendto net/socket.c:2150 [inline]
    __x64_sys_sendto+0xe1/0x1b0 net/socket.c:2150
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f123aaa1039
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 b1 14 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffc15d12058 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f123aaa1039
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 0000000020000040 R09: 0000000000000014
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f123aa648c0
    R13: 431bde82d7b634db R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: 1baf5ebf8954 ("erspan: auto detect truncated packets.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230320163427.8096-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19aa85b9df487801bfb2d14281797d72d1830e6f
Author: Li Zetao <lizetao1@huawei.com>
Date:   Mon Mar 20 14:33:18 2023 +0000

    atm: idt77252: fix kmemleak when rmmod idt77252
    
    [ Upstream commit 4fe3c88552a3fbe1944426a4506a18cdeb457b5a ]
    
    There are memory leaks reported by kmemleak:
    
      unreferenced object 0xffff888106500800 (size 128):
        comm "modprobe", pid 1017, jiffies 4297787785 (age 67.152s)
        hex dump (first 32 bytes):
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<00000000970ce626>] __kmem_cache_alloc_node+0x20c/0x380
          [<00000000fb5f78d9>] kmalloc_trace+0x2f/0xb0
          [<000000000e947e2a>] idt77252_init_one+0x2847/0x3c90 [idt77252]
          [<000000006efb048e>] local_pci_probe+0xeb/0x1a0
        ...
    
      unreferenced object 0xffff888106500b00 (size 128):
        comm "modprobe", pid 1017, jiffies 4297787785 (age 67.152s)
        hex dump (first 32 bytes):
          00 20 3d 01 80 88 ff ff 00 20 3d 01 80 88 ff ff  . =...... =.....
          f0 23 3d 01 80 88 ff ff 00 20 3d 01 00 00 00 00  .#=...... =.....
        backtrace:
          [<00000000970ce626>] __kmem_cache_alloc_node+0x20c/0x380
          [<00000000fb5f78d9>] kmalloc_trace+0x2f/0xb0
          [<00000000f451c5be>] alloc_scq.constprop.0+0x4a/0x400 [idt77252]
          [<00000000e6313849>] idt77252_init_one+0x28cf/0x3c90 [idt77252]
    
    The root cause is traced to the vc_maps which alloced in open_card_oam()
    are not freed in close_card_oam(). The vc_maps are used to record
    open connections, so when close a vc_map in close_card_oam(), the memory
    should be freed. Moreover, the ubr0 is not closed when close a idt77252
    device, leading to the memory leak of vc_map and scq_info.
    
    Fix them by adding kfree in close_card_oam() and implementing new
    close_card_ubr0() to close ubr0.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Francois Romieu <romieu@fr.zoreil.com>
    Link: https://lore.kernel.org/r/20230320143318.2644630-1-lizetao1@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eadc80328298ef7beaaf0cd96791667d3b485ca
Author: Dan Carpenter <error27@gmail.com>
Date:   Mon Feb 27 14:16:10 2023 +0300

    net/mlx5: E-Switch, Fix an Oops in error handling code
    
    [ Upstream commit 640fcdbcf27fc62de9223f958ceb4e897a00e791 ]
    
    The error handling dereferences "vport".  There is nothing we can do if
    it is an error pointer except returning the error code.
    
    Fixes: 133dcfc577ea ("net/mlx5: E-Switch, Alloc and free unique metadata for match")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Reviewed-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 265101aea4c0939f4f916412d0c5469a088f2b7c
Author: Maher Sanalla <msanalla@nvidia.com>
Date:   Wed Mar 15 11:04:38 2023 +0200

    net/mlx5: Read the TC mapping of all priorities on ETS query
    
    [ Upstream commit 44d553188c38ac74b799dfdcebafef2f7bb70942 ]
    
    When ETS configurations are queried by the user to get the mapping
    assignment between packet priority and traffic class, only priorities up
    to maximum TCs are queried from QTCT register in FW to retrieve their
    assigned TC, leaving the rest of the priorities mapped to the default
    TC #0 which might be misleading.
    
    Fix by querying the TC mapping of all priorities on each ETS query,
    regardless of the maximum number of TCs configured in FW.
    
    Fixes: 820c2c5e773d ("net/mlx5e: Read ETS settings directly from firmware")
    Signed-off-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18cead61e437f4c7898acca0a5f3df12f801d97f
Author: Lama Kayal <lkayal@nvidia.com>
Date:   Tue Jan 31 14:07:03 2023 +0200

    net/mlx5: Fix steering rules cleanup
    
    [ Upstream commit 922f56e9a795d6f3dd72d3428ebdd7ee040fa855 ]
    
    vport's mc, uc and multicast rules are not deleted in teardown path when
    EEH happens. Since the vport's promisc settings(uc, mc and all) in
    firmware are reset after EEH, mlx5 driver will try to delete the above
    rules in the initialization path. This cause kernel crash because these
    software rules are no longer valid.
    
    Fix by nullifying these rules right after delete to avoid accessing any dangling
    pointers.
    
    Call Trace:
    __list_del_entry_valid+0xcc/0x100 (unreliable)
    tree_put_node+0xf4/0x1b0 [mlx5_core]
    tree_remove_node+0x30/0x70 [mlx5_core]
    mlx5_del_flow_rules+0x14c/0x1f0 [mlx5_core]
    esw_apply_vport_rx_mode+0x10c/0x200 [mlx5_core]
    esw_update_vport_rx_mode+0xb4/0x180 [mlx5_core]
    esw_vport_change_handle_locked+0x1ec/0x230 [mlx5_core]
    esw_enable_vport+0x130/0x260 [mlx5_core]
    mlx5_eswitch_enable_sriov+0x2a0/0x2f0 [mlx5_core]
    mlx5_device_enable_sriov+0x74/0x440 [mlx5_core]
    mlx5_load_one+0x114c/0x1550 [mlx5_core]
    mlx5_pci_resume+0x68/0xf0 [mlx5_core]
    eeh_report_resume+0x1a4/0x230
    eeh_pe_dev_traverse+0x98/0x170
    eeh_handle_normal_event+0x3e4/0x640
    eeh_handle_event+0x4c/0x370
    eeh_event_handler+0x14c/0x210
    kthread+0x168/0x1b0
    ret_from_kernel_thread+0x5c/0x84
    
    Fixes: a35f71f27a61 ("net/mlx5: E-Switch, Implement promiscuous rx modes vf request handling")
    Signed-off-by: Huy Nguyen <huyn@mellanox.com>
    Signed-off-by: Lama Kayal <lkayal@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4bbab27c4bf69486f5846d44134eb31c37e9b22
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Mar 20 15:37:25 2023 +0100

    bpf: Adjust insufficient default bpf_jit_limit
    
    [ Upstream commit 10ec8ca8ec1a2f04c4ed90897225231c58c124a7 ]
    
    We've seen recent AWS EKS (Kubernetes) user reports like the following:
    
      After upgrading EKS nodes from v20230203 to v20230217 on our 1.24 EKS
      clusters after a few days a number of the nodes have containers stuck
      in ContainerCreating state or liveness/readiness probes reporting the
      following error:
    
        Readiness probe errored: rpc error: code = Unknown desc = failed to
        exec in container: failed to start exec "4a11039f730203ffc003b7[...]":
        OCI runtime exec failed: exec failed: unable to start container process:
        unable to init seccomp: error loading seccomp filter into kernel:
        error loading seccomp filter: errno 524: unknown
    
      However, we had not been seeing this issue on previous AMIs and it only
      started to occur on v20230217 (following the upgrade from kernel 5.4 to
      5.10) with no other changes to the underlying cluster or workloads.
    
      We tried the suggestions from that issue (sysctl net.core.bpf_jit_limit=452534528)
      which helped to immediately allow containers to be created and probes to
      execute but after approximately a day the issue returned and the value
      returned by cat /proc/vmallocinfo | grep bpf_jit | awk '{s+=$2} END {print s}'
      was steadily increasing.
    
    I tested bpf tree to observe bpf_jit_charge_modmem, bpf_jit_uncharge_modmem
    their sizes passed in as well as bpf_jit_current under tcpdump BPF filter,
    seccomp BPF and native (e)BPF programs, and the behavior all looks sane
    and expected, that is nothing "leaking" from an upstream perspective.
    
    The bpf_jit_limit knob was originally added in order to avoid a situation
    where unprivileged applications loading BPF programs (e.g. seccomp BPF
    policies) consuming all the module memory space via BPF JIT such that loading
    of kernel modules would be prevented. The default limit was defined back in
    2018 and while good enough back then, we are generally seeing far more BPF
    consumers today.
    
    Adjust the limit for the BPF JIT pool from originally 1/4 to now 1/2 of the
    module memory space to better reflect today's needs and avoid more users
    running into potentially hard to debug issues.
    
    Fixes: fdadd04931c2 ("bpf: fix bpf_jit_limit knob for PAGE_SIZE >= 64K")
    Reported-by: Stephen Haynes <sh@synk.net>
    Reported-by: Lefteris Alexakis <lefteris.alexakis@kpn.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://github.com/awslabs/amazon-eks-ami/issues/1179
    Link: https://github.com/awslabs/amazon-eks-ami/issues/1219
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230320143725.8394-1-daniel@iogearbox.net
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a44e98abcca49e3d6af4f0c9b6fcfc0e98039d99
Author: David Howells <dhowells@redhat.com>
Date:   Tue Mar 14 15:15:18 2023 +0000

    keys: Do not cache key in task struct if key is requested from kernel thread
    
    [ Upstream commit 47f9e4c924025c5be87959d3335e66fcbb7f6b5c ]
    
    The key which gets cached in task structure from a kernel thread does not
    get invalidated even after expiry.  Due to which, a new key request from
    kernel thread will be served with the cached key if it's present in task
    struct irrespective of the key validity.  The change is to not cache key in
    task_struct when key requested from kernel thread so that kernel thread
    gets a valid key on every key request.
    
    The problem has been seen with the cifs module doing DNS lookups from a
    kernel thread and the results getting pinned by being attached to that
    kernel thread's cache - and thus not something that can be easily got rid
    of.  The cache would ordinarily be cleared by notify-resume, but kernel
    threads don't do that.
    
    This isn't seen with AFS because AFS is doing request_key() within the
    kernel half of a user thread - which will do notify-resume.
    
    Fixes: 7743c48e54ee ("keys: Cache result of request_key*() temporarily in task_struct")
    Signed-off-by: Bharath SM <bharathsm@microsoft.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    cc: Shyam Prasad N <nspmangalore@gmail.com>
    cc: Steve French <smfrench@gmail.com>
    cc: keyrings@vger.kernel.org
    cc: linux-cifs@vger.kernel.org
    cc: linux-fsdevel@vger.kernel.org
    Link: https://lore.kernel.org/r/CAGypqWw951d=zYRbdgNR4snUDvJhWL=q3=WOyh7HhSJupjz2vA@mail.gmail.com/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec23a669decaef2d9531b8c5e1f5d2ea5b85c55e
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Wed Mar 15 22:54:08 2023 +0900

    bootconfig: Fix testcase to increase max node
    
    [ Upstream commit b69245126a48e50882021180fa5d264dc7149ccc ]
    
    Since commit 6c40624930c5 ("bootconfig: Increase max nodes of bootconfig
    from 1024 to 8192 for DCC support") increased the max number of bootconfig
    node to 8192, the bootconfig testcase of the max number of nodes fails.
    To fix this issue, we can not simply increase the number in the test script
    because the test bootconfig file becomes too big (>32KB). To fix that, we
    can use a combination of three alphabets (26^3 = 17576). But with that,
    we can not express the 8193 (just one exceed from the limitation) because
    it also exceeds the max size of bootconfig. So, the first 26 nodes will just
    use one alphabet.
    
    With this fix, test-bootconfig.sh passes all tests.
    
    Link: https://lore.kernel.org/all/167888844790.791176.670805252426835131.stgit@devnote2/
    
    Reported-by: Heinz Wiesinger <pprkut@slackware.com>
    Link: https://lore.kernel.org/all/2463802.XAFRqVoOGU@amaterasu.liwjatan.org
    Fixes: 6c40624930c5 ("bootconfig: Increase max nodes of bootconfig from 1024 to 8192 for DCC support")
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56e0bc4a72a09761ce438c0b38f5263a51582660
Author: Geoff Levand <geoff@infradead.org>
Date:   Sat Mar 18 17:39:16 2023 +0000

    net/ps3_gelic_net: Use dma_mapping_error
    
    [ Upstream commit bebe933d35a63d4f042fbf4dce4f22e689ba0fcd ]
    
    The current Gelic Etherenet driver was checking the return value of its
    dma_map_single call, and not using the dma_mapping_error() routine.
    
    Fixes runtime problems like these:
    
      DMA-API: ps3_gelic_driver sb_05: device driver failed to check map error
      WARNING: CPU: 0 PID: 0 at kernel/dma/debug.c:1027 .check_unmap+0x888/0x8dc
    
    Fixes: 02c1889166b4 ("ps3: gigabit ethernet driver for PS3, take3")
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Geoff Levand <geoff@infradead.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d5a97283e2aa00687399afef2a19e310081e202
Author: Geoff Levand <geoff@infradead.org>
Date:   Sat Mar 18 17:39:16 2023 +0000

    net/ps3_gelic_net: Fix RX sk_buff length
    
    [ Upstream commit 19b3bb51c3bc288b3f2c6f8c4450b0f548320625 ]
    
    The Gelic Ethernet device needs to have the RX sk_buffs aligned to
    GELIC_NET_RXBUF_ALIGN, and also the length of the RX sk_buffs must
    be a multiple of GELIC_NET_RXBUF_ALIGN.
    
    The current Gelic Ethernet driver was not allocating sk_buffs large
    enough to allow for this alignment.
    
    Also, correct the maximum and minimum MTU sizes, and add a new
    preprocessor macro for the maximum frame size, GELIC_NET_MAX_FRAME.
    
    Fixes various randomly occurring runtime network errors.
    
    Fixes: 02c1889166b4 ("ps3: gigabit ethernet driver for PS3, take3")
    Signed-off-by: Geoff Levand <geoff@infradead.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb5879efde4f9b4de4248b835890df7b6c49ffbc
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Sat Mar 18 16:05:26 2023 +0800

    net: qcom/emac: Fix use after free bug in emac_remove due to race condition
    
    [ Upstream commit 6b6bc5b8bd2d4ca9e1efa9ae0f98a0b0687ace75 ]
    
    In emac_probe, &adpt->work_thread is bound with
    emac_work_thread. Then it will be started by timeout
    handler emac_tx_timeout or a IRQ handler emac_isr.
    
    If we remove the driver which will call emac_remove
      to make cleanup, there may be a unfinished work.
    
    The possible sequence is as follows:
    
    Fix it by finishing the work before cleanup in the emac_remove
    and disable timeout response.
    
    CPU0                  CPU1
    
                        |emac_work_thread
    emac_remove         |
    free_netdev         |
    kfree(netdev);      |
                        |emac_reinit_locked
                        |emac_mac_down
                        |//use netdev
    Fixes: b9b17debc69d ("net: emac: emac gigabit ethernet controller driver")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d04dac7fae7580dce0cd9b55db6e1ad4e8d26157
Author: Maxime Bizon <mbizon@freebox.fr>
Date:   Thu Mar 16 16:33:16 2023 -0700

    net: mdio: fix owner field for mdio buses registered using device-tree
    
    [ Upstream commit 99669259f3361d759219811e670b7e0742668556 ]
    
    Bus ownership is wrong when using of_mdiobus_register() to register an mdio
    bus. That function is not inline, so when it calls mdiobus_register() the wrong
    THIS_MODULE value is captured.
    
    Signed-off-by: Maxime Bizon <mbizon@freebox.fr>
    Fixes: 90eff9096c01 ("net: phy: Allow splitting MDIO bus/device support from PHYs")
    [florian: fix kdoc, added Fixes tag]
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b333766ea7a65ee779dd7b91ad3325d1526db7e
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Mar 16 13:33:24 2023 -0700

    net: phy: Ensure state transitions are processed from phy_stop()
    
    [ Upstream commit 4203d84032e28f893594a453bd8bc9c3b15c7334 ]
    
    In the phy_disconnect() -> phy_stop() path, we will be forcibly setting
    the PHY state machine to PHY_HALTED. This invalidates the old_state !=
    phydev->state condition in phy_state_machine() such that we will neither
    display the state change for debugging, nor will we invoke the
    link_change_notify() callback.
    
    Factor the code by introducing phy_process_state_change(), and ensure
    that we process the state change from phy_stop() as well.
    
    Fixes: 5c5f626bcace ("net: phy: improve handling link_change_notify callback")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfeeb3aaad4ee8eaaefe5d9edd9b2ccb5d9b7505
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Fri Mar 17 00:15:26 2023 +0800

    xirc2ps_cs: Fix use after free bug in xirc2ps_detach
    
    [ Upstream commit e8d20c3ded59a092532513c9bd030d1ea66f5f44 ]
    
    In xirc2ps_probe, the local->tx_timeout_task was bounded
    with xirc2ps_tx_timeout_task. When timeout occurs,
    it will call xirc_tx_timeout->schedule_work to start the
    work.
    
    When we call xirc2ps_detach to remove the driver, there
    may be a sequence as follows:
    
    Stop responding to timeout tasks and complete scheduled
    tasks before cleanup in xirc2ps_detach, which will fix
    the problem.
    
    CPU0                  CPU1
    
                        |xirc2ps_tx_timeout_task
    xirc2ps_detach      |
      free_netdev       |
        kfree(dev);     |
                        |
                        | do_reset
                        |   //use dev
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39c3b9dd481c3afce9439b29bafe00444cb4406b
Author: Daniil Tatianin <d-tatianin@yandex-team.ru>
Date:   Thu Mar 16 13:29:21 2023 +0300

    qed/qed_sriov: guard against NULL derefs from qed_iov_get_vf_info
    
    [ Upstream commit 25143b6a01d0cc5319edd3de22ffa2578b045550 ]
    
    We have to make sure that the info returned by the helper is valid
    before using it.
    
    Found by Linux Verification Center (linuxtesting.org) with the SVACE
    static analysis tool.
    
    Fixes: f990c82c385b ("qed*: Add support for ndo_set_vf_trust")
    Fixes: 733def6a04bf ("qed*: IOV link control")
    Signed-off-by: Daniil Tatianin <d-tatianin@yandex-team.ru>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33d1603a38e05886c538129ddfe00bd52d347e7b
Author: Szymon Heidrich <szymon.heidrich@gmail.com>
Date:   Thu Mar 16 11:19:54 2023 +0100

    net: usb: smsc95xx: Limit packet length to skb->len
    
    [ Upstream commit ff821092cf02a70c2bccd2d19269f01e29aa52cf ]
    
    Packet length retrieved from descriptor may be larger than
    the actual socket buffer length. In such case the cloned
    skb passed up the network stack will leak kernel memory contents.
    
    Fixes: 2f7ca802bdae ("net: Add SMSC LAN9500 USB2.0 10/100 ethernet adapter driver")
    Signed-off-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20230316101954.75836-1-szymon.heidrich@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c09cdf6eb815ee35e55d6c50ac7f63db58bd20b8
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Wed Mar 15 14:21:54 2023 +0800

    scsi: scsi_dh_alua: Fix memleak for 'qdata' in alua_activate()
    
    [ Upstream commit a13faca032acbf2699293587085293bdfaafc8ae ]
    
    If alua_rtpg_queue() failed from alua_activate(), then 'qdata' is not
    freed, which will cause following memleak:
    
    unreferenced object 0xffff88810b2c6980 (size 32):
      comm "kworker/u16:2", pid 635322, jiffies 4355801099 (age 1216426.076s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        40 39 24 c1 ff ff ff ff 00 f8 ea 0a 81 88 ff ff  @9$.............
      backtrace:
        [<0000000098f3a26d>] alua_activate+0xb0/0x320
        [<000000003b529641>] scsi_dh_activate+0xb2/0x140
        [<000000007b296db3>] activate_path_work+0xc6/0xe0 [dm_multipath]
        [<000000007adc9ace>] process_one_work+0x3c5/0x730
        [<00000000c457a985>] worker_thread+0x93/0x650
        [<00000000cb80e628>] kthread+0x1ba/0x210
        [<00000000a1e61077>] ret_from_fork+0x22/0x30
    
    Fix the problem by freeing 'qdata' in error path.
    
    Fixes: 625fe857e4fa ("scsi: scsi_dh_alua: Check scsi_device_get() return value")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20230315062154.668812-1-yukuai1@huaweicloud.com
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3ada13f20fd018fce7b5867e9805ee69ee01b83
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Mon Jan 30 16:32:47 2023 +0100

    i2c: imx-lpi2c: check only for enabled interrupt flags
    
    [ Upstream commit 1c7885004567e8951d65a983be095f254dd20bef ]
    
    When reading from I2C, the Tx watermark is set to 0. Unfortunately the
    TDF (transmit data flag) is enabled when Tx FIFO entries is equal or less
    than watermark. So it is set in every case, hence the reset default of 1.
    This results in the MSR_RDF _and_ MSR_TDF flags to be set thus trying
    to send Tx data on a read message.
    Mask the IRQ status to filter for wanted flags only.
    
    Fixes: a55fa9d0e42e ("i2c: imx-lpi2c: add low power i2c bus driver")
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Tested-by: Emanuele Ghidoli <emanuele.ghidoli@toradex.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bde2e73d5232cb52003197a5c5e05b61f720d000
Author: AKASHI Takahiro <takahiro.akashi@linaro.org>
Date:   Tue Mar 7 15:45:31 2023 +0900

    igc: fix the validation logic for taprio's gate list
    
    [ Upstream commit 2b4cc3d3f4d8ec42961e98568a0afeee96a943ab ]
    
    The check introduced in the commit a5fd39464a40 ("igc: Lift TAPRIO schedule
    restriction") can detect a false positive error in some corner case.
    For instance,
        tc qdisc replace ... taprio num_tc 4
            ...
            sched-entry S 0x01 100000       # slot#1
            sched-entry S 0x03 100000       # slot#2
            sched-entry S 0x04 100000       # slot#3
            sched-entry S 0x08 200000       # slot#4
            flags 0x02                      # hardware offload
    
    Here the queue#0 (the first queue) is on at the slot#1 and #2,
    and off at the slot#3 and #4. Under the current logic, when the slot#4
    is examined, validate_schedule() returns *false* since the enablement
    count for the queue#0 is two and it is already off at the previous slot
    (i.e. #3). But this definition is truely correct.
    
    Let's fix the logic to enforce a strict validation for consecutively-opened
    slots.
    
    Fixes: a5fd39464a40 ("igc: Lift TAPRIO schedule restriction")
    Signed-off-by: AKASHI Takahiro <takahiro.akashi@linaro.org>
    Reviewed-by: Kurt Kanzenbach <kurt@linutronix.de>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3e4844c1829646a0945318bf342f18b64715509
Author: Akihiko Odaki <akihiko.odaki@daynix.com>
Date:   Thu Dec 1 19:20:03 2022 +0900

    igbvf: Regard vf reset nack as success
    
    [ Upstream commit 02c83791ef969c6a8a150b4927193d0d0e50fb23 ]
    
    vf reset nack actually represents the reset operation itself is
    performed but no address is assigned. Therefore, e1000_reset_hw_vf
    should fill the "perm_addr" with the zero address and return success on
    such an occasion. This prevents its callers in netdev.c from saying PF
    still resetting, and instead allows them to correctly report that no
    address is assigned.
    
    Fixes: 6ddbc4cf1f4d ("igb: Indicate failure on vf reset for empty mac address")
    Signed-off-by: Akihiko Odaki <akihiko.odaki@daynix.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Marek Szlosek <marek.szlosek@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe3850c72a722e9efe18b4ec384b0fa0c09ac053
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Nov 22 10:28:52 2022 +0800

    intel/igbvf: free irq on the error path in igbvf_request_msix()
    
    [ Upstream commit 85eb39bb39cbb5c086df1e19ba67cc1366693a77 ]
    
    In igbvf_request_msix(), irqs have not been freed on the err path,
    we need to free it. Fix it.
    
    Fixes: d4e0fe01a38a ("igbvf: add new driver to support 82576 virtual functions")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Tested-by: Marek Szlosek <marek.szlosek@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 155d6d434f86bcbae985171c1c398c11f393950d
Author: Alexander Lobakin <aleksander.lobakin@intel.com>
Date:   Wed Mar 1 12:59:08 2023 +0100

    iavf: fix non-tunneled IPv6 UDP packet type and hashing
    
    [ Upstream commit de58647b4301fe181f9c38e8b46f7021584ae427 ]
    
    Currently, IAVF's decode_rx_desc_ptype() correctly reports payload type
    of L4 for IPv4 UDP packets and IPv{4,6} TCP, but only L3 for IPv6 UDP.
    Originally, i40e, ice and iavf were affected.
    Commit 73df8c9e3e3d ("i40e: Correct UDP packet header for non_tunnel-ipv6")
    fixed that in i40e, then
    commit 638a0c8c8861 ("ice: fix incorrect payload indicator on PTYPE")
    fixed that for ice.
    IPv6 UDP is L4 obviously. Fix it and make iavf report correct L4 hash
    type for such packets, so that the stack won't calculate it on CPU when
    needs it.
    
    Fixes: 206812b5fccb ("i40e/i40evf: i40e implementation for skb_set_hash")
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Signed-off-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15dcb57eba09ca3f84033af1e961dde24e2dcb14
Author: Alexander Lobakin <aleksander.lobakin@intel.com>
Date:   Wed Mar 1 12:59:07 2023 +0100

    iavf: fix inverted Rx hash condition leading to disabled hash
    
    [ Upstream commit 32d57f667f871bc5a8babbe27ea4c5e668ee0ea8 ]
    
    Condition, which checks whether the netdev has hashing enabled is
    inverted. Basically, the tagged commit effectively disabled passing flow
    hash from descriptor to skb, unless user *disables* it via Ethtool.
    Commit a876c3ba59a6 ("i40e/i40evf: properly report Rx packet hash")
    fixed this problem, but only for i40e.
    Invert the condition now in iavf and unblock passing hash to skbs again.
    
    Fixes: 857942fd1aa1 ("i40e: Fix Rx hash reported to the stack by our driver")
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Signed-off-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 580634b03a55f04a3c1968bcbd97736c079c6601
Author: Kal Conley <kal.conley@dectris.com>
Date:   Wed Mar 8 18:40:13 2023 +0100

    xsk: Add missing overflow check in xdp_umem_reg
    
    [ Upstream commit c7df4813b149362248d6ef7be41a311e27bf75fe ]
    
    The number of chunks can overflow u32. Make sure to return -EINVAL on
    overflow. Also remove a redundant u32 cast assigning umem->npgs.
    
    Fixes: bbff2f321a86 ("xsk: new descriptor addressing scheme")
    Signed-off-by: Kal Conley <kal.conley@dectris.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Link: https://lore.kernel.org/bpf/20230308174013.1114745-1-kal.conley@dectris.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b5dffe048f925a528c83e12331ebe635c12562d
Author: Peng Fan <peng.fan@nxp.com>
Date:   Sun Feb 26 21:12:14 2023 +0800

    ARM: dts: imx6sl: tolino-shine2hd: fix usbotg1 pinctrl
    
    [ Upstream commit 1cd489e1ada1cffa56bd06fd4609f5a60a985d43 ]
    
    usb@2184000: 'pinctrl-0' is a dependency of 'pinctrl-names'
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Fixes: 9c7016f1ca6d ("ARM: dts: imx: add devicetree for Tolino Shine 2 HD")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35a49d27585ccafb8d449c666f9620a739538a0f
Author: Peng Fan <peng.fan@nxp.com>
Date:   Sun Feb 26 21:12:13 2023 +0800

    ARM: dts: imx6sll: e60k02: fix usbotg1 pinctrl
    
    [ Upstream commit 957c04e9784c7c757e8cc293d7fb2a60cdf461b6 ]
    
    usb@2184000: 'pinctrl-0' is a dependency of 'pinctrl-names'
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Fixes: c100ea86e6ab ("ARM: dts: add Netronix E60K02 board common file")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75e2144291e847009fbc0350e10ec588ff96e05a
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Sun Mar 12 01:46:50 2023 +0800

    power: supply: da9150: Fix use after free bug in da9150_charger_remove due to race condition
    
    [ Upstream commit 06615d11cc78162dfd5116efb71f29eb29502d37 ]
    
    In da9150_charger_probe, &charger->otg_work is bound with
    da9150_charger_otg_work. da9150_charger_otg_ncb may be
    called to start the work.
    
    If we remove the module which will call da9150_charger_remove
    to make cleanup, there may be a unfinished work. The possible
    sequence is as follows:
    
    Fix it by canceling the work before cleanup in the da9150_charger_remove
    
    CPU0                  CPUc1
    
                        |da9150_charger_otg_work
    da9150_charger_remove      |
    power_supply_unregister  |
    device_unregister   |
    power_supply_dev_release|
    kfree(psy)          |
                        |
                        |   power_supply_changed(charger->usb);
                        |   //use
    
    Fixes: c1a281e34dae ("power: Add support for DA9150 Charger")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b346876b93168541a45551d5f9abd1d26102e89
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Fri Mar 10 01:47:28 2023 +0800

    power: supply: bq24190: Fix use after free bug in bq24190_remove due to race condition
    
    [ Upstream commit 47c29d69212911f50bdcdd0564b5999a559010d4 ]
    
    In bq24190_probe, &bdi->input_current_limit_work is bound
    with bq24190_input_current_limit_work. When external power
    changed, it will call bq24190_charger_external_power_changed
     to start the work.
    
    If we remove the module which will call bq24190_remove to make
    cleanup, there may be a unfinished work. The possible
    sequence is as follows:
    
    CPU0                  CPUc1
    
                        |bq24190_input_current_limit_work
    bq24190_remove      |
    power_supply_unregister  |
    device_unregister   |
    power_supply_dev_release|
    kfree(psy)          |
                        |
                        | power_supply_get_property_from_supplier
                        |   //use
    
    Fix it by finishing the work before cleanup in the bq24190_remove
    
    Fixes: 97774672573a ("power_supply: Initialize changed_work before calling device_add")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18359b8e30c4f190398ae2bf41c9f07c78e4367a
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 08:30:44 2022 +0000

    power: supply: bq24190_charger: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    [ Upstream commit d96a89407e5f682d1cb22569d91784506c784863 ]
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Stable-dep-of: 47c29d692129 ("power: supply: bq24190: Fix use after free bug in bq24190_remove due to race condition")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1fde5782f187daa05919d2bebd872df8ebcc00d1
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Thu Mar 23 05:03:22 2023 +0000

    net: tls: fix possible race condition between do_tls_getsockopt_conf() and do_tls_setsockopt_conf()
    
    commit 49c47cc21b5b7a3d8deb18fc57b0aa2ab1286962 upstream.
    
    ctx->crypto_send.info is not protected by lock_sock in
    do_tls_getsockopt_conf(). A race condition between do_tls_getsockopt_conf()
    and error paths of do_tls_setsockopt_conf() may lead to a use-after-free
    or null-deref.
    
    More discussion:  https://lore.kernel.org/all/Y/ht6gQL+u6fj3dG@hog/
    
    Fixes: 3c4d7559159b ("tls: kernel TLS support")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Link: https://lore.kernel.org/r/20230228023344.9623-1-hbh25y@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Meena Shanmugam <meenashanmugam@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfeda9432c1dd0b33d006fc3cca21d69ff47c49b
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Mar 6 11:32:42 2023 +0100

    drm/sun4i: fix missing component unbind on bind errors
    
    [ Upstream commit c22f2ff8724b49dce2ae797e9fbf4bc0fa91112f ]
    
    Make sure to unbind all subcomponents when binding the aggregate device
    fails.
    
    Fixes: 9026e0d122ac ("drm: Add Allwinner A10 Display Engine support")
    Cc: stable@vger.kernel.org      # 4.7
    Cc: Maxime Ripard <mripard@kernel.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230306103242.4775-1-johan+linaro@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5131ed83c8309d3005ce4a4c5dbbb98362dc696
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Feb 25 21:39:53 2023 -0800

    serial: 8250: ASPEED_VUART: select REGMAP instead of depending on it
    
    [ Upstream commit f8086d1a65ac693e3fd863128352b4b11ee7324d ]
    
    REGMAP is a hidden (not user visible) symbol. Users cannot set it
    directly thru "make *config", so drivers should select it instead of
    depending on it if they need it.
    
    Consistently using "select" or "depends on" can also help reduce
    Kconfig circular dependency issues.
    
    Therefore, change the use of "depends on REGMAP" to "select REGMAP".
    
    Fixes: 8d310c9107a2 ("drivers/tty/serial/8250: Make Aspeed VUART SIRQ polarity configurable")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Oskar Senft <osk@google.com>
    Cc: linux-serial@vger.kernel.org
    Link: https://lore.kernel.org/r/20230226053953.4681-9-rdunlap@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fcb12f00a05241089449d7d7bdb22b66803e4ce
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jul 11 10:42:52 2022 +0200

    serial: 8250: SERIAL_8250_ASPEED_VUART should depend on ARCH_ASPEED
    
    [ Upstream commit 806a449725cbd679a7f52c394d3c87b451d66bd5 ]
    
    The Aspeed Virtual UART is only present on Aspeed BMC platforms.  Hence
    add a dependency on ARCH_ASPEED, to prevent asking the user about this
    driver when configuring a kernel without Aspeed BMC support.
    
    Reviewed-by: Jeremy Kerr <jk@ozlabs.org>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/259138c372d433005b4871789ef9ee8d15320307.1657528861.git.geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: f8086d1a65ac ("serial: 8250: ASPEED_VUART: select REGMAP instead of depending on it")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19a98d56dfedafb25652bdb9cd48a4e73ceba702
Author: Alexander Sverdlin <alexander.sverdlin@siemens.com>
Date:   Thu Mar 9 14:43:02 2023 +0100

    tty: serial: fsl_lpuart: fix race on RX DMA shutdown
    
    [ Upstream commit 1be6f2b15f902c02e055ae0b419ca789200473c9 ]
    
    From time to time DMA completion can come in the middle of DMA shutdown:
    
    <process ctx>:                          <IRQ>:
    lpuart32_shutdown()
      lpuart_dma_shutdown()
        del_timer_sync()
                                            lpuart_dma_rx_complete()
                                              lpuart_copy_rx_to_tty()
                                                mod_timer()
        lpuart_dma_rx_free()
    
    When the timer fires a bit later, sport->dma_rx_desc is NULL:
    
    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000004
    pc : lpuart_copy_rx_to_tty+0xcc/0x5bc
    lr : lpuart_timer_func+0x1c/0x2c
    Call trace:
     lpuart_copy_rx_to_tty
     lpuart_timer_func
     call_timer_fn
     __run_timers.part.0
     run_timer_softirq
     __do_softirq
     __irq_exit_rcu
     irq_exit
     handle_domain_irq
     gic_handle_irq
     call_on_irq_stack
     do_interrupt_handler
     ...
    
    To fix this fold del_timer_sync() into lpuart_dma_rx_free() after
    dmaengine_terminate_sync() to make sure timer will not be re-started in
    lpuart_copy_rx_to_tty() <= lpuart_dma_rx_complete().
    
    Fixes: 4a8588a1cf86 ("serial: fsl_lpuart: delete timer on shutdown")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@siemens.com>
    Link: https://lore.kernel.org/r/20230309134302.74940-2-alexander.sverdlin@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae12308c7d5516891e616bdddfe20a303ac5b2d8
Author: Jason Wang <wangborong@cdjrlc.com>
Date:   Wed Aug 3 18:42:08 2022 +0800

    serial: fsl_lpuart: Fix comment typo
    
    [ Upstream commit 374e01fa1304e1eabd2cd16f750da3ecaeab069b ]
    
    The double `as' is duplicated in the comment, remove one.
    
    Signed-off-by: Jason Wang <wangborong@cdjrlc.com>
    Link: https://lore.kernel.org/r/20220803104208.4127-1-wangborong@cdjrlc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 1be6f2b15f90 ("tty: serial: fsl_lpuart: fix race on RX DMA shutdown")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a43f7d0628e4f5cdb60c771a74d391c77ce87baf
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Nov 30 23:08:45 2022 +0000

    KVM: Register /dev/kvm as the _very_ last thing during initialization
    
    [ Upstream commit 2b01281273738bf2d6551da48d65db2df3f28998 ]
    
    Register /dev/kvm, i.e. expose KVM to userspace, only after all other
    setup has completed.  Once /dev/kvm is exposed, userspace can start
    invoking KVM ioctls, creating VMs, etc...  If userspace creates a VM
    before KVM is done with its configuration, bad things may happen, e.g.
    KVM will fail to properly migrate vCPU state if a VM is created before
    KVM has registered preemption notifiers.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20221130230934.1014142-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7958663668ef0ffe49c294ee55c83770b532c685
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Fri Sep 3 09:51:40 2021 +0200

    KVM: Pre-allocate cpumasks for kvm_make_all_cpus_request_except()
    
    [ Upstream commit baff59ccdc657d290be51b95b38ebe5de40036b4 ]
    
    Allocating cpumask dynamically in zalloc_cpumask_var() is not ideal.
    Allocation is somewhat slow and can (in theory and when CPUMASK_OFFSTACK)
    fail. kvm_make_all_cpus_request_except() already disables preemption so
    we can use pre-allocated per-cpu cpumasks instead.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210903075141.403071-8-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 2b0128127373 ("KVM: Register /dev/kvm as the _very_ last thing during initialization")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6100066358ee1bc5f2d329a7d8eb32bf8e3ee74d
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Fri Sep 3 09:51:37 2021 +0200

    KVM: Optimize kvm_make_vcpus_request_mask() a bit
    
    [ Upstream commit ae0946cd3601752dc58f86d84258e5361e9c8cd4 ]
    
    Iterating over set bits in 'vcpu_bitmap' should be faster than going
    through all vCPUs, especially when just a few bits are set.
    
    Drop kvm_make_vcpus_request_mask() call from kvm_make_all_cpus_request_except()
    to avoid handling the special case when 'vcpu_bitmap' is NULL, move the
    code to kvm_make_all_cpus_request_except() itself.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210903075141.403071-5-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 2b0128127373 ("KVM: Register /dev/kvm as the _very_ last thing during initialization")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad120bc8693028ed400bc3b9ec349cfaf7bfef3b
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Aug 27 11:25:10 2021 +0200

    KVM: KVM: Use cpumask_available() to check for NULL cpumask when kicking vCPUs
    
    [ Upstream commit 0bbc2ca8515f9cdf11df84ccb63dc7c44bc3d8f4 ]
    
    Check for a NULL cpumask_var_t when kicking multiple vCPUs via
    cpumask_available(), which performs a !NULL check if and only if cpumasks
    are configured to be allocated off-stack.  This is a meaningless
    optimization, e.g. avoids a TEST+Jcc and TEST+CMOV on x86, but more
    importantly helps document that the NULL check is necessary even though
    all callers pass in a local variable.
    
    No functional change intended.
    
    Cc: Lai Jiangshan <jiangshanlai@gmail.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210827092516.1027264-3-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 2b0128127373 ("KVM: Register /dev/kvm as the _very_ last thing during initialization")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4cc54f6ae5351dd883120751b75405c9e38aeecc
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Aug 27 11:25:09 2021 +0200

    KVM: Clean up benign vcpu->cpu data races when kicking vCPUs
    
    [ Upstream commit 85b640450ddcfa09cf72771b69a9c3daf0ddc772 ]
    
    Fix a benign data race reported by syzbot+KCSAN[*] by ensuring vcpu->cpu
    is read exactly once, and by ensuring the vCPU is booted from guest mode
    if kvm_arch_vcpu_should_kick() returns true.  Fix a similar race in
    kvm_make_vcpus_request_mask() by ensuring the vCPU is interrupted if
    kvm_request_needs_ipi() returns true.
    
    Reading vcpu->cpu before vcpu->mode (via kvm_arch_vcpu_should_kick() or
    kvm_request_needs_ipi()) means the target vCPU could get migrated (change
    vcpu->cpu) and enter !OUTSIDE_GUEST_MODE between reading vcpu->cpud and
    reading vcpu->mode.  If that happens, the kick/IPI will be sent to the
    old pCPU, not the new pCPU that is now running the vCPU or reading SPTEs.
    
    Although failing to kick the vCPU is not exactly ideal, practically
    speaking it cannot cause a functional issue unless there is also a bug in
    the caller, and any such bug would exist regardless of kvm_vcpu_kick()'s
    behavior.
    
    The purpose of sending an IPI is purely to get a vCPU into the host (or
    out of reading SPTEs) so that the vCPU can recognize a change in state,
    e.g. a KVM_REQ_* request.  If vCPU's handling of the state change is
    required for correctness, KVM must ensure either the vCPU sees the change
    before entering the guest, or that the sender sees the vCPU as running in
    guest mode.  All architectures handle this by (a) sending the request
    before calling kvm_vcpu_kick() and (b) checking for requests _after_
    setting vcpu->mode.
    
    x86's READING_SHADOW_PAGE_TABLES has similar requirements; KVM needs to
    ensure it kicks and waits for vCPUs that started reading SPTEs _before_
    MMU changes were finalized, but any vCPU that starts reading after MMU
    changes were finalized will see the new state and can continue on
    uninterrupted.
    
    For uses of kvm_vcpu_kick() that are not paired with a KVM_REQ_*, e.g.
    x86's kvm_arch_sync_dirty_log(), the order of the kick must not be relied
    upon for functional correctness, e.g. in the dirty log case, userspace
    cannot assume it has a 100% complete log if vCPUs are still running.
    
    All that said, eliminate the benign race since the cost of doing so is an
    "extra" atomic cmpxchg() in the case where the target vCPU is loaded by
    the current pCPU or is not loaded at all.  I.e. the kick will be skipped
    due to kvm_vcpu_exiting_guest_mode() seeing a compatible vcpu->mode as
    opposed to the kick being skipped because of the cpu checks.
    
    Keep the "cpu != me" checks even though they appear useless/impossible at
    first glance.  x86 processes guest IPI writes in a fast path that runs in
    IN_GUEST_MODE, i.e. can call kvm_vcpu_kick() from IN_GUEST_MODE.  And
    calling kvm_vm_bugged()->kvm_make_vcpus_request_mask() from IN_GUEST or
    READING_SHADOW_PAGE_TABLES is perfectly reasonable.
    
    Note, a race with the cpu_online() check in kvm_vcpu_kick() likely
    persists, e.g. the vCPU could exit guest mode and get offlined between
    the cpu_online() check and the sending of smp_send_reschedule().  But,
    the online check appears to exist only to avoid a WARN in x86's
    native_smp_send_reschedule() that fires if the target CPU is not online.
    The reschedule WARN exists because CPU offlining takes the CPU out of the
    scheduling pool, i.e. the WARN is intended to detect the case where the
    kernel attempts to schedule a task on an offline CPU.  The actual sending
    of the IPI is a non-issue as at worst it will simpy be dropped on the
    floor.  In other words, KVM's usurping of the reschedule IPI could
    theoretically trigger a WARN if the stars align, but there will be no
    loss of functionality.
    
    [*] https://syzkaller.appspot.com/bug?extid=cd4154e502f43f10808a
    
    Cc: Venkatesh Srinivas <venkateshs@google.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Fixes: 97222cc83163 ("KVM: Emulate local APIC in kernel")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210827092516.1027264-2-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 2b0128127373 ("KVM: Register /dev/kvm as the _very_ last thing during initialization")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f9ae017dd3571659b3f1f2dde6db6371a248821
Author: Corey Minyard <cminyard@mvista.com>
Date:   Wed Jan 25 10:34:47 2023 -0600

    ipmi:ssif: Add a timer between request retries
    
    [ Upstream commit 00bb7e763ec9f384cb382455cb6ba5588b5375cf ]
    
    The IPMI spec has a time (T6) specified between request retries.  Add
    the handling for that.
    
    Reported by: Tony Camuso <tcamuso@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c94de7f85d99eef7bcab665da1d5888ad05fa4bc
Author: Corey Minyard <cminyard@mvista.com>
Date:   Wed Jan 25 10:11:06 2023 -0600

    ipmi:ssif: resend_msg() cannot fail
    
    [ Upstream commit 95767ed78a181d5404202627499f9cde56053b96 ]
    
    The resend_msg() function cannot fail, but there was error handling
    around using it.  Rework the handling of the error, and fix the out of
    retries debug reporting that was wrong around this, too.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Stable-dep-of: 00bb7e763ec9 ("ipmi:ssif: Add a timer between request retries")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd35cbde00786872b473b01abd6c3ef97b837480
Author: Corey Minyard <cminyard@mvista.com>
Date:   Thu Nov 3 15:03:11 2022 -0500

    ipmi:ssif: Increase the message retry time
    
    [ Upstream commit 39721d62bbc16ebc9bb2bdc2c163658f33da3b0b ]
    
    The spec states that the minimum message retry time is 60ms, but it was
    set to 20ms.  Correct it.
    
    Reported by: Tony Camuso <tcamuso@redhat.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Stable-dep-of: 00bb7e763ec9 ("ipmi:ssif: Add a timer between request retries")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d57c90f24e1f197faa8bc472a6082fbbdbed259
Author: Liguang Zhang <zhangliguang@linux.alibaba.com>
Date:   Mon Mar 1 22:05:15 2021 +0800

    ipmi:ssif: make ssif_i2c_send() void
    
    [ Upstream commit dcd10526ac5a0d6cc94ce60b9acfca458163277b ]
    
    This function actually needs no return value. So remove the unneeded
    check and make it void.
    
    Signed-off-by: Liguang Zhang <zhangliguang@linux.alibaba.com>
    Message-Id: <20210301140515.18951-1-zhangliguang@linux.alibaba.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Stable-dep-of: 00bb7e763ec9 ("ipmi:ssif: Add a timer between request retries")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18dd825b865117db0e0e5557ddb3f7e0322739db
Author: Song Liu <song@kernel.org>
Date:   Mon Mar 13 10:16:08 2023 -0700

    perf: fix perf_event_context->time
    
    [ Upstream commit baf1b12a67f5b24f395baca03e442ce27cab0c18 ]
    
    Time readers rely on perf_event_context->[time|timestamp|timeoffset] to get
    accurate time_enabled and time_running for an event. The difference between
    ctx->timestamp and ctx->time is the among of time when the context is not
    enabled. __update_context_time(ctx, false) is used to increase timestamp,
    but not time. Therefore, it should only be called in ctx_sched_in() when
    EVENT_TIME was not enabled.
    
    Fixes: 09f5e7dc7ad7 ("perf: Fix perf_event_read_local() time")
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/r/20230313171608.298734-1-song@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddcf8320003638a06eb1e46412e045d0c5701575
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Mar 14 04:47:35 2023 +0000

    perf/core: Fix perf_output_begin parameter is incorrectly invoked in perf_event_bpf_output
    
    [ Upstream commit eb81a2ed4f52be831c9fb879752d89645a312c13 ]
    
    syzkaller reportes a KASAN issue with stack-out-of-bounds.
    The call trace is as follows:
      dump_stack+0x9c/0xd3
      print_address_description.constprop.0+0x19/0x170
      __kasan_report.cold+0x6c/0x84
      kasan_report+0x3a/0x50
      __perf_event_header__init_id+0x34/0x290
      perf_event_header__init_id+0x48/0x60
      perf_output_begin+0x4a4/0x560
      perf_event_bpf_output+0x161/0x1e0
      perf_iterate_sb_cpu+0x29e/0x340
      perf_iterate_sb+0x4c/0xc0
      perf_event_bpf_event+0x194/0x2c0
      __bpf_prog_put.constprop.0+0x55/0xf0
      __cls_bpf_delete_prog+0xea/0x120 [cls_bpf]
      cls_bpf_delete_prog_work+0x1c/0x30 [cls_bpf]
      process_one_work+0x3c2/0x730
      worker_thread+0x93/0x650
      kthread+0x1b8/0x210
      ret_from_fork+0x1f/0x30
    
    commit 267fb27352b6 ("perf: Reduce stack usage of perf_output_begin()")
    use on-stack struct perf_sample_data of the caller function.
    
    However, perf_event_bpf_output uses incorrect parameter to convert
    small-sized data (struct perf_bpf_event) into large-sized data
    (struct perf_sample_data), which causes memory overwriting occurs in
    __perf_event_header__init_id.
    
    Fixes: 267fb27352b6 ("perf: Reduce stack usage of perf_output_begin()")
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20230314044735.56551-1-yangjihong1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29ee1495e8577d2433b294417f29a3c4d65b4d9e
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Thu Jan 5 02:22:19 2023 +0200

    interconnect: qcom: osm-l3: fix icc_onecell_data allocation
    
    [ Upstream commit f77ebdda0ee652124061c2ac42399bb6c367e729 ]
    
    This is a struct with a trailing zero-length array of icc_node pointers
    but it's allocated as if it were a single array of icc_nodes instead.
    
    Fortunately this overallocates memory rather then allocating less memory
    than required.
    
    Fix by replacing devm_kcalloc() with devm_kzalloc() and struct_size()
    macro.
    
    Fixes: 5bc9900addaf ("interconnect: qcom: Add OSM L3 interconnect provider support")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20230105002221.1416479-2-dmitry.baryshkov@linaro.org
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

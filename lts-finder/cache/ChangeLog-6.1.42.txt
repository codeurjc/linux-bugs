commit d2a6dc4eaf6d50ba32a9b39b4c6ec713a92072ab
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jul 27 08:50:53 2023 +0200

    Linux 6.1.42
    
    Link: https://lore.kernel.org/r/20230725104507.756981058@linuxfoundation.org
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d4607f2a50c749e47a4b80030733cbf77c5570a
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Mon Jun 26 13:40:58 2023 -0400

    Revert "drm/amd/display: edp do not add non-edid timings"
    
    commit d6149086b45e150c170beaa4546495fd1880724c upstream.
    
    This change causes regression when eDP and external display in mirror
    mode. When external display supports low resolution than eDP, use eDP
    timing to driver external display may cause corruption on external
    display.
    
    This reverts commit e749dd10e5f292061ad63d2b030194bf7d7d452c.
    
    Cc: stable@vger.kernel.org
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2655
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f2ba3c16230e1de649a877e5819673c849ca0f2
Author: Wayne Lin <wayne.lin@amd.com>
Date:   Mon Jul 24 17:26:38 2023 -0500

    drm/amd/display: Add polling method to handle MST reply packet
    
    commit 4f6d9e38c4d244ad106eb9ebd8c0e1215e866f35 upstream.
    
    [Why]
    Specific TBT4 dock doesn't send out short HPD to notify source
    that IRQ event DOWN_REP_MSG_RDY is set. Which violates the spec
    and cause source can't send out streams to mst sinks.
    
    [How]
    To cover this misbehavior, add an additional polling method to detect
    DOWN_REP_MSG_RDY is set. HPD driven handling method is still kept.
    Just hook up our handler to drm mgr->cbs->poll_hpd_irq().
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jerry Zuo <jerry.zuo@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Wayne Lin <wayne.lin@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78ea2ed76ce94f090d2a9c36b1b58f79ce3b93b8
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Mon Jul 24 17:26:37 2023 -0500

    drm/amd/display: fix linux dp link lost handled only one time
    
    commit e322843e5e33e72ff218d661f3d15ff9c9f2f1b5 upstream.
    
    [Why]
    linux amdgpu defer handle link lost irq. dm add handle
    request to irq work queue for the first irq of link lost.
    if link training fails for link lost handle, link will not
    be enabled anymore.
    
    [How]
    allow adding handle request of link lost to work queue
    before running dp link training for link lost.
    
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ Modified due to not having
      c5a31f178e352 ("drm/amd/display: move dp irq handler functions from dc_link_dp to link_dp_irq_handler")
      until kernel 6.3-rc1.]
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b31143b0fbbd7bae05905f838bb7f8c07eb86662
Author: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>
Date:   Mon Jul 24 17:26:36 2023 -0500

    drm/amd/display: Clean up errors & warnings in amdgpu_dm.c
    
    commit 87279fdf5ee0ad1360765ef70389d1c4d0f81bb6 upstream.
    
    Fix the following errors & warnings reported by checkpatch:
    
    ERROR: space required before the open brace '{'
    ERROR: space required before the open parenthesis '('
    ERROR: that open brace { should be on the previous line
    ERROR: space prohibited before that ',' (ctx:WxW)
    ERROR: else should follow close brace '}'
    ERROR: open brace '{' following function definitions go on the next line
    ERROR: code indent should use tabs where possible
    
    WARNING: braces {} are not necessary for single statement blocks
    WARNING: void function return statements are not generally useful
    WARNING: Block comments use * on subsequent lines
    WARNING: Block comments use a trailing */ on a separate line
    
    Cc: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Cc: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ Modified for missing
      c5a31f178e35 ("drm/amd/display: move dp irq handler functions from dc_link_dp to link_dp_irq_handler")
      which landed in 6.3]
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c14702daf1f5969e1dead51eff596f776007434d
Author: Qingqing Zhuo <qingqing.zhuo@amd.com>
Date:   Mon Jul 24 17:26:35 2023 -0500

    drm/amd/display: force connector state when bpc changes during compliance
    
    commit 028c4ccfb8127255d60f8d9edde96cacf2958082 upstream.
    
    [Why]
    During DP DSC compliance tests, bpc requested would
    change between sub-tests, which requires stream
    to be recommited.
    
    [How]
    Force connector to disconnect and reconnect whenever
    there is a bpc change in automated test.
    
    Reviewed-by: Jerry Zuo <Jerry.Zuo@amd.com>
    Acked-by: Alan Liu <HaoPing.Liu@amd.com>
    Signed-off-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: hersen wu <hersenxs.wu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ Adjustments for headers that were moved around in later commits. ]
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00f68f5c1be12828a6f0b1e0f1017e1399b23a73
Author: Wayne Lin <Wayne.Lin@amd.com>
Date:   Mon Jul 24 17:26:34 2023 -0500

    drm/dp_mst: Clear MSG_RDY flag before sending new message
    
    commit 72f1de49ffb90b29748284f27f1d6b829ab1de95 upstream.
    
    [Why]
    The sequence for collecting down_reply from source perspective should
    be:
    
    Request_n->repeat (get partial reply of Request_n->clear message ready
    flag to ack DPRX that the message is received) till all partial
    replies for Request_n are received->new Request_n+1.
    
    Now there is chance that drm_dp_mst_hpd_irq() will fire new down
    request in the tx queue when the down reply is incomplete. Source is
    restricted to generate interveleaved message transactions so we should
    avoid it.
    
    Also, while assembling partial reply packets, reading out DPCD DOWN_REP
    Sideband MSG buffer + clearing DOWN_REP_MSG_RDY flag should be
    wrapped up as a complete operation for reading out a reply packet.
    Kicking off a new request before clearing DOWN_REP_MSG_RDY flag might
    be risky. e.g. If the reply of the new request has overwritten the
    DPRX DOWN_REP Sideband MSG buffer before source writing one to clear
    DOWN_REP_MSG_RDY flag, source then unintentionally flushes the reply
    for the new request. Should handle the up request in the same way.
    
    [How]
    Separete drm_dp_mst_hpd_irq() into 2 steps. After acking the MST IRQ
    event, driver calls drm_dp_mst_hpd_irq_send_new_request() and might
    trigger drm_dp_mst_kick_tx() only when there is no on going message
    transaction.
    
    Changes since v1:
    * Reworked on review comments received
    -> Adjust the fix to let driver explicitly kick off new down request
    when mst irq event is handled and acked
    -> Adjust the commit message
    
    Changes since v2:
    * Adjust the commit message
    * Adjust the naming of the divided 2 functions and add a new input
      parameter "ack".
    * Adjust code flow as per review comments.
    
    Changes since v3:
    * Update the function description of drm_dp_mst_hpd_irq_handle_event
    
    Changes since v4:
    * Change ack of drm_dp_mst_hpd_irq_handle_event() to be an array align
      the size of esi[]
    
    Signed-off-by: Wayne Lin <Wayne.Lin@amd.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Jani Nikula <jani.nikula@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c085ffaf67db1ba48b733bc7fe4d7f5be9b77e2b
Author: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>
Date:   Mon Jul 24 17:26:33 2023 -0500

    drm/amd/display: fix some coding style issues
    
    commit ae67558be712237109100fd14f12378adcf24356 upstream.
    
    Fix the following checkpatch checks in amdgpu_dm.c
    
    CHECK: Prefer kernel type 'u8' over 'uint8_t'
    CHECK: Prefer kernel type 'u32' over 'uint32_t'
    CHECK: Prefer kernel type 'u64' over 'uint64_t'
    CHECK: Prefer kernel type 's32' over 'int32_t'
    
    Signed-off-by: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ PSR-SU support was introduced in kernel 6.2 with commits like
      30ebe41582d1 ("drm/amd/display: add FB_DAMAGE_CLIPS support")
      but PSR-SU isn't enabled in 6.1.y, so this block needs to be skipped
      when backporting. ]
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 374735cbe2f17dd80829adba5d0b764e9246341a
Author: Hamza Mahfooz <hamza.mahfooz@amd.com>
Date:   Mon Jul 24 17:26:32 2023 -0500

    drm/amd/display: use max_dsc_bpp in amdgpu_dm
    
    commit 6e5abe94c6eb9b281398e39819217e8fdd1c336f upstream.
    
    Since, the quirk is handled in the DRM core now, we can use that value
    instead of the internal value.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 268bfb37825623ae81d56015e5875d0e678a6a41
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Mon Jul 24 15:42:23 2023 +0300

    selftests/bpf: Fix sk_assign on s390x
    
    [ Upstream commit 7ce878ca81bca7811e669db4c394b86780e0dbe4 ]
    
    sk_assign is failing on an s390x machine running Debian "bookworm" for
    2 reasons: legacy server_map definition and uninitialized addrlen in
    recvfrom() call.
    
    Fix by adding a new-style server_map definition and dropping addrlen
    (recvfrom() allows NULL values for src_addr and addrlen).
    
    Since the test should support tc built without libbpf, build the prog
    twice: with the old-style definition and with the new-style definition,
    then select the right one at runtime. This could be done at compile
    time too, but this would not be cross-compilation friendly.
    
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230129190501.1624747-2-iii@linux.ibm.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd1e31d1bcb7526f5dad933c12a133398abdc96f
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Jul 24 15:42:22 2023 +0300

    selftests/bpf: Workaround verification failure for fexit_bpf2bpf/func_replace_return_code
    
    [ Upstream commit 63d78b7e8ca2d0eb8c687a355fa19d01b6fcc723 ]
    
    With latest llvm17, selftest fexit_bpf2bpf/func_replace_return_code
    has the following verification failure:
    
      0: R1=ctx(off=0,imm=0) R10=fp0
      ; int connect_v4_prog(struct bpf_sock_addr *ctx)
      0: (bf) r7 = r1                       ; R1=ctx(off=0,imm=0) R7_w=ctx(off=0,imm=0)
      1: (b4) w6 = 0                        ; R6_w=0
      ; memset(&tuple.ipv4.saddr, 0, sizeof(tuple.ipv4.saddr));
      ...
      ; return do_bind(ctx) ? 1 : 0;
      179: (bf) r1 = r7                     ; R1=ctx(off=0,imm=0) R7=ctx(off=0,imm=0)
      180: (85) call pc+147
      Func#3 is global and valid. Skipping.
      181: R0_w=scalar()
      181: (bc) w6 = w0                     ; R0_w=scalar() R6_w=scalar(umax=4294967295,var_off=(0x0; 0xffffffff))
      182: (05) goto pc-129
      ; }
      54: (bc) w0 = w6                      ; R0_w=scalar(umax=4294967295,var_off=(0x0; 0xffffffff)) R6_w=scalar(umax=4294967295,var_off=(0x0; 0xffffffff))
      55: (95) exit
      At program exit the register R0 has value (0x0; 0xffffffff) should have been in (0x0; 0x1)
      processed 281 insns (limit 1000000) max_states_per_insn 1 total_states 26 peak_states 26 mark_read 13
      -- END PROG LOAD LOG --
      libbpf: prog 'connect_v4_prog': failed to load: -22
    
    The corresponding source code:
    
      __attribute__ ((noinline))
      int do_bind(struct bpf_sock_addr *ctx)
      {
            struct sockaddr_in sa = {};
    
            sa.sin_family = AF_INET;
            sa.sin_port = bpf_htons(0);
            sa.sin_addr.s_addr = bpf_htonl(SRC_REWRITE_IP4);
    
            if (bpf_bind(ctx, (struct sockaddr *)&sa, sizeof(sa)) != 0)
                    return 0;
    
            return 1;
      }
      ...
      SEC("cgroup/connect4")
      int connect_v4_prog(struct bpf_sock_addr *ctx)
      {
      ...
            return do_bind(ctx) ? 1 : 0;
      }
    
    Insn 180 is a call to 'do_bind'. The call's return value is also the return value
    for the program. Since do_bind() returns 0/1, so it is legitimate for compiler to
    optimize 'return do_bind(ctx) ? 1 : 0' to 'return do_bind(ctx)'. However, such
    optimization breaks verifier as the return value of 'do_bind()' is marked as any
    scalar which violates the requirement of prog return value 0/1.
    
    There are two ways to fix this problem, (1) changing 'return 1' in do_bind() to
    e.g. 'return 10' so the compiler has to do 'do_bind(ctx) ? 1 :0', or (2)
    suggested by Andrii, marking do_bind() with __weak attribute so the compiler
    cannot make any assumption on do_bind() return value.
    
    This patch adopted adding __weak approach which is simpler and more resistant
    to potential compiler optimizations.
    
    Suggested-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20230310012410.2920570-1-yhs@fb.com
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7c1eb9cb86f764a022f7fa3e2b01a773cf73ca4
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Mon Jul 24 15:42:21 2023 +0300

    selftests/bpf: make test_align selftest more robust
    
    [ Upstream commit 4f999b767769b76378c3616c624afd6f4bb0d99f ]
    
    test_align selftest relies on BPF verifier log emitting register states
    for specific instructions in expected format. Unfortunately, BPF
    verifier precision backtracking log interferes with such expectations.
    And instruction on which precision propagation happens sometimes don't
    output full expected register states. This does indeed look like
    something to be improved in BPF verifier, but is beyond the scope of
    this patch set.
    
    So to make test_align a bit more robust, inject few dummy R4 = R5
    instructions which capture desired state of R5 and won't have precision
    tracking logs on them. This fixes tests until we can improve BPF
    verifier output in the presence of precision tracking.
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20221104163649.121784-7-andrii@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c8f30a2ad94419fe33b442064a335348d564975
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Mon Jul 24 15:42:20 2023 +0300

    bpf: aggressively forget precise markings during state checkpointing
    
    [ Upstream commit 7a830b53c17bbadcf99f778f28aaaa4e6c41df5f ]
    
    Exploit the property of about-to-be-checkpointed state to be able to
    forget all precise markings up to that point even more aggressively. We
    now clear all potentially inherited precise markings right before
    checkpointing and branching off into child state. If any of children
    states require precise knowledge of any SCALAR register, those will be
    propagated backwards later on before this state is finalized, preserving
    correctness.
    
    There is a single selftests BPF program change, but tremendous one: 25x
    reduction in number of verified instructions and states in
    trace_virtqueue_add_sgs.
    
    Cilium results are more modest, but happen across wider range of programs.
    
    SELFTESTS RESULTS
    =================
    
    $ ./veristat -C -e file,prog,insns,states ~/imprecise-early-results.csv ~/imprecise-aggressive-results.csv | grep -v '+0'
    File                 Program                  Total insns (A)  Total insns (B)  Total insns (DIFF)  Total states (A)  Total states (B)  Total states (DIFF)
    -------------------  -----------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    loop6.bpf.linked1.o  trace_virtqueue_add_sgs           398057            15114   -382943 (-96.20%)              8717               336      -8381 (-96.15%)
    -------------------  -----------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    
    CILIUM RESULTS
    ==============
    
    $ ./veristat -C -e file,prog,insns,states ~/imprecise-early-results-cilium.csv ~/imprecise-aggressive-results-cilium.csv | grep -v '+0'
    File           Program                           Total insns (A)  Total insns (B)  Total insns (DIFF)  Total states (A)  Total states (B)  Total states (DIFF)
    -------------  --------------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    bpf_host.o     tail_handle_nat_fwd_ipv4                    23426            23221       -205 (-0.88%)              1537              1515         -22 (-1.43%)
    bpf_host.o     tail_handle_nat_fwd_ipv6                    13009            12904       -105 (-0.81%)               719               708         -11 (-1.53%)
    bpf_host.o     tail_nodeport_nat_ingress_ipv6               5261             5196        -65 (-1.24%)               247               243          -4 (-1.62%)
    bpf_host.o     tail_nodeport_nat_ipv6_egress                3446             3406        -40 (-1.16%)               203               198          -5 (-2.46%)
    bpf_lxc.o      tail_handle_nat_fwd_ipv4                    23426            23221       -205 (-0.88%)              1537              1515         -22 (-1.43%)
    bpf_lxc.o      tail_handle_nat_fwd_ipv6                    13009            12904       -105 (-0.81%)               719               708         -11 (-1.53%)
    bpf_lxc.o      tail_ipv4_ct_egress                          5074             4897       -177 (-3.49%)               255               248          -7 (-2.75%)
    bpf_lxc.o      tail_ipv4_ct_ingress                         5100             4923       -177 (-3.47%)               255               248          -7 (-2.75%)
    bpf_lxc.o      tail_ipv4_ct_ingress_policy_only             5100             4923       -177 (-3.47%)               255               248          -7 (-2.75%)
    bpf_lxc.o      tail_ipv6_ct_egress                          4558             4536        -22 (-0.48%)               188               187          -1 (-0.53%)
    bpf_lxc.o      tail_ipv6_ct_ingress                         4578             4556        -22 (-0.48%)               188               187          -1 (-0.53%)
    bpf_lxc.o      tail_ipv6_ct_ingress_policy_only             4578             4556        -22 (-0.48%)               188               187          -1 (-0.53%)
    bpf_lxc.o      tail_nodeport_nat_ingress_ipv6               5261             5196        -65 (-1.24%)               247               243          -4 (-1.62%)
    bpf_overlay.o  tail_nodeport_nat_ingress_ipv6               5261             5196        -65 (-1.24%)               247               243          -4 (-1.62%)
    bpf_overlay.o  tail_nodeport_nat_ipv6_egress                3482             3442        -40 (-1.15%)               204               201          -3 (-1.47%)
    bpf_xdp.o      tail_nodeport_nat_egress_ipv4               17200            15619      -1581 (-9.19%)              1111              1010        -101 (-9.09%)
    -------------  --------------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20221104163649.121784-6-andrii@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b57a37d0ee77013eaab53e3853825b2ee11d851
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Mon Jul 24 15:42:19 2023 +0300

    bpf: stop setting precise in current state
    
    [ Upstream commit f63181b6ae79fd3b034cde641db774268c2c3acf ]
    
    Setting reg->precise to true in current state is not necessary from
    correctness standpoint, but it does pessimise the whole precision (or
    rather "imprecision", because that's what we want to keep as much as
    possible) tracking. Why is somewhat subtle and my best attempt to
    explain this is recorded in an extensive comment for __mark_chain_precise()
    function. Some more careful thinking and code reading is probably required
    still to grok this completely, unfortunately. Whiteboarding and a bunch
    of extra handwaiving in person would be even more helpful, but is deemed
    impractical in Git commit.
    
    Next patch pushes this imprecision property even further, building on top of
    the insights described in this patch.
    
    End results are pretty nice, we get reduction in number of total instructions
    and states verified due to a better states reuse, as some of the states are now
    more generic and permissive due to less unnecessary precise=true requirements.
    
    SELFTESTS RESULTS
    =================
    
    $ ./veristat -C -e file,prog,insns,states ~/subprog-precise-results.csv ~/imprecise-early-results.csv | grep -v '+0'
    File                                     Program                 Total insns (A)  Total insns (B)  Total insns (DIFF)  Total states (A)  Total states (B)  Total states (DIFF)
    ---------------------------------------  ----------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    bpf_iter_ksym.bpf.linked1.o              dump_ksym                           347              285       -62 (-17.87%)                20                19          -1 (-5.00%)
    pyperf600_bpf_loop.bpf.linked1.o         on_event                           3678             3736        +58 (+1.58%)               276               285          +9 (+3.26%)
    setget_sockopt.bpf.linked1.o             skops_sockopt                      4038             3947        -91 (-2.25%)               347               343          -4 (-1.15%)
    test_l4lb.bpf.linked1.o                  balancer_ingress                   4559             2611     -1948 (-42.73%)               118               105        -13 (-11.02%)
    test_l4lb_noinline.bpf.linked1.o         balancer_ingress                   6279             6268        -11 (-0.18%)               237               236          -1 (-0.42%)
    test_misc_tcp_hdr_options.bpf.linked1.o  misc_estab                         1307             1303         -4 (-0.31%)               100                99          -1 (-1.00%)
    test_sk_lookup.bpf.linked1.o             ctx_narrow_access                   456              447         -9 (-1.97%)                39                38          -1 (-2.56%)
    test_sysctl_loop1.bpf.linked1.o          sysctl_tcp_mem                     1389             1384         -5 (-0.36%)                26                25          -1 (-3.85%)
    test_tc_dtime.bpf.linked1.o              egress_fwdns_prio101                518              485        -33 (-6.37%)                51                46          -5 (-9.80%)
    test_tc_dtime.bpf.linked1.o              egress_host                         519              468        -51 (-9.83%)                50                44         -6 (-12.00%)
    test_tc_dtime.bpf.linked1.o              ingress_fwdns_prio101               842             1000      +158 (+18.76%)                73                88        +15 (+20.55%)
    xdp_synproxy_kern.bpf.linked1.o          syncookie_tc                     405757           373173     -32584 (-8.03%)             25735             22882      -2853 (-11.09%)
    xdp_synproxy_kern.bpf.linked1.o          syncookie_xdp                    479055           371590   -107465 (-22.43%)             29145             22207      -6938 (-23.81%)
    ---------------------------------------  ----------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    
    Slight regression in test_tc_dtime.bpf.linked1.o/ingress_fwdns_prio101
    is left for a follow up, there might be some more precision-related bugs
    in existing BPF verifier logic.
    
    CILIUM RESULTS
    ==============
    
    $ ./veristat -C -e file,prog,insns,states ~/subprog-precise-results-cilium.csv ~/imprecise-early-results-cilium.csv | grep -v '+0'
    File           Program                         Total insns (A)  Total insns (B)  Total insns (DIFF)  Total states (A)  Total states (B)  Total states (DIFF)
    -------------  ------------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    bpf_host.o     cil_from_host                               762              556      -206 (-27.03%)                43                37         -6 (-13.95%)
    bpf_host.o     tail_handle_nat_fwd_ipv4                  23541            23426       -115 (-0.49%)              1538              1537          -1 (-0.07%)
    bpf_host.o     tail_nodeport_nat_egress_ipv4             33592            33566        -26 (-0.08%)              2163              2161          -2 (-0.09%)
    bpf_lxc.o      tail_handle_nat_fwd_ipv4                  23541            23426       -115 (-0.49%)              1538              1537          -1 (-0.07%)
    bpf_overlay.o  tail_nodeport_nat_egress_ipv4             33581            33543        -38 (-0.11%)              2160              2157          -3 (-0.14%)
    bpf_xdp.o      tail_handle_nat_fwd_ipv4                  21659            20920       -739 (-3.41%)              1440              1376         -64 (-4.44%)
    bpf_xdp.o      tail_handle_nat_fwd_ipv6                  17084            17039        -45 (-0.26%)               907               905          -2 (-0.22%)
    bpf_xdp.o      tail_lb_ipv4                              73442            73430        -12 (-0.02%)              4370              4369          -1 (-0.02%)
    bpf_xdp.o      tail_lb_ipv6                             152114           151895       -219 (-0.14%)              6493              6479         -14 (-0.22%)
    bpf_xdp.o      tail_nodeport_nat_egress_ipv4             17377            17200       -177 (-1.02%)              1125              1111         -14 (-1.24%)
    bpf_xdp.o      tail_nodeport_nat_ingress_ipv6             6405             6397         -8 (-0.12%)               309               308          -1 (-0.32%)
    bpf_xdp.o      tail_rev_nodeport_lb4                      7126             6934       -192 (-2.69%)               414               402         -12 (-2.90%)
    bpf_xdp.o      tail_rev_nodeport_lb6                     18059            17905       -154 (-0.85%)              1105              1096          -9 (-0.81%)
    -------------  ------------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20221104163649.121784-5-andrii@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56675ddcb011fbc2b68cd898a8d98bda742b3d55
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Mon Jul 24 15:42:18 2023 +0300

    bpf: allow precision tracking for programs with subprogs
    
    [ Upstream commit be2ef8161572ec1973124ebc50f56dafc2925e07 ]
    
    Stop forcing precise=true for SCALAR registers when BPF program has any
    subprograms. Current restriction means that any BPF program, as soon as
    it uses subprograms, will end up not getting any of the precision
    tracking benefits in reduction of number of verified states.
    
    This patch keeps the fallback mark_all_scalars_precise() behavior if
    precise marking has to cross function frames. E.g., if subprogram
    requires R1 (first input arg) to be marked precise, ideally we'd need to
    backtrack to the parent function and keep marking R1 and its
    dependencies as precise. But right now we give up and force all the
    SCALARs in any of the current and parent states to be forced to
    precise=true. We can lift that restriction in the future.
    
    But this patch fixes two issues identified when trying to enable
    precision tracking for subprogs.
    
    First, prevent "escaping" from top-most state in a global subprog. While
    with entry-level BPF program we never end up requesting precision for
    R1-R5 registers, because R2-R5 are not initialized (and so not readable
    in correct BPF program), and R1 is PTR_TO_CTX, not SCALAR, and so is
    implicitly precise. With global subprogs, though, it's different, as
    global subprog a) can have up to 5 SCALAR input arguments, which might
    get marked as precise=true and b) it is validated in isolation from its
    main entry BPF program. b) means that we can end up exhausting parent
    state chain and still not mark all registers in reg_mask as precise,
    which would lead to verifier bug warning.
    
    To handle that, we need to consider two cases. First, if the very first
    state is not immediately "checkpointed" (i.e., stored in state lookup
    hashtable), it will get correct first_insn_idx and last_insn_idx
    instruction set during state checkpointing. As such, this case is
    already handled and __mark_chain_precision() already handles that by
    just doing nothing when we reach to the very first parent state.
    st->parent will be NULL and we'll just stop. Perhaps some extra check
    for reg_mask and stack_mask is due here, but this patch doesn't address
    that issue.
    
    More problematic second case is when global function's initial state is
    immediately checkpointed before we manage to process the very first
    instruction. This is happening because when there is a call to global
    subprog from the main program the very first subprog's instruction is
    marked as pruning point, so before we manage to process first
    instruction we have to check and checkpoint state. This patch adds
    a special handling for such "empty" state, which is identified by having
    st->last_insn_idx set to -1. In such case, we check that we are indeed
    validating global subprog, and with some sanity checking we mark input
    args as precise if requested.
    
    Note that we also initialize state->first_insn_idx with correct start
    insn_idx offset. For main program zero is correct value, but for any
    subprog it's quite confusing to not have first_insn_idx set. This
    doesn't have any functional impact, but helps with debugging and state
    printing. We also explicitly initialize state->last_insns_idx instead of
    relying on is_state_visited() to do this with env->prev_insns_idx, which
    will be -1 on the very first instruction. This concludes necessary
    changes to handle specifically global subprog's precision tracking.
    
    Second identified problem was missed handling of BPF helper functions
    that call into subprogs (e.g., bpf_loop and few others). From precision
    tracking and backtracking logic's standpoint those are effectively calls
    into subprogs and should be called as BPF_PSEUDO_CALL calls.
    
    This patch takes the least intrusive way and just checks against a short
    list of current BPF helpers that do call subprogs, encapsulated in
    is_callback_calling_function() function. But to prevent accidentally
    forgetting to add new BPF helpers to this "list", we also do a sanity
    check in __check_func_call, which has to be called for each such special
    BPF helper, to validate that BPF helper is indeed recognized as
    callback-calling one. This should catch any missed checks in the future.
    Adding some special flags to be added in function proto definitions
    seemed like an overkill in this case.
    
    With the above changes, it's possible to remove forceful setting of
    reg->precise to true in __mark_reg_unknown, which turns on precision
    tracking both inside subprogs and entry progs that have subprogs. No
    warnings or errors were detected across all the selftests, but also when
    validating with veristat against internal Meta BPF objects and Cilium
    objects. Further, in some BPF programs there are noticeable reduction in
    number of states and instructions validated due to more effective
    precision tracking, especially benefiting syncookie test.
    
    $ ./veristat -C -e file,prog,insns,states ~/baseline-results.csv ~/subprog-precise-results.csv  | grep -v '+0'
    File                                      Program                     Total insns (A)  Total insns (B)  Total insns (DIFF)  Total states (A)  Total states (B)  Total states (DIFF)
    ----------------------------------------  --------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    pyperf600_bpf_loop.bpf.linked1.o          on_event                               3966             3678       -288 (-7.26%)               306               276         -30 (-9.80%)
    pyperf_global.bpf.linked1.o               on_event                               7563             7530        -33 (-0.44%)               520               517          -3 (-0.58%)
    pyperf_subprogs.bpf.linked1.o             on_event                              36358            36934       +576 (+1.58%)              2499              2531         +32 (+1.28%)
    setget_sockopt.bpf.linked1.o              skops_sockopt                          3965             4038        +73 (+1.84%)               343               347          +4 (+1.17%)
    test_cls_redirect_subprogs.bpf.linked1.o  cls_redirect                          64965            64901        -64 (-0.10%)              4619              4612          -7 (-0.15%)
    test_misc_tcp_hdr_options.bpf.linked1.o   misc_estab                             1491             1307      -184 (-12.34%)               110               100         -10 (-9.09%)
    test_pkt_access.bpf.linked1.o             test_pkt_access                         354              349         -5 (-1.41%)                25                24          -1 (-4.00%)
    test_sock_fields.bpf.linked1.o            egress_read_sock_fields                 435              375       -60 (-13.79%)                22                20          -2 (-9.09%)
    test_sysctl_loop2.bpf.linked1.o           sysctl_tcp_mem                         1508             1501         -7 (-0.46%)                29                28          -1 (-3.45%)
    test_tc_dtime.bpf.linked1.o               egress_fwdns_prio100                    468              435        -33 (-7.05%)                45                41          -4 (-8.89%)
    test_tc_dtime.bpf.linked1.o               ingress_fwdns_prio100                   398              408        +10 (+2.51%)                42                39          -3 (-7.14%)
    test_tc_dtime.bpf.linked1.o               ingress_fwdns_prio101                  1096              842      -254 (-23.18%)                97                73        -24 (-24.74%)
    test_tcp_hdr_options.bpf.linked1.o        estab                                  2758             2408      -350 (-12.69%)               208               181        -27 (-12.98%)
    test_urandom_usdt.bpf.linked1.o           urand_read_with_sema                    466              448        -18 (-3.86%)                31                28          -3 (-9.68%)
    test_urandom_usdt.bpf.linked1.o           urand_read_without_sema                 466              448        -18 (-3.86%)                31                28          -3 (-9.68%)
    test_urandom_usdt.bpf.linked1.o           urandlib_read_with_sema                 466              448        -18 (-3.86%)                31                28          -3 (-9.68%)
    test_urandom_usdt.bpf.linked1.o           urandlib_read_without_sema              466              448        -18 (-3.86%)                31                28          -3 (-9.68%)
    test_xdp_noinline.bpf.linked1.o           balancer_ingress_v6                    4302             4294         -8 (-0.19%)               257               256          -1 (-0.39%)
    xdp_synproxy_kern.bpf.linked1.o           syncookie_tc                         583722           405757   -177965 (-30.49%)             35846             25735     -10111 (-28.21%)
    xdp_synproxy_kern.bpf.linked1.o           syncookie_xdp                        609123           479055   -130068 (-21.35%)             35452             29145      -6307 (-17.79%)
    ----------------------------------------  --------------------------  ---------------  ---------------  ------------------  ----------------  ----------------  -------------------
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20221104163649.121784-4-andrii@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd33fbe4af2c7cd05c5f75798ca48a172302f5c6
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Wed Mar 8 20:52:43 2023 +0900

    scripts/kallsyms: update the usage in the comment block
    
    commit 79549da691edd4874c19d99c578a134471817c47 upstream.
    
    Commit 010a0aad39fc ("kallsyms: Correctly sequence symbols when
    CONFIG_LTO_CLANG=y") added --lto-clang, and updated the usage()
    function, but not the comment. Update it in the same way.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fab8c91e59cccf7661a643d1f053caa5797badd
Author: Yuma Ueda <cyan@0x00a1e9.dev>
Date:   Fri Nov 18 22:36:31 2022 +0900

    scripts/kallsyms.c Make the comment up-to-date with current implementation
    
    commit adc40221bf676f3e722d135889a7b913b4162dc2 upstream.
    
    The comment in scripts/kallsyms.c describing the usage of
    scripts/kallsyms does not reflect the latest implementation.
    Fix the comment to be equivalent to what the usage() function prints.
    
    Signed-off-by: Yuma Ueda <cyan@0x00a1e9.dev>
    Reviewed-by: Miguel Ojeda <ojeda@kernel.org>
    Link: https://lore.kernel.org/r/20221118133631.4554-1-cyan@0x00a1e9.dev
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 320f980bc0bb77b7af82bdde4e6f892dd60d94ed
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 6 11:14:50 2023 +0100

    kallsyms: add kallsyms_seqs_of_names to list of special symbols
    
    commit ced0f245ed951e2b8bd68f79c15238d7dd253662 upstream.
    
    My randconfig build setup ran into another kallsyms warning:
    
    Inconsistent kallsyms data
    Try make KALLSYMS_EXTRA_PASS=1 as a workaround
    
    After adding some debugging code to kallsyms.c, I saw that the recently
    added kallsyms_seqs_of_names symbol can sometimes cause the second stage
    table to be slightly longer than the first stage, which makes the
    build inconsistent.
    
    Add it to the exception table that contains all other kallsyms-generated
    symbols.
    
    Fixes: 60443c88f3a8 ("kallsyms: Improve the performance of kallsyms_lookup_name()")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7531eb07b254078a79116f470c345bc487e0219d
Author: Abe Kohandel <abe.kohandel@intel.com>
Date:   Tue Jun 6 16:18:44 2023 -0700

    spi: dw: Remove misleading comment for Mount Evans SoC
    
    commit 5b6d0b91f84cff3f28724076f93f6f9e2ef8d775 upstream.
    
    Remove a misleading comment about the DMA operations of the Intel Mount
    Evans SoC's SPI Controller as requested by Serge.
    
    Signed-off-by: Abe Kohandel <abe.kohandel@intel.com>
    Link: https://lore.kernel.org/linux-spi/20230606191333.247ucbf7h3tlooxf@mobilestation/
    Fixes: 0760d5d0e9f0 ("spi: dw: Add compatible for Intel Mount Evans SoC")
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Link: https://lore.kernel.org/r/20230606231844.726272-1-abe.kohandel@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70a3015683b007a0db4a1e858791b69afd45fc83
Author: Yunxiang Li <Yunxiang.Li@amd.com>
Date:   Thu Jun 22 10:18:03 2023 -0400

    drm/ttm: fix bulk_move corruption when adding a entry
    
    commit 4481913607e58196c48a4fef5e6f45350684ec3c upstream.
    
    When the resource is the first in the bulk_move range, adding it again
    (thus moving it to the tail) will corrupt the list since the first
    pointer is not moved. This eventually lead to null pointer deref in
    ttm_lru_bulk_move_del()
    
    Fixes: fee2ede15542 ("drm/ttm: rework bulk move handling v5")
    Signed-off-by: Yunxiang Li <Yunxiang.Li@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    CC: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20230622141902.28718-3-Yunxiang.Li@amd.com
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61622fa3791495129b27c71a25f3184a8c332c8c
Author: Mohamed Khalfella <mkhalfella@purestorage.com>
Date:   Fri Jul 14 20:33:41 2023 +0000

    tracing/histograms: Return an error if we fail to add histogram to hist_vars list
    
    commit 4b8b3905165ef98386a3c06f196c85d21292d029 upstream.
    
    Commit 6018b585e8c6 ("tracing/histograms: Add histograms to hist_vars if
    they have referenced variables") added a check to fail histogram creation
    if save_hist_vars() failed to add histogram to hist_vars list. But the
    commit failed to set ret to failed return code before jumping to
    unregister histogram, fix it.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230714203341.51396-1-mkhalfella@purestorage.com
    
    Cc: stable@vger.kernel.org
    Fixes: 6018b585e8c6 ("tracing/histograms: Add histograms to hist_vars if they have referenced variables")
    Signed-off-by: Mohamed Khalfella <mkhalfella@purestorage.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bae17da3ae4c21b26a6216d64b5e7d8fbc603ea2
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Tue Jun 6 21:59:23 2023 +0800

    jbd2: recheck chechpointing non-dirty buffer
    
    commit c2d6fd9d6f35079f1669f0100f05b46708c74b7f upstream.
    
    There is a long-standing metadata corruption issue that happens from
    time to time, but it's very difficult to reproduce and analyse, benefit
    from the JBD2_CYCLE_RECORD option, we found out that the problem is the
    checkpointing process miss to write out some buffers which are raced by
    another do_get_write_access(). Looks below for detail.
    
    jbd2_log_do_checkpoint() //transaction X
     //buffer A is dirty and not belones to any transaction
     __buffer_relink_io() //move it to the IO list
     __flush_batch()
      write_dirty_buffer()
                                 do_get_write_access()
                                 clear_buffer_dirty
                                 __jbd2_journal_file_buffer()
                                 //add buffer A to a new transaction Y
       lock_buffer(bh)
       //doesn't write out
     __jbd2_journal_remove_checkpoint()
     //finish checkpoint except buffer A
     //filesystem corrupt if the new transaction Y isn't fully write out.
    
    Due to the t_checkpoint_list walking loop in jbd2_log_do_checkpoint()
    have already handles waiting for buffers under IO and re-added new
    transaction to complete commit, and it also removing cleaned buffers,
    this makes sure the list will eventually get empty. So it's fine to
    leave buffers on the t_checkpoint_list while flushing out and completely
    stop using the t_checkpoint_io_list.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Tested-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230606135928.434610-2-yi.zhang@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9f0f20ab014abee3a514f98947a07220ebf4324
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Thu Jul 20 03:02:31 2023 +0300

    net: phy: prevent stale pointer dereference in phy_init()
    
    [ Upstream commit 1c613beaf877c0c0d755853dc62687e2013e55c4 ]
    
    mdio_bus_init() and phy_driver_register() both have error paths, and if
    those are ever hit, ethtool will have a stale pointer to the
    phy_ethtool_phy_ops stub structure, which references memory from a
    module that failed to load (phylib).
    
    It is probably hard to force an error in this code path even manually,
    but the error teardown path of phy_init() should be the same as
    phy_exit(), which is now simply not the case.
    
    Fixes: 55d8f053ce1b ("net: phy: Register ethtool PHY operations")
    Link: https://lore.kernel.org/netdev/ZLaiJ4G6TaJYGJyU@shell.armlinux.org.uk/
    Suggested-by: Russell King (Oracle) <linux@armlinux.org.uk>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20230720000231.1939689-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f311c7680014726ad16d779e3e2b5885033331d9
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:57 2023 +0000

    tcp: annotate data-races around fastopenq.max_qlen
    
    [ Upstream commit 70f360dd7042cb843635ece9d28335a4addff9eb ]
    
    This field can be read locklessly.
    
    Fixes: 1536e2857bd3 ("tcp: Add a TCP_FASTOPEN socket option to get a max backlog on its listner")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-12-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01a1563a09c03aecbcec7d4dd3b7aca5bb7fdcc7
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:56 2023 +0000

    tcp: annotate data-races around icsk->icsk_user_timeout
    
    [ Upstream commit 26023e91e12c68669db416b97234328a03d8e499 ]
    
    This field can be read locklessly from do_tcp_getsockopt()
    
    Fixes: dca43c75e7e5 ("tcp: Add TCP_USER_TIMEOUT socket option.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-11-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 918a1beb0abf96bfdb9b60038f74c2030ff34a53
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:55 2023 +0000

    tcp: annotate data-races around tp->notsent_lowat
    
    [ Upstream commit 1aeb87bc1440c5447a7fa2d6e3c2cca52cbd206b ]
    
    tp->notsent_lowat can be read locklessly from do_tcp_getsockopt()
    and tcp_poll().
    
    Fixes: c9bee3b7fdec ("tcp: TCP_NOTSENT_LOWAT socket option")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-10-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b02f8fce7cc5c074a2523f6cf841b9295a66bb7e
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:54 2023 +0000

    tcp: annotate data-races around rskq_defer_accept
    
    [ Upstream commit ae488c74422fb1dcd807c0201804b3b5e8a322a3 ]
    
    do_tcp_getsockopt() reads rskq_defer_accept while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-9-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17c3d7583399eb2c383c9645ca4f83ae62269e85
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:53 2023 +0000

    tcp: annotate data-races around tp->linger2
    
    [ Upstream commit 9df5335ca974e688389c875546e5819778a80d59 ]
    
    do_tcp_getsockopt() reads tp->linger2 while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-8-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e639397202435a0136b7cc4d255ffc982ed9876d
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:52 2023 +0000

    tcp: annotate data-races around icsk->icsk_syn_retries
    
    [ Upstream commit 3a037f0f3c4bfe44518f2fbb478aa2f99a9cd8bb ]
    
    do_tcp_getsockopt() and reqsk_timer_handler() read
    icsk->icsk_syn_retries while another cpu might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-7-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d27a1aa37e327e34fa7b13dacb314699df1fa890
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:51 2023 +0000

    tcp: annotate data-races around tp->keepalive_probes
    
    [ Upstream commit 6e5e1de616bf5f3df1769abc9292191dfad9110a ]
    
    do_tcp_getsockopt() reads tp->keepalive_probes while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-6-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 161b069389dddc2433d6e591d4877cca60d8bdcf
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:50 2023 +0000

    tcp: annotate data-races around tp->keepalive_intvl
    
    [ Upstream commit 5ecf9d4f52ff2f1d4d44c9b68bc75688e82f13b4 ]
    
    do_tcp_getsockopt() reads tp->keepalive_intvl while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-5-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87b8466eb0cd264db4f2c0be8e45a73697b8c34e
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:49 2023 +0000

    tcp: annotate data-races around tp->keepalive_time
    
    [ Upstream commit 4164245c76ff906c9086758e1c3f87082a7f5ef5 ]
    
    do_tcp_getsockopt() reads tp->keepalive_time while another cpu
    might change its value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-4-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c84a3d78ad81ea5b6893de49d6d3c535cad8c62
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:48 2023 +0000

    tcp: annotate data-races around tp->tsoffset
    
    [ Upstream commit dd23c9f1e8d5c1d2e3d29393412385ccb9c7a948 ]
    
    do_tcp_getsockopt() reads tp->tsoffset while another cpu
    might change its value.
    
    Fixes: 93be6ce0e91b ("tcp: set and get per-socket timestamp")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-3-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 949eb838803a8dbd0325ec7f94a84a863d3da001
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 19 21:28:47 2023 +0000

    tcp: annotate data-races around tp->tcp_tx_delay
    
    [ Upstream commit 348b81b68b13ebd489a3e6a46aa1c384c731c919 ]
    
    do_tcp_getsockopt() reads tp->tcp_tx_delay while another cpu
    might change its value.
    
    Fixes: a842fe1425cb ("tcp: add optional per socket transmit delay")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230719212857.3943972-2-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d4d6b083da9b033ddccef72d77f373c819ae3ea
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri Jun 30 15:33:14 2023 -0700

    Bluetooth: hci_sync: Avoid use-after-free in dbg for hci_remove_adv_monitor()
    
    [ Upstream commit de6dfcefd107667ce2dbedf4d9337f5ed557a4a1 ]
    
    KASAN reports that there's a use-after-free in
    hci_remove_adv_monitor(). Trawling through the disassembly, you can
    see that the complaint is from the access in bt_dev_dbg() under the
    HCI_ADV_MONITOR_EXT_MSFT case. The problem case happens because
    msft_remove_monitor() can end up freeing the monitor
    structure. Specifically:
      hci_remove_adv_monitor() ->
      msft_remove_monitor() ->
      msft_remove_monitor_sync() ->
      msft_le_cancel_monitor_advertisement_cb() ->
      hci_free_adv_monitor()
    
    Let's fix the problem by just stashing the relevant data when it's
    still valid.
    
    Fixes: 7cf5c2978f23 ("Bluetooth: hci_sync: Refactor remove Adv Monitor")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e969bfed84c1f88dc722a678ee08488e86f0ec1a
Author: Pauli Virtanen <pav@iki.fi>
Date:   Mon Jun 19 01:04:33 2023 +0300

    Bluetooth: ISO: fix iso_conn related locking and validity issues
    
    [ Upstream commit d40ae85ee62e3666f45bc61864b22121346f88ef ]
    
    sk->sk_state indicates whether iso_pi(sk)->conn is valid. Operations
    that check/update sk_state and access conn should hold lock_sock,
    otherwise they can race.
    
    The order of taking locks is hci_dev_lock > lock_sock > iso_conn_lock,
    which is how it is in connect/disconnect_cfm -> iso_conn_del ->
    iso_chan_del.
    
    Fix locking in iso_connect_cis/bis and sendmsg/recvmsg to take lock_sock
    around updating sk_state and conn.
    
    iso_conn_del must not occur during iso_connect_cis/bis, as it frees the
    iso_conn. Hold hdev->lock longer to prevent that.
    
    This should not reintroduce the issue fixed in commit 241f51931c35
    ("Bluetooth: ISO: Avoid circular locking dependency"), since the we
    acquire locks in order. We retain the fix in iso_sock_connect to release
    lock_sock before iso_connect_* acquires hdev->lock.
    
    Similarly for commit 6a5ad251b7cd ("Bluetooth: ISO: Fix possible
    circular locking dependency"). We retain the fix in iso_conn_ready to
    not acquire iso_conn_lock before lock_sock.
    
    iso_conn_add shall return iso_conn with valid hcon. Make it so also when
    reusing an old CIS connection waiting for disconnect timeout (see
    __iso_sock_close where conn->hcon is set to NULL).
    
    Trace with iso_conn_del after iso_chan_add in iso_connect_cis:
    ===============================================================
    iso_sock_create:771: sock 00000000be9b69b7
    iso_sock_init:693: sk 000000004dff667e
    iso_sock_bind:827: sk 000000004dff667e 70:1a:b8:98:ff:a2 type 1
    iso_sock_setsockopt:1289: sk 000000004dff667e
    iso_sock_setsockopt:1289: sk 000000004dff667e
    iso_sock_setsockopt:1289: sk 000000004dff667e
    iso_sock_connect:875: sk 000000004dff667e
    iso_connect_cis:353: 70:1a:b8:98:ff:a2 -> 28:3d:c2:4a:7e:da
    hci_get_route:1199: 70:1a:b8:98:ff:a2 -> 28:3d:c2:4a:7e:da
    hci_conn_add:1005: hci0 dst 28:3d:c2:4a:7e:da
    iso_conn_add:140: hcon 000000007b65d182 conn 00000000daf8625e
    __iso_chan_add:214: conn 00000000daf8625e
    iso_connect_cfm:1700: hcon 000000007b65d182 bdaddr 28:3d:c2:4a:7e:da status 12
    iso_conn_del:187: hcon 000000007b65d182 conn 00000000daf8625e, err 16
    iso_sock_clear_timer:117: sock 000000004dff667e state 3
        <Note: sk_state is BT_BOUND (3), so iso_connect_cis is still
        running at this point>
    iso_chan_del:153: sk 000000004dff667e, conn 00000000daf8625e, err 16
    hci_conn_del:1151: hci0 hcon 000000007b65d182 handle 65535
    hci_conn_unlink:1102: hci0: hcon 000000007b65d182
    hci_chan_list_flush:2780: hcon 000000007b65d182
    iso_sock_getsockopt:1376: sk 000000004dff667e
    iso_sock_getname:1070: sock 00000000be9b69b7, sk 000000004dff667e
    iso_sock_getname:1070: sock 00000000be9b69b7, sk 000000004dff667e
    iso_sock_getsockopt:1376: sk 000000004dff667e
    iso_sock_getname:1070: sock 00000000be9b69b7, sk 000000004dff667e
    iso_sock_getname:1070: sock 00000000be9b69b7, sk 000000004dff667e
    iso_sock_shutdown:1434: sock 00000000be9b69b7, sk 000000004dff667e, how 1
    __iso_sock_close:632: sk 000000004dff667e state 5 socket 00000000be9b69b7
         <Note: sk_state is BT_CONNECT (5), even though iso_chan_del sets
         BT_CLOSED (6). Only iso_connect_cis sets it to BT_CONNECT, so it
         must be that iso_chan_del occurred between iso_chan_add and end of
         iso_connect_cis.>
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    PGD 8000000006467067 P4D 8000000006467067 PUD 3f5f067 PMD 0
    Oops: 0000 [#1] PREEMPT SMP PTI
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-1.fc38 04/01/2014
    RIP: 0010:__iso_sock_close (net/bluetooth/iso.c:664) bluetooth
    ===============================================================
    
    Trace with iso_conn_del before iso_chan_add in iso_connect_cis:
    ===============================================================
    iso_connect_cis:356: 70:1a:b8:98:ff:a2 -> 28:3d:c2:4a:7e:da
    ...
    iso_conn_add:140: hcon 0000000093bc551f conn 00000000768ae504
    hci_dev_put:1487: hci0 orig refcnt 21
    hci_event_packet:7607: hci0: event 0x0e
    hci_cmd_complete_evt:4231: hci0: opcode 0x2062
    hci_cc_le_set_cig_params:3846: hci0: status 0x07
    hci_sent_cmd_data:3107: hci0 opcode 0x2062
    iso_connect_cfm:1703: hcon 0000000093bc551f bdaddr 28:3d:c2:4a:7e:da status 7
    iso_conn_del:187: hcon 0000000093bc551f conn 00000000768ae504, err 12
    hci_conn_del:1151: hci0 hcon 0000000093bc551f handle 65535
    hci_conn_unlink:1102: hci0: hcon 0000000093bc551f
    hci_chan_list_flush:2780: hcon 0000000093bc551f
    __iso_chan_add:214: conn 00000000768ae504
        <Note: this conn was already freed in iso_conn_del above>
    iso_sock_clear_timer:117: sock 0000000098323f95 state 3
    general protection fault, probably for non-canonical address 0x30b29c630930aec8: 0000 [#1] PREEMPT SMP PTI
    CPU: 1 PID: 1920 Comm: bluetoothd Tainted: G            E      6.3.0-rc7+ #4
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-1.fc38 04/01/2014
    RIP: 0010:detach_if_pending+0x28/0xd0
    Code: 90 90 0f 1f 44 00 00 48 8b 47 08 48 85 c0 0f 84 ad 00 00 00 55 89 d5 53 48 83 3f 00 48 89 fb 74 7d 66 90 48 8b 03 48 8b 53 08 <>
    RSP: 0018:ffffb90841a67d08 EFLAGS: 00010007
    RAX: 0000000000000000 RBX: ffff9141bd5061b8 RCX: 0000000000000000
    RDX: 30b29c630930aec8 RSI: ffff9141fdd21e80 RDI: ffff9141bd5061b8
    RBP: 0000000000000001 R08: 0000000000000000 R09: ffffb90841a67b88
    R10: 0000000000000003 R11: ffffffff8613f558 R12: ffff9141fdd21e80
    R13: 0000000000000000 R14: ffff9141b5976010 R15: ffff914185755338
    FS:  00007f45768bd840(0000) GS:ffff9141fdd00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000619000424074 CR3: 0000000009f5e005 CR4: 0000000000170ee0
    Call Trace:
     <TASK>
     timer_delete+0x48/0x80
     try_to_grab_pending+0xdf/0x170
     __cancel_work+0x37/0xb0
     iso_connect_cis+0x141/0x400 [bluetooth]
    ===============================================================
    
    Trace with NULL conn->hcon in state BT_CONNECT:
    ===============================================================
    __iso_sock_close:619: sk 00000000f7c71fc5 state 1 socket 00000000d90c5fe5
    ...
    __iso_sock_close:619: sk 00000000f7c71fc5 state 8 socket 00000000d90c5fe5
    iso_chan_del:153: sk 00000000f7c71fc5, conn 0000000022c03a7e, err 104
    ...
    iso_sock_connect:862: sk 00000000129b56c3
    iso_connect_cis:348: 70:1a:b8:98:ff:a2 -> 28:3d:c2:4a:7d:2a
    hci_get_route:1199: 70:1a:b8:98:ff:a2 -> 28:3d:c2:4a:7d:2a
    hci_dev_hold:1495: hci0 orig refcnt 19
    __iso_chan_add:214: conn 0000000022c03a7e
        <Note: reusing old conn>
    iso_sock_clear_timer:117: sock 00000000129b56c3 state 3
    ...
    iso_sock_ready:1485: sk 00000000129b56c3
    ...
    iso_sock_sendmsg:1077: sock 00000000e5013966, sk 00000000129b56c3
    BUG: kernel NULL pointer dereference, address: 00000000000006a8
    PGD 0 P4D 0
    Oops: 0000 [#1] PREEMPT SMP PTI
    CPU: 1 PID: 1403 Comm: wireplumber Tainted: G            E      6.3.0-rc7+ #4
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-1.fc38 04/01/2014
    RIP: 0010:iso_sock_sendmsg+0x63/0x2a0 [bluetooth]
    ===============================================================
    
    Fixes: 241f51931c35 ("Bluetooth: ISO: Avoid circular locking dependency")
    Fixes: 6a5ad251b7cd ("Bluetooth: ISO: Fix possible circular locking dependency")
    Signed-off-by: Pauli Virtanen <pav@iki.fi>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59bd1e476bbc7bc6dff3c61bba787095a4839796
Author: Pauli Virtanen <pav@iki.fi>
Date:   Mon Jun 19 01:04:32 2023 +0300

    Bluetooth: hci_event: call disconnect callback before deleting conn
    
    [ Upstream commit 7f7cfcb6f0825652973b780f248603e23f16ee90 ]
    
    In hci_cs_disconnect, we do hci_conn_del even if disconnection failed.
    
    ISO, L2CAP and SCO connections refer to the hci_conn without
    hci_conn_get, so disconn_cfm must be called so they can clean up their
    conn, otherwise use-after-free occurs.
    
    ISO:
    ==========================================================
    iso_sock_connect:880: sk 00000000eabd6557
    iso_connect_cis:356: 70:1a:b8:98:ff:a2 -> 28:3d:c2:4a:7e:da
    ...
    iso_conn_add:140: hcon 000000001696f1fd conn 00000000b6251073
    hci_dev_put:1487: hci0 orig refcnt 17
    __iso_chan_add:214: conn 00000000b6251073
    iso_sock_clear_timer:117: sock 00000000eabd6557 state 3
    ...
    hci_rx_work:4085: hci0 Event packet
    hci_event_packet:7601: hci0: event 0x0f
    hci_cmd_status_evt:4346: hci0: opcode 0x0406
    hci_cs_disconnect:2760: hci0: status 0x0c
    hci_sent_cmd_data:3107: hci0 opcode 0x0406
    hci_conn_del:1151: hci0 hcon 000000001696f1fd handle 2560
    hci_conn_unlink:1102: hci0: hcon 000000001696f1fd
    hci_conn_drop:1451: hcon 00000000d8521aaf orig refcnt 2
    hci_chan_list_flush:2780: hcon 000000001696f1fd
    hci_dev_put:1487: hci0 orig refcnt 21
    hci_dev_put:1487: hci0 orig refcnt 20
    hci_req_cmd_complete:3978: opcode 0x0406 status 0x0c
    ... <no iso_* activity on sk/conn> ...
    iso_sock_sendmsg:1098: sock 00000000dea5e2e0, sk 00000000eabd6557
    BUG: kernel NULL pointer dereference, address: 0000000000000668
    PGD 0 P4D 0
    Oops: 0000 [#1] PREEMPT SMP PTI
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-1.fc38 04/01/2014
    RIP: 0010:iso_sock_sendmsg (net/bluetooth/iso.c:1112) bluetooth
    ==========================================================
    
    L2CAP:
    ==================================================================
    hci_cmd_status_evt:4359: hci0: opcode 0x0406
    hci_cs_disconnect:2760: hci0: status 0x0c
    hci_sent_cmd_data:3085: hci0 opcode 0x0406
    hci_conn_del:1151: hci0 hcon ffff88800c999000 handle 3585
    hci_conn_unlink:1102: hci0: hcon ffff88800c999000
    hci_chan_list_flush:2780: hcon ffff88800c999000
    hci_chan_del:2761: hci0 hcon ffff88800c999000 chan ffff888018ddd280
    ...
    BUG: KASAN: slab-use-after-free in hci_send_acl+0x2d/0x540 [bluetooth]
    Read of size 8 at addr ffff888018ddd298 by task bluetoothd/1175
    
    CPU: 0 PID: 1175 Comm: bluetoothd Tainted: G            E      6.4.0-rc4+ #2
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-1.fc38 04/01/2014
    Call Trace:
     <TASK>
     dump_stack_lvl+0x5b/0x90
     print_report+0xcf/0x670
     ? __virt_addr_valid+0xf8/0x180
     ? hci_send_acl+0x2d/0x540 [bluetooth]
     kasan_report+0xa8/0xe0
     ? hci_send_acl+0x2d/0x540 [bluetooth]
     hci_send_acl+0x2d/0x540 [bluetooth]
     ? __pfx___lock_acquire+0x10/0x10
     l2cap_chan_send+0x1fd/0x1300 [bluetooth]
     ? l2cap_sock_sendmsg+0xf2/0x170 [bluetooth]
     ? __pfx_l2cap_chan_send+0x10/0x10 [bluetooth]
     ? lock_release+0x1d5/0x3c0
     ? mark_held_locks+0x1a/0x90
     l2cap_sock_sendmsg+0x100/0x170 [bluetooth]
     sock_write_iter+0x275/0x280
     ? __pfx_sock_write_iter+0x10/0x10
     ? __pfx___lock_acquire+0x10/0x10
     do_iter_readv_writev+0x176/0x220
     ? __pfx_do_iter_readv_writev+0x10/0x10
     ? find_held_lock+0x83/0xa0
     ? selinux_file_permission+0x13e/0x210
     do_iter_write+0xda/0x340
     vfs_writev+0x1b4/0x400
     ? __pfx_vfs_writev+0x10/0x10
     ? __seccomp_filter+0x112/0x750
     ? populate_seccomp_data+0x182/0x220
     ? __fget_light+0xdf/0x100
     ? do_writev+0x19d/0x210
     do_writev+0x19d/0x210
     ? __pfx_do_writev+0x10/0x10
     ? mark_held_locks+0x1a/0x90
     do_syscall_64+0x60/0x90
     ? lockdep_hardirqs_on_prepare+0x149/0x210
     ? do_syscall_64+0x6c/0x90
     ? lockdep_hardirqs_on_prepare+0x149/0x210
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    RIP: 0033:0x7ff45cb23e64
    Code: 15 d1 1f 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 f3 0f 1e fa 80 3d 9d a7 0d 00 00 74 13 b8 14 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 c3 0f 1f 00 48 83 ec 28 89 54 24 1c 48 89
    RSP: 002b:00007fff21ae09b8 EFLAGS: 00000202 ORIG_RAX: 0000000000000014
    RAX: ffffffffffffffda RBX: 0000000000000001 RCX: 00007ff45cb23e64
    RDX: 0000000000000001 RSI: 00007fff21ae0aa0 RDI: 0000000000000017
    RBP: 00007fff21ae0aa0 R08: 000000000095a8a0 R09: 0000607000053f40
    R10: 0000000000000001 R11: 0000000000000202 R12: 00007fff21ae0ac0
    R13: 00000fffe435c150 R14: 00007fff21ae0a80 R15: 000060f000000040
     </TASK>
    
    Allocated by task 771:
     kasan_save_stack+0x33/0x60
     kasan_set_track+0x25/0x30
     __kasan_kmalloc+0xaa/0xb0
     hci_chan_create+0x67/0x1b0 [bluetooth]
     l2cap_conn_add.part.0+0x17/0x590 [bluetooth]
     l2cap_connect_cfm+0x266/0x6b0 [bluetooth]
     hci_le_remote_feat_complete_evt+0x167/0x310 [bluetooth]
     hci_event_packet+0x38d/0x800 [bluetooth]
     hci_rx_work+0x287/0xb20 [bluetooth]
     process_one_work+0x4f7/0x970
     worker_thread+0x8f/0x620
     kthread+0x17f/0x1c0
     ret_from_fork+0x2c/0x50
    
    Freed by task 771:
     kasan_save_stack+0x33/0x60
     kasan_set_track+0x25/0x30
     kasan_save_free_info+0x2e/0x50
     ____kasan_slab_free+0x169/0x1c0
     slab_free_freelist_hook+0x9e/0x1c0
     __kmem_cache_free+0xc0/0x310
     hci_chan_list_flush+0x46/0x90 [bluetooth]
     hci_conn_cleanup+0x7d/0x330 [bluetooth]
     hci_cs_disconnect+0x35d/0x530 [bluetooth]
     hci_cmd_status_evt+0xef/0x2b0 [bluetooth]
     hci_event_packet+0x38d/0x800 [bluetooth]
     hci_rx_work+0x287/0xb20 [bluetooth]
     process_one_work+0x4f7/0x970
     worker_thread+0x8f/0x620
     kthread+0x17f/0x1c0
     ret_from_fork+0x2c/0x50
    ==================================================================
    
    Fixes: b8d290525e39 ("Bluetooth: clean up connection in hci_cs_disconnect")
    Signed-off-by: Pauli Virtanen <pav@iki.fi>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13ad45ad14df992a6754a130a19abc8c142d54e2
Author: Pauli Virtanen <pav@iki.fi>
Date:   Mon Jun 19 01:04:31 2023 +0300

    Bluetooth: use RCU for hci_conn_params and iterate safely in hci_sync
    
    [ Upstream commit 195ef75e19287b4bc413da3e3e3722b030ac881e ]
    
    hci_update_accept_list_sync iterates over hdev->pend_le_conns and
    hdev->pend_le_reports, and waits for controller events in the loop body,
    without holding hdev lock.
    
    Meanwhile, these lists and the items may be modified e.g. by
    le_scan_cleanup. This can invalidate the list cursor or any other item
    in the list, resulting to invalid behavior (eg use-after-free).
    
    Use RCU for the hci_conn_params action lists. Since the loop bodies in
    hci_sync block and we cannot use RCU or hdev->lock for the whole loop,
    copy list items first and then iterate on the copy. Only the flags field
    is written from elsewhere, so READ_ONCE/WRITE_ONCE should guarantee we
    read valid values.
    
    Free params everywhere with hci_conn_params_free so the cleanup is
    guaranteed to be done properly.
    
    This fixes the following, which can be triggered e.g. by BlueZ new
    mgmt-tester case "Add + Remove Device Nowait - Success", or by changing
    hci_le_set_cig_params to always return false, and running iso-tester:
    
    ==================================================================
    BUG: KASAN: slab-use-after-free in hci_update_passive_scan_sync (net/bluetooth/hci_sync.c:2536 net/bluetooth/hci_sync.c:2723 net/bluetooth/hci_sync.c:2841)
    Read of size 8 at addr ffff888001265018 by task kworker/u3:0/32
    
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-1.fc38 04/01/2014
    Workqueue: hci0 hci_cmd_sync_work
    Call Trace:
    <TASK>
    dump_stack_lvl (./arch/x86/include/asm/irqflags.h:134 lib/dump_stack.c:107)
    print_report (mm/kasan/report.c:320 mm/kasan/report.c:430)
    ? __virt_addr_valid (./include/linux/mmzone.h:1915 ./include/linux/mmzone.h:2011 arch/x86/mm/physaddr.c:65)
    ? hci_update_passive_scan_sync (net/bluetooth/hci_sync.c:2536 net/bluetooth/hci_sync.c:2723 net/bluetooth/hci_sync.c:2841)
    kasan_report (mm/kasan/report.c:538)
    ? hci_update_passive_scan_sync (net/bluetooth/hci_sync.c:2536 net/bluetooth/hci_sync.c:2723 net/bluetooth/hci_sync.c:2841)
    hci_update_passive_scan_sync (net/bluetooth/hci_sync.c:2536 net/bluetooth/hci_sync.c:2723 net/bluetooth/hci_sync.c:2841)
    ? __pfx_hci_update_passive_scan_sync (net/bluetooth/hci_sync.c:2780)
    ? mutex_lock (kernel/locking/mutex.c:282)
    ? __pfx_mutex_lock (kernel/locking/mutex.c:282)
    ? __pfx_mutex_unlock (kernel/locking/mutex.c:538)
    ? __pfx_update_passive_scan_sync (net/bluetooth/hci_sync.c:2861)
    hci_cmd_sync_work (net/bluetooth/hci_sync.c:306)
    process_one_work (./arch/x86/include/asm/preempt.h:27 kernel/workqueue.c:2399)
    worker_thread (./include/linux/list.h:292 kernel/workqueue.c:2538)
    ? __pfx_worker_thread (kernel/workqueue.c:2480)
    kthread (kernel/kthread.c:376)
    ? __pfx_kthread (kernel/kthread.c:331)
    ret_from_fork (arch/x86/entry/entry_64.S:314)
    </TASK>
    
    Allocated by task 31:
    kasan_save_stack (mm/kasan/common.c:46)
    kasan_set_track (mm/kasan/common.c:52)
    __kasan_kmalloc (mm/kasan/common.c:374 mm/kasan/common.c:383)
    hci_conn_params_add (./include/linux/slab.h:580 ./include/linux/slab.h:720 net/bluetooth/hci_core.c:2277)
    hci_connect_le_scan (net/bluetooth/hci_conn.c:1419 net/bluetooth/hci_conn.c:1589)
    hci_connect_cis (net/bluetooth/hci_conn.c:2266)
    iso_connect_cis (net/bluetooth/iso.c:390)
    iso_sock_connect (net/bluetooth/iso.c:899)
    __sys_connect (net/socket.c:2003 net/socket.c:2020)
    __x64_sys_connect (net/socket.c:2027)
    do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
    entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    
    Freed by task 15:
    kasan_save_stack (mm/kasan/common.c:46)
    kasan_set_track (mm/kasan/common.c:52)
    kasan_save_free_info (mm/kasan/generic.c:523)
    __kasan_slab_free (mm/kasan/common.c:238 mm/kasan/common.c:200 mm/kasan/common.c:244)
    __kmem_cache_free (mm/slub.c:1807 mm/slub.c:3787 mm/slub.c:3800)
    hci_conn_params_del (net/bluetooth/hci_core.c:2323)
    le_scan_cleanup (net/bluetooth/hci_conn.c:202)
    process_one_work (./arch/x86/include/asm/preempt.h:27 kernel/workqueue.c:2399)
    worker_thread (./include/linux/list.h:292 kernel/workqueue.c:2538)
    kthread (kernel/kthread.c:376)
    ret_from_fork (arch/x86/entry/entry_64.S:314)
    ==================================================================
    
    Fixes: e8907f76544f ("Bluetooth: hci_sync: Make use of hci_cmd_sync_queue set 3")
    Signed-off-by: Pauli Virtanen <pav@iki.fi>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e18922ce3e3169eb97838d1dcba2d679bcca446c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jul 20 09:17:21 2023 +0200

    netfilter: nf_tables: skip bound chain on rule flush
    
    [ Upstream commit 6eaf41e87a223ae6f8e7a28d6e78384ad7e407f8 ]
    
    Skip bound chain when flushing table rules, the rule that owns this
    chain releases these objects.
    
    Otherwise, the following warning is triggered:
    
      WARNING: CPU: 2 PID: 1217 at net/netfilter/nf_tables_api.c:2013 nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
      CPU: 2 PID: 1217 Comm: chain-flush Not tainted 6.1.39 #1
      RIP: 0010:nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Reported-by: Kevin Rich <kevinrich1337@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec3e856075c54a04df13c6c862dc0bff9722917a
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Jul 19 20:19:43 2023 +0200

    netfilter: nf_tables: skip bound chain in netns release path
    
    [ Upstream commit 751d460ccff3137212f47d876221534bf0490996 ]
    
    Skip bound chain from netns release path, the rule that owns this chain
    releases these objects.
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90c3955beb858bb52a9e5c4380ed0e520e3730d1
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jul 19 21:08:21 2023 +0200

    netfilter: nft_set_pipapo: fix improper element removal
    
    [ Upstream commit 87b5a5c209405cb6b57424cdfa226a6dbd349232 ]
    
    end key should be equal to start unless NFT_SET_EXT_KEY_END is present.
    
    Its possible to add elements that only have a start key
    ("{ 1.0.0.0 . 2.0.0.0 }") without an internval end.
    
    Insertion treats this via:
    
    if (nft_set_ext_exists(ext, NFT_SET_EXT_KEY_END))
       end = (const u8 *)nft_set_ext_key_end(ext)->data;
    else
       end = start;
    
    but removal side always uses nft_set_ext_key_end().
    This is wrong and leads to garbage remaining in the set after removal
    next lookup/insert attempt will give:
    
    BUG: KASAN: slab-use-after-free in pipapo_get+0x8eb/0xb90
    Read of size 1 at addr ffff888100d50586 by task nft-pipapo_uaf_/1399
    Call Trace:
     kasan_report+0x105/0x140
     pipapo_get+0x8eb/0xb90
     nft_pipapo_insert+0x1dc/0x1710
     nf_tables_newsetelem+0x31f5/0x4e00
     ..
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Reported-by: lonial con <kongln9170@gmail.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f372992820be9e6a559262940110b84017f07d6b
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Jul 18 01:30:33 2023 +0200

    netfilter: nf_tables: can't schedule in nft_chain_validate
    
    [ Upstream commit 314c82841602a111c04a7210c21dc77e0d560242 ]
    
    Can be called via nft set element list iteration, which may acquire
    rcu and/or bh read lock (depends on set type).
    
    BUG: sleeping function called from invalid context at net/netfilter/nf_tables_api.c:3353
    in_atomic(): 0, irqs_disabled(): 0, non_block: 0, pid: 1232, name: nft
    preempt_count: 0, expected: 0
    RCU nest depth: 1, expected: 0
    2 locks held by nft/1232:
     #0: ffff8881180e3ea8 (&nft_net->commit_mutex){+.+.}-{3:3}, at: nf_tables_valid_genid
     #1: ffffffff83f5f540 (rcu_read_lock){....}-{1:2}, at: rcu_lock_acquire
    Call Trace:
     nft_chain_validate
     nft_lookup_validate_setelem
     nft_pipapo_walk
     nft_lookup_validate
     nft_chain_validate
     nft_immediate_validate
     nft_chain_validate
     nf_tables_validate
     nf_tables_abort
    
    No choice but to move it to nf_tables_validate().
    
    Fixes: 81ea01066741 ("netfilter: nf_tables: add rescheduling points during loop detection walks")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6026fa4f470262953d03d581c2b34a59c93c4146
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jul 20 00:29:58 2023 +0200

    netfilter: nf_tables: fix spurious set element insertion failure
    
    [ Upstream commit ddbd8be68941985f166f5107109a90ce13147c44 ]
    
    On some platforms there is a padding hole in the nft_verdict
    structure, between the verdict code and the chain pointer.
    
    On element insertion, if the new element clashes with an existing one and
    NLM_F_EXCL flag isn't set, we want to ignore the -EEXIST error as long as
    the data associated with duplicated element is the same as the existing
    one.  The data equality check uses memcmp.
    
    For normal data (NFT_DATA_VALUE) this works fine, but for NFT_DATA_VERDICT
    padding area leads to spurious failure even if the verdict data is the
    same.
    
    This then makes the insertion fail with 'already exists' error, even
    though the new "key : data" matches an existing entry and userspace
    told the kernel that it doesn't want to receive an error indication.
    
    Fixes: c016c7e45ddf ("netfilter: nf_tables: honor NLM_F_EXCL flag in set element insertion")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1dc350a371a2208cb7ff425a917cb57e098496a
Author: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
Date:   Thu Jul 20 09:20:21 2023 +0100

    ALSA: hda/realtek: Fix generic fixup definition for cs35l41 amp
    
    [ Upstream commit f7b069cf08816252f494d193b9ecdff172bf9aa1 ]
    
    Generic fixup for CS35L41 amplifies should not have vendor specific
    chained fixup. For ThinkPad laptops with led issue, we can just add
    specific fixup.
    
    Fixes: a6ac60b36dade (ALSA: hda/realtek: Fix mute led issue on thinkpad with cs35l41 s-codec)
    Signed-off-by: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20230720082022.13033-1-vitalyr@opensource.cirrus.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 050c24656a94fd14ac8ecea383d4c47c636d78db
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Tue Jul 18 10:41:51 2023 -0700

    llc: Don't drop packet from non-root netns.
    
    [ Upstream commit 6631463b6e6673916d2481f692938f393148aa82 ]
    
    Now these upper layer protocol handlers can be called from llc_rcv()
    as sap->rcv_func(), which is registered by llc_sap_open().
    
      * function which is passed to register_8022_client()
        -> no in-kernel user calls register_8022_client().
    
      * snap_rcv()
        `- proto->rcvfunc() : registered by register_snap_client()
           -> aarp_rcv() and atalk_rcv() drop packets from non-root netns
    
      * stp_pdu_rcv()
        `- garp_protos[]->rcv() : registered by stp_proto_register()
           -> garp_pdu_rcv() and br_stp_rcv() are netns-aware
    
    So, we can safely remove the netns restriction in llc_rcv().
    
    Fixes: e730c15519d0 ("[NET]: Make packet reception network namespace safe")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50e4b32d2e58b7487ebb0a16d5de9cbde56f7949
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Sat Jul 15 16:16:56 2023 +0800

    fbdev: au1200fb: Fix missing IRQ check in au1200fb_drv_probe
    
    [ Upstream commit 4e88761f5f8c7869f15a2046b1a1116f4fab4ac8 ]
    
    This func misses checking for platform_get_irq()'s call and may passes the
    negative error codes to request_irq(), which takes unsigned IRQ #,
    causing it to fail with -EINVAL, overriding an original error code.
    
    Fix this by stop calling request_irq() with invalid IRQ #s.
    
    Fixes: 1630d85a8312 ("au1200fb: fix hardcoded IRQ")
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a44ff125731f18a7bacd48be4e3a6e4df322a9ac
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Jul 17 14:59:18 2023 -0700

    Revert "tcp: avoid the lookup process failing to get sk in ehash table"
    
    [ Upstream commit 81b3ade5d2b98ad6e0a473b0e1e420a801275592 ]
    
    This reverts commit 3f4ca5fafc08881d7a57daa20449d171f2887043.
    
    Commit 3f4ca5fafc08 ("tcp: avoid the lookup process failing to get sk in
    ehash table") reversed the order in how a socket is inserted into ehash
    to fix an issue that ehash-lookup could fail when reqsk/full sk/twsk are
    swapped.  However, it introduced another lookup failure.
    
    The full socket in ehash is allocated from a slab with SLAB_TYPESAFE_BY_RCU
    and does not have SOCK_RCU_FREE, so the socket could be reused even while
    it is being referenced on another CPU doing RCU lookup.
    
    Let's say a socket is reused and inserted into the same hash bucket during
    lookup.  After the blamed commit, a new socket is inserted at the end of
    the list.  If that happens, we will skip sockets placed after the previous
    position of the reused socket, resulting in ehash lookup failure.
    
    As described in Documentation/RCU/rculist_nulls.rst, we should insert a
    new socket at the head of the list to avoid such an issue.
    
    This issue, the swap-lookup-failure, and another variant reported in [0]
    can all be handled properly by adding a locked ehash lookup suggested by
    Eric Dumazet [1].
    
    However, this issue could occur for every packet, thus more likely than
    the other two races, so let's revert the change for now.
    
    Link: https://lore.kernel.org/netdev/20230606064306.9192-1-duanmuquan@baidu.com/ [0]
    Link: https://lore.kernel.org/netdev/CANn89iK8snOz8TYOhhwfimC7ykYA78GA3Nyv8x06SZYa1nKdyA@mail.gmail.com/ [1]
    Fixes: 3f4ca5fafc08 ("tcp: avoid the lookup process failing to get sk in ehash table")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230717215918.15723-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1a4d697a9ec08566e419d28790911b99285a0aa
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Mon Jul 17 22:45:19 2023 +0800

    net:ipv6: check return value of pskb_trim()
    
    [ Upstream commit 4258faa130be4ea43e5e2d839467da421b8ff274 ]
    
    goto tx_err if an unexpected result is returned by pskb_tirm()
    in ip6erspan_tunnel_xmit().
    
    Fixes: 5a963eb61b7c ("ip6_gre: Add ERSPAN native tunnel support")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 205bad1b3042ecb142eb869aeb3f0968660a22d7
Author: Wang Ming <machel@vivo.com>
Date:   Mon Jul 17 17:59:19 2023 +0800

    net: ipv4: Use kfree_sensitive instead of kfree
    
    [ Upstream commit daa751444fd9d4184270b1479d8af49aaf1a1ee6 ]
    
    key might contain private part of the key, so better use
    kfree_sensitive to free it.
    
    Fixes: 38320c70d282 ("[IPSEC]: Use crypto_aead and authenc in ESP")
    Signed-off-by: Wang Ming <machel@vivo.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fac47182d3c2cd3c2153f6967e542bf23b090657
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 17 14:44:45 2023 +0000

    tcp: annotate data-races around tcp_rsk(req)->ts_recent
    
    [ Upstream commit eba20811f32652bc1a52d5e7cc403859b86390d9 ]
    
    TCP request sockets are lockless, tcp_rsk(req)->ts_recent
    can change while being read by another cpu as syzbot noticed.
    
    This is harmless, but we should annotate the known races.
    
    Note that tcp_check_req() changes req->ts_recent a bit early,
    we might change this in the future.
    
    BUG: KCSAN: data-race in tcp_check_req / tcp_check_req
    
    write to 0xffff88813c8afb84 of 4 bytes by interrupt on cpu 1:
    tcp_check_req+0x694/0xc70 net/ipv4/tcp_minisocks.c:762
    tcp_v4_rcv+0x12db/0x1b70 net/ipv4/tcp_ipv4.c:2071
    ip_protocol_deliver_rcu+0x356/0x6d0 net/ipv4/ip_input.c:205
    ip_local_deliver_finish+0x13c/0x1a0 net/ipv4/ip_input.c:233
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_local_deliver+0xec/0x1c0 net/ipv4/ip_input.c:254
    dst_input include/net/dst.h:468 [inline]
    ip_rcv_finish net/ipv4/ip_input.c:449 [inline]
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_rcv+0x197/0x270 net/ipv4/ip_input.c:569
    __netif_receive_skb_one_core net/core/dev.c:5493 [inline]
    __netif_receive_skb+0x90/0x1b0 net/core/dev.c:5607
    process_backlog+0x21f/0x380 net/core/dev.c:5935
    __napi_poll+0x60/0x3b0 net/core/dev.c:6498
    napi_poll net/core/dev.c:6565 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6698
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    do_softirq+0x7e/0xb0 kernel/softirq.c:472
    __local_bh_enable_ip+0x64/0x70 kernel/softirq.c:396
    local_bh_enable+0x1f/0x20 include/linux/bottom_half.h:33
    rcu_read_unlock_bh include/linux/rcupdate.h:843 [inline]
    __dev_queue_xmit+0xabb/0x1d10 net/core/dev.c:4271
    dev_queue_xmit include/linux/netdevice.h:3088 [inline]
    neigh_hh_output include/net/neighbour.h:528 [inline]
    neigh_output include/net/neighbour.h:542 [inline]
    ip_finish_output2+0x700/0x840 net/ipv4/ip_output.c:229
    ip_finish_output+0xf4/0x240 net/ipv4/ip_output.c:317
    NF_HOOK_COND include/linux/netfilter.h:292 [inline]
    ip_output+0xe5/0x1b0 net/ipv4/ip_output.c:431
    dst_output include/net/dst.h:458 [inline]
    ip_local_out net/ipv4/ip_output.c:126 [inline]
    __ip_queue_xmit+0xa4d/0xa70 net/ipv4/ip_output.c:533
    ip_queue_xmit+0x38/0x40 net/ipv4/ip_output.c:547
    __tcp_transmit_skb+0x1194/0x16e0 net/ipv4/tcp_output.c:1399
    tcp_transmit_skb net/ipv4/tcp_output.c:1417 [inline]
    tcp_write_xmit+0x13ff/0x2fd0 net/ipv4/tcp_output.c:2693
    __tcp_push_pending_frames+0x6a/0x1a0 net/ipv4/tcp_output.c:2877
    tcp_push_pending_frames include/net/tcp.h:1952 [inline]
    __tcp_sock_set_cork net/ipv4/tcp.c:3336 [inline]
    tcp_sock_set_cork+0xe8/0x100 net/ipv4/tcp.c:3343
    rds_tcp_xmit_path_complete+0x3b/0x40 net/rds/tcp_send.c:52
    rds_send_xmit+0xf8d/0x1420 net/rds/send.c:422
    rds_send_worker+0x42/0x1d0 net/rds/threads.c:200
    process_one_work+0x3e6/0x750 kernel/workqueue.c:2408
    worker_thread+0x5f2/0xa10 kernel/workqueue.c:2555
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    read to 0xffff88813c8afb84 of 4 bytes by interrupt on cpu 0:
    tcp_check_req+0x32a/0xc70 net/ipv4/tcp_minisocks.c:622
    tcp_v4_rcv+0x12db/0x1b70 net/ipv4/tcp_ipv4.c:2071
    ip_protocol_deliver_rcu+0x356/0x6d0 net/ipv4/ip_input.c:205
    ip_local_deliver_finish+0x13c/0x1a0 net/ipv4/ip_input.c:233
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_local_deliver+0xec/0x1c0 net/ipv4/ip_input.c:254
    dst_input include/net/dst.h:468 [inline]
    ip_rcv_finish net/ipv4/ip_input.c:449 [inline]
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip_rcv+0x197/0x270 net/ipv4/ip_input.c:569
    __netif_receive_skb_one_core net/core/dev.c:5493 [inline]
    __netif_receive_skb+0x90/0x1b0 net/core/dev.c:5607
    process_backlog+0x21f/0x380 net/core/dev.c:5935
    __napi_poll+0x60/0x3b0 net/core/dev.c:6498
    napi_poll net/core/dev.c:6565 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6698
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    run_ksoftirqd+0x17/0x20 kernel/softirq.c:939
    smpboot_thread_fn+0x30a/0x4a0 kernel/smpboot.c:164
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    value changed: 0x1cd237f1 -> 0x1cd237f2
    
    Fixes: 079096f103fa ("tcp/dccp: install syn_recv requests into ehash table")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230717144445.653164-3-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa32235da43c2c733f94cb5f9327ecf7924e6180
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 17 14:44:44 2023 +0000

    tcp: annotate data-races around tcp_rsk(req)->txhash
    
    [ Upstream commit 5e5265522a9a7f91d1b0bd411d634bdaf16c80cd ]
    
    TCP request sockets are lockless, some of their fields
    can change while being read by another cpu as syzbot noticed.
    
    This is usually harmless, but we should annotate the known
    races.
    
    This patch takes care of tcp_rsk(req)->txhash,
    a separate one is needed for tcp_rsk(req)->ts_recent.
    
    BUG: KCSAN: data-race in tcp_make_synack / tcp_rtx_synack
    
    write to 0xffff8881362304bc of 4 bytes by task 32083 on cpu 1:
    tcp_rtx_synack+0x9d/0x2a0 net/ipv4/tcp_output.c:4213
    inet_rtx_syn_ack+0x38/0x80 net/ipv4/inet_connection_sock.c:880
    tcp_check_req+0x379/0xc70 net/ipv4/tcp_minisocks.c:665
    tcp_v6_rcv+0x125b/0x1b20 net/ipv6/tcp_ipv6.c:1673
    ip6_protocol_deliver_rcu+0x92f/0xf30 net/ipv6/ip6_input.c:437
    ip6_input_finish net/ipv6/ip6_input.c:482 [inline]
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip6_input+0xbd/0x1b0 net/ipv6/ip6_input.c:491
    dst_input include/net/dst.h:468 [inline]
    ip6_rcv_finish+0x1e2/0x2e0 net/ipv6/ip6_input.c:79
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ipv6_rcv+0x74/0x150 net/ipv6/ip6_input.c:309
    __netif_receive_skb_one_core net/core/dev.c:5452 [inline]
    __netif_receive_skb+0x90/0x1b0 net/core/dev.c:5566
    netif_receive_skb_internal net/core/dev.c:5652 [inline]
    netif_receive_skb+0x4a/0x310 net/core/dev.c:5711
    tun_rx_batched+0x3bf/0x400
    tun_get_user+0x1d24/0x22b0 drivers/net/tun.c:1997
    tun_chr_write_iter+0x18e/0x240 drivers/net/tun.c:2043
    call_write_iter include/linux/fs.h:1871 [inline]
    new_sync_write fs/read_write.c:491 [inline]
    vfs_write+0x4ab/0x7d0 fs/read_write.c:584
    ksys_write+0xeb/0x1a0 fs/read_write.c:637
    __do_sys_write fs/read_write.c:649 [inline]
    __se_sys_write fs/read_write.c:646 [inline]
    __x64_sys_write+0x42/0x50 fs/read_write.c:646
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffff8881362304bc of 4 bytes by task 32078 on cpu 0:
    tcp_make_synack+0x367/0xb40 net/ipv4/tcp_output.c:3663
    tcp_v6_send_synack+0x72/0x420 net/ipv6/tcp_ipv6.c:544
    tcp_conn_request+0x11a8/0x1560 net/ipv4/tcp_input.c:7059
    tcp_v6_conn_request+0x13f/0x180 net/ipv6/tcp_ipv6.c:1175
    tcp_rcv_state_process+0x156/0x1de0 net/ipv4/tcp_input.c:6494
    tcp_v6_do_rcv+0x98a/0xb70 net/ipv6/tcp_ipv6.c:1509
    tcp_v6_rcv+0x17b8/0x1b20 net/ipv6/tcp_ipv6.c:1735
    ip6_protocol_deliver_rcu+0x92f/0xf30 net/ipv6/ip6_input.c:437
    ip6_input_finish net/ipv6/ip6_input.c:482 [inline]
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ip6_input+0xbd/0x1b0 net/ipv6/ip6_input.c:491
    dst_input include/net/dst.h:468 [inline]
    ip6_rcv_finish+0x1e2/0x2e0 net/ipv6/ip6_input.c:79
    NF_HOOK include/linux/netfilter.h:303 [inline]
    ipv6_rcv+0x74/0x150 net/ipv6/ip6_input.c:309
    __netif_receive_skb_one_core net/core/dev.c:5452 [inline]
    __netif_receive_skb+0x90/0x1b0 net/core/dev.c:5566
    netif_receive_skb_internal net/core/dev.c:5652 [inline]
    netif_receive_skb+0x4a/0x310 net/core/dev.c:5711
    tun_rx_batched+0x3bf/0x400
    tun_get_user+0x1d24/0x22b0 drivers/net/tun.c:1997
    tun_chr_write_iter+0x18e/0x240 drivers/net/tun.c:2043
    call_write_iter include/linux/fs.h:1871 [inline]
    new_sync_write fs/read_write.c:491 [inline]
    vfs_write+0x4ab/0x7d0 fs/read_write.c:584
    ksys_write+0xeb/0x1a0 fs/read_write.c:637
    __do_sys_write fs/read_write.c:649 [inline]
    __se_sys_write fs/read_write.c:646 [inline]
    __x64_sys_write+0x42/0x50 fs/read_write.c:646
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x91d25731 -> 0xe79325cd
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 32078 Comm: syz-executor.4 Not tainted 6.5.0-rc1-syzkaller-00033-geb26cbb1a754 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 07/03/2023
    
    Fixes: 58d607d3e52f ("tcp: provide skb->hash to synack packets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230717144445.653164-2-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f62a00b7d13554b7337582d5e4ce8e1e12283786
Author: Antoine Tenart <atenart@kernel.org>
Date:   Tue May 23 18:14:52 2023 +0200

    net: ipv4: use consistent txhash in TIME_WAIT and SYN_RECV
    
    [ Upstream commit c0a8966e2bc7d31f77a7246947ebc09c1ff06066 ]
    
    When using IPv4/TCP, skb->hash comes from sk->sk_txhash except in
    TIME_WAIT and SYN_RECV where it's not set in the reply skb from
    ip_send_unicast_reply. Those packets will have a mismatched hash with
    others from the same flow as their hashes will be 0. IPv6 does not have
    the same issue as the hash is set from the socket txhash in those cases.
    
    This commits sets the hash in the reply skb from ip_send_unicast_reply,
    which makes the IPv4 code behaving like IPv6.
    
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 5e5265522a9a ("tcp: annotate data-races around tcp_rsk(req)->txhash")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d8e3ec4f0a6a47aed551334642e3d2947ed9377
Author: Florian Kauer <florian.kauer@linutronix.de>
Date:   Mon Jul 17 10:54:44 2023 -0700

    igc: Prevent garbled TX queue with XDP ZEROCOPY
    
    [ Upstream commit 78adb4bcf99effbb960c5f9091e2e062509d1030 ]
    
    In normal operation, each populated queue item has
    next_to_watch pointing to the last TX desc of the packet,
    while each cleaned item has it set to 0. In particular,
    next_to_use that points to the next (necessarily clean)
    item to use has next_to_watch set to 0.
    
    When the TX queue is used both by an application using
    AF_XDP with ZEROCOPY as well as a second non-XDP application
    generating high traffic, the queue pointers can get in
    an invalid state where next_to_use points to an item
    where next_to_watch is NOT set to 0.
    
    However, the implementation assumes at several places
    that this is never the case, so if it does hold,
    bad things happen. In particular, within the loop inside
    of igc_clean_tx_irq(), next_to_clean can overtake next_to_use.
    Finally, this prevents any further transmission via
    this queue and it never gets unblocked or signaled.
    Secondly, if the queue is in this garbled state,
    the inner loop of igc_clean_tx_ring() will never terminate,
    completely hogging a CPU core.
    
    The reason is that igc_xdp_xmit_zc() reads next_to_use
    before acquiring the lock, and writing it back
    (potentially unmodified) later. If it got modified
    before locking, the outdated next_to_use is written
    pointing to an item that was already used elsewhere
    (and thus next_to_watch got written).
    
    Fixes: 9acf59a752d4 ("igc: Enable TX via AF_XDP zero-copy")
    Signed-off-by: Florian Kauer <florian.kauer@linutronix.de>
    Reviewed-by: Kurt Kanzenbach <kurt@linutronix.de>
    Tested-by: Kurt Kanzenbach <kurt@linutronix.de>
    Acked-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20230717175444.3217831-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0268bc0d7adaa7eb11978c7c7d1452c5de41d81
Author: Kurt Kanzenbach <kurt@linutronix.de>
Date:   Wed Apr 12 09:36:11 2023 +0200

    igc: Avoid transmit queue timeout for XDP
    
    [ Upstream commit 95b681485563c64585de78662ee52d06b7fa47d9 ]
    
    High XDP load triggers the netdev watchdog:
    
    |NETDEV WATCHDOG: enp3s0 (igc): transmit queue 2 timed out
    
    The reason is the Tx queue transmission start (txq->trans_start) is not updated
    in XDP code path. Therefore, add it for all XDP transmission functions.
    
    Signed-off-by: Kurt Kanzenbach <kurt@linutronix.de>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: 78adb4bcf99e ("igc: Prevent garbled TX queue with XDP ZEROCOPY")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb6ae775ff7f7e9d160613fa1896b16bd8cac650
Author: Alexander Duyck <alexanderduyck@fb.com>
Date:   Thu Jul 13 09:49:31 2023 -0700

    bpf, arm64: Fix BTI type used for freplace attached functions
    
    [ Upstream commit a3f25d614bc73b45e8f02adc6769876dfd16ca84 ]
    
    When running an freplace attached bpf program on an arm64 system w were
    seeing the following issue:
      Unhandled 64-bit el1h sync exception on CPU47, ESR 0x0000000036000003 -- BTI
    
    After a bit of work to track it down I determined that what appeared to be
    happening is that the 'bti c' at the start of the program was somehow being
    reached after a 'br' instruction. Further digging pointed me toward the
    fact that the function was attached via freplace. This in turn led me to
    build_plt which I believe is invoking the long jump which is triggering
    this error.
    
    To resolve it we can replace the 'bti c' with 'bti jc' and add a comment
    explaining why this has to be modified as such.
    
    Fixes: b2ad54e1533e ("bpf, arm64: Implement bpf_arch_text_poke() for arm64")
    Signed-off-by: Alexander Duyck <alexanderduyck@fb.com>
    Acked-by: Xu Kuohai <xukuohai@huawei.com>
    Link: https://lore.kernel.org/r/168926677665.316237.9953845318337455525.stgit@ahduyck-xeon-server.home.arpa
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8620c53ced6315dd68fd6170827ac97abf1224de
Author: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Date:   Mon Jul 17 21:45:29 2023 +0530

    bpf: Repeat check_max_stack_depth for async callbacks
    
    [ Upstream commit b5e9ad522c4ccd32d322877515cff8d47ed731b9 ]
    
    While the check_max_stack_depth function explores call chains emanating
    from the main prog, which is typically enough to cover all possible call
    chains, it doesn't explore those rooted at async callbacks unless the
    async callback will have been directly called, since unlike non-async
    callbacks it skips their instruction exploration as they don't
    contribute to stack depth.
    
    It could be the case that the async callback leads to a callchain which
    exceeds the stack depth, but this is never reachable while only
    exploring the entry point from main subprog. Hence, repeat the check for
    the main subprog *and* all async callbacks marked by the symbolic
    execution pass of the verifier, as execution of the program may begin at
    any of them.
    
    Consider functions with following stack depths:
    main: 256
    async: 256
    foo: 256
    
    main:
        rX = async
        bpf_timer_set_callback(...)
    
    async:
        foo()
    
    Here, async is not descended as it does not contribute to stack depth of
    main (since it is referenced using bpf_pseudo_func and not
    bpf_pseudo_call). However, when async is invoked asynchronously, it will
    end up breaching the MAX_BPF_STACK limit by calling foo.
    
    Hence, in addition to main, we also need to explore call chains
    beginning at all async callback subprogs in a program.
    
    Fixes: 7ddc80a476c2 ("bpf: Teach stack depth check about async callbacks.")
    Signed-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
    Link: https://lore.kernel.org/r/20230717161530.1238-3-memxor@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d55ff358b0498530b69e17dfa2b6e80b02cf9c1c
Author: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Date:   Mon Jul 17 21:45:28 2023 +0530

    bpf: Fix subprog idx logic in check_max_stack_depth
    
    [ Upstream commit ba7b3e7d5f9014be65879ede8fd599cb222901c9 ]
    
    The assignment to idx in check_max_stack_depth happens once we see a
    bpf_pseudo_call or bpf_pseudo_func. This is not an issue as the rest of
    the code performs a few checks and then pushes the frame to the frame
    stack, except the case of async callbacks. If the async callback case
    causes the loop iteration to be skipped, the idx assignment will be
    incorrect on the next iteration of the loop. The value stored in the
    frame stack (as the subprogno of the current subprog) will be incorrect.
    
    This leads to incorrect checks and incorrect tail_call_reachable
    marking. Save the target subprog in a new variable and only assign to
    idx once we are done with the is_async_cb check which may skip pushing
    of frame to the frame stack and subsequent stack depth checks and tail
    call markings.
    
    Fixes: 7ddc80a476c2 ("bpf: Teach stack depth check about async callbacks.")
    Signed-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
    Link: https://lore.kernel.org/r/20230717161530.1238-2-memxor@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c355f3a27b11423261cb2ba46fbb17dbce044bc1
Author: Geetha sowjanya <gakula@marvell.com>
Date:   Sun Jul 16 15:07:41 2023 +0530

    octeontx2-pf: Dont allocate BPIDs for LBK interfaces
    
    [ Upstream commit 8fcd7c7b3a38ab5e452f542fda8f7940e77e479a ]
    
    Current driver enables backpressure for LBK interfaces.
    But these interfaces do not support this feature.
    Hence, this patch fixes the issue by skipping the
    backpressure configuration for these interfaces.
    
    Fixes: 75f36270990c ("octeontx2-pf: Support to enable/disable pause frames via ethtool").
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Link: https://lore.kernel.org/r/20230716093741.28063-1-gakula@marvell.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f56bfe19aa64b09d19d76ce56971f330a0d67dd
Author: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
Date:   Wed Jun 14 10:18:25 2023 +0800

    security: keys: Modify mismatched function name
    
    [ Upstream commit 2a4152742025c5f21482e8cebc581702a0fa5b01 ]
    
    No functional modification involved.
    
    security/keys/trusted-keys/trusted_tpm2.c:203: warning: expecting prototype for tpm_buf_append_auth(). Prototype was for tpm2_buf_append_auth() instead.
    
    Fixes: 2e19e10131a0 ("KEYS: trusted: Move TPM2 trusted keys code")
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Closes: https://bugzilla.openanolis.cn/show_bug.cgi?id=5524
    Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
    Reviewed-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fc081edddf388a2ebcbe843c0ae2385f27f9d5c
Author: Ahmed Zaki <ahmed.zaki@intel.com>
Date:   Mon Jun 5 10:52:26 2023 -0400

    iavf: fix reset task race with iavf_remove()
    
    [ Upstream commit c34743daca0eb1dc855831a5210f0800a850088e ]
    
    The reset task is currently scheduled from the watchdog or adminq tasks.
    First, all direct calls to schedule the reset task are replaced with the
    iavf_schedule_reset(), which is modified to accept the flag showing the
    type of reset.
    
    To prevent the reset task from starting once iavf_remove() starts, we need
    to check the __IAVF_IN_REMOVE_TASK bit before we schedule it. This is now
    easily added to iavf_schedule_reset().
    
    Finally, remove the check for IAVF_FLAG_RESET_NEEDED in the watchdog task.
    It is redundant since all callers who set the flag immediately schedules
    the reset task.
    
    Fixes: 3ccd54ef44eb ("iavf: Fix init state closure on remove")
    Fixes: 14756b2ae265 ("iavf: Fix __IAVF_RESETTING state usage")
    Signed-off-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2647ff59c52ef42c853c905817ed1a7f092d59a5
Author: Ahmed Zaki <ahmed.zaki@intel.com>
Date:   Mon Jun 5 10:52:25 2023 -0400

    iavf: fix a deadlock caused by rtnl and driver's lock circular dependencies
    
    [ Upstream commit d1639a17319ba78a018280cd2df6577a7e5d9fab ]
    
    A driver's lock (crit_lock) is used to serialize all the driver's tasks.
    Lockdep, however, shows a circular dependency between rtnl and
    crit_lock. This happens when an ndo that already holds the rtnl requests
    the driver to reset, since the reset task (in some paths) tries to grab
    rtnl to either change real number of queues of update netdev features.
    
      [566.241851] ======================================================
      [566.241893] WARNING: possible circular locking dependency detected
      [566.241936] 6.2.14-100.fc36.x86_64+debug #1 Tainted: G           OE
      [566.241984] ------------------------------------------------------
      [566.242025] repro.sh/2604 is trying to acquire lock:
      [566.242061] ffff9280fc5ceee8 (&adapter->crit_lock){+.+.}-{3:3}, at: iavf_close+0x3c/0x240 [iavf]
      [566.242167]
                   but task is already holding lock:
      [566.242209] ffffffff9976d350 (rtnl_mutex){+.+.}-{3:3}, at: iavf_remove+0x6b5/0x730 [iavf]
      [566.242300]
                   which lock already depends on the new lock.
    
      [566.242353]
                   the existing dependency chain (in reverse order) is:
      [566.242401]
                   -> #1 (rtnl_mutex){+.+.}-{3:3}:
      [566.242451]        __mutex_lock+0xc1/0xbb0
      [566.242489]        iavf_init_interrupt_scheme+0x179/0x440 [iavf]
      [566.242560]        iavf_watchdog_task+0x80b/0x1400 [iavf]
      [566.242627]        process_one_work+0x2b3/0x560
      [566.242663]        worker_thread+0x4f/0x3a0
      [566.242696]        kthread+0xf2/0x120
      [566.242730]        ret_from_fork+0x29/0x50
      [566.242763]
                   -> #0 (&adapter->crit_lock){+.+.}-{3:3}:
      [566.242815]        __lock_acquire+0x15ff/0x22b0
      [566.242869]        lock_acquire+0xd2/0x2c0
      [566.242901]        __mutex_lock+0xc1/0xbb0
      [566.242934]        iavf_close+0x3c/0x240 [iavf]
      [566.242997]        __dev_close_many+0xac/0x120
      [566.243036]        dev_close_many+0x8b/0x140
      [566.243071]        unregister_netdevice_many_notify+0x165/0x7c0
      [566.243116]        unregister_netdevice_queue+0xd3/0x110
      [566.243157]        iavf_remove+0x6c1/0x730 [iavf]
      [566.243217]        pci_device_remove+0x33/0xa0
      [566.243257]        device_release_driver_internal+0x1bc/0x240
      [566.243299]        pci_stop_bus_device+0x6c/0x90
      [566.243338]        pci_stop_and_remove_bus_device+0xe/0x20
      [566.243380]        pci_iov_remove_virtfn+0xd1/0x130
      [566.243417]        sriov_disable+0x34/0xe0
      [566.243448]        ice_free_vfs+0x2da/0x330 [ice]
      [566.244383]        ice_sriov_configure+0x88/0xad0 [ice]
      [566.245353]        sriov_numvfs_store+0xde/0x1d0
      [566.246156]        kernfs_fop_write_iter+0x15e/0x210
      [566.246921]        vfs_write+0x288/0x530
      [566.247671]        ksys_write+0x74/0xf0
      [566.248408]        do_syscall_64+0x58/0x80
      [566.249145]        entry_SYSCALL_64_after_hwframe+0x72/0xdc
      [566.249886]
                     other info that might help us debug this:
    
      [566.252014]  Possible unsafe locking scenario:
    
      [566.253432]        CPU0                    CPU1
      [566.254118]        ----                    ----
      [566.254800]   lock(rtnl_mutex);
      [566.255514]                                lock(&adapter->crit_lock);
      [566.256233]                                lock(rtnl_mutex);
      [566.256897]   lock(&adapter->crit_lock);
      [566.257388]
                      *** DEADLOCK ***
    
    The deadlock can be triggered by a script that is continuously resetting
    the VF adapter while doing other operations requiring RTNL, e.g:
    
            while :; do
                    ip link set $VF up
                    ethtool --set-channels $VF combined 2
                    ip link set $VF down
                    ip link set $VF up
                    ethtool --set-channels $VF combined 4
                    ip link set $VF down
            done
    
    Any operation that triggers a reset can substitute "ethtool --set-channles"
    
    As a fix, add a new task "finish_config" that do all the work which
    needs rtnl lock. With the exception of iavf_remove(), all work that
    require rtnl should be called from this task.
    
    As for iavf_remove(), at the point where we need to call
    unregister_netdevice() (and grab rtnl_lock), we make sure the finish_config
    task is not running (cancel_work_sync()) to safely grab rtnl. Subsequent
    finish_config work cannot restart after that since the task is guarded
    by the __IAVF_IN_REMOVE_TASK bit in iavf_schedule_finish_config().
    
    Fixes: 5ac49f3c2702 ("iavf: use mutexes for locking of critical sections")
    Signed-off-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9743519240c6a235d49cfb3ecdc56594a6fd62b2
Author: Marcin Szycik <marcin.szycik@linux.intel.com>
Date:   Mon Jun 5 10:52:22 2023 -0400

    iavf: Wait for reset in callbacks which trigger it
    
    [ Upstream commit c2ed2403f12c74a74a0091ed5d830e72c58406e8 ]
    
    There was a fail when trying to add the interface to bonding
    right after changing the MTU on the interface. It was caused
    by bonding interface unable to open the interface due to
    interface being in __RESETTING state because of MTU change.
    
    Add new reset_waitqueue to indicate that reset has finished.
    
    Add waiting for reset to finish in callbacks which trigger hw reset:
    iavf_set_priv_flags(), iavf_change_mtu() and iavf_set_ringparam().
    We use a 5000ms timeout period because on Hyper-V based systems,
    this operation takes around 3000-4000ms. In normal circumstances,
    it doesn't take more than 500ms to complete.
    
    Add a function iavf_wait_for_reset() to reuse waiting for reset code and
    use it also in iavf_set_channels(), which already waits for reset.
    We don't use error handling in iavf_set_channels() as this could
    cause the device to be in incorrect state if the reset was scheduled
    but hit timeout or the waitng function was interrupted by a signal.
    
    Fixes: 4e5e6b5d9d13 ("iavf: Fix return of set the new channel count")
    Signed-off-by: Marcin Szycik <marcin.szycik@linux.intel.com>
    Co-developed-by: Dawid Wesierski <dawidx.wesierski@intel.com>
    Signed-off-by: Dawid Wesierski <dawidx.wesierski@intel.com>
    Signed-off-by: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
    Signed-off-by: Kamil Maziarz <kamil.maziarz@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f43ab442a8eb33b2db2b0b1c23efbca55538254a
Author: Przemek Kitszel <przemyslaw.kitszel@intel.com>
Date:   Wed Jun 21 08:54:05 2023 -0700

    iavf: make functions static where possible
    
    [ Upstream commit a4aadf0f5905661cd25c366b96cc1c840f05b756 ]
    
    Make all possible functions static.
    
    Move iavf_force_wb() up to avoid forward declaration.
    
    Suggested-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: c2ed2403f12c ("iavf: Wait for reset in callbacks which trigger it")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e36533d666d6f76ad834d106db62f3352949fa4
Author: Ahmed Zaki <ahmed.zaki@intel.com>
Date:   Mon Apr 17 12:09:39 2023 -0600

    iavf: send VLAN offloading caps once after VFR
    
    [ Upstream commit 7dcbdf29282fbcdb646dc785e8a57ed2c2fec8ba ]
    
    When the user disables rxvlan offloading and then changes the number of
    channels, all VLAN ports are unable to receive traffic.
    
    Changing the number of channels triggers a VFR reset. During re-init, when
    VIRTCHNL_OP_GET_OFFLOAD_VLAN_V2_CAPS is received, we do:
    1 - set the IAVF_FLAG_SETUP_NETDEV_FEATURES flag
    2 - call
        iavf_set_vlan_offload_features(adapter, 0, netdev->features);
    
    The second step sends to the PF the __default__ features, in this case
    aq_required |= IAVF_FLAG_AQ_ENABLE_CTAG_VLAN_STRIPPING
    
    While the first step forces the watchdog task to call
    netdev_update_features() ->  iavf_set_features() ->
    iavf_set_vlan_offload_features(adapter, netdev->features, features).
    Since the user disabled the "rxvlan", this sets:
    aq_required |= IAVF_FLAG_AQ_DISABLE_CTAG_VLAN_STRIPPING
    
    When we start processing the AQ commands, both flags are enabled. Since we
    process DISABLE_XTAG first then ENABLE_XTAG, this results in the PF
    enabling the rxvlan offload. This breaks all communications on the VLAN
    net devices.
    
    Fix by removing the call to iavf_set_vlan_offload_features() (second
    step). Calling netdev_update_features() from watchdog task is enough for
    both init and reset paths.
    
    Fixes: 7598f4b40bd6 ("iavf: Move netdev_update_features() into watchdog task")
    Signed-off-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: c2ed2403f12c ("iavf: Wait for reset in callbacks which trigger it")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d1c0ac33d81445878b71e04b189e8f4f9598f59
Author: Marcin Szycik <marcin.szycik@linux.intel.com>
Date:   Tue Jan 3 17:42:27 2023 +0100

    iavf: Move netdev_update_features() into watchdog task
    
    [ Upstream commit 7598f4b40bd60e4a4280de645eb2893eea80b59d ]
    
    Remove netdev_update_features() from iavf_adminq_task(), as it can cause
    deadlocks due to needing rtnl_lock. Instead use the
    IAVF_FLAG_SETUP_NETDEV_FEATURES flag to indicate that netdev features need
    to be updated in the watchdog task. iavf_set_vlan_offload_features()
    and iavf_set_queue_vlan_tag_loc() can be called directly from
    iavf_virtchnl_completion().
    
    Suggested-by: Phani Burra <phani.r.burra@intel.com>
    Signed-off-by: Marcin Szycik <marcin.szycik@linux.intel.com>
    Reviewed-by: Alexander Lobakin <alexandr.lobakin@intel.com>
    Tested-by: Marek Szlosek <marek.szlosek@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: c2ed2403f12c ("iavf: Wait for reset in callbacks which trigger it")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d9d01689b82ff5cb8f8d2a82717d7997bc0bfff
Author: Ahmed Zaki <ahmed.zaki@intel.com>
Date:   Fri May 19 15:46:02 2023 -0600

    iavf: use internal state to free traffic IRQs
    
    [ Upstream commit a77ed5c5b768e9649be240a2d864e5cd9c6a2015 ]
    
    If the system tries to close the netdev while iavf_reset_task() is
    running, __LINK_STATE_START will be cleared and netif_running() will
    return false in iavf_reinit_interrupt_scheme(). This will result in
    iavf_free_traffic_irqs() not being called and a leak as follows:
    
        [7632.489326] remove_proc_entry: removing non-empty directory 'irq/999', leaking at least 'iavf-enp24s0f0v0-TxRx-0'
        [7632.490214] WARNING: CPU: 0 PID: 10 at fs/proc/generic.c:718 remove_proc_entry+0x19b/0x1b0
    
    is shown when pci_disable_msix() is later called. Fix by using the
    internal adapter state. The traffic IRQs will always exist if
    state == __IAVF_RUNNING.
    
    Fixes: 5b36e8d04b44 ("i40evf: Enable VF to request an alternate queue allocation")
    Signed-off-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e1d8f1332076a002e6d910d255aa5903d341c56
Author: Ding Hui <dinghui@sangfor.com.cn>
Date:   Tue May 9 19:11:48 2023 +0800

    iavf: Fix out-of-bounds when setting channels on remove
    
    [ Upstream commit 7c4bced3caa749ce468b0c5de711c98476b23a52 ]
    
    If we set channels greater during iavf_remove(), and waiting reset done
    would be timeout, then returned with error but changed num_active_queues
    directly, that will lead to OOB like the following logs. Because the
    num_active_queues is greater than tx/rx_rings[] allocated actually.
    
    Reproducer:
    
      [root@host ~]# cat repro.sh
      #!/bin/bash
    
      pf_dbsf="0000:41:00.0"
      vf0_dbsf="0000:41:02.0"
      g_pids=()
    
      function do_set_numvf()
      {
          echo 2 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
          echo 0 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
      }
    
      function do_set_channel()
      {
          local nic=$(ls -1 --indicator-style=none /sys/bus/pci/devices/${vf0_dbsf}/net/)
          [ -z "$nic" ] && { sleep $((RANDOM%3)) ; return 1; }
          ifconfig $nic 192.168.18.5 netmask 255.255.255.0
          ifconfig $nic up
          ethtool -L $nic combined 1
          ethtool -L $nic combined 4
          sleep $((RANDOM%3))
      }
    
      function on_exit()
      {
          local pid
          for pid in "${g_pids[@]}"; do
              kill -0 "$pid" &>/dev/null && kill "$pid" &>/dev/null
          done
          g_pids=()
      }
    
      trap "on_exit; exit" EXIT
    
      while :; do do_set_numvf ; done &
      g_pids+=($!)
      while :; do do_set_channel ; done &
      g_pids+=($!)
    
      wait
    
    Result:
    
    [ 3506.152887] iavf 0000:41:02.0: Removing device
    [ 3510.400799] ==================================================================
    [ 3510.400820] BUG: KASAN: slab-out-of-bounds in iavf_free_all_tx_resources+0x156/0x160 [iavf]
    [ 3510.400823] Read of size 8 at addr ffff88b6f9311008 by task repro.sh/55536
    [ 3510.400823]
    [ 3510.400830] CPU: 101 PID: 55536 Comm: repro.sh Kdump: loaded Tainted: G           O     --------- -t - 4.18.0 #1
    [ 3510.400832] Hardware name: Powerleader PR2008AL/H12DSi-N6, BIOS 2.0 04/09/2021
    [ 3510.400835] Call Trace:
    [ 3510.400851]  dump_stack+0x71/0xab
    [ 3510.400860]  print_address_description+0x6b/0x290
    [ 3510.400865]  ? iavf_free_all_tx_resources+0x156/0x160 [iavf]
    [ 3510.400868]  kasan_report+0x14a/0x2b0
    [ 3510.400873]  iavf_free_all_tx_resources+0x156/0x160 [iavf]
    [ 3510.400880]  iavf_remove+0x2b6/0xc70 [iavf]
    [ 3510.400884]  ? iavf_free_all_rx_resources+0x160/0x160 [iavf]
    [ 3510.400891]  ? wait_woken+0x1d0/0x1d0
    [ 3510.400895]  ? notifier_call_chain+0xc1/0x130
    [ 3510.400903]  pci_device_remove+0xa8/0x1f0
    [ 3510.400910]  device_release_driver_internal+0x1c6/0x460
    [ 3510.400916]  pci_stop_bus_device+0x101/0x150
    [ 3510.400919]  pci_stop_and_remove_bus_device+0xe/0x20
    [ 3510.400924]  pci_iov_remove_virtfn+0x187/0x420
    [ 3510.400927]  ? pci_iov_add_virtfn+0xe10/0xe10
    [ 3510.400929]  ? pci_get_subsys+0x90/0x90
    [ 3510.400932]  sriov_disable+0xed/0x3e0
    [ 3510.400936]  ? bus_find_device+0x12d/0x1a0
    [ 3510.400953]  i40e_free_vfs+0x754/0x1210 [i40e]
    [ 3510.400966]  ? i40e_reset_all_vfs+0x880/0x880 [i40e]
    [ 3510.400968]  ? pci_get_device+0x7c/0x90
    [ 3510.400970]  ? pci_get_subsys+0x90/0x90
    [ 3510.400982]  ? pci_vfs_assigned.part.7+0x144/0x210
    [ 3510.400987]  ? __mutex_lock_slowpath+0x10/0x10
    [ 3510.400996]  i40e_pci_sriov_configure+0x1fa/0x2e0 [i40e]
    [ 3510.401001]  sriov_numvfs_store+0x214/0x290
    [ 3510.401005]  ? sriov_totalvfs_show+0x30/0x30
    [ 3510.401007]  ? __mutex_lock_slowpath+0x10/0x10
    [ 3510.401011]  ? __check_object_size+0x15a/0x350
    [ 3510.401018]  kernfs_fop_write+0x280/0x3f0
    [ 3510.401022]  vfs_write+0x145/0x440
    [ 3510.401025]  ksys_write+0xab/0x160
    [ 3510.401028]  ? __ia32_sys_read+0xb0/0xb0
    [ 3510.401031]  ? fput_many+0x1a/0x120
    [ 3510.401032]  ? filp_close+0xf0/0x130
    [ 3510.401038]  do_syscall_64+0xa0/0x370
    [ 3510.401041]  ? page_fault+0x8/0x30
    [ 3510.401043]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [ 3510.401073] RIP: 0033:0x7f3a9bb842c0
    [ 3510.401079] Code: 73 01 c3 48 8b 0d d8 cb 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 89 24 2d 00 00 75 10 b8 01 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 31 c3 48 83 ec 08 e8 fe dd 01 00 48 89 04 24
    [ 3510.401080] RSP: 002b:00007ffc05f1fe18 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [ 3510.401083] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f3a9bb842c0
    [ 3510.401085] RDX: 0000000000000002 RSI: 0000000002327408 RDI: 0000000000000001
    [ 3510.401086] RBP: 0000000002327408 R08: 00007f3a9be53780 R09: 00007f3a9c8a4700
    [ 3510.401086] R10: 0000000000000001 R11: 0000000000000246 R12: 0000000000000002
    [ 3510.401087] R13: 0000000000000001 R14: 00007f3a9be52620 R15: 0000000000000001
    [ 3510.401090]
    [ 3510.401093] Allocated by task 76795:
    [ 3510.401098]  kasan_kmalloc+0xa6/0xd0
    [ 3510.401099]  __kmalloc+0xfb/0x200
    [ 3510.401104]  iavf_init_interrupt_scheme+0x26f/0x1310 [iavf]
    [ 3510.401108]  iavf_watchdog_task+0x1d58/0x4050 [iavf]
    [ 3510.401114]  process_one_work+0x56a/0x11f0
    [ 3510.401115]  worker_thread+0x8f/0xf40
    [ 3510.401117]  kthread+0x2a0/0x390
    [ 3510.401119]  ret_from_fork+0x1f/0x40
    [ 3510.401122]  0xffffffffffffffff
    [ 3510.401123]
    
    In timeout handling, we should keep the original num_active_queues
    and reset num_req_queues to 0.
    
    Fixes: 4e5e6b5d9d13 ("iavf: Fix return of set the new channel count")
    Signed-off-by: Ding Hui <dinghui@sangfor.com.cn>
    Cc: Donglin Peng <pengdonglin@sangfor.com.cn>
    Cc: Huang Cun <huangcun@sangfor.com.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca12b98e04b5d1902ac08fe826d3500cb4b6e891
Author: Ding Hui <dinghui@sangfor.com.cn>
Date:   Tue May 9 19:11:47 2023 +0800

    iavf: Fix use-after-free in free_netdev
    
    [ Upstream commit 5f4fa1672d98fe99d2297b03add35346f1685d6b ]
    
    We do netif_napi_add() for all allocated q_vectors[], but potentially
    do netif_napi_del() for part of them, then kfree q_vectors and leave
    invalid pointers at dev->napi_list.
    
    Reproducer:
    
      [root@host ~]# cat repro.sh
      #!/bin/bash
    
      pf_dbsf="0000:41:00.0"
      vf0_dbsf="0000:41:02.0"
      g_pids=()
    
      function do_set_numvf()
      {
          echo 2 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
          echo 0 >/sys/bus/pci/devices/${pf_dbsf}/sriov_numvfs
          sleep $((RANDOM%3+1))
      }
    
      function do_set_channel()
      {
          local nic=$(ls -1 --indicator-style=none /sys/bus/pci/devices/${vf0_dbsf}/net/)
          [ -z "$nic" ] && { sleep $((RANDOM%3)) ; return 1; }
          ifconfig $nic 192.168.18.5 netmask 255.255.255.0
          ifconfig $nic up
          ethtool -L $nic combined 1
          ethtool -L $nic combined 4
          sleep $((RANDOM%3))
      }
    
      function on_exit()
      {
          local pid
          for pid in "${g_pids[@]}"; do
              kill -0 "$pid" &>/dev/null && kill "$pid" &>/dev/null
          done
          g_pids=()
      }
    
      trap "on_exit; exit" EXIT
    
      while :; do do_set_numvf ; done &
      g_pids+=($!)
      while :; do do_set_channel ; done &
      g_pids+=($!)
    
      wait
    
    Result:
    
    [ 4093.900222] ==================================================================
    [ 4093.900230] BUG: KASAN: use-after-free in free_netdev+0x308/0x390
    [ 4093.900232] Read of size 8 at addr ffff88b4dc145640 by task repro.sh/6699
    [ 4093.900233]
    [ 4093.900236] CPU: 10 PID: 6699 Comm: repro.sh Kdump: loaded Tainted: G           O     --------- -t - 4.18.0 #1
    [ 4093.900238] Hardware name: Powerleader PR2008AL/H12DSi-N6, BIOS 2.0 04/09/2021
    [ 4093.900239] Call Trace:
    [ 4093.900244]  dump_stack+0x71/0xab
    [ 4093.900249]  print_address_description+0x6b/0x290
    [ 4093.900251]  ? free_netdev+0x308/0x390
    [ 4093.900252]  kasan_report+0x14a/0x2b0
    [ 4093.900254]  free_netdev+0x308/0x390
    [ 4093.900261]  iavf_remove+0x825/0xd20 [iavf]
    [ 4093.900265]  pci_device_remove+0xa8/0x1f0
    [ 4093.900268]  device_release_driver_internal+0x1c6/0x460
    [ 4093.900271]  pci_stop_bus_device+0x101/0x150
    [ 4093.900273]  pci_stop_and_remove_bus_device+0xe/0x20
    [ 4093.900275]  pci_iov_remove_virtfn+0x187/0x420
    [ 4093.900277]  ? pci_iov_add_virtfn+0xe10/0xe10
    [ 4093.900278]  ? pci_get_subsys+0x90/0x90
    [ 4093.900280]  sriov_disable+0xed/0x3e0
    [ 4093.900282]  ? bus_find_device+0x12d/0x1a0
    [ 4093.900290]  i40e_free_vfs+0x754/0x1210 [i40e]
    [ 4093.900298]  ? i40e_reset_all_vfs+0x880/0x880 [i40e]
    [ 4093.900299]  ? pci_get_device+0x7c/0x90
    [ 4093.900300]  ? pci_get_subsys+0x90/0x90
    [ 4093.900306]  ? pci_vfs_assigned.part.7+0x144/0x210
    [ 4093.900309]  ? __mutex_lock_slowpath+0x10/0x10
    [ 4093.900315]  i40e_pci_sriov_configure+0x1fa/0x2e0 [i40e]
    [ 4093.900318]  sriov_numvfs_store+0x214/0x290
    [ 4093.900320]  ? sriov_totalvfs_show+0x30/0x30
    [ 4093.900321]  ? __mutex_lock_slowpath+0x10/0x10
    [ 4093.900323]  ? __check_object_size+0x15a/0x350
    [ 4093.900326]  kernfs_fop_write+0x280/0x3f0
    [ 4093.900329]  vfs_write+0x145/0x440
    [ 4093.900330]  ksys_write+0xab/0x160
    [ 4093.900332]  ? __ia32_sys_read+0xb0/0xb0
    [ 4093.900334]  ? fput_many+0x1a/0x120
    [ 4093.900335]  ? filp_close+0xf0/0x130
    [ 4093.900338]  do_syscall_64+0xa0/0x370
    [ 4093.900339]  ? page_fault+0x8/0x30
    [ 4093.900341]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [ 4093.900357] RIP: 0033:0x7f16ad4d22c0
    [ 4093.900359] Code: 73 01 c3 48 8b 0d d8 cb 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 89 24 2d 00 00 75 10 b8 01 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 31 c3 48 83 ec 08 e8 fe dd 01 00 48 89 04 24
    [ 4093.900360] RSP: 002b:00007ffd6491b7f8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [ 4093.900362] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f16ad4d22c0
    [ 4093.900363] RDX: 0000000000000002 RSI: 0000000001a41408 RDI: 0000000000000001
    [ 4093.900364] RBP: 0000000001a41408 R08: 00007f16ad7a1780 R09: 00007f16ae1f2700
    [ 4093.900364] R10: 0000000000000001 R11: 0000000000000246 R12: 0000000000000002
    [ 4093.900365] R13: 0000000000000001 R14: 00007f16ad7a0620 R15: 0000000000000001
    [ 4093.900367]
    [ 4093.900368] Allocated by task 820:
    [ 4093.900371]  kasan_kmalloc+0xa6/0xd0
    [ 4093.900373]  __kmalloc+0xfb/0x200
    [ 4093.900376]  iavf_init_interrupt_scheme+0x63b/0x1320 [iavf]
    [ 4093.900380]  iavf_watchdog_task+0x3d51/0x52c0 [iavf]
    [ 4093.900382]  process_one_work+0x56a/0x11f0
    [ 4093.900383]  worker_thread+0x8f/0xf40
    [ 4093.900384]  kthread+0x2a0/0x390
    [ 4093.900385]  ret_from_fork+0x1f/0x40
    [ 4093.900387]  0xffffffffffffffff
    [ 4093.900387]
    [ 4093.900388] Freed by task 6699:
    [ 4093.900390]  __kasan_slab_free+0x137/0x190
    [ 4093.900391]  kfree+0x8b/0x1b0
    [ 4093.900394]  iavf_free_q_vectors+0x11d/0x1a0 [iavf]
    [ 4093.900397]  iavf_remove+0x35a/0xd20 [iavf]
    [ 4093.900399]  pci_device_remove+0xa8/0x1f0
    [ 4093.900400]  device_release_driver_internal+0x1c6/0x460
    [ 4093.900401]  pci_stop_bus_device+0x101/0x150
    [ 4093.900402]  pci_stop_and_remove_bus_device+0xe/0x20
    [ 4093.900403]  pci_iov_remove_virtfn+0x187/0x420
    [ 4093.900404]  sriov_disable+0xed/0x3e0
    [ 4093.900409]  i40e_free_vfs+0x754/0x1210 [i40e]
    [ 4093.900415]  i40e_pci_sriov_configure+0x1fa/0x2e0 [i40e]
    [ 4093.900416]  sriov_numvfs_store+0x214/0x290
    [ 4093.900417]  kernfs_fop_write+0x280/0x3f0
    [ 4093.900418]  vfs_write+0x145/0x440
    [ 4093.900419]  ksys_write+0xab/0x160
    [ 4093.900420]  do_syscall_64+0xa0/0x370
    [ 4093.900421]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [ 4093.900422]  0xffffffffffffffff
    [ 4093.900422]
    [ 4093.900424] The buggy address belongs to the object at ffff88b4dc144200
                    which belongs to the cache kmalloc-8k of size 8192
    [ 4093.900425] The buggy address is located 5184 bytes inside of
                    8192-byte region [ffff88b4dc144200, ffff88b4dc146200)
    [ 4093.900425] The buggy address belongs to the page:
    [ 4093.900427] page:ffffea00d3705000 refcount:1 mapcount:0 mapping:ffff88bf04415c80 index:0x0 compound_mapcount: 0
    [ 4093.900430] flags: 0x10000000008100(slab|head)
    [ 4093.900433] raw: 0010000000008100 dead000000000100 dead000000000200 ffff88bf04415c80
    [ 4093.900434] raw: 0000000000000000 0000000000030003 00000001ffffffff 0000000000000000
    [ 4093.900434] page dumped because: kasan: bad access detected
    [ 4093.900435]
    [ 4093.900435] Memory state around the buggy address:
    [ 4093.900436]  ffff88b4dc145500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900437]  ffff88b4dc145580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900438] >ffff88b4dc145600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900438]                                            ^
    [ 4093.900439]  ffff88b4dc145680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900440]  ffff88b4dc145700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 4093.900440] ==================================================================
    
    Although the patch #2 (of 2) can avoid the issue triggered by this
    repro.sh, there still are other potential risks that if num_active_queues
    is changed to less than allocated q_vectors[] by unexpected, the
    mismatched netif_napi_add/del() can also cause UAF.
    
    Since we actually call netif_napi_add() for all allocated q_vectors
    unconditionally in iavf_alloc_q_vectors(), so we should fix it by
    letting netif_napi_del() match to netif_napi_add().
    
    Fixes: 5eae00c57f5e ("i40evf: main driver core")
    Signed-off-by: Ding Hui <dinghui@sangfor.com.cn>
    Cc: Donglin Peng <pengdonglin@sangfor.com.cn>
    Cc: Huang Cun <huangcun@sangfor.com.cn>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Madhu Chittim <madhu.chittim@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce3ec3fc64e0e0f4d148cccba4e31246d50ec910
Author: Tristram Ha <Tristram.Ha@microchip.com>
Date:   Thu Jul 13 17:46:22 2023 -0700

    net: dsa: microchip: correct KSZ8795 static MAC table access
    
    [ Upstream commit 4bdf79d686b49ac49373b36466acfb93972c7d7c ]
    
    The KSZ8795 driver code was modified to use on KSZ8863/73, which has
    different register definitions.  Some of the new KSZ8795 register
    information are wrong compared to previous code.
    
    KSZ8795 also behaves differently in that the STATIC_MAC_TABLE_USE_FID
    and STATIC_MAC_TABLE_FID bits are off by 1 when doing MAC table reading
    than writing.  To compensate that a special code was added to shift the
    register value by 1 before applying those bits.  This is wrong when the
    code is running on KSZ8863, so this special code is only executed when
    KSZ8795 is detected.
    
    Fixes: 4b20a07e103f ("net: dsa: microchip: ksz8795: add support for ksz88xx chips")
    Signed-off-by: Tristram Ha <Tristram.Ha@microchip.com>
    Reviewed-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54830adfd9a50eebd27088f9c2dbbf6f5123a0d7
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Tue Apr 4 12:18:39 2023 +0200

    net: dsa: microchip: ksz8_r_sta_mac_table(): Avoid using error code for empty entries
    
    [ Upstream commit 559901b46810e82ba5321a5e789f994b65d3bc3d ]
    
    Prepare for the next patch by ensuring that ksz8_r_sta_mac_table() does
    not use error codes for empty entries. This change will enable better
    handling of read/write errors in the upcoming patch.
    
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 4bdf79d686b4 ("net: dsa: microchip: correct KSZ8795 static MAC table access")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a60427c8abdf37814941e37cc8c75fb08efae1e
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Tue Apr 4 12:18:38 2023 +0200

    net: dsa: microchip: ksz8: Make ksz8_r_sta_mac_table() static
    
    [ Upstream commit b5751cdd7dbe618a03951bdd4c982a71ba448b1b ]
    
    As ksz8_r_sta_mac_table() is only used within ksz8795.c, there is no need
    to export it. Make the function static for better encapsulation.
    
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Acked-by: Arun Ramadoss <arun.ramadoss@microchip.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 4bdf79d686b4 ("net: dsa: microchip: correct KSZ8795 static MAC table access")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4820a764e95afb6defba1507f97f71e898f76a0
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Tue Apr 4 12:18:36 2023 +0200

    net: dsa: microchip: ksz8: Separate static MAC table operations for code reuse
    
    [ Upstream commit f6636ff69ec4f2c94a5ee1d032b21cfe1e0a5678 ]
    
    Move static MAC table operations to separate functions in order to reuse
    the code for add/del_fdb. This is needed to address kernel warnings
    caused by the lack of fdb add function support in the current driver.
    
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 4bdf79d686b4 ("net: dsa: microchip: correct KSZ8795 static MAC table access")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 155f59453414ffe4063dd581f048b3c55c431554
Author: Victor Nogueira <victor@mojatatu.com>
Date:   Thu Jul 13 15:05:13 2023 -0300

    net: sched: cls_bpf: Undo tcf_bind_filter in case of an error
    
    [ Upstream commit 26a22194927e8521e304ed75c2f38d8068d55fc7 ]
    
    If cls_bpf_offload errors out, we must also undo tcf_bind_filter that
    was done before the error.
    
    Fix that by calling tcf_unbind_filter in errout_parms.
    
    Fixes: eadb41489fd2 ("net: cls_bpf: add support for marking filters as hardware-only")
    Signed-off-by: Victor Nogueira <victor@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2256b27f542bd245b1692fc026ebefe061cc6335
Author: Victor Nogueira <victor@mojatatu.com>
Date:   Thu Jul 13 15:05:12 2023 -0300

    net: sched: cls_u32: Undo refcount decrement in case update failed
    
    [ Upstream commit e8d3d78c19be0264a5692bed477c303523aead31 ]
    
    In the case of an update, when TCA_U32_LINK is set, u32_set_parms will
    decrement the refcount of the ht_down (struct tc_u_hnode) pointer
    present in the older u32 filter which we are replacing. However, if
    u32_replace_hw_knode errors out, the update command fails and that
    ht_down pointer continues decremented. To fix that, when
    u32_replace_hw_knode fails, check if ht_down's refcount was decremented
    and undo the decrement.
    
    Fixes: d34e3e181395 ("net: cls_u32: Add support for skip-sw flag to tc u32 classifier.")
    Signed-off-by: Victor Nogueira <victor@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9345793469b65ee5ba7b033239916c2a67d3dd4
Author: Victor Nogueira <victor@mojatatu.com>
Date:   Thu Jul 13 15:05:11 2023 -0300

    net: sched: cls_u32: Undo tcf_bind_filter if u32_replace_hw_knode
    
    [ Upstream commit 9cb36faedeafb9720ac236aeae2ea57091d90a09 ]
    
    When u32_replace_hw_knode fails, we need to undo the tcf_bind_filter
    operation done at u32_set_parms.
    
    Fixes: d34e3e181395 ("net: cls_u32: Add support for skip-sw flag to tc u32 classifier.")
    Signed-off-by: Victor Nogueira <victor@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa753f8656777c5caaed54d5c4c71e1ef8a17641
Author: Victor Nogueira <victor@mojatatu.com>
Date:   Thu Jul 13 15:05:10 2023 -0300

    net: sched: cls_matchall: Undo tcf_bind_filter in case of failure after mall_set_parms
    
    [ Upstream commit b3d0e0489430735e2e7626aa37e6462cdd136e9d ]
    
    In case an error occurred after mall_set_parms executed successfully, we
    must undo the tcf_bind_filter call it issues.
    
    Fix that by calling tcf_unbind_filter in err_replace_hw_filter label.
    
    Fixes: ec2507d2a306 ("net/sched: cls_matchall: Fix error path")
    Signed-off-by: Victor Nogueira <victor@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 813572a08d497e45cfb3e2a730e58acc1f0994b5
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Jul 7 14:25:23 2023 +0300

    ASoC: SOF: ipc3-dtrace: uninitialized data in dfsentry_trace_filter_write()
    
    [ Upstream commit 469e2f28c2cbee2430058c1c9bb6d1675d7195fb ]
    
    This doesn't check how many bytes the simple_write_to_buffer() writes to
    the buffer.  The only thing that we know is that the first byte is
    initialized and the last byte of the buffer is set to NUL.  However
    the middle bytes could be uninitialized.
    
    There is no need to use simple_write_to_buffer().  This code does not
    support partial writes but instead passes "pos = 0" as the starting
    offset regardless of what the user passed as "*ppos".  Just use the
    copy_from_user() function and initialize the whole buffer.
    
    Fixes: 671e0b90051e ("ASoC: SOF: Clone the trace code to ipc3-dtrace as fw_tracing implementation")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/74148292-ce4d-4e01-a1a7-921e6767da14@moroto.mountain
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c55901d381a22300c9922170e59704059f50977b
Author: Shyam Prasad N <nspmangalore@gmail.com>
Date:   Fri Jul 14 08:56:33 2023 +0000

    cifs: fix mid leak during reconnection after timeout threshold
    
    [ Upstream commit 69cba9d3c1284e0838ae408830a02c4a063104bc ]
    
    When the number of responses with status of STATUS_IO_TIMEOUT
    exceeds a specified threshold (NUM_STATUS_IO_TIMEOUT), we reconnect
    the connection. But we do not return the mid, or the credits
    returned for the mid, or reduce the number of in-flight requests.
    
    This bug could result in the server->in_flight count to go bad,
    and also cause a leak in the mids.
    
    This change moves the check to a few lines below where the
    response is decrypted, even of the response is read from the
    transform header. This way, the code for returning the mids
    can be reused.
    
    Also, the cifs_reconnect was reconnecting just the transport
    connection before. In case of multi-channel, this may not be
    what we want to do after several timeouts. Changed that to
    reconnect the session and the tree too.
    
    Also renamed NUM_STATUS_IO_TIMEOUT to a more appropriate name
    MAX_STATUS_IO_TIMEOUT.
    
    Fixes: 8e670f77c4a5 ("Handle STATUS_IO_TIMEOUT gracefully")
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 855643c8d28945b2e2ba4b70081bd516b8b1817b
Author: Daniel Golle <daniel@makrotopia.org>
Date:   Thu Jul 13 03:42:29 2023 +0100

    net: ethernet: mtk_eth_soc: handle probe deferral
    
    [ Upstream commit 1d6d537dc55d1f42d16290f00157ac387985b95b ]
    
    Move the call to of_get_ethdev_address to mtk_add_mac which is part of
    the probe function and can hence itself return -EPROBE_DEFER should
    of_get_ethdev_address return -EPROBE_DEFER. This allows us to entirely
    get rid of the mtk_init function.
    
    The problem of of_get_ethdev_address returning -EPROBE_DEFER surfaced
    in situations in which the NVMEM provider holding the MAC address has
    not yet be loaded at the time mtk_eth_soc is initially probed. In this
    case probing of mtk_eth_soc should be deferred instead of falling back
    to use a random MAC address, so once the NVMEM provider becomes
    available probing can be repeated.
    
    Fixes: 656e705243fd ("net-next: mediatek: add support for MT7623 ethernet")
    Signed-off-by: Daniel Golle <daniel@makrotopia.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6924f3c89846c998b267d2358531caddb387ab51
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 12 08:44:49 2023 -0700

    bridge: Add extack warning when enabling STP in netns.
    
    [ Upstream commit 56a16035bb6effb37177867cea94c13a8382f745 ]
    
    When we create an L2 loop on a bridge in netns, we will see packets storm
    even if STP is enabled.
    
      # unshare -n
      # ip link add br0 type bridge
      # ip link add veth0 type veth peer name veth1
      # ip link set veth0 master br0 up
      # ip link set veth1 master br0 up
      # ip link set br0 type bridge stp_state 1
      # ip link set br0 up
      # sleep 30
      # ip -s link show br0
      2: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
          link/ether b6:61:98:1c:1c:b5 brd ff:ff:ff:ff:ff:ff
          RX: bytes  packets  errors  dropped missed  mcast
          956553768  12861249 0       0       0       12861249  <-. Keep
          TX: bytes  packets  errors  dropped carrier collsns     |  increasing
          1027834    11951    0       0       0       0         <-'   rapidly
    
    This is because llc_rcv() drops all packets in non-root netns and BPDU
    is dropped.
    
    Let's add extack warning when enabling STP in netns.
    
      # unshare -n
      # ip link add br0 type bridge
      # ip link set br0 type bridge stp_state 1
      Warning: bridge: STP does not work in non-root netns.
    
    Note this commit will be reverted later when we namespacify the whole LLC
    infra.
    
    Fixes: e730c15519d0 ("[NET]: Make packet reception network namespace safe")
    Suggested-by: Harry Coin <hcoin@quietfountain.com>
    Link: https://lore.kernel.org/netdev/0f531295-e289-022d-5add-5ceffa0df9bc@quietfountain.com/
    Suggested-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3325b8ddfe292fa8959d3fb255d6e3f48eaa3943
Author: Tanmay Patil <t-patil@ti.com>
Date:   Wed Jul 12 16:36:57 2023 +0530

    net: ethernet: ti: cpsw_ale: Fix cpsw_ale_get_field()/cpsw_ale_set_field()
    
    [ Upstream commit b685f1a58956fa36cc01123f253351b25bfacfda ]
    
    CPSW ALE has 75 bit ALE entries which are stored within three 32 bit words.
    The cpsw_ale_get_field() and cpsw_ale_set_field() functions assume that the
    field will be strictly contained within one word. However, this is not
    guaranteed to be the case and it is possible for ALE field entries to span
    across up to two words at the most.
    
    Fix the methods to handle getting/setting fields spanning up to two words.
    
    Fixes: db82173f23c5 ("netdev: driver: ethernet: add cpsw address lookup engine support")
    Signed-off-by: Tanmay Patil <t-patil@ti.com>
    [s-vadapalli@ti.com: rephrased commit message and added Fixes tag]
    Signed-off-by: Siddharth Vadapalli <s-vadapalli@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4148d6c766c469f41a6decb94c0c14b5e64e8722
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Jul 13 00:34:05 2023 +0200

    dsa: mv88e6xxx: Do a final check before timing out
    
    [ Upstream commit 95ce158b6c93b28842b54b42ad1cb221b9844062 ]
    
    I get sporadic timeouts from the driver when using the
    MV88E6352. Reading the status again after the loop fixes the
    problem: the operation is successful but goes undetected.
    
    Some added prints show things like this:
    
    [   58.356209] mv88e6085 mdio_mux-0.1:00: Timeout while waiting
        for switch, addr 1b reg 0b, mask 8000, val 0000, data c000
    [   58.367487] mv88e6085 mdio_mux-0.1:00: Timeout waiting for
        ATU op 4000, fid 0001
    (...)
    [   61.826293] mv88e6085 mdio_mux-0.1:00: Timeout while waiting
        for switch, addr 1c reg 18, mask 8000, val 0000, data 9860
    [   61.837560] mv88e6085 mdio_mux-0.1:00: Timeout waiting
        for PHY command 1860 to complete
    
    The reason is probably not the commands: I think those are
    mostly fine with the 50+50ms timeout, but the problem
    appears when OpenWrt brings up several interfaces in
    parallel on a system with 7 populated ports: if one of
    them take more than 50 ms and waits one or more of the
    others can get stuck on the mutex for the switch and then
    this can easily multiply.
    
    As we sleep and wait, the function loop needs a final
    check after exiting the loop if we were successful.
    
    Suggested-by: Andrew Lunn <andrew@lunn.ch>
    Cc: Tobias Waldekranz <tobias@waldekranz.com>
    Fixes: 35da1dfd9484 ("net: dsa: mv88e6xxx: Improve performance of busy bit polling")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20230712223405.861899-1-linus.walleij@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4c0a6b8ce1764626ab68691954afc9939540dde
Author: Yonghong Song <yhs@fb.com>
Date:   Wed Jun 28 11:19:26 2023 -0700

    kallsyms: strip LTO-only suffixes from promoted global functions
    
    [ Upstream commit 8cc32a9bbf2934d90762d9de0187adcb5ad46a11 ]
    
    Commit 6eb4bd92c1ce ("kallsyms: strip LTO suffixes from static functions")
    stripped all function/variable suffixes started with '.' regardless
    of whether those suffixes are generated at LTO mode or not. In fact,
    as far as I know, in LTO mode, when a static function/variable is
    promoted to the global scope, '.llvm.<...>' suffix is added.
    
    The existing mechanism breaks live patch for a LTO kernel even if
    no <symbol>.llvm.<...> symbols are involved. For example, for the following
    kernel symbols:
      $ grep bpf_verifier_vlog /proc/kallsyms
      ffffffff81549f60 t bpf_verifier_vlog
      ffffffff8268b430 d bpf_verifier_vlog._entry
      ffffffff8282a958 d bpf_verifier_vlog._entry_ptr
      ffffffff82e12a1f d bpf_verifier_vlog.__already_done
    'bpf_verifier_vlog' is a static function. '_entry', '_entry_ptr' and
    '__already_done' are static variables used inside 'bpf_verifier_vlog',
    so llvm promotes them to file-level static with prefix 'bpf_verifier_vlog.'.
    Note that the func-level to file-level static function promotion also
    happens without LTO.
    
    Given a symbol name 'bpf_verifier_vlog', with LTO kernel, current mechanism will
    return 4 symbols to live patch subsystem which current live patching
    subsystem cannot handle it. With non-LTO kernel, only one symbol
    is returned.
    
    In [1], we have a lengthy discussion, the suggestion is to separate two
    cases:
      (1). new symbols with suffix which are generated regardless of whether
           LTO is enabled or not, and
      (2). new symbols with suffix generated only when LTO is enabled.
    
    The cleanup_symbol_name() should only remove suffixes for case (2).
    Case (1) should not be changed so it can work uniformly with or without LTO.
    
    This patch removed LTO-only suffix '.llvm.<...>' so live patching and
    tracing should work the same way for non-LTO kernel.
    The cleanup_symbol_name() in scripts/kallsyms.c is also changed to have the same
    filtering pattern so both kernel and kallsyms tool have the same
    expectation on the order of symbols.
    
     [1] https://lore.kernel.org/live-patching/20230615170048.2382735-1-song@kernel.org/T/#u
    
    Fixes: 6eb4bd92c1ce ("kallsyms: strip LTO suffixes from static functions")
    Reported-by: Song Liu <song@kernel.org>
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Reviewed-by: Zhen Lei <thunder.leizhen@huawei.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Song Liu <song@kernel.org>
    Link: https://lore.kernel.org/r/20230628181926.4102448-1-yhs@fb.com
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5004d383fe8cdd20f0e2476f50323b03c5278bf0
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Wed Nov 2 16:49:15 2022 +0800

    kallsyms: Correctly sequence symbols when CONFIG_LTO_CLANG=y
    
    [ Upstream commit 010a0aad39fccceba4a07d30d163158a39c704f3 ]
    
    LLVM appends various suffixes for local functions and variables, suffixes
    observed:
     - foo.llvm.[0-9a-f]+
     - foo.[0-9a-f]+
    
    Therefore, when CONFIG_LTO_CLANG=y, kallsyms_lookup_name() needs to
    truncate the suffix of the symbol name before comparing the local function
    or variable name.
    
    Old implementation code:
    -       if (strcmp(namebuf, name) == 0)
    -               return kallsyms_sym_address(i);
    -       if (cleanup_symbol_name(namebuf) && strcmp(namebuf, name) == 0)
    -               return kallsyms_sym_address(i);
    
    The preceding process is traversed by address from low to high. That is,
    for those with the same name after the suffix is removed, the one with
    the smallest address is returned first. Therefore, when sorting in the
    tool, if the raw names are the same, they should be sorted by address in
    ascending order.
    
    ASCII[.]   = 2e
    ASCII[0-9] = 30,39
    ASCII[A-Z] = 41,5a
    ASCII[_]   = 5f
    ASCII[a-z] = 61,7a
    
    According to the preceding ASCII code values, the following sorting result
    is strictly followed.
     ---------------------------------
    |    main-key     |    sub-key    |
    |---------------------------------|
    |                 |  addr_lowest  |
    | <name>          |      ...      |
    | <name>.<suffix> |      ...      |
    |                 |  addr_highest |
    |---------------------------------|
    | <name>?<others> |               |   //? is [_A-Za-z0-9]
     ---------------------------------
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Stable-dep-of: 8cc32a9bbf29 ("kallsyms: strip LTO-only suffixes from promoted global functions")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28fdfda791d424cc58ce1c347a8222b38936fa1b
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Wed Nov 2 16:49:14 2022 +0800

    kallsyms: Improve the performance of kallsyms_lookup_name()
    
    [ Upstream commit 60443c88f3a89fd303a9e8c0e84895910675c316 ]
    
    Currently, to search for a symbol, we need to expand the symbols in
    'kallsyms_names' one by one, and then use the expanded string for
    comparison. It's O(n).
    
    If we sort names in ascending order like addresses, we can also use
    binary search. It's O(log(n)).
    
    In order not to change the implementation of "/proc/kallsyms", the table
    kallsyms_names[] is still stored in a one-to-one correspondence with the
    address in ascending order.
    
    Add array kallsyms_seqs_of_names[], it's indexed by the sequence number
    of the sorted names, and the corresponding content is the sequence number
    of the sorted addresses. For example:
    Assume that the index of NameX in array kallsyms_seqs_of_names[] is 'i',
    the content of kallsyms_seqs_of_names[i] is 'k', then the corresponding
    address of NameX is kallsyms_addresses[k]. The offset in kallsyms_names[]
    is get_symbol_offset(k).
    
    Note that the memory usage will increase by (4 * kallsyms_num_syms)
    bytes, the next two patches will reduce (1 * kallsyms_num_syms) bytes
    and properly handle the case CONFIG_LTO_CLANG=y.
    
    Performance test results: (x86)
    Before:
    min=234, max=10364402, avg=5206926
    min=267, max=11168517, avg=5207587
    After:
    min=1016, max=90894, avg=7272
    min=1014, max=93470, avg=7293
    
    The average lookup performance of kallsyms_lookup_name() improved 715x.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Stable-dep-of: 8cc32a9bbf29 ("kallsyms: strip LTO-only suffixes from promoted global functions")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c401b72836cac16297a7d8a903eb6c34f7e48358
Author: Jaewon Kim <jaewon02.kim@samsung.com>
Date:   Tue Jul 11 17:20:20 2023 +0900

    spi: s3c64xx: clear loopback bit after loopback test
    
    [ Upstream commit 9ec3c5517e22a12d2ff1b71e844f7913641460c6 ]
    
    When SPI loopback transfer is performed, S3C64XX_SPI_MODE_SELF_LOOPBACK
    bit still remained. It works as loopback even if the next transfer is
    not spi loopback mode.
    If not SPI_LOOP, needs to clear S3C64XX_SPI_MODE_SELF_LOOPBACK bit.
    
    Signed-off-by: Jaewon Kim <jaewon02.kim@samsung.com>
    Fixes: ffb7bcd3b27e ("spi: s3c64xx: support loopback mode")
    Reviewed-by: Chanho Park <chanho61.park@samsung.com>
    Link: https://lore.kernel.org/r/20230711082020.138165-1-jaewon02.kim@samsung.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c85f71d3fc87f27566c52ac4c96a1ed814770cc
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Jun 27 08:13:23 2023 +0200

    btrfs: be a bit more careful when setting mirror_num_ret in btrfs_map_block
    
    [ Upstream commit 4e7de35eb7d1a1d4f2dda15f39fbedd4798a0b8d ]
    
    The mirror_num_ret is allowed to be NULL, although it has to be set when
    smap is set.  Unfortunately that is not a well enough specifiable
    invariant for static type checkers, so add a NULL check to make sure they
    are fine.
    
    Fixes: 03793cbbc80f ("btrfs: add fast path for single device io in __btrfs_map_block")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08bdd70974a8228b61a7d0f3f770d27832287aab
Author: James Clark <james.clark@arm.com>
Date:   Fri Jul 7 16:45:46 2023 +0100

    perf build: Fix library not found error when using CSLIBS
    
    [ Upstream commit 1feece2780ac2f8de45177fe53979726cee4b3d1 ]
    
    -L only specifies the search path for libraries directly provided in the
    link line with -l. Because -lopencsd isn't specified, it's only linked
    because it's a dependency of -lopencsd_c_api. Dependencies like this are
    resolved using the default system search paths or -rpath-link=... rather
    than -L. This means that compilation only works if OpenCSD is installed
    to the system rather than provided with the CSLIBS (-L) option.
    
    This could be fixed by adding -Wl,-rpath-link=$(CSLIBS) but that is less
    conventional than just adding -lopencsd to the link line so that it uses
    -L. -lopencsd seems to have been removed in commit ed17b1914978eddb
    ("perf tools: Drop requirement for libstdc++.so for libopencsd check")
    because it was thought that there was a chance compilation would work
    even if it didn't exist, but I think that only applies to libstdc++ so
    there is no harm to add it back. libopencsd.so and libopencsd_c_api.so
    would always exist together.
    
    Testing
    =======
    
    The following scenarios now all work:
    
     * Cross build with OpenCSD installed
     * Cross build using CSLIBS=...
     * Native build with OpenCSD installed
     * Native build using CSLIBS=...
     * Static cross build with OpenCSD installed
     * Static cross build with CSLIBS=...
    
    Committer testing:
    
      ⬢[acme@toolbox perf-tools]$ alias m
      alias m='make -k BUILD_BPF_SKEL=1 CORESIGHT=1 O=/tmp/build/perf-tools -C tools/perf install-bin && git status && perf test python ;  perf record -o /dev/null sleep 0.01 ; perf stat --null sleep 0.01'
      ⬢[acme@toolbox perf-tools]$ ldd ~/bin/perf | grep csd
            libopencsd_c_api.so.1 => /lib64/libopencsd_c_api.so.1 (0x00007fd49c44e000)
            libopencsd.so.1 => /lib64/libopencsd.so.1 (0x00007fd49bd56000)
      ⬢[acme@toolbox perf-tools]$ cat /etc/redhat-release
      Fedora release 36 (Thirty Six)
      ⬢[acme@toolbox perf-tools]$
    
    Fixes: ed17b1914978eddb ("perf tools: Drop requirement for libstdc++.so for libopencsd check")
    Reported-by: Radhey Shyam Pandey <radhey.shyam.pandey@amd.com>
    Signed-off-by: James Clark <james.clark@arm.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Radhey Shyam Pandey <radhey.shyam.pandey@amd.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Uwe Kleine-König <uwe@kleine-koenig.org>
    Cc: coresight@lists.linaro.org
    Closes: https://lore.kernel.org/linux-arm-kernel/56905d7a-a91e-883a-b707-9d5f686ba5f1@arm.com/
    Link: https://lore.kernel.org/all/36cc4dc6-bf4b-1093-1c0a-876e368af183@kleine-koenig.org/
    Link: https://lore.kernel.org/r/20230707154546.456720-1-james.clark@arm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6aa851f6276fa08cd59b044bc2b803c49edf58a2
Author: Yangtao Li <frank.li@vivo.com>
Date:   Mon Jul 10 21:19:58 2023 +0800

    fbdev: imxfb: Removed unneeded release_mem_region
    
    [ Upstream commit 45fcc058a75bf5d65cf4c32da44a252fbe873cd4 ]
    
    Remove unnecessary release_mem_region from the error path to prevent
    mem region from being released twice, which could avoid resource leak
    or other unexpected issues.
    
    Fixes: b083c22d5114 ("video: fbdev: imxfb: Convert request_mem_region + ioremap to devm_ioremap_resource")
    Signed-off-by: Yangtao Li <frank.li@vivo.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7bb9436ea975409684be958e4c45b970c306f15
Author: Martin Kaiser <martin@kaiser.cx>
Date:   Wed Jun 28 15:24:37 2023 +0200

    fbdev: imxfb: warn about invalid left/right margin
    
    [ Upstream commit 4e47382fbca916d7db95cbf9e2d7ca2e9d1ca3fe ]
    
    Warn about invalid var->left_margin or var->right_margin. Their values
    are read from the device tree.
    
    We store var->left_margin-3 and var->right_margin-1 in register
    fields. These fields should be >= 0.
    
    Fixes: 7e8549bcee00 ("imxfb: Fix margin settings")
    Signed-off-by: Martin Kaiser <martin@kaiser.cx>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a2d80a8c24a890dfa2de15a5244527d855a98f6
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Thu Jun 29 09:14:52 2023 +0200

    spi: bcm63xx: fix max prepend length
    
    [ Upstream commit 5158814cbb37bbb38344b3ecddc24ba2ed0365f2 ]
    
    The command word is defined as following:
    
        /* Command */
        #define SPI_CMD_COMMAND_SHIFT           0
        #define SPI_CMD_DEVICE_ID_SHIFT         4
        #define SPI_CMD_PREPEND_BYTE_CNT_SHIFT  8
        #define SPI_CMD_ONE_BYTE_SHIFT          11
        #define SPI_CMD_ONE_WIRE_SHIFT          12
    
    If the prepend byte count field starts at bit 8, and the next defined
    bit is SPI_CMD_ONE_BYTE at bit 11, it can be at most 3 bits wide, and
    thus the max value is 7, not 15.
    
    Fixes: b17de076062a ("spi/bcm63xx: work around inability to keep CS up")
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Link: https://lore.kernel.org/r/20230629071453.62024-1-jonas.gorski@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6af800f91747a55ce84bbc5ad20c9436b28a6203
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Tue Jul 4 12:18:58 2023 +0100

    pinctrl: renesas: rzg2l: Handle non-unique subnode names
    
    [ Upstream commit bfc374a145ae133613e05b9b89be561f169cb58d ]
    
    Currently, sd1 and sd0 have unique subnode names 'sd1_mux' and 'sd0_mux'.
    If we change these to non-unique subnode names such as 'mux' this can
    lead to the below conflict as the RZ/G2L pin control driver considers
    only the names of the subnodes.
    
       pinctrl-rzg2l 11030000.pinctrl: pin P47_0 already requested by 11c00000.mmc; cannot claim for 11c10000.mmc
       pinctrl-rzg2l 11030000.pinctrl: pin-376 (11c10000.mmc) status -22
       pinctrl-rzg2l 11030000.pinctrl: could not request pin 376 (P47_0) from group mux  on device pinctrl-rzg2l
       renesas_sdhi_internal_dmac 11c10000.mmc: Error applying setting, reverse things back
    
    Fix this by constructing unique names from the node names of both the
    pin control configuration node and its child node, where appropriate.
    
    Based on the work done by Geert for the RZ/V2M pinctrl driver.
    
    Fixes: c4c4637eb57f ("pinctrl: renesas: Add RZ/G2L pin and gpio controller driver")
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20230704111858.215278-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be087281dc79d55e7cf1d8b87b473aefabe2c423
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jul 3 17:07:06 2023 +0200

    pinctrl: renesas: rzv2m: Handle non-unique subnode names
    
    [ Upstream commit f46a0b47cc0829acd050213194c5a77351e619b2 ]
    
    The eMMC and SDHI pin control configuration nodes in DT have subnodes
    with the same names ("data" and "ctrl").  As the RZ/V2M pin control
    driver considers only the names of the subnodes, this leads to
    conflicts:
    
        pinctrl-rzv2m b6250000.pinctrl: pin P8_2 already requested by 85000000.mmc; cannot claim for 85020000.mmc
        pinctrl-rzv2m b6250000.pinctrl: pin-130 (85020000.mmc) status -22
        renesas_sdhi_internal_dmac 85020000.mmc: Error applying setting, reverse things back
    
    Fix this by constructing unique names from the node names of both the
    pin control configuration node and its child node, where appropriate.
    
    Reported by: Fabrizio Castro <fabrizio.castro.jz@renesas.com>
    
    Fixes: 92a9b825257614af ("pinctrl: renesas: Add RZ/V2M pin and gpio controller driver")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Fabrizio Castro <fabrizio.castro.jz@renesas.com>
    Link: https://lore.kernel.org/r/607bd6ab4905b0b1b119a06ef953fa1184505777.1688396717.git.geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92cc0153324b6ae8577a39f5bf2cd83c9a34ea6a
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Thu Jun 29 17:56:12 2023 -0700

    sched/psi: use kernfs polling functions for PSI trigger polling
    
    [ Upstream commit aff037078ecaecf34a7c2afab1341815f90fba5e ]
    
    Destroying psi trigger in cgroup_file_release causes UAF issues when
    a cgroup is removed from under a polling process. This is happening
    because cgroup removal causes a call to cgroup_file_release while the
    actual file is still alive. Destroying the trigger at this point would
    also destroy its waitqueue head and if there is still a polling process
    on that file accessing the waitqueue, it will step on the freed pointer:
    
    do_select
      vfs_poll
                               do_rmdir
                                 cgroup_rmdir
                                   kernfs_drain_open_files
                                     cgroup_file_release
                                       cgroup_pressure_release
                                         psi_trigger_destroy
                                           wake_up_pollfree(&t->event_wait)
    // vfs_poll is unblocked
                                           synchronize_rcu
                                           kfree(t)
      poll_freewait -> UAF access to the trigger's waitqueue head
    
    Patch [1] fixed this issue for epoll() case using wake_up_pollfree(),
    however the same issue exists for synchronous poll() case.
    The root cause of this issue is that the lifecycles of the psi trigger's
    waitqueue and of the file associated with the trigger are different. Fix
    this by using kernfs_generic_poll function when polling on cgroup-specific
    psi triggers. It internally uses kernfs_open_node->poll waitqueue head
    with its lifecycle tied to the file's lifecycle. This also renders the
    fix in [1] obsolete, so revert it.
    
    [1] commit c2dbe32d5db5 ("sched/psi: Fix use-after-free in ep_remove_wait_queue()")
    
    Fixes: 0e94682b73bf ("psi: introduce psi monitor")
    Closes: https://lore.kernel.org/all/20230613062306.101831-1-lujialin4@huawei.com/
    Reported-by: Lu Jialin <lujialin4@huawei.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20230630005612.1014540-1-surenb@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5dca1977685c3ec7ee7490e8f6736e35ca2ee70
Author: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
Date:   Thu Mar 30 12:54:18 2023 +0200

    sched/psi: Allow unprivileged polling of N*2s period
    
    [ Upstream commit d82caa273565b45fcf103148950549af76c314b0 ]
    
    PSI offers 2 mechanisms to get information about a specific resource
    pressure. One is reading from /proc/pressure/<resource>, which gives
    average pressures aggregated every 2s. The other is creating a pollable
    fd for a specific resource and cgroup.
    
    The trigger creation requires CAP_SYS_RESOURCE, and gives the
    possibility to pick specific time window and threshold, spawing an RT
    thread to aggregate the data.
    
    Systemd would like to provide containers the option to monitor pressure
    on their own cgroup and sub-cgroups. For example, if systemd launches a
    container that itself then launches services, the container should have
    the ability to poll() for pressure in individual services. But neither
    the container nor the services are privileged.
    
    This patch implements a mechanism to allow unprivileged users to create
    pressure triggers. The difference with privileged triggers creation is
    that unprivileged ones must have a time window that's a multiple of 2s.
    This is so that we can avoid unrestricted spawning of rt threads, and
    use instead the same aggregation mechanism done for the averages, which
    runs independently of any triggers.
    
    Suggested-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Link: https://lore.kernel.org/r/20230330105418.77061-5-cerasuolodomenico@gmail.com
    Stable-dep-of: aff037078eca ("sched/psi: use kernfs polling functions for PSI trigger polling")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb4bc32fc1be05a79aa99bee32211d985460138c
Author: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
Date:   Thu Mar 30 12:54:17 2023 +0200

    sched/psi: Extract update_triggers side effect
    
    [ Upstream commit 4468fcae49f08e88fbbffe05b29496192df89991 ]
    
    This change moves update_total flag out of update_triggers function,
    currently called only in psi_poll_work.
    In the next patch, update_triggers will be called also in psi_avgs_work,
    but the total update information is specific to psi_poll_work.
    Returning update_total value to the caller let us avoid differentiating
    the implementation of update_triggers for different aggregators.
    
    Suggested-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Link: https://lore.kernel.org/r/20230330105418.77061-4-cerasuolodomenico@gmail.com
    Stable-dep-of: aff037078eca ("sched/psi: use kernfs polling functions for PSI trigger polling")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1623d4d0bef6da397aacfb24dbd453e93d9cbe9
Author: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
Date:   Thu Mar 30 12:54:16 2023 +0200

    sched/psi: Rename existing poll members in preparation
    
    [ Upstream commit 65457b74aa9437418e552e8d52d7112d4f9901a6 ]
    
    Renaming in PSI implementation to make a clear distinction between
    privileged and unprivileged triggers code to be implemented in the
    next patch.
    
    Suggested-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Link: https://lore.kernel.org/r/20230330105418.77061-3-cerasuolodomenico@gmail.com
    Stable-dep-of: aff037078eca ("sched/psi: use kernfs polling functions for PSI trigger polling")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c176dda0a6a6c50d05cb07df0f00f40bf59a357f
Author: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
Date:   Thu Mar 30 12:54:15 2023 +0200

    sched/psi: Rearrange polling code in preparation
    
    [ Upstream commit 7fab21fa0d000a0ea32d73ce8eec68557c6c268b ]
    
    Move a few functions up in the file to avoid forward declaration needed
    in the patch implementing unprivileged PSI triggers.
    
    Suggested-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Domenico Cerasuolo <cerasuolodomenico@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Link: https://lore.kernel.org/r/20230330105418.77061-2-cerasuolodomenico@gmail.com
    Stable-dep-of: aff037078eca ("sched/psi: use kernfs polling functions for PSI trigger polling")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d8bba4da1a8f11f304a15b6f0de69ac99ebd67f
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Fri Oct 14 19:05:51 2022 +0800

    sched/psi: Fix avgs_work re-arm in psi_avgs_work()
    
    [ Upstream commit 2fcd7bbae90a6d844da8660a9d27079281dfbba2 ]
    
    Pavan reported a problem that PSI avgs_work idle shutoff is not
    working at all. Because PSI_NONIDLE condition would be observed in
    psi_avgs_work()->collect_percpu_times()->get_recent_times() even if
    only the kworker running avgs_work on the CPU.
    
    Although commit 1b69ac6b40eb ("psi: fix aggregation idle shut-off")
    avoided the ping-pong wake problem when the worker sleep, psi_avgs_work()
    still will always re-arm the avgs_work, so shutoff is not working.
    
    This patch changes to use PSI_STATE_RESCHEDULE to flag whether to
    re-arm avgs_work in get_recent_times(). For the current CPU, we re-arm
    avgs_work only when (NR_RUNNING > 1 || NR_IOWAIT > 0 || NR_MEMSTALL > 0),
    for other CPUs we can just check PSI_NONIDLE delta. The new flag
    is only used in psi_avgs_work(), so we check in get_recent_times()
    that current_work() is avgs_work.
    
    One potential problem is that the brief period of non-idle time
    incurred between the aggregation run and the kworker's dequeue will
    be stranded in the per-cpu buckets until avgs_work run next time.
    The buckets can hold 4s worth of time, and future activity will wake
    the avgs_work with a 2s delay, giving us 2s worth of data we can leave
    behind when shut off the avgs_work. If the kworker run other works after
    avgs_work shut off and doesn't have any scheduler activities for 2s,
    this maybe a problem.
    
    Reported-by: Pavan Kondeti <quic_pkondeti@quicinc.com>
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Suren Baghdasaryan <surenb@google.com>
    Tested-by: Chengming Zhou <zhouchengming@bytedance.com>
    Link: https://lore.kernel.org/r/20221014110551.22695-1-zhouchengming@bytedance.com
    Stable-dep-of: aff037078eca ("sched/psi: use kernfs polling functions for PSI trigger polling")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45f739e8fb345cc4352da091602660f94320431f
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Jun 20 16:07:47 2023 +0800

    sched/fair: Use recent_used_cpu to test p->cpus_ptr
    
    [ Upstream commit ae2ad293d6be143ad223f5f947cca07bcbe42595 ]
    
    When checking whether a recently used CPU can be a potential idle
    candidate, recent_used_cpu should be used to test p->cpus_ptr as
    p->recent_used_cpu is not equal to recent_used_cpu and candidate
    decision is made based on recent_used_cpu here.
    
    Fixes: 89aafd67f28c ("sched/fair: Use prev instead of new target as recent_used_cpu")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Phil Auld <pauld@redhat.com>
    Acked-by: Mel Gorman <mgorman@suse.de>
    Link: https://lore.kernel.org/r/20230620080747.359122-1-linmiaohe@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ede0d0f88655a4c6c2f9c2b4174031286a04ef9
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Wed Jul 5 14:18:42 2023 +0100

    ASoC: qcom: q6apm: do not close GPR port before closing graph
    
    [ Upstream commit c1be62923d4d86e7c06b1224626e27eb8d9ab32e ]
    
    Closing GPR port before graph close can result in un handled notifications
    from DSP, this results in spam of errors from GPR driver as there is no
    one to handle these notification at that point in time.
    
    Fix this by closing GPR port after graph close is finished.
    
    Fixes: 5477518b8a0e ("ASoC: qdsp6: audioreach: add q6apm support")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705131842.41584-1-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5da98d0438bd1cbee90680e6233d682314e5df70
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Wed Jul 5 13:57:23 2023 +0100

    ASoC: codecs: wcd938x: fix dB range for HPHL and HPHR
    
    [ Upstream commit c03226ba15fe3c42d13907ec7d8536396602557b ]
    
    dB range for HPHL and HPHR gains are from +6dB to -30dB in steps of
    1.5dB with register values range from 0 to 24.
    
    Current code maps these dB ranges incorrectly, fix them to allow proper
    volume setting.
    
    Fixes: e8ba1e05bdc0 ("ASoC: codecs: wcd938x: add basic controls")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705125723.40464-1-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3495bc99464f5d680a611a04a760492f52a9744
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Jun 30 16:27:13 2023 +0200

    ASoC: codecs: wcd938x: fix mbhc impedance loglevel
    
    [ Upstream commit e5ce198bd5c6923b6a51e1493b1401f84c24b26d ]
    
    Demote the MBHC impedance measurement printk, which is not an error
    message, from error to debug level.
    
    While at it, fix the capitalisation of "ohm" and add the missing space
    before the opening parenthesis.
    
    Fixes: bcee7ed09b8e ("ASoC: codecs: wcd938x: add Multi Button Headset Control support")
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230630142717.5314-2-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3122e90b5cb0fc7be1e548d511941d84189e73d1
Author: Vijendar Mukunda <Vijendar.Mukunda@amd.com>
Date:   Mon Jun 26 16:23:54 2023 +0530

    ASoC: amd: acp: fix for invalid dai id handling in acp_get_byte_count()
    
    [ Upstream commit 85aeab362201cf52c34cd429e4f6c75a0b42f9a3 ]
    
    For invalid dai id, instead of returning -EINVAL
    return bytes count as zero in acp_get_byte_count() function.
    
    Fixes: 623621a9f9e1 ("ASoC: amd: Add common framework to support I2S on ACP SOC")
    
    Signed-off-by: Vijendar Mukunda <Vijendar.Mukunda@amd.com>
    Link: https://lore.kernel.org/r/20230626105356.2580125-6-Vijendar.Mukunda@amd.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da64c8889fcd51cc6a0591d0fd1ab563cacbe8fc
Author: Hao Chen <chenhao418@huawei.com>
Date:   Wed Jun 21 20:33:08 2023 +0800

    net: hns3: fix strncpy() not using dest-buf length as length issue
    
    [ Upstream commit 1cf3d5567f273a8746d1bade00633a93204f80f0 ]
    
    Now, strncpy() in hns3_dbg_fill_content() use src-length as copy-length,
    it may result in dest-buf overflow.
    
    This patch is to fix intel compile warning for csky-linux-gcc (GCC) 12.1.0
    compiler.
    
    The warning reports as below:
    
    hclge_debugfs.c:92:25: warning: 'strncpy' specified bound depends on
    the length of the source argument [-Wstringop-truncation]
    
    strncpy(pos, items[i].name, strlen(items[i].name));
    
    hclge_debugfs.c:90:25: warning: 'strncpy' output truncated before
    terminating nul copying as many bytes from a string as its length
    [-Wstringop-truncation]
    
    strncpy(pos, result[i], strlen(result[i]));
    
    strncpy() use src-length as copy-length, it may result in
    dest-buf overflow.
    
    So,this patch add some values check to avoid this issue.
    
    Signed-off-by: Hao Chen <chenhao418@huawei.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/lkml/202207170606.7WtHs9yS-lkp@intel.com/T/
    Signed-off-by: Hao Lan <lanhao@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39695e87d86f0e7d897fba1d2559f825aa20caeb
Author: Ying Hsu <yinghsu@chromium.org>
Date:   Tue Jun 20 10:47:32 2023 -0700

    igb: Fix igb_down hung on surprise removal
    
    [ Upstream commit 004d25060c78fc31f66da0fa439c544dda1ac9d5 ]
    
    In a setup where a Thunderbolt hub connects to Ethernet and a display
    through USB Type-C, users may experience a hung task timeout when they
    remove the cable between the PC and the Thunderbolt hub.
    This is because the igb_down function is called multiple times when
    the Thunderbolt hub is unplugged. For example, the igb_io_error_detected
    triggers the first call, and the igb_remove triggers the second call.
    The second call to igb_down will block at napi_synchronize.
    Here's the call trace:
        __schedule+0x3b0/0xddb
        ? __mod_timer+0x164/0x5d3
        schedule+0x44/0xa8
        schedule_timeout+0xb2/0x2a4
        ? run_local_timers+0x4e/0x4e
        msleep+0x31/0x38
        igb_down+0x12c/0x22a [igb 6615058754948bfde0bf01429257eb59f13030d4]
        __igb_close+0x6f/0x9c [igb 6615058754948bfde0bf01429257eb59f13030d4]
        igb_close+0x23/0x2b [igb 6615058754948bfde0bf01429257eb59f13030d4]
        __dev_close_many+0x95/0xec
        dev_close_many+0x6e/0x103
        unregister_netdevice_many+0x105/0x5b1
        unregister_netdevice_queue+0xc2/0x10d
        unregister_netdev+0x1c/0x23
        igb_remove+0xa7/0x11c [igb 6615058754948bfde0bf01429257eb59f13030d4]
        pci_device_remove+0x3f/0x9c
        device_release_driver_internal+0xfe/0x1b4
        pci_stop_bus_device+0x5b/0x7f
        pci_stop_bus_device+0x30/0x7f
        pci_stop_bus_device+0x30/0x7f
        pci_stop_and_remove_bus_device+0x12/0x19
        pciehp_unconfigure_device+0x76/0xe9
        pciehp_disable_slot+0x6e/0x131
        pciehp_handle_presence_or_link_change+0x7a/0x3f7
        pciehp_ist+0xbe/0x194
        irq_thread_fn+0x22/0x4d
        ? irq_thread+0x1fd/0x1fd
        irq_thread+0x17b/0x1fd
        ? irq_forced_thread_fn+0x5f/0x5f
        kthread+0x142/0x153
        ? __irq_get_irqchip_state+0x46/0x46
        ? kthread_associate_blkcg+0x71/0x71
        ret_from_fork+0x1f/0x30
    
    In this case, igb_io_error_detected detaches the network interface
    and requests a PCIE slot reset, however, the PCIE reset callback is
    not being invoked and thus the Ethernet connection breaks down.
    As the PCIE error in this case is a non-fatal one, requesting a
    slot reset can be avoided.
    This patch fixes the task hung issue and preserves Ethernet
    connection by ignoring non-fatal PCIE errors.
    
    Signed-off-by: Ying Hsu <yinghsu@chromium.org>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230620174732.4145155-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6887f35881714e70a1384445d2ab788524ece7bb
Author: Yi Kuo <yi@yikuo.dev>
Date:   Wed Jun 21 13:12:20 2023 +0300

    wifi: iwlwifi: pcie: add device id 51F1 for killer 1675
    
    [ Upstream commit f4daceae4087bbb3e9a56044b44601d520d009d2 ]
    
    Intel Killer AX1675i/s with device id 51f1 would show
    "No config found for PCI dev 51f1/1672" in dmesg and refuse to work.
    Add the new device id 51F1 for 1675i/s to fix the issue.
    
    Signed-off-by: Yi Kuo <yi@yikuo.dev>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230621130444.ee224675380b.I921c905e21e8d041ad808def8f454f27b5ebcd8b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6862557e9afeb181058766e378b796a4075ca396
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Jun 20 13:04:02 2023 +0300

    wifi: iwlwifi: mvm: avoid baid size integer overflow
    
    [ Upstream commit 1a528ab1da324d078ec60283c34c17848580df24 ]
    
    Roee reported various hard-to-debug crashes with pings in
    EHT aggregation scenarios. Enabling KASAN showed that we
    access the BAID allocation out of bounds, and looking at
    the code a bit shows that since the reorder buffer entry
    (struct iwl_mvm_reorder_buf_entry) is 128 bytes if debug
    such as lockdep is enabled, then staring from an agg size
    512 we overflow the size calculation, and allocate a much
    smaller structure than we should, causing slab corruption
    once we initialize this.
    
    Fix this by simply using u32 instead of u16.
    
    Reported-by: Roee Goldfiner <roee.h.goldfiner@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230620125813.f428c856030d.I2c2bb808e945adb71bc15f5b2bac2d8957ea90eb@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a46a6249146093c15028883c10d084324d658e87
Author: Mukesh Sisodiya <mukesh.sisodiya@intel.com>
Date:   Tue Jun 20 13:03:59 2023 +0300

    wifi: iwlwifi: Add support for new PCI Id
    
    [ Upstream commit 35bd6f1d043d089fcb60450e1287cc65f0095787 ]
    
    Add support for the PCI Id 51F1 without IMR support.
    
    Signed-off-by: Mukesh Sisodiya <mukesh.sisodiya@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230620125813.9800e652e789.Ic06a085832ac3f988c8ef07d856c8e281563295d@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e0a94e31adec2e7f7273a5e512c6e223696dbdf
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Jun 15 12:04:07 2023 -0600

    wifi: wext-core: Fix -Wstringop-overflow warning in ioctl_standard_iw_point()
    
    [ Upstream commit 71e7552c90db2a2767f5c17c7ec72296b0d92061 ]
    
    -Wstringop-overflow is legitimately warning us about extra_size
    pontentially being zero at some point, hence potenially ending
    up _allocating_ zero bytes of memory for extra pointer and then
    trying to access such object in a call to copy_from_user().
    
    Fix this by adding a sanity check to ensure we never end up
    trying to allocate zero bytes of data for extra pointer, before
    continue executing the rest of the code in the function.
    
    Address the following -Wstringop-overflow warning seen when built
    m68k architecture with allyesconfig configuration:
                     from net/wireless/wext-core.c:11:
    In function '_copy_from_user',
        inlined from 'copy_from_user' at include/linux/uaccess.h:183:7,
        inlined from 'ioctl_standard_iw_point' at net/wireless/wext-core.c:825:7:
    arch/m68k/include/asm/string.h:48:25: warning: '__builtin_memset' writing 1 or more bytes into a region of size 0 overflows the destination [-Wstringop-overflow=]
       48 | #define memset(d, c, n) __builtin_memset(d, c, n)
          |                         ^~~~~~~~~~~~~~~~~~~~~~~~~
    include/linux/uaccess.h:153:17: note: in expansion of macro 'memset'
      153 |                 memset(to + (n - res), 0, res);
          |                 ^~~~~~
    In function 'kmalloc',
        inlined from 'kzalloc' at include/linux/slab.h:694:9,
        inlined from 'ioctl_standard_iw_point' at net/wireless/wext-core.c:819:10:
    include/linux/slab.h:577:16: note: at offset 1 into destination object of size 0 allocated by '__kmalloc'
      577 |         return __kmalloc(size, flags);
          |                ^~~~~~~~~~~~~~~~~~~~~~
    
    This help with the ongoing efforts to globally enable
    -Wstringop-overflow.
    
    Link: https://github.com/KSPP/linux/issues/315
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/ZItSlzvIpjdjNfd8@work
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 408d40c729cbe3a918a381405df769491a472122
Author: Petr Oros <poros@redhat.com>
Date:   Thu Jun 15 11:54:47 2023 +0200

    devlink: report devlink_port_type_warn source device
    
    [ Upstream commit a52305a81d6bb74b90b400dfa56455d37872fe4b ]
    
    devlink_port_type_warn is scheduled for port devlink and warning
    when the port type is not set. But from this warning it is not easy
    found out which device (driver) has no devlink port set.
    
    [ 3709.975552] Type was not set for devlink port.
    [ 3709.975579] WARNING: CPU: 1 PID: 13092 at net/devlink/leftover.c:6775 devlink_port_type_warn+0x11/0x20
    [ 3709.993967] Modules linked in: openvswitch nf_conncount nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nfnetlink bluetooth rpcsec_gss_krb5 auth_rpcgss nfsv4 dns_resolver nfs lockd grace fscache netfs vhost_net vhost vhost_iotlb tap tun bridge stp llc qrtr intel_rapl_msr intel_rapl_common i10nm_edac nfit libnvdimm x86_pkg_temp_thermal mlx5_ib intel_powerclamp coretemp dell_wmi ledtrig_audio sparse_keymap ipmi_ssif kvm_intel ib_uverbs rfkill ib_core video kvm iTCO_wdt acpi_ipmi intel_vsec irqbypass ipmi_si iTCO_vendor_support dcdbas ipmi_devintf mei_me ipmi_msghandler rapl mei intel_cstate isst_if_mmio isst_if_mbox_pci dell_smbios intel_uncore isst_if_common i2c_i801 dell_wmi_descriptor wmi_bmof i2c_smbus intel_pch_thermal pcspkr acpi_power_meter xfs libcrc32c sd_mod sg nvme_tcp mgag200 i2c_algo_bit nvme_fabrics drm_shmem_helper drm_kms_helper nvme syscopyarea ahci sysfillrect sysimgblt nvme_core fb_sys_fops crct10dif_pclmul libahci mlx5_core sfc crc32_pclmul nvme_common drm
    [ 3709.994030]  crc32c_intel mtd t10_pi mlxfw libata tg3 mdio megaraid_sas psample ghash_clmulni_intel pci_hyperv_intf wmi dm_multipath sunrpc dm_mirror dm_region_hash dm_log dm_mod be2iscsi bnx2i cnic uio cxgb4i cxgb4 tls libcxgbi libcxgb qla4xxx iscsi_boot_sysfs iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi fuse
    [ 3710.108431] CPU: 1 PID: 13092 Comm: kworker/1:1 Kdump: loaded Not tainted 5.14.0-319.el9.x86_64 #1
    [ 3710.108435] Hardware name: Dell Inc. PowerEdge R750/0PJ80M, BIOS 1.8.2 09/14/2022
    [ 3710.108437] Workqueue: events devlink_port_type_warn
    [ 3710.108440] RIP: 0010:devlink_port_type_warn+0x11/0x20
    [ 3710.108443] Code: 84 76 fe ff ff 48 c7 03 20 0e 1a ad 31 c0 e9 96 fd ff ff 66 0f 1f 44 00 00 0f 1f 44 00 00 48 c7 c7 18 24 4e ad e8 ef 71 62 ff <0f> 0b c3 cc cc cc cc 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 f6 87
    [ 3710.108445] RSP: 0018:ff3b6d2e8b3c7e90 EFLAGS: 00010282
    [ 3710.108447] RAX: 0000000000000000 RBX: ff366d6580127080 RCX: 0000000000000027
    [ 3710.108448] RDX: 0000000000000027 RSI: 00000000ffff86de RDI: ff366d753f41f8c8
    [ 3710.108449] RBP: ff366d658ff5a0c0 R08: ff366d753f41f8c0 R09: ff3b6d2e8b3c7e18
    [ 3710.108450] R10: 0000000000000001 R11: 0000000000000023 R12: ff366d753f430600
    [ 3710.108451] R13: ff366d753f436900 R14: 0000000000000000 R15: ff366d753f436905
    [ 3710.108452] FS:  0000000000000000(0000) GS:ff366d753f400000(0000) knlGS:0000000000000000
    [ 3710.108453] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 3710.108454] CR2: 00007f1c57bc74e0 CR3: 000000111d26a001 CR4: 0000000000773ee0
    [ 3710.108456] PKRU: 55555554
    [ 3710.108457] Call Trace:
    [ 3710.108458]  <TASK>
    [ 3710.108459]  process_one_work+0x1e2/0x3b0
    [ 3710.108466]  ? rescuer_thread+0x390/0x390
    [ 3710.108468]  worker_thread+0x50/0x3a0
    [ 3710.108471]  ? rescuer_thread+0x390/0x390
    [ 3710.108473]  kthread+0xdd/0x100
    [ 3710.108477]  ? kthread_complete_and_exit+0x20/0x20
    [ 3710.108479]  ret_from_fork+0x1f/0x30
    [ 3710.108485]  </TASK>
    [ 3710.108486] ---[ end trace 1b4b23cd0c65d6a0 ]---
    
    After patch:
    [  402.473064] ice 0000:41:00.0: Type was not set for devlink port.
    [  402.473064] ice 0000:41:00.1: Type was not set for devlink port.
    
    Signed-off-by: Petr Oros <poros@redhat.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20230615095447.8259-1-poros@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d14264155226aea658fa332aa1baedc49e604d0
Author: Jisheng Zhang <jszhang@kernel.org>
Date:   Thu Jun 15 00:20:35 2023 +0800

    net: ethernet: litex: add support for 64 bit stats
    
    [ Upstream commit 18da174d865a87d47d2f33f5b0a322efcf067728 ]
    
    Implement 64 bit per cpu stats to fix the overflow of netdev->stats
    on 32 bit platforms. To simplify the code, we use net core
    pcpu_sw_netstats infrastructure. One small drawback is some memory
    overhead because litex uses just one queue, but we allocate the
    counters per cpu.
    
    Signed-off-by: Jisheng Zhang <jszhang@kernel.org>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Gabriel Somlo <gsomlo@gmail.com>
    Link: https://lore.kernel.org/r/20230614162035.300-1-jszhang@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86f9330a49d1464849482298dd34d361859183eb
Author: P Praneesh <quic_ppranees@quicinc.com>
Date:   Tue Jun 6 14:41:28 2023 +0530

    wifi: ath11k: fix memory leak in WMI firmware stats
    
    [ Upstream commit 6aafa1c2d3e3fea2ebe84c018003f2a91722e607 ]
    
    Memory allocated for firmware pdev, vdev and beacon statistics
    are not released during rmmod.
    
    Fix it by calling ath11k_fw_stats_free() function before hardware
    unregister.
    
    While at it, avoid calling ath11k_fw_stats_free() while processing
    the firmware stats received in the WMI event because the local list
    is getting spliced and reinitialised and hence there are no elements
    in the list after splicing.
    
    Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.7.0.1-01744-QCAHKSWPL_SILICONZ-1
    
    Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
    Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20230606091128.14202-1-quic_adisi@quicinc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 766e606536b945e19d761a7b4f10c05fa4ec62c5
Author: Abe Kohandel <abe.kohandel@intel.com>
Date:   Tue Jun 6 07:54:01 2023 -0700

    spi: dw: Add compatible for Intel Mount Evans SoC
    
    [ Upstream commit 0760d5d0e9f0c0e2200a0323a61d1995bb745dee ]
    
    The Intel Mount Evans SoC's Integrated Management Complex uses the SPI
    controller for access to a NOR SPI FLASH. However, the SoC doesn't
    provide a mechanism to override the native chip select signal.
    
    This driver doesn't use DMA for memory operations when a chip select
    override is not provided due to the native chip select timing behavior.
    As a result no DMA configuration is done for the controller and this
    configuration is not tested.
    
    The controller also has an errata where a full TX FIFO can result in
    data corruption. The suggested workaround is to never completely fill
    the FIFO. The TX FIFO has a size of 32 so the fifo_len is set to 31.
    
    Signed-off-by: Abe Kohandel <abe.kohandel@intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20230606145402.474866-2-abe.kohandel@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0124848c7940aba73492e282506b32a13f2e30e
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Sun Jun 4 12:11:27 2023 +0300

    wifi: mac80211_hwsim: Fix possible NULL dereference
    
    [ Upstream commit 0cc80943ef518a1c51a1111e9346d1daf11dd545 ]
    
    In a call to mac80211_hwsim_select_tx_link() the sta pointer might
    be NULL, thus need to check that it is not NULL before accessing it.
    
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230604120651.f4d889fc98c4.Iae85f527ed245a37637a874bb8b8c83d79812512@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8656b31d2efd3381fbcfb1d7665f65e0eb8e1748
Author: Wen Gong <quic_wgong@quicinc.com>
Date:   Fri May 26 12:41:06 2023 +0300

    wifi: ath11k: add support default regdb while searching board-2.bin for WCN6855
    
    [ Upstream commit 88ca89202f8e8afb5225eb5244d79cd67c15d744 ]
    
    Sometimes board-2.bin does not have the regdb data which matched the
    parameters such as vendor, device, subsystem-vendor, subsystem-device
    and etc. Add default regdb data with 'bus=%s' into board-2.bin for
    WCN6855, then ath11k use 'bus=pci' to search regdb data in board-2.bin
    for WCN6855.
    
    kernel: [  122.515808] ath11k_pci 0000:03:00.0: boot using board name 'bus=pci,vendor=17cb,device=1103,subsystem-vendor=17cb,subsystem-device=3374,qmi-chip-id=2,qmi-board-id=262'
    kernel: [  122.517240] ath11k_pci 0000:03:00.0: boot firmware request ath11k/WCN6855/hw2.0/board-2.bin size 6179564
    kernel: [  122.517280] ath11k_pci 0000:03:00.0: failed to fetch regdb data for bus=pci,vendor=17cb,device=1103,subsystem-vendor=17cb,subsystem-device=3374,qmi-chip-id=2,qmi-board-id=262 from ath11k/WCN6855/hw2.0/board-2.bin
    kernel: [  122.517464] ath11k_pci 0000:03:00.0: boot using board name 'bus=pci'
    kernel: [  122.518901] ath11k_pci 0000:03:00.0: boot firmware request ath11k/WCN6855/hw2.0/board-2.bin size 6179564
    kernel: [  122.518915] ath11k_pci 0000:03:00.0: board name
    kernel: [  122.518917] ath11k_pci 0000:03:00.0: 00000000: 62 75 73 3d 70 63 69                             bus=pci
    kernel: [  122.518918] ath11k_pci 0000:03:00.0: boot found match regdb data for name 'bus=pci'
    kernel: [  122.518920] ath11k_pci 0000:03:00.0: boot found regdb data for 'bus=pci'
    kernel: [  122.518921] ath11k_pci 0000:03:00.0: fetched regdb
    
    Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3
    
    Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20230517133959.8224-1-quic_wgong@quicinc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e291a07af77db0cab23e8c2f3446ab0762db9e1
Author: Aditi Ghag <aditi.ghag@isovalent.com>
Date:   Fri May 19 22:51:49 2023 +0000

    bpf: tcp: Avoid taking fast sock lock in iterator
    
    [ Upstream commit 9378096e8a656fb5c4099b26b1370c56f056eab9 ]
    
    This is a preparatory commit to replace `lock_sock_fast` with
    `lock_sock`,and facilitate BPF programs executed from the TCP sockets
    iterator to be able to destroy TCP sockets using the bpf_sock_destroy
    kfunc (implemented in follow-up commits).
    
    Previously, BPF TCP iterator was acquiring the sock lock with BH
    disabled. This led to scenarios where the sockets hash table bucket lock
    can be acquired with BH enabled in some path versus disabled in other.
    In such situation, kernel issued a warning since it thinks that in the
    BH enabled path the same bucket lock *might* be acquired again in the
    softirq context (BH disabled), which will lead to a potential dead lock.
    Since bpf_sock_destroy also happens in a process context, the potential
    deadlock warning is likely a false alarm.
    
    Here is a snippet of annotated stack trace that motivated this change:
    
    ```
    
    Possible interrupt unsafe locking scenario:
    
          CPU0                    CPU1
          ----                    ----
     lock(&h->lhash2[i].lock);
                                  local_bh_disable();
                                  lock(&h->lhash2[i].lock);
    kernel imagined possible scenario:
      local_bh_disable();  /* Possible softirq */
      lock(&h->lhash2[i].lock);
    *** Potential Deadlock ***
    
    process context:
    
    lock_acquire+0xcd/0x330
    _raw_spin_lock+0x33/0x40
    ------> Acquire (bucket) lhash2.lock with BH enabled
    __inet_hash+0x4b/0x210
    inet_csk_listen_start+0xe6/0x100
    inet_listen+0x95/0x1d0
    __sys_listen+0x69/0xb0
    __x64_sys_listen+0x14/0x20
    do_syscall_64+0x3c/0x90
    entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    bpf_sock_destroy run from iterator:
    
    lock_acquire+0xcd/0x330
    _raw_spin_lock+0x33/0x40
    ------> Acquire (bucket) lhash2.lock with BH disabled
    inet_unhash+0x9a/0x110
    tcp_set_state+0x6a/0x210
    tcp_abort+0x10d/0x200
    bpf_prog_6793c5ca50c43c0d_iter_tcp6_server+0xa4/0xa9
    bpf_iter_run_prog+0x1ff/0x340
    ------> lock_sock_fast that acquires sock lock with BH disabled
    bpf_iter_tcp_seq_show+0xca/0x190
    bpf_seq_read+0x177/0x450
    
    ```
    
    Also, Yonghong reported a deadlock for non-listening TCP sockets that
    this change resolves. Previously, `lock_sock_fast` held the sock spin
    lock with BH which was again being acquired in `tcp_abort`:
    
    ```
    watchdog: BUG: soft lockup - CPU#0 stuck for 86s! [test_progs:2331]
    RIP: 0010:queued_spin_lock_slowpath+0xd8/0x500
    Call Trace:
     <TASK>
     _raw_spin_lock+0x84/0x90
     tcp_abort+0x13c/0x1f0
     bpf_prog_88539c5453a9dd47_iter_tcp6_client+0x82/0x89
     bpf_iter_run_prog+0x1aa/0x2c0
     ? preempt_count_sub+0x1c/0xd0
     ? from_kuid_munged+0x1c8/0x210
     bpf_iter_tcp_seq_show+0x14e/0x1b0
     bpf_seq_read+0x36c/0x6a0
    
    bpf_iter_tcp_seq_show
       lock_sock_fast
         __lock_sock_fast
           spin_lock_bh(&sk->sk_lock.slock);
            /* * Fast path return with bottom halves disabled and * sock::sk_lock.slock held.* */
    
     ...
     tcp_abort
       local_bh_disable();
       spin_lock(&((sk)->sk_lock.slock)); // from bh_lock_sock(sk)
    
    ```
    
    With the switch to `lock_sock`, it calls `spin_unlock_bh` before returning:
    
    ```
    lock_sock
        lock_sock_nested
           spin_lock_bh(&sk->sk_lock.slock);
           :
           spin_unlock_bh(&sk->sk_lock.slock);
    ```
    
    Acked-by: Yonghong Song <yhs@meta.com>
    Acked-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Aditi Ghag <aditi.ghag@isovalent.com>
    Link: https://lore.kernel.org/r/20230519225157.760788-2-aditi.ghag@isovalent.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c006fe361cfd947f51a56793deddf891e5cbfef8
Author: Martin KaFai Lau <martin.lau@kernel.org>
Date:   Wed May 10 21:37:48 2023 -0700

    bpf: Address KCSAN report on bpf_lru_list
    
    [ Upstream commit ee9fd0ac3017c4313be91a220a9ac4c99dde7ad4 ]
    
    KCSAN reported a data-race when accessing node->ref.
    Although node->ref does not have to be accurate,
    take this chance to use a more common READ_ONCE() and WRITE_ONCE()
    pattern instead of data_race().
    
    There is an existing bpf_lru_node_is_ref() and bpf_lru_node_set_ref().
    This patch also adds bpf_lru_node_clear_ref() to do the
    WRITE_ONCE(node->ref, 0) also.
    
    ==================================================================
    BUG: KCSAN: data-race in __bpf_lru_list_rotate / __htab_lru_percpu_map_update_elem
    
    write to 0xffff888137038deb of 1 bytes by task 11240 on cpu 1:
    __bpf_lru_node_move kernel/bpf/bpf_lru_list.c:113 [inline]
    __bpf_lru_list_rotate_active kernel/bpf/bpf_lru_list.c:149 [inline]
    __bpf_lru_list_rotate+0x1bf/0x750 kernel/bpf/bpf_lru_list.c:240
    bpf_lru_list_pop_free_to_local kernel/bpf/bpf_lru_list.c:329 [inline]
    bpf_common_lru_pop_free kernel/bpf/bpf_lru_list.c:447 [inline]
    bpf_lru_pop_free+0x638/0xe20 kernel/bpf/bpf_lru_list.c:499
    prealloc_lru_pop kernel/bpf/hashtab.c:290 [inline]
    __htab_lru_percpu_map_update_elem+0xe7/0x820 kernel/bpf/hashtab.c:1316
    bpf_percpu_hash_update+0x5e/0x90 kernel/bpf/hashtab.c:2313
    bpf_map_update_value+0x2a9/0x370 kernel/bpf/syscall.c:200
    generic_map_update_batch+0x3ae/0x4f0 kernel/bpf/syscall.c:1687
    bpf_map_do_batch+0x2d9/0x3d0 kernel/bpf/syscall.c:4534
    __sys_bpf+0x338/0x810
    __do_sys_bpf kernel/bpf/syscall.c:5096 [inline]
    __se_sys_bpf kernel/bpf/syscall.c:5094 [inline]
    __x64_sys_bpf+0x43/0x50 kernel/bpf/syscall.c:5094
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffff888137038deb of 1 bytes by task 11241 on cpu 0:
    bpf_lru_node_set_ref kernel/bpf/bpf_lru_list.h:70 [inline]
    __htab_lru_percpu_map_update_elem+0x2f1/0x820 kernel/bpf/hashtab.c:1332
    bpf_percpu_hash_update+0x5e/0x90 kernel/bpf/hashtab.c:2313
    bpf_map_update_value+0x2a9/0x370 kernel/bpf/syscall.c:200
    generic_map_update_batch+0x3ae/0x4f0 kernel/bpf/syscall.c:1687
    bpf_map_do_batch+0x2d9/0x3d0 kernel/bpf/syscall.c:4534
    __sys_bpf+0x338/0x810
    __do_sys_bpf kernel/bpf/syscall.c:5096 [inline]
    __se_sys_bpf kernel/bpf/syscall.c:5094 [inline]
    __x64_sys_bpf+0x43/0x50 kernel/bpf/syscall.c:5094
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x01 -> 0x00
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 11241 Comm: syz-executor.3 Not tainted 6.3.0-rc7-syzkaller-00136-g6a66fdd29ea1 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/30/2023
    ==================================================================
    
    Reported-by: syzbot+ebe648a84e8784763f82@syzkaller.appspotmail.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/r/20230511043748.1384166-1-martin.lau@linux.dev
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10fa03a9c1bcdbd20f8f538542a3d902f9f22f3c
Author: Kui-Feng Lee <thinker.li@gmail.com>
Date:   Tue May 2 11:14:18 2023 -0700

    bpf: Print a warning only if writing to unprivileged_bpf_disabled.
    
    [ Upstream commit fedf99200ab086c42a572fca1d7266b06cdc3e3f ]
    
    Only print the warning message if you are writing to
    "/proc/sys/kernel/unprivileged_bpf_disabled".
    
    The kernel may print an annoying warning when you read
    "/proc/sys/kernel/unprivileged_bpf_disabled" saying
    
      WARNING: Unprivileged eBPF is enabled with eIBRS on, data leaks possible
      via Spectre v2 BHB attacks!
    
    However, this message is only meaningful when the feature is
    disabled or enabled.
    
    Signed-off-by: Kui-Feng Lee <kuifeng@meta.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20230502181418.308479-1-kuifeng@meta.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d1342108c2bf11aaaf293becfc010ecdb6170d9
Author: Maxime Bizon <mbizon@freebox.fr>
Date:   Fri Apr 21 16:54:45 2023 +0200

    wifi: ath11k: fix registration of 6Ghz-only phy without the full channel range
    
    [ Upstream commit e2ceb1de2f83aafd8003f0b72dfd4b7441e97d14 ]
    
    Because of what seems to be a typo, a 6Ghz-only phy for which the BDF
    does not allow the 7115Mhz channel will fail to register:
    
      WARNING: CPU: 2 PID: 106 at net/wireless/core.c:907 wiphy_register+0x914/0x954
      Modules linked in: ath11k_pci sbsa_gwdt
      CPU: 2 PID: 106 Comm: kworker/u8:5 Not tainted 6.3.0-rc7-next-20230418-00549-g1e096a17625a-dirty #9
      Hardware name: Freebox V7R Board (DT)
      Workqueue: ath11k_qmi_driver_event ath11k_qmi_driver_event_work
      pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
      pc : wiphy_register+0x914/0x954
      lr : ieee80211_register_hw+0x67c/0xc10
      sp : ffffff800b123aa0
      x29: ffffff800b123aa0 x28: 0000000000000000 x27: 0000000000000000
      x26: 0000000000000000 x25: 0000000000000006 x24: ffffffc008d51418
      x23: ffffffc008cb0838 x22: ffffff80176c2460 x21: 0000000000000168
      x20: ffffff80176c0000 x19: ffffff80176c03e0 x18: 0000000000000014
      x17: 00000000cbef338c x16: 00000000d2a26f21 x15: 00000000ad6bb85f
      x14: 0000000000000020 x13: 0000000000000020 x12: 00000000ffffffbd
      x11: 0000000000000208 x10: 00000000fffffdf7 x9 : ffffffc009394718
      x8 : ffffff80176c0528 x7 : 000000007fffffff x6 : 0000000000000006
      x5 : 0000000000000005 x4 : ffffff800b304284 x3 : ffffff800b304284
      x2 : ffffff800b304d98 x1 : 0000000000000000 x0 : 0000000000000000
      Call trace:
       wiphy_register+0x914/0x954
       ieee80211_register_hw+0x67c/0xc10
       ath11k_mac_register+0x7c4/0xe10
       ath11k_core_qmi_firmware_ready+0x1f4/0x570
       ath11k_qmi_driver_event_work+0x198/0x590
       process_one_work+0x1b8/0x328
       worker_thread+0x6c/0x414
       kthread+0x100/0x104
       ret_from_fork+0x10/0x20
      ---[ end trace 0000000000000000 ]---
      ath11k_pci 0002:01:00.0: ieee80211 registration failed: -22
      ath11k_pci 0002:01:00.0: failed register the radio with mac80211: -22
      ath11k_pci 0002:01:00.0: failed to create pdev core: -22
    
    Signed-off-by: Maxime Bizon <mbizon@freebox.fr>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20230421145445.2612280-1-mbizon@freebox.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78a5f711efceb37e32c48cd6b40addb671fea9cc
Author: Yicong Yang <yangyicong@hisilicon.com>
Date:   Tue May 30 16:25:07 2023 +0800

    sched/fair: Don't balance task to its current running CPU
    
    [ Upstream commit 0dd37d6dd33a9c23351e6115ae8cdac7863bc7de ]
    
    We've run into the case that the balancer tries to balance a migration
    disabled task and trigger the warning in set_task_cpu() like below:
    
     ------------[ cut here ]------------
     WARNING: CPU: 7 PID: 0 at kernel/sched/core.c:3115 set_task_cpu+0x188/0x240
     Modules linked in: hclgevf xt_CHECKSUM ipt_REJECT nf_reject_ipv4 <...snip>
     CPU: 7 PID: 0 Comm: swapper/7 Kdump: loaded Tainted: G           O       6.1.0-rc4+ #1
     Hardware name: Huawei TaiShan 2280 V2/BC82AMDC, BIOS 2280-V2 CS V5.B221.01 12/09/2021
     pstate: 604000c9 (nZCv daIF +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
     pc : set_task_cpu+0x188/0x240
     lr : load_balance+0x5d0/0xc60
     sp : ffff80000803bc70
     x29: ffff80000803bc70 x28: ffff004089e190e8 x27: ffff004089e19040
     x26: ffff007effcabc38 x25: 0000000000000000 x24: 0000000000000001
     x23: ffff80000803be84 x22: 000000000000000c x21: ffffb093e79e2a78
     x20: 000000000000000c x19: ffff004089e19040 x18: 0000000000000000
     x17: 0000000000001fad x16: 0000000000000030 x15: 0000000000000000
     x14: 0000000000000003 x13: 0000000000000000 x12: 0000000000000000
     x11: 0000000000000001 x10: 0000000000000400 x9 : ffffb093e4cee530
     x8 : 00000000fffffffe x7 : 0000000000ce168a x6 : 000000000000013e
     x5 : 00000000ffffffe1 x4 : 0000000000000001 x3 : 0000000000000b2a
     x2 : 0000000000000b2a x1 : ffffb093e6d6c510 x0 : 0000000000000001
     Call trace:
      set_task_cpu+0x188/0x240
      load_balance+0x5d0/0xc60
      rebalance_domains+0x26c/0x380
      _nohz_idle_balance.isra.0+0x1e0/0x370
      run_rebalance_domains+0x6c/0x80
      __do_softirq+0x128/0x3d8
      ____do_softirq+0x18/0x24
      call_on_irq_stack+0x2c/0x38
      do_softirq_own_stack+0x24/0x3c
      __irq_exit_rcu+0xcc/0xf4
      irq_exit_rcu+0x18/0x24
      el1_interrupt+0x4c/0xe4
      el1h_64_irq_handler+0x18/0x2c
      el1h_64_irq+0x74/0x78
      arch_cpu_idle+0x18/0x4c
      default_idle_call+0x58/0x194
      do_idle+0x244/0x2b0
      cpu_startup_entry+0x30/0x3c
      secondary_start_kernel+0x14c/0x190
      __secondary_switched+0xb0/0xb4
     ---[ end trace 0000000000000000 ]---
    
    Further investigation shows that the warning is superfluous, the migration
    disabled task is just going to be migrated to its current running CPU.
    This is because that on load balance if the dst_cpu is not allowed by the
    task, we'll re-select a new_dst_cpu as a candidate. If no task can be
    balanced to dst_cpu we'll try to balance the task to the new_dst_cpu
    instead. In this case when the migration disabled task is not on CPU it
    only allows to run on its current CPU, load balance will select its
    current CPU as new_dst_cpu and later triggers the warning above.
    
    The new_dst_cpu is chosen from the env->dst_grpmask. Currently it
    contains CPUs in sched_group_span() and if we have overlapped groups it's
    possible to run into this case. This patch makes env->dst_grpmask of
    group_balance_mask() which exclude any CPUs from the busiest group and
    solve the issue. For balancing in a domain with no overlapped groups
    the behaviour keeps same as before.
    
    Suggested-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lore.kernel.org/r/20230530082507.10444-1-yangyicong@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 896f4d6046b3d5faa84afd0c85f266251e5b3cbf
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Fri Apr 7 16:05:38 2023 -0700

    rcu: Mark additional concurrent load from ->cpu_no_qs.b.exp
    
    [ Upstream commit 9146eb25495ea8bfb5010192e61e3ed5805ce9ef ]
    
    The per-CPU rcu_data structure's ->cpu_no_qs.b.exp field is updated
    only on the instance corresponding to the current CPU, but can be read
    more widely.  Unmarked accesses are OK from the corresponding CPU, but
    only if interrupts are disabled, given that interrupt handlers can and
    do modify this field.
    
    Unfortunately, although the load from rcu_preempt_deferred_qs() is always
    carried out from the corresponding CPU, interrupts are not necessarily
    disabled.  This commit therefore upgrades this load to READ_ONCE.
    
    Similarly, the diagnostic access from synchronize_rcu_expedited_wait()
    might run with interrupts disabled and from some other CPU.  This commit
    therefore marks this load with data_race().
    
    Finally, the C-language access in rcu_preempt_ctxt_queue() is OK as
    is because interrupts are disabled and this load is always from the
    corresponding CPU.  This commit adds a comment giving the rationale for
    this access being safe.
    
    This data race was reported by KCSAN.  Not appropriate for backporting
    due to failure being unlikely.
    
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9027d69221ff96e1356f070f7feb2ff989ae7388
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Wed Aug 3 01:22:05 2022 +0900

    rcu-tasks: Avoid pr_info() with spin lock in cblist_init_generic()
    
    [ Upstream commit 5fc8cbe4cf0fd34ded8045c385790c3bf04f6785 ]
    
    pr_info() is called with rtp->cbs_gbl_lock spin lock locked.  Because
    pr_info() calls printk() that might sleep, this will result in BUG
    like below:
    
    [    0.206455] cblist_init_generic: Setting adjustable number of callback queues.
    [    0.206463]
    [    0.206464] =============================
    [    0.206464] [ BUG: Invalid wait context ]
    [    0.206465] 5.19.0-00428-g9de1f9c8ca51 #5 Not tainted
    [    0.206466] -----------------------------
    [    0.206466] swapper/0/1 is trying to lock:
    [    0.206467] ffffffffa0167a58 (&port_lock_key){....}-{3:3}, at: serial8250_console_write+0x327/0x4a0
    [    0.206473] other info that might help us debug this:
    [    0.206473] context-{5:5}
    [    0.206474] 3 locks held by swapper/0/1:
    [    0.206474]  #0: ffffffff9eb597e0 (rcu_tasks.cbs_gbl_lock){....}-{2:2}, at: cblist_init_generic.constprop.0+0x14/0x1f0
    [    0.206478]  #1: ffffffff9eb579c0 (console_lock){+.+.}-{0:0}, at: _printk+0x63/0x7e
    [    0.206482]  #2: ffffffff9ea77780 (console_owner){....}-{0:0}, at: console_emit_next_record.constprop.0+0x111/0x330
    [    0.206485] stack backtrace:
    [    0.206486] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.19.0-00428-g9de1f9c8ca51 #5
    [    0.206488] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.0-1.fc36 04/01/2014
    [    0.206489] Call Trace:
    [    0.206490]  <TASK>
    [    0.206491]  dump_stack_lvl+0x6a/0x9f
    [    0.206493]  __lock_acquire.cold+0x2d7/0x2fe
    [    0.206496]  ? stack_trace_save+0x46/0x70
    [    0.206497]  lock_acquire+0xd1/0x2f0
    [    0.206499]  ? serial8250_console_write+0x327/0x4a0
    [    0.206500]  ? __lock_acquire+0x5c7/0x2720
    [    0.206502]  _raw_spin_lock_irqsave+0x3d/0x90
    [    0.206504]  ? serial8250_console_write+0x327/0x4a0
    [    0.206506]  serial8250_console_write+0x327/0x4a0
    [    0.206508]  console_emit_next_record.constprop.0+0x180/0x330
    [    0.206511]  console_unlock+0xf7/0x1f0
    [    0.206512]  vprintk_emit+0xf7/0x330
    [    0.206514]  _printk+0x63/0x7e
    [    0.206516]  cblist_init_generic.constprop.0.cold+0x24/0x32
    [    0.206518]  rcu_init_tasks_generic+0x5/0xd9
    [    0.206522]  kernel_init_freeable+0x15b/0x2a2
    [    0.206523]  ? rest_init+0x160/0x160
    [    0.206526]  kernel_init+0x11/0x120
    [    0.206527]  ret_from_fork+0x1f/0x30
    [    0.206530]  </TASK>
    [    0.207018] cblist_init_generic: Setting shift to 1 and lim to 1.
    
    This patch moves pr_info() so that it is called without
    rtp->cbs_gbl_lock locked.
    
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Tested-by: "Zhang, Qiang1" <qiang1.zhang@intel.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e055d0ec8809c3b578863050479571fe5da6baaf
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Jun 20 20:45:04 2023 +0200

    ACPI: video: Add backlight=native DMI quirk for Dell Studio 1569
    
    [ Upstream commit 23d28cc0444be3f694eb986cd653b6888b78431d ]
    
    The Dell Studio 1569 predates Windows 8, so it defaults to using
    acpi_video# for backlight control, but this is non functional on
    this model.
    
    Add a DMI quirk to use the native intel_backlight interface which
    does work properly.
    
    Reported-by: raycekarneal <raycekarneal@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa7cdf487ab3fa47284daaccc3d7d5de01c6a84c
Author: Immad Mir <mirimmad17@gmail.com>
Date:   Fri Jun 23 19:17:08 2023 +0530

    FS: JFS: Check for read-only mounted filesystem in txBegin
    
    [ Upstream commit 95e2b352c03b0a86c5717ba1d24ea20969abcacc ]
    
     This patch adds a check for read-only mounted filesystem
     in txBegin before starting a transaction potentially saving
     from NULL pointer deref.
    
    Signed-off-by: Immad Mir <mirimmad17@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e5eb6c5ecd8ddb9cfea751cf30f9e23eac97ca3
Author: Immad Mir <mirimmad17@gmail.com>
Date:   Fri Jun 23 19:14:01 2023 +0530

    FS: JFS: Fix null-ptr-deref Read in txBegin
    
    [ Upstream commit 47cfdc338d674d38f4b2f22b7612cc6a2763ba27 ]
    
     Syzkaller reported an issue where txBegin may be called
     on a superblock in a read-only mounted filesystem which leads
     to NULL pointer deref. This could be solved by checking if
     the filesystem is read-only before calling txBegin, and returning
     with appropiate error code.
    
    Reported-By: syzbot+f1faa20eec55e0c8644c@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=be7e52c50c5182cc09a09ea6fc456446b2039de3
    
    Signed-off-by: Immad Mir <mirimmad17@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da0a7c697595d37a48d2f29e1a8b44f42a162908
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Jun 22 17:43:57 2023 -0600

    MIPS: dec: prom: Address -Warray-bounds warning
    
    [ Upstream commit 7b191b9b55df2a844bd32d1d380f47a7df1c2896 ]
    
    Zero-length arrays are deprecated, and we are replacing them with flexible
    array members instead. So, replace zero-length array with flexible-array
    member in struct memmap.
    
    Address the following warning found after building (with GCC-13) mips64
    with decstation_64_defconfig:
    In function 'rex_setup_memory_region',
        inlined from 'prom_meminit' at arch/mips/dec/prom/memory.c:91:3:
    arch/mips/dec/prom/memory.c:72:31: error: array subscript i is outside array bounds of 'unsigned char[0]' [-Werror=array-bounds=]
       72 |                 if (bm->bitmap[i] == 0xff)
          |                     ~~~~~~~~~~^~~
    In file included from arch/mips/dec/prom/memory.c:16:
    ./arch/mips/include/asm/dec/prom.h: In function 'prom_meminit':
    ./arch/mips/include/asm/dec/prom.h:73:23: note: while referencing 'bitmap'
       73 |         unsigned char bitmap[0];
    
    This helps with the ongoing efforts to globally enable -Warray-bounds.
    
    This results in no differences in binary output.
    
    Link: https://github.com/KSPP/linux/issues/79
    Link: https://github.com/KSPP/linux/issues/323
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdf07ab1595b613b03f32dbb5cb379edfa1a7334
Author: Yogesh <yogi.kernel@gmail.com>
Date:   Thu Jun 22 00:07:03 2023 +0530

    fs: jfs: Fix UBSAN: array-index-out-of-bounds in dbAllocDmapLev
    
    [ Upstream commit 4e302336d5ca1767a06beee7596a72d3bdc8d983 ]
    
    Syzkaller reported the following issue:
    
    UBSAN: array-index-out-of-bounds in fs/jfs/jfs_dmap.c:1965:6
    index -84 is out of range for type 's8[341]' (aka 'signed char[341]')
    CPU: 1 PID: 4995 Comm: syz-executor146 Not tainted 6.4.0-rc6-syzkaller-00037-gb6dad5178cea #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/27/2023
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106
     ubsan_epilogue lib/ubsan.c:217 [inline]
     __ubsan_handle_out_of_bounds+0x11c/0x150 lib/ubsan.c:348
     dbAllocDmapLev+0x3e5/0x430 fs/jfs/jfs_dmap.c:1965
     dbAllocCtl+0x113/0x920 fs/jfs/jfs_dmap.c:1809
     dbAllocAG+0x28f/0x10b0 fs/jfs/jfs_dmap.c:1350
     dbAlloc+0x658/0xca0 fs/jfs/jfs_dmap.c:874
     dtSplitUp fs/jfs/jfs_dtree.c:974 [inline]
     dtInsert+0xda7/0x6b00 fs/jfs/jfs_dtree.c:863
     jfs_create+0x7b6/0xbb0 fs/jfs/namei.c:137
     lookup_open fs/namei.c:3492 [inline]
     open_last_lookups fs/namei.c:3560 [inline]
     path_openat+0x13df/0x3170 fs/namei.c:3788
     do_filp_open+0x234/0x490 fs/namei.c:3818
     do_sys_openat2+0x13f/0x500 fs/open.c:1356
     do_sys_open fs/open.c:1372 [inline]
     __do_sys_openat fs/open.c:1388 [inline]
     __se_sys_openat fs/open.c:1383 [inline]
     __x64_sys_openat+0x247/0x290 fs/open.c:1383
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f1f4e33f7e9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 51 14 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffc21129578 EFLAGS: 00000246 ORIG_RAX: 0000000000000101
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f1f4e33f7e9
    RDX: 000000000000275a RSI: 0000000020000040 RDI: 00000000ffffff9c
    RBP: 00007f1f4e2ff080 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f1f4e2ff110
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    
    The bug occurs when the dbAllocDmapLev()function attempts to access
    dp->tree.stree[leafidx + LEAFIND] while the leafidx value is negative.
    
    To rectify this, the patch introduces a safeguard within the
    dbAllocDmapLev() function. A check has been added to verify if leafidx is
    negative. If it is, the function immediately returns an I/O error, preventing
    any further execution that could potentially cause harm.
    
    Tested via syzbot.
    
    Reported-by: syzbot+853a6f4dfa3cf37d3aea@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=ae2f5a27a07ae44b0f17
    Signed-off-by: Yogesh <yogi.kernel@gmail.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6824149809395dfbb5bc36bc7057cc3cb84e56d
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jun 21 11:32:35 2023 +0200

    udf: Fix uninitialized array access for some pathnames
    
    [ Upstream commit 028f6055c912588e6f72722d89c30b401bbcf013 ]
    
    For filenames that begin with . and are between 2 and 5 characters long,
    UDF charset conversion code would read uninitialized memory in the
    output buffer. The only practical impact is that the name may be prepended a
    "unification hash" when it is not actually needed but still it is good
    to fix this.
    
    Reported-by: syzbot+cd311b1e43cc25f90d18@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/all/000000000000e2638a05fe9dc8f9@google.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cce9107c315f564784f18fab18d2c20ab888d262
Author: Christian Brauner <brauner@kernel.org>
Date:   Tue Jun 13 10:13:37 2023 +0200

    ovl: check type and offset of struct vfsmount in ovl_entry
    
    [ Upstream commit f723edb8a532cd26e1ff0a2b271d73762d48f762 ]
    
    Porting overlayfs to the new amount api I started experiencing random
    crashes that couldn't be explained easily. So after much debugging and
    reasoning it became clear that struct ovl_entry requires the point to
    struct vfsmount to be the first member and of type struct vfsmount.
    
    During the port I added a new member at the beginning of struct
    ovl_entry which broke all over the place in the form of random crashes
    and cache corruptions. While there's a comment in ovl_free_fs() to the
    effect of "Hack! Reuse ofs->layers as a vfsmount array before freeing
    it" there's no such comment on struct ovl_entry which makes this easy to
    trip over.
    
    Add a comment and two static asserts for both the offset and the type of
    pointer in struct ovl_entry.
    
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5228d4d505288c292be1f9fb2c73261946a6b3a5
Author: Marco Morandini <marco.morandini@polimi.it>
Date:   Tue May 30 15:40:08 2023 +0200

    HID: add quirk for 03f0:464a HP Elite Presenter Mouse
    
    [ Upstream commit 0db117359e47750d8bd310d19f13e1c4ef7fc26a ]
    
    HP Elite Presenter Mouse HID Record Descriptor shows
    two mouses (Repord ID 0x1 and 0x2), one keypad (Report ID 0x5),
    two Consumer Controls (Report IDs 0x6 and 0x3).
    Previous to this commit it registers one mouse, one keypad
    and one Consumer Control, and it was usable only as a
    digitl laser pointer (one of the two mouses). This patch defines
    the 464a USB device ID and enables the HID_QUIRK_MULTI_INPUT
    quirk for it, allowing to use the device both as a mouse
    and a digital laser pointer.
    
    Signed-off-by: Marco Morandini <marco.morandini@polimi.it>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6432843debe1ec7d76c5b2f76c67f9c5df22436e
Author: Ye Bin <yebin10@huawei.com>
Date:   Mon Jun 5 22:07:31 2023 +0800

    quota: fix warning in dqgrab()
    
    [ Upstream commit d6a95db3c7ad160bc16b89e36449705309b52bcb ]
    
    There's issue as follows when do fault injection:
    WARNING: CPU: 1 PID: 14870 at include/linux/quotaops.h:51 dquot_disable+0x13b7/0x18c0
    Modules linked in:
    CPU: 1 PID: 14870 Comm: fsconfig Not tainted 6.3.0-next-20230505-00006-g5107a9c821af-dirty #541
    RIP: 0010:dquot_disable+0x13b7/0x18c0
    RSP: 0018:ffffc9000acc79e0 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff88825e41b980
    RDX: 0000000000000000 RSI: ffff88825e41b980 RDI: 0000000000000002
    RBP: ffff888179f68000 R08: ffffffff82087ca7 R09: 0000000000000000
    R10: 0000000000000001 R11: ffffed102f3ed026 R12: ffff888179f68130
    R13: ffff888179f68110 R14: dffffc0000000000 R15: ffff888179f68118
    FS:  00007f450a073740(0000) GS:ffff88882fc00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffe96f2efd8 CR3: 000000025c8ad000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     dquot_load_quota_sb+0xd53/0x1060
     dquot_resume+0x172/0x230
     ext4_reconfigure+0x1dc6/0x27b0
     reconfigure_super+0x515/0xa90
     __x64_sys_fsconfig+0xb19/0xd20
     do_syscall_64+0x39/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Above issue may happens as follows:
    ProcessA              ProcessB                    ProcessC
    sys_fsconfig
      vfs_fsconfig_locked
       reconfigure_super
         ext4_remount
          dquot_suspend -> suspend all type quota
    
                     sys_fsconfig
                      vfs_fsconfig_locked
                        reconfigure_super
                         ext4_remount
                          dquot_resume
                           ret = dquot_load_quota_sb
                            add_dquot_ref
                                               do_open  -> open file O_RDWR
                                                vfs_open
                                                 do_dentry_open
                                                  get_write_access
                                                   atomic_inc_unless_negative(&inode->i_writecount)
                                                  ext4_file_open
                                                   dquot_file_open
                                                    dquot_initialize
                                                      __dquot_initialize
                                                       dqget
                                                        atomic_inc(&dquot->dq_count);
    
                              __dquot_initialize
                               __dquot_initialize
                                dqget
                                 if (!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))
                                   ext4_acquire_dquot
                                    -> Return error DQ_ACTIVE_B flag isn't set
                             dquot_disable
                              invalidate_dquots
                               if (atomic_read(&dquot->dq_count))
                                dqgrab
                                 WARN_ON_ONCE(!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))
                                  -> Trigger warning
    
    In the above scenario, 'dquot->dq_flags' has no DQ_ACTIVE_B is normal when
    dqgrab().
    To solve above issue just replace the dqgrab() use in invalidate_dquots() with
    atomic_inc(&dquot->dq_count).
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230605140731.2427629-3-yebin10@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f2ec87f4ab833d56053f41cbf8febca7c9b264c
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jun 5 22:07:30 2023 +0800

    quota: Properly disable quotas when add_dquot_ref() fails
    
    [ Upstream commit 6a4e3363792e30177cc3965697e34ddcea8b900b ]
    
    When add_dquot_ref() fails (usually due to IO error or ENOMEM), we want
    to disable quotas we are trying to enable. However dquot_disable() call
    was passed just the flags we are enabling so in case flags ==
    DQUOT_USAGE_ENABLED dquot_disable() call will just fail with EINVAL
    instead of properly disabling quotas. Fix the problem by always passing
    DQUOT_LIMITS_ENABLED | DQUOT_USAGE_ENABLED to dquot_disable() in this
    case.
    
    Reported-and-tested-by: Ye Bin <yebin10@huawei.com>
    Reported-by: syzbot+e633c79ceaecbf479854@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230605140731.2427629-2-yebin10@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a97ec78092fd3e5dd7013b6fa88b8923ebaa15f
Author: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
Date:   Wed May 10 19:39:05 2023 +0200

    ALSA: emu10k1: roll up loops in DSP setup code for Audigy
    
    [ Upstream commit 8cabf83c7aa54530e699be56249fb44f9505c4f3 ]
    
    There is no apparent reason for the massive code duplication.
    
    Signed-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
    Link: https://lore.kernel.org/r/20230510173917.3073107-3-oswald.buddenhagen@gmx.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e1be420b86980c25a75325e90dfc3fc73126f61
Author: hackyzh002 <hackyzh002@gmail.com>
Date:   Wed Apr 19 20:20:58 2023 +0800

    drm/radeon: Fix integer overflow in radeon_cs_parser_init
    
    [ Upstream commit f828b681d0cd566f86351c0b913e6cb6ed8c7b9c ]
    
    The type of size is unsigned, if size is 0x40000000, there will be an
    integer overflow, size will be zero after size *= sizeof(uint32_t),
    will cause uninitialized memory to be referenced later
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: hackyzh002 <hackyzh002@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ca37685341256ec5ff88ca95021afd32e0a4b0b
Author: Eric Whitney <enwlinux@gmail.com>
Date:   Mon May 22 14:15:20 2023 -0400

    ext4: correct inline offset when handling xattrs in inode body
    
    commit 6909cf5c4101214f4305a62d582a5b93c7e1eb9a upstream.
    
    When run on a file system where the inline_data feature has been
    enabled, xfstests generic/269, generic/270, and generic/476 cause ext4
    to emit error messages indicating that inline directory entries are
    corrupted.  This occurs because the inline offset used to locate
    inline directory entries in the inode body is not updated when an
    xattr in that shared region is deleted and the region is shifted in
    memory to recover the space it occupied.  If the deleted xattr precedes
    the system.data attribute, which points to the inline directory entries,
    that attribute will be moved further up in the region.  The inline
    offset continues to point to whatever is located in system.data's former
    location, with unfortunate effects when used to access directory entries
    or (presumably) inline data in the inode body.
    
    Cc: stable@kernel.org
    Signed-off-by: Eric Whitney <enwlinux@gmail.com>
    Link: https://lore.kernel.org/r/20230522181520.1570360-1-enwlinux@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aba8f85eca81f8da2fe5fb639167448ad358b519
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Sat Jul 1 11:47:23 2023 +0200

    ASoC: codecs: wcd938x: fix soundwire initialisation race
    
    commit 6f49256897083848ce9a59651f6b53fc80462397 upstream.
    
    Make sure that the soundwire device used for register accesses has been
    enumerated and initialised before trying to read the codec variant
    during component probe.
    
    This specifically avoids interpreting (a masked and shifted) -EBUSY
    errno as the variant:
    
            wcd938x_codec audio-codec: ASoC: error at soc_component_read_no_lock on audio-codec for register: [0x000034b0] -16
    
    in case the soundwire device has not yet been initialised, which in turn
    prevents some headphone controls from being registered.
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Reported-by: Steev Klimaszewski <steev@kali.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Link: https://lore.kernel.org/r/20230701094723.29379-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a261a4193b591a3d52dc34da6f44057e0871784
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Jun 30 14:03:18 2023 +0200

    ASoC: codecs: wcd938x: fix codec initialisation race
    
    commit 85a61b1ce461a3f62f1019e5e6423c393c542bff upstream.
    
    Make sure to resume the codec and soundwire device before trying to read
    the codec variant and configure the device during component probe.
    
    This specifically avoids interpreting (a masked and shifted) -EBUSY
    errno as the variant:
    
            wcd938x_codec audio-codec: ASoC: error at soc_component_read_no_lock on audio-codec for register: [0x000034b0] -16
    
    when the soundwire device happens to be suspended, which in turn
    prevents some headphone controls from being registered.
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Reported-by: Steev Klimaszewski <steev@kali.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20230630120318.6571-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b11d2f0e525d09c5a1a46adccc8a88dc3c94146
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:15 2023 +0200

    ASoC: codecs: wcd934x: fix resource leaks on component remove
    
    commit 798590cc7d3c2b5f3a7548d96dd4d8a081c1bc39 upstream.
    
    Make sure to release allocated MBHC resources also on component remove.
    
    This is specifically needed to allow probe deferrals of the sound card
    which otherwise fails when reprobing the codec component.
    
    Fixes: 9fb9b1690f0b ("ASoC: codecs: wcd934x: add mbhc support")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-6-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb241ae928c694e365c30c888c9eb02dcc812dfd
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Jul 3 14:47:01 2023 +0200

    ASoC: codecs: wcd938x: fix missing mbhc init error handling
    
    commit 7dfae2631bfbdebecd35fe7b472ab3cc95c9ed66 upstream.
    
    MBHC initialisation can fail so add the missing error handling to avoid
    dereferencing an error pointer when later configuring the jack:
    
        Unable to handle kernel paging request at virtual address fffffffffffffff8
    
        pc : wcd_mbhc_start+0x28/0x380 [snd_soc_wcd_mbhc]
        lr : wcd938x_codec_set_jack+0x28/0x48 [snd_soc_wcd938x]
    
        Call trace:
         wcd_mbhc_start+0x28/0x380 [snd_soc_wcd_mbhc]
         wcd938x_codec_set_jack+0x28/0x48 [snd_soc_wcd938x]
         snd_soc_component_set_jack+0x28/0x8c [snd_soc_core]
         qcom_snd_wcd_jack_setup+0x7c/0x19c [snd_soc_qcom_common]
         sc8280xp_snd_init+0x20/0x2c [snd_soc_sc8280xp]
         snd_soc_link_init+0x28/0x90 [snd_soc_core]
         snd_soc_bind_card+0x628/0xbfc [snd_soc_core]
         snd_soc_register_card+0xec/0x104 [snd_soc_core]
         devm_snd_soc_register_card+0x4c/0xa4 [snd_soc_core]
         sc8280xp_platform_probe+0xf0/0x108 [snd_soc_sc8280xp]
    
    Fixes: bcee7ed09b8e ("ASoC: codecs: wcd938x: add Multi Button Headset Control support")
    Cc: stable@vger.kernel.org      # 5.15
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20230703124701.11734-1-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4eac89ffc51071fe9ffd8d77252985e536fb0b6c
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:14 2023 +0200

    ASoC: codecs: wcd938x: fix resource leaks on component remove
    
    commit a3406f87775fee986876e03f93a84385f54d5999 upstream.
    
    Make sure to release allocated resources on component probe failure and
    on remove.
    
    This is specifically needed to allow probe deferrals of the sound card
    which otherwise fails when reprobing the codec component:
    
        snd-sc8280xp sound: ASoC: failed to instantiate card -517
        genirq: Flags mismatch irq 289. 00002001 (HPHR PDM WD INT) vs. 00002001 (HPHR PDM WD INT)
        wcd938x_codec audio-codec: Failed to request HPHR WD interrupt (-16)
        genirq: Flags mismatch irq 290. 00002001 (HPHL PDM WD INT) vs. 00002001 (HPHL PDM WD INT)
        wcd938x_codec audio-codec: Failed to request HPHL WD interrupt (-16)
        genirq: Flags mismatch irq 291. 00002001 (AUX PDM WD INT) vs. 00002001 (AUX PDM WD INT)
        wcd938x_codec audio-codec: Failed to request Aux WD interrupt (-16)
        genirq: Flags mismatch irq 292. 00002001 (mbhc sw intr) vs. 00002001 (mbhc sw intr)
        wcd938x_codec audio-codec: Failed to request mbhc interrupts -16
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-5-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c584b5eca3fb543d00dcefe67b590a4d0442270a
Author: Sheetal <sheetal@nvidia.com>
Date:   Thu Jun 29 10:42:13 2023 +0530

    ASoC: tegra: Fix AMX byte map
    
    commit 49bd7b08149417a30aa7d92c8c85b3518de44a76 upstream.
    
    Byte mask for channel-1 of stream-1 is not getting enabled and this
    causes failures during AMX use cases. This happens because the byte
    map value 0 matches the byte map array and put() callback returns
    without enabling the corresponding bits in the byte mask.
    
    AMX supports 4 input streams and each stream can take a maximum of
    16 channels. Each byte in the output frame is uniquely mapped to a
    byte in one of these 4 inputs. This mapping is done with the help of
    byte map array via user space control setting. The byte map array
    size in the driver is 16 and each array element is of size 4 bytes.
    This corresponds to 64 byte map values.
    
    Each byte in the byte map array can have any value between 0 to 255
    to enable the corresponding bits in the byte mask. The value 256 is
    used as a way to disable the byte map. However the byte map array
    element cannot store this value. The put() callback disables the byte
    mask for 256 value and byte map value is reset to 0 for this case.
    This causes problems during subsequent runs since put() callback,
    for value of 0, just returns without enabling the byte mask. In short,
    the problem is coming because 0 and 256 control values are stored as
    0 in the byte map array.
    
    Right now fix the put() callback by actually looking at the byte mask
    array state to identify if any change is needed and update the fields
    accordingly. The get() callback needs an update as well to return the
    correct control value that user has set before. Note that when user
    sets 256, the value is stored as 0 and byte mask is disabled. So byte
    mask state is used to either return 256 or the value from byte map
    array.
    
    Given above, this looks bit complicated and all this happens because
    the byte map array is tightly packed and cannot actually store the 256
    value. Right now the priority is to fix the existing failure and a TODO
    item is put to improve this logic.
    
    Fixes: 8db78ace1ba8 ("ASoC: tegra: Fix kcontrol put callback in AMX")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sheetal <sheetal@nvidia.com>
    Reviewed-by: Mohan Kumar D <mkumard@nvidia.com>
    Reviewed-by: Sameer Pujar <spujar@nvidia.com>
    Link: https://lore.kernel.org/r/1688015537-31682-2-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d55fc2bdaaa8f2399558504872fa5ec1b2493440
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:12 2023 +0200

    ASoC: qdsp6: audioreach: fix topology probe deferral
    
    commit 46ec420573cefa1fc98025e7e6841bdafd6f1e20 upstream.
    
    Propagate errors when failing to load the topology component so that
    probe deferrals can be handled.
    
    Fixes: 36ad9bf1d93d ("ASoC: qdsp6: audioreach: add topology support")
    Cc: stable@vger.kernel.org      # 5.17
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-3-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17feff71d06c96dea1fa72451c20d411e9d5ac8f
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:16 2023 +0200

    ASoC: codecs: wcd-mbhc-v2: fix resource leaks on component remove
    
    commit a5475829adcc600bc69ee9ff7c9e3e43fb4f8d30 upstream.
    
    The MBHC resources must be released on component probe failure and
    removal so can not be tied to the lifetime of the component device.
    
    This is specifically needed to allow probe deferrals of the sound card
    which otherwise fails when reprobing the codec component:
    
        snd-sc8280xp sound: ASoC: failed to instantiate card -517
        genirq: Flags mismatch irq 299. 00002001 (mbhc sw intr) vs. 00002001 (mbhc sw intr)
        wcd938x_codec audio-codec: Failed to request mbhc interrupts -16
        wcd938x_codec audio-codec: mbhc initialization failed
        wcd938x_codec audio-codec: ASoC: error at snd_soc_component_probe on audio-codec: -16
        snd-sc8280xp sound: ASoC: failed to instantiate card -16
    
    Fixes: 0e5c9e7ff899 ("ASoC: codecs: wcd: add multi button Headset detection support")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-7-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0fbf3c353af44a443aa85a36474f861b06061f6
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:13 2023 +0200

    ASoC: codecs: wcd938x: fix missing clsh ctrl error handling
    
    commit ed0dd9205bf69593edb495cb4b086dbae96a3f05 upstream.
    
    Allocation of the clash control structure may fail so add the missing
    error handling to avoid dereferencing an error pointer.
    
    Fixes: 8d78602aa87a ("ASoC: codecs: wcd938x: add basic driver")
    Cc: stable@vger.kernel.org      # 5.14
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20230705123018.30903-4-johan+linaro@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dd61a5b5cca72ead0fbfed530697a9adc73d639
Author: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date:   Thu Jul 13 13:21:12 2023 +0200

    ASoC: cs42l51: fix driver to properly autoload with automatic module loading
    
    commit e51df4f81b02bcdd828a04de7c1eb6a92988b61e upstream.
    
    In commit 2cb1e0259f50 ("ASoC: cs42l51: re-hook of_match_table
    pointer"), 9 years ago, some random guy fixed the cs42l51 after it was
    split into a core part and an I2C part to properly match based on a
    Device Tree compatible string.
    
    However, the fix in this commit is wrong: the MODULE_DEVICE_TABLE(of,
    ....) is in the core part of the driver, not the I2C part. Therefore,
    automatic module loading based on module.alias, based on matching with
    the DT compatible string, loads the core part of the driver, but not
    the I2C part. And threfore, the i2c_driver is not registered, and the
    codec is not known to the system, nor matched with a DT node with the
    corresponding compatible string.
    
    In order to fix that, we move the MODULE_DEVICE_TABLE(of, ...) into
    the I2C part of the driver. The cs42l51_of_match[] array is also moved
    as well, as it is not possible to have this definition in one file,
    and the MODULE_DEVICE_TABLE(of, ...) invocation in another file, due
    to how MODULE_DEVICE_TABLE works.
    
    Thanks to this commit, the I2C part of the driver now properly
    autoloads, and thanks to its dependency on the core part, the core
    part gets autoloaded as well, resulting in a functional sound card
    without having to manually load kernel modules.
    
    Fixes: 2cb1e0259f50 ("ASoC: cs42l51: re-hook of_match_table pointer")
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Link: https://lore.kernel.org/r/20230713112112.778576-1-thomas.petazzoni@bootlin.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e3cf6432466b3111fe6c9a1c3ff274cc8fd4d3a
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Jun 29 10:42:15 2023 +0530

    ASoC: rt5640: Fix sleep in atomic context
    
    commit 70a6404ff610aa4889d98977da131c37f9ff9d1f upstream.
    
    Following prints are observed while testing audio on Jetson AGX Orin which
    has onboard RT5640 audio codec:
    
      BUG: sleeping function called from invalid context at kernel/workqueue.c:3027
      in_atomic(): 1, irqs_disabled(): 128, non_block: 0, pid: 0, name: swapper/0
      preempt_count: 10001, expected: 0
      RCU nest depth: 0, expected: 0
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 0 at kernel/irq/handle.c:159 __handle_irq_event_percpu+0x1e0/0x270
      ---[ end trace ad1c64905aac14a6 ]-
    
    The IRQ handler rt5640_irq() runs in interrupt context and can sleep
    during cancel_delayed_work_sync().
    
    Fix this by running IRQ handler, rt5640_irq(), in thread context.
    Hence replace request_irq() calls with devm_request_threaded_irq().
    
    Fixes: 051dade34695 ("ASoC: rt5640: Fix the wrong state of JD1 and JD2")
    Cc: stable@vger.kernel.org
    Cc: Oder Chiou <oder_chiou@realtek.com>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Link: https://lore.kernel.org/r/1688015537-31682-4-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5b2389e04d98b63d03e8b5c145d4fb9325c48a7
Author: Sheetal <sheetal@nvidia.com>
Date:   Thu Jun 29 10:42:14 2023 +0530

    ASoC: tegra: Fix ADX byte map
    
    commit 6dfe70be0b0dec0f9297811501bec26c05fd96ad upstream.
    
    Byte mask for channel-1 of stream-1 is not getting enabled and this
    causes failures during ADX use cases. This happens because the byte
    map value 0 matches the byte map array and put() callback returns
    without enabling the corresponding bits in the byte mask.
    
    ADX supports 4 output streams and each stream can have a maximum of
    16 channels. Each byte in the input frame is uniquely mapped to a
    byte in one of these 4 outputs. This mapping is done with the help of
    byte map array via user space control setting. The byte map array
    size in the driver is 16 and each array element is of size 4 bytes.
    This corresponds to 64 byte map values.
    
    Each byte in the byte map array can have any value between 0 to 255
    to enable the corresponding bits in the byte mask. The value 256 is
    used as a way to disable the byte map. However the byte map array
    element cannot store this value. The put() callback disables the byte
    mask for 256 value and byte map value is reset to 0 for this case.
    This causes problems during subsequent runs since put() callback,
    for value of 0, just returns without enabling the byte mask. In short,
    the problem is coming because 0 and 256 control values are stored as
    0 in the byte map array.
    
    Right now fix the put() callback by actually looking at the byte mask
    array state to identify if any change is needed and update the fields
    accordingly. The get() callback needs an update as well to return the
    correct control value that user has set before. Note that when user
    set 256, the value is stored as 0 and byte mask is disabled. So byte
    mask state is used to either return 256 or the value from byte map
    array.
    
    Given above, this looks bit complicated and all this happens because
    the byte map array is tightly packed and cannot actually store the 256
    value. Right now the priority is to fix the existing failure and a TODO
    item is put to improve this logic.
    
    Fixes: 3c97881b8c8a ("ASoC: tegra: Fix kcontrol put callback in ADX")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sheetal <sheetal@nvidia.com>
    Reviewed-by: Mohan Kumar D <mkumard@nvidia.com>
    Reviewed-by: Sameer Pujar <spujar@nvidia.com>
    Link: https://lore.kernel.org/r/1688015537-31682-3-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24bed70aa6174871ed3d55e6228ccc7a71a385fd
Author: Fabio Estevam <festevam@denx.de>
Date:   Thu Jul 6 19:18:27 2023 -0300

    ASoC: fsl_sai: Revert "ASoC: fsl_sai: Enable MCTL_MCLK_EN bit for master mode"
    
    commit 86867aca7330e4fbcfa2a117e20b48bbb6c758a9 upstream.
    
    This reverts commit ff87d619ac180444db297f043962a5c325ded47b.
    
    Andreas reports that on an i.MX8MP-based system where MCLK needs to be
    used as an input, the MCLK pin is actually an output, despite not having
    the 'fsl,sai-mclk-direction-output' property present in the devicetree.
    
    This is caused by commit ff87d619ac18 ("ASoC: fsl_sai: Enable
    MCTL_MCLK_EN bit for master mode") that sets FSL_SAI_MCTL_MCLK_EN
    unconditionally for imx8mm/8mn/8mp/93, causing the MCLK to always
    be configured as output.
    
    FSL_SAI_MCTL_MCLK_EN corresponds to the MOE (MCLK Output Enable) bit
    of register MCR and the drivers sets it when the
    'fsl,sai-mclk-direction-output' devicetree property is present.
    
    Revert the commit to allow SAI to use MCLK as input as well.
    
    Cc: stable@vger.kernel.org
    Fixes: ff87d619ac18 ("ASoC: fsl_sai: Enable MCTL_MCLK_EN bit for master mode")
    Reported-by: Andreas Henriksson <andreas@fatal.se>
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Acked-by: Shengjiu Wang <shengjiu.wang@gmail.com>
    Link: https://lore.kernel.org/r/20230706221827.1938990-1-festevam@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 651881287770ad830a6f6d73936b782e26d1985e
Author: Matus Gajdos <matuszpd@gmail.com>
Date:   Wed Jul 12 14:49:33 2023 +0200

    ASoC: fsl_sai: Disable bit clock with transmitter
    
    commit 269f399dc19f0e5c51711c3ba3bd06e0ef6ef403 upstream.
    
    Otherwise bit clock remains running writing invalid data to the DAC.
    
    Signed-off-by: Matus Gajdos <matuszpd@gmail.com>
    Acked-by: Shengjiu Wang <shengjiu.wang@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230712124934.32232-1-matuszpd@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9741ba942f3f2c36de96241dfaf2dbbd3b5c826
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Jun 29 10:35:59 2023 -0400

    drm/amd/display: Keep PHY active for DP displays on DCN31
    
    commit 2387ccf43e3c6cb5dbd757c5ef410cca9f14b971 upstream.
    
    [Why & How]
    Port of a change that went into DCN314 to keep the PHY enabled
    when we have a connected and active DP display.
    
    The PHY can hang if PHY refclk is disabled inadvertently.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Josip Pavic <josip.pavic@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 889bac5fd7969b745c0554155852ce1e3c140497
Author: Taimur Hassan <syed.hassan@amd.com>
Date:   Tue Jun 20 17:00:28 2023 -0400

    drm/amd/display: check TG is non-null before checking if enabled
    
    commit 5a25cefc0920088bb9afafeb80ad3dcd84fe278b upstream.
    
    [Why & How]
    If there is no TG allocation we can dereference a NULL pointer when
    checking if the TG is enabled.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Taimur Hassan <syed.hassan@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f28e8c2be1e1a8077f139121b01d139cb60b4b5
Author: Zhikai Zhai <zhikai.zhai@amd.com>
Date:   Fri Jun 30 11:35:14 2023 +0800

    drm/amd/display: Disable MPC split by default on special asic
    
    commit a460beefe77d780ac48f19d39333852a7f93ffc1 upstream.
    
    [WHY]
    All of pipes will be used when the MPC split enable on the dcn
    which just has 2 pipes. Then MPO enter will trigger the minimal
    transition which need programe dcn from 2 pipes MPC split to 2
    pipes MPO. This action will cause lag if happen frequently.
    
    [HOW]
    Disable the MPC split for the platform which dcn resource is limited
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Alvin Lee <alvin.lee2@amd.com>
    Acked-by: Alan Liu <haoping.liu@amd.com>
    Signed-off-by: Zhikai Zhai <zhikai.zhai@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4385420741743247a7bdedb5c0b1eb5efe9a9edd
Author: Simon Ser <contact@emersion.fr>
Date:   Wed Jun 21 17:24:59 2023 -0300

    drm/amd/display: only accept async flips for fast updates
    
    commit 1ca67aba8d11c2849d395013e1fdce02918d5657 upstream.
    
    Up until now, amdgpu was silently degrading to vsync when
    user-space requested an async flip but the hardware didn't support
    it.
    
    The hardware doesn't support immediate flips when the update changes
    the FB pitch, the DCC state, the rotation, enables or disables CRTCs
    or planes, etc. This is reflected in the dm_crtc_state.update_type
    field: UPDATE_TYPE_FAST means that immediate flip is supported.
    
    Silently degrading async flips to vsync is not the expected behavior
    from a uAPI point-of-view. Xorg expects async flips to fail if
    unsupported, to be able to fall back to a blit. i915 already behaves
    this way.
    
    This patch aligns amdgpu with uAPI expectations and returns a failure
    when an async flip is not possible.
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Reviewed-by: André Almeida <andrealmeid@igalia.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: André Almeida <andrealmeid@igalia.com>
    Signed-off-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 917bef37cfaca07781c6fbaf6cd9404d27e64e6f
Author: Jocelyn Falempe <jfalempe@redhat.com>
Date:   Tue Jul 11 11:20:44 2023 +0200

    drm/client: Fix memory leak in drm_client_modeset_probe
    
    commit 2329cc7a101af1a844fbf706c0724c0baea38365 upstream.
    
    When a new mode is set to modeset->mode, the previous mode should be freed.
    This fixes the following kmemleak report:
    
    drm_mode_duplicate+0x45/0x220 [drm]
    drm_client_modeset_probe+0x944/0xf50 [drm]
    __drm_fb_helper_initial_config_and_unlock+0xb4/0x2c0 [drm_kms_helper]
    drm_fbdev_client_hotplug+0x2bc/0x4d0 [drm_kms_helper]
    drm_client_register+0x169/0x240 [drm]
    ast_pci_probe+0x142/0x190 [ast]
    local_pci_probe+0xdc/0x180
    work_for_cpu_fn+0x4e/0xa0
    process_one_work+0x8b7/0x1540
    worker_thread+0x70a/0xed0
    kthread+0x29f/0x340
    ret_from_fork+0x1f/0x30
    
    cc: <stable@vger.kernel.org>
    Reported-by: Zhang Yi <yizhan@redhat.com>
    Signed-off-by: Jocelyn Falempe <jfalempe@redhat.com>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230711092203.68157-3-jfalempe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5359d7a5087ac398fc429da6833133b4784c268
Author: Jocelyn Falempe <jfalempe@redhat.com>
Date:   Tue Jul 11 11:20:43 2023 +0200

    drm/client: Fix memory leak in drm_client_target_cloned
    
    commit c2a88e8bdf5f6239948d75283d0ae7e0c7945b03 upstream.
    
    dmt_mode is allocated and never freed in this function.
    It was found with the ast driver, but most drivers using generic fbdev
    setup are probably affected.
    
    This fixes the following kmemleak report:
      backtrace:
        [<00000000b391296d>] drm_mode_duplicate+0x45/0x220 [drm]
        [<00000000e45bb5b3>] drm_client_target_cloned.constprop.0+0x27b/0x480 [drm]
        [<00000000ed2d3a37>] drm_client_modeset_probe+0x6bd/0xf50 [drm]
        [<0000000010e5cc9d>] __drm_fb_helper_initial_config_and_unlock+0xb4/0x2c0 [drm_kms_helper]
        [<00000000909f82ca>] drm_fbdev_client_hotplug+0x2bc/0x4d0 [drm_kms_helper]
        [<00000000063a69aa>] drm_client_register+0x169/0x240 [drm]
        [<00000000a8c61525>] ast_pci_probe+0x142/0x190 [ast]
        [<00000000987f19bb>] local_pci_probe+0xdc/0x180
        [<000000004fca231b>] work_for_cpu_fn+0x4e/0xa0
        [<0000000000b85301>] process_one_work+0x8b7/0x1540
        [<000000003375b17c>] worker_thread+0x70a/0xed0
        [<00000000b0d43cd9>] kthread+0x29f/0x340
        [<000000008d770833>] ret_from_fork+0x1f/0x30
    unreferenced object 0xff11000333089a00 (size 128):
    
    cc: <stable@vger.kernel.org>
    Fixes: 1d42bbc8f7f9 ("drm/fbdev: fix cloning on fbcon")
    Reported-by: Zhang Yi <yizhan@redhat.com>
    Signed-off-by: Jocelyn Falempe <jfalempe@redhat.com>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230711092203.68157-2-jfalempe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91bd7acf89cbc118e8d5e01947e59f7928e26893
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Jun 13 12:36:17 2023 -0400

    drm/amdgpu/pm: make mclk consistent for smu 13.0.7
    
    commit 068c8bb10f37bb84824625dbbda053a3a3e0d6e1 upstream.
    
    Use current uclk to be consistent with other dGPUs.
    
    Reviewed-by: Kenneth Feng <kenneth.feng@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.1.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b4f3d9a5c8a21486f806fa6583a6a21e3922bab
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Jun 13 12:15:38 2023 -0400

    drm/amdgpu/pm: make gfxclock consistent for sienna cichlid
    
    commit a4eb11824170d742531998f4ebd1c6a18b63db47 upstream.
    
    Use average gfxclock for consistency with other dGPUs.
    
    Reviewed-by: Kenneth Feng <kenneth.feng@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.1.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13cb7bfbccb5aa173e0e55450920a69b7f4f1801
Author: Guchun Chen <guchun.chen@amd.com>
Date:   Thu Jul 6 15:57:21 2023 +0800

    drm/amdgpu/vkms: relax timer deactivation by hrtimer_try_to_cancel
    
    commit b42ae87a7b3878afaf4c3852ca66c025a5b996e0 upstream.
    
    In below thousands of screen rotation loop tests with virtual display
    enabled, a CPU hard lockup issue may happen, leading system to unresponsive
    and crash.
    
    do {
            xrandr --output Virtual --rotate inverted
            xrandr --output Virtual --rotate right
            xrandr --output Virtual --rotate left
            xrandr --output Virtual --rotate normal
    } while (1);
    
    NMI watchdog: Watchdog detected hard LOCKUP on cpu 1
    
    ? hrtimer_run_softirq+0x140/0x140
    ? store_vblank+0xe0/0xe0 [drm]
    hrtimer_cancel+0x15/0x30
    amdgpu_vkms_disable_vblank+0x15/0x30 [amdgpu]
    drm_vblank_disable_and_save+0x185/0x1f0 [drm]
    drm_crtc_vblank_off+0x159/0x4c0 [drm]
    ? record_print_text.cold+0x11/0x11
    ? wait_for_completion_timeout+0x232/0x280
    ? drm_crtc_wait_one_vblank+0x40/0x40 [drm]
    ? bit_wait_io_timeout+0xe0/0xe0
    ? wait_for_completion_interruptible+0x1d7/0x320
    ? mutex_unlock+0x81/0xd0
    amdgpu_vkms_crtc_atomic_disable
    
    It's caused by a stuck in lock dependency in such scenario on different
    CPUs.
    
    CPU1                                             CPU2
    drm_crtc_vblank_off                              hrtimer_interrupt
        grab event_lock (irq disabled)                   __hrtimer_run_queues
            grab vbl_lock/vblank_time_block                  amdgpu_vkms_vblank_simulate
                amdgpu_vkms_disable_vblank                       drm_handle_vblank
                    hrtimer_cancel                                         grab dev->event_lock
    
    So CPU1 stucks in hrtimer_cancel as timer callback is running endless on
    current clock base, as that timer queue on CPU2 has no chance to finish it
    because of failing to hold the lock. So NMI watchdog will throw the errors
    after its threshold, and all later CPUs are impacted/blocked.
    
    So use hrtimer_try_to_cancel to fix this, as disable_vblank callback
    does not need to wait the handler to finish. And also it's not necessary
    to check the return value of hrtimer_try_to_cancel, because even if it's
    -1 which means current timer callback is running, it will be reprogrammed
    in hrtimer_start with calling enable_vblank to make it works.
    
    v2: only re-arm timer when vblank is enabled (Christian) and add a Fixes
    tag as well
    
    v3: drop warn printing (Christian)
    
    v4: drop superfluous check of blank->enabled in timer function, as it's
    guaranteed in drm_handle_vblank (Christian)
    
    Fixes: 84ec374bd580 ("drm/amdgpu: create amdgpu_vkms (v4)")
    Cc: stable@vger.kernel.org
    Suggested-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Guchun Chen <guchun.chen@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19e7b9f1f7e1cb92a4cc53b4c064f7fb4b1f1983
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Jul 13 22:47:45 2023 +0300

    dma-buf/dma-resv: Stop leaking on krealloc() failure
    
    commit 05abb3be91d8788328231ee02973ab3d47f5e3d2 upstream.
    
    Currently dma_resv_get_fences() will leak the previously
    allocated array if the fence iteration got restarted and
    the krealloc_array() fails.
    
    Free the old array by hand, and make sure we still clear
    the returned *fences so the caller won't end up accessing
    freed memory. Some (but not all) of the callers of
    dma_resv_get_fences() seem to still trawl through the
    array even when dma_resv_get_fences() failed. And let's
    zero out *num_fences as well for good measure.
    
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Christian König <christian.koenig@amd.com>
    Cc: linux-media@vger.kernel.org
    Cc: dri-devel@lists.freedesktop.org
    Cc: linaro-mm-sig@lists.linaro.org
    Fixes: d3c80698c9f5 ("dma-buf: use new iterator in dma_resv_get_fences v3")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20230713194745.1751-1-ville.syrjala@linux.intel.com
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25ad249699412ff817ef559307d3166a4f906bf9
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jul 13 23:16:46 2023 +0200

    selftests: tc: add ConnTrack procfs kconfig
    
    commit 031c99e71fedcce93b6785d38b7d287bf59e3952 upstream.
    
    When looking at the TC selftest reports, I noticed one test was failing
    because /proc/net/nf_conntrack was not available.
    
      not ok 373 3992 - Add ct action triggering DNAT tuple conflict
            Could not match regex pattern. Verify command output:
      cat: /proc/net/nf_conntrack: No such file or directory
    
    It is only available if NF_CONNTRACK_PROCFS kconfig is set. So the issue
    can be fixed simply by adding it to the list of required kconfig.
    
    Fixes: e46905641316 ("tc-testing: add test for ct DNAT tuple collision")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/netdev/0e061d4a-9a23-9f58-3b35-d8919de332d7@tessares.net/T/ [1]
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Tested-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20230713-tc-selftests-lkft-v1-3-1eb4fd3a96e7@tessares.net
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54950747d5e758e148108624baa09d21bb6e0f87
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Fri Jul 7 13:43:10 2023 +0200

    can: gs_usb: gs_can_open(): improve error handling
    
    commit 2603be9e8167ddc7bea95dcfab9ffc33414215aa upstream.
    
    The gs_usb driver handles USB devices with more than 1 CAN channel.
    The RX path for all channels share the same bulk endpoint (the
    transmitted bulk data encodes the channel number). These per-device
    resources are allocated and submitted by the first opened channel.
    
    During this allocation, the resources are either released immediately
    in case of a failure or the URBs are anchored. All anchored URBs are
    finally killed with gs_usb_disconnect().
    
    Currently, gs_can_open() returns with an error if the allocation of a
    URB or a buffer fails. However, if usb_submit_urb() fails, the driver
    continues with the URBs submitted so far, even if no URBs were
    successfully submitted.
    
    Treat every error as fatal and free all allocated resources
    immediately.
    
    Switch to goto-style error handling, to prepare the driver for more
    per-device resource allocation.
    
    Cc: stable@vger.kernel.org
    Cc: John Whittington <git@jbrengineering.co.uk>
    Link: https://lore.kernel.org/all/20230716-gs_usb-fix-time-stamp-counter-v1-1-9017cefcd9d5@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 995f47d76647708ec26c6e388663ad4f3f264787
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Jul 15 17:25:43 2023 +0800

    can: bcm: Fix UAF in bcm_proc_show()
    
    commit 55c3b96074f3f9b0aee19bf93cd71af7516582bb upstream.
    
    BUG: KASAN: slab-use-after-free in bcm_proc_show+0x969/0xa80
    Read of size 8 at addr ffff888155846230 by task cat/7862
    
    CPU: 1 PID: 7862 Comm: cat Not tainted 6.5.0-rc1-00153-gc8746099c197 #230
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
    Call Trace:
     <TASK>
     dump_stack_lvl+0xd5/0x150
     print_report+0xc1/0x5e0
     kasan_report+0xba/0xf0
     bcm_proc_show+0x969/0xa80
     seq_read_iter+0x4f6/0x1260
     seq_read+0x165/0x210
     proc_reg_read+0x227/0x300
     vfs_read+0x1d5/0x8d0
     ksys_read+0x11e/0x240
     do_syscall_64+0x35/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Allocated by task 7846:
     kasan_save_stack+0x1e/0x40
     kasan_set_track+0x21/0x30
     __kasan_kmalloc+0x9e/0xa0
     bcm_sendmsg+0x264b/0x44e0
     sock_sendmsg+0xda/0x180
     ____sys_sendmsg+0x735/0x920
     ___sys_sendmsg+0x11d/0x1b0
     __sys_sendmsg+0xfa/0x1d0
     do_syscall_64+0x35/0xb0
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Freed by task 7846:
     kasan_save_stack+0x1e/0x40
     kasan_set_track+0x21/0x30
     kasan_save_free_info+0x27/0x40
     ____kasan_slab_free+0x161/0x1c0
     slab_free_freelist_hook+0x119/0x220
     __kmem_cache_free+0xb4/0x2e0
     rcu_core+0x809/0x1bd0
    
    bcm_op is freed before procfs entry be removed in bcm_release(),
    this lead to bcm_proc_show() may read the freed bcm_op.
    
    Fixes: ffd980f976e7 ("[CAN]: Add broadcast manager (bcm) protocol")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/all/20230715092543.15548-1-yuehaibing@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2d31762d73b7f65118a6b94074403070a870951
Author: Fedor Ross <fedor.ross@ifm.com>
Date:   Thu May 4 21:50:59 2023 +0200

    can: mcp251xfd: __mcp251xfd_chip_set_mode(): increase poll timeout
    
    commit 9efa1a5407e81265ea502cab83be4de503decc49 upstream.
    
    The mcp251xfd controller needs an idle bus to enter 'Normal CAN 2.0
    mode' or . The maximum length of a CAN frame is 736 bits (64 data
    bytes, CAN-FD, EFF mode, worst case bit stuffing and interframe
    spacing). For low bit rates like 10 kbit/s the arbitrarily chosen
    MCP251XFD_POLL_TIMEOUT_US of 1 ms is too small.
    
    Otherwise during polling for the CAN controller to enter 'Normal CAN
    2.0 mode' the timeout limit is exceeded and the configuration fails
    with:
    
    | $ ip link set dev can1 up type can bitrate 10000
    | [  731.911072] mcp251xfd spi2.1 can1: Controller failed to enter mode CAN 2.0 Mode (6) and stays in Configuration Mode (4) (con=0x068b0760, osc=0x00000468).
    | [  731.927192] mcp251xfd spi2.1 can1: CRC read error at address 0x0e0c (length=4, data=00 00 00 00, CRC=0x0000) retrying.
    | [  731.938101] A link change request failed with some changes committed already. Interface can1 may have been left with an inconsistent configuration, please check.
    | RTNETLINK answers: Connection timed out
    
    Make MCP251XFD_POLL_TIMEOUT_US timeout calculation dynamic. Use
    maximum of 1ms and bit time of 1 full 64 data bytes CAN-FD frame in
    EFF mode, worst case bit stuffing and interframe spacing at the
    current bit rate.
    
    For easier backporting define the macro MCP251XFD_FRAME_LEN_MAX_BITS
    that holds the max frame length in bits, which is 736. This can be
    replaced by can_frame_bits(true, true, true, true, CANFD_MAX_DLEN) in
    a cleanup patch later.
    
    Fixes: 55e5b97f003e8 ("can: mcp25xxfd: add driver for Microchip MCP25xxFD SPI CAN")
    Signed-off-by: Fedor Ross <fedor.ross@ifm.com>
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/20230717-mcp251xfd-fix-increase-poll-timeout-v5-1-06600f34c684@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa5cf8bd1318b6e7d500668b318c07a71cde783b
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Jul 20 19:38:58 2023 +0100

    arm64/fpsimd: Ensure SME storage is allocated after SVE VL changes
    
    commit d4d5be94a87872421ea2569044092535aff0b886 upstream.
    
    When we reconfigure the SVE vector length we discard the backing storage
    for the SVE vectors and then reallocate on next SVE use, leaving the SME
    specific state alone. This means that we do not enable SME traps if they
    were already disabled. That means that userspace code can enter streaming
    mode without trapping, putting the task in a state where if we try to save
    the state of the task we will fault.
    
    Since the ABI does not specify that changing the SVE vector length disturbs
    SME state, and since SVE code may not be aware of SME code in the process,
    we shouldn't simply discard any ZA state. Instead immediately reallocate
    the storage for SVE, and disable SME if we change the SVE vector length
    while there is no SME state active.
    
    Disabling SME traps on SVE vector length changes would make the overall
    code more complex since we would have a state where we have valid SME state
    stored but might get a SME trap.
    
    Fixes: 9e4ab6c89109 ("arm64/sme: Implement vector length configuration prctl()s")
    Reported-by: David Spickett <David.Spickett@arm.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230720-arm64-fix-sve-sme-vl-change-v2-1-8eea06b82d57@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e463a4f380115c522a5a021a805fa91ccc2df99
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Jul 12 12:16:40 2023 +0100

    regmap: Account for register length in SMBus I/O limits
    
    commit 0c9d2eb5e94792fe64019008a04d4df5e57625af upstream.
    
    The SMBus I2C buses have limits on the size of transfers they can do but
    do not factor in the register length meaning we may try to do a transfer
    longer than our length limit, the core will not take care of this.
    Future changes will factor this out into the core but there are a number
    of users that assume current behaviour so let's just do something
    conservative here.
    
    This does not take account padding bits but practically speaking these
    are very rarely if ever used on I2C buses given that they generally run
    slowly enough to mean there's no issue.
    
    Cc: stable@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Xu Yilun <yilun.xu@intel.com>
    Link: https://lore.kernel.org/r/20230712-regmap-max-transfer-v1-2-80e2aed22e83@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef7ad397fb8cf3d7e9b5bb9ed8ba11945ee0d97f
Author: Rob Herring <robh@kernel.org>
Date:   Mon Jul 10 11:40:07 2023 -0600

    of: Preserve "of-display" device name for compatibility
    
    commit 0bb8f49cd2cc8cb32ac51189ff9fcbe7ec3d9d65 upstream.
    
    Since commit 241d2fb56a18 ("of: Make OF framebuffer device names unique"),
    as spotted by Frédéric Bonnard, the historical "of-display" device is
    gone: the updated logic creates "of-display.0" instead, then as many
    "of-display.N" as required.
    
    This means that offb no longer finds the expected device, which prevents
    the Debian Installer from setting up its interface, at least on ppc64el.
    
    Fix this by keeping "of-display" for the first device and "of-display.N"
    for subsequent devices.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217328
    Link: https://bugs.debian.org/1033058
    Fixes: 241d2fb56a18 ("of: Make OF framebuffer device names unique")
    Cc: stable@vger.kernel.org
    Cc: Cyril Brulebois <cyril@debamax.com>
    Cc: Thomas Zimmermann <tzimmermann@suse.de>
    Cc: Helge Deller <deller@gmx.de>
    Acked-by: Helge Deller <deller@gmx.de>
    Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Michal Suchánek <msuchanek@suse.de>
    Link: https://lore.kernel.org/r/20230710174007.2291013-1-robh@kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f16c2eb6945b42b51909302c1c89352cf522cd0b
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Jul 12 12:16:39 2023 +0100

    regmap: Drop initial version of maximum transfer length fixes
    
    commit bc64734825c59e18a27ac266b07e14944c111fd8 upstream.
    
    When problems were noticed with the register address not being taken
    into account when limiting raw transfers with I2C devices we fixed this
    in the core.  Unfortunately it has subsequently been realised that a lot
    of buses were relying on the prior behaviour, partly due to unclear
    documentation not making it obvious what was intended in the core.  This
    is all more involved to fix than is sensible for a fix commit so let's
    just drop the original fixes, a separate commit will fix the originally
    observed problem in an I2C specific way
    
    Fixes: 3981514180c9 ("regmap: Account for register length when chunking")
    Fixes: c8e796895e23 ("regmap: spi-avmm: Fix regmap_bus max_raw_write")
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Xu Yilun <yilun.xu@intel.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20230712-regmap-max-transfer-v1-1-80e2aed22e83@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efeac348cdc27a14febf3b980f55eeae59cc6e44
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jul 13 23:16:45 2023 +0200

    selftests: tc: add 'ct' action kconfig dep
    
    commit 719b4774a8cb1a501e2d22a5a4a3a0a870e427d5 upstream.
    
    When looking for something else in LKFT reports [1], I noticed most of
    the tests were skipped because the "teardown stage" did not complete
    successfully.
    
    Pedro found out this is due to the fact CONFIG_NF_FLOW_TABLE is required
    but not listed in the 'config' file. Adding it to the list fixes the
    issues on LKFT side. CONFIG_NET_ACT_CT is now set to 'm' in the final
    kconfig.
    
    Fixes: c34b961a2492 ("net/sched: act_ct: Create nf flow table per zone")
    Cc: stable@vger.kernel.org
    Link: https://qa-reports.linaro.org/lkft/linux-next-master/build/next-20230711/testrun/18267241/suite/kselftest-tc-testing/test/tc-testing_tdc_sh/log [1]
    Link: https://lore.kernel.org/netdev/0e061d4a-9a23-9f58-3b35-d8919de332d7@tessares.net/T/ [2]
    Suggested-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Tested-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20230713-tc-selftests-lkft-v1-2-1eb4fd3a96e7@tessares.net
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4986dd1b51322b113fdea7f07a842c2cf4be8dfd
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Thu Jul 13 23:16:44 2023 +0200

    selftests: tc: set timeout to 15 minutes
    
    commit fda05798c22a354efde09a76bdfc276b2d591829 upstream.
    
    When looking for something else in LKFT reports [1], I noticed that the
    TC selftest ended with a timeout error:
    
      not ok 1 selftests: tc-testing: tdc.sh # TIMEOUT 45 seconds
    
    The timeout had been introduced 3 years ago, see the Fixes commit below.
    
    This timeout is only in place when executing the selftests via the
    kselftests runner scripts. I guess this is not what most TC devs are
    using and nobody noticed the issue before.
    
    The new timeout is set to 15 minutes as suggested by Pedro [2]. It looks
    like it is plenty more time than what it takes in "normal" conditions.
    
    Fixes: 852c8cbf34d3 ("selftests/kselftest/runner.sh: Add 45 second timeout per test")
    Cc: stable@vger.kernel.org
    Link: https://qa-reports.linaro.org/lkft/linux-next-master/build/next-20230711/testrun/18267241/suite/kselftest-tc-testing/test/tc-testing_tdc_sh/log [1]
    Link: https://lore.kernel.org/netdev/0e061d4a-9a23-9f58-3b35-d8919de332d7@tessares.net/T/ [2]
    Suggested-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Reviewed-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Link: https://lore.kernel.org/r/20230713-tc-selftests-lkft-v1-1-1eb4fd3a96e7@tessares.net
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddf7e8984c83aee9122552529f4e77291903f8d9
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jun 23 01:05:41 2023 -0400

    btrfs: fix race between balance and cancel/pause
    
    commit b19c98f237cd76981aaded52c258ce93f7daa8cb upstream.
    
    Syzbot reported a panic that looks like this:
    
      assertion failed: fs_info->exclusive_operation == BTRFS_EXCLOP_BALANCE_PAUSED, in fs/btrfs/ioctl.c:465
      ------------[ cut here ]------------
      kernel BUG at fs/btrfs/messages.c:259!
      RIP: 0010:btrfs_assertfail+0x2c/0x30 fs/btrfs/messages.c:259
      Call Trace:
       <TASK>
       btrfs_exclop_balance fs/btrfs/ioctl.c:465 [inline]
       btrfs_ioctl_balance fs/btrfs/ioctl.c:3564 [inline]
       btrfs_ioctl+0x531e/0x5b30 fs/btrfs/ioctl.c:4632
       vfs_ioctl fs/ioctl.c:51 [inline]
       __do_sys_ioctl fs/ioctl.c:870 [inline]
       __se_sys_ioctl fs/ioctl.c:856 [inline]
       __x64_sys_ioctl+0x197/0x210 fs/ioctl.c:856
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The reproducer is running a balance and a cancel or pause in parallel.
    The way balance finishes is a bit wonky, if we were paused we need to
    save the balance_ctl in the fs_info, but clear it otherwise and cleanup.
    However we rely on the return values being specific errors, or having a
    cancel request or no pause request.  If balance completes and returns 0,
    but we have a pause or cancel request we won't do the appropriate
    cleanup, and then the next time we try to start a balance we'll trip
    this ASSERT.
    
    The error handling is just wrong here, we always want to clean up,
    unless we got -ECANCELLED and we set the appropriate pause flag in the
    exclusive op.  With this patch the reproducer ran for an hour without
    tripping, previously it would trip in less than a few minutes.
    
    Reported-by: syzbot+c0f3acf145cb465426d5@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org # 6.1+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c828e913c8dc7225fff6028161667a3967236aef
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Jun 7 17:49:21 2023 +0200

    fuse: ioctl: translate ENOSYS in outarg
    
    commit 6a567e920fd0451bf29abc418df96c3365925770 upstream.
    
    Fuse shouldn't return ENOSYS from its ioctl implementation. If userspace
    responds with ENOSYS it should be translated to ENOTTY.
    
    There are two ways to return an error from the IOCTL request:
    
     - fuse_out_header.error
     - fuse_ioctl_out.result
    
    Commit 02c0cab8e734 ("fuse: ioctl: translate ENOSYS") already fixed this
    issue for the first case, but missed the second case.  This patch fixes the
    second case.
    
    Reported-by: Jonathan Katz <jkatz@eitmlabs.org>
    Closes: https://lore.kernel.org/all/CALKgVmcC1VUV_gJVq70n--omMJZUb4HSh_FqvLTHgNBc+HCLFQ@mail.gmail.com/
    Fixes: 02c0cab8e734 ("fuse: ioctl: translate ENOSYS")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c35ea606196243063e63785918c7c8fe27c45798
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jul 3 12:03:21 2023 +0100

    btrfs: zoned: fix memory leak after finding block group with super blocks
    
    commit f1a07c2b4e2c473ec322b8b9ece071b8c88a3512 upstream.
    
    At exclude_super_stripes(), if we happen to find a block group that has
    super blocks mapped to it and we are on a zoned filesystem, we error out
    as this is not supposed to happen, indicating either a bug or maybe some
    memory corruption for example. However we are exiting the function without
    freeing the memory allocated for the logical address of the super blocks.
    Fix this by freeing the logical address.
    
    Fixes: 12659251ca5d ("btrfs: implement log-structured superblock for ZONED mode")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a5e0bc8e8618e32a6ca64450867628eb0a627bf
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Jul 12 12:44:12 2023 -0400

    btrfs: set_page_extent_mapped after read_folio in btrfs_cont_expand
    
    commit 17b17fcd6d446b95904a6929c40012ee7f0afc0c upstream.
    
    While trying to get the subpage blocksize tests running, I hit the
    following panic on generic/476
    
      assertion failed: PagePrivate(page) && page->private, in fs/btrfs/subpage.c:229
      kernel BUG at fs/btrfs/subpage.c:229!
      Internal error: Oops - BUG: 00000000f2000800 [#1] SMP
      CPU: 1 PID: 1453 Comm: fsstress Not tainted 6.4.0-rc7+ #12
      Hardware name: QEMU KVM Virtual Machine, BIOS edk2-20230301gitf80f052277c8-26.fc38 03/01/2023
      pstate: 61400005 (nZCv daif +PAN -UAO -TCO +DIT -SSBS BTYPE=--)
      pc : btrfs_subpage_assert+0xbc/0xf0
      lr : btrfs_subpage_assert+0xbc/0xf0
      Call trace:
       btrfs_subpage_assert+0xbc/0xf0
       btrfs_subpage_clear_checked+0x38/0xc0
       btrfs_page_clear_checked+0x48/0x98
       btrfs_truncate_block+0x5d0/0x6a8
       btrfs_cont_expand+0x5c/0x528
       btrfs_write_check.isra.0+0xf8/0x150
       btrfs_buffered_write+0xb4/0x760
       btrfs_do_write_iter+0x2f8/0x4b0
       btrfs_file_write_iter+0x1c/0x30
       do_iter_readv_writev+0xc8/0x158
       do_iter_write+0x9c/0x210
       vfs_iter_write+0x24/0x40
       iter_file_splice_write+0x224/0x390
       direct_splice_actor+0x38/0x68
       splice_direct_to_actor+0x12c/0x260
       do_splice_direct+0x90/0xe8
       generic_copy_file_range+0x50/0x90
       vfs_copy_file_range+0x29c/0x470
       __arm64_sys_copy_file_range+0xcc/0x498
       invoke_syscall.constprop.0+0x80/0xd8
       do_el0_svc+0x6c/0x168
       el0_svc+0x50/0x1b0
       el0t_64_sync_handler+0x114/0x120
       el0t_64_sync+0x194/0x198
    
    This happens because during btrfs_cont_expand we'll get a page, set it
    as mapped, and if it's not Uptodate we'll read it.  However between the
    read and re-locking the page we could have called release_folio() on the
    page, but left the page in the file mapping.  release_folio() can clear
    the page private, and thus further down we blow up when we go to modify
    the subpage bits.
    
    Fix this by putting the set_page_extent_mapped() after the read.  This
    is safe because read_folio() will call set_page_extent_mapped() before
    it does the read, and then if we clear page private but leave it on the
    mapping we're completely safe re-setting set_page_extent_mapped().  With
    this patch I can now run generic/476 without panicing.
    
    CC: stable@vger.kernel.org # 6.1+
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 549f5093e9d6d19d21dc4d5a763b7ec294a8af90
Author: Bernd Schubert <bschubert@ddn.com>
Date:   Fri Apr 15 13:53:56 2022 +0200

    fuse: Apply flags2 only when userspace set the FUSE_INIT_EXT
    
    commit 3066ff93476c35679cb07a97cce37d9bb07632ff upstream.
    
    This is just a safety precaution to avoid checking flags on memory that was
    initialized on the user space side.  libfuse zeroes struct fuse_init_out
    outarg, but this is not guranteed to be done in all implementations.
    Better is to act on flags and to only apply flags2 when FUSE_INIT_EXT is
    set.
    
    There is a risk with this change, though - it might break existing user
    space libraries, which are already using flags2 without setting
    FUSE_INIT_EXT.
    
    The corresponding libfuse patch is here
    https://github.com/libfuse/libfuse/pull/662
    
    Signed-off-by: Bernd Schubert <bschubert@ddn.com>
    Fixes: 53db28933e95 ("fuse: extend init flags")
    Cc: <stable@vger.kernel.org> # v5.17
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af6d1fc5b8a68c790e3da09ff5dfb61eff63cca0
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Jun 7 17:49:20 2023 +0200

    fuse: revalidate: don't invalidate if interrupted
    
    commit a9d1c4c6df0e568207907c04aed9e7beb1294c42 upstream.
    
    If the LOOKUP request triggered from fuse_dentry_revalidate() is
    interrupted, then the dentry will be invalidated, possibly resulting in
    submounts being unmounted.
    
    Reported-by: Xu Rongbo <xurongbo@baidu.com>
    Closes: https://lore.kernel.org/all/CAJfpegswN_CJJ6C3RZiaK6rpFmNyWmXfaEpnQUJ42KCwNF5tWw@mail.gmail.com/
    Fixes: 9e6268db496a ("[PATCH] FUSE - read-write operations")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89e994688e965813ec0a09fb30b87fb8cee06474
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jul 14 13:42:06 2023 +0100

    btrfs: fix warning when putting transaction with qgroups enabled after abort
    
    commit aa84ce8a78a1a5c10cdf9c7a5fb0c999fbc2c8d6 upstream.
    
    If we have a transaction abort with qgroups enabled we get a warning
    triggered when doing the final put on the transaction, like this:
    
      [552.6789] ------------[ cut here ]------------
      [552.6815] WARNING: CPU: 4 PID: 81745 at fs/btrfs/transaction.c:144 btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6817] Modules linked in: btrfs blake2b_generic xor (...)
      [552.6819] CPU: 4 PID: 81745 Comm: btrfs-transacti Tainted: G        W          6.4.0-rc6-btrfs-next-134+ #1
      [552.6819] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org 04/01/2014
      [552.6819] RIP: 0010:btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6821] Code: bd a0 01 00 (...)
      [552.6821] RSP: 0018:ffffa168c0527e28 EFLAGS: 00010286
      [552.6821] RAX: ffff936042caed00 RBX: ffff93604a3eb448 RCX: 0000000000000000
      [552.6821] RDX: ffff93606421b028 RSI: ffffffff92ff0878 RDI: ffff93606421b010
      [552.6821] RBP: ffff93606421b000 R08: 0000000000000000 R09: ffffa168c0d07c20
      [552.6821] R10: 0000000000000000 R11: ffff93608dc52950 R12: ffffa168c0527e70
      [552.6821] R13: ffff93606421b000 R14: ffff93604a3eb420 R15: ffff93606421b028
      [552.6821] FS:  0000000000000000(0000) GS:ffff93675fb00000(0000) knlGS:0000000000000000
      [552.6821] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [552.6821] CR2: 0000558ad262b000 CR3: 000000014feda005 CR4: 0000000000370ee0
      [552.6822] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [552.6822] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [552.6822] Call Trace:
      [552.6822]  <TASK>
      [552.6822]  ? __warn+0x80/0x130
      [552.6822]  ? btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6824]  ? report_bug+0x1f4/0x200
      [552.6824]  ? handle_bug+0x42/0x70
      [552.6824]  ? exc_invalid_op+0x14/0x70
      [552.6824]  ? asm_exc_invalid_op+0x16/0x20
      [552.6824]  ? btrfs_put_transaction+0x123/0x130 [btrfs]
      [552.6826]  btrfs_cleanup_transaction+0xe7/0x5e0 [btrfs]
      [552.6828]  ? _raw_spin_unlock_irqrestore+0x23/0x40
      [552.6828]  ? try_to_wake_up+0x94/0x5e0
      [552.6828]  ? __pfx_process_timeout+0x10/0x10
      [552.6828]  transaction_kthread+0x103/0x1d0 [btrfs]
      [552.6830]  ? __pfx_transaction_kthread+0x10/0x10 [btrfs]
      [552.6832]  kthread+0xee/0x120
      [552.6832]  ? __pfx_kthread+0x10/0x10
      [552.6832]  ret_from_fork+0x29/0x50
      [552.6832]  </TASK>
      [552.6832] ---[ end trace 0000000000000000 ]---
    
    This corresponds to this line of code:
    
      void btrfs_put_transaction(struct btrfs_transaction *transaction)
      {
          (...)
              WARN_ON(!RB_EMPTY_ROOT(
                              &transaction->delayed_refs.dirty_extent_root));
          (...)
      }
    
    The warning happens because btrfs_qgroup_destroy_extent_records(), called
    in the transaction abort path, we free all entries from the rbtree
    "dirty_extent_root" with rbtree_postorder_for_each_entry_safe(), but we
    don't actually empty the rbtree - it's still pointing to nodes that were
    freed.
    
    So set the rbtree's root node to NULL to avoid this warning (assign
    RB_ROOT).
    
    Fixes: 81f7eb00ff5b ("btrfs: destroy qgroup extent records on transaction abort")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1b3d1a9c6be1d50b9cfbaa8a81f08e7b961934e
Author: Georg Müller <georgmueller@gmx.net>
Date:   Wed Jun 28 10:45:50 2023 +0200

    perf probe: Add test for regression introduced by switch to die_get_decl_file()
    
    commit 56cbeacf143530576905623ac72ae0964f3293a6 upstream.
    
    This patch adds a test to validate that 'perf probe' works for binaries
    where DWARF info is split into multiple CUs
    
    Signed-off-by: Georg Müller <georgmueller@gmx.net>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: regressions@lists.linux.dev
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230628084551.1860532-5-georgmueller@gmx.net
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00edfa6d4fe022942e2f2e6f3294ff13ef78b15c
Author: Petr Pavlu <petr.pavlu@suse.com>
Date:   Thu Mar 23 14:04:12 2023 +0100

    keys: Fix linking a duplicate key to a keyring's assoc_array
    
    commit d55901522f96082a43b9842d34867363c0cdbac5 upstream.
    
    When making a DNS query inside the kernel using dns_query(), the request
    code can in rare cases end up creating a duplicate index key in the
    assoc_array of the destination keyring. It is eventually found by
    a BUG_ON() check in the assoc_array implementation and results in
    a crash.
    
    Example report:
    [2158499.700025] kernel BUG at ../lib/assoc_array.c:652!
    [2158499.700039] invalid opcode: 0000 [#1] SMP PTI
    [2158499.700065] CPU: 3 PID: 31985 Comm: kworker/3:1 Kdump: loaded Not tainted 5.3.18-150300.59.90-default #1 SLE15-SP3
    [2158499.700096] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 11/12/2020
    [2158499.700351] Workqueue: cifsiod cifs_resolve_server [cifs]
    [2158499.700380] RIP: 0010:assoc_array_insert+0x85f/0xa40
    [2158499.700401] Code: ff 74 2b 48 8b 3b 49 8b 45 18 4c 89 e6 48 83 e7 fe e8 95 ec 74 00 3b 45 88 7d db 85 c0 79 d4 0f 0b 0f 0b 0f 0b e8 41 f2 be ff <0f> 0b 0f 0b 81 7d 88 ff ff ff 7f 4c 89 eb 4c 8b ad 58 ff ff ff 0f
    [2158499.700448] RSP: 0018:ffffc0bd6187faf0 EFLAGS: 00010282
    [2158499.700470] RAX: ffff9f1ea7da2fe8 RBX: ffff9f1ea7da2fc1 RCX: 0000000000000005
    [2158499.700492] RDX: 0000000000000000 RSI: 0000000000000005 RDI: 0000000000000000
    [2158499.700515] RBP: ffffc0bd6187fbb0 R08: ffff9f185faf1100 R09: 0000000000000000
    [2158499.700538] R10: ffff9f1ea7da2cc0 R11: 000000005ed8cec8 R12: ffffc0bd6187fc28
    [2158499.700561] R13: ffff9f15feb8d000 R14: ffff9f1ea7da2fc0 R15: ffff9f168dc0d740
    [2158499.700585] FS:  0000000000000000(0000) GS:ffff9f185fac0000(0000) knlGS:0000000000000000
    [2158499.700610] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [2158499.700630] CR2: 00007fdd94fca238 CR3: 0000000809d8c006 CR4: 00000000003706e0
    [2158499.700702] Call Trace:
    [2158499.700741]  ? key_alloc+0x447/0x4b0
    [2158499.700768]  ? __key_link_begin+0x43/0xa0
    [2158499.700790]  __key_link_begin+0x43/0xa0
    [2158499.700814]  request_key_and_link+0x2c7/0x730
    [2158499.700847]  ? dns_resolver_read+0x20/0x20 [dns_resolver]
    [2158499.700873]  ? key_default_cmp+0x20/0x20
    [2158499.700898]  request_key_tag+0x43/0xa0
    [2158499.700926]  dns_query+0x114/0x2ca [dns_resolver]
    [2158499.701127]  dns_resolve_server_name_to_ip+0x194/0x310 [cifs]
    [2158499.701164]  ? scnprintf+0x49/0x90
    [2158499.701190]  ? __switch_to_asm+0x40/0x70
    [2158499.701211]  ? __switch_to_asm+0x34/0x70
    [2158499.701405]  reconn_set_ipaddr_from_hostname+0x81/0x2a0 [cifs]
    [2158499.701603]  cifs_resolve_server+0x4b/0xd0 [cifs]
    [2158499.701632]  process_one_work+0x1f8/0x3e0
    [2158499.701658]  worker_thread+0x2d/0x3f0
    [2158499.701682]  ? process_one_work+0x3e0/0x3e0
    [2158499.701703]  kthread+0x10d/0x130
    [2158499.701723]  ? kthread_park+0xb0/0xb0
    [2158499.701746]  ret_from_fork+0x1f/0x40
    
    The situation occurs as follows:
    * Some kernel facility invokes dns_query() to resolve a hostname, for
      example, "abcdef". The function registers its global DNS resolver
      cache as current->cred.thread_keyring and passes the query to
      request_key_net() -> request_key_tag() -> request_key_and_link().
    * Function request_key_and_link() creates a keyring_search_context
      object. Its match_data.cmp method gets set via a call to
      type->match_preparse() (resolves to dns_resolver_match_preparse()) to
      dns_resolver_cmp().
    * Function request_key_and_link() continues and invokes
      search_process_keyrings_rcu() which returns that a given key was not
      found. The control is then passed to request_key_and_link() ->
      construct_alloc_key().
    * Concurrently to that, a second task similarly makes a DNS query for
      "abcdef." and its result gets inserted into the DNS resolver cache.
    * Back on the first task, function construct_alloc_key() first runs
      __key_link_begin() to determine an assoc_array_edit operation to
      insert a new key. Index keys in the array are compared exactly as-is,
      using keyring_compare_object(). The operation finds that "abcdef" is
      not yet present in the destination keyring.
    * Function construct_alloc_key() continues and checks if a given key is
      already present on some keyring by again calling
      search_process_keyrings_rcu(). This search is done using
      dns_resolver_cmp() and "abcdef" gets matched with now present key
      "abcdef.".
    * The found key is linked on the destination keyring by calling
      __key_link() and using the previously calculated assoc_array_edit
      operation. This inserts the "abcdef." key in the array but creates
      a duplicity because the same index key is already present.
    
    Fix the problem by postponing __key_link_begin() in
    construct_alloc_key() until an actual key which should be linked into
    the destination keyring is determined.
    
    [jarkko@kernel.org: added a fixes tag and cc to stable]
    Cc: stable@vger.kernel.org # v5.3+
    Fixes: df593ee23e05 ("keys: Hoist locking out of __key_link_begin()")
    Signed-off-by: Petr Pavlu <petr.pavlu@suse.com>
    Reviewed-by: Joey Lee <jlee@suse.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4984a10a21c6a38521e2c90e28f70cfe7a9583ba
Author: Liam R. Howlett <Liam.Howlett@oracle.com>
Date:   Wed Jul 12 13:39:16 2023 -0400

    maple_tree: fix node allocation testing on 32 bit
    
    commit ef5c3de5211b5a3a8102b25aa83eb4cde65ac2fd upstream.
    
    Internal node counting was altered and the 64 bit test was updated,
    however the 32bit test was missed.
    
    Restore the 32bit test to a functional state.
    
    Link: https://lore.kernel.org/linux-mm/CAMuHMdV4T53fOw7VPoBgPR7fP6RYqf=CBhD_y_vOg53zZX_DnA@mail.gmail.com/
    Link: https://lkml.kernel.org/r/20230712173916.168805-2-Liam.Howlett@oracle.com
    Fixes: 541e06b772c1 ("maple_tree: remove GFP_ZERO from kmem_cache_alloc() and kmem_cache_alloc_bulk()")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85718972b0046eec54552dd00981628208414f4c
Author: Peng Zhang <zhangpeng.00@bytedance.com>
Date:   Tue Jul 11 11:54:37 2023 +0800

    maple_tree: set the node limit when creating a new root node
    
    commit 3c769fd88b9742954763a968e84de09f7ad78cfe upstream.
    
    Set the node limit of the root node so that the last pivot of all nodes is
    the node limit (if the node is not full).
    
    This patch also fixes a bug in mas_rev_awalk().  Effectively, always
    setting a maximum makes mas_logical_pivot() behave as mas_safe_pivot().
    Without this fix, it is possible that very small tasks would fail to find
    the correct gap.  Although this has not been observed with real tasks, it
    has been reported to happen in m68k nommu running the maple tree tests.
    
    Link: https://lkml.kernel.org/r/20230711035444.526-1-zhangpeng.00@bytedance.com
    Link: https://lore.kernel.org/linux-mm/CAMuHMdV4T53fOw7VPoBgPR7fP6RYqf=CBhD_y_vOg53zZX_DnA@mail.gmail.com/
    Link: https://lkml.kernel.org/r/20230711035444.526-2-zhangpeng.00@bytedance.com
    Fixes: 54a611b60590 ("Maple Tree: add new data structure")
    Signed-off-by: Peng Zhang <zhangpeng.00@bytedance.com>
    Reviewed-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0c3e25cfc571e176f11d90274715300d90505ab
Author: Luka Guzenko <l.guzenko@web.de>
Date:   Tue Jul 18 18:12:41 2023 +0200

    ALSA: hda/realtek: Enable Mute LED on HP Laptop 15s-eq2xxx
    
    commit 0659400f18c0e6c0c69d74fe5d09e7f6fbbd52a2 upstream.
    
    The HP Laptop 15s-eq2xxx uses ALC236 codec and controls the mute LED using
    COEF 0x07 index 1. No existing quirk covers this configuration.
    Adds a new quirk and enables it for the device.
    
    Signed-off-by: Luka Guzenko <l.guzenko@web.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230718161241.393181-1-l.guzenko@web.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f493b5bfe377245f8e9a4de4f62a5fcc38dbf5b
Author: Christoffer Sandberg <cs@tuxedo.de>
Date:   Tue Jul 18 16:57:22 2023 +0200

    ALSA: hda/realtek: Add quirk for Clevo NS70AU
    
    commit c250ef8954eda2024c8861c36e9fc1b589481fe7 upstream.
    
    Fixes headset detection on Clevo NS70AU.
    
    Co-developed-by: Werner Sembach <wse@tuxedocomputers.com>
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Signed-off-by: Christoffer Sandberg <cs@tuxedo.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230718145722.10592-1-wse@tuxedocomputers.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ed4e52973901b0569d804edab92ee058c98cbef
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Jul 13 15:57:13 2023 +0800

    ALSA: hda/realtek - remove 3k pull low procedure
    
    commit 69ea4c9d02b7947cdd612335a61cc1a02e544ccd upstream.
    
    This was the ALC283 depop procedure.
    Maybe this procedure wasn't suitable with new codec.
    So, let us remove it. But HP 15z-fc000 must do 3k pull low. If it
    reboot with plugged headset,
    it will have errors show don't find codec error messages. Run 3k pull
    low will solve issues.
    So, let AMD chipset will run this for workarround.
    
    Fixes: 5aec98913095 ("ALSA: hda/realtek - ALC236 headset MIC recording issue")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Reported-by: Joseph C. Sible <josephcsible@gmail.com>
    Closes: https://lore.kernel.org/r/CABpewhE4REgn9RJZduuEU6Z_ijXNeQWnrxO1tg70Gkw=F8qNYg@mail.gmail.com/
    Link: https://lore.kernel.org/r/4678992299664babac4403d9978e7ba7@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b87f546a035bd8b2b4c73cb346344af542d8663
Author: Jens Axboe <axboe@kernel.dk>
Date:   Thu Jul 20 13:16:53 2023 -0600

    io_uring: treat -EAGAIN for REQ_F_NOWAIT as final for io-wq
    
    commit a9be202269580ca611c6cebac90eaf1795497800 upstream.
    
    io-wq assumes that an issue is blocking, but it may not be if the
    request type has asked for a non-blocking attempt. If we get
    -EAGAIN for that case, then we need to treat it as a final result
    and not retry or arm poll for it.
    
    Cc: stable@vger.kernel.org # 5.10+
    Link: https://github.com/axboe/liburing/issues/897
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

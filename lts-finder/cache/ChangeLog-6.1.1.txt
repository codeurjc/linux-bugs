commit ebdb69c5b054f115ef5ff72f0bb2aaa1718904e6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 21 17:48:12 2022 +0100

    Linux 6.1.1
    
    Link: https://lore.kernel.org/r/20221219182943.395169070@linuxfoundation.org
    Tested-by: Ronald Warsow <rwarsow@gmx.de>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Slade Watkins <srw@sladewatkins.net>
    Tested-by: Justin M. Forbes <jforbes@fedoraproject.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d1a710c1983819bdceaaae83cda309a84f51ea7
Author: Nikolaus Voss <nikolaus.voss@haag-streit.com>
Date:   Wed Oct 19 18:38:20 2022 +0200

    KEYS: encrypted: fix key instantiation with user-provided data
    
    commit 5adedd42245af0860ebda8fe0949f24f5204c1b1 upstream.
    
    Commit cd3bc044af48 ("KEYS: encrypted: Instantiate key with
    user-provided decrypted data") added key instantiation with user
    provided decrypted data.  The user data is hex-ascii-encoded but was
    just memcpy'ed to the binary buffer. Fix this to use hex2bin instead.
    
    Old keys created from user provided decrypted data saved with "keyctl
    pipe" are still valid, however if the key is recreated from decrypted
    data the old key must be converted to the correct format. This can be
    done with a small shell script, e.g.:
    
    BROKENKEY=abcdefABCDEF1234567890aaaaaaaaaa
    NEWKEY=$(echo -ne $BROKENKEY | xxd -p -c32)
    keyctl add user masterkey "$(cat masterkey.bin)" @u
    keyctl add encrypted testkey "new user:masterkey 32 $NEWKEY" @u
    
    However, NEWKEY is still broken: If for BROKENKEY 32 bytes were
    specified, a brute force attacker knowing the key properties would only
    need to try at most 2^(16*8) keys, as if the key was only 16 bytes long.
    
    The security issue is a result of the combination of limiting the input
    range to hex-ascii and using memcpy() instead of hex2bin(). It could
    have been fixed either by allowing binary input or using hex2bin() (and
    doubling the ascii input key length). This patch implements the latter.
    
    The corresponding test for the Linux Test Project ltp has also been
    fixed (see link below).
    
    Fixes: cd3bc044af48 ("KEYS: encrypted: Instantiate key with user-provided decrypted data")
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/ltp/20221006081709.92303897@mail.steuer-voss.de/
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Nikolaus Voss <nikolaus.voss@haag-streit.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8d16a54842d609fd4a3ed2d81d4333d6329aa94
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Sun Dec 11 18:18:55 2022 -0300

    cifs: fix oops during encryption
    
    commit f7f291e14dde32a07b1f0aa06921d28f875a7b54 upstream.
    
    When running xfstests against Azure the following oops occurred on an
    arm64 system
    
      Unable to handle kernel write to read-only memory at virtual address
      ffff0001221cf000
      Mem abort info:
        ESR = 0x9600004f
        EC = 0x25: DABT (current EL), IL = 32 bits
        SET = 0, FnV = 0
        EA = 0, S1PTW = 0
        FSC = 0x0f: level 3 permission fault
      Data abort info:
        ISV = 0, ISS = 0x0000004f
        CM = 0, WnR = 1
      swapper pgtable: 4k pages, 48-bit VAs, pgdp=00000000294f3000
      [ffff0001221cf000] pgd=18000001ffff8003, p4d=18000001ffff8003,
      pud=18000001ff82e003, pmd=18000001ff71d003, pte=00600001221cf787
      Internal error: Oops: 9600004f [#1] PREEMPT SMP
      ...
      pstate: 80000005 (Nzcv daif -PAN -UAO -TCO BTYPE=--)
      pc : __memcpy+0x40/0x230
      lr : scatterwalk_copychunks+0xe0/0x200
      sp : ffff800014e92de0
      x29: ffff800014e92de0 x28: ffff000114f9de80 x27: 0000000000000008
      x26: 0000000000000008 x25: ffff800014e92e78 x24: 0000000000000008
      x23: 0000000000000001 x22: 0000040000000000 x21: ffff000000000000
      x20: 0000000000000001 x19: ffff0001037c4488 x18: 0000000000000014
      x17: 235e1c0d6efa9661 x16: a435f9576b6edd6c x15: 0000000000000058
      x14: 0000000000000001 x13: 0000000000000008 x12: ffff000114f2e590
      x11: ffffffffffffffff x10: 0000040000000000 x9 : ffff8000105c3580
      x8 : 2e9413b10000001a x7 : 534b4410fb86b005 x6 : 534b4410fb86b005
      x5 : ffff0001221cf008 x4 : ffff0001037c4490 x3 : 0000000000000001
      x2 : 0000000000000008 x1 : ffff0001037c4488 x0 : ffff0001221cf000
      Call trace:
       __memcpy+0x40/0x230
       scatterwalk_map_and_copy+0x98/0x100
       crypto_ccm_encrypt+0x150/0x180
       crypto_aead_encrypt+0x2c/0x40
       crypt_message+0x750/0x880
       smb3_init_transform_rq+0x298/0x340
       smb_send_rqst.part.11+0xd8/0x180
       smb_send_rqst+0x3c/0x100
       compound_send_recv+0x534/0xbc0
       smb2_query_info_compound+0x32c/0x440
       smb2_set_ea+0x438/0x4c0
       cifs_xattr_set+0x5d4/0x7c0
    
    This is because in scatterwalk_copychunks(), we attempted to write to
    a buffer (@sign) that was allocated in the stack (vmalloc area) by
    crypt_message() and thus accessing its remaining 8 (x2) bytes ended up
    crossing a page boundary.
    
    To simply fix it, we could just pass @sign kmalloc'd from
    crypt_message() and then we're done.  Luckily, we don't seem to pass
    any other vmalloc'd buffers in smb_rqst::rq_iov...
    
    Instead, let's map the correct pages and offsets from vmalloc buffers
    as well in cifs_sg_set_buf() and then avoiding such oopses.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e453324803d7a5166eb6e062dd631a47ef46204
Author: Shruthi Sanil <shruthi.sanil@intel.com>
Date:   Fri Nov 25 16:23:27 2022 +0530

    usb: dwc3: pci: Update PCIe device ID for USB3 controller on CPU sub-system for Raptor Lake
    
    commit f05f80f217bf52443a2582bca19fd78188333f25 upstream.
    
    The device ID 0xa70e is defined for the USB3 device controller in the CPU
    sub-system of Raptor Lake platform. Hence updating the ID accordingly.
    
    Fixes: bad0d1d726ac ("usb: dwc3: pci: Add support for Intel Raptor Lake")
    Cc: stable <stable@kernel.org>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Shruthi Sanil <shruthi.sanil@intel.com>
    Link: https://lore.kernel.org/r/20221125105327.27945-1-shruthi.sanil@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9222912924fcf56e2d166a503eddbdb5ffd2005f
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Wed Nov 23 11:30:21 2022 +0200

    usb: typec: ucsi: Resume in separate work
    
    commit e0dced9c7d4763fd97c86a13902d135f03cc42eb upstream.
    
    It can take more than one second to check each connector
    when the system is resumed. So if you have, say, eight
    connectors, it may take eight seconds for ucsi_resume() to
    finish. That's a bit too much.
    
    This will modify ucsi_resume() so that it schedules a work
    where the interface is actually resumed instead of checking
    the connectors directly. The connections will also be
    checked in separate tasks which are queued for each connector
    separately.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216706
    Fixes: 99f6d4361113 ("usb: typec: ucsi: Check the connection on resume")
    Cc: <stable@vger.kernel.org>
    Reported-by: Todd Brandt <todd.e.brandt@intel.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20221123093021.25981-1-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c383c7c35c7bc15e07a04eefa060a8a80cbeae29
Author: Tony Nguyen <anthony.l.nguyen@intel.com>
Date:   Mon Dec 12 11:00:31 2022 -0800

    igb: Initialize mailbox message for VF reset
    
    commit de5dc44370fbd6b46bd7f1a1e00369be54a041c8 upstream.
    
    When a MAC address is not assigned to the VF, that portion of the message
    sent to the VF is not set. The memory, however, is allocated from the
    stack meaning that information may be leaked to the VM. Initialize the
    message buffer to 0 so that no information is passed to the VM in this
    case.
    
    Fixes: 6ddbc4cf1f4d ("igb: Indicate failure on vf reset for empty mac address")
    Reported-by: Akihiko Odaki <akihiko.odaki@daynix.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Akihiko Odaki <akihiko.odaki@daynix.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221212190031.3983342-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52d5896ba2a4f939d7ff2f26f8e6cba60a8068c4
Author: Martin Kaiser <martin@kaiser.cx>
Date:   Sat Oct 15 17:11:06 2022 +0200

    staging: r8188eu: fix led register settings
    
    commit 12c6223fc1804fd9295dc50d358294539b4a4184 upstream.
    
    Using an InterTech DMG-02 dongle, the led remains on when the system goes
    into standby mode. After wakeup, it's no longer possible to control the
    led.
    
    It turned out that the register settings to enable or disable the led were
    not correct. They worked for some dongles like the Edimax V2 but not for
    others like the InterTech DMG-02.
    
    This patch fixes the register settings. Bit 3 in the led_cfg2 register
    controls the led status, bit 5 must always be set to be able to control
    the led, bit 6 has no influence on the led. Setting the mac_pinmux_cfg
    register is not necessary.
    
    These settings were tested with Edimax V2 and InterTech DMG-02.
    
    Cc: stable@vger.kernel.org
    Fixes: 8cd574e6af54 ("staging: r8188eu: introduce new hal dir for RTL8188eu driver")
    Suggested-by: Michael Straube <straube.linux@gmail.com>
    Signed-off-by: Martin Kaiser <martin@kaiser.cx>
    Tested-by: Michael Straube <straube.linux@gmail.com> # InterTech DMG-02,
    Tested-by: Philipp Hortmann <philipp.g.hortmann@gmail.com> # Edimax N150
    Link: https://lore.kernel.org/r/20221015151115.232095-2-martin@kaiser.cx
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9cacc0ab1ea5457f7bd454c57f60d31a8771fd4
Author: Reka Norman <rekanorman@chromium.org>
Date:   Wed Nov 30 11:19:40 2022 +0200

    xhci: Apply XHCI_RESET_TO_DEFAULT quirk to ADL-N
    
    commit fed70b61ef2c0aed54456db3d485b215f6cc3209 upstream.
    
    ADL-N systems have the same issue as ADL-P, where a large boot firmware
    delay is seen if USB ports are left in U3 at shutdown. So apply the
    XHCI_RESET_TO_DEFAULT quirk to ADL-N as well.
    
    This patch depends on commit 34cd2db408d5 ("xhci: Add quirk to reset
    host back to default state at shutdown").
    
    The issue it fixes is a ~20s boot time delay when booting from S5. It
    affects ADL-N devices, and ADL-N support was added starting from v5.16.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Reka Norman <rekanorman@chromium.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20221130091944.2171610-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0d91ec1a16a2def5eed92972da448a3d52542b0
Author: Andy Chi <andy.chi@canonical.com>
Date:   Mon Nov 28 10:28:47 2022 +0800

    ALSA: hda/realtek: fix mute/micmute LEDs for a HP ProBook
    
    commit 1d8025ec722d5e011f9299c46274eb21fb54a428 upstream.
    
    There is a HP ProBook which using ALC236 codec and need the
    ALC236_FIXUP_HP_MUTE_LED_MICMUTE_VREF quirk to make mute LED and
    micmute LED work.
    
    Signed-off-by: Andy Chi <andy.chi@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221128022849.13759-1-andy.chi@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0815ea0854831454aa8160bae641eb63914ec5e
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Nov 29 15:18:19 2022 +0100

    USB: serial: f81534: fix division by zero on line-speed change
    
    commit 188c9c2e0c7f4ae864113f80c40bafb394062271 upstream.
    
    The driver leaves the line speed unchanged in case a requested speed is
    not supported. Make sure to handle the case where the current speed is
    B0 (hangup) without dividing by zero when determining the clock source.
    
    Fixes: 3aacac02f385 ("USB: serial: f81534: add high baud rate support")
    Cc: stable@vger.kernel.org      # 4.16
    Cc: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c8b21ee14048e5e13d4e5c1f4d6e288519a13a8
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Nov 29 15:17:49 2022 +0100

    USB: serial: f81232: fix division by zero on line-speed change
    
    commit a08ca6ebafe615c9028c53fc4c9e6c9b2b1f2888 upstream.
    
    The driver leaves the line speed unchanged in case a requested speed is
    not supported. Make sure to handle the case where the current speed is
    B0 (hangup) without dividing by zero when determining the clock source.
    
    Fixes: 268ddb5e9b62 ("USB: serial: f81232: add high baud rate support")
    Cc: stable@vger.kernel.org      # 5.2
    Cc: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 736f626ea8b87ab7080d62e06d4dd6422f604ad8
Author: Bruno Thomsen <bruno.thomsen@gmail.com>
Date:   Sun Nov 27 18:08:11 2022 +0100

    USB: serial: cp210x: add Kamstrup RF sniffer PIDs
    
    commit e88906b169ebcb8046e8f0ad76edd09ab41cfdfe upstream.
    
    The RF sniffers are based on cp210x where the RF frontends
    are based on a different USB stack.
    
    RF sniffers can analyze packets meta data including power level
    and perform packet injection.
    
    Can be used to perform RF frontend self-test when connected to
    a concentrator, ex. arch/arm/boot/dts/imx7d-flex-concentrator.dts
    
    Signed-off-by: Bruno Thomsen <bruno.thomsen@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b63d587c0d2f87ef15ade56f14b3bede6918636
Author: Duke Xin <duke_xinanwen@163.com>
Date:   Sat Nov 19 17:44:47 2022 +0800

    USB: serial: option: add Quectel EM05-G modem
    
    commit f0052d7a1edb3d8921b4e154aa8c46c4845b3714 upstream.
    
    The EM05-G modem has 2 USB configurations that are configurable via the AT
    command AT+QCFG="usbnet",[ 0 | 2 ] which make the modem enumerate with
    the following interfaces, respectively:
    
    "RMNET" : AT + DIAG + NMEA + Modem + QMI
    "MBIM"  : MBIM + AT + DIAG + NMEA + Modem
    
    The detailed description of the USB configuration for each mode as follows:
    
    RMNET Mode
    --------------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 21 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0311 Rev= 3.18
    S:  Manufacturer=Quectel
    S:  Product=Quectel EM05-G
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=89(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    MBIM Mode
    --------------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 16 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0311 Rev= 3.18
    S:  Manufacturer=Quectel
    S:  Product=Quectel EM05-G
    C:* #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=89(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Duke Xin <duke_xinanwen@163.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1a92bb8d697f170d93fe922da763d7d156b8841
Author: Szymon Heidrich <szymon.heidrich@gmail.com>
Date:   Tue Dec 6 15:13:01 2022 +0100

    usb: gadget: uvc: Prevent buffer overflow in setup handler
    
    commit 4c92670b16727365699fe4b19ed32013bab2c107 upstream.
    
    Setup function uvc_function_setup permits control transfer
    requests with up to 64 bytes of payload (UVC_MAX_REQUEST_SIZE),
    data stage handler for OUT transfer uses memcpy to copy req->actual
    bytes to uvc_event->data.data array of size 60. This may result
    in an overflow of 4 bytes.
    
    Fixes: cdda479f15cd ("USB gadget: video class function driver")
    Cc: stable <stable@kernel.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Daniel Scally <dan.scally@ideasonboard.com>
    Signed-off-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Link: https://lore.kernel.org/r/20221206141301.51305-1-szymon.heidrich@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cd2e9322726a487acf224431fbfc96f6c8880c9
Author: Jan Kara <jack@suse.cz>
Date:   Thu Dec 8 13:03:30 2022 +0100

    udf: Fix extending file within last block
    
    commit 1f3868f06855c97a4954c99b36f3fc9eb8f60326 upstream.
    
    When extending file within last block it can happen that the extent is
    already rounded to the blocksize and thus contains the offset we want to
    grow up to. In such case we would mistakenly expand the last extent and
    make it one block longer than it should be, exposing unallocated block
    in a file and causing data corruption. Fix the problem by properly
    detecting this case and bailing out.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cd3e9297d44a29bf9106f87e94c5ef6b248effe
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 17:34:33 2022 +0100

    udf: Do not bother looking for prealloc extents if i_lenExtents matches i_size
    
    commit 6ad53f0f71c52871202a7bf096feb2c59db33fc5 upstream.
    
    If rounded block-rounded i_lenExtents matches block rounded i_size,
    there are no preallocation extents. Do not bother walking extent linked
    list.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12a88f572d6d94b5c0b72e2d1782cc2e96ac06cf
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 17:25:10 2022 +0100

    udf: Fix preallocation discarding at indirect extent boundary
    
    commit cfe4c1b25dd6d2f056afc00b7c98bcb3dd0b1fc3 upstream.
    
    When preallocation extent is the first one in the extent block, the
    code would corrupt extent tree header instead. Fix the problem and use
    udf_delete_aext() for deleting extent to avoid some code duplication.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6b01f6a0e774b4f45759791dff5bd4f98c64226
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 18:17:34 2022 +0100

    udf: Discard preallocation before extending file with a hole
    
    commit 16d0556568148bdcaa45d077cac9f8f7077cf70a upstream.
    
    When extending file with a hole, we tried to preserve existing
    preallocation for the file. However that is not very useful and
    complicates code because the previous extent may need to be rounded to
    block boundary as well (which we forgot to do thus causing data
    corruption for sequence like:
    
    xfs_io -f -c "pwrite 0x75e63 11008" -c "truncate 0x7b24b" \
      -c "truncate 0xabaa3" -c "pwrite 0xac70b 22954" \
      -c "pwrite 0x93a43 11358" -c "pwrite 0xb8e65 52211" file
    
    with 512-byte block size. Just discard preallocation before extending
    file to simplify things and also fix this data corruption.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb9b502cf9113c835321e1294c8c6d9629864686
Author: Sean Anderson <sean.anderson@seco.com>
Date:   Thu Dec 1 16:28:07 2022 -0500

    irqchip/ls-extirq: Fix endianness detection
    
    commit 3ae977d0e4e3a2a2ccc912ca2d20c9430508ecdd upstream.
    
    parent is the interrupt parent, not the parent of node. Use
    node->parent. This fixes endianness detection on big-endian platforms.
    
    Fixes: 1b00adce8afd ("irqchip/ls-extirq: Fix invalid wait context by avoiding to use regmap")
    Signed-off-by: Sean Anderson <sean.anderson@seco.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221201212807.616191-1-sean.anderson@seco.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18301e16ea553cf3cd4352d5948722a42034f284
Author: John Thomson <git@johnthomson.fastmail.com.au>
Date:   Mon Nov 14 11:56:58 2022 +1000

    mips: ralink: mt7621: do not use kzalloc too early
    
    commit 7c18b64bba3bcad1be94b404f47b94a04b91ce79 upstream.
    
    With CONFIG_SLUB=y, following commit 6edf2576a6cc ("mm/slub: enable
    debugging memory wasting of kmalloc") mt7621 failed to boot very early,
    without showing any console messages.
    This exposed the pre-existing bug of mt7621.c using kzalloc before normal
    memory management was available.
    Prior to this slub change, there existed the unintended protection against
    "kmem_cache *s" being NULL as slab_pre_alloc_hook() happened to
    return NULL and bailed out of slab_alloc_node().
    This allowed mt7621 prom_soc_init to fail in the soc_dev_init kzalloc,
    but continue booting without the SOC_BUS driver device registered.
    
    Console output from a DEBUG_ZBOOT vmlinuz kernel loading,
    with mm/slub modified to warn on kmem_cache zero or null:
    
    zimage at:     80B842A0 810B4BC0
    Uncompressing Linux at load address 80001000
    Copy device tree to address  80B80EE0
    Now, booting the kernel...
    
    [    0.000000] Linux version 6.1.0-rc3+ (john@john)
    (mipsel-buildroot-linux-gnu-gcc.br_real (Buildroot
    2021.11-4428-g6b6741b) 12.2.0, GNU ld (GNU Binutils) 2.39) #73 SMP Wed
         Nov  2 05:10:01 AEST 2022
    [    0.000000] ------------[ cut here ]------------
    [    0.000000] WARNING: CPU: 0 PID: 0 at mm/slub.c:3416
    kmem_cache_alloc+0x5a4/0x5e8
    [    0.000000] Modules linked in:
    [    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 6.1.0-rc3+ #73
    [    0.000000] Stack : 810fff78 80084d98 00000000 00000004 00000000
    00000000 80889d04 80c90000
    [    0.000000]         80920000 807bd328 8089d368 80923bd3 00000000
    00000001 80889cb0 00000000
    [    0.000000]         00000000 00000000 807bd328 8084bcb1 00000002
    00000002 00000001 6d6f4320
    [    0.000000]         00000000 80c97d3d 80c97d68 fffffffc 807bd328
    00000000 00000000 00000000
    [    0.000000]         00000000 a0000000 80910000 8110a0b4 00000000
    00000020 80010000 80010000
    [    0.000000]         ...
    [    0.000000] Call Trace:
    [    0.000000] [<80008260>] show_stack+0x28/0xf0
    [    0.000000] [<8070c958>] dump_stack_lvl+0x60/0x80
    [    0.000000] [<8002e184>] __warn+0xc4/0xf8
    [    0.000000] [<8002e210>] warn_slowpath_fmt+0x58/0xa4
    [    0.000000] [<801c0fac>] kmem_cache_alloc+0x5a4/0x5e8
    [    0.000000] [<8092856c>] prom_soc_init+0x1fc/0x2b4
    [    0.000000] [<80928060>] prom_init+0x44/0xf0
    [    0.000000] [<80929214>] setup_arch+0x4c/0x6a8
    [    0.000000] [<809257e0>] start_kernel+0x88/0x7c0
    [    0.000000]
    [    0.000000] ---[ end trace 0000000000000000 ]---
    [    0.000000] SoC Type: MediaTek MT7621 ver:1 eco:3
    [    0.000000] printk: bootconsole [early0] enabled
    
    Allowing soc_device_register to work exposed oops in the mt7621 phy pci,
    and pci controller drivers from soc_device_match_attr, due to missing
    sentinels in the quirks tables. These were fixed with:
    commit 819b885cd886 ("phy: ralink: mt7621-pci: add sentinel to quirks
    table")
    not yet applied ("PCI: mt7621: add sentinel to quirks table")
    
    Link: https://lore.kernel.org/linux-mm/becf2ac3-2a90-4f3a-96d9-a70f67c66e4a@app.fastmail.com/
    Fixes: 71b9b5e0130d ("MIPS: ralink: mt7621: introduce 'soc_device' initialization")
    Signed-off-by: John Thomson <git@johnthomson.fastmail.com.au>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee11da28a62e8b1fbaf471027257c44b40e7f244
Author: John Thomson <git@johnthomson.fastmail.com.au>
Date:   Mon Nov 14 11:56:57 2022 +1000

    mips: ralink: mt7621: soc queries and tests as functions
    
    commit b4767d4c072583dec987225b6fe3f5524a735f42 upstream.
    
    Move the SoC register value queries and tests to specific functions,
    to remove repetition of logic
    No functional changes intended
    
    Signed-off-by: John Thomson <git@johnthomson.fastmail.com.au>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1d9199ba485e55f52e985ee13c2a653d259593f
Author: John Thomson <git@johnthomson.fastmail.com.au>
Date:   Mon Nov 14 11:56:56 2022 +1000

    mips: ralink: mt7621: define MT7621_SYSC_BASE with __iomem
    
    commit a2cab953b4c077cc02878d424466d3a6eac32aaf upstream.
    
    So that MT7621_SYSC_BASE can be used later in multiple functions without
    needing to repeat this __iomem declaration each time
    
    Signed-off-by: John Thomson <git@johnthomson.fastmail.com.au>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4997bae1b5b012c8a6e2643e26578a7bc2cae36
Author: John Thomson <git@johnthomson.fastmail.com.au>
Date:   Tue Dec 6 06:46:45 2022 +1000

    PCI: mt7621: Add sentinel to quirks table
    
    commit 19098934f910b4d47cb30251dd39ffa57bef9523 upstream.
    
    Current driver is missing a sentinel in the struct soc_device_attribute
    array, which causes an oops when assessed by the
    soc_device_match(mt7621_pcie_quirks_match) call.
    
    This was only exposed once the CONFIG_SOC_MT7621 mt7621 soc_dev_attr
    was fixed to register the SOC as a device, in:
    
    commit 7c18b64bba3b ("mips: ralink: mt7621: do not use kzalloc too early")
    
    Fix it by adding the required sentinel.
    
    Link: https://lore.kernel.org/lkml/26ebbed1-0fe9-4af9-8466-65f841d0b382@app.fastmail.com
    Link: https://lore.kernel.org/r/20221205204645.301301-1-git@johnthomson.fastmail.com.au
    Fixes: b483b4e4d3f6 ("staging: mt7621-pci: add quirks for 'E2' revision using 'soc_device_attribute'")
    Signed-off-by: John Thomson <git@johnthomson.fastmail.com.au>
    Signed-off-by: Lorenzo Pieralisi <lpieralisi@kernel.org>
    Acked-by: Sergio Paracuellos <sergio.paracuellos@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76c6303530ebcb1459302d8943527cba04baf42e
Author: David Michael <fedora.dm0@gmail.com>
Date:   Sun Nov 13 15:52:17 2022 -0500

    libbpf: Fix uninitialized warning in btf_dump_dump_type_data
    
    commit dfd0afbf151d85411b371e841f62b81ee5d1ca54 upstream.
    
    GCC 11.3.0 fails to compile btf_dump.c due to the following error,
    which seems to originate in btf_dump_struct_data where the returned
    value would be uninitialized if btf_vlen returns zero.
    
    btf_dump.c: In function ‘btf_dump_dump_type_data’:
    btf_dump.c:2363:12: error: ‘err’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
     2363 |         if (err < 0)
          |            ^
    
    Fixes: 920d16af9b42 ("libbpf: BTF dumper support for typed data")
    Signed-off-by: David Michael <fedora.dm0@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Stanislav Fomichev <sdf@google.com>
    Acked-by: Alan Maguire <alan.maguire@oracle.com>
    Link: https://lore.kernel.org/bpf/87zgcu60hq.fsf@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96c5043a4d6443d56b92b5740e8e7d25907d1c66
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Nov 8 17:03:07 2022 -0700

    x86/vdso: Conditionally export __vdso_sgx_enter_enclave()
    
    commit 45be2ad007a9c6bea70249c4cf3e4905afe4caeb upstream.
    
    Recently, ld.lld moved from '--undefined-version' to
    '--no-undefined-version' as the default, which breaks building the vDSO
    when CONFIG_X86_SGX is not set:
    
      ld.lld: error: version script assignment of 'LINUX_2.6' to symbol '__vdso_sgx_enter_enclave' failed: symbol not defined
    
    __vdso_sgx_enter_enclave is only included in the vDSO when
    CONFIG_X86_SGX is set. Only export it if it will be present in the final
    object, which clears up the error.
    
    Fixes: 8466436952017 ("x86/vdso: Implement a vDSO for Intel SGX enclave call")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1756
    Link: https://lore.kernel.org/r/20221109000306.1407357-1-nathan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bcc86eb3ed952c22ceecce8932dde72ea01f8cc
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jan 18 11:48:59 2023 +0100

    Linux 5.15.89
    
    Link: https://lore.kernel.org/r/20230116154747.036911298@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Kelsey Steele <kelseysteele@linux.microsoft.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37c18ef49ec38a3571d9299b51b9760f1c3adb46
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Thu Oct 13 08:47:29 2022 -0500

    pinctrl: amd: Add dynamic debugging for active GPIOs
    
    commit 1d66e379731f79ae5039a869c0fde22a4f6a6a91 upstream.
    
    Some laptops have been reported to wake up from s2idle when plugging
    in the AC adapter or by closing the lid.  This is a surprising
    behavior that is further clarified by commit cb3e7d624c3ff ("PM:
    wakeup: Add extra debugging statement for multiple active IRQs").
    
    With that commit in place the following interaction can be seen
    when the lid is closed:
    
    [   28.946038] PM: suspend-to-idle
    [   28.946083] ACPI: EC: ACPI EC GPE status set
    [   28.946101] ACPI: PM: Rearming ACPI SCI for wakeup
    [   28.950152] Timekeeping suspended for 3.320 seconds
    [   28.950152] PM: Triggering wakeup from IRQ 9
    [   28.950152] ACPI: EC: ACPI EC GPE status set
    [   28.950152] ACPI: EC: ACPI EC GPE dispatched
    [   28.995057] ACPI: EC: ACPI EC work flushed
    [   28.995075] ACPI: PM: Rearming ACPI SCI for wakeup
    [   28.995131] PM: Triggering wakeup from IRQ 9
    [   28.995271] ACPI: EC: ACPI EC GPE status set
    [   28.995291] ACPI: EC: ACPI EC GPE dispatched
    [   29.098556] ACPI: EC: ACPI EC work flushed
    [   29.207020] ACPI: EC: ACPI EC work flushed
    [   29.207037] ACPI: PM: Rearming ACPI SCI for wakeup
    [   29.211095] Timekeeping suspended for 0.739 seconds
    [   29.211095] PM: Triggering wakeup from IRQ 9
    [   29.211079] PM: Triggering wakeup from IRQ 7
    [   29.211095] ACPI: PM: ACPI non-EC GPE wakeup
    [   29.211095] PM: resume from suspend-to-idle
    
    * IRQ9 on this laptop is used for the ACPI SCI.
    * IRQ7 on this laptop is used for the GPIO controller.
    
    What has occurred is when the lid was closed the EC woke up the
    SoC from it's deepest sleep state and the kernel's s2idle loop
    processed all EC events.  When it was finished processing EC events,
    it checked for any other reasons to wake (break the s2idle loop).
    
    The IRQ for the GPIO controller was active so the loop broke, and
    then this IRQ was processed.  This is not a kernel bug but it is
    certainly a surprising behavior, and to better debug it we should
    have a dynamic debugging message that we can enact to catch it.
    
    Acked-by: Basavaraj Natikar <Basavaraj.Natikar@amd.com>
    Acked-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Acked-by: Mark Pearson <markpearson@lenovo.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Link: https://lore.kernel.org/r/20221013134729.5592-2-mario.limonciello@amd.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5841b81adfa5cd29cb1c61a438da5a6ec32a7b3
Author: Ferry Toth <ftoth@exalondelft.nl>
Date:   Thu Dec 22 21:53:02 2022 +0100

    Revert "usb: ulpi: defer ulpi_register on ulpi_read_id timeout"
    
    commit b659b613cea2ae39746ca8bd2b69d1985dd9d770 upstream.
    
    This reverts commit 8a7b31d545d3a15f0e6f5984ae16f0ca4fd76aac.
    
    This patch results in some qemu test failures, specifically xilinx-zynq-a9
    machine and zynq-zc702 as well as zynq-zed devicetree files, when trying
    to boot from USB drive.
    
    Link: https://lore.kernel.org/lkml/20221220194334.GA942039@roeck-us.net/
    Fixes: 8a7b31d545d3 ("usb: ulpi: defer ulpi_register on ulpi_read_id timeout")
    Cc: stable@vger.kernel.org
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Ferry Toth <ftoth@exalondelft.nl>
    Link: https://lore.kernel.org/r/20221222205302.45761-1-ftoth@exalondelft.nl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ec9a45fc4ee7fc1054c2cabf8b09a6bc708472e
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Jan 4 08:51:19 2023 -0700

    block: handle bio_split_to_limits() NULL return
    
    commit 613b14884b8595e20b9fac4126bf627313827fbe upstream.
    
    This can't happen right now, but in preparation for allowing
    bio_split_to_limits() returning NULL if it ended the bio, check for it
    in all the callers.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba86db02d408ae362ee5f1cde52ffafb37b41ce5
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Jan 8 10:39:17 2023 -0700

    io_uring/io-wq: only free worker if it was allocated for creation
    
    commit e6db6f9398dadcbc06318a133d4c44a2d3844e61 upstream.
    
    We have two types of task_work based creation, one is using an existing
    worker to setup a new one (eg when going to sleep and we have no free
    workers), and the other is allocating a new worker. Only the latter
    should be freed when we cancel task_work creation for a new worker.
    
    Fixes: af82425c6a2d ("io_uring/io-wq: free worker if task_work creation is canceled")
    Reported-by: syzbot+d56ec896af3637bdb7e4@syzkaller.appspotmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb135bcc949980e96abd57d7bbeb40d69d380e0c
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Jan 2 16:49:46 2023 -0700

    io_uring/io-wq: free worker if task_work creation is canceled
    
    commit af82425c6a2d2f347c79b63ce74fca6dc6be157f upstream.
    
    If we cancel the task_work, the worker will never come into existance.
    As this is the last reference to it, ensure that we get it freed
    appropriately.
    
    Cc: stable@vger.kernel.org
    Reported-by: 진호 <wnwlsgh98@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63c2fa09b85679c17ee5f24de34f412dc76c0764
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Thu Mar 3 19:32:03 2022 +0530

    scsi: mpt3sas: Remove scsi_dma_map() error messages
    
    commit 0c25422d34b4726b2707d5f38560943155a91b80 upstream.
    
    When scsi_dma_map() fails by returning a sges_left value less than zero,
    the amount of logging produced can be extremely high.  In a recent end-user
    environment, 1200 messages per second were being sent to the log buffer.
    This eventually overwhelmed the system and it stalled.
    
    These error messages are not needed. Remove them.
    
    Link: https://lore.kernel.org/r/20220303140203.12642-1-sreekanth.reddy@broadcom.com
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2ea55564229e4bea1474af15b111b3a3043b76f
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Dec 19 10:10:04 2022 +0100

    efi: fix NULL-deref in init error path
    
    [ Upstream commit 703c13fe3c9af557d312f5895ed6a5fda2711104 ]
    
    In cases where runtime services are not supported or have been disabled,
    the runtime services workqueue will never have been allocated.
    
    Do not try to destroy the workqueue unconditionally in the unlikely
    event that EFI initialisation fails to avoid dereferencing a NULL
    pointer.
    
    Fixes: 98086df8b70c ("efi: add missed destroy_workqueue when efisubsys_init fails")
    Cc: stable@vger.kernel.org
    Cc: Li Heng <liheng40@huawei.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94b6cf84db42c518ad46fba6e678d884410ac49c
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 4 15:16:26 2023 +0000

    arm64: cmpxchg_double*: hazard against entire exchange variable
    
    [ Upstream commit 031af50045ea97ed4386eb3751ca2c134d0fc911 ]
    
    The inline assembly for arm64's cmpxchg_double*() implementations use a
    +Q constraint to hazard against other accesses to the memory location
    being exchanged. However, the pointer passed to the constraint is a
    pointer to unsigned long, and thus the hazard only applies to the first
    8 bytes of the location.
    
    GCC can take advantage of this, assuming that other portions of the
    location are unchanged, leading to a number of potential problems.
    
    This is similar to what we fixed back in commit:
    
      fee960bed5e857eb ("arm64: xchg: hazard against entire exchange variable")
    
    ... but we forgot to adjust cmpxchg_double*() similarly at the same
    time.
    
    The same problem applies, as demonstrated with the following test:
    
    | struct big {
    |         u64 lo, hi;
    | } __aligned(128);
    |
    | unsigned long foo(struct big *b)
    | {
    |         u64 hi_old, hi_new;
    |
    |         hi_old = b->hi;
    |         cmpxchg_double_local(&b->lo, &b->hi, 0x12, 0x34, 0x56, 0x78);
    |         hi_new = b->hi;
    |
    |         return hi_old ^ hi_new;
    | }
    
    ... which GCC 12.1.0 compiles as:
    
    | 0000000000000000 <foo>:
    |    0:   d503233f        paciasp
    |    4:   aa0003e4        mov     x4, x0
    |    8:   1400000e        b       40 <foo+0x40>
    |    c:   d2800240        mov     x0, #0x12                       // #18
    |   10:   d2800681        mov     x1, #0x34                       // #52
    |   14:   aa0003e5        mov     x5, x0
    |   18:   aa0103e6        mov     x6, x1
    |   1c:   d2800ac2        mov     x2, #0x56                       // #86
    |   20:   d2800f03        mov     x3, #0x78                       // #120
    |   24:   48207c82        casp    x0, x1, x2, x3, [x4]
    |   28:   ca050000        eor     x0, x0, x5
    |   2c:   ca060021        eor     x1, x1, x6
    |   30:   aa010000        orr     x0, x0, x1
    |   34:   d2800000        mov     x0, #0x0                        // #0    <--- BANG
    |   38:   d50323bf        autiasp
    |   3c:   d65f03c0        ret
    |   40:   d2800240        mov     x0, #0x12                       // #18
    |   44:   d2800681        mov     x1, #0x34                       // #52
    |   48:   d2800ac2        mov     x2, #0x56                       // #86
    |   4c:   d2800f03        mov     x3, #0x78                       // #120
    |   50:   f9800091        prfm    pstl1strm, [x4]
    |   54:   c87f1885        ldxp    x5, x6, [x4]
    |   58:   ca0000a5        eor     x5, x5, x0
    |   5c:   ca0100c6        eor     x6, x6, x1
    |   60:   aa0600a6        orr     x6, x5, x6
    |   64:   b5000066        cbnz    x6, 70 <foo+0x70>
    |   68:   c8250c82        stxp    w5, x2, x3, [x4]
    |   6c:   35ffff45        cbnz    w5, 54 <foo+0x54>
    |   70:   d2800000        mov     x0, #0x0                        // #0     <--- BANG
    |   74:   d50323bf        autiasp
    |   78:   d65f03c0        ret
    
    Notice that at the lines with "BANG" comments, GCC has assumed that the
    higher 8 bytes are unchanged by the cmpxchg_double() call, and that
    `hi_old ^ hi_new` can be reduced to a constant zero, for both LSE and
    LL/SC versions of cmpxchg_double().
    
    This patch fixes the issue by passing a pointer to __uint128_t into the
    +Q constraint, ensuring that the compiler hazards against the entire 16
    bytes being modified.
    
    With this change, GCC 12.1.0 compiles the above test as:
    
    | 0000000000000000 <foo>:
    |    0:   f9400407        ldr     x7, [x0, #8]
    |    4:   d503233f        paciasp
    |    8:   aa0003e4        mov     x4, x0
    |    c:   1400000f        b       48 <foo+0x48>
    |   10:   d2800240        mov     x0, #0x12                       // #18
    |   14:   d2800681        mov     x1, #0x34                       // #52
    |   18:   aa0003e5        mov     x5, x0
    |   1c:   aa0103e6        mov     x6, x1
    |   20:   d2800ac2        mov     x2, #0x56                       // #86
    |   24:   d2800f03        mov     x3, #0x78                       // #120
    |   28:   48207c82        casp    x0, x1, x2, x3, [x4]
    |   2c:   ca050000        eor     x0, x0, x5
    |   30:   ca060021        eor     x1, x1, x6
    |   34:   aa010000        orr     x0, x0, x1
    |   38:   f9400480        ldr     x0, [x4, #8]
    |   3c:   d50323bf        autiasp
    |   40:   ca0000e0        eor     x0, x7, x0
    |   44:   d65f03c0        ret
    |   48:   d2800240        mov     x0, #0x12                       // #18
    |   4c:   d2800681        mov     x1, #0x34                       // #52
    |   50:   d2800ac2        mov     x2, #0x56                       // #86
    |   54:   d2800f03        mov     x3, #0x78                       // #120
    |   58:   f9800091        prfm    pstl1strm, [x4]
    |   5c:   c87f1885        ldxp    x5, x6, [x4]
    |   60:   ca0000a5        eor     x5, x5, x0
    |   64:   ca0100c6        eor     x6, x6, x1
    |   68:   aa0600a6        orr     x6, x5, x6
    |   6c:   b5000066        cbnz    x6, 78 <foo+0x78>
    |   70:   c8250c82        stxp    w5, x2, x3, [x4]
    |   74:   35ffff45        cbnz    w5, 5c <foo+0x5c>
    |   78:   f9400480        ldr     x0, [x4, #8]
    |   7c:   d50323bf        autiasp
    |   80:   ca0000e0        eor     x0, x7, x0
    |   84:   d65f03c0        ret
    
    ... sampling the high 8 bytes before and after the cmpxchg, and
    performing an EOR, as we'd expect.
    
    For backporting, I've tested this atop linux-4.9.y with GCC 5.5.0. Note
    that linux-4.9.y is oldest currently supported stable release, and
    mandates GCC 5.1+. Unfortunately I couldn't get a GCC 5.1 binary to run
    on my machines due to library incompatibilities.
    
    I've also used a standalone test to check that we can use a __uint128_t
    pointer in a +Q constraint at least as far back as GCC 4.8.5 and LLVM
    3.9.1.
    
    Fixes: 5284e1b4bc8a ("arm64: xchg: Implement cmpxchg_double")
    Fixes: e9a4b795652f ("arm64: cmpxchg_dbl: patch in lse instructions when supported by the CPU")
    Reported-by: Boqun Feng <boqun.feng@gmail.com>
    Link: https://lore.kernel.org/lkml/Y6DEfQXymYVgL3oJ@boqun-archlinux/
    Reported-by: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/lkml/Y6GXoO4qmH9OIZ5Q@hirez.programming.kicks-ass.net/
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Steve Capper <steve.capper@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20230104151626.3262137-1-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3891fa4982b9f44d64d3a5dbcb5736bac46aba49
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Aug 17 16:59:13 2022 +0100

    arm64: atomics: remove LL/SC trampolines
    
    [ Upstream commit b2c3ccbd0011bb3b51d0fec24cb3a5812b1ec8ea ]
    
    When CONFIG_ARM64_LSE_ATOMICS=y, each use of an LL/SC atomic results in
    a fragment of code being generated in a subsection without a clear
    association with its caller. A trampoline in the caller branches to the
    LL/SC atomic with with a direct branch, and the atomic directly branches
    back into its trampoline.
    
    This breaks backtracing, as any PC within the out-of-line fragment will
    be symbolized as an offset from the nearest prior symbol (which may not
    be the function using the atomic), and since the atomic returns with a
    direct branch, the caller's PC may be missing from the backtrace.
    
    For example, with secondary_start_kernel() hacked to contain
    atomic_inc(NULL), the resulting exception can be reported as being taken
    from cpus_are_stuck_in_kernel():
    
    | Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
    | Mem abort info:
    |   ESR = 0x0000000096000004
    |   EC = 0x25: DABT (current EL), IL = 32 bits
    |   SET = 0, FnV = 0
    |   EA = 0, S1PTW = 0
    |   FSC = 0x04: level 0 translation fault
    | Data abort info:
    |   ISV = 0, ISS = 0x00000004
    |   CM = 0, WnR = 0
    | [0000000000000000] user address but active_mm is swapper
    | Internal error: Oops: 96000004 [#1] PREEMPT SMP
    | Modules linked in:
    | CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.19.0-11219-geb555cb5b794-dirty #3
    | Hardware name: linux,dummy-virt (DT)
    | pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    | pc : cpus_are_stuck_in_kernel+0xa4/0x120
    | lr : secondary_start_kernel+0x164/0x170
    | sp : ffff80000a4cbe90
    | x29: ffff80000a4cbe90 x28: 0000000000000000 x27: 0000000000000000
    | x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000
    | x23: 0000000000000000 x22: 0000000000000000 x21: 0000000000000000
    | x20: 0000000000000001 x19: 0000000000000001 x18: 0000000000000008
    | x17: 3030383832343030 x16: 3030303030307830 x15: ffff80000a4cbab0
    | x14: 0000000000000001 x13: 5d31666130663133 x12: 3478305b20313030
    | x11: 3030303030303078 x10: 3020726f73736563 x9 : 726f737365636f72
    | x8 : ffff800009ff2ef0 x7 : 0000000000000003 x6 : 0000000000000000
    | x5 : 0000000000000000 x4 : 0000000000000000 x3 : 0000000000000100
    | x2 : 0000000000000000 x1 : ffff0000029bd880 x0 : 0000000000000000
    | Call trace:
    |  cpus_are_stuck_in_kernel+0xa4/0x120
    |  __secondary_switched+0xb0/0xb4
    | Code: 35ffffa3 17fffc6c d53cd040 f9800011 (885f7c01)
    | ---[ end trace 0000000000000000 ]---
    
    This is confusing and hinders debugging, and will be problematic for
    CONFIG_LIVEPATCH as these cases cannot be unwound reliably.
    
    This is very similar to recent issues with out-of-line exception fixups,
    which were removed in commits:
    
      35d67794b8828333 ("arm64: lib: __arch_clear_user(): fold fixups into body")
      4012e0e22739eef9 ("arm64: lib: __arch_copy_from_user(): fold fixups into body")
      139f9ab73d60cf76 ("arm64: lib: __arch_copy_to_user(): fold fixups into body")
    
    When the trampolines were introduced in commit:
    
      addfc38672c73efd ("arm64: atomics: avoid out-of-line ll/sc atomics")
    
    The rationale was to improve icache performance by grouping the LL/SC
    atomics together. This has never been measured, and this theoretical
    benefit is outweighed by other factors:
    
    * As the subsections are collapsed into sections at object file
      granularity, these are spread out throughout the kernel and can share
      cachelines with unrelated code regardless.
    
    * GCC 12.1.0 has been observed to place the trampoline out-of-line in
      specialised __ll_sc_*() functions, introducing more branching than was
      intended.
    
    * Removing the trampolines has been observed to shrink a defconfig
      kernel Image by 64KiB when building with GCC 12.1.0.
    
    This patch removes the LL/SC trampolines, meaning that the LL/SC atomics
    will be inlined into their callers (or placed in out-of line functions
    using regular BL/RET pairs). When CONFIG_ARM64_LSE_ATOMICS=y, the LL/SC
    atomics are always called in an unlikely branch, and will be placed in a
    cold portion of the function, so this should have minimal impact to the
    hot paths.
    
    Other than the improved backtracing, there should be no functional
    change as a result of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20220817155914.3975112-2-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Stable-dep-of: 031af50045ea ("arm64: cmpxchg_double*: hazard against entire exchange variable")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61e86339af2aeb9e80766cbcedfe68ce172536eb
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Dec 10 15:14:06 2021 +0000

    arm64: atomics: format whitespace consistently
    
    [ Upstream commit 8e6082e94aac6d0338883b5953631b662a5a9188 ]
    
    The code for the atomic ops is formatted inconsistently, and while this
    is not a functional problem it is rather distracting when working on
    them.
    
    Some have ops have consistent indentation, e.g.
    
    | #define ATOMIC_OP_ADD_RETURN(name, mb, cl...)                           \
    | static inline int __lse_atomic_add_return##name(int i, atomic_t *v)     \
    | {                                                                       \
    |         u32 tmp;                                                        \
    |                                                                         \
    |         asm volatile(                                                   \
    |         __LSE_PREAMBLE                                                  \
    |         "       ldadd" #mb "    %w[i], %w[tmp], %[v]\n"                 \
    |         "       add     %w[i], %w[i], %w[tmp]"                          \
    |         : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp)        \
    |         : "r" (v)                                                       \
    |         : cl);                                                          \
    |                                                                         \
    |         return i;                                                       \
    | }
    
    While others have negative indentation for some lines, and/or have
    misaligned trailing backslashes, e.g.
    
    | static inline void __lse_atomic_##op(int i, atomic_t *v)                        \
    | {                                                                       \
    |         asm volatile(                                                   \
    |         __LSE_PREAMBLE                                                  \
    | "       " #asm_op "     %w[i], %[v]\n"                                  \
    |         : [i] "+r" (i), [v] "+Q" (v->counter)                           \
    |         : "r" (v));                                                     \
    | }
    
    This patch makes the indentation consistent and also aligns the trailing
    backslashes. This makes the code easier to read for those (like myself)
    who are easily distracted by these inconsistencies.
    
    This is intended as a cleanup.
    There should be no functional change as a result of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Acked-by: Will Deacon <will@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20211210151410.2782645-2-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Stable-dep-of: 031af50045ea ("arm64: cmpxchg_double*: hazard against entire exchange variable")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed4629d1e968359fbb91d0a3780b1e86a2c08845
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Sat Jan 14 09:14:03 2023 -0700

    io_uring: lock overflowing for IOPOLL
    
    commit 544d163d659d45a206d8929370d5a2984e546cb7 upstream.
    
    syzbot reports an issue with overflow filling for IOPOLL:
    
    WARNING: CPU: 0 PID: 28 at io_uring/io_uring.c:734 io_cqring_event_overflow+0x1c0/0x230 io_uring/io_uring.c:734
    CPU: 0 PID: 28 Comm: kworker/u4:1 Not tainted 6.2.0-rc3-syzkaller-16369-g358a161a6a9e #0
    Workqueue: events_unbound io_ring_exit_work
    Call trace:
     io_cqring_event_overflow+0x1c0/0x230 io_uring/io_uring.c:734
     io_req_cqe_overflow+0x5c/0x70 io_uring/io_uring.c:773
     io_fill_cqe_req io_uring/io_uring.h:168 [inline]
     io_do_iopoll+0x474/0x62c io_uring/rw.c:1065
     io_iopoll_try_reap_events+0x6c/0x108 io_uring/io_uring.c:1513
     io_uring_try_cancel_requests+0x13c/0x258 io_uring/io_uring.c:3056
     io_ring_exit_work+0xec/0x390 io_uring/io_uring.c:2869
     process_one_work+0x2d8/0x504 kernel/workqueue.c:2289
     worker_thread+0x340/0x610 kernel/workqueue.c:2436
     kthread+0x12c/0x158 kernel/kthread.c:376
     ret_from_fork+0x10/0x20 arch/arm64/kernel/entry.S:863
    
    There is no real problem for normal IOPOLL as flush is also called with
    uring_lock taken, but it's getting more complicated for IOPOLL|SQPOLL,
    for which __io_cqring_overflow_flush() happens from the CQ waiting path.
    
    Reported-and-tested-by: syzbot+6805087452d72929404e@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org # 5.10+
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbf50151418240cdbfc1f54d7679b0415a499732
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sat Oct 22 04:17:53 2022 -0400

    KVM: x86: Do not return host topology information from KVM_GET_SUPPORTED_CPUID
    
    [ Upstream commit 45e966fcca03ecdcccac7cb236e16eea38cc18af ]
    
    Passing the host topology to the guest is almost certainly wrong
    and will confuse the scheduler.  In addition, several fields of
    these CPUID leaves vary on each processor; it is simply impossible to
    return the right values from KVM_GET_SUPPORTED_CPUID in such a way that
    they can be passed to KVM_SET_CPUID2.
    
    The values that will most likely prevent confusion are all zeroes.
    Userspace will have to override it anyway if it wishes to present a
    specific topology to the guest.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee16841134be59a8ea4d5617be63b791e8fa1067
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Mar 22 12:07:12 2022 +0100

    Documentation: KVM: add API issues section
    
    [ Upstream commit cde363ab7ca7aea7a853851cd6a6745a9e1aaf5e ]
    
    Add a section to document all the different ways in which the KVM API sucks.
    
    I am sure there are way more, give people a place to vent so that userspace
    authors are aware.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20220322110712.222449-4-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8f3b3cffb4a160c2d888c9d15b98bf91a6b1552
Author: Aaron Thompson <dev@aaront.org>
Date:   Fri Jan 6 22:22:44 2023 +0000

    mm: Always release pages to the buddy allocator in memblock_free_late().
    
    [ Upstream commit 115d9d77bb0f9152c60b6e8646369fa7f6167593 ]
    
    If CONFIG_DEFERRED_STRUCT_PAGE_INIT is enabled, memblock_free_pages()
    only releases pages to the buddy allocator if they are not in the
    deferred range. This is correct for free pages (as defined by
    for_each_free_mem_pfn_range_in_zone()) because free pages in the
    deferred range will be initialized and released as part of the deferred
    init process. memblock_free_pages() is called by memblock_free_late(),
    which is used to free reserved ranges after memblock_free_all() has
    run. All pages in reserved ranges have been initialized at that point,
    and accordingly, those pages are not touched by the deferred init
    process. This means that currently, if the pages that
    memblock_free_late() intends to release are in the deferred range, they
    will never be released to the buddy allocator. They will forever be
    reserved.
    
    In addition, memblock_free_pages() calls kmsan_memblock_free_pages(),
    which is also correct for free pages but is not correct for reserved
    pages. KMSAN metadata for reserved pages is initialized by
    kmsan_init_shadow(), which runs shortly before memblock_free_all().
    
    For both of these reasons, memblock_free_pages() should only be called
    for free pages, and memblock_free_late() should call __free_pages_core()
    directly instead.
    
    One case where this issue can occur in the wild is EFI boot on
    x86_64. The x86 EFI code reserves all EFI boot services memory ranges
    via memblock_reserve() and frees them later via memblock_free_late()
    (efi_reserve_boot_services() and efi_free_boot_services(),
    respectively). If any of those ranges happens to fall within the
    deferred init range, the pages will not be released and that memory will
    be unavailable.
    
    For example, on an Amazon EC2 t3.micro VM (1 GB) booting via EFI:
    
    v6.2-rc2:
      # grep -E 'Node|spanned|present|managed' /proc/zoneinfo
      Node 0, zone      DMA
              spanned  4095
              present  3999
              managed  3840
      Node 0, zone    DMA32
              spanned  246652
              present  245868
              managed  178867
    
    v6.2-rc2 + patch:
      # grep -E 'Node|spanned|present|managed' /proc/zoneinfo
      Node 0, zone      DMA
              spanned  4095
              present  3999
              managed  3840
      Node 0, zone    DMA32
              spanned  246652
              present  245868
              managed  222816   # +43,949 pages
    
    Fixes: 3a80a7fa7989 ("mm: meminit: initialise a subset of struct pages if CONFIG_DEFERRED_STRUCT_PAGE_INIT is set")
    Signed-off-by: Aaron Thompson <dev@aaront.org>
    Link: https://lore.kernel.org/r/01010185892de53e-e379acfb-7044-4b24-b30a-e2657c1ba989-000000@us-west-2.amazonses.com
    Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2dc110deabe7142b60ebeed689e67f92795ee24
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Tue Dec 20 18:56:07 2022 +0100

    platform/surface: aggregator: Add missing call to ssam_request_sync_free()
    
    [ Upstream commit c965daac370f08a9b71d573a71d13cda76f2a884 ]
    
    Although rare, ssam_request_sync_init() can fail. In that case, the
    request should be freed via ssam_request_sync_free(). Currently it is
    leaked instead. Fix this.
    
    Fixes: c167b9c7e3d6 ("platform/surface: Add Surface Aggregator subsystem")
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20221220175608.1436273-1-luzmaximilian@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfd5978411edae852636f8a6cd53ea093f292e79
Author: Christopher S Hall <christopher.s.hall@intel.com>
Date:   Wed Dec 14 16:10:38 2022 +0800

    igc: Fix PPS delta between two synchronized end-points
    
    [ Upstream commit 5e91c72e560cc85f7163bbe3d14197268de31383 ]
    
    This patch fix the pulse per second output delta between
    two synchronized end-points.
    
    Based on Intel Discrete I225 Software User Manual Section
    4.2.15 TimeSync Auxiliary Control Register, ST0[Bit 4] and
    ST1[Bit 7] must be set to ensure that clock output will be
    toggles based on frequency value defined. This is to ensure
    that output of the PPS is aligned with the clock.
    
    How to test:
    
    1) Running time synchronization on both end points.
    Ex: ptp4l --step_threshold=1 -m -f gPTP.cfg -i <interface name>
    
    2) Configure PPS output using below command for both end-points
    Ex: SDP0 on I225 REV4 SKU variant
    
    ./testptp -d /dev/ptp0 -L 0,2
    ./testptp -d /dev/ptp0 -p 1000000000
    
    3) Measure the output using analyzer for both end-points
    
    Fixes: 87938851b6ef ("igc: enable auxiliary PHC functions for the i225")
    Signed-off-by: Christopher S Hall <christopher.s.hall@intel.com>
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bf52601ced19db7cbe188e0e4c6336fda1ba564
Author: Ian Rogers <irogers@google.com>
Date:   Fri Jan 6 07:13:19 2023 -0800

    perf build: Properly guard libbpf includes
    
    [ Upstream commit d891f2b724b39a2a41e3ad7b57110193993242ff ]
    
    Including libbpf header files should be guarded by HAVE_LIBBPF_SUPPORT.
    In bpf_counter.h, move the skeleton utilities under HAVE_BPF_SKEL.
    
    Fixes: d6a735ef3277c45f ("perf bpf_counter: Move common functions to bpf_counter.h")
    Reported-by: Mike Leach <mike.leach@linaro.org>
    Signed-off-by: Ian Rogers <irogers@google.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Mike Leach <mike.leach@linaro.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20230105172243.7238-1-mike.leach@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 205f35eee7be8d5b5f994e31200211fc745610f5
Author: Gavin Li <gavinl@nvidia.com>
Date:   Tue Dec 27 04:54:09 2022 +0200

    net/mlx5e: Don't support encap rules with gbp option
    
    [ Upstream commit d515d63cae2cd186acf40deaa8ef33067bb7f637 ]
    
    Previously, encap rules with gbp option would be offloaded by mistake but
    driver does not support gbp option offload.
    
    To fix this issue, check if the encap rule has gbp option and don't
    offload the rule
    
    Fixes: d8f9dfae49ce ("net: sched: allow flower to match vxlan options")
    Signed-off-by: Gavin Li <gavinl@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0526fc9330fe7d68b66a79561ebeb0a90f78df75
Author: Rahul Rameshbabu <rrameshbabu@nvidia.com>
Date:   Mon Dec 5 14:26:09 2022 -0800

    net/mlx5: Fix ptp max frequency adjustment range
    
    [ Upstream commit fe91d57277eef8bb4aca05acfa337b4a51d0bba4 ]
    
    .max_adj of ptp_clock_info acts as an absolute value for the amount in ppb
    that can be set for a single call of .adjfine. This means that a single
    call to .getfine cannot be greater than .max_adj or less than -(.max_adj).
    Provides correct value for max frequency adjustment value supported by
    devices.
    
    Fixes: 3d8c38af1493 ("net/mlx5e: Add PTP Hardware Clock (PHC) support")
    Signed-off-by: Rahul Rameshbabu <rrameshbabu@nvidia.com>
    Reviewed-by: Gal Pressman <gal@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e2c38827cdc6fdd3bb375c8607fc04d289756f9
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Sat Jan 7 19:10:04 2023 +0200

    net/sched: act_mpls: Fix warning during failed attribute validation
    
    [ Upstream commit 9e17f99220d111ea031b44153fdfe364b0024ff2 ]
    
    The 'TCA_MPLS_LABEL' attribute is of 'NLA_U32' type, but has a
    validation type of 'NLA_VALIDATE_FUNCTION'. This is an invalid
    combination according to the comment above 'struct nla_policy':
    
    "
    Meaning of `validate' field, use via NLA_POLICY_VALIDATE_FN:
       NLA_BINARY           Validation function called for the attribute.
       All other            Unused - but note that it's a union
    "
    
    This can trigger the warning [1] in nla_get_range_unsigned() when
    validation of the attribute fails. Despite being of 'NLA_U32' type, the
    associated 'min'/'max' fields in the policy are negative as they are
    aliased by the 'validate' field.
    
    Fix by changing the attribute type to 'NLA_BINARY' which is consistent
    with the above comment and all other users of NLA_POLICY_VALIDATE_FN().
    As a result, move the length validation to the validation function.
    
    No regressions in MPLS tests:
    
     # ./tdc.py -f tc-tests/actions/mpls.json
     [...]
     # echo $?
     0
    
    [1]
    WARNING: CPU: 0 PID: 17743 at lib/nlattr.c:118
    nla_get_range_unsigned+0x1d8/0x1e0 lib/nlattr.c:117
    Modules linked in:
    CPU: 0 PID: 17743 Comm: syz-executor.0 Not tainted 6.1.0-rc8 #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.13.0-48-gd9c812dda519-prebuilt.qemu.org 04/01/2014
    RIP: 0010:nla_get_range_unsigned+0x1d8/0x1e0 lib/nlattr.c:117
    [...]
    Call Trace:
     <TASK>
     __netlink_policy_dump_write_attr+0x23d/0x990 net/netlink/policy.c:310
     netlink_policy_dump_write_attr+0x22/0x30 net/netlink/policy.c:411
     netlink_ack_tlv_fill net/netlink/af_netlink.c:2454 [inline]
     netlink_ack+0x546/0x760 net/netlink/af_netlink.c:2506
     netlink_rcv_skb+0x1b7/0x240 net/netlink/af_netlink.c:2546
     rtnetlink_rcv+0x18/0x20 net/core/rtnetlink.c:6109
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x5e9/0x6b0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x739/0x860 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:714 [inline]
     sock_sendmsg net/socket.c:734 [inline]
     ____sys_sendmsg+0x38f/0x500 net/socket.c:2482
     ___sys_sendmsg net/socket.c:2536 [inline]
     __sys_sendmsg+0x197/0x230 net/socket.c:2565
     __do_sys_sendmsg net/socket.c:2574 [inline]
     __se_sys_sendmsg net/socket.c:2572 [inline]
     __x64_sys_sendmsg+0x42/0x50 net/socket.c:2572
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x2b/0x70 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Link: https://lore.kernel.org/netdev/CAO4mrfdmjvRUNbDyP0R03_DrD_eFCLCguz6OxZ2TYRSv0K9gxA@mail.gmail.com/
    Fixes: 2a2ea50870ba ("net: sched: add mpls manipulation actions to TC")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Tested-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Link: https://lore.kernel.org/r/20230107171004.608436-1-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3bb44beafde10bfd317c4e964d3b83b2e32b0dd
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 9 08:54:42 2023 +0100

    tools/nolibc: fix the O_* fcntl/open macro definitions for riscv
    
    [ Upstream commit 00b18da4089330196906b9fe075c581c17eb726c ]
    
    When RISCV port was imported in 5.2, the O_* macros were taken with
    their octal value and written as-is in hex, resulting in the getdents64()
    to fail in nolibc-test.
    
    Fixes: 582e84f7b779 ("tool headers nolibc: add RISCV support") #5.2
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e6ec75bb3b522256c86c40b584a3ea7bde7be07
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 9 08:54:39 2023 +0100

    tools/nolibc: restore mips branch ordering in the _start block
    
    [ Upstream commit 184177c3d6e023da934761e198c281344d7dd65b ]
    
    Depending on the compiler used and the optimization options, the sbrk()
    test was crashing, both on real hardware (mips-24kc) and in qemu. One
    such example is kernel.org toolchain in version 11.3 optimizing at -Os.
    
    Inspecting the sys_brk() call shows the following code:
    
      0040047c <sys_brk>:
        40047c:       24020fcd        li      v0,4045
        400480:       27bdffe0        addiu   sp,sp,-32
        400484:       0000000c        syscall
        400488:       27bd0020        addiu   sp,sp,32
        40048c:       10e00001        beqz    a3,400494 <sys_brk+0x18>
        400490:       00021023        negu    v0,v0
        400494:       03e00008        jr      ra
    
    It is obviously wrong, the "negu" instruction is placed in beqz's
    delayed slot, and worse, there's no nop nor instruction after the
    return, so the next function's first instruction (addiu sip,sip,-32)
    will also be executed as part of the delayed slot that follows the
    return.
    
    This is caused by the ".set noreorder" directive in the _start block,
    that applies to the whole program. The compiler emits code without the
    delayed slots and relies on the compiler to swap instructions when this
    option is not set. Removing the option would require to change the
    startup code in a way that wouldn't make it look like the resulting
    code, which would not be easy to debug. Instead let's just save the
    default ordering before changing it, and restore it at the end of the
    _start block. Now the code is correct:
    
      0040047c <sys_brk>:
        40047c:       24020fcd        li      v0,4045
        400480:       27bdffe0        addiu   sp,sp,-32
        400484:       0000000c        syscall
        400488:       10e00002        beqz    a3,400494 <sys_brk+0x18>
        40048c:       27bd0020        addiu   sp,sp,32
        400490:       00021023        negu    v0,v0
        400494:       03e00008        jr      ra
        400498:       00000000        nop
    
    Fixes: 66b6f755ad45 ("rcutorture: Import a copy of nolibc") #5.0
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd0431a66c39c30ddfacf94e0f118657328a6beb
Author: Ammar Faizi <ammarfaizi2@gnuweeb.org>
Date:   Tue Mar 29 17:17:31 2022 +0700

    tools/nolibc: Remove .global _start from the entry point code
    
    [ Upstream commit 1590c59836dace3a20945bad049fe8802c4e6f3f ]
    
    Building with clang yields the following error:
    ```
      <inline asm>:3:1: error: _start changed binding to STB_GLOBAL
      .global _start
      ^
      1 error generated.
    ```
    Make sure only specify one between `.global _start` and `.weak _start`.
    Remove `.global _start`.
    
    Cc: llvm@lists.linux.dev
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Ammar Faizi <ammarfaizi2@gnuweeb.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a77c54f5b50c0b58336119c3748fa328e9c25bf4
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Feb 7 17:23:45 2022 +0100

    tools/nolibc/arch: mark the _start symbol as weak
    
    [ Upstream commit dffeb81af5fe5eedccf5ea4a8a120d8c3accd26e ]
    
    By doing so we can link together multiple C files that have been compiled
    with nolibc and which each have a _start symbol.
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da51e086d154a9cc3dfbc978b982379da8454c14
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Feb 7 17:23:17 2022 +0100

    tools/nolibc/arch: split arch-specific code into individual files
    
    [ Upstream commit 271661c1cde5ff47eb7af9946866cd66b70dc328 ]
    
    In order to ease maintenance, this splits the arch-specific code into
    one file per architecture. A common file "arch.h" is used to include the
    right file among arch-* based on the detected architecture. Projects
    which are already split per architecture could simply rename these
    files to $arch/arch.h and get rid of the common arch.h. For this
    reason, include guards were placed into each arch-specific file.
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8591e788bea3d98a3bd4cd5e8392bff38ada01c0
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Feb 7 17:23:16 2022 +0100

    tools/nolibc/types: split syscall-specific definitions into their own files
    
    [ Upstream commit cc7a492ad0a076dff5cb4281b1516676d7924fcf ]
    
    The macros and type definitions used by a number of syscalls were moved
    to types.h where they will be easier to maintain. A few of them
    are arch-specific and must not be moved there (e.g. O_*, sys_stat_struct).
    A warning about them was placed at the top of the file.
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fceecdeaa8a88e668243db8f2a072b65b257f4c
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Feb 7 17:23:15 2022 +0100

    tools/nolibc/std: move the standard type definitions to std.h
    
    [ Upstream commit 967cce191f50090d5cbd3841ee2bbb7835afeae2 ]
    
    The ordering of includes and definitions for now is a bit of a mess, as
    for example asm/signal.h is included after int definitions, but plenty of
    structures are defined later as they rely on other includes.
    
    Let's move the standard type definitions to a dedicated file that is
    included first. We also move NULL there. This way all other includes
    are aware of it, and we can bring asm/signal.h back to the top of the
    file.
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1792136f228e45421489825ef07d212d5a60a706
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Feb 7 17:23:13 2022 +0100

    tools/nolibc: use pselect6 on RISCV
    
    [ Upstream commit 9c2970fbb425cca0256ecf0f96490e4f253fda24 ]
    
    This arch doesn't provide the old-style select() syscall, we have to
    use pselect6().
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 487386a49e01a9d7d28d6a52fe6ec095af1ef789
Author: Ammar Faizi <ammar.faizi@students.amikom.ac.id>
Date:   Sun Oct 24 19:43:22 2021 +0200

    tools/nolibc: x86-64: Use `mov $60,%eax` instead of `mov $60,%rax`
    
    [ Upstream commit 7bdc0e7a390511cd3df8194003b908f15a6170a5 ]
    
    Note that mov to 32-bit register will zero extend to 64-bit register.
    Thus `mov $60,%eax` has the same effect with `mov $60,%rax`. Use the
    shorter opcode to achieve the same thing.
    ```
      b8 3c 00 00 00        mov    $60,%eax (5 bytes) [1]
      48 c7 c0 3c 00 00 00  mov    $60,%rax (7 bytes) [2]
    ```
    Currently, we use [2]. Change it to [1] for shorter code.
    
    Signed-off-by: Ammar Faizi <ammar.faizi@students.amikom.ac.id>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27af4f2260cdccbcf3d7c95993b63bab5c0ffa2b
Author: Ammar Faizi <ammar.faizi@students.amikom.ac.id>
Date:   Sun Oct 24 19:43:21 2021 +0200

    tools/nolibc: x86: Remove `r8`, `r9` and `r10` from the clobber list
    
    [ Upstream commit bf91666959eeac44fb686e9359e37830944beef2 ]
    
    Linux x86-64 syscall only clobbers rax, rcx and r11 (and "memory").
    
      - rax for the return value.
      - rcx to save the return address.
      - r11 to save the rflags.
    
    Other registers are preserved.
    
    Having r8, r9 and r10 in the syscall clobber list is harmless, but this
    results in a missed-optimization.
    
    As the syscall doesn't clobber r8-r10, GCC should be allowed to reuse
    their value after the syscall returns to userspace. But since they are
    in the clobber list, GCC will always miss this opportunity.
    
    Remove them from the x86-64 syscall clobber list to help GCC generate
    better code and fix the comment.
    
    See also the x86-64 ABI, section A.2 AMD64 Linux Kernel Conventions,
    A.2.1 Calling Conventions [1].
    
    Extra note:
    Some people may think it does not really give a benefit to remove r8,
    r9 and r10 from the syscall clobber list because the impression of
    syscall is a C function call, and function call always clobbers those 3.
    
    However, that is not the case for nolibc.h, because we have a potential
    to inline the "syscall" instruction (which its opcode is "0f 05") to the
    user functions.
    
    All syscalls in the nolibc.h are written as a static function with inline
    ASM and are likely always inline if we use optimization flag, so this is
    a profit not to have r8, r9 and r10 in the clobber list.
    
    Here is the example where this matters.
    
    Consider the following C code:
    ```
      #include "tools/include/nolibc/nolibc.h"
      #define read_abc(a, b, c) __asm__ volatile("nop"::"r"(a),"r"(b),"r"(c))
    
      int main(void)
      {
            int a = 0xaa;
            int b = 0xbb;
            int c = 0xcc;
    
            read_abc(a, b, c);
            write(1, "test\n", 5);
            read_abc(a, b, c);
    
            return 0;
      }
    ```
    
    Compile with:
        gcc -Os test.c -o test -nostdlib
    
    With r8, r9, r10 in the clobber list, GCC generates this:
    
    0000000000001000 <main>:
        1000:       f3 0f 1e fa             endbr64
        1004:       41 54                   push   %r12
        1006:       41 bc cc 00 00 00       mov    $0xcc,%r12d
        100c:       55                      push   %rbp
        100d:       bd bb 00 00 00          mov    $0xbb,%ebp
        1012:       53                      push   %rbx
        1013:       bb aa 00 00 00          mov    $0xaa,%ebx
        1018:       90                      nop
        1019:       b8 01 00 00 00          mov    $0x1,%eax
        101e:       bf 01 00 00 00          mov    $0x1,%edi
        1023:       ba 05 00 00 00          mov    $0x5,%edx
        1028:       48 8d 35 d1 0f 00 00    lea    0xfd1(%rip),%rsi
        102f:       0f 05                   syscall
        1031:       90                      nop
        1032:       31 c0                   xor    %eax,%eax
        1034:       5b                      pop    %rbx
        1035:       5d                      pop    %rbp
        1036:       41 5c                   pop    %r12
        1038:       c3                      ret
    
    GCC thinks that syscall will clobber r8, r9, r10. So it spills 0xaa,
    0xbb and 0xcc to callee saved registers (r12, rbp and rbx). This is
    clearly extra memory access and extra stack size for preserving them.
    
    But syscall does not actually clobber them, so this is a missed
    optimization.
    
    Now without r8, r9, r10 in the clobber list, GCC generates better code:
    
    0000000000001000 <main>:
        1000:       f3 0f 1e fa             endbr64
        1004:       41 b8 aa 00 00 00       mov    $0xaa,%r8d
        100a:       41 b9 bb 00 00 00       mov    $0xbb,%r9d
        1010:       41 ba cc 00 00 00       mov    $0xcc,%r10d
        1016:       90                      nop
        1017:       b8 01 00 00 00          mov    $0x1,%eax
        101c:       bf 01 00 00 00          mov    $0x1,%edi
        1021:       ba 05 00 00 00          mov    $0x5,%edx
        1026:       48 8d 35 d3 0f 00 00    lea    0xfd3(%rip),%rsi
        102d:       0f 05                   syscall
        102f:       90                      nop
        1030:       31 c0                   xor    %eax,%eax
        1032:       c3                      ret
    
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: x86@kernel.org
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: David Laight <David.Laight@ACULAB.COM>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Ammar Faizi <ammar.faizi@students.amikom.ac.id>
    Link: https://gitlab.com/x86-psABIs/x86-64-ABI/-/wikis/x86-64-psABI [1]
    Link: https://lore.kernel.org/lkml/20211011040344.437264-1-ammar.faizi@students.amikom.ac.id/
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Stable-dep-of: 184177c3d6e0 ("tools/nolibc: restore mips branch ordering in the _start block")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a60b24192b1f1ad7cfc2dd4b4e0d35b07e167855
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Sat Jan 7 04:40:20 2023 +0100

    af_unix: selftest: Fix the size of the parameter to connect()
    
    [ Upstream commit 7d6ceeb1875cc08dc3d1e558e191434d94840cd5 ]
    
    Adjust size parameter in connect() to match the type of the parameter, to
    fix "No such file or directory" error in selftests/net/af_unix/
    test_oob_unix.c:127.
    
    The existing code happens to work provided that the autogenerated pathname
    is shorter than sizeof (struct sockaddr), which is why it hasn't been
    noticed earlier.
    
    Visible from the trace excerpt:
    
    bind(3, {sa_family=AF_UNIX, sun_path="unix_oob_453059"}, 110) = 0
    clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fa6a6577a10) = 453060
    [pid <child>] connect(6, {sa_family=AF_UNIX, sun_path="unix_oob_45305"}, 16) = -1 ENOENT (No such file or directory)
    
    BUG: The filename is trimmed to sizeof (struct sockaddr).
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Kuniyuki Iwashima <kuniyu@amazon.co.jp>
    Cc: Florian Westphal <fw@strlen.de>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Fixes: 314001f0bf92 ("af_unix: Add OOB support")
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39ae73e581112cfe27ba50aecb1c891ce57cecb1
Author: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
Date:   Fri Jan 6 17:23:44 2023 +0900

    nfc: pn533: Wait for out_urb's completion in pn533_usb_send_frame()
    
    [ Upstream commit 9dab880d675b9d0dd56c6428e4e8352a3339371d ]
    
    Fix a use-after-free that occurs in hcd when in_urb sent from
    pn533_usb_send_frame() is completed earlier than out_urb. Its callback
    frees the skb data in pn533_send_async_complete() that is used as a
    transfer buffer of out_urb. Wait before sending in_urb until the
    callback of out_urb is called. To modify the callback of out_urb alone,
    separate the complete function of out_urb and ack_urb.
    
    Found by a modified version of syzkaller.
    
    BUG: KASAN: use-after-free in dummy_timer
    Call Trace:
     memcpy (mm/kasan/shadow.c:65)
     dummy_perform_transfer (drivers/usb/gadget/udc/dummy_hcd.c:1352)
     transfer (drivers/usb/gadget/udc/dummy_hcd.c:1453)
     dummy_timer (drivers/usb/gadget/udc/dummy_hcd.c:1972)
     arch_static_branch (arch/x86/include/asm/jump_label.h:27)
     static_key_false (include/linux/jump_label.h:207)
     timer_expire_exit (include/trace/events/timer.h:127)
     call_timer_fn (kernel/time/timer.c:1475)
     expire_timers (kernel/time/timer.c:1519)
     __run_timers (kernel/time/timer.c:1790)
     run_timer_softirq (kernel/time/timer.c:1803)
    
    Fixes: c46ee38620a2 ("NFC: pn533: add NXP pn533 nfc device driver")
    Signed-off-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6003784b1f6065542aaf5af331bf0f149dead59
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Wed Nov 30 17:36:02 2022 +0100

    hvc/xen: lock console list traversal
    
    [ Upstream commit c0dccad87cf68fc6012aec7567e354353097ec1a ]
    
    The currently lockless access to the xen console list in
    vtermno_to_xencons() is incorrect, as additions and removals from the
    list can happen anytime, and as such the traversal of the list to get
    the private console data for a given termno needs to happen with the
    lock held.  Note users that modify the list already do so with the
    lock taken.
    
    Adjust current lock takers to use the _irq{save,restore} helpers,
    since the context in which vtermno_to_xencons() is called can have
    interrupts disabled.  Use the _irq{save,restore} set of helpers to
    switch the current callers to disable interrupts in the locked region.
    I haven't checked if existing users could instead use the _irq
    variant, as I think it's safer to use _irq{save,restore} upfront.
    
    While there switch from using list_for_each_entry_safe to
    list_for_each_entry: the current entry cursor won't be removed as
    part of the code in the loop body, so using the _safe variant is
    pointless.
    
    Fixes: 02e19f9c7cac ('hvc_xen: implement multiconsole support')
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Link: https://lore.kernel.org/r/20221130163611.14686-1-roger.pau@citrix.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79c58b74244dbcb2d9a9558880d7ae2cf3b6be2f
Author: Angela Czubak <aczubak@marvell.com>
Date:   Thu Jan 5 21:31:07 2023 +0530

    octeontx2-af: Fix LMAC config in cgx_lmac_rx_tx_enable
    
    [ Upstream commit b4e9b8763e417db31c7088103cc557d55cb7a8f5 ]
    
    PF netdev can request AF to enable or disable reception and transmission
    on assigned CGX::LMAC. The current code instead of disabling or enabling
    'reception and transmission' also disables/enable the LMAC. This patch
    fixes this issue.
    
    Fixes: 1435f66a28b4 ("octeontx2-af: CGX Rx/Tx enable/disable mbox handlers")
    Signed-off-by: Angela Czubak <aczubak@marvell.com>
    Signed-off-by: Hariprasad Kelam <hkelam@marvell.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20230105160107.17638-1-hkelam@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 303d06288122ed2bfbc232a5db80093e873d394a
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jan 5 06:02:51 2023 +0000

    tipc: fix unexpected link reset due to discovery messages
    
    [ Upstream commit c244c092f1ed2acfb5af3d3da81e22367d3dd733 ]
    
    This unexpected behavior is observed:
    
    node 1                    | node 2
    ------                    | ------
    link is established       | link is established
    reboot                    | link is reset
    up                        | send discovery message
    receive discovery message |
    link is established       | link is established
    send discovery message    |
                              | receive discovery message
                              | link is reset (unexpected)
                              | send reset message
    link is reset             |
    
    It is due to delayed re-discovery as described in function
    tipc_node_check_dest(): "this link endpoint has already reset
    and re-established contact with the peer, before receiving a
    discovery message from that node."
    
    However, commit 598411d70f85 has changed the condition for calling
    tipc_node_link_down() which was the acceptance of new media address.
    
    This commit fixes this by restoring the old and correct behavior.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e79d0f97cc6eb3354f41553f6ac024f1c3237bde
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 2 18:07:58 2023 +0100

    ALSA: usb-audio: Relax hw constraints for implicit fb sync
    
    [ Upstream commit d463ac1acb454fafed58f695cb3067fbf489f3a0 ]
    
    The fix commit the commit e4ea77f8e53f ("ALSA: usb-audio: Always apply
    the hw constraints for implicit fb sync") tried to address the bug
    where an incorrect PCM parameter is chosen when two (implicit fb)
    streams are set up at the same time.  This change had, however, some
    side effect: once when the sync endpoint is chosen and set up, this
    restriction is applied at the next hw params unless it's freed via hw
    free explicitly.
    
    This patch is a workaround for the problem by relaxing the hw
    constraints a bit for the implicit fb sync.  We still keep applying
    the hw constraints for implicit fb sync, but only when the matching
    sync EP is being used by other streams.
    
    Fixes: e4ea77f8e53f ("ALSA: usb-audio: Always apply the hw constraints for implicit fb sync")
    Reported-by: Ruud van Asseldonk <ruud@veniogames.com>
    Link: https://lore.kernel.org/r/4e509aea-e563-e592-e652-ba44af6733fe@veniogames.com
    Link: https://lore.kernel.org/r/20230102170759.29610-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9557906bd3bcccd45c9b11f3369cceee22037d3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 2 18:07:57 2023 +0100

    ALSA: usb-audio: Make sure to stop endpoints before closing EPs
    
    [ Upstream commit 0599313e26666e79f6e7fe1450588431b8cb25d5 ]
    
    At the PCM hw params, we may re-configure the endpoints and it's done
    by a temporary EP close followed by re-open.  A potential problem
    there is that the EP might be already running internally at the PCM
    prepare stage; it's seen typically in the playback stream with the
    implicit feedback sync.  As this stream start isn't tracked by the
    core PCM layer, we'd need to stop it explicitly, and that's the
    missing piece.
    
    This patch adds the stop_endpoints() call at snd_usb_hw_params() to
    assure the stream stop before closing the EPs.
    
    Fixes: bf6313a0ff76 ("ALSA: usb-audio: Refactor endpoint management")
    Link: https://lore.kernel.org/r/4e509aea-e563-e592-e652-ba44af6733fe@veniogames.com
    Link: https://lore.kernel.org/r/20230102170759.29610-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83e758105bc84f889720c0197c1eda1719f3ff6b
Author: Emanuele Ghidoli <emanuele.ghidoli@toradex.com>
Date:   Fri Dec 23 09:02:47 2022 +0100

    ASoC: wm8904: fix wrong outputs volume after power reactivation
    
    [ Upstream commit 472a6309c6467af89dbf660a8310369cc9cb041f ]
    
    Restore volume after charge pump and PGA activation to ensure
    that volume settings are correctly applied when re-enabling codec
    from SND_SOC_BIAS_OFF state.
    CLASS_W, CHARGE_PUMP and POWER_MANAGEMENT_2 register configuration
    affect how the volume register are applied and must be configured first.
    
    Fixes: a91eb199e4dc ("ASoC: Initial WM8904 CODEC driver")
    Link: https://lore.kernel.org/all/c7864c35-738c-a867-a6a6-ddf9f98df7e7@gmail.com/
    Signed-off-by: Emanuele Ghidoli <emanuele.ghidoli@toradex.com>
    Signed-off-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221223080247.7258-1-francesco@dolcini.it
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c26d218729b0822e2eb132de8be2ce377a959f9
Author: Peter Wang <peter.wang@mediatek.com>
Date:   Thu Dec 8 15:25:20 2022 +0800

    scsi: ufs: core: WLUN suspend SSU/enter hibern8 fail recovery
    
    [ Upstream commit 1a5665fc8d7a000671ebd3fe69c6f9acf1e0dcd9 ]
    
    When SSU/enter hibern8 fail in WLUN suspend flow, trigger the error handler
    and return busy to break the suspend.  Otherwise the consumer will get
    stuck in runtime suspend status.
    
    Fixes: b294ff3e3449 ("scsi: ufs: core: Enable power management for wlun")
    Signed-off-by: Peter Wang <peter.wang@mediatek.com>
    Link: https://lore.kernel.org/r/20221208072520.26210-1-peter.wang@mediatek.com
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 513fdf0b8e2025b8fc04437083c652c91b307423
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Dec 3 15:19:48 2021 -0800

    scsi: ufs: Stop using the clock scaling lock in the error handler
    
    [ Upstream commit 5675c381ea51360b4968b78f23aefda73e3de90d ]
    
    Instead of locking and unlocking the clock scaling lock, surround the
    command queueing code with an RCU reader lock and call synchronize_rcu().
    This patch prepares for removal of the clock scaling lock.
    
    Link: https://lore.kernel.org/r/20211203231950.193369-16-bvanassche@acm.org
    Tested-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: 1a5665fc8d7a ("scsi: ufs: core: WLUN suspend SSU/enter hibern8 fail recovery")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13259b60b71b2f1e83b8e91f78f9728d470c1042
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Wed Dec 7 11:36:59 2022 +0900

    scsi: mpi3mr: Refer CONFIG_SCSI_MPI3MR in Makefile
    
    [ Upstream commit f0a43ba6c66cc0688e2748d986a1459fdd3442ef ]
    
    When Kconfig item CONFIG_SCSI_MPI3MR was introduced for mpi3mr driver, the
    Makefile of the driver was not modified to refer the Kconfig item.
    
    As a result, mpi3mr.ko is built regardless of the Kconfig item value y or
    m. Also, if 'make localmodconfig' can not find the Kconfig item in the
    Makefile, then it does not generate CONFIG_SCSI_MPI3MR=m even when
    mpi3mr.ko is loaded on the system.
    
    Refer to the Kconfig item to avoid the issues.
    
    Fixes: c4f7ac64616e ("scsi: mpi3mr: Add mpi30 Rev-R headers and Kconfig")
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Link: https://lore.kernel.org/r/20221207023659.2411785-1-shinichiro.kawasaki@wdc.com
    Reviewed-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Acked-by: Sathya Prakash Veerichetty <sathya.prakash@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 470f6a9175f13a53810734658c35cc5bba33be01
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Sun Nov 27 22:06:02 2022 +0100

    regulator: da9211: Use irq handler when ready
    
    [ Upstream commit 02228f6aa6a64d588bc31e3267d05ff184d772eb ]
    
    If the system does not come from reset (like when it is kexec()), the
    regulator might have an IRQ waiting for us.
    
    If we enable the IRQ handler before its structures are ready, we crash.
    
    This patch fixes:
    
    [    1.141839] Unable to handle kernel read from unreadable memory at virtual address 0000000000000078
    [    1.316096] Call trace:
    [    1.316101]  blocking_notifier_call_chain+0x20/0xa8
    [    1.322757] cpu cpu0: dummy supplies not allowed for exclusive requests
    [    1.327823]  regulator_notifier_call_chain+0x1c/0x2c
    [    1.327825]  da9211_irq_handler+0x68/0xf8
    [    1.327829]  irq_thread+0x11c/0x234
    [    1.327833]  kthread+0x13c/0x154
    
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Reviewed-by: Adam Ward <DLG-Adam.Ward.opensource@dm.renesas.com>
    Link: https://lore.kernel.org/r/20221124-da9211-v2-0-1779e3c5d491@chromium.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24107ad469dfa169e056c1cb2ccc838c268256dc
Author: Peter Newman <peternewman@google.com>
Date:   Tue Dec 20 17:11:23 2022 +0100

    x86/resctrl: Fix task CLOSID/RMID update race
    
    commit fe1f0714385fbcf76b0cbceb02b7277d842014fc upstream.
    
    When the user moves a running task to a new rdtgroup using the task's
    file interface or by deleting its rdtgroup, the resulting change in
    CLOSID/RMID must be immediately propagated to the PQR_ASSOC MSR on the
    task(s) CPUs.
    
    x86 allows reordering loads with prior stores, so if the task starts
    running between a task_curr() check that the CPU hoisted before the
    stores in the CLOSID/RMID update then it can start running with the old
    CLOSID/RMID until it is switched again because __rdtgroup_move_task()
    failed to determine that it needs to be interrupted to obtain the new
    CLOSID/RMID.
    
    Refer to the diagram below:
    
    CPU 0                                   CPU 1
    -----                                   -----
    __rdtgroup_move_task():
      curr <- t1->cpu->rq->curr
                                            __schedule():
                                              rq->curr <- t1
                                            resctrl_sched_in():
                                              t1->{closid,rmid} -> {1,1}
      t1->{closid,rmid} <- {2,2}
      if (curr == t1) // false
       IPI(t1->cpu)
    
    A similar race impacts rdt_move_group_tasks(), which updates tasks in a
    deleted rdtgroup.
    
    In both cases, use smp_mb() to order the task_struct::{closid,rmid}
    stores before the loads in task_curr().  In particular, in the
    rdt_move_group_tasks() case, simply execute an smp_mb() on every
    iteration with a matching task.
    
    It is possible to use a single smp_mb() in rdt_move_group_tasks(), but
    this would require two passes and a means of remembering which
    task_structs were updated in the first loop. However, benchmarking
    results below showed too little performance impact in the simple
    approach to justify implementing the two-pass approach.
    
    Times below were collected using `perf stat` to measure the time to
    remove a group containing a 1600-task, parallel workload.
    
    CPU: Intel(R) Xeon(R) Platinum P-8136 CPU @ 2.00GHz (112 threads)
    
      # mkdir /sys/fs/resctrl/test
      # echo $$ > /sys/fs/resctrl/test/tasks
      # perf bench sched messaging -g 40 -l 100000
    
    task-clock time ranges collected using:
    
      # perf stat rmdir /sys/fs/resctrl/test
    
    Baseline:                     1.54 - 1.60 ms
    smp_mb() every matching task: 1.57 - 1.67 ms
    
      [ bp: Massage commit message. ]
    
    Fixes: ae28d1aae48a ("x86/resctrl: Use an IPI instead of task_work_add() to update PQR_ASSOC MSR")
    Fixes: 0efc89be9471 ("x86/intel_rdt: Update task closid immediately on CPU in rmdir and unmount")
    Signed-off-by: Peter Newman <peternewman@google.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Reviewed-by: Babu Moger <babu.moger@amd.com>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/20221220161123.432120-1-peternewman@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd3da505fb35f5f84389d2079cdd78894464c035
Author: Eliav Farber <farbere@amazon.com>
Date:   Thu Oct 20 12:44:58 2022 +0000

    EDAC/device: Fix period calculation in edac_device_reset_delay_period()
    
    commit e84077437902ec99eba0a6b516df772653f142c7 upstream.
    
    Fix period calculation in case user sets a value of 1000.  The input of
    round_jiffies_relative() should be in jiffies and not in milli-seconds.
    
      [ bp: Use the same code pattern as in edac_device_workq_setup() for
        clarity. ]
    
    Fixes: c4cf3b454eca ("EDAC: Rework workqueue handling")
    Signed-off-by: Eliav Farber <farbere@amazon.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/20221020124458.22153-1-farbere@amazon.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab0d02c53a60df082d546b16fbef7d36eeaa935b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Jan 10 12:15:40 2023 +0100

    x86/boot: Avoid using Intel mnemonics in AT&T syntax asm
    
    commit 7c6dd961d0c8e7e8f9fdc65071fb09ece702e18d upstream.
    
    With 'GNU assembler (GNU Binutils for Debian) 2.39.90.20221231' the
    build now reports:
    
      arch/x86/realmode/rm/../../boot/bioscall.S: Assembler messages:
      arch/x86/realmode/rm/../../boot/bioscall.S:35: Warning: found `movsd'; assuming `movsl' was meant
      arch/x86/realmode/rm/../../boot/bioscall.S:70: Warning: found `movsd'; assuming `movsl' was meant
    
      arch/x86/boot/bioscall.S: Assembler messages:
      arch/x86/boot/bioscall.S:35: Warning: found `movsd'; assuming `movsl' was meant
      arch/x86/boot/bioscall.S:70: Warning: found `movsd'; assuming `movsl' was meant
    
    Which is due to:
    
      PR gas/29525
    
      Note that with the dropped CMPSD and MOVSD Intel Syntax string insn
      templates taking operands, mixed IsString/non-IsString template groups
      (with memory operands) cannot occur anymore. With that
      maybe_adjust_templates() becomes unnecessary (and is hence being
      removed).
    
    More details: https://sourceware.org/bugzilla/show_bug.cgi?id=29525
    
    Borislav Petkov further explains:
    
      " the particular problem here is is that the 'd' suffix is
        "conflicting" in the sense that you can have SSE mnemonics like movsD %xmm...
        and the same thing also for string ops (which is the case here) so apparently
        the agreement in binutils land is to use the always accepted suffixes 'l' or 'q'
        and phase out 'd' slowly... "
    
    Fixes: 7a734e7dd93b ("x86, setup: "glove box" BIOS calls -- infrastructure")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/Y71I3Ex2pvIxMpsP@hirez.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a90d339f1f66be4a946769b565668e2bd0686dfa
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Fri Jan 6 12:21:57 2023 +0530

    powerpc/imc-pmu: Fix use of mutex in IRQs disabled section
    
    commit 76d588dddc459fefa1da96e0a081a397c5c8e216 upstream.
    
    Current imc-pmu code triggers a WARNING with CONFIG_DEBUG_ATOMIC_SLEEP
    and CONFIG_PROVE_LOCKING enabled, while running a thread_imc event.
    
    Command to trigger the warning:
      # perf stat -e thread_imc/CPM_CS_FROM_L4_MEM_X_DPTEG/ sleep 5
    
       Performance counter stats for 'sleep 5':
    
                       0      thread_imc/CPM_CS_FROM_L4_MEM_X_DPTEG/
    
             5.002117947 seconds time elapsed
    
             0.000131000 seconds user
             0.001063000 seconds sys
    
    Below is snippet of the warning in dmesg:
    
      BUG: sleeping function called from invalid context at kernel/locking/mutex.c:580
      in_atomic(): 1, irqs_disabled(): 1, non_block: 0, pid: 2869, name: perf-exec
      preempt_count: 2, expected: 0
      4 locks held by perf-exec/2869:
       #0: c00000004325c540 (&sig->cred_guard_mutex){+.+.}-{3:3}, at: bprm_execve+0x64/0xa90
       #1: c00000004325c5d8 (&sig->exec_update_lock){++++}-{3:3}, at: begin_new_exec+0x460/0xef0
       #2: c0000003fa99d4e0 (&cpuctx_lock){-...}-{2:2}, at: perf_event_exec+0x290/0x510
       #3: c000000017ab8418 (&ctx->lock){....}-{2:2}, at: perf_event_exec+0x29c/0x510
      irq event stamp: 4806
      hardirqs last  enabled at (4805): [<c000000000f65b94>] _raw_spin_unlock_irqrestore+0x94/0xd0
      hardirqs last disabled at (4806): [<c0000000003fae44>] perf_event_exec+0x394/0x510
      softirqs last  enabled at (0): [<c00000000013c404>] copy_process+0xc34/0x1ff0
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      CPU: 36 PID: 2869 Comm: perf-exec Not tainted 6.2.0-rc2-00011-g1247637727f2 #61
      Hardware name: 8375-42A POWER9 0x4e1202 opal:v7.0-16-g9b85f7d961 PowerNV
      Call Trace:
        dump_stack_lvl+0x98/0xe0 (unreliable)
        __might_resched+0x2f8/0x310
        __mutex_lock+0x6c/0x13f0
        thread_imc_event_add+0xf4/0x1b0
        event_sched_in+0xe0/0x210
        merge_sched_in+0x1f0/0x600
        visit_groups_merge.isra.92.constprop.166+0x2bc/0x6c0
        ctx_flexible_sched_in+0xcc/0x140
        ctx_sched_in+0x20c/0x2a0
        ctx_resched+0x104/0x1c0
        perf_event_exec+0x340/0x510
        begin_new_exec+0x730/0xef0
        load_elf_binary+0x3f8/0x1e10
      ...
      do not call blocking ops when !TASK_RUNNING; state=2001 set at [<00000000fd63e7cf>] do_nanosleep+0x60/0x1a0
      WARNING: CPU: 36 PID: 2869 at kernel/sched/core.c:9912 __might_sleep+0x9c/0xb0
      CPU: 36 PID: 2869 Comm: sleep Tainted: G        W          6.2.0-rc2-00011-g1247637727f2 #61
      Hardware name: 8375-42A POWER9 0x4e1202 opal:v7.0-16-g9b85f7d961 PowerNV
      NIP:  c000000000194a1c LR: c000000000194a18 CTR: c000000000a78670
      REGS: c00000004d2134e0 TRAP: 0700   Tainted: G        W           (6.2.0-rc2-00011-g1247637727f2)
      MSR:  9000000000021033 <SF,HV,ME,IR,DR,RI,LE>  CR: 48002824  XER: 00000000
      CFAR: c00000000013fb64 IRQMASK: 1
    
    The above warning triggered because the current imc-pmu code uses mutex
    lock in interrupt disabled sections. The function mutex_lock()
    internally calls __might_resched(), which will check if IRQs are
    disabled and in case IRQs are disabled, it will trigger the warning.
    
    Fix the issue by changing the mutex lock to spinlock.
    
    Fixes: 8f95faaac56c ("powerpc/powernv: Detect and create IMC device")
    Reported-by: Michael Petlan <mpetlan@redhat.com>
    Reported-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    [mpe: Fix comments, trim oops in change log, add reported-by tags]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20230106065157.182648-1-kjain@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 511cf17b2447fc41cfef8d71936e1fa53e395c1e
Author: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
Date:   Wed Jan 11 11:57:39 2023 +0000

    netfilter: ipset: Fix overflow before widen in the bitmap_ip_create() function.
    
    commit 9ea4b476cea1b7d461d16dda25ca3c7e616e2d15 upstream.
    
    When first_ip is 0, last_ip is 0xFFFFFFFF, and netmask is 31, the value of
    an arithmetic expression 2 << (netmask - mask_bits - 1) is subject
    to overflow due to a failure casting operands to a larger data type
    before performing the arithmetic.
    
    Note that it's harmless since the value will be checked at the next step.
    
    Found by InfoTeCS on behalf of Linux Verification Center
    (linuxtesting.org) with SVACE.
    
    Fixes: b9fed748185a ("netfilter: ipset: Check and reject crazy /0 input parameters")
    Signed-off-by: Ilia.Gavrilov <Ilia.Gavrilov@infotecs.ru>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b22faa21b6230d5eccd233e1b7e0026a5002b287
Author: Waiman Long <longman@redhat.com>
Date:   Fri Dec 30 23:11:19 2022 -0500

    sched/core: Fix use-after-free bug in dup_user_cpus_ptr()
    
    commit 87ca4f9efbd7cc649ff43b87970888f2812945b8 upstream.
    
    Since commit 07ec77a1d4e8 ("sched: Allow task CPU affinity to be
    restricted on asymmetric systems"), the setting and clearing of
    user_cpus_ptr are done under pi_lock for arm64 architecture. However,
    dup_user_cpus_ptr() accesses user_cpus_ptr without any lock
    protection. Since sched_setaffinity() can be invoked from another
    process, the process being modified may be undergoing fork() at
    the same time.  When racing with the clearing of user_cpus_ptr in
    __set_cpus_allowed_ptr_locked(), it can lead to user-after-free and
    possibly double-free in arm64 kernel.
    
    Commit 8f9ea86fdf99 ("sched: Always preserve the user requested
    cpumask") fixes this problem as user_cpus_ptr, once set, will never
    be cleared in a task's lifetime. However, this bug was re-introduced
    in commit 851a723e45d1 ("sched: Always clear user_cpus_ptr in
    do_set_cpus_allowed()") which allows the clearing of user_cpus_ptr in
    do_set_cpus_allowed(). This time, it will affect all arches.
    
    Fix this bug by always clearing the user_cpus_ptr of the newly
    cloned/forked task before the copying process starts and check the
    user_cpus_ptr state of the source task under pi_lock.
    
    Note to stable, this patch won't be applicable to stable releases.
    Just copy the new dup_user_cpus_ptr() function over.
    
    Fixes: 07ec77a1d4e8 ("sched: Allow task CPU affinity to be restricted on asymmetric systems")
    Fixes: 851a723e45d1 ("sched: Always clear user_cpus_ptr in do_set_cpus_allowed()")
    Reported-by: David Wang 王标 <wangbiao3@xiaomi.com>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221231041120.440785-2-longman@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d766ccadbe85823940a7f4e8a21aa2973250fca6
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Dec 19 19:06:22 2022 +0100

    iommu/mediatek-v1: Fix an error handling path in mtk_iommu_v1_probe()
    
    commit 142e821f68cf5da79ce722cb9c1323afae30e185 upstream.
    
    A clk, prepared and enabled in mtk_iommu_v1_hw_init(), is not released in
    the error handling path of mtk_iommu_v1_probe().
    
    Add the corresponding clk_disable_unprepare(), as already done in the
    remove function.
    
    Fixes: b17336c55d89 ("iommu/mediatek: add support for mtk iommu generation one HW")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Link: https://lore.kernel.org/r/593e7b7d97c6e064b29716b091a9d4fd122241fb.1671473163.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c929a230c84441e400c32e7b7b4ab763711fb63e
Author: Yunfei Wang <yf.wang@mediatek.com>
Date:   Wed Jan 11 14:38:00 2023 +0800

    iommu/iova: Fix alloc iova overflows issue
    
    commit dcdb3ba7e2a8caae7bfefd603bc22fd0ce9a389c upstream.
    
    In __alloc_and_insert_iova_range, there is an issue that retry_pfn
    overflows. The value of iovad->anchor.pfn_hi is ~0UL, then when
    iovad->cached_node is iovad->anchor, curr_iova->pfn_hi + 1 will
    overflow. As a result, if the retry logic is executed, low_pfn is
    updated to 0, and then new_pfn < low_pfn returns false to make the
    allocation successful.
    
    This issue occurs in the following two situations:
    1. The first iova size exceeds the domain size. When initializing
    iova domain, iovad->cached_node is assigned as iovad->anchor. For
    example, the iova domain size is 10M, start_pfn is 0x1_F000_0000,
    and the iova size allocated for the first time is 11M. The
    following is the log information, new->pfn_lo is smaller than
    iovad->cached_node.
    
    Example log as follows:
    [  223.798112][T1705487] sh: [name:iova&]__alloc_and_insert_iova_range
    start_pfn:0x1f0000,retry_pfn:0x0,size:0xb00,limit_pfn:0x1f0a00
    [  223.799590][T1705487] sh: [name:iova&]__alloc_and_insert_iova_range
    success start_pfn:0x1f0000,new->pfn_lo:0x1efe00,new->pfn_hi:0x1f08ff
    
    2. The node with the largest iova->pfn_lo value in the iova domain
    is deleted, iovad->cached_node will be updated to iovad->anchor,
    and then the alloc iova size exceeds the maximum iova size that can
    be allocated in the domain.
    
    After judging that retry_pfn is less than limit_pfn, call retry_pfn+1
    to fix the overflow issue.
    
    Signed-off-by: jianjiao zeng <jianjiao.zeng@mediatek.com>
    Signed-off-by: Yunfei Wang <yf.wang@mediatek.com>
    Cc: <stable@vger.kernel.org> # 5.15.*
    Fixes: 4e89dce72521 ("iommu/iova: Retry from last rb tree node if iova search fails")
    Acked-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20230111063801.25107-1-yf.wang@mediatek.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b51aa263ae46ffd5720aea14e198018c43c117b
Author: Ferry Toth <ftoth@exalondelft.nl>
Date:   Mon Dec 5 21:15:26 2022 +0100

    usb: ulpi: defer ulpi_register on ulpi_read_id timeout
    
    [ Upstream commit 8a7b31d545d3a15f0e6f5984ae16f0ca4fd76aac ]
    
    Since commit 0f0101719138 ("usb: dwc3: Don't switch OTG -> peripheral
    if extcon is present") Dual Role support on Intel Merrifield platform
    broke due to rearranging the call to dwc3_get_extcon().
    
    It appears to be caused by ulpi_read_id() on the first test write failing
    with -ETIMEDOUT. Currently ulpi_read_id() expects to discover the phy via
    DT when the test write fails and returns 0 in that case, even if DT does not
    provide the phy. As a result usb probe completes without phy.
    
    Make ulpi_read_id() return -ETIMEDOUT to its user if the first test write
    fails. The user should then handle it appropriately. A follow up patch
    will make dwc3_core_init() set -EPROBE_DEFER in this case and bail out.
    
    Fixes: ef6a7bcfb01c ("usb: ulpi: Support device discovery via DT")
    Cc: stable@vger.kernel.org
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Ferry Toth <ftoth@exalondelft.nl>
    Link: https://lore.kernel.org/r/20221205201527.13525-2-ftoth@exalondelft.nl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a8bf443f6a291d26c90db2a42dd6fe8724e72c2
Author: Qiang Yu <quic_qianyu@quicinc.com>
Date:   Sun Oct 16 11:05:32 2022 +0800

    bus: mhi: host: Fix race between channel preparation and M0 event
    
    [ Upstream commit 869a99907faea6d1835b0bd0d0422ae3519c6ea9 ]
    
    There is a race condition where mhi_prepare_channel() updates the
    read and write pointers as the base address and in parallel, if
    an M0 transition occurs, the tasklet goes ahead and rings
    doorbells for all channels with a delta in TRE rings assuming
    they are already enabled. This causes a null pointer access. Fix
    it by adding a channel enabled check before ringing channel
    doorbells.
    
    Cc: stable@vger.kernel.org # 5.19
    Fixes: a6e2e3522f29 "bus: mhi: core: Add support for PM state transitions"
    Signed-off-by: Qiang Yu <quic_qianyu@quicinc.com>
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Link: https://lore.kernel.org/r/1665889532-13634-1-git-send-email-quic_qianyu@quicinc.com
    [mani: CCed stable list]
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 456e3794e08a0b59b259da666e31d0884b376bcf
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Jan 10 08:59:06 2023 +0800

    ipv6: raw: Deduct extension header length in rawv6_push_pending_frames
    
    commit cb3e9864cdbe35ff6378966660edbcbac955fe17 upstream.
    
    The total cork length created by ip6_append_data includes extension
    headers, so we must exclude them when comparing them against the
    IPV6_CHECKSUM offset which does not include extension headers.
    
    Reported-by: Kyle Zeng <zengyhkyle@gmail.com>
    Fixes: 357b40a18b04 ("[IPV6]: IPV6_CHECKSUM socket option can corrupt kernel memory")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c93422a54cd6a349988f42e1c6bf082cf4ea9d8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 29 09:57:48 2022 +0800

    ixgbe: fix pci device refcount leak
    
    commit b93fb4405fcb5112c5739c5349afb52ec7f15c07 upstream.
    
    As the comment of pci_get_domain_bus_and_slot() says, it
    returns a PCI device with refcount incremented, when finish
    using it, the caller must decrement the reference count by
    calling pci_dev_put().
    
    In ixgbe_get_first_secondary_devfn() and ixgbe_x550em_a_has_mii(),
    pci_dev_put() is called to avoid leak.
    
    Fixes: 8fa10ef01260 ("ixgbe: register a mdiobus")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e97da5d97a9748567ec49bc4efca9669a2da2edf
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 13 13:29:43 2022 +0100

    platform/x86: sony-laptop: Don't turn off 0x153 keyboard backlight during probe
    
    commit ad75bd85b1db69c97eefea07b375567821f6ef58 upstream.
    
    The 0x153 version of the kbd backlight control SNC handle has no separate
    address to probe if the backlight is there.
    
    This turns the probe call into a set keyboard backlight call with a value
    of 0 turning off the keyboard backlight.
    
    Skip probing when there is no separate probe address to avoid this.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1583752
    Fixes: 800f20170dcf ("Keyboard backlight control for some Vaio Fit models")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Mattia Dongili <malattia@linux.it>
    Link: https://lore.kernel.org/r/20221213122943.11123-1-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3b1e04daf8667566137014c18201e6ccba3e729
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Wed Nov 30 14:58:07 2022 +0100

    dt-bindings: msm/dsi: Don't require vcca-supply on 14nm PHY
    
    commit a2117773c839a8439a3771e0c040b5c505b083a7 upstream.
    
    On some SoCs (hello SM6115) vcca-supply is not wired to any smd-rpm
    or rpmh regulator, but instead powered by the VDD_MX line, which is
    voted for in the DSI ctrl node.
    
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Fixes: 8fc939e72ff8 ("dt-bindings: msm: dsi: add yaml schemas for DSI PHY bindings")
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/513555/
    Link: https://lore.kernel.org/r/20221130135807.45028-1-konrad.dybcio@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52a5f596c6cce89118686e5b6fc7d4a5858dce06
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Wed Nov 16 17:32:18 2022 +0100

    dt-bindings: msm/dsi: Don't require vdds-supply on 10nm PHY
    
    commit ef11cb7a29c0e13031c968190ea8f86104e7fb6a upstream.
    
    On some SoCs (hello SM6350) vdds-supply is not wired to any smd-rpm
    or rpmh regulator, but instead powered by the VDD_MX/mx.lvl line,
    which is voted for in the DSI ctrl node.
    
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Fixes: 8fc939e72ff8 ("dt-bindings: msm: dsi: add yaml schemas for DSI PHY bindings")
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/511889/
    Link: https://lore.kernel.org/r/20221116163218.42449-1-konrad.dybcio@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 984ad875db804948c86ca9e1c2e784ae8252715a
Author: Kuogee Hsieh <quic_khsieh@quicinc.com>
Date:   Tue Dec 27 18:16:24 2022 -0800

    drm/msm/dp: do not complete dp_aux_cmd_fifo_tx() if irq is not for aux transfer
    
    commit 1cba0d150fa102439114a91b3e215909efc9f169 upstream.
    
    There are 3 possible interrupt sources are handled by DP controller,
    HPDstatus, Controller state changes and Aux read/write transaction.
    At every irq, DP controller have to check isr status of every interrupt
    sources and service the interrupt if its isr status bits shows interrupts
    are pending. There is potential race condition may happen at current aux
    isr handler implementation since it is always complete dp_aux_cmd_fifo_tx()
    even irq is not for aux read or write transaction. This may cause aux read
    transaction return premature if host aux data read is in the middle of
    waiting for sink to complete transferring data to host while irq happen.
    This will cause host's receiving buffer contains unexpected data. This
    patch fixes this problem by checking aux isr and return immediately at
    aux isr handler if there are no any isr status bits set.
    
    Current there is a bug report regrading eDP edid corruption happen during
    system booting up. After lengthy debugging to found that VIDEO_READY
    interrupt was continuously firing during system booting up which cause
    dp_aux_isr() to complete dp_aux_cmd_fifo_tx() prematurely to retrieve data
    from aux hardware buffer which is not yet contains complete data transfer
    from sink. This cause edid corruption.
    
    Follows are the signature at kernel logs when problem happen,
    EDID has corrupt header
    panel-simple-dp-aux aux-aea0000.edp: Couldn't identify panel via EDID
    
    Changes in v2:
    -- do complete if (ret == IRQ_HANDLED) ay dp-aux_isr()
    -- add more commit text
    
    Changes in v3:
    -- add Stephen suggested
    -- dp_aux_isr() return IRQ_XXX back to caller
    -- dp_ctrl_isr() return IRQ_XXX back to caller
    
    Changes in v4:
    -- split into two patches
    
    Changes in v5:
    -- delete empty line between tags
    
    Changes in v6:
    -- remove extra "that" and fixed line more than 75 char at commit text
    
    Fixes: c943b4948b58 ("drm/msm/dp: add displayPort driver support")
    Signed-off-by: Kuogee Hsieh <quic_khsieh@quicinc.com>
    Tested-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/516121/
    Link: https://lore.kernel.org/r/1672193785-11003-2-git-send-email-quic_khsieh@quicinc.com
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92ae83665e9e24d44e57d897b91e72144ce1de8e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Dec 15 16:43:57 2022 +0100

    platform/x86: ideapad-laptop: Add Legion 5 15ARH05 DMI id to set_fn_lock_led_list[]
    
    commit f4b7f8febd4d9b615fbec2a06bf352b9c3729b11 upstream.
    
    The Lenovo Legion 5 15ARH05 needs ideapad-laptop to call SALS_FNLOCK_ON /
    SALS_FNLOCK_OFF on Fn-lock state change to get the LED in the Fn key to
    correctly reflect the Fn-lock state.
    
    Add a DMI match for the Legion 5 15ARH05 to the set_fn_lock_led_list[]
    table for this.
    
    Fixes: 81a5603a0f50 ("platform/x86: ideapad-laptop: Fix interrupt storm on fn-lock toggle on some Yoga laptops")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20221215154357.123876-1-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e38b5f81dfa8fa3972ff55fe0ea40600776e9c70
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Thu Dec 29 12:44:38 2022 +0000

    dt-bindings: msm: dsi-phy-28nm: Add missing qcom, dsi-phy-regulator-ldo-mode
    
    commit be79f805a1e1b95605c825f1c513bdd2c8b167ed upstream.
    
    Add in missing qcom,dsi-phy-regulator-ldo-mode to the 28nm DSI PHY.
    When converting from .txt to .yaml we missed this one.
    
    Fixes: 4dbe55c97741 ("dt-bindings: msm: dsi: add yaml schemas for DSI bindings")
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/516205/
    Link: https://lore.kernel.org/r/20221229124438.504770-2-bryan.odonoghue@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb32ab40cb7fe5b1702ffcaab68f409237163d4c
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Fri Dec 23 02:10:10 2022 +0000

    dt-bindings: msm: dsi-controller-main: Fix description of core clock
    
    commit 654ffe4b793b42ed6b5909daff0b91809916d94e upstream.
    
    There's a typo in describing the core clock as an 'escape' clock. The
    accurate description is 'core'.
    
    Fixes: 4dbe55c97741 ("dt-bindings: msm: dsi: add yaml schemas for DSI bindings")
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/515938/
    Link: https://lore.kernel.org/r/20221223021025.1646636-4-bryan.odonoghue@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fb8d10beef9ad13b7007eb49db10278b683a27c
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Fri Dec 23 02:10:09 2022 +0000

    dt-bindings: msm: dsi-controller-main: Fix power-domain constraint
    
    commit a6f033938beb31f893302a93f83ec0b6460c6cac upstream.
    
    power-domain is required for the sc7180 dispcc GDSC but not every qcom SoC
    has a similar dependency for example the apq8064.
    
    Most Qcom SoC's using mdss-dsi-ctrl seem to have the ability to
    power-collapse the MDP without collapsing DSI.
    
    For example the qcom vendor kernel commit for apq8084, msm8226, msm8916,
    msm8974.
    
    https://review.carbonrom.org/plugins/gitiles/CarbonROM/android_kernel_oneplus_msm8994/+/7b5c011a770daa2811778937ed646237a28a8694
    
    "ARM: dts: msm: add mdss gdsc supply to dsi controller device
    
     It is possible for the DSI controller to be active when MDP is
     power collapsed. DSI controller needs to have it's own vote for
     mdss gdsc to ensure that gdsc remains on in such cases."
    
    This however doesn't appear to be the case for the apq8064 so we shouldn't
    be marking power-domain as required in yaml checks.
    
    Fixes: 4dbe55c97741 ("dt-bindings: msm: dsi: add yaml schemas for DSI bindings")
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/515958/
    Link: https://lore.kernel.org/r/20221223021025.1646636-3-bryan.odonoghue@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc5b651cad6648ddccd54a87b8b00815a2f1710a
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Mon Jan 2 11:02:00 2023 +0100

    drm/msm/adreno: Make adreno quirks not overwrite each other
    
    commit 13ef096e342b00e30b95a90c6c13eee1f0bec4c5 upstream.
    
    So far the adreno quirks have all been assigned with an OR operator,
    which is problematic, because they were assigned consecutive integer
    values, which makes checking them with an AND operator kind of no bueno..
    
    Switch to using BIT(n) so that only the quirks that the programmer chose
    are taken into account when evaluating info->quirks & ADRENO_QUIRK_...
    
    Fixes: 370063ee427a ("drm/msm/adreno: Add A540 support")
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Marijn Suijten <marijn.suijten@somainline.org>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Reviewed-by: Akhil P Oommen <quic_akhilpo@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/516456/
    Link: https://lore.kernel.org/r/20230102100201.77286-1-konrad.dybcio@linaro.org
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 757d665ee1fe839bdfbaee2fec5651ffed981cb9
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Fri Dec 23 02:10:08 2022 +0000

    dt-bindings: msm: dsi-controller-main: Fix operating-points-v2 constraint
    
    commit cdf64343f91a1225e9e3d4ce4261962cd41b4ddd upstream.
    
    The existing msm8916.dtsi does not depend on nor require operating points.
    
    Fixes: 4dbe55c97741 ("dt-bindings: msm: dsi: add yaml schemas for DSI bindings")
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/515940/
    Link: https://lore.kernel.org/r/20221223021025.1646636-2-bryan.odonoghue@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c90cf47d309aef341f2d8c8373945ab5fb29e59d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Dec 21 23:07:23 2022 +0100

    platform/x86: dell-privacy: Fix SW_CAMERA_LENS_COVER reporting
    
    commit 1af7fef0d9d3fa075bf4e850f705df1fe97d33ce upstream.
    
    Use KE_VSW instead of KE_SW for the SW_CAMERA_LENS_COVER key_entry
    and get the value of the switch from the status field when handling
    SW_CAMERA_LENS_COVER events, instead of always reporting 0.
    
    Also correctly set the initial SW_CAMERA_LENS_COVER value.
    
    Fixes: 8af9fa37b8a3 ("platform/x86: dell-privacy: Add support for Dell hardware privacy")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20221221220724.119594-1-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25b5f693bc2d153047192c124e1f8bac28d2dee9
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Fri Dec 2 23:33:19 2022 +0100

    platform/surface: aggregator: Ignore command messages not intended for us
    
    commit ae0fa0a3126a86c801c3220fcd8eefe03aa39f3e upstream.
    
    It is possible that we (the host/kernel driver) receive command messages
    that are not intended for us. Ignore those for now.
    
    The whole story is a bit more complicated: It is possible to enable
    debug output on SAM, which is sent via SSH command messages. By default
    this output is sent to a debug connector, with its own target ID
    (TID=0x03). It is possible to override the target of the debug output
    and set it to the host/kernel driver. This, however, does not change the
    original target ID of the message. Meaning, we receive messages with
    TID=0x03 (debug) but expect to only receive messages with TID=0x00
    (host).
    
    The problem is that the different target ID also comes with a different
    scope of request IDs. In particular, these do not follow the standard
    event rules (i.e. do not fall into a set of small reserved values).
    Therefore, current message handling interprets them as responses to
    pending requests and tries to match them up via the request ID. However,
    these debug output messages are not in fact responses, and therefore
    this will at best fail to find the request and at worst pass on the
    wrong data as response for a request.
    
    Therefore ignore any command messages not intended for us (host) for
    now. We can implement support for the debug messages once we have a
    better understanding of them.
    
    Note that this may also provide a bit more stability and avoid some
    driver confusion in case any other targets want to talk to us in the
    future, since we don't yet know what to do with those as well. A warning
    for the dropped messages should suffice for now and also give us a
    chance of discovering new targets if they come along without any
    potential for bugs/instabilities.
    
    Fixes: c167b9c7e3d6 ("platform/surface: Add Surface Aggregator subsystem")
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20221202223327.690880-2-luzmaximilian@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee7b8ce2cc28d1dabc0ab4b43f7764a3d1346dcf
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Dec 21 23:07:24 2022 +0100

    platform/x86: dell-privacy: Only register SW_CAMERA_LENS_COVER if present
    
    commit 6dc485f9940df8105ea729cbeb7a7d18d409dde5 upstream.
    
    Unlike keys where userspace only reacts to keypresses, userspace may act
    on switches in both (0 and 1) of their positions.
    
    For example if a SW_TABLET_MODE switch is registered then GNOME will not
    automatically show the onscreen keyboard when a text field gets focus on
    touchscreen devices when SW_TABLET_MODE reports 0 and when SW_TABLET_MODE
    reports 1 libinput will block (filter out) builtin keyboard and touchpad
    events.
    
    So to avoid unwanted side-effects EV_SW type inputs should only be
    registered if they are actually present, only register SW_CAMERA_LENS_COVER
    if it is actually there.
    
    Fixes: 8af9fa37b8a3 ("platform/x86: dell-privacy: Add support for Dell hardware privacy")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20221221220724.119594-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0072068adaf9ff224c17dc56ed3f02c5621de80
Author: Volker Lendecke <vl@samba.org>
Date:   Wed Jan 11 12:37:58 2023 +0100

    cifs: Fix uninitialized memory read for smb311 posix symlink create
    
    commit a152d05ae4a71d802d50cf9177dba34e8bb09f68 upstream.
    
    If smb311 posix is enabled, we send the intended mode for file
    creation in the posix create context. Instead of using what's there on
    the stack, create the mfsymlink file with 0644.
    
    Fixes: ce558b0e17f8a ("smb3: Add posix create context for smb3.11 posix mounts")
    Cc: stable@vger.kernel.org
    Signed-off-by: Volker Lendecke <vl@samba.org>
    Reviewed-by: Tom Talpey <tom@talpey.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3495b5e9e68b834d4662e6f90776ea9df2ff110
Author: Roi Dayan <roid@nvidia.com>
Date:   Wed Aug 11 14:09:07 2021 +0300

    net/mlx5e: Set action fwd flag when parsing tc action goto
    
    commit 7f8770c71646cf93abdf3fea8b7733aaec4c82a3 upstream.
    
    Do it when parsing like in other actions instead of when
    checking if goto is supported in current scenario.
    
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Cc: dann frazier <dann.frazier@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a8431cc202aa33f8c23bf0be3c9bcf689a3edeb
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Dec 12 17:13:38 2022 +0100

    drm/i915/gt: Reset twice
    
    commit d3de5616d36462a646f5b360ba82d3b09ff668eb upstream.
    
    After applying an engine reset, on some platforms like Jasperlake, we
    occasionally detect that the engine state is not cleared until shortly
    after the resume. As we try to resume the engine with volatile internal
    state, the first request fails with a spurious CS event (it looks like
    it reports a lite-restore to the hung context, instead of the expected
    idle->active context switch).
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@vger.kernel.org
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Signed-off-by: Andi Shyti <andi.shyti@linux.intel.com>
    Reviewed-by: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221212161338.1007659-1-andi.shyti@linux.intel.com
    (cherry picked from commit 3db9d590557da3aa2c952f2fecd3e9b703dad790)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 011ecdbcd520c90c344b872ca6b4821f7783b2f8
Author: Rob Clark <robdclark@chromium.org>
Date:   Fri Dec 16 15:33:55 2022 -0800

    drm/virtio: Fix GEM handle creation UAF
    
    commit 52531258318ed59a2dc5a43df2eaf0eb1d65438e upstream.
    
    Userspace can guess the handle value and try to race GEM object creation
    with handle close, resulting in a use-after-free if we dereference the
    object after dropping the handle's reference.  For that reason, dropping
    the handle's reference must be done *after* we are done dereferencing
    the object.
    
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Reviewed-by: Chia-I Wu <olvaffe@gmail.com>
    Fixes: 62fb7a5e1096 ("virtio-gpu: add 3d/virgl support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Osipenko <dmitry.osipenko@collabora.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221216233355.542197-2-robdclark@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 798dfeeae33deefb60ddcb522214480b885f175d
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Mon Jan 9 11:51:20 2023 +0100

    s390/percpu: add READ_ONCE() to arch_this_cpu_to_op_simple()
    
    commit e3f360db08d55a14112bd27454e616a24296a8b0 upstream.
    
    Make sure that *ptr__ within arch_this_cpu_to_op_simple() is only
    dereferenced once by using READ_ONCE(). Otherwise the compiler could
    generate incorrect code.
    
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a400593eb373cbd5301178321dbcec94512ae8f1
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Thu Jan 5 15:44:20 2023 +0100

    s390/cpum_sf: add READ_ONCE() semantics to compare and swap loops
    
    commit 82d3edb50a11bf3c5ef63294d5358ba230181413 upstream.
    
    The current cmpxchg_double() loops within the perf hw sampling code do not
    have READ_ONCE() semantics to read the old value from memory. This allows
    the compiler to generate code which reads the "old" value several times
    from memory, which again allows for inconsistencies.
    
    For example:
    
            /* Reset trailer (using compare-double-and-swap) */
            do {
                    te_flags = te->flags & ~SDB_TE_BUFFER_FULL_MASK;
                    te_flags |= SDB_TE_ALERT_REQ_MASK;
            } while (!cmpxchg_double(&te->flags, &te->overflow,
                     te->flags, te->overflow,
                     te_flags, 0ULL));
    
    The compiler could generate code where te->flags used within the
    cmpxchg_double() call may be refetched from memory and which is not
    necessarily identical to the previous read version which was used to
    generate te_flags. Which in turn means that an incorrect update could
    happen.
    
    Fix this by adding READ_ONCE() semantics to all cmpxchg_double()
    loops. Given that READ_ONCE() cannot generate code on s390 which atomically
    reads 16 bytes, use a private compare-and-swap-double implementation to
    achieve that.
    
    Also replace cmpxchg_double() with the private implementation to be able to
    re-use the old value within the loops.
    
    As a side effect this converts the whole code to only use bit fields
    to read and modify bits within the hws trailer header.
    
    Reported-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Acked-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Acked-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Reviewed-by: Thomas Richter <tmricht@linux.ibm.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/linux-s390/Y71QJBhNTIatvxUT@osiris/T/#ma14e2a5f7aa8ed4b94b6f9576799b3ad9c60f333
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4fa65960a9d0cb87a1102d47145675ceed7a4e6
Author: Brian Norris <computersforpeace@gmail.com>
Date:   Fri Dec 30 22:15:45 2022 -0800

    ASoC: qcom: lpass-cpu: Fix fallback SD line index handling
    
    commit 000bca8d706d1bf7cca01af75787247c5a2fdedf upstream.
    
    These indices should reference the ID placed within the dai_driver
    array, not the indices of the array itself.
    
    This fixes commit 4ff028f6c108 ("ASoC: qcom: lpass-cpu: Make I2S SD
    lines configurable"), which among others, broke IPQ8064 audio
    (sound/soc/qcom/lpass-ipq806x.c) because it uses ID 4 but we'd stop
    initializing the mi2s_playback_sd_mode and mi2s_capture_sd_mode arrays
    at ID 0.
    
    Fixes: 4ff028f6c108 ("ASoC: qcom: lpass-cpu: Make I2S SD lines configurable")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>
    Reviewed-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20221231061545.2110253-1-computersforpeace@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8400b91c11db9edeb32979a6e9ef3120c91a8db9
Author: Alexander Egorenkov <egorenar@linux.ibm.com>
Date:   Mon Nov 14 11:40:08 2022 +0100

    s390/kexec: fix ipl report address for kdump
    
    commit c2337a40e04dde1692b5b0a46ecc59f89aaba8a1 upstream.
    
    This commit addresses the following erroneous situation with file-based
    kdump executed on a system with a valid IPL report.
    
    On s390, a kdump kernel, its initrd and IPL report if present are loaded
    into a special and reserved on boot memory region - crashkernel. When
    a system crashes and kdump was activated before, the purgatory code
    is entered first which swaps the crashkernel and [0 - crashkernel size]
    memory regions. Only after that the kdump kernel is entered. For this
    reason, the pointer to an IPL report in lowcore must point to the IPL report
    after the swap and not to the address of the IPL report that was located in
    crashkernel memory region before the swap. Failing to do so, makes the
    kdump's decompressor try to read memory from the crashkernel memory region
    which already contains the production's kernel memory.
    
    The situation described above caused spontaneous kdump failures/hangs
    on systems where the Secure IPL is activated because on such systems
    an IPL report is always present. In that case kdump's decompressor tried
    to parse an IPL report which frequently lead to illegal memory accesses
    because an IPL report contains addresses to various data.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 99feaa717e55 ("s390/kexec_file: Create ipl report and pass to next kernel")
    Reviewed-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c07e0babd1df4148ba7eb699376fdc4cbf215e56
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Jan 10 20:56:59 2023 +0200

    perf auxtrace: Fix address filter duplicate symbol selection
    
    commit cf129830ee820f7fc90b98df193cd49d49344d09 upstream.
    
    When a match has been made to the nth duplicate symbol, return
    success not error.
    
    Example:
    
      Before:
    
        $ cat file.c
        cat: file.c: No such file or directory
        $ cat file1.c
        #include <stdio.h>
    
        static void func(void)
        {
                printf("First func\n");
        }
    
        void other(void);
    
        int main()
        {
                func();
                other();
                return 0;
        }
        $ cat file2.c
        #include <stdio.h>
    
        static void func(void)
        {
                printf("Second func\n");
        }
    
        void other(void)
        {
                func();
        }
    
        $ gcc -Wall -Wextra -o test file1.c file2.c
        $ perf record -e intel_pt//u --filter 'filter func @ ./test' -- ./test
        Multiple symbols with name 'func'
        #1      0x1149  l       func
                        which is near           main
        #2      0x1179  l       func
                        which is near           other
        Disambiguate symbol name by inserting #n after the name e.g. func #2
        Or select a global symbol by inserting #0 or #g or #G
        Failed to parse address filter: 'filter func @ ./test'
        Filter format is: filter|start|stop|tracestop <start symbol or address> [/ <end symbol or size>] [@<file name>]
        Where multiple filters are separated by space or comma.
        $ perf record -e intel_pt//u --filter 'filter func #2 @ ./test' -- ./test
        Failed to parse address filter: 'filter func #2 @ ./test'
        Filter format is: filter|start|stop|tracestop <start symbol or address> [/ <end symbol or size>] [@<file name>]
        Where multiple filters are separated by space or comma.
    
      After:
    
        $ perf record -e intel_pt//u --filter 'filter func #2 @ ./test' -- ./test
        First func
        Second func
        [ perf record: Woken up 1 times to write data ]
        [ perf record: Captured and wrote 0.016 MB perf.data ]
        $ perf script --itrace=b -Ftime,flags,ip,sym,addr --ns
        1231062.526977619:   tr strt                               0 [unknown] =>     558495708179 func
        1231062.526977619:   tr end  call               558495708188 func =>     558495708050 _init
        1231062.526979286:   tr strt                               0 [unknown] =>     55849570818d func
        1231062.526979286:   tr end  return             55849570818f func =>     55849570819d other
    
    Fixes: 1b36c03e356936d6 ("perf record: Add support for using symbols in address filters")
    Reported-by: Dmitrii Dolgov <9erthalion6@gmail.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Dmitry Dolgov <9erthalion6@gmail.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230110185659.15979-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e81d82da619adbfafc0b152af504d9aa153702c4
Author: Noor Azura Ahmad Tarmizi <noor.azura.ahmad.tarmizi@intel.com>
Date:   Wed Jan 11 13:02:00 2023 +0800

    net: stmmac: add aux timestamps fifo clearance wait
    
    commit ae9dcb91c6069e20b3b9505d79cbc89fd6e086f5 upstream.
    
    Add timeout polling wait for auxiliary timestamps snapshot FIFO clear bit
    (ATSFC) to clear. This is to ensure no residue fifo value is being read
    erroneously.
    
    Fixes: f4da56529da6 ("net: stmmac: Add support for external trigger timestamping")
    Cc: <stable@vger.kernel.org> # 5.10.x
    Signed-off-by: Noor Azura Ahmad Tarmizi <noor.azura.ahmad.tarmizi@intel.com>
    Link: https://lore.kernel.org/r/20230111050200.2130-1-noor.azura.ahmad.tarmizi@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44167b74a8a370b316e1a861ffb7bd44a763304f
Author: Jonathan Corbet <corbet@lwn.net>
Date:   Wed Jan 4 10:47:39 2023 -0700

    docs: Fix the docs build with Sphinx 6.0
    
    commit 0283189e8f3d0917e2ac399688df85211f48447b upstream.
    
    Sphinx 6.0 removed the execfile_() function, which we use as part of the
    configuration process.  They *did* warn us...  Just open-code the
    functionality as is done in Sphinx itself.
    
    Tested (using SPHINX_CONF, since this code is only executed with an
    alternative config file) on various Sphinx versions from 2.5 through 6.0.
    
    Reported-by: Martin Liška <mliska@suse.cz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24176bf2a1452d58b8677982a8b3a72f01d3e8ad
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Jan 9 10:44:31 2023 +0100

    efi: tpm: Avoid READ_ONCE() for accessing the event log
    
    commit d3f450533bbcb6dd4d7d59cadc9b61b7321e4ac1 upstream.
    
    Nathan reports that recent kernels built with LTO will crash when doing
    EFI boot using Fedora's GRUB and SHIM. The culprit turns out to be a
    misaligned load from the TPM event log, which is annotated with
    READ_ONCE(), and under LTO, this gets translated into a LDAR instruction
    which does not tolerate misaligned accesses.
    
    Interestingly, this does not happen when booting the same kernel
    straight from the UEFI shell, and so the fact that the event log may
    appear misaligned in memory may be caused by a bug in GRUB or SHIM.
    
    However, using READ_ONCE() to access firmware tables is slightly unusual
    in any case, and here, we only need to ensure that 'event' is not
    dereferenced again after it gets unmapped, but this is already taken
    care of by the implicit barrier() semantics of the early_memunmap()
    call.
    
    Cc: <stable@vger.kernel.org>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Jarkko Sakkinen <jarkko@kernel.org>
    Cc: Matthew Garrett <mjg59@srcf.ucam.org>
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1782
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01b966b14c6e672da363e4e14d8d031bf6587501
Author: Jinrong Liang <cloudliang@tencent.com>
Date:   Tue Aug 2 15:12:40 2022 +0800

    selftests: kvm: Fix a compile error in selftests/kvm/rseq_test.c
    
    commit 561cafebb2cf97b0927b4fb0eba22de6200f682e upstream.
    
    The following warning appears when executing:
            make -C tools/testing/selftests/kvm
    
    rseq_test.c: In function ‘main’:
    rseq_test.c:237:33: warning: implicit declaration of function ‘gettid’; did you mean ‘getgid’? [-Wimplicit-function-declaration]
              (void *)(unsigned long)gettid());
                                     ^~~~~~
                                     getgid
    /usr/bin/ld: /tmp/ccr5mMko.o: in function `main':
    ../kvm/tools/testing/selftests/kvm/rseq_test.c:237: undefined reference to `gettid'
    collect2: error: ld returned 1 exit status
    make: *** [../lib.mk:173: ../kvm/tools/testing/selftests/kvm/rseq_test] Error 1
    
    Use the more compatible syscall(SYS_gettid) instead of gettid() to fix it.
    More subsequent reuse may cause it to be wrapped in a lib file.
    
    Signed-off-by: Jinrong Liang <cloudliang@tencent.com>
    Message-Id: <20220802071240.84626-1-cloudliang@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c773ebe11c3917536720580f642c301c269a0810
Author: Denis Nikitin <denik@chromium.org>
Date:   Fri Oct 14 11:45:32 2022 -0700

    KVM: arm64: nvhe: Fix build with profile optimization
    
    commit bde971a83bbff78561458ded236605a365411b87 upstream.
    
    Kernel build with clang and KCFLAGS=-fprofile-sample-use=<profile> fails with:
    
    error: arch/arm64/kvm/hyp/nvhe/kvm_nvhe.tmp.o: Unexpected SHT_REL
    section ".rel.llvm.call-graph-profile"
    
    Starting from 13.0.0 llvm can generate SHT_REL section, see
    https://reviews.llvm.org/rGca3bdb57fa1ac98b711a735de048c12b5fdd8086.
    gen-hyprel does not support SHT_REL relocation section.
    
    Filter out profile use flags to fix the build with profile optimization.
    
    Signed-off-by: Denis Nikitin <denik@chromium.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221014184532.3153551-1-denik@chromium.org
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1d6a72fc810b25f644a9a4b4a3dc03be1868263
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Dec 20 14:03:52 2022 +0000

    KVM: arm64: Fix S1PTW handling on RO memslots
    
    commit 406504c7b0405d74d74c15a667cd4c4620c3e7a9 upstream.
    
    A recent development on the EFI front has resulted in guests having
    their page tables baked in the firmware binary, and mapped into the
    IPA space as part of a read-only memslot. Not only is this legitimate,
    but it also results in added security, so thumbs up.
    
    It is possible to take an S1PTW translation fault if the S1 PTs are
    unmapped at stage-2. However, KVM unconditionally treats S1PTW as a
    write to correctly handle hardware AF/DB updates to the S1 PTs.
    Furthermore, KVM injects an exception into the guest for S1PTW writes.
    In the aforementioned case this results in the guest taking an abort
    it won't recover from, as the S1 PTs mapping the vectors suffer from
    the same problem.
    
    So clearly our handling is... wrong.
    
    Instead, switch to a two-pronged approach:
    
    - On S1PTW translation fault, handle the fault as a read
    
    - On S1PTW permission fault, handle the fault as a write
    
    This is of no consequence to SW that *writes* to its PTs (the write
    will trigger a non-S1PTW fault), and SW that uses RO PTs will not
    use HW-assisted AF/DB anyway, as that'd be wrong.
    
    Only in the case described in c4ad98e4b72c ("KVM: arm64: Assume write
    fault on S1PTW permission fault on instruction fetch") do we end-up
    with two back-to-back faults (page being evicted and faulted back).
    I don't think this is a case worth optimising for.
    
    Fixes: c4ad98e4b72c ("KVM: arm64: Assume write fault on S1PTW permission fault on instruction fetch")
    Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
    Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
    Regression-tested-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e04e6cd8830ff69158dda315a76822926eb5d962
Author: Luka Guzenko <l.guzenko@web.de>
Date:   Tue Jan 10 21:25:14 2023 +0100

    ALSA: hda/realtek: Enable mute/micmute LEDs on HP Spectre x360 13-aw0xxx
    
    commit ca88eeb308a221c2dcd4a64031d2e5fcd3db9eaa upstream.
    
    The HP Spectre x360 13-aw0xxx devices use the ALC285 codec with GPIO 0x04
    controlling the micmute LED and COEF 0x0b index 8 controlling the mute LED.
    A quirk was added to make these work as well as a fixup.
    
    Signed-off-by: Luka Guzenko <l.guzenko@web.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230110202514.2792-1-l.guzenko@web.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b983c9a9714e6ee29098563a82a90774f9db12d5
Author: Yuchi Yang <yangyuchi66@gmail.com>
Date:   Fri Dec 30 15:22:25 2022 +0800

    ALSA: hda/realtek - Turn on power early
    
    commit 1f680609bf1beac20e2a31ddcb1b88874123c39f upstream.
    
    Turn on power early to avoid wrong state for power relation register.
    This can earlier update JD state when resume back.
    
    Signed-off-by: Yuchi Yang <yangyuchi66@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/e35d8f4fa18f4448a2315cc7d4a3715f@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ab3696881ca096939db8bfabdc98d0808bafdb2
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Mon Jan 9 16:12:49 2023 +0100

    ALSA: control-led: use strscpy in set_led_id()
    
    commit 70051cffb31b5ee09096351c3b41fcae6f89de31 upstream.
    
    The use of strncpy() in the set_led_id() was incorrect.
    The len variable should use 'min(sizeof(buf2) - 1, count)'
    expression.
    
    Use strscpy() function to simplify things and handle the error gracefully.
    
    Fixes: a135dfb5de15 ("ALSA: led control - add sysfs kcontrol LED marking layer")
    Reported-by: yang.yang29@zte.com.cn
    Link: https://lore.kernel.org/alsa-devel/202301091945513559977@zte.com.cn/
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8acfe2c6fb99f9375a9325807a179cd8c32e6e3
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Jan 11 17:07:33 2023 +0100

    netfilter: nft_payload: incorrect arithmetics when fetching VLAN header bits
    
    commit 696e1a48b1a1b01edad542a1ef293665864a4dd0 upstream.
    
    If the offset + length goes over the ethernet + vlan header, then the
    length is adjusted to copy the bytes that are within the boundaries of
    the vlan_ethhdr scratchpad area. The remaining bytes beyond ethernet +
    vlan header are copied directly from the skbuff data area.
    
    Fix incorrect arithmetic operator: subtract, not add, the size of the
    vlan header in case of double-tagged packets to adjust the length
    accordingly to address CVE-2023-0179.
    
    Reported-by: Davide Ornaghi <d.ornaghi97@gmail.com>
    Fixes: f6ae9f120dad ("netfilter: nft_payload: add C-VLAN support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

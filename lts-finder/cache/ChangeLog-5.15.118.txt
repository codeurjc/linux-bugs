commit f67653019430833d5003f16817d7fa85272a6a76
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 21 15:59:19 2023 +0200

    Linux 5.15.118
    
    Link: https://lore.kernel.org/r/20230619102141.541044823@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5bf1f7d1fc8b0163ac6f054c2a9a8690b6b8f6a
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Fri May 26 11:13:32 2023 +0900

    nilfs2: reject devices with insufficient block count
    
    commit 92c5d1b860e9581d64baca76779576c0ab0d943d upstream.
    
    The current sanity check for nilfs2 geometry information lacks checks for
    the number of segments stored in superblocks, so even for device images
    that have been destructively truncated or have an unusually high number of
    segments, the mount operation may succeed.
    
    This causes out-of-bounds block I/O on file system block reads or log
    writes to the segments, the latter in particular causing
    "a_ops->writepages" to repeatedly fail, resulting in sync_inodes_sb() to
    hang.
    
    Fix this issue by checking the number of segments stored in the superblock
    and avoiding mounting devices that can cause out-of-bounds accesses.  To
    eliminate the possibility of overflow when calculating the number of
    blocks required for the device from the number of segments, this also adds
    a helper function to calculate the upper bound on the number of segments
    and inserts a check using it.
    
    Link: https://lkml.kernel.org/r/20230526021332.3431-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+7d50f1e54a12ba3aeae2@syzkaller.appspotmail.com
      Link: https://syzkaller.appspot.com/bug?extid=7d50f1e54a12ba3aeae2
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bc9231afc642752a20590cb14965929e769e0e0
Author: Christian Loehle <CLoehle@hyperstone.com>
Date:   Wed Apr 26 16:59:39 2023 +0000

    mmc: block: ensure error propagation for non-blk
    
    commit 003fb0a51162d940f25fc35e70b0996a12c9e08a upstream.
    
    Requests to the mmc layer usually come through a block device IO.
    The exceptions are the ioctl interface, RPMB chardev ioctl
    and debugfs, which issue their own blk_mq requests through
    blk_execute_rq and do not query the BLK_STS error but the
    mmcblk-internal drv_op_result. This patch ensures that drv_op_result
    defaults to an error and has to be overwritten by the operation
    to be considered successful.
    
    The behavior leads to a bug where the request never propagates
    the error, e.g. by directly erroring out at mmc_blk_mq_issue_rq if
    mmc_blk_part_switch fails. The ioctl caller of the rpmb chardev then
    can never see an error (BLK_STS_IOERR, but drv_op_result is unchanged)
    and thus may assume that their call executed successfully when it did not.
    
    While always checking the blk_execute_rq return value would be
    advised, let's eliminate the error by always setting
    drv_op_result as -EIO to be overwritten on success (or other error)
    
    Fixes: 614f0388f580 ("mmc: block: move single ioctl() commands to block requests")
    Signed-off-by: Christian Loehle <cloehle@hyperstone.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/59c17ada35664b818b7bd83752119b2d@hyperstone.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Christian Loehle <cloehle@hyperstone.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b7b50d4eb1a24103dd1457c3c42aefda637dc50
Author: Frank Rowand <frowand.list@gmail.com>
Date:   Mon May 2 13:17:40 2022 -0500

    of: overlay: add entry to of_overlay_action_name[]
    
    commit 1ac17586c950a2c129393f8a92901a2b357acf24 upstream.
    
    The values of enum of_overlay_notify_action are used to index into
    array of_overlay_action_name.  Add an entry to of_overlay_action_name
    for the value recently added to of_overlay_notify_action.
    
    Array of_overlay_action_name[] is moved into include/linux/of.h
    adjacent to enum of_overlay_notify_action to make the connection
    between the two more obvious if either is modified in the future.
    
    The only use of of_overlay_action_name is for error reporting in
    overlay_notify().  All callers of overlay_notify() report the same
    error, but with fewer details.  Remove the redundant error reports
    in the callers.
    
    Fixes: 067c098766c6 ("of: overlay: rework overlay apply and remove kfree()s")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20220502181742.1402826-2-frowand.list@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84770cc54eff75c05d0c32b79b56dbdca0878455
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed Mar 8 11:23:13 2023 +0200

    neighbour: delete neigh_lookup_nodev as not used
    
    commit 76b9bf965c98c9b53ef7420b3b11438dbd764f92 upstream.
    
    neigh_lookup_nodev isn't used in the kernel after removal
    of DECnet. So let's remove it.
    
    Fixes: 1202cdd66531 ("Remove DECnet support from kernel")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/eb5656200d7964b2d177a36b77efa3c597d6d72d.1678267343.git.leonro@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41806518254c680a9b07660a8f48233f9dd1812e
Author: Guillaume Nault <gnault@redhat.com>
Date:   Fri Sep 30 16:37:30 2022 +0200

    net: Remove DECnet leftovers from flow.h.
    
    commit 9bc61c04ff6cce6a3756b86e6b34914f7b39d734 upstream.
    
    DECnet was removed by commit 1202cdd66531 ("Remove DECnet support from
    kernel"). Let's also revome its flow structure.
    
    Compile-tested only (allmodconfig).
    
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c39a2414a238ede51cb1435a6b3fa8d7099c338
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Sep 22 16:38:57 2022 +0800

    net: Remove unused inline function dst_hold_and_use()
    
    commit 0b81882ddf8ac2743f657afb001beec7fc3929af upstream.
    
    All uses of dst_hold_and_use() have
    been removed since commit 1202cdd66531 ("Remove DECnet support
    from kernel"), so remove it.
    
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb76281b6e6127a3995772fff74efa493f229c7e
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Thu Sep 22 16:38:55 2022 +0800

    neighbour: Remove unused inline function neigh_key_eq16()
    
    commit c8f01a4a54473f88f8cc0d9046ec9eb5a99815d5 upstream.
    
    All uses of neigh_key_eq16() have
    been removed since commit 1202cdd66531 ("Remove DECnet support
    from kernel"), so remove it.
    
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67866cad7624c2ab651b1c42836c2ee249d80d47
Author: Ziwei Dai <ziwei.dai@unisoc.com>
Date:   Fri Mar 31 20:42:09 2023 +0800

    rcu/kvfree: Avoid freeing new kfree_rcu() memory after old grace period
    
    commit 5da7cb193db32da783a3f3e77d8b639989321d48 upstream.
    
    Memory passed to kvfree_rcu() that is to be freed is tracked by a
    per-CPU kfree_rcu_cpu structure, which in turn contains pointers
    to kvfree_rcu_bulk_data structures that contain pointers to memory
    that has not yet been handed to RCU, along with an kfree_rcu_cpu_work
    structure that tracks the memory that has already been handed to RCU.
    These structures track three categories of memory: (1) Memory for
    kfree(), (2) Memory for kvfree(), and (3) Memory for both that arrived
    during an OOM episode.  The first two categories are tracked in a
    cache-friendly manner involving a dynamically allocated page of pointers
    (the aforementioned kvfree_rcu_bulk_data structures), while the third
    uses a simple (but decidedly cache-unfriendly) linked list through the
    rcu_head structures in each block of memory.
    
    On a given CPU, these three categories are handled as a unit, with that
    CPU's kfree_rcu_cpu_work structure having one pointer for each of the
    three categories.  Clearly, new memory for a given category cannot be
    placed in the corresponding kfree_rcu_cpu_work structure until any old
    memory has had its grace period elapse and thus has been removed.  And
    the kfree_rcu_monitor() function does in fact check for this.
    
    Except that the kfree_rcu_monitor() function checks these pointers one
    at a time.  This means that if the previous kfree_rcu() memory passed
    to RCU had only category 1 and the current one has only category 2, the
    kfree_rcu_monitor() function will send that current category-2 memory
    along immediately.  This can result in memory being freed too soon,
    that is, out from under unsuspecting RCU readers.
    
    To see this, consider the following sequence of events, in which:
    
    o       Task A on CPU 0 calls rcu_read_lock(), then uses "from_cset",
            then is preempted.
    
    o       CPU 1 calls kfree_rcu(cset, rcu_head) in order to free "from_cset"
            after a later grace period.  Except that "from_cset" is freed
            right after the previous grace period ended, so that "from_cset"
            is immediately freed.  Task A resumes and references "from_cset"'s
            member, after which nothing good happens.
    
    In full detail:
    
    CPU 0                                   CPU 1
    ----------------------                  ----------------------
    count_memcg_event_mm()
    |rcu_read_lock()  <---
    |mem_cgroup_from_task()
     |// css_set_ptr is the "from_cset" mentioned on CPU 1
     |css_set_ptr = rcu_dereference((task)->cgroups)
     |// Hard irq comes, current task is scheduled out.
    
                                            cgroup_attach_task()
                                            |cgroup_migrate()
                                            |cgroup_migrate_execute()
                                            |css_set_move_task(task, from_cset, to_cset, true)
                                            |cgroup_move_task(task, to_cset)
                                            |rcu_assign_pointer(.., to_cset)
                                            |...
                                            |cgroup_migrate_finish()
                                            |put_css_set_locked(from_cset)
                                            |from_cset->refcount return 0
                                            |kfree_rcu(cset, rcu_head) // free from_cset after new gp
                                            |add_ptr_to_bulk_krc_lock()
                                            |schedule_delayed_work(&krcp->monitor_work, ..)
    
                                            kfree_rcu_monitor()
                                            |krcp->bulk_head[0]'s work attached to krwp->bulk_head_free[]
                                            |queue_rcu_work(system_wq, &krwp->rcu_work)
                                            |if rwork->rcu.work is not in WORK_STRUCT_PENDING_BIT state,
                                            |call_rcu(&rwork->rcu, rcu_work_rcufn) <--- request new gp
    
                                            // There is a perious call_rcu(.., rcu_work_rcufn)
                                            // gp end, rcu_work_rcufn() is called.
                                            rcu_work_rcufn()
                                            |__queue_work(.., rwork->wq, &rwork->work);
    
                                            |kfree_rcu_work()
                                            |krwp->bulk_head_free[0] bulk is freed before new gp end!!!
                                            |The "from_cset" is freed before new gp end.
    
    // the task resumes some time later.
     |css_set_ptr->subsys[(subsys_id) <--- Caused kernel crash, because css_set_ptr is freed.
    
    This commit therefore causes kfree_rcu_monitor() to refrain from moving
    kfree_rcu() memory to the kfree_rcu_cpu_work structure until the RCU
    grace period has completed for all three categories.
    
    v2: Use helper function instead of inserted code block at kfree_rcu_monitor().
    
    Fixes: 34c881745549 ("rcu: Support kfree_bulk() interface in kfree_rcu()")
    Fixes: 5f3c8d620447 ("rcu/tree: Maintain separate array for vmalloc ptrs")
    Reported-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Signed-off-by: Ziwei Dai <ziwei.dai@unisoc.com>
    Reviewed-by: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Tested-by: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c91ed3a5c2ab82c99ba07b99a569a6247ad47935
Author: John Sperbeck <jsperbeck@google.com>
Date:   Sun May 21 19:29:53 2023 +0000

    cgroup: always put cset in cgroup_css_set_put_fork
    
    commit 2bd110339288c18823dcace602b63b0d8627e520 upstream.
    
    A successful call to cgroup_css_set_fork() will always have taken
    a ref on kargs->cset (regardless of CLONE_INTO_CGROUP), so always
    do a corresponding put in cgroup_css_set_put_fork().
    
    Without this, a cset and its contained css structures will be
    leaked for some fork failures.  The following script reproduces
    the leak for a fork failure due to exceeding pids.max in the
    pids controller.  A similar thing can happen if we jump to the
    bad_fork_cancel_cgroup label in copy_process().
    
    [ -z "$1" ] && echo "Usage $0 pids-root" && exit 1
    PID_ROOT=$1
    CGROUP=$PID_ROOT/foo
    
    [ -e $CGROUP ] && rmdir -f $CGROUP
    mkdir $CGROUP
    echo 5 > $CGROUP/pids.max
    echo $$ > $CGROUP/cgroup.procs
    
    fork_bomb()
    {
            set -e
            for i in $(seq 10); do
                    /bin/sleep 3600 &
            done
    }
    
    (fork_bomb) &
    wait
    echo $$ > $PID_ROOT/cgroup.procs
    kill $(cat $CGROUP/cgroup.procs)
    rmdir $CGROUP
    
    Fixes: ef2c41cf38a7 ("clone3: allow spawning processes into cgroups")
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    [TJM: This backport accommodates the lack of cgroup_unlock]
    Signed-off-by: T.J. Mercier <tjmercier@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33b801be2de15f293763aab16d516a9ccd38c7d5
Author: David Howells <dhowells@redhat.com>
Date:   Fri Jun 16 22:39:39 2023 +0100

    afs: Fix vlserver probe RTT handling
    
    [ Upstream commit ba00b190670809c1a89326d80de96d714f6004f2 ]
    
    In the same spirit as commit ca57f02295f1 ("afs: Fix fileserver probe
    RTT handling"), don't rule out using a vlserver just because there
    haven't been enough packets yet to calculate a real rtt.  Always set the
    server's probe rtt from the estimate provided by rxrpc_kernel_get_srtt,
    which is capped at 1 second.
    
    This could lead to EDESTADDRREQ errors when accessing a cell for the
    first time, even though the vl servers are known and have responded to a
    probe.
    
    Fixes: 1d4adfaf6574 ("rxrpc: Make rxrpc_kernel_get_srtt() indicate validity")
    Signed-off-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: linux-afs@lists.infradead.org
    Link: http://lists.infradead.org/pipermail/linux-afs/2023-June/006746.html
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f824bcc3e14bb1caa957477f55f2416bb2ff807a
Author: Alex Maftei <alex.maftei@amd.com>
Date:   Thu Jun 15 09:34:04 2023 +0100

    selftests/ptp: Fix timestamp printf format for PTP_SYS_OFFSET
    
    [ Upstream commit 76a4c8b82938bc5020b67663db41f451684bf327 ]
    
    Previously, timestamps were printed using "%lld.%u" which is incorrect
    for nanosecond values lower than 100,000,000 as they're fractional
    digits, therefore leading zeros are meaningful.
    
    This patch changes the format strings to "%lld.%09u" in order to add
    leading zeros to the nanosecond value.
    
    Fixes: 568ebc5985f5 ("ptp: add the PTP_SYS_OFFSET ioctl to the testptp program")
    Fixes: 4ec54f95736f ("ptp: Fix compiler warnings in the testptp utility")
    Fixes: 6ab0e475f1f3 ("Documentation: fix misc. warnings")
    Signed-off-by: Alex Maftei <alex.maftei@amd.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Link: https://lore.kernel.org/r/20230615083404.57112-1-alex.maftei@amd.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2077c7dbfe29f07fcdf54e73aad9607a2e0b2b36
Author: Lin Ma <linma@zju.edu.cn>
Date:   Wed Jun 14 20:06:04 2023 +0800

    net: tipc: resize nlattr array to correct size
    
    [ Upstream commit 44194cb1b6045dea33ae9a0d54fb7e7cd93a2e09 ]
    
    According to nla_parse_nested_deprecated(), the tb[] is supposed to the
    destination array with maxtype+1 elements. In current
    tipc_nl_media_get() and __tipc_nl_media_set(), a larger array is used
    which is unnecessary. This patch resize them to a proper size.
    
    Fixes: 1e55417d8fc6 ("tipc: add media set to new netlink api")
    Fixes: 46f15c6794fb ("tipc: add media get/dump to new netlink api")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Link: https://lore.kernel.org/r/20230614120604.1196377-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f734e16ee17fab584d48ab8e8fd5f86255789ac1
Author: Li Lingfeng <lilingfeng3@huawei.com>
Date:   Thu Jun 1 14:14:23 2023 +0800

    dm: don't lock fs when the map is NULL during suspend or resume
    
    [ Upstream commit 2760904d895279f87196f0fa9ec570c79fe6a2e4 ]
    
    As described in commit 38d11da522aa ("dm: don't lock fs when the map is
    NULL in process of resume"), a deadlock may be triggered between
    do_resume() and do_mount().
    
    This commit preserves the fix from commit 38d11da522aa but moves it to
    where it also serves to fix a similar deadlock between do_suspend()
    and do_mount().  It does so, if the active map is NULL, by clearing
    DM_SUSPEND_LOCKFS_FLAG in dm_suspend() which is called by both
    do_suspend() and do_resume().
    
    Fixes: 38d11da522aa ("dm: don't lock fs when the map is NULL in process of resume")
    Signed-off-by: Li Lingfeng <lilingfeng3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a8179f6a345d34d072791dba4edd29abe14ea5d
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jun 14 16:18:02 2023 +0000

    net: lapbether: only support ethernet devices
    
    [ Upstream commit 9eed321cde22fc1afd76eac563ce19d899e0d6b2 ]
    
    It probbaly makes no sense to support arbitrary network devices
    for lapbether.
    
    syzbot reported:
    
    skbuff: skb_under_panic: text:ffff80008934c100 len:44 put:40 head:ffff0000d18dd200 data:ffff0000d18dd1ea tail:0x16 end:0x140 dev:bond1
    kernel BUG at net/core/skbuff.c:200 !
    Internal error: Oops - BUG: 00000000f2000800 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 0 PID: 5643 Comm: dhcpcd Not tainted 6.4.0-rc5-syzkaller-g4641cff8e810 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/25/2023
    pstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : skb_panic net/core/skbuff.c:196 [inline]
    pc : skb_under_panic+0x13c/0x140 net/core/skbuff.c:210
    lr : skb_panic net/core/skbuff.c:196 [inline]
    lr : skb_under_panic+0x13c/0x140 net/core/skbuff.c:210
    sp : ffff8000973b7260
    x29: ffff8000973b7270 x28: ffff8000973b7360 x27: dfff800000000000
    x26: ffff0000d85d8150 x25: 0000000000000016 x24: ffff0000d18dd1ea
    x23: ffff0000d18dd200 x22: 000000000000002c x21: 0000000000000140
    x20: 0000000000000028 x19: ffff80008934c100 x18: ffff8000973b68a0
    x17: 0000000000000000 x16: ffff80008a43bfbc x15: 0000000000000202
    x14: 0000000000000000 x13: 0000000000000001 x12: 0000000000000001
    x11: 0000000000000201 x10: 0000000000000000 x9 : f22f7eb937cced00
    x8 : f22f7eb937cced00 x7 : 0000000000000001 x6 : 0000000000000001
    x5 : ffff8000973b6b78 x4 : ffff80008df9ee80 x3 : ffff8000805974f4
    x2 : 0000000000000001 x1 : 0000000100000201 x0 : 0000000000000086
    Call trace:
    skb_panic net/core/skbuff.c:196 [inline]
    skb_under_panic+0x13c/0x140 net/core/skbuff.c:210
    skb_push+0xf0/0x108 net/core/skbuff.c:2409
    ip6gre_header+0xbc/0x738 net/ipv6/ip6_gre.c:1383
    dev_hard_header include/linux/netdevice.h:3137 [inline]
    lapbeth_data_transmit+0x1c4/0x298 drivers/net/wan/lapbether.c:257
    lapb_data_transmit+0x8c/0xb0 net/lapb/lapb_iface.c:447
    lapb_transmit_buffer+0x178/0x204 net/lapb/lapb_out.c:149
    lapb_send_control+0x220/0x320 net/lapb/lapb_subr.c:251
    lapb_establish_data_link+0x94/0xec
    lapb_device_event+0x348/0x4e0
    notifier_call_chain+0x1a4/0x510 kernel/notifier.c:93
    raw_notifier_call_chain+0x3c/0x50 kernel/notifier.c:461
    __dev_notify_flags+0x2bc/0x544
    dev_change_flags+0xd0/0x15c net/core/dev.c:8643
    devinet_ioctl+0x858/0x17e4 net/ipv4/devinet.c:1150
    inet_ioctl+0x2ac/0x4d8 net/ipv4/af_inet.c:979
    sock_do_ioctl+0x134/0x2dc net/socket.c:1201
    sock_ioctl+0x4ec/0x858 net/socket.c:1318
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:870 [inline]
    __se_sys_ioctl fs/ioctl.c:856 [inline]
    __arm64_sys_ioctl+0x14c/0x1c8 fs/ioctl.c:856
    __invoke_syscall arch/arm64/kernel/syscall.c:38 [inline]
    invoke_syscall+0x98/0x2c0 arch/arm64/kernel/syscall.c:52
    el0_svc_common+0x138/0x244 arch/arm64/kernel/syscall.c:142
    do_el0_svc+0x64/0x198 arch/arm64/kernel/syscall.c:191
    el0_svc+0x4c/0x160 arch/arm64/kernel/entry-common.c:647
    el0t_64_sync_handler+0x84/0xfc arch/arm64/kernel/entry-common.c:665
    el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:591
    Code: aa1803e6 aa1903e7 a90023f5 947730f5 (d4210000)
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 052417e8b3ac9193d53ebee870b2d02712878335
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Mon Jun 12 11:34:26 2023 +0200

    net/sched: cls_api: Fix lockup on flushing explicitly created chain
    
    [ Upstream commit c9a82bec02c339cdda99b37c5e62b3b71fc4209c ]
    
    Mingshuai Ren reports:
    
    When a new chain is added by using tc, one soft lockup alarm will be
     generated after delete the prio 0 filter of the chain. To reproduce
     the problem, perform the following steps:
    (1) tc qdisc add dev eth0 root handle 1: htb default 1
    (2) tc chain add dev eth0
    (3) tc filter del dev eth0 chain 0 parent 1: prio 0
    (4) tc filter add dev eth0 chain 0 parent 1:
    
    Fix the issue by accounting for additional reference to chains that are
    explicitly created by RTM_NEWCHAIN message as opposed to implicitly by
    RTM_NEWTFILTER message.
    
    Fixes: 726d061286ce ("net: sched: prevent insertion of new classifiers during chain flush")
    Reported-by: Mingshuai Ren <renmingshuai@huawei.com>
    Closes: https://lore.kernel.org/lkml/87legswvi3.fsf@nvidia.com/T/
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Link: https://lore.kernel.org/r/20230612093426.2867183-1-vladbu@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0cb9d453fd1ede30edb54e5cbe61226fbe8eadb
Author: Fabio M. De Francesco <fmdefrancesco@gmail.com>
Date:   Wed Jun 14 12:02:55 2023 +0200

    ext4: drop the call to ext4_error() from ext4_get_group_info()
    
    [ Upstream commit f451fd97dd2b78f286379203a47d9d295c467255 ]
    
    A recent patch added a call to ext4_error() which is problematic since
    some callers of the ext4_get_group_info() function may be holding a
    spinlock, whereas ext4_error() must never be called in atomic context.
    
    This triggered a report from Syzbot: "BUG: sleeping function called from
    invalid context in ext4_update_super" (see the link below).
    
    Therefore, drop the call to ext4_error() from ext4_get_group_info(). In
    the meantime use eight characters tabs instead of nine characters ones.
    
    Reported-by: syzbot+4acc7d910e617b360859@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/all/00000000000070575805fdc6cdb2@google.com/
    Fixes: 5354b2af3406 ("ext4: allow ext4_get_group_info() to fail")
    Suggested-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
    Link: https://lore.kernel.org/r/20230614100446.14337-1-fmdefrancesco@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb4ccc102d5fe8c0951d59acedb3ced44eca11cb
Author: Steve French <stfrench@microsoft.com>
Date:   Sun Jun 11 11:23:32 2023 -0500

    cifs: fix lease break oops in xfstest generic/098
    
    [ Upstream commit c774e6779f38bf36f0cce65e30793704bab4b0d7 ]
    
    umount can race with lease break so need to check if
    tcon->ses->server is still valid to send the lease
    break response.
    
    Reviewed-by: Bharath SM <bharathsm@microsoft.com>
    Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
    Fixes: 59a556aebc43 ("SMB3: drop reference to cfile before sending oplock break")
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cb181271eabfbfee0b03c7c72bc6c2f281667bc
Author: Natalia Petrova <n.petrova@fintech.ru>
Date:   Fri May 12 13:33:20 2023 +0300

    drm/nouveau: add nv_encoder pointer check for NULL
    
    [ Upstream commit 55b94bb8c42464bad3d2217f6874aa1a85664eac ]
    
    Pointer nv_encoder could be dereferenced at nouveau_connector.c
    in case it's equal to NULL by jumping to goto label.
    This patch adds a NULL-check to avoid it.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 3195c5f9784a ("drm/nouveau: set encoder for lvds")
    Signed-off-by: Natalia Petrova <n.petrova@fintech.ru>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    [Fixed patch title]
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230512103320.82234-1-n.petrova@fintech.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c79dccc263dbb15683982e4431551605e63e6e70
Author: Natalia Petrova <n.petrova@fintech.ru>
Date:   Fri May 12 14:15:26 2023 +0300

    drm/nouveau/dp: check for NULL nv_connector->native_mode
    
    [ Upstream commit 20a2ce87fbaf81e4c3dcb631d738e423959eb320 ]
    
    Add checking for NULL before calling nouveau_connector_detect_depth() in
    nouveau_connector_get_modes() function because nv_connector->native_mode
    could be dereferenced there since connector pointer passed to
    nouveau_connector_detect_depth() and the same value of
    nv_connector->native_mode is used there.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: d4c2c99bdc83 ("drm/nouveau/dp: remove broken display depth function, use the improved one")
    
    Signed-off-by: Natalia Petrova <n.petrova@fintech.ru>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230512111526.82408-1-n.petrova@fintech.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 909b7f7497cc899fd2d9b86106754a574fdac9b2
Author: Ratchanan Srirattanamet <peathot@hotmail.com>
Date:   Wed May 24 04:11:56 2023 +0700

    drm/nouveau: don't detect DSM for non-NVIDIA device
    
    [ Upstream commit 11d24327c2d7ad7f24fcc44fb00e1fa91ebf6525 ]
    
    The call site of nouveau_dsm_pci_probe() uses single set of output
    variables for all invocations. So, we must not write anything to them
    unless it's an NVIDIA device. Otherwise, if we are called with another
    device after the NVIDIA device, we'll clober the result of the NVIDIA
    device.
    
    For example, if the other device doesn't have _PR3 resources, the
    detection later would miss the presence of power resource support, and
    the rest of the code will keep using Optimus DSM, breaking power
    management for that machine.
    
    Also, because we're detecting NVIDIA's DSM, it doesn't make sense to run
    this detection on a non-NVIDIA device anyway. Thus, check at the
    beginning of the detection code if this is an NVIDIA card, and just
    return if it isn't.
    
    This, together with commit d22915d22ded ("drm/nouveau/devinit/tu102-:
    wait for GFW_BOOT_PROGRESS == COMPLETED") developed independently and
    landed earlier, fixes runtime power management of the NVIDIA card in
    Lenovo Legion 5-15ARH05. Without this patch, the GPU resumption code
    will "timeout", sometimes hanging userspace.
    
    As a bonus, we'll also stop preventing _PR3 usage from the bridge for
    unrelated devices, which is always nice, I guess.
    
    Fixes: ccfc2d5cdb02 ("drm/nouveau: Use generic helper to check _PR3 presence")
    Signed-off-by: Ratchanan Srirattanamet <peathot@hotmail.com>
    Closes: https://gitlab.freedesktop.org/drm/nouveau/-/issues/79
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/DM6PR19MB2780805D4BE1E3F9B3AC96D0BC409@DM6PR19MB2780.namprd19.prod.outlook.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10e1e07bdea4b101f9d5e988a57f8573fc9df4ef
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Tue Apr 25 17:44:14 2023 +0200

    igb: fix nvm.ops.read() error handling
    
    [ Upstream commit 48a821fd58837800750ec1b3962f0f799630a844 ]
    
    Add error handling into igb_set_eeprom() function, in case
    nvm.ops.read() fails just quit with error code asap.
    
    Fixes: 9d5c824399de ("igb: PCI-Express 82575 Gigabit Ethernet driver")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe03fd373ca6da92d3112b7e52144114278e2129
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Mon May 15 23:49:36 2023 +0800

    igc: Clean the TX buffer and TX descriptor ring
    
    [ Upstream commit e43516f5978d11d36511ce63d31d1da4db916510 ]
    
    There could be a race condition during link down where interrupt
    being generated and igc_clean_tx_irq() been called to perform the
    TX completion. Properly clear the TX buffer/descriptor ring and
    disable the TX Queue ring in igc_free_tx_resources() to avoid that.
    
    Kernel trace:
    [  108.237177] Hardware name: Intel Corporation Tiger Lake Client Platform/TigerLake U DDR4 SODIMM RVP, BIOS TGLIFUI1.R00.4204.A00.2105270302 05/27/2021
    [  108.237178] RIP: 0010:refcount_warn_saturate+0x55/0x110
    [  108.242143] RSP: 0018:ffff9e7980003db0 EFLAGS: 00010286
    [  108.245555] Code: 84 bc 00 00 00 c3 cc cc cc cc 85 f6 74 46 80 3d 20 8c 4d 01 00 75 ee 48 c7 c7 88 f4 03 ab c6 05 10 8c 4d 01 01 e8 0b 10 96 ff <0f> 0b c3 cc cc cc cc 80 3d fc 8b 4d 01 00 75 cb 48 c7 c7 b0 f4 03
    [  108.250434]
    [  108.250434] RSP: 0018:ffff9e798125f910 EFLAGS: 00010286
    [  108.254358] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [  108.259325]
    [  108.259325] RAX: 0000000000000000 RBX: ffff8ddb935b8000 RCX: 0000000000000027
    [  108.261868] RDX: ffff8de250a28800 RSI: ffff8de250a1c580 RDI: ffff8de250a1c580
    [  108.265538] RDX: 0000000000000027 RSI: 0000000000000002 RDI: ffff8de250a9c588
    [  108.265539] RBP: ffff8ddb935b8000 R08: ffffffffab2655a0 R09: ffff9e798125f898
    [  108.267914] RBP: ffff8ddb8a5b8d80 R08: 0000005648eba354 R09: 0000000000000000
    [  108.270196] R10: 0000000000000001 R11: 000000002d2d2d2d R12: ffff9e798125f948
    [  108.270197] R13: ffff9e798125fa1c R14: ffff8ddb8a5b8d80 R15: 7fffffffffffffff
    [  108.273001] R10: 000000002d2d2d2d R11: 000000002d2d2d2d R12: ffff8ddb8a5b8ed4
    [  108.276410] FS:  00007f605851b740(0000) GS:ffff8de250a80000(0000) knlGS:0000000000000000
    [  108.280597] R13: 00000000000002ac R14: 00000000ffffff99 R15: ffff8ddb92561b80
    [  108.282966] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  108.282967] CR2: 00007f053c039248 CR3: 0000000185850003 CR4: 0000000000f70ee0
    [  108.286206] FS:  0000000000000000(0000) GS:ffff8de250a00000(0000) knlGS:0000000000000000
    [  108.289701] PKRU: 55555554
    [  108.289702] Call Trace:
    [  108.289704]  <TASK>
    [  108.293977] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  108.297562]  sock_alloc_send_pskb+0x20c/0x240
    [  108.301494] CR2: 00007f053c03a168 CR3: 0000000184394002 CR4: 0000000000f70ef0
    [  108.301495] PKRU: 55555554
    [  108.306464]  __ip_append_data.isra.0+0x96f/0x1040
    [  108.309441] Call Trace:
    [  108.309443]  ? __pfx_ip_generic_getfrag+0x10/0x10
    [  108.314927]  <IRQ>
    [  108.314928]  sock_wfree+0x1c7/0x1d0
    [  108.318078]  ? __pfx_ip_generic_getfrag+0x10/0x10
    [  108.320276]  skb_release_head_state+0x32/0x90
    [  108.324812]  ip_make_skb+0xf6/0x130
    [  108.327188]  skb_release_all+0x16/0x40
    [  108.330775]  ? udp_sendmsg+0x9f3/0xcb0
    [  108.332626]  napi_consume_skb+0x48/0xf0
    [  108.334134]  ? xfrm_lookup_route+0x23/0xb0
    [  108.344285]  igc_poll+0x787/0x1620 [igc]
    [  108.346659]  udp_sendmsg+0x9f3/0xcb0
    [  108.360010]  ? ttwu_do_activate+0x40/0x220
    [  108.365237]  ? __pfx_ip_generic_getfrag+0x10/0x10
    [  108.366744]  ? try_to_wake_up+0x289/0x5e0
    [  108.376987]  ? sock_sendmsg+0x81/0x90
    [  108.395698]  ? __pfx_process_timeout+0x10/0x10
    [  108.395701]  sock_sendmsg+0x81/0x90
    [  108.409052]  __napi_poll+0x29/0x1c0
    [  108.414279]  ____sys_sendmsg+0x284/0x310
    [  108.419507]  net_rx_action+0x257/0x2d0
    [  108.438216]  ___sys_sendmsg+0x7c/0xc0
    [  108.439723]  __do_softirq+0xc1/0x2a8
    [  108.444950]  ? finish_task_switch+0xb4/0x2f0
    [  108.452077]  irq_exit_rcu+0xa9/0xd0
    [  108.453584]  ? __schedule+0x372/0xd00
    [  108.460713]  common_interrupt+0x84/0xa0
    [  108.467840]  ? clockevents_program_event+0x95/0x100
    [  108.474968]  </IRQ>
    [  108.482096]  ? do_nanosleep+0x88/0x130
    [  108.489224]  <TASK>
    [  108.489225]  asm_common_interrupt+0x26/0x40
    [  108.496353]  ? __rseq_handle_notify_resume+0xa9/0x4f0
    [  108.503478] RIP: 0010:cpu_idle_poll+0x2c/0x100
    [  108.510607]  __sys_sendmsg+0x5d/0xb0
    [  108.518687] Code: 05 e1 d9 c8 00 65 8b 15 de 64 85 55 85 c0 7f 57 e8 b9 ef ff ff fb 65 48 8b 1c 25 00 cc 02 00 48 8b 03 a8 08 74 0b eb 1c f3 90 <48> 8b 03 a8 08 75 13 8b 05 77 63 cd 00 85 c0 75 ed e8 ce ec ff ff
    [  108.525817]  do_syscall_64+0x44/0xa0
    [  108.531563] RSP: 0018:ffffffffab203e70 EFLAGS: 00000202
    [  108.538693]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [  108.546775]
    [  108.546777] RIP: 0033:0x7f605862b7f7
    [  108.549495] RAX: 0000000000000001 RBX: ffffffffab20c940 RCX: 000000000000003b
    [  108.551955] Code: 0e 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b9 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 89 54 24 1c 48 89 74 24 10
    [  108.554068] RDX: 4000000000000000 RSI: 000000002da97f6a RDI: 00000000002b8ff4
    [  108.559816] RSP: 002b:00007ffc99264058 EFLAGS: 00000246
    [  108.564178] RBP: 0000000000000000 R08: 00000000002b8ff4 R09: ffff8ddb01554c80
    [  108.571302]  ORIG_RAX: 000000000000002e
    [  108.571303] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f605862b7f7
    [  108.574023] R10: 000000000000015b R11: 000000000000000f R12: ffffffffab20c940
    [  108.574024] R13: 0000000000000000 R14: ffff8de26fbeef40 R15: ffffffffab20c940
    [  108.578727] RDX: 0000000000000000 RSI: 00007ffc992640a0 RDI: 0000000000000003
    [  108.578728] RBP: 00007ffc99264110 R08: 0000000000000000 R09: 175f48ad1c3a9c00
    [  108.581187]  do_idle+0x62/0x230
    [  108.585890] R10: 0000000000000000 R11: 0000000000000246 R12: 00007ffc992642d8
    [  108.585891] R13: 00005577814ab2ba R14: 00005577814addf0 R15: 00007f605876d000
    [  108.587920]  cpu_startup_entry+0x1d/0x20
    [  108.591422]  </TASK>
    [  108.596127]  rest_init+0xc5/0xd0
    [  108.600490] ---[ end trace 0000000000000000 ]---
    
    Test Setup:
    
    DUT:
    - Change mac address on DUT Side. Ensure NIC not having same MAC Address
    - Running udp_tai on DUT side. Let udp_tai running throughout the test
    
    Example:
    ./udp_tai -i enp170s0 -P 100000 -p 90 -c 1 -t 0 -u 30004
    
    Host:
    - Perform link up/down every 5 second.
    
    Result:
    Kernel panic will happen on DUT Side.
    
    Fixes: 13b5b7fd6a4a ("igc: Add support for Tx/Rx rings")
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 032b8cbeb19c648ed3e80937b1003dc2c38779b7
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Jun 9 14:05:19 2023 +0300

    sctp: fix an error code in sctp_sf_eat_auth()
    
    [ Upstream commit 75e6def3b26736e7ff80639810098c9074229737 ]
    
    The sctp_sf_eat_auth() function is supposed to enum sctp_disposition
    values and returning a kernel error code will cause issues in the
    caller.  Change -ENOMEM to SCTP_DISPOSITION_NOMEM.
    
    Fixes: 65b07e5d0d09 ("[SCTP]: API updates to suport SCTP-AUTH extensions.")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 981e78781a96e2d595569dd584e059667b3807d3
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jun 9 17:15:02 2023 +0800

    ipvlan: fix bound dev checking for IPv6 l3s mode
    
    [ Upstream commit ce57adc222aba32431c42632b396e9213d0eb0b8 ]
    
    The commit 59a0b022aa24 ("ipvlan: Make skb->skb_iif track skb->dev for l3s
    mode") fixed ipvlan bonded dev checking by updating skb skb_iif. This fix
    works for IPv4, as in raw_v4_input() the dif is from inet_iif(skb), which
    is skb->skb_iif when there is no route.
    
    But for IPv6, the fix is not enough, because in ipv6_raw_deliver() ->
    raw_v6_match(), the dif is inet6_iif(skb), which is returns IP6CB(skb)->iif
    instead of skb->skb_iif if it's not a l3_slave. To fix the IPv6 part
    issue. Let's set IP6CB(skb)->iif to correct ifindex.
    
    BTW, ipvlan handles NS/NA specifically. Since it works fine, I will not
    reset IP6CB(skb)->iif when addr->atype is IPVL_ICMPV6.
    
    Fixes: c675e06a98a4 ("ipvlan: decouple l3s mode dependencies from other modes")
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2196710
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Larysa Zaremba <larysa.zaremba@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e76522d1a6db17d64ad4c8a6329fa8bece2fd07
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Jun 8 09:23:44 2023 -0700

    net: ethtool: correct MAX attribute value for stats
    
    [ Upstream commit 52f79609c0c5b25fddb88e85f25ce08aa7e3fb42 ]
    
    When compiling YNL generated code compiler complains about
    array-initializer-out-of-bounds. Turns out the MAX value
    for STATS_GRP uses the value for STATS.
    
    This may lead to random corruptions in user space (kernel
    itself doesn't use this value as it never parses stats).
    
    Fixes: f09ea6fb1272 ("ethtool: add a new command for reading standard stats")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18512de74454fba6ebd06e579f4f1a3200a9e50d
Author: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
Date:   Tue Jun 6 03:25:31 2023 -0700

    IB/isert: Fix incorrect release of isert connection
    
    [ Upstream commit 699826f4e30ab76a62c238c86fbef7e826639c8d ]
    
    The ib_isert module is releasing the isert connection both in
    isert_wait_conn() handler as well as isert_free_conn() handler.
    In isert_wait_conn() handler, it is expected to wait for iSCSI
    session logout operation to complete. It should free the isert
    connection only in isert_free_conn() handler.
    
    When a bunch of iSER target is cleared, this issue can lead to
    use-after-free memory issue as isert conn is twice released
    
    Fixes: b02efbfc9a05 ("iser-target: Fix implicit termination of connections")
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Link: https://lore.kernel.org/r/20230606102531.162967-4-saravanan.vajravel@broadcom.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63e9e71983741d4615adb6f972a5851c951e7b2b
Author: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
Date:   Tue Jun 6 03:25:30 2023 -0700

    IB/isert: Fix possible list corruption in CMA handler
    
    [ Upstream commit 7651e2d6c5b359a28c2d4c904fec6608d1021ca8 ]
    
    When ib_isert module receives connection error event, it is
    releasing the isert session and removes corresponding list
    node but it doesn't take appropriate mutex lock to remove
    the list node.  This can lead to linked  list corruption
    
    Fixes: bd3792205aae ("iser-target: Fix pending connections handling in target stack shutdown sequnce")
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
    Link: https://lore.kernel.org/r/20230606102531.162967-3-saravanan.vajravel@broadcom.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29ff057c0a50099ba2b234e219aaed4feafb99ff
Author: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
Date:   Tue Jun 6 03:25:29 2023 -0700

    IB/isert: Fix dead lock in ib_isert
    
    [ Upstream commit 691b0480933f0ce88a81ed1d1a0aff340ff6293a ]
    
    - When a iSER session is released, ib_isert module is taking a mutex
      lock and releasing all pending connections. As part of this, ib_isert
      is destroying rdma cm_id. To destroy cm_id, rdma_cm module is sending
      CM events to CMA handler of ib_isert. This handler is taking same
      mutex lock. Hence it leads to deadlock between ib_isert & rdma_cm
      modules.
    
    - For fix, created local list of pending connections and release the
      connection outside of mutex lock.
    
    Calltrace:
    ---------
    [ 1229.791410] INFO: task kworker/10:1:642 blocked for more than 120 seconds.
    [ 1229.791416]       Tainted: G           OE    --------- -  - 4.18.0-372.9.1.el8.x86_64 #1
    [ 1229.791418] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [ 1229.791419] task:kworker/10:1    state:D stack:    0 pid:  642 ppid:     2 flags:0x80004000
    [ 1229.791424] Workqueue: ib_cm cm_work_handler [ib_cm]
    [ 1229.791436] Call Trace:
    [ 1229.791438]  __schedule+0x2d1/0x830
    [ 1229.791445]  ? select_idle_sibling+0x23/0x6f0
    [ 1229.791449]  schedule+0x35/0xa0
    [ 1229.791451]  schedule_preempt_disabled+0xa/0x10
    [ 1229.791453]  __mutex_lock.isra.7+0x310/0x420
    [ 1229.791456]  ? select_task_rq_fair+0x351/0x990
    [ 1229.791459]  isert_cma_handler+0x224/0x330 [ib_isert]
    [ 1229.791463]  ? ttwu_queue_wakelist+0x159/0x170
    [ 1229.791466]  cma_cm_event_handler+0x25/0xd0 [rdma_cm]
    [ 1229.791474]  cma_ib_handler+0xa7/0x2e0 [rdma_cm]
    [ 1229.791478]  cm_process_work+0x22/0xf0 [ib_cm]
    [ 1229.791483]  cm_work_handler+0xf4/0xf30 [ib_cm]
    [ 1229.791487]  ? move_linked_works+0x6e/0xa0
    [ 1229.791490]  process_one_work+0x1a7/0x360
    [ 1229.791491]  ? create_worker+0x1a0/0x1a0
    [ 1229.791493]  worker_thread+0x30/0x390
    [ 1229.791494]  ? create_worker+0x1a0/0x1a0
    [ 1229.791495]  kthread+0x10a/0x120
    [ 1229.791497]  ? set_kthread_struct+0x40/0x40
    [ 1229.791499]  ret_from_fork+0x1f/0x40
    
    [ 1229.791739] INFO: task targetcli:28666 blocked for more than 120 seconds.
    [ 1229.791740]       Tainted: G           OE    --------- -  - 4.18.0-372.9.1.el8.x86_64 #1
    [ 1229.791741] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [ 1229.791742] task:targetcli       state:D stack:    0 pid:28666 ppid:  5510 flags:0x00004080
    [ 1229.791743] Call Trace:
    [ 1229.791744]  __schedule+0x2d1/0x830
    [ 1229.791746]  schedule+0x35/0xa0
    [ 1229.791748]  schedule_preempt_disabled+0xa/0x10
    [ 1229.791749]  __mutex_lock.isra.7+0x310/0x420
    [ 1229.791751]  rdma_destroy_id+0x15/0x20 [rdma_cm]
    [ 1229.791755]  isert_connect_release+0x115/0x130 [ib_isert]
    [ 1229.791757]  isert_free_np+0x87/0x140 [ib_isert]
    [ 1229.791761]  iscsit_del_np+0x74/0x120 [iscsi_target_mod]
    [ 1229.791776]  lio_target_np_driver_store+0xe9/0x140 [iscsi_target_mod]
    [ 1229.791784]  configfs_write_file+0xb2/0x110
    [ 1229.791788]  vfs_write+0xa5/0x1a0
    [ 1229.791792]  ksys_write+0x4f/0xb0
    [ 1229.791794]  do_syscall_64+0x5b/0x1a0
    [ 1229.791798]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    
    Fixes: bd3792205aae ("iser-target: Fix pending connections handling in target stack shutdown sequnce")
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Saravanan Vajravel <saravanan.vajravel@broadcom.com>
    Link: https://lore.kernel.org/r/20230606102531.162967-2-saravanan.vajravel@broadcom.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fced7aaaa38ff9e1379eb08877a8c6931441f229
Author: Yishai Hadas <yishaih@nvidia.com>
Date:   Mon Jun 5 13:33:25 2023 +0300

    IB/uverbs: Fix to consider event queue closing also upon non-blocking mode
    
    [ Upstream commit 62fab312fa1683e812e605db20d4f22de3e3fb2f ]
    
    Fix ib_uverbs_event_read() to consider event queue closing also upon
    non-blocking mode.
    
    Once the queue is closed (e.g. hot-plug flow) all the existing events
    are cleaned-up as part of ib_uverbs_free_event_queue().
    
    An application that uses the non-blocking FD mode should get -EIO in
    that case to let it knows that the device was removed already.
    
    Otherwise, it can loose the indication that the device was removed and
    won't recover.
    
    As part of that, refactor the code to have a single flow with regards to
    'is_closed' for both blocking and non-blocking modes.
    
    Fixes: 14e23bd6d221 ("RDMA/core: Fix locking in ib_uverbs_event_read")
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Yishai Hadas <yishaih@nvidia.com>
    Link: https://lore.kernel.org/r/97b00116a1e1e13f8dc4ec38a5ea81cf8c030210.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd44977ecc94e45231206c5177da0865d3574302
Author: Mark Zhang <markzhang@nvidia.com>
Date:   Mon Jun 5 13:33:23 2023 +0300

    RDMA/cma: Always set static rate to 0 for RoCE
    
    [ Upstream commit 58030c76cce473b6cfd630bbecb97215def0dff8 ]
    
    Set static rate to 0 as it should be discovered by path query and
    has no meaning for RoCE.
    This also avoid of using the rtnl lock and ethtool API, which is
    a bottleneck when try to setup many rdma-cm connections at the same
    time, especially with multiple processes.
    
    Fixes: 3c86aa70bf67 ("RDMA/cm: Add RDMA CM support for IBoE devices")
    Signed-off-by: Mark Zhang <markzhang@nvidia.com>
    Link: https://lore.kernel.org/r/f72a4f8b667b803aee9fa794069f61afb5839ce4.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a9dee176b4b906e59be9de3dc116854a363fb6f
Author: Maher Sanalla <msanalla@nvidia.com>
Date:   Mon Jun 5 13:33:17 2023 +0300

    RDMA/mlx5: Initiate dropless RQ for RAW Ethernet functions
    
    [ Upstream commit ee4d269eccfea6c17b18281bef482700d898e86f ]
    
    Delay drop data is initiated for PFs that have the capability of
    rq_delay_drop and are in roce profile.
    
    However, PFs with RAW ethernet profile do not initiate delay drop data
    on function load, causing kernel panic if delay drop struct members are
    accessed later on in case a dropless RQ is created.
    
    Thus, stage the delay drop initialization as part of RAW ethernet
    PF loading process.
    
    Fixes: b5ca15ad7e61 ("IB/mlx5: Add proper representors support")
    Signed-off-by: Maher Sanalla <msanalla@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Link: https://lore.kernel.org/r/2e9d386785043d48c38711826eb910315c1de141.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35828874aa9f0921b0b7b3a352ac31bb0be6fb75
Author: Nithin Dabilpuram <ndabilpuram@marvell.com>
Date:   Thu Jun 8 17:12:01 2023 +0530

    octeontx2-af: fix lbk link credits on cn10k
    
    [ Upstream commit 87e12a17eef476bbf768dc3a74419ad461f36fbc ]
    
    Fix LBK link credits on CN10K to be same as CN9K i.e
    16 * MAX_LBK_DATA_RATE instead of current scheme of
    calculation based on LBK buf length / FIFO size.
    
    Fixes: 6e54e1c5399a ("octeontx2-af: cn10K: Add MTU configuration")
    Signed-off-by: Nithin Dabilpuram <ndabilpuram@marvell.com>
    Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
    Reviewed-by: Sridhar Samudrala <sridhar.samudrala@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7506e77357dac59b69d50e7b81b10166984c0246
Author: Satha Rao <skoteshwar@marvell.com>
Date:   Thu Jun 8 17:12:00 2023 +0530

    octeontx2-af: fixed resource availability check
    
    [ Upstream commit 4e635f9d86165e47f5440196f2ebdb258efb8341 ]
    
    txschq_alloc response have two different arrays to store continuous
    and non-continuous schedulers of each level. Requested count should
    be checked for each array separately.
    
    Fixes: 5d9b976d4480 ("octeontx2-af: Support fixed transmit scheduler topology")
    Signed-off-by: Satha Rao <skoteshwar@marvell.com>
    Signed-off-by: Sunil Kovvuri Goutham <sgoutham@marvell.com>
    Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
    Reviewed-by: Sridhar Samudrala <sridhar.samudrala@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dd914b9e2f972bd6c02cb007730f7e7c55b7f0d
Author: Ahmed Zaki <ahmed.zaki@intel.com>
Date:   Thu Jun 8 13:02:26 2023 -0700

    iavf: remove mask from iavf_irq_enable_queues()
    
    [ Upstream commit c37cf54c12cfaa51e7aaf88708167b0d3259e64e ]
    
    Enable more than 32 IRQs by removing the u32 bit mask in
    iavf_irq_enable_queues(). There is no need for the mask as there are no
    callers that select individual IRQs through the bitmask. Also, if the PF
    allocates more than 32 IRQs, this mask will prevent us from using all of
    them.
    
    Modify the comment in iavf_register.h to show that the maximum number
    allowed for the IRQ index is 63 as per the iAVF standard 1.0 [1].
    
    link: [1] https://www.intel.com/content/dam/www/public/us/en/documents/product-specifications/ethernet-adaptive-virtual-function-hardware-spec.pdf
    Fixes: 5eae00c57f5e ("i40evf: main driver core")
    Signed-off-by: Ahmed Zaki <ahmed.zaki@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20230608200226.451861-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6342cd13d39080fd410d575ea7ef1cfbf71766c
Author: Zhu Yanjun <yanjun.zhu@linux.dev>
Date:   Fri Jun 2 11:54:08 2023 +0800

    RDMA/rxe: Fix the use-before-initialization error of resp_pkts
    
    [ Upstream commit 2a62b6210ce876c596086ab8fd4c8a0c3d10611a ]
    
    In the following:
    
      Call Trace:
       <TASK>
       __dump_stack lib/dump_stack.c:88 [inline]
       dump_stack_lvl+0xd9/0x150 lib/dump_stack.c:106
       assign_lock_key kernel/locking/lockdep.c:982 [inline]
       register_lock_class+0xdb6/0x1120 kernel/locking/lockdep.c:1295
       __lock_acquire+0x10a/0x5df0 kernel/locking/lockdep.c:4951
       lock_acquire kernel/locking/lockdep.c:5691 [inline]
       lock_acquire+0x1b1/0x520 kernel/locking/lockdep.c:5656
       __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
       _raw_spin_lock_irqsave+0x3d/0x60 kernel/locking/spinlock.c:162
       skb_dequeue+0x20/0x180 net/core/skbuff.c:3639
       drain_resp_pkts drivers/infiniband/sw/rxe/rxe_comp.c:555 [inline]
       rxe_completer+0x250d/0x3cc0 drivers/infiniband/sw/rxe/rxe_comp.c:652
       rxe_qp_do_cleanup+0x1be/0x820 drivers/infiniband/sw/rxe/rxe_qp.c:761
       execute_in_process_context+0x3b/0x150 kernel/workqueue.c:3473
       __rxe_cleanup+0x21e/0x370 drivers/infiniband/sw/rxe/rxe_pool.c:233
       rxe_create_qp+0x3f6/0x5f0 drivers/infiniband/sw/rxe/rxe_verbs.c:583
    
    This is a use-before-initialization problem.
    
    It happens because rxe_qp_do_cleanup is called during error unwind before
    the struct has been fully initialized.
    
    Move the initialization of the skb earlier.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20230602035408.741534-1-yanjun.zhu@intel.com
    Reported-by: syzbot+eba589d8f49c73d356da@syzkaller.appspotmail.com
    Signed-off-by: Zhu Yanjun <yanjun.zhu@linux.dev>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 466f25fd2d9b5647040979db528b99d5be2dba9d
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Fri Oct 21 15:01:04 2022 -0500

    RDMA/rxe: Removed unused name from rxe_task struct
    
    [ Upstream commit de669ae8af49ceed0eed44f5b3d51dc62affc5e4 ]
    
    The name field in struct rxe_task is never used. This patch removes it.
    
    Link: https://lore.kernel.org/r/20221021200118.2163-4-rpearsonhpe@gmail.com
    Signed-off-by: Ian Ziemba <ian.ziemba@hpe.com>
    Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Stable-dep-of: 2a62b6210ce8 ("RDMA/rxe: Fix the use-before-initialization error of resp_pkts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13d087b3587b4c22317f5e52d590d60827574928
Author: Zhu Yanjun <yanjun.zhu@linux.dev>
Date:   Sun Aug 21 21:16:15 2022 -0400

    RDMA/rxe: Remove the unused variable obj
    
    [ Upstream commit f07853582d1f6ed282f8d9a0b1209a87dd761f58 ]
    
    The member variable obj in struct rxe_task is not needed.
    So remove it to save memory.
    
    Link: https://lore.kernel.org/r/20220822011615.805603-4-yanjun.zhu@linux.dev
    Signed-off-by: Zhu Yanjun <yanjun.zhu@linux.dev>
    Reviewed-by: Li Zhijian <lizhijian@fujitsu.com>
    Reviewed-by: Bob Pearson <rpearsonhpe@gmail.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Stable-dep-of: 2a62b6210ce8 ("RDMA/rxe: Fix the use-before-initialization error of resp_pkts")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e1098d72fa462944c68262e1b5cca045dcb555e
Author: Lee Jones <lee@kernel.org>
Date:   Thu Jun 8 08:29:03 2023 +0100

    net/sched: cls_u32: Fix reference counter leak leading to overflow
    
    [ Upstream commit 04c55383fa5689357bcdd2c8036725a55ed632bc ]
    
    In the event of a failure in tcf_change_indev(), u32_set_parms() will
    immediately return without decrementing the recently incremented
    reference counter.  If this happens enough times, the counter will
    rollover and the reference freed, leading to a double free which can be
    used to do 'bad things'.
    
    In order to prevent this, move the point of possible failure above the
    point where the reference counter is incremented.  Also save any
    meaningful return values to be applied to the return data at the
    appropriate point in time.
    
    This issue was caught with KASAN.
    
    Fixes: 705c7091262d ("net: sched: cls_u32: no need to call tcf_exts_change for newly allocated struct")
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d56661cd8d55fa673c34d1311465cdeb73b36650
Author: Max Tottenham <mtottenh@akamai.com>
Date:   Wed Jun 7 12:23:54 2023 -0400

    net/sched: act_pedit: Parse L3 Header for L4 offset
    
    [ Upstream commit 6c02568fd1ae53099b4ab86365c5be1ff15f586b ]
    
    Instead of relying on skb->transport_header being set correctly, opt
    instead to parse the L3 header length out of the L3 headers for both
    IPv4/IPv6 when the Extended Layer Op for tcp/udp is used. This fixes a
    bug if GRO is disabled, when GRO is disabled skb->transport_header is
    set by __netif_receive_skb_core() to point to the L3 header, it's later
    fixed by the upper protocol layers, but act_pedit will receive the SKB
    before the fixups are completed. The existing behavior causes the
    following to edit the L3 header if GRO is disabled instead of the UDP
    header:
    
        tc filter add dev eth0 ingress protocol ip flower ip_proto udp \
     dst_ip 192.168.1.3 action pedit ex munge udp set dport 18053
    
    Also re-introduce a rate-limited warning if we were unable to extract
    the header offset when using the 'ex' interface.
    
    Fixes: 71d0ed7079df ("net/act_pedit: Support using offset relative to
    the conventional network headers")
    Signed-off-by: Max Tottenham <mtottenh@akamai.com>
    Reviewed-by: Josh Hunt <johunt@akamai.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202305261541.N165u9TZ-lkp@intel.com/
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17b330b7824449ca17821e73e3f7848762296430
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Fri Apr 21 18:25:16 2023 -0300

    net/sched: act_pedit: remove extra check for key type
    
    [ Upstream commit 577140180ba28d0d37bc898c7bd6702c83aa106f ]
    
    The netlink parsing already validates the key 'htype'.
    Remove the datapath check as it's redundant.
    
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 6c02568fd1ae ("net/sched: act_pedit: Parse L3 Header for L4 offset")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 219b8e98387fb84a1ed849e25f175e393d49299a
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Tue Jan 31 16:05:12 2023 -0300

    net/sched: simplify tcf_pedit_act
    
    [ Upstream commit 95b069382351826c0ae37938070aa82dbeaf288d ]
    
    Remove the check for a negative number of keys as
    this cannot ever happen
    
    Reviewed-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: 6c02568fd1ae ("net/sched: act_pedit: Parse L3 Header for L4 offset")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 688e6db596611e2bbed24169c4af0e1b3c1efcf8
Author: Guillaume Nault <gnault@redhat.com>
Date:   Wed Jun 7 18:05:02 2023 +0200

    ping6: Fix send to link-local addresses with VRF.
    
    [ Upstream commit 91ffd1bae1dafbb9e34b46813f5b058581d9144d ]
    
    Ping sockets can't send packets when they're bound to a VRF master
    device and the output interface is set to a slave device.
    
    For example, when net.ipv4.ping_group_range is properly set, so that
    ping6 can use ping sockets, the following kind of commands fails:
      $ ip vrf exec red ping6 fe80::854:e7ff:fe88:4bf1%eth1
    
    What happens is that sk->sk_bound_dev_if is set to the VRF master
    device, but 'oif' is set to the real output device. Since both are set
    but different, ping_v6_sendmsg() sees their value as inconsistent and
    fails.
    
    Fix this by allowing 'oif' to be a slave device of ->sk_bound_dev_if.
    
    This fixes the following kselftest failure:
      $ ./fcnal-test.sh -t ipv6_ping
      [...]
      TEST: ping out, vrf device+address bind - ns-B IPv6 LLA        [FAIL]
    
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/b6191f90-ffca-dbca-7d06-88a9788def9c@alu.unizg.hr/
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Fixes: 5e457896986e ("net: ipv6: Fix ping to link-local addresses.")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/6c8b53108816a8d0d5705ae37bdc5a8322b5e3d9.1686153846.git.gnault@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 471a4c08e30e33820ad8957abeb82bb2e1bf3d28
Author: Wei Fang <wei.fang@nxp.com>
Date:   Wed Jun 7 17:10:48 2023 +0800

    net: enetc: correct the indexes of highest and 2nd highest TCs
    
    [ Upstream commit 21225873be1472b7c59ed3650396af0e40578112 ]
    
    For ENETC hardware, the TCs are numbered from 0 to N-1, where N
    is the number of TCs. Numerically higher TC has higher priority.
    It's obvious that the highest priority TC index should be N-1 and
    the 2nd highest priority TC index should be N-2.
    
    However, the previous logic uses netdev_get_prio_tc_map() to get
    the indexes of highest priority and 2nd highest priority TCs, it
    does not make sense and is incorrect to give a "tc" argument to
    netdev_get_prio_tc_map(). So the driver may get the wrong indexes
    of the two highest priotiry TCs which would lead to failed to set
    the CBS for the two highest priotiry TCs.
    
    e.g.
    $ tc qdisc add dev eno0 parent root handle 100: mqprio num_tc 6 \
            map 0 0 1 1 2 3 4 5 queues 1@0 1@1 1@2 1@3 2@4 2@6 hw 1
    $ tc qdisc replace dev eno0 parent 100:6 cbs idleslope 100000 \
            sendslope -900000 hicredit 12 locredit -113 offload 1
    $ Error: Specified device failed to setup cbs hardware offload.
      ^^^^^
    
    In this example, the previous logic deems the indexes of the two
    highest priotiry TCs should be 3 and 2. Actually, the indexes are
    5 and 4, because the number of TCs is 6. So it would be failed to
    configure the CBS for the two highest priority TCs.
    
    Fixes: c431047c4efe ("enetc: add support Credit Based Shaper(CBS) for hardware offload")
    Signed-off-by: Wei Fang <wei.fang@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44ebe988cb38e720b91826f4d7c31692061ca04a
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jun 8 02:32:02 2023 +0200

    netfilter: nf_tables: incorrect error path handling with NFT_MSG_NEWRULE
    
    [ Upstream commit 1240eb93f0616b21c675416516ff3d74798fdc97 ]
    
    In case of error when adding a new rule that refers to an anonymous set,
    deactivate expressions via NFT_TRANS_PREPARE state, not NFT_TRANS_RELEASE.
    Thus, the lookup expression marks anonymous sets as inactive in the next
    generation to ensure it is not reachable in this transaction anymore and
    decrement the set refcount as introduced by c1592a89942e ("netfilter:
    nf_tables: deactivate anonymous set from preparation phase"). The abort
    step takes care of undoing the anonymous set.
    
    This is also consistent with rule deletion, where NFT_TRANS_PREPARE is
    used. Note that this error path is exercised in the preparation step of
    the commit protocol. This patch replaces nf_tables_rule_release() by the
    deactivate and destroy calls, this time with NFT_TRANS_PREPARE.
    
    Due to this incorrect error handling, it is possible to access a
    dangling pointer to the anonymous set that remains in the transaction
    list.
    
    [1009.379054] BUG: KASAN: use-after-free in nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379106] Read of size 8 at addr ffff88816c4c8020 by task nft-rule-add/137110
    [1009.379116] CPU: 7 PID: 137110 Comm: nft-rule-add Not tainted 6.4.0-rc4+ #256
    [1009.379128] Call Trace:
    [1009.379132]  <TASK>
    [1009.379135]  dump_stack_lvl+0x33/0x50
    [1009.379146]  ? nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379191]  print_address_description.constprop.0+0x27/0x300
    [1009.379201]  kasan_report+0x107/0x120
    [1009.379210]  ? nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379255]  nft_set_lookup_global+0x147/0x1a0 [nf_tables]
    [1009.379302]  nft_lookup_init+0xa5/0x270 [nf_tables]
    [1009.379350]  nf_tables_newrule+0x698/0xe50 [nf_tables]
    [1009.379397]  ? nf_tables_rule_release+0xe0/0xe0 [nf_tables]
    [1009.379441]  ? kasan_unpoison+0x23/0x50
    [1009.379450]  nfnetlink_rcv_batch+0x97c/0xd90 [nfnetlink]
    [1009.379470]  ? nfnetlink_rcv_msg+0x480/0x480 [nfnetlink]
    [1009.379485]  ? __alloc_skb+0xb8/0x1e0
    [1009.379493]  ? __alloc_skb+0xb8/0x1e0
    [1009.379502]  ? entry_SYSCALL_64_after_hwframe+0x46/0xb0
    [1009.379509]  ? unwind_get_return_address+0x2a/0x40
    [1009.379517]  ? write_profile+0xc0/0xc0
    [1009.379524]  ? avc_lookup+0x8f/0xc0
    [1009.379532]  ? __rcu_read_unlock+0x43/0x60
    
    Fixes: 958bee14d071 ("netfilter: nf_tables: use new transaction infrastructure to handle sets")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 133b73d85343ad47793365ed2ed93f60918e851c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jun 8 00:19:12 2023 +0200

    netfilter: nfnetlink: skip error delivery on batch in case of ENOMEM
    
    [ Upstream commit a1a64a151dae8ac3581c1cbde44b672045cb658b ]
    
    If caller reports ENOMEM, then stop iterating over the batch and send a
    single netlink message to userspace to report OOM.
    
    Fixes: cbb8125eb40b ("netfilter: nfnetlink: deliver netlink errors on batch completion")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4188f8b8134faa9ae0e03bb5992be7dd55cea37
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Jun 7 11:55:42 2023 +0200

    netfilter: nf_tables: integrate pipapo into commit protocol
    
    [ Upstream commit 212ed75dc5fb9d1423b3942c8f872a868cda3466 ]
    
    The pipapo set backend follows copy-on-update approach, maintaining one
    clone of the existing datastructure that is being updated. The clone
    and current datastructures are swapped via rcu from the commit step.
    
    The existing integration with the commit protocol is flawed because
    there is no operation to clean up the clone if the transaction is
    aborted. Moreover, the datastructure swap happens on set element
    activation.
    
    This patch adds two new operations for sets: commit and abort, these new
    operations are invoked from the commit and abort steps, after the
    transactions have been digested, and it updates the pipapo set backend
    to use it.
    
    This patch adds a new ->pending_update field to sets to maintain a list
    of sets that require this new commit and abort operations.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4da9d4e7403342fef46f6bec11b81dac63a55107
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue May 30 01:34:02 2023 +0300

    spi: fsl-dspi: avoid SCK glitches with continuous transfers
    
    [ Upstream commit c5c31fb71f16ba75bad4ade208abbae225305b65 ]
    
    The DSPI controller has configurable timing for
    
    (a) tCSC: the interval between the assertion of the chip select and the
        first clock edge
    
    (b) tASC: the interval between the last clock edge and the deassertion
        of the chip select
    
    What is a bit surprising, but is documented in the figure "Example of
    continuous transfer (CPHA=1, CONT=1)" in the datasheet, is that when the
    chip select stays asserted between multiple TX FIFO writes, the tCSC and
    tASC times still apply. With CONT=1, chip select remains asserted, but
    SCK takes a break and goes to the idle state for tASC + tCSC ns.
    
    In other words, the default values (of 0 and 0 ns) result in SCK
    glitches where the SCK transition to the idle state, as well as the SCK
    transition from the idle state, will have no delay in between, and it
    may appear that a SCK cycle has simply gone missing. The resulting
    timing violation might cause data corruption in many peripherals, as
    their chip select is asserted.
    
    The driver has device tree bindings for tCSC ("fsl,spi-cs-sck-delay")
    and tASC ("fsl,spi-sck-cs-delay"), but these are only specified to apply
    when the chip select toggles in the first place, and this timing
    characteristic depends on each peripheral. Many peripherals do not have
    explicit timing requirements, so many device trees do not have these
    properties present at all.
    
    Nonetheless, the lack of SCK glitches is a common sense requirement, and
    since the SCK stays in the idle state during transfers for tCSC+tASC ns,
    and that in itself should look like half a cycle, then let's ensure that
    tCSC and tASC are at least a quarter of a SCK period, such that their
    sum is at least half of one.
    
    Fixes: 95bf15f38641 ("spi: fsl-dspi: Add ~50ns delay between cs and sck")
    Reported-by: Lisa Chen (陈敏捷) <minjie.chen@geekplus.com>
    Debugged-by: Lisa Chen (陈敏捷) <minjie.chen@geekplus.com>
    Tested-by: Lisa Chen (陈敏捷) <minjie.chen@geekplus.com>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20230529223402.1199503-1-vladimir.oltean@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08acd41bb15ab71cf5bcb67bc9de494e9d8a90f0
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Wed May 17 12:22:42 2023 -0500

    RDMA/rxe: Fix packet length checks
    
    [ Upstream commit 9a3763e87379c97a78b7c6c6f40720b1e877174f ]
    
    In rxe_net.c a received packet, from udp or loopback, is passed to
    rxe_rcv() in rxe_recv.c as a udp packet. I.e. skb->data is pointing at the
    udp header. But rxe_rcv() makes length checks to verify the packet is long
    enough to hold the roce headers as if it were a roce
    packet. I.e. skb->data pointing at the bth header. A runt packet would
    appear to have 8 more bytes than it actually does which may lead to
    incorrect behavior.
    
    This patch calls skb_pull() to adjust the skb to point at the bth header
    before calling rxe_rcv() which fixes this error.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20230517172242.1806340-1-rpearsonhpe@gmail.com
    Signed-off-by: Bob Pearson <rpearsonhpe@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01f6f867adc7e5ce4fe91848d77960bcbc32d488
Author: Li Zhijian <lizhijian@fujitsu.com>
Date:   Tue Apr 25 01:02:43 2023 +0000

    RDMA/rtrs: Fix rxe_dealloc_pd warning
    
    [ Upstream commit 9c29c8c7df0688f358d2df5ddd16c97c2f7292b4 ]
    
    In current design:
    1. PD and clt_path->s.dev are shared among connections.
    2. every con[n]'s cleanup phase will call destroy_con_cq_qp()
    3. clt_path->s.dev will be always decreased in destroy_con_cq_qp(), and
       when clt_path->s.dev become zero, it will destroy PD.
    4. when con[1] failed to create, con[1] will not take clt_path->s.dev,
       but it try to decreased clt_path->s.dev
    
    So, in case create_cm(con[0]) succeeds but create_cm(con[1]) fails,
    destroy_con_cq_qp(con[1]) will be called first which will destroy the PD
    while this PD is still taken by con[0].
    
    Here, we refactor the error path of create_cm() and init_conns(), so that
    we do the cleanup in the order they are created.
    
    The warning occurs when destroying RXE PD whose reference count is not
    zero.
    
     rnbd_client L597: Mapping device /dev/nvme0n1 on session client, (access_mode: rw, nr_poll_queues: 0)
     ------------[ cut here ]------------
     WARNING: CPU: 0 PID: 26407 at drivers/infiniband/sw/rxe/rxe_pool.c:256 __rxe_cleanup+0x13a/0x170 [rdma_rxe]
     Modules linked in: rpcrdma rdma_ucm ib_iser rnbd_client libiscsi rtrs_client scsi_transport_iscsi rtrs_core rdma_cm iw_cm ib_cm crc32_generic rdma_rxe udp_tunnel ib_uverbs ib_core kmem device_dax nd_pmem dax_pmem nd_vme crc32c_intel fuse nvme_core nfit libnvdimm dm_multipath scsi_dh_rdac scsi_dh_emc scsi_dh_alua dm_mirror dm_region_hash dm_log dm_mod
     CPU: 0 PID: 26407 Comm: rnbd-client.sh Kdump: loaded Not tainted 6.2.0-rc6-roce-flush+ #53
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
     RIP: 0010:__rxe_cleanup+0x13a/0x170 [rdma_rxe]
     Code: 45 84 e4 0f 84 5a ff ff ff 48 89 ef e8 5f 18 71 f9 84 c0 75 90 be c8 00 00 00 48 89 ef e8 be 89 1f fa 85 c0 0f 85 7b ff ff ff <0f> 0b 41 bc ea ff ff ff e9 71 ff ff ff e8 84 7f 1f fa e9 d0 fe ff
     RSP: 0018:ffffb09880b6f5f0 EFLAGS: 00010246
     RAX: 0000000000000000 RBX: ffff99401f15d6a8 RCX: 0000000000000000
     RDX: 0000000000000001 RSI: ffffffffbac8234b RDI: 00000000ffffffff
     RBP: ffff99401f15d6d0 R08: 0000000000000001 R09: 0000000000000001
     R10: 0000000000002d82 R11: 0000000000000000 R12: 0000000000000001
     R13: ffff994101eff208 R14: ffffb09880b6f6a0 R15: 00000000fffffe00
     FS:  00007fe113904740(0000) GS:ffff99413bc00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007ff6cde656c8 CR3: 000000001f108004 CR4: 00000000001706f0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      rxe_dealloc_pd+0x16/0x20 [rdma_rxe]
      ib_dealloc_pd_user+0x4b/0x80 [ib_core]
      rtrs_ib_dev_put+0x79/0xd0 [rtrs_core]
      destroy_con_cq_qp+0x8a/0xa0 [rtrs_client]
      init_path+0x1e7/0x9a0 [rtrs_client]
      ? __pfx_autoremove_wake_function+0x10/0x10
      ? lock_is_held_type+0xd7/0x130
      ? rcu_read_lock_sched_held+0x43/0x80
      ? pcpu_alloc+0x3dd/0x7d0
      ? rtrs_clt_init_stats+0x18/0x40 [rtrs_client]
      rtrs_clt_open+0x24f/0x5a0 [rtrs_client]
      ? __pfx_rnbd_clt_link_ev+0x10/0x10 [rnbd_client]
      rnbd_clt_map_device+0x6a5/0xe10 [rnbd_client]
    
    Fixes: 6a98d71daea1 ("RDMA/rtrs: client: main functionality")
    Link: https://lore.kernel.org/r/1682384563-2-4-git-send-email-lizhijian@fujitsu.com
    Signed-off-by: Li Zhijian <lizhijian@fujitsu.com>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Tested-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01bbead3098b214812dd49505ec6d2672c4e102c
Author: Li Zhijian <lizhijian@fujitsu.com>
Date:   Tue Apr 25 01:02:42 2023 +0000

    RDMA/rtrs: Fix the last iu->buf leak in err path
    
    [ Upstream commit 3bf3a7c6985c625f64e73baefdaa36f1c2045a29 ]
    
    The last iu->buf will leak if ib_dma_mapping_error() fails.
    
    Fixes: c0894b3ea69d ("RDMA/rtrs: core: lib functions shared between client and server modules")
    Link: https://lore.kernel.org/r/1682384563-2-3-git-send-email-lizhijian@fujitsu.com
    Signed-off-by: Li Zhijian <lizhijian@fujitsu.com>
    Acked-by: Guoqing Jiang <guoqing.jiang@linux.dev>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1938f080a183aed73be79d024816ddc6dfdf2cc1
Author: Elson Roy Serrao <quic_eserrao@quicinc.com>
Date:   Thu Jun 1 14:27:30 2023 -0700

    usb: dwc3: gadget: Reset num TRBs before giving back the request
    
    commit 00f8205ffcf112dcef14f8151d78075d38d22c08 upstream.
    
    Consider a scenario where cable disconnect happens when there is an active
    usb reqest queued to the UDC. As part of the disconnect we would issue an
    end transfer with no interrupt-on-completion before giving back this
    request. Since we are giving back the request without skipping TRBs the
    num_trbs field of dwc3_request still holds the stale value previously used.
    Function drivers re-use same request for a given bind-unbind session and
    hence their dwc3_request context gets preserved across cable
    disconnect/connect. When such a request gets re-queued after cable connect,
    we would increase the num_trbs field on top of the previous stale value
    thus incorrectly representing the number of TRBs used. Fix this by
    resetting num_trbs field before giving back the request.
    
    Fixes: 09fe1f8d7e2f ("usb: dwc3: gadget: track number of TRBs per request")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Elson Roy Serrao <quic_eserrao@quicinc.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Message-ID: <1685654850-8468-1-git-send-email-quic_eserrao@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed0295504905d07192a1e6e0eb92f0906ed514e4
Author: Bernhard Seibold <mail@bernhard-seibold.de>
Date:   Fri Jun 2 15:30:29 2023 +0200

    serial: lantiq: add missing interrupt ack
    
    commit 306320034e8fbe7ee1cc4f5269c55658b4612048 upstream.
    
    Currently, the error interrupt is never acknowledged, so once active it
    will stay active indefinitely, causing the handler to be called in an
    infinite loop.
    
    Fixes: 2f0fc4159a6a ("SERIAL: Lantiq: Add driver for MIPS Lantiq SOCs.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Bernhard Seibold <mail@bernhard-seibold.de>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Message-ID: <20230602133029.546-1-mail@bernhard-seibold.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 235845b576c5b49948a8fefe55c1fbbb851e58e6
Author: Jerry Meng <jerry-meng@foxmail.com>
Date:   Wed May 31 11:51:16 2023 +0800

    USB: serial: option: add Quectel EM061KGL series
    
    commit f1832e2b5e498e258b090af3b065b85cf8cc5161 upstream.
    
    Add support for Quectel EM061KGL series which are based on Qualcomm
    SDX12 chip:
    
    EM061KGL_LTA(0x2c7c / 0x0123): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    EM061KGL_LMS(0x2c7c / 0x0124): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    EM061KGL_LWW(0x2c7c / 0x6008): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    EM061KGL_LCN(0x2c7c / 0x6009): MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    
    Above products use the exact same interface layout and
    option driver is for interfaces DIAG, NMEA and AT.
    
    T:  Bus=03 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  5 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=6008 Rev= 5.04
    S:  Manufacturer=Quectel
    S:  Product=Quectel EM061K-GL
    S:  SerialNumber=f6fa08b6
    C:* #Ifs= 8 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=82(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=70 Driver=(none)
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 7 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=80 Driver=(none)
    E:  Ad=8f(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Jerry Meng <jerry-meng@foxmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e05e9cca77973b27a56a0f0aedf094aa609baf24
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue May 30 08:48:29 2023 +0300

    thunderbolt: Mask ring interrupt on Intel hardware as well
    
    commit 9f9666e65359d5047089aef97ac87c50f624ecb0 upstream.
    
    When resuming from system sleep states the driver issues following
    warning on Intel hardware:
    
      thunderbolt 0000:07:00.0: interrupt for TX ring 0 is already enabled
    
    The reason for this is that the commit in question did not mask the ring
    interrupt on Intel hardware leaving the interrupt active. Fix this by
    masking it also in Intel hardware.
    
    Reported-by: beld zhang <beldzhang@gmail.com>
    Tested-by: beld zhang <beldzhang@gmail.com>
    Closes: https://lore.kernel.org/linux-usb/ZHKW5NeabmfhgLbY@debian.me/
    Fixes: c4af8e3fecd0 ("thunderbolt: Clear registers properly when auto clear isn't in use")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bd227610c83feb3d7b239bc491d2ccdd1d5b291
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Mar 29 13:23:04 2023 +0300

    thunderbolt: dma_test: Use correct value for absent rings when creating paths
    
    commit 70c2e03e9aaf17496c63f6e42333c012f5ae5307 upstream.
    
    Both tb_xdomain_enable_paths() and tb_xdomain_disable_paths() expect -1,
    not 0, if the corresponding ring is not needed. For this reason change
    the driver to use correct value for the rings that are not needed.
    
    Fixes: 180b0689425c ("thunderbolt: Allow multiple DMA tunnels over a single XDomain connection")
    Cc: stable@vger.kernel.org
    Reported-by: Pengfei Xu <pengfei.xu@intel.com>
    Tested-by: Pengfei Xu <pengfei.xu@intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a974abc09761c05fef697fe229d1b85a7ce3918
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Wed Aug 17 17:43:21 2022 -0700

    Remove DECnet support from kernel
    
    commit 1202cdd665315c525b5237e96e0bedc76d7e754f upstream.
    
    DECnet is an obsolete network protocol that receives more attention
    from kernel janitors than users. It belongs in computer protocol
    history museum not in Linux kernel.
    
    It has been "Orphaned" in kernel since 2010. The iproute2 support
    for DECnet was dropped in 5.0 release. The documentation link on
    Sourceforge says it is abandoned there as well.
    
    Leave the UAPI alone to keep userspace programs compiling.
    This means that there is still an empty neighbour table
    for AF_DECNET.
    
    The table of /proc/sys/net entries was updated to match
    current directories and reformatted to be alphabetical.
    
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Acked-by: David Ahern <dsahern@kernel.org>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28010d3a9a225edb8cdd397b2452b1eca350a9d2
Author: Edson Juliano Drosdeck <edson.drosdeck@gmail.com>
Date:   Fri Jun 9 17:10:58 2023 -0300

    ALSA: hda/realtek: Add a quirk for Compaq N14JP6
    
    commit a2a871483161014f1bcc4e9a04354b01aa77cedb upstream.
    
    Add a quirk for Compaq N14JP6 to fixup ALC897 headset MIC no sound.
    
    Signed-off-by: Edson Juliano Drosdeck <edson.drosdeck@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230609201058.523499-1-edson.drosdeck@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 203a01ae57325720c2315ae711a9000ac00cdfd9
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Jun 6 11:14:04 2023 -0400

    drm/amdgpu: add missing radeon secondary PCI ID
    
    commit e61f67749b351c19455ce3085af2ae9af80023bc upstream.
    
    0x5b70 is a missing RV370 secondary id.  Add it so
    we don't try and probe it with amdgpu.
    
    Cc: michel@daenzer.net
    Reviewed-by: Michel Dänzer <mdaenzer@redhat.com>
    Tested-by: Michel Dänzer <mdaenzer@redhat.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1b64a76b775c5a681fe42b79645dbfb5eea902b
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Thu May 25 08:37:40 2023 -0400

    drm/amd/display: edp do not add non-edid timings
    
    commit e749dd10e5f292061ad63d2b030194bf7d7d452c upstream.
    
    [Why] most edp support only timings from edid. applying
    non-edid timings, especially those timings out of edp
    bandwidth, may damage edp.
    
    [How] do not add non-edid timings for edp.
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Roman Li <roman.li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98c8c0f2b3a52566d3e5a3b87208442f6ed00441
Author: Wes Huang <wes.huang@moxa.com>
Date:   Thu Jun 8 11:01:42 2023 +0800

    net: usb: qmi_wwan: add support for Compal RXM-G1
    
    commit 863199199713908afaa47ba09332b87621c12496 upstream.
    
    Add support for Compal RXM-G1 which is based on Qualcomm SDX55 chip.
    This patch adds support for two compositions:
    
    0x9091: DIAG + MODEM + QMI_RMNET + ADB
    0x90db: DIAG + DUN + RMNET + DPL + QDSS(Trace) + ADB
    
    T:  Bus=03 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=05c6 ProdID=9091 Rev= 4.14
    S:  Manufacturer=QCOM
    S:  Product=SDXPRAIRIE-MTP _SN:719AB680
    S:  SerialNumber=719ab680
    C:* #Ifs= 4 Cfg#= 1 Atr=80 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E:  Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=84(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=85(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    T:  Bus=03 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=05c6 ProdID=90db Rev= 4.14
    S:  Manufacturer=QCOM
    S:  Product=SDXPRAIRIE-MTP _SN:719AB680
    S:  SerialNumber=719ab680
    C:* #Ifs= 6 Cfg#= 1 Atr=80 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E:  Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=84(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=8f(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=85(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Wes Huang <wes.huang@moxa.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20230608030141.3546-1-wes.huang@moxa.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd81222d1a6948739edc9b2976545eeb2c806a51
Author: Edward Srouji <edwards@nvidia.com>
Date:   Mon Jun 5 13:33:24 2023 +0300

    RDMA/uverbs: Restrict usage of privileged QKEYs
    
    commit 0cadb4db79e1d9eea66711c4031e435c2191907e upstream.
    
    According to the IB specification rel-1.6, section 3.5.3:
    "QKEYs with the most significant bit set are considered controlled
    QKEYs, and a HCA does not allow a consumer to arbitrarily specify a
    controlled QKEY."
    
    Thus, block non-privileged users from setting such a QKEY.
    
    Cc: stable@vger.kernel.org
    Fixes: bc38a6abdd5a ("[PATCH] IB uverbs: core implementation")
    Signed-off-by: Edward Srouji <edwards@nvidia.com>
    Link: https://lore.kernel.org/r/c00c809ddafaaf87d6f6cb827978670989a511b3.1685960567.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14c30c2439dc6546674ed2d433468b96194d79ba
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Jun 15 12:22:11 2023 +1000

    nouveau: fix client work fence deletion race
    
    commit c8a5d5ea3ba6a18958f8d76430e4cd68eea33943 upstream.
    
    This seems to have existed for ever but is now more apparant after
    commit 9bff18d13473 ("drm/ttm: use per BO cleanup workers")
    
    My analysis: two threads are running, one in the irq signalling the
    fence, in dma_fence_signal_timestamp_locked, it has done the
    DMA_FENCE_FLAG_SIGNALLED_BIT setting, but hasn't yet reached the
    callbacks.
    
    The second thread in nouveau_cli_work_ready, where it sees the fence is
    signalled, so then puts the fence, cleanups the object and frees the
    work item, which contains the callback.
    
    Thread one goes again and tries to call the callback and causes the
    use-after-free.
    
    Proposed fix: lock the fence signalled check in nouveau_cli_work_ready,
    so either the callbacks are done or the memory is freed.
    
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Fixes: 11e451e74050 ("drm/nouveau: remove fence wait code from deferred client work handler")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Link: https://lore.kernel.org/dri-devel/20230615024008.1600281-1-airlied@gmail.com/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4c5eebb37a23d65a0a02ad36914439c77e7360d
Author: Li Lingfeng <lilingfeng3@huawei.com>
Date:   Tue Jun 6 20:20:24 2023 +0800

    dm thin metadata: check fail_io before using data_sm
    
    commit cb65b282c9640c27d3129e2e04b711ce1b352838 upstream.
    
    Must check pmd->fail_io before using pmd->data_sm since
    pmd->data_sm may be destroyed by other processes.
    
           P1(kworker)                             P2(message)
    do_worker
     process_prepared
      process_prepared_discard_passdown_pt2
       dm_pool_dec_data_range
                                        pool_message
                                         commit
                                          dm_pool_commit_metadata
                                            ↓
                                           // commit failed
                                          metadata_operation_failed
                                           abort_transaction
                                            dm_pool_abort_metadata
                                             __open_or_format_metadata
                                               ↓
                                              dm_sm_disk_open
                                                ↓
                                               // open failed
                                               // pmd->data_sm is NULL
        dm_sm_dec_blocks
          ↓
         // try to access pmd->data_sm --> UAF
    
    As shown above, if dm_pool_commit_metadata() and
    dm_pool_abort_metadata() fail in pool_message process, kworker may
    trigger UAF.
    
    Fixes: be500ed721a6 ("dm space maps: improve performance with inc/dec on ranges of blocks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Li Lingfeng <lilingfeng3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee09c0b1b0f49d02269c4e4f087d33cc847b9f65
Author: Lukasz Tyl <ltyl@hem-e.com>
Date:   Wed Jun 14 14:25:24 2023 +0200

    ALSA: usb-audio: Add quirk flag for HEM devices to enable native DSD playback
    
    commit 122e2cb7e1a30438cc0e8bf70d4279db245d7d5b upstream.
    
    This commit adds new DEVICE_FLG with QUIRK_FLAG_DSD_RAW and Vendor Id for
    HEM devices which supports native DSD. Prior to this change Linux kernel
    was not enabling native DSD playback for HEM devices, and as a result,
    DSD audio was being converted to PCM "on the fly". HEM devices,
    when connected to the system, would only play audio in PCM format,
    even if the source material was in DSD format. With the addition of new
    VENDOR_FLG in the quircks.c file, the devices are now correctly
    recognized, and raw DSD data is transmitted to the device,
    allowing for native DSD playback.
    
    Signed-off-by: Lukasz Tyl <ltyl@hem-e.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230614122524.30271-1-ltyl@hem-e.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 953cc0bf2d5b2eb300509db13b96e6bac5b918f0
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Fri May 19 16:47:38 2023 +0200

    powerpc/purgatory: remove PGO flags
    
    commit 20188baceb7a1463dc0bcb0c8678b69c2f447df6 upstream.
    
    If profile-guided optimization is enabled, the purgatory ends up with
    multiple .text sections.  This is not supported by kexec and crashes the
    system.
    
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-3-b05c520b7296@chromium.org
    Fixes: 930457057abe ("kernel/kexec_file.c: split up __kexec_load_puragory")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: <stable@vger.kernel.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Palmer Dabbelt <palmer@rivosinc.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Philipp Rudo <prudo@redhat.com>
    Cc: Ross Zwisler <zwisler@google.com>
    Cc: Simon Horman <horms@kernel.org>
    Cc: Steven Rostedt (Google) <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Rix <trix@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit faf45f2c5e62428f394bd3903f16ad9d0c994d52
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Fri May 19 16:47:37 2023 +0200

    x86/purgatory: remove PGO flags
    
    commit 97b6b9cbba40a21c1d9a344d5c1991f8cfbf136e upstream.
    
    If profile-guided optimization is enabled, the purgatory ends up with
    multiple .text sections.  This is not supported by kexec and crashes the
    system.
    
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-2-b05c520b7296@chromium.org
    Fixes: 930457057abe ("kernel/kexec_file.c: split up __kexec_load_puragory")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Cc: <stable@vger.kernel.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Palmer Dabbelt <palmer@rivosinc.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Philipp Rudo <prudo@redhat.com>
    Cc: Ross Zwisler <zwisler@google.com>
    Cc: Simon Horman <horms@kernel.org>
    Cc: Steven Rostedt (Google) <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Rix <trix@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d38e051ec6fd8650b139d9bc4b0b8b261953b263
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Fri May 19 16:47:36 2023 +0200

    kexec: support purgatories with .text.hot sections
    
    commit 8652d44f466ad5772e7d1756e9457046189b0dfc upstream.
    
    Patch series "kexec: Fix kexec_file_load for llvm16 with PGO", v7.
    
    When upreving llvm I realised that kexec stopped working on my test
    platform.
    
    The reason seems to be that due to PGO there are multiple .text sections
    on the purgatory, and kexec does not supports that.
    
    
    This patch (of 4):
    
    Clang16 links the purgatory text in two sections when PGO is in use:
    
      [ 1] .text             PROGBITS         0000000000000000  00000040
           00000000000011a1  0000000000000000  AX       0     0     16
      [ 2] .rela.text        RELA             0000000000000000  00003498
           0000000000000648  0000000000000018   I      24     1     8
      ...
      [17] .text.hot.        PROGBITS         0000000000000000  00003220
           000000000000020b  0000000000000000  AX       0     0     1
      [18] .rela.text.hot.   RELA             0000000000000000  00004428
           0000000000000078  0000000000000018   I      24    17     8
    
    And both of them have their range [sh_addr ... sh_addr+sh_size] on the
    area pointed by `e_entry`.
    
    This causes that image->start is calculated twice, once for .text and
    another time for .text.hot. The second calculation leaves image->start
    in a random location.
    
    Because of this, the system crashes immediately after:
    
    kexec_core: Starting new kernel
    
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-0-b05c520b7296@chromium.org
    Link: https://lkml.kernel.org/r/20230321-kexec_clang16-v7-1-b05c520b7296@chromium.org
    Fixes: 930457057abe ("kernel/kexec_file.c: split up __kexec_load_puragory")
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Reviewed-by: Ross Zwisler <zwisler@google.com>
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Reviewed-by: Philipp Rudo <prudo@redhat.com>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Palmer Dabbelt <palmer@rivosinc.com>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Simon Horman <horms@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Rix <trix@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4357336192eda57810c612f2b878194e63f9dbc3
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Wed May 24 18:43:48 2023 +0900

    nilfs2: fix possible out-of-bounds segment allocation in resize ioctl
    
    commit fee5eaecca86afa544355569b831c1f90f334b85 upstream.
    
    Syzbot reports that in its stress test for resize ioctl, the log writing
    function nilfs_segctor_do_construct hits a WARN_ON in
    nilfs_segctor_truncate_segments().
    
    It turned out that there is a problem with the current implementation of
    the resize ioctl, which changes the writable range on the device (the
    range of allocatable segments) at the end of the resize process.
    
    This order is necessary for file system expansion to avoid corrupting the
    superblock at trailing edge.  However, in the case of a file system
    shrink, if log writes occur after truncating out-of-bounds trailing
    segments and before the resize is complete, segments may be allocated from
    the truncated space.
    
    The userspace resize tool was fine as it limits the range of allocatable
    segments before performing the resize, but it can run into this issue if
    the resize ioctl is called alone.
    
    Fix this issue by changing nilfs_sufile_resize() to update the range of
    allocatable segments immediately after successful truncation of segment
    space in case of file system shrink.
    
    Link: https://lkml.kernel.org/r/20230524094348.3784-1-konishi.ryusuke@gmail.com
    Fixes: 4e33f9eab07e ("nilfs2: implement resize ioctl")
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+33494cd0df2ec2931851@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/0000000000005434c405fbbafdc5@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74ea184af91acfc4ef339fb555b4fca435c798a1
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Sat May 13 19:24:28 2023 +0900

    nilfs2: fix incomplete buffer cleanup in nilfs_btnode_abort_change_key()
    
    commit 2f012f2baca140c488e43d27a374029c1e59098d upstream.
    
    A syzbot fault injection test reported that nilfs_btnode_create_block, a
    helper function that allocates a new node block for b-trees, causes a
    kernel BUG for disk images where the file system block size is smaller
    than the page size.
    
    This was due to unexpected flags on the newly allocated buffer head, and
    it turned out to be because the buffer flags were not cleared by
    nilfs_btnode_abort_change_key() after an error occurred during a b-tree
    update operation and the buffer was later reused in that state.
    
    Fix this issue by using nilfs_btnode_delete() to abandon the unused
    preallocated buffer in nilfs_btnode_abort_change_key().
    
    Link: https://lkml.kernel.org/r/20230513102428.10223-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+b0a35a5c1f7e846d3b09@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/000000000000d1d6c205ebc4d512@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 941e7452dfc8d0942c5481c2302fe4947abfc420
Author: Janne Grunau <j@jannau.net>
Date:   Sun Feb 12 13:16:32 2023 +0100

    nios2: dts: Fix tse_mac "max-frame-size" property
    
    commit 85041e12418fd0c08ff972b7729f7971afb361f8 upstream.
    
    The given value of 1518 seems to refer to the layer 2 ethernet frame
    size without 802.1Q tag. Actual use of the "max-frame-size" including in
    the consumer of the "altr,tse-1.0" compatible is the MTU.
    
    Fixes: 95acd4c7b69c ("nios2: Device tree support")
    Fixes: 61c610ec61bb ("nios2: Add Max10 device tree")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Janne Grunau <j@jannau.net>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a8efde4a73573917fd9e228091a69ccd8808859
Author: Luís Henriques <ocfs2-devel@oss.oracle.com>
Date:   Mon May 29 16:26:45 2023 +0100

    ocfs2: check new file size on fallocate call
    
    commit 26a6ffff7de5dd369cdb12e38ba11db682f1dec0 upstream.
    
    When changing a file size with fallocate() the new size isn't being
    checked.  In particular, the FSIZE ulimit isn't being checked, which makes
    fstest generic/228 fail.  Simply adding a call to inode_newsize_ok() fixes
    this issue.
    
    Link: https://lkml.kernel.org/r/20230529152645.32680-1-lhenriques@suse.de
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Reviewed-by: Mark Fasheh <mark@fasheh.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 559b7a0d9f0d372f13f43d9a993763bb9d950cd0
Author: Luís Henriques <ocfs2-devel@oss.oracle.com>
Date:   Mon May 22 11:21:12 2023 +0100

    ocfs2: fix use-after-free when unmounting read-only filesystem
    
    commit 50d927880e0f90d5cb25e897e9d03e5edacc79a8 upstream.
    
    It's trivial to trigger a use-after-free bug in the ocfs2 quotas code using
    fstest generic/452.  After a read-only remount, quotas are suspended and
    ocfs2_mem_dqinfo is freed through ->ocfs2_local_free_info().  When unmounting
    the filesystem, an UAF access to the oinfo will eventually cause a crash.
    
    BUG: KASAN: slab-use-after-free in timer_delete+0x54/0xc0
    Read of size 8 at addr ffff8880389a8208 by task umount/669
    ...
    Call Trace:
     <TASK>
     ...
     timer_delete+0x54/0xc0
     try_to_grab_pending+0x31/0x230
     __cancel_work_timer+0x6c/0x270
     ocfs2_disable_quotas.isra.0+0x3e/0xf0 [ocfs2]
     ocfs2_dismount_volume+0xdd/0x450 [ocfs2]
     generic_shutdown_super+0xaa/0x280
     kill_block_super+0x46/0x70
     deactivate_locked_super+0x4d/0xb0
     cleanup_mnt+0x135/0x1f0
     ...
     </TASK>
    
    Allocated by task 632:
     kasan_save_stack+0x1c/0x40
     kasan_set_track+0x21/0x30
     __kasan_kmalloc+0x8b/0x90
     ocfs2_local_read_info+0xe3/0x9a0 [ocfs2]
     dquot_load_quota_sb+0x34b/0x680
     dquot_load_quota_inode+0xfe/0x1a0
     ocfs2_enable_quotas+0x190/0x2f0 [ocfs2]
     ocfs2_fill_super+0x14ef/0x2120 [ocfs2]
     mount_bdev+0x1be/0x200
     legacy_get_tree+0x6c/0xb0
     vfs_get_tree+0x3e/0x110
     path_mount+0xa90/0xe10
     __x64_sys_mount+0x16f/0x1a0
     do_syscall_64+0x43/0x90
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Freed by task 650:
     kasan_save_stack+0x1c/0x40
     kasan_set_track+0x21/0x30
     kasan_save_free_info+0x2a/0x50
     __kasan_slab_free+0xf9/0x150
     __kmem_cache_free+0x89/0x180
     ocfs2_local_free_info+0x2ba/0x3f0 [ocfs2]
     dquot_disable+0x35f/0xa70
     ocfs2_susp_quotas.isra.0+0x159/0x1a0 [ocfs2]
     ocfs2_remount+0x150/0x580 [ocfs2]
     reconfigure_super+0x1a5/0x3a0
     path_mount+0xc8a/0xe10
     __x64_sys_mount+0x16f/0x1a0
     do_syscall_64+0x43/0x90
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Link: https://lkml.kernel.org/r/20230522102112.9031-1-lhenriques@suse.de
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Tested-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8262a9f3b801236be918c817eb841c8713f70ee4
Author: Benjamin Segall <bsegall@google.com>
Date:   Tue May 30 11:32:28 2023 -0700

    epoll: ep_autoremove_wake_function should use list_del_init_careful
    
    commit 2192bba03d80f829233bfa34506b428f71e531e7 upstream.
    
    autoremove_wake_function uses list_del_init_careful, so should epoll's
    more aggressive variant.  It only doesn't because it was copied from an
    older wait.c rather than the most recent.
    
    [bsegall@google.com: add comment]
      Link: https://lkml.kernel.org/r/xm26bki0ulsr.fsf_-_@google.com
    Link: https://lkml.kernel.org/r/xm26pm6hvfer.fsf@google.com
    Fixes: a16ceb139610 ("epoll: autoremove wakers even more aggressively")
    Signed-off-by: Ben Segall <bsegall@google.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <brauner@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0a24229556957684ba8137453dabe3af318c45c
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Jun 9 13:48:44 2023 +0300

    wifi: cfg80211: fix double lock bug in reg_wdev_chan_valid()
    
    commit 996c3117dae4c02b38a3cb68e5c2aec9d907ec15 upstream.
    
    The locking was changed recently so now the caller holds the wiphy_lock()
    lock.  Taking the lock inside the reg_wdev_chan_valid() function will
    lead to a deadlock.
    
    Fixes: f7e60032c661 ("wifi: cfg80211: fix locking in regulatory disconnect")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/40c4114a-6cb4-4abf-b013-300b598aba65@moroto.mountain
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a65bac4edf96353c1f9f471b8064e53ec6cad4e
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Jun 6 14:34:48 2023 +0200

    wifi: cfg80211: fix locking in regulatory disconnect
    
    commit f7e60032c6618dfd643c7210d5cba2789e2de2e2 upstream.
    
    This should use wiphy_lock() now instead of requiring the
    RTNL, since __cfg80211_leave() via cfg80211_leave() is now
    requiring that lock to be held.
    
    Fixes: a05829a7222e ("cfg80211: avoid holding the RTNL when calling the driver")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e388fce7aec40992eadee654193cad345d62663
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Jun 16 21:12:06 2023 -0600

    io_uring: hold uring mutex around poll removal
    
    Snipped from commit 9ca9fb24d5febccea354089c41f96a8ad0d853f8 upstream.
    
    While reworking the poll hashing in the v6.0 kernel, we ended up
    grabbing the ctx->uring_lock in poll update/removal. This also fixed
    a bug with linked timeouts racing with timeout expiry and poll
    removal.
    
    Bring back just the locking fix for that.
    
    Reported-and-tested-by: Querijn Voet <querijnqyn@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27825a6da78bf7b2345fe5d3579d76a5b3e7cb07
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue May 30 11:01:22 2023 +0100

    irqchip/gic: Correctly validate OF quirk descriptors
    
    [ Upstream commit 91539341a3b6e9c868024a4292455dae36e6f58c ]
    
    When checking for OF quirks, make sure either 'compatible' or 'property'
    is set, and give up otherwise.
    
    This avoids non-OF quirks being randomly applied as they don't have any
    of the OF data that need checking.
    
    Cc: Douglas Anderson <dianders@chromium.org>
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Fixes: 44bd78dd2b88 ("irqchip/gic-v3: Disable pseudo NMIs on Mediatek devices w/ firmware issues")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f50018e2dd87573176a9bbe28b9e8ead392321af
Author: Tatsuki Sugiura <sugi@nemui.org>
Date:   Sat May 20 21:23:50 2023 +0900

    NVMe: Add MAXIO 1602 to bogus nid list.
    
    [ Upstream commit a3a9d63dcd15535e7fdf4c7c1b32bfaed762973a ]
    
    HIKSEMI FUTURE M.2 SSD uses the same dummy nguid and eui64.
    I confirmed it with my two devices.
    
    This patch marks the controller as NVME_QUIRK_BOGUS_NID.
    
    ---------------------------------------------------------
    sugi@tempest:~% sudo nvme id-ctrl /dev/nvme0
    NVME Identify Controller:
    vid       : 0x1e4b
    ssvid     : 0x1e4b
    sn        : 30096022612
    mn        : HS-SSD-FUTURE 2048G
    fr        : SN10542
    rab       : 0
    ieee      : 000000
    cmic      : 0
    mdts      : 7
    cntlid    : 0
    ver       : 0x10400
    rtd3r     : 0x7a120
    rtd3e     : 0x1e8480
    oaes      : 0x200
    ctratt    : 0x2
    rrls      : 0
    cntrltype : 1
    fguid     : 00000000-0000-0000-0000-000000000000
    <snip...>
    ---------------------------------------------------------
    
    ---------------------------------------------------------
    sugi@tempest:~% sudo nvme id-ns /dev/nvme0n1
    NVME Identify Namespace 1:
    <snip...>
    nguid   : 00000000000000000000000000000000
    eui64   : 0000000000000002
    lbaf  0 : ms:0   lbads:9  rp:0 (in use)
    ---------------------------------------------------------
    
    Signed-off-by: Tatsuki Sugiura <sugi@nemui.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4204b539ca73ca2f04d0a0a216d06b7c4355ce1b
Author: Sukrut Bellary <sukrut.bellary@linux.com>
Date:   Wed May 3 16:15:07 2023 -0700

    drm:amd:amdgpu: Fix missing buffer object unlock in failure path
    
    [ Upstream commit 60ecaaf54886b0642d5c4744f7fbf1ff0d6b3e42 ]
    
    smatch warning -
    1) drivers/gpu/drm/amd/amdgpu/gfx_v9_0.c:3615 gfx_v9_0_kiq_resume()
    warn: inconsistent returns 'ring->mqd_obj->tbo.base.resv'.
    
    2) drivers/gpu/drm/amd/amdgpu/gfx_v10_0.c:6901 gfx_v10_0_kiq_resume()
    warn: inconsistent returns 'ring->mqd_obj->tbo.base.resv'.
    
    Signed-off-by: Sukrut Bellary <sukrut.bellary@linux.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cb02d5dc2e2119004776cd5834c070c61914175
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Wed Apr 26 17:40:05 2023 +0100

    xen/blkfront: Only check REQ_FUA for writes
    
    [ Upstream commit b6ebaa8100090092aa602530d7e8316816d0c98d ]
    
    The existing code silently converts read operations with the
    REQ_FUA bit set into write-barrier operations. This results in data
    loss as the backend scribbles zeroes over the data instead of returning
    it.
    
    While the REQ_FUA bit doesn't make sense on a read operation, at least
    one well-known out-of-tree kernel module does set it and since it
    results in data loss, let's be safe here and only look at REQ_FUA for
    writes.
    
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Acked-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20230426164005.2213139-1-ross.lagerwall@citrix.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a75928bb929a9cfa888d274dd623148a94a61565
Author: Maxim Kochetkov <fido_max@inbox.ru>
Date:   Fri May 12 14:03:42 2023 +0300

    ASoC: dwc: move DMA init to snd_soc_dai_driver probe()
    
    [ Upstream commit 011a8719d6105dcb48077ea7a6a88ac019d4aa50 ]
    
    When using DMA mode we are facing with Oops:
    [  396.458157] Unable to handle kernel access to user memory without uaccess routines at virtual address 000000000000000c
    [  396.469374] Oops [#1]
    [  396.471839] Modules linked in:
    [  396.475144] CPU: 0 PID: 114 Comm: arecord Not tainted 6.0.0-00164-g9a8eccdaf2be-dirty #68
    [  396.483619] Hardware name: YMP ELCT FPGA (DT)
    [  396.488156] epc : dmaengine_pcm_open+0x1d2/0x342
    [  396.493227]  ra : dmaengine_pcm_open+0x1d2/0x342
    [  396.498140] epc : ffffffff807fe346 ra : ffffffff807fe346 sp : ffffffc804e138f0
    [  396.505602]  gp : ffffffff817bf730 tp : ffffffd8042c8ac0 t0 : 6500000000000000
    [  396.513045]  t1 : 0000000000000064 t2 : 656e69676e65616d s0 : ffffffc804e13990
    [  396.520477]  s1 : ffffffd801b86a18 a0 : 0000000000000026 a1 : ffffffff816920f8
    [  396.527897]  a2 : 0000000000000010 a3 : fffffffffffffffe a4 : 0000000000000000
    [  396.535319]  a5 : 0000000000000000 a6 : ffffffd801b87040 a7 : 0000000000000038
    [  396.542740]  s2 : ffffffd801b94a00 s3 : 0000000000000000 s4 : ffffffd80427f5e8
    [  396.550153]  s5 : ffffffd80427f5e8 s6 : ffffffd801b44410 s7 : fffffffffffffff5
    [  396.557569]  s8 : 0000000000000800 s9 : 0000000000000001 s10: ffffffff8066d254
    [  396.564978]  s11: ffffffd8059cf768 t3 : ffffffff817d5577 t4 : ffffffff817d5577
    [  396.572391]  t5 : ffffffff817d5578 t6 : ffffffc804e136e8
    [  396.577876] status: 0000000200000120 badaddr: 000000000000000c cause: 000000000000000d
    [  396.586007] [<ffffffff806839f4>] snd_soc_component_open+0x1a/0x68
    [  396.592439] [<ffffffff807fdd62>] __soc_pcm_open+0xf0/0x502
    [  396.598217] [<ffffffff80685d86>] soc_pcm_open+0x2e/0x4e
    [  396.603741] [<ffffffff8066cea4>] snd_pcm_open_substream+0x442/0x68e
    [  396.610313] [<ffffffff8066d1ea>] snd_pcm_open+0xfa/0x212
    [  396.615868] [<ffffffff8066d39c>] snd_pcm_capture_open+0x3a/0x60
    [  396.622048] [<ffffffff8065b35a>] snd_open+0xa8/0x17a
    [  396.627421] [<ffffffff801ae036>] chrdev_open+0xa0/0x218
    [  396.632893] [<ffffffff801a5a28>] do_dentry_open+0x17c/0x2a6
    [  396.638713] [<ffffffff801a6d9a>] vfs_open+0x1e/0x26
    [  396.643850] [<ffffffff801b8544>] path_openat+0x96e/0xc96
    [  396.649518] [<ffffffff801b9390>] do_filp_open+0x7c/0xf6
    [  396.655034] [<ffffffff801a6ff2>] do_sys_openat2+0x8a/0x11e
    [  396.660765] [<ffffffff801a735a>] sys_openat+0x50/0x7c
    [  396.666068] [<ffffffff80003aca>] ret_from_syscall+0x0/0x2
    [  396.674964] ---[ end trace 0000000000000000 ]---
    
    It happens because of play_dma_data/capture_dma_data pointers are NULL.
    Current implementation assigns these pointers at snd_soc_dai_driver
    startup() callback and reset them back to NULL at shutdown(). But
    soc_pcm_open() sequence uses DMA pointers in dmaengine_pcm_open()
    before snd_soc_dai_driver startup().
    Most generic DMA capable I2S drivers use snd_soc_dai_driver probe()
    callback to init DMA pointers only once at probe. So move DMA init
    to dw_i2s_dai_probe and drop shutdown() and startup() callbacks.
    
    Signed-off-by: Maxim Kochetkov <fido_max@inbox.ru>
    Link: https://lore.kernel.org/r/20230512110343.66664-1-fido_max@inbox.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37f7864c1791fbc28ca9614a9b3a086bc2ef9687
Author: Liviu Dudau <liviu@dudau.co.uk>
Date:   Tue May 9 18:29:21 2023 +0100

    mips: Move initrd_start check after initrd address sanitisation.
    
    [ Upstream commit 4897a898a216058dec55e5e5902534e6e224fcdf ]
    
    PAGE_OFFSET is technically a virtual address so when checking the value of
    initrd_start against it we should make sure that it has been sanitised from
    the values passed by the bootloader. Without this change, even with a bootloader
    that passes correct addresses for an initrd, we are failing to load it on MT7621
    boards, for example.
    
    Signed-off-by: Liviu Dudau <liviu@dudau.co.uk>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d6e6542946de7ec193270ac18d7f6f4e87ff8d3
Author: Manuel Lauss <manuel.lauss@gmail.com>
Date:   Thu May 11 17:30:10 2023 +0200

    MIPS: Alchemy: fix dbdma2
    
    [ Upstream commit 2d645604f69f3a772d58ead702f9a8e84ab2b342 ]
    
    Various fixes for the Au1200/Au1550/Au1300 DBDMA2 code:
    
    - skip cache invalidation if chip has working coherency circuitry.
    - invalidate KSEG0-portion of the (physical) data address.
    - force the dma channel doorbell write out to bus immediately with
      a sync.
    
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1907b6148f864f51c20f9e75e7ae9667a4a4f2f7
Author: Manuel Lauss <manuel.lauss@gmail.com>
Date:   Tue May 9 20:57:44 2023 +0200

    MIPS: unhide PATA_PLATFORM
    
    [ Upstream commit 75b18aac6fa39a1720677970cfcb52ecea1eb44c ]
    
    Alchemy DB1200/DB1300 boards can use the pata_platform driver.
    Unhide the config entry in all of MIPS.
    
    Signed-off-by: Manuel Lauss <manuel.lauss@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f50d247b5dcb18fd7ad197f9e8d4a935a7b715a
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 17 15:54:40 2023 +0200

    parisc: Flush gatt writes and adjust gatt mask in parisc_agp_mask_memory()
    
    [ Upstream commit d703797380c540bbeac03f104ebcfc364eaf47cc ]
    
    Flush caches after changing gatt entries and calculate entry according
    to SBA requirements.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 717368977b8e1eece480baa439c9ee912341a6dc
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 17 15:52:30 2023 +0200

    parisc: Improve cache flushing for PCXL in arch_sync_dma_for_cpu()
    
    [ Upstream commit 59fa12646d9f56c842b4d5b6418ed77af625c588 ]
    
    Add comment in arch_sync_dma_for_device() and handle the direction flag in
    arch_sync_dma_for_cpu().
    
    When receiving data from the device (DMA_FROM_DEVICE) unconditionally
    purge the data cache in arch_sync_dma_for_cpu().
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e85809d27820e680fcba119ba94e73c00b72d8f
Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Date:   Wed May 17 13:57:31 2023 -0500

    ASoC: soc-pcm: test if a BE can be prepared
    
    [ Upstream commit e123036be377ddf628226a7c6d4f9af5efd113d3 ]
    
    In the BE hw_params configuration, the existing code checks if any of the
    existing FEs are prepared, running, paused or suspended - and skips the
    configuration in those cases. This allows multiple calls of hw_params
    which the ALSA state machine supports.
    
    This check is not handled for the prepare stage, which can lead to the
    same BE being prepared multiple times. This patch adds a check similar to
    that of the hw_params, with the main difference being that the suspended
    state is allowed: the ALSA state machine allows a transition from
    suspended to prepared with hw_params skipped.
    
    This problem was detected on Intel IPC4/SoundWire devices, where the BE
    dailink .prepare stage is used to configure the SoundWire stream with a
    bank switch. Multiple .prepare calls lead to conflicts with the .trigger
    operation with IPC4 configurations. This problem was not detected earlier
    on Intel devices, HDaudio BE dailinks detect that the link is already
    prepared and skip the configuration, and for IPC3 devices there is no BE
    trigger.
    
    Link: https://github.com/thesofproject/sof/issues/7596
    Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com
    Link: https://lore.kernel.org/r/20230517185731.487124-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68086376a1d25f98ad6f9e559930108dddfd857a
Author: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Date:   Thu May 4 13:58:13 2023 +0200

    btrfs: handle memory allocation failure in btrfs_csum_one_bio
    
    [ Upstream commit 806570c0bb7b4847828c22c4934fcf2dc8fc572f ]
    
    Since f8a53bb58ec7 ("btrfs: handle checksum generation in the storage
    layer") the failures of btrfs_csum_one_bio() are handled via
    bio_end_io().
    
    This means, we can return BLK_STS_RESOURCE from btrfs_csum_one_bio() in
    case the allocation of the ordered sums fails.
    
    This also fixes a syzkaller report, where injecting a failure into the
    kvzalloc() call results in a BUG_ON().
    
    Reported-by: syzbot+d8941552e21eac774778@syzkaller.appspotmail.com
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39ea94952625cea626a1d20afe70fd5c3824fdcb
Author: Qu Wenruo <wqu@suse.com>
Date:   Thu Apr 13 13:57:17 2023 +0800

    btrfs: scrub: try harder to mark RAID56 block groups read-only
    
    [ Upstream commit 7561551e7ba870b9659083b95feb520fb2dacce3 ]
    
    Currently we allow a block group not to be marked read-only for scrub.
    
    But for RAID56 block groups if we require the block group to be
    read-only, then we're allowed to use cached content from scrub stripe to
    reduce unnecessary RAID56 reads.
    
    So this patch would:
    
    - Make btrfs_inc_block_group_ro() try harder
      During my tests, for cases like btrfs/061 and btrfs/064, we can hit
      ENOSPC from btrfs_inc_block_group_ro() calls during scrub.
    
      The reason is if we only have one single data chunk, and trying to
      scrub it, we won't have any space left for any newer data writes.
    
      But this check should be done by the caller, especially for scrub
      cases we only temporarily mark the chunk read-only.
      And newer data writes would always try to allocate a new data chunk
      when needed.
    
    - Return error for scrub if we failed to mark a RAID56 chunk read-only
    
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9df872ec4a2202ac44d69f6ed6e3ec18420f8e51
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue May 16 13:25:40 2023 -0500

    power: supply: Fix logic checking if system is running from battery
    
    [ Upstream commit 95339f40a8b652b5b1773def31e63fc53c26378a ]
    
    The logic used for power_supply_is_system_supplied() counts all power
    supplies and assumes that the system is running from AC if there is
    either a non-battery power-supply reporting to be online or if no
    power-supplies exist at all.
    
    The second rule is for desktop systems, that don't have any
    battery/charger devices. These systems will incorrectly report to be
    powered from battery once a device scope power-supply is registered
    (e.g. a HID device), since these power-supplies increase the counter.
    
    Apart from HID devices, recent dGPUs provide UCSI power supplies on a
    desktop systems. The dGPU by default doesn't have anything plugged in so
    it's 'offline'. This makes power_supply_is_system_supplied() return 0
    with a count of 1 meaning all drivers that use this get a wrong judgement.
    
    To fix this case adjust the logic to also examine the scope of the power
    supply. If the power supply is deemed a device power supply, then don't
    count it.
    
    Cc: Evan Quan <Evan.Quan@amd.com>
    Suggested-by: Lijo Lazar <Lijo.Lazar@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42e6a4a1e0856035c4ec1863cb6a0db9890f37ac
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon May 15 13:13:51 2023 -0700

    irqchip/gic-v3: Disable pseudo NMIs on Mediatek devices w/ firmware issues
    
    [ Upstream commit 44bd78dd2b8897f59b7e3963f088caadb7e4f047 ]
    
    Some Chromebooks with Mediatek SoCs have a problem where the firmware
    doesn't properly save/restore certain GICR registers. Newer
    Chromebooks should fix this issue and we may be able to do firmware
    updates for old Chromebooks. At the moment, the only known issue with
    these Chromebooks is that we can't enable "pseudo NMIs" since the
    priority register can be lost. Enabling "pseudo NMIs" on Chromebooks
    with the problematic firmware causes crashes and freezes.
    
    Let's detect devices with this problem and then disable "pseudo NMIs"
    on them. We'll detect the problem by looking for the presence of the
    "mediatek,broken-save-restore-fw" property in the GIC device tree
    node. Any devices with fixed firmware will not have this property.
    
    Our detection plan works because we never bake a Chromebook's device
    tree into firmware. Instead, device trees are always bundled with the
    kernel. We'll update the device trees of all affected Chromebooks and
    then we'll never enable "pseudo NMI" on a kernel that is bundled with
    old device trees. When a firmware update is shipped that fixes this
    issue it will know to patch the device tree to remove the property.
    
    In order to make this work, the quick detection mechanism of the GICv3
    code is extended to be able to look for properties in addition to
    looking at "compatible".
    
    Reviewed-by: Julius Werner <jwerner@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20230515131353.v2.2.I88dc0a0eb1d9d537de61604cd8994ecc55c0cac1@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2105f2fa5791e8f9f5e5bfa65250dfd870321477
Author: Osama Muhammad <osmtendev@gmail.com>
Date:   Mon May 15 22:29:38 2023 +0500

    regulator: Fix error checking for debugfs_create_dir
    
    [ Upstream commit 2bf1c45be3b8f3a3f898d0756c1282f09719debd ]
    
    This patch fixes the error checking in core.c in debugfs_create_dir.
    The correct way to check if an error occurred is 'IS_ERR' inline function.
    
    Signed-off-by: Osama Muhammad <osmtendev@gmail.com
    Suggested-by: Ivan Orlov <ivan.orlov0322@gmail.com
    Link: https://lore.kernel.org/r/20230515172938.13338-1-osmtendev@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91b3d6aa0722365fa6d71a7193d5cd89afa790e7
Author: Alexandru Sorodoc <ealex95@gmail.com>
Date:   Fri May 12 13:15:17 2023 +0300

    platform/x86: asus-wmi: Ignore WMI events with codes 0x7B, 0xC0
    
    [ Upstream commit 362c1f2ec82cb65940e1c73e15a395a7a891fc6f ]
    
    On ASUS GU604V the key 0x7B is issued when the charger is connected or
    disconnected, and key 0xC0 is issued when an external display is
    connected or disconnected.
    
    This commit maps them to KE_IGNORE to slience kernel messages about
    unknown keys, such as:
    
        kernel: asus_wmi: Unknown key code 0x7b
    
    Signed-off-by: Alexandru Sorodoc <ealex95@gmail.com>
    Link: https://lore.kernel.org/r/20230512101517.47416-1-ealex95@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c845ec79c3cf1ad8df01d2792997be02bf73e5ce
Author: Marek Vasut <marex@denx.de>
Date:   Sun Mar 5 21:52:26 2023 +0100

    power: supply: Ratelimit no data debug output
    
    [ Upstream commit 155c45a25679f571c2ae57d10db843a9dfc63430 ]
    
    Reduce the amount of output this dev_dbg() statement emits into logs,
    otherwise if system software polls the sysfs entry for data and keeps
    getting -ENODATA, it could end up filling the logs up.
    
    This does in fact make systemd journald choke, since during boot the
    sysfs power supply entries are polled and if journald starts at the
    same time, the journal is just being repeatedly filled up, and the
    system stops on trying to start journald without booting any further.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19d09d31dae5ba9f15d6736d37a89c59cd2ef6e3
Author: Milo Spadacini <milo.spadacini@gmail.com>
Date:   Mon May 8 15:18:48 2023 +0200

    tools: gpio: fix debounce_period_us output of lsgpio
    
    [ Upstream commit eb4b8eca1bad98f4b8574558a74f041f9acb5a54 ]
    
    Fix incorrect output that could occur when more attributes are used and
    GPIO_V2_LINE_ATTR_ID_DEBOUNCE is not the first one.
    
    Signed-off-by: Milo Spadacini <milo.spadacini@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c11bb961ca4d2993067debd28b751c7a673eb8d8
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sun Apr 23 17:08:37 2023 +0200

    ARM: dts: vexpress: add missing cache properties
    
    [ Upstream commit 328acc5657c6197753238d7ce0a6924ead829347 ]
    
    As all level 2 and level 3 caches are unified, add required
    cache-unified property to fix warnings like:
    
      vexpress-v2p-ca5s.dtb: cache-controller@2c0f0000: 'cache-unified' is a required property
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20230423150837.118466-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36fdd1d5b40e40cce024ef6a9b1166654d99a97d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:39 2023 +0200

    power: supply: bq27xxx: Use mod_delayed_work() instead of cancel() + schedule()
    
    [ Upstream commit 59dddea9879713423c7b2ade43c423bb71e0d216 ]
    
    Use mod_delayed_work() instead of separate cancel_delayed_work_sync() +
    schedule_delayed_work() calls.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b86c54e6ebe6a28c8647ca892a2fc636e91dc11
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 18:07:32 2023 +0200

    power: supply: sc27xx: Fix external_power_changed race
    
    [ Upstream commit 4d5c129d6c8993fe96e9ae712141eedcb9ca68c2 ]
    
    sc27xx_fgu_external_power_changed() dereferences data->battery,
    which gets sets in ab8500_btemp_probe() like this:
    
            data->battery = devm_power_supply_register(dev, &sc27xx_fgu_desc,
                                                       &fgu_cfg);
    
    As soon as devm_power_supply_register() has called device_add()
    the external_power_changed callback can get called. So there is a window
    where sc27xx_fgu_external_power_changed() may get called while
    data->battery has not been set yet leading to a NULL pointer dereference.
    
    Fixing this is easy. The external_power_changed callback gets passed
    the power_supply which will eventually get stored in data->battery,
    so sc27xx_fgu_external_power_changed() can simply directly use
    the passed in psy argument which is always valid.
    
    After this change sc27xx_fgu_external_power_changed() is reduced to just
    "power_supply_changed(psy);" and it has the same prototype. While at it
    simply replace it with making the external_power_changed callback
    directly point to power_supply_changed.
    
    Cc: Orson Zhai <orsonzhai@gmail.com>
    Cc: Chunyan Zhang <zhang.lyra@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Baolin Wang <baolin.wang@linux.alibaba.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 200d8ad44e048d056d6206248e0b54759141cd06
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 18:07:29 2023 +0200

    power: supply: ab8500: Fix external_power_changed race
    
    [ Upstream commit a5299ce4e96f3e8930e9c051b28d8093ada87b08 ]
    
    ab8500_btemp_external_power_changed() dereferences di->btemp_psy,
    which gets sets in ab8500_btemp_probe() like this:
    
            di->btemp_psy = devm_power_supply_register(dev, &ab8500_btemp_desc,
                                                       &psy_cfg);
    
    As soon as devm_power_supply_register() has called device_add()
    the external_power_changed callback can get called. So there is a window
    where ab8500_btemp_external_power_changed() may get called while
    di->btemp_psy has not been set yet leading to a NULL pointer dereference.
    
    Fixing this is easy. The external_power_changed callback gets passed
    the power_supply which will eventually get stored in di->btemp_psy,
    so ab8500_btemp_external_power_changed() can simply directly use
    the passed in psy argument which is always valid.
    
    And the same applies to ab8500_fg_external_power_changed().
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48992b928785ae7cde4896398697e5a952bcb87c
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Jun 2 11:05:02 2023 +0900

    of: overlay: Fix missing of_node_put() in error case of init_overlay_changeset()
    
    [ Upstream commit 39affd1fdf65983904fafc07cf607cff737eaf30 ]
    
    In init_overlay_changeset(), the variable "node" is from
    of_get_child_by_name(), and the "node" should be discarded in error case.
    
    Fixes: d1651b03c2df ("of: overlay: add overlay symbols to live device tree")
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Link: https://lore.kernel.org/r/20230602020502.11693-1-hayashi.kunihiko@socionext.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 282f0c63cf53348fd350e892c3cce7f48dfbb172
Author: Frank Rowand <frowand.list@gmail.com>
Date:   Wed Apr 20 17:25:05 2022 -0500

    of: overlay: rework overlay apply and remove kfree()s
    
    [ Upstream commit 067c098766c6af667a9002d4e33cf1f3c998abbe ]
    
    Fix various kfree() issues related to of_overlay_apply().
      - Double kfree() of fdt and tree when init_overlay_changeset()
        returns an error.
      - free_overlay_changeset() free the root of the unflattened
        overlay (variable tree) instead of the memory that contains
        the unflattened overlay.
      - For the case of a failure during applying an overlay, move kfree()
        of new_fdt and overlay_mem into free_overlay_changeset(), which
        is called by the function that allocated them.
      - For the case of removing an overlay, the kfree() of new_fdt and
        overlay_mem remains in free_overlay_changeset().
      - Check return value of of_fdt_unflatten_tree() for error instead
        of checking the returned value of overlay_root.
      - When storing pointers to allocated objects in ovcs, do so as
        near to the allocation as possible instead of in deeply layered
        function.
    
    More clearly document policy related to lifetime of pointers into
    overlay memory.
    
    Double kfree()
    Reported-by: Slawomir Stepien <slawomir.stepien@nokia.com>
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20220420222505.928492-3-frowand.list@gmail.com
    Stable-dep-of: 39affd1fdf65 ("of: overlay: Fix missing of_node_put() in error case of init_overlay_changeset()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f306cbfa52b63291e94c81090ad376dcfe616e9
Author: Frank Rowand <frowand.list@gmail.com>
Date:   Wed Apr 20 17:25:04 2022 -0500

    of: overlay: rename variables to be consistent
    
    [ Upstream commit 1e4089667c7c732dd1b92c4c6bc7bd240ca30213 ]
    
    Variables change name across function calls when there is not a good
    reason to do so.  Fix by changing "fdt" to "new_fdt" and "tree" to
    "overlay_root".
    
    The name disparity was confusing when creating the following commit.
    The name changes are in this separate commit to make review of the
    following commmit less complex.
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20220420222505.928492-2-frowand.list@gmail.com
    Stable-dep-of: 39affd1fdf65 ("of: overlay: Fix missing of_node_put() in error case of init_overlay_changeset()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cc40dccad76dda40f1a295173bcba0991af7c6f
Author: Horatio Zhang <Hongkun.Zhang@amd.com>
Date:   Mon May 29 14:23:37 2023 -0400

    drm/amdgpu: fix Null pointer dereference error in amdgpu_device_recover_vram
    
    [ Upstream commit 2a1eb1a343208ce7d6839b73d62aece343e693ff ]
    
    Use the function of amdgpu_bo_vm_destroy to handle the resource release
    of shadow bo. During the amdgpu_mes_self_test, shadow bo released, but
    vmbo->shadow_list was not, which caused a null pointer reference error
    in amdgpu_device_recover_vram when GPU reset.
    
    Fixes: 6c032c37ac3e ("drm/amdgpu: Fix vram recover doesn't work after whole GPU reset (v2)")
    Signed-off-by: xinhui pan <xinhui.pan@amd.com>
    Signed-off-by: Horatio Zhang <Hongkun.Zhang@amd.com>
    Acked-by: Feifei Xu <Feifei.Xu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cf3bf3cc0330cb74586bc4e286dbebdeca16fe4
Author: Kuan-Ting Chen <h3xrabbit@gmail.com>
Date:   Fri May 19 22:59:28 2023 +0900

    ksmbd: fix slab-out-of-bounds read in smb2_handle_negotiate
    
    [ Upstream commit d738950f112c8f40f0515fe967db998e8235a175 ]
    
    Check request_buf length first to avoid out-of-bounds read by
    req->DialectCount.
    
    [ 3350.990282] BUG: KASAN: slab-out-of-bounds in smb2_handle_negotiate+0x35d7/0x3e60
    [ 3350.990282] Read of size 2 at addr ffff88810ad61346 by task kworker/5:0/276
    [ 3351.000406] Workqueue: ksmbd-io handle_ksmbd_work
    [ 3351.003499] Call Trace:
    [ 3351.006473]  <TASK>
    [ 3351.006473]  dump_stack_lvl+0x8d/0xe0
    [ 3351.006473]  print_report+0xcc/0x620
    [ 3351.006473]  kasan_report+0x92/0xc0
    [ 3351.006473]  smb2_handle_negotiate+0x35d7/0x3e60
    [ 3351.014760]  ksmbd_smb_negotiate_common+0x7a7/0xf00
    [ 3351.014760]  handle_ksmbd_work+0x3f7/0x12d0
    [ 3351.014760]  process_one_work+0xa85/0x1780
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kuan-Ting Chen <h3xrabbit@gmail.com>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de091a6e1ff0bd4251c7f98b94ebe30ee08f5c1b
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue May 9 10:47:47 2023 +0200

    test_firmware: fix a memory leak with reqs buffer
    
    [ Upstream commit be37bed754ed90b2655382f93f9724b3c1aae847 ]
    
    Dan Carpenter spotted that test_fw_config->reqs will be leaked if
    trigger_batched_requests_store() is called two or more times.
    The same appears with trigger_batched_requests_async_store().
    
    This bug wasn't trigger by the tests, but observed by Dan's visual
    inspection of the code.
    
    The recommended workaround was to return -EBUSY if test_fw_config->reqs
    is already allocated.
    
    Fixes: 7feebfa487b92 ("test_firmware: add support for request_firmware_into_buf")
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Russ Weight <russell.h.weight@intel.com>
    Cc: Tianfei Zhang <tianfei.zhang@intel.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Colin Ian King <colin.i.king@gmail.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: linux-kselftest@vger.kernel.org
    Cc: stable@vger.kernel.org # v5.4
    Suggested-by: Dan Carpenter <error27@gmail.com>
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Dan Carpenter <dan.carpenter@linaro.org>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/20230509084746.48259-2-mirsad.todorovac@alu.unizg.hr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfb0b366e8ec23d9a9851898d81c829166b8c17b
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue May 9 10:47:45 2023 +0200

    test_firmware: prevent race conditions by a correct implementation of locking
    
    [ Upstream commit 4acfe3dfde685a5a9eaec5555351918e2d7266a1 ]
    
    Dan Carpenter spotted a race condition in a couple of situations like
    these in the test_firmware driver:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            u8 val;
            int ret;
    
            ret = kstrtou8(buf, 10, &val);
            if (ret)
                    return ret;
    
            mutex_lock(&test_fw_mutex);
            *(u8 *)cfg = val;
            mutex_unlock(&test_fw_mutex);
    
            /* Always return full write size even if we didn't consume all */
            return size;
    }
    
    static ssize_t config_num_requests_store(struct device *dev,
                                             struct device_attribute *attr,
                                             const char *buf, size_t count)
    {
            int rc;
    
            mutex_lock(&test_fw_mutex);
            if (test_fw_config->reqs) {
                    pr_err("Must call release_all_firmware prior to changing config\n");
                    rc = -EINVAL;
                    mutex_unlock(&test_fw_mutex);
                    goto out;
            }
            mutex_unlock(&test_fw_mutex);
    
            rc = test_dev_config_update_u8(buf, count,
                                           &test_fw_config->num_requests);
    
    out:
            return rc;
    }
    
    static ssize_t config_read_fw_idx_store(struct device *dev,
                                            struct device_attribute *attr,
                                            const char *buf, size_t count)
    {
            return test_dev_config_update_u8(buf, count,
                                             &test_fw_config->read_fw_idx);
    }
    
    The function test_dev_config_update_u8() is called from both the locked
    and the unlocked context, function config_num_requests_store() and
    config_read_fw_idx_store() which can both be called asynchronously as
    they are driver's methods, while test_dev_config_update_u8() and siblings
    change their argument pointed to by u8 *cfg or similar pointer.
    
    To avoid deadlock on test_fw_mutex, the lock is dropped before calling
    test_dev_config_update_u8() and re-acquired within test_dev_config_update_u8()
    itself, but alas this creates a race condition.
    
    Having two locks wouldn't assure a race-proof mutual exclusion.
    
    This situation is best avoided by the introduction of a new, unlocked
    function __test_dev_config_update_u8() which can be called from the locked
    context and reducing test_dev_config_update_u8() to:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            int ret;
    
            mutex_lock(&test_fw_mutex);
            ret = __test_dev_config_update_u8(buf, size, cfg);
            mutex_unlock(&test_fw_mutex);
    
            return ret;
    }
    
    doing the locking and calling the unlocked primitive, which enables both
    locked and unlocked versions without duplication of code.
    
    The similar approach was applied to all functions called from the locked
    and the unlocked context, which safely mitigates both deadlocks and race
    conditions in the driver.
    
    __test_dev_config_update_bool(), __test_dev_config_update_u8() and
    __test_dev_config_update_size_t() unlocked versions of the functions
    were introduced to be called from the locked contexts as a workaround
    without releasing the main driver's lock and thereof causing a race
    condition.
    
    The test_dev_config_update_bool(), test_dev_config_update_u8() and
    test_dev_config_update_size_t() locked versions of the functions
    are being called from driver methods without the unnecessary multiplying
    of the locking and unlocking code for each method, and complicating
    the code with saving of the return value across lock.
    
    Fixes: 7feebfa487b92 ("test_firmware: add support for request_firmware_into_buf")
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Russ Weight <russell.h.weight@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tianfei Zhang <tianfei.zhang@intel.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Colin Ian King <colin.i.king@gmail.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: linux-kselftest@vger.kernel.org
    Cc: stable@vger.kernel.org # v5.4
    Suggested-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/r/20230509084746.48259-1-mirsad.todorovac@alu.unizg.hr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b5511aa0a5e6711672c1b4032c2d78b037086b2
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Jan 14 10:22:03 2023 +0100

    test_firmware: Use kstrtobool() instead of strtobool()
    
    [ Upstream commit f7d85515bd21902b218370a1a6301f76e4e636ff ]
    
    strtobool() is the same as kstrtobool().
    However, the latter is more used within the kernel.
    
    In order to remove strtobool() and slightly simplify kstrtox.h, switch to
    the other function name.
    
    While at it, include the corresponding header file (<linux/kstrtox.h>)
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/34f04735d20e0138695dd4070651bd860a36b81c.1673688120.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 4acfe3dfde68 ("test_firmware: prevent race conditions by a correct implementation of locking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

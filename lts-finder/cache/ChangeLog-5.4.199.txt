commit a31bd366116cb157fc20d5cdc8a2fd1c0d39ac38
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 16 13:23:32 2022 +0200

    Linux 5.4.199
    
    Link: https://lore.kernel.org/r/20220614183721.656018793@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cc40b1022bbfe6da2dda489006b7ab6548bcd61
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Mon May 23 09:11:49 2022 -0700

    x86/speculation/mmio: Print SMT warning
    
    commit 1dc6ff02c8bf77d71b9b5d11cbc9df77cfb28626 upstream
    
    Similar to MDS and TAA, print a warning if SMT is enabled for the MMIO
    Stale Data vulnerability.
    
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d49c22094e6f698a86dfdfd8f22b2a220e797bd4
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:35:15 2022 -0700

    KVM: x86/speculation: Disable Fill buffer clear within guests
    
    commit 027bbb884be006b05d9c577d6401686053aa789e upstream
    
    The enumeration of MD_CLEAR in CPUID(EAX=7,ECX=0).EDX{bit 10} is not an
    accurate indicator on all CPUs of whether the VERW instruction will
    overwrite fill buffers. FB_CLEAR enumeration in
    IA32_ARCH_CAPABILITIES{bit 17} covers the case of CPUs that are not
    vulnerable to MDS/TAA, indicating that microcode does overwrite fill
    buffers.
    
    Guests running in VMM environments may not be aware of all the
    capabilities/vulnerabilities of the host CPU. Specifically, a guest may
    apply MDS/TAA mitigations when a virtual CPU is enumerated as vulnerable
    to MDS/TAA even when the physical CPU is not. On CPUs that enumerate
    FB_CLEAR_CTRL the VMM may set FB_CLEAR_DIS to skip overwriting of fill
    buffers by the VERW instruction. This is done by setting FB_CLEAR_DIS
    during VMENTER and resetting on VMEXIT. For guests that enumerate
    FB_CLEAR (explicitly asking for fill buffer clear capability) the VMM
    will not use FB_CLEAR_DIS.
    
    Irrespective of guest state, host overwrites CPU buffers before VMENTER
    to protect itself from an MMIO capable guest, as part of mitigation for
    MMIO Stale Data vulnerabilities.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d961592635932bd1ea32a534412a41fb794e2212
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:34:14 2022 -0700

    x86/speculation/mmio: Reuse SRBDS mitigation for SBDS
    
    commit a992b8a4682f119ae035a01b40d4d0665c4a2875 upstream
    
    The Shared Buffers Data Sampling (SBDS) variant of Processor MMIO Stale
    Data vulnerabilities may expose RDRAND, RDSEED and SGX EGETKEY data.
    Mitigation for this is added by a microcode update.
    
    As some of the implications of SBDS are similar to SRBDS, SRBDS mitigation
    infrastructure can be leveraged by SBDS. Set X86_BUG_SRBDS and use SRBDS
    mitigation.
    
    Mitigation is enabled by default; use srbds=off to opt-out. Mitigation
    status can be checked from below file:
    
      /sys/devices/system/cpu/vulnerabilities/srbds
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc64f38b5a3839f14896cb9e2de7614d47151fc3
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:33:13 2022 -0700

    x86/speculation/srbds: Update SRBDS mitigation selection
    
    commit 22cac9c677c95f3ac5c9244f8ca0afdc7c8afb19 upstream
    
    Currently, Linux disables SRBDS mitigation on CPUs not affected by
    MDS and have the TSX feature disabled. On such CPUs, secrets cannot
    be extracted from CPU fill buffers using MDS or TAA. Without SRBDS
    mitigation, Processor MMIO Stale Data vulnerabilities can be used to
    extract RDRAND, RDSEED, and EGETKEY data.
    
    Do not disable SRBDS mitigation by default when CPU is also affected by
    Processor MMIO Stale Data vulnerabilities.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 020ce7495cfccec17693bf58b42282707dece24d
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:32:13 2022 -0700

    x86/speculation/mmio: Add sysfs reporting for Processor MMIO Stale Data
    
    commit 8d50cdf8b8341770bc6367bce40c0c1bb0e1d5b3 upstream
    
    Add the sysfs reporting file for Processor MMIO Stale Data
    vulnerability. It exposes the vulnerability and mitigation state similar
    to the existing files for the other hardware vulnerabilities.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d25482fc96aa2cb24a221295fdd498f40565415
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:31:12 2022 -0700

    x86/speculation/mmio: Enable CPU Fill buffer clearing on idle
    
    commit 99a83db5a605137424e1efe29dc0573d6a5b6316 upstream
    
    When the CPU is affected by Processor MMIO Stale Data vulnerabilities,
    Fill Buffer Stale Data Propagator (FBSDP) can propagate stale data out
    of Fill buffer to uncore buffer when CPU goes idle. Stale data can then
    be exploited with other variants using MMIO operations.
    
    Mitigate it by clearing the Fill buffer before entering idle state.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Co-developed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f898baa2044094accfbe49c846f50fecc58e043
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:30:12 2022 -0700

    x86/bugs: Group MDS, TAA & Processor MMIO Stale Data mitigations
    
    commit e5925fb867290ee924fcf2fe3ca887b792714366 upstream
    
    MDS, TAA and Processor MMIO Stale Data mitigations rely on clearing CPU
    buffers. Moreover, status of these mitigations affects each other.
    During boot, it is important to maintain the order in which these
    mitigations are selected. This is especially true for
    md_clear_update_mitigation() that needs to be called after MDS, TAA and
    Processor MMIO Stale Data mitigation selection is done.
    
    Introduce md_clear_select_mitigation(), and select all these mitigations
    from there. This reflects relationships between these mitigations and
    ensures proper ordering.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0800f1b45bf6d85e5a168db9ae91fb816f0a8c34
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:29:11 2022 -0700

    x86/speculation/mmio: Add mitigation for Processor MMIO Stale Data
    
    commit 8cb861e9e3c9a55099ad3d08e1a3b653d29c33ca upstream
    
    Processor MMIO Stale Data is a class of vulnerabilities that may
    expose data after an MMIO operation. For details please refer to
    Documentation/admin-guide/hw-vuln/processor_mmio_stale_data.rst.
    
    These vulnerabilities are broadly categorized as:
    
    Device Register Partial Write (DRPW):
      Some endpoint MMIO registers incorrectly handle writes that are
      smaller than the register size. Instead of aborting the write or only
      copying the correct subset of bytes (for example, 2 bytes for a 2-byte
      write), more bytes than specified by the write transaction may be
      written to the register. On some processors, this may expose stale
      data from the fill buffers of the core that created the write
      transaction.
    
    Shared Buffers Data Sampling (SBDS):
      After propagators may have moved data around the uncore and copied
      stale data into client core fill buffers, processors affected by MFBDS
      can leak data from the fill buffer.
    
    Shared Buffers Data Read (SBDR):
      It is similar to Shared Buffer Data Sampling (SBDS) except that the
      data is directly read into the architectural software-visible state.
    
    An attacker can use these vulnerabilities to extract data from CPU fill
    buffers using MDS and TAA methods. Mitigate it by clearing the CPU fill
    buffers using the VERW instruction before returning to a user or a
    guest.
    
    On CPUs not affected by MDS and TAA, user application cannot sample data
    from CPU fill buffers using MDS or TAA. A guest with MMIO access can
    still use DRPW or SBDR to extract data architecturally. Mitigate it with
    VERW instruction to clear fill buffers before VMENTER for MMIO capable
    guests.
    
    Add a kernel parameter mmio_stale_data={off|full|full,nosmt} to control
    the mitigation.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae649e0cbf76c665cf3a92dc16ddef27789b0447
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:28:10 2022 -0700

    x86/speculation: Add a common function for MD_CLEAR mitigation update
    
    commit f52ea6c26953fed339aa4eae717ee5c2133c7ff2 upstream
    
    Processor MMIO Stale Data mitigation uses similar mitigation as MDS and
    TAA. In preparation for adding its mitigation, add a common function to
    update all mitigations that depend on MD_CLEAR.
    
      [ bp: Add a newline in md_clear_update_mitigation() to separate
        statements better. ]
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 814ccb6730358c2e30e00cb81fb84f4d480ff34f
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:27:08 2022 -0700

    x86/speculation/mmio: Enumerate Processor MMIO Stale Data bug
    
    commit 51802186158c74a0304f51ab963e7c2b3a2b046f upstream
    
    Processor MMIO Stale Data is a class of vulnerabilities that may
    expose data after an MMIO operation. For more details please refer to
    Documentation/admin-guide/hw-vuln/processor_mmio_stale_data.rst
    
    Add the Processor MMIO Stale Data bug enumeration. A microcode update
    adds new bits to the MSR IA32_ARCH_CAPABILITIES, define them.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91f8147c8371cb228bef738641abcd183d7adaf1
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Thu May 19 20:26:07 2022 -0700

    Documentation: Add documentation for Processor MMIO Stale Data
    
    commit 4419470191386456e0b8ed4eb06a70b0021798a6 upstream
    
    Add the admin guide for Processor MMIO stale data vulnerabilities.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e9f4e8a7aa996b6fcd6ef87047f9cf427bcc29d
Author: Gayatri Kammela <gayatri.kammela@intel.com>
Date:   Thu Jan 21 13:50:04 2021 -0800

    x86/cpu: Add another Alder Lake CPU to the Intel family
    
    commit 6e1239c13953f3c2a76e70031f74ddca9ae57cd3 upstream.
    
    Add Alder Lake mobile CPU model number to Intel family.
    
    Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20210121215004.11618-1-tony.luck@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45e744de251c490851329ce00a68a81e914dd53e
Author: Tony Luck <tony.luck@intel.com>
Date:   Mon Jul 20 21:37:49 2020 -0700

    x86/cpu: Add Lakefield, Alder Lake and Rocket Lake models to the to Intel CPU family
    
    commit e00b62f0b06d0ae2b844049f216807617aff0cdb upstream.
    
    Add three new Intel CPU models.
    
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200721043749.31567-1-tony.luck@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79568d5515709e2281746010bd214ed05502006f
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Mon Dec 16 16:33:44 2019 +0800

    x86/cpu: Add Jasper Lake to Intel family
    
    commit b2d32af0bff402b4c1fce28311759dd1f6af058a upstream.
    
    Japser Lake is an Atom family processor.
    It uses Tremont cores and is targeted at mobile platforms.
    
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e2efaa5dd104bc3e2ecdfbbaf68a4edfb09198d
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Jun 17 07:14:10 2020 -0700

    cpu/speculation: Add prototype for cpu_show_srbds()
    
    commit 2accfa69050c2a0d6fc6106f609208b3e9622b26 upstream.
    
    0-day is not happy that there is no prototype for cpu_show_srbds():
    
    drivers/base/cpu.c:565:16: error: no previous prototype for 'cpu_show_srbds'
    
    Fixes: 7e5b3c267d25 ("x86/speculation: Add Special Register Buffer Data Sampling (SRBDS) mitigation")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200617141410.93338-1-linux@roeck-us.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

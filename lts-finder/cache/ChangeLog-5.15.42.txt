commit c5871dddc145ac70916dac7c3f8366aba55ed9f3
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed May 25 09:57:37 2022 +0200

    Linux 5.15.42
    
    Link: https://lore.kernel.org/r/20220523165823.492309987@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Khalid Masum <khalid.masum.92@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94bf8bfb009fad247d02f12e4c443411c8445412
Author: David Howells <dhowells@redhat.com>
Date:   Sat May 21 08:18:28 2022 +0100

    afs: Fix afs_getattr() to refetch file status if callback break occurred
    
    [ Upstream commit 2aeb8c86d49967552394d5e723f87454cb53f501 ]
    
    If a callback break occurs (change notification), afs_getattr() needs to
    issue an FS.FetchStatus RPC operation to update the status of the file
    being examined by the stat-family of system calls.
    
    Fix afs_getattr() to do this if AFS_VNODE_CB_PROMISED has been cleared
    on a vnode by a callback break.  Skip this if AT_STATX_DONT_SYNC is set.
    
    This can be tested by appending to a file on one AFS client and then
    using "stat -L" to examine its length on a machine running kafs.  This
    can also be watched through tracing on the kafs machine.  The callback
    break is seen:
    
         kworker/1:1-46      [001] .....   978.910812: afs_cb_call: c=0000005f YFSCB.CallBack
         kworker/1:1-46      [001] ...1.   978.910829: afs_cb_break: 100058:23b4c:242d2c2 b=2 s=1 break-cb
         kworker/1:1-46      [001] .....   978.911062: afs_call_done:    c=0000005f ret=0 ab=0 [0000000082994ead]
    
    And then the stat command generated no traffic if unpatched, but with
    this change a call to fetch the status can be observed:
    
                stat-4471    [000] .....   986.744122: afs_make_fs_call: c=000000ab 100058:023b4c:242d2c2 YFS.FetchStatus
                stat-4471    [000] .....   986.745578: afs_call_done:    c=000000ab ret=0 ab=0 [0000000087fc8c84]
    
    Fixes: 08e0e7c82eea ("[AF_RXRPC]: Make the in-kernel AFS filesystem use AF_RXRPC.")
    Reported-by: Markus Suvanto <markus.suvanto@gmail.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Tested-by: Markus Suvanto <markus.suvanto@gmail.com>
    Tested-by: kafs-testing+fedora34_64checkkafs-build-496@auristor.com
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216010
    Link: https://lore.kernel.org/r/165308359800.162686.14122417881564420962.stgit@warthog.procyon.org.uk/ # v1
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7647ddf0ac50bac6ec6cc954ccaa95abac7bf69
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat May 14 10:31:47 2022 +0800

    i2c: mt7621: fix missing clk_disable_unprepare() on error in mtk_i2c_probe()
    
    [ Upstream commit a2537c98a8a3b57002e54a262d180b9490bc7190 ]
    
    Fix the missing clk_disable_unprepare() before return
    from mtk_i2c_probe() in the error handling case.
    
    Fixes: d04913ec5f89 ("i2c: mt7621: Add MediaTek MT7621/7628/7688 I2C driver")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Stefan Roese <sr@denx.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69c5d307dce1560fafcb852f39d7a1bf5e266641
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Mon May 23 19:11:02 2022 +0100

    lockdown: also lock down previous kgdb use
    
    commit eadb2f47a3ced5c64b23b90fd2a3463f63726066 upstream.
    
    KGDB and KDB allow read and write access to kernel memory, and thus
    should be restricted during lockdown.  An attacker with access to a
    serial port (for example, via a hypervisor console, which some cloud
    vendors provide over the network) could trigger the debugger so it is
    important that the debugger respect the lockdown mode when/if it is
    triggered.
    
    Fix this by integrating lockdown into kdb's existing permissions
    mechanism.  Unfortunately kgdb does not have any permissions mechanism
    (although it certainly could be added later) so, for now, kgdb is simply
    and brutally disabled by immediately exiting the gdb stub without taking
    any action.
    
    For lockdowns established early in the boot (e.g. the normal case) then
    this should be fine but on systems where kgdb has set breakpoints before
    the lockdown is enacted than "bad things" will happen.
    
    CVE: CVE-2022-21499
    Co-developed-by: Stephen Brennan <stephen.s.brennan@oracle.com>
    Signed-off-by: Stephen Brennan <stephen.s.brennan@oracle.com>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 649178c0493e4080b2b226b0ef9fa2d834b1b412
Author: Sean Wang <sean.wang@mediatek.com>
Date:   Fri Jan 7 15:30:03 2022 +0800

    mt76: mt7921e: fix possible probe failure after reboot
    
    commit 602cc0c9618a819ab00ea3c9400742a0ca318380 upstream.
    
    It doesn't guarantee the mt7921e gets started with ASPM L0 after each
    machine reboot on every platform.
    
    If mt7921e gets started with not ASPM L0, it would be possible that the
    driver encounters time to time failure in mt7921_pci_probe, like a
    weird chip identifier is read
    
    [  215.514503] mt7921e 0000:05:00.0: ASIC revision: feed0000
    [  216.604741] mt7921e: probe of 0000:05:00.0 failed with error -110
    
    or failing to init hardware because the driver is not allowed to access the
    register until the device is in ASPM L0 state. So, we call
    __mt7921e_mcu_drv_pmctrl in early mt7921_pci_probe to force the device
    to bring back to the L0 state for we can safely access registers in any
    case.
    
    In the patch, we move all functions from dma.c to pci.c and register mt76
    bus operation earilier, that is the __mt7921e_mcu_drv_pmctrl depends on.
    
    Fixes: bf3747ae2e25 ("mt76: mt7921: enable aspm by default")
    Reported-by: Kai-Chuan Hsieh <kaichuan.hsieh@canonical.com>
    Co-developed-by: Deren Wu <deren.wu@mediatek.com>
    Signed-off-by: Deren Wu <deren.wu@mediatek.com>
    Signed-off-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Joakim Tjernlund <joakim.tjernlund@infinera.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2797b550755c0f37df633dfa83e000470e64f8b
Author: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
Date:   Tue Mar 29 10:39:28 2022 -0700

    dt-bindings: pinctrl: aspeed-g6: remove FWQSPID group
    
    commit a29c96a4053dc3c1d39353b61089882f81c6b23d upstream.
    
    FWQSPID is not a group of FWSPID so remove it.
    
    Fixes: 7488838f2315 ("dt-bindings: pinctrl: aspeed: Document AST2600 pinmux")
    Signed-off-by: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Link: https://lore.kernel.org/r/20220329173932.2588289-4-quic_jaehyoo@quicinc.com
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 331c57431f7a134961374dbbbe3d57f1e9553607
Author: Marek Vasut <marex@denx.de>
Date:   Wed May 18 14:28:32 2022 -0700

    Input: ili210x - fix reset timing
    
    commit e4920d42ce0e9c8aafb7f64b6d9d4ae02161e51e upstream.
    
    According to Ilitek "231x & ILI251x Programming Guide" Version: 2.30
    "2.1. Power Sequence", "T4 Chip Reset and discharge time" is minimum
    10ms and "T2 Chip initial time" is maximum 150ms. Adjust the reset
    timings such that T4 is 12ms and T2 is 160ms to fit those figures.
    
    This prevents sporadic touch controller start up failures when some
    systems with at least ILI251x controller boot, without this patch
    the systems sometimes fail to communicate with the touch controller.
    
    Fixes: 201f3c803544c ("Input: ili210x - add reset GPIO support")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Link: https://lore.kernel.org/r/20220518204901.93534-1-marex@denx.de
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 149a25b82ca991c65d989a0148c3ab5d765e5272
Author: Shreyas K K <quic_shrekk@quicinc.com>
Date:   Thu May 12 16:31:34 2022 +0530

    arm64: Enable repeat tlbi workaround on KRYO4XX gold CPUs
    
    [ Upstream commit 51f559d66527e238f9a5f82027bff499784d4eac ]
    
    Add KRYO4XX gold/big cores to the list of CPUs that need the
    repeat TLBI workaround. Apply this to the affected
    KRYO4XX cores (rcpe to rfpe).
    
    The variant and revision bits are implementation defined and are
    different from the their Cortex CPU counterparts on which they are
    based on, i.e., (r0p0 to r3p0) is equivalent to (rcpe to rfpe).
    
    Signed-off-by: Shreyas K K <quic_shrekk@quicinc.com>
    Reviewed-by: Sai Prakash Ranjan <quic_saipraka@quicinc.com>
    Link: https://lore.kernel.org/r/20220512110134.12179-1-quic_shrekk@quicinc.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47840af397bef4ee5c27dbad771f879a267fff38
Author: Grant Grundler <grundler@chromium.org>
Date:   Mon May 9 19:28:26 2022 -0700

    net: atlantic: verify hw_head_ lies within TX buffer ring
    
    [ Upstream commit 2120b7f4d128433ad8c5f503a9584deba0684901 ]
    
    Bounds check hw_head index provided by NIC to verify it lies
    within the TX buffer ring.
    
    Reported-by: Aashay Shringarpure <aashay@google.com>
    Reported-by: Yi Chou <yich@google.com>
    Reported-by: Shervin Oloumi <enlightened@google.com>
    Signed-off-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 948ddbdc56636773401f2cb9c7a932eb9c43ccfd
Author: Grant Grundler <grundler@chromium.org>
Date:   Mon May 9 19:28:25 2022 -0700

    net: atlantic: add check for MAX_SKB_FRAGS
    
    [ Upstream commit 6aecbba12b5c90b26dc062af3b9de8c4b3a2f19f ]
    
    Enforce that the CPU can not get stuck in an infinite loop.
    
    Reported-by: Aashay Shringarpure <aashay@google.com>
    Reported-by: Yi Chou <yich@google.com>
    Reported-by: Shervin Oloumi <enlightened@google.com>
    Signed-off-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d1b336ffb77125661c4ca1020a6844361d30e38
Author: Grant Grundler <grundler@chromium.org>
Date:   Mon May 9 19:28:24 2022 -0700

    net: atlantic: reduce scope of is_rsc_complete
    
    [ Upstream commit 79784d77ebbd3ec516b7a5ce555d979fb7946202 ]
    
    Don't defer handling the err case outside the loop. That's pointless.
    
    And since is_rsc_complete is only used inside this loop, declare
    it inside the loop to reduce it's scope.
    
    Signed-off-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d955f45d1a56638c8d5cb6d7e77df73382916aaa
Author: Grant Grundler <grundler@chromium.org>
Date:   Mon May 9 19:28:23 2022 -0700

    net: atlantic: fix "frag[0] not initialized"
    
    [ Upstream commit 62e0ae0f4020250f961cf8d0103a4621be74e077 ]
    
    In aq_ring_rx_clean(), if buff->is_eop is not set AND
    buff->len < AQ_CFG_RX_HDR_SIZE, then hdr_len remains equal to
    buff->len and skb_add_rx_frag(xxx, *0*, ...) is not called.
    
    The loop following this code starts calling skb_add_rx_frag() starting
    with i=1 and thus frag[0] is never initialized. Since i is initialized
    to zero at the top of the primary loop, we can just reference and
    post-increment i instead of hardcoding the 0 when calling
    skb_add_rx_frag() the first time.
    
    Reported-by: Aashay Shringarpure <aashay@google.com>
    Reported-by: Yi Chou <yich@google.com>
    Reported-by: Shervin Oloumi <enlightened@google.com>
    Signed-off-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd721da2df7a4b6db80ed4ac99b636a2cbb143aa
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue May 10 11:13:16 2022 +0800

    net: stmmac: fix missing pci_disable_device() on error in stmmac_pci_probe()
    
    [ Upstream commit 0807ce0b010418a191e0e4009803b2d74c3245d5 ]
    
    Switch to using pcim_enable_device() to avoid missing pci_disable_device().
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20220510031316.1780409-1-yangyingliang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b076fa169465024ba2abd22300a1c814452bc484
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Fri May 6 17:42:50 2022 +0800

    ethernet: tulip: fix missing pci_disable_device() on error in tulip_init_one()
    
    [ Upstream commit 51ca86b4c9c7c75f5630fa0dbe5f8f0bd98e3c3e ]
    
    Fix the missing pci_disable_device() before return
    from tulip_init_one() in the error handling case.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20220506094250.3630615-1-yangyingliang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc5c5b74075f79f8dcfb8ca3a534f6789df5efe5
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri May 6 10:21:38 2022 +0200

    nl80211: fix locking in nl80211_set_tx_bitrate_mask()
    
    [ Upstream commit f971e1887fdb3ab500c9bebf4b98f62d49a20655 ]
    
    This accesses the wdev's chandef etc., so cannot safely
    be used without holding the lock.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20220506102136.06b7205419e6.I2a87c05fbd8bc5e565e84d190d4cfd2e92695a90@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7140149849d22a41156c12a25602918709dcb9f7
Author: Lina Wang <lina.wang@mediatek.com>
Date:   Thu May 5 13:48:49 2022 +0800

    net: fix wrong network header length
    
    [ Upstream commit cf3ab8d4a797960b4be20565abb3bcd227b18a68 ]
    
    When clatd starts with ebpf offloaing, and NETIF_F_GRO_FRAGLIST is enable,
    several skbs are gathered in skb_shinfo(skb)->frag_list. The first skb's
    ipv6 header will be changed to ipv4 after bpf_skb_proto_6_to_4,
    network_header\transport_header\mac_header have been updated as ipv4 acts,
    but other skbs in frag_list didnot update anything, just ipv6 packets.
    
    udp_queue_rcv_skb will call skb_segment_list to traverse other skbs in
    frag_list and make sure right udp payload is delivered to user space.
    Unfortunately, other skbs in frag_list who are still ipv6 packets are
    updated like the first skb and will have wrong transport header length.
    
    e.g.before bpf_skb_proto_6_to_4,the first skb and other skbs in frag_list
    has the same network_header(24)& transport_header(64), after
    bpf_skb_proto_6_to_4, ipv6 protocol has been changed to ipv4, the first
    skb's network_header is 44,transport_header is 64, other skbs in frag_list
    didnot change.After skb_segment_list, the other skbs in frag_list has
    different network_header(24) and transport_header(44), so there will be 20
    bytes different from original,that is difference between ipv6 header and
    ipv4 header. Just change transport_header to be the same with original.
    
    Actually, there are two solutions to fix it, one is traversing all skbs
    and changing every skb header in bpf_skb_proto_6_to_4, the other is
    modifying frag_list skb's header in skb_segment_list. Considering
    efficiency, adopt the second one--- when the first skb and other skbs in
    frag_list has different network_header length, restore them to make sure
    right udp payload is delivered to user space.
    
    Signed-off-by: Lina Wang <lina.wang@mediatek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f631f9f9d08a7c6e47d2f19d866435fe70c3db5
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri May 6 00:04:13 2022 +0200

    fbdev: Prevent possible use-after-free in fb_release()
    
    [ Upstream commit 89bfd4017e58faaf70411555e7f508495114e90b ]
    
    Most fbdev drivers have issues with the fb_info lifetime, because call to
    framebuffer_release() from their driver's .remove callback, rather than
    doing from fbops.fb_destroy callback.
    
    Doing that will destroy the fb_info too early, while references to it may
    still exist, leading to a use-after-free error.
    
    To prevent this, check the fb_info reference counter when attempting to
    kfree the data structure in framebuffer_release(). That will leak it but
    at least will prevent the mentioned error.
    
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220505220413.365977-1-javierm@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92dc6278dec983f7dfc33f28bb929d5ca92087ac
Author: Javier Martinez Canillas <javierm@redhat.com>
Date:   Wed May 4 13:59:17 2022 +0200

    Revert "fbdev: Make fb_release() return -ENODEV if fbdev was unregistered"
    
    [ Upstream commit 135332f34ba2662bc1e32b5c612e06a8cc41a053 ]
    
    This reverts commit aafa025c76dcc7d1a8c8f0bdefcbe4eb480b2f6a. That commit
    attempted to fix a NULL pointer dereference, caused by the struct fb_info
    associated with a framebuffer device to not longer be valid when the file
    descriptor was closed.
    
    The issue was exposed by commit 27599aacbaef ("fbdev: Hot-unplug firmware
    fb devices on forced removal"), which added a new path that goes through
    the struct device removal instead of directly unregistering the fb.
    
    Most fbdev drivers have issues with the fb_info lifetime, because call to
    framebuffer_release() from their driver's .remove callback, rather than
    doing from fbops.fb_destroy callback. This meant that due to this switch,
    the fb_info was now destroyed too early, while references still existed,
    while before it was simply leaked.
    
    The patch we're reverting here reinstated that leak, hence "fixed" the
    regression. But the proper solution is to fix the drivers to not release
    the fb_info too soon.
    
    Suggested-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220504115917.758787-1-javierm@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e87c228be71c3f054f1ea9770b264ab577068e5
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Wed May 4 11:07:39 2022 +0200

    selftests: add ping test with ping_group_range tuned
    
    [ Upstream commit e71b7f1f44d3d88c677769c85ef0171caf9fc89f ]
    
    The 'ping' utility is able to manage two kind of sockets (raw or icmp),
    depending on the sysctl ping_group_range. By default, ping_group_range is
    set to '1 0', which forces ping to use an ip raw socket.
    
    Let's replay the ping tests by allowing 'ping' to use the ip icmp socket.
    After the previous patch, ipv4 tests results are the same with both kinds
    of socket. For ipv6, there are a lot a new failures (the previous patch
    fixes only two cases).
    
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 020fb19eae9cd398b4d85e2df6bc7a8bd4453d39
Author: Kieran Frewen <kieran.frewen@morsemicro.com>
Date:   Wed Apr 20 04:13:21 2022 +0000

    nl80211: validate S1G channel width
    
    [ Upstream commit 5d087aa759eb82b8208411913f6c2158bd85abc0 ]
    
    Validate the S1G channel width input by user to ensure it matches
    that of the requested channel
    
    Signed-off-by: Kieran Frewen <kieran.frewen@morsemicro.com>
    Signed-off-by: Bassem Dawood <bassem@morsemicro.com>
    Link: https://lore.kernel.org/r/20220420041321.3788789-2-kieran.frewen@morsemicro.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bcc2ab96fce497ab9c7863dd051bdcf0a5018bf
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Apr 20 12:50:38 2022 +0200

    mac80211: fix rx reordering with non explicit / psmp ack policy
    
    [ Upstream commit 5e469ed9764d4722c59562da13120bd2dc6834c5 ]
    
    When the QoS ack policy was set to non explicit / psmp ack, frames are treated
    as not being part of a BA session, which causes extra latency on reordering.
    Fix this by only bypassing reordering for packets with no-ack policy
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20220420105038.36443-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2c54b945864ec727c1590f6ac24a19b3866b76c
Author: Gleb Chesnokov <Chesnokov.G@raidix.com>
Date:   Fri Apr 15 12:42:29 2022 +0000

    scsi: qla2xxx: Fix missed DMA unmap for aborted commands
    
    [ Upstream commit 26f9ce53817a8fd84b69a73473a7de852a24c897 ]
    
    Aborting commands that have already been sent to the firmware can
    cause BUG in qlt_free_cmd(): BUG_ON(cmd->sg_mapped)
    
    For instance:
    
     - Command passes rdx_to_xfer state, maps sgl, sends to the firmware
    
     - Reset occurs, qla2xxx performs ISP error recovery, aborts the command
    
     - Target stack calls qlt_abort_cmd() and then qlt_free_cmd()
    
     - BUG_ON(cmd->sg_mapped) in qlt_free_cmd() occurs because sgl was not
       unmapped
    
    Thus, unmap sgl in qlt_abort_cmd() for commands with the aborted flag set.
    
    Link: https://lore.kernel.org/r/AS8PR10MB4952D545F84B6B1DFD39EC1E9DEE9@AS8PR10MB4952.EURPRD10.PROD.OUTLOOK.COM
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Gleb Chesnokov <Chesnokov.G@raidix.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d711a211844a00b9fc2dd51db25642ab327c63f8
Author: Brian Bunker <brian@purestorage.com>
Date:   Mon May 2 08:09:17 2022 -0700

    scsi: scsi_dh_alua: Properly handle the ALUA transitioning state
    
    [ Upstream commit 6056a92ceb2a7705d61df7ec5370548e96aee258 ]
    
    The handling of the ALUA transitioning state is currently broken. When a
    target goes into this state, it is expected that the target is allowed to
    stay in this state for the implicit transition timeout without a path
    failure. The handler has this logic, but it gets skipped currently.
    
    When the target transitions, there is in-flight I/O from the initiator. The
    first of these responses from the target will be a unit attention letting
    the initiator know that the ALUA state has changed.  The remaining
    in-flight I/Os, before the initiator finds out that the portal state has
    changed, will return not ready, ALUA state is transitioning. The portal
    state will change to SCSI_ACCESS_STATE_TRANSITIONING. This will lead to all
    new I/O immediately failing the path unexpectedly. The path failure happens
    in less than a second instead of the expected successes until the
    transition timer is exceeded.
    
    Allow I/Os to continue while the path is in the ALUA transitioning
    state. The handler already takes care of a target that stays in the
    transitioning state for too long by changing the state to ALUA state
    standby once the transition timeout is exceeded at which point the path
    will fail.
    
    Link: https://lore.kernel.org/r/CAHZQxy+4sTPz9+pY3=7VJH+CLUJsDct81KtnR2be8ycN5mhqTg@mail.gmail.com
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Acked-by: Krishna Kant <krishna.kant@purestorage.com>
    Acked-by: Seamus Connor <sconnor@purestorage.com>
    Signed-off-by: Brian Bunker <brian@purestorage.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b56244bda16e7121d10c28dd035e3a7e091875e
Author: Thomas Richter <tmricht@linux.ibm.com>
Date:   Fri May 20 10:11:58 2022 +0200

    perf bench numa: Address compiler error on s390
    
    [ Upstream commit f8ac1c478424a9a14669b8cef7389b1e14e5229d ]
    
    The compilation on s390 results in this error:
    
      # make DEBUG=y bench/numa.o
      ...
      bench/numa.c: In function ‘__bench_numa’:
      bench/numa.c:1749:81: error: ‘%d’ directive output may be truncated
                  writing between 1 and 11 bytes into a region of size between
                  10 and 20 [-Werror=format-truncation=]
      1749 |        snprintf(tname, sizeof(tname), "process%d:thread%d", p, t);
                                                                   ^~
      ...
      bench/numa.c:1749:64: note: directive argument in the range
                     [-2147483647, 2147483646]
      ...
      #
    
    The maximum length of the %d replacement is 11 characters because of the
    negative sign.  Therefore extend the array by two more characters.
    
    Output after:
    
      # make  DEBUG=y bench/numa.o > /dev/null 2>&1; ll bench/numa.o
      -rw-r--r-- 1 root root 418320 May 19 09:11 bench/numa.o
      #
    
    Fixes: 3aff8ba0a4c9c919 ("perf bench numa: Avoid possible truncation when using snprintf()")
    Suggested-by: Namhyung Kim <namhyung@gmail.com>
    Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Cc: Sven Schnelle <svens@linux.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Link: https://lore.kernel.org/r/20220520081158.2990006-1-tmricht@linux.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dff5463bc750792cbbde2a2ca8210f0c2575a70b
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Wed May 18 07:51:25 2022 -0700

    perf regs x86: Fix arch__intr_reg_mask() for the hybrid platform
    
    [ Upstream commit 01b28e4a58152e8906eeb5f1b55a0c404c48c7c8 ]
    
    The X86 specific arch__intr_reg_mask() is to check whether the kernel
    and hardware can collect XMM registers. But it doesn't work on some
    hybrid platform.
    
    Without the patch on ADL-N:
    
      $ perf record -I?
      available registers: AX BX CX DX SI DI BP SP IP FLAGS CS SS R8 R9 R10
      R11 R12 R13 R14 R15
    
    The config of the test event doesn't contain the PMU information. The
    kernel may fail to initialize it on the correct hybrid PMU and return
    the wrong non-supported information.
    
    Add the PMU information into the config for the hybrid platform. The
    same register set is supported among different hybrid PMUs. Checking
    the first available one is good enough.
    
    With the patch on ADL-N:
    
      $ perf record -I?
      available registers: AX BX CX DX SI DI BP SP IP FLAGS CS SS R8 R9 R10
      R11 R12 R13 R14 R15 XMM0 XMM1 XMM2 XMM3 XMM4 XMM5 XMM6 XMM7 XMM8 XMM9
      XMM10 XMM11 XMM12 XMM13 XMM14 XMM15
    
    Fixes: 6466ec14aaf44ff1 ("perf regs x86: Add X86 specific arch__intr_reg_mask()")
    Reported-by: Ammy Yi <ammy.yi@intel.com>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Acked-by: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Xing Zhengjun <zhengjun.xing@linux.intel.com>
    Link: https://lore.kernel.org/r/20220518145125.1494156-1-kan.liang@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d883b2e9afb1492d13cfff05c4894e1c3c240d5d
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed May 11 09:58:56 2022 +0200

    gpio: mvebu/pwm: Refuse requests with inverted polarity
    
    [ Upstream commit 3ecb10175b1f776f076553c24e2689e42953fef5 ]
    
    The driver doesn't take struct pwm_state::polarity into account when
    configuring the hardware, so refuse requests for inverted polarity.
    
    Fixes: 757642f9a584 ("gpio: mvebu: Add limited PWM support")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7c6ac3cc2b91a58e883995922d4a9cab28a8dc8
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed May 11 10:15:04 2022 +0800

    gpio: gpio-vf610: do not touch other bits when set the target bit
    
    [ Upstream commit 9bf3ac466faa83d51a8fe9212131701e58fdef74 ]
    
    For gpio controller contain register PDDR, when set one target bit,
    current logic will clear all other bits, this is wrong. Use operator
    '|=' to fix it.
    
    Fixes: 659d8a62311f ("gpio: vf610: add imx7ulp support")
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86eac8d7610100b556db7949e24c3cfdb664da04
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu May 19 21:25:12 2022 -0300

    perf build: Fix check for btf__load_from_kernel_by_id() in libbpf
    
    [ Upstream commit 0ae065a5d265bc5ada13e350015458e0c5e5c351 ]
    
    Avi Kivity reported a problem where the __weak
    btf__load_from_kernel_by_id() in tools/perf/util/bpf-event.c was being
    used and it called btf__get_from_id() in tools/lib/bpf/btf.c that in
    turn called back to btf__load_from_kernel_by_id(), resulting in an
    endless loop.
    
    Fix this by adding a feature test to check if
    btf__load_from_kernel_by_id() is available when building perf with
    LIBBPF_DYNAMIC=1, and if not then provide the fallback to the old
    btf__get_from_id(), that doesn't call back to btf__load_from_kernel_by_id()
    since at that time it didn't exist at all.
    
    Tested on Fedora 35 where we have libbpf-devel 0.4.0 with LIBBPF_DYNAMIC
    where we don't have btf__load_from_kernel_by_id() and thus its feature
    test fail, not defining HAVE_LIBBPF_BTF__LOAD_FROM_KERNEL_BY_ID:
    
      $ cat /tmp/build/perf-urgent/feature/test-libbpf-btf__load_from_kernel_by_id.make.output
      test-libbpf-btf__load_from_kernel_by_id.c: In function ‘main’:
      test-libbpf-btf__load_from_kernel_by_id.c:6:16: error: implicit declaration of function ‘btf__load_from_kernel_by_id’ [-Werror=implicit-function-declaration]
          6 |         return btf__load_from_kernel_by_id(20151128, NULL);
            |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      cc1: all warnings being treated as errors
      $
    
      $ nm /tmp/build/perf-urgent/perf | grep btf__load_from_kernel_by_id
      00000000005ba180 T btf__load_from_kernel_by_id
      $
    
      $ objdump --disassemble=btf__load_from_kernel_by_id -S /tmp/build/perf-urgent/perf
    
      /tmp/build/perf-urgent/perf:     file format elf64-x86-64
      <SNIP>
      00000000005ba180 <btf__load_from_kernel_by_id>:
      #include "record.h"
      #include "util/synthetic-events.h"
    
      #ifndef HAVE_LIBBPF_BTF__LOAD_FROM_KERNEL_BY_ID
      struct btf *btf__load_from_kernel_by_id(__u32 id)
      {
        5ba180:     55                      push   %rbp
        5ba181:     48 89 e5                mov    %rsp,%rbp
        5ba184:     48 83 ec 10             sub    $0x10,%rsp
        5ba188:     64 48 8b 04 25 28 00    mov    %fs:0x28,%rax
        5ba18f:     00 00
        5ba191:     48 89 45 f8             mov    %rax,-0x8(%rbp)
        5ba195:     31 c0                   xor    %eax,%eax
             struct btf *btf;
      #pragma GCC diagnostic push
      #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
             int err = btf__get_from_id(id, &btf);
        5ba197:     48 8d 75 f0             lea    -0x10(%rbp),%rsi
        5ba19b:     e8 a0 57 e5 ff          call   40f940 <btf__get_from_id@plt>
        5ba1a0:     89 c2                   mov    %eax,%edx
      #pragma GCC diagnostic pop
    
             return err ? ERR_PTR(err) : btf;
        5ba1a2:     48 98                   cltq
        5ba1a4:     85 d2                   test   %edx,%edx
        5ba1a6:     48 0f 44 45 f0          cmove  -0x10(%rbp),%rax
      }
      <SNIP>
    
    Fixes: 218e7b775d368f38 ("perf bpf: Provide a weak btf__load_from_kernel_by_id() for older libbpf versions")
    Reported-by: Avi Kivity <avi@scylladb.com>
    Link: https://lore.kernel.org/linux-perf-users/f0add43b-3de5-20c5-22c4-70aff4af959f@scylladb.com
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lore.kernel.org/linux-perf-users/YobjjFOblY4Xvwo7@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e80793223252629091ec08b3f8c3e8f162b6507f
Author: Daejun Park <daejun7.park@samsung.com>
Date:   Thu May 19 15:05:29 2022 +0900

    scsi: ufs: core: Fix referencing invalid rsp field
    
    [ Upstream commit d5d92b64408443e113b9742f8f1c35278910dd4d ]
    
    Fix referencing sense data when it is invalid. When the length of the data
    segment is 0, there is no valid information in the rsp field, so
    ufshpb_rsp_upiu() is returned without additional operation.
    
    Link: https://lore.kernel.org/r/252651381.41652940482659.JavaMail.epsvc@epcpadp4
    Fixes: 4b5f49079c52 ("scsi: ufs: ufshpb: L2P map management for HPB read")
    Acked-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Daejun Park <daejun7.park@samsung.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0116a3f25e29af68b323035030b2fa2a7ee74ec
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Apr 7 21:38:56 2022 +0200

    riscv: dts: sifive: fu540-c000: align dma node name with dtschema
    
    [ Upstream commit b17410182b6f98191fbf7f42d3b4a78512769d29 ]
    
    Fixes dtbs_check warnings like:
    
      dma@3000000: $nodename:0: 'dma@3000000' does not match '^dma-controller(@.*)?$'
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20220407193856.18223-1-krzysztof.kozlowski@linaro.org
    Fixes: c5ab54e9945b ("riscv: dts: add support for PDMA device of HiFive Unleashed Rev A00")
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11ad6bab26c826b2fc798276c54109eb0b12e450
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Wed May 18 02:58:40 2022 +0200

    net: bridge: Clear offload_fwd_mark when passing frame up bridge interface.
    
    [ Upstream commit fbb3abdf2223cd0dfc07de85fe5a43ba7f435bdf ]
    
    It is possible to stack bridges on top of each other. Consider the
    following which makes use of an Ethernet switch:
    
           br1
         /    \
        /      \
       /        \
     br0.11    wlan0
       |
       br0
     /  |  \
    p1  p2  p3
    
    br0 is offloaded to the switch. Above br0 is a vlan interface, for
    vlan 11. This vlan interface is then a slave of br1. br1 also has a
    wireless interface as a slave. This setup trunks wireless lan traffic
    over the copper network inside a VLAN.
    
    A frame received on p1 which is passed up to the bridge has the
    skb->offload_fwd_mark flag set to true, indicating that the switch has
    dealt with forwarding the frame out ports p2 and p3 as needed. This
    flag instructs the software bridge it does not need to pass the frame
    back down again. However, the flag is not getting reset when the frame
    is passed upwards. As a result br1 sees the flag, wrongly interprets
    it, and fails to forward the frame to wlan0.
    
    When passing a frame upwards, clear the flag. This is the Rx
    equivalent of br_switchdev_frame_unmark() in br_dev_xmit().
    
    Fixes: f1c2eddf4cb6 ("bridge: switchdev: Use an helper to clear forward mark")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Tested-by: Ido Schimmel <idosch@nvidia.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20220518005840.771575-1-andrew@lunn.ch
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88b937673b3552d54da20f648e61a123f4c1fa67
Author: Ritaro Takenaka <ritarot634@gmail.com>
Date:   Tue May 17 12:55:30 2022 +0200

    netfilter: flowtable: move dst_check to packet path
    
    [ Upstream commit 2738d9d963bd1f06d5114c2b4fa5771a95703991 ]
    
    Fixes sporadic IPv6 packet loss when flow offloading is enabled.
    
    IPv6 route GC and flowtable GC are not synchronized.
    When dst_cache becomes stale and a packet passes through the flow before
    the flowtable GC teardowns it, the packet can be dropped.
    So, it is necessary to check dst every time in packet path.
    
    Fixes: 227e1e4d0d6c ("netfilter: nf_flowtable: skip device lookup from interface index")
    Signed-off-by: Ritaro Takenaka <ritarot634@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1e170b11276326bbf566bb3e79143452aeb9f65
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Mar 18 13:11:24 2022 +0100

    netfilter: flowtable: pass flowtable to nf_flow_table_iterate()
    
    [ Upstream commit 217cff36e885627c41a14e803fc44f9cbc945767 ]
    
    The flowtable object is already passed as argument to
    nf_flow_table_iterate(), do use not data pointer to pass flowtable.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8835ba8c029b5c9ada5666754526c2b00f7ea80
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue May 17 10:44:14 2022 +0200

    netfilter: flowtable: fix TCP flow teardown
    
    [ Upstream commit e5eaac2beb54f0a16ff851125082d9faeb475572 ]
    
    This patch addresses three possible problems:
    
    1. ct gc may race to undo the timeout adjustment of the packet path, leaving
       the conntrack entry in place with the internal offload timeout (one day).
    
    2. ct gc removes the ct because the IPS_OFFLOAD_BIT is not set and the CLOSE
       timeout is reached before the flow offload del.
    
    3. tcp ct is always set to ESTABLISHED with a very long timeout
       in flow offload teardown/delete even though the state might be already
       CLOSED. Also as a remark we cannot assume that the FIN or RST packet
       is hitting flow table teardown as the packet might get bumped to the
       slow path in nftables.
    
    This patch resets IPS_OFFLOAD_BIT from flow_offload_teardown(), so
    conntrack handles the tcp rst/fin packet which triggers the CLOSE/FIN
    state transition.
    
    Moreover, teturn the connection's ownership to conntrack upon teardown
    by clearing the offload flag and fixing the established timeout value.
    The flow table GC thread will asynchonrnously free the flow table and
    hardware offload entries.
    
    Before this patch, the IPS_OFFLOAD_BIT remained set for expired flows on
    which is also misleading since the flow is back to classic conntrack
    path.
    
    If nf_ct_delete() removes the entry from the conntrack table, then it
    calls nf_ct_put() which decrements the refcnt. This is not a problem
    because the flowtable holds a reference to the conntrack object from
    flow_offload_alloc() path which is released via flow_offload_free().
    
    This patch also updates nft_flow_offload to skip packets in SYN_RECV
    state. Since we might miss or bump packets to slow path, we do not know
    what will happen there while we are still in SYN_RECV, this patch
    postpones offload up to the next packet which also aligns to the
    existing behaviour in tc-ct.
    
    flow_offload_teardown() does not reset the existing tcp state from
    flow_offload_fixup_tcp() to ESTABLISHED anymore, packets bump to slow
    path might have already update the state to CLOSE/FIN.
    
    Joint work with Oz and Sven.
    
    Fixes: 1e5b2471bcc4 ("netfilter: nf_flow_table: teardown flow timeout race")
    Signed-off-by: Oz Shlomo <ozsh@nvidia.com>
    Signed-off-by: Sven Auhagen <sven.auhagen@voleatech.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e723f67cf0c716c64f8844c011fca6fee7cacf8b
Author: Kevin Mitchell <kevmitch@arista.com>
Date:   Tue May 17 11:01:05 2022 -0700

    igb: skip phy status check where unavailable
    
    [ Upstream commit 942d2ad5d2e0df758a645ddfadffde2795322728 ]
    
    igb_read_phy_reg() will silently return, leaving phy_data untouched, if
    hw->ops.read_reg isn't set. Depending on the uninitialized value of
    phy_data, this led to the phy status check either succeeding immediately
    or looping continuously for 2 seconds before emitting a noisy err-level
    timeout. This message went out to the console even though there was no
    actual problem.
    
    Instead, first check if there is read_reg function pointer. If not,
    proceed without trying to check the phy status register.
    
    Fixes: b72f3f72005d ("igb: When GbE link up, wait for Remote receiver status condition")
    Signed-off-by: Kevin Mitchell <kevmitch@arista.com>
    Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf6800a394949a8093a823e0707cebc5ab7475f1
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue May 17 11:02:11 2022 -0700

    mptcp: fix checksum byte order
    
    [ Upstream commit ba2c89e0ea74a904d5231643245753d77422e7f5 ]
    
    The MPTCP code typecasts the checksum value to u16 and
    then converts it to big endian while storing the value into
    the MPTCP option.
    
    As a result, the wire encoding for little endian host is
    wrong, and that causes interoperabilty interoperability
    issues with other implementation or host with different endianness.
    
    Address the issue writing in the packet the unmodified __sum16 value.
    
    MPTCP checksum is disabled by default, interoperating with systems
    with bad mptcp-level csum encoding should cause fallback to TCP.
    
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/275
    Fixes: c5b39e26d003 ("mptcp: send out checksum for DSS")
    Fixes: 390b95a5fb84 ("mptcp: receive checksum for DSS")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f67eeb03fea6178fd0792bf61e2f1cc94eb2dc4b
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Fri Jan 7 11:25:24 2022 -0800

    mptcp: reuse __mptcp_make_csum in validate_data_csum
    
    [ Upstream commit 8401e87f5a36d370cbf1e9d4ba602a553ce9324a ]
    
    This patch reused __mptcp_make_csum() in validate_data_csum() instead of
    open-coding.
    
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e66d31618a991a345ef9a1e02f8bc22e23dcfce
Author: Geliang Tang <geliang.tang@suse.com>
Date:   Fri Jan 7 11:25:23 2022 -0800

    mptcp: change the parameter of __mptcp_make_csum
    
    [ Upstream commit c312ee219100e86143a1d3cc10b367bc43a0e0b8 ]
    
    This patch changed the type of the last parameter of __mptcp_make_csum()
    from __sum16 to __wsum. And export this function in protocol.h.
    
    Signed-off-by: Geliang Tang <geliang.tang@suse.com>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37bb8ea1542b70a0716484b23c5a46edc75f34b5
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Apr 20 09:46:17 2022 +0100

    ARM: 9197/1: spectre-bhb: fix loop8 sequence for Thumb2
    
    [ Upstream commit 3cfb3019979666bdf33a1010147363cf05e0f17b ]
    
    In Thumb2, 'b . + 4' produces a branch instruction that uses a narrow
    encoding, and so it does not jump to the following instruction as
    expected. So use W(b) instead.
    
    Fixes: 6c7cb60bff7a ("ARM: fix Thumb2 regression with Spectre BHB")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b88e30dcdf64fc18802fed0d2576334fb5b7e269
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Apr 20 09:44:51 2022 +0100

    ARM: 9196/1: spectre-bhb: enable for Cortex-A15
    
    [ Upstream commit 0dc14aa94ccd8ba35eb17a0f9b123d1566efd39e ]
    
    The Spectre-BHB mitigations were inadvertently left disabled for
    Cortex-A15, due to the fact that cpu_v7_bugs_init() is not called in
    that case. So fix that.
    
    Fixes: b9baf5c8c5c3 ("ARM: Spectre-BHB workaround")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad54e63b832d70df47b2b7910e40373429c9dac3
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue May 17 17:42:31 2022 +0800

    net: af_key: add check for pfkey_broadcast in function pfkey_process
    
    [ Upstream commit 4dc2a5a8f6754492180741facf2a8787f2c415d7 ]
    
    If skb_clone() returns null pointer, pfkey_broadcast() will
    return error.
    Therefore, it should be better to check the return value of
    pfkey_broadcast() and return error if fails.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4048778318167e535eb9c012dabbc986fe8452e3
Author: Maxim Mikityanskiy <maximmi@nvidia.com>
Date:   Tue Apr 12 18:37:03 2022 +0300

    net/mlx5e: Properly block LRO when XDP is enabled
    
    [ Upstream commit cf6e34c8c22fba66bd21244b95ea47e235f68974 ]
    
    LRO is incompatible and mutually exclusive with XDP. However, the needed
    checks are only made when enabling XDP. If LRO is enabled when XDP is
    already active, the command will succeed, and XDP will be skipped in the
    data path, although still enabled.
    
    This commit fixes the bug by checking the XDP status in
    mlx5e_fix_features and disabling LRO if XDP is enabled.
    
    Fixes: 86994156c736 ("net/mlx5e: XDP fast RX drop bpf programs support")
    Signed-off-by: Maxim Mikityanskiy <maximmi@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cec84ed7ca7dcbe405e9ef5904298e7d210f127
Author: Maor Dickman <maord@nvidia.com>
Date:   Mon Mar 21 10:07:44 2022 +0200

    net/mlx5: DR, Fix missing flow_source when creating multi-destination FW table
    
    [ Upstream commit 2c5fc6cd269ad3476da99dad02521d2af4a8e906 ]
    
    In order to support multiple destination FTEs with SW steering
    FW table is created with single FTE with multiple actions and
    SW steering rule forward to it. When creating this table, flow
    source isn't set according to the original FTE.
    
    Fix this by passing the original FTE flow source to the created
    FW table.
    
    Fixes: 34583beea4b7 ("net/mlx5: DR, Create multi-destination table for SW-steering use")
    Signed-off-by: Maor Dickman <maord@nvidia.com>
    Reviewed-by: Yevgeny Kliteynik <kliteyn@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2372405955f9c9c12c35885720553c34ff79931f
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Tue May 17 09:25:30 2022 +0800

    NFC: nci: fix sleep in atomic context bugs caused by nci_skb_alloc
    
    [ Upstream commit 23dd4581350d4ffa23d58976ec46408f8f4c1e16 ]
    
    There are sleep in atomic context bugs when the request to secure
    element of st-nci is timeout. The root cause is that nci_skb_alloc
    with GFP_KERNEL parameter is called in st_nci_se_wt_timeout which is
    a timer handler. The call paths that could trigger bugs are shown below:
    
        (interrupt context 1)
    st_nci_se_wt_timeout
      nci_hci_send_event
        nci_hci_send_data
          nci_skb_alloc(..., GFP_KERNEL) //may sleep
    
       (interrupt context 2)
    st_nci_se_wt_timeout
      nci_hci_send_event
        nci_hci_send_data
          nci_send_data
            nci_queue_tx_data_frags
              nci_skb_alloc(..., GFP_KERNEL) //may sleep
    
    This patch changes allocation mode of nci_skb_alloc from GFP_KERNEL to
    GFP_ATOMIC in order to prevent atomic context sleeping. The GFP_ATOMIC
    flag makes memory allocation operation could be used in atomic context.
    
    Fixes: ed06aeefdac3 ("nfc: st-nci: Rename st21nfcb to st-nci")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20220517012530.75714-1-duoming@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b0c87de277ea2fc5635893502c81bdcaf1d3181
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun May 15 20:07:02 2022 +0200

    net/qla3xxx: Fix a test in ql_reset_work()
    
    [ Upstream commit 5361448e45fac6fb96738df748229432a62d78b6 ]
    
    test_bit() tests if one bit is set or not.
    Here the logic seems to check of bit QL_RESET_PER_SCSI (i.e. 4) OR bit
    QL_RESET_START (i.e. 3) is set.
    
    In fact, it checks if bit 7 (4 | 3 = 7) is set, that is to say
    QL_ADAPTER_UP.
    
    This looks harmless, because this bit is likely be set, and when the
    ql_reset_work() delayed work is scheduled in ql3xxx_isr() (the only place
    that schedule this work), QL_RESET_START or QL_RESET_PER_SCSI is set.
    
    This has been spotted by smatch.
    
    Fixes: 5a4faa873782 ("[PATCH] qla3xxx NIC driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/80e73e33f390001d9c0140ffa9baddf6466a41a2.1652637337.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 212ca7bb55d3d19ac2e9ffe798f486590c82bcbb
Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
Date:   Wed Apr 13 10:13:18 2022 +0300

    clk: at91: generated: consider range when calculating best rate
    
    [ Upstream commit d0031e6fbed955ff8d5f5bbc8fe7382482559cec ]
    
    clk_generated_best_diff() helps in finding the parent and the divisor to
    compute a rate closest to the required one. However, it doesn't take into
    account the request's range for the new rate. Make sure the new rate
    is within the required range.
    
    Fixes: 8a8f4bf0c480 ("clk: at91: clk-generated: create function to find best_diff")
    Signed-off-by: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
    Link: https://lore.kernel.org/r/20220413071318.244912-1-codrin.ciubotariu@microchip.com
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b037a3bedf8cf210cd4007eb2fc1f2088df60d5
Author: Michal Wilczynski <michal.wilczynski@intel.com>
Date:   Sun May 8 19:33:48 2022 -0400

    ice: Fix interrupt moderation settings getting cleared
    
    [ Upstream commit bf13502ed5f941b0777b3fd1e24dac5d93f3886c ]
    
    Adaptive-rx and Adaptive-tx are interrupt moderation settings
    that can be enabled/disabled using ethtool:
    ethtool -C ethX adaptive-rx on/off adaptive-tx on/off
    
    Unfortunately those settings are getting cleared after
    changing number of queues, or in ethtool world 'channels':
    ethtool -L ethX rx 1 tx 1
    
    Clearing was happening due to introduction of bit fields
    in ice_ring_container struct. This way only itr_setting
    bits were rebuilt during ice_vsi_rebuild_set_coalesce().
    
    Introduce an anonymous struct of bitfields and create a
    union to refer to them as a single variable.
    This way variable can be easily saved and restored.
    
    Fixes: 61dc79ced7aa ("ice: Restore interrupt throttle settings after VSI rebuild")
    Signed-off-by: Michal Wilczynski <michal.wilczynski@intel.com>
    Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2fd0fb3baaf2ddc9e9a2f4a606443adfb7ba172
Author: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Date:   Thu Aug 19 13:59:57 2021 +0200

    ice: move ice_container_type onto ice_ring_container
    
    [ Upstream commit dc23715cf30a9acb808f5b08962877c390d3e6ea ]
    
    Currently ice_container_type is scoped only for ice_ethtool.c. Next
    commit that will split the ice_ring struct onto Rx/Tx specific ring
    structs is going to also modify the type of linked list of rings that is
    within ice_ring_container. Therefore, the functions that are taking the
    ice_ring_container as an input argument will need to be aware of a ring
    type that will be looked up.
    
    Embed ice_container_type within ice_ring_container and initialize it
    properly when allocating the q_vectors.
    
    Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 737fbf0c32638e72fc1fb7e278a82f97957e323a
Author: Paul Greenwalt <paul.greenwalt@intel.com>
Date:   Thu Apr 28 14:11:42 2022 -0700

    ice: fix possible under reporting of ethtool Tx and Rx statistics
    
    [ Upstream commit 31b6298fd8e29effe9ed6b77351ac5969be56ce0 ]
    
    The hardware statistics counters are not cleared during resets so the
    drivers first access is to initialize the baseline and then subsequent
    reads are for reporting the counters. The statistics counters are read
    during the watchdog subtask when the interface is up. If the baseline
    is not initialized before the interface is up, then there can be a brief
    window in which some traffic can be transmitted/received before the
    initial baseline reading takes place.
    
    Directly initialize ethtool statistics in driver open so the baseline will
    be initialized when the interface is up, and any dropped packets
    incremented before the interface is up won't be reported.
    
    Fixes: 28dc1b86f8ea9 ("ice: ignore dropped packets during init")
    Signed-off-by: Paul Greenwalt <paul.greenwalt@intel.com>
    Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12fd5b1121177f70745cdd97f2326d020d1c8e25
Author: Arkadiusz Kubalewski <arkadiusz.kubalewski@intel.com>
Date:   Thu Apr 28 10:33:50 2022 +0200

    ice: fix crash when writing timestamp on RX rings
    
    [ Upstream commit 4503cc7fdf9a84cd631b0cb8ecb3c9b1bdbf3594 ]
    
    Do not allow to write timestamps on RX rings if PF is being configured.
    When PF is being configured RX rings can be freed or rebuilt. If at the
    same time timestamps are updated, the kernel will crash by dereferencing
    null RX ring pointer.
    
    PID: 1449   TASK: ff187d28ed658040  CPU: 34  COMMAND: "ice-ptp-0000:51"
     #0 [ff1966a94a713bb0] machine_kexec at ffffffff9d05a0be
     #1 [ff1966a94a713c08] __crash_kexec at ffffffff9d192e9d
     #2 [ff1966a94a713cd0] crash_kexec at ffffffff9d1941bd
     #3 [ff1966a94a713ce8] oops_end at ffffffff9d01bd54
     #4 [ff1966a94a713d08] no_context at ffffffff9d06bda4
     #5 [ff1966a94a713d60] __bad_area_nosemaphore at ffffffff9d06c10c
     #6 [ff1966a94a713da8] do_page_fault at ffffffff9d06cae4
     #7 [ff1966a94a713de0] page_fault at ffffffff9da0107e
        [exception RIP: ice_ptp_update_cached_phctime+91]
        RIP: ffffffffc076db8b  RSP: ff1966a94a713e98  RFLAGS: 00010246
        RAX: 16e3db9c6b7ccae4  RBX: ff187d269dd3c180  RCX: ff187d269cd4d018
        RDX: 0000000000000000  RSI: 0000000000000000  RDI: 0000000000000000
        RBP: ff187d269cfcc644   R8: ff187d339b9641b0   R9: 0000000000000000
        R10: 0000000000000002  R11: 0000000000000000  R12: ff187d269cfcc648
        R13: ffffffff9f128784  R14: ffffffff9d101b70  R15: ff187d269cfcc640
        ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
     #8 [ff1966a94a713ea0] ice_ptp_periodic_work at ffffffffc076dbef [ice]
     #9 [ff1966a94a713ee0] kthread_worker_fn at ffffffff9d101c1b
     #10 [ff1966a94a713f10] kthread at ffffffff9d101b4d
     #11 [ff1966a94a713f50] ret_from_fork at ffffffff9da0023f
    
    Fixes: 77a781155a65 ("ice: enable receive hardware timestamping")
    Signed-off-by: Arkadiusz Kubalewski <arkadiusz.kubalewski@intel.com>
    Reviewed-by: Michal Schmidt <mschmidt@redhat.com>
    Tested-by: Dave Cain <dcain@redhat.com>
    Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e35387a91318ccdec4a30b58d967391e011e34fa
Author: Zixuan Fu <r33s3n6@gmail.com>
Date:   Sat May 14 13:07:11 2022 +0800

    net: vmxnet3: fix possible NULL pointer dereference in vmxnet3_rq_cleanup()
    
    [ Upstream commit edf410cb74dc612fd47ef5be319c5a0bcd6e6ccd ]
    
    In vmxnet3_rq_create(), when dma_alloc_coherent() fails,
    vmxnet3_rq_destroy() is called. It sets rq->rx_ring[i].base to NULL. Then
    vmxnet3_rq_create() returns an error to its callers mxnet3_rq_create_all()
    -> vmxnet3_change_mtu(). Then vmxnet3_change_mtu() calls
    vmxnet3_force_close() -> dev_close() in error handling code. And the driver
    calls vmxnet3_close() -> vmxnet3_quiesce_dev() -> vmxnet3_rq_cleanup_all()
    -> vmxnet3_rq_cleanup(). In vmxnet3_rq_cleanup(),
    rq->rx_ring[ring_idx].base is accessed, but this variable is NULL, causing
    a NULL pointer dereference.
    
    To fix this possible bug, an if statement is added to check whether
    rq->rx_ring[0].base is NULL in vmxnet3_rq_cleanup() and exit early if so.
    
    The error log in our fault-injection testing is shown as follows:
    
    [   65.220135] BUG: kernel NULL pointer dereference, address: 0000000000000008
    ...
    [   65.222633] RIP: 0010:vmxnet3_rq_cleanup_all+0x396/0x4e0 [vmxnet3]
    ...
    [   65.227977] Call Trace:
    ...
    [   65.228262]  vmxnet3_quiesce_dev+0x80f/0x8a0 [vmxnet3]
    [   65.228580]  vmxnet3_close+0x2c4/0x3f0 [vmxnet3]
    [   65.228866]  __dev_close_many+0x288/0x350
    [   65.229607]  dev_close_many+0xa4/0x480
    [   65.231124]  dev_close+0x138/0x230
    [   65.231933]  vmxnet3_force_close+0x1f0/0x240 [vmxnet3]
    [   65.232248]  vmxnet3_change_mtu+0x75d/0x920 [vmxnet3]
    ...
    
    Fixes: d1a890fa37f27 ("net: VMware virtual Ethernet NIC driver: vmxnet3")
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Zixuan Fu <r33s3n6@gmail.com>
    Link: https://lore.kernel.org/r/20220514050711.2636709-1-r33s3n6@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ad09fdef55b70f16f8d385981b864ac75cf1354
Author: Zixuan Fu <r33s3n6@gmail.com>
Date:   Sat May 14 13:06:56 2022 +0800

    net: vmxnet3: fix possible use-after-free bugs in vmxnet3_rq_alloc_rx_buf()
    
    [ Upstream commit 9e7fef9521e73ca8afd7da9e58c14654b02dfad8 ]
    
    In vmxnet3_rq_alloc_rx_buf(), when dma_map_single() fails, rbi->skb is
    freed immediately. Similarly, in another branch, when dma_map_page() fails,
    rbi->page is also freed. In the two cases, vmxnet3_rq_alloc_rx_buf()
    returns an error to its callers vmxnet3_rq_init() -> vmxnet3_rq_init_all()
    -> vmxnet3_activate_dev(). Then vmxnet3_activate_dev() calls
    vmxnet3_rq_cleanup_all() in error handling code, and rbi->skb or rbi->page
    are freed again in vmxnet3_rq_cleanup_all(), causing use-after-free bugs.
    
    To fix these possible bugs, rbi->skb and rbi->page should be cleared after
    they are freed.
    
    The error log in our fault-injection testing is shown as follows:
    
    [   14.319016] BUG: KASAN: use-after-free in consume_skb+0x2f/0x150
    ...
    [   14.321586] Call Trace:
    ...
    [   14.325357]  consume_skb+0x2f/0x150
    [   14.325671]  vmxnet3_rq_cleanup_all+0x33a/0x4e0 [vmxnet3]
    [   14.326150]  vmxnet3_activate_dev+0xb9d/0x2ca0 [vmxnet3]
    [   14.326616]  vmxnet3_open+0x387/0x470 [vmxnet3]
    ...
    [   14.361675] Allocated by task 351:
    ...
    [   14.362688]  __netdev_alloc_skb+0x1b3/0x6f0
    [   14.362960]  vmxnet3_rq_alloc_rx_buf+0x1b0/0x8d0 [vmxnet3]
    [   14.363317]  vmxnet3_activate_dev+0x3e3/0x2ca0 [vmxnet3]
    [   14.363661]  vmxnet3_open+0x387/0x470 [vmxnet3]
    ...
    [   14.367309]
    [   14.367412] Freed by task 351:
    ...
    [   14.368932]  __dev_kfree_skb_any+0xd2/0xe0
    [   14.369193]  vmxnet3_rq_alloc_rx_buf+0x71e/0x8d0 [vmxnet3]
    [   14.369544]  vmxnet3_activate_dev+0x3e3/0x2ca0 [vmxnet3]
    [   14.369883]  vmxnet3_open+0x387/0x470 [vmxnet3]
    [   14.370174]  __dev_open+0x28a/0x420
    [   14.370399]  __dev_change_flags+0x192/0x590
    [   14.370667]  dev_change_flags+0x7a/0x180
    [   14.370919]  do_setlink+0xb28/0x3570
    [   14.371150]  rtnl_newlink+0x1160/0x1740
    [   14.371399]  rtnetlink_rcv_msg+0x5bf/0xa50
    [   14.371661]  netlink_rcv_skb+0x1cd/0x3e0
    [   14.371913]  netlink_unicast+0x5dc/0x840
    [   14.372169]  netlink_sendmsg+0x856/0xc40
    [   14.372420]  ____sys_sendmsg+0x8a7/0x8d0
    [   14.372673]  __sys_sendmsg+0x1c2/0x270
    [   14.372914]  do_syscall_64+0x41/0x90
    [   14.373145]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    ...
    
    Fixes: 5738a09d58d5a ("vmxnet3: fix checks for dma mapping errors")
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Zixuan Fu <r33s3n6@gmail.com>
    Link: https://lore.kernel.org/r/20220514050656.2636588-1-r33s3n6@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c560e90086f8f0761ace9546ecd78a2f9b50907
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun May 15 19:01:56 2022 +0200

    net: systemport: Fix an error handling path in bcm_sysport_probe()
    
    [ Upstream commit ef6b1cd11962aec21c58d137006ab122dbc8d6fd ]
    
    if devm_clk_get_optional() fails, we still need to go through the error
    handling path.
    
    Add the missing goto.
    
    Fixes: 6328a126896ea ("net: systemport: Manage Wake-on-LAN clock")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/99d70634a81c229885ae9e4ee69b2035749f7edc.1652634040.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb0ebbd4b0d4e38d958b8e49bc479711b7e796f7
Author: Pali Rohár <pali@kernel.org>
Date:   Sun May 15 14:58:15 2022 +0200

    Revert "PCI: aardvark: Rewrite IRQ code to chained IRQ handler"
    
    [ Upstream commit a3b69dd0ad6265c29c4b6fb381cd76fb3bebdf8c ]
    
    This reverts commit 1571d67dc190e50c6c56e8f88cdc39f7cc53166e.
    
    This commit broke support for setting interrupt affinity. It looks like
    that it is related to the chained IRQ handler. Revert this commit until
    issue with setting interrupt affinity is fixed.
    
    Fixes: 1571d67dc190 ("PCI: aardvark: Rewrite IRQ code to chained IRQ handler")
    Link: https://lore.kernel.org/r/20220515125815.30157-1-pali@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b329889974aed47e1167c85653c07097013e01a7
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon May 9 14:26:16 2022 +0200

    netfilter: nft_flow_offload: fix offload with pppoe + vlan
    
    [ Upstream commit 2456074935003b66c40f78df6adfc722435d43ea ]
    
    When running a combination of PPPoE on top of a VLAN, we need to set
    info->outdev to the PPPoE device, otherwise PPPoE encap is skipped
    during software offload.
    
    Fixes: 72efd585f714 ("netfilter: flowtable: add pppoe support")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f96b2e06721249ebf8da3254cfef29dcb6583948
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon May 9 14:26:15 2022 +0200

    net: fix dev_fill_forward_path with pppoe + bridge
    
    [ Upstream commit cf2df74e202d81b09f09d84c2d8903e0e87e9274 ]
    
    When calling dev_fill_forward_path on a pppoe device, the provided destination
    address is invalid. In order for the bridge fdb lookup to succeed, the pppoe
    code needs to update ctx->daddr to the correct value.
    Fix this by storing the address inside struct net_device_path_ctx
    
    Fixes: f6efc675c9dd ("net: ppp: resolve forwarding path for bridge pppoe devices")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7613dcaceee281973145588f4244f2f78ef85b7f
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon May 9 14:26:14 2022 +0200

    netfilter: nft_flow_offload: skip dst neigh lookup for ppp devices
    
    [ Upstream commit 45ca3e61999e9a30ca2b7cfbf9da8a9f8d13be31 ]
    
    The dst entry does not contain a valid hardware address, so skip the lookup
    in order to avoid running into errors here.
    The proper hardware address is filled in from nft_dev_path_info
    
    Fixes: 72efd585f714 ("netfilter: flowtable: add pppoe support")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f4197a020c049a59ea7907c31f9ab037dcefefe
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon May 9 14:26:13 2022 +0200

    netfilter: flowtable: fix excessive hw offload attempts after failure
    
    [ Upstream commit 396ef64113a8ba01c46315d67a99db8dde3eef51 ]
    
    If a flow cannot be offloaded, the code currently repeatedly tries again as
    quickly as possible, which can significantly increase system load.
    Fix this by limiting flow timeout update and hardware offload retry to once
    per second.
    
    Fixes: c07531c01d82 ("netfilter: flowtable: Remove redundant hw refresh bit")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c22ee3a0674ca15dfc6dab625b8bc095d1c3b217
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Fri May 13 11:27:06 2022 +0200

    net/sched: act_pedit: sanitize shift argument before usage
    
    [ Upstream commit 4d42d54a7d6aa6d29221d3fd4f2ae9503e94f011 ]
    
    syzbot was able to trigger an Out-of-Bound on the pedit action:
    
    UBSAN: shift-out-of-bounds in net/sched/act_pedit.c:238:43
    shift exponent 1400735974 is too large for 32-bit type 'unsigned int'
    CPU: 0 PID: 3606 Comm: syz-executor151 Not tainted 5.18.0-rc5-syzkaller-00165-g810c2f0a3f86 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     ubsan_epilogue+0xb/0x50 lib/ubsan.c:151
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x187 lib/ubsan.c:322
     tcf_pedit_init.cold+0x1a/0x1f net/sched/act_pedit.c:238
     tcf_action_init_1+0x414/0x690 net/sched/act_api.c:1367
     tcf_action_init+0x530/0x8d0 net/sched/act_api.c:1432
     tcf_action_add+0xf9/0x480 net/sched/act_api.c:1956
     tc_ctl_action+0x346/0x470 net/sched/act_api.c:2015
     rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5993
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2502
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x543/0x7f0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x904/0xe00 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:705 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:725
     ____sys_sendmsg+0x6e2/0x800 net/socket.c:2413
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2467
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2496
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7fe36e9e1b59
    Code: 28 c3 e8 2a 14 00 00 66 2e 0f 1f 84 00 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffef796fe88 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fe36e9e1b59
    RDX: 0000000000000000 RSI: 0000000020000300 RDI: 0000000000000003
    RBP: 00007fe36e9a5d00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe36e9a5d90
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    
    The 'shift' field is not validated, and any value above 31 will
    trigger out-of-bounds. The issue predates the git history, but
    syzbot was able to trigger it only after the commit mentioned in
    the fixes tag, and this change only applies on top of such commit.
    
    Address the issue bounding the 'shift' value to the maximum allowed
    by the relevant operator.
    
    Reported-and-tested-by: syzbot+8ed8fc4c57e9dcf23ca6@syzkaller.appspotmail.com
    Fixes: 8b796475fd78 ("net/sched: act_pedit: really ensure the skb is writable")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 952c2464963895271c31698970e7ec1ad6f0fe45
Author: Eyal Birger <eyal.birger@gmail.com>
Date:   Fri May 13 23:34:02 2022 +0300

    xfrm: fix "disable_policy" flag use when arriving from different devices
    
    [ Upstream commit e6175a2ed1f18bf2f649625bf725e07adcfa6a28 ]
    
    In IPv4 setting the "disable_policy" flag on a device means no policy
    should be enforced for traffic originating from the device. This was
    implemented by seting the DST_NOPOLICY flag in the dst based on the
    originating device.
    
    However, dsts are cached in nexthops regardless of the originating
    devices, in which case, the DST_NOPOLICY flag value may be incorrect.
    
    Consider the following setup:
    
                         +------------------------------+
                         | ROUTER                       |
      +-------------+    | +-----------------+          |
      | ipsec src   |----|-|ipsec0           |          |
      +-------------+    | |disable_policy=0 |   +----+ |
                         | +-----------------+   |eth1|-|-----
      +-------------+    | +-----------------+   +----+ |
      | noipsec src |----|-|eth0             |          |
      +-------------+    | |disable_policy=1 |          |
                         | +-----------------+          |
                         +------------------------------+
    
    Where ROUTER has a default route towards eth1.
    
    dst entries for traffic arriving from eth0 would have DST_NOPOLICY
    and would be cached and therefore can be reused by traffic originating
    from ipsec0, skipping policy check.
    
    Fix by setting a IPSKB_NOPOLICY flag in IPCB and observing it instead
    of the DST in IN/FWD IPv4 policy checks.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Shmulik Ladkani <shmulik.ladkani@gmail.com>
    Signed-off-by: Eyal Birger <eyal.birger@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36d8cca5b46fe41b59f8011553495ede3b693703
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon Mar 14 11:38:22 2022 +0100

    xfrm: rework default policy structure
    
    [ Upstream commit b58b1f563ab78955d37e9e43e02790a85c66ac05 ]
    
    This is a follow up of commit f8d858e607b2 ("xfrm: make user policy API
    complete"). The goal is to align userland API to the internal structures.
    
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Reviewed-by:  Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad7491e92b715e06dfb9b23f243fe9f339cee626
Author: Harini Katakam <harini.katakam@xilinx.com>
Date:   Thu May 12 22:49:00 2022 +0530

    net: macb: Increment rx bd head after allocating skb and buffer
    
    [ Upstream commit 9500acc631dbb8b73166e25700e656b11f6007b6 ]
    
    In gem_rx_refill rx_prepared_head is incremented at the beginning of
    the while loop preparing the skb and data buffers. If the skb or data
    buffer allocation fails, this BD will be unusable BDs until the head
    loops back to the same BD (and obviously buffer allocation succeeds).
    In the unlikely event that there's a string of allocation failures,
    there will be an equal number of unusable BDs and an inconsistent RX
    BD chain. Hence increment the head at the end of the while loop to be
    clean.
    
    Fixes: 4df95131ea80 ("net/macb: change RX path for GEM")
    Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220512171900.32593-1-harini.katakam@xilinx.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 999ee216c65e8cb91c2b8a9ae203a18ca2a28671
Author: Alex Elder <elder@linaro.org>
Date:   Thu May 12 10:10:32 2022 -0500

    net: ipa: record proper RX transaction count
    
    [ Upstream commit d8290cbe1111105f92f0c8ab455bec8bf98d0630 ]
    
    Each time we are notified that some number of transactions on an RX
    channel has completed, we record the number of bytes that have been
    transferred since the previous notification.  We also track the
    number of transactions completed, but that is not currently being
    calculated correctly; we're currently counting the number of such
    notifications, but each notification can represent many transaction
    completions.  Fix this.
    
    Fixes: 650d1603825d8 ("soc: qcom: ipa: the generic software interface")
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 636184fd1bd424281d0d147c623f636415151587
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Apr 30 12:33:18 2022 -0700

    ALSA: hda - fix unused Realtek function when PM is not enabled
    
    [ Upstream commit c3d9ca93f1e3bd3d1adfc4479a12c82fed424c87 ]
    
    When CONFIG_PM is not enabled, alc_shutup() is not needed,
    so move it inside the #ifdef CONFIG_PM guard.
    Also drop some contiguous #endif / #ifdef CONFIG_PM for simplicity.
    
    Fixes this build warning:
    sound/pci/hda/patch_realtek.c:886:20: warning: unused function 'alc_shutup'
    
    Fixes: 08c189f2c552 ("ALSA: hda - Use generic parser codes for Realtek driver")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/r/20220430193318.29024-1-rdunlap@infradead.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84b6e3d58955176593be451bc9bbdf6b599fa327
Author: Mattijs Korpershoek <mkorpershoek@baylibre.com>
Date:   Tue Apr 26 14:57:14 2022 +0200

    pinctrl: mediatek: mt8365: fix IES control pins
    
    [ Upstream commit f680058f406863b55ac226d1c157701939c63db4 ]
    
    IES26 (BIT 16 of IES1_CFG_ADDR) controls the following pads:
    
    - PAD_I2S_DATA_IN (GPIO114)
    - PAD_I2S_LRCK (GPIO115)
    - PAD_I2S_BCK (GPIO116)
    
    The pinctrl table is wrong since it lists pins 114 to 112.
    
    Update the table with the correct values.
    
    Fixes: e94d8b6fb83a ("pinctrl: mediatek: add support for mt8365 SoC")
    Reported-by: Youngmin Han <Youngmin.Han@geappliances.com>
    Signed-off-by: Mattijs Korpershoek <mkorpershoek@baylibre.com>
    Link: https://lore.kernel.org/r/20220426125714.298907-1-mkorpershoek@baylibre.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53bac31c8d8ace1fcabe51ca75f4bfee8d6e37ff
Author: Howard Chiu <howard_chiu@aspeedtech.com>
Date:   Tue Mar 29 03:23:51 2022 +0000

    ARM: dts: aspeed: Add video engine to g6
    
    [ Upstream commit 32e62d1beab70d485980013312e747a25c4e13f7 ]
    
    This node was accidentally removed by commit 645afe73f951 ("ARM: dts:
    aspeed: ast2600: Update XDMA engine node").
    
    Fixes: 645afe73f951 ("ARM: dts: aspeed: ast2600: Update XDMA engine node")
    Signed-off-by: Howard Chiu <howard_chiu@aspeedtech.com>
    Link: https://lore.kernel.org/r/SG2PR06MB2315C57600A0132FEF40F21EE61E9@SG2PR06MB2315.apcprd06.prod.outlook.com
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed978be2afb5f467be1c14b0316c6a53787e300f
Author: Joel Stanley <joel@jms.id.au>
Date:   Wed Nov 17 11:51:05 2021 +0800

    ARM: dts: aspeed: Add secure boot controller node
    
    [ Upstream commit fea289467608ffddb2f8d3a740912047974bb183 ]
    
    The ast2600 has a secure boot controller.
    
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Reviewed-by: Ryan Chen <ryan_chen@aspeedtech.com>
    Link: https://lore.kernel.org/r/20211117035106.321454-3-joel@jms.id.au
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 794f7da40d652607f190fac73488ba4c835fa732
Author: Eddie James <eajames@linux.ibm.com>
Date:   Thu Sep 16 16:00:45 2021 -0500

    ARM: dts: aspeed: Add ADC for AST2600 and enable for Rainier and Everest
    
    [ Upstream commit eaad40466bd715c4b342ac9f7c889f5281714feb ]
    
    Add the ADC nodes to the AST2600 devicetree. Enable ADC1 for Rainier and
    Everest systems and add an iio-hwmon node for the 7th channel to report
    the battery voltage.
    
    Tested on Rainier:
    ~# cat /sys/class/hwmon/hwmon11/in1_input
    1347
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Link: https://lore.kernel.org/r/20210916210045.31769-1-eajames@linux.ibm.com
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75e9562bb4bf81a7943679add020fca161c1cfac
Author: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
Date:   Tue Mar 29 10:39:32 2022 -0700

    ARM: dts: aspeed-g6: fix SPI1/SPI2 quad pin group
    
    [ Upstream commit 890362d41b244536ab63591f813393f5fdf59ed7 ]
    
    Fix incorrect function mappings in pinctrl_qspi1_default and
    pinctrl_qspi2_default since their function should be SPI1 and
    SPI2 respectively.
    
    Fixes: f510f04c8c83 ("ARM: dts: aspeed: Add AST2600 pinmux nodes")
    Signed-off-by: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Link: https://lore.kernel.org/r/20220329173932.2588289-8-quic_jaehyoo@quicinc.com
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f234feed77d2911ad195603bf023398dbb38c2d3
Author: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
Date:   Tue Mar 29 10:39:27 2022 -0700

    pinctrl: pinctrl-aspeed-g6: remove FWQSPID group in pinctrl
    
    [ Upstream commit 3eef2f48ba0933ba995529f522554ad5c276c39b ]
    
    FWSPIDQ2 and FWSPIDQ3 are not part of FWSPI18 interface so remove
    FWQSPID group in pinctrl. These pins must be used with the FWSPI
    pins that are dedicated for boot SPI interface which provides
    same 3.3v logic level.
    
    Fixes: 2eda1cdec49f ("pinctrl: aspeed: Add AST2600 pinmux support")
    Signed-off-by: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Link: https://lore.kernel.org/r/20220329173932.2588289-3-quic_jaehyoo@quicinc.com
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b29774c208a3f29e6c9e5790752ec79f563ac9ee
Author: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
Date:   Tue Mar 29 10:39:26 2022 -0700

    ARM: dts: aspeed-g6: remove FWQSPID group in pinctrl dtsi
    
    [ Upstream commit efddaa397cceefb61476e383c26fafd1f8ab6356 ]
    
    FWSPIDQ2 and FWSPIDQ3 are not part of FWSPI18 interface so remove
    FWQSPID group in pinctrl dtsi. These pins must be used with the
    FWSPI pins that are dedicated for boot SPI interface which provides
    same 3.3v logic level.
    
    Fixes: 2f6edb6bcb2f ("ARM: dts: aspeed: Fix AST2600 quad spi group")
    Signed-off-by: Jae Hyun Yoo <quic_jaehyoo@quicinc.com>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Link: https://lore.kernel.org/r/20220329173932.2588289-2-quic_jaehyoo@quicinc.com
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 250f71a575591c9a399fc07b2bbfa34a2be06d1a
Author: Charan Teja Kalla <quic_charante@quicinc.com>
Date:   Fri May 13 16:58:16 2022 +0530

    dma-buf: ensure unique directory name for dmabuf stats
    
    commit 370704e707a5f2d3c9a1d4ed8bd8cd67507d7bb5 upstream.
    
    The dmabuf file uses get_next_ino()(through dma_buf_getfile() ->
    alloc_anon_inode()) to get an inode number and uses the same as a
    directory name under /sys/kernel/dmabuf/buffers/<ino>. This directory is
    used to collect the dmabuf stats and it is created through
    dma_buf_stats_setup(). At current, failure to create this directory
    entry can make the dma_buf_export() to fail.
    
    Now, as the get_next_ino() can definitely give a repetitive inode no
    causing the directory entry creation to fail with -EEXIST. This is a
    problem on the systems where dmabuf stats functionality is enabled on
    the production builds can make the dma_buf_export(), though the dmabuf
    memory is allocated successfully, to fail just because it couldn't
    create stats entry.
    
    This issue we are able to see on the snapdragon system within 13 days
    where there already exists a directory with inode no "122602" so
    dma_buf_stats_setup() failed with -EEXIST as it is trying to create
    the same directory entry.
    
    To make the dentry name as unique, use the dmabuf fs specific inode
    which is based on the simple atomic variable increment. There is tmpfs
    subsystem too which relies on its own inode generation rather than
    relying on the get_next_ino() for the same reason of avoiding the
    duplicate inodes[1].
    
    [1] https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/patch/?id=e809d5f0b5c912fe981dce738f3283b2010665f0
    
    Signed-off-by: Charan Teja Kalla <quic_charante@quicinc.com>
    Cc: <stable@vger.kernel.org> # 5.15.x+
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1652441296-1986-1-git-send-email-quic_charante@quicinc.com
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a4c06e265eaf016081e11991b39b7bfb6aea832
Author: Jérôme Pouiller <jerome.pouiller@silabs.com>
Date:   Tue May 17 09:27:08 2022 +0200

    dma-buf: fix use of DMA_BUF_SET_NAME_{A,B} in userspace
    
    commit 7c3e9fcad9c7d8bb5d69a576044fb16b1d2e8a01 upstream.
    
    The typedefs u32 and u64 are not available in userspace. Thus user get
    an error he try to use DMA_BUF_SET_NAME_A or DMA_BUF_SET_NAME_B:
    
        $ gcc -Wall   -c -MMD -c -o ioctls_list.o ioctls_list.c
        In file included from /usr/include/x86_64-linux-gnu/asm/ioctl.h:1,
                         from /usr/include/linux/ioctl.h:5,
                         from /usr/include/asm-generic/ioctls.h:5,
                         from ioctls_list.c:11:
        ioctls_list.c:463:29: error: ‘u32’ undeclared here (not in a function)
          463 |     { "DMA_BUF_SET_NAME_A", DMA_BUF_SET_NAME_A, -1, -1 }, // linux/dma-buf.h
              |                             ^~~~~~~~~~~~~~~~~~
        ioctls_list.c:464:29: error: ‘u64’ undeclared here (not in a function)
          464 |     { "DMA_BUF_SET_NAME_B", DMA_BUF_SET_NAME_B, -1, -1 }, // linux/dma-buf.h
              |                             ^~~~~~~~~~~~~~~~~~
    
    The issue was initially reported here[1].
    
    [1]: https://github.com/jerome-pouiller/ioctl/pull/14
    
    Signed-off-by: Jérôme Pouiller <jerome.pouiller@silabs.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Fixes: a5bff92eaac4 ("dma-buf: Fix SET_NAME ioctl uapi")
    CC: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20220517072708.245265-1-Jerome.Pouiller@silabs.com
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit deec86168170d085d4f91445c1f72a900ed02372
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Mon May 16 11:20:42 2022 +0800

    drm/dp/mst: fix a possible memory leak in fetch_monitor_name()
    
    commit 6e03b13cc7d9427c2c77feed1549191015615202 upstream.
    
    drm_dp_mst_get_edid call kmemdup to create mst_edid. So mst_edid need to be
    freed after use.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20220516032042.13166-1-hbh25y@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaf0f01d074d6fd39ec1b01477f69cd688bf6c9d
Author: Anusha Srivatsa <anusha.srivatsa@intel.com>
Date:   Tue May 10 17:08:47 2022 -0700

    drm/i915/dmc: Add MMIO range restrictions
    
    commit 54395a33718af1c04b5098203335b25382291a16 upstream.
    
    Bspec has added some steps that check forDMC MMIO range before
    programming them
    
    v2: Fix for CI
    v3: move register defines to .h (Anusha)
    - Check MMIO restrictions per pipe
    - Add MMIO restricton for v1 dmc header as well (Lucas)
    v4: s/_PICK/_PICK_EVEN and use it only for Pipe DMC scenario.
    - clean up sanity check logic.(Lucas)
    - Add MMIO range for RKL as well.(Anusha)
    v5: Use DISPLAY_VER instead of per platform check (Lucas)
    
    BSpec: 49193
    
    Cc: stable@vger.kernel.org
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: Anusha Srivatsa <anusha.srivatsa@intel.com>
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220511000847.1068302-1-anusha.srivatsa@intel.com
    (cherry picked from commit 21c47196aec3a93f913a7515e1e7b30e6c54d6c6)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d3ec4e5bf032f53137e11075846cec9c474ce4b
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue May 17 12:00:37 2022 -0500

    drm/amd: Don't reset dGPUs if the system is going to s2idle
    
    commit 7123d39dc24dcd21ff23d75f46f926b15269b9da upstream.
    
    An A+A configuration on ASUS ROG Strix G513QY proves that the ASIC
    reset for handling aborted suspend can't work with s2idle.
    
    This functionality was introduced in commit daf8de0874ab5b ("drm/amdgpu:
    always reset the asic in suspend (v2)").  A few other commits have
    gone on top of the ASIC reset, but this still doesn't work on the A+A
    configuration in s2idle.
    
    Avoid doing the reset on dGPUs specifically when using s2idle.
    
    Fixes: daf8de0874ab5b ("drm/amdgpu: always reset the asic in suspend (v2)")
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2008
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24501d51c6b40d5a87dfa6c07103c7b5b3e74822
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Sat May 14 12:16:47 2022 +0200

    libceph: fix potential use-after-free on linger ping and resends
    
    commit 75dbb685f4e8786c33ddef8279bab0eadfb0731f upstream.
    
    request_reinit() is not only ugly as the comment rightfully suggests,
    but also unsafe.  Even though it is called with osdc->lock held for
    write in all cases, resetting the OSD request refcount can still race
    with handle_reply() and result in use-after-free.  Taking linger ping
    as an example:
    
        handle_timeout thread                     handle_reply thread
    
                                                  down_read(&osdc->lock)
                                                  req = lookup_request(...)
                                                  ...
                                                  finish_request(req)  # unregisters
                                                  up_read(&osdc->lock)
                                                  __complete_request(req)
                                                    linger_ping_cb(req)
    
          # req->r_kref == 2 because handle_reply still holds its ref
    
        down_write(&osdc->lock)
        send_linger_ping(lreq)
          req = lreq->ping_req  # same req
          # cancel_linger_request is NOT
          # called - handle_reply already
          # unregistered
          request_reinit(req)
            WARN_ON(req->r_kref != 1)  # fires
            request_init(req)
              kref_init(req->r_kref)
    
                       # req->r_kref == 1 after kref_init
    
                                                  ceph_osdc_put_request(req)
                                                    kref_put(req->r_kref)
    
                # req->r_kref == 0 after kref_put, req is freed
    
            <further req initialization/use> !!!
    
    This happens because send_linger_ping() always (re)uses the same OSD
    request for watch ping requests, relying on cancel_linger_request() to
    unregister it from the OSD client and rip its messages out from the
    messenger.  send_linger() does the same for watch/notify registration
    and watch reconnect requests.  Unfortunately cancel_request() doesn't
    guarantee that after it returns the OSD client would be completely done
    with the OSD request -- a ref could still be held and the callback (if
    specified) could still be invoked too.
    
    The original motivation for request_reinit() was inability to deal with
    allocation failures in send_linger() and send_linger_ping().  Switching
    to using osdc->req_mempool (currently only used by CephFS) respects that
    and allows us to get rid of request_reinit().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Acked-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a06f25f5941c145773204f2f7abef95b4ffb8ce
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Tue May 3 13:50:10 2022 +0200

    crypto: qcom-rng - fix infinite loop on requests not multiple of WORD_SZ
    
    commit 16287397ec5c08aa58db6acf7dbc55470d78087d upstream.
    
    The commit referenced in the Fixes tag removed the 'break' from the else
    branch in qcom_rng_read(), causing an infinite loop whenever 'max' is
    not a multiple of WORD_SZ. This can be reproduced e.g. by running:
    
        kcapi-rng -b 67 >/dev/null
    
    There are many ways to fix this without adding back the 'break', but
    they all seem more awkward than simply adding it back, so do just that.
    
    Tested on a machine with Qualcomm Amberwing processor.
    
    Fixes: a680b1832ced ("crypto: qcom-rng - ensure buffer for generate is completely filled")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Reviewed-by: Brian Masney <bmasney@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c42f9a5a3aaeaee9dde94377a39054b2331f55fb
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Tue May 17 10:35:32 2022 +0100

    arm64: mte: Ensure the cleared tags are visible before setting the PTE
    
    commit 1d0cb4c8864addc362bae98e8ffa5500c87e1227 upstream.
    
    As an optimisation, only pages mapped with PROT_MTE in user space have
    the MTE tags zeroed. This is done lazily at the set_pte_at() time via
    mte_sync_tags(). However, this function is missing a barrier and another
    CPU may see the PTE updated before the zeroed tags are visible. Add an
    smp_wmb() barrier if the mapping is Normal Tagged.
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Fixes: 34bfeea4a9e9 ("arm64: mte: Clear the tags when a page is mapped in user-space with PROT_MTE")
    Cc: <stable@vger.kernel.org> # 5.10.x
    Reported-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Tested-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Link: https://lore.kernel.org/r/20220517093532.127095-1-catalin.marinas@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9ea44dc030deb9202f3c7d6340f9ad5b6035051
Author: Prakruthi Deepak Heragu <quic_pheragu@quicinc.com>
Date:   Fri May 13 10:46:54 2022 -0700

    arm64: paravirt: Use RCU read locks to guard stolen_time
    
    commit 19bef63f951e47dd4ba54810e6f7c7ff9344a3ef upstream.
    
    During hotplug, the stolen time data structure is unmapped and memset.
    There is a possibility of the timer IRQ being triggered before memset
    and stolen time is getting updated as part of this timer IRQ handler. This
    causes the below crash in timer handler -
    
      [ 3457.473139][    C5] Unable to handle kernel paging request at virtual address ffffffc03df05148
      ...
      [ 3458.154398][    C5] Call trace:
      [ 3458.157648][    C5]  para_steal_clock+0x30/0x50
      [ 3458.162319][    C5]  irqtime_account_process_tick+0x30/0x194
      [ 3458.168148][    C5]  account_process_tick+0x3c/0x280
      [ 3458.173274][    C5]  update_process_times+0x5c/0xf4
      [ 3458.178311][    C5]  tick_sched_timer+0x180/0x384
      [ 3458.183164][    C5]  __run_hrtimer+0x160/0x57c
      [ 3458.187744][    C5]  hrtimer_interrupt+0x258/0x684
      [ 3458.192698][    C5]  arch_timer_handler_virt+0x5c/0xa0
      [ 3458.198002][    C5]  handle_percpu_devid_irq+0xdc/0x414
      [ 3458.203385][    C5]  handle_domain_irq+0xa8/0x168
      [ 3458.208241][    C5]  gic_handle_irq.34493+0x54/0x244
      [ 3458.213359][    C5]  call_on_irq_stack+0x40/0x70
      [ 3458.218125][    C5]  do_interrupt_handler+0x60/0x9c
      [ 3458.223156][    C5]  el1_interrupt+0x34/0x64
      [ 3458.227560][    C5]  el1h_64_irq_handler+0x1c/0x2c
      [ 3458.232503][    C5]  el1h_64_irq+0x7c/0x80
      [ 3458.236736][    C5]  free_vmap_area_noflush+0x108/0x39c
      [ 3458.242126][    C5]  remove_vm_area+0xbc/0x118
      [ 3458.246714][    C5]  vm_remove_mappings+0x48/0x2a4
      [ 3458.251656][    C5]  __vunmap+0x154/0x278
      [ 3458.255796][    C5]  stolen_time_cpu_down_prepare+0xc0/0xd8
      [ 3458.261542][    C5]  cpuhp_invoke_callback+0x248/0xc34
      [ 3458.266842][    C5]  cpuhp_thread_fun+0x1c4/0x248
      [ 3458.271696][    C5]  smpboot_thread_fn+0x1b0/0x400
      [ 3458.276638][    C5]  kthread+0x17c/0x1e0
      [ 3458.280691][    C5]  ret_from_fork+0x10/0x20
    
    As a fix, introduce rcu lock to update stolen time structure.
    
    Fixes: 75df529bec91 ("arm64: paravirt: Initialize steal time when cpu is online")
    Cc: stable@vger.kernel.org
    Suggested-by: Will Deacon <will@kernel.org>
    Signed-off-by: Prakruthi Deepak Heragu <quic_pheragu@quicinc.com>
    Signed-off-by: Elliot Berman <quic_eberman@quicinc.com>
    Reviewed-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
    Link: https://lore.kernel.org/r/20220513174654.362169-1-quic_eberman@quicinc.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3c0ba7870b9d4197949ef4606276bc687318104
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed May 11 14:51:22 2022 +0000

    KVM: x86/mmu: Update number of zapped pages even if page list is stable
    
    commit b28cb0cd2c5e80a8c0feb408a0e4b0dbb6d132c5 upstream.
    
    When zapping obsolete pages, update the running count of zapped pages
    regardless of whether or not the list has become unstable due to zapping
    a shadow page with its own child shadow pages.  If the VM is backed by
    mostly 4kb pages, KVM can zap an absurd number of SPTEs without bumping
    the batch count and thus without yielding.  In the worst case scenario,
    this can cause a soft lokcup.
    
     watchdog: BUG: soft lockup - CPU#12 stuck for 22s! [dirty_log_perf_:13020]
       RIP: 0010:workingset_activation+0x19/0x130
       mark_page_accessed+0x266/0x2e0
       kvm_set_pfn_accessed+0x31/0x40
       mmu_spte_clear_track_bits+0x136/0x1c0
       drop_spte+0x1a/0xc0
       mmu_page_zap_pte+0xef/0x120
       __kvm_mmu_prepare_zap_page+0x205/0x5e0
       kvm_mmu_zap_all_fast+0xd7/0x190
       kvm_mmu_invalidate_zap_pages_in_memslot+0xe/0x10
       kvm_page_track_flush_slot+0x5c/0x80
       kvm_arch_flush_shadow_memslot+0xe/0x10
       kvm_set_memslot+0x1a8/0x5d0
       __kvm_set_memory_region+0x337/0x590
       kvm_vm_ioctl+0xb08/0x1040
    
    Fixes: fbb158cb88b6 ("KVM: x86/mmu: Revert "Revert "KVM: MMU: zap pages in batch""")
    Reported-by: David Matlack <dmatlack@google.com>
    Reviewed-by: Ben Gardon <bgardon@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20220511145122.3133334-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8f09d92ab626d7330670bd48aefe895b996d2b
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Thu May 12 15:41:43 2022 +0300

    Revert "can: m_can: pci: use custom bit timings for Elkhart Lake"
    
    commit 14ea4a470494528c7e88da5c4116c24eb027059f upstream.
    
    This reverts commit 0e8ffdf3b86dfd44b651f91b12fcae76c25c453b.
    
    Commit 0e8ffdf3b86d ("can: m_can: pci: use custom bit timings for
    Elkhart Lake") broke the test case using bitrate switching.
    
    | ip link set can0 up type can bitrate 500000 dbitrate 4000000 fd on
    | ip link set can1 up type can bitrate 500000 dbitrate 4000000 fd on
    | candump can0 &
    | cangen can1 -I 0x800 -L 64 -e -fb \
    |     -D 11223344deadbeef55667788feedf00daabbccdd44332211 -n 1 -v -v
    
    Above commit does everything correctly according to the datasheet.
    However datasheet wasn't correct.
    
    I got confirmation from hardware engineers that the actual CAN
    hardware on Intel Elkhart Lake is based on M_CAN version v3.2.0.
    Datasheet was mirroring values from an another specification which was
    based on earlier M_CAN version leading to wrong bit timings.
    
    Therefore revert the commit and switch back to common bit timings.
    
    Fixes: ea4c1787685d ("can: m_can: pci: use custom bit timings for Elkhart Lake")
    Link: https://lore.kernel.org/all/20220512124144.536850-1-jarkko.nikula@linux.intel.com
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Reported-by: Chee Hou Ong <chee.houx.ong@intel.com>
    Reported-by: Aman Kumar <aman.kumar@intel.com>
    Reported-by: Pallavi Kumari <kumari.pallavi@intel.com>
    Cc: <stable@vger.kernel.org> # v5.16+
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5012bad435d4c12681cc4049b5c19430b9ae27f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Mar 31 19:38:51 2022 +0200

    PCI/PM: Avoid putting Elo i2 PCIe Ports in D3cold
    
    commit 92597f97a40bf661bebceb92e26ff87c76d562d4 upstream.
    
    If a Root Port on Elo i2 is put into D3cold and then back into D0, the
    downstream device becomes permanently inaccessible, so add a bridge D3 DMI
    quirk for that system.
    
    This was exposed by 14858dcc3b35 ("PCI: Use pci_update_current_state() in
    pci_enable_device_flags()"), but before that commit the Root Port in
    question had never been put into D3cold for real due to a mismatch between
    its power state retrieved from the PCI_PM_CTRL register (which was
    accessible even though the platform firmware indicated that the port was in
    D3cold) and the state of an ACPI power resource involved in its power
    management.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=215715
    Link: https://lore.kernel.org/r/11980172.O9o76ZdvQC@kreacher
    Reported-by: Stefan Gottwald <gottwald@igel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org      # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42d8a6dc45fc6619b8def1a70b7bd0800bcc4574
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon May 16 16:42:13 2022 +0800

    Fix double fget() in vhost_net_set_backend()
    
    commit fb4554c2232e44d595920f4d5c66cf8f7d13f9bc upstream.
    
    Descriptor table is a shared resource; two fget() on the same descriptor
    may return different struct file references.  get_tap_ptr_ring() is
    called after we'd found (and pinned) the socket we'll be using and it
    tries to find the private tun/tap data structures associated with it.
    Redoing the lookup by the same file descriptor we'd used to get the
    socket is racy - we need to same struct file.
    
    Thanks to Jason for spotting a braino in the original variant of patch -
    I'd missed the use of fd == -1 for disabling backend, and in that case
    we can end up with sock == NULL and sock != oldsock.
    
    Cc: stable@kernel.org
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f71433eb705c0c472290a367add222e8de58d1f
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Tue May 17 14:08:16 2022 +0200

    selinux: fix bad cleanup on error in hashtab_duplicate()
    
    commit 6254bd3db316c9ccb3b05caa8b438be63245466f upstream.
    
    The code attempts to free the 'new' pointer using kmem_cache_free(),
    which is wrong because this function isn't responsible of freeing it.
    Instead, the function should free new->htable and clear the contents of
    *new (to prevent double-free).
    
    Cc: stable@vger.kernel.org
    Fixes: c7c556f1e81b ("selinux: refactor changing booleans")
    Reported-by: Wander Lairson Costa <wander@redhat.com>
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e085354dde254bc6c83ee604ea66c2b36f9f9067
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri May 20 20:38:06 2022 +0200

    perf: Fix sys_perf_event_open() race against self
    
    commit 3ac6487e584a1eb54071dbe1212e05b884136704 upstream.
    
    Norbert reported that it's possible to race sys_perf_event_open() such
    that the looser ends up in another context from the group leader,
    triggering many WARNs.
    
    The move_group case checks for races against itself, but the
    !move_group case doesn't, seemingly relying on the previous
    group_leader->ctx == ctx check. However, that check is racy due to not
    holding any locks at that time.
    
    Therefore, re-check the result after acquiring locks and bailing
    if they no longer match.
    
    Additionally, clarify the not_move_group case from the
    move_group-vs-move_group race.
    
    Fixes: f63a8daa5812 ("perf: Fix event->ctx locking")
    Reported-by: Norbert Slusarek <nslusarek@gmx.net>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f380aba421990e04db89f14d8cf12b7e33cc76c3
Author: Werner Sembach <wse@tuxedocomputers.com>
Date:   Thu May 12 20:09:56 2022 +0200

    ALSA: hda/realtek: Add quirk for TongFang devices with pop noise
    
    commit 8b3b2392ed68bcd17c7eb84ca615ce1e5f115b99 upstream.
    
    When audio stops playing there is an audible "pop"-noise when using
    headphones on the TongFang GMxMRxx, GKxNRxx, GMxZGxx, GMxTGxx and GMxAGxx.
    
    This quirk fixes this mostly.
    
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220512180956.281804-1-wse@tuxedocomputers.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48550a90e4089dc31ef4a69eccb16bece5bc12a8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue May 10 12:36:26 2022 +0200

    ALSA: wavefront: Proper check of get_user() error
    
    commit a34ae6c0660d3b96b0055f68ef74dc9478852245 upstream.
    
    The antient ISA wavefront driver reads its sample patch data (uploaded
    over an ioctl) via __get_user() with no good reason; likely just for
    some performance optimizations in the past.  Let's change this to the
    standard get_user() and the error check for handling the fault case
    properly.
    
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220510103626.16635-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74f64e7d18bbabccb2c0cf1c54ce36ca3a5d9df8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon May 16 12:31:12 2022 +0200

    ALSA: usb-audio: Restore Rane SL-1 quirk
    
    commit 5c62383c06837b5719cd5447a5758b791279e653 upstream.
    
    At cleaning up and moving the device rename from the quirk table to
    its own table, we removed the entry for Rane SL-1 as we thought it's
    only for renaming.  It turned out, however, that the quirk is required
    for matching with the device that declares itself as no standard
    audio but only as vendor-specific.
    
    Restore the quirk entry for Rane SL-1 to fix the regression.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=215887
    Fixes: 5436f59bc5bc ("ALSA: usb-audio: Move device rename and profile quirks to an internal table")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220516103112.12950-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e156805ae285823bf76a543f963c624c40dee1c0
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Fri Apr 1 11:28:21 2022 -0700

    nilfs2: fix lockdep warnings during disk space reclamation
    
    [ Upstream commit 6e211930f79aa45d422009a5f2e5467d2369ffe5 ]
    
    During disk space reclamation, nilfs2 still emits the following lockdep
    warning due to page/folio operations on shadowed page caches that nilfs2
    uses to get a snapshot of DAT file in memory:
    
      WARNING: CPU: 0 PID: 2643 at include/linux/backing-dev.h:272 __folio_mark_dirty+0x645/0x670
      ...
      RIP: 0010:__folio_mark_dirty+0x645/0x670
      ...
      Call Trace:
        filemap_dirty_folio+0x74/0xd0
        __set_page_dirty_nobuffers+0x85/0xb0
        nilfs_copy_dirty_pages+0x288/0x510 [nilfs2]
        nilfs_mdt_save_to_shadow_map+0x50/0xe0 [nilfs2]
        nilfs_clean_segments+0xee/0x5d0 [nilfs2]
        nilfs_ioctl_clean_segments.isra.19+0xb08/0xf40 [nilfs2]
        nilfs_ioctl+0xc52/0xfb0 [nilfs2]
        __x64_sys_ioctl+0x11d/0x170
    
    This fixes the remaining warning by using inode objects to hold those
    page caches.
    
    Link: https://lkml.kernel.org/r/1647867427-30498-3-git-send-email-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Hao Sun <sunhao.th@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d05cc5395e36711edad8bdef6945f138d8a7097b
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Fri Apr 1 11:28:18 2022 -0700

    nilfs2: fix lockdep warnings in page operations for btree nodes
    
    [ Upstream commit e897be17a441fa637cd166fc3de1445131e57692 ]
    
    Patch series "nilfs2 lockdep warning fixes".
    
    The first two are to resolve the lockdep warning issue, and the last one
    is the accompanying cleanup and low priority.
    
    Based on your comment, this series solves the issue by separating inode
    object as needed.  Since I was worried about the impact of the object
    composition changes, I tested the series carefully not to cause
    regressions especially for delicate functions such like disk space
    reclamation and snapshots.
    
    This patch (of 3):
    
    If CONFIG_LOCKDEP is enabled, nilfs2 hits lockdep warnings at
    inode_to_wb() during page/folio operations for btree nodes:
    
      WARNING: CPU: 0 PID: 6575 at include/linux/backing-dev.h:269 inode_to_wb include/linux/backing-dev.h:269 [inline]
      WARNING: CPU: 0 PID: 6575 at include/linux/backing-dev.h:269 folio_account_dirtied mm/page-writeback.c:2460 [inline]
      WARNING: CPU: 0 PID: 6575 at include/linux/backing-dev.h:269 __folio_mark_dirty+0xa7c/0xe30 mm/page-writeback.c:2509
      Modules linked in:
      ...
      RIP: 0010:inode_to_wb include/linux/backing-dev.h:269 [inline]
      RIP: 0010:folio_account_dirtied mm/page-writeback.c:2460 [inline]
      RIP: 0010:__folio_mark_dirty+0xa7c/0xe30 mm/page-writeback.c:2509
      ...
      Call Trace:
        __set_page_dirty include/linux/pagemap.h:834 [inline]
        mark_buffer_dirty+0x4e6/0x650 fs/buffer.c:1145
        nilfs_btree_propagate_p fs/nilfs2/btree.c:1889 [inline]
        nilfs_btree_propagate+0x4ae/0xea0 fs/nilfs2/btree.c:2085
        nilfs_bmap_propagate+0x73/0x170 fs/nilfs2/bmap.c:337
        nilfs_collect_dat_data+0x45/0xd0 fs/nilfs2/segment.c:625
        nilfs_segctor_apply_buffers+0x14a/0x470 fs/nilfs2/segment.c:1009
        nilfs_segctor_scan_file+0x47a/0x700 fs/nilfs2/segment.c:1048
        nilfs_segctor_collect_blocks fs/nilfs2/segment.c:1224 [inline]
        nilfs_segctor_collect fs/nilfs2/segment.c:1494 [inline]
        nilfs_segctor_do_construct+0x14f3/0x6c60 fs/nilfs2/segment.c:2036
        nilfs_segctor_construct+0x7a7/0xb30 fs/nilfs2/segment.c:2372
        nilfs_segctor_thread_construct fs/nilfs2/segment.c:2480 [inline]
        nilfs_segctor_thread+0x3c3/0xf90 fs/nilfs2/segment.c:2563
        kthread+0x405/0x4f0 kernel/kthread.c:327
        ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295
    
    This is because nilfs2 uses two page caches for each inode and
    inode->i_mapping never points to one of them, the btree node cache.
    
    This causes inode_to_wb(inode) to refer to a different page cache than
    the caller page/folio operations such like __folio_start_writeback(),
    __folio_end_writeback(), or __folio_mark_dirty() acquired the lock.
    
    This patch resolves the issue by allocating and using an additional
    inode to hold the page cache of btree nodes.  The inode is attached
    one-to-one to the traditional nilfs2 inode if it requires a block
    mapping with b-tree.  This setup change is in memory only and does not
    affect the disk format.
    
    Link: https://lkml.kernel.org/r/1647867427-30498-1-git-send-email-konishi.ryusuke@gmail.com
    Link: https://lkml.kernel.org/r/1647867427-30498-2-git-send-email-konishi.ryusuke@gmail.com
    Link: https://lore.kernel.org/r/YXrYvIo8YRnAOJCj@casper.infradead.org
    Link: https://lore.kernel.org/r/9a20b33d-b38f-b4a2-4742-c1eb5b8e4d6c@redhat.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+0d5b462a6f07447991b3@syzkaller.appspotmail.com
    Reported-by: syzbot+34ef28bb2aeb28724aa0@syzkaller.appspotmail.com
    Reported-by: Hao Sun <sunhao.th@gmail.com>
    Reported-by: David Hildenbrand <david@redhat.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a8b2f6a91d1fe0d343b1d0b5fb9df62fc9e2552
Author: linyujun <linyujun809@huawei.com>
Date:   Fri Apr 1 10:52:47 2022 +0100

    ARM: 9191/1: arm/stacktrace, kasan: Silence KASAN warnings in unwind_frame()
    
    [ Upstream commit 9be4c88bb7924f68f88cfd47d925c2d046f51a73 ]
    
    The following KASAN warning is detected by QEMU.
    
    ==================================================================
    BUG: KASAN: stack-out-of-bounds in unwind_frame+0x508/0x870
    Read of size 4 at addr c36bba90 by task cat/163
    
    CPU: 1 PID: 163 Comm: cat Not tainted 5.10.0-rc1 #40
    Hardware name: ARM-Versatile Express
    [<c0113fac>] (unwind_backtrace) from [<c010e71c>] (show_stack+0x10/0x14)
    [<c010e71c>] (show_stack) from [<c0b805b4>] (dump_stack+0x98/0xb0)
    [<c0b805b4>] (dump_stack) from [<c0b7d658>] (print_address_description.constprop.0+0x58/0x4bc)
    [<c0b7d658>] (print_address_description.constprop.0) from [<c031435c>] (kasan_report+0x154/0x170)
    [<c031435c>] (kasan_report) from [<c0113c44>] (unwind_frame+0x508/0x870)
    [<c0113c44>] (unwind_frame) from [<c010e298>] (__save_stack_trace+0x110/0x134)
    [<c010e298>] (__save_stack_trace) from [<c01ce0d8>] (stack_trace_save+0x8c/0xb4)
    [<c01ce0d8>] (stack_trace_save) from [<c0313520>] (kasan_set_track+0x38/0x60)
    [<c0313520>] (kasan_set_track) from [<c0314cb8>] (kasan_set_free_info+0x20/0x2c)
    [<c0314cb8>] (kasan_set_free_info) from [<c0313474>] (__kasan_slab_free+0xec/0x120)
    [<c0313474>] (__kasan_slab_free) from [<c0311e20>] (kmem_cache_free+0x7c/0x334)
    [<c0311e20>] (kmem_cache_free) from [<c01c35dc>] (rcu_core+0x390/0xccc)
    [<c01c35dc>] (rcu_core) from [<c01013a8>] (__do_softirq+0x180/0x518)
    [<c01013a8>] (__do_softirq) from [<c0135214>] (irq_exit+0x9c/0xe0)
    [<c0135214>] (irq_exit) from [<c01a40e4>] (__handle_domain_irq+0xb0/0x110)
    [<c01a40e4>] (__handle_domain_irq) from [<c0691248>] (gic_handle_irq+0xa0/0xb8)
    [<c0691248>] (gic_handle_irq) from [<c0100b0c>] (__irq_svc+0x6c/0x94)
    Exception stack(0xc36bb928 to 0xc36bb970)
    b920:                   c36bb9c0 00000000 c0126919 c0101228 c36bb9c0 b76d7730
    b940: c36b8000 c36bb9a0 c3335b00 c01ce0d8 00000003 c36bba3c c36bb940 c36bb978
    b960: c010e298 c011373c 60000013 ffffffff
    [<c0100b0c>] (__irq_svc) from [<c011373c>] (unwind_frame+0x0/0x870)
    [<c011373c>] (unwind_frame) from [<00000000>] (0x0)
    
    The buggy address belongs to the page:
    page:(ptrval) refcount:0 mapcount:0 mapping:00000000 index:0x0 pfn:0x636bb
    flags: 0x0()
    raw: 00000000 00000000 ef867764 00000000 00000000 00000000 ffffffff 00000000
    page dumped because: kasan: bad access detected
    
    addr c36bba90 is located in stack of task cat/163 at offset 48 in frame:
     stack_trace_save+0x0/0xb4
    
    this frame has 1 object:
     [32, 48) 'trace'
    
    Memory state around the buggy address:
     c36bb980: f1 f1 f1 f1 00 04 f2 f2 00 00 f3 f3 00 00 00 00
     c36bba00: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
    >c36bba80: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
                     ^
     c36bbb00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     c36bbb80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    ==================================================================
    
    There is a same issue on x86 and has been resolved by the commit f7d27c35ddff
    ("x86/mm, kasan: Silence KASAN warnings in get_wchan()").
    The solution could be applied to arm architecture too.
    
    Signed-off-by: Lin Yujun <linyujun809@huawei.com>
    Reported-by: He Ying <heying24@huawei.com>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d32c58b267a7d628c696e9d76c605b84af77f21
Author: Tzung-Bi Shih <tzungbi@google.com>
Date:   Wed Feb 9 13:11:30 2022 +0800

    platform/chrome: cros_ec_debugfs: detach log reader wq from devm
    
    [ Upstream commit 0e8eb5e8acbad19ac2e1856b2fb2320184299b33 ]
    
    Debugfs console_log uses devm memory (e.g. debug_info in
    cros_ec_console_log_poll()).  However, lifecycles of device and debugfs
    are independent.  An use-after-free issue is observed if userland
    program operates the debugfs after the memory has been freed.
    
    The call trace:
     do_raw_spin_lock
     _raw_spin_lock_irqsave
     remove_wait_queue
     ep_unregister_pollwait
     ep_remove
     do_epoll_ctl
    
    A Python example to reproduce the issue:
    ... import select
    ... p = select.epoll()
    ... f = open('/sys/kernel/debug/cros_scp/console_log')
    ... p.register(f, select.POLLIN)
    ... p.poll(1)
    [(4, 1)]                    # 4=fd, 1=select.POLLIN
    
    [ shutdown cros_scp at the point ]
    
    ... p.poll(1)
    [(4, 16)]                   # 4=fd, 16=select.POLLHUP
    ... p.unregister(f)
    
    An use-after-free issue raises here.  It called epoll_ctl with
    EPOLL_CTL_DEL which in turn to use the workqueue in the devm (i.e.
    log_wq).
    
    Detaches log reader's workqueue from devm to make sure it is persistent
    even if the device has been removed.
    
    Signed-off-by: Tzung-Bi Shih <tzungbi@google.com>
    Reviewed-by: Guenter Roeck <groeck@google.com>
    Link: https://lore.kernel.org/r/20220209051130.386175-1-tzungbi@google.com
    Signed-off-by: Benson Leung <bleung@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1848108927ce2bbb6cf12823991ca22298841559
Author: Jakob Koschel <jakobkoschel@gmail.com>
Date:   Fri Apr 1 00:03:48 2022 +0200

    drbd: remove usage of list iterator variable after loop
    
    [ Upstream commit 901aeda62efa21f2eae937bccb71b49ae531be06 ]
    
    In preparation to limit the scope of a list iterator to the list
    traversal loop, use a dedicated pointer to iterate through the list [1].
    
    Since that variable should not be used past the loop iteration, a
    separate variable is used to 'remember the current location within the
    loop'.
    
    To either continue iterating from that position or skip the iteration
    (if the previous iteration was complete) list_prepare_entry() is used.
    
    Link: https://lore.kernel.org/all/CAHk-=wgRr_D8CB-D9Kg-c=EHreAsk5SqXPwr9Y7k9sA6cWXJ6w@mail.gmail.com/ [1]
    Signed-off-by: Jakob Koschel <jakobkoschel@gmail.com>
    Link: https://lore.kernel.org/r/20220331220349.885126-1-jakobkoschel@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98e0a2e96a788ad3db435bf86a7413b7388b50b8
Author: Xiaoke Wang <xkernel.wang@foxmail.com>
Date:   Fri Mar 25 19:49:41 2022 +0800

    MIPS: lantiq: check the return value of kzalloc()
    
    [ Upstream commit 34123208bbcc8c884a0489f543a23fe9eebb5514 ]
    
    kzalloc() is a memory allocation function which can return NULL when
    some internal memory errors happen. So it is better to check the
    return value of it to prevent potential wrong memory access or
    memory leak.
    
    Signed-off-by: Xiaoke Wang <xkernel.wang@foxmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a865748658bd38f68df086214d124b170caec3b
Author: Guo Xuenan <guoxuenan@huawei.com>
Date:   Wed Mar 30 09:49:28 2022 -0700

    fs: fix an infinite loop in iomap_fiemap
    
    [ Upstream commit 49df34221804cfd6384135b28b03c9461a31d024 ]
    
    when get fiemap starting from MAX_LFS_FILESIZE, (maxbytes - *len) < start
    will always true , then *len set zero. because of start offset is beyond
    file size, for erofs filesystem it will always return iomap.length with
    zero,iomap iterate will enter infinite loop. it is necessary cover this
    corner case to avoid this situation.
    
    ------------[ cut here ]------------
    WARNING: CPU: 7 PID: 905 at fs/iomap/iter.c:35 iomap_iter+0x97f/0xc70
    Modules linked in: xfs erofs
    CPU: 7 PID: 905 Comm: iomap Tainted: G        W         5.17.0-rc8 #27
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014
    RIP: 0010:iomap_iter+0x97f/0xc70
    Code: 85 a1 fc ff ff e8 71 be 9c ff 0f 1f 44 00 00 e9 92 fc ff ff e8 62 be 9c ff 0f 0b b8 fb ff ff ff e9 fc f8 ff ff e8 51 be 9c ff <0f> 0b e9 2b fc ff ff e8 45 be 9c ff 0f 0b e9 e1 fb ff ff e8 39 be
    RSP: 0018:ffff888060a37ab0 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff888060a37bb0 RCX: 0000000000000000
    RDX: ffff88807e19a900 RSI: ffffffff81a7da7f RDI: ffff888060a37be0
    RBP: 7fffffffffffffff R08: 0000000000000000 R09: ffff888060a37c20
    R10: ffff888060a37c67 R11: ffffed100c146f8c R12: 7fffffffffffffff
    R13: 0000000000000000 R14: ffff888060a37bd8 R15: ffff888060a37c20
    FS:  00007fd3cca01540(0000) GS:ffff888108780000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020010820 CR3: 0000000054b92000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     iomap_fiemap+0x1c9/0x2f0
     erofs_fiemap+0x64/0x90 [erofs]
     do_vfs_ioctl+0x40d/0x12e0
     __x64_sys_ioctl+0xaa/0x1c0
     do_syscall_64+0x35/0x80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
     </TASK>
    ---[ end trace 0000000000000000 ]---
    watchdog: BUG: soft lockup - CPU#7 stuck for 26s! [iomap:905]
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Guo Xuenan <guoxuenan@huawei.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    [djwong: fix some typos]
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 258a7a7fb568c4ae5c59a445f5ea0b7da35bb552
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue Jan 11 16:57:50 2022 -0600

    rtc: mc146818-lib: Fix the AltCentury for AMD platforms
    
    [ Upstream commit 3ae8fd41573af4fb3a490c9ed947fc936ba87190 ]
    
    Setting the century forward has been failing on AMD platforms.
    There was a previous attempt at fixing this for family 0x17 as part of
    commit 7ad295d5196a ("rtc: Fix the AltCentury value on AMD/Hygon
    platform") but this was later reverted due to some problems reported
    that appeared to stem from an FW bug on a family 0x17 desktop system.
    
    The same comments mentioned in the previous commit continue to apply
    to the newer platforms as well.
    
    ```
    MC146818 driver use function mc146818_set_time() to set register
    RTC_FREQ_SELECT(RTC_REG_A)'s bit4-bit6 field which means divider stage
    reset value on Intel platform to 0x7.
    
    While AMD/Hygon RTC_REG_A(0Ah)'s bit4 is defined as DV0 [Reference]:
    DV0 = 0 selects Bank 0, DV0 = 1 selects Bank 1. Bit5-bit6 is defined
    as reserved.
    
    DV0 is set to 1, it will select Bank 1, which will disable AltCentury
    register(0x32) access. As UEFI pass acpi_gbl_FADT.century 0x32
    (AltCentury), the CMOS write will be failed on code:
    CMOS_WRITE(century, acpi_gbl_FADT.century).
    
    Correct RTC_REG_A bank select bit(DV0) to 0 on AMD/Hygon CPUs, it will
    enable AltCentury(0x32) register writing and finally setup century as
    expected.
    ```
    
    However in closer examination the change previously submitted was also
    modifying bits 5 & 6 which are declared reserved in the AMD documentation.
    So instead modify just the DV0 bank selection bit.
    
    Being cognizant that there was a failure reported before, split the code
    change out to a static function that can also be used for exclusions if
    any regressions such as Mikhail's pop up again.
    
    Cc: Jinke Fan <fanjinke@hygon.cn>
    Cc: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Link: https://lore.kernel.org/all/CABXGCsMLob0DC25JS8wwAYydnDoHBSoMh2_YLPfqm3TTvDE-Zw@mail.gmail.com/
    Link: https://www.amd.com/system/files/TechDocs/51192_Bolton_FCH_RRG.pdf
    Signed-off-by: Raul E Rangel <rrangel@chromium.org>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20220111225750.1699-1-mario.limonciello@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9690e989d2637a35bbec5fd9e70ee15b65833d70
Author: Anton Eidelman <anton.eidelman@gmail.com>
Date:   Thu Mar 24 13:05:11 2022 -0600

    nvme-multipath: fix hang when disk goes live over reconnect
    
    [ Upstream commit a4a6f3c8f61c3cfbda4998ad94596059ad7e4332 ]
    
    nvme_mpath_init_identify() invoked from nvme_init_identify() fetches a
    fresh ANA log from the ctrl.  This is essential to have an up to date
    path states for both existing namespaces and for those scan_work may
    discover once the ctrl is up.
    
    This happens in the following cases:
      1) A new ctrl is being connected.
      2) An existing ctrl is successfully reconnected.
      3) An existing ctrl is being reset.
    
    While in (1) ctrl->namespaces is empty, (2 & 3) may have namespaces, and
    nvme_read_ana_log() may call nvme_update_ns_ana_state().
    
    This result in a hang when the ANA state of an existing namespace changes
    and makes the disk live: nvme_mpath_set_live() issues IO to the namespace
    through the ctrl, which does NOT have IO queues yet.
    
    See sample hang below.
    
    Solution:
    - nvme_update_ns_ana_state() to call set_live only if ctrl is live
    - nvme_read_ana_log() call from nvme_mpath_init_identify()
      therefore only fetches and parses the ANA log;
      any erros in this process will fail the ctrl setup as appropriate;
    - a separate function nvme_mpath_update()
      is called in nvme_start_ctrl();
      this parses the ANA log without fetching it.
      At this point the ctrl is live,
      therefore, disks can be set live normally.
    
    Sample failure:
        nvme nvme0: starting error recovery
        nvme nvme0: Reconnecting in 10 seconds...
        block nvme0n6: no usable path - requeuing I/O
        INFO: task kworker/u8:3:312 blocked for more than 122 seconds.
              Tainted: G            E     5.14.5-1.el7.elrepo.x86_64 #1
        Workqueue: nvme-wq nvme_tcp_reconnect_ctrl_work [nvme_tcp]
        Call Trace:
         __schedule+0x2a2/0x7e0
         schedule+0x4e/0xb0
         io_schedule+0x16/0x40
         wait_on_page_bit_common+0x15c/0x3e0
         do_read_cache_page+0x1e0/0x410
         read_cache_page+0x12/0x20
         read_part_sector+0x46/0x100
         read_lba+0x121/0x240
         efi_partition+0x1d2/0x6a0
         bdev_disk_changed.part.0+0x1df/0x430
         bdev_disk_changed+0x18/0x20
         blkdev_get_whole+0x77/0xe0
         blkdev_get_by_dev+0xd2/0x3a0
         __device_add_disk+0x1ed/0x310
         device_add_disk+0x13/0x20
         nvme_mpath_set_live+0x138/0x1b0 [nvme_core]
         nvme_update_ns_ana_state+0x2b/0x30 [nvme_core]
         nvme_update_ana_state+0xca/0xe0 [nvme_core]
         nvme_parse_ana_log+0xac/0x170 [nvme_core]
         nvme_read_ana_log+0x7d/0xe0 [nvme_core]
         nvme_mpath_init_identify+0x105/0x150 [nvme_core]
         nvme_init_identify+0x2df/0x4d0 [nvme_core]
         nvme_init_ctrl_finish+0x8d/0x3b0 [nvme_core]
         nvme_tcp_setup_ctrl+0x337/0x390 [nvme_tcp]
         nvme_tcp_reconnect_ctrl_work+0x24/0x40 [nvme_tcp]
         process_one_work+0x1bd/0x360
         worker_thread+0x50/0x3d0
    
    Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d44ff3b100b94e9f23b1e8dbe688eee9bb867ac9
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 21 13:57:27 2022 +0200

    nvmet: use a private workqueue instead of the system workqueue
    
    [ Upstream commit 8832cf922151e9dfa2821736beb0ae2dd3968b6e ]
    
    Any attempt to flush kernel-global WQs has possibility of deadlock
    so we should simply stop using them, instead introduce nvmet_wq
    which is the generic nvmet workqueue for work elements that
    don't explicitly require a dedicated workqueue (by the mere fact
    that they are using the system_wq).
    
    Changes were done using the following replaces:
    
     - s/schedule_work(/queue_work(nvmet_wq, /g
     - s/schedule_delayed_work(/queue_delayed_work(nvmet_wq, /g
     - s/flush_scheduled_work()/flush_workqueue(nvmet_wq)/g
    
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6f7efb9221ba5c6e66e3dba74b5c34c31ac81b6
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Sun Mar 20 07:02:14 2022 -0400

    tools/virtio: compile with -pthread
    
    [ Upstream commit f03560a57c1f60db6ac23ffd9714e1c69e2f95c7 ]
    
    When using pthreads, one has to compile and link with -lpthread,
    otherwise e.g. glibc is not guaranteed to be reentrant.
    
    This replaces -lpthread.
    
    Reported-by: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87c54a0b64752c09f4e4e13e4959d66495fba227
Author: Zhu Lingshan <lingshan.zhu@intel.com>
Date:   Tue Feb 22 19:54:25 2022 +0800

    vhost_vdpa: don't setup irq offloading when irq_num < 0
    
    [ Upstream commit cce0ab2b2a39072d81f98017f7b076f3410ef740 ]
    
    When irq number is negative(e.g., -EINVAL), the virtqueue
    may be disabled or the virtqueues are sharing a device irq.
    In such case, we should not setup irq offloading for a virtqueue.
    
    Signed-off-by: Zhu Lingshan <lingshan.zhu@intel.com>
    Link: https://lore.kernel.org/r/20220222115428.998334-3-lingshan.zhu@intel.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e32c4c7016eeb2186ffa4ebcbadbddc4b071234
Author: Niklas Schnelle <schnelle@linux.ibm.com>
Date:   Mon Sep 20 09:32:21 2021 +0200

    s390/pci: improve zpci_dev reference counting
    
    [ Upstream commit c122383d221dfa2f41cfe5e672540595de986fde ]
    
    Currently zpci_dev uses kref based reference counting but only accounts
    for one original reference plus one reference from an added pci_dev to
    its underlying zpci_dev. Counting just the original reference worked
    until the pci_dev reference was added in commit 2a671f77ee49 ("s390/pci:
    fix use after free of zpci_dev") because once a zpci_dev goes away, i.e.
    enters the reserved state, it would immediately get released. However
    with the pci_dev reference this is no longer the case and the zpci_dev
    may still appear in multiple availability events indicating that it was
    reserved. This was solved by detecting when the zpci_dev is already on
    its way out but still hanging around. This has however shown some light
    on how unusual our zpci_dev reference counting is.
    
    Improve upon this by modelling zpci_dev reference counting on pci_dev.
    Analogous to pci_get_slot() increment the reference count in
    get_zdev_by_fid(). Thus all users of get_zdev_by_fid() must drop the
    reference once they are done with the zpci_dev.
    
    Similar to pci_scan_single_device(), zpci_create_device() returns the
    device with an initial count of 1 and the device added to the zpci_list
    (analogous to the PCI bus' device_list). In turn users of
    zpci_create_device() must only drop the reference once the device is
    gone from the point of view of the zPCI subsystem, it might still be
    referenced by the common PCI subsystem though.
    
    Reviewed-by: Matthew Rosato <mjrosato@linux.ibm.com>
    Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d5f611add95bc1a0da4d6db78c1ea59df4fc366
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Wed Mar 16 19:13:20 2022 +0100

    s390/traps: improve panic message for translation-specification exception
    
    [ Upstream commit f09354ffd84eef3c88efa8ba6df05efe50cfd16a ]
    
    There are many different types of translation exceptions but only a
    translation-specification exception leads to a kernel panic since it
    indicates corrupted page tables, which must never happen.
    
    Improve the panic message so it is a bit more obvious what this is about.
    
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e3f28529a52465bd7387d0c414d6f98de11610a
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sat Mar 26 00:05:00 2022 +0800

    ALSA: hda/realtek: Enable headset mic on Lenovo P360
    
    [ Upstream commit 5a8738571747c1e275a40b69a608657603867b7e ]
    
    Lenovo P360 is another platform equipped with ALC897, and it needs
    ALC897_FIXUP_HEADSET_MIC_PIN quirk to make its headset mic work.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20220325160501.705221-1-kai.heng.feng@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e640d4a9d14b552d52bf658d8ce6edcce1f62e4
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Mar 22 12:48:10 2022 +0100

    crypto: x86/chacha20 - Avoid spurious jumps to other functions
    
    [ Upstream commit 4327d168515fd8b5b92fa1efdf1d219fb6514460 ]
    
    The chacha_Nblock_xor_avx512vl() functions all have their own,
    identical, .LdoneN label, however in one particular spot {2,4} jump to
    the 8 version instead of their own. Resulting in:
    
      arch/x86/crypto/chacha-x86_64.o: warning: objtool: chacha_2block_xor_avx512vl() falls through to next function chacha_8block_xor_avx512vl()
      arch/x86/crypto/chacha-x86_64.o: warning: objtool: chacha_4block_xor_avx512vl() falls through to next function chacha_8block_xor_avx512vl()
    
    Make each function consistently use its own done label.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 625ff6f49789a971a88a275ab4c1587b445bf598
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Thu Mar 17 13:16:13 2022 +0000

    crypto: stm32 - fix reference leak in stm32_crc_remove
    
    [ Upstream commit e9a36feecee0ee5845f2e0656f50f9942dd0bed3 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stm32_crc_remove, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a482fc4290b297d5ffb855c11026aa0b69f0409
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri Feb 11 12:26:28 2022 +0000

    rtc: sun6i: Fix time overflow handling
    
    [ Upstream commit 9f6cd82eca7e91a0d0311242a87c6aa3c2737968 ]
    
    Using "unsigned long" for UNIX timestamps is never a good idea, and
    comparing the value of such a variable against U32_MAX does not do
    anything useful on 32-bit systems.
    
    Use the proper time64_t type when dealing with timestamps, and avoid
    cutting down the time range unnecessarily. This also fixes the flawed
    check for the alarm time being too far into the future.
    
    The check for this condition is actually somewhat theoretical, as the
    RTC counts till 2033 only anyways, and 2^32 seconds from now is not
    before the year 2157 - at which point I hope nobody will be using this
    hardware anymore.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20220211122643.1343315-4-andre.przywara@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b2ea9a3a159fcdad4b22513be84189fc0db1666
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Mon Mar 14 18:32:02 2022 +0100

    gfs2: Disable page faults during lockless buffered reads
    
    [ Upstream commit 52f3f033a5dbd023307520af1ff551cadfd7f037 ]
    
    During lockless buffered reads, filemap_read() holds page cache page
    references while trying to copy data to the user-space buffer.  The
    calling process isn't holding the inode glock, but the page references
    it holds prevent those pages from being removed from the page cache, and
    that prevents the underlying inode glock from being moved to another
    node.  Thus, we can end up in the same kinds of distributed deadlock
    situations as with normal (non-lockless) buffered reads.
    
    Fix that by disabling page faults during lockless reads as well.
    
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fbccc4082c1a919c799df466af24479fcc0e216
Author: Monish Kumar R <monish.kumar.r@intel.com>
Date:   Wed Mar 16 13:24:49 2022 +0530

    nvme-pci: add quirks for Samsung X5 SSDs
    
    [ Upstream commit bc360b0b1611566e1bd47384daf49af6a1c51837 ]
    
    Add quirks to not fail the initialization and to have quick resume
    latency after cold/warm reboot.
    
    Signed-off-by: Monish Kumar R <monish.kumar.r@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6ae0d0b7b6b374186db7044a441d0c022ca8fd6
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    [ Upstream commit 26623eea0da3476446909af96c980768df07bbd9 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0211383109832103cfddfd5c5cc99b29d40bb749
Author: Jeff LaBundy <jeff@labundy.com>
Date:   Sun Mar 20 21:55:27 2022 -0700

    Input: add bounds checking to input_set_capability()
    
    [ Upstream commit 409353cbe9fe48f6bc196114c442b1cff05a39bc ]
    
    Update input_set_capability() to prevent kernel panic in case the
    event code exceeds the bitmap for the given event type.
    
    Suggested-by: Tomasz Moń <tomasz.mon@camlingroup.com>
    Signed-off-by: Jeff LaBundy <jeff@labundy.com>
    Reviewed-by: Tomasz Moń <tomasz.mon@camlingroup.com>
    Link: https://lore.kernel.org/r/20220320032537.545250-1-jeff@labundy.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ec283635457171afd8efee7a61d3678d57cdc85
Author: David Gow <davidgow@google.com>
Date:   Thu Feb 10 11:43:53 2022 +0800

    um: Cleanup syscall_handler_t definition/cast, fix warning
    
    [ Upstream commit f4f03f299a56ce4d73c5431e0327b3b6cb55ebb9 ]
    
    The syscall_handler_t type for x86_64 was defined as 'long (*)(void)',
    but always cast to 'long (*)(long, long, long, long, long, long)' before
    use. This now triggers a warning (see below).
    
    Define syscall_handler_t as the latter instead, and remove the cast.
    This simplifies the code, and fixes the warning.
    
    Warning:
    In file included from ../arch/um/include/asm/processor-generic.h:13
                     from ../arch/x86/um/asm/processor.h:41
                     from ../include/linux/rcupdate.h:30
                     from ../include/linux/rculist.h:11
                     from ../include/linux/pid.h:5
                     from ../include/linux/sched.h:14
                     from ../include/linux/ptrace.h:6
                     from ../arch/um/kernel/skas/syscall.c:7:
    ../arch/um/kernel/skas/syscall.c: In function ‘handle_syscall’:
    ../arch/x86/um/shared/sysdep/syscalls_64.h:18:11: warning: cast between incompatible function types from ‘long int (*)(void)’ to ‘long int (*)(long int,  long int,  long int,  long int,  long int,  long int)’ [
    -Wcast-function-type]
       18 |         (((long (*)(long, long, long, long, long, long)) \
          |           ^
    ../arch/x86/um/asm/ptrace.h:36:62: note: in definition of macro ‘PT_REGS_SET_SYSCALL_RETURN’
       36 | #define PT_REGS_SET_SYSCALL_RETURN(r, res) (PT_REGS_AX(r) = (res))
          |                                                              ^~~
    ../arch/um/kernel/skas/syscall.c:46:33: note: in expansion of macro ‘EXECUTE_SYSCALL’
       46 |                                 EXECUTE_SYSCALL(syscall, regs));
          |                                 ^~~~~~~~~~~~~~~
    
    Signed-off-by: David Gow <davidgow@google.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe9f2f3a68fce6ab3fcedc3a316152061d0cd577
Author: Hugo Villeneuve <hvilleneuve@dimonoff.com>
Date:   Tue Feb 8 11:29:07 2022 -0500

    rtc: pcf2127: fix bug when reading alarm registers
    
    [ Upstream commit 73ce05302007eece23a6acb7dc124c92a2209087 ]
    
    The first bug is that reading the 5 alarm registers results in a read
    operation of 20 bytes. The reason is because the destination buffer is
    defined as an array of "unsigned int", and we use the sizeof()
    operator on this array to define the bulk read count.
    
    The second bug is that the read value is invalid, because we are
    indexing the destination buffer as integers (4 bytes), instead of
    indexing it as u8.
    
    Changing the destination buffer type to u8 fixes both problems.
    
    Signed-off-by: Hugo Villeneuve <hvilleneuve@dimonoff.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20220208162908.3182581-1-hugo@hugovil.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25ddeb6be3d94a112958c000136751cbca57015b
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Fri Dec 10 17:09:51 2021 +0100

    rtc: fix use-after-free on device removal
    
    [ Upstream commit c8fa17d9f08a448184f03d352145099b5beb618e ]
    
    If the irqwork is still scheduled or running while the RTC device is
    removed, a use-after-free occurs in rtc_timer_do_work().  Cleanup the
    timerqueue and ensure the work is stopped to fix this.
    
     BUG: KASAN: use-after-free in mutex_lock+0x94/0x110
     Write of size 8 at addr ffffff801d846338 by task kworker/3:1/41
    
     Workqueue: events rtc_timer_do_work
     Call trace:
      mutex_lock+0x94/0x110
      rtc_timer_do_work+0xec/0x630
      process_one_work+0x5fc/0x1344
      ...
    
     Allocated by task 551:
      kmem_cache_alloc_trace+0x384/0x6e0
      devm_rtc_allocate_device+0xf0/0x574
      devm_rtc_device_register+0x2c/0x12c
      ...
    
     Freed by task 572:
      kfree+0x114/0x4d0
      rtc_device_release+0x64/0x80
      device_release+0x8c/0x1f4
      kobject_put+0x1c4/0x4b0
      put_device+0x20/0x30
      devm_rtc_release_device+0x1c/0x30
      devm_action_release+0x54/0x90
      release_nodes+0x124/0x310
      devres_release_group+0x170/0x240
      i2c_device_remove+0xd8/0x314
      ...
    
     Last potentially related work creation:
      insert_work+0x5c/0x330
      queue_work_on+0xcc/0x154
      rtc_set_time+0x188/0x5bc
      rtc_dev_ioctl+0x2ac/0xbd0
      ...
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20211210160951.7718-1-vincent.whitchurch@axis.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11e6a90ffd6294083b808d34ccc5a5ea18ed603e
Author: Greg Thelen <gthelen@google.com>
Date:   Mon May 16 17:08:35 2022 -0700

    Revert "drm/i915/opregion: check port number bounds for SWSCI display power state"
    
    This reverts commit b84857c06ef9e72d09fadafdbb3ce9af64af954f.
    
    5.10 stable contains 2 identical commits:
    1. commit eb7bf11e8ef1 ("drm/i915/opregion: check port number bounds for SWSCI display power state")
    2. commit b84857c06ef9 ("drm/i915/opregion: check port number bounds for SWSCI display power state")
    
    Both commits add separate checks for the same condition. Revert the 2nd
    redundant check to match upstream, which only has one check.
    
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Signed-off-by: Yu Liao <liaoyu15@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a122529082212ebb1adf358f43844f6823aa7ac3
Author: Hyeonggon Yoo <42.hyeyoo@gmail.com>
Date:   Mon May 9 17:34:29 2022 -0700

    mm/kfence: reset PG_slab and memcg_data before freeing __kfence_pool
    
    commit 2839b0999c20c9f6bf353849c69370e121e2fa1a upstream.
    
    When kfence fails to initialize kfence pool, it frees the pool.  But it
    does not reset memcg_data and PG_slab flag.
    
    Below is a BUG because of this. Let's fix it by resetting memcg_data
    and PG_slab flag before free.
    
    [    0.089149] BUG: Bad page state in process swapper/0  pfn:3d8e06
    [    0.089149] page:ffffea46cf638180 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x3d8e06
    [    0.089150] memcg:ffffffff94a475d1
    [    0.089150] flags: 0x17ffffc0000200(slab|node=0|zone=2|lastcpupid=0x1fffff)
    [    0.089151] raw: 0017ffffc0000200 ffffea46cf638188 ffffea46cf638188 0000000000000000
    [    0.089152] raw: 0000000000000000 0000000000000000 00000000ffffffff ffffffff94a475d1
    [    0.089152] page dumped because: page still charged to cgroup
    [    0.089153] Modules linked in:
    [    0.089153] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G    B   W         5.18.0-rc1+ #965
    [    0.089154] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-2 04/01/2014
    [    0.089154] Call Trace:
    [    0.089155]  <TASK>
    [    0.089155]  dump_stack_lvl+0x49/0x5f
    [    0.089157]  dump_stack+0x10/0x12
    [    0.089158]  bad_page.cold+0x63/0x94
    [    0.089159]  check_free_page_bad+0x66/0x70
    [    0.089160]  __free_pages_ok+0x423/0x530
    [    0.089161]  __free_pages_core+0x8e/0xa0
    [    0.089162]  memblock_free_pages+0x10/0x12
    [    0.089164]  memblock_free_late+0x8f/0xb9
    [    0.089165]  kfence_init+0x68/0x92
    [    0.089166]  start_kernel+0x789/0x992
    [    0.089167]  x86_64_start_reservations+0x24/0x26
    [    0.089168]  x86_64_start_kernel+0xa9/0xaf
    [    0.089170]  secondary_startup_64_no_verify+0xd5/0xdb
    [    0.089171]  </TASK>
    
    Link: https://lkml.kernel.org/r/YnPG3pQrqfcgOlVa@hyeyoo
    Fixes: 0ce20dd84089 ("mm: add Kernel Electric-Fence infrastructure")
    Fixes: 8f0b36497303 ("mm: kfence: fix objcgs vector allocation")
    Signed-off-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Reviewed-by: Marco Elver <elver@google.com>
    Reviewed-by: Muchun Song <songmuchun@bytedance.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    [42.hyeyoo@gmail.com: backport - use struct page]
    Signed-off-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 486bcceeed0423232f502add0333f70b0a659015
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 2 09:35:25 2022 -0600

    Watchdog: sp5100_tco: Enable Family 17h+ CPUs
    
    commit 826270373f17fd8ebd10753ca0a5fd2ceb1dc38e upstream.
    
    The driver currently uses a CPU family match of 17h to determine
    EFCH_PM_DECODEEN_WDT_TMREN register support. This family check will not
    support future AMD CPUs and instead will require driver updates to add
    support.
    
    Remove the family 17h family check and add a check for SMBus PCI
    revision ID 0x51 or greater. The MMIO access method has been available
    since at least SMBus controllers using PCI revision 0x51. This revision
    check will support family 17h and future AMD processors including EFCH
    functionality without requiring driver changes.
    
    Co-developed-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Tested-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220202153525.1693378-5-terry.bowman@amd.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4c0f1600df43245c8c3425dbd9426fdfba6c4b2
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 2 09:35:24 2022 -0600

    Watchdog: sp5100_tco: Add initialization using EFCH MMIO
    
    commit 0578fff4aae5bce3f09875f58e68e9ffbab8daf5 upstream.
    
    cd6h/cd7h port I/O can be disabled on recent AMD hardware. Read
    accesses to disabled cd6h/cd7h port I/O will return F's and written
    data is dropped. It is recommended to replace the cd6h/cd7h
    port I/O with MMIO.
    
    Co-developed-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Tested-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220202153525.1693378-4-terry.bowman@amd.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bb1b58c53b0018289540a255f9f4caeff58bcc6
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 2 09:35:23 2022 -0600

    Watchdog: sp5100_tco: Refactor MMIO base address initialization
    
    commit 1f182aca230086d4a4469c0f9136a6ea762d6385 upstream.
    
    Combine MMIO base address and alternate base address detection. Combine
    based on layout type. This will simplify the function by eliminating
    a switch case.
    
    Move existing request/release code into functions. This currently only
    supports port I/O request/release. The move into a separate function
    will make it ready for adding MMIO region support.
    
    Co-developed-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Tested-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220202153525.1693378-3-terry.bowman@amd.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ed3e7523df3176d867140e44c9a17c501097947
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 2 09:35:22 2022 -0600

    Watchdog: sp5100_tco: Move timer initialization into function
    
    commit abd71a948f7aab47ca49d3e7fe6afa6c48c8aae0 upstream.
    
    Refactor driver's timer initialization into new function. This is needed
    inorder to support adding new device layouts while using common timer
    initialization.
    
    Co-developed-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Robert Richter <rrichter@amd.com>
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Tested-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220202153525.1693378-2-terry.bowman@amd.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5996d3601e774f7875537e5ba7aea0abf77441b0
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:17 2022 -0600

    i2c: piix4: Enable EFCH MMIO for Family 17h+
    
    commit 6cf72f41808ab5db1d7718b999b3ff0166e67e45 upstream.
    
    Enable EFCH MMIO using check for SMBus PCI revision ID value 0x51 or
    greater. This PCI revision ID check will enable family 17h and future
    AMD processors with the same EFCH SMBus controller HW.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d46b4ff3bb0bf707253ccba412ebf9a6b3aa1433
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:16 2022 -0600

    i2c: piix4: Add EFCH MMIO support for SMBus port select
    
    commit 381a3083c6747ae5cdbef9b176d57d1b966db49f upstream.
    
    AMD processors include registers capable of selecting between 2 SMBus
    ports. Port selection is made during each user access by writing to
    FCH::PM::DECODEEN[smbus0sel]. Change the driver to use MMIO during
    SMBus port selection because cd6h/cd7h port I/O is not available on
    later AMD processors.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4194b266bf7ef8ac5c38394b1427255598fb084
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:15 2022 -0600

    i2c: piix4: Add EFCH MMIO support to SMBus base address detect
    
    commit 46967bc1ee93acd1d8953c87dc16f43de4076f93 upstream.
    
    The EFCH SMBus controller's base address is determined using details in
    FCH::PM::DECODEEN[smbusasfiobase] and FCH::PM::DECODEEN[smbusasfioen].These
    register fields were accessed using cd6h/cd7h port I/O. cd6h/cd7h port I/O
    is no longer available in later AMD processors. Change base address
    detection to use MMIO instead of port I/O cd6h/cd7h.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b965566ca26e83553d92b8c57050e5d59911806
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:14 2022 -0600

    i2c: piix4: Add EFCH MMIO support to region request and release
    
    commit 7c148722d074c29fb998578eea5de3c14b9608c9 upstream.
    
    EFCH cd6h/cd7h port I/O may no longer be available on later AMD
    processors and it is recommended to use MMIO instead. Update the
    request and release functions to support MMIO.
    
    MMIO request/release and mmapping require details during cleanup.
    Add a MMIO configuration structure containing resource and vaddress
    details for mapping the region, accessing the region, and releasing
    the region.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    [wsa: rebased after fixup in previous patch]
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08bc26f28bcbef4b96c94205a4cee5a763514279
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:13 2022 -0600

    i2c: piix4: Move SMBus port selection into function
    
    commit fbafbd51bff52cb3a920fd98d4dae2a78dd433d0 upstream.
    
    Move port selection code into a separate function. Refactor is in
    preparation for following MMIO changes.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a8119ddc3c5069dca15b5497db244152471fa87
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:12 2022 -0600

    i2c: piix4: Move SMBus controller base address detect into function
    
    commit 0a59a24e14e9b21dcbb6b8ea41422e2fdfa437fd upstream.
    
    Move SMBus controller base address detection into function. Refactor
    is in preparation for following MMIO changes.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdf9bed734c3981acd12e3c3e2825ae87dd44f6b
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:11 2022 -0600

    i2c: piix4: Move port I/O region request/release code into functions
    
    commit a3325d225b00889f4b7fdb25d83033cae1048a92 upstream.
    
    Move duplicated region request and release code into a function. Move is
    in preparation for following MMIO changes.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    [wsa: added missing curly brace]
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5166f933da0e35efa5b241bd3dc7a787daba1d6e
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:10 2022 -0600

    i2c: piix4: Replace hardcoded memory map size with a #define
    
    commit 93102cb449780f7b4eecf713451627b78373ce49 upstream.
    
    Replace number constant with #define to improve readability and
    maintainability.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 879e811a41f8d3fc9294380d4663cb72f6d00208
Author: Terry Bowman <terry.bowman@amd.com>
Date:   Wed Feb 9 11:27:09 2022 -0600

    kernel/resource: Introduce request_mem_region_muxed()
    
    commit 27c196c7b73cb70bbed3a9df46563bab60e63415 upstream.
    
    Support for requesting muxed memory region is implemented but not
    currently callable as a macro. Add the request muxed memory
    region macro.
    
    MMIO memory accesses can be synchronized using request_mem_region() which
    is already available. This call will return failure if the resource is
    busy. The 'muxed' version of this macro will handle a busy resource by
    using a wait queue to retry until the resource is available.
    
    Signed-off-by: Terry Bowman <terry.bowman@amd.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: Mario Limonciello <Mario.Limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc2bee93e31bbba920e9eeba76af72264ced066f
Author: Willy Tarreau <w@1wt.eu>
Date:   Sun May 8 11:37:07 2022 +0200

    floppy: use a statically allocated error counter
    
    commit f71f01394f742fc4558b3f9f4c7ef4c4cf3b07c8 upstream.
    
    Interrupt handler bad_flp_intr() may cause a UAF on the recently freed
    request just to increment the error count.  There's no point keeping
    that one in the request anyway, and since the interrupt handler uses a
    static pointer to the error which cannot be kept in sync with the
    pending request, better make it use a static error counter that's reset
    for each new request.  This reset now happens when entering
    redo_fd_request() for a new request via set_next_request().
    
    One initial concern about a single error counter was that errors on one
    floppy drive could be reported on another one, but this problem is not
    real given that the driver uses a single drive at a time, as that
    PC-compatible controllers also have this limitation by using shared
    signals.  As such the error count is always for the "current" drive.
    
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linuxfoundation.org>
    Tested-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5655455a06b8d17285df320dd1bce19d37392fa9
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Sun Oct 17 00:07:08 2021 +0100

    io_uring: arm poll for non-nowait files
    
    commit e74ead135bc4459f7d40b1f8edab1333a28b54e8 upstream.
    
    Don't check if we can do nowait before arming apoll, there are several
    reasons for that. First, we don't care much about files that don't
    support nowait. Second, it may be useful -- we don't want to be taking
    away extra workers from io-wq when it can go in some async. Even if it
    will go through io-wq eventually, it make difference in the numbers of
    workers actually used. And the last one, it's needed to clean nowait in
    future commits.
    
    [kernel test robot: fix unused-var]
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/9d06f3cb2c8b686d970269a87986f154edb83043.1634425438.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9bae32c6a32a86805dc1152196f55cf02114b93
Author: Schspa Shi <schspa@gmail.com>
Date:   Sun May 8 23:02:47 2022 +0800

    usb: gadget: fix race when gadget driver register via ioctl
    
    commit 5f0b5f4d50fa0faa8c76ef9d42a42e8d43f98b44 upstream.
    
    The usb_gadget_register_driver can be called multi time by to
    threads via USB_RAW_IOCTL_RUN ioctl syscall, which will lead
    to multiple registrations.
    
    Call trace:
      driver_register+0x220/0x3a0 drivers/base/driver.c:171
      usb_gadget_register_driver_owner+0xfb/0x1e0
        drivers/usb/gadget/udc/core.c:1546
      raw_ioctl_run drivers/usb/gadget/legacy/raw_gadget.c:513 [inline]
      raw_ioctl+0x1883/0x2730 drivers/usb/gadget/legacy/raw_gadget.c:1220
      ioctl USB_RAW_IOCTL_RUN
    
    This routine allows two processes to register the same driver instance
    via ioctl syscall. which lead to a race condition.
    
    Please refer to the following scenarios.
    
               T1                                  T2
    ------------------------------------------------------------------
    usb_gadget_register_driver_owner
      driver_register                    driver_register
        driver_find                       driver_find
        bus_add_driver                    bus_add_driver
          priv alloced                     <context switch>
          drv->p = priv;
          <schedule out>
          kobject_init_and_add // refcount = 1;
       //couldn't find an available UDC or it's busy
       <context switch>
                                           priv alloced
                                           drv->priv = priv;
                                           kobject_init_and_add
                                             ---> refcount = 1 <------
                                           // register success
                                           <context switch>
    ===================== another ioctl/process ======================
                                          driver_register
                                           driver_find
                                            k = kset_find_obj()
                                             ---> refcount = 2 <------
                                            <context out>
       driver_unregister
       // drv->p become T2's priv
       ---> refcount = 1 <------
       <context switch>
                                            kobject_put(k)
                                             ---> refcount = 0 <------
                                            return priv->driver;
                                            --------UAF here----------
    
    There will be UAF in this scenario.
    
    We can fix it by adding a new STATE_DEV_REGISTERING device state to
    avoid double register.
    
    Reported-by: syzbot+dc7c3ca638e773db07f6@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/all/000000000000e66c2805de55b15a@google.com/
    Reviewed-by: Andrey Konovalov <andreyknvl@gmail.com>
    Signed-off-by: Schspa Shi <schspa@gmail.com>
    Link: https://lore.kernel.org/r/20220508150247.38204-1-schspa@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c44e13dc284f7f4db17706ca48fd016d6b3d49a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 16 18:27:31 2023 +0200

    Linux 6.1.46
    
    Link: https://lore.kernel.org/r/20230813211718.757428827@linuxfoundation.org
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Thierry Reding <treding@nvidia.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5525c289dbcf2b1adecc5e727e7d544ade9c7be1
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Feb 6 11:47:47 2023 -0500

    drm/amd/pm/smu7: move variables to where they are used
    
    commit 63a9ab264a8c030482ab9e7e20b6c4c162299531 upstream.
    
    Move variable declarations to where they are used.  Fixes
    a segfault on smu7 V0 structures where some tables don't
    exist.
    
    Cc: Evan Quan <evan.quan@amd.com>
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2388
    Fixes: b1a9557a7d00 ("drm/amd/pm: fulfill powerplay peak profiling mode shader/memory clock settings")
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4346a66ad19876663e46d57c85dac5958f227033
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jun 22 18:15:03 2023 +0000

    sch_netem: fix issues in netem_change() vs get_dist_table()
    
    commit 11b73313c12403f617b47752db0ab3deef201af7 upstream.
    
    In blamed commit, I missed that get_dist_table() was allocating
    memory using GFP_KERNEL, and acquiring qdisc lock to perform
    the swap of newly allocated table with current one.
    
    In this patch, get_dist_table() is allocating memory and
    copy user data before we acquire the qdisc lock.
    
    Then we perform swap operations while being protected by the lock.
    
    Note that after this patch netem_change() no longer can do partial changes.
    If an error is returned, qdisc conf is left unchanged.
    
    Fixes: 2174a08db80d ("sch_netem: acquire qdisc lock in netem_change()")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230622181503.2327695-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ae919c317dd6607f9c166ce1e0cb2cf5f02dd2b
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sat Jul 29 16:42:23 2023 +0900

    alpha: remove __init annotation from exported page_is_ram()
    
    commit 6ccbd7fd474674654019a20177c943359469103a upstream.
    
    EXPORT_SYMBOL and __init is a bad combination because the .init.text
    section is freed up after the initialization.
    
    Commit c5a130325f13 ("ACPI/APEI: Add parameter check before error
    injection") exported page_is_ram(), hence the __init annotation should
    be removed.
    
    This fixes the modpost warning in ARCH=alpha builds:
    
      WARNING: modpost: vmlinux: page_is_ram: EXPORT_SYMBOL used for init symbol. Remove __init or EXPORT_SYMBOL.
    
    Fixes: c5a130325f13 ("ACPI/APEI: Add parameter check before error injection")
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbce265f959f0b58feb06fa90600e683b853c220
Author: Simon Trimmer <simont@opensource.cirrus.com>
Date:   Fri Jul 28 12:13:45 2023 +0100

    ACPI: scan: Create platform device for CS35L56
    
    commit 1cd0302be5645420f73090aee26fa787287e1096 upstream.
    
    The ACPI device CSC3556 is a Cirrus Logic CS35L56 mono amplifier which
    is used in multiples, and can be connected either to I2C or SPI.
    
    There will be multiple instances under the same Device() node. Add it
    to ignore_serial_bus_ids and handle it in the serial-multi-instantiate
    driver.
    
    There can be a 5th I2cSerialBusV2, but this is an alias address and doesn't
    represent a real device. Ignore this by having a dummy 5th entry in the
    serial-multi-instantiate instance list with the name of a non-existent
    driver, on the same pattern as done for bsg2150.
    
    Signed-off-by: Simon Trimmer <simont@opensource.cirrus.com>
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Link: https://lore.kernel.org/r/20230728111345.7224-1-rf@opensource.cirrus.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afc4ddd9507f2d829b503a41b8de33535e521c55
Author: David Xu <xuwd1@hotmail.com>
Date:   Thu Jul 13 21:35:28 2023 +0800

    platform/x86: serial-multi-instantiate: Auto detect IRQ resource for CSC3551
    
    commit 676b7c5ecab36274442887ceadd6dee8248a244f upstream.
    
    The current code assumes that the CSC3551(multiple cs35l41) always have
    its interrupt pin connected to GPIO thus the IRQ can be acquired with
    acpi_dev_gpio_irq_get. However on some newer laptop models this is no
    longer the case as they have the CSC3551's interrupt pin connected to
    APIC. This causes smi_i2c_probe to fail on these machines.
    
    To support these machines, a new macro IRQ_RESOURCE_AUTO was introduced
    for cs35l41 smi_node, and smi_get_irq function was modified so it tries
    to get GPIO irq resource first and if failed, tries to get
    APIC irq resource for cs35l41.
    
    This patch affects only the cs35l41's probing and brings no negative
    influence on machines that indeed have the cs35l41's interrupt pin
    connected to GPIO.
    
    Signed-off-by: David Xu <xuwd1@hotmail.com>
    Link: https://lore.kernel.org/r/SY4P282MB18350CD8288687B87FFD2243E037A@SY4P282MB1835.AUSP282.PROD.OUTLOOK.COM
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38b0020f68b7d80242e46b8eba69ed80ceaec157
Author: Nilesh Javali <njavali@marvell.com>
Date:   Mon Aug 7 15:07:24 2023 +0530

    scsi: qedf: Fix firmware halt over suspend and resume
    
    commit ef222f551e7c4e2008fc442ffc9edcd1a7fd8f63 upstream.
    
    While performing certain power-off sequences, PCI drivers are called to
    suspend and resume their underlying devices through PCI PM (power
    management) interface. However the hardware does not support PCI PM
    suspend/resume operations so system wide suspend/resume leads to bad MFW
    (management firmware) state which causes various follow-up errors in driver
    when communicating with the device/firmware.
    
    To fix this driver implements PCI PM suspend handler to indicate
    unsupported operation to the PCI subsystem explicitly, thus avoiding system
    to go into suspended/standby mode.
    
    Fixes: 61d8658b4a43 ("scsi: qedf: Add QLogic FastLinQ offload FCoE driver framework.")
    Signed-off-by: Saurav Kashyap <skashyap@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Link: https://lore.kernel.org/r/20230807093725.46829-1-njavali@marvell.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9518f4a4978c0db34d5305c0538e3c1ad9b1658
Author: Nilesh Javali <njavali@marvell.com>
Date:   Mon Aug 7 15:07:25 2023 +0530

    scsi: qedi: Fix firmware halt over suspend and resume
    
    commit 1516ee035df32115197cd93ae3619dba7b020986 upstream.
    
    While performing certain power-off sequences, PCI drivers are called to
    suspend and resume their underlying devices through PCI PM (power
    management) interface. However the hardware does not support PCI PM
    suspend/resume operations so system wide suspend/resume leads to bad MFW
    (management firmware) state which causes various follow-up errors in driver
    when communicating with the device/firmware.
    
    To fix this driver implements PCI PM suspend handler to indicate
    unsupported operation to the PCI subsystem explicitly, thus avoiding system
    to go into suspended/standby mode.
    
    Fixes: ace7f46ba5fd ("scsi: qedi: Add QLogic FastLinQ offload iSCSI driver framework.")
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Link: https://lore.kernel.org/r/20230807093725.46829-2-njavali@marvell.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb004497b3ea4bdc4f8e005f4ed07c133f4c43a0
Author: Karan Tilak Kumar <kartilak@cisco.com>
Date:   Thu Jul 27 12:39:19 2023 -0700

    scsi: fnic: Replace return codes in fnic_clean_pending_aborts()
    
    commit 5a43b07a87835660f91d88a4db11abfea8c523b7 upstream.
    
    fnic_clean_pending_aborts() was returning a non-zero value irrespective of
    failure or success.  This caused the caller of this function to assume that
    the device reset had failed, even though it would succeed in most cases. As
    a consequence, a successful device reset would escalate to host reset.
    
    Reviewed-by: Sesidhar Baddela <sebaddel@cisco.com>
    Tested-by: Karan Tilak Kumar <kartilak@cisco.com>
    Signed-off-by: Karan Tilak Kumar <kartilak@cisco.com>
    Link: https://lore.kernel.org/r/20230727193919.2519-1-kartilak@cisco.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b191ff1f075c4875f11271cbf0093e6e044a12aa
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Thu Aug 3 10:02:30 2023 +0800

    scsi: core: Fix possible memory leak if device_add() fails
    
    commit 04b5b5cb0136ce970333a9c6cec7e46adba1ea3a upstream.
    
    If device_add() returns error, the name allocated by dev_set_name() needs
    be freed. As the comment of device_add() says, put_device() should be used
    to decrease the reference count in the error path. So fix this by calling
    put_device(), then the name can be freed in kobject_cleanp().
    
    Fixes: ee959b00c335 ("SCSI: convert struct class_device to struct device")
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Link: https://lore.kernel.org/r/20230803020230.226903-1-wangzhu9@huawei.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7723a5d5d187626c4c640842e522cf4e9e39492e
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Tue Aug 1 19:14:21 2023 +0800

    scsi: snic: Fix possible memory leak if device_add() fails
    
    commit 41320b18a0e0dfb236dba4edb9be12dba1878156 upstream.
    
    If device_add() returns error, the name allocated by dev_set_name() needs
    be freed. As the comment of device_add() says, put_device() should be used
    to give up the reference in the error path. So fix this by calling
    put_device(), then the name can be freed in kobject_cleanp().
    
    Fixes: c8806b6c9e82 ("snic: driver for Cisco SCSI HBA")
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Acked-by: Narsimhulu Musini <nmusini@cisco.com>
    Link: https://lore.kernel.org/r/20230801111421.63651-1-wangzhu9@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fdb273ede6f4428f44b09267a95f2a10b738809
Author: Alexandra Diupina <adiupina@astralinux.ru>
Date:   Fri Jul 28 15:35:21 2023 +0300

    scsi: 53c700: Check that command slot is not NULL
    
    commit 8366d1f1249a0d0bba41d0bd1298d63e5d34c7f7 upstream.
    
    Add a check for the command slot value to avoid dereferencing a NULL
    pointer.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Co-developed-by: Vladimir Telezhnikov <vtelezhnikov@astralinux.ru>
    Signed-off-by: Vladimir Telezhnikov <vtelezhnikov@astralinux.ru>
    Signed-off-by: Alexandra Diupina <adiupina@astralinux.ru>
    Link: https://lore.kernel.org/r/20230728123521.18293-1-adiupina@astralinux.ru
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8282d0b35880dd5378f83cabd1e58b9f7b9b3f24
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Thu Aug 3 17:18:12 2023 +0900

    scsi: ufs: renesas: Fix private allocation
    
    commit b6d128f89a85771433a004e8656090ccbe1fb969 upstream.
    
    Should use devm_kzalloc() for struct ufs_renesas_priv because the
    .initialized should be false as default.
    
    Fixes: d69520288efd ("scsi: ufs: ufs-renesas: Add support for Renesas R-Car UFS controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/20230803081812.1446282-1-yoshihiro.shimoda.uh@renesas.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed70fa5629a8b992a5372d7044d1db1f8fa6de29
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Fri Jul 28 21:59:24 2023 -0700

    scsi: storvsc: Fix handling of virtual Fibre Channel timeouts
    
    commit 175544ad48cbf56affeef2a679c6a4d4fb1e2881 upstream.
    
    Hyper-V provides the ability to connect Fibre Channel LUNs to the host
    system and present them in a guest VM as a SCSI device. I/O to the vFC
    device is handled by the storvsc driver. The storvsc driver includes a
    partial integration with the FC transport implemented in the generic
    portion of the Linux SCSI subsystem so that FC attributes can be displayed
    in /sys.  However, the partial integration means that some aspects of vFC
    don't work properly. Unfortunately, a full and correct integration isn't
    practical because of limitations in what Hyper-V provides to the guest.
    
    In particular, in the context of Hyper-V storvsc, the FC transport timeout
    function fc_eh_timed_out() causes a kernel panic because it can't find the
    rport and dereferences a NULL pointer. The original patch that added the
    call from storvsc_eh_timed_out() to fc_eh_timed_out() is faulty in this
    regard.
    
    In many cases a timeout is due to a transient condition, so the situation
    can be improved by just continuing to wait like with other I/O requests
    issued by storvsc, and avoiding the guaranteed panic. For a permanent
    failure, continuing to wait may result in a hung thread instead of a panic,
    which again may be better.
    
    So fix the panic by removing the storvsc call to fc_eh_timed_out().  This
    allows storvsc to keep waiting for a response.  The change has been tested
    by users who experienced a panic in fc_eh_timed_out() due to transient
    timeouts, and it solves their problem.
    
    In the future we may want to deprecate the vFC functionality in storvsc
    since it can't be fully fixed. But it has current users for whom it is
    working well enough, so it should probably stay for a while longer.
    
    Fixes: 3930d7309807 ("scsi: storvsc: use default I/O timeout handler for FC devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1690606764-79669-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e1605ec5bea016117bc6d9d0bfe95906c014c7a
Author: Tony Battersby <tonyb@cybernetics.com>
Date:   Mon Jul 24 14:25:40 2023 -0400

    scsi: core: Fix legacy /proc parsing buffer overflow
    
    commit 9426d3cef5000824e5f24f80ed5f42fb935f2488 upstream.
    
    (lightly modified commit message mostly by Linus Torvalds)
    
    The parsing code for /proc/scsi/scsi is disgusting and broken.  We should
    have just used 'sscanf()' or something simple like that, but the logic may
    actually predate our kernel sscanf library routine for all I know.  It
    certainly predates both git and BK histories.
    
    And we can't change it to be something sane like that now, because the
    string matching at the start is done case-insensitively, and the separator
    parsing between numbers isn't done at all, so *any* separator will work,
    including a possible terminating NUL character.
    
    This interface is root-only, and entirely for legacy use, so there is
    absolutely no point in trying to tighten up the parsing.  Because any
    separator has traditionally worked, it's entirely possible that people have
    used random characters rather than the suggested space.
    
    So don't bother to try to pretty it up, and let's just make a minimal patch
    that can be back-ported and we can forget about this whole sorry thing for
    another two decades.
    
    Just make it at least not read past the end of the supplied data.
    
    Link: https://lore.kernel.org/linux-scsi/b570f5fe-cb7c-863a-6ed9-f6774c219b88@cybernetics.com/
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Martin K Petersen <martin.petersen@oracle.com>
    Cc: James Bottomley <jejb@linux.ibm.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: stable@kernel.org
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Tony Battersby <tonyb@cybernetics.com>
    Signed-off-by: Martin K Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3f0f95a023370561a9b4d2028308f8452f1e7d1
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Jun 28 16:24:27 2023 +0200

    netfilter: nf_tables: report use refcount overflow
    
    commit 1689f25924ada8fe14a4a82c38925d04994c7142 upstream.
    
    Overflow use refcount checks are not complete.
    
    Add helper function to deal with object reference counter tracking.
    Report -EMFILE in case UINT_MAX is reached.
    
    nft_use_dec() splats in case that reference counter underflows,
    which should not ever happen.
    
    Add nft_use_inc_restore() and nft_use_dec_restore() which are used
    to restore reference counter from error and abort paths.
    
    Use u32 in nft_flowtable and nft_object since helper functions cannot
    work on bitfields.
    
    Remove the few early incomplete checks now that the helper functions
    are in place and used to check for refcount overflow.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c21fddce7e450b737a77cd918e55969076143bb0
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Jul 11 17:40:41 2023 +0800

    nvme-rdma: fix potential unbalanced freeze & unfreeze
    
    commit 29b434d1e49252b3ad56ad3197e47fafff5356a1 upstream.
    
    Move start_freeze into nvme_rdma_configure_io_queues(), and there is
    at least two benefits:
    
    1) fix unbalanced freeze and unfreeze, since re-connection work may
    fail or be broken by removal
    
    2) IO during error recovery can be failfast quickly because nvme fabrics
    unquiesces queues after teardown.
    
    One side-effect is that !mpath request may timeout during connecting
    because of queue topo change, but that looks not one big deal:
    
    1) same problem exists with current code base
    
    2) compared with !mpath, mpath use case is dominant
    
    Fixes: 9f98772ba307 ("nvme-rdma: fix controller reset hang during traffic")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cddbaa8dee7e7d4eb678e6f04fec1aa43117c7f4
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Jul 11 17:40:40 2023 +0800

    nvme-tcp: fix potential unbalanced freeze & unfreeze
    
    commit 99dc264014d5aed66ee37ddf136a38b5a2b1b529 upstream.
    
    Move start_freeze into nvme_tcp_configure_io_queues(), and there is
    at least two benefits:
    
    1) fix unbalanced freeze and unfreeze, since re-connection work may
    fail or be broken by removal
    
    2) IO during error recovery can be failfast quickly because nvme fabrics
    unquiesces queues after teardown.
    
    One side-effect is that !mpath request may timeout during connecting
    because of queue topo change, but that looks not one big deal:
    
    1) same problem exists with current code base
    
    2) compared with !mpath, mpath use case is dominant
    
    Fixes: 2875b0aecabe ("nvme-tcp: fix controller reset hang during traffic")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf67802453d3ebe1a9bcead9201d48f8c97f0f5a
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Aug 2 09:20:24 2023 -0400

    btrfs: set cache_block_group_error if we find an error
    
    commit 92fb94b69c6accf1e49fff699640fa0ce03dc910 upstream.
    
    We set cache_block_group_error if btrfs_cache_block_group() returns an
    error, this is because we could end up not finding space to allocate and
    mistakenly return -ENOSPC, and which could then abort the transaction
    with the incorrect errno, and in the case of ENOSPC result in a
    WARN_ON() that will trip up tests like generic/475.
    
    However there's the case where multiple threads can be racing, one
    thread gets the proper error, and the other thread doesn't actually call
    btrfs_cache_block_group(), it instead sees ->cached ==
    BTRFS_CACHE_ERROR.  Again the result is the same, we fail to allocate
    our space and return -ENOSPC.  Instead we need to set
    cache_block_group_error to -EIO in this case to make sure that if we do
    not make our allocation we get the appropriate error returned back to
    the caller.
    
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ae93b316ca4b8b3c33798ef1d210355f2fb9318
Author: Qu Wenruo <wqu@suse.com>
Date:   Thu Aug 3 17:20:43 2023 +0800

    btrfs: reject invalid reloc tree root keys with stack dump
    
    commit 6ebcd021c92b8e4b904552e4d87283032100796d upstream.
    
    [BUG]
    Syzbot reported a crash that an ASSERT() got triggered inside
    prepare_to_merge().
    
    That ASSERT() makes sure the reloc tree is properly pointed back by its
    subvolume tree.
    
    [CAUSE]
    After more debugging output, it turns out we had an invalid reloc tree:
    
      BTRFS error (device loop1): reloc tree mismatch, root 8 has no reloc root, expect reloc root key (-8, 132, 8) gen 17
    
    Note the above root key is (TREE_RELOC_OBJECTID, ROOT_ITEM,
    QUOTA_TREE_OBJECTID), meaning it's a reloc tree for quota tree.
    
    But reloc trees can only exist for subvolumes, as for non-subvolume
    trees, we just COW the involved tree block, no need to create a reloc
    tree since those tree blocks won't be shared with other trees.
    
    Only subvolumes tree can share tree blocks with other trees (thus they
    have BTRFS_ROOT_SHAREABLE flag).
    
    Thus this new debug output proves my previous assumption that corrupted
    on-disk data can trigger that ASSERT().
    
    [FIX]
    Besides the dedicated fix and the graceful exit, also let tree-checker to
    check such root keys, to make sure reloc trees can only exist for subvolumes.
    
    CC: stable@vger.kernel.org # 5.15+
    Reported-by: syzbot+ae97a827ae1c3336bbb4@syzkaller.appspotmail.com
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d04716e36654275aea00fb93fc9b30b850925e7
Author: Qu Wenruo <wqu@suse.com>
Date:   Thu Aug 3 17:20:42 2023 +0800

    btrfs: exit gracefully if reloc roots don't match
    
    commit 05d7ce504545f7874529701664c90814ca645c5d upstream.
    
    [BUG]
    Syzbot reported a crash that an ASSERT() got triggered inside
    prepare_to_merge().
    
    [CAUSE]
    The root cause of the triggered ASSERT() is we can have a race between
    quota tree creation and relocation.
    
    This leads us to create a duplicated quota tree in the
    btrfs_read_fs_root() path, and since it's treated as fs tree, it would
    have ROOT_SHAREABLE flag, causing us to create a reloc tree for it.
    
    The bug itself is fixed by a dedicated patch for it, but this already
    taught us the ASSERT() is not something straightforward for
    developers.
    
    [ENHANCEMENT]
    Instead of using an ASSERT(), let's handle it gracefully and output
    extra info about the mismatch reloc roots to help debug.
    
    Also with the above ASSERT() removed, we can trigger ASSERT(0)s inside
    merge_reloc_roots() later.
    Also replace those ASSERT(0)s with WARN_ON()s.
    
    CC: stable@vger.kernel.org # 5.15+
    Reported-by: syzbot+ae97a827ae1c3336bbb4@syzkaller.appspotmail.com
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7112abc9e8f2893328cbb2e055c3e21133cc7a3b
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jul 24 06:26:55 2023 -0700

    btrfs: properly clear end of the unreserved range in cow_file_range
    
    commit 12b2d64e591652a2d97dd3afa2b062ca7a4ba352 upstream.
    
    When the call to btrfs_reloc_clone_csums in cow_file_range returns an
    error, we jump to the out_unlock label with the extent_reserved variable
    set to false.   The cleanup at the label will then call
    extent_clear_unlock_delalloc on the range from start to end.  But we've
    already added cur_alloc_size to start before the jump, so there might no
    range be left from the newly incremented start to end.  Move the check for
    'start < end' so that it is reached by also for the !extent_reserved case.
    
    CC: stable@vger.kernel.org # 6.1+
    Fixes: a315e68f6e8b ("Btrfs: fix invalid attempt to free reserved space on failure to cow range")
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 504d81c512f614ce6aa3d4857e6587580e445a1d
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jul 24 06:26:53 2023 -0700

    btrfs: don't stop integrity writeback too early
    
    commit effa24f689ce0948f68c754991a445a8d697d3a8 upstream.
    
    extent_write_cache_pages stops writing pages as soon as nr_to_write hits
    zero.  That is the right thing for opportunistic writeback, but incorrect
    for data integrity writeback, which needs to ensure that no dirty pages
    are left in the range.  Thus only stop the writeback for WB_SYNC_NONE
    if nr_to_write hits 0.
    
    This is a port of write_cache_pages changes in commit 05fe478dd04e
    ("mm: write_cache_pages integrity fix").
    
    Note that I've only trigger the problem with other changes to the btrfs
    writeback code, but this condition seems worthwhile fixing anyway.
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ updated comment ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e18c827d61b105eacc7e2a65871a92eece8c5af
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jul 21 16:09:43 2023 -0400

    btrfs: wait for actual caching progress during allocation
    
    commit fc1f91b9231a28fba333f931a031bf776bc6ef0e upstream.
    
    Recently we've been having mysterious hangs while running generic/475 on
    the CI system.  This turned out to be something like this:
    
      Task 1
      dmsetup suspend --nolockfs
      -> __dm_suspend
       -> dm_wait_for_completion
        -> dm_wait_for_bios_completion
         -> Unable to complete because of IO's on a plug in Task 2
    
      Task 2
      wb_workfn
      -> wb_writeback
       -> blk_start_plug
        -> writeback_sb_inodes
         -> Infinite loop unable to make an allocation
    
      Task 3
      cache_block_group
      ->read_extent_buffer_pages
       ->Waiting for IO to complete that can't be submitted because Task 1
         suspended the DM device
    
    The problem here is that we need Task 2 to be scheduled completely for
    the blk plug to flush.  Normally this would happen, we normally wait for
    the block group caching to finish (Task 3), and this schedule would
    result in the block plug flushing.
    
    However if there's enough free space available from the current caching
    to satisfy the allocation we won't actually wait for the caching to
    complete.  This check however just checks that we have enough space, not
    that we can make the allocation.  In this particular case we were trying
    to allocate 9MiB, and we had 10MiB of free space, but we didn't have
    9MiB of contiguous space to allocate, and thus the allocation failed and
    we looped.
    
    We specifically don't cycle through the FFE loop until we stop finding
    cached block groups because we don't want to allocate new block groups
    just because we're caching, so we short circuit the normal loop once we
    hit LOOP_CACHING_WAIT and we found a caching block group.
    
    This is normally fine, except in this particular case where the caching
    thread can't make progress because the DM device has been suspended.
    
    Fix this by not only waiting for free space to >= the amount of space we
    want to allocate, but also that we make some progress in caching from
    the time we start waiting.  This will keep us from busy looping when the
    caching is taking a while but still theoretically has enough space for
    us to allocate from, and fixes this particular case by forcing us to
    actually sleep and wait for forward progress, which will flush the plug.
    
    With this fix we're no longer hanging with generic/475.
    
    CC: stable@vger.kernel.org # 6.1+
    Reviewed-by: Boris Burkov <boris@bur.io>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8cd871d0a189a0fd8b8839231c73c313cd0d56e
Author: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
Date:   Tue Aug 1 21:09:51 2023 +0200

    gpio: sim: mark the GPIO chip as a one that can sleep
    
    commit 5a78d5db9c90c9dc84212f40a5f2687b7cafc8ec upstream.
    
    Simulated chips use a mutex for synchronization in driver callbacks so
    they must not be called from interrupt context. Set the can_sleep field
    of the GPIO chip to true to force users to only use threaded irqs.
    
    Fixes: cb8c474e79be ("gpio: sim: new testing module")
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 227bd2c1eab1d885665d68a803dacb2c47f32617
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Thu Aug 10 18:00:44 2023 -0400

    gpio: ws16c48: Fix off-by-one error in WS16C48 resource region extent
    
    commit 33f83d13ded164cd49ce2a3bd2770115abc64e6f upstream.
    
    The WinSystems WS16C48 I/O address region spans offsets 0x0 through 0xA,
    which is a total of 11 bytes. Fix the WS16C48_EXTENT define to the
    correct value of 11 so that access to necessary device registers is
    properly requested in the ws16c48_probe() callback by the
    devm_request_region() function call.
    
    Fixes: 2c05a0f29f41 ("gpio: ws16c48: Implement and utilize register structures")
    Cc: stable@vger.kernel.org
    Cc: Paul Demetrotion <pdemetrotion@winsystems.com>
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e17b8ee64c142c72a33885b51df13e44eb62c5d
Author: Nick Child <nnac123@linux.ibm.com>
Date:   Wed Aug 9 17:10:38 2023 -0500

    ibmvnic: Ensure login failure recovery is safe from other resets
    
    commit 6db541ae279bd4e76dbd939e5fbf298396166242 upstream.
    
    If a login request fails, the recovery process should be protected
    against parallel resets. It is a known issue that freeing and
    registering CRQ's in quick succession can result in a failover CRQ from
    the VIOS. Processing a failover during login recovery is dangerous for
    two reasons:
     1. This will result in two parallel initialization processes, this can
     cause serious issues during login.
     2. It is possible that the failover CRQ is received but never executed.
     We get notified of a pending failover through a transport event CRQ.
     The reset is not performed until a INIT CRQ request is received.
     Previously, if CRQ init fails during login recovery, then the ibmvnic
     irq is freed and the login process returned error. If failover_pending
     is true (a transport event was received), then the ibmvnic device
     would never be able to process the reset since it cannot receive the
     CRQ_INIT request due to the irq being freed. This leaved the device
     in a inoperable state.
    
    Therefore, the login failure recovery process must be hardened against
    these possible issues. Possible failovers (due to quick CRQ free and
    init) must be avoided and any issues during re-initialization should be
    dealt with instead of being propagated up the stack. This logic is
    similar to that of ibmvnic_probe().
    
    Fixes: dff515a3e71d ("ibmvnic: Harden device login requests")
    Signed-off-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230809221038.51296-5-nnac123@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 206ccf4f0977a76da38c2c88ba354d7eea9bbf81
Author: Nick Child <nnac123@linux.ibm.com>
Date:   Wed Aug 9 17:10:37 2023 -0500

    ibmvnic: Do partial reset on login failure
    
    commit 23cc5f667453ca7645a24c8d21bf84dbf61107b2 upstream.
    
    Perform a partial reset before sending a login request if any of the
    following are true:
     1. If a previous request times out. This can be dangerous because the
            VIOS could still receive the old login request at any point after
            the timeout. Therefore, it is best to re-register the CRQ's  and
            sub-CRQ's before retrying.
     2. If the previous request returns an error that is not described in
            PAPR. PAPR provides procedures if the login returns with partial
            success or aborted return codes (section L.5.1) but other values
            do not have a defined procedure. Previously, these conditions
            just returned error from the login function rather than trying
            to resolve the issue.
            This can cause further issues since most callers of the login
            function are not prepared to handle an error when logging in. This
            improper cleanup can lead to the device being permanently DOWN'd.
            For example, if the VIOS believes that the device is already logged
            in then it will return INVALID_STATE (-7). If we never re-register
            CRQ's then it will always think that the device is already logged
            in. This leaves the device inoperable.
    
    The partial reset involves freeing the sub-CRQs, freeing the CRQ then
    registering and initializing a new CRQ and sub-CRQs. This essentially
    restarts all communication with VIOS to allow for a fresh login attempt
    that will be unhindered by any previous failed attempts.
    
    Fixes: dff515a3e71d ("ibmvnic: Harden device login requests")
    Signed-off-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230809221038.51296-4-nnac123@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31ccd1ba20d8007e13f0b3175b7c394d900759f2
Author: Nick Child <nnac123@linux.ibm.com>
Date:   Wed Aug 9 17:10:36 2023 -0500

    ibmvnic: Handle DMA unmapping of login buffs in release functions
    
    commit d78a671eb8996af19d6311ecdee9790d2fa479f0 upstream.
    
    Rather than leaving the DMA unmapping of the login buffers to the
    login response handler, move this work into the login release functions.
    Previously, these functions were only used for freeing the allocated
    buffers. This could lead to issues if there are more than one
    outstanding login buffer requests, which is possible if a login request
    times out.
    
    If a login request times out, then there is another call to send login.
    The send login function makes a call to the login buffer release
    function. In the past, this freed the buffers but did not DMA unmap.
    Therefore, the VIOS could still write to the old login (now freed)
    buffer. It is for this reason that it is a good idea to leave the DMA
    unmap call to the login buffers release function.
    
    Since the login buffer release functions now handle DMA unmapping,
    remove the duplicate DMA unmapping in handle_login_rsp().
    
    Fixes: dff515a3e71d ("ibmvnic: Harden device login requests")
    Signed-off-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230809221038.51296-3-nnac123@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24556c1cc9dbbf4efc022f932d0860c2f75f4b80
Author: Nick Child <nnac123@linux.ibm.com>
Date:   Wed Aug 9 17:10:35 2023 -0500

    ibmvnic: Unmap DMA login rsp buffer on send login fail
    
    commit 411c565b4bc63e9584a8493882bd566e35a90588 upstream.
    
    If the LOGIN CRQ fails to send then we must DMA unmap the response
    buffer. Previously, if the CRQ failed then the memory was freed without
    DMA unmapping.
    
    Fixes: c98d9cc4170d ("ibmvnic: send_login should check for crq errors")
    Signed-off-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230809221038.51296-2-nnac123@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c5dd8805e6cc11c28de9c5716f205545bdc482a
Author: Nick Child <nnac123@linux.ibm.com>
Date:   Wed Aug 9 17:10:34 2023 -0500

    ibmvnic: Enforce stronger sanity checks on login response
    
    commit db17ba719bceb52f0ae4ebca0e4c17d9a3bebf05 upstream.
    
    Ensure that all offsets in a login response buffer are within the size
    of the allocated response buffer. Any offsets or lengths that surpass
    the allocation are likely the result of an incomplete response buffer.
    In these cases, a full reset is necessary.
    
    When attempting to login, the ibmvnic device will allocate a response
    buffer and pass a reference to the VIOS. The VIOS will then send the
    ibmvnic device a LOGIN_RSP CRQ to signal that the buffer has been filled
    with data. If the ibmvnic device does not get a response in 20 seconds,
    the old buffer is freed and a new login request is sent. With 2
    outstanding requests, any LOGIN_RSP CRQ's could be for the older
    login request. If this is the case then the login response buffer (which
    is for the newer login request) could be incomplete and contain invalid
    data. Therefore, we must enforce strict sanity checks on the response
    buffer values.
    
    Testing has shown that the `off_rxadd_buff_size` value is filled in last
    by the VIOS and will be the smoking gun for these circumstances.
    
    Until VIOS can implement a mechanism for tracking outstanding response
    buffers and a method for mapping a LOGIN_RSP CRQ to a particular login
    response buffer, the best ibmvnic can do in this situation is perform a
    full reset.
    
    Fixes: dff515a3e71d ("ibmvnic: Harden device login requests")
    Signed-off-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230809221038.51296-1-nnac123@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad0f73cbace470fb087a822fb3dc690980004414
Author: Moshe Shemesh <moshe@nvidia.com>
Date:   Sun Jul 23 11:03:01 2023 +0300

    net/mlx5: Reload auxiliary devices in pci error handlers
    
    commit aab8e1a200b926147db51e3f82fd07bb9edf6a98 upstream.
    
    Handling pci errors should fully teardown and load back auxiliary
    devices, same as done through mlx5 health recovery flow.
    
    Fixes: 72ed5d5624af ("net/mlx5: Suspend auxiliary devices only in case of PCI device suspend")
    Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88ec484ef8e2de7a7819b461ff0bec60fd40e813
Author: Moshe Shemesh <moshe@nvidia.com>
Date:   Wed Jul 19 11:33:44 2023 +0300

    net/mlx5: Skip clock update work when device is in error state
    
    commit d006207625657322ba8251b6e7e829f9659755dc upstream.
    
    When device is in error state, marked by the flag
    MLX5_DEVICE_STATE_INTERNAL_ERROR, the HW and PCI may not be accessible
    and so clock update work should be skipped. Furthermore, such access
    through PCI in error state, after calling mlx5_pci_disable_device() can
    result in failing to recover from pci errors.
    
    Fixes: ef9814deafd0 ("net/mlx5e: Add HW timestamping (TS) support")
    Reported-and-tested-by: Ganesh G R <ganeshgr@linux.ibm.com>
    Closes: https://lore.kernel.org/netdev/9bdb9b9d-140a-7a28-f0de-2e64e873c068@nvidia.com
    Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Aya Levin <ayal@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4276f3e7ae4a1cfbe01cc807deca680bb9853026
Author: Shay Drory <shayd@nvidia.com>
Date:   Sun Jul 30 09:26:27 2023 +0300

    net/mlx5: LAG, Check correct bucket when modifying LAG
    
    commit 86ed7b773c01ba71617538b3b107c33fd9cf90b8 upstream.
    
    Cited patch introduced buckets in hash mode, but missed to update
    the ports/bucket check when modifying LAG.
    Fix the check.
    
    Fixes: 352899f384d4 ("net/mlx5: Lag, use buckets in hash mode")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a824d012ad8f736459398e9c1d5bc0f034c72e5e
Author: Daniel Jurgens <danielj@nvidia.com>
Date:   Tue Jul 11 00:28:10 2023 +0300

    net/mlx5: Allow 0 for total host VFs
    
    commit 2dc2b3922d3c0f52d3a792d15dcacfbc4cc76b8f upstream.
    
    When querying eswitch functions 0 is a valid number of host VFs. After
    introducing ARM SRIOV falling through to getting the max value from PCI
    results in using the total VFs allowed on the ARM for the host.
    
    Fixes: 86eec50beaf3 ("net/mlx5: Support querying max VFs from device");
    Signed-off-by: Daniel Jurgens <danielj@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab06983c5bbdacbcc9c03c6d9ae8138620924188
Author: Zhang Jianhua <chris.zjh@huawei.com>
Date:   Sat Jul 22 15:32:44 2023 +0000

    dmaengine: owl-dma: Modify mismatched function name
    
    commit 74d7221c1f9c9f3a8c316a3557ca7dca8b99d14c upstream.
    
    No functional modification involved.
    
    drivers/dma/owl-dma.c:208: warning: expecting prototype for struct owl_dma_pchan. Prototype was for struct owl_dma_vchan instead HDRTEST usr/include/sound/asequencer.h
    
    Fixes: 47e20577c24d ("dmaengine: Add Actions Semi Owl family S900 DMA driver")
    Signed-off-by: Zhang Jianhua <chris.zjh@huawei.com>
    Reviewed-by: Randy Dunlap <rdunlap@infradead.org>
    Link: https://lore.kernel.org/r/20230722153244.2086949-1-chris.zjh@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dff220037148304571cf78968c1c80488cc2ec91
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Jul 12 18:26:45 2023 +0530

    dmaengine: mcf-edma: Fix a potential un-allocated memory access
    
    commit 0a46781c89dece85386885a407244ca26e5c1c44 upstream.
    
    When 'mcf_edma' is allocated, some space is allocated for a
    flexible array at the end of the struct. 'chans' item are allocated, that is
    to say 'pdata->dma_channels'.
    
    Then, this number of item is stored in 'mcf_edma->n_chans'.
    
    A few lines later, if 'mcf_edma->n_chans' is 0, then a default value of 64
    is set.
    
    This ends to no space allocated by devm_kzalloc() because chans was 0, but
    64 items are read and/or written in some not allocated memory.
    
    Change the logic to define a default value before allocating the memory.
    
    Fixes: e7a3ff92eaf1 ("dmaengine: fsl-edma: add ColdFire mcf5441x edma support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/f55d914407c900828f6fad3ea5fa791a5f17b9a4.1685172449.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4f7de3e8ce1799b12bdd1520e3ebd49d2e12f42
Author: Hao Chen <chenhao418@huawei.com>
Date:   Wed Aug 9 10:09:02 2023 +0800

    net: hns3: fix strscpy causing content truncation issue
    
    commit 5e3d20617b055e725e785e0058426368269949f3 upstream.
    
    hns3_dbg_fill_content()/hclge_dbg_fill_content() is aim to integrate some
    items to a string for content, and we add '\n' and '\0' in the last
    two bytes of content.
    
    strscpy() will add '\0' in the last byte of destination buffer(one of
    items), it result in finishing content print ahead of schedule and some
    dump content truncation.
    
    One Error log shows as below:
    cat mac_list/uc
    UC MAC_LIST:
    
    Expected:
    UC MAC_LIST:
    FUNC_ID  MAC_ADDR            STATE
    pf       00:2b:19:05:03:00   ACTIVE
    
    The destination buffer is length-bounded and not required to be
    NUL-terminated, so just change strscpy() to memcpy() to fix it.
    
    Fixes: 1cf3d5567f27 ("net: hns3: fix strncpy() not using dest-buf length as length issue")
    Signed-off-by: Hao Chen <chenhao418@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Link: https://lore.kernel.org/r/20230809020902.1941471-1-shaojijie@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87d7e140081fe97fbf329f7370b18799f1da7de3
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 10:52:33 2023 +0300

    nexthop: Fix infinite nexthop bucket dump when using maximum nexthop ID
    
    commit 8743aeff5bc4dcb5b87b43765f48d5ac3ad7dd9f upstream.
    
    A netlink dump callback can return a positive number to signal that more
    information needs to be dumped or zero to signal that the dump is
    complete. In the second case, the core netlink code will append the
    NLMSG_DONE message to the skb in order to indicate to user space that
    the dump is complete.
    
    The nexthop bucket dump callback always returns a positive number if
    nexthop buckets were filled in the provided skb, even if the dump is
    complete. This means that a dump will span at least two recvmsg() calls
    as long as nexthop buckets are present. In the last recvmsg() call the
    dump callback will not fill in any nexthop buckets because the previous
    call indicated that the dump should restart from the last dumped nexthop
    ID plus one.
    
     # ip link add name dummy1 up type dummy
     # ip nexthop add id 1 dev dummy1
     # ip nexthop add id 10 group 1 type resilient buckets 2
     # strace -e sendto,recvmsg -s 5 ip nexthop bucket
     sendto(3, [[{nlmsg_len=24, nlmsg_type=RTM_GETNEXTHOPBUCKET, nlmsg_flags=NLM_F_REQUEST|NLM_F_DUMP, nlmsg_seq=1691396980, nlmsg_pid=0}, {family=AF_UNSPEC, data="\x00\x00\x00\x00\x00"...}], {nlmsg_len=0, nlmsg_type=0 /* NLMSG_??? */, nlmsg_flags=0, nlmsg_seq=0, nlmsg_pid=0}], 152, 0, NULL, 0) = 152
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 128
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=64, nlmsg_type=RTM_NEWNEXTHOPBUCKET, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691396980, nlmsg_pid=347}, {family=AF_UNSPEC, data="\x00\x00\x00\x00\x00"...}], [{nlmsg_len=64, nlmsg_type=RTM_NEWNEXTHOPBUCKET, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691396980, nlmsg_pid=347}, {family=AF_UNSPEC, data="\x00\x00\x00\x00\x00"...}]], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 128
     id 10 index 0 idle_time 6.66 nhid 1
     id 10 index 1 idle_time 6.66 nhid 1
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 20
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[{nlmsg_len=20, nlmsg_type=NLMSG_DONE, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691396980, nlmsg_pid=347}, 0], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 20
     +++ exited with 0 +++
    
    This behavior is both inefficient and buggy. If the last nexthop to be
    dumped had the maximum ID of 0xffffffff, then the dump will restart from
    0 (0xffffffff + 1) and never end:
    
     # ip link add name dummy1 up type dummy
     # ip nexthop add id 1 dev dummy1
     # ip nexthop add id $((2**32-1)) group 1 type resilient buckets 2
     # ip nexthop bucket
     id 4294967295 index 0 idle_time 5.55 nhid 1
     id 4294967295 index 1 idle_time 5.55 nhid 1
     id 4294967295 index 0 idle_time 5.55 nhid 1
     id 4294967295 index 1 idle_time 5.55 nhid 1
     [...]
    
    Fix by adjusting the dump callback to return zero when the dump is
    complete. After the fix only one recvmsg() call is made and the
    NLMSG_DONE message is appended to the RTM_NEWNEXTHOPBUCKET responses:
    
     # ip link add name dummy1 up type dummy
     # ip nexthop add id 1 dev dummy1
     # ip nexthop add id $((2**32-1)) group 1 type resilient buckets 2
     # strace -e sendto,recvmsg -s 5 ip nexthop bucket
     sendto(3, [[{nlmsg_len=24, nlmsg_type=RTM_GETNEXTHOPBUCKET, nlmsg_flags=NLM_F_REQUEST|NLM_F_DUMP, nlmsg_seq=1691396737, nlmsg_pid=0}, {family=AF_UNSPEC, data="\x00\x00\x00\x00\x00"...}], {nlmsg_len=0, nlmsg_type=0 /* NLMSG_??? */, nlmsg_flags=0, nlmsg_seq=0, nlmsg_pid=0}], 152, 0, NULL, 0) = 152
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 148
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=64, nlmsg_type=RTM_NEWNEXTHOPBUCKET, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691396737, nlmsg_pid=350}, {family=AF_UNSPEC, data="\x00\x00\x00\x00\x00"...}], [{nlmsg_len=64, nlmsg_type=RTM_NEWNEXTHOPBUCKET, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691396737, nlmsg_pid=350}, {family=AF_UNSPEC, data="\x00\x00\x00\x00\x00"...}], [{nlmsg_len=20, nlmsg_type=NLMSG_DONE, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691396737, nlmsg_pid=350}, 0]], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 148
     id 4294967295 index 0 idle_time 6.61 nhid 1
     id 4294967295 index 1 idle_time 6.61 nhid 1
     +++ exited with 0 +++
    
    Note that if the NLMSG_DONE message cannot be appended because of size
    limitations, then another recvmsg() will be needed, but the core netlink
    code will not invoke the dump callback and simply reply with a
    NLMSG_DONE message since it knows that the callback previously returned
    zero.
    
    Add a test that fails before the fix:
    
     # ./fib_nexthops.sh -t basic_res
     [...]
     TEST: Maximum nexthop ID dump                                       [FAIL]
     [...]
    
    And passes after it:
    
     # ./fib_nexthops.sh -t basic_res
     [...]
     TEST: Maximum nexthop ID dump                                       [ OK ]
     [...]
    
    Fixes: 8a1bbabb034d ("nexthop: Add netlink handlers for bucket dump")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230808075233.3337922-4-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d6df2c523e22a280ca6cef47a5daf344b69a60e
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 10:52:32 2023 +0300

    nexthop: Make nexthop bucket dump more efficient
    
    commit f10d3d9df49d9e6ee244fda6ca264f901a9c5d85 upstream.
    
    rtm_dump_nexthop_bucket_nh() is used to dump nexthop buckets belonging
    to a specific resilient nexthop group. The function returns a positive
    return code (the skb length) upon both success and failure.
    
    The above behavior is problematic. When a complete nexthop bucket dump
    is requested, the function that walks the different nexthops treats the
    non-zero return code as an error. This causes buckets belonging to
    different resilient nexthop groups to be dumped using different buffers
    even if they can all fit in the same buffer:
    
     # ip link add name dummy1 up type dummy
     # ip nexthop add id 1 dev dummy1
     # ip nexthop add id 10 group 1 type resilient buckets 1
     # ip nexthop add id 20 group 1 type resilient buckets 1
     # strace -e recvmsg -s 0 ip nexthop bucket
     [...]
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[...], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 64
     id 10 index 0 idle_time 10.27 nhid 1
     [...]
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[...], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 64
     id 20 index 0 idle_time 6.44 nhid 1
     [...]
    
    Fix by only returning a non-zero return code when an error occurred and
    restarting the dump from the bucket index we failed to fill in. This
    allows buckets belonging to different resilient nexthop groups to be
    dumped using the same buffer:
    
     # ip link add name dummy1 up type dummy
     # ip nexthop add id 1 dev dummy1
     # ip nexthop add id 10 group 1 type resilient buckets 1
     # ip nexthop add id 20 group 1 type resilient buckets 1
     # strace -e recvmsg -s 0 ip nexthop bucket
     [...]
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[...], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 128
     id 10 index 0 idle_time 30.21 nhid 1
     id 20 index 0 idle_time 26.7 nhid 1
     [...]
    
    While this change is more of a performance improvement change than an
    actual bug fix, it is a prerequisite for a subsequent patch that does
    fix a bug.
    
    Fixes: 8a1bbabb034d ("nexthop: Add netlink handlers for bucket dump")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230808075233.3337922-3-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b10d8d1cf85088b42ba5ee2e7bbb6f5a7db0b4f
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 10:52:31 2023 +0300

    nexthop: Fix infinite nexthop dump when using maximum nexthop ID
    
    commit 913f60cacda73ccac8eead94983e5884c03e04cd upstream.
    
    A netlink dump callback can return a positive number to signal that more
    information needs to be dumped or zero to signal that the dump is
    complete. In the second case, the core netlink code will append the
    NLMSG_DONE message to the skb in order to indicate to user space that
    the dump is complete.
    
    The nexthop dump callback always returns a positive number if nexthops
    were filled in the provided skb, even if the dump is complete. This
    means that a dump will span at least two recvmsg() calls as long as
    nexthops are present. In the last recvmsg() call the dump callback will
    not fill in any nexthops because the previous call indicated that the
    dump should restart from the last dumped nexthop ID plus one.
    
     # ip nexthop add id 1 blackhole
     # strace -e sendto,recvmsg -s 5 ip nexthop
     sendto(3, [[{nlmsg_len=24, nlmsg_type=RTM_GETNEXTHOP, nlmsg_flags=NLM_F_REQUEST|NLM_F_DUMP, nlmsg_seq=1691394315, nlmsg_pid=0}, {nh_family=AF_UNSPEC, nh_scope=RT_SCOPE_UNIVERSE, nh_protocol=RTPROT_UNSPEC, nh_flags=0}], {nlmsg_len=0, nlmsg_type=0 /* NLMSG_??? */, nlmsg_flags=0, nlmsg_seq=0, nlmsg_pid=0}], 152, 0, NULL, 0) = 152
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 36
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[{nlmsg_len=36, nlmsg_type=RTM_NEWNEXTHOP, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691394315, nlmsg_pid=343}, {nh_family=AF_INET, nh_scope=RT_SCOPE_UNIVERSE, nh_protocol=RTPROT_UNSPEC, nh_flags=0}, [[{nla_len=8, nla_type=NHA_ID}, 1], {nla_len=4, nla_type=NHA_BLACKHOLE}]], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 36
     id 1 blackhole
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 20
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[{nlmsg_len=20, nlmsg_type=NLMSG_DONE, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691394315, nlmsg_pid=343}, 0], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 20
     +++ exited with 0 +++
    
    This behavior is both inefficient and buggy. If the last nexthop to be
    dumped had the maximum ID of 0xffffffff, then the dump will restart from
    0 (0xffffffff + 1) and never end:
    
     # ip nexthop add id $((2**32-1)) blackhole
     # ip nexthop
     id 4294967295 blackhole
     id 4294967295 blackhole
     [...]
    
    Fix by adjusting the dump callback to return zero when the dump is
    complete. After the fix only one recvmsg() call is made and the
    NLMSG_DONE message is appended to the RTM_NEWNEXTHOP response:
    
     # ip nexthop add id $((2**32-1)) blackhole
     # strace -e sendto,recvmsg -s 5 ip nexthop
     sendto(3, [[{nlmsg_len=24, nlmsg_type=RTM_GETNEXTHOP, nlmsg_flags=NLM_F_REQUEST|NLM_F_DUMP, nlmsg_seq=1691394080, nlmsg_pid=0}, {nh_family=AF_UNSPEC, nh_scope=RT_SCOPE_UNIVERSE, nh_protocol=RTPROT_UNSPEC, nh_flags=0}], {nlmsg_len=0, nlmsg_type=0 /* NLMSG_??? */, nlmsg_flags=0, nlmsg_seq=0, nlmsg_pid=0}], 152, 0, NULL, 0) = 152
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 56
     recvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=36, nlmsg_type=RTM_NEWNEXTHOP, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691394080, nlmsg_pid=342}, {nh_family=AF_INET, nh_scope=RT_SCOPE_UNIVERSE, nh_protocol=RTPROT_UNSPEC, nh_flags=0}, [[{nla_len=8, nla_type=NHA_ID}, 4294967295], {nla_len=4, nla_type=NHA_BLACKHOLE}]], [{nlmsg_len=20, nlmsg_type=NLMSG_DONE, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1691394080, nlmsg_pid=342}, 0]], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 56
     id 4294967295 blackhole
     +++ exited with 0 +++
    
    Note that if the NLMSG_DONE message cannot be appended because of size
    limitations, then another recvmsg() will be needed, but the core netlink
    code will not invoke the dump callback and simply reply with a
    NLMSG_DONE message since it knows that the callback previously returned
    zero.
    
    Add a test that fails before the fix:
    
     # ./fib_nexthops.sh -t basic
     [...]
     TEST: Maximum nexthop ID dump                                       [FAIL]
     [...]
    
    And passes after it:
    
     # ./fib_nexthops.sh -t basic
     [...]
     TEST: Maximum nexthop ID dump                                       [ OK ]
     [...]
    
    Fixes: ab84be7e54fc ("net: Initial nexthop code")
    Reported-by: Petr Machata <petrm@nvidia.com>
    Closes: https://lore.kernel.org/netdev/87sf91enuf.fsf@nvidia.com/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230808075233.3337922-2-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 743f7c1762e098048ede8cdf8c89a118f8d12391
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Mon Aug 7 19:34:52 2023 +0800

    net: hns3: fix deadlock issue when externel_lb and reset are executed together
    
    commit ac6257a3ae5db5193b1f19c268e4f72d274ddb88 upstream.
    
    When externel_lb and reset are executed together, a deadlock may
    occur:
    [ 3147.217009] INFO: task kworker/u321:0:7 blocked for more than 120 seconds.
    [ 3147.230483] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [ 3147.238999] task:kworker/u321:0  state:D stack:    0 pid:    7 ppid:     2 flags:0x00000008
    [ 3147.248045] Workqueue: hclge hclge_service_task [hclge]
    [ 3147.253957] Call trace:
    [ 3147.257093]  __switch_to+0x7c/0xbc
    [ 3147.261183]  __schedule+0x338/0x6f0
    [ 3147.265357]  schedule+0x50/0xe0
    [ 3147.269185]  schedule_preempt_disabled+0x18/0x24
    [ 3147.274488]  __mutex_lock.constprop.0+0x1d4/0x5dc
    [ 3147.279880]  __mutex_lock_slowpath+0x1c/0x30
    [ 3147.284839]  mutex_lock+0x50/0x60
    [ 3147.288841]  rtnl_lock+0x20/0x2c
    [ 3147.292759]  hclge_reset_prepare+0x68/0x90 [hclge]
    [ 3147.298239]  hclge_reset_subtask+0x88/0xe0 [hclge]
    [ 3147.303718]  hclge_reset_service_task+0x84/0x120 [hclge]
    [ 3147.309718]  hclge_service_task+0x2c/0x70 [hclge]
    [ 3147.315109]  process_one_work+0x1d0/0x490
    [ 3147.319805]  worker_thread+0x158/0x3d0
    [ 3147.324240]  kthread+0x108/0x13c
    [ 3147.328154]  ret_from_fork+0x10/0x18
    
    In externel_lb process, the hns3 driver call napi_disable()
    first, then the reset happen, then the restore process of the
    externel_lb will fail, and will not call napi_enable(). When
    doing externel_lb again, napi_disable() will be double call,
    cause a deadlock of rtnl_lock().
    
    This patch use the HNS3_NIC_STATE_DOWN state to protect the
    calling of napi_disable() and napi_enable() in externel_lb
    process, just as the usage in ndo_stop() and ndo_start().
    
    Fixes: 04b6ba143521 ("net: hns3: add support for external loopback test")
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20230807113452.474224-5-shaojijie@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59bad9190ac7adbeafa8b90eaa99eba0aa8ebc54
Author: Jie Wang <wangjie125@huawei.com>
Date:   Mon Aug 7 19:34:51 2023 +0800

    net: hns3: add wait until mac link down
    
    commit 6265e242f7b95f2c1195b42ec912b84ad161470e upstream.
    
    In some configure flow of hns3 driver, for example, change mtu, it will
    disable MAC through firmware before configuration. But firmware disables
    MAC asynchronously. The rx traffic may be not stopped in this case.
    
    So fixes it by waiting until mac link is down.
    
    Fixes: a9775bb64aa7 ("net: hns3: fix set and get link ksettings issue")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20230807113452.474224-4-shaojijie@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 667ce6a0ff80dddbd56e85d1f6eee7dab6836096
Author: Jie Wang <wangjie125@huawei.com>
Date:   Mon Aug 7 19:34:50 2023 +0800

    net: hns3: refactor hclge_mac_link_status_wait for interface reuse
    
    commit 08469dacfad25428b66549716811807203744f4f upstream.
    
    Some nic configurations could only be performed after link is down. So this
    patch refactor this API for reuse.
    
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20230807113452.474224-3-shaojijie@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 758dbcfb257e1aee0a310bae789c2af6ffe35d0f
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Thu Aug 3 16:42:53 2023 +0300

    net: dsa: ocelot: call dsa_tag_8021q_unregister() under rtnl_lock() on driver remove
    
    commit a94c16a2fda010866b8858a386a8bfbeba4f72c5 upstream.
    
    When the tagging protocol in current use is "ocelot-8021q" and we unbind
    the driver, we see this splat:
    
    $ echo '0000:00:00.2' > /sys/bus/pci/drivers/fsl_enetc/unbind
    mscc_felix 0000:00:00.5 swp0: left promiscuous mode
    sja1105 spi2.0: Link is Down
    DSA: tree 1 torn down
    mscc_felix 0000:00:00.5 swp2: left promiscuous mode
    sja1105 spi2.2: Link is Down
    DSA: tree 3 torn down
    fsl_enetc 0000:00:00.2 eno2: left promiscuous mode
    mscc_felix 0000:00:00.5: Link is Down
    ------------[ cut here ]------------
    RTNL: assertion failed at net/dsa/tag_8021q.c (409)
    WARNING: CPU: 1 PID: 329 at net/dsa/tag_8021q.c:409 dsa_tag_8021q_unregister+0x12c/0x1a0
    Modules linked in:
    CPU: 1 PID: 329 Comm: bash Not tainted 6.5.0-rc3+ #771
    pc : dsa_tag_8021q_unregister+0x12c/0x1a0
    lr : dsa_tag_8021q_unregister+0x12c/0x1a0
    Call trace:
     dsa_tag_8021q_unregister+0x12c/0x1a0
     felix_tag_8021q_teardown+0x130/0x150
     felix_teardown+0x3c/0xd8
     dsa_tree_teardown_switches+0xbc/0xe0
     dsa_unregister_switch+0x168/0x260
     felix_pci_remove+0x30/0x60
     pci_device_remove+0x4c/0x100
     device_release_driver_internal+0x188/0x288
     device_links_unbind_consumers+0xfc/0x138
     device_release_driver_internal+0xe0/0x288
     device_driver_detach+0x24/0x38
     unbind_store+0xd8/0x108
     drv_attr_store+0x30/0x50
    ---[ end trace 0000000000000000 ]---
    ------------[ cut here ]------------
    RTNL: assertion failed at net/8021q/vlan_core.c (376)
    WARNING: CPU: 1 PID: 329 at net/8021q/vlan_core.c:376 vlan_vid_del+0x1b8/0x1f0
    CPU: 1 PID: 329 Comm: bash Tainted: G        W          6.5.0-rc3+ #771
    pc : vlan_vid_del+0x1b8/0x1f0
    lr : vlan_vid_del+0x1b8/0x1f0
     dsa_tag_8021q_unregister+0x8c/0x1a0
     felix_tag_8021q_teardown+0x130/0x150
     felix_teardown+0x3c/0xd8
     dsa_tree_teardown_switches+0xbc/0xe0
     dsa_unregister_switch+0x168/0x260
     felix_pci_remove+0x30/0x60
     pci_device_remove+0x4c/0x100
     device_release_driver_internal+0x188/0x288
     device_links_unbind_consumers+0xfc/0x138
     device_release_driver_internal+0xe0/0x288
     device_driver_detach+0x24/0x38
     unbind_store+0xd8/0x108
     drv_attr_store+0x30/0x50
    DSA: tree 0 torn down
    
    This was somewhat not so easy to spot, because "ocelot-8021q" is not the
    default tagging protocol, and thus, not everyone who tests the unbinding
    path may have switched to it beforehand. The default
    felix_tag_npi_teardown() does not require rtnl_lock() to be held.
    
    Fixes: 7c83a7c539ab ("net: dsa: add a second tagger for Ocelot switches based on tag_8021q")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20230803134253.2711124-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 001b7d6706e20197b5a53c22bb293812943b696c
Author: Li Yang <leoyang.li@nxp.com>
Date:   Wed Aug 2 14:13:47 2023 -0500

    net: phy: at803x: remove set/get wol callbacks for AR8032
    
    commit d7791cec2304aea22eb2ada944e4d467302f5bfe upstream.
    
    Since the AR8032 part does not support wol, remove related callbacks
    from it.
    
    Fixes: 5800091a2061 ("net: phy: at803x: add support for AR8032 PHY")
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    Cc: David Bauer <mail@david-bauer.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3e5f3b7f25d7b90f3b76d98a946fec6e5f79216
Author: Jonas Gorski <jonas.gorski@bisdn.de>
Date:   Fri Aug 4 12:12:20 2023 +0200

    net: marvell: prestera: fix handling IPv4 routes with nhid
    
    commit 2aa71b4b294ee2c3041d085404cea914be9b3225 upstream.
    
    Fix handling IPv4 routes referencing a nexthop via its id by replacing
    calls to fib_info_nh() with fib_info_nhc().
    
    Trying to add an IPv4 route referencing a nextop via nhid:
    
        $ ip link set up swp5
        $ ip a a 10.0.0.1/24 dev swp5
        $ ip nexthop add dev swp5 id 20 via 10.0.0.2
        $ ip route add 10.0.1.0/24 nhid 20
    
    triggers warnings when trying to handle the route:
    
    [  528.805763] ------------[ cut here ]------------
    [  528.810437] WARNING: CPU: 3 PID: 53 at include/net/nexthop.h:468 __prestera_fi_is_direct+0x2c/0x68 [prestera]
    [  528.820434] Modules linked in: prestera_pci act_gact act_police sch_ingress cls_u32 cls_flower prestera arm64_delta_tn48m_dn_led(O) arm64_delta_tn48m_dn_cpld(O) [last unloaded: prestera_pci]
    [  528.837485] CPU: 3 PID: 53 Comm: kworker/u8:3 Tainted: G           O       6.4.5 #1
    [  528.845178] Hardware name: delta,tn48m-dn (DT)
    [  528.849641] Workqueue: prestera_ordered __prestera_router_fib_event_work [prestera]
    [  528.857352] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    [  528.864347] pc : __prestera_fi_is_direct+0x2c/0x68 [prestera]
    [  528.870135] lr : prestera_k_arb_fib_evt+0xb20/0xd50 [prestera]
    [  528.876007] sp : ffff80000b20bc90
    [  528.879336] x29: ffff80000b20bc90 x28: 0000000000000000 x27: ffff0001374d3a48
    [  528.886510] x26: ffff000105604000 x25: ffff000134af8a28 x24: ffff0001374d3800
    [  528.893683] x23: ffff000101c89148 x22: ffff000101c89000 x21: ffff000101c89200
    [  528.900855] x20: ffff00013641fda0 x19: ffff800009d01088 x18: 0000000000000059
    [  528.908027] x17: 0000000000000277 x16: 0000000000000000 x15: 0000000000000000
    [  528.915198] x14: 0000000000000003 x13: 00000000000fe400 x12: 0000000000000000
    [  528.922371] x11: 0000000000000002 x10: 0000000000000aa0 x9 : ffff8000013d2020
    [  528.929543] x8 : 0000000000000018 x7 : 000000007b1703f8 x6 : 000000001ca72f86
    [  528.936715] x5 : 0000000033399ea7 x4 : 0000000000000000 x3 : ffff0001374d3acc
    [  528.943886] x2 : 0000000000000000 x1 : ffff00010200de00 x0 : ffff000134ae3f80
    [  528.951058] Call trace:
    [  528.953516]  __prestera_fi_is_direct+0x2c/0x68 [prestera]
    [  528.958952]  __prestera_router_fib_event_work+0x100/0x158 [prestera]
    [  528.965348]  process_one_work+0x208/0x488
    [  528.969387]  worker_thread+0x4c/0x430
    [  528.973068]  kthread+0x120/0x138
    [  528.976313]  ret_from_fork+0x10/0x20
    [  528.979909] ---[ end trace 0000000000000000 ]---
    [  528.984998] ------------[ cut here ]------------
    [  528.989645] WARNING: CPU: 3 PID: 53 at include/net/nexthop.h:468 __prestera_fi_is_direct+0x2c/0x68 [prestera]
    [  528.999628] Modules linked in: prestera_pci act_gact act_police sch_ingress cls_u32 cls_flower prestera arm64_delta_tn48m_dn_led(O) arm64_delta_tn48m_dn_cpld(O) [last unloaded: prestera_pci]
    [  529.016676] CPU: 3 PID: 53 Comm: kworker/u8:3 Tainted: G        W  O       6.4.5 #1
    [  529.024368] Hardware name: delta,tn48m-dn (DT)
    [  529.028830] Workqueue: prestera_ordered __prestera_router_fib_event_work [prestera]
    [  529.036539] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    [  529.043533] pc : __prestera_fi_is_direct+0x2c/0x68 [prestera]
    [  529.049318] lr : __prestera_k_arb_fc_apply+0x280/0x2f8 [prestera]
    [  529.055452] sp : ffff80000b20bc60
    [  529.058781] x29: ffff80000b20bc60 x28: 0000000000000000 x27: ffff0001374d3a48
    [  529.065953] x26: ffff000105604000 x25: ffff000134af8a28 x24: ffff0001374d3800
    [  529.073126] x23: ffff000101c89148 x22: ffff000101c89148 x21: ffff00013641fda0
    [  529.080299] x20: ffff000101c89000 x19: ffff000101c89020 x18: 0000000000000059
    [  529.087471] x17: 0000000000000277 x16: 0000000000000000 x15: 0000000000000000
    [  529.094642] x14: 0000000000000003 x13: 00000000000fe400 x12: 0000000000000000
    [  529.101814] x11: 0000000000000002 x10: 0000000000000aa0 x9 : ffff8000013cee80
    [  529.108985] x8 : 0000000000000018 x7 : 000000007b1703f8 x6 : 0000000000000018
    [  529.116157] x5 : 00000000d3497eb6 x4 : ffff000105604081 x3 : 000000008e979557
    [  529.123329] x2 : 0000000000000000 x1 : ffff00010200de00 x0 : ffff000134ae3f80
    [  529.130501] Call trace:
    [  529.132958]  __prestera_fi_is_direct+0x2c/0x68 [prestera]
    [  529.138394]  prestera_k_arb_fib_evt+0x6b8/0xd50 [prestera]
    [  529.143918]  __prestera_router_fib_event_work+0x100/0x158 [prestera]
    [  529.150313]  process_one_work+0x208/0x488
    [  529.154348]  worker_thread+0x4c/0x430
    [  529.158030]  kthread+0x120/0x138
    [  529.161274]  ret_from_fork+0x10/0x20
    [  529.164867] ---[ end trace 0000000000000000 ]---
    
    and results in a non offloaded route:
    
        $ ip route
        10.0.0.0/24 dev swp5 proto kernel scope link src 10.0.0.1 rt_trap
        10.0.1.0/24 nhid 20 via 10.0.0.2 dev swp5 rt_trap
    
    When creating a route referencing a nexthop via its ID, the nexthop will
    be stored in a separate nh pointer instead of the array of nexthops in
    the fib_info struct. This causes issues since fib_info_nh() only handles
    the nexthops array, but not the separate nh pointer, and will loudly
    WARN about it.
    
    In contrast fib_info_nhc() handles both, but returns a fib_nh_common
    pointer instead of a fib_nh pointer. Luckily we only ever access fields
    from the fib_nh_common parts, so we can just replace all instances of
    fib_info_nh() with fib_info_nhc() and access the fields via their
    fib_nh_common names.
    
    This allows handling IPv4 routes with an external nexthop, and they now
    get offloaded as expected:
    
        $ ip route
        10.0.0.0/24 dev swp5 proto kernel scope link src 10.0.0.1 rt_trap
        10.0.1.0/24 nhid 20 via 10.0.0.2 dev swp5 offload rt_offload
    
    Fixes: 396b80cb5cc8 ("net: marvell: prestera: Add neighbour cache accounting")
    Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
    Acked-by: Elad Nachman <enachman@marvell.com>
    Link: https://lore.kernel.org/r/20230804101220.247515-1-jonas.gorski@bisdn.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 059ec8287fd341700c8a93bc029722a6065b4f2f
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Aug 4 15:59:51 2023 -0700

    net: tls: avoid discarding data on record close
    
    commit 6b47808f223c70ff564f9b363446d2a5fa1e05b2 upstream.
    
    TLS records end with a 16B tag. For TLS device offload we only
    need to make space for this tag in the stream, the device will
    generate and replace it with the actual calculated tag.
    
    Long time ago the code would just re-reference the head frag
    which mostly worked but was suboptimal because it prevented TCP
    from combining the record into a single skb frag. I'm not sure
    if it was correct as the first frag may be shorter than the tag.
    
    The commit under fixes tried to replace that with using the page
    frag and if the allocation failed rolling back the data, if record
    was long enough. It achieves better fragment coalescing but is
    also buggy.
    
    We don't roll back the iterator, so unless we're at the end of
    send we'll skip the data we designated as tag and start the
    next record as if the rollback never happened.
    There's also the possibility that the record was constructed
    with MSG_MORE and the data came from a different syscall and
    we already told the user space that we "got it".
    
    Allocate a single dummy page and use it as fallback.
    
    Found by code inspection, and proven by forcing allocation
    failures.
    
    Fixes: e7b159a48ba6 ("net/tls: remove the record tail optimization")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05e6b93da45db981e5586f90c04518880460055b
Author: Michael Guralnik <michaelgur@nvidia.com>
Date:   Wed Jul 19 12:02:41 2023 +0300

    RDMA/umem: Set iova in ODP flow
    
    commit 186b169cf1e4be85aa212a893ea783a543400979 upstream.
    
    Fixing the ODP registration flow to set the iova correctly.
    The calculation in ib_umem_num_dma_blocks() function assumes the iova of
    the umem is set correctly.
    
    When iova is not set, the calculation in ib_umem_num_dma_blocks() is
    equivalent to length/page_size, which is true only when memory is aligned.
    For unaligned memory, iova must be set for the ALIGN() in the
    ib_umem_num_dma_blocks() to take effect and return a correct value.
    
    mlx5_ib uses ib_umem_num_dma_blocks() to decide the mkey size to use for
    the MR. Without this fix, when registering unaligned ODP MR, a wrong
    size mkey might be chosen and this might cause the UMR to fail.
    
    UMR would fail over insufficient size to update the mkey translation:
    infiniband mlx5_0: dump_cqe:273:(pid 0): dump error cqe
    00000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00000030: 00 00 00 00 0f 00 78 06 25 00 00 58 00 da ac d2
    infiniband mlx5_0: mlx5_ib_post_send_wait:806:(pid 20311): reg umr
    failed (6)
    infiniband mlx5_0: pagefault_real_mr:661:(pid 20311): Failed to update
    mkey page tables
    
    Fixes: f0093fb1a7cb ("RDMA/mlx5: Move mlx5_ib_cont_pages() to the creation of the mlx5_ib_mr")
    Fixes: a665aca89a41 ("RDMA/umem: Split ib_umem_num_pages() into ib_umem_num_dma_blocks()")
    Signed-off-by: Artemy Kovalyov <artemyko@nvidia.com>
    Signed-off-by: Michael Guralnik <michaelgur@nvidia.com>
    Link: https://lore.kernel.org/r/3d4be7ca2155bf239dd8c00a2d25974a92c26ab8.1689757344.git.leon@kernel.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 521860ddf31414a58f2dcd41f04b790603db8c8b
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Jun 22 18:59:19 2023 +0200

    wifi: cfg80211: fix sband iftype data lookup for AP_VLAN
    
    commit 5fb9a9fb71a33be61d7d8e8ba4597bfb18d604d0 upstream.
    
    AP_VLAN interfaces are virtual, so doesn't really exist as a type for
    capabilities. When passed in as a type, AP is the one that's really intended.
    
    Fixes: c4cbaf7973a7 ("cfg80211: Add support for HE")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20230622165919.46841-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94916b314861288ebf7ef883ef23df00ac2b94a0
Author: Daniel Stone <daniels@collabora.com>
Date:   Tue Aug 8 11:44:05 2023 +0100

    drm/rockchip: Don't spam logs in atomic check
    
    commit 43dae319b50fac075ad864f84501c703ef20eb2b upstream.
    
    Userspace should not be able to trigger DRM_ERROR messages to spam the
    logs; especially not through atomic commit parameters which are
    completely legitimate for userspace to attempt.
    
    Signed-off-by: Daniel Stone <daniels@collabora.com>
    Fixes: 7707f7227f09 ("drm/rockchip: Add support for afbc")
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230808104405.522493-1-daniels@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac6640f4193d0f5b44269a7f08372909f9a18e5c
Author: Douglas Miller <doug.miller@cornelisnetworks.com>
Date:   Wed Aug 2 13:32:41 2023 -0400

    IB/hfi1: Fix possible panic during hotplug remove
    
    commit 4fdfaef71fced490835145631a795497646f4555 upstream.
    
    During hotplug remove it is possible that the update counters work
    might be pending, and may run after memory has been freed.
    Cancel the update counters work before freeing memory.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Signed-off-by: Douglas Miller <doug.miller@cornelisnetworks.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Link: https://lore.kernel.org/r/169099756100.3927190.15284930454106475280.stgit@awfm-02.cornelisnetworks.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2efcaf304fbbcbccfae13907e7dc8e11727b8c3
Author: Piotr Gardocki <piotrx.gardocki@intel.com>
Date:   Mon Aug 7 13:50:11 2023 -0700

    iavf: fix potential races for FDIR filters
    
    commit 0fb1d8eb234b6979d4981d2d385780dd7d8d9771 upstream.
    
    Add fdir_fltr_lock locking in unprotected places.
    
    The change in iavf_fdir_is_dup_fltr adds a spinlock around a loop which
    iterates over all filters and looks for a duplicate. The filter can be
    removed from list and freed from memory at the same time it's being
    compared. All other places where filters are deleted are already
    protected with spinlock.
    
    The remaining changes protect adapter->fdir_active_fltr variable so now
    all its uses are under a spinlock.
    
    Fixes: 527691bf0682 ("iavf: Support IPv4 Flow Director filters")
    Signed-off-by: Piotr Gardocki <piotrx.gardocki@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230807205011.3129224-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcbc48b12092b07c9e1c7fcc03a0ceebbfa77bb5
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Fri Aug 4 18:53:36 2023 +0300

    drivers: vxlan: vnifilter: free percpu vni stats on error path
    
    commit b1c936e9af5dd08636d568736fc6075ed9d1d529 upstream.
    
    In case rhashtable_lookup_insert_fast() fails inside vxlan_vni_add(), the
    allocated percpu vni stats are not freed on the error path.
    
    Introduce vxlan_vni_free() which would work as a nice wrapper to free
    vxlan_vni_node resources properly.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: 4095e0e1328a ("drivers: vxlan: vnifilter: per vni stats")
    Suggested-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eeb0e4c1dbdf21896a6d86b7b398e4f88bbdc6e7
Author: Andrew Kanner <andrew.kanner@gmail.com>
Date:   Thu Aug 3 20:59:48 2023 +0200

    drivers: net: prevent tun_build_skb() to exceed the packet size limit
    
    commit 59eeb232940515590de513b997539ef495faca9a upstream.
    
    Using the syzkaller repro with reduced packet size it was discovered
    that XDP_PACKET_HEADROOM is not checked in tun_can_build_skb(),
    although pad may be incremented in tun_build_skb(). This may end up
    with exceeding the PAGE_SIZE limit in tun_build_skb().
    
    Jason Wang <jasowang@redhat.com> proposed to count XDP_PACKET_HEADROOM
    always (e.g. without rcu_access_pointer(tun->xdp_prog)) in
    tun_can_build_skb() since there's a window during which XDP program
    might be attached between tun_can_build_skb() and tun_build_skb().
    
    Fixes: 7df13219d757 ("tun: reserve extra headroom only when XDP is set")
    Link: https://syzkaller.appspot.com/bug?extid=f817490f5bd20541b90a
    Signed-off-by: Andrew Kanner <andrew.kanner@gmail.com>
    Link: https://lore.kernel.org/r/20230803185947.2379988-1-andrew.kanner@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6ddc1c774874dc704f96a99d015dc759627bba7
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Aug 3 16:30:21 2023 +0000

    dccp: fix data-race around dp->dccps_mss_cache
    
    commit a47e598fbd8617967e49d85c49c22f9fc642704c upstream.
    
    dccp_sendmsg() reads dp->dccps_mss_cache before locking the socket.
    Same thing in do_dccp_getsockopt().
    
    Add READ_ONCE()/WRITE_ONCE() annotations,
    and change dccp_sendmsg() to check again dccps_mss_cache
    after socket is locked.
    
    Fixes: 7c657876b63c ("[DCCP]: Initial implementation")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230803163021.2958262-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00f033d451c4844777aea9164a6b2691f904dd92
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Wed Aug 2 19:43:20 2023 +0800

    bonding: Fix incorrect deletion of ETH_P_8021AD protocol vid from slaves
    
    commit 01f4fd27087078c90a0e22860d1dfa2cd0510791 upstream.
    
    BUG_ON(!vlan_info) is triggered in unregister_vlan_dev() with
    following testcase:
    
      # ip netns add ns1
      # ip netns exec ns1 ip link add bond0 type bond mode 0
      # ip netns exec ns1 ip link add bond_slave_1 type veth peer veth2
      # ip netns exec ns1 ip link set bond_slave_1 master bond0
      # ip netns exec ns1 ip link add link bond_slave_1 name vlan10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link add link bond0 name bond0_vlan10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link set bond_slave_1 nomaster
      # ip netns del ns1
    
    The logical analysis of the problem is as follows:
    
    1. create ETH_P_8021AD protocol vlan10 for bond_slave_1:
    register_vlan_dev()
      vlan_vid_add()
        vlan_info_alloc()
        __vlan_vid_add() // add [ETH_P_8021AD, 10] vid to bond_slave_1
    
    2. create ETH_P_8021AD protocol bond0_vlan10 for bond0:
    register_vlan_dev()
      vlan_vid_add()
        __vlan_vid_add()
          vlan_add_rx_filter_info()
              if (!vlan_hw_filter_capable(dev, proto)) // condition established because bond0 without NETIF_F_HW_VLAN_STAG_FILTER
                  return 0;
    
              if (netif_device_present(dev))
                  return dev->netdev_ops->ndo_vlan_rx_add_vid(dev, proto, vid); // will be never called
                  // The slaves of bond0 will not refer to the [ETH_P_8021AD, 10] vid.
    
    3. detach bond_slave_1 from bond0:
    __bond_release_one()
      vlan_vids_del_by_dev()
        list_for_each_entry(vid_info, &vlan_info->vid_list, list)
            vlan_vid_del(dev, vid_info->proto, vid_info->vid);
            // bond_slave_1 [ETH_P_8021AD, 10] vid will be deleted.
            // bond_slave_1->vlan_info will be assigned NULL.
    
    4. delete vlan10 during delete ns1:
    default_device_exit_batch()
      dev->rtnl_link_ops->dellink() // unregister_vlan_dev() for vlan10
        vlan_info = rtnl_dereference(real_dev->vlan_info); // real_dev of vlan10 is bond_slave_1
            BUG_ON(!vlan_info); // bond_slave_1->vlan_info is NULL now, bug is triggered!!!
    
    Add S-VLAN tag related features support to bond driver. So the bond driver
    will always propagate the VLAN info to its slaves.
    
    Fixes: 8ad227ff89a7 ("net: vlan: add 802.1ad support")
    Suggested-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Link: https://lore.kernel.org/r/20230802114320.4156068-1-william.xuanziyang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15b453cf7348973217558235b9ece2ee5fea6777
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Wed Aug 9 16:28:43 2023 +0200

    xsk: fix refcount underflow in error path
    
    commit 85c2c79a07302fe68a1ad5cc449458cc559e314d upstream.
    
    Fix a refcount underflow problem reported by syzbot that can happen
    when a system is running out of memory. If xp_alloc_tx_descs() fails,
    and it can only fail due to not having enough memory, then the error
    path is triggered. In this error path, the refcount of the pool is
    decremented as it has incremented before. However, the reference to
    the pool in the socket was not nulled. This means that when the socket
    is closed later, the socket teardown logic will think that there is a
    pool attached to the socket and try to decrease the refcount again,
    leading to a refcount underflow.
    
    I chose this fix as it involved adding just a single line. Another
    option would have been to move xp_get_pool() and the assignment of
    xs->pool to after the if-statement and using xs_umem->pool instead of
    xs->pool in the whole if-statement resulting in somewhat simpler code,
    but this would have led to much more churn in the code base perhaps
    making it harder to backport.
    
    Fixes: ba3beec2ec1d ("xsk: Fix possible crash when multiple sockets are created")
    Reported-by: syzbot+8ada0057e69293a05fd4@syzkaller.appspotmail.com
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Link: https://lore.kernel.org/r/20230809142843.13944-1-magnus.karlsson@gmail.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da5f42a6e7485fbb7a6dbd6a2b3045e19e4df5cc
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 3 17:26:49 2023 +0200

    tunnels: fix kasan splat when generating ipv4 pmtu error
    
    commit 6a7ac3d20593865209dceb554d8b3f094c6bd940 upstream.
    
    If we try to emit an icmp error in response to a nonliner skb, we get
    
    BUG: KASAN: slab-out-of-bounds in ip_compute_csum+0x134/0x220
    Read of size 4 at addr ffff88811c50db00 by task iperf3/1691
    CPU: 2 PID: 1691 Comm: iperf3 Not tainted 6.5.0-rc3+ #309
    [..]
     kasan_report+0x105/0x140
     ip_compute_csum+0x134/0x220
     iptunnel_pmtud_build_icmp+0x554/0x1020
     skb_tunnel_check_pmtu+0x513/0xb80
     vxlan_xmit_one+0x139e/0x2ef0
     vxlan_xmit+0x1867/0x2760
     dev_hard_start_xmit+0x1ee/0x4f0
     br_dev_queue_push_xmit+0x4d1/0x660
     [..]
    
    ip_compute_csum() cannot deal with nonlinear skbs, so avoid it.
    After this change, splat is gone and iperf3 is no longer stuck.
    
    Fixes: 4cb47a8644cc ("tunnels: PMTU discovery support for directly bridged IP packets")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Link: https://lore.kernel.org/r/20230803152653.29535-2-fw@strlen.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f20a941bc2c5464ec50ef793fb67d7de68192cbd
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Aug 8 08:49:23 2023 +0000

    tcp: add missing family to tcp_set_ca_state() tracepoint
    
    commit 8a70ed9520c5fafaac91053cacdd44625c39e188 upstream.
    
    Before this code is copied, add the missing family, as we did in
    commit 3dd344ea84e1 ("net: tracepoint: exposing sk_family in all tcp:tracepoints")
    
    Fixes: 15fcdf6ae116 ("tcp: Add tracepoint for tcp_set_ca_state")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Ping Gan <jacky_gam_2001@163.com>
    Cc: Manjusaka <me@manjusaka.me>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230808084923.2239142-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddebdaec1af2913832e511a0650a5300a9dbf3a6
Author: Gerd Bayer <gbayer@linux.ibm.com>
Date:   Fri Aug 4 19:06:24 2023 +0200

    net/smc: Use correct buffer sizes when switching between TCP and SMC
    
    commit 30c3c4a4497c3765bf6b298f5072c8165aeaf7cc upstream.
    
    Tuning of the effective buffer size through setsockopts was working for
    SMC traffic only but not for TCP fall-back connections even before
    commit 0227f058aa29 ("net/smc: Unbind r/w buffer size from clcsock and
    make them tunable"). That change made it apparent that TCP fall-back
    connections would use net.smc.[rw]mem as buffer size instead of
    net.ipv4_tcp_[rw]mem.
    
    Amend the code that copies attributes between the (TCP) clcsock and the
    SMC socket and adjust buffer sizes appropriately:
    - Copy over sk_userlocks so that both sockets agree on whether tuning
      via setsockopt is active.
    - When falling back to TCP use sk_sndbuf or sk_rcvbuf as specified with
      setsockopt. Otherwise, use the sysctl value for TCP/IPv4.
    - Likewise, use either values from setsockopt or from sysctl for SMC
      (duplicated) on successful SMC connect.
    
    In smc_tcp_listen_work() drop the explicit copy of buffer sizes as that
    is taken care of by the attribute copy.
    
    Fixes: 0227f058aa29 ("net/smc: Unbind r/w buffer size from clcsock and make them tunable")
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: Gerd Bayer <gbayer@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 584a783270c1b1fc83036b570e6d91acfd7d9b6a
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Aug 3 14:56:00 2023 +0000

    net/packet: annotate data-races around tp->status
    
    commit 8a9896177784063d01068293caea3f74f6830ff6 upstream.
    
    Another syzbot report [1] is about tp->status lockless reads
    from __packet_get_status()
    
    [1]
    BUG: KCSAN: data-race in __packet_rcv_has_room / __packet_set_status
    
    write to 0xffff888117d7c080 of 8 bytes by interrupt on cpu 0:
    __packet_set_status+0x78/0xa0 net/packet/af_packet.c:407
    tpacket_rcv+0x18bb/0x1a60 net/packet/af_packet.c:2483
    deliver_skb net/core/dev.c:2173 [inline]
    __netif_receive_skb_core+0x408/0x1e80 net/core/dev.c:5337
    __netif_receive_skb_one_core net/core/dev.c:5491 [inline]
    __netif_receive_skb+0x57/0x1b0 net/core/dev.c:5607
    process_backlog+0x21f/0x380 net/core/dev.c:5935
    __napi_poll+0x60/0x3b0 net/core/dev.c:6498
    napi_poll net/core/dev.c:6565 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6698
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    invoke_softirq kernel/softirq.c:445 [inline]
    __irq_exit_rcu+0x57/0xa0 kernel/softirq.c:650
    sysvec_apic_timer_interrupt+0x6d/0x80 arch/x86/kernel/apic/apic.c:1106
    asm_sysvec_apic_timer_interrupt+0x1a/0x20 arch/x86/include/asm/idtentry.h:645
    smpboot_thread_fn+0x33c/0x4a0 kernel/smpboot.c:112
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    read to 0xffff888117d7c080 of 8 bytes by interrupt on cpu 1:
    __packet_get_status net/packet/af_packet.c:436 [inline]
    packet_lookup_frame net/packet/af_packet.c:524 [inline]
    __tpacket_has_room net/packet/af_packet.c:1255 [inline]
    __packet_rcv_has_room+0x3f9/0x450 net/packet/af_packet.c:1298
    tpacket_rcv+0x275/0x1a60 net/packet/af_packet.c:2285
    deliver_skb net/core/dev.c:2173 [inline]
    dev_queue_xmit_nit+0x38a/0x5e0 net/core/dev.c:2243
    xmit_one net/core/dev.c:3574 [inline]
    dev_hard_start_xmit+0xcf/0x3f0 net/core/dev.c:3594
    __dev_queue_xmit+0xefb/0x1d10 net/core/dev.c:4244
    dev_queue_xmit include/linux/netdevice.h:3088 [inline]
    can_send+0x4eb/0x5d0 net/can/af_can.c:276
    bcm_can_tx+0x314/0x410 net/can/bcm.c:302
    bcm_tx_timeout_handler+0xdb/0x260
    __run_hrtimer kernel/time/hrtimer.c:1685 [inline]
    __hrtimer_run_queues+0x217/0x700 kernel/time/hrtimer.c:1749
    hrtimer_run_softirq+0xd6/0x120 kernel/time/hrtimer.c:1766
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    run_ksoftirqd+0x17/0x20 kernel/softirq.c:939
    smpboot_thread_fn+0x30a/0x4a0 kernel/smpboot.c:164
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    value changed: 0x0000000000000000 -> 0x0000000020000081
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 19 Comm: ksoftirqd/1 Not tainted 6.4.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/27/2023
    
    Fixes: 69e3c75f4d54 ("net: TX_RING and packet mmap")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20230803145600.2937518-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b249c510b43ea77821fe85cbad2d7faab7510998
Author: Xiang Yang <xiangyang3@huawei.com>
Date:   Thu Aug 3 07:24:38 2023 +0000

    mptcp: fix the incorrect judgment for msk->cb_flags
    
    commit 17ebf8a4c38b5481c29623f5e003fdf7583947f9 upstream.
    
    Coccicheck reports the error below:
    net/mptcp/protocol.c:3330:15-28: ERROR: test of a variable/field address
    
    Since the address of msk->cb_flags is used in __test_and_clear_bit, the
    address should not be NULL. The judgment for if (unlikely(msk->cb_flags))
    will always be true, we should check the real value of msk->cb_flags here.
    
    Fixes: 65a569b03ca8 ("mptcp: optimize release_cb for the common case")
    Signed-off-by: Xiang Yang <xiangyang3@huawei.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Link: https://lore.kernel.org/r/20230803072438.1847500-1-xiangyang3@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc0b41ac11069c77723bffd4c9c5adb4dcee635f
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 4 17:26:52 2023 +0000

    macsec: use DEV_STATS_INC()
    
    commit 32d0a49d36a2a306c2e47fe5659361e424f0ed3f upstream.
    
    syzbot/KCSAN reported data-races in macsec whenever dev->stats fields
    are updated.
    
    It appears all of these updates can happen from multiple cpus.
    
    Adopt SMP safe DEV_STATS_INC() to update dev->stats fields.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebceef298c56bb5c898ab497051e99671bc268d8
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed Aug 2 10:40:29 2023 -0700

    mISDN: Update parameter type of dsp_cmx_send()
    
    commit 1696ec8654016dad3b1baf6c024303e584400453 upstream.
    
    When booting a kernel with CONFIG_MISDN_DSP=y and CONFIG_CFI_CLANG=y,
    there is a failure when dsp_cmx_send() is called indirectly from
    call_timer_fn():
    
      [    0.371412] CFI failure at call_timer_fn+0x2f/0x150 (target: dsp_cmx_send+0x0/0x530; expected type: 0x92ada1e9)
    
    The function pointer prototype that call_timer_fn() expects is
    
      void (*fn)(struct timer_list *)
    
    whereas dsp_cmx_send() has a parameter type of 'void *', which causes
    the control flow integrity checks to fail because the parameter types do
    not match.
    
    Change dsp_cmx_send()'s parameter type to be 'struct timer_list' to
    match the expected prototype. The argument is unused anyways, so this
    has no functional change, aside from avoiding the CFI failure.
    
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Closes: https://lore.kernel.org/oe-lkp/202308020936.58787e6c-oliver.sang@intel.com
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Fixes: e313ac12eb13 ("mISDN: Convert timers to use timer_setup()")
    Link: https://lore.kernel.org/r/20230802-fix-dsp_cmx_send-cfi-failure-v1-1-2f2e79b0178d@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b2824b198a638d5ea45df81fa9acb1699eda8b3
Author: Xu Kuohai <xukuohai@huawei.com>
Date:   Fri Aug 4 03:37:38 2023 -0400

    bpf, sockmap: Fix bug that strp_done cannot be called
    
    commit 809e4dc71a0f2b8d2836035d98603694fff11d5d upstream.
    
    strp_done is only called when psock->progs.stream_parser is not NULL,
    but stream_parser was set to NULL by sk_psock_stop_strp(), called
    by sk_psock_drop() earlier. So, strp_done can never be called.
    
    Introduce SK_PSOCK_RX_ENABLED to mark whether there is strp on psock.
    Change the condition for calling strp_done from judging whether
    stream_parser is set to judging whether this flag is set. This flag is
    only set once when strp_init() succeeds, and will never be cleared later.
    
    Fixes: c0d95d3380ee ("bpf, sockmap: Re-evaluate proto ops when psock is removed from sockmap")
    Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/20230804073740.194770-3-xukuohai@huaweicloud.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed90fe7435c573897c2ab7624f24d67c866f94a9
Author: Xu Kuohai <xukuohai@huawei.com>
Date:   Fri Aug 4 03:37:37 2023 -0400

    bpf, sockmap: Fix map type error in sock_map_del_link
    
    commit 7e96ec0e6605b69bb21bbf6c0ff9051e656ec2b1 upstream.
    
    sock_map_del_link() operates on both SOCKMAP and SOCKHASH, although
    both types have member named "progs", the offset of "progs" member in
    these two types is different, so "progs" should be accessed with the
    real map type.
    
    Fixes: 604326b41a6f ("bpf, sockmap: convert to generic sk_msg interface")
    Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/20230804073740.194770-2-xukuohai@huaweicloud.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20acffcdc2b74fb7dcc4e299f7aca173df89d911
Author: Andrew Kanner <andrew.kanner@gmail.com>
Date:   Thu Aug 3 21:03:18 2023 +0200

    net: core: remove unnecessary frame_sz check in bpf_xdp_adjust_tail()
    
    commit d14eea09edf427fa36bd446f4a3271f99164202f upstream.
    
    Syzkaller reported the following issue:
    =======================================
    Too BIG xdp->frame_sz = 131072
    WARNING: CPU: 0 PID: 5020 at net/core/filter.c:4121
      ____bpf_xdp_adjust_tail net/core/filter.c:4121 [inline]
    WARNING: CPU: 0 PID: 5020 at net/core/filter.c:4121
      bpf_xdp_adjust_tail+0x466/0xa10 net/core/filter.c:4103
    ...
    Call Trace:
     <TASK>
     bpf_prog_4add87e5301a4105+0x1a/0x1c
     __bpf_prog_run include/linux/filter.h:600 [inline]
     bpf_prog_run_xdp include/linux/filter.h:775 [inline]
     bpf_prog_run_generic_xdp+0x57e/0x11e0 net/core/dev.c:4721
     netif_receive_generic_xdp net/core/dev.c:4807 [inline]
     do_xdp_generic+0x35c/0x770 net/core/dev.c:4866
     tun_get_user+0x2340/0x3ca0 drivers/net/tun.c:1919
     tun_chr_write_iter+0xe8/0x210 drivers/net/tun.c:2043
     call_write_iter include/linux/fs.h:1871 [inline]
     new_sync_write fs/read_write.c:491 [inline]
     vfs_write+0x650/0xe40 fs/read_write.c:584
     ksys_write+0x12f/0x250 fs/read_write.c:637
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    xdp->frame_sz > PAGE_SIZE check was introduced in commit c8741e2bfe87
    ("xdp: Allow bpf_xdp_adjust_tail() to grow packet size"). But Jesper
    Dangaard Brouer <jbrouer@redhat.com> noted that after introducing the
    xdp_init_buff() which all XDP driver use - it's safe to remove this
    check. The original intend was to catch cases where XDP drivers have
    not been updated to use xdp.frame_sz, but that is not longer a concern
    (since xdp_init_buff).
    
    Running the initial syzkaller repro it was discovered that the
    contiguous physical memory allocation is used for both xdp paths in
    tun_get_user(), e.g. tun_build_skb() and tun_alloc_skb(). It was also
    stated by Jesper Dangaard Brouer <jbrouer@redhat.com> that XDP can
    work on higher order pages, as long as this is contiguous physical
    memory (e.g. a page).
    
    Reported-and-tested-by: syzbot+f817490f5bd20541b90a@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/all/000000000000774b9205f1d8a80d@google.com/T/
    Link: https://syzkaller.appspot.com/bug?extid=f817490f5bd20541b90a
    Link: https://lore.kernel.org/all/20230725155403.796-1-andrew.kanner@gmail.com/T/
    Fixes: 43b5169d8355 ("net, xdp: Introduce xdp_init_buff utility routine")
    Signed-off-by: Andrew Kanner <andrew.kanner@gmail.com>
    Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Link: https://lore.kernel.org/r/20230803190316.2380231-1-andrew.kanner@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e59a2e5a3123fea60269bda82c9c7e8723f25b71
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:58 2023 +0300

    selftests: forwarding: tc_flower: Relax success criterion
    
    commit 9ee37e53e7687654b487fc94e82569377272a7a8 upstream.
    
    The test checks that filters that match on source or destination MAC
    were only hit once. A host can send more than one packet with a given
    source or destination MAC, resulting in failures.
    
    Fix by relaxing the success criterion and instead check that the filters
    were not hit zero times. Using tc_check_at_least_x_packets() is also an
    option, but it is not available in older kernels.
    
    Fixes: 07e5c75184a1 ("selftests: forwarding: Introduce tc flower matching tests")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/adc5e40d-d040-a65e-eb26-edf47dac5b02@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-13-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 352dc3ee33c6c37107577b232d64d1fadc0863f4
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:48 2023 +0300

    selftests: forwarding: Switch off timeout
    
    commit 0529883ad102f6c04e19fb7018f31e1bda575bbe upstream.
    
    The default timeout for selftests is 45 seconds, but it is not enough
    for forwarding selftests which can takes minutes to finish depending on
    the number of tests cases:
    
     # make -C tools/testing/selftests TARGETS=net/forwarding run_tests
     TAP version 13
     1..102
     # timeout set to 45
     # selftests: net/forwarding: bridge_igmp.sh
     # TEST: IGMPv2 report 239.10.10.10                                    [ OK ]
     # TEST: IGMPv2 leave 239.10.10.10                                     [ OK ]
     # TEST: IGMPv3 report 239.10.10.10 is_include                         [ OK ]
     # TEST: IGMPv3 report 239.10.10.10 include -> allow                   [ OK ]
     #
     not ok 1 selftests: net/forwarding: bridge_igmp.sh # TIMEOUT 45 seconds
    
    Fix by switching off the timeout and setting it to 0. A similar change
    was done for BPF selftests in commit 6fc5916cc256 ("selftests: bpf:
    Switch off timeout").
    
    Fixes: 81573b18f26d ("selftests/net/forwarding: add Makefile to install tests")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/8d149f8c-818e-d141-a0ce-a6bae606bc22@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-3-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2df0e4373507e0b9cce93229796840f4040d99e9
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:47 2023 +0300

    selftests: forwarding: Skip test when no interfaces are specified
    
    commit d72c83b1e4b4a36a38269c77a85ff52f95eb0d08 upstream.
    
    As explained in [1], the forwarding selftests are meant to be run with
    either physical loopbacks or veth pairs. The interfaces are expected to
    be specified in a user-provided forwarding.config file or as command
    line arguments. By default, this file is not present and the tests fail:
    
     # make -C tools/testing/selftests TARGETS=net/forwarding run_tests
     [...]
     TAP version 13
     1..102
     # timeout set to 45
     # selftests: net/forwarding: bridge_igmp.sh
     # Command line is not complete. Try option "help"
     # Failed to create netif
     not ok 1 selftests: net/forwarding: bridge_igmp.sh # exit=1
     [...]
    
    Fix by skipping a test if interfaces are not provided either via the
    configuration file or command line arguments.
    
     # make -C tools/testing/selftests TARGETS=net/forwarding run_tests
     [...]
     TAP version 13
     1..102
     # timeout set to 45
     # selftests: net/forwarding: bridge_igmp.sh
     # SKIP: Cannot create interface. Name not specified
     ok 1 selftests: net/forwarding: bridge_igmp.sh # SKIP
    
    [1] tools/testing/selftests/net/forwarding/README
    
    Fixes: 81573b18f26d ("selftests/net/forwarding: add Makefile to install tests")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/856d454e-f83c-20cf-e166-6dc06cbc1543@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-2-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ff7465b91604f0ad376d11c6948c00ba894fde8
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:55 2023 +0300

    selftests: forwarding: hw_stats_l3_gre: Skip when using veth pairs
    
    commit 9a711cde07c245a163d95eee5b42ed1871e73236 upstream.
    
    Layer 3 hardware stats cannot be used when the underlying interfaces are
    veth pairs, resulting in failures:
    
     # ./hw_stats_l3_gre.sh
     TEST: ping gre flat                                                 [ OK ]
     TEST: Test rx packets:                                              [FAIL]
             Traffic not reflected in the counter: 0 -> 0
     TEST: Test tx packets:                                              [FAIL]
             Traffic not reflected in the counter: 0 -> 0
    
    Fix by skipping the test when used with veth pairs.
    
    Fixes: 813f97a26860 ("selftests: forwarding: Add a tunnel-based test for L3 HW stats")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/adc5e40d-d040-a65e-eb26-edf47dac5b02@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-10-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 693c0a5a02e17f997b2897e329ae2744eebb217b
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:54 2023 +0300

    selftests: forwarding: ethtool_extended_state: Skip when using veth pairs
    
    commit b3d9305e60d121dac20a77b6847c4cf14a4c0001 upstream.
    
    Ethtool extended state cannot be tested with veth pairs, resulting in
    failures:
    
     # ./ethtool_extended_state.sh
     TEST: Autoneg, No partner detected                                  [FAIL]
             Expected "Autoneg", got "Link detected: no"
     [...]
    
    Fix by skipping the test when used with veth pairs.
    
    Fixes: 7d10bcce98cd ("selftests: forwarding: Add tests for ethtool extended state")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/adc5e40d-d040-a65e-eb26-edf47dac5b02@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-9-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10519d0b260d7f738c4774c591e2250a2dbea1c0
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:53 2023 +0300

    selftests: forwarding: ethtool: Skip when using veth pairs
    
    commit 60a36e21915c31c0375d9427be9406aa8ce2ec34 upstream.
    
    Auto-negotiation cannot be tested with veth pairs, resulting in
    failures:
    
     # ./ethtool.sh
     TEST: force of same speed autoneg off                               [FAIL]
             error in configuration. swp1 speed Not autoneg off
     [...]
    
    Fix by skipping the test when used with veth pairs.
    
    Fixes: 64916b57c0b1 ("selftests: forwarding: Add speed and auto-negotiation test")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/adc5e40d-d040-a65e-eb26-edf47dac5b02@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-8-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1455765e28ce78c29c0c92484d394a965d2d1c56
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:52 2023 +0300

    selftests: forwarding: Add a helper to skip test when using veth pairs
    
    commit 66e131861ab7bf754b50813216f5c6885cd32d63 upstream.
    
    A handful of tests require physical loopbacks to be used instead of veth
    pairs. Add a helper that these tests will invoke in order to be skipped
    when executed with veth pairs.
    
    Fixes: 64916b57c0b1 ("selftests: forwarding: Add speed and auto-negotiation test")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-7-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e146162dcf2e4d486df8d76f6587b8819cf538bc
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Aug 4 20:22:11 2023 +0100

    selftests/rseq: Fix build with undefined __weak
    
    commit d5ad9aae13dcced333c1a7816ff0a4fbbb052466 upstream.
    
    Commit 3bcbc20942db ("selftests/rseq: Play nice with binaries statically
    linked against glibc 2.35+") which is now in Linus' tree introduced uses
    of __weak but did nothing to ensure that a definition is provided for it
    resulting in build failures for the rseq tests:
    
    rseq.c:41:1: error: unknown type name '__weak'
    __weak ptrdiff_t __rseq_offset;
    ^
    rseq.c:41:17: error: expected ';' after top level declarator
    __weak ptrdiff_t __rseq_offset;
                    ^
                    ;
    rseq.c:42:1: error: unknown type name '__weak'
    __weak unsigned int __rseq_size;
    ^
    rseq.c:43:1: error: unknown type name '__weak'
    __weak unsigned int __rseq_flags;
    
    Fix this by using the definition from tools/include compiler.h.
    
    Fixes: 3bcbc20942db ("selftests/rseq: Play nice with binaries statically linked against glibc 2.35+")
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Message-Id: <20230804-kselftest-rseq-build-v1-1-015830b66aa9@kernel.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e12b1ebc758a0b5778db1d29181f41f321e6c22c
Author: Neil Armstrong <neil.armstrong@linaro.org>
Date:   Fri Jun 23 14:50:43 2023 +0200

    interconnect: qcom: sm8450: add enable_mask for bcm nodes
    
    commit be02db24cf840bc0fdfbecc78ad803619dd143e6 upstream.
    
    Set the proper enable_mask to nodes requiring such value
    to be used instead of a bandwidth when voting.
    
    The masks were copied from the downstream implementation at [1].
    
    [1] https://git.codelinaro.org/clo/la/kernel/msm-5.10/-/blob/KERNEL.PLATFORM.1.0.r2-05600-WAIPIOLE.0/drivers/interconnect/qcom/waipio.c
    
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Link: https://lore.kernel.org/r/20230619-topic-sm8550-upstream-interconnect-mask-vote-v2-2-709474b151cc@linaro.org
    Fixes: fafc114a468e ("interconnect: qcom: Add SM8450 interconnect provider driver")
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d0e2802b111da37866c20d7f6b531eb31c72ff5
Author: Mike Tipton <quic_mdtipton@quicinc.com>
Date:   Fri Jun 23 14:50:42 2023 +0200

    interconnect: qcom: Add support for mask-based BCMs
    
    commit d8630f050d3fd2079f8617dd6c00c6509109c755 upstream.
    
    Some BCMs aren't directly associated with the data path (i.e. ACV) and
    therefore don't communicate using BW. Instead, they are simply
    enabled/disabled with a simple bit mask. Add support for these.
    
    Origin commit retrieved from:
    https://git.codelinaro.org/clo/la/kernel/msm-5.15/-/commit/2d1573e0206998151b342e6b52a4c0f7234d7e36
    
    Signed-off-by: Mike Tipton <mdtipton@codeaurora.org>
    [narmstrong: removed copyright change from original commit]
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Link: https://lore.kernel.org/r/20230619-topic-sm8550-upstream-interconnect-mask-vote-v2-1-709474b151cc@linaro.org
    Fixes: fafc114a468e ("interconnect: qcom: Add SM8450 interconnect provider driver")
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 312f04ede209f0a186799fe8e64a19b49700d5dc
Author: Milan Zamazal <mzamazal@redhat.com>
Date:   Wed Jul 19 10:32:08 2023 +0200

    iio: core: Prevent invalid memory access when there is no parent
    
    commit b2a69969908fcaf68596dfc04369af0fe2e1d2f7 upstream.
    
    Commit 813665564b3d ("iio: core: Convert to use firmware node handle
    instead of OF node") switched the kind of nodes to use for label
    retrieval in device registration.  Probably an unwanted change in that
    commit was that if the device has no parent then NULL pointer is
    accessed.  This is what happens in the stock IIO dummy driver when a
    new entry is created in configfs:
    
      # mkdir /sys/kernel/config/iio/devices/dummy/foo
      BUG: kernel NULL pointer dereference, address: ...
      ...
      Call Trace:
      __iio_device_register
      iio_dummy_probe
    
    Since there seems to be no reason to make a parent device of an IIO
    dummy device mandatory, let’s prevent the invalid memory access in
    __iio_device_register when the parent device is NULL.  With this
    change, the IIO dummy driver works fine with configfs.
    
    Fixes: 813665564b3d ("iio: core: Convert to use firmware node handle instead of OF node")
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Milan Zamazal <mzamazal@redhat.com>
    Link: https://lore.kernel.org/r/20230719083208.88149-1-mzamazal@redhat.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98e470dc73a9b3539e5a7a3c72f6b7c01c989700
Author: Karol Herbst <kherbst@redhat.com>
Date:   Sat Aug 5 12:18:13 2023 +0200

    drm/nouveau/disp: Revert a NULL check inside nouveau_connector_get_modes
    
    commit d5712cd22b9cf109fded1b7f178f4c1888c8b84b upstream.
    
    The original commit adding that check tried to protect the kenrel against
    a potential invalid NULL pointer access.
    
    However we call nouveau_connector_detect_depth once without a native_mode
    set on purpose for non LVDS connectors and this broke DP support in a few
    cases.
    
    Cc: Olaf Skibbe <news@kravcenko.com>
    Cc: Lyude Paul <lyude@redhat.com>
    Closes: https://gitlab.freedesktop.org/drm/nouveau/-/issues/238
    Closes: https://gitlab.freedesktop.org/drm/nouveau/-/issues/245
    Fixes: 20a2ce87fbaf8 ("drm/nouveau/dp: check for NULL nv_connector->native_mode")
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230805101813.2603989-1-kherbst@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19e7feda89667d01b77e84d6e7a02700106a4ae2
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 9 15:05:00 2023 +0200

    x86: Move gds_ucode_mitigated() declaration to header
    
    commit eb3515dc99c7c85f4170b50838136b2a193f8012 upstream.
    
    The declaration got placed in the .c file of the caller, but that
    causes a warning for the definition:
    
    arch/x86/kernel/cpu/bugs.c:682:6: error: no previous prototype for 'gds_ucode_mitigated' [-Werror=missing-prototypes]
    
    Move it to a header where both sides can observe it instead.
    
    Fixes: 81ac7e5d74174 ("KVM: Add GDS_NO support to KVM")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Tested-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/all/20230809130530.1913368-2-arnd%40kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f276899f8dbc882dfa634a384ca86e056088dbde
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 9 15:04:59 2023 +0200

    x86/speculation: Add cpu_show_gds() prototype
    
    commit a57c27c7ad85c420b7de44c6ee56692d51709dda upstream.
    
    The newly added function has two definitions but no prototypes:
    
    drivers/base/cpu.c:605:16: error: no previous prototype for 'cpu_show_gds' [-Werror=missing-prototypes]
    
    Add a declaration next to the other ones for this file to avoid the
    warning.
    
    Fixes: 8974eb588283b ("x86/speculation: Add Gather Data Sampling mitigation")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Tested-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/all/20230809130530.1913368-1-arnd%40kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 179430c2aa46a927ce4c01f635a172f851fd15ac
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Sun Jul 16 20:22:20 2023 +0200

    x86/sev: Do not try to parse for the CC blob on non-AMD hardware
    
    commit bee6cf1a80b54548a039e224c651bb15b644a480 upstream.
    
    Tao Liu reported a boot hang on an Intel Atom machine due to an unmapped
    EFI config table. The reason being that the CC blob which contains the
    CPUID page for AMD SNP guests is parsed for before even checking
    whether the machine runs on AMD hardware.
    
    Usually that's not a problem on !AMD hw - it simply won't find the CC
    blob's GUID and return. However, if any parts of the config table
    pointers array is not mapped, the kernel will #PF very early in the
    decompressor stage without any opportunity to recover.
    
    Therefore, do a superficial CPUID check before poking for the CC blob.
    This will fix the current issue on real hardware. It would also work as
    a guest on a non-lying hypervisor.
    
    For the lying hypervisor, the check is done again, *after* parsing the
    CC blob as the real CPUID page will be present then.
    
    Clear the #VC handler in case SEV-{ES,SNP} hasn't been detected, as
    a precaution.
    
    Fixes: c01fce9cef84 ("x86/compressed: Add SEV-SNP feature detection/setup")
    Reported-by: Tao Liu <ltao@redhat.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Tested-by: Tao Liu <ltao@redhat.com>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230601072043.24439-1-ltao@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ad49178c00a5f20cd97a81cfa87dba8dfa9ff0f
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Thu Aug 3 18:16:09 2023 +0300

    x86/mm: Fix VDSO and VVAR placement on 5-level paging machines
    
    commit 1b8b1aa90c9c0e825b181b98b8d9e249dc395470 upstream.
    
    Yingcong has noticed that on the 5-level paging machine, VDSO and VVAR
    VMAs are placed above the 47-bit border:
    
    8000001a9000-8000001ad000 r--p 00000000 00:00 0                          [vvar]
    8000001ad000-8000001af000 r-xp 00000000 00:00 0                          [vdso]
    
    This might confuse users who are not aware of 5-level paging and expect
    all userspace addresses to be under the 47-bit border.
    
    So far problem has only been triggered with ASLR disabled, although it
    may also occur with ASLR enabled if the layout is randomized in a just
    right way.
    
    The problem happens due to custom placement for the VMAs in the VDSO
    code: vdso_addr() tries to place them above the stack and checks the
    result against TASK_SIZE_MAX, which is wrong. TASK_SIZE_MAX is set to
    the 56-bit border on 5-level paging machines. Use DEFAULT_MAP_WINDOW
    instead.
    
    Fixes: b569bab78d8d ("x86/mm: Prepare to expose larger address space to userspace")
    Reported-by: Yingcong Wu <yingcong.wu@intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/20230803151609.22141-1-kirill.shutemov%40linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25085250a150da4599c3f8dd9db6b76dc864178a
Author: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
Date:   Fri Aug 11 23:37:05 2023 +0300

    x86/cpu/amd: Enable Zenbleed fix for AMD Custom APU 0405
    
    commit 6dbef74aeb090d6bee7d64ef3fa82ae6fa53f271 upstream.
    
    Commit
    
      522b1d69219d ("x86/cpu/amd: Add a Zenbleed fix")
    
    provided a fix for the Zen2 VZEROUPPER data corruption bug affecting
    a range of CPU models, but the AMD Custom APU 0405 found on SteamDeck
    was not listed, although it is clearly affected by the vulnerability.
    
    Add this CPU variant to the Zenbleed erratum list, in order to
    unconditionally enable the fallback fix until a proper microcode update
    is available.
    
    Fixes: 522b1d69219d ("x86/cpu/amd: Add a Zenbleed fix")
    Signed-off-by: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230811203705.1699914-1-cristian.ciocaltea@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d93eeac34e75ccbdbfc90005914d32518624843a
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Wed Aug 9 09:40:26 2023 -0700

    x86/srso: Fix build breakage with the LLVM linker
    
    commit cbe8ded48b939b9d55d2c5589ab56caa7b530709 upstream.
    
    The assertion added to verify the difference in bits set of the
    addresses of srso_untrain_ret_alias() and srso_safe_ret_alias() would fail
    to link in LLVM's ld.lld linker with the following error:
    
      ld.lld: error: ./arch/x86/kernel/vmlinux.lds:210: at least one side of
      the expression must be absolute
      ld.lld: error: ./arch/x86/kernel/vmlinux.lds:211: at least one side of
      the expression must be absolute
    
    Use ABSOLUTE to evaluate the expression referring to at least one of the
    symbols so that LLD can evaluate the linker script.
    
    Also, add linker version info to the comment about XOR being unsupported
    in either ld.bfd or ld.lld until somewhat recently.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Closes: https://lore.kernel.org/llvm/CA+G9fYsdUeNu-gwbs0+T6XHi4hYYk=Y9725-wFhZ7gJMspLDRA@mail.gmail.com/
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Reported-by: Daniel Kolesa <daniel@octaforge.org>
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Suggested-by: Sven Volkinsfeld <thyrc@gmx.net>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1907
    Link: https://lore.kernel.org/r/20230809-gds-v1-1-eaac90b0cbcc@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f75e09343549e9908bc88c88890f9a3759c8a04
Author: RD Babiera <rdbabiera@google.com>
Date:   Wed Jul 26 02:09:02 2023 +0000

    usb: typec: altmodes/displayport: Signal hpd when configuring pin assignment
    
    commit 5a5ccd61cfd76156cb3e0373c300c509d05448ce upstream.
    
    When connecting to some DisplayPort partners, the initial status update
    after entering DisplayPort Alt Mode notifies that the DFP_D/UFP_D is not in
    the connected state. This leads to sending a configure message that keeps
    the device in USB mode. The port partner then sets DFP_D/UFP_D to the
    connected state and HPD to high in the same Attention message. Currently,
    the HPD signal is dropped in order to handle configuration.
    
    This patch saves changes to the HPD signal when the device chooses to
    configure during dp_altmode_status_update, and invokes sysfs_notify if
    necessary for HPD after configuring.
    
    Fixes: 0e3bb7d6894d ("usb: typec: Add driver for DisplayPort alternate mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: RD Babiera <rdbabiera@google.com>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20230726020903.1409072-1-rdbabiera@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57b8f5fb8f17e5b32e08ed6e5d136eaea3c7292e
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Wed Jul 12 08:57:22 2023 +0000

    usb: typec: tcpm: Fix response to vsafe0V event
    
    commit 4270d2b4845e820b274702bfc2a7140f69e4d19d upstream.
    
    Do not transition to SNK_UNATTACHED state when receiving vsafe0v event
    while in SNK_HARD_RESET_WAIT_VBUS. Ignore VBUS off events as well as
    in some platforms VBUS off can be signalled more than once.
    
    [143515.364753] Requesting mux state 1, usb-role 2, orientation 2
    [143515.365520] pending state change SNK_HARD_RESET_SINK_OFF -> SNK_HARD_RESET_SINK_ON @ 650 ms [rev3 HARD_RESET]
    [143515.632281] CC1: 0 -> 0, CC2: 3 -> 0 [state SNK_HARD_RESET_SINK_OFF, polarity 1, disconnected]
    [143515.637214] VBUS on
    [143515.664985] VBUS off
    [143515.664992] state change SNK_HARD_RESET_SINK_OFF -> SNK_HARD_RESET_WAIT_VBUS [rev3 HARD_RESET]
    [143515.665564] VBUS VSAFE0V
    [143515.665566] state change SNK_HARD_RESET_WAIT_VBUS -> SNK_UNATTACHED [rev3 HARD_RESET]
    
    Fixes: 28b43d3d746b ("usb: typec: tcpm: Introduce vsafe0v for vbus")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20230712085722.1414743-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3b37754988a228d3443e07c4cc2f2a98cf698f6
Author: Prashanth K <quic_prashk@quicinc.com>
Date:   Tue Aug 1 14:33:52 2023 +0530

    usb: common: usb-conn-gpio: Prevent bailing out if initial role is none
    
    commit 8e21a620c7e6e00347ade1a6ed4967b359eada5a upstream.
    
    Currently if we bootup a device without cable connected, then
    usb-conn-gpio won't call set_role() because last_role is same
    as current role. This happens since last_role gets initialised
    to zero during the probe.
    
    To avoid this, add a new flag initial_detection into struct
    usb_conn_info, which prevents bailing out during initial
    detection.
    
    Cc: <stable@vger.kernel.org> # 5.4
    Fixes: 4602f3bff266 ("usb: common: add USB GPIO based connection detection driver")
    Signed-off-by: Prashanth K <quic_prashk@quicinc.com>
    Tested-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/1690880632-12588-1-git-send-email-quic_prashk@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bed19d95fcb9c98dfaa9585922b39a2dfba7898d
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Sat Jul 29 10:59:38 2023 -0400

    USB: Gadget: core: Help prevent panic during UVC unconfigure
    
    commit 65dadb2beeb7360232b09ebc4585b54475dfee06 upstream.
    
    Avichal Rakesh reported a kernel panic that occurred when the UVC
    gadget driver was removed from a gadget's configuration.  The panic
    involves a somewhat complicated interaction between the kernel driver
    and a userspace component (as described in the Link tag below), but
    the analysis did make one thing clear: The Gadget core should
    accomodate gadget drivers calling usb_gadget_deactivate() as part of
    their unbind procedure.
    
    Currently this doesn't work.  gadget_unbind_driver() calls
    driver->unbind() while holding the udc->connect_lock mutex, and
    usb_gadget_deactivate() attempts to acquire that mutex, which will
    result in a deadlock.
    
    The simple fix is for gadget_unbind_driver() to release the mutex when
    invoking the ->unbind() callback.  There is no particular reason for
    it to be holding the mutex at that time, and the mutex isn't held
    while the ->bind() callback is invoked.  So we'll drop the mutex
    before performing the unbind callback and reacquire it afterward.
    
    We'll also add a couple of comments to usb_gadget_activate() and
    usb_gadget_deactivate().  Because they run in process context they
    must not be called from a gadget driver's ->disconnect() callback,
    which (according to the kerneldoc for struct usb_gadget_driver in
    include/linux/usb/gadget.h) may run in interrupt context.  This may
    help prevent similar bugs from arising in the future.
    
    Reported-and-tested-by: Avichal Rakesh <arakesh@google.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: 286d9975a838 ("usb: gadget: udc: core: Prevent soft_connect_store() race")
    Link: https://lore.kernel.org/linux-usb/4d7aa3f4-22d9-9f5a-3d70-1bd7148ff4ba@google.com/
    Cc: Badhri Jagan Sridharan <badhri@google.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/48b2f1f1-0639-46bf-bbfc-98cb05a24914@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2a4ded0ee9902bb62c1f58c6289fbaf1990249c
Author: Elson Roy Serrao <quic_eserrao@quicinc.com>
Date:   Tue Aug 1 12:26:58 2023 -0700

    usb: dwc3: Properly handle processing of pending events
    
    commit 3ddaa6a274578e23745b7466346fc2650df8f959 upstream.
    
    If dwc3 is runtime suspended we defer processing the event buffer
    until resume, by setting the pending_events flag. Set this flag before
    triggering resume to avoid race with the runtime resume callback.
    
    While handling the pending events, in addition to checking the event
    buffer we also need to process it. Handle this by explicitly calling
    dwc3_thread_interrupt(). Also balance the runtime pm get() operation
    that triggered this processing.
    
    Cc: stable@vger.kernel.org
    Fixes: fc8bb91bc83e ("usb: dwc3: implement runtime PM")
    Signed-off-by: Elson Roy Serrao <quic_eserrao@quicinc.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Reviewed-by: Roger Quadros <rogerq@kernel.org>
    Link: https://lore.kernel.org/r/20230801192658.19275-1-quic_eserrao@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d2d5282d39aed6f27dfe1ed60a5f3934ebd21cd
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Aug 2 13:49:02 2023 -0400

    usb-storage: alauda: Fix uninit-value in alauda_check_media()
    
    commit a6ff6e7a9dd69364547751db0f626a10a6d628d2 upstream.
    
    Syzbot got KMSAN to complain about access to an uninitialized value in
    the alauda subdriver of usb-storage:
    
    BUG: KMSAN: uninit-value in alauda_transport+0x462/0x57f0
    drivers/usb/storage/alauda.c:1137
    CPU: 0 PID: 12279 Comm: usb-storage Not tainted 5.3.0-rc7+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x191/0x1f0 lib/dump_stack.c:113
      kmsan_report+0x13a/0x2b0 mm/kmsan/kmsan_report.c:108
      __msan_warning+0x73/0xe0 mm/kmsan/kmsan_instr.c:250
      alauda_check_media+0x344/0x3310 drivers/usb/storage/alauda.c:460
    
    The problem is that alauda_check_media() doesn't verify that its USB
    transfer succeeded before trying to use the received data.  What
    should happen if the transfer fails isn't entirely clear, but a
    reasonably conservative approach is to pretend that no media is
    present.
    
    A similar problem exists in a usb_stor_dbg() call in
    alauda_get_media_status().  In this case, when an error occurs the
    call is redundant, because usb_stor_ctrl_transfer() already will print
    a debugging message.
    
    Finally, unrelated to the uninitialized memory access, is the fact
    that alauda_check_media() performs DMA to a buffer on the stack.
    Fortunately usb-storage provides a general purpose DMA-able buffer for
    uses like this.  We'll use it instead.
    
    Reported-and-tested-by: syzbot+e7d46eb426883fb97efd@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/all/0000000000007d25ff059457342d@google.com/T/
    Suggested-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: e80b0fade09e ("[PATCH] USB Storage: add alauda support")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/693d5d5e-f09b-42d0-8ed9-1f96cd30bcce@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ee39ec479147e29af704639f8e55fce246ed2d9
Author: Ricky WU <ricky_wu@realtek.com>
Date:   Tue Jul 25 09:10:54 2023 +0000

    misc: rtsx: judge ASPM Mode to set PETXCFG Reg
    
    commit 101bd907b4244a726980ee67f95ed9cafab6ff7a upstream.
    
    ASPM Mode is ASPM_MODE_CFG need to judge the value of clkreq_0
    to set HIGH or LOW, if the ASPM Mode is ASPM_MODE_REG
    always set to HIGH during the initialization.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ricky Wu <ricky_wu@realtek.com>
    Link: https://lore.kernel.org/r/52906c6836374c8cb068225954c5543a@realtek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f11a26633eb6d3bb24a10b1bacc4e4a9b0c6389f
Author: Qi Zheng <zhengqi.arch@bytedance.com>
Date:   Sun Jun 25 15:49:37 2023 +0000

    binder: fix memory leak in binder_init()
    
    commit adb9743d6a08778b78d62d16b4230346d3508986 upstream.
    
    In binder_init(), the destruction of binder_alloc_shrinker_init() is not
    performed in the wrong path, which will cause memory leaks. So this commit
    introduces binder_alloc_shrinker_exit() and calls it in the wrong path to
    fix that.
    
    Signed-off-by: Qi Zheng <zhengqi.arch@bytedance.com>
    Acked-by: Carlos Llamas <cmllamas@google.com>
    Fixes: f2517eb76f1f ("android: binder: Add global lru shrinker to binder")
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230625154937.64316-1-qi.zheng@linux.dev
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77b689cc27d489b75d33f1a368356d70eb0ce08c
Author: Alvin Šipraga <alsi@bang-olufsen.dk>
Date:   Mon Jun 19 16:12:39 2023 +0200

    iio: adc: ina2xx: avoid NULL pointer dereference on OF device match
    
    commit a41e19cc0d6b6a445a4133170b90271e4a2553dc upstream.
    
    The affected lines were resulting in a NULL pointer dereference on our
    platform because the device tree contained the following list of
    compatible strings:
    
        power-sensor@40 {
            compatible = "ti,ina232", "ti,ina231";
            ...
        };
    
    Since the driver doesn't declare a compatible string "ti,ina232", the OF
    matching succeeds on "ti,ina231". But the I2C device ID info is
    populated via the first compatible string, cf. modalias population in
    of_i2c_get_board_info(). Since there is no "ina232" entry in the legacy
    I2C device ID table either, the struct i2c_device_id *id pointer in the
    probe function is NULL.
    
    Fix this by using the already populated type variable instead, which
    points to the proper driver data. Since the name is also wanted, add a
    generic one to the ina2xx_config table.
    
    Signed-off-by: Alvin Šipraga <alsi@bang-olufsen.dk>
    Fixes: c43a102e67db ("iio: ina2xx: add support for TI INA2xx Power Monitors")
    Link: https://lore.kernel.org/r/20230619141239.2257392-1-alvin@pqrs.dk
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f8ebbd0f03e5e494c2ce23ee4a99382da663183
Author: Alisa Roman <alisa.roman@analog.com>
Date:   Wed Jun 14 18:52:43 2023 +0300

    iio: adc: ad7192: Fix ac excitation feature
    
    commit 6bc471b6c3aeaa7b95d1b86a1bb8d91a3c341fa5 upstream.
    
    AC excitation enable feature exposed to user on AD7192, allowing a bit
    which should be 0 to be set. This feature is specific only to AD7195. AC
    excitation attribute moved accordingly.
    
    In the AD7195 documentation, the AC excitation enable bit is on position
    22 in the Configuration register. ACX macro changed to match correct
    register and bit.
    
    Note that the fix tag is for the commit that moved the driver out of
    staging.
    
    Fixes: b581f748cce0 ("staging: iio: adc: ad7192: move out of staging")
    Signed-off-by: Alisa Roman <alisa.roman@analog.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Nuno Sa <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20230614155242.160296-1-alisa.roman@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e1ed816a0e1dd71025a8484dfefebf792fcafee
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Tue Jul 18 10:02:18 2023 +0300

    iio: frequency: admv1013: propagate errors from regulator_get_voltage()
    
    commit 507397d19b5a296aa339f7a1bd16284f668a1906 upstream.
    
    The regulator_get_voltage() function returns negative error codes.
    This function saves it to an unsigned int and then does some range
    checking and, since the error code falls outside the correct range,
    it returns -EINVAL.
    
    Beyond the messiness, this is bad because the regulator_get_voltage()
    function can return -EPROBE_DEFER and it's important to propagate that
    back properly so it can be handled.
    
    Fixes: da35a7b526d9 ("iio: frequency: admv1013: add support for ADMV1013")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/ce75aac3-2aba-4435-8419-02e59fdd862b@moroto.mountain
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 366563c14f1f8871fcf590d23e2f645fc81340d9
Author: Yiyuan Guo <yguoaz@gmail.com>
Date:   Fri Jun 30 22:37:19 2023 +0800

    iio: cros_ec: Fix the allocation size for cros_ec_command
    
    commit 8a4629055ef55177b5b63dab1ecce676bd8cccdd upstream.
    
    The struct cros_ec_command contains several integer fields and a
    trailing array. An allocation size neglecting the integer fields can
    lead to buffer overrun.
    
    Reviewed-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Signed-off-by: Yiyuan Guo <yguoaz@gmail.com>
    Fixes: 974e6f02e27e ("iio: cros_ec_sensors_core: Add common functions for the ChromeOS EC Sensor Hub.")
    Link: https://lore.kernel.org/r/20230630143719.1513906-1-yguoaz@gmail.com
    Cc: <Stable@vger.kerenl.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aac2726b6930f9d5dffb1090ebfc0cdfad6a30c
Author: Aleksa Sarai <cyphar@cyphar.com>
Date:   Sat Aug 12 07:16:11 2023 -0600

    io_uring: correct check for O_TMPFILE
    
    Commit 72dbde0f2afbe4af8e8595a89c650ae6b9d9c36f upstream.
    
    O_TMPFILE is actually __O_TMPFILE|O_DIRECTORY. This means that the old
    check for whether RESOLVE_CACHED can be used would incorrectly think
    that O_DIRECTORY could not be used with RESOLVE_CACHED.
    
    Cc: stable@vger.kernel.org # v5.12+
    Fixes: 3a81fd02045c ("io_uring: enable LOOKUP_CACHED path resolution for filename lookups")
    Signed-off-by: Aleksa Sarai <cyphar@cyphar.com>
    Link: https://lore.kernel.org/r/20230807-resolve_cached-o_tmpfile-v3-1-e49323e1ef6f@cyphar.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b61a06eca15cc4fd6ff50540ba3bbdea76e52c6b
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Fri Aug 11 16:07:08 2023 -0500

    drm/amd/display: trigger timing sync only if TG is running
    
    commit 6066aaf74f510fc171dbe9375153aee2d60d37aa upstream
    
    [Why&How]
    If the timing generator isnt running, it does not make sense to trigger
    a sync on the corresponding OTG. Check this condition before starting.
    Otherwise, this will cause error like:
    
    *ERROR* GSL: Timeout on reset trigger!
    
    Fixes: dc55b106ad47 ("drm/amd/display: Disable phantom OTG after enable for plane disable")
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ NOTE: This is also 5f9f97c02dd2 ("drm/amd/display: trigger timing sync
      only if TG is running") ]
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07152d9e87ef7759955446989693bbf5e8e80b7c
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Aug 11 16:07:07 2023 -0500

    drm/amd/display: fix the build when DRM_AMD_DC_DCN is not set
    
    commit 5ca9b33ece9aa048b6ec9411f054e1b781662327 upstream
    
    Move the new callback outside of the guard.
    
    Fixes: dc55b106ad47 ("drm/amd/display: Disable phantom OTG after enable for plane disable")
    CC: Alvin Lee <Alvin.Lee2@amd.com>
    CC: Alan Liu <HaoPing.Liu@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 647e12741e6d16eccb679d2fefa7ec71496b6337
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Fri Aug 11 16:07:06 2023 -0500

    drm/amd/display: Retain phantom plane/stream if validation fails
    
    commit 9b216b7e38f5381bcc3ad21c5ac614aa577ab8f2 upstream
    
    [Description]
    - If we fail validation, we should retain the phantom
      stream/planes
    - Full updates assume that phantom pipes will be fully
      removed, but if validation fails we keep the phantom
      pipes
    - Therefore we have to retain the plane/stream if validation
      fails (since the refcount is decremented before validation,
      and the expectation is that it's fully freed when the  old
      dc_state is released)
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e61f0ad73668912feef345e35beeefcce5bbbd63
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Fri Aug 11 16:07:05 2023 -0500

    drm/amd/display: Disable phantom OTG after enable for plane disable
    
    commit dc55b106ad477c67f969f3432d9070c6846fb557 upstream
    
    [Description]
    - Need to disable phantom OTG after it's enabled
      in order to restore it to it's original state.
    - If it's enabled and then an MCLK switch comes in
      we may not prefetch the correct data since the phantom
      OTG could already be in the middle of the frame.
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Alan Liu <HaoPing.Liu@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9caac2a9f69f58bed2ba35845a13fa7039d2e1d2
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Fri Aug 11 16:07:04 2023 -0500

    drm/amd/display: Use update plane and stream routine for DCN32x
    
    commit dddde627807c22d6f15f4417eb395b13a1ca88f9 upstream
    
    Sub-viewport (Subvp) feature is used for changing MCLK without causing
    any display artifact, requiring special treatment from the plane and
    stream perspective since DC needs to read data from the cache when using
    subvp. However, the function dc_commit_updates_for_stream does not
    provide all the support needed by this feature which will make this
    function legacy at some point. For this reason, this commit enables
    dc_update_planes_and_stream for ASICs that support this feature but
    preserves the old behavior for other ASICs. However,
    dc_update_planes_and_stream should replace dc_commit_updates_for_stream
    for all ASICs since it does most of the tasks executed by
    dc_commit_updates_for_stream with other extra operations, but we need to
    run tests before making this change.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Co-developed-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e93ae6e6b6605bfac458950920292311f7cf4a82
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Fri Aug 11 16:07:03 2023 -0500

    drm/amd/display: Avoid ABM when ODM combine is enabled for eDP
    
    commit 7fffb03b4045c862f904a88b852dc509c4e46406 upstream
    
    ODM to combine on the eDP panel with ABM causes the color difference to
    the panel since the ABM module only sets one pipe. Hence, this commit
    blocks ABM in case of ODM combined on eDP.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Co-developed-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fe91c51aa936779edcae5943b1e621047fe2c2d
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Fri Aug 11 16:07:02 2023 -0500

    drm/amd/display: Update OTG instance in the commit stream
    
    commit eef019eabc3cd0fddcffefbf67806a4d8cca29bb upstream
    
    OTG instance is not updated in dc_commit_state_no_check for newly
    committed streams because mode_change is not set. Notice that OTG update
    is part of the software state, and after hardware programming, it must
    be updated; for this reason, this commit updates the OTG offset right
    after hardware programming.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Co-developed-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2415df0afba5a114cececdb556f74b3d7965aa8
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Fri Aug 11 16:07:01 2023 -0500

    drm/amd/display: Handle seamless boot stream
    
    commit 170390e587a69b2a24abac39eb3ae6ec28a4d7f2 upstream
    
    A seamless boot stream has hardware resources assigned to it, and adding
    a new stream means rebuilding the current assignment. It is desirable to
    avoid this situation since it may cause light-up issues on the VGA
    monitor on USB-C. This commit swaps the seamless boot stream to pipe 0
    (if necessary) to ensure that the pipe context matches.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Co-developed-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b1a1f168c03787aa6a159f4f1dfbfa398f1d44e
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Fri Aug 11 16:07:00 2023 -0500

    drm/amd/display: Add function for validate and update new stream
    
    commit a5e39ae27c3a305c6aafc0e423b0cb2c677facde upstream
    
    DC stream can be seen as a representation of the DCN backend or the data
    struct that represents the center of the display pipeline. The front end
    (i.e., planes) is connected to the DC stream, and in its turn, streams
    are connected to the DC link. Due to this dynamic, DC must handle the
    following scenarios:
    
    1. A stream is removed;
    2. A new stream is created;
    3. An unchanged stream had some updates on its planes.
    
    These combinations require that the new stream data struct become
    updated and has a valid global state. For handling multiple corner cases
    associated with stream operations, this commit introduces a function
    dedicated to manipulating stream changes and invokes the state
    validation function after that.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Co-developed-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60334c0cba2f7741252960994b1e9b1d6b668d07
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Fri Aug 11 16:06:59 2023 -0500

    drm/amd/display: Handle virtual hardware detect
    
    commit 987b96eb860036ab79051fb271f7fbdc01c9daf5 upstream
    
    If virtual hardware is detected, there is no reason to run the full
    dc_commit_streams process, and DC can return true immediately.
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Co-developed-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f19195d639764d68f6f316dda363ba29821e5bc
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Aug 11 11:40:31 2023 -0500

    drm/amd/pm: avoid unintentional shutdown due to temperature momentary fluctuation
    
    commit b75efe88b20c2be28b67e2821a794cc183e32374 upstream
    
    An intentional delay is added on soft ctf triggered. Then there will
    be a double check for the GPU temperature before taking further
    action. This can avoid unintended shutdown due to temperature
    momentary fluctuation.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ Hand-modified because:
      * XCP support added to amdgpu.h in kernel 6.5
        and is not necessary for this fix.
      * SMU microcode initialization moved in
        32806038aa76 ("drm/amd: Load SMU microcode during early_init") ]
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/1267
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2779
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b064f9ccf11cb4008a1f0e3c96099041b121af80
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Aug 11 11:40:30 2023 -0500

    drm/amd/pm: fulfill powerplay peak profiling mode shader/memory clock settings
    
    commit b1a9557a7d00c758ed9e701fbb3445a13a49506f upstream
    
    Enable peak profiling mode shader/memory clock reporting for powerplay
    framework.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b844033ea813cb028a1961514ef37010fef9f543
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Aug 11 11:40:29 2023 -0500

    drm/amd/pm: expose swctf threshold setting for legacy powerplay
    
    commit 064329c595da56eff6d7a7e7760660c726433139 upstream
    
    Preparation for coming optimization which eliminates the influence of
    GPU temperature momentary fluctuation.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2368afd60f647889d90fa4a42c7b27548f77dbd9
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Aug 11 11:40:28 2023 -0500

    drm/amd/pm: fulfill swsmu peak profiling mode shader/memory clock settings
    
    commit 975b4b1d90ccf83da252907108f4090fb61b816e upstream
    
    Enable peak profiling mode shader/memory clocks reporting for swsmu
    framework.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7532ff6edbf5242376b24a95a2fefb59bb653e5a
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Sat Jul 29 04:13:18 2023 +0900

    nilfs2: fix use-after-free of nilfs_root in dirtying inodes via iput
    
    commit f8654743a0e6909dc634cbfad6db6816f10f3399 upstream.
    
    During unmount process of nilfs2, nothing holds nilfs_root structure after
    nilfs2 detaches its writer in nilfs_detach_log_writer().  Previously,
    nilfs_evict_inode() could cause use-after-free read for nilfs_root if
    inodes are left in "garbage_list" and released by nilfs_dispose_list at
    the end of nilfs_detach_log_writer(), and this bug was fixed by commit
    9b5a04ac3ad9 ("nilfs2: fix use-after-free bug of nilfs_root in
    nilfs_evict_inode()").
    
    However, it turned out that there is another possibility of UAF in the
    call path where mark_inode_dirty_sync() is called from iput():
    
    nilfs_detach_log_writer()
      nilfs_dispose_list()
        iput()
          mark_inode_dirty_sync()
            __mark_inode_dirty()
              nilfs_dirty_inode()
                __nilfs_mark_inode_dirty()
                  nilfs_load_inode_block() --> causes UAF of nilfs_root struct
    
    This can happen after commit 0ae45f63d4ef ("vfs: add support for a
    lazytime mount option"), which changed iput() to call
    mark_inode_dirty_sync() on its final reference if i_state has I_DIRTY_TIME
    flag and i_nlink is non-zero.
    
    This issue appears after commit 28a65b49eb53 ("nilfs2: do not write dirty
    data after degenerating to read-only") when using the syzbot reproducer,
    but the issue has potentially existed before.
    
    Fix this issue by adding a "purging flag" to the nilfs structure, setting
    that flag while disposing the "garbage_list" and checking it in
    __nilfs_mark_inode_dirty().
    
    Unlike commit 9b5a04ac3ad9 ("nilfs2: fix use-after-free bug of nilfs_root
    in nilfs_evict_inode()"), this patch does not rely on ns_writer to
    determine whether to skip operations, so as not to break recovery on
    mount.  The nilfs_salvage_orphan_logs routine dirties the buffer of
    salvaged data before attaching the log writer, so changing
    __nilfs_mark_inode_dirty() to skip the operation when ns_writer is NULL
    will cause recovery write to fail.  The purpose of using the cleanup-only
    flag is to allow for narrowing of such conditions.
    
    Link: https://lkml.kernel.org/r/20230728191318.33047-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+74db8b3087f293d3a13a@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/000000000000b4e906060113fd63@google.com
    Fixes: 0ae45f63d4ef ("vfs: add support for a lazytime mount option")
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org> # 4.0+
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79a96970293befd066fd4dfed52c810a5777b286
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Thu Jul 27 17:09:30 2023 +0100

    radix tree test suite: fix incorrect allocation size for pthreads
    
    commit cac7ea57a06016e4914848b707477fb07ee4ae1c upstream.
    
    Currently the pthread allocation for each array item is based on the size
    of a pthread_t pointer and should be the size of the pthread_t structure,
    so the allocation is under-allocating the correct size.  Fix this by using
    the size of each element in the pthreads array.
    
    Static analysis cppcheck reported:
    tools/testing/radix-tree/regression1.c:180:2: warning: Size of pointer
    'threads' used instead of size of its data. [pointerSize]
    
    Link: https://lkml.kernel.org/r/20230727160930.632674-1-colin.i.king@gmail.com
    Fixes: 1366c37ed84b ("radix tree test harness")
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Cc: Konstantin Khlebnikov <koct9i@gmail.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0176533f5a398587fe2e42f0be7a78c4d12a987e
Author: Tao Ren <rentao.bupt@gmail.com>
Date:   Fri Aug 4 15:14:03 2023 -0700

    hwmon: (pmbus/bel-pfe) Enable PMBUS_SKIP_STATUS_CHECK for pfe1100
    
    commit f38963b9cd0645a336cf30c5da2e89e34e34fec3 upstream.
    
    Skip status check for both pfe1100 and pfe3000 because the communication
    error is also observed on pfe1100 devices.
    
    Signed-off-by: Tao Ren <rentao.bupt@gmail.com>
    Fixes: 626bb2f3fb3c hwmon: (pmbus) add driver for BEL PFE1100 and PFE3000
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230804221403.28931-1-rentao.bupt@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 088773aaafef55c21c855277bed84d8cef71abeb
Author: Maulik Shah <quic_mkshah@quicinc.com>
Date:   Mon Jul 3 14:25:53 2023 +0530

    cpuidle: dt_idle_genpd: Add helper function to remove genpd topology
    
    commit 9a8fa00dad3c7b260071f2f220cfb00505372c40 upstream.
    
    Genpd parent and child domain topology created using dt_idle_pd_init_topology()
    needs to be removed during error cases.
    
    Add new helper function dt_idle_pd_remove_topology() for same.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Ulf Hanssson <ulf.hansson@linaro.org>
    Signed-off-by: Maulik Shah <quic_mkshah@quicinc.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d3fd58bfca151028859cc23757191fa2f65f679
Author: Peichen Huang <peichen.huang@amd.com>
Date:   Wed May 31 13:36:14 2023 +0800

    drm/amd/display: limit DPIA link rate to HBR3
    
    commit 0e69ef6ea82e8eece7d2b2b45a0da9670eaaefff upstream.
    
    [Why]
    DPIA doesn't support UHBR, driver should not enable UHBR
    for dp tunneling
    
    [How]
    limit DPIA link rate to HBR3
    
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Signed-off-by: Peichen Huang <peichen.huang@amd.com>
    Reviewed-by: Mustapha Ghaddar <Mustapha.Ghaddar@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10347b115da1029f4a25b69129294b3854144d6a
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Thu Jul 27 10:22:20 2023 -0500

    drm/amd: Disable S/G for APUs when 64GB or more host memory
    
    commit 08fffa74d9772d9538338be3f304006c94dde6f0 upstream.
    
    Users report a white flickering screen on multiple systems that
    is tied to having 64GB or more memory.  When S/G is enabled pages
    will get pinned to both VRAM carve out and system RAM leading to
    this.
    
    Until it can be fixed properly, disable S/G when 64GB of memory or
    more is detected.  This will force pages to be pinned into VRAM.
    This should fix white screen flickers but if VRAM pressure is
    encountered may lead to black screens.  It's a trade-off for now.
    
    Fixes: 81d0bcf99009 ("drm/amdgpu: make display pinning more flexible (v2)")
    Cc: Hamza Mahfooz <Hamza.Mahfooz@amd.com>
    Cc: Roman Li <roman.li@amd.com>
    Cc: <stable@vger.kernel.org> # 6.1.y: bf0207e172703 ("drm/amdgpu: add S/G display parameter")
    Cc: <stable@vger.kernel.org> # 6.4.y
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2735
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2354
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6166ca452b8687322e6c1f8bac2395abc456aa4
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Feb 9 09:00:02 2023 -0500

    drm/amdgpu: add S/G display parameter
    
    commit bf0207e1727031798f300afa17f9bbeceac6da87 upstream.
    
    Some users have reported flickerng with S/G display.  We've
    tried extensively to reproduce and debug the issue on a wide
    variety of platform configurations (DRAM bandwidth, etc.) and
    a variety of monitors, but so far have not been able to.  We
    disabled S/G display on a number of platforms to address this
    but that leads to failure to pin framebuffers errors and
    blank displays when there is memory pressure or no displays
    at all on systems with limited carveout (e.g., Chromebooks).
    Add a option to disable this as a debugging option as a
    way for users to disable this, depending on their use case,
    and for us to help debug this further.
    
    v2: fix typo
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3d2d4b02e5e91b465ae85a19c05b00912f79620
Author: Melissa Wen <mwen@igalia.com>
Date:   Mon Jul 31 07:35:05 2023 -0100

    drm/amd/display: check attr flag before set cursor degamma on DCN3+
    
    commit 96b020e2163fb2197266b2f71b1007495206e6bb upstream.
    
    Don't set predefined degamma curve to cursor plane if the cursor
    attribute flag is not set. Applying a degamma curve to the cursor by
    default breaks userspace expectation. Checking the flag before
    performing any color transformation prevents too dark cursor gamma in
    DCN3+ on many Linux desktop environment (KDE Plasma, GNOME,
    wlroots-based, etc.) as reported at:
    - https://gitlab.freedesktop.org/drm/amd/-/issues/1513
    
    This is the same approach followed by DCN2 drivers where the issue is
    not present.
    
    Fixes: 03f54d7d3448 ("drm/amd/display: Add DCN3 DPP")
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/1513
    Signed-off-by: Melissa Wen <mwen@igalia.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Tested-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a2393af1f35d1975204fc00035c64a1c792b278
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Jul 28 11:14:05 2023 -0400

    drm/amdgpu: fix possible UAF in amdgpu_cs_pass1()
    
    commit 90e065677e0362a777b9db97ea21d43a39211399 upstream.
    
    Since the gang_size check is outside of chunk parsing
    loop, we need to reset i before we free the chunk data.
    
    Suggested by Ye Zhang (@VAR10CK) of Baidu Security.
    
    Reviewed-by: Guchun Chen <guchun.chen@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2322dd8c9d3d89319f222d90f0438a392dfcab9d
Author: Boris Brezillon <boris.brezillon@collabora.com>
Date:   Mon Jul 24 13:26:10 2023 +0200

    drm/shmem-helper: Reset vma->vm_ops before calling dma_buf_mmap()
    
    commit 07dd476f6116966cb2006e25fdcf48f0715115ff upstream.
    
    The dma-buf backend is supposed to provide its own vm_ops, but some
    implementation just have nothing special to do and leave vm_ops
    untouched, probably expecting this field to be zero initialized (this
    is the case with the system_heap implementation for instance).
    Let's reset vma->vm_ops to NULL to keep things working with these
    implementations.
    
    Fixes: 26d3ac3cb04d ("drm/shmem-helpers: Redirect mmap for imported dma-buf")
    Cc: <stable@vger.kernel.org>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reported-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Tested-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230724112610.60974-1-boris.brezillon@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a372c3f0db810f76fd65c237147827c7a80020ee
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Jul 28 18:58:57 2023 -0400

    drm/nouveau/nvkm/dp: Add workaround to fix DP 1.3+ DPCD issues
    
    commit e4060dad253352382b20420d8ef98daab24dbc17 upstream.
    
    Currently we use the drm_dp_dpcd_read_caps() helper in the DRM side of
    nouveau in order to read the DPCD of a DP connector, which makes sure we do
    the right thing and also check for extended DPCD caps. However, it turns
    out we're not currently doing this on the nvkm side since we don't have
    access to the drm_dp_aux structure there - which means that the DRM side of
    the driver and the NVKM side can end up with different DPCD capabilities
    for the same connector.
    
    Ideally in order to fix this, we just want to use the
    drm_dp_read_dpcd_caps() helper in nouveau. That's not currently possible
    though, and is going to depend on having a bunch of the DP code moved out
    of nvkm and into the DRM side of things as part of the GSP enablement work.
    
    Until then however, let's workaround this problem by porting a copy of
    drm_dp_read_dpcd_caps() into NVKM - which should fix this issue.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Link: https://gitlab.freedesktop.org/drm/nouveau/-/issues/211
    Link: https://patchwork.freedesktop.org/patch/msgid/20230728225858.350581-1-lyude@redhat.com
    (cherry picked from commit cc4adf3a7323212f303bc9ff0f96346c44fcba06 in drm-misc-next)
    Cc: <stable@vger.kernel.org> # 6.3+
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e179b058d720dfb76f8e35790fed2f0528f8a31e
Author: Karol Herbst <kherbst@redhat.com>
Date:   Thu Jun 22 17:20:17 2023 +0200

    drm/nouveau/gr: enable memory loads on helper invocation on all channels
    
    commit 1cb9e2ef66d53b020842b18762e30d0eb4384de8 upstream.
    
    We have a lurking bug where Fragment Shader Helper Invocations can't load
    from memory. But this is actually required in OpenGL and is causing random
    hangs or failures in random shaders.
    
    It is unknown how widespread this issue is, but shaders hitting this can
    end up with infinite loops.
    
    We enable those only on all Kepler and newer GPUs where we use our own
    Firmware.
    
    Nvidia's firmware provides a way to set a kernelspace controlled list of
    mmio registers in the gr space from push buffers via MME macros.
    
    v2: drop code for gm200 and newer.
    
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: David Airlie <airlied@gmail.com>
    Cc: nouveau@lists.freedesktop.org
    Cc: stable@vger.kernel.org # 4.19+
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Reviewed-by: Dave Airlie <airlied@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230622152017.2512101-1-kherbst@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56c79fcae6f344dccc2819384e451d76def35e7f
Author: August Wikerfors <git@augustwikerfors.se>
Date:   Wed Nov 16 18:17:27 2022 +0100

    nvme-pci: add NVME_QUIRK_BOGUS_NID for Samsung PM9B1 256G and 512G
    
    commit 688b419c57c13637d95d7879e165fff3dec581eb upstream.
    
    The Samsung PM9B1 512G SSD found in some Lenovo Yoga 7 14ARB7 laptop units
    reports eui as 0001000200030004 when resuming from s2idle, causing the
    device to be removed with this error in dmesg:
    
    nvme nvme0: identifiers changed for nsid 1
    
    To fix this, add a quirk to ignore namespace identifiers for this device.
    
    Signed-off-by: August Wikerfors <git@augustwikerfors.se>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fdaa7fbc81b3822a35c65996e3bb3d44a4768d3
Author: Torsten Duwe <duwe@suse.de>
Date:   Wed Jul 26 11:53:59 2023 +0200

    riscv/kexec: handle R_RISCV_CALL_PLT relocation type
    
    commit d0b4f95a51038becce4bdab4789aa7ce59d4ea6e upstream.
    
    R_RISCV_CALL has been deprecated and replaced by R_RISCV_CALL_PLT. See Enum
    18-19 in Table 3. Relocation types here:
    
    https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-elf.adoc
    
    It was deprecated in ("Deprecated R_RISCV_CALL, prefer R_RISCV_CALL_PLT"):
    
    https://github.com/riscv-non-isa/riscv-elf-psabi-doc/commit/a0dced85018d7a0ec17023c9389cbd70b1dbc1b0
    
    Recent tools (at least GNU binutils-2.40) already use R_RISCV_CALL_PLT.
    Kernels built with such binutils fail kexec_load_file(2) with:
    
     kexec_image: Unknown rela relocation: 19
     kexec_image: Error loading purgatory ret=-8
    
    The binary code at the call site remains the same, so tell
    arch_kexec_apply_relocations_add() to handle _PLT alike.
    
    Fixes: 838b3e28488f ("RISC-V: Load purgatory in kexec_file")
    Signed-off-by: Torsten Duwe <duwe@suse.de>
    Signed-off-by: Petr Tesarik <petr.tesarik.ext@huawei.com>
    Cc: Li Zhengyu <lizhengyu3@huawei.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/all/b046b164af8efd33bbdb7d4003273bdf9196a5b0.1690365011.git.petr.tesarik.ext@huawei.com/
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b374684018e4136c16d98dcaa46f65574d24af99
Author: Andrea Parri <parri.andrea@gmail.com>
Date:   Thu Aug 3 06:27:38 2023 +0200

    riscv,mmio: Fix readX()-to-delay() ordering
    
    commit 4eb2eb1b4c0eb07793c240744843498564a67b83 upstream.
    
    Section 2.1 of the Platform Specification [1] states:
    
      Unless otherwise specified by a given I/O device, I/O devices are on
      ordering channel 0 (i.e., they are point-to-point strongly ordered).
    
    which is not sufficient to guarantee that a readX() by a hart completes
    before a subsequent delay() on the same hart (cf. memory-barriers.txt,
    "Kernel I/O barrier effects").
    
    Set the I(nput) bit in __io_ar() to restore the ordering, align inline
    comments.
    
    [1] https://github.com/riscv/riscv-platform-specs
    
    Signed-off-by: Andrea Parri <parri.andrea@gmail.com>
    Link: https://lore.kernel.org/r/20230803042738.5937-1-parri.andrea@gmail.com
    Fixes: fab957c11efe ("RISC-V: Atomic and Locking Code")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98a34f50c15fa95c1a2264110518dec387c15889
Author: Torsten Duwe <duwe@suse.de>
Date:   Wed Jul 26 11:54:01 2023 +0200

    riscv/kexec: load initrd high in available memory
    
    commit 49af7a2cd5f678217b8b4f86a29411aebebf3e78 upstream.
    
    When initrd is loaded low, the secondary kernel fails like this:
    
     INITRD: 0xdc581000+0x00eef000 overlaps in-use memory region
    
    This initrd load address corresponds to the _end symbol, but the
    reservation is aligned on PMD_SIZE, as explained by a comment in
    setup_bootmem().
    
    It is technically possible to align the initrd load address accordingly,
    leaving a hole between the end of kernel and the initrd, but it is much
    simpler to allocate the initrd top-down.
    
    Fixes: 838b3e28488f ("RISC-V: Load purgatory in kexec_file")
    Signed-off-by: Torsten Duwe <duwe@suse.de>
    Signed-off-by: Petr Tesarik <petr.tesarik.ext@huawei.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/all/67c8eb9eea25717c2c8208d9bfbfaa39e6e2a1c6.1690365011.git.petr.tesarik.ext@huawei.com/
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 593615bf14c9122fab73d5773c4179a65cbbcbd4
Author: Souradeep Chakrabarti <schakrabarti@linux.microsoft.com>
Date:   Wed Aug 9 03:22:05 2023 -0700

    net: mana: Fix MANA VF unload when hardware is unresponsive
    
    commit a7dfeda6fdeccab4c7c3dce9a72c4262b9530c80 upstream.
    
    When unloading the MANA driver, mana_dealloc_queues() waits for the MANA
    hardware to complete any inflight packets and set the pending send count
    to zero. But if the hardware has failed, mana_dealloc_queues()
    could wait forever.
    
    Fix this by adding a timeout to the wait. Set the timeout to 120 seconds,
    which is a somewhat arbitrary value that is more than long enough for
    functional hardware to complete any sends.
    
    Cc: stable@vger.kernel.org
    Fixes: ca9c54d2d6a5 ("net: mana: Add a driver for Microsoft Azure Network Adapter (MANA)")
    Signed-off-by: Souradeep Chakrabarti <schakrabarti@linux.microsoft.com>
    Link: https://lore.kernel.org/r/1691576525-24271-1-git-send-email-schakrabarti@linux.microsoft.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aec1ce9a30d454b634a13cabd6a28a49cb5e3927
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Fri May 26 13:54:34 2023 +0300

    dmaengine: pl330: Return DMA_PAUSED when transaction is paused
    
    commit 8cda3ececf07d374774f6a13e5a94bc2dc04c26c upstream.
    
    pl330_pause() does not set anything to indicate paused condition which
    causes pl330_tx_status() to return DMA_IN_PROGRESS. This breaks 8250
    DMA flush after the fix in commit 57e9af7831dc ("serial: 8250_dma: Fix
    DMA Rx rearm race"). The function comment for pl330_pause() claims
    pause is supported but resume is not which is enough for 8250 DMA flush
    to work as long as DMA status reports DMA_PAUSED when appropriate.
    
    Add PAUSED state for descriptor and mark BUSY descriptors with PAUSED
    in pl330_pause(). Return DMA_PAUSED from pl330_tx_status() when the
    descriptor is PAUSED.
    
    Reported-by: Richard Tresidder <rtresidd@electromag.com.au>
    Tested-by: Richard Tresidder <rtresidd@electromag.com.au>
    Fixes: 88987d2c7534 ("dmaengine: pl330: add DMA_PAUSE feature")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-serial/f8a86ecd-64b1-573f-c2fa-59f541083f1a@electromag.com.au/
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20230526105434.14959-1-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ded9f5551ce5cafa3c41c794428c27a0d0a00542
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Aug 3 18:27:30 2023 +0200

    mptcp: fix disconnect vs accept race
    
    commit 511b90e39250135a7f900f1c3afbce25543018a2 upstream.
    
    Despite commit 0ad529d9fd2b ("mptcp: fix possible divide by zero in
    recvmsg()"), the mptcp protocol is still prone to a race between
    disconnect() (or shutdown) and accept.
    
    The root cause is that the mentioned commit checks the msk-level
    flag, but mptcp_stream_accept() does acquire the msk-level lock,
    as it can rely directly on the first subflow lock.
    
    As reported by Christoph than can lead to a race where an msk
    socket is accepted after that mptcp_subflow_queue_clean() releases
    the listener socket lock and just before it takes destructive
    actions leading to the following splat:
    
    BUG: kernel NULL pointer dereference, address: 0000000000000012
    PGD 5a4ca067 P4D 5a4ca067 PUD 37d4c067 PMD 0
    Oops: 0000 [#1] PREEMPT SMP
    CPU: 2 PID: 10955 Comm: syz-executor.5 Not tainted 6.5.0-rc1-gdc7b257ee5dd #37
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
    RIP: 0010:mptcp_stream_accept+0x1ee/0x2f0 include/net/inet_sock.h:330
    Code: 0a 09 00 48 8b 1b 4c 39 e3 74 07 e8 bc 7c 7f fe eb a1 e8 b5 7c 7f fe 4c 8b 6c 24 08 eb 05 e8 a9 7c 7f fe 49 8b 85 d8 09 00 00 <0f> b6 40 12 88 44 24 07 0f b6 6c 24 07 bf 07 00 00 00 89 ee e8 89
    RSP: 0018:ffffc90000d07dc0 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff888037e8d020 RCX: ffff88803b093300
    RDX: 0000000000000000 RSI: ffffffff833822c5 RDI: ffffffff8333896a
    RBP: 0000607f82031520 R08: ffff88803b093300 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000003e83 R12: ffff888037e8d020
    R13: ffff888037e8c680 R14: ffff888009af7900 R15: ffff888009af6880
    FS:  00007fc26d708640(0000) GS:ffff88807dd00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000012 CR3: 0000000066bc5001 CR4: 0000000000370ee0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     do_accept+0x1ae/0x260 net/socket.c:1872
     __sys_accept4+0x9b/0x110 net/socket.c:1913
     __do_sys_accept4 net/socket.c:1954 [inline]
     __se_sys_accept4 net/socket.c:1951 [inline]
     __x64_sys_accept4+0x20/0x30 net/socket.c:1951
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x47/0xa0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x6e/0xd8
    
    Address the issue by temporary removing the pending request socket
    from the accept queue, so that racing accept() can't touch them.
    
    After depleting the msk - the ssk still exists, as plain TCP sockets,
    re-insert them into the accept queue, so that later inet_csk_listen_stop()
    will complete the tcp socket disposal.
    
    Fixes: 2a6a870e44dd ("mptcp: stops worker on unaccepted sockets at listener close")
    Cc: stable@vger.kernel.org
    Reported-by: Christoph Paasch <cpaasch@apple.com>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/423
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Link: https://lore.kernel.org/r/20230803-upstream-net-20230803-misc-fixes-6-5-v1-4-6671b1ab11cc@tessares.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84aa65a5256154591a84f294e60c4622354ca905
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Aug 3 18:27:29 2023 +0200

    mptcp: avoid bogus reset on fallback close
    
    commit ff18f9ef30ee87740f741b964375d0cfb84e1ec2 upstream.
    
    Since the blamed commit, the MPTCP protocol unconditionally sends
    TCP resets on all the subflows on disconnect().
    
    That fits full-blown MPTCP sockets - to implement the fastclose
    mechanism - but causes unexpected corruption of the data stream,
    caught as sporadic self-tests failures.
    
    Fixes: d21f83485518 ("mptcp: use fastclose on more edge scenarios")
    Cc: stable@vger.kernel.org
    Tested-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/419
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Link: https://lore.kernel.org/r/20230803-upstream-net-20230803-misc-fixes-6-5-v1-3-6671b1ab11cc@tessares.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d143c736020f8e0c06c1bda91da3ded50b0964ae
Author: Andrea Claudi <aclaudi@redhat.com>
Date:   Thu Aug 3 18:27:28 2023 +0200

    selftests: mptcp: join: fix 'implicit EP' test
    
    commit c8c101ae390a3e817369e94a6f12a1ddea420702 upstream.
    
    mptcp_join 'implicit EP' test currently fails when using ip mptcp:
    
      $ ./mptcp_join.sh -iI
      <snip>
      001 implicit EP    creation[fail] expected '10.0.2.2 10.0.2.2 id 1 implicit' found '10.0.2.2 id 1 rawflags 10 '
      Error: too many addresses or duplicate one: -22.
                         ID change is prevented[fail] expected '10.0.2.2 10.0.2.2 id 1 implicit' found '10.0.2.2 id 1 rawflags 10 '
                         modif is allowed[fail] expected '10.0.2.2 10.0.2.2 id 1 signal' found '10.0.2.2 id 1 signal '
    
    This happens because of two reasons:
    - iproute v6.3.0 does not support the implicit flag, fixed with
      iproute2-next commit 3a2535a41854 ("mptcp: add support for implicit
      flag")
    - pm_nl_check_endpoint wrongly expects the ip address to be repeated two
      times in iproute output, and does not account for a final whitespace
      in it.
    
    This fixes the issue trimming the whitespace in the output string and
    removing the double address in the expected string.
    
    Fixes: 69c6ce7b6eca ("selftests: mptcp: add implicit endpoint test case")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrea Claudi <aclaudi@redhat.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Link: https://lore.kernel.org/r/20230803-upstream-net-20230803-misc-fixes-6-5-v1-2-6671b1ab11cc@tessares.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aae988c0965061a9a4a2b1ee25529778c1a03fab
Author: Andrea Claudi <aclaudi@redhat.com>
Date:   Thu Aug 3 18:27:27 2023 +0200

    selftests: mptcp: join: fix 'delete and re-add' test
    
    commit aaf2123a5cf46dbd97f84b6eee80269758064d93 upstream.
    
    mptcp_join 'delete and re-add' test fails when using ip mptcp:
    
      $ ./mptcp_join.sh -iI
      <snip>
      002 delete and re-add                    before delete[ ok ]
                                               mptcp_info subflows=1         [ ok ]
      Error: argument "ADDRESS" is wrong: invalid for non-zero id address
                                               after delete[fail] got 2:2 subflows expected 1
    
    This happens because endpoint delete includes an ip address while id is
    not 0, contrary to what is indicated in the ip mptcp man page:
    
    "When used with the delete id operation, an IFADDR is only included when
    the ID is 0."
    
    This fixes the issue using the $addr variable in pm_nl_del_endpoint()
    only when id is 0.
    
    Fixes: 34aa6e3bccd8 ("selftests: mptcp: add ip mptcp wrappers")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrea Claudi <aclaudi@redhat.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Link: https://lore.kernel.org/r/20230803-upstream-net-20230803-misc-fixes-6-5-v1-1-6671b1ab11cc@tessares.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a537fd9096a1d50e5e7c6a3e6dff376049b497af
Author: Maciej Żenczykowski <maze@google.com>
Date:   Mon Aug 7 03:25:32 2023 -0700

    ipv6: adjust ndisc_is_useropt() to also return true for PIO
    
    commit 048c796beb6eb4fa3a5a647ee1c81f5c6f0f6a2a upstream.
    
    The upcoming (and nearly finalized):
      https://datatracker.ietf.org/doc/draft-collink-6man-pio-pflag/
    will update the IPv6 RA to include a new flag in the PIO field,
    which will serve as a hint to perform DHCPv6-PD.
    
    As we don't want DHCPv6 related logic inside the kernel, this piece of
    information needs to be exposed to userspace.  The simplest option is to
    simply expose the entire PIO through the already existing mechanism.
    
    Even without this new flag, the already existing PIO R (router address)
    flag (from RFC6275) cannot AFAICT be handled entirely in kernel,
    and provides useful information that should be exposed to userspace
    (the router's global address, for use by Mobile IPv6).
    
    Also cc'ing stable@ for inclusion in LTS, as while technically this is
    not quite a bugfix, and instead more of a feature, it is absolutely
    trivial and the alternative is manually cherrypicking into all Android
    Common Kernel trees - and I know Greg will ask for it to be sent in via
    LTS instead...
    
    Cc: Jen Linkova <furry@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: YOSHIFUJI Hideaki / 吉藤英明 <yoshfuji@linux-ipv6.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Link: https://lore.kernel.org/r/20230807102533.1147559-1-maze@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ecab78febff07e57b7546c7b58687596d8b08088
Author: Sergei Antonov <saproj@gmail.com>
Date:   Tue Jun 27 15:05:49 2023 +0300

    mmc: moxart: read scr register without changing byte order
    
    commit d44263222134b5635932974c6177a5cba65a07e8 upstream.
    
    Conversion from big-endian to native is done in a common function
    mmc_app_send_scr(). Converting in moxart_transfer_pio() is extra.
    Double conversion on a LE system returns an incorrect SCR value,
    leads to errors:
    
    mmc0: unrecognised SCR structure version 8
    
    Fixes: 1b66e94e6b99 ("mmc: moxart: Add MOXA ART SD/MMC driver")
    Signed-off-by: Sergei Antonov <saproj@gmail.com>
    Cc: Jonas Jensen <jonas.jensen@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230627120549.2400325-1-saproj@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 260ec73757c1361a61caa83545b0e2165cd64e34
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Aug 7 15:21:27 2023 +0200

    wireguard: allowedips: expand maximum node depth
    
    commit 46622219aae2b67813fe31a7b8cb7da5baff5c8a upstream.
    
    In the allowedips self-test, nodes are inserted into the tree, but it
    generated an even amount of nodes, but for checking maximum node depth,
    there is of course the root node, which makes the total number
    necessarily odd. With two few nodes added, it never triggered the
    maximum depth check like it should have. So, add 129 nodes instead of
    128 nodes, and do so with a more straightforward scheme, starting with
    all the bits set, and shifting over one each time. Then increase the
    maximum depth to 129, and choose a better name for that variable to
    make it clear that it represents depth as opposed to bits.
    
    Cc: stable@vger.kernel.org
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Link: https://lore.kernel.org/r/20230807132146.2191597-2-Jason@zx2c4.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 839aae189e1ff6791e4f5a9a47bcbe5e6543c804
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Aug 8 17:14:51 2023 +0300

    selftests: forwarding: Set default IPv6 traceroute utility
    
    commit 38f7c44d6e760a8513557e27340d61b820c91b8f upstream.
    
    The test uses the 'TROUTE6' environment variable to encode the name of
    the IPv6 traceroute utility. By default (without a configuration file),
    this variable is not set, resulting in failures:
    
     # ./ip6_forward_instats_vrf.sh
     TEST: ping6                                                         [ OK ]
     TEST: Ip6InTooBigErrors                                             [ OK ]
     TEST: Ip6InHdrErrors                                                [FAIL]
     TEST: Ip6InAddrErrors                                               [ OK ]
     TEST: Ip6InDiscards                                                 [ OK ]
    
    Fix by setting a default utility name and skip the test if the utility
    is not present.
    
    Fixes: 0857d6f8c759 ("ipv6: When forwarding count rx stats on the orig netdev")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Closes: https://lore.kernel.org/netdev/adc5e40d-d040-a65e-eb26-edf47dac5b02@alu.unizg.hr/
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230808141503.4060661-6-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa4b5895a80fcbd1729b248870b80f9d89ce416e
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Tue Aug 8 08:54:26 2023 +0800

    wifi: rtw89: fix 8852AE disconnection caused by RX full flags
    
    commit b74bb07cdab6859e1a3fc9fe7351052176322ddf upstream.
    
    RX full flags are raised if certain types of RX FIFO are full, and then
    drop all following MPDU of AMPDU. In order to resume to receive MPDU
    when RX FIFO becomes available, we clear the register bits by the
    commit a0d99ebb3ecd ("wifi: rtw89: initialize DMA of CMAC"). But, 8852AE
    needs more settings to support this. To quickly fix disconnection problem,
    revert the behavior as before.
    
    Fixes: a0d99ebb3ecd ("wifi: rtw89: initialize DMA of CMAC")
    Reported-by: Damian B <bronecki.damian@gmail.com>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217710
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Tested-by: Damian B <bronecki.damian@gmail.com>
    Link: https://lore.kernel.org/r/20230808005426.5327-1-pkshih@realtek.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e642eb67b8c10dcce758d549cc81564116e0fa49
Author: Keith Yeo <keithyjy@gmail.com>
Date:   Mon Jul 31 11:47:20 2023 +0800

    wifi: nl80211: fix integer overflow in nl80211_parse_mbssid_elems()
    
    commit 6311071a056272e1e761de8d0305e87cc566f734 upstream.
    
    nl80211_parse_mbssid_elems() uses a u8 variable num_elems to count the
    number of MBSSID elements in the nested netlink attribute attrs, which can
    lead to an integer overflow if a user of the nl80211 interface specifies
    256 or more elements in the corresponding attribute in userspace. The
    integer overflow can lead to a heap buffer overflow as num_elems determines
    the size of the trailing array in elems, and this array is thereafter
    written to for each element in attrs.
    
    Note that this vulnerability only affects devices with the
    wiphy->mbssid_max_interfaces member set for the wireless physical device
    struct in the device driver, and can only be triggered by a process with
    CAP_NET_ADMIN capabilities.
    
    Fix this by checking for a maximum of 255 elements in attrs.
    
    Cc: stable@vger.kernel.org
    Fixes: dc1e3cb8da8b ("nl80211: MBSSID and EMA support in AP mode")
    Signed-off-by: Keith Yeo <keithyjy@gmail.com>
    Link: https://lore.kernel.org/r/20230731034719.77206-1-keithyjy@gmail.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bdf1c1f346c81996b6e36b5efd5c92aeda4fbe4
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Aug 4 12:56:36 2023 -0400

    KVM: SEV: only access GHCB fields once
    
    commit 7588dbcebcbf0193ab5b76987396d0254270b04a upstream.
    
    A KVM guest using SEV-ES or SEV-SNP with multiple vCPUs can trigger
    a double fetch race condition vulnerability and invoke the VMGEXIT
    handler recursively.
    
    sev_handle_vmgexit() maps the GHCB page using kvm_vcpu_map() and then
    fetches the exit code using ghcb_get_sw_exit_code().  Soon after,
    sev_es_validate_vmgexit() fetches the exit code again. Since the GHCB
    page is shared with the guest, the guest is able to quickly swap the
    values with another vCPU and hence bypass the validation. One vmexit code
    that can be rejected by sev_es_validate_vmgexit() is SVM_EXIT_VMGEXIT;
    if sev_handle_vmgexit() observes it in the second fetch, the call
    to svm_invoke_exit_handler() will invoke sev_handle_vmgexit() again
    recursively.
    
    To avoid the race, always fetch the GHCB data from the places where
    sev_es_sync_from_ghcb stores it.
    
    Exploiting recursions on linux kernel has been proven feasible
    in the past, but the impact is mitigated by stack guard pages
    (CONFIG_VMAP_STACK).  Still, if an attacker manages to call the handler
    multiple times, they can theoretically trigger a stack overflow and
    cause a denial-of-service, or potentially guest-to-host escape in kernel
    configurations without stack guard pages.
    
    Note that winning the race reliably in every iteration is very tricky
    due to the very tight window of the fetches; depending on the compiler
    settings, they are often consecutive because of optimization and inlining.
    
    Tested by booting an SEV-ES RHEL9 guest.
    
    Fixes: CVE-2023-4155
    Fixes: 291bd20d5d88 ("KVM: SVM: Add initial support for a VMGEXIT VMEXIT")
    Cc: stable@vger.kernel.org
    Reported-by: Andy Nguyen <theflow@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec18273e41d9f97a3db47ce8f42019625da646be
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Aug 4 12:42:45 2023 -0400

    KVM: SEV: snapshot the GHCB before accessing it
    
    commit 4e15a0ddc3ff40e8ea84032213976ecf774d7f77 upstream.
    
    Validation of the GHCB is susceptible to time-of-check/time-of-use vulnerabilities.
    To avoid them, we would like to always snapshot the fields that are read in
    sev_es_validate_vmgexit(), and not use the GHCB anymore after it returns.
    
    This means:
    
    - invoking sev_es_sync_from_ghcb() before any GHCB access, including before
      sev_es_validate_vmgexit()
    
    - snapshotting all fields including the valid bitmap and the sw_scratch field,
      which are currently not caching anywhere.
    
    The valid bitmap is the first thing to be copied out of the GHCB; then,
    further accesses will use the copy in svm->sev_es.
    
    Fixes: 291bd20d5d88 ("KVM: SVM: Add initial support for a VMGEXIT VMEXIT")
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f339d76a3a972601d0738b881b099d49ebbdc3a2
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Sun Aug 6 08:44:17 2023 +0900

    ksmbd: fix wrong next length validation of ea buffer in smb2_set_ea()
    
    commit 79ed288cef201f1f212dfb934bcaac75572fb8f6 upstream.
    
    There are multiple smb2_ea_info buffers in FILE_FULL_EA_INFORMATION request
    from client. ksmbd find next smb2_ea_info using ->NextEntryOffset of
    current smb2_ea_info. ksmbd need to validate buffer length Before
    accessing the next ea. ksmbd should check buffer length using buf_len,
    not next variable. next is the start offset of current ea that got from
    previous ea.
    
    Cc: stable@vger.kernel.org
    Reported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-21598
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6bef3bc30fd4a175aef846b7d928a6c40d091cd
Author: Long Li <leo.lilong@huawei.com>
Date:   Sat Jul 29 11:36:18 2023 +0800

    ksmbd: validate command request size
    
    commit 5aa4fda5aa9c2a5a7bac67b4a12b089ab81fee3c upstream.
    
    In commit 2b9b8f3b68ed ("ksmbd: validate command payload size"), except
    for SMB2_OPLOCK_BREAK_HE command, the request size of other commands
    is not checked, it's not expected. Fix it by add check for request
    size of other commands.
    
    Cc: stable@vger.kernel.org
    Fixes: 2b9b8f3b68ed ("ksmbd: validate command payload size")
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Long Li <leo.lilong@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccb1700ed60653d99bce29f3b62091e7c14858e3
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Mon Aug 7 23:12:29 2023 -0500

    tpm: Add a helper for checking hwrng enabled
    
    commit cacc6e22932f373a91d7be55a9b992dc77f4c59b upstream.
    
    The same checks are repeated in three places to decide whether to use
    hwrng.  Consolidate these into a helper.
    
    Also this fixes a case that one of them was missing a check in the
    cleanup path.
    
    Fixes: 554b841d4703 ("tpm: Disable RNG for all AMD fTPMs")
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8a7d6136cbf57738e7984b0c4f216cfd2ffbe6e
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Aug 2 07:25:33 2023 -0500

    tpm: Disable RNG for all AMD fTPMs
    
    commit 554b841d470338a3b1d6335b14ee1cd0c8f5d754 upstream.
    
    The TPM RNG functionality is not necessary for entropy when the CPU
    already supports the RDRAND instruction. The TPM RNG functionality
    was previously disabled on a subset of AMD fTPM series, but reports
    continue to show problems on some systems causing stutter root caused
    to TPM RNG functionality.
    
    Expand disabling TPM RNG use for all AMD fTPMs whether they have versions
    that claim to have fixed or not. To accomplish this, move the detection
    into part of the TPM CRB registration and add a flag indicating that
    the TPM should opt-out of registration to hwrng.
    
    Cc: stable@vger.kernel.org # 6.1.y+
    Fixes: b006c439d58d ("hwrng: core - start hwrng kthread also for untrusted sources")
    Fixes: f1324bbc4011 ("tpm: disable hwrng for fTPM on some AMD designs")
    Reported-by: daniil.stas@posteo.net
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217719
    Reported-by: bitlord0xff@gmail.com
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217212
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed2f8701fb9b176b9136140452cfedfb352598b7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 11 16:26:20 2023 +0200

    Revert "loongarch/cpu: Switch to arch_cpu_finalize_init()"
    
    This reverts commit 08e86d42e2c916e362d124e3bc6c824eb1862498 which is
    commit 9841c423164787feb8f1442f922b7d80a70c82f1 upstream.
    
    As Gunter reports:
            Building loongarch:defconfig ... failed
            --------------
            Error log:
            <stdin>:569:2: warning: #warning syscall fstat not implemented [-Wcpp]
            arch/loongarch/kernel/setup.c: In function 'arch_cpu_finalize_init':
            arch/loongarch/kernel/setup.c:86:9: error: implicit declaration of function 'alternative_instructions'
    
            Actually introduced in v6.1.44 with commit 08e86d42e2c9 ("loongarch/cpu:
            Switch to arch_cpu_finalize_init()"). Alternative instruction support
            was only introduced for loongarch in v6.2 with commit 19e5eb15b00c
            ("LoongArch: Add alternative runtime patching mechanism").
    
    So revert it from 6.1.y.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/fcd7b764-9047-22ba-a040-41b6ff99959c@roeck-us.net
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Sneddon <daniel.sneddon@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65383fe06065bea6b40a6e1f309d6a763a7d6357
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Jan 18 12:21:35 2023 -0800

    gcc-plugins: Reorganize gimple includes for GCC 13
    
    commit e6a71160cc145e18ab45195abf89884112e02dfb upstream.
    
    The gimple-iterator.h header must be included before gimple-fold.h
    starting with GCC 13. Reorganize gimple headers to work for all GCC
    versions.
    
    Reported-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Link: https://lore.kernel.org/all/20230113173033.4380-1-palmer@rivosinc.com/
    Cc: linux-hardening@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

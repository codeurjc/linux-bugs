commit 90c7e9b400c751dbd73885f494f421f90ca69721
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Sep 28 11:11:58 2022 +0200

    Linux 5.15.71
    
    Link: https://lore.kernel.org/r/20220926100756.074519146@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20220926163551.791017156@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Kelsey Steele <kelseysteele@linux.microsoft.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 214194610a18477146588eeb2c8e120fdea21150
Author: Jan Kara <jack@suse.cz>
Date:   Thu Sep 8 11:21:27 2022 +0200

    ext4: use locality group preallocation for small closed files
    
    commit a9f2a2931d0e197ab28c6007966053fdababd53f upstream.
    
    Curently we don't use any preallocation when a file is already closed
    when allocating blocks (from writeback code when converting delayed
    allocation). However for small files, using locality group preallocation
    is actually desirable as that is not specific to a particular file.
    Rather it is a method to pack small files together to reduce
    fragmentation and for that the fact the file is closed is actually even
    stronger hint the file would benefit from packing. So change the logic
    to allow locality group preallocation in this case.
    
    Fixes: 196e402adf2e ("ext4: improve cr 0 / cr 1 group scanning")
    CC: stable@kernel.org
    Reported-and-tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Tested-by: Ojaswin Mujoo <ojaswin@linux.ibm.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/all/0d81a7c2-46b7-6010-62a4-3e6cfc1628d6@i2se.com/
    Link: https://lore.kernel.org/r/20220908092136.11770-4-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a1ac4167dda820686d1a0e50e51bd01e1f3d25c
Author: Jan Kara <jack@suse.cz>
Date:   Thu Sep 8 11:21:25 2022 +0200

    ext4: avoid unnecessary spreading of allocations among groups
    
    commit 1940265ede6683f6317cba0d428ce6505eaca944 upstream.
    
    mb_set_largest_free_order() updates lists containing groups with largest
    chunk of free space of given order. The way it updates it leads to
    always moving the group to the tail of the list. Thus allocations
    looking for free space of given order effectively end up cycling through
    all groups (and due to initialization in last to first order). This
    spreads allocations among block groups which reduces performance for
    rotating disks or low-end flash media. Change
    mb_set_largest_free_order() to only update lists if the order of the
    largest free chunk in the group changed.
    
    Fixes: 196e402adf2e ("ext4: improve cr 0 / cr 1 group scanning")
    CC: stable@kernel.org
    Reported-and-tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Tested-by: Ojaswin Mujoo <ojaswin@linux.ibm.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/all/0d81a7c2-46b7-6010-62a4-3e6cfc1628d6@i2se.com/
    Link: https://lore.kernel.org/r/20220908092136.11770-2-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd8b829195495a0b3d6b3cc88c3b77f2c9c115e4
Author: Jan Kara <jack@suse.cz>
Date:   Thu Sep 8 11:21:24 2022 +0200

    ext4: make mballoc try target group first even with mb_optimize_scan
    
    commit 4fca50d440cc5d4dc570ad5484cc0b70b381bc2a upstream.
    
    One of the side-effects of mb_optimize_scan was that the optimized
    functions to select next group to try were called even before we tried
    the goal group. As a result we no longer allocate files close to
    corresponding inodes as well as we don't try to expand currently
    allocated extent in the same group. This results in reaim regression
    with workfile.disk workload of upto 8% with many clients on my test
    machine:
    
                         baseline               mb_optimize_scan
    Hmean     disk-1       2114.16 (   0.00%)     2099.37 (  -0.70%)
    Hmean     disk-41     87794.43 (   0.00%)    83787.47 *  -4.56%*
    Hmean     disk-81    148170.73 (   0.00%)   135527.05 *  -8.53%*
    Hmean     disk-121   177506.11 (   0.00%)   166284.93 *  -6.32%*
    Hmean     disk-161   220951.51 (   0.00%)   207563.39 *  -6.06%*
    Hmean     disk-201   208722.74 (   0.00%)   203235.59 (  -2.63%)
    Hmean     disk-241   222051.60 (   0.00%)   217705.51 (  -1.96%)
    Hmean     disk-281   252244.17 (   0.00%)   241132.72 *  -4.41%*
    Hmean     disk-321   255844.84 (   0.00%)   245412.84 *  -4.08%*
    
    Also this is causing huge regression (time increased by a factor of 5 or
    so) when untarring archive with lots of small files on some eMMC storage
    cards.
    
    Fix the problem by making sure we try goal group first.
    
    Fixes: 196e402adf2e ("ext4: improve cr 0 / cr 1 group scanning")
    CC: stable@kernel.org
    Reported-and-tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Tested-by: Ojaswin Mujoo <ojaswin@linux.ibm.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/all/20220727105123.ckwrhbilzrxqpt24@quack3/
    Link: https://lore.kernel.org/all/0d81a7c2-46b7-6010-62a4-3e6cfc1628d6@i2se.com/
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220908092136.11770-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21dada4ce19c841ec2f4c456e8c9c82c9320a761
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Sep 1 18:03:14 2022 -0400

    ext4: limit the number of retries after discarding preallocations blocks
    
    commit 80fa46d6b9e7b1527bfd2197d75431fd9c382161 upstream.
    
    This patch avoids threads live-locking for hours when a large number
    threads are competing over the last few free extents as they blocks
    getting added and removed from preallocation pools.  From our bug
    reporter:
    
       A reliable way for triggering this has multiple writers
       continuously write() to files when the filesystem is full, while
       small amounts of space are freed (e.g. by truncating a large file
       -1MiB at a time). In the local filesystem, this can be done by
       simply not checking the return code of write (0) and/or the error
       (ENOSPACE) that is set. Over NFS with an async mount, even clients
       with proper error checking will behave this way since the linux NFS
       client implementation will not propagate the server errors [the
       write syscalls immediately return success] until the file handle is
       closed. This leads to a situation where NFS clients send a
       continuous stream of WRITE rpcs which result in ERRNOSPACE -- but
       since the client isn't seeing this, the stream of writes continues
       at maximum network speed.
    
       When some space does appear, multiple writers will all attempt to
       claim it for their current write. For NFS, we may see dozens to
       hundreds of threads that do this.
    
       The real-world scenario of this is database backup tooling (in
       particular, github.com/mdkent/percona-xtrabackup) which may write
       large files (>1TiB) to NFS for safe keeping. Some temporary files
       are written, rewound, and read back -- all before closing the file
       handle (the temp file is actually unlinked, to trigger automatic
       deletion on close/crash.) An application like this operating on an
       async NFS mount will not see an error code until TiB have been
       written/read.
    
       The lockup was observed when running this database backup on large
       filesystems (64 TiB in this case) with a high number of block
       groups and no free space. Fragmentation is generally not a factor
       in this filesystem (~thousands of large files, mostly contiguous
       except for the parts written while the filesystem is at capacity.)
    
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be4df018c0be5ebecf1ca510feacc23be415cefc
Author: Lu√≠s Henriques <lhenriques@suse.de>
Date:   Mon Aug 22 10:42:35 2022 +0100

    ext4: fix bug in extents parsing when eh_entries == 0 and eh_depth > 0
    
    commit 29a5b8a137ac8eb410cc823653a29ac0e7b7e1b0 upstream.
    
    When walking through an inode extents, the ext4_ext_binsearch_idx() function
    assumes that the extent header has been previously validated.  However, there
    are no checks that verify that the number of entries (eh->eh_entries) is
    non-zero when depth is > 0.  And this will lead to problems because the
    EXT_FIRST_INDEX() and EXT_LAST_INDEX() will return garbage and result in this:
    
    [  135.245946] ------------[ cut here ]------------
    [  135.247579] kernel BUG at fs/ext4/extents.c:2258!
    [  135.249045] invalid opcode: 0000 [#1] PREEMPT SMP
    [  135.250320] CPU: 2 PID: 238 Comm: tmp118 Not tainted 5.19.0-rc8+ #4
    [  135.252067] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.15.0-0-g2dd4b9b-rebuilt.opensuse.org 04/01/2014
    [  135.255065] RIP: 0010:ext4_ext_map_blocks+0xc20/0xcb0
    [  135.256475] Code:
    [  135.261433] RSP: 0018:ffffc900005939f8 EFLAGS: 00010246
    [  135.262847] RAX: 0000000000000024 RBX: ffffc90000593b70 RCX: 0000000000000023
    [  135.264765] RDX: ffff8880038e5f10 RSI: 0000000000000003 RDI: ffff8880046e922c
    [  135.266670] RBP: ffff8880046e9348 R08: 0000000000000001 R09: ffff888002ca580c
    [  135.268576] R10: 0000000000002602 R11: 0000000000000000 R12: 0000000000000024
    [  135.270477] R13: 0000000000000000 R14: 0000000000000024 R15: 0000000000000000
    [  135.272394] FS:  00007fdabdc56740(0000) GS:ffff88807dd00000(0000) knlGS:0000000000000000
    [  135.274510] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  135.276075] CR2: 00007ffc26bd4f00 CR3: 0000000006261004 CR4: 0000000000170ea0
    [  135.277952] Call Trace:
    [  135.278635]  <TASK>
    [  135.279247]  ? preempt_count_add+0x6d/0xa0
    [  135.280358]  ? percpu_counter_add_batch+0x55/0xb0
    [  135.281612]  ? _raw_read_unlock+0x18/0x30
    [  135.282704]  ext4_map_blocks+0x294/0x5a0
    [  135.283745]  ? xa_load+0x6f/0xa0
    [  135.284562]  ext4_mpage_readpages+0x3d6/0x770
    [  135.285646]  read_pages+0x67/0x1d0
    [  135.286492]  ? folio_add_lru+0x51/0x80
    [  135.287441]  page_cache_ra_unbounded+0x124/0x170
    [  135.288510]  filemap_get_pages+0x23d/0x5a0
    [  135.289457]  ? path_openat+0xa72/0xdd0
    [  135.290332]  filemap_read+0xbf/0x300
    [  135.291158]  ? _raw_spin_lock_irqsave+0x17/0x40
    [  135.292192]  new_sync_read+0x103/0x170
    [  135.293014]  vfs_read+0x15d/0x180
    [  135.293745]  ksys_read+0xa1/0xe0
    [  135.294461]  do_syscall_64+0x3c/0x80
    [  135.295284]  entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    This patch simply adds an extra check in __ext4_ext_check(), verifying that
    eh_entries is not 0 when eh_depth is > 0.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215941
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216283
    Cc: Baokun Li <libaokun1@huawei.com>
    Cc: stable@kernel.org
    Signed-off-by: Lu√≠s Henriques <lhenriques@suse.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Baokun Li <libaokun1@huawei.com>
    Link: https://lore.kernel.org/r/20220822094235.2690-1-lhenriques@suse.de
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90bc7b630c6c0c710b4abd1cd6da62498f28a4e5
Author: Jan Kara <jack@suse.cz>
Date:   Thu Sep 8 11:21:26 2022 +0200

    ext4: make directory inode spreading reflect flexbg size
    
    commit 613c5a85898d1cd44e68f28d65eccf64a8ace9cf upstream.
    
    Currently the Orlov inode allocator searches for free inodes for a
    directory only in flex block groups with at most inodes_per_group/16
    more directory inodes than average per flex block group. However with
    growing size of flex block group this becomes unnecessarily strict.
    Scale allowed difference from average directory count per flex block
    group with flex block group size as we do with other metrics.
    
    Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Tested-by: Ojaswin Mujoo <ojaswin@linux.ibm.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/all/0d81a7c2-46b7-6010-62a4-3e6cfc1628d6@i2se.com/
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220908092136.11770-3-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95d714d8ad3d2626939b9c1fd06f11c545c952ef
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Sep 23 15:05:56 2022 -0700

    devdax: Fix soft-reservation memory description
    
    commit 67feaba413ec68daf4124e9870878899b4ed9a0e upstream.
    
    The "hmem" platform-devices that are created to represent the
    platform-advertised "Soft Reserved" memory ranges end up inserting a
    resource that causes the iomem_resource tree to look like this:
    
    340000000-43fffffff : hmem.0
      340000000-43fffffff : Soft Reserved
        340000000-43fffffff : dax0.0
    
    This is because insert_resource() reparents ranges when they completely
    intersect an existing range.
    
    This matters because code that uses region_intersects() to scan for a
    given IORES_DESC will only check that top-level 'hmem.0' resource and
    not the 'Soft Reserved' descendant.
    
    So, to support EINJ (via einj_error_inject()) to inject errors into
    memory hosted by a dax-device, be sure to describe the memory as
    IORES_DESC_SOFT_RESERVED. This is a follow-on to:
    
    commit b13a3e5fd40b ("ACPI: APEI: Fix _EINJ vs EFI_MEMORY_SP")
    
    ...that fixed EINJ support for "Soft Reserved" ranges in the first
    instance.
    
    Fixes: 262b45ae3ab4 ("x86/efi: EFI soft reservation to E820 enumeration")
    Reported-by: Ricardo Sandoval Torres <ricardo.sandoval.torres@intel.com>
    Tested-by: Ricardo Sandoval Torres <ricardo.sandoval.torres@intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Omar Avelar <omar.avelar@intel.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Mark Gross <markgross@kernel.org>
    Link: https://lore.kernel.org/r/166397075670.389916.7435722208896316387.stgit@dwillia2-xfh.jf.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27bf7a5d11987dae35651b478e6f7f2c276b9dc4
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 10 10:58:12 2021 +0200

    NFSv4: Fixes for nfs4_inode_return_delegation()
    
    commit 6e176d47160cec8bcaa28d9aa06926d72d54237c upstream.
    
    We mustn't call nfs_wb_all() on anything other than a regular file.
    Furthermore, we can exit early when we don't hold a delegation.
    
    Reported-by: David Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: Thorsten Leemhuis <regressions@leemhuis.info>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21b0301f2234112fbe5cfc1e13968f0a12f0f2d2
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Sep 19 12:26:20 2022 -0400

    drm/amdgpu: don't register a dirty callback for non-atomic
    
    [ Upstream commit abbc7a3dafb91b9d4ec56b70ec9a7520f8e13334 ]
    
    Some asics still support non-atomic code paths.
    
    Fixes: 66f99628eb2440 ("drm/amdgpu: use dirty framebuffer helper")
    Reported-by: Arthur Marsh <arthur.marsh@internode.on.net>
    Reviewed-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6eb08245da510e77d1024d5dd834759758e78749
Author: Asmaa Mnebhi <asmaa@nvidia.com>
Date:   Tue Sep 20 13:47:29 2022 -0400

    i2c: mlxbf: Fix frequency calculation
    
    [ Upstream commit 37f071ec327b04c83d47637c5e5c2199b39899ca ]
    
    The i2c-mlxbf.c driver is currently broken because there is a bug
    in the calculation of the frequency. core_f, core_r and core_od
    are components read from hardware registers and are used to
    compute the frequency used to compute different timing parameters.
    The shifting mechanism used to get core_f, core_r and core_od is
    wrong. Use FIELD_GET to mask and shift the bitfields properly.
    
    Fixes: b5b5b32081cd206b (i2c: mlxbf: I2C SMBus driver for Mellanox BlueField SoC)
    Reviewed-by: Khalil Blaiech <kblaiech@nvidia.com>
    Signed-off-by: Asmaa Mnebhi <asmaa@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc2a0c587006f29b724069740c48654b9dcaebd2
Author: Asmaa Mnebhi <asmaa@nvidia.com>
Date:   Thu Sep 8 13:35:39 2022 -0400

    i2c: mlxbf: prevent stack overflow in mlxbf_i2c_smbus_start_transaction()
    
    [ Upstream commit de24aceb07d426b6f1c59f33889d6a964770547b ]
    
    memcpy() is called in a loop while 'operation->length' upper bound
    is not checked and 'data_idx' also increments.
    
    Fixes: b5b5b32081cd206b ("i2c: mlxbf: I2C SMBus driver for Mellanox BlueField SoC")
    Reviewed-by: Khalil Blaiech <kblaiech@nvidia.com>
    Signed-off-by: Asmaa Mnebhi <asmaa@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 621c6ab03ac3b3caed3228911e130792ff369698
Author: Asmaa Mnebhi <asmaa@nvidia.com>
Date:   Thu Sep 8 13:35:38 2022 -0400

    i2c: mlxbf: incorrect base address passed during io write
    
    [ Upstream commit 2a5be6d1340c0fefcee8a6489cff7fd88a0d5b85 ]
    
    Correct the base address used during io write.
    This bug had no impact over the overall functionality of the read and write
    transactions. MLXBF_I2C_CAUSE_OR_CLEAR=0x18 so writing to (smbus->io + 0x18)
    instead of (mst_cause->ioi + 0x18) actually writes to the sc_low_timeout
    register which just sets the timeout value before a read/write aborts.
    
    Fixes: b5b5b32081cd206b (i2c: mlxbf: I2C SMBus driver for Mellanox BlueField SoC)
    Reviewed-by: Khalil Blaiech <kblaiech@nvidia.com>
    Signed-off-by: Asmaa Mnebhi <asmaa@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c242dbf2e36f97cbb72366be1cce2068d01d3092
Author: Uwe Kleine-K√∂nig <u.kleine-koenig@pengutronix.de>
Date:   Mon Sep 12 15:20:40 2022 +0200

    i2c: imx: If pm_runtime_get_sync() returned 1 device access is possible
    
    [ Upstream commit 085aacaa73163f4b8a89dec24ecb32cfacd34017 ]
    
    pm_runtime_get_sync() returning 1 also means the device is powered. So
    resetting the chip registers in .remove() is possible and should be
    done.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: d98bdd3a5b50 ("i2c: imx: Make sure to unregister adapter on remove()")
    Signed-off-by: Uwe Kleine-K√∂nig <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c71ec39be45addd1efeccdd2a1f0b36e2e03639f
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Jul 29 13:30:23 2022 +0900

    workqueue: don't skip lockdep work dependency in cancel_work_sync()
    
    [ Upstream commit c0feea594e058223973db94c1c32a830c9807c86 ]
    
    Like Hillf Danton mentioned
    
      syzbot should have been able to catch cancel_work_sync() in work context
      by checking lockdep_map in __flush_work() for both flush and cancel.
    
    in [1], being unable to report an obvious deadlock scenario shown below is
    broken. From locking dependency perspective, sync version of cancel request
    should behave as if flush request, for it waits for completion of work if
    that work has already started execution.
    
      ----------
      #include <linux/module.h>
      #include <linux/sched.h>
      static DEFINE_MUTEX(mutex);
      static void work_fn(struct work_struct *work)
      {
        schedule_timeout_uninterruptible(HZ / 5);
        mutex_lock(&mutex);
        mutex_unlock(&mutex);
      }
      static DECLARE_WORK(work, work_fn);
      static int __init test_init(void)
      {
        schedule_work(&work);
        schedule_timeout_uninterruptible(HZ / 10);
        mutex_lock(&mutex);
        cancel_work_sync(&work);
        mutex_unlock(&mutex);
        return -EINVAL;
      }
      module_init(test_init);
      MODULE_LICENSE("GPL");
      ----------
    
    The check this patch restores was added by commit 0976dfc1d0cd80a4
    ("workqueue: Catch more locking problems with flush_work()").
    
    Then, lockdep's crossrelease feature was added by commit b09be676e0ff25bd
    ("locking/lockdep: Implement the 'crossrelease' feature"). As a result,
    this check was once removed by commit fd1a5b04dfb899f8 ("workqueue: Remove
    now redundant lock acquisitions wrt. workqueue flushes").
    
    But lockdep's crossrelease feature was removed by commit e966eaeeb623f099
    ("locking/lockdep: Remove the cross-release locking checks"). At this
    point, this check should have been restored.
    
    Then, commit d6e89786bed977f3 ("workqueue: skip lockdep wq dependency in
    cancel_work_sync()") introduced a boolean flag in order to distinguish
    flush_work() and cancel_work_sync(), for checking "struct workqueue_struct"
    dependency when called from cancel_work_sync() was causing false positives.
    
    Then, commit 87915adc3f0acdf0 ("workqueue: re-add lockdep dependencies for
    flushing") tried to restore "struct work_struct" dependency check, but by
    error checked this boolean flag. Like an example shown above indicates,
    "struct work_struct" dependency needs to be checked for both flush_work()
    and cancel_work_sync().
    
    Link: https://lkml.kernel.org/r/20220504044800.4966-1-hdanton@sina.com [1]
    Reported-by: Hillf Danton <hdanton@sina.com>
    Suggested-by: Lai Jiangshan <jiangshanlai@gmail.com>
    Fixes: 87915adc3f0acdf0 ("workqueue: re-add lockdep dependencies for flushing")
    Cc: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 929ef155e1da41c06f4d8ca86ae12b851a83a744
Author: Li Jinlin <lijinlin3@huawei.com>
Date:   Mon Jul 25 11:20:50 2022 +0800

    fsdax: Fix infinite loop in dax_iomap_rw()
    
    [ Upstream commit 17d9c15c9b9e7fb285f7ac5367dfb5f00ff575e3 ]
    
    I got an infinite loop and a WARNING report when executing a tail command
    in virtiofs.
    
      WARNING: CPU: 10 PID: 964 at fs/iomap/iter.c:34 iomap_iter+0x3a2/0x3d0
      Modules linked in:
      CPU: 10 PID: 964 Comm: tail Not tainted 5.19.0-rc7
      Call Trace:
      <TASK>
      dax_iomap_rw+0xea/0x620
      ? __this_cpu_preempt_check+0x13/0x20
      fuse_dax_read_iter+0x47/0x80
      fuse_file_read_iter+0xae/0xd0
      new_sync_read+0xfe/0x180
      ? 0xffffffff81000000
      vfs_read+0x14d/0x1a0
      ksys_read+0x6d/0xf0
      __x64_sys_read+0x1a/0x20
      do_syscall_64+0x3b/0x90
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The tail command will call read() with a count of 0. In this case,
    iomap_iter() will report this WARNING, and always return 1 which casuing
    the infinite loop in dax_iomap_rw().
    
    Fixing by checking count whether is 0 in dax_iomap_rw().
    
    Fixes: ca289e0b95af ("fsdax: switch dax_iomap_rw to use iomap_iter")
    Signed-off-by: Li Jinlin <lijinlin3@huawei.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Link: https://lore.kernel.org/r/20220725032050.3873372-1-lijinlin3@huawei.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9aac3819f099ef9a20a7ce557472adc21d517d85
Author: Nathan Huckleberry <nhuck@google.com>
Date:   Tue Sep 13 13:55:55 2022 -0700

    drm/rockchip: Fix return type of cdn_dp_connector_mode_valid
    
    [ Upstream commit b0b9408f132623dc88e78adb5282f74e4b64bb57 ]
    
    The mode_valid field in drm_connector_helper_funcs is expected to be of
    type:
    enum drm_mode_status (* mode_valid) (struct drm_connector *connector,
                                         struct drm_display_mode *mode);
    
    The mismatched return type breaks forward edge kCFI since the underlying
    function definition does not match the function hook definition.
    
    The return type of cdn_dp_connector_mode_valid should be changed from
    int to enum drm_mode_status.
    
    Reported-by: Dan Carpenter <error27@gmail.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1703
    Cc: llvm@lists.linux.dev
    Signed-off-by: Nathan Huckleberry <nhuck@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220913205555.155149-1-nhuck@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c26968caf181add92bbf556e3eb3c14ccbe7fa2
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Aug 30 13:34:09 2022 -0700

    drm/amd/display: Mark dml30's UseMinimumDCFCLK() as noinline for stack usage
    
    [ Upstream commit 41012d715d5d7b9751ae84b8fb255e404ac9c5d0 ]
    
    This function consumes a lot of stack space and it blows up the size of
    dml30_ModeSupportAndSystemConfigurationFull() with clang:
    
      drivers/gpu/drm/amd/amdgpu/../display/dc/dml/dcn30/display_mode_vba_30.c:3542:6: error: stack frame size (2200) exceeds limit (2048) in 'dml30_ModeSupportAndSystemConfigurationFull' [-Werror,-Wframe-larger-than]
      void dml30_ModeSupportAndSystemConfigurationFull(struct display_mode_lib *mode_lib)
           ^
      1 error generated.
    
    Commit a0f7e7f759cf ("drm/amd/display: fix i386 frame size warning")
    aimed to address this for i386 but it did not help x86_64.
    
    To reduce the amount of stack space that
    dml30_ModeSupportAndSystemConfigurationFull() uses, mark
    UseMinimumDCFCLK() as noinline, using the _for_stack variant for
    documentation. While this will increase the total amount of stack usage
    between the two functions (1632 and 1304 bytes respectively), it will
    make sure both stay below the limit of 2048 bytes for these files. The
    aforementioned change does help reduce UseMinimumDCFCLK()'s stack usage
    so it should not be reverted in favor of this change.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1681
    Reported-by: "Sudip Mukherjee (Codethink)" <sudipm.mukherjee@gmail.com>
    Tested-by: Ma√≠ra Canal <mairacanal@riseup.net>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 492db4ffcff3c3bac1f36bbb100e45c9fe718e34
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Aug 30 13:34:08 2022 -0700

    drm/amd/display: Reduce number of arguments of dml31's CalculateFlipSchedule()
    
    [ Upstream commit 21485d3da659b66c37d99071623af83ee1c6733d ]
    
    Most of the arguments are identical between the two call sites and they
    can be accessed through the 'struct vba_vars_st' pointer. This reduces
    the total amount of stack space that
    dml31_ModeSupportAndSystemConfigurationFull() uses by 112 bytes with
    LLVM 16 (1976 -> 1864), helping clear up the following clang warning:
    
      drivers/gpu/drm/amd/amdgpu/../display/dc/dml/dcn31/display_mode_vba_31.c:3908:6: error: stack frame size (2216) exceeds limit (2048) in 'dml31_ModeSupportAndSystemConfigurationFull' [-Werror,-Wframe-larger-than]
      void dml31_ModeSupportAndSystemConfigurationFull(struct display_mode_lib *mode_lib)
          ^
      1 error generated.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1681
    Reported-by: "Sudip Mukherjee (Codethink)" <sudipm.mukherjee@gmail.com>
    Tested-by: Ma√≠ra Canal <mairacanal@riseup.net>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9539cfc744933198318eb061ffce87964559ff87
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Aug 30 13:34:07 2022 -0700

    drm/amd/display: Reduce number of arguments of dml31's CalculateWatermarksAndDRAMSpeedChangeSupport()
    
    [ Upstream commit 37934d4118e22bceb80141804391975078f31734 ]
    
    Most of the arguments are identical between the two call sites and they
    can be accessed through the 'struct vba_vars_st' pointer. This reduces
    the total amount of stack space that
    dml31_ModeSupportAndSystemConfigurationFull() uses by 240 bytes with
    LLVM 16 (2216 -> 1976), helping clear up the following clang warning:
    
      drivers/gpu/drm/amd/amdgpu/../display/dc/dml/dcn31/display_mode_vba_31.c:3908:6: error: stack frame size (2216) exceeds limit (2048) in 'dml31_ModeSupportAndSystemConfigurationFull' [-Werror,-Wframe-larger-than]
      void dml31_ModeSupportAndSystemConfigurationFull(struct display_mode_lib *mode_lib)
          ^
      1 error generated.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1681
    Reported-by: "Sudip Mukherjee (Codethink)" <sudipm.mukherjee@gmail.com>
    Tested-by: Ma√≠ra Canal <mairacanal@riseup.net>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a541c011181823494c53b15020fae5c3b45f5ec2
Author: Yao Wang1 <Yao.Wang1@amd.com>
Date:   Mon Aug 22 18:30:31 2022 +0800

    drm/amd/display: Limit user regamma to a valid value
    
    [ Upstream commit 3601d620f22e37740cf73f8278eabf9f2aa19eb7 ]
    
    [Why]
    For HDR mode, we get total 512 tf_point and after switching to SDR mode
    we actually get 400 tf_point and the rest of points(401~512) still use
    dirty value from HDR mode. We should limit the rest of the points to max
    value.
    
    [How]
    Limit the value when coordinates_x.x > 1, just like what we do in
    translate_from_linear_space for other re-gamma build paths.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Reviewed-by: Krunoslav Kovac <Krunoslav.Kovac@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Signed-off-by: Yao Wang1 <Yao.Wang1@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33b128f790b6df7e44e4435c6b9387b257637d15
Author: Hamza Mahfooz <hamza.mahfooz@amd.com>
Date:   Tue Sep 6 15:01:49 2022 -0400

    drm/amdgpu: use dirty framebuffer helper
    
    [ Upstream commit 66f99628eb24409cb8feb5061f78283c8b65f820 ]
    
    Currently, we aren't handling DRM_IOCTL_MODE_DIRTYFB. So, use
    drm_atomic_helper_dirtyfb() as the dirty callback in the amdgpu_fb_funcs
    struct.
    
    Signed-off-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f76d6f309a685d24a32703b4d5c5a71e76f4b793
Author: Guchun Chen <guchun.chen@amd.com>
Date:   Wed Sep 7 20:31:36 2022 +0800

    drm/amd/pm: disable BACO entry/exit completely on several sienna cichlid cards
    
    [ Upstream commit 7c6fb61a400bf3218c6504cb2d48858f98822c9d ]
    
    To avoid hardware intermittent failures.
    
    Signed-off-by: Guchun Chen <guchun.chen@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5ae504c8623476e13032670f1a6d6344d53ec9b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Sep 6 22:38:50 2022 +0200

    drm/gma500: Fix BUG: sleeping function called from invalid context errors
    
    [ Upstream commit 63e37a79f7bd939314997e29c2f5a9f0ef184281 ]
    
    gma_crtc_page_flip() was holding the event_lock spinlock while calling
    crtc_funcs->mode_set_base() which takes ww_mutex.
    
    The only reason to hold event_lock is to clear gma_crtc->page_flip_event
    on mode_set_base() errors.
    
    Instead unlock it after setting gma_crtc->page_flip_event and on
    errors re-take the lock and clear gma_crtc->page_flip_event it
    it is still set.
    
    This fixes the following WARN/stacktrace:
    
    [  512.122953] BUG: sleeping function called from invalid context at kernel/locking/mutex.c:870
    [  512.123004] in_atomic(): 1, irqs_disabled(): 1, non_block: 0, pid: 1253, name: gnome-shell
    [  512.123031] preempt_count: 1, expected: 0
    [  512.123048] RCU nest depth: 0, expected: 0
    [  512.123066] INFO: lockdep is turned off.
    [  512.123080] irq event stamp: 0
    [  512.123094] hardirqs last  enabled at (0): [<0000000000000000>] 0x0
    [  512.123134] hardirqs last disabled at (0): [<ffffffff8d0ec28c>] copy_process+0x9fc/0x1de0
    [  512.123176] softirqs last  enabled at (0): [<ffffffff8d0ec28c>] copy_process+0x9fc/0x1de0
    [  512.123207] softirqs last disabled at (0): [<0000000000000000>] 0x0
    [  512.123233] Preemption disabled at:
    [  512.123241] [<0000000000000000>] 0x0
    [  512.123275] CPU: 3 PID: 1253 Comm: gnome-shell Tainted: G        W         5.19.0+ #1
    [  512.123304] Hardware name: Packard Bell dot s/SJE01_CT, BIOS V1.10 07/23/2013
    [  512.123323] Call Trace:
    [  512.123346]  <TASK>
    [  512.123370]  dump_stack_lvl+0x5b/0x77
    [  512.123412]  __might_resched.cold+0xff/0x13a
    [  512.123458]  ww_mutex_lock+0x1e/0xa0
    [  512.123495]  psb_gem_pin+0x2c/0x150 [gma500_gfx]
    [  512.123601]  gma_pipe_set_base+0x76/0x240 [gma500_gfx]
    [  512.123708]  gma_crtc_page_flip+0x95/0x130 [gma500_gfx]
    [  512.123808]  drm_mode_page_flip_ioctl+0x57d/0x5d0
    [  512.123897]  ? drm_mode_cursor2_ioctl+0x10/0x10
    [  512.123936]  drm_ioctl_kernel+0xa1/0x150
    [  512.123984]  drm_ioctl+0x21f/0x420
    [  512.124025]  ? drm_mode_cursor2_ioctl+0x10/0x10
    [  512.124070]  ? rcu_read_lock_bh_held+0xb/0x60
    [  512.124104]  ? lock_release+0x1ef/0x2d0
    [  512.124161]  __x64_sys_ioctl+0x8d/0xd0
    [  512.124203]  do_syscall_64+0x58/0x80
    [  512.124239]  ? do_syscall_64+0x67/0x80
    [  512.124267]  ? trace_hardirqs_on_prepare+0x55/0xe0
    [  512.124300]  ? do_syscall_64+0x67/0x80
    [  512.124340]  ? rcu_read_lock_sched_held+0x10/0x80
    [  512.124377]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    [  512.124411] RIP: 0033:0x7fcc4a70740f
    [  512.124442] Code: 00 48 89 44 24 18 31 c0 48 8d 44 24 60 c7 04 24 10 00 00 00 48 89 44 24 08 48 8d 44 24 20 48 89 44 24 10 b8 10 00 00 00 0f 05 <89> c2 3d 00 f0 ff ff 77 18 48 8b 44 24 18 64 48 2b 04 25 28 00 00
    [  512.124470] RSP: 002b:00007ffda73f5390 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    [  512.124503] RAX: ffffffffffffffda RBX: 000055cc9e474500 RCX: 00007fcc4a70740f
    [  512.124524] RDX: 00007ffda73f5420 RSI: 00000000c01864b0 RDI: 0000000000000009
    [  512.124544] RBP: 00007ffda73f5420 R08: 000055cc9c0b0cb0 R09: 0000000000000034
    [  512.124564] R10: 0000000000000000 R11: 0000000000000246 R12: 00000000c01864b0
    [  512.124584] R13: 0000000000000009 R14: 000055cc9df484d0 R15: 000055cc9af5d0c0
    [  512.124647]  </TASK>
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220906203852.527663-2-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e07d9154bb81ef7da1568d6772aeaacf152e08be
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Aug 27 15:03:45 2022 +0200

    Drivers: hv: Never allocate anything besides framebuffer from framebuffer memory region
    
    [ Upstream commit f0880e2cb7e1f8039a048fdd01ce45ab77247221 ]
    
    Passed through PCI device sometimes misbehave on Gen1 VMs when Hyper-V
    DRM driver is also loaded. Looking at IOMEM assignment, we can see e.g.
    
    $ cat /proc/iomem
    ...
    f8000000-fffbffff : PCI Bus 0000:00
      f8000000-fbffffff : 0000:00:08.0
        f8000000-f8001fff : bb8c4f33-2ba2-4808-9f7f-02f3b4da22fe
    ...
    fe0000000-fffffffff : PCI Bus 0000:00
      fe0000000-fe07fffff : bb8c4f33-2ba2-4808-9f7f-02f3b4da22fe
        fe0000000-fe07fffff : 2ba2:00:02.0
          fe0000000-fe07fffff : mlx4_core
    
    the interesting part is the 'f8000000' region as it is actually the
    VM's framebuffer:
    
    $ lspci -v
    ...
    0000:00:08.0 VGA compatible controller: Microsoft Corporation Hyper-V virtual VGA (prog-if 00 [VGA controller])
            Flags: bus master, fast devsel, latency 0, IRQ 11
            Memory at f8000000 (32-bit, non-prefetchable) [size=64M]
    ...
    
     hv_vmbus: registering driver hyperv_drm
     hyperv_drm 5620e0c7-8062-4dce-aeb7-520c7ef76171: [drm] Synthvid Version major 3, minor 5
     hyperv_drm 0000:00:08.0: vgaarb: deactivate vga console
     hyperv_drm 0000:00:08.0: BAR 0: can't reserve [mem 0xf8000000-0xfbffffff]
     hyperv_drm 5620e0c7-8062-4dce-aeb7-520c7ef76171: [drm] Cannot request framebuffer, boot fb still active?
    
    Note: "Cannot request framebuffer" is not a fatal error in
    hyperv_setup_gen1() as the code assumes there's some other framebuffer
    device there but we actually have some other PCI device (mlx4 in this
    case) config space there!
    
    The problem appears to be that vmbus_allocate_mmio() can use dedicated
    framebuffer region to serve any MMIO request from any device. The
    semantics one might assume of a parameter named "fb_overlap_ok"
    aren't implemented because !fb_overlap_ok essentially has no effect.
    The existing semantics are really "prefer_fb_overlap". This patch
    implements the expected and needed semantics, which is to not allocate
    from the frame buffer space when !fb_overlap_ok.
    
    Note, Gen2 VMs are usually unaffected by the issue because
    framebuffer region is already taken by EFI fb (in case kernel supports
    it) but Gen1 VMs may have this region unclaimed by the time Hyper-V PCI
    pass-through driver tries allocating MMIO space if Hyper-V DRM/FB drivers
    load after it. Devices can be brought up in any sequence so let's
    resolve the issue by always ignoring 'fb_mmio' region for non-FB
    requests, even if the region is unclaimed.
    
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Link: https://lore.kernel.org/r/20220827130345.1320254-4-vkuznets@redhat.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f270b61ee8b01ab410e3e6ee4f4cc0b32300605
Author: Jingwen Chen <Jingwen.Chen2@amd.com>
Date:   Thu Jan 13 19:06:59 2022 +0800

    drm/amd/amdgpu: fixing read wrong pf2vf data in SRIOV
    
    commit 9a458402fb69bda886aa6cbe067311b6e3d9c52a upstream.
    
    [Why]
    This fixes 892deb48269c ("drm/amdgpu: Separate vf2pf work item init from virt data exchange").
    we should read pf2vf data based at mman.fw_vram_usage_va after gmc
    sw_init. commit 892deb48269c breaks this logic.
    
    [How]
    calling amdgpu_virt_exchange_data in amdgpu_virt_init_data_exchange to
    set the right base in the right sequence.
    
    v2:
    call amdgpu_virt_init_data_exchange after gmc sw_init to make data
    exchange workqueue run
    
    v3:
    clean up the code logic
    
    v4:
    add some comment and make the code more readable
    
    Fixes: 892deb48269c ("drm/amdgpu: Separate vf2pf work item init from virt data exchange")
    Signed-off-by: Jingwen Chen <Jingwen.Chen2@amd.com>
    Reviewed-by: Horace Chen <horace.chen@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3a67c21b18f33c79382084af556557c442f12a6
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Mon Sep 19 17:49:31 2022 +0200

    s390/dasd: fix Oops in dasd_alias_get_start_dev due to missing pavgroup
    
    commit db7ba07108a48c0f95b74fabbfd5d63e924f992d upstream.
    
    Fix Oops in dasd_alias_get_start_dev() function caused by the pavgroup
    pointer being NULL.
    
    The pavgroup pointer is checked on the entrance of the function but
    without the lcu->lock being held. Therefore there is a race window
    between dasd_alias_get_start_dev() and _lcu_update() which sets
    pavgroup to NULL with the lcu->lock held.
    
    Fix by checking the pavgroup pointer with lcu->lock held.
    
    Cc: <stable@vger.kernel.org> # 2.6.25+
    Fixes: 8e09f21574ea ("[S390] dasd: add hyper PAV support to DASD device driver, part 1")
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Link: https://lore.kernel.org/r/20220919154931.4123002-2-sth@linux.ibm.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit faf0e1b5d82b53752f0bd79cdc23a42f8508441b
Author: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
Date:   Thu Sep 1 17:39:34 2022 +0300

    serial: tegra-tcu: Use uart_xmit_advance(), fixes icount.tx accounting
    
    commit 1d10cd4da593bc0196a239dcc54dac24b6b0a74e upstream.
    
    Tx'ing does not correctly account Tx'ed characters into icount.tx.
    Using uart_xmit_advance() fixes the problem.
    
    Fixes: 2d908b38d409 ("serial: Add Tegra Combined UART driver")
    Cc: <stable@vger.kernel.org> # serial: Create uart_xmit_advance()
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20220901143934.8850-4-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0aada772fd163d8ee73ab9cc66bb56b47db177b6
Author: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
Date:   Thu Sep 1 17:39:33 2022 +0300

    serial: tegra: Use uart_xmit_advance(), fixes icount.tx accounting
    
    commit 754f68044c7dd6c52534ba3e0f664830285c4b15 upstream.
    
    DMA complete & stop paths did not correctly account Tx'ed characters
    into icount.tx. Using uart_xmit_advance() fixes the problem.
    
    Fixes: e9ea096dd225 ("serial: tegra: add serial driver")
    Cc: <stable@vger.kernel.org> # serial: Create uart_xmit_advance()
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20220901143934.8850-3-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c7e17270cabafe7cea55446752c295f94b026b9
Author: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
Date:   Thu Sep 1 17:39:32 2022 +0300

    serial: Create uart_xmit_advance()
    
    commit e77cab77f2cb3a1ca2ba8df4af45bb35617ac16d upstream.
    
    A very common pattern in the drivers is to advance xmit tail
    index and do bookkeeping of Tx'ed characters. Create
    uart_xmit_advance() to handle it.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20220901143934.8850-2-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4199425b11325e893661d03f92330dd1adae03b0
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Sep 11 10:22:01 2022 +0200

    serial: fsl_lpuart: Reset prior to registration
    
    commit 60f361722ad2ae5ee667d0b0545d40c42f754daf upstream.
    
    Since commit bd5305dcabbc ("tty: serial: fsl_lpuart: do software reset
    for imx7ulp and imx8qxp"), certain i.MX UARTs are reset after they've
    already been registered.  Register state may thus be clobbered after
    user space has begun to open and access the UART.
    
    Avoid by performing the reset prior to registration.
    
    Fixes: bd5305dcabbc ("tty: serial: fsl_lpuart: do software reset for imx7ulp and imx8qxp")
    Cc: stable@vger.kernel.org # v5.15+
    Cc: Fugang Duan <fugang.duan@nxp.com>
    Cc: Sherry Sun <sherry.sun@nxp.com>
    Reviewed-by: Ilpo J√§rvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://lore.kernel.org/r/72fb646c1b0b11c989850c55f52f9ff343d1b2fa.1662884345.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc1504f6da2e81ab249eb801739c8fc0c1fd121f
Author: David Matlack <dmatlack@google.com>
Date:   Fri Aug 13 20:35:00 2021 +0000

    KVM: x86/mmu: Fold rmap_recycle into rmap_add
    
    [ Upstream commit 68be1306caea8948738cab04014ca4506b590d38 ]
    
    Consolidate rmap_recycle and rmap_add into a single function since they
    are only ever called together (and only from one place). This has a nice
    side effect of eliminating an extra kvm_vcpu_gfn_to_memslot(). In
    addition it makes mmu_set_spte(), which is a very long function, a
    little shorter.
    
    No functional change intended.
    
    Signed-off-by: David Matlack <dmatlack@google.com>
    Message-Id: <20210813203504.2742757-3-dmatlack@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 604f533262ae ("KVM: x86/mmu: add missing update to max_mmu_rmap_size")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dddae48eabfbbf955c7a679a10bd3a68295c8f62
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Sep 22 10:44:53 2022 +0800

    selftests: forwarding: add shebang for sch_red.sh
    
    [ Upstream commit 83e4b196838d90799a8879e5054a3beecf9ed256 ]
    
    RHEL/Fedora RPM build checks are stricter, and complain when executable
    files don't have a shebang line, e.g.
    
    *** WARNING: ./kselftests/net/forwarding/sch_red.sh is executable but has no shebang, removing executable bit
    
    Fix it by adding shebang line.
    
    Fixes: 6cf0291f9517 ("selftests: forwarding: Add a RED test for SW datapath")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Link: https://lore.kernel.org/r/20220922024453.437757-1-liuhangbin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08483e4c0c83b221b8891434a04cec405dee94a6
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Sep 21 13:10:05 2022 -0700

    bnxt: prevent skb UAF after handing over to PTP worker
    
    [ Upstream commit c31f26c8f69f776759cbbdfb38e40ea91aa0dd65 ]
    
    When reading the timestamp is required bnxt_tx_int() hands
    over the ownership of the completed skb to the PTP worker.
    The skb should not be used afterwards, as the worker may
    run before the rest of our code and free the skb, leading
    to a use-after-free.
    
    Since dev_kfree_skb_any() accepts NULL make the loss of
    ownership more obvious and set skb to NULL.
    
    Fixes: 83bb623c968e ("bnxt_en: Transmit and retrieve packet timestamps")
    Reviewed-by: Andy Gospodarek <gospo@broadcom.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/20220921201005.335390-1-kuba@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8162aed962be8fa07445b2b5928e84ab40dd8d7
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Sep 21 17:27:34 2022 +0800

    net: sched: fix possible refcount leak in tc_new_tfilter()
    
    [ Upstream commit c2e1cfefcac35e0eea229e148c8284088ce437b5 ]
    
    tfilter_put need to be called to put the refount got by tp->ops->get to
    avoid possible refcount leak when chain->tmplt_ops != NULL and
    chain->tmplt_ops != tp->ops.
    
    Fixes: 7d5509fa0d3d ("net: sched: extend proto ops with 'put' callback")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Vlad Buslov <vladbu@nvidia.com>
    Link: https://lore.kernel.org/r/20220921092734.31700-1-hbh25y@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd29ca2b398ce78f373705dedad5be6dbbde421b
Author: Sean Anderson <seanga2@gmail.com>
Date:   Tue Sep 20 19:50:18 2022 -0400

    net: sunhme: Fix packet reception for len < RX_COPY_THRESHOLD
    
    [ Upstream commit 878e2405710aacfeeb19364c300f38b7a9abfe8f ]
    
    There is a separate receive path for small packets (under 256 bytes).
    Instead of allocating a new dma-capable skb to be used for the next packet,
    this path allocates a skb and copies the data into it (reusing the existing
    sbk for the next packet). There are two bytes of junk data at the beginning
    of every packet. I believe these are inserted in order to allow aligned DMA
    and IP headers. We skip over them using skb_reserve. Before copying over
    the data, we must use a barrier to ensure we see the whole packet. The
    current code only synchronizes len bytes, starting from the beginning of
    the packet, including the junk bytes. However, this leaves off the final
    two bytes in the packet. Synchronize the whole packet.
    
    To reproduce this problem, ping a HME with a payload size between 17 and
    214
    
            $ ping -s 17 <hme_address>
    
    which will complain rather loudly about the data mismatch. Small packets
    (below 60 bytes on the wire) do not have this issue. I suspect this is
    related to the padding added to increase the minimum packet size.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Sean Anderson <seanga2@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20220920235018.1675956-1-seanga2@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec3a6f4ffe556a28f6f5028bf7c4412557e7051b
Author: Jonathan Toppins <jtoppins@redhat.com>
Date:   Tue Sep 20 13:45:52 2022 -0400

    bonding: fix NULL deref in bond_rr_gen_slave_id
    
    [ Upstream commit 0e400d602f46360752e4b32ce842dba3808e15e6 ]
    
    Fix a NULL dereference of the struct bonding.rr_tx_counter member because
    if a bond is initially created with an initial mode != zero (Round Robin)
    the memory required for the counter is never created and when the mode is
    changed there is never any attempt to verify the memory is allocated upon
    switching modes.
    
    This causes the following Oops on an aarch64 machine:
        [  334.686773] Unable to handle kernel paging request at virtual address ffff2c91ac905000
        [  334.694703] Mem abort info:
        [  334.697486]   ESR = 0x0000000096000004
        [  334.701234]   EC = 0x25: DABT (current EL), IL = 32 bits
        [  334.706536]   SET = 0, FnV = 0
        [  334.709579]   EA = 0, S1PTW = 0
        [  334.712719]   FSC = 0x04: level 0 translation fault
        [  334.717586] Data abort info:
        [  334.720454]   ISV = 0, ISS = 0x00000004
        [  334.724288]   CM = 0, WnR = 0
        [  334.727244] swapper pgtable: 4k pages, 48-bit VAs, pgdp=000008044d662000
        [  334.733944] [ffff2c91ac905000] pgd=0000000000000000, p4d=0000000000000000
        [  334.740734] Internal error: Oops: 96000004 [#1] SMP
        [  334.745602] Modules linked in: bonding tls veth rfkill sunrpc arm_spe_pmu vfat fat acpi_ipmi ipmi_ssif ixgbe igb i40e mdio ipmi_devintf ipmi_msghandler arm_cmn arm_dsu_pmu cppc_cpufreq acpi_tad fuse zram crct10dif_ce ast ghash_ce sbsa_gwdt nvme drm_vram_helper drm_ttm_helper nvme_core ttm xgene_hwmon
        [  334.772217] CPU: 7 PID: 2214 Comm: ping Not tainted 6.0.0-rc4-00133-g64ae13ed4784 #4
        [  334.779950] Hardware name: GIGABYTE R272-P31-00/MP32-AR1-00, BIOS F18v (SCP: 1.08.20211002) 12/01/2021
        [  334.789244] pstate: 60400009 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
        [  334.796196] pc : bond_rr_gen_slave_id+0x40/0x124 [bonding]
        [  334.801691] lr : bond_xmit_roundrobin_slave_get+0x38/0xdc [bonding]
        [  334.807962] sp : ffff8000221733e0
        [  334.811265] x29: ffff8000221733e0 x28: ffffdbac8572d198 x27: ffff80002217357c
        [  334.818392] x26: 000000000000002a x25: ffffdbacb33ee000 x24: ffff07ff980fa000
        [  334.825519] x23: ffffdbacb2e398ba x22: ffff07ff98102000 x21: ffff07ff981029c0
        [  334.832646] x20: 0000000000000001 x19: ffff07ff981029c0 x18: 0000000000000014
        [  334.839773] x17: 0000000000000000 x16: ffffdbacb1004364 x15: 0000aaaabe2f5a62
        [  334.846899] x14: ffff07ff8e55d968 x13: ffff07ff8e55db30 x12: 0000000000000000
        [  334.854026] x11: ffffdbacb21532e8 x10: 0000000000000001 x9 : ffffdbac857178ec
        [  334.861153] x8 : ffff07ff9f6e5a28 x7 : 0000000000000000 x6 : 000000007c2b3742
        [  334.868279] x5 : ffff2c91ac905000 x4 : ffff2c91ac905000 x3 : ffff07ff9f554400
        [  334.875406] x2 : ffff2c91ac905000 x1 : 0000000000000001 x0 : ffff07ff981029c0
        [  334.882532] Call trace:
        [  334.884967]  bond_rr_gen_slave_id+0x40/0x124 [bonding]
        [  334.890109]  bond_xmit_roundrobin_slave_get+0x38/0xdc [bonding]
        [  334.896033]  __bond_start_xmit+0x128/0x3a0 [bonding]
        [  334.901001]  bond_start_xmit+0x54/0xb0 [bonding]
        [  334.905622]  dev_hard_start_xmit+0xb4/0x220
        [  334.909798]  __dev_queue_xmit+0x1a0/0x720
        [  334.913799]  arp_xmit+0x3c/0xbc
        [  334.916932]  arp_send_dst+0x98/0xd0
        [  334.920410]  arp_solicit+0xe8/0x230
        [  334.923888]  neigh_probe+0x60/0xb0
        [  334.927279]  __neigh_event_send+0x3b0/0x470
        [  334.931453]  neigh_resolve_output+0x70/0x90
        [  334.935626]  ip_finish_output2+0x158/0x514
        [  334.939714]  __ip_finish_output+0xac/0x1a4
        [  334.943800]  ip_finish_output+0x40/0xfc
        [  334.947626]  ip_output+0xf8/0x1a4
        [  334.950931]  ip_send_skb+0x5c/0x100
        [  334.954410]  ip_push_pending_frames+0x3c/0x60
        [  334.958758]  raw_sendmsg+0x458/0x6d0
        [  334.962325]  inet_sendmsg+0x50/0x80
        [  334.965805]  sock_sendmsg+0x60/0x6c
        [  334.969286]  __sys_sendto+0xc8/0x134
        [  334.972853]  __arm64_sys_sendto+0x34/0x4c
        [  334.976854]  invoke_syscall+0x78/0x100
        [  334.980594]  el0_svc_common.constprop.0+0x4c/0xf4
        [  334.985287]  do_el0_svc+0x38/0x4c
        [  334.988591]  el0_svc+0x34/0x10c
        [  334.991724]  el0t_64_sync_handler+0x11c/0x150
        [  334.996072]  el0t_64_sync+0x190/0x194
        [  334.999726] Code: b9001062 f9403c02 d53cd044 8b040042 (b8210040)
        [  335.005810] ---[ end trace 0000000000000000 ]---
        [  335.010416] Kernel panic - not syncing: Oops: Fatal exception in interrupt
        [  335.017279] SMP: stopping secondary CPUs
        [  335.021374] Kernel Offset: 0x5baca8eb0000 from 0xffff800008000000
        [  335.027456] PHYS_OFFSET: 0x80000000
        [  335.030932] CPU features: 0x0000,0085c029,19805c82
        [  335.035713] Memory Limit: none
        [  335.038756] Rebooting in 180 seconds..
    
    The fix is to allocate the memory in bond_open() which is guaranteed
    to be called before any packets are processed.
    
    Fixes: 848ca9182a7d ("net: bonding: Use per-cpu rr_tx_counter")
    CC: Jussi Maki <joamaki@gmail.com>
    Signed-off-by: Jonathan Toppins <jtoppins@redhat.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db145b8a04fc6d2df78670dd210aacf4f7fedbce
Author: Wen Gu <guwen@linux.alibaba.com>
Date:   Tue Sep 20 14:43:09 2022 +0800

    net/smc: Stop the CLC flow if no link to map buffers on
    
    [ Upstream commit e738455b2c6dcdab03e45d97de36476f93f557d2 ]
    
    There might be a potential race between SMC-R buffer map and
    link group termination.
    
    smc_smcr_terminate_all()     | smc_connect_rdma()
    --------------------------------------------------------------
                                 | smc_conn_create()
    for links in smcibdev        |
            schedule links down  |
                                 | smc_buf_create()
                                 |  \- smcr_buf_map_usable_links()
                                 |      \- no usable links found,
                                 |         (rmb->mr = NULL)
                                 |
                                 | smc_clc_send_confirm()
                                 |  \- access conn->rmb_desc->mr[]->rkey
                                 |     (panic)
    
    During reboot and IB device module remove, all links will be set
    down and no usable links remain in link groups. In such situation
    smcr_buf_map_usable_links() should return an error and stop the
    CLC flow accessing to uninitialized mr.
    
    Fixes: b9247544c1bc ("net/smc: convert static link ID instances to support multiple links")
    Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
    Link: https://lore.kernel.org/r/1663656189-32090-1-git-send-email-guwen@linux.alibaba.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5daef0042d2c46da046f93957de43b675cf724fd
Author: N√≠colas F. R. A. Prado <nfraprado@collabora.com>
Date:   Thu Aug 4 15:43:25 2022 -0400

    drm/mediatek: dsi: Move mtk_dsi_stop() call back to mtk_dsi_poweroff()
    
    [ Upstream commit 90144dd8b0d137d9e78ef34b3c418e51a49299ad ]
    
    As the comment right before the mtk_dsi_stop() call advises,
    mtk_dsi_stop() should only be called after
    mtk_drm_crtc_atomic_disable(). That's because that function calls
    drm_crtc_wait_one_vblank(), which requires the vblank irq to be enabled.
    
    Previously mtk_dsi_stop(), being in mtk_dsi_poweroff() and guarded by a
    refcount, would only be called at the end of
    mtk_drm_crtc_atomic_disable(), through the call to mtk_crtc_ddp_hw_fini().
    Commit cde7e2e35c28 ("drm/mediatek: Separate poweron/poweroff from
    enable/disable and define new funcs") moved the mtk_dsi_stop() call to
    mtk_output_dsi_disable(), causing it to be called before
    mtk_drm_crtc_atomic_disable(), and consequently generating vblank
    timeout warnings during suspend.
    
    Move the mtk_dsi_stop() call back to mtk_dsi_poweroff() so that we have
    a working vblank irq during mtk_drm_crtc_atomic_disable() and stop
    getting vblank timeout warnings.
    
    Fixes: cde7e2e35c28 ("drm/mediatek: Separate poweron/poweroff from enable/disable and define new funcs")
    Signed-off-by: N√≠colas F. R. A. Prado <nfraprado@collabora.com>
    Tested-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Tested-by: Allen-KH Cheng <allen-kh.cheng@mediatek.com>
    Link: http://lists.infradead.org/pipermail/linux-mediatek/2022-August/046713.html
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a08cba2f50d7438faca5c15181f7b00f32a7240c
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Tue Sep 20 15:28:21 2022 -0700

    perf tools: Honor namespace when synthesizing build-ids
    
    [ Upstream commit 999e4eaa4b3691acf85d094836260ec4b66c74fd ]
    
    It needs to enter the namespace before reading a file.
    
    Fixes: 4183a8d70a288627 ("perf tools: Allow synthesizing the build id for kernel/modules/tasks in PERF_RECORD_MMAP2")
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20220920222822.2171056-1-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a83f39dc4e13946f7ca42dac6c3b40ede5209f3
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Sep 14 15:24:29 2022 +0300

    perf kcore_copy: Do not check /proc/modules is unchanged
    
    [ Upstream commit 5b427df27b94aec1312cace48a746782a0925c53 ]
    
    /proc/kallsyms and /proc/modules are compared before and after the copy
    in order to ensure no changes during the copy.
    
    However /proc/modules also might change due to reference counts changing
    even though that does not make any difference.
    
    Any modules loaded or unloaded should be visible in changes to kallsyms,
    so it is not necessary to check /proc/modules also anyway.
    
    Remove the comparison checking that /proc/modules is unchanged.
    
    Fixes: fc1b691d7651d949 ("perf buildid-cache: Add ability to add kcore to the cache")
    Reported-by: Daniel Dao <dqminh@cloudflare.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Daniel Dao <dqminh@cloudflare.com>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Link: https://lore.kernel.org/r/20220914122429.8770-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3b923f449a3c4c12076b8654de2e8a9b9aa7b90
Author: Lieven Hey <lieven.hey@kdab.com>
Date:   Thu Sep 15 11:29:10 2022 +0200

    perf jit: Include program header in ELF files
    
    [ Upstream commit babd04386b1df8c364cdaa39ac0e54349502e1e5 ]
    
    The missing header makes it hard for programs like elfutils to open
    these files.
    
    Fixes: 2d86612aacb7805f ("perf symbol: Correct address for bss symbols")
    Reviewed-by: Leo Yan <leo.yan@linaro.org>
    Signed-off-by: Lieven Hey <lieven.hey@kdab.com>
    Tested-by: Leo Yan <leo.yan@linaro.org>
    Cc: Leo Yan <leo.yan@linaro.org>
    Link: https://lore.kernel.org/r/20220915092910.711036-1-lieven.hey@kdab.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39dc6ccdd5af5f67c88d3b1ac11da625f7f10298
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Fri Sep 16 11:41:29 2022 -0700

    perf stat: Fix BPF program section name
    
    [ Upstream commit 0d77326c3369e255715ed2440a78894ccc98dd69 ]
    
    It seems the recent libbpf got more strict about the section name.
    I'm seeing a failure like this:
    
      $ sudo ./perf stat -a --bpf-counters --for-each-cgroup ^. sleep 1
      libbpf: prog 'on_cgrp_switch': missing BPF prog type, check ELF section name 'perf_events'
      libbpf: prog 'on_cgrp_switch': failed to load: -22
      libbpf: failed to load object 'bperf_cgroup_bpf'
      libbpf: failed to load BPF skeleton 'bperf_cgroup_bpf': -22
      Failed to load cgroup skeleton
    
    The section name should be 'perf_event' (without the trailing 's').
    Although it's related to the libbpf change, it'd be better fix the
    section name in the first place.
    
    Fixes: 944138f048f7d759 ("perf stat: Enable BPF counter with --for-each-cgroup")
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: bpf@vger.kernel.org
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/r/20220916184132.1161506-2-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6d939639fe06f1faf370fa370fe0ff62ee78ba6
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Sep 20 11:40:56 2022 +0200

    can: gs_usb: gs_can_open(): fix race dev->can.state condition
    
    [ Upstream commit 5440428b3da65408dba0241985acb7a05258b85e ]
    
    The dev->can.state is set to CAN_STATE_ERROR_ACTIVE, after the device
    has been started. On busy networks the CAN controller might receive
    CAN frame between and go into an error state before the dev->can.state
    is assigned.
    
    Assign dev->can.state before starting the controller to close the race
    window.
    
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Link: https://lore.kernel.org/all/20220920195216.232481-1-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1676adedc170d91a603cbb6d8bf894c698f91ec
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Sep 19 16:48:28 2022 +0200

    net: sh_eth: Fix PHY state warning splat during system resume
    
    [ Upstream commit 6a1dbfefdae4f7809b3e277cc76785dac0ac1cd0 ]
    
    Since commit 744d23c71af39c7d ("net: phy: Warn about incorrect
    mdio_bus_phy_resume() state"), a warning splat is printed during system
    resume with Wake-on-LAN disabled:
    
            WARNING: CPU: 0 PID: 626 at drivers/net/phy/phy_device.c:323 mdio_bus_phy_resume+0xbc/0xe4
    
    As the Renesas SuperH Ethernet driver already calls phy_{stop,start}()
    in its suspend/resume callbacks, it is sufficient to just mark the MAC
    responsible for managing the power state of the PHY.
    
    Fixes: fba863b816049b03 ("net: phy: make PHY PM ops a no-op if MAC driver manages PHY PM")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/c6e1331b9bef61225fa4c09db3ba3e2e7214ba2d.1663598886.git.geert+renesas@glider.be
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71200518bbbfd0b75ba1646f6fa37399c87457cd
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Sep 19 16:48:00 2022 +0200

    net: ravb: Fix PHY state warning splat during system resume
    
    [ Upstream commit 4924c0cdce75575295f8fa682851fb8e5d619dd2 ]
    
    Since commit 744d23c71af39c7d ("net: phy: Warn about incorrect
    mdio_bus_phy_resume() state"), a warning splat is printed during system
    resume with Wake-on-LAN disabled:
    
            WARNING: CPU: 0 PID: 1197 at drivers/net/phy/phy_device.c:323 mdio_bus_phy_resume+0xbc/0xc8
    
    As the Renesas Ethernet AVB driver already calls phy_{stop,start}() in
    its suspend/resume callbacks, it is sufficient to just mark the MAC
    responsible for managing the power state of the PHY.
    
    Fixes: fba863b816049b03 ("net: phy: make PHY PM ops a no-op if MAC driver manages PHY PM")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/8ec796f47620980fdd0403e21bd8b7200b4fa1d4.1663598796.git.geert+renesas@glider.be
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5917b7af7cae0e2804f9d127a03268035098b7f
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Sep 20 14:20:17 2022 +0200

    netfilter: ebtables: fix memory leak when blob is malformed
    
    [ Upstream commit 62ce44c4fff947eebdf10bb582267e686e6835c9 ]
    
    The bug fix was incomplete, it "replaced" crash with a memory leak.
    The old code had an assignment to "ret" embedded into the conditional,
    restore this.
    
    Fixes: 7997eff82828 ("netfilter: ebtables: reject blobs that don't provide all entry points")
    Reported-and-tested-by: syzbot+a24c5252f3e3ab733464@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08d7524f366a886b99b1630a24a27dd6e0d7f852
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Sep 12 22:58:51 2022 +0900

    netfilter: nf_tables: fix percpu memory leak at nf_tables_addchain()
    
    [ Upstream commit 9a4d6dd554b86e65581ef6b6638a39ae079b17ac ]
    
    It seems to me that percpu memory for chain stats started leaking since
    commit 3bc158f8d0330f0a ("netfilter: nf_tables: map basechain priority to
    hardware priority") when nft_chain_offload_priority() returned an error.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: 3bc158f8d0330f0a ("netfilter: nf_tables: map basechain priority to hardware priority")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91aa52652f4b37089aff3cb53e83049d826fef6d
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Sep 12 21:41:00 2022 +0900

    netfilter: nf_tables: fix nft_counters_enabled underflow at nf_tables_addchain()
    
    [ Upstream commit 921ebde3c0d22c8cba74ce8eb3cc4626abff1ccd ]
    
    syzbot is reporting underflow of nft_counters_enabled counter at
    nf_tables_addchain() [1], for commit 43eb8949cfdffa76 ("netfilter:
    nf_tables: do not leave chain stats enabled on error") missed that
    nf_tables_chain_destroy() after nft_basechain_init() in the error path of
    nf_tables_addchain() decrements the counter because nft_basechain_init()
    makes nft_is_base_chain() return true by setting NFT_CHAIN_BASE flag.
    
    Increment the counter immediately after returning from
    nft_basechain_init().
    
    Link:  https://syzkaller.appspot.com/bug?extid=b5d82a651b71cd8a75ab [1]
    Reported-by: syzbot <syzbot+b5d82a651b71cd8a75ab@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+b5d82a651b71cd8a75ab@syzkaller.appspotmail.com>
    Fixes: 43eb8949cfdffa76 ("netfilter: nf_tables: do not leave chain stats enabled on error")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c721623efd09b7227b78b23924ca50ca2c720ced
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Thu Sep 15 13:08:02 2022 +0300

    net/sched: taprio: make qdisc_leaf() see the per-netdev-queue pfifo child qdiscs
    
    [ Upstream commit 1461d212ab277d8bba1a753d33e9afe03d81f9d4 ]
    
    taprio can only operate as root qdisc, and to that end, there exists the
    following check in taprio_init(), just as in mqprio:
    
            if (sch->parent != TC_H_ROOT)
                    return -EOPNOTSUPP;
    
    And indeed, when we try to attach taprio to an mqprio child, it fails as
    expected:
    
    $ tc qdisc add dev swp0 root handle 1: mqprio num_tc 8 \
            map 0 1 2 3 4 5 6 7 \
            queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 hw 0
    $ tc qdisc replace dev swp0 parent 1:2 taprio num_tc 8 \
            map 0 1 2 3 4 5 6 7 \
            queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \
            base-time 0 sched-entry S 0x7f 990000 sched-entry S 0x80 100000 \
            flags 0x0 clockid CLOCK_TAI
    Error: sch_taprio: Can only be attached as root qdisc.
    
    (extack message added by me)
    
    But when we try to attach a taprio child to a taprio root qdisc,
    surprisingly it doesn't fail:
    
    $ tc qdisc replace dev swp0 root handle 1: taprio num_tc 8 \
            map 0 1 2 3 4 5 6 7 queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \
            base-time 0 sched-entry S 0x7f 990000 sched-entry S 0x80 100000 \
            flags 0x0 clockid CLOCK_TAI
    $ tc qdisc replace dev swp0 parent 1:2 taprio num_tc 8 \
            map 0 1 2 3 4 5 6 7 \
            queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \
            base-time 0 sched-entry S 0x7f 990000 sched-entry S 0x80 100000 \
            flags 0x0 clockid CLOCK_TAI
    
    This is because tc_modify_qdisc() behaves differently when mqprio is
    root, vs when taprio is root.
    
    In the mqprio case, it finds the parent qdisc through
    p = qdisc_lookup(dev, TC_H_MAJ(clid)), and then the child qdisc through
    q = qdisc_leaf(p, clid). This leaf qdisc q has handle 0, so it is
    ignored according to the comment right below ("It may be default qdisc,
    ignore it"). As a result, tc_modify_qdisc() goes through the
    qdisc_create() code path, and this gives taprio_init() a chance to check
    for sch_parent != TC_H_ROOT and error out.
    
    Whereas in the taprio case, the returned q = qdisc_leaf(p, clid) is
    different. It is not the default qdisc created for each netdev queue
    (both taprio and mqprio call qdisc_create_dflt() and keep them in
    a private q->qdiscs[], or priv->qdiscs[], respectively). Instead, taprio
    makes qdisc_leaf() return the _root_ qdisc, aka itself.
    
    When taprio does that, tc_modify_qdisc() goes through the qdisc_change()
    code path, because the qdisc layer never finds out about the child qdisc
    of the root. And through the ->change() ops, taprio has no reason to
    check whether its parent is root or not, just through ->init(), which is
    not called.
    
    The problem is the taprio_leaf() implementation. Even though code wise,
    it does the exact same thing as mqprio_leaf() which it is copied from,
    it works with different input data. This is because mqprio does not
    attach itself (the root) to each device TX queue, but one of the default
    qdiscs from its private array.
    
    In fact, since commit 13511704f8d7 ("net: taprio offload: enforce qdisc
    to netdev queue mapping"), taprio does this too, but just for the full
    offload case. So if we tried to attach a taprio child to a fully
    offloaded taprio root qdisc, it would properly fail too; just not to a
    software root taprio.
    
    To fix the problem, stop looking at the Qdisc that's attached to the TX
    queue, and instead, always return the default qdiscs that we've
    allocated (and to which we privately enqueue and dequeue, in software
    scheduling mode).
    
    Since Qdisc_class_ops :: leaf  is only called from tc_modify_qdisc(),
    the risk of unforeseen side effects introduced by this change is
    minimal.
    
    Fixes: 5a781ccbd19e ("tc: Add support for configuring the taprio scheduler")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f58e43184226e5e9662088ccf1389e424a3a4cbd
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Thu Sep 15 13:08:01 2022 +0300

    net/sched: taprio: avoid disabling offload when it was never enabled
    
    [ Upstream commit db46e3a88a09c5cf7e505664d01da7238cd56c92 ]
    
    In an incredibly strange API design decision, qdisc->destroy() gets
    called even if qdisc->init() never succeeded, not exclusively since
    commit 87b60cfacf9f ("net_sched: fix error recovery at qdisc creation"),
    but apparently also earlier (in the case of qdisc_create_dflt()).
    
    The taprio qdisc does not fully acknowledge this when it attempts full
    offload, because it starts off with q->flags = TAPRIO_FLAGS_INVALID in
    taprio_init(), then it replaces q->flags with TCA_TAPRIO_ATTR_FLAGS
    parsed from netlink (in taprio_change(), tail called from taprio_init()).
    
    But in taprio_destroy(), we call taprio_disable_offload(), and this
    determines what to do based on FULL_OFFLOAD_IS_ENABLED(q->flags).
    
    But looking at the implementation of FULL_OFFLOAD_IS_ENABLED()
    (a bitwise check of bit 1 in q->flags), it is invalid to call this macro
    on q->flags when it contains TAPRIO_FLAGS_INVALID, because that is set
    to U32_MAX, and therefore FULL_OFFLOAD_IS_ENABLED() will return true on
    an invalid set of flags.
    
    As a result, it is possible to crash the kernel if user space forces an
    error between setting q->flags = TAPRIO_FLAGS_INVALID, and the calling
    of taprio_enable_offload(). This is because drivers do not expect the
    offload to be disabled when it was never enabled.
    
    The error that we force here is to attach taprio as a non-root qdisc,
    but instead as child of an mqprio root qdisc:
    
    $ tc qdisc add dev swp0 root handle 1: \
            mqprio num_tc 8 map 0 1 2 3 4 5 6 7 \
            queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 hw 0
    $ tc qdisc replace dev swp0 parent 1:1 \
            taprio num_tc 8 map 0 1 2 3 4 5 6 7 \
            queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 base-time 0 \
            sched-entry S 0x7f 990000 sched-entry S 0x80 100000 \
            flags 0x0 clockid CLOCK_TAI
    Unable to handle kernel paging request at virtual address fffffffffffffff8
    [fffffffffffffff8] pgd=0000000000000000, p4d=0000000000000000
    Internal error: Oops: 96000004 [#1] PREEMPT SMP
    Call trace:
     taprio_dump+0x27c/0x310
     vsc9959_port_setup_tc+0x1f4/0x460
     felix_port_setup_tc+0x24/0x3c
     dsa_slave_setup_tc+0x54/0x27c
     taprio_disable_offload.isra.0+0x58/0xe0
     taprio_destroy+0x80/0x104
     qdisc_create+0x240/0x470
     tc_modify_qdisc+0x1fc/0x6b0
     rtnetlink_rcv_msg+0x12c/0x390
     netlink_rcv_skb+0x5c/0x130
     rtnetlink_rcv+0x1c/0x2c
    
    Fix this by keeping track of the operations we made, and undo the
    offload only if we actually did it.
    
    I've added "bool offloaded" inside a 4 byte hole between "int clockid"
    and "atomic64_t picos_per_byte". Now the first cache line looks like
    below:
    
    $ pahole -C taprio_sched net/sched/sch_taprio.o
    struct taprio_sched {
            struct Qdisc * *           qdiscs;               /*     0     8 */
            struct Qdisc *             root;                 /*     8     8 */
            u32                        flags;                /*    16     4 */
            enum tk_offsets            tk_offset;            /*    20     4 */
            int                        clockid;              /*    24     4 */
            bool                       offloaded;            /*    28     1 */
    
            /* XXX 3 bytes hole, try to pack */
    
            atomic64_t                 picos_per_byte;       /*    32     0 */
    
            /* XXX 8 bytes hole, try to pack */
    
            spinlock_t                 current_entry_lock;   /*    40     0 */
    
            /* XXX 8 bytes hole, try to pack */
    
            struct sched_entry *       current_entry;        /*    48     8 */
            struct sched_gate_list *   oper_sched;           /*    56     8 */
            /* --- cacheline 1 boundary (64 bytes) --- */
    
    Fixes: 9c66d1564676 ("taprio: Add support for hardware offloading")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 510e703e4ed0e011db860bc21228aff48fc9eea7
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Sep 16 16:32:09 2022 +0300

    net: enetc: deny offload of tc-based TSN features on VF interfaces
    
    [ Upstream commit 5641c751fe2f92d3d9e8a8e03c1263ac8caa0b42 ]
    
    TSN features on the ENETC (taprio, cbs, gate, police) are configured
    through a mix of command BD ring messages and port registers:
    enetc_port_rd(), enetc_port_wr().
    
    Port registers are a region of the ENETC memory map which are only
    accessible from the PCIe Physical Function. They are not accessible from
    the Virtual Functions.
    
    Moreover, attempting to access these registers crashes the kernel:
    
    $ echo 1 > /sys/bus/pci/devices/0000\:00\:00.0/sriov_numvfs
    pci 0000:00:01.0: [1957:ef00] type 00 class 0x020001
    fsl_enetc_vf 0000:00:01.0: Adding to iommu group 15
    fsl_enetc_vf 0000:00:01.0: enabling device (0000 -> 0002)
    fsl_enetc_vf 0000:00:01.0 eno0vf0: renamed from eth0
    $ tc qdisc replace dev eno0vf0 root taprio num_tc 8 map 0 1 2 3 4 5 6 7 \
            queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 base-time 0 \
            sched-entry S 0x7f 900000 sched-entry S 0x80 100000 flags 0x2
    Unable to handle kernel paging request at virtual address ffff800009551a08
    Internal error: Oops: 96000007 [#1] PREEMPT SMP
    pc : enetc_setup_tc_taprio+0x170/0x47c
    lr : enetc_setup_tc_taprio+0x16c/0x47c
    Call trace:
     enetc_setup_tc_taprio+0x170/0x47c
     enetc_setup_tc+0x38/0x2dc
     taprio_change+0x43c/0x970
     taprio_init+0x188/0x1e0
     qdisc_create+0x114/0x470
     tc_modify_qdisc+0x1fc/0x6c0
     rtnetlink_rcv_msg+0x12c/0x390
    
    Split enetc_setup_tc() into separate functions for the PF and for the
    VF drivers. Also remove enetc_qos.o from being included into
    enetc-vf.ko, since it serves absolutely no purpose there.
    
    Fixes: 34c6adf1977b ("enetc: Configure the Time-Aware Scheduler via tc-taprio offload")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20220916133209.3351399-2-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11eb9ed088563cf395d18a908e80c718744daa9d
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Sep 16 16:32:08 2022 +0300

    net: enetc: move enetc_set_psfp() out of the common enetc_set_features()
    
    [ Upstream commit fed38e64d9b99d65a36c0dbadc3d3f8ddd9ea030 ]
    
    The VF netdev driver shouldn't respond to changes in the NETIF_F_HW_TC
    flag; only PFs should. Moreover, TSN-specific code should go to
    enetc_qos.c, which should not be included in the VF driver.
    
    Fixes: 79e499829f3f ("net: enetc: add hw tc hw offload features for PSPF capability")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20220916133209.3351399-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c60801e4e2b5602b67ca04cf8c0d196458efd153
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Fri Sep 16 15:37:40 2022 +0100

    wireguard: netlink: avoid variable-sized memcpy on sockaddr
    
    [ Upstream commit 26c013108c12b94bc023bf19198a4300596c98b1 ]
    
    Doing a variable-sized memcpy is slower, and the compiler isn't smart
    enough to turn this into a constant-size assignment.
    
    Further, Kees' latest fortified memcpy will actually bark, because the
    destination pointer is type sockaddr, not explicitly sockaddr_in or
    sockaddr_in6, so it thinks there's an overflow:
    
        memcpy: detected field-spanning write (size 28) of single field
        "&endpoint.addr" at drivers/net/wireguard/netlink.c:446 (size 16)
    
    Fix this by just assigning by using explicit casts for each checked
    case.
    
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reported-by: syzbot+a448cda4dba2dac50de5@syzkaller.appspotmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ebf690d1cde8d5f670a55116e043de10da81703
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Fri Sep 16 15:37:38 2022 +0100

    wireguard: ratelimiter: disable timings test by default
    
    [ Upstream commit 684dec3cf45da2b0848298efae4adf3b2aeafeda ]
    
    A previous commit tried to make the ratelimiter timings test more
    reliable but in the process made it less reliable on other
    configurations. This is an impossible problem to solve without
    increasingly ridiculous heuristics. And it's not even a problem that
    actually needs to be solved in any comprehensive way, since this is only
    ever used during development. So just cordon this off with a DEBUG_
    ifdef, just like we do for the trie's randomized tests, so it can be
    enabled while hacking on the code, and otherwise disabled in CI. In the
    process we also revert 151c8e499f47.
    
    Fixes: 151c8e499f47 ("wireguard: ratelimiter: use hrtimer in selftest")
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2dc533a7edb629f977fc9c06a081bfaf67f1585
Author: Alex Elder <elder@linaro.org>
Date:   Tue Sep 13 15:46:02 2022 -0500

    net: ipa: properly limit modem routing table use
    
    [ Upstream commit cf412ec333250cb82bafe57169204e14a9f1c2ac ]
    
    IPA can route packets between IPA-connected entities.  The AP and
    modem are currently the only such entities supported, and no routing
    is required to transfer packets between them.
    
    The number of entries in each routing table is fixed, and defined at
    initialization time.  Some of these entries are designated for use
    by the modem, and the rest are available for the AP to use.  The AP
    sends a QMI message to the modem which describes (among other
    things) information about routing table memory available for the
    modem to use.
    
    Currently the QMI initialization packet gives wrong information in
    its description of routing tables.  What *should* be supplied is the
    maximum index that the modem can use for the routing table memory
    located at a given location.  The current code instead supplies the
    total *number* of routing table entries.  Furthermore, the modem is
    granted the entire table, not just the subset it's supposed to use.
    
    This patch fixes this.  First, the ipa_mem_bounds structure is
    generalized so its "end" field can be interpreted either as a final
    byte offset, or a final array index.  Second, the IPv4 and IPv6
    (non-hashed and hashed) table information fields in the QMI
    ipa_init_modem_driver_req structure are changed to be ipa_mem_bounds
    rather than ipa_mem_array structures.  Third, we set the "end" value
    for each routing table to be the last index, rather than setting the
    "count" to be the number of indices.  Finally, instead of allowing
    the modem to use all of a routing table's memory, it is limited to
    just the portion meant to be used by the modem.  In all versions of
    IPA currently supported, that is IPA_ROUTE_MODEM_COUNT (8) entries.
    
    Update a few comments for clarity.
    
    Fixes: 530f9216a9537 ("soc: qcom: ipa: AP/modem communications")
    Signed-off-by: Alex Elder <elder@linaro.org>
    Link: https://lore.kernel.org/r/20220913204602.1803004-1-elder@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbdab7d68f203c26e0fb81610df6561e52c19f11
Author: Liang He <windhl@126.com>
Date:   Tue Sep 13 20:56:59 2022 +0800

    of: mdio: Add of_node_put() when breaking out of for_each_xx
    
    [ Upstream commit 1c48709e6d9d353acaaac1d8e33474756b121d78 ]
    
    In of_mdiobus_register(), we should call of_node_put() for 'child'
    escaped out of for_each_available_child_of_node().
    
    Fixes: 66bdede495c7 ("of_mdio: Fix broken PHY IRQ in case of probe deferral")
    Co-developed-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Liang He <windhl@126.com>
    Link: https://lore.kernel.org/r/20220913125659.3331969-1-windhl@126.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca86577c10bc9970586ca89981243c1905c436d3
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon May 30 19:55:57 2022 -0700

    drm/hisilicon: Add depends on MMU
    
    [ Upstream commit d8a79c03054911c375a2252627a429c9bc4615b6 ]
    
    The Kconfig symbol depended on MMU but was dropped by the commit
    acad3fe650a5 ("drm/hisilicon: Removed the dependency on the mmu")
    because it already had as a dependency ARM64 that already selects MMU.
    
    But later, commit a0f25a6bb319 ("drm/hisilicon/hibmc: Allow to be built
    if COMPILE_TEST is enabled") allowed the driver to be built for non-ARM64
    when COMPILE_TEST is set but that could lead to unmet direct dependencies
    and linking errors.
    
    Prevent a kconfig warning when MMU is not enabled by making
    DRM_HISI_HIBMC depend on MMU.
    
    WARNING: unmet direct dependencies detected for DRM_TTM
      Depends on [n]: HAS_IOMEM [=y] && DRM [=m] && MMU [=n]
      Selected by [m]:
      - DRM_TTM_HELPER [=m] && HAS_IOMEM [=y] && DRM [=m]
      - DRM_HISI_HIBMC [=m] && HAS_IOMEM [=y] && DRM [=m] && PCI [=y] && (ARM64 || COMPILE_TEST [=y])
    
    Fixes: acad3fe650a5 ("drm/hisilicon: Removed the dependency on the mmu")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Thomas Zimmermann <tzimmermann@suse.de>
    Cc: Xinliang Liu <xinliang.liu@linaro.org>
    Cc: Tian Tao  <tiantao6@hisilicon.com>
    Cc: John Stultz <jstultz@google.com>
    Cc: Xinwei Kong <kong.kongxinwei@hisilicon.com>
    Cc: Chen Feng <puck.chen@hisilicon.com>
    Cc: Christian Koenig <christian.koenig@amd.com>
    Cc: Huang Rui <ray.huang@amd.com>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220531025557.29593-1-rdunlap@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68c4acee6328df271918945c2e7a5c3d5b7a7823
Author: Javier Martinez Canillas <javierm@redhat.com>
Date:   Thu Dec 16 22:09:36 2021 +0100

    drm/hisilicon/hibmc: Allow to be built if COMPILE_TEST is enabled
    
    [ Upstream commit a0f25a6bb319aa05e04dcf51707c97c2881b4f47 ]
    
    The commit feeb07d0ca5a ("drm/hisilicon/hibmc: Make CONFIG_DRM_HISI_HIBMC
    depend on ARM64") made the driver Kconfig symbol to depend on ARM64 since
    it only supports that architecture and loading the module on others would
    lead to incorrect video modes being used.
    
    But it also prevented the driver to be built on other architectures which
    is useful to have compile test coverage when doing subsystem wide changes.
    
    Make the dependency instead to be (ARM64 || COMPILE_TEST), so the driver
    is buildable when the CONFIG_COMPILE_TEST option is enabled.
    
    Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
    Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211216210936.3329977-1-javierm@redhat.com
    Stable-dep-of: d8a79c030549 ("drm/hisilicon: Add depends on MMU")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8547c7bfc0617e7184e4da65b9b96681fcfe9998
Author: √ç√±igo Huguet <ihuguet@redhat.com>
Date:   Wed Sep 14 13:11:35 2022 +0200

    sfc: fix null pointer dereference in efx_hard_start_xmit
    
    [ Upstream commit 0a242eb2913a4aa3d6fbdb86559f27628e9466f3 ]
    
    Trying to get the channel from the tx_queue variable here is wrong
    because we can only be here if tx_queue is NULL, so we shouldn't
    dereference it. As the above comment in the code says, this is very
    unlikely to happen, but it's wrong anyway so let's fix it.
    
    I hit this issue because of a different bug that caused tx_queue to be
    NULL. If that happens, this is the error message that we get here:
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
      [...]
      RIP: 0010:efx_hard_start_xmit+0x153/0x170 [sfc]
    
    Fixes: 12804793b17c ("sfc: decouple TXQ type from label")
    Reported-by: Tianhao Zhao <tizhao@redhat.com>
    Signed-off-by: √ç√±igo Huguet <ihuguet@redhat.com>
    Acked-by: Edward Cree <ecree.xilinx@gmail.com>
    Link: https://lore.kernel.org/r/20220914111135.21038-1-ihuguet@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 360910b88d1466a90644a4e0533803b594344a2b
Author: √ç√±igo Huguet <ihuguet@redhat.com>
Date:   Wed Sep 14 12:36:48 2022 +0200

    sfc: fix TX channel offset when using legacy interrupts
    
    [ Upstream commit f232af4295653afa4ade3230462b3be15ad16419 ]
    
    In legacy interrupt mode the tx_channel_offset was hardcoded to 1, but
    that's not correct if efx_sepparate_tx_channels is false. In that case,
    the offset is 0 because the tx queues are in the single existing channel
    at index 0, together with the rx queue.
    
    Without this fix, as soon as you try to send any traffic, it tries to
    get the tx queues from an uninitialized channel getting these errors:
      WARNING: CPU: 1 PID: 0 at drivers/net/ethernet/sfc/tx.c:540 efx_hard_start_xmit+0x12e/0x170 [sfc]
      [...]
      RIP: 0010:efx_hard_start_xmit+0x12e/0x170 [sfc]
      [...]
      Call Trace:
       <IRQ>
       dev_hard_start_xmit+0xd7/0x230
       sch_direct_xmit+0x9f/0x360
       __dev_queue_xmit+0x890/0xa40
      [...]
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
      [...]
      RIP: 0010:efx_hard_start_xmit+0x153/0x170 [sfc]
      [...]
      Call Trace:
       <IRQ>
       dev_hard_start_xmit+0xd7/0x230
       sch_direct_xmit+0x9f/0x360
       __dev_queue_xmit+0x890/0xa40
      [...]
    
    Fixes: c308dfd1b43e ("sfc: fix wrong tx channel offset with efx_separate_tx_channels")
    Reported-by: Tianhao Zhao <tizhao@redhat.com>
    Signed-off-by: √ç√±igo Huguet <ihuguet@redhat.com>
    Acked-by: Edward Cree <ecree.xilinx@gmail.com>
    Link: https://lore.kernel.org/r/20220914103648.16902-1-ihuguet@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc750d7127a9c1d3e3fc32e7c662cdf8dba6596f
Author: Michal Jaron <michalx.jaron@intel.com>
Date:   Thu Sep 1 09:49:33 2022 +0200

    i40e: Fix set max_tx_rate when it is lower than 1 Mbps
    
    [ Upstream commit 198eb7e1b81d8ba676d0f4f120c092032ae69a8e ]
    
    While converting max_tx_rate from bytes to Mbps, this value was set to 0,
    if the original value was lower than 125000 bytes (1 Mbps). This would
    cause no transmission rate limiting to occur. This happened due to lack of
    check of max_tx_rate against the 1 Mbps value for max_tx_rate and the
    following division by 125000. Fix this issue by adding a helper
    i40e_bw_bytes_to_mbits() which sets max_tx_rate to minimum usable value of
    50 Mbps, if its value is less than 1 Mbps, otherwise do the required
    conversion by dividing by 125000.
    
    Fixes: 5ecae4120a6b ("i40e: Refactor VF BW rate limiting")
    Signed-off-by: Michal Jaron <michalx.jaron@intel.com>
    Signed-off-by: Andrii Staikov <andrii.staikov@intel.com>
    Tested-by: Bharathi Sreenivas <bharathi.sreenivas@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53220b99059acb0f5a7c0b9721e790bac8fce3f9
Author: Michal Jaron <michalx.jaron@intel.com>
Date:   Tue Sep 13 15:38:36 2022 +0200

    i40e: Fix VF set max MTU size
    
    [ Upstream commit 372539def2824c43b6afe2403045b140f65c5acc ]
    
    Max MTU sent to VF is set to 0 during memory allocation. It cause
    that max MTU on VF is changed to IAVF_MAX_RXBUFFER and does not
    depend on data from HW.
    
    Set max_mtu field in virtchnl_vf_resource struct to inform
    VF in GET_VF_RESOURCES msg what size should be max frame.
    
    Fixes: dab86afdbbd1 ("i40e/i40evf: Change the way we limit the maximum frame size for Rx")
    Signed-off-by: Michal Jaron <michalx.jaron@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7249a653fe5f1ce1eefc306f9ec3ea0a7247eb77
Author: Michal Jaron <michalx.jaron@intel.com>
Date:   Tue Sep 13 15:38:35 2022 +0200

    iavf: Fix set max MTU size with port VLAN and jumbo frames
    
    [ Upstream commit 399c98c4dc50b7eb7e9f24da7ffdda6f025676ef ]
    
    After setting port VLAN and MTU to 9000 on VF with ice driver there
    was an iavf error
    "PF returned error -5 (IAVF_ERR_PARAM) to our request 6".
    
    During queue configuration, VF's max packet size was set to
    IAVF_MAX_RXBUFFER but on ice max frame size was smaller by VLAN_HLEN
    due to making some space for port VLAN as VF is not aware whether it's
    in a port VLAN. This mismatch in sizes caused ice to reject queue
    configuration with ERR_PARAM error. Proper max_mtu is sent from ice PF
    to VF with GET_VF_RESOURCES msg but VF does not look at this.
    
    In iavf change max_frame from IAVF_MAX_RXBUFFER to max_mtu
    received from pf with GET_VF_RESOURCES msg to make vf's
    max_frame_size dependent from pf. Add check if received max_mtu is
    not in eligible range then set it to IAVF_MAX_RXBUFFER.
    
    Fixes: dab86afdbbd1 ("i40e/i40evf: Change the way we limit the maximum frame size for Rx")
    Signed-off-by: Michal Jaron <michalx.jaron@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 030e0688b6b2732b31d3b918f2cc0c17f959d615
Author: David Thompson <davthompson@nvidia.com>
Date:   Fri Sep 2 12:42:47 2022 -0400

    mlxbf_gige: clear MDIO gateway lock after read
    
    [ Upstream commit 182447b12144b7be9b63a273d27c5a11bd54960a ]
    
    The MDIO gateway (GW) lock in BlueField-2 GIGE logic is
    set after read.  This patch adds logic to make sure the
    lock is always cleared at the end of each MDIO transaction.
    
    Fixes: f92e1869d74e ("Add Mellanox BlueField Gigabit Ethernet driver")
    Reviewed-by: Asmaa Mnebhi <asmaa@nvidia.com>
    Signed-off-by: David Thompson <davthompson@nvidia.com>
    Link: https://lore.kernel.org/r/20220902164247.19862-1-davthompson@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93859f6878e7e65b99146e1b72bf9821ce75e849
Author: Norbert Zulinski <norbertx.zulinski@intel.com>
Date:   Wed Sep 14 15:39:13 2022 +0200

    iavf: Fix bad page state
    
    [ Upstream commit 66039eb9015eee4f7ff0c99b83c65c7ecb3c8190 ]
    
    Fix bad page state, free inappropriate page in handling dummy
    descriptor. iavf_build_skb now has to check not only if rx_buffer is
    NULL but also if size is zero, same thing in iavf_clean_rx_irq.
    Without this patch driver would free page that will be used
    by napi_build_skb.
    
    Fixes: a9f49e006030 ("iavf: Fix handling of dummy receive descriptors")
    Signed-off-by: Norbert Zulinski <norbertx.zulinski@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1dbe8a62098b20f5093cf75ade2f2dc9259b006
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Sat Aug 6 21:52:22 2022 +0200

    um: fix default console kernel parameter
    
    [ Upstream commit 782b1f70f8a8b28571949d2ba43fe88b96d75ec3 ]
    
    OpenWrt's UML with 5.15 was producing odd errors/warnings during preinit
    part of the early userspace portion:
    
    |[    0.000000] Kernel command line: ubd0=root.img root=98:0 console=tty
    |[...]
    |[    0.440000] random: jshn: uninitialized urandom read (4 bytes read)
    |[    0.460000] random: jshn: uninitialized urandom read (4 bytes read)
    |/etc/preinit: line 47: can't create /dev/tty: No such device or address
    |/etc/preinit: line 48: can't create /dev/tty: No such device or address
    |/etc/preinit: line 58: can't open /dev/tty: No such device or address
    |[...] repeated many times
    
    That "/dev/tty" came from the command line (which is automatically
    added if no console= parameter was specified for the uml binary).
    
    The TLDP project tells the following about the /dev/tty:
    <https://tldp.org/HOWTO/Text-Terminal-HOWTO-7.html#ss7.3>
    | /dev/tty stands for the controlling terminal (if any) for the current
    | process.[...]
    | /dev/tty is something like a link to the actually terminal device[..]
    
    The "(if any)" is important here, since it's possible for processes to
    not have a controlling terminal.
    
    I think this was a simple typo and the author wanted tty0 there.
    
    CC: Thomas Meyer <thomas@m3y3r.de>
    Fixes: d7ffac33631b ("um: stdio_console: Make preferred console")
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7400e2edfc9e86a59d8ad6b9a5a603844ae0366d
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Mon Sep 12 00:10:09 2022 +0800

    MIPS: Loongson32: Fix PHY-mode being left unspecified
    
    [ Upstream commit e9f3f8f488005f6da3cfb66070706770ecaef747 ]
    
    commit 0060c8783330 ("net: stmmac: implement support for passive mode
    converters via dt") has changed the plat->interface field semantics from
    containing the PHY-mode to specifying the MAC-PCS interface mode. Due to
    that the loongson32 platform code will leave the phylink interface
    uninitialized with the PHY-mode intended by the means of the actual
    platform setup. The commit-author most likely has just missed the
    arch-specific code to fix. Let's mend the Loongson32 platform code then by
    assigning the PHY-mode to the phy_interface field of the STMMAC platform
    data.
    
    Fixes: 0060c8783330 ("net: stmmac: implement support for passive mode converters via dt")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Signed-off-by: Keguang Zhang <keguang.zhang@gmail.com>
    Tested-by: Keguang Zhang <keguang.zhang@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abea65fa7713e6ee6cf12ea33b23acd9085f6b7e
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Sep 17 16:25:40 2022 -0700

    MIPS: lantiq: export clk_get_io() for lantiq_wdt.ko
    
    [ Upstream commit 502550123bee6a2ffa438409b5b9aad4d6db3a8c ]
    
    The lantiq WDT driver uses clk_get_io(), which is not exported,
    so export it to fix a build error:
    
    ERROR: modpost: "clk_get_io" [drivers/watchdog/lantiq_wdt.ko] undefined!
    
    Fixes: 287e3f3f4e68 ("MIPS: lantiq: implement support for clkdev api")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: John Crispin <john@phrozen.org>
    Cc: linux-mips@vger.kernel.org
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 831cf63c043e802fd6e12076bcec2caa453a6d20
Author: Heiko Schocher <hs@denx.de>
Date:   Fri Aug 26 13:50:21 2022 -0300

    drm/panel: simple: Fix innolux_g121i1_l01 bus_format
    
    [ Upstream commit a7c48a0ab87ae52c087d663e83e56b8225ac4cce ]
    
    innolux_g121i1_l01 sets bpc to 6, so use the corresponding bus format:
    MEDIA_BUS_FMT_RGB666_1X7X3_SPWG.
    
    Fixes: 4ae13e486866 ("drm/panel: simple: Add more properties to Innolux G121I1-L01")
    Signed-off-by: Heiko Schocher <hs@denx.de>
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Signed-off-by: Marek Vasut <marex@denx.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220826165021.1592532-1-festevam@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 408d5752b60f17f09e54adfa17538a5fbf38d128
Author: Benjamin Poirier <bpoirier@nvidia.com>
Date:   Wed Sep 7 16:56:41 2022 +0900

    net: team: Unsync device addresses on ndo_stop
    
    [ Upstream commit bd60234222b2fd5573526da7bcd422801f271f5f ]
    
    Netdev drivers are expected to call dev_{uc,mc}_sync() in their
    ndo_set_rx_mode method and dev_{uc,mc}_unsync() in their ndo_stop method.
    This is mentioned in the kerneldoc for those dev_* functions.
    
    The team driver calls dev_{uc,mc}_unsync() during ndo_uninit instead of
    ndo_stop. This is ineffective because address lists (dev->{uc,mc}) have
    already been emptied in unregister_netdevice_many() before ndo_uninit is
    called. This mistake can result in addresses being leftover on former team
    ports after a team device has been deleted; see test_LAG_cleanup() in the
    last patch in this series.
    
    Add unsync calls at their expected location, team_close().
    
    v3:
    * When adding or deleting a port, only sync/unsync addresses if the team
      device is up. In other cases, it is taken care of at the right time by
      ndo_open/ndo_set_rx_mode/ndo_stop.
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Signed-off-by: Benjamin Poirier <bpoirier@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f50265a4f3da792a44eb269c248070902cea8e21
Author: Benjamin Poirier <bpoirier@nvidia.com>
Date:   Wed Sep 7 16:56:40 2022 +0900

    net: bonding: Unsync device addresses on ndo_stop
    
    [ Upstream commit 86247aba599e5b07d7e828e6edaaebb0ef2b1158 ]
    
    Netdev drivers are expected to call dev_{uc,mc}_sync() in their
    ndo_set_rx_mode method and dev_{uc,mc}_unsync() in their ndo_stop method.
    This is mentioned in the kerneldoc for those dev_* functions.
    
    The bonding driver calls dev_{uc,mc}_unsync() during ndo_uninit instead of
    ndo_stop. This is ineffective because address lists (dev->{uc,mc}) have
    already been emptied in unregister_netdevice_many() before ndo_uninit is
    called. This mistake can result in addresses being leftover on former bond
    slaves after a bond has been deleted; see test_LAG_cleanup() in the last
    patch in this series.
    
    Add unsync calls, via bond_hw_addr_flush(), at their expected location,
    bond_close().
    Add dev_mc_add() call to bond_open() to match the above change.
    
    v3:
    * When adding or deleting a slave, only sync/unsync, add/del addresses if
      the bond is up. In other cases, it is taken care of at the right time by
      ndo_open/ndo_set_rx_mode/ndo_stop.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Benjamin Poirier <bpoirier@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6b277f7367e4837dfb0059a896b37a825ecba74
Author: Benjamin Poirier <bpoirier@nvidia.com>
Date:   Wed Sep 7 16:56:39 2022 +0900

    net: bonding: Share lacpdu_mcast_addr definition
    
    [ Upstream commit 1d9a143ee3408349700f44a9197b7ae0e4faae5d ]
    
    There are already a few definitions of arrays containing
    MULTICAST_LACPDU_ADDR and the next patch will add one more use. These all
    contain the same constant data so define one common instance for all
    bonding code.
    
    Signed-off-by: Benjamin Poirier <bpoirier@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 86247aba599e ("net: bonding: Unsync device addresses on ndo_stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b2ab46b6c63c757a884fe0313531228bf1c38a0
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Tue Sep 13 17:35:38 2022 +0530

    scsi: mpt3sas: Fix return value check of dma_get_required_mask()
    
    [ Upstream commit e0e0747de0ea3dd87cdbb0393311e17471a9baf1 ]
    
    Fix the incorrect return value check of dma_get_required_mask().  Due to
    this incorrect check, the driver was always setting the DMA mask to 63 bit.
    
    Link: https://lore.kernel.org/r/20220913120538.18759-2-sreekanth.reddy@broadcom.com
    Fixes: ba27c5cf286d ("scsi: mpt3sas: Don't change the DMA coherent mask after allocations")
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89df49e561b4a8948521fc3f8a013012eaa08f82
Author: Rafael Mendonca <rafaelmendsr@gmail.com>
Date:   Tue Sep 13 23:49:24 2022 -0300

    scsi: qla2xxx: Fix memory leak in __qlt_24xx_handle_abts()
    
    [ Upstream commit 601be20fc6a1b762044d2398befffd6bf236cebf ]
    
    Commit 8f394da36a36 ("scsi: qla2xxx: Drop TARGET_SCF_LOOKUP_LUN_FROM_TAG")
    made the __qlt_24xx_handle_abts() function return early if
    tcm_qla2xxx_find_cmd_by_tag() didn't find a command, but it missed to clean
    up the allocated memory for the management command.
    
    Link: https://lore.kernel.org/r/20220914024924.695604-1-rafaelmendsr@gmail.com
    Fixes: 8f394da36a36 ("scsi: qla2xxx: Drop TARGET_SCF_LOOKUP_LUN_FROM_TAG")
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5826a555f77c42171673bf459270cc1438d6829f
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Tue Sep 6 16:04:51 2022 +0300

    net: phy: aquantia: wait for the suspend/resume operations to finish
    
    [ Upstream commit ca2dccdeeb49a7e408112d681bf447984c845292 ]
    
    The Aquantia datasheet notes that after issuing a Processor-Intensive
    MDIO operation, like changing the low-power state of the device, the
    driver should wait for the operation to finish before issuing a new MDIO
    command.
    
    The new aqr107_wait_processor_intensive_op() function is added which can
    be used after these kind of MDIO operations. At the moment, we are only
    adding it at the end of the suspend/resume calls.
    
    The issue was identified on a board featuring the AQR113C PHY, on
    which commands like 'ip link (..) up / down' issued without any delays
    between them would render the link on the PHY to remain down.
    The issue was easy to reproduce with a one-liner:
     $ ip link set dev ethX down; ip link set dev ethX up; \
     ip link set dev ethX down; ip link set dev ethX up;
    
    Fixes: ac9e81c230eb ("net: phy: aquantia: add suspend / resume callbacks for AQR107 family")
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20220906130451.1483448-1-ioana.ciornei@nxp.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d2f1bc9067af43ca59c7c34b6be0a847638513a
Author: Ludovic Cintrat <ludovic.cintrat@gatewatcher.com>
Date:   Wed Sep 7 12:08:13 2022 +0200

    net: core: fix flow symmetric hash
    
    [ Upstream commit 64ae13ed478428135cddc2f1113dff162d8112d4 ]
    
    __flow_hash_consistentify() wrongly swaps ipv4 addresses in few cases.
    This function is indirectly used by __skb_get_hash_symmetric(), which is
    used to fanout packets in AF_PACKET.
    Intrusion detection systems may be impacted by this issue.
    
    __flow_hash_consistentify() computes the addresses difference then swaps
    them if the difference is negative. In few cases src - dst and dst - src
    are both negative.
    
    The following snippet mimics __flow_hash_consistentify():
    
    ```
     #include <stdio.h>
     #include <stdint.h>
    
     int main(int argc, char** argv) {
    
         int diffs_d, diffd_s;
         uint32_t dst  = 0xb225a8c0; /* 178.37.168.192 --> 192.168.37.178 */
         uint32_t src  = 0x3225a8c0; /*  50.37.168.192 --> 192.168.37.50  */
         uint32_t dst2 = 0x3325a8c0; /*  51.37.168.192 --> 192.168.37.51  */
    
         diffs_d = src - dst;
         diffd_s = dst - src;
    
         printf("src:%08x dst:%08x, diff(s-d)=%d(0x%x) diff(d-s)=%d(0x%x)\n",
                 src, dst, diffs_d, diffs_d, diffd_s, diffd_s);
    
         diffs_d = src - dst2;
         diffd_s = dst2 - src;
    
         printf("src:%08x dst:%08x, diff(s-d)=%d(0x%x) diff(d-s)=%d(0x%x)\n",
                 src, dst2, diffs_d, diffs_d, diffd_s, diffd_s);
    
         return 0;
     }
    ```
    
    Results:
    
    src:3225a8c0 dst:b225a8c0, \
        diff(s-d)=-2147483648(0x80000000) \
        diff(d-s)=-2147483648(0x80000000)
    
    src:3225a8c0 dst:3325a8c0, \
        diff(s-d)=-16777216(0xff000000) \
        diff(d-s)=16777216(0x1000000)
    
    In the first case the addresses differences are always < 0, therefore
    __flow_hash_consistentify() always swaps, thus dst->src and src->dst
    packets have differents hashes.
    
    Fixes: c3f8324188fa8 ("net: Add full IPv6 addresses to flow_keys")
    Signed-off-by: Ludovic Cintrat <ludovic.cintrat@gatewatcher.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d06006c7eb75587d986da46c48ba9274f94e8e7
Author: Lu Wei <luwei32@huawei.com>
Date:   Wed Sep 7 18:12:04 2022 +0800

    ipvlan: Fix out-of-bound bugs caused by unset skb->mac_header
    
    [ Upstream commit 81225b2ea161af48e093f58e8dfee6d705b16af4 ]
    
    If an AF_PACKET socket is used to send packets through ipvlan and the
    default xmit function of the AF_PACKET socket is changed from
    dev_queue_xmit() to packet_direct_xmit() via setsockopt() with the option
    name of PACKET_QDISC_BYPASS, the skb->mac_header may not be reset and
    remains as the initial value of 65535, this may trigger slab-out-of-bounds
    bugs as following:
    
    =================================================================
    UG: KASAN: slab-out-of-bounds in ipvlan_xmit_mode_l2+0xdb/0x330 [ipvlan]
    PU: 2 PID: 1768 Comm: raw_send Kdump: loaded Not tainted 6.0.0-rc4+ #6
    ardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33
    all Trace:
    print_address_description.constprop.0+0x1d/0x160
    print_report.cold+0x4f/0x112
    kasan_report+0xa3/0x130
    ipvlan_xmit_mode_l2+0xdb/0x330 [ipvlan]
    ipvlan_start_xmit+0x29/0xa0 [ipvlan]
    __dev_direct_xmit+0x2e2/0x380
    packet_direct_xmit+0x22/0x60
    packet_snd+0x7c9/0xc40
    sock_sendmsg+0x9a/0xa0
    __sys_sendto+0x18a/0x230
    __x64_sys_sendto+0x74/0x90
    do_syscall_64+0x3b/0x90
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    The root cause is:
      1. packet_snd() only reset skb->mac_header when sock->type is SOCK_RAW
         and skb->protocol is not specified as in packet_parse_headers()
    
      2. packet_direct_xmit() doesn't reset skb->mac_header as dev_queue_xmit()
    
    In this case, skb->mac_header is 65535 when ipvlan_xmit_mode_l2() is
    called. So when ipvlan_xmit_mode_l2() gets mac header with eth_hdr() which
    use "skb->head + skb->mac_header", out-of-bound access occurs.
    
    This patch replaces eth_hdr() with skb_eth_hdr() in ipvlan_xmit_mode_l2()
    and reset mac header in multicast to solve this out-of-bound bug.
    
    Fixes: 2ad7bf363841 ("ipvlan: Initial check-in of the IPVLAN driver.")
    Signed-off-by: Lu Wei <luwei32@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dae9d2abe25bba901fe52731e285431fe4e0c230
Author: Brett Creeley <brett.creeley@intel.com>
Date:   Thu Sep 1 16:34:40 2022 +0200

    iavf: Fix cached head and tail value for iavf_get_tx_pending
    
    [ Upstream commit 809f23c0423a43266e47a7dc67e95b5cb4d1cbfc ]
    
    The underlying hardware may or may not allow reading of the head or tail
    registers and it really makes no difference if we use the software
    cached values. So, always used the software cached values.
    
    Fixes: 9c6c12595b73 ("i40e: Detection and recovery of TX queue hung logic moved to service_task from tx_timeout")
    Signed-off-by: Brett Creeley <brett.creeley@intel.com>
    Co-developed-by: Norbert Zulinski <norbertx.zulinski@intel.com>
    Signed-off-by: Norbert Zulinski <norbertx.zulinski@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34447d64b8d28e4d6a73d73f07c879959d68fbfe
Author: Dave Ertman <david.m.ertman@intel.com>
Date:   Tue Aug 9 10:24:23 2022 -0700

    ice: Don't double unplug aux on peer initiated reset
    
    [ Upstream commit 23c619190318376769ad7b61504c2ea0703fb783 ]
    
    In the IDC callback that is accessed when the aux drivers request a reset,
    the function to unplug the aux devices is called.  This function is also
    called in the ice_prepare_for_reset function. This double call is causing
    a "scheduling while atomic" BUG.
    
    [  662.676430] ice 0000:4c:00.0 rocep76s0: cqp opcode = 0x1 maj_err_code = 0xffff min_err_code = 0x8003
    
    [  662.676609] ice 0000:4c:00.0 rocep76s0: [Modify QP Cmd Error][op_code=8] status=-29 waiting=1 completion_err=1 maj=0xffff min=0x8003
    
    [  662.815006] ice 0000:4c:00.0 rocep76s0: ICE OICR event notification: oicr = 0x10000003
    
    [  662.815014] ice 0000:4c:00.0 rocep76s0: critical PE Error, GLPE_CRITERR=0x00011424
    
    [  662.815017] ice 0000:4c:00.0 rocep76s0: Requesting a reset
    
    [  662.815475] BUG: scheduling while atomic: swapper/37/0/0x00010002
    
    [  662.815475] BUG: scheduling while atomic: swapper/37/0/0x00010002
    [  662.815477] Modules linked in: rpcsec_gss_krb5 auth_rpcgss nfsv4 dns_resolver nfs lockd grace fscache netfs rfkill 8021q garp mrp stp llc vfat fat rpcrdma intel_rapl_msr intel_rapl_common sunrpc i10nm_edac rdma_ucm nfit ib_srpt libnvdimm ib_isert iscsi_target_mod x86_pkg_temp_thermal intel_powerclamp coretemp target_core_mod snd_hda_intel ib_iser snd_intel_dspcfg libiscsi snd_intel_sdw_acpi scsi_transport_iscsi kvm_intel iTCO_wdt rdma_cm snd_hda_codec kvm iw_cm ipmi_ssif iTCO_vendor_support snd_hda_core irqbypass crct10dif_pclmul crc32_pclmul ghash_clmulni_intel snd_hwdep snd_seq snd_seq_device rapl snd_pcm snd_timer isst_if_mbox_pci pcspkr isst_if_mmio irdma intel_uncore idxd acpi_ipmi joydev isst_if_common snd mei_me idxd_bus ipmi_si soundcore i2c_i801 mei ipmi_devintf i2c_smbus i2c_ismt ipmi_msghandler acpi_power_meter acpi_pad rv(OE) ib_uverbs ib_cm ib_core xfs libcrc32c ast i2c_algo_bit drm_vram_helper drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm_ttm_helpe
     r ttm
    [  662.815546]  nvme nvme_core ice drm crc32c_intel i40e t10_pi wmi pinctrl_emmitsburg dm_mirror dm_region_hash dm_log dm_mod fuse
    [  662.815557] Preemption disabled at:
    [  662.815558] [<0000000000000000>] 0x0
    [  662.815563] CPU: 37 PID: 0 Comm: swapper/37 Kdump: loaded Tainted: G S         OE     5.17.1 #2
    [  662.815566] Hardware name: Intel Corporation D50DNP/D50DNP, BIOS SE5C6301.86B.6624.D18.2111021741 11/02/2021
    [  662.815568] Call Trace:
    [  662.815572]  <IRQ>
    [  662.815574]  dump_stack_lvl+0x33/0x42
    [  662.815581]  __schedule_bug.cold.147+0x7d/0x8a
    [  662.815588]  __schedule+0x798/0x990
    [  662.815595]  schedule+0x44/0xc0
    [  662.815597]  schedule_preempt_disabled+0x14/0x20
    [  662.815600]  __mutex_lock.isra.11+0x46c/0x490
    [  662.815603]  ? __ibdev_printk+0x76/0xc0 [ib_core]
    [  662.815633]  device_del+0x37/0x3d0
    [  662.815639]  ice_unplug_aux_dev+0x1a/0x40 [ice]
    [  662.815674]  ice_schedule_reset+0x3c/0xd0 [ice]
    [  662.815693]  irdma_iidc_event_handler.cold.7+0xb6/0xd3 [irdma]
    [  662.815712]  ? bitmap_find_next_zero_area_off+0x45/0xa0
    [  662.815719]  ice_send_event_to_aux+0x54/0x70 [ice]
    [  662.815741]  ice_misc_intr+0x21d/0x2d0 [ice]
    [  662.815756]  __handle_irq_event_percpu+0x4c/0x180
    [  662.815762]  handle_irq_event_percpu+0xf/0x40
    [  662.815764]  handle_irq_event+0x34/0x60
    [  662.815766]  handle_edge_irq+0x9a/0x1c0
    [  662.815770]  __common_interrupt+0x62/0x100
    [  662.815774]  common_interrupt+0xb4/0xd0
    [  662.815779]  </IRQ>
    [  662.815780]  <TASK>
    [  662.815780]  asm_common_interrupt+0x1e/0x40
    [  662.815785] RIP: 0010:cpuidle_enter_state+0xd6/0x380
    [  662.815789] Code: 49 89 c4 0f 1f 44 00 00 31 ff e8 65 d7 95 ff 45 84 ff 74 12 9c 58 f6 c4 02 0f 85 64 02 00 00 31 ff e8 ae c5 9c ff fb 45 85 f6 <0f> 88 12 01 00 00 49 63 d6 4c 2b 24 24 48 8d 04 52 48 8d 04 82 49
    [  662.815791] RSP: 0018:ff2c2c4f18edbe80 EFLAGS: 00000202
    [  662.815793] RAX: ff280805df140000 RBX: 0000000000000002 RCX: 000000000000001f
    [  662.815795] RDX: 0000009a52da2d08 RSI: ffffffff93f8240b RDI: ffffffff93f53ee7
    [  662.815796] RBP: ff5e2bd11ff41928 R08: 0000000000000000 R09: 000000000002f8c0
    [  662.815797] R10: 0000010c3f18e2cf R11: 000000000000000f R12: 0000009a52da2d08
    [  662.815798] R13: ffffffff94ad7e20 R14: 0000000000000002 R15: 0000000000000000
    [  662.815801]  cpuidle_enter+0x29/0x40
    [  662.815803]  do_idle+0x261/0x2b0
    [  662.815807]  cpu_startup_entry+0x19/0x20
    [  662.815809]  start_secondary+0x114/0x150
    [  662.815813]  secondary_startup_64_no_verify+0xd5/0xdb
    [  662.815818]  </TASK>
    [  662.815846] bad: scheduling from the idle thread!
    [  662.815849] CPU: 37 PID: 0 Comm: swapper/37 Kdump: loaded Tainted: G S      W  OE     5.17.1 #2
    [  662.815852] Hardware name: Intel Corporation D50DNP/D50DNP, BIOS SE5C6301.86B.6624.D18.2111021741 11/02/2021
    [  662.815853] Call Trace:
    [  662.815855]  <IRQ>
    [  662.815856]  dump_stack_lvl+0x33/0x42
    [  662.815860]  dequeue_task_idle+0x20/0x30
    [  662.815863]  __schedule+0x1c3/0x990
    [  662.815868]  schedule+0x44/0xc0
    [  662.815871]  schedule_preempt_disabled+0x14/0x20
    [  662.815873]  __mutex_lock.isra.11+0x3a8/0x490
    [  662.815876]  ? __ibdev_printk+0x76/0xc0 [ib_core]
    [  662.815904]  device_del+0x37/0x3d0
    [  662.815909]  ice_unplug_aux_dev+0x1a/0x40 [ice]
    [  662.815937]  ice_schedule_reset+0x3c/0xd0 [ice]
    [  662.815961]  irdma_iidc_event_handler.cold.7+0xb6/0xd3 [irdma]
    [  662.815979]  ? bitmap_find_next_zero_area_off+0x45/0xa0
    [  662.815985]  ice_send_event_to_aux+0x54/0x70 [ice]
    [  662.816011]  ice_misc_intr+0x21d/0x2d0 [ice]
    [  662.816033]  __handle_irq_event_percpu+0x4c/0x180
    [  662.816037]  handle_irq_event_percpu+0xf/0x40
    [  662.816039]  handle_irq_event+0x34/0x60
    [  662.816042]  handle_edge_irq+0x9a/0x1c0
    [  662.816045]  __common_interrupt+0x62/0x100
    [  662.816048]  common_interrupt+0xb4/0xd0
    [  662.816052]  </IRQ>
    [  662.816053]  <TASK>
    [  662.816054]  asm_common_interrupt+0x1e/0x40
    [  662.816057] RIP: 0010:cpuidle_enter_state+0xd6/0x380
    [  662.816060] Code: 49 89 c4 0f 1f 44 00 00 31 ff e8 65 d7 95 ff 45 84 ff 74 12 9c 58 f6 c4 02 0f 85 64 02 00 00 31 ff e8 ae c5 9c ff fb 45 85 f6 <0f> 88 12 01 00 00 49 63 d6 4c 2b 24 24 48 8d 04 52 48 8d 04 82 49
    [  662.816063] RSP: 0018:ff2c2c4f18edbe80 EFLAGS: 00000202
    [  662.816065] RAX: ff280805df140000 RBX: 0000000000000002 RCX: 000000000000001f
    [  662.816067] RDX: 0000009a52da2d08 RSI: ffffffff93f8240b RDI: ffffffff93f53ee7
    [  662.816068] RBP: ff5e2bd11ff41928 R08: 0000000000000000 R09: 000000000002f8c0
    [  662.816070] R10: 0000010c3f18e2cf R11: 000000000000000f R12: 0000009a52da2d08
    [  662.816071] R13: ffffffff94ad7e20 R14: 0000000000000002 R15: 0000000000000000
    [  662.816075]  cpuidle_enter+0x29/0x40
    [  662.816077]  do_idle+0x261/0x2b0
    [  662.816080]  cpu_startup_entry+0x19/0x20
    [  662.816083]  start_secondary+0x114/0x150
    [  662.816087]  secondary_startup_64_no_verify+0xd5/0xdb
    [  662.816091]  </TASK>
    [  662.816169] bad: scheduling from the idle thread!
    
    The correct place to unplug the aux devices for a reset is in the
    prepare_for_reset function, as this is a common place for all reset flows.
    It also has built in protection from being called twice in a single reset
    instance before the aux devices are replugged.
    
    Fixes: f9f5301e7e2d4 ("ice: Register auxiliary device to provide RDMA")
    Signed-off-by: Dave Ertman <david.m.ertman@intel.com>
    Tested-by: Helena Anna Dubel <helena.anna.dubel@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 816eab147e5c6f6621922b8515ad9010ceb1735e
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Sep 7 10:26:18 2022 +0200

    netfilter: nfnetlink_osf: fix possible bogus match in nf_osf_find()
    
    [ Upstream commit 559c36c5a8d730c49ef805a72b213d3bba155cc8 ]
    
    nf_osf_find() incorrectly returns true on mismatch, this leads to
    copying uninitialized memory area in nft_osf which can be used to leak
    stale kernel stack data to userspace.
    
    Fixes: 22c7652cdaa8 ("netfilter: nft_osf: Add version option support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc33ffbc361e2579a8f31b8724ef85d4117440e4
Author: David Leadbeater <dgl@dgl.cx>
Date:   Fri Aug 26 14:56:57 2022 +1000

    netfilter: nf_conntrack_irc: Tighten matching on DCC message
    
    [ Upstream commit e8d5dfd1d8747b56077d02664a8838c71ced948e ]
    
    CTCP messages should only be at the start of an IRC message, not
    anywhere within it.
    
    While the helper only decodes packes in the ORIGINAL direction, its
    possible to make a client send a CTCP message back by empedding one into
    a PING request.  As-is, thats enough to make the helper believe that it
    saw a CTCP message.
    
    Fixes: 869f37d8e48f ("[NETFILTER]: nf_conntrack/nf_nat: add IRC helper port")
    Signed-off-by: David Leadbeater <dgl@dgl.cx>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0606c5d5fefdba5835a70d10bd610a35e5522965
Author: Igor Ryzhov <iryzhov@nfware.com>
Date:   Wed Jun 5 12:32:40 2019 +0300

    netfilter: nf_conntrack_sip: fix ct_sip_walk_headers
    
    [ Upstream commit 39aebedeaaa95757f5c1f2ddb5f43fdddbf478ca ]
    
    ct_sip_next_header and ct_sip_get_header return an absolute
    value of matchoff, not a shift from current dataoff.
    So dataoff should be assigned matchoff, not incremented by it.
    
    This issue can be seen in the scenario when there are multiple
    Contact headers and the first one is using a hostname and other headers
    use IP addresses. In this case, ct_sip_walk_headers will work as follows:
    
    The first ct_sip_get_header call to will find the first Contact header
    but will return -1 as the header uses a hostname. But matchoff will
    be changed to the offset of this header. After that, dataoff should be
    set to matchoff, so that the next ct_sip_get_header call find the next
    Contact header. But instead of assigning dataoff to matchoff, it is
    incremented by it, which is not correct, as matchoff is an absolute
    value of the offset. So on the next call to the ct_sip_get_header,
    dataoff will be incorrect, and the next Contact header may not be
    found at all.
    
    Fixes: 05e3ced297fe ("[NETFILTER]: nf_conntrack_sip: introduce SIP-URI parsing helper")
    Signed-off-by: Igor Ryzhov <iryzhov@nfware.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0babb5bc85ee8ff013977c3f397dff62ec4dfcfe
Author: Fabio Estevam <festevam@denx.de>
Date:   Sat Aug 27 14:51:39 2022 -0300

    arm64: dts: rockchip: Remove 'enable-active-low' from rk3399-puma
    
    [ Upstream commit a994b34b9abb9c08ee09e835b4027ff2147f9d94 ]
    
    The 'enable-active-low' property is not a valid one.
    
    Only 'enable-active-high' is valid, and when this property is absent
    the gpio regulator will act as active low by default.
    
    Remove the invalid 'enable-active-low' property.
    
    Fixes: 2c66fc34e945 ("arm64: dts: rockchip: add RK3399-Q7 (Puma) SoM")
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Link: https://lore.kernel.org/r/20220827175140.1696699-1-festevam@denx.de
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd5a6c5a08752b613e83ad2cb5133e72a64b876d
Author: Liang He <windhl@126.com>
Date:   Wed Jul 20 15:32:34 2022 +0800

    dmaengine: ti: k3-udma-private: Fix refcount leak bug in of_xudma_dev_get()
    
    [ Upstream commit f9fdb0b86f087c2b7f6c6168dd0985a3c1eda87e ]
    
    We should call of_node_put() for the reference returned by
    of_parse_phandle() in fail path or when it is not used anymore.
    Here we only need to move the of_node_put() before the check.
    
    Fixes: d70241913413 ("dmaengine: ti: k3-udma: Add glue layer for non DMAengine users")
    Signed-off-by: Liang He <windhl@126.com>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Link: https://lore.kernel.org/r/20220720073234.1255474-1-windhl@126.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b0e46d970b4aca155b853c1633357177f97b1d0
Author: zain wang <wzz@rock-chips.com>
Date:   Tue Aug 30 13:16:17 2022 -0700

    arm64: dts: rockchip: Set RK3399-Gru PCLK_EDP to 24 MHz
    
    [ Upstream commit 8123437cf46ea5a0f6ca5cb3c528d8b6db97b9c2 ]
    
    We've found the AUX channel to be less reliable with PCLK_EDP at a
    higher rate (typically 25 MHz). This is especially important on systems
    with PSR-enabled panels (like Gru-Kevin), since we make heavy, constant
    use of AUX.
    
    According to Rockchip, using any rate other than 24 MHz can cause
    "problems between syncing the PHY an PCLK", which leads to all sorts of
    unreliabilities around register operations.
    
    Fixes: d67a38c5a623 ("arm64: dts: rockchip: move core edp from rk3399-kevin to shared chromebook")
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: zain wang <wzz@rock-chips.com>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Link: https://lore.kernel.org/r/20220830131212.v2.1.I98d30623f13b785ca77094d0c0fd4339550553b6@changeid
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e352fea1d0fccd9a34409df6ed5deec823594405
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Jul 21 19:27:27 2022 +0200

    drm/mediatek: dsi: Add atomic {destroy,duplicate}_state, reset callbacks
    
    [ Upstream commit eeda05b5e92f51d9a09646ecb493f0a1e872a6ef ]
    
    Add callbacks for atomic_destroy_state, atomic_duplicate_state and
    atomic_reset to restore functionality of the DSI driver: this solves
    vblank timeouts when another bridge is present in the chain.
    
    Tested bridge chain: DSI <=> ANX7625 => aux-bus panel
    
    Fixes: 7f6335c6a258 ("drm/mediatek: Modify dsi funcs to atomic operations")
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Tested-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: N√≠colas F. R. A. Prado <nfraprado@collabora.com>
    Tested-by: N√≠colas F. R. A. Prado <nfraprado@collabora.com>
    Link: https://patchwork.kernel.org/project/linux-mediatek/patch/20220721172727.14624-1-angelogioacchino.delregno@collabora.com/
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43733b6c9fdaa991f0c0239701f5424aafde9522
Author: Jagan Teki <jagan@amarulasolutions.com>
Date:   Mon Aug 22 16:05:24 2022 +0530

    arm64: dts: rockchip: Fix typo in lisense text for PX30.Core
    
    [ Upstream commit 4a00c43818dcc19be97250d4c3c4a1e2f1ed4f9d ]
    
    Fix the Amarula Solutions typo mistake in lisense text added
    in Engicam PX30.Core SoM dtsi.
    
    Fixes: d92a7c331f53c ("arm64: dts: rockchip: Add Engicam PX30.Core SOM")
    Signed-off-by: Jagan Teki <jagan@amarulasolutions.com>
    Link: https://lore.kernel.org/r/20220822103524.266731-1-jagan@amarulasolutions.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2929463a9effa70dda444102458fc1c7b266742d
Author: Brian Norris <briannorris@chromium.org>
Date:   Mon Aug 22 16:45:04 2022 -0700

    arm64: dts: rockchip: Pull up wlan wake# on Gru-Bob
    
    [ Upstream commit e5467359a725de90b6b8d0dd865500f6373828ca ]
    
    The Gru-Bob board does not have a pull-up resistor on its
    WLAN_HOST_WAKE# pin, but Kevin does. The production/vendor kernel
    specified the pin configuration correctly as a pull-up, but this didn't
    get ported correctly to upstream.
    
    This means Bob's WLAN_HOST_WAKE# pin is floating, causing inconsistent
    wakeup behavior.
    
    Note that bt_host_wake_l has a similar dynamic, but apparently the
    upstream choice was to redundantly configure both internal and external
    pull-up on Kevin (see the "Kevin has an external pull up" comment in
    rk3399-gru.dtsi). This doesn't cause any functional problem, although
    it's perhaps wasteful.
    
    Fixes: 8559bbeeb849 ("arm64: dts: rockchip: add Google Bob")
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20220822164453.1.I75c57b48b0873766ec993bdfb7bc1e63da5a1637@changeid
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 166a332463b507c52ac6ec91e902c8bec36a5746
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Aug 17 18:27:30 2022 +0100

    firmware: arm_scmi: Fix the asynchronous reset requests
    
    [ Upstream commit b75c83d9b961fd3abf7310f8d36d5e6e9f573efb ]
    
    SCMI Reset protocol specification allows the asynchronous reset request
    only when an autonomous reset action is specified. Reset requests based
    on explicit assert/deassert of signals should not be served
    asynchronously.
    
    Current implementation will instead issue an asynchronous request in any
    case, as long as the reset domain had advertised to support asynchronous
    resets.
    
    Avoid requesting the asynchronous resets when the reset action is not
    of the autonomous type, even if the target reset domain does, in general,
    support the asynchronous requests.
    
    Link: https://lore.kernel.org/r/20220817172731.1185305-6-cristian.marussi@arm.com
    Fixes: 95a15d80aa0d ("firmware: arm_scmi: Add RESET protocol in SCMI v2.0")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f08a1b26cfc53b7715abc46857c6023bb1b87de
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Aug 17 18:27:29 2022 +0100

    firmware: arm_scmi: Harden accesses to the reset domains
    
    [ Upstream commit e9076ffbcaed5da6c182b144ef9f6e24554af268 ]
    
    Accessing reset domains descriptors by the index upon the SCMI drivers
    requests through the SCMI reset operations interface can potentially
    lead to out-of-bound violations if the SCMI driver misbehave.
    
    Add an internal consistency check before any such domains descriptors
    accesses.
    
    Link: https://lore.kernel.org/r/20220817172731.1185305-5-cristian.marussi@arm.com
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Stable-dep-of: b75c83d9b961 ("firmware: arm_scmi: Fix the asynchronous reset requests")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ec5a534d77c340387af485b311b39d7a186b105
Author: Dave Chinner <dchinner@redhat.com>
Date:   Thu Sep 22 08:15:01 2022 -0700

    xfs: validate inode fork size against fork format
    
    [ Upstream commit 1eb70f54c445fcbb25817841e774adb3d912f3e8 ]
    
    xfs_repair catches fork size/format mismatches, but the in-kernel
    verifier doesn't, leading to null pointer failures when attempting
    to perform operations on the fork. This can occur in the
    xfs_dir_is_empty() where the in-memory fork format does not match
    the size and so the fork data pointer is accessed incorrectly.
    
    Note: this causes new failures in xfs/348 which is testing mode vs
    ftype mismatches. We now detect a regular file that has been changed
    to a directory or symlink mode as being corrupt because the data
    fork is for a symlink or directory should be in local form when
    there are only 3 bytes of data in the data fork. Hence the inode
    verify for the regular file now fires w/ -EFSCORRUPTED because
    the inode fork format does not match the format the corrupted mode
    says it should be in.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5caa3a12795383654bcb1272605801816c216726
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Sep 22 08:15:00 2022 -0700

    xfs: fix xfs_ifree() error handling to not leak perag ref
    
    [ Upstream commit 6f5097e3367a7c0751e165e4c15bc30511a4ba38 ]
    
    For some reason commit 9a5280b312e2e ("xfs: reorder iunlink remove
    operation in xfs_ifree") replaced a jump to the exit path in the
    event of an xfs_difree() error with a direct return, which skips
    releasing the perag reference acquired at the top of the function.
    Restore the original code to drop the reference on error.
    
    Fixes: 9a5280b312e2e ("xfs: reorder iunlink remove operation in xfs_ifree")
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e7b231687fda5cdec8a6e2e87cc86256943f892
Author: Dave Chinner <dchinner@redhat.com>
Date:   Thu Sep 22 08:14:59 2022 -0700

    xfs: reorder iunlink remove operation in xfs_ifree
    
    [ Upstream commit 9a5280b312e2e7898b6397b2ca3cfd03f67d7be1 ]
    
    The O_TMPFILE creation implementation creates a specific order of
    operations for inode allocation/freeing and unlinked list
    modification. Currently both are serialised by the AGI, so the order
    doesn't strictly matter as long as the are both in the same
    transaction.
    
    However, if we want to move the unlinked list insertions largely out
    from under the AGI lock, then we have to be concerned about the
    order in which we do unlinked list modification operations.
    O_TMPFILE creation tells us this order is inode allocation/free,
    then unlinked list modification.
    
    Change xfs_ifree() to use this same ordering on unlinked list
    removal. This way we always guarantee that when we enter the
    iunlinked list removal code from this path, we already have the AGI
    locked and we don't have to worry about lock nesting AGI reads
    inside unlink list locks because it's already locked and attached to
    the transaction.
    
    We can do this safely as the inode freeing and unlinked list removal
    are done in the same transaction and hence are atomic operations
    with respect to log recovery.
    
    Reported-by: Frank Hofmann <fhofmann@cloudflare.com>
    Fixes: 298f7bec503f ("xfs: pin inode backing buffer to the inode log item")
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28c7ef86b21b42ddc5d4f56d1acaabd02ffab020
Author: Will Deacon <will@kernel.org>
Date:   Thu Sep 22 22:57:15 2022 +0100

    vmlinux.lds.h: CFI: Reduce alignment of jump-table to function alignment
    
    commit 13b0566962914e167cb3238fbe29ced618f07a27 upstream.
    
    Due to undocumented, hysterical raisins on x86, the CFI jump-table
    sections in .text are needlessly aligned to PMD_SIZE in the vmlinux
    linker script. When compiling a CFI-enabled arm64 kernel with a 64KiB
    page-size, a PMD maps 512MiB of virtual memory and so the .text section
    increases to a whopping 940MiB and blows the final Image up to 960MiB.
    Others report a link failure.
    
    Since the CFI jump-table requires only instruction alignment, reduce the
    alignment directives to function alignment for parity with other parts
    of the .text section. This reduces the size of the .text section for the
    aforementioned 64KiB page size arm64 kernel to 19MiB for a much more
    reasonable total Image size of 39MiB.
    
    Cc: Sami Tolvanen <samitolvanen@google.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: "Mohan Rao .vanimina" <mailtoc.mohanrao@gmail.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/all/CAL_GTzigiNOMYkOPX1KDnagPhJtFNqSK=1USNbS0wUL4PW6-Uw@mail.gmail.com/
    Fixes: cf68fffb66d6 ("add support for Clang CFI")
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20220922215715.13345-1-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c3edb82d67b2be9231174ac2af4af60d4af7549
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Fri Sep 16 23:17:07 2022 +0300

    arm64: topology: fix possible overflow in amu_fie_setup()
    
    commit d4955c0ad77dbc684fc716387070ac24801b8bca upstream.
    
    cpufreq_get_hw_max_freq() returns max frequency in kHz as *unsigned int*,
    while freq_inv_set_max_ratio() gets passed this frequency in Hz as 'u64'.
    Multiplying max frequency by 1000 can potentially result in overflow --
    multiplying by 1000ULL instead should avoid that...
    
    Found by Linux Verification Center (linuxtesting.org) with the SVACE static
    analysis tool.
    
    Fixes: cd0ed03a8903 ("arm64: use activity monitors for frequency invariance")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/01493d64-2bce-d968-86dc-11a122a9c07d@omp.ru
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2427a04bce8648a2ec47bf9e3f57253926a5ce9d
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Aug 24 03:30:57 2022 +0000

    KVM: x86: Inject #UD on emulated XSETBV if XSAVES isn't enabled
    
    commit 50b2d49bafa16e6311ab2da82f5aafc5f9ada99b upstream.
    
    Inject #UD when emulating XSETBV if CR4.OSXSAVE is not set.  This also
    covers the "XSAVE not supported" check, as setting CR4.OSXSAVE=1 #GPs if
    XSAVE is not supported (and userspace gets to keep the pieces if it
    forces incoherent vCPU state).
    
    Add a comment to kvm_emulate_xsetbv() to call out that the CPU checks
    CR4.OSXSAVE before checking for intercepts.  AMD'S APM implies that #UD
    has priority (says that intercepts are checked before #GP exceptions),
    while Intel's SDM says nothing about interception priority.  However,
    testing on hardware shows that both AMD and Intel CPUs prioritize the #UD
    over interception.
    
    Fixes: 02d4160fbd76 ("x86: KVM: add xsetbv to the emulator")
    Cc: stable@vger.kernel.org
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20220824033057.3576315-4-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61703b248be993eb4997b00ae5d3318e6d8f3c5b
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Mon Sep 19 18:39:29 2022 +0200

    mm: slub: fix flush_cpu_slab()/__free_slab() invocations in task context.
    
    commit e45cc288724f0cfd497bb5920bcfa60caa335729 upstream.
    
    Commit 5a836bf6b09f ("mm: slub: move flush_cpu_slab() invocations
    __free_slab() invocations out of IRQ context") moved all flush_cpu_slab()
    invocations to the global workqueue to avoid a problem related
    with deactivate_slab()/__free_slab() being called from an IRQ context
    on PREEMPT_RT kernels.
    
    When the flush_all_cpu_locked() function is called from a task context
    it may happen that a workqueue with WQ_MEM_RECLAIM bit set ends up
    flushing the global workqueue, this will cause a dependency issue.
    
     workqueue: WQ_MEM_RECLAIM nvme-delete-wq:nvme_delete_ctrl_work [nvme_core]
       is flushing !WQ_MEM_RECLAIM events:flush_cpu_slab
     WARNING: CPU: 37 PID: 410 at kernel/workqueue.c:2637
       check_flush_dependency+0x10a/0x120
     Workqueue: nvme-delete-wq nvme_delete_ctrl_work [nvme_core]
     RIP: 0010:check_flush_dependency+0x10a/0x120[  453.262125] Call Trace:
     __flush_work.isra.0+0xbf/0x220
     ? __queue_work+0x1dc/0x420
     flush_all_cpus_locked+0xfb/0x120
     __kmem_cache_shutdown+0x2b/0x320
     kmem_cache_destroy+0x49/0x100
     bioset_exit+0x143/0x190
     blk_release_queue+0xb9/0x100
     kobject_cleanup+0x37/0x130
     nvme_fc_ctrl_free+0xc6/0x150 [nvme_fc]
     nvme_free_ctrl+0x1ac/0x2b0 [nvme_core]
    
    Fix this bug by creating a workqueue for the flush operation with
    the WQ_MEM_RECLAIM bit set.
    
    Fixes: 5a836bf6b09f ("mm: slub: move flush_cpu_slab() invocations __free_slab() invocations out of IRQ context")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d6e55e0c03804e1e227b80a5746e086d6c6696c
Author: Chao Yu <chao.yu@oppo.com>
Date:   Wed Aug 31 22:54:54 2022 +0800

    mm/slub: fix to return errno if kmalloc() fails
    
    commit 7e9c323c52b379d261a72dc7bd38120a761a93cd upstream.
    
    In create_unique_id(), kmalloc(, GFP_KERNEL) can fail due to
    out-of-memory, if it fails, return errno correctly rather than
    triggering panic via BUG_ON();
    
    kernel BUG at mm/slub.c:5893!
    Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    
    Call trace:
     sysfs_slab_add+0x258/0x260 mm/slub.c:5973
     __kmem_cache_create+0x60/0x118 mm/slub.c:4899
     create_cache mm/slab_common.c:229 [inline]
     kmem_cache_create_usercopy+0x19c/0x31c mm/slab_common.c:335
     kmem_cache_create+0x1c/0x28 mm/slab_common.c:390
     f2fs_kmem_cache_create fs/f2fs/f2fs.h:2766 [inline]
     f2fs_init_xattr_caches+0x78/0xb4 fs/f2fs/xattr.c:808
     f2fs_fill_super+0x1050/0x1e0c fs/f2fs/super.c:4149
     mount_bdev+0x1b8/0x210 fs/super.c:1400
     f2fs_mount+0x44/0x58 fs/f2fs/super.c:4512
     legacy_get_tree+0x30/0x74 fs/fs_context.c:610
     vfs_get_tree+0x40/0x140 fs/super.c:1530
     do_new_mount+0x1dc/0x4e4 fs/namespace.c:3040
     path_mount+0x358/0x914 fs/namespace.c:3370
     do_mount fs/namespace.c:3383 [inline]
     __do_sys_mount fs/namespace.c:3591 [inline]
     __se_sys_mount fs/namespace.c:3568 [inline]
     __arm64_sys_mount+0x2f8/0x408 fs/namespace.c:3568
    
    Cc: <stable@kernel.org>
    Fixes: 81819f0fc8285 ("SLUB core")
    Reported-by: syzbot+81684812ea68216e08c5@syzkaller.appspotmail.com
    Reviewed-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Signed-off-by: Chao Yu <chao.yu@oppo.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71075d7d463281fd43cebf3a10170503a1c72995
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Sun Sep 11 13:40:05 2022 -0700

    net: mana: Add rmb after checking owner bits
    
    commit 6fd2c68da55c552f86e401ebe40c4a619025ef69 upstream.
    
    Per GDMA spec, rmb is necessary after checking owner_bits, before
    reading EQ or CQ entries.
    
    Add rmb in these two places to comply with the specs.
    
    Cc: stable@vger.kernel.org
    Fixes: ca9c54d2d6a5 ("net: mana: Add a driver for Microsoft Azure Network Adapter (MANA)")
    Reported-by: Sinan Kaya <Sinan.Kaya@microsoft.com>
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Link: https://lore.kernel.org/r/1662928805-15861-1-git-send-email-haiyangz@microsoft.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19aea370fd091eb1f2e2c03d0123bf02c9b5ccf9
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Thu Aug 11 10:25:44 2022 +0200

    can: flexcan: flexcan_mailbox_read() fix return value for drop = true
    
    commit a09721dd47c8468b3f2fdd73f40422699ffe26dd upstream.
    
    The following happened on an i.MX25 using flexcan with many packets on
    the bus:
    
    The rx-offload queue reached a length more than skb_queue_len_max. In
    can_rx_offload_offload_one() the drop variable was set to true which
    made the call to .mailbox_read() (here: flexcan_mailbox_read()) to
    _always_ return ERR_PTR(-ENOBUFS) and drop the rx'ed CAN frame. So
    can_rx_offload_offload_one() returned ERR_PTR(-ENOBUFS), too.
    
    can_rx_offload_irq_offload_fifo() looks as follows:
    
    |       while (1) {
    |               skb = can_rx_offload_offload_one(offload, 0);
    |               if (IS_ERR(skb))
    |                       continue;
    |               if (!skb)
    |                       break;
    |               ...
    |       }
    
    The flexcan driver wrongly always returns ERR_PTR(-ENOBUFS) if drop is
    requested, even if there is no CAN frame pending. As the i.MX25 is a
    single core CPU, while the rx-offload processing is active, there is
    no thread to process packets from the offload queue. So the queue
    doesn't get any shorter and this results is a tight loop.
    
    Instead of always returning ERR_PTR(-ENOBUFS) if drop is requested,
    return NULL if no CAN frame is pending.
    
    Changes since v1: https://lore.kernel.org/all/20220810144536.389237-1-u.kleine-koenig@pengutronix.de
    - don't break in can_rx_offload_irq_offload_fifo() in case of an error,
      return NULL in flexcan_mailbox_read() in case of no pending CAN frame
      instead
    
    Fixes: 4e9c9484b085 ("can: rx-offload: Prepare for CAN FD support")
    Link: https://lore.kernel.org/all/20220811094254.1864367-1-mkl@pengutronix.de
    Cc: stable@vger.kernel.org # v5.5
    Suggested-by: Uwe Kleine-K√∂nig <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Uwe Kleine-K√∂nig <u.kleine-koenig@pengutronix.de>
    Tested-by: Thorsten Scherer <t.scherer@eckelmann.de>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf0197aea19562be03a5c179afd51adbb2a5bf80
Author: Peter Collingbourne <pcc@google.com>
Date:   Tue Sep 13 19:00:01 2022 -0700

    kasan: call kasan_malloc() from __kmalloc_*track_caller()
    
    commit 5373b8a09d6e037ee0587cb5d9fe4cc09077deeb upstream.
    
    We were failing to call kasan_malloc() from __kmalloc_*track_caller()
    which was causing us to sometimes fail to produce KASAN error reports
    for allocations made using e.g. devm_kcalloc(), as the KASAN poison was
    not being initialized. Fix it.
    
    Signed-off-by: Peter Collingbourne <pcc@google.com>
    Cc: <stable@vger.kernel.org> # 5.15
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c75288a4902b9ecd68c0f38bf792ce7ca2ece968
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Sep 24 01:55:27 2021 +0000

    riscv: fix a nasty sigreturn bug...
    
    commit 762df359aa5849e010ef04c3ed79d57588ce17d9 upstream.
    
    riscv has an equivalent of arm bug fixed by 653d48b22166 ("arm: fix
    really nasty sigreturn bug"); if signal gets caught by an interrupt that
    hits when we have the right value in a0 (-513), *and* another signal
    gets delivered upon sigreturn() (e.g. included into the blocked mask for
    the first signal and posted while the handler had been running), the
    syscall restart logics will see regs->cause equal to EXC_SYSCALL (we are
    in a syscall, after all) and a0 already restored to its original value
    (-513, which happens to be -ERESTARTNOINTR) and assume that we need to
    apply the usual syscall restart logics.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Fixes: e2c0cdfba7f6 ("RISC-V: User-facing API")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/YxJEiSq%2FCGaL6Gm9@ZenIV/
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97da736cd11ae73bdf2f5e21e24446b8349e0168
Author: Meng Li <Meng.Li@windriver.com>
Date:   Wed Sep 21 11:20:20 2022 +0800

    gpiolib: cdev: Set lineevent_state::irq after IRQ register successfully
    
    commit 69bef19d6b9700e96285f4b4e28691cda3dcd0d1 upstream.
    
    When running gpio test on nxp-ls1028 platform with below command
    gpiomon --num-events=3 --rising-edge gpiochip1 25
    There will be a warning trace as below:
    Call trace:
    free_irq+0x204/0x360
    lineevent_free+0x64/0x70
    gpio_ioctl+0x598/0x6a0
    __arm64_sys_ioctl+0xb4/0x100
    invoke_syscall+0x5c/0x130
    ......
    el0t_64_sync+0x1a0/0x1a4
    The reason of this issue is that calling request_threaded_irq()
    function failed, and then lineevent_free() is invoked to release
    the resource. Since the lineevent_state::irq was already set, so
    the subsequent invocation of free_irq() would trigger the above
    warning call trace. To fix this issue, set the lineevent_state::irq
    after the IRQ register successfully.
    
    Fixes: 468242724143 ("gpiolib: cdev: refactor lineevent cleanup into lineevent_free")
    Cc: stable@vger.kernel.org
    Signed-off-by: Meng Li <Meng.Li@windriver.com>
    Reviewed-by: Kent Gibson <warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b26723e058faaf11b532fb4aa16d6849d581790
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Sep 20 16:30:31 2022 +0300

    gpio: mockup: Fix potential resource leakage when register a chip
    
    commit 02743c4091ccfb246f5cdbbe3f44b152d5d12933 upstream.
    
    If creation of software node fails, the locally allocated string
    array is left unfreed. Free it on error path.
    
    Fixes: 6fda593f3082 ("gpio: mockup: Convert to use software nodes")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18352095a0d581f6aeb1e9fc9d68cc0152cd64b4
Author: Bartosz Golaszewski <brgl@bgdev.pl>
Date:   Tue Sep 20 09:18:41 2022 +0200

    gpio: mockup: fix NULL pointer dereference when removing debugfs
    
    commit b7df41a6f79dfb18ba2203f8c5f0e9c0b9b57f68 upstream.
    
    We now remove the device's debugfs entries when unbinding the driver.
    This now causes a NULL-pointer dereference on module exit because the
    platform devices are unregistered *after* the global debugfs directory
    has been recursively removed. Fix it by unregistering the devices first.
    
    Fixes: 303e6da99429 ("gpio: mockup: remove gpio debugfs when remove device")
    Cc: Wei Yongjun <weiyongjun1@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2279e977405bd59095468f5f8b7676eced606e72
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Aug 26 20:23:29 2022 +0200

    wifi: mt76: fix reading current per-tid starting sequence number for aggregation
    
    commit c3a510e2b53785df31d882a773c4c0780b4c825f upstream.
    
    The code was accidentally shifting register values down by tid % 32 instead of
    (tid * field_size) % 32.
    
    Cc: stable@vger.kernel.org
    Fixes: a28bef561a5c ("mt76: mt7615: re-enable offloading of sequence number assignment")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220826182329.18155-1-nbd@nbd.name
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5bc5a274d54a1ca2ec060bef4fc0232901e3967
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Sep 20 17:08:23 2022 +0200

    efi: libstub: check Shim mode using MokSBStateRT
    
    commit 5f56a74cc0a6d9b9f8ba89cea29cd7c4774cb2b1 upstream.
    
    We currently check the MokSBState variable to decide whether we should
    treat UEFI secure boot as being disabled, even if the firmware thinks
    otherwise. This is used by shim to indicate that it is not checking
    signatures on boot images. In the kernel, we use this to relax lockdown
    policies.
    
    However, in cases where shim is not even being used, we don't want this
    variable to interfere with lockdown, given that the variable may be
    non-volatile and therefore persist across a reboot. This means setting
    it once will persistently disable lockdown checks on a given system.
    
    So switch to the mirrored version of this variable, called MokSBStateRT,
    which is supposed to be volatile, and this is something we can check.
    
    Cc: <stable@vger.kernel.org> # v4.19+
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Reviewed-by: Peter Jones <pjones@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef43fee9f211ae2b17e717293cd7f7a629ee7b75
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Aug 4 15:39:48 2022 +0200

    efi: x86: Wipe setup_data on pure EFI boot
    
    commit 63bf28ceb3ebbe76048c3fb2987996ca1ae64f83 upstream.
    
    When booting the x86 kernel via EFI using the LoadImage/StartImage boot
    services [as opposed to the deprecated EFI handover protocol], the setup
    header is taken from the image directly, and given that EFI's LoadImage
    has no Linux/x86 specific knowledge regarding struct bootparams or
    struct setup_header, any absolute addresses in the setup header must
    originate from the file and not from a prior loading stage.
    
    Since we cannot generally predict where LoadImage() decides to load an
    image (*), such absolute addresses must be treated as suspect: even if a
    prior boot stage intended to make them point somewhere inside the
    [signed] image, there is no way to validate that, and if they point at
    an arbitrary location in memory, the setup_data nodes will not be
    covered by any signatures or TPM measurements either, and could be made
    to contain an arbitrary sequence of SETUP_xxx nodes, which could
    interfere quite badly with the early x86 boot sequence.
    
    (*) Note that, while LoadImage() does take a buffer/size tuple in
    addition to a device path, which can be used to provide the image
    contents directly, it will re-allocate such images, as the memory
    footprint of an image is generally larger than the PE/COFF file
    representation.
    
    Cc: <stable@vger.kernel.org> # v5.10+
    Link: https://lore.kernel.org/all/20220904165321.1140894-1-Jason@zx2c4.com/
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Acked-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b173f1f8ef9e0cf004e4172acfc40c635f250d6d
Author: Gil Fine <gil.fine@intel.com>
Date:   Thu Sep 8 13:43:20 2022 +0300

    thunderbolt: Add support for Intel Maple Ridge single port controller
    
    commit 14c7d905283744809e6b82efae2f490660a11cda upstream.
    
    Add support for Maple Ridge discrete USB4 host controller from Intel
    which has a single USB4 port (versus the already supported dual port
    Maple Ridge USB4 host controller).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gil Fine <gil.fine@intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65b13f951fe67fcf96bfbd13e189007416b905e0
Author: William Wu <william.wu@rock-chips.com>
Date:   Thu Sep 1 16:34:46 2022 +0800

    usb: dwc3: core: leave default DMA if the controller does not support 64-bit DMA
    
    commit 91062e663b261815573ce00967b1895a99e668df upstream.
    
    On some DWC3 controllers (e.g. Rockchip SoCs), the DWC3 core
    doesn't support 64-bit DMA address width. In this case, this
    driver should use the default 32-bit mask. Otherwise, the DWC3
    controller will break if it runs on above 4GB physical memory
    environment.
    
    This patch reads the DWC_USB3_AWIDTH bits of GHWPARAMS0 which
    used for the DMA address width, and only configure 64-bit DMA
    mask if the DWC_USB3_AWIDTH is 64.
    
    Fixes: 45d39448b4d0 ("usb: dwc3: support 64 bit DMA in platform driver")
    Cc: stable <stable@kernel.org>
    Reviewed-by: Sven Peter <sven@svenpeter.dev>
    Signed-off-by: William Wu <william.wu@rock-chips.com>
    Link: https://lore.kernel.org/r/20220901083446.3799754-1-william.wu@rock-chips.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7143f6cf58db8d41550c417d2ec0fb00d8c62caf
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 22 17:10:27 2022 +0200

    media: flexcop-usb: fix endpoint type check
    
    commit 763679f0eeff0185fc431498849bbc1c24460875 upstream.
    
    Commit d725d20e81c2 ("media: flexcop-usb: sanity checking of endpoint
    type") tried to add an endpoint type sanity check for the single
    isochronous endpoint but instead broke the driver by checking the wrong
    descriptor or random data beyond the last endpoint descriptor.
    
    Make sure to check the right endpoint descriptor.
    
    Fixes: d725d20e81c2 ("media: flexcop-usb: sanity checking of endpoint type")
    Cc: Oliver Neukum <oneukum@suse.com>
    Cc: stable@vger.kernel.org      # 5.9
    Reported-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20220822151027.27026-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8a76a2e514fbbb315a6dfff2d342de2de833994
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Sep 8 12:31:51 2022 +0100

    btrfs: fix hang during unmount when stopping a space reclaim worker
    
    commit a362bb864b8db4861977d00bd2c3222503ccc34b upstream.
    
    Often when running generic/562 from fstests we can hang during unmount,
    resulting in a trace like this:
    
      Sep 07 11:52:00 debian9 unknown: run fstests generic/562 at 2022-09-07 11:52:00
      Sep 07 11:55:32 debian9 kernel: INFO: task umount:49438 blocked for more than 120 seconds.
      Sep 07 11:55:32 debian9 kernel:       Not tainted 6.0.0-rc2-btrfs-next-122 #1
      Sep 07 11:55:32 debian9 kernel: "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      Sep 07 11:55:32 debian9 kernel: task:umount          state:D stack:    0 pid:49438 ppid: 25683 flags:0x00004000
      Sep 07 11:55:32 debian9 kernel: Call Trace:
      Sep 07 11:55:32 debian9 kernel:  <TASK>
      Sep 07 11:55:32 debian9 kernel:  __schedule+0x3c8/0xec0
      Sep 07 11:55:32 debian9 kernel:  ? rcu_read_lock_sched_held+0x12/0x70
      Sep 07 11:55:32 debian9 kernel:  schedule+0x5d/0xf0
      Sep 07 11:55:32 debian9 kernel:  schedule_timeout+0xf1/0x130
      Sep 07 11:55:32 debian9 kernel:  ? lock_release+0x224/0x4a0
      Sep 07 11:55:32 debian9 kernel:  ? lock_acquired+0x1a0/0x420
      Sep 07 11:55:32 debian9 kernel:  ? trace_hardirqs_on+0x2c/0xd0
      Sep 07 11:55:32 debian9 kernel:  __wait_for_common+0xac/0x200
      Sep 07 11:55:32 debian9 kernel:  ? usleep_range_state+0xb0/0xb0
      Sep 07 11:55:32 debian9 kernel:  __flush_work+0x26d/0x530
      Sep 07 11:55:32 debian9 kernel:  ? flush_workqueue_prep_pwqs+0x140/0x140
      Sep 07 11:55:32 debian9 kernel:  ? trace_clock_local+0xc/0x30
      Sep 07 11:55:32 debian9 kernel:  __cancel_work_timer+0x11f/0x1b0
      Sep 07 11:55:32 debian9 kernel:  ? close_ctree+0x12b/0x5b3 [btrfs]
      Sep 07 11:55:32 debian9 kernel:  ? __trace_bputs+0x10b/0x170
      Sep 07 11:55:32 debian9 kernel:  close_ctree+0x152/0x5b3 [btrfs]
      Sep 07 11:55:32 debian9 kernel:  ? evict_inodes+0x166/0x1c0
      Sep 07 11:55:32 debian9 kernel:  generic_shutdown_super+0x71/0x120
      Sep 07 11:55:32 debian9 kernel:  kill_anon_super+0x14/0x30
      Sep 07 11:55:32 debian9 kernel:  btrfs_kill_super+0x12/0x20 [btrfs]
      Sep 07 11:55:32 debian9 kernel:  deactivate_locked_super+0x2e/0xa0
      Sep 07 11:55:32 debian9 kernel:  cleanup_mnt+0x100/0x160
      Sep 07 11:55:32 debian9 kernel:  task_work_run+0x59/0xa0
      Sep 07 11:55:32 debian9 kernel:  exit_to_user_mode_prepare+0x1a6/0x1b0
      Sep 07 11:55:32 debian9 kernel:  syscall_exit_to_user_mode+0x16/0x40
      Sep 07 11:55:32 debian9 kernel:  do_syscall_64+0x48/0x90
      Sep 07 11:55:32 debian9 kernel:  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      Sep 07 11:55:32 debian9 kernel: RIP: 0033:0x7fcde59a57a7
      Sep 07 11:55:32 debian9 kernel: RSP: 002b:00007ffe914217c8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      Sep 07 11:55:32 debian9 kernel: RAX: 0000000000000000 RBX: 00007fcde5ae8264 RCX: 00007fcde59a57a7
      Sep 07 11:55:32 debian9 kernel: RDX: 0000000000000000 RSI: 0000000000000000 RDI: 000055b57556cdd0
      Sep 07 11:55:32 debian9 kernel: RBP: 000055b57556cba0 R08: 0000000000000000 R09: 00007ffe91420570
      Sep 07 11:55:32 debian9 kernel: R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
      Sep 07 11:55:32 debian9 kernel: R13: 000055b57556cdd0 R14: 000055b57556ccb8 R15: 0000000000000000
      Sep 07 11:55:32 debian9 kernel:  </TASK>
    
    What happens is the following:
    
    1) The cleaner kthread tries to start a transaction to delete an unused
       block group, but the metadata reservation can not be satisfied right
       away, so a reservation ticket is created and it starts the async
       metadata reclaim task (fs_info->async_reclaim_work);
    
    2) Writeback for all the filler inodes with an i_size of 2K starts
       (generic/562 creates a lot of 2K files with the goal of filling
       metadata space). We try to create an inline extent for them, but we
       fail when trying to insert the inline extent with -ENOSPC (at
       cow_file_range_inline()) - since this is not critical, we fallback
       to non-inline mode (back to cow_file_range()), reserve extents, create
       extent maps and create the ordered extents;
    
    3) An unmount starts, enters close_ctree();
    
    4) The async reclaim task is flushing stuff, entering the flush states one
       by one, until it reaches RUN_DELAYED_IPUTS. There it runs all current
       delayed iputs.
    
       After running the delayed iputs and before calling
       btrfs_wait_on_delayed_iputs(), one or more ordered extents complete,
       and btrfs_add_delayed_iput() is called for each one through
       btrfs_finish_ordered_io() -> btrfs_put_ordered_extent(). This results
       in bumping fs_info->nr_delayed_iputs from 0 to some positive value.
    
       So the async reclaim task blocks at btrfs_wait_on_delayed_iputs() waiting
       for fs_info->nr_delayed_iputs to become 0;
    
    5) The current transaction is committed by the transaction kthread, we then
       start unpinning extents and end up calling btrfs_try_granting_tickets()
       through unpin_extent_range(), since we released some space.
       This results in satisfying the ticket created by the cleaner kthread at
       step 1, waking up the cleaner kthread;
    
    6) At close_ctree() we ask the cleaner kthread to park;
    
    7) The cleaner kthread starts the transaction, deletes the unused block
       group, and then calls kthread_should_park(), which returns true, so it
       parks. And at this point we have the delayed iputs added by the
       completion of the ordered extents still pending;
    
    8) Then later at close_ctree(), when we call:
    
           cancel_work_sync(&fs_info->async_reclaim_work);
    
       We hang forever, since the cleaner was parked and no one else can run
       delayed iputs after that, while the reclaim task is waiting for the
       remaining delayed iputs to be completed.
    
    Fix this by waiting for all ordered extents to complete and running the
    delayed iputs before attempting to stop the async reclaim tasks. Note that
    we can not wait for ordered extents with btrfs_wait_ordered_roots() (or
    other similar functions) because that waits for the BTRFS_ORDERED_COMPLETE
    flag to be set on an ordered extent, but the delayed iput is added after
    that, when doing the final btrfs_put_ordered_extent(). So instead wait for
    the work queues used for executing ordered extent completion to be empty,
    which works because we do the final put on an ordered extent at
    btrfs_finish_ordered_io() (while we are in the unmount context).
    
    Fixes: d6fd0ae25c6495 ("Btrfs: fix missing delayed iputs on unmount")
    CC: stable@vger.kernel.org # 5.15+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46053262b5f5781ec0d8a5ec8566dae9b797ca37
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Sep 8 12:31:50 2022 +0100

    btrfs: fix hang during unmount when stopping block group reclaim worker
    
    commit 8a1f1e3d1eecf9d2359a2709e276743a67e145db upstream.
    
    During early unmount, at close_ctree(), we try to stop the block group
    reclaim task with cancel_work_sync(), but that may hang if the block group
    reclaim task is currently at btrfs_relocate_block_group() waiting for the
    flag BTRFS_FS_UNFINISHED_DROPS to be cleared from fs_info->flags. During
    unmount we only clear that flag later, after trying to stop the block
    group reclaim task.
    
    Fix that by clearing BTRFS_FS_UNFINISHED_DROPS before trying to stop the
    block group reclaim task and after setting BTRFS_FS_CLOSING_START, so that
    if the reclaim task is waiting on that bit, it will stop immediately after
    being woken, because it sees the filesystem is closing (with a call to
    btrfs_fs_closing()), and then returns immediately with -EINTR.
    
    Fixes: 31e70e527806c5 ("btrfs: fix hang during unmount when block group reclaim task is running")
    CC: stable@vger.kernel.org # 5.15+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b02f86689a5ad226adf9df7e84287dcd21e583f6
Author: Yi Liu <yi.l.liu@intel.com>
Date:   Wed Sep 21 10:40:54 2022 +0800

    iommu/vt-d: Check correct capability for sagaw determination
    
    commit 154897807050c1161cb2660e502fc0470d46b986 upstream.
    
    Check 5-level paging capability for 57 bits address width instead of
    checking 1GB large page capability.
    
    Fixes: 53fc7ad6edf2 ("iommu/vt-d: Correctly calculate sagaw value of IOMMU")
    Cc: stable@vger.kernel.org
    Reported-by: Raghunathan Srinivasan <raghunathan.srinivasan@intel.com>
    Signed-off-by: Yi Liu <yi.l.liu@intel.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Reviewed-by: Kevin Tian <kevin.tian@intel.com>
    Reviewed-by: Raghunathan Srinivasan <raghunathan.srinivasan@intel.com>
    Link: https://lore.kernel.org/r/20220916071212.2223869-2-yi.l.liu@intel.com
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a963fe6d0eb6ef0a15b3aade7c186cd5bb7bd01f
Author: Callum Osmotherly <callum.osmotherly@gmail.com>
Date:   Thu Sep 15 22:36:08 2022 +0930

    ALSA: hda/realtek: Enable 4-speaker output Dell Precision 5530 laptop
    
    commit 1885ff13d4c42910b37a0e3f7c2f182520f4eed1 upstream.
    
    Just as with the 5570 (and the other Dell laptops), this enables the two
    subwoofer speakers on the Dell Precision 5530 together with the main
    ones, significantly increasing the audio quality. I've tested this
    myself on a 5530 and can confirm it's working as expected.
    
    Signed-off-by: Callum Osmotherly <callum.osmotherly@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YyMjQO3mhyXlMbCf@piranha
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b2fa20da6238a4e992a60cb5af1648d8d805161
Author: Luke D. Jones <luke@ljones.dev>
Date:   Thu Sep 15 20:09:21 2022 +1200

    ALSA: hda/realtek: Add quirk for ASUS GA503R laptop
    
    commit ba1f818053b0668a1ce2fe86b840e81b592cc560 upstream.
    
    The ASUS G15 2022 (GA503R) series laptop has the same node-to-DAC pairs
    as early models and the G14, this includes bass speakers which are by
    default mapped incorrectly to the 0x06 node.
    
    Add a quirk to use the same DAC pairs as the G14.
    
    Signed-off-by: Luke D. Jones <luke@ljones.dev>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220915080921.35563-4-luke@ljones.dev
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb54e457c4ad44f1960c6f625f585a6ce99212cf
Author: Luke D. Jones <luke@ljones.dev>
Date:   Thu Sep 15 20:09:20 2022 +1200

    ALSA: hda/realtek: Add pincfg for ASUS G533Z HP jack
    
    commit bc2c23549ccd7105eb6ff0d4f0ac519285628673 upstream.
    
    Fixes up the pincfg for ASUS ROG Strix G15 (G533Z) headphone combo jack
    
    [ Fixed the position in the quirk table by tiwai ]
    
    Signed-off-by: Luke D. Jones <luke@ljones.dev>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220915080921.35563-3-luke@ljones.dev
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0898469913cd2d20cfea9345cf8a9f3a6f1d1f97
Author: Luke D. Jones <luke@ljones.dev>
Date:   Thu Sep 15 20:09:19 2022 +1200

    ALSA: hda/realtek: Add pincfg for ASUS G513 HP jack
    
    commit c611e659044168e7abcbae8ba1ea833521498fbb upstream.
    
    Fixes up the pincfg for ASUS ROG Strix G513 headphone and mic combo jack
    
    [ Fixed the position in the quirk table by tiwai ]
    
    Signed-off-by: Luke D. Jones <luke@ljones.dev>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220915080921.35563-2-luke@ljones.dev
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6a746b4fca5269d3b87fae1e5df5c280767a0f7
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Sep 15 17:47:24 2022 +0200

    ALSA: hda/realtek: Re-arrange quirk table entries
    
    commit b16c8f229a58eaddfc58aab447253464abd3c85e upstream.
    
    A few entries have been mistakenly inserted in wrong positions without
    considering the SSID ordering.  Place them at right positions.
    
    Fixes: b7557267c233 ("ALSA: hda/realtek: Add quirk for ASUS GA402")
    Fixes: 94db9cc8f8fa ("ALSA: hda/realtek: Add quirk for ASUS GU603")
    Fixes: 739d0959fbed ("ALSA: hda: Add quirk for ASUS Flow x13")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220915154724.31634-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41e974cd6ecb920ecf04fc0e608f29f1e697e597
Author: Callum Osmotherly <callum.osmotherly@gmail.com>
Date:   Wed Sep 14 18:44:00 2022 +0930

    ALSA: hda/realtek: Enable 4-speaker output Dell Precision 5570 laptop
    
    commit bdc9b7396f7d4d6533e70fd8d5472f505b5ef58f upstream.
    
    The Dell Precision 5570 uses the same 4-speakers-on-ALC289 just like the
    previous Precision 5560. I replicated that patch onto this one, and can
    confirm that the audio is much better (the woofers are now working);
    I've tested it on my Dell Precision 5570.
    
    Signed-off-by: Callum Osmotherly <callum.osmotherly@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YyGbWM5wEoFMbW2v@piranha
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5421125bbda88ef2510fabc12e8adce4778e3c5d
Author: huangwenhui <huangwenhuia@uniontech.com>
Date:   Tue Sep 13 13:46:22 2022 +0800

    ALSA: hda/realtek: Add quirk for Huawei WRT-WX9
    
    commit cbcdf8c4d35cd74aee8581eb2f0453e0ecab7b05 upstream.
    
    Fixes headphone and headset microphone detection on Huawei WRT-WX9.
    
    Signed-off-by: huangwenhui <huangwenhuia@uniontech.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220913054622.15979-1-huangwenhuia@uniontech.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84481d7a59a228fecb2bfc7a14e304e361e8d5fa
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Mon Sep 12 21:37:16 2022 +0300

    ALSA: hda: add Intel 5 Series / 3400 PCI DID
    
    commit 4d40ceef4745536289012670103c59264e0fb3ec upstream.
    
    Handle 0x3b57 variant with same AZX_DCAPS_INTEL_PCH_NOPM
    capabilities as 0x3b56. In practise this allow use of HDMI/DP
    display audio via i915.
    
    BugLink: https://gitlab.freedesktop.org/drm/intel/-/issues/2751
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220912183716.2126312-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04b5bd5702ab09f1eadfaf0b50bbe5fb09164916
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Tue Sep 13 11:06:41 2022 +0530

    ALSA: hda/tegra: set depop delay for tegra
    
    commit 3c4d8c24fb6c44f426e447b04800b0ed61a7b5ae upstream.
    
    Reduce the suspend time by setting depop delay to 10ms for
    tegra.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220913053641.23299-1-mkumard@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e10425c5424ba418a9a7ad99368f0c51ca6a3b46
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Sep 19 14:35:16 2022 +0200

    ALSA: core: Fix double-free at snd_card_new()
    
    commit c3afa2a402d1ecefa59f88d55d9e765f52f75bd9 upstream.
    
    During the code change to add the support for devres-managed card
    instance, we put an explicit kfree(card) call at the error path in
    snd_card_new().  This is needed for the early error path before the
    card is initialized with the device, but is rather superfluous and
    causes a double-free at the error path after the card instance is
    initialized, as the destructor of the card object already contains a
    kfree() call.
    
    This patch fixes the double-free situation by removing the superfluous
    kfree().  Meanwhile we need to call kfree() explicitly for the early
    error path, so it's added there instead.
    
    Fixes: e8ad415b7a55 ("ALSA: core: Add managed card creation")
    Reported-by: Rondreis <linhaoguo86@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/CAB7eexL1zBnB636hwS27d-LdPYZ_R1-5fJS_h=ZbCWYU=UPWJg@mail.gmail.com
    Link: https://lore.kernel.org/r/20220919123516.28222-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10a8c5d7d393cce6c3cb07f350cf93cdf1fe2505
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Sep 20 13:39:29 2022 +0200

    Revert "ALSA: usb-audio: Split endpoint setups for hw_params and prepare"
    
    commit 79764ec772bc1346441ae1c4b1f3bd1991d634e8 upstream.
    
    This reverts commit ff878b408a03bef5d610b7e2302702e16a53636e.
    
    Unfortunately the recent fix seems bringing another regressions with
    PulseAudio / pipewire, at least for Steinberg and MOTU devices.
    
    As a temporary solution, do a straight revert.  The issue for Android
    will be revisited again later by another different fix (if any).
    
    Fixes: ff878b408a03 ("ALSA: usb-audio: Split endpoint setups for hw_params and prepare")
    Cc: <stable@vger.kernel.org>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=216500
    Link: https://lore.kernel.org/r/20220920113929.25162-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06c0204a6e80f50ed8799130b8cbf7983460ce42
Author: jerry meng <jerry-meng@foxmail.com>
Date:   Mon Sep 5 14:35:33 2022 +0800

    USB: serial: option: add Quectel RM520N
    
    commit d640c4cb8f2f933c0ca896541f9de7fb1ae245f4 upstream.
    
    add support for Quectel RM520N which is based on Qualcomm SDX62 chip.
    
    0x0801: DIAG + NMEA + AT + MODEM + RMNET
    
    T:  Bus=03 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#= 10 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0801 Rev= 5.04
    S:  Manufacturer=Quectel
    S:  Product=RM520N-GL
    S:  SerialNumber=384af524
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=88(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=8e(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: jerry meng <jerry-meng@foxmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cf9e8b7e67a43ad4ac7534e95e76396f9a52116
Author: Carl Yin(ÊÆ∑Âº†Êàê) <carl.yin@quectel.com>
Date:   Fri Sep 2 09:49:43 2022 +0000

    USB: serial: option: add Quectel BG95 0x0203 composition
    
    commit f8f67eff6847f9b8d753fa029723bcc54296055a upstream.
    
    Add support for the following Quectel BG95 composition:
    
    0x0203: Diag + GNSS + Modem + ECM
    
    usb-devices output:
    T:  Bus=01 Lev=01 Prnt=01 Port=03 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0203 Rev= 0.00
    S:  Manufacturer=Quectel, Incorporated
    S:  Product=Quectel LPWA Module
    S:  SerialNumber=71d3a21b
    C:* #Ifs= 5 Cfg#= 1 Atr=e0 MxPwr=500mA
    A:  FirstIf#= 3 IfCount= 2 Cls=02(comm.) Sub=00 Prot=00
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=60 Driver=option
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=85(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
    I:  If#= 4 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    I:* If#= 4 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Carl Yin <carl.yin@quectel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 369b008bbe3643eaf59f34dec992c50a58bb851d
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 1 10:36:34 2022 -0400

    USB: core: Fix RST error in hub.c
    
    commit 766a96dc558385be735a370db867e302c8f22153 upstream.
    
    A recent commit added an invalid RST expression to a kerneldoc comment
    in hub.c.  The fix is trivial.
    
    Fixes: 9c6d778800b9 ("USB: core: Prevent nested device-reset calls")
    Cc: <stable@vger.kernel.org>
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Reviewed-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/YxDDcsLtRZ7c20pq@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d10d1e9d9f1ec67939db8ea5b653d1828013a253
Author: Phil Auld <pauld@redhat.com>
Date:   Tue Sep 6 16:35:42 2022 -0400

    drivers/base: Fix unsigned comparison to -1 in CPUMAP_FILE_MAX_BYTES
    
    commit d7f06bdd6ee87fbefa05af5f57361d85e7715b11 upstream.
    
    As PAGE_SIZE is unsigned long, -1 > PAGE_SIZE when NR_CPUS <= 3.
    This leads to very large file sizes:
    
    topology$ ls -l
    total 0
    -r--r--r-- 1 root root 18446744073709551615 Sep  5 11:59 core_cpus
    -r--r--r-- 1 root root                 4096 Sep  5 11:59 core_cpus_list
    -r--r--r-- 1 root root                 4096 Sep  5 10:58 core_id
    -r--r--r-- 1 root root 18446744073709551615 Sep  5 10:10 core_siblings
    -r--r--r-- 1 root root                 4096 Sep  5 11:59 core_siblings_list
    -r--r--r-- 1 root root 18446744073709551615 Sep  5 11:59 die_cpus
    -r--r--r-- 1 root root                 4096 Sep  5 11:59 die_cpus_list
    -r--r--r-- 1 root root                 4096 Sep  5 11:59 die_id
    -r--r--r-- 1 root root 18446744073709551615 Sep  5 11:59 package_cpus
    -r--r--r-- 1 root root                 4096 Sep  5 11:59 package_cpus_list
    -r--r--r-- 1 root root                 4096 Sep  5 10:58 physical_package_id
    -r--r--r-- 1 root root 18446744073709551615 Sep  5 10:10 thread_siblings
    -r--r--r-- 1 root root                 4096 Sep  5 11:59 thread_siblings_list
    
    Adjust the inequality to catch the case when NR_CPUS is configured
    to a small value.
    
    Fixes: 7ee951acd31a ("drivers/base: fix userspace break from using bin_attributes for cpumap and cpulist")
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Yury Norov <yury.norov@gmail.com>
    Cc: stable@vger.kernel.org
    Cc: feng xiangjun <fengxj325@gmail.com>
    Reported-by: feng xiangjun <fengxj325@gmail.com>
    Signed-off-by: Phil Auld <pauld@redhat.com>
    Signed-off-by: Yury Norov <yury.norov@gmail.com>
    Link: https://lore.kernel.org/r/20220906203542.1796629-1-pauld@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eede01dfd0ef41a9e4bdc43ffa62a896736e86c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Sep 2 09:10:08 2022 +0200

    Revert "usb: gadget: udc-xilinx: replace memcpy with memcpy_toio"
    
    [ Upstream commit fe0a2ac7c627b064c479ad0c3b25e531d342e048 ]
    
    This reverts commit 8cb339f1c1f04baede9d54c1e40ac96247a6393b as it
    throws up a bunch of sparse warnings as reported by the kernel test
    robot.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/r/202209020044.CX2PfZzM-lkp@intel.com
    Fixes: 8cb339f1c1f0 ("usb: gadget: udc-xilinx: replace memcpy with memcpy_toio")
    Cc: stable@vger.kernel.org
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Piyush Mehta <piyush.mehta@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c02431f43e1204d6fe33ede6f6c2e539f888240b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 31 10:34:25 2022 +0200

    Revert "usb: add quirks for Lenovo OneLink+ Dock"
    
    [ Upstream commit 58bfe7d8e31014d7ce246788df99c56e3cfe6c68 ]
    
    This reverts commit 3d5f70949f1b1168fbb17d06eb5c57e984c56c58.
    
    The quirk does not work properly, more work is needed to determine what
    should be done here.
    
    Reported-by: Oliver Neukum <oneukum@suse.com>
    Cc: Jean-Francois Le Fillatre <jflf_kernel@gmx.com>
    Cc: stable <stable@kernel.org>
    Fixes: 3d5f70949f1b ("usb: add quirks for Lenovo OneLink+ Dock")
    Link: https://lore.kernel.org/r/9a17ea86-079f-510d-e919-01bc53a6d09f@gmx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8de5e12f587b4f5529c863ec26d7656780431bf0
Author: Piyush Mehta <piyush.mehta@amd.com>
Date:   Wed Aug 24 12:42:53 2022 +0530

    usb: gadget: udc-xilinx: replace memcpy with memcpy_toio
    
    [ Upstream commit 8cb339f1c1f04baede9d54c1e40ac96247a6393b ]
    
    For ARM processor, unaligned access to device memory is not allowed.
    Method memcpy does not take care of alignment.
    
    USB detection failure with the unaligned address of memory access, with
    below kernel crash. To fix the unaligned address the kernel panic issue,
    replace memcpy with memcpy_toio method.
    
    Kernel crash:
    Unable to handle kernel paging request at virtual address ffff80000c05008a
    Mem abort info:
      ESR = 0x96000061
      EC = 0x25: DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
      FSC = 0x21: alignment fault
    Data abort info:
      ISV = 0, ISS = 0x00000061
      CM = 0, WnR = 1
    swapper pgtable: 4k pages, 48-bit VAs, pgdp=000000000143b000
    [ffff80000c05008a] pgd=100000087ffff003, p4d=100000087ffff003,
    pud=100000087fffe003, pmd=1000000800bcc003, pte=00680000a0010713
    Internal error: Oops: 96000061 [#1] SMP
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.15.19-xilinx-v2022.1 #1
    Hardware name: ZynqMP ZCU102 Rev1.0 (DT)
    pstate: 200000c5 (nzCv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : __memcpy+0x30/0x260
    lr : __xudc_ep0_queue+0xf0/0x110
    sp : ffff800008003d00
    x29: ffff800008003d00 x28: ffff800009474e80 x27: 00000000000000a0
    x26: 0000000000000100 x25: 0000000000000012 x24: ffff000800bc8080
    x23: 0000000000000001 x22: 0000000000000012 x21: ffff000800bc8080
    x20: 0000000000000012 x19: ffff000800bc8080 x18: 0000000000000000
    x17: ffff800876482000 x16: ffff800008004000 x15: 0000000000004000
    x14: 00001f09785d0400 x13: 0103020101005567 x12: 0781400000000200
    x11: 00000000c5672a10 x10: 00000000000008d0 x9 : ffff800009463cf0
    x8 : ffff8000094757b0 x7 : 0201010055670781 x6 : 4000000002000112
    x5 : ffff80000c05009a x4 : ffff000800a15012 x3 : ffff00080362ad80
    x2 : 0000000000000012 x1 : ffff000800a15000 x0 : ffff80000c050088
    Call trace:
     __memcpy+0x30/0x260
     xudc_ep0_queue+0x3c/0x60
     usb_ep_queue+0x38/0x44
     composite_ep0_queue.constprop.0+0x2c/0xc0
     composite_setup+0x8d0/0x185c
     configfs_composite_setup+0x74/0xb0
     xudc_irq+0x570/0xa40
     __handle_irq_event_percpu+0x58/0x170
     handle_irq_event+0x60/0x120
     handle_fasteoi_irq+0xc0/0x220
     handle_domain_irq+0x60/0x90
     gic_handle_irq+0x74/0xa0
     call_on_irq_stack+0x2c/0x60
     do_interrupt_handler+0x54/0x60
     el1_interrupt+0x30/0x50
     el1h_64_irq_handler+0x18/0x24
     el1h_64_irq+0x78/0x7c
     arch_cpu_idle+0x18/0x2c
     do_idle+0xdc/0x15c
     cpu_startup_entry+0x28/0x60
     rest_init+0xc8/0xe0
     arch_call_rest_init+0x10/0x1c
     start_kernel+0x694/0x6d4
     __primary_switched+0xa4/0xac
    
    Fixes: 1f7c51660034 ("usb: gadget: Add xilinx usb2 device support")
    Cc: stable@vger.kernel.org
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Piyush Mehta <piyush.mehta@amd.com>
    Link: https://lore.kernel.org/r/20220824071253.1261096-1-piyush.mehta@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2db7a7176c45c72ec68c30e8bb56b85b4dfd717a
Author: Jean-Francois Le Fillatre <jflf_kernel@gmx.com>
Date:   Wed Aug 24 21:13:21 2022 +0200

    usb: add quirks for Lenovo OneLink+ Dock
    
    [ Upstream commit 3d5f70949f1b1168fbb17d06eb5c57e984c56c58 ]
    
    The Lenovo OneLink+ Dock contains two VL812 USB3.0 controllers:
    17ef:1018 upstream
    17ef:1019 downstream
    
    Those two controllers both have problems with some USB3.0 devices,
    particularly self-powered ones. Typical error messages include:
    
      Timeout while waiting for setup device command
      device not accepting address X, error -62
      unable to enumerate USB device
    
    By process of elimination the controllers themselves were identified as
    the cause of the problem. Through trial and error the issue was solved
    by using USB_QUIRK_RESET_RESUME for both chips.
    
    Signed-off-by: Jean-Francois Le Fillatre <jflf_kernel@gmx.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20220824191320.17883-1-jflf_kernel@gmx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a72eee6d905e433fbb15521336ea677144d0ec12
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Wed Jul 27 19:06:47 2022 -0700

    usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop
    
    [ Upstream commit 040f2dbd2010c43f33ad27249e6dac48456f4d99 ]
    
    Relocate the pullups_connected check until after it is ensured that there
    are no runtime PM transitions.  If another context triggered the DWC3
    core's runtime resume, it may have already enabled the Run/Stop.  Do not
    re-run the entire pullup sequence again, as it may issue a core soft
    reset while Run/Stop is already set.
    
    This patch depends on
      commit 69e131d1ac4e ("usb: dwc3: gadget: Prevent repeat pullup()")
    
    Fixes: 77adb8bdf422 ("usb: dwc3: gadget: Allow runtime suspend if UDC unbinded")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Link: https://lore.kernel.org/r/20220728020647.9377-1-quic_wcheng@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f79a57d4091f12415c2624dc7fdbaa3b1ee56d27
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Apr 21 19:22:44 2022 -0700

    usb: dwc3: gadget: Don't modify GEVNTCOUNT in pullup()
    
    [ Upstream commit 8f8034f493b5eb1ad21ff392fd30c0cf9e71f73f ]
    
    If the GEVNTCOUNT indicates events in the event buffer, the driver needs
    to acknowledge them before the controller can halt. Simply let the
    interrupt handler acknowledges the remaining event generated by the
    controller while polling for DSTS.DEVCTLHLT. This avoids disabling irq
    and taking care of race condition between the interrupt handlers and
    pullup().
    
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/ea306ec93c41ccafbdb5d16404ff3b6eca299613.1650593829.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a9923999459bfb763413b83c5ba1c545625739d
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Apr 21 19:22:38 2022 -0700

    usb: dwc3: gadget: Refactor pullup()
    
    [ Upstream commit 861c010a2ee1bc4a66d23f0da4aa22e75d8eaa24 ]
    
    Move soft-disconnect sequence out of dwc3_gadget_pullup(). No
    functional change here.
    
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/4c0f259b17d95acaaa931f90276683a48a32fe22.1650593829.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7604a210acbbb4ee0d2ffab9f1b1d8fd747af1af
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Apr 21 19:22:31 2022 -0700

    usb: dwc3: gadget: Prevent repeat pullup()
    
    [ Upstream commit 69e131d1ac4e52a59ec181ab4f8aa8c48cd8fb64 ]
    
    Don't do soft-disconnect if it's previously done. Likewise, don't do
    soft-connect if the device is currently connected and running. It would
    break normal operation.
    
    Currently the caller of pullup() (udc's sysfs soft_connect) only checks
    if it had initiated disconnect to prevent repeating soft-disconnect. It
    doesn't check for soft-connect. To be safe, let's keep the check here
    regardless whether the udc core is fixed.
    
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/1c1345bd66c97a9d32f77d63aaadd04b7b037143.1650593829.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0b5d22b0448522e15316db70afa2dfb8bd30a79
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Tue Mar 15 18:13:58 2022 -0700

    usb: dwc3: Issue core soft reset before enabling run/stop
    
    [ Upstream commit 0066472de157439d58454f4a55786f1045ea5681 ]
    
    It is recommended by the Synopsis databook to issue a DCTL.CSftReset
    when reconnecting from a device-initiated disconnect routine.  This
    resolves issues with enumeration during fast composition switching
    cases, which result in an unknown device on the host.
    
    Reviewed-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Link: https://lore.kernel.org/r/20220316011358.3057-1-quic_wcheng@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d583ba79cde72cd98c9fda40203de2d71183bb2
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Thu Sep 16 19:18:52 2021 -0700

    usb: dwc3: gadget: Avoid starting DWC3 gadget during UDC unbind
    
    [ Upstream commit 8217f07a50236779880f13e87f99224cd9117f83 ]
    
    There is a race present where the DWC3 runtime resume runs in parallel
    to the UDC unbind sequence.  This will eventually lead to a possible
    scenario where we are enabling the run/stop bit, without a valid
    composition defined.
    
    Thread#1 (handling UDC unbind):
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
      -->dwc3_gadget_pullup(0)
    --> continue UDC unbind sequence
    -->Thread#2 is running in parallel here
    
    Thread#2 (handing next cable connect)
    __dwc3_set_mode()
      -->pm_runtime_get_sync()
        -->dwc3_gadget_resume()
          -->dwc->gadget_driver is NOT NULL yet
          -->dwc3_gadget_run_stop(1)
          --> _dwc3gadget_start()
    ...
    
    Fix this by tracking the pullup disable routine, and avoiding resuming
    of the DWC3 gadget.  Once the UDC is re-binded, that will trigger the
    pullup enable routine, which would handle enabling the DWC3 gadget.
    
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/20210917021852.2037-1-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 167b18f25b96a095beb7b36b27d49b992a6035f8
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Sun Aug 14 12:50:27 2022 -0500

    staging: r8188eu: Add Rosewill USB-N150 Nano to device tables
    
    [ Upstream commit e01f5c8d6af231b3b09e23c1fe8a4057cdcc4e42 ]
    
    This device is reported as using the RTL8188EUS chip.
    
    It has the improbable USB ID of 0bda:ffef, which normally would belong
    to Realtek, but this ID works for the reporter.
    
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20220814175027.2689-1-Larry.Finger@lwfinger.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit add40eda82582fc75db9c1ae8c66721b7b44d8e4
Author: Candy Febriyanto <cfebriyanto@gmail.com>
Date:   Thu Nov 18 23:37:34 2021 +0700

    staging: r8188eu: Remove support for devices with 8188FU chipset (0bda:f179)
    
    [ Upstream commit 6723b283c44a3fdf9f922ae9788aab38bd909211 ]
    
    The new r8188eu driver doesn't actually support devices with vendor ID 0bda
    and product ID f179[0][1][2], remove the ID so owners of these devices
    don't have to blacklist the staging driver.
    
    [0] https://github.com/lwfinger/rtl8188eu/issues/366#issuecomment-888511731
    [1] https://github.com/lwfinger/rtl8188eu/issues/385
    [2] https://github.com/lwfinger/rtl8188eu/issues/385#issuecomment-973013539
    
    Cc: Larry Finger <Larry.Finger@lwfinger.net>
    CC: Phillip Potter <phil@philpotter.co.uk>
    Signed-off-by: Candy Febriyanto <cfebriyanto@gmail.com>
    Link: https://lore.kernel.org/r/YZaBTq9vlMaJDFz2@mainframe.localdomain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: e01f5c8d6af2 ("staging: r8188eu: Add Rosewill USB-N150 Nano to device tables")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55653c548612d7ffbb21cf05ebff6d14f79cc913
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Aug 30 10:59:49 2022 -0400

    drm/amdgpu: make sure to init common IP before gmc
    
    [ Upstream commit a8671493d2074950553da3cf07d1be43185ef6c6 ]
    
    Move common IP init before GMC init so that HDP gets
    remapped before GMC init which uses it.
    
    This fixes the Unsupported Request error reported through
    AER during driver load. The error happens as a write happens
    to the remap offset before real remapping is done.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216373
    
    The error was unnoticed before and got visible because of the commit
    referenced below. This doesn't fix anything in the commit below, rather
    fixes the issue in amdgpu exposed by the commit. The reference is only
    to associate this commit with below one so that both go together.
    
    Fixes: 8795e182b02d ("PCI/portdrv: Don't disable AER reporting in get_port_device_capability()")
    
    Acked-by: Christian K√∂nig <christian.koenig@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25a90a11036b6fd385ee75536b78659fc481d529
Author: Victor Skvortsov <victor.skvortsov@amd.com>
Date:   Thu Dec 16 17:01:45 2021 +0000

    drm/amdgpu: Separate vf2pf work item init from virt data exchange
    
    [ Upstream commit 892deb48269c65376f3eeb5b4c032ff2c2979bd7 ]
    
    We want to be able to call virt data exchange conditionally
    after gmc sw init to reserve bad pages as early as possible.
    Since this is a conditional call, we will need
    to call it again unconditionally later in the init sequence.
    
    Refactor the data exchange function so it can be
    called multiple times without re-initializing the work item.
    
    v2: Cleaned up the code. Kept the original call to init_exchange_data()
    inside early init to initialize the work item, afterwards call
    exchange_data() when needed.
    
    Signed-off-by: Victor Skvortsov <victor.skvortsov@amd.com>
    Reviewed By: Shaoyun.liu <Shaoyun.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

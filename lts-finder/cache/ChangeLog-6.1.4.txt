commit 2cb8e624295ffa0c4d659fcec7d9e7a6c48de156
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 7 11:12:04 2023 +0100

    Linux 6.1.4
    
    Link: https://lore.kernel.org/r/20230104160511.905925875@linuxfoundation.org
    Tested-by: Ronald Warsow <rwarsow@gmx.de>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Fenil Jain <fkjainco@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Justin M. Forbes <jforbes@fedoraproject.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54b6a040f38075711751c61b2300a8ce7cb1741f
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Dec 16 17:04:24 2022 +0800

    drm/amd/pm: correct the fan speed retrieving in PWM for some SMU13 asics
    
    commit e73fc71e8f015d61f3adca7659cb209fd5117aa5 upstream.
    
    For SMU 13.0.0 and 13.0.7, the output from PMFW is in percent. Driver
    need to convert that into correct PMW(255) based.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.0, 6.1
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b865bcd7a084e9cbf171ad3b240bf40058fd985
Author: Evan Quan <evan.quan@amd.com>
Date:   Thu Dec 15 13:38:46 2022 +0800

    drm/amd/pm: bump SMU13.0.0 driver_if header to version 0x34
    
    commit 272b981416f8be0180c4d8066f90635fa7c1c501 upstream.
    
    To fit the latest PMFW and suppress the warning emerged on driver loading.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.0, 6.1
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 789c4804d7aed7094845da4a0ebf7099a503f8ba
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Dec 9 16:09:58 2022 +0800

    drm/amd/pm: add missing SMU13.0.7 mm_dpm feature mapping
    
    commit e0607c10ebf551a654c3577fc74b4bf5533e1cea upstream.
    
    Without this, the pp_dpm_vclk and pp_dpm_dclk outputs are not with
    correct data.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.0.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cfd678e2f070fd2f005dc6e12c180ff1a1b5843
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Dec 9 16:05:12 2022 +0800

    drm/amd/pm: add missing SMU13.0.0 mm_dpm feature mapping
    
    commit 592cd24a08763975c75be850a7d4e461bfd353bf upstream.
    
    Without this, the pp_dpm_vclk and pp_dpm_dclk outputs are not with
    correct data.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.0.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e6d577cd90b27a98ce9f06ed96bca7b59d210f0
Author: Chris Wilson <chris.p.wilson@intel.com>
Date:   Fri Dec 2 12:28:42 2022 +0000

    drm/i915/migrate: Account for the reserved_space
    
    commit 31a2e6cbe8a4eb0d1650fff4b77872b744e14a62 upstream.
    
    If the ring is nearly full when calling into emit_pte(), we might
    incorrectly trample the reserved_space when constructing the packet to
    emit the PTEs. This then triggers the GEM_BUG_ON(rq->reserved_space >
    ring->space) when later submitting the request, since the request itself
    doesn't have enough space left in the ring to emit things like
    workarounds, breadcrumbs etc.
    
    v2: Fix the whitespace errors
    
    Testcase: igt@i915_selftests@live_emit_pte_full_ring
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/7535
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/6889
    Fixes: cf586021642d ("drm/i915/gt: Pipelined page migration")
    Signed-off-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Cc: Andrzej Hajda <andrzej.hajda@intel.com>
    Cc: Andi Shyti <andi.shyti@linux.intel.com>
    Cc: Nirmoy Das <nirmoy.das@intel.com>
    Cc: <stable@vger.kernel.org> # v5.15+
    Tested-by: Nirmoy Das <nirmoy.das@intel.com>
    Reviewed-by: Nirmoy Das <nirmoy.das@intel.com>
    Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
    Reviewed-by: Andi Shyti <andi.shyti@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221202122844.428006-1-matthew.auld@intel.com
    (cherry picked from commit 35168a6c4ed53db4f786858bac23b1474fd7d0dc)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea62bd769994d6f18bd265cc156e6182a288c880
Author: Matthew Auld <matthew.auld@intel.com>
Date:   Fri Dec 16 11:34:56 2022 +0000

    drm/i915: improve the catch-all evict to handle lock contention
    
    commit 3f882f2d4f689627c1566c2c92087bc3ff734953 upstream.
    
    The catch-all evict can fail due to object lock contention, since it
    only goes as far as trylocking the object, due to us already holding the
    vm->mutex. Doing a full object lock here can deadlock, since the
    vm->mutex is always our inner lock. Add another execbuf pass which drops
    the vm->mutex and then tries to grab the object will the full lock,
    before then retrying the eviction. This should be good enough for now to
    fix the immediate regression with userspace seeing -ENOSPC from execbuf
    due to contended object locks during GTT eviction.
    
    v2 (Mani)
      - Also revamp the docs for the different passes.
    
    Testcase: igt@gem_ppgtt@shrink-vs-evict-*
    Fixes: 7e00897be8bf ("drm/i915: Add object locking to i915_gem_evict_for_node and i915_gem_evict_something, v2.")
    References: https://gitlab.freedesktop.org/drm/intel/-/issues/7627
    References: https://gitlab.freedesktop.org/drm/intel/-/issues/7570
    References: https://bugzilla.mozilla.org/show_bug.cgi?id=1779558
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Thomas Hellström <thomas.hellstrom@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Cc: Andrzej Hajda <andrzej.hajda@intel.com>
    Cc: Mani Milani <mani@chromium.org>
    Cc: <stable@vger.kernel.org> # v5.18+
    Reviewed-by: Mani Milani <mani@chromium.org>
    Tested-by: Mani Milani <mani@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221216113456.414183-1-matthew.auld@intel.com
    (cherry picked from commit 801fa7a81f6da533cc5442fc40e32c72b76cd42a)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52beaa0938ad33f3ee848c22935af967e3cce005
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Dec 7 11:08:53 2022 -0500

    drm/amdgpu: make display pinning more flexible (v2)
    
    commit 81d0bcf9900932633d270d5bc4a54ff599c6ebdb upstream.
    
    Only apply the static threshold for Stoney and Carrizo.
    This hardware has certain requirements that don't allow
    mixing of GTT and VRAM.  Newer asics do not have these
    requirements so we should be able to be more flexible
    with where buffers end up.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2270
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2291
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/2255
    Acked-by: Luben Tuikov <luben.tuikov@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9724e6950ef902abd6abc5b5dfacca4b5125ba75
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Nov 21 15:52:19 2022 -0500

    drm/amdgpu: handle polaris10/11 overlap asics (v2)
    
    commit 1d4624cd72b912b2680c08d0be48338a1629a858 upstream.
    
    Some special polaris 10 chips overlap with the polaris11
    DID range.  Handle this properly in the driver.
    
    v2: use local flags for other function calls.
    
    Acked-by: Luben Tuikov <luben.tuikov@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3038224f5617bb4628170b29661645138f884292
Author: Yifan Zhang <yifan1.zhang@amd.com>
Date:   Thu Dec 8 11:55:15 2022 +0800

    drm/amd/display: Add DCN314 display SG Support
    
    commit fe6872adb05e85bde38f2cdec01a0f4cfb826998 upstream.
    
    Add display SG support for DCN 3.1.4.
    
    Signed-off-by: Yifan Zhang <yifan1.zhang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 218f8fe668240f2ec95dcb000f61904dcdc83271
Author: Matthew Auld <matthew.auld@intel.com>
Date:   Mon Dec 12 17:19:58 2022 +0000

    drm/i915/ttm: consider CCS for backup objects
    
    commit ad0fca2dceeab8fdd8e1135f4b4ef2dc46c2ead9 upstream.
    
    It seems we can have one or more framebuffers that are still pinned when
    suspending lmem, in such a case we end up creating a shmem backup
    object, instead of evicting the object directly, but this will skip
    copying the CCS aux state, since we don't allocate the extra storage for
    the CCS pages as part of the ttm_tt construction. Since we can already
    deal with pinned objects just fine, it doesn't seem too nasty to just
    extend to support dealing with the CCS aux state, if the object is a
    pinned framebuffer. This fixes display corruption (like in gnome-shell)
    seen on DG2 when returning from suspend.
    
    Fixes: da0595ae91da ("drm/i915/migrate: Evict and restore the flatccs capable lmem obj")
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Nirmoy Das <nirmoy.das@intel.com>
    Cc: Andrzej Hajda <andrzej.hajda@intel.com>
    Cc: Shuicheng Lin <shuicheng.lin@intel.com>
    Cc: <stable@vger.kernel.org> # v5.19+
    Tested-by: Nirmoy Das <nirmoy.das@intel.com>
    Reviewed-by: Nirmoy Das <nirmoy.das@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221212171958.82593-2-matthew.auld@intel.com
    (cherry picked from commit 95df9cc24bee8a09d39c62bcef4319b984814e18)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f06a3cff1b4e4b1b5edfd5031aa58e679064db01
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Dec 8 10:32:31 2022 +0800

    ext4: allocate extended attribute value in vmalloc area
    
    commit cc12a6f25e07ed05d5825a1664b67a970842b2ca upstream.
    
    Now, extended attribute value maximum length is 64K. The memory
    requested here does not need continuous physical addresses, so it is
    appropriate to use kvmalloc to request memory. At the same time, it
    can also cope with the situation that the extended attribute will
    become longer in the future.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221208023233.1231330-3-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56ecd5509fdc76af2b70a9090af15829c21d04b2
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 12:59:28 2022 +0100

    ext4: avoid unaccounted block allocation when expanding inode
    
    commit 8994d11395f8165b3deca1971946f549f0822630 upstream.
    
    When expanding inode space in ext4_expand_extra_isize_ea() we may need
    to allocate external xattr block. If quota is not initialized for the
    inode, the block allocation will not be accounted into quota usage. Make
    sure the quota is initialized before we try to expand inode space.
    
    Reported-by: Pengfei Xu <pengfei.xu@intel.com>
    Link: https://lore.kernel.org/all/Y5BT+k6xWqthZc1P@xpf.sh.intel.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221207115937.26601-2-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f860f71b61776d03817ed8917abea8a2315b544
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 7 12:59:27 2022 +0100

    ext4: initialize quota before expanding inode in setproject ioctl
    
    commit 1485f726c6dec1a1f85438f2962feaa3d585526f upstream.
    
    Make sure we initialize quotas before possibly expanding inode space
    (and thus maybe needing to allocate external xattr block) in
    ext4_ioctl_setproject(). This prevents not accounting the necessary
    block allocation.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221207115937.26601-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70e5b46beba64706430a87a6d516054225e8ac8a
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Dec 8 10:32:33 2022 +0800

    ext4: fix inode leak in ext4_xattr_inode_create() on an error path
    
    commit e4db04f7d3dbbe16680e0ded27ea2a65b10f766a upstream.
    
    There is issue as follows when do setxattr with inject fault:
    
    [localhost]# fsck.ext4  -fn  /dev/sda
    e2fsck 1.46.6-rc1 (12-Sep-2022)
    Pass 1: Checking inodes, blocks, and sizes
    Pass 2: Checking directory structure
    Pass 3: Checking directory connectivity
    Pass 4: Checking reference counts
    Unattached zero-length inode 15.  Clear? no
    
    Unattached inode 15
    Connect to /lost+found? no
    
    Pass 5: Checking group summary information
    
    /dev/sda: ********** WARNING: Filesystem still has errors **********
    
    /dev/sda: 15/655360 files (0.0% non-contiguous), 66755/2621440 blocks
    
    This occurs in 'ext4_xattr_inode_create()'. If 'ext4_mark_inode_dirty()'
    fails, dropping i_nlink of the inode is needed. Or will lead to inode leak.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221208023233.1231330-5-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74ba281971618a76d5067cad7d8b14d549da5e9a
Author: Ye Bin <yebin10@huawei.com>
Date:   Tue Dec 6 22:41:34 2022 +0800

    ext4: fix kernel BUG in 'ext4_write_inline_data_end()'
    
    commit 5c099c4fdc438014d5893629e70a8ba934433ee8 upstream.
    
    Syzbot report follow issue:
    ------------[ cut here ]------------
    kernel BUG at fs/ext4/inline.c:227!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 3629 Comm: syz-executor212 Not tainted 6.1.0-rc5-syzkaller-00018-g59d0d52c30d4 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
    RIP: 0010:ext4_write_inline_data+0x344/0x3e0 fs/ext4/inline.c:227
    RSP: 0018:ffffc90003b3f368 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff8880704e16c0 RCX: 0000000000000000
    RDX: ffff888021763a80 RSI: ffffffff821e31a4 RDI: 0000000000000006
    RBP: 000000000006818e R08: 0000000000000006 R09: 0000000000068199
    R10: 0000000000000079 R11: 0000000000000000 R12: 000000000000000b
    R13: 0000000000068199 R14: ffffc90003b3f408 R15: ffff8880704e1c82
    FS:  000055555723e3c0(0000) GS:ffff8880b9b00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fffe8ac9080 CR3: 0000000079f81000 CR4: 0000000000350ee0
    Call Trace:
     <TASK>
     ext4_write_inline_data_end+0x2a3/0x12f0 fs/ext4/inline.c:768
     ext4_write_end+0x242/0xdd0 fs/ext4/inode.c:1313
     ext4_da_write_end+0x3ed/0xa30 fs/ext4/inode.c:3063
     generic_perform_write+0x316/0x570 mm/filemap.c:3764
     ext4_buffered_write_iter+0x15b/0x460 fs/ext4/file.c:285
     ext4_file_write_iter+0x8bc/0x16e0 fs/ext4/file.c:700
     call_write_iter include/linux/fs.h:2191 [inline]
     do_iter_readv_writev+0x20b/0x3b0 fs/read_write.c:735
     do_iter_write+0x182/0x700 fs/read_write.c:861
     vfs_iter_write+0x74/0xa0 fs/read_write.c:902
     iter_file_splice_write+0x745/0xc90 fs/splice.c:686
     do_splice_from fs/splice.c:764 [inline]
     direct_splice_actor+0x114/0x180 fs/splice.c:931
     splice_direct_to_actor+0x335/0x8a0 fs/splice.c:886
     do_splice_direct+0x1ab/0x280 fs/splice.c:974
     do_sendfile+0xb19/0x1270 fs/read_write.c:1255
     __do_sys_sendfile64 fs/read_write.c:1323 [inline]
     __se_sys_sendfile64 fs/read_write.c:1309 [inline]
     __x64_sys_sendfile64+0x1d0/0x210 fs/read_write.c:1309
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    ---[ end trace 0000000000000000 ]---
    
    Above issue may happens as follows:
    ext4_da_write_begin
      ext4_da_write_inline_data_begin
        ext4_da_convert_inline_data_to_extent
          ext4_clear_inode_state(inode, EXT4_STATE_MAY_INLINE_DATA);
    ext4_da_write_end
    
    ext4_run_li_request
      ext4_mb_prefetch
        ext4_read_block_bitmap_nowait
          ext4_validate_block_bitmap
            ext4_mark_group_bitmap_corrupted(sb, block_group, EXT4_GROUP_INFO_BBITMAP_CORRUPT)
             percpu_counter_sub(&sbi->s_freeclusters_counter,grp->bb_free);
              -> sbi->s_freeclusters_counter become zero
    ext4_da_write_begin
      if (ext4_nonda_switch(inode->i_sb)) -> As freeclusters_counter is zero will return true
        *fsdata = (void *)FALL_BACK_TO_NONDELALLOC;
        ext4_write_begin
    ext4_da_write_end
      if (write_mode == FALL_BACK_TO_NONDELALLOC)
        ext4_write_end
          if (inline_data)
            ext4_write_inline_data_end
              ext4_write_inline_data
                BUG_ON(pos + len > EXT4_I(inode)->i_inline_size);
               -> As inode is already convert to extent, so 'pos + len' > inline_size
               -> then trigger BUG.
    
    To solve this issue, instead of checking ext4_has_inline_data() which
    is only cleared after data has been written back, check the
    EXT4_STATE_MAY_INLINE_DATA flag in ext4_write_end().
    
    Fixes: f19d5870cbf7 ("ext4: add normal write support for inline data")
    Reported-by: syzbot+4faa160fa96bfba639f8@syzkaller.appspotmail.com
    Reported-by: Jun Nie <jun.nie@linaro.org>
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Link: https://lore.kernel.org/r/20221206144134.1919987-1-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc1538c693d25e282bed8c54b65c914a04023a78
Author: Jan Kara <jack@suse.cz>
Date:   Wed Nov 23 20:39:50 2022 +0100

    ext4: fix deadlock due to mbcache entry corruption
    
    commit a44e84a9b7764c72896f7241a0ec9ac7e7ef38dd upstream.
    
    When manipulating xattr blocks, we can deadlock infinitely looping
    inside ext4_xattr_block_set() where we constantly keep finding xattr
    block for reuse in mbcache but we are unable to reuse it because its
    reference count is too big. This happens because cache entry for the
    xattr block is marked as reusable (e_reusable set) although its
    reference count is too big. When this inconsistency happens, this
    inconsistent state is kept indefinitely and so ext4_xattr_block_set()
    keeps retrying indefinitely.
    
    The inconsistent state is caused by non-atomic update of e_reusable bit.
    e_reusable is part of a bitfield and e_reusable update can race with
    update of e_referenced bit in the same bitfield resulting in loss of one
    of the updates. Fix the problem by using atomic bitops instead.
    
    This bug has been around for many years, but it became *much* easier
    to hit after commit 65f8b80053a1 ("ext4: fix race when reusing xattr
    blocks").
    
    Cc: stable@vger.kernel.org
    Fixes: 6048c64b2609 ("mbcache: add reusable flag to cache entries")
    Fixes: 65f8b80053a1 ("ext4: fix race when reusing xattr blocks")
    Reported-and-tested-by: Jeremi Piotrowski <jpiotrowski@linux.microsoft.com>
    Reported-by: Thilo Fromm <t-lo@linux.microsoft.com>
    Link: https://lore.kernel.org/r/c77bf00f-4618-7149-56f1-b8d1664b9d07@linux.microsoft.com/
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20221123193950.16758-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52cdfab923db7d69ea5020b9818fd4e261d39eab
Author: Jan Kara <jack@suse.cz>
Date:   Mon Nov 21 14:09:29 2022 +0100

    ext4: avoid BUG_ON when creating xattrs
    
    commit b40ebaf63851b3a401b0dc9263843538f64f5ce6 upstream.
    
    Commit fb0a387dcdcd ("ext4: limit block allocations for indirect-block
    files to < 2^32") added code to try to allocate xattr block with 32-bit
    block number for indirect block based files on the grounds that these
    files cannot use larger block numbers. It also added BUG_ON when
    allocated block could not fit into 32 bits. This is however bogus
    reasoning because xattr block is stored in inode->i_file_acl and
    inode->i_file_acl_hi and as such even indirect block based files can
    happily use full 48 bits for xattr block number. The proper handling
    seems to be there basically since 64-bit block number support was added.
    So remove the bogus limitation and BUG_ON.
    
    Cc: Eric Sandeen <sandeen@redhat.com>
    Fixes: fb0a387dcdcd ("ext4: limit block allocations for indirect-block files to < 2^32")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221121130929.32031-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1008bbaadca6559f6f67fd9cb2adba80b0a125ab
Author: Baokun Li <libaokun1@huawei.com>
Date:   Thu Nov 17 12:03:40 2022 +0800

    ext4: fix corrupt backup group descriptors after online resize
    
    commit 8f49ec603ae3e213bfab2799182724e3abac55a1 upstream.
    
    In commit 9a8c5b0d0615 ("ext4: update the backup superblock's at the end
    of the online resize"), it is assumed that update_backups() only updates
    backup superblocks, so each b_data is treated as a backupsuper block to
    update its s_block_group_nr and s_checksum. However, update_backups()
    also updates the backup group descriptors, which causes the backup group
    descriptors to be corrupted.
    
    The above commit fixes the problem of invalid checksum of the backup
    superblock. The root cause of this problem is that the checksum of
    ext4_update_super() is not set correctly. This problem has been fixed
    in the previous patch ("ext4: fix bad checksum after online resize").
    
    However, we do need to set block_group_nr for the backup superblock in
    update_backups(). When a block is in a group that contains a backup
    superblock, and the block is the first block in the group, the block is
    definitely a superblock. We add a helper function that includes setting
    s_block_group_nr and updating checksum, and then call it only when the
    above conditions are met to prevent the backup group descriptors from
    being incorrectly modified.
    
    Fixes: 9a8c5b0d0615 ("ext4: update the backup superblock's at the end of the online resize")
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221117040341.1380702-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 627dd452889d5211342accb3cb7a4625f865898b
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Nov 10 12:16:29 2022 -0800

    ext4: dont return EINVAL from GETFSUUID when reporting UUID length
    
    commit b76abb5157468756163fe7e3431c9fe32cba57ca upstream.
    
    If userspace calls this ioctl with fsu_length (the length of the
    fsuuid.fsu_uuid array) set to zero, ext4 copies the desired uuid length
    out to userspace.  The kernel call returned a result from a valid input,
    so the return value here should be zero, not EINVAL.
    
    While we're at it, fix the copy_to_user call to make it clear that we're
    only copying out fsu_len.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Catherine Hoang <catherine.hoang@oracle.com>
    Link: https://lore.kernel.org/r/166811138914.327006.9241306894437166566.stgit@magnolia
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a77f3bdb03d0b2a8f4a3838a3120a6e56170a8bc
Author: Baokun Li <libaokun1@huawei.com>
Date:   Thu Nov 17 12:03:39 2022 +0800

    ext4: fix bad checksum after online resize
    
    commit a408f33e895e455f16cf964cb5cd4979b658db7b upstream.
    
    When online resizing is performed twice consecutively, the error message
    "Superblock checksum does not match superblock" is displayed for the
    second time. Here's the reproducer:
    
            mkfs.ext4 -F /dev/sdb 100M
            mount /dev/sdb /tmp/test
            resize2fs /dev/sdb 5G
            resize2fs /dev/sdb 6G
    
    To solve this issue, we moved the update of the checksum after the
    es->s_overhead_clusters is updated.
    
    Fixes: 026d0d27c488 ("ext4: reduce computation of overhead during resize")
    Fixes: de394a86658f ("ext4: update s_overhead_clusters in the superblock during an on-line resize")
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221117040341.1380702-2-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dad6a26adb5ae452cc771f937b268cd6bf1de778
Author: Luís Henriques <lhenriques@suse.de>
Date:   Wed Nov 9 18:14:45 2022 +0000

    ext4: fix error code return to user-space in ext4_get_branch()
    
    commit 26d75a16af285a70863ba6a81f85d81e7e65da50 upstream.
    
    If a block is out of range in ext4_get_branch(), -ENOMEM will be returned
    to user-space.  Obviously, this error code isn't really useful.  This
    patch fixes it by making sure the right error code (-EFSCORRUPTED) is
    propagated to user-space.  EUCLEAN is more informative than ENOMEM.
    
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Link: https://lore.kernel.org/r/20221109181445.17843-1-lhenriques@suse.de
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c99932c83074ef9320cac48aab085adb1a1144c3
Author: Baokun Li <libaokun1@huawei.com>
Date:   Thu Nov 17 12:03:41 2022 +0800

    ext4: fix corruption when online resizing a 1K bigalloc fs
    
    commit 0aeaa2559d6d53358fca3e3fce73807367adca74 upstream.
    
    When a backup superblock is updated in update_backups(), the primary
    superblock's offset in the group (that is, sbi->s_sbh->b_blocknr) is used
    as the backup superblock's offset in its group. However, when the block
    size is 1K and bigalloc is enabled, the two offsets are not equal. This
    causes the backup group descriptors to be overwritten by the superblock
    in update_backups(). Moreover, if meta_bg is enabled, the file system will
    be corrupted because this feature uses backup group descriptors.
    
    To solve this issue, we use a more accurate ext4_group_first_block_no() as
    the offset of the backup superblock in its group.
    
    Fixes: d77147ff443b ("ext4: add support for online resizing with bigalloc")
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20221117040341.1380702-4-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81b915181c630ee1cffa052e52874fe4e1ba91ac
Author: Eric Whitney <enwlinux@gmail.com>
Date:   Thu Nov 17 10:22:07 2022 -0500

    ext4: fix delayed allocation bug in ext4_clu_mapped for bigalloc + inline
    
    commit 131294c35ed6f777bd4e79d42af13b5c41bf2775 upstream.
    
    When converting files with inline data to extents, delayed allocations
    made on a file system created with both the bigalloc and inline options
    can result in invalid extent status cache content, incorrect reserved
    cluster counts, kernel memory leaks, and potential kernel panics.
    
    With bigalloc, the code that determines whether a block must be
    delayed allocated searches the extent tree to see if that block maps
    to a previously allocated cluster.  If not, the block is delayed
    allocated, and otherwise, it isn't.  However, if the inline option is
    also used, and if the file containing the block is marked as able to
    store data inline, there isn't a valid extent tree associated with
    the file.  The current code in ext4_clu_mapped() calls
    ext4_find_extent() to search the non-existent tree for a previously
    allocated cluster anyway, which typically finds nothing, as desired.
    However, a side effect of the search can be to cache invalid content
    from the non-existent tree (garbage) in the extent status tree,
    including bogus entries in the pending reservation tree.
    
    To fix this, avoid searching the extent tree when allocating blocks
    for bigalloc + inline files that are being converted from inline to
    extent mapped.
    
    Signed-off-by: Eric Whitney <enwlinux@gmail.com>
    Link: https://lore.kernel.org/r/20221117152207.2424-1-enwlinux@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b753b0be45ae3eb4a37a6a9efb69a3ba486b81ea
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Nov 10 12:16:34 2022 -0800

    ext4: don't fail GETFSUUID when the caller provides a long buffer
    
    commit a7e9d977e031fceefe1e7cd69ebd7202d5758b56 upstream.
    
    If userspace provides a longer UUID buffer than is required, we
    shouldn't fail the call with EINVAL -- rather, we can fill the caller's
    buffer with the bytes we /can/ fill, and update the length field to
    reflect what we copied.  This doesn't break the UAPI since we're
    enabling a case that currently fails, and so far Ted hasn't released a
    version of e2fsprogs that uses the new ext4 ioctl.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Catherine Hoang <catherine.hoang@oracle.com>
    Link: https://lore.kernel.org/r/166811139478.327006.13879198441587445544.stgit@magnolia
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13271fbbe85d73a7c47058f56a52f2a7f00d6e39
Author: Ye Bin <yebin10@huawei.com>
Date:   Mon Nov 7 09:53:35 2022 +0800

    ext4: init quota for 'old.inode' in 'ext4_rename'
    
    commit fae381a3d79bb94aa2eb752170d47458d778b797 upstream.
    
    Syzbot found the following issue:
    ext4_parse_param: s_want_extra_isize=128
    ext4_inode_info_init: s_want_extra_isize=32
    ext4_rename: old.inode=ffff88823869a2c8 old.dir=ffff888238699828 new.inode=ffff88823869d7e8 new.dir=ffff888238699828
    __ext4_mark_inode_dirty: inode=ffff888238699828 ea_isize=32 want_ea_size=128
    __ext4_mark_inode_dirty: inode=ffff88823869a2c8 ea_isize=32 want_ea_size=128
    ext4_xattr_block_set: inode=ffff88823869a2c8
    ------------[ cut here ]------------
    WARNING: CPU: 13 PID: 2234 at fs/ext4/xattr.c:2070 ext4_xattr_block_set.cold+0x22/0x980
    Modules linked in:
    RIP: 0010:ext4_xattr_block_set.cold+0x22/0x980
    RSP: 0018:ffff888227d3f3b0 EFLAGS: 00010202
    RAX: 0000000000000001 RBX: ffff88823007a000 RCX: 0000000000000000
    RDX: 0000000000000a03 RSI: 0000000000000040 RDI: ffff888230078178
    RBP: 0000000000000000 R08: 000000000000002c R09: ffffed1075c7df8e
    R10: ffff8883ae3efc6b R11: ffffed1075c7df8d R12: 0000000000000000
    R13: ffff88823869a2c8 R14: ffff8881012e0460 R15: dffffc0000000000
    FS:  00007f350ac1f740(0000) GS:ffff8883ae200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f350a6ed6a0 CR3: 0000000237456000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     ? ext4_xattr_set_entry+0x3b7/0x2320
     ? ext4_xattr_block_set+0x0/0x2020
     ? ext4_xattr_set_entry+0x0/0x2320
     ? ext4_xattr_check_entries+0x77/0x310
     ? ext4_xattr_ibody_set+0x23b/0x340
     ext4_xattr_move_to_block+0x594/0x720
     ext4_expand_extra_isize_ea+0x59a/0x10f0
     __ext4_expand_extra_isize+0x278/0x3f0
     __ext4_mark_inode_dirty.cold+0x347/0x410
     ext4_rename+0xed3/0x174f
     vfs_rename+0x13a7/0x2510
     do_renameat2+0x55d/0x920
     __x64_sys_rename+0x7d/0xb0
     do_syscall_64+0x3b/0xa0
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    As 'ext4_rename' will modify 'old.inode' ctime and mark inode dirty,
    which may trigger expand 'extra_isize' and allocate block. If inode
    didn't init quota will lead to warning.  To solve above issue, init
    'old.inode' firstly in 'ext4_rename'.
    
    Reported-by: syzbot+98346927678ac3059c77@syzkaller.appspotmail.com
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221107015335.2524319-1-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f966e021c20caae639dd0e404c8761e8281a2c4
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Nov 17 15:36:03 2022 +0800

    ext4: fix uninititialized value in 'ext4_evict_inode'
    
    commit 7ea71af94eaaaf6d9aed24bc94a05b977a741cb9 upstream.
    
    Syzbot found the following issue:
    =====================================================
    BUG: KMSAN: uninit-value in ext4_evict_inode+0xdd/0x26b0 fs/ext4/inode.c:180
     ext4_evict_inode+0xdd/0x26b0 fs/ext4/inode.c:180
     evict+0x365/0x9a0 fs/inode.c:664
     iput_final fs/inode.c:1747 [inline]
     iput+0x985/0xdd0 fs/inode.c:1773
     __ext4_new_inode+0xe54/0x7ec0 fs/ext4/ialloc.c:1361
     ext4_mknod+0x376/0x840 fs/ext4/namei.c:2844
     vfs_mknod+0x79d/0x830 fs/namei.c:3914
     do_mknodat+0x47d/0xaa0
     __do_sys_mknodat fs/namei.c:3992 [inline]
     __se_sys_mknodat fs/namei.c:3989 [inline]
     __ia32_sys_mknodat+0xeb/0x150 fs/namei.c:3989
     do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
     __do_fast_syscall_32+0xa2/0x100 arch/x86/entry/common.c:178
     do_fast_syscall_32+0x33/0x70 arch/x86/entry/common.c:203
     do_SYSENTER_32+0x1b/0x20 arch/x86/entry/common.c:246
     entry_SYSENTER_compat_after_hwframe+0x70/0x82
    
    Uninit was created at:
     __alloc_pages+0x9f1/0xe80 mm/page_alloc.c:5578
     alloc_pages+0xaae/0xd80 mm/mempolicy.c:2285
     alloc_slab_page mm/slub.c:1794 [inline]
     allocate_slab+0x1b5/0x1010 mm/slub.c:1939
     new_slab mm/slub.c:1992 [inline]
     ___slab_alloc+0x10c3/0x2d60 mm/slub.c:3180
     __slab_alloc mm/slub.c:3279 [inline]
     slab_alloc_node mm/slub.c:3364 [inline]
     slab_alloc mm/slub.c:3406 [inline]
     __kmem_cache_alloc_lru mm/slub.c:3413 [inline]
     kmem_cache_alloc_lru+0x6f3/0xb30 mm/slub.c:3429
     alloc_inode_sb include/linux/fs.h:3117 [inline]
     ext4_alloc_inode+0x5f/0x860 fs/ext4/super.c:1321
     alloc_inode+0x83/0x440 fs/inode.c:259
     new_inode_pseudo fs/inode.c:1018 [inline]
     new_inode+0x3b/0x430 fs/inode.c:1046
     __ext4_new_inode+0x2a7/0x7ec0 fs/ext4/ialloc.c:959
     ext4_mkdir+0x4d5/0x1560 fs/ext4/namei.c:2992
     vfs_mkdir+0x62a/0x870 fs/namei.c:4035
     do_mkdirat+0x466/0x7b0 fs/namei.c:4060
     __do_sys_mkdirat fs/namei.c:4075 [inline]
     __se_sys_mkdirat fs/namei.c:4073 [inline]
     __ia32_sys_mkdirat+0xc4/0x120 fs/namei.c:4073
     do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
     __do_fast_syscall_32+0xa2/0x100 arch/x86/entry/common.c:178
     do_fast_syscall_32+0x33/0x70 arch/x86/entry/common.c:203
     do_SYSENTER_32+0x1b/0x20 arch/x86/entry/common.c:246
     entry_SYSENTER_compat_after_hwframe+0x70/0x82
    
    CPU: 1 PID: 4625 Comm: syz-executor.2 Not tainted 6.1.0-rc4-syzkaller-62821-gcb231e2f67ec #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
    =====================================================
    
    Now, 'ext4_alloc_inode()' didn't init 'ei->i_flags'. If new inode failed
    before set 'ei->i_flags' in '__ext4_new_inode()', then do 'iput()'. As after
    6bc0d63dad7f commit will access 'ei->i_flags' in 'ext4_evict_inode()' which
    will lead to access uninit-value.
    To solve above issue just init 'ei->i_flags' in 'ext4_alloc_inode()'.
    
    Reported-by: syzbot+57b25da729eb0b88177d@syzkaller.appspotmail.com
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Fixes: 6bc0d63dad7f ("ext4: remove EA inode entry from mbcache on inode eviction")
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221117073603.2598882-1-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5439ad45c0d0c8db41eb6f4dce6f778f15a5ee16
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:40 2022 -0800

    ext4: fix off-by-one errors in fast-commit block filling
    
    commit 48a6a66db82b8043d298a630f22c62d43550cae5 upstream.
    
    Due to several different off-by-one errors, or perhaps due to a late
    change in design that wasn't fully reflected in the code that was
    actually merged, there are several very strange constraints on how
    fast-commit blocks are filled with tlv entries:
    
    - tlvs must start at least 10 bytes before the end of the block, even
      though the minimum tlv length is 8.  Otherwise, the replay code will
      ignore them.  (BUG: ext4_fc_reserve_space() could violate this
      requirement if called with a len of blocksize - 9 or blocksize - 8.
      Fortunately, this doesn't seem to happen currently.)
    
    - tlvs must end at least 1 byte before the end of the block.  Otherwise
      the replay code will consider them to be invalid.  This quirk
      contributed to a bug (fixed by an earlier commit) where uninitialized
      memory was being leaked to disk in the last byte of blocks.
    
    Also, strangely these constraints don't apply to the replay code in
    e2fsprogs, which will accept any tlvs in the blocks (with no bounds
    checks at all, but that is a separate issue...).
    
    Given that this all seems to be a bug, let's fix it by just filling
    blocks with tlv entries in the natural way.
    
    Note that old kernels will be unable to replay fast-commit journals
    created by kernels that have this commit.
    
    Fixes: aa75f4d3daae ("ext4: main fast-commit commit path")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-7-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18e66ed75d87bcf82af94bf887174fe77261f3b8
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:39 2022 -0800

    ext4: fix unaligned memory access in ext4_fc_reserve_space()
    
    commit 8415ce07ecf0cc25efdd5db264a7133716e503cf upstream.
    
    As is done elsewhere in the file, build the struct ext4_fc_tl on the
    stack and memcpy() it into the buffer, rather than directly writing it
    to a potentially-unaligned location in the buffer.
    
    Fixes: aa75f4d3daae ("ext4: main fast-commit commit path")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-6-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1c97077fa603cc52ca8746a46ab13991f5eb99c
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:38 2022 -0800

    ext4: add missing validation of fast-commit record lengths
    
    commit 64b4a25c3de81a69724e888ec2db3533b43816e2 upstream.
    
    Validate the inode and filename lengths in fast-commit journal records
    so that a malicious fast-commit journal cannot cause a crash by having
    invalid values for these.  Also validate EXT4_FC_TAG_DEL_RANGE.
    
    Fixes: aa75f4d3daae ("ext4: main fast-commit commit path")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-5-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ba993208bcfd691e241483420a2a761d3f15750
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:36 2022 -0800

    ext4: don't set up encryption key during jbd2 transaction
    
    commit 4c0d5778385cb3618ff26a561ce41de2b7d9de70 upstream.
    
    Commit a80f7fcf1867 ("ext4: fixup ext4_fc_track_* functions' signature")
    extended the scope of the transaction in ext4_unlink() too far, making
    it include the call to ext4_find_entry().  However, ext4_find_entry()
    can deadlock when called from within a transaction because it may need
    to set up the directory's encryption key.
    
    Fix this by restoring the transaction to its original scope.
    
    Reported-by: syzbot+1a748d0007eeac3ab079@syzkaller.appspotmail.com
    Fixes: a80f7fcf1867 ("ext4: fixup ext4_fc_track_* functions' signature")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-3-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c1fb65e8ce85c281d2cba9c236f9edbbc4eaca6
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:37 2022 -0800

    ext4: fix leaking uninitialized memory in fast-commit journal
    
    commit 594bc43b410316d70bb42aeff168837888d96810 upstream.
    
    When space at the end of fast-commit journal blocks is unused, make sure
    to zero it out so that uninitialized memory is not leaked to disk.
    
    Fixes: aa75f4d3daae ("ext4: main fast-commit commit path")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-4-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08d5c8445d15a4b0692dc23707550ad55ddf5ba3
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 6 14:48:35 2022 -0800

    ext4: disable fast-commit of encrypted dir operations
    
    commit 0fbcb5251fc81b58969b272c4fb7374a7b922e3e upstream.
    
    fast-commit of create, link, and unlink operations in encrypted
    directories is completely broken because the unencrypted filenames are
    being written to the fast-commit journal instead of the encrypted
    filenames.  These operations can't be replayed, as encryption keys
    aren't present at journal replay time.  It is also an information leak.
    
    Until if/when we can get this working properly, make encrypted directory
    operations ineligible for fast-commit.
    
    Note that fast-commit operations on encrypted regular files continue to
    be allowed, as they seem to work.
    
    Fixes: aa75f4d3daae ("ext4: main fast-commit commit path")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221106224841.279231-2-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcc5057e1781a3ee889225480d995c3b5cbde555
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Nov 1 22:33:12 2022 -0700

    ext4: don't allow journal inode to have encrypt flag
    
    commit 105c78e12468413e426625831faa7db4284e1fec upstream.
    
    Mounting a filesystem whose journal inode has the encrypt flag causes a
    NULL dereference in fscrypt_limit_io_blocks() when the 'inlinecrypt'
    mount option is used.
    
    The problem is that when jbd2_journal_init_inode() calls bmap(), it
    eventually finds its way into ext4_iomap_begin(), which calls
    fscrypt_limit_io_blocks().  fscrypt_limit_io_blocks() requires that if
    the inode is encrypted, then its encryption key must already be set up.
    That's not the case here, since the journal inode is never "opened" like
    a normal file would be.  Hence the crash.
    
    A reproducer is:
    
        mkfs.ext4 -F /dev/vdb
        debugfs -w /dev/vdb -R "set_inode_field <8> flags 0x80808"
        mount /dev/vdb /mnt -o inlinecrypt
    
    To fix this, make ext4 consider journal inodes with the encrypt flag to
    be invalid.  (Note, maybe other flags should be rejected on the journal
    inode too.  For now, this is just the minimal fix for the above issue.)
    
    I've marked this as fixing the commit that introduced the call to
    fscrypt_limit_io_blocks(), since that's what made an actual crash start
    being possible.  But this fix could be applied to any version of ext4
    that supports the encrypt feature.
    
    Reported-by: syzbot+ba9dac45bc76c490b7c3@syzkaller.appspotmail.com
    Fixes: 38ea50daa7a4 ("ext4: support direct I/O with fscrypt using blk-crypto")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221102053312.189962-1-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a125c8806b7d3c3815b6f9f59d395b9d7527b0ef
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:10 2022 +0800

    ext4: fix bug_on in __es_tree_search caused by bad boot loader inode
    
    commit 991ed014de0840c5dc405b679168924afb2952ac upstream.
    
    We got a issue as fllows:
    ==================================================================
     kernel BUG at fs/ext4/extents_status.c:203!
     invalid opcode: 0000 [#1] PREEMPT SMP
     CPU: 1 PID: 945 Comm: cat Not tainted 6.0.0-next-20221007-dirty #349
     RIP: 0010:ext4_es_end.isra.0+0x34/0x42
     RSP: 0018:ffffc9000143b768 EFLAGS: 00010203
     RAX: 0000000000000000 RBX: ffff8881769cd0b8 RCX: 0000000000000000
     RDX: 0000000000000000 RSI: ffffffff8fc27cf7 RDI: 00000000ffffffff
     RBP: ffff8881769cd0bc R08: 0000000000000000 R09: ffffc9000143b5f8
     R10: 0000000000000001 R11: 0000000000000001 R12: ffff8881769cd0a0
     R13: ffff8881768e5668 R14: 00000000768e52f0 R15: 0000000000000000
     FS: 00007f359f7f05c0(0000)GS:ffff88842fd00000(0000)knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007f359f5a2000 CR3: 000000017130c000 CR4: 00000000000006e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      __es_tree_search.isra.0+0x6d/0xf5
      ext4_es_cache_extent+0xfa/0x230
      ext4_cache_extents+0xd2/0x110
      ext4_find_extent+0x5d5/0x8c0
      ext4_ext_map_blocks+0x9c/0x1d30
      ext4_map_blocks+0x431/0xa50
      ext4_mpage_readpages+0x48e/0xe40
      ext4_readahead+0x47/0x50
      read_pages+0x82/0x530
      page_cache_ra_unbounded+0x199/0x2a0
      do_page_cache_ra+0x47/0x70
      page_cache_ra_order+0x242/0x400
      ondemand_readahead+0x1e8/0x4b0
      page_cache_sync_ra+0xf4/0x110
      filemap_get_pages+0x131/0xb20
      filemap_read+0xda/0x4b0
      generic_file_read_iter+0x13a/0x250
      ext4_file_read_iter+0x59/0x1d0
      vfs_read+0x28f/0x460
      ksys_read+0x73/0x160
      __x64_sys_read+0x1e/0x30
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
    ==================================================================
    
    In the above issue, ioctl invokes the swap_inode_boot_loader function to
    swap inode<5> and inode<12>. However, inode<5> contain incorrect imode and
    disordered extents, and i_nlink is set to 1. The extents check for inode in
    the ext4_iget function can be bypassed bacause 5 is EXT4_BOOT_LOADER_INO.
    While links_count is set to 1, the extents are not initialized in
    swap_inode_boot_loader. After the ioctl command is executed successfully,
    the extents are swapped to inode<12>, in this case, run the `cat` command
    to view inode<12>. And Bug_ON is triggered due to the incorrect extents.
    
    When the boot loader inode is not initialized, its imode can be one of the
    following:
    1) the imode is a bad type, which is marked as bad_inode in ext4_iget and
       set to S_IFREG.
    2) the imode is good type but not S_IFREG.
    3) the imode is S_IFREG.
    
    The BUG_ON may be triggered by bypassing the check in cases 1 and 2.
    Therefore, when the boot loader inode is bad_inode or its imode is not
    S_IFREG, initialize the inode to avoid triggering the BUG.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-5-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1ec687ebd1bf146333955b7e209d21508c3ba9f
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Jun 29 19:26:47 2022 +0800

    ext4: check and assert if marking an no_delete evicting inode dirty
    
    commit 318cdc822c63b6e2befcfdc2088378ae6fa18def upstream.
    
    In ext4_evict_inode(), if we evicting an inode in the 'no_delete' path,
    it cannot be raced by another mark_inode_dirty(). If it happens,
    someone else may accidentally dirty it without holding inode refcount
    and probably cause use-after-free issues in the writeback procedure.
    It's indiscoverable and hard to debug, so add an WARN_ON_ONCE() to
    check and detect this issue in advance.
    
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220629112647.4141034-2-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15adfbb2d161086b508b9ce1f91ce81403f265b1
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Tue Oct 4 15:58:03 2022 +0200

    ext4: journal_path mount options should follow links
    
    commit e3ea75ee651daf5e434afbfdb7dbf75e200ea1f6 upstream.
    
    Before the commit 461c3af045d3 ("ext4: Change handle_mount_opt() to use
    fs_parameter") ext4 mount option journal_path did follow links in the
    provided path.
    
    Bring this behavior back by allowing to pass pathwalk flags to
    fs_lookup_param().
    
    Fixes: 461c3af045d3 ("ext4: Change handle_mount_opt() to use fs_parameter")
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Link: https://lore.kernel.org/r/20221004135803.32283-1-lczerner@redhat.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e1d519af52fca8d6073b1f2430d2de95969e8cf
Author: Ye Bin <yebin10@huawei.com>
Date:   Thu Dec 8 11:34:24 2022 +0800

    ext4: fix reserved cluster accounting in __es_remove_extent()
    
    commit 1da18e38cb97e9521e93d63034521a9649524f64 upstream.
    
    When bigalloc is enabled, reserved cluster accounting for delayed
    allocation is handled in extent_status.c.  With a corrupted file
    system, it's possible for this accounting to be incorrect,
    dsicovered by Syzbot:
    
    EXT4-fs error (device loop0): ext4_validate_block_bitmap:398: comm rep:
            bg 0: block 5: invalid block bitmap
    EXT4-fs (loop0): Delayed block allocation failed for inode 18 at logical
            offset 0 with max blocks 32 with error 28
    EXT4-fs (loop0): This should not happen!! Data will be lost
    
    EXT4-fs (loop0): Total free blocks count 0
    EXT4-fs (loop0): Free/Dirty block details
    EXT4-fs (loop0): free_blocks=0
    EXT4-fs (loop0): dirty_blocks=32
    EXT4-fs (loop0): Block reservation details
    EXT4-fs (loop0): i_reserved_data_blocks=2
    EXT4-fs (loop0): Inode 18 (00000000845cd634):
            i_reserved_data_blocks (1) not cleared!
    
    Above issue happens as follows:
    Assume:
    sbi->s_cluster_ratio = 16
    Step1:
    Insert delay block [0, 31] -> ei->i_reserved_data_blocks=2
    Step2:
    ext4_writepages
      mpage_map_and_submit_extent -> return failed
      mpage_release_unused_pages -> to release [0, 30]
        ext4_es_remove_extent -> remove lblk=0 end=30
          __es_remove_extent -> len1=0 len2=31-30=1
     __es_remove_extent:
     ...
     if (len2 > 0) {
      ...
              if (len1 > 0) {
                      ...
              } else {
                    es->es_lblk = end + 1;
                    es->es_len = len2;
                    ...
              }
            if (count_reserved)
                    count_rsvd(inode, lblk, ...);
            goto out; -> will return but didn't calculate 'reserved'
     ...
    Step3:
    ext4_destroy_inode -> trigger "i_reserved_data_blocks (1) not cleared!"
    
    To solve above issue if 'len2>0' call 'get_rsvd()' before goto out.
    
    Reported-by: syzbot+05a0f0ccab4a25626e38@syzkaller.appspotmail.com
    Fixes: 8fcc3a580651 ("ext4: rework reserved cluster accounting when invalidating pages")
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Eric Whitney <enwlinux@gmail.com>
    Link: https://lore.kernel.org/r/20221208033426.1832460-2-yebin@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1daff79463d7d76096c84c57cddc30c5d4be2226
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:07 2022 +0800

    ext4: fix bug_on in __es_tree_search caused by bad quota inode
    
    commit d323877484765aaacbb2769b06e355c2041ed115 upstream.
    
    We got a issue as fllows:
    ==================================================================
     kernel BUG at fs/ext4/extents_status.c:202!
     invalid opcode: 0000 [#1] PREEMPT SMP
     CPU: 1 PID: 810 Comm: mount Not tainted 6.1.0-rc1-next-g9631525255e3 #352
     RIP: 0010:__es_tree_search.isra.0+0xb8/0xe0
     RSP: 0018:ffffc90001227900 EFLAGS: 00010202
     RAX: 0000000000000000 RBX: 0000000077512a0f RCX: 0000000000000000
     RDX: 0000000000000002 RSI: 0000000000002a10 RDI: ffff8881004cd0c8
     RBP: ffff888177512ac8 R08: 47ffffffffffffff R09: 0000000000000001
     R10: 0000000000000001 R11: 00000000000679af R12: 0000000000002a10
     R13: ffff888177512d88 R14: 0000000077512a10 R15: 0000000000000000
     FS: 00007f4bd76dbc40(0000)GS:ffff88842fd00000(0000)knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00005653bf993cf8 CR3: 000000017bfdf000 CR4: 00000000000006e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      <TASK>
      ext4_es_cache_extent+0xe2/0x210
      ext4_cache_extents+0xd2/0x110
      ext4_find_extent+0x5d5/0x8c0
      ext4_ext_map_blocks+0x9c/0x1d30
      ext4_map_blocks+0x431/0xa50
      ext4_getblk+0x82/0x340
      ext4_bread+0x14/0x110
      ext4_quota_read+0xf0/0x180
      v2_read_header+0x24/0x90
      v2_check_quota_file+0x2f/0xa0
      dquot_load_quota_sb+0x26c/0x760
      dquot_load_quota_inode+0xa5/0x190
      ext4_enable_quotas+0x14c/0x300
      __ext4_fill_super+0x31cc/0x32c0
      ext4_fill_super+0x115/0x2d0
      get_tree_bdev+0x1d2/0x360
      ext4_get_tree+0x19/0x30
      vfs_get_tree+0x26/0xe0
      path_mount+0x81d/0xfc0
      do_mount+0x8d/0xc0
      __x64_sys_mount+0xc0/0x160
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
    ==================================================================
    
    Above issue may happen as follows:
    -------------------------------------
    ext4_fill_super
     ext4_orphan_cleanup
      ext4_enable_quotas
       ext4_quota_enable
        ext4_iget --> get error inode <5>
         ext4_ext_check_inode --> Wrong imode makes it escape inspection
         make_bad_inode(inode) --> EXT4_BOOT_LOADER_INO set imode
        dquot_load_quota_inode
         vfs_setup_quota_inode --> check pass
         dquot_load_quota_sb
          v2_check_quota_file
           v2_read_header
            ext4_quota_read
             ext4_bread
              ext4_getblk
               ext4_map_blocks
                ext4_ext_map_blocks
                 ext4_find_extent
                  ext4_cache_extents
                   ext4_es_cache_extent
                    __es_tree_search.isra.0
                     ext4_es_end --> Wrong extents trigger BUG_ON
    
    In the above issue, s_usr_quota_inum is set to 5, but inode<5> contains
    incorrect imode and disordered extents. Because 5 is EXT4_BOOT_LOADER_INO,
    the ext4_ext_check_inode check in the ext4_iget function can be bypassed,
    finally, the extents that are not checked trigger the BUG_ON in the
    __es_tree_search function. To solve this issue, check whether the inode is
    bad_inode in vfs_setup_quota_inode().
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-2-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7720e1e43315bc9795dbaae51a9d776a982b5d3b
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:08 2022 +0800

    ext4: add helper to check quota inums
    
    commit 07342ec259df2a35d6a34aebce010567a80a0e15 upstream.
    
    Before quota is enabled, a check on the preset quota inums in
    ext4_super_block is added to prevent wrong quota inodes from being loaded.
    In addition, when the quota fails to be enabled, the quota type and quota
    inum are printed to facilitate fault locating.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 488a5c2bf7543c3cd3f07a025f2e62be91599430
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Oct 26 12:23:09 2022 +0800

    ext4: add EXT4_IGET_BAD flag to prevent unexpected bad inode
    
    commit 63b1e9bccb71fe7d7e3ddc9877dbdc85e5d2d023 upstream.
    
    There are many places that will get unhappy (and crash) when ext4_iget()
    returns a bad inode. However, if iget the boot loader inode, allows a bad
    inode to be returned, because the inode may not be initialized. This
    mechanism can be used to bypass some checks and cause panic. To solve this
    problem, we add a special iget flag EXT4_IGET_BAD. Only with this flag
    we'd be returning bad inode from ext4_iget(), otherwise we always return
    the error code if the inode is bad inode.(suggested by Jan Kara)
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221026042310.3839669-4-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7753d6657873a2523a9989e6c09090cd503bbcda
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Oct 31 13:58:33 2022 +0800

    ext4: fix undefined behavior in bit shift for ext4_check_flag_values
    
    commit 3bf678a0f9c017c9ba7c581541dbc8453452a7ae upstream.
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in fs/ext4/ext4.h:591:2
    left shift of 1 by 31 places cannot be represented in type 'int'
    Call Trace:
     <TASK>
     dump_stack_lvl+0x7d/0xa5
     dump_stack+0x15/0x1b
     ubsan_epilogue+0xe/0x4e
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x20c
     ext4_init_fs+0x5a/0x277
     do_one_initcall+0x76/0x430
     kernel_init_freeable+0x3b3/0x422
     kernel_init+0x24/0x1e0
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: 9a4c80194713 ("ext4: ensure Inode flags consistency are checked at build time")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Link: https://lore.kernel.org/r/20221031055833.3966222-1-cuigaosheng1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7908b8a541b1578cc61b4da7f19b604a931441da
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Nov 2 16:06:33 2022 +0800

    ext4: fix use-after-free in ext4_orphan_cleanup
    
    commit a71248b1accb2b42e4980afef4fa4a27fa0e36f5 upstream.
    
    I caught a issue as follows:
    ==================================================================
     BUG: KASAN: use-after-free in __list_add_valid+0x28/0x1a0
     Read of size 8 at addr ffff88814b13f378 by task mount/710
    
     CPU: 1 PID: 710 Comm: mount Not tainted 6.1.0-rc3-next #370
     Call Trace:
      <TASK>
      dump_stack_lvl+0x73/0x9f
      print_report+0x25d/0x759
      kasan_report+0xc0/0x120
      __asan_load8+0x99/0x140
      __list_add_valid+0x28/0x1a0
      ext4_orphan_cleanup+0x564/0x9d0 [ext4]
      __ext4_fill_super+0x48e2/0x5300 [ext4]
      ext4_fill_super+0x19f/0x3a0 [ext4]
      get_tree_bdev+0x27b/0x450
      ext4_get_tree+0x19/0x30 [ext4]
      vfs_get_tree+0x49/0x150
      path_mount+0xaae/0x1350
      do_mount+0xe2/0x110
      __x64_sys_mount+0xf0/0x190
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x63/0xcd
      </TASK>
     [...]
    ==================================================================
    
    Above issue may happen as follows:
    -------------------------------------
    ext4_fill_super
      ext4_orphan_cleanup
       --- loop1: assume last_orphan is 12 ---
        list_add(&EXT4_I(inode)->i_orphan, &EXT4_SB(sb)->s_orphan)
        ext4_truncate --> return 0
          ext4_inode_attach_jinode --> return -ENOMEM
        iput(inode) --> free inode<12>
       --- loop2: last_orphan is still 12 ---
        list_add(&EXT4_I(inode)->i_orphan, &EXT4_SB(sb)->s_orphan);
        // use inode<12> and trigger UAF
    
    To solve this issue, we need to propagate the return value of
    ext4_inode_attach_jinode() appropriately.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221102080633.1630225-1-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a73f2b2e385390b44d3503ab3464c25140b36b1b
Author: Alexander Potapenko <glider@google.com>
Date:   Mon Nov 21 12:21:30 2022 +0100

    fs: ext4: initialize fsdata in pagecache_write()
    
    commit 956510c0c7439e90b8103aaeaf4da92878c622f0 upstream.
    
    When aops->write_begin() does not initialize fsdata, KMSAN reports
    an error passing the latter to aops->write_end().
    
    Fix this by unconditionally initializing fsdata.
    
    Cc: Eric Biggers <ebiggers@kernel.org>
    Fixes: c93d8f885809 ("ext4: add basic fs-verity support")
    Reported-by: syzbot+9767be679ef5016b6082@syzkaller.appspotmail.com
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20221121112134.407362-1-glider@google.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35840a486cffd5bffa3105de382315dfc6182382
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Nov 9 15:43:43 2022 +0800

    ext4: correct inconsistent error msg in nojournal mode
    
    commit 89481b5fa8c0640e62ba84c6020cee895f7ac643 upstream.
    
    When we used the journal_async_commit mounting option in nojournal mode,
    the kernel told me that "can't mount with journal_checksum", was very
    confusing. I find that when we mount with journal_async_commit, both the
    JOURNAL_ASYNC_COMMIT and EXPLICIT_JOURNAL_CHECKSUM flags are set. However,
    in the error branch, CHECKSUM is checked before ASYNC_COMMIT. As a result,
    the above inconsistency occurs, and the ASYNC_COMMIT branch becomes dead
    code that cannot be executed. Therefore, we exchange the positions of the
    two judgments to make the error msg more accurate.
    
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221109074343.4184862-1-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39364b354f0e4f8ba7885bd27124d52141439d5f
Author: Luís Henriques <lhenriques@suse.de>
Date:   Tue Oct 11 16:57:58 2022 +0100

    ext4: remove trailing newline from ext4_msg() message
    
    commit 78742d4d056df7d2fad241c90185d281bf924844 upstream.
    
    The ext4_msg() function adds a new line to the message.  Remove extra '\n'
    from call to ext4_msg() in ext4_orphan_cleanup().
    
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Link: https://lore.kernel.org/r/20221011155758.15287-1-lhenriques@suse.de
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 248feff7deda6d9d7bd633fe8c6e7d20f4c259d7
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Aug 17 21:27:01 2022 +0800

    ext4: add inode table check in __ext4_get_inode_loc to aovid possible infinite loop
    
    commit eee22187b53611e173161e38f61de1c7ecbeb876 upstream.
    
    In do_writepages, if the value returned by ext4_writepages is "-ENOMEM"
    and "wbc->sync_mode == WB_SYNC_ALL", retry until the condition is not met.
    
    In __ext4_get_inode_loc, if the bh returned by sb_getblk is NULL,
    the function returns -ENOMEM.
    
    In __getblk_slow, if the return value of grow_buffers is less than 0,
    the function returns NULL.
    
    When the three processes are connected in series like the following stack,
    an infinite loop may occur:
    
    do_writepages                                   <--- keep retrying
     ext4_writepages
      mpage_map_and_submit_extent
       mpage_map_one_extent
        ext4_map_blocks
         ext4_ext_map_blocks
          ext4_ext_handle_unwritten_extents
           ext4_ext_convert_to_initialized
            ext4_split_extent
             ext4_split_extent_at
              __ext4_ext_dirty
               __ext4_mark_inode_dirty
                ext4_reserve_inode_write
                 ext4_get_inode_loc
                  __ext4_get_inode_loc              <--- return -ENOMEM
                   sb_getblk
                    __getblk_gfp
                     __getblk_slow                  <--- return NULL
                      grow_buffers
                       grow_dev_page                <--- return -ENXIO
                        ret = (block < end_block) ? 1 : -ENXIO;
    
    In this issue, bg_inode_table_hi is overwritten as an incorrect value.
    As a result, `block < end_block` cannot be met in grow_dev_page.
    Therefore, __ext4_get_inode_loc always returns '-ENOMEM' and do_writepages
    keeps retrying. As a result, the writeback process is in the D state due
    to an infinite loop.
    
    Add a check on inode table block in the __ext4_get_inode_loc function by
    referring to ext4_read_inode_bitmap to avoid this infinite loop.
    
    Cc: stable@kernel.org
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20220817132701.3015912-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b085fb43feede48ebf80ab7e2dd150c8d9902932
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Wed Jun 29 19:26:46 2022 +0800

    ext4: silence the warning when evicting inode with dioread_nolock
    
    commit bc12ac98ea2e1b70adc6478c8b473a0003b659d3 upstream.
    
    When evicting an inode with default dioread_nolock, it could be raced by
    the unwritten extents converting kworker after writeback some new
    allocated dirty blocks. It convert unwritten extents to written, the
    extents could be merged to upper level and free extent blocks, so it
    could mark the inode dirty again even this inode has been marked
    I_FREEING. But the inode->i_io_list check and warning in
    ext4_evict_inode() missing this corner case. Fortunately,
    ext4_evict_inode() will wait all extents converting finished before this
    check, so it will not lead to inode use-after-free problem, every thing
    is OK besides this warning. The WARN_ON_ONCE was originally designed
    for finding inode use-after-free issues in advance, but if we add
    current dioread_nolock case in, it will become not quite useful, so fix
    this warning by just remove this check.
    
     ======
     WARNING: CPU: 7 PID: 1092 at fs/ext4/inode.c:227
     ext4_evict_inode+0x875/0xc60
     ...
     RIP: 0010:ext4_evict_inode+0x875/0xc60
     ...
     Call Trace:
      <TASK>
      evict+0x11c/0x2b0
      iput+0x236/0x3a0
      do_unlinkat+0x1b4/0x490
      __x64_sys_unlinkat+0x4c/0xb0
      do_syscall_64+0x3b/0x90
      entry_SYSCALL_64_after_hwframe+0x46/0xb0
     RIP: 0033:0x7fa933c1115b
     ======
    
    rm                          kworker
                                ext4_end_io_end()
    vfs_unlink()
     ext4_unlink()
                                 ext4_convert_unwritten_io_end_vec()
                                  ext4_convert_unwritten_extents()
                                   ext4_map_blocks()
                                    ext4_ext_map_blocks()
                                     ext4_ext_try_to_merge_up()
                                      __mark_inode_dirty()
                                       check !I_FREEING
                                       locked_inode_to_wb_and_lock_list()
     iput()
      iput_final()
       evict()
        ext4_evict_inode()
         truncate_inode_pages_final() //wait release io_end
                                        inode_io_list_move_locked()
                                 ext4_release_io_end()
         trigger WARN_ON_ONCE()
    
    Cc: stable@kernel.org
    Fixes: ceff86fddae8 ("ext4: Avoid freeing inodes on dirty list")
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220629112647.4141034-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12cfb0c1c27e8699581388514513a92fabda5379
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Thu Jul 14 12:31:43 2022 +0200

    drm/etnaviv: reap idle mapping if it doesn't match the softpin address
    
    commit 332f847212e43d584019a8264895f25cf92aa647 upstream.
    
    When a idle BO, which is held open by another process, gets freed by
    userspace and subsequently referenced again by e.g. importing it again,
    userspace may assign a different softpin VA than the last time around.
    As the kernel GEM object still exists, we likely have a idle mapping
    with the old VA still cached, if it hasn't been reaped in the meantime.
    
    As the context matches, we then simply try to resurrect this mapping by
    increasing the refcount. As the VA in this mapping does not match the
    new softpin address, we consequently fail the otherwise valid submit.
    Instead of failing, reap the idle mapping.
    
    Cc: stable@vger.kernel.org # 5.19
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Guido Günther <agx@sigxcpu.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit babd82f10749da6ce3521690759d771ba6652f0e
Author: Yuan Can <yuancan@huawei.com>
Date:   Fri Nov 4 06:45:12 2022 +0000

    drm/ingenic: Fix missing platform_driver_unregister() call in ingenic_drm_init()
    
    commit 47078311b8efebdefd5b3b2f87e2b02b14f49c66 upstream.
    
    A problem about modprobe ingenic-drm failed is triggered with the following
    log given:
    
     [  303.561088] Error: Driver 'ingenic-ipu' is already registered, aborting...
     modprobe: ERROR: could not insert 'ingenic_drm': Device or resource busy
    
    The reason is that ingenic_drm_init() returns platform_driver_register()
    directly without checking its return value, if platform_driver_register()
    failed, it returns without unregistering ingenic_ipu_driver_ptr, resulting
    the ingenic-drm can never be installed later.
    A simple call graph is shown as below:
    
     ingenic_drm_init()
       platform_driver_register() # ingenic_ipu_driver_ptr are registered
       platform_driver_register()
         driver_register()
           bus_add_driver()
             priv = kzalloc(...) # OOM happened
       # return without unregister ingenic_ipu_driver_ptr
    
    Fixing this problem by checking the return value of
    platform_driver_register() and do platform_unregister_drivers() if
    error happened.
    
    Fixes: fc1acf317b01 ("drm/ingenic: Add support for the IPU")
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221104064512.8569-1-yuancan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 556a7e74af59048bf73777b25395cf90be9b377f
Author: Mikko Kovanen <mikko.kovanen@aavamobile.com>
Date:   Sat Nov 26 13:27:13 2022 +0000

    drm/i915/dsi: fix VBT send packet port selection for dual link DSI
    
    commit f9cdf4130671d767071607d0a7568c9bd36a68d0 upstream.
    
    intel_dsi->ports contains bitmask of enabled ports and correspondingly
    logic for selecting port for VBT packet sending must use port specific
    bitmask when deciding appropriate port.
    
    Fixes: 08c59dde71b7 ("drm/i915/dsi: fix VBT send packet port selection for ICL+")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mikko Kovanen <mikko.kovanen@aavamobile.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/DBBPR09MB466592B16885D99ABBF2393A91119@DBBPR09MB4665.eurprd09.prod.outlook.com
    (cherry picked from commit 8d58bb7991c45f6b60710cc04c9498c6ea96db90)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84bcb7d09aaa7e7a6ec00213fd17770dbb6c0ca7
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Thu Jul 14 12:31:42 2022 +0200

    drm/etnaviv: move idle mapping reaping into separate function
    
    commit 5a40837debaa9dcc71765d32ce1a15be068b6cc2 upstream.
    
    The same logic is already used in two different places and now
    it will also be needed outside of the compilation unit, so split
    it into a separate function.
    
    Cc: stable@vger.kernel.org # 5.19
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Guido Günther <agx@sigxcpu.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3650c063f22d03795026bd6f3d473e5bbdabb442
Author: Jocelyn Falempe <jfalempe@redhat.com>
Date:   Thu Oct 13 15:28:10 2022 +0200

    drm/mgag200: Fix PLL setup for G200_SE_A rev >=4
    
    commit b389286d0234e1edbaf62ed8bc0892a568c33662 upstream.
    
    For G200_SE_A, PLL M setting is wrong, which leads to blank screen,
    or "signal out of range" on VGA display.
    previous code had "m |= 0x80" which was changed to
    m |= ((pixpllcn & BIT(8)) >> 1);
    
    Tested on G200_SE_A rev 42
    
    This line of code was moved to another file with
    commit 877507bb954e ("drm/mgag200: Provide per-device callbacks for
    PIXPLLC") but can be easily backported before this commit.
    
    v2: * put BIT(7) First to respect MSB-to-LSB (Thomas)
        * Add a comment to explain that this bit must be set (Thomas)
    
    Fixes: 2dd040946ecf ("drm/mgag200: Store values (not bits) in struct mgag200_pll_values")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jocelyn Falempe <jfalempe@redhat.com>
    Reviewed-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221013132810.521945-1-jfalempe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 622d527decaac0eb65512acada935a0fdc1d0202
Author: Zack Rusin <zackr@vmware.com>
Date:   Tue Oct 25 23:19:35 2022 -0400

    drm/vmwgfx: Validate the box size for the snooped cursor
    
    commit 4cf949c7fafe21e085a4ee386bb2dade9067316e upstream.
    
    Invalid userspace dma surface copies could potentially overflow
    the memcpy from the surface to the snooped image leading to crashes.
    To fix it the dimensions of the copybox have to be validated
    against the expected size of the snooped cursor.
    
    Signed-off-by: Zack Rusin <zackr@vmware.com>
    Fixes: 2ac863719e51 ("vmwgfx: Snoop DMA transfers with non-covering sizes")
    Cc: <stable@vger.kernel.org> # v3.2+
    Reviewed-by: Michael Banack <banackm@vmware.com>
    Reviewed-by: Martin Krastev <krastevm@vmware.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026031936.1004280-1-zack@kde.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d988f0bcf579b4bcb0b7aba217a882ec150bcc2a
Author: Simon Ser <contact@emersion.fr>
Date:   Mon Oct 17 15:32:01 2022 +0000

    drm/connector: send hotplug uevent on connector cleanup
    
    commit 6fdc2d490ea1369d17afd7e6eb66fecc5b7209bc upstream.
    
    A typical DP-MST unplug removes a KMS connector. However care must
    be taken to properly synchronize with user-space. The expected
    sequence of events is the following:
    
    1. The kernel notices that the DP-MST port is gone.
    2. The kernel marks the connector as disconnected, then sends a
       uevent to make user-space re-scan the connector list.
    3. User-space notices the connector goes from connected to disconnected,
       disables it.
    4. Kernel handles the IOCTL disabling the connector. On success,
       the very last reference to the struct drm_connector is dropped and
       drm_connector_cleanup() is called.
    5. The connector is removed from the list, and a uevent is sent to tell
       user-space that the connector disappeared.
    
    The very last step was missing. As a result, user-space thought the
    connector still existed and could try to disable it again. Since the
    kernel no longer knows about the connector, that would end up with
    EINVAL and confused user-space.
    
    Fix this by sending a hotplug uevent from drm_connector_cleanup().
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Cc: stable@vger.kernel.org
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Jonas Ådahl <jadahl@redhat.com>
    Tested-by: Jonas Ådahl <jadahl@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221017153150.60675-2-contact@emersion.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35fe1c238437155153c1aeeb94572b04fa60e0b5
Author: Wang Weiyang <wangweiyang2@huawei.com>
Date:   Tue Oct 25 19:31:01 2022 +0800

    device_cgroup: Roll back to original exceptions after copy failure
    
    commit e68bfbd3b3c3a0ec3cf8c230996ad8cabe90322f upstream.
    
    When add the 'a *:* rwm' entry to devcgroup A's whitelist, at first A's
    exceptions will be cleaned and A's behavior is changed to
    DEVCG_DEFAULT_ALLOW. Then parent's exceptions will be copyed to A's
    whitelist. If copy failure occurs, just return leaving A to grant
    permissions to all devices. And A may grant more permissions than
    parent.
    
    Backup A's whitelist and recover original exceptions after copy
    failure.
    
    Cc: stable@vger.kernel.org
    Fixes: 4cef7299b478 ("device_cgroup: add proper checking when changing default behavior")
    Signed-off-by: Wang Weiyang <wangweiyang2@huawei.com>
    Reviewed-by: Aristeu Rozanski <aris@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4def68cc15f37287a6b3bb8ccaaaba2aee6c5185
Author: Helge Deller <deller@gmx.de>
Date:   Wed Dec 14 22:17:57 2022 +0100

    parisc: Drop PMD_SHIFT from calculation in pgtable.h
    
    commit fe94cb1a614d2df2764d49ac959d8b7e4cb98e15 upstream.
    
    PMD_SHIFT isn't defined if CONFIG_PGTABLE_LEVELS == 3, and as
    such the kernel test robot found this warning:
    
     In file included from include/linux/pgtable.h:6,
                      from arch/parisc/kernel/head.S:23:
     arch/parisc/include/asm/pgtable.h:169:32: warning: "PMD_SHIFT" is not defined, evaluates to 0 [-Wundef]
         169 | #if (KERNEL_INITIAL_ORDER) >= (PMD_SHIFT)
    
    Avoid the warning by using PLD_SHIFT and BITS_PER_PTE.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: <stable@vger.kernel.org> # 6.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 790aba4492d62a3cbc932d5bb7904b0217428ec6
Author: Helge Deller <deller@gmx.de>
Date:   Sat Nov 26 21:35:29 2022 +0100

    parisc: Drop duplicate kgdb_pdc console
    
    commit 7e6652c79ecd74e1112500668d956367dc3772a5 upstream.
    
    The kgdb console is already implemented and registered in pdc_cons.c,
    so the duplicate code can be dropped.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # 6.1+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d97a584e350dcbe67ab2ee95b43dd7c91cc48235
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 17 20:05:43 2022 +0100

    parisc: Add missing FORCE prerequisites in Makefile
    
    commit 9086e6017957c5cd6ea28d94b70e0d513d6b7800 upstream.
    
    Fix those make warnings:
        arch/parisc/kernel/vdso32/Makefile:30: FORCE prerequisite is missing
        arch/parisc/kernel/vdso64/Makefile:30: FORCE prerequisite is missing
    
    Add the missing FORCE prerequisites for all build targets identified by
    "make help".
    
    Fixes: e1f86d7b4b2a5213 ("kbuild: warn if FORCE is missing for if_changed(_dep,_rule) and filechk")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # 5.18+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 553bc5890ed96a8d006224c3a4673c47fee0d12a
Author: Helge Deller <deller@gmx.de>
Date:   Sat Nov 26 21:29:31 2022 +0100

    parisc: Fix locking in pdc_iodc_print() firmware call
    
    commit 7236aae5f81f3efbd93d0601e74fc05994bc2580 upstream.
    
    Utilize pdc_lock spinlock to protect parallel modifications of the
    iodc_dbuf[] buffer, check length to prevent buffer overflow of
    iodc_dbuf[], drop the iodc_retbuf[] buffer and fix some wrong
    indentings.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # 6.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bbba171235e1887acd853fbf4db51b6f85adb70
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 17 17:45:40 2022 +0100

    parisc: Drop locking in pdc console code
    
    commit 7dc4dbfe750e1f18c511e73c8ed114da8de9ff85 upstream.
    
    No need to have specific locking for console I/O since
    the PDC functions provide an own locking.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # 6.1+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67c98fec87ed76b1feb2ae810051afd88dfa9df6
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 17 10:45:14 2022 +0800

    parisc: led: Fix potential null-ptr-deref in start_task()
    
    commit 41f563ab3c33698bdfc3403c7c2e6c94e73681e4 upstream.
    
    start_task() calls create_singlethread_workqueue() and not checked the
    ret value, which may return NULL. And a null-ptr-deref may happen:
    
    start_task()
        create_singlethread_workqueue() # failed, led_wq is NULL
        queue_delayed_work()
            queue_delayed_work_on()
                __queue_delayed_work()  # warning here, but continue
                    __queue_work()      # access wq->flags, null-ptr-deref
    
    Check the ret value and return -ENOMEM if it is NULL.
    
    Fixes: 3499495205a6 ("[PARISC] Use work queue in LED/LCD driver instead of tasklet.")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc88a50bc3398d229ffd20383b2b1cbadbfa2c38
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Nov 2 19:14:10 2022 +0800

    remoteproc: imx_rproc: Correct i.MX93 DRAM mapping
    
    commit ee18f2715e85f4ef051851a0c4831ee7ad7d83b3 upstream.
    
    According to updated reference mannual, the M33 DRAM view of
    0x[C,D]0000000 maps to A55 0xC0000000, so correct it.
    
    Fixes: 9222fabf0e39 ("remoteproc: imx_rproc: Support i.MX93")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221102111410.38737-1-peng.fan@oss.nxp.com
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2e8d55f044e7ccece277609b1fcf8577f1aced8
Author: Maria Yu <quic_aiquny@quicinc.com>
Date:   Tue Dec 6 09:59:57 2022 +0800

    remoteproc: core: Do pm_relax when in RPROC_OFFLINE state
    
    commit 11c7f9e3131ad14b27a957496088fa488b153a48 upstream.
    
    Make sure that pm_relax() happens even when the remoteproc
    is stopped before the crash handler work is scheduled.
    
    Signed-off-by: Maria Yu <quic_aiquny@quicinc.com>
    Cc: stable <stable@vger.kernel.org>
    Fixes: a781e5aa5911 ("remoteproc: core: Prevent system suspend during remoteproc recovery")
    Link: https://lore.kernel.org/r/20221206015957.2616-2-quic_aiquny@quicinc.com
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9693304b7133b81741add5bfb56f022596df012
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Fri Sep 30 15:50:16 2022 +0800

    remoteproc: imx_dsp_rproc: Add mutex protection for workqueue
    
    commit 47e6ab07018edebf94ce873cf50a05ec76ff2dde upstream.
    
    The workqueue may execute late even after remoteproc is stopped or
    stopping, some resources (rpmsg device and endpoint) have been
    released in rproc_stop_subdevices(), then rproc_vq_interrupt()
    accessing these resources will cause kennel dump.
    
    Call trace:
     virtqueue_add_split+0x1ac/0x560
     virtqueue_add_inbuf+0x4c/0x60
     rpmsg_recv_done+0x15c/0x294
     vring_interrupt+0x6c/0xa4
     rproc_vq_interrupt+0x30/0x50
     imx_dsp_rproc_vq_work+0x24/0x40 [imx_dsp_rproc]
     process_one_work+0x1d0/0x354
     worker_thread+0x13c/0x470
     kthread+0x154/0x160
     ret_from_fork+0x10/0x20
    
    Add mutex protection in imx_dsp_rproc_vq_work(), if the state is
    not running, then just skip calling rproc_vq_interrupt().
    
    Also the flush workqueue operation can't be added in rproc stop
    for the same reason. The call sequence is
    
    rproc_shutdown
    -> rproc_stop
       ->rproc_stop_subdevices
       ->rproc->ops->stop()
         ->imx_dsp_rproc_stop
           ->flush_work
             -> rproc_vq_interrupt
    
    The resource needed by rproc_vq_interrupt has been released in
    rproc_stop_subdevices, so flush_work is not safe to be called in
    imx_dsp_rproc_stop.
    
    Fixes: ec0e5549f358 ("remoteproc: imx_dsp_rproc: Add remoteproc driver for DSP on i.MX")
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1664524216-19949-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17183187dc862a828f8e54380d0596eafa0b09f8
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Mon Dec 12 15:50:41 2022 -0800

    hugetlb: really allocate vma lock for all sharable vmas
    
    commit e700898fa075c69b3ae02b702ab57fb75e1a82ec upstream.
    
    Commit bbff39cc6cbc ("hugetlb: allocate vma lock for all sharable vmas")
    removed the pmd sharable checks in the vma lock helper routines.  However,
    it left the functional version of helper routines behind #ifdef
    CONFIG_ARCH_WANT_HUGE_PMD_SHARE.  Therefore, the vma lock is not being
    used for sharable vmas on architectures that do not support pmd sharing.
    On these architectures, a potential fault/truncation race is exposed that
    could leave pages in a hugetlb file past i_size until the file is removed.
    
    Move the functional vma lock helpers outside the ifdef, and remove the
    non-functional stubs.  Since the vma lock is not just for pmd sharing,
    rename the routine __vma_shareable_flags_pmd.
    
    Link: https://lkml.kernel.org/r/20221212235042.178355-1-mike.kravetz@oracle.com
    Fixes: bbff39cc6cbc ("hugetlb: allocate vma lock for all sharable vmas")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: James Houghton <jthoughton@google.com>
    Cc: Mina Almasry <almasrymina@google.com>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: Naoya Horiguchi <naoya.horiguchi@linux.dev>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee29001a637fda7e3025487f24653494b2a196b5
Author: Li Hua <hucool.lihua@huawei.com>
Date:   Mon Nov 21 11:06:20 2022 +0800

    test_kprobes: Fix implicit declaration error of test_kprobes
    
    commit 63a4dc0a0bb0e9bfeb2c88ccda81abdde4cdd6b8 upstream.
    
    If KPROBES_SANITY_TEST and ARCH_CORRECT_STACKTRACE_ON_KRETPROBE is enabled, but
    STACKTRACE is not set. Build failed as below:
    
    lib/test_kprobes.c: In function ‘stacktrace_return_handler’:
    lib/test_kprobes.c:228:8: error: implicit declaration of function ‘stack_trace_save’; did you mean ‘stacktrace_driver’? [-Werror=implicit-function-declaration]
      ret = stack_trace_save(stack_buf, STACK_BUF_SIZE, 0);
            ^~~~~~~~~~~~~~~~
            stacktrace_driver
    cc1: all warnings being treated as errors
    scripts/Makefile.build:250: recipe for target 'lib/test_kprobes.o' failed
    make[2]: *** [lib/test_kprobes.o] Error 1
    
    To fix this error, Select STACKTRACE if ARCH_CORRECT_STACKTRACE_ON_KRETPROBE is enabled.
    
    Link: https://lore.kernel.org/all/20221121030620.63181-1-hucool.lihua@huawei.com/
    
    Fixes: 1f6d3a8f5e39 ("kprobes: Add a test case for stacktrace from kretprobe handler")
    Cc: stable@vger.kernel.org
    Signed-off-by: Li Hua <hucool.lihua@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e8834776c3706c04c77dcfcb5556e1b2be10323
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Mon Sep 19 10:56:38 2022 -0500

    iommu/amd: Fix ill-formed ivrs_ioapic, ivrs_hpet and ivrs_acpihid options
    
    commit 1198d2316dc4265a97d0e8445a22c7a6d17580a4 upstream.
    
    Currently, these options cause the following libkmod error:
    
    libkmod: ERROR ../libkmod/libkmod-config.c:489 kcmdline_parse_result: \
            Ignoring bad option on kernel command line while parsing module \
            name: 'ivrs_xxxx[XX:XX'
    
    Fix by introducing a new parameter format for these options and
    throw a warning for the deprecated format.
    
    Users are still allowed to omit the PCI Segment if zero.
    
    Adding a Link: to the reason why we're modding the syntax parsing
    in the driver and not in libkmod.
    
    Fixes: ca3bf5d47cec ("iommu/amd: Introduces ivrs_acpihid kernel parameter")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-modules/20200310082308.14318-2-lucas.demarchi@intel.com/
    Reported-by: Kim Phillips <kim.phillips@amd.com>
    Co-developed-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Link: https://lore.kernel.org/r/20220919155638.391481-2-kim.phillips@amd.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 808948f4922f6b0bc49547cd8e928b67b8a0b47e
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Mon Sep 19 10:56:37 2022 -0500

    iommu/amd: Fix ivrs_acpihid cmdline parsing code
    
    commit 5f18e9f8868c6d4eae71678e7ebd4977b7d8c8cf upstream.
    
    The second (UID) strcmp in acpi_dev_hid_uid_match considers
    "0" and "00" different, which can prevent device registration.
    
    Have the AMD IOMMU driver's ivrs_acpihid parsing code remove
    any leading zeroes to make the UID strcmp succeed.  Now users
    can safely specify "AMDxxxxx:00" or "AMDxxxxx:0" and expect
    the same behaviour.
    
    Fixes: ca3bf5d47cec ("iommu/amd: Introduces ivrs_acpihid kernel parameter")
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Cc: stable@vger.kernel.org
    Cc: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
    Cc: Joerg Roedel <jroedel@suse.de>
    Link: https://lore.kernel.org/r/20220919155638.391481-1-kim.phillips@amd.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdbbb40583195c1b060a1bb26dd1beaf85ea02f9
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Nov 14 09:13:43 2022 +0100

    phy: qcom-qmp-combo: fix sc8180x reset
    
    commit 910dd4883d757af5faac92590f33f0f7da963032 upstream.
    
    The SC8180X has two resets but the DP configuration erroneously
    described only one.
    
    In case the DP part of the PHY is initialised before the USB part (e.g.
    depending on probe order), then only the first reset would be asserted.
    
    Fixes: 1633802cd4ac ("phy: qcom: qmp: Add SC8180x USB/DP combo")
    Cc: stable@vger.kernel.org      # 5.15
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20221114081346.5116-4-johan+linaro@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1066b58cc02d223ee7b83f8cbde43b1efda56bed
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Nov 14 09:13:42 2022 +0100

    phy: qcom-qmp-combo: fix sdm845 reset
    
    commit e965ab8216a419fadb4520b65a95dc7017daa800 upstream.
    
    The SDM845 has two resets but the DP configuration erroneously described
    only one.
    
    In case the DP part of the PHY is initialised before the USB part (e.g.
    depending on probe order), then only the first reset would be asserted.
    
    Add a dedicated configuration for SDM845 rather than reuse the
    incompatible SC7180 configuration.
    
    Fixes: d88497fb6bbd ("phy: qualcomm: phy-qcom-qmp: add support for combo USB3+DP phy on SDM845")
    Cc: stable@vger.kernel.org      # 6.1
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20221114081346.5116-3-johan+linaro@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a1129c4b445e1a2b82c915c5cd932442539b2fc
Author: Qiang Yu <quic_qianyu@quicinc.com>
Date:   Sun Oct 16 11:05:32 2022 +0800

    bus: mhi: host: Fix race between channel preparation and M0 event
    
    commit 869a99907faea6d1835b0bd0d0422ae3519c6ea9 upstream.
    
    There is a race condition where mhi_prepare_channel() updates the
    read and write pointers as the base address and in parallel, if
    an M0 transition occurs, the tasklet goes ahead and rings
    doorbells for all channels with a delta in TRE rings assuming
    they are already enabled. This causes a null pointer access. Fix
    it by adding a channel enabled check before ringing channel
    doorbells.
    
    Cc: stable@vger.kernel.org # 5.19
    Fixes: a6e2e3522f29 "bus: mhi: core: Add support for PM state transitions"
    Signed-off-by: Qiang Yu <quic_qianyu@quicinc.com>
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Link: https://lore.kernel.org/r/1665889532-13634-1-git-send-email-quic_qianyu@quicinc.com
    [mani: CCed stable list]
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 878d15dd43bcb2d7d9f807b0cc57ece7d23c7e29
Author: Isaac J. Manjarres <isaacmanjarres@google.com>
Date:   Tue Sep 20 17:14:13 2022 -0700

    driver core: Fix bus_type.match() error handling in __driver_attach()
    
    commit 27c0d217340e47ec995557f61423ef415afba987 upstream.
    
    When a driver registers with a bus, it will attempt to match with every
    device on the bus through the __driver_attach() function. Currently, if
    the bus_type.match() function encounters an error that is not
    -EPROBE_DEFER, __driver_attach() will return a negative error code, which
    causes the driver registration logic to stop trying to match with the
    remaining devices on the bus.
    
    This behavior is not correct; a failure while matching a driver to a
    device does not mean that the driver won't be able to match and bind
    with other devices on the bus. Update the logic in __driver_attach()
    to reflect this.
    
    Fixes: 656b8035b0ee ("ARM: 8524/1: driver cohandle -EPROBE_DEFER from bus_type.match()")
    Cc: stable@vger.kernel.org
    Cc: Saravana Kannan <saravanak@google.com>
    Signed-off-by: Isaac J. Manjarres <isaacmanjarres@google.com>
    Link: https://lore.kernel.org/r/20220921001414.4046492-1-isaacmanjarres@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cced6678325bd4b400018e0e616f4cd98179f784
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Sep 28 13:45:05 2022 -0500

    crypto: ccp - Add support for TEE for PCI ID 0x14CA
    
    commit 10da230a4df1dfe32a58eb09246f5ffe82346f27 upstream.
    
    SoCs containing 0x14CA are present both in datacenter parts that
    support SEV as well as client parts that support TEE.
    
    Cc: stable@vger.kernel.org # 5.15+
    Tested-by: Rijo-john Thomas <Rijo-john.Thomas@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b70acb182f45544aa66f6c343d1faac4a3e5e49a
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Thu Oct 6 04:34:19 2022 +0000

    crypto: n2 - add missing hash statesize
    
    commit 76a4e874593543a2dff91d249c95bac728df2774 upstream.
    
    Add missing statesize to hash templates.
    This is mandatory otherwise no algorithms can be registered as the core
    requires statesize to be set.
    
    CC: stable@kernel.org # 4.3+
    Reported-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Tested-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Fixes: 0a625fd2abaa ("crypto: n2 - Add Niagara2 crypto driver")
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85292a29689a740b36ae2ff41b92bc51eb97e01f
Author: Sergey Matyukevich <sergey.matyukevich@syntacore.com>
Date:   Mon Aug 29 23:52:19 2022 +0300

    riscv: mm: notify remote harts about mmu cache updates
    
    commit 4bd1d80efb5af640f99157f39b50fb11326ce641 upstream.
    
    Current implementation of update_mmu_cache function performs local TLB
    flush. It does not take into account ASID information. Besides, it does
    not take into account other harts currently running the same mm context
    or possible migration of the running context to other harts. Meanwhile
    TLB flush is not performed for every context switch if ASID support
    is enabled.
    
    Patch [1] proposed to add ASID support to update_mmu_cache to avoid
    flushing local TLB entirely. This patch takes into account other
    harts currently running the same mm context as well as possible
    migration of this context to other harts.
    
    For this purpose the approach from flush_icache_mm is reused. Remote
    harts currently running the same mm context are informed via SBI calls
    that they need to flush their local TLBs. All the other harts are marked
    as needing a deferred TLB flush when this mm context runs on them.
    
    [1] https://lore.kernel.org/linux-riscv/20220821013926.8968-1-tjytimi@163.com/
    
    Signed-off-by: Sergey Matyukevich <sergey.matyukevich@syntacore.com>
    Fixes: 65d4b9c53017 ("RISC-V: Implement ASID allocator")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-riscv/20220829205219.283543-1-geomatsi@gmail.com/#t
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00777a099574ad99a07d3a6db2f62c95b420ff2e
Author: Guo Ren <guoren@kernel.org>
Date:   Wed Nov 9 01:49:36 2022 -0500

    riscv: stacktrace: Fixup ftrace_graph_ret_addr retp argument
    
    commit 5c3022e4a616d800cf5f4c3a981d7992179e44a1 upstream.
    
    The 'retp' is a pointer to the return address on the stack, so we
    must pass the current return address pointer as the 'retp'
    argument to ftrace_push_return_trace(). Not parent function's
    return address on the stack.
    
    Fixes: b785ec129bd9 ("riscv/ftrace: Add HAVE_FUNCTION_GRAPH_RET_ADDR_PTR support")
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Signed-off-by: Guo Ren <guoren@kernel.org>
    Link: https://lore.kernel.org/r/20221109064937.3643993-2-guoren@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdea2da6787583ecca43594132533a2ac8d7cd21
Author: Li Huafei <lihuafei1@huawei.com>
Date:   Fri Nov 4 17:56:58 2022 +0800

    RISC-V: kexec: Fix memory leak of elf header buffer
    
    commit cbc32023ddbdf4baa3d9dc513a2184a84080a5a2 upstream.
    
    This is reported by kmemleak detector:
    
    unreferenced object 0xff2000000403d000 (size 4096):
      comm "kexec", pid 146, jiffies 4294900633 (age 64.792s)
      hex dump (first 32 bytes):
        7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00  .ELF............
        04 00 f3 00 01 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000566ca97c>] kmemleak_vmalloc+0x3c/0xbe
        [<00000000979283d8>] __vmalloc_node_range+0x3ac/0x560
        [<00000000b4b3712a>] __vmalloc_node+0x56/0x62
        [<00000000854f75e2>] vzalloc+0x2c/0x34
        [<00000000e9a00db9>] crash_prepare_elf64_headers+0x80/0x30c
        [<0000000067e8bf48>] elf_kexec_load+0x3e8/0x4ec
        [<0000000036548e09>] kexec_image_load_default+0x40/0x4c
        [<0000000079fbe1b4>] sys_kexec_file_load+0x1c4/0x322
        [<0000000040c62c03>] ret_from_syscall+0x0/0x2
    
    In elf_kexec_load(), a buffer is allocated via vzalloc() to store elf
    headers.  While it's not freed back to system when kdump kernel is
    reloaded or unloaded, or when image->elf_header is successfully set and
    then fails to load kdump kernel for some reason. Fix it by freeing the
    buffer in arch_kimage_file_post_load_cleanup().
    
    Fixes: 8acea455fafa ("RISC-V: Support for kexec_file on panic")
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/r/20221104095658.141222-2-lihuafei1@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abbb887da77408892c0c8fb4cbbc2a5bb03b140e
Author: Guo Ren <guoren@kernel.org>
Date:   Wed Dec 7 04:11:12 2022 -0500

    riscv: Fixup compile error with !MMU
    
    commit c528ef0888b75f673f7d48022de8d31d5b451e8c upstream.
    
    Current nommu_virt_defconfig can't compile:
    
    In file included from
    arch/riscv/kernel/crash_core.c:3:
    arch/riscv/kernel/crash_core.c:
    In function 'arch_crash_save_vmcoreinfo':
    arch/riscv/kernel/crash_core.c:8:27:
    error: 'VA_BITS' undeclared (first use in this function)
        8 |         VMCOREINFO_NUMBER(VA_BITS);
          |                           ^~~~~~~
    
    Add MMU dependency for KEXEC_FILE.
    
    Fixes: 6261586e0c91 ("RISC-V: Add kexec_file support")
    Reported-by: Conor Dooley <conor.dooley@microchip.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Guo Ren <guoren@kernel.org>
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/r/20221207091112.2258674-1-guoren@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc387c34d8dd10b02a333df098f8fd9bba177a45
Author: Li Huafei <lihuafei1@huawei.com>
Date:   Fri Nov 4 17:56:57 2022 +0800

    RISC-V: kexec: Fix memory leak of fdt buffer
    
    commit 96df59b1ae23f5c11698c3c2159aeb2ecd4944a4 upstream.
    
    This is reported by kmemleak detector:
    
    unreferenced object 0xff60000082864000 (size 9588):
      comm "kexec", pid 146, jiffies 4294900634 (age 64.788s)
      hex dump (first 32 bytes):
        d0 0d fe ed 00 00 12 ed 00 00 00 48 00 00 11 40  ...........H...@
        00 00 00 28 00 00 00 11 00 00 00 02 00 00 00 00  ...(............
      backtrace:
        [<00000000f95b17c4>] kmemleak_alloc+0x34/0x3e
        [<00000000b9ec8e3e>] kmalloc_order+0x9c/0xc4
        [<00000000a95cf02e>] kmalloc_order_trace+0x34/0xb6
        [<00000000f01e68b4>] __kmalloc+0x5c2/0x62a
        [<000000002bd497b2>] kvmalloc_node+0x66/0xd6
        [<00000000906542fa>] of_kexec_alloc_and_setup_fdt+0xa6/0x6ea
        [<00000000e1166bde>] elf_kexec_load+0x206/0x4ec
        [<0000000036548e09>] kexec_image_load_default+0x40/0x4c
        [<0000000079fbe1b4>] sys_kexec_file_load+0x1c4/0x322
        [<0000000040c62c03>] ret_from_syscall+0x0/0x2
    
    In elf_kexec_load(), a buffer is allocated via kvmalloc() to store fdt.
    While it's not freed back to system when kexec kernel is reloaded or
    unloaded.  Then memory leak is caused.  Fix it by introducing riscv
    specific function arch_kimage_file_post_load_cleanup(), and freeing the
    buffer there.
    
    Fixes: 6261586e0c91 ("RISC-V: Add kexec_file support")
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Reviewed-by: Liao Chang <liaochang1@huawei.com>
    Link: https://lore.kernel.org/r/20221104095658.141222-1-lihuafei1@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33528863d07e7f6619264f3ce774ae414027fce
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue Nov 8 17:05:59 2022 -0600

    PCI/sysfs: Fix double free in error path
    
    commit aa382ffa705bea9931ec92b6f3c70e1fdb372195 upstream.
    
    When pci_create_attr() fails, pci_remove_resource_files() is called which
    will iterate over the res_attr[_wc] arrays and frees every non NULL entry.
    To avoid a double free here set the array entry only after it's clear we
    successfully initialized it.
    
    Fixes: b562ec8f74e4 ("PCI: Don't leak memory if sysfs_create_bin_file() fails")
    Link: https://lore.kernel.org/r/20221007070735.GX986@pengutronix.de/
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 518573988a2f14f517403db2ece5ddaefba21e94
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Wed Oct 26 02:11:21 2022 -0400

    PCI: Fix pci_device_is_present() for VFs by checking PF
    
    commit 98b04dd0b4577894520493d96bc4623387767445 upstream.
    
    pci_device_is_present() previously didn't work for VFs because it reads the
    Vendor and Device ID, which are 0xffff for VFs, which looks like they
    aren't present.  Check the PF instead.
    
    Wei Gong reported that if virtio I/O is in progress when the driver is
    unbound or "0" is written to /sys/.../sriov_numvfs, the virtio I/O
    operation hangs, which may result in output like this:
    
      task:bash state:D stack:    0 pid: 1773 ppid:  1241 flags:0x00004002
      Call Trace:
       schedule+0x4f/0xc0
       blk_mq_freeze_queue_wait+0x69/0xa0
       blk_mq_freeze_queue+0x1b/0x20
       blk_cleanup_queue+0x3d/0xd0
       virtblk_remove+0x3c/0xb0 [virtio_blk]
       virtio_dev_remove+0x4b/0x80
       ...
       device_unregister+0x1b/0x60
       unregister_virtio_device+0x18/0x30
       virtio_pci_remove+0x41/0x80
       pci_device_remove+0x3e/0xb0
    
    This happened because pci_device_is_present(VF) returned "false" in
    virtio_pci_remove(), so it called virtio_break_device().  The broken vq
    meant that vring_interrupt() skipped the vq.callback() that would have
    completed the virtio I/O operation via virtblk_done().
    
    [bhelgaas: commit log, simplify to always use pci_physfn(), add stable tag]
    Link: https://lore.kernel.org/r/20221026060912.173250-1-mst@redhat.com
    Reported-by: Wei Gong <gongwei833x@gmail.com>
    Tested-by: Wei Gong <gongwei833x@gmail.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06bc122d9b5f130ec23647a37e316215aa577c6a
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Fri Nov 25 20:18:11 2022 +0800

    crypto: ccree,hisilicon - Fix dependencies to correct algorithm
    
    commit 2ae6feb1a1f6678fe11864f1b6920ed10b09ad6a upstream.
    
    Commit d2825fa9365d ("crypto: sm3,sm4 - move into crypto directory") moves
    the SM3 and SM4 stand-alone library and the algorithm implementation for
    the Crypto API into the same directory, and the corresponding relationship
    of Kconfig is modified, CONFIG_CRYPTO_SM3/4 corresponds to the stand-alone
    library of SM3/4, and CONFIG_CRYPTO_SM3/4_GENERIC corresponds to the
    algorithm implementation for the Crypto API. Therefore, it is necessary
    for this module to depend on the correct algorithm.
    
    Fixes: d2825fa9365d ("crypto: sm3,sm4 - move into crypto directory")
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: stable@vger.kernel.org # v5.19+
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d93b6a8a34e1062cf25b31ac4dc94a3d4130faca
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Dec 1 16:23:25 2022 -0800

    um: virt-pci: Avoid GCC non-NULL warning
    
    commit bdc77507fecd00ddad2f502f86a48a9ec38f0f84 upstream.
    
    GCC gets confused about the return value of get_cpu_var() possibly
    being NULL, so explicitly test for it before calls to memcpy() and
    memset(). Avoids warnings like this:
    
       arch/um/drivers/virt-pci.c: In function 'um_pci_send_cmd':
       include/linux/fortify-string.h:48:33: warning: argument 1 null where non-null expected [-Wnonnull]
          48 | #define __underlying_memcpy     __builtin_memcpy
             |                                 ^
       include/linux/fortify-string.h:438:9: note: in expansion of macro '__underlying_memcpy'
         438 |         __underlying_##op(p, q, __fortify_size);                        \
             |         ^~~~~~~~~~~~~
       include/linux/fortify-string.h:483:26: note: in expansion of macro '__fortify_memcpy_chk'
         483 | #define memcpy(p, q, s)  __fortify_memcpy_chk(p, q, s,                  \
             |                          ^~~~~~~~~~~~~~~~~~~~
       arch/um/drivers/virt-pci.c:100:9: note: in expansion of macro 'memcpy'
         100 |         memcpy(buf, cmd, cmd_size);
             |         ^~~~~~
    
    While at it, avoid literal "8" and use stored sizeof(buf->data) in
    memset() and um_pci_send_cmd().
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/202211271212.SUZSC9f9-lkp@intel.com
    Fixes: ba38961a069b ("um: Enable FORTIFY_SOURCE")
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Xiu Jianfeng <xiujianfeng@huawei.com>
    Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Cc: linux-um@lists.infradead.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f375bcf69f58fd0744c9dfd1b6b891a27301d67b
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Wed Nov 2 17:30:06 2022 +0100

    ima: Fix memory leak in __ima_inode_hash()
    
    commit 8c1d6a050a0f16e0a9d32eaf53b965c77279c6f8 upstream.
    
    Commit f3cc6b25dcc5 ("ima: always measure and audit files in policy") lets
    measurement or audit happen even if the file digest cannot be calculated.
    
    As a result, iint->ima_hash could have been allocated despite
    ima_collect_measurement() returning an error.
    
    Since ima_hash belongs to a temporary inode metadata structure, declared
    at the beginning of __ima_inode_hash(), just add a kfree() call if
    ima_collect_measurement() returns an error different from -ENOMEM (in that
    case, ima_hash should not have been allocated).
    
    Cc: stable@vger.kernel.org
    Fixes: 280fe8367b0d ("ima: Always return a file measurement in ima_file_hash()")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59b6c0ea1a8dcc6ce2cca6f7135f05fd4355b9de
Author: Yaliang Wang <Yaliang.Wang@windriver.com>
Date:   Mon Oct 17 01:19:01 2022 +0800

    mtd: spi-nor: gigadevice: gd25q256: replace gd25q256_default_init with gd25q256_post_bfpt
    
    commit 4dc49062a7e9c0c7261807fb855df1c611eb78c3 upstream.
    
    When utilizing PARSE_SFDP to initialize the flash parameter, the
    deprecated initializing method spi_nor_init_params_deprecated() and the
    function spi_nor_manufacturer_init_params() within it will never be
    executed, which results in the default_init hook function will also never
    be executed.
    
    This is okay for 'D' generation of GD25Q256, because 'D' generation is
    implementing the JESD216B standards, it has QER field defined in BFPT,
    parsing the SFDP can properly set the quad_enable function. The 'E'
    generation also implements the JESD216B standards, and it has the same
    status register definitions as 'D' generation, parsing the SFDP to set
    the quad_enable function should also work for 'E' generation.
    
    However, the same thing can't apply to 'C' generation. 'C' generation
    'GD25Q256C' implements the JESD216 standards, and it doesn't have the
    QER field defined in BFPT, since it does have QE bit in status register
    1, the quad_enable hook needs to be tweaked to properly set the
    quad_enable function, this can be done in post_bfpt fixup hook.
    
    Fixes: 047275f7de18 ("mtd: spi-nor: gigadevice: gd25q256: Init flash based on SFDP")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Yaliang Wang <Yaliang.Wang@windriver.com>
    [tudor.ambarus@microchip.com: Update comment in gd25q256_post_bfpt]
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221016171901.1483542-2-yaliang.wang@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fc9b20a7688000fcf4d7fbaa58e415a3cdda961
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Nov 15 16:17:43 2022 +0300

    ipmi: fix use after free in _ipmi_destroy_user()
    
    commit a92ce570c81dc0feaeb12a429b4bc65686d17967 upstream.
    
    The intf_free() function frees the "intf" pointer so we cannot
    dereference it again on the next line.
    
    Fixes: cbb79863fc31 ("ipmi: Don't allow device module unload when in use")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Message-Id: <Y3M8xa1drZv4CToE@kili>
    Cc: <stable@vger.kernel.org> # 5.5+
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ac71fd8ffa11b78f54200f3fd988f887c658ded
Author: Huaxin Lu <luhuaxin1@huawei.com>
Date:   Thu Nov 3 00:09:49 2022 +0800

    ima: Fix a potential NULL pointer access in ima_restore_measurement_list
    
    commit 11220db412edae8dba58853238f53258268bdb88 upstream.
    
    In restore_template_fmt, when kstrdup fails, a non-NULL value will still be
    returned, which causes a NULL pointer access in template_desc_init_fields.
    
    Fixes: c7d09367702e ("ima: support restoring multiple template formats")
    Cc: stable@kernel.org
    Co-developed-by: Jiaming Li <lijiaming30@huawei.com>
    Signed-off-by: Jiaming Li <lijiaming30@huawei.com>
    Signed-off-by: Huaxin Lu <luhuaxin1@huawei.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9944a141e5eaaef6f2298cd3be1783b027b4a0dd
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Nov 19 09:14:12 2021 +0100

    mtd: spi-nor: Check for zero erase size in spi_nor_find_best_erase_type()
    
    commit 2ebc336be08160debfe27f87660cf550d710f3e9 upstream.
    
    Erase can be zeroed in spi_nor_parse_4bait() or
    spi_nor_init_non_uniform_erase_map(). In practice it happened with
    mt25qu256a, which supports 4K, 32K, 64K erases with 3b address commands,
    but only 4K and 64K erase with 4b address commands.
    
    Fixes: dc92843159a7 ("mtd: spi-nor: fix erase_type array to indicate current map conf")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211119081412.29732-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c476590feffaf16bfaed8e826afdf7b0f3d6d6e
Author: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
Date:   Fri Oct 7 17:26:16 2022 +0800

    ipmi: fix long wait in unload when IPMI disconnect
    
    commit f6f1234d98cce69578bfac79df147a1f6660596c upstream.
    
    When fixing the problem mentioned in PATCH1, we also found
    the following problem:
    
    If the IPMI is disconnected and in the sending process, the
    uninstallation driver will be stuck for a long time.
    
    The main problem is that uninstalling the driver waits for curr_msg to
    be sent or HOSED. After stopping tasklet, the only place to trigger the
    timeout mechanism is the circular poll in shutdown_smi.
    
    The poll function delays 10us and calls smi_event_handler(smi_info,10).
    Smi_event_handler deducts 10us from kcs->ibf_timeout.
    
    But the poll func is followed by schedule_timeout_uninterruptible(1).
    The time consumed here is not counted in kcs->ibf_timeout.
    
    So when 10us is deducted from kcs->ibf_timeout, at least 1 jiffies has
    actually passed. The waiting time has increased by more than a
    hundredfold.
    
    Now instead of calling poll(). call smi_event_handler() directly and
    calculate the elapsed time.
    
    For verification, you can directly use ebpf to check the kcs->
    ibf_timeout for each call to kcs_event() when IPMI is disconnected.
    Decrement at normal rate before unloading. The decrement rate becomes
    very slow after unloading.
    
      $ bpftrace -e 'kprobe:kcs_event {printf("kcs->ibftimeout : %d\n",
          *(arg0+584));}'
    
    Signed-off-by: Zhang Yuchen <zhangyuchen.lcr@bytedance.com>
    Message-Id: <20221007092617.87597-3-zhangyuchen.lcr@bytedance.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5038ee677606106c91564f9c4557d808d14bad70
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Thu Sep 8 00:44:09 2022 +0200

    ipu3-imgu: Fix NULL pointer dereference in imgu_subdev_set_selection()
    
    commit dc608edf7d45ba0c2ad14c06eccd66474fec7847 upstream.
    
    Calling v4l2_subdev_get_try_crop() and v4l2_subdev_get_try_compose()
    with a subdev state of NULL leads to a NULL pointer dereference. This
    can currently happen in imgu_subdev_set_selection() when the state
    passed in is NULL, as this method first gets pointers to both the "try"
    and "active" states and only then decides which to use.
    
    The same issue has been addressed for imgu_subdev_get_selection() with
    commit 30d03a0de650 ("ipu3-imgu: Fix NULL pointer dereference in active
    selection access"). However the issue still persists in
    imgu_subdev_set_selection().
    
    Therefore, apply a similar fix as done in the aforementioned commit to
    imgu_subdev_set_selection(). To keep things a bit cleaner, introduce
    helper functions for "crop" and "compose" access and use them in both
    imgu_subdev_set_selection() and imgu_subdev_get_selection().
    
    Fixes: 0d346d2a6f54 ("media: v4l2-subdev: add subdev-wide state struct")
    Cc: stable@vger.kernel.org # for v5.14 and later
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9526c179b9cbd54aaeaa54548c9e36655ad6100b
Author: Aidan MacDonald <aidanmacdonald.0x0@gmail.com>
Date:   Sun Oct 23 15:33:20 2022 +0100

    ASoC: jz4740-i2s: Handle independent FIFO flush bits
    
    commit 8b3a9ad86239f80ed569e23c3954a311f66481d6 upstream.
    
    On the JZ4740, there is a single bit that flushes (empties) both
    the transmit and receive FIFO. Later SoCs have independent flush
    bits for each FIFO.
    
    Independent FIFOs can be flushed before the snd_soc_dai_active()
    check because it won't disturb other active streams. This ensures
    that the FIFO we're about to use is always flushed before starting
    up. With shared FIFOs we can't do that because if another substream
    is active, flushing its FIFO would cause underrun errors.
    
    This also fixes a bug: since we were only setting the JZ4740's
    flush bit, which corresponds to the TX FIFO flush bit on other
    SoCs, other SoCs were not having their RX FIFO flushed at all.
    
    Fixes: 967beb2e8777 ("ASoC: jz4740: Add jz4780 support")
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Aidan MacDonald <aidanmacdonald.0x0@gmail.com>
    Link: https://lore.kernel.org/r/20221023143328.160866-2-aidanmacdonald.0x0@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 360ef3bcf73054d9e84a263f7e9e87618cdb5aa0
Author: Michael Walle <michael@walle.cc>
Date:   Thu Oct 27 19:12:21 2022 +0200

    wifi: wilc1000: sdio: fix module autoloading
    
    commit 57d545b5a3d6ce3a8fb6b093f02bfcbb908973f3 upstream.
    
    There are no SDIO module aliases included in the driver, therefore,
    module autoloading isn't working. Add the proper MODULE_DEVICE_TABLE().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20221027171221.491937-1-michael@walle.cc
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19d5b47b0e09e61d0bc213d85c75f1e03172e72a
Author: Aditya Garg <gargaditya08@live.com>
Date:   Thu Oct 27 10:01:43 2022 +0000

    efi: Add iMac Pro 2017 to uefi skip cert quirk
    
    commit 0be56a116220f9e5731a6609e66a11accfe8d8e2 upstream.
    
    The iMac Pro 2017 is also a T2 Mac. Thus add it to the list of uefi skip
    cert.
    
    Cc: stable@vger.kernel.org
    Fixes: 155ca952c7ca ("efi: Do not import certificates from UEFI Secure Boot for T2 Macs")
    Link: https://lore.kernel.org/linux-integrity/9D46D92F-1381-4F10-989C-1A12CD2FFDD8@live.com/
    Signed-off-by: Aditya Garg <gargaditya08@live.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa4c785566effdd84760522f8b2e140888a61759
Author: Florian-Ewald Mueller <florian-ewald.mueller@ionos.com>
Date:   Tue Oct 25 09:37:05 2022 +0200

    md/bitmap: Fix bitmap chunk size overflow issues
    
    commit 4555211190798b6b6fa2c37667d175bf67945c78 upstream.
    
    - limit bitmap chunk size internal u64 variable to values not overflowing
      the u32 bitmap superblock structure variable stored on persistent media
    - assign bitmap chunk size internal u64 variable from unsigned values to
      avoid possible sign extension artifacts when assigning from a s32 value
    
    The bug has been there since at least kernel 4.0.
    Steps to reproduce it:
    1: mdadm -C /dev/mdx -l 1 --bitmap=internal --bitmap-chunk=256M -e 1.2
    -n2 /dev/rnbd1 /dev/rnbd2
    2 resize member device rnbd1 and rnbd2 to 8 TB
    3 mdadm --grow /dev/mdx --size=max
    
    The bitmap_chunksize will overflow without patch.
    
    Cc: stable@vger.kernel.org
    
    Signed-off-by: Florian-Ewald Mueller <florian-ewald.mueller@ionos.com>
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab87d6f26e40bef8792ec6c2aca61b0cd476ddd7
Author: Damien Le Moal <damien.lemoal@opensource.wdc.com>
Date:   Thu Nov 24 11:12:08 2022 +0900

    block: mq-deadline: Do not break sequential write streams to zoned HDDs
    
    commit 015d02f48537cf2d1a65eeac50717566f9db6eec upstream.
    
    mq-deadline ensures an in order dispatching of write requests to zoned
    block devices using a per zone lock (a bit). This implies that for any
    purely sequential write workload, the drive is exercised most of the
    time at a maximum queue depth of one.
    
    However, when such sequential write workload crosses a zone boundary
    (when sequentially writing multiple contiguous zones), zone write
    locking may prevent the last write to one zone to be issued (as the
    previous write is still being executed) but allow the first write to the
    following zone to be issued (as that zone is not yet being writen and
    not locked). This result in an out of order delivery of the sequential
    write commands to the device every time a zone boundary is crossed.
    
    While such behavior does not break the sequential write constraint of
    zoned block devices (and does not generate any write error), some zoned
    hard-disks react badly to seeing these out of order writes, resulting in
    lower write throughput.
    
    This problem can be addressed by always dispatching the first request
    of a stream of sequential write requests, regardless of the zones
    targeted by these sequential writes. To do so, the function
    deadline_skip_seq_writes() is introduced and used in
    deadline_next_request() to select the next write command to issue if the
    target device is an HDD (blk_queue_nonrot() being false).
    deadline_fifo_request() is modified using the new
    deadline_earlier_request() and deadline_is_seq_write() helpers to ignore
    requests in the fifo list that have a preceding request in lba order
    that is sequential.
    
    With this fix, a sequential write workload executed with the following
    fio command:
    
    fio  --name=seq-write --filename=/dev/sda --zonemode=zbd --direct=1 \
         --size=68719476736  --ioengine=libaio --iodepth=32 --rw=write \
         --bs=65536
    
    results in an increase from 225 MB/s to 250 MB/s of the write throughput
    of an SMR HDD (11% increase).
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Link: https://lore.kernel.org/r/20221124021208.242541-3-damien.lemoal@opensource.wdc.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0544dd860b3c9e55abd37d418334463d7375436
Author: Damien Le Moal <damien.lemoal@opensource.wdc.com>
Date:   Thu Nov 24 11:12:07 2022 +0900

    block: mq-deadline: Fix dd_finish_request() for zoned devices
    
    commit 2820e5d0820ac4daedff1272616a53d9c7682fd2 upstream.
    
    dd_finish_request() tests if the per prio fifo_list is not empty to
    determine if request dispatching must be restarted for handling blocked
    write requests to zoned devices with a call to
    blk_mq_sched_mark_restart_hctx(). While simple, this implementation has
    2 problems:
    
    1) Only the priority level of the completed request is considered.
       However, writes to a zone may be blocked due to other writes to the
       same zone using a different priority level. While this is unlikely to
       happen in practice, as writing a zone with different IO priorirites
       does not make sense, nothing in the code prevents this from
       happening.
    2) The use of list_empty() is dangerous as dd_finish_request() does not
       take dd->lock and may run concurrently with the insert and dispatch
       code.
    
    Fix these 2 problems by testing the write fifo list of all priority
    levels using the new helper dd_has_write_work(), and by testing each
    fifo list using list_empty_careful().
    
    Fixes: c807ab520fc3 ("block/mq-deadline: Add I/O priority support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Link: https://lore.kernel.org/r/20221124021208.242541-2-damien.lemoal@opensource.wdc.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51c107f91bf1d49fdd1538e46770e6f146f40267
Author: Yang Wang <KevinYang.Wang@amd.com>
Date:   Mon Dec 5 21:16:26 2022 +0800

    drm/amdgpu: fix mmhub register base coding error
    
    commit 347fafe0eb46df941965c355c77ce480e4d49f1f upstream.
    
    fix MMHUB register base coding error.
    
    Fixes: ec6837591f992 ("drm/amdgpu/gmc10: program the smallK fragment size")
    
    Signed-off-by: Yang Wang <KevinYang.Wang@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08c83264e6906615a7792f24de6e5785651d62ac
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Thu Oct 27 17:32:49 2022 +0100

    rtc: ds1347: fix value written to century register
    
    commit 4dfe05bdc1ade79b943d4979a2e2a8b5ef68fbb5 upstream.
    
    In `ds1347_set_time()`, the wrong value is being written to the
    `DS1347_CENTURY_REG` register.  It needs to be converted to BCD.  Fix
    it.
    
    Fixes: 147dae76dbb9 ("rtc: ds1347: handle century register")
    Cc: <stable@vger.kernel.org> # v5.5+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20221027163249.447416-1-abbotti@mev.co.uk
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 135b9ed45347ef22fd05e15a891d23c9b33d72f9
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    commit c72a7e42592b2e18d862cf120876070947000d7a upstream.
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f22532d6bbafc6ef3599b1f71b81e056406d5c51
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Sat Dec 17 21:04:14 2022 -0300

    cifs: set correct status of tcon ipc when reconnecting
    
    commit 25cf01b7c9200d6ace5a59125d8166435dd9dea7 upstream.
    
    The status of tcon ipcs were not being set to TID_NEED_RECO when
    marking sessions and tcons to be reconnected, therefore not sending
    tree connect to those ipcs in cifs_tree_connect() and leaving them
    disconnected.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a37d718a0e0b1d3417c3d0098399266cb6d02ef8
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Fri Dec 16 14:00:19 2022 -0300

    cifs: set correct ipc status after initial tree connect
    
    commit 86fe0fa8747fb1bc4cc44fc1966e0959fe752f38 upstream.
    
    cifs_tcon::status wasn't correctly updated to TID_GOOD after
    establishing initial IPC connection thus staying at TID_NEW as long as
    it wasn't reconnected.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d8cbc14707a79121fa019f8b570e181075f0d56
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Tue Dec 13 09:15:23 2022 -0300

    cifs: set correct tcon status after initial tree connect
    
    commit b248586a49a7729f73c504b1e7b958caea45e927 upstream.
    
    cifs_tcon::status wasn't correctly updated to TID_GOOD after initial
    tree connect thus staying at TID_NEW as long as it was connected.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66d65a6fba330ac8152b4f4d5f897c63676ba675
Author: Steve French <stfrench@microsoft.com>
Date:   Sun Dec 11 13:54:21 2022 -0600

    cifs: fix missing display of three mount options
    
    commit 2bfd81043e944af0e52835ef6d9b41795af22341 upstream.
    
    Three mount options: "tcpnodelay" and "noautotune" and "noblocksend"
    were not displayed when passed in on cifs/smb3 mounts (e.g. displayed
    in /proc/mounts e.g.).  No change to defaults so these are not
    displayed if not specified on mount.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9f7a3bbaa5c0bc1c9dab5bf3ea5f2802034e50b
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Fri Dec 16 22:03:41 2022 -0300

    cifs: fix confusing debug message
    
    commit a85ceafd41927e41a4103d228a993df7edd8823b upstream.
    
    Since rc was initialised to -ENOMEM in cifs_get_smb_ses(), when an
    existing smb session was found, free_xid() would be called and then
    print
    
      CIFS: fs/cifs/connect.c: Existing tcp session with server found
      CIFS: fs/cifs/connect.c: VFS: in cifs_get_smb_ses as Xid: 44 with uid: 0
      CIFS: fs/cifs/connect.c: Existing smb sess found (status=1)
      CIFS: fs/cifs/connect.c: VFS: leaving cifs_get_smb_ses (xid = 44) rc = -12
    
    Fix this by initialising rc to 0 and then let free_xid() print this
    instead
    
      CIFS: fs/cifs/connect.c: Existing tcp session with server found
      CIFS: fs/cifs/connect.c: VFS: in cifs_get_smb_ses as Xid: 14 with uid: 0
      CIFS: fs/cifs/connect.c: Existing smb sess found (status=1)
      CIFS: fs/cifs/connect.c: VFS: leaving cifs_get_smb_ses (xid = 14) rc = 0
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 530ca64b44625f7d39eb1d5efb6f9ff21da991e2
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 31 11:02:45 2022 +0100

    media: dvb-core: Fix UAF due to refcount races at releasing
    
    commit fd3d91ab1c6ab0628fe642dd570b56302c30a792 upstream.
    
    The dvb-core tries to sync the releases of opened files at
    dvb_dmxdev_release() with two refcounts: dvbdev->users and
    dvr_dvbdev->users.  A problem is present in those two syncs: when yet
    another dvb_demux_open() is called during those sync waits,
    dvb_demux_open() continues to process even if the device is being
    closed.  This includes the increment of the former refcount, resulting
    in the leftover refcount after the sync of the latter refcount at
    dvb_dmxdev_release().  It ends up with use-after-free, since the
    function believes that all usages were gone and releases the
    resources.
    
    This patch addresses the problem by adding the check of dmxdev->exit
    flag at dvb_demux_open(), just like dvb_dvr_open() already does.  With
    the exit flag check, the second call of dvb_demux_open() fails, hence
    the further corruption can be avoided.
    
    Also for avoiding the races of the dmxdev->exit flag reference, this
    patch serializes the dmxdev->exit set up and the sync waits with the
    dmxdev->mutex lock at dvb_dmxdev_release().  Without the mutex lock,
    dvb_demux_open() (or dvb_dvr_open()) may run concurrently with
    dvb_dmxdev_release(), which allows to skip the exit flag check and
    continue the open process that is being closed.
    
    CVE-2022-41218 is assigned to those bugs above.
    
    Reported-by: Hyunwoo Kim <imv4bel@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/20220908132754.30532-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 123eddf92a114e03919942641d2c2b1f4ca56ea6
Author: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
Date:   Tue Apr 26 06:29:19 2022 +0100

    media: dvb-core: Fix double free in dvb_register_device()
    
    commit 6b0d0477fce747d4137aa65856318b55fba72198 upstream.
    
    In function dvb_register_device() -> dvb_register_media_device() ->
    dvb_create_media_entity(), dvb->entity is allocated and initialized. If
    the initialization fails, it frees the dvb->entity, and return an error
    code. The caller takes the error code and handles the error by calling
    dvb_media_device_free(), which unregisters the entity and frees the
    field again if it is not NULL. As dvb->entity may not NULLed in
    dvb_create_media_entity() when the allocation of dvbdev->pad fails, a
    double free may occur. This may also cause an Use After free in
    media_device_unregister_entity().
    
    Fix this by storing NULL to dvb->entity when it is freed.
    
    Link: https://lore.kernel.org/linux-media/20220426052921.2088416-1-keitasuzuki.park@sslab.ics.keio.ac.jp
    Fixes: fcd5ce4b3936 ("media: dvb-core: fix a memory leak bug")
    Cc: stable@vger.kernel.org
    Cc: Wenwen Wang <wenwen@cs.uga.edu>
    Signed-off-by: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94d23f8b78400a7f04da6d77abc294dd56daaea0
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Tue Oct 11 20:00:12 2022 +0100

    ARM: 9256/1: NWFPE: avoid compiler-generated __aeabi_uldivmod
    
    commit 3220022038b9a3845eea762af85f1c5694b9f861 upstream.
    
    clang-15's ability to elide loops completely became more aggressive when
    it can deduce how a variable is being updated in a loop. Counting down
    one variable by an increment of another can be replaced by a modulo
    operation.
    
    For 64b variables on 32b ARM EABI targets, this can result in the
    compiler generating calls to __aeabi_uldivmod, which it does for a do
    while loop in float64_rem().
    
    For the kernel, we'd generally prefer that developers not open code 64b
    division via binary / operators and instead use the more explicit
    helpers from div64.h. On arm-linux-gnuabi targets, failure to do so can
    result in linkage failures due to undefined references to
    __aeabi_uldivmod().
    
    While developers can avoid open coding divisions on 64b variables, the
    compiler doesn't know that the Linux kernel has a partial implementation
    of a compiler runtime (--rtlib) to enforce this convention.
    
    It's also undecidable for the compiler whether the code in question
    would be faster to execute the loop vs elide it and do the 64b division.
    
    While I actively avoid using the internal -mllvm command line flags, I
    think we get better code than using barrier() here, which will force
    reloads+spills in the loop for all toolchains.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1666
    
    Reported-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2833221e0b0f7a7b3e82e6a68f0407f1808ffc44
Author: Macpaul Lin <macpaul.lin@mediatek.com>
Date:   Fri Nov 11 17:55:40 2022 +0800

    arm64: dts: mediatek: mt8195-demo: fix the memory size of node secmon
    
    commit e4a4175201014c0222f6bab1895a17b3d1b92f08 upstream.
    
    The size of device tree node secmon (bl31_secmon_reserved) was
    incorrect. It should be increased to 2MiB (0x200000).
    
    The origin setting will cause some abnormal behavior due to
    trusted-firmware-a and related firmware didn't load correctly.
    The incorrect behavior may vary because of different software stacks.
    For example, it will cause build error in some Yocto project because
    it will check if there was enough memory to load trusted-firmware-a
    to the reserved memory.
    
    When mt8195-demo.dts sent to the upstream, at that time the size of
    BL31 was small. Because supported functions and modules in BL31 are
    basic sets when the board was under early development stage.
    
    Now BL31 includes more firmwares of coprocessors and maturer functions
    so the size has grown bigger in real applications. According to the value
    reported by customers, we think reserved 2MiB for BL31 might be enough
    for maybe the following 2 or 3 years.
    
    Cc: stable@vger.kernel.org      # v5.19
    Fixes: 6147314aeedc ("arm64: dts: mediatek: Add device-tree for MT8195 Demo board")
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Reviewed-by: Miles Chen <miles.chen@mediatek.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20221111095540.28881-1-macpaul.lin@mediatek.com
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fd003d3c708c80350a815eaf37b8e1114b976cf
Author: Luca Ceresoli <luca.ceresoli@bootlin.com>
Date:   Wed Nov 2 12:01:02 2022 +0100

    staging: media: tegra-video: fix device_node use after free
    
    commit c4d344163c3a7f90712525f931a6c016bbb35e18 upstream.
    
    At probe time this code path is followed:
    
     * tegra_csi_init
       * tegra_csi_channels_alloc
         * for_each_child_of_node(node, channel) -- iterates over channels
           * automatically gets 'channel'
             * tegra_csi_channel_alloc()
               * saves into chan->of_node a pointer to the channel OF node
           * automatically gets and puts 'channel'
           * now the node saved in chan->of_node has refcount 0, can disappear
       * tegra_csi_channels_init
         * iterates over channels
           * tegra_csi_channel_init -- uses chan->of_node
    
    After that, chan->of_node keeps storing the node until the device is
    removed.
    
    of_node_get() the node and of_node_put() it during teardown to avoid any
    risk.
    
    Fixes: 1ebaeb09830f ("media: tegra-video: Add support for external sensor capture")
    Cc: stable@vger.kernel.org
    Cc: Sowjanya Komatineni <skomatineni@nvidia.com>
    Signed-off-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fae2197adbebaa1ee95bfc316a0ac33c678c37f
Author: Luca Ceresoli <luca.ceresoli@bootlin.com>
Date:   Wed Nov 2 12:01:01 2022 +0100

    staging: media: tegra-video: fix chan->mipi value on error
    
    commit 10b5ce6743c839fa75336042c64e2479caec9430 upstream.
    
    chan->mipi takes the return value of tegra_mipi_request() which can be a
    valid pointer or an error. However chan->mipi is checked in several places,
    including error-cleanup code in tegra_csi_channels_cleanup(), as 'if
    (chan->mipi)', which suggests the initial intent was that chan->mipi should
    be either NULL or a valid pointer, never an error. As a consequence,
    cleanup code in case of tegra_mipi_request() errors would dereference an
    invalid pointer.
    
    Fix by ensuring chan->mipi always contains either NULL or a void pointer.
    
    Also add that to the documentation.
    
    Fixes: 523c857e34ce ("media: tegra-video: Add CSI MIPI pads calibration")
    Cc: stable@vger.kernel.org
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26c57afef2b6ee9e3d7e3654f9fab277bbb0403b
Author: Yang Jihong <yangjihong1@huawei.com>
Date:   Tue Nov 29 19:30:09 2022 +0800

    tracing: Fix infinite loop in tracing_read_pipe on overflowed print_trace_line
    
    commit c1ac03af6ed45d05786c219d102f37eb44880f28 upstream.
    
    print_trace_line may overflow seq_file buffer. If the event is not
    consumed, the while loop keeps peeking this event, causing a infinite loop.
    
    Link: https://lkml.kernel.org/r/20221129113009.182425-1-yangjihong1@huawei.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 088b1e427dbba ("ftrace: pipe fixes")
    Signed-off-by: Yang Jihong <yangjihong1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d31d84d4eb8a7c6fcf7952fa780bf918555b757
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Dec 7 17:15:57 2022 +0800

    tracing: Fix issue of missing one synthetic field
    
    commit ff4837f7fe59ff018eca4705a70eca5e0b486b97 upstream.
    
    The maximum number of synthetic fields supported is defined as
    SYNTH_FIELDS_MAX which value currently is 64, but it actually fails
    when try to generate a synthetic event with 64 fields by executing like:
    
      # echo "my_synth_event int v1; int v2; int v3; int v4; int v5; int v6;\
       int v7; int v8; int v9; int v10; int v11; int v12; int v13; int v14;\
       int v15; int v16; int v17; int v18; int v19; int v20; int v21; int v22;\
       int v23; int v24; int v25; int v26; int v27; int v28; int v29; int v30;\
       int v31; int v32; int v33; int v34; int v35; int v36; int v37; int v38;\
       int v39; int v40; int v41; int v42; int v43; int v44; int v45; int v46;\
       int v47; int v48; int v49; int v50; int v51; int v52; int v53; int v54;\
       int v55; int v56; int v57; int v58; int v59; int v60; int v61; int v62;\
       int v63; int v64" >> /sys/kernel/tracing/synthetic_events
    
    Correct the field counting to fix it.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221207091557.3137904-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: c9e759b1e845 ("tracing: Rework synthetic event command parsing")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d067ad7e2e2f90627f3742bc5cb28792b0c8b66
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Nov 22 12:23:45 2022 -0500

    tracing/probes: Handle system names with hyphens
    
    commit 575b76cb885532aae13a9d979fd476bb2b156cb9 upstream.
    
    When creating probe names, a check is done to make sure it matches basic C
    standard variable naming standards. Basically, starts with alphabetic or
    underline, and then the rest of the characters have alpha-numeric or
    underline in them.
    
    But system names do not have any true naming conventions, as they are
    created by the TRACE_SYSTEM macro and nothing tests to see what they are.
    The "xhci-hcd" trace events has a '-' in the system name. When trying to
    attach a eprobe to one of these trace points, it fails because the system
    name does not follow the variable naming convention because of the
    hyphen, and the eprobe checks fail on this.
    
    Allow hyphens in the system name so that eprobes can attach to the
    "xhci-hcd" trace events.
    
    Link: https://lore.kernel.org/all/Y3eJ8GiGnEvVd8%2FN@macondo/
    Link: https://lore.kernel.org/linux-trace-kernel/20221122122345.160f5077@gandalf.local.home
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 5b7a96220900e ("tracing/probe: Check event/group naming rule at parsing")
    Reported-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eac8938856950cc4cdccb94a7001b3aab32a27e9
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Dec 7 11:46:35 2022 +0800

    tracing/hist: Fix wrong return value in parse_action_params()
    
    commit 2cc6a528882d0e0ccbc1bca5f95b8c963cedac54 upstream.
    
    When number of synth fields is more than SYNTH_FIELDS_MAX,
    parse_action_params() should return -EINVAL.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221207034635.2253990-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: c282a386a397 ("tracing: Add 'onmatch' hist trigger action support")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb8dce806598d1818ee371fa51696164559657ab
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Tue Dec 6 23:18:01 2022 +0900

    tracing: Fix complicated dependency of CONFIG_TRACER_MAX_TRACE
    
    commit e25e43a4e5d8cb2323553d8b6a7ba08d2ebab21f upstream.
    
    Both CONFIG_OSNOISE_TRACER and CONFIG_HWLAT_TRACER partially enables the
    CONFIG_TRACER_MAX_TRACE code, but that is complicated and has
    introduced a bug; It declares tracing_max_lat_fops data structure outside
    of #ifdefs, but since it is defined only when CONFIG_TRACER_MAX_TRACE=y
    or CONFIG_HWLAT_TRACER=y, if only CONFIG_OSNOISE_TRACER=y, that
    declaration comes to a definition(!).
    
    To fix this issue, and do not repeat the similar problem, makes
    CONFIG_OSNOISE_TRACER and CONFIG_HWLAT_TRACER enables the
    CONFIG_TRACER_MAX_TRACE always. It has there benefits;
    - Fix the tracing_max_lat_fops bug
    - Simplify the #ifdefs
    - CONFIG_TRACER_MAX_TRACE code is fully enabled, or not.
    
    Link: https://lore.kernel.org/linux-trace-kernel/167033628155.4111793.12185405690820208159.stgit@devnote3
    
    Fixes: 424b650f35c7 ("tracing: Fix missing osnoise tracer on max_latency")
    Cc: Daniel Bristot de Oliveira <bristot@kernel.org>
    Cc: stable@vger.kernel.org
    Reported-by: David Howells <dhowells@redhat.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Link: https://lore.kernel.org/all/166992525941.1716618.13740663757583361463.stgit@warthog.procyon.org.uk/ (original thread and v1)
    Link: https://lore.kernel.org/all/202212052253.VuhZ2ulJ-lkp@intel.com/T/#u (v1 error report)
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 938791ad58a3d557dfd2f1eed984618f48849f46
Author: Michael Jeanson <mjeanson@efficios.com>
Date:   Thu Dec 1 11:14:42 2022 -0500

    powerpc/ftrace: fix syscall tracing on PPC64_ELF_ABI_V1
    
    commit ad050d2390fccb22aa3e6f65e11757ce7a5a7ca5 upstream.
    
    In v5.7 the powerpc syscall entry/exit logic was rewritten in C, on
    PPC64_ELF_ABI_V1 this resulted in the symbols in the syscall table
    changing from their dot prefixed variant to the non-prefixed ones.
    
    Since ftrace prefixes a dot to the syscall names when matching them to
    build its syscall event list, this resulted in no syscall events being
    available.
    
    Remove the PPC64_ELF_ABI_V1 specific version of
    arch_syscall_match_sym_name to have the same behavior across all powerpc
    variants.
    
    Fixes: 68b34588e202 ("powerpc/64/sycall: Implement syscall entry/exit logic in C")
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: Michael Jeanson <mjeanson@efficios.com>
    Reviewed-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20221201161442.2127231-1-mjeanson@efficios.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43f7cd89b584078459a82955260d03eee60a72fd
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Nov 17 21:42:49 2022 -0500

    tracing: Fix race where eprobes can be called before the event
    
    commit d5f30a7da8ea8e6450250275cec5670cee3c4264 upstream.
    
    The flag that tells the event to call its triggers after reading the event
    is set for eprobes after the eprobe is enabled. This leads to a race where
    the eprobe may be triggered at the beginning of the event where the record
    information is NULL. The eprobe then dereferences the NULL record causing
    a NULL kernel pointer bug.
    
    Test for a NULL record to keep this from happening.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221116192552.1066630-1-rafaelmendsr@gmail.com/
    Link: https://lore.kernel.org/all/20221117214249.2addbe10@gandalf.local.home/
    
    Cc: stable@vger.kernel.org
    Fixes: 7491e2c442781 ("tracing: Add a probe that attaches to trace events")
    Reported-by: Rafael Mendonca <rafaelmendsr@gmail.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9449d762f0eebb4021137cb185e914b62d6c5d1
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Mon Dec 19 23:35:19 2022 +0900

    x86/kprobes: Fix optprobe optimization check with CONFIG_RETHUNK
    
    commit 63dc6325ff41ee9e570bde705ac34a39c5dbeb44 upstream.
    
    Since the CONFIG_RETHUNK and CONFIG_SLS will use INT3 for stopping
    speculative execution after function return, kprobe jump optimization
    always fails on the functions with such INT3 inside the function body.
    (It already checks the INT3 padding between functions, but not inside
     the function)
    
    To avoid this issue, as same as kprobes, check whether the INT3 comes
    from kgdb or not, and if so, stop decoding and make it fail. The other
    INT3 will come from CONFIG_RETHUNK/CONFIG_SLS and those can be
    treated as a one-byte instruction.
    
    Fixes: e463a09af2f0 ("x86: Add straight-line-speculation mitigation")
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/167146051929.1374301.7419382929328081706.stgit@devnote3
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85932e3882e2f8c349cf4a9e5b6d027d5a1ab18d
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Mon Dec 19 23:35:10 2022 +0900

    x86/kprobes: Fix kprobes instruction boudary check with CONFIG_RETHUNK
    
    commit 1993bf97992df2d560287f3c4120eda57426843d upstream.
    
    Since the CONFIG_RETHUNK and CONFIG_SLS will use INT3 for stopping
    speculative execution after RET instruction, kprobes always failes to
    check the probed instruction boundary by decoding the function body if
    the probed address is after such sequence. (Note that some conditional
    code blocks will be placed after function return, if compiler decides
    it is not on the hot path.)
    
    This is because kprobes expects kgdb puts the INT3 as a software
    breakpoint and it will replace the original instruction.
    But these INT3 are not such purpose, it doesn't need to recover the
    original instruction.
    
    To avoid this issue, kprobes checks whether the INT3 is owned by
    kgdb or not, and if so, stop decoding and make it fail. The other
    INT3 will come from CONFIG_RETHUNK/CONFIG_SLS and those can be
    treated as a one-byte instruction.
    
    Fixes: e463a09af2f0 ("x86: Add straight-line-speculation mitigation")
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/167146051026.1374301.392728975473572291.stgit@devnote3
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dabe6c5f3e9444840033264671dce2e6d82ce88
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Fri Dec 9 10:52:47 2022 -0500

    ftrace/x86: Add back ftrace_expected for ftrace bug reports
    
    commit fd3dc56253acbe9c641a66d312d8393cd55eb04c upstream.
    
    After someone reported a bug report with a failed modification due to the
    expected value not matching what was found, it came to my attention that
    the ftrace_expected is no longer set when that happens. This makes for
    debugging the issue a bit more difficult.
    
    Set ftrace_expected to the expected code before calling ftrace_bug, so
    that it shows what was expected and why it failed.
    
    Link: https://lore.kernel.org/all/CA+wXwBQ-VhK+hpBtYtyZP-NiX4g8fqRRWithFOHQW-0coQ3vLg@mail.gmail.com/
    Link: https://lore.kernel.org/linux-trace-kernel/20221209105247.01d4e51d@gandalf.local.home
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "x86@kernel.org" <x86@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 768ae4406a5c ("x86/ftrace: Use text_poke()")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db10ca17bbe2294452995b863100078a55bc6229
Author: Ashok Raj <ashok.raj@intel.com>
Date:   Tue Nov 29 13:08:27 2022 -0800

    x86/microcode/intel: Do not retry microcode reloading on the APs
    
    commit be1b670f61443aa5d0d01782e9b8ea0ee825d018 upstream.
    
    The retries in load_ucode_intel_ap() were in place to support systems
    with mixed steppings. Mixed steppings are no longer supported and there is
    only one microcode image at a time. Any retries will simply reattempt to
    apply the same image over and over without making progress.
    
      [ bp: Zap the circumstantial reasoning from the commit message. ]
    
    Fixes: 06b8534cb728 ("x86/microcode: Rework microcode loading")
    Signed-off-by: Ashok Raj <ashok.raj@intel.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221129210832.107850-3-ashok.raj@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 891a644b0cbdef21ffa3caecfc8e4f4a543dcdfa
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 13 06:23:03 2022 +0000

    KVM: nVMX: Properly expose ENABLE_USR_WAIT_PAUSE control to L1
    
    commit 31de69f4eea77b28a9724b3fa55aae104fc91fc7 upstream.
    
    Set ENABLE_USR_WAIT_PAUSE in KVM's supported VMX MSR configuration if the
    feature is supported in hardware and enabled in KVM's base, non-nested
    configuration, i.e. expose ENABLE_USR_WAIT_PAUSE to L1 if it's supported.
    This fixes a bug where saving/restoring, i.e. migrating, a vCPU will fail
    if WAITPKG (the associated CPUID feature) is enabled for the vCPU, and
    obviously allows L1 to enable the feature for L2.
    
    KVM already effectively exposes ENABLE_USR_WAIT_PAUSE to L1 by stuffing
    the allowed-1 control ina vCPU's virtual MSR_IA32_VMX_PROCBASED_CTLS2 when
    updating secondary controls in response to KVM_SET_CPUID(2), but (a) that
    depends on flawed code (KVM shouldn't touch VMX MSRs in response to CPUID
    updates) and (b) runs afoul of vmx_restore_control_msr()'s restriction
    that the guest value must be a strict subset of the supported host value.
    
    Although no past commit explicitly enabled nested support for WAITPKG,
    doing so is safe and functionally correct from an architectural
    perspective as no additional KVM support is needed to virtualize TPAUSE,
    UMONITOR, and UMWAIT for L2 relative to L1, and KVM already forwards
    VM-Exits to L1 as necessary (commit bf653b78f960, "KVM: vmx: Introduce
    handle_unexpected_vmexit and handle WAITPKG vmexit").
    
    Note, KVM always keeps the hosts MSR_IA32_UMWAIT_CONTROL resident in
    hardware, i.e. always runs both L1 and L2 with the host's power management
    settings for TPAUSE and UMWAIT.  See commit bf09fb6cba4f ("KVM: VMX: Stop
    context switching MSR_IA32_UMWAIT_CONTROL") for more details.
    
    Fixes: e69e72faa3a0 ("KVM: x86: Add support for user wait instructions")
    Cc: stable@vger.kernel.org
    Reported-by: Aaron Lewis <aaronlewis@google.com>
    Reported-by: Yu Zhang <yu.c.zhang@linux.intel.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20221213062306.667649-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59cc9627be2577d1701a2d1248c38c6ca9e46323
Author: Yuan ZhaoXiong <yuanzhaoxiong@baidu.com>
Date:   Fri Dec 2 20:36:14 2022 +0800

    KVM: x86: fix APICv/x2AVIC disabled when vm reboot by itself
    
    commit ef40757743b47cc95de9b4ed41525c94f8dc73d9 upstream.
    
    When a VM reboots itself, the reset process will result in
    an ioctl(KVM_SET_LAPIC, ...) to disable x2APIC mode and set
    the xAPIC id of the vCPU to its default value, which is the
    vCPU id.
    
    That will be handled in KVM as follows:
    
         kvm_vcpu_ioctl_set_lapic
           kvm_apic_set_state
              kvm_lapic_set_base  =>  disable X2APIC mode
                kvm_apic_state_fixup
                  kvm_lapic_xapic_id_updated
                    kvm_xapic_id(apic) != apic->vcpu->vcpu_id
                    kvm_set_apicv_inhibit(APICV_INHIBIT_REASON_APIC_ID_MODIFIED)
               memcpy(vcpu->arch.apic->regs, s->regs, sizeof(*s))  => update APIC_ID
    
    When kvm_apic_set_state invokes kvm_lapic_set_base to disable
    x2APIC mode, the old 32-bit x2APIC id is still present rather
    than the 8-bit xAPIC id.  kvm_lapic_xapic_id_updated will set the
    APICV_INHIBIT_REASON_APIC_ID_MODIFIED bit and disable APICv/x2AVIC.
    
    Instead, kvm_lapic_xapic_id_updated must be called after APIC_ID is
    changed.
    
    In fact, this fixes another small issue in the code in that
    potential changes to a vCPU's xAPIC ID need not be tracked for
    KVM_GET_LAPIC.
    
    Fixes: 3743c2f02517 ("KVM: x86: inhibit APICv/AVIC on changes to APIC ID or APIC base")
    Signed-off-by: Yuan ZhaoXiong <yuanzhaoxiong@baidu.com>
    Message-Id: <1669984574-32692-1-git-send-email-yuanzhaoxiong@baidu.com>
    Cc: stable@vger.kernel.org
    Reported-by: Alejandro Jimenez <alejandro.j.jimenez@oracle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04066fcbf18eaa8747b8e7560d318b669e676503
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Oct 6 00:19:56 2022 +0000

    KVM: nVMX: Inject #GP, not #UD, if "generic" VMXON CR0/CR4 check fails
    
    commit 9cc409325ddd776f6fd6293d5ce93ce1248af6e4 upstream.
    
    Inject #GP for if VMXON is attempting with a CR0/CR4 that fails the
    generic "is CRx valid" check, but passes the CR4.VMXE check, and do the
    generic checks _after_ handling the post-VMXON VM-Fail.
    
    The CR4.VMXE check, and all other #UD cases, are special pre-conditions
    that are enforced prior to pivoting on the current VMX mode, i.e. occur
    before interception if VMXON is attempted in VMX non-root mode.
    
    All other CR0/CR4 checks generate #GP and effectively have lower priority
    than the post-VMXON check.
    
    Per the SDM:
    
        IF (register operand) or (CR0.PE = 0) or (CR4.VMXE = 0) or ...
            THEN #UD;
        ELSIF not in VMX operation
            THEN
                IF (CPL > 0) or (in A20M mode) or
                (the values of CR0 and CR4 are not supported in VMX operation)
                    THEN #GP(0);
        ELSIF in VMX non-root operation
            THEN VMexit;
        ELSIF CPL > 0
            THEN #GP(0);
        ELSE VMfail("VMXON executed in VMX root operation");
        FI;
    
    which, if re-written without ELSIF, yields:
    
        IF (register operand) or (CR0.PE = 0) or (CR4.VMXE = 0) or ...
            THEN #UD
    
        IF in VMX non-root operation
            THEN VMexit;
    
        IF CPL > 0
            THEN #GP(0)
    
        IF in VMX operation
            THEN VMfail("VMXON executed in VMX root operation");
    
        IF (in A20M mode) or
           (the values of CR0 and CR4 are not supported in VMX operation)
                    THEN #GP(0);
    
    Note, KVM unconditionally forwards VMXON VM-Exits that occur in L2 to L1,
    i.e. there is no need to check the vCPU is not in VMX non-root mode.  Add
    a comment to explain why unconditionally forwarding such exits is
    functionally correct.
    
    Reported-by: Eric Li <ercli@ucdavis.edu>
    Fixes: c7d855c2aff2 ("KVM: nVMX: Inject #UD if VMXON is attempted with incompatible CR0/CR4")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Link: https://lore.kernel.org/r/20221006001956.329314-1-seanjc@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c877c99ee5c0ce20d6eca98fc8c6925bed5359b7
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Sep 30 23:31:32 2022 +0000

    KVM: VMX: Resume guest immediately when injecting #GP on ECREATE
    
    commit eb3992e833d3a17f9b0a3e0371d0b1d3d566f740 upstream.
    
    Resume the guest immediately when injecting a #GP on ECREATE due to an
    invalid enclave size, i.e. don't attempt ECREATE in the host.  The #GP is
    a terminal fault, e.g. skipping the instruction if ECREATE is successful
    would result in KVM injecting #GP on the instruction following ECREATE.
    
    Fixes: 70210c044b4e ("KVM: VMX: Add SGX ENCLS[ECREATE] handler to enforce CPUID restrictions")
    Cc: stable@vger.kernel.org
    Cc: Kai Huang <kai.huang@intel.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Kai Huang <kai.huang@intel.com>
    Link: https://lore.kernel.org/r/20220930233132.1723330-1-seanjc@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d627fbb50267e89ad4070acdfef1c7845c33280
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Fri Nov 25 20:18:40 2022 +0800

    ima: Fix hash dependency to correct algorithm
    
    commit b6018af440a07bd0d74b58c4e18045f4a8dbfe6b upstream.
    
    Commit d2825fa9365d ("crypto: sm3,sm4 - move into crypto directory") moves
    the SM3 and SM4 stand-alone library and the algorithm implementation for
    the Crypto API into the same directory, and the corresponding relationship
    of Kconfig is modified, CONFIG_CRYPTO_SM3/4 corresponds to the stand-alone
    library of SM3/4, and CONFIG_CRYPTO_SM3/4_GENERIC corresponds to the
    algorithm implementation for the Crypto API. Therefore, it is necessary
    for this module to depend on the correct algorithm.
    
    Fixes: d2825fa9365d ("crypto: sm3,sm4 - move into crypto directory")
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: stable@vger.kernel.org # v5.19+
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a6cd16af71ef533f11d72e06d4c934af7fee891
Author: Rob Herring <robh@kernel.org>
Date:   Mon Nov 28 14:24:39 2022 -0600

    of/kexec: Fix reading 32-bit "linux,initrd-{start,end}" values
    
    commit e553ad8d7957697385e81034bf76db3b2cb2cf27 upstream.
    
    "linux,initrd-start" and "linux,initrd-end" can be 32-bit values even on
    a 64-bit platform. Ideally, the size should be based on
    '#address-cells', but that has never been enforced in the kernel's FDT
    boot parsing code (early_init_dt_check_for_initrd()). Bootloader
    behavior is known to vary. For example, kexec always writes these as
    64-bit. The result of incorrectly reading 32-bit values is most likely
    the reserved memory for the original initrd will still be reserved
    for the new kernel. The original arm64 equivalent of this code failed to
    release the initrd reserved memory in *all* cases.
    
    Use of_read_number() to mirror the early_init_dt_check_for_initrd()
    code.
    
    Fixes: b30be4dc733e ("of: Add a common kexec FDT setup function")
    Cc: stable@vger.kernel.org
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Link: https://lore.kernel.org/r/20221128202440.1411895-1-robh@kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa3e7a48e921aeb6a0e01c3a474db50de6c9bcac
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Dec 5 13:19:21 2022 -0800

    xtensa: add __umulsidi3 helper
    
    commit 8939c58d68f97ce530f02d46c9f2b56c3ec88399 upstream.
    
    xtensa gcc-13 has changed multiplication handling and may now use
    __umulsidi3 helper where it used to use __muldi3. As a result building
    the kernel with the new gcc may fail with the following error:
    
        linux/init/main.c:1287: undefined reference to `__umulsidi3'
    
    Fix the build by providing __umulsidi3 implementation for xtensa.
    
    Cc: stable@vger.kernel.org # 5.18+
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dd6b35e2bcd2c64b2a830aa8bda0a0ff6c58705
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Tue Dec 20 14:31:40 2022 -0800

    perf/core: Call LSM hook after copying perf_event_attr
    
    commit 0a041ebca4956292cadfb14a63ace3a9c1dcb0a3 upstream.
    
    It passes the attr struct to the security_perf_event_open() but it's
    not initialized yet.
    
    Fixes: da97e18458fb ("perf_event: Add support for LSM and SELinux checks")
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221220223140.4020470-1-namhyung@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04241956ce8825ff06e06e4083e7b692e9d5f712
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Dec 7 11:51:43 2022 +0800

    tracing/hist: Fix out-of-bound write on 'action_data.var_ref_idx'
    
    commit 82470f7d9044842618c847a7166de2b7458157a7 upstream.
    
    When generate a synthetic event with many params and then create a trace
    action for it [1], kernel panic happened [2].
    
    It is because that in trace_action_create() 'data->n_params' is up to
    SYNTH_FIELDS_MAX (current value is 64), and array 'data->var_ref_idx'
    keeps indices into array 'hist_data->var_refs' for each synthetic event
    param, but the length of 'data->var_ref_idx' is TRACING_MAP_VARS_MAX
    (current value is 16), so out-of-bound write happened when 'data->n_params'
    more than 16. In this case, 'data->match_data.event' is overwritten and
    eventually cause the panic.
    
    To solve the issue, adjust the length of 'data->var_ref_idx' to be
    SYNTH_FIELDS_MAX and add sanity checks to avoid out-of-bound write.
    
    [1]
     # cd /sys/kernel/tracing/
     # echo "my_synth_event int v1; int v2; int v3; int v4; int v5; int v6;\
    int v7; int v8; int v9; int v10; int v11; int v12; int v13; int v14;\
    int v15; int v16; int v17; int v18; int v19; int v20; int v21; int v22;\
    int v23; int v24; int v25; int v26; int v27; int v28; int v29; int v30;\
    int v31; int v32; int v33; int v34; int v35; int v36; int v37; int v38;\
    int v39; int v40; int v41; int v42; int v43; int v44; int v45; int v46;\
    int v47; int v48; int v49; int v50; int v51; int v52; int v53; int v54;\
    int v55; int v56; int v57; int v58; int v59; int v60; int v61; int v62;\
    int v63" >> synthetic_events
     # echo 'hist:keys=pid:ts0=common_timestamp.usecs if comm=="bash"' >> \
    events/sched/sched_waking/trigger
     # echo "hist:keys=next_pid:onmatch(sched.sched_waking).my_synth_event(\
    pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,\
    pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,\
    pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,pid,\
    pid,pid,pid,pid,pid,pid,pid,pid,pid)" >> events/sched/sched_switch/trigger
    
    [2]
    BUG: unable to handle page fault for address: ffff91c900000000
    PGD 61001067 P4D 61001067 PUD 0
    Oops: 0000 [#1] PREEMPT SMP NOPTI
    CPU: 2 PID: 322 Comm: bash Tainted: G        W          6.1.0-rc8+ #229
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    RIP: 0010:strcmp+0xc/0x30
    Code: 75 f7 31 d2 44 0f b6 04 16 44 88 04 11 48 83 c2 01 45 84 c0 75 ee
    c3 cc cc cc cc 0f 1f 00 31 c0 eb 08 48 83 c0 01 84 d2 74 13 <0f> b6 14
    07 3a 14 06 74 ef 19 c0 83 c8 01 c3 cc cc cc cc 31 c3
    RSP: 0018:ffff9b3b00f53c48 EFLAGS: 00000246
    RAX: 0000000000000000 RBX: ffffffffba958a68 RCX: 0000000000000000
    RDX: 0000000000000010 RSI: ffff91c943d33a90 RDI: ffff91c900000000
    RBP: ffff91c900000000 R08: 00000018d604b529 R09: 0000000000000000
    R10: ffff91c9483eddb1 R11: ffff91ca483eddab R12: ffff91c946171580
    R13: ffff91c9479f0538 R14: ffff91c9457c2848 R15: ffff91c9479f0538
    FS:  00007f1d1cfbe740(0000) GS:ffff91c9bdc80000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff91c900000000 CR3: 0000000006316000 CR4: 00000000000006e0
    Call Trace:
     <TASK>
     __find_event_file+0x55/0x90
     action_create+0x76c/0x1060
     event_hist_trigger_parse+0x146d/0x2060
     ? event_trigger_write+0x31/0xd0
     trigger_process_regex+0xbb/0x110
     event_trigger_write+0x6b/0xd0
     vfs_write+0xc8/0x3e0
     ? alloc_fd+0xc0/0x160
     ? preempt_count_add+0x4d/0xa0
     ? preempt_count_add+0x70/0xa0
     ksys_write+0x5f/0xe0
     do_syscall_64+0x3b/0x90
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    RIP: 0033:0x7f1d1d0cf077
    Code: 64 89 02 48 c7 c0 ff ff ff ff eb bb 0f 1f 80 00 00 00 00 f3 0f 1e
    fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 01 00 00 00 0f 05 <48> 3d 00
    f0 ff ff 77 51 c3 48 83 ec 28 48 89 54 24 18 48 89 74
    RSP: 002b:00007ffcebb0e568 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000143 RCX: 00007f1d1d0cf077
    RDX: 0000000000000143 RSI: 00005639265aa7e0 RDI: 0000000000000001
    RBP: 00005639265aa7e0 R08: 000000000000000a R09: 0000000000000142
    R10: 000056392639c017 R11: 0000000000000246 R12: 0000000000000143
    R13: 00007f1d1d1ae6a0 R14: 00007f1d1d1aa4a0 R15: 00007f1d1d1a98a0
     </TASK>
    Modules linked in:
    CR2: ffff91c900000000
    ---[ end trace 0000000000000000 ]---
    RIP: 0010:strcmp+0xc/0x30
    Code: 75 f7 31 d2 44 0f b6 04 16 44 88 04 11 48 83 c2 01 45 84 c0 75 ee
    c3 cc cc cc cc 0f 1f 00 31 c0 eb 08 48 83 c0 01 84 d2 74 13 <0f> b6 14
    07 3a 14 06 74 ef 19 c0 83 c8 01 c3 cc cc cc cc 31 c3
    RSP: 0018:ffff9b3b00f53c48 EFLAGS: 00000246
    RAX: 0000000000000000 RBX: ffffffffba958a68 RCX: 0000000000000000
    RDX: 0000000000000010 RSI: ffff91c943d33a90 RDI: ffff91c900000000
    RBP: ffff91c900000000 R08: 00000018d604b529 R09: 0000000000000000
    R10: ffff91c9483eddb1 R11: ffff91ca483eddab R12: ffff91c946171580
    R13: ffff91c9479f0538 R14: ffff91c9457c2848 R15: ffff91c9479f0538
    FS:  00007f1d1cfbe740(0000) GS:ffff91c9bdc80000(0000)
    knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff91c900000000 CR3: 0000000006316000 CR4: 00000000000006e0
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221207035143.2278781-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: d380dcde9a07 ("tracing: Fix now invalid var_ref_vals assumption in trace action")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d408dabdba95aa9bccaf21766df406899a982f0
Author: Li Ming <ming4.li@intel.com>
Date:   Wed Nov 16 09:56:37 2022 +0800

    PCI/DOE: Fix maximum data object length miscalculation
    
    commit a4ff8e7a71601321f7bf7b58ede664dc0d774274 upstream.
    
    Per PCIe r6.0, sec 6.30.1, a data object Length of 0x0 indicates 2^18
    DWORDs (256K DW or 1MB) being transferred.  Adjust the value of data object
    length for this case on both sending side and receiving side.
    
    Don't bother checking whether Length is greater than SZ_1M because all
    values of the 18-bit Length field are valid, and it is impossible to
    represent anything larger than SZ_1M:
    
      0x00000    256K DW (1M bytes)
      0x00001       1 DW (4 bytes)
      ...
      0x3ffff  256K-1 DW (1M - 4 bytes)
    
    [bhelgaas: commit log]
    Link: https://lore.kernel.org/r/20221116015637.3299664-1-ming4.li@intel.com
    Fixes: 9d24322e887b ("PCI/DOE: Add DOE mailbox support functions")
    Signed-off-by: Li Ming <ming4.li@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org      # v6.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97e28deab8bfe70d5687650f94484f8f9101e566
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sat Dec 3 11:54:25 2022 +0100

    ata: ahci: fix enum constants for gcc-13
    
    commit f07788079f515ca4a681c5f595bdad19cfbd7b1d upstream.
    
    gcc-13 slightly changes the type of constant expressions that are defined
    in an enum, which triggers a compile time sanity check in libata:
    
    linux/drivers/ata/libahci.c: In function 'ahci_led_store':
    linux/include/linux/compiler_types.h:357:45: error: call to '__compiletime_assert_302' declared with attribute error: BUILD_BUG_ON failed: sizeof(_s) > sizeof(long)
    357 | _compiletime_assert(condition, msg, __compiletime_assert_, __COUNTER__)
    
    The new behavior is that sizeof() returns the same value for the
    constant as it does for the enum type, which is generally more sensible
    and consistent.
    
    The problem in libata is that it contains a single enum definition for
    lots of unrelated constants, some of which are large positive (unsigned)
    integers like 0xffffffff, while others like (1<<31) are interpreted as
    negative integers, and this forces the enum type to become 64 bit wide
    even though most constants would still fit into a signed 32-bit 'int'.
    
    Fix this by changing the entire enum definition to use BIT(x) in place
    of (1<<x), which results in all values being seen as 'unsigned' and
    fitting into an unsigned 32-bit type.
    
    Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107917
    Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107405
    Reported-by: Luis Machado <luis.machado@arm.com>
    Cc: linux-ide@vger.kernel.org
    Cc: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Cc: stable@vger.kernel.org
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Luis Machado <luis.machado@arm.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7e060c3ea3442bd6a4e7d4b0dfeef3733ef2b9c
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Nov 30 14:02:47 2022 -0500

    dm cache: set needs_check flag after aborting metadata
    
    commit 6b9973861cb2e96dcd0bb0f1baddc5c034207c5c upstream.
    
    Otherwise the commit that will be aborted will be associated with the
    metadata objects that will be torn down.  Must write needs_check flag
    to metadata with a reset block manager.
    
    Found through code-inspection (and compared against dm-thin.c).
    
    Cc: stable@vger.kernel.org
    Fixes: 028ae9f76f29 ("dm cache: add fail io mode and needs_check flag")
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a3e412c2ab131c54945327a7676b006f000a209
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:49 2022 +0800

    dm cache: Fix UAF in destroy()
    
    commit 6a459d8edbdbe7b24db42a5a9f21e6aa9e00c2aa upstream.
    
    Dm_cache also has the same UAF problem when dm_resume()
    and dm_destroy() are concurrent.
    
    Therefore, cancelling timer again in destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: c6b4fcbad044e ("dm: add cache target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e113cd4f61f3b0000843b2d0a90ce8b40a1fcff
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:48 2022 +0800

    dm clone: Fix UAF in clone_dtr()
    
    commit e4b5957c6f749a501c464f92792f1c8e26b61a94 upstream.
    
    Dm_clone also has the same UAF problem when dm_resume()
    and dm_destroy() are concurrent.
    
    Therefore, cancelling timer again in clone_dtr().
    
    Cc: stable@vger.kernel.org
    Fixes: 7431b7835f554 ("dm: add clone target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6c93cd61afab061d80cc842333abca97b289774
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:50 2022 +0800

    dm integrity: Fix UAF in dm_integrity_dtr()
    
    commit f50cb2cbabd6c4a60add93d72451728f86e4791c upstream.
    
    Dm_integrity also has the same UAF problem when dm_resume()
    and dm_destroy() are concurrent.
    
    Therefore, cancelling timer again in dm_integrity_dtr().
    
    Cc: stable@vger.kernel.org
    Fixes: 7eada909bfd7a ("dm: add integrity target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9971fa4d8bde63d49c743c1b32d12fbbd3a30bd
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82976ba6deb1636a0d63f69da96f804c3cf54d46
Author: Luo Meng <luomeng12@huawei.com>
Date:   Wed Nov 30 10:09:45 2022 +0800

    dm thin: resume even if in FAIL mode
    
    commit 19eb1650afeb1aa86151f61900e9e5f1de5d8d02 upstream.
    
    If a thinpool set fail_io while suspending, resume will fail with:
     device-mapper: resume ioctl on vg-thinpool  failed: Invalid argument
    
    The thin-pool also can't be removed if an in-flight bio is in the
    deferred list.
    
    This can be easily reproduced using:
    
      echo "offline" > /sys/block/sda/device/state
      dd if=/dev/zero of=/dev/mapper/thin bs=4K count=1
      dmsetup suspend /dev/mapper/pool
      mkfs.ext4 /dev/mapper/thin
      dmsetup resume /dev/mapper/pool
    
    The root cause is maybe_resize_data_dev() will check fail_io and return
    error before called dm_resume.
    
    Fix this by adding FAIL mode check at the end of pool_preresume().
    
    Cc: stable@vger.kernel.org
    Fixes: da105ed5fd7e ("dm thin metadata: introduce dm_pool_abort_metadata")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b91f481300e3a10eaf66b94fc39b740928762aaf
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Thu Dec 8 22:28:02 2022 +0800

    dm thin: Use last transaction's pmd->root when commit failed
    
    commit 7991dbff6849f67e823b7cc0c15e5a90b0549b9f upstream.
    
    Recently we found a softlock up problem in dm thin pool btree lookup
    code due to corrupted metadata:
    
     Kernel panic - not syncing: softlockup: hung tasks
     CPU: 7 PID: 2669225 Comm: kworker/u16:3
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
     Workqueue: dm-thin do_worker [dm_thin_pool]
     Call Trace:
       <IRQ>
       dump_stack+0x9c/0xd3
       panic+0x35d/0x6b9
       watchdog_timer_fn.cold+0x16/0x25
       __run_hrtimer+0xa2/0x2d0
       </IRQ>
       RIP: 0010:__relink_lru+0x102/0x220 [dm_bufio]
       __bufio_new+0x11f/0x4f0 [dm_bufio]
       new_read+0xa3/0x1e0 [dm_bufio]
       dm_bm_read_lock+0x33/0xd0 [dm_persistent_data]
       ro_step+0x63/0x100 [dm_persistent_data]
       btree_lookup_raw.constprop.0+0x44/0x220 [dm_persistent_data]
       dm_btree_lookup+0x16f/0x210 [dm_persistent_data]
       dm_thin_find_block+0x12c/0x210 [dm_thin_pool]
       __process_bio_read_only+0xc5/0x400 [dm_thin_pool]
       process_thin_deferred_bios+0x1a4/0x4a0 [dm_thin_pool]
       process_one_work+0x3c5/0x730
    
    Following process may generate a broken btree mixed with fresh and
    stale btree nodes, which could get dm thin trapped in an infinite loop
    while looking up data block:
     Transaction 1: pmd->root = A, A->B->C   // One path in btree
                    pmd->root = X, X->Y->Z   // Copy-up
     Transaction 2: X,Z is updated on disk, Y write failed.
                    // Commit failed, dm thin becomes read-only.
                    process_bio_read_only
                     dm_thin_find_block
                      __find_block
                       dm_btree_lookup(pmd->root)
    The pmd->root points to a broken btree, Y may contain stale node
    pointing to any block, for example X, which gets dm thin trapped into
    a dead loop while looking up Z.
    
    Fix this by setting pmd->root in __open_metadata(), so that dm thin
    will use the last transaction's pmd->root if commit failed.
    
    Fetch a reproducer in [Link].
    
    Linke: https://bugzilla.kernel.org/show_bug.cgi?id=216790
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0 ("dm: add thin provisioning target")
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Acked-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdf7a39bcc427febbfe3c3b9fe829825ead96c27
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Wed Nov 30 21:31:34 2022 +0800

    dm thin: Fix ABBA deadlock between shrink_slab and dm_pool_abort_metadata
    
    commit 8111964f1b8524c4bb56b02cd9c7a37725ea21fd upstream.
    
    Following concurrent processes:
    
              P1(drop cache)                P2(kworker)
    drop_caches_sysctl_handler
     drop_slab
      shrink_slab
       down_read(&shrinker_rwsem)  - LOCK A
       do_shrink_slab
        super_cache_scan
         prune_icache_sb
          dispose_list
           evict
            ext4_evict_inode
             ext4_clear_inode
              ext4_discard_preallocations
               ext4_mb_load_buddy_gfp
                ext4_mb_init_cache
                 ext4_read_block_bitmap_nowait
                  ext4_read_bh_nowait
                   submit_bh
                    dm_submit_bio
                                     do_worker
                                      process_deferred_bios
                                       commit
                                        metadata_operation_failed
                                         dm_pool_abort_metadata
                                          down_write(&pmd->root_lock) - LOCK B
                                          __destroy_persistent_data_objects
                                           dm_block_manager_destroy
                                            dm_bufio_client_destroy
                                             unregister_shrinker
                                              down_write(&shrinker_rwsem)
                     thin_map                            |
                      dm_thin_find_block                 ↓
                       down_read(&pmd->root_lock) --> ABBA deadlock
    
    , which triggers hung task:
    
    [   76.974820] INFO: task kworker/u4:3:63 blocked for more than 15 seconds.
    [   76.976019]       Not tainted 6.1.0-rc4-00011-g8f17dd350364-dirty #910
    [   76.978521] task:kworker/u4:3    state:D stack:0     pid:63    ppid:2
    [   76.978534] Workqueue: dm-thin do_worker
    [   76.978552] Call Trace:
    [   76.978564]  __schedule+0x6ba/0x10f0
    [   76.978582]  schedule+0x9d/0x1e0
    [   76.978588]  rwsem_down_write_slowpath+0x587/0xdf0
    [   76.978600]  down_write+0xec/0x110
    [   76.978607]  unregister_shrinker+0x2c/0xf0
    [   76.978616]  dm_bufio_client_destroy+0x116/0x3d0
    [   76.978625]  dm_block_manager_destroy+0x19/0x40
    [   76.978629]  __destroy_persistent_data_objects+0x5e/0x70
    [   76.978636]  dm_pool_abort_metadata+0x8e/0x100
    [   76.978643]  metadata_operation_failed+0x86/0x110
    [   76.978649]  commit+0x6a/0x230
    [   76.978655]  do_worker+0xc6e/0xd90
    [   76.978702]  process_one_work+0x269/0x630
    [   76.978714]  worker_thread+0x266/0x630
    [   76.978730]  kthread+0x151/0x1b0
    [   76.978772] INFO: task test.sh:2646 blocked for more than 15 seconds.
    [   76.979756]       Not tainted 6.1.0-rc4-00011-g8f17dd350364-dirty #910
    [   76.982111] task:test.sh         state:D stack:0     pid:2646  ppid:2459
    [   76.982128] Call Trace:
    [   76.982139]  __schedule+0x6ba/0x10f0
    [   76.982155]  schedule+0x9d/0x1e0
    [   76.982159]  rwsem_down_read_slowpath+0x4f4/0x910
    [   76.982173]  down_read+0x84/0x170
    [   76.982177]  dm_thin_find_block+0x4c/0xd0
    [   76.982183]  thin_map+0x201/0x3d0
    [   76.982188]  __map_bio+0x5b/0x350
    [   76.982195]  dm_submit_bio+0x2b6/0x930
    [   76.982202]  __submit_bio+0x123/0x2d0
    [   76.982209]  submit_bio_noacct_nocheck+0x101/0x3e0
    [   76.982222]  submit_bio_noacct+0x389/0x770
    [   76.982227]  submit_bio+0x50/0xc0
    [   76.982232]  submit_bh_wbc+0x15e/0x230
    [   76.982238]  submit_bh+0x14/0x20
    [   76.982241]  ext4_read_bh_nowait+0xc5/0x130
    [   76.982247]  ext4_read_block_bitmap_nowait+0x340/0xc60
    [   76.982254]  ext4_mb_init_cache+0x1ce/0xdc0
    [   76.982259]  ext4_mb_load_buddy_gfp+0x987/0xfa0
    [   76.982263]  ext4_discard_preallocations+0x45d/0x830
    [   76.982274]  ext4_clear_inode+0x48/0xf0
    [   76.982280]  ext4_evict_inode+0xcf/0xc70
    [   76.982285]  evict+0x119/0x2b0
    [   76.982290]  dispose_list+0x43/0xa0
    [   76.982294]  prune_icache_sb+0x64/0x90
    [   76.982298]  super_cache_scan+0x155/0x210
    [   76.982303]  do_shrink_slab+0x19e/0x4e0
    [   76.982310]  shrink_slab+0x2bd/0x450
    [   76.982317]  drop_slab+0xcc/0x1a0
    [   76.982323]  drop_caches_sysctl_handler+0xb7/0xe0
    [   76.982327]  proc_sys_call_handler+0x1bc/0x300
    [   76.982331]  proc_sys_write+0x17/0x20
    [   76.982334]  vfs_write+0x3d3/0x570
    [   76.982342]  ksys_write+0x73/0x160
    [   76.982347]  __x64_sys_write+0x1e/0x30
    [   76.982352]  do_syscall_64+0x35/0x80
    [   76.982357]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Function metadata_operation_failed() is called when operations failed
    on dm pool metadata, dm pool will destroy and recreate metadata. So,
    shrinker will be unregistered and registered, which could down write
    shrinker_rwsem under pmd_write_lock.
    
    Fix it by allocating dm_block_manager before locking pmd->root_lock
    and destroying old dm_block_manager after unlocking pmd->root_lock,
    then old dm_block_manager is replaced with new dm_block_manager under
    pmd->root_lock. So, shrinker register/unregister could be done without
    holding pmd->root_lock.
    
    Fetch a reproducer in [Link].
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216676
    Cc: stable@vger.kernel.org #v5.2+
    Fixes: e49e582965b3 ("dm thin: add read only and fail io modes")
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f74b7c5a85e22cd9091845e0d62a1dd89d0f855f
Author: Mike Snitzer <snitzer@kernel.org>
Date:   Wed Nov 30 13:26:32 2022 -0500

    dm cache: Fix ABBA deadlock between shrink_slab and dm_cache_metadata_abort
    
    commit 352b837a5541690d4f843819028cf2b8be83d424 upstream.
    
    Same ABBA deadlock pattern fixed in commit 4b60f452ec51 ("dm thin: Fix
    ABBA deadlock between shrink_slab and dm_pool_abort_metadata") to
    DM-cache's metadata.
    
    Reported-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: stable@vger.kernel.org
    Fixes: 028ae9f76f29 ("dm cache: add fail io mode and needs_check flag")
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1922ea6b0ae2ea0c9a09be0eafafe1cd1069d259
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Fri Dec 9 16:28:10 2022 -0800

    mptcp: use proper req destructor for IPv6
    
    commit d3295fee3c756ece33ac0d935e172e68c0a4161b upstream.
    
    Before, only the destructor from TCP request sock in IPv4 was called
    even if the subflow was IPv6.
    
    It is important to use the right destructor to avoid memory leaks with
    some advanced IPv6 features, e.g. when the request socks contain
    specific IPv6 options.
    
    Fixes: 79c0949e9a09 ("mptcp: Add key generation and token tree")
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3901b9004a02d66ba4e1477bf16d65fe708a007
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Fri Dec 9 16:28:09 2022 -0800

    mptcp: dedicated request sock for subflow in v6
    
    commit 34b21d1ddc8ace77a8fa35c1b1e06377209e0dae upstream.
    
    tcp_request_sock_ops structure is specific to IPv4. It should then not
    be used with MPTCP subflows on top of IPv6.
    
    For example, it contains the 'family' field, initialised to AF_INET.
    This 'family' field is used by TCP FastOpen code to generate the cookie
    but also by TCP Metrics, SELinux and SYN Cookies. Using the wrong family
    will not lead to crashes but displaying/using/checking wrong things.
    
    Note that 'send_reset' callback from request_sock_ops structure is used
    in some error paths. It is then also important to use the correct one
    for IPv4 or IPv6.
    
    The slab name can also be different in IPv4 and IPv6, it will be used
    when printing some log messages. The slab pointer will anyway be the
    same because the object size is the same for both v4 and v6. A
    BUILD_BUG_ON() has also been added to make sure this size is the same.
    
    Fixes: cec37a6e41aa ("mptcp: Handle MP_CAPABLE options for outgoing connections")
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01a3015206857df81f2db16c59cef2de2257f266
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Fri Dec 9 16:28:08 2022 -0800

    mptcp: remove MPTCP 'ifdef' in TCP SYN cookies
    
    commit 3fff88186f047627bb128d65155f42517f8e448f upstream.
    
    To ease the maintenance, it is often recommended to avoid having #ifdef
    preprocessor conditions.
    
    Here the section related to CONFIG_MPTCP was quite short but the next
    commit needs to add more code around. It is then cleaner to move
    specific MPTCP code to functions located in net/mptcp directory.
    
    Now that mptcp_subflow_request_sock_ops structure can be static, it can
    also be marked as "read only after init".
    
    Suggested-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 993aad51b6ce978f687c1f77906e13c9bef70cef
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Fri Dec 9 16:28:07 2022 -0800

    mptcp: netlink: fix some error return code
    
    commit e0fe1123ab2b07d2cd5475660bd0b4e6993ffaa7 upstream.
    
    Fix to return negative error code -EINVAL from some error handling
    case instead of 0, as done elsewhere in those functions.
    
    Fixes: 9ab4807c84a4 ("mptcp: netlink: Add MPTCP_PM_CMD_ANNOUNCE")
    Fixes: 702c2f646d42 ("mptcp: netlink: allow userspace-driven subflow establishment")
    Cc: stable@vger.kernel.org
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a52012ff8b0c14354085bd86759ed81c1873acf
Author: Alexander Aring <aahringo@redhat.com>
Date:   Thu Oct 27 16:45:12 2022 -0400

    fs: dlm: retry accept() until -EAGAIN or error returns
    
    commit f0f4bb431bd543ed7bebbaea3ce326cfcd5388bc upstream.
    
    This patch fixes a race if we get two times an socket data ready event
    while the listen connection worker is queued. Currently it will be
    served only once but we need to do it (in this case twice) until we hit
    -EAGAIN which tells us there is no pending accept going on.
    
    This patch wraps an do while loop until we receive a return value which
    is different than 0 as it was done before commit d11ccd451b65 ("fs: dlm:
    listen socket out of connection hash").
    
    Cc: stable@vger.kernel.org
    Fixes: d11ccd451b65 ("fs: dlm: listen socket out of connection hash")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e72fec62f315117e195b38c5c89b1cd53e9f703
Author: Alexander Aring <aahringo@redhat.com>
Date:   Thu Oct 27 16:45:11 2022 -0400

    fs: dlm: fix sock release if listen fails
    
    commit 08ae0547e75ec3d062b6b6b9cf4830c730df68df upstream.
    
    This patch fixes a double sock_release() call when the listen() is
    called for the dlm lowcomms listen socket. The caller of
    dlm_listen_for_all should never care about releasing the socket if
    dlm_listen_for_all() fails, it's done now only once if listen() fails.
    
    Cc: stable@vger.kernel.org
    Fixes: 2dc6b1158c28 ("fs: dlm: introduce generic listen")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb641476f581d0523597a2f25737c6a8e4d1f5e6
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Thu Dec 15 16:30:37 2022 +0100

    ALSA: usb-audio: Add new quirk FIXED_RATE for JBL Quantum810 Wireless
    
    [ Upstream commit fd28941cff1cd9d8ffa59fe11eb64148e09b6ed6 ]
    
    It seems that the firmware is broken and does not accept
    the UAC_EP_CS_ATTR_SAMPLE_RATE URB. There is only one rate (48000Hz)
    available in the descriptors for the output endpoint.
    
    Create a new quirk QUIRK_FLAG_FIXED_RATE to skip the rate setup
    when only one rate is available (fixed).
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=216798
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20221215153037.1163786-1-perex@perex.cz
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e456d460f1b4a756cb9c5aebe7609f2439ccb7d
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Thu Nov 24 18:49:32 2022 +0100

    HID: Ignore HP Envy x360 eu0009nv stylus battery
    
    [ Upstream commit cec827d658dd5c287ea8925737d45f0a60e47422 ]
    
    Battery status is reported for the HP Envy x360 eu0009nv stylus even
    though it does not have battery.
    
    Prevent it from always reporting the battery as low (1%).
    
    Link: https://gitlab.freedesktop.org/libinput/libinput/-/issues/823
    Reported-by: Ioannis Iliopoulos <jxftw2424@gmail.com>
    Tested-by: Ioannis Iliopoulos <jxftw2424@gmail.com>
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca4c62ec488bc8e4b989a765221123b862c483d5
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Nov 27 23:19:28 2022 +0100

    platform/x86: x86-android-tablets: Add Advantech MICA-071 extra button
    
    [ Upstream commit b03ae77e7e057f4b3b858f10c840557e71448a91 ]
    
    The Advantech MICA-071 is a standard Windows tablet, but it has an extra
    "quick launch" button which is not described in the ACPI tables in anyway.
    
    Use the x86-android-tablets infra to create a gpio-button device for this.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20221127221928.123660-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c693355b9735df17e20fbe63355045e414e404bb
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Nov 27 19:24:58 2022 +0100

    platform/x86: x86-android-tablets: Add Lenovo Yoga Tab 3 (YT3-X90F) charger + fuel-gauge data
    
    [ Upstream commit b6c14ff1deaafd30036ec36d5205acd5a578b1cd ]
    
    The Lenovo Yoga Tab 3 (YT3-X90F) is an Intel Cherry Trail based tablet
    which ships with Android as Factory OS. Its DSDT contains a bunch of I2C
    devices which are not actually there, causing various resource conflicts.
    Use acpi_quirk_skip_i2c_client_enumeration() to not enumerate these.
    
    The YT3-X90F has quite a bit of exotic hardware, this adds initial
    support by manually instantiating the i2c-clients for the 2 charger +
    2 fuel-gauge chips used for the 2 batteries.
    
    Support for other parts of the hw will be added by follow-up patches.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20221127182458.104528-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a2798eda1a8f1038de74013c3b4669d17123059
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Dec 8 12:02:24 2022 +0100

    platform/x86: x86-android-tablets: Add Medion Lifetab S10346 data
    
    [ Upstream commit 902ce18ab1f4444ff9d49865bea35a07adcc03fd ]
    
    The Medion Lifetab S10346 is a x86 ACPI tablet which ships with Android
    x86 as factory OS. Its DSDT contains a bunch of I2C devices which are not
    actually there, causing various resource conflicts. Enumeration of these
    is skipped through the acpi_quirk_skip_i2c_client_enumeration().
    
    Add support for manually instantiating the I2C devices which are
    actually present on this tablet by adding the necessary device info to
    the x86-android-tablets module.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20221208110224.107354-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 838e48fa1b1b4dcdaaccb75fb2de034d2740ea62
Author: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
Date:   Mon Dec 5 14:57:13 2022 +0000

    ALSA: hda/cirrus: Add extra 10 ms delay to allow PLL settle and lock.
    
    [ Upstream commit 9fb9fa18fb50d1a33a1bd947681fce96fc2c8db6 ]
    
    New HW platforms with multiple CS42L42 parts, faster CPU and i2c
    requre some extra delay to allow PLL to settle and lock. Adding
    extra 10ms delay.
    
    Signed-off-by: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20221205145713.23852-1-vitalyr@opensource.cirrus.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c455aa7cc9cf1205b4d614560cfd508797d8681d
Author: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
Date:   Tue Nov 22 09:00:14 2022 +0200

    platform/x86: intel-uncore-freq: add Emerald Rapids support
    
    [ Upstream commit 9c252ecf30360cb7b4dbcc275aebe5642174fd39 ]
    
    Make Intel uncore frequency driver support Emerald Rapids by adding its
    CPU model to the match table.
    
    Emerald Rapids uncore frequency control is the same as in Sapphire
    Rapids.
    
    Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Acked-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 009ac0049dc3fd1610d90f5273cd948ef79ac641
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Nov 17 12:02:43 2022 +0100

    platform/x86: ideapad-laptop: Stop writing VPCCMD_W_TOUCHPAD at probe time
    
    [ Upstream commit a10ba160d427e78ffa2ab15a86cacaec291fa58a ]
    
    Commit d69cd7eea93e ("platform/x86: ideapad-laptop: Disable touchpad_switch
    for ELAN0634") from Janary 2021 added a flag hiding the touchpad sysfs-attr
    and disabling ideapad_sync_touchpad_state() because some devices
    "do not use EC to switch touchpad".
    
    At the same time this added a write(VPCCMD_W_TOUCHPAD, 1) call at probe
    time on these same devices. This seems to be copied from the rfkill code
    which does something similar when hw rfkill support is disabled.
    
    But for the rfkill code this is known to be necessary on some models,
    where as for the touchpad control no motivation is given for doing this
    and prior to this patch there were no reports of needing to do this.
    
    So this seems unnecessary; and it is best to avoid poking the hardware
    unnecessary to avoid unwanted side effects, so remove this.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Link: https://lore.kernel.org/r/20221117110244.67811-6-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bda3399b5abbaec5a173da6194a5d0d2c84e2bf6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Nov 17 12:02:42 2022 +0100

    platform/x86: ideapad-laptop: Send KEY_TOUCHPAD_TOGGLE on some models
    
    [ Upstream commit 5829f8a897e4f030cd2d32a930eea8954ab5dcd3 ]
    
    On recent Ideapad models the EC does not control the touchpad at all,
    so instead of sending KEY_TOUCHPAD_ON/ _OFF on touchpad toggle hotkey
    events, ideapad-laptop should send KEY_TOUCHPAD_TOGGLE and let userspace
    handle the toggling.
    
    Check for this by checking if the value read from VPCCMD_R_TOUCHPAD
    actually changes when receiving a touchpad-toggle hotkey event; and
    if it does not change send KEY_TOUCHPAD_TOGGLE to userspace to let
    userspace enable/disable the touchpad in software.
    
    Note this also drops the priv->features.touchpad_ctrl_via_ec check from
    ideapad_sync_touchpad_state() so that KEY_TOUCHPAD_TOGGLE will be send
    on laptops where this is not set too. This can be safely dropped now
    because the i8042_command(I8042_CMD_AUX_ENABLE/_DISABLE) call is now
    guarded by its own feature flag.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Link: https://lore.kernel.org/r/20221117110244.67811-5-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5820b413962d0a7edf4ba97f62430f3f9ee60ff
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Nov 17 12:02:41 2022 +0100

    platform/x86: ideapad-laptop: Only toggle ps2 aux port on/off on select models
    
    [ Upstream commit c69e7d843d2c34b80b8731a5dc57c34ea04a3edf ]
    
    Recently there have been multiple patches to disable the ideapad-laptop's
    touchpad control code, because it is causing issues on various laptops:
    
    Commit d69cd7eea93e ("platform/x86: ideapad-laptop: Disable touchpad_switch for ELAN0634")
    Commit a231224a601c ("platform/x86: ideapad-laptop: Disable touchpad_switch")
    
    The turning on/off of the ps2 aux port was added specifically for
    the IdeaPad Z570, where the EC does toggle the touchpad on/off LED and
    toggles the value returned by reading VPCCMD_R_TOUCHPAD, but it does not
    actually turn on/off the touchpad.
    
    The ideapad-laptop code really should not be messing with the i8042
    controller on all devices just for this special case.
    
    Add a new ctrl_ps2_aux_port flag set based on a DMI based allow-list
    for devices which need this workaround, populating it with just
    the Ideapad Z570 for now.
    
    This also adds a module parameter so that this behavior can easily
    be enabled on other models which may need it.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Link: https://lore.kernel.org/r/20221117110244.67811-4-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2380e9493538cd75026718fa9262d64167924998
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Nov 17 12:02:40 2022 +0100

    platform/x86: ideapad-laptop: Do not send KEY_TOUCHPAD* events on probe / resume
    
    [ Upstream commit f4dd8c44bb831ff885680bc77111fa39c193a93f ]
    
    The sending of KEY_TOUCHPAD* events is causing spurious touchpad OSD
    showing on resume.
    
    Disable the sending of events on probe / resume to fix this.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Link: https://lore.kernel.org/r/20221117110244.67811-3-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c234ccc68afec76b83ee519c91713f27d7550d24
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Nov 17 12:02:39 2022 +0100

    platform/x86: ideapad-laptop: Refactor ideapad_sync_touchpad_state()
    
    [ Upstream commit 289a59895e7a380cdc7fe2780d3073f4b9237020 ]
    
    Add an error exit for read_ec_data() failing instead of putting the main
    body in an if (success) block.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Tested-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Link: https://lore.kernel.org/r/20221117110244.67811-2-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8af3d02aae3ecc23ee84d7078d1ebb3df7557dda
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 14 15:44:59 2022 +0100

    ACPI: video: Prefer native over vendor
    
    [ Upstream commit fb1836c91317e0770950260dfa91eb9b2170cb27 ]
    
    When available prefer native backlight control over vendor backlight
    control.
    
    Testing has shown that there are quite a few laptop models which rely
    on native backlight control (they don't have ACPI video bus backlight
    control) and on which acpi_osi_is_win8() returns false.
    
    Currently __acpi_video_get_backlight_type() returns vendor on these
    laptops, leading to an empty /sys/class/backlight.
    
    As a workaround for this acpi_video_backlight_use_native() has been
    temporarily changed to always return true.
    
    This re-introduces the problem of having multiple backlight
    devices under /sys/class/backlight for a single panel.
    
    Change __acpi_video_get_backlight_type() to prefer native over vendor
    when available. So that it returns native on these models.
    
    And change acpi_video_backlight_use_native() back to only return
    true when __acpi_video_get_backlight_type() returns native.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 923c1922bdbe44bdbebe57b5b976d40f68853653
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 14 15:44:58 2022 +0100

    ACPI: video: Simplify __acpi_video_get_backlight_type()
    
    [ Upstream commit a5df42521f328b45c9d89c13740e747be08ac66e ]
    
    Simplify __acpi_video_get_backlight_type() removing a nested if which
    makes the flow harder to follow.
    
    This also results in having only 1 exit point with
    return acpi_backlight_native instead of 2.
    
    Note this drops the (video_caps & ACPI_VIDEO_BACKLIGHT) check from
    the if (acpi_osi_is_win8() && native_available) return native path.
    Windows 8's hardware certification requirements include that there must
    be ACPI video bus backlight control, so the ACPI_VIDEO_BACKLIGHT check
    is redundant.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33c25c3146837f2ac7e465fdfd5dedd85d202ca8
Author: Philipp Jungkamp <p.jungkamp@gmx.net>
Date:   Wed Nov 16 12:06:47 2022 +0100

    platform/x86: ideapad-laptop: support for more special keys in WMI
    
    [ Upstream commit f32e02417614d3588a3954dab2a70320c43d1010 ]
    
    The event data of the WMI event 0xD0, which is assumed to be the
    fn_lock, is used to indicate several special keys on newer Yoga 7/9
    laptops.
    
    The notify_id 0xD0 is non-unique in the DSDT of the Yoga 9 14IAP7, this
    causes wmi_get_event_data() to report wrong values.
    Port the ideapad-laptop WMI code to the wmi bus infrastructure which
    does not suffer from the shortcomings of wmi_get_event_data().
    
    Signed-off-by: Philipp Jungkamp <p.jungkamp@gmx.net>
    Link: https://lore.kernel.org/r/20221116110647.3438-1-p.jungkamp@gmx.net
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32755a5da122f53c3d82e1ef9585999f2e89f62c
Author: Eray Orçunus <erayorcunus@gmail.com>
Date:   Sat Oct 29 15:03:09 2022 +0300

    platform/x86: ideapad-laptop: Add new _CFG bit numbers for future use
    
    [ Upstream commit be5dd7d8359de9fb22115a63f09981cdf689db4f ]
    
    Later IdeaPads report various things in last 8 bits of _CFG, at least
    5 of them represent supported on-screen-displays. Add those bit numbers
    to the enum, and use CFG_OSD_ as prefix of their names. Also expose
    the values of these bits to debugfs, since they can be useful.
    
    Signed-off-by: Eray Orçunus <erayorcunus@gmail.com>
    Acked-by: Ike Panhc <ike.pan@canonical.com>
    Link: https://lore.kernel.org/r/20221029120311.11152-5-erayorcunus@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 317499df9d702d8c4123661b044a79d1dcc92ee5
Author: Eray Orçunus <erayorcunus@gmail.com>
Date:   Sat Oct 29 15:03:06 2022 +0300

    platform/x86: ideapad-laptop: Revert "check for touchpad support in _CFG"
    
    [ Upstream commit 5831882880e9a1749553e78f9d8369fe33116aaf ]
    
    Last 8 bit of _CFG started being used in later IdeaPads, thus 30th bit
    doesn't always show whether device supports touchpad or touchpad switch.
    Remove checking bit 30 of _CFG, so older IdeaPads like S10-3 can switch
    touchpad again via touchpad attribute.
    
    This reverts commit b3ed1b7fe378 ("platform/x86: ideapad-laptop: check for
    touchpad support in _CFG").
    
    Signed-off-by: Eray Orçunus <erayorcunus@gmail.com>
    Acked-by: Ike Panhc <ike.pan@canonical.com>
    Link: https://lore.kernel.org/r/20221029120311.11152-2-erayorcunus@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f48a74ccb51990eb719fc467693be8d70fb85dc6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 7 13:43:22 2022 +0100

    platform/x86: thinkpad_acpi: Fix max_brightness of thinklight
    
    [ Upstream commit db5e2a4ca0a7a5fe54f410590292ea2e91de6798 ]
    
    Thinklight has only two values, on/off so it's reasonable for
    max_brightness to be 0 and 1 as if you write anything between 0 and 255
    it will be 255 anyway so there's no point for it to be 255.
    
    This may look like it is a userspace API change, but writes with
    a value larget then the new max_brightness will still be accepted,
    these will be silently clamped to the new max_brightness by
    led_set_brightness_nosleep(). So no userspace API problems are
    expected.
    
    Reported-by: Michał Szczepaniak <m.szczepaniak.000@gmail.com>
    Link: https://lore.kernel.org/platform-driver-x86/55400326-e64f-5444-94e5-22b8214d00b6@gmail.com/
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ff594fb490f8be4e894557723611b11010d7e55
Author: Chris Chiu <chris.chiu@canonical.com>
Date:   Mon Dec 26 19:43:03 2022 +0800

    ALSA: hda/realtek: Apply dual codec fixup for Dell Latitude laptops
    
    [ Upstream commit a4517c4f3423c7c448f2c359218f97c1173523a1 ]
    
    The Dell Latiture 3340/3440/3540 laptops with Realtek ALC3204 have
    dual codecs and need the ALC1220_FIXUP_GB_DUAL_CODECS to fix the
    conflicts of Master controls. The existing headset mic fixup for
    Dell is also required to enable the jack sense and the headset mic.
    
    Introduce a new fixup to fix the dual codec and headset mic issues
    for particular Dell laptops since other old Dell laptops with the
    same codec configuration are already well handled by the fixup in
    alc269_fallback_pin_fixup_tbl[].
    
    Signed-off-by: Chris Chiu <chris.chiu@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221226114303.4027500-1-chris.chiu@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed32831a17e5c4ab9665bebb6b2c5ad19fb57e5e
Author: Philipp Jungkamp <p.jungkamp@gmx.net>
Date:   Mon Dec 5 17:37:13 2022 +0100

    ALSA: patch_realtek: Fix Dell Inspiron Plus 16
    
    [ Upstream commit 2912cdda734d9136615ed05636d9fcbca2a7a3c5 ]
    
    The Dell Inspiron Plus 16, in both laptop and 2in1 form factor, has top
    speakers connected on NID 0x17, which the codec reports as unconnected.
    These speakers should be connected to the DAC on NID 0x03.
    
    Signed-off-by: Philipp Jungkamp <p.jungkamp@gmx.net>
    Link: https://lore.kernel.org/r/20221205163713.7476-1-p.jungkamp@gmx.net
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Stable-dep-of: a4517c4f3423 ("ALSA: hda/realtek: Apply dual codec fixup for Dell Latitude laptops")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ac7830af689a81d68d25f3009a0a13542b22a65
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Thu Dec 15 00:02:53 2022 +0100

    bpf: Resolve fext program type when checking map compatibility
    
    [ Upstream commit 1c123c567fb138ebd187480b7fc0610fcb0851f5 ]
    
    The bpf_prog_map_compatible() check makes sure that BPF program types are
    not mixed inside BPF map types that can contain programs (tail call maps,
    cpumaps and devmaps). It does this by setting the fields of the map->owner
    struct to the values of the first program being checked against, and
    rejecting any subsequent programs if the values don't match.
    
    One of the values being set in the map owner struct is the program type,
    and since the code did not resolve the prog type for fext programs, the map
    owner type would be set to PROG_TYPE_EXT and subsequent loading of programs
    of the target type into the map would fail.
    
    This bug is seen in particular for XDP programs that are loaded as
    PROG_TYPE_EXT using libxdp; these cannot insert programs into devmaps and
    cpumaps because the check fails as described above.
    
    Fix the bug by resolving the fext program type to its target program type
    as elsewhere in the verifier.
    
    v3:
    - Add Yonghong's ACK
    
    Fixes: f45d5b6ce2e8 ("bpf: generalise tail call map compatibility check")
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Link: https://lore.kernel.org/r/20221214230254.790066-1-toke@redhat.com
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f845a9d33b4e25215b3e3c31751debf57d5daf89
Author: Smitha T Murthy <smitha.t@samsung.com>
Date:   Wed Sep 7 16:02:25 2022 +0530

    media: s5p-mfc: Fix in register read and write for H264
    
    commit 06710cd5d2436135046898d7e4b9408c8bb99446 upstream.
    
    Few of the H264 encoder registers written were not getting reflected
    since the read values were not stored and getting overwritten.
    
    Fixes: 6a9c6f681257 ("[media] s5p-mfc: Add variants to access mfc registers")
    
    Cc: stable@vger.kernel.org
    Cc: linux-fsd@tesla.com
    Signed-off-by: Smitha T Murthy <smitha.t@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd1b72f0c39a0d791a087b4e643701a48328ba8e
Author: Smitha T Murthy <smitha.t@samsung.com>
Date:   Wed Sep 7 16:02:26 2022 +0530

    media: s5p-mfc: Clear workbit to handle error condition
    
    commit d3f3c2fe54e30b0636496d842ffbb5ad3a547f9b upstream.
    
    During error on CLOSE_INSTANCE command, ctx_work_bits was not getting
    cleared. During consequent mfc execution NULL pointer dereferencing of
    this context led to kernel panic. This patch fixes this issue by making
    sure to clear ctx_work_bits always.
    
    Fixes: 818cd91ab8c6 ("[media] s5p-mfc: Extract open/close MFC instance commands")
    Cc: stable@vger.kernel.org
    Cc: linux-fsd@tesla.com
    Signed-off-by: Smitha T Murthy <smitha.t@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bff2698aab6f9b691e1e19adc4ca73e4149c8256
Author: Smitha T Murthy <smitha.t@samsung.com>
Date:   Wed Sep 7 16:02:27 2022 +0530

    media: s5p-mfc: Fix to handle reference queue during finishing
    
    commit d8a46bc4e1e0446459daa77c4ce14218d32dacf9 upstream.
    
    On receiving last buffer driver puts MFC to MFCINST_FINISHING state which
    in turn skips transferring of frame from SRC to REF queue. This causes
    driver to stop MFC encoding and last frame is lost.
    
    This patch guarantees safe handling of frames during MFCINST_FINISHING and
    correct clearing of workbit to avoid early stopping of encoding.
    
    Fixes: af9357467810 ("[media] MFC: Add MFC 5.1 V4L2 driver")
    
    Cc: stable@vger.kernel.org
    Cc: linux-fsd@tesla.com
    Signed-off-by: Smitha T Murthy <smitha.t@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67ffc6dc3002572fa2bd982d95736b08b3ee18e0
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Nov 26 03:17:17 2022 +0000

    ext2: unbugger ext2_empty_dir()
    
    commit 27e714c007e4ad01837bf0fac5c11913a38d7695 upstream.
    
    In 27cfa258951a "ext2: fix fs corruption when trying to remove
    a non-empty directory with IO error" a funny thing has happened:
    
    -               page = ext2_get_page(inode, i, dir_has_error, &page_addr);
    +               page = ext2_get_page(inode, i, 0, &page_addr);
    
     -               if (IS_ERR(page)) {
     -                       dir_has_error = 1;
     -                       continue;
     -               }
     +               if (IS_ERR(page))
     +                       goto not_empty;
    
    And at not_empty: we hit ext2_put_page(page, page_addr), which does
    put_page(page).  Which, unless I'm very mistaken, should oops
    immediately when given ERR_PTR(-E...) as page.
    
    OK, shit happens, insufficiently tested patches included.  But when
    commit in question describes the fault-injection test that exercised
    that particular failure exit...
    
    Ow.
    
    CC: stable@vger.kernel.org
    Fixes: 27cfa258951a ("ext2: fix fs corruption when trying to remove a non-empty directory with IO error")
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7c0c943ed675b66d4bbb16c51c6a3bb58da047e
Author: Yongqiang Liu <liuyongqiang13@huawei.com>
Date:   Thu Nov 10 14:23:07 2022 +0000

    cpufreq: Init completion before kobject_init_and_add()
    
    commit 5c51054896bcce1d33d39fead2af73fec24f40b6 upstream.
    
    In cpufreq_policy_alloc(), it will call uninitialed completion in
    cpufreq_sysfs_release() when kobject_init_and_add() fails. And
    that will cause a crash such as the following page fault in complete:
    
    BUG: unable to handle page fault for address: fffffffffffffff8
    [..]
    RIP: 0010:complete+0x98/0x1f0
    [..]
    Call Trace:
     kobject_put+0x1be/0x4c0
     cpufreq_online.cold+0xee/0x1fd
     cpufreq_add_dev+0x183/0x1e0
     subsys_interface_register+0x3f5/0x4e0
     cpufreq_register_driver+0x3b7/0x670
     acpi_cpufreq_init+0x56c/0x1000 [acpi_cpufreq]
     do_one_initcall+0x13d/0x780
     do_init_module+0x1c3/0x630
     load_module+0x6e67/0x73b0
     __do_sys_finit_module+0x181/0x240
     do_syscall_64+0x35/0x80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 4ebe36c94aed ("cpufreq: Fix kobject memleak")
    Signed-off-by: Yongqiang Liu <liuyongqiang13@huawei.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: 5.2+ <stable@vger.kernel.org> # 5.2+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5052a96b21049b99534f82aee982769e2c1f2d5f
Author: Kant Fan <kant@allwinnertech.com>
Date:   Tue Oct 25 15:21:09 2022 +0800

    PM/devfreq: governor: Add a private governor_data for governor
    
    commit 5fdded8448924e3631d466eea499b11606c43640 upstream.
    
    The member void *data in the structure devfreq can be overwrite
    by governor_userspace. For example:
    1. The device driver assigned the devfreq governor to simple_ondemand
    by the function devfreq_add_device() and init the devfreq member
    void *data to a pointer of a static structure devfreq_simple_ondemand_data
    by the function devfreq_add_device().
    2. The user changed the devfreq governor to userspace by the command
    "echo userspace > /sys/class/devfreq/.../governor".
    3. The governor userspace alloced a dynamic memory for the struct
    userspace_data and assigend the member void *data of devfreq to
    this memory by the function userspace_init().
    4. The user changed the devfreq governor back to simple_ondemand
    by the command "echo simple_ondemand > /sys/class/devfreq/.../governor".
    5. The governor userspace exited and assigned the member void *data
    in the structure devfreq to NULL by the function userspace_exit().
    6. The governor simple_ondemand fetched the static information of
    devfreq_simple_ondemand_data in the function
    devfreq_simple_ondemand_func() but the member void *data of devfreq was
    assigned to NULL by the function userspace_exit().
    7. The information of upthreshold and downdifferential is lost
    and the governor simple_ondemand can't work correctly.
    
    The member void *data in the structure devfreq is designed for
    a static pointer used in a governor and inited by the function
    devfreq_add_device(). This patch add an element named governor_data
    in the devfreq structure which can be used by a governor(E.g userspace)
    who want to assign a private data to do some private things.
    
    Fixes: ce26c5bb9569 ("PM / devfreq: Add basic governors")
    Cc: stable@vger.kernel.org # 5.10+
    Reviewed-by: Chanwoo Choi <cwchoi00@gmail.com>
    Acked-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Kant Fan <kant@allwinnertech.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6088d8783f7b656dff34392532f94ae45fb2605d
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Oct 19 23:19:35 2022 -0600

    random: add helpers for random numbers with given floor or range
    
    commit 7f576b2593a978451416424e75f69ad1e3ae4efe upstream.
    
    Now that we have get_random_u32_below(), it's nearly trivial to make
    inline helpers to compute get_random_u32_above() and
    get_random_u32_inclusive(), which will help clean up open coded loops
    and manual computations throughout the tree.
    
    One snag is that in order to make get_random_u32_inclusive() operate on
    closed intervals, we have to do some (unlikely) special case handling if
    get_random_u32_inclusive(0, U32_MAX) is called. The least expensive way
    of doing this is actually to adjust the slowpath of
    get_random_u32_below() to have its undefined 0 result just return the
    output of get_random_u32(). We can make this basically free by calling
    get_random_u32() before the branch, so that the branch latency gets
    interleaved.
    
    Cc: stable@vger.kernel.org # to ease future backports that use this api
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef3ad7f447a2a8c156e40ea284a8985372be4254
Author: Yazen Ghannam <yazen.ghannam@amd.com>
Date:   Tue Jun 21 15:59:43 2022 +0000

    x86/MCE/AMD: Clear DFR errors found in THR handler
    
    commit bc1b705b0eee4c645ad8b3bbff3c8a66e9688362 upstream.
    
    AMD's MCA Thresholding feature counts errors of all severity levels, not
    just correctable errors. If a deferred error causes the threshold limit
    to be reached (it was the error that caused the overflow), then both a
    deferred error interrupt and a thresholding interrupt will be triggered.
    
    The order of the interrupts is not guaranteed. If the threshold
    interrupt handler is executed first, then it will clear MCA_STATUS for
    the error. It will not check or clear MCA_DESTAT which also holds a copy
    of the deferred error. When the deferred error interrupt handler runs it
    will not find an error in MCA_STATUS, but it will find the error in
    MCA_DESTAT. This will cause two errors to be logged.
    
    Check for deferred errors when handling a threshold interrupt. If a bank
    contains a deferred error, then clear the bank's MCA_DESTAT register.
    
    Define a new helper function to do the deferred error check and clearing
    of MCA_DESTAT.
    
      [ bp: Simplify, convert comment to passive voice. ]
    
    Fixes: 37d43acfd79f ("x86/mce/AMD: Redo error logging from APIC LVT interrupt handlers")
    Signed-off-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220621155943.33623-1-yazen.ghannam@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9edfbb64ca2b3f88143534c704194699dbadfdb8
Author: Mickaël Salaün <mic@digikod.net>
Date:   Fri Sep 9 12:39:01 2022 +0200

    selftests: Use optional USERCFLAGS and USERLDFLAGS
    
    commit de3ee3f63400a23954e7c1ad1cb8c20f29ab6fe3 upstream.
    
    This change enables to extend CFLAGS and LDFLAGS from command line, e.g.
    to extend compiler checks: make USERCFLAGS=-Werror USERLDFLAGS=-static
    
    USERCFLAGS and USERLDFLAGS are documented in
    Documentation/kbuild/makefiles.rst and Documentation/kbuild/kbuild.rst
    
    This should be backported (down to 5.10) to improve previous kernel
    versions testing as well.
    
    Cc: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mickaël Salaün <mic@digikod.net>
    Link: https://lore.kernel.org/r/20220909103901.1503436-1-mic@digikod.net
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea27cc32450e871f8931c021311558d8f5b11fde
Author: Yazen Ghannam <yazen.ghannam@amd.com>
Date:   Tue Oct 18 10:36:30 2022 -0500

    EDAC/mc_sysfs: Increase legacy channel support to 12
    
    commit 25836ce1df827cb4830291cb2325067efb46753a upstream.
    
    Newer AMD systems, such as Genoa, can support up to 12 channels per EDAC
    "mc" device. These are detected by the device's EDAC module, and the
    current EDAC interface is properly enumerated. However, the legacy EDAC
    sysfs interface provides device attributes only for channels 0 to 7.
    Therefore, channels 8 to 11 will not be visible in the legacy interface.
    This was overlooked in the initial support for AMD Genoa.
    
    Add additional device attributes so that up to 12 channels are visible
    in the legacy EDAC sysfs interface.
    
    Fixes: e2be5955a886 ("EDAC/amd64: Add support for AMD Family 19h Models 10h-1Fh and A0h-AFh")
    Signed-off-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20221018153630.14664-1-yazen.ghannam@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8b9b0b857b948e52b6d871d47ab9ef74d0cbee7
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Dec 1 14:03:24 2022 -0800

    cxl/region: Fix missing probe failure
    
    commit bf3e5da8cb43a671b32fc125fa81b8f6a3677192 upstream.
    
    cxl_region_probe() allows for regions not in the 'commit' state to be
    enabled. Fail probe when the region is not committed otherwise the
    kernel may indicate that an address range is active when none of the
    decoders are active.
    
    Fixes: 8d48817df6ac ("cxl/region: Add region driver boiler plate")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Davidlohr Bueso <dave@stgolabs.net>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Link: https://lore.kernel.org/r/166993220462.1995348.1698008475198427361.stgit@dwillia2-xfh.jf.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 833cdf903d2eed6a34ac1ffdc76d40534d0afccf
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Sep 30 21:20:37 2022 +0200

    arm64: dts: qcom: sdm850-lenovo-yoga-c630: correct I2C12 pins drive strength
    
    commit fd49776d8f458bba5499384131eddc0b8bcaf50c upstream.
    
    The pin configuration (done with generic pin controller helpers and
    as expressed by bindings) requires children nodes with either:
    1. "pins" property and the actual configuration,
    2. another set of nodes with above point.
    
    The qup_i2c12_default pin configuration used second method - with a
    "pinmux" child.
    
    Fixes: 44acee207844 ("arm64: dts: qcom: Add Lenovo Yoga C630")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220930192039.240486-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38f99d0b028473e975336932f6feef99c7e3956a
Author: Andrew Cooper <andrew.cooper3@citrix.com>
Date:   Wed Aug 10 23:19:09 2022 +0100

    x86/fpu/xstate: Fix XSTATE_WARN_ON() to emit relevant diagnostics
    
    commit 48280042f2c6e3ac2cfb1d8b752ab4a7e0baea24 upstream.
    
    "XSAVE consistency problem" has been reported under Xen, but that's the extent
    of my divination skills.
    
    Modify XSTATE_WARN_ON() to force the caller to provide relevant diagnostic
    information, and modify each caller suitably.
    
    For check_xstate_against_struct(), this removes a double WARN() where one will
    do perfectly fine.
    
    CC stable as this has been wonky debugging for 7 years and it is good to
    have there too.
    
    Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220810221909.12768-1-andrew.cooper3@citrix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 346ac4a116cbad784f95ef9a1ab195dbe19230b0
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Sat Oct 8 20:42:54 2022 -0600

    random: use rejection sampling for uniform bounded random integers
    
    commit e9a688bcb19348862afe30d7c85bc37c4c293471 upstream.
    
    Until the very recent commits, many bounded random integers were
    calculated using `get_random_u32() % max_plus_one`, which not only
    incurs the price of a division -- indicating performance mostly was not
    a real issue -- but also does not result in a uniformly distributed
    output if max_plus_one is not a power of two. Recent commits moved to
    using `prandom_u32_max(max_plus_one)`, which replaces the division with
    a faster multiplication, but still does not solve the issue with
    non-uniform output.
    
    For some users, maybe this isn't a problem, and for others, maybe it is,
    but for the majority of users, probably the question has never been
    posed and analyzed, and nobody thought much about it, probably assuming
    random is random is random. In other words, the unthinking expectation
    of most users is likely that the resultant numbers are uniform.
    
    So we implement here an efficient way of generating uniform bounded
    random integers. Through use of compile-time evaluation, and avoiding
    divisions as much as possible, this commit introduces no measurable
    overhead. At least for hot-path uses tested, any potential difference
    was lost in the noise. On both clang and gcc, code generation is pretty
    small.
    
    The new function, get_random_u32_below(), lives in random.h, rather than
    prandom.h, and has a "get_random_xxx" function name, because it is
    suitable for all uses, including cryptography.
    
    In order to be efficient, we implement a kernel-specific variant of
    Daniel Lemire's algorithm from "Fast Random Integer Generation in an
    Interval", linked below. The kernel's variant takes advantage of
    constant folding to avoid divisions entirely in the vast majority of
    cases, works on both 32-bit and 64-bit architectures, and requests a
    minimal amount of bytes from the RNG.
    
    Link: https://arxiv.org/pdf/1805.10941.pdf
    Cc: stable@vger.kernel.org # to ease future backports that use this api
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f9327484c6ff078c281c7b1c094ade43eb84eb0
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Sep 30 21:20:38 2022 +0200

    arm64: dts: qcom: sdm850-samsung-w737: correct I2C12 pins drive strength
    
    commit 3638ea010c37e1e6d93474c4b3368f403600413f upstream.
    
    The pin configuration (done with generic pin controller helpers and
    as expressed by bindings) requires children nodes with either:
    1. "pins" property and the actual configuration,
    2. another set of nodes with above point.
    
    The qup_i2c12_default pin configuration used second method - with a
    "pinmux" child.
    
    Fixes: d4b341269efb ("arm64: dts: qcom: Add support for Samsung Galaxy Book2")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220930192039.240486-2-krzysztof.kozlowski@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bacb7e1d42f4a48067d1ee579b8bf4dc133b8adc
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Nov 8 13:37:55 2022 +0100

    ARM: ux500: do not directly dereference __iomem
    
    commit 65b0e307a1a9193571db12910f382f84195a3d29 upstream.
    
    Sparse reports that calling add_device_randomness() on `uid` is a
    violation of address spaces. And indeed the next usage uses readl()
    properly, but that was left out when passing it toadd_device_
    randomness(). So instead copy the whole thing to the stack first.
    
    Fixes: 4040d10a3d44 ("ARM: ux500: add DB serial number to entropy pool")
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/202210230819.loF90KDh-lkp@intel.com/
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Link: https://lore.kernel.org/r/20221108123755.207438-1-Jason@zx2c4.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a94b90ac1f251d1007c0c43ee289a61b50f2505f
Author: Boris Burkov <boris@bur.io>
Date:   Wed Dec 14 15:05:08 2022 -0800

    btrfs: fix resolving backrefs for inline extent followed by prealloc
    
    commit 560840afc3e63bbe5d9c5ef6b2ecf8f3589adff6 upstream.
    
    If a file consists of an inline extent followed by a regular or prealloc
    extent, then a legitimate attempt to resolve a logical address in the
    non-inline region will result in add_all_parents reading the invalid
    offset field of the inline extent. If the inline extent item is placed
    in the leaf eb s.t. it is the first item, attempting to access the
    offset field will not only be meaningless, it will go past the end of
    the eb and cause this panic:
    
      [17.626048] BTRFS warning (device dm-2): bad eb member end: ptr 0x3fd4 start 30834688 member offset 16377 size 8
      [17.631693] general protection fault, probably for non-canonical address 0x5088000000000: 0000 [#1] SMP PTI
      [17.635041] CPU: 2 PID: 1267 Comm: btrfs Not tainted 5.12.0-07246-g75175d5adc74-dirty #199
      [17.637969] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
      [17.641995] RIP: 0010:btrfs_get_64+0xe7/0x110
      [17.649890] RSP: 0018:ffffc90001f73a08 EFLAGS: 00010202
      [17.651652] RAX: 0000000000000001 RBX: ffff88810c42d000 RCX: 0000000000000000
      [17.653921] RDX: 0005088000000000 RSI: ffffc90001f73a0f RDI: 0000000000000001
      [17.656174] RBP: 0000000000000ff9 R08: 0000000000000007 R09: c0000000fffeffff
      [17.658441] R10: ffffc90001f73790 R11: ffffc90001f73788 R12: ffff888106afe918
      [17.661070] R13: 0000000000003fd4 R14: 0000000000003f6f R15: cdcdcdcdcdcdcdcd
      [17.663617] FS:  00007f64e7627d80(0000) GS:ffff888237c80000(0000) knlGS:0000000000000000
      [17.666525] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [17.668664] CR2: 000055d4a39152e8 CR3: 000000010c596002 CR4: 0000000000770ee0
      [17.671253] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [17.673634] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [17.676034] PKRU: 55555554
      [17.677004] Call Trace:
      [17.677877]  add_all_parents+0x276/0x480
      [17.679325]  find_parent_nodes+0xfae/0x1590
      [17.680771]  btrfs_find_all_leafs+0x5e/0xa0
      [17.682217]  iterate_extent_inodes+0xce/0x260
      [17.683809]  ? btrfs_inode_flags_to_xflags+0x50/0x50
      [17.685597]  ? iterate_inodes_from_logical+0xa1/0xd0
      [17.687404]  iterate_inodes_from_logical+0xa1/0xd0
      [17.689121]  ? btrfs_inode_flags_to_xflags+0x50/0x50
      [17.691010]  btrfs_ioctl_logical_to_ino+0x131/0x190
      [17.692946]  btrfs_ioctl+0x104a/0x2f60
      [17.694384]  ? selinux_file_ioctl+0x182/0x220
      [17.695995]  ? __x64_sys_ioctl+0x84/0xc0
      [17.697394]  __x64_sys_ioctl+0x84/0xc0
      [17.698697]  do_syscall_64+0x33/0x40
      [17.700017]  entry_SYSCALL_64_after_hwframe+0x44/0xae
      [17.701753] RIP: 0033:0x7f64e72761b7
      [17.709355] RSP: 002b:00007ffefb067f58 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [17.712088] RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f64e72761b7
      [17.714667] RDX: 00007ffefb067fb0 RSI: 00000000c0389424 RDI: 0000000000000003
      [17.717386] RBP: 00007ffefb06d188 R08: 000055d4a390d2b0 R09: 00007f64e7340a60
      [17.719938] R10: 0000000000000231 R11: 0000000000000246 R12: 0000000000000001
      [17.722383] R13: 0000000000000000 R14: 00000000c0389424 R15: 000055d4a38fd2a0
      [17.724839] Modules linked in:
    
    Fix the bug by detecting the inline extent item in add_all_parents and
    skipping to the next extent item.
    
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Boris Burkov <boris@bur.io>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 169a4cf46882974d4db6d85eb623ec898e51bbc0
Author: void0red <void0red@gmail.com>
Date:   Wed Nov 23 22:39:45 2022 +0800

    btrfs: fix extent map use-after-free when handling missing device in read_one_chunk
    
    commit 1742e1c90c3da344f3bb9b1f1309b3f47482756a upstream.
    
    Store the error code before freeing the extent_map. Though it's
    reference counted structure, in that function it's the first and last
    allocation so this would lead to a potential use-after-free.
    
    The error can happen eg. when chunk is stored on a missing device and
    the degraded mount option is missing.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=216721
    Reported-by: eriri <1527030098@qq.com>
    Fixes: adfb69af7d8c ("btrfs: add_missing_dev() should return the actual error")
    CC: stable@vger.kernel.org # 4.9+
    Signed-off-by: void0red <void0red@gmail.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 712b0938166a68b7685ef7ce911a52051ba21329
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Nov 18 15:06:09 2022 -0500

    btrfs: fix uninitialized parent in insert_state
    
    commit d7c9e1be2876f63fb2178a24e0c1d5733ff98d47 upstream.
    
    I don't know how this isn't caught when we build this in the kernel, but
    while syncing extent-io-tree.c into btrfs-progs I got an error because
    parent could potentially be uninitialized when we link in a new node,
    specifically when the extent_io_tree is empty.  This means we could have
    garbage in the parent color.  I don't know what the ramifications are of
    that, but it's probably not great, so fix this by initializing parent to
    NULL.  I spot checked all of our other usages in btrfs and we appear to
    be doing the correct thing everywhere else.
    
    Fixes: c7e118cf98c7 ("btrfs: open code rbtree search in insert_state")
    CC: stable@vger.kernel.org # 6.0+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed00567b170fc461d8755003e5cf4e0b008aff90
Author: Evan Quan <evan.quan@amd.com>
Date:   Mon Dec 5 14:53:34 2022 +0800

    drm/amd/pm: correct SMU13.0.0 pstate profiling clock settings
    
    commit 32a7819ff8e25375c7515aaae5cfcb8c44a461b7 upstream.
    
    Correct the pstate standard/peak profiling mode clock settings
    for SMU13.0.0.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.0.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d455cb89dc576f752beebcadc823511882fb321
Author: Evan Quan <evan.quan@amd.com>
Date:   Mon Dec 5 15:33:31 2022 +0800

    drm/amd/pm: update SMU13.0.0 reported maximum shader clock
    
    commit 7a18e089eff02f17eaee49fc18641f5d16a8284b upstream.
    
    Update the reported maximum shader clock to the value which can
    be guarded to be achieved on all cards. This is to align with
    Window setting.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.0.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ebb4f4eab19116619e40d0aa8fbba955512eea1
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Nov 14 09:13:41 2022 +0100

    phy: qcom-qmp-combo: fix out-of-bounds clock access
    
    commit d8a5b59c5fc75c99ba17e3eb1a8f580d8d172b28 upstream.
    
    The SM8250 only uses three clocks but the DP configuration erroneously
    described four clocks.
    
    In case the DP part of the PHY is initialised before the USB part, this
    would lead to uninitialised memory beyond the bulk-clocks array to be
    treated as a clock pointer as the clocks are requested based on the USB
    configuration.
    
    Fixes: aff188feb5e1 ("phy: qcom-qmp: add support for sm8250-usb3-dp phy")
    Cc: stable@vger.kernel.org      # 5.13
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20221114081346.5116-2-johan+linaro@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39eeec3130a1367f527093b36010e6605d618564
Author: Wenchao Chen <wenchao.chen@unisoc.com>
Date:   Wed Dec 7 13:19:09 2022 +0800

    mmc: sdhci-sprd: Disable CLK_AUTO when the clock is less than 400K
    
    commit ff874dbc4f868af128b412a9bd92637103cf11d7 upstream.
    
    When the clock is less than 400K, some SD cards fail to initialize
    because CLK_AUTO is enabled.
    
    Fixes: fb8bd90f83c4 ("mmc: sdhci-sprd: Add Spreadtrum's initial host controller")
    Signed-off-by: Wenchao Chen <wenchao.chen@unisoc.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221207051909.32126-1-wenchao.chen@unisoc.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51b84cfd24ee52953f93fda5a20f07e3aa87959e
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Fri Nov 4 10:20:44 2022 +0100

    arm64: dts: qcom: sc8280xp: fix UFS reference clocks
    
    commit f446022b932aff1d6a308ca5d537ec2b512debdc upstream.
    
    There are three UFS reference clocks on SC8280XP which are used as
    follows:
    
     - The GCC_UFS_REF_CLKREF_CLK clock is fed to any UFS device connected
       to either controller.
    
     - The GCC_UFS_1_CARD_CLKREF_CLK and GCC_UFS_CARD_CLKREF_CLK clocks
       provide reference clocks to the two PHYs.
    
    Note that this depends on first updating the clock driver to reflect
    that all three clocks are sourced from CXO. Specifically, the UFS
    controller driver expects the device reference clock to have a valid
    frequency:
    
            ufshcd-qcom 1d84000.ufs: invalid ref_clk setting = 0
    
    Fixes: 152d1faf1e2f ("arm64: dts: qcom: add SC8280XP platform")
    Fixes: 8d6b458ce6e9 ("arm64: dts: qcom: sc8280xp: fix ufs_card_phy ref clock")
    Fixes: f3aa975e230e ("arm64: dts: qcom: sc8280xp: correct ref clock for ufs_mem_phy")
    Link: https://lore.kernel.org/lkml/Y2OEjNAPXg5BfOxH@hovoldconsulting.com/
    Cc: stable@vger.kernel.org      # 5.20
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Brian Masney <bmasney@redhat.com>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221104092045.17410-2-johan+linaro@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b70d118a6cdc713267494f1e1e366664f2918c2a
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Mon Oct 10 07:44:13 2022 -0400

    arm64: dts: qcom: sdm845-db845c: correct SPI2 pins drive strength
    
    commit 9905370560d9c29adc15f4937c5a0c0dac05f0b4 upstream.
    
    The pin configuration (done with generic pin controller helpers and
    as expressed by bindings) requires children nodes with either:
    1. "pins" property and the actual configuration,
    2. another set of nodes with above point.
    
    The qup_spi2_default pin configuration uses alreaady the second method
    with a "pinmux" child, so configure drive-strength similarly in
    "pinconf".  Otherwise the PIN drive strength would not be applied.
    
    Fixes: 8d23a0040475 ("arm64: dts: qcom: db845c: add Low speed expansion i2c and spi nodes")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221010114417.29859-2-krzysztof.kozlowski@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f42462b9cabfb02f83657ba31d8e85a425f09dd6
Author: Alexander Antonov <alexander.antonov@linux.intel.com>
Date:   Thu Nov 17 12:28:25 2022 +0000

    perf/x86/intel/uncore: Clear attr_update properly
    
    commit 6532783310e2b2f50dc13f46c49aa6546cb6e7a3 upstream.
    
    Current clear_attr_update procedure in pmu_set_mapping() sets attr_update
    field in NULL that is not correct because intel_uncore_type pmu types can
    contain several groups in attr_update field. For example, SPR platform
    already has uncore_alias_group to update and then UPI topology group will
    be added in next patches.
    
    Fix current behavior and clear attr_update group related to mapping only.
    
    Fixes: bb42b3d39781 ("perf/x86/intel/uncore: Expose an Uncore unit to IIO PMON mapping")
    Signed-off-by: Alexander Antonov <alexander.antonov@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221117122833.3103580-4-alexander.antonov@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 254f17db4352061698c1feb6f434f3b6c23321ae
Author: Alexander Antonov <alexander.antonov@linux.intel.com>
Date:   Thu Nov 17 12:28:26 2022 +0000

    perf/x86/intel/uncore: Disable I/O stacks to PMU mapping on ICX-D
    
    commit efe062705d149b20a15498cb999a9edbb8241e6f upstream.
    
    Current implementation of I/O stacks to PMU mapping doesn't support ICX-D.
    Detect ICX-D system to disable mapping.
    
    Fixes: 10337e95e04c ("perf/x86/intel/uncore: Enable I/O stacks to IIO PMON mapping on ICX")
    Signed-off-by: Alexander Antonov <alexander.antonov@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221117122833.3103580-5-alexander.antonov@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 192db0943fadef77b30fcc27c34a7955b286b8f1
Author: Bixuan Cui <cuibixuan@linux.alibaba.com>
Date:   Tue Oct 11 19:33:44 2022 +0800

    jbd2: use the correct print format
    
    commit d87a7b4c77a997d5388566dd511ca8e6b8e8a0a8 upstream.
    
    The print format error was found when using ftrace event:
        <...>-1406 [000] .... 23599442.895823: jbd2_end_commit: dev 252,8 transaction -1866216965 sync 0 head -1866217368
        <...>-1406 [000] .... 23599442.896299: jbd2_start_commit: dev 252,8 transaction -1866216964 sync 0
    
    Use the correct print format for transaction, head and tid.
    
    Fixes: 879c5e6b7cb4 ('jbd2: convert instrumentation from markers to tracepoints')
    Signed-off-by: Bixuan Cui <cuibixuan@linux.alibaba.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Link: https://lore.kernel.org/r/1665488024-95172-1-git-send-email-cuibixuan@linux.alibaba.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14a6e5330a96ad11b2173fd686cf6daeaeb90a4f
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Fri Dec 2 11:59:36 2022 -0500

    ktest.pl minconfig: Unset configs instead of just removing them
    
    commit ef784eebb56425eed6e9b16e7d47e5c00dcf9c38 upstream.
    
    After a full run of a make_min_config test, I noticed there were a lot of
    CONFIGs still enabled that really should not be. Looking at them, I
    noticed they were all defined as "default y". The issue is that the test
    simple removes the config and re-runs make oldconfig, which enables it
    again because it is set to default 'y'. Instead, explicitly disable the
    config with writing "# CONFIG_FOO is not set" to the file to keep it from
    being set again.
    
    With this change, one of my box's minconfigs went from 768 configs set,
    down to 521 configs set.
    
    Link: https://lkml.kernel.org/r/20221202115936.016fce23@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 0a05c769a9de5 ("ktest: Added config_bisect test type")
    Reviewed-by: John 'Warthog9' Hawley (VMware) <warthog9@eaglescrag.net>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 178d7cf89191f04cfec10f20d99d06f966e016b0
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Wed Nov 30 17:54:34 2022 -0500

    kest.pl: Fix grub2 menu handling for rebooting
    
    commit 26df05a8c1420ad3de314fdd407e7fc2058cc7aa upstream.
    
    grub2 has submenus where to use grub-reboot, it requires:
    
      grub-reboot X>Y
    
    where X is the main index and Y is the submenu. Thus if you have:
    
    menuentry 'Debian GNU/Linux' --class debian --class gnu-linux ...
            [...]
    }
    submenu 'Advanced options for Debian GNU/Linux' $menuentry_id_option ...
            menuentry 'Debian GNU/Linux, with Linux 6.0.0-4-amd64' --class debian --class gnu-linux ...
                    [...]
            }
            menuentry 'Debian GNU/Linux, with Linux 6.0.0-4-amd64 (recovery mode)' --class debian --class gnu-linux ...
                    [...]
            }
            menuentry 'Debian GNU/Linux, with Linux test' --class debian --class gnu-linux ...
                    [...]
            }
    
    And wanted to boot to the "Linux test" kernel, you need to run:
    
     # grub-reboot 1>2
    
    As 1 is the second top menu (the submenu) and 2 is the third of the sub
    menu entries.
    
    Have the grub.cfg parsing for grub2 handle such cases.
    
    Cc: stable@vger.kernel.org
    Fixes: a15ba91361d46 ("ktest: Add support for grub2")
    Reviewed-by: John 'Warthog9' Hawley (VMware) <warthog9@eaglescrag.net>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca6536972ea547b630688356e93e71dd8ec79116
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Tue Nov 29 12:50:22 2022 +0530

    soc: qcom: Select REMAP_MMIO for ICC_BWMON driver
    
    commit a84160fbf4f2c8c5ffa588e19ea8f92eabd7ad17 upstream.
    
    ICC_BWMON driver uses REGMAP_MMIO for accessing the hardware registers.
    So select the dependency in Kconfig. Without this, there will be errors
    while building the driver with COMPILE_TEST only:
    
    ERROR: modpost: "__devm_regmap_init_mmio_clk" [drivers/soc/qcom/icc-bwmon.ko] undefined!
    make[1]: *** [scripts/Makefile.modpost:126: Module.symvers] Error 1
    make: *** [Makefile:1944: modpost] Error 2
    
    Cc: <stable@vger.kernel.org> # 6.0
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Fixes: b9c2ae6cac40 ("soc: qcom: icc-bwmon: Add bandwidth monitoring driver")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221129072022.41962-1-manivannan.sadhasivam@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70e71f0dc86f455bc9ad8bd3efeff55c4b0f9931
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Tue Nov 29 12:41:59 2022 +0530

    soc: qcom: Select REMAP_MMIO for LLCC driver
    
    commit 5d2fe2d7b616b8baa18348ead857b504fc2de336 upstream.
    
    LLCC driver uses REGMAP_MMIO for accessing the hardware registers. So
    select the dependency in Kconfig. Without this, there will be errors
    while building the driver with COMPILE_TEST only:
    
    ERROR: modpost: "__devm_regmap_init_mmio_clk" [drivers/soc/qcom/llcc-qcom.ko] undefined!
    make[1]: *** [scripts/Makefile.modpost:126: Module.symvers] Error 1
    make: *** [Makefile:1944: modpost] Error 2
    
    Cc: <stable@vger.kernel.org> # 4.19
    Fixes: a3134fb09e0b ("drivers: soc: Add LLCC driver")
    Reported-by: Borislav Petkov <bp@alien8.de>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221129071201.30024-2-manivannan.sadhasivam@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50950c0176f62e10cb8029b160c689e77df42ae2
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Fri Dec 2 11:18:33 2022 +0900

    arm64: Prohibit instrumentation on arch_stack_walk()
    
    commit 0fbcd8abf3375052cc7627cc53aba6f2eb189fbb upstream.
    
    Mark arch_stack_walk() as noinstr instead of notrace and inline functions
    called from arch_stack_walk() as __always_inline so that user does not
    put any instrumentations on it, because this function can be used from
    return_address() which is used by lockdep.
    
    Without this, if the kernel built with CONFIG_LOCKDEP=y, just probing
    arch_stack_walk() via <tracefs>/kprobe_events will crash the kernel on
    arm64.
    
     # echo p arch_stack_walk >> ${TRACEFS}/kprobe_events
     # echo 1 > ${TRACEFS}/events/kprobes/enable
      kprobes: Failed to recover from reentered kprobes.
      kprobes: Dump kprobe:
      .symbol_name = arch_stack_walk, .offset = 0, .addr = arch_stack_walk+0x0/0x1c0
      ------------[ cut here ]------------
      kernel BUG at arch/arm64/kernel/probes/kprobes.c:241!
      kprobes: Failed to recover from reentered kprobes.
      kprobes: Dump kprobe:
      .symbol_name = arch_stack_walk, .offset = 0, .addr = arch_stack_walk+0x0/0x1c0
      ------------[ cut here ]------------
      kernel BUG at arch/arm64/kernel/probes/kprobes.c:241!
      PREEMPT SMP
      Modules linked in:
      CPU: 0 PID: 17 Comm: migration/0 Tainted: G                 N 6.1.0-rc5+ #6
      Hardware name: linux,dummy-virt (DT)
      Stopper: 0x0 <- 0x0
      pstate: 600003c5 (nZCv DAIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
      pc : kprobe_breakpoint_handler+0x178/0x17c
      lr : kprobe_breakpoint_handler+0x178/0x17c
      sp : ffff8000080d3090
      x29: ffff8000080d3090 x28: ffff0df5845798c0 x27: ffffc4f59057a774
      x26: ffff0df5ffbba770 x25: ffff0df58f420f18 x24: ffff49006f641000
      x23: ffffc4f590579768 x22: ffff0df58f420f18 x21: ffff8000080d31c0
      x20: ffffc4f590579768 x19: ffffc4f590579770 x18: 0000000000000006
      x17: 5f6b636174735f68 x16: 637261203d207264 x15: 64612e202c30203d
      x14: 2074657366666f2e x13: 30633178302f3078 x12: 302b6b6c61775f6b
      x11: 636174735f686372 x10: ffffc4f590dc5bd8 x9 : ffffc4f58eb31958
      x8 : 00000000ffffefff x7 : ffffc4f590dc5bd8 x6 : 80000000fffff000
      x5 : 000000000000bff4 x4 : 0000000000000000 x3 : 0000000000000000
      x2 : 0000000000000000 x1 : ffff0df5845798c0 x0 : 0000000000000064
      Call trace:
      kprobes: Failed to recover from reentered kprobes.
      kprobes: Dump kprobe:
      .symbol_name = arch_stack_walk, .offset = 0, .addr = arch_stack_walk+0x0/0x1c0
      ------------[ cut here ]------------
      kernel BUG at arch/arm64/kernel/probes/kprobes.c:241!
    
    Fixes: 39ef362d2d45 ("arm64: Make return_address() use arch_stack_walk()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/166994751368.439920.3236636557520824664.stgit@devnote3
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15e7433e1dc202516b91e6e2e8c702054d59f30a
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Mon Dec 5 11:08:37 2022 +0100

    arm64: dts: qcom: sc8280xp: fix UFS DMA coherency
    
    commit 0953777640354dc459a22369eea488603d225dd9 upstream.
    
    The SC8280XP UFS controllers are cache coherent and must be marked as
    such in the devicetree to avoid potential data corruption.
    
    Fixes: 152d1faf1e2f ("arm64: dts: qcom: add SC8280XP platform")
    Cc: stable@vger.kernel.org      # 6.0
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20221205100837.29212-3-johan+linaro@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 189c499376d5bc6855e187205b96b45785e4131d
Author: Fan Ni <fan.ni@samsung.com>
Date:   Mon Nov 7 21:22:31 2022 +0000

    cxl/region: Fix memdev reuse check
    
    commit f04facfb993de47e2133b2b842d72b97b1c50162 upstream.
    
    Due to a typo, the check of whether or not a memdev has already been
    used as a target for the region (above code piece) will always be
    skipped. Given a memdev with more than one HDM decoder, an interleaved
    region can be created that maps multiple HPAs to the same DPA. According
    to CXL spec 3.0 8.1.3.8.4, "Aliasing (mapping more than one Host
    Physical Address (HPA) to a single Device Physical Address) is
    forbidden."
    
    Fix this by using existing iterator for memdev reuse check.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 384e624bb211 ("cxl/region: Attach endpoint decoders")
    Signed-off-by: Fan Ni <fan.ni@samsung.com>
    Link: https://lore.kernel.org/r/20221107212153.745993-1-fan.ni@samsung.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fab4655990012268e82f830d04e743905fb9ba3d
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Oct 24 17:23:43 2022 +0200

    media: stv0288: use explicitly signed char
    
    commit 7392134428c92a4cb541bd5c8f4f5c8d2e88364d upstream.
    
    With char becoming unsigned by default, and with `char` alone being
    ambiguous and based on architecture, signed chars need to be marked
    explicitly as such. Use `s8` and `u8` types here, since that's what
    surrounding code does. This fixes:
    
    drivers/media/dvb-frontends/stv0288.c:471 stv0288_set_frontend() warn: assigning (-9) to unsigned variable 'tm'
    drivers/media/dvb-frontends/stv0288.c:471 stv0288_set_frontend() warn: we never enter this loop
    
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: linux-media@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a354a9e3fc3b5475b80395a3015644e26352223f
Author: Tim Huang <tim.huang@amd.com>
Date:   Mon Dec 19 18:32:32 2022 +0800

    drm/amdgpu: skip mes self test after s0i3 resume for MES IP v11.0
    
    commit 8660495a9c5b9afeec4cc006b3b75178f0fb2f10 upstream.
    
    MES is part of gfxoff and MES suspend and resume are skipped for S0i3.
    But the mes_self_test call path is still in the amdgpu_device_ip_late_init.
    it's should also be skipped for s0ix as no hardware re-initialization
    happened.
    
    Besides, mes_self_test will free the BO that triggers a lot of warning
    messages while in the suspend state.
    
    [   81.656085] WARNING: CPU: 2 PID: 1550 at drivers/gpu/drm/amd/amdgpu/amdgpu_object.c:425 amdgpu_bo_free_kernel+0xfc/0x110 [amdgpu]
    [   81.679435] Call Trace:
    [   81.679726]  <TASK>
    [   81.679981]  amdgpu_mes_remove_hw_queue+0x17a/0x230 [amdgpu]
    [   81.680857]  amdgpu_mes_self_test+0x390/0x430 [amdgpu]
    [   81.681665]  mes_v11_0_late_init+0x37/0x50 [amdgpu]
    [   81.682423]  amdgpu_device_ip_late_init+0x53/0x280 [amdgpu]
    [   81.683257]  amdgpu_device_resume+0xae/0x2a0 [amdgpu]
    [   81.684043]  amdgpu_pmops_resume+0x37/0x70 [amdgpu]
    [   81.684818]  pci_pm_resume+0x5c/0xa0
    [   81.685247]  ? pci_pm_thaw+0x90/0x90
    [   81.685658]  dpm_run_callback+0x4e/0x160
    [   81.686110]  device_resume+0xad/0x210
    [   81.686529]  async_resume+0x1e/0x40
    [   81.686931]  async_run_entry_fn+0x33/0x120
    [   81.687405]  process_one_work+0x21d/0x3f0
    [   81.687869]  worker_thread+0x4a/0x3c0
    [   81.688293]  ? process_one_work+0x3f0/0x3f0
    [   81.688777]  kthread+0xff/0x130
    [   81.689157]  ? kthread_complete_and_exit+0x20/0x20
    [   81.689707]  ret_from_fork+0x22/0x30
    [   81.690118]  </TASK>
    [   81.690380] ---[ end trace 0000000000000000 ]---
    
    v2: make the comment clean and use adev->in_s0ix instead of
    adev->suspend
    
    Signed-off-by: Tim Huang <tim.huang@amd.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 6.0, 6.1
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33a3b7fad8273e7bcbef0f456c2070be8adcad45
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Dec 16 11:42:20 2022 -0500

    drm/amdgpu: skip MES for S0ix as well since it's part of GFX
    
    commit afa6646b1c5d3affd541f76bd7476e4b835a9174 upstream.
    
    It's also part of gfxoff.
    
    Cc: stable@vger.kernel.org # 6.0, 6.1
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

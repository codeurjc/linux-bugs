commit ec585727b63d12f9683140fe4b8eb8e564dd3aa0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 11 11:57:56 2023 +0200

    Linux 5.10.190
    
    Link: https://lore.kernel.org/r/20230809103643.799166053@linuxfoundation.org
    Tested-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6fc2fbf89089ecfb8eb9a89a7fc91d444f4fec7
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Sat Aug 5 00:06:43 2023 +0200

    x86/CPU/AMD: Do not leak quotient data after a division by 0
    
    commit 77245f1c3c6495521f6a3af082696ee2f8ce3921 upstream.
    
    Under certain circumstances, an integer division by 0 which faults, can
    leave stale quotient data from a previous division operation on Zen1
    microarchitectures.
    
    Do a dummy division 0/1 before returning from the #DE exception handler
    in order to avoid any leaks of potentially sensitive data.
    
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98b7ab5e8d88694c3407292a728dd3b53ad560cd
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Mon Jul 17 10:28:33 2023 +0800

    ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node
    
    [ Upstream commit ee70b908f77a9d8f689dea986f09e6d7dc481934 ]
    
    Property name "phy-3p0-supply" is used instead of "phy-reg_3p0-supply".
    
    Fixes: 9f30b6b1a957 ("ARM: dts: imx: Add basic dtsi file for imx6sll")
    cc: <stable@vger.kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14f2e2ac731b61895d3e335cc23ee0c192ec429f
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Sep 24 11:14:37 2021 +0200

    ARM: dts: imx6sll: fixup of operating points
    
    [ Upstream commit 1875903019ea6e32e6e544c1631b119e4fd60b20 ]
    
    Make operating point definitions comply with binding
    specifications.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: ee70b908f77a ("ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c928496d2a9e9a5567a6bff04d952e284d9e68
Author: Peng Fan <peng.fan@nxp.com>
Date:   Sun Nov 1 19:29:53 2020 +0800

    ARM: dts: imx: add usb alias
    
    [ Upstream commit 5c8b3b8a182cbc1ccdfcdeea9b25dd2c12a8148f ]
    
    Add usb alias for bootloader searching the controller in correct order.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: ee70b908f77a ("ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0e7123e896acc122edbcb81ee16ea28ef09a492
Author: Paul Fertser <fercerpav@gmail.com>
Date:   Mon Jun 5 10:34:07 2023 +0300

    wifi: mt76: mt7615: do not advertise 5 GHz on first phy of MT7615D (DBDC)
    
    [ Upstream commit 421033deb91521aa6a9255e495cb106741a52275 ]
    
    On DBDC devices the first (internal) phy is only capable of using
    2.4 GHz band, and the 5 GHz band is exposed via a separate phy object,
    so avoid the false advertising.
    
    Reported-by: Rani Hod <rani.hod@gmail.com>
    Closes: https://github.com/openwrt/openwrt/pull/12361
    Fixes: 7660a1bd0c22 ("mt76: mt7615: register ext_phy if DBDC is detected")
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Fertser <fercerpav@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230605073408.8699-1-fercerpav@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37fad83ae5276b007b9e36456be68b80c9649d57
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Fri Nov 20 12:37:18 2020 -0600

    mt76: mt7615: Fix fall-through warnings for Clang
    
    [ Upstream commit f12758f6f929dbcd37abdb1d91d245539eca48f8 ]
    
    In preparation to enable -Wimplicit-fallthrough for Clang, fix a
    warning by replacing a /* fall through */ comment with the new
    pseudo-keyword macro fallthrough; instead of letting the code fall
    through to the next case.
    
    Notice that Clang doesn't recognize /* fall through */ comments as
    implicit fall-through markings.
    
    Link: https://github.com/KSPP/linux/issues/115
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Stable-dep-of: 421033deb915 ("wifi: mt76: mt7615: do not advertise 5 GHz on first phy of MT7615D (DBDC)")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b85c7882fd3cc226a2fe26957a7a9fe27b75f753
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Thu Nov 12 10:56:56 2020 +0100

    mt76: move band capabilities in mt76_phy
    
    [ Upstream commit 48dbce5cb1ba3ce5b2ed3e997bcb1e4697d41b71 ]
    
    This is a preliminary patch to move properly support mt7915 dbdc
    
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Stable-dep-of: 421033deb915 ("wifi: mt76: mt7615: do not advertise 5 GHz on first phy of MT7615D (DBDC)")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 381f7df0f3c3bd7dceb3e2b2b64c2f6247e2ac19
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Thu Jul 13 21:59:37 2023 +0900

    exfat: check if filename entries exceeds max filename length
    
    [ Upstream commit d42334578eba1390859012ebb91e1e556d51db49 ]
    
    exfat_extract_uni_name copies characters from a given file name entry into
    the 'uniname' variable. This variable is actually defined on the stack of
    the exfat_readdir() function. According to the definition of
    the 'exfat_uni_name' type, the file name should be limited 255 characters
    (+ null teminator space), but the exfat_get_uniname_from_ext_entry()
    function can write more characters because there is no check if filename
    entries exceeds max filename length. This patch add the check not to copy
    filename characters when exceeding max filename length.
    
    Cc: stable@vger.kernel.org
    Cc: Yuezhang Mo <Yuezhang.Mo@sony.com>
    Reported-by: Maxim Suhanov <dfirblog@gmail.com>
    Reviewed-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd3bdb9e0d656f760b11d0c638d35d7f7068144d
Author: Yuezhang Mo <Yuezhang.Mo@sony.com>
Date:   Wed Nov 9 13:50:22 2022 +0800

    exfat: support dynamic allocate bh for exfat_entry_set_cache
    
    [ Upstream commit a3ff29a95fde16906304455aa8c0bd84eb770258 ]
    
    In special cases, a file or a directory may occupied more than 19
    directory entries, pre-allocating 3 bh is not enough. Such as
      - Support vendor secondary directory entry in the future.
      - Since file directory entry is damaged, the SecondaryCount
        field is bigger than 18.
    
    So this commit supports dynamic allocation of bh.
    
    Signed-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>
    Reviewed-by: Andy Wu <Andy.Wu@sony.com>
    Reviewed-by: Aoyama Wataru <wataru.aoyama@sony.com>
    Reviewed-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Stable-dep-of: d42334578eba ("exfat: check if filename entries exceeds max filename length")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0d192a4023ef6839f95e320fb1d9accc3ff66e5
Author: Hyeongseok Kim <hyeongseok@gmail.com>
Date:   Mon Mar 22 12:53:36 2021 +0900

    exfat: speed up iterate/lookup by fixing start point of traversing cluster chain
    
    [ Upstream commit c6e2f52e3051e8d898d38840104638ca8bbcdec2 ]
    
    When directory iterate and lookup is called, there's a buggy rewinding
    of start point for traversing cluster chain to the parent directory
    entry's first cluster. This caused repeated cluster chain traversing
    from the first entry of the parent directory that would show worse
    performance if huge amounts of files exist under the parent directory.
    Fix not to rewind, make continue from currently referenced cluster and
    dir entry.
    
    Tested with 50,000 files under single directory / 256GB sdcard,
    with command "time ls -l > /dev/null",
    Before :     0m08.69s real     0m00.27s user     0m05.91s system
    After  :     0m07.01s real     0m00.25s user     0m04.34s system
    
    Signed-off-by: Hyeongseok Kim <hyeongseok@gmail.com>
    Reviewed-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
    Stable-dep-of: d42334578eba ("exfat: check if filename entries exceeds max filename length")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86e4e949ea815dbd517c8f96fe06a1f2b770085a
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Thu Jul 13 16:57:39 2023 +0200

    PM: sleep: wakeirq: fix wake irq arming
    
    [ Upstream commit 8527beb12087238d4387607597b4020bc393c4b4 ]
    
    The decision whether to enable a wake irq during suspend can not be done
    based on the runtime PM state directly as a driver may use wake irqs
    without implementing runtime PM. Such drivers specifically leave the
    state set to the default 'suspended' and the wake irq is thus never
    enabled at suspend.
    
    Add a new wake irq flag to track whether a dedicated wake irq has been
    enabled at runtime suspend and therefore must not be enabled at system
    suspend.
    
    Note that pm_runtime_enabled() can not be used as runtime PM is always
    disabled during late suspend.
    
    Fixes: 69728051f5bf ("PM / wakeirq: Fix unbalanced IRQ enable for wakeirq")
    Cc: 4.16+ <stable@vger.kernel.org> # 4.16+
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a320469add4e635545b26f82c94fea8aad5f618
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Mon Oct 25 15:01:53 2021 +0800

    PM / wakeirq: support enabling wake-up irq after runtime_suspend called
    
    [ Upstream commit 259714100d98b50bf04d36a21bf50ca8b829fc11 ]
    
    When the dedicated wake IRQ is level trigger, and it uses the
    device's low-power status as the wakeup source, that means if the
    device is not in low-power state, the wake IRQ will be triggered
    if enabled; For this case, need enable the wake IRQ after running
    the device's ->runtime_suspend() which make it enter low-power state.
    
    e.g.
    Assume the wake IRQ is a low level trigger type, and the wakeup
    signal comes from the low-power status of the device.
    The wakeup signal is low level at running time (0), and becomes
    high level when the device enters low-power state (runtime_suspend
    (1) is called), a wakeup event at (2) make the device exit low-power
    state, then the wakeup signal also becomes low level.
    
                    ------------------
                   |           ^     ^|
    ----------------           |     | --------------
     |<---(0)--->|<--(1)--|   (3)   (2)    (4)
    
    if enable the wake IRQ before running runtime_suspend during (0),
    a wake IRQ will arise, it causes resume immediately;
    it works if enable wake IRQ ( e.g. at (3) or (4)) after running
    ->runtime_suspend().
    
    This patch introduces a new status WAKE_IRQ_DEDICATED_REVERSE to
    optionally support enabling wake IRQ after running ->runtime_suspend().
    
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Stable-dep-of: 8527beb12087 ("PM: sleep: wakeirq: fix wake irq arming")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48d1d0ce0782f995fda678508fdae35c5e9593f0
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Jul 5 14:30:11 2023 +0200

    soundwire: fix enumeration completion
    
    [ Upstream commit c40d6b3249b11d60e09d81530588f56233d9aa44 ]
    
    The soundwire subsystem uses two completion structures that allow
    drivers to wait for soundwire device to become enumerated on the bus and
    initialised by their drivers, respectively.
    
    The code implementing the signalling is currently broken as it does not
    signal all current and future waiters and also uses the wrong
    reinitialisation function, which can potentially lead to memory
    corruption if there are still waiters on the queue.
    
    Not signalling future waiters specifically breaks sound card probe
    deferrals as codec drivers can not tell that the soundwire device is
    already attached when being reprobed. Some codec runtime PM
    implementations suffer from similar problems as waiting for enumeration
    during resume can also timeout despite the device already having been
    enumerated.
    
    Fixes: fb9469e54fa7 ("soundwire: bus: fix race condition with enumeration_complete signaling")
    Fixes: a90def068127 ("soundwire: bus: fix race condition with initialization_complete signaling")
    Cc: stable@vger.kernel.org      # 5.7
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Cc: Rander Wang <rander.wang@linux.intel.com>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20230705123018.30903-2-johan+linaro@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d949774e7c1a93980db4961b898313ec09744c3
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Apr 20 10:32:41 2022 +0800

    soundwire: bus: pm_runtime_request_resume on peripheral attachment
    
    [ Upstream commit e557bca49b812908f380c56b5b4b2f273848b676 ]
    
    In typical use cases, the peripheral becomes pm_runtime active as a
    result of the ALSA/ASoC framework starting up a DAI. The parent/child
    hierarchy guarantees that the manager device will be fully resumed
    beforehand.
    
    There is however a corner case where the manager device may become
    pm_runtime active, but without ALSA/ASoC requesting any functionality
    from the peripherals. In this case, the hardware peripheral device
    will report as ATTACHED and its initialization routine will be
    executed. If this initialization routine initiates any sort of
    deferred processing, there is a possibility that the manager could
    suspend without the peripheral suspend sequence being invoked: from
    the pm_runtime framework perspective, the peripheral is *already*
    suspended.
    
    To avoid such disconnects between hardware state and pm_runtime state,
    this patch adds an asynchronous pm_request_resume() upon successful
    attach/initialization which will result in the proper resume/suspend
    sequence to be followed on the peripheral side.
    
    BugLink: https://github.com/thesofproject/linux/issues/3459
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220420023241.14335-4-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Stable-dep-of: c40d6b3249b1 ("soundwire: fix enumeration completion")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 662735bc11279f474c8abfd6c8d4faeddd08f359
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Jan 26 16:54:02 2021 +0800

    soundwire: bus: add better dev_dbg to track complete() calls
    
    [ Upstream commit f1b690261247c9895f7a4b05d14a4026739134eb ]
    
    Add a dev_dbg() log for both enumeration and initialization completion
    to better track suspend-resume issues.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Reviewed-by: Chao Song <chao.song@intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20210126085402.4264-1-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Stable-dep-of: c40d6b3249b1 ("soundwire: fix enumeration completion")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 173d9c7090db0f908f4851304f2949f1e8c4d76a
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Jul 21 15:33:52 2023 -0700

    selftests/rseq: Play nice with binaries statically linked against glibc 2.35+
    
    [ Upstream commit 3bcbc20942db5d738221cca31a928efc09827069 ]
    
    To allow running rseq and KVM's rseq selftests as statically linked
    binaries, initialize the various "trampoline" pointers to point directly
    at the expect glibc symbols, and skip the dlysm() lookups if the rseq
    size is non-zero, i.e. the binary is statically linked *and* the libc
    registered its own rseq.
    
    Define weak versions of the symbols so as not to break linking against
    libc versions that don't support rseq in any capacity.
    
    The KVM selftests in particular are often statically linked so that they
    can be run on targets with very limited runtime environments, i.e. test
    machines.
    
    Fixes: 233e667e1ae3 ("selftests/rseq: Uplift rseq selftests for compatibility with glibc-2.35")
    Cc: Aaron Lewis <aaronlewis@google.com>
    Cc: kvm@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230721223352.2333911-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c08de20e70414091994aefa4c62f2bc500705c2b
Author: Michael Jeanson <mjeanson@efficios.com>
Date:   Tue Jun 14 11:48:30 2022 -0400

    selftests/rseq: check if libc rseq support is registered
    
    [ Upstream commit d1a997ba4c1bf65497d956aea90de42a6398f73a ]
    
    When checking for libc rseq support in the library constructor, don't
    only depend on the symbols presence, check that the registration was
    completed.
    
    This targets a scenario where the libc has rseq support but it is not
    wired for the current architecture in 'bits/rseq.h', we want to fallback
    to our internal registration mechanism.
    
    Signed-off-by: Michael Jeanson <mjeanson@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Link: https://lore.kernel.org/r/20220614154830.1367382-4-mjeanson@efficios.com
    Stable-dep-of: 3bcbc20942db ("selftests/rseq: Play nice with binaries statically linked against glibc 2.35+")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbb6657037d4d396a320b945e14c5db721bc1c3a
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Mon Jul 24 23:43:20 2023 +0530

    powerpc/mm/altmap: Fix altmap boundary check
    
    [ Upstream commit 6722b25712054c0f903b839b8f5088438dd04df3 ]
    
    altmap->free includes the entire free space from which altmap blocks
    can be allocated. So when checking whether the kernel is doing altmap
    block free, compute the boundary correctly, otherwise memory hotunplug
    can fail.
    
    Fixes: 9ef34630a461 ("powerpc/mm: Fallback to RAM if the altmap is unusable")
    Signed-off-by: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230724181320.471386-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f09d67d390647f83f8f9d26382b0daa43756e6f
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Jul 19 23:55:01 2023 +0200

    mtd: rawnand: fsl_upm: Fix an off-by one test in fun_exec_op()
    
    [ Upstream commit c6abce60338aa2080973cd95be0aedad528bb41f ]
    
    'op-cs' is copied in 'fun->mchip_number' which is used to access the
    'mchip_offsets' and the 'rnb_gpio' arrays.
    These arrays have NAND_MAX_CHIPS elements, so the index must be below this
    limit.
    
    Fix the sanity check in order to avoid the NAND_MAX_CHIPS value. This
    would lead to out-of-bound accesses.
    
    Fixes: 54309d657767 ("mtd: rawnand: fsl_upm: Implement exec_op()")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/cd01cba1c7eda58bdabaae174c78c067325803d2.1689803636.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 027710952b539cb09350e0482e27d072a24416bf
Author: Roger Quadros <rogerq@kernel.org>
Date:   Sun Jun 25 00:10:21 2023 +0530

    mtd: rawnand: omap_elm: Fix incorrect type in assignment
    
    [ Upstream commit d8403b9eeee66d5dd81ecb9445800b108c267ce3 ]
    
    Once the ECC word endianness is converted to BE32, we force cast it
    to u32 so we can use elm_write_reg() which in turn uses writel().
    
    Fixes below sparse warnings:
    
       drivers/mtd/nand/raw/omap_elm.c:180:37: sparse:     expected unsigned int [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:180:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:185:37: sparse:     expected unsigned int [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:185:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:190:37: sparse:     expected unsigned int [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:190:37: sparse:     got restricted __be32 [usertype]
    >> drivers/mtd/nand/raw/omap_elm.c:200:40: sparse: sparse: restricted __be32 degrades to integer
       drivers/mtd/nand/raw/omap_elm.c:206:39: sparse: sparse: restricted __be32 degrades to integer
       drivers/mtd/nand/raw/omap_elm.c:210:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:210:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:213:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:213:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:216:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:216:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:219:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:219:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:222:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:222:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:225:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:225:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:228:39: sparse: sparse: restricted __be32 degrades to integer
    
    Fixes: bf22433575ef ("mtd: devices: elm: Add support for ELM error correction")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202306212211.WDXokuWh-lkp@intel.com/
    Signed-off-by: Roger Quadros <rogerq@kernel.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230624184021.7740-1-rogerq@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d328849fb63bfce7695245b932bc5f295bea5eb6
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jun 13 12:25:52 2023 +0200

    ext2: Drop fragment support
    
    commit 404615d7f1dcd4cca200e9a7a9df3a1dcae1dd62 upstream.
    
    Ext2 has fields in superblock reserved for subblock allocation support.
    However that never landed. Drop the many years dead code.
    
    Reported-by: syzbot+af5e10f73dbff48f70af@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e4e87ec56aa6d008c64eab31b340a7c452b26cc
Author: Jan Kara <jack@suse.cz>
Date:   Thu Jun 15 13:38:48 2023 +0200

    fs: Protect reconfiguration of sb read-write from racing writes
    
    commit c541dce86c537714b6761a79a969c1623dfa222b upstream.
    
    The reconfigure / remount code takes a lot of effort to protect
    filesystem's reconfiguration code from racing writes on remounting
    read-only. However during remounting read-only filesystem to read-write
    mode userspace writes can start immediately once we clear SB_RDONLY
    flag. This is inconvenient for example for ext4 because we need to do
    some writes to the filesystem (such as preparation of quota files)
    before we can take userspace writes so we are clearing SB_RDONLY flag
    before we are fully ready to accept userpace writes and syzbot has found
    a way to exploit this [1]. Also as far as I'm reading the code
    the filesystem remount code was protected from racing writes in the
    legacy mount path by the mount's MNT_READONLY flag so this is relatively
    new problem. It is actually fairly easy to protect remount read-write
    from racing writes using sb->s_readonly_remount flag so let's just do
    that instead of having to workaround these races in the filesystem code.
    
    [1] https://lore.kernel.org/all/00000000000006a0df05f6667499@google.com/T/
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230615113848.8439-1-jack@suse.cz>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec0d0be41721aca683c5606354a58ee2c687e3f8
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Jul 12 10:15:10 2023 -0400

    net: usbnet: Fix WARNING in usbnet_start_xmit/usb_submit_urb
    
    commit 5e1627cb43ddf1b24b92eb26f8d958a3f5676ccb upstream.
    
    The syzbot fuzzer identified a problem in the usbnet driver:
    
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 0 PID: 754 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 0 PID: 754 Comm: kworker/0:2 Not tainted 6.4.0-rc7-syzkaller-00014-g692b7dc87ca6 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/27/2023
    Workqueue: mld mld_ifc_work
    RIP: 0010:usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Code: 7c 24 18 e8 2c b4 5b fb 48 8b 7c 24 18 e8 42 07 f0 fe 41 89 d8 44 89 e1 4c 89 ea 48 89 c6 48 c7 c7 a0 c9 fc 8a e8 5a 6f 23 fb <0f> 0b e9 58 f8 ff ff e8 fe b3 5b fb 48 81 c5 c0 05 00 00 e9 84 f7
    RSP: 0018:ffffc9000463f568 EFLAGS: 00010086
    RAX: 0000000000000000 RBX: 0000000000000001 RCX: 0000000000000000
    RDX: ffff88801eb28000 RSI: ffffffff814c03b7 RDI: 0000000000000001
    RBP: ffff8881443b7190 R08: 0000000000000001 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000003
    R13: ffff88802a77cb18 R14: 0000000000000003 R15: ffff888018262500
    FS:  0000000000000000(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000556a99c15a18 CR3: 0000000028c71000 CR4: 0000000000350ef0
    Call Trace:
     <TASK>
     usbnet_start_xmit+0xfe5/0x2190 drivers/net/usb/usbnet.c:1453
     __netdev_start_xmit include/linux/netdevice.h:4918 [inline]
     netdev_start_xmit include/linux/netdevice.h:4932 [inline]
     xmit_one net/core/dev.c:3578 [inline]
     dev_hard_start_xmit+0x187/0x700 net/core/dev.c:3594
    ...
    
    This bug is caused by the fact that usbnet trusts the bulk endpoint
    addresses its probe routine receives in the driver_info structure, and
    it does not check to see that these endpoints actually exist and have
    the expected type and directions.
    
    The fix is simply to add such a check.
    
    Reported-and-tested-by: syzbot+63ee658b9a100ffadbe2@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/linux-usb/000000000000a56e9105d0cec021@google.com/
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/ea152b6d-44df-4f8a-95c6-4db51143dcc1@rowland.harvard.edu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06f87c96216bc5cd1094c23492274f77f1d5dd3b
Author: Sungwoo Kim <iam@sung-woo.kim>
Date:   Wed May 31 01:39:56 2023 -0400

    Bluetooth: L2CAP: Fix use-after-free in l2cap_sock_ready_cb
    
    commit 1728137b33c00d5a2b5110ed7aafb42e7c32e4a1 upstream.
    
    l2cap_sock_release(sk) frees sk. However, sk's children are still alive
    and point to the already free'd sk's address.
    To fix this, l2cap_sock_release(sk) also cleans sk's children.
    
    ==================================================================
    BUG: KASAN: use-after-free in l2cap_sock_ready_cb+0xb7/0x100 net/bluetooth/l2cap_sock.c:1650
    Read of size 8 at addr ffff888104617aa8 by task kworker/u3:0/276
    
    CPU: 0 PID: 276 Comm: kworker/u3:0 Not tainted 6.2.0-00001-gef397bd4d5fb-dirty #59
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
    Workqueue: hci2 hci_rx_work
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x72/0x95 lib/dump_stack.c:106
     print_address_description mm/kasan/report.c:306 [inline]
     print_report+0x175/0x478 mm/kasan/report.c:417
     kasan_report+0xb1/0x130 mm/kasan/report.c:517
     l2cap_sock_ready_cb+0xb7/0x100 net/bluetooth/l2cap_sock.c:1650
     l2cap_chan_ready+0x10e/0x1e0 net/bluetooth/l2cap_core.c:1386
     l2cap_config_req+0x753/0x9f0 net/bluetooth/l2cap_core.c:4480
     l2cap_bredr_sig_cmd net/bluetooth/l2cap_core.c:5739 [inline]
     l2cap_sig_channel net/bluetooth/l2cap_core.c:6509 [inline]
     l2cap_recv_frame+0xe2e/0x43c0 net/bluetooth/l2cap_core.c:7788
     l2cap_recv_acldata+0x6ed/0x7e0 net/bluetooth/l2cap_core.c:8506
     hci_acldata_packet net/bluetooth/hci_core.c:3813 [inline]
     hci_rx_work+0x66e/0xbc0 net/bluetooth/hci_core.c:4048
     process_one_work+0x4ea/0x8e0 kernel/workqueue.c:2289
     worker_thread+0x364/0x8e0 kernel/workqueue.c:2436
     kthread+0x1b9/0x200 kernel/kthread.c:376
     ret_from_fork+0x2c/0x50 arch/x86/entry/entry_64.S:308
     </TASK>
    
    Allocated by task 288:
     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45
     kasan_set_track+0x25/0x30 mm/kasan/common.c:52
     ____kasan_kmalloc mm/kasan/common.c:374 [inline]
     __kasan_kmalloc+0x82/0x90 mm/kasan/common.c:383
     kasan_kmalloc include/linux/kasan.h:211 [inline]
     __do_kmalloc_node mm/slab_common.c:968 [inline]
     __kmalloc+0x5a/0x140 mm/slab_common.c:981
     kmalloc include/linux/slab.h:584 [inline]
     sk_prot_alloc+0x113/0x1f0 net/core/sock.c:2040
     sk_alloc+0x36/0x3c0 net/core/sock.c:2093
     l2cap_sock_alloc.constprop.0+0x39/0x1c0 net/bluetooth/l2cap_sock.c:1852
     l2cap_sock_create+0x10d/0x220 net/bluetooth/l2cap_sock.c:1898
     bt_sock_create+0x183/0x290 net/bluetooth/af_bluetooth.c:132
     __sock_create+0x226/0x380 net/socket.c:1518
     sock_create net/socket.c:1569 [inline]
     __sys_socket_create net/socket.c:1606 [inline]
     __sys_socket_create net/socket.c:1591 [inline]
     __sys_socket+0x112/0x200 net/socket.c:1639
     __do_sys_socket net/socket.c:1652 [inline]
     __se_sys_socket net/socket.c:1650 [inline]
     __x64_sys_socket+0x40/0x50 net/socket.c:1650
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3f/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Freed by task 288:
     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45
     kasan_set_track+0x25/0x30 mm/kasan/common.c:52
     kasan_save_free_info+0x2e/0x50 mm/kasan/generic.c:523
     ____kasan_slab_free mm/kasan/common.c:236 [inline]
     ____kasan_slab_free mm/kasan/common.c:200 [inline]
     __kasan_slab_free+0x10a/0x190 mm/kasan/common.c:244
     kasan_slab_free include/linux/kasan.h:177 [inline]
     slab_free_hook mm/slub.c:1781 [inline]
     slab_free_freelist_hook mm/slub.c:1807 [inline]
     slab_free mm/slub.c:3787 [inline]
     __kmem_cache_free+0x88/0x1f0 mm/slub.c:3800
     sk_prot_free net/core/sock.c:2076 [inline]
     __sk_destruct+0x347/0x430 net/core/sock.c:2168
     sk_destruct+0x9c/0xb0 net/core/sock.c:2183
     __sk_free+0x82/0x220 net/core/sock.c:2194
     sk_free+0x7c/0xa0 net/core/sock.c:2205
     sock_put include/net/sock.h:1991 [inline]
     l2cap_sock_kill+0x256/0x2b0 net/bluetooth/l2cap_sock.c:1257
     l2cap_sock_release+0x1a7/0x220 net/bluetooth/l2cap_sock.c:1428
     __sock_release+0x80/0x150 net/socket.c:650
     sock_close+0x19/0x30 net/socket.c:1368
     __fput+0x17a/0x5c0 fs/file_table.c:320
     task_work_run+0x132/0x1c0 kernel/task_work.c:179
     resume_user_mode_work include/linux/resume_user_mode.h:49 [inline]
     exit_to_user_mode_loop kernel/entry/common.c:171 [inline]
     exit_to_user_mode_prepare+0x113/0x120 kernel/entry/common.c:203
     __syscall_exit_to_user_mode_work kernel/entry/common.c:285 [inline]
     syscall_exit_to_user_mode+0x21/0x50 kernel/entry/common.c:296
     do_syscall_64+0x4c/0x90 arch/x86/entry/common.c:86
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    The buggy address belongs to the object at ffff888104617800
     which belongs to the cache kmalloc-1k of size 1024
    The buggy address is located 680 bytes inside of
     1024-byte region [ffff888104617800, ffff888104617c00)
    
    The buggy address belongs to the physical page:
    page:00000000dbca6a80 refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff888104614000 pfn:0x104614
    head:00000000dbca6a80 order:2 compound_mapcount:0 subpages_mapcount:0 compound_pincount:0
    flags: 0x200000000010200(slab|head|node=0|zone=2)
    raw: 0200000000010200 ffff888100041dc0 ffffea0004212c10 ffffea0004234b10
    raw: ffff888104614000 0000000000080002 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888104617980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888104617a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff888104617a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                      ^
     ffff888104617b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888104617b80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Ack: This bug is found by FuzzBT with a modified Syzkaller. Other
    contributors are Ruoyu Wu and Hui Peng.
    Signed-off-by: Sungwoo Kim <iam@sung-woo.kim>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f740bc696d4617f8ee44565e8ac0d36278a1e91
Author: Prince Kumar Maurya <princekumarmaurya06@gmail.com>
Date:   Tue May 30 18:31:41 2023 -0700

    fs/sysv: Null check to prevent null-ptr-deref bug
    
    commit ea2b62f305893992156a798f665847e0663c9f41 upstream.
    
    sb_getblk(inode->i_sb, parent) return a null ptr and taking lock on
    that leads to the null-ptr-deref bug.
    
    Reported-by: syzbot+aad58150cbc64ba41bdc@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=aad58150cbc64ba41bdc
    Signed-off-by: Prince Kumar Maurya <princekumarmaurya06@gmail.com>
    Message-Id: <20230531013141.19487-1-princekumarmaurya06@gmail.com>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 426656e8dd03ded47112e5e1488f0975a1f0d806
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri Jul 8 17:09:52 2022 -0700

    tracing: Fix sleeping while atomic in kdb ftdump
    
    commit 495fcec8648cdfb483b5b9ab310f3839f07cb3b8 upstream.
    
    If you drop into kdb and type "ftdump" you'll get a sleeping while
    atomic warning from memory allocation in trace_find_next_entry().
    
    This appears to have been caused by commit ff895103a84a ("tracing:
    Save off entry when peeking at next entry"), which added the
    allocation in that path. The problematic commit was already fixed by
    commit 8e99cf91b99b ("tracing: Do not allocate buffer in
    trace_find_next_entry() in atomic") but that fix missed the kdb case.
    
    The fix here is easy: just move the assignment of the static buffer to
    the place where it should have been to begin with:
    trace_init_global_iter(). That function is called in two places, once
    is right before the assignment of the static buffer added by the
    previous fix and once is in kdb.
    
    Note that it appears that there's a second static buffer that we need
    to assign that was added in commit efbbdaa22bb7 ("tracing: Show real
    address for trace event arguments"), so we'll move that too.
    
    Link: https://lkml.kernel.org/r/20220708170919.1.I75844e5038d9425add2ad853a608cb44bb39df40@changeid
    
    Fixes: ff895103a84a ("tracing: Save off entry when peeking at next entry")
    Fixes: efbbdaa22bb7 ("tracing: Show real address for trace event arguments")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f86da9abe31636a43e64944a6a3d00fb2652c61
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 3 11:35:53 2023 -0700

    file: reinstate f_pos locking optimization for regular files
    
    commit 797964253d358cf8d705614dda394dbe30120223 upstream.
    
    In commit 20ea1e7d13c1 ("file: always lock position for
    FMODE_ATOMIC_POS") we ended up always taking the file pos lock, because
    pidfd_getfd() could get a reference to the file even when it didn't have
    an elevated file count due to threading of other sharing cases.
    
    But Mateusz Guzik reports that the extra locking is actually measurable,
    so let's re-introduce the optimization, and only force the locking for
    directory traversal.
    
    Directories need the lock for correctness reasons, while regular files
    only need it for "POSIX semantics".  Since pidfd_getfd() is about
    debuggers etc special things that are _way_ outside of POSIX, we can
    relax the rules for that case.
    
    Reported-by: Mateusz Guzik <mjguzik@gmail.com>
    Cc: Christian Brauner <brauner@kernel.org>
    Link: https://lore.kernel.org/linux-fsdevel/20230803095311.ijpvhx3fyrbkasul@f/
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d39971d902d067b4dc366981b75b17c8c57ed5d1
Author: Guchun Chen <guchun.chen@amd.com>
Date:   Mon Jul 24 10:42:29 2023 +0800

    drm/ttm: check null pointer before accessing when swapping
    
    commit 2dedcf414bb01b8d966eb445db1d181d92304fb2 upstream.
    
    Add a check to avoid null pointer dereference as below:
    
    [   90.002283] general protection fault, probably for non-canonical
    address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN NOPTI
    [   90.002292] KASAN: null-ptr-deref in range
    [0x0000000000000000-0x0000000000000007]
    [   90.002346]  ? exc_general_protection+0x159/0x240
    [   90.002352]  ? asm_exc_general_protection+0x26/0x30
    [   90.002357]  ? ttm_bo_evict_swapout_allowable+0x322/0x5e0 [ttm]
    [   90.002365]  ? ttm_bo_evict_swapout_allowable+0x42e/0x5e0 [ttm]
    [   90.002373]  ttm_bo_swapout+0x134/0x7f0 [ttm]
    [   90.002383]  ? __pfx_ttm_bo_swapout+0x10/0x10 [ttm]
    [   90.002391]  ? lock_acquire+0x44d/0x4f0
    [   90.002398]  ? ttm_device_swapout+0xa5/0x260 [ttm]
    [   90.002412]  ? lock_acquired+0x355/0xa00
    [   90.002416]  ? do_raw_spin_trylock+0xb6/0x190
    [   90.002421]  ? __pfx_lock_acquired+0x10/0x10
    [   90.002426]  ? ttm_global_swapout+0x25/0x210 [ttm]
    [   90.002442]  ttm_device_swapout+0x198/0x260 [ttm]
    [   90.002456]  ? __pfx_ttm_device_swapout+0x10/0x10 [ttm]
    [   90.002472]  ttm_global_swapout+0x75/0x210 [ttm]
    [   90.002486]  ttm_tt_populate+0x187/0x3f0 [ttm]
    [   90.002501]  ttm_bo_handle_move_mem+0x437/0x590 [ttm]
    [   90.002517]  ttm_bo_validate+0x275/0x430 [ttm]
    [   90.002530]  ? __pfx_ttm_bo_validate+0x10/0x10 [ttm]
    [   90.002544]  ? kasan_save_stack+0x33/0x60
    [   90.002550]  ? kasan_set_track+0x25/0x30
    [   90.002554]  ? __kasan_kmalloc+0x8f/0xa0
    [   90.002558]  ? amdgpu_gtt_mgr_new+0x81/0x420 [amdgpu]
    [   90.003023]  ? ttm_resource_alloc+0xf6/0x220 [ttm]
    [   90.003038]  amdgpu_bo_pin_restricted+0x2dd/0x8b0 [amdgpu]
    [   90.003210]  ? __x64_sys_ioctl+0x131/0x1a0
    [   90.003210]  ? do_syscall_64+0x60/0x90
    
    Fixes: a2848d08742c ("drm/ttm: never consider pinned BOs for eviction&swap")
    Tested-by: Mikhail Gavrilov <mikhail.v.gavrilov@gmail.com>
    Signed-off-by: Guchun Chen <guchun.chen@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20230724024229.1118444-1-guchun.chen@amd.com
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9c78b91c7834de6e4ae49392c3177608bcd47ab
Author: Aleksa Sarai <cyphar@cyphar.com>
Date:   Sun Aug 6 02:11:58 2023 +1000

    open: make RESOLVE_CACHED correctly test for O_TMPFILE
    
    commit a0fc452a5d7fed986205539259df1d60546f536c upstream.
    
    O_TMPFILE is actually __O_TMPFILE|O_DIRECTORY. This means that the old
    fast-path check for RESOLVE_CACHED would reject all users passing
    O_DIRECTORY with -EAGAIN, when in fact the intended test was to check
    for __O_TMPFILE.
    
    Cc: stable@vger.kernel.org # v5.12+
    Fixes: 99668f618062 ("fs: expose LOOKUP_CACHED through openat2() RESOLVE_CACHED")
    Signed-off-by: Aleksa Sarai <cyphar@cyphar.com>
    Message-Id: <20230806-resolve_cached-o_tmpfile-v1-1-7ba16308465e@cyphar.com>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3048cb0dc0cc9dc74ed93690dffef00733bcad5b
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Tue Jul 25 10:42:06 2023 +0200

    bpf: Disable preemption in bpf_event_output
    
    commit d62cc390c2e99ae267ffe4b8d7e2e08b6c758c32 upstream.
    
    We received report [1] of kernel crash, which is caused by
    using nesting protection without disabled preemption.
    
    The bpf_event_output can be called by programs executed by
    bpf_prog_run_array_cg function that disabled migration but
    keeps preemption enabled.
    
    This can cause task to be preempted by another one inside the
    nesting protection and lead eventually to two tasks using same
    perf_sample_data buffer and cause crashes like:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000001
      #PF: supervisor instruction fetch in kernel mode
      #PF: error_code(0x0010) - not-present page
      ...
      ? perf_output_sample+0x12a/0x9a0
      ? finish_task_switch.isra.0+0x81/0x280
      ? perf_event_output+0x66/0xa0
      ? bpf_event_output+0x13a/0x190
      ? bpf_event_output_data+0x22/0x40
      ? bpf_prog_dfc84bbde731b257_cil_sock4_connect+0x40a/0xacb
      ? xa_load+0x87/0xe0
      ? __cgroup_bpf_run_filter_sock_addr+0xc1/0x1a0
      ? release_sock+0x3e/0x90
      ? sk_setsockopt+0x1a1/0x12f0
      ? udp_pre_connect+0x36/0x50
      ? inet_dgram_connect+0x93/0xa0
      ? __sys_connect+0xb4/0xe0
      ? udp_setsockopt+0x27/0x40
      ? __pfx_udp_push_pending_frames+0x10/0x10
      ? __sys_setsockopt+0xdf/0x1a0
      ? __x64_sys_connect+0xf/0x20
      ? do_syscall_64+0x3a/0x90
      ? entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Fixing this by disabling preemption in bpf_event_output.
    
    [1] https://github.com/cilium/cilium/issues/26756
    Cc: stable@vger.kernel.org
    Reported-by: Oleg "livelace" Popov <o.popov@livelace.ru>
    Closes: https://github.com/cilium/cilium/issues/26756
    Fixes: 2a916f2f546c ("bpf: Use migrate_disable/enable in array macros and cgroup/lirc code.")
    Acked-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Link: https://lore.kernel.org/r/20230725084206.580930-3-jolsa@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33a339e717be2c88b7ad11375165168d5b40e38e
Author: Laszlo Ersek <lersek@redhat.com>
Date:   Mon Jul 31 18:42:37 2023 +0200

    net: tap_open(): set sk_uid from current_fsuid()
    
    commit 5c9241f3ceab3257abe2923a59950db0dc8bb737 upstream.
    
    Commit 66b2c338adce initializes the "sk_uid" field in the protocol socket
    (struct sock) from the "/dev/tapX" device node's owner UID. Per original
    commit 86741ec25462 ("net: core: Add a UID field to struct sock.",
    2016-11-04), that's wrong: the idea is to cache the UID of the userspace
    process that creates the socket. Commit 86741ec25462 mentions socket() and
    accept(); with "tap", the action that creates the socket is
    open("/dev/tapX").
    
    Therefore the device node's owner UID is irrelevant. In most cases,
    "/dev/tapX" will be owned by root, so in practice, commit 66b2c338adce has
    no observable effect:
    
    - before, "sk_uid" would be zero, due to undefined behavior
      (CVE-2023-1076),
    
    - after, "sk_uid" would be zero, due to "/dev/tapX" being owned by root.
    
    What matters is the (fs)UID of the process performing the open(), so cache
    that in "sk_uid".
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Pietro Borrello <borrello@diag.uniroma1.it>
    Cc: netdev@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: 66b2c338adce ("tap: tap_open(): correctly initialize socket uid")
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2173435
    Signed-off-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ea23f1cb67e4468db7ff651627892c9217fec24
Author: Laszlo Ersek <lersek@redhat.com>
Date:   Mon Jul 31 18:42:36 2023 +0200

    net: tun_chr_open(): set sk_uid from current_fsuid()
    
    commit 9bc3047374d5bec163e83e743709e23753376f0c upstream.
    
    Commit a096ccca6e50 initializes the "sk_uid" field in the protocol socket
    (struct sock) from the "/dev/net/tun" device node's owner UID. Per
    original commit 86741ec25462 ("net: core: Add a UID field to struct
    sock.", 2016-11-04), that's wrong: the idea is to cache the UID of the
    userspace process that creates the socket. Commit 86741ec25462 mentions
    socket() and accept(); with "tun", the action that creates the socket is
    open("/dev/net/tun").
    
    Therefore the device node's owner UID is irrelevant. In most cases,
    "/dev/net/tun" will be owned by root, so in practice, commit a096ccca6e50
    has no observable effect:
    
    - before, "sk_uid" would be zero, due to undefined behavior
      (CVE-2023-1076),
    
    - after, "sk_uid" would be zero, due to "/dev/net/tun" being owned by root.
    
    What matters is the (fs)UID of the process performing the open(), so cache
    that in "sk_uid".
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Pietro Borrello <borrello@diag.uniroma1.it>
    Cc: netdev@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: a096ccca6e50 ("tun: tun_chr_open(): correctly initialize socket uid")
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2173435
    Signed-off-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d104bfd41a9b3dc524f6d05600003b3db09fdef
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Tue Jul 11 15:44:30 2023 -0500

    arm64: dts: stratix10: fix incorrect I2C property for SCL signal
    
    commit db66795f61354c373ecdadbdae1ed253a96c47cb upstream.
    
    The correct dts property for the SCL falling time is
    "i2c-scl-falling-time-ns".
    
    Fixes: c8da1d15b8a4 ("arm64: dts: stratix10: i2c clock running out of spec")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8625802a1ba82062d0c0321a7aa6cc89f8ac4af2
Author: Arseniy Krasnov <AVKrasnov@sberdevices.ru>
Date:   Wed Jul 5 09:52:10 2023 +0300

    mtd: rawnand: meson: fix OOB available bytes for ECC
    
    commit 7e6b04f9238eab0f684fafd158c1f32ea65b9eaa upstream.
    
    It is incorrect to calculate number of OOB bytes for ECC engine using
    some "already known" ECC step size (1024 bytes here). Number of such
    bytes for ECC engine must be whole OOB except 2 bytes for bad block
    marker, while proper ECC step size and strength will be selected by
    ECC logic.
    
    Fixes: 8fae856c5350 ("mtd: rawnand: meson: add support for Amlogic NAND flash controller")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Arseniy Krasnov <AVKrasnov@sberdevices.ru>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230705065211.293500-1-AVKrasnov@sberdevices.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82dc2bffeabc4fb40e911ca708d2f46efb3c95c0
Author: Olivier Maignial <olivier.maignial@hotmail.fr>
Date:   Fri Jun 23 17:33:36 2023 +0200

    mtd: spinand: toshiba: Fix ecc_get_status
    
    commit 8544cda94dae6be3f1359539079c68bb731428b1 upstream.
    
    Reading ECC status is failing.
    
    tx58cxgxsxraix_ecc_get_status() is using on-stack buffer
    for SPINAND_GET_FEATURE_OP() output. It is not suitable
    for DMA needs of spi-mem.
    
    Fix this by using the spi-mem operations dedicated buffer
    spinand->scratchbuf.
    
    See
    spinand->scratchbuf:
    https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/mtd/spinand.h?h=v6.3#n418
    spi_mem_check_op():
    https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/spi/spi-mem.c?h=v6.3#n199
    
    Fixes: 10949af1681d ("mtd: spinand: Add initial support for Toshiba TC58CVG2S0H")
    Cc: stable@vger.kernel.org
    Signed-off-by: Olivier Maignial <olivier.maignial@hotmail.fr>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/DB4P250MB1032553D05FBE36DEE0D311EFE23A@DB4P250MB1032.EURP250.PROD.OUTLOOK.COM
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddf7cc7029738bd1c202fd9cd53f7b05e0b1a773
Author: Sungjong Seo <sj1557.seo@samsung.com>
Date:   Fri Jul 14 17:43:54 2023 +0900

    exfat: release s_lock before calling dir_emit()
    
    commit ff84772fd45d486e4fc78c82e2f70ce5333543e6 upstream.
    
    There is a potential deadlock reported by syzbot as below:
    
    ======================================================
    WARNING: possible circular locking dependency detected
    6.4.0-next-20230707-syzkaller #0 Not tainted
    ------------------------------------------------------
    syz-executor330/5073 is trying to acquire lock:
    ffff8880218527a0 (&mm->mmap_lock){++++}-{3:3}, at: mmap_read_lock_killable include/linux/mmap_lock.h:151 [inline]
    ffff8880218527a0 (&mm->mmap_lock){++++}-{3:3}, at: get_mmap_lock_carefully mm/memory.c:5293 [inline]
    ffff8880218527a0 (&mm->mmap_lock){++++}-{3:3}, at: lock_mm_and_find_vma+0x369/0x510 mm/memory.c:5344
    but task is already holding lock:
    ffff888019f760e0 (&sbi->s_lock){+.+.}-{3:3}, at: exfat_iterate+0x117/0xb50 fs/exfat/dir.c:232
    
    which lock already depends on the new lock.
    
    Chain exists of:
      &mm->mmap_lock --> mapping.invalidate_lock#3 --> &sbi->s_lock
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&sbi->s_lock);
                                   lock(mapping.invalidate_lock#3);
                                   lock(&sbi->s_lock);
      rlock(&mm->mmap_lock);
    
    Let's try to avoid above potential deadlock condition by moving dir_emit*()
    out of sbi->s_lock coverage.
    
    Fixes: ca06197382bd ("exfat: add directory operations")
    Cc: stable@vger.kernel.org #v5.7+
    Reported-by: syzbot+1741a5d9b79989c10bdc@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/lkml/00000000000078ee7e060066270b@google.com/T/#u
    Tested-by: syzbot+1741a5d9b79989c10bdc@syzkaller.appspotmail.com
    Signed-off-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79d16a84ea41272dfcb0c00f9798ddd0edd8098d
Author: gaoming <gaoming20@hihonor.com>
Date:   Wed Jul 5 15:15:15 2023 +0800

    exfat: use kvmalloc_array/kvfree instead of kmalloc_array/kfree
    
    commit daf60d6cca26e50d65dac374db92e58de745ad26 upstream.
    
    The call stack shown below is a scenario in the Linux 4.19 kernel.
    Allocating memory failed where exfat fs use kmalloc_array due to
    system memory fragmentation, while the u-disk was inserted without
    recognition.
    Devices such as u-disk using the exfat file system are pluggable and
    may be insert into the system at any time.
    However, long-term running systems cannot guarantee the continuity of
    physical memory. Therefore, it's necessary to address this issue.
    
    Binder:2632_6: page allocation failure: order:4,
     mode:0x6040c0(GFP_KERNEL|__GFP_COMP), nodemask=(null)
    Call trace:
    [242178.097582]  dump_backtrace+0x0/0x4
    [242178.097589]  dump_stack+0xf4/0x134
    [242178.097598]  warn_alloc+0xd8/0x144
    [242178.097603]  __alloc_pages_nodemask+0x1364/0x1384
    [242178.097608]  kmalloc_order+0x2c/0x510
    [242178.097612]  kmalloc_order_trace+0x40/0x16c
    [242178.097618]  __kmalloc+0x360/0x408
    [242178.097624]  load_alloc_bitmap+0x160/0x284
    [242178.097628]  exfat_fill_super+0xa3c/0xe7c
    [242178.097635]  mount_bdev+0x2e8/0x3a0
    [242178.097638]  exfat_fs_mount+0x40/0x50
    [242178.097643]  mount_fs+0x138/0x2e8
    [242178.097649]  vfs_kern_mount+0x90/0x270
    [242178.097655]  do_mount+0x798/0x173c
    [242178.097659]  ksys_mount+0x114/0x1ac
    [242178.097665]  __arm64_sys_mount+0x24/0x34
    [242178.097671]  el0_svc_common+0xb8/0x1b8
    [242178.097676]  el0_svc_handler+0x74/0x90
    [242178.097681]  el0_svc+0x8/0x340
    
    By analyzing the exfat code,we found that continuous physical memory
    is not required here,so kvmalloc_array is used can solve this problem.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: gaoming <gaoming20@hihonor.com>
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4b2673e3c040bcd7cc8749e27607098aef9a2c2
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Jul 25 12:03:59 2023 +0800

    ceph: defer stopping mdsc delayed_work
    
    commit e7e607bd00481745550389a29ecabe33e13d67cf upstream.
    
    Flushing the dirty buffer may take a long time if the cluster is
    overloaded or if there is network issue. So we should ping the
    MDSs periodically to keep alive, else the MDS will blocklist
    the kclient.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/61843
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Milind Changire <mchangir@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5b39ff6917f37a5a735c20a65c5106427270571
Author: Ross Maynard <bids.7405@bigpond.com>
Date:   Mon Jul 31 15:42:04 2023 +1000

    USB: zaurus: Add ID for A-300/B-500/C-700
    
    commit b99225b4fe297d07400f9e2332ecd7347b224f8d upstream.
    
    The SL-A300, B500/5600, and C700 devices no longer auto-load because of
    "usbnet: Remove over-broad module alias from zaurus."
    This patch adds IDs for those 3 devices.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217632
    Fixes: 16adf5d07987 ("usbnet: Remove over-broad module alias from zaurus.")
    Signed-off-by: Ross Maynard <bids.7405@bigpond.com>
    Cc: stable@vger.kernel.org
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/69b5423b-2013-9fc9-9569-58e707d9bafb@bigpond.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 513bfdde8a3b58cdfac37083c38f7b0100f72ae6
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue Aug 1 19:14:24 2023 +0200

    libceph: fix potential hang in ceph_osdc_notify()
    
    commit e6e2843230799230fc5deb8279728a7218b0d63c upstream.
    
    If the cluster becomes unavailable, ceph_osdc_notify() may hang even
    with osd_request_timeout option set because linger_notify_finish_wait()
    waits for MWatchNotify NOTIFY_COMPLETE message with no associated OSD
    request in flight -- it's completely asynchronous.
    
    Introduce an additional timeout, derived from the specified notify
    timeout.  While at it, switch both waits to killable which is more
    correct.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 181274d2f3de26cbf5fd66cc6987672d9048cb30
Author: Steffen Maier <maier@linux.ibm.com>
Date:   Mon Jul 24 16:51:56 2023 +0200

    scsi: zfcp: Defer fc_rport blocking until after ADISC response
    
    commit e65851989001c0c9ba9177564b13b38201c0854c upstream.
    
    Storage devices are free to send RSCNs, e.g. for internal state changes. If
    this happens on all connected paths, zfcp risks temporarily losing all
    paths at the same time. This has strong requirements on multipath
    configuration such as "no_path_retry queue".
    
    Avoid such situations by deferring fc_rport blocking until after the ADISC
    response, when any actual state change of the remote port became clear.
    The already existing port recovery triggers explicitly block the fc_rport.
    The triggers are: on ADISC reject or timeout (typical cable pull case), and
    on ADISC indicating that the remote port has changed its WWPN or
    the port is meanwhile no longer open.
    
    As a side effect, this also removes a confusing direct function call to
    another work item function zfcp_scsi_rport_work() instead of scheduling
    that other work item. It was probably done that way to have the rport block
    side effect immediate and synchronous to the caller.
    
    Fixes: a2fa0aede07c ("[SCSI] zfcp: Block FC transport rports early on errors")
    Cc: stable@vger.kernel.org #v2.6.30+
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Fedor Loshakov <loshakov@linux.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230724145156.3920244-1-maier@linux.ibm.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d9f5f3d8920db72e82b5e216d1daa933d9d40d0
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:15:00 2023 +0000

    tcp_metrics: fix data-race in tcpm_suck_dst() vs fastopen
    
    [ Upstream commit ddf251fa2bc1d3699eec0bae6ed0bc373b8fda79 ]
    
    Whenever tcpm_new() reclaims an old entry, tcpm_suck_dst()
    would overwrite data that could be read from tcp_fastopen_cache_get()
    or tcp_metrics_fill_info().
    
    We need to acquire fastopen_seqlock to maintain consistency.
    
    For newly allocated objects, tcpm_new() can switch to kzalloc()
    to avoid an extra fastopen_seqlock acquisition.
    
    Fixes: 1fe4c481ba63 ("net-tcp: Fast Open client - cookie cache")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-7-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05d1dc88c40f106df9cbc7ab465797fc18a06ec1
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:59 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_net
    
    [ Upstream commit d5d986ce42c71a7562d32c4e21e026b0f87befec ]
    
    tm->tcpm_net can be read or written locklessly.
    
    Instead of changing write_pnet() and read_pnet() and potentially
    hurt performance, add the needed READ_ONCE()/WRITE_ONCE()
    in tm_net() and tcpm_new().
    
    Fixes: 849e8a0ca8d5 ("tcp_metrics: Add a field tcpm_net and verify it matches on lookup")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-6-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 079afb1815043f3d048663abd1c8154d804fe524
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:58 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_vals[]
    
    [ Upstream commit 8c4d04f6b443869d25e59822f7cec88d647028a9 ]
    
    tm->tcpm_vals[] values can be read or written locklessly.
    
    Add needed READ_ONCE()/WRITE_ONCE() to document this,
    and force use of tcp_metric_get() and tcp_metric_set()
    
    Fixes: 51c5d0c4b169 ("tcp: Maintain dynamic metrics in local cache.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57bcbbb208a0e2630e4fe524d765a26f9c429d11
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:57 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_lock
    
    [ Upstream commit 285ce119a3c6c4502585936650143e54c8692788 ]
    
    tm->tcpm_lock can be read or written locklessly.
    
    Add needed READ_ONCE()/WRITE_ONCE() to document this.
    
    Fixes: 51c5d0c4b169 ("tcp: Maintain dynamic metrics in local cache.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-4-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 289091eef30fbf863c8872e19b5624ccb977bfaf
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:56 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_stamp
    
    [ Upstream commit 949ad62a5d5311d36fce2e14fe5fed3f936da51c ]
    
    tm->tcpm_stamp can be read or written locklessly.
    
    Add needed READ_ONCE()/WRITE_ONCE() to document this.
    
    Also constify tcpm_check_stamp() dst argument.
    
    Fixes: 51c5d0c4b169 ("tcp: Maintain dynamic metrics in local cache.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-3-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 420aad608f7291cb768a32fe7c86884ffb2c1c70
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:55 2023 +0000

    tcp_metrics: fix addr_same() helper
    
    [ Upstream commit e6638094d7af6c7b9dcca05ad009e79e31b4f670 ]
    
    Because v4 and v6 families use separate inetpeer trees (respectively
    net->ipv4.peers and net->ipv6.peers), inetpeer_addr_cmp(a, b) assumes
    a & b share the same family.
    
    tcp_metrics use a common hash table, where entries can have different
    families.
    
    We must therefore make sure to not call inetpeer_addr_cmp()
    if the families do not match.
    
    Fixes: d39d14ffa24c ("net: Add helper function to compare inetpeer addresses")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-2-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80e9488ece3db108bd1eed2f7d4a9372c1b46ed8
Author: Jianbo Liu <jianbol@nvidia.com>
Date:   Mon Jul 31 14:58:41 2023 +0300

    net/mlx5: fs_core: Skip the FTs in the same FS_TYPE_PRIO_CHAINS fs_prio
    
    [ Upstream commit c635ca45a7a2023904a1f851e99319af7b87017d ]
    
    In the cited commit, new type of FS_TYPE_PRIO_CHAINS fs_prio was added
    to support multiple parallel namespaces for multi-chains. And we skip
    all the flow tables under the fs_node of this type unconditionally,
    when searching for the next or previous flow table to connect for a
    new table.
    
    As this search function is also used for find new root table when the
    old one is being deleted, it will skip the entire FS_TYPE_PRIO_CHAINS
    fs_node next to the old root. However, new root table should be chosen
    from it if there is any table in it. Fix it by skipping only the flow
    tables in the same FS_TYPE_PRIO_CHAINS fs_node when finding the
    closest FT for a fs_node.
    
    Besides, complete the connecting from FTs of previous priority of prio
    because there should be multiple prevs after this fs_prio type is
    introduced. And also the next FT should be chosen from the first flow
    table next to the prio in the same FS_TYPE_PRIO_CHAINS fs_prio, if
    this prio is the first child.
    
    Fixes: 328edb499f99 ("net/mlx5: Split FDB fast path prio to multiple namespaces")
    Signed-off-by: Jianbo Liu <jianbol@nvidia.com>
    Reviewed-by: Paul Blakey <paulb@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/7a95754df479e722038996c97c97b062b372591f.1690803944.git.leonro@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a634336a03bd80b57e8914c0580543d5152c429
Author: Jianbo Liu <jianbol@nvidia.com>
Date:   Mon Jul 31 14:58:40 2023 +0300

    net/mlx5: fs_core: Make find_closest_ft more generic
    
    [ Upstream commit 618d28a535a0582617465d14e05f3881736a2962 ]
    
    As find_closest_ft_recursive is called to find the closest FT, the
    first parameter of find_closest_ft can be changed from fs_prio to
    fs_node. Thus this function is extended to find the closest FT for the
    nodes of any type, not only prios, but also the sub namespaces.
    
    Signed-off-by: Jianbo Liu <jianbol@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/d3962c2b443ec8dde7a740dc742a1f052d5e256c.1690803944.git.leonro@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: c635ca45a7a2 ("net/mlx5: fs_core: Skip the FTs in the same FS_TYPE_PRIO_CHAINS fs_prio")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c650597647ecb318d02372277bdfd866c6829f78
Author: Benjamin Poirier <bpoirier@nvidia.com>
Date:   Mon Jul 31 16:02:08 2023 -0400

    vxlan: Fix nexthop hash size
    
    [ Upstream commit 0756384fb1bd38adb2ebcfd1307422f433a1d772 ]
    
    The nexthop code expects a 31 bit hash, such as what is returned by
    fib_multipath_hash() and rt6_multipath_hash(). Passing the 32 bit hash
    returned by skb_get_hash() can lead to problems related to the fact that
    'int hash' is a negative number when the MSB is set.
    
    In the case of hash threshold nexthop groups, nexthop_select_path_hthr()
    will disproportionately select the first nexthop group entry. In the case
    of resilient nexthop groups, nexthop_select_path_res() may do an out of
    bounds access in nh_buckets[], for example:
        hash = -912054133
        num_nh_buckets = 2
        bucket_index = 65535
    
    which leads to the following panic:
    
    BUG: unable to handle page fault for address: ffffc900025910c8
    PGD 100000067 P4D 100000067 PUD 10026b067 PMD 0
    Oops: 0002 [#1] PREEMPT SMP KASAN NOPTI
    CPU: 4 PID: 856 Comm: kworker/4:3 Not tainted 6.5.0-rc2+ #34
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.2-debian-1.16.2-1 04/01/2014
    Workqueue: ipv6_addrconf addrconf_dad_work
    RIP: 0010:nexthop_select_path+0x197/0xbf0
    Code: c1 e4 05 be 08 00 00 00 4c 8b 35 a4 14 7e 01 4e 8d 6c 25 00 4a 8d 7c 25 08 48 01 dd e8 c2 25 15 ff 49 8d 7d 08 e8 39 13 15 ff <4d> 89 75 08 48 89 ef e8 7d 12 15 ff 48 8b 5d 00 e8 14 55 2f 00 85
    RSP: 0018:ffff88810c36f260 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 00000000002000c0 RCX: ffffffffaf02dd77
    RDX: dffffc0000000000 RSI: 0000000000000008 RDI: ffffc900025910c8
    RBP: ffffc900025910c0 R08: 0000000000000001 R09: fffff520004b2219
    R10: ffffc900025910cf R11: 31392d2068736168 R12: 00000000002000c0
    R13: ffffc900025910c0 R14: 00000000fffef608 R15: ffff88811840e900
    FS:  0000000000000000(0000) GS:ffff8881f7000000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffc900025910c8 CR3: 0000000129d00000 CR4: 0000000000750ee0
    PKRU: 55555554
    Call Trace:
     <TASK>
     ? __die+0x23/0x70
     ? page_fault_oops+0x1ee/0x5c0
     ? __pfx_is_prefetch.constprop.0+0x10/0x10
     ? __pfx_page_fault_oops+0x10/0x10
     ? search_bpf_extables+0xfe/0x1c0
     ? fixup_exception+0x3b/0x470
     ? exc_page_fault+0xf6/0x110
     ? asm_exc_page_fault+0x26/0x30
     ? nexthop_select_path+0x197/0xbf0
     ? nexthop_select_path+0x197/0xbf0
     ? lock_is_held_type+0xe7/0x140
     vxlan_xmit+0x5b2/0x2340
     ? __lock_acquire+0x92b/0x3370
     ? __pfx_vxlan_xmit+0x10/0x10
     ? __pfx___lock_acquire+0x10/0x10
     ? __pfx_register_lock_class+0x10/0x10
     ? skb_network_protocol+0xce/0x2d0
     ? dev_hard_start_xmit+0xca/0x350
     ? __pfx_vxlan_xmit+0x10/0x10
     dev_hard_start_xmit+0xca/0x350
     __dev_queue_xmit+0x513/0x1e20
     ? __pfx___dev_queue_xmit+0x10/0x10
     ? __pfx_lock_release+0x10/0x10
     ? mark_held_locks+0x44/0x90
     ? skb_push+0x4c/0x80
     ? eth_header+0x81/0xe0
     ? __pfx_eth_header+0x10/0x10
     ? neigh_resolve_output+0x215/0x310
     ? ip6_finish_output2+0x2ba/0xc90
     ip6_finish_output2+0x2ba/0xc90
     ? lock_release+0x236/0x3e0
     ? ip6_mtu+0xbb/0x240
     ? __pfx_ip6_finish_output2+0x10/0x10
     ? find_held_lock+0x83/0xa0
     ? lock_is_held_type+0xe7/0x140
     ip6_finish_output+0x1ee/0x780
     ip6_output+0x138/0x460
     ? __pfx_ip6_output+0x10/0x10
     ? __pfx___lock_acquire+0x10/0x10
     ? __pfx_ip6_finish_output+0x10/0x10
     NF_HOOK.constprop.0+0xc0/0x420
     ? __pfx_NF_HOOK.constprop.0+0x10/0x10
     ? ndisc_send_skb+0x2c0/0x960
     ? __pfx_lock_release+0x10/0x10
     ? __local_bh_enable_ip+0x93/0x110
     ? lock_is_held_type+0xe7/0x140
     ndisc_send_skb+0x4be/0x960
     ? __pfx_ndisc_send_skb+0x10/0x10
     ? mark_held_locks+0x65/0x90
     ? find_held_lock+0x83/0xa0
     ndisc_send_ns+0xb0/0x110
     ? __pfx_ndisc_send_ns+0x10/0x10
     addrconf_dad_work+0x631/0x8e0
     ? lock_acquire+0x180/0x3f0
     ? __pfx_addrconf_dad_work+0x10/0x10
     ? mark_held_locks+0x24/0x90
     process_one_work+0x582/0x9c0
     ? __pfx_process_one_work+0x10/0x10
     ? __pfx_do_raw_spin_lock+0x10/0x10
     ? mark_held_locks+0x24/0x90
     worker_thread+0x93/0x630
     ? __kthread_parkme+0xdc/0x100
     ? __pfx_worker_thread+0x10/0x10
     kthread+0x1a5/0x1e0
     ? __pfx_kthread+0x10/0x10
     ret_from_fork+0x34/0x60
     ? __pfx_kthread+0x10/0x10
     ret_from_fork_asm+0x1b/0x30
    RIP: 0000:0x0
    Code: Unable to access opcode bytes at 0xffffffffffffffd6.
    RSP: 0000:0000000000000000 EFLAGS: 00000000 ORIG_RAX: 0000000000000000
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    Modules linked in:
    CR2: ffffc900025910c8
    ---[ end trace 0000000000000000 ]---
    RIP: 0010:nexthop_select_path+0x197/0xbf0
    Code: c1 e4 05 be 08 00 00 00 4c 8b 35 a4 14 7e 01 4e 8d 6c 25 00 4a 8d 7c 25 08 48 01 dd e8 c2 25 15 ff 49 8d 7d 08 e8 39 13 15 ff <4d> 89 75 08 48 89 ef e8 7d 12 15 ff 48 8b 5d 00 e8 14 55 2f 00 85
    RSP: 0018:ffff88810c36f260 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 00000000002000c0 RCX: ffffffffaf02dd77
    RDX: dffffc0000000000 RSI: 0000000000000008 RDI: ffffc900025910c8
    RBP: ffffc900025910c0 R08: 0000000000000001 R09: fffff520004b2219
    R10: ffffc900025910cf R11: 31392d2068736168 R12: 00000000002000c0
    R13: ffffc900025910c0 R14: 00000000fffef608 R15: ffff88811840e900
    FS:  0000000000000000(0000) GS:ffff8881f7000000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffffffffffffd6 CR3: 0000000129d00000 CR4: 0000000000750ee0
    PKRU: 55555554
    Kernel panic - not syncing: Fatal exception in interrupt
    Kernel Offset: 0x2ca00000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    Fix this problem by ensuring the MSB of hash is 0 using a right shift - the
    same approach used in fib_multipath_hash() and rt6_multipath_hash().
    
    Fixes: 1274e1cc4226 ("vxlan: ecmp support for mac fdb entries")
    Signed-off-by: Benjamin Poirier <bpoirier@nvidia.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1683124129a4263dd5bce2475bab110e95fa0346
Author: Yue Haibing <yuehaibing@huawei.com>
Date:   Tue Aug 1 14:43:18 2023 +0800

    ip6mr: Fix skb_under_panic in ip6mr_cache_report()
    
    [ Upstream commit 30e0191b16e8a58e4620fa3e2839ddc7b9d4281c ]
    
    skbuff: skb_under_panic: text:ffffffff88771f69 len:56 put:-4
     head:ffff88805f86a800 data:ffff887f5f86a850 tail:0x88 end:0x2c0 dev:pim6reg
     ------------[ cut here ]------------
     kernel BUG at net/core/skbuff.c:192!
     invalid opcode: 0000 [#1] PREEMPT SMP KASAN
     CPU: 2 PID: 22968 Comm: kworker/2:11 Not tainted 6.5.0-rc3-00044-g0a8db05b571a #236
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
     Workqueue: ipv6_addrconf addrconf_dad_work
     RIP: 0010:skb_panic+0x152/0x1d0
     Call Trace:
      <TASK>
      skb_push+0xc4/0xe0
      ip6mr_cache_report+0xd69/0x19b0
      reg_vif_xmit+0x406/0x690
      dev_hard_start_xmit+0x17e/0x6e0
      __dev_queue_xmit+0x2d6a/0x3d20
      vlan_dev_hard_start_xmit+0x3ab/0x5c0
      dev_hard_start_xmit+0x17e/0x6e0
      __dev_queue_xmit+0x2d6a/0x3d20
      neigh_connected_output+0x3ed/0x570
      ip6_finish_output2+0x5b5/0x1950
      ip6_finish_output+0x693/0x11c0
      ip6_output+0x24b/0x880
      NF_HOOK.constprop.0+0xfd/0x530
      ndisc_send_skb+0x9db/0x1400
      ndisc_send_rs+0x12a/0x6c0
      addrconf_dad_completed+0x3c9/0xea0
      addrconf_dad_work+0x849/0x1420
      process_one_work+0xa22/0x16e0
      worker_thread+0x679/0x10c0
      ret_from_fork+0x28/0x60
      ret_from_fork_asm+0x11/0x20
    
    When setup a vlan device on dev pim6reg, DAD ns packet may sent on reg_vif_xmit().
    reg_vif_xmit()
        ip6mr_cache_report()
            skb_push(skb, -skb_network_offset(pkt));//skb_network_offset(pkt) is 4
    And skb_push declared as:
            void *skb_push(struct sk_buff *skb, unsigned int len);
                    skb->data -= len;
                    //0xffff88805f86a84c - 0xfffffffc = 0xffff887f5f86a850
    skb->data is set to 0xffff887f5f86a850, which is invalid mem addr, lead to skb_push() fails.
    
    Fixes: 14fb64e1f449 ("[IPV6] MROUTE: Support PIM-SM (SSM).")
    Signed-off-by: Yue Haibing <yuehaibing@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c33d5a5c5b2c79326190885040f1643793c67b29
Author: Alexandra Winter <wintera@linux.ibm.com>
Date:   Tue Aug 1 10:00:16 2023 +0200

    s390/qeth: Don't call dev_close/dev_open (DOWN/UP)
    
    [ Upstream commit 1cfef80d4c2b2c599189f36f36320b205d9447d9 ]
    
    dev_close() and dev_open() are issued to change the interface state to DOWN
    or UP (dev->flags IFF_UP). When the netdev is set DOWN it loses e.g its
    Ipv6 addresses and routes. We don't want this in cases of device recovery
    (triggered by hardware or software) or when the qeth device is set
    offline.
    
    Setting a qeth device offline or online and device recovery actions call
    netif_device_detach() and/or netif_device_attach(). That will reset or
    set the LOWER_UP indication i.e. change the dev->state Bit
    __LINK_STATE_PRESENT. That is enough to e.g. cause bond failovers, and
    still preserves the interface settings that are handled by the network
    stack.
    
    Don't call dev_open() nor dev_close() from the qeth device driver. Let the
    network stack handle this.
    
    Fixes: d4560150cb47 ("s390/qeth: call dev_close() during recovery")
    Signed-off-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e309f43d0ca4051d20736c06a6f84bbddd881da
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Aug 1 09:32:48 2023 +0800

    net: dcb: choose correct policy to parse DCB_ATTR_BCN
    
    [ Upstream commit 31d49ba033095f6e8158c60f69714a500922e0c3 ]
    
    The dcbnl_bcn_setcfg uses erroneous policy to parse tb[DCB_ATTR_BCN],
    which is introduced in commit 859ee3c43812 ("DCB: Add support for DCB
    BCN"). Please see the comment in below code
    
    static int dcbnl_bcn_setcfg(...)
    {
      ...
      ret = nla_parse_nested_deprecated(..., dcbnl_pfc_up_nest, .. )
      // !!! dcbnl_pfc_up_nest for attributes
      //  DCB_PFC_UP_ATTR_0 to DCB_PFC_UP_ATTR_ALL in enum dcbnl_pfc_up_attrs
      ...
      for (i = DCB_BCN_ATTR_RP_0; i <= DCB_BCN_ATTR_RP_7; i++) {
      // !!! DCB_BCN_ATTR_RP_0 to DCB_BCN_ATTR_RP_7 in enum dcbnl_bcn_attrs
        ...
        value_byte = nla_get_u8(data[i]);
        ...
      }
      ...
      for (i = DCB_BCN_ATTR_BCNA_0; i <= DCB_BCN_ATTR_RI; i++) {
      // !!! DCB_BCN_ATTR_BCNA_0 to DCB_BCN_ATTR_RI in enum dcbnl_bcn_attrs
      ...
        value_int = nla_get_u32(data[i]);
      ...
      }
      ...
    }
    
    That is, the nla_parse_nested_deprecated uses dcbnl_pfc_up_nest
    attributes to parse nlattr defined in dcbnl_pfc_up_attrs. But the
    following access code fetch each nlattr as dcbnl_bcn_attrs attributes.
    By looking up the associated nla_policy for dcbnl_bcn_attrs. We can find
    the beginning part of these two policies are "same".
    
    static const struct nla_policy dcbnl_pfc_up_nest[...] = {
            [DCB_PFC_UP_ATTR_0]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_1]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_2]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_3]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_4]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_5]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_6]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_7]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_ALL] = {.type = NLA_FLAG},
    };
    
    static const struct nla_policy dcbnl_bcn_nest[...] = {
            [DCB_BCN_ATTR_RP_0]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_1]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_2]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_3]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_4]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_5]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_6]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_7]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_ALL]       = {.type = NLA_FLAG},
            // from here is somewhat different
            [DCB_BCN_ATTR_BCNA_0]       = {.type = NLA_U32},
            ...
            [DCB_BCN_ATTR_ALL]          = {.type = NLA_FLAG},
    };
    
    Therefore, the current code is buggy and this
    nla_parse_nested_deprecated could overflow the dcbnl_pfc_up_nest and use
    the adjacent nla_policy to parse attributes from DCB_BCN_ATTR_BCNA_0.
    
    Hence use the correct policy dcbnl_bcn_nest to parse the nested
    tb[DCB_ATTR_BCN] TLV.
    
    Fixes: 859ee3c43812 ("DCB: Add support for DCB BCN")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230801013248.87240-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d4f24736df9039c5174a80ec14e167d117d693f
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jul 31 11:48:32 2023 +0100

    net: netsec: Ignore 'phy-mode' on SynQuacer in DT mode
    
    [ Upstream commit f3bb7759a924713bc54d15f6d0d70733b5935fad ]
    
    As documented in acd7aaf51b20 ("netsec: ignore 'phy-mode' device
    property on ACPI systems") the SocioNext SynQuacer platform ships with
    firmware defining the PHY mode as RGMII even though the physical
    configuration of the PHY is for TX and RX delays.  Since bbc4d71d63549bc
    ("net: phy: realtek: fix rtl8211e rx/tx delay config") this has caused
    misconfiguration of the PHY, rendering the network unusable.
    
    This was worked around for ACPI by ignoring the phy-mode property but
    the system is also used with DT.  For DT instead if we're running on a
    SynQuacer force a working PHY mode, as well as the standard EDK2
    firmware with DT there are also some of these systems that use u-boot
    and might not initialise the PHY if not netbooting.  Newer firmware
    imagaes for at least EDK2 are available from Linaro so print a warning
    when doing this.
    
    Fixes: 533dd11a12f6 ("net: socionext: Add Synquacer NetSec driver")
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Acked-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20230731-synquacer-net-v3-1-944be5f06428@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 216092963ce5699a7540035ec8135f5bd4942207
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Jul 31 10:42:32 2023 +0300

    net: ll_temac: fix error checking of irq_of_parse_and_map()
    
    [ Upstream commit ef45e8400f5bb66b03cc949f76c80e2a118447de ]
    
    Most kernel functions return negative error codes but some irq functions
    return zero on error.  In this code irq_of_parse_and_map(), returns zero
    and platform_get_irq() returns negative error codes.  We need to handle
    both cases appropriately.
    
    Fixes: 8425c41d1ef7 ("net: ll_temac: Extend support to non-device-tree platforms")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Acked-by: Esben Haabendal <esben@geanix.com>
    Reviewed-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Harini Katakam <harini.katakam@amd.com>
    Link: https://lore.kernel.org/r/3d0aef75-06e0-45a5-a2a6-2cc4738d4143@moroto.mountain
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20fe059c1d47bdb2603606cd909e37bf8066dfe2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Sep 15 19:42:14 2022 +0800

    net: ll_temac: Switch to use dev_err_probe() helper
    
    [ Upstream commit 75ae8c284c00dc3584b7c173f6fcf96ee15bd02c ]
    
    dev_err() can be replace with dev_err_probe() which will check if error
    code is -EPROBE_DEFER.
    
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: ef45e8400f5b ("net: ll_temac: fix error checking of irq_of_parse_and_map()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0e42f4bd496760669c52c4937ac970479b17fe7
Author: Tomas Glozar <tglozar@redhat.com>
Date:   Fri Jul 28 08:44:11 2023 +0200

    bpf: sockmap: Remove preempt_disable in sock_map_sk_acquire
    
    [ Upstream commit 13d2618b48f15966d1adfe1ff6a1985f5eef40ba ]
    
    Disabling preemption in sock_map_sk_acquire conflicts with GFP_ATOMIC
    allocation later in sk_psock_init_link on PREEMPT_RT kernels, since
    GFP_ATOMIC might sleep on RT (see bpf: Make BPF and PREEMPT_RT co-exist
    patchset notes for details).
    
    This causes calling bpf_map_update_elem on BPF_MAP_TYPE_SOCKMAP maps to
    BUG (sleeping function called from invalid context) on RT kernels.
    
    preempt_disable was introduced together with lock_sk and rcu_read_lock
    in commit 99ba2b5aba24e ("bpf: sockhash, disallow bpf_tcp_close and update
    in parallel"), probably to match disabled migration of BPF programs, and
    is no longer necessary.
    
    Remove preempt_disable to fix BUG in sock_map_update_common on RT.
    
    Signed-off-by: Tomas Glozar <tglozar@redhat.com>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Link: https://lore.kernel.org/all/20200224140131.461979697@linutronix.de/
    Fixes: 99ba2b5aba24 ("bpf: sockhash, disallow bpf_tcp_close and update in parallel")
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/20230728064411.305576-1-tglozar@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aaa71c4e8ad98828ed50dde3eec8e0d545a117f7
Author: valis <sec@valis.email>
Date:   Sat Jul 29 08:32:02 2023 -0400

    net/sched: cls_route: No longer copy tcf_result on update to avoid use-after-free
    
    [ Upstream commit b80b829e9e2c1b3f7aae34855e04d8f6ecaf13c8 ]
    
    When route4_change() is called on an existing filter, the whole
    tcf_result struct is always copied into the new instance of the filter.
    
    This causes a problem when updating a filter bound to a class,
    as tcf_unbind_filter() is always called on the old instance in the
    success path, decreasing filter_cnt of the still referenced class
    and allowing it to be deleted, leading to a use-after-free.
    
    Fix this by no longer copying the tcf_result struct from the old filter.
    
    Fixes: 1109c00547fc ("net: sched: RCU cls_route")
    Reported-by: valis <sec@valis.email>
    Reported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Signed-off-by: valis <sec@valis.email>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: M A Ramdhan <ramdhan@starlabs.sg>
    Link: https://lore.kernel.org/r/20230729123202.72406-4-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8d478200b104ff356f51e1f63499fe46ba8c9b8
Author: valis <sec@valis.email>
Date:   Sat Jul 29 08:32:01 2023 -0400

    net/sched: cls_fw: No longer copy tcf_result on update to avoid use-after-free
    
    [ Upstream commit 76e42ae831991c828cffa8c37736ebfb831ad5ec ]
    
    When fw_change() is called on an existing filter, the whole
    tcf_result struct is always copied into the new instance of the filter.
    
    This causes a problem when updating a filter bound to a class,
    as tcf_unbind_filter() is always called on the old instance in the
    success path, decreasing filter_cnt of the still referenced class
    and allowing it to be deleted, leading to a use-after-free.
    
    Fix this by no longer copying the tcf_result struct from the old filter.
    
    Fixes: e35a8ee5993b ("net: sched: fw use RCU")
    Reported-by: valis <sec@valis.email>
    Reported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Signed-off-by: valis <sec@valis.email>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: M A Ramdhan <ramdhan@starlabs.sg>
    Link: https://lore.kernel.org/r/20230729123202.72406-3-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4256c99a7116c9514224847e8aaee2ecf110a0a
Author: valis <sec@valis.email>
Date:   Sat Jul 29 08:32:00 2023 -0400

    net/sched: cls_u32: No longer copy tcf_result on update to avoid use-after-free
    
    [ Upstream commit 3044b16e7c6fe5d24b1cdbcf1bd0a9d92d1ebd81 ]
    
    When u32_change() is called on an existing filter, the whole
    tcf_result struct is always copied into the new instance of the filter.
    
    This causes a problem when updating a filter bound to a class,
    as tcf_unbind_filter() is always called on the old instance in the
    success path, decreasing filter_cnt of the still referenced class
    and allowing it to be deleted, leading to a use-after-free.
    
    Fix this by no longer copying the tcf_result struct from the old filter.
    
    Fixes: de5df63228fc ("net: sched: cls_u32 changes to knode must appear atomic to readers")
    Reported-by: valis <sec@valis.email>
    Reported-by: M A Ramdhan <ramdhan@starlabs.sg>
    Signed-off-by: valis <sec@valis.email>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: M A Ramdhan <ramdhan@starlabs.sg>
    Link: https://lore.kernel.org/r/20230729123202.72406-2-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 268b29ef1947718582936e5e6b3d851bafe19271
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:17 2023 +0000

    net: add missing data-race annotation for sk_ll_usec
    
    [ Upstream commit e5f0d2dd3c2faa671711dac6d3ff3cef307bcfe3 ]
    
    In a prior commit I forgot that sk_getsockopt() reads
    sk->sk_ll_usec without holding a lock.
    
    Fixes: 0dbffbb5335a ("net: annotate data race around sk_ll_usec")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad417bab9d5b0bb5d8c24423c8d80beb5858bd08
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:16 2023 +0000

    net: add missing data-race annotations around sk->sk_peek_off
    
    [ Upstream commit 11695c6e966b0ec7ed1d16777d294cef865a5c91 ]
    
    sk_getsockopt() runs locklessly, thus we need to annotate the read
    of sk->sk_peek_off.
    
    While we are at it, add corresponding annotations to sk_set_peek_off()
    and unix_set_peek_off().
    
    Fixes: b9bb53f3836f ("sock: convert sk_peek_offset functions to WRITE_ONCE")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11e0590af33383ea3a745ae7452dea4f1f19eba2
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:14 2023 +0000

    net: add missing READ_ONCE(sk->sk_rcvbuf) annotation
    
    [ Upstream commit b4b553253091cafe9ec38994acf42795e073bef5 ]
    
    In a prior commit, I forgot to change sk_getsockopt()
    when reading sk->sk_rcvbuf locklessly.
    
    Fixes: ebb3b78db7bf ("tcp: annotate sk->sk_rcvbuf lockless reads")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc20f7bada00b550b3fd2855ec910a33460ed357
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:13 2023 +0000

    net: add missing READ_ONCE(sk->sk_sndbuf) annotation
    
    [ Upstream commit 74bc084327c643499474ba75df485607da37dd6e ]
    
    In a prior commit, I forgot to change sk_getsockopt()
    when reading sk->sk_sndbuf locklessly.
    
    Fixes: e292f05e0df7 ("tcp: annotate sk->sk_sndbuf lockless reads")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 427c611d846d9c5198f498d2f13ff940683606d4
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:11 2023 +0000

    net: add missing READ_ONCE(sk->sk_rcvlowat) annotation
    
    [ Upstream commit e6d12bdb435d23ff6c1890c852d85408a2f496ee ]
    
    In a prior commit, I forgot to change sk_getsockopt()
    when reading sk->sk_rcvlowat locklessly.
    
    Fixes: eac66402d1c3 ("net: annotate sk->sk_rcvlowat lockless reads")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7ebe08f4081fe69c719c5690c3211d125f625b6
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:10 2023 +0000

    net: annotate data-races around sk->sk_max_pacing_rate
    
    [ Upstream commit ea7f45ef77b39e72244d282e47f6cb1ef4135cd2 ]
    
    sk_getsockopt() runs locklessly. This means sk->sk_max_pacing_rate
    can be read while other threads are changing its value.
    
    Fixes: 62748f32d501 ("net: introduce SO_MAX_PACING_RATE")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14db69381dd837828c421b5511753febd6f1c557
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Thu Jul 27 08:56:19 2023 +0000

    mISDN: hfcpci: Fix potential deadlock on &hc->lock
    
    [ Upstream commit 56c6be35fcbed54279df0a2c9e60480a61841d6f ]
    
    As &hc->lock is acquired by both timer _hfcpci_softirq() and hardirq
    hfcpci_int(), the timer should disable irq before lock acquisition
    otherwise deadlock could happen if the timmer is preemtped by the hadr irq.
    
    Possible deadlock scenario:
    hfcpci_softirq() (timer)
        -> _hfcpci_softirq()
        -> spin_lock(&hc->lock);
            <irq interruption>
            -> hfcpci_int()
            -> spin_lock(&hc->lock); (deadlock here)
    
    This flaw was found by an experimental static analysis tool I am developing
    for irq-related deadlock.
    
    The tentative patch fixes the potential deadlock by spin_lock_irq()
    in timer.
    
    Fixes: b36b654a7e82 ("mISDN: Create /sys/class/mISDN")
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Link: https://lore.kernel.org/r/20230727085619.7419-1-dg573847474@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d163337bef2025da6e7ffa3ff2ce24c0a79c91b4
Author: Jamal Hadi Salim <jhs@mojatatu.com>
Date:   Wed Jul 26 09:51:51 2023 -0400

    net: sched: cls_u32: Fix match key mis-addressing
    
    [ Upstream commit e68409db995380d1badacba41ff24996bd396171 ]
    
    A match entry is uniquely identified with an "address" or "path" in the
    form of: hashtable ID(12b):bucketid(8b):nodeid(12b).
    
    When creating table match entries all of hash table id, bucket id and
    node (match entry id) are needed to be either specified by the user or
    reasonable in-kernel defaults are used. The in-kernel default for a table id is
    0x800(omnipresent root table); for bucketid it is 0x0. Prior to this fix there
    was none for a nodeid i.e. the code assumed that the user passed the correct
    nodeid and if the user passes a nodeid of 0 (as Mingi Cho did) then that is what
    was used. But nodeid of 0 is reserved for identifying the table. This is not
    a problem until we dump. The dump code notices that the nodeid is zero and
    assumes it is referencing a table and therefore references table struct
    tc_u_hnode instead of what was created i.e match entry struct tc_u_knode.
    
    Ming does an equivalent of:
    tc filter add dev dummy0 parent 10: prio 1 handle 0x1000 \
    protocol ip u32 match ip src 10.0.0.1/32 classid 10:1 action ok
    
    Essentially specifying a table id 0, bucketid 1 and nodeid of zero
    Tableid 0 is remapped to the default of 0x800.
    Bucketid 1 is ignored and defaults to 0x00.
    Nodeid was assumed to be what Ming passed - 0x000
    
    dumping before fix shows:
    ~$ tc filter ls dev dummy0 parent 10:
    filter protocol ip pref 1 u32 chain 0
    filter protocol ip pref 1 u32 chain 0 fh 800: ht divisor 1
    filter protocol ip pref 1 u32 chain 0 fh 800: ht divisor -30591
    
    Note that the last line reports a table instead of a match entry
    (you can tell this because it says "ht divisor...").
    As a result of reporting the wrong data type (misinterpretting of struct
    tc_u_knode as being struct tc_u_hnode) the divisor is reported with value
    of -30591. Ming identified this as part of the heap address
    (physmap_base is 0xffff8880 (-30591 - 1)).
    
    The fix is to ensure that when table entry matches are added and no
    nodeid is specified (i.e nodeid == 0) then we get the next available
    nodeid from the table's pool.
    
    After the fix, this is what the dump shows:
    $ tc filter ls dev dummy0 parent 10:
    filter protocol ip pref 1 u32 chain 0
    filter protocol ip pref 1 u32 chain 0 fh 800: ht divisor 1
    filter protocol ip pref 1 u32 chain 0 fh 800::800 order 2048 key ht 800 bkt 0 flowid 10:1 not_in_hw
      match 0a000001/ffffffff at 12
            action order 1: gact action pass
             random type none pass val 0
             index 1 ref 1 bind 1
    
    Reported-by: Mingi Cho <mgcho.minic@gmail.com>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Link: https://lore.kernel.org/r/20230726135151.416917-1-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e68929f11b19f6ecea4737d8ded616473bf0e32b
Author: Georg Müller <georgmueller@gmx.net>
Date:   Fri Jul 28 17:18:12 2023 +0200

    perf test uprobe_from_different_cu: Skip if there is no gcc
    
    [ Upstream commit 98ce8e4a9dcfb448b30a2d7a16190f4a00382377 ]
    
    Without gcc, the test will fail.
    
    On cleanup, ignore probe removal errors. Otherwise, in case of an error
    adding the probe, the temporary directory is not removed.
    
    Fixes: 56cbeacf14353057 ("perf probe: Add test for regression introduced by switch to die_get_decl_file()")
    Signed-off-by: Georg Müller <georgmueller@gmx.net>
    Acked-by: Ian Rogers <irogers@google.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Georg Müller <georgmueller@gmx.net>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20230728151812.454806-2-georgmueller@gmx.net
    Link: https://lore.kernel.org/r/CAP-5=fUP6UuLgRty3t2=fQsQi3k4hDMz415vWdp1x88QMvZ8ug@mail.gmail.com/
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb8031b7ce0c5ce6869632058fad7345feb4328e
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Thu Jul 27 01:05:06 2023 +0800

    net: dsa: fix value check in bcm_sf2_sw_probe()
    
    [ Upstream commit dadc5b86cc9459581f37fe755b431adc399ea393 ]
    
    in bcm_sf2_sw_probe(), check the return value of clk_prepare_enable()
    and return the error code if clk_prepare_enable() returns an
    unexpected value.
    
    Fixes: e9ec5c3bd238 ("net: dsa: bcm_sf2: request and handle clocks")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20230726170506.16547-1-ruc_gongyuanjun@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abb0172fa8dc4a4ec51aa992b7269ed65959f310
Author: Lin Ma <linma@zju.edu.cn>
Date:   Wed Jul 26 15:53:14 2023 +0800

    rtnetlink: let rtnl_bridge_setlink checks IFLA_BRIDGE_MODE length
    
    [ Upstream commit d73ef2d69c0dba5f5a1cb9600045c873bab1fb7f ]
    
    There are totally 9 ndo_bridge_setlink handlers in the current kernel,
    which are 1) bnxt_bridge_setlink, 2) be_ndo_bridge_setlink 3)
    i40e_ndo_bridge_setlink 4) ice_bridge_setlink 5)
    ixgbe_ndo_bridge_setlink 6) mlx5e_bridge_setlink 7)
    nfp_net_bridge_setlink 8) qeth_l2_bridge_setlink 9) br_setlink.
    
    By investigating the code, we find that 1-7 parse and use nlattr
    IFLA_BRIDGE_MODE but 3 and 4 forget to do the nla_len check. This can
    lead to an out-of-attribute read and allow a malformed nlattr (e.g.,
    length 0) to be viewed as a 2 byte integer.
    
    To avoid such issues, also for other ndo_bridge_setlink handlers in the
    future. This patch adds the nla_len check in rtnl_bridge_setlink and
    does an early error return if length mismatches. To make it works, the
    break is removed from the parsing for IFLA_BRIDGE_FLAGS to make sure
    this nla_for_each_nested iterates every attribute.
    
    Fixes: b1edc14a3fbf ("ice: Implement ice_bridge_getlink and ice_bridge_setlink")
    Fixes: 51616018dd1b ("i40e: Add support for getlink, setlink ndo ops")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Link: https://lore.kernel.org/r/20230726075314.1059224-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b93c510684a802e58da9c04aa05ee3aad74d6ed
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Jul 25 10:33:30 2023 +0800

    bpf: Add length check for SK_DIAG_BPF_STORAGE_REQ_MAP_FD parsing
    
    [ Upstream commit bcc29b7f5af6797702c2306a7aacb831fc5ce9cb ]
    
    The nla_for_each_nested parsing in function bpf_sk_storage_diag_alloc
    does not check the length of the nested attribute. This can lead to an
    out-of-attribute read and allow a malformed nlattr (e.g., length 0) to
    be viewed as a 4 byte integer.
    
    This patch adds an additional check when the nlattr is getting counted.
    This makes sure the latter nla_get_u32 can access the attributes with
    the correct length.
    
    Fixes: 1ed4d92458a9 ("bpf: INET_DIAG support in bpf_sk_storage")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20230725023330.422856-1-linma@zju.edu.cn
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cf67912078f9ecdd57fab008784fdf4ea41d772
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Tue Jul 25 14:56:55 2023 +0800

    net/mlx5e: fix return value check in mlx5e_ipsec_remove_trailer()
    
    [ Upstream commit e5bcb7564d3bd0c88613c76963c5349be9c511c5 ]
    
    mlx5e_ipsec_remove_trailer() should return an error code if function
    pskb_trim() returns an unexpected value.
    
    Fixes: 2ac9cfe78223 ("net/mlx5e: IPSec, Add Innova IPSec offload TX data path")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 165159854757dbae0dfd1812b27051da35aa6223
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Wed Jul 5 20:15:27 2023 +0800

    net/mlx5: DR, fix memory leak in mlx5dr_cmd_create_reformat_ctx
    
    [ Upstream commit 5dd77585dd9d0e03dd1bceb95f0269a7eaf6b936 ]
    
    when mlx5_cmd_exec failed in mlx5dr_cmd_create_reformat_ctx, the memory
    pointed by 'in' is not released, which will cause memory leak. Move memory
    release after mlx5_cmd_exec.
    
    Fixes: 1d9186476e12 ("net/mlx5: DR, Add direct rule command utilities")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef3d0a732d69bb2fc7bdce159d7d4f259f0c7359
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Sun Jul 23 23:10:43 2023 +0300

    wifi: cfg80211: Fix return value in scan logic
    
    [ Upstream commit fd7f08d92fcd7cc3eca0dd6c853f722a4c6176df ]
    
    The reporter noticed a warning when running iwlwifi:
    
    WARNING: CPU: 8 PID: 659 at mm/page_alloc.c:4453 __alloc_pages+0x329/0x340
    
    As cfg80211_parse_colocated_ap() is not expected to return a negative
    value return 0 and not a negative value if cfg80211_calc_short_ssid()
    fails.
    
    Fixes: c8cb5b854b40f ("nl80211/cfg80211: support 6 GHz scanning")
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217675
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230723201043.3007430-1-ilan.peer@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4bdcbc0e39138a064c63ab7ffd5e3c962e881e9
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Thu Jul 27 20:29:39 2023 +0200

    KVM: s390: fix sthyi error handling
    
    [ Upstream commit 0c02cc576eac161601927b41634f80bfd55bfa9e ]
    
    Commit 9fb6c9b3fea1 ("s390/sthyi: add cache to store hypervisor info")
    added cache handling for store hypervisor info. This also changed the
    possible return code for sthyi_fill().
    
    Instead of only returning a condition code like the sthyi instruction would
    do, it can now also return a negative error value (-ENOMEM). handle_styhi()
    was not changed accordingly. In case of an error, the negative error value
    would incorrectly injected into the guest PSW.
    
    Add proper error handling to prevent this, and update the comment which
    describes the possible return values of sthyi_fill().
    
    Fixes: 9fb6c9b3fea1 ("s390/sthyi: add cache to store hypervisor info")
    Reviewed-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230727182939.2050744-1-hca@linux.ibm.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4241cfc973ad8bc3d3a68b532b014e880c21b35f
Author: ndesaulniers@google.com <ndesaulniers@google.com>
Date:   Tue Aug 1 15:22:17 2023 -0700

    word-at-a-time: use the same return type for has_zero regardless of endianness
    
    [ Upstream commit 79e8328e5acbe691bbde029a52c89d70dcbc22f3 ]
    
    Compiling big-endian targets with Clang produces the diagnostic:
    
      fs/namei.c:2173:13: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
            } while (!(has_zero(a, &adata, &constants) | has_zero(b, &bdata, &constants)));
                      ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
      fs/namei.c:2173:13: note: cast one or both operands to int to silence this warning
    
    It appears that when has_zero was introduced, two definitions were
    produced with different signatures (in particular different return
    types).
    
    Looking at the usage in hash_name() in fs/namei.c, I suspect that
    has_zero() is meant to be invoked twice per while loop iteration; using
    logical-or would not update `bdata` when `a` did not have zeros.  So I
    think it's preferred to always return an unsigned long rather than a
    bool than update the while loop in hash_name() to use a logical-or
    rather than bitwise-or.
    
    [ Also changed powerpc version to do the same  - Linus ]
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1832
    Link: https://lore.kernel.org/lkml/20230801-bitwise-v1-1-799bec468dc4@google.com/
    Fixes: 36126f8f2ed8 ("word-at-a-time: make the interfaces truly generic")
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Heiko Carstens <hca@linux.ibm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94f8447ab8021f98867e04385a353ab8b87f6219
Author: Hugo Villeneuve <hvilleneuve@dimonoff.com>
Date:   Tue Jul 4 09:48:00 2023 -0400

    arm64: dts: imx8mn-var-som: add missing pull-up for onboard PHY reset pinmux
    
    [ Upstream commit 253be5b53c2792fb4384f8005b05421e6f040ee3 ]
    
    For SOMs with an onboard PHY, the RESET_N pull-up resistor is
    currently deactivated in the pinmux configuration. When the pinmux
    code selects the GPIO function for this pin, with a default direction
    of input, this prevents the RESET_N pin from being taken to the proper
    3.3V level (deasserted), and this results in the PHY being not
    detected since it is held in reset.
    
    Taken from RESET_N pin description in ADIN13000 datasheet:
        This pin requires a 1K pull-up resistor to AVDD_3P3.
    
    Activate the pull-up resistor to fix the issue.
    
    Fixes: ade0176dd8a0 ("arm64: dts: imx8mn-var-som: Add Variscite VAR-SOM-MX8MN System on Module")
    Signed-off-by: Hugo Villeneuve <hvilleneuve@dimonoff.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 832a4d4cdb3f612d5079aadcc67a44f18fa7b5b7
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Aug 5 10:42:00 2021 -0700

    loop: Select I/O scheduler 'none' from inside add_disk()
    
    commit 2112f5c1330a671fa852051d85cb9eadc05d7eb7 upstream.
    
    We noticed that the user interface of Android devices becomes very slow
    under memory pressure. This is because Android uses the zram driver on top
    of the loop driver for swapping, because under memory pressure the swap
    code alternates reads and writes quickly, because mq-deadline is the
    default scheduler for loop devices and because mq-deadline delays writes by
    five seconds for such a workload with default settings. Fix this by making
    the kernel select I/O scheduler 'none' from inside add_disk() for loop
    devices. This default can be overridden at any time from user space,
    e.g. via a udev rule. This approach has an advantage compared to changing
    the I/O scheduler from userspace from 'mq-deadline' into 'none', namely
    that synchronize_rcu() does not get called.
    
    This patch changes the default I/O scheduler for loop devices from
    'mq-deadline' into 'none'.
    
    Additionally, this patch reduces the Android boot time on my test setup
    with 0.5 seconds compared to configuring the loop I/O scheduler from user
    space.
    
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Martijn Coenen <maco@android.com>
    Cc: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Link: https://lore.kernel.org/r/20210805174200.3250718-3-bvanassche@acm.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f7395c382040f0cf274fd6fac35519b800afc19
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 16 22:40:17 2022 +0100

    perf: Fix function pointer case
    
    commit 1af6239d1d3e61d33fd2f0ba53d3d1a67cc50574 upstream.
    
    With the advent of CFI it is no longer acceptible to cast function
    pointers.
    
    The robot complains thusly:
    
      kernel-events-core.c:warning:cast-from-int-(-)(struct-perf_cpu_pmu_context-)-to-remote_function_f-(aka-int-(-)(void-)-)-converts-to-incompatible-function-type
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Cixi Geng <cixi.geng1@unisoc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a883b98dc737b47cc275306ef81f86efd471b9b5
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Aug 1 08:39:47 2023 -0600

    io_uring: gate iowait schedule on having pending requests
    
    Commit 7b72d661f1f2f950ab8c12de7e2bc48bdac8ed69 upstream.
    
    A previous commit made all cqring waits marked as iowait, as a way to
    improve performance for short schedules with pending IO. However, for
    use cases that have a special reaper thread that does nothing but
    wait on events on the ring, this causes a cosmetic issue where we
    know have one core marked as being "busy" with 100% iowait.
    
    While this isn't a grave issue, it is confusing to users. Rather than
    always mark us as being in iowait, gate setting of current->in_iowait
    to 1 by whether or not the waiting task has pending requests.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/io-uring/CAMEGJJ2RxopfNQ7GNLhr7X9=bHXKo+G5OOe0LUq=+UgLXsv1Xg@mail.gmail.com/
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217699
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217700
    Reported-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Reported-by: Phil Elwell <phil@raspberrypi.com>
    Tested-by: Andres Freund <andres@anarazel.de>
    Fixes: 8a796565cec3 ("io_uring: Use io_schedule* in cqring wait")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 058c0cbd251a1525a603c313931a0580d14adcfd
Author: Nadav Amit <namit@vmware.com>
Date:   Wed Jul 5 14:46:53 2023 +0800

    x86/kprobes: Fix JNG/JNLE emulation
    
    [ Upstream commit 8924779df820c53875abaeb10c648e9cb75b46d4 ]
    
    When kprobes emulates JNG/JNLE instructions on x86 it uses the wrong
    condition. For JNG (opcode: 0F 8E), according to Intel SDM, the jump is
    performed if (ZF == 1 or SF != OF). However the kernel emulation
    currently uses 'and' instead of 'or'.
    
    As a result, setting a kprobe on JNG/JNLE might cause the kernel to
    behave incorrectly whenever the kprobe is hit.
    
    Fix by changing the 'and' to 'or'.
    
    Fixes: 6256e668b7af ("x86/kprobes: Use int3 instead of debug trap for single-step")
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220813225943.143767-1-namit@vmware.com
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edc2ac7c7265b33660fa0190898966b49966b855
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Wed Jul 5 14:46:52 2023 +0800

    x86/kprobes: Update kcb status flag after singlestepping
    
    [ Upstream commit dec8784c9088b131a1523f582c2194cfc8107dc0 ]
    
    Fix kprobes to update kcb (kprobes control block) status flag to
    KPROBE_HIT_SSDONE even if the kp->post_handler is not set.
    
    This bug may cause a kernel panic if another INT3 user runs right
    after kprobes because kprobe_int3_handler() misunderstands the
    INT3 is kprobe's single stepping INT3.
    
    Fixes: 6256e668b7af ("x86/kprobes: Use int3 instead of debug trap for single-step")
    Reported-by: Daniel Müller <deso@posteo.net>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Tested-by: Daniel Müller <deso@posteo.net>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/20220727210136.jjgc3lpqeq42yr3m@muellerd-fedora-PC2BDTX9
    Link: https://lore.kernel.org/r/165942025658.342061.12452378391879093249.stgit@devnote2
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f07f3938c813baa06dc05f43a170a6eb83428e4f
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Jul 5 14:46:51 2023 +0800

    x86/kprobes: Move 'inline' to the beginning of the kprobe_is_ss() declaration
    
    [ Upstream commit 2304d14db6595bea5292bece06c4c625b12d8f89 ]
    
    Address this GCC warning:
    
      arch/x86/kernel/kprobes/core.c:940:1:
       warning: 'inline' is not at beginning of declaration [-Wold-style-declaration]
        940 | static int nokprobe_inline kprobe_is_ss(struct kprobe_ctlblk *kcb)
            | ^~~~~~
    
    [ mingo: Tidied up the changelog. ]
    
    Fixes: 6256e668b7af: ("x86/kprobes: Use int3 instead of debug trap for single-step")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Link: https://lore.kernel.org/r/20210324144502.1154883-1-weiyongjun1@huawei.com
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b5afe25f5b6eb64a1d519be627164049f9a48a6
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jul 5 14:46:50 2023 +0800

    x86/kprobes: Fix to identify indirect jmp and others using range case
    
    [ Upstream commit 2f706e0e5e263c0d204e37ea496cbb0e98aac2d2 ]
    
    Fix can_boost() to identify indirect jmp and others using range case
    correctly.
    
    Since the condition in switch statement is opcode & 0xf0, it can not
    evaluate to 0xff case. This should be under the 0xf0 case. However,
    there is no reason to use the conbinations of the bit-masked condition
    and lower bit checking.
    
    Use range case to clean up the switch statement too.
    
    Fixes: 6256e668b7 ("x86/kprobes: Use int3 instead of debug trap for single-step")
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/161666692308.1120877.4675552834049546493.stgit@devnote2
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba7d1dae9fe866abe74bb1e849fb85983b7c4c37
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jul 5 14:46:49 2023 +0800

    x86/kprobes: Use int3 instead of debug trap for single-step
    
    [ Upstream commit 6256e668b7af9d81472e03c6a171630c08f8858a ]
    
    Use int3 instead of debug trap exception for single-stepping the
    probed instructions. Some instructions which change the ip
    registers or modify IF flags are emulated because those are not
    able to be single-stepped by int3 or may allow the interrupt
    while single-stepping.
    
    This actually changes the kprobes behavior.
    
    - kprobes can not probe following instructions; int3, iret,
      far jmp/call which get absolute address as immediate,
      indirect far jmp/call, indirect near jmp/call with addressing
      by memory (register-based indirect jmp/call are OK), and
      vmcall/vmlaunch/vmresume/vmxoff.
    
    - If the kprobe post_handler doesn't set before registering,
      it may not be called in some case even if you set it afterwards.
      (IOW, kprobe booster is enabled at registration, user can not
       change it)
    
    But both are rare issue, unsupported instructions will not be
    used in the kernel (or rarely used), and post_handlers are
    rarely used (I don't see it except for the test code).
    
    Suggested-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/161469874601.49483.11985325887166921076.stgit@devnote2
    [Huafei: Fix trivial conflict in arch/x86/kernel/kprobes/core.c due to
    the previously backported commit 6dd3b8c9f5881]
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c57553a77e18b973f85194193284c388ce58b2b
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jul 5 14:46:48 2023 +0800

    x86/kprobes: Identify far indirect JMP correctly
    
    [ Upstream commit a194acd316f93f3435a64de3b37dca2b5a77b338 ]
    
    Since Grp5 far indirect JMP is FF "mod 101 r/m", it should be
    (modrm & 0x38) == 0x28, and near indirect JMP is also 0x38 == 0x20.
    So we can mask modrm with 0x30 and check 0x20.
    This is actually what the original code does, it also doesn't care
    the last bit. So the result code is same.
    
    Thus, I think this is just a cosmetic cleanup.
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/161469873475.49483.13257083019966335137.stgit@devnote2
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41db23bad95226fcf42517d44b489c1ef38acdab
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jul 5 14:46:47 2023 +0800

    x86/kprobes: Retrieve correct opcode for group instruction
    
    [ Upstream commit d60ad3d46f1d04a282c56159f1deb675c12733fd ]
    
    Since the opcodes start from 0xff are group5 instruction group which is
    not 2 bytes opcode but the extended opcode determined by the MOD/RM byte.
    
    The commit abd82e533d88 ("x86/kprobes: Do not decode opcode in resume_execution()")
    used insn->opcode.bytes[1], but that is not correct. We have to refer
    the insn->modrm.bytes[1] instead.
    
    Fixes: abd82e533d88 ("x86/kprobes: Do not decode opcode in resume_execution()")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/161469872400.49483.18214724458034233166.stgit@devnote2
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff97a14c8a86a20bf328d84d677891cb28ae746b
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jul 5 14:46:46 2023 +0800

    x86/kprobes: Do not decode opcode in resume_execution()
    
    [ Upstream commit abd82e533d88df1521e3da6799b83ce88852ab88 ]
    
    Currently, kprobes decodes the opcode right after single-stepping in
    resume_execution(). But the opcode was already decoded while preparing
    arch_specific_insn in arch_copy_kprobe().
    
    Decode the opcode in arch_copy_kprobe() instead of in resume_execution()
    and set some flags which classify the opcode for the resuming process.
    
     [ bp: Massage commit message. ]
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Link: https://lkml.kernel.org/r/160830072561.349576.3014979564448023213.stgit@devnote2
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5601d812c8d89a30ea47b1e76d3a7ceeb603ca34
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Wed Jul 5 14:46:45 2023 +0800

    kprobes/x86: Fix fall-through warnings for Clang
    
    [ Upstream commit e689b300c99ca2dd80d3f662e19499bba27cda09 ]
    
    In preparation to enable -Wimplicit-fallthrough for Clang, fix a warning
    by explicitly adding a break statement instead of just letting the code
    fall through to the next case.
    
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://github.com/KSPP/linux/issues/115
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a413fa0472610c9eccff7c4d89a6918dab8949b
Author: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date:   Thu Jul 13 13:21:12 2023 +0200

    ASoC: cs42l51: fix driver to properly autoload with automatic module loading
    
    commit e51df4f81b02bcdd828a04de7c1eb6a92988b61e upstream.
    
    In commit 2cb1e0259f50 ("ASoC: cs42l51: re-hook of_match_table
    pointer"), 9 years ago, some random guy fixed the cs42l51 after it was
    split into a core part and an I2C part to properly match based on a
    Device Tree compatible string.
    
    However, the fix in this commit is wrong: the MODULE_DEVICE_TABLE(of,
    ....) is in the core part of the driver, not the I2C part. Therefore,
    automatic module loading based on module.alias, based on matching with
    the DT compatible string, loads the core part of the driver, but not
    the I2C part. And threfore, the i2c_driver is not registered, and the
    codec is not known to the system, nor matched with a DT node with the
    corresponding compatible string.
    
    In order to fix that, we move the MODULE_DEVICE_TABLE(of, ...) into
    the I2C part of the driver. The cs42l51_of_match[] array is also moved
    as well, as it is not possible to have this definition in one file,
    and the MODULE_DEVICE_TABLE(of, ...) invocation in another file, due
    to how MODULE_DEVICE_TABLE works.
    
    Thanks to this commit, the I2C part of the driver now properly
    autoloads, and thanks to its dependency on the core part, the core
    part gets autoloaded as well, resulting in a functional sound card
    without having to manually load kernel modules.
    
    Fixes: 2cb1e0259f50 ("ASoC: cs42l51: re-hook of_match_table pointer")
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Link: https://lore.kernel.org/r/20230713112112.778576-1-thomas.petazzoni@bootlin.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d360a819453b0d695372e2f060224191e93177f
Author: Jens Axboe <axboe@kernel.dk>
Date:   Thu Jul 20 13:16:53 2023 -0600

    io_uring: treat -EAGAIN for REQ_F_NOWAIT as final for io-wq
    
    commit a9be202269580ca611c6cebac90eaf1795497800 upstream.
    
    io-wq assumes that an issue is blocking, but it may not be if the
    request type has asked for a non-blocking attempt. If we get
    -EAGAIN for that case, then we need to treat it as a final result
    and not retry or arm poll for it.
    
    Cc: stable@vger.kernel.org # 5.10+
    Link: https://github.com/axboe/liburing/issues/897
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9164e27c5a8e4ec926133ecd471469a711667dc0
Author: Matthieu Baerts <matthieu.baerts@tessares.net>
Date:   Tue Jul 4 22:44:40 2023 +0200

    selftests: mptcp: depend on SYN_COOKIES
    
    commit 6c8880fcaa5c45355179b759c1d11737775e31fc upstream.
    
    MPTCP selftests are using TCP SYN Cookies for quite a while now, since
    v5.9.
    
    Some CIs don't have this config option enabled and this is causing
    issues in the tests:
    
      # ns1 MPTCP -> ns1 (10.0.1.1:10000      ) MPTCP     (duration   167ms) sysctl: cannot stat /proc/sys/net/ipv4/tcp_syncookies: No such file or directory
      # [ OK ]./mptcp_connect.sh: line 554: [: -eq: unary operator expected
    
    There is no impact in the results but the test is not doing what it is
    supposed to do.
    
    Fixes: fed61c4b584c ("selftests: mptcp: make 2nd net namespace use tcp syn cookies unconditionally")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0acd6c3a2cd9d65f385d8ef9ecce206c1418743
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Dec 28 22:26:04 2022 +0100

    cpufreq: intel_pstate: Drop ACPI _PSS states table patching
    
    commit e8a0e30b742f76ebd0f3b196973df4bf65d8fbbb upstream.
    
    After making acpi_processor_get_platform_limit() use the "no limit"
    value for its frequency QoS request when _PPC returns 0, it is not
    necessary to replace the frequency corresponding to the first _PSS
    return package entry with the maximum turbo frequency of the given
    CPU in intel_pstate_init_acpi_perf_limits() any more, so drop the
    code doing that along with the comment explaining it.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Hagar Hemdan <hagarhem@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a241fc02f1ce391da7b67d548a315dea575a9c6d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Dec 28 22:24:10 2022 +0100

    ACPI: processor: perflib: Avoid updating frequency QoS unnecessarily
    
    commit 99387b016022c29234c4ebf9abd34358c6e56532 upstream.
    
    Modify acpi_processor_get_platform_limit() to avoid updating its
    frequency QoS request when the _PPC return value has not changed
    by comparing that value to the previous _PPC return value stored in
    the performance_platform_limit field of the struct acpi_processor
    corresponding to the given CPU.
    
    While at it, do the _PPC return value check against the state count
    earlier, to avoid setting performance_platform_limit to an invalid
    value, and make acpi_processor_ppc_init() use FREQ_QOS_MAX_DEFAULT_VALUE
    as the "no limit" frequency QoS for consistency.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Hagar Hemdan <hagarhem@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad938dd2af281a63ed8fb66a7b169a937f0a8369
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Dec 28 22:21:49 2022 +0100

    ACPI: processor: perflib: Use the "no limit" frequency QoS
    
    commit c02d5feb6e2f60affc6ba8606d8d614c071e2ba6 upstream.
    
    When _PPC returns 0, it means that the CPU frequency is not limited by
    the platform firmware, so make acpi_processor_get_platform_limit()
    update the frequency QoS request used by it to "no limit" in that case.
    
    This addresses a problem with limiting CPU frequency artificially on
    some systems after CPU offline/online to the frequency that corresponds
    to the first entry in the _PSS return package.
    
    Reported-by: Pratyush Yadav <ptyadav@amazon.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Pratyush Yadav <ptyadav@amazon.de>
    Tested-by: Pratyush Yadav <ptyadav@amazon.de>
    Tested-by: Hagar Hemdan <hagarhem@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4148f28f9824c00f81e41e729ee0a001d274a566
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Mar 12 09:34:39 2021 +0100

    drm/ttm: make ttm_bo_unpin more defensive
    
    commit 6c5403173a13a08ff61dbdafa4c0ed4a9dedbfe0 upstream.
    
    We seem to have some more driver bugs than thought.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Fixes: deb0814b43f3 ("drm/ttm: add ttm_bo_pin()/ttm_bo_unpin() v2")
    Acked-by: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210312093810.2202-1-christian.koenig@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0f2b2b020961f1346c8f07e9de43e6cca48726a
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Jul 25 11:44:41 2023 -0400

    dm cache policy smq: ensure IO doesn't prevent cleaner policy progress
    
    commit 1e4ab7b4c881cf26c1c72b3f56519e03475486fb upstream.
    
    When using the cleaner policy to decommission the cache, there is
    never any writeback started from the cache as it is constantly delayed
    due to normal I/O keeping the device busy. Meaning @idle=false was
    always being passed to clean_target_met()
    
    Fix this by adding a specific 'cleaner' flag that is set when the
    cleaner policy is configured. This flag serves to always allow the
    cleaner's writeback work to be queued until the cache is
    decommissioned (even if the cache isn't idle).
    
    Reported-by: David Jeffery <djeffery@redhat.com>
    Fixes: b29d4986d0da ("dm cache: significant rework to leverage dm-bio-prison-v2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aae65b1793bbe1ae36b6b31ce93695976e3c4acd
Author: Xiubo Li <xiubli@redhat.com>
Date:   Thu Jul 20 11:33:55 2023 +0800

    ceph: never send metrics if disable_send_metrics is set
    
    commit 50164507f6b7b7ed85d8c3ac0266849fbd908db7 upstream.
    
    Even the 'disable_send_metrics' is true so when the session is
    being opened it will always trigger to send the metric for the
    first time.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Venky Shankar <vshankar@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f669618c99f07578fd09ca453c7523b6e738375
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Jul 23 00:27:22 2023 +0100

    ASoC: wm8904: Fill the cache for WM8904_ADC_TEST_0 register
    
    commit f061e2be8689057cb4ec0dbffa9f03e1a23cdcb2 upstream.
    
    The WM8904_ADC_TEST_0 register is modified as part of updating the OSR
    controls but does not have a cache default, leading to errors when we try
    to modify these controls in cache only mode with no prior read:
    
    wm8904 3-001a: ASoC: error at snd_soc_component_update_bits on wm8904.3-001a for register: [0x000000c6] -16
    
    Add a read of the register to probe() to fill the cache and avoid both the
    error messages and the misconfiguration of the chip which will result.
    
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230723-asoc-fix-wm8904-adc-test-read-v1-1-2cdf2edd83fd@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c837f121bc988412b382625478aae771c87ff59e
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Fri Jul 21 21:36:44 2023 +0200

    s390/dasd: fix hanging device after quiesce/resume
    
    commit 05f1d8ed03f547054efbc4d29bb7991c958ede95 upstream.
    
    Quiesce and resume are functions that tell the DASD driver to stop/resume
    issuing I/Os to a specific DASD.
    
    On resume dasd_schedule_block_bh() is called to kick handling of IO
    requests again. This does unfortunately not cover internal requests which
    are used for path verification for example.
    
    This could lead to a hanging device when a path event or anything else
    that triggers internal requests occurs on a quiesced device.
    
    Fix by also calling dasd_schedule_device_bh() which triggers handling of
    internal requests on resume.
    
    Fixes: 8e09f21574ea ("[S390] dasd: add hyper PAV support to DASD device driver, part 1")
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230721193647.3889634-2-sth@linux.ibm.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 276738b382cf4067136b1ec52fdecc964d8e6105
Author: Jason Wang <jasowang@redhat.com>
Date:   Tue Jul 25 03:20:49 2023 -0400

    virtio-net: fix race between set queues and probe
    
    commit 25266128fe16d5632d43ada34c847d7b8daba539 upstream.
    
    A race were found where set_channels could be called after registering
    but before virtnet_set_queues() in virtnet_probe(). Fixing this by
    moving the virtnet_set_queues() before netdevice registering. While at
    it, use _virtnet_set_queues() to avoid holding rtnl as the device is
    not even registered at that time.
    
    Cc: stable@vger.kernel.org
    Fixes: a220871be66f ("virtio-net: correctly enable multiqueue")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Link: https://lore.kernel.org/r/20230725072049.617289-1-jasowang@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d10481a90c39497bc64350d4b03cb5ac0a62494
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jul 21 10:49:20 2023 +0100

    btrfs: check if the transaction was aborted at btrfs_wait_for_commit()
    
    [ Upstream commit bf7ecbe9875061bf3fce1883e3b26b77f847d1e8 ]
    
    At btrfs_wait_for_commit() we wait for a transaction to finish and then
    always return 0 (success) without checking if it was aborted, in which
    case the transaction didn't happen due to some critical error. Fix this
    by checking if the transaction was aborted.
    
    Fixes: 462045928bda ("Btrfs: add START_SYNC, WAIT_SYNC ioctls")
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc511ae405f7ba29fbcb0246061ec15c272386e1
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Fri Jul 14 12:54:17 2023 -0500

    staging: r8712: Fix memory leak in _r8712_init_xmit_priv()
    
    [ Upstream commit ac83631230f77dda94154ed0ebfd368fc81c70a3 ]
    
    In the above mentioned routine, memory is allocated in several places.
    If the first succeeds and a later one fails, the routine will leak memory.
    This patch fixes commit 2865d42c78a9 ("staging: r8712u: Add the new driver
    to the mainline kernel"). A potential memory leak in
    r8712_xmit_resource_alloc() is also addressed.
    
    Fixes: 2865d42c78a9 ("staging: r8712u: Add the new driver to the mainline kernel")
    Reported-by: syzbot+cf71097ffb6755df8251@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/x/log.txt?x=11ac3fa0a80000
    Cc: stable@vger.kernel.org
    Cc: Nam Cao <namcaov@gmail.com>
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Reviewed-by: Nam Cao <namcaov@gmail.com>
    Link: https://lore.kernel.org/r/20230714175417.18578-1-Larry.Finger@lwfinger.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 223ecf871b42fda915b1eba88b85a0d785436795
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Apr 6 22:41:32 2021 +0200

    staging: rtl8712: Use constants from <linux/ieee80211.h>
    
    [ Upstream commit f179515da9780c4cd37bee76c3cbb6f7364451d6 ]
    
    Some constants defined in wifi.h are already defined in <linux/ieee80211.h>
    with some other (but similar) names.
    Be consistent and use the ones from <linux/ieee80211.h>.
    
    The conversions made are:
    _SSID_IE_                -->  WLAN_EID_SSID
    _SUPPORTEDRATES_IE_      -->  WLAN_EID_SUPP_RATES
    _DSSET_IE_               -->  WLAN_EID_DS_PARAMS
    _IBSS_PARA_IE_           -->  WLAN_EID_IBSS_PARAMS
    _ERPINFO_IE_             -->  WLAN_EID_ERP_INFO
    _EXT_SUPPORTEDRATES_IE_  -->  WLAN_EID_EXT_SUPP_RATES
    
    _HT_CAPABILITY_IE_       -->  WLAN_EID_HT_CAPABILITY
    _HT_EXTRA_INFO_IE_       -->  WLAN_EID_HT_OPERATION    (not used)
    _HT_ADD_INFO_IE_         -->  WLAN_EID_HT_OPERATION
    
    _VENDOR_SPECIFIC_IE_     -->  WLAN_EID_VENDOR_SPECIFIC
    
    _RESERVED47_             --> (not used)
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/fe35fb45323adc3a30f31b7280cec7700fd325d8.1617741313.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: ac83631230f7 ("staging: r8712: Fix memory leak in _r8712_init_xmit_priv()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 836b13168336c000fa5bac258f11c555711268fc
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Jun 13 13:30:36 2023 -0700

    KVM: VMX: Don't fudge CR0 and CR4 for restricted L2 guest
    
    [ Upstream commit c4abd7352023aa96114915a0bb2b88016a425cda ]
    
    Stuff CR0 and/or CR4 to be compliant with a restricted guest if and only
    if KVM itself is not configured to utilize unrestricted guests, i.e. don't
    stuff CR0/CR4 for a restricted L2 that is running as the guest of an
    unrestricted L1.  Any attempt to VM-Enter a restricted guest with invalid
    CR0/CR4 values should fail, i.e. in a nested scenario, KVM (as L0) should
    never observe a restricted L2 with incompatible CR0/CR4, since nested
    VM-Enter from L1 should have failed.
    
    And if KVM does observe an active, restricted L2 with incompatible state,
    e.g. due to a KVM bug, fudging CR0/CR4 instead of letting VM-Enter fail
    does more harm than good, as KVM will often neglect to undo the side
    effects, e.g. won't clear rmode.vm86_active on nested VM-Exit, and thus
    the damage can easily spill over to L1.  On the other hand, letting
    VM-Enter fail due to bad guest state is more likely to contain the damage
    to L2 as KVM relies on hardware to perform most guest state consistency
    checks, i.e. KVM needs to be able to reflect a failed nested VM-Enter into
    L1 irrespective of (un)restricted guest behavior.
    
    Cc: Jim Mattson <jmattson@google.com>
    Cc: stable@vger.kernel.org
    Fixes: bddd82d19e2e ("KVM: nVMX: KVM needs to unset "unrestricted guest" VM-execution control in vmcs02 if vmcs12 doesn't set it")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230613203037.1968489-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c710ff061237f10269eb18c4a8f435a64138b26a
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Jul 13 09:33:02 2021 -0700

    KVM: nVMX: Do not clear CR3 load/store exiting bits if L1 wants 'em
    
    [ Upstream commit 470750b3425513b9f63f176e564e63e0e7998afc ]
    
    Keep CR3 load/store exiting enable as needed when running L2 in order to
    honor L1's desires.  This fixes a largely theoretical bug where L1 could
    intercept CR3 but not CR0.PG and end up not getting the desired CR3 exits
    when L2 enables paging.  In other words, the existing !is_paging() check
    inadvertantly handles the normal case for L2 where vmx_set_cr0() is
    called during VM-Enter, which is guaranteed to run with paging enabled,
    and thus will never clear the bits.
    
    Removing the !is_paging() check will also allow future consolidation and
    cleanup of the related code.  From a performance perspective, this is
    all a nop, as the VMCS controls shadow will optimize away the VMWRITE
    when the controls are in the desired state.
    
    Add a comment explaining why CR3 is intercepted, with a big disclaimer
    about not querying the old CR3.  Because vmx_set_cr0() is used for flows
    that are not directly tied to MOV CR3, e.g. vCPU RESET/INIT and nested
    VM-Enter, it's possible that is_paging() is not synchronized with CR3
    load/store exiting.  This is actually guaranteed in the current code, as
    KVM starts with CR3 interception disabled.  Obviously that can be fixed,
    but there's no good reason to play whack-a-mole, and it tends to end
    poorly, e.g. descriptor table exiting for UMIP emulation attempted to be
    precise in the past and ended up botching the interception toggling.
    
    Fixes: fe3ef05c7572 ("KVM: nVMX: Prepare vmcs02 from vmcs01 and vmcs12")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210713163324.627647-25-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: c4abd7352023 ("KVM: VMX: Don't fudge CR0 and CR4 for restricted L2 guest")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fc51da40b9d14491d90f21fc2ac769241b6840b
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Jul 13 09:33:01 2021 -0700

    KVM: VMX: Fold ept_update_paging_mode_cr0() back into vmx_set_cr0()
    
    [ Upstream commit c834fd7fc1308a0e0429d203a6c3af528cd902fa ]
    
    Move the CR0/CR3/CR4 shenanigans for EPT without unrestricted guest back
    into vmx_set_cr0().  This will allow a future patch to eliminate the
    rather gross stuffing of vcpu->arch.cr0 in the paging transition cases
    by snapshotting the old CR0.
    
    No functional change intended.
    
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210713163324.627647-24-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: c4abd7352023 ("KVM: VMX: Don't fudge CR0 and CR4 for restricted L2 guest")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96c73bc9efef5d1d2a9d6a1ef0da9609f7694109
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Jul 13 09:32:59 2021 -0700

    KVM: VMX: Invert handling of CR0.WP for EPT without unrestricted guest
    
    [ Upstream commit ee5a5584cba316bc90bc2fad0c6d10b71f1791cb ]
    
    Opt-in to forcing CR0.WP=1 for shadow paging, and stop lying about WP
    being "always on" for unrestricted guest.  In addition to making KVM a
    wee bit more honest, this paves the way for additional cleanup.
    
    No functional change intended.
    
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210713163324.627647-22-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: c4abd7352023 ("KVM: VMX: Don't fudge CR0 and CR4 for restricted L2 guest")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90cd5ab951ea202b83d7b49b61bfb6014b5fc848
Author: Marc Zyngier <maz@kernel.org>
Date:   Sat Jun 17 08:32:42 2023 +0100

    irqchip/gic-v4.1: Properly lock VPEs when doing a directLPI invalidation
    
    [ Upstream commit 926846a703cbf5d0635cc06e67d34b228746554b ]
    
    We normally rely on the irq_to_cpuid_[un]lock() primitives to make
    sure nothing will change col->idx while performing a LPI invalidation.
    
    However, these primitives do not cover VPE doorbells, and we have
    some open-coded locking for that. Unfortunately, this locking is
    pretty bogus.
    
    Instead, extend the above primitives to cover VPE doorbells and
    convert the whole thing to it.
    
    Fixes: f3a059219bc7 ("irqchip/gic-v4.1: Ensure mutual exclusion between vPE affinity change and RD access")
    Reported-by: Kunkun Jiang <jiangkunkun@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: Zenghui Yu <yuzenghui@huawei.com>
    Cc: wanghaibin.wang@huawei.com
    Tested-by: Kunkun Jiang <jiangkunkun@huawei.com>
    Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
    Link: https://lore.kernel.org/r/20230617073242.3199746-1-maz@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57b8db5800a5da054f146939fcf9764daf0c2475
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Thu Jun 29 09:26:20 2023 +0200

    irq-bcm6345-l1: Do not assume a fixed block to cpu mapping
    
    [ Upstream commit 55ad24857341c36616ecc1d9580af5626c226cf1 ]
    
    The irq to block mapping is fixed, and interrupts from the first block
    will always be routed to the first parent IRQ. But the parent interrupts
    themselves can be routed to any available CPU.
    
    This is used by the bootloader to map the first parent interrupt to the
    boot CPU, regardless wether the boot CPU is the first one or the second
    one.
    
    When booting from the second CPU, the assumption that the first block's
    IRQ is mapped to the first CPU breaks, and the system hangs because
    interrupts do not get routed correctly.
    
    Fix this by passing the appropriate bcm6434_l1_cpu to the interrupt
    handler instead of the chip itself, so the handler always has the right
    block.
    
    Fixes: c7c42ec2baa1 ("irqchips/bmips: Add bcm6345-l1 interrupt controller")
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@linaro.org>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20230629072620.62527-1-jonas.gorski@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1867cddd780965e049e6ef9bf3cdad7ae6ea184
Author: Alexander Steffen <Alexander.Steffen@infineon.com>
Date:   Tue Jun 13 20:02:56 2023 +0200

    tpm_tis: Explicitly check for error code
    
    commit 513253f8c293c0c8bd46d09d337fc892bf8f9f48 upstream.
    
    recv_data either returns the number of received bytes, or a negative value
    representing an error code. Adding the return value directly to the total
    number of received bytes therefore looks a little weird, since it might add
    a negative error code to a sum of bytes.
    
    The following check for size < expected usually makes the function return
    ETIME in that case, so it does not cause too many problems in practice. But
    to make the code look cleaner and because the caller might still be
    interested in the original error code, explicitly check for the presence of
    an error code and pass that through.
    
    Cc: stable@vger.kernel.org
    Fixes: cb5354253af2 ("[PATCH] tpm: spacing cleanups 2")
    Signed-off-by: Alexander Steffen <Alexander.Steffen@infineon.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5be81139d2ffc5f7bcc8996d65c8028f7a83a714
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Jul 18 08:38:37 2023 -0400

    nfsd: Remove incorrect check in nfsd4_validate_stateid
    
    commit f75546f58a70da5cfdcec5a45ffc377885ccbee8 upstream.
    
    If the client is calling TEST_STATEID, then it is because some event
    occurred that requires it to check all the stateids for validity and
    call FREE_STATEID on the ones that have been revoked. In this case,
    either the stateid exists in the list of stateids associated with that
    nfs4_client, in which case it should be tested, or it does not. There
    are no additional conditions to be considered.
    
    Reported-by: "Frank Ch. Eigler" <fche@redhat.com>
    Fixes: 7df302f75ee2 ("NFSD: TEST_STATEID should not return NFS4ERR_STALE_STATEID")
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a871fcebc0290c88d41a3ec19f99e31ec7d6606
Author: Christian Brauner <brauner@kernel.org>
Date:   Mon Jul 24 17:00:49 2023 +0200

    file: always lock position for FMODE_ATOMIC_POS
    
    commit 20ea1e7d13c1b544fe67c4a8dc3943bb1ab33e6f upstream.
    
    The pidfd_getfd() system call allows a caller with ptrace_may_access()
    abilities on another process to steal a file descriptor from this
    process. This system call is used by debuggers, container runtimes,
    system call supervisors, networking proxies etc. So while it is a
    special interest system call it is used in common tools.
    
    That ability ends up breaking our long-time optimization in fdget_pos(),
    which "knew" that if we had exclusive access to the file descriptor
    nobody else could access it, and we didn't need the lock for the file
    position.
    
    That check for file_count(file) was always fairly subtle - it depended
    on __fdget() not incrementing the file count for single-threaded
    processes and thus included that as part of the rule - but it did mean
    that we didn't need to take the lock in all those traditional unix
    process contexts.
    
    So it's sad to see this go, and I'd love to have some way to re-instate
    the optimization. At the same time, the lock obviously isn't ever
    contended in the case we optimized, so all we were optimizing away is
    the atomics and the cacheline dirtying. Let's see if anybody even
    notices that the optimization is gone.
    
    Link: https://lore.kernel.org/linux-fsdevel/20230724-vfs-fdget_pos-v1-1-a4abfd7103f3@kernel.org/
    Fixes: 8649c322f75c ("pid: Implement pidfd_getfd syscall")
    Cc: stable@kernel.org
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5c797ccc3b58aef012a9f8d344580b28e4e77dc
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jul 21 10:49:21 2023 +0100

    btrfs: check for commit error at btrfs_attach_transaction_barrier()
    
    commit b28ff3a7d7e97456fd86b68d24caa32e1cfa7064 upstream.
    
    btrfs_attach_transaction_barrier() is used to get a handle pointing to the
    current running transaction if the transaction has not started its commit
    yet (its state is < TRANS_STATE_COMMIT_START). If the transaction commit
    has started, then we wait for the transaction to commit and finish before
    returning - however we completely ignore if the transaction was aborted
    due to some error during its commit, we simply return ERR_PT(-ENOENT),
    which makes the caller assume everything is fine and no errors happened.
    
    This could make an fsync return success (0) to user space when in fact we
    had a transaction abort and the target inode changes were therefore not
    persisted.
    
    Fix this by checking for the return value from btrfs_wait_for_commit(),
    and if it returned an error, return it back to the caller.
    
    Fixes: d4edf39bd5db ("Btrfs: fix uncompleted transaction")
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e0e4e72ca21f58acdab429ebe05673792378f23
Author: Gilles Buloz <Gilles.Buloz@kontron.com>
Date:   Mon Jul 24 08:04:44 2023 +0000

    hwmon: (nct7802) Fix for temp6 (PECI1) processed even if PECI1 disabled
    
    commit 54685abe660a59402344d5045ce08c43c6a5ac42 upstream.
    
    Because of hex value 0x46 used instead of decimal 46, the temp6
    (PECI1) temperature is always declared visible and then displayed
    even if disabled in the chip
    
    Signed-off-by: Gilles Buloz <gilles.buloz@kontron.com>
    Link: https://lore.kernel.org/r/DU0PR10MB62526435ADBC6A85243B90E08002A@DU0PR10MB6252.EURPRD10.PROD.OUTLOOK.COM
    Fixes: fcdc5739dce03 ("hwmon: (nct7802) add temperature sensor type attribute")
    Cc: stable@vger.kernel.org
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c6df7f0fc3dfc951b4f6ff2bfcf3209e8b96ef4
Author: Luka Guzenko <l.guzenko@web.de>
Date:   Tue Jul 25 13:15:09 2023 +0200

    ALSA: hda/relatek: Enable Mute LED on HP 250 G8
    
    commit d510acb610e6aa07a04b688236868b2a5fd60deb upstream.
    
    This HP Notebook used ALC236 codec with COEF 0x07 idx 1 controlling
    the mute LED. Enable already existing quirk for this device.
    
    Signed-off-by: Luka Guzenko <l.guzenko@web.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230725111509.623773-1-l.guzenko@web.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fc0eabaa73bbd9bd705577071564616da5c8c61
Author: Chaoyuan Peng <hedonistsmith@gmail.com>
Date:   Tue Jul 18 04:39:43 2023 +0000

    tty: n_gsm: fix UAF in gsm_cleanup_mux
    
    commit 9b9c8195f3f0d74a826077fc1c01b9ee74907239 upstream.
    
    In gsm_cleanup_mux() the 'gsm->dlci' pointer was not cleaned properly,
    leaving it a dangling pointer after gsm_dlci_release.
    This leads to use-after-free where 'gsm->dlci[0]' are freed and accessed
    by the subsequent gsm_cleanup_mux().
    
    Such is the case in the following call trace:
    
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x1e3/0x2cb lib/dump_stack.c:106
     print_address_description+0x63/0x3b0 mm/kasan/report.c:248
     __kasan_report mm/kasan/report.c:434 [inline]
     kasan_report+0x16b/0x1c0 mm/kasan/report.c:451
     gsm_cleanup_mux+0x76a/0x850 drivers/tty/n_gsm.c:2397
     gsm_config drivers/tty/n_gsm.c:2653 [inline]
     gsmld_ioctl+0xaae/0x15b0 drivers/tty/n_gsm.c:2986
     tty_ioctl+0x8ff/0xc50 drivers/tty/tty_io.c:2816
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl+0xf1/0x160 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x61/0xcb
     </TASK>
    
    Allocated by task 3501:
     kasan_save_stack mm/kasan/common.c:38 [inline]
     kasan_set_track mm/kasan/common.c:46 [inline]
     set_alloc_info mm/kasan/common.c:434 [inline]
     ____kasan_kmalloc+0xba/0xf0 mm/kasan/common.c:513
     kasan_kmalloc include/linux/kasan.h:264 [inline]
     kmem_cache_alloc_trace+0x143/0x290 mm/slub.c:3247
     kmalloc include/linux/slab.h:591 [inline]
     kzalloc include/linux/slab.h:721 [inline]
     gsm_dlci_alloc+0x53/0x3a0 drivers/tty/n_gsm.c:1932
     gsm_activate_mux+0x1c/0x330 drivers/tty/n_gsm.c:2438
     gsm_config drivers/tty/n_gsm.c:2677 [inline]
     gsmld_ioctl+0xd46/0x15b0 drivers/tty/n_gsm.c:2986
     tty_ioctl+0x8ff/0xc50 drivers/tty/tty_io.c:2816
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl+0xf1/0x160 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x61/0xcb
    
    Freed by task 3501:
     kasan_save_stack mm/kasan/common.c:38 [inline]
     kasan_set_track+0x4b/0x80 mm/kasan/common.c:46
     kasan_set_free_info+0x1f/0x40 mm/kasan/generic.c:360
     ____kasan_slab_free+0xd8/0x120 mm/kasan/common.c:366
     kasan_slab_free include/linux/kasan.h:230 [inline]
     slab_free_hook mm/slub.c:1705 [inline]
     slab_free_freelist_hook+0xdd/0x160 mm/slub.c:1731
     slab_free mm/slub.c:3499 [inline]
     kfree+0xf1/0x270 mm/slub.c:4559
     dlci_put drivers/tty/n_gsm.c:1988 [inline]
     gsm_dlci_release drivers/tty/n_gsm.c:2021 [inline]
     gsm_cleanup_mux+0x574/0x850 drivers/tty/n_gsm.c:2415
     gsm_config drivers/tty/n_gsm.c:2653 [inline]
     gsmld_ioctl+0xaae/0x15b0 drivers/tty/n_gsm.c:2986
     tty_ioctl+0x8ff/0xc50 drivers/tty/tty_io.c:2816
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl+0xf1/0x160 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x61/0xcb
    
    Fixes: aa371e96f05d ("tty: n_gsm: fix restart handling via CLD command")
    Signed-off-by: Chaoyuan Peng <hedonistsmith@gmail.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caac4b6c15b66feae4d83f602e1e46f124540202
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Sun Jul 9 13:50:07 2023 +0800

    staging: ks7010: potential buffer overflow in ks_wlan_set_encode_ext()
    
    commit 5f1c7031e044cb2fba82836d55cc235e2ad619dc upstream.
    
    The "exc->key_len" is a u16 that comes from the user.  If it's over
    IW_ENCODING_TOKEN_MAX (64) that could lead to memory corruption.
    
    Fixes: b121d84882b9 ("staging: ks7010: simplify calls to memcpy()")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/tencent_5153B668C0283CAA15AA518325346E026A09@qq.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baef414b1ca020c88bda023b891cd15bcdb6c609
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jun 30 09:14:21 2023 +0200

    Documentation: security-bugs.rst: clarify CVE handling
    
    commit 3c1897ae4b6bc7cc586eda2feaa2cd68325ec29c upstream.
    
    The kernel security team does NOT assign CVEs, so document that properly
    and provide the "if you want one, ask MITRE for it" response that we
    give on a weekly basis in the document, so we don't have to constantly
    say it to everyone who asks.
    
    Link: https://lore.kernel.org/r/2023063022-retouch-kerosene-7e4a@gregkh
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d5b23743bedfdbc385b53c69daefd43aa84e152
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jun 30 09:14:20 2023 +0200

    Documentation: security-bugs.rst: update preferences when dealing with the linux-distros group
    
    commit 4fee0915e649bd0cea56dece6d96f8f4643df33c upstream.
    
    Because the linux-distros group forces reporters to release information
    about reported bugs, and they impose arbitrary deadlines in having those
    bugs fixed despite not actually being kernel developers, the kernel
    security team recommends not interacting with them at all as this just
    causes confusion and the early-release of reported security problems.
    
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/2023063020-throat-pantyhose-f110@gregkh
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65cd02e3c37e431be841d859fab8d2e10ecc7bc8
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Tue Jul 4 17:08:27 2023 +0300

    Revert "usb: xhci: tegra: Fix error check"
    
    commit 288b4fa1798e3637a9304c6e90a93d900e02369c upstream.
    
    This reverts commit 18fc7c435be3f17ea26a21b2e2312fcb9088e01f.
    
    The reverted commit was based on static analysis and a misunderstanding
    of how PTR_ERR() and NULLs are supposed to work.  When a function
    returns both pointer errors and NULL then normally the NULL means
    "continue operating without a feature because it was deliberately
    turned off".  The NULL should not be treated as a failure.  If a driver
    cannot work when that feature is disabled then the KConfig should
    enforce that the function cannot return NULL.  We should not need to
    test for it.
    
    In this code, the patch means that certain tegra_xusb_probe() will
    fail if the firmware supports power-domains but CONFIG_PM is disabled.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Fixes: 18fc7c435be3 ("usb: xhci: tegra: Fix error check")
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/8baace8d-fb4b-41a4-ad5f-848ae643a23b@moroto.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0fd110578e78c21063c73704f859375c4faabd0
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Wed Jul 19 13:01:04 2023 +0000

    usb: xhci-mtk: set the dma max_seg_size
    
    commit 9fd10829a9eb482e192a845675ecc5480e0bfa10 upstream.
    
    Allow devices to have dma operations beyond 64K, and avoid warnings such
    as:
    
    DMA-API: xhci-mtk 11200000.usb: mapping sg segment longer than device claims to support [len=98304] [max=65536]
    
    Fixes: 0cbd4b34cda9 ("xhci: mediatek: support MTK xHCI host controller")
    Cc: stable <stable@kernel.org>
    Tested-by: Zubin Mithra <zsm@chromium.org>
    Reported-by: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Link: https://lore.kernel.org/r/20230628-mtk-usb-v2-1-c8c34eb9f229@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0b588bbe4d9d0777418415d870b455c1293c8b4
Author: Łukasz Bartosik <lb@semihalf.com>
Date:   Mon Jul 24 13:29:11 2023 +0200

    USB: quirks: add quirk for Focusrite Scarlett
    
    commit 9dc162e22387080e2d06de708b89920c0e158c9a upstream.
    
    The Focusrite Scarlett audio device does not behave correctly during
    resumes. Below is what happens during every resume (captured with
    Beagle 5000):
    
    <Suspend>
    <Resume>
    <Reset>/<Chirp J>/<Tiny J>
    <Reset/Target disconnected>
    <High Speed>
    
    The Scarlett disconnects and is enumerated again.
    
    However from time to time it drops completely off the USB bus during
    resume. Below is captured occurrence of such an event:
    
    <Suspend>
    <Resume>
    <Reset>/<Chirp J>/<Tiny J>
    <Reset>/<Chirp K>/<Tiny K>
    <High Speed>
    <Corrupted packet>
    <Reset/Target disconnected>
    
    To fix the condition a user has to unplug and plug the device again.
    
    With USB_QUIRK_RESET_RESUME applied ("usbcore.quirks=1235:8211:b")
    for the Scarlett audio device the issue still reproduces.
    
    Applying USB_QUIRK_DISCONNECT_SUSPEND ("usbcore.quirks=1235:8211:m")
    fixed the issue and the Scarlett audio device didn't drop off the USB
    bus for ~5000 suspend/resume cycles where originally issue reproduced in
    ~100 or less suspend/resume cycles.
    
    Signed-off-by: Łukasz Bartosik <lb@semihalf.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230724112911.1802577-1-lb@semihalf.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66a622275a11fb070b4dae3926d3a1a5d9cbecda
Author: Guiting Shen <aarongt.shen@gmail.com>
Date:   Mon Jun 26 23:27:13 2023 +0800

    usb: ohci-at91: Fix the unhandle interrupt when resume
    
    commit c55afcbeaa7a6f4fffdbc999a9bf3f0b29a5186f upstream.
    
    The ohci_hcd_at91_drv_suspend() sets ohci->rh_state to OHCI_RH_HALTED when
    suspend which will let the ohci_irq() skip the interrupt after resume. And
    nobody to handle this interrupt.
    
    According to the comment in ohci_hcd_at91_drv_suspend(), it need to reset
    when resume from suspend(MEM) to fix by setting "hibernated" argument of
    ohci_resume().
    
    Signed-off-by: Guiting Shen <aarongt.shen@gmail.com>
    Cc: stable <stable@kernel.org>
    Reviewed-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20230626152713.18950-1-aarongt.shen@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96c433aff5fd427fde29aba18dbec3df60e8c538
Author: Jisheng Zhang <jszhang@kernel.org>
Date:   Wed Jun 28 00:20:18 2023 +0800

    usb: dwc3: don't reset device side if dwc3 was configured as host-only
    
    commit e835c0a4e23c38531dcee5ef77e8d1cf462658c7 upstream.
    
    Commit c4a5153e87fd ("usb: dwc3: core: Power-off core/PHYs on
    system_suspend in host mode") replaces check for HOST only dr_mode with
    current_dr_role. But during booting, the current_dr_role isn't
    initialized, thus the device side reset is always issued even if dwc3
    was configured as host-only. What's more, on some platforms with host
    only dwc3, aways issuing device side reset by accessing device register
    block can cause kernel panic.
    
    Fixes: c4a5153e87fd ("usb: dwc3: core: Power-off core/PHYs on system_suspend in host mode")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Jisheng Zhang <jszhang@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230627162018.739-1-jszhang@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05b201de44184574f95cf73dccd1c188ef32d1c7
Author: Gratian Crisan <gratian.crisan@ni.com>
Date:   Wed Jul 26 13:45:56 2023 -0500

    usb: dwc3: pci: skip BYT GPIO lookup table for hardwired phy
    
    commit b32b8f2b9542d8039f5468303a6ca78c1b5611a5 upstream.
    
    Hardware based on the Bay Trail / BYT SoCs require an external ULPI phy for
    USB device-mode. The phy chip usually has its 'reset' and 'chip select'
    lines connected to GPIOs described by ACPI fwnodes in the DSDT table.
    
    Because of hardware with missing ACPI resources for the 'reset' and 'chip
    select' GPIOs commit 5741022cbdf3 ("usb: dwc3: pci: Add GPIO lookup table
    on platforms without ACPI GPIO resources") introduced a fallback
    gpiod_lookup_table with hard-coded mappings for Bay Trail devices.
    
    However there are existing Bay Trail based devices, like the National
    Instruments cRIO-903x series, where the phy chip has its 'reset' and
    'chip-select' lines always asserted in hardware via resistor pull-ups. On
    this hardware the phy chip is always enabled and the ACPI dsdt table is
    missing information not only for the 'chip-select' and 'reset' lines but
    also for the BYT GPIO controller itself "INT33FC".
    
    With the introduction of the gpiod_lookup_table initializing the USB
    device-mode on these hardware now errors out. The error comes from the
    gpiod_get_optional() calls in dwc3_pci_quirks() which will now return an
    -ENOENT error due to the missing ACPI entry for the INT33FC gpio controller
    used in the aforementioned table.
    
    This hardware used to work before because gpiod_get_optional() will return
    NULL instead of -ENOENT if no GPIO has been assigned to the requested
    function. The dwc3_pci_quirks() code for setting the 'cs' and 'reset' GPIOs
    was then skipped (due to the NULL return). This is the correct behavior in
    cases where the phy chip is hardwired and there are no GPIOs to control.
    
    Since the gpiod_lookup_table relies on the presence of INT33FC fwnode
    in ACPI tables only add the table if we know the entry for the INT33FC
    gpio controller is present. This allows Bay Trail based devices with
    hardwired dwc3 ULPI phys to continue working.
    
    Fixes: 5741022cbdf3 ("usb: dwc3: pci: Add GPIO lookup table on platforms without ACPI GPIO resources")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Gratian Crisan <gratian.crisan@ni.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230726184555.218091-2-gratian.crisan@ni.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75ad45cef6992caa3ce374f53f5b5d07221f3d97
Author: Jakub Vanek <linuxtardis@gmail.com>
Date:   Fri Jul 14 14:24:19 2023 +0200

    Revert "usb: dwc3: core: Enable AutoRetry feature in the controller"
    
    commit 734ae15ab95a18d3d425fc9cb38b7a627d786f08 upstream.
    
    This reverts commit b138e23d3dff90c0494925b4c1874227b81bddf7.
    
    AutoRetry has been found to sometimes cause controller freezes when
    communicating with buggy USB devices.
    
    This controller feature allows the controller in host mode to send
    non-terminating/burst retry ACKs instead of terminating retry ACKs
    to devices when a transaction error (CRC error or overflow) occurs.
    
    Unfortunately, if the USB device continues to respond with a CRC error,
    the controller will not complete endpoint-related commands while it
    keeps trying to auto-retry. [3] The xHCI driver will notice this once
    it tries to abort the transfer using a Stop Endpoint command and
    does not receive a completion in time. [1]
    This situation is reported to dmesg:
    
    [sda] tag#29 uas_eh_abort_handler 0 uas-tag 1 inflight: CMD IN
    [sda] tag#29 CDB: opcode=0x28 28 00 00 69 42 80 00 00 48 00
    xhci-hcd: xHCI host not responding to stop endpoint command
    xhci-hcd: xHCI host controller not responding, assume dead
    xhci-hcd: HC died; cleaning up
    
    Some users observed this problem on an Odroid HC2 with the JMS578
    USB3-to-SATA bridge. The issue can be triggered by starting
    a read-heavy workload on an attached SSD. After a while, the host
    controller would die and the SSD would disappear from the system. [1]
    
    Further analysis by Synopsys determined that controller revisions
    other than the one in Odroid HC2 are also affected by this.
    The recommended solution was to disable AutoRetry altogether.
    This change does not have a noticeable performance impact. [2]
    
    Revert the enablement commit. This will keep the AutoRetry bit in
    the default state configured during SoC design [2].
    
    Fixes: b138e23d3dff ("usb: dwc3: core: Enable AutoRetry feature in the controller")
    Link: https://lore.kernel.org/r/a21f34c04632d250cd0a78c7c6f4a1c9c7a43142.camel@gmail.com/ [1]
    Link: https://lore.kernel.org/r/20230711214834.kyr6ulync32d4ktk@synopsys.com/ [2]
    Link: https://lore.kernel.org/r/20230712225518.2smu7wse6djc7l5o@synopsys.com/ [3]
    Cc: stable@vger.kernel.org
    Cc: Mauro Ribeiro <mauro.ribeiro@hardkernel.com>
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Suggested-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Jakub Vanek <linuxtardis@gmail.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230714122419.27741-1-linuxtardis@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf468806b63fde296238fc7bf2fcb6e123d8596b
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Jul 18 11:43:54 2023 +0200

    can: gs_usb: gs_can_close(): add missing set of CAN state to CAN_STATE_STOPPED
    
    commit f8a2da6ec2417cca169fa85a8ab15817bccbb109 upstream.
    
    After an initial link up the CAN device is in ERROR-ACTIVE mode. Due
    to a missing CAN_STATE_STOPPED in gs_can_close() it doesn't change to
    STOPPED after a link down:
    
    | ip link set dev can0 up
    | ip link set dev can0 down
    | ip --details link show can0
    | 13: can0: <NOARP,ECHO> mtu 16 qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 10
    |     link/can  promiscuity 0 allmulti 0 minmtu 0 maxmtu 0
    |     can state ERROR-ACTIVE restart-ms 1000
    
    Add missing assignment of CAN_STATE_STOPPED in gs_can_close().
    
    Cc: stable@vger.kernel.org
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Link: https://lore.kernel.org/all/20230718-gs_usb-fix-can-state-v1-1-f19738ae2c23@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5db33a667f5ee181cc4cb0d2d2d5b0407e431ca
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Jul 20 09:53:57 2023 +0200

    USB: serial: simple: sort driver entries
    
    commit d245aedc00775c4d7265a9f4522cc4e1fd34d102 upstream.
    
    Sort the driver symbols alphabetically in order to make it more obvious
    where new driver entries should be added.
    
    Cc: stable@vger.kernel.org
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81c54eef1dd7c3cc9c3c4fde83b3149d0e55b044
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Jul 12 16:16:41 2023 +0200

    USB: serial: simple: add Kaufmann RKS+CAN VCP
    
    commit dd92c8a1f99bcd166204ffc219ea5a23dd65d64f upstream.
    
    Add the device and product ID for this CAN bus interface / license
    dongle. The device is usable either directly from user space or can be
    attached to a kernel CAN interface with slcan_attach.
    
    Reported-by: Kaufmann Automotive GmbH <info@kaufmann-automotive.ch>
    Tested-by: Kaufmann Automotive GmbH <info@kaufmann-automotive.ch>
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    [ johan: amend commit message and move entries in sort order ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fca2a74eee5a2de09766d0186f4ad52d776e177d
Author: Mohsen Tahmasebi <moh53n@moh53n.ir>
Date:   Mon Jul 10 11:22:18 2023 +0330

    USB: serial: option: add Quectel EC200A module support
    
    commit 857ea9005806e2a458016880278f98715873e977 upstream.
    
    Add Quectel EC200A "DIAG, AT, MODEM":
    
    0x6005: ECM / RNDIS + DIAG + AT + MODEM
    
    T:  Bus=01 Lev=01 Prnt=02 Port=05 Cnt=01 Dev#=  8 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=6005 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=0000
    C:  #Ifs= 5 Cfg#= 1 Atr=e0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:  If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=0c(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=0b(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=89(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:  If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=0a(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    
    Signed-off-by: Mohsen Tahmasebi <moh53n@moh53n.ir>
    Tested-by: Mostafa Ghofrani <mostafaghrr@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c704cb21138bad853d96b5005c6d4722659cf95a
Author: Jerry Meng <jerry-meng@foxmail.com>
Date:   Thu Jun 29 17:35:22 2023 +0800

    USB: serial: option: support Quectel EM060K_128
    
    commit 4f7cab49cecee16120d27c1734cfdf3d6c0e5329 upstream.
    
    EM060K_128 is EM060K's sub-model, having the same name "Quectel EM060K-GL"
    
    MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    
    T:  Bus=03 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  8 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0128 Rev= 5.04
    S:  Manufacturer=Quectel
    S:  Product=Quectel EM060K-GL
    S:  SerialNumber=f6fa08b6
    C:* #Ifs= 8 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=82(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=70 Driver=(none)
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 7 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=80 Driver=(none)
    E:  Ad=8f(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Jerry Meng <jerry-meng@foxmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1037ee1dbf739a12b2861ea15197f3fb02fc975b
Author: Samuel Holland <samuel.holland@sifive.com>
Date:   Fri Jun 23 23:01:59 2023 -0700

    serial: sifive: Fix sifive_serial_console_setup() section
    
    commit 9b8fef6345d5487137d4193bb0a0eae2203c284e upstream.
    
    This function is called indirectly from the platform driver probe
    function. Even if the driver is built in, it may be probed after
    free_initmem() due to deferral or unbinding/binding via sysfs.
    Thus the function cannot be marked as __init.
    
    Fixes: 45c054d0815b ("tty: serial: add driver for the SiFive UART")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Samuel Holland <samuel.holland@sifive.com>
    Link: https://lore.kernel.org/r/20230624060159.3401369-1-samuel.holland@sifive.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6209a7383d3a893cc712b45358e2be007cd0f128
Author: Ruihong Luo <colorsu1922@gmail.com>
Date:   Thu Jul 13 08:42:36 2023 +0800

    serial: 8250_dw: Preserve original value of DLF register
    
    commit 748c5ea8b8796ae8ee80b8d3a3d940570b588d59 upstream.
    
    Preserve the original value of the Divisor Latch Fraction (DLF) register.
    When the DLF register is modified without preservation, it can disrupt
    the baudrate settings established by firmware or bootloader, leading to
    data corruption and the generation of unreadable or distorted characters.
    
    Fixes: 701c5e73b296 ("serial: 8250_dw: add fractional divisor support")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ruihong Luo <colorsu1922@gmail.com>
    Link: https://lore.kernel.org/stable/20230713004235.35904-1-colorsu1922%40gmail.com
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20230713004235.35904-1-colorsu1922@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e671a6116f4fb171429148efc4ef1c1cce7dd60
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Thu Jul 13 16:57:41 2023 +0200

    serial: qcom-geni: drop bogus runtime pm state update
    
    commit 4dd8752a14ca0303fbdf0a6c68ff65f0a50bd2fa upstream.
    
    The runtime PM state should not be changed by drivers that do not
    implement runtime PM even if it happens to work around a bug in PM core.
    
    With the wake irq arming now fixed, drop the bogus runtime PM state
    update which left the device in active state (and could potentially
    prevent a parent device from suspending).
    
    Fixes: f3974413cf02 ("tty: serial: qcom_geni_serial: Wakeup IRQ cleanup")
    Cc: 5.6+ <stable@vger.kernel.org> # 5.6+
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68e6287ac61dc22513cd39f02b9ac1fef28513e4
Author: Zqiang <qiang.zhang1211@gmail.com>
Date:   Fri Jul 14 15:40:11 2023 +0800

    USB: gadget: Fix the memory leak in raw_gadget driver
    
    commit 83e30f2bf86ef7c38fbd476ed81a88522b620628 upstream.
    
    Currently, increasing raw_dev->count happens before invoke the
    raw_queue_event(), if the raw_queue_event() return error, invoke
    raw_release() will not trigger the dev_free() to be called.
    
    [  268.905865][ T5067] raw-gadget.0 gadget.0: failed to queue event
    [  268.912053][ T5067] udc dummy_udc.0: failed to start USB Raw Gadget: -12
    [  268.918885][ T5067] raw-gadget.0: probe of gadget.0 failed with error -12
    [  268.925956][ T5067] UDC core: USB Raw Gadget: couldn't find an available UDC or it's busy
    [  268.934657][ T5067] misc raw-gadget: fail, usb_gadget_register_driver returned -16
    
    BUG: memory leak
    
    [<ffffffff8154bf94>] kmalloc_trace+0x24/0x90 mm/slab_common.c:1076
    [<ffffffff8347eb55>] kmalloc include/linux/slab.h:582 [inline]
    [<ffffffff8347eb55>] kzalloc include/linux/slab.h:703 [inline]
    [<ffffffff8347eb55>] dev_new drivers/usb/gadget/legacy/raw_gadget.c:191 [inline]
    [<ffffffff8347eb55>] raw_open+0x45/0x110 drivers/usb/gadget/legacy/raw_gadget.c:385
    [<ffffffff827d1d09>] misc_open+0x1a9/0x1f0 drivers/char/misc.c:165
    
    [<ffffffff8154bf94>] kmalloc_trace+0x24/0x90 mm/slab_common.c:1076
    [<ffffffff8347cd2f>] kmalloc include/linux/slab.h:582 [inline]
    [<ffffffff8347cd2f>] raw_ioctl_init+0xdf/0x410 drivers/usb/gadget/legacy/raw_gadget.c:460
    [<ffffffff8347dfe9>] raw_ioctl+0x5f9/0x1120 drivers/usb/gadget/legacy/raw_gadget.c:1250
    [<ffffffff81685173>] vfs_ioctl fs/ioctl.c:51 [inline]
    
    [<ffffffff8154bf94>] kmalloc_trace+0x24/0x90 mm/slab_common.c:1076
    [<ffffffff833ecc6a>] kmalloc include/linux/slab.h:582 [inline]
    [<ffffffff833ecc6a>] kzalloc include/linux/slab.h:703 [inline]
    [<ffffffff833ecc6a>] dummy_alloc_request+0x5a/0xe0 drivers/usb/gadget/udc/dummy_hcd.c:665
    [<ffffffff833e9132>] usb_ep_alloc_request+0x22/0xd0 drivers/usb/gadget/udc/core.c:196
    [<ffffffff8347f13d>] gadget_bind+0x6d/0x370 drivers/usb/gadget/legacy/raw_gadget.c:292
    
    This commit therefore invoke kref_get() under the condition that
    raw_queue_event() return success.
    
    Reported-by: syzbot+feb045d335c1fdde5bf7@syzkaller.appspotmail.com
    Cc: stable <stable@kernel.org>
    Closes: https://syzkaller.appspot.com/bug?extid=feb045d335c1fdde5bf7
    Signed-off-by: Zqiang <qiang.zhang1211@gmail.com>
    Reviewed-by: Andrey Konovalov <andreyknvl@gmail.com>
    Tested-by: Andrey Konovalov <andreyknvl@gmail.com>
    Link: https://lore.kernel.org/r/20230714074011.20989-1-qiang.zhang1211@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da1b105dc66d74a748bc413f1cd0c2830a9781d7
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Tue Jul 4 17:09:09 2023 +0300

    Revert "usb: gadget: tegra-xudc: Fix error check in tegra_xudc_powerdomain_init()"
    
    commit a8291be6b5dd465c22af229483dbac543a91e24e upstream.
    
    This reverts commit f08aa7c80dac27ee00fa6827f447597d2fba5465.
    
    The reverted commit was based on static analysis and a misunderstanding
    of how PTR_ERR() and NULLs are supposed to work.  When a function
    returns both pointer errors and NULL then normally the NULL means
    "continue operating without a feature because it was deliberately
    turned off".  The NULL should not be treated as a failure.  If a driver
    cannot work when that feature is disabled then the KConfig should
    enforce that the function cannot return NULL.  We should not need to
    test for it.
    
    In this driver, the bug means that probe cannot succeed when CONFIG_PM
    is disabled.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Fixes: f08aa7c80dac ("usb: gadget: tegra-xudc: Fix error check in tegra_xudc_powerdomain_init()")
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/ZKQoBa84U/ykEh3C@moroto
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6d2fd1703cdc8ecfc3e73987e0fb7474ae2b074
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Jul 26 17:58:04 2023 +0800

    tracing: Fix warning in trace_buffered_event_disable()
    
    [ Upstream commit dea499781a1150d285c62b26659f62fb00824fce ]
    
    Warning happened in trace_buffered_event_disable() at
      WARN_ON_ONCE(!trace_buffered_event_ref)
    
      Call Trace:
       ? __warn+0xa5/0x1b0
       ? trace_buffered_event_disable+0x189/0x1b0
       __ftrace_event_enable_disable+0x19e/0x3e0
       free_probe_data+0x3b/0xa0
       unregister_ftrace_function_probe_func+0x6b8/0x800
       event_enable_func+0x2f0/0x3d0
       ftrace_process_regex.isra.0+0x12d/0x1b0
       ftrace_filter_write+0xe6/0x140
       vfs_write+0x1c9/0x6f0
       [...]
    
    The cause of the warning is in __ftrace_event_enable_disable(),
    trace_buffered_event_enable() was called once while
    trace_buffered_event_disable() was called twice.
    Reproduction script show as below, for analysis, see the comments:
     ```
     #!/bin/bash
    
     cd /sys/kernel/tracing/
    
     # 1. Register a 'disable_event' command, then:
     #    1) SOFT_DISABLED_BIT was set;
     #    2) trace_buffered_event_enable() was called first time;
     echo 'cmdline_proc_show:disable_event:initcall:initcall_finish' > \
         set_ftrace_filter
    
     # 2. Enable the event registered, then:
     #    1) SOFT_DISABLED_BIT was cleared;
     #    2) trace_buffered_event_disable() was called first time;
     echo 1 > events/initcall/initcall_finish/enable
    
     # 3. Try to call into cmdline_proc_show(), then SOFT_DISABLED_BIT was
     #    set again!!!
     cat /proc/cmdline
    
     # 4. Unregister the 'disable_event' command, then:
     #    1) SOFT_DISABLED_BIT was cleared again;
     #    2) trace_buffered_event_disable() was called second time!!!
     echo '!cmdline_proc_show:disable_event:initcall:initcall_finish' > \
         set_ftrace_filter
     ```
    
    To fix it, IIUC, we can change to call trace_buffered_event_enable() at
    fist time soft-mode enabled, and call trace_buffered_event_disable() at
    last time soft-mode disabled.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230726095804.920457-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Fixes: 0fc1b09ff1ff ("tracing: Use temp buffer when filtering events")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0efbdbc4530c8f859f0a658ab41a18770ce98542
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Mon Jul 24 13:40:40 2023 +0800

    ring-buffer: Fix wrong stat of cpu_buffer->read
    
    [ Upstream commit 2d093282b0d4357373497f65db6a05eb0c28b7c8 ]
    
    When pages are removed in rb_remove_pages(), 'cpu_buffer->read' is set
    to 0 in order to make sure any read iterators reset themselves. However,
    this will mess 'entries' stating, see following steps:
    
      # cd /sys/kernel/tracing/
      # 1. Enlarge ring buffer prepare for later reducing:
      # echo 20 > per_cpu/cpu0/buffer_size_kb
      # 2. Write a log into ring buffer of cpu0:
      # taskset -c 0 echo "hello1" > trace_marker
      # 3. Read the log:
      # cat per_cpu/cpu0/trace_pipe
           <...>-332     [000] .....    62.406844: tracing_mark_write: hello1
      # 4. Stop reading and see the stats, now 0 entries, and 1 event readed:
      # cat per_cpu/cpu0/stats
       entries: 0
       [...]
       read events: 1
      # 5. Reduce the ring buffer
      # echo 7 > per_cpu/cpu0/buffer_size_kb
      # 6. Now entries became unexpected 1 because actually no entries!!!
      # cat per_cpu/cpu0/stats
       entries: 1
       [...]
       read events: 0
    
    To fix it, introduce 'page_removed' field to count total removed pages
    since last reset, then use it to let read iterators reset themselves
    instead of changing the 'read' pointer.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230724054040.3489499-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <vnagarnaik@google.com>
    Fixes: 83f40318dab0 ("ring-buffer: Make removal of ring buffer pages atomic")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e410839c0cd863a1595c41820916289bc86272dd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jul 26 22:33:22 2023 +0200

    ata: pata_ns87415: mark ns87560_tf_read static
    
    [ Upstream commit 3fc2febb0f8ffae354820c1772ec008733237cfa ]
    
    The global function triggers a warning because of the missing prototype
    
    drivers/ata/pata_ns87415.c:263:6: warning: no previous prototype for 'ns87560_tf_read' [-Wmissing-prototypes]
      263 | void ns87560_tf_read(struct ata_port *ap, struct ata_taskfile *tf)
    
    There are no other references to this, so just make it static.
    
    Fixes: c4b5b7b6c4423 ("pata_ns87415: Initial cut at 87415/87560 IDE support")
    Reviewed-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82ce0ae87a96fde2824cf0727d01c5bef6fb7baa
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Sat Jul 8 17:21:53 2023 +0800

    dm raid: protect md_stop() with 'reconfig_mutex'
    
    [ Upstream commit 7d5fff8982a2199d49ec067818af7d84d4f95ca0 ]
    
    __md_stop_writes() and __md_stop() will modify many fields that are
    protected by 'reconfig_mutex', and all the callers will grab
    'reconfig_mutex' except for md_stop().
    
    Also, update md_stop() to make certain 'reconfig_mutex' is held using
    lockdep_assert_held().
    
    Fixes: 9d09e663d550 ("dm: raid456 basic support")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6a1cf4ee5eba1f0b6640ddaf5afe04ee47c949c
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Sat Jul 8 17:21:52 2023 +0800

    dm raid: clean up four equivalent goto tags in raid_ctr()
    
    [ Upstream commit e74c874eabe2e9173a8fbdad616cd89c70eb8ffd ]
    
    There are four equivalent goto tags in raid_ctr(), clean them up to
    use just one.
    
    There is no functional change and this is preparation to fix
    raid_ctr()'s unprotected md_stop().
    
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Stable-dep-of: 7d5fff8982a2 ("dm raid: protect md_stop() with 'reconfig_mutex'")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a43c761a7e1cdc44c34e0d696d525d4ce3d6926b
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Sat Jul 8 17:21:51 2023 +0800

    dm raid: fix missing reconfig_mutex unlock in raid_ctr() error paths
    
    [ Upstream commit bae3028799dc4f1109acc4df37c8ff06f2d8f1a0 ]
    
    In the error paths 'bad_stripe_cache' and 'bad_check_reshape',
    'reconfig_mutex' is still held after raid_ctr() returns.
    
    Fixes: 9dbd1aa3a81c ("dm raid: add reshaping support to the target")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d82bfe9686f3f952f4bbee1e77ef4c81ce04fe79
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Jul 6 13:14:12 2023 -0700

    block: Fix a source code comment in include/uapi/linux/blkzoned.h
    
    [ Upstream commit e0933b526fbfd937c4a8f4e35fcdd49f0e22d411 ]
    
    Fix the symbolic names for zone conditions in the blkzoned.h header
    file.
    
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Damien Le Moal <dlemoal@kernel.org>
    Fixes: 6a0cb1bc106f ("block: Implement support for zoned block devices")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Damien Le Moal <dlemoal@kernel.org>
    Link: https://lore.kernel.org/r/20230706201422.3987341-1-bvanassche@acm.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab6d14bc404100a8afe8446866fba70e0d30993a
Author: Matus Gajdos <matuszpd@gmail.com>
Date:   Wed Jul 19 18:47:29 2023 +0200

    ASoC: fsl_spdif: Silence output on stop
    
    [ Upstream commit 0e4c2b6b0c4a4b4014d9424c27e5e79d185229c5 ]
    
    Clear TX registers on stop to prevent the SPDIF interface from sending
    last written word over and over again.
    
    Fixes: a2388a498ad2 ("ASoC: fsl: Add S/PDIF CPU DAI driver")
    Signed-off-by: Matus Gajdos <matuszpd@gmail.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Link: https://lore.kernel.org/r/20230719164729.19969-1-matuszpd@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94bac776cd273b694d3dbb7b092de120013b3af5
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Jul 17 09:47:38 2023 +0800

    drm/msm: Fix IS_ERR_OR_NULL() vs NULL check in a5xx_submit_in_rb()
    
    [ Upstream commit 6e8a996563ecbe68e49c49abd4aaeef69f11f2dc ]
    
    The msm_gem_get_vaddr() returns an ERR_PTR() on failure, and a null
    is catastrophic here, so we should use IS_ERR_OR_NULL() to check
    the return value.
    
    Fixes: 6a8bd08d0465 ("drm/msm: add sudo flag to submit ioctl")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Akhil P Oommen <quic_akhilpo@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/547712/
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0100bdb9dcd405f00248b1d4b6426bf14a2e576
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Thu Jul 13 16:16:58 2023 +0200

    RDMA/mthca: Fix crash when polling CQ for shared QPs
    
    [ Upstream commit dc52aadbc1849cbe3fcf6bc54d35f6baa396e0a1 ]
    
    Commit 21c2fe94abb2 ("RDMA/mthca: Combine special QP struct with mthca QP")
    introduced a new struct mthca_sqp which doesn't contain struct mthca_qp
    any longer. Placing a pointer of this new struct into qptable leads
    to crashes, because mthca_poll_one() expects a qp pointer. Fix this
    by putting the correct pointer into qptable.
    
    Fixes: 21c2fe94abb2 ("RDMA/mthca: Combine special QP struct with mthca QP")
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Link: https://lore.kernel.org/r/20230713141658.9426-1-tbogendoerfer@suse.de
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62a8a4cafa9610630fdddfd541b16bc92f48b1be
Author: Rob Clark <robdclark@chromium.org>
Date:   Tue Jul 11 10:54:07 2023 -0700

    drm/msm/adreno: Fix snapshot BINDLESS_DATA size
    
    [ Upstream commit bd846ceee9c478d0397428f02696602ba5eb264a ]
    
    The incorrect size was causing "CP | AHB bus error" when snapshotting
    the GPU state on a6xx gen4 (a660 family).
    
    Closes: https://gitlab.freedesktop.org/drm/msm/-/issues/26
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Reviewed-by: Akhil P Oommen <quic_akhilpo@quicinc.com>
    Fixes: 1707add81551 ("drm/msm/a6xx: Add a6xx gpu state")
    Patchwork: https://patchwork.freedesktop.org/patch/546763/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c9e03b8675623c5a028b2e2b73a873d1d8bbdba
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Jul 7 22:39:32 2023 +0300

    drm/msm/dpu: drop enum dpu_core_perf_data_bus_id
    
    [ Upstream commit e8383f5cf1b3573ce140a80bfbfd809278ab16d6 ]
    
    Drop the leftover of bus-client -> interconnect conversion, the enum
    dpu_core_perf_data_bus_id.
    
    Fixes: cb88482e2570 ("drm/msm/dpu: clean up references of DPU custom bus scaling")
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/546048/
    Link: https://lore.kernel.org/r/20230707193942.3806526-2-dmitry.baryshkov@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08aa5a5297e6d7d1b78ecafe7f7c47e339eabcde
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Thu Jun 29 09:07:37 2023 +0300

    RDMA/mlx4: Make check for invalid flags stricter
    
    [ Upstream commit d64b1ee12a168030fbb3e0aebf7bce49e9a07589 ]
    
    This code is trying to ensure that only the flags specified in the list
    are allowed.  The problem is that ucmd->rx_hash_fields_mask is a u64 and
    the flags are an enum which is treated as a u32 in this context.  That
    means the test doesn't check whether the highest 32 bits are zero.
    
    Fixes: 4d02ebd9bbbd ("IB/mlx4: Fix RSS hash fields restrictions")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/233ed975-982d-422a-b498-410f71d8a101@moroto.mountain
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d1fd118bcb478f57f2988358a1883d178f3306e
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Wed Jul 26 00:46:25 2023 +0300

    tipc: stop tipc crypto on failure in tipc_node_create
    
    [ Upstream commit de52e17326c3e9a719c9ead4adb03467b8fae0ef ]
    
    If tipc_link_bc_create() fails inside tipc_node_create() for a newly
    allocated tipc node then we should stop its tipc crypto and free the
    resources allocated with a call to tipc_crypto_start().
    
    As the node ref is initialized to one to that point, just put the ref on
    tipc_link_bc_create() error case that would lead to tipc_node_free() be
    eventually executed and properly clean the node and its crypto resources.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: cb8092d70a6f ("tipc: move bc link creation back to tipc_node_create")
    Suggested-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/20230725214628.25246-1-pchelkin@ispras.ru
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d03de937765f82c48876c615a46ce6ad2ea0c2c7
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Tue Jul 25 14:48:10 2023 +0800

    tipc: check return value of pskb_trim()
    
    [ Upstream commit e46e06ffc6d667a89b979701288e2264f45e6a7b ]
    
    goto free_skb if an unexpected result is returned by pskb_tirm()
    in tipc_crypto_rcv_complete().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Link: https://lore.kernel.org/r/20230725064810.5820-1-ruc_gongyuanjun@163.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3661bab5afcb5fc20228d8996e1d24c1d8008831
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Tue Jul 25 11:27:26 2023 +0800

    benet: fix return value check in be_lancer_xmit_workarounds()
    
    [ Upstream commit 5c85f7065718a949902b238a6abd8fc907c5d3e0 ]
    
    in be_lancer_xmit_workarounds(), it should go to label 'tx_drop'
    if an unexpected value is returned by pskb_trim().
    
    Fixes: 93040ae5cc8d ("be2net: Fix to trim skb for padded vlan packets to workaround an ASIC Bug")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Link: https://lore.kernel.org/r/20230725032726.15002-1-ruc_gongyuanjun@163.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f40f7a858b3b4b2efdc22b524426ea51a0c004fd
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Jul 25 10:42:27 2023 +0800

    net/sched: mqprio: Add length check for TCA_MQPRIO_{MAX/MIN}_RATE64
    
    [ Upstream commit 6c58c8816abb7b93b21fa3b1d0c1726402e5e568 ]
    
    The nla_for_each_nested parsing in function mqprio_parse_nlattr() does
    not check the length of the nested attribute. This can lead to an
    out-of-attribute read and allow a malformed nlattr (e.g., length 0) to
    be viewed as 8 byte integer and passed to priv->max_rate/min_rate.
    
    This patch adds the check based on nla_len() when check the nla_type(),
    which ensures that the length of these two attribute must equals
    sizeof(u64).
    
    Fixes: 4e8b86c06269 ("mqprio: Introduce new hardware offload mode and shaper in mqprio")
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Link: https://lore.kernel.org/r/20230725024227.426561-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ed3729a6a8e38581da29f7fc3e661ae963472f7
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Apr 11 21:01:51 2023 +0300

    net/sched: mqprio: add extack to mqprio_parse_nlattr()
    
    [ Upstream commit 57f21bf85400abadac0cb2a4db5de1d663f8863f ]
    
    Netlink attribute parsing in mqprio is a minesweeper game, with many
    options having the possibility of being passed incorrectly and the user
    being none the wiser.
    
    Try to make errors less sour by giving user space some information
    regarding what went wrong.
    
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ferenc Fejes <fejes@inf.elte.hu>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 6c58c8816abb ("net/sched: mqprio: Add length check for TCA_MQPRIO_{MAX/MIN}_RATE64")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6227b461542f19a21d78605e687f43a5f2477851
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sat Feb 4 15:52:55 2023 +0200

    net/sched: mqprio: refactor nlattr parsing to a separate function
    
    [ Upstream commit feb2cf3dcfb930aec2ca65c66d1365543d5ba943 ]
    
    mqprio_init() is quite large and unwieldy to add more code to.
    Split the netlink attribute parsing to a dedicated function.
    
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 6c58c8816abb ("net/sched: mqprio: Add length check for TCA_MQPRIO_{MAX/MIN}_RATE64")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 308a43f1521d5b7220693d0865b23e8dad3ed137
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Jul 23 16:41:48 2023 +0200

    netfilter: nf_tables: disallow rule addition to bound chain via NFTA_RULE_CHAIN_ID
    
    [ Upstream commit 0ebc1064e4874d5987722a2ddbc18f94aa53b211 ]
    
    Bail out with EOPNOTSUPP when adding rule to bound chain via
    NFTA_RULE_CHAIN_ID. The following warning splat is shown when
    adding a rule to a deleted bound chain:
    
     WARNING: CPU: 2 PID: 13692 at net/netfilter/nf_tables_api.c:2013 nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
     CPU: 2 PID: 13692 Comm: chain-bound-rul Not tainted 6.1.39 #1
     RIP: 0010:nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Reported-by: Kevin Rich <kevinrich1337@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab5a97a94b57324df76d659686ac2d30494170e6
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Jul 23 16:24:46 2023 +0200

    netfilter: nf_tables: skip immediate deactivate in _PREPARE_ERROR
    
    [ Upstream commit 0a771f7b266b02d262900c75f1e175c7fe76fec2 ]
    
    On error when building the rule, the immediate expression unbinds the
    chain, hence objects can be deactivated by the transaction records.
    
    Otherwise, it is possible to trigger the following warning:
    
     WARNING: CPU: 3 PID: 915 at net/netfilter/nf_tables_api.c:2013 nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
     CPU: 3 PID: 915 Comm: chain-bind-err- Not tainted 6.1.39 #1
     RIP: 0010:nf_tables_chain_destroy+0x1f7/0x210 [nf_tables]
    
    Fixes: 4bedf9eee016 ("netfilter: nf_tables: fix chain binding transaction logic")
    Reported-by: Kevin Rich <kevinrich1337@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7782ce022fea917ca3fe4fba826c5f4b4c4bc0ec
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Apr 27 18:05:48 2021 +0200

    netfilter: nftables: add helper function to validate set element data
    
    [ Upstream commit 97c976d662fb9080a6a5d1e1a108c7a1f5c9484d ]
    
    When binding sets to rule, validate set element data according to
    set definition. This patch adds a helper function to be reused by
    the catch-all set element support.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 0a771f7b266b ("netfilter: nf_tables: skip immediate deactivate in _PREPARE_ERROR")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 893cb3c3513cf661a0ff45fe0cfa83fe27131f76
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jul 20 21:30:05 2023 +0200

    netfilter: nft_set_rbtree: fix overlap expiration walk
    
    [ Upstream commit f718863aca469a109895cb855e6b81fff4827d71 ]
    
    The lazy gc on insert that should remove timed-out entries fails to release
    the other half of the interval, if any.
    
    Can be reproduced with tests/shell/testcases/sets/0044interval_overlap_0
    in nftables.git and kmemleak enabled kernel.
    
    Second bug is the use of rbe_prev vs. prev pointer.
    If rbe_prev() returns NULL after at least one iteration, rbe_prev points
    to element that is not an end interval, hence it should not be removed.
    
    Lastly, check the genmask of the end interval if this is active in the
    current generation.
    
    Fixes: c9e6978e2725 ("netfilter: nft_set_rbtree: Switch to node list walk for overlap detection")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89060b831c415e8452d0fca43f0ef0891db1a590
Author: Maxim Mikityanskiy <maxtram95@gmail.com>
Date:   Fri Jul 21 17:54:23 2023 +0300

    platform/x86: msi-laptop: Fix rfkill out-of-sync on MSI Wind U100
    
    [ Upstream commit ad084a6d99bc182bf109c190c808e2ea073ec57b ]
    
    Only the HW rfkill state is toggled on laptops with quirks->ec_read_only
    (so far only MSI Wind U90/U100). There are, however, a few issues with
    the implementation:
    
    1. The initial HW state is always unblocked, regardless of the actual
       state on boot, because msi_init_rfkill only sets the SW state,
       regardless of ec_read_only.
    
    2. The initial SW state corresponds to the actual state on boot, but it
       can't be changed afterwards, because set_device_state returns
       -EOPNOTSUPP. It confuses the userspace, making Wi-Fi and/or Bluetooth
       unusable if it was blocked on boot, and breaking the airplane mode if
       the rfkill was unblocked on boot.
    
    Address the above issues by properly initializing the HW state on
    ec_read_only laptops and by allowing the userspace to toggle the SW
    state. Don't set the SW state ourselves and let the userspace fully
    control it. Toggling the SW state is a no-op, however, it allows the
    userspace to properly toggle the airplane mode. The actual SW radio
    disablement is handled by the corresponding rtl818x_pci and btusb
    drivers that have their own rfkills.
    
    Tested on MSI Wind U100 Plus, BIOS ver 1.0G, EC ver 130.
    
    Fixes: 0816392b97d4 ("msi-laptop: merge quirk tables to one")
    Fixes: 0de6575ad0a8 ("msi-laptop: Add MSI Wind U90/U100 support")
    Signed-off-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Link: https://lore.kernel.org/r/20230721145423.161057-1-maxtram95@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75f57acda32fa57b442bdcdf0bafa2d5ef646666
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jul 21 12:03:56 2023 +0800

    team: reset team's flags when down link is P2P device
    
    [ Upstream commit fa532bee17d15acf8bba4bc8e2062b7a093ba801 ]
    
    When adding a point to point downlink to team device, we neglected to reset
    the team's flags, which were still using flags like BROADCAST and
    MULTICAST. Consequently, this would initiate ARP/DAD for P2P downlink
    interfaces, such as when adding a GRE device to team device. Fix this by
    remove multicast/broadcast flags and add p2p and noarp flags.
    
    After removing the none ethernet interface and adding an ethernet interface
    to team, we need to reset team interface flags. Unlike bonding interface,
    team do not need restore IFF_MASTER, IFF_SLAVE flags.
    
    Reported-by: Liang Li <liali@redhat.com>
    Closes: https://bugzilla.redhat.com/show_bug.cgi?id=2221438
    Fixes: 1d76efe1577b ("team: add support for non-ethernet devices")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de982f46be83d92dec4486e724a738189b800d40
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jul 21 12:03:55 2023 +0800

    bonding: reset bond's flags when down link is P2P device
    
    [ Upstream commit da19a2b967cf1e2c426f50d28550d1915214a81d ]
    
    When adding a point to point downlink to the bond, we neglected to reset
    the bond's flags, which were still using flags like BROADCAST and
    MULTICAST. Consequently, this would initiate ARP/DAD for P2P downlink
    interfaces, such as when adding a GRE device to the bonding.
    
    To address this issue, let's reset the bond's flags for P2P interfaces.
    
    Before fix:
    7: gre0@NONE: <POINTOPOINT,NOARP,SLAVE,UP,LOWER_UP> mtu 1500 qdisc noqueue master bond0 state UNKNOWN group default qlen 1000
        link/gre6 2006:70:10::1 peer 2006:70:10::2 permaddr 167f:18:f188::
    8: bond0: <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
        link/gre6 2006:70:10::1 brd 2006:70:10::2
        inet6 fe80::200:ff:fe00:0/64 scope link
           valid_lft forever preferred_lft forever
    
    After fix:
    7: gre0@NONE: <POINTOPOINT,NOARP,SLAVE,UP,LOWER_UP> mtu 1500 qdisc noqueue master bond2 state UNKNOWN group default qlen 1000
        link/gre6 2006:70:10::1 peer 2006:70:10::2 permaddr c29e:557a:e9d9::
    8: bond0: <POINTOPOINT,NOARP,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
        link/gre6 2006:70:10::1 peer 2006:70:10::2
        inet6 fe80::1/64 scope link
           valid_lft forever preferred_lft forever
    
    Reported-by: Liang Li <liali@redhat.com>
    Closes: https://bugzilla.redhat.com/show_bug.cgi?id=2221438
    Fixes: 872254dd6b1f ("net/bonding: Enable bonding to enslave non ARPHRD_ETHER")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2712c4bfc3bfb0d583bc07e8cd110f05a163ebd
Author: Jedrzej Jagielski <jedrzej.jagielski@intel.com>
Date:   Fri Jul 21 08:58:54 2023 -0700

    ice: Fix memory management in ice_ethtool_fdir.c
    
    [ Upstream commit a3336056504d780590ac6d6ac94fbba829994594 ]
    
    Fix ethtool FDIR logic to not use memory after its release.
    In the ice_ethtool_fdir.c file there are 2 spots where code can
    refer to pointers which may be missing.
    
    In the ice_cfg_fdir_xtrct_seq() function seg may be freed but
    even then may be still used by memcpy(&tun_seg[1], seg, sizeof(*seg)).
    
    In the ice_add_fdir_ethtool() function struct ice_fdir_fltr *input
    may first fail to be added via ice_fdir_update_list_entry() but then
    may be deleted by ice_fdir_update_list_entry.
    
    Terminate in both cases when the returned value of the previous
    operation is other than 0, free memory and don't use it anymore.
    
    Reported-by: Michal Schmidt <mschmidt@redhat.com>
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2208423
    Fixes: cac2a27cd9ab ("ice: Support IPv4 Flow Director filters")
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: Jedrzej Jagielski <jedrzej.jagielski@intel.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20230721155854.1292805-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cd74fbd3b8327e60525e1ec4a6c28895693909f
Author: Stewart Smith <trawets@amazon.com>
Date:   Fri Jul 21 15:24:10 2023 -0700

    tcp: Reduce chance of collisions in inet6_hashfn().
    
    [ Upstream commit d11b0df7ddf1831f3e170972f43186dad520bfcc ]
    
    For both IPv4 and IPv6 incoming TCP connections are tracked in a hash
    table with a hash over the source & destination addresses and ports.
    However, the IPv6 hash is insufficient and can lead to a high rate of
    collisions.
    
    The IPv6 hash used an XOR to fit everything into the 96 bits for the
    fast jenkins hash, meaning it is possible for an external entity to
    ensure the hash collides, thus falling back to a linear search in the
    bucket, which is slow.
    
    We take the approach of hash the full length of IPv6 address in
    __ipv6_addr_jhash() so that all users can benefit from a more secure
    version.
    
    While this may look like it adds overhead, the reality of modern CPUs
    means that this is unmeasurable in real world scenarios.
    
    In simulating with llvm-mca, the increase in cycles for the hashing
    code was ~16 cycles on Skylake (from a base of ~155), and an extra ~9
    on Nehalem (base of ~173).
    
    In commit dd6d2910c5e0 ("netfilter: conntrack: switch to siphash")
    netfilter switched from a jenkins hash to a siphash, but even the faster
    hsiphash is a more significant overhead (~20-30%) in some preliminary
    testing.  So, in this patch, we keep to the more conservative approach to
    ensure we don't add much overhead per SYN.
    
    In testing, this results in a consistently even spread across the
    connection buckets.  In both testing and real-world scenarios, we have
    not found any measurable performance impact.
    
    Fixes: 08dcdbf6a7b9 ("ipv6: use a stronger hash for tcp")
    Signed-off-by: Stewart Smith <trawets@amazon.com>
    Signed-off-by: Samuel Mendoza-Jonas <samjonas@amazon.com>
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230721222410.17914-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b55a2b34b1b66368977f528954b306ee9156d784
Author: Maciej Żenczykowski <maze@google.com>
Date:   Thu Jul 20 09:00:22 2023 -0700

    ipv6 addrconf: fix bug where deleting a mngtmpaddr can create a new temporary address
    
    [ Upstream commit 69172f0bcb6a09110c5d2a6d792627f5095a9018 ]
    
    currently on 6.4 net/main:
    
      # ip link add dummy1 type dummy
      # echo 1 > /proc/sys/net/ipv6/conf/dummy1/use_tempaddr
      # ip link set dummy1 up
      # ip -6 addr add 2000::1/64 mngtmpaddr dev dummy1
      # ip -6 addr show dev dummy1
    
      11: dummy1: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000
          inet6 2000::44f3:581c:8ca:3983/64 scope global temporary dynamic
             valid_lft 604800sec preferred_lft 86172sec
          inet6 2000::1/64 scope global mngtmpaddr
             valid_lft forever preferred_lft forever
          inet6 fe80::e8a8:a6ff:fed5:56d4/64 scope link
             valid_lft forever preferred_lft forever
    
      # ip -6 addr del 2000::44f3:581c:8ca:3983/64 dev dummy1
    
      (can wait a few seconds if you want to, the above delete isn't [directly] the problem)
    
      # ip -6 addr show dev dummy1
    
      11: dummy1: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000
          inet6 2000::1/64 scope global mngtmpaddr
             valid_lft forever preferred_lft forever
          inet6 fe80::e8a8:a6ff:fed5:56d4/64 scope link
             valid_lft forever preferred_lft forever
    
      # ip -6 addr del 2000::1/64 mngtmpaddr dev dummy1
      # ip -6 addr show dev dummy1
    
      11: dummy1: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000
          inet6 2000::81c9:56b7:f51a:b98f/64 scope global temporary dynamic
             valid_lft 604797sec preferred_lft 86169sec
          inet6 fe80::e8a8:a6ff:fed5:56d4/64 scope link
             valid_lft forever preferred_lft forever
    
    This patch prevents this new 'global temporary dynamic' address from being
    created by the deletion of the related (same subnet prefix) 'mngtmpaddr'
    (which is triggered by there already being no temporary addresses).
    
    Cc: Jiri Pirko <jiri@resnulli.us>
    Fixes: 53bd67491537 ("ipv6 addrconf: introduce IFA_F_MANAGETEMPADDR to tell kernel to manage temporary addresses")
    Reported-by: Xiao Ma <xiaom@google.com>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230720160022.1887942-1-maze@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a3c929682234d2da860bbe1e948abff528a271f
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Thu Jul 20 22:42:19 2023 +0800

    ethernet: atheros: fix return value check in atl1e_tso_csum()
    
    [ Upstream commit 69a184f7a372aac588babfb0bd681aaed9779f5b ]
    
    in atl1e_tso_csum, it should check the return value of pskb_trim(),
    and return an error code if an unexpected value is returned
    by pskb_trim().
    
    Fixes: a6a5325239c2 ("atl1e: Atheros L1E Gigabit Ethernet driver")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230720144219.39285-1-ruc_gongyuanjun@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad249aa3c38f329f91fba8b4b3cd087e79fb0ce8
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Fri Jul 21 02:05:55 2023 -0700

    phy: hisilicon: Fix an out of bounds check in hisi_inno_phy_probe()
    
    [ Upstream commit 13c088cf3657d70893d75cf116be937f1509cc0f ]
    
    The size of array 'priv->ports[]' is INNO_PHY_PORT_NUM.
    
    In the for loop, 'i' is used as the index for array 'priv->ports[]'
    with a check (i > INNO_PHY_PORT_NUM) which indicates that
    INNO_PHY_PORT_NUM is allowed value for 'i' in the same loop.
    
    This > comparison needs to be changed to >=, otherwise it potentially leads
    to an out of bounds write on the next iteration through the loop
    
    Fixes: ba8b0ee81fbb ("phy: add inno-usb2-phy driver for hi3798cv200 SoC")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Link: https://lore.kernel.org/r/20230721090558.3588613-1-harshit.m.mogalapalli@oracle.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f26f145737727028974025f908549b534940a16
Author: Jiri Benc <jbenc@redhat.com>
Date:   Thu Jul 20 11:05:56 2023 +0200

    vxlan: calculate correct header length for GPE
    
    [ Upstream commit 94d166c5318c6edd1e079df8552233443e909c33 ]
    
    VXLAN-GPE does not add an extra inner Ethernet header. Take that into
    account when calculating header length.
    
    This causes problems in skb_tunnel_check_pmtu, where incorrect PMTU is
    cached.
    
    In the collect_md mode (which is the only mode that VXLAN-GPE
    supports), there's no magic auto-setting of the tunnel interface MTU.
    It can't be, since the destination and thus the underlying interface
    may be different for each packet.
    
    So, the administrator is responsible for setting the correct tunnel
    interface MTU. Apparently, the administrators are capable enough to
    calculate that the maximum MTU for VXLAN-GPE is (their_lower_MTU - 36).
    They set the tunnel interface MTU to 1464. If you run a TCP stream over
    such interface, it's then segmented according to the MTU 1464, i.e.
    producing 1514 bytes frames. Which is okay, this still fits the lower
    MTU.
    
    However, skb_tunnel_check_pmtu (called from vxlan_xmit_one) uses 50 as
    the header size and thus incorrectly calculates the frame size to be
    1528. This leads to ICMP too big message being generated (locally),
    PMTU of 1450 to be cached and the TCP stream to be resegmented.
    
    The fix is to use the correct actual header size, especially for
    skb_tunnel_check_pmtu calculation.
    
    Fixes: e1e5314de08ba ("vxlan: implement GPE")
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2741769d512ea1bf5544bf85da7602e64f82e45
Author: Roopa Prabhu <roopa@nvidia.com>
Date:   Tue Mar 1 05:04:28 2022 +0000

    vxlan: move to its own directory
    
    [ Upstream commit 6765393614ea8e2c0a7b953063513823f87c9115 ]
    
    vxlan.c has grown too long. This patch moves
    it to its own directory. subsequent patches add new
    functionality in new files.
    
    Signed-off-by: Roopa Prabhu <roopa@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 94d166c5318c ("vxlan: calculate correct header length for GPE")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 076f786f04149e9a074f920fb606d22ff251eb34
Author: Jijie Shao <shaojijie@huawei.com>
Date:   Thu Jul 20 10:05:10 2023 +0800

    net: hns3: fix wrong bw weight of disabled tc issue
    
    [ Upstream commit 882481b1c55fc44861d7e2d54b4e0936b1b39f2c ]
    
    In dwrr mode, the default bandwidth weight of disabled tc is set to 0.
    If the bandwidth weight is 0, the mode will change to sp.
    Therefore, disabled tc default bandwidth weight need changed to 1,
    and 0 is returned when query the bandwidth weight of disabled tc.
    In addition, driver need stop configure bandwidth weight if tc is disabled.
    
    Fixes: 848440544b41 ("net: hns3: Add support of TX Scheduler & Shaper to HNS3 driver")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 344b7c00039849351929d24c40c4540b54079f8f
Author: Guangbin Huang <huangguangbin2@huawei.com>
Date:   Mon Aug 30 14:06:38 2021 +0800

    net: hns3: reconstruct function hclge_ets_validate()
    
    [ Upstream commit 161ad669e6c23529415bffed5cb3bfa012e46cb4 ]
    
    This patch reconstructs function hclge_ets_validate() to reduce the code
    cycle complexity and make code more concise.
    
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 882481b1c55f ("net: hns3: fix wrong bw weight of disabled tc issue")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 111b699300a766b365b0380d8ca4611634ef5043
Author: Jiawen Wu <jiawenwu@trustnetic.com>
Date:   Wed Jul 19 17:22:33 2023 +0800

    net: phy: marvell10g: fix 88x3310 power up
    
    [ Upstream commit c7b75bea853daeb64fc831dbf39a6bbabcc402ac ]
    
    Clear MV_V2_PORT_CTRL_PWRDOWN bit to set power up for 88x3310 PHY,
    it sometimes does not take effect immediately. And a read of this
    register causes the bit not to clear. This will cause mv3310_reset()
    to time out, which will fail the config initialization. So add a delay
    before the next access.
    
    Fixes: c9cc1c815d36 ("net: phy: marvell10g: place in powersave mode at probe")
    Signed-off-by: Jiawen Wu <jiawenwu@trustnetic.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a6cc852f6589d7d6651fb9f7b708c3b3d84e49d
Author: Wang Ming <machel@vivo.com>
Date:   Thu Jul 13 09:42:39 2023 +0800

    i40e: Fix an NULL vs IS_ERR() bug for debugfs_create_dir()
    
    [ Upstream commit 043b1f185fb0f3939b7427f634787706f45411c4 ]
    
    The debugfs_create_dir() function returns error pointers.
    It never returns NULL. Most incorrect error checks were fixed,
    but the one in i40e_dbg_init() was forgotten.
    
    Fix the remaining error check.
    
    Fixes: 02e9c290814c ("i40e: debugfs interface")
    Signed-off-by: Wang Ming <machel@vivo.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39c789c9570d1ce74e1bee9eea5cc17866f1c061
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Tue Jun 13 18:47:53 2023 +0200

    media: staging: atomisp: select V4L2_FWNODE
    
    [ Upstream commit bf4c985707d3168ebb7d87d15830de66949d979c ]
    
    Select V4L2_FWNODE as the driver depends on it.
    
    Reported-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Fixes: aa31f6514047 ("media: atomisp: allow building the driver again")
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Tested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb1db979043a9479d0ca65b66e0674fa77bd4339
Author: Adrien Thierry <athierry@redhat.com>
Date:   Thu Jun 29 10:45:39 2023 -0400

    phy: qcom-snps-femto-v2: properly enable ref clock
    
    [ Upstream commit 8a0eb8f9b9a002291a3934acfd913660b905249e ]
    
    The driver is not enabling the ref clock, which thus gets disabled by
    the clk_disable_unused() initcall. This leads to the dwc3 controller
    failing to initialize if probed after clk_disable_unused() is called,
    for instance when the driver is built as a module.
    
    To fix this, switch to the clk_bulk API to handle both cfg_ahb and ref
    clocks at the proper places.
    
    Note that the cfg_ahb clock is currently not used by any device tree
    instantiation of the PHY. Work needs to be done separately to fix this.
    
    Link: https://lore.kernel.org/linux-arm-msm/ZEqvy+khHeTkC2hf@fedora/
    Fixes: 51e8114f80d0 ("phy: qcom-snps: Add SNPS USB PHY driver for QCOM based SOCs")
    Signed-off-by: Adrien Thierry <athierry@redhat.com>
    Link: https://lore.kernel.org/r/20230629144542.14906-3-athierry@redhat.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffebc22bdd08dc85a21e1a1c091646987f9840c1
Author: Adrien Thierry <athierry@redhat.com>
Date:   Thu Jun 29 10:45:38 2023 -0400

    phy: qcom-snps-femto-v2: keep cfg_ahb_clk enabled during runtime suspend
    
    [ Upstream commit 45d89a344eb46db9dce851c28e14f5e3c635c251 ]
    
    In the dwc3 core, both system and runtime suspend end up calling
    dwc3_suspend_common(). From there, what happens for the PHYs depends on
    the USB mode and whether the controller is entering system or runtime
    suspend.
    
    HOST mode:
      (1) system suspend on a non-wakeup-capable controller
    
      The [1] if branch is taken. dwc3_core_exit() is called, which ends up
      calling phy_power_off() and phy_exit(). Those two functions decrease the
      PM runtime count at some point, so they will trigger the PHY runtime
      sleep (assuming the count is right).
    
      (2) runtime suspend / system suspend on a wakeup-capable controller
    
      The [1] branch is not taken. dwc3_suspend_common() calls
      phy_pm_runtime_put_sync(). Assuming the ref count is right, the PHY
      runtime suspend op is called.
    
    DEVICE mode:
      dwc3_core_exit() is called on both runtime and system sleep
      unless the controller is already runtime suspended.
    
    OTG mode:
      (1) system suspend : dwc3_core_exit() is called
    
      (2) runtime suspend : do nothing
    
    In host mode, the code seems to make a distinction between 1) runtime
    sleep / system sleep for wakeup-capable controller, and 2) system sleep
    for non-wakeup-capable controller, where phy_power_off() and phy_exit()
    are only called for the latter. This suggests the PHY is not supposed to
    be in a fully powered-off state for runtime sleep and system sleep for
    wakeup-capable controller.
    
    Moreover, downstream, cfg_ahb_clk only gets disabled for system suspend.
    The clocks are disabled by phy->set_suspend() [2] which is only called
    in the system sleep path through dwc3_core_exit() [3].
    
    With that in mind, don't disable the clocks during the femto PHY runtime
    suspend callback. The clocks will only be disabled during system suspend
    for non-wakeup-capable controllers, through dwc3_core_exit().
    
    [1] https://elixir.bootlin.com/linux/v6.4/source/drivers/usb/dwc3/core.c#L1988
    [2] https://git.codelinaro.org/clo/la/kernel/msm-5.4/-/blob/LV.AU.1.2.1.r2-05300-gen3meta.0/drivers/usb/phy/phy-msm-snps-hs.c#L524
    [3] https://git.codelinaro.org/clo/la/kernel/msm-5.4/-/blob/LV.AU.1.2.1.r2-05300-gen3meta.0/drivers/usb/dwc3/core.c#L1915
    
    Signed-off-by: Adrien Thierry <athierry@redhat.com>
    Link: https://lore.kernel.org/r/20230629144542.14906-2-athierry@redhat.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Stable-dep-of: 8a0eb8f9b9a0 ("phy: qcom-snps-femto-v2: properly enable ref clock")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f34090579a8b5d15510dc7098c39d310b74cacdd
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sun May 7 16:48:18 2023 +0200

    phy: qcom-snps: correct struct qcom_snps_hsphy kerneldoc
    
    [ Upstream commit 2a881183dc5ab2474ef602e48fe7af34db460d95 ]
    
    Update kerneldoc of struct qcom_snps_hsphy to fix:
    
      drivers/phy/qualcomm/phy-qcom-snps-femto-v2.c:135: warning: Function parameter or member 'update_seq_cfg' not described in 'qcom_snps_hsphy'
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Link: https://lore.kernel.org/r/20230507144818.193039-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Stable-dep-of: 8a0eb8f9b9a0 ("phy: qcom-snps-femto-v2: properly enable ref clock")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ceba255a791b3158938ecab0abcdd12bf83002d6
Author: Yuan Can <yuancan@huawei.com>
Date:   Thu Sep 22 11:12:28 2022 +0000

    phy: qcom-snps: Use dev_err_probe() to simplify code
    
    [ Upstream commit 668dc8afce43d4bc01feb3e929d6d5ffcb14f899 ]
    
    In the probe path, dev_err() can be replaced with dev_err_probe()
    which will check if error code is -EPROBE_DEFER and prints the
    error name. It also sets the defer probe reason which can be
    checked later through debugfs.
    
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Andrew Halaney <ahalaney@redhat.com>
    Link: https://lore.kernel.org/r/20220922111228.36355-8-yuancan@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Stable-dep-of: 8a0eb8f9b9a0 ("phy: qcom-snps-femto-v2: properly enable ref clock")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed3d841f2fc2c39048b6aeb5c58e59e227b304e9
Author: Chao Yu <chao@kernel.org>
Date:   Tue Jun 6 15:32:03 2023 +0800

    ext4: fix to check return value of freeze_bdev() in ext4_shutdown()
    
    [ Upstream commit c4d13222afd8a64bf11bc7ec68645496ee8b54b9 ]
    
    freeze_bdev() can fail due to a lot of reasons, it needs to check its
    reason before later process.
    
    Fixes: 783d94854499 ("ext4: add EXT4_IOC_GOINGDOWN ioctl")
    Cc: stable@kernel.org
    Signed-off-by: Chao Yu <chao@kernel.org>
    Link: https://lore.kernel.org/r/20230606073203.1310389-1-chao@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3454b438c67d0ec582dd3fbda17fa9ec520ddb7
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed May 24 21:48:36 2023 +0200

    pwm: meson: fix handling of period/duty if greater than UINT_MAX
    
    [ Upstream commit 87a2cbf02d7701255f9fcca7e5bd864a7bb397cf ]
    
    state->period/duty are of type u64, and if their value is greater than
    UINT_MAX, then the cast to uint will cause problems. Fix this by
    changing the type of the respective local variables to u64.
    
    Fixes: b79c3670e120 ("pwm: meson: Don't duplicate the polarity internally")
    Cc: stable@vger.kernel.org
    Suggested-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b306d09967caa0f2ec1f63280b175b7be49260f3
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 8 14:46:26 2021 +0100

    pwm: meson: Simplify duplicated per-channel tracking
    
    [ Upstream commit 5f97f18feac9bd5a8163b108aee52d783114b36f ]
    
    The driver tracks per-channel data via struct pwm_device::chip_data and
    struct meson_pwm::channels[]. The latter holds the actual data, the former
    is only a pointer to the latter. So simplify by using struct
    meson_pwm::channels[] consistently.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Stable-dep-of: 87a2cbf02d77 ("pwm: meson: fix handling of period/duty if greater than UINT_MAX")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 840ce9cfc86f89c335625ec297acc0375f82e19b
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Oct 15 23:55:07 2020 +0900

    tracing: Show real address for trace event arguments
    
    [ Upstream commit efbbdaa22bb78761bff8dfdde027ad04bedd47ce ]
    
    To help debugging kernel, show real address for trace event arguments
    in tracefs/trace{,pipe} instead of hashed pointer value.
    
    Since ftrace human-readable format uses vsprintf(), all %p are
    translated to hash values instead of pointer address.
    
    However, when debugging the kernel, raw address value gives a
    hint when comparing with the memory mapping in the kernel.
    (Those are sometimes used with crash log, which is not hashed too)
    So converting %p with %px when calling trace_seq_printf().
    
    Moreover, this is not improving the security because the tracefs
    can be used only by root user and the raw address values are readable
    from tracefs/percpu/cpu*/trace_pipe_raw file.
    
    Link: https://lkml.kernel.org/r/160277370703.29307.5134475491761971203.stgit@devnote2
    
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Stable-dep-of: d5a821896360 ("tracing: Fix memory leak of iter->temp when reading trace_pipe")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8996b13051f0c211aaaf243dfd270003f1b67431
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Jul 7 11:25:00 2023 +0200

    drm/ttm: never consider pinned BOs for eviction&swap
    
    [ Upstream commit a2848d08742c8e8494675892c02c0d22acbe3cf8 ]
    
    There is a small window where we have already incremented the pin count
    but not yet moved the bo from the lru to the pinned list.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reported-by: Pelloux-Prayer, Pierre-Eric <Pierre-eric.Pelloux-prayer@amd.com>
    Tested-by: Pelloux-Prayer, Pierre-Eric <Pierre-eric.Pelloux-prayer@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20230707120826.3701-1-christian.koenig@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f6d5b58c59e6ded30f60e899b8c8bae80b1c5a8
Author: Christian König <christian.koenig@amd.com>
Date:   Mon Sep 21 13:05:54 2020 +0200

    drm/ttm: add ttm_bo_pin()/ttm_bo_unpin() v2
    
    [ Upstream commit deb0814b43f370a448a498409d949e38c9d8f02e ]
    
    As an alternative to the placement flag add a
    pin count to the ttm buffer object.
    
    v2: add dma_resv_assert_help() calls
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Link: https://patchwork.freedesktop.org/patch/391596/?series=81973&rev=1
    Stable-dep-of: a2848d08742c ("drm/ttm: never consider pinned BOs for eviction&swap")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1815d9bf02b7f00a1490f24e6a3d5000e4fb240b
Author: Alexander Aring <aahringo@redhat.com>
Date:   Fri May 19 11:21:26 2023 -0400

    fs: dlm: interrupt posix locks only when process is killed
    
    [ Upstream commit 59e45c758ca1b9893ac923dd63536da946ac333b ]
    
    If a posix lock request is waiting for a result from user space
    (dlm_controld), do not let it be interrupted unless the process
    is killed. This reverts commit a6b1533e9a57 ("dlm: make posix locks
    interruptible"). The problem with the interruptible change is
    that all locks were cleared on any signal interrupt. If a signal
    was received that did not terminate the process, the process
    could continue running after all its dlm posix locks had been
    cleared. A future patch will add cancelation to allow proper
    interruption.
    
    Cc: stable@vger.kernel.org
    Fixes: a6b1533e9a57 ("dlm: make posix locks interruptible")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f6741acfd5bd221bc5ca2abcfbbd225b103afdb
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 4 16:06:33 2022 -0400

    dlm: rearrange async condition return
    
    [ Upstream commit a800ba77fd285c6391a82819867ac64e9ab3af46 ]
    
    This patch moves the return of FILE_LOCK_DEFERRED a little bit earlier
    than checking afterwards again if the request was an asynchronous request.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 59e45c758ca1 ("fs: dlm: interrupt posix locks only when process is killed")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 793123331007ac0e96135b81e87c477375376dd1
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 4 16:06:32 2022 -0400

    dlm: cleanup plock_op vs plock_xop
    
    [ Upstream commit bcbb4ba6c9ba81e6975b642a2cade68044cd8a66 ]
    
    Lately the different casting between plock_op and plock_xop and list
    holders which was involved showed some issues which were hard to see.
    This patch removes the "plock_xop" structure and introduces a
    "struct plock_async_data". This structure will be set in "struct plock_op"
    in case of asynchronous lock handling as the original "plock_xop" was
    made for. There is no need anymore to cast pointers around for
    additional fields in case of asynchronous lock handling.  As disadvantage
    another allocation was introduces but only needed in the asynchronous
    case which is currently only used in combination with nfs lockd.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 59e45c758ca1 ("fs: dlm: interrupt posix locks only when process is killed")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 838d6e86ec74e1017dd5f9f4ebf97a8ada8f110d
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue May 2 11:39:23 2023 +0300

    PCI/ASPM: Avoid link retraining race
    
    [ Upstream commit e7e39756363ad5bd83ddeae1063193d0f13870fd ]
    
    PCIe r6.0.1, sec 7.5.3.7, recommends setting the link control parameters,
    then waiting for the Link Training bit to be clear before setting the
    Retrain Link bit.
    
    This avoids a race where the LTSSM may not use the updated parameters if it
    is already in the midst of link training because of other normal link
    activity.
    
    Wait for the Link Training bit to be clear before toggling the Retrain Link
    bit to ensure that the LTSSM uses the updated link control parameters.
    
    [bhelgaas: commit log, return 0 (success)/-ETIMEDOUT instead of bool for
    both pcie_wait_for_retrain() and the existing pcie_retrain_link()]
    Suggested-by: Lukas Wunner <lukas@wunner.de>
    Fixes: 7d715a6c1ae5 ("PCI: add PCI Express ASPM support")
    Link: https://lore.kernel.org/r/20230502083923.34562-1-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f283ca643ddce6d7580780d7421ec80db59f9c2
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue Jun 20 14:49:33 2023 -0500

    PCI/ASPM: Factor out pcie_wait_for_retrain()
    
    [ Upstream commit 9c7f136433d26592cb4d9cd00b4e15c33d9797c6 ]
    
    Factor pcie_wait_for_retrain() out from pcie_retrain_link().  No functional
    change intended.
    
    [bhelgaas: split out from
    https: //lore.kernel.org/r/20230502083923.34562-1-ilpo.jarvinen@linux.intel.com]
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Stable-dep-of: e7e39756363a ("PCI/ASPM: Avoid link retraining race")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffc0ee491f048043d60c1cef0001a02cdebb805d
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Tue Jun 20 14:44:55 2023 -0500

    PCI/ASPM: Return 0 or -ETIMEDOUT from pcie_retrain_link()
    
    [ Upstream commit f5297a01ee805d7fa569d288ed65fc0f9ac9b03d ]
    
    "pcie_retrain_link" is not a question with a true/false answer, so "bool"
    isn't quite the right return type.  Return 0 for success or -ETIMEDOUT if
    the retrain failed.  No functional change intended.
    
    [bhelgaas: based on Ilpo's patch below]
    Link: https://lore.kernel.org/r/20230502083923.34562-1-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Stable-dep-of: e7e39756363a ("PCI/ASPM: Avoid link retraining race")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fd349c8858e151405749c44a714ce8726cc666a
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Jul 4 21:50:28 2023 +0200

    i2c: nomadik: Remove a useless call in the remove function
    
    [ Upstream commit 05f933d5f7318b03ff2028c1704dc867ac16f2c7 ]
    
    Since commit 235602146ec9 ("i2c-nomadik: turn the platform driver to an amba
    driver"), there is no more request_mem_region() call in this driver.
    
    So remove the release_mem_region() call from the remove function which is
    likely a left over.
    
    Fixes: 235602146ec9 ("i2c-nomadik: turn the platform driver to an amba driver")
    Cc: <stable@vger.kernel.org> # v3.6+
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7ab5d7943b55aa4adc7eb1bed71dde7accb7b18
Author: Andi Shyti <andi.shyti@kernel.org>
Date:   Sun Jun 11 03:37:00 2023 +0200

    i2c: nomadik: Use devm_clk_get_enabled()
    
    [ Upstream commit 9c7174db4cdd111e10d19eed5c36fd978a14c8a2 ]
    
    Replace the pair of functions, devm_clk_get() and
    clk_prepare_enable(), with a single function
    devm_clk_get_enabled().
    
    Signed-off-by: Andi Shyti <andi.shyti@kernel.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Stable-dep-of: 05f933d5f731 ("i2c: nomadik: Remove a useless call in the remove function")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec954a4ab0c8d8cb39a4b3bfcd1be475a1605de4
Author: Andi Shyti <andi.shyti@kernel.org>
Date:   Sun Jun 11 03:36:59 2023 +0200

    i2c: nomadik: Remove unnecessary goto label
    
    [ Upstream commit 1c5d33fff0d375e4ab7c4261dc62a286babbb4c6 ]
    
    The err_no_mem goto label doesn't do anything. Remove it.
    
    Signed-off-by: Andi Shyti <andi.shyti@kernel.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Stable-dep-of: 05f933d5f731 ("i2c: nomadik: Remove a useless call in the remove function")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04b114067849af42233c9d67c1bf28ab74c40e51
Author: Markus Elfring <elfring@users.sourceforge.net>
Date:   Fri Feb 2 14:50:09 2018 +0100

    i2c: Improve size determinations
    
    [ Upstream commit 06e989578232da33a7fe96b04191b862af8b2cec ]
    
    Replace the specification of a data structure by a pointer dereference
    as the parameter for the operator "sizeof" to make the corresponding
    size determination a bit safer according to the Linux coding style
    convention.
    
    This issue was detected by using the Coccinelle software.
    
    Signed-off-by: Markus Elfring <elfring@users.sourceforge.net>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Stable-dep-of: 05f933d5f731 ("i2c: nomadik: Remove a useless call in the remove function")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41e90f0e50f55390c505d8a5dff64f4a1a46d76a
Author: Markus Elfring <elfring@users.sourceforge.net>
Date:   Fri Feb 2 17:24:57 2018 +0100

    i2c: Delete error messages for failed memory allocations
    
    [ Upstream commit 6b3b21a8542fd2fb6ffc61bc13b9419f0c58ebad ]
    
    These issues were detected by using the Coccinelle software.
    
    Signed-off-by: Markus Elfring <elfring@users.sourceforge.net>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Stable-dep-of: 05f933d5f731 ("i2c: nomadik: Remove a useless call in the remove function")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52df40a5c71ed4bd1c6c83398c1f7d8841a9e159
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Jun 8 11:27:38 2023 +0100

    btrfs: fix extent buffer leak after tree mod log failure at split_node()
    
    [ Upstream commit ede600e497b1461d06d22a7d17703d9096868bc3 ]
    
    At split_node(), if we fail to log the tree mod log copy operation, we
    return without unlocking the split extent buffer we just allocated and
    without decrementing the reference we own on it. Fix this by unlocking
    it and decrementing the ref count before returning.
    
    Fixes: 5de865eebb83 ("Btrfs: fix tree mod logging")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52403c3dad2030d669471d3d779be7c5b91f7ab0
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 19 17:21:50 2023 +0100

    btrfs: fix race between quota disable and relocation
    
    [ Upstream commit 8a4a0b2a3eaf75ca8854f856ef29690c12b2f531 ]
    
    If we disable quotas while we have a relocation of a metadata block group
    that has extents belonging to the quota root, we can cause the relocation
    to fail with -ENOENT. This is because relocation builds backref nodes for
    extents of the quota root and later needs to walk the backrefs and access
    the quota root - however if in between a task disables quotas, it results
    in deleting the quota root from the root tree (with btrfs_del_root(),
    called from btrfs_quota_disable().
    
    This can be sporadically triggered by test case btrfs/255 from fstests:
    
      $ ./check btrfs/255
      FSTYP         -- btrfs
      PLATFORM      -- Linux/x86_64 debian0 6.4.0-rc6-btrfs-next-134+ #1 SMP PREEMPT_DYNAMIC Thu Jun 15 11:59:28 WEST 2023
      MKFS_OPTIONS  -- /dev/sdc
      MOUNT_OPTIONS -- /dev/sdc /home/fdmanana/btrfs-tests/scratch_1
    
      btrfs/255 6s ... _check_dmesg: something found in dmesg (see /home/fdmanana/git/hub/xfstests/results//btrfs/255.dmesg)
      - output mismatch (see /home/fdmanana/git/hub/xfstests/results//btrfs/255.out.bad)
    #      --- tests/btrfs/255.out  2023-03-02 21:47:53.876609426 +0000
    #      +++ /home/fdmanana/git/hub/xfstests/results//btrfs/255.out.bad   2023-06-16 10:20:39.267563212 +0100
    #      @@ -1,2 +1,4 @@
    #       QA output created by 255
    #      +ERROR: error during balancing '/home/fdmanana/btrfs-tests/scratch_1': No such file or directory
    #      +There may be more info in syslog - try dmesg | tail
    #       Silence is golden
    #      ...
          (Run 'diff -u /home/fdmanana/git/hub/xfstests/tests/btrfs/255.out /home/fdmanana/git/hub/xfstests/results//btrfs/255.out.bad'  to see the entire diff)
      Ran: btrfs/255
      Failures: btrfs/255
      Failed 1 of 1 tests
    
    To fix this make the quota disable operation take the cleaner mutex, as
    relocation of a block group also takes this mutex. This is also what we
    do when deleting a subvolume/snapshot, we take the cleaner mutex in the
    cleaner kthread (at cleaner_kthread()) and then we call btrfs_del_root()
    at btrfs_drop_snapshot() while under the protection of the cleaner mutex.
    
    Fixes: bed92eae26cc ("Btrfs: qgroup implementation and prototypes")
    CC: stable@vger.kernel.org # 5.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3069fc0326b823c5595cb066d2cc8b3b00c09f15
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Jul 10 14:34:25 2023 +0200

    gpio: tps68470: Make tps68470_gpio_output() always set the initial value
    
    [ Upstream commit 5a7adc6c1069ce31ef4f606ae9c05592c80a6ab5 ]
    
    Make tps68470_gpio_output() call tps68470_gpio_set() for output-only pins
    too, so that the initial value passed to gpiod_direction_output() is
    honored for these pins too.
    
    Fixes: 275b13a65547 ("gpio: Add support for TPS68470 GPIOs")
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Daniel Scally <dan.scally@ideasonboard.com>
    Tested-by: Daniel Scally <dan.scally@ideasonboard.com>
    Reviewed-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22786d53817d1452f30373807f8202bb9bf43732
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Tue Jul 18 13:56:07 2023 +0200

    io_uring: don't audit the capability check in io_uring_create()
    
    [ Upstream commit 6adc2272aaaf84f34b652cf77f770c6fcc4b8336 ]
    
    The check being unconditional may lead to unwanted denials reported by
    LSMs when a process has the capability granted by DAC, but denied by an
    LSM. In the case of SELinux such denials are a problem, since they can't
    be effectively filtered out via the policy and when not silenced, they
    produce noise that may hide a true problem or an attack.
    
    Since not having the capability merely means that the created io_uring
    context will be accounted against the current user's RLIMIT_MEMLOCK
    limit, we can disable auditing of denials for this check by using
    ns_capable_noaudit() instead of capable().
    
    Fixes: 2b188cc1bb85 ("Add io_uring IO interface")
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2193317
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
    Link: https://lore.kernel.org/r/20230718115607.65652-1-omosnace@redhat.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e635da0e0d3cb45e32fa79b36218fb98281bc10
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>
Date:   Wed Jul 5 13:19:37 2023 +0200

    KVM: s390: pv: fix index value of replaced ASCE
    
    [ Upstream commit c2fceb59bbda16468bda82b002383bff59de89ab ]
    
    The index field of the struct page corresponding to a guest ASCE should
    be 0. When replacing the ASCE in s390_replace_asce(), the index of the
    new ASCE should also be set to 0.
    
    Having the wrong index might lead to the wrong addresses being passed
    around when notifying pte invalidations, and eventually to validity
    intercepts (VM crash) if the prefix gets unmapped and the notifier gets
    called with the wrong address.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@linaro.org>
    Fixes: faa2f72cb356 ("KVM: s390: pv: leak the topmost page table when destroy fails")
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Message-ID: <20230705111937.33472-3-imbrenda@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

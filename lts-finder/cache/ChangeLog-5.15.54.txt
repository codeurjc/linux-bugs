commit 843dae1756d9bddee21a96827784791fd97d484e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 12 16:35:19 2022 +0200

    Linux 5.15.54
    
    Link: https://lore.kernel.org/r/20220711090604.055883544@linuxfoundation.org
    Link: https://lore.kernel.org/r/20220711145306.494277196@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Link: https://lore.kernel.org/r/20220712071513.420542604@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0c041a60cac9ce2cdfa48fc45d525633428760e
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Jun 30 14:22:28 2022 +0800

    selftests/net: fix section name when using xdp_dummy.o
    
    commit d28b25a62a47a8c8aa19bd543863aab6717e68c9 upstream.
    
    Since commit 8fffa0e3451a ("selftests/bpf: Normalize XDP section names in
    selftests") the xdp_dummy.o's section name has changed to xdp. But some
    tests are still using "section xdp_dummy", which make the tests failed.
    Fix them by updating to the new section name.
    
    Fixes: 8fffa0e3451a ("selftests/bpf: Normalize XDP section names in selftests")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20220630062228.3453016-1-liuhangbin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5fe76328ea53d38c4f86aef52eb3af5bac9ab63
Author: Dave Jiang <dave.jiang@intel.com>
Date:   Tue Jun 28 16:00:56 2022 -0700

    dmaengine: idxd: force wq context cleanup on device disable path
    
    commit 44c4237cf3436bda2b185ff728123651ad133f69 upstream.
    
    Testing shown that when a wq mode is setup to be dedicated and then torn
    down and reconfigured to shared, the wq configured end up being dedicated
    anyays. The root cause is when idxd_device_wqs_clear_state() gets called
    during idxd_driver removal, idxd_wq_disable_cleanup() does not get called
    vs when the wq driver is removed first. The check of wq state being
    "enabled" causes the cleanup to be bypassed. However, idxd_driver->remove()
    releases all wq drivers. So the wqs goes to "disabled" state and will never
    be "enabled". By that point, the driver has no idea if the wq was
    previously configured or clean. So force call idxd_wq_disable_cleanup() on
    all wqs always to make sure everything gets cleaned up.
    
    Reported-by: Tony Zhu <tony.zhu@intel.com>
    Tested-by: Tony Zhu <tony.zhu@intel.com>
    Fixes: 0dcfe41e9a4c ("dmanegine: idxd: cleanup all device related bits after disabling device")
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Co-developed-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Link: https://lore.kernel.org/r/20220628230056.2527816-1-fenghua.yu@intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 568b2bd79b59f3c376bec40d7e93fb22c9d8a65f
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Jun 5 08:27:22 2022 +0400

    dmaengine: ti: Add missing put_device in ti_dra7_xbar_route_allocate
    
    commit 615a4bfc426e11dba05c2cf343f9ac752fb381d2 upstream.
    
    of_find_device_by_node() takes reference, we should use put_device()
    to release it when not need anymore.
    
    Fixes: a074ae38f859 ("dmaengine: Add driver for TI DMA crossbar on DRA7x")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Link: https://lore.kernel.org/r/20220605042723.17668-1-linmq006@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f6ded79068cac8cff41d5d5632564165d98ee12
Author: Caleb Connolly <caleb.connolly@linaro.org>
Date:   Wed Jun 29 15:06:00 2022 +0100

    dmaengine: qcom: bam_dma: fix runtime PM underflow
    
    commit 0ac9c3dd0d6fe293cd5044cfad10bec27d171e4e upstream.
    
    Commit dbad41e7bb5f ("dmaengine: qcom: bam_dma: check if the runtime pm enabled")
    caused unbalanced pm_runtime_get/put() calls when the bam is
    controlled remotely. This commit reverts it and just enables pm_runtime
    in all cases, the clk_* functions already just nop when the clock is NULL.
    
    Also clean up a bit by removing unnecessary bamclk null checks.
    
    Suggested-by: Stephan Gerhold <stephan@gerhold.net>
    Fixes: dbad41e7bb5f ("dmaengine: qcom: bam_dma: check if the runtime pm enabled")
    Signed-off-by: Caleb Connolly <caleb.connolly@linaro.org>
    Link: https://lore.kernel.org/r/20220629140559.118537-1-caleb.connolly@linaro.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb9813d7eae917acd34436160a278b8b5d48ca53
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Jun 5 08:27:23 2022 +0400

    dmaengine: ti: Fix refcount leak in ti_dra7_xbar_route_allocate
    
    commit c132fe78ad7b4ce8b5d49a501a15c29d08eeb23a upstream.
    
    of_parse_phandle() returns a node pointer with refcount
    incremented, we should use of_node_put() on it when not needed anymore.
    
    Add missing of_node_put() in to fix this.
    
    Fixes: ec9bfa1e1a79 ("dmaengine: ti-dma-crossbar: dra7: Use bitops instead of idr")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220605042723.17668-2-linmq006@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e08ccbaa5fb3f2abed9290380f86332d64720b60
Author: Michael Walle <michael@walle.cc>
Date:   Thu May 26 15:51:11 2022 +0200

    dmaengine: at_xdma: handle errors of at_xdmac_alloc_desc() correctly
    
    commit 3770d92bd5237d686e49da7b2fb86f53ee6ed259 upstream.
    
    It seems that it is valid to have less than the requested number of
    descriptors. But what is not valid and leads to subsequent errors is to
    have zero descriptors. In that case, abort the probing.
    
    Fixes: e1f7c9eee707 ("dmaengine: at_xdmac: creation of the atmel eXtended DMA Controller driver")
    Signed-off-by: Michael Walle <michael@walle.cc>
    Link: https://lore.kernel.org/r/20220526135111.1470926-1-michael@walle.cc
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c787908bee3fd1300be61822dd4ccc96e9bc397b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun May 22 19:41:05 2022 +0200

    dmaengine: lgm: Fix an error handling path in intel_ldma_probe()
    
    commit 1dbe67b9faea0bc340cce894018076679c16cb71 upstream.
    
    ldma_clk_disable() calls both:
            clk_disable_unprepare(d->core_clk);
            reset_control_assert(d->rst);
    
    So, should devm_reset_control_get_optional() fail, core_clk should not
    be prepare_enable'd before it, otherwise it will never be
    disable_unprepare'd.
    
    Reorder the code to handle the error handling path as expected.
    
    Fixes: 32d31c79a1a4 ("dmaengine: Add Intel LGM SoC DMA support.")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/18504549bc4d2b62a72a02cb22a2e4d8e6a58720.1653241224.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bbb30d077f241be01591fd15e0814469eba41ef
Author: Dmitry Osipenko <dmitry.osipenko@collabora.com>
Date:   Fri May 20 21:14:32 2022 +0300

    dmaengine: pl330: Fix lockdep warning about non-static key
    
    commit b64b3b2f1d81f83519582e1feee87d77f51f5f17 upstream.
    
    The DEFINE_SPINLOCK() macro shouldn't be used for dynamically allocated
    spinlocks. The lockdep warns about this and disables locking validator.
    Fix the warning by making lock static.
    
     INFO: trying to register non-static key.
     The code is fine but needs lockdep annotation, or maybe
     you didn't initialize this object before use?
     turning off the locking correctness validator.
     Hardware name: Radxa ROCK Pi 4C (DT)
     Call trace:
      dump_backtrace.part.0+0xcc/0xe0
      show_stack+0x18/0x6c
      dump_stack_lvl+0x8c/0xb8
      dump_stack+0x18/0x34
      register_lock_class+0x4a8/0x4cc
      __lock_acquire+0x78/0x20cc
      lock_acquire.part.0+0xe0/0x230
      lock_acquire+0x68/0x84
      _raw_spin_lock_irqsave+0x84/0xc4
      add_desc+0x44/0xc0
      pl330_get_desc+0x15c/0x1d0
      pl330_prep_dma_cyclic+0x100/0x270
      snd_dmaengine_pcm_trigger+0xec/0x1c0
      dmaengine_pcm_trigger+0x18/0x24
      ...
    
    Fixes: e588710311ee ("dmaengine: pl330: fix descriptor allocation fail")
    Signed-off-by: Dmitry Osipenko <dmitry.osipenko@collabora.com>
    Link: https://lore.kernel.org/r/20220520181432.149904-1-dmitry.osipenko@collabora.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b07022de2d3d1e3cb0a673e2c4b35df6a0099ca
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 10 13:55:49 2022 -0700

    ida: don't use BUG_ON() for debugging
    
    commit fc82bbf4dede758007763867d0282353c06d1121 upstream.
    
    This is another old BUG_ON() that just shouldn't exist (see also commit
    a382f8fee42c: "signal handling: don't use BUG_ON() for debugging").
    
    In fact, as Matthew Wilcox points out, this condition shouldn't really
    even result in a warning, since a negative id allocation result is just
    a normal allocation failure:
    
      "I wonder if we should even warn here -- sure, the caller is trying to
       free something that wasn't allocated, but we don't warn for
       kfree(NULL)"
    
    and goes on to point out how that current error check is only causing
    people to unnecessarily do their own index range checking before freeing
    it.
    
    This was noted by Itay Iellin, because the bluetooth HCI socket cookie
    code does *not* do that range checking, and ends up just freeing the
    error case too, triggering the BUG_ON().
    
    The HCI code requires CAP_NET_RAW, and seems to just result in an ugly
    splat, but there really is no reason to BUG_ON() here, and we have
    generally striven for allocation models where it's always ok to just do
    
        free(alloc());
    
    even if the allocation were to fail for some random reason (usually
    obviously that "random" reason being some resource limit).
    
    Fixes: 88eca0207cf1 ("ida: simplified functions for id allocation")
    Reported-by: Itay Iellin <ieitayie@gmail.com>
    Suggested-by: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9839d89112d4cefb1a03592d710a58f02ce740f0
Author: Samuel Holland <samuel@sholland.org>
Date:   Fri Jul 1 22:19:02 2022 -0500

    dt-bindings: dma: allwinner,sun50i-a64-dma: Fix min/max typo
    
    commit 607a48c78e6b427b0b684d24e61c19e846ad65d6 upstream.
    
    The conditional block for variants with a second clock should have set
    minItems, not maxItems, which was already 2. Since clock-names requires
    two items, this typo should not have caused any problems.
    
    Fixes: edd14218bd66 ("dt-bindings: dmaengine: Convert Allwinner A31 and A64 DMA to a schema")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20220702031903.21703-1-samuel@sholland.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e99bad0d76cf23551f2b0e47d1e18ab6fc8bb9cb
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Tue May 10 14:26:20 2022 +0200

    Revert "serial: 8250_mtk: Make sure to select the right FEATURE_SEL"
    
    commit f0136f65285bcfb7e8f90d1013723076a35acd51 upstream.
    
    It was found that some MediaTek SoCs are incompatible with this
    change. Also, this register was mistakenly understood as it was
    related to the 16550A register layout selection but, at least
    on some IPs, if not all, it's related to something else unknown.
    
    This reverts commit 6f81fdded0d024c7d4084d434764f30bca1cd6b1.
    
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Fixes: 6f81fdded0d0 ("serial: 8250_mtk: Make sure to select the right FEATURE_SEL")
    Reported-by: "kernelci.org bot" <bot@kernelci.org>
    Link: https://lore.kernel.org/r/20220510122620.150342-1-angelogioacchino.delregno@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fa22e7906c1caf4731dc150a464547468b4b03a
Author: Naoya Horiguchi <naoya.horiguchi@nec.com>
Date:   Thu Apr 28 23:16:02 2022 -0700

    Revert "mm/memory-failure.c: fix race with changing page compound again"
    
    commit 2ba2b008a8bf5fd268a43d03ba79e0ad464d6836 upstream.
    
    Reverts commit 888af2701db7 ("mm/memory-failure.c: fix race with changing
    page compound again") because now we fetch the page refcount under
    hugetlb_lock in try_memory_failure_hugetlb() so that the race check is no
    longer necessary.
    
    Link: https://lkml.kernel.org/r/20220408135323.1559401-4-naoya.horiguchi@linux.dev
    Signed-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Suggested-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1c98764c3c31e01800b7b0a1b15be7a04ebe3d8
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Fri Jul 1 10:53:52 2022 -0600

    misc: rtsx_usb: set return value in rsp_buf alloc err path
    
    commit 2cd37c2e72449a7add6da1183d20a6247d6db111 upstream.
    
    Set return value in rsp_buf alloc error path before going to
    error handling.
    
    drivers/misc/cardreader/rtsx_usb.c:639:6: warning: variable 'ret' is used uninitialized whenever 'if' condition is true [-Wsometimes-uninitialized]
               if (!ucr->rsp_buf)
                   ^~~~~~~~~~~~~
       drivers/misc/cardreader/rtsx_usb.c:678:9: note: uninitialized use occurs here
               return ret;
                      ^~~
       drivers/misc/cardreader/rtsx_usb.c:639:2: note: remove the 'if' if its condition is always false
               if (!ucr->rsp_buf)
               ^~~~~~~~~~~~~~~~~~
       drivers/misc/cardreader/rtsx_usb.c:622:9: note: initialize the variable 'ret' to silence this warning
               int ret;
                      ^
                       = 0
    
    Fixes: 3776c7855985 ("misc: rtsx_usb: use separate command and response buffers")
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20220701165352.15687-1-skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bab1a05a11418d6b77723aa782bf7c7229889924
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Thu Jun 30 20:32:56 2022 -0600

    misc: rtsx_usb: use separate command and response buffers
    
    commit 3776c78559853fd151be7c41e369fd076fb679d5 upstream.
    
    rtsx_usb uses same buffer for command and response. There could
    be a potential conflict using the same buffer for both especially
    if retries and timeouts are involved.
    
    Use separate command and response buffers to avoid conflicts.
    
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/07e3721804ff07aaab9ef5b39a5691d0718b9ade.1656642167.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 378080b7d8dd39069c3c0a6d5ff5a0a9a00189b4
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Thu Jun 30 20:32:55 2022 -0600

    misc: rtsx_usb: fix use of dma mapped buffer for usb bulk transfer
    
    commit eb7f8e28420372787933eec079735c35034bda7d upstream.
    
    rtsx_usb driver allocates coherent dma buffer for urb transfers.
    This buffer is passed to usb_bulk_msg() and usb core tries to
    map already mapped buffer running into a dma mapping error.
    
    xhci_hcd 0000:01:00.0: rejecting DMA map of vmalloc memory
    WARNING: CPU: 1 PID: 279 at include/linux/dma-mapping.h:326 usb_ hcd_map_urb_for_dma+0x7d6/0x820
    
    ...
    
    xhci_map_urb_for_dma+0x291/0x4e0
    usb_hcd_submit_urb+0x199/0x12b0
    ...
    usb_submit_urb+0x3b8/0x9e0
    usb_start_wait_urb+0xe3/0x2d0
    usb_bulk_msg+0x115/0x240
    rtsx_usb_transfer_data+0x185/0x1a8 [rtsx_usb]
    rtsx_usb_send_cmd+0xbb/0x123 [rtsx_usb]
    rtsx_usb_write_register+0x12c/0x143 [rtsx_usb]
    rtsx_usb_probe+0x226/0x4b2 [rtsx_usb]
    
    Fix it to use kmalloc() to get DMA-able memory region instead.
    
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/667d627d502e1ba9ff4f9b94966df3299d2d3c0d.1656642167.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d76704f8ccbb4a3905c9b4b094a8af785a2a747e
Author: Peter Robinson <pbrobinson@gmail.com>
Date:   Mon Jun 6 17:10:34 2022 +0100

    dmaengine: imx-sdma: Allow imx8m for imx7 FW revs
    
    commit a7cd3cf0b2e5aaacfe5e02c472bd28e98e640be7 upstream.
    
    The revision of the imx-sdma IP that is in the i.MX8M series is the
    same is that as that in the i.MX7 series but the imx7d MODULE_FIRMWARE
    directive is wrapped in a condiditional which means it's not defined
    when built for aarch64 SOC_IMX8M platforms and hence you get the
    following errors when the driver loads on imx8m devices:
    
    imx-sdma 302c0000.dma-controller: Direct firmware load for imx/sdma/sdma-imx7d.bin failed with error -2
    imx-sdma 302c0000.dma-controller: external firmware not found, using ROM firmware
    
    Add the SOC_IMX8M into the check so the firmware can load on i.MX8.
    
    Fixes: 1474d48bd639 ("arm64: dts: imx8mq: Add SDMA nodes")
    Fixes: 941acd566b18 ("dmaengine: imx-sdma: Only check ratio on parts that support 1:1")
    Signed-off-by: Peter Robinson <pbrobinson@gmail.com>
    Cc: stable@vger.kernel.org   # v5.2+
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Link: https://lore.kernel.org/r/20220606161034.3544803-1-pbrobinson@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 530ee8d3c6a473dfba62bd15487c3b05728bf097
Author: Satish Nagireddy <satish.nagireddy@getcruise.com>
Date:   Tue Jun 28 12:12:16 2022 -0700

    i2c: cadence: Unregister the clk notifier in error path
    
    [ Upstream commit 3501f0c663063513ad604fb1b3f06af637d3396d ]
    
    This patch ensures that the clock notifier is unregistered
    when driver probe is returning error.
    
    Fixes: df8eb5691c48 ("i2c: Add driver for Cadence I2C controller")
    Signed-off-by: Satish Nagireddy <satish.nagireddy@getcruise.com>
    Tested-by: Lars-Peter Clausen <lars@metafoo.de>
    Reviewed-by: Michal Simek <michal.simek@amd.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 941d77b795d1a9c1a84a37df9c262ede8edb4ae0
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Tue Jul 5 21:15:22 2022 +0200

    r8169: fix accessing unset transport header
    
    [ Upstream commit faa4e04e5e140a6d02260289a8fba8fd8d7a3003 ]
    
    66e4c8d95008 ("net: warn if transport header was not set") added
    a check that triggers a warning in r8169, see [0].
    
    The commit referenced in the Fixes tag refers to the change from
    which the patch applies cleanly, there's nothing wrong with this
    commit. It seems the actual issue (not bug, because the warning
    is harmless here) was introduced with bdfa4ed68187
    ("r8169: use Giant Send").
    
    [0] https://bugzilla.kernel.org/show_bug.cgi?id=216157
    
    Fixes: 8d520b4de3ed ("r8169: work around RTL8125 UDP hw bug")
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Tested-by: Erhard F. <erhard_f@mailbox.org>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/1b2c2b29-3dc0-f7b6-5694-97ec526d51a0@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3abec0b381737580e3534988e0b647e780113897
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Jul 3 10:36:26 2022 +0300

    selftests: forwarding: fix error message in learning_test
    
    [ Upstream commit 83844aacab2015da1dba1df0cc61fc4b4c4e8076 ]
    
    When packets are not received, they aren't received on $host1_if, so the
    message talking about the second host not receiving them is incorrect.
    Fix it.
    
    Fixes: d4deb01467ec ("selftests: forwarding: Add a test for FDB learning")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b74fe2e8f5ced78001cf5efd5d24cd304b4c538
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Jul 3 10:36:25 2022 +0300

    selftests: forwarding: fix learning_test when h1 supports IFF_UNICAST_FLT
    
    [ Upstream commit 1a635d3e1c80626237fdae47a5545b6655d8d81c ]
    
    The first host interface has by default no interest in receiving packets
    MAC DA de:ad:be:ef:13:37, so it might drop them before they hit the tc
    filter and this might confuse the selftest.
    
    Enable promiscuous mode such that the filter properly counts received
    packets.
    
    Fixes: d4deb01467ec ("selftests: forwarding: Add a test for FDB learning")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Tested-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e5fcfecd99a1ce881aaeba031b1a7faccfefc7a
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Jul 3 10:36:24 2022 +0300

    selftests: forwarding: fix flood_unicast_test when h2 supports IFF_UNICAST_FLT
    
    [ Upstream commit b8e629b05f5d23f9649c901bef09fab8b0c2e4b9 ]
    
    As mentioned in the blamed commit, flood_unicast_test() works by
    checking the match count on a tc filter placed on the receiving
    interface.
    
    But the second host interface (host2_if) has no interest in receiving a
    packet with MAC DA de:ad:be:ef:13:37, so its RX filter drops it even
    before the ingress tc filter gets to be executed. So we will incorrectly
    get the message "Packet was not flooded when should", when in fact, the
    packet was flooded as expected but dropped due to an unrelated reason,
    at some other layer on the receiving side.
    
    Force h2 to accept this packet by temporarily placing it in promiscuous
    mode. Alternatively we could either deliver to its MAC address or use
    tcpdump_start, but this has the fewest complications.
    
    This fixes the "flooding" test from bridge_vlan_aware.sh and
    bridge_vlan_unaware.sh, which calls flood_test from the lib.
    
    Fixes: 236dd50bf67a ("selftests: forwarding: Add a test for flooded traffic")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Tested-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fdca34e78110cafa99467c302b61e68b2f5dce5
Author: Rick Lindsley <ricklind@us.ibm.com>
Date:   Sat Jul 2 03:37:12 2022 -0700

    ibmvnic: Properly dispose of all skbs during a failover.
    
    [ Upstream commit 1b18f09d31cfa7148df15a7d5c5e0e86f105f7d1 ]
    
    During a reset, there may have been transmits in flight that are no
    longer valid and cannot be fulfilled.  Resetting and clearing the
    queues is insufficient; each skb also needs to be explicitly freed
    so that upper levels are not left waiting for confirmation of a
    transmit that will never happen.  If this happens frequently enough,
    the apparent backlog will cause TCP to begin "congestion control"
    unnecessarily, culminating in permanently decreased throughput.
    
    Fixes: d7c0ef36bde03 ("ibmvnic: Free and re-allocate scrqs when tx/rx scrqs change")
    Tested-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Brian King <brking@linux.vnet.ibm.com>
    Signed-off-by: Rick Lindsley <ricklind@us.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5912e5e47ac99852dc4a8784c74b80a01c1765d9
Author: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date:   Tue Jun 21 10:45:09 2022 +0200

    ARM: dts: stm32: add missing usbh clock and fix clk order on stm32mp15
    
    [ Upstream commit 1d0c1aadf1fd9f3de95d1532b3651e8634546e71 ]
    
    The USBH composed of EHCI and OHCI controllers needs the PHY clock to be
    initialized first, before enabling (gating) them. The reverse is also
    required when going to suspend.
    So, add USBPHY clock as 1st entry in both controllers, so the USBPHY PLL
    gets enabled 1st upon controller init. Upon suspend/resume, this also makes
    the clock to be disabled/re-enabled in the correct order.
    This fixes some IRQ storm conditions seen when going to low-power, due to
    PHY PLL being disabled before all clocks are cleanly gated.
    
    Fixes: 949a0c0dec85 ("ARM: dts: stm32: add USB Host (USBH) support to stm32mp157c")
    Fixes: db7be2cb87ae ("ARM: dts: stm32: use usbphyc ck_usbo_48m as USBH OHCI clock on stm32mp151")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5670adf5cffe9075b906e122b7250d02cf9fd91
Author: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date:   Wed Oct 6 11:53:55 2021 +0200

    ARM: dts: stm32: use usbphyc ck_usbo_48m as USBH OHCI clock on stm32mp151
    
    [ Upstream commit db7be2cb87ae65e2d033a9f61f7fb94bce505177 ]
    
    Referring to the note under USBH reset and clocks chapter of RM0436,
    "In order to access USBH_OHCI registers it is necessary to activate the USB
    clocks by enabling the PLL controlled by USBPHYC" (ck_usbo_48m).
    
    The point is, when USBPHYC PLL is not enabled, OHCI register access
    freezes the resume from STANDBY. It is the case when dual USBH is enabled,
    instead of OTG + single USBH.
    When OTG is probed, as ck_usbo_48m is USBO clock parent, then USBPHYC PLL
    is enabled and OHCI register access is OK.
    
    This patch adds ck_usbo_48m (provided by USBPHYC PLL) as clock of USBH
    OHCI, thus USBPHYC PLL will be enabled and OHCI register access will be OK.
    
    Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddec6cbbe22781d17965f1e6386e5a6363c058d2
Author: Norbert Zulinski <norbertx.zulinski@intel.com>
Date:   Wed Jun 8 11:10:56 2022 +0200

    i40e: Fix VF's MAC Address change on VM
    
    [ Upstream commit fed0d9f13266a22ce1fc9a97521ef9cdc6271a23 ]
    
    Clear VF MAC from parent PF and remove VF filter from VSI when both
    conditions are true:
    -VIRTCHNL_VF_OFFLOAD_USO is not used
    -VM MAC was not set from PF level
    
    It affects older version of IAVF and it allow them to change MAC
    Address on VM, newer IAVF won't change their behaviour.
    
    Previously it wasn't possible to change VF's MAC Address on VM
    because there is flag on IAVF driver that won't allow to
    change MAC Address if this address is given from PF driver.
    
    Fixes: 155f0ac2c96b ("iavf: allow permanent MAC address to change")
    Signed-off-by: Norbert Zulinski <norbertx.zulinski@intel.com>
    Signed-off-by: Jan Sokolowski <jan.sokolowski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d1e322a910346f15e59b5d85d780dd74b6d17cb
Author: Lukasz Cieplicki <lukaszx.cieplicki@intel.com>
Date:   Tue May 31 12:54:20 2022 +0200

    i40e: Fix dropped jumbo frames statistics
    
    [ Upstream commit 1adb1563e7b7ec659379a18e607e8bc3522d8a78 ]
    
    Dropped packets caused by too large frames were not included in
    dropped RX packets statistics.
    Issue was caused by not reading the GL_RXERR1 register. That register
    stores count of packet which was have been dropped due to too large
    size.
    
    Fix it by reading GL_RXERR1 register for each interface.
    
    Repro steps:
    Send a packet larger than the set MTU to SUT
    Observe rx statists: ethtool -S <interface> | grep rx | grep -v ": 0"
    
    Fixes: 41a9e55c89be ("i40e: add missing VSI statistics")
    Signed-off-by: Lukasz Cieplicki <lukaszx.cieplicki@intel.com>
    Signed-off-by: Jedrzej Jagielski <jedrzej.jagielski@intel.com>
    Tested-by: Gurucharan <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2bf1a6480e8d44658a8ac3bdcec081238873212
Author: Jean Delvare <jdelvare@suse.de>
Date:   Wed Jun 22 08:37:43 2022 +0200

    i2c: piix4: Fix a memory leak in the EFCH MMIO support
    
    [ Upstream commit 8ad59b397f86a4d8014966fdc0552095a0c4fb2b ]
    
    The recently added support for EFCH MMIO regions introduced a memory
    leak in that code path. The leak is caused by the fact that
    release_resource() merely removes the resource from the tree but does
    not free its memory. We need to call release_mem_region() instead,
    which does free the memory. As a nice side effect, this brings back
    some symmetry between the legacy and MMIO paths.
    
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Reported-by: Yi Zhang <yi.zhang@redhat.com>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Reviewed-by: Terry Bowman <terry.bowman@amd.com>
    Tested-by: Terry Bowman <Terry.Bowman@amd.com>
    Fixes: 7c148722d074 ("i2c: piix4: Add EFCH MMIO support to region request and release")
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7a1d51009217125e71b2287f0c57909bcca0914
Author: Ivan Malov <ivan.malov@oktetlabs.ru>
Date:   Tue Jun 28 12:18:48 2022 +0300

    xsk: Clear page contiguity bit when unmapping pool
    
    [ Upstream commit 512d1999b8e94a5d43fba3afc73e774849674742 ]
    
    When a XSK pool gets mapped, xp_check_dma_contiguity() adds bit 0x1
    to pages' DMA addresses that go in ascending order and at 4K stride.
    
    The problem is that the bit does not get cleared before doing unmap.
    As a result, a lot of warnings from iommu_dma_unmap_page() are seen
    in dmesg, which indicates that lookups by iommu_iova_to_phys() fail.
    
    Fixes: 2b43470add8c ("xsk: Introduce AF_XDP buffer allocation API")
    Signed-off-by: Ivan Malov <ivan.malov@oktetlabs.ru>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Link: https://lore.kernel.org/bpf/20220628091848.534803-1-ivan.malov@oktetlabs.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2b92fffd51b9b7fddf77427f52a55d2f25a9692
Author: Mihai Sain <mihai.sain@microchip.com>
Date:   Thu Jun 16 11:13:44 2022 +0300

    ARM: at91: fix soc detection for SAM9X60 SiPs
    
    [ Upstream commit 35074df65a8d8c5328a83e2eea948f7bbc8e6e08 ]
    
    Fix SoC detection for SAM9X60 SiPs:
    SAM9X60D5M
    SAM9X60D1G
    SAM9X60D6K
    
    Fixes: af3a10513cd6 ("drivers: soc: atmel: add per soc id and version match masks")
    Signed-off-by: Mihai Sain <mihai.sain@microchip.com>
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220616081344.1978664-1-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3ee4ffa3c924ccd40a72a6374fe6dbb33a995ed
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Tue Jun 7 12:04:55 2022 +0300

    ARM: dts: at91: sama5d2_icp: fix eeprom compatibles
    
    [ Upstream commit 416ce193d73a734ded6d09fe141017b38af1c567 ]
    
    The eeprom memories on the board are microchip 24aa025e48, which are 2 Kbits
    and are compatible with at24c02 not at24c32.
    
    Fixes: 68a95ef72cefe ("ARM: dts: at91: sama5d2-icp: add SAMA5D2-ICP")
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220607090455.80433-2-eugen.hristev@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5b0e6d7b453193efbb26bb91e0827f3217f6bfb
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Tue Jun 7 12:04:54 2022 +0300

    ARM: dts: at91: sam9x60ek: fix eeprom compatible and size
    
    [ Upstream commit f2cbbc3f926316ccf8ef9363d8a60c1110afc1c7 ]
    
    The board has a microchip 24aa025e48 eeprom, which is a 2 Kbits memory,
    so it's compatible with at24c02 not at24c32.
    Also the size property is wrong, it's not 128 bytes, but 256 bytes.
    Thus removing and leaving it to the default (256).
    
    Fixes: 1e5f532c27371 ("ARM: dts: at91: sam9x60: add device tree for soc and board")
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220607090455.80433-1-eugen.hristev@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a65b92628ae0f16e97e130825bafb8cd50b3d2e3
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon May 23 12:24:21 2022 +0300

    ARM: at91: pm: use proper compatibles for sama7g5's rtc and rtt
    
    [ Upstream commit 1c40169b35ad58906814d53a517ac92db3d20d5f ]
    
    Use proper compatible strings for SAMA7G5's RTC and RTT IPs. These are
    necessary for configuring wakeup sources for ULP1 PM mode.
    
    Fixes: 6501330f9f5e ("ARM: at91: pm: add pm support for SAMA7G5")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220523092421.317345-4-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfd0e717bd93b725d92c9ef9354fc55a643b688a
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon May 23 12:24:20 2022 +0300

    ARM: at91: pm: use proper compatibles for sam9x60's rtc and rtt
    
    [ Upstream commit 641522665dbb25ce117c78746df1aad8b58c80e5 ]
    
    Use proper compatible strings for SAM9X60's RTC and RTT IPs. These are
    necessary for configuring wakeup sources for ULP1 PM mode.
    
    Fixes: eaedc0d379da ("ARM: at91: pm: add ULP1 support for SAM9X60")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220523092421.317345-3-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ec5fe55ba75e2a49392509c94fd8ef063ef1148
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon May 23 12:24:19 2022 +0300

    ARM: at91: pm: use proper compatible for sama5d2's rtc
    
    [ Upstream commit ddc980da8043779119acaca106c6d9b445c9b65b ]
    
    Use proper compatible strings for SAMA5D2's RTC IPs. This is necessary
    for configuring wakeup sources for ULP1 PM mode.
    
    Fixes: d7484f5c6b3b ("ARM: at91: pm: configure wakeup sources for ULP1 mode")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220523092421.317345-2-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec5533b2ce265dc3c074736d1939ef0433087e93
Author: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
Date:   Mon Jun 27 15:59:38 2022 +0200

    arm64: dts: qcom: msm8992-*: Fix vdd_lvs1_2-supply typo
    
    [ Upstream commit 5fb779558f1c97e2bf2794cb59553e569c38e2f9 ]
    
    "make dtbs_check" complains about the missing "-supply" suffix for
    vdd_lvs1_2 which is clearly a typo, originally introduced in the
    msm8994-smd-rpm.dtsi file and apparently later copied to
    msm8992-xiaomi-libra.dts:
    
    msm8992-lg-bullhead-rev-10/101.dtb: pm8994-regulators: 'vdd_lvs1_2'
    does not match any of the regexes:
      '.*-supply$', '^((s|l|lvs|5vs)[0-9]*)|(boost-bypass)|(bob)$', 'pinctrl-[0-9]+'
    From schema: regulator/qcom,smd-rpm-regulator.yaml
    
    msm8992-xiaomi-libra.dtb: pm8994-regulators: 'vdd_lvs1_2'
    does not match any of the regexes:
      '.*-supply$', '^((s|l|lvs|5vs)[0-9]*)|(boost-bypass)|(bob)$', 'pinctrl-[0-9]+'
    From schema: regulator/qcom,smd-rpm-regulator.yaml
    
    Reported-by: Rob Herring <robh@kernel.org>
    Cc: Konrad Dybcio <konrad.dybcio@somainline.org>
    Fixes: f3b2c99e73be ("arm64: dts: Enable onboard SDHCI on msm8992")
    Fixes: 0f5cdb31e850 ("arm64: dts: qcom: Add Xiaomi Libra (Mi 4C) device tree")
    Signed-off-by: Stephan Gerhold <stephan.gerhold@kernkonzept.com>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220627135938.2901871-1-stephan.gerhold@kernkonzept.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76292cf4b3bc9b89d49a21ef6d792b03362ea1b6
Author: Andrei Lalaev <andrey.lalaev@gmail.com>
Date:   Wed May 25 22:04:25 2022 +0300

    pinctrl: sunxi: sunxi_pconf_set: use correct offset
    
    [ Upstream commit cd4c1e65a32afd003b08ad4aafe1e4d3e4e8e61b ]
    
    Some Allwinner SoCs have 2 pinctrls (PIO and R_PIO).
    Previous implementation used absolute pin numbering and it was incorrect
    for R_PIO pinctrl.
    It's necessary to take into account the base pin number.
    
    Fixes: 90be64e27621 ("pinctrl: sunxi: implement pin_config_set")
    Signed-off-by: Andrei Lalaev <andrey.lalaev@gmail.com>
    Reviewed-by: Samuel Holland <samuel@sholland.org>
    Link: https://lore.kernel.org/r/20220525190423.410609-1-andrey.lalaev@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c041165d8f04c49212bc424f1ac047c065250cae
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:14:09 2022 +0800

    arm64: dts: imx8mp-phyboard-pollux-rdk: correct i2c2 & mmc settings
    
    [ Upstream commit 242d8ee9111171a6e68249aaff62643c513be6ec ]
    
    BIT3 and BIT0 are reserved bits, should not touch.
    
    Fixes: 88f7f6bcca37 ("arm64: dts: freescale: Add support for phyBOARD-Pollux-i.MX8MP")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44826474a39ab417e8f56b0efb6ae84c23e54764
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:14:08 2022 +0800

    arm64: dts: imx8mp-phyboard-pollux-rdk: correct eqos pad settings
    
    [ Upstream commit bae4de618efe1c41d34aa2e6cef8b08e46256667 ]
    
    BIT3 and BIT0 are reserved bits, should not touch.
    
    Fixes: 6f96852619d5 ("arm64: dts: freescale: Add support EQOS MAC on phyBOARD-Pollux-i.MX8MP")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea8dbe870c848246cea670b9fa9173bbecb85ce1
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:14:07 2022 +0800

    arm64: dts: imx8mp-phyboard-pollux-rdk: correct uart pad settings
    
    [ Upstream commit e266c155bd88e95f9b86379d6b0add6ac6e5452e ]
    
    BIT3 and BIT0 are reserved bits, should not touch.
    
    Fixes: 846f752866bd ("arm64: dts: imx8mp-phyboard-pollux-rdk: Change debug UART")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67a21eb8c48e106d145ad0784192973690e65170
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:14:05 2022 +0800

    arm64: dts: imx8mp-evk: correct I2C3 pad settings
    
    [ Upstream commit 0836de513ebaae5f03014641eac996290d67493d ]
    
    According to RM bit layout, BIT3 and BIT0 are reserved.
     8  7   6   5   4   3  2 1  0
    PE HYS PUE ODE FSEL X  DSE  X
    
    Although function is not broken, we should not set reserved bit.
    
    Fixes: 5e4a67ff7f69 ("arm64: dts: imx8mp-evk: Add i2c3 support")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b34da817e3fa2075030054fb24bce46b48d74906
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:14:04 2022 +0800

    arm64: dts: imx8mp-evk: correct I2C1 pad settings
    
    [ Upstream commit 05a7f43478e890513d571f36660bfedc1482a588 ]
    
    According to RM bit layout, BIT3 and BIT0 are reserved.
     8  7   6   5   4   3  2 1  0
    PE HYS PUE ODE FSEL X  DSE  X
    
    Although function is not broken, we should not set reserved bit.
    
    Fixes: 5497bc2a2bff ("arm64: dts: imx8mp-evk: Add PMIC device")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37413a0ea0900c45524623e34bea2f541e3bcd59
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:14:01 2022 +0800

    arm64: dts: imx8mp-evk: correct eqos pad settings
    
    [ Upstream commit e6e1bc0ec9e8ad212fa46d8878a6e17cd31fdf7b ]
    
    According to RM bit layout, BIT3 and BIT0 are reserved.
     8  7   6   5   4   3  2 1  0
    PE HYS PUE ODE FSEL X  DSE  X
    
    Although function is not broken, we should not set reserved bit.
    
    Fixes: dc6d5dc89bad ("arm64: dts: imx8mp-evk: enable EQOS ethernet")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebad4d73ab1c695f4846ce8413e0a66c0280ec06
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:14:00 2022 +0800

    arm64: dts: imx8mp-evk: correct vbus pad settings
    
    [ Upstream commit e2c00820a99c55c9bb40642d5818a904a1e0d664 ]
    
    0x19 is not a valid setting. According to RM bit layout, BIT3 and BIT0
    are reserved.
      8  7   6   5   4   3  2 1  0
     PE HYS PUE ODE FSEL X  DSE  X
    
    Not set reserved bit.
    
    Fixes: 43da4f92a611 ("arm64: dts: imx8mp-evk: enable usb1 as host mode")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1571c8c8724cd7d1b1ff1826ba484c831afed73
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:13:59 2022 +0800

    arm64: dts: imx8mp-evk: correct gpio-led pad settings
    
    [ Upstream commit b838582ab8d5fb11b2c0275056a9f34e1d94fece ]
    
    0x19 is not a valid setting. According to RM bit layout,
    BIT3 and BIT0 are reserved.
      8  7   6   5   4   3  2 1  0
     PE HYS PUE ODE FSEL X  DSE  X
    
    Correct setting with PE PUE set, DSE set to 0.
    
    Fixes: 50d336b12f34 ("arm64: dts: imx8mp-evk: Add GPIO LED support")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 637b3dab51f7efca293347ef16f124f83412603e
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Wed Jun 22 14:13:58 2022 +0800

    arm64: dts: imx8mp-evk: correct the uart2 pinctl value
    
    [ Upstream commit 2d4fb72b681205eed4553d8802632bd3270be3ba ]
    
    According to the IOMUXC_SW_PAD_CTL_PAD_UART2_RXD/TXD register define in
    imx8mp RM, bit0 and bit3 are reserved, and the uart2 rx/tx pin should
    enable the pull up, so need to set bit8 to 1. The original pinctl value
    0x49 is incorrect and needs to be changed to 0x140, same as uart1 and
    uart3.
    
    Fixes: 9e847693c6f3 ("arm64: dts: freescale: Add i.MX8MP EVK board support")
    Reviewed-by: Haibo Chen <haibo.chen@nxp.com>
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 401d27fec6140194551f1b0c86015a00273fe4ba
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jun 22 14:13:57 2022 +0800

    arm64: dts: imx8mp-evk: correct mmc pad settings
    
    [ Upstream commit 01785f1f156511c4f285786b4192245d4f476bf1 ]
    
    According to RM bit layout, BIT3 and BIT0 are reserved.
      8  7   6   5   4   3  2 1  0
     PE HYS PUE ODE FSEL X  DSE  X
    
    Not set reserved bit.
    
    Fixes: 9e847693c6f3 ("arm64: dts: freescale: Add i.MX8MP EVK board support")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee1ced3dd8639c4ada74117b37906e1e1df8d23a
Author: Fabio Estevam <festevam@denx.de>
Date:   Tue Jun 21 13:45:05 2022 -0300

    ARM: mxs_defconfig: Enable the framebuffer
    
    [ Upstream commit b10ef5f2ddb3a5a22ac0936c8d91a50ac5e55e77 ]
    
    Currently, when booting Linux on a imx28-evk board there is
    no display activity.
    
    Enable CONFIG_FB which is nowadays required for CONFIG_DRM_PANEL_LVDS,
    CONFIG_DRM_PANEL_SIMPLE, CONFIG_DRM_PANEL_SEIKO_43WVF1G,
    CONFIG_FB_MODE_HELPERS, CONFIG_BACKLIGHT_PWM, CONFIG_BACKLIGHT_GPIO,
    CONFIG_FRAMEBUFFER_CONSOLE, CONFIG_LOGO, CONFIG_FONTS, CONFIG_FONT_8x8
    and CONFIG_FONT_8x16.
    
    Based on commit c54467482ffd ("ARM: imx_v6_v7_defconfig: enable fb").
    
    Fixes: f611b1e7624c ("drm: Avoid circular dependencies for CONFIG_FB")
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89a718d1d080c3e0a0da6b6e3613f166bed5561a
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Tue May 31 15:47:35 2022 +0300

    arm64: dts: qcom: sdm845: use dispcc AHB clock for mdss node
    
    [ Upstream commit 3ba500dee327e0261e728edec8a4f2f563d2760c ]
    
    It was noticed that on sdm845 after an MDSS suspend/resume cycle the
    driver can not read HW_REV registers properly (they will return 0
    instead). Chaning the "iface" clock from <&gcc GCC_DISP_AHB_CLK> to
    <&dispcc DISP_CC_MDSS_AHB_CLK> fixes the issue.
    
    Fixes: 08c2a076d18f ("arm64: dts: qcom: sdm845: Add dpu to sdm845 dts file")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220531124735.1165582-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 216094007699c8eddb20f06dde98374138da9de7
Author: Konrad Dybcio <konrad.dybcio@somainline.org>
Date:   Sun May 1 20:40:16 2022 +0200

    arm64: dts: qcom: msm8994: Fix CPU6/7 reg values
    
    [ Upstream commit 47bf59c4755930f616dd90c8c6a85f40a6d347ea ]
    
    CPU6 and CPU7 were mistakengly pointing to CPU5 reg. Fix it.
    
    Fixes: 02d8091bbca0 ("arm64: dts: qcom: msm8994: Add a proper CPU map")
    Signed-off-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220501184016.64138-1-konrad.dybcio@somainline.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4157343a6a1a5f344436967cad1cc048b33a991e
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Jun 6 15:37:52 2022 -0500

    ASoC: codecs: rt700/rt711/rt711-sdca: resume bus/codec in .set_jack_detect
    
    [ Upstream commit 40737057b48f1b4db67b0d766b95c87ba8fc5e03 ]
    
    The .set_jack_detect() codec component callback is invoked during card
    registration, which happens when the machine driver is probed.
    
    The issue is that this callback can race with the bus suspend/resume,
    and IO timeouts can happen. This can be reproduced very easily if the
    machine driver is 'blacklisted' and manually probed after the bus
    suspends. The bus and codec need to be re-initialized using pm_runtime
    helpers.
    
    Previous contributions tried to make sure accesses to the bus during
    the .set_jack_detect() component callback only happen when the bus is
    active. This was done by changing the regcache status on a component
    remove. This is however a layering violation, the regcache status
    should only be modified on device probe, suspend and resume. The
    component probe/remove should not modify how the device regcache is
    handled. This solution also didn't handle all the possible race
    conditions, and the RT700 headset codec was not handled.
    
    This patch tries to resume the codec device before handling the jack
    initializations. In case the codec has not yet been initialized,
    pm_runtime may not be enabled yet, so we don't squelch the -EACCES
    error code and only stop the jack information. When the codec reports
    as attached, the jack initialization will proceed as usual.
    
    BugLink: https://github.com/thesofproject/linux/issues/3643
    Fixes: 7ad4d237e7c4a ('ASoC: rt711-sdca: Add RT711 SDCA vendor-specific driver')
    Fixes: 899b12542b089 ('ASoC: rt711: add snd_soc_component remove callback')
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Rander Wang <rander.wang@intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220606203752.144159-8-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac80a45ddb628003b8b18e5e8c2fc1d08d3e2961
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Wed May 4 18:08:58 2022 +0100

    ASoC: rt711-sdca: Add endianness flag in snd_soc_component_driver
    
    [ Upstream commit 3e50a5001055d79c04ea1c79fe4b4ff937a3339c ]
    
    The endianness flag is used on the CODEC side to specify an
    ambivalence to endian, typically because it is lost over the hardware
    link. This device receives audio over a SoundWire DAI and as such
    should have endianness applied.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20220504170905.332415-32-ckeepax@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25e61636a5c3b4b45ca4007a1d2938299e4b5f2f
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Wed May 4 18:08:57 2022 +0100

    ASoC: rt711: Add endianness flag in snd_soc_component_driver
    
    [ Upstream commit 33f06beac3ade10834a82ad4105dcd91d4b00d61 ]
    
    The endianness flag is used on the CODEC side to specify an
    ambivalence to endian, typically because it is lost over the hardware
    link. This device receives audio over a SoundWire DAI and as such
    should have endianness applied.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20220504170905.332415-31-ckeepax@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29029ca6eed728c82a87be896ab893d5f6a58847
Author: Samuel Holland <samuel@sholland.org>
Date:   Wed May 25 21:49:56 2022 -0500

    pinctrl: sunxi: a83t: Fix NAND function name for some pins
    
    [ Upstream commit aaefa29270d9551b604165a08406543efa9d16f5 ]
    
    The other NAND pins on Port C use the "nand0" function name.
    "nand0" also matches all of the other Allwinner SoCs.
    
    Fixes: 4730f33f0d82 ("pinctrl: sunxi: add allwinner A83T PIO controller support")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20220526024956.49500-1-samuel@sholland.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7208101ded1e9dcc52c8f0f8b16474211c871c1a
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu May 12 06:16:10 2022 +0400

    ARM: meson: Fix refcount leak in meson_smp_prepare_cpus
    
    [ Upstream commit 34d2cd3fccced12b958b8848e3eff0ee4296764c ]
    
    of_find_compatible_node() returns a node pointer with refcount
    incremented, we should use of_node_put() on it when done.
    Add missing of_node_put() to avoid refcount leak.
    
    Fixes: d850f3e5d296 ("ARM: meson: Add SMP bringup code for Meson8 and Meson8b")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220512021611.47921-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c26be2c3e699ad4925d4bdf944be669643a619c
Author: daniel.starke@siemens.com <daniel.starke@siemens.com>
Date:   Thu Feb 17 23:31:18 2022 -0800

    tty: n_gsm: fix encoding of command/response bit
    
    commit 57435c42400ec147a527b2313188b649e81e449e upstream.
    
    n_gsm is based on the 3GPP 07.010 and its newer version is the 3GPP 27.010.
    See https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=1516
    The changes from 07.010 to 27.010 are non-functional. Therefore, I refer to
    the newer 27.010 here. Chapter 5.2.1.2 describes the encoding of the
    C/R (command/response) bit. Table 1 shows that the actual encoding of the
    C/R bit is inverted if the associated frame is sent by the responder.
    
    The referenced commit fixed here further broke the internal meaning of this
    bit in the outgoing path by always setting the C/R bit regardless of the
    frame type.
    
    This patch fixes both by setting the C/R bit always consistently for
    command (1) and response (0) frames and inverting it later for the
    responder where necessary. The meaning of this bit in the debug output
    is being preserved and shows the bit as if it was encoded by the initiator.
    This reflects only the frame type rather than the encoded combination of
    communication side and frame type.
    
    Fixes: cc0f42122a7e ("tty: n_gsm: Modify CR,PF bit when config requester")
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20220218073123.2121-2-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b9f491386698a7e39680cb3c375e62d0cae457d
Author: Tom Rix <trix@redhat.com>
Date:   Fri Jan 21 05:45:22 2022 -0800

    btrfs: fix use of uninitialized variable at rm device ioctl
    
    commit 37b4599547e324589e011c20f74b021d6d25cb7f upstream.
    
    Clang static analysis reports this problem
    ioctl.c:3333:8: warning: 3rd function call argument is an
      uninitialized value
        ret = exclop_start_or_cancel_reloc(fs_info,
    
    cancel is only set in one branch of an if-check and is always used.  So
    initialize to false.
    
    Fixes: 1a15eb724aae ("btrfs: use btrfs_get_dev_args_from_path in dev removal ioctls")
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb91c0548ff2b32b591af04c24a8f6e0cf229ab3
Author: Ye Guojin <ye.guojin@zte.com.cn>
Date:   Wed Nov 17 06:39:55 2021 +0000

    virtio-blk: modify the value type of num in virtio_queue_rq()
    
    commit 0466a39bd0b6c462338f10d18076703d14a552de upstream.
    
    This was found by coccicheck:
    ./drivers/block/virtio_blk.c, 334, 14-17, WARNING Unsigned expression
    compared with zero  num < 0
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Ye Guojin <ye.guojin@zte.com.cn>
    Link: https://lore.kernel.org/r/20211117063955.160777-1-ye.guojin@zte.com.cn
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Fixes: 02746e26c39e ("virtio-blk: avoid preallocating big SGL for data")
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Max Gurtovoy <mgurtovoy@nvidia.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d35b78cb053a4ac5243a13ccd99101e925823a81
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Nov 16 14:50:25 2021 +0300

    btrfs: fix error pointer dereference in btrfs_ioctl_rm_dev_v2()
    
    commit d815b3f2f273537cb8afaf5ab11a46851f6c03e5 upstream.
    
    If memdup_user() fails the error handing will crash when it tries
    to kfree() an error pointer.  Just return directly because there is
    no cleanup required.
    
    Fixes: 1a15eb724aae ("btrfs: use btrfs_get_dev_args_from_path in dev removal ioctls")
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f88e79727fba1430625f794cabd46e1dc9c3837c
Author: Hui Wang <hui.wang@canonical.com>
Date:   Mon Apr 18 17:43:39 2022 +0800

    Revert "serial: sc16is7xx: Clear RS485 bits in the shutdown"
    
    commit 41c606879f89623dd5269eaffea640b915e9e17c upstream.
    
    This reverts commit 927728a34f11b5a27f4610bdb7068317d6fdc72a.
    
    Once the uart_port->rs485->flag is set to SER_RS485_ENABLED, the port
    should always work in RS485 mode. If users want the port to leave
    RS485 mode, they need to call ioctl() to clear SER_RS485_ENABLED.
    
    So here we shouldn't clear the RS485 bits in the shutdown().
    
    Fixes: 927728a34f11 ("serial: sc16is7xx: Clear RS485 bits in the shutdown")
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20220418094339.678144-1-hui.wang@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83d3449e8ae56db4829b8d716c7843f3ed1f5f6e
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Thu Jul 7 15:58:35 2022 -0700

    xfs: remove incorrect ASSERT in xfs_rename
    
    commit e445976537ad139162980bee015b7364e5b64fff upstream.
    
    This ASSERT in xfs_rename is a) incorrect, because
    (RENAME_WHITEOUT|RENAME_NOREPLACE) is a valid combination, and
    b) unnecessary, because actual invalid flag combinations are already
    handled at the vfs level in do_renameat2() before we get called.
    So, remove it.
    
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Fixes: 7dcf5c3e4527 ("xfs: add RENAME_WHITEOUT support")
    Reported-by: Ayushman Dutta <ayudutta@amazon.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63a3d237771591de087521a55f2e69845cf71d82
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Fri Jul 8 20:48:46 2022 +0200

    can: kvaser_usb: kvaser_usb_leaf: fix bittiming limits
    
    commit b3b6df2c56d80b8c6740433cff5f016668b8de70 upstream.
    
    Use correct bittiming limits depending on device. For devices based on
    USBcanII, Leaf M32C or Leaf i.MX28.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Fixes: b4f20130af23 ("can: kvaser_usb: add support for Kvaser Leaf v2 and usb mini PCIe")
    Fixes: f5d4abea3ce0 ("can: kvaser_usb: Add support for the USBcan-II family")
    Link: https://lore.kernel.org/all/20220603083820.800246-4-extja@kvaser.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    [mkl: remove stray netlink.h include]
    [mkl: keep struct can_bittiming_const kvaser_usb_flexc_bittiming_const in kvaser_usb_hydra.c]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 420b99306b7e2d7ab2bea3ec37efad36f585c716
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Fri Jul 8 20:48:45 2022 +0200

    can: kvaser_usb: kvaser_usb_leaf: fix CAN clock frequency regression
    
    commit e6c80e601053ffdac5709f11ff3ec1e19ed05f7b upstream.
    
    The firmware of M32C based Leaf devices expects bittiming parameters
    calculated for 16MHz clock. Since we use the actual clock frequency of
    the device, the device may end up with wrong bittiming parameters,
    depending on user requested parameters.
    
    This regression affects M32C based Leaf devices with non-16MHz clock.
    
    Fixes: a8b513b824e4 ("can: kvaser_usb: get CAN clock frequency from device")
    Link: https://lore.kernel.org/all/20220603083820.800246-3-extja@kvaser.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baffaed7fab3fc2e047691a4b192c03b97b2728a
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Fri Jul 8 20:48:44 2022 +0200

    can: kvaser_usb: replace run-time checks with struct kvaser_usb_driver_info
    
    commit 49f274c72357d2d74cba70b172cf369768909707 upstream.
    
    Unify and move compile-time known information into new struct
    kvaser_usb_driver_info, in favor of run-time checks.
    
    All Kvaser USBcanII supports listen-only mode and error counter
    reporting.
    
    Link: https://lore.kernel.org/all/20220603083820.800246-2-extja@kvaser.com
    Suggested-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    [mkl: move struct kvaser_usb_driver_info into kvaser_usb_core.c]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 188c798f3c2554fa0d7147e9b97baf144b817019
Author: Christian Marangi <ansuelsmth@gmail.com>
Date:   Tue Jun 21 17:11:22 2022 +0200

    net: dsa: qca8k: reset cpu port on MTU change
    
    commit 386228c694bf1e7a7688e44412cb33500b0ac585 upstream.
    
    It was discovered that the Documentation lacks of a fundamental detail
    on how to correctly change the MAX_FRAME_SIZE of the switch.
    
    In fact if the MAX_FRAME_SIZE is changed while the cpu port is on, the
    switch panics and cease to send any packet. This cause the mgmt ethernet
    system to not receive any packet (the slow fallback still works) and
    makes the device not reachable. To recover from this a switch reset is
    required.
    
    To correctly handle this, turn off the cpu ports before changing the
    MAX_FRAME_SIZE and turn on again after the value is applied.
    
    Fixes: f58d2598cf70 ("net: dsa: qca8k: implement the port MTU callbacks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
    Link: https://lore.kernel.org/r/20220621151122.10220-1-ansuelsmth@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c79726aba6af70294663b274df09e920d8e7c87f
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Thu Jun 30 14:16:54 2022 +0200

    powerpc/powernv: delay rng platform device creation until later in boot
    
    commit 887502826549caa7e4215fd9e628f48f14c0825a upstream.
    
    The platform device for the rng must be created much later in boot.
    Otherwise it tries to connect to a parent that doesn't yet exist,
    resulting in this splat:
    
      [    0.000478] kobject: '(null)' ((____ptrval____)): is not initialized, yet kobject_get() is being called.
      [    0.002925] [c000000002a0fb30] [c00000000073b0bc] kobject_get+0x8c/0x100 (unreliable)
      [    0.003071] [c000000002a0fba0] [c00000000087e464] device_add+0xf4/0xb00
      [    0.003194] [c000000002a0fc80] [c000000000a7f6e4] of_device_add+0x64/0x80
      [    0.003321] [c000000002a0fcb0] [c000000000a800d0] of_platform_device_create_pdata+0xd0/0x1b0
      [    0.003476] [c000000002a0fd00] [c00000000201fa44] pnv_get_random_long_early+0x240/0x2e4
      [    0.003623] [c000000002a0fe20] [c000000002060c38] random_init+0xc0/0x214
    
    This patch fixes the issue by doing the platform device creation inside
    of machine_subsys_initcall.
    
    Fixes: f3eac426657d ("powerpc/powernv: wire up rng during setup_arch")
    Cc: stable@vger.kernel.org
    Reported-by: Sachin Sant <sachinp@linux.ibm.com>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Tested-by: Sachin Sant <sachinp@linux.ibm.com>
    [mpe: Change "of node" to "platform device" in change log]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220630121654.1939181-1-Jason@zx2c4.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc409f88e8f71235dda7d2eddae26e481503ea4d
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Fri Jul 1 01:33:29 2022 +0800

    video: of_display_timing.h: include errno.h
    
    commit 3663a2fb325b8782524f3edb0ae32d6faa615109 upstream.
    
    If CONFIG_OF is not enabled, default of_get_display_timing() returns an
    errno, so include the header.
    
    Fixes: 422b67e0b31a ("videomode: provide dummy inline functions for !CONFIG_OF")
    Suggested-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c9c8a7a9a54bc2e3507e9c0e9e38d62dfb86f50
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jun 23 13:02:31 2022 -0700

    memregion: Fix memregion_free() fallback definition
    
    commit f50974eee5c4a5de1e4f1a3d873099f170df25f8 upstream.
    
    In the CONFIG_MEMREGION=n case, memregion_free() is meant to be a static
    inline. 0day reports:
    
        In file included from drivers/cxl/core/port.c:4:
        include/linux/memregion.h:19:6: warning: no previous prototype for
        function 'memregion_free' [-Wmissing-prototypes]
    
    Mark memregion_free() static.
    
    Fixes: 33dd70752cd7 ("lib: Uplevel the pmem "region" ida to a global allocator")
    Reported-by: kernel test robot <lkp@intel.com>
    Reviewed-by: Alison Schofield <alison.schofield@intel.com>
    Link: https://lore.kernel.org/r/165601455171.4042645.3350844271068713515.stgit@dwillia2-xfh
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79827e53b069276785ed32f34915b7c76055e42c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Jun 27 20:42:18 2022 +0200

    PM: runtime: Redefine pm_runtime_release_supplier()
    
    commit 07358194badf73e267289b40b761f5dc56928eab upstream.
    
    Instead of passing an extra bool argument to pm_runtime_release_supplier(),
    make its callers take care of triggering a runtime-suspend of the
    supplier device as needed.
    
    No expected functional impact.
    
    Suggested-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c9e44bb3dd5233232f2379c2dde0e403b1fd642
Author: Helge Deller <deller@gmx.de>
Date:   Sat Jun 25 13:00:34 2022 +0200

    fbcon: Prevent that screen size is smaller than font size
    
    commit e64242caef18b4a5840b0e7a9bff37abd4f4f933 upstream.
    
    We need to prevent that users configure a screen size which is smaller than the
    currently selected font size. Otherwise rendering chars on the screen will
    access memory outside the graphics memory region.
    
    This patch adds a new function fbcon_modechange_possible() which
    implements this check and which later may be extended with other checks
    if necessary.  The new function is called from the FBIOPUT_VSCREENINFO
    ioctl handler in fbmem.c, which will return -EINVAL if userspace asked
    for a too small screen size.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6886327780254ba749b770373653b6afc2a339fc
Author: Helge Deller <deller@gmx.de>
Date:   Sat Jun 25 12:56:49 2022 +0200

    fbcon: Disallow setting font bigger than screen size
    
    commit 65a01e601dbba8b7a51a2677811f70f783766682 upstream.
    
    Prevent that users set a font size which is bigger than the physical screen.
    It's unlikely this may happen (because screens are usually much larger than the
    fonts and each font char is limited to 32x32 pixels), but it may happen on
    smaller screens/LCD displays.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 738d06ef99cb3143513debec193959de50483b78
Author: Helge Deller <deller@gmx.de>
Date:   Wed Jun 29 15:53:55 2022 +0200

    fbmem: Check virtual screen sizes in fb_set_var()
    
    commit 6c11df58fd1ac0aefcb3b227f72769272b939e56 upstream.
    
    Verify that the fbdev or drm driver correctly adjusted the virtual
    screen sizes. On failure report the failing driver and reject the screen
    size change.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 989b2c40322e1d12df34cee6425d56c5d7fea4bf
Author: Guiling Deng <greens9@163.com>
Date:   Tue Jun 28 09:36:41 2022 -0700

    fbdev: fbmem: Fix logo center image dx issue
    
    commit 955f04766d4e6eb94bf3baa539e096808c74ebfb upstream.
    
    Image.dx gets wrong value because of missing '()'.
    
    If xres == logo->width and n == 1, image.dx = -16.
    
    Signed-off-by: Guiling Deng <greens9@163.com>
    Fixes: 3d8b1933eb1c ("fbdev: fbmem: add config option to center the bootup logo")
    Cc: stable@vger.kernel.org # v5.0+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5fde29135a451ec8b997d24e3514ed05dd466cf
Author: Yian Chen <yian.chen@intel.com>
Date:   Fri May 20 17:21:15 2022 -0700

    iommu/vt-d: Fix PCI bus rescan device hot add
    
    commit 316f92a705a4c2bf4712135180d56f3cca09243a upstream.
    
    Notifier calling chain uses priority to determine the execution
    order of the notifiers or listeners registered to the chain.
    PCI bus device hot add utilizes the notification mechanism.
    
    The current code sets low priority (INT_MIN) to Intel
    dmar_pci_bus_notifier and postpones DMAR decoding after adding
    new device into IOMMU. The result is that struct device pointer
    cannot be found in DRHD search for the new device's DMAR/IOMMU.
    Subsequently, the device is put under the "catch-all" IOMMU
    instead of the correct one. This could cause system hang when
    device TLB invalidation is sent to the wrong IOMMU. Invalidation
    timeout error and hard lockup have been observed and data
    inconsistency/crush may occur as well.
    
    This patch fixes the issue by setting a positive priority(1) for
    dmar_pci_bus_notifier while the priority of IOMMU bus notifier
    uses the default value(0), therefore DMAR decoding will be in
    advance of DRHD search for a new device to find the correct IOMMU.
    
    Following is a 2-step example that triggers the bug by simulating
    PCI device hot add behavior in Intel Sapphire Rapids server.
    
    echo 1 > /sys/bus/pci/devices/0000:6a:01.0/remove
    echo 1 > /sys/bus/pci/rescan
    
    Fixes: 59ce0515cdaf ("iommu/vt-d: Update DRHD/RMRR/ATSR device scope")
    Cc: stable@vger.kernel.org # v3.15+
    Reported-by: Zhang, Bernice <bernice.zhang@intel.com>
    Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Signed-off-by: Yian Chen <yian.chen@intel.com>
    Link: https://lore.kernel.org/r/20220521002115.1624069-1-yian.chen@intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09cb6663618a74fe5572a4931ecbf098832e79ec
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Wed May 4 12:54:20 2022 +0300

    module: fix [e_shstrndx].sh_size=0 OOB access
    
    [ Upstream commit 391e982bfa632b8315235d8be9c0a81374c6a19c ]
    
    It is trivial to craft a module to trigger OOB access in this line:
    
            if (info->secstrings[strhdr->sh_size - 1] != '\0') {
    
    BUG: unable to handle page fault for address: ffffc90000aa0fff
    PGD 100000067 P4D 100000067 PUD 100066067 PMD 10436f067 PTE 0
    Oops: 0000 [#1] PREEMPT SMP PTI
    CPU: 7 PID: 1215 Comm: insmod Not tainted 5.18.0-rc5-00007-g9bf578647087-dirty #10
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-4.fc34 04/01/2014
    RIP: 0010:load_module+0x19b/0x2391
    
    Fixes: ec2a29593c83 ("module: harden ELF info handling")
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    [rebased patch onto modules-next]
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9f331bb5d433c9be52c4e3d9d4e2e41ef4d8493
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Fri Oct 15 14:57:40 2021 -0600

    module: change to print useful messages from elf_validity_check()
    
    [ Upstream commit 7fd982f394c42f25a73fe9dfbf1e6b11fa26b40a ]
    
    elf_validity_check() checks ELF headers for errors and ELF Spec.
    compliance and if any of them fail it returns -ENOEXEC from all of
    these error paths. Almost all of them don't print any messages.
    
    When elf_validity_check() returns an error, load_module() prints an
    error message without error code. It is hard to determine why the
    module ELF structure is invalid, even if load_module() prints the
    error code which is -ENOEXEC in all of these cases.
    
    Change to print useful error messages from elf_validity_check() to
    clearly say what went wrong and why the ELF validity checks failed.
    
    Remove the load_module() error message which is no longer needed.
    This patch includes changes to fix build warns on 32-bit platforms:
    
    warning: format '%llu' expects argument of type 'long long unsigned int',
    but argument 3 has type 'Elf32_Off' {aka 'unsigned int'}
    Reported-by: kernel test robot <lkp@intel.com>
    
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82b50219c85de217caccb51b4e1d032030d735ad
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Tue Apr 19 00:18:57 2022 +0100

    dt-bindings: soc: qcom: smd-rpm: Fix missing MSM8936 compatible
    
    [ Upstream commit e930244918092d44b60a7b538cf60d737010ceef ]
    
    Add compatible msm8936. msm8936 covers both msm8936 and msm8939.
    The relevant driver already has the compat string but, we haven't
    documented it.
    
    Fixes: d6e52482f5ab ("drivers: soc: Add MSM8936 SMD RPM compatible")
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20220418231857.3061053-1-bryan.odonoghue@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93dfb9c6deebd4343d4396d24335f8a712d84327
Author: Vladimir Lypak <vladimir.lypak@gmail.com>
Date:   Wed Aug 25 22:29:42 2021 +0530

    dt-bindings: soc: qcom: smd-rpm: Add compatible for MSM8953 SoC
    
    [ Upstream commit 96c42812f798c5e48d55cd6fc2101ce99af19608 ]
    
    Document compatible for MSM8953 SoC.
    
    Signed-off-by: Vladimir Lypak <vladimir.lypak@gmail.com>
    Signed-off-by: Adam Skladowski <a_skl39@protonmail.com>
    Signed-off-by: Sireesh Kodali <sireeshkodali1@gmail.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20210825165943.19415-1-sireeshkodali1@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8371666ef44cb5a343307cc741f4b86d5be6dad7
Author: David Howells <dhowells@redhat.com>
Date:   Sat May 21 08:45:28 2022 +0100

    rxrpc: Fix locking issue
    
    [ Upstream commit ad25f5cb39872ca14bcbe00816ae65c22fe04b89 ]
    
    There's a locking issue with the per-netns list of calls in rxrpc.  The
    pieces of code that add and remove a call from the list use write_lock()
    and the calls procfile uses read_lock() to access it.  However, the timer
    callback function may trigger a removal by trying to queue a call for
    processing and finding that it's already queued - at which point it has a
    spare refcount that it has to do something with.  Unfortunately, if it puts
    the call and this reduces the refcount to 0, the call will be removed from
    the list.  Unfortunately, since the _bh variants of the locking functions
    aren't used, this can deadlock.
    
    ================================
    WARNING: inconsistent lock state
    5.18.0-rc3-build4+ #10 Not tainted
    --------------------------------
    inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    ksoftirqd/2/25 [HC0[0]:SC1[1]:HE1:SE0] takes:
    ffff888107ac4038 (&rxnet->call_lock){+.?.}-{2:2}, at: rxrpc_put_call+0x103/0x14b
    {SOFTIRQ-ON-W} state was registered at:
    ...
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&rxnet->call_lock);
      <Interrupt>
        lock(&rxnet->call_lock);
    
     *** DEADLOCK ***
    
    1 lock held by ksoftirqd/2/25:
     #0: ffff8881008ffdb0 ((&call->timer)){+.-.}-{0:0}, at: call_timer_fn+0x5/0x23d
    
    Changes
    =======
    ver #2)
     - Changed to using list_next_rcu() rather than rcu_dereference() directly.
    
    Fixes: 17926a79320a ("[AF_RXRPC]: Provide secure RxRPC sockets for use by userspace and kernel both")
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d74b09b933b99259c77906d9f10154df5bc4750a
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri May 13 14:30:37 2022 +0100

    irqchip/gic-v3: Refactor ISB + EOIR at ack time
    
    commit 6efb50923771f392122f5ce69dfc43b08f16e449 upstream.
    
    There are cases where a context synchronization event is necessary
    between an IRQ being raised and being handled, and there are races such
    that we cannot rely upon the exception entry being subsequent to the
    interrupt being raised. To fix this, we place an ISB between a read of
    IAR and the subsequent invocation of an IRQ handler.
    
    When EOI mode 1 is in use, we need to EOI an interrupt prior to invoking
    its handler, and we have a write to EOIR for this. As this write to EOIR
    requires an ISB, and this is provided by the gic_write_eoir() helper, we
    omit the usual ISB in this case, with the logic being:
    
    |       if (static_branch_likely(&supports_deactivate_key))
    |               gic_write_eoir(irqnr);
    |       else
    |               isb();
    
    This is somewhat opaque, and it would be a little clearer if there were
    an unconditional ISB, with only the write to EOIR being conditional,
    e.g.
    
    |       if (static_branch_likely(&supports_deactivate_key))
    |               write_gicreg(irqnr, ICC_EOIR1_EL1);
    |
    |       isb();
    
    This patch rewrites the code that way, with this logic factored into a
    new helper function with comments explaining what the ISB is for, as
    were originally laid out in commit:
    
      39a06b67c2c1256b ("irqchip/gic: Ensure we have an ISB between ack and ->handle_irq")
    
    Note that since then, we removed the IAR polling in commit:
    
      342677d70ab92142 ("irqchip/gic-v3: Remove acknowledge loop")
    
    ... which removed one of the two race conditions.
    
    For consistency, other portions of the driver are made to manipulate
    EOIR using write_gicreg() and explcit ISBs, and the gic_write_eoir()
    helper function is removed.
    
    There should be no functional change as a result of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20220513133038.226182-3-mark.rutland@arm.com
    Cc: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b82dfacba5762da1c697a180d579624fc85a5e15
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri May 13 14:30:36 2022 +0100

    irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling
    
    [ Upstream commit adf14453d2c037ab529040c1186ea32e277e783a ]
    
    There are cases where a context synchronization event is necessary
    between an IRQ being raised and being handled, and there are races such
    that we cannot rely upon the exception entry being subsequent to the
    interrupt being raised.
    
    We identified and fixes this for regular IRQs in commit:
    
      39a06b67c2c1256b ("irqchip/gic: Ensure we have an ISB between ack and ->handle_irq")
    
    Unfortunately, we forgot to do the same for psuedo-NMIs when support for
    those was added in commit:
    
      f32c926651dcd168 ("irqchip/gic-v3: Handle pseudo-NMIs")
    
    Which means that when pseudo-NMIs are used for PMU support, we'll hit
    the same problem.
    
    Apply the same fix as for regular IRQs. Note that when EOI mode 1 is in
    use, the call to gic_write_eoir() will provide an ISB.
    
    Fixes: f32c926651dcd168 ("irqchip/gic-v3: Handle pseudo-NMIs")
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20220513133038.226182-2-mark.rutland@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51ebf1b6a077fb2c54eae28ff765c299833193ee
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Fri May 13 11:24:56 2022 +0100

    io_uring: avoid io-wq -EAGAIN looping for !IOPOLL
    
    [ Upstream commit e0deb6a025ae8c850dc8685be39fb27b06c88736 ]
    
    If an opcode handler semi-reliably returns -EAGAIN, io_wq_submit_work()
    might continue busily hammer the same handler over and over again, which
    is not ideal. The -EAGAIN handling in question was put there only for
    IOPOLL, so restrict it to IOPOLL mode only where there is no other
    recourse than to retry as we cannot wait.
    
    Fixes: def596e9557c9 ("io_uring: support for IO polling")
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/f168b4f24181942f3614dd8ff648221736f572e6.1652433740.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3cec8a42fcd11d05313c724f27e01b1db77522c
Author: Sean Wang <sean.wang@mediatek.com>
Date:   Thu May 12 06:22:15 2022 +0800

    Bluetooth: btmtksdio: fix use-after-free at btmtksdio_recv_event
    
    [ Upstream commit 0fab6361c4ba17d1b43a991bef4238a3c1754d35 ]
    
    We should not access skb buffer data anymore after hci_recv_frame was
    called.
    
    [   39.634809] BUG: KASAN: use-after-free in btmtksdio_recv_event+0x1b0
    [   39.634855] Read of size 1 at addr ffffff80cf28a60d by task kworker
    [   39.634962] Call trace:
    [   39.634974]  dump_backtrace+0x0/0x3b8
    [   39.634999]  show_stack+0x20/0x2c
    [   39.635016]  dump_stack_lvl+0x60/0x78
    [   39.635040]  print_address_description+0x70/0x2f0
    [   39.635062]  kasan_report+0x154/0x194
    [   39.635079]  __asan_report_load1_noabort+0x44/0x50
    [   39.635099]  btmtksdio_recv_event+0x1b0/0x1c4
    [   39.635129]  btmtksdio_txrx_work+0x6cc/0xac4
    [   39.635157]  process_one_work+0x560/0xc5c
    [   39.635177]  worker_thread+0x7ec/0xcc0
    [   39.635195]  kthread+0x2d0/0x3d0
    [   39.635215]  ret_from_fork+0x10/0x20
    [   39.635247] Allocated by task 0:
    [   39.635260] (stack is not available)
    [   39.635281] Freed by task 2392:
    [   39.635295]  kasan_save_stack+0x38/0x68
    [   39.635319]  kasan_set_track+0x28/0x3c
    [   39.635338]  kasan_set_free_info+0x28/0x4c
    [   39.635357]  ____kasan_slab_free+0x104/0x150
    [   39.635374]  __kasan_slab_free+0x18/0x28
    [   39.635391]  slab_free_freelist_hook+0x114/0x248
    [   39.635410]  kfree+0xf8/0x2b4
    [   39.635427]  skb_free_head+0x58/0x98
    [   39.635447]  skb_release_data+0x2f4/0x410
    [   39.635464]  skb_release_all+0x50/0x60
    [   39.635481]  kfree_skb+0xc8/0x25c
    [   39.635498]  hci_event_packet+0x894/0xca4 [bluetooth]
    [   39.635721]  hci_rx_work+0x1c8/0x68c [bluetooth]
    [   39.635925]  process_one_work+0x560/0xc5c
    [   39.635951]  worker_thread+0x7ec/0xcc0
    [   39.635970]  kthread+0x2d0/0x3d0
    [   39.635990]  ret_from_fork+0x10/0x20
    [   39.636021] The buggy address belongs to the object at ffffff80cf28a600
                    which belongs to the cache kmalloc-512 of size 512
    [   39.636039] The buggy address is located 13 bytes inside of
                    512-byte region [ffffff80cf28a600, ffffff80cf28a800)
    
    Fixes: 9aebfd4a2200 ("Bluetooth: mediatek: add support for MediaTek MT7663S and MT7668S SDIO devices")
    Co-developed-by: Yake Yang <yake.yang@mediatek.com>
    Signed-off-by: Yake Yang <yake.yang@mediatek.com>
    Signed-off-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5781bb8a31910c2621cddeed739b99bfb0ddf1aa
Author: Niels Dossche <dossche.niels@gmail.com>
Date:   Sat Apr 23 00:31:17 2022 +0200

    Bluetooth: protect le accept and resolv lists with hdev->lock
    
    [ Upstream commit 5e2b6064cbc5fd582396768c5f9583f65085e368 ]
    
    Concurrent operations from events on le_{accept,resolv}_list are
    currently unprotected by hdev->lock.
    Most existing code do already protect the lists with that lock.
    This can be observed in hci_debugfs and hci_sync.
    Add the protection for these events too.
    
    Fixes: b950aa88638c ("Bluetooth: Add definitions and track LE resolve list modification")
    Fixes: 0f36b589e4ee ("Bluetooth: Track LE white list modification via HCI commands")
    Signed-off-by: Niels Dossche <dossche.niels@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a2dbdeccef6de47565638abdf3c25f41cdffc37
Author: Rex-BC Chen <rex-bc.chen@mediatek.com>
Date:   Mon Mar 21 15:23:20 2022 +0800

    drm/mediatek: Add vblank register/unregister callback functions
    
    [ Upstream commit b74d921b900b6ce38c6247c0a1c86be9f3746493 ]
    
    We encountered a kernel panic issue that callback data will be NULL when
    it's using in ovl irq handler. There is a timing issue between
    mtk_disp_ovl_irq_handler() and mtk_ovl_disable_vblank().
    
    To resolve this issue, we use the flow to register/unregister vblank cb:
    - Register callback function and callback data when crtc creates.
    - Unregister callback function and callback data when crtc destroies.
    
    With this solution, we can assure callback data will not be NULL when
    vblank is disable.
    
    Link: https://patchwork.kernel.org/project/linux-mediatek/patch/20220321072320.15019-1-rex-bc.chen@mediatek.com/
    Fixes: 9b0704988b15 ("drm/mediatek: Register vblank callback function")
    Signed-off-by: Rex-BC Chen <rex-bc.chen@mediatek.com>
    Reviewed-by: jason-jh.lin <jason-jh.lin@mediatek.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c4396693698e876e559768d3d3a150c672ec384
Author: Chun-Kuang Hu <chunkuang.hu@kernel.org>
Date:   Thu Oct 28 18:19:10 2021 +0800

    drm/mediatek: Add cmdq_handle in mtk_crtc
    
    [ Upstream commit 7627122fd1c06800a1fe624e9fb3c269796115e8 ]
    
    One mtk_crtc need just one cmdq_handle, so add one cmdq_handle
    in mtk_crtc to prevent frequently allocation and free of
    cmdq_handle.
    
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: jason-jh.lin <jason-jh.lin@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3f15355704510e22fa395b4030bcd50e6b99969
Author: Chun-Kuang Hu <chunkuang.hu@kernel.org>
Date:   Wed Oct 27 10:18:54 2021 +0800

    drm/mediatek: Detect CMDQ execution timeout
    
    [ Upstream commit eaf80126aba6fd1754837eec91e4c8bbd58ae52e ]
    
    CMDQ is used to update display register in vblank period, so
    it should be execute in next 2 vblank. One vblank interrupt
    before send message (occasionally) and one vblank interrupt
    after cmdq done. If it fail to execute in next 3 vblank,
    tiemout happen.
    
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: jason-jh.lin <jason-jh.lin@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f77386ddb1cca97da95fb116c2975cc529936f5
Author: Chun-Kuang Hu <chunkuang.hu@kernel.org>
Date:   Thu Oct 28 18:19:08 2021 +0800

    drm/mediatek: Remove the pointer of struct cmdq_client
    
    [ Upstream commit 563c9d4a5b117552150efbecbaf0877947e98a32 ]
    
    In mailbox rx_callback, it pass struct mbox_client to callback
    function, but it could not map back to mtk_drm_crtc instance
    because struct cmdq_client use a pointer to struct mbox_client:
    
    struct cmdq_client {
            struct mbox_client client;
            struct mbox_chan *chan;
    };
    
    struct mtk_drm_crtc {
            /* client instance data */
            struct cmdq_client *cmdq_client;
    };
    
    so remove the pointer of struct cmdq_client and let mtk_drm_crtc
    instance define cmdq_client as:
    
    struct mtk_drm_crtc {
            /* client instance data */
            struct cmdq_client cmdq_client;
    };
    
    and in rx_callback function, use struct mbox_client to get
    struct mtk_drm_crtc.
    
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: jason-jh.lin <jason-jh.lin@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d953c679022cb2c2cd58ebb5e09a47e4492c3744
Author: Chun-Kuang Hu <chunkuang.hu@kernel.org>
Date:   Thu Oct 28 18:19:07 2021 +0800

    drm/mediatek: Use mailbox rx_callback instead of cmdq_task_cb
    
    [ Upstream commit 1ee07a683b7e4e6ad9ad4f77fce4751741bc8ceb ]
    
    rx_callback is a standard mailbox callback mechanism and could cover the
    function of proprietary cmdq_task_cb, so use the standard one instead of
    the proprietary one.
    
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: jason-jh.lin <jason-jh.lin@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51a405dea0ae54330b6441c5f7c3bb9ceadedce8
Author: Thomas Hellström <thomas.hellstrom@linux.intel.com>
Date:   Thu Jan 27 12:56:22 2022 +0100

    drm/i915: Fix a race between vma / object destruction and unbinding
    
    [ Upstream commit bc1922e5d349db4be14c55513102c024c2ae8a50 ]
    
    The vma destruction code was using an unlocked advisory check for
    drm_mm_node_allocated() to avoid racing with eviction code unbinding
    the vma.
    
    This is very fragile and prohibits the dereference of non-refcounted
    pointers of dying vmas after a call to __i915_vma_unbind(). It also
    prohibits the dereference of vma->obj of refcounted pointers of
    dying vmas after a call to __i915_vma_unbind(), since even if a
    refcount is held on the vma, that won't guarantee that its backing
    object doesn't get destroyed.
    
    So introduce an unbind under the vm mutex at object destroy time,
    removing all weak references of the vma and its object from the
    object vma list and from the vm bound list.
    
    Signed-off-by: Thomas Hellström <thomas.hellstrom@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220127115622.302970-1-thomas.hellstrom@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a9e13b86536ce6dca54380f19d537b1c80caee3
Author: Richard Gong <richard.gong@amd.com>
Date:   Fri Apr 8 12:08:38 2022 -0500

    drm/amdgpu: vi: disable ASPM on Intel Alder Lake based systems
    
    [ Upstream commit aa482ddca85a3485be0e7b83a0789dc4d987670b ]
    
    Active State Power Management (ASPM) feature is enabled since kernel 5.14.
    There are some AMD Volcanic Islands (VI) GFX cards, such as the WX3200 and
    RX640, that do not work with ASPM-enabled Intel Alder Lake based systems.
    Using these GFX cards as video/display output, Intel Alder Lake based
    systems will freeze after suspend/resume.
    
    The issue was originally reported on one system (Dell Precision 3660 with
    BIOS version 0.14.81), but was later confirmed to affect at least 4
    pre-production Alder Lake based systems.
    
    Add an extra check to disable ASPM on Intel Alder Lake based systems with
    the problematic AMD Volcanic Islands GFX cards.
    
    Fixes: 0064b0ce85bb ("drm/amd/pm: enable ASPM by default")
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/1885
    Signed-off-by: Richard Gong <richard.gong@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a9a60dcedaacde4b903337b7445cb431b4dd119
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Feb 16 23:19:58 2022 -0600

    drm/amd: Refactor `amdgpu_aspm` to be evaluated per device
    
    [ Upstream commit 0ab5d711ec74d9e60673900974806b7688857947 ]
    
    Evaluating `pcie_aspm_enabled` as part of driver probe has the implication
    that if one PCIe bridge with an AMD GPU connected doesn't support ASPM
    then none of them do.  This is an invalid assumption as the PCIe core will
    configure ASPM for individual PCIe bridges.
    
    Create a new helper function that can be called by individual dGPUs to
    react to the `amdgpu_aspm` module parameter without having negative results
    for other dGPUs on the PCIe bus.
    
    Suggested-by: Lijo Lazar <lijo.lazar@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00fa5cbbb6a7a7035e7694a1b516904a3f51c2d4
Author: Daniel Starke <daniel.starke@siemens.com>
Date:   Wed May 4 10:17:33 2022 +0200

    tty: n_gsm: fix invalid gsmtty_write_room() result
    
    [ Upstream commit 9361ebfbb79fd1bc8594a487c01ad52cdaa391ea ]
    
    gsmtty_write() does not prevent the user to use the full fifo size of 4096
    bytes as allocated in gsm_dlci_alloc(). However, gsmtty_write_room() tries
    to limit the return value by 'TX_SIZE' and returns a negative value if the
    fifo has more than 'TX_SIZE' bytes stored. This is obviously wrong as
    'TX_SIZE' is defined as 512.
    Define 'TX_SIZE' to the fifo size and use it accordingly for allocation to
    keep the current behavior. Return the correct remaining size of the fifo in
    gsmtty_write_room() via kfifo_avail().
    
    Fixes: e1eaea46bb40 ("tty: n_gsm line discipline")
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20220504081733.3494-3-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 156f2c2378e1cd6760c0486f3e883afe8675d5e2
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Wed Apr 27 15:23:27 2022 +0200

    serial: 8250_mtk: Make sure to select the right FEATURE_SEL
    
    [ Upstream commit 6f81fdded0d024c7d4084d434764f30bca1cd6b1 ]
    
    Set the FEATURE_SEL at probe time to make sure that BIT(0) is enabled:
    this guarantees that when the port is configured as AP UART, the
    right register layout is interpreted by the UART IP.
    
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220427132328.228297-3-angelogioacchino.delregno@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e58094e2b51699fe1046104f4d2425afc7b31053
Author: Daniel Starke <daniel.starke@siemens.com>
Date:   Mon Apr 25 03:47:26 2022 -0700

    tty: n_gsm: fix sometimes uninitialized warning in gsm_dlci_modem_output()
    
    [ Upstream commit 19317433057dc1f2ca9a975e4e6b547282c2a5ef ]
    
    'size' may be used uninitialized in gsm_dlci_modem_output() if called with
    an adaption that is neither 1 nor 2. The function is currently only called
    by gsm_modem_upd_via_data() and only for adaption 2.
    Properly handle every invalid case by returning -EINVAL to silence the
    compiler warning and avoid future regressions.
    
    Fixes: c19ffe00fed6 ("tty: n_gsm: fix invalid use of MSC in advanced option")
    Cc: stable@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20220425104726.7986-1-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b952aa508786ab4b7328972482f40905af856246
Author: Daniel Starke <daniel.starke@siemens.com>
Date:   Fri Apr 22 00:10:24 2022 -0700

    tty: n_gsm: fix invalid use of MSC in advanced option
    
    [ Upstream commit c19ffe00fed6bb423d81406d2a7e5793074c7d83 ]
    
    n_gsm is based on the 3GPP 07.010 and its newer version is the 3GPP 27.010.
    See https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=1516
    The changes from 07.010 to 27.010 are non-functional. Therefore, I refer to
    the newer 27.010 here. Chapter 5.4.6.3.7 states that the Modem Status
    Command (MSC) shall only be used if the basic option was chosen.
    The current implementation uses MSC frames even if advanced option was
    chosen to inform the peer about modem line state updates. A standard
    conform peer may choose to discard these frames in advanced option mode.
    Furthermore, gsmtty_modem_update() is not part of the 'tty_operations'
    functions despite its name.
    Rename gsmtty_modem_update() to gsm_modem_update() to clarify this. Split
    its function into gsm_modem_upd_via_data() and gsm_modem_upd_via_msc()
    depending on the encoding and adaption. Introduce gsm_dlci_modem_output()
    as adaption of gsm_dlci_data_output() to encode and queue empty frames in
    advanced option mode. Use it in gsm_modem_upd_via_data().
    gsm_modem_upd_via_msc() is based on the initial gsmtty_modem_update()
    function which used only MSC frames to update modem states.
    
    Fixes: e1eaea46bb40 ("tty: n_gsm line discipline")
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20220422071025.5490-2-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62d1655b922958826b7ec22682c3141746f75064
Author: Naoya Horiguchi <naoya.horiguchi@nec.com>
Date:   Thu Apr 21 16:35:33 2022 -0700

    mm/hwpoison: fix race between hugetlb free/demotion and memory_failure_hugetlb()
    
    [ Upstream commit 405ce051236cc65b30bbfe490b28ce60ae6aed85 ]
    
    There is a race condition between memory_failure_hugetlb() and hugetlb
    free/demotion, which causes setting PageHWPoison flag on the wrong page.
    The one simple result is that wrong processes can be killed, but another
    (more serious) one is that the actual error is left unhandled, so no one
    prevents later access to it, and that might lead to more serious results
    like consuming corrupted data.
    
    Think about the below race window:
    
      CPU 1                                   CPU 2
      memory_failure_hugetlb
      struct page *head = compound_head(p);
                                              hugetlb page might be freed to
                                              buddy, or even changed to another
                                              compound page.
    
      get_hwpoison_page -- page is not what we want now...
    
    The current code first does prechecks roughly and then reconfirms after
    taking refcount, but it's found that it makes code overly complicated,
    so move the prechecks in a single hugetlb_lock range.
    
    A newly introduced function, try_memory_failure_hugetlb(), always takes
    hugetlb_lock (even for non-hugetlb pages).  That can be improved, but
    memory_failure() is rare in principle, so should not be a big problem.
    
    Link: https://lkml.kernel.org/r/20220408135323.1559401-2-naoya.horiguchi@linux.dev
    Fixes: 761ad8d7c7b5 ("mm: hwpoison: introduce memory_failure_hugetlb()")
    Signed-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Reported-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5429eb5502fc7e64abdb3a4f6b9f698a8337da5d
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Mar 22 14:44:44 2022 -0700

    mm/memory-failure.c: fix race with changing page compound again
    
    [ Upstream commit 888af2701db79b9b27c7e37f9ede528a5ca53b76 ]
    
    Patch series "A few fixup patches for memory failure", v2.
    
    This series contains a few patches to fix the race with changing page
    compound page, make non-LRU movable pages unhandlable and so on.  More
    details can be found in the respective changelogs.
    
    There is a race window where we got the compound_head, the hugetlb page
    could be freed to buddy, or even changed to another compound page just
    before we try to get hwpoison page.  Think about the below race window:
    
      CPU 1                                   CPU 2
      memory_failure_hugetlb
      struct page *head = compound_head(p);
                                              hugetlb page might be freed to
                                              buddy, or even changed to another
                                              compound page.
    
      get_hwpoison_page -- page is not what we want now...
    
    If this race happens, just bail out.  Also MF_MSG_DIFFERENT_PAGE_SIZE is
    introduced to record this event.
    
    [akpm@linux-foundation.org: s@/**@/*@, per Naoya Horiguchi]
    
    Link: https://lkml.kernel.org/r/20220312074613.4798-1-linmiaohe@huawei.com
    Link: https://lkml.kernel.org/r/20220312074613.4798-2-linmiaohe@huawei.com
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Acked-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a07875fabccc17c4564151c19de2174948d0544
Author: luofei <luofei@unicloud.com>
Date:   Tue Mar 22 14:44:38 2022 -0700

    mm/hwpoison: avoid the impact of hwpoison_filter() return value on mce handler
    
    [ Upstream commit d1fe111fb62a1cf0446a2919f5effbb33ad0702c ]
    
    When the hwpoison page meets the filter conditions, it should not be
    regarded as successful memory_failure() processing for mce handler, but
    should return a distinct value, otherwise mce handler regards the error
    page has been identified and isolated, which may lead to calling
    set_mce_nospec() to change page attribute, etc.
    
    Here memory_failure() return -EOPNOTSUPP to indicate that the error
    event is filtered, mce handler should not take any action for this
    situation and hwpoison injector should treat as correct.
    
    Link: https://lkml.kernel.org/r/20220223082135.2769649-1-luofei@unicloud.com
    Signed-off-by: luofei <luofei@unicloud.com>
    Acked-by: Borislav Petkov <bp@suse.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d04b62b64056ce2b5be69bb53d7e0084782fc562
Author: Naoya Horiguchi <naoya.horiguchi@nec.com>
Date:   Fri Jan 14 14:09:02 2022 -0800

    mm/hwpoison: mf_mutex for soft offline and unpoison
    
    [ Upstream commit 91d005479e06392617bacc114509d611b705eaac ]
    
    Patch series "mm/hwpoison: fix unpoison_memory()", v4.
    
    The main purpose of this series is to sync unpoison code to recent
    changes around how hwpoison code takes page refcount.  Unpoison should
    work or simply fail (without crash) if impossible.
    
    The recent works of keeping hwpoison pages in shmem pagecache introduce
    a new state of hwpoisoned pages, but unpoison for such pages is not
    supported yet with this series.
    
    It seems that soft-offline and unpoison can be used as general purpose
    page offline/online mechanism (not in the context of memory error).  I
    think that we need some additional works to realize it because currently
    soft-offline and unpoison are assumed not to happen so frequently (print
    out too many messages for aggressive usecases).  But anyway this could
    be another interesting next topic.
    
    v1: https://lore.kernel.org/linux-mm/20210614021212.223326-1-nao.horiguchi@gmail.com/
    v2: https://lore.kernel.org/linux-mm/20211025230503.2650970-1-naoya.horiguchi@linux.dev/
    v3: https://lore.kernel.org/linux-mm/20211105055058.3152564-1-naoya.horiguchi@linux.dev/
    
    This patch (of 3):
    
    Originally mf_mutex is introduced to serialize multiple MCE events, but
    it is not that useful to allow unpoison to run in parallel with
    memory_failure() and soft offline.  So apply mf_mutex to soft offline
    and unpoison.  The memory failure handler and soft offline handler get
    simpler with this.
    
    Link: https://lkml.kernel.org/r/20211115084006.3728254-1-naoya.horiguchi@linux.dev
    Link: https://lkml.kernel.org/r/20211115084006.3728254-2-naoya.horiguchi@linux.dev
    Signed-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Ding Hui <dinghui@sangfor.com.cn>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0f4fd486896491637ff84e1591fb76ee6fee3ed
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Apr 15 00:46:22 2022 +0000

    KVM: Initialize debugfs_dentry when a VM is created to avoid NULL deref
    
    [ Upstream commit 5c697c367a66307a5d943c3449421aff2aa3ca4a ]
    
    Initialize debugfs_entry to its semi-magical -ENOENT value when the VM
    is created.  KVM's teardown when VM creation fails is kludgy and calls
    kvm_uevent_notify_change() and kvm_destroy_vm_debugfs() even if KVM never
    attempted kvm_create_vm_debugfs().  Because debugfs_entry is zero
    initialized, the IS_ERR() checks pass and KVM derefs a NULL pointer.
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 1068b1067 P4D 1068b1067 PUD 1068b0067 PMD 0
      Oops: 0000 [#1] SMP
      CPU: 0 PID: 871 Comm: repro Not tainted 5.18.0-rc1+ #825
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      RIP: 0010:__dentry_path+0x7b/0x130
      Call Trace:
       <TASK>
       dentry_path_raw+0x42/0x70
       kvm_uevent_notify_change.part.0+0x10c/0x200 [kvm]
       kvm_put_kvm+0x63/0x2b0 [kvm]
       kvm_dev_ioctl+0x43a/0x920 [kvm]
       __x64_sys_ioctl+0x83/0xb0
       do_syscall_64+0x31/0x50
       entry_SYSCALL_64_after_hwframe+0x44/0xae
       </TASK>
      Modules linked in: kvm_intel kvm irqbypass
    
    Fixes: a44a4cc1c969 ("KVM: Don't create VM debugfs files outside of the VM directory")
    Cc: stable@vger.kernel.org
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Oliver Upton <oupton@google.com>
    Reported-by: syzbot+df6fbbd2ee39f21289ef@syzkaller.appspotmail.com
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Oliver Upton <oupton@google.com>
    Message-Id: <20220415004622.2207751-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70e2e87ea878bda72c361131c0853fbd39162f09
Author: Naohiro Aota <naohiro.aota@wdc.com>
Date:   Mon Apr 18 16:15:03 2022 +0900

    btrfs: zoned: use dedicated lock for data relocation
    
    [ Upstream commit 5f0addf7b89085f8e0a2593faa419d6111612b9b ]
    
    Currently, we use btrfs_inode_{lock,unlock}() to grant an exclusive
    writeback of the relocation data inode in
    btrfs_zoned_data_reloc_{lock,unlock}(). However, that can cause a deadlock
    in the following path.
    
    Thread A takes btrfs_inode_lock() and waits for metadata reservation by
    e.g, waiting for writeback:
    
    prealloc_file_extent_cluster()
      - btrfs_inode_lock(&inode->vfs_inode, 0);
      - btrfs_prealloc_file_range()
      ...
        - btrfs_replace_file_extents()
          - btrfs_start_transaction
          ...
            - btrfs_reserve_metadata_bytes()
    
    Thread B (e.g, doing a writeback work) needs to wait for the inode lock to
    continue writeback process:
    
    do_writepages
      - btrfs_writepages
        - extent_writpages
          - btrfs_zoned_data_reloc_lock(BTRFS_I(inode));
            - btrfs_inode_lock()
    
    The deadlock is caused by relying on the vfs_inode's lock. By using it, we
    introduced unnecessary exclusion of writeback and
    btrfs_prealloc_file_range(). Also, the lock at this point is useless as we
    don't have any dirty pages in the inode yet.
    
    Introduce fs_info->zoned_data_reloc_io_lock and use it for the exclusive
    writeback.
    
    Fixes: 35156d852762 ("btrfs: zoned: only allow one process to add pages to a relocation inode")
    CC: stable@vger.kernel.org # 5.16.x: 869f4cdc73f9: btrfs: zoned: encapsulate inode locking for zoned relocation
    CC: stable@vger.kernel.org # 5.16.x
    CC: stable@vger.kernel.org # 5.17
    Cc: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1519e6e28478ce7b7a31dde9ae1b0faed8854dc2
Author: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Date:   Tue Dec 7 06:28:34 2021 -0800

    btrfs: zoned: encapsulate inode locking for zoned relocation
    
    [ Upstream commit 869f4cdc73f9378986755030c684c011f0b71517 ]
    
    Encapsulate the inode lock needed for serializing the data relocation
    writes on a zoned filesystem into a helper.
    
    This streamlines the code reading flow and hides special casing for
    zoned filesystems.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 920e849b7d23ced84c9d11e11e2449e34973cfb8
Author: Daniel Starke <daniel.starke@siemens.com>
Date:   Wed Apr 20 03:13:44 2022 -0700

    tty: n_gsm: fix missing update of modem controls after DLCI open
    
    [ Upstream commit 48473802506d2d6151f59e0e764932b33b53cb3b ]
    
    Currently the peer is not informed about the initial state of the modem
    control lines after a new DLCI has been opened.
    Fix this by sending the initial modem control line states after DLCI open.
    
    Fixes: e1eaea46bb40 ("tty: n_gsm line discipline")
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20220420101346.3315-1-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4db0a8dd906761bf7f14b40a267490c476651f69
Author: Maurizio Avogadro <mavoga@gmail.com>
Date:   Mon Apr 18 15:16:12 2022 +0200

    ALSA: usb-audio: add mapping for MSI MAG X570S Torpedo MAX.
    
    [ Upstream commit 4ddef9c4d70aae0c9029bdec7c3f7f1c1c51ff8c ]
    
    The USB audio device 0db0:a073 based on the Realtek ALC4080 chipset
    exposes all playback volume controls as "PCM". This makes
    distinguishing the individual functions hard.
    The mapping already adopted for device 0db0:419c based on the same
    chipset fixes the issue, apply it for this device too.
    
    Signed-off-by: Maurizio Avogadro <mavoga@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Yl1ykPaGgsFf3SnW@ryzen
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7fe6934ce7c5d311f6da15fba18bd2a432fe655
Author: Johannes Schickel <lordhoto@gmail.com>
Date:   Sat Jan 15 15:02:57 2022 +0100

    ALSA: usb-audio: add mapping for MSI MPG X570S Carbon Max Wifi.
    
    [ Upstream commit 5762f980ca10dcfe5eead7c40d1c34cae61f409b ]
    
    The USB audio device 0db0:419c based on the Realtek ALC4080 chip exposes
    all playback volume controls as "PCM". This is makes distinguishing the
    individual functions hard.
    
    The added mapping distinguishes all playback volume controls as their
    respective function:
     - Speaker              - for back panel output
     - Frontpanel Headphone - for front panel output
     - IEC958               - for digital output on the back panel
    
    This clarifies the individual volume control functions for users.
    
    Signed-off-by: Johannes Schickel <lordhoto@gmail.com>
    Link: https://lore.kernel.org/r/20220115140257.8751-1-lordhoto@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6dcf1e5581b4014db03d7fd2508798964e88f663
Author: Daniel Starke <daniel.starke@siemens.com>
Date:   Thu Apr 14 02:42:11 2022 -0700

    tty: n_gsm: fix frame reception handling
    
    [ Upstream commit 7a0e4b1733b635026a87c023f6d703faf0095e39 ]
    
    The frame checksum (FCS) is currently handled in gsm_queue() after
    reception of a frame. However, this breaks layering. A workaround with
    'received_fcs' was implemented so far.
    Furthermore, frames are handled as such even if no end flag was received.
    Move FCS calculation from gsm_queue() to gsm0_receive() and gsm1_receive().
    Also delay gsm_queue() call there until a full frame was received to fix
    both points.
    
    Fixes: e1eaea46bb40 ("tty: n_gsm line discipline")
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20220414094225.4527-6-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 375dfcfca4a1bcd190a90c9cb0770f7b025f1001
Author: Zhenguo Zhao <Zhenguo.Zhao1@unisoc.com>
Date:   Fri Aug 20 20:17:52 2021 +0800

    tty: n_gsm: Save dlci address open status when config requester
    
    [ Upstream commit 0b91b5332368f2fb0c3e5cfebc6aff9e167acd8b ]
    
    When n_gsm config "initiator=0",as requester ,receive SABM frame,n_gsm
    register gsmtty dev,and save dlci open address status,if receive DLC0
    DISC or CLD frame,it can unregister the gsmtty dev by saving dlci address.
    
    Signed-off-by: Zhenguo Zhao <Zhenguo.Zhao1@unisoc.com>
    Link: https://lore.kernel.org/r/1629461872-26965-8-git-send-email-zhenguo6858@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88a4fb1346b3b11af33762522b954d5af09f3335
Author: Zhenguo Zhao <Zhenguo.Zhao1@unisoc.com>
Date:   Fri Aug 20 20:17:47 2021 +0800

    tty: n_gsm: Modify CR,PF bit when config requester
    
    [ Upstream commit cc0f42122a7e7a5ede9c5f2a41199128b8449eda ]
    
    When n_gsm config "initiator=0",as requester,gsmld receives dlci SABM/DISC
    control command frame,but send UA frame is error.
    
    Example:
    Gsmld receive dlc0 SABM frame "f9 03 3f 01 1c f9",now it sends UA
    frame "f9 01 63 01 a3 f9",CR and PF bit are 0,but it should be set
    1 from requster to initiator.
    
    Kernel test log as follows:
    
    Before modify
    
    [  271.732031] c1 gsmld_receive: 00000000: f9 03 3f 01 1c f9
    [  271.741719] c1 <-- 0) C: SABM(P)
    [  271.749483] c1 gsmld_output: 00000000: f9 01 63 01 a3 f9
    [  271.758337] c1 --> 0) R: UA(F)
    
    After modify
    
    [  261.233188] c0 gsmld_receive: 00000000: f9 03 3f 01 1c f9
    [  261.242767] c0 <-- 0) C: SABM(P)
    [  261.250497] c0 gsmld_output: 00000000: f9 03 73 01 d7 f9
    [  261.259759] c0 --> 0) C: UA(P)
    
    Signed-off-by: Zhenguo Zhao <Zhenguo.Zhao1@unisoc.com>
    Link: https://lore.kernel.org/r/1629461872-26965-3-git-send-email-zhenguo6858@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e73c0eaf7f3538a23c49d377a4d56758ab269834
Author: Oliver Upton <oupton@google.com>
Date:   Wed Apr 6 23:56:13 2022 +0000

    KVM: Don't create VM debugfs files outside of the VM directory
    
    [ Upstream commit a44a4cc1c969afec97dbb2aedaf6f38eaa6253bb ]
    
    Unfortunately, there is no guarantee that KVM was able to instantiate a
    debugfs directory for a particular VM. To that end, KVM shouldn't even
    attempt to create new debugfs files in this case. If the specified
    parent dentry is NULL, debugfs_create_file() will instantiate files at
    the root of debugfs.
    
    For arm64, it is possible to create the vgic-state file outside of a
    VM directory, the file is not cleaned up when a VM is destroyed.
    Nonetheless, the corresponding struct kvm is freed when the VM is
    destroyed.
    
    Nip the problem in the bud for all possible errant debugfs file
    creations by initializing kvm->debugfs_dentry to -ENOENT. In so doing,
    debugfs_create_file() will fail instead of creating the file in the root
    directory.
    
    Cc: stable@kernel.org
    Fixes: 929f45e32499 ("kvm: no need to check return value of debugfs_create functions")
    Signed-off-by: Oliver Upton <oupton@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20220406235615.1447180-2-oupton@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3647c369c178c1cdea7f6a60dc32d6118afac40
Author: tiancyin <tianci.yin@amd.com>
Date:   Sun Mar 27 19:07:13 2022 +0800

    drm/amd/vcn: fix an error msg on vcn 3.0
    
    [ Upstream commit 425d7a87e54ee358f580eaf10cf28dc95f7121c1 ]
    
    Some video card has more than one vcn instance, passing 0 to
    vcn_v3_0_pause_dpg_mode is incorrect.
    
    Error msg:
    Register(1) [mmUVD_POWER_STATUS] failed to reach value
    0x00000001 != 0x00000002
    
    Reviewed-by: James Zhu <James.Zhu@amd.com>
    Signed-off-by: tiancyin <tianci.yin@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a976456c797cf3474d5f8853b1d38ffe3b76f1b2
Author: Xiaomeng Tong <xiam0nd.tong@gmail.com>
Date:   Sun Mar 27 16:10:02 2022 +0800

    ASoC: rt5682: fix an incorrect NULL check on list iterator
    
    [ Upstream commit c8618d65007ba68d7891130642d73e89372101e8 ]
    
    The bug is here:
            if (!dai) {
    
    The list iterator value 'dai' will *always* be set and non-NULL
    by for_each_component_dais(), so it is incorrect to assume that
    the iterator value will be NULL if the list is empty or no element
    is found (In fact, it will be a bogus pointer to an invalid struct
    object containing the HEAD). Otherwise it will bypass the check
    'if (!dai) {' (never call dev_err() and never return -ENODEV;)
    and lead to invalid memory access lately when calling
    'rt5682_set_bclk1_ratio(dai, factor);'.
    
    To fix the bug, just return rt5682_set_bclk1_ratio(dai, factor);
    when found the 'dai', otherwise dev_err() and return -ENODEV;
    
    Cc: stable@vger.kernel.org
    Fixes: ebbfabc16d23d ("ASoC: rt5682: Add CCF usage for providing I2S clks")
    Signed-off-by: Xiaomeng Tong <xiam0nd.tong@gmail.com>
    Link: https://lore.kernel.org/r/20220327081002.12684-1-xiam0nd.tong@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0058893a4a9deffcea9965296da77406bad2a24
Author: Jack Yu <jack.yu@realtek.com>
Date:   Wed Sep 29 13:43:44 2021 +0800

    ASoC: rt5682: move clk related code to rt5682_i2c_probe
    
    [ Upstream commit 57589f82762e40bdaa975d840fa2bc5157b5be95 ]
    
    The DAI clock is only used in I2S mode, to make it clear
    and to fix clock resource release issue, we move CCF clock
    related code to rt5682_i2c_probe to fix clock
    register/unregister issue.
    
    Signed-off-by: Jack Yu <jack.yu@realtek.com>
    Link: https://lore.kernel.org/r/20210929054344.12112-1-jack.yu@realtek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 121af0231f82c3cd79308da28c151f7db59945da
Author: Tadeusz Struk <tadeusz.struk@linaro.org>
Date:   Tue Mar 29 10:12:52 2022 -0700

    uapi/linux/stddef.h: Add include guards
    
    [ Upstream commit 55037ed7bdc62151a726f5685f88afa6a82959b1 ]
    
    Add include guard wrapper define to uapi/linux/stddef.h to prevent macro
    redefinition errors when stddef.h is included more than once. This was not
    needed before since the only contents already used a redefinition test.
    
    Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
    Link: https://lore.kernel.org/r/20220329171252.57279-1-tadeusz.struk@linaro.org
    Fixes: 50d7bd38c3aa ("stddef: Introduce struct_group() helper macro")
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d9bd723e7b41121e27c3faec0144b75434eec9b
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Aug 9 11:21:23 2021 -0700

    stddef: Introduce DECLARE_FLEX_ARRAY() helper
    
    [ Upstream commit 3080ea5553cc909b000d1f1d964a9041962f2c5b ]
    
    There are many places where kernel code wants to have several different
    typed trailing flexible arrays. This would normally be done with multiple
    flexible arrays in a union, but since GCC and Clang don't (on the surface)
    allow this, there have been many open-coded workarounds, usually involving
    neighboring 0-element arrays at the end of a structure. For example,
    instead of something like this:
    
    struct thing {
            ...
            union {
                    struct type1 foo[];
                    struct type2 bar[];
            };
    };
    
    code works around the compiler with:
    
    struct thing {
            ...
            struct type1 foo[0];
            struct type2 bar[];
    };
    
    Another case is when a flexible array is wanted as the single member
    within a struct (which itself is usually in a union). For example, this
    would be worked around as:
    
    union many {
            ...
            struct {
                    struct type3 baz[0];
            };
    };
    
    These kinds of work-arounds cause problems with size checks against such
    zero-element arrays (for example when building with -Warray-bounds and
    -Wzero-length-bounds, and with the coming FORTIFY_SOURCE improvements),
    so they must all be converted to "real" flexible arrays, avoiding warnings
    like this:
    
    fs/hpfs/anode.c: In function 'hpfs_add_sector_to_btree':
    fs/hpfs/anode.c:209:27: warning: array subscript 0 is outside the bounds of an interior zero-length array 'struct bplus_internal_node[0]' [-Wzero-length-bounds]
      209 |    anode->btree.u.internal[0].down = cpu_to_le32(a);
          |    ~~~~~~~~~~~~~~~~~~~~~~~^~~
    In file included from fs/hpfs/hpfs_fn.h:26,
                     from fs/hpfs/anode.c:10:
    fs/hpfs/hpfs.h:412:32: note: while referencing 'internal'
      412 |     struct bplus_internal_node internal[0]; /* (internal) 2-word entries giving
          |                                ^~~~~~~~
    
    drivers/net/can/usb/etas_es58x/es58x_fd.c: In function 'es58x_fd_tx_can_msg':
    drivers/net/can/usb/etas_es58x/es58x_fd.c:360:35: warning: array subscript 65535 is outside the bounds of an interior zero-length array 'u8[0]' {aka 'unsigned char[]'} [-Wzero-length-bounds]
      360 |  tx_can_msg = (typeof(tx_can_msg))&es58x_fd_urb_cmd->raw_msg[msg_len];
          |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    In file included from drivers/net/can/usb/etas_es58x/es58x_core.h:22,
                     from drivers/net/can/usb/etas_es58x/es58x_fd.c:17:
    drivers/net/can/usb/etas_es58x/es58x_fd.h:231:6: note: while referencing 'raw_msg'
      231 |   u8 raw_msg[0];
          |      ^~~~~~~
    
    However, it _is_ entirely possible to have one or more flexible arrays
    in a struct or union: it just has to be in another struct. And since it
    cannot be alone in a struct, such a struct must have at least 1 other
    named member -- but that member can be zero sized. Wrap all this nonsense
    into the new DECLARE_FLEX_ARRAY() in support of having flexible arrays
    in unions (or alone in a struct).
    
    As with struct_group(), since this is needed in UAPI headers as well,
    implement the core there, with a non-UAPI wrapper.
    
    Additionally update kernel-doc to understand its existence.
    
    https://github.com/KSPP/linux/issues/137
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: "Gustavo A. R. Silva" <gustavoars@kernel.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2f3dab1ac54c5a6eb7f633e7d9205269306cc21
Author: Paul Davey <paul.davey@alliedtelesis.co.nz>
Date:   Tue Mar 1 21:33:00 2022 +0530

    bus: mhi: Fix pm_state conversion to string
    
    [ Upstream commit 64f93a9a27c1970fa8ee5ffc5a6ae2bda477ec5b ]
    
    On big endian architectures the mhi debugfs files which report pm state
    give "Invalid State" for all states.  This is caused by using
    find_last_bit which takes an unsigned long* while the state is passed in
    as an enum mhi_pm_state which will be of int size.
    
    Fix by using __fls to pass the value of state instead of find_last_bit.
    
    Also the current API expects "mhi_pm_state" enumerator as the function
    argument but the function only works with bitmasks. So as Alex suggested,
    let's change the argument to u32 to avoid confusion.
    
    Fixes: a6e2e3522f29 ("bus: mhi: core: Add support for PM state transitions")
    Cc: stable@vger.kernel.org
    [mani: changed the function argument to u32]
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Reviewed-by: Hemant Kumar <hemantk@codeaurora.org>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Paul Davey <paul.davey@alliedtelesis.co.nz>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20220301160308.107452-3-manivannan.sadhasivam@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f6d5cb0a5e53ccb6a6deaa2e8b1762c4bb38e3a
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Dec 16 13:42:26 2021 +0530

    bus: mhi: core: Use correctly sized arguments for bit field
    
    [ Upstream commit 5a717e93239fc373a314e03e45c43b62ebea1b26 ]
    
    The find.h APIs are designed to be used only on unsigned long arguments.
    This can technically result in a over-read, but it is harmless in this
    case. Regardless, fix it to avoid the warning seen under -Warray-bounds,
    which we'd like to enable globally:
    
    In file included from ./include/linux/bitmap.h:9,
                     from ./include/linux/cpumask.h:12,
                     from ./arch/x86/include/asm/cpumask.h:5,
                     from ./arch/x86/include/asm/msr.h:11,
                     from ./arch/x86/include/asm/processor.h:22,
                     from ./arch/x86/include/asm/cpufeature.h:5,
                     from ./arch/x86/include/asm/thread_info.h:53,
                     from ./include/linux/thread_info.h:60,
                     from ./arch/x86/include/asm/preempt.h:7,
                     from ./include/linux/preempt.h:78,
                     from ./include/linux/spinlock.h:55,
                     from ./include/linux/wait.h:9,
                     from ./include/linux/wait_bit.h:8,
                     from ./include/linux/fs.h:6,
                     from ./include/linux/debugfs.h:15,
                     from drivers/bus/mhi/core/init.c:7:
    drivers/bus/mhi/core/init.c: In function 'to_mhi_pm_state_str':
    ./include/linux/find.h:187:37: warning: array subscript 'long unsigned int[0]' is partly outside array bounds of 'enum mhi_pm_state[1]' [-Warray-bounds]
      187 |                 unsigned long val = *addr & GENMASK(size - 1, 0);
          |                                     ^~~~~
    drivers/bus/mhi/core/init.c:80:51: note: while referencing 'state'
       80 | const char *to_mhi_pm_state_str(enum mhi_pm_state state)
          |                                 ~~~~~~~~~~~~~~~~~~^~~~~
    
    Link: https://lore.kernel.org/r/20211215232446.2069794-1-keescook@chromium.org
    [mani: changed the variable name "bits" to "pm_state"]
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20211216081227.237749-10-manivannan.sadhasivam@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 170a08ad3d1a184f3f84e5d56031541740c7f874
Author: Hui Wang <hui.wang@canonical.com>
Date:   Tue Mar 8 19:00:42 2022 +0800

    serial: sc16is7xx: Clear RS485 bits in the shutdown
    
    [ Upstream commit 927728a34f11b5a27f4610bdb7068317d6fdc72a ]
    
    We tested RS485 function on an EVB which has SC16IS752, after
    finishing the test, we started the RS232 function test, but found the
    RTS is still working in the RS485 mode.
    
    That is because both startup and shutdown call port_update() to set
    the EFCR_REG, this will not clear the RS485 bits once the bits are set
    in the reconf_rs485(). To fix it, clear the RS485 bits in shutdown.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20220308110042.108451-1-hui.wang@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dce84f475d13b773a1a4c823581cab25044d86a
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Mar 11 12:47:33 2022 +1000

    powerpc/tm: Fix more userspace r13 corruption
    
    [ Upstream commit 9d71165d3934e607070c4e48458c0cf161b1baea ]
    
    Commit cf13435b730a ("powerpc/tm: Fix userspace r13 corruption") fixes a
    problem in treclaim where a SLB miss can occur on the
    thread_struct->ckpt_regs while SCRATCH0 is live with the saved user r13
    value, clobbering it with the kernel r13 and ultimately resulting in
    kernel r13 being stored in ckpt_regs.
    
    There is an equivalent problem in trechkpt where the user r13 value is
    loaded into r13 from chkpt_regs to be recheckpointed, but a SLB miss
    could occur on ckpt_regs accesses after that, which will result in r13
    being clobbered with a kernel value and that will get recheckpointed and
    then restored to user registers.
    
    The same memory page is accessed right before this critical window where
    a SLB miss could cause corruption, so hitting the bug requires the SLB
    entry be removed within a small window of instructions, which is
    possible if a SLB related MCE hits there. PAPR also permits the
    hypervisor to discard this SLB entry (because slb_shadow->persistent is
    only set to SLB_NUM_BOLTED) although it's not known whether any
    implementations would do this (KVM does not). So this is an extremely
    unlikely bug, only found by inspection.
    
    Fix this by also storing user r13 in a temporary location on the kernel
    stack and don't change the r13 register from kernel r13 until the RI=0
    critical section that does not fault.
    
    The SCRATCH0 change is not strictly part of the fix, it's only used in
    the RI=0 section so it does not have the same problem as the previous
    SCRATCH0 bug.
    
    Fixes: 98ae22e15b43 ("powerpc: Add helper functions for transactional memory context switching")
    Cc: stable@vger.kernel.org # v3.9+
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220311024733.48926-1-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed8a5d63a0da5ea9ed910918be134669ca39454b
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Oct 22 16:13:22 2021 +1000

    powerpc: flexible GPR range save/restore macros
    
    [ Upstream commit aebd1fb45c622e9a2b06fb70665d084d3a8d6c78 ]
    
    Introduce macros that operate on a (start, end) range of GPRs, which
    reduces lines of code and need to do mental arithmetic while reading the
    code.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Segher Boessenkool <segher@kernel.crashing.org>
    Reviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211022061322.2671178-1-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a80e66a10af2b74c68739927201f4d5aebc467f
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Aug 23 15:29:12 2021 +0000

    powerpc/32: Don't use lmw/stmw for saving/restoring non volatile regs
    
    [ Upstream commit a85c728cb5e12216c19ae5878980c2cbbbf8616d ]
    
    Instructions lmw/stmw are interesting for functions that are rarely
    used and not in the cache, because only one instruction is to be
    copied into the instruction cache instead of 19. However those
    instruction are less performant than 19x raw lwz/stw as they require
    synchronisation plus one additional cycle.
    
    SAVE_NVGPRS / REST_NVGPRS are used in only a few places which are
    mostly in interrupts entries/exits and in task switch so they are
    likely already in the cache.
    
    Using standard lwz improves null_syscall selftest by:
    - 10 cycles on mpc832x.
    - 2 cycles on mpc8xx.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/316c543b8906712c108985c8463eec09c8db577b.1629732542.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b342feb491415ee5a35d7edcd759e9d021acc544
Author: Arun Easi <aeasi@marvell.com>
Date:   Thu Mar 10 01:25:54 2022 -0800

    scsi: qla2xxx: Fix loss of NVMe namespaces after driver reload test
    
    [ Upstream commit db212f2eb3fb7f546366777e93c8f54614d39269 ]
    
    Driver registration of localport can race when it happens at the remote
    port discovery time. Fix this by calling the registration under a mutex.
    
    Link: https://lore.kernel.org/r/20220310092604.22950-4-njavali@marvell.com
    Fixes: e84067d74301 ("scsi: qla2xxx: Add FC-NVMe F/W initialization and transport registration")
    Cc: stable@vger.kernel.org
    Reported-by: Marco Patalano <mpatalan@redhat.com>
    Tested-by: Marco Patalano <mpatalan@redhat.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31c60d15ccd1b810d03c05e81d3c21bf242e319e
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>
Date:   Tue Mar 1 15:33:40 2022 +0100

    KVM: s390x: fix SCK locking
    
    [ Upstream commit c0573ba5c5a2244dc02060b1f374d4593c1d20b7 ]
    
    When handling the SCK instruction, the kvm lock is taken, even though
    the vcpu lock is already being held. The normal locking order is kvm
    lock first and then vcpu lock. This is can (and in some circumstances
    does) lead to deadlocks.
    
    The function kvm_s390_set_tod_clock is called both by the SCK handler
    and by some IOCTLs to set the clock. The IOCTLs will not hold the vcpu
    lock, so they can safely take the kvm lock. The SCK handler holds the
    vcpu lock, but will also somehow need to acquire the kvm lock without
    relinquishing the vcpu lock.
    
    The solution is to factor out the code to set the clock, and provide
    two wrappers. One is called like the original function and does the
    locking, the other is called kvm_s390_try_set_tod_clock and uses
    trylock to try to acquire the kvm lock. This new wrapper is then used
    in the SCK handler. If locking fails, -EAGAIN is returned, which is
    eventually propagated to userspace, thus also freeing the vcpu lock and
    allowing for forward progress.
    
    This is not the most efficient or elegant way to solve this issue, but
    the SCK instruction is deprecated and its performance is not critical.
    
    The goal of this patch is just to provide a simple but correct way to
    fix the bug.
    
    Fixes: 6a3f95a6b04c ("KVM: s390: Intercept SCK instruction")
    Signed-off-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Reviewed-by: Janis Schoetterl-Glausch <scgl@linux.ibm.com>
    Link: https://lore.kernel.org/r/20220301143340.111129-1-imbrenda@linux.ibm.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83772314e1e0a5232823651e44a77a33857eafba
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Thu Mar 3 22:40:27 2022 +0800

    btrfs: don't access possibly stale fs_info data in device_list_add
    
    [ Upstream commit 79c9234ba596e903907de20573fd4bcc85315b06 ]
    
    Syzbot reported a possible use-after-free in printing information
    in device_list_add.
    
    Very similar with the bug fixed by commit 0697d9a61099 ("btrfs: don't
    access possibly stale fs_info data for printing duplicate device"),
    but this time the use occurs in btrfs_info_in_rcu.
    
      Call Trace:
       kasan_report.cold+0x83/0xdf mm/kasan/report.c:459
       btrfs_printk+0x395/0x425 fs/btrfs/super.c:244
       device_list_add.cold+0xd7/0x2ed fs/btrfs/volumes.c:957
       btrfs_scan_one_device+0x4c7/0x5c0 fs/btrfs/volumes.c:1387
       btrfs_control_ioctl+0x12a/0x2d0 fs/btrfs/super.c:2409
       vfs_ioctl fs/ioctl.c:51 [inline]
       __do_sys_ioctl fs/ioctl.c:874 [inline]
       __se_sys_ioctl fs/ioctl.c:860 [inline]
       __x64_sys_ioctl+0x193/0x200 fs/ioctl.c:860
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fix this by modifying device->fs_info to NULL too.
    
    Reported-and-tested-by: syzbot+82650a4e0ed38f218363@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6784b694ecd82c1c396f82e012ef892eb409a8d7
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Mar 8 04:49:37 2022 -0500

    KVM: use __vcalloc for very large allocations
    
    [ Upstream commit 37b2a6510a48ca361ced679f92682b7b7d7d0330 ]
    
    Allocations whose size is related to the memslot size can be arbitrarily
    large.  Do not use kvzalloc/kvcalloc, as those are limited to "not crazy"
    sizes that fit in 32 bits.
    
    Cc: stable@vger.kernel.org
    Fixes: 7661809d493b ("mm: don't allow oversized kvmalloc() calls")
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c33904fd1ef49095488060f8e3ac807c6d70ca04
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Mar 8 04:47:22 2022 -0500

    mm: vmalloc: introduce array allocation functions
    
    [ Upstream commit a8749a35c39903120ec421ef2525acc8e0daa55c ]
    
    Linux has dozens of occurrences of vmalloc(array_size()) and
    vzalloc(array_size()).  Allow to simplify the code by providing
    vmalloc_array and vcalloc, as well as the underscored variants that let
    the caller specify the GFP flags.
    
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff41804632e530e8f8971f45b23ca29d63edf243
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Nov 5 13:36:19 2021 -0700

    Compiler Attributes: add __alloc_size() for better bounds checking
    
    [ Upstream commit 86cffecdeaa278444870c8745ab166a65865dbf0 ]
    
    GCC and Clang can use the "alloc_size" attribute to better inform the
    results of __builtin_object_size() (for compile-time constant values).
    Clang can additionally use alloc_size to inform the results of
    __builtin_dynamic_object_size() (for run-time values).
    
    Because GCC sees the frequent use of struct_size() as an allocator size
    argument, and notices it can return SIZE_MAX (the overflow indication),
    it complains about these call sites overflowing (since SIZE_MAX is
    greater than the default -Walloc-size-larger-than=PTRDIFF_MAX).  This
    isn't helpful since we already know a SIZE_MAX will be caught at
    run-time (this was an intentional design).  To deal with this, we must
    disable this check as it is both a false positive and redundant.  (Clang
    does not have this warning option.)
    
    Unfortunately, just checking the -Wno-alloc-size-larger-than is not
    sufficient to make the __alloc_size attribute behave correctly under
    older GCC versions.  The attribute itself must be disabled in those
    situations too, as there appears to be no way to reliably silence the
    SIZE_MAX constant expression cases for GCC versions less than 9.1:
    
       In file included from ./include/linux/resource_ext.h:11,
                        from ./include/linux/pci.h:40,
                        from drivers/net/ethernet/intel/ixgbe/ixgbe.h:9,
                        from drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c:4:
       In function 'kmalloc_node',
           inlined from 'ixgbe_alloc_q_vector' at ./include/linux/slab.h:743:9:
       ./include/linux/slab.h:618:9: error: argument 1 value '18446744073709551615' exceeds maximum object size 9223372036854775807 [-Werror=alloc-size-larger-than=]
         return __kmalloc_node(size, flags, node);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       ./include/linux/slab.h: In function 'ixgbe_alloc_q_vector':
       ./include/linux/slab.h:455:7: note: in a call to allocation function '__kmalloc_node' declared here
        void *__kmalloc_node(size_t size, gfp_t flags, int node) __assume_slab_alignment __malloc;
              ^~~~~~~~~~~~~~
    
    Specifically:
     '-Wno-alloc-size-larger-than' is not correctly handled by GCC < 9.1
        https://godbolt.org/z/hqsfG7q84 (doesn't disable)
        https://godbolt.org/z/P9jdrPTYh (doesn't admit to not knowing about option)
        https://godbolt.org/z/465TPMWKb (only warns when other warnings appear)
    
     '-Walloc-size-larger-than=18446744073709551615' is not handled by GCC < 8.2
        https://godbolt.org/z/73hh1EPxz (ignores numeric value)
    
    Since anything marked with __alloc_size would also qualify for marking
    with __malloc, just include __malloc along with it to avoid redundant
    markings.  (Suggested by Linus Torvalds.)
    
    Finally, make sure checkpatch.pl doesn't get confused about finding the
    __alloc_size attribute on functions.  (Thanks to Joe Perches.)
    
    Link: https://lkml.kernel.org/r/20210930222704.2631604-3-keescook@chromium.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Tested-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Andy Whitcroft <apw@canonical.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Daniel Micay <danielmicay@gmail.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Dennis Zhou <dennis@kernel.org>
    Cc: Dwaipayan Ray <dwaipayanray1@gmail.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Gustavo A. R. Silva <gustavoars@kernel.org>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: kernel test robot <lkp@intel.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Miguel Ojeda <ojeda@kernel.org>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Souptick Joarder <jrdr.linux@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1e69c36de1777cbe2f99cbf7a72070f2c14c6d4
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Mon Feb 28 18:33:34 2022 +0200

    mtd: spi-nor: Skip erase logic when SPI_NOR_NO_ERASE is set
    
    [ Upstream commit 151c6b49d679872d6fc0b50e0ad96303091694a2 ]
    
    Even if SPI_NOR_NO_ERASE was set, one could still send erase opcodes
    to the flash. It is not recommended to send unsupported opcodes to
    flashes. Fix the logic and do not set mtd->_erase when SPI_NOR_NO_ERASE
    is specified. With this users will not be able to issue erase opcodes to
    flashes and instead they will recive an -ENOTSUPP error.
    
    Fixes: b199489d37b2 ("mtd: spi-nor: add the framework for SPI NOR")
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Reviewed-by: Michael Walle <michael@walle.cc>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220228163334.277730-1-tudor.ambarus@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e65d78b12fbc0f4392f9d97dda11e2157a36de42
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Sun Mar 6 22:57:48 2022 +0100

    batman-adv: Use netif_rx().
    
    [ Upstream commit 94da81e2fc4285db373fe9a1eb012c2ee205b110 ]
    
    Since commit
       baebdf48c3600 ("net: dev: Makes sure netif_rx() can be invoked in any context.")
    
    the function netif_rx() can be used in preemptible/thread context as
    well as in interrupt context.
    
    Use netif_rx().
    
    Cc: Antonio Quartulli <a@unstable.cc>
    Cc: Marek Lindner <mareklindner@neomailbox.ch>
    Cc: Simon Wunderlich <sw@simonwunderlich.de>
    Cc: Sven Eckelmann <sven@narfation.org>
    Cc: b.a.t.m.a.n@lists.open-mesh.org
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Acked-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c0bb583a4444cce224e8661090cbffc98e2fe07
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Tue Feb 22 10:42:21 2022 +0800

    iio: accel: mma8452: use the correct logic to get mma8452_data
    
    [ Upstream commit c87b7b12f48db86ac9909894f4dc0107d7df6375 ]
    
    The original logic to get mma8452_data is wrong, the *dev point to
    the device belong to iio_dev. we can't use this dev to find the
    correct i2c_client. The original logic happen to work because it
    finally use dev->driver_data to get iio_dev. Here use the API
    to_i2c_client() is wrong and make reader confuse. To correct the
    logic, it should be like this
    
      struct mma8452_data *data = iio_priv(dev_get_drvdata(dev));
    
    But after commit 8b7651f25962 ("iio: iio_device_alloc(): Remove
    unnecessary self drvdata"), the upper logic also can't work.
    When try to show the avialable scale in userspace, will meet kernel
    dump, kernel handle NULL pointer dereference.
    
    So use dev_to_iio_dev() to correct the logic.
    
    Dual fixes tags as the second reflects when the bug was exposed, whilst
    the first reflects when the original bug was introduced.
    
    Fixes: c3cdd6e48e35 ("iio: mma8452: refactor for seperating chip specific data")
    Fixes: 8b7651f25962 ("iio: iio_device_alloc(): Remove unnecessary self drvdata")
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Reviewed-by: Martin Kepplinger <martink@posteo.de>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1645497741-5402-1-git-send-email-haibo.chen@nxp.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffd3e67f0dfbb9b6e4aebc2c6027005bad0466a9
Author: Palmer Dabbelt <palmer@rivosinc.com>
Date:   Fri Feb 4 13:14:08 2022 -0800

    riscv/mm: Add XIP_FIXUP for riscv_pfn_base
    
    [ Upstream commit ca0cb9a60f6d86d4b2139c6f393a78f39edcd7cb ]
    
    This manifests as a crash early in boot on VexRiscv.
    
    Signed-off-by: Myrtle Shah <gatecat@ds0.me>
    [Palmer: split commit]
    Fixes: 44c922572952 ("RISC-V: enable XIP")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6f1651ddf9176b32335dc069c61e0dc0d600ce1
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Mon Jan 24 15:50:31 2022 -0500

    NFSD: COMMIT operations must not return NFS?ERR_INVAL
    
    [ Upstream commit 3f965021c8bc38965ecb1924f570c4842b33d408 ]
    
    Since, well, forever, the Linux NFS server's nfsd_commit() function
    has returned nfserr_inval when the passed-in byte range arguments
    were non-sensical.
    
    However, according to RFC 1813 section 3.3.21, NFSv3 COMMIT requests
    are permitted to return only the following non-zero status codes:
    
          NFS3ERR_IO
          NFS3ERR_STALE
          NFS3ERR_BADHANDLE
          NFS3ERR_SERVERFAULT
    
    NFS3ERR_INVAL is not included in that list. Likewise, NFS4ERR_INVAL
    is not listed in the COMMIT row of Table 6 in RFC 8881.
    
    RFC 7530 does permit COMMIT to return NFS4ERR_INVAL, but does not
    specify when it can or should be used.
    
    Instead of dropping or failing a COMMIT request in a byte range that
    is not supported, turn it into a valid request by treating one or
    both arguments as zero. Offset zero means start-of-file, count zero
    means until-end-of-file, so we only ever extend the commit range.
    NFS servers are always allowed to commit more and sooner than
    requested.
    
    The range check is no longer bounded by NFS_OFFSET_MAX, but rather
    by the value that is returned in the maxfilesize field of the NFSv3
    FSINFO procedure or the NFSv4 maxfilesize file attribute.
    
    Note that this change results in a new pynfs failure:
    
    CMT4     st_commit.testCommitOverflow                             : RUNNING
    CMT4     st_commit.testCommitOverflow                             : FAILURE
               COMMIT with offset + count overflow should return
               NFS4ERR_INVAL, instead got NFS4_OK
    
    IMO the test is not correct as written: RFC 8881 does not allow the
    COMMIT operation to return NFS4ERR_INVAL.
    
    Reported-by: Dan Aloni <dan.aloni@vastdata.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Reviewed-by: Bruce Fields <bfields@fieldses.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2a9881bc2cac1a79393d44466e4c1d8ad478fc0
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Tue Dec 28 14:26:03 2021 -0500

    NFSD: De-duplicate net_generic(nf->nf_net, nfsd_net_id)
    
    [ Upstream commit 2c445a0e72cb1fbfbdb7f9473c53556ee27c1d90 ]
    
    Since this pointer is used repeatedly, move it to a stack variable.
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59bf2aca4b1c3eca28b337b5e797bb9b43d44f3b
Author: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
Date:   Tue Mar 29 13:10:31 2022 +0530

    drm/amd/display: Fix by adding FPU protection for dcn30_internal_validate_bw
    
    [ Upstream commit 50e6cb3fd2cde554db646282ea10df7236e6493c ]
    
    [Why]
    Below general protection fault observed when WebGL Aquarium is run for
    longer duration. If drm debug logs are enabled and set to 0x1f then the
    issue is observed within 10 minutes of run.
    
    [  100.717056] general protection fault, probably for non-canonical address 0x2d33302d32323032: 0000 [#1] PREEMPT SMP NOPTI
    [  100.727921] CPU: 3 PID: 1906 Comm: DrmThread Tainted: G        W         5.15.30 #12 d726c6a2d6ebe5cf9223931cbca6892f916fe18b
    [  100.754419] RIP: 0010:CalculateSwathWidth+0x1f7/0x44f
    [  100.767109] Code: 00 00 00 f2 42 0f 11 04 f0 48 8b 85 88 00 00 00 f2 42 0f 10 04 f0 48 8b 85 98 00 00 00 f2 42 0f 11 04 f0 48 8b 45 10 0f 57 c0 <f3> 42 0f 2a 04 b0 0f 57 c9 f3 43 0f 2a 0c b4 e8 8c e2 f3 ff 48 8b
    [  100.781269] RSP: 0018:ffffa9230079eeb0 EFLAGS: 00010246
    [  100.812528] RAX: 2d33302d32323032 RBX: 0000000000000500 RCX: 0000000000000000
    [  100.819656] RDX: 0000000000000001 RSI: ffff99deb712c49c RDI: 0000000000000000
    [  100.826781] RBP: ffffa9230079ef50 R08: ffff99deb712460c R09: ffff99deb712462c
    [  100.833907] R10: ffff99deb7124940 R11: ffff99deb7124d70 R12: ffff99deb712ae44
    [  100.841033] R13: 0000000000000001 R14: 0000000000000000 R15: ffffa9230079f0a0
    [  100.848159] FS:  00007af121212640(0000) GS:ffff99deba780000(0000) knlGS:0000000000000000
    [  100.856240] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  100.861980] CR2: 0000209000fe1000 CR3: 000000011b18c000 CR4: 0000000000350ee0
    [  100.869106] Call Trace:
    [  100.871555]  <TASK>
    [  100.873655]  ? asm_sysvec_reschedule_ipi+0x12/0x20
    [  100.878449]  CalculateSwathAndDETConfiguration+0x1a3/0x6dd
    [  100.883937]  dml31_ModeSupportAndSystemConfigurationFull+0x2ce4/0x76da
    [  100.890467]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.895173]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.899874]  ? __sprint_symbol+0x80/0x135
    [  100.903883]  ? dm_update_plane_state+0x3f9/0x4d2
    [  100.908500]  ? symbol_string+0xb7/0xde
    [  100.912250]  ? number+0x145/0x29b
    [  100.915566]  ? vsnprintf+0x341/0x5ff
    [  100.919141]  ? desc_read_finalized_seq+0x39/0x87
    [  100.923755]  ? update_load_avg+0x1b9/0x607
    [  100.927849]  ? compute_mst_dsc_configs_for_state+0x7d/0xd5b
    [  100.933416]  ? fetch_pipe_params+0xa4d/0xd0c
    [  100.937686]  ? dc_fpu_end+0x3d/0xa8
    [  100.941175]  dml_get_voltage_level+0x16b/0x180
    [  100.945619]  dcn30_internal_validate_bw+0x10e/0x89b
    [  100.950495]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.955285]  ? resource_build_scaling_params+0x98b/0xb8c
    [  100.960595]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.965384]  dcn31_validate_bandwidth+0x9a/0x1fc
    [  100.970001]  dc_validate_global_state+0x238/0x295
    [  100.974703]  amdgpu_dm_atomic_check+0x9c1/0xbce
    [  100.979235]  ? _printk+0x59/0x73
    [  100.982467]  drm_atomic_check_only+0x403/0x78b
    [  100.986912]  drm_mode_atomic_ioctl+0x49b/0x546
    [  100.991358]  ? drm_ioctl+0x1c1/0x3b3
    [  100.994936]  ? drm_atomic_set_property+0x92a/0x92a
    [  100.999725]  drm_ioctl_kernel+0xdc/0x149
    [  101.003648]  drm_ioctl+0x27f/0x3b3
    [  101.007051]  ? drm_atomic_set_property+0x92a/0x92a
    [  101.011842]  amdgpu_drm_ioctl+0x49/0x7d
    [  101.015679]  __se_sys_ioctl+0x7c/0xb8
    [  101.015685]  do_syscall_64+0x5f/0xb8
    [  101.015690]  ? __irq_exit_rcu+0x34/0x96
    
    [How]
    It calles populate_dml_pipes which uses doubles to initialize.
    Adding FPU protection avoids context switch and probable loss of vba context
    as there is potential contention while drm debug logs are enabled.
    
    Signed-off-by: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f276634b12fa8f63988be9cf5492c7d60d5ad7b1
Author: Michael Strauss <michael.strauss@amd.com>
Date:   Wed Aug 11 11:38:44 2021 -0400

    drm/amd/display: Set min dcfclk if pipe count is 0
    
    [ Upstream commit bc204778b4032b336cb3bde85bea852d79e7e389 ]
    
    [WHY]
    Clocks don't get recalculated in 0 stream/0 pipe configs,
    blocking S0i3 if dcfclk gets high enough
    
    [HOW]
    Create DCN31 copy of DCN30 bandwidth validation func which
    doesn't entirely skip validation in 0 pipe scenarios
    
    Override dcfclk to vlevel 0/min value during validation if pipe
    count is 0
    
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Michael Strauss <michael.strauss@amd.com>
    Tested-by: Daniel Wheeler <Daniel.Wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f799df4569c139d320b18fc1e152c96ba4c89223
Author: Xiaomeng Tong <xiam0nd.tong@gmail.com>
Date:   Wed Apr 6 21:04:44 2022 +0200

    drbd: fix an invalid memory access caused by incorrect use of list iterator
    
    [ Upstream commit ae4d37b5df749926891583d42a6801b5da11e3c1 ]
    
    The bug is here:
            idr_remove(&connection->peer_devices, vnr);
    
    If the previous for_each_connection() don't exit early (no goto hit
    inside the loop), the iterator 'connection' after the loop will be a
    bogus pointer to an invalid structure object containing the HEAD
    (&resource->connections). As a result, the use of 'connection' above
    will lead to a invalid memory access (including a possible invalid free
    as idr_remove could call free_layer).
    
    The original intention should have been to remove all peer_devices,
    but the following lines have already done the work. So just remove
    this line and the unneeded label, to fix this bug.
    
    Cc: stable@vger.kernel.org
    Fixes: c06ece6ba6f1b ("drbd: Turn connection->volumes into connection->peer_devices")
    Signed-off-by: Xiaomeng Tong <xiam0nd.tong@gmail.com>
    Reviewed-by: Christoph Böhmwalder <christoph.boehmwalder@linbit.com>
    Reviewed-by: Lars Ellenberg <lars.ellenberg@linbit.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bb1df0bfd4640b47dc78290e2c6415cb79fc89b
Author: Wu Bo <wubo40@huawei.com>
Date:   Thu Nov 4 16:07:09 2021 +0800

    drbd: Fix double free problem in drbd_create_device
    
    [ Upstream commit 27548088ac628109f70eb0b1eb521d035844dba8 ]
    
    In drbd_create_device(), the 'out_no_io_page' lable has called
    blk_cleanup_disk() when return failed.
    
    So remove the 'out_cleanup_disk' lable to avoid double free the
    disk pointer.
    
    Fixes: e92ab4eda516 ("drbd: add error handling support for add_disk()")
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/1636013229-26309-1-git-send-email-wubo40@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbbcf21ad6a877caae6506ca54aa74967e6f0dbd
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Mon Sep 27 15:00:59 2021 -0700

    drbd: add error handling support for add_disk()
    
    [ Upstream commit e92ab4eda516a5bfd96c087282ebe9521deba4f4 ]
    
    We never checked for errors on add_disk() as this function
    returned void. Now that this is fixed, use the shiny new
    error handling.
    
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72fa2ea3e0ab859f627ee0bf9b93ca9ba64df95e
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Mar 8 13:36:38 2022 +0800

    btrfs: remove device item and update super block in the same transaction
    
    [ Upstream commit bbac58698a55cc0a6f0c0d69a6dcd3f9f3134c11 ]
    
    [BUG]
    There is a report that a btrfs has a bad super block num devices.
    
    This makes btrfs to reject the fs completely.
    
      BTRFS error (device sdd3): super_num_devices 3 mismatch with num_devices 2 found here
      BTRFS error (device sdd3): failed to read chunk tree: -22
      BTRFS error (device sdd3): open_ctree failed
    
    [CAUSE]
    During btrfs device removal, chunk tree and super block num devs are
    updated in two different transactions:
    
      btrfs_rm_device()
      |- btrfs_rm_dev_item(device)
      |  |- trans = btrfs_start_transaction()
      |  |  Now we got transaction X
      |  |
      |  |- btrfs_del_item()
      |  |  Now device item is removed from chunk tree
      |  |
      |  |- btrfs_commit_transaction()
      |     Transaction X got committed, super num devs untouched,
      |     but device item removed from chunk tree.
      |     (AKA, super num devs is already incorrect)
      |
      |- cur_devices->num_devices--;
      |- cur_devices->total_devices--;
      |- btrfs_set_super_num_devices()
         All those operations are not in transaction X, thus it will
         only be written back to disk in next transaction.
    
    So after the transaction X in btrfs_rm_dev_item() committed, but before
    transaction X+1 (which can be minutes away), a power loss happen, then
    we got the super num mismatch.
    
    [FIX]
    Instead of starting and committing a transaction inside
    btrfs_rm_dev_item(), start a transaction in side btrfs_rm_device() and
    pass it to btrfs_rm_dev_item().
    
    And only commit the transaction after everything is done.
    
    Reported-by: Luca Béla Palkovics <luca.bela.palkovics@gmail.com>
    Link: https://lore.kernel.org/linux-btrfs/CA+8xDSpvdm_U0QLBAnrH=zqDq_cWCOH5TiV46CKmp3igr44okQ@mail.gmail.com/
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f75534a71abf01e46a06aacff9535baf7c9e9b96
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Oct 5 16:12:44 2021 -0400

    btrfs: use btrfs_get_dev_args_from_path in dev removal ioctls
    
    [ Upstream commit 1a15eb724aaef8656f8cc01d9355797cfe7c618e ]
    
    For device removal and replace we call btrfs_find_device_by_devspec,
    which if we give it a device path and nothing else will call
    btrfs_get_dev_args_from_path, which opens the block device and reads the
    super block and then looks up our device based on that.
    
    However at this point we're holding the sb write "lock", so reading the
    block device pulls in the dependency of ->open_mutex, which produces the
    following lockdep splat
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.14.0-rc2+ #405 Not tainted
    ------------------------------------------------------
    losetup/11576 is trying to acquire lock:
    ffff9bbe8cded938 ((wq_completion)loop0){+.+.}-{0:0}, at: flush_workqueue+0x67/0x5e0
    
    but task is already holding lock:
    ffff9bbe88e4fc68 (&lo->lo_mutex){+.+.}-{3:3}, at: __loop_clr_fd+0x41/0x660 [loop]
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #4 (&lo->lo_mutex){+.+.}-{3:3}:
           __mutex_lock+0x7d/0x750
           lo_open+0x28/0x60 [loop]
           blkdev_get_whole+0x25/0xf0
           blkdev_get_by_dev.part.0+0x168/0x3c0
           blkdev_open+0xd2/0xe0
           do_dentry_open+0x161/0x390
           path_openat+0x3cc/0xa20
           do_filp_open+0x96/0x120
           do_sys_openat2+0x7b/0x130
           __x64_sys_openat+0x46/0x70
           do_syscall_64+0x38/0x90
           entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    -> #3 (&disk->open_mutex){+.+.}-{3:3}:
           __mutex_lock+0x7d/0x750
           blkdev_get_by_dev.part.0+0x56/0x3c0
           blkdev_get_by_path+0x98/0xa0
           btrfs_get_bdev_and_sb+0x1b/0xb0
           btrfs_find_device_by_devspec+0x12b/0x1c0
           btrfs_rm_device+0x127/0x610
           btrfs_ioctl+0x2a31/0x2e70
           __x64_sys_ioctl+0x80/0xb0
           do_syscall_64+0x38/0x90
           entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    -> #2 (sb_writers#12){.+.+}-{0:0}:
           lo_write_bvec+0xc2/0x240 [loop]
           loop_process_work+0x238/0xd00 [loop]
           process_one_work+0x26b/0x560
           worker_thread+0x55/0x3c0
           kthread+0x140/0x160
           ret_from_fork+0x1f/0x30
    
    -> #1 ((work_completion)(&lo->rootcg_work)){+.+.}-{0:0}:
           process_one_work+0x245/0x560
           worker_thread+0x55/0x3c0
           kthread+0x140/0x160
           ret_from_fork+0x1f/0x30
    
    -> #0 ((wq_completion)loop0){+.+.}-{0:0}:
           __lock_acquire+0x10ea/0x1d90
           lock_acquire+0xb5/0x2b0
           flush_workqueue+0x91/0x5e0
           drain_workqueue+0xa0/0x110
           destroy_workqueue+0x36/0x250
           __loop_clr_fd+0x9a/0x660 [loop]
           block_ioctl+0x3f/0x50
           __x64_sys_ioctl+0x80/0xb0
           do_syscall_64+0x38/0x90
           entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    other info that might help us debug this:
    
    Chain exists of:
      (wq_completion)loop0 --> &disk->open_mutex --> &lo->lo_mutex
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&lo->lo_mutex);
                                   lock(&disk->open_mutex);
                                   lock(&lo->lo_mutex);
      lock((wq_completion)loop0);
    
     *** DEADLOCK ***
    
    1 lock held by losetup/11576:
     #0: ffff9bbe88e4fc68 (&lo->lo_mutex){+.+.}-{3:3}, at: __loop_clr_fd+0x41/0x660 [loop]
    
    stack backtrace:
    CPU: 0 PID: 11576 Comm: losetup Not tainted 5.14.0-rc2+ #405
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
    Call Trace:
     dump_stack_lvl+0x57/0x72
     check_noncircular+0xcf/0xf0
     ? stack_trace_save+0x3b/0x50
     __lock_acquire+0x10ea/0x1d90
     lock_acquire+0xb5/0x2b0
     ? flush_workqueue+0x67/0x5e0
     ? lockdep_init_map_type+0x47/0x220
     flush_workqueue+0x91/0x5e0
     ? flush_workqueue+0x67/0x5e0
     ? verify_cpu+0xf0/0x100
     drain_workqueue+0xa0/0x110
     destroy_workqueue+0x36/0x250
     __loop_clr_fd+0x9a/0x660 [loop]
     ? blkdev_ioctl+0x8d/0x2a0
     block_ioctl+0x3f/0x50
     __x64_sys_ioctl+0x80/0xb0
     do_syscall_64+0x38/0x90
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f31b02404cb
    
    Instead what we want to do is populate our device lookup args before we
    grab any locks, and then pass these args into btrfs_rm_device().  From
    there we can find the device and do the appropriate removal.
    
    Suggested-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 321a81835b4aed4f717f89921286f6544ffa8be9
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Oct 5 16:12:43 2021 -0400

    btrfs: add a btrfs_get_dev_args_from_path helper
    
    [ Upstream commit faa775c41d655a4786e9d53cb075a77bb5a75f66 ]
    
    We are going to want to populate our device lookup args outside of any
    locks and then do the actual device lookup later, so add a helper to do
    this work and make btrfs_find_device_by_devspec() use this helper for
    now.
    
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5578b681fbf2b22d61189a2539efd3009518b328
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Oct 5 16:12:42 2021 -0400

    btrfs: handle device lookup with btrfs_dev_lookup_args
    
    [ Upstream commit 562d7b1512f7369a19bca2883e2e8672d78f0481 ]
    
    We have a lot of device lookup functions that all do something slightly
    different.  Clean this up by adding a struct to hold the different
    lookup criteria, and then pass this around to btrfs_find_device() so it
    can do the proper matching based on the lookup criteria.
    
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09674bfd8054b6d3667f7db8489551d3c8c1e3d9
Author: Eli Cohen <elic@nvidia.com>
Date:   Mon Mar 21 16:13:03 2022 +0200

    vdpa/mlx5: Avoid processing works if workqueue was destroyed
    
    [ Upstream commit ad6dc1daaf29f97f23cc810d60ee01c0e83f4c6b ]
    
    If mlx5_vdpa gets unloaded while a VM is running, the workqueue will be
    destroyed. However, vhost might still have reference to the kick
    function and might attempt to push new works. This could lead to null
    pointer dereference.
    
    To fix this, set mvdev->wq to NULL just before destroying and verify
    that the workqueue is not NULL in mlx5_vdpa_kick_vq before attempting to
    push a new work.
    
    Fixes: 5262912ef3cf ("vdpa/mlx5: Add support for control VQ and MAC setting")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Link: https://lore.kernel.org/r/20220321141303.9586-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 008e29d172ca0a4f2f7147b64b06bbaa537500f8
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Thu Mar 17 14:47:24 2022 +0100

    gfs2: Fix gfs2_file_buffered_write endless loop workaround
    
    [ Upstream commit 46f3e0421ccb5474b5c006b0089b9dfd42534bb6 ]
    
    Since commit 554c577cee95b, gfs2_file_buffered_write() can accidentally
    return a truncated iov_iter, which might confuse callers.  Fix that.
    
    Fixes: 554c577cee95b ("gfs2: Prevent endless loops in gfs2_file_buffered_write")
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b7eb92dac240ab3bc83e188d83a3df834b41eb2
Author: Arun Easi <aeasi@marvell.com>
Date:   Thu Mar 10 01:25:56 2022 -0800

    scsi: qla2xxx: Fix crash during module load unload test
    
    [ Upstream commit 0972252450f90db56dd5415a20e2aec21a08d036 ]
    
    During purex packet handling the driver was incorrectly freeing a
    pre-allocated structure. Fix this by skipping that entry.
    
    System crashed with the following stack during a module unload test.
    
    Call Trace:
            sbitmap_init_node+0x7f/0x1e0
            sbitmap_queue_init_node+0x24/0x150
            blk_mq_init_bitmaps+0x3d/0xa0
            blk_mq_init_tags+0x68/0x90
            blk_mq_alloc_map_and_rqs+0x44/0x120
            blk_mq_alloc_set_map_and_rqs+0x63/0x150
            blk_mq_alloc_tag_set+0x11b/0x230
            scsi_add_host_with_dma.cold+0x3f/0x245
            qla2x00_probe_one+0xd5a/0x1b80 [qla2xxx]
    
    Call Trace with slub_debug and debug kernel:
            kasan_report_invalid_free+0x50/0x80
            __kasan_slab_free+0x137/0x150
            slab_free_freelist_hook+0xc6/0x190
            kfree+0xe8/0x2e0
            qla2x00_free_device+0x3bb/0x5d0 [qla2xxx]
            qla2x00_remove_one+0x668/0xcf0 [qla2xxx]
    
    Link: https://lore.kernel.org/r/20220310092604.22950-6-njavali@marvell.com
    Fixes: 62e9dd177732 ("scsi: qla2xxx: Change in PUREX to handle FPIN ELS requests")
    Cc: stable@vger.kernel.org
    Reported-by: Marco Patalano <mpatalan@redhat.com>
    Tested-by: Marco Patalano <mpatalan@redhat.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72806635ee63072aa93d84c2df75ca22a5c3d7fe
Author: Quinn Tran <qutran@marvell.com>
Date:   Tue Oct 26 04:54:06 2021 -0700

    scsi: qla2xxx: edif: Replace list_for_each_safe with list_for_each_entry_safe
    
    [ Upstream commit 8062b742d3bd336ca10ab5a1db1629d33700f9c6 ]
    
    This patch is per review comment by Hannes Reinecke from previous
    submission to replace list_for_each_safe with list_for_each_entry_safe.
    
    Link: https://lore.kernel.org/r/20211026115412.27691-8-njavali@marvell.com
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4510119911cde343e2f81dd78edbdd4188a3ddd
Author: Quinn Tran <qutran@marvell.com>
Date:   Thu Mar 10 01:25:59 2022 -0800

    scsi: qla2xxx: Fix laggy FC remote port session recovery
    
    [ Upstream commit 713b415726f100f6644971e75ebfe1edbef1a390 ]
    
    For session recovery, driver relies on the dpc thread to initiate certain
    operations. The dpc thread runs exclusively without the Mailbox interface
    being occupied. A recent code change for heartbeat check via mailbox cmd 0
    is preventing the dpc thread from carrying out its operation. This patch
    allows the higher priority error recovery to run first before running the
    lower priority heartbeat check.
    
    Link: https://lore.kernel.org/r/20220310092604.22950-9-njavali@marvell.com
    Fixes: d94d8158e184 ("scsi: qla2xxx: Add heartbeat check")
    Cc: stable@vger.kernel.org
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 241afac69b967673a59414bea10ea2024ce4315b
Author: Manish Rangankar <mrangankar@marvell.com>
Date:   Wed Sep 8 09:46:20 2021 -0700

    scsi: qla2xxx: Move heartbeat handling from DPC thread to workqueue
    
    [ Upstream commit 3a4e1f3b3a3c733de3b82b9b522e54803e1165ae ]
    
    DPC thread gets restricted due to a no-op mailbox, which is a blocking call
    and has a high execution frequency. To free up the DPC thread we move no-op
    handling to the workqueue. Also, modified qla_do_heartbeat() to send no-op
    MBC if we don’t have any active interrupts, but there are still I/Os
    outstanding with firmware.
    
    Link: https://lore.kernel.org/r/20210908164622.19240-9-njavali@marvell.com
    Fixes: d94d8158e184 ("scsi: qla2xxx: Add heartbeat check")
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Manish Rangankar <mrangankar@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e9d6854951a67d2df992b4d7b5a7e904cea4d3f
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Dec 15 01:15:54 2021 +0000

    KVM: x86/mmu: Use common TDP MMU zap helper for MMU notifier unmap hook
    
    [ Upstream commit 83b83a02073ec8d18c77a9bbe0881d710f7a9d32 ]
    
    Use the common TDP MMU zap helper when handling an MMU notifier unmap
    event, the two flows are semantically identical.  Consolidate the code in
    preparation for a future bug fix, as both kvm_tdp_mmu_unmap_gfn_range()
    and __kvm_tdp_mmu_zap_gfn_range() are guilty of not zapping SPTEs in
    invalid roots.
    
    No functional change intended.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211215011557.399940-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eabbe74e7de5ee1841764e8937d3812bc4843eb5
Author: Sean Christopherson <seanjc@google.com>
Date:   Sat Nov 20 01:50:08 2021 +0000

    KVM: x86/mmu: Use yield-safe TDP MMU root iter in MMU notifier unmapping
    
    [ Upstream commit 7533377215b6ee432c06c5855f6be5d66e694e46 ]
    
    Use the yield-safe variant of the TDP MMU iterator when handling an
    unmapping event from the MMU notifier, as most occurences of the event
    allow yielding.
    
    Fixes: e1eed5847b09 ("KVM: x86/mmu: Allow yielding during MMU notifier unmap/zap, if possible")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211120015008.3780032-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0855054fa8893ea64f75ee02b43198ed17d75c0a
Author: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
Date:   Thu Dec 23 09:32:23 2021 +0000

    clk: renesas: r9a07g044: Update multiplier and divider values for PLL2/3
    
    [ Upstream commit b289cdecc7c3e25e001cde260c882e4d9a8b0772 ]
    
    As per the HW manual (Rev.1.00 Sep, 2021) PLL2 and PLL3 should be
    1600 MHz, but with current multiplier and divider values this resulted
    to 1596 MHz.
    
    This patch updates the multiplier and divider values for PLL2 and PLL3
    so that we get the exact (1600 MHz) values.
    
    Fixes: 17f0ff3d49ff1 ("clk: renesas: Add support for R9A07G044 SoC")
    Suggested-by: Biju Das <biju.das.jz@bp.renesas.com>
    Signed-off-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
    Link: https://lore.kernel.org/r/20211223093223.4725-1-prabhakar.mahadev-lad.rj@bp.renesas.com
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 518bb96367123062b48b0a9842f2864249b565f6
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Feb 16 16:25:11 2022 -0800

    cxl/port: Hold port reference until decoder release
    
    [ Upstream commit 74be98774dfbc5b8b795db726bd772e735d2edd4 ]
    
    KASAN + DEBUG_KOBJECT_RELEASE reports a potential use-after-free in
    cxl_decoder_release() where it goes to reference its parent, a cxl_port,
    to free its id back to port->decoder_ida.
    
     BUG: KASAN: use-after-free in to_cxl_port+0x18/0x90 [cxl_core]
     Read of size 8 at addr ffff888119270908 by task kworker/35:2/379
    
     CPU: 35 PID: 379 Comm: kworker/35:2 Tainted: G           OE     5.17.0-rc2+ #198
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
     Workqueue: events kobject_delayed_cleanup
     Call Trace:
      <TASK>
      dump_stack_lvl+0x59/0x73
      print_address_description.constprop.0+0x1f/0x150
      ? to_cxl_port+0x18/0x90 [cxl_core]
      kasan_report.cold+0x83/0xdf
      ? to_cxl_port+0x18/0x90 [cxl_core]
      to_cxl_port+0x18/0x90 [cxl_core]
      cxl_decoder_release+0x2a/0x60 [cxl_core]
      device_release+0x5f/0x100
      kobject_cleanup+0x80/0x1c0
    
    The device core only guarantees parent lifetime until all children are
    unregistered. If a child needs a parent to complete its ->release()
    callback that child needs to hold a reference to extend the lifetime of
    the parent.
    
    Fixes: 40ba17afdfab ("cxl/acpi: Introduce cxl_decoder objects")
    Reported-by: Ben Widawsky <ben.widawsky@intel.com>
    Tested-by: Ben Widawsky <ben.widawsky@intel.com>
    Reviewed-by: Ben Widawsky <ben.widawsky@intel.com>
    Link: https://lore.kernel.org/r/164505751190.4175768.13324905271463416712.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b5ce83872b4ceb2ff77076ccefbf5b5523c1626
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Fri Dec 31 12:36:02 2021 +0100

    mt76: mt7921: do not always disable fw runtime-pm
    
    [ Upstream commit b44eeb8cbdf2b88f2844f11e4f263b0abed5b5b0 ]
    
    After commit 'd430dffbe9dd ("mt76: mt7921: fix a possible race
    enabling/disabling runtime-pm")', runtime-pm is always disabled in the
    fw even if the user requests to enable it toggling debugfs node since
    mt7921_pm_interface_iter routine will use pm->enable to configure the fw.
    Fix the issue moving enable variable configuration before running
    mt7921_pm_interface_iter routine.
    
    Fixes: d430dffbe9dd ("mt76: mt7921: fix a possible race enabling/disabling runtime-pm")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d721a17505b578cec77ada07a6e36d7ac5fc03c
Author: Sean Wang <sean.wang@mediatek.com>
Date:   Fri Dec 24 16:33:55 2021 +0800

    mt76: mt76_connac: fix MCU_CE_CMD_SET_ROC definition error
    
    [ Upstream commit bf9727a27442a50c75b7d99a5088330c578b2a42 ]
    
    Fixed an MCU_CE_CMD_SET_ROC definition error that occurred from a previous
    refactor work.
    
    Fixes: d0e274af2f2e4 ("mt76: mt76_connac: create mcu library")
    Signed-off-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6512c3c39cb6b573b791ce45365818a38b76afbe
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Dec 22 15:20:24 2021 +0100

    media: davinci: vpif: fix use-after-free on driver unbind
    
    [ Upstream commit 43acb728bbc40169d2e2425e84a80068270974be ]
    
    The driver allocates and registers two platform device structures during
    probe, but the devices were never deregistered on driver unbind.
    
    This results in a use-after-free on driver unbind as the device
    structures were allocated using devres and would be freed by driver
    core when remove() returns.
    
    Fix this by adding the missing deregistration calls to the remove()
    callback and failing probe on registration errors.
    
    Note that the platform device structures must be freed using a proper
    release callback to avoid leaking associated resources like device
    names.
    
    Fixes: 479f7a118105 ("[media] davinci: vpif: adaptions for DT support")
    Cc: stable@vger.kernel.org      # 4.12
    Cc: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Lad Prabhakar <prabhakar.csengg@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2823225fbba0e0b822767784139c04b4a773fe15
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Jan 24 18:29:52 2022 +0100

    media: omap3isp: Use struct_group() for memcpy() region
    
    [ Upstream commit d4568fc8525897e683983806f813be1ae9eedaed ]
    
    In preparation for FORTIFY_SOURCE performing compile-time and run-time
    field bounds checking for memcpy(), memmove(), and memset(), avoid
    intentionally writing across neighboring fields. Wrap the target region
    in struct_group(). This additionally fixes a theoretical misalignment
    of the copy (since the size of "buf" changes between 64-bit and 32-bit,
    but this is likely never built for 64-bit).
    
    FWIW, I think this code is totally broken on 64-bit (which appears to
    not be a "real" build configuration): it would either always fail (with
    an uninitialized data->buf_size) or would cause corruption in userspace
    due to the copy_to_user() in the call path against an uninitialized
    data->buf value:
    
    omap3isp_stat_request_statistics_time32(...)
        struct omap3isp_stat_data data64;
        ...
        omap3isp_stat_request_statistics(stat, &data64);
    
    int omap3isp_stat_request_statistics(struct ispstat *stat,
                                         struct omap3isp_stat_data *data)
        ...
        buf = isp_stat_buf_get(stat, data);
    
    static struct ispstat_buffer *isp_stat_buf_get(struct ispstat *stat,
                                                   struct omap3isp_stat_data *data)
    ...
        if (buf->buf_size > data->buf_size) {
                ...
                return ERR_PTR(-EINVAL);
        }
        ...
        rval = copy_to_user(data->buf,
                            buf->virt_addr,
                            buf->buf_size);
    
    Regardless, additionally initialize data64 to be zero-filled to avoid
    undefined behavior.
    
    Link: https://lore.kernel.org/lkml/20211215220505.GB21862@embeddedor
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Fixes: 378e3f81cb56 ("media: omap3isp: support 64-bit version of omap3isp_stat_data")
    Cc: stable@vger.kernel.org
    Reviewed-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d57ab893cdf8046cbe4d49746f9418020f788b1f
Author: Kees Cook <keescook@chromium.org>
Date:   Mon May 17 20:01:15 2021 -0700

    stddef: Introduce struct_group() helper macro
    
    [ Upstream commit 50d7bd38c3aafc4749e05e8d7fcb616979143602 ]
    
    Kernel code has a regular need to describe groups of members within a
    structure usually when they need to be copied or initialized separately
    from the rest of the surrounding structure. The generally accepted design
    pattern in C is to use a named sub-struct:
    
            struct foo {
                    int one;
                    struct {
                            int two;
                            int three, four;
                    } thing;
                    int five;
            };
    
    This would allow for traditional references and sizing:
    
            memcpy(&dst.thing, &src.thing, sizeof(dst.thing));
    
    However, doing this would mean that referencing struct members enclosed
    by such named structs would always require including the sub-struct name
    in identifiers:
    
            do_something(dst.thing.three);
    
    This has tended to be quite inflexible, especially when such groupings
    need to be added to established code which causes huge naming churn.
    Three workarounds exist in the kernel for this problem, and each have
    other negative properties.
    
    To avoid the naming churn, there is a design pattern of adding macro
    aliases for the named struct:
    
            #define f_three thing.three
    
    This ends up polluting the global namespace, and makes it difficult to
    search for identifiers.
    
    Another common work-around in kernel code avoids the pollution by avoiding
    the named struct entirely, instead identifying the group's boundaries using
    either a pair of empty anonymous structs of a pair of zero-element arrays:
    
            struct foo {
                    int one;
                    struct { } start;
                    int two;
                    int three, four;
                    struct { } finish;
                    int five;
            };
    
            struct foo {
                    int one;
                    int start[0];
                    int two;
                    int three, four;
                    int finish[0];
                    int five;
            };
    
    This allows code to avoid needing to use a sub-struct named for member
    references within the surrounding structure, but loses the benefits of
    being able to actually use such a struct, making it rather fragile. Using
    these requires open-coded calculation of sizes and offsets. The efforts
    made to avoid common mistakes include lots of comments, or adding various
    BUILD_BUG_ON()s. Such code is left with no way for the compiler to reason
    about the boundaries (e.g. the "start" object looks like it's 0 bytes
    in length), making bounds checking depend on open-coded calculations:
    
            if (length > offsetof(struct foo, finish) -
                         offsetof(struct foo, start))
                    return -EINVAL;
            memcpy(&dst.start, &src.start, offsetof(struct foo, finish) -
                                           offsetof(struct foo, start));
    
    However, the vast majority of places in the kernel that operate on
    groups of members do so without any identification of the grouping,
    relying either on comments or implicit knowledge of the struct contents,
    which is even harder for the compiler to reason about, and results in
    even more fragile manual sizing, usually depending on member locations
    outside of the region (e.g. to copy "two" and "three", use the start of
    "four" to find the size):
    
            BUILD_BUG_ON((offsetof(struct foo, four) <
                          offsetof(struct foo, two)) ||
                         (offsetof(struct foo, four) <
                          offsetof(struct foo, three));
            if (length > offsetof(struct foo, four) -
                         offsetof(struct foo, two))
                    return -EINVAL;
            memcpy(&dst.two, &src.two, length);
    
    In order to have a regular programmatic way to describe a struct
    region that can be used for references and sizing, can be examined for
    bounds checking, avoids forcing the use of intermediate identifiers,
    and avoids polluting the global namespace, introduce the struct_group()
    macro. This macro wraps the member declarations to create an anonymous
    union of an anonymous struct (no intermediate name) and a named struct
    (for references and sizing):
    
            struct foo {
                    int one;
                    struct_group(thing,
                            int two;
                            int three, four;
                    );
                    int five;
            };
    
            if (length > sizeof(src.thing))
                    return -EINVAL;
            memcpy(&dst.thing, &src.thing, length);
            do_something(dst.three);
    
    There are some rare cases where the resulting struct_group() needs
    attributes added, so struct_group_attr() is also introduced to allow
    for specifying struct attributes (e.g. __align(x) or __packed).
    Additionally, there are places where such declarations would like to
    have the struct be tagged, so struct_group_tagged() is added.
    
    Given there is a need for a handful of UAPI uses too, the underlying
    __struct_group() macro has been defined in UAPI so it can be used there
    too.
    
    To avoid confusing scripts/kernel-doc, hide the macro from its struct
    parsing.
    
    Co-developed-by: Keith Packard <keithp@keithp.com>
    Signed-off-by: Keith Packard <keithp@keithp.com>
    Acked-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Link: https://lore.kernel.org/lkml/20210728023217.GC35706@embeddedor
    Enhanced-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Link: https://lore.kernel.org/lkml/41183a98-bdb9-4ad6-7eab-5a7292a6df84@rasmusvillemoes.dk
    Enhanced-by: Dan Williams <dan.j.williams@intel.com>
    Link: https://lore.kernel.org/lkml/1d9a2e6df2a9a35b2cdd50a9a68cac5991e7e5f0.camel@intel.com
    Enhanced-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://lore.kernel.org/lkml/YQKa76A6XuFqgM03@phenom.ffwll.local
    Acked-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af9452dfdba4bf7359ef7645eee2d243a1df0649
Author: Tejun Heo <tj@kernel.org>
Date:   Sun Mar 13 21:15:02 2022 -1000

    block: fix rq-qos breakage from skipping rq_qos_done_bio()
    
    [ Upstream commit aa1b46dcdc7baaf5fec0be25782ef24b26aa209e ]
    
    a647a524a467 ("block: don't call rq_qos_ops->done_bio if the bio isn't
    tracked") made bio_endio() skip rq_qos_done_bio() if BIO_TRACKED is not set.
    While this fixed a potential oops, it also broke blk-iocost by skipping the
    done_bio callback for merged bios.
    
    Before, whether a bio goes through rq_qos_throttle() or rq_qos_merge(),
    rq_qos_done_bio() would be called on the bio on completion with BIO_TRACKED
    distinguishing the former from the latter. rq_qos_done_bio() is not called
    for bios which wenth through rq_qos_merge(). This royally confuses
    blk-iocost as the merged bios never finish and are considered perpetually
    in-flight.
    
    One reliably reproducible failure mode is an intermediate cgroup geting
    stuck active preventing its children from being activated due to the
    leaf-only rule, leading to loss of control. The following is from
    resctl-bench protection scenario which emulates isolating a web server like
    workload from a memory bomb run on an iocost configuration which should
    yield a reasonable level of protection.
    
      # cat /sys/block/nvme2n1/device/model
      Samsung SSD 970 PRO 512GB
      # cat /sys/fs/cgroup/io.cost.model
      259:0 ctrl=user model=linear rbps=834913556 rseqiops=93622 rrandiops=102913 wbps=618985353 wseqiops=72325 wrandiops=71025
      # cat /sys/fs/cgroup/io.cost.qos
      259:0 enable=1 ctrl=user rpct=95.00 rlat=18776 wpct=95.00 wlat=8897 min=60.00 max=100.00
      # resctl-bench -m 29.6G -r out.json run protection::scenario=mem-hog,loops=1
      ...
      Memory Hog Summary
      ==================
    
      IO Latency: R p50=242u:336u/2.5m p90=794u:1.4m/7.5m p99=2.7m:8.0m/62.5m max=8.0m:36.4m/350m
                  W p50=221u:323u/1.5m p90=709u:1.2m/5.5m p99=1.5m:2.5m/9.5m max=6.9m:35.9m/350m
    
      Isolation and Request Latency Impact Distributions:
    
                    min   p01   p05   p10   p25   p50   p75   p90   p95   p99   max  mean stdev
      isol%       15.90 15.90 15.90 40.05 57.24 59.07 60.01 74.63 74.63 90.35 90.35 58.12 15.82
      lat-imp%        0     0     0     0     0  4.55 14.68 15.54 233.5 548.1 548.1 53.88 143.6
    
      Result: isol=58.12:15.82% lat_imp=53.88%:143.6 work_csv=100.0% missing=3.96%
    
    The isolation result of 58.12% is close to what this device would show
    without any IO control.
    
    Fix it by introducing a new flag BIO_QOS_MERGED to mark merged bios and
    calling rq_qos_done_bio() on them too. For consistency and clarity, rename
    BIO_TRACKED to BIO_QOS_THROTTLED. The flag checks are moved into
    rq_qos_done_bio() so that it's next to the code paths that set the flags.
    
    With the patch applied, the above same benchmark shows:
    
      # resctl-bench -m 29.6G -r out.json run protection::scenario=mem-hog,loops=1
      ...
      Memory Hog Summary
      ==================
    
      IO Latency: R p50=123u:84.4u/985u p90=322u:256u/2.5m p99=1.6m:1.4m/9.5m max=11.1m:36.0m/350m
                  W p50=429u:274u/995u p90=1.7m:1.3m/4.5m p99=3.4m:2.7m/11.5m max=7.9m:5.9m/26.5m
    
      Isolation and Request Latency Impact Distributions:
    
                    min   p01   p05   p10   p25   p50   p75   p90   p95   p99   max  mean stdev
      isol%       84.91 84.91 89.51 90.73 92.31 94.49 96.36 98.04 98.71 100.0 100.0 94.42  2.81
      lat-imp%        0     0     0     0     0  2.81  5.73 11.11 13.92 17.53 22.61  4.10  4.68
    
      Result: isol=94.42:2.81% lat_imp=4.10%:4.68 work_csv=58.34% missing=0%
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: a647a524a467 ("block: don't call rq_qos_ops->done_bio if the bio isn't tracked")
    Cc: stable@vger.kernel.org # v5.15+
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/Yi7rdrzQEHjJLGKB@slm.duckdns.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13141cceadd07252880caea92b4617eed19c11cc
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Oct 15 20:06:18 2021 -0600

    block: only mark bio as tracked if it really is tracked
    
    [ Upstream commit 90b8faa0e8de1b02b619fb33f6c6e1e13e7d1d70 ]
    
    We set BIO_TRACKED unconditionally when rq_qos_throttle() is called, even
    though we may not even have an rq_qos handler. Only mark it as TRACKED if
    it really is potentially tracked.
    
    This saves considerable time for the case where the bio isn't tracked:
    
         2.64%     -1.65%  [kernel.vmlinux]  [k] bio_endio
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb79d1353cd0f2c04e1fc6311d7ce1d40a69b790
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Thu Oct 14 15:03:28 2021 +0100

    block: use bdev_get_queue() in bio.c
    
    [ Upstream commit 3caee4634be68e755d2fb130962f1623661dbd5b ]
    
    Convert bdev->bd_disk->queue to bdev_get_queue(), it's uses a cached
    queue pointer and so is faster.
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/85c36ea784d285a5075baa10049e6b59e15fb484.1634219547.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df1ec53252d5b5b26ea49e30438741c9a6d89857
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Mar 20 13:08:38 2022 -0600

    io_uring: ensure that fsnotify is always called
    
    [ Upstream commit f63cf5192fe3418ad5ae1a4412eba5694b145f79 ]
    
    Ensure that we call fsnotify_modify() if we write a file, and that we
    do fsnotify_access() if we read it. This enables anyone using inotify
    on the file to get notified.
    
    Ditto for fallocate, ensure that fsnotify_modify() is called.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c82c94b0be70f1c56c8ef5c6cdd73d711e98066
Author: Max Gurtovoy <mgurtovoy@nvidia.com>
Date:   Wed Sep 1 16:14:34 2021 +0300

    virtio-blk: avoid preallocating big SGL for data
    
    [ Upstream commit 02746e26c39ee473b975e0f68d1295abc92672ed ]
    
    No need to pre-allocate a big buffer for the IO SGL anymore. If a device
    has lots of deep queues, preallocation for the sg list can consume
    substantial amounts of memory. For HW virtio-blk device, nr_hw_queues
    can be 64 or 128 and each queue's depth might be 128. This means the
    resulting preallocation for the data SGLs is big.
    
    Switch to runtime allocation for SGL for lists longer than 2 entries.
    This is the approach used by NVMe drivers so it should be reasonable for
    virtio block as well. Runtime SGL allocation has always been the case
    for the legacy I/O path so this is nothing new.
    
    The preallocated small SGL depends on SG_CHAIN so if the ARCH doesn't
    support SG_CHAIN, use only runtime allocation for the SGL.
    
    Re-organize the setup of the IO request to fit the new sg chain
    mechanism.
    
    No performance degradation was seen (fio libaio engine with 16 jobs and
    128 iodepth):
    
    IO size      IOPs Rand Read (before/after)         IOPs Rand Write (before/after)
    --------     ---------------------------------    ----------------------------------
    512B          318K/316K                                    329K/325K
    
    4KB           323K/321K                                    353K/349K
    
    16KB          199K/208K                                    250K/275K
    
    128KB         36K/36.1K                                    39.2K/41.7K
    
    Signed-off-by: Max Gurtovoy <mgurtovoy@nvidia.com>
    Reviewed-by: Israel Rukshin <israelr@nvidia.com>
    Link: https://lore.kernel.org/r/20210901131434.31158-1-mgurtovoy@nvidia.com
    Reviewed-by: Feng Li <lifeng1519@gmail.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Tested-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de> # kconfig fixups
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32ac44b70e171e3478549758a6b3c5f66e2ae474
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Thu Feb 24 22:23:58 2022 -0800

    ibmvnic: Allow queueing resets during probe
    
    [ Upstream commit fd98693cb0721317f27341951593712c580c36a1 ]
    
    We currently don't allow queuing resets when adapter is in VNIC_PROBING
    state - instead we throw away the reset and return EBUSY. The reasoning
    is probably that during ibmvnic_probe() the ibmvnic_adapter itself is
    being initialized so performing a reset during this time can lead us to
    accessing fields in the ibmvnic_adapter that are not fully initialized.
    A review of the code shows that all the adapter state neede to process a
    reset is initialized before registering the CRQ so that should no longer
    be a concern.
    
    Further the expectation is that if we do get a reset (transport event)
    during probe, the do..while() loop in ibmvnic_probe() will handle this
    by reinitializing the CRQ.
    
    While that is true to some extent, it is possible that the reset might
    occur _after_ the CRQ is registered and CRQ_INIT message was exchanged
    but _before_ the adapter state is set to VNIC_PROBED. As mentioned above,
    such a reset will be thrown away. While the client assumes that the
    adapter is functional, the vnic server will wait for the client to reinit
    the adapter. This disconnect between the two leaves the adapter down
    needing manual intervention.
    
    Because ibmvnic_probe() has other work to do after initializing the CRQ
    (such as registering the netdev at a minimum) and because the reset event
    can occur at any instant after the CRQ is initialized, there will always
    be a window between initializing the CRQ and considering the adapter
    ready for resets (ie state == PROBED).
    
    So rather than discarding resets during this window, allow queueing them
    - but only process them after the adapter is fully initialized.
    
    To do this, introduce a new completion state ->probe_done and have the
    reset worker thread wait on this before processing resets.
    
    This change brings up two new situations in or just after ibmvnic_probe().
    First after one or more resets were queued, we encounter an error and
    decide to retry the initialization.  At that point the queued resets are
    no longer relevant since we could be talking to a new vnic server. So we
    must purge/flush the queued resets before restarting the initialization.
    As a side note, since we are still in the probing stage and we have not
    registered the netdev, it will not be CHANGE_PARAM reset.
    
    Second this change opens up a potential race between the worker thread
    in __ibmvnic_reset(), the tasklet and the ibmvnic_open() due to the
    following sequence of events:
    
            1. Register CRQ
            2. Get transport event before CRQ_INIT completes.
            3. Tasklet schedules reset:
                    a) add rwi to list
                    b) schedule_work() to start worker thread which runs
                       and waits for ->probe_done.
            4. ibmvnic_probe() decides to retry, purges rwi_list
            5. Re-register crq and this time rest of probe succeeds - register
               netdev and complete(->probe_done).
            6. Worker thread resumes in __ibmvnic_reset() from 3b.
            7. Worker thread sets ->resetting bit
            8. ibmvnic_open() comes in, notices ->resetting bit, sets state
               to IBMVNIC_OPEN and returns early expecting worker thread to
               finish the open.
            9. Worker thread finds rwi_list empty and returns without
               opening the interface.
    
    If this happens, the ->ndo_open() call is effectively lost and the
    interface remains down. To address this, ensure that ->rwi_list is
    not empty before setting the ->resetting  bit. See also comments in
    __ibmvnic_reset().
    
    Fixes: 6a2fb0e99f9c ("ibmvnic: driver initialization for kdump/kexec")
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85996ef1795206c82f7c66f38cce36215d8f860f
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Thu Feb 24 22:23:57 2022 -0800

    ibmvnic: clear fop when retrying probe
    
    [ Upstream commit f628ad531b4f34fdba0984255b4a2850dd369513 ]
    
    Clear ->failover_pending flag that may have been set in the previous
    pass of registering CRQ. If we don't clear, a subsequent ibmvnic_open()
    call would be misled into thinking a failover is pending and assuming
    that the reset worker thread would open the adapter. If this pass of
    registering the CRQ succeeds (i.e there is no transport event), there
    wouldn't be a reset worker thread.
    
    This would leave the adapter unconfigured and require manual intervention
    to bring it up during boot.
    
    Fixes: 5a18e1e0c193 ("ibmvnic: Fix failover case for non-redundant configuration")
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fe1439ef2e0ff762baf9d5af547cdc1c76bcdea
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Thu Feb 24 22:23:56 2022 -0800

    ibmvnic: init init_done_rc earlier
    
    [ Upstream commit ae16bf15374d8b055e040ac6f3f1147ab1c9bb7d ]
    
    We currently initialize the ->init_done completion/return code fields
    before issuing a CRQ_INIT command. But if we get a transport event soon
    after registering the CRQ the taskslet may already have recorded the
    completion and error code. If we initialize here, we might overwrite/
    lose that and end up issuing the CRQ_INIT only to timeout later.
    
    If that timeout happens during probe, we will leave the adapter in the
    DOWN state rather than retrying to register/init the CRQ.
    
    Initialize the completion before registering the CRQ so we don't lose
    the notification.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a29c71f3a4b17ce49feacc6e610e953ef70d7dfc
Author: Alexander Egorenkov <egorenar@linux.ibm.com>
Date:   Wed Feb 9 11:25:09 2022 +0100

    s390/setup: preserve memory at OLDMEM_BASE and OLDMEM_SIZE
    
    [ Upstream commit 6b4b54c7ca347bcb4aa7a3cc01aa16e84ac7fbe4 ]
    
    We need to preserve the values at OLDMEM_BASE and OLDMEM_SIZE which are
    used by zgetdump in case when kdump crashes. In that case zgetdump will
    attempt to read OLDMEM_BASE and OLDMEM_SIZE in order to find out where
    the memory range [0 - OLDMEM_SIZE] belonging to the production kernel is.
    
    Fixes: f1a546947431 ("s390/setup: don't reserve memory that occupied decompressor's head")
    Cc: stable@vger.kernel.org # 5.15+
    Signed-off-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Acked-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06de5cf61538eca18aa2baccf65fa175e07c58d9
Author: Alexander Gordeev <agordeev@linux.ibm.com>
Date:   Thu Jan 21 13:06:02 2021 +0100

    s390/setup: use physical pointers for memblock_reserve()
    
    [ Upstream commit 04f11ed7d8e018e1f01ebda5814ddfeb3a1e6ae1 ]
    
    memblock_reserve() function accepts physcal address of a memory
    block to be reserved, but provided with virtual memory pointers.
    
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ed826c949cf3cb38aba063a55be260d52c0ce55
Author: Alexander Gordeev <agordeev@linux.ibm.com>
Date:   Mon Sep 27 14:18:26 2021 +0200

    s390/boot: allocate amode31 section in decompressor
    
    [ Upstream commit e3ec8e0f5711d73f7e5d5c3cffdf4fad4f1487b9 ]
    
    The memory for amode31 section is allocated from the decompressed
    kernel. Instead, allocate that memory from the decompressor. This
    is a prerequisite to allow initialization of the virtual memory
    before the decompressed kernel takes over.
    
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa1f19606558a26086d2dd71a8ffc1327ccd451e
Author: Florian Westphal <fw@strlen.de>
Date:   Sat Jan 29 17:13:23 2022 +0100

    netfilter: nft_payload: don't allow th access for fragments
    
    [ Upstream commit a9e8503def0fd4ed89ade1f61c315f904581d439 ]
    
    Loads relative to ->thoff naturally expect that this points to the
    transport header, but this is only true if pkt->fragoff == 0.
    
    This has little effect for rulesets with connection tracking/nat because
    these enable ip defra. For other rulesets this prevents false matches.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5445819e76a6fbcb9a848efd5569ea27e547f6ab
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Oct 28 22:15:00 2021 +0200

    netfilter: nft_payload: support for inner header matching / mangling
    
    [ Upstream commit c46b38dc8743535e686b911d253a844f0bd50ead ]
    
    Allow to match and mangle on inner headers / payload data after the
    transport header. There is a new field in the pktinfo structure that
    stores the inner header offset which is calculated only when requested.
    Only TCP and UDP supported at this stage.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d9bd7e6ac3af627df314b0800b778b7912576b7
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Oct 28 21:47:55 2021 +0200

    netfilter: nf_tables: convert pktinfo->tprot_set to flags field
    
    [ Upstream commit b5bdc6f9c24db9a0adf8bd00c0e935b184654f00 ]
    
    Generalize boolean field to store more flags on the pktinfo structure.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25ca15fed4bb83cf3ed1bd44dd18c790c3eba453
Author: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
Date:   Wed Jan 26 12:03:25 2022 +0200

    ASoC: rt5682: Fix deadlock on resume
    
    [ Upstream commit 4045daf0fa87846a27f56329fddad2deeb5ca354 ]
    
    On resume from suspend the following chain of events can happen:
    A rt5682_resume() -> mod_delayed_work() for jack_detect_work
    B DAPM sequence starts ( DAPM is locked now)
    
    A1. rt5682_jack_detect_handler() scheduled
     - Takes both jdet_mutex and calibrate_mutex
     - Calls in to rt5682_headset_detect() which tries to take DAPM lock, it
       starts to wait for it as B path took it already.
    B1. DAPM sequence reaches the "HP Amp", rt5682_hp_event() tries to take
        the jdet_mutex, but it is locked in A1, so it waits.
    
    Deadlock.
    
    To solve the deadlock, drop the jdet_mutex, use the jack_detect_work to do
    the jack removal handling, move the dapm lock up one level to protect the
    most of the rt5682_jack_detect_handler(), but not the jack reporting as it
    might trigger a DAPM sequence.
    The rt5682_headset_detect() can be changed to static as well.
    
    Fixes: 8deb34a90f063 ("ASoC: rt5682: fix the wrong jack type detected")
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Link: https://lore.kernel.org/r/20220126100325.16513-1-peter.ujfalusi@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f536e0df64b8c3095b3575ea114d07b0d0e8627c
Author: Derek Fang <derek.fang@realtek.com>
Date:   Tue Nov 9 17:54:50 2021 +0800

    ASoC: rt5682: Re-detect the combo jack after resuming
    
    [ Upstream commit 2cd9b0ef82d936623d789bb3fbb6fcf52c500367 ]
    
    Sometimes, end-users change the jack type under suspending,
    so it needs to re-detect the combo jack type after resuming to
    avoid any unexpected behaviors.
    
    Signed-off-by: Derek Fang <derek.fang@realtek.com>
    Link: https://lore.kernel.org/r/20211109095450.12950-2-derek.fang@realtek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b72179e53bda916363d513bd1b3c0091c721df7
Author: Derek Fang <derek.fang@realtek.com>
Date:   Tue Nov 9 17:54:49 2021 +0800

    ASoC: rt5682: Avoid the unexpected IRQ event during going to suspend
    
    [ Upstream commit a3774a2a6544a7a4a85186e768afc07044aa507f ]
    
    When the system suspends, the codec driver will set SAR to
    power saving mode if a headset is plugged in.
    There is a chance to generate an unexpected IRQ, and leads to
    issues after resuming such as noise from OMTP type headsets.
    
    Signed-off-by: Derek Fang <derek.fang@realtek.com>
    Link: https://lore.kernel.org/r/20211109095450.12950-1-derek.fang@realtek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 301ebfa578e35c7ca1b529044d038121a0b2b61b
Author: Roi Dayan <roid@nvidia.com>
Date:   Mon Jan 17 15:00:30 2022 +0200

    net/mlx5e: TC, Reject rules with forward and drop actions
    
    [ Upstream commit 5623ef8a118838aae65363750dfafcba734dc8cb ]
    
    Such rules are redundant but allowed and passed to the driver.
    The driver does not support offloading such rules so return an error.
    
    Fixes: 03a9d11e6eeb ("net/mlx5e: Add TC drop and mirred/redirect action parsing for SRIOV offloads")
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d1ac7f882dabb7b67cb71ba15c66fdfd7160399
Author: Roi Dayan <roid@nvidia.com>
Date:   Tue Jan 4 10:38:02 2022 +0200

    net/mlx5e: TC, Reject rules with drop and modify hdr action
    
    [ Upstream commit a2446bc77a16cefd27de712d28af2396d6287593 ]
    
    This kind of action is not supported by firmware and generates a
    syndrome.
    
    kernel: mlx5_core 0000:08:00.0: mlx5_cmd_check:777:(pid 102063): SET_FLOW_TABLE_ENTRY(0x936) op_mod(0x0) failed, status bad parameter(0x3), syndrome (0x8708c3)
    
    Fixes: d7e75a325cb2 ("net/mlx5e: Add offloading of E-Switch TC pedit (header re-write) actions")
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa944fefb39647a4118d890e7f18cce525f68fc4
Author: Roi Dayan <roid@nvidia.com>
Date:   Sun Aug 15 12:53:13 2021 +0300

    net/mlx5e: Split actions_match_supported() into a sub function
    
    [ Upstream commit 9c1d3511a2c2fd30c991a20c670991ece4ef27c1 ]
    
    There will probably be more checks, some for nic flows, some for fdb
    flows and some are shared checks. Split it for fdb and nic to avoid
    the function getting too big.
    
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c36a47a3b409faadb3db1ef6a472dd456efa81
Author: Roi Dayan <roid@nvidia.com>
Date:   Thu Aug 12 09:38:32 2021 +0300

    net/mlx5e: Check action fwd/drop flag exists also for nic flows
    
    [ Upstream commit 6b50cf45b6a0e99f3cab848a72ecca8da56b7460 ]
    
    The driver should add offloaded rules with either a fwd or drop action.
    The check existed in parsing fdb flows but not when parsing nic flows.
    Move the test into actions_match_supported() which is called for
    checking nic flows and fdb flows.
    
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 910349170ac0b9685c82d7d4d0e79b97164dd364
Author: Palmer Dabbelt <palmer@rivosinc.com>
Date:   Fri Nov 19 08:44:02 2021 -0800

    RISC-V: defconfigs: Set CONFIG_FB=y, for FB console
    
    [ Upstream commit 3d12b634fe8206ea974c6061a3f3eea529ffbc48 ]
    
    We have CONFIG_FRAMEBUFFER_CONSOLE=y in the defconfigs, but that depends
    on CONFIG_FB so it's not actually getting set.  I'm assuming most users
    on real systems want a framebuffer console, so this enables CONFIG_FB to
    allow that to take effect.
    
    Fixes: 33c57c0d3c67 ("RISC-V: Add a basic defconfig")
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49ae6abd617ff8c674bd22202b33ea47d185ed01
Author: Heinrich Schuchardt <heinrich.schuchardt@canonical.com>
Date:   Tue Oct 12 18:46:58 2021 +0200

    riscv: defconfig: enable DRM_NOUVEAU
    
    [ Upstream commit ffa7a9141bb70702744a312f904b190ca064bdd7 ]
    
    Both RADEON and NOUVEAU graphics cards are supported on RISC-V. Enabling
    the one and not the other does not make sense.
    
    As typically at most one of RADEON, NOUVEAU, or VIRTIO GPU support will be
    needed DRM drivers should be compiled as modules.
    
    Signed-off-by: Heinrich Schuchardt <heinrich.schuchardt@canonical.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit feacd73fd8b2ef6fa48655af1e56ab95140bac50
Author: Hou Tao <houtao1@huawei.com>
Date:   Fri Dec 31 23:10:18 2021 +0800

    bpf, arm64: Use emit_addr_mov_i64() for BPF_PSEUDO_FUNC
    
    [ Upstream commit e4a41c2c1fa916547e63440c73a51a5eb06247af ]
    
    The following error is reported when running "./test_progs -t for_each"
    under arm64:
    
      bpf_jit: multi-func JIT bug 58 != 56
      [...]
      JIT doesn't support bpf-to-bpf calls
    
    The root cause is the size of BPF_PSEUDO_FUNC instruction increases
    from 2 to 3 after the address of called bpf-function is settled and
    there are two bpf-to-bpf calls in test_pkt_access. The generated
    instructions are shown below:
    
      0x48:  21 00 C0 D2    movz x1, #0x1, lsl #32
      0x4c:  21 00 80 F2    movk x1, #0x1
    
      0x48:  E1 3F C0 92    movn x1, #0x1ff, lsl #32
      0x4c:  41 FE A2 F2    movk x1, #0x17f2, lsl #16
      0x50:  81 70 9F F2    movk x1, #0xfb84
    
    Fixing it by using emit_addr_mov_i64() for BPF_PSEUDO_FUNC, so
    the size of jited image will not change.
    
    Fixes: 69c087ba6225 ("bpf: Add bpf_for_each_map_elem() helper")
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20211231151018.3781550-1-houtao1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d53c8fe9ee2919a1b82c91b46ec74bfd9caa4a64
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Fri Nov 5 18:40:14 2021 -0700

    bpf: Stop caching subprog index in the bpf_pseudo_func insn
    
    commit 3990ed4c426652fcd469f8c9dc08156294b36c28 upstream.
    
    This patch is to fix an out-of-bound access issue when jit-ing the
    bpf_pseudo_func insn (i.e. ld_imm64 with src_reg == BPF_PSEUDO_FUNC)
    
    In jit_subprog(), it currently reuses the subprog index cached in
    insn[1].imm.  This subprog index is an index into a few array related
    to subprogs.  For example, in jit_subprog(), it is an index to the newly
    allocated 'struct bpf_prog **func' array.
    
    The subprog index was cached in insn[1].imm after add_subprog().  However,
    this could become outdated (and too big in this case) if some subprogs
    are completely removed during dead code elimination (in
    adjust_subprog_starts_after_remove).  The cached index in insn[1].imm
    is not updated accordingly and causing out-of-bound issue in the later
    jit_subprog().
    
    Unlike bpf_pseudo_'func' insn, the current bpf_pseudo_'call' insn
    is handling the DCE properly by calling find_subprog(insn->imm) to
    figure out the index instead of caching the subprog index.
    The existing bpf_adj_branches() will adjust the insn->imm
    whenever insn is added or removed.
    
    Instead of having two ways handling subprog index,
    this patch is to make bpf_pseudo_func works more like
    bpf_pseudo_call.
    
    First change is to stop caching the subprog index result
    in insn[1].imm after add_subprog().  The verification
    process will use find_subprog(insn->imm) to figure
    out the subprog index.
    
    Second change is in bpf_adj_branches() and have it to
    adjust the insn->imm for the bpf_pseudo_func insn also
    whenever insn is added or removed.
    
    Third change is in jit_subprog().  Like the bpf_pseudo_call handling,
    bpf_pseudo_func temporarily stores the find_subprog() result
    in insn->off.  It is fine because the prog's insn has been finalized
    at this point.  insn->off will be reset back to 0 later to avoid
    confusing the userspace prog dump tool.
    
    Fixes: 69c087ba6225 ("bpf: Add bpf_for_each_map_elem() helper")
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20211106014014.651018-1-kafai@fb.com
    Cc: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3688bfa5af4557e617f5da2373ccf32c999311e
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Tue Dec 21 14:57:09 2021 +0100

    mt76: mt7921: fix a possible race enabling/disabling runtime-pm
    
    [ Upstream commit d430dffbe9dd30759f3c64b65bf85b0245c8d8ab ]
    
    Fix a possible race enabling/disabling runtime-pm between
    mt7921_pm_set() and mt7921_poll_rx() since mt7921_pm_wake_work()
    always schedules rx-napi callback and it will trigger
    mt7921_pm_power_save_work routine putting chip to in low-power state
    during mt7921_pm_set processing.
    
    Suggested-by: Deren Wu <deren.wu@mediatek.com>
    Tested-by: Deren Wu <deren.wu@mediatek.com>
    Fixes: 1d8efc741df8 ("mt76: mt7921: introduce Runtime PM support")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/0f3e075a2033dc05f09dab4059e5be8cbdccc239.1640094847.git.lorenzo@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 281a194f5a67b3b04f7fb1d2179ac4af358a1439
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Mon Aug 9 12:37:22 2021 +0200

    mt76: mt7921: introduce mt7921_mcu_set_beacon_filter utility routine
    
    [ Upstream commit 890809ca1986e63d29dd1591090af67b655ed89c ]
    
    Introduce mt7921_mcu_set_beacon_filter utility routine in order to
    remove duplicated code for hw beacon filtering.
    Move mt7921_pm_interface_iter in debugfs since it is just used there.
    Make the following routine static:
    - mt7921_pm_interface_iter
    - mt7921_mcu_uni_bss_bcnft
    - mt7921_mcu_set_bss_pm
    
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09aee8375b0cc8e1cb54fd61e1b3764b99d96804
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Mon Aug 9 10:38:03 2021 +0200

    mt76: mt7921: get rid of mt7921_mac_set_beacon_filter
    
    [ Upstream commit b30363102a4122f6eed37927b64a2c7ac70b8859 ]
    
    Remove mt7921_mac_set_beacon_filter routine since it is no longer used.
    
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9846b9e4bba796564f90f7c4555f429a5395bee6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Nov 28 20:00:28 2021 +0100

    platform/x86: wmi: Fix driver->notify() vs ->probe() race
    
    [ Upstream commit 9918878676a5f9e99b98679f04b9e6c0f5426b0a ]
    
    The driver core sets struct device->driver before calling out
    to the bus' probe() method, this leaves a window where an ACPI
    notify may happen on the WMI object before the driver's
    probe() method has completed running, causing e.g. the
    driver's notify() callback to get called with drvdata
    not yet being set leading to a NULL pointer deref.
    
    At a check for this to the WMI core, ensuring that the notify()
    callback is not called before the driver is ready.
    
    Fixes: 1686f5444546 ("platform/x86: wmi: Incorporate acpi_install_notify_handler")
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20211128190031.405620-2-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b53562319894fad2b13883562af316c6efaa48a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Nov 28 20:00:27 2021 +0100

    platform/x86: wmi: Replace read_takes_no_args with a flags field
    
    [ Upstream commit a90b38c58667142ecff2521481ed44286d46b140 ]
    
    Replace the wmi_block.read_takes_no_args bool field with
    an unsigned long flags field, used together with test_bit()
    and friends.
    
    This is a preparation patch for fixing a driver->notify() vs ->probe()
    race, which requires atomic flag handling.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20211128190031.405620-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 789382ce73596e548c4843082f69db149493fdaf
Author: Barnabás Pőcze <pobrn@protonmail.com>
Date:   Sat Sep 4 17:56:32 2021 +0000

    platform/x86: wmi: introduce helper to convert driver to WMI driver
    
    [ Upstream commit e7b2e33449e22fdbaa0247d96f31543affe6163d ]
    
    Introduce a helper function which wraps the appropriate
    `container_of()` macro invocation to convert
    a `struct device_driver` to `struct wmi_driver`.
    
    Signed-off-by: Barnabás Pőcze <pobrn@protonmail.com>
    Link: https://lore.kernel.org/r/20210904175450.156801-27-pobrn@protonmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9a101842420fccd73f9831aa375551449c084be
Author: Shai Malin <smalin@marvell.com>
Date:   Mon Sep 13 10:50:24 2021 +0300

    qed: Improve the stack space of filter_config()
    
    [ Upstream commit f55e36d5ab76c3097ff36ecea60b91c6b0d80fc8 ]
    
    As it was reported and discussed in: https://lore.kernel.org/lkml/CAHk-=whF9F89vsfH8E9TGc0tZA-yhzi2Di8wOtquNB5vRkFX5w@mail.gmail.com/
    This patch improves the stack space of qede_config_rx_mode() by
    splitting filter_config() to 3 functions and removing the
    union qed_filter_type_params.
    
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Shai Malin <smalin@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a29aec244ae88a54655d5c4886d7c43b6af401f
Author: Seevalamuthu Mariappan <quic_seevalam@quicinc.com>
Date:   Wed Nov 17 09:39:41 2021 +0200

    ath11k: add hw_param for wakeup_mhi
    
    [ Upstream commit 081e2d6476e30399433b509684d5da4d1844e430 ]
    
    Wakeup mhi is needed before pci_read/write only for QCA6390 and WCN6855. Since
    wakeup & release mhi is enabled for all hardwares, below mhi assert is seen in
    QCN9074 when doing 'rmmod ath11k_pci':
    
            Kernel panic - not syncing: dev_wake != 0
            CPU: 2 PID: 13535 Comm: procd Not tainted 4.4.60 #1
            Hardware name: Generic DT based system
            [<80316dac>] (unwind_backtrace) from [<80313700>] (show_stack+0x10/0x14)
            [<80313700>] (show_stack) from [<805135dc>] (dump_stack+0x7c/0x9c)
            [<805135dc>] (dump_stack) from [<8032136c>] (panic+0x84/0x1f8)
            [<8032136c>] (panic) from [<80549b24>] (mhi_pm_disable_transition+0x3b8/0x5b8)
            [<80549b24>] (mhi_pm_disable_transition) from [<80549ddc>] (mhi_power_down+0xb8/0x100)
            [<80549ddc>] (mhi_power_down) from [<7f5242b0>] (ath11k_mhi_op_status_cb+0x284/0x3ac [ath11k_pci])
            [E][__mhi_device_get_sync] Did not enter M0 state, cur_state:RESET pm_state:SHUTDOWN Process
            [E][__mhi_device_get_sync] Did not enter M0 state, cur_state:RESET pm_state:SHUTDOWN Process
            [E][__mhi_device_get_sync] Did not enter M0 state, cur_state:RESET pm_state:SHUTDOWN Process
            [<7f5242b0>] (ath11k_mhi_op_status_cb [ath11k_pci]) from [<7f524878>] (ath11k_mhi_stop+0x10/0x20 [ath11k_pci])
            [<7f524878>] (ath11k_mhi_stop [ath11k_pci]) from [<7f525b94>] (ath11k_pci_power_down+0x54/0x90 [ath11k_pci])
            [<7f525b94>] (ath11k_pci_power_down [ath11k_pci]) from [<8056b2a8>] (pci_device_shutdown+0x30/0x44)
            [<8056b2a8>] (pci_device_shutdown) from [<805cfa0c>] (device_shutdown+0x124/0x174)
            [<805cfa0c>] (device_shutdown) from [<8033aaa4>] (kernel_restart+0xc/0x50)
            [<8033aaa4>] (kernel_restart) from [<8033ada8>] (SyS_reboot+0x178/0x1ec)
            [<8033ada8>] (SyS_reboot) from [<80301b80>] (ret_fast_syscall+0x0/0x34)
    
    Hence, disable wakeup/release mhi using hw_param for other hardwares.
    
    Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.5.0.1-01060-QCAHKSWPL_SILICONZ-1
    
    Fixes: a05bd8513335 ("ath11k: read and write registers below unwindowed address")
    Signed-off-by: Seevalamuthu Mariappan <quic_seevalam@quicinc.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1636702019-26142-1-git-send-email-quic_seevalam@quicinc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16b7cb2803bf088ed08e026f70fa9ac04f3c9800
Author: Andrew Gabbasov <andrew_gabbasov@mentor.com>
Date:   Wed Sep 22 13:48:30 2021 -0500

    memory: renesas-rpc-if: Avoid unaligned bus access for HyperFlash
    
    [ Upstream commit 1869023e24c0de73a160a424dac4621cefd628ae ]
    
    HyperFlash devices in Renesas SoCs use 2-bytes addressing, according
    to HW manual paragraph 62.3.3 (which officially describes Serial Flash
    access, but seems to be applicable to HyperFlash too). And 1-byte bus
    read operations to 2-bytes unaligned addresses in external address space
    read mode work incorrectly (returns the other byte from the same word).
    
    Function memcpy_fromio(), used by the driver to read data from the bus,
    in ARM64 architecture (to which Renesas cores belong) uses 8-bytes
    bus accesses for appropriate aligned addresses, and 1-bytes accesses
    for other addresses. This results in incorrect data read from HyperFlash
    in unaligned cases.
    
    This issue can be reproduced using something like the following commands
    (where mtd1 is a parition on Hyperflash storage, defined properly
    in a device tree):
    
    [Correct fragment, read from Hyperflash]
    
        root@rcar-gen3:~# dd if=/dev/mtd1 of=/tmp/zz bs=32 count=1
        root@rcar-gen3:~# hexdump -C /tmp/zz
        00000000  f4 03 00 aa f5 03 01 aa  f6 03 02 aa f7 03 03 aa  |................|
        00000010  00 00 80 d2 40 20 18 d5  00 06 81 d2 a0 18 a6 f2  |....@ ..........|
        00000020
    
    [Incorrect read of the same fragment: see the difference at offsets 8-11]
    
        root@rcar-gen3:~# dd if=/dev/mtd1 of=/tmp/zz bs=12 count=1
        root@rcar-gen3:~# hexdump -C /tmp/zz
        00000000  f4 03 00 aa f5 03 01 aa  03 03 aa aa              |............|
        0000000c
    
    Fix this issue by creating a local replacement of the copying function,
    that performs only properly aligned bus accesses, and is used for reading
    from HyperFlash.
    
    Fixes: ca7d8b980b67f ("memory: add Renesas RPC-IF driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Gabbasov <andrew_gabbasov@mentor.com>
    Link: https://lore.kernel.org/r/20210922184830.29147-1-andrew_gabbasov@mentor.com
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4ac45aff8d38c64104aec21c6529747d94ae75a
Author: Sean Young <sean@mess.org>
Date:   Tue Sep 14 16:57:46 2021 +0200

    media: ir_toy: prevent device from hanging during transmit
    
    [ Upstream commit 4114978dcd24e72415276bba60ff4ff355970bbc ]
    
    If the IR Toy is receiving IR while a transmit is done, it may end up
    hanging. We can prevent this from happening by re-entering sample mode
    just before issuing the transmit command.
    
    Link: https://github.com/bengtmartensson/HarcHardware/discussions/25
    
    Cc: stable@vger.kernel.org
    [mchehab: renamed: s/STATE_RESET/STATE_COMMAND_NO_RESP/ ]
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1716b0ff925fcf5b2fdbd49356105e72ff60966
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Jul 31 14:39:01 2021 +0200

    PCI: pciehp: Ignore Link Down/Up caused by error-induced Hot Reset
    
    [ Upstream commit ea401499e943c307e6d44af6c2b4e068643e7884 ]
    
    Stuart Hayes reports that an error handled by DPC at a Root Port results
    in pciehp gratuitously bringing down a subordinate hotplug port:
    
      RP -- UP -- DP -- UP -- DP (hotplug) -- EP
    
    pciehp brings the slot down because the Link to the Endpoint goes down.
    That is caused by a Hot Reset being propagated as a result of DPC.
    Per PCIe Base Spec 5.0, section 6.6.1 "Conventional Reset":
    
      For a Switch, the following must cause a hot reset to be sent on all
      Downstream Ports: [...]
    
      * The Data Link Layer of the Upstream Port reporting DL_Down status.
        In Switches that support Link speeds greater than 5.0 GT/s, the
        Upstream Port must direct the LTSSM of each Downstream Port to the
        Hot Reset state, but not hold the LTSSMs in that state. This permits
        each Downstream Port to begin Link training immediately after its
        hot reset completes. This behavior is recommended for all Switches.
    
      * Receiving a hot reset on the Upstream Port.
    
    Once DPC recovers, pcie_do_recovery() walks down the hierarchy and
    invokes pcie_portdrv_slot_reset() to restore each port's config space.
    At that point, a hotplug interrupt is signaled per PCIe Base Spec r5.0,
    section 6.7.3.4 "Software Notification of Hot-Plug Events":
    
      If the Port is enabled for edge-triggered interrupt signaling using
      MSI or MSI-X, an interrupt message must be sent every time the logical
      AND of the following conditions transitions from FALSE to TRUE: [...]
    
      * The Hot-Plug Interrupt Enable bit in the Slot Control register is
        set to 1b.
    
      * At least one hot-plug event status bit in the Slot Status register
        and its associated enable bit in the Slot Control register are both
        set to 1b.
    
    Prevent pciehp from gratuitously bringing down the slot by clearing the
    error-induced Data Link Layer State Changed event before restoring
    config space.  Afterwards, check whether the link has unexpectedly
    failed to retrain and synthesize a DLLSC event if so.
    
    Allow each pcie_port_service_driver (one of them being pciehp) to define
    a slot_reset callback and re-use the existing pm_iter() function to
    iterate over the callbacks.
    
    Thereby, the Endpoint driver remains bound throughout error recovery and
    may restore the device to working state.
    
    Surprise removal during error recovery is detected through a Presence
    Detect Changed event.  The hotplug port is expected to not signal that
    event as a result of a Hot Reset.
    
    The issue isn't DPC-specific, it also occurs when an error is handled by
    AER through aer_root_reset().  So while the issue was noticed only now,
    it's been around since 2006 when AER support was first introduced.
    
    [bhelgaas: drop PCI_ERROR_RECOVERY Kconfig, split pm_iter() rename to
    preparatory patch]
    Link: https://lore.kernel.org/linux-pci/08c046b0-c9f2-3489-eeef-7e7aca435bb9@gmail.com/
    Fixes: 6c2b374d7485 ("PCI-Express AER implemetation: AER core and aerdriver")
    Link: https://lore.kernel.org/r/251f4edcc04c14f873ff1c967bc686169cd07d2d.1627638184.git.lukas@wunner.de
    Reported-by: Stuart Hayes <stuart.w.hayes@gmail.com>
    Tested-by: Stuart Hayes <stuart.w.hayes@gmail.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org # v2.6.19+: ba952824e6c1: PCI/portdrv: Report reset for frozen channel
    Cc: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 006d00d826fb8ccc82db2168e949467fddafd944
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri Oct 15 13:58:40 2021 -0500

    PCI/portdrv: Rename pm_iter() to pcie_port_device_iter()
    
    [ Upstream commit 3134689f98f9e09004a4727370adc46e7635b4be ]
    
    Rename pm_iter() to pcie_port_device_iter() and make it visible outside
    CONFIG_PM and portdrv_core.c so it can be used for pciehp slot reset
    recovery.
    
    [bhelgaas: split into its own patch]
    Link: https://lore.kernel.org/linux-pci/08c046b0-c9f2-3489-eeef-7e7aca435bb9@gmail.com/
    Link: https://lore.kernel.org/r/251f4edcc04c14f873ff1c967bc686169cd07d2d.1627638184.git.lukas@wunner.de
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b33035945b0a6853f8f6f63fb3c3bc9ea869337e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 14 12:09:38 2021 +0300

    drm/i915: Replace the unconditional clflush with drm_clflush_virt_range()
    
    [ Upstream commit ef7ec41f17cbc0861891ccc0634d06a0c8dcbf09 ]
    
    Not all machines have clflush, so don't go assuming they do.
    Not really sure why the clflush is even here since hwsp
    is supposed to get snooped I thought.
    
    Although in my case we're talking about a i830 machine where
    render/blitter snooping is definitely busted. But it might
    work for the hswp perhaps. Haven't really reverse engineered
    that one fully.
    
    Cc: stable@vger.kernel.org
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Fixes: b436a5f8b6c8 ("drm/i915/gt: Track all timelines created using the HWSP")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211014090941.12159-2-ville.syrjala@linux.intel.com
    Reviewed-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cf3a1c1288e43af00d70a8520ea9efbea01615e
Author: Thomas Hellström <thomas.hellstrom@linux.intel.com>
Date:   Wed Sep 22 08:25:23 2021 +0200

    drm/i915/gt: Register the migrate contexts with their engines
    
    [ Upstream commit 3e42cc61275f95fd7f022b6380b95428efe134d3 ]
    
    Pinned contexts, like the migrate contexts need reset after resume
    since their context image may have been lost. Also the GuC needs to
    register pinned contexts.
    
    Add a list to struct intel_engine_cs where we add all pinned contexts on
    creation, and traverse that list at resume time to reset the pinned
    contexts.
    
    This fixes the kms_pipe_crc_basic@suspend-read-crc-pipe-a selftest for now,
    but proper LMEM backup / restore is needed for full suspend functionality.
    However, note that even with full LMEM backup / restore it may be
    desirable to keep the reset since backing up the migrate context images
    must happen using memcpy() after the migrate context has become inactive,
    and for performance- and other reasons we want to avoid memcpy() from
    LMEM.
    
    Also traverse the list at guc_init_lrc_mapping() calling
    guc_kernel_context_pin() for the pinned contexts, like is already done
    for the kernel context.
    
    v2:
    - Don't reset the contexts on each __engine_unpark() but rather at
      resume time (Chris Wilson).
    v3:
    - Reset contexts in the engine sanitize callback. (Chris Wilson)
    
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Brost Matthew <matthew.brost@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Thomas Hellström <thomas.hellstrom@linux.intel.com>
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210922062527.865433-6-thomas.hellstrom@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d839d15b50743164d7ad95f436ea284a2946c179
Author: Matthew Brost <matthew.brost@intel.com>
Date:   Wed Jul 28 12:21:00 2021 -0700

    drm/i915: Disable bonding on gen12+ platforms
    
    [ Upstream commit ce7e75c7ef1bf8ea3d947da8c674d2f40fd7d734 ]
    
    Disable bonding on gen12+ platforms aside from ones already supported by
    the i915 - TGL, RKL, and ADL-S.
    
    Signed-off-by: Matthew Brost <matthew.brost@intel.com>
    Reviewed-by: John Harrison <John.C.Harrison@Intel.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210728192100.132425-1-matthew.brost@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70fc07e30817c8611b9f841510f04e53cd8659cd
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Oct 13 10:12:49 2021 +0100

    btrfs: fix deadlock between chunk allocation and chunk btree modifications
    
    [ Upstream commit 2bb2e00ed9787e52580bb651264b8d6a2b7a9dd2 ]
    
    When a task is doing some modification to the chunk btree and it is not in
    the context of a chunk allocation or a chunk removal, it can deadlock with
    another task that is currently allocating a new data or metadata chunk.
    
    These contexts are the following:
    
    * When relocating a system chunk, when we need to COW the extent buffers
      that belong to the chunk btree;
    
    * When adding a new device (ioctl), where we need to add a new device item
      to the chunk btree;
    
    * When removing a device (ioctl), where we need to remove a device item
      from the chunk btree;
    
    * When resizing a device (ioctl), where we need to update a device item in
      the chunk btree and may need to relocate a system chunk that lies beyond
      the new device size when shrinking a device.
    
    The problem happens due to a sequence of steps like the following:
    
    1) Task A starts a data or metadata chunk allocation and it locks the
       chunk mutex;
    
    2) Task B is relocating a system chunk, and when it needs to COW an extent
       buffer of the chunk btree, it has locked both that extent buffer as
       well as its parent extent buffer;
    
    3) Since there is not enough available system space, either because none
       of the existing system block groups have enough free space or because
       the only one with enough free space is in RO mode due to the relocation,
       task B triggers a new system chunk allocation. It blocks when trying to
       acquire the chunk mutex, currently held by task A;
    
    4) Task A enters btrfs_chunk_alloc_add_chunk_item(), in order to insert
       the new chunk item into the chunk btree and update the existing device
       items there. But in order to do that, it has to lock the extent buffer
       that task B locked at step 2, or its parent extent buffer, but task B
       is waiting on the chunk mutex, which is currently locked by task A,
       therefore resulting in a deadlock.
    
    One example report when the deadlock happens with system chunk relocation:
    
      INFO: task kworker/u9:5:546 blocked for more than 143 seconds.
            Not tainted 5.15.0-rc3+ #1
      "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      task:kworker/u9:5    state:D stack:25936 pid:  546 ppid:     2 flags:0x00004000
      Workqueue: events_unbound btrfs_async_reclaim_metadata_space
      Call Trace:
       context_switch kernel/sched/core.c:4940 [inline]
       __schedule+0xcd9/0x2530 kernel/sched/core.c:6287
       schedule+0xd3/0x270 kernel/sched/core.c:6366
       rwsem_down_read_slowpath+0x4ee/0x9d0 kernel/locking/rwsem.c:993
       __down_read_common kernel/locking/rwsem.c:1214 [inline]
       __down_read kernel/locking/rwsem.c:1223 [inline]
       down_read_nested+0xe6/0x440 kernel/locking/rwsem.c:1590
       __btrfs_tree_read_lock+0x31/0x350 fs/btrfs/locking.c:47
       btrfs_tree_read_lock fs/btrfs/locking.c:54 [inline]
       btrfs_read_lock_root_node+0x8a/0x320 fs/btrfs/locking.c:191
       btrfs_search_slot_get_root fs/btrfs/ctree.c:1623 [inline]
       btrfs_search_slot+0x13b4/0x2140 fs/btrfs/ctree.c:1728
       btrfs_update_device+0x11f/0x500 fs/btrfs/volumes.c:2794
       btrfs_chunk_alloc_add_chunk_item+0x34d/0xea0 fs/btrfs/volumes.c:5504
       do_chunk_alloc fs/btrfs/block-group.c:3408 [inline]
       btrfs_chunk_alloc+0x84d/0xf50 fs/btrfs/block-group.c:3653
       flush_space+0x54e/0xd80 fs/btrfs/space-info.c:670
       btrfs_async_reclaim_metadata_space+0x396/0xa90 fs/btrfs/space-info.c:953
       process_one_work+0x9df/0x16d0 kernel/workqueue.c:2297
       worker_thread+0x90/0xed0 kernel/workqueue.c:2444
       kthread+0x3e5/0x4d0 kernel/kthread.c:319
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295
      INFO: task syz-executor:9107 blocked for more than 143 seconds.
            Not tainted 5.15.0-rc3+ #1
      "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      task:syz-executor    state:D stack:23200 pid: 9107 ppid:  7792 flags:0x00004004
      Call Trace:
       context_switch kernel/sched/core.c:4940 [inline]
       __schedule+0xcd9/0x2530 kernel/sched/core.c:6287
       schedule+0xd3/0x270 kernel/sched/core.c:6366
       schedule_preempt_disabled+0xf/0x20 kernel/sched/core.c:6425
       __mutex_lock_common kernel/locking/mutex.c:669 [inline]
       __mutex_lock+0xc96/0x1680 kernel/locking/mutex.c:729
       btrfs_chunk_alloc+0x31a/0xf50 fs/btrfs/block-group.c:3631
       find_free_extent_update_loop fs/btrfs/extent-tree.c:3986 [inline]
       find_free_extent+0x25cb/0x3a30 fs/btrfs/extent-tree.c:4335
       btrfs_reserve_extent+0x1f1/0x500 fs/btrfs/extent-tree.c:4415
       btrfs_alloc_tree_block+0x203/0x1120 fs/btrfs/extent-tree.c:4813
       __btrfs_cow_block+0x412/0x1620 fs/btrfs/ctree.c:415
       btrfs_cow_block+0x2f6/0x8c0 fs/btrfs/ctree.c:570
       btrfs_search_slot+0x1094/0x2140 fs/btrfs/ctree.c:1768
       relocate_tree_block fs/btrfs/relocation.c:2694 [inline]
       relocate_tree_blocks+0xf73/0x1770 fs/btrfs/relocation.c:2757
       relocate_block_group+0x47e/0xc70 fs/btrfs/relocation.c:3673
       btrfs_relocate_block_group+0x48a/0xc60 fs/btrfs/relocation.c:4070
       btrfs_relocate_chunk+0x96/0x280 fs/btrfs/volumes.c:3181
       __btrfs_balance fs/btrfs/volumes.c:3911 [inline]
       btrfs_balance+0x1f03/0x3cd0 fs/btrfs/volumes.c:4301
       btrfs_ioctl_balance+0x61e/0x800 fs/btrfs/ioctl.c:4137
       btrfs_ioctl+0x39ea/0x7b70 fs/btrfs/ioctl.c:4949
       vfs_ioctl fs/ioctl.c:51 [inline]
       __do_sys_ioctl fs/ioctl.c:874 [inline]
       __se_sys_ioctl fs/ioctl.c:860 [inline]
       __x64_sys_ioctl+0x193/0x200 fs/ioctl.c:860
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    So fix this by making sure that whenever we try to modify the chunk btree
    and we are neither in a chunk allocation context nor in a chunk remove
    context, we reserve system space before modifying the chunk btree.
    
    Reported-by: Hao Sun <sunhao.th@gmail.com>
    Link: https://lore.kernel.org/linux-btrfs/CACkBjsax51i4mu6C0C3vJqQN3NR_iVuucoeG3U1HXjrgzn5FFQ@mail.gmail.com/
    Fixes: 79bd37120b1495 ("btrfs: rework chunk allocation to avoid exhaustion of the system chunk array")
    CC: stable@vger.kernel.org # 5.14+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fb11d13220da1381e38ec90f9ad4101cfa1d578
Author: Michel Dänzer <mdaenzer@redhat.com>
Date:   Fri Jul 23 09:58:57 2021 +0200

    dma-buf/poll: Get a file reference for outstanding fence callbacks
    
    [ Upstream commit ff2d23843f7fb4f13055be5a4a9a20ddd04e6e9c ]
    
    This makes sure we don't hit the
    
            BUG_ON(dmabuf->cb_in.active || dmabuf->cb_out.active);
    
    in dma_buf_release, which could be triggered by user space closing the
    dma-buf file description while there are outstanding fence callbacks
    from dma_buf_poll.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Michel Dänzer <mdaenzer@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210723075857.4065-1-michel@daenzer.net
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 140395211626142f64b1e4269e01c26641307d86
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Dec 6 23:15:09 2021 -0800

    Input: goodix - try not to touch the reset-pin on x86/ACPI devices
    
    [ Upstream commit a2fd46cd3dbb83b373ba74f4043f8dae869c65f1 ]
    
    Unless the controller is not responding at boot or after suspend/resume,
    the driver never resets the controller on x86/ACPI platforms. The driver
    still requesting the reset pin at probe() though in case it needs it.
    
    Until now the driver has always requested the reset pin with GPIOD_IN
    as type. The idea being to put the pin in high-impedance mode to save
    power until the driver actually wants to issue a reset.
    
    But this means that just requesting the pin can cause issues, since
    requesting it in another mode then GPIOD_ASIS may cause the pinctrl
    driver to touch the pin settings. We have already had issues before
    due to a bug in the pinctrl-cherryview.c driver which has been fixed in
    commit 921daeeca91b ("pinctrl: cherryview: Preserve
    CHV_PADCTRL1_INVRXTX_TXDATA flag on GPIOs").
    
    And now it turns out that requesting the reset-pin as GPIOD_IN also stops
    the touchscreen from working on the GPD P2 max mini-laptop. The behavior
    of putting the pin in high-impedance mode relies on there being some
    external pull-up to keep it high and there seems to be no pull-up on the
    GPD P2 max, causing things to break.
    
    This commit fixes this by requesting the reset pin as is when using
    the x86/ACPI code paths to lookup the GPIOs; and by not dropping it
    back into input-mode in case the driver does end up issuing a reset
    for error-recovery.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=209061
    Fixes: a7d4b171660c ("Input: goodix - add support for getting IRQ + reset GPIOs on Cherry Trail devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20211206091116.44466-2-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8422a9b306f10ecc308ee0f3f209dbd6be9f29bd
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Sep 20 21:08:26 2021 -0700

    Input: goodix - refactor reset handling
    
    [ Upstream commit 209bda4741f68f102cf2f272227bfc938e387b51 ]
    
    Refactor reset handling a bit, change the main reset handler
    into a new goodix_reset_no_int_sync() helper and add a
    goodix_reset() wrapper which calls goodix_int_sync()
    separately.
    
    Also push the dev_err() call on reset failure into the
    goodix_reset_no_int_sync() and goodix_int_sync() functions,
    so that we don't need to have separate dev_err() calls in
    all their callers.
    
    This is a preparation patch for adding support for controllers
    without flash, which need to have their firmware uploaded and
    need some other special handling too.
    
    Reviewed-by: Bastien Nocera <hadess@hadess.net>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210920150643.155872-4-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5b1c6d526d8525329e60a9c216f5ff8d011453e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Sep 20 21:08:18 2021 -0700

    Input: goodix - add a goodix.h header file
    
    [ Upstream commit a2233cb7b65a017067e2f2703375ecc930a0ab30 ]
    
    Add a goodix.h header file, and move the register definitions,
    and struct declarations there and add prototypes for various
    helper functions.
    
    This is a preparation patch for adding support for controllers
    without flash, which need to have their firmware uploaded and
    need some other special handling too.
    
    Since MAINTAINERS needs updating because of this change anyways,
    also add myself as co-maintainer.
    
    Reviewed-by: Bastien Nocera <hadess@hadess.net>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210920150643.155872-3-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1354ceb1b6bfcb0c51b099a2d7da65e8254a254a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Sep 20 21:08:02 2021 -0700

    Input: goodix - change goodix_i2c_write() len parameter type to int
    
    [ Upstream commit 31ae0102a34ed863c7d32b10e768036324991679 ]
    
    Change the type of the goodix_i2c_write() len parameter to from 'unsigned'
    to 'int' to avoid bare use of 'unsigned', changing it to 'int' makes
    goodix_i2c_write()' prototype consistent with goodix_i2c_read().
    
    Reviewed-by: Bastien Nocera <hadess@hadess.net>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210920150643.155872-2-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d1d6b29baa98135994a1d5d1b5d471677e04773
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Sun Sep 5 18:57:32 2021 -0700

    Input: cpcap-pwrbutton - handle errors from platform_get_irq()
    
    [ Upstream commit 58ae4004b9c4bb040958cf73986b687a5ea4d85d ]
    
    The function cpcap_power_button_probe() does not perform
    sufficient error checking after executing platform_get_irq(),
    thus fix it.
    
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Link: https://lore.kernel.org/r/20210802121740.8700-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48f8f198a2ab8e89050aac4ebe6d1a167d73d956
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Dec 13 08:45:13 2021 +0000

    btrfs: fix warning when freeing leaf after subvolume creation failure
    
    [ Upstream commit 212a58fda9b9077e0efc20200a4feb76afacfd95 ]
    
    When creating a subvolume, at ioctl.c:create_subvol(), if we fail to
    insert the root item for the new subvolume into the root tree, we can
    trigger the following warning:
    
    [78961.741046] WARNING: CPU: 0 PID: 4079814 at fs/btrfs/extent-tree.c:3357 btrfs_free_tree_block+0x2af/0x310 [btrfs]
    [78961.743344] Modules linked in:
    [78961.749440]  dm_snapshot dm_thin_pool (...)
    [78961.773648] CPU: 0 PID: 4079814 Comm: fsstress Not tainted 5.16.0-rc4-btrfs-next-108 #1
    [78961.775198] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
    [78961.777266] RIP: 0010:btrfs_free_tree_block+0x2af/0x310 [btrfs]
    [78961.778398] Code: 17 00 48 85 (...)
    [78961.781067] RSP: 0018:ffffaa4001657b28 EFLAGS: 00010202
    [78961.781877] RAX: 0000000000000213 RBX: ffff897f8a796910 RCX: 0000000000000000
    [78961.782780] RDX: 0000000000000000 RSI: 0000000011004000 RDI: 00000000ffffffff
    [78961.783764] RBP: ffff8981f490e800 R08: 0000000000000001 R09: 0000000000000000
    [78961.784740] R10: 0000000000000000 R11: 0000000000000001 R12: ffff897fc963fcc8
    [78961.785665] R13: 0000000000000001 R14: ffff898063548000 R15: ffff898063548000
    [78961.786620] FS:  00007f31283c6b80(0000) GS:ffff8982ace00000(0000) knlGS:0000000000000000
    [78961.787717] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [78961.788598] CR2: 00007f31285c3000 CR3: 000000023fcc8003 CR4: 0000000000370ef0
    [78961.789568] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [78961.790585] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [78961.791684] Call Trace:
    [78961.792082]  <TASK>
    [78961.792359]  create_subvol+0x5d1/0x9a0 [btrfs]
    [78961.793054]  btrfs_mksubvol+0x447/0x4c0 [btrfs]
    [78961.794009]  ? preempt_count_add+0x49/0xa0
    [78961.794705]  __btrfs_ioctl_snap_create+0x123/0x190 [btrfs]
    [78961.795712]  ? _copy_from_user+0x66/0xa0
    [78961.796382]  btrfs_ioctl_snap_create_v2+0xbb/0x140 [btrfs]
    [78961.797392]  btrfs_ioctl+0xd1e/0x35c0 [btrfs]
    [78961.798172]  ? __slab_free+0x10a/0x360
    [78961.798820]  ? rcu_read_lock_sched_held+0x12/0x60
    [78961.799664]  ? lock_release+0x223/0x4a0
    [78961.800321]  ? lock_acquired+0x19f/0x420
    [78961.800992]  ? rcu_read_lock_sched_held+0x12/0x60
    [78961.801796]  ? trace_hardirqs_on+0x1b/0xe0
    [78961.802495]  ? _raw_spin_unlock_irqrestore+0x3e/0x60
    [78961.803358]  ? kmem_cache_free+0x321/0x3c0
    [78961.804071]  ? __x64_sys_ioctl+0x83/0xb0
    [78961.804711]  __x64_sys_ioctl+0x83/0xb0
    [78961.805348]  do_syscall_64+0x3b/0xc0
    [78961.805969]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [78961.806830] RIP: 0033:0x7f31284bc957
    [78961.807517] Code: 3c 1c 48 f7 d8 (...)
    
    This is because we are calling btrfs_free_tree_block() on an extent
    buffer that is dirty. Fix that by cleaning the extent buffer, with
    btrfs_clean_tree_block(), before freeing it.
    
    This was triggered by test case generic/475 from fstests.
    
    Fixes: 67addf29004c5b ("btrfs: fix metadata extent leak after failure to create subvolume")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bc53f5a3932c3f67799a0154bbf25261b0ae8a7
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Dec 13 08:45:12 2021 +0000

    btrfs: fix invalid delayed ref after subvolume creation failure
    
    [ Upstream commit 7a1636089acfee7562fe79aff7d1b4c57869896d ]
    
    When creating a subvolume, at ioctl.c:create_subvol(), if we fail to
    insert the new root's root item into the root tree, we are freeing the
    metadata extent we reserved for the new root to prevent a metadata
    extent leak, as we don't abort the transaction at that point (since
    there is nothing at that point that is irreversible).
    
    However we allocated the metadata extent for the new root which we are
    creating for the new subvolume, so its delayed reference refers to the
    ID of this new root. But when we free the metadata extent we pass the
    root of the subvolume where the new subvolume is located to
    btrfs_free_tree_block() - this is incorrect because this will generate
    a delayed reference that refers to the ID of the parent subvolume's root,
    and not to ID of the new root.
    
    This results in a failure when running delayed references that leads to
    a transaction abort and a trace like the following:
    
    [3868.738042] RIP: 0010:__btrfs_free_extent+0x709/0x950 [btrfs]
    [3868.739857] Code: 68 0f 85 e6 fb ff (...)
    [3868.742963] RSP: 0018:ffffb0e9045cf910 EFLAGS: 00010246
    [3868.743908] RAX: 00000000fffffffe RBX: 00000000fffffffe RCX: 0000000000000002
    [3868.745312] RDX: 00000000fffffffe RSI: 0000000000000002 RDI: ffff90b0cd793b88
    [3868.746643] RBP: 000000000e5d8000 R08: 0000000000000000 R09: ffff90b0cd793b88
    [3868.747979] R10: 0000000000000002 R11: 00014ded97944d68 R12: 0000000000000000
    [3868.749373] R13: ffff90b09afe4a28 R14: 0000000000000000 R15: ffff90b0cd793b88
    [3868.750725] FS:  00007f281c4a8b80(0000) GS:ffff90b3ada00000(0000) knlGS:0000000000000000
    [3868.752275] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [3868.753515] CR2: 00007f281c6a5000 CR3: 0000000108a42006 CR4: 0000000000370ee0
    [3868.754869] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [3868.756228] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [3868.757803] Call Trace:
    [3868.758281]  <TASK>
    [3868.758655]  ? btrfs_merge_delayed_refs+0x178/0x1c0 [btrfs]
    [3868.759827]  __btrfs_run_delayed_refs+0x2b1/0x1250 [btrfs]
    [3868.761047]  btrfs_run_delayed_refs+0x86/0x210 [btrfs]
    [3868.762069]  ? lock_acquired+0x19f/0x420
    [3868.762829]  btrfs_commit_transaction+0x69/0xb20 [btrfs]
    [3868.763860]  ? _raw_spin_unlock+0x29/0x40
    [3868.764614]  ? btrfs_block_rsv_release+0x1c2/0x1e0 [btrfs]
    [3868.765870]  create_subvol+0x1d8/0x9a0 [btrfs]
    [3868.766766]  btrfs_mksubvol+0x447/0x4c0 [btrfs]
    [3868.767669]  ? preempt_count_add+0x49/0xa0
    [3868.768444]  __btrfs_ioctl_snap_create+0x123/0x190 [btrfs]
    [3868.769639]  ? _copy_from_user+0x66/0xa0
    [3868.770391]  btrfs_ioctl_snap_create_v2+0xbb/0x140 [btrfs]
    [3868.771495]  btrfs_ioctl+0xd1e/0x35c0 [btrfs]
    [3868.772364]  ? __slab_free+0x10a/0x360
    [3868.773198]  ? rcu_read_lock_sched_held+0x12/0x60
    [3868.774121]  ? lock_release+0x223/0x4a0
    [3868.774863]  ? lock_acquired+0x19f/0x420
    [3868.775634]  ? rcu_read_lock_sched_held+0x12/0x60
    [3868.776530]  ? trace_hardirqs_on+0x1b/0xe0
    [3868.777373]  ? _raw_spin_unlock_irqrestore+0x3e/0x60
    [3868.778280]  ? kmem_cache_free+0x321/0x3c0
    [3868.779011]  ? __x64_sys_ioctl+0x83/0xb0
    [3868.779718]  __x64_sys_ioctl+0x83/0xb0
    [3868.780387]  do_syscall_64+0x3b/0xc0
    [3868.781059]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [3868.781953] RIP: 0033:0x7f281c59e957
    [3868.782585] Code: 3c 1c 48 f7 d8 4c (...)
    [3868.785867] RSP: 002b:00007ffe1f83e2b8 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
    [3868.787198] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f281c59e957
    [3868.788450] RDX: 00007ffe1f83e2c0 RSI: 0000000050009418 RDI: 0000000000000003
    [3868.789748] RBP: 00007ffe1f83f300 R08: 0000000000000000 R09: 00007ffe1f83fe36
    [3868.791214] R10: 0000000000000000 R11: 0000000000000202 R12: 0000000000000003
    [3868.792468] R13: 0000000000000003 R14: 00007ffe1f83e2c0 R15: 00000000000003cc
    [3868.793765]  </TASK>
    [3868.794037] irq event stamp: 0
    [3868.794548] hardirqs last  enabled at (0): [<0000000000000000>] 0x0
    [3868.795670] hardirqs last disabled at (0): [<ffffffff98294214>] copy_process+0x934/0x2040
    [3868.797086] softirqs last  enabled at (0): [<ffffffff98294214>] copy_process+0x934/0x2040
    [3868.798309] softirqs last disabled at (0): [<0000000000000000>] 0x0
    [3868.799284] ---[ end trace be24c7002fe27747 ]---
    [3868.799928] BTRFS info (device dm-0): leaf 241188864 gen 1268 total ptrs 214 free space 469 owner 2
    [3868.801133] BTRFS info (device dm-0): refs 2 lock_owner 225627 current 225627
    [3868.802056]  item 0 key (237436928 169 0) itemoff 16250 itemsize 33
    [3868.802863]          extent refs 1 gen 1265 flags 2
    [3868.803447]          ref#0: tree block backref root 1610
    (...)
    [3869.064354]  item 114 key (241008640 169 0) itemoff 12488 itemsize 33
    [3869.065421]          extent refs 1 gen 1268 flags 2
    [3869.066115]          ref#0: tree block backref root 1689
    (...)
    [3869.403834] BTRFS error (device dm-0): unable to find ref byte nr 241008640 parent 0 root 1622  owner 0 offset 0
    [3869.405641] BTRFS: error (device dm-0) in __btrfs_free_extent:3076: errno=-2 No such entry
    [3869.407138] BTRFS: error (device dm-0) in btrfs_run_delayed_refs:2159: errno=-2 No such entry
    
    Fix this by passing the new subvolume's root ID to btrfs_free_tree_block().
    This requires changing the root argument of btrfs_free_tree_block() from
    struct btrfs_root * to a u64, since at this point during the subvolume
    creation we have not yet created the struct btrfs_root for the new
    subvolume, and btrfs_free_tree_block() only needs a root ID and nothing
    else from a struct btrfs_root.
    
    This was triggered by test case generic/475 from fstests.
    
    Fixes: 67addf29004c5b ("btrfs: fix metadata extent leak after failure to create subvolume")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6618205047176275331cfa7d539d9080377beeb5
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Tue Oct 12 11:21:35 2021 +0300

    btrfs: add additional parameters to btrfs_init_tree_ref/btrfs_init_data_ref
    
    [ Upstream commit f42c5da6c12e990d8ec415199600b4d593c63bf5 ]
    
    In order to make 'real_root' used only in ref-verify it's required to
    have the necessary context to perform the same checks that this member
    is used for. So add 'mod_root' which will contain the root on behalf of
    which a delayed ref was created and a 'skip_group' parameter which
    will contain callsite-specific override of skip_qgroup.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb5c247155016f0d94e0fcb318790c8c4a3e624f
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Wed Aug 18 13:41:19 2021 +0300

    btrfs: rename btrfs_alloc_chunk to btrfs_create_chunk
    
    [ Upstream commit f6f39f7a0add4e7fd120a709545b57586a1d0393 ]
    
    The user facing function used to allocate new chunks is
    btrfs_chunk_alloc, unfortunately there is yet another similar sounding
    function - btrfs_alloc_chunk. This creates confusion, especially since
    the latter function can be considered "private" in the sense that it
    implements the first stage of chunk creation and as such is called by
    btrfs_chunk_alloc.
    
    To avoid the awkwardness that comes with having similarly named but
    distinctly different in their purpose function rename btrfs_alloc_chunk
    to btrfs_create_chunk, given that the main purpose of this function is
    to orchestrate the whole process of allocating a chunk - reserving space
    into devices, deciding on characteristics of the stripe size and
    creating the in-memory structures.
    
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1784d2075138992b00c17ab4ffc6d855171fe6d
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sat Jul 2 04:16:30 2022 +0200

    netfilter: nf_tables: stricter validation of element data
    
    commit 7e6bc1f6cabcd30aba0b11219d8e01b952eacbb6 upstream.
    
    Make sure element data type and length do not mismatch the one specified
    by the set declaration.
    
    Fixes: 7d7402642eaf ("netfilter: nf_tables: variable sized set element keys / data")
    Reported-by: Hugues ANGUELKOV <hanguelkov@randorisec.fr>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ccecafc728b0df48263d5ac198220bcd79830bc
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sat Jul 2 04:16:31 2022 +0200

    netfilter: nft_set_pipapo: release elements in clone from abort path
    
    commit 9827a0e6e23bf43003cd3d5b7fb11baf59a35e1e upstream.
    
    New elements that reside in the clone are not released in case that the
    transaction is aborted.
    
    [16302.231754] ------------[ cut here ]------------
    [16302.231756] WARNING: CPU: 0 PID: 100509 at net/netfilter/nf_tables_api.c:1864 nf_tables_chain_destroy+0x26/0x127 [nf_tables]
    [...]
    [16302.231882] CPU: 0 PID: 100509 Comm: nft Tainted: G        W         5.19.0-rc3+ #155
    [...]
    [16302.231887] RIP: 0010:nf_tables_chain_destroy+0x26/0x127 [nf_tables]
    [16302.231899] Code: f3 fe ff ff 41 55 41 54 55 53 48 8b 6f 10 48 89 fb 48 c7 c7 82 96 d9 a0 8b 55 50 48 8b 75 58 e8 de f5 92 e0 83 7d 50 00 74 09 <0f> 0b 5b 5d 41 5c 41 5d c3 4c 8b 65 00 48 8b 7d 08 49 39 fc 74 05
    [...]
    [16302.231917] Call Trace:
    [16302.231919]  <TASK>
    [16302.231921]  __nf_tables_abort.cold+0x23/0x28 [nf_tables]
    [16302.231934]  nf_tables_abort+0x30/0x50 [nf_tables]
    [16302.231946]  nfnetlink_rcv_batch+0x41a/0x840 [nfnetlink]
    [16302.231952]  ? __nla_validate_parse+0x48/0x190
    [16302.231959]  nfnetlink_rcv+0x110/0x129 [nfnetlink]
    [16302.231963]  netlink_unicast+0x211/0x340
    [16302.231969]  netlink_sendmsg+0x21e/0x460
    
    Add nft_set_pipapo_match_destroy() helper function to release the
    elements in the lookup tables.
    
    Stefano Brivio says: "We additionally look for elements pointers in the
    cloned matching data if priv->dirty is set, because that means that
    cloned data might point to additional elements we did not commit to the
    working copy yet (such as the abort path case, but perhaps not limited
    to it)."
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75e9009edabcc2a00840168ee83ef881146cffbe
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Tue Jul 5 20:56:10 2022 +0800

    net: rose: fix UAF bug caused by rose_t0timer_expiry
    
    commit 148ca04518070910739dfc4eeda765057856403d upstream.
    
    There are UAF bugs caused by rose_t0timer_expiry(). The
    root cause is that del_timer() could not stop the timer
    handler that is running and there is no synchronization.
    One of the race conditions is shown below:
    
        (thread 1)             |        (thread 2)
                               | rose_device_event
                               |   rose_rt_device_down
                               |     rose_remove_neigh
    rose_t0timer_expiry        |       rose_stop_t0timer(rose_neigh)
      ...                      |         del_timer(&neigh->t0timer)
                               |         kfree(rose_neigh) //[1]FREE
      neigh->dce_mode //[2]USE |
    
    The rose_neigh is deallocated in position [1] and use in
    position [2].
    
    The crash trace triggered by POC is like below:
    
    BUG: KASAN: use-after-free in expire_timers+0x144/0x320
    Write of size 8 at addr ffff888009b19658 by task swapper/0/0
    ...
    Call Trace:
     <IRQ>
     dump_stack_lvl+0xbf/0xee
     print_address_description+0x7b/0x440
     print_report+0x101/0x230
     ? expire_timers+0x144/0x320
     kasan_report+0xed/0x120
     ? expire_timers+0x144/0x320
     expire_timers+0x144/0x320
     __run_timers+0x3ff/0x4d0
     run_timer_softirq+0x41/0x80
     __do_softirq+0x233/0x544
     ...
    
    This patch changes rose_stop_ftimer() and rose_stop_t0timer()
    in rose_remove_neigh() to del_timer_sync() in order that the
    timer handler could be finished before the resources such as
    rose_neigh and so on are deallocated. As a result, the UAF
    bugs could be mitigated.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Link: https://lore.kernel.org/r/20220705125610.77971-1-duoming@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db89582ff330556188da856e01382ccbf3a5e706
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Jul 5 14:53:51 2022 +0200

    usbnet: fix memory leak in error case
    
    commit b55a21b764c1e182014630fa5486d717484ac58f upstream.
    
    usbnet_write_cmd_async() mixed up which buffers
    need to be freed in which error case.
    
    v2: add Fixes tag
    v3: fix uninitialized buf pointer
    
    Fixes: 877bd862f32b8 ("usbnet: introduce usbnet 3 command helpers")
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20220705125351.17309-1-oneukum@suse.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7de8d436db92bab8b1f44624297c2554a6ac36b
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Jul 1 14:47:25 2022 +0200

    bpf: Fix insufficient bounds propagation from adjust_scalar_min_max_vals
    
    commit 3844d153a41adea718202c10ae91dc96b37453b5 upstream.
    
    Kuee reported a corner case where the tnum becomes constant after the call
    to __reg_bound_offset(), but the register's bounds are not, that is, its
    min bounds are still not equal to the register's max bounds.
    
    This in turn allows to leak pointers through turning a pointer register as
    is into an unknown scalar via adjust_ptr_min_max_vals().
    
    Before:
    
      func#0 @0
      0: R1=ctx(off=0,imm=0,umax=0,var_off=(0x0; 0x0)) R10=fp(off=0,imm=0,umax=0,var_off=(0x0; 0x0))
      0: (b7) r0 = 1                        ; R0_w=scalar(imm=1,umin=1,umax=1,var_off=(0x1; 0x0))
      1: (b7) r3 = 0                        ; R3_w=scalar(imm=0,umax=0,var_off=(0x0; 0x0))
      2: (87) r3 = -r3                      ; R3_w=scalar()
      3: (87) r3 = -r3                      ; R3_w=scalar()
      4: (47) r3 |= 32767                   ; R3_w=scalar(smin=-9223372036854743041,umin=32767,var_off=(0x7fff; 0xffffffffffff8000),s32_min=-2147450881)
      5: (75) if r3 s>= 0x0 goto pc+1       ; R3_w=scalar(umin=9223372036854808575,var_off=(0x8000000000007fff; 0x7fffffffffff8000),s32_min=-2147450881,u32_min=32767)
      6: (95) exit
    
      from 5 to 7: R0=scalar(imm=1,umin=1,umax=1,var_off=(0x1; 0x0)) R1=ctx(off=0,imm=0,umax=0,var_off=(0x0; 0x0)) R3=scalar(umin=32767,umax=9223372036854775807,var_off=(0x7fff; 0x7fffffffffff8000),s32_min=-2147450881) R10=fp(off=0,imm=0,umax=0,var_off=(0x0; 0x0))
      7: (d5) if r3 s<= 0x8000 goto pc+1    ; R3=scalar(umin=32769,umax=9223372036854775807,var_off=(0x7fff; 0x7fffffffffff8000),s32_min=-2147450881,u32_min=32767)
      8: (95) exit
    
      from 7 to 9: R0=scalar(imm=1,umin=1,umax=1,var_off=(0x1; 0x0)) R1=ctx(off=0,imm=0,umax=0,var_off=(0x0; 0x0)) R3=scalar(umin=32767,umax=32768,var_off=(0x7fff; 0x8000)) R10=fp(off=0,imm=0,umax=0,var_off=(0x0; 0x0))
      9: (07) r3 += -32767                  ; R3_w=scalar(imm=0,umax=1,var_off=(0x0; 0x0))  <--- [*]
      10: (95) exit
    
    What can be seen here is that R3=scalar(umin=32767,umax=32768,var_off=(0x7fff;
    0x8000)) after the operation R3 += -32767 results in a 'malformed' constant, that
    is, R3_w=scalar(imm=0,umax=1,var_off=(0x0; 0x0)). Intersecting with var_off has
    not been done at that point via __update_reg_bounds(), which would have improved
    the umax to be equal to umin.
    
    Refactor the tnum <> min/max bounds information flow into a reg_bounds_sync()
    helper and use it consistently everywhere. After the fix, bounds have been
    corrected to R3_w=scalar(imm=0,umax=0,var_off=(0x0; 0x0)) and thus the register
    is regarded as a 'proper' constant scalar of 0.
    
    After:
    
      func#0 @0
      0: R1=ctx(off=0,imm=0,umax=0,var_off=(0x0; 0x0)) R10=fp(off=0,imm=0,umax=0,var_off=(0x0; 0x0))
      0: (b7) r0 = 1                        ; R0_w=scalar(imm=1,umin=1,umax=1,var_off=(0x1; 0x0))
      1: (b7) r3 = 0                        ; R3_w=scalar(imm=0,umax=0,var_off=(0x0; 0x0))
      2: (87) r3 = -r3                      ; R3_w=scalar()
      3: (87) r3 = -r3                      ; R3_w=scalar()
      4: (47) r3 |= 32767                   ; R3_w=scalar(smin=-9223372036854743041,umin=32767,var_off=(0x7fff; 0xffffffffffff8000),s32_min=-2147450881)
      5: (75) if r3 s>= 0x0 goto pc+1       ; R3_w=scalar(umin=9223372036854808575,var_off=(0x8000000000007fff; 0x7fffffffffff8000),s32_min=-2147450881,u32_min=32767)
      6: (95) exit
    
      from 5 to 7: R0=scalar(imm=1,umin=1,umax=1,var_off=(0x1; 0x0)) R1=ctx(off=0,imm=0,umax=0,var_off=(0x0; 0x0)) R3=scalar(umin=32767,umax=9223372036854775807,var_off=(0x7fff; 0x7fffffffffff8000),s32_min=-2147450881) R10=fp(off=0,imm=0,umax=0,var_off=(0x0; 0x0))
      7: (d5) if r3 s<= 0x8000 goto pc+1    ; R3=scalar(umin=32769,umax=9223372036854775807,var_off=(0x7fff; 0x7fffffffffff8000),s32_min=-2147450881,u32_min=32767)
      8: (95) exit
    
      from 7 to 9: R0=scalar(imm=1,umin=1,umax=1,var_off=(0x1; 0x0)) R1=ctx(off=0,imm=0,umax=0,var_off=(0x0; 0x0)) R3=scalar(umin=32767,umax=32768,var_off=(0x7fff; 0x8000)) R10=fp(off=0,imm=0,umax=0,var_off=(0x0; 0x0))
      9: (07) r3 += -32767                  ; R3_w=scalar(imm=0,umax=0,var_off=(0x0; 0x0))  <--- [*]
      10: (95) exit
    
    Fixes: b03c9f9fdc37 ("bpf/verifier: track signed and unsigned min/max values")
    Reported-by: Kuee K1r0a <liulin063@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20220701124727.11153-2-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a703cbdd791b5a1fec6e378e897f3027dff3c313
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Jul 1 14:47:24 2022 +0200

    bpf: Fix incorrect verifier simulation around jmp32's jeq/jne
    
    commit a12ca6277eca6aeeccf66e840c23a2b520e24c8f upstream.
    
    Kuee reported a quirk in the jmp32's jeq/jne simulation, namely that the
    register value does not match expectations for the fall-through path. For
    example:
    
    Before fix:
    
      0: R1=ctx(off=0,imm=0) R10=fp0
      0: (b7) r2 = 0                        ; R2_w=P0
      1: (b7) r6 = 563                      ; R6_w=P563
      2: (87) r2 = -r2                      ; R2_w=Pscalar()
      3: (87) r2 = -r2                      ; R2_w=Pscalar()
      4: (4c) w2 |= w6                      ; R2_w=Pscalar(umin=563,umax=4294967295,var_off=(0x233; 0xfffffdcc),s32_min=-2147483085) R6_w=P563
      5: (56) if w2 != 0x8 goto pc+1        ; R2_w=P571  <--- [*]
      6: (95) exit
      R0 !read_ok
    
    After fix:
    
      0: R1=ctx(off=0,imm=0) R10=fp0
      0: (b7) r2 = 0                        ; R2_w=P0
      1: (b7) r6 = 563                      ; R6_w=P563
      2: (87) r2 = -r2                      ; R2_w=Pscalar()
      3: (87) r2 = -r2                      ; R2_w=Pscalar()
      4: (4c) w2 |= w6                      ; R2_w=Pscalar(umin=563,umax=4294967295,var_off=(0x233; 0xfffffdcc),s32_min=-2147483085) R6_w=P563
      5: (56) if w2 != 0x8 goto pc+1        ; R2_w=P8  <--- [*]
      6: (95) exit
      R0 !read_ok
    
    As can be seen on line 5 for the branch fall-through path in R2 [*] is that
    given condition w2 != 0x8 is false, verifier should conclude that r2 = 8 as
    upper 32 bit are known to be zero. However, verifier incorrectly concludes
    that r2 = 571 which is far off.
    
    The problem is it only marks false{true}_reg as known in the switch for JE/NE
    case, but at the end of the function, it uses {false,true}_{64,32}off to
    update {false,true}_reg->var_off and they still hold the prior value of
    {false,true}_reg->var_off before it got marked as known. The subsequent
    __reg_combine_32_into_64() then propagates this old var_off and derives new
    bounds. The information between min/max bounds on {false,true}_reg from
    setting the register to known const combined with the {false,true}_reg->var_off
    based on the old information then derives wrong register data.
    
    Fix it by detangling the BPF_JEQ/BPF_JNE cases and updating relevant
    {false,true}_{64,32}off tnums along with the register marking to known
    constant.
    
    Fixes: 3f50f132d840 ("bpf: Verifier, do explicit ALU32 bounds tracking")
    Reported-by: Kuee K1r0a <liulin063@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20220701124727.11153-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7c9b38cc5a249abb24e5bf51fda7d7c62d1e11c
Author: Thomas Kopp <thomas.kopp@microchip.com>
Date:   Tue Dec 21 22:24:52 2021 +0000

    can: mcp251xfd: mcp251xfd_regmap_crc_read(): update workaround broken CRC on TBC register
    
    commit e3d4ee7d5f7f5256dfe89219afcc7a2d553b731f upstream.
    
    The mcp251xfd compatible chips have an erratum ([1], [2]), where the
    received CRC doesn't match the calculated CRC. In commit
    c7eb923c3caf ("can: mcp251xfd: mcp251xfd_regmap_crc_read(): work
    around broken CRC on TBC register") the following workaround was
    implementierend.
    
    - If a CRC read error on the TBC register is detected and the first
      byte is 0x00 or 0x80, the most significant bit of the first byte is
      flipped and the CRC is calculated again.
    - If the CRC now matches, the _original_ data is passed to the reader.
      For now we assume transferred data was OK.
    
    New investigations and simulations indicate that the CRC send by the
    device is calculated on correct data, and the data is incorrectly
    received by the SPI host controller.
    
    Use flipped instead of original data and update workaround description
    in mcp251xfd_regmap_crc_read().
    
    [1] mcp2517fd: DS80000792C: "Incorrect CRC for certain READ_CRC commands"
    [2] mcp2518fd: DS80000789C: "Incorrect CRC for certain READ_CRC commands"
    
    Link: https://lore.kernel.org/all/DM4PR11MB53901D49578FE265B239E55AFB7C9@DM4PR11MB5390.namprd11.prod.outlook.com
    Fixes: c7eb923c3caf ("can: mcp251xfd: mcp251xfd_regmap_crc_read(): work around broken CRC on TBC register")
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Kopp <thomas.kopp@microchip.com>
    [mkl: split into 2 patches, update patch description and documentation]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cab3fb917c579aa2c4b99df25b97bd76eb187fa
Author: Thomas Kopp <thomas.kopp@microchip.com>
Date:   Tue Dec 21 22:24:52 2021 +0000

    can: mcp251xfd: mcp251xfd_regmap_crc_read(): improve workaround handling for mcp2517fd
    
    commit 406cc9cdb3e8d644b15e8028948f091b82abdbca upstream.
    
    The mcp251xfd compatible chips have an erratum ([1], [2]), where the
    received CRC doesn't match the calculated CRC. In commit
    c7eb923c3caf ("can: mcp251xfd: mcp251xfd_regmap_crc_read(): work
    around broken CRC on TBC register") the following workaround was
    implementierend.
    
    - If a CRC read error on the TBC register is detected and the first
      byte is 0x00 or 0x80, the most significant bit of the first byte is
      flipped and the CRC is calculated again.
    - If the CRC now matches, the _original_ data is passed to the reader.
      For now we assume transferred data was OK.
    
    Measurements on the mcp2517fd show that the workaround is applicable
    not only of the lowest byte is 0x00 or 0x80, but also if 3 least
    significant bits are set.
    
    Update check on 1st data byte and workaround description accordingly.
    
    [1] mcp2517fd: DS80000792C: "Incorrect CRC for certain READ_CRC commands"
    [2] mcp2518fd: DS80000789C: "Incorrect CRC for certain READ_CRC commands"
    
    Link: https://lore.kernel.org/all/DM4PR11MB53901D49578FE265B239E55AFB7C9@DM4PR11MB5390.namprd11.prod.outlook.com
    Fixes: c7eb923c3caf ("can: mcp251xfd: mcp251xfd_regmap_crc_read(): work around broken CRC on TBC register")
    Cc: stable@vger.kernel.org
    Reported-by: Pavel Modilaynen <pavel.modilaynen@volvocars.com>
    Signed-off-by: Thomas Kopp <thomas.kopp@microchip.com>
    [mkl: split into 2 patches, update patch description and documentation]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7333f79888497bfd75dcd02a94eaf836dd1042c
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Mon May 30 19:30:28 2022 +0200

    can: m_can: m_can_{read_fifo,echo_tx_event}(): shift timestamp to full 32 bits
    
    commit 4c3333693f07313f5f0145a922f14a7d3c0f4f21 upstream.
    
    In commit 1be37d3b0414 ("can: m_can: fix periph RX path: use
    rx-offload to ensure skbs are sent from softirq context") the RX path
    for peripheral devices was switched to RX-offload.
    
    Received CAN frames are pushed to RX-offload together with a
    timestamp. RX-offload is designed to handle overflows of the timestamp
    correctly, if 32 bit timestamps are provided.
    
    The timestamps of m_can core are only 16 bits wide. So this patch
    shifts them to full 32 bit before passing them to RX-offload.
    
    Link: https://lore.kernel.org/all/20220612211410.4081390-1-mkl@pengutronix.de
    Fixes: 1be37d3b0414 ("can: m_can: fix periph RX path: use rx-offload to ensure skbs are sent from softirq context")
    Cc: <stable@vger.kernel.org> # 5.13
    Cc: Torin Cooper-Bennun <torin@maxiluxsystems.com>
    Reviewed-by: Chandrasekar Ramakrishnan <rcsekar@samsung.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4d90e9c95d4c8642e4f39d1f152a5a0ec902df6
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Mon May 23 17:18:33 2022 +0200

    can: m_can: m_can_chip_config(): actually enable internal timestamping
    
    commit 5b12933de4e76ec164031c18ce8e0904abf530d7 upstream.
    
    In commit df06fd678260 ("can: m_can: m_can_chip_config(): enable and
    configure internal timestamps") the timestamping in the m_can core
    should be enabled. In peripheral mode, the RX'ed CAN frames, TX
    compete frames and error events are sorted by the timestamp.
    
    The above mentioned commit however forgot to enable the timestamping.
    Add the missing bits to enable the timestamp counter to the write of
    the Timestamp Counter Configuration register.
    
    Link: https://lore.kernel.org/all/20220612212708.4081756-1-mkl@pengutronix.de
    Fixes: df06fd678260 ("can: m_can: m_can_chip_config(): enable and configure internal timestamps")
    Cc: <stable@vger.kernel.org> # 5.13
    Cc: Torin Cooper-Bennun <torin@maxiluxsystems.com>
    Reviewed-by: Chandrasekar Ramakrishnan <rcsekar@samsung.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e60230bc64355c80abe993d1719fdb318094e20
Author: Rhett Aultman <rhett.aultman@samsara.com>
Date:   Sun Jul 3 19:33:06 2022 +0200

    can: gs_usb: gs_usb_open/close(): fix memory leak
    
    commit 2bda24ef95c0311ab93bda00db40486acf30bd0a upstream.
    
    The gs_usb driver appears to suffer from a malady common to many USB
    CAN adapter drivers in that it performs usb_alloc_coherent() to
    allocate a number of USB request blocks (URBs) for RX, and then later
    relies on usb_kill_anchored_urbs() to free them, but this doesn't
    actually free them. As a result, this may be leaking DMA memory that's
    been used by the driver.
    
    This commit is an adaptation of the techniques found in the esd_usb2
    driver where a similar design pattern led to a memory leak. It
    explicitly frees the RX URBs and their DMA memory via a call to
    usb_free_coherent(). Since the RX URBs were allocated in the
    gs_can_open(), we remove them in gs_can_close() rather than in the
    disconnect function as was done in esd_usb2.
    
    For more information, see the 928150fad41b ("can: esd_usb2: fix memory
    leak").
    
    Link: https://lore.kernel.org/all/alpine.DEB.2.22.394.2206031547001.1630869@thelappy
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Rhett Aultman <rhett.aultman@samsara.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cfa1a33b0fba49515cf1db6b039e0cf3cbce638
Author: Liang He <windhl@126.com>
Date:   Sun Jun 19 15:02:57 2022 +0800

    can: grcan: grcan_probe(): remove extra of_node_get()
    
    commit 562fed945ea482833667f85496eeda766d511386 upstream.
    
    In grcan_probe(), of_find_node_by_path() has already increased the
    refcount. There is no need to call of_node_get() again, so remove it.
    
    Link: https://lore.kernel.org/all/20220619070257.4067022-1-windhl@126.com
    Fixes: 1e93ed26acf0 ("can: grcan: grcan_probe(): fix broken system id check for errata workaround needs")
    Cc: stable@vger.kernel.org # v5.18
    Cc: Andreas Larsson <andreas@gaisler.com>
    Signed-off-by: Liang He <windhl@126.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f34f2a18e47b73e48f90a757e1f4aaa8c7d665a1
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Fri May 20 20:32:39 2022 +0200

    can: bcm: use call_rcu() instead of costly synchronize_rcu()
    
    commit f1b4e32aca0811aa011c76e5d6cf2fa19224b386 upstream.
    
    In commit d5f9023fa61e ("can: bcm: delay release of struct bcm_op
    after synchronize_rcu()") Thadeu Lima de Souza Cascardo introduced two
    synchronize_rcu() calls in bcm_release() (only once at socket close)
    and in bcm_delete_rx_op() (called on removal of each single bcm_op).
    
    Unfortunately this slow removal of the bcm_op's affects user space
    applications like cansniffer where the modification of a filter
    removes 2048 bcm_op's which blocks the cansniffer application for
    40(!) seconds.
    
    In commit 181d4447905d ("can: gw: use call_rcu() instead of costly
    synchronize_rcu()") Eric Dumazet replaced the synchronize_rcu() calls
    with several call_rcu()'s to safely remove the data structures after
    the removal of CAN ID subscriptions with can_rx_unregister() calls.
    
    This patch adopts Erics approach for the can-bcm which should be
    applicable since the removal of tasklet_kill() in bcm_remove_op() and
    the introduction of the HRTIMER_MODE_SOFT timer handling in Linux 5.4.
    
    Fixes: d5f9023fa61e ("can: bcm: delay release of struct bcm_op after synchronize_rcu()") # >= 5.4
    Link: https://lore.kernel.org/all/20220520183239.19111-1-socketcan@hartkopp.net
    Cc: stable@vger.kernel.org
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Norbert Slusarek <nslusarek@gmx.net>
    Cc: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51aab37a66a203ce14630f8dd191713a27a6f457
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jul 5 17:23:36 2022 +0200

    ALSA: cs46xx: Fix missing snd_card_free() call at probe error
    
    commit c5e58c4545a69677d078b4c813b5d10d3481be9c upstream.
    
    The previous cleanup with devres may lead to the incorrect release
    orders at the probe error handling due to the devres's nature.  Until
    we register the card, snd_card_free() has to be called at first for
    releasing the stuff properly when the driver tries to manage and
    release the stuff via card->private_free().
    
    This patch fixes it by calling snd_card_free() manually on the error
    from the probe callback.
    
    Fixes: 5bff69b3645d ("ALSA: cs46xx: Allocate resources with device-managed APIs")
    Cc: <stable@vger.kernel.org>
    Reported-and-tested-by: Jan Engelhardt <jengelh@inai.de>
    Link: https://lore.kernel.org/r/p2p1s96o-746-74p4-s95-61qo1p7782pn@vanv.qr
    Link: https://lore.kernel.org/r/20220705152336.350-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f768f3ca5f386bbb1bdd8e3b323bd9047af4e839
Author: Tim Crawford <tcrawford@system76.com>
Date:   Fri Jun 24 08:41:09 2022 -0600

    ALSA: hda/realtek: Add quirk for Clevo L140PU
    
    commit 11bea26929a1a3a9dd1a287b60c2f471701bf706 upstream.
    
    Fixes headset detection on Clevo L140PU.
    
    Signed-off-by: Tim Crawford <tcrawford@system76.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220624144109.3957-1-tcrawford@system76.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f62c53c6e70d42aada4e1dd04f506821d51beee0
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jun 24 12:11:32 2022 +0200

    ALSA: usb-audio: Workarounds for Behringer UMC 204/404 HD
    
    commit ae8b1631561a3634cc09d0c62bbdd938eade05ec upstream.
    
    Both Behringer UMC 202 HD and 404 HD need explicit quirks to enable
    the implicit feedback mode and start the playback stream primarily.
    The former seems fixing the stuttering and the latter is required for
    a playback-only case.
    
    Note that the "clock source 41 is not valid" error message still
    appears even after this fix, but it should be only once at probe.
    The reason of the error is still unknown, but this seems to be mostly
    harmless as it's a one-off error and the driver retires the clock
    setup and it succeeds afterwards.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=215934
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220624101132.14528-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e63b94b8dd5ffeb9f8af615e9a6f52be44b9d237
Author: Po-Hsu Lin <po-hsu.lin@canonical.com>
Date:   Thu Jul 7 17:42:07 2022 +0800

    Revert "selftests/bpf: Add test for bpf_timer overwriting crash"
    
    This reverts commit b0028e1cc1faf2e5d88ad4065590aca90d650182 which is
    commit a7e75016a0753c24d6c995bc02501ae35368e333 upstream.
    
    It will break the bpf self-tests build with:
    progs/timer_crash.c:8:19: error: field has incomplete type 'struct bpf_timer'
            struct bpf_timer timer;
                             ^
    /home/ubuntu/linux/tools/testing/selftests/bpf/tools/include/bpf/bpf_helper_defs.h:39:8:
    note: forward declaration of 'struct bpf_timer'
    struct bpf_timer;
           ^
    1 error generated.
    
    This test can only be built with 5.17 and newer kernels.
    
    Signed-off-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 066a5b6784727217e3a6453d5dbf88aaf6d69c66
Author: Liu Shixin <liushixin2@huawei.com>
Date:   Thu Jul 7 10:09:38 2022 +0800

    mm/filemap: fix UAF in find_lock_entries
    
    Release refcount after xas_set to fix UAF which may cause panic like this:
    
     page:ffffea000491fa40 refcount:1 mapcount:0 mapping:0000000000000000 index:0x1 pfn:0x1247e9
     head:ffffea000491fa00 order:3 compound_mapcount:0 compound_pincount:0
     memcg:ffff888104f91091
     flags: 0x2fffff80010200(slab|head|node=0|zone=2|lastcpupid=0x1fffff)
    ...
    page dumped because: VM_BUG_ON_PAGE(PageTail(page))
     ------------[ cut here ]------------
     kernel BUG at include/linux/page-flags.h:632!
     invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN
     CPU: 1 PID: 7642 Comm: sh Not tainted 5.15.51-dirty #26
    ...
     Call Trace:
      <TASK>
      __invalidate_mapping_pages+0xe7/0x540
      drop_pagecache_sb+0x159/0x320
      iterate_supers+0x120/0x240
      drop_caches_sysctl_handler+0xaa/0xe0
      proc_sys_call_handler+0x2b4/0x480
      new_sync_write+0x3d6/0x5c0
      vfs_write+0x446/0x7a0
      ksys_write+0x105/0x210
      do_syscall_64+0x35/0x80
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7f52b5733130
    ...
    
    This problem has been fixed on mainline by patch 6b24ca4a1a8d ("mm: Use
    multi-index entries in the page cache") since it deletes the related code.
    
    Fixes: 5c211ba29deb ("mm: add and use find_lock_entries")
    Signed-off-by: Liu Shixin <liushixin2@huawei.com>
    Acked-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0515cc9b6b24877f59b222ade704bfaa42caa2a6
Author: Jann Horn <jannh@google.com>
Date:   Wed Jun 8 20:22:05 2022 +0200

    mm/slub: add missing TID updates on slab deactivation
    
    commit eeaa345e128515135ccb864c04482180c08e3259 upstream.
    
    The fastpath in slab_alloc_node() assumes that c->slab is stable as long as
    the TID stays the same. However, two places in __slab_alloc() currently
    don't update the TID when deactivating the CPU slab.
    
    If multiple operations race the right way, this could lead to an object
    getting lost; or, in an even more unlikely situation, it could even lead to
    an object being freed onto the wrong slab's freelist, messing up the
    `inuse` counter and eventually causing a page to be freed to the page
    allocator while it still contains slab objects.
    
    (I haven't actually tested these cases though, this is just based on
    looking at the code. Writing testcases for this stuff seems like it'd be
    a pain...)
    
    The race leading to state inconsistency is (all operations on the same CPU
    and kmem_cache):
    
     - task A: begin do_slab_free():
        - read TID
        - read pcpu freelist (==NULL)
        - check `slab == c->slab` (true)
     - [PREEMPT A->B]
     - task B: begin slab_alloc_node():
        - fastpath fails (`c->freelist` is NULL)
        - enter __slab_alloc()
        - slub_get_cpu_ptr() (disables preemption)
        - enter ___slab_alloc()
        - take local_lock_irqsave()
        - read c->freelist as NULL
        - get_freelist() returns NULL
        - write `c->slab = NULL`
        - drop local_unlock_irqrestore()
        - goto new_slab
        - slub_percpu_partial() is NULL
        - get_partial() returns NULL
        - slub_put_cpu_ptr() (enables preemption)
     - [PREEMPT B->A]
     - task A: finish do_slab_free():
        - this_cpu_cmpxchg_double() succeeds()
        - [CORRUPT STATE: c->slab==NULL, c->freelist!=NULL]
    
    From there, the object on c->freelist will get lost if task B is allowed to
    continue from here: It will proceed to the retry_load_slab label,
    set c->slab, then jump to load_freelist, which clobbers c->freelist.
    
    But if we instead continue as follows, we get worse corruption:
    
     - task A: run __slab_free() on object from other struct slab:
        - CPU_PARTIAL_FREE case (slab was on no list, is now on pcpu partial)
     - task A: run slab_alloc_node() with NUMA node constraint:
        - fastpath fails (c->slab is NULL)
        - call __slab_alloc()
        - slub_get_cpu_ptr() (disables preemption)
        - enter ___slab_alloc()
        - c->slab is NULL: goto new_slab
        - slub_percpu_partial() is non-NULL
        - set c->slab to slub_percpu_partial(c)
        - [CORRUPT STATE: c->slab points to slab-1, c->freelist has objects
          from slab-2]
        - goto redo
        - node_match() fails
        - goto deactivate_slab
        - existing c->freelist is passed into deactivate_slab()
        - inuse count of slab-1 is decremented to account for object from
          slab-2
    
    At this point, the inuse count of slab-1 is 1 lower than it should be.
    This means that if we free all allocated objects in slab-1 except for one,
    SLUB will think that slab-1 is completely unused, and may free its page,
    leading to use-after-free.
    
    Fixes: c17dda40a6a4e ("slub: Separate out kmem_cache_cpu processing from deactivate_slab")
    Fixes: 03e404af26dc2 ("slub: fast release on full slab")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: Christoph Lameter <cl@linux.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Muchun Song <songmuchun@bytedance.com>
    Tested-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Link: https://lore.kernel.org/r/20220608182205.2945720-1-jannh@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

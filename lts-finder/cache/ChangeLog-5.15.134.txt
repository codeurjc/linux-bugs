commit 1edcec18cfb7195c33072594aa02a442801dcf57
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Oct 6 13:18:24 2023 +0200

    Linux 5.15.134
    
    Link: https://lore.kernel.org/r/20231004175203.943277832@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09a6830237859126cac3132d9dcd35f317277eda
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 10 23:59:03 2023 +0200

    netfilter: nf_tables: fix kdoc warnings after gc rework
    
    commit 08713cb006b6f07434f276c5ee214fb20c7fd965 upstream.
    
    Jakub Kicinski says:
      We've got some new kdoc warnings here:
      net/netfilter/nft_set_pipapo.c:1557: warning: Function parameter or member '_set' not described in 'pipapo_gc'
      net/netfilter/nft_set_pipapo.c:1557: warning: Excess function parameter 'set' description in 'pipapo_gc'
      include/net/netfilter/nf_tables.h:577: warning: Function parameter or member 'dead' not described in 'nft_set'
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Closes: https://lore.kernel.org/netdev/20230810104638.746e46f1@kernel.org/
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66cb6d74f5a1b6eafe3370b56bf2cb575a91acbc
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Sep 14 16:10:15 2023 +0300

    drm/meson: fix memory leak on ->hpd_notify callback
    
    commit 099f0af9d98231bb74956ce92508e87cbcb896be upstream.
    
    The EDID returned by drm_bridge_get_edid() needs to be freed.
    
    Fixes: 0af5e0b41110 ("drm/meson: encoder_hdmi: switch to bridge DRM_BRIDGE_ATTACH_NO_CONNECTOR")
    Cc: Neil Armstrong <narmstrong@baylibre.com>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Cc: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: Neil Armstrong <neil.armstrong@linaro.org>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: Jerome Brunet <jbrunet@baylibre.com>
    Cc: dri-devel@lists.freedesktop.org
    Cc: linux-amlogic@lists.infradead.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: stable@vger.kernel.org # v5.17+
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230914131015.2472029-1-jani.nikula@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91f1f025b6d920cda3fd13a24360254ac51a1475
Author: Greg Ungerer <gerg@kernel.org>
Date:   Thu Sep 7 11:18:08 2023 +1000

    fs: binfmt_elf_efpic: fix personality for ELF-FDPIC
    
    commit 7c3151585730b7095287be8162b846d31e6eee61 upstream.
    
    The elf-fdpic loader hard sets the process personality to either
    PER_LINUX_FDPIC for true elf-fdpic binaries or to PER_LINUX for normal ELF
    binaries (in this case they would be constant displacement compiled with
    -pie for example).  The problem with that is that it will lose any other
    bits that may be in the ELF header personality (such as the "bug
    emulation" bits).
    
    On the ARM architecture the ADDR_LIMIT_32BIT flag is used to signify a
    normal 32bit binary - as opposed to a legacy 26bit address binary.  This
    matters since start_thread() will set the ARM CPSR register as required
    based on this flag.  If the elf-fdpic loader loses this bit the process
    will be mis-configured and crash out pretty quickly.
    
    Modify elf-fdpic loader personality setting so that it preserves the upper
    three bytes by using the SET_PERSONALITY macro to set it.  This macro in
    the generic case sets PER_LINUX and preserves the upper bytes.
    Architectures can override this for their specific use case, and ARM does
    exactly this.
    
    The problem shows up quite easily running under qemu using the ARM
    architecture, but not necessarily on all types of real ARM hardware.  If
    the underlying ARM processor does not support the legacy 26-bit addressing
    mode then everything will work as expected.
    
    Link: https://lkml.kernel.org/r/20230907011808.2985083-1-gerg@kernel.org
    Fixes: 1bde925d23547 ("fs/binfmt_elf_fdpic.c: provide NOMMU loader for regular ELF binaries")
    Signed-off-by: Greg Ungerer <gerg@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <brauner@kernel.org>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Greg Ungerer <gerg@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cae7473a6dd5cd678519caf49d636a65f24b0d6
Author: Matthias Schiffer <mschiffer@universe-factory.net>
Date:   Fri Sep 22 22:55:16 2023 +0200

    ata: libata-sata: increase PMP SRST timeout to 10s
    
    commit 753a4d531bc518633ea88ac0ed02b25a16823d51 upstream.
    
    On certain SATA controllers, softreset fails after wakeup from S2RAM with
    the message "softreset failed (1st FIS failed)", sometimes resulting in
    drives not being detected again. With the increased timeout, this issue
    is avoided. Instead, "softreset failed (device not ready)" is now
    logged 1-2 times; this later failure seems to cause fewer problems
    however, and the drives are detected reliably once they've spun up and
    the probe is retried.
    
    The issue was observed with the primary SATA controller of the QNAP
    TS-453B, which is an "Intel Corporation Celeron/Pentium Silver Processor
    SATA Controller [8086:31e3] (rev 06)" integrated in the Celeron J4125 CPU,
    and the following drives:
    
    - Seagate IronWolf ST12000VN0008
    - Seagate IronWolf ST8000NE0004
    
    The SATA controller seems to be more relevant to this issue than the
    drives, as the same drives are always detected reliably on the secondary
    SATA controller on the same board (an ASMedia 106x) without any "softreset
    failed" errors even without the increased timeout.
    
    Fixes: e7d3ef13d52a ("libata: change drive ready wait after hard reset to 5s")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthias Schiffer <mschiffer@universe-factory.net>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e74adc5899227f021f7e8858c17f41e5ca6ffd04
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Fri Sep 8 20:04:52 2023 +0900

    ata: libata-core: Do not register PM operations for SAS ports
    
    commit 75e2bd5f1ede42a2bc88aa34b431e1ace8e0bea0 upstream.
    
    libsas does its own domain based power management of ports. For such
    ports, libata should not use a device type defining power management
    operations as executing these operations for suspend/resume in addition
    to libsas calls to ata_sas_port_suspend() and ata_sas_port_resume() is
    not necessary (and likely dangerous to do, even though problems are not
    seen currently).
    
    Introduce the new ata_port_sas_type device_type for ports managed by
    libsas. This new device type is used in ata_tport_add() and is defined
    without power management operations.
    
    Fixes: 2fcbdcb4c802 ("[SCSI] libata: export ata_port suspend/resume infrastructure for sas")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Chia-Lin Kao (AceLan) <acelan.kao@canonical.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: John Garry <john.g.garry@oracle.com>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cbd55a81965f600db284ad0eb9260c874507660
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Sat Aug 26 13:07:36 2023 +0900

    ata: libata-core: Fix port and device removal
    
    commit 84d76529c650f887f1e18caee72d6f0589e1baf9 upstream.
    
    Whenever an ATA adapter driver is removed (e.g. rmmod),
    ata_port_detach() is called repeatedly for all the adapter ports to
    remove (unload) the devices attached to the port and delete the port
    device itself. Removing of devices is done using libata EH with the
    ATA_PFLAG_UNLOADING port flag set. This causes libata EH to execute
    ata_eh_unload() which disables all devices attached to the port.
    
    ata_port_detach() finishes by calling scsi_remove_host() to remove the
    scsi host associated with the port. This function will trigger the
    removal of all scsi devices attached to the host and in the case of
    disks, calls to sd_shutdown() which will flush the device write cache
    and stop the device. However, given that the devices were already
    disabled by ata_eh_unload(), the synchronize write cache command and
    start stop unit commands fail. E.g. running "rmmod ahci" with first
    removing sd_mod results in error messages like:
    
    ata13.00: disable device
    sd 0:0:0:0: [sda] Synchronizing SCSI cache
    sd 0:0:0:0: [sda] Synchronize Cache(10) failed: Result: hostbyte=DID_BAD_TARGET driverbyte=DRIVER_OK
    sd 0:0:0:0: [sda] Stopping disk
    sd 0:0:0:0: [sda] Start/Stop Unit failed: Result: hostbyte=DID_BAD_TARGET driverbyte=DRIVER_OK
    
    Fix this by removing all scsi devices of the ata devices connected to
    the port before scheduling libata EH to disable the ATA devices.
    
    Fixes: 720ba12620ee ("[PATCH] libata-hp: update unload-unplug")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Tested-by: Chia-Lin Kao (AceLan) <acelan.kao@canonical.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddc525fffb44cf5640112b2e1a3f6ffb8342154c
Author: Damien Le Moal <dlemoal@kernel.org>
Date:   Mon Sep 4 20:38:13 2023 +0900

    ata: libata-core: Fix ata_port_request_pm() locking
    
    commit 3b8e0af4a7a331d1510e963b8fd77e2fca0a77f1 upstream.
    
    The function ata_port_request_pm() checks the port flag
    ATA_PFLAG_PM_PENDING and calls ata_port_wait_eh() if this flag is set to
    ensure that power management operations for a port are not scheduled
    simultaneously. However, this flag check is done without holding the
    port lock.
    
    Fix this by taking the port lock on entry to the function and checking
    the flag under this lock. The lock is released and re-taken if
    ata_port_wait_eh() needs to be called. The two WARN_ON() macros checking
    that the ATA_PFLAG_PM_PENDING flag was cleared are removed as the first
    call is racy and the second one done without holding the port lock.
    
    Fixes: 5ef41082912b ("ata: add ata port system PM callbacks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Tested-by: Chia-Lin Kao (AceLan) <acelan.kao@canonical.com>
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2990a195edb582adb03988dff76bbbb184cf199a
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Sep 13 08:26:47 2023 +0300

    net: thunderbolt: Fix TCPv6 GSO checksum calculation
    
    commit e0b65f9b81fef180cf5f103adecbe5505c961153 upstream.
    
    Alex reported that running ssh over IPv6 does not work with
    Thunderbolt/USB4 networking driver. The reason for that is that driver
    should call skb_is_gso() before calling skb_is_gso_v6(), and it should
    not return false after calculates the checksum successfully. This probably
    was a copy paste error from the original driver where it was done properly.
    
    Reported-by: Alex Balcanquall <alex@alexbal.com>
    Fixes: e69b6c02b4c3 ("net: Add support for networking over Thunderbolt cable")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 132a5ae4136b3f244bfc55589bee6eddc234e569
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Fri Sep 15 10:34:28 2023 -0700

    bpf: Fix BTF_ID symbol generation collision in tools/
    
    commit c0bb9fb0e52a64601d38b3739b729d9138d4c8a1 upstream.
    
    Marcus and Satya reported an issue where BTF_ID macro generates same
    symbol in separate objects and that breaks final vmlinux link.
    
      ld.lld: error: ld-temp.o <inline asm>:14577:1: symbol
      '__BTF_ID__struct__cgroup__624' is already defined
    
    This can be triggered under specific configs when __COUNTER__ happens to
    be the same for the same symbol in two different translation units,
    which is already quite unlikely to happen.
    
    Add __LINE__ number suffix to make BTF_ID symbol more unique, which is
    not a complete fix, but it would help for now and meanwhile we can work
    on better solution as suggested by Andrii.
    
    Cc: stable@vger.kernel.org
    Reported-by: Satya Durga Srinivasu Prabhala <quic_satyap@quicinc.com>
    Reported-by: Marcus Seyfarth <m.seyfarth@gmail.com>
    Closes: https://github.com/ClangBuiltLinux/linux/issues/1913
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Co-developed-by: Jiri Olsa <jolsa@kernel.org>
    Link: https://lore.kernel.org/bpf/CAEf4Bzb5KQ2_LmhN769ifMeSJaWfebccUasQOfQKaOd0nQ51tw@mail.gmail.com/
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20230915-bpf_collision-v3-2-263fc519c21f@google.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58d560e98da5395526da4d09f4178347953c89e5
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Fri Sep 15 10:34:27 2023 -0700

    bpf: Fix BTF_ID symbol generation collision
    
    commit 8f908db77782630c45ba29dac35c434b5ce0b730 upstream.
    
    Marcus and Satya reported an issue where BTF_ID macro generates same
    symbol in separate objects and that breaks final vmlinux link.
    
    ld.lld: error: ld-temp.o <inline asm>:14577:1: symbol
    '__BTF_ID__struct__cgroup__624' is already defined
    
    This can be triggered under specific configs when __COUNTER__ happens to
    be the same for the same symbol in two different translation units,
    which is already quite unlikely to happen.
    
    Add __LINE__ number suffix to make BTF_ID symbol more unique, which is
    not a complete fix, but it would help for now and meanwhile we can work
    on better solution as suggested by Andrii.
    
    Cc: stable@vger.kernel.org
    Reported-by: Satya Durga Srinivasu Prabhala <quic_satyap@quicinc.com>
    Reported-by: Marcus Seyfarth <m.seyfarth@gmail.com>
    Closes: https://github.com/ClangBuiltLinux/linux/issues/1913
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/bpf/CAEf4Bzb5KQ2_LmhN769ifMeSJaWfebccUasQOfQKaOd0nQ51tw@mail.gmail.com/
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20230915-bpf_collision-v3-1-263fc519c21f@google.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8673f651bc1589f6330d1d154d27c1253f24d96
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Sep 18 10:34:51 2023 -0400

    btrfs: properly report 0 avail for very full file systems
    
    commit 58bfe2ccec5f9f137b41dd38f335290dcc13cd5c upstream.
    
    A user reported some issues with smaller file systems that get very
    full.  While investigating this issue I noticed that df wasn't showing
    100% full, despite having 0 chunk space and having < 1MiB of available
    metadata space.
    
    This turns out to be an overflow issue, we're doing:
    
      total_available_metadata_space - SZ_4M < global_block_rsv_size
    
    to determine if there's not enough space to make metadata allocations,
    which overflows if total_available_metadata_space is < 4M.  Fix this by
    checking to see if our available space is greater than the 4M threshold.
    This makes df properly report 100% usage on the file system.
    
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5d00cd7db669f80056ad6d1163a4ad35442ff2d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Fri Sep 29 18:01:13 2023 -0400

    ring-buffer: Update "shortest_full" in polling
    
    commit 1e0cb399c7653462d9dadf8ab9425337c355d358 upstream.
    
    It was discovered that the ring buffer polling was incorrectly stating
    that read would not block, but that's because polling did not take into
    account that reads will block if the "buffer-percent" was set. Instead,
    the ring buffer polling would say reads would not block if there was any
    data in the ring buffer. This was incorrect behavior from a user space
    point of view. This was fixed by commit 42fb0a1e84ff by having the polling
    code check if the ring buffer had more data than what the user specified
    "buffer percent" had.
    
    The problem now is that the polling code did not register itself to the
    writer that it wanted to wait for a specific "full" value of the ring
    buffer. The result was that the writer would wake the polling waiter
    whenever there was a new event. The polling waiter would then wake up, see
    that there's not enough data in the ring buffer to notify user space and
    then go back to sleep. The next event would wake it up again.
    
    Before the polling fix was added, the code would wake up around 100 times
    for a hackbench 30 benchmark. After the "fix", due to the constant waking
    of the writer, it would wake up over 11,0000 times! It would never leave
    the kernel, so the user space behavior was still "correct", but this
    definitely is not the desired effect.
    
    To fix this, have the polling code add what it's waiting for to the
    "shortest_full" variable, to tell the writer not to wake it up if the
    buffer is not as full as it expects to be.
    
    Note, after this fix, it appears that the waiter is now woken up around 2x
    the times it was before (~200). This is a tremendous improvement from the
    11,000 times, but I will need to spend some time to see why polling is
    more aggressive in its wakeups than the read blocking code.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230929180113.01c2cae3@rorschach.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Fixes: 42fb0a1e84ff ("tracing/ring-buffer: Have polling block on watermark")
    Reported-by: Julia Lawall <julia.lawall@inria.fr>
    Tested-by: Julia Lawall <julia.lawall@inria.fr>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00d2cb8066cb35435343e15fee89967f50b4c501
Author: Ben Wolsieffer <Ben.Wolsieffer@hefring.com>
Date:   Thu Sep 14 12:30:20 2023 -0400

    proc: nommu: /proc/<pid>/maps: release mmap read lock
    
    commit 578d7699e5c2add8c2e9549d9d75dfb56c460cb3 upstream.
    
    The no-MMU implementation of /proc/<pid>/map doesn't normally release
    the mmap read lock, because it uses !IS_ERR_OR_NULL(_vml) to determine
    whether to release the lock.  Since _vml is NULL when the end of the
    mappings is reached, the lock is not released.
    
    Reading /proc/1/maps twice doesn't cause a hang because it only
    takes the read lock, which can be taken multiple times and therefore
    doesn't show any problem if the lock isn't released. Instead, you need
    to perform some operation that attempts to take the write lock after
    reading /proc/<pid>/maps. To actually reproduce the bug, compile the
    following code as 'proc_maps_bug':
    
    #include <stdio.h>
    #include <unistd.h>
    #include <sys/mman.h>
    
    int main(int argc, char *argv[]) {
            void *buf;
            sleep(1);
            buf = mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
            puts("mmap returned");
            return 0;
    }
    
    Then, run:
    
      ./proc_maps_bug &; cat /proc/$!/maps; fg
    
    Without this patch, mmap() will hang and the command will never
    complete.
    
    This code was incorrectly adapted from the MMU implementation, which at
    the time released the lock in m_next() before returning the last entry.
    
    The MMU implementation has diverged further from the no-MMU version since
    then, so this patch brings their locking and error handling into sync,
    fixing the bug and hopefully avoiding similar issues in the future.
    
    Link: https://lkml.kernel.org/r/20230914163019.4050530-2-ben.wolsieffer@hefring.com
    Fixes: 47fecca15c09 ("fs/proc/task_nommu.c: don't use priv->task->mm")
    Signed-off-by: Ben Wolsieffer <ben.wolsieffer@hefring.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Giulio Benetti <giulio.benetti@benettiengineering.com>
    Cc: Greg Ungerer <gerg@uclinux.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40527ebb3e459dd8ada3b31ef2cc4011bcb4e042
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Sep 17 19:26:46 2023 -0400

    Revert "SUNRPC dont update timeout value on connection reset"
    
    commit a275ab62606bcd894ddff09460f7d253828313dc upstream.
    
    This reverts commit 88428cc4ae7abcc879295fbb19373dd76aad2bdd.
    
    The problem this commit is intended to fix was comprehensively fixed
    in commit 7de62bc09fe6 ("SUNRPC dont update timeout value on connection
    reset").
    Since then, this commit has been preventing the correct timeout of soft
    mounted requests.
    
    Cc: stable@vger.kernel.org # 5.9.x: 09252177d5f9: SUNRPC: Handle major timeout in xprt_adjust_timeout()
    Cc: stable@vger.kernel.org # 5.9.x: 7de62bc09fe6: SUNRPC dont update timeout value on connection reset
    Cc: stable@vger.kernel.org # 5.9.x
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2b1d486fb7030b6298c159c35ea9febbe8a921c
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Oct 4 08:43:13 2023 -0600

    io_uring/fs: remove sqe->rw_flags checking from LINKAT
    
    commit a52d4f657568d6458e873f74a9602e022afe666f upstream.
    
    This is unionized with the actual link flags, so they can of course be
    set and they will be evaluated further down. If not we fail any LINKAT
    that has to set option flags.
    
    Fixes: cf30da90bc3a ("io_uring: add support for IORING_OP_LINKAT")
    Cc: stable@vger.kernel.org
    Reported-by: Thomas Leonard <talex5@gmail.com>
    Link: https://github.com/axboe/liburing/issues/955
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 111fe77cb13fe0b74cad7fe64d87ce5fcfefd23b
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Sat Sep 23 01:14:08 2023 +0000

    sched/rt: Fix live lock between select_fallback_rq() and RT push
    
    commit fc09027786c900368de98d03d40af058bcb01ad9 upstream.
    
    During RCU-boost testing with the TREE03 rcutorture config, I found that
    after a few hours, the machine locks up.
    
    On tracing, I found that there is a live lock happening between 2 CPUs.
    One CPU has an RT task running, while another CPU is being offlined
    which also has an RT task running.  During this offlining, all threads
    are migrated. The migration thread is repeatedly scheduled to migrate
    actively running tasks on the CPU being offlined. This results in a live
    lock because select_fallback_rq() keeps picking the CPU that an RT task
    is already running on only to get pushed back to the CPU being offlined.
    
    It is anyway pointless to pick CPUs for pushing tasks to if they are
    being offlined only to get migrated away to somewhere else. This could
    also add unwanted latency to this task.
    
    Fix these issues by not selecting CPUs in RT if they are not 'active'
    for scheduling, using the cpu_active_mask. Other parts in core.c already
    use cpu_active_mask to prevent tasks from being put on CPUs going
    offline.
    
    With this fix I ran the tests for days and could not reproduce the
    hang. Without the patch, I hit it in a few hours.
    
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Tested-by: Paul E. McKenney <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230923011409.3522762-1-joel@joelfernandes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3569ad59664f9fa3ba1d02a78810773b7f49702b
Author: Liam R. Howlett <Liam.Howlett@oracle.com>
Date:   Fri Sep 15 13:44:44 2023 -0400

    kernel/sched: Modify initial boot task idle setup
    
    commit cff9b2332ab762b7e0586c793c431a8f2ea4db04 upstream.
    
    Initial booting is setting the task flag to idle (PF_IDLE) by the call
    path sched_init() -> init_idle().  Having the task idle and calling
    call_rcu() in kernel/rcu/tiny.c means that TIF_NEED_RESCHED will be
    set.  Subsequent calls to any cond_resched() will enable IRQs,
    potentially earlier than the IRQ setup has completed.  Recent changes
    have caused just this scenario and IRQs have been enabled early.
    
    This causes a warning later in start_kernel() as interrupts are enabled
    before they are fully set up.
    
    Fix this issue by setting the PF_IDLE flag later in the boot sequence.
    
    Although the boot task was marked as idle since (at least) d80e4fda576d,
    I am not sure that it is wrong to do so.  The forced context-switch on
    idle task was introduced in the tiny_rcu update, so I'm going to claim
    this fixes 5f6130fa52ee.
    
    Fixes: 5f6130fa52ee ("tiny_rcu: Directly force QS when call_rcu_[bh|sched]() on idle_task")
    Signed-off-by: Liam R. Howlett <Liam.Howlett@oracle.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mm/CAMuHMdWpvpWoDa=Ox-do92czYRvkok6_x6pYUH+ZouMcJbXy+Q@mail.gmail.com/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07f78e97676c5897ec740eca95c1484df24e087f
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Sep 14 23:08:44 2023 +0200

    i2c: i801: unregister tco_pdev in i801_probe() error path
    
    commit 3914784553f68c931fc666dbe7e86fe881aada38 upstream.
    
    We have to unregister tco_pdev also if i2c_add_adapter() fails.
    
    Fixes: 9424693035a5 ("i2c: i801: Create iTCO device on newer Intel PCHs")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70df8b9c59bce2c239e24cdd792487b10a26ddc4
Author: Niklas Cassel <niklas.cassel@wdc.com>
Date:   Mon Sep 18 22:24:50 2023 +0200

    ata: libata-scsi: ignore reserved bits for REPORT SUPPORTED OPERATION CODES
    
    commit 3ef600923521616ebe192c893468ad0424de2afb upstream.
    
    For REPORT SUPPORTED OPERATION CODES command, the service action field is
    defined as bits 0-4 in the second byte in the CDB. Bits 5-7 in the second
    byte are reserved.
    
    Only look at the service action field in the second byte when determining
    if the MAINTENANCE IN opcode is a REPORT SUPPORTED OPERATION CODES command.
    
    This matches how we only look at the service action field in the second
    byte when determining if the SERVICE ACTION IN(16) opcode is a READ
    CAPACITY(16) command (reserved bits 5-7 in the second byte are ignored).
    
    Fixes: 7b2030942859 ("libata: Add support for SCT Write Same")
    Cc: stable@vger.kernel.org
    Signed-off-by: Niklas Cassel <niklas.cassel@wdc.com>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7e0c10a8c33028811bf9592c1d27abbe174c796
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Sep 7 15:24:34 2023 +0800

    ALSA: hda: Disable power save for solving pop issue on Lenovo ThinkCentre M70q
    
    commit 057a28ef93bdbe84326d34cdb5543afdaab49fe1 upstream.
    
    Lenovo ThinkCentre M70q had boot up pop noise.
    Disable power save will solve pop issue.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/315900e2efef42fd9855eacfeb443abd@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c5fd85fb01fa1a5dbb9f213b0d1925e671f30df
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Sep 7 08:22:33 2023 +0200

    netfilter: nf_tables: disallow rule removal from chain binding
    
    [ Upstream commit f15f29fd4779be8a418b66e9d52979bb6d6c2325 ]
    
    Chain binding only requires the rule addition/insertion command within
    the same transaction. Removal of rules from chain bindings within the
    same transaction makes no sense, userspace does not utilize this
    feature. Replace nft_chain_is_bound() check to nft_chain_binding() in
    rule deletion commands. Replace command implies a rule deletion, reject
    this command too.
    
    Rule flush command can also safely rely on this nft_chain_binding()
    check because unbound chains are not allowed since 62e1e94b246e
    ("netfilter: nf_tables: reject unbound chain set before commit phase").
    
    Fixes: d0e2c7de92c7 ("netfilter: nf_tables: add NFT_CHAIN_BINDING")
    Reported-by: Kevin Rich <kevinrich1337@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3936e8714907cd55e37c7cc50e50229e4a9042e8
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Sep 21 23:17:31 2023 +0900

    nilfs2: fix potential use after free in nilfs_gccache_submit_read_data()
    
    commit 7ee29facd8a9c5a26079148e36bcf07141b3a6bc upstream.
    
    In nilfs_gccache_submit_read_data(), brelse(bh) is called to drop the
    reference count of bh when the call to nilfs_dat_translate() fails.  If
    the reference count hits 0 and its owner page gets unlocked, bh may be
    freed.  However, bh->b_page is dereferenced to put the page after that,
    which may result in a use-after-free bug.  This patch moves the release
    operation after unlocking and putting the page.
    
    NOTE: The function in question is only called in GC, and in combination
    with current userland tools, address translation using DAT does not occur
    in that function, so the code path that causes this issue will not be
    executed.  However, it is possible to run that code path by intentionally
    modifying the userland GC library or by calling the GC ioctl directly.
    
    [konishi.ryusuke@gmail.com: NOTE added to the commit log]
    Link: https://lkml.kernel.org/r/1543201709-53191-1-git-send-email-bianpan2016@163.com
    Link: https://lkml.kernel.org/r/20230921141731.10073-1-konishi.ryusuke@gmail.com
    Fixes: a3d93f709e89 ("nilfs2: block cache for garbage collection")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reported-by: Ferry Meng <mengferry@linux.alibaba.com>
    Closes: https://lkml.kernel.org/r/20230818092022.111054-1-mengferry@linux.alibaba.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b837f13a818f96304736453ac53b66a70aaa4f2
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Sep 1 01:25:55 2023 +0300

    serial: 8250_port: Check IRQ data before use
    
    commit cce7fc8b29961b64fadb1ce398dc5ff32a79643b upstream.
    
    In case the leaf driver wants to use IRQ polling (irq = 0) and
    IIR register shows that an interrupt happened in the 8250 hardware
    the IRQ data can be NULL. In such a case we need to skip the wake
    event as we came to this path from the timer interrupt and quite
    likely system is already awake.
    
    Without this fix we have got an Oops:
    
        serial8250: ttyS0 at I/O 0x3f8 (irq = 0, base_baud = 115200) is a 16550A
        ...
        BUG: kernel NULL pointer dereference, address: 0000000000000010
        RIP: 0010:serial8250_handle_irq+0x7c/0x240
        Call Trace:
         ? serial8250_handle_irq+0x7c/0x240
         ? __pfx_serial8250_timeout+0x10/0x10
    
    Fixes: 0ba9e3a13c6a ("serial: 8250: Add missing wakeup event reporting")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20230831222555.614426-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a48d2bcd23f2c98d575bc2f9b7a3fbd16aeea9eb
Author: Daniel Starke <daniel.starke@siemens.com>
Date:   Thu Sep 14 07:15:07 2023 +0200

    Revert "tty: n_gsm: fix UAF in gsm_cleanup_mux"
    
    commit 29346e217b8ab8a52889b88f00b268278d6b7668 upstream.
    
    This reverts commit 9b9c8195f3f0d74a826077fc1c01b9ee74907239.
    
    The commit above is reverted as it did not solve the original issue.
    
    gsm_cleanup_mux() tries to free up the virtual ttys by calling
    gsm_dlci_release() for each available DLCI. There, dlci_put() is called to
    decrease the reference counter for the DLCI via tty_port_put() which
    finally calls gsm_dlci_free(). This already clears the pointer which is
    being checked in gsm_cleanup_mux() before calling gsm_dlci_release().
    Therefore, it is not necessary to clear this pointer in gsm_cleanup_mux()
    as done in the reverted commit. The commit introduces a null pointer
    dereference:
     <TASK>
     ? __die+0x1f/0x70
     ? page_fault_oops+0x156/0x420
     ? search_exception_tables+0x37/0x50
     ? fixup_exception+0x21/0x310
     ? exc_page_fault+0x69/0x150
     ? asm_exc_page_fault+0x26/0x30
     ? tty_port_put+0x19/0xa0
     gsmtty_cleanup+0x29/0x80 [n_gsm]
     release_one_tty+0x37/0xe0
     process_one_work+0x1e6/0x3e0
     worker_thread+0x4c/0x3d0
     ? __pfx_worker_thread+0x10/0x10
     kthread+0xe1/0x110
     ? __pfx_kthread+0x10/0x10
     ret_from_fork+0x2f/0x50
     ? __pfx_kthread+0x10/0x10
     ret_from_fork_asm+0x1b/0x30
     </TASK>
    
    The actual issue is that nothing guards dlci_put() from being called
    multiple times while the tty driver was triggered but did not yet finished
    calling gsm_dlci_free().
    
    Fixes: 9b9c8195f3f0 ("tty: n_gsm: fix UAF in gsm_cleanup_mux")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Daniel Starke <daniel.starke@siemens.com>
    Link: https://lore.kernel.org/r/20230914051507.3240-1-daniel.starke@siemens.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78e70c6238d2e996cfd43aa9e175477cd20c4525
Author: Ricky WU <ricky_wu@realtek.com>
Date:   Wed Sep 20 09:11:19 2023 +0000

    misc: rtsx: Fix some platforms can not boot and move the l1ss judgment to probe
    
    commit 0e4cac557531a4c93de108d9ff11329fcad482ff upstream.
    
    commit 101bd907b424 ("misc: rtsx: judge ASPM Mode to set PETXCFG Reg")
    some readers no longer force #CLKREQ to low
    when the system need to enter ASPM.
    But some platform maybe not implement complete ASPM?
    it causes some platforms can not boot
    
    Like in the past only the platform support L1ss we release the #CLKREQ.
    Move the judgment (L1ss) to probe,
    we think read config space one time when the driver start is enough
    
    Fixes: 101bd907b424 ("misc: rtsx: judge ASPM Mode to set PETXCFG Reg")
    Cc: stable <stable@kernel.org>
    Reported-by: Paul Grandperrin <paul.grandperrin@gmail.com>
    Signed-off-by: Ricky Wu <ricky_wu@realtek.com>
    Tested-By: Jade Lovelace <lists@jade.fyi>
    Link: https://lore.kernel.org/r/37b1afb997f14946a8784c73d1f9a4f5@realtek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f090a8b4d2e3ec6f318d6fdab243a2edc5a8cc37
Author: Pu Wen <puwen@hygon.cn>
Date:   Thu Sep 28 14:59:16 2023 +0800

    x86/srso: Add SRSO mitigation for Hygon processors
    
    commit a5ef7d68cea1344cf524f04981c2b3f80bedbb0d upstream.
    
    Add mitigation for the speculative return stack overflow vulnerability
    which exists on Hygon processors too.
    
    Signed-off-by: Pu Wen <puwen@hygon.cn>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/tencent_4A14812842F104E93AA722EC939483CEFF05@qq.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5a604757aa8e37ea9c7011dc9da54fa1b30f29b
Author: Nicolin Chen <nicolinc@nvidia.com>
Date:   Tue Oct 3 16:35:49 2023 -0700

    iommu/arm-smmu-v3: Fix soft lockup triggered by arm_smmu_mm_invalidate_range
    
    commit d5afb4b47e13161b3f33904d45110f9e6463bad6 upstream.
    
    When running an SVA case, the following soft lockup is triggered:
    --------------------------------------------------------------------
    watchdog: BUG: soft lockup - CPU#244 stuck for 26s!
    pstate: 83400009 (Nzcv daif +PAN -UAO +TCO +DIT -SSBS BTYPE=--)
    pc : arm_smmu_cmdq_issue_cmdlist+0x178/0xa50
    lr : arm_smmu_cmdq_issue_cmdlist+0x150/0xa50
    sp : ffff8000d83ef290
    x29: ffff8000d83ef290 x28: 000000003b9aca00 x27: 0000000000000000
    x26: ffff8000d83ef3c0 x25: da86c0812194a0e8 x24: 0000000000000000
    x23: 0000000000000040 x22: ffff8000d83ef340 x21: ffff0000c63980c0
    x20: 0000000000000001 x19: ffff0000c6398080 x18: 0000000000000000
    x17: 0000000000000000 x16: 0000000000000000 x15: ffff3000b4a3bbb0
    x14: ffff3000b4a30888 x13: ffff3000b4a3cf60 x12: 0000000000000000
    x11: 0000000000000000 x10: 0000000000000000 x9 : ffffc08120e4d6bc
    x8 : 0000000000000000 x7 : 0000000000000000 x6 : 0000000000048cfa
    x5 : 0000000000000000 x4 : 0000000000000001 x3 : 000000000000000a
    x2 : 0000000080000000 x1 : 0000000000000000 x0 : 0000000000000001
    Call trace:
     arm_smmu_cmdq_issue_cmdlist+0x178/0xa50
     __arm_smmu_tlb_inv_range+0x118/0x254
     arm_smmu_tlb_inv_range_asid+0x6c/0x130
     arm_smmu_mm_invalidate_range+0xa0/0xa4
     __mmu_notifier_invalidate_range_end+0x88/0x120
     unmap_vmas+0x194/0x1e0
     unmap_region+0xb4/0x144
     do_mas_align_munmap+0x290/0x490
     do_mas_munmap+0xbc/0x124
     __vm_munmap+0xa8/0x19c
     __arm64_sys_munmap+0x28/0x50
     invoke_syscall+0x78/0x11c
     el0_svc_common.constprop.0+0x58/0x1c0
     do_el0_svc+0x34/0x60
     el0_svc+0x2c/0xd4
     el0t_64_sync_handler+0x114/0x140
     el0t_64_sync+0x1a4/0x1a8
    --------------------------------------------------------------------
    
    The commit 06ff87bae8d3 ("arm64: mm: remove unused functions and variable
    protoypes") fixed a similar lockup on the CPU MMU side. Yet, it can occur
    to SMMU too since arm_smmu_mm_invalidate_range() is typically called next
    to MMU tlb flush function, e.g.
            tlb_flush_mmu_tlbonly {
                    tlb_flush {
                            __flush_tlb_range {
                                    // check MAX_TLBI_OPS
                            }
                    }
                    mmu_notifier_invalidate_range {
                            arm_smmu_mm_invalidate_range {
                                    // does not check MAX_TLBI_OPS
                            }
                    }
            }
    
    Clone a CMDQ_MAX_TLBI_OPS from the MAX_TLBI_OPS in tlbflush.h, since in an
    SVA case SMMU uses the CPU page table, so it makes sense to align with the
    tlbflush code. Then, replace per-page TLBI commands with a single per-asid
    TLBI command, if the request size hits this threshold.
    
    Signed-off-by: Nicolin Chen <nicolinc@nvidia.com>
    Link: https://lore.kernel.org/r/20230920052257.8615-1-nicolinc@nvidia.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efce75bd2dbc8884d7c1610e1bf419b4688f3207
Author: Vishal Goel <vishal.goel@samsung.com>
Date:   Fri Sep 17 13:08:14 2021 +0530

    Smack:- Use overlay inode label in smack_inode_copy_up()
    
    [ Upstream commit 387ef964460f14fe1c1ea29aba70e22731ea7cf7 ]
    
    Currently in "smack_inode_copy_up()" function, process label is
    changed with the label on parent inode. Due to which,
    process is assigned directory label and whatever file or directory
    created by the process are also getting directory label
    which is wrong label.
    
    Changes has been done to use label of overlay inode instead
    of parent inode.
    
    Signed-off-by: Vishal Goel <vishal.goel@samsung.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e3450487f9969ef619690d3aed2dc149bfc51d4
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Mon May 8 19:02:33 2023 +0200

    smack: Retrieve transmuting information in smack_inode_getsecurity()
    
    [ Upstream commit 3a3d8fce31a49363cc31880dce5e3b0617c9c38b ]
    
    Enhance smack_inode_getsecurity() to retrieve the value for
    SMACK64TRANSMUTE from the inode security blob, similarly to SMACK64.
    
    This helps to display accurate values in the situation where the security
    labels come from mount options and not from xattrs.
    
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3586b3feed1b855add6fb5bd8033e5abd89aa2ed
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Mon May 8 19:02:34 2023 +0200

    smack: Record transmuting in smk_transmuted
    
    [ Upstream commit 2c085f3a8f23c9b444e8b99d93c15d7ce870fc4e ]
    
    smack_dentry_create_files_as() determines whether transmuting should occur
    based on the label of the parent directory the new inode will be added to,
    and not the label of the directory where it is created.
    
    This helps for example to do transmuting on overlayfs, since the latter
    first creates the inode in the working directory, and then moves it to the
    correct destination.
    
    However, despite smack_dentry_create_files_as() provides the correct label,
    smack_inode_init_security() does not know from passed information whether
    or not transmuting occurred. Without this information,
    smack_inode_init_security() cannot set SMK_INODE_CHANGED in smk_flags,
    which will result in the SMACK64TRANSMUTE xattr not being set in
    smack_d_instantiate().
    
    Thus, add the smk_transmuted field to the task_smack structure, and set it
    in smack_dentry_create_files_as() to smk_task if transmuting occurred. If
    smk_task is equal to smk_transmuted in smack_inode_init_security(), act as
    if transmuting was successful but without taking the label from the parent
    directory (the inode label was already set correctly from the current
    credentials in smack_inode_alloc_security()).
    
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9690ad557d9472a024f26a5f2980006c652e9b3f
Author: Irvin Cote <irvin.cote@insa-lyon.fr>
Date:   Thu Feb 9 17:43:57 2023 -0300

    nvme-pci: always return an ERR_PTR from nvme_pci_alloc_dev
    
    [ Upstream commit dc785d69d753a3894c93afc23b91404652382ead ]
    
    Don't mix NULL and ERR_PTR returns.
    
    Fixes: 2e87570be9d2 ("nvme-pci: factor out a nvme_pci_alloc_dev helper")
    Signed-off-by: Irvin Cote <irvin.cote@insa-lyon.fr>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c29c6e8cd7cb83d9d2bbd3f51c6840112deb842
Author: Gleb Chesnokov <gleb.chesnokov@scst.dev>
Date:   Wed May 17 11:22:35 2023 +0300

    scsi: qla2xxx: Fix NULL pointer dereference in target mode
    
    [ Upstream commit d54820b22e404b06b2b65877ff802cc7b31688bc ]
    
    When target mode is enabled, the pci_irq_get_affinity() function may return
    a NULL value in qla_mapq_init_qp_cpu_map() due to the qla24xx_enable_msix()
    code that handles IRQ settings for target mode. This leads to a crash due
    to a NULL pointer dereference.
    
    This patch fixes the issue by adding a check for the NULL value returned by
    pci_irq_get_affinity() and introducing a 'cpu_mapped' boolean flag to the
    qla_qpair structure, ensuring that the qpair's CPU affinity is updated when
    it has not been mapped to a CPU.
    
    Fixes: 1d201c81d4cc ("scsi: qla2xxx: Select qpair depending on which CPU post_cmd() gets called")
    Signed-off-by: Gleb Chesnokov <gleb.chesnokov@scst.dev>
    Link: https://lore.kernel.org/r/56b416f2-4e0f-b6cf-d6d5-b7c372e3c6a2@scst.dev
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e5e4223c897d0f5806c65bf85ae1ac063e9afe1
Author: Andrii Staikov <andrii.staikov@intel.com>
Date:   Tue Aug 22 15:16:53 2023 -0700

    i40e: fix potential NULL pointer dereferencing of pf->vf i40e_sync_vsi_filters()
    
    [ Upstream commit 9525a3c38accd2e186f52443e35e633e296cc7f5 ]
    
    Add check for pf->vf not being NULL before dereferencing
    pf->vf[vsi->vf_id] in updating VSI filter sync.
    Add a similar check before dereferencing !pf->vf[vsi->vf_id].trusted
    in the condition for clearing promisc mode bit.
    
    Fixes: c87c938f62d8 ("i40e: Add VF VLAN pruning")
    Signed-off-by: Andrii Staikov <andrii.staikov@intel.com>
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aff3994d4bdd5dbd8af021b50e37e757f897d71f
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Oct 2 09:05:35 2023 +0200

    watchdog: iTCO_wdt: Set NO_REBOOT if the watchdog is not already running
    
    commit ef9b7bf52c2f47f0a9bf988543c577b92c92d15e upstream.
    
    Daniel reported that the commit 1ae3e78c0820 ("watchdog: iTCO_wdt: No
    need to stop the timer in probe") makes QEMU implementation of the iTCO
    watchdog not to trigger reboot anymore when NO_REBOOT flag is initially
    cleared using this option (in QEMU command line):
    
      -global ICH9-LPC.noreboot=false
    
    The problem with the commit is that it left the unconditional setting of
    NO_REBOOT that is not cleared anymore when the kernel keeps pinging the
    watchdog (as opposed to the previous code that called iTCO_wdt_stop()
    that cleared it).
    
    Fix this so that we only set NO_REBOOT if the watchdog was not initially
    running.
    
    Fixes: 1ae3e78c0820 ("watchdog: iTCO_wdt: No need to stop the timer in probe")
    Reported-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20221028062750.45451-1-mika.westerberg@linux.intel.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83a30e9455714a0710aa62049c49fc64628e698d
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Oct 2 09:05:34 2023 +0200

    watchdog: iTCO_wdt: No need to stop the timer in probe
    
    commit 1ae3e78c08209ac657c59f6f7ea21bbbd7f6a1d4 upstream.
    
    The watchdog core can handle pinging of the watchdog before userspace
    opens the device. For this reason instead of stopping the timer, just
    mark it as running and let the watchdog core take care of it.
    
    Cc: Malin Jonsson <malin.jonsson@ericsson.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210921102900.61586-1-mika.westerberg@linux.intel.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e8c573f50a74a223219c7890a96aa6d269b7897
Author: Pratyush Yadav <ptyadav@amazon.de>
Date:   Tue Sep 12 17:52:49 2023 +0200

    nvme-pci: do not set the NUMA node of device if it has none
    
    [ Upstream commit dad651b2a44eb6b201738f810254279dca29d30d ]
    
    If a device has no NUMA node information associated with it, the driver
    puts the device in node first_memory_node (say node 0). Not having a
    NUMA node and being associated with node 0 are completely different
    things and it makes little sense to mix the two.
    
    Signed-off-by: Pratyush Yadav <ptyadav@amazon.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 182d13dadb031f2ad4b8963fa11f60cc653b3b31
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Nov 8 09:44:00 2022 +0100

    nvme-pci: factor out a nvme_pci_alloc_dev helper
    
    [ Upstream commit 2e87570be9d2746e7c4e7ab1cc18fd3ca7de2768 ]
    
    Add a helper that allocates the nvme_dev structure up to the point where
    we can call nvme_init_ctrl.  This pairs with the free_ctrl method and can
    thus be used to cleanup the teardown path and make it more symmetric.
    
    Note that this now calls nvme_init_ctrl a lot earlier during probing,
    which also means the per-controller character device shows up earlier.
    Due to the controller state no commnds can be send on it, but it might
    make sense to delay the cdev registration until nvme_init_ctrl_finish.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Tested-by Gerd Bayer <gbayer@linxu.ibm.com>
    Stable-dep-of: dad651b2a44e ("nvme-pci: do not set the NUMA node of device if it has none")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af58072e867cf29a70b1a864d535381eb8a45125
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Nov 8 09:41:41 2022 +0100

    nvme-pci: factor the iod mempool creation into a helper
    
    [ Upstream commit 081a7d958ce4b65f9aab6e70e65b0b2e0b92297c ]
    
    Add a helper to create the iod mempool.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Tested-by Gerd Bayer <gbayer@linxu.ibm.com>
    Stable-dep-of: dad651b2a44e ("nvme-pci: do not set the NUMA node of device if it has none")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8bc44936f2c502429be4ae7940cbaced3b6e565
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Fri Sep 29 16:16:07 2023 +0300

    cgroup: Fix suspicious rcu_dereference_check() usage warning
    
    commit f2aa197e4794bf4c2c0c9570684f86e6fa103e8b upstream.
    
    task_css_set_check() will use rcu_dereference_check() to check for
    rcu_read_lock_held() on the read-side, which is not true after commit
    dc6e0818bc9a ("sched/cpuacct: Optimize away RCU read lock"). This
    commit drop explicit rcu_read_lock(), change to RCU-sched read-side
    critical section. So fix the RCU warning by adding check for
    rcu_read_lock_sched_held().
    
    Fixes: dc6e0818bc9a ("sched/cpuacct: Optimize away RCU read lock")
    Reported-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Reported-by: syzbot+16e3f2c77e7c5a0113f9@syzkaller.appspotmail.com
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Tested-by: Zhouyi Zhou <zhouzhouyi@gmail.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20220305034103.57123-1-zhouchengming@bytedance.com
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce6b88a5853d69a3d023c219e50f708e1d30b0e3
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Fri Sep 29 16:16:06 2023 +0300

    sched/cpuacct: Optimize away RCU read lock
    
    commit dc6e0818bc9a0336d9accf3ea35d146d72aa7a18 upstream.
    
    Since cpuacct_charge() is called from the scheduler update_curr(),
    we must already have rq lock held, then the RCU read lock can
    be optimized away.
    
    And do the same thing in it's wrapper cgroup_account_cputime(),
    but we can't use lockdep_assert_rq_held() there, which defined
    in kernel/sched/sched.h.
    
    Suggested-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220220051426.5274-2-zhouchengming@bytedance.com
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1deb155524e2af3f1ed9da3b68ffc1299854e13
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Jul 28 17:26:54 2023 -0300

    perf build: Define YYNOMEM as YYNOABORT for bison < 3.81
    
    [ Upstream commit 88cc47e24597971b05b6e94c28a2fc81d2a8d61a ]
    
    YYNOMEM was introduced in bison 3.81, so define it as YYABORT for older
    versions, which should provide the previous perf behaviour.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86e65ffc4d0fe239497b7c214b59629677cec281
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Mon Sep 18 11:03:49 2023 +0200

    fbdev/sh7760fb: Depend on FB=y
    
    [ Upstream commit f75f71b2c418a27a7c05139bb27a0c83adf88d19 ]
    
    Fix linker error if FB=m about missing fb_io_read and fb_io_write. The
    linker's error message suggests that this config setting has already
    been broken for other symbols.
    
      All errors (new ones prefixed by >>):
    
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o: in function `sh7760fb_probe':
         sh7760fb.c:(.text+0x374): undefined reference to `framebuffer_alloc'
         sh4-linux-ld: sh7760fb.c:(.text+0x394): undefined reference to `fb_videomode_to_var'
         sh4-linux-ld: sh7760fb.c:(.text+0x39c): undefined reference to `fb_alloc_cmap'
         sh4-linux-ld: sh7760fb.c:(.text+0x3a4): undefined reference to `register_framebuffer'
         sh4-linux-ld: sh7760fb.c:(.text+0x3ac): undefined reference to `fb_dealloc_cmap'
         sh4-linux-ld: sh7760fb.c:(.text+0x434): undefined reference to `framebuffer_release'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o: in function `sh7760fb_remove':
         sh7760fb.c:(.text+0x800): undefined reference to `unregister_framebuffer'
         sh4-linux-ld: sh7760fb.c:(.text+0x804): undefined reference to `fb_dealloc_cmap'
         sh4-linux-ld: sh7760fb.c:(.text+0x814): undefined reference to `framebuffer_release'
      >> sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0xc): undefined reference to `fb_io_read'
      >> sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x10): undefined reference to `fb_io_write'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x2c): undefined reference to `cfb_fillrect'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x30): undefined reference to `cfb_copyarea'
         sh4-linux-ld: drivers/video/fbdev/sh7760fb.o:(.rodata+0x34): undefined reference to `cfb_imageblit'
    
    Suggested-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202309130632.LS04CPWu-lkp@intel.com/
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
    Acked-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230918090400.13264-1-tzimmermann@suse.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bf0044fe43f0c87d12c01f5d84413268304870f
Author: Johnathan Mantey <johnathanx.mantey@intel.com>
Date:   Fri Sep 15 09:12:35 2023 -0700

    ncsi: Propagate carrier gain/loss events to the NCSI controller
    
    [ Upstream commit 3780bb29311eccb7a1c9641032a112eed237f7e3 ]
    
    Report the carrier/no-carrier state for the network interface
    shared between the BMC and the passthrough channel. Without this
    functionality the BMC is unable to reconfigure the NIC in the event
    of a re-cabling to a different subnet.
    
    Signed-off-by: Johnathan Mantey <johnathanx.mantey@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 288990ec358099ebbf6663ab51ed1e220471b7f2
Author: Benjamin Gray <bgray@linux.ibm.com>
Date:   Tue Aug 29 16:34:57 2023 +1000

    powerpc/watchpoints: Annotate atomic context in more places
    
    [ Upstream commit 27646b2e02b096a6936b3e3b6ba334ae20763eab ]
    
    It can be easy to miss that the notifier mechanism invokes the callbacks
    in an atomic context, so add some comments to that effect on the two
    handlers we register here.
    
    Signed-off-by: Benjamin Gray <bgray@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230829063457.54157-4-bgray@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47a94e87f00c11feb6529594f46d03e341a8224e
Author: Benjamin Gray <bgray@linux.ibm.com>
Date:   Tue Aug 29 16:34:56 2023 +1000

    powerpc/watchpoint: Disable pagefaults when getting user instruction
    
    [ Upstream commit 3241f260eb830d27d09cc604690ec24533fdb433 ]
    
    This is called in an atomic context, so is not allowed to sleep if a
    user page needs to be faulted in and has nowhere it can be deferred to.
    The pagefault_disabled() function is documented as preventing user
    access methods from sleeping.
    
    In practice the page will be mapped in nearly always because we are
    reading the instruction that just triggered the watchpoint trap.
    
    Signed-off-by: Benjamin Gray <bgray@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230829063457.54157-3-bgray@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7eb09f70d9c22940ecd2f0399f33c520e2976750
Author: Benjamin Gray <bgray@linux.ibm.com>
Date:   Tue Aug 29 16:34:55 2023 +1000

    powerpc/watchpoints: Disable preemption in thread_change_pc()
    
    [ Upstream commit cc879ab3ce39bc39f9b1d238b283f43a5f6f957d ]
    
    thread_change_pc() uses CPU local data, so must be protected from
    swapping CPUs while it is reading the breakpoint struct.
    
    The error is more noticeable after 1e60f3564bad ("powerpc/watchpoints:
    Track perf single step directly on the breakpoint"), which added an
    unconditional __this_cpu_read() call in thread_change_pc(). However the
    existing __this_cpu_read() that runs if a breakpoint does need to be
    re-inserted has the same issue.
    
    Signed-off-by: Benjamin Gray <bgray@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230829063457.54157-2-bgray@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 134b01a39077d96cd827f7139368be80c28ab1c5
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Aug 17 12:41:32 2023 +0200

    media: vb2: frame_vector.c: replace WARN_ONCE with a comment
    
    [ Upstream commit 735de5caf79e06cc9fb96b1b4f4974674ae3e917 ]
    
    The WARN_ONCE was issued also in cases that had nothing to do with VM_IO
    (e.g. if the start address was just a random value and uaccess fails with
    -EFAULT).
    
    There are no reports of WARN_ONCE being issued for actual VM_IO cases, so
    just drop it and instead add a note to the comment before the function.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reported-by: Yikebaer Aizezi <yikebaer61@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit baf7cf0fdb837e85aa63da814031a1a9d5156ae1
Author: Chancel Liu <chancel.liu@nxp.com>
Date:   Wed Sep 13 18:26:56 2023 +0800

    ASoC: imx-rpmsg: Set ignore_pmdown_time for dai_link
    
    [ Upstream commit fac58baf8fcfcd7481e8f6d60206ce2a47c1476c ]
    
    i.MX rpmsg sound cards work on codec slave mode. MCLK will be disabled
    by CPU DAI driver in hw_free(). Some codec requires MCLK present at
    power up/down sequence. So need to set ignore_pmdown_time to power down
    codec immediately before MCLK is turned off.
    
    Take WM8962 as an example, if MCLK is disabled before DAPM power down
    playback stream, FIFO error will arise in WM8962 which will have bad
    impact on playback next.
    
    Signed-off-by: Chancel Liu <chancel.liu@nxp.com>
    Acked-by: Shengjiu Wang <shengjiu.wang@gmail.com>
    Link: https://lore.kernel.org/r/20230913102656.2966757-1-chancel.liu@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9da93c74490cb1c53a32185d4b74f0ebc7e74e4a
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Sep 11 12:47:30 2023 -0700

    bpf: Clarify error expectations from bpf_clone_redirect
    
    [ Upstream commit 7cb779a6867fea00b4209bcf6de2f178a743247d ]
    
    Commit 151e887d8ff9 ("veth: Fixing transmit return status for dropped
    packets") exposed the fact that bpf_clone_redirect is capable of
    returning raw NET_XMIT_XXX return codes.
    
    This is in the conflict with its UAPI doc which says the following:
    "0 on success, or a negative error in case of failure."
    
    Update the UAPI to reflect the fact that bpf_clone_redirect can
    return positive error numbers, but don't explicitly define
    their meaning.
    
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20230911194731.286342-1-sdf@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1a8b79ad7689658851eb2e662efa9ec6ab25ad9
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Mon Sep 11 14:38:07 2023 +0800

    ASoC: fsl: imx-pcm-rpmsg: Add SNDRV_PCM_INFO_BATCH flag
    
    [ Upstream commit 2f9426905a63be7ccf8cd10109caf1848aa0993a ]
    
    The rpmsg pcm device is a device which should support
    double buffering.
    
    Found this issue with pipewire. When there is no
    SNDRV_PCM_INFO_BATCH flag in driver, the pipewire will
    set headroom to be zero, and because rpmsg pcm device
    don't support residue report, when the latency setting
    is small, the "delay" always larger than "target" in
    alsa-pcm.c, that reading next period data is not
    scheduled on time.
    
    With SNDRV_PCM_INFO_BATCH flag in driver, the pipewire
    will select a smaller period size for device, then
    the task of reading next period data will be scheduled
    on time.
    
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Link: https://lore.kernel.org/r/1694414287-13291-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45e028accbdfcc4a0e2e8a16b5dff8c5c9cc19a9
Author: Valentin Caron <valentin.caron@foss.st.com>
Date:   Wed Sep 6 15:27:35 2023 +0200

    spi: stm32: add a delay before SPI disable
    
    [ Upstream commit 6de8a70c84ee0586fdde4e671626b9caca6aed74 ]
    
    As explained in errata sheet, in section "2.14.5 Truncation of SPI output
    signals after EOT event":
    On STM32MP1x, EOT interrupt can be thrown before the true end of
    communication.
    
    So we add a delay of a half period to wait the real end of the
    transmission.
    
    Link: https://www.st.com/resource/en/errata_sheet/es0539-stm32mp131x3x5x-device-errata-stmicroelectronics.pdf
    Signed-off-by: Valentin Caron <valentin.caron@foss.st.com>
    Link: https://lore.kernel.org/r/20230906132735.748174-1-valentin.caron@foss.st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25850bf83dcd373fdda42689109ae0b7a3b5d5a3
Author: Han Xu <han.xu@nxp.com>
Date:   Wed Sep 6 13:32:54 2023 -0500

    spi: nxp-fspi: reset the FLSHxCR1 registers
    
    [ Upstream commit 18495676f7886e105133f1dc06c1d5e8d5436f32 ]
    
    Reset the FLSHxCR1 registers to default value. ROM may set the register
    value and it affects the SPI NAND normal functions.
    
    Signed-off-by: Han Xu <han.xu@nxp.com>
    Link: https://lore.kernel.org/r/20230906183254.235847-1-han.xu@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50662d21e41477da1ef1c8fafbedec536694fc78
Author: Niklas Cassel <niklas.cassel@wdc.com>
Date:   Thu Sep 14 00:19:16 2023 +0200

    ata: libata-eh: do not clear ATA_PFLAG_EH_PENDING in ata_eh_reset()
    
    [ Upstream commit 80cc944eca4f0baa9c381d0706f3160e491437f2 ]
    
    ata_scsi_port_error_handler() starts off by clearing ATA_PFLAG_EH_PENDING,
    before calling ap->ops->error_handler() (without holding the ap->lock).
    
    If an error IRQ is received while ap->ops->error_handler() is running,
    the irq handler will set ATA_PFLAG_EH_PENDING.
    
    Once ap->ops->error_handler() returns, ata_scsi_port_error_handler()
    checks if ATA_PFLAG_EH_PENDING is set, and if it is, another iteration
    of ATA EH is performed.
    
    The problem is that ATA_PFLAG_EH_PENDING is not only cleared by
    ata_scsi_port_error_handler(), it is also cleared by ata_eh_reset().
    
    ata_eh_reset() is called by ap->ops->error_handler(). This additional
    clearing done by ata_eh_reset() breaks the whole retry logic in
    ata_scsi_port_error_handler(). Thus, if an error IRQ is received while
    ap->ops->error_handler() is running, the port will currently remain
    frozen and will never get re-enabled.
    
    The additional clearing in ata_eh_reset() was introduced in commit
    1e641060c4b5 ("libata: clear eh_info on reset completion").
    
    Looking at the original error report:
    https://marc.info/?l=linux-ide&m=124765325828495&w=2
    
    We can see the following happening:
    [    1.074659] ata3: XXX port freeze
    [    1.074700] ata3: XXX hardresetting link, stopping engine
    [    1.074746] ata3: XXX flipping SControl
    
    [    1.411471] ata3: XXX irq_stat=400040 CONN|PHY
    [    1.411475] ata3: XXX port freeze
    
    [    1.420049] ata3: XXX starting engine
    [    1.420096] ata3: XXX rc=0, class=1
    [    1.420142] ata3: XXX clearing IRQs for thawing
    [    1.420188] ata3: XXX port thawed
    [    1.420234] ata3: SATA link up 3.0 Gbps (SStatus 123 SControl 300)
    
    We are not supposed to be able to receive an error IRQ while the port is
    frozen (PxIE is set to 0, i.e. all IRQs for the port are disabled).
    
    AHCI 1.3.1 section 10.7.1.1 First Tier (IS Register) states:
    "Each bit location can be thought of as reporting a '1' if the virtual
    "interrupt line" for that port is indicating it wishes to generate an
    interrupt. That is, if a port has one or more interrupt status bit set,
    and the enables for those status bits are set, then this bit shall be set."
    
    Additionally, AHCI state P:ComInit clearly shows that the state machine
    will only jump to P:ComInitSetIS (which sets IS.IPS(x) to '1'), if PxIE.PCE
    is set to '1'. In our case, PxIE is set to 0, so IS.IPS(x) won't get set.
    
    So IS.IPS(x) only gets set if PxIS and PxIE is set.
    
    AHCI 1.3.1 section 10.7.1.1 First Tier (IS Register) also states:
    "The bits in this register are read/write clear. It is set by the level of
    the virtual interrupt line being a set, and cleared by a write of '1' from
    the software."
    
    So if IS.IPS(x) is set, you need to explicitly clear it by writing a 1 to
    IS.IPS(x) for that port.
    
    Since PxIE is cleared, the only way to get an interrupt while the port is
    frozen, is if IS.IPS(x) is set, and the only way IS.IPS(x) can be set when
    the port is frozen, is if it was set before the port was frozen.
    
    However, since commit 737dd811a3db ("ata: libahci: clear pending interrupt
    status"), we clear both PxIS and IS.IPS(x) after freezing the port, but
    before the COMRESET, so the problem that commit 1e641060c4b5 ("libata:
    clear eh_info on reset completion") fixed can no longer happen.
    
    Thus, revert commit 1e641060c4b5 ("libata: clear eh_info on reset
    completion"), so that the retry logic in ata_scsi_port_error_handler()
    works once again. (The retry logic is still needed, since we can still
    get an error IRQ _after_ the port has been thawed, but before
    ata_scsi_port_error_handler() takes the ap->lock in order to check
    if ATA_PFLAG_EH_PENDING is set.)
    
    Signed-off-by: Niklas Cassel <niklas.cassel@wdc.com>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e3cdab909db7202eddf34a072c2caea40f99d68
Author: Steve French <stfrench@microsoft.com>
Date:   Fri Sep 15 01:10:40 2023 -0500

    smb3: correct places where ENOTSUPP is used instead of preferred EOPNOTSUPP
    
    [ Upstream commit ebc3d4e44a7e05457825e03d0560153687265523 ]
    
    checkpatch flagged a few places with:
         WARNING: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
    Also fixed minor typo
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d540a4370aba378fbedf349ba0bb68e96e24243d
Author: Michal Grzedzicki <mge@meta.com>
Date:   Mon Sep 11 10:03:40 2023 -0700

    scsi: pm80xx: Avoid leaking tags when processing OPC_INB_SET_CONTROLLER_CONFIG command
    
    [ Upstream commit c13e7331745852d0dd7c35eabbe181cbd5b01172 ]
    
    Tags allocated for OPC_INB_SET_CONTROLLER_CONFIG command need to be freed
    when we receive the response.
    
    Signed-off-by: Michal Grzedzicki <mge@meta.com>
    Link: https://lore.kernel.org/r/20230911170340.699533-2-mge@meta.com
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fde57d7ba9b374fd70b5aaf8a2716604f655d684
Author: Michal Grzedzicki <mge@meta.com>
Date:   Wed Sep 13 08:56:10 2023 -0700

    scsi: pm80xx: Use phy-specific SAS address when sending PHY_START command
    
    [ Upstream commit 71996bb835aed58c7ec4967be1d05190a27339ec ]
    
    Some cards have more than one SAS address. Using an incorrect address
    causes communication issues with some devices like expanders.
    
    Closes: https://lore.kernel.org/linux-kernel/A57AEA84-5CA0-403E-8053-106033C73C70@fb.com/
    Signed-off-by: Michal Grzedzicki <mge@meta.com>
    Link: https://lore.kernel.org/r/20230913155611.3183612-1-mge@meta.com
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1589abd7c4ae154ccb27da53437f9f94a3baa2a
Author: David Francis <David.Francis@amd.com>
Date:   Tue Sep 5 10:13:51 2023 -0400

    drm/amdgpu: Handle null atom context in VBIOS info ioctl
    
    [ Upstream commit 5e7e82254270c8cf8b107451c5de01cee2f135ae ]
    
    On some APU systems, there is no atom context and so the
    atom_context struct is null.
    
    Add a check to the VBIOS_INFO branch of amdgpu_info_ioctl
    to handle this case, returning all zeroes.
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: David Francis <David.Francis@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd334cfd8412f933651e8db80c08f2dab297b880
Author: Swapnil Patel <swapnil.patel@amd.com>
Date:   Thu Aug 17 14:04:26 2023 -0400

    drm/amd/display: Don't check registers, if using AUX BL control
    
    [ Upstream commit f5b2c10b57615828b531bb0ae56bd6325a41167e ]
    
    [Why]
    Currently the driver looks DCN registers to access if BL is on or not.
    This check is not valid if we are using AUX based brightness control.
    This causes driver to not send out "backlight off" command during power off
    sequence as it already thinks it is off.
    
    [How]
    Only check DCN registers if we aren't using AUX based brightness control.
    
    Reviewed-by: Wenjing Liu <wenjing.liu@amd.com>
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Signed-off-by: Swapnil Patel <swapnil.patel@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8bc0f6357af622ebf2baf7d8528599f491aed4e
Author: David Thompson <davthompson@nvidia.com>
Date:   Tue Sep 5 09:32:43 2023 -0400

    platform/mellanox: mlxbf-bootctl: add NET dependency into Kconfig
    
    [ Upstream commit c2dffda1d8f7511505bbbf16ba282f2079b30089 ]
    
    The latest version of the mlxbf_bootctl driver utilizes
    "sysfs_format_mac", and this API is only available if
    NET is defined in the kernel configuration. This patch
    changes the mlxbf_bootctl Kconfig to depend on NET.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202309031058.JvwNDBKt-lkp@intel.com/
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: David Thompson <davthompson@nvidia.com>
    Link: https://lore.kernel.org/r/20230905133243.31550-1-davthompson@nvidia.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 344f2f3e61a90f0150c754796ec9a17fcaeec03d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Thu Sep 7 12:28:20 2023 -0400

    ring-buffer: Do not attempt to read past "commit"
    
    [ Upstream commit 95a404bd60af6c4d9d8db01ad14fe8957ece31ca ]
    
    When iterating over the ring buffer while the ring buffer is active, the
    writer can corrupt the reader. There's barriers to help detect this and
    handle it, but that code missed the case where the last event was at the
    very end of the page and has only 4 bytes left.
    
    The checks to detect the corruption by the writer to reads needs to see the
    length of the event. If the length in the first 4 bytes is zero then the
    length is stored in the second 4 bytes. But if the writer is in the process
    of updating that code, there's a small window where the length in the first
    4 bytes could be zero even though the length is only 4 bytes. That will
    cause rb_event_length() to read the next 4 bytes which could happen to be off the
    allocated page.
    
    To protect against this, fail immediately if the next event pointer is
    less than 8 bytes from the end of the commit (last byte of data), as all
    events must be a minimum of 8 bytes anyway.
    
    Link: https://lore.kernel.org/all/20230905141245.26470-1-Tze-nan.Wu@mediatek.com/
    Link: https://lore.kernel.org/linux-trace-kernel/20230907122820.0899019c@gandalf.local.home
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Reported-by: Tze-nan Wu <Tze-nan.Wu@mediatek.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3db9b420709b2dc6b05ab2fc707eae7d2aeffc46
Author: Ricardo B. Marliere <rbmarliere@gmail.com>
Date:   Tue Aug 22 18:09:40 2023 -0300

    selftests: fix dependency checker script
    
    [ Upstream commit 5f9dd2e896a91bfca90f8463eb6808c03d535d8a ]
    
    This patch fixes inconsistencies in the parsing rules of the levels 1
    and 2 of the kselftest_deps.sh.  It was added the levels 4 and 5 to
    account for a few edge cases that are present in some tests, also some
    minor identation styling have been fixed (s/    /\t/g).
    
    Signed-off-by: Ricardo B. Marliere <rbmarliere@gmail.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4aa90e624c30eb7b86c0a92f07cbf819d57ab1ba
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Aug 28 09:06:42 2023 +0100

    btrfs: improve error message after failure to add delayed dir index item
    
    [ Upstream commit 91bfe3104b8db0310f76f2dcb6aacef24c889366 ]
    
    If we fail to add a delayed dir index item because there's already another
    item with the same index number, we print an error message (and then BUG).
    However that message isn't very helpful to debug anything because we don't
    know what's the index number and what are the values of index counters in
    the inode and its delayed inode (index_cnt fields of struct btrfs_inode
    and struct btrfs_delayed_node).
    
    So update the error message to include the index number and counters.
    
    We actually had a recent case where this issue was hit by a syzbot report
    (see the link below).
    
    Link: https://lore.kernel.org/linux-btrfs/00000000000036e1290603e097e0@google.com/
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53e7c559b7bff39f3993e790048182da4c81e46b
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Sep 6 16:19:30 2023 +0800

    ring-buffer: Avoid softlockup in ring_buffer_resize()
    
    [ Upstream commit f6bd2c92488c30ef53b5bd80c52f0a7eee9d545a ]
    
    When user resize all trace ring buffer through file 'buffer_size_kb',
    then in ring_buffer_resize(), kernel allocates buffer pages for each
    cpu in a loop.
    
    If the kernel preemption model is PREEMPT_NONE and there are many cpus
    and there are many buffer pages to be allocated, it may not give up cpu
    for a long time and finally cause a softlockup.
    
    To avoid it, call cond_resched() after each cpu buffer allocation.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230906081930.3939106-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4874f72cf5755159b3874a79f2d6ebfe4bf3a96
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Mon Jun 26 08:11:44 2023 +0800

    selftests/ftrace: Correctly enable event in instance-event.tc
    
    [ Upstream commit f4e4ada586995b17f828c6d147d1800eb1471450 ]
    
    Function instance_set() expects to enable event 'sched_switch', so we
    should set 1 to its 'enable' file.
    
    Testcase passed after this patch:
      # ./ftracetest test.d/instances/instance-event.tc
      === Ftrace unit tests ===
      [1] Test creation and deletion of trace instances while setting an event
      [PASS]
    
      # of passed:  1
      # of failed:  0
      # of unresolved:  0
      # of untested:  0
      # of unsupported:  0
      # of xfailed:  0
      # of undefined(test bug):  0
    
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Acked-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c5c9ecbfa8d742609db8573668bbb7e588adcad
Author: Kiwoong Kim <kwmad.kim@samsung.com>
Date:   Mon Sep 4 10:30:44 2023 +0900

    scsi: ufs: core: Move __ufshcd_send_uic_cmd() outside host_lock
    
    [ Upstream commit 2d3f59cf868b4a2dd678a96cd49bdd91411bd59f ]
    
    __ufshcd_send_uic_cmd() is wrapped by uic_cmd_mutex and its related
    contexts are accessed within the section wrapped by uic_cmd_mutex. Thus,
    wrapping with host_lock is redundant.
    
    Signed-off-by: Kiwoong Kim <kwmad.kim@samsung.com>
    Link: https://lore.kernel.org/r/782ba5f26f0a96e58d85dff50751787d2d2a6b2b.1693790060.git.kwmad.kim@samsung.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Chanwoo Lee <cw9316.lee@samsung.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e08e61d50a30428a53fa823bef35f1cb2b0af579
Author: Javed Hasan <jhasan@marvell.com>
Date:   Fri Sep 1 11:36:46 2023 +0530

    scsi: qedf: Add synchronization between I/O completions and abort
    
    [ Upstream commit 7df0b2605489bef3f4223ad66f1f9bb8d50d4cd2 ]
    
    Avoid race condition between I/O completion and abort processing by
    protecting the cmd_type with the rport lock.
    
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Saurav Kashyap <skashyap@marvell.com>
    Link: https://lore.kernel.org/r/20230901060646.27885-1-skashyap@marvell.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ada7fcba2d6ab5665f95bd3f1d2714384f07a3cb
Author: Helge Deller <deller@gmx.de>
Date:   Thu Aug 31 22:36:12 2023 +0200

    parisc: irq: Make irq_stack_union static to avoid sparse warning
    
    [ Upstream commit b1bef1388c427cdad7331a9c8eb4ebbbe5b954b0 ]
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7e376a26b0cf29ec607c0119670e2e222cd6d66
Author: Helge Deller <deller@gmx.de>
Date:   Thu Aug 31 22:08:32 2023 +0200

    parisc: drivers: Fix sparse warning
    
    [ Upstream commit b137b9d60b8add5620a06c687a71ce18776730b0 ]
    
    Fix "warning: directive in macro's argument list" warning.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8c6fad00282fb173c8cb9e38c9a787c422b020b
Author: Helge Deller <deller@gmx.de>
Date:   Wed Aug 30 11:59:55 2023 +0200

    parisc: iosapic.c: Fix sparse warnings
    
    [ Upstream commit 927c6c8aa27c284a799b8c18784e37d3373af908 ]
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ecdcfec4e4a5a68e262c1211bd0a239ef4cd73b
Author: Helge Deller <deller@gmx.de>
Date:   Wed Aug 30 08:10:01 2023 +0200

    parisc: sba: Fix compile warning wrt list of SBA devices
    
    [ Upstream commit eb3255ee8f6f4691471a28fbf22db5e8901116cd ]
    
    Fix this makecheck warning:
    drivers/parisc/sba_iommu.c:98:19: warning: symbol 'sba_list'
            was not declared. Should it be static?
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd1ec7f9983b5cd3c77e0f7cda3fa8aed041af2f
Author: Tobias Schramm <t.schramm@manjaro.org>
Date:   Sun Aug 27 17:25:58 2023 +0200

    spi: sun6i: fix race between DMA RX transfer completion and RX FIFO drain
    
    [ Upstream commit 1f11f4202caf5710204d334fe63392052783876d ]
    
    Previously the transfer complete IRQ immediately drained to RX FIFO to
    read any data remaining in FIFO to the RX buffer. This behaviour is
    correct when dealing with SPI in interrupt mode. However in DMA mode the
    transfer complete interrupt still fires as soon as all bytes to be
    transferred have been stored in the FIFO. At that point data in the FIFO
    still needs to be picked up by the DMA engine. Thus the drain procedure
    and DMA engine end up racing to read from RX FIFO, corrupting any data
    read. Additionally the RX buffer pointer is never adjusted according to
    DMA progress in DMA mode, thus calling the RX FIFO drain procedure in DMA
    mode is a bug.
    Fix corruptions in DMA RX mode by draining RX FIFO only in interrupt mode.
    Also wait for completion of RX DMA when in DMA mode before returning to
    ensure all data has been copied to the supplied memory buffer.
    
    Signed-off-by: Tobias Schramm <t.schramm@manjaro.org>
    Link: https://lore.kernel.org/r/20230827152558.5368-3-t.schramm@manjaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff05ed4ae214011464a0156f05cac1b0b46b5fbc
Author: Tobias Schramm <t.schramm@manjaro.org>
Date:   Sun Aug 27 17:25:57 2023 +0200

    spi: sun6i: reduce DMA RX transfer width to single byte
    
    [ Upstream commit 171f8a49f212e87a8b04087568e1b3d132e36a18 ]
    
    Through empirical testing it has been determined that sometimes RX SPI
    transfers with DMA enabled return corrupted data. This is down to single
    or even multiple bytes lost during DMA transfer from SPI peripheral to
    memory. It seems the RX FIFO within the SPI peripheral can become
    confused when performing bus read accesses wider than a single byte to it
    during an active SPI transfer.
    
    This patch reduces the width of individual DMA read accesses to the
    RX FIFO to a single byte to mitigate that issue.
    
    Signed-off-by: Tobias Schramm <t.schramm@manjaro.org>
    Link: https://lore.kernel.org/r/20230827152558.5368-2-t.schramm@manjaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac0d068099349cbca3d93f2e3b15bb329364b08c
Author: Sergey Senozhatsky <senozhatsky@chromium.org>
Date:   Wed Aug 16 11:32:21 2023 +0900

    dma-debug: don't call __dma_entry_alloc_check_leak() under free_entries_lock
    
    [ Upstream commit fb5a4315591dae307a65fc246ca80b5159d296e1 ]
    
    __dma_entry_alloc_check_leak() calls into printk -> serial console
    output (qcom geni) and grabs port->lock under free_entries_lock
    spin lock, which is a reverse locking dependency chain as qcom_geni
    IRQ handler can call into dma-debug code and grab free_entries_lock
    under port->lock.
    
    Move __dma_entry_alloc_check_leak() call out of free_entries_lock
    scope so that we don't acquire serial console's port->lock under it.
    
    Trimmed-down lockdep splat:
    
     The existing dependency chain (in reverse order) is:
    
                   -> #2 (free_entries_lock){-.-.}-{2:2}:
            _raw_spin_lock_irqsave+0x60/0x80
            dma_entry_alloc+0x38/0x110
            debug_dma_map_page+0x60/0xf8
            dma_map_page_attrs+0x1e0/0x230
            dma_map_single_attrs.constprop.0+0x6c/0xc8
            geni_se_rx_dma_prep+0x40/0xcc
            qcom_geni_serial_isr+0x310/0x510
            __handle_irq_event_percpu+0x110/0x244
            handle_irq_event_percpu+0x20/0x54
            handle_irq_event+0x50/0x88
            handle_fasteoi_irq+0xa4/0xcc
            handle_irq_desc+0x28/0x40
            generic_handle_domain_irq+0x24/0x30
            gic_handle_irq+0xc4/0x148
            do_interrupt_handler+0xa4/0xb0
            el1_interrupt+0x34/0x64
            el1h_64_irq_handler+0x18/0x24
            el1h_64_irq+0x64/0x68
            arch_local_irq_enable+0x4/0x8
            ____do_softirq+0x18/0x24
            ...
    
                   -> #1 (&port_lock_key){-.-.}-{2:2}:
            _raw_spin_lock_irqsave+0x60/0x80
            qcom_geni_serial_console_write+0x184/0x1dc
            console_flush_all+0x344/0x454
            console_unlock+0x94/0xf0
            vprintk_emit+0x238/0x24c
            vprintk_default+0x3c/0x48
            vprintk+0xb4/0xbc
            _printk+0x68/0x90
            register_console+0x230/0x38c
            uart_add_one_port+0x338/0x494
            qcom_geni_serial_probe+0x390/0x424
            platform_probe+0x70/0xc0
            really_probe+0x148/0x280
            __driver_probe_device+0xfc/0x114
            driver_probe_device+0x44/0x100
            __device_attach_driver+0x64/0xdc
            bus_for_each_drv+0xb0/0xd8
            __device_attach+0xe4/0x140
            device_initial_probe+0x1c/0x28
            bus_probe_device+0x44/0xb0
            device_add+0x538/0x668
            of_device_add+0x44/0x50
            of_platform_device_create_pdata+0x94/0xc8
            of_platform_bus_create+0x270/0x304
            of_platform_populate+0xac/0xc4
            devm_of_platform_populate+0x60/0xac
            geni_se_probe+0x154/0x160
            platform_probe+0x70/0xc0
            ...
    
                   -> #0 (console_owner){-...}-{0:0}:
            __lock_acquire+0xdf8/0x109c
            lock_acquire+0x234/0x284
            console_flush_all+0x330/0x454
            console_unlock+0x94/0xf0
            vprintk_emit+0x238/0x24c
            vprintk_default+0x3c/0x48
            vprintk+0xb4/0xbc
            _printk+0x68/0x90
            dma_entry_alloc+0xb4/0x110
            debug_dma_map_sg+0xdc/0x2f8
            __dma_map_sg_attrs+0xac/0xe4
            dma_map_sgtable+0x30/0x4c
            get_pages+0x1d4/0x1e4 [msm]
            msm_gem_pin_pages_locked+0x38/0xac [msm]
            msm_gem_pin_vma_locked+0x58/0x88 [msm]
            msm_ioctl_gem_submit+0xde4/0x13ac [msm]
            drm_ioctl_kernel+0xe0/0x15c
            drm_ioctl+0x2e8/0x3f4
            vfs_ioctl+0x30/0x50
            ...
    
     Chain exists of:
       console_owner --> &port_lock_key --> free_entries_lock
    
      Possible unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(free_entries_lock);
                                    lock(&port_lock_key);
                                    lock(free_entries_lock);
       lock(console_owner);
    
                    *** DEADLOCK ***
    
     Call trace:
      dump_backtrace+0xb4/0xf0
      show_stack+0x20/0x30
      dump_stack_lvl+0x60/0x84
      dump_stack+0x18/0x24
      print_circular_bug+0x1cc/0x234
      check_noncircular+0x78/0xac
      __lock_acquire+0xdf8/0x109c
      lock_acquire+0x234/0x284
      console_flush_all+0x330/0x454
      console_unlock+0x94/0xf0
      vprintk_emit+0x238/0x24c
      vprintk_default+0x3c/0x48
      vprintk+0xb4/0xbc
      _printk+0x68/0x90
      dma_entry_alloc+0xb4/0x110
      debug_dma_map_sg+0xdc/0x2f8
      __dma_map_sg_attrs+0xac/0xe4
      dma_map_sgtable+0x30/0x4c
      get_pages+0x1d4/0x1e4 [msm]
      msm_gem_pin_pages_locked+0x38/0xac [msm]
      msm_gem_pin_vma_locked+0x58/0x88 [msm]
      msm_ioctl_gem_submit+0xde4/0x13ac [msm]
      drm_ioctl_kernel+0xe0/0x15c
      drm_ioctl+0x2e8/0x3f4
      vfs_ioctl+0x30/0x50
      ...
    
    Reported-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Acked-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d938c3d278d53a2eadfe253da9693e83639179e2
Author: William A. Kennington III <william@wkennington.com>
Date:   Sat Sep 23 18:02:14 2023 -0700

    i2c: npcm7xx: Fix callback completion ordering
    
    [ Upstream commit 92e73d807b68b2214fcafca4e130b5300a9d4b3c ]
    
    Sometimes, our completions race with new master transfers and override
    the bus->operation and bus->master_or_slave variables. This causes
    transactions to timeout and kernel crashes less frequently.
    
    To remedy this, we re-order all completions to the very end of the
    function.
    
    Fixes: 56a1485b102e ("i2c: npcm7xx: Add Nuvoton NPCM I2C controller driver")
    Signed-off-by: William A. Kennington III <william@wkennington.com>
    Reviewed-by: Tali Perry <tali.perry1@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c615323a745a3f150bc437bc378a22e1b3bfc10
Author: Wenhua Lin <Wenhua.Lin@unisoc.com>
Date:   Thu Sep 21 20:25:27 2023 +0800

    gpio: pmic-eic-sprd: Add can_sleep flag for PMIC EIC chip
    
    [ Upstream commit 26d9e5640d2130ee16df7b1fb6a908f460ab004c ]
    
    The drivers uses a mutex and I2C bus access in its PMIC EIC chip
    get implementation. This means these functions can sleep and the PMIC EIC
    chip should set the can_sleep property to true.
    
    This will ensure that a warning is printed when trying to get the
    value from a context that potentially can't sleep.
    
    Fixes: 348f3cde84ab ("gpio: Add Spreadtrum PMIC EIC driver support")
    Signed-off-by: Wenhua Lin <Wenhua.Lin@unisoc.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a47ee15a6abbd086b8bf49f165ebcb0a6cc8a74
Author: Nathan Rossi <nathan.rossi@digi.com>
Date:   Mon Aug 14 01:57:00 2023 +0000

    soc: imx8m: Enable OCOTP clock for imx8mm before reading registers
    
    [ Upstream commit 9d1e8275a28f51599d754ce661c91e0a689c0234 ]
    
    Commit 836fb30949d9 ("soc: imx8m: Enable OCOTP clock before reading the
    register") added configuration to enable the OCOTP clock before
    attempting to read from the associated registers.
    
    This same kexec issue is present with the imx8m SoCs that use the
    imx8mm_soc_uid function (e.g. imx8mp). This requires the imx8mm_soc_uid
    function to configure the OCOTP clock before accessing the associated
    registers. This change implements the same clock enable functionality
    that is present in the imx8mq_soc_revision function for the
    imx8mm_soc_uid function.
    
    Signed-off-by: Nathan Rossi <nathan.rossi@digi.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Fixes: 836fb30949d9 ("soc: imx8m: Enable OCOTP clock before reading the register")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c59b882b9b37b652e4716cb5244cfc251be7585
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Wed Sep 20 04:41:09 2023 -0700

    xtensa: boot/lib: fix function prototypes
    
    [ Upstream commit f54d02c8f2cc4b46ba2a3bd8252a6750453b6f2b ]
    
    Add function prototype for gunzip() to the boot library code and make
    exit() and zalloc() static.
    
    arch/xtensa/boot/lib/zmem.c:8:6: warning: no previous prototype for 'exit' [-Wmissing-prototypes]
        8 | void exit (void)
    arch/xtensa/boot/lib/zmem.c:13:7: warning: no previous prototype for 'zalloc' [-Wmissing-prototypes]
       13 | void *zalloc(unsigned size)
    arch/xtensa/boot/lib/zmem.c:35:6: warning: no previous prototype for 'gunzip' [-Wmissing-prototypes]
       35 | void gunzip (void *dst, int dstlen, unsigned char *src, int *lenp)
    
    Fixes: 4bedea945451 ("xtensa: Architecture support for Tensilica Xtensa Part 2")
    Fixes: e7d163f76665 ("xtensa: Removed local copy of zlib and fixed O= support")
    Suggested-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70460e81e2d1bfe1935a4f6579f4a3afc03333c8
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Sep 19 22:21:37 2023 -0700

    xtensa: boot: don't add include-dirs
    
    [ Upstream commit 54d3d7d363823782c3444ddc41bb8cf1edc80514 ]
    
    Drop the -I<include-dir> options to prevent build warnings since there
    is not boot/include directory:
    
    cc1: warning: arch/xtensa/boot/include: No such file or directory [-Wmissing-include-dirs]
    
    Fixes: 437374e9a950 ("restore arch/{ppc/xtensa}/boot cflags")
    Fixes: 4bedea945451 ("xtensa: Architecture support for Tensilica Xtensa Part 2")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: Max Filippov <jcmvbkbc@gmail.com>
    Message-Id: <20230920052139.10570-15-rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc51434b66128a0e96a2258137318c6ef7617aa6
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Sep 19 22:21:36 2023 -0700

    xtensa: iss/network: make functions static
    
    [ Upstream commit 1b59efeb59851277266318f4e0132aa61ce3455e ]
    
    Make 2 functions static to prevent build warnings:
    
    arch/xtensa/platforms/iss/network.c:204:16: warning: no previous prototype for 'tuntap_protocol' [-Wmissing-prototypes]
      204 | unsigned short tuntap_protocol(struct sk_buff *skb)
    arch/xtensa/platforms/iss/network.c:444:6: warning: no previous prototype for 'iss_net_user_timer_expire' [-Wmissing-prototypes]
      444 | void iss_net_user_timer_expire(struct timer_list *unused)
    
    Fixes: 7282bee78798 ("xtensa: Architecture support for Tensilica Xtensa Part 8")
    Fixes: d8479a21a98b ("xtensa: Convert timers to use timer_setup()")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: Max Filippov <jcmvbkbc@gmail.com>
    Message-Id: <20230920052139.10570-14-rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e0f78a84f64d8e6de9fc3c7a5989b119cfdaf01
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Wed Sep 20 04:15:22 2023 -0700

    xtensa: add default definition for XCHAL_HAVE_DIV32
    
    [ Upstream commit 494e87ffa0159b3f879694a9231089707792a44d ]
    
    When variant FSF is set, XCHAL_HAVE_DIV32 is not defined. Add default
    definition for that macro to prevent build warnings:
    
    arch/xtensa/lib/divsi3.S:9:5: warning: "XCHAL_HAVE_DIV32" is not defined, evaluates to 0 [-Wundef]
        9 | #if XCHAL_HAVE_DIV32
    arch/xtensa/lib/modsi3.S:9:5: warning: "XCHAL_HAVE_DIV32" is not defined, evaluates to 0 [-Wundef]
        9 | #if XCHAL_HAVE_DIV32
    
    Fixes: 173d6681380a ("xtensa: remove extra header files")
    Suggested-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: lore.kernel.org/r/202309150556.t0yCdv3g-lkp@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be57fc50dc3c470bc77e9bc1aff3050fc65a4961
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Jan 15 19:13:46 2023 +0100

    firmware: imx-dsp: Fix an error handling path in imx_dsp_setup_channels()
    
    [ Upstream commit e527adfb9b7d9d05a4577c116519e59a2bda4b05 ]
    
    If mbox_request_channel_byname() fails, the memory allocated a few lines
    above still need to be freed before going to the error handling path.
    
    Fixes: 046326989a18 ("firmware: imx: Save channel name for further use")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1df81ea9e4db927607b589ea7bb53c187560fb1e
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Jun 19 12:44:17 2023 +0300

    power: supply: ucs1002: fix error code in ucs1002_get_property()
    
    [ Upstream commit e35059949daa83f8dadf710d0f829ab3c3a72fe2 ]
    
    This function is supposed to return 0 for success instead of returning
    the val->intval.  This makes it the same as the other case statements
    in this function.
    
    Fixes: 81196e2e57fc ("power: supply: ucs1002: fix some health status issues")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/687f64a4-4c6e-4536-8204-98ad1df934e5@moroto.mountain
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6937e44ffb91ad0162a9881499303f77b7b7339d
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Sep 7 08:53:28 2023 +0300

    bus: ti-sysc: Fix SYSC_QUIRK_SWSUP_SIDLE_ACT handling for uart wake-up
    
    [ Upstream commit e5deb8f76e64d94ccef715e75ebafffd0c312d80 ]
    
    The uarts should be tagged with SYSC_QUIRK_SWSUP_SIDLE instead of
    SYSC_QUIRK_SWSUP_SIDLE_ACT. The difference is that SYSC_QUIRK_SWSUP_SIDLE
    is used to force idle target modules rather than block idle during usage.
    
    The SYSC_QUIRK_SWSUP_SIDLE_ACT should disable autoidle and wake-up when
    a target module is active, and configure autoidle and wake-up when a
    target module is inactive. We are missing configuring the target module
    on sysc_disable_module(), and missing toggling of the wake-up bit.
    
    Let's fix the issue to allow uart wake-up to work.
    
    Fixes: fb685f1c190e ("bus: ti-sysc: Handle swsup idle mode quirks")
    Tested-by: Dhruva Gole <d-gole@ti.com>
    Tested-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e75aa86a7d006b127cf250dd46d62d8b0fda9ef
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 11 07:07:38 2023 +0300

    ARM: dts: ti: omap: motorola-mapphone: Fix abe_clkctrl warning on boot
    
    [ Upstream commit ac08bda1569b06b7a62c7b4dd00d4c3b28ceaaec ]
    
    Commit 0840242e8875 ("ARM: dts: Configure clock parent for pwm vibra")
    attempted to fix the PWM settings but ended up causin an additional clock
    reparenting error:
    
    clk: failed to reparent abe-clkctrl:0060:24 to sys_clkin_ck: -22
    
    Only timer9 is in the PER domain and can use the sys_clkin_ck clock source.
    For timer8, the there is no sys_clkin_ck available as it's in the ABE
    domain, instead it should use syc_clk_div_ck. However, for power
    management, we want to use the always on sys_32k_ck instead.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Fixes: 0840242e8875 ("ARM: dts: Configure clock parent for pwm vibra")
    Depends-on: 61978617e905 ("ARM: dts: Add minimal support for Droid Bionic xt875")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b39eae117524093e78511927a99cbc091fbb69c
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Sep 11 07:07:38 2023 +0300

    ARM: dts: ti: omap: Fix bandgap thermal cells addressing for omap3/4
    
    [ Upstream commit 6469b2feade8fd82d224dd3734e146536f3e9f0e ]
    
    Fix "thermal_sys: cpu_thermal: Failed to read thermal-sensors cells: -2"
    error on boot for omap3/4. This is caused by wrong addressing in the dts
    for bandgap sensor for single sensor instances.
    
    Note that omap4-cpu-thermal.dtsi is shared across omap4/5 and dra7, so
    we can't just change the addressing in omap4-cpu-thermal.dtsi.
    
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Fixes: a761d517bbb1 ("ARM: dts: omap3: Add cpu_thermal zone")
    Fixes: 0bbf6c54d100 ("arm: dts: add omap4 CPU thermal data")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcbf770c66efdab29ceae6f0fb1014574e609913
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sun Oct 2 11:20:02 2022 +0200

    ARM: dts: omap: correct indentation
    
    [ Upstream commit 8ae9c7a69fa14e95d032e64d8d758e3f85bee132 ]
    
    Do not use spaces for indentation.
    
    Link: https://lore.kernel.org/r/20221002092002.68880-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Stable-dep-of: 6469b2feade8 ("ARM: dts: ti: omap: Fix bandgap thermal cells addressing for omap3/4")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5e12de36ab3144ec4d35d01c32faa583d774817
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 7 16:11:14 2022 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - gpl-2.0_56.RULE (part 1)
    
    [ Upstream commit 0fdebc5ec2ca492d69df2d93a6a7abade4941aae ]
    
    Based on the normalized pattern:
    
        this file is licensed under the terms of the gnu general public
        license version 2 this program is licensed as is without any warranty
        of any kind whether express or implied
    
    extracted by the scancode license scanner the SPDX license identifier
    
        GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference.
    
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 6469b2feade8 ("ARM: dts: ti: omap: Fix bandgap thermal cells addressing for omap3/4")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6829bc7978e08723d294a3ebb5aacc389858fc45
Author: Timo Alho <talho@nvidia.com>
Date:   Tue Sep 12 14:29:50 2023 +0300

    clk: tegra: fix error return case for recalc_rate
    
    [ Upstream commit a47b44fbb13f5e7a981b4515dcddc93a321ae89c ]
    
    tegra-bpmp clocks driver makes implicit conversion of signed error
    code to unsigned value in recalc_rate operation. The behavior for
    recalc_rate, according to it's specification, should be that "If the
    driver cannot figure out a rate for this clock, it must return 0."
    
    Fixes: ca6f2796eef7 ("clk: tegra: Add BPMP clock driver")
    Signed-off-by: Timo Alho <talho@nvidia.com>
    Signed-off-by: Mikko Perttunen <mperttunen@nvidia.com>
    Link: https://lore.kernel.org/r/20230912112951.2330497-1-cyndis@kapsi.fi
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78277b096d4c17a5b4f6280ecfb517b9f134cec5
Author: Adam Ford <aford173@gmail.com>
Date:   Wed Sep 6 18:34:42 2023 -0500

    bus: ti-sysc: Fix missing AM35xx SoC matching
    
    [ Upstream commit 11729caa520950e17cd81bc43ffc477c46cf791e ]
    
    Commit feaa8baee82a ("bus: ti-sysc: Implement SoC revision handling")
    created a list of SoC types searching for strings based on names
    and wildcards which associates the SoC to different families.
    
    The OMAP34xx and OMAP35xx are treated as SOC_3430 while
    OMAP36xx and OMAP37xx are treated as SOC_3630, but the AM35xx
    isn't listed.
    
    The AM35xx is mostly an OMAP3430, and a later commit a12315d6d270
    ("bus: ti-sysc: Make omap3 gpt12 quirk handling SoC specific") looks
    for the SOC type and behaves in a certain way if it's SOC_3430.
    
    This caused a regression on the AM3517 causing it to return two
    errors:
    
     ti-sysc: probe of 48318000.target-module failed with error -16
     ti-sysc: probe of 49032000.target-module failed with error -16
    
    Fix this by treating the creating SOC_AM35 and inserting it between
    the SOC_3430 and SOC_3630.  If it is treaed the same way as the
    SOC_3430 when checking the status of sysc_check_active_timer,
    the error conditions will disappear.
    
    Fixes: a12315d6d270 ("bus: ti-sysc: Make omap3 gpt12 quirk handling SoC specific")
    Fixes: feaa8baee82a ("bus: ti-sysc: Implement SoC revision handling")
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Message-ID: <20230906233442.270835-1-aford173@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5435a49b3b66b84d71dc1626c462a46c458a89bd
Author: Julien Panis <jpanis@baylibre.com>
Date:   Mon Aug 21 16:24:18 2023 +0200

    bus: ti-sysc: Use fsleep() instead of usleep_range() in sysc_reset()
    
    [ Upstream commit d929b2b7464f95ec01e47f560b1e687482ba8929 ]
    
    The am335x-evm started producing boot errors because of subtle timing
    changes:
    
    Unhandled fault: external abort on non-linefetch (0x1008) at 0xf03c1010
    ...
    sysc_reset from sysc_probe+0xf60/0x1514
    sysc_probe from platform_probe+0x5c/0xbc
    ...
    
    The fix consists in using the appropriate sleep function in sysc reset.
    For flexible sleeping, fsleep is recommended. Here, sysc delay parameter
    can take any value in [0 - 255] us range. As a result, fsleep() should
    be used, calling udelay() for a sysc delay lower than 10 us.
    
    Signed-off-by: Julien Panis <jpanis@baylibre.com>
    Fixes: e709ed70d122 ("bus: ti-sysc: Fix missing reset delay handling")
    Message-ID: <20230821-fix-ti-sysc-reset-v1-1-5a0a5d8fae55@baylibre.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c39df101d8cac6f00e53a68edd5c17ddb39f869f
Author: Marek Vasut <marex@denx.de>
Date:   Mon Apr 3 21:02:42 2023 +0200

    drm/bridge: ti-sn65dsi83: Do not generate HFP/HBP/HSA and EOT packet
    
    [ Upstream commit f4d324fb5628773907dd90342d18f978bd9a6d09 ]
    
    [ Upstream commit ca161b259cc84fe1f4a2ce4c73c3832cf6f713f1 ]
    
    Do not generate the HS front and back porch gaps, the HSA gap and
    EOT packet, as per "SN65DSI83 datasheet SLLSEC1I - SEPTEMBER 2012
    - REVISED OCTOBER 2020", page 22, these packets are not required.
    This makes the TI SN65DSI83 bridge work with Samsung DSIM on i.MX8MN.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Robert Foss <rfoss@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230403190242.224490-1-marex@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bf10fd51ca5ceb294e56726d91eaab6652d83a1
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Sep 5 09:06:56 2023 +0200

    MIPS: Alchemy: only build mmc support helpers if au1xmmc is enabled
    
    [ Upstream commit ef8f8f04a0b25e8f294b24350e8463a8d6a9ba0b ]
    
    While commit d4a5c59a955b ("mmc: au1xmmc: force non-modular build and
    remove symbol_get usage") to be built in, it can still build a kernel
    without MMC support and thuse no mmc_detect_change symbol at all.
    
    Add ifdefs to build the mmc support code in the alchemy arch code
    conditional on mmc support.
    
    Fixes: d4a5c59a955b ("mmc: au1xmmc: force non-modular build and remove symbol_get usage")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Tested-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2640d86876ea8e336fc357877cb7390ee9ec9ee
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Sep 19 11:44:42 2023 +0930

    btrfs: reset destination buffer when read_extent_buffer() gets invalid range
    
    [ Upstream commit 74ee79142c0a344d4eae2eb7012ebc4e82254109 ]
    
    Commit f98b6215d7d1 ("btrfs: extent_io: do extra check for extent buffer
    read write functions") changed how we handle invalid extent buffer range
    for read_extent_buffer().
    
    Previously if the range is invalid we just set the destination to zero,
    but after the patch we do nothing and error out.
    
    This can lead to smatch static checker errors like:
    
      fs/btrfs/print-tree.c:186 print_uuid_item() error: uninitialized symbol 'subvol_id'.
      fs/btrfs/tests/extent-io-tests.c:338 check_eb_bitmap() error: uninitialized symbol 'has'.
      fs/btrfs/tests/extent-io-tests.c:353 check_eb_bitmap() error: uninitialized symbol 'has'.
      fs/btrfs/uuid-tree.c:203 btrfs_uuid_tree_remove() error: uninitialized symbol 'read_subid'.
      fs/btrfs/uuid-tree.c:353 btrfs_uuid_tree_iterate() error: uninitialized symbol 'subid_le'.
      fs/btrfs/uuid-tree.c:72 btrfs_uuid_tree_lookup() error: uninitialized symbol 'data'.
      fs/btrfs/volumes.c:7415 btrfs_dev_stats_value() error: uninitialized symbol 'val'.
    
    Fix those warnings by reverting back to the old memset() behavior.
    By this we keep the static checker happy and would still make a lot of
    noise when such invalid ranges are passed in.
    
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Fixes: f98b6215d7d1 ("btrfs: extent_io: do extra check for extent buffer read write functions")
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a541999f31fcb10ea50eba2a563e6c451fd5c7d
Author: Nilesh Javali <njavali@marvell.com>
Date:   Thu Aug 31 16:51:46 2023 +0530

    scsi: qla2xxx: Use raw_smp_processor_id() instead of smp_processor_id()
    
    [ Upstream commit 59f10a05b5c7b675256a66e3161741239889ff80 ]
    
    The following call trace was observed:
    
    localhost kernel: nvme nvme0: NVME-FC{0}: controller connect complete
    localhost kernel: BUG: using smp_processor_id() in preemptible [00000000] code: kworker/u129:4/75092
    localhost kernel: nvme nvme0: NVME-FC{0}: new ctrl: NQN "nqn.1992-08.com.netapp:sn.b42d198afb4d11ecad6d00a098d6abfa:subsystem.PR_Channel2022_RH84_subsystem_291"
    localhost kernel: caller is qla_nvme_post_cmd+0x216/0x1380 [qla2xxx]
    localhost kernel: CPU: 6 PID: 75092 Comm: kworker/u129:4 Kdump: loaded Tainted: G    B   W  OE    --------- ---  5.14.0-70.22.1.el9_0.x86_64+debug #1
    localhost kernel: Hardware name: HPE ProLiant XL420 Gen10/ProLiant XL420 Gen10, BIOS U39 01/13/2022
    localhost kernel: Workqueue: nvme-wq nvme_async_event_work [nvme_core]
    localhost kernel: Call Trace:
    localhost kernel: dump_stack_lvl+0x57/0x7d
    localhost kernel: check_preemption_disabled+0xc8/0xd0
    localhost kernel: qla_nvme_post_cmd+0x216/0x1380 [qla2xxx]
    
    Use raw_smp_processor_id() instead of smp_processor_id().
    
    Also use queue_work() across the driver instead of queue_work_on() thus
    avoiding usage of smp_processor_id() when CONFIG_DEBUG_PREEMPT is enabled.
    
    Cc: stable@vger.kernel.org
    Suggested-by: John Garry <john.g.garry@oracle.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Link: https://lore.kernel.org/r/20230831112146.32595-2-njavali@marvell.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 532a239605667320f4fd7473e416b718d0a2fbbb
Author: Shreyas Deodhar <sdeodhar@marvell.com>
Date:   Wed Dec 21 20:39:32 2022 -0800

    scsi: qla2xxx: Select qpair depending on which CPU post_cmd() gets called
    
    [ Upstream commit 1d201c81d4cc6840735bbcc99e6031503e5cf3b8 ]
    
    In current I/O path, Tx and Rx may not be processed on same CPU. This may
    lead to thrashing and optimum performance may not be achieved.
    
    Pick qpair such that Tx and Rx are processed on same CPU.
    
    Signed-off-by: Shreyas Deodhar <sdeodhar@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: 59f10a05b5c7 ("scsi: qla2xxx: Use raw_smp_processor_id() instead of smp_processor_id()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6642b4eb083b0192e905d200c48d36891a8add56
Author: Werner Fischer <devlists@wefi.net>
Date:   Tue Aug 29 13:33:58 2023 +0200

    ata: ahci: Add Elkhart Lake AHCI controller
    
    [ Upstream commit 2a2df98ec592667927b5c1351afa6493ea125c9f ]
    
    Elkhart Lake is the successor of Apollo Lake and Gemini Lake. These
    CPUs and their PCHs are used in mobile and embedded environments.
    
    With this patch I suggest that Elkhart Lake SATA controllers [1] should
    use the default LPM policy for mobile chipsets.
    The disadvantage of missing hot-plug support with this setting should
    not be an issue, as those CPUs are used in embedded environments and
    not in servers with hot-plug backplanes.
    
    We discovered that the Elkhart Lake SATA controllers have been missing
    in ahci.c after a customer reported the throttling of his SATA SSD
    after a short period of higher I/O. We determined the high temperature
    of the SSD controller in idle mode as the root cause for that.
    
    Depending on the used SSD, we have seen up to 1.8 Watt lower system
    idle power usage and up to 30°C lower SSD controller temperatures in
    our tests, when we set med_power_with_dipm manually. I have provided a
    table showing seven different SATA SSDs from ATP, Intel/Solidigm and
    Samsung [2].
    
    Intel lists a total of 3 SATA controller IDs (4B60, 4B62, 4B63) in [1]
    for those mobile PCHs.
    This commit just adds 0x4b63 as I do not have test systems with 0x4b60
    and 0x4b62 SATA controllers.
    I have tested this patch with a system which uses 0x4b63 as SATA
    controller.
    
    [1] https://sata-io.org/product/8803
    [2] https://www.thomas-krenn.com/en/wiki/SATA_Link_Power_Management#Example_LES_v4
    
    Signed-off-by: Werner Fischer <devlists@wefi.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 072611960741cf9d94d455ae411dd050325b2759
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Feb 25 11:23:17 2022 -0600

    ata: ahci: Rename board_ahci_mobile
    
    [ Upstream commit 099849af27f74981c7e660dd93ff6a987307c1f2 ]
    
    This board definition was originally created for mobile devices to
    designate default link power managmeent policy to influence runtime
    power consumption.
    
    As this is interesting for more than just mobile designs, rename the
    board to `board_ahci_low_power` to make it clear it is about default
    policy.
    
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 2a2df98ec592 ("ata: ahci: Add Elkhart Lake AHCI controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8274154712a0876cdd2075486a30aad7c88bd428
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Wed Jan 5 16:36:18 2022 +0100

    ata: ahci: Add support for AMD A85 FCH (Hudson D4)
    
    [ Upstream commit a17ab7aba5df4135ef77d7f6d7105e1ea414936f ]
    
    Add support for the AMD A85 FCH (Hudson D4) AHCI adapter.
    
    Since this adapter does not require the default 200 ms debounce delay
    in sata_link_resume(), create a new board board_ahci_no_debounce_delay
    with the link flag ATA_LFLAG_NO_DEBOUNCE_DELAY, and, for now, configure
    the AMD A85 FCH (Hudson D4) to use it. On the ASUS F2A85-M PRO it
    reduces the Linux kernel boot time by the expected 200 ms from 787 ms
    to 585 ms.
    
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 2a2df98ec592 ("ata: ahci: Add Elkhart Lake AHCI controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd69c74dca70126a1cc8effcad79db236dfa23f8
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Wed Jan 5 16:36:16 2022 +0100

    ata: libata: Rename link flag ATA_LFLAG_NO_DB_DELAY
    
    [ Upstream commit b9ba367c513dbc165dd6c01266a59db4be2a3564 ]
    
    Rename the link flag ATA_LFLAG_NO_DB_DELAY to
    ATA_LFLAG_NO_DEBOUNCE_DELAY. The new name is longer, but clearer.
    
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 2a2df98ec592 ("ata: ahci: Add Elkhart Lake AHCI controller")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5ba6d9d6bec9b4b84faf8cc780dd2c5a954c4a4
Author: Xiao Liang <shaw.leon@gmail.com>
Date:   Fri Aug 25 13:33:27 2023 +0800

    netfilter: nft_exthdr: Fix non-linear header modification
    
    [ Upstream commit 28427f368f0e08d504ed06e74bc7cc79d6d06511 ]
    
    Fix skb_ensure_writable() size. Don't use nft_tcp_header_pointer() to
    make it explicit that pointers point to the packet (not local buffer).
    
    Fixes: 99d1712bc41c ("netfilter: exthdr: tcp option set support")
    Fixes: 7890cbea66e7 ("netfilter: exthdr: add support for tcp option removal")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiao Liang <shaw.leon@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ca3a1b0f474c25a85fe0dc913b2db2ea1e0be67
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Jan 28 13:00:36 2022 +0100

    netfilter: exthdr: add support for tcp option removal
    
    [ Upstream commit 7890cbea66e78a3a6037b2a12827118d7243270b ]
    
    This allows to replace a tcp option with nop padding to selectively disable
    a particular tcp option.
    
    Optstrip mode is chosen when userspace passes the exthdr expression with
    neither a source nor a destination register attribute.
    
    This is identical to xtables TCPOPTSTRIP extension.
    The only difference is that TCPOPTSTRIP allows to pass in a bitmap
    of options to remove rather than a single number.
    
    Unlike TCPOPTSTRIP this expression can be used multiple times
    in the same rule to get the same effect.
    
    We could add a new nested attribute later on in case there is a
    use case for single-expression-multi-remove.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Stable-dep-of: 28427f368f0e ("netfilter: nft_exthdr: Fix non-linear header modification")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb6f65780c9ca146a8991439659a6c9d847dfcb6
Author: Werner Sembach <wse@tuxedocomputers.com>
Date:   Wed Jul 12 11:56:51 2023 -0700

    Input: i8042 - add quirk for TUXEDO Gemini 17 Gen1/Clevo PD70PN
    
    [ Upstream commit eb09074bdb05ffd6bfe77f8b4a41b76ef78c997b ]
    
    The touchpad of this device is both connected via PS/2 and i2c. This causes
    strange behavior when both driver fight for control. The easy fix is to
    prevent the PS/2 driver from accessing the mouse port as the full feature
    set of the touchpad is only supported in the i2c interface anyway.
    
    The strange behavior in this case is, that when an external screen is
    connected and the notebook is closed, the pointer on the external screen is
    moving to the lower right corner. When the notebook is opened again, this
    movement stops, but the touchpad clicks are unresponsive afterwards until
    reboot.
    
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230607173331.851192-1-wse@tuxedocomputers.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 191fc23cfa9a9e6434b80b0afd8842472883792f
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Oct 1 14:28:34 2022 -0700

    Input: i8042 - rename i8042-x86ia64io.h to i8042-acpipnpio.h
    
    [ Upstream commit 8761b9b580d53162cca7868385069c0d4354c9e0 ]
    
    Now i8042-x86ia64io.h is shared by X86 and IA64, but it can be shared
    by more platforms (such as LoongArch) with ACPI firmware on which PNP
    typed keyboard and mouse is configured in DSDT. So rename it to i8042-
    acpipnpio.h.
    
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Reviewed-by: Mattijs Korpershoek <mkorpershoek@baylibre.com>
    Link: https://lore.kernel.org/r/20220917064020.1639709-1-chenhuacai@loongson.cn
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Stable-dep-of: eb09074bdb05 ("Input: i8042 - add quirk for TUXEDO Gemini 17 Gen1/Clevo PD70PN")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d2b57c0bc40941ea651c967b07afe565f09d473
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Sep 21 18:01:56 2023 -0700

    xfs: fix xfs_inodegc_stop racing with mod_delayed_work
    
    [ Upstream commit 2254a7396a0ca6309854948ee1c0a33fa4268cec ]
    
    syzbot reported this warning from the faux inodegc shrinker that tries
    to kick off inodegc work:
    
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 102 at kernel/workqueue.c:1445 __queue_work+0xd44/0x1120 kernel/workqueue.c:1444
    RIP: 0010:__queue_work+0xd44/0x1120 kernel/workqueue.c:1444
    Call Trace:
     __queue_delayed_work+0x1c8/0x270 kernel/workqueue.c:1672
     mod_delayed_work_on+0xe1/0x220 kernel/workqueue.c:1746
     xfs_inodegc_shrinker_scan fs/xfs/xfs_icache.c:2212 [inline]
     xfs_inodegc_shrinker_scan+0x250/0x4f0 fs/xfs/xfs_icache.c:2191
     do_shrink_slab+0x428/0xaa0 mm/vmscan.c:853
     shrink_slab+0x175/0x660 mm/vmscan.c:1013
     shrink_one+0x502/0x810 mm/vmscan.c:5343
     shrink_many mm/vmscan.c:5394 [inline]
     lru_gen_shrink_node mm/vmscan.c:5511 [inline]
     shrink_node+0x2064/0x35f0 mm/vmscan.c:6459
     kswapd_shrink_node mm/vmscan.c:7262 [inline]
     balance_pgdat+0xa02/0x1ac0 mm/vmscan.c:7452
     kswapd+0x677/0xd60 mm/vmscan.c:7712
     kthread+0x2e8/0x3a0 kernel/kthread.c:376
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    This warning corresponds to this code in __queue_work:
    
            /*
             * For a draining wq, only works from the same workqueue are
             * allowed. The __WQ_DESTROYING helps to spot the issue that
             * queues a new work item to a wq after destroy_workqueue(wq).
             */
            if (unlikely(wq->flags & (__WQ_DESTROYING | __WQ_DRAINING) &&
                         WARN_ON_ONCE(!is_chained_work(wq))))
                    return;
    
    For this to trip, we must have a thread draining the inodedgc workqueue
    and a second thread trying to queue inodegc work to that workqueue.
    This can happen if freezing or a ro remount race with reclaim poking our
    faux inodegc shrinker and another thread dropping an unlinked O_RDONLY
    file:
    
    Thread 0        Thread 1        Thread 2
    
    xfs_inodegc_stop
    
                                    xfs_inodegc_shrinker_scan
                                    xfs_is_inodegc_enabled
                                    <yes, will continue>
    
    xfs_clear_inodegc_enabled
    xfs_inodegc_queue_all
    <list empty, do not queue inodegc worker>
    
                    xfs_inodegc_queue
                    <add to list>
                    xfs_is_inodegc_enabled
                    <no, returns>
    
    drain_workqueue
    <set WQ_DRAINING>
    
                                    llist_empty
                                    <no, will queue list>
                                    mod_delayed_work_on(..., 0)
                                    __queue_work
                                    <sees WQ_DRAINING, kaboom>
    
    In other words, everything between the access to inodegc_enabled state
    and the decision to poke the inodegc workqueue requires some kind of
    coordination to avoid the WQ_DRAINING state.  We could perhaps introduce
    a lock here, but we could also try to eliminate WQ_DRAINING from the
    picture.
    
    We could replace the drain_workqueue call with a loop that flushes the
    workqueue and queues workers as long as there is at least one inode
    present in the per-cpu inodegc llists.  We've disabled inodegc at this
    point, so we know that the number of queued inodes will eventually hit
    zero as long as xfs_inodegc_start cannot reactivate the workers.
    
    There are four callers of xfs_inodegc_start.  Three of them come from the
    VFS with s_umount held: filesystem thawing, failed filesystem freezing,
    and the rw remount transition.  The fourth caller is mounting rw (no
    remount or freezing possible).
    
    There are three callers ofs xfs_inodegc_stop.  One is unmounting (no
    remount or thaw possible).  Two of them come from the VFS with s_umount
    held: fs freezing and ro remount transition.
    
    Hence, it is correct to replace the drain_workqueue call with a loop
    that drains the inodegc llists.
    
    Fixes: 6191cf3ad59f ("xfs: flush inodegc workqueue tasks before cancel")
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 657f842859c41b32f799a5cf633a91f4e613567b
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Sep 21 18:01:55 2023 -0700

    xfs: disable reaping in fscounters scrub
    
    [ Upstream commit 2d5f38a31980d7090f5bf91021488dc61a0ba8ee ]
    
    The fscounters scrub code doesn't work properly because it cannot
    quiesce updates to the percpu counters in the filesystem, hence it
    returns false corruption reports.  This has been fixed properly in
    one of the online repair patchsets that are under review by replacing
    the xchk_disable_reaping calls with an exclusive filesystem freeze.
    Disabling background gc isn't sufficient to fix the problem.
    
    In other words, scrub doesn't need to call xfs_inodegc_stop, which is
    just as well since it wasn't correct to allow scrub to call
    xfs_inodegc_start when something else could be calling xfs_inodegc_stop
    (e.g. trying to freeze the filesystem).
    
    Neuter the scrubber for now, and remove the xchk_*_reaping functions.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8444467eadb2885b27ae003e2a9bc654bf45681e
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Sep 21 18:01:54 2023 -0700

    xfs: check that per-cpu inodegc workers actually run on that cpu
    
    [ Upstream commit b37c4c8339cd394ea6b8b415026603320a185651 ]
    
    Now that we've allegedly worked out the problem of the per-cpu inodegc
    workers being scheduled on the wrong cpu, let's put in a debugging knob
    to let us know if a worker ever gets mis-scheduled again.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67db9ecb84d56f4aeb6b7d79ed2b54d04ad83572
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Thu Sep 21 18:01:53 2023 -0700

    xfs: explicitly specify cpu when forcing inodegc delayed work to run immediately
    
    [ Upstream commit 03e0add80f4cf3f7393edb574eeb3a89a1db7758 ]
    
    I've been noticing odd racing behavior in the inodegc code that could
    only be explained by one cpu adding an inode to its inactivation llist
    at the same time that another cpu is processing that cpu's llist.
    Preemption is disabled between get/put_cpu_ptr, so the only explanation
    is scheduler mayhem.  I inserted the following debug code into
    xfs_inodegc_worker (see the next patch):
    
            ASSERT(gc->cpu == smp_processor_id());
    
    This assertion tripped during overnight tests on the arm64 machines, but
    curiously not on x86_64.  I think we haven't observed any resource leaks
    here because the lockfree list code can handle simultaneous llist_add
    and llist_del_all functions operating on the same list.  However, the
    whole point of having percpu inodegc lists is to take advantage of warm
    memory caches by inactivating inodes on the last processor to touch the
    inode.
    
    The incorrect scheduling seems to occur after an inodegc worker is
    subjected to mod_delayed_work().  This wraps mod_delayed_work_on with
    WORK_CPU_UNBOUND specified as the cpu number.  Unbound allows for
    scheduling on any cpu, not necessarily the same one that scheduled the
    work.
    
    Because preemption is disabled for as long as we have the gc pointer, I
    think it's safe to use current_cpu() (aka smp_processor_id) to queue the
    delayed work item on the correct cpu.
    
    Fixes: 7cf2b0f9611b ("xfs: bound maximum wait time for inodegc work")
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99e65f075e6cf43647cb18b8a04f1da66575be09
Author: Dave Chinner <dchinner@redhat.com>
Date:   Thu Sep 21 18:01:52 2023 -0700

    xfs: introduce xfs_inodegc_push()
    
    [ Upstream commit 5e672cd69f0a534a445df4372141fd0d1d00901d ]
    
    The current blocking mechanism for pushing the inodegc queue out to
    disk can result in systems becoming unusable when there is a long
    running inodegc operation. This is because the statfs()
    implementation currently issues a blocking flush of the inodegc
    queue and a significant number of common system utilities will call
    statfs() to discover something about the underlying filesystem.
    
    This can result in userspace operations getting stuck on inodegc
    progress, and when trying to remove a heavily reflinked file on slow
    storage with a full journal, this can result in delays measuring in
    hours.
    
    Avoid this problem by adding "push" function that expedites the
    flushing of the inodegc queue, but doesn't wait for it to complete.
    
    Convert xfs_fs_statfs() and xfs_qm_scall_getquota() to use this
    mechanism so they don't block but still ensure that queued
    operations are expedited.
    
    Fixes: ab23a7768739 ("xfs: per-cpu deferred inode inactivation queues")
    Reported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    [djwong: fix _getquota_next to use _inodegc_push too]
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2df3819632403ebbe764f135ea155321cfa4d527
Author: Dave Chinner <dchinner@redhat.com>
Date:   Thu Sep 21 18:01:51 2023 -0700

    xfs: bound maximum wait time for inodegc work
    
    [ Upstream commit 7cf2b0f9611b9971d663e1fc3206eeda3b902922 ]
    
    Currently inodegc work can sit queued on the per-cpu queue until
    the workqueue is either flushed of the queue reaches a depth that
    triggers work queuing (and later throttling). This means that we
    could queue work that waits for a long time for some other event to
    trigger flushing.
    
    Hence instead of just queueing work at a specific depth, use a
    delayed work that queues the work at a bound time. We can still
    schedule the work immediately at a given depth, but we no long need
    to worry about leaving a number of items on the list that won't get
    processed until external events prevail.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Leah Rumancik <leah.rumancik@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08dc21596751d6f2bafa9684a1dc5c1309514300
Author: Liang He <windhl@126.com>
Date:   Wed Mar 22 12:29:51 2023 +0800

    i2c: mux: gpio: Add missing fwnode_handle_put()
    
    [ Upstream commit db6aee6083a56ac4a6cd1b08fff7938072bcd0a3 ]
    
    In i2c_mux_gpio_probe_fw(), we should add fwnode_handle_put()
    when break out of the iteration device_for_each_child_node()
    as it will automatically increase and decrease the refcounter.
    
    Fixes: 98b2b712bc85 ("i2c: i2c-mux-gpio: Enable this driver in ACPI land")
    Signed-off-by: Liang He <windhl@126.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f912d9d87421ba944f08f9524757de2d8eff3c12
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Nov 15 17:41:59 2021 +0200

    i2c: mux: gpio: Replace custom acpi_get_local_address()
    
    [ Upstream commit 379920f5c013c49e0a740634972faf77e26d4ac3 ]
    
    Recently ACPI gained the acpi_get_local_address() API which may be used
    instead of home grown i2c_mux_gpio_get_acpi_adr().
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Acked-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Stable-dep-of: db6aee6083a5 ("i2c: mux: gpio: Add missing fwnode_handle_put()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1aa39eee57f61903ecfb1a01b387077f5fd4a7c2
Author: Xiaoke Wang <xkernel.wang@foxmail.com>
Date:   Thu Mar 3 20:39:14 2022 +0800

    i2c: mux: demux-pinctrl: check the return value of devm_kstrdup()
    
    [ Upstream commit 7c0195fa9a9e263df204963f88a22b21688ffb66 ]
    
    devm_kstrdup() returns pointer to allocated string on success,
    NULL on failure. So it is better to check the return value of it.
    
    Fixes: e35478eac030 ("i2c: mux: demux-pinctrl: run properly with multiple instances")
    Signed-off-by: Xiaoke Wang <xkernel.wang@foxmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9910b1411e7e56133407d3f94ee3ecc35361fb38
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Sep 3 08:13:21 2023 +0200

    gpio: tb10x: Fix an error handling path in tb10x_gpio_probe()
    
    [ Upstream commit b547b5e52a0587e6b25ea520bf2f9e03d00cbcb6 ]
    
    If an error occurs after a successful irq_domain_add_linear() call, it
    should be undone by a corresponding irq_domain_remove(), as already done
    in the remove function.
    
    Fixes: c6ce2b6bffe5 ("gpio: add TB10x GPIO driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7acb7031758141225844bea073860b48fd92092
Author: Sasha Levin <sashal@kernel.org>
Date:   Sun Sep 24 14:30:44 2023 -0400

    Fix up backport of 136191703038 ("interconnect: Teach lockdep about icc_bw_lock order")
    
    Add a missing include to fix the following build error:
    
    drivers/interconnect/core.c: In function 'icc_init':
    drivers/interconnect/core.c:1148:9: error: implicit declaration of function 'fs_reclaim_acquire' [-Werror=implicit-function-declaration]
     1148 |         fs_reclaim_acquire(GFP_KERNEL);
          |         ^~~~~~~~~~~~~~~~~~
    drivers/interconnect/core.c:1150:9: error: implicit declaration of function 'fs_reclaim_release' [-Werror=implicit-function-declaration]
     1150 |         fs_reclaim_release(GFP_KERNEL);
          |         ^~~~~~~~~~~~~~~~~~
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d645206e9be2a2da14d39b6bfee22eed78e2a0cd
Author: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date:   Tue Sep 19 10:03:31 2023 -0700

    igc: Expose tx-usecs coalesce setting to user
    
    [ Upstream commit 1703b2e0de653b459ca6230be32ce7f2ea0ae7ee ]
    
    When users attempt to obtain the coalesce setting using the
    ethtool command, current code always returns 0 for tx-usecs.
    This is because I225/6 always uses a queue pair setting, hence
    tx_coalesce_usecs does not return a value during the
    igc_ethtool_get_coalesce() callback process. The pair queue
    condition checking in igc_ethtool_get_coalesce() is removed by
    this patch so that the user gets information of the value of tx-usecs.
    
    Even if i225/6 is using queue pair setting, there is no harm in
    notifying the user of the tx-usecs. The implementation of the current
    code may have previously been a copy of the legacy code i210.
    Since I225 has the queue pair setting enabled, tx-usecs will always adhere
    to the user-set rx-usecs value. An error message will appear when the user
    attempts to set the tx-usecs value for the input parameters because,
    by default, they should only set the rx-usecs value.
    
    This patch also adds the helper function to get the
    previous rx coalesce value similar to tx coalesce.
    
    How to test:
    User can get the coalesce value using ethtool command.
    
    Example command:
    Get: ethtool -c <interface>
    
    Previous output:
    
    rx-usecs: 3
    rx-frames: n/a
    rx-usecs-irq: n/a
    rx-frames-irq: n/a
    
    tx-usecs: 0
    tx-frames: n/a
    tx-usecs-irq: n/a
    tx-frames-irq: n/a
    
    New output:
    
    rx-usecs: 3
    rx-frames: n/a
    rx-usecs-irq: n/a
    rx-frames-irq: n/a
    
    tx-usecs: 3
    tx-frames: n/a
    tx-usecs-irq: n/a
    tx-frames-irq: n/a
    
    Fixes: 8c5ad0dae93c ("igc: Add ethtool support")
    Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20230919170331.1581031-1-anthony.l.nguyen@intel.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7a2bf6faa8228e7804485dbcfc03870fae03359
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon Sep 18 17:36:10 2023 +0200

    bnxt_en: Flush XDP for bnxt_poll_nitroa0()'s NAPI
    
    [ Upstream commit edc0140cc3b7b91874ebe70eb7d2a851e8817ccc ]
    
    bnxt_poll_nitroa0() invokes bnxt_rx_pkt() which can run a XDP program
    which in turn can return XDP_REDIRECT. bnxt_rx_pkt() is also used by
    __bnxt_poll_work() which flushes (xdp_do_flush()) the packets after each
    round. bnxt_poll_nitroa0() lacks this feature.
    xdp_do_flush() should be invoked before leaving the NAPI callback.
    
    Invoke xdp_do_flush() after a redirect in bnxt_poll_nitroa0() NAPI.
    
    Cc: Michael Chan <michael.chan@broadcom.com>
    Fixes: f18c2b77b2e4e ("bnxt_en: optimized XDP_REDIRECT support")
    Reviewed-by: Andy Gospodarek <gospo@broadcom.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56d2418a079a16d875b6ab30dc597afd8de4b94c
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon Sep 18 17:36:09 2023 +0200

    net: ena: Flush XDP packets on error.
    
    [ Upstream commit 6f411fb5ca9419090bee6a0a46425e0a5060b734 ]
    
    xdp_do_flush() should be invoked before leaving the NAPI poll function
    after a XDP-redirect. This is not the case if the driver leaves via
    the error path (after having a redirect in one of its previous
    iterations).
    
    Invoke xdp_do_flush() also in the error path.
    
    Cc: Arthur Kiyanovski <akiyano@amazon.com>
    Cc: David Arinzon <darinzon@amazon.com>
    Cc: Noam Dagan <ndagan@amazon.com>
    Cc: Saeed Bishara <saeedb@amazon.com>
    Cc: Shay Agroskin <shayagr@amazon.com>
    Fixes: a318c70ad152b ("net: ena: introduce XDP redirect implementation")
    Acked-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07b569051f6e939c1ececeee35c569c2d53ffdbe
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed Sep 20 12:46:27 2023 +0200

    locking/seqlock: Do the lockdep annotation before locking in do_write_seqcount_begin_nested()
    
    [ Upstream commit 41b43b6c6e30a832c790b010a06772e793bca193 ]
    
    It was brought up by Tetsuo that the following sequence:
    
       write_seqlock_irqsave()
       printk_deferred_enter()
    
    could lead to a deadlock if the lockdep annotation within
    write_seqlock_irqsave() triggers.
    
    The problem is that the sequence counter is incremented before the lockdep
    annotation is performed. The lockdep splat would then attempt to invoke
    printk() but the reader side, of the same seqcount, could have a
    tty_port::lock acquired waiting for the sequence number to become even again.
    
    The other lockdep annotations come before the actual locking because "we
    want to see the locking error before it happens". There is no reason why
    seqcount should be different here.
    
    Do the lockdep annotation first then perform the locking operation (the
    sequence increment).
    
    Fixes: 1ca7d67cf5d5a ("seqcount: Add lockdep functionality to seqcount/seqlock structures")
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20230920104627._DTHgPyA@linutronix.de
    
    Closes: https://lore.kernel.org/20230621130641.-5iueY1I@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a70dbdede0c7173d4a44247a454d1015e361b72d
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Tue Sep 19 20:04:45 2023 +0200

    netfilter: ipset: Fix race between IPSET_CMD_CREATE and IPSET_CMD_SWAP
    
    [ Upstream commit 7433b6d2afd512d04398c73aa984d1e285be125b ]
    
    Kyle Zeng reported that there is a race between IPSET_CMD_ADD and IPSET_CMD_SWAP
    in netfilter/ip_set, which can lead to the invocation of `__ip_set_put` on a
    wrong `set`, triggering the `BUG_ON(set->ref == 0);` check in it.
    
    The race is caused by using the wrong reference counter, i.e. the ref counter instead
    of ref_netlink.
    
    Fixes: 24e227896bbf ("netfilter: ipset: Add schedule point in call_ad().")
    Reported-by: Kyle Zeng <zengyhkyle@gmail.com>
    Closes: https://lore.kernel.org/netfilter-devel/ZPZqetxOmH+w%2Fmyc@westworld/#r
    Tested-by: Kyle Zeng <zengyhkyle@gmail.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0dcc9b4097d860d9af52db5366a8755c13468d13
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 15 15:18:11 2023 +0200

    netfilter: nf_tables: disable toggling dormant table state more than once
    
    [ Upstream commit c9bd26513b3a11b3adb3c2ed8a31a01a87173ff1 ]
    
    nft -f -<<EOF
    add table ip t
    add table ip t { flags dormant; }
    add chain ip t c { type filter hook input priority 0; }
    add table ip t
    EOF
    
    Triggers a splat from nf core on next table delete because we lose
    track of right hook register state:
    
    WARNING: CPU: 2 PID: 1597 at net/netfilter/core.c:501 __nf_unregister_net_hook
    RIP: 0010:__nf_unregister_net_hook+0x41b/0x570
     nf_unregister_net_hook+0xb4/0xf0
     __nf_tables_unregister_hook+0x160/0x1d0
    [..]
    
    The above should have table in *active* state, but in fact no
    hooks were registered.
    
    Reject on/off/on games rather than attempting to fix this.
    
    Fixes: 179d9ba5559a ("netfilter: nf_tables: fix table flag updates")
    Reported-by: "Lee, Cherie-Anne" <cherie.lee@starlabs.sg>
    Cc: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Cc: info@starlabs.sg
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea82139e6e3561100d38d14401d57c0ea93fc07e
Author: Artem Chernyshev <artem.chernyshev@red-soft.ru>
Date:   Mon Sep 18 16:56:23 2023 +0300

    net: rds: Fix possible NULL-pointer dereference
    
    [ Upstream commit f1d95df0f31048f1c59092648997686e3f7d9478 ]
    
    In rds_rdma_cm_event_handler_cmn() check, if conn pointer exists
    before dereferencing it as rdma_set_service_type() argument
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: fd261ce6a30e ("rds: rdma: update rdma transport for tos")
    Signed-off-by: Artem Chernyshev <artem.chernyshev@red-soft.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd05eec2ee0cc396813a32ef675634e403748255
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Mon Sep 18 20:30:11 2023 +0800

    team: fix null-ptr-deref when team device type is changed
    
    [ Upstream commit 492032760127251e5540a5716a70996bacf2a3fd ]
    
    Get a null-ptr-deref bug as follows with reproducer [1].
    
    BUG: kernel NULL pointer dereference, address: 0000000000000228
    ...
    RIP: 0010:vlan_dev_hard_header+0x35/0x140 [8021q]
    ...
    Call Trace:
     <TASK>
     ? __die+0x24/0x70
     ? page_fault_oops+0x82/0x150
     ? exc_page_fault+0x69/0x150
     ? asm_exc_page_fault+0x26/0x30
     ? vlan_dev_hard_header+0x35/0x140 [8021q]
     ? vlan_dev_hard_header+0x8e/0x140 [8021q]
     neigh_connected_output+0xb2/0x100
     ip6_finish_output2+0x1cb/0x520
     ? nf_hook_slow+0x43/0xc0
     ? ip6_mtu+0x46/0x80
     ip6_finish_output+0x2a/0xb0
     mld_sendpack+0x18f/0x250
     mld_ifc_work+0x39/0x160
     process_one_work+0x1e6/0x3f0
     worker_thread+0x4d/0x2f0
     ? __pfx_worker_thread+0x10/0x10
     kthread+0xe5/0x120
     ? __pfx_kthread+0x10/0x10
     ret_from_fork+0x34/0x50
     ? __pfx_kthread+0x10/0x10
     ret_from_fork_asm+0x1b/0x30
    
    [1]
    $ teamd -t team0 -d -c '{"runner": {"name": "loadbalance"}}'
    $ ip link add name t-dummy type dummy
    $ ip link add link t-dummy name t-dummy.100 type vlan id 100
    $ ip link add name t-nlmon type nlmon
    $ ip link set t-nlmon master team0
    $ ip link set t-nlmon nomaster
    $ ip link set t-dummy up
    $ ip link set team0 up
    $ ip link set t-dummy.100 down
    $ ip link set t-dummy.100 master team0
    
    When enslave a vlan device to team device and team device type is changed
    from non-ether to ether, header_ops of team device is changed to
    vlan_header_ops. That is incorrect and will trigger null-ptr-deref
    for vlan->real_dev in vlan_dev_hard_header() because team device is not
    a vlan device.
    
    Cache eth_header_ops in team_setup(), then assign cached header_ops to
    header_ops of team net device when its type is changed from non-ether
    to ether to fix the bug.
    
    Fixes: 1d76efe1577b ("team: add support for non-ethernet devices")
    Suggested-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230918123011.1884401-1-william.xuanziyang@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bc97117b51d68d5cea8f5351cca2d8c4153f394
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Sep 18 09:13:51 2023 +0000

    net: bridge: use DEV_STATS_INC()
    
    [ Upstream commit 44bdb313da57322c9b3c108eb66981c6ec6509f4 ]
    
    syzbot/KCSAN reported data-races in br_handle_frame_finish() [1]
    This function can run from multiple cpus without mutual exclusion.
    
    Adopt SMP safe DEV_STATS_INC() to update dev->stats fields.
    
    Handles updates to dev->stats.tx_dropped while we are at it.
    
    [1]
    BUG: KCSAN: data-race in br_handle_frame_finish / br_handle_frame_finish
    
    read-write to 0xffff8881374b2178 of 8 bytes by interrupt on cpu 1:
    br_handle_frame_finish+0xd4f/0xef0 net/bridge/br_input.c:189
    br_nf_hook_thresh+0x1ed/0x220
    br_nf_pre_routing_finish_ipv6+0x50f/0x540
    NF_HOOK include/linux/netfilter.h:304 [inline]
    br_nf_pre_routing_ipv6+0x1e3/0x2a0 net/bridge/br_netfilter_ipv6.c:178
    br_nf_pre_routing+0x526/0xba0 net/bridge/br_netfilter_hooks.c:508
    nf_hook_entry_hookfn include/linux/netfilter.h:144 [inline]
    nf_hook_bridge_pre net/bridge/br_input.c:272 [inline]
    br_handle_frame+0x4c9/0x940 net/bridge/br_input.c:417
    __netif_receive_skb_core+0xa8a/0x21e0 net/core/dev.c:5417
    __netif_receive_skb_one_core net/core/dev.c:5521 [inline]
    __netif_receive_skb+0x57/0x1b0 net/core/dev.c:5637
    process_backlog+0x21f/0x380 net/core/dev.c:5965
    __napi_poll+0x60/0x3b0 net/core/dev.c:6527
    napi_poll net/core/dev.c:6594 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6727
    __do_softirq+0xc1/0x265 kernel/softirq.c:553
    run_ksoftirqd+0x17/0x20 kernel/softirq.c:921
    smpboot_thread_fn+0x30a/0x4a0 kernel/smpboot.c:164
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    read-write to 0xffff8881374b2178 of 8 bytes by interrupt on cpu 0:
    br_handle_frame_finish+0xd4f/0xef0 net/bridge/br_input.c:189
    br_nf_hook_thresh+0x1ed/0x220
    br_nf_pre_routing_finish_ipv6+0x50f/0x540
    NF_HOOK include/linux/netfilter.h:304 [inline]
    br_nf_pre_routing_ipv6+0x1e3/0x2a0 net/bridge/br_netfilter_ipv6.c:178
    br_nf_pre_routing+0x526/0xba0 net/bridge/br_netfilter_hooks.c:508
    nf_hook_entry_hookfn include/linux/netfilter.h:144 [inline]
    nf_hook_bridge_pre net/bridge/br_input.c:272 [inline]
    br_handle_frame+0x4c9/0x940 net/bridge/br_input.c:417
    __netif_receive_skb_core+0xa8a/0x21e0 net/core/dev.c:5417
    __netif_receive_skb_one_core net/core/dev.c:5521 [inline]
    __netif_receive_skb+0x57/0x1b0 net/core/dev.c:5637
    process_backlog+0x21f/0x380 net/core/dev.c:5965
    __napi_poll+0x60/0x3b0 net/core/dev.c:6527
    napi_poll net/core/dev.c:6594 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6727
    __do_softirq+0xc1/0x265 kernel/softirq.c:553
    do_softirq+0x5e/0x90 kernel/softirq.c:454
    __local_bh_enable_ip+0x64/0x70 kernel/softirq.c:381
    __raw_spin_unlock_bh include/linux/spinlock_api_smp.h:167 [inline]
    _raw_spin_unlock_bh+0x36/0x40 kernel/locking/spinlock.c:210
    spin_unlock_bh include/linux/spinlock.h:396 [inline]
    batadv_tt_local_purge+0x1a8/0x1f0 net/batman-adv/translation-table.c:1356
    batadv_tt_purge+0x2b/0x630 net/batman-adv/translation-table.c:3560
    process_one_work kernel/workqueue.c:2630 [inline]
    process_scheduled_works+0x5b8/0xa30 kernel/workqueue.c:2703
    worker_thread+0x525/0x730 kernel/workqueue.c:2784
    kthread+0x1d7/0x210 kernel/kthread.c:388
    ret_from_fork+0x48/0x60 arch/x86/kernel/process.c:147
    ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304
    
    value changed: 0x00000000000d7190 -> 0x00000000000d7191
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 14848 Comm: kworker/u4:11 Not tainted 6.6.0-rc1-syzkaller-00236-gad8a69f361b9 #0
    
    Fixes: 1c29fc4989bc ("[BRIDGE]: keep track of received multicast packets")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Roopa Prabhu <roopa@nvidia.com>
    Cc: Nikolay Aleksandrov <razor@blackwall.org>
    Cc: bridge@lists.linux-foundation.org
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230918091351.1356153-1-edumazet@google.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d3939cccb203f5e9b10ab2c253396ff3fcef5a4
Author: Jie Wang <wangjie125@huawei.com>
Date:   Mon Sep 18 15:48:40 2023 +0800

    net: hns3: add 5ms delay before clear firmware reset irq source
    
    [ Upstream commit 0770063096d5da4a8e467b6e73c1646a75589628 ]
    
    Currently the reset process in hns3 and firmware watchdog init process is
    asynchronous. we think firmware watchdog initialization is completed
    before hns3 clear the firmware interrupt source. However, firmware
    initialization may not complete early.
    
    so we add delay before hns3 clear firmware interrupt source and 5 ms delay
    is enough to avoid second firmware reset interrupt.
    
    Fixes: c1a81619d73a ("net: hns3: Add mailbox interrupt handling to PF driver")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6d182d856d0bf4abfbc5832aa1c9468e81479ed
Author: Jijie Shao <shaojijie@huawei.com>
Date:   Mon Sep 18 15:48:39 2023 +0800

    net: hns3: fix fail to delete tc flower rules during reset issue
    
    [ Upstream commit 1a7be66e4685b8541546222c305cce9710718a88 ]
    
    Firmware does not respond driver commands during reset
    Therefore, rule will fail to delete while the firmware is resetting
    
    So, if failed to delete rule, set rule state to TO_DEL,
    and the rule will be deleted when periodic task being scheduled.
    
    Fixes: 0205ec041ec6 ("net: hns3: add support for hw tc offload of tc flower")
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c47b238f4ec05985255aa9c9601833e270ec3fc
Author: Jian Shen <shenjian15@huawei.com>
Date:   Mon Sep 18 15:48:38 2023 +0800

    net: hns3: only enable unicast promisc when mac table full
    
    [ Upstream commit f2ed304922a55690529bcca59678dd92d7466ce8 ]
    
    Currently, the driver will enable unicast promisc for the function
    once configure mac address fail. It's unreasonable when the failure
    is caused by using same mac address with other functions. So only
    enable unicast promisc when mac table full.
    
    Fixes: c631c696823c ("net: hns3: refactor the promisc mode setting")
    Signed-off-by: Jian Shen <shenjian15@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96af9a55b7826d99f8e855c96c6a4555d8291f62
Author: Jie Wang <wangjie125@huawei.com>
Date:   Mon Sep 18 15:48:37 2023 +0800

    net: hns3: fix GRE checksum offload issue
    
    [ Upstream commit f9f651261130cdcb7adc9a3e365b356bc2749ab3 ]
    
    The device_version V3 hardware can't offload the checksum for IP in GRE
    packets, but can do it for NvGRE. So default to disable the checksum and
    GSO offload for GRE, but keep the ability to enable it when only using
    NvGRE.
    
    Fixes: 76ad4f0ee747 ("net: hns3: Add support of HNS3 Ethernet Driver for hip08 SoC")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13ea4b92e8759d2f6c330a73cde31ad9c313021b
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Mon Sep 4 22:04:48 2023 -0700

    x86/srso: Fix SBPB enablement for spec_rstack_overflow=off
    
    [ Upstream commit 01b057b2f4cc2d905a0bd92195657dbd9a7005ab ]
    
    If the user has requested no SRSO mitigation, other mitigations can use
    the lighter-weight SBPB instead of IBPB.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/b20820c3cfd1003171135ec8d762a0b957348497.1693889988.git.jpoimboe@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2c34afe8362e1ce5fe37d180f8d4971b0de579c
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Mon Sep 4 22:04:45 2023 -0700

    x86/srso: Fix srso_show_state() side effect
    
    [ Upstream commit a8cf700c17d9ca6cb8ee7dc5c9330dbac3948237 ]
    
    Reading the 'spec_rstack_overflow' sysfs file can trigger an unnecessary
    MSR write, and possibly even a (handled) exception if the microcode
    hasn't been updated.
    
    Avoid all that by just checking X86_FEATURE_IBPB_BRTYPE instead, which
    gets set by srso_select_mitigation() if the updated microcode exists.
    
    Fixes: fb3bd914b3ec ("x86/srso: Add a Speculative RAS Overflow mitigation")
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Reviewed-by: Nikolay Borisov <nik.borisov@suse.com>
    Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/27d128899cb8aee9eb2b57ddc996742b0c1d776b.1693889988.git.jpoimboe@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21efa88e777f087924ea6dbb2d75e9ffdac3590c
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:22 2023 -0700

    platform/x86: intel_scu_ipc: Fail IPC send if still busy
    
    [ Upstream commit 85e654c9f722853a595fa941dca60c157b707b86 ]
    
    It's possible for interrupts to get significantly delayed to the point
    that callers of intel_scu_ipc_dev_command() and friends can call the
    function once, hit a timeout, and call it again while the interrupt
    still hasn't been processed. This driver will get seriously confused if
    the interrupt is finally processed after the second IPC has been sent
    with ipc_command(). It won't know which IPC has been completed. This
    could be quite disastrous if calling code assumes something has happened
    upon return from intel_scu_ipc_dev_simple_command() when it actually
    hasn't.
    
    Let's avoid this scenario by simply returning -EBUSY in this case.
    Hopefully higher layers will know to back off or fail gracefully when
    this happens. It's all highly unlikely anyway, but it's better to be
    correct here as we have no way to know which IPC the status register is
    telling us about if we send a second IPC while the previous IPC is still
    processing.
    
    Cc: Prashant Malani <pmalani@chromium.org>
    Cc: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Fixes: ed12f295bfd5 ("ipc: Added support for IPC interrupt mode")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-5-swboyd@chromium.org
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a5d236b52cf17474f02006f0a611af38968a916
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:21 2023 -0700

    platform/x86: intel_scu_ipc: Don't override scu in intel_scu_ipc_dev_simple_command()
    
    [ Upstream commit efce78584e583226e9a1f6cb2fb555d6ff47c3e7 ]
    
    Andy discovered this bug during patch review. The 'scu' argument to this
    function shouldn't be overridden by the function itself. It doesn't make
    any sense. Looking at the commit history, we see that commit
    f57fa18583f5 ("platform/x86: intel_scu_ipc: Introduce new SCU IPC API")
    removed the setting of the scu to ipcdev in other functions, but not
    this one. That was an oversight. Remove this line so that we stop
    overriding the scu instance that is used by this function.
    
    Reported-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Closes: https://lore.kernel.org/r/ZPjdZ3xNmBEBvNiS@smile.fi.intel.com
    Cc: Prashant Malani <pmalani@chromium.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Fixes: f57fa18583f5 ("platform/x86: intel_scu_ipc: Introduce new SCU IPC API")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-4-swboyd@chromium.org
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab78000c38b4d2319a6656086cb0c3ff278975fa
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:20 2023 -0700

    platform/x86: intel_scu_ipc: Check status upon timeout in ipc_wait_for_interrupt()
    
    [ Upstream commit 427fada620733e6474d783ae6037a66eae42bf8c ]
    
    It's possible for the completion in ipc_wait_for_interrupt() to timeout,
    simply because the interrupt was delayed in being processed. A timeout
    in itself is not an error. This driver should check the status register
    upon a timeout to ensure that scheduling or interrupt processing delays
    don't affect the outcome of the IPC return value.
    
     CPU0                                                   SCU
     ----                                                   ---
     ipc_wait_for_interrupt()
      wait_for_completion_timeout(&scu->cmd_complete)
      [TIMEOUT]                                             status[IPC_STATUS_BUSY]=0
    
    Fix this problem by reading the status bit in all cases, regardless of
    the timeout. If the completion times out, we'll assume the problem was
    that the IPC_STATUS_BUSY bit was still set, but if the status bit is
    cleared in the meantime we know that we hit some scheduling delay and we
    should just check the error bit.
    
    Cc: Prashant Malani <pmalani@chromium.org>
    Reviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Fixes: ed12f295bfd5 ("ipc: Added support for IPC interrupt mode")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-3-swboyd@chromium.org
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47329633b3f0ac1e988f1b61454421b3a53f5ae7
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Wed Sep 13 14:27:19 2023 -0700

    platform/x86: intel_scu_ipc: Check status after timeout in busy_loop()
    
    [ Upstream commit e0b4ab3bb92bda8d12f55842614362989d5b2cb3 ]
    
    It's possible for the polling loop in busy_loop() to get scheduled away
    for a long time.
    
      status = ipc_read_status(scu); // status = IPC_STATUS_BUSY
      <long time scheduled away>
      if (!(status & IPC_STATUS_BUSY))
    
    If this happens, then the status bit could change while the task is
    scheduled away and this function would never read the status again after
    timing out. Instead, the function will return -ETIMEDOUT when it's
    possible that scheduling didn't work out and the status bit was cleared.
    Bit polling code should always check the bit being polled one more time
    after the timeout in case this happens.
    
    Fix this by reading the status once more after the while loop breaks.
    The readl_poll_timeout() macro implements all of this, and it is
    shorter, so use that macro here to consolidate code and fix this.
    
    There were some concerns with using readl_poll_timeout() because it uses
    timekeeping, and timekeeping isn't running early on or during the late
    stages of system suspend or early stages of system resume, but an audit
    of the code concluded that this code isn't called during those times so
    it is safe to use the macro.
    
    Cc: Prashant Malani <pmalani@chromium.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Fixes: e7b7ab3847c9 ("platform/x86: intel_scu_ipc: Sleeping is fine when polling")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20230913212723.3055315-2-swboyd@chromium.org
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26df9ab5de308caa1503d937533c56c35793018d
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 15 19:00:35 2023 +0000

    dccp: fix dccp_v4_err()/dccp_v6_err() again
    
    [ Upstream commit 6af289746a636f71f4c0535a9801774118486c7a ]
    
    dh->dccph_x is the 9th byte (offset 8) in "struct dccp_hdr",
    not in the "byte 7" as Jann claimed.
    
    We need to make sure the ICMP messages are big enough,
    using more standard ways (no more assumptions).
    
    syzbot reported:
    BUG: KMSAN: uninit-value in pskb_may_pull_reason include/linux/skbuff.h:2667 [inline]
    BUG: KMSAN: uninit-value in pskb_may_pull include/linux/skbuff.h:2681 [inline]
    BUG: KMSAN: uninit-value in dccp_v6_err+0x426/0x1aa0 net/dccp/ipv6.c:94
    pskb_may_pull_reason include/linux/skbuff.h:2667 [inline]
    pskb_may_pull include/linux/skbuff.h:2681 [inline]
    dccp_v6_err+0x426/0x1aa0 net/dccp/ipv6.c:94
    icmpv6_notify+0x4c7/0x880 net/ipv6/icmp.c:867
    icmpv6_rcv+0x19d5/0x30d0
    ip6_protocol_deliver_rcu+0xda6/0x2a60 net/ipv6/ip6_input.c:438
    ip6_input_finish net/ipv6/ip6_input.c:483 [inline]
    NF_HOOK include/linux/netfilter.h:304 [inline]
    ip6_input+0x15d/0x430 net/ipv6/ip6_input.c:492
    ip6_mc_input+0xa7e/0xc80 net/ipv6/ip6_input.c:586
    dst_input include/net/dst.h:468 [inline]
    ip6_rcv_finish+0x5db/0x870 net/ipv6/ip6_input.c:79
    NF_HOOK include/linux/netfilter.h:304 [inline]
    ipv6_rcv+0xda/0x390 net/ipv6/ip6_input.c:310
    __netif_receive_skb_one_core net/core/dev.c:5523 [inline]
    __netif_receive_skb+0x1a6/0x5a0 net/core/dev.c:5637
    netif_receive_skb_internal net/core/dev.c:5723 [inline]
    netif_receive_skb+0x58/0x660 net/core/dev.c:5782
    tun_rx_batched+0x83b/0x920
    tun_get_user+0x564c/0x6940 drivers/net/tun.c:2002
    tun_chr_write_iter+0x3af/0x5d0 drivers/net/tun.c:2048
    call_write_iter include/linux/fs.h:1985 [inline]
    new_sync_write fs/read_write.c:491 [inline]
    vfs_write+0x8ef/0x15c0 fs/read_write.c:584
    ksys_write+0x20f/0x4c0 fs/read_write.c:637
    __do_sys_write fs/read_write.c:649 [inline]
    __se_sys_write fs/read_write.c:646 [inline]
    __x64_sys_write+0x93/0xd0 fs/read_write.c:646
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Uninit was created at:
    slab_post_alloc_hook+0x12f/0xb70 mm/slab.h:767
    slab_alloc_node mm/slub.c:3478 [inline]
    kmem_cache_alloc_node+0x577/0xa80 mm/slub.c:3523
    kmalloc_reserve+0x13d/0x4a0 net/core/skbuff.c:559
    __alloc_skb+0x318/0x740 net/core/skbuff.c:650
    alloc_skb include/linux/skbuff.h:1286 [inline]
    alloc_skb_with_frags+0xc8/0xbd0 net/core/skbuff.c:6313
    sock_alloc_send_pskb+0xa80/0xbf0 net/core/sock.c:2795
    tun_alloc_skb drivers/net/tun.c:1531 [inline]
    tun_get_user+0x23cf/0x6940 drivers/net/tun.c:1846
    tun_chr_write_iter+0x3af/0x5d0 drivers/net/tun.c:2048
    call_write_iter include/linux/fs.h:1985 [inline]
    new_sync_write fs/read_write.c:491 [inline]
    vfs_write+0x8ef/0x15c0 fs/read_write.c:584
    ksys_write+0x20f/0x4c0 fs/read_write.c:637
    __do_sys_write fs/read_write.c:649 [inline]
    __se_sys_write fs/read_write.c:646 [inline]
    __x64_sys_write+0x93/0xd0 fs/read_write.c:646
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    CPU: 0 PID: 4995 Comm: syz-executor153 Not tainted 6.6.0-rc1-syzkaller-00014-ga747acc0b752 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/04/2023
    
    Fixes: 977ad86c2a1b ("dccp: Fix out of bounds access in DCCP error handler")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jann Horn <jannh@google.com>
    Reviewed-by: Jann Horn <jannh@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b14e8431855f144d7b025f808ccf1031a6f7ed9
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Fri Aug 25 11:26:01 2023 +0530

    powerpc/perf/hv-24x7: Update domain value check
    
    [ Upstream commit 4ff3ba4db5943cac1045e3e4a3c0463ea10f6930 ]
    
    Valid domain value is in range 1 to HV_PERF_DOMAIN_MAX. Current code has
    check for domain value greater than or equal to HV_PERF_DOMAIN_MAX. But
    the check for domain value 0 is missing.
    
    Fix this issue by adding check for domain value 0.
    
    Before:
      # ./perf stat -v -e hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/ sleep 1
      Using CPUID 00800200
      Control descriptor is not initialized
      Error:
      The sys_perf_event_open() syscall returned with 5 (Input/output error) for
      event (hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/).
      /bin/dmesg | grep -i perf may provide additional information.
    
      Result from dmesg:
      [   37.819387] hv-24x7: hcall failed: [0 0x60040000 0x100 0] => ret
      0xfffffffffffffffc (-4) detail=0x2000000 failing ix=0
    
    After:
      # ./perf stat -v -e hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/ sleep 1
      Using CPUID 00800200
      Control descriptor is not initialized
      Warning:
      hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/ event is not supported by the kernel.
      failed to read counter hv_24x7/CPM_ADJUNCT_INST,domain=0,core=1/
    
    Fixes: ebd4a5a3ebd9 ("powerpc/perf/hv-24x7: Minor improvements")
    Reported-by: Krishan Gopal Sarawast <krishang@linux.vnet.ibm.com>
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Tested-by: Disha Goel <disgoel@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230825055601.360083-1-kjain@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8860d354f653628b6330e1c5b06b2828948135a4
Author: Kyle Zeng <zengyhkyle@gmail.com>
Date:   Thu Sep 14 22:12:57 2023 -0700

    ipv4: fix null-deref in ipv4_link_failure
    
    [ Upstream commit 0113d9c9d1ccc07f5a3710dac4aa24b6d711278c ]
    
    Currently, we assume the skb is associated with a device before calling
    __ip_options_compile, which is not always the case if it is re-routed by
    ipvs.
    When skb->dev is NULL, dev_net(skb->dev) will become null-dereference.
    This patch adds a check for the edge case and switch to use the net_device
    from the rtable when skb->dev is NULL.
    
    Fixes: ed0de45a1008 ("ipv4: recompile ip options in ipv4_link_failure")
    Suggested-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: Kyle Zeng <zengyhkyle@gmail.com>
    Cc: Stephen Suryaputra <ssuryaextr@gmail.com>
    Cc: Vadim Fedorenko <vfedorenko@novek.ru>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c196ecd3f893a391fb73477dce96046e45e6625c
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Wed Sep 13 11:06:15 2023 -0700

    igc: Fix infinite initialization loop with early XDP redirect
    
    [ Upstream commit cb47b1f679c4d83a5fa5f1852e472f844e41a3da ]
    
    When an XDP redirect happens before the link is ready, that
    transmission will not finish and will timeout, causing an adapter
    reset. If the redirects do not stop, the adapter will not stop
    resetting.
    
    Wait for the driver to signal that there's a carrier before allowing
    transmissions to proceed.
    
    Previous code was relying that when __IGC_DOWN is cleared, the NIC is
    ready to transmit as all the queues are ready, what happens is that
    the carrier presence will only be signaled later, after the watchdog
    workqueue has a chance to run. And during this interval (between
    clearing __IGC_DOWN and the watchdog running) if any transmission
    happens the timeout is emitted (detected by igc_tx_timeout()) which
    causes the reset, with the potential for the infinite loop.
    
    Fixes: 4ff320361092 ("igc: Add support for XDP_REDIRECT action")
    Reported-by: Ferenc Fejes <ferenc.fejes@ericsson.com>
    Closes: https://lore.kernel.org/netdev/0caf33cf6adb3a5bf137eeaa20e89b167c9986d5.camel@ericsson.com/
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Tested-by: Ferenc Fejes <ferenc.fejes@ericsson.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2d69dcb6ccb1aa0d3db5e66bd43b4e7a3ddf5b9
Author: David Christensen <drc@linux.vnet.ibm.com>
Date:   Thu Sep 14 18:02:52 2023 -0400

    ionic: fix 16bit math issue when PAGE_SIZE >= 64KB
    
    [ Upstream commit 8f6b846b0a86c3cbae8a25b772651cfc2270ad0a ]
    
    The ionic device supports a maximum buffer length of 16 bits (see
    ionic_rxq_desc or ionic_rxq_sg_elem).  When adding new buffers to
    the receive rings, the function ionic_rx_fill() uses 16bit math when
    calculating the number of pages to allocate for an RX descriptor,
    given the interface's MTU setting. If the system PAGE_SIZE >= 64KB,
    and the buf_info->page_offset is 0, the remain_len value will never
    decrement from the original MTU value and the frag_len value will
    always be 0, causing additional pages to be allocated as scatter-
    gather elements unnecessarily.
    
    A similar math issue exists in ionic_rx_frags(), but no failures
    have been observed here since a 64KB page should not normally
    require any scatter-gather elements at any legal Ethernet MTU size.
    
    Fixes: 4b0a7539a372 ("ionic: implement Rx page reuse")
    Signed-off-by: David Christensen <drc@linux.vnet.ibm.com>
    Reviewed-by: Shannon Nelson <shannon.nelson@amd.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3796e449a03ef4ddd6608844b75c3473e70a310f
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Thu Sep 7 17:44:57 2023 +0200

    i40e: Fix VF VLAN offloading when port VLAN is configured
    
    [ Upstream commit d0d362ffa33da4acdcf7aee2116ceef8c8fef658 ]
    
    If port VLAN is configured on a VF then any other VLANs on top of this VF
    are broken.
    
    During i40e_ndo_set_vf_port_vlan() call the i40e driver reset the VF and
    iavf driver asks PF (using VIRTCHNL_OP_GET_VF_RESOURCES) for VF capabilities
    but this reset occurs too early, prior setting of vf->info.pvid field
    and because this field can be zero during i40e_vc_get_vf_resources_msg()
    then VIRTCHNL_VF_OFFLOAD_VLAN capability is reported to iavf driver.
    
    This is wrong because iavf driver should not report VLAN offloading
    capability when port VLAN is configured as i40e does not support QinQ
    offloading.
    
    Fix the issue by moving VF reset after setting of vf->port_vlan_id
    field.
    
    Without this patch:
    $ echo 1 > /sys/class/net/enp2s0f0/device/sriov_numvfs
    $ ip link set enp2s0f0 vf 0 vlan 3
    $ ip link set enp2s0f0v0 up
    $ ip link add link enp2s0f0v0 name vlan4 type vlan id 4
    $ ip link set vlan4 up
    ...
    $ ethtool -k enp2s0f0v0 | grep vlan-offload
    rx-vlan-offload: on
    tx-vlan-offload: on
    $ dmesg -l err | grep iavf
    [1292500.742914] iavf 0000:02:02.0: Failed to add VLAN filter, error IAVF_ERR_INVALID_QP_ID
    
    With this patch:
    $ echo 1 > /sys/class/net/enp2s0f0/device/sriov_numvfs
    $ ip link set enp2s0f0 vf 0 vlan 3
    $ ip link set enp2s0f0v0 up
    $ ip link add link enp2s0f0v0 name vlan4 type vlan id 4
    $ ip link set vlan4 up
    ...
    $ ethtool -k enp2s0f0v0 | grep vlan-offload
    rx-vlan-offload: off [requested on]
    tx-vlan-offload: off [requested on]
    $ dmesg -l err | grep iavf
    
    Fixes: f9b4b6278d51 ("i40e: Reset the VF upon conflicting VLAN configuration")
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a628f3b5cd8da6061437a378f55b924a173230b2
Author: Mateusz Palczewski <mateusz.palczewski@intel.com>
Date:   Mon Apr 11 14:07:14 2022 +0200

    i40e: Add VF VLAN pruning
    
    [ Upstream commit c87c938f62d8f1f7c24620859d67f2e3eca23afc ]
    
    VFs by default are able to see all tagged traffic regardless of trust
    and VLAN filters configured.
    
    Add new private flag vf-vlan-pruning that allows changing of default
    VF behavior for tagged traffic. When the flag is turned on
    untrusted VF will only be able to receive untagged traffic
    or traffic with VLAN tags it has created interfaces for
    
    The flag is off by default and can only be changed if
    there are no VFs spawned on the PF. This flag will only be effective
    when no PVID is set on VF and VF is not trusted.
    Add new function that computes the correct VLAN ID for VF VLAN filters
    based on trust, PVID, vf-vlan-prune-disable flag and current VLAN ID.
    
    Testing Hints:
    
    Test 1: vf-vlan-pruning == off
    ==============================
    1. Set the private flag
    > ethtool --set-priv-flag eth0 vf-vlan-pruning off (default setting)
    2. Use scapy to send any VLAN tagged traffic and make sure the VF
    receives all VLAN tagged traffic that matches its destination MAC
    filters (unicast, multicast, and broadcast).
    
    Test 2: vf-vlan-pruning == on
    ==============================
    1. Set the private flag
    > ethtool --set-priv-flag eth0 vf-vlan-pruning on
    2. Use scapy to send any VLAN tagged traffic and make sure the VF does
    not receive any VLAN tagged traffic that matches its destination MAC
    filters (unicast, multicast, and broadcast).
    3. Add a VLAN filter on the VF netdev
    > ip link add link eth0v0 name vlan10 type vlan id 10
    4. Bring the VLAN netdev up
    > ip link set vlan10 up
    4. Use scapy to send traffic with VLAN 10, VLAN 11 (anything not VLAN
    10), and untagged traffic. Make sure the VF only receives VLAN 10
    and untagged traffic when the link partner is sending.
    
    Test 3: vf-vlan-pruning == off && VF is in a port VLAN
    ==============================
    1. Set the private flag
    > ethtool --set-priv-flag eth0 vf-vlan-pruning off (default setting)
    2. Create a VF
    > echo 1 > sriov_numvfs
    3. Put the VF in a port VLAN
    > ip link set eth0 vf 0 vlan 10
    4. Use scapy to send traffic with VLAN 10 and VLAN 11 (anything not VLAN
    10) and make sure the VF only receives untagged traffic when the link
    partner is sending VLAN 10 tagged traffic as the VLAN tag is expected
    to be stripped by HW for port VLANs and not visible to the VF.
    
    Test 4: Change vf-vlan-pruning while VFs are created
    ==============================
    echo 0 > sriov_numvfs
    ethtool --set-priv-flag eth0 vf-vlan-pruning off
    echo 1 > sriov_numvfs
    ethtool --set-priv-flag eth0 vf-vlan-pruning on (expect failure)
    
    Signed-off-by: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
    Signed-off-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: d0d362ffa33d ("i40e: Fix VF VLAN offloading when port VLAN is configured")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a9eee3b5d4d319127485a7a26867777b97f9efd
Author: Radoslaw Tyl <radoslawx.tyl@intel.com>
Date:   Mon Aug 7 14:59:40 2023 +0200

    iavf: do not process adminq tasks when __IAVF_IN_REMOVE_TASK is set
    
    [ Upstream commit c8de44b577eb540e8bfea55afe1d0904bb571b7a ]
    
    Prevent schedule operations for adminq during device remove and when
    __IAVF_IN_REMOVE_TASK flag is set. Currently, the iavf_down function
    adds operations for adminq that shouldn't be processed when the device
    is in the __IAVF_REMOVE state.
    
    Reproduction:
    
    echo 4 > /sys/bus/pci/devices/0000:17:00.0/sriov_numvfs
    ip link set dev ens1f0 vf 0 trust on
    ip link set dev ens1f0 vf 1 trust on
    ip link set dev ens1f0 vf 2 trust on
    ip link set dev ens1f0 vf 3 trust on
    
    ip link set dev ens1f0 vf 0 mac 00:22:33:44:55:66
    ip link set dev ens1f0 vf 1 mac 00:22:33:44:55:67
    ip link set dev ens1f0 vf 2 mac 00:22:33:44:55:68
    ip link set dev ens1f0 vf 3 mac 00:22:33:44:55:69
    
    echo 0000:17:02.0 > /sys/bus/pci/devices/0000\:17\:02.0/driver/unbind
    echo 0000:17:02.1 > /sys/bus/pci/devices/0000\:17\:02.1/driver/unbind
    echo 0000:17:02.2 > /sys/bus/pci/devices/0000\:17\:02.2/driver/unbind
    echo 0000:17:02.3 > /sys/bus/pci/devices/0000\:17\:02.3/driver/unbind
    sleep 10
    echo 0000:17:02.0 > /sys/bus/pci/drivers/iavf/bind
    echo 0000:17:02.1 > /sys/bus/pci/drivers/iavf/bind
    echo 0000:17:02.2 > /sys/bus/pci/drivers/iavf/bind
    echo 0000:17:02.3 > /sys/bus/pci/drivers/iavf/bind
    
    modprobe vfio-pci
    echo 8086 154c > /sys/bus/pci/drivers/vfio-pci/new_id
    
    qemu-system-x86_64 -accel kvm -m 4096 -cpu host \
    -drive file=centos9.qcow2,if=none,id=virtio-disk0 \
    -device virtio-blk-pci,drive=virtio-disk0,bootindex=0 -smp 4 \
    -device vfio-pci,host=17:02.0 -net none \
    -device vfio-pci,host=17:02.1 -net none \
    -device vfio-pci,host=17:02.2 -net none \
    -device vfio-pci,host=17:02.3 -net none \
    -daemonize -vnc :5
    
    Current result:
    There is a probability that the mac of VF in guest is inconsistent with
    it in host
    
    Expected result:
    When passthrough NIC VF to guest, the VF in guest should always get
    the same mac as it in host.
    
    Fixes: 14756b2ae265 ("iavf: Fix __IAVF_RESETTING state usage")
    Signed-off-by: Radoslaw Tyl <radoslawx.tyl@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3c6a17900e830b4f0d6a86f567adae3ccb5e785
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Fri Sep 15 14:02:11 2023 +0800

    ASoC: imx-audmix: Fix return error with devm_clk_get()
    
    [ Upstream commit b19a5733de255cabba5feecabf6e900638b582d1 ]
    
    The devm_clk_get() can return -EPROBE_DEFER error,
    modify the error code to be -EINVAL is not correct, which
    cause the -EPROBE_DEFER error is not correctly handled.
    
    This patch is to fix the return error code.
    
    Fixes: b86ef5367761 ("ASoC: fsl: Add Audio Mixer machine driver")
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Link: https://lore.kernel.org/r/1694757731-18308-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f90a7b9586d72f907092078a9f394733ca502cc9
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Wed Sep 13 09:39:05 2023 +0300

    net/core: Fix ETH_P_1588 flow dissector
    
    [ Upstream commit 75ad80ed88a182ab2ad5513e448cf07b403af5c3 ]
    
    When a PTP ethernet raw frame with a size of more than 256 bytes followed
    by a 0xff pattern is sent to __skb_flow_dissect, nhoff value calculation
    is wrong. For example: hdr->message_length takes the wrong value (0xffff)
    and it does not replicate real header length. In this case, 'nhoff' value
    was overridden and the PTP header was badly dissected. This leads to a
    kernel crash.
    
    net/core: flow_dissector
    net/core flow dissector nhoff = 0x0000000e
    net/core flow dissector hdr->message_length = 0x0000ffff
    net/core flow dissector nhoff = 0x0001000d (u16 overflow)
    ...
    skb linear:   00000000: 00 a0 c9 00 00 00 00 a0 c9 00 00 00 88
    skb frag:     00000000: f7 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    Using the size of the ptp_header struct will allow the corrected
    calculation of the nhoff value.
    
    net/core flow dissector nhoff = 0x0000000e
    net/core flow dissector nhoff = 0x00000030 (sizeof ptp_header)
    ...
    skb linear:   00000000: 00 a0 c9 00 00 00 00 a0 c9 00 00 00 88 f7 ff ff
    skb linear:   00000010: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    skb linear:   00000020: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    skb frag:     00000000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    Kernel trace:
    [   74.984279] ------------[ cut here ]------------
    [   74.989471] kernel BUG at include/linux/skbuff.h:2440!
    [   74.995237] invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
    [   75.001098] CPU: 4 PID: 0 Comm: swapper/4 Tainted: G     U            5.15.85-intel-ese-standard-lts #1
    [   75.011629] Hardware name: Intel Corporation A-Island (CPU:AlderLake)/A-Island (ID:06), BIOS SB_ADLP.01.01.00.01.03.008.D-6A9D9E73-dirty Mar 30 2023
    [   75.026507] RIP: 0010:eth_type_trans+0xd0/0x130
    [   75.031594] Code: 03 88 47 78 eb c7 8b 47 68 2b 47 6c 48 8b 97 c0 00 00 00 83 f8 01 7e 1b 48 85 d2 74 06 66 83 3a ff 74 09 b8 00 04 00 00 eb ab <0f> 0b b8 00 01 00 00 eb a2 48 85 ff 74 eb 48 8d 54 24 06 31 f6 b9
    [   75.052612] RSP: 0018:ffff9948c0228de0 EFLAGS: 00010297
    [   75.058473] RAX: 00000000000003f2 RBX: ffff8e47047dc300 RCX: 0000000000001003
    [   75.066462] RDX: ffff8e4e8c9ea040 RSI: ffff8e4704e0a000 RDI: ffff8e47047dc300
    [   75.074458] RBP: ffff8e4704e2acc0 R08: 00000000000003f3 R09: 0000000000000800
    [   75.082466] R10: 000000000000000d R11: ffff9948c0228dec R12: ffff8e4715e4e010
    [   75.090461] R13: ffff9948c0545018 R14: 0000000000000001 R15: 0000000000000800
    [   75.098464] FS:  0000000000000000(0000) GS:ffff8e4e8fb00000(0000) knlGS:0000000000000000
    [   75.107530] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   75.113982] CR2: 00007f5eb35934a0 CR3: 0000000150e0a002 CR4: 0000000000770ee0
    [   75.121980] PKRU: 55555554
    [   75.125035] Call Trace:
    [   75.127792]  <IRQ>
    [   75.130063]  ? eth_get_headlen+0xa4/0xc0
    [   75.134472]  igc_process_skb_fields+0xcd/0x150
    [   75.139461]  igc_poll+0xc80/0x17b0
    [   75.143272]  __napi_poll+0x27/0x170
    [   75.147192]  net_rx_action+0x234/0x280
    [   75.151409]  __do_softirq+0xef/0x2f4
    [   75.155424]  irq_exit_rcu+0xc7/0x110
    [   75.159432]  common_interrupt+0xb8/0xd0
    [   75.163748]  </IRQ>
    [   75.166112]  <TASK>
    [   75.168473]  asm_common_interrupt+0x22/0x40
    [   75.173175] RIP: 0010:cpuidle_enter_state+0xe2/0x350
    [   75.178749] Code: 85 c0 0f 8f 04 02 00 00 31 ff e8 39 6c 67 ff 45 84 ff 74 12 9c 58 f6 c4 02 0f 85 50 02 00 00 31 ff e8 52 b0 6d ff fb 45 85 f6 <0f> 88 b1 00 00 00 49 63 ce 4c 2b 2c 24 48 89 c8 48 6b d1 68 48 c1
    [   75.199757] RSP: 0018:ffff9948c013bea8 EFLAGS: 00000202
    [   75.205614] RAX: ffff8e4e8fb00000 RBX: ffffb948bfd23900 RCX: 000000000000001f
    [   75.213619] RDX: 0000000000000004 RSI: ffffffff94206161 RDI: ffffffff94212e20
    [   75.221620] RBP: 0000000000000004 R08: 000000117568973a R09: 0000000000000001
    [   75.229622] R10: 000000000000afc8 R11: ffff8e4e8fb29ce4 R12: ffffffff945ae980
    [   75.237628] R13: 000000117568973a R14: 0000000000000004 R15: 0000000000000000
    [   75.245635]  ? cpuidle_enter_state+0xc7/0x350
    [   75.250518]  cpuidle_enter+0x29/0x40
    [   75.254539]  do_idle+0x1d9/0x260
    [   75.258166]  cpu_startup_entry+0x19/0x20
    [   75.262582]  secondary_startup_64_no_verify+0xc2/0xcb
    [   75.268259]  </TASK>
    [   75.270721] Modules linked in: 8021q snd_sof_pci_intel_tgl snd_sof_intel_hda_common tpm_crb snd_soc_hdac_hda snd_sof_intel_hda snd_hda_ext_core snd_sof_pci snd_sof snd_sof_xtensa_dsp snd_soc_acpi_intel_match snd_soc_acpi snd_soc_core snd_compress iTCO_wdt ac97_bus intel_pmc_bxt mei_hdcp iTCO_vendor_support snd_hda_codec_hdmi pmt_telemetry intel_pmc_core pmt_class snd_hda_intel x86_pkg_temp_thermal snd_intel_dspcfg snd_hda_codec snd_hda_core kvm_intel snd_pcm snd_timer kvm snd mei_me soundcore tpm_tis irqbypass i2c_i801 mei tpm_tis_core pcspkr intel_rapl_msr tpm i2c_smbus intel_pmt thermal sch_fq_codel uio uhid i915 drm_buddy video drm_display_helper drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ttm fuse configfs
    [   75.342736] ---[ end trace 3785f9f360400e3a ]---
    [   75.347913] RIP: 0010:eth_type_trans+0xd0/0x130
    [   75.352984] Code: 03 88 47 78 eb c7 8b 47 68 2b 47 6c 48 8b 97 c0 00 00 00 83 f8 01 7e 1b 48 85 d2 74 06 66 83 3a ff 74 09 b8 00 04 00 00 eb ab <0f> 0b b8 00 01 00 00 eb a2 48 85 ff 74 eb 48 8d 54 24 06 31 f6 b9
    [   75.373994] RSP: 0018:ffff9948c0228de0 EFLAGS: 00010297
    [   75.379860] RAX: 00000000000003f2 RBX: ffff8e47047dc300 RCX: 0000000000001003
    [   75.387856] RDX: ffff8e4e8c9ea040 RSI: ffff8e4704e0a000 RDI: ffff8e47047dc300
    [   75.395864] RBP: ffff8e4704e2acc0 R08: 00000000000003f3 R09: 0000000000000800
    [   75.403857] R10: 000000000000000d R11: ffff9948c0228dec R12: ffff8e4715e4e010
    [   75.411863] R13: ffff9948c0545018 R14: 0000000000000001 R15: 0000000000000800
    [   75.419875] FS:  0000000000000000(0000) GS:ffff8e4e8fb00000(0000) knlGS:0000000000000000
    [   75.428946] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   75.435403] CR2: 00007f5eb35934a0 CR3: 0000000150e0a002 CR4: 0000000000770ee0
    [   75.443410] PKRU: 55555554
    [   75.446477] Kernel panic - not syncing: Fatal exception in interrupt
    [   75.453738] Kernel Offset: 0x11c00000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [   75.465794] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    Fixes: 4f1cc51f3488 ("net: flow_dissector: Parse PTP L2 packet header")
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55629e6164525356a792aea4bf3bd7feca37f6eb
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Sep 12 16:16:25 2023 +0200

    selftests: tls: swap the TX and RX sockets in some tests
    
    [ Upstream commit c326ca98446e0ae4fee43a40acf79412b74cfedb ]
    
    tls.sendmsg_large and tls.sendmsg_multiple are trying to send through
    the self->cfd socket (only configured with TLS_RX) and to receive through
    the self->fd socket (only configured with TLS_TX), so they're not using
    kTLS at all. Swap the sockets.
    
    Fixes: 7f657d5bf507 ("selftests: tls: add selftests for TLS sockets")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acabf5df49aa3a4f9c96200102d893351b511a88
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Sep 11 15:28:14 2023 +0200

    bpf: Avoid deadlock when using queue and stack maps from NMI
    
    [ Upstream commit a34a9f1a19afe9c60ca0ea61dfeee63a1c2baac8 ]
    
    Sysbot discovered that the queue and stack maps can deadlock if they are
    being used from a BPF program that can be called from NMI context (such as
    one that is attached to a perf HW counter event). To fix this, add an
    in_nmi() check and use raw_spin_trylock() in NMI context, erroring out if
    grabbing the lock fails.
    
    Fixes: f1a2e44a3aec ("bpf: add queue and stack maps")
    Reported-by: Hsin-Wei Hung <hsinweih@uci.edu>
    Tested-by: Hsin-Wei Hung <hsinweih@uci.edu>
    Co-developed-by: Hsin-Wei Hung <hsinweih@uci.edu>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Link: https://lore.kernel.org/r/20230911132815.717240-1-toke@redhat.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6e44f4c31c5d449ed48387f53b9c647274901a2
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Sep 10 19:04:45 2023 +0200

    netfilter: nf_tables: disallow element removal on anonymous sets
    
    [ Upstream commit 23a3bfd4ba7acd36abf52b78605f61b21bdac216 ]
    
    Anonymous sets need to be populated once at creation and then they are
    bound to rule since 938154b93be8 ("netfilter: nf_tables: reject unbound
    anonymous set before commit phase"), otherwise transaction reports
    EINVAL.
    
    Userspace does not need to delete elements of anonymous sets that are
    not yet bound, reject this with EOPNOTSUPP.
    
    From flush command path, skip anonymous sets, they are expected to be
    bound already. Otherwise, EINVAL is hit at the end of this transaction
    for unbound sets.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a8de7775329858b61f256756b257f1f159359f3
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Thu Sep 7 11:05:04 2023 +0200

    ASoC: meson: spdifin: start hw on dai probe
    
    [ Upstream commit aedf323b66b2b875137422ecb7d2525179759076 ]
    
    For spdif input to report the locked rate correctly, even when no capture
    is running, the HW and reference clock must be started as soon as
    the dai is probed.
    
    Fixes: 5ce5658375e6 ("ASoC: meson: add axg spdif input")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20230907090504.12700-1-jbrunet@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef99506eaf1dc31feff1adfcfd68bc5535a22171
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 18:43:13 2023 +0200

    netfilter: nf_tables: fix memleak when more than 255 elements expired
    
    commit cf5000a7787cbc10341091d37245a42c119d26c5 upstream.
    
    When more than 255 elements expired we're supposed to switch to a new gc
    container structure.
    
    This never happens: u8 type will wrap before reaching the boundary
    and nft_trans_gc_space() always returns true.
    
    This means we recycle the initial gc container structure and
    lose track of the elements that came before.
    
    While at it, don't deref 'gc' after we've passed it to call_rcu.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Reported-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d7a00b904dac949014a61238c7de44da991023a
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:12 2023 +0200

    netfilter: nft_set_hash: try later when GC hits EAGAIN on iteration
    
    commit b079155faae94e9b3ab9337e82100a914ebb4e8d upstream.
    
    Skip GC run if iterator rewinds to the beginning with EAGAIN, otherwise GC
    might collect the same element more than once.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83d3a4607c58df7c30a41b6935608e693fb42411
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:11 2023 +0200

    netfilter: nft_set_pipapo: stop GC iteration if GC transaction allocation fails
    
    commit 6d365eabce3c018a80f6e0379b17df2abb17405e upstream.
    
    nft_trans_gc_queue_sync() enqueues the GC transaction and it allocates a
    new one. If this allocation fails, then stop this GC sync run and retry
    later.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 949369f9f0d9e3710bf9fce1d0158fdda93a7f9c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:10 2023 +0200

    netfilter: nft_set_pipapo: call nft_trans_gc_queue_sync() in catchall GC
    
    commit 4a9e12ea7e70223555ec010bec9f711089ce96f6 upstream.
    
    pipapo needs to enqueue GC transactions for catchall elements through
    nft_trans_gc_queue_sync(). Add nft_trans_gc_catchall_sync() and
    nft_trans_gc_catchall_async() to handle GC transaction queueing
    accordingly.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e6846b613fa6fc063193e031ba9c72c630e543c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:09 2023 +0200

    netfilter: nft_set_rbtree: use read spinlock to avoid datapath contention
    
    commit 96b33300fba880ec0eafcf3d82486f3463b4b6da upstream.
    
    rbtree GC does not modify the datastructure, instead it collects expired
    elements and it enqueues a GC transaction. Use a read spinlock instead
    to avoid data contention while GC worker is running.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9af7dfb3c9d7985172a240f85e684c5cd33e29ce
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:08 2023 +0200

    netfilter: nft_set_rbtree: skip sync GC for new elements in this transaction
    
    commit 2ee52ae94baabf7ee09cf2a8d854b990dac5d0e4 upstream.
    
    New elements in this transaction might expired before such transaction
    ends. Skip sync GC for such elements otherwise commit path might walk
    over an already released object. Once transaction is finished, async GC
    will collect such expired element.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9366966caf1a25815c9436df0e85a3a2b0bb69b0
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 18:43:07 2023 +0200

    netfilter: nf_tables: defer gc run if previous batch is still pending
    
    commit 8e51830e29e12670b4c10df070a4ea4c9593e961 upstream.
    
    Don't queue more gc work, else we may queue the same elements multiple
    times.
    
    If an element is flagged as dead, this can mean that either the previous
    gc request was invalidated/discarded by a transaction or that the previous
    request is still pending in the system work queue.
    
    The latter will happen if the gc interval is set to a very low value,
    e.g. 1ms, and system work queue is backlogged.
    
    The sets refcount is 1 if no previous gc requeusts are queued, so add
    a helper for this and skip gc run if old requests are pending.
    
    Add a helper for this and skip the gc run in this case.
    
    Fixes: f6c383b8c31a ("netfilter: nf_tables: adapt set backend to use GC transaction API")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 082791b421231bf2f7dac286ba9e02ef09e71a6a
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:06 2023 +0200

    netfilter: nf_tables: use correct lock to protect gc_list
    
    commit 8357bc946a2abc2a10ca40e5a2105d2b4c57515e upstream.
    
    Use nf_tables_gc_list_lock spinlock, not nf_tables_destroy_list_lock to
    protect the gc_list.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b44a459c6561595ed7c3679599c5279204132b33
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:05 2023 +0200

    netfilter: nf_tables: GC transaction race with abort path
    
    commit 720344340fb9be2765bbaab7b292ece0a4570eae upstream.
    
    Abort path is missing a synchronization point with GC transactions. Add
    GC sequence number hence any GC transaction losing race will be
    discarded.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24707fa1e1f996ec05cf36716d47bfe0bdcad001
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:04 2023 +0200

    netfilter: nf_tables: GC transaction race with netns dismantle
    
    commit 02c6c24402bf1c1e986899c14ba22a10b510916b upstream.
    
    Use maybe_get_net() since GC workqueue might race with netns exit path.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6796800f0d8e5a892bceca7c198c115c4ca9d719
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:03 2023 +0200

    netfilter: nf_tables: fix GC transaction races with netns and netlink event exit path
    
    commit 6a33d8b73dfac0a41f3877894b38082bd0c9a5bc upstream.
    
    Netlink event path is missing a synchronization point with GC
    transactions. Add GC sequence number update to netns release path and
    netlink event path, any GC transaction losing race will be discarded.
    
    Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af78b0489e8898a8c9449ffc0fdd2e181916f0d4
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 18:43:02 2023 +0200

    netfilter: nf_tables: don't fail inserts if duplicate has expired
    
    commit 7845914f45f066497ac75b30c50dbc735e84e884 upstream.
    
    nftables selftests fail:
    run-tests.sh testcases/sets/0044interval_overlap_0
    Expected: 0-2 . 0-3, got:
    W: [FAILED]     ./testcases/sets/0044interval_overlap_0: got 1
    
    Insertion must ignore duplicate but expired entries.
    
    Moreover, there is a strange asymmetry in nft_pipapo_activate:
    
    It refetches the current element, whereas the other ->activate callbacks
    (bitmap, hash, rhash, rbtree) use elem->priv.
    Same for .remove: other set implementations take elem->priv,
    nft_pipapo_remove fetches elem->priv, then does a relookup,
    remove this.
    
    I suspect this was the reason for the change that prompted the
    removal of the expired check in pipapo_get() in the first place,
    but skipping exired elements there makes no sense to me, this helper
    is used for normal get requests, insertions (duplicate check)
    and deactivate callback.
    
    In first two cases expired elements must be skipped.
    
    For ->deactivate(), this gets called for DELSETELEM, so it
    seems to me that expired elements should be skipped as well, i.e.
    delete request should fail with -ENOENT error.
    
    Fixes: 24138933b97b ("netfilter: nf_tables: don't skip expired elements during walk")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f24fe69e3caf56e2d5eeed0f7b249591206ca72
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:01 2023 +0200

    netfilter: nf_tables: remove busy mark and gc batch API
    
    commit a2dd0233cbc4d8a0abb5f64487487ffc9265beb5 upstream.
    
    Ditch it, it has been replace it by the GC transaction API and it has no
    clients anymore.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b290795bd26fed903fa755f4e59616d55d10c4e1
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:43:00 2023 +0200

    netfilter: nft_set_hash: mark set element as dead when deleting from packet path
    
    upstream c92db3030492b8ad1d0faace7a93bbcf53850d0c commit.
    
    Set on the NFT_SET_ELEM_DEAD_BIT flag on this element, instead of
    performing element removal which might race with an ongoing transaction.
    Enable gc when dynamic flag is set on since dynset deletion requires
    garbage collection after this patch.
    
    Fixes: d0a8d877da97 ("netfilter: nft_dynset: support for element deletion")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 479a2cf5259347d6a1f658b0f791d27a34908e91
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:42:59 2023 +0200

    netfilter: nf_tables: adapt set backend to use GC transaction API
    
    commit f6c383b8c31a93752a52697f8430a71dcbc46adf upstream.
    
    Use the GC transaction API to replace the old and buggy gc API and the
    busy mark approach.
    
    No set elements are removed from async garbage collection anymore,
    instead the _DEAD bit is set on so the set element is not visible from
    lookup path anymore. Async GC enqueues transaction work that might be
    aborted and retried later.
    
    rbtree and pipapo set backends does not set on the _DEAD bit from the
    sync GC path since this runs in control plane path where mutex is held.
    In this case, set elements are deactivated, removed and then released
    via RCU callback, sync GC never fails.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Fixes: 8d8540c4f5e0 ("netfilter: nft_set_rbtree: add timeout support")
    Fixes: 9d0982927e79 ("netfilter: nft_hash: add support for timeouts")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d19e8bf3ea4114dd21fc35da21f398203d7f7df1
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Sep 22 18:42:58 2023 +0200

    netfilter: nf_tables: GC transaction API to avoid race with control plane
    
    commit 5f68718b34a531a556f2f50300ead2862278da26 upstream.
    
    The set types rhashtable and rbtree use a GC worker to reclaim memory.
    From system work queue, in periodic intervals, a scan of the table is
    done.
    
    The major caveat here is that the nft transaction mutex is not held.
    This causes a race between control plane and GC when they attempt to
    delete the same element.
    
    We cannot grab the netlink mutex from the work queue, because the
    control plane has to wait for the GC work queue in case the set is to be
    removed, so we get following deadlock:
    
       cpu 1                                cpu2
         GC work                            transaction comes in , lock nft mutex
           `acquire nft mutex // BLOCKS
                                            transaction asks to remove the set
                                            set destruction calls cancel_work_sync()
    
    cancel_work_sync will now block forever, because it is waiting for the
    mutex the caller already owns.
    
    This patch adds a new API that deals with garbage collection in two
    steps:
    
    1) Lockless GC of expired elements sets on the NFT_SET_ELEM_DEAD_BIT
       so they are not visible via lookup. Annotate current GC sequence in
       the GC transaction. Enqueue GC transaction work as soon as it is
       full. If ruleset is updated, then GC transaction is aborted and
       retried later.
    
    2) GC work grabs the mutex. If GC sequence has changed then this GC
       transaction lost race with control plane, abort it as it contains
       stale references to objects and let GC try again later. If the
       ruleset is intact, then this GC transaction deactivates and removes
       the elements and it uses call_rcu() to destroy elements.
    
    Note that no elements are removed from GC lockless path, the _DEAD bit
    is set and pointers are collected. GC catchall does not remove the
    elements anymore too. There is a new set->dead flag that is set on to
    abort the GC transaction to deal with set->ops->destroy() path which
    removes the remaining elements in the set from commit_release, where no
    mutex is held.
    
    To deal with GC when mutex is held, which allows safe deactivate and
    removal, add sync GC API which releases the set element object via
    call_rcu(). This is used by rbtree and pipapo backends which also
    perform garbage collection from control plane path.
    
    Since element removal from sets can happen from control plane and
    element garbage collection/timeout, it is necessary to keep the set
    structure alive until all elements have been deactivated and destroyed.
    
    We cannot do a cancel_work_sync or flush_work in nft_set_destroy because
    its called with the transaction mutex held, but the aforementioned async
    work queue might be blocked on the very mutex that nft_set_destroy()
    callchain is sitting on.
    
    This gives us the choice of ABBA deadlock or UaF.
    
    To avoid both, add set->refs refcount_t member. The GC API can then
    increment the set refcount and release it once the elements have been
    free'd.
    
    Set backends are adapted to use the GC transaction API in a follow up
    patch entitled:
    
      ("netfilter: nf_tables: use gc transaction API in set backends")
    
    This is joint work with Florian Westphal.
    
    Fixes: cfed7e1b1f8e ("netfilter: nf_tables: add set garbage collection helpers")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c7e658a36f8b1522bd3586d8137e5f93a25ddc5
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Sep 22 18:42:57 2023 +0200

    netfilter: nf_tables: don't skip expired elements during walk
    
    commit 24138933b97b055d486e8064b4a1721702442a9b upstream.
    
    There is an asymmetry between commit/abort and preparation phase if the
    following conditions are met:
    
    1. set is a verdict map ("1.2.3.4 : jump foo")
    2. timeouts are enabled
    
    In this case, following sequence is problematic:
    
    1. element E in set S refers to chain C
    2. userspace requests removal of set S
    3. kernel does a set walk to decrement chain->use count for all elements
       from preparation phase
    4. kernel does another set walk to remove elements from the commit phase
       (or another walk to do a chain->use increment for all elements from
        abort phase)
    
    If E has already expired in 1), it will be ignored during list walk, so its use count
    won't have been changed.
    
    Then, when set is culled, ->destroy callback will zap the element via
    nf_tables_set_elem_destroy(), but this function is only safe for
    elements that have been deactivated earlier from the preparation phase:
    lack of earlier deactivate removes the element but leaks the chain use
    count, which results in a WARN splat when the chain gets removed later,
    plus a leak of the nft_chain structure.
    
    Update pipapo_get() not to skip expired elements, otherwise flush
    command reports bogus ENOENT errors.
    
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Fixes: 8d8540c4f5e0 ("netfilter: nft_set_rbtree: add timeout support")
    Fixes: 9d0982927e79 ("netfilter: nft_hash: add support for timeouts")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2d1125ee04eb093d61eb4ca16accacc7a270128
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Sep 6 22:47:16 2023 -0400

    tracing: Have event inject files inc the trace array ref count
    
    [ Upstream commit e5c624f027ac74f97e97c8f36c69228ac9f1102d ]
    
    The event inject files add events for a specific trace array. For an
    instance, if the file is opened and the instance is deleted, reading or
    writing to the file will cause a use after free.
    
    Up the ref count of the trace_array when a event inject file is opened.
    
    Link: https://lkml.kernel.org/r/20230907024804.292337868@goodmis.org
    Link: https://lore.kernel.org/all/1cb3aee2-19af-c472-e265-05176fe9bd84@huawei.com/
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Zheng Yejian <zhengyejian1@huawei.com>
    Fixes: 6c3edaf9fd6a ("tracing: Introduce trace event injection")
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b6c088c38f756306dc68e5c7127adcb78cb0d78
Author: Jan Kara <jack@suse.cz>
Date:   Wed Sep 13 17:04:55 2023 +0200

    ext4: do not let fstrim block system suspend
    
    [ Upstream commit 5229a658f6453362fbb9da6bf96872ef25a7097e ]
    
    Len Brown has reported that system suspend sometimes fail due to
    inability to freeze a task working in ext4_trim_fs() for one minute.
    Trimming a large filesystem on a disk that slowly processes discard
    requests can indeed take a long time. Since discard is just an advisory
    call, it is perfectly fine to interrupt it at any time and the return
    number of discarded blocks until that moment. Do that when we detect the
    task is being frozen.
    
    Cc: stable@kernel.org
    Reported-by: Len Brown <lenb@kernel.org>
    Suggested-by: Dave Chinner <david@fromorbit.com>
    References: https://bugzilla.kernel.org/show_bug.cgi?id=216322
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230913150504.9054-2-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9d3bb58da9594576f6b00427b2e97c18e418c3e
Author: Jan Kara <jack@suse.cz>
Date:   Wed Sep 13 17:04:54 2023 +0200

    ext4: move setting of trimmed bit into ext4_try_to_trim_range()
    
    [ Upstream commit 45e4ab320c9b5fa67b1fc3b6a9b381cfcc0c8488 ]
    
    Currently we set the group's trimmed bit in ext4_trim_all_free() based
    on return value of ext4_try_to_trim_range(). However when we will want
    to abort trimming because of suspend attempt, we want to return success
    from ext4_try_to_trim_range() but not set the trimmed bit. Instead
    implementing awkward propagation of this information, just move setting
    of trimmed bit into ext4_try_to_trim_range() when the whole group is
    trimmed.
    
    Cc: stable@kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230913150504.9054-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d91abea15c61a0d49afd3c2d159150ebe390b25b
Author: Kemeng Shi <shikemeng@huaweicloud.com>
Date:   Tue Aug 1 22:32:00 2023 +0800

    ext4: replace the traditional ternary conditional operator with with max()/min()
    
    [ Upstream commit de8bf0e5ee7482585450357c6d4eddec8efc5cb7 ]
    
    Replace the traditional ternary conditional operator with with max()/min()
    
    Signed-off-by: Kemeng Shi <shikemeng@huaweicloud.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20230801143204.2284343-7-shikemeng@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 656f0495e4ac91b3f1d4a1175397922ac9cd6798
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Wed Nov 3 15:51:21 2021 +0100

    ext4: change s_last_trim_minblks type to unsigned long
    
    [ Upstream commit 2327fb2e23416cfb2795ccca2f77d4d65925be99 ]
    
    There is no good reason for the s_last_trim_minblks to be atomic. There is
    no data integrity needed and there is no real danger in setting and
    reading it in a racy manner. Change it to be unsigned long, the same type
    as s_clusters_per_group which is the maximum that's allowed.
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Suggested-by: Andreas Dilger <adilger@dilger.ca>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20211103145122.17338-1-lczerner@redhat.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be57857fb3c35f2c4f1862dde521037e0986733b
Author: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date:   Fri Aug 20 14:08:53 2021 +0200

    ext4: scope ret locally in ext4_try_to_trim_range()
    
    [ Upstream commit afcc4e32f606dbfb47aa7309172c89174b86e74c ]
    
    As commit 6920b3913235 ("ext4: add new helper interface
    ext4_try_to_trim_range()") moves some code into the separate function
    ext4_try_to_trim_range(), the use of the variable ret within that
    function is more limited and can be adjusted as well.
    
    Scope the use of the variable ret locally and drop dead assignments.
    
    No functional change.
    
    Signed-off-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Link: https://lore.kernel.org/r/20210820120853.23134-1-lukas.bulwahn@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 45e4ab320c9b ("ext4: move setting of trimmed bit into ext4_try_to_trim_range()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e832b55881a1de6bdad57462c6d6f15cc976065b
Author: Szuying Chen <chensiying21@gmail.com>
Date:   Thu Sep 7 16:17:10 2023 +0800

    ata: libahci: clear pending interrupt status
    
    [ Upstream commit 737dd811a3dbfd7edd4ad2ba5152e93d99074f83 ]
    
    When a CRC error occurs, the HBA asserts an interrupt to indicate an
    interface fatal error (PxIS.IFS). The ISR clears PxIE and PxIS, then
    does error recovery. If the adapter receives another SDB FIS
    with an error (PxIS.TFES) from the device before the start of the EH
    recovery process, the interrupt signaling the new SDB cannot be
    serviced as PxIE was cleared already. This in turn results in the HBA
    inability to issue any command during the error recovery process after
    setting PxCMD.ST to 1 because PxIS.TFES is still set.
    
    According to AHCI 1.3.1 specifications section 6.2.2, fatal errors
    notified by setting PxIS.HBFS, PxIS.HBDS, PxIS.IFS or PxIS.TFES will
    cause the HBA to enter the ERR:Fatal state. In this state, the HBA
    shall not issue any new commands.
    
    To avoid this situation, introduce the function
    ahci_port_clear_pending_irq() to clear pending interrupts before
    executing a COMRESET. This follows the AHCI 1.3.1 - section 6.2.2.2
    specification.
    
    Signed-off-by: Szuying Chen <Chloe_Chen@asmedia.com.tw>
    Fixes: e0bfd149973d ("[PATCH] ahci: stop engine during hard reset")
    Cc: stable@vger.kernel.org
    Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6189f373151a2d12213e5af5fecd1d4ff5e6867
Author: Hannes Reinecke <hare@suse.de>
Date:   Tue Dec 21 08:20:47 2021 +0100

    ata: ahci: Drop pointless VPRINTK() calls and convert the remaining ones
    
    [ Upstream commit 93c7711494f47f9c829321e2a8711671b02f6e4c ]
    
    Drop pointless VPRINTK() calls for entering and existing interrupt
    routines and convert the remaining calls to dev_dbg().
    
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Stable-dep-of: 737dd811a3db ("ata: libahci: clear pending interrupt status")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa6d449e4d024d8c17f4288e0567d28ace69415c
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Sep 6 22:47:12 2023 -0400

    tracing: Increase trace array ref count on enable and filter files
    
    [ Upstream commit f5ca233e2e66dc1c249bf07eefa37e34a6c9346a ]
    
    When the trace event enable and filter files are opened, increment the
    trace array ref counter, otherwise they can be accessed when the trace
    array is being deleted. The ref counter keeps the trace array from being
    deleted while those files are opened.
    
    Link: https://lkml.kernel.org/r/20230907024803.456187066@goodmis.org
    Link: https://lore.kernel.org/all/1cb3aee2-19af-c472-e265-05176fe9bd84@huawei.com/
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: 8530dec63e7b4 ("tracing: Add tracing_check_open_get_tr()")
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Reported-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a688f191a17b0ce1226a2eeaf61c82586655f86
Author: John Keeping <john@keeping.me.uk>
Date:   Tue Dec 7 14:25:58 2021 +0000

    tracing: Make trace_marker{,_raw} stream-like
    
    [ Upstream commit 2972e3050e3517a85ca1813b227d4c302e804343 ]
    
    The tracing marker files are write-only streams with no meaningful
    concept of file position.  Using stream_open() to mark them as
    stream-link indicates this and has the added advantage that a single
    file descriptor can now be used from multiple threads without contention
    thanks to clearing FMODE_ATOMIC_POS.
    
    Note that this has the potential to break existing userspace by since
    both lseek(2) and pwrite(2) will now return ESPIPE when previously lseek
    would have updated the stored offset and pwrite would have appended to
    the trace.  A survey of libtracefs and several other projects found to
    use trace_marker(_raw) [1][2][3] suggests that everyone limits
    themselves to calling write(2) and close(2) on these file descriptors so
    there is a good chance this will go unnoticed and the benefits of
    reduced overhead and lock contention seem worth the risk.
    
    [1] https://github.com/google/perfetto
    [2] https://github.com/intel/media-driver/
    [3] https://w1.fi/cgit/hostap/
    
    Link: https://lkml.kernel.org/r/20211207142558.347029-1-john@metanate.com
    
    Signed-off-by: John Keeping <john@metanate.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Stable-dep-of: f5ca233e2e66 ("tracing: Increase trace array ref count on enable and filter files")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68fc0e75c7934172f76848c5e7f990c8160fd3a5
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Wed Aug 30 15:29:34 2023 -0400

    NFSv4.1: fix pnfs MDS=DS session trunking
    
    [ Upstream commit 806a3bc421a115fbb287c1efce63a48c54ee804b ]
    
    Currently, when GETDEVICEINFO returns multiple locations where each
    is a different IP but the server's identity is same as MDS, then
    nfs4_set_ds_client() finds the existing nfs_client structure which
    has the MDS's max_connect value (and if it's 1), then the 1st IP
    on the DS's list will get dropped due to MDS trunking rules. Other
    IPs would be added as they fall under the pnfs trunking rules.
    
    For the list of IPs the 1st goes thru calling nfs4_set_ds_client()
    which will eventually call nfs4_add_trunk() and call into
    rpc_clnt_test_and_add_xprt() which has the check for MDS trunking.
    The other IPs (after the 1st one), would call rpc_clnt_add_xprt()
    which doesn't go thru that check.
    
    nfs4_add_trunk() is called when MDS trunking is happening and it
    needs to enforce the usage of max_connect mount option of the
    1st mount. However, this shouldn't be applied to pnfs flow.
    
    Instead, this patch proposed to treat MDS=DS as DS trunking and
    make sure that MDS's max_connect limit does not apply to the
    1st IP returned in the GETDEVICEINFO list. It does so by
    marking the newly created client with a new flag NFS_CS_PNFS
    which then used to pass max_connect value to use into the
    rpc_clnt_test_and_add_xprt() instead of the existing rpc
    client's max_connect value set by the MDS connection.
    
    For example, mount was done without max_connect value set
    so MDS's rpc client has cl_max_connect=1. Upon calling into
    rpc_clnt_test_and_add_xprt() and using rpc client's value,
    the caller passes in max_connect value which is previously
    been set in the pnfs path (as a part of handling
    GETDEVICEINFO list of IPs) in nfs4_set_ds_client().
    
    However, when NFS_CS_PNFS flag is not set and we know we
    are doing MDS trunking, comparing a new IP of the same
    server, we then set the max_connect value to the
    existing MDS's value and pass that into
    rpc_clnt_test_and_add_xprt().
    
    Fixes: dc48e0abee24 ("SUNRPC enforce creation of no more than max_connect xprts")
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ff78c45549422c5eebc6aad08993f032401d3fa
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Thu Jul 13 13:02:38 2023 -0400

    NFSv4.1: use EXCHGID4_FLAG_USE_PNFS_DS for DS server
    
    [ Upstream commit 51d674a5e4889f1c8e223ac131cf218e1631e423 ]
    
    After receiving the location(s) of the DS server(s) in the
    GETDEVINCEINFO, create the request for the clientid to such
    server and indicate that the client is connecting to a DS.
    
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Stable-dep-of: 806a3bc421a1 ("NFSv4.1: fix pnfs MDS=DS session trunking")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d381bfe138957ff60345326e97c0c3ed95d726f1
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Sep 4 12:50:09 2023 -0400

    SUNRPC: Mark the cred for revalidation if the server rejects it
    
    [ Upstream commit 611fa42dfa9d2f3918ac5f4dd5705dfad81b323d ]
    
    If the server rejects the credential as being stale, or bad, then we
    should mark it for revalidation before retransmitting.
    
    Fixes: 7f5667a5f8c4 ("SUNRPC: Clean up rpc_verify_header()")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c434ddafe61cf862eff8edf1b9488af0fb3b96
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Sep 4 12:43:58 2023 -0400

    NFS/pNFS: Report EINVAL errors from connect() to the server
    
    [ Upstream commit dd7d7ee3ba2a70d12d02defb478790cf57d5b87b ]
    
    With IPv6, connect() can occasionally return EINVAL if a route is
    unavailable. If this happens during I/O to a data server, we want to
    report it using LAYOUTERROR as an inability to connect.
    
    Fixes: dd52128afdde ("NFSv4.1/pnfs Ensure flexfiles reports all connection related errors")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c0a7e1f2a6aad84930fe5f3c436c565d3dd8f0f
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Sep 4 12:34:41 2023 -0400

    NFS: More fixes for nfs_direct_write_reschedule_io()
    
    [ Upstream commit b11243f720ee5f9376861099019c8542969b6318 ]
    
    Ensure that all requests are put back onto the commit list so that they
    can be rescheduled.
    
    Fixes: 4daaeba93822 ("NFS: Fix nfs_direct_write_reschedule_io()")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a354b4a367f565b95a6ca819eb792af81af3d4da
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Sep 4 12:34:40 2023 -0400

    NFS: Use the correct commit info in nfs_join_page_group()
    
    [ Upstream commit b193a78ddb5ee7dba074d3f28dc050069ba083c0 ]
    
    Ensure that nfs_clear_request_commit() updates the correct counters when
    it removes them from the commit list.
    
    Fixes: ed5d588fe47f ("NFS: Try to join page groups before an O_DIRECT retransmission")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

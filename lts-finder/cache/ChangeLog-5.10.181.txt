commit 272d4b8a5b96dda1374b9039a884cce2cd9cb630
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue May 30 12:57:59 2023 +0100

    Linux 5.10.181
    
    Link: https://lore.kernel.org/r/20230528190843.514829708@linuxfoundation.org
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf7ee4b15838afe7b16b5a88e3e8acf4e841e8d3
Author: David Epping <david.epping@missinglinkelectronics.com>
Date:   Tue May 23 17:31:05 2023 +0200

    net: phy: mscc: add VSC8502 to MODULE_DEVICE_TABLE
    
    commit 57fb54ab9f6945e204740b696bd4cee61ee04e5e upstream.
    
    The mscc driver implements support for VSC8502, so its ID should be in
    the MODULE_DEVICE_TABLE for automatic loading.
    
    Signed-off-by: David Epping <david.epping@missinglinkelectronics.com>
    Fixes: d3169863310d ("net: phy: mscc: add support for VSC8502")
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98cedb991094824e4bc764f86a6716c8c47254bd
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat May 20 11:48:55 2023 +0200

    3c589_cs: Fix an error handling path in tc589_probe()
    
    commit 640bf95b2c7c2981fb471acdafbd3e0458f8390d upstream.
    
    Should tc589_config() fail, some resources need to be released as already
    done in the remove function.
    
    Fixes: 15b99ac17295 ("[PATCH] pcmcia: add return value to _config() functions")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/d8593ae867b24c79063646e36f9b18b0790107cb.1684575975.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f449e409b75181f5b16302cbd7466649757e014
Author: Hugo Villeneuve <hvilleneuve@dimonoff.com>
Date:   Mon May 1 13:05:32 2023 -0400

    arm64: dts: imx8mn-var-som: fix PHY detection bug by adding deassert delay
    
    commit f161cea5a20f3aeeb637a88ad1705fc2720b4d58 upstream.
    
    While testing the ethernet interface on a Variscite symphony carrier
    board using an imx8mn SOM with an onboard ADIN1300 PHY (EC hardware
    configuration), the ethernet PHY is not detected.
    
    The ADIN1300 datasheet indicate that the "Management interface
    active (t4)" state is reached at most 5ms after the reset signal is
    deasserted.
    
    The device tree in Variscite custom git repository uses the following
    property:
    
        phy-reset-post-delay = <20>;
    
    Add a new MDIO property 'reset-deassert-us' of 20ms to have the same
    delay inside the ethphy node. Adding this property fixes the problem
    with the PHY detection.
    
    Note that this SOM can also have an Atheros AR8033 PHY. In this case,
    a 1ms deassert delay is sufficient. Add a comment to that effect.
    
    Fixes: ade0176dd8a0 ("arm64: dts: imx8mn-var-som: Add Variscite VAR-SOM-MX8MN System on Module")
    Signed-off-by: Hugo Villeneuve <hvilleneuve@dimonoff.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4d10a6df1529b3f446cdada5c25e065f4712756
Author: Shay Drory <shayd@nvidia.com>
Date:   Tue May 2 13:35:11 2023 +0300

    net/mlx5: Devcom, fix error flow in mlx5_devcom_register_device
    
    commit af87194352cad882d787d06fb7efa714acd95427 upstream.
    
    In case devcom allocation is failed, mlx5 is always freeing the priv.
    However, this priv might have been allocated by a different thread,
    and freeing it might lead to use-after-free bugs.
    Fix it by freeing the priv only in case it was allocated by the
    running thread.
    
    Fixes: fadd59fc50d0 ("net/mlx5: Introduce inter-device communication mechanism")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b9c561b9fc186a623982eb9fdd5fa58e48ccf47
Author: Roi Dayan <roid@nvidia.com>
Date:   Mon May 1 14:37:56 2023 +0300

    net/mlx5: Fix error message when failing to allocate device memory
    
    commit a65735148e0328f80c0f72f9f8d2f609bfcf4aff upstream.
    
    Fix spacing for the error and also the correct error code pointer.
    
    Fixes: c9b9dcb430b3 ("net/mlx5: Move device memory management to mlx5_core")
    Signed-off-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c21862232f6cd1437e2c7531eec196a593c1d9ae
Author: Erez Shitrit <erezsh@nvidia.com>
Date:   Thu Mar 9 16:43:15 2023 +0200

    net/mlx5: DR, Fix crc32 calculation to work on big-endian (BE) CPUs
    
    commit 1e5daf5565b61a96e570865091589afc9156e3d3 upstream.
    
    When calculating crc for hash index we use the function crc32 that
    calculates for little-endian (LE) arch.
    Then we convert it to network endianness using htonl(), but it's wrong
    to do the conversion in BE archs since the crc32 value is already LE.
    
    The solution is to switch the bytes from the crc result for all types
    of arc.
    
    Fixes: 40416d8ede65 ("net/mlx5: DR, Replace CRC32 implementation to use kernel lib")
    Signed-off-by: Erez Shitrit <erezsh@nvidia.com>
    Reviewed-by: Alex Vesker <valex@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 058fd18e747750abf9314f6add2c6d9c596cdf58
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue May 16 18:59:35 2023 -0700

    net/mlx5e: do as little as possible in napi poll when budget is 0
    
    commit afbed3f74830163f9559579dee382cac3cff82da upstream.
    
    NAPI gets called with budget of 0 from netpoll, which has interrupts
    disabled. We should try to free some space on Tx rings and nothing
    else.
    
    Specifically do not try to handle XDP TX or try to refill Rx buffers -
    we can't use the page pool from IRQ context. Don't check if IRQs moved,
    either, that makes no sense in netpoll. Netpoll calls _all_ the rings
    from whatever CPU it happens to be invoked on.
    
    In general do as little as possible, the work quickly adds up when
    there's tens of rings to poll.
    
    The immediate stack trace I was seeing is:
    
        __do_softirq+0xd1/0x2c0
        __local_bh_enable_ip+0xc7/0x120
        </IRQ>
        <TASK>
        page_pool_put_defragged_page+0x267/0x320
        mlx5e_free_xdpsq_desc+0x99/0xd0
        mlx5e_poll_xdpsq_cq+0x138/0x3b0
        mlx5e_napi_poll+0xc3/0x8b0
        netpoll_poll_dev+0xce/0x150
    
    AFAIU page pool takes a BH lock, releases it and since BH is now
    enabled tries to run softirqs.
    
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Fixes: 60bbf7eeef10 ("mlx5: use page_pool for xdp_return_frame call")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5afd5fb8a9a77de550bf0a4114ad65506781bdfa
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat May 20 10:30:17 2023 +0200

    forcedeth: Fix an error handling path in nv_probe()
    
    commit 5b17a4971d3b2a073f4078dd65331efbe35baa2d upstream.
    
    If an error occures after calling nv_mgmt_acquire_sema(), it should be
    undone with a corresponding nv_mgmt_release_sema() call.
    
    Add it in the error handling path of the probe as already done in the
    remove function.
    
    Fixes: cac1c52c3621 ("forcedeth: mgmt unit interface")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Zhu Yanjun <zyjzyj2000@gmail.com>
    Link: https://lore.kernel.org/r/355e9a7d351b32ad897251b6f81b5886fcdc6766.1684571393.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80a4b9ad4288c29aebaf1b09f6eb208c33ba3303
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Fri May 19 22:17:07 2023 +0200

    ASoC: Intel: Skylake: Fix declaration of enum skl_ch_cfg
    
    commit 95109657471311601b98e71f03d0244f48dc61bb upstream.
    
    Constant 'C4_CHANNEL' does not exist on the firmware side. Value 0xC is
    reserved for 'C7_1' instead.
    
    Fixes: 04afbbbb1cba ("ASoC: Intel: Skylake: Update the topology interface structure")
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Link: https://lore.kernel.org/r/20230519201711.4073845-4-amadeuszx.slawinski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c966b58c8515b2d6720ddf7b327b4ba5d9ba89a2
Author: Vernon Lovejoy <vlovejoy@redhat.com>
Date:   Fri May 12 12:42:32 2023 +0200

    x86/show_trace_log_lvl: Ensure stack pointer is aligned, again
    
    commit 2e4be0d011f21593c6b316806779ba1eba2cd7e0 upstream.
    
    The commit e335bb51cc15 ("x86/unwind: Ensure stack pointer is aligned")
    tried to align the stack pointer in show_trace_log_lvl(), otherwise the
    "stack < stack_info.end" check can't guarantee that the last read does
    not go past the end of the stack.
    
    However, we have the same problem with the initial value of the stack
    pointer, it can also be unaligned. So without this patch this trivial
    kernel module
    
            #include <linux/module.h>
    
            static int init(void)
            {
                    asm volatile("sub    $0x4,%rsp");
                    dump_stack();
                    asm volatile("add    $0x4,%rsp");
    
                    return -EAGAIN;
            }
    
            module_init(init);
            MODULE_LICENSE("GPL");
    
    crashes the kernel.
    
    Fixes: e335bb51cc15 ("x86/unwind: Ensure stack pointer is aligned")
    Signed-off-by: Vernon Lovejoy <vlovejoy@redhat.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Link: https://lore.kernel.org/r/20230512104232.GA10227@redhat.com
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0de80163dea668b09a58c39545acb75821aff2ea
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Wed May 3 18:11:35 2023 +0300

    xen/pvcalls-back: fix double frees with pvcalls_new_active_socket()
    
    commit 8fafac202d18230bb9926bda48e563fd2cce2a4f upstream.
    
    In the pvcalls_new_active_socket() function, most error paths call
    pvcalls_back_release_active(fedata->dev, fedata, map) which calls
    sock_release() on "sock".  The bug is that the caller also frees sock.
    
    Fix this by making every error path in pvcalls_new_active_socket()
    release the sock, and don't free it in the caller.
    
    Fixes: 5db4d286a8ef ("xen/pvcalls: implement connect command")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/e5f98dc2-0305-491f-a860-71bbd1398a2f@kili.mountain
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b663696c06527c9649d66f5176a3098554cef0d6
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Apr 21 13:42:41 2023 +0300

    coresight: Fix signedness bug in tmc_etr_buf_insert_barrier_packet()
    
    commit f67bc15e526bb9920683ad6c1891ff9e08981335 upstream.
    
    This code generates a Smatch warning:
    
        drivers/hwtracing/coresight/coresight-tmc-etr.c:947 tmc_etr_buf_insert_barrier_packet()
        error: uninitialized symbol 'bufp'.
    
    The problem is that if tmc_sg_table_get_data() returns -EINVAL, then
    when we test if "len < CORESIGHT_BARRIER_PKT_SIZE", the negative "len"
    value is type promoted to a high unsigned long value which is greater
    than CORESIGHT_BARRIER_PKT_SIZE.  Fix this bug by adding an explicit
    check for error codes.
    
    Fixes: 75f4e3619fe2 ("coresight: tmc-etr: Add transparent buffer management")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/7d33e244-d8b9-4c27-9653-883a13534b01@kili.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a52d2019ec7cc200fcd7eba6f4815525deceff3d
Author: Hao Ge <gehao@kylinos.cn>
Date:   Mon Apr 24 13:18:35 2023 +0800

    fs: fix undefined behavior in bit shift for SB_NOUSER
    
    commit f15afbd34d8fadbd375f1212e97837e32bc170cc upstream.
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. It was spotted by UBSAN.
    
    So let's just fix this by using the BIT() helper for all SB_* flags.
    
    Fixes: e462ec50cb5f ("VFS: Differentiate mount flags (MS_*) from internal superblock flags")
    Signed-off-by: Hao Ge <gehao@kylinos.cn>
    Message-Id: <20230424051835.374204-1-gehao@kylinos.cn>
    [brauner@kernel.org: use BIT() for all SB_* flags]
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52967bbb93eb817db90f8aadc1c083f7f3e194d4
Author: Daisuke Nojiri <dnojiri@chromium.org>
Date:   Mon Apr 24 11:25:58 2023 -0700

    power: supply: sbs-charger: Fix INHIBITED bit for Status reg
    
    commit b2f2a3c9800208b0db2c2e34b05323757117faa2 upstream.
    
    CHARGE_INHIBITED bit position of the ChargerStatus register is actually
    0 not 1. This patch corrects it.
    
    Fixes: feb583e37f8a8 ("power: supply: add sbs-charger driver")
    Signed-off-by: Daisuke Nojiri <dnojiri@chromium.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e85757da9091998276ff21a13915ac25229cc232
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:34 2023 +0200

    power: supply: bq27xxx: Fix poll_interval handling and races on remove
    
    commit c00bc80462afc7963f449d7f21d896d2f629cacc upstream.
    
    Before this patch bq27xxx_battery_teardown() was setting poll_interval = 0
    to avoid bq27xxx_battery_update() requeuing the delayed_work item.
    
    There are 2 problems with this:
    
    1. If the driver is unbound through sysfs, rather then the module being
       rmmod-ed, this changes poll_interval unexpectedly
    
    2. This is racy, after it being set poll_interval could be changed
       before bq27xxx_battery_update() checks it through
       /sys/module/bq27xxx_battery/parameters/poll_interval
    
    Fix this by added a removed attribute to struct bq27xxx_device_info and
    using that instead of setting poll_interval to 0.
    
    There also is another poll_interval related race on remove(), writing
    /sys/module/bq27xxx_battery/parameters/poll_interval will requeue
    the delayed_work item for all devices on the bq27xxx_battery_devices
    list and the device being removed was only removed from that list
    after cancelling the delayed_work item.
    
    Fix this by moving the removal from the bq27xxx_battery_devices list
    to before cancelling the delayed_work item.
    
    Fixes: 8cfaaa811894 ("bq27x00_battery: Fix OOPS caused by unregistring bq27x00 driver")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1da9a4b55a6688e3a30c16d0cf2e7c6a90a684fb
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:33 2023 +0200

    power: supply: bq27xxx: Fix I2C IRQ race on remove
    
    commit 444ff00734f3878cd54ddd1ed5e2e6dbea9326d5 upstream.
    
    devm_request_threaded_irq() requested IRQs are only free-ed after
    the driver's remove function has ran. So the IRQ could trigger and
    call bq27xxx_battery_update() after bq27xxx_battery_teardown() has
    already run.
    
    Switch to explicitly free-ing the IRQ in bq27xxx_battery_i2c_remove()
    to fix this.
    
    Fixes: 8807feb91b76 ("power: bq27xxx_battery: Add interrupt handling support")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac1ab213946d69d46b1e818c7c6520f87d570d47
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:32 2023 +0200

    power: supply: bq27xxx: Fix bq27xxx_battery_update() race condition
    
    commit 5c34c0aef185dcd10881847b9ebf20046aa77cb4 upstream.
    
    bq27xxx_battery_update() assumes / requires that it is only run once,
    not multiple times at the same time. But there are 3 possible callers:
    
    1. bq27xxx_battery_poll() delayed_work item handler
    2. bq27xxx_battery_irq_handler_thread() I2C IRQ handler
    3. bq27xxx_battery_setup()
    
    And there is no protection against these racing with each other,
    fix this race condition by making all callers take di->lock:
    
    - Rename bq27xxx_battery_update() to bq27xxx_battery_update_unlocked()
    
    - Add new bq27xxx_battery_update() which takes di->lock and then calls
      bq27xxx_battery_update_unlocked()
    
    - Make stale cache check code in bq27xxx_battery_get_property(), which
      already takes di->lock directly to check the jiffies, call
      bq27xxx_battery_update_unlocked() instead of messing with
      the delayed_work item
    
    - Make bq27xxx_battery_update_unlocked() mod the delayed-work item
      so that the next poll is delayed to poll_interval milliseconds after
      the last update independent of the source of the update
    
    Fixes: 740b755a3b34 ("bq27x00: Poll battery state")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2de6eb7c40f98f1d09f5a0cafd7e89933de900c3
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 13 12:09:41 2023 +0200

    power: supply: leds: Fix blink to LED on transition
    
    commit e4484643991e0f6b89060092563f0dbab9450cbb upstream.
    
    When a battery's status changes from charging to full then
    the charging-blink-full-solid trigger tries to change
    the LED from blinking to solid/on.
    
    As is documented in include/linux/leds.h to deactivate blinking /
    to make the LED solid a LED_OFF must be send:
    
    """
             * Deactivate blinking again when the brightness is set to LED_OFF
             * via the brightness_set() callback.
    """
    
    led_set_brighness() calls with a brightness value other then 0 / LED_OFF
    merely change the brightness of the LED in its on state while it is
    blinking.
    
    So power_supply_update_bat_leds() must first send a LED_OFF event
    before the LED_FULL to disable blinking.
    
    Fixes: 6501f728c56f ("power_supply: Add new LED trigger charging-blink-solid-full")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Vasily Khoruzhick <anarsoul@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5f82688ae10f5f386952e65e941bb8868ee54dc
Author: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
Date:   Tue May 23 08:29:44 2023 +0000

    ipv6: Fix out-of-bounds access in ipv6_find_tlv()
    
    commit 878ecb0897f4737a4c9401f3523fd49589025671 upstream.
    
    optlen is fetched without checking whether there is more than one byte to parse.
    It can lead to out-of-bounds access.
    
    Found by InfoTeCS on behalf of Linux Verification Center
    (linuxtesting.org) with SVACE.
    
    Fixes: c61a40432509 ("[IPV6]: Find option offset by type.")
    Signed-off-by: Gavrilov Ilia <Ilia.Gavrilov@infotecs.ru>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a61d5c13c7d11d0d912e9ef55e767bf53218a063
Author: Will Deacon <will@kernel.org>
Date:   Thu May 18 11:25:28 2023 +0100

    bpf: Fix mask generation for 32-bit narrow loads of 64-bit fields
    
    commit 0613d8ca9ab382caabe9ed2dceb429e9781e443f upstream.
    
    A narrow load from a 64-bit context field results in a 64-bit load
    followed potentially by a 64-bit right-shift and then a bitwise AND
    operation to extract the relevant data.
    
    In the case of a 32-bit access, an immediate mask of 0xffffffff is used
    to construct a 64-bit BPP_AND operation which then sign-extends the mask
    value and effectively acts as a glorified no-op. For example:
    
    0:      61 10 00 00 00 00 00 00 r0 = *(u32 *)(r1 + 0)
    
    results in the following code generation for a 64-bit field:
    
            ldr     x7, [x7]        // 64-bit load
            mov     x10, #0xffffffffffffffff
            and     x7, x7, x10
    
    Fix the mask generation so that narrow loads always perform a 32-bit AND
    operation:
    
            ldr     x7, [x7]        // 64-bit load
            mov     w10, #0xffffffff
            and     w7, w7, w10
    
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Krzesimir Nowak <krzesimir@kinvolk.io>
    Cc: Andrey Ignatov <rdna@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Fixes: 31fd85816dbe ("bpf: permits narrower load from bpf program context fields")
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20230518102528.1341-1-will@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72971f4071b49edd0823cc37019080486664a248
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Thu May 18 12:10:42 2023 +0530

    octeontx2-pf: Fix TSOv6 offload
    
    commit de678ca38861f2eb58814048076dcf95ed1b5bf9 upstream.
    
    HW adds segment size to the payload length
    in the IPv6 header. Fix payload length to
    just TCP header length instead of 'TCP header
    size + IPv6 header size'.
    
    Fixes: 86d7476078b8 ("octeontx2-pf: TCP segmentation offload support")
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: Ratheesh Kannoth <rkannoth@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c8a016822bbfde43ab038800f4c421ea862942a
Author: Po-Hsu Lin <po-hsu.lin@canonical.com>
Date:   Thu May 18 12:37:59 2023 +0800

    selftests: fib_tests: mute cleanup error message
    
    commit d226b1df361988f885c298737d6019c863a25f26 upstream.
    
    In the end of the test, there will be an error message induced by the
    `ip netns del ns1` command in cleanup()
    
      Tests passed: 201
      Tests failed:   0
      Cannot remove namespace file "/run/netns/ns1": No such file or directory
    
    This can even be reproduced with just `./fib_tests.sh -h` as we're
    calling cleanup() on exit.
    
    Redirect the error message to /dev/null to mute it.
    
    V2: Update commit message and fixes tag.
    V3: resubmit due to missing netdev ML in V2
    
    Fixes: b60417a9f2b8 ("selftest: fib_tests: Always cleanup before exit")
    Signed-off-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a594382ec6d0cc8cff5a8bc7e61b54e3858fb243
Author: Pratyush Yadav <ptyadav@amazon.de>
Date:   Mon May 22 17:30:20 2023 +0200

    net: fix skb leak in __skb_tstamp_tx()
    
    commit 8a02fb71d7192ff1a9a47c9d937624966c6e09af upstream.
    
    Commit 50749f2dd685 ("tcp/udp: Fix memleaks of sk and zerocopy skbs with
    TX timestamp.") added a call to skb_orphan_frags_rx() to fix leaks with
    zerocopy skbs. But it ended up adding a leak of its own. When
    skb_orphan_frags_rx() fails, the function just returns, leaking the skb
    it just cloned. Free it before returning.
    
    This bug was discovered and resolved using Coverity Static Analysis
    Security Testing (SAST) by Synopsys, Inc.
    
    Fixes: 50749f2dd685 ("tcp/udp: Fix memleaks of sk and zerocopy skbs with TX timestamp.")
    Signed-off-by: Pratyush Yadav <ptyadav@amazon.de>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20230522153020.32422-1-ptyadav@amazon.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a30dce9d7f70f8438956f6a01142b926c301334
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 10 15:40:05 2023 -0400

    media: radio-shark: Add endpoint checks
    
    commit 76e31045ba030e94e72105c01b2e98f543d175ac upstream.
    
    The syzbot fuzzer was able to provoke a WARNING from the radio-shark2
    driver:
    
    ------------[ cut here ]------------
    usb 1-1: BOGUS urb xfer, pipe 1 != type 3
    WARNING: CPU: 0 PID: 3271 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed2/0x1880 drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 0 PID: 3271 Comm: kworker/0:3 Not tainted 6.1.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:usb_submit_urb+0xed2/0x1880 drivers/usb/core/urb.c:504
    Code: 7c 24 18 e8 00 36 ea fb 48 8b 7c 24 18 e8 36 1c 02 ff 41 89 d8 44 89 e1 4c 89 ea 48 89 c6 48 c7 c7 a0 b6 90 8a e8 9a 29 b8 03 <0f> 0b e9 58 f8 ff ff e8 d2 35 ea fb 48 81 c5 c0 05 00 00 e9 84 f7
    RSP: 0018:ffffc90003876dd0 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000003 RCX: 0000000000000000
    RDX: ffff8880750b0040 RSI: ffffffff816152b8 RDI: fffff5200070edac
    RBP: ffff8880172d81e0 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000080000000 R11: 0000000000000000 R12: 0000000000000001
    R13: ffff8880285c5040 R14: 0000000000000002 R15: ffff888017158200
    FS:  0000000000000000(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffe03235b90 CR3: 000000000bc8e000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     usb_start_wait_urb+0x101/0x4b0 drivers/usb/core/message.c:58
     usb_bulk_msg+0x226/0x550 drivers/usb/core/message.c:387
     shark_write_reg+0x1ff/0x2e0 drivers/media/radio/radio-shark2.c:88
    ...
    
    The problem was caused by the fact that the driver does not check
    whether the endpoints it uses are actually present and have the
    appropriate types.  This can be fixed by adding a simple check of
    these endpoints (and similarly for the radio-shark driver).
    
    Link: https://syzkaller.appspot.com/bug?extid=4b3f8190f6e13b3efd74
    Reported-and-tested-by: syzbot+4b3f8190f6e13b3efd74@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/e2858ab4-4adf-46e5-bbf6-c56742034547@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccef03c5113506d27dd6530d3a9ef5715c068e13
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 10 15:38:22 2023 -0400

    USB: sisusbvga: Add endpoint checks
    
    commit df05a9b05e466a46725564528b277d0c570d0104 upstream.
    
    The syzbot fuzzer was able to provoke a WARNING from the sisusbvga driver:
    
    ------------[ cut here ]------------
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 1 PID: 26 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 1 PID: 26 Comm: kworker/1:1 Not tainted 6.2.0-rc5-syzkaller-00199-g5af6ce704936 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/12/2023
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Code: 7c 24 18 e8 6c 50 80 fb 48 8b 7c 24 18 e8 62 1a 01 ff 41 89 d8 44 89 e1 4c 89 ea 48 89 c6 48 c7 c7 60 b1 fa 8a e8 84 b0 be 03 <0f> 0b e9 58 f8 ff ff e8 3e 50 80 fb 48 81 c5 c0 05 00 00 e9 84 f7
    RSP: 0018:ffffc90000a1ed18 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000001 RCX: 0000000000000000
    RDX: ffff888012783a80 RSI: ffffffff816680ec RDI: fffff52000143d95
    RBP: ffff888079020000 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000080000000 R11: 0000000000000000 R12: 0000000000000003
    R13: ffff888017d33370 R14: 0000000000000003 R15: ffff888021213600
    FS:  0000000000000000(0000) GS:ffff8880b9900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00005592753a60b0 CR3: 0000000022899000 CR4: 00000000003506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     sisusb_bulkout_msg drivers/usb/misc/sisusbvga/sisusbvga.c:224 [inline]
     sisusb_send_bulk_msg.constprop.0+0x904/0x1230 drivers/usb/misc/sisusbvga/sisusbvga.c:379
     sisusb_send_bridge_packet drivers/usb/misc/sisusbvga/sisusbvga.c:567 [inline]
     sisusb_do_init_gfxdevice drivers/usb/misc/sisusbvga/sisusbvga.c:2077 [inline]
     sisusb_init_gfxdevice+0x87b/0x4000 drivers/usb/misc/sisusbvga/sisusbvga.c:2177
     sisusb_probe+0x9cd/0xbe2 drivers/usb/misc/sisusbvga/sisusbvga.c:2869
    ...
    
    The problem was caused by the fact that the driver does not check
    whether the endpoints it uses are actually present and have the
    appropriate types.  This can be fixed by adding a simple check of
    the endpoints.
    
    Link: https://syzkaller.appspot.com/bug?extid=23be03b56c5259385d79
    Reported-and-tested-by: syzbot+23be03b56c5259385d79@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/48ef98f7-51ae-4f63-b8d3-0ef2004bb60a@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c260bbf356af7b5a0c236ffad4595e1923b6051
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 10 15:37:07 2023 -0400

    USB: core: Add routines for endpoint checks in old drivers
    
    commit 13890626501ffda22b18213ddaf7930473da5792 upstream.
    
    Many of the older USB drivers in the Linux USB stack were written
    based simply on a vendor's device specification.  They use the
    endpoint information in the spec and assume these endpoints will
    always be present, with the properties listed, in any device matching
    the given vendor and product IDs.
    
    While that may have been true back then, with spoofing and fuzzing it
    is not true any more.  More and more we are finding that those old
    drivers need to perform at least a minimum of checking before they try
    to use any endpoint other than ep0.
    
    To make this checking as simple as possible, we now add a couple of
    utility routines to the USB core.  usb_check_bulk_endpoints() and
    usb_check_int_endpoints() take an interface pointer together with a
    list of endpoint addresses (numbers and directions).  They check that
    the interface's current alternate setting includes endpoints with
    those addresses and that each of these endpoints has the right type:
    bulk or interrupt, respectively.
    
    Although we already have usb_find_common_endpoints() and related
    routines meant for a similar purpose, they are not well suited for
    this kind of checking.  Those routines find endpoints of various
    kinds, but only one (either the first or the last) of each kind, and
    they don't verify that the endpoints' addresses agree with what the
    caller expects.
    
    In theory the new routines could be more general: They could take a
    particular altsetting as their argument instead of always using the
    interface's current altsetting.  In practice I think this won't matter
    too much; multiple altsettings tend to be used for transferring media
    (audio or visual) over isochronous endpoints, not bulk or interrupt.
    Drivers for such devices will generally require more sophisticated
    checking than these simplistic routines provide.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/dd2c8e8c-2c87-44ea-ba17-c64b97e201c9@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5014b64e369bdf997935b132a1ac4d64b6e47ad4
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Tue May 23 09:33:05 2023 -0700

    udplite: Fix NULL pointer dereference in __sk_mem_raise_allocated().
    
    commit ad42a35bdfc6d3c0fc4cb4027d7b2757ce665665 upstream.
    
    syzbot reported [0] a null-ptr-deref in sk_get_rmem0() while using
    IPPROTO_UDPLITE (0x88):
    
      14:25:52 executing program 1:
      r0 = socket$inet6(0xa, 0x80002, 0x88)
    
    We had a similar report [1] for probably sk_memory_allocated_add()
    in __sk_mem_raise_allocated(), and commit c915fe13cbaa ("udplite: fix
    NULL pointer dereference") fixed it by setting .memory_allocated for
    udplite_prot and udplitev6_prot.
    
    To fix the variant, we need to set either .sysctl_wmem_offset or
    .sysctl_rmem.
    
    Now UDP and UDPLITE share the same value for .memory_allocated, so we
    use the same .sysctl_wmem_offset for UDP and UDPLITE.
    
    [0]:
    general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    CPU: 0 PID: 6829 Comm: syz-executor.1 Not tainted 6.4.0-rc2-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/28/2023
    RIP: 0010:sk_get_rmem0 include/net/sock.h:2907 [inline]
    RIP: 0010:__sk_mem_raise_allocated+0x806/0x17a0 net/core/sock.c:3006
    Code: c1 ea 03 80 3c 02 00 0f 85 23 0f 00 00 48 8b 44 24 08 48 8b 98 38 01 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 da 48 c1 ea 03 <0f> b6 14 02 48 89 d8 83 e0 07 83 c0 03 38 d0 0f 8d 6f 0a 00 00 8b
    RSP: 0018:ffffc90005d7f450 EFLAGS: 00010246
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffc90004d92000
    RDX: 0000000000000000 RSI: ffffffff88066482 RDI: ffffffff8e2ccbb8
    RBP: ffff8880173f7000 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000030000
    R13: 0000000000000001 R14: 0000000000000340 R15: 0000000000000001
    FS:  0000000000000000(0000) GS:ffff8880b9800000(0063) knlGS:00000000f7f1cb40
    CS:  0010 DS: 002b ES: 002b CR0: 0000000080050033
    CR2: 000000002e82f000 CR3: 0000000034ff0000 CR4: 00000000003506f0
    Call Trace:
     <TASK>
     __sk_mem_schedule+0x6c/0xe0 net/core/sock.c:3077
     udp_rmem_schedule net/ipv4/udp.c:1539 [inline]
     __udp_enqueue_schedule_skb+0x776/0xb30 net/ipv4/udp.c:1581
     __udpv6_queue_rcv_skb net/ipv6/udp.c:666 [inline]
     udpv6_queue_rcv_one_skb+0xc39/0x16c0 net/ipv6/udp.c:775
     udpv6_queue_rcv_skb+0x194/0xa10 net/ipv6/udp.c:793
     __udp6_lib_mcast_deliver net/ipv6/udp.c:906 [inline]
     __udp6_lib_rcv+0x1bda/0x2bd0 net/ipv6/udp.c:1013
     ip6_protocol_deliver_rcu+0x2e7/0x1250 net/ipv6/ip6_input.c:437
     ip6_input_finish+0x150/0x2f0 net/ipv6/ip6_input.c:482
     NF_HOOK include/linux/netfilter.h:303 [inline]
     NF_HOOK include/linux/netfilter.h:297 [inline]
     ip6_input+0xa0/0xd0 net/ipv6/ip6_input.c:491
     ip6_mc_input+0x40b/0xf50 net/ipv6/ip6_input.c:585
     dst_input include/net/dst.h:468 [inline]
     ip6_rcv_finish net/ipv6/ip6_input.c:79 [inline]
     NF_HOOK include/linux/netfilter.h:303 [inline]
     NF_HOOK include/linux/netfilter.h:297 [inline]
     ipv6_rcv+0x250/0x380 net/ipv6/ip6_input.c:309
     __netif_receive_skb_one_core+0x114/0x180 net/core/dev.c:5491
     __netif_receive_skb+0x1f/0x1c0 net/core/dev.c:5605
     netif_receive_skb_internal net/core/dev.c:5691 [inline]
     netif_receive_skb+0x133/0x7a0 net/core/dev.c:5750
     tun_rx_batched+0x4b3/0x7a0 drivers/net/tun.c:1553
     tun_get_user+0x2452/0x39c0 drivers/net/tun.c:1989
     tun_chr_write_iter+0xdf/0x200 drivers/net/tun.c:2035
     call_write_iter include/linux/fs.h:1868 [inline]
     new_sync_write fs/read_write.c:491 [inline]
     vfs_write+0x945/0xd50 fs/read_write.c:584
     ksys_write+0x12b/0x250 fs/read_write.c:637
     do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]
     __do_fast_syscall_32+0x65/0xf0 arch/x86/entry/common.c:178
     do_fast_syscall_32+0x33/0x70 arch/x86/entry/common.c:203
     entry_SYSENTER_compat_after_hwframe+0x70/0x82
    RIP: 0023:0xf7f21579
    Code: b8 01 10 06 03 74 b4 01 10 07 03 74 b0 01 10 08 03 74 d8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 8d b4 26 00 00 00 00 8d b4 26 00 00 00 00
    RSP: 002b:00000000f7f1c590 EFLAGS: 00000282 ORIG_RAX: 0000000000000004
    RAX: ffffffffffffffda RBX: 00000000000000c8 RCX: 0000000020000040
    RDX: 0000000000000083 RSI: 00000000f734e000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000296 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
     </TASK>
    Modules linked in:
    
    Link: https://lore.kernel.org/netdev/CANaxB-yCk8hhP68L4Q2nFOJht8sqgXGGQO2AftpHs0u1xyGG5A@mail.gmail.com/ [1]
    Fixes: 850cbaddb52d ("udp: use it's own memory accounting schema")
    Reported-by: syzbot+444ca0907e96f7c5e48b@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=444ca0907e96f7c5e48b
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230523163305.66466-1-kuniyu@amazon.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bb955c4d2830a58c08e2a48ab75d75368e3ff36
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed May 17 14:30:10 2023 +0000

    net: fix stack overflow when LRO is disabled for virtual interfaces
    
    commit ae9b15fbe63447bc1d3bba3769f409d17ca6fdf6 upstream.
    
    When the virtual interface's feature is updated, it synchronizes the
    updated feature for its own lower interface.
    This propagation logic should be worked as the iteration, not recursively.
    But it works recursively due to the netdev notification unexpectedly.
    This problem occurs when it disables LRO only for the team and bonding
    interface type.
    
           team0
             |
      +------+------+-----+-----+
      |      |      |     |     |
    team1  team2  team3  ...  team200
    
    If team0's LRO feature is updated, it generates the NETDEV_FEAT_CHANGE
    event to its own lower interfaces(team1 ~ team200).
    It is worked by netdev_sync_lower_features().
    So, the NETDEV_FEAT_CHANGE notification logic of each lower interface
    work iteratively.
    But generated NETDEV_FEAT_CHANGE event is also sent to the upper
    interface too.
    upper interface(team0) generates the NETDEV_FEAT_CHANGE event for its own
    lower interfaces again.
    lower and upper interfaces receive this event and generate this
    event again and again.
    So, the stack overflow occurs.
    
    But it is not the infinite loop issue.
    Because the netdev_sync_lower_features() updates features before
    generating the NETDEV_FEAT_CHANGE event.
    Already synchronized lower interfaces skip notification logic.
    So, it is just the problem that iteration logic is changed to the
    recursive unexpectedly due to the notification mechanism.
    
    Reproducer:
    
    ip link add team0 type team
    ethtool -K team0 lro on
    for i in {1..200}
    do
            ip link add team$i master team0 type team
            ethtool -K team$i lro on
    done
    
    ethtool -K team0 lro off
    
    In order to fix it, the notifier_ctx member of bonding/team is introduced.
    
    Reported-by: syzbot+60748c96cf5c6df8e581@syzkaller.appspotmail.com
    Fixes: fd867d51f889 ("net/core: generic support for disabling netdev features down stack")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230517143010.3596250-1-ap420073@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58ecc165abdaed85447455e6dc396758e8c6f219
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri May 19 15:32:30 2023 -0400

    fbdev: udlfb: Fix endpoint check
    
    commit ed9de4ed39875706607fb08118a58344ae6c5f42 upstream.
    
    The syzbot fuzzer detected a problem in the udlfb driver, caused by an
    endpoint not having the expected type:
    
    usb 1-1: Read EDID byte 0 failed: -71
    usb 1-1: Unable to get valid EDID from device/display
    ------------[ cut here ]------------
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 0 PID: 9 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed6/0x1880
    drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 0 PID: 9 Comm: kworker/0:1 Not tainted
    6.4.0-rc1-syzkaller-00016-ga4422ff22142 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google
    04/28/2023
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    ...
    Call Trace:
     <TASK>
     dlfb_submit_urb+0x92/0x180 drivers/video/fbdev/udlfb.c:1980
     dlfb_set_video_mode+0x21f0/0x2950 drivers/video/fbdev/udlfb.c:315
     dlfb_ops_set_par+0x2a7/0x8d0 drivers/video/fbdev/udlfb.c:1111
     dlfb_usb_probe+0x149a/0x2710 drivers/video/fbdev/udlfb.c:1743
    
    The current approach for this issue failed to catch the problem
    because it only checks for the existence of a bulk-OUT endpoint; it
    doesn't check whether this endpoint is the one that the driver will
    actually use.
    
    We can fix the problem by instead checking that the endpoint used by
    the driver does exist and is bulk-OUT.
    
    Reported-and-tested-by: syzbot+0e22d63dcebb802b9bc8@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Pavel Skripkin <paskripkin@gmail.com>
    Fixes: aaf7dbe07385 ("video: fbdev: udlfb: properly check endpoint type")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd673079749bac97bb30f1461df079e6c8e86511
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu May 11 22:47:32 2023 +0900

    debugobjects: Don't wake up kswapd from fill_pool()
    
    commit eb799279fb1f9c63c520fe8c1c41cb9154252db6 upstream.
    
    syzbot is reporting a lockdep warning in fill_pool() because the allocation
    from debugobjects is using GFP_ATOMIC, which is (__GFP_HIGH | __GFP_KSWAPD_RECLAIM)
    and therefore tries to wake up kswapd, which acquires kswapd_wait::lock.
    
    Since fill_pool() might be called with arbitrary locks held, fill_pool()
    should not assume that acquiring kswapd_wait::lock is safe.
    
    Use __GFP_HIGH instead and remove __GFP_NORETRY as it is pointless for
    !__GFP_DIRECT_RECLAIM allocation.
    
    Fixes: 3ac7fe5a4aab ("infrastructure to debug (dynamic) objects")
    Reported-by: syzbot <syzbot+fe0c72f0ccbb93786380@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/6577e1fa-b6ee-f2be-2414-a2b51b1c5e30@I-love.SAKURA.ne.jp
    Closes: https://syzkaller.appspot.com/bug?extid=fe0c72f0ccbb93786380
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a12ce786bef647ccd6580fdb1277a36ecb92124d
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Thu Mar 23 09:56:40 2023 +0800

    x86/topology: Fix erroneous smp_num_siblings on Intel Hybrid platforms
    
    commit edc0a2b5957652f4685ef3516f519f84807087db upstream.
    
    Traditionally, all CPUs in a system have identical numbers of SMT
    siblings.  That changes with hybrid processors where some logical CPUs
    have a sibling and others have none.
    
    Today, the CPU boot code sets the global variable smp_num_siblings when
    every CPU thread is brought up. The last thread to boot will overwrite
    it with the number of siblings of *that* thread. That last thread to
    boot will "win". If the thread is a Pcore, smp_num_siblings == 2.  If it
    is an Ecore, smp_num_siblings == 1.
    
    smp_num_siblings describes if the *system* supports SMT.  It should
    specify the maximum number of SMT threads among all cores.
    
    Ensure that smp_num_siblings represents the system-wide maximum number
    of siblings by always increasing its value. Never allow it to decrease.
    
    On MeteorLake-P platform, this fixes a problem that the Ecore CPUs are
    not updated in any cpu sibling map because the system is treated as an
    UP system when probing Ecore CPUs.
    
    Below shows part of the CPU topology information before and after the
    fix, for both Pcore and Ecore CPU (cpu0 is Pcore, cpu 12 is Ecore).
    ...
    -/sys/devices/system/cpu/cpu0/topology/package_cpus:000fff
    -/sys/devices/system/cpu/cpu0/topology/package_cpus_list:0-11
    +/sys/devices/system/cpu/cpu0/topology/package_cpus:3fffff
    +/sys/devices/system/cpu/cpu0/topology/package_cpus_list:0-21
    ...
    -/sys/devices/system/cpu/cpu12/topology/package_cpus:001000
    -/sys/devices/system/cpu/cpu12/topology/package_cpus_list:12
    +/sys/devices/system/cpu/cpu12/topology/package_cpus:3fffff
    +/sys/devices/system/cpu/cpu12/topology/package_cpus_list:0-21
    
    Notice that the "before" 'package_cpus_list' has only one CPU.  This
    means that userspace tools like lscpu will see a little laptop like
    an 11-socket system:
    
    -Core(s) per socket:  1
    -Socket(s):           11
    +Core(s) per socket:  16
    +Socket(s):           1
    
    This is also expected to make the scheduler do rather wonky things
    too.
    
    [ dhansen: remove CPUID detail from changelog, add end user effects ]
    
    CC: stable@kernel.org
    Fixes: bbb65d2d365e ("x86: use cpuid vector 0xb when available for detecting cpu topology")
    Fixes: 95f3d39ccf7a ("x86/cpu/topology: Provide detect_extended_topology_early()")
    Suggested-by: Len Brown <len.brown@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/all/20230323015640.27906-1-rui.zhang%40intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 518c39fc1ed6d34aa4a6d4a6f48101f88aeda60c
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 24 17:07:07 2023 +0200

    parisc: Fix flush_dcache_page() for usage from irq context
    
    commit 61e150fb310729c98227a5edf6e4a3619edc3702 upstream.
    
    Since at least kernel 6.1, flush_dcache_page() is called with IRQs
    disabled, e.g. from aio_complete().
    
    But the current implementation for flush_dcache_page() on parisc
    unintentionally re-enables IRQs, which may lead to deadlocks.
    
    Fix it by using xa_lock_irqsave() and xa_unlock_irqrestore()
    for the flush_dcache_mmap_*lock() macros instead.
    
    Cc: linux-parisc@vger.kernel.org
    Cc: stable@kernel.org # 5.18+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d78438c31837471a14cffb63a44a6a99f05247e
Author: Hardik Garg <hargar@linux.microsoft.com>
Date:   Fri May 26 16:21:36 2023 -0700

    selftests/memfd: Fix unknown type name build failure
    
    Partially backport v6.3 commit 11f75a01448f ("selftests/memfd: add tests
    for MFD_NOEXEC_SEAL MFD_EXEC") to fix an unknown type name build error.
    In some systems, the __u64 typedef is not present due to differences in
    system headers, causing compilation errors like this one:
    
    fuse_test.c:64:8: error: unknown type name '__u64'
       64 | static __u64 mfd_assert_get_seals(int fd)
    
    This header includes the  __u64 typedef which increases the likelihood
    of successful compilation on a wider variety of systems.
    
    Signed-off-by: Hardik Garg <hargar@linux.microsoft.com>
    Reviewed-by: Tyler Hicks (Microsoft) <code@tyhicks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4a5e6ae996792cdcd20a373a1ceca72253e9bf9
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Tue May 16 12:24:25 2023 -0700

    x86/mm: Avoid incomplete Global INVLPG flushes
    
    commit ce0b15d11ad837fbacc5356941712218e38a0a83 upstream.
    
    The INVLPG instruction is used to invalidate TLB entries for a
    specified virtual address.  When PCIDs are enabled, INVLPG is supposed
    to invalidate TLB entries for the specified address for both the
    current PCID *and* Global entries.  (Note: Only kernel mappings set
    Global=1.)
    
    Unfortunately, some INVLPG implementations can leave Global
    translations unflushed when PCIDs are enabled.
    
    As a workaround, never enable PCIDs on affected processors.
    
    I expect there to eventually be microcode mitigations to replace this
    software workaround.  However, the exact version numbers where that
    will happen are not known today.  Once the version numbers are set in
    stone, the processor list can be tweaked to only disable PCIDs on
    affected processors with affected microcode.
    
    Note: if anyone wants a quick fix that doesn't require patching, just
    stick 'nopcid' on your kernel command-line.
    
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 628d7e4941345611696fff79ebc31444658e3275
Author: Frank Li <Frank.Li@nxp.com>
Date:   Mon May 15 12:20:52 2023 -0400

    dt-binding: cdns,usb3: Fix cdns,on-chip-buff-size type
    
    commit 50a1726b148ff30778cb8a6cf3736130b07c93fd upstream.
    
    In cdns3-gadget.c, 'cdns,on-chip-buff-size' was read using
    device_property_read_u16(). It resulted in 0 if a 32bit value was used
    in dts. This commit fixes the dt binding doc to declare it as u16.
    
    Cc: stable@vger.kernel.org
    Fixes: 68989fe1c39d ("dt-bindings: usb: Convert cdns-usb3.txt to YAML schema")
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 139f84c80d9f47a3d8d24b29a56a7ee06e80778e
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu May 11 12:45:59 2023 -0400

    btrfs: use nofs when cleaning up aborted transactions
    
    commit 597441b3436a43011f31ce71dc0a6c0bf5ce958a upstream.
    
    Our CI system caught a lockdep splat:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      6.3.0-rc7+ #1167 Not tainted
      ------------------------------------------------------
      kswapd0/46 is trying to acquire lock:
      ffff8c6543abd650 (sb_internal#2){++++}-{0:0}, at: btrfs_commit_inode_delayed_inode+0x5f/0x120
    
      but task is already holding lock:
      ffffffffabe61b40 (fs_reclaim){+.+.}-{0:0}, at: balance_pgdat+0x4aa/0x7a0
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #1 (fs_reclaim){+.+.}-{0:0}:
             fs_reclaim_acquire+0xa5/0xe0
             kmem_cache_alloc+0x31/0x2c0
             alloc_extent_state+0x1d/0xd0
             __clear_extent_bit+0x2e0/0x4f0
             try_release_extent_mapping+0x216/0x280
             btrfs_release_folio+0x2e/0x90
             invalidate_inode_pages2_range+0x397/0x470
             btrfs_cleanup_dirty_bgs+0x9e/0x210
             btrfs_cleanup_one_transaction+0x22/0x760
             btrfs_commit_transaction+0x3b7/0x13a0
             create_subvol+0x59b/0x970
             btrfs_mksubvol+0x435/0x4f0
             __btrfs_ioctl_snap_create+0x11e/0x1b0
             btrfs_ioctl_snap_create_v2+0xbf/0x140
             btrfs_ioctl+0xa45/0x28f0
             __x64_sys_ioctl+0x88/0xc0
             do_syscall_64+0x38/0x90
             entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
      -> #0 (sb_internal#2){++++}-{0:0}:
             __lock_acquire+0x1435/0x21a0
             lock_acquire+0xc2/0x2b0
             start_transaction+0x401/0x730
             btrfs_commit_inode_delayed_inode+0x5f/0x120
             btrfs_evict_inode+0x292/0x3d0
             evict+0xcc/0x1d0
             inode_lru_isolate+0x14d/0x1e0
             __list_lru_walk_one+0xbe/0x1c0
             list_lru_walk_one+0x58/0x80
             prune_icache_sb+0x39/0x60
             super_cache_scan+0x161/0x1f0
             do_shrink_slab+0x163/0x340
             shrink_slab+0x1d3/0x290
             shrink_node+0x300/0x720
             balance_pgdat+0x35c/0x7a0
             kswapd+0x205/0x410
             kthread+0xf0/0x120
             ret_from_fork+0x29/0x50
    
      other info that might help us debug this:
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(fs_reclaim);
                                     lock(sb_internal#2);
                                     lock(fs_reclaim);
        lock(sb_internal#2);
    
       *** DEADLOCK ***
    
      3 locks held by kswapd0/46:
       #0: ffffffffabe61b40 (fs_reclaim){+.+.}-{0:0}, at: balance_pgdat+0x4aa/0x7a0
       #1: ffffffffabe50270 (shrinker_rwsem){++++}-{3:3}, at: shrink_slab+0x113/0x290
       #2: ffff8c6543abd0e0 (&type->s_umount_key#44){++++}-{3:3}, at: super_cache_scan+0x38/0x1f0
    
      stack backtrace:
      CPU: 0 PID: 46 Comm: kswapd0 Not tainted 6.3.0-rc7+ #1167
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x58/0x90
       check_noncircular+0xd6/0x100
       ? save_trace+0x3f/0x310
       ? add_lock_to_list+0x97/0x120
       __lock_acquire+0x1435/0x21a0
       lock_acquire+0xc2/0x2b0
       ? btrfs_commit_inode_delayed_inode+0x5f/0x120
       start_transaction+0x401/0x730
       ? btrfs_commit_inode_delayed_inode+0x5f/0x120
       btrfs_commit_inode_delayed_inode+0x5f/0x120
       btrfs_evict_inode+0x292/0x3d0
       ? lock_release+0x134/0x270
       ? __pfx_wake_bit_function+0x10/0x10
       evict+0xcc/0x1d0
       inode_lru_isolate+0x14d/0x1e0
       __list_lru_walk_one+0xbe/0x1c0
       ? __pfx_inode_lru_isolate+0x10/0x10
       ? __pfx_inode_lru_isolate+0x10/0x10
       list_lru_walk_one+0x58/0x80
       prune_icache_sb+0x39/0x60
       super_cache_scan+0x161/0x1f0
       do_shrink_slab+0x163/0x340
       shrink_slab+0x1d3/0x290
       shrink_node+0x300/0x720
       balance_pgdat+0x35c/0x7a0
       kswapd+0x205/0x410
       ? __pfx_autoremove_wake_function+0x10/0x10
       ? __pfx_kswapd+0x10/0x10
       kthread+0xf0/0x120
       ? __pfx_kthread+0x10/0x10
       ret_from_fork+0x29/0x50
       </TASK>
    
    This happens because when we abort the transaction in the transaction
    commit path we call invalidate_inode_pages2_range on our block group
    cache inodes (if we have space cache v1) and any delalloc inodes we may
    have.  The plain invalidate_inode_pages2_range() call passes through
    GFP_KERNEL, which makes sense in most cases, but not here.  Wrap these
    two invalidate callees with memalloc_nofs_save/memalloc_nofs_restore to
    make sure we don't end up with the fs reclaim dependency under the
    transaction dependency.
    
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea50ee0ef9040e87e21165374aa553f410011536
Author: Zev Weiss <zev@bewilderbeest.net>
Date:   Tue May 16 22:47:56 2023 -0700

    gpio: mockup: Fix mode of debugfs files
    
    commit 0a1bb16e0fe6650c3841e611de374bfd5578ad70 upstream.
    
    This driver's debugfs files have had a read operation since commit
    2a9e27408e12 ("gpio: mockup: rework debugfs interface"), but were
    still being created with write-only mode bits.  Update them to
    indicate that the files can also be read.
    
    Signed-off-by: Zev Weiss <zev@bewilderbeest.net>
    Fixes: 2a9e27408e12 ("gpio: mockup: rework debugfs interface")
    Cc: stable@kernel.org # v5.1+
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c570dbf279a8d97bf8b60efcb860e664aa0ed072
Author: Helge Deller <deller@gmx.de>
Date:   Mon May 22 22:57:30 2023 +0200

    parisc: Allow to reboot machine after system halt
    
    commit 2028315cf59bb899a5ac7e87dc48ecb8fac7ac24 upstream.
    
    In case a machine can't power-off itself on system shutdown,
    allow the user to reboot it by pressing the RETURN key.
    
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de0d7dd5efd44515a785d6bdffa4cc04516da6c8
Author: Helge Deller <deller@gmx.de>
Date:   Wed May 24 14:34:58 2023 +0200

    parisc: Handle kgdb breakpoints only in kernel context
    
    commit 6888ff04e37d01295620a73f3f7efbc79f6ef152 upstream.
    
    The kernel kgdb break instructions should only be handled when running
    in kernel context.
    
    Cc: <stable@vger.kernel.org> # v5.4+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89eba5586aa4d308a11b5246f5286abb73c7796d
Author: Finn Thain <fthain@linux-m68k.org>
Date:   Sat May 6 19:38:12 2023 +1000

    m68k: Move signal frame following exception on 68020/030
    
    commit b845b574f86dcb6a70dfa698aa87a237b0878d2a upstream.
    
    On 68030/020, an instruction such as, moveml %a2-%a3/%a5,%sp@- may cause
    a stack page fault during instruction execution (i.e. not at an
    instruction boundary) and produce a format 0xB exception frame.
    
    In this situation, the value of USP will be unreliable.  If a signal is
    to be delivered following the exception, this USP value is used to
    calculate the location for a signal frame.  This can result in a
    corrupted user stack.
    
    The corruption was detected in dash (actually in glibc) where it showed
    up as an intermittent "stack smashing detected" message and crash
    following signal delivery for SIGCHLD.
    
    It was hard to reproduce that failure because delivery of the signal
    raced with the page fault and because the kernel places an unpredictable
    gap of up to 7 bytes between the USP and the signal frame.
    
    A format 0xB exception frame can be produced by a bus error or an
    address error.  The 68030 Users Manual says that address errors occur
    immediately upon detection during instruction prefetch.  The instruction
    pipeline allows prefetch to overlap with other instructions, which means
    an address error can arise during the execution of a different
    instruction.  So it seems likely that this patch may help in the address
    error case also.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Link: https://lore.kernel.org/all/CAMuHMdW3yD22_ApemzW_6me3adq6A458u1_F0v-1EYwK_62jPA@mail.gmail.com/
    Cc: Michael Schmitz <schmitzmic@gmail.com>
    Cc: Andreas Schwab <schwab@linux-m68k.org>
    Cc: stable@vger.kernel.org
    Co-developed-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Finn Thain <fthain@linux-m68k.org>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/9e66262a754fcba50208aa424188896cc52a1dd1.1683365892.git.fthain@linux-m68k.org
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42b78c8cc774b47023d6d16d96d54cc7015e4a07
Author: Tudor Ambarus <tudor.ambarus@linaro.org>
Date:   Wed May 17 13:38:08 2023 +0000

    net: cdc_ncm: Deal with too low values of dwNtbOutMaxSize
    
    commit 7e01c7f7046efc2c7c192c3619db43292b98e997 upstream.
    
    Currently in cdc_ncm_check_tx_max(), if dwNtbOutMaxSize is lower than
    the calculated "min" value, but greater than zero, the logic sets
    tx_max to dwNtbOutMaxSize. This is then used to allocate a new SKB in
    cdc_ncm_fill_tx_frame() where all the data is handled.
    
    For small values of dwNtbOutMaxSize the memory allocated during
    alloc_skb(dwNtbOutMaxSize, GFP_ATOMIC) will have the same size, due to
    how size is aligned at alloc time:
            size = SKB_DATA_ALIGN(size);
            size += SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
    Thus we hit the same bug that we tried to squash with
    commit 2be6d4d16a084 ("net: cdc_ncm: Allow for dwNtbOutMaxSize to be unset or zero")
    
    Low values of dwNtbOutMaxSize do not cause an issue presently because at
    alloc_skb() time more memory (512b) is allocated than required for the
    SKB headers alone (320b), leaving some space (512b - 320b = 192b)
    for CDC data (172b).
    
    However, if more elements (for example 3 x u64 = [24b]) were added to
    one of the SKB header structs, say 'struct skb_shared_info',
    increasing its original size (320b [320b aligned]) to something larger
    (344b [384b aligned]), then suddenly the CDC data (172b) no longer
    fits in the spare SKB data area (512b - 384b = 128b).
    
    Consequently the SKB bounds checking semantics fails and panics:
    
    skbuff: skb_over_panic: text:ffffffff831f755b len:184 put:172 head:ffff88811f1c6c00 data:ffff88811f1c6c00 tail:0xb8 end:0x80 dev:<NULL>
    ------------[ cut here ]------------
    kernel BUG at net/core/skbuff.c:113!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 57 Comm: kworker/0:2 Not tainted 5.15.106-syzkaller-00249-g19c0ed55a470 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/14/2023
    Workqueue: mld mld_ifc_work
    RIP: 0010:skb_panic net/core/skbuff.c:113 [inline]
    RIP: 0010:skb_over_panic+0x14c/0x150 net/core/skbuff.c:118
    [snip]
    Call Trace:
     <TASK>
     skb_put+0x151/0x210 net/core/skbuff.c:2047
     skb_put_zero include/linux/skbuff.h:2422 [inline]
     cdc_ncm_ndp16 drivers/net/usb/cdc_ncm.c:1131 [inline]
     cdc_ncm_fill_tx_frame+0x11ab/0x3da0 drivers/net/usb/cdc_ncm.c:1308
     cdc_ncm_tx_fixup+0xa3/0x100
    
    Deal with too low values of dwNtbOutMaxSize, clamp it in the range
    [USB_CDC_NCM_NTB_MIN_OUT_SIZE, CDC_NCM_NTB_MAX_SIZE_TX]. We ensure
    enough data space is allocated to handle CDC data by making sure
    dwNtbOutMaxSize is not smaller than USB_CDC_NCM_NTB_MIN_OUT_SIZE.
    
    Fixes: 289507d3364f ("net: cdc_ncm: use sysfs for rx/tx aggregation tuning")
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+9f575a1f15fc0c01ed69@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=b982f1059506db48409d
    Link: https://lore.kernel.org/all/20211202143437.1411410-1-lee.jones@linaro.org/
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230517133808.1873695-2-tudor.ambarus@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 798c1c62cfa5b61868882e2568f0b9308c9d8077
Author: Bin Li <bin.li@canonical.com>
Date:   Wed May 24 19:37:55 2023 +0800

    ALSA: hda/realtek: Enable headset onLenovo M70/M90
    
    commit 4ca110cab46561cd74a2acd9b447435acb4bec5f upstream.
    
    Lenovo M70/M90 Gen4 are equipped with ALC897, and they need
    ALC897_FIXUP_HEADSET_MIC_PIN quirk to make its headset mic work.
    The previous quirk for M70/M90 is for Gen3.
    
    Signed-off-by: Bin Li <bin.li@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230524113755.1346928-1-bin.li@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f57a1b979493b155cea5fa9007f7ce2fc6808f7
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 18 13:35:20 2023 +0200

    ALSA: hda: Fix unhandled register update during auto-suspend period
    
    commit 81302b1c7c997e8a56c1c2fc63a296ebeb0cd2d0 upstream.
    
    It's reported that the recording started right after the driver probe
    doesn't work properly, and it turned out that this is related with the
    codec auto-suspend.  Namely, after the probe phase, the usage count
    goes zero, and the auto-suspend is programmed, but the codec is kept
    still active until the auto-suspend expiration.  When an application
    (e.g. alsactl) updates the mixer values at this moment, the values are
    cached but not actually written.  Then, starting arecord thereafter
    also results in the silence because of the missing unmute.
    
    The root cause is the handling of "lazy update" mode; when a mixer
    value is updated *after* the suspend, it should update only the cache
    and exits.  At the resume, the cached value is written to the device,
    in turn.  The problem is that the current code misinterprets the state
    of auto-suspend as if it were already suspended.
    
    Although we can add the check of the actual device state after
    pm_runtime_get_if_in_use() for catching the missing state, this won't
    suffice; the second call of regmap_update_bits_check() will skip
    writing the register because the cache has been already updated by the
    first call.  So we'd need fixes in two different places.
    
    OTOH, a simpler fix is to replace pm_runtime_get_if_in_use() with
    pm_runtime_get_if_active() (with ign_usage_count=true).  This change
    implies that the driver takes the pm refcount if the device is still
    in ACTIVE state and continues the processing.  A small caveat is that
    this will leave the auto-suspend timer.  But, since the timer callback
    itself checks the device state and aborts gracefully when it's active,
    this won't be any substantial problem.
    
    Long story short: we address the missing register-write problem just
    by replacing the pm_runtime_*() call in snd_hda_keep_power_up().
    
    Fixes: fc4f000bf8c0 ("ALSA: hda - Fix unexpected resume through regmap code path")
    Reported-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Closes: https://lore.kernel.org/r/a7478636-af11-92ab-731c-9b13c582a70d@linux.intel.com
    Suggested-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230518113520.15213-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0d7e62fd15e46860f9c9157d8e1c95f6ea54973
Author: Adam Stylinski <kungfujesus06@gmail.com>
Date:   Sun May 21 10:52:23 2023 -0400

    ALSA: hda/ca0132: add quirk for EVGA X299 DARK
    
    commit 7843380d07bbeffd3ce6504e73cf61f840ae76ca upstream.
    
    This quirk is necessary for surround and other DSP effects to work
    with the onboard ca0132 based audio chipset for the EVGA X299 dark
    mainboard.
    
    Signed-off-by: Adam Stylinski <kungfujesus06@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=67071
    Link: https://lore.kernel.org/r/ZGopOe19T1QOwizS@eggsbenedict.adamsnet
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c41324385aa7c9ac0fc1fa9c2521aacedea24788
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Tue Mar 14 09:17:16 2023 +0100

    ocfs2: Switch to security_inode_init_security()
    
    commit de3004c874e740304cc4f4a83d6200acb511bbda upstream.
    
    In preparation for removing security_old_inode_init_security(), switch to
    security_inode_init_security().
    
    Extend the existing ocfs2_initxattrs() to take the
    ocfs2_security_xattr_info structure from fs_info, and populate the
    name/value/len triple with the first xattr provided by LSMs.
    
    As fs_info was not used before, ocfs2_initxattrs() can now handle the case
    of replicating the behavior of security_old_inode_init_security(), i.e.
    just obtaining the xattr, in addition to setting all xattrs provided by
    LSMs.
    
    Supporting multiple xattrs is not currently supported where
    security_old_inode_init_security() was called (mknod, symlink), as it
    requires non-trivial changes that can be done at a later time. Like for
    reiserfs, even if EVM is invoked, it will not provide an xattr (if it is
    not the first to set it, its xattr will be discarded; if it is the first,
    it does not have xattrs to calculate the HMAC on).
    
    Finally, since security_inode_init_security(), unlike
    security_old_inode_init_security(), returns zero instead of -EOPNOTSUPP if
    no xattrs were provided by LSMs or if inodes are private, additionally
    check in ocfs2_init_security_get() if the xattr name is set.
    
    If not, act as if security_old_inode_init_security() returned -EOPNOTSUPP,
    and set si->enable to zero to notify to the functions following
    ocfs2_init_security_get() that no xattrs are available.
    
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: Casey Schaufler <casey@schaufler-ca.com>
    Acked-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60afe299bb541a928ba39bcb4ae8d3e428d1c5a5
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon May 15 16:07:17 2023 +0200

    spi: fsl-cpm: Use 16 bit mode for large transfers with even size
    
    (cherry picked from upstream fc96ec826bced75cc6b9c07a4ac44bbf651337ab)
    
    On CPM, the RISC core is a lot more efficiant when doing transfers
    in 16-bits chunks than in 8-bits chunks, but unfortunately the
    words need to be byte swapped as seen in a previous commit.
    
    So, for large tranfers with an even size, allocate a temporary tx
    buffer and byte-swap data before and after transfer.
    
    This change allows setting higher speed for transfer. For instance
    on an MPC 8xx (CPM1 comms RISC processor), the documentation tells
    that transfer in byte mode at 1 kbit/s uses 0.200% of CPM load
    at 25 MHz while a word transfer at the same speed uses 0.032%
    of CPM load. This means the speed can be 6 times higher in
    word mode for the same CPM load.
    
    For the time being, only do it on CPM1 as there must be a
    trade-off between the CPM load reduction and the CPU load required
    to byte swap the data.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Link: https://lore.kernel.org/r/f2e981f20f92dd28983c3949702a09248c23845c.1680371809.git.christophe.leroy@csgroup.eu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3674788a86578a403839224ce90355c28ce4562
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon May 15 16:07:16 2023 +0200

    spi: fsl-spi: Re-organise transfer bits_per_word adaptation
    
    (backported from upstream 8a5299a1278eadf1e08a598a5345c376206f171e)
    
    For different reasons, fsl-spi driver performs bits_per_word
    modifications for different reasons:
    - On CPU mode, to minimise amount of interrupts
    - On CPM/QE mode to work around controller byte order
    
    For CPU mode that's done in fsl_spi_prepare_message() while
    for CPM mode that's done in fsl_spi_setup_transfer().
    
    Reunify all of it in fsl_spi_prepare_message(), and catch
    impossible cases early through master's bits_per_word_mask
    instead of returning EINVAL later.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Link: https://lore.kernel.org/r/0ce96fe96e8b07cba0613e4097cfd94d09b8919a.1680371809.git.christophe.leroy@csgroup.eu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53245103786312f21fb9785327a4367cf10f0dbb
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Tue May 16 22:00:40 2023 +0300

    act_mirred: use the backlog for nested calls to mirred ingress
    
    [ Upstream commit ca22da2fbd693b54dc8e3b7b54ccc9f7e9ba3640 ]
    
    William reports kernel soft-lockups on some OVS topologies when TC mirred
    egress->ingress action is hit by local TCP traffic [1].
    The same can also be reproduced with SCTP (thanks Xin for verifying), when
    client and server reach themselves through mirred egress to ingress, and
    one of the two peers sends a "heartbeat" packet (from within a timer).
    
    Enqueueing to backlog proved to fix this soft lockup; however, as Cong
    noticed [2], we should preserve - when possible - the current mirred
    behavior that counts as "overlimits" any eventual packet drop subsequent to
    the mirred forwarding action [3]. A compromise solution might use the
    backlog only when tcf_mirred_act() has a nest level greater than one:
    change tcf_mirred_forward() accordingly.
    
    Also, add a kselftest that can reproduce the lockup and verifies TC mirred
    ability to account for further packet drops after TC mirred egress->ingress
    (when the nest level is 1).
    
     [1] https://lore.kernel.org/netdev/33dc43f587ec1388ba456b4915c75f02a8aae226.1663945716.git.dcaratti@redhat.com/
     [2] https://lore.kernel.org/netdev/Y0w%2FWWY60gqrtGLp@pop-os.localdomain/
     [3] such behavior is not guaranteed: for example, if RPS or skb RX
         timestamping is enabled on the mirred target device, the kernel
         can defer receiving the skb and return NET_RX_SUCCESS inside
         tcf_mirred_forward().
    
    Reported-by: William Zhao <wizhao@redhat.com>
    CC: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    [DP: adjusted context for linux-5.10.y]
    Signed-off-by: Dragos-Marian Panait <dragos.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5bf8e3ca13edeee812c2cda6ba52d6cbf85d2b5
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Tue May 16 22:00:39 2023 +0300

    net/sched: act_mirred: better wording on protection against excessive stack growth
    
    [ Upstream commit 78dcdffe0418ac8f3f057f26fe71ccf4d8ed851f ]
    
    with commit e2ca070f89ec ("net: sched: protect against stack overflow in
    TC act_mirred"), act_mirred protected itself against excessive stack growth
    using per_cpu counter of nested calls to tcf_mirred_act(), and capping it
    to MIRRED_RECURSION_LIMIT. However, such protection does not detect
    recursion/loops in case the packet is enqueued to the backlog (for example,
    when the mirred target device has RPS or skb timestamping enabled). Change
    the wording from "recursion" to "nesting" to make it more clear to readers.
    
    CC: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: ca22da2fbd69 ("act_mirred: use the backlog for nested calls to mirred ingress")
    Signed-off-by: Dragos-Marian Panait <dragos.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bba7ebe10baf1d6d59c9a11c3cdc8bd2bc1b1028
Author: wenxu <wenxu@ucloud.cn>
Date:   Tue May 16 22:00:38 2023 +0300

    net/sched: act_mirred: refactor the handle of xmit
    
    [ Upstream commit fa6d639930ee5cd3f932cc314f3407f07a06582d ]
    
    This one is prepare for the next patch.
    
    Signed-off-by: wenxu <wenxu@ucloud.cn>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    [DP: adjusted context for linux-5.10.y]
    Signed-off-by: Dragos-Marian Panait <dragos.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 047f618d198e4bc7c9ad3844064a15dc90a82094
Author: Greg Thelen <gthelen@google.com>
Date:   Sat May 20 12:46:24 2023 -0700

    writeback, cgroup: remove extra percpu_ref_exit()
    
    5.10 stable commit 2b00b2a0e642 ("writeback, cgroup: fix null-ptr-deref
    write in bdi_split_work_to_wbs") is a backport of upstream 6.3 commit
    1ba1199ec574.
    
    In the 5.10 stable commit backport percpu_ref_exit() is called twice:
    first in cgwb_release_workfn() and then in cgwb_free_rcu(). The 2nd call
    is benign as percpu_ref_exit() internally detects there's nothing to do.
    
    This fixes an non-upstream issue that only applies to 5.10.y.
    
    Fixes: 2b00b2a0e642 ("writeback, cgroup: fix null-ptr-deref write in bdi_split_work_to_wbs")
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84fbe6ad0fa3c42925fbf6849d3f2129b4362c5e
Author: Olivier Moysan <olivier.moysan@foss.st.com>
Date:   Mon Jan 24 16:35:25 2022 +0100

    ARM: dts: stm32: fix AV96 board SAI2 pin muxing on stm32mp15
    
    commit ee2aacb6f3a901a95b1dd68964b69c92cdbbf213 upstream.
    
    Replace sai2a-2 node name by sai2a-sleep-2, to avoid name
    duplication.
    
    Fixes: 1a9a9d226f0f ("ARM: dts: stm32: fix AV96 board SAI2 pin muxing on stm32mp15")
    
    Signed-off-by: Olivier Moysan <olivier.moysan@foss.st.com>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Cc: Marek Vasut <marex@denx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbcc95bb510e973c874ecacc170bacfad33e0b89
Author: Gregory Oakes <gregory.oakes@amd.com>
Date:   Thu Mar 16 15:13:12 2023 -0500

    watchdog: sp5100_tco: Immediately trigger upon starting.
    
    commit 4eda19cc8a29cde3580ed73bf11dc73b4e757697 upstream.
    
    The watchdog countdown is supposed to begin when the device file is
    opened. Instead, it would begin countdown upon the first write to or
    close of the device file. Now, the ping operation is called within the
    start operation which ensures the countdown begins. From experimenation,
    it does not appear possible to do this with a single write including
    both the start bit and the trigger bit. So, it is done as two distinct
    writes.
    
    Signed-off-by: Gregory Oakes <gregory.oakes@amd.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20230316201312.17538-1-gregory.oakes@amd.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75258f0838682deaf1b0e2f55f00f56bedbe1b20
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Thu May 11 17:04:41 2023 +0200

    s390/qdio: fix do_sqbs() inline assembly constraint
    
    [ Upstream commit 2862a2fdfae875888e3c1c3634e3422e01d98147 ]
    
    Use "a" constraint instead of "d" constraint to pass the state parameter to
    the do_sqbs() inline assembly. This prevents that general purpose register
    zero is used for the state parameter.
    
    If the compiler would select general purpose register zero this would be
    problematic for the used instruction in rsy format: the register used for
    the state parameter is a base register. If the base register is general
    purpose register zero the contents of the register are unexpectedly ignored
    when the instruction is executed.
    
    This only applies to z/VM guests using QIOASSIST with dedicated (pass through)
    QDIO-based devices such as FCP [zfcp driver] as well as real OSA or
    HiperSockets [qeth driver].
    
    A possible symptom for this case using zfcp is the following repeating kernel
    message pattern:
    
    zfcp <devbusid>: A QDIO problem occurred
    zfcp <devbusid>: A QDIO problem occurred
    zfcp <devbusid>: qdio: ZFCP on SC <sc> using AI:1 QEBSM:1 PRI:1 TDD:1 SIGA: W
    zfcp <devbusid>: A QDIO problem occurred
    zfcp <devbusid>: A QDIO problem occurred
    
    Each of the qdio problem message can be accompanied by the following entries
    for the affected subchannel <sc> in
    /sys/kernel/debug/s390dbf/qdio_error/hex_ascii for zfcp or qeth:
    
    <sc> ccq: 69....
    <sc> SQBS ERROR.
    
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Cc: Steffen Maier <maier@linux.ibm.com>
    Fixes: 8129ee164267 ("[PATCH] s390: qdio V=V pass-through")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3681a0287a738c1940efe206e43f3c4b06776269
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Tue Jun 22 15:26:16 2021 +0200

    s390/qdio: get rid of register asm
    
    [ Upstream commit d3e2ff5436d6ee38b572ba5c01dc7994769bec54 ]
    
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Stable-dep-of: 2862a2fdfae8 ("s390/qdio: fix do_sqbs() inline assembly constraint")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c9f253fc60b19ce9d82761bafd7ffb0ac4142b4
Author: Andrew Davis <afd@ti.com>
Date:   Thu Apr 20 11:02:09 2023 -0500

    serial: 8250_exar: Add support for USR298x PCI Modems
    
    [ Upstream commit 95d698869b404772cc8b72560df71548491c10bc ]
    
    Possibly the last PCI controller-based (i.e. not a soft/winmodem)
    dial-up modem one can still buy.
    
    Looks to have a stock XR17C154 PCI UART chip for communication, but for
    some reason when provisioning the PCI IDs they swapped the vendor and
    subvendor IDs. Otherwise this card would have worked out of the box.
    
    Searching online, some folks seem to not have this issue and others do,
    so it is possible only some batches of cards have this error.
    
    Create a new macro to handle the switched IDs and add support here.
    
    Signed-off-by: Andrew Davis <afd@ti.com>
    Cc: stable <stable@kernel.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20230420160209.28221-1-afd@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ffa0b8ba928dbbf3cd5adfbc1c189127ec4806b
Author: Matthew Howell <matthew.howell@sealevel.com>
Date:   Thu Jan 19 14:40:29 2023 -0500

    serial: exar: Add support for Sealevel 7xxxC serial cards
    
    [ Upstream commit 14ee78d5932afeb710c8305196a676a715bfdea8 ]
    
    Add support for Sealevel 7xxxC serial cards.
    
    This patch:
    * Adds IDs to recognize 7xxxC cards from Sealevel Systems.
    * Updates exar_pci_probe() to set nr_ports to last two bytes of primary
      dev ID for these cards.
    
    Signed-off-by: Matthew Howell <matthew.howell@sealevel.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2301191440010.22558@tstest-VirtualBox
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 95d698869b40 ("serial: 8250_exar: Add support for USR298x PCI Modems")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb3c5714f5ce2ace7d81ca0315b1171fa5c5fdd4
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Jan 27 20:06:08 2022 +0200

    serial: 8250_exar: derive nr_ports from PCI ID for Acces I/O cards
    
    [ Upstream commit 8e4413aaf6a2e3a46e99a0718ca54c0cf8609cb2 ]
    
    In the similar way how it's done in 8250_pericom, derive the number of
    the UART ports from PCI ID for Acces I/O cards.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20220127180608.71509-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 95d698869b40 ("serial: 8250_exar: Add support for USR298x PCI Modems")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18fbf8cfbb9dcfde8504d23c309ed22bbf616cdf
Author: Will Deacon <will@kernel.org>
Date:   Fri Mar 19 10:01:10 2021 +0000

    KVM: arm64: Link position-independent string routines into .hyp.text
    
    commit 7b4a7b5e6fefd15f708f959dd43e188444e252ec upstream
    
    Pull clear_page(), copy_page(), memcpy() and memset() into the nVHE hyp
    code and ensure that we always execute the '__pi_' entry point on the
    offchance that it changes in future.
    
    [ qperret: Commit title nits and added linker script alias ]
    
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Quentin Perret <qperret@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20210319100146.1149909-3-qperret@google.com
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e266da1656d6d83f41c1880b970f0e4887358f9d
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Wed Sep 28 13:49:29 2022 -0700

    HID: wacom: add three styli to wacom_intuos_get_tool_type
    
    commit bfdc750c4cb2f3461b9b00a2755e2145ac195c9a upstream.
    
    We forgot to add the 3D pen ID a year ago. There are two new pro pen
    IDs to be added.
    
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfd419db0391b65d0a711229c07d8a6c4b7b09ac
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Fri Aug 26 14:34:02 2022 -0700

    HID: wacom: Add new Intuos Pro Small (PTH-460) device IDs
    
    commit 0627f3df95e1609693f89e7ceb4156ac5db6e358 upstream.
    
    Add the new PIDs to wacom_wac.c to support the new model in the Intuos Pro series.
    
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Tested-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Cc: Ping Cheng <pinglinux@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05b1703797443c8c013dd2d16a0756e751114d1d
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Jul 15 16:05:19 2022 -0700

    HID: wacom: Force pen out of prox if no events have been received in a while
    
    commit 94b179052f95c294d83e9c9c34f7833cf3cd4305 upstream.
    
    Prox-out events may not be reliably sent by some AES firmware. This can
    cause problems for users, particularly due to arbitration logic disabling
    touch input while the pen is in prox.
    
    This commit adds a timer which is reset every time a new prox event is
    received. When the timer expires we check to see if the pen is still in
    prox and force it out if necessary. This is patterend off of the same
    solution used by 'hid-letsketch' driver which has a similar problem.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/310
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Cc: Ping Cheng <pinglinux@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b4205ea97901f822004e6c8d59484ccfda03faa
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Wed May 10 00:29:56 2023 +0900

    nilfs2: fix use-after-free bug of nilfs_root in nilfs_evict_inode()
    
    commit 9b5a04ac3ad9898c4745cba46ea26de74ba56a8e upstream.
    
    During unmount process of nilfs2, nothing holds nilfs_root structure after
    nilfs2 detaches its writer in nilfs_detach_log_writer().  However, since
    nilfs_evict_inode() uses nilfs_root for some cleanup operations, it may
    cause use-after-free read if inodes are left in "garbage_list" and
    released by nilfs_dispose_list() at the end of nilfs_detach_log_writer().
    
    Fix this issue by modifying nilfs_evict_inode() to only clear inode
    without additional metadata changes that use nilfs_root if the file system
    is degraded to read-only or the writer is detached.
    
    Link: https://lkml.kernel.org/r/20230509152956.8313-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+78d4495558999f55d1da@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/00000000000099e5ac05fb1c3b85@google.com
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 710dee57012ed7caebff47d1a7d923eaed4048f3
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 11 21:42:24 2023 +1000

    powerpc/64s/radix: Fix soft dirty tracking
    
    commit 66b2ca086210732954a7790d63d35542936fc664 upstream.
    
    It was reported that soft dirty tracking doesn't work when using the
    Radix MMU.
    
    The tracking is supposed to work by clearing the soft dirty bit for a
    mapping and then write protecting the PTE. If/when the page is written
    to, a page fault occurs and the soft dirty bit is added back via
    pte_mkdirty(). For example in wp_page_reuse():
    
            entry = maybe_mkwrite(pte_mkdirty(entry), vma);
            if (ptep_set_access_flags(vma, vmf->address, vmf->pte, entry, 1))
                    update_mmu_cache(vma, vmf->address, vmf->pte);
    
    Unfortunately on radix _PAGE_SOFTDIRTY is being dropped by
    radix__ptep_set_access_flags(), called from ptep_set_access_flags(),
    meaning the soft dirty bit is not set even though the page has been
    written to.
    
    Fix it by adding _PAGE_SOFTDIRTY to the set of bits that are able to be
    changed in radix__ptep_set_access_flags().
    
    Fixes: b0b5e9b13047 ("powerpc/mm/radix: Add radix pte #defines")
    Cc: stable@vger.kernel.org # v4.7+
    Reported-by: Dan Horák <dan@danny.cz>
    Link: https://lore.kernel.org/r/20230511095558.56663a50f86bdc4cd97700b7@danny.cz
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230511114224.977423-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae149cdaef4ec680b8145a9dc9674b51d4bfd507
Author: Jerry Snitselaar <jsnitsel@redhat.com>
Date:   Wed May 10 17:54:03 2023 -0700

    tpm/tpm_tis: Disable interrupts for more Lenovo devices
    
    commit e7d3e5c4b1dd50a70b31524c3228c62bb41bbab2 upstream.
    
    The P360 Tiny suffers from an irq storm issue like the T490s, so add
    an entry for it to tpm_tis_dmi_table, and force polling. There also
    previously was a report from the previous attempt to enable interrupts
    that involved a ThinkPad L490. So an entry is added for it as well.
    
    Cc: stable@vger.kernel.org
    Reported-by: Peter Zijlstra <peterz@infradead.org> # P360 Tiny
    Closes: https://lore.kernel.org/linux-integrity/20230505130731.GO83892@hirez.programming.kicks-ass.net/
    Signed-off-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c0109d76235543e8520b5e5ad9d71aa7368836e
Author: Xiubo Li <xiubli@redhat.com>
Date:   Thu May 18 09:47:23 2023 +0800

    ceph: force updating the msg pointer in non-split case
    
    commit 4cafd0400bcb6187c0d4ab4d4b0229a89ac4f8c2 upstream.
    
    When the MClientSnap reqeust's op is not CEPH_SNAP_OP_SPLIT the
    request may still contain a list of 'split_realms', and we need
    to skip it anyway. Or it will be parsed as a corrupt snaptrace.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/61200
    Reported-by: Frank Schilder <frans@dtu.dk>
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11dddfbb7a4e62489b01074d6c04d9d1b42e4047
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Fri May 12 06:08:48 2023 -0500

    vc_screen: reload load of struct vc_data pointer in vcs_write() to avoid UAF
    
    commit 8fb9ea65c9d1338b0d2bb0a9122dc942cdd32357 upstream.
    
    After a call to console_unlock() in vcs_write() the vc_data struct can be
    freed by vc_port_destruct(). Because of that, the struct vc_data pointer
    must be reloaded in the while loop in vcs_write() after console_lock() to
    avoid a UAF when vcs_size() is called.
    
    Syzkaller reported a UAF in vcs_size().
    
    BUG: KASAN: slab-use-after-free in vcs_size (drivers/tty/vt/vc_screen.c:215)
    Read of size 4 at addr ffff8880beab89a8 by task repro_vcs_size/4119
    
    Call Trace:
     <TASK>
    __asan_report_load4_noabort (mm/kasan/report_generic.c:380)
    vcs_size (drivers/tty/vt/vc_screen.c:215)
    vcs_write (drivers/tty/vt/vc_screen.c:664)
    vfs_write (fs/read_write.c:582 fs/read_write.c:564)
    ...
     <TASK>
    
    Allocated by task 1213:
    kmalloc_trace (mm/slab_common.c:1064)
    vc_allocate (./include/linux/slab.h:559 ./include/linux/slab.h:680
        drivers/tty/vt/vt.c:1078 drivers/tty/vt/vt.c:1058)
    con_install (drivers/tty/vt/vt.c:3334)
    tty_init_dev (drivers/tty/tty_io.c:1303 drivers/tty/tty_io.c:1415
        drivers/tty/tty_io.c:1392)
    tty_open (drivers/tty/tty_io.c:2082 drivers/tty/tty_io.c:2128)
    chrdev_open (fs/char_dev.c:415)
    do_dentry_open (fs/open.c:921)
    vfs_open (fs/open.c:1052)
    ...
    
    Freed by task 4116:
    kfree (mm/slab_common.c:1016)
    vc_port_destruct (drivers/tty/vt/vt.c:1044)
    tty_port_destructor (drivers/tty/tty_port.c:296)
    tty_port_put (drivers/tty/tty_port.c:312)
    vt_disallocate_all (drivers/tty/vt/vt_ioctl.c:662 (discriminator 2))
    vt_ioctl (drivers/tty/vt/vt_ioctl.c:903)
    tty_ioctl (drivers/tty/tty_io.c:2778)
    ...
    
    The buggy address belongs to the object at ffff8880beab8800
     which belongs to the cache kmalloc-1k of size 1024
    The buggy address is located 424 bytes inside of
     freed 1024-byte region [ffff8880beab8800, ffff8880beab8c00)
    
    The buggy address belongs to the physical page:
    page:00000000afc77580 refcount:1 mapcount:0 mapping:0000000000000000
        index:0x0 pfn:0xbeab8
    head:00000000afc77580 order:3 entire_mapcount:0 nr_pages_mapped:0
        pincount:0
    flags: 0xfffffc0010200(slab|head|node=0|zone=1|lastcpupid=0x1fffff)
    page_type: 0xffffffff()
    raw: 000fffffc0010200 ffff888100042dc0 ffffea000426de00 dead000000000002
    raw: 0000000000000000 0000000000100010 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8880beab8880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880beab8900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8880beab8980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                      ^
     ffff8880beab8a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880beab8a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    Disabling lock debugging due to kernel taint
    
    Fixes: ac751efa6a0d ("console: rename acquire/release_console_sem() to console_lock/unlock()")
    Cc: stable <stable@kernel.org>
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Reviewed-by: Thomas Weißschuh <linux@weissschuh.net>
    Link: https://lore.kernel.org/r/1683889728-10411-1-git-send-email-george.kennedy@oracle.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea3d5de90bc0601b06c3bf47bc85acfedb79e5a9
Author: Vitaliy Tomin <tomin@iszf.irk.ru>
Date:   Sun Apr 23 11:45:12 2023 +0800

    serial: Add support for Advantech PCI-1611U card
    
    commit d2b00516de0e1d696724247098f6733a6ea53908 upstream.
    
    Add support for Advantech PCI-1611U card
    
    Advantech provides opensource drivers for this and many others card
    based on legacy copy of 8250_pci driver called adv950
    
    https://www.advantech.com/emt/support/details/driver?id=1-TDOIMJ
    
    It is hard to maintain to run as out of tree module on newer kernels.
    Just adding PCI ID to kernel 8250_pci works perfect.
    
    Signed-off-by: Vitaliy Tomin <tomin@iszf.irk.ru>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230423034512.2671157-1-tomin@iszf.irk.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba061afa060ed9fdd1c24788b1de56983ce5a215
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Thu May 4 16:40:20 2023 +0200

    statfs: enforce statfs[64] structure initialization
    
    commit ed40866ec7d328b3dfb70db7e2011640a16202c3 upstream.
    
    s390's struct statfs and struct statfs64 contain padding, which
    field-by-field copying does not set. Initialize the respective structs
    with zeros before filling them and copying them to userspace, like it's
    already done for the compat versions of these structs.
    
    Found by KMSAN.
    
    [agordeev@linux.ibm.com: fixed typo in patch description]
    Acked-by: Heiko Carstens <hca@linux.ibm.com>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Link: https://lore.kernel.org/r/20230504144021.808932-2-iii@linux.ibm.com
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 845f98af6ae8fd5027aa04c4a1538fe546e7d16b
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Tue May 16 15:43:18 2023 +0200

    can: kvaser_pciefd: Disable interrupts in probe error path
    
    commit 11164bc39459335ab93c6e99d53b7e4292fba38b upstream.
    
    Disable interrupts in error path of probe function.
    
    Fixes: 26ad340e582d ("can: kvaser_pciefd: Add driver for Kvaser PCIEcan devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/r/20230516134318.104279-7-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a7ec807fe547586e5a26d8027e62aa1c93eccfb
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Tue May 16 15:43:17 2023 +0200

    can: kvaser_pciefd: Do not send EFLUSH command on TFD interrupt
    
    commit 262d7a52ba27525e3c1203230c9f0524e48bbb34 upstream.
    
    Under certain circumstances we send two EFLUSH commands, resulting in two
    EFLUSH ack packets, while only expecting a single EFLUSH ack.
    This can cause the driver Tx flush completion to get out of sync.
    
    To avoid this problem, don't enable the "Transmit buffer flush done" (TFD)
    interrupt and remove the code handling it.
    Now we only send EFLUSH command after receiving status packet with
    "Init detected" (IDET) bit set.
    
    Fixes: 26ad340e582d ("can: kvaser_pciefd: Add driver for Kvaser PCIEcan devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/r/20230516134318.104279-6-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65e85232ffa6a15f92ead85df236747b0448c960
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Tue May 16 15:43:14 2023 +0200

    can: kvaser_pciefd: Clear listen-only bit if not explicitly requested
    
    commit bf7ac55e991ca177f1ac16be51152f1ef291a4df upstream.
    
    The listen-only bit was never cleared, causing the controller to
    always use listen-only mode, if previously set.
    
    Fixes: 26ad340e582d ("can: kvaser_pciefd: Add driver for Kvaser PCIEcan devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/r/20230516134318.104279-3-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0babb3fabf558416757de900ef4e9906d8274f1a
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Tue May 16 15:43:16 2023 +0200

    can: kvaser_pciefd: Empty SRB buffer in probe
    
    commit c589557dd1426f5adf90c7a919d4fde5a3e4ef64 upstream.
    
    Empty the "Shared receive buffer" (SRB) in probe, to assure we start in a
    known state, and don't process any irrelevant packets.
    
    Fixes: 26ad340e582d ("can: kvaser_pciefd: Add driver for Kvaser PCIEcan devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/r/20230516134318.104279-5-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03714e9c04ec96af1c5a6eff3b1e656704962040
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Tue May 16 15:43:15 2023 +0200

    can: kvaser_pciefd: Call request_irq() before enabling interrupts
    
    commit 84762d8da89d29ba842317eb842973e628c27391 upstream.
    
    Make sure the interrupt handler is registered before enabling interrupts.
    
    Fixes: 26ad340e582d ("can: kvaser_pciefd: Add driver for Kvaser PCIEcan devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/r/20230516134318.104279-4-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bbeba3ce14d8ecac43fe0b9bb3785b0d86ca055
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Tue May 16 15:43:13 2023 +0200

    can: kvaser_pciefd: Set CAN_STATE_STOPPED in kvaser_pciefd_stop()
    
    commit aed0e6ca7dbb8fbea9bc69c9ac663d5533c8c5d8 upstream.
    
    Set can.state to CAN_STATE_STOPPED in kvaser_pciefd_stop().
    Without this fix, wrong CAN state was repported after the interface was
    brought down.
    
    Fixes: 26ad340e582d ("can: kvaser_pciefd: Add driver for Kvaser PCIEcan devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Link: https://lore.kernel.org/r/20230516134318.104279-2-extja@kvaser.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 073a4d750cecd77f1ddf442402123a76ce6602c9
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Thu Apr 6 13:08:45 2023 +0200

    can: isotp: recvmsg(): allow MSG_CMSG_COMPAT flag
    
    commit db2773d65b02aed319a93efdfb958087771d4e19 upstream.
    
    The control message provided by isotp support MSG_CMSG_COMPAT but
    blocked recvmsg() syscalls that have set this flag, i.e. on 32bit user
    space on 64 bit kernels.
    
    Link: https://github.com/hartkopp/can-isotp/issues/59
    Cc: Oleksij Rempel <o.rempel@pengutronix.de>
    Suggested-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Fixes: 42bf50a1795a ("can: isotp: support MSG_TRUNC flag when reading from socket")
    Link: https://lore.kernel.org/20230505110308.81087-2-mkl@pengutronix.de
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4b8294a41ca62d6a3daff24c3448ea51f8bc688
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Thu Apr 6 13:08:45 2023 +0200

    can: j1939: recvmsg(): allow MSG_CMSG_COMPAT flag
    
    commit 1db080cbdbab28752bbb1c86d64daf96253a5da1 upstream.
    
    The control message provided by J1939 support MSG_CMSG_COMPAT but
    blocked recvmsg() syscalls that have set this flag, i.e. on 32bit user
    space on 64 bit kernels.
    
    Link: https://github.com/hartkopp/can-isotp/issues/59
    Cc: Oleksij Rempel <o.rempel@pengutronix.de>
    Suggested-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Link: https://lore.kernel.org/20230505110308.81087-3-mkl@pengutronix.de
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7f799a6fe38f74ac37a1a4a1786eb3be8b81c81
Author: Luke D. Jones <luke@ljones.dev>
Date:   Sat May 6 11:58:24 2023 +1200

    ALSA: hda/realtek: Add quirk for 2nd ASUS GU603
    
    commit a4671b7fba59775845ee60cfbdfc4ba64300211b upstream.
    
    Add quirk for GU603 with 0x1c62 variant of codec.
    
    Signed-off-by: Luke D. Jones <luke@ljones.dev>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230505235824.49607-2-luke@ljones.dev
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4f770e61230cb47b0c21b01b81e19553d635c83
Author: Ai Chao <aichao@kylinos.cn>
Date:   Sat May 6 10:26:53 2023 +0800

    ALSA: hda/realtek: Add a quirk for HP EliteDesk 805
    
    commit 90670ef774a8b6700c38ce1222e6aa263be54d5f upstream.
    
    Add a quirk for HP EliteDesk 805 to fixup ALC3867 headset MIC no sound.
    
    Signed-off-by: Ai Chao <aichao@kylinos.cn>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230506022653.2074343-1-aichao@kylinos.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cebdffba6283a61c37310b82fa5fbcb194ade71
Author: Jeremy Soller <jeremy@system76.com>
Date:   Fri May 5 10:36:51 2023 -0600

    ALSA: hda/realtek: Add quirk for Clevo L140AU
    
    commit 0a6b36c5dc3dda0196f4fb65bdb34c38b8d060c3 upstream.
    
    Fixes headset detection on Clevo L140AU.
    
    Signed-off-by: Jeremy Soller <jeremy@system76.com>
    Signed-off-by: Tim Crawford <tcrawford@system76.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230505163651.21257-1-tcrawford@system76.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3add6b2a4a693b93a569c7cf84313b7d1a40ff58
Author: Nikhil Mahale <nmahale@nvidia.com>
Date:   Wed May 17 14:37:36 2023 +0530

    ALSA: hda: Add NVIDIA codec IDs a3 through a7 to patch table
    
    commit dc4f2ccaedddb489a83e7b12ebbdc347272aacc9 upstream.
    
    These IDs are for AD102, AD103, AD104, AD106, and AD107 gpus with
    audio functions that are largely similar to the existing ones.
    
    Tested audio using gnome-settings, over HDMI, DP-SST and DP-MST
    connections on AD106 gpu.
    
    Signed-off-by: Nikhil Mahale <nmahale@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230517090736.15088-1-nmahale@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 546b1f5f45a355ae0d3a8041cdaca597dfcac825
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue May 16 20:44:12 2023 +0200

    ALSA: hda: Fix Oops by 9.1 surround channel names
    
    commit 3b44ec8c5c44790a82f07e90db45643c762878c6 upstream.
    
    get_line_out_pfx() may trigger an Oops by overflowing the static array
    with more than 8 channels.  This was reported for MacBookPro 12,1 with
    Cirrus codec.
    
    As a workaround, extend for the 9.1 channels and also fix the
    potential Oops by unifying the code paths accessing the same array
    with the proper size check.
    
    Reported-by: Olliver Schinagl <oliver@schinagl.nl>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/64d95eb0-dbdb-cff8-a8b1-988dc22b24cd@schinagl.nl
    Link: https://lore.kernel.org/r/20230516184412.24078-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff466f77d0a56719979c4234abd412abd98eae8f
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Mon May 8 21:44:43 2023 +0000

    usb: typec: altmodes/displayport: fix pin_assignment_show
    
    commit d8f28269dd4bf9b55c3fb376ae31512730a96fce upstream.
    
    This patch fixes negative indexing of buf array in pin_assignment_show
    when get_current_pin_assignments returns 0 i.e. no compatible pin
    assignments are found.
    
    BUG: KASAN: use-after-free in pin_assignment_show+0x26c/0x33c
    ...
    Call trace:
    dump_backtrace+0x110/0x204
    dump_stack_lvl+0x84/0xbc
    print_report+0x358/0x974
    kasan_report+0x9c/0xfc
    __do_kernel_fault+0xd4/0x2d4
    do_bad_area+0x48/0x168
    do_tag_check_fault+0x24/0x38
    do_mem_abort+0x6c/0x14c
    el1_abort+0x44/0x68
    el1h_64_sync_handler+0x64/0xa4
    el1h_64_sync+0x78/0x7c
    pin_assignment_show+0x26c/0x33c
    dev_attr_show+0x50/0xc0
    
    Fixes: 0e3bb7d6894d ("usb: typec: Add driver for DisplayPort alternate mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20230508214443.893436-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35e31e1e921c185c48d683bd52438c24916e46f5
Author: Konrad Gräfe <k.graefe@gateware.de>
Date:   Fri May 5 16:36:40 2023 +0200

    usb: gadget: u_ether: Fix host MAC address case
    
    commit 3c0f4f09c063e143822393d99cb2b19a85451c07 upstream.
    
    The CDC-ECM specification [1] requires to send the host MAC address as
    an uppercase hexadecimal string in chapter "5.4 Ethernet Networking
    Functional Descriptor":
        The Unicode character is chosen from the set of values 30h through
        39h and 41h through 46h (0-9 and A-F).
    
    However, snprintf(.., "%pm", ..) generates a lowercase MAC address
    string. While most host drivers are tolerant to this, UsbNcm.sys on
    Windows 10 is not. Instead it uses a different MAC address with all
    bytes set to zero including and after the first byte containing a
    lowercase letter. On Windows 11 Microsoft fixed it, but apparently they
    did not backport the fix.
    
    This change fixes the issue by upper-casing the MAC to comply with the
    specification.
    
    [1]: https://www.usb.org/document-library/class-definitions-communication-devices-12, file ECM120.pdf
    
    Fixes: bcd4a1c40bee ("usb: gadget: u_ether: construct with default values and add setters/getters")
    Cc: stable@vger.kernel.org
    Signed-off-by: Konrad Gräfe <k.graefe@gateware.de>
    Link: https://lore.kernel.org/r/20230505143640.443014-1-k.graefe@gateware.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e35adb75fda5a6254f7cd232a704dde81206061b
Author: Udipto Goswami <quic_ugoswami@quicinc.com>
Date:   Tue May 9 20:18:36 2023 +0530

    usb: dwc3: debugfs: Resume dwc3 before accessing registers
    
    commit 614ce6a2ea50068b45339257891e51e639ac9001 upstream.
    
    When the dwc3 device is runtime suspended, various required clocks are in
    disabled state and it is not guaranteed that access to any registers would
    work. Depending on the SoC glue, a register read could be as benign as
    returning 0 or be fatal enough to hang the system.
    
    In order to prevent such scenarios of fatal errors, make sure to resume
    dwc3 then allow the function to proceed.
    
    Fixes: 72246da40f37 ("usb: Introduce DesignWare USB3 DRD Driver")
    Cc: stable@vger.kernel.org #3.2: 30332eeefec8: debugfs: regset32: Add Runtime PM support
    Signed-off-by: Udipto Goswami <quic_ugoswami@quicinc.com>
    Reviewed-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Johan Hovold <johan+linaro@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230509144836.6803-1-quic_ugoswami@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66070f5b99954793fe1caa568ee3c0a0abccd6c1
Author: Weitao Wang <WeitaoWang-oc@zhaoxin.com>
Date:   Sun Apr 23 18:59:52 2023 +0800

    USB: UHCI: adjust zhaoxin UHCI controllers OverCurrent bit value
    
    commit dddb342b5b9e482bb213aecc08cbdb201ea4f8da upstream.
    
    OverCurrent condition is not standardized in the UHCI spec.
    Zhaoxin UHCI controllers report OverCurrent bit active off.
    In order to handle OverCurrent condition correctly, the uhci-hcd
    driver needs to be told to expect the active-off behavior.
    
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Weitao Wang <WeitaoWang-oc@zhaoxin.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20230423105952.4526-1-WeitaoWang-oc@zhaoxin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0caed1faf5f68ad8c72230c21a12e17fc00ffd85
Author: Maxime Bizon <mbizon@freebox.fr>
Date:   Fri May 5 13:47:59 2023 +0200

    usb-storage: fix deadlock when a scsi command timeouts more than once
    
    commit a398d5eac6984316e71474e25b975688f282379b upstream.
    
    With faulty usb-storage devices, read/write can timeout, in that case
    the SCSI layer will abort and re-issue the command. USB storage has no
    internal timeout, it relies on SCSI layer aborting commands via
    .eh_abort_handler() for non those responsive devices.
    
    After two consecutive timeouts of the same command, SCSI layer calls
    .eh_device_reset_handler(), without calling .eh_abort_handler() first.
    
    With usb-storage, this causes a deadlock:
    
      -> .eh_device_reset_handler
        -> device_reset
          -> mutex_lock(&(us->dev_mutex));
    
    mutex already by usb_stor_control_thread(), which is waiting for
    command completion:
    
      -> usb_stor_control_thread (mutex taken here)
        -> usb_stor_invoke_transport
          -> usb_stor_Bulk_transport
            -> usb_stor_bulk_srb
              -> usb_stor_bulk_transfer_sglist
                -> usb_sg_wait
    
    Make sure we cancel any pending command in .eh_device_reset_handler()
    to avoid this.
    
    Signed-off-by: Maxime Bizon <mbizon@freebox.fr>
    Cc: linux-usb@vger.kernel.org
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/all/ZEllnjMKT8ulZbJh@sakura/
    Reviewed-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20230505114759.1189741-1-mbizon@freebox.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6340e432cf70bf156b19c6f5dd737d940eca02a3
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon May 1 14:22:35 2023 -0400

    USB: usbtmc: Fix direction for 0-length ioctl control messages
    
    commit 94d25e9128988c6a1fc9070f6e98215a95795bd8 upstream.
    
    The syzbot fuzzer found a problem in the usbtmc driver: When a user
    submits an ioctl for a 0-length control transfer, the driver does not
    check that the direction is set to OUT:
    
    ------------[ cut here ]------------
    usb 3-1: BOGUS control dir, pipe 80000b80 doesn't match bRequestType fd
    WARNING: CPU: 0 PID: 5100 at drivers/usb/core/urb.c:411 usb_submit_urb+0x14a7/0x1880 drivers/usb/core/urb.c:411
    Modules linked in:
    CPU: 0 PID: 5100 Comm: syz-executor428 Not tainted 6.3.0-syzkaller-12049-g58390c8ce1bd #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/14/2023
    RIP: 0010:usb_submit_urb+0x14a7/0x1880 drivers/usb/core/urb.c:411
    Code: 7c 24 40 e8 1b 13 5c fb 48 8b 7c 24 40 e8 21 1d f0 fe 45 89 e8 44 89 f1 4c 89 e2 48 89 c6 48 c7 c7 e0 b5 fc 8a e8 19 c8 23 fb <0f> 0b e9 9f ee ff ff e8 ed 12 5c fb 0f b6 1d 12 8a 3c 08 31 ff 41
    RSP: 0018:ffffc90003d2fb00 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: ffff8880789e9058 RCX: 0000000000000000
    RDX: ffff888029593b80 RSI: ffffffff814c1447 RDI: 0000000000000001
    RBP: ffff88801ea742f8 R08: 0000000000000001 R09: 0000000000000000
    R10: 0000000000000001 R11: 0000000000000001 R12: ffff88802915e528
    R13: 00000000000000fd R14: 0000000080000b80 R15: ffff8880222b3100
    FS:  0000555556ca63c0(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f9ef4d18150 CR3: 0000000073e5b000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     usb_start_wait_urb+0x101/0x4b0 drivers/usb/core/message.c:58
     usb_internal_control_msg drivers/usb/core/message.c:102 [inline]
     usb_control_msg+0x320/0x4a0 drivers/usb/core/message.c:153
     usbtmc_ioctl_request drivers/usb/class/usbtmc.c:1954 [inline]
     usbtmc_ioctl+0x1b3d/0x2840 drivers/usb/class/usbtmc.c:2097
    
    To fix this, we must override the direction in the bRequestType field
    of the control request structure when the length is 0.
    
    Reported-and-tested-by: syzbot+ce77725b89b7bd52425c@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/linux-usb/000000000000716a3705f9adb8ee@google.com/
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/ede1ee02-b718-49e7-a44c-51339fec706b@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b3c6f2d2f1fa8408b8cf050c020815b8a114695
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri May 12 09:58:58 2023 +0200

    ALSA: usb-audio: Add a sample rate workaround for Line6 Pod Go
    
    commit 359b4315471181f108723c61612d96e383e56179 upstream.
    
    Line6 Pod Go (0e41:424b) requires the similar workaround for the fixed
    48k sample rate like other Line6 models.  This patch adds the
    corresponding entry to line6_parse_audio_format_rate_quirk().
    
    Reported-by: John Humlick <john@humlick.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230512075858.22813-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bd6d11e7e630255833d88cb0a95abd483fa8354
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue May 16 21:45:35 2023 +0200

    bridge: always declare tunnel functions
    
    [ Upstream commit 89dcd87ce534a3a7f267cfd58505803006f51301 ]
    
    When CONFIG_BRIDGE_VLAN_FILTERING is disabled, two functions are still
    defined but have no prototype or caller. This causes a W=1 warning for
    the missing prototypes:
    
    net/bridge/br_netlink_tunnel.c:29:6: error: no previous prototype for 'vlan_tunid_inrange' [-Werror=missing-prototypes]
    net/bridge/br_netlink_tunnel.c:199:5: error: no previous prototype for 'br_vlan_tunnel_info' [-Werror=missing-prototypes]
    
    The functions are already contitional on CONFIG_BRIDGE_VLAN_FILTERING,
    and I coulnd't easily figure out the right set of #ifdefs, so just
    move the declarations out of the #ifdef to avoid the warning,
    at a small cost in code size over a more elaborate fix.
    
    Fixes: 188c67dd1906 ("net: bridge: vlan options: add support for tunnel id dumping")
    Fixes: 569da0822808 ("net: bridge: vlan options: add support for tunnel mapping set/del")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Link: https://lore.kernel.org/r/20230516194625.549249-3-arnd@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fa13203b6d90cc3a33af47b058739f92ab82eef
Author: Florian Westphal <fw@strlen.de>
Date:   Thu May 11 22:39:30 2023 +0200

    netfilter: nft_set_rbtree: fix null deref on element insertion
    
    [ Upstream commit 61ae320a29b0540c16931816299eb86bf2b66c08 ]
    
    There is no guarantee that rb_prev() will not return NULL in nft_rbtree_gc_elem():
    
    general protection fault, probably for non-canonical address 0xdffffc0000000003: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000018-0x000000000000001f]
     nft_add_set_elem+0x14b0/0x2990
      nf_tables_newsetelem+0x528/0xb30
    
    Furthermore, there is a possible use-after-free while iterating,
    'node' can be free'd so we need to cache the next value to use.
    
    Fixes: c9e6978e2725 ("netfilter: nft_set_rbtree: Switch to node list walk for overlap detection")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cfe6f51856b0ef65aabb4423ade43c42ae9d930
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 16 14:23:42 2023 +0000

    vlan: fix a potential uninit-value in vlan_dev_hard_start_xmit()
    
    [ Upstream commit dacab578c7c6cd06c50c89dfa36b0e0f10decd4e ]
    
    syzbot triggered the following splat [1], sending an empty message
    through pppoe_sendmsg().
    
    When VLAN_FLAG_REORDER_HDR flag is set, vlan_dev_hard_header()
    does not push extra bytes for the VLAN header, because vlan is offloaded.
    
    Unfortunately vlan_dev_hard_start_xmit() first reads veth->h_vlan_proto
    before testing (vlan->flags & VLAN_FLAG_REORDER_HDR).
    
    We need to swap the two conditions.
    
    [1]
    BUG: KMSAN: uninit-value in vlan_dev_hard_start_xmit+0x171/0x7f0 net/8021q/vlan_dev.c:111
    vlan_dev_hard_start_xmit+0x171/0x7f0 net/8021q/vlan_dev.c:111
    __netdev_start_xmit include/linux/netdevice.h:4883 [inline]
    netdev_start_xmit include/linux/netdevice.h:4897 [inline]
    xmit_one net/core/dev.c:3580 [inline]
    dev_hard_start_xmit+0x253/0xa20 net/core/dev.c:3596
    __dev_queue_xmit+0x3c7f/0x5ac0 net/core/dev.c:4246
    dev_queue_xmit include/linux/netdevice.h:3053 [inline]
    pppoe_sendmsg+0xa93/0xb80 drivers/net/ppp/pppoe.c:900
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg net/socket.c:747 [inline]
    ____sys_sendmsg+0xa24/0xe40 net/socket.c:2501
    ___sys_sendmsg+0x2a1/0x3f0 net/socket.c:2555
    __sys_sendmmsg+0x411/0xa50 net/socket.c:2641
    __do_sys_sendmmsg net/socket.c:2670 [inline]
    __se_sys_sendmmsg net/socket.c:2667 [inline]
    __x64_sys_sendmmsg+0xbc/0x120 net/socket.c:2667
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Uninit was created at:
    slab_post_alloc_hook+0x12d/0xb60 mm/slab.h:774
    slab_alloc_node mm/slub.c:3452 [inline]
    kmem_cache_alloc_node+0x543/0xab0 mm/slub.c:3497
    kmalloc_reserve+0x148/0x470 net/core/skbuff.c:520
    __alloc_skb+0x3a7/0x850 net/core/skbuff.c:606
    alloc_skb include/linux/skbuff.h:1277 [inline]
    sock_wmalloc+0xfe/0x1a0 net/core/sock.c:2583
    pppoe_sendmsg+0x3af/0xb80 drivers/net/ppp/pppoe.c:867
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg net/socket.c:747 [inline]
    ____sys_sendmsg+0xa24/0xe40 net/socket.c:2501
    ___sys_sendmsg+0x2a1/0x3f0 net/socket.c:2555
    __sys_sendmmsg+0x411/0xa50 net/socket.c:2641
    __do_sys_sendmmsg net/socket.c:2670 [inline]
    __se_sys_sendmmsg net/socket.c:2667 [inline]
    __x64_sys_sendmmsg+0xbc/0x120 net/socket.c:2667
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    CPU: 0 PID: 29770 Comm: syz-executor.0 Not tainted 6.3.0-rc6-syzkaller-gc478e5b17829 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/30/2023
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 562ec162b04a92986af89dd07586e4fb2a6bb15f
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Tue May 16 10:41:46 2023 -0700

    igb: fix bit_shift to be in [1..8] range
    
    [ Upstream commit 60d758659f1fb49e0d5b6ac2691ede8c0958795b ]
    
    In igb_hash_mc_addr() the expression:
            "mc_addr[4] >> 8 - bit_shift", right shifting "mc_addr[4]"
    shift by more than 7 bits always yields zero, so hash becomes not so different.
    Add initialization with bit_shift = 1 and add a loop condition to ensure
    bit_shift will be always in [1..8] range.
    
    Fixes: 9d5c824399de ("igb: PCI-Express 82575 Gigabit Ethernet driver")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc61f7582cc92d547d02e141cd66f5d1f4ed8012
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon May 15 21:09:11 2023 +0200

    cassini: Fix a memory leak in the error handling path of cas_init_one()
    
    [ Upstream commit 412cd77a2c24b191c65ea53025222418db09817c ]
    
    cas_saturn_firmware_init() allocates some memory using vmalloc(). This
    memory is freed in the .remove() function but not it the error handling
    path of the probe.
    
    Add the missing vfree() to avoid a memory leak, should an error occur.
    
    Fixes: fcaa40669cd7 ("cassini: use request_firmware")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81139679f4d28c5c2754fd0401f64720fbb1544b
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Mon May 15 10:20:41 2023 -0700

    scsi: storvsc: Don't pass unused PFNs to Hyper-V host
    
    [ Upstream commit 4e81a6cba517cb33584308a331f14f5e3fec369b ]
    
    In a SCSI request, storvsc pre-allocates space for up to
    MAX_PAGE_BUFFER_COUNT physical frame numbers to be passed to Hyper-V.  If
    the size of the I/O request requires more PFNs, a separate memory area of
    exactly the correct size is dynamically allocated.
    
    But when the pre-allocated area is used, current code always passes
    MAX_PAGE_BUFFER_COUNT PFNs to Hyper-V, even if fewer are needed.  While
    this doesn't break anything because the additional PFNs are always zero,
    more bytes than necessary are copied into the VMBus channel ring buffer.
    This takes CPU cycles and wastes space in the ring buffer. For a typical 4
    Kbyte I/O that requires only a single PFN, 248 unnecessary bytes are
    copied.
    
    Fix this by setting the payload_sz based on the actual number of PFNs
    required, not the size of the pre-allocated space.
    
    Reported-by: John Starks <jostarks@microsoft.com>
    Fixes: 8f43710543ef ("scsi: storvsc: Support PAGE_SIZE larger than 4K")
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1684171241-16209-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0d39bed9e95f27a246be91c5929254ac043ed30
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sun May 14 12:15:53 2023 +0300

    wifi: iwlwifi: mvm: don't trust firmware n_channels
    
    [ Upstream commit 682b6dc29d98e857e6ca4bbc077c7dc2899b7473 ]
    
    If the firmware sends us a corrupted MCC response with
    n_channels much larger than the command response can be,
    we might copy far too much (uninitialized) memory and
    even crash if the n_channels is large enough to make it
    run out of the one page allocated for the FW response.
    
    Fix that by checking the lengths. Doing a < comparison
    would be sufficient, but the firmware should be doing
    it correctly, so check more strictly.
    
    Fixes: dcaf9f5ecb6f ("iwlwifi: mvm: add MCC update FW API")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230514120631.d7b233139eb4.I51fd319df8e9d41881fc8450e83d78049518a79a@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9337a41772dbe6d00e2b686c4f4853e4f570e46
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu May 4 16:45:01 2023 +0300

    wifi: mac80211: fix min center freq offset tracing
    
    [ Upstream commit 248e4776514bf70236e6b1a54c65aa5324c8b1eb ]
    
    We need to set the correct trace variable, otherwise we're
    overwriting something else instead and the right one that
    we print later is not initialized.
    
    Fixes: b6011960f392 ("mac80211: handle channel frequency offset")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230504134511.828474-2-gregory.greenman@intel.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43f6575004e0bbe0acc5d7a1955f326b22f38121
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sun May 14 19:56:07 2023 -0700

    net: bcmgenet: Restore phy_stop() depending upon suspend/close
    
    [ Upstream commit 225c657945c4a6307741cb3cc89467eadcc26e9b ]
    
    Removing the phy_stop() from bcmgenet_netif_stop() ended up causing
    warnings from the PHY library that phy_start() is called from the
    RUNNING state since we are no longer stopping the PHY state machine
    during bcmgenet_suspend().
    
    Restore the call to phy_stop() but make it conditional on being called
    from the close or suspend path.
    
    Fixes: c96e731c93ff ("net: bcmgenet: connect and disconnect from the PHY state machine")
    Fixes: 93e0401e0fc0 ("net: bcmgenet: Remove phy_stop() from bcmgenet_netif_stop()")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Link: https://lore.kernel.org/r/20230515025608.2587012-1-f.fainelli@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e92727ed9e8b6798efc1e7ae44bbe7c44c453670
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu May 4 16:07:27 2023 -0700

    net: bcmgenet: Remove phy_stop() from bcmgenet_netif_stop()
    
    [ Upstream commit 93e0401e0fc0c54b0ac05b687cd135c2ac38187c ]
    
    The call to phy_stop() races with the later call to phy_disconnect(),
    resulting in concurrent phy_suspend() calls being run from different
    CPUs. The final call to phy_disconnect() ensures that the PHY is
    stopped and suspended, too.
    
    Fixes: c96e731c93ff ("net: bcmgenet: connect and disconnect from the PHY state machine")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2937127d24ccb83e57ee5dbcd0309995f0fa5386
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun May 14 15:52:29 2023 -0400

    tipc: check the bearer min mtu properly when setting it by netlink
    
    [ Upstream commit 35a089b5d793d2bfd2cc7cfa6104545184de2ce7 ]
    
    Checking the bearer min mtu with tipc_udp_mtu_bad() only works for
    IPv4 UDP bearer, and IPv6 UDP bearer has a different value for the
    min mtu. This patch checks with encap_hlen + TIPC_MIN_BEARER_MTU
    for min mtu, which works for both IPv4 and IPv6 UDP bearer.
    
    Note that tipc_udp_mtu_bad() is still used to check media min mtu
    in __tipc_nl_media_set(), as m->mtu currently is only used by the
    IPv4 UDP bearer as its default mtu value.
    
    Fixes: 682cd3cf946b ("tipc: confgiure and apply UDP bearer MTU on running links")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bd4ff4ffb92113f8acd04dbaed83269172c24b4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun May 14 15:52:28 2023 -0400

    tipc: do not update mtu if msg_max is too small in mtu negotiation
    
    [ Upstream commit 56077b56cd3fb78e1c8619e29581ba25a5c55e86 ]
    
    When doing link mtu negotiation, a malicious peer may send Activate msg
    with a very small mtu, e.g. 4 in Shuang's testing, without checking for
    the minimum mtu, l->mtu will be set to 4 in tipc_link_proto_rcv(), then
    n->links[bearer_id].mtu is set to 4294967228, which is a overflow of
    '4 - INT_H_SIZE - EMSG_OVERHEAD' in tipc_link_mss().
    
    With tipc_link.mtu = 4, tipc_link_xmit() kept printing the warning:
    
     tipc: Too large msg, purging xmit list 1 5 0 40 4!
     tipc: Too large msg, purging xmit list 1 15 0 60 4!
    
    And with tipc_link_entry.mtu 4294967228, a huge skb was allocated in
    named_distribute(), and when purging it in tipc_link_xmit(), a crash
    was even caused:
    
      general protection fault, probably for non-canonical address 0x2100001011000dd: 0000 [#1] PREEMPT SMP PTI
      CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 6.3.0.neta #19
      RIP: 0010:kfree_skb_list_reason+0x7e/0x1f0
      Call Trace:
       <IRQ>
       skb_release_data+0xf9/0x1d0
       kfree_skb_reason+0x40/0x100
       tipc_link_xmit+0x57a/0x740 [tipc]
       tipc_node_xmit+0x16c/0x5c0 [tipc]
       tipc_named_node_up+0x27f/0x2c0 [tipc]
       tipc_node_write_unlock+0x149/0x170 [tipc]
       tipc_rcv+0x608/0x740 [tipc]
       tipc_udp_recv+0xdc/0x1f0 [tipc]
       udp_queue_rcv_one_skb+0x33e/0x620
       udp_unicast_rcv_skb.isra.72+0x75/0x90
       __udp4_lib_rcv+0x56d/0xc20
       ip_protocol_deliver_rcu+0x100/0x2d0
    
    This patch fixes it by checking the new mtu against tipc_bearer_min_mtu(),
    and not updating mtu if it is too small.
    
    Fixes: ed193ece2649 ("tipc: simplify link mtu negotiation")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 097ea78d8ccaf789eeeb154fdfb6afbd274a2a87
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun May 14 15:52:27 2023 -0400

    tipc: add tipc_bearer_min_mtu to calculate min mtu
    
    [ Upstream commit 3ae6d66b605be604644d4bb5708a7ffd9cf1abe8 ]
    
    As different media may requires different min mtu, and even the
    same media with different net family requires different min mtu,
    add tipc_bearer_min_mtu() to calculate min mtu accordingly.
    
    This API will be used to check the new mtu when doing the link
    mtu negotiation in the next patch.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 56077b56cd3f ("tipc: do not update mtu if msg_max is too small in mtu negotiation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76ea144a35ba434c641ee1b52579d10415567172
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:43 2020 -0800

    net/tipc: fix tipc header files for kernel-doc
    
    [ Upstream commit ff10527e89826aaf76480ee47e6fd05213189963 ]
    
    Fix tipc header files for adding to the networking docbook.
    
    Remove some uses of "/**" that were not kernel-doc notation.
    
    Fix some source formatting to eliminate Sphinx warnings.
    
    Add missing struct member and function argument kernel-doc descriptions.
    
    Correct the description of a couple of struct members that were
    marked as "(FIXME)".
    
    Documentation/networking/tipc:18: ../net/tipc/name_table.h:65: WARNING: Unexpected indentation.
    Documentation/networking/tipc:18: ../net/tipc/name_table.h:66: WARNING: Block quote ends without a blank line; unexpected unindent.
    
    ../net/tipc/bearer.h:128: warning: Function parameter or member 'min_win' not described in 'tipc_media'
    ../net/tipc/bearer.h:128: warning: Function parameter or member 'max_win' not described in 'tipc_media'
    
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'min_win' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'max_win' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'disc' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'up' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'refcnt' not described in 'tipc_bearer'
    
    ../net/tipc/name_distr.h:68: warning: Function parameter or member 'port' not described in 'distr_item'
    
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'services' not described in 'name_table'
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'cluster_scope_lock' not described in 'name_table'
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'rc_dests' not described in 'name_table'
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'snd_nxt' not described in 'name_table'
    
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'kref' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'net' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'service_list' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'conid' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'inactive' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'lock' not described in 'tipc_subscription'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 56077b56cd3f ("tipc: do not update mtu if msg_max is too small in mtu negotiation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02b20e0bc0c2628539e9e518dc342787c3332de2
Author: Dong Chenchen <dongchenchen2@huawei.com>
Date:   Thu May 11 20:54:40 2023 +0800

    net: nsh: Use correct mac_offset to unwind gso skb in nsh_gso_segment()
    
    [ Upstream commit c83b49383b595be50647f0c764a48c78b5f3c4f8 ]
    
    As the call trace shows, skb_panic was caused by wrong skb->mac_header
    in nsh_gso_segment():
    
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI
    CPU: 3 PID: 2737 Comm: syz Not tainted 6.3.0-next-20230505 #1
    RIP: 0010:skb_panic+0xda/0xe0
    call Trace:
     skb_push+0x91/0xa0
     nsh_gso_segment+0x4f3/0x570
     skb_mac_gso_segment+0x19e/0x270
     __skb_gso_segment+0x1e8/0x3c0
     validate_xmit_skb+0x452/0x890
     validate_xmit_skb_list+0x99/0xd0
     sch_direct_xmit+0x294/0x7c0
     __dev_queue_xmit+0x16f0/0x1d70
     packet_xmit+0x185/0x210
     packet_snd+0xc15/0x1170
     packet_sendmsg+0x7b/0xa0
     sock_sendmsg+0x14f/0x160
    
    The root cause is:
    nsh_gso_segment() use skb->network_header - nhoff to reset mac_header
    in skb_gso_error_unwind() if inner-layer protocol gso fails.
    However, skb->network_header may be reset by inner-layer protocol
    gso function e.g. mpls_gso_segment. skb->mac_header reset by the
    inaccurate network_header will be larger than skb headroom.
    
    nsh_gso_segment
        nhoff = skb->network_header - skb->mac_header;
        __skb_pull(skb,nsh_len)
        skb_mac_gso_segment
            mpls_gso_segment
                skb_reset_network_header(skb);//skb->network_header+=nsh_len
                return -EINVAL;
        skb_gso_error_unwind
            skb_push(skb, nsh_len);
            skb->mac_header = skb->network_header - nhoff;
            // skb->mac_header > skb->headroom, cause skb_push panic
    
    Use correct mac_offset to restore mac_header and get rid of nhoff.
    
    Fixes: c411ed854584 ("nsh: add GSO support")
    Reported-by: syzbot+632b5d9964208bfef8c0@syzkaller.appspotmail.com
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Dong Chenchen <dongchenchen2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01cdda0d27d7c6587e51739a0d6f80d1535b2e4e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Apr 17 23:04:11 2023 +0200

    drm/exynos: fix g2d_open/close helper function definitions
    
    [ Upstream commit 2ef0785b30bd6549ddbc124979f1b6596e065ae2 ]
    
    The empty stub functions are defined as global functions, which
    causes a warning because of missing prototypes:
    
    drivers/gpu/drm/exynos/exynos_drm_g2d.h:37:5: error: no previous prototype for 'g2d_open'
    drivers/gpu/drm/exynos/exynos_drm_g2d.h:42:5: error: no previous prototype for 'g2d_close'
    
    Mark them as 'static inline' to avoid the warning and to make
    them behave as intended.
    
    Fixes: eb4d9796fa34 ("drm/exynos: g2d: Convert to driver component API")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce97bb60a6e40b365a8c188b4345fbadd5d03958
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Sun May 14 15:51:48 2023 -0400

    SUNRPC: Fix trace_svc_register() call site
    
    [ Upstream commit 07a27305938559fb35f7a46fb90a5e37728bdee6 ]
    
    The trace event recorded incorrect values for the registered family,
    protocol, and port because the arguments are in the wrong order.
    
    Fixes: b4af59328c25 ("SUNRPC: Trace server-side rpcbind registration events")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9982db735a8495eee14267cf193c806b957e942
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Wed Mar 8 12:55:14 2023 +0000

    media: netup_unidvb: fix use-after-free at del_timer()
    
    [ Upstream commit 0f5bb36bf9b39a2a96e730bf4455095b50713f63 ]
    
    When Universal DVB card is detaching, netup_unidvb_dma_fini()
    uses del_timer() to stop dma->timeout timer. But when timer
    handler netup_unidvb_dma_timeout() is running, del_timer()
    could not stop it. As a result, the use-after-free bug could
    happen. The process is shown below:
    
        (cleanup routine)          |        (timer routine)
                                   | mod_timer(&dev->tx_sim_timer, ..)
    netup_unidvb_finidev()         | (wait a time)
      netup_unidvb_dma_fini()      | netup_unidvb_dma_timeout()
        del_timer(&dma->timeout);  |
                                   |   ndev->pci_dev->dev //USE
    
    Fix by changing del_timer() to del_timer_sync().
    
    Link: https://lore.kernel.org/linux-media/20230308125514.4208-1-duoming@zju.edu.cn
    Fixes: 52b1eaf4c59a ("[media] netup_unidvb: NetUP Universal DVB-S/S2/T/T2/C PCI-E card driver")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cefa42152430bc8896de8c1ae85964b8bb82fdf
Author: Jie Wang <wangjie125@huawei.com>
Date:   Fri May 12 18:00:13 2023 +0800

    net: hns3: fix reset delay time to avoid configuration timeout
    
    [ Upstream commit 814d0c786068e858d889ada3153bff82f64223ad ]
    
    Currently the hns3 vf function reset delays 5000ms before vf rebuild
    process. In product applications, this delay is too long for application
    configurations and causes configuration timeout.
    
    According to the tests, 500ms delay is enough for reset process except PF
    FLR. So this patch modifies delay to 500ms in these scenarios.
    
    Fixes: 6988eb2a9b77 ("net: hns3: Add support to reset the enet/ring mgmt layer")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Hao Lan <lanhao@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aba74ad99870d8b862bc636c17bdf85b72979e37
Author: Jijie Shao <shaojijie@huawei.com>
Date:   Fri May 12 18:00:12 2023 +0800

    net: hns3: fix sending pfc frames after reset issue
    
    [ Upstream commit f14db07064727dd3bc0906c77a6d2759c1bbb395 ]
    
    To prevent the system from abnormally sending PFC frames after an
    abnormal reset. The hns3 driver notifies the firmware to disable pfc
    before reset.
    
    Fixes: 35d93a30040c ("net: hns3: adjust the process of PF reset")
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Signed-off-by: Hao Lan <lanhao@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1f800be74c188fdad978f8c3353769defcb7760
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu May 11 19:22:11 2023 -0400

    erspan: get the proto with the md version for collect_md
    
    [ Upstream commit d80fc101d2eb9b3188c228d61223890aeea480a4 ]
    
    In commit 20704bd1633d ("erspan: build the header with the right proto
    according to erspan_ver"), it gets the proto with t->parms.erspan_ver,
    but t->parms.erspan_ver is not used by collect_md branch, and instead
    it should get the proto with md->version for collect_md.
    
    Thanks to Kevin for pointing this out.
    
    Fixes: 20704bd1633d ("erspan: build the header with the right proto according to erspan_ver")
    Fixes: 94d7d8f29287 ("ip6_gre: add erspan v2 support")
    Reported-by: Kevin Traynor <ktraynor@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: William Tu <u9012063@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 153017561d2804cfae87cc9aa377aa84dd906ae1
Author: Ke Zhang <m202171830@hust.edu.cn>
Date:   Fri Apr 28 11:16:36 2023 +0800

    serial: arc_uart: fix of_iomap leak in `arc_serial_probe`
    
    [ Upstream commit 8ab5fc55d7f65d58a3c3aeadf11bdf60267cd2bd ]
    
    Smatch reports:
    
    drivers/tty/serial/arc_uart.c:631 arc_serial_probe() warn:
    'port->membase' from of_iomap() not released on lines: 631.
    
    In arc_serial_probe(), if uart_add_one_port() fails,
    port->membase is not released, which would cause a resource leak.
    
    To fix this, I replace of_iomap with devm_platform_ioremap_resource.
    
    Fixes: 8dbe1d5e09a7 ("serial/arc: inline the probe helper")
    Signed-off-by: Ke Zhang <m202171830@hust.edu.cn>
    Reviewed-by: Dongliang Mu <dzm91@hust.edu.cn>
    Link: https://lore.kernel.org/r/20230428031636.44642-1-m202171830@hust.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7fd68abbba3409b1c365fe04e7b2c37298954a1
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 11 11:47:49 2023 +0000

    tcp: fix possible sk_priority leak in tcp_v4_send_reset()
    
    [ Upstream commit 1e306ec49a1f206fd2cc89a42fac6e6f592a8cc1 ]
    
    When tcp_v4_send_reset() is called with @sk == NULL,
    we do not change ctl_sk->sk_priority, which could have been
    set from a prior invocation.
    
    Change tcp_v4_send_reset() to set sk_priority and sk_mark
    fields before calling ip_send_unicast_reply().
    
    This means tcp_v4_send_reset() and tcp_v4_send_ack()
    no longer have to clear ctl_sk->sk_mark after
    their call to ip_send_unicast_reply().
    
    Fixes: f6c0f5d209fa ("tcp: honor SO_PRIORITY in TIME_WAIT state")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Antoine Tenart <atenart@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 788791990d74d3d2140c0f72df0b9218d3984dd8
Author: sewookseo <sewookseo@google.com>
Date:   Thu Jul 7 10:01:39 2022 +0000

    net: Find dst with sk's xfrm policy not ctl_sk
    
    [ Upstream commit e22aa14866684f77b4f6b6cae98539e520ddb731 ]
    
    If we set XFRM security policy by calling setsockopt with option
    IPV6_XFRM_POLICY, the policy will be stored in 'sock_policy' in 'sock'
    struct. However tcp_v6_send_response doesn't look up dst_entry with the
    actual socket but looks up with tcp control socket. This may cause a
    problem that a RST packet is sent without ESP encryption & peer's TCP
    socket can't receive it.
    This patch will make the function look up dest_entry with actual socket,
    if the socket has XFRM policy(sock_policy), so that the TCP response
    packet via this function can be encrypted, & aligned on the encrypted
    TCP socket.
    
    Tested: We encountered this problem when a TCP socket which is encrypted
    in ESP transport mode encryption, receives challenge ACK at SYN_SENT
    state. After receiving challenge ACK, TCP needs to send RST to
    establish the socket at next SYN try. But the RST was not encrypted &
    peer TCP socket still remains on ESTABLISHED state.
    So we verified this with test step as below.
    [Test step]
    1. Making a TCP state mismatch between client(IDLE) & server(ESTABLISHED).
    2. Client tries a new connection on the same TCP ports(src & dst).
    3. Server will return challenge ACK instead of SYN,ACK.
    4. Client will send RST to server to clear the SOCKET.
    5. Client will retransmit SYN to server on the same TCP ports.
    [Expected result]
    The TCP connection should be established.
    
    Cc: Maciej Żenczykowski <maze@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Sehee Lee <seheele@google.com>
    Signed-off-by: Sewook Seo <sewookseo@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 1e306ec49a1f ("tcp: fix possible sk_priority leak in tcp_v4_send_reset()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9ef8b2589885851c769982ef34cb01348fb07bb
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 24 12:24:57 2022 -0800

    ipv4/tcp: do not use per netns ctl sockets
    
    [ Upstream commit 37ba017dcc3b1123206808979834655ddcf93251 ]
    
    TCP ipv4 uses per-cpu/per-netns ctl sockets in order to send
    RST and some ACK packets (on behalf of TIMEWAIT sockets).
    
    This adds memory and cpu costs, which do not seem needed.
    Now typical servers have 256 or more cores, this adds considerable
    tax to netns users.
    
    tcp sockets are used from BH context, are not receiving packets,
    and do not store any persistent state but the 'struct net' pointer
    in order to be able to use IPv4 output functions.
    
    Note that I attempted a related change in the past, that had
    to be hot-fixed in commit bdbbb8527b6f ("ipv4: tcp: get rid of ugly unicast_sock")
    
    This patch could very well surface old bugs, on layers not
    taking care of sk->sk_kern_sock properly.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 1e306ec49a1f ("tcp: fix possible sk_priority leak in tcp_v4_send_reset()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 171669917762e3a10c698b0d15b64c20ac11003c
Author: Zhuang Shengen <zhuangshengen@huawei.com>
Date:   Thu May 11 19:34:30 2023 +0800

    vsock: avoid to close connected socket after the timeout
    
    [ Upstream commit 6d4486efe9c69626cab423456169e250a5cd3af5 ]
    
    When client and server establish a connection through vsock,
    the client send a request to the server to initiate the connection,
    then start a timer to wait for the server's response. When the server's
    RESPONSE message arrives, the timer also times out and exits. The
    server's RESPONSE message is processed first, and the connection is
    established. However, the client's timer also times out, the original
    processing logic of the client is to directly set the state of this vsock
    to CLOSE and return ETIMEDOUT. It will not notify the server when the port
    is released, causing the server port remain.
    when client's vsock_connect timeout，it should check sk state is
    ESTABLISHED or not. if sk state is ESTABLISHED, it means the connection
    is established, the client should not set the sk state to CLOSE
    
    Note: I encountered this issue on kernel-4.18, which can be fixed by
    this patch. Then I checked the latest code in the community
    and found similar issue.
    
    Fixes: d021c344051a ("VSOCK: Introduce VM Sockets")
    Signed-off-by: Zhuang Shengen <zhuangshengen@huawei.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1cf6bd8833b12a7a3dc9f77a61ad901a6c3a8fb
Author: Ryan C. Underwood <nemesis@icequake.net>
Date:   Thu May 11 12:32:21 2023 -0500

    ALSA: hda/realtek: Apply HP B&O top speaker profile to Pavilion 15
    
    [ Upstream commit 92553ee03166ef8fa978e7683f9f4af30c9c4e6b ]
    
    The Pavilion 15 line has B&O top speakers similar to the x360 and
    applying the same profile produces good sound.  Without this, the
    sound would be tinny and underpowered without either applying
    model=alc295-hp-x360 or booting another OS first.
    
    Signed-off-by: Ryan Underwood <nemesis@icequake.net>
    Fixes: 563785edfcef ("ALSA: hda/realtek - Add quirk entry for HP Pavilion 15")
    Link: https://lore.kernel.org/r/ZF0mpcMz3ezP9KQw@icequake.net
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13c5fa1248bf06e95a25907c1be83948b8c44c50
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Tue May 9 12:07:11 2023 +0300

    ALSA: firewire-digi00x: prevent potential use after free
    
    [ Upstream commit c0e72058d5e21982e61a29de6b098f7c1f0db498 ]
    
    This code was supposed to return an error code if init_stream()
    failed, but it instead freed dg00x->rx_stream and returned success.
    This potentially leads to a use after free.
    
    Fixes: 9a08067ec318 ("ALSA: firewire-digi00x: support AMDTP domain")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/c224cbd5-d9e2-4cd4-9bcf-2138eb1d35c6@kili.mountain
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fb537895d29559f5586d45090d97a21cb5fcdd7
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Wed May 10 18:21:39 2023 +0530

    net: phy: dp83867: add w/a for packet errors seen with short cables
    
    [ Upstream commit 0b01db274028f5acd207332686ffc92ac77491ac ]
    
    Introduce the W/A for packet errors seen with short cables (<1m) between
    two DP83867 PHYs.
    
    The W/A recommended by DM requires FFE Equalizer Configuration tuning by
    writing value 0x0E81 to DSP_FFE_CFG register (0x012C), surrounded by hard
    and soft resets as follows:
    
    write_reg(0x001F, 0x8000); //hard reset
    write_reg(DSP_FFE_CFG, 0x0E81);
    write_reg(0x001F, 0x4000); //soft reset
    
    Since  DP83867 PHY DM says "Changing this register to 0x0E81, will not
    affect Long Cable performance.", enable the W/A by default.
    
    Fixes: 2a10154abcb7 ("net: phy: dp83867: Add TI dp83867 phy")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Siddharth Vadapalli <s-vadapalli@ti.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83996d317b1deddc85006376082e8886f55aa709
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed May 10 22:00:20 2023 +0200

    net: fec: Better handle pm_runtime_get() failing in .remove()
    
    [ Upstream commit f816b9829b19394d318e01953aa3b2721bca040d ]
    
    In the (unlikely) event that pm_runtime_get() (disguised as
    pm_runtime_resume_and_get()) fails, the remove callback returned an
    error early. The problem with this is that the driver core ignores the
    error value and continues removing the device. This results in a
    resource leak. Worse the devm allocated resources are freed and so if a
    callback of the driver is called later the register mapping is already
    gone which probably results in a crash.
    
    Fixes: a31eda65ba21 ("net: fec: fix clock count mis-match")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20230510200020.1534610-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f57715f8ef6afd75e0d10e70bc970489907e548
Author: Tobias Brunner <tobias@strongswan.org>
Date:   Tue May 9 11:00:06 2023 +0200

    af_key: Reject optional tunnel/BEET mode templates in outbound policies
    
    [ Upstream commit cf3128a7aca55b2eefb68281d44749c683bdc96f ]
    
    xfrm_state_find() uses `encap_family` of the current template with
    the passed local and remote addresses to find a matching state.
    If an optional tunnel or BEET mode template is skipped in a mixed-family
    scenario, there could be a mismatch causing an out-of-bounds read as
    the addresses were not replaced to match the family of the next template.
    
    While there are theoretical use cases for optional templates in outbound
    policies, the only practical one is to skip IPComp states in inbound
    policies if uncompressed packets are received that are handled by an
    implicitly created IPIP state instead.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Tobias Brunner <tobias@strongswan.org>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5cb28a90c8cf230e755ec73f5ce53d17e6d2152
Author: Wyes Karny <wyes.karny@amd.com>
Date:   Thu May 4 06:25:44 2023 +0000

    cpupower: Make TSC read per CPU for Mperf monitor
    
    [ Upstream commit c2adb1877b76fc81ae041e1db1a6ed2078c6746b ]
    
    System-wide TSC read could cause a drift in C0 percentage calculation.
    Because if first TSC is read and then one by one mperf is read for all
    cpus, this introduces drift between mperf reading of later CPUs and TSC
    reading.  To lower this drift read TSC per CPU and also just after mperf
    read.  This technique improves C0 percentage calculation in Mperf monitor.
    
    Before fix: (System 100% busy)
    
                  | Mperf              || RAPL        || Idle_Stats
     PKG|CORE| CPU| C0   | Cx   | Freq  || pack | core  || POLL | C1   | C2
       0|   0|   0| 87.15| 12.85|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   0| 256| 84.62| 15.38|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   1|   1| 87.15| 12.85|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   1| 257| 84.08| 15.92|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   2|   2| 86.61| 13.39|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   2| 258| 83.26| 16.74|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   3|   3| 86.61| 13.39|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   3| 259| 83.60| 16.40|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   4|   4| 86.33| 13.67|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   4| 260| 83.33| 16.67|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   5|   5| 86.06| 13.94|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   5| 261| 83.05| 16.95|  2695||168659003|3970468||  0.00|  0.00| 0.00
       0|   6|   6| 85.51| 14.49|  2695||168659003|3970468||  0.00|  0.00| 0.00
    
    After fix: (System 100% busy)
    
                 | Mperf              || RAPL        || Idle_Stats
     PKG|CORE| CPU| C0   | Cx   | Freq  || pack | core  || POLL | C1   | C2
       0|   0|   0| 98.03|  1.97|  2415||163295480|3811189||  0.00|  0.00| 0.00
       0|   0| 256| 98.50|  1.50|  2394||163295480|3811189||  0.00|  0.00| 0.00
       0|   1|   1| 99.99|  0.01|  2401||163295480|3811189||  0.00|  0.00| 0.00
       0|   1| 257| 99.99|  0.01|  2375||163295480|3811189||  0.00|  0.00| 0.00
       0|   2|   2| 99.99|  0.01|  2401||163295480|3811189||  0.00|  0.00| 0.00
       0|   2| 258|100.00|  0.00|  2401||163295480|3811189||  0.00|  0.00| 0.00
       0|   3|   3|100.00|  0.00|  2401||163295480|3811189||  0.00|  0.00| 0.00
       0|   3| 259| 99.99|  0.01|  2435||163295480|3811189||  0.00|  0.00| 0.00
       0|   4|   4|100.00|  0.00|  2401||163295480|3811189||  0.00|  0.00| 0.00
       0|   4| 260|100.00|  0.00|  2435||163295480|3811189||  0.00|  0.00| 0.00
       0|   5|   5| 99.99|  0.01|  2401||163295480|3811189||  0.00|  0.00| 0.00
       0|   5| 261|100.00|  0.00|  2435||163295480|3811189||  0.00|  0.00| 0.00
       0|   6|   6|100.00|  0.00|  2401||163295480|3811189||  0.00|  0.00| 0.00
       0|   6| 262|100.00|  0.00|  2435||163295480|3811189||  0.00|  0.00| 0.00
    
    Cc: Thomas Renninger <trenn@suse.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    
    Fixes: 7fe2f6399a84 ("cpupowerutils - cpufrequtils extended with quite some features")
    Signed-off-by: Wyes Karny <wyes.karny@amd.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc30fed07ddf9062ccdb19df40bcb2413975a47c
Author: Marijn Suijten <marijn.suijten@somainline.org>
Date:   Thu Apr 27 00:37:22 2023 +0200

    drm/msm/dpu: Remove duplicate register defines from INTF
    
    [ Upstream commit 202c044203ac5860e3025169105368d99f9bc6a2 ]
    
    The INTF_FRAME_LINE_COUNT_EN, INTF_FRAME_COUNT and INTF_LINE_COUNT
    registers are already defined higher up, in the right place when sorted
    numerically.
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Marijn Suijten <marijn.suijten@somainline.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/534231/
    Link: https://lore.kernel.org/r/20230411-dpu-intf-te-v4-8-27ce1a5ab5c6@somainline.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eaf9394ed79c8913322333c627ff63dc56925eb6
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Fri Apr 21 15:56:57 2023 +0100

    drm/msm/dp: unregister audio driver during unbind
    
    [ Upstream commit 85c636284cb63b7740b4ae98881ace92158068d3 ]
    
    while binding the code always registers a audio driver, however there
    is no corresponding unregistration done in unbind. This leads to multiple
    redundant audio platform devices if dp_display_bind and dp_display_unbind
    happens multiple times during startup. On X13s platform this resulted in
    6 to 9 audio codec device instead of just 3 codec devices for 3 dp ports.
    
    Fix this by unregistering codecs on unbind.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Fixes: d13e36d7d222 ("drm/msm/dp: add audio support for Display Port on MSM")
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/533324/
    Link: https://lore.kernel.org/r/20230421145657.12186-1-srinivas.kandagatla@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5449195f86ec02433a9ef8abe01be11d228fca1
Author: Martin Willi <martin@strongswan.org>
Date:   Tue Apr 25 09:46:18 2023 +0200

    Revert "Fix XFRM-I support for nested ESP tunnels"
    
    [ Upstream commit 5fc46f94219d1d103ffb5f0832be9da674d85a73 ]
    
    This reverts commit b0355dbbf13c0052931dd14c38c789efed64d3de.
    
    The reverted commit clears the secpath on packets received via xfrm interfaces
    to support nested IPsec tunnels. This breaks Netfilter policy matching using
    xt_policy in the FORWARD chain, as the secpath is missing during forwarding.
    Additionally, Benedict Wong reports that it breaks Transport-in-Tunnel mode.
    
    Fix this regression by reverting the commit until we have a better approach
    for nested IPsec tunnels.
    
    Fixes: b0355dbbf13c ("Fix XFRM-I support for nested ESP tunnels")
    Link: https://lore.kernel.org/netdev/20230412085615.124791-1-martin@strongswan.org/
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 295e07a76bf30d765303816c7c8a3ff8a0ce5348
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Apr 4 15:12:16 2023 +0200

    xfrm: don't check the default policy if the policy allows the packet
    
    [ Upstream commit 430cac487400494c19a8b85299e979bb07b4671f ]
    
    The current code doesn't let a simple "allow" policy counteract a
    default policy blocking all incoming packets:
    
        ip x p setdefault in block
        ip x p a src 192.168.2.1/32 dst 192.168.2.2/32 dir in action allow
    
    At this stage, we have an allow policy (with or without transforms)
    for this packet. It doesn't matter what the default policy says, since
    the policy we looked up lets the packet through. The case of a
    blocking policy is already handled separately, so we can remove this
    check.
    
    Fixes: 2d151d39073a ("xfrm: Add possibility to set the default to block if we have no policy")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84fdaaf0d76e713d6d2e22f73358667975cfa9fa
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu May 4 12:04:18 2023 +0100

    btrfs: fix space cache inconsistency after error loading it from disk
    
    [ Upstream commit 0004ff15ea26015a0a3a6182dca3b9d1df32e2b7 ]
    
    When loading a free space cache from disk, at __load_free_space_cache(),
    if we fail to insert a bitmap entry, we still increment the number of
    total bitmaps in the btrfs_free_space_ctl structure, which is incorrect
    since we failed to add the bitmap entry. On error we then empty the
    cache by calling __btrfs_remove_free_space_cache(), which will result
    in getting the total bitmaps counter set to 1.
    
    A failure to load a free space cache is not critical, so if a failure
    happens we just rebuild the cache by scanning the extent tree, which
    happens at block-group.c:caching_thread(). Yet the failure will result
    in having the total bitmaps of the btrfs_free_space_ctl always bigger
    by 1 then the number of bitmap entries we have. So fix this by having
    the total bitmaps counter be incremented only if we successfully added
    the bitmap entry.
    
    Fixes: a67509c30079 ("Btrfs: add a io_ctl struct and helpers for dealing with the space cache")
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a842fb6038e55c3602f23f5135c753da863b038e
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Thu Nov 26 15:10:38 2020 +0200

    btrfs: replace calls to btrfs_find_free_ino with btrfs_find_free_objectid
    
    [ Upstream commit abadc1fcd72e887a8f875dabe4a07aa8c28ac8af ]
    
    The former is going away as part of the inode map removal so switch
    callers to btrfs_find_free_objectid. No functional changes since with
    INODE_MAP disabled (default) find_free_objectid was called anyway.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Stable-dep-of: 0004ff15ea26 ("btrfs: fix space cache inconsistency after error loading it from disk")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c69a9d05824521e2e3a615283e8158772a1a5f7
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Thu Nov 26 15:10:37 2020 +0200

    btrfs: move btrfs_find_highest_objectid/btrfs_find_free_objectid to disk-io.c
    
    [ Upstream commit ec7d6dfd73b2de1c6bc36f832542061b0ca0e0ff ]
    
    Those functions are going to be used even after inode cache is removed
    so moved them to a more appropriate place.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Stable-dep-of: 0004ff15ea26 ("btrfs: fix space cache inconsistency after error loading it from disk")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a1a72a8cfdad6911a7167405b63545ad781fbe2
Author: Qiang Ning <qning0106@126.com>
Date:   Thu Mar 30 10:43:53 2023 +0800

    mfd: dln2: Fix memory leak in dln2_probe()
    
    [ Upstream commit 96da8f148396329ba769246cb8ceaa35f1ddfc48 ]
    
    When dln2_setup_rx_urbs() in dln2_probe() fails, error out_free forgets
    to call usb_put_dev() to decrease the refcount of dln2->usb_dev.
    
    Fix this by adding usb_put_dev() in the error handling code of
    dln2_probe().
    
    Signed-off-by: Qiang Ning <qning0106@126.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Link: https://lore.kernel.org/r/20230330024353.4503-1-qning0106@126.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d939e367b648b54714ab3e9ab952a4032870cf5
Author: Alain Volmat <avolmat@me.com>
Date:   Fri Feb 10 23:43:08 2023 +0100

    phy: st: miphy28lp: use _poll_timeout functions for waits
    
    [ Upstream commit e3be4dd2c8d8aabfd2c3127d0e2e5754d3ae82d6 ]
    
    This commit introduces _poll_timeout functions usage instead of
    wait loops waiting for a status bit.
    
    Signed-off-by: Alain Volmat <avolmat@me.com>
    Reviewed-by: Patrice Chotard <patrice.chotard@foss.st.com>
    Link: https://lore.kernel.org/r/20230210224309.98452-1-avolmat@me.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b37bb0d929006f12bdba25ac181036d783ce009
Author: Vicki Pfau <vi@endrift.com>
Date:   Thu Apr 13 23:57:42 2023 -0700

    Input: xpad - add constants for GIP interface numbers
    
    [ Upstream commit f9b2e603c6216824e34dc9a67205d98ccc9a41ca ]
    
    Wired GIP devices present multiple interfaces with the same USB identification
    other than the interface number. This adds constants for differentiating two of
    them and uses them where appropriate
    
    Signed-off-by: Vicki Pfau <vi@endrift.com>
    Link: https://lore.kernel.org/r/20230411031650.960322-2-vi@endrift.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94ec1a44e843492438226345b8529c651a86ba99
Author: Tomas Krcka <krckatom@amazon.de>
Date:   Wed Mar 29 12:34:19 2023 +0000

    iommu/arm-smmu-v3: Acknowledge pri/event queue overflow if any
    
    [ Upstream commit 67ea0b7ce41844eae7c10bb04dfe66a23318c224 ]
    
    When an overflow occurs in the PRI queue, the SMMU toggles the overflow
    flag in the PROD register. To exit the overflow condition, the PRI thread
    is supposed to acknowledge it by toggling this flag in the CONS register.
    Unacknowledged overflow causes the queue to stop adding anything new.
    
    Currently, the priq thread always writes the CONS register back to the
    SMMU after clearing the queue.
    
    The writeback is not necessary if the OVFLG in the PROD register has not
    been changed, no overflow has occured.
    
    This commit checks the difference of the overflow flag between CONS and
    PROD register. If it's different, toggles the OVACKFLG flag in the CONS
    register and write it to the SMMU.
    
    The situation is similar for the event queue.
    The acknowledge register is also toggled after clearing the event
    queue but never propagated to the hardware. This would only be done the
    next time when executing evtq thread.
    
    Unacknowledged event queue overflow doesn't affect the event
    queue, because the SMMU still adds elements to that queue when the
    overflow condition is active.
    But it feel nicer to keep SMMU in sync when possible, so use the same
    way here as well.
    
    Signed-off-by: Tomas Krcka <krckatom@amazon.de>
    Link: https://lore.kernel.org/r/20230329123420.34641-1-tomas.krcka@gmail.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cae5f8f4f7a8254be2081332035c11a389f2fd21
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Feb 27 09:59:10 2023 +0100

    clk: tegra20: fix gcc-7 constant overflow warning
    
    [ Upstream commit b4a2adbf3586efa12fe78b9dec047423e01f3010 ]
    
    Older gcc versions get confused by comparing a u32 value to a negative
    constant in a switch()/case block:
    
    drivers/clk/tegra/clk-tegra20.c: In function 'tegra20_clk_measure_input_freq':
    drivers/clk/tegra/clk-tegra20.c:581:2: error: case label does not reduce to an integer constant
      case OSC_CTRL_OSC_FREQ_12MHZ:
      ^~~~
    drivers/clk/tegra/clk-tegra20.c:593:2: error: case label does not reduce to an integer constant
      case OSC_CTRL_OSC_FREQ_26MHZ:
    
    Make the constants unsigned instead.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20230227085914.2560984-1-arnd@kernel.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c472e68bea0a8500fe30a101afa3c13c9fbfe67
Author: Manivannan Sadhasivam <mani@kernel.org>
Date:   Mon Mar 27 13:30:29 2023 +0530

    iommu/arm-smmu-qcom: Limit the SMR groups to 128
    
    [ Upstream commit 12261134732689b7e30c59db9978f81230965181 ]
    
    Some platforms support more than 128 stream matching groups than what is
    defined by the ARM SMMU architecture specification. But due to some unknown
    reasons, those additional groups don't exhibit the same behavior as the
    architecture supported ones.
    
    For instance, the additional groups will not detect the quirky behavior of
    some firmware versions intercepting writes to S2CR register, thus skipping
    the quirk implemented in the driver and causing boot crash.
    
    So let's limit the groups to 128 for now until the issue with those groups
    are fixed and issue a notice to users in that case.
    
    Reviewed-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20230327080029.11584-1-manivannan.sadhasivam@linaro.org
    [will: Reworded the comment slightly]
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 214ae2c1a9ce28435802d010d6b27bad1eeddc97
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Tue Mar 21 17:47:03 2023 -0600

    RDMA/core: Fix multiple -Warray-bounds warnings
    
    [ Upstream commit aa4d540b4150052ae3b36d286b9c833a961ce291 ]
    
    GCC-13 (and Clang)[1] does not like to access a partially allocated
    object, since it cannot reason about it for bounds checking.
    
    In this case 140 bytes are allocated for an object of type struct
    ib_umad_packet:
    
            packet = kzalloc(sizeof(*packet) + IB_MGMT_RMPP_HDR, GFP_KERNEL);
    
    However, notice that sizeof(*packet) is only 104 bytes:
    
    struct ib_umad_packet {
            struct ib_mad_send_buf *   msg;                  /*     0     8 */
            struct ib_mad_recv_wc *    recv_wc;              /*     8     8 */
            struct list_head           list;                 /*    16    16 */
            int                        length;               /*    32     4 */
    
            /* XXX 4 bytes hole, try to pack */
    
            struct ib_user_mad         mad __attribute__((__aligned__(8))); /*    40    64 */
    
            /* size: 104, cachelines: 2, members: 5 */
            /* sum members: 100, holes: 1, sum holes: 4 */
            /* forced alignments: 1, forced holes: 1, sum forced holes: 4 */
            /* last cacheline: 40 bytes */
    } __attribute__((__aligned__(8)));
    
    and 36 bytes extra bytes are allocated for a flexible-array member in
    struct ib_user_mad:
    
    include/rdma/ib_mad.h:
    120 enum {
    ...
    123         IB_MGMT_RMPP_HDR = 36,
    ... }
    
    struct ib_user_mad {
            struct ib_user_mad_hdr     hdr;                  /*     0    64 */
            /* --- cacheline 1 boundary (64 bytes) --- */
            __u64                      data[] __attribute__((__aligned__(8))); /*    64     0 */
    
            /* size: 64, cachelines: 1, members: 2 */
            /* forced alignments: 1 */
    } __attribute__((__aligned__(8)));
    
    So we have sizeof(*packet) + IB_MGMT_RMPP_HDR == 140 bytes
    
    Then the address of the flex-array member (for which only 36 bytes were
    allocated) is casted and copied into a pointer to struct ib_rmpp_mad,
    which, in turn, is of size 256 bytes:
    
            rmpp_mad = (struct ib_rmpp_mad *) packet->mad.data;
    
    struct ib_rmpp_mad {
            struct ib_mad_hdr          mad_hdr;              /*     0    24 */
            struct ib_rmpp_hdr         rmpp_hdr;             /*    24    12 */
            u8                         data[220];            /*    36   220 */
    
            /* size: 256, cachelines: 4, members: 3 */
    };
    
    The thing is that those 36 bytes allocated for flex-array member data
    in struct ib_user_mad onlly account for the size of both struct ib_mad_hdr
    and struct ib_rmpp_hdr, but nothing is left for array u8 data[220].
    So, the compiler is legitimately complaining about accessing an object
    for which not enough memory was allocated.
    
    Apparently, the only members of struct ib_rmpp_mad that are relevant
    (that are actually being used) in function ib_umad_write() are mad_hdr
    and rmpp_hdr. So, instead of casting packet->mad.data to
    (struct ib_rmpp_mad *) create a new structure
    
    struct ib_rmpp_mad_hdr {
            struct ib_mad_hdr       mad_hdr;
            struct ib_rmpp_hdr      rmpp_hdr;
    } __packed;
    
    and cast packet->mad.data to (struct ib_rmpp_mad_hdr *).
    
    Notice that
    
            IB_MGMT_RMPP_HDR == sizeof(struct ib_rmpp_mad_hdr) == 36 bytes
    
    Refactor the rest of the code, accordingly.
    
    Fix the following warnings seen under GCC-13 and -Warray-bounds:
    drivers/infiniband/core/user_mad.c:564:50: warning: array subscript ‘struct ib_rmpp_mad[0]’ is partly outside array bounds of ‘unsigned char[140]’ [-Warray-bounds=]
    drivers/infiniband/core/user_mad.c:566:42: warning: array subscript ‘struct ib_rmpp_mad[0]’ is partly outside array bounds of ‘unsigned char[140]’ [-Warray-bounds=]
    drivers/infiniband/core/user_mad.c:618:25: warning: array subscript ‘struct ib_rmpp_mad[0]’ is partly outside array bounds of ‘unsigned char[140]’ [-Warray-bounds=]
    drivers/infiniband/core/user_mad.c:622:44: warning: array subscript ‘struct ib_rmpp_mad[0]’ is partly outside array bounds of ‘unsigned char[140]’ [-Warray-bounds=]
    
    Link: https://github.com/KSPP/linux/issues/273
    Link: https://godbolt.org/z/oYWaGM4Yb [1]
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Link: https://lore.kernel.org/r/ZBpB91qQcB10m3Fw@work
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d9ca5f62f2ba160ff9c9be4adf401c46c04edef
Author: Hao Zeng <zenghao@kylinos.cn>
Date:   Wed Apr 26 09:05:27 2023 +0800

    recordmcount: Fix memory leaks in the uwrite function
    
    [ Upstream commit fa359d068574d29e7d2f0fdd0ebe4c6a12b5cfb9 ]
    
    Common realloc mistake: 'file_append' nulled but not freed upon failure
    
    Link: https://lkml.kernel.org/r/20230426010527.703093-1-zenghao@kylinos.cn
    
    Signed-off-by: Hao Zeng <zenghao@kylinos.cn>
    Suggested-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf3e2916017d1d158fba26236b2f791759a2e971
Author: Josh Poimboeuf <jpoimboe@kernel.org>
Date:   Wed Apr 12 10:24:07 2023 -0700

    sched: Fix KCSAN noinstr violation
    
    [ Upstream commit e0b081d17a9f4e5c0cbb0e5fbeb1abe3de0f7e4e ]
    
    With KCSAN enabled, end_of_stack() can get out-of-lined.  Force it
    inline.
    
    Fixes the following warnings:
    
      vmlinux.o: warning: objtool: check_stackleak_irqoff+0x2b: call to end_of_stack() leaves .noinstr.text section
    
    Signed-off-by: Josh Poimboeuf <jpoimboe@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/cc1b4d73d3a428a00d206242a68fdf99a934ca7b.1681320026.git.jpoimboe@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 158502f790767050bdef4cee5182fbebea56db49
Author: Rodríguez Barbarin, José Javier <JoseJavier.Rodriguez@duagon.com>
Date:   Tue Apr 11 10:33:28 2023 +0200

    mcb-pci: Reallocate memory region to avoid memory overlapping
    
    [ Upstream commit 9be24faadd085c284890c3afcec7a0184642315a ]
    
    mcb-pci requests a fixed-size memory region to parse the chameleon
    table, however, if the chameleon table is smaller that the allocated
    region, it could overlap with the IP Cores' memory regions.
    
    After parsing the chameleon table, drop/reallocate the memory region
    with the actual chameleon table size.
    
    Co-developed-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Signed-off-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Signed-off-by: Javier Rodriguez <josejavier.rodriguez@duagon.com>
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Link: https://lore.kernel.org/r/20230411083329.4506-3-jth@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c86a1305c1406f45ea780d06953c484ea1d9e6e
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Apr 18 13:14:06 2023 +0300

    serial: 8250: Reinit port->pm on port specific driver unbind
    
    [ Upstream commit 04e82793f068d2f0ffe62fcea03d007a8cdc16a7 ]
    
    When we unbind a serial port hardware specific 8250 driver, the generic
    serial8250 driver takes over the port. After that we see an oops about 10
    seconds later. This can produce the following at least on some TI SoCs:
    
    Unhandled fault: imprecise external abort (0x1406)
    Internal error: : 1406 [#1] SMP ARM
    
    Turns out that we may still have the serial port hardware specific driver
    port->pm in use, and serial8250_pm() tries to call it after the port
    specific driver is gone:
    
    serial8250_pm [8250_base] from uart_change_pm+0x54/0x8c [serial_base]
    uart_change_pm [serial_base] from uart_hangup+0x154/0x198 [serial_base]
    uart_hangup [serial_base] from __tty_hangup.part.0+0x328/0x37c
    __tty_hangup.part.0 from disassociate_ctty+0x154/0x20c
    disassociate_ctty from do_exit+0x744/0xaac
    do_exit from do_group_exit+0x40/0x8c
    do_group_exit from __wake_up_parent+0x0/0x1c
    
    Let's fix the issue by calling serial8250_set_defaults() in
    serial8250_unregister_port(). This will set the port back to using
    the serial8250 default functions, and sets the port->pm to point to
    serial8250_pm.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20230418101407.12403-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ed30db879940822e8a392d402760eff56df0d57
Author: Frank Wang <frank.wang@rock-chips.com>
Date:   Thu Mar 16 16:11:49 2023 +0800

    usb: typec: tcpm: fix multiple times discover svids error
    
    [ Upstream commit dac3b192107b978198e89ec0f77375738352e0c8 ]
    
    PD3.0 Spec 6.4.4.3.2 say that only Responder supports 12 or more SVIDs,
    the Discover SVIDs Command Shall be executed multiple times until a
    Discover SVIDs VDO is returned ending either with a SVID value of
    0x0000 in the last part of the last VDO or with a VDO containing two
    SVIDs with values of 0x0000.
    
    In the current implementation, if the last VDO does not find that the
    Discover SVIDs Command would be executed multiple times even if the
    Responder SVIDs are less than 12, and we found some odd dockers just
    meet this case. So fix it.
    
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Frank Wang <frank.wang@rock-chips.com>
    Link: https://lore.kernel.org/r/20230316081149.24519-1-frank.wang@rock-chips.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60fabcba7543ee3dbb9d688f9bb7524a00aa7359
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Thu Apr 13 11:17:43 2023 -0700

    HID: wacom: generic: Set battery quirk only when we see battery data
    
    [ Upstream commit bea407a427baa019758f29f4d31b26f008bb8cc6 ]
    
    Some devices will include battery status usages in the HID descriptor
    but we won't see that battery data for one reason or another. For example,
    AES sensors won't send battery data unless an AES pen is in proximity.
    If a user does not have an AES pen but instead only interacts with the
    AES touchscreen with their fingers then there is no need for us to create
    a battery object. Similarly, if a family of peripherals shares the same
    HID descriptor between wired-only and wireless-capable SKUs, users of the
    former may never see a battery event and will not want a power_supply
    object created.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217062
    Link: https://gitlab.gnome.org/GNOME/gnome-control-center/-/issues/2354
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Tested-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d234de1a924e61dde7a5290d9ead400bb16d5b7f
Author: Kevin Groeneveld <kgroeneveld@lenbrook.com>
Date:   Sat Mar 18 18:21:32 2023 -0400

    spi: spi-imx: fix MX51_ECSPI_* macros when cs > 3
    
    [ Upstream commit 87c614175bbf28d3fd076dc2d166bac759e41427 ]
    
    When using gpio based chip select the cs value can go outside the range
    0 – 3. The various MX51_ECSPI_* macros did not take this into consideration
    resulting in possible corruption of the configuration.
    
    For example for any cs value over 3 the SCLKPHA bits would not be set and
    other values in the register possibly corrupted.
    
    One way to fix this is to just mask the cs bits to 2 bits. This still
    allows all 4 native chip selects to work as well as gpio chip selects
    (which can use any of the 4 chip select configurations).
    
    Signed-off-by: Kevin Groeneveld <kgroeneveld@lenbrook.com>
    Link: https://lore.kernel.org/r/20230318222132.3373-1-kgroeneveld@lenbrook.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0898a1df72acb2bef7a7b670e5751c8bf3739b0f
Author: Bastien Nocera <hadess@hadess.net>
Date:   Thu Mar 2 14:01:17 2023 +0100

    HID: logitech-hidpp: Reconcile USB and Unifying serials
    
    [ Upstream commit 5b3691d15e04b6d5a32c915577b8dbc5cfb56382 ]
    
    Now that USB HID++ devices can gather a serial number that matches the
    one that would be gathered when connected through a Unifying receiver,
    remove the last difference by dropping the product ID as devices
    usually have different product IDs when connected through USB or
    Unifying.
    
    For example, on the serials on a G903 wired/wireless mouse:
    - Unifying before patch: 4067-e8-ce-cd-45
    - USB before patch: c086-e8-ce-cd-45
    - Unifying and USB after patch: e8-ce-cd-45
    
    Signed-off-by: Bastien Nocera <hadess@hadess.net>
    Link: https://lore.kernel.org/r/20230302130117.3975-2-hadess@hadess.net
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 958534d4368bc81c170f0508519342558831de8b
Author: Bastien Nocera <hadess@hadess.net>
Date:   Thu Mar 2 14:01:16 2023 +0100

    HID: logitech-hidpp: Don't use the USB serial for USB devices
    
    [ Upstream commit 7ad1fe0da0fa91bf920b79ab05ae97bfabecc4f4 ]
    
    For devices that support the 0x0003 feature (Device Information) version 4,
    set the serial based on the output of that feature, rather than relying
    on the usbhid code setting the USB serial.
    
    This should allow the serial when connected through USB to (nearly)
    match the one when connected through a unifying receiver.
    
    For example, on the serials on a G903 wired/wireless mouse:
    - Unifying: 4067-e8-ce-cd-45
    - USB before patch: 017C385C3837
    - USB after patch: c086-e8-ce-cd-45
    
    Signed-off-by: Bastien Nocera <hadess@hadess.net>
    Link: https://lore.kernel.org/r/20230302130117.3975-1-hadess@hadess.net
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb1313f37e7b267fcf0fe475b974be8de5f39945
Author: Philipp Hortmann <philipp.g.hortmann@gmail.com>
Date:   Thu Feb 23 07:47:21 2023 +0100

    staging: rtl8192e: Replace macro RTL_PCI_DEVICE with PCI_DEVICE
    
    [ Upstream commit fda2093860df4812d69052a8cf4997e53853a340 ]
    
    Replace macro RTL_PCI_DEVICE with PCI_DEVICE to get rid of rtl819xp_ops
    which is empty.
    
    Signed-off-by: Philipp Hortmann <philipp.g.hortmann@gmail.com>
    Link: https://lore.kernel.org/r/8b45ee783fa91196b7c9d6fc840a189496afd2f4.1677133271.git.philipp.g.hortmann@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55410a9144c76ecda126e6cdec556dfcd8f343b2
Author: Min Li <lm0963hack@gmail.com>
Date:   Mon Apr 17 10:27:54 2023 +0800

    Bluetooth: L2CAP: fix "bad unlock balance" in l2cap_disconnect_rsp
    
    [ Upstream commit 25e97f7b1866e6b8503be349eeea44bb52d661ce ]
    
    conn->chan_lock isn't acquired before l2cap_get_chan_by_scid,
    if l2cap_get_chan_by_scid returns NULL, then 'bad unlock balance'
    is triggered.
    
    Reported-by: syzbot+9519d6b5b79cf7787cf3@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/all/000000000000894f5f05f95e9f4d@google.com/
    Signed-off-by: Min Li <lm0963hack@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2d816f55da14d38218c9bd31748ac9cbae8f66c
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Mar 31 23:11:21 2023 +0200

    Bluetooth: hci_bcm: Fall back to getting bdaddr from EFI if not set
    
    [ Upstream commit 0d218c3642b9ccf71f44987cd03c19320f3bd918 ]
    
    On some devices the BCM Bluetooth adapter does not have a valid bdaddr set.
    
    btbcm.c currently sets HCI_QUIRK_INVALID_BDADDR to indicate when this is
    the case. But this requires users to manual setup a btaddr, by doing e.g.:
    
    btmgmt -i hci0 public-addr 'B0:F1:EC:82:1D:B3'
    
    Which means that Bluetooth will not work out of the box on such devices.
    To avoid this (where possible) hci_bcm sets: HCI_QUIRK_USE_BDADDR_PROPERTY
    which tries to get the bdaddr from devicetree.
    
    But this only works on devicetree platforms. On UEFI based platforms
    there is a special Broadcom UEFI variable which when present contains
    the devices bdaddr, just like how there is another UEFI variable which
    contains wifi nvram contents including the wifi MAC address.
    
    Add support for getting the bdaddr from this Broadcom UEFI variable,
    so that Bluetooth will work OOTB for users on devices where this
    UEFI variable is present.
    
    This fixes Bluetooth not working on for example Asus T100HA 2-in-1s.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba66851aba80b42f691f7d4ccad2b45fee19cda5
Author: Simon Horman <horms@kernel.org>
Date:   Mon Apr 17 17:10:45 2023 +0200

    ipvs: Update width of source for ip_vs_sync_conn_options
    
    [ Upstream commit e3478c68f6704638d08f437cbc552ca5970c151a ]
    
    In ip_vs_sync_conn_v0() copy is made to struct ip_vs_sync_conn_options.
    That structure looks like this:
    
    struct ip_vs_sync_conn_options {
            struct ip_vs_seq        in_seq;
            struct ip_vs_seq        out_seq;
    };
    
    The source of the copy is the in_seq field of struct ip_vs_conn.  Whose
    type is struct ip_vs_seq. Thus we can see that the source - is not as
    wide as the amount of data copied, which is the width of struct
    ip_vs_sync_conn_option.
    
    The copy is safe because the next field in is another struct ip_vs_seq.
    Make use of struct_group() to annotate this.
    
    Flagged by gcc-13 as:
    
     In file included from ./include/linux/string.h:254,
                      from ./include/linux/bitmap.h:11,
                      from ./include/linux/cpumask.h:12,
                      from ./arch/x86/include/asm/paravirt.h:17,
                      from ./arch/x86/include/asm/cpuid.h:62,
                      from ./arch/x86/include/asm/processor.h:19,
                      from ./arch/x86/include/asm/timex.h:5,
                      from ./include/linux/timex.h:67,
                      from ./include/linux/time32.h:13,
                      from ./include/linux/time.h:60,
                      from ./include/linux/stat.h:19,
                      from ./include/linux/module.h:13,
                      from net/netfilter/ipvs/ip_vs_sync.c:38:
     In function 'fortify_memcpy_chk',
         inlined from 'ip_vs_sync_conn_v0' at net/netfilter/ipvs/ip_vs_sync.c:606:3:
     ./include/linux/fortify-string.h:529:25: error: call to '__read_overflow2_field' declared with attribute warning: detected read beyond size of field (2nd parameter); maybe use struct_group()? [-Werror=attribute-warning]
       529 |                         __read_overflow2_field(q_size_field, size);
           |
    
    Compile tested only.
    
    Signed-off-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 866921dc06b94df91acfcf9359b57da943ed99b3
Author: Nagarajan Maran <quic_nmaran@quicinc.com>
Date:   Mon Apr 17 13:35:02 2023 +0300

    wifi: ath11k: Fix SKB corruption in REO destination ring
    
    [ Upstream commit f9fff67d2d7ca6fa8066132003a3deef654c55b1 ]
    
    While running traffics for a long time, randomly an RX descriptor
    filled with value "0" from REO destination ring is received.
    This descriptor which is invalid causes the wrong SKB (SKB stored in
    the IDR lookup with buffer id "0") to be fetched which in turn
    causes SKB memory corruption issue and the same leads to crash
    after some time.
    
    Changed the start id for idr allocation to "1" and the buffer id "0"
    is reserved for error validation. Introduced Sanity check to validate
    the descriptor, before processing the SKB.
    
    Crash Signature :
    
    Unable to handle kernel paging request at virtual address 3f004900
    PC points to "b15_dma_inv_range+0x30/0x50"
    LR points to "dma_cache_maint_page+0x8c/0x128".
    The Backtrace obtained is as follows:
    [<8031716c>] (b15_dma_inv_range) from [<80313a4c>] (dma_cache_maint_page+0x8c/0x128)
    [<80313a4c>] (dma_cache_maint_page) from [<80313b90>] (__dma_page_dev_to_cpu+0x28/0xcc)
    [<80313b90>] (__dma_page_dev_to_cpu) from [<7fb5dd68>] (ath11k_dp_process_rx+0x1e8/0x4a4 [ath11k])
    [<7fb5dd68>] (ath11k_dp_process_rx [ath11k]) from [<7fb53c20>] (ath11k_dp_service_srng+0xb0/0x2ac [ath11k])
    [<7fb53c20>] (ath11k_dp_service_srng [ath11k]) from [<7f67bba4>] (ath11k_pci_ext_grp_napi_poll+0x1c/0x78 [ath11k_pci])
    [<7f67bba4>] (ath11k_pci_ext_grp_napi_poll [ath11k_pci]) from [<807d5cf4>] (__napi_poll+0x28/0xb8)
    [<807d5cf4>] (__napi_poll) from [<807d5f28>] (net_rx_action+0xf0/0x280)
    [<807d5f28>] (net_rx_action) from [<80302148>] (__do_softirq+0xd0/0x280)
    [<80302148>] (__do_softirq) from [<80320408>] (irq_exit+0x74/0xd4)
    [<80320408>] (irq_exit) from [<803638a4>] (__handle_domain_irq+0x90/0xb4)
    [<803638a4>] (__handle_domain_irq) from [<805bedec>] (gic_handle_irq+0x58/0x90)
    [<805bedec>] (gic_handle_irq) from [<80301a78>] (__irq_svc+0x58/0x8c)
    
    Tested-on: IPQ8074 hw2.0 AHB WLAN.HK.2.7.0.1-01744-QCAHKSWPL_SILICONZ-1
    
    Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20230403191533.28114-1-quic_nmaran@quicinc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91ad1ab3cc7e981cb6d6ee100686baed64e1277e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 18 15:25:46 2023 +0200

    wifi: iwlwifi: dvm: Fix memcpy: detected field-spanning write backtrace
    
    [ Upstream commit ef16799640865f937719f0771c93be5dca18adc6 ]
    
    A received TKIP key may be up to 32 bytes because it may contain
    MIC rx/tx keys too. These are not used by iwl and copying these
    over overflows the iwl_keyinfo.key field.
    
    Add a check to not copy more data to iwl_keyinfo.key then will fit.
    
    This fixes backtraces like this one:
    
     memcpy: detected field-spanning write (size 32) of single field "sta_cmd.key.key" at drivers/net/wireless/intel/iwlwifi/dvm/sta.c:1103 (size 16)
     WARNING: CPU: 1 PID: 946 at drivers/net/wireless/intel/iwlwifi/dvm/sta.c:1103 iwlagn_send_sta_key+0x375/0x390 [iwldvm]
     <snip>
     Hardware name: Dell Inc. Latitude E6430/0H3MT5, BIOS A21 05/08/2017
     RIP: 0010:iwlagn_send_sta_key+0x375/0x390 [iwldvm]
     <snip>
     Call Trace:
      <TASK>
      iwl_set_dynamic_key+0x1f0/0x220 [iwldvm]
      iwlagn_mac_set_key+0x1e4/0x280 [iwldvm]
      drv_set_key+0xa4/0x1b0 [mac80211]
      ieee80211_key_enable_hw_accel+0xa8/0x2d0 [mac80211]
      ieee80211_key_replace+0x22d/0x8e0 [mac80211]
     <snip>
    
    Link: https://www.alionet.org/index.php?topic=1469.0
    Link: https://lore.kernel.org/linux-wireless/20230218191056.never.374-kees@kernel.org/
    Link: https://lore.kernel.org/linux-wireless/68760035-7f75-1b23-e355-bfb758a87d83@redhat.com/
    Cc: Kees Cook <keescook@chromium.org>
    Suggested-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e732a266b973cd4e115e2cc2ea5007119e8a7fbc
Author: Chaitanya Kulkarni <kch@nvidia.com>
Date:   Sun Apr 16 15:03:39 2023 -0700

    null_blk: Always check queue mode setting from configfs
    
    [ Upstream commit 63f8793ee60513a09f110ea460a6ff2c33811cdb ]
    
    Make sure to check device queue mode in the null_validate_conf() and
    return error for NULL_Q_RQ as we don't allow legacy I/O path, without
    this patch we get OOPs when queue mode is set to 1 from configfs,
    following are repro steps :-
    
    modprobe null_blk nr_devices=0
    mkdir config/nullb/nullb0
    echo 1 > config/nullb/nullb0/memory_backed
    echo 4096 > config/nullb/nullb0/blocksize
    echo 20480 > config/nullb/nullb0/size
    echo 1 > config/nullb/nullb0/queue_mode
    echo 1 > config/nullb/nullb0/power
    
    Entering kdb (current=0xffff88810acdd080, pid 2372) on processor 42 Oops: (null)
    due to oops @ 0xffffffffc041c329
    CPU: 42 PID: 2372 Comm: sh Tainted: G           O     N 6.3.0-rc5lblk+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
    RIP: 0010:null_add_dev.part.0+0xd9/0x720 [null_blk]
    Code: 01 00 00 85 d2 0f 85 a1 03 00 00 48 83 bb 08 01 00 00 00 0f 85 f7 03 00 00 80 bb 62 01 00 00 00 48 8b 75 20 0f 85 6d 02 00 00 <48> 89 6e 60 48 8b 75 20 bf 06 00 00 00 e8 f5 37 2c c1 48 8b 75 20
    RSP: 0018:ffffc900052cbde0 EFLAGS: 00010246
    RAX: 0000000000000001 RBX: ffff88811084d800 RCX: 0000000000000001
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff888100042e00
    RBP: ffff8881053d8200 R08: ffffc900052cbd68 R09: ffff888105db2000
    R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000002
    R13: ffff888104765200 R14: ffff88810eec1748 R15: ffff88810eec1740
    FS:  00007fd445fd1740(0000) GS:ffff8897dfc80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000060 CR3: 0000000166a00000 CR4: 0000000000350ee0
    DR0: ffffffff8437a488 DR1: ffffffff8437a489 DR2: ffffffff8437a48a
    DR3: ffffffff8437a48b DR6: 00000000ffff0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     nullb_device_power_store+0xd1/0x120 [null_blk]
     configfs_write_iter+0xb4/0x120
     vfs_write+0x2ba/0x3c0
     ksys_write+0x5f/0xe0
     do_syscall_64+0x3b/0x90
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    RIP: 0033:0x7fd4460c57a7
    Code: 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 48 89 54 24 18 48 89 74 24
    RSP: 002b:00007ffd3792a4a8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007fd4460c57a7
    RDX: 0000000000000002 RSI: 000055b43c02e4c0 RDI: 0000000000000001
    RBP: 000055b43c02e4c0 R08: 000000000000000a R09: 00007fd44615b4e0
    R10: 00007fd44615b3e0 R11: 0000000000000246 R12: 0000000000000002
    R13: 00007fd446198520 R14: 0000000000000002 R15: 00007fd446198700
     </TASK>
    
    Signed-off-by: Chaitanya Kulkarni <kch@nvidia.com>
    Reviewed-by: Damien Le Moal <dlemoal@kernel.org>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Nitesh Shetty <nj.shetty@samsung.com>
    Link: https://lore.kernel.org/r/20230416220339.43845-1-kch@nvidia.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 059e426d666a41e26b184c177c1ca3ee2d6fa1b6
Author: Hyunwoo Kim <imv4bel@gmail.com>
Date:   Fri Apr 14 13:11:59 2023 +0300

    wifi: iwlwifi: pcie: Fix integer overflow in iwl_write_to_user_buf
    
    [ Upstream commit 58d1b717879bfeabe09b35e41ad667c79933eb2e ]
    
    An integer overflow occurs in the iwl_write_to_user_buf() function,
    which is called by the iwl_dbgfs_monitor_data_read() function.
    
    static bool iwl_write_to_user_buf(char __user *user_buf, ssize_t count,
                                      void *buf, ssize_t *size,
                                      ssize_t *bytes_copied)
    {
            int buf_size_left = count - *bytes_copied;
    
            buf_size_left = buf_size_left - (buf_size_left % sizeof(u32));
            if (*size > buf_size_left)
                    *size = buf_size_left;
    
    If the user passes a SIZE_MAX value to the "ssize_t count" parameter,
    the ssize_t count parameter is assigned to "int buf_size_left".
    Then compare "*size" with "buf_size_left" . Here, "buf_size_left" is a
    negative number, so "*size" is assigned "buf_size_left" and goes into
    the third argument of the copy_to_user function, causing a heap overflow.
    
    This is not a security vulnerability because iwl_dbgfs_monitor_data_read()
    is a debugfs operation with 0400 privileges.
    
    Signed-off-by: Hyunwoo Kim <imv4bel@gmail.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230414130637.2d80ace81532.Iecfba549e0e0be21bbb0324675392e42e75bd5ad@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fc0d287c1e7dcb39a3b9bb0f8679cd68c2156c7
Author: Daniel Gabay <daniel.gabay@intel.com>
Date:   Thu Apr 13 21:40:32 2023 +0300

    wifi: iwlwifi: pcie: fix possible NULL pointer dereference
    
    [ Upstream commit b655b9a9f8467684cfa8906713d33b71ea8c8f54 ]
    
    It is possible that iwl_pci_probe() will fail and free the trans,
    then afterwards iwl_pci_remove() will be called and crash by trying
    to access trans which is already freed, fix it.
    
    iwlwifi 0000:01:00.0: Detected crf-id 0xa5a5a5a2, cnv-id 0xa5a5a5a2
                          wfpm id 0xa5a5a5a2
    iwlwifi 0000:01:00.0: Can't find a correct rfid for crf id 0x5a2
    ...
    BUG: kernel NULL pointer dereference, address: 0000000000000028
    ...
    RIP: 0010:iwl_pci_remove+0x12/0x30 [iwlwifi]
    pci_device_remove+0x3e/0xb0
    device_release_driver_internal+0x103/0x1f0
    driver_detach+0x4c/0x90
    bus_remove_driver+0x5c/0xd0
    driver_unregister+0x31/0x50
    pci_unregister_driver+0x40/0x90
    iwl_pci_unregister_driver+0x15/0x20 [iwlwifi]
    __exit_compat+0x9/0x98 [iwlwifi]
    __x64_sys_delete_module+0x147/0x260
    
    Signed-off-by: Daniel Gabay <daniel.gabay@intel.com>
    Signed-off-by: Gregory Greenman <gregory.greenman@intel.com>
    Link: https://lore.kernel.org/r/20230413213309.082f6e21341b.I0db21d7fa9a828d571ca886713bd0b5d0b6e1e5c@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7560ed6592ff4077528c239c71e91b19de985b97
Author: Hao Zeng <zenghao@kylinos.cn>
Date:   Tue Apr 11 16:43:49 2023 +0800

    samples/bpf: Fix fout leak in hbm's run_bpf_prog
    
    [ Upstream commit 23acb14af1914010dd0aae1bbb7fab28bf518b8e ]
    
    Fix fout being fopen'ed but then not subsequently fclose'd. In the affected
    branch, fout is otherwise going out of scope.
    
    Signed-off-by: Hao Zeng <zenghao@kylinos.cn>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20230411084349.1999628-1-zenghao@kylinos.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad87bd313f70b51e48019d5ce2d02d73152356b3
Author: Chao Yu <chao@kernel.org>
Date:   Mon Apr 10 10:12:22 2023 +0800

    f2fs: fix to drop all dirty pages during umount() if cp_error is set
    
    [ Upstream commit c9b3649a934d131151111354bcbb638076f03a30 ]
    
    xfstest generic/361 reports a bug as below:
    
    f2fs_bug_on(sbi, sbi->fsync_node_num);
    
    kernel BUG at fs/f2fs/super.c:1627!
    RIP: 0010:f2fs_put_super+0x3a8/0x3b0
    Call Trace:
     generic_shutdown_super+0x8c/0x1b0
     kill_block_super+0x2b/0x60
     kill_f2fs_super+0x87/0x110
     deactivate_locked_super+0x39/0x80
     deactivate_super+0x46/0x50
     cleanup_mnt+0x109/0x170
     __cleanup_mnt+0x16/0x20
     task_work_run+0x65/0xa0
     exit_to_user_mode_prepare+0x175/0x190
     syscall_exit_to_user_mode+0x25/0x50
     do_syscall_64+0x4c/0x90
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    During umount(), if cp_error is set, f2fs_wait_on_all_pages() should
    not stop waiting all F2FS_WB_CP_DATA pages to be writebacked, otherwise,
    fsync_node_num can be non-zero after f2fs_wait_on_all_pages() causing
    this bug.
    
    In this case, to avoid deadloop in f2fs_wait_on_all_pages(), it needs
    to drop all dirty pages rather than redirtying them.
    
    Signed-off-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc7237e191b99f88e859316fab2b06c2c26c8344
Author: Ojaswin Mujoo <ojaswin@linux.ibm.com>
Date:   Sat Mar 25 13:43:39 2023 +0530

    ext4: Fix best extent lstart adjustment logic in ext4_mb_new_inode_pa()
    
    [ Upstream commit 93cdf49f6eca5e23f6546b8f28457b2e6a6961d9 ]
    
    When the length of best extent found is less than the length of goal extent
    we need to make sure that the best extent atleast covers the start of the
    original request. This is done by adjusting the ac_b_ex.fe_logical (logical
    start) of the extent.
    
    While doing so, the current logic sometimes results in the best extent's
    logical range overflowing the goal extent. Since this best extent is later
    added to the inode preallocation list, we have a possibility of introducing
    overlapping preallocations. This is discussed in detail here [1].
    
    As per Jan's suggestion, to fix this, replace the existing logic with the
    below logic for adjusting best extent as it keeps fragmentation in check
    while ensuring logical range of best extent doesn't overflow out of goal
    extent:
    
    1. Check if best extent can be kept at end of goal range and still cover
       original start.
    2. Else, check if best extent can be kept at start of goal range and still
       cover original start.
    3. Else, keep the best extent at start of original request.
    
    Also, add a few extra BUG_ONs that might help catch errors faster.
    
    [1] https://lore.kernel.org/r/Y+OGkVvzPN0RMv0O@li-bb2b2a4c-3307-11b2-a85c-8fa5c3a69313.ibm.com
    
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Ojaswin Mujoo <ojaswin@linux.ibm.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/f96aca6d415b36d1f90db86c1a8cd7e2e9d7ab0e.1679731817.git.ojaswin@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ca3005b502ca8ea87d6a344323b179b48c4e4a3
Author: Kemeng Shi <shikemeng@huaweicloud.com>
Date:   Sat Mar 4 01:21:01 2023 +0800

    ext4: set goal start correctly in ext4_mb_normalize_request
    
    [ Upstream commit b07ffe6927c75d99af534d685282ea188d9f71a6 ]
    
    We need to set ac_g_ex to notify the goal start used in
    ext4_mb_find_by_goal. Set ac_g_ex instead of ac_f_ex in
    ext4_mb_normalize_request.
    Besides we should assure goal start is in range [first_data_block,
    blocks_count) as ext4_mb_initialize_context does.
    
    [ Added a check to make sure size is less than ar->pright; otherwise
      we could end up passing an underflowed value of ar->pright - size to
      ext4_get_group_no_and_offset(), which will trigger a BUG_ON later on.
      - TYT ]
    
    Signed-off-by: Kemeng Shi <shikemeng@huaweicloud.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20230303172120.3800725-2-shikemeng@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c2c8f959984e8dbbfdb6441b33fb72609eaefc0
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Tue Mar 28 00:43:16 2023 +0200

    gfs2: Fix inode height consistency check
    
    [ Upstream commit cfcdb5bad34f600aed7613c3c1a5e618111f77b7 ]
    
    The maximum allowed height of an inode's metadata tree depends on the
    filesystem block size; it is lower for bigger-block filesystems.  When
    reading in an inode, make sure that the height doesn't exceed the
    maximum allowed height.
    
    Arrays like sd_heightsize are sized to be big enough for any filesystem
    block size; they will often be slightly bigger than what's needed for a
    specific filesystem.
    
    Reported-by: syzbot+45d4691b1ed3c48eba05@syzkaller.appspotmail.com
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 697f92f8317e538d8409a0c95d6370eb40b34c05
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Sat Mar 18 16:16:35 2023 +0800

    scsi: message: mptlan: Fix use after free bug in mptlan_remove() due to race condition
    
    [ Upstream commit f486893288f3e9b171b836f43853a6426515d800 ]
    
    mptlan_probe() calls mpt_register_lan_device() which initializes the
    &priv->post_buckets_task workqueue. A call to
    mpt_lan_wake_post_buckets_task() will subsequently start the work.
    
    During driver unload in mptlan_remove() the following race may occur:
    
    CPU0                  CPU1
    
                        |mpt_lan_post_receive_buckets_work()
    mptlan_remove()     |
      free_netdev()     |
        kfree(dev);     |
                        |
                        | dev->mtu
                        |   //use
    
    Fix this by finishing the work prior to cleaning up in mptlan_remove().
    
    [mkp: we really should remove mptlan instead of attempting to fix it]
    
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Link: https://lore.kernel.org/r/20230318081635.796479-1-zyytlz.wz@163.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f748e15253833b771acbede14ea98f50831ac289
Author: Eli Cohen <elic@nvidia.com>
Date:   Wed Feb 8 07:51:02 2023 +0200

    lib: cpu_rmap: Avoid use after free on rmap->obj array entries
    
    [ Upstream commit 4e0473f1060aa49621d40a113afde24818101d37 ]
    
    When calling irq_set_affinity_notifier() with NULL at the notify
    argument, it will cause freeing of the glue pointer in the
    corresponding array entry but will leave the pointer in the array. A
    subsequent call to free_irq_cpu_rmap() will try to free this entry again
    leading to possible use after free.
    
    Fix that by setting NULL to the array entry and checking that we have
    non-zero at the array entry when iterating over the array in
    free_irq_cpu_rmap().
    
    The current code does not suffer from this since there are no cases
    where irq_set_affinity_notifier(irq, NULL) (note the NULL passed for the
    notify arg) is called, followed by a call to free_irq_cpu_rmap() so we
    don't hit and issue. Subsequent patches in this series excersize this
    flow, hence the required fix.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4621e24c9257c6379343bf0c11b473817cf7edcd
Author: Dmitry Bogdanov <d.bogdanov@yadro.com>
Date:   Sat Mar 18 20:56:17 2023 -0500

    scsi: target: iscsit: Free cmds before session free
    
    [ Upstream commit d8990b5a4d065f38f35d69bcd627ec5a7f8330ca ]
    
    Commands from recovery entries are freed after session has been closed.
    That leads to use-after-free at command free or NPE with such call trace:
    
    Time2Retain timer expired for SID: 1, cleaning up iSCSI session.
    BUG: kernel NULL pointer dereference, address: 0000000000000140
    RIP: 0010:sbitmap_queue_clear+0x3a/0xa0
    Call Trace:
     target_release_cmd_kref+0xd1/0x1f0 [target_core_mod]
     transport_generic_free_cmd+0xd1/0x180 [target_core_mod]
     iscsit_free_cmd+0x53/0xd0 [iscsi_target_mod]
     iscsit_free_connection_recovery_entries+0x29d/0x320 [iscsi_target_mod]
     iscsit_close_session+0x13a/0x140 [iscsi_target_mod]
     iscsit_check_post_dataout+0x440/0x440 [iscsi_target_mod]
     call_timer_fn+0x24/0x140
    
    Move cleanup of recovery enrties to before session freeing.
    
    Reported-by: Forza <forza@tnonline.net>
    Signed-off-by: Dmitry Bogdanov <d.bogdanov@yadro.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Link: https://lore.kernel.org/r/20230319015620.96006-7-michael.christie@oracle.com
    Reviewed-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ea171230a39e50ca6b3d6590a3436a57df8758f
Author: Nick Child <nnac123@linux.ibm.com>
Date:   Tue Mar 21 10:07:24 2023 -0500

    net: Catch invalid index in XPS mapping
    
    [ Upstream commit 5dd0dfd55baec0742ba8f5625a0dd064aca7db16 ]
    
    When setting the XPS value of a TX queue, warn the user once if the
    index of the queue is greater than the number of allocated TX queues.
    
    Previously, this scenario went uncaught. In the best case, it resulted
    in unnecessary allocations. In the worst case, it resulted in
    out-of-bounds memory references through calls to `netdev_get_tx_queue(
    dev, index)`. Therefore, it is important to inform the user but not
    worth returning an error and risk downing the netdevice.
    
    Signed-off-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Piotr Raczynski <piotr.raczynski@intel.com>
    Link: https://lore.kernel.org/r/20230321150725.127229-1-nnac123@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b61e7ad13f212395c53e68cff10db16be0fc7d7
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Sun Mar 19 16:41:08 2023 -0700

    net: pasemi: Fix return type of pasemi_mac_start_tx()
    
    [ Upstream commit c8384d4a51e7cb0e6587f3143f29099f202c5de1 ]
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed. A
    warning in clang aims to catch these at compile time, which reveals:
    
      drivers/net/ethernet/pasemi/pasemi_mac.c:1665:21: error: incompatible function pointer types initializing 'netdev_tx_t (*)(struct sk_buff *, struct net_device *)' (aka 'enum netdev_tx (*)(struct sk_buff *, struct net_device *)') with an expression of type 'int (struct sk_buff *, struct net_device *)' [-Werror,-Wincompatible-function-pointer-types-strict]
              .ndo_start_xmit         = pasemi_mac_start_tx,
                                        ^~~~~~~~~~~~~~~~~~~
      1 error generated.
    
    ->ndo_start_xmit() in 'struct net_device_ops' expects a return type of
    'netdev_tx_t', not 'int'. Adjust the return type of
    pasemi_mac_start_tx() to match the prototype's to resolve the warning.
    While PowerPC does not currently implement support for kCFI, it could in
    the future, which means this warning becomes a fatal CFI failure at run
    time.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1750
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Link: https://lore.kernel.org/r/20230319-pasemi-incompatible-pointer-types-strict-v1-1-1b9459d8aef0@kernel.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0e7faee3a7dd6f51350cda64997116a247eb045
Author: Justin Tee <justin.tee@broadcom.com>
Date:   Wed Mar 1 15:16:17 2023 -0800

    scsi: lpfc: Prevent lpfc_debugfs_lockstat_write() buffer overflow
    
    [ Upstream commit c6087b82a9146826564a55c5ca0164cac40348f5 ]
    
    A static code analysis tool flagged the possibility of buffer overflow when
    using copy_from_user() for a debugfs entry.
    
    Currently, it is possible that copy_from_user() copies more bytes than what
    would fit in the mybuf char array.  Add a min() restriction check between
    sizeof(mybuf) - 1 and nbytes passed from the userspace buffer to protect
    against buffer overflow.
    
    Link: https://lore.kernel.org/r/20230301231626.9621-2-justintee8345@gmail.com
    Signed-off-by: Justin Tee <justin.tee@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22ab5fed07ad4b206ea910fd0132d1a0d4831584
Author: Jan Kara <jack@suse.cz>
Date:   Wed Mar 1 11:59:39 2023 +0100

    ext2: Check block size validity during mount
    
    [ Upstream commit 62aeb94433fcec80241754b70d0d1836d5926b0a ]
    
    Check that log of block size stored in the superblock has sensible
    value. Otherwise the shift computing the block size can overflow leading
    to undefined behavior.
    
    Reported-by: syzbot+4fec412f59eba8c01b77@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e8dc0e5c7636efaadbd7e488acd34b4291c0431
Author: Hector Martin <marcan@marcan.st>
Date:   Tue Feb 14 18:24:19 2023 +0900

    wifi: brcmfmac: cfg80211: Pass the PMK in binary instead of hex
    
    [ Upstream commit 89b89e52153fda2733562776c7c9d9d3ebf8dd6d ]
    
    Apparently the hex passphrase mechanism does not work on newer
    chips/firmware (e.g. BCM4387). It seems there was a simple way of
    passing it in binary all along, so use that and avoid the hexification.
    
    OpenBSD has been doing it like this from the beginning, so this should
    work on all chips.
    
    Also clear the structure before setting the PMK. This was leaking
    uninitialized stack contents to the device.
    
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Hector Martin <marcan@marcan.st>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20230214092423.15175-6-marcan@marcan.st
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8d49d1c5968b747c4a0062dc3f97df219bcfb16
Author: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Date:   Tue Feb 21 21:06:42 2023 +0100

    bpf: Annotate data races in bpf_local_storage
    
    [ Upstream commit 0a09a2f933c73dc76ab0b72da6855f44342a8903 ]
    
    There are a few cases where hlist_node is checked to be unhashed without
    holding the lock protecting its modification. In this case, one must use
    hlist_unhashed_lockless to avoid load tearing and KCSAN reports. Fix
    this by using lockless variant in places not protected by the lock.
    
    Since this is not prompted by any actual KCSAN reports but only from
    code review, I have not included a fixes tag.
    
    Cc: Martin KaFai Lau <martin.lau@kernel.org>
    Cc: KP Singh <kpsingh@kernel.org>
    Signed-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
    Link: https://lore.kernel.org/r/20230221200646.2500777-4-memxor@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30d041c18dfba71b4c11d68abd819d20ab8d93c6
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Feb 15 20:31:38 2023 +0200

    wifi: ath: Silence memcpy run-time false positive warning
    
    [ Upstream commit bfcc8ba45eb87bfaaff900bbad2b87b204899d41 ]
    
    The memcpy() in ath_key_config() was attempting to write across
    neighboring struct members in struct ath_keyval. Introduce a wrapping
    struct_group, kv_values, to be the addressable target of the memcpy
    without overflowing an individual member. Silences the false positive
    run-time warning:
    
      memcpy: detected field-spanning write (size 32) of single field "hk.kv_val" at drivers/net/wireless/ath/key.c:506 (size 16)
    
    Link: https://bbs.archlinux.org/viewtopic.php?id=282254
    Cc: Kalle Valo <kvalo@kernel.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: linux-wireless@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20230210054310.never.554-kees@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8e7589f50b709b647b642531599e70707faf70c
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Thu Mar 23 14:07:06 2023 -0500

    drm/amd: Fix an out of bounds error in BIOS parser
    
    [ Upstream commit d116db180decec1b21bba31d2ff495ac4d8e1b83 ]
    
    The array is hardcoded to 8 in atomfirmware.h, but firmware provides
    a bigger one sometimes. Deferencing the larger array causes an out
    of bounds error.
    
    commit 4fc1ba4aa589 ("drm/amd/display: fix array index out of bound error
    in bios parser") fixed some of this, but there are two other cases
    not covered by it.  Fix those as well.
    
    Reported-by: erhard_f@mailbox.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=214853
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2473
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 978e0d05547ae707d51a942fc7e85a34e181ee6f
Author: void0red <30990023+void0red@users.noreply.github.com>
Date:   Wed Apr 5 15:57:57 2023 +0200

    ACPICA: ACPICA: check null return of ACPI_ALLOCATE_ZEROED in acpi_db_display_objects
    
    [ Upstream commit ae5a0eccc85fc960834dd66e3befc2728284b86c ]
    
    ACPICA commit 0d5f467d6a0ba852ea3aad68663cbcbd43300fd4
    
    ACPI_ALLOCATE_ZEROED may fails, object_info might be null and will cause
    null pointer dereference later.
    
    Link: https://github.com/acpica/acpica/commit/0d5f467d
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16359bc02c093b0862e31739c07673340a2106a6
Author: Tamir Duberstein <tamird@google.com>
Date:   Wed Apr 5 15:42:43 2023 +0200

    ACPICA: Avoid undefined behavior: applying zero offset to null pointer
    
    [ Upstream commit 05bb0167c80b8f93c6a4e0451b7da9b96db990c2 ]
    
    ACPICA commit 770653e3ba67c30a629ca7d12e352d83c2541b1e
    
    Before this change we see the following UBSAN stack trace in Fuchsia:
    
      #0    0x000021e4213b3302 in acpi_ds_init_aml_walk(struct acpi_walk_state*, union acpi_parse_object*, struct acpi_namespace_node*, u8*, u32, struct acpi_evaluate_info*, u8) ../../third_party/acpica/source/components/dispatcher/dswstate.c:682 <platform-bus-x86.so>+0x233302
      #1.2  0x000020d0f660777f in ubsan_get_stack_trace() compiler-rt/lib/ubsan/ubsan_diag.cpp:41 <libclang_rt.asan.so>+0x3d77f
      #1.1  0x000020d0f660777f in maybe_print_stack_trace() compiler-rt/lib/ubsan/ubsan_diag.cpp:51 <libclang_rt.asan.so>+0x3d77f
      #1    0x000020d0f660777f in ~scoped_report() compiler-rt/lib/ubsan/ubsan_diag.cpp:387 <libclang_rt.asan.so>+0x3d77f
      #2    0x000020d0f660b96d in handlepointer_overflow_impl() compiler-rt/lib/ubsan/ubsan_handlers.cpp:809 <libclang_rt.asan.so>+0x4196d
      #3    0x000020d0f660b50d in compiler-rt/lib/ubsan/ubsan_handlers.cpp:815 <libclang_rt.asan.so>+0x4150d
      #4    0x000021e4213b3302 in acpi_ds_init_aml_walk(struct acpi_walk_state*, union acpi_parse_object*, struct acpi_namespace_node*, u8*, u32, struct acpi_evaluate_info*, u8) ../../third_party/acpica/source/components/dispatcher/dswstate.c:682 <platform-bus-x86.so>+0x233302
      #5    0x000021e4213e2369 in acpi_ds_call_control_method(struct acpi_thread_state*, struct acpi_walk_state*, union acpi_parse_object*) ../../third_party/acpica/source/components/dispatcher/dsmethod.c:605 <platform-bus-x86.so>+0x262369
      #6    0x000021e421437fac in acpi_ps_parse_aml(struct acpi_walk_state*) ../../third_party/acpica/source/components/parser/psparse.c:550 <platform-bus-x86.so>+0x2b7fac
      #7    0x000021e4214464d2 in acpi_ps_execute_method(struct acpi_evaluate_info*) ../../third_party/acpica/source/components/parser/psxface.c:244 <platform-bus-x86.so>+0x2c64d2
      #8    0x000021e4213aa052 in acpi_ns_evaluate(struct acpi_evaluate_info*) ../../third_party/acpica/source/components/namespace/nseval.c:250 <platform-bus-x86.so>+0x22a052
      #9    0x000021e421413dd8 in acpi_ns_init_one_device(acpi_handle, u32, void*, void**) ../../third_party/acpica/source/components/namespace/nsinit.c:735 <platform-bus-x86.so>+0x293dd8
      #10   0x000021e421429e98 in acpi_ns_walk_namespace(acpi_object_type, acpi_handle, u32, u32, acpi_walk_callback, acpi_walk_callback, void*, void**) ../../third_party/acpica/source/components/namespace/nswalk.c:298 <platform-bus-x86.so>+0x2a9e98
      #11   0x000021e4214131ac in acpi_ns_initialize_devices(u32) ../../third_party/acpica/source/components/namespace/nsinit.c:268 <platform-bus-x86.so>+0x2931ac
      #12   0x000021e42147c40d in acpi_initialize_objects(u32) ../../third_party/acpica/source/components/utilities/utxfinit.c:304 <platform-bus-x86.so>+0x2fc40d
      #13   0x000021e42126d603 in acpi::acpi_impl::initialize_acpi(acpi::acpi_impl*) ../../src/devices/board/lib/acpi/acpi-impl.cc:224 <platform-bus-x86.so>+0xed603
    
    Add a simple check that avoids incrementing a pointer by zero, but
    otherwise behaves as before. Note that our findings are against ACPICA
    20221020, but the same code exists on master.
    
    Link: https://github.com/acpica/acpica/commit/770653e3
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f64a0e66469251bdfd0e0f7e97edd15e158a572
Author: Nur Hussein <hussein@unixcat.org>
Date:   Thu Apr 6 04:25:59 2023 +0800

    drm/tegra: Avoid potential 32-bit integer overflow
    
    [ Upstream commit 2429b3c529da29d4277d519bd66d034842dcd70c ]
    
    In tegra_sor_compute_config(), the 32-bit value mode->clock is
    multiplied by 1000, and assigned to the u64 variable pclk. We can avoid
    a potential 32-bit integer overflow by casting mode->clock to u64 before
    we do the arithmetic and assignment.
    
    Signed-off-by: Nur Hussein <hussein@unixcat.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f718f1fd3e4cd8e0df912a8a9963ed019c278fb9
Author: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date:   Fri Mar 31 18:06:34 2023 +0200

    remoteproc: stm32_rproc: Add mutex protection for workqueue
    
    [ Upstream commit 35bdafda40cc343ad2ba2cce105eba03a70241cc ]
    
    The workqueue may execute late even after remoteproc is stopped or
    stopping, some resources (rpmsg device and endpoint) have been
    released in rproc_stop_subdevices(), then rproc_vq_interrupt()
    accessing these resources will cause kernel dump.
    
    Call trace:
    virtqueue_add_inbuf
    virtqueue_add_inbuf
    rpmsg_recv_single
    rpmsg_recv_done
    vring_interrupt
    stm32_rproc_mb_vq_work
    process_one_work
    worker_thread
    kthread
    
    Suggested-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
    Link: https://lore.kernel.org/r/20230331160634.3113031-1-arnaud.pouliquen@foss.st.com
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 066b90bca755f0b876e7b027b75d1796861d6db0
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Fri Mar 24 21:26:27 2023 +0100

    ACPI: EC: Fix oops when removing custom query handlers
    
    [ Upstream commit e5b492c6bb900fcf9722e05f4a10924410e170c1 ]
    
    When removing custom query handlers, the handler might still
    be used inside the EC query workqueue, causing a kernel oops
    if the module holding the callback function was already unloaded.
    
    Fix this by flushing the EC query workqueue when removing
    custom query handlers.
    
    Tested on a Acer Travelmate 4002WLMi
    
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d8f5ccc826b39e05ff252b1fccd808c7a0725e0
Author: Pierre Gondois <pierre.gondois@arm.com>
Date:   Thu Feb 16 09:49:19 2023 +0100

    firmware: arm_sdei: Fix sleep from invalid context BUG
    
    [ Upstream commit d2c48b2387eb89e0bf2a2e06e30987cf410acad4 ]
    
    Running a preempt-rt (v6.2-rc3-rt1) based kernel on an Ampere Altra
    triggers:
    
      BUG: sleeping function called from invalid context at kernel/locking/spinlock_rt.c:46
      in_atomic(): 0, irqs_disabled(): 128, non_block: 0, pid: 24, name: cpuhp/0
      preempt_count: 0, expected: 0
      RCU nest depth: 0, expected: 0
      3 locks held by cpuhp/0/24:
        #0: ffffda30217c70d0 (cpu_hotplug_lock){++++}-{0:0}, at: cpuhp_thread_fun+0x5c/0x248
        #1: ffffda30217c7120 (cpuhp_state-up){+.+.}-{0:0}, at: cpuhp_thread_fun+0x5c/0x248
        #2: ffffda3021c711f0 (sdei_list_lock){....}-{3:3}, at: sdei_cpuhp_up+0x3c/0x130
      irq event stamp: 36
      hardirqs last  enabled at (35): [<ffffda301e85b7bc>] finish_task_switch+0xb4/0x2b0
      hardirqs last disabled at (36): [<ffffda301e812fec>] cpuhp_thread_fun+0x21c/0x248
      softirqs last  enabled at (0): [<ffffda301e80b184>] copy_process+0x63c/0x1ac0
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      CPU: 0 PID: 24 Comm: cpuhp/0 Not tainted 5.19.0-rc3-rt5-[...]
      Hardware name: WIWYNN Mt.Jade Server [...]
      Call trace:
        dump_backtrace+0x114/0x120
        show_stack+0x20/0x70
        dump_stack_lvl+0x9c/0xd8
        dump_stack+0x18/0x34
        __might_resched+0x188/0x228
        rt_spin_lock+0x70/0x120
        sdei_cpuhp_up+0x3c/0x130
        cpuhp_invoke_callback+0x250/0xf08
        cpuhp_thread_fun+0x120/0x248
        smpboot_thread_fn+0x280/0x320
        kthread+0x130/0x140
        ret_from_fork+0x10/0x20
    
    sdei_cpuhp_up() is called in the STARTING hotplug section,
    which runs with interrupts disabled. Use a CPUHP_AP_ONLINE_DYN entry
    instead to execute the cpuhp cb later, with preemption enabled.
    
    SDEI originally got its own cpuhp slot to allow interacting
    with perf. It got superseded by pNMI and this early slot is not
    relevant anymore. [1]
    
    Some SDEI calls (e.g. SDEI_1_0_FN_SDEI_PE_MASK) take actions on the
    calling CPU. It is checked that preemption is disabled for them.
    _ONLINE cpuhp cb are executed in the 'per CPU hotplug thread'.
    Preemption is enabled in those threads, but their cpumask is limited
    to 1 CPU.
    Move 'WARN_ON_ONCE(preemptible())' statements so that SDEI cpuhp cb
    don't trigger them.
    
    Also add a check for the SDEI_1_0_FN_SDEI_PRIVATE_RESET SDEI call
    which acts on the calling CPU.
    
    [1]:
    https://lore.kernel.org/all/5813b8c5-ae3e-87fd-fccc-94c9cd08816d@arm.com/
    
    Suggested-by: James Morse <james.morse@arm.com>
    Signed-off-by: Pierre Gondois <pierre.gondois@arm.com>
    Reviewed-by: James Morse <james.morse@arm.com>
    Link: https://lore.kernel.org/r/20230216084920.144064-1-pierre.gondois@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c23f6da62f71ebfeda6ea3960982ccd926ebb09
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Wed Mar 8 00:43:38 2023 +0800

    memstick: r592: Fix UAF bug in r592_remove due to race condition
    
    [ Upstream commit 63264422785021704c39b38f65a78ab9e4a186d7 ]
    
    In r592_probe, dev->detect_timer was bound with r592_detect_timer.
    In r592_irq function, the timer function will be invoked by mod_timer.
    
    If we remove the module which will call hantro_release to make cleanup,
    there may be a unfinished work. The possible sequence is as follows,
    which will cause a typical UAF bug.
    
    Fix it by canceling the work before cleanup in r592_remove.
    
    CPU0                  CPU1
    
                        |r592_detect_timer
    r592_remove         |
      memstick_free_host|
      put_device;       |
      kfree(host);      |
                        |
                        | queue_work
                        |   &host->media_checker //use
    
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Link: https://lore.kernel.org/r/20230307164338.1246287-1-zyytlz.wz@163.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae6769fb939cb148a94efe8c6b0bc68f73349f64
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Thu Mar 2 02:18:49 2023 +0100

    arm64: dts: qcom: msm8996: Add missing DWC3 quirks
    
    [ Upstream commit d0af0537e28f6eace02deed63b585396de939213 ]
    
    Add missing dwc3 quirks from msm-3.18. Unfortunately, none of them
    make `dwc3-qcom 6af8800.usb: HS-PHY not in L2` go away.
    
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230302011849.1873056-1-konrad.dybcio@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb1616e1057dfbb427f3594111608d7d573c6e1c
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Mon Mar 13 08:18:11 2023 +0100

    regmap: cache: Return error in cache sync operations for REGCACHE_NONE
    
    [ Upstream commit fd883d79e4dcd2417c2b80756f22a2ff03b0f6e0 ]
    
    There is no sense in doing a cache sync on REGCACHE_NONE regmaps.
    Instead of panicking the kernel due to missing cache_ops, return an error
    to client driver.
    
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Link: https://lore.kernel.org/r/20230313071812.13577-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5138ad7ca1d85ceac0cb76961f834b54c1a5549
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Nov 1 10:20:09 2022 -0400

    drm/amd/display: Use DC_LOG_DC in the trasform pixel function
    
    [ Upstream commit 7222f5841ff49709ca666b05ff336776e0664a20 ]
    
    [Why & How]
    DC now uses a new commit sequence which is more robust since it
    addresses cases where we need to reorganize pipes based on planes and
    other parameters. As a result, this new commit sequence reset the DC
    state by cleaning plane states and re-creating them accordingly with the
    need. For this reason, the dce_transform_set_pixel_storage_depth can be
    invoked after a plane state is destroyed and before its re-creation. In
    this situation and on DCE devices, DC will hit a condition that will
    trigger a dmesg log that looks like this:
    
    Console: switching to colour frame buffer device 240x67
    ------------[ cut here ]------------
    [..]
    Hardware name: System manufacturer System Product Name/PRIME X370-PRO, BIOS 5603 07/28/2020
    RIP: 0010:dce_transform_set_pixel_storage_depth+0x3f8/0x480 [amdgpu]
    [..]
    RSP: 0018:ffffc9000202b850 EFLAGS: 00010293
    RAX: ffffffffa081d100 RBX: ffff888110790000 RCX: 000000000000000c
    RDX: ffff888100bedbf8 RSI: 0000000000001a50 RDI: ffff88810463c900
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000007
    R10: 0000000000000001 R11: 0000000000000f00 R12: ffff88810f500010
    R13: ffff888100bedbf8 R14: ffff88810f515688 R15: 0000000000000000
    FS:  00007ff0159249c0(0000) GS:ffff88840e940000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ff01528e550 CR3: 0000000002a10000 CR4: 00000000003506e0
    Call Trace:
     <TASK>
     ? dm_write_reg_func+0x21/0x80 [amdgpu 340dadd3f7c8cf4be11cf0bdc850245e99abe0e8]
     dc_stream_set_dither_option+0xfb/0x130 [amdgpu 340dadd3f7c8cf4be11cf0bdc850245e99abe0e8]
     amdgpu_dm_crtc_configure_crc_source+0x10b/0x190 [amdgpu 340dadd3f7c8cf4be11cf0bdc850245e99abe0e8]
     amdgpu_dm_atomic_commit_tail+0x20a8/0x2a90 [amdgpu 340dadd3f7c8cf4be11cf0bdc850245e99abe0e8]
     ? free_unref_page_commit+0x98/0x170
     ? free_unref_page+0xcc/0x150
     commit_tail+0x94/0x120
     drm_atomic_helper_commit+0x10f/0x140
     drm_atomic_commit+0x94/0xc0
     ? drm_plane_get_damage_clips.cold+0x1c/0x1c
     drm_client_modeset_commit_atomic+0x203/0x250
     drm_client_modeset_commit_locked+0x56/0x150
     drm_client_modeset_commit+0x21/0x40
     drm_fb_helper_lastclose+0x42/0x70
     amdgpu_driver_lastclose_kms+0xa/0x10 [amdgpu 340dadd3f7c8cf4be11cf0bdc850245e99abe0e8]
     drm_release+0xda/0x110
     __fput+0x89/0x240
     task_work_run+0x5c/0x90
     do_exit+0x333/0xae0
     do_group_exit+0x2d/0x90
     __x64_sys_exit_group+0x14/0x20
     do_syscall_64+0x5b/0x80
     ? exit_to_user_mode_prepare+0x1e/0x140
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7ff016ceaca1
    Code: Unable to access opcode bytes at RIP 0x7ff016ceac77.
    RSP: 002b:00007ffe7a2357e8 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 00007ff016e15a00 RCX: 00007ff016ceaca1
    RDX: 000000000000003c RSI: 00000000000000e7 RDI: 0000000000000000
    RBP: 0000000000000000 R08: ffffffffffffff78 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007ff016e15a00
    R13: 0000000000000000 R14: 00007ff016e1aee8 R15: 00007ff016e1af00
     </TASK>
    
    Since this issue only happens in a transition state on DC, this commit
    replace BREAK_TO_DEBUGGER with DC_LOG_DC.
    
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8daee66585897a4c90d937c91e762100237bff9
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Tue Apr 11 19:57:33 2023 +0900

    fs: hfsplus: remove WARN_ON() from hfsplus_cat_{read,write}_inode()
    
    [ Upstream commit 81b21c0f0138ff5a499eafc3eb0578ad2a99622c ]
    
    syzbot is hitting WARN_ON() in hfsplus_cat_{read,write}_inode(), for
    crafted filesystem image can contain bogus length. There conditions are
    not kernel bugs that can justify kernel to panic.
    
    Reported-by: syzbot <syzbot+e2787430e752a92b8750@syzkaller.appspotmail.com>
    Link: https://syzkaller.appspot.com/bug?extid=e2787430e752a92b8750
    Reported-by: syzbot <syzbot+4913dca2ea6e4d43f3f1@syzkaller.appspotmail.com>
    Link: https://syzkaller.appspot.com/bug?extid=4913dca2ea6e4d43f3f1
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reviewed-by: Viacheslav Dubeyko <slava@dubeyko.com>
    Message-Id: <15308173-5252-d6a3-ae3b-e96d46cb6f41@I-love.SAKURA.ne.jp>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7d21b8585894e6fff973f6ddae42f02b13f600f
Author: Zqiang <qiang1.zhang@intel.com>
Date:   Sat Dec 24 13:25:53 2022 +0800

    rcu: Protect rcu_print_task_exp_stall() ->exp_tasks access
    
    [ Upstream commit 3c1566bca3f8349f12b75d0a2d5e4a20ad6262ec ]
    
    For kernels built with CONFIG_PREEMPT_RCU=y, the following scenario can
    result in a NULL-pointer dereference:
    
               CPU1                                           CPU2
    rcu_preempt_deferred_qs_irqrestore                rcu_print_task_exp_stall
      if (special.b.blocked)                            READ_ONCE(rnp->exp_tasks) != NULL
        raw_spin_lock_rcu_node
        np = rcu_next_node_entry(t, rnp)
        if (&t->rcu_node_entry == rnp->exp_tasks)
          WRITE_ONCE(rnp->exp_tasks, np)
          ....
          raw_spin_unlock_irqrestore_rcu_node
                                                        raw_spin_lock_irqsave_rcu_node
                                                        t = list_entry(rnp->exp_tasks->prev,
                                                            struct task_struct, rcu_node_entry)
                                                        (if rnp->exp_tasks is NULL, this
                                                           will dereference a NULL pointer)
    
    The problem is that CPU2 accesses the rcu_node structure's->exp_tasks
    field without holding the rcu_node structure's ->lock and CPU2 did
    not observe CPU1's change to rcu_node structure's ->exp_tasks in time.
    Therefore, if CPU1 sets rcu_node structure's->exp_tasks pointer to NULL,
    then CPU2 might dereference that NULL pointer.
    
    This commit therefore holds the rcu_node structure's ->lock while
    accessing that structure's->exp_tasks field.
    
    [ paulmck: Apply Frederic Weisbecker feedback. ]
    
    Acked-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Zqiang <qiang1.zhang@intel.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4842de4ec13d60e042d915b64c9134e135e0d11
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Jan 31 16:12:18 2023 -0800

    refscale: Move shutdown from wait_event() to wait_event_idle()
    
    [ Upstream commit 6bc6e6b27524304aadb9c04611ddb1c84dd7617a ]
    
    The ref_scale_shutdown() kthread/function uses wait_event() to wait for
    the refscale test to complete.  However, although the read-side tests
    are normally extremely fast, there is no law against specifying a very
    large value for the refscale.loops module parameter or against having
    a slow read-side primitive.  Either way, this might well trigger the
    hung-task timeout.
    
    This commit therefore replaces those wait_event() calls with calls to
    wait_event_idle(), which do not trigger the hung-task timeout.
    
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 100c0ad6c04597fefeaaba2bb1827cc015d95067
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sat Apr 29 00:06:28 2023 -0400

    ext4: allow ext4_get_group_info() to fail
    
    [ Upstream commit 5354b2af34064a4579be8bc0e2f15a7b70f14b5f ]
    
    Previously, ext4_get_group_info() would treat an invalid group number
    as BUG(), since in theory it should never happen.  However, if a
    malicious attaker (or fuzzer) modifies the superblock via the block
    device while it is the file system is mounted, it is possible for
    s_first_data_block to get set to a very large number.  In that case,
    when calculating the block group of some block number (such as the
    starting block of a preallocation region), could result in an
    underflow and very large block group number.  Then the BUG_ON check in
    ext4_get_group_info() would fire, resutling in a denial of service
    attack that can be triggered by root or someone with write access to
    the block device.
    
    For a quality of implementation perspective, it's best that even if
    the system administrator does something that they shouldn't, that it
    will not trigger a BUG.  So instead of BUG'ing, ext4_get_group_info()
    will call ext4_error and return NULL.  We also add fallback code in
    all of the callers of ext4_get_group_info() that it might NULL.
    
    Also, since ext4_get_group_info() was already borderline to be an
    inline function, un-inline it.  The results in a next reduction of the
    compiled text size of ext4 by roughly 2k.
    
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20230430154311.579720-2-tytso@mit.edu
    Reported-by: syzbot+e2efa3efc15a1c9e95c3@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=69b28112e098b070f639efb356393af3ffec4220
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 371d8b8ea0cb48de9777aaf7193abd544c200297
Author: Kemeng Shi <shikemeng@huaweicloud.com>
Date:   Sat Mar 4 01:21:02 2023 +0800

    ext4: allow to find by goal if EXT4_MB_HINT_GOAL_ONLY is set
    
    [ Upstream commit 01e4ca29451760b9ac10b4cdc231c52150842643 ]
    
    If EXT4_MB_HINT_GOAL_ONLY is set, ext4_mb_regular_allocator will only
    allocate blocks from ext4_mb_find_by_goal. Allow to find by goal in
    ext4_mb_find_by_goal if EXT4_MB_HINT_GOAL_ONLY is set or allocation
    with EXT4_MB_HINT_GOAL_ONLY set will always fail.
    
    EXT4_MB_HINT_GOAL_ONLY is not used at all, so the problem is not
    found for now.
    
    Signed-off-by: Kemeng Shi <shikemeng@huaweicloud.com>
    Reviewed-by: Ojaswin Mujoo <ojaswin@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230303172120.3800725-3-shikemeng@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 5354b2af3406 ("ext4: allow ext4_get_group_info() to fail")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8669fff0d0cd8e1948c2e35fd8a367c809b4452f
Author: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
Date:   Thu Apr 1 10:21:25 2021 -0700

    ext4: add mballoc stats proc file
    
    [ Upstream commit a6c75eaf11032f4a3d2b3ce2265a194ac6e4a7f0 ]
    
    Add new stats for measuring the performance of mballoc. This patch is
    forked from Artem Blagodarenko's work that can be found here:
    
    https://github.com/lustre/lustre-release/blob/master/ldiskfs/kernel_patches/patches/rhel8/ext4-simple-blockalloc.patch
    
    This patch reorganizes the stats by cr level. This is how the output
    looks like:
    
    mballoc:
            reqs: 0
            success: 0
            groups_scanned: 0
            cr0_stats:
                    hits: 0
                    groups_considered: 0
                    useless_loops: 0
                    bad_suggestions: 0
            cr1_stats:
                    hits: 0
                    groups_considered: 0
                    useless_loops: 0
                    bad_suggestions: 0
            cr2_stats:
                    hits: 0
                    groups_considered: 0
                    useless_loops: 0
            cr3_stats:
                    hits: 0
                    groups_considered: 0
                    useless_loops: 0
            extents_scanned: 0
                    goal_hits: 0
                    2^n_hits: 0
                    breaks: 0
                    lost: 0
            buddies_generated: 0/40
            buddies_time_used: 0
            preallocated: 0
            discarded: 0
    
    Signed-off-by: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Reviewed-by: Ritesh Harjani <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20210401172129.189766-4-harshadshirwadkar@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 5354b2af3406 ("ext4: allow ext4_get_group_info() to fail")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b6a0c140e2790b5418560cc3c97bb23773cff8d
Author: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
Date:   Thu Apr 1 10:21:23 2021 -0700

    ext4: drop s_mb_bal_lock and convert protected fields to atomic
    
    [ Upstream commit 67d25186046145748d5fe4c5019d832215e01c1e ]
    
    s_mb_buddies_generated gets used later in this patch series to
    determine if the cr 0 and cr 1 optimziations should be performed or
    not. Currently, s_mb_buddies_generated is protected under a
    spin_lock. In the allocation path, it is better if we don't depend on
    the lock and instead read the value atomically. In order to do that,
    we drop s_bal_lock altogether and we convert the only two protected
    fields by it s_mb_buddies_generated and s_mb_generation_time to atomic
    type.
    
    Signed-off-by: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Reviewed-by: Ritesh Harjani <ritesh.list@gmail.com>
    Link: https://lore.kernel.org/r/20210401172129.189766-2-harshadshirwadkar@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 5354b2af3406 ("ext4: allow ext4_get_group_info() to fail")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0983142c5f17a62055ec851372273c3bc77e4788
Author: Chunguang Xu <brookxu@tencent.com>
Date:   Sat Nov 7 23:58:12 2020 +0800

    ext4: remove redundant mb_regenerate_buddy()
    
    [ Upstream commit 6bd97bf273bdb4944904e57480f6545bca48ad77 ]
    
    After this patch (163a203), if an abnormal bitmap is detected, we
    will mark the group as corrupt, and we will not use this group in
    the future. Therefore, it should be meaningless to regenerate the
    buddy bitmap of this group, It might be better to delete it.
    
    Signed-off-by: Chunguang Xu <brookxu@tencent.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/1604764698-4269-2-git-send-email-brookxu@tencent.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 5354b2af3406 ("ext4: allow ext4_get_group_info() to fail")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d48b7eea946905a6a77494909993ac4989017746
Author: Jan Kara <jack@suse.cz>
Date:   Tue Apr 11 14:10:19 2023 +0200

    ext4: fix lockdep warning when enabling MMP
    
    [ Upstream commit 949f95ff39bf188e594e7ecd8e29b82eb108f5bf ]
    
    When we enable MMP in ext4_multi_mount_protect() during mount or
    remount, we end up calling sb_start_write() from write_mmp_block(). This
    triggers lockdep warning because freeze protection ranks above s_umount
    semaphore we are holding during mount / remount. The problem is harmless
    because we are guaranteed the filesystem is not frozen during mount /
    remount but still let's fix the warning by not grabbing freeze
    protection from ext4_multi_mount_protect().
    
    Cc: stable@kernel.org
    Reported-by: syzbot+6b7df7d5506b32467149@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=ab7e5b6f400b7778d46f01841422e5718fb81843
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Christian Brauner <brauner@kernel.org>
    Link: https://lore.kernel.org/r/20230411121019.21940-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c87115520d2451f5689be7d9a463450d5b1bd96
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Fri May 5 21:02:30 2023 -0400

    ext4: don't clear SB_RDONLY when remounting r/w until quota is re-enabled
    
    [ Upstream commit a44be64bbecb15a452496f60db6eacfee2b59c79 ]
    
    When a file system currently mounted read/only is remounted
    read/write, if we clear the SB_RDONLY flag too early, before the quota
    is initialized, and there is another process/thread constantly
    attempting to create a directory, it's possible to trigger the
    
            WARN_ON_ONCE(dquot_initialize_needed(inode));
    
    in ext4_xattr_block_set(), with the following stack trace:
    
       WARNING: CPU: 0 PID: 5338 at fs/ext4/xattr.c:2141 ext4_xattr_block_set+0x2ef2/0x3680
       RIP: 0010:ext4_xattr_block_set+0x2ef2/0x3680 fs/ext4/xattr.c:2141
       Call Trace:
        ext4_xattr_set_handle+0xcd4/0x15c0 fs/ext4/xattr.c:2458
        ext4_initxattrs+0xa3/0x110 fs/ext4/xattr_security.c:44
        security_inode_init_security+0x2df/0x3f0 security/security.c:1147
        __ext4_new_inode+0x347e/0x43d0 fs/ext4/ialloc.c:1324
        ext4_mkdir+0x425/0xce0 fs/ext4/namei.c:2992
        vfs_mkdir+0x29d/0x450 fs/namei.c:4038
        do_mkdirat+0x264/0x520 fs/namei.c:4061
        __do_sys_mkdirat fs/namei.c:4076 [inline]
        __se_sys_mkdirat fs/namei.c:4074 [inline]
        __x64_sys_mkdirat+0x89/0xa0 fs/namei.c:4074
    
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20230506142419.984260-1-tytso@mit.edu
    Reported-by: syzbot+6385d7d3065524c5ca6d@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=6513f6cb5cd6b5fc9f37e3bb70d273b94be9c34c
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8284c7592d90cb3199597e24bdfd2419ec70a8b6
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Apr 27 22:49:34 2023 -0400

    ext4: reflect error codes from ext4_multi_mount_protect() to its callers
    
    [ Upstream commit 3b50d5018ed06a647bb26c44bb5ae74e59c903c7 ]
    
    This will allow more fine-grained errno codes to be returned by the
    mount system call.
    
    Cc: Andreas Dilger <adilger.kernel@dilger.ca>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44be64bbecb ("ext4: don't clear SB_RDONLY when remounting r/w until quota is re-enabled")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efd18a91c9c246abcbe413e10eeef0a4c4bb22e7
Author: Austin Kim <austindh.kim@gmail.com>
Date:   Tue Aug 24 04:49:29 2021 +0100

    ext4: remove an unused variable warning with CONFIG_QUOTA=n
    
    [ Upstream commit 3bbef91bdd2180c67407285ba160b023eb4d5306 ]
    
    The 'enable_quota' variable is only used in an CONFIG_QUOTA.
    With CONFIG_QUOTA=n, compiler causes a harmless warning:
    
    fs/ext4/super.c: In function ‘ext4_remount’:
    fs/ext4/super.c:5840:6: warning: variable ‘enable_quota’ set but not used
      [-Wunused-but-set-variable]
      int enable_quota = 0;
                  ^~~~~
    
    Move 'enable_quota' into the same #ifdef CONFIG_QUOTA block
    to remove an unused variable warning.
    
    Signed-off-by: Austin Kim <austindh.kim@gmail.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20210824034929.GA13415@raspberrypi
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: a44be64bbecb ("ext4: don't clear SB_RDONLY when remounting r/w until quota is re-enabled")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df1be652a45f0b2d0c60c154aa78ae87687f482c
Author: Zongjie Li <u202112089@hust.edu.cn>
Date:   Tue May 9 19:27:26 2023 +0800

    fbdev: arcfb: Fix error handling in arcfb_probe()
    
    [ Upstream commit 5a6bef734247c7a8c19511664ff77634ab86f45b ]
    
    Smatch complains that:
    arcfb_probe() warn: 'irq' from request_irq() not released on lines: 587.
    
    Fix error handling in the arcfb_probe() function. If IO addresses are
    not provided or framebuffer registration fails, the code will jump to
    the err_addr or err_register_fb label to release resources.
    If IRQ request fails, previously allocated resources will be freed.
    
    Fixes: 1154ea7dcd8e ("[PATCH] Framebuffer driver for Arc LCD board")
    Signed-off-by: Zongjie Li <u202112089@hust.edu.cn>
    Reviewed-by: Dongliang Mu <dzm91@hust.edu.cn>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd6b353671fc4b9b2f9134cf049fa49c21dfed91
Author: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
Date:   Tue Apr 18 07:04:30 2023 -0700

    drm/i915/dp: prevent potential div-by-zero
    
    [ Upstream commit 0ff80028e2702c7c3d78b69705dc47c1ccba8c39 ]
    
    drm_dp_dsc_sink_max_slice_count() may return 0 if something goes
    wrong on the part of the DSC sink and its DPCD register. This null
    value may be later used as a divisor in intel_dsc_compute_params(),
    which will lead to an error.
    In the unlikely event that this issue occurs, fix it by testing the
    return value of drm_dp_dsc_sink_max_slice_count() against zero.
    
    Found by Linux Verification Center (linuxtesting.org) with static
    analysis tool SVACE.
    
    Fixes: a4a157777c80 ("drm/i915/dp: Compute DSC pipe config in atomic check")
    Signed-off-by: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230418140430.69902-1-n.zhandarovich@fintech.ru
    (cherry picked from commit 51f7008239de011370c5067bbba07f0207f06b72)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8307e372e7445ec7d3cd2ff107ce5078eaa02815
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Tue May 9 17:34:56 2023 -0700

    af_unix: Fix data races around sk->sk_shutdown.
    
    [ Upstream commit e1d09c2c2f5793474556b60f83900e088d0d366d ]
    
    KCSAN found a data race around sk->sk_shutdown where unix_release_sock()
    and unix_shutdown() update it under unix_state_lock(), OTOH unix_poll()
    and unix_dgram_poll() read it locklessly.
    
    We need to annotate the writes and reads with WRITE_ONCE() and READ_ONCE().
    
    BUG: KCSAN: data-race in unix_poll / unix_release_sock
    
    write to 0xffff88800d0f8aec of 1 bytes by task 264 on cpu 0:
     unix_release_sock+0x75c/0x910 net/unix/af_unix.c:631
     unix_release+0x59/0x80 net/unix/af_unix.c:1042
     __sock_release+0x7d/0x170 net/socket.c:653
     sock_close+0x19/0x30 net/socket.c:1397
     __fput+0x179/0x5e0 fs/file_table.c:321
     ____fput+0x15/0x20 fs/file_table.c:349
     task_work_run+0x116/0x1a0 kernel/task_work.c:179
     resume_user_mode_work include/linux/resume_user_mode.h:49 [inline]
     exit_to_user_mode_loop kernel/entry/common.c:171 [inline]
     exit_to_user_mode_prepare+0x174/0x180 kernel/entry/common.c:204
     __syscall_exit_to_user_mode_work kernel/entry/common.c:286 [inline]
     syscall_exit_to_user_mode+0x1a/0x30 kernel/entry/common.c:297
     do_syscall_64+0x4b/0x90 arch/x86/entry/common.c:86
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    read to 0xffff88800d0f8aec of 1 bytes by task 222 on cpu 1:
     unix_poll+0xa3/0x2a0 net/unix/af_unix.c:3170
     sock_poll+0xcf/0x2b0 net/socket.c:1385
     vfs_poll include/linux/poll.h:88 [inline]
     ep_item_poll.isra.0+0x78/0xc0 fs/eventpoll.c:855
     ep_send_events fs/eventpoll.c:1694 [inline]
     ep_poll fs/eventpoll.c:1823 [inline]
     do_epoll_wait+0x6c4/0xea0 fs/eventpoll.c:2258
     __do_sys_epoll_wait fs/eventpoll.c:2270 [inline]
     __se_sys_epoll_wait fs/eventpoll.c:2265 [inline]
     __x64_sys_epoll_wait+0xcc/0x190 fs/eventpoll.c:2265
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3b/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    value changed: 0x00 -> 0x03
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 222 Comm: dbus-broker Not tainted 6.3.0-rc7-02330-gca6270c12e20 #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    
    Fixes: 3c73419c09a5 ("af_unix: fix 'poll for write'/ connected DGRAM sockets")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b977b0cbb6dd8d8d58f8e41390db9a7986b8e0c
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Tue May 9 17:34:55 2023 -0700

    af_unix: Fix a data race of sk->sk_receive_queue->qlen.
    
    [ Upstream commit 679ed006d416ea0cecfe24a99d365d1dea69c683 ]
    
    KCSAN found a data race of sk->sk_receive_queue->qlen where recvmsg()
    updates qlen under the queue lock and sendmsg() checks qlen under
    unix_state_sock(), not the queue lock, so the reader side needs
    READ_ONCE().
    
    BUG: KCSAN: data-race in __skb_try_recv_from_queue / unix_wait_for_peer
    
    write (marked) to 0xffff888019fe7c68 of 4 bytes by task 49792 on cpu 0:
     __skb_unlink include/linux/skbuff.h:2347 [inline]
     __skb_try_recv_from_queue+0x3de/0x470 net/core/datagram.c:197
     __skb_try_recv_datagram+0xf7/0x390 net/core/datagram.c:263
     __unix_dgram_recvmsg+0x109/0x8a0 net/unix/af_unix.c:2452
     unix_dgram_recvmsg+0x94/0xa0 net/unix/af_unix.c:2549
     sock_recvmsg_nosec net/socket.c:1019 [inline]
     ____sys_recvmsg+0x3a3/0x3b0 net/socket.c:2720
     ___sys_recvmsg+0xc8/0x150 net/socket.c:2764
     do_recvmmsg+0x182/0x560 net/socket.c:2858
     __sys_recvmmsg net/socket.c:2937 [inline]
     __do_sys_recvmmsg net/socket.c:2960 [inline]
     __se_sys_recvmmsg net/socket.c:2953 [inline]
     __x64_sys_recvmmsg+0x153/0x170 net/socket.c:2953
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3b/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    read to 0xffff888019fe7c68 of 4 bytes by task 49793 on cpu 1:
     skb_queue_len include/linux/skbuff.h:2127 [inline]
     unix_recvq_full net/unix/af_unix.c:229 [inline]
     unix_wait_for_peer+0x154/0x1a0 net/unix/af_unix.c:1445
     unix_dgram_sendmsg+0x13bc/0x14b0 net/unix/af_unix.c:2048
     sock_sendmsg_nosec net/socket.c:724 [inline]
     sock_sendmsg+0x148/0x160 net/socket.c:747
     ____sys_sendmsg+0x20e/0x620 net/socket.c:2503
     ___sys_sendmsg+0xc6/0x140 net/socket.c:2557
     __sys_sendmmsg+0x11d/0x370 net/socket.c:2643
     __do_sys_sendmmsg net/socket.c:2672 [inline]
     __se_sys_sendmmsg net/socket.c:2669 [inline]
     __x64_sys_sendmmsg+0x58/0x70 net/socket.c:2669
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3b/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    value changed: 0x0000000b -> 0x00000001
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 49793 Comm: syz-executor.0 Not tainted 6.3.0-rc7-02330-gca6270c12e20 #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb6ac4b5bdfed70b507e500eb903b9c0f03cda3b
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 9 17:31:31 2023 +0000

    net: datagram: fix data-races in datagram_poll()
    
    [ Upstream commit 5bca1d081f44c9443e61841842ce4e9179d327b6 ]
    
    datagram_poll() runs locklessly, we should add READ_ONCE()
    annotations while reading sk->sk_err, sk->sk_shutdown and sk->sk_state.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230509173131.3263780-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4a371d3f5a7a71dff1ab48b3122c5cf23cc7ad5
Author: t.feng <fengtao40@huawei.com>
Date:   Wed May 10 11:50:44 2023 +0800

    ipvlan:Fix out-of-bounds caused by unclear skb->cb
    
    [ Upstream commit 90cbed5247439a966b645b34eb0a2e037836ea8e ]
    
    If skb enqueue the qdisc, fq_skb_cb(skb)->time_to_send is changed which
    is actually skb->cb, and IPCB(skb_in)->opt will be used in
    __ip_options_echo. It is possible that memcpy is out of bounds and lead
    to stack overflow.
    We should clear skb->cb before ip_local_out or ip6_local_out.
    
    v2:
    1. clean the stack info
    2. use IPCB/IP6CB instead of skb->cb
    
    crash on stable-5.10(reproduce in kasan kernel).
    Stack info:
    [ 2203.651571] BUG: KASAN: stack-out-of-bounds in
    __ip_options_echo+0x589/0x800
    [ 2203.653327] Write of size 4 at addr ffff88811a388f27 by task
    swapper/3/0
    [ 2203.655460] CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Not tainted
    5.10.0-60.18.0.50.h856.kasan.eulerosv2r11.x86_64 #1
    [ 2203.655466] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
    BIOS rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000 04/01/2014
    [ 2203.655475] Call Trace:
    [ 2203.655481]  <IRQ>
    [ 2203.655501]  dump_stack+0x9c/0xd3
    [ 2203.655514]  print_address_description.constprop.0+0x19/0x170
    [ 2203.655530]  __kasan_report.cold+0x6c/0x84
    [ 2203.655586]  kasan_report+0x3a/0x50
    [ 2203.655594]  check_memory_region+0xfd/0x1f0
    [ 2203.655601]  memcpy+0x39/0x60
    [ 2203.655608]  __ip_options_echo+0x589/0x800
    [ 2203.655654]  __icmp_send+0x59a/0x960
    [ 2203.655755]  nf_send_unreach+0x129/0x3d0 [nf_reject_ipv4]
    [ 2203.655763]  reject_tg+0x77/0x1bf [ipt_REJECT]
    [ 2203.655772]  ipt_do_table+0x691/0xa40 [ip_tables]
    [ 2203.655821]  nf_hook_slow+0x69/0x100
    [ 2203.655828]  __ip_local_out+0x21e/0x2b0
    [ 2203.655857]  ip_local_out+0x28/0x90
    [ 2203.655868]  ipvlan_process_v4_outbound+0x21e/0x260 [ipvlan]
    [ 2203.655931]  ipvlan_xmit_mode_l3+0x3bd/0x400 [ipvlan]
    [ 2203.655967]  ipvlan_queue_xmit+0xb3/0x190 [ipvlan]
    [ 2203.655977]  ipvlan_start_xmit+0x2e/0xb0 [ipvlan]
    [ 2203.655984]  xmit_one.constprop.0+0xe1/0x280
    [ 2203.655992]  dev_hard_start_xmit+0x62/0x100
    [ 2203.656000]  sch_direct_xmit+0x215/0x640
    [ 2203.656028]  __qdisc_run+0x153/0x1f0
    [ 2203.656069]  __dev_queue_xmit+0x77f/0x1030
    [ 2203.656173]  ip_finish_output2+0x59b/0xc20
    [ 2203.656244]  __ip_finish_output.part.0+0x318/0x3d0
    [ 2203.656312]  ip_finish_output+0x168/0x190
    [ 2203.656320]  ip_output+0x12d/0x220
    [ 2203.656357]  __ip_queue_xmit+0x392/0x880
    [ 2203.656380]  __tcp_transmit_skb+0x1088/0x11c0
    [ 2203.656436]  __tcp_retransmit_skb+0x475/0xa30
    [ 2203.656505]  tcp_retransmit_skb+0x2d/0x190
    [ 2203.656512]  tcp_retransmit_timer+0x3af/0x9a0
    [ 2203.656519]  tcp_write_timer_handler+0x3ba/0x510
    [ 2203.656529]  tcp_write_timer+0x55/0x180
    [ 2203.656542]  call_timer_fn+0x3f/0x1d0
    [ 2203.656555]  expire_timers+0x160/0x200
    [ 2203.656562]  run_timer_softirq+0x1f4/0x480
    [ 2203.656606]  __do_softirq+0xfd/0x402
    [ 2203.656613]  asm_call_irq_on_stack+0x12/0x20
    [ 2203.656617]  </IRQ>
    [ 2203.656623]  do_softirq_own_stack+0x37/0x50
    [ 2203.656631]  irq_exit_rcu+0x134/0x1a0
    [ 2203.656639]  sysvec_apic_timer_interrupt+0x36/0x80
    [ 2203.656646]  asm_sysvec_apic_timer_interrupt+0x12/0x20
    [ 2203.656654] RIP: 0010:default_idle+0x13/0x20
    [ 2203.656663] Code: 89 f0 5d 41 5c 41 5d 41 5e c3 cc cc cc cc cc cc cc
    cc cc cc cc cc cc 0f 1f 44 00 00 0f 1f 44 00 00 0f 00 2d 9f 32 57 00 fb
    f4 <c3> cc cc cc cc 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 41 54 be 08
    [ 2203.656668] RSP: 0018:ffff88810036fe78 EFLAGS: 00000256
    [ 2203.656676] RAX: ffffffffaf2a87f0 RBX: ffff888100360000 RCX:
    ffffffffaf290191
    [ 2203.656681] RDX: 0000000000098b5e RSI: 0000000000000004 RDI:
    ffff88811a3c4f60
    [ 2203.656686] RBP: 0000000000000000 R08: 0000000000000001 R09:
    ffff88811a3c4f63
    [ 2203.656690] R10: ffffed10234789ec R11: 0000000000000001 R12:
    0000000000000003
    [ 2203.656695] R13: ffff888100360000 R14: 0000000000000000 R15:
    0000000000000000
    [ 2203.656729]  default_idle_call+0x5a/0x150
    [ 2203.656735]  cpuidle_idle_call+0x1c6/0x220
    [ 2203.656780]  do_idle+0xab/0x100
    [ 2203.656786]  cpu_startup_entry+0x19/0x20
    [ 2203.656793]  secondary_startup_64_no_verify+0xc2/0xcb
    
    [ 2203.657409] The buggy address belongs to the page:
    [ 2203.658648] page:0000000027a9842f refcount:1 mapcount:0
    mapping:0000000000000000 index:0x0 pfn:0x11a388
    [ 2203.658665] flags:
    0x17ffffc0001000(reserved|node=0|zone=2|lastcpupid=0x1fffff)
    [ 2203.658675] raw: 0017ffffc0001000 ffffea000468e208 ffffea000468e208
    0000000000000000
    [ 2203.658682] raw: 0000000000000000 0000000000000000 00000001ffffffff
    0000000000000000
    [ 2203.658686] page dumped because: kasan: bad access detected
    
    To reproduce(ipvlan with IPVLAN_MODE_L3):
    Env setting:
    =======================================================
    modprobe ipvlan ipvlan_default_mode=1
    sysctl net.ipv4.conf.eth0.forwarding=1
    iptables -t nat -A POSTROUTING -s 20.0.0.0/255.255.255.0 -o eth0 -j
    MASQUERADE
    ip link add gw link eth0 type ipvlan
    ip -4 addr add 20.0.0.254/24 dev gw
    ip netns add net1
    ip link add ipv1 link eth0 type ipvlan
    ip link set ipv1 netns net1
    ip netns exec net1 ip link set ipv1 up
    ip netns exec net1 ip -4 addr add 20.0.0.4/24 dev ipv1
    ip netns exec net1 route add default gw 20.0.0.254
    ip netns exec net1 tc qdisc add dev ipv1 root netem loss 10%
    ifconfig gw up
    iptables -t filter -A OUTPUT -p tcp --dport 8888 -j REJECT --reject-with
    icmp-port-unreachable
    =======================================================
    And then excute the shell(curl any address of eth0 can reach):
    
    for((i=1;i<=100000;i++))
    do
            ip netns exec net1 curl x.x.x.x:8888
    done
    =======================================================
    
    Fixes: 2ad7bf363841 ("ipvlan: Initial check-in of the IPVLAN driver.")
    Signed-off-by: "t.feng" <fengtao40@huawei.com>
    Suggested-by: Florian Westphal <fw@strlen.de>
    Reviewed-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 963fe9ed862697f43ac35e972709fcf76199236f
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 9 20:36:56 2023 +0000

    tcp: add annotations around sk->sk_shutdown accesses
    
    [ Upstream commit e14cadfd80d76f01bfaa1a8d745b1db19b57d6be ]
    
    Now sk->sk_shutdown is no longer a bitfield, we can add
    standard READ_ONCE()/WRITE_ONCE() annotations to silence
    KCSAN reports like the following:
    
    BUG: KCSAN: data-race in tcp_disconnect / tcp_poll
    
    write to 0xffff88814588582c of 1 bytes by task 3404 on cpu 1:
    tcp_disconnect+0x4d6/0xdb0 net/ipv4/tcp.c:3121
    __inet_stream_connect+0x5dd/0x6e0 net/ipv4/af_inet.c:715
    inet_stream_connect+0x48/0x70 net/ipv4/af_inet.c:727
    __sys_connect_file net/socket.c:2001 [inline]
    __sys_connect+0x19b/0x1b0 net/socket.c:2018
    __do_sys_connect net/socket.c:2028 [inline]
    __se_sys_connect net/socket.c:2025 [inline]
    __x64_sys_connect+0x41/0x50 net/socket.c:2025
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffff88814588582c of 1 bytes by task 3374 on cpu 0:
    tcp_poll+0x2e6/0x7d0 net/ipv4/tcp.c:562
    sock_poll+0x253/0x270 net/socket.c:1383
    vfs_poll include/linux/poll.h:88 [inline]
    io_poll_check_events io_uring/poll.c:281 [inline]
    io_poll_task_func+0x15a/0x820 io_uring/poll.c:333
    handle_tw_list io_uring/io_uring.c:1184 [inline]
    tctx_task_work+0x1fe/0x4d0 io_uring/io_uring.c:1246
    task_work_run+0x123/0x160 kernel/task_work.c:179
    get_signal+0xe64/0xff0 kernel/signal.c:2635
    arch_do_signal_or_restart+0x89/0x2a0 arch/x86/kernel/signal.c:306
    exit_to_user_mode_loop+0x6f/0xe0 kernel/entry/common.c:168
    exit_to_user_mode_prepare+0x6c/0xb0 kernel/entry/common.c:204
    __syscall_exit_to_user_mode_work kernel/entry/common.c:286 [inline]
    syscall_exit_to_user_mode+0x26/0x140 kernel/entry/common.c:297
    do_syscall_64+0x4d/0xc0 arch/x86/entry/common.c:86
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x03 -> 0x00
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f86568eca4c9808cc5e5aa3759ebba96c40b0131
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Mon Nov 16 10:48:04 2020 +0100

    tcp: factor out __tcp_close() helper
    
    [ Upstream commit 77c3c95637526f1e4330cc9a4b2065f668c2c4fe ]
    
    unlocked version of protocol level close, will be used by
    MPTCP to allow decouple orphaning and subflow level close.
    
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: e14cadfd80d7 ("tcp: add annotations around sk->sk_shutdown accesses")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34a5ee69ec6273f0aee79e7ce4d14afc83ca8122
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 9 13:18:57 2023 +0000

    net: add vlan_get_protocol_and_depth() helper
    
    [ Upstream commit 4063384ef762cc5946fc7a3f89879e76c6ec51e2 ]
    
    Before blamed commit, pskb_may_pull() was used instead
    of skb_header_pointer() in __vlan_get_protocol() and friends.
    
    Few callers depended on skb->head being populated with MAC header,
    syzbot caught one of them (skb_mac_gso_segment())
    
    Add vlan_get_protocol_and_depth() to make the intent clearer
    and use it where sensible.
    
    This is a more generic fix than commit e9d3f80935b6
    ("net/af_packet: make sure to pull mac header") which was
    dealing with a similar issue.
    
    kernel BUG at include/linux/skbuff.h:2655 !
    invalid opcode: 0000 [#1] SMP KASAN
    CPU: 0 PID: 1441 Comm: syz-executor199 Not tainted 6.1.24-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/14/2023
    RIP: 0010:__skb_pull include/linux/skbuff.h:2655 [inline]
    RIP: 0010:skb_mac_gso_segment+0x68f/0x6a0 net/core/gro.c:136
    Code: fd 48 8b 5c 24 10 44 89 6b 70 48 c7 c7 c0 ae 0d 86 44 89 e6 e8 a1 91 d0 00 48 c7 c7 00 af 0d 86 48 89 de 31 d2 e8 d1 4a e9 ff <0f> 0b 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 55 48 89 e5 41
    RSP: 0018:ffffc90001bd7520 EFLAGS: 00010286
    RAX: ffffffff8469736a RBX: ffff88810f31dac0 RCX: ffff888115a18b00
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: ffffc90001bd75e8 R08: ffffffff84697183 R09: fffff5200037adf9
    R10: 0000000000000000 R11: dffffc0000000001 R12: 0000000000000012
    R13: 000000000000fee5 R14: 0000000000005865 R15: 000000000000fed7
    FS: 000055555633f300(0000) GS:ffff8881f6a00000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020000000 CR3: 0000000116fea000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    [<ffffffff847018dd>] __skb_gso_segment+0x32d/0x4c0 net/core/dev.c:3419
    [<ffffffff8470398a>] skb_gso_segment include/linux/netdevice.h:4819 [inline]
    [<ffffffff8470398a>] validate_xmit_skb+0x3aa/0xee0 net/core/dev.c:3725
    [<ffffffff84707042>] __dev_queue_xmit+0x1332/0x3300 net/core/dev.c:4313
    [<ffffffff851a9ec7>] dev_queue_xmit+0x17/0x20 include/linux/netdevice.h:3029
    [<ffffffff851b4a82>] packet_snd net/packet/af_packet.c:3111 [inline]
    [<ffffffff851b4a82>] packet_sendmsg+0x49d2/0x6470 net/packet/af_packet.c:3142
    [<ffffffff84669a12>] sock_sendmsg_nosec net/socket.c:716 [inline]
    [<ffffffff84669a12>] sock_sendmsg net/socket.c:736 [inline]
    [<ffffffff84669a12>] __sys_sendto+0x472/0x5f0 net/socket.c:2139
    [<ffffffff84669c75>] __do_sys_sendto net/socket.c:2151 [inline]
    [<ffffffff84669c75>] __se_sys_sendto net/socket.c:2147 [inline]
    [<ffffffff84669c75>] __x64_sys_sendto+0xe5/0x100 net/socket.c:2147
    [<ffffffff8551d40f>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    [<ffffffff8551d40f>] do_syscall_64+0x2f/0x50 arch/x86/entry/common.c:80
    [<ffffffff85600087>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 469aceddfa3e ("vlan: consolidate VLAN parsing code and limit max parsing depth")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Toke Høiland-Jørgensen <toke@redhat.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ccf3edbafba96e9619f1196433005fcf7c2937f
Author: Menglong Dong <dong.menglong@zte.com.cn>
Date:   Thu Jan 14 18:32:38 2021 -0800

    net: tap: check vlan with eth_type_vlan() method
    
    [ Upstream commit b69df2608281b71575fbb3b9f426dbcc4be8a700 ]
    
    Replace some checks for ETH_P_8021Q and ETH_P_8021AD in
    drivers/net/tap.c with eth_type_vlan.
    
    Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
    Link: https://lore.kernel.org/r/20210115023238.4681-1-dong.menglong@zte.com.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 4063384ef762 ("net: add vlan_get_protocol_and_depth() helper")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4493914009609d6351b3a41dfe3b0ac5209bd4c6
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 9 18:29:48 2023 +0000

    net: deal with most data-races in sk_wait_event()
    
    [ Upstream commit d0ac89f6f9879fae316c155de77b5173b3e2c9c9 ]
    
    __condition is evaluated twice in sk_wait_event() macro.
    
    First invocation is lockless, and reads can race with writes,
    as spotted by syzbot.
    
    BUG: KCSAN: data-race in sk_stream_wait_connect / tcp_disconnect
    
    write to 0xffff88812d83d6a0 of 4 bytes by task 9065 on cpu 1:
    tcp_disconnect+0x2cd/0xdb0
    inet_shutdown+0x19e/0x1f0 net/ipv4/af_inet.c:911
    __sys_shutdown_sock net/socket.c:2343 [inline]
    __sys_shutdown net/socket.c:2355 [inline]
    __do_sys_shutdown net/socket.c:2363 [inline]
    __se_sys_shutdown+0xf8/0x140 net/socket.c:2361
    __x64_sys_shutdown+0x31/0x40 net/socket.c:2361
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffff88812d83d6a0 of 4 bytes by task 9040 on cpu 0:
    sk_stream_wait_connect+0x1de/0x3a0 net/core/stream.c:75
    tcp_sendmsg_locked+0x2e4/0x2120 net/ipv4/tcp.c:1266
    tcp_sendmsg+0x30/0x50 net/ipv4/tcp.c:1484
    inet6_sendmsg+0x63/0x80 net/ipv6/af_inet6.c:651
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg net/socket.c:747 [inline]
    __sys_sendto+0x246/0x300 net/socket.c:2142
    __do_sys_sendto net/socket.c:2154 [inline]
    __se_sys_sendto net/socket.c:2150 [inline]
    __x64_sys_sendto+0x78/0x90 net/socket.c:2150
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x00000000 -> 0x00000068
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b33bdd76635cf4f1de30ef48be87fca309c9e25
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 9 16:35:53 2023 +0000

    net: annotate sk->sk_err write from do_recvmmsg()
    
    [ Upstream commit e05a5f510f26607616fecdd4ac136310c8bea56b ]
    
    do_recvmmsg() can write to sk->sk_err from multiple threads.
    
    As said before, many other points reading or writing sk_err
    need annotations.
    
    Fixes: 34b88a68f26a ("net: Fix use after free in the recvmmsg exit path")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f92557f79a60cb142258f5fa7194f327573fadd8
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 9 16:56:34 2023 +0000

    netlink: annotate accesses to nlk->cb_running
    
    [ Upstream commit a939d14919b799e6fff8a9c80296ca229ba2f8a4 ]
    
    Both netlink_recvmsg() and netlink_native_seq_show() read
    nlk->cb_running locklessly. Use READ_ONCE() there.
    
    Add corresponding WRITE_ONCE() to netlink_dump() and
    __netlink_dump_start()
    
    syzbot reported:
    BUG: KCSAN: data-race in __netlink_dump_start / netlink_recvmsg
    
    write to 0xffff88813ea4db59 of 1 bytes by task 28219 on cpu 0:
    __netlink_dump_start+0x3af/0x4d0 net/netlink/af_netlink.c:2399
    netlink_dump_start include/linux/netlink.h:308 [inline]
    rtnetlink_rcv_msg+0x70f/0x8c0 net/core/rtnetlink.c:6130
    netlink_rcv_skb+0x126/0x220 net/netlink/af_netlink.c:2577
    rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:6192
    netlink_unicast_kernel net/netlink/af_netlink.c:1339 [inline]
    netlink_unicast+0x56f/0x640 net/netlink/af_netlink.c:1365
    netlink_sendmsg+0x665/0x770 net/netlink/af_netlink.c:1942
    sock_sendmsg_nosec net/socket.c:724 [inline]
    sock_sendmsg net/socket.c:747 [inline]
    sock_write_iter+0x1aa/0x230 net/socket.c:1138
    call_write_iter include/linux/fs.h:1851 [inline]
    new_sync_write fs/read_write.c:491 [inline]
    vfs_write+0x463/0x760 fs/read_write.c:584
    ksys_write+0xeb/0x1a0 fs/read_write.c:637
    __do_sys_write fs/read_write.c:649 [inline]
    __se_sys_write fs/read_write.c:646 [inline]
    __x64_sys_write+0x42/0x50 fs/read_write.c:646
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    read to 0xffff88813ea4db59 of 1 bytes by task 28222 on cpu 1:
    netlink_recvmsg+0x3b4/0x730 net/netlink/af_netlink.c:2022
    sock_recvmsg_nosec+0x4c/0x80 net/socket.c:1017
    ____sys_recvmsg+0x2db/0x310 net/socket.c:2718
    ___sys_recvmsg net/socket.c:2762 [inline]
    do_recvmmsg+0x2e5/0x710 net/socket.c:2856
    __sys_recvmmsg net/socket.c:2935 [inline]
    __do_sys_recvmmsg net/socket.c:2958 [inline]
    __se_sys_recvmmsg net/socket.c:2951 [inline]
    __x64_sys_recvmmsg+0xe2/0x160 net/socket.c:2951
    do_syscall_x64 arch/x86/entry/common.c:50 [inline]
    do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80
    entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    value changed: 0x00 -> 0x01
    
    Fixes: 16b304f3404f ("netlink: Eliminate kmalloc in netlink dump operation.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26001e75dc5c705b970698adfecc832f29c3a6e8
Author: Florian Westphal <fw@strlen.de>
Date:   Thu May 4 14:55:02 2023 +0200

    netfilter: conntrack: fix possible bug_on with enable_hooks=1
    
    [ Upstream commit e72eeab542dbf4f544e389e64fa13b82a1b6d003 ]
    
    I received a bug report (no reproducer so far) where we trip over
    
    712         rcu_read_lock();
    713         ct_hook = rcu_dereference(nf_ct_hook);
    714         BUG_ON(ct_hook == NULL);  // here
    
    In nf_conntrack_destroy().
    
    First turn this BUG_ON into a WARN.  I think it was triggered
    via enable_hooks=1 flag.
    
    When this flag is turned on, the conntrack hooks are registered
    before nf_ct_hook pointer gets assigned.
    This opens a short window where packets enter the conntrack machinery,
    can have skb->_nfct set up and a subsequent kfree_skb might occur
    before nf_ct_hook is set.
    
    Call nf_conntrack_init_end() to set nf_ct_hook before we register the
    pernet ops.
    
    Fixes: ba3fbe663635 ("netfilter: nf_conntrack: provide modparam to always register conntrack hooks")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d06f67b2b8dcd00d995c468428b6bccebc5762d8
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon May 8 10:55:43 2023 -0700

    net: Fix load-tearing on sk->sk_stamp in sock_recv_cmsgs().
    
    [ Upstream commit dfd9248c071a3710c24365897459538551cb7167 ]
    
    KCSAN found a data race in sock_recv_cmsgs() where the read access
    to sk->sk_stamp needs READ_ONCE().
    
    BUG: KCSAN: data-race in packet_recvmsg / packet_recvmsg
    
    write (marked) to 0xffff88803c81f258 of 8 bytes by task 19171 on cpu 0:
     sock_write_timestamp include/net/sock.h:2670 [inline]
     sock_recv_cmsgs include/net/sock.h:2722 [inline]
     packet_recvmsg+0xb97/0xd00 net/packet/af_packet.c:3489
     sock_recvmsg_nosec net/socket.c:1019 [inline]
     sock_recvmsg+0x11a/0x130 net/socket.c:1040
     sock_read_iter+0x176/0x220 net/socket.c:1118
     call_read_iter include/linux/fs.h:1845 [inline]
     new_sync_read fs/read_write.c:389 [inline]
     vfs_read+0x5e0/0x630 fs/read_write.c:470
     ksys_read+0x163/0x1a0 fs/read_write.c:613
     __do_sys_read fs/read_write.c:623 [inline]
     __se_sys_read fs/read_write.c:621 [inline]
     __x64_sys_read+0x41/0x50 fs/read_write.c:621
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3b/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    read to 0xffff88803c81f258 of 8 bytes by task 19183 on cpu 1:
     sock_recv_cmsgs include/net/sock.h:2721 [inline]
     packet_recvmsg+0xb64/0xd00 net/packet/af_packet.c:3489
     sock_recvmsg_nosec net/socket.c:1019 [inline]
     sock_recvmsg+0x11a/0x130 net/socket.c:1040
     sock_read_iter+0x176/0x220 net/socket.c:1118
     call_read_iter include/linux/fs.h:1845 [inline]
     new_sync_read fs/read_write.c:389 [inline]
     vfs_read+0x5e0/0x630 fs/read_write.c:470
     ksys_read+0x163/0x1a0 fs/read_write.c:613
     __do_sys_read fs/read_write.c:623 [inline]
     __se_sys_read fs/read_write.c:621 [inline]
     __x64_sys_read+0x41/0x50 fs/read_write.c:621
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3b/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    value changed: 0xffffffffc4653600 -> 0x0000000000000000
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 19183 Comm: syz-executor.5 Not tainted 6.3.0-rc7-02330-gca6270c12e20 #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014
    
    Fixes: 6c7c98bad488 ("sock: avoid dirtying sk_stamp, if possible")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230508175543.55756-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8eb35b1aca842963182e8e7c70b6238ee6461941
Author: Roy Novich <royno@nvidia.com>
Date:   Sun May 7 16:57:43 2023 +0300

    linux/dim: Do nothing if no time delta between samples
    
    [ Upstream commit 162bd18eb55adf464a0fa2b4144b8d61c75ff7c2 ]
    
    Add return value for dim_calc_stats. This is an indication for the
    caller if curr_stats was assigned by the function. Avoid using
    curr_stats uninitialized over {rdma/net}_dim, when no time delta between
    samples. Coverity reported this potential use of an uninitialized
    variable.
    
    Fixes: 4c4dbb4a7363 ("net/mlx5e: Move dynamic interrupt coalescing code to include/linux")
    Fixes: cb3c7fd4f839 ("net/mlx5e: Support adaptive RX coalescing")
    Signed-off-by: Roy Novich <royno@nvidia.com>
    Reviewed-by: Aya Levin <ayal@nvidia.com>
    Reviewed-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Michal Kubiak <michal.kubiak@intel.com>
    Link: https://lore.kernel.org/r/20230507135743.138993-1-tariqt@nvidia.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d3ae448e850019449024a02aec814e1c889111c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri May 5 20:39:33 2023 +0200

    net: mdio: mvusb: Fix an error handling path in mvusb_mdio_probe()
    
    [ Upstream commit 27c1eaa07283b0c94becf8241f95368267cf558b ]
    
    Should of_mdiobus_register() fail, a previous usb_get_dev() call should be
    undone as in the .disconnect function.
    
    Fixes: 04e37d92fbed ("net: phy: add marvell usb to mdio controller")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b882224d73671b77398e235449390e5af84ff6ae
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Apr 23 06:48:45 2023 +0100

    ARM: 9296/1: HP Jornada 7XX: fix kernel-doc warnings
    
    [ Upstream commit 46dd6078dbc7e363a8bb01209da67015a1538929 ]
    
    Fix kernel-doc warnings from the kernel test robot:
    
    jornada720_ssp.c:24: warning: Function parameter or member 'jornada_ssp_lock' not described in 'DEFINE_SPINLOCK'
    jornada720_ssp.c:24: warning: expecting prototype for arch/arm/mac(). Prototype was for DEFINE_SPINLOCK() instead
    jornada720_ssp.c:34: warning: Function parameter or member 'byte' not described in 'jornada_ssp_reverse'
    jornada720_ssp.c:57: warning: Function parameter or member 'byte' not described in 'jornada_ssp_byte'
    jornada720_ssp.c:85: warning: Function parameter or member 'byte' not described in 'jornada_ssp_inout'
    
    Link: lore.kernel.org/r/202304210535.tWby3jWF-lkp@intel.com
    
    Fixes: 69ebb22277a5 ("[ARM] 4506/1: HP Jornada 7XX: Addition of SSP Platform Driver")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Kristoffer Ericson <Kristoffer.ericson@gmail.com>
    Cc: patches@armlinux.org.uk
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 139c27648f8d3b2283f74715d8e7f0df7f5e55ca
Author: Saravana Kannan <saravanak@google.com>
Date:   Thu Mar 9 22:39:09 2023 -0800

    drm/mipi-dsi: Set the fwnode for mipi_dsi_device
    
    [ Upstream commit a26cc2934331b57b5a7164bff344f0a2ec245fc0 ]
    
    After commit 3fb16866b51d ("driver core: fw_devlink: Make cycle
    detection more robust"), fw_devlink prints an error when consumer
    devices don't have their fwnode set. This used to be ignored silently.
    
    Set the fwnode mipi_dsi_device so fw_devlink can find them and properly
    track their dependencies.
    
    This fixes errors like this:
    [    0.334054] nwl-dsi 30a00000.mipi-dsi: Failed to create device link with regulator-lcd-1v8
    [    0.346964] nwl-dsi 30a00000.mipi-dsi: Failed to create device link with backlight-dsi
    
    Reported-by: Martin Kepplinger <martin.kepplinger@puri.sm>
    Link: https://lore.kernel.org/lkml/2a8e407f4f18c9350f8629a2b5fa18673355b2ae.camel@puri.sm/
    Fixes: 068a00233969 ("drm: Add MIPI DSI bus support")
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    Tested-by: Martin Kepplinger <martin.kepplinger@puri.sm>
    Link: https://lore.kernel.org/r/20230310063910.2474472-1-saravanak@google.com
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 423908e89d7d3185097a144b7c6fe0b3a48f1518
Author: Ioana Ciornei <ioana.ciornei@nxp.com>
Date:   Thu Jun 17 15:29:04 2021 +0300

    driver core: add a helper to setup both the of_node and fwnode of a device
    
    [ Upstream commit 43e76d463c09a0272b84775bcc727c1eb8b384b2 ]
    
    There are many places where both the fwnode_handle and the of_node of a
    device need to be populated. Add a function which does both so that we
    have consistency.
    
    Suggested-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: a26cc2934331 ("drm/mipi-dsi: Set the fwnode for mipi_dsi_device")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

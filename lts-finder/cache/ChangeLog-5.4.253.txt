commit 4b4223f7d26d90087de52c8649e42ad8fff2e90a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 11 11:54:02 2023 +0200

    Linux 5.4.253
    
    Link: https://lore.kernel.org/r/20230809103636.887175326@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e5374875f96192099cd773c1b45079a986f8aa1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Sep 9 09:37:40 2020 +0200

    Revert "driver core: Annotate dev_err_probe() with __must_check"
    
    commit f601e8f37c2c1c52f2923fffc48204a7f7dc023d upstream.
    
    This reverts commit e1f82a0dcf388d98bcc7ad195c03bd812405e6b2 as it's
    already starting to cause build warnings in linux-next for things that
    are "obviously correct".
    
    It's up to driver authors do "do the right thing" here with this
    function, and if they don't want to call it as the last line of a
    function, that's up to them, otherwise code that looks like:
            ret = dev_err_probe(..., ret, ...);
    does look really "odd".
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Reported-by: Krzysztof Kozlowski <krzk@kernel.org>
    Fixes: e1f82a0dcf38 ("driver core: Annotate dev_err_probe() with __must_check")
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca33c070415166b094c2750a6190846473c95802
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Wed Sep 9 11:53:43 2020 +0200

    drivers: core: fix kernel-doc markup for dev_err_probe()
    
    commit 074b3aad307de6126fbac1fff4996d1034b48fee upstream.
    
    There are two literal blocks there. Fix the markups, in order
    to produce the right html output and solve those warnings:
    
            ./drivers/base/core.c:4218: WARNING: Unexpected indentation.
            ./drivers/base/core.c:4222: WARNING: Definition list ends without a blank line; unexpected unindent.
            ./drivers/base/core.c:4223: WARNING: Block quote ends without a blank line; unexpected unindent.
    
    Fixes: a787e5400a1c ("driver core: add device probe log helper")
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04ece65d9bad8638c9b38f3edabc6e516335edf8
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Aug 28 18:14:35 2020 +0200

    driver code: print symbolic error code
    
    commit 693a8e936590f93451e6f5a3d748616f5a59c80b upstream.
    
    dev_err_probe() prepends the message with an error code. Let's make it
    more readable by translating the code to a more recognisable symbol.
    
    Fixes: a787e5400a1c ("driver core: add device probe log helper")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/ea3f973e4708919573026fdce52c264db147626d.1598630856.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2c1b4f9c15781fec5341621ce60f5cf1f2fad61
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Aug 26 13:44:59 2020 +0300

    driver core: Annotate dev_err_probe() with __must_check
    
    commit e1f82a0dcf388d98bcc7ad195c03bd812405e6b2 upstream.
    
    We have got already new users of this API which interpret it differently
    and miss the opportunity to optimize their code.
    
    In order to avoid similar cases in the future, annotate dev_err_probe()
    with __must_check.
    
    Fixes: a787e5400a1c ("driver core: add device probe log helper")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20200826104459.81979-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e8fc2ddffee281788b8d6d38f2ca80e28572561
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Mon Jul 17 10:28:33 2023 +0800

    ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node
    
    [ Upstream commit ee70b908f77a9d8f689dea986f09e6d7dc481934 ]
    
    Property name "phy-3p0-supply" is used instead of "phy-reg_3p0-supply".
    
    Fixes: 9f30b6b1a957 ("ARM: dts: imx: Add basic dtsi file for imx6sll")
    cc: <stable@vger.kernel.org>
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1ba8725577bcd009dd0a6daa5b18c4928533796
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Sep 24 11:14:37 2021 +0200

    ARM: dts: imx6sll: fixup of operating points
    
    [ Upstream commit 1875903019ea6e32e6e544c1631b119e4fd60b20 ]
    
    Make operating point definitions comply with binding
    specifications.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: ee70b908f77a ("ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c71d73945d26931e98f4f6c3b54ba9273fb4021
Author: Peng Fan <peng.fan@nxp.com>
Date:   Sun Nov 1 19:29:53 2020 +0800

    ARM: dts: imx: add usb alias
    
    [ Upstream commit 5c8b3b8a182cbc1ccdfcdeea9b25dd2c12a8148f ]
    
    Add usb alias for bootloader searching the controller in correct order.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: ee70b908f77a ("ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66579ee141a5fe70f6d87397dc3b57498856f08b
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri Jun 26 10:06:31 2020 +0200

    ARM: dts: imx: Align L2 cache-controller nodename with dtschema
    
    [ Upstream commit 69cc1502a87f5ed12e27dbe5fe2bfdd5540826c7 ]
    
    Fix dtschema validator warnings like:
        l2-cache@a02000: $nodename:0:
            'l2-cache@a02000' does not match '^(cache-controller|cpu)(@[0-9a-f,]+)*$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: ee70b908f77a ("ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b454fb938e114b81fd6717c32dbc84523a820e4
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Tue Jun 2 18:44:50 2020 +0800

    ARM: dts: imx6sll: Make ssi node name same as other platforms
    
    [ Upstream commit 5da1b522cf7dc51f7fde2cca8d90406b0291c503 ]
    
    In imx6sll.dtsi, the ssi node name is different with other
    platforms (imx6qdl, imx6sl, imx6sx), but the
    sound/soc/fsl/fsl-asoc-card.c machine driver needs to check
    ssi node name for audmux configuration, then different ssi
    node name causes issue on imx6sll platform.
    
    So we change ssi node name to make all platforms have same
    name.
    
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: ee70b908f77a ("ARM: dts: nxp/imx6sll: fix wrong property name in usbphy node")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03b119d900fdb9526c8cbf6adb2268b01e5e90f5
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Tue Jul 11 15:44:30 2023 -0500

    arm64: dts: stratix10: fix incorrect I2C property for SCL signal
    
    [ Upstream commit db66795f61354c373ecdadbdae1ed253a96c47cb ]
    
    The correct dts property for the SCL falling time is
    "i2c-scl-falling-time-ns".
    
    Fixes: c8da1d15b8a4 ("arm64: dts: stratix10: i2c clock running out of spec")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72c946246e21665fc12a5fcbabac553ad0f085c8
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Jul 25 12:03:59 2023 +0800

    ceph: defer stopping mdsc delayed_work
    
    [ Upstream commit e7e607bd00481745550389a29ecabe33e13d67cf ]
    
    Flushing the dirty buffer may take a long time if the cluster is
    overloaded or if there is network issue. So we should ping the
    MDSs periodically to keep alive, else the MDS will blocklist
    the kclient.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/61843
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Milind Changire <mchangir@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f82fe11a30aee5199855cf4837bf48e23ca02336
Author: Jeff Layton <jlayton@kernel.org>
Date:   Fri Sep 11 15:19:00 2020 -0400

    ceph: use kill_anon_super helper
    
    [ Upstream commit 470a5c77eac0e07bfe60413fb3d314b734392bc3 ]
    
    ceph open-codes this around some other activity and the rationale
    for it isn't clear. There is no need to delay free_anon_bdev until
    the end of kill_sb.
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Stable-dep-of: e7e607bd0048 ("ceph: defer stopping mdsc delayed_work")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82edffead58642796f085e9cd4c01a687883942c
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Nov 20 12:00:59 2019 -0500

    ceph: show tasks waiting on caps in debugfs caps file
    
    [ Upstream commit 3a3430affce5de301fc8e6e50fa3543d7597820e ]
    
    Add some visibility of tasks that are waiting for caps to the "caps"
    debugfs file. Display the tgid of the waiting task, inode number, and
    the caps the task needs and wants.
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Stable-dep-of: e7e607bd0048 ("ceph: defer stopping mdsc delayed_work")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 632023a2b3acac95e32e1ce549c2e761209d9b4b
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Thu Jul 13 16:57:39 2023 +0200

    PM: sleep: wakeirq: fix wake irq arming
    
    [ Upstream commit 8527beb12087238d4387607597b4020bc393c4b4 ]
    
    The decision whether to enable a wake irq during suspend can not be done
    based on the runtime PM state directly as a driver may use wake irqs
    without implementing runtime PM. Such drivers specifically leave the
    state set to the default 'suspended' and the wake irq is thus never
    enabled at suspend.
    
    Add a new wake irq flag to track whether a dedicated wake irq has been
    enabled at runtime suspend and therefore must not be enabled at system
    suspend.
    
    Note that pm_runtime_enabled() can not be used as runtime PM is always
    disabled during late suspend.
    
    Fixes: 69728051f5bf ("PM / wakeirq: Fix unbalanced IRQ enable for wakeirq")
    Cc: 4.16+ <stable@vger.kernel.org> # 4.16+
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7f34e2cdd1210378a03bcbb6a373926bf4c2305
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Mon Oct 25 15:01:53 2021 +0800

    PM / wakeirq: support enabling wake-up irq after runtime_suspend called
    
    [ Upstream commit 259714100d98b50bf04d36a21bf50ca8b829fc11 ]
    
    When the dedicated wake IRQ is level trigger, and it uses the
    device's low-power status as the wakeup source, that means if the
    device is not in low-power state, the wake IRQ will be triggered
    if enabled; For this case, need enable the wake IRQ after running
    the device's ->runtime_suspend() which make it enter low-power state.
    
    e.g.
    Assume the wake IRQ is a low level trigger type, and the wakeup
    signal comes from the low-power status of the device.
    The wakeup signal is low level at running time (0), and becomes
    high level when the device enters low-power state (runtime_suspend
    (1) is called), a wakeup event at (2) make the device exit low-power
    state, then the wakeup signal also becomes low level.
    
                    ------------------
                   |           ^     ^|
    ----------------           |     | --------------
     |<---(0)--->|<--(1)--|   (3)   (2)    (4)
    
    if enable the wake IRQ before running runtime_suspend during (0),
    a wake IRQ will arise, it causes resume immediately;
    it works if enable wake IRQ ( e.g. at (3) or (4)) after running
    ->runtime_suspend().
    
    This patch introduces a new status WAKE_IRQ_DEDICATED_REVERSE to
    optionally support enabling wake IRQ after running ->runtime_suspend().
    
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Stable-dep-of: 8527beb12087 ("PM: sleep: wakeirq: fix wake irq arming")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cbffa33749a433b7b216a4f6d26622d5039dcf1
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Jul 21 15:33:52 2023 -0700

    selftests/rseq: Play nice with binaries statically linked against glibc 2.35+
    
    [ Upstream commit 3bcbc20942db5d738221cca31a928efc09827069 ]
    
    To allow running rseq and KVM's rseq selftests as statically linked
    binaries, initialize the various "trampoline" pointers to point directly
    at the expect glibc symbols, and skip the dlysm() lookups if the rseq
    size is non-zero, i.e. the binary is statically linked *and* the libc
    registered its own rseq.
    
    Define weak versions of the symbols so as not to break linking against
    libc versions that don't support rseq in any capacity.
    
    The KVM selftests in particular are often statically linked so that they
    can be run on targets with very limited runtime environments, i.e. test
    machines.
    
    Fixes: 233e667e1ae3 ("selftests/rseq: Uplift rseq selftests for compatibility with glibc-2.35")
    Cc: Aaron Lewis <aaronlewis@google.com>
    Cc: kvm@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20230721223352.2333911-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13553469bdbde9e9566702225b8bef7f0f859acb
Author: Michael Jeanson <mjeanson@efficios.com>
Date:   Tue Jun 14 11:48:30 2022 -0400

    selftests/rseq: check if libc rseq support is registered
    
    [ Upstream commit d1a997ba4c1bf65497d956aea90de42a6398f73a ]
    
    When checking for libc rseq support in the library constructor, don't
    only depend on the symbols presence, check that the registration was
    completed.
    
    This targets a scenario where the libc has rseq support but it is not
    wired for the current architecture in 'bits/rseq.h', we want to fallback
    to our internal registration mechanism.
    
    Signed-off-by: Michael Jeanson <mjeanson@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Link: https://lore.kernel.org/r/20220614154830.1367382-4-mjeanson@efficios.com
    Stable-dep-of: 3bcbc20942db ("selftests/rseq: Play nice with binaries statically linked against glibc 2.35+")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a65e7b4b31caaa635fdb95e0ca08b6c64049a4f2
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Mon Jul 24 23:43:20 2023 +0530

    powerpc/mm/altmap: Fix altmap boundary check
    
    [ Upstream commit 6722b25712054c0f903b839b8f5088438dd04df3 ]
    
    altmap->free includes the entire free space from which altmap blocks
    can be allocated. So when checking whether the kernel is doing altmap
    block free, compute the boundary correctly, otherwise memory hotunplug
    can fail.
    
    Fixes: 9ef34630a461 ("powerpc/mm: Fallback to RAM if the altmap is unusable")
    Signed-off-by: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20230724181320.471386-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8cf0f83cf041bb6d4ae933eb97ed4c76adc3685
Author: Roger Quadros <rogerq@kernel.org>
Date:   Sun Jun 25 00:10:21 2023 +0530

    mtd: rawnand: omap_elm: Fix incorrect type in assignment
    
    [ Upstream commit d8403b9eeee66d5dd81ecb9445800b108c267ce3 ]
    
    Once the ECC word endianness is converted to BE32, we force cast it
    to u32 so we can use elm_write_reg() which in turn uses writel().
    
    Fixes below sparse warnings:
    
       drivers/mtd/nand/raw/omap_elm.c:180:37: sparse:     expected unsigned int [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:180:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:185:37: sparse:     expected unsigned int [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:185:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:190:37: sparse:     expected unsigned int [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:190:37: sparse:     got restricted __be32 [usertype]
    >> drivers/mtd/nand/raw/omap_elm.c:200:40: sparse: sparse: restricted __be32 degrades to integer
       drivers/mtd/nand/raw/omap_elm.c:206:39: sparse: sparse: restricted __be32 degrades to integer
       drivers/mtd/nand/raw/omap_elm.c:210:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:210:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:213:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:213:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:216:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:216:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:219:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:219:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:222:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:222:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:225:37: sparse:     expected unsigned int [assigned] [usertype] val
       drivers/mtd/nand/raw/omap_elm.c:225:37: sparse:     got restricted __be32 [usertype]
       drivers/mtd/nand/raw/omap_elm.c:228:39: sparse: sparse: restricted __be32 degrades to integer
    
    Fixes: bf22433575ef ("mtd: devices: elm: Add support for ELM error correction")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202306212211.WDXokuWh-lkp@intel.com/
    Signed-off-by: Roger Quadros <rogerq@kernel.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230624184021.7740-1-rogerq@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2af8ed119722a6f3abc728b37efe3ff12e988517
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue Jun 6 09:08:10 2023 +0200

    test_firmware: return ENOMEM instead of ENOSPC on failed memory allocation
    
    commit 7dae593cd226a0bca61201cf85ceb9335cf63682 upstream.
    
    In a couple of situations like
    
            name = kstrndup(buf, count, GFP_KERNEL);
            if (!name)
                    return -ENOSPC;
    
    the error is not actually "No space left on device", but "Out of memory".
    
    It is semantically correct to return -ENOMEM in all failed kstrndup()
    and kzalloc() cases in this driver, as it is not a problem with disk
    space, but with kernel memory allocator failing allocation.
    
    The semantically correct should be:
    
            name = kstrndup(buf, count, GFP_KERNEL);
            if (!name)
                    return -ENOMEM;
    
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Luis R. Rodriguez" <mcgrof@ruslug.rutgers.edu>
    Cc: Scott Branden <sbranden@broadcom.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Brian Norris <briannorris@chromium.org>
    Fixes: c92316bf8e948 ("test_firmware: add batched firmware tests")
    Fixes: 0a8adf584759c ("test: add firmware_class loader test")
    Fixes: 548193cba2a7d ("test_firmware: add support for firmware_request_platform")
    Fixes: eb910947c82f9 ("test: firmware_class: add asynchronous request trigger")
    Fixes: 061132d2b9c95 ("test_firmware: add test custom fallback trigger")
    Fixes: 7feebfa487b92 ("test_firmware: add support for request_firmware_into_buf")
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Dan Carpenter <dan.carpenter@linaro.org>
    Message-ID: <20230606070808.9300-1-mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f68b0f8eb5ae147d316ac673837da4c42dfe1fe
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue May 9 10:47:45 2023 +0200

    test_firmware: prevent race conditions by a correct implementation of locking
    
    commit 4acfe3dfde685a5a9eaec5555351918e2d7266a1 upstream.
    
    Dan Carpenter spotted a race condition in a couple of situations like
    these in the test_firmware driver:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            u8 val;
            int ret;
    
            ret = kstrtou8(buf, 10, &val);
            if (ret)
                    return ret;
    
            mutex_lock(&test_fw_mutex);
            *(u8 *)cfg = val;
            mutex_unlock(&test_fw_mutex);
    
            /* Always return full write size even if we didn't consume all */
            return size;
    }
    
    static ssize_t config_num_requests_store(struct device *dev,
                                             struct device_attribute *attr,
                                             const char *buf, size_t count)
    {
            int rc;
    
            mutex_lock(&test_fw_mutex);
            if (test_fw_config->reqs) {
                    pr_err("Must call release_all_firmware prior to changing config\n");
                    rc = -EINVAL;
                    mutex_unlock(&test_fw_mutex);
                    goto out;
            }
            mutex_unlock(&test_fw_mutex);
    
            rc = test_dev_config_update_u8(buf, count,
                                           &test_fw_config->num_requests);
    
    out:
            return rc;
    }
    
    static ssize_t config_read_fw_idx_store(struct device *dev,
                                            struct device_attribute *attr,
                                            const char *buf, size_t count)
    {
            return test_dev_config_update_u8(buf, count,
                                             &test_fw_config->read_fw_idx);
    }
    
    The function test_dev_config_update_u8() is called from both the locked
    and the unlocked context, function config_num_requests_store() and
    config_read_fw_idx_store() which can both be called asynchronously as
    they are driver's methods, while test_dev_config_update_u8() and siblings
    change their argument pointed to by u8 *cfg or similar pointer.
    
    To avoid deadlock on test_fw_mutex, the lock is dropped before calling
    test_dev_config_update_u8() and re-acquired within test_dev_config_update_u8()
    itself, but alas this creates a race condition.
    
    Having two locks wouldn't assure a race-proof mutual exclusion.
    
    This situation is best avoided by the introduction of a new, unlocked
    function __test_dev_config_update_u8() which can be called from the locked
    context and reducing test_dev_config_update_u8() to:
    
    static int test_dev_config_update_u8(const char *buf, size_t size, u8 *cfg)
    {
            int ret;
    
            mutex_lock(&test_fw_mutex);
            ret = __test_dev_config_update_u8(buf, size, cfg);
            mutex_unlock(&test_fw_mutex);
    
            return ret;
    }
    
    doing the locking and calling the unlocked primitive, which enables both
    locked and unlocked versions without duplication of code.
    
    The similar approach was applied to all functions called from the locked
    and the unlocked context, which safely mitigates both deadlocks and race
    conditions in the driver.
    
    __test_dev_config_update_bool(), __test_dev_config_update_u8() and
    __test_dev_config_update_size_t() unlocked versions of the functions
    were introduced to be called from the locked contexts as a workaround
    without releasing the main driver's lock and thereof causing a race
    condition.
    
    The test_dev_config_update_bool(), test_dev_config_update_u8() and
    test_dev_config_update_size_t() locked versions of the functions
    are being called from driver methods without the unnecessary multiplying
    of the locking and unlocking code for each method, and complicating
    the code with saving of the return value across lock.
    
    Fixes: 7feebfa487b92 ("test_firmware: add support for request_firmware_into_buf")
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Russ Weight <russell.h.weight@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tianfei Zhang <tianfei.zhang@intel.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Colin Ian King <colin.i.king@gmail.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: linux-kselftest@vger.kernel.org
    Cc: stable@vger.kernel.org # v5.4
    Suggested-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/r/20230509084746.48259-1-mirsad.todorovac@alu.unizg.hr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 040cdadf9fdcbe924e52becea9d992ac07dcdb2e
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jun 13 12:25:52 2023 +0200

    ext2: Drop fragment support
    
    commit 404615d7f1dcd4cca200e9a7a9df3a1dcae1dd62 upstream.
    
    Ext2 has fields in superblock reserved for subblock allocation support.
    However that never landed. Drop the many years dead code.
    
    Reported-by: syzbot+af5e10f73dbff48f70af@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0336b42456e485fda1006b5b411e7372e20fbf03
Author: Jan Kara <jack@suse.cz>
Date:   Thu Jun 15 13:38:48 2023 +0200

    fs: Protect reconfiguration of sb read-write from racing writes
    
    commit c541dce86c537714b6761a79a969c1623dfa222b upstream.
    
    The reconfigure / remount code takes a lot of effort to protect
    filesystem's reconfiguration code from racing writes on remounting
    read-only. However during remounting read-only filesystem to read-write
    mode userspace writes can start immediately once we clear SB_RDONLY
    flag. This is inconvenient for example for ext4 because we need to do
    some writes to the filesystem (such as preparation of quota files)
    before we can take userspace writes so we are clearing SB_RDONLY flag
    before we are fully ready to accept userpace writes and syzbot has found
    a way to exploit this [1]. Also as far as I'm reading the code
    the filesystem remount code was protected from racing writes in the
    legacy mount path by the mount's MNT_READONLY flag so this is relatively
    new problem. It is actually fairly easy to protect remount read-write
    from racing writes using sb->s_readonly_remount flag so let's just do
    that instead of having to workaround these races in the filesystem code.
    
    [1] https://lore.kernel.org/all/00000000000006a0df05f6667499@google.com/T/
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Message-Id: <20230615113848.8439-1-jack@suse.cz>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a05ac5d00eb7fcb2fda806caa4f56e88df6bc6bb
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Jul 12 10:15:10 2023 -0400

    net: usbnet: Fix WARNING in usbnet_start_xmit/usb_submit_urb
    
    commit 5e1627cb43ddf1b24b92eb26f8d958a3f5676ccb upstream.
    
    The syzbot fuzzer identified a problem in the usbnet driver:
    
    usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    WARNING: CPU: 0 PID: 754 at drivers/usb/core/urb.c:504 usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Modules linked in:
    CPU: 0 PID: 754 Comm: kworker/0:2 Not tainted 6.4.0-rc7-syzkaller-00014-g692b7dc87ca6 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/27/2023
    Workqueue: mld mld_ifc_work
    RIP: 0010:usb_submit_urb+0xed6/0x1880 drivers/usb/core/urb.c:504
    Code: 7c 24 18 e8 2c b4 5b fb 48 8b 7c 24 18 e8 42 07 f0 fe 41 89 d8 44 89 e1 4c 89 ea 48 89 c6 48 c7 c7 a0 c9 fc 8a e8 5a 6f 23 fb <0f> 0b e9 58 f8 ff ff e8 fe b3 5b fb 48 81 c5 c0 05 00 00 e9 84 f7
    RSP: 0018:ffffc9000463f568 EFLAGS: 00010086
    RAX: 0000000000000000 RBX: 0000000000000001 RCX: 0000000000000000
    RDX: ffff88801eb28000 RSI: ffffffff814c03b7 RDI: 0000000000000001
    RBP: ffff8881443b7190 R08: 0000000000000001 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000003
    R13: ffff88802a77cb18 R14: 0000000000000003 R15: ffff888018262500
    FS:  0000000000000000(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000556a99c15a18 CR3: 0000000028c71000 CR4: 0000000000350ef0
    Call Trace:
     <TASK>
     usbnet_start_xmit+0xfe5/0x2190 drivers/net/usb/usbnet.c:1453
     __netdev_start_xmit include/linux/netdevice.h:4918 [inline]
     netdev_start_xmit include/linux/netdevice.h:4932 [inline]
     xmit_one net/core/dev.c:3578 [inline]
     dev_hard_start_xmit+0x187/0x700 net/core/dev.c:3594
    ...
    
    This bug is caused by the fact that usbnet trusts the bulk endpoint
    addresses its probe routine receives in the driver_info structure, and
    it does not check to see that these endpoints actually exist and have
    the expected type and directions.
    
    The fix is simply to add such a check.
    
    Reported-and-tested-by: syzbot+63ee658b9a100ffadbe2@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/linux-usb/000000000000a56e9105d0cec021@google.com/
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/ea152b6d-44df-4f8a-95c6-4db51143dcc1@rowland.harvard.edu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2da00d1ea1abfb04f846638e210b5b5166e3c9c
Author: Sungwoo Kim <iam@sung-woo.kim>
Date:   Wed May 31 01:39:56 2023 -0400

    Bluetooth: L2CAP: Fix use-after-free in l2cap_sock_ready_cb
    
    commit 1728137b33c00d5a2b5110ed7aafb42e7c32e4a1 upstream.
    
    l2cap_sock_release(sk) frees sk. However, sk's children are still alive
    and point to the already free'd sk's address.
    To fix this, l2cap_sock_release(sk) also cleans sk's children.
    
    ==================================================================
    BUG: KASAN: use-after-free in l2cap_sock_ready_cb+0xb7/0x100 net/bluetooth/l2cap_sock.c:1650
    Read of size 8 at addr ffff888104617aa8 by task kworker/u3:0/276
    
    CPU: 0 PID: 276 Comm: kworker/u3:0 Not tainted 6.2.0-00001-gef397bd4d5fb-dirty #59
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
    Workqueue: hci2 hci_rx_work
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x72/0x95 lib/dump_stack.c:106
     print_address_description mm/kasan/report.c:306 [inline]
     print_report+0x175/0x478 mm/kasan/report.c:417
     kasan_report+0xb1/0x130 mm/kasan/report.c:517
     l2cap_sock_ready_cb+0xb7/0x100 net/bluetooth/l2cap_sock.c:1650
     l2cap_chan_ready+0x10e/0x1e0 net/bluetooth/l2cap_core.c:1386
     l2cap_config_req+0x753/0x9f0 net/bluetooth/l2cap_core.c:4480
     l2cap_bredr_sig_cmd net/bluetooth/l2cap_core.c:5739 [inline]
     l2cap_sig_channel net/bluetooth/l2cap_core.c:6509 [inline]
     l2cap_recv_frame+0xe2e/0x43c0 net/bluetooth/l2cap_core.c:7788
     l2cap_recv_acldata+0x6ed/0x7e0 net/bluetooth/l2cap_core.c:8506
     hci_acldata_packet net/bluetooth/hci_core.c:3813 [inline]
     hci_rx_work+0x66e/0xbc0 net/bluetooth/hci_core.c:4048
     process_one_work+0x4ea/0x8e0 kernel/workqueue.c:2289
     worker_thread+0x364/0x8e0 kernel/workqueue.c:2436
     kthread+0x1b9/0x200 kernel/kthread.c:376
     ret_from_fork+0x2c/0x50 arch/x86/entry/entry_64.S:308
     </TASK>
    
    Allocated by task 288:
     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45
     kasan_set_track+0x25/0x30 mm/kasan/common.c:52
     ____kasan_kmalloc mm/kasan/common.c:374 [inline]
     __kasan_kmalloc+0x82/0x90 mm/kasan/common.c:383
     kasan_kmalloc include/linux/kasan.h:211 [inline]
     __do_kmalloc_node mm/slab_common.c:968 [inline]
     __kmalloc+0x5a/0x140 mm/slab_common.c:981
     kmalloc include/linux/slab.h:584 [inline]
     sk_prot_alloc+0x113/0x1f0 net/core/sock.c:2040
     sk_alloc+0x36/0x3c0 net/core/sock.c:2093
     l2cap_sock_alloc.constprop.0+0x39/0x1c0 net/bluetooth/l2cap_sock.c:1852
     l2cap_sock_create+0x10d/0x220 net/bluetooth/l2cap_sock.c:1898
     bt_sock_create+0x183/0x290 net/bluetooth/af_bluetooth.c:132
     __sock_create+0x226/0x380 net/socket.c:1518
     sock_create net/socket.c:1569 [inline]
     __sys_socket_create net/socket.c:1606 [inline]
     __sys_socket_create net/socket.c:1591 [inline]
     __sys_socket+0x112/0x200 net/socket.c:1639
     __do_sys_socket net/socket.c:1652 [inline]
     __se_sys_socket net/socket.c:1650 [inline]
     __x64_sys_socket+0x40/0x50 net/socket.c:1650
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3f/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Freed by task 288:
     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45
     kasan_set_track+0x25/0x30 mm/kasan/common.c:52
     kasan_save_free_info+0x2e/0x50 mm/kasan/generic.c:523
     ____kasan_slab_free mm/kasan/common.c:236 [inline]
     ____kasan_slab_free mm/kasan/common.c:200 [inline]
     __kasan_slab_free+0x10a/0x190 mm/kasan/common.c:244
     kasan_slab_free include/linux/kasan.h:177 [inline]
     slab_free_hook mm/slub.c:1781 [inline]
     slab_free_freelist_hook mm/slub.c:1807 [inline]
     slab_free mm/slub.c:3787 [inline]
     __kmem_cache_free+0x88/0x1f0 mm/slub.c:3800
     sk_prot_free net/core/sock.c:2076 [inline]
     __sk_destruct+0x347/0x430 net/core/sock.c:2168
     sk_destruct+0x9c/0xb0 net/core/sock.c:2183
     __sk_free+0x82/0x220 net/core/sock.c:2194
     sk_free+0x7c/0xa0 net/core/sock.c:2205
     sock_put include/net/sock.h:1991 [inline]
     l2cap_sock_kill+0x256/0x2b0 net/bluetooth/l2cap_sock.c:1257
     l2cap_sock_release+0x1a7/0x220 net/bluetooth/l2cap_sock.c:1428
     __sock_release+0x80/0x150 net/socket.c:650
     sock_close+0x19/0x30 net/socket.c:1368
     __fput+0x17a/0x5c0 fs/file_table.c:320
     task_work_run+0x132/0x1c0 kernel/task_work.c:179
     resume_user_mode_work include/linux/resume_user_mode.h:49 [inline]
     exit_to_user_mode_loop kernel/entry/common.c:171 [inline]
     exit_to_user_mode_prepare+0x113/0x120 kernel/entry/common.c:203
     __syscall_exit_to_user_mode_work kernel/entry/common.c:285 [inline]
     syscall_exit_to_user_mode+0x21/0x50 kernel/entry/common.c:296
     do_syscall_64+0x4c/0x90 arch/x86/entry/common.c:86
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    The buggy address belongs to the object at ffff888104617800
     which belongs to the cache kmalloc-1k of size 1024
    The buggy address is located 680 bytes inside of
     1024-byte region [ffff888104617800, ffff888104617c00)
    
    The buggy address belongs to the physical page:
    page:00000000dbca6a80 refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff888104614000 pfn:0x104614
    head:00000000dbca6a80 order:2 compound_mapcount:0 subpages_mapcount:0 compound_pincount:0
    flags: 0x200000000010200(slab|head|node=0|zone=2)
    raw: 0200000000010200 ffff888100041dc0 ffffea0004212c10 ffffea0004234b10
    raw: ffff888104614000 0000000000080002 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888104617980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888104617a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff888104617a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                      ^
     ffff888104617b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888104617b80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Ack: This bug is found by FuzzBT with a modified Syzkaller. Other
    contributors are Ruoyu Wu and Hui Peng.
    Signed-off-by: Sungwoo Kim <iam@sung-woo.kim>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a44ceba77c3267f8505dda102a59367dc24caee
Author: Prince Kumar Maurya <princekumarmaurya06@gmail.com>
Date:   Tue May 30 18:31:41 2023 -0700

    fs/sysv: Null check to prevent null-ptr-deref bug
    
    commit ea2b62f305893992156a798f665847e0663c9f41 upstream.
    
    sb_getblk(inode->i_sb, parent) return a null ptr and taking lock on
    that leads to the null-ptr-deref bug.
    
    Reported-by: syzbot+aad58150cbc64ba41bdc@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=aad58150cbc64ba41bdc
    Signed-off-by: Prince Kumar Maurya <princekumarmaurya06@gmail.com>
    Message-Id: <20230531013141.19487-1-princekumarmaurya06@gmail.com>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1202deb153d68d569439a4d1772eba20daa95589
Author: Laszlo Ersek <lersek@redhat.com>
Date:   Mon Jul 31 18:42:37 2023 +0200

    net: tap_open(): set sk_uid from current_fsuid()
    
    commit 5c9241f3ceab3257abe2923a59950db0dc8bb737 upstream.
    
    Commit 66b2c338adce initializes the "sk_uid" field in the protocol socket
    (struct sock) from the "/dev/tapX" device node's owner UID. Per original
    commit 86741ec25462 ("net: core: Add a UID field to struct sock.",
    2016-11-04), that's wrong: the idea is to cache the UID of the userspace
    process that creates the socket. Commit 86741ec25462 mentions socket() and
    accept(); with "tap", the action that creates the socket is
    open("/dev/tapX").
    
    Therefore the device node's owner UID is irrelevant. In most cases,
    "/dev/tapX" will be owned by root, so in practice, commit 66b2c338adce has
    no observable effect:
    
    - before, "sk_uid" would be zero, due to undefined behavior
      (CVE-2023-1076),
    
    - after, "sk_uid" would be zero, due to "/dev/tapX" being owned by root.
    
    What matters is the (fs)UID of the process performing the open(), so cache
    that in "sk_uid".
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Pietro Borrello <borrello@diag.uniroma1.it>
    Cc: netdev@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: 66b2c338adce ("tap: tap_open(): correctly initialize socket uid")
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2173435
    Signed-off-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d53ea776760097186258ced06d468bf26adb437
Author: Laszlo Ersek <lersek@redhat.com>
Date:   Mon Jul 31 18:42:36 2023 +0200

    net: tun_chr_open(): set sk_uid from current_fsuid()
    
    commit 9bc3047374d5bec163e83e743709e23753376f0c upstream.
    
    Commit a096ccca6e50 initializes the "sk_uid" field in the protocol socket
    (struct sock) from the "/dev/net/tun" device node's owner UID. Per
    original commit 86741ec25462 ("net: core: Add a UID field to struct
    sock.", 2016-11-04), that's wrong: the idea is to cache the UID of the
    userspace process that creates the socket. Commit 86741ec25462 mentions
    socket() and accept(); with "tun", the action that creates the socket is
    open("/dev/net/tun").
    
    Therefore the device node's owner UID is irrelevant. In most cases,
    "/dev/net/tun" will be owned by root, so in practice, commit a096ccca6e50
    has no observable effect:
    
    - before, "sk_uid" would be zero, due to undefined behavior
      (CVE-2023-1076),
    
    - after, "sk_uid" would be zero, due to "/dev/net/tun" being owned by root.
    
    What matters is the (fs)UID of the process performing the open(), so cache
    that in "sk_uid".
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Pietro Borrello <borrello@diag.uniroma1.it>
    Cc: netdev@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: a096ccca6e50 ("tun: tun_chr_open(): correctly initialize socket uid")
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2173435
    Signed-off-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae9cf40873d351cf5076ef3bca1227ec998848a7
Author: Arseniy Krasnov <AVKrasnov@sberdevices.ru>
Date:   Wed Jul 5 09:52:10 2023 +0300

    mtd: rawnand: meson: fix OOB available bytes for ECC
    
    commit 7e6b04f9238eab0f684fafd158c1f32ea65b9eaa upstream.
    
    It is incorrect to calculate number of OOB bytes for ECC engine using
    some "already known" ECC step size (1024 bytes here). Number of such
    bytes for ECC engine must be whole OOB except 2 bytes for bad block
    marker, while proper ECC step size and strength will be selected by
    ECC logic.
    
    Fixes: 8fae856c5350 ("mtd: rawnand: meson: add support for Amlogic NAND flash controller")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Arseniy Krasnov <AVKrasnov@sberdevices.ru>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20230705065211.293500-1-AVKrasnov@sberdevices.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8deaaf4be175abf2f6fadce6cf48864dd8ebfd01
Author: Olivier Maignial <olivier.maignial@hotmail.fr>
Date:   Fri Jun 23 17:33:36 2023 +0200

    mtd: spinand: toshiba: Fix ecc_get_status
    
    commit 8544cda94dae6be3f1359539079c68bb731428b1 upstream.
    
    Reading ECC status is failing.
    
    tx58cxgxsxraix_ecc_get_status() is using on-stack buffer
    for SPINAND_GET_FEATURE_OP() output. It is not suitable
    for DMA needs of spi-mem.
    
    Fix this by using the spi-mem operations dedicated buffer
    spinand->scratchbuf.
    
    See
    spinand->scratchbuf:
    https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/mtd/spinand.h?h=v6.3#n418
    spi_mem_check_op():
    https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/spi/spi-mem.c?h=v6.3#n199
    
    Fixes: 10949af1681d ("mtd: spinand: Add initial support for Toshiba TC58CVG2S0H")
    Cc: stable@vger.kernel.org
    Signed-off-by: Olivier Maignial <olivier.maignial@hotmail.fr>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/DB4P250MB1032553D05FBE36DEE0D311EFE23A@DB4P250MB1032.EURP250.PROD.OUTLOOK.COM
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eacb19bd7cd2d0ae64ee8c188877089d5074ad83
Author: Ross Maynard <bids.7405@bigpond.com>
Date:   Mon Jul 31 15:42:04 2023 +1000

    USB: zaurus: Add ID for A-300/B-500/C-700
    
    commit b99225b4fe297d07400f9e2332ecd7347b224f8d upstream.
    
    The SL-A300, B500/5600, and C700 devices no longer auto-load because of
    "usbnet: Remove over-broad module alias from zaurus."
    This patch adds IDs for those 3 devices.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217632
    Fixes: 16adf5d07987 ("usbnet: Remove over-broad module alias from zaurus.")
    Signed-off-by: Ross Maynard <bids.7405@bigpond.com>
    Cc: stable@vger.kernel.org
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/69b5423b-2013-9fc9-9569-58e707d9bafb@bigpond.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5107f9e8db60c13338efe65cd2de99904c312737
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue Aug 1 19:14:24 2023 +0200

    libceph: fix potential hang in ceph_osdc_notify()
    
    commit e6e2843230799230fc5deb8279728a7218b0d63c upstream.
    
    If the cluster becomes unavailable, ceph_osdc_notify() may hang even
    with osd_request_timeout option set because linger_notify_finish_wait()
    waits for MWatchNotify NOTIFY_COMPLETE message with no associated OSD
    request in flight -- it's completely asynchronous.
    
    Introduce an additional timeout, derived from the specified notify
    timeout.  While at it, switch both waits to killable which is more
    correct.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Dongsheng Yang <dongsheng.yang@easystack.cn>
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f14228e82fea1015783d969b9dfdc1be6271422
Author: Steffen Maier <maier@linux.ibm.com>
Date:   Mon Jul 24 16:51:56 2023 +0200

    scsi: zfcp: Defer fc_rport blocking until after ADISC response
    
    commit e65851989001c0c9ba9177564b13b38201c0854c upstream.
    
    Storage devices are free to send RSCNs, e.g. for internal state changes. If
    this happens on all connected paths, zfcp risks temporarily losing all
    paths at the same time. This has strong requirements on multipath
    configuration such as "no_path_retry queue".
    
    Avoid such situations by deferring fc_rport blocking until after the ADISC
    response, when any actual state change of the remote port became clear.
    The already existing port recovery triggers explicitly block the fc_rport.
    The triggers are: on ADISC reject or timeout (typical cable pull case), and
    on ADISC indicating that the remote port has changed its WWPN or
    the port is meanwhile no longer open.
    
    As a side effect, this also removes a confusing direct function call to
    another work item function zfcp_scsi_rport_work() instead of scheduling
    that other work item. It was probably done that way to have the rport block
    side effect immediate and synchronous to the caller.
    
    Fixes: a2fa0aede07c ("[SCSI] zfcp: Block FC transport rports early on errors")
    Cc: stable@vger.kernel.org #v2.6.30+
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Fedor Loshakov <loshakov@linux.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230724145156.3920244-1-maier@linux.ibm.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a490c2e8927e0f849d6b7baecbd2597878791980
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:15:00 2023 +0000

    tcp_metrics: fix data-race in tcpm_suck_dst() vs fastopen
    
    [ Upstream commit ddf251fa2bc1d3699eec0bae6ed0bc373b8fda79 ]
    
    Whenever tcpm_new() reclaims an old entry, tcpm_suck_dst()
    would overwrite data that could be read from tcp_fastopen_cache_get()
    or tcp_metrics_fill_info().
    
    We need to acquire fastopen_seqlock to maintain consistency.
    
    For newly allocated objects, tcpm_new() can switch to kzalloc()
    to avoid an extra fastopen_seqlock acquisition.
    
    Fixes: 1fe4c481ba63 ("net-tcp: Fast Open client - cookie cache")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-7-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d49ed957d77a4af5f010a1b507d06595a975855
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:59 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_net
    
    [ Upstream commit d5d986ce42c71a7562d32c4e21e026b0f87befec ]
    
    tm->tcpm_net can be read or written locklessly.
    
    Instead of changing write_pnet() and read_pnet() and potentially
    hurt performance, add the needed READ_ONCE()/WRITE_ONCE()
    in tm_net() and tcpm_new().
    
    Fixes: 849e8a0ca8d5 ("tcp_metrics: Add a field tcpm_net and verify it matches on lookup")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-6-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc566cf344d8c59c635464b30c09306df365f6f1
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:58 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_vals[]
    
    [ Upstream commit 8c4d04f6b443869d25e59822f7cec88d647028a9 ]
    
    tm->tcpm_vals[] values can be read or written locklessly.
    
    Add needed READ_ONCE()/WRITE_ONCE() to document this,
    and force use of tcp_metric_get() and tcp_metric_set()
    
    Fixes: 51c5d0c4b169 ("tcp: Maintain dynamic metrics in local cache.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76b47daba7cd71c816874d810422d0307afaff7e
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:57 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_lock
    
    [ Upstream commit 285ce119a3c6c4502585936650143e54c8692788 ]
    
    tm->tcpm_lock can be read or written locklessly.
    
    Add needed READ_ONCE()/WRITE_ONCE() to document this.
    
    Fixes: 51c5d0c4b169 ("tcp: Maintain dynamic metrics in local cache.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-4-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38661fe6d001ecd600197c9c106f1ce8d1a2b301
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:56 2023 +0000

    tcp_metrics: annotate data-races around tm->tcpm_stamp
    
    [ Upstream commit 949ad62a5d5311d36fce2e14fe5fed3f936da51c ]
    
    tm->tcpm_stamp can be read or written locklessly.
    
    Add needed READ_ONCE()/WRITE_ONCE() to document this.
    
    Also constify tcpm_check_stamp() dst argument.
    
    Fixes: 51c5d0c4b169 ("tcp: Maintain dynamic metrics in local cache.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-3-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96f14d689dc57a0e2b98a2ef1d22d46730989756
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 2 13:14:55 2023 +0000

    tcp_metrics: fix addr_same() helper
    
    [ Upstream commit e6638094d7af6c7b9dcca05ad009e79e31b4f670 ]
    
    Because v4 and v6 families use separate inetpeer trees (respectively
    net->ipv4.peers and net->ipv6.peers), inetpeer_addr_cmp(a, b) assumes
    a & b share the same family.
    
    tcp_metrics use a common hash table, where entries can have different
    families.
    
    We must therefore make sure to not call inetpeer_addr_cmp()
    if the families do not match.
    
    Fixes: d39d14ffa24c ("net: Add helper function to compare inetpeer addresses")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20230802131500.1478140-2-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0438e60a00d4e335b3c36397dbf26c74b5d13ef0
Author: Yue Haibing <yuehaibing@huawei.com>
Date:   Tue Aug 1 14:43:18 2023 +0800

    ip6mr: Fix skb_under_panic in ip6mr_cache_report()
    
    [ Upstream commit 30e0191b16e8a58e4620fa3e2839ddc7b9d4281c ]
    
    skbuff: skb_under_panic: text:ffffffff88771f69 len:56 put:-4
     head:ffff88805f86a800 data:ffff887f5f86a850 tail:0x88 end:0x2c0 dev:pim6reg
     ------------[ cut here ]------------
     kernel BUG at net/core/skbuff.c:192!
     invalid opcode: 0000 [#1] PREEMPT SMP KASAN
     CPU: 2 PID: 22968 Comm: kworker/2:11 Not tainted 6.5.0-rc3-00044-g0a8db05b571a #236
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
     Workqueue: ipv6_addrconf addrconf_dad_work
     RIP: 0010:skb_panic+0x152/0x1d0
     Call Trace:
      <TASK>
      skb_push+0xc4/0xe0
      ip6mr_cache_report+0xd69/0x19b0
      reg_vif_xmit+0x406/0x690
      dev_hard_start_xmit+0x17e/0x6e0
      __dev_queue_xmit+0x2d6a/0x3d20
      vlan_dev_hard_start_xmit+0x3ab/0x5c0
      dev_hard_start_xmit+0x17e/0x6e0
      __dev_queue_xmit+0x2d6a/0x3d20
      neigh_connected_output+0x3ed/0x570
      ip6_finish_output2+0x5b5/0x1950
      ip6_finish_output+0x693/0x11c0
      ip6_output+0x24b/0x880
      NF_HOOK.constprop.0+0xfd/0x530
      ndisc_send_skb+0x9db/0x1400
      ndisc_send_rs+0x12a/0x6c0
      addrconf_dad_completed+0x3c9/0xea0
      addrconf_dad_work+0x849/0x1420
      process_one_work+0xa22/0x16e0
      worker_thread+0x679/0x10c0
      ret_from_fork+0x28/0x60
      ret_from_fork_asm+0x11/0x20
    
    When setup a vlan device on dev pim6reg, DAD ns packet may sent on reg_vif_xmit().
    reg_vif_xmit()
        ip6mr_cache_report()
            skb_push(skb, -skb_network_offset(pkt));//skb_network_offset(pkt) is 4
    And skb_push declared as:
            void *skb_push(struct sk_buff *skb, unsigned int len);
                    skb->data -= len;
                    //0xffff88805f86a84c - 0xfffffffc = 0xffff887f5f86a850
    skb->data is set to 0xffff887f5f86a850, which is invalid mem addr, lead to skb_push() fails.
    
    Fixes: 14fb64e1f449 ("[IPV6] MROUTE: Support PIM-SM (SSM).")
    Signed-off-by: Yue Haibing <yuehaibing@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b3dbedb8d4a0f9f7ce904d76b885438af2a21f9
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Aug 1 09:32:48 2023 +0800

    net: dcb: choose correct policy to parse DCB_ATTR_BCN
    
    [ Upstream commit 31d49ba033095f6e8158c60f69714a500922e0c3 ]
    
    The dcbnl_bcn_setcfg uses erroneous policy to parse tb[DCB_ATTR_BCN],
    which is introduced in commit 859ee3c43812 ("DCB: Add support for DCB
    BCN"). Please see the comment in below code
    
    static int dcbnl_bcn_setcfg(...)
    {
      ...
      ret = nla_parse_nested_deprecated(..., dcbnl_pfc_up_nest, .. )
      // !!! dcbnl_pfc_up_nest for attributes
      //  DCB_PFC_UP_ATTR_0 to DCB_PFC_UP_ATTR_ALL in enum dcbnl_pfc_up_attrs
      ...
      for (i = DCB_BCN_ATTR_RP_0; i <= DCB_BCN_ATTR_RP_7; i++) {
      // !!! DCB_BCN_ATTR_RP_0 to DCB_BCN_ATTR_RP_7 in enum dcbnl_bcn_attrs
        ...
        value_byte = nla_get_u8(data[i]);
        ...
      }
      ...
      for (i = DCB_BCN_ATTR_BCNA_0; i <= DCB_BCN_ATTR_RI; i++) {
      // !!! DCB_BCN_ATTR_BCNA_0 to DCB_BCN_ATTR_RI in enum dcbnl_bcn_attrs
      ...
        value_int = nla_get_u32(data[i]);
      ...
      }
      ...
    }
    
    That is, the nla_parse_nested_deprecated uses dcbnl_pfc_up_nest
    attributes to parse nlattr defined in dcbnl_pfc_up_attrs. But the
    following access code fetch each nlattr as dcbnl_bcn_attrs attributes.
    By looking up the associated nla_policy for dcbnl_bcn_attrs. We can find
    the beginning part of these two policies are "same".
    
    static const struct nla_policy dcbnl_pfc_up_nest[...] = {
            [DCB_PFC_UP_ATTR_0]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_1]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_2]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_3]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_4]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_5]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_6]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_7]   = {.type = NLA_U8},
            [DCB_PFC_UP_ATTR_ALL] = {.type = NLA_FLAG},
    };
    
    static const struct nla_policy dcbnl_bcn_nest[...] = {
            [DCB_BCN_ATTR_RP_0]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_1]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_2]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_3]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_4]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_5]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_6]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_7]         = {.type = NLA_U8},
            [DCB_BCN_ATTR_RP_ALL]       = {.type = NLA_FLAG},
            // from here is somewhat different
            [DCB_BCN_ATTR_BCNA_0]       = {.type = NLA_U32},
            ...
            [DCB_BCN_ATTR_ALL]          = {.type = NLA_FLAG},
    };
    
    Therefore, the current code is buggy and this
    nla_parse_nested_deprecated could overflow the dcbnl_pfc_up_nest and use
    the adjacent nla_policy to parse attributes from DCB_BCN_ATTR_BCNA_0.
    
    Hence use the correct policy dcbnl_bcn_nest to parse the nested
    tb[DCB_ATTR_BCN] TLV.
    
    Fixes: 859ee3c43812 ("DCB: Add support for DCB BCN")
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20230801013248.87240-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 363c56f9712208a981502f21dbd4e133019e3d6a
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Jul 31 10:42:32 2023 +0300

    net: ll_temac: fix error checking of irq_of_parse_and_map()
    
    [ Upstream commit ef45e8400f5bb66b03cc949f76c80e2a118447de ]
    
    Most kernel functions return negative error codes but some irq functions
    return zero on error.  In this code irq_of_parse_and_map(), returns zero
    and platform_get_irq() returns negative error codes.  We need to handle
    both cases appropriately.
    
    Fixes: 8425c41d1ef7 ("net: ll_temac: Extend support to non-device-tree platforms")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Acked-by: Esben Haabendal <esben@geanix.com>
    Reviewed-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Harini Katakam <harini.katakam@amd.com>
    Link: https://lore.kernel.org/r/3d0aef75-06e0-45a5-a2a6-2cc4738d4143@moroto.mountain
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7928f81443f68a0b4dd4eb6f657493c404f58430
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Sep 15 19:42:14 2022 +0800

    net: ll_temac: Switch to use dev_err_probe() helper
    
    [ Upstream commit 75ae8c284c00dc3584b7c173f6fcf96ee15bd02c ]
    
    dev_err() can be replace with dev_err_probe() which will check if error
    code is -EPROBE_DEFER.
    
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: ef45e8400f5b ("net: ll_temac: fix error checking of irq_of_parse_and_map()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97d8a0bbda6b64ac6c810e0fdf51287835c4bb11
Author: Andrzej Hajda <andrzej.hajda@intel.com>
Date:   Mon Jul 13 16:43:21 2020 +0200

    driver core: add device probe log helper
    
    [ Upstream commit a787e5400a1ceeb0ef92d71ec43aeb35b1fa1334 ]
    
    During probe every time driver gets resource it should usually check for
    error printk some message if it is not -EPROBE_DEFER and return the error.
    This pattern is simple but requires adding few lines after any resource
    acquisition code, as a result it is often omitted or implemented only
    partially.
    dev_err_probe helps to replace such code sequences with simple call,
    so code:
            if (err != -EPROBE_DEFER)
                    dev_err(dev, ...);
            return err;
    becomes:
            return dev_err_probe(dev, err, ...);
    
    Signed-off-by: Andrzej Hajda <a.hajda@samsung.com>
    Reviewed-by: Rafael J. Wysocki <rafael@kernel.org>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20200713144324.23654-2-a.hajda@samsung.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: ef45e8400f5b ("net: ll_temac: fix error checking of irq_of_parse_and_map()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 227b8ce59cd31e936e61ba61c1ecff70b555e478
Author: Tomas Glozar <tglozar@redhat.com>
Date:   Fri Jul 28 08:44:11 2023 +0200

    bpf: sockmap: Remove preempt_disable in sock_map_sk_acquire
    
    [ Upstream commit 13d2618b48f15966d1adfe1ff6a1985f5eef40ba ]
    
    Disabling preemption in sock_map_sk_acquire conflicts with GFP_ATOMIC
    allocation later in sk_psock_init_link on PREEMPT_RT kernels, since
    GFP_ATOMIC might sleep on RT (see bpf: Make BPF and PREEMPT_RT co-exist
    patchset notes for details).
    
    This causes calling bpf_map_update_elem on BPF_MAP_TYPE_SOCKMAP maps to
    BUG (sleeping function called from invalid context) on RT kernels.
    
    preempt_disable was introduced together with lock_sk and rcu_read_lock
    in commit 99ba2b5aba24e ("bpf: sockhash, disallow bpf_tcp_close and update
    in parallel"), probably to match disabled migration of BPF programs, and
    is no longer necessary.
    
    Remove preempt_disable to fix BUG in sock_map_update_common on RT.
    
    Signed-off-by: Tomas Glozar <tglozar@redhat.com>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Link: https://lore.kernel.org/all/20200224140131.461979697@linutronix.de/
    Fixes: 99ba2b5aba24 ("bpf: sockhash, disallow bpf_tcp_close and update in parallel")
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/20230728064411.305576-1-tglozar@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c8262f31fd2d23d1cfd2539715d976c2a99e582
Author: valis <sec@valis.email>
Date:   Sat Jul 29 08:32:02 2023 -0400

    net/sched: cls_route: No longer copy tcf_result on update to avoid use-after-free
    
    [ Upstream commit b80b829e9e2c1b3f7aae34855e04d8f6ecaf13c8 ]
    
    When route4_change() is called on an existing filter, the whole
    tcf_result struct is always copied into the new instance of the filter.
    
    This causes a problem when updating a filter bound to a class,
    as tcf_unbind_filter() is always called on the old instance in the
    success path, decreasing filter_cnt of the still referenced class
    and allowing it to be deleted, leading to a use-after-free.
    
    Fix this by no longer copying the tcf_result struct from the old filter.
    
    Fixes: 1109c00547fc ("net: sched: RCU cls_route")
    Reported-by: valis <sec@valis.email>
    Reported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Signed-off-by: valis <sec@valis.email>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: M A Ramdhan <ramdhan@starlabs.sg>
    Link: https://lore.kernel.org/r/20230729123202.72406-4-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83e3d4b0ae373dcba30c68bf28f8d179191a297a
Author: valis <sec@valis.email>
Date:   Sat Jul 29 08:32:01 2023 -0400

    net/sched: cls_fw: No longer copy tcf_result on update to avoid use-after-free
    
    [ Upstream commit 76e42ae831991c828cffa8c37736ebfb831ad5ec ]
    
    When fw_change() is called on an existing filter, the whole
    tcf_result struct is always copied into the new instance of the filter.
    
    This causes a problem when updating a filter bound to a class,
    as tcf_unbind_filter() is always called on the old instance in the
    success path, decreasing filter_cnt of the still referenced class
    and allowing it to be deleted, leading to a use-after-free.
    
    Fix this by no longer copying the tcf_result struct from the old filter.
    
    Fixes: e35a8ee5993b ("net: sched: fw use RCU")
    Reported-by: valis <sec@valis.email>
    Reported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
    Signed-off-by: valis <sec@valis.email>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: M A Ramdhan <ramdhan@starlabs.sg>
    Link: https://lore.kernel.org/r/20230729123202.72406-3-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be785808db32b595728c4042d002c83d0dd4b66f
Author: valis <sec@valis.email>
Date:   Sat Jul 29 08:32:00 2023 -0400

    net/sched: cls_u32: No longer copy tcf_result on update to avoid use-after-free
    
    [ Upstream commit 3044b16e7c6fe5d24b1cdbcf1bd0a9d92d1ebd81 ]
    
    When u32_change() is called on an existing filter, the whole
    tcf_result struct is always copied into the new instance of the filter.
    
    This causes a problem when updating a filter bound to a class,
    as tcf_unbind_filter() is always called on the old instance in the
    success path, decreasing filter_cnt of the still referenced class
    and allowing it to be deleted, leading to a use-after-free.
    
    Fix this by no longer copying the tcf_result struct from the old filter.
    
    Fixes: de5df63228fc ("net: sched: cls_u32 changes to knode must appear atomic to readers")
    Reported-by: valis <sec@valis.email>
    Reported-by: M A Ramdhan <ramdhan@starlabs.sg>
    Signed-off-by: valis <sec@valis.email>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: M A Ramdhan <ramdhan@starlabs.sg>
    Link: https://lore.kernel.org/r/20230729123202.72406-2-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b705759a1a2572b6523c3f7c7ef70cf2b350b517
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:17 2023 +0000

    net: add missing data-race annotation for sk_ll_usec
    
    [ Upstream commit e5f0d2dd3c2faa671711dac6d3ff3cef307bcfe3 ]
    
    In a prior commit I forgot that sk_getsockopt() reads
    sk->sk_ll_usec without holding a lock.
    
    Fixes: 0dbffbb5335a ("net: annotate data race around sk_ll_usec")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95dd65f290705f9ac208d1f9723ee66faedaf67c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:16 2023 +0000

    net: add missing data-race annotations around sk->sk_peek_off
    
    [ Upstream commit 11695c6e966b0ec7ed1d16777d294cef865a5c91 ]
    
    sk_getsockopt() runs locklessly, thus we need to annotate the read
    of sk->sk_peek_off.
    
    While we are at it, add corresponding annotations to sk_set_peek_off()
    and unix_set_peek_off().
    
    Fixes: b9bb53f3836f ("sock: convert sk_peek_offset functions to WRITE_ONCE")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a6dddcb47a602108e434840493557d4268b32d9
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:14 2023 +0000

    net: add missing READ_ONCE(sk->sk_rcvbuf) annotation
    
    [ Upstream commit b4b553253091cafe9ec38994acf42795e073bef5 ]
    
    In a prior commit, I forgot to change sk_getsockopt()
    when reading sk->sk_rcvbuf locklessly.
    
    Fixes: ebb3b78db7bf ("tcp: annotate sk->sk_rcvbuf lockless reads")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec4b7532d70bb822a02fe3eac7704fbf2b524683
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:13 2023 +0000

    net: add missing READ_ONCE(sk->sk_sndbuf) annotation
    
    [ Upstream commit 74bc084327c643499474ba75df485607da37dd6e ]
    
    In a prior commit, I forgot to change sk_getsockopt()
    when reading sk->sk_sndbuf locklessly.
    
    Fixes: e292f05e0df7 ("tcp: annotate sk->sk_sndbuf lockless reads")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cd3adc26e537bea8ffff6548144d07ec675180e
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:11 2023 +0000

    net: add missing READ_ONCE(sk->sk_rcvlowat) annotation
    
    [ Upstream commit e6d12bdb435d23ff6c1890c852d85408a2f496ee ]
    
    In a prior commit, I forgot to change sk_getsockopt()
    when reading sk->sk_rcvlowat locklessly.
    
    Fixes: eac66402d1c3 ("net: annotate sk->sk_rcvlowat lockless reads")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 481186cad78f049b27063cf428d79c90691c09fd
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jul 28 15:03:10 2023 +0000

    net: annotate data-races around sk->sk_max_pacing_rate
    
    [ Upstream commit ea7f45ef77b39e72244d282e47f6cb1ef4135cd2 ]
    
    sk_getsockopt() runs locklessly. This means sk->sk_max_pacing_rate
    can be read while other threads are changing its value.
    
    Fixes: 62748f32d501 ("net: introduce SO_MAX_PACING_RATE")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1774250a20d7be0b98f4fb4b0ca6f2dcfa4e1ac3
Author: Chengfeng Ye <dg573847474@gmail.com>
Date:   Thu Jul 27 08:56:19 2023 +0000

    mISDN: hfcpci: Fix potential deadlock on &hc->lock
    
    [ Upstream commit 56c6be35fcbed54279df0a2c9e60480a61841d6f ]
    
    As &hc->lock is acquired by both timer _hfcpci_softirq() and hardirq
    hfcpci_int(), the timer should disable irq before lock acquisition
    otherwise deadlock could happen if the timmer is preemtped by the hadr irq.
    
    Possible deadlock scenario:
    hfcpci_softirq() (timer)
        -> _hfcpci_softirq()
        -> spin_lock(&hc->lock);
            <irq interruption>
            -> hfcpci_int()
            -> spin_lock(&hc->lock); (deadlock here)
    
    This flaw was found by an experimental static analysis tool I am developing
    for irq-related deadlock.
    
    The tentative patch fixes the potential deadlock by spin_lock_irq()
    in timer.
    
    Fixes: b36b654a7e82 ("mISDN: Create /sys/class/mISDN")
    Signed-off-by: Chengfeng Ye <dg573847474@gmail.com>
    Link: https://lore.kernel.org/r/20230727085619.7419-1-dg573847474@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42b28808070e33822e5593b01aae93e2028a26d5
Author: Jamal Hadi Salim <jhs@mojatatu.com>
Date:   Wed Jul 26 09:51:51 2023 -0400

    net: sched: cls_u32: Fix match key mis-addressing
    
    [ Upstream commit e68409db995380d1badacba41ff24996bd396171 ]
    
    A match entry is uniquely identified with an "address" or "path" in the
    form of: hashtable ID(12b):bucketid(8b):nodeid(12b).
    
    When creating table match entries all of hash table id, bucket id and
    node (match entry id) are needed to be either specified by the user or
    reasonable in-kernel defaults are used. The in-kernel default for a table id is
    0x800(omnipresent root table); for bucketid it is 0x0. Prior to this fix there
    was none for a nodeid i.e. the code assumed that the user passed the correct
    nodeid and if the user passes a nodeid of 0 (as Mingi Cho did) then that is what
    was used. But nodeid of 0 is reserved for identifying the table. This is not
    a problem until we dump. The dump code notices that the nodeid is zero and
    assumes it is referencing a table and therefore references table struct
    tc_u_hnode instead of what was created i.e match entry struct tc_u_knode.
    
    Ming does an equivalent of:
    tc filter add dev dummy0 parent 10: prio 1 handle 0x1000 \
    protocol ip u32 match ip src 10.0.0.1/32 classid 10:1 action ok
    
    Essentially specifying a table id 0, bucketid 1 and nodeid of zero
    Tableid 0 is remapped to the default of 0x800.
    Bucketid 1 is ignored and defaults to 0x00.
    Nodeid was assumed to be what Ming passed - 0x000
    
    dumping before fix shows:
    ~$ tc filter ls dev dummy0 parent 10:
    filter protocol ip pref 1 u32 chain 0
    filter protocol ip pref 1 u32 chain 0 fh 800: ht divisor 1
    filter protocol ip pref 1 u32 chain 0 fh 800: ht divisor -30591
    
    Note that the last line reports a table instead of a match entry
    (you can tell this because it says "ht divisor...").
    As a result of reporting the wrong data type (misinterpretting of struct
    tc_u_knode as being struct tc_u_hnode) the divisor is reported with value
    of -30591. Ming identified this as part of the heap address
    (physmap_base is 0xffff8880 (-30591 - 1)).
    
    The fix is to ensure that when table entry matches are added and no
    nodeid is specified (i.e nodeid == 0) then we get the next available
    nodeid from the table's pool.
    
    After the fix, this is what the dump shows:
    $ tc filter ls dev dummy0 parent 10:
    filter protocol ip pref 1 u32 chain 0
    filter protocol ip pref 1 u32 chain 0 fh 800: ht divisor 1
    filter protocol ip pref 1 u32 chain 0 fh 800::800 order 2048 key ht 800 bkt 0 flowid 10:1 not_in_hw
      match 0a000001/ffffffff at 12
            action order 1: gact action pass
             random type none pass val 0
             index 1 ref 1 bind 1
    
    Reported-by: Mingi Cho <mgcho.minic@gmail.com>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Link: https://lore.kernel.org/r/20230726135151.416917-1-jhs@mojatatu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b047dc9108e291954d8251a4ab180d071c9e276
Author: Georg Müller <georgmueller@gmx.net>
Date:   Fri Jul 28 17:18:12 2023 +0200

    perf test uprobe_from_different_cu: Skip if there is no gcc
    
    [ Upstream commit 98ce8e4a9dcfb448b30a2d7a16190f4a00382377 ]
    
    Without gcc, the test will fail.
    
    On cleanup, ignore probe removal errors. Otherwise, in case of an error
    adding the probe, the temporary directory is not removed.
    
    Fixes: 56cbeacf14353057 ("perf probe: Add test for regression introduced by switch to die_get_decl_file()")
    Signed-off-by: Georg Müller <georgmueller@gmx.net>
    Acked-by: Ian Rogers <irogers@google.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Georg Müller <georgmueller@gmx.net>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20230728151812.454806-2-georgmueller@gmx.net
    Link: https://lore.kernel.org/r/CAP-5=fUP6UuLgRty3t2=fQsQi3k4hDMz415vWdp1x88QMvZ8ug@mail.gmail.com/
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad46d4861ed36315d3d9e838723ba3e367ecc042
Author: Lin Ma <linma@zju.edu.cn>
Date:   Wed Jul 26 15:53:14 2023 +0800

    rtnetlink: let rtnl_bridge_setlink checks IFLA_BRIDGE_MODE length
    
    [ Upstream commit d73ef2d69c0dba5f5a1cb9600045c873bab1fb7f ]
    
    There are totally 9 ndo_bridge_setlink handlers in the current kernel,
    which are 1) bnxt_bridge_setlink, 2) be_ndo_bridge_setlink 3)
    i40e_ndo_bridge_setlink 4) ice_bridge_setlink 5)
    ixgbe_ndo_bridge_setlink 6) mlx5e_bridge_setlink 7)
    nfp_net_bridge_setlink 8) qeth_l2_bridge_setlink 9) br_setlink.
    
    By investigating the code, we find that 1-7 parse and use nlattr
    IFLA_BRIDGE_MODE but 3 and 4 forget to do the nla_len check. This can
    lead to an out-of-attribute read and allow a malformed nlattr (e.g.,
    length 0) to be viewed as a 2 byte integer.
    
    To avoid such issues, also for other ndo_bridge_setlink handlers in the
    future. This patch adds the nla_len check in rtnl_bridge_setlink and
    does an early error return if length mismatches. To make it works, the
    break is removed from the parsing for IFLA_BRIDGE_FLAGS to make sure
    this nla_for_each_nested iterates every attribute.
    
    Fixes: b1edc14a3fbf ("ice: Implement ice_bridge_getlink and ice_bridge_setlink")
    Fixes: 51616018dd1b ("i40e: Add support for getlink, setlink ndo ops")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Acked-by: Nikolay Aleksandrov <razor@blackwall.org>
    Reviewed-by: Hangbin Liu <liuhangbin@gmail.com>
    Link: https://lore.kernel.org/r/20230726075314.1059224-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80381ecf2933768617703eae09ee3d9fdf9f2480
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Tue Jul 25 14:56:55 2023 +0800

    net/mlx5e: fix return value check in mlx5e_ipsec_remove_trailer()
    
    [ Upstream commit e5bcb7564d3bd0c88613c76963c5349be9c511c5 ]
    
    mlx5e_ipsec_remove_trailer() should return an error code if function
    pskb_trim() returns an unexpected value.
    
    Fixes: 2ac9cfe78223 ("net/mlx5e: IPSec, Add Innova IPSec offload TX data path")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 800d8c96bf997da5eb76ccf8d88795c4231c83fb
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Wed Jul 5 20:15:27 2023 +0800

    net/mlx5: DR, fix memory leak in mlx5dr_cmd_create_reformat_ctx
    
    [ Upstream commit 5dd77585dd9d0e03dd1bceb95f0269a7eaf6b936 ]
    
    when mlx5_cmd_exec failed in mlx5dr_cmd_create_reformat_ctx, the memory
    pointed by 'in' is not released, which will cause memory leak. Move memory
    release after mlx5_cmd_exec.
    
    Fixes: 1d9186476e12 ("net/mlx5: DR, Add direct rule command utilities")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4730c0a1131c8607fd33e8066084039a1932f8e8
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Thu Jul 27 20:29:39 2023 +0200

    KVM: s390: fix sthyi error handling
    
    [ Upstream commit 0c02cc576eac161601927b41634f80bfd55bfa9e ]
    
    Commit 9fb6c9b3fea1 ("s390/sthyi: add cache to store hypervisor info")
    added cache handling for store hypervisor info. This also changed the
    possible return code for sthyi_fill().
    
    Instead of only returning a condition code like the sthyi instruction would
    do, it can now also return a negative error value (-ENOMEM). handle_styhi()
    was not changed accordingly. In case of an error, the negative error value
    would incorrectly injected into the guest PSW.
    
    Add proper error handling to prevent this, and update the comment which
    describes the possible return values of sthyi_fill().
    
    Fixes: 9fb6c9b3fea1 ("s390/sthyi: add cache to store hypervisor info")
    Reviewed-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230727182939.2050744-1-hca@linux.ibm.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2fb0969262c8fefceddb2d027e9867cac2a09bc
Author: ndesaulniers@google.com <ndesaulniers@google.com>
Date:   Tue Aug 1 15:22:17 2023 -0700

    word-at-a-time: use the same return type for has_zero regardless of endianness
    
    [ Upstream commit 79e8328e5acbe691bbde029a52c89d70dcbc22f3 ]
    
    Compiling big-endian targets with Clang produces the diagnostic:
    
      fs/namei.c:2173:13: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
            } while (!(has_zero(a, &adata, &constants) | has_zero(b, &bdata, &constants)));
                      ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
      fs/namei.c:2173:13: note: cast one or both operands to int to silence this warning
    
    It appears that when has_zero was introduced, two definitions were
    produced with different signatures (in particular different return
    types).
    
    Looking at the usage in hash_name() in fs/namei.c, I suspect that
    has_zero() is meant to be invoked twice per while loop iteration; using
    logical-or would not update `bdata` when `a` did not have zeros.  So I
    think it's preferred to always return an unsigned long rather than a
    bool than update the while loop in hash_name() to use a logical-or
    rather than bitwise-or.
    
    [ Also changed powerpc version to do the same  - Linus ]
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1832
    Link: https://lore.kernel.org/lkml/20230801-bitwise-v1-1-799bec468dc4@google.com/
    Fixes: 36126f8f2ed8 ("word-at-a-time: make the interfaces truly generic")
    Debugged-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Heiko Carstens <hca@linux.ibm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be4d2b4562066f2007789f642bee74b46f726dc4
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Aug 5 10:42:00 2021 -0700

    loop: Select I/O scheduler 'none' from inside add_disk()
    
    commit 2112f5c1330a671fa852051d85cb9eadc05d7eb7 upstream.
    
    We noticed that the user interface of Android devices becomes very slow
    under memory pressure. This is because Android uses the zram driver on top
    of the loop driver for swapping, because under memory pressure the swap
    code alternates reads and writes quickly, because mq-deadline is the
    default scheduler for loop devices and because mq-deadline delays writes by
    five seconds for such a workload with default settings. Fix this by making
    the kernel select I/O scheduler 'none' from inside add_disk() for loop
    devices. This default can be overridden at any time from user space,
    e.g. via a udev rule. This approach has an advantage compared to changing
    the I/O scheduler from userspace from 'mq-deadline' into 'none', namely
    that synchronize_rcu() does not get called.
    
    This patch changes the default I/O scheduler for loop devices from
    'mq-deadline' into 'none'.
    
    Additionally, this patch reduces the Android boot time on my test setup
    with 0.5 seconds compared to configuring the loop I/O scheduler from user
    space.
    
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Martijn Coenen <maco@android.com>
    Cc: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Link: https://lore.kernel.org/r/20210805174200.3250718-3-bvanassche@acm.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11e929c380293e90cf28a86b4975f296770d3ac8
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 16 22:40:17 2022 +0100

    perf: Fix function pointer case
    
    commit 1af6239d1d3e61d33fd2f0ba53d3d1a67cc50574 upstream.
    
    With the advent of CFI it is no longer acceptible to cast function
    pointers.
    
    The robot complains thusly:
    
      kernel-events-core.c:warning:cast-from-int-(-)(struct-perf_cpu_pmu_context-)-to-remote_function_f-(aka-int-(-)(void-)-)-converts-to-incompatible-function-type
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Cixi Geng <cixi.geng1@unisoc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1db90f97d719142139204a6afe9bc6ee3c0735cf
Author: D Scott Phillips <scott@os.amperecomputing.com>
Date:   Wed Nov 2 09:01:06 2022 -0700

    arm64: Fix bit-shifting UB in the MIDR_CPU_MODEL() macro
    
    commit 8ec8490a1950efeccb00967698cf7cb2fcd25ca7 upstream.
    
    CONFIG_UBSAN_SHIFT with gcc-5 complains that the shifting of
    ARM_CPU_IMP_AMPERE (0xC0) into bits [31:24] by MIDR_CPU_MODEL() is
    undefined behavior. Well, sort of, it actually spells the error as:
    
     arch/arm64/kernel/proton-pack.c: In function 'spectre_bhb_loop_affected':
     arch/arm64/include/asm/cputype.h:44:2: error: initializer element is not constant
       (((imp)   << MIDR_IMPLEMENTOR_SHIFT) | \
       ^
    
    This isn't an issue for other Implementor codes, as all the other codes
    have zero in the top bit and so are representable as a signed int.
    
    Cast the implementor code to unsigned in MIDR_CPU_MODEL to remove the
    undefined behavior.
    
    Fixes: 0e5d5ae837c8 ("arm64: Add AMPERE1 to the Spectre-BHB affected list")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: D Scott Phillips <scott@os.amperecomputing.com>
    Link: https://lore.kernel.org/r/20221102160106.1096948-1-scott@os.amperecomputing.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f41cab7a4653a5b39e49f1385fca53c0b8f93324
Author: D Scott Phillips <scott@os.amperecomputing.com>
Date:   Mon Oct 10 19:21:40 2022 -0700

    arm64: Add AMPERE1 to the Spectre-BHB affected list
    
    commit 0e5d5ae837c8ce04d2ddb874ec5f920118bd9d31 upstream.
    
    Per AmpereOne erratum AC03_CPU_12, "Branch history may allow control of
    speculative execution across software contexts," the AMPERE1 core needs the
    bhb clearing loop to mitigate Spectre-BHB, with a loop iteration count of
    11.
    
    Signed-off-by: D Scott Phillips <scott@os.amperecomputing.com>
    Link: https://lore.kernel.org/r/20221011022140.432370-1-scott@os.amperecomputing.com
    Reviewed-by: James Morse <james.morse@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e4aa8c890348886fadb8be132a65b06696f78f7
Author: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date:   Thu Jul 13 13:21:12 2023 +0200

    ASoC: cs42l51: fix driver to properly autoload with automatic module loading
    
    commit e51df4f81b02bcdd828a04de7c1eb6a92988b61e upstream.
    
    In commit 2cb1e0259f50 ("ASoC: cs42l51: re-hook of_match_table
    pointer"), 9 years ago, some random guy fixed the cs42l51 after it was
    split into a core part and an I2C part to properly match based on a
    Device Tree compatible string.
    
    However, the fix in this commit is wrong: the MODULE_DEVICE_TABLE(of,
    ....) is in the core part of the driver, not the I2C part. Therefore,
    automatic module loading based on module.alias, based on matching with
    the DT compatible string, loads the core part of the driver, but not
    the I2C part. And threfore, the i2c_driver is not registered, and the
    codec is not known to the system, nor matched with a DT node with the
    corresponding compatible string.
    
    In order to fix that, we move the MODULE_DEVICE_TABLE(of, ...) into
    the I2C part of the driver. The cs42l51_of_match[] array is also moved
    as well, as it is not possible to have this definition in one file,
    and the MODULE_DEVICE_TABLE(of, ...) invocation in another file, due
    to how MODULE_DEVICE_TABLE works.
    
    Thanks to this commit, the I2C part of the driver now properly
    autoloads, and thanks to its dependency on the core part, the core
    part gets autoloaded as well, resulting in a functional sound card
    without having to manually load kernel modules.
    
    Fixes: 2cb1e0259f50 ("ASoC: cs42l51: re-hook of_match_table pointer")
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Link: https://lore.kernel.org/r/20230713112112.778576-1-thomas.petazzoni@bootlin.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf8ecd6ea68099a38e94e9b82cf58f6fd4cdf3c9
Author: Pedro Tammela <pctammela@mojatatu.com>
Date:   Tue Jul 11 18:01:02 2023 -0300

    net/sched: sch_qfq: account for stab overhead in qfq_enqueue
    
    commit 3e337087c3b5805fe0b8a46ba622a962880b5d64 upstream.
    
    Lion says:
    -------
    In the QFQ scheduler a similar issue to CVE-2023-31436
    persists.
    
    Consider the following code in net/sched/sch_qfq.c:
    
    static int qfq_enqueue(struct sk_buff *skb, struct Qdisc *sch,
                    struct sk_buff **to_free)
    {
         unsigned int len = qdisc_pkt_len(skb), gso_segs;
    
        // ...
    
         if (unlikely(cl->agg->lmax < len)) {
             pr_debug("qfq: increasing maxpkt from %u to %u for class %u",
                  cl->agg->lmax, len, cl->common.classid);
             err = qfq_change_agg(sch, cl, cl->agg->class_weight, len);
             if (err) {
                 cl->qstats.drops++;
                 return qdisc_drop(skb, sch, to_free);
             }
    
        // ...
    
         }
    
    Similarly to CVE-2023-31436, "lmax" is increased without any bounds
    checks according to the packet length "len". Usually this would not
    impose a problem because packet sizes are naturally limited.
    
    This is however not the actual packet length, rather the
    "qdisc_pkt_len(skb)" which might apply size transformations according to
    "struct qdisc_size_table" as created by "qdisc_get_stab()" in
    net/sched/sch_api.c if the TCA_STAB option was set when modifying the qdisc.
    
    A user may choose virtually any size using such a table.
    
    As a result the same issue as in CVE-2023-31436 can occur, allowing heap
    out-of-bounds read / writes in the kmalloc-8192 cache.
    -------
    
    We can create the issue with the following commands:
    
    tc qdisc add dev $DEV root handle 1: stab mtu 2048 tsize 512 mpu 0 \
    overhead 999999999 linklayer ethernet qfq
    tc class add dev $DEV parent 1: classid 1:1 htb rate 6mbit burst 15k
    tc filter add dev $DEV parent 1: matchall classid 1:1
    ping -I $DEV 1.1.1.2
    
    This is caused by incorrectly assuming that qdisc_pkt_len() returns a
    length within the QFQ_MIN_LMAX < len < QFQ_MAX_LMAX.
    
    Fixes: 462dbc9101ac ("pkt_sched: QFQ Plus: fair-queueing service at DRR cost")
    Reported-by: Lion <nnamrec@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Shaoying Xu <shaoyi@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e0f324c259d87639bda61a0bdea9c32c4aecdc6
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Mar 22 10:33:28 2023 +0000

    btrfs: fix race between quota disable and quota assign ioctls
    
    commit 2f1a6be12ab6c8470d5776e68644726c94257c54 upstream.
    
    The quota assign ioctl can currently run in parallel with a quota disable
    ioctl call. The assign ioctl uses the quota root, while the disable ioctl
    frees that root, and therefore we can have a use-after-free triggered in
    the assign ioctl, leading to a trace like the following when KASAN is
    enabled:
    
      [672.723][T736] BUG: KASAN: slab-use-after-free in btrfs_search_slot+0x2962/0x2db0
      [672.723][T736] Read of size 8 at addr ffff888022ec0208 by task btrfs_search_sl/27736
      [672.724][T736]
      [672.725][T736] CPU: 1 PID: 27736 Comm: btrfs_search_sl Not tainted 6.3.0-rc3 #37
      [672.723][T736] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
      [672.727][T736] Call Trace:
      [672.728][T736]  <TASK>
      [672.728][T736]  dump_stack_lvl+0xd9/0x150
      [672.725][T736]  print_report+0xc1/0x5e0
      [672.720][T736]  ? __virt_addr_valid+0x61/0x2e0
      [672.727][T736]  ? __phys_addr+0xc9/0x150
      [672.725][T736]  ? btrfs_search_slot+0x2962/0x2db0
      [672.722][T736]  kasan_report+0xc0/0xf0
      [672.729][T736]  ? btrfs_search_slot+0x2962/0x2db0
      [672.724][T736]  btrfs_search_slot+0x2962/0x2db0
      [672.723][T736]  ? fs_reclaim_acquire+0xba/0x160
      [672.722][T736]  ? split_leaf+0x13d0/0x13d0
      [672.726][T736]  ? rcu_is_watching+0x12/0xb0
      [672.723][T736]  ? kmem_cache_alloc+0x338/0x3c0
      [672.722][T736]  update_qgroup_status_item+0xf7/0x320
      [672.724][T736]  ? add_qgroup_rb+0x3d0/0x3d0
      [672.739][T736]  ? do_raw_spin_lock+0x12d/0x2b0
      [672.730][T736]  ? spin_bug+0x1d0/0x1d0
      [672.737][T736]  btrfs_run_qgroups+0x5de/0x840
      [672.730][T736]  ? btrfs_qgroup_rescan_worker+0xa70/0xa70
      [672.738][T736]  ? __del_qgroup_relation+0x4ba/0xe00
      [672.738][T736]  btrfs_ioctl+0x3d58/0x5d80
      [672.735][T736]  ? tomoyo_path_number_perm+0x16a/0x550
      [672.737][T736]  ? tomoyo_execute_permission+0x4a0/0x4a0
      [672.731][T736]  ? btrfs_ioctl_get_supported_features+0x50/0x50
      [672.737][T736]  ? __sanitizer_cov_trace_switch+0x54/0x90
      [672.734][T736]  ? do_vfs_ioctl+0x132/0x1660
      [672.730][T736]  ? vfs_fileattr_set+0xc40/0xc40
      [672.730][T736]  ? _raw_spin_unlock_irq+0x2e/0x50
      [672.732][T736]  ? sigprocmask+0xf2/0x340
      [672.737][T736]  ? __fget_files+0x26a/0x480
      [672.732][T736]  ? bpf_lsm_file_ioctl+0x9/0x10
      [672.738][T736]  ? btrfs_ioctl_get_supported_features+0x50/0x50
      [672.736][T736]  __x64_sys_ioctl+0x198/0x210
      [672.736][T736]  do_syscall_64+0x39/0xb0
      [672.731][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.739][T736] RIP: 0033:0x4556ad
      [672.742][T736]  </TASK>
      [672.743][T736]
      [672.748][T736] Allocated by task 27677:
      [672.743][T736]  kasan_save_stack+0x22/0x40
      [672.741][T736]  kasan_set_track+0x25/0x30
      [672.741][T736]  __kasan_kmalloc+0xa4/0xb0
      [672.749][T736]  btrfs_alloc_root+0x48/0x90
      [672.746][T736]  btrfs_create_tree+0x146/0xa20
      [672.744][T736]  btrfs_quota_enable+0x461/0x1d20
      [672.743][T736]  btrfs_ioctl+0x4a1c/0x5d80
      [672.747][T736]  __x64_sys_ioctl+0x198/0x210
      [672.749][T736]  do_syscall_64+0x39/0xb0
      [672.744][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.756][T736]
      [672.757][T736] Freed by task 27677:
      [672.759][T736]  kasan_save_stack+0x22/0x40
      [672.759][T736]  kasan_set_track+0x25/0x30
      [672.756][T736]  kasan_save_free_info+0x2e/0x50
      [672.751][T736]  ____kasan_slab_free+0x162/0x1c0
      [672.758][T736]  slab_free_freelist_hook+0x89/0x1c0
      [672.752][T736]  __kmem_cache_free+0xaf/0x2e0
      [672.752][T736]  btrfs_put_root+0x1ff/0x2b0
      [672.759][T736]  btrfs_quota_disable+0x80a/0xbc0
      [672.752][T736]  btrfs_ioctl+0x3e5f/0x5d80
      [672.756][T736]  __x64_sys_ioctl+0x198/0x210
      [672.753][T736]  do_syscall_64+0x39/0xb0
      [672.765][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.769][T736]
      [672.768][T736] The buggy address belongs to the object at ffff888022ec0000
      [672.768][T736]  which belongs to the cache kmalloc-4k of size 4096
      [672.769][T736] The buggy address is located 520 bytes inside of
      [672.769][T736]  freed 4096-byte region [ffff888022ec0000, ffff888022ec1000)
      [672.760][T736]
      [672.764][T736] The buggy address belongs to the physical page:
      [672.761][T736] page:ffffea00008bb000 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x22ec0
      [672.766][T736] head:ffffea00008bb000 order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0
      [672.779][T736] flags: 0xfff00000010200(slab|head|node=0|zone=1|lastcpupid=0x7ff)
      [672.770][T736] raw: 00fff00000010200 ffff888012842140 ffffea000054ba00 dead000000000002
      [672.770][T736] raw: 0000000000000000 0000000000040004 00000001ffffffff 0000000000000000
      [672.771][T736] page dumped because: kasan: bad access detected
      [672.778][T736] page_owner tracks the page as allocated
      [672.777][T736] page last allocated via order 3, migratetype Unmovable, gfp_mask 0xd2040(__GFP_IO|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC), pid 88
      [672.779][T736]  get_page_from_freelist+0x119c/0x2d50
      [672.779][T736]  __alloc_pages+0x1cb/0x4a0
      [672.776][T736]  alloc_pages+0x1aa/0x270
      [672.773][T736]  allocate_slab+0x260/0x390
      [672.771][T736]  ___slab_alloc+0xa9a/0x13e0
      [672.778][T736]  __slab_alloc.constprop.0+0x56/0xb0
      [672.771][T736]  __kmem_cache_alloc_node+0x136/0x320
      [672.789][T736]  __kmalloc+0x4e/0x1a0
      [672.783][T736]  tomoyo_realpath_from_path+0xc3/0x600
      [672.781][T736]  tomoyo_path_perm+0x22f/0x420
      [672.782][T736]  tomoyo_path_unlink+0x92/0xd0
      [672.780][T736]  security_path_unlink+0xdb/0x150
      [672.788][T736]  do_unlinkat+0x377/0x680
      [672.788][T736]  __x64_sys_unlink+0xca/0x110
      [672.789][T736]  do_syscall_64+0x39/0xb0
      [672.783][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.784][T736] page last free stack trace:
      [672.787][T736]  free_pcp_prepare+0x4e5/0x920
      [672.787][T736]  free_unref_page+0x1d/0x4e0
      [672.784][T736]  __unfreeze_partials+0x17c/0x1a0
      [672.797][T736]  qlist_free_all+0x6a/0x180
      [672.796][T736]  kasan_quarantine_reduce+0x189/0x1d0
      [672.797][T736]  __kasan_slab_alloc+0x64/0x90
      [672.793][T736]  kmem_cache_alloc+0x17c/0x3c0
      [672.799][T736]  getname_flags.part.0+0x50/0x4e0
      [672.799][T736]  getname_flags+0x9e/0xe0
      [672.792][T736]  vfs_fstatat+0x77/0xb0
      [672.791][T736]  __do_sys_newlstat+0x84/0x100
      [672.798][T736]  do_syscall_64+0x39/0xb0
      [672.796][T736]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
      [672.790][T736]
      [672.791][T736] Memory state around the buggy address:
      [672.799][T736]  ffff888022ec0100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.805][T736]  ffff888022ec0180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.802][T736] >ffff888022ec0200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.809][T736]                       ^
      [672.809][T736]  ffff888022ec0280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [672.809][T736]  ffff888022ec0300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fix this by having the qgroup assign ioctl take the qgroup ioctl mutex
    before calling btrfs_run_qgroups(), which is what all qgroup ioctls should
    call.
    
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    Link: https://lore.kernel.org/linux-btrfs/CAFcO6XN3VD8ogmHwqRk4kbiwtpUSNySu2VAxN8waEPciCHJvMA@mail.gmail.com/
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Harshvardhan Jha <harshvardhan.j.jha@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f8f86bc5d3367a0099891d8f0dd3c698f79a4b4
Author: Marcos Paulo de Souza <mpdesouza@suse.com>
Date:   Mon Nov 25 21:58:51 2019 -0300

    btrfs: qgroup: return ENOTCONN instead of EINVAL when quotas are not enabled
    
    commit 8a36e408d40606e21cd4e2dd9601004a67b14868 upstream.
    
    [PROBLEM]
    qgroup create/remove code is currently returning EINVAL when the user
    tries to create a qgroup on a subvolume without quota enabled. EINVAL is
    already being used for too many error scenarios so that is hard to
    depict what is the problem.
    
    [FIX]
    Currently scrub and balance code return -ENOTCONN when the user tries to
    cancel/pause and no scrub or balance is currently running for the
    desired subvolume. Do the same here by returning -ENOTCONN  when a user
    tries to create/delete/assing/list a qgroup on a subvolume without quota
    enabled.
    
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Marcos Paulo de Souza <mpdesouza@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Harshvardhan Jha <harshvardhan.j.jha@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c1d1f3a33e5ce70f859469379c81c791dcc9e73
Author: Marcos Paulo de Souza <mpdesouza@suse.com>
Date:   Mon Nov 25 21:58:50 2019 -0300

    btrfs: qgroup: remove one-time use variables for quota_root checks
    
    commit e3b0edd29737d44137fc7583a9c185abda6e23b8 upstream.
    
    Remove some variables that are set only to be checked later, and never
    used.
    
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Marcos Paulo de Souza <mpdesouza@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Harshvardhan Jha <harshvardhan.j.jha@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8b1499e420e4426607d04ad468ffa37a2293c03
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Dec 28 22:26:04 2022 +0100

    cpufreq: intel_pstate: Drop ACPI _PSS states table patching
    
    commit e8a0e30b742f76ebd0f3b196973df4bf65d8fbbb upstream.
    
    After making acpi_processor_get_platform_limit() use the "no limit"
    value for its frequency QoS request when _PPC returns 0, it is not
    necessary to replace the frequency corresponding to the first _PSS
    return package entry with the maximum turbo frequency of the given
    CPU in intel_pstate_init_acpi_perf_limits() any more, so drop the
    code doing that along with the comment explaining it.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Hagar Hemdan <hagarhem@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f331413e1cf1fa1f0843033c37ed1134019a9fca
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Dec 28 22:24:10 2022 +0100

    ACPI: processor: perflib: Avoid updating frequency QoS unnecessarily
    
    commit 99387b016022c29234c4ebf9abd34358c6e56532 upstream.
    
    Modify acpi_processor_get_platform_limit() to avoid updating its
    frequency QoS request when the _PPC return value has not changed
    by comparing that value to the previous _PPC return value stored in
    the performance_platform_limit field of the struct acpi_processor
    corresponding to the given CPU.
    
    While at it, do the _PPC return value check against the state count
    earlier, to avoid setting performance_platform_limit to an invalid
    value, and make acpi_processor_ppc_init() use FREQ_QOS_MAX_DEFAULT_VALUE
    as the "no limit" frequency QoS for consistency.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Hagar Hemdan <hagarhem@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 511851c870311383e405da8920bc961c377d9fef
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Dec 28 22:21:49 2022 +0100

    ACPI: processor: perflib: Use the "no limit" frequency QoS
    
    commit c02d5feb6e2f60affc6ba8606d8d614c071e2ba6 upstream.
    
    When _PPC returns 0, it means that the CPU frequency is not limited by
    the platform firmware, so make acpi_processor_get_platform_limit()
    update the frequency QoS request used by it to "no limit" in that case.
    
    This addresses a problem with limiting CPU frequency artificially on
    some systems after CPU offline/online to the frequency that corresponds
    to the first entry in the _PSS return package.
    
    Reported-by: Pratyush Yadav <ptyadav@amazon.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Pratyush Yadav <ptyadav@amazon.de>
    Tested-by: Pratyush Yadav <ptyadav@amazon.de>
    Tested-by: Hagar Hemdan <hagarhem@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81cd6ceee7cefbbaa9ddc714e27206e5b01155bc
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Jul 25 11:44:41 2023 -0400

    dm cache policy smq: ensure IO doesn't prevent cleaner policy progress
    
    commit 1e4ab7b4c881cf26c1c72b3f56519e03475486fb upstream.
    
    When using the cleaner policy to decommission the cache, there is
    never any writeback started from the cache as it is constantly delayed
    due to normal I/O keeping the device busy. Meaning @idle=false was
    always being passed to clean_target_met()
    
    Fix this by adding a specific 'cleaner' flag that is set when the
    cleaner policy is configured. This flag serves to always allow the
    cleaner's writeback work to be queued until the cache is
    decommissioned (even if the cache isn't idle).
    
    Reported-by: David Jeffery <djeffery@redhat.com>
    Fixes: b29d4986d0da ("dm cache: significant rework to leverage dm-bio-prison-v2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3efc4767a4600642c0ce077a27d585ad77cecbd
Author: Mark Brown <broonie@kernel.org>
Date:   Sun Jul 23 00:27:22 2023 +0100

    ASoC: wm8904: Fill the cache for WM8904_ADC_TEST_0 register
    
    commit f061e2be8689057cb4ec0dbffa9f03e1a23cdcb2 upstream.
    
    The WM8904_ADC_TEST_0 register is modified as part of updating the OSR
    controls but does not have a cache default, leading to errors when we try
    to modify these controls in cache only mode with no prior read:
    
    wm8904 3-001a: ASoC: error at snd_soc_component_update_bits on wm8904.3-001a for register: [0x000000c6] -16
    
    Add a read of the register to probe() to fill the cache and avoid both the
    error messages and the misconfiguration of the chip which will result.
    
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230723-asoc-fix-wm8904-adc-test-read-v1-1-2cdf2edd83fd@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00748bc586a406a1eb75a59d79f7dc6a3d132f70
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Fri Jul 21 21:36:44 2023 +0200

    s390/dasd: fix hanging device after quiesce/resume
    
    commit 05f1d8ed03f547054efbc4d29bb7991c958ede95 upstream.
    
    Quiesce and resume are functions that tell the DASD driver to stop/resume
    issuing I/Os to a specific DASD.
    
    On resume dasd_schedule_block_bh() is called to kick handling of IO
    requests again. This does unfortunately not cover internal requests which
    are used for path verification for example.
    
    This could lead to a hanging device when a path event or anything else
    that triggers internal requests occurs on a quiesced device.
    
    Fix by also calling dasd_schedule_device_bh() which triggers handling of
    internal requests on resume.
    
    Fixes: 8e09f21574ea ("[S390] dasd: add hyper PAV support to DASD device driver, part 1")
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Link: https://lore.kernel.org/r/20230721193647.3889634-2-sth@linux.ibm.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73e872466ddc5dd0e51b9b5876a090fa1d7ee0a8
Author: Jason Wang <jasowang@redhat.com>
Date:   Tue Jul 25 03:20:49 2023 -0400

    virtio-net: fix race between set queues and probe
    
    commit 25266128fe16d5632d43ada34c847d7b8daba539 upstream.
    
    A race were found where set_channels could be called after registering
    but before virtnet_set_queues() in virtnet_probe(). Fixing this by
    moving the virtnet_set_queues() before netdevice registering. While at
    it, use _virtnet_set_queues() to avoid holding rtnl as the device is
    not even registered at that time.
    
    Cc: stable@vger.kernel.org
    Fixes: a220871be66f ("virtio-net: correctly enable multiqueue")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Link: https://lore.kernel.org/r/20230725072049.617289-1-jasowang@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6db2a3c5c201267c3eae5816d6310b83a325695e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jul 21 10:49:20 2023 +0100

    btrfs: check if the transaction was aborted at btrfs_wait_for_commit()
    
    [ Upstream commit bf7ecbe9875061bf3fce1883e3b26b77f847d1e8 ]
    
    At btrfs_wait_for_commit() we wait for a transaction to finish and then
    always return 0 (success) without checking if it was aborted, in which
    case the transaction didn't happen due to some critical error. Fix this
    by checking if the transaction was aborted.
    
    Fixes: 462045928bda ("Btrfs: add START_SYNC, WAIT_SYNC ioctls")
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5adbd7ccd4309cd76cfb92898775b6dc2a545fad
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Thu Jun 29 09:26:20 2023 +0200

    irq-bcm6345-l1: Do not assume a fixed block to cpu mapping
    
    [ Upstream commit 55ad24857341c36616ecc1d9580af5626c226cf1 ]
    
    The irq to block mapping is fixed, and interrupts from the first block
    will always be routed to the first parent IRQ. But the parent interrupts
    themselves can be routed to any available CPU.
    
    This is used by the bootloader to map the first parent interrupt to the
    boot CPU, regardless wether the boot CPU is the first one or the second
    one.
    
    When booting from the second CPU, the assumption that the first block's
    IRQ is mapped to the first CPU breaks, and the system hangs because
    interrupts do not get routed correctly.
    
    Fix this by passing the appropriate bcm6434_l1_cpu to the interrupt
    handler instead of the chip itself, so the handler always has the right
    block.
    
    Fixes: c7c42ec2baa1 ("irqchips/bmips: Add bcm6345-l1 interrupt controller")
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@linaro.org>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20230629072620.62527-1-jonas.gorski@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0019e13a9e97e56d8e4f4fbaa745babc6f61f5d
Author: Alexander Steffen <Alexander.Steffen@infineon.com>
Date:   Tue Jun 13 20:02:56 2023 +0200

    tpm_tis: Explicitly check for error code
    
    commit 513253f8c293c0c8bd46d09d337fc892bf8f9f48 upstream.
    
    recv_data either returns the number of received bytes, or a negative value
    representing an error code. Adding the return value directly to the total
    number of received bytes therefore looks a little weird, since it might add
    a negative error code to a sum of bytes.
    
    The following check for size < expected usually makes the function return
    ETIME in that case, so it does not cause too many problems in practice. But
    to make the code look cleaner and because the caller might still be
    interested in the original error code, explicitly check for the presence of
    an error code and pass that through.
    
    Cc: stable@vger.kernel.org
    Fixes: cb5354253af2 ("[PATCH] tpm: spacing cleanups 2")
    Signed-off-by: Alexander Steffen <Alexander.Steffen@infineon.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1c6e68003d3197e97789423f90ab1815718e0de
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jul 21 10:49:21 2023 +0100

    btrfs: check for commit error at btrfs_attach_transaction_barrier()
    
    commit b28ff3a7d7e97456fd86b68d24caa32e1cfa7064 upstream.
    
    btrfs_attach_transaction_barrier() is used to get a handle pointing to the
    current running transaction if the transaction has not started its commit
    yet (its state is < TRANS_STATE_COMMIT_START). If the transaction commit
    has started, then we wait for the transaction to commit and finish before
    returning - however we completely ignore if the transaction was aborted
    due to some error during its commit, we simply return ERR_PT(-ENOENT),
    which makes the caller assume everything is fine and no errors happened.
    
    This could make an fsync return success (0) to user space when in fact we
    had a transaction abort and the target inode changes were therefore not
    persisted.
    
    Fix this by checking for the return value from btrfs_wait_for_commit(),
    and if it returned an error, return it back to the caller.
    
    Fixes: d4edf39bd5db ("Btrfs: fix uncompleted transaction")
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee2eed8306b3433235542bbf6122f95665885348
Author: Gilles Buloz <Gilles.Buloz@kontron.com>
Date:   Mon Jul 24 08:04:44 2023 +0000

    hwmon: (nct7802) Fix for temp6 (PECI1) processed even if PECI1 disabled
    
    commit 54685abe660a59402344d5045ce08c43c6a5ac42 upstream.
    
    Because of hex value 0x46 used instead of decimal 46, the temp6
    (PECI1) temperature is always declared visible and then displayed
    even if disabled in the chip
    
    Signed-off-by: Gilles Buloz <gilles.buloz@kontron.com>
    Link: https://lore.kernel.org/r/DU0PR10MB62526435ADBC6A85243B90E08002A@DU0PR10MB6252.EURPRD10.PROD.OUTLOOK.COM
    Fixes: fcdc5739dce03 ("hwmon: (nct7802) add temperature sensor type attribute")
    Cc: stable@vger.kernel.org
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5373a1aa91b2298f9305794b8270cf9896be96b6
Author: Zhang Shurong <zhang_shurong@foxmail.com>
Date:   Sun Jul 9 13:50:07 2023 +0800

    staging: ks7010: potential buffer overflow in ks_wlan_set_encode_ext()
    
    commit 5f1c7031e044cb2fba82836d55cc235e2ad619dc upstream.
    
    The "exc->key_len" is a u16 that comes from the user.  If it's over
    IW_ENCODING_TOKEN_MAX (64) that could lead to memory corruption.
    
    Fixes: b121d84882b9 ("staging: ks7010: simplify calls to memcpy()")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Zhang Shurong <zhang_shurong@foxmail.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/tencent_5153B668C0283CAA15AA518325346E026A09@qq.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 352e0cae4cce66f43b455dd5e76b6f41e58d3a77
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jun 30 09:14:21 2023 +0200

    Documentation: security-bugs.rst: clarify CVE handling
    
    commit 3c1897ae4b6bc7cc586eda2feaa2cd68325ec29c upstream.
    
    The kernel security team does NOT assign CVEs, so document that properly
    and provide the "if you want one, ask MITRE for it" response that we
    give on a weekly basis in the document, so we don't have to constantly
    say it to everyone who asks.
    
    Link: https://lore.kernel.org/r/2023063022-retouch-kerosene-7e4a@gregkh
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e331a88ea56be3a10921680e09ba0789e74dd6c5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jun 30 09:14:20 2023 +0200

    Documentation: security-bugs.rst: update preferences when dealing with the linux-distros group
    
    commit 4fee0915e649bd0cea56dece6d96f8f4643df33c upstream.
    
    Because the linux-distros group forces reporters to release information
    about reported bugs, and they impose arbitrary deadlines in having those
    bugs fixed despite not actually being kernel developers, the kernel
    security team recommends not interacting with them at all as this just
    causes confusion and the early-release of reported security problems.
    
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/2023063020-throat-pantyhose-f110@gregkh
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd21197af5753ea4c114752db0aba80aa9f27af9
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Tue Jul 4 17:08:27 2023 +0300

    Revert "usb: xhci: tegra: Fix error check"
    
    commit 288b4fa1798e3637a9304c6e90a93d900e02369c upstream.
    
    This reverts commit 18fc7c435be3f17ea26a21b2e2312fcb9088e01f.
    
    The reverted commit was based on static analysis and a misunderstanding
    of how PTR_ERR() and NULLs are supposed to work.  When a function
    returns both pointer errors and NULL then normally the NULL means
    "continue operating without a feature because it was deliberately
    turned off".  The NULL should not be treated as a failure.  If a driver
    cannot work when that feature is disabled then the KConfig should
    enforce that the function cannot return NULL.  We should not need to
    test for it.
    
    In this code, the patch means that certain tegra_xusb_probe() will
    fail if the firmware supports power-domains but CONFIG_PM is disabled.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Fixes: 18fc7c435be3 ("usb: xhci: tegra: Fix error check")
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/8baace8d-fb4b-41a4-ad5f-848ae643a23b@moroto.mountain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0c92c32913182fa550a6e5d628c8ff0080598e6
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Wed Jul 19 13:01:04 2023 +0000

    usb: xhci-mtk: set the dma max_seg_size
    
    commit 9fd10829a9eb482e192a845675ecc5480e0bfa10 upstream.
    
    Allow devices to have dma operations beyond 64K, and avoid warnings such
    as:
    
    DMA-API: xhci-mtk 11200000.usb: mapping sg segment longer than device claims to support [len=98304] [max=65536]
    
    Fixes: 0cbd4b34cda9 ("xhci: mediatek: support MTK xHCI host controller")
    Cc: stable <stable@kernel.org>
    Tested-by: Zubin Mithra <zsm@chromium.org>
    Reported-by: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Link: https://lore.kernel.org/r/20230628-mtk-usb-v2-1-c8c34eb9f229@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f39d58a0c1a957585a53caff4520cebf7122e0d
Author: Łukasz Bartosik <lb@semihalf.com>
Date:   Mon Jul 24 13:29:11 2023 +0200

    USB: quirks: add quirk for Focusrite Scarlett
    
    commit 9dc162e22387080e2d06de708b89920c0e158c9a upstream.
    
    The Focusrite Scarlett audio device does not behave correctly during
    resumes. Below is what happens during every resume (captured with
    Beagle 5000):
    
    <Suspend>
    <Resume>
    <Reset>/<Chirp J>/<Tiny J>
    <Reset/Target disconnected>
    <High Speed>
    
    The Scarlett disconnects and is enumerated again.
    
    However from time to time it drops completely off the USB bus during
    resume. Below is captured occurrence of such an event:
    
    <Suspend>
    <Resume>
    <Reset>/<Chirp J>/<Tiny J>
    <Reset>/<Chirp K>/<Tiny K>
    <High Speed>
    <Corrupted packet>
    <Reset/Target disconnected>
    
    To fix the condition a user has to unplug and plug the device again.
    
    With USB_QUIRK_RESET_RESUME applied ("usbcore.quirks=1235:8211:b")
    for the Scarlett audio device the issue still reproduces.
    
    Applying USB_QUIRK_DISCONNECT_SUSPEND ("usbcore.quirks=1235:8211:m")
    fixed the issue and the Scarlett audio device didn't drop off the USB
    bus for ~5000 suspend/resume cycles where originally issue reproduced in
    ~100 or less suspend/resume cycles.
    
    Signed-off-by: Łukasz Bartosik <lb@semihalf.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230724112911.1802577-1-lb@semihalf.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f86b1b3b539d5a6fa94368f8f0c2ad3abeed8af
Author: Guiting Shen <aarongt.shen@gmail.com>
Date:   Mon Jun 26 23:27:13 2023 +0800

    usb: ohci-at91: Fix the unhandle interrupt when resume
    
    commit c55afcbeaa7a6f4fffdbc999a9bf3f0b29a5186f upstream.
    
    The ohci_hcd_at91_drv_suspend() sets ohci->rh_state to OHCI_RH_HALTED when
    suspend which will let the ohci_irq() skip the interrupt after resume. And
    nobody to handle this interrupt.
    
    According to the comment in ohci_hcd_at91_drv_suspend(), it need to reset
    when resume from suspend(MEM) to fix by setting "hibernated" argument of
    ohci_resume().
    
    Signed-off-by: Guiting Shen <aarongt.shen@gmail.com>
    Cc: stable <stable@kernel.org>
    Reviewed-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20230626152713.18950-1-aarongt.shen@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 640cb5f5e4b41fe050519e108d7505a5fd2124c9
Author: Jisheng Zhang <jszhang@kernel.org>
Date:   Wed Jun 28 00:20:18 2023 +0800

    usb: dwc3: don't reset device side if dwc3 was configured as host-only
    
    commit e835c0a4e23c38531dcee5ef77e8d1cf462658c7 upstream.
    
    Commit c4a5153e87fd ("usb: dwc3: core: Power-off core/PHYs on
    system_suspend in host mode") replaces check for HOST only dr_mode with
    current_dr_role. But during booting, the current_dr_role isn't
    initialized, thus the device side reset is always issued even if dwc3
    was configured as host-only. What's more, on some platforms with host
    only dwc3, aways issuing device side reset by accessing device register
    block can cause kernel panic.
    
    Fixes: c4a5153e87fd ("usb: dwc3: core: Power-off core/PHYs on system_suspend in host mode")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Jisheng Zhang <jszhang@kernel.org>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230627162018.739-1-jszhang@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d080cf4fab9fd0c21909ce4d1afb3ecf0d5b16
Author: Gratian Crisan <gratian.crisan@ni.com>
Date:   Wed Jul 26 13:45:56 2023 -0500

    usb: dwc3: pci: skip BYT GPIO lookup table for hardwired phy
    
    commit b32b8f2b9542d8039f5468303a6ca78c1b5611a5 upstream.
    
    Hardware based on the Bay Trail / BYT SoCs require an external ULPI phy for
    USB device-mode. The phy chip usually has its 'reset' and 'chip select'
    lines connected to GPIOs described by ACPI fwnodes in the DSDT table.
    
    Because of hardware with missing ACPI resources for the 'reset' and 'chip
    select' GPIOs commit 5741022cbdf3 ("usb: dwc3: pci: Add GPIO lookup table
    on platforms without ACPI GPIO resources") introduced a fallback
    gpiod_lookup_table with hard-coded mappings for Bay Trail devices.
    
    However there are existing Bay Trail based devices, like the National
    Instruments cRIO-903x series, where the phy chip has its 'reset' and
    'chip-select' lines always asserted in hardware via resistor pull-ups. On
    this hardware the phy chip is always enabled and the ACPI dsdt table is
    missing information not only for the 'chip-select' and 'reset' lines but
    also for the BYT GPIO controller itself "INT33FC".
    
    With the introduction of the gpiod_lookup_table initializing the USB
    device-mode on these hardware now errors out. The error comes from the
    gpiod_get_optional() calls in dwc3_pci_quirks() which will now return an
    -ENOENT error due to the missing ACPI entry for the INT33FC gpio controller
    used in the aforementioned table.
    
    This hardware used to work before because gpiod_get_optional() will return
    NULL instead of -ENOENT if no GPIO has been assigned to the requested
    function. The dwc3_pci_quirks() code for setting the 'cs' and 'reset' GPIOs
    was then skipped (due to the NULL return). This is the correct behavior in
    cases where the phy chip is hardwired and there are no GPIOs to control.
    
    Since the gpiod_lookup_table relies on the presence of INT33FC fwnode
    in ACPI tables only add the table if we know the entry for the INT33FC
    gpio controller is present. This allows Bay Trail based devices with
    hardwired dwc3 ULPI phys to continue working.
    
    Fixes: 5741022cbdf3 ("usb: dwc3: pci: Add GPIO lookup table on platforms without ACPI GPIO resources")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Gratian Crisan <gratian.crisan@ni.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230726184555.218091-2-gratian.crisan@ni.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fc6ace75ceb76cff10f590bfced642fda6cc2af
Author: Jakub Vanek <linuxtardis@gmail.com>
Date:   Fri Jul 14 14:24:19 2023 +0200

    Revert "usb: dwc3: core: Enable AutoRetry feature in the controller"
    
    commit 734ae15ab95a18d3d425fc9cb38b7a627d786f08 upstream.
    
    This reverts commit b138e23d3dff90c0494925b4c1874227b81bddf7.
    
    AutoRetry has been found to sometimes cause controller freezes when
    communicating with buggy USB devices.
    
    This controller feature allows the controller in host mode to send
    non-terminating/burst retry ACKs instead of terminating retry ACKs
    to devices when a transaction error (CRC error or overflow) occurs.
    
    Unfortunately, if the USB device continues to respond with a CRC error,
    the controller will not complete endpoint-related commands while it
    keeps trying to auto-retry. [3] The xHCI driver will notice this once
    it tries to abort the transfer using a Stop Endpoint command and
    does not receive a completion in time. [1]
    This situation is reported to dmesg:
    
    [sda] tag#29 uas_eh_abort_handler 0 uas-tag 1 inflight: CMD IN
    [sda] tag#29 CDB: opcode=0x28 28 00 00 69 42 80 00 00 48 00
    xhci-hcd: xHCI host not responding to stop endpoint command
    xhci-hcd: xHCI host controller not responding, assume dead
    xhci-hcd: HC died; cleaning up
    
    Some users observed this problem on an Odroid HC2 with the JMS578
    USB3-to-SATA bridge. The issue can be triggered by starting
    a read-heavy workload on an attached SSD. After a while, the host
    controller would die and the SSD would disappear from the system. [1]
    
    Further analysis by Synopsys determined that controller revisions
    other than the one in Odroid HC2 are also affected by this.
    The recommended solution was to disable AutoRetry altogether.
    This change does not have a noticeable performance impact. [2]
    
    Revert the enablement commit. This will keep the AutoRetry bit in
    the default state configured during SoC design [2].
    
    Fixes: b138e23d3dff ("usb: dwc3: core: Enable AutoRetry feature in the controller")
    Link: https://lore.kernel.org/r/a21f34c04632d250cd0a78c7c6f4a1c9c7a43142.camel@gmail.com/ [1]
    Link: https://lore.kernel.org/r/20230711214834.kyr6ulync32d4ktk@synopsys.com/ [2]
    Link: https://lore.kernel.org/r/20230712225518.2smu7wse6djc7l5o@synopsys.com/ [3]
    Cc: stable@vger.kernel.org
    Cc: Mauro Ribeiro <mauro.ribeiro@hardkernel.com>
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Suggested-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Jakub Vanek <linuxtardis@gmail.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/20230714122419.27741-1-linuxtardis@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80d40a3d6d45d3d23899ec5e772fff6d30744438
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Jul 18 11:43:54 2023 +0200

    can: gs_usb: gs_can_close(): add missing set of CAN state to CAN_STATE_STOPPED
    
    commit f8a2da6ec2417cca169fa85a8ab15817bccbb109 upstream.
    
    After an initial link up the CAN device is in ERROR-ACTIVE mode. Due
    to a missing CAN_STATE_STOPPED in gs_can_close() it doesn't change to
    STOPPED after a link down:
    
    | ip link set dev can0 up
    | ip link set dev can0 down
    | ip --details link show can0
    | 13: can0: <NOARP,ECHO> mtu 16 qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 10
    |     link/can  promiscuity 0 allmulti 0 minmtu 0 maxmtu 0
    |     can state ERROR-ACTIVE restart-ms 1000
    
    Add missing assignment of CAN_STATE_STOPPED in gs_can_close().
    
    Cc: stable@vger.kernel.org
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Link: https://lore.kernel.org/all/20230718-gs_usb-fix-can-state-v1-1-f19738ae2c23@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58f0affb3c47d12f2502ce42d93d529f07f1cf5d
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Jul 20 09:53:57 2023 +0200

    USB: serial: simple: sort driver entries
    
    commit d245aedc00775c4d7265a9f4522cc4e1fd34d102 upstream.
    
    Sort the driver symbols alphabetically in order to make it more obvious
    where new driver entries should be added.
    
    Cc: stable@vger.kernel.org
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43ee3cf0c783de943624ea4815de1d780ebba1c7
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Jul 12 16:16:41 2023 +0200

    USB: serial: simple: add Kaufmann RKS+CAN VCP
    
    commit dd92c8a1f99bcd166204ffc219ea5a23dd65d64f upstream.
    
    Add the device and product ID for this CAN bus interface / license
    dongle. The device is usable either directly from user space or can be
    attached to a kernel CAN interface with slcan_attach.
    
    Reported-by: Kaufmann Automotive GmbH <info@kaufmann-automotive.ch>
    Tested-by: Kaufmann Automotive GmbH <info@kaufmann-automotive.ch>
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    [ johan: amend commit message and move entries in sort order ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcf1fc781ea18d33c32afba5da3d6e579ac6ac8a
Author: Mohsen Tahmasebi <moh53n@moh53n.ir>
Date:   Mon Jul 10 11:22:18 2023 +0330

    USB: serial: option: add Quectel EC200A module support
    
    commit 857ea9005806e2a458016880278f98715873e977 upstream.
    
    Add Quectel EC200A "DIAG, AT, MODEM":
    
    0x6005: ECM / RNDIS + DIAG + AT + MODEM
    
    T:  Bus=01 Lev=01 Prnt=02 Port=05 Cnt=01 Dev#=  8 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=6005 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=0000
    C:  #Ifs= 5 Cfg#= 1 Atr=e0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:  If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=0c(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=0b(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=89(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:  If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=0a(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    
    Signed-off-by: Mohsen Tahmasebi <moh53n@moh53n.ir>
    Tested-by: Mostafa Ghofrani <mostafaghrr@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ec7c5ef6021da84b3212d61d0a987ab5dab7d9f
Author: Jerry Meng <jerry-meng@foxmail.com>
Date:   Thu Jun 29 17:35:22 2023 +0800

    USB: serial: option: support Quectel EM060K_128
    
    commit 4f7cab49cecee16120d27c1734cfdf3d6c0e5329 upstream.
    
    EM060K_128 is EM060K's sub-model, having the same name "Quectel EM060K-GL"
    
    MBIM + GNSS + DIAG + NMEA + AT + QDSS + DPL
    
    T:  Bus=03 Lev=01 Prnt=01 Port=01 Cnt=02 Dev#=  8 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0128 Rev= 5.04
    S:  Manufacturer=Quectel
    S:  Product=Quectel EM060K-GL
    S:  SerialNumber=f6fa08b6
    C:* #Ifs= 8 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=8e(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E:  Ad=82(I) Atr=03(Int.) MxPS=  64 Ivl=32ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=70 Driver=(none)
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 7 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=80 Driver=(none)
    E:  Ad=8f(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Jerry Meng <jerry-meng@foxmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da7ebd86cd2edd4ef9c28256951eed68292c41a2
Author: Samuel Holland <samuel.holland@sifive.com>
Date:   Fri Jun 23 23:01:59 2023 -0700

    serial: sifive: Fix sifive_serial_console_setup() section
    
    commit 9b8fef6345d5487137d4193bb0a0eae2203c284e upstream.
    
    This function is called indirectly from the platform driver probe
    function. Even if the driver is built in, it may be probed after
    free_initmem() due to deferral or unbinding/binding via sysfs.
    Thus the function cannot be marked as __init.
    
    Fixes: 45c054d0815b ("tty: serial: add driver for the SiFive UART")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Samuel Holland <samuel.holland@sifive.com>
    Link: https://lore.kernel.org/r/20230624060159.3401369-1-samuel.holland@sifive.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d674cb90a9ef49e86841455de1330e6ee59071c4
Author: Ruihong Luo <colorsu1922@gmail.com>
Date:   Thu Jul 13 08:42:36 2023 +0800

    serial: 8250_dw: Preserve original value of DLF register
    
    commit 748c5ea8b8796ae8ee80b8d3a3d940570b588d59 upstream.
    
    Preserve the original value of the Divisor Latch Fraction (DLF) register.
    When the DLF register is modified without preservation, it can disrupt
    the baudrate settings established by firmware or bootloader, leading to
    data corruption and the generation of unreadable or distorted characters.
    
    Fixes: 701c5e73b296 ("serial: 8250_dw: add fractional divisor support")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Ruihong Luo <colorsu1922@gmail.com>
    Link: https://lore.kernel.org/stable/20230713004235.35904-1-colorsu1922%40gmail.com
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20230713004235.35904-1-colorsu1922@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdcc35e6454133feb61561b4e0d0c80e52cbc2ba
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Jul 26 17:58:04 2023 +0800

    tracing: Fix warning in trace_buffered_event_disable()
    
    [ Upstream commit dea499781a1150d285c62b26659f62fb00824fce ]
    
    Warning happened in trace_buffered_event_disable() at
      WARN_ON_ONCE(!trace_buffered_event_ref)
    
      Call Trace:
       ? __warn+0xa5/0x1b0
       ? trace_buffered_event_disable+0x189/0x1b0
       __ftrace_event_enable_disable+0x19e/0x3e0
       free_probe_data+0x3b/0xa0
       unregister_ftrace_function_probe_func+0x6b8/0x800
       event_enable_func+0x2f0/0x3d0
       ftrace_process_regex.isra.0+0x12d/0x1b0
       ftrace_filter_write+0xe6/0x140
       vfs_write+0x1c9/0x6f0
       [...]
    
    The cause of the warning is in __ftrace_event_enable_disable(),
    trace_buffered_event_enable() was called once while
    trace_buffered_event_disable() was called twice.
    Reproduction script show as below, for analysis, see the comments:
     ```
     #!/bin/bash
    
     cd /sys/kernel/tracing/
    
     # 1. Register a 'disable_event' command, then:
     #    1) SOFT_DISABLED_BIT was set;
     #    2) trace_buffered_event_enable() was called first time;
     echo 'cmdline_proc_show:disable_event:initcall:initcall_finish' > \
         set_ftrace_filter
    
     # 2. Enable the event registered, then:
     #    1) SOFT_DISABLED_BIT was cleared;
     #    2) trace_buffered_event_disable() was called first time;
     echo 1 > events/initcall/initcall_finish/enable
    
     # 3. Try to call into cmdline_proc_show(), then SOFT_DISABLED_BIT was
     #    set again!!!
     cat /proc/cmdline
    
     # 4. Unregister the 'disable_event' command, then:
     #    1) SOFT_DISABLED_BIT was cleared again;
     #    2) trace_buffered_event_disable() was called second time!!!
     echo '!cmdline_proc_show:disable_event:initcall:initcall_finish' > \
         set_ftrace_filter
     ```
    
    To fix it, IIUC, we can change to call trace_buffered_event_enable() at
    fist time soft-mode enabled, and call trace_buffered_event_disable() at
    last time soft-mode disabled.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230726095804.920457-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Fixes: 0fc1b09ff1ff ("tracing: Use temp buffer when filtering events")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7b20279244f5c4e41ce715b912840d84019fbc6
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Mon Jul 24 13:40:40 2023 +0800

    ring-buffer: Fix wrong stat of cpu_buffer->read
    
    [ Upstream commit 2d093282b0d4357373497f65db6a05eb0c28b7c8 ]
    
    When pages are removed in rb_remove_pages(), 'cpu_buffer->read' is set
    to 0 in order to make sure any read iterators reset themselves. However,
    this will mess 'entries' stating, see following steps:
    
      # cd /sys/kernel/tracing/
      # 1. Enlarge ring buffer prepare for later reducing:
      # echo 20 > per_cpu/cpu0/buffer_size_kb
      # 2. Write a log into ring buffer of cpu0:
      # taskset -c 0 echo "hello1" > trace_marker
      # 3. Read the log:
      # cat per_cpu/cpu0/trace_pipe
           <...>-332     [000] .....    62.406844: tracing_mark_write: hello1
      # 4. Stop reading and see the stats, now 0 entries, and 1 event readed:
      # cat per_cpu/cpu0/stats
       entries: 0
       [...]
       read events: 1
      # 5. Reduce the ring buffer
      # echo 7 > per_cpu/cpu0/buffer_size_kb
      # 6. Now entries became unexpected 1 because actually no entries!!!
      # cat per_cpu/cpu0/stats
       entries: 1
       [...]
       read events: 0
    
    To fix it, introduce 'page_removed' field to count total removed pages
    since last reset, then use it to let read iterators reset themselves
    instead of changing the 'read' pointer.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230724054040.3489499-1-zhengyejian1@huawei.com
    
    Cc: <mhiramat@kernel.org>
    Cc: <vnagarnaik@google.com>
    Fixes: 83f40318dab0 ("ring-buffer: Make removal of ring buffer pages atomic")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6e1e569ac972aba8605aff7fa8b9314a11fe61c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jul 26 22:33:22 2023 +0200

    ata: pata_ns87415: mark ns87560_tf_read static
    
    [ Upstream commit 3fc2febb0f8ffae354820c1772ec008733237cfa ]
    
    The global function triggers a warning because of the missing prototype
    
    drivers/ata/pata_ns87415.c:263:6: warning: no previous prototype for 'ns87560_tf_read' [-Wmissing-prototypes]
      263 | void ns87560_tf_read(struct ata_port *ap, struct ata_taskfile *tf)
    
    There are no other references to this, so just make it static.
    
    Fixes: c4b5b7b6c4423 ("pata_ns87415: Initial cut at 87415/87560 IDE support")
    Reviewed-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53c06e0d15eead7192d61bb8648623bdc26adde1
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Sat Jul 8 17:21:51 2023 +0800

    dm raid: fix missing reconfig_mutex unlock in raid_ctr() error paths
    
    [ Upstream commit bae3028799dc4f1109acc4df37c8ff06f2d8f1a0 ]
    
    In the error paths 'bad_stripe_cache' and 'bad_check_reshape',
    'reconfig_mutex' is still held after raid_ctr() returns.
    
    Fixes: 9dbd1aa3a81c ("dm raid: add reshaping support to the target")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ebcca93bd41e5f93c1eabdcd36acda643972df8
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Jul 6 13:14:12 2023 -0700

    block: Fix a source code comment in include/uapi/linux/blkzoned.h
    
    [ Upstream commit e0933b526fbfd937c4a8f4e35fcdd49f0e22d411 ]
    
    Fix the symbolic names for zone conditions in the blkzoned.h header
    file.
    
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Damien Le Moal <dlemoal@kernel.org>
    Fixes: 6a0cb1bc106f ("block: Implement support for zoned block devices")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Damien Le Moal <dlemoal@kernel.org>
    Link: https://lore.kernel.org/r/20230706201422.3987341-1-bvanassche@acm.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0aad2fe1b9ff6e6b7b75d54a18982485498dafe
Author: Matus Gajdos <matuszpd@gmail.com>
Date:   Wed Jul 19 18:47:29 2023 +0200

    ASoC: fsl_spdif: Silence output on stop
    
    [ Upstream commit 0e4c2b6b0c4a4b4014d9424c27e5e79d185229c5 ]
    
    Clear TX registers on stop to prevent the SPDIF interface from sending
    last written word over and over again.
    
    Fixes: a2388a498ad2 ("ASoC: fsl: Add S/PDIF CPU DAI driver")
    Signed-off-by: Matus Gajdos <matuszpd@gmail.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Link: https://lore.kernel.org/r/20230719164729.19969-1-matuszpd@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bd1b4793b01d1eed08b5515493424d8f39ed2dd
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Jul 17 09:47:38 2023 +0800

    drm/msm: Fix IS_ERR_OR_NULL() vs NULL check in a5xx_submit_in_rb()
    
    [ Upstream commit 6e8a996563ecbe68e49c49abd4aaeef69f11f2dc ]
    
    The msm_gem_get_vaddr() returns an ERR_PTR() on failure, and a null
    is catastrophic here, so we should use IS_ERR_OR_NULL() to check
    the return value.
    
    Fixes: 6a8bd08d0465 ("drm/msm: add sudo flag to submit ioctl")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Akhil P Oommen <quic_akhilpo@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/547712/
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4970f72f810c407ec4d09ec0e9cb3a865c8ccca2
Author: Rob Clark <robdclark@chromium.org>
Date:   Tue Jul 11 10:54:07 2023 -0700

    drm/msm/adreno: Fix snapshot BINDLESS_DATA size
    
    [ Upstream commit bd846ceee9c478d0397428f02696602ba5eb264a ]
    
    The incorrect size was causing "CP | AHB bus error" when snapshotting
    the GPU state on a6xx gen4 (a660 family).
    
    Closes: https://gitlab.freedesktop.org/drm/msm/-/issues/26
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Reviewed-by: Akhil P Oommen <quic_akhilpo@quicinc.com>
    Fixes: 1707add81551 ("drm/msm/a6xx: Add a6xx gpu state")
    Patchwork: https://patchwork.freedesktop.org/patch/546763/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5200bd7e609646c9a6e1bfcacf73c0256cc1c91a
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Jul 7 22:39:32 2023 +0300

    drm/msm/dpu: drop enum dpu_core_perf_data_bus_id
    
    [ Upstream commit e8383f5cf1b3573ce140a80bfbfd809278ab16d6 ]
    
    Drop the leftover of bus-client -> interconnect conversion, the enum
    dpu_core_perf_data_bus_id.
    
    Fixes: cb88482e2570 ("drm/msm/dpu: clean up references of DPU custom bus scaling")
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/546048/
    Link: https://lore.kernel.org/r/20230707193942.3806526-2-dmitry.baryshkov@linaro.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4990f529b74594bd7573c043a2927ae4a9ac657a
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Thu Jun 29 09:07:37 2023 +0300

    RDMA/mlx4: Make check for invalid flags stricter
    
    [ Upstream commit d64b1ee12a168030fbb3e0aebf7bce49e9a07589 ]
    
    This code is trying to ensure that only the flags specified in the list
    are allowed.  The problem is that ucmd->rx_hash_fields_mask is a u64 and
    the flags are an enum which is treated as a u32 in this context.  That
    means the test doesn't check whether the highest 32 bits are zero.
    
    Fixes: 4d02ebd9bbbd ("IB/mlx4: Fix RSS hash fields restrictions")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/233ed975-982d-422a-b498-410f71d8a101@moroto.mountain
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74843851d418a555ce74688441a659aaa333fa5a
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Tue Jul 25 11:27:26 2023 +0800

    benet: fix return value check in be_lancer_xmit_workarounds()
    
    [ Upstream commit 5c85f7065718a949902b238a6abd8fc907c5d3e0 ]
    
    in be_lancer_xmit_workarounds(), it should go to label 'tx_drop'
    if an unexpected value is returned by pskb_trim().
    
    Fixes: 93040ae5cc8d ("be2net: Fix to trim skb for padded vlan packets to workaround an ASIC Bug")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Link: https://lore.kernel.org/r/20230725032726.15002-1-ruc_gongyuanjun@163.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07d9723cef284e8d75487020371aca80699427f1
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Jul 25 10:42:27 2023 +0800

    net/sched: mqprio: Add length check for TCA_MQPRIO_{MAX/MIN}_RATE64
    
    [ Upstream commit 6c58c8816abb7b93b21fa3b1d0c1726402e5e568 ]
    
    The nla_for_each_nested parsing in function mqprio_parse_nlattr() does
    not check the length of the nested attribute. This can lead to an
    out-of-attribute read and allow a malformed nlattr (e.g., length 0) to
    be viewed as 8 byte integer and passed to priv->max_rate/min_rate.
    
    This patch adds the check based on nla_len() when check the nla_type(),
    which ensures that the length of these two attribute must equals
    sizeof(u64).
    
    Fixes: 4e8b86c06269 ("mqprio: Introduce new hardware offload mode and shaper in mqprio")
    Reviewed-by: Victor Nogueira <victor@mojatatu.com>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Link: https://lore.kernel.org/r/20230725024227.426561-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eb6175294585f90c7e13b9ac3b5db4a46d49bce
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Apr 11 21:01:51 2023 +0300

    net/sched: mqprio: add extack to mqprio_parse_nlattr()
    
    [ Upstream commit 57f21bf85400abadac0cb2a4db5de1d663f8863f ]
    
    Netlink attribute parsing in mqprio is a minesweeper game, with many
    options having the possibility of being passed incorrectly and the user
    being none the wiser.
    
    Try to make errors less sour by giving user space some information
    regarding what went wrong.
    
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ferenc Fejes <fejes@inf.elte.hu>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 6c58c8816abb ("net/sched: mqprio: Add length check for TCA_MQPRIO_{MAX/MIN}_RATE64")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29c5eb0ffac77e6e19cdecb3449c20cced1402aa
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sat Feb 4 15:52:55 2023 +0200

    net/sched: mqprio: refactor nlattr parsing to a separate function
    
    [ Upstream commit feb2cf3dcfb930aec2ca65c66d1365543d5ba943 ]
    
    mqprio_init() is quite large and unwieldy to add more code to.
    Split the netlink attribute parsing to a dedicated function.
    
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 6c58c8816abb ("net/sched: mqprio: Add length check for TCA_MQPRIO_{MAX/MIN}_RATE64")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17afc24d20c96979fae38fef624ff497afcd453a
Author: Maxim Mikityanskiy <maxtram95@gmail.com>
Date:   Fri Jul 21 17:54:23 2023 +0300

    platform/x86: msi-laptop: Fix rfkill out-of-sync on MSI Wind U100
    
    [ Upstream commit ad084a6d99bc182bf109c190c808e2ea073ec57b ]
    
    Only the HW rfkill state is toggled on laptops with quirks->ec_read_only
    (so far only MSI Wind U90/U100). There are, however, a few issues with
    the implementation:
    
    1. The initial HW state is always unblocked, regardless of the actual
       state on boot, because msi_init_rfkill only sets the SW state,
       regardless of ec_read_only.
    
    2. The initial SW state corresponds to the actual state on boot, but it
       can't be changed afterwards, because set_device_state returns
       -EOPNOTSUPP. It confuses the userspace, making Wi-Fi and/or Bluetooth
       unusable if it was blocked on boot, and breaking the airplane mode if
       the rfkill was unblocked on boot.
    
    Address the above issues by properly initializing the HW state on
    ec_read_only laptops and by allowing the userspace to toggle the SW
    state. Don't set the SW state ourselves and let the userspace fully
    control it. Toggling the SW state is a no-op, however, it allows the
    userspace to properly toggle the airplane mode. The actual SW radio
    disablement is handled by the corresponding rtl818x_pci and btusb
    drivers that have their own rfkills.
    
    Tested on MSI Wind U100 Plus, BIOS ver 1.0G, EC ver 130.
    
    Fixes: 0816392b97d4 ("msi-laptop: merge quirk tables to one")
    Fixes: 0de6575ad0a8 ("msi-laptop: Add MSI Wind U90/U100 support")
    Signed-off-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Link: https://lore.kernel.org/r/20230721145423.161057-1-maxtram95@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 504177c84f044ee096c7ed4c4617a82b9af89665
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jul 21 12:03:56 2023 +0800

    team: reset team's flags when down link is P2P device
    
    [ Upstream commit fa532bee17d15acf8bba4bc8e2062b7a093ba801 ]
    
    When adding a point to point downlink to team device, we neglected to reset
    the team's flags, which were still using flags like BROADCAST and
    MULTICAST. Consequently, this would initiate ARP/DAD for P2P downlink
    interfaces, such as when adding a GRE device to team device. Fix this by
    remove multicast/broadcast flags and add p2p and noarp flags.
    
    After removing the none ethernet interface and adding an ethernet interface
    to team, we need to reset team interface flags. Unlike bonding interface,
    team do not need restore IFF_MASTER, IFF_SLAVE flags.
    
    Reported-by: Liang Li <liali@redhat.com>
    Closes: https://bugzilla.redhat.com/show_bug.cgi?id=2221438
    Fixes: 1d76efe1577b ("team: add support for non-ethernet devices")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3bb02598db98af8e2494e42dc0b31919058aee9
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jul 21 12:03:55 2023 +0800

    bonding: reset bond's flags when down link is P2P device
    
    [ Upstream commit da19a2b967cf1e2c426f50d28550d1915214a81d ]
    
    When adding a point to point downlink to the bond, we neglected to reset
    the bond's flags, which were still using flags like BROADCAST and
    MULTICAST. Consequently, this would initiate ARP/DAD for P2P downlink
    interfaces, such as when adding a GRE device to the bonding.
    
    To address this issue, let's reset the bond's flags for P2P interfaces.
    
    Before fix:
    7: gre0@NONE: <POINTOPOINT,NOARP,SLAVE,UP,LOWER_UP> mtu 1500 qdisc noqueue master bond0 state UNKNOWN group default qlen 1000
        link/gre6 2006:70:10::1 peer 2006:70:10::2 permaddr 167f:18:f188::
    8: bond0: <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
        link/gre6 2006:70:10::1 brd 2006:70:10::2
        inet6 fe80::200:ff:fe00:0/64 scope link
           valid_lft forever preferred_lft forever
    
    After fix:
    7: gre0@NONE: <POINTOPOINT,NOARP,SLAVE,UP,LOWER_UP> mtu 1500 qdisc noqueue master bond2 state UNKNOWN group default qlen 1000
        link/gre6 2006:70:10::1 peer 2006:70:10::2 permaddr c29e:557a:e9d9::
    8: bond0: <POINTOPOINT,NOARP,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
        link/gre6 2006:70:10::1 peer 2006:70:10::2
        inet6 fe80::1/64 scope link
           valid_lft forever preferred_lft forever
    
    Reported-by: Liang Li <liali@redhat.com>
    Closes: https://bugzilla.redhat.com/show_bug.cgi?id=2221438
    Fixes: 872254dd6b1f ("net/bonding: Enable bonding to enslave non ARPHRD_ETHER")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d87d67c8bdd13b2d4f7414ba97c54ba825337c47
Author: Stewart Smith <trawets@amazon.com>
Date:   Fri Jul 21 15:24:10 2023 -0700

    tcp: Reduce chance of collisions in inet6_hashfn().
    
    [ Upstream commit d11b0df7ddf1831f3e170972f43186dad520bfcc ]
    
    For both IPv4 and IPv6 incoming TCP connections are tracked in a hash
    table with a hash over the source & destination addresses and ports.
    However, the IPv6 hash is insufficient and can lead to a high rate of
    collisions.
    
    The IPv6 hash used an XOR to fit everything into the 96 bits for the
    fast jenkins hash, meaning it is possible for an external entity to
    ensure the hash collides, thus falling back to a linear search in the
    bucket, which is slow.
    
    We take the approach of hash the full length of IPv6 address in
    __ipv6_addr_jhash() so that all users can benefit from a more secure
    version.
    
    While this may look like it adds overhead, the reality of modern CPUs
    means that this is unmeasurable in real world scenarios.
    
    In simulating with llvm-mca, the increase in cycles for the hashing
    code was ~16 cycles on Skylake (from a base of ~155), and an extra ~9
    on Nehalem (base of ~173).
    
    In commit dd6d2910c5e0 ("netfilter: conntrack: switch to siphash")
    netfilter switched from a jenkins hash to a siphash, but even the faster
    hsiphash is a more significant overhead (~20-30%) in some preliminary
    testing.  So, in this patch, we keep to the more conservative approach to
    ensure we don't add much overhead per SYN.
    
    In testing, this results in a consistently even spread across the
    connection buckets.  In both testing and real-world scenarios, we have
    not found any measurable performance impact.
    
    Fixes: 08dcdbf6a7b9 ("ipv6: use a stronger hash for tcp")
    Signed-off-by: Stewart Smith <trawets@amazon.com>
    Signed-off-by: Samuel Mendoza-Jonas <samjonas@amazon.com>
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230721222410.17914-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 458294ee1537ae38772c1d2b4bd25decc3063a0f
Author: Maciej Żenczykowski <maze@google.com>
Date:   Thu Jul 20 09:00:22 2023 -0700

    ipv6 addrconf: fix bug where deleting a mngtmpaddr can create a new temporary address
    
    [ Upstream commit 69172f0bcb6a09110c5d2a6d792627f5095a9018 ]
    
    currently on 6.4 net/main:
    
      # ip link add dummy1 type dummy
      # echo 1 > /proc/sys/net/ipv6/conf/dummy1/use_tempaddr
      # ip link set dummy1 up
      # ip -6 addr add 2000::1/64 mngtmpaddr dev dummy1
      # ip -6 addr show dev dummy1
    
      11: dummy1: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000
          inet6 2000::44f3:581c:8ca:3983/64 scope global temporary dynamic
             valid_lft 604800sec preferred_lft 86172sec
          inet6 2000::1/64 scope global mngtmpaddr
             valid_lft forever preferred_lft forever
          inet6 fe80::e8a8:a6ff:fed5:56d4/64 scope link
             valid_lft forever preferred_lft forever
    
      # ip -6 addr del 2000::44f3:581c:8ca:3983/64 dev dummy1
    
      (can wait a few seconds if you want to, the above delete isn't [directly] the problem)
    
      # ip -6 addr show dev dummy1
    
      11: dummy1: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000
          inet6 2000::1/64 scope global mngtmpaddr
             valid_lft forever preferred_lft forever
          inet6 fe80::e8a8:a6ff:fed5:56d4/64 scope link
             valid_lft forever preferred_lft forever
    
      # ip -6 addr del 2000::1/64 mngtmpaddr dev dummy1
      # ip -6 addr show dev dummy1
    
      11: dummy1: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1000
          inet6 2000::81c9:56b7:f51a:b98f/64 scope global temporary dynamic
             valid_lft 604797sec preferred_lft 86169sec
          inet6 fe80::e8a8:a6ff:fed5:56d4/64 scope link
             valid_lft forever preferred_lft forever
    
    This patch prevents this new 'global temporary dynamic' address from being
    created by the deletion of the related (same subnet prefix) 'mngtmpaddr'
    (which is triggered by there already being no temporary addresses).
    
    Cc: Jiri Pirko <jiri@resnulli.us>
    Fixes: 53bd67491537 ("ipv6 addrconf: introduce IFA_F_MANAGETEMPADDR to tell kernel to manage temporary addresses")
    Reported-by: Xiao Ma <xiaom@google.com>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230720160022.1887942-1-maze@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a249705862d76c6715a6c2ddbf1efe94f6770c7d
Author: Yuanjun Gong <ruc_gongyuanjun@163.com>
Date:   Thu Jul 20 22:42:19 2023 +0800

    ethernet: atheros: fix return value check in atl1e_tso_csum()
    
    [ Upstream commit 69a184f7a372aac588babfb0bd681aaed9779f5b ]
    
    in atl1e_tso_csum, it should check the return value of pskb_trim(),
    and return an error code if an unexpected value is returned
    by pskb_trim().
    
    Fixes: a6a5325239c2 ("atl1e: Atheros L1E Gigabit Ethernet driver")
    Signed-off-by: Yuanjun Gong <ruc_gongyuanjun@163.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230720144219.39285-1-ruc_gongyuanjun@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 195e806b2afb0bad6470c9094f7e45e0cf109ee0
Author: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
Date:   Fri Jul 21 02:05:55 2023 -0700

    phy: hisilicon: Fix an out of bounds check in hisi_inno_phy_probe()
    
    [ Upstream commit 13c088cf3657d70893d75cf116be937f1509cc0f ]
    
    The size of array 'priv->ports[]' is INNO_PHY_PORT_NUM.
    
    In the for loop, 'i' is used as the index for array 'priv->ports[]'
    with a check (i > INNO_PHY_PORT_NUM) which indicates that
    INNO_PHY_PORT_NUM is allowed value for 'i' in the same loop.
    
    This > comparison needs to be changed to >=, otherwise it potentially leads
    to an out of bounds write on the next iteration through the loop
    
    Fixes: ba8b0ee81fbb ("phy: add inno-usb2-phy driver for hi3798cv200 SoC")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Link: https://lore.kernel.org/r/20230721090558.3588613-1-harshit.m.mogalapalli@oracle.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27b63e8b855203cace2e168dc83bc3a6e31b937d
Author: Jiri Benc <jbenc@redhat.com>
Date:   Thu Jul 20 11:05:56 2023 +0200

    vxlan: calculate correct header length for GPE
    
    [ Upstream commit 94d166c5318c6edd1e079df8552233443e909c33 ]
    
    VXLAN-GPE does not add an extra inner Ethernet header. Take that into
    account when calculating header length.
    
    This causes problems in skb_tunnel_check_pmtu, where incorrect PMTU is
    cached.
    
    In the collect_md mode (which is the only mode that VXLAN-GPE
    supports), there's no magic auto-setting of the tunnel interface MTU.
    It can't be, since the destination and thus the underlying interface
    may be different for each packet.
    
    So, the administrator is responsible for setting the correct tunnel
    interface MTU. Apparently, the administrators are capable enough to
    calculate that the maximum MTU for VXLAN-GPE is (their_lower_MTU - 36).
    They set the tunnel interface MTU to 1464. If you run a TCP stream over
    such interface, it's then segmented according to the MTU 1464, i.e.
    producing 1514 bytes frames. Which is okay, this still fits the lower
    MTU.
    
    However, skb_tunnel_check_pmtu (called from vxlan_xmit_one) uses 50 as
    the header size and thus incorrectly calculates the frame size to be
    1528. This leads to ICMP too big message being generated (locally),
    PMTU of 1450 to be cached and the TCP stream to be resegmented.
    
    The fix is to use the correct actual header size, especially for
    skb_tunnel_check_pmtu calculation.
    
    Fixes: e1e5314de08ba ("vxlan: implement GPE")
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e98318c632db70c7fef387475df9d46b1924b25
Author: Wang Ming <machel@vivo.com>
Date:   Thu Jul 13 09:42:39 2023 +0800

    i40e: Fix an NULL vs IS_ERR() bug for debugfs_create_dir()
    
    [ Upstream commit 043b1f185fb0f3939b7427f634787706f45411c4 ]
    
    The debugfs_create_dir() function returns error pointers.
    It never returns NULL. Most incorrect error checks were fixed,
    but the one in i40e_dbg_init() was forgotten.
    
    Fix the remaining error check.
    
    Fixes: 02e9c290814c ("i40e: debugfs interface")
    Signed-off-by: Wang Ming <machel@vivo.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b1ee62ecbf13a747a8128e95955f80ef421a3d4
Author: Chao Yu <chao@kernel.org>
Date:   Tue Jun 6 15:32:03 2023 +0800

    ext4: fix to check return value of freeze_bdev() in ext4_shutdown()
    
    [ Upstream commit c4d13222afd8a64bf11bc7ec68645496ee8b54b9 ]
    
    freeze_bdev() can fail due to a lot of reasons, it needs to check its
    reason before later process.
    
    Fixes: 783d94854499 ("ext4: add EXT4_IOC_GOINGDOWN ioctl")
    Cc: stable@kernel.org
    Signed-off-by: Chao Yu <chao@kernel.org>
    Link: https://lore.kernel.org/r/20230606073203.1310389-1-chao@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65bd66a794bfa059375ec834885bb610d75c0182
Author: Petr Pavlu <petr.pavlu@suse.com>
Date:   Thu Mar 23 14:04:12 2023 +0100

    keys: Fix linking a duplicate key to a keyring's assoc_array
    
    [ Upstream commit d55901522f96082a43b9842d34867363c0cdbac5 ]
    
    When making a DNS query inside the kernel using dns_query(), the request
    code can in rare cases end up creating a duplicate index key in the
    assoc_array of the destination keyring. It is eventually found by
    a BUG_ON() check in the assoc_array implementation and results in
    a crash.
    
    Example report:
    [2158499.700025] kernel BUG at ../lib/assoc_array.c:652!
    [2158499.700039] invalid opcode: 0000 [#1] SMP PTI
    [2158499.700065] CPU: 3 PID: 31985 Comm: kworker/3:1 Kdump: loaded Not tainted 5.3.18-150300.59.90-default #1 SLE15-SP3
    [2158499.700096] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 11/12/2020
    [2158499.700351] Workqueue: cifsiod cifs_resolve_server [cifs]
    [2158499.700380] RIP: 0010:assoc_array_insert+0x85f/0xa40
    [2158499.700401] Code: ff 74 2b 48 8b 3b 49 8b 45 18 4c 89 e6 48 83 e7 fe e8 95 ec 74 00 3b 45 88 7d db 85 c0 79 d4 0f 0b 0f 0b 0f 0b e8 41 f2 be ff <0f> 0b 0f 0b 81 7d 88 ff ff ff 7f 4c 89 eb 4c 8b ad 58 ff ff ff 0f
    [2158499.700448] RSP: 0018:ffffc0bd6187faf0 EFLAGS: 00010282
    [2158499.700470] RAX: ffff9f1ea7da2fe8 RBX: ffff9f1ea7da2fc1 RCX: 0000000000000005
    [2158499.700492] RDX: 0000000000000000 RSI: 0000000000000005 RDI: 0000000000000000
    [2158499.700515] RBP: ffffc0bd6187fbb0 R08: ffff9f185faf1100 R09: 0000000000000000
    [2158499.700538] R10: ffff9f1ea7da2cc0 R11: 000000005ed8cec8 R12: ffffc0bd6187fc28
    [2158499.700561] R13: ffff9f15feb8d000 R14: ffff9f1ea7da2fc0 R15: ffff9f168dc0d740
    [2158499.700585] FS:  0000000000000000(0000) GS:ffff9f185fac0000(0000) knlGS:0000000000000000
    [2158499.700610] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [2158499.700630] CR2: 00007fdd94fca238 CR3: 0000000809d8c006 CR4: 00000000003706e0
    [2158499.700702] Call Trace:
    [2158499.700741]  ? key_alloc+0x447/0x4b0
    [2158499.700768]  ? __key_link_begin+0x43/0xa0
    [2158499.700790]  __key_link_begin+0x43/0xa0
    [2158499.700814]  request_key_and_link+0x2c7/0x730
    [2158499.700847]  ? dns_resolver_read+0x20/0x20 [dns_resolver]
    [2158499.700873]  ? key_default_cmp+0x20/0x20
    [2158499.700898]  request_key_tag+0x43/0xa0
    [2158499.700926]  dns_query+0x114/0x2ca [dns_resolver]
    [2158499.701127]  dns_resolve_server_name_to_ip+0x194/0x310 [cifs]
    [2158499.701164]  ? scnprintf+0x49/0x90
    [2158499.701190]  ? __switch_to_asm+0x40/0x70
    [2158499.701211]  ? __switch_to_asm+0x34/0x70
    [2158499.701405]  reconn_set_ipaddr_from_hostname+0x81/0x2a0 [cifs]
    [2158499.701603]  cifs_resolve_server+0x4b/0xd0 [cifs]
    [2158499.701632]  process_one_work+0x1f8/0x3e0
    [2158499.701658]  worker_thread+0x2d/0x3f0
    [2158499.701682]  ? process_one_work+0x3e0/0x3e0
    [2158499.701703]  kthread+0x10d/0x130
    [2158499.701723]  ? kthread_park+0xb0/0xb0
    [2158499.701746]  ret_from_fork+0x1f/0x40
    
    The situation occurs as follows:
    * Some kernel facility invokes dns_query() to resolve a hostname, for
      example, "abcdef". The function registers its global DNS resolver
      cache as current->cred.thread_keyring and passes the query to
      request_key_net() -> request_key_tag() -> request_key_and_link().
    * Function request_key_and_link() creates a keyring_search_context
      object. Its match_data.cmp method gets set via a call to
      type->match_preparse() (resolves to dns_resolver_match_preparse()) to
      dns_resolver_cmp().
    * Function request_key_and_link() continues and invokes
      search_process_keyrings_rcu() which returns that a given key was not
      found. The control is then passed to request_key_and_link() ->
      construct_alloc_key().
    * Concurrently to that, a second task similarly makes a DNS query for
      "abcdef." and its result gets inserted into the DNS resolver cache.
    * Back on the first task, function construct_alloc_key() first runs
      __key_link_begin() to determine an assoc_array_edit operation to
      insert a new key. Index keys in the array are compared exactly as-is,
      using keyring_compare_object(). The operation finds that "abcdef" is
      not yet present in the destination keyring.
    * Function construct_alloc_key() continues and checks if a given key is
      already present on some keyring by again calling
      search_process_keyrings_rcu(). This search is done using
      dns_resolver_cmp() and "abcdef" gets matched with now present key
      "abcdef.".
    * The found key is linked on the destination keyring by calling
      __key_link() and using the previously calculated assoc_array_edit
      operation. This inserts the "abcdef." key in the array but creates
      a duplicity because the same index key is already present.
    
    Fix the problem by postponing __key_link_begin() in
    construct_alloc_key() until an actual key which should be linked into
    the destination keyring is determined.
    
    [jarkko@kernel.org: added a fixes tag and cc to stable]
    Cc: stable@vger.kernel.org # v5.3+
    Fixes: df593ee23e05 ("keys: Hoist locking out of __key_link_begin()")
    Signed-off-by: Petr Pavlu <petr.pavlu@suse.com>
    Reviewed-by: Joey Lee <jlee@suse.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1df96689fe1e1091f1a7bb35f1322430157e01e
Author: David Howells <dhowells@redhat.com>
Date:   Wed Feb 12 13:58:35 2020 +0000

    uapi: General notification queue definitions
    
    [ Upstream commit 0858caa419e6cf9d31e734d09d70b34f64443ef6 ]
    
    Add UAPI definitions for the general notification queue, including the
    following pieces:
    
     (*) struct watch_notification.
    
         This is the metadata header for notification messages.  It includes a
         type and subtype that indicate the source of the message
         (eg. WATCH_TYPE_MOUNT_NOTIFY) and the kind of the message
         (eg. NOTIFY_MOUNT_NEW_MOUNT).
    
         The header also contains an information field that conveys the
         following information:
    
            - WATCH_INFO_LENGTH.  The size of the entry (entries are variable
              length).
    
            - WATCH_INFO_ID.  The watch ID specified when the watchpoint was
              set.
    
            - WATCH_INFO_TYPE_INFO.  (Sub)type-specific information.
    
            - WATCH_INFO_FLAG_*.  Flag bits overlain on the type-specific
              information.  For use by the type.
    
         All the information in the header can be used in filtering messages at
         the point of writing into the buffer.
    
     (*) struct watch_notification_removal
    
         This is an extended watch-removal notification record that includes an
         'id' field that can indicate the identifier of the object being
         removed if available (for instance, a keyring serial number).
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Stable-dep-of: d55901522f96 ("keys: Fix linking a duplicate key to a keyring's assoc_array")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea64c727f20123342020257cfa956fbfbd6d12ff
Author: Nilesh Javali <njavali@marvell.com>
Date:   Wed Jun 7 17:08:36 2023 +0530

    scsi: qla2xxx: Array index may go out of bound
    
    [ Upstream commit d721b591b95cf3f290f8a7cbe90aa2ee0368388d ]
    
    Klocwork reports array 'vha->host_str' of size 16 may use index value(s)
    16..19.  Use snprintf() instead of sprintf().
    
    Cc: stable@vger.kernel.org
    Co-developed-by: Bikash Hazarika <bhazarika@marvell.com>
    Signed-off-by: Bikash Hazarika <bhazarika@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Link: https://lore.kernel.org/r/20230607113843.37185-2-njavali@marvell.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e387df414f94ba35d6db009fa8fb448929f9500
Author: Ye Bin <yebin10@huawei.com>
Date:   Wed Sep 30 10:25:14 2020 +0800

    scsi: qla2xxx: Fix inconsistent format argument type in qla_os.c
    
    [ Upstream commit 250bd00923c72c846092271a9e51ee373db081b6 ]
    
    Fix the following warnings:
    
    [drivers/scsi/qla2xxx/qla_os.c:4882]: (warning) %ld in format string (no. 2)
            requires 'long' but the argument type is 'unsigned long'.
    [drivers/scsi/qla2xxx/qla_os.c:5011]: (warning) %ld in format string (no. 1)
            requires 'long' but the argument type is 'unsigned long'.
    
    Link: https://lore.kernel.org/r/20200930022515.2862532-3-yebin10@huawei.com
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: d721b591b95c ("scsi: qla2xxx: Array index may go out of bound")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 629628738078854e00cc9a2d334ad00e7f468f46
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed May 24 21:48:36 2023 +0200

    pwm: meson: fix handling of period/duty if greater than UINT_MAX
    
    [ Upstream commit 87a2cbf02d7701255f9fcca7e5bd864a7bb397cf ]
    
    state->period/duty are of type u64, and if their value is greater than
    UINT_MAX, then the cast to uint will cause problems. Fix this by
    changing the type of the respective local variables to u64.
    
    Fixes: b79c3670e120 ("pwm: meson: Don't duplicate the polarity internally")
    Cc: stable@vger.kernel.org
    Suggested-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ae4671a868e727ad96e5de96ae0e39205829075
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 8 14:46:26 2021 +0100

    pwm: meson: Simplify duplicated per-channel tracking
    
    [ Upstream commit 5f97f18feac9bd5a8163b108aee52d783114b36f ]
    
    The driver tracks per-channel data via struct pwm_device::chip_data and
    struct meson_pwm::channels[]. The latter holds the actual data, the former
    is only a pointer to the latter. So simplify by using struct
    meson_pwm::channels[] consistently.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Stable-dep-of: 87a2cbf02d77 ("pwm: meson: fix handling of period/duty if greater than UINT_MAX")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8abacc57af7b0b599efad088410b34b5fcec4403
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Thu Apr 2 12:08:57 2020 +0100

    pwm: meson: Remove redundant assignment to variable fin_freq
    
    [ Upstream commit 437fb760d046340d0dee3b4307e1cf4578fd8ca8 ]
    
    The variable fin_freq is being initialized with a value that is never
    read and it is being updated later with a new value. The initialization
    is redundant and can be removed.
    
    Addresses-Coverity: ("Unused value")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Stable-dep-of: 87a2cbf02d77 ("pwm: meson: fix handling of period/duty if greater than UINT_MAX")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 680e1455b828d01322f47f569ce45f6abaf55014
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Wed Jul 12 14:04:52 2023 +0800

    ftrace: Fix possible warning on checking all pages used in ftrace_process_locs()
    
    [ Upstream commit 26efd79c4624294e553aeaa3439c646729bad084 ]
    
    As comments in ftrace_process_locs(), there may be NULL pointers in
    mcount_loc section:
     > Some architecture linkers will pad between
     > the different mcount_loc sections of different
     > object files to satisfy alignments.
     > Skip any NULL pointers.
    
    After commit 20e5227e9f55 ("ftrace: allow NULL pointers in mcount_loc"),
    NULL pointers will be accounted when allocating ftrace pages but skipped
    before adding into ftrace pages, this may result in some pages not being
    used. Then after commit 706c81f87f84 ("ftrace: Remove extra helper
    functions"), warning may occur at:
      WARN_ON(pg->next);
    
    To fix it, only warn for case that no pointers skipped but pages not used
    up, then free those unused pages after releasing ftrace_lock.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230712060452.3175675-1-zhengyejian1@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 706c81f87f84 ("ftrace: Remove extra helper functions")
    Suggested-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05ff1d355e0bdbdc854f5338b934564dc0728498
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 1 16:14:17 2021 -0400

    ftrace: Store the order of pages allocated in ftrace_page
    
    [ Upstream commit db42523b4f3e83ff86b53cdda219a9767c8b047f ]
    
    Instead of saving the size of the records field of the ftrace_page, store
    the order it uses to allocate the pages, as that is what is needed to know
    in order to free the pages. This simplifies the code.
    
    Link: https://lore.kernel.org/lkml/CAHk-=whyMxheOqXAORt9a7JK9gc9eHTgCJ55Pgs4p=X3RrQubQ@mail.gmail.com/
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [ change log written by Steven Rostedt ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Stable-dep-of: 26efd79c4624 ("ftrace: Fix possible warning on checking all pages used in ftrace_process_locs()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3098e52bf5a700e33f6c9a306b4a3fa96b2cd65
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Mar 30 09:58:38 2021 -0400

    ftrace: Check if pages were allocated before calling free_pages()
    
    [ Upstream commit 59300b36f85f254260c81d9dd09195fa49eb0f98 ]
    
    It is possible that on error pg->size can be zero when getting its order,
    which would return a -1 value. It is dangerous to pass in an order of -1
    to free_pages(). Check if order is greater than or equal to zero before
    calling free_pages().
    
    Link: https://lore.kernel.org/lkml/20210330093916.432697c7@gandalf.local.home/
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Stable-dep-of: 26efd79c4624 ("ftrace: Fix possible warning on checking all pages used in ftrace_process_locs()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aad84a97884156c24707bbe64a1f7c3f526aaa28
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Oct 1 14:38:07 2019 -0400

    ftrace: Add information on number of page groups allocated
    
    [ Upstream commit da537f0aef1372c5204356a7df06be8769467b7b ]
    
    Looking for ways to shrink the size of the dyn_ftrace structure, knowing the
    information about how many pages and the number of groups of those pages, is
    useful in working out the best ways to save on memory.
    
    This adds one info print on how many groups of pages were used to allocate
    the ftrace dyn_ftrace structures, and also shows the number of pages and
    groups in the dyn_ftrace_total_info (which is used for debugging).
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Stable-dep-of: 26efd79c4624 ("ftrace: Fix possible warning on checking all pages used in ftrace_process_locs()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd020c7763d645bfef012643a25db08af3f7478e
Author: Alexander Aring <aahringo@redhat.com>
Date:   Fri May 19 11:21:26 2023 -0400

    fs: dlm: interrupt posix locks only when process is killed
    
    [ Upstream commit 59e45c758ca1b9893ac923dd63536da946ac333b ]
    
    If a posix lock request is waiting for a result from user space
    (dlm_controld), do not let it be interrupted unless the process
    is killed. This reverts commit a6b1533e9a57 ("dlm: make posix locks
    interruptible"). The problem with the interruptible change is
    that all locks were cleared on any signal interrupt. If a signal
    was received that did not terminate the process, the process
    could continue running after all its dlm posix locks had been
    cleared. A future patch will add cancelation to allow proper
    interruption.
    
    Cc: stable@vger.kernel.org
    Fixes: a6b1533e9a57 ("dlm: make posix locks interruptible")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f61d5752aed0bcd576cce7a9e0070646c284a3ce
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 4 16:06:33 2022 -0400

    dlm: rearrange async condition return
    
    [ Upstream commit a800ba77fd285c6391a82819867ac64e9ab3af46 ]
    
    This patch moves the return of FILE_LOCK_DEFERRED a little bit earlier
    than checking afterwards again if the request was an asynchronous request.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 59e45c758ca1 ("fs: dlm: interrupt posix locks only when process is killed")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed092c495e29ee7daf5bd305b97609c0b4663f1d
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 4 16:06:32 2022 -0400

    dlm: cleanup plock_op vs plock_xop
    
    [ Upstream commit bcbb4ba6c9ba81e6975b642a2cade68044cd8a66 ]
    
    Lately the different casting between plock_op and plock_xop and list
    holders which was involved showed some issues which were hard to see.
    This patch removes the "plock_xop" structure and introduces a
    "struct plock_async_data". This structure will be set in "struct plock_op"
    in case of asynchronous lock handling as the original "plock_xop" was
    made for. There is no need anymore to cast pointers around for
    additional fields in case of asynchronous lock handling.  As disadvantage
    another allocation was introduces but only needed in the asynchronous
    case which is currently only used in combination with nfs lockd.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Stable-dep-of: 59e45c758ca1 ("fs: dlm: interrupt posix locks only when process is killed")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a50ad9f8c06cc5acfe9bd7462199336f81576d12
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue May 2 11:39:23 2023 +0300

    PCI/ASPM: Avoid link retraining race
    
    [ Upstream commit e7e39756363ad5bd83ddeae1063193d0f13870fd ]
    
    PCIe r6.0.1, sec 7.5.3.7, recommends setting the link control parameters,
    then waiting for the Link Training bit to be clear before setting the
    Retrain Link bit.
    
    This avoids a race where the LTSSM may not use the updated parameters if it
    is already in the midst of link training because of other normal link
    activity.
    
    Wait for the Link Training bit to be clear before toggling the Retrain Link
    bit to ensure that the LTSSM uses the updated link control parameters.
    
    [bhelgaas: commit log, return 0 (success)/-ETIMEDOUT instead of bool for
    both pcie_wait_for_retrain() and the existing pcie_retrain_link()]
    Suggested-by: Lukas Wunner <lukas@wunner.de>
    Fixes: 7d715a6c1ae5 ("PCI: add PCI Express ASPM support")
    Link: https://lore.kernel.org/r/20230502083923.34562-1-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e50434e33de913b2422911634dcf74edc9738195
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Tue Jun 20 14:49:33 2023 -0500

    PCI/ASPM: Factor out pcie_wait_for_retrain()
    
    [ Upstream commit 9c7f136433d26592cb4d9cd00b4e15c33d9797c6 ]
    
    Factor pcie_wait_for_retrain() out from pcie_retrain_link().  No functional
    change intended.
    
    [bhelgaas: split out from
    https: //lore.kernel.org/r/20230502083923.34562-1-ilpo.jarvinen@linux.intel.com]
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Stable-dep-of: e7e39756363a ("PCI/ASPM: Avoid link retraining race")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7411202a0feef7d0322558f34fce5960ef2eeea7
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Tue Jun 20 14:44:55 2023 -0500

    PCI/ASPM: Return 0 or -ETIMEDOUT from pcie_retrain_link()
    
    [ Upstream commit f5297a01ee805d7fa569d288ed65fc0f9ac9b03d ]
    
    "pcie_retrain_link" is not a question with a true/false answer, so "bool"
    isn't quite the right return type.  Return 0 for success or -ETIMEDOUT if
    the retrain failed.  No functional change intended.
    
    [bhelgaas: based on Ilpo's patch below]
    Link: https://lore.kernel.org/r/20230502083923.34562-1-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Stable-dep-of: e7e39756363a ("PCI/ASPM: Avoid link retraining race")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8eb15ff216c15fbe00d2f3dde6aa3a69f8546612
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Wed Mar 15 09:31:23 2023 +0800

    ext4: Fix reusing stale buffer heads from last failed mounting
    
    [ Upstream commit 26fb5290240dc31cae99b8b4dd2af7f46dfcba6b ]
    
    Following process makes ext4 load stale buffer heads from last failed
    mounting in a new mounting operation:
    mount_bdev
     ext4_fill_super
     | ext4_load_and_init_journal
     |  ext4_load_journal
     |   jbd2_journal_load
     |    load_superblock
     |     journal_get_superblock
     |      set_buffer_verified(bh) // buffer head is verified
     |   jbd2_journal_recover // failed caused by EIO
     | goto failed_mount3a // skip 'sb->s_root' initialization
     deactivate_locked_super
      kill_block_super
       generic_shutdown_super
        if (sb->s_root)
        // false, skip ext4_put_super->invalidate_bdev->
        // invalidate_mapping_pages->mapping_evict_folio->
        // filemap_release_folio->try_to_free_buffers, which
        // cannot drop buffer head.
       blkdev_put
        blkdev_put_whole
         if (atomic_dec_and_test(&bdev->bd_openers))
         // false, systemd-udev happens to open the device. Then
         // blkdev_flush_mapping->kill_bdev->truncate_inode_pages->
         // truncate_inode_folio->truncate_cleanup_folio->
         // folio_invalidate->block_invalidate_folio->
         // filemap_release_folio->try_to_free_buffers will be skipped,
         // dropping buffer head is missed again.
    
    Second mount:
    ext4_fill_super
     ext4_load_and_init_journal
      ext4_load_journal
       ext4_get_journal
        jbd2_journal_init_inode
         journal_init_common
          bh = getblk_unmovable
           bh = __find_get_block // Found stale bh in last failed mounting
          journal->j_sb_buffer = bh
       jbd2_journal_load
        load_superblock
         journal_get_superblock
          if (buffer_verified(bh))
          // true, skip journal->j_format_version = 2, value is 0
        jbd2_journal_recover
         do_one_pass
          next_log_block += count_tags(journal, bh)
          // According to journal_tag_bytes(), 'tag_bytes' calculating is
          // affected by jbd2_has_feature_csum3(), jbd2_has_feature_csum3()
          // returns false because 'j->j_format_version >= 2' is not true,
          // then we get wrong next_log_block. The do_one_pass may exit
          // early whenoccuring non JBD2_MAGIC_NUMBER in 'next_log_block'.
    
    The filesystem is corrupted here, journal is partially replayed, and
    new journal sequence number actually is already used by last mounting.
    
    The invalidate_bdev() can drop all buffer heads even racing with bare
    reading block device(eg. systemd-udev), so we can fix it by invalidating
    bdev in error handling path in __ext4_fill_super().
    
    Fetch a reproducer in [Link].
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217171
    Fixes: 25ed6e8a54df ("jbd2: enable journal clients to enable v2 checksumming")
    Cc: stable@vger.kernel.org # v3.5
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230315013128.3911115-2-chengzhihao1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0204319de8ea029ebe42b8d681e66afc064d60c4
Author: Chunguang Xu <brookxu@tencent.com>
Date:   Thu Sep 24 11:03:42 2020 +0800

    ext4: rename journal_dev to s_journal_dev inside ext4_sb_info
    
    [ Upstream commit ee7ed3aa0f08621dbf897d2a98dc6f2c7e7d0335 ]
    
    Rename journal_dev to s_journal_dev inside ext4_sb_info, keep
    the naming rules consistent with other variables, which is
    convenient for code reading and writing.
    
    Signed-off-by: Chunguang Xu <brookxu@tencent.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Reviewed-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Link: https://lore.kernel.org/r/1600916623-544-1-git-send-email-brookxu@tencent.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: 26fb5290240d ("ext4: Fix reusing stale buffer heads from last failed mounting")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 356056cbe66772419e88c48d5e2d6d9323387d9c
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Jun 8 11:27:38 2023 +0100

    btrfs: fix extent buffer leak after tree mod log failure at split_node()
    
    [ Upstream commit ede600e497b1461d06d22a7d17703d9096868bc3 ]
    
    At split_node(), if we fail to log the tree mod log copy operation, we
    return without unlocking the split extent buffer we just allocated and
    without decrementing the reference we own on it. Fix this by unlocking
    it and decrementing the ref count before returning.
    
    Fixes: 5de865eebb83 ("Btrfs: fix tree mod logging")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63008dab58ada73857bf32d9baf282d03ce10abd
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 19 17:21:50 2023 +0100

    btrfs: fix race between quota disable and relocation
    
    [ Upstream commit 8a4a0b2a3eaf75ca8854f856ef29690c12b2f531 ]
    
    If we disable quotas while we have a relocation of a metadata block group
    that has extents belonging to the quota root, we can cause the relocation
    to fail with -ENOENT. This is because relocation builds backref nodes for
    extents of the quota root and later needs to walk the backrefs and access
    the quota root - however if in between a task disables quotas, it results
    in deleting the quota root from the root tree (with btrfs_del_root(),
    called from btrfs_quota_disable().
    
    This can be sporadically triggered by test case btrfs/255 from fstests:
    
      $ ./check btrfs/255
      FSTYP         -- btrfs
      PLATFORM      -- Linux/x86_64 debian0 6.4.0-rc6-btrfs-next-134+ #1 SMP PREEMPT_DYNAMIC Thu Jun 15 11:59:28 WEST 2023
      MKFS_OPTIONS  -- /dev/sdc
      MOUNT_OPTIONS -- /dev/sdc /home/fdmanana/btrfs-tests/scratch_1
    
      btrfs/255 6s ... _check_dmesg: something found in dmesg (see /home/fdmanana/git/hub/xfstests/results//btrfs/255.dmesg)
      - output mismatch (see /home/fdmanana/git/hub/xfstests/results//btrfs/255.out.bad)
    #      --- tests/btrfs/255.out  2023-03-02 21:47:53.876609426 +0000
    #      +++ /home/fdmanana/git/hub/xfstests/results//btrfs/255.out.bad   2023-06-16 10:20:39.267563212 +0100
    #      @@ -1,2 +1,4 @@
    #       QA output created by 255
    #      +ERROR: error during balancing '/home/fdmanana/btrfs-tests/scratch_1': No such file or directory
    #      +There may be more info in syslog - try dmesg | tail
    #       Silence is golden
    #      ...
          (Run 'diff -u /home/fdmanana/git/hub/xfstests/tests/btrfs/255.out /home/fdmanana/git/hub/xfstests/results//btrfs/255.out.bad'  to see the entire diff)
      Ran: btrfs/255
      Failures: btrfs/255
      Failed 1 of 1 tests
    
    To fix this make the quota disable operation take the cleaner mutex, as
    relocation of a block group also takes this mutex. This is also what we
    do when deleting a subvolume/snapshot, we take the cleaner mutex in the
    cleaner kthread (at cleaner_kthread()) and then we call btrfs_del_root()
    at btrfs_drop_snapshot() while under the protection of the cleaner mutex.
    
    Fixes: bed92eae26cc ("Btrfs: qgroup implementation and prototypes")
    CC: stable@vger.kernel.org # 5.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a55f346e0e5f90ed9204b093b9c0d4f1aa04439
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Jun 10 09:04:44 2020 +0800

    btrfs: qgroup: catch reserved space leaks at unmount time
    
    [ Upstream commit 5958253cf65de42493f17f36877a901486a90365 ]
    
    Before this patch, qgroup completely relies on per-inode extent io tree
    to detect reserved data space leak.
    
    However previous bug has already shown how release page before
    btrfs_finish_ordered_io() could lead to leak, and since it's
    QGROUP_RESERVED bit cleared without triggering qgroup rsv, it can't be
    detected by per-inode extent io tree.
    
    So this patch adds another (and hopefully the final) safety net to catch
    qgroup data reserved space leak.  At least the new safety net catches
    all the leaks during development, so it should be pretty useful in the
    real world.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Stable-dep-of: 8a4a0b2a3eaf ("btrfs: fix race between quota disable and relocation")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b070f29a61436f6f8a2e3abc7ea4f4be81695198
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Thu Jun 15 20:12:22 2023 +0800

    bcache: Fix __bch_btree_node_alloc to make the failure behavior consistent
    
    [ Upstream commit 80fca8a10b604afad6c14213fdfd816c4eda3ee4 ]
    
    In some specific situations, the return value of __bch_btree_node_alloc
    may be NULL. This may lead to a potential NULL pointer dereference in
    caller function like a calling chain :
    btree_split->bch_btree_node_alloc->__bch_btree_node_alloc.
    
    Fix it by initializing the return value in __bch_btree_node_alloc.
    
    Fixes: cafe56359144 ("bcache: A block layer cache")
    Cc: stable@vger.kernel.org
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Link: https://lore.kernel.org/r/20230615121223.22502-6-colyli@suse.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38a6dd2b68f9ee7b90dc312c8335854d2bd70c0b
Author: Coly Li <colyli@suse.de>
Date:   Thu Oct 1 14:50:45 2020 +0800

    bcache: remove 'int n' from parameter list of bch_bucket_alloc_set()
    
    [ Upstream commit 17e4aed8309ff28670271546c2c3263eb12f5eb6 ]
    
    The parameter 'int n' from bch_bucket_alloc_set() is not cleared
    defined. From the code comments n is the number of buckets to alloc, but
    from the code itself 'n' is the maximum cache to iterate. Indeed all the
    locations where bch_bucket_alloc_set() is called, 'n' is alwasy 1.
    
    This patch removes the confused and unnecessary 'int n' from parameter
    list of  bch_bucket_alloc_set(), and explicitly allocates only 1 bucket
    for its caller.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Stable-dep-of: 80fca8a10b60 ("bcache: Fix __bch_btree_node_alloc to make the failure behavior consistent")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edb81d6e1e50e4d87ff97f73b94f90b21aea58bf
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Jul 10 14:34:25 2023 +0200

    gpio: tps68470: Make tps68470_gpio_output() always set the initial value
    
    [ Upstream commit 5a7adc6c1069ce31ef4f606ae9c05592c80a6ab5 ]
    
    Make tps68470_gpio_output() call tps68470_gpio_set() for output-only pins
    too, so that the initial value passed to gpiod_direction_output() is
    honored for these pins too.
    
    Fixes: 275b13a65547 ("gpio: Add support for TPS68470 GPIOs")
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Daniel Scally <dan.scally@ideasonboard.com>
    Tested-by: Daniel Scally <dan.scally@ideasonboard.com>
    Reviewed-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34e71f7d3a03e295a80a7a9653767046106d2eae
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Tue Jun 6 21:59:26 2023 +0800

    jbd2: Fix wrongly judgement for buffer head removing while doing checkpoint
    
    [ Upstream commit e34c8dd238d0c9368b746480f313055f5bab5040 ]
    
    Following process,
    
    jbd2_journal_commit_transaction
    // there are several dirty buffer heads in transaction->t_checkpoint_list
              P1                   wb_workfn
    jbd2_log_do_checkpoint
     if (buffer_locked(bh)) // false
                                __block_write_full_page
                                 trylock_buffer(bh)
                                 test_clear_buffer_dirty(bh)
     if (!buffer_dirty(bh))
      __jbd2_journal_remove_checkpoint(jh)
       if (buffer_write_io_error(bh)) // false
                                 >> bh IO error occurs <<
     jbd2_cleanup_journal_tail
      __jbd2_update_log_tail
       jbd2_write_superblock
       // The bh won't be replayed in next mount.
    , which could corrupt the ext4 image, fetch a reproducer in [Link].
    
    Since writeback process clears buffer dirty after locking buffer head,
    we can fix it by try locking buffer and check dirtiness while buffer is
    locked, the buffer head can be removed if it is neither dirty nor locked.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217490
    Fixes: 470decc613ab ("[PATCH] jbd2: initial copy of files from jbd")
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230606135928.434610-5-yi.zhang@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 937cb20746c8c38ee2e729ec2c792afadb2742fa
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Tue Jun 6 21:59:23 2023 +0800

    jbd2: recheck chechpointing non-dirty buffer
    
    [ Upstream commit c2d6fd9d6f35079f1669f0100f05b46708c74b7f ]
    
    There is a long-standing metadata corruption issue that happens from
    time to time, but it's very difficult to reproduce and analyse, benefit
    from the JBD2_CYCLE_RECORD option, we found out that the problem is the
    checkpointing process miss to write out some buffers which are raced by
    another do_get_write_access(). Looks below for detail.
    
    jbd2_log_do_checkpoint() //transaction X
     //buffer A is dirty and not belones to any transaction
     __buffer_relink_io() //move it to the IO list
     __flush_batch()
      write_dirty_buffer()
                                 do_get_write_access()
                                 clear_buffer_dirty
                                 __jbd2_journal_file_buffer()
                                 //add buffer A to a new transaction Y
       lock_buffer(bh)
       //doesn't write out
     __jbd2_journal_remove_checkpoint()
     //finish checkpoint except buffer A
     //filesystem corrupt if the new transaction Y isn't fully write out.
    
    Due to the t_checkpoint_list walking loop in jbd2_log_do_checkpoint()
    have already handles waiting for buffers under IO and re-added new
    transaction to complete commit, and it also removing cleaned buffers,
    this makes sure the list will eventually get empty. So it's fine to
    leave buffers on the t_checkpoint_list while flushing out and completely
    stop using the t_checkpoint_io_list.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Tested-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20230606135928.434610-2-yi.zhang@huaweicloud.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: e34c8dd238d0 ("jbd2: Fix wrongly judgement for buffer head removing while doing checkpoint")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acc9a81f7cb2712bffdfe0b7f31bfdc66627326a
Author: Zhang Yi <yi.zhang@huawei.com>
Date:   Thu Jun 10 19:24:36 2021 +0800

    jbd2: remove redundant buffer io error checks
    
    [ Upstream commit 214eb5a4d8a2032fb9f0711d1b202eb88ee02920 ]
    
    Now that __jbd2_journal_remove_checkpoint() can detect buffer io error
    and mark journal checkpoint error, then we abort the journal later
    before updating log tail to ensure the filesystem works consistently.
    So we could remove other redundant buffer io error checkes.
    
    Signed-off-by: Zhang Yi <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20210610112440.3438139-5-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: e34c8dd238d0 ("jbd2: Fix wrongly judgement for buffer head removing while doing checkpoint")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05d440d0f5da19bbcd92f1ba3b8c346250a4f2fe
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Mon Nov 16 11:18:08 2020 +0100

    jbd2: fix kernel-doc markups
    
    [ Upstream commit 2bf31d94423c8ae3ff58e38a115b177df6940399 ]
    
    Kernel-doc markup should use this format:
            identifier - description
    
    They should not have any type before that, as otherwise
    the parser won't do the right thing.
    
    Also, some identifiers have different names between their
    prototypes and the kernel-doc markup.
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Link: https://lore.kernel.org/r/72f5c6628f5f278d67625f60893ffbc2ca28d46e.1605521731.git.mchehab+huawei@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: e34c8dd238d0 ("jbd2: Fix wrongly judgement for buffer head removing while doing checkpoint")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b41fa1ed91de41d28ba0b6d4b472567a28acfa27
Author: Xianting Tian <xianting_tian@126.com>
Date:   Sat Jul 18 08:57:37 2020 -0400

    jbd2: fix incorrect code style
    
    [ Upstream commit 60ed633f51d0c675150a117d96a45e78c3613f91 ]
    
    Remove unnecessary blank.
    
    Signed-off-by: Xianting Tian <xianting_tian@126.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/1595077057-8048-1-git-send-email-xianting_tian@126.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Stable-dep-of: e34c8dd238d0 ("jbd2: Fix wrongly judgement for buffer head removing while doing checkpoint")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

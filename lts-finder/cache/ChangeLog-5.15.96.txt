commit d383d0f28ecac0f3375bdfb9a0c4bfac979f6f8f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Feb 25 12:06:46 2023 +0100

    Linux 5.15.96
    
    Link: https://lore.kernel.org/r/20230223130429.072633724@linuxfoundation.org
    Link: https://lore.kernel.org/r/20230223141542.672463796@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Slade Watkins <srw@sladewatkins.net>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Link: https://lore.kernel.org/r/20230224102235.663354088@linuxfoundation.org
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Slade Watkins <srw@sladewatkins.net>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Kelsey Steele <kelseysteele@linux.microsoft.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49ce63694caed972e96d07cb4fa0eb19f39b95d7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Feb 22 09:52:32 2023 -0800

    bpf: add missing header file include
    
    commit f3dd0c53370e70c0f9b7e931bbec12916f3bb8cc upstream.
    
    Commit 74e19ef0ff80 ("uaccess: Add speculation barrier to
    copy_from_user()") built fine on x86-64 and arm64, and that's the extent
    of my local build testing.
    
    It turns out those got the <linux/nospec.h> include incidentally through
    other header files (<linux/kvm_host.h> in particular), but that was not
    true of other architectures, resulting in build errors
    
      kernel/bpf/core.c: In function ‘___bpf_prog_run’:
      kernel/bpf/core.c:1913:3: error: implicit declaration of function ‘barrier_nospec’
    
    so just make sure to explicitly include the proper <linux/nospec.h>
    header file to make everybody see it.
    
    Fixes: 74e19ef0ff80 ("uaccess: Add speculation barrier to copy_from_user()")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reported-by: Huacai Chen <chenhuacai@loongson.cn>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Tested-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80569627ce46b54597ee35414ba7d0a083abf53b
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Wed Oct 5 01:01:00 2022 +0300

    Revert "net/sched: taprio: make qdisc_leaf() see the per-netdev-queue pfifo child qdiscs"
    
    commit af7b29b1deaac6da3bb7637f0e263dfab7bfc7a3 upstream.
    
    taprio_attach() has this logic at the end, which should have been
    removed with the blamed patch (which is now being reverted):
    
            /* access to the child qdiscs is not needed in offload mode */
            if (FULL_OFFLOAD_IS_ENABLED(q->flags)) {
                    kfree(q->qdiscs);
                    q->qdiscs = NULL;
            }
    
    because otherwise, we make use of q->qdiscs[] even after this array was
    deallocated, namely in taprio_leaf(). Therefore, whenever one would try
    to attach a valid child qdisc to a fully offloaded taprio root, one
    would immediately dereference a NULL pointer.
    
    $ tc qdisc replace dev eno0 handle 8001: parent root taprio \
            num_tc 8 \
            map 0 1 2 3 4 5 6 7 \
            queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \
            max-sdu 0 0 0 0 0 200 0 0 \
            base-time 200 \
            sched-entry S 80 20000 \
            sched-entry S a0 20000 \
            sched-entry S 5f 60000 \
            flags 2
    $ max_frame_size=1500
    $ data_rate_kbps=20000
    $ port_transmit_rate_kbps=1000000
    $ idleslope=$data_rate_kbps
    $ sendslope=$(($idleslope - $port_transmit_rate_kbps))
    $ locredit=$(($max_frame_size * $sendslope / $port_transmit_rate_kbps))
    $ hicredit=$(($max_frame_size * $idleslope / $port_transmit_rate_kbps))
    $ tc qdisc replace dev eno0 parent 8001:7 cbs \
            idleslope $idleslope \
            sendslope $sendslope \
            hicredit $hicredit \
            locredit $locredit \
            offload 0
    
    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000030
    pc : taprio_leaf+0x28/0x40
    lr : qdisc_leaf+0x3c/0x60
    Call trace:
     taprio_leaf+0x28/0x40
     tc_modify_qdisc+0xf0/0x72c
     rtnetlink_rcv_msg+0x12c/0x390
     netlink_rcv_skb+0x5c/0x130
     rtnetlink_rcv+0x1c/0x2c
    
    The solution is not as obvious as the problem. The code which deallocates
    q->qdiscs[] is in fact copied and pasted from mqprio, which also
    deallocates the array in mqprio_attach() and never uses it afterwards.
    
    Therefore, the identical cleanup logic of priv->qdiscs[] that
    mqprio_destroy() has is deceptive because it will never take place at
    qdisc_destroy() time, but just at raw ops->destroy() time (otherwise
    said, priv->qdiscs[] do not last for the entire lifetime of the mqprio
    root), but rather, this is just the twisted way in which the Qdisc API
    understands error path cleanup should be done (Qdisc_ops :: destroy() is
    called even when Qdisc_ops :: init() never succeeded).
    
    Side note, in fact this is also what the comment in mqprio_init() says:
    
            /* pre-allocate qdisc, attachment can't fail */
    
    Or reworded, mqprio's priv->qdiscs[] scheme is only meant to serve as
    data passing between Qdisc_ops :: init() and Qdisc_ops :: attach().
    
    [ this comment was also copied and pasted into the initial taprio
      commit, even though taprio_attach() came way later ]
    
    The problem is that taprio also makes extensive use of the q->qdiscs[]
    array in the software fast path (taprio_enqueue() and taprio_dequeue()),
    but it does not keep a reference of its own on q->qdiscs[i] (you'd think
    that since it creates these Qdiscs, it holds the reference, but nope,
    this is not completely true).
    
    To understand the difference between taprio_destroy() and mqprio_destroy()
    one must look before commit 13511704f8d7 ("net: taprio offload: enforce
    qdisc to netdev queue mapping"), because that just muddied the waters.
    
    In the "original" taprio design, taprio always attached itself (the root
    Qdisc) to all netdev TX queues, so that dev_qdisc_enqueue() would go
    through taprio_enqueue().
    
    It also called qdisc_refcount_inc() on itself for as many times as there
    were netdev TX queues, in order to counter-balance what tc_get_qdisc()
    does when destroying a Qdisc (simplified for brevity below):
    
            if (n->nlmsg_type == RTM_DELQDISC)
                    err = qdisc_graft(dev, parent=NULL, new=NULL, q, extack);
    
    qdisc_graft(where "new" is NULL so this deletes the Qdisc):
    
            for (i = 0; i < num_q; i++) {
                    struct netdev_queue *dev_queue;
    
                    dev_queue = netdev_get_tx_queue(dev, i);
    
                    old = dev_graft_qdisc(dev_queue, new);
                    if (new && i > 0)
                            qdisc_refcount_inc(new);
    
                    qdisc_put(old);
                    ~~~~~~~~~~~~~~
                    this decrements taprio's refcount once for each TX queue
            }
    
            notify_and_destroy(net, skb, n, classid,
                               rtnl_dereference(dev->qdisc), new);
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               and this finally decrements it to zero,
                               making qdisc_put() call qdisc_destroy()
    
    The q->qdiscs[] created using qdisc_create_dflt() (or their
    replacements, if taprio_graft() was ever to get called) were then
    privately freed by taprio_destroy().
    
    This is still what is happening after commit 13511704f8d7 ("net: taprio
    offload: enforce qdisc to netdev queue mapping"), but only for software
    mode.
    
    In full offload mode, the per-txq "qdisc_put(old)" calls from
    qdisc_graft() now deallocate the child Qdiscs rather than decrement
    taprio's refcount. So when notify_and_destroy(taprio) finally calls
    taprio_destroy(), the difference is that the child Qdiscs were already
    deallocated.
    
    And this is exactly why the taprio_attach() comment "access to the child
    qdiscs is not needed in offload mode" is deceptive too. Not only the
    q->qdiscs[] array is not needed, but it is also necessary to get rid of
    it as soon as possible, because otherwise, we will also call qdisc_put()
    on the child Qdiscs in qdisc_destroy() -> taprio_destroy(), and this
    will cause a nasty use-after-free/refcount-saturate/whatever.
    
    In short, the problem is that since the blamed commit, taprio_leaf()
    needs q->qdiscs[] to not be freed by taprio_attach(), while qdisc_destroy()
    -> taprio_destroy() does need q->qdiscs[] to be freed by taprio_attach()
    for full offload. Fixing one problem triggers the other.
    
    All of this can be solved by making taprio keep its q->qdiscs[i] with a
    refcount elevated at 2 (in offloaded mode where they are attached to the
    netdev TX queues), both in taprio_attach() and in taprio_graft(). The
    generic qdisc_graft() would just decrement the child qdiscs' refcounts
    to 1, and taprio_destroy() would give them the final coup de grace.
    
    However the rabbit hole of changes is getting quite deep, and the
    complexity increases. The blamed commit was supposed to be a bug fix in
    the first place, and the bug it addressed is not so significant so as to
    justify further rework in stable trees. So I'd rather just revert it.
    I don't know enough about multi-queue Qdisc design to make a proper
    judgement right now regarding what is/isn't idiomatic use of Qdisc
    concepts in taprio. I will try to study the problem more and come with a
    different solution in net-next.
    
    Fixes: 1461d212ab27 ("net/sched: taprio: make qdisc_leaf() see the per-netdev-queue pfifo child qdiscs")
    Reported-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
    Reported-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Link: https://lore.kernel.org/r/20221004220100.1650558-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c168d7f36d5c63c9568f5cf2a3910822499a742
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Feb 1 13:56:24 2022 -0700

    lib/Kconfig.debug: Allow BTF + DWARF5 with pahole 1.21+
    
    commit 42d9b379e3e1790eafb87c799c9edfd0b37a37c7 upstream.
    
    Commit 98cd6f521f10 ("Kconfig: allow explicit opt in to DWARF v5")
    prevented CONFIG_DEBUG_INFO_DWARF5 from being selected when
    CONFIG_DEBUG_INFO_BTF is enabled because pahole had issues with clang's
    DWARF5 info. This was resolved by [1], which is in pahole v1.21.
    
    Allow DEBUG_INFO_DWARF5 to be selected with DEBUG_INFO_BTF when using
    pahole v1.21 or newer.
    
    [1]: https://git.kernel.org/pub/scm/devel/pahole/pahole.git/commit/?id=7d8e829f636f47aba2e1b6eda57e74d8e31f733c
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20220201205624.652313-6-nathan@kernel.org
    Signed-off-by: Matthias Maennich <maennich@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ba3de5a8a0265469ca42f37ad7c48b611c55894
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Feb 1 13:56:23 2022 -0700

    lib/Kconfig.debug: Use CONFIG_PAHOLE_VERSION
    
    commit 6323c81350b73a4569cf52df85f80273faa64071 upstream.
    
    Now that CONFIG_PAHOLE_VERSION exists, use it in the definition of
    CONFIG_PAHOLE_HAS_SPLIT_BTF and CONFIG_PAHOLE_HAS_BTF_TAG to reduce the
    amount of duplication across the tree.
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20220201205624.652313-5-nathan@kernel.org
    [maennich: omitted patching non-existing config PAHOLE_HAS_BTF_TAG]
    Signed-off-by: Matthias Maennich <maennich@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f59e08070ba92b732a0e9c68be516c6afab0097
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Feb 1 13:56:22 2022 -0700

    scripts/pahole-flags.sh: Use pahole-version.sh
    
    commit 2d6c9810eb8915c4ddede707b8e167a1d919e1ca upstream.
    
    Use pahole-version.sh to get pahole's version code to reduce the amount
    of duplication across the tree.
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20220201205624.652313-4-nathan@kernel.org
    Signed-off-by: Matthias Maennich <maennich@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3597fd5f9217d6b7c24f3aefea629484a5505764
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Feb 1 13:56:21 2022 -0700

    kbuild: Add CONFIG_PAHOLE_VERSION
    
    commit 613fe169237785a4bb1d06397b52606b2967da53 upstream.
    
    There are a few different places where pahole's version is turned into a
    three digit form with the exact same command. Move this command into
    scripts/pahole-version.sh to reduce the amount of duplication across the
    tree.
    
    Create CONFIG_PAHOLE_VERSION so the version code can be used in Kconfig
    to enable and disable configuration options based on the pahole version,
    which is already done in a couple of places.
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20220201205624.652313-3-nathan@kernel.org
    Signed-off-by: Matthias Maennich <maennich@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c98077f7598a562f51051eec043be0cb3e1b1b5e
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Jan 4 13:09:12 2023 -0800

    ext4: Fix function prototype mismatch for ext4_feat_ktype
    
    commit 118901ad1f25d2334255b3d50512fa20591531cd upstream.
    
    With clang's kernel control flow integrity (kCFI, CONFIG_CFI_CLANG),
    indirect call targets are validated against the expected function
    pointer prototype to make sure the call target is valid to help mitigate
    ROP attacks. If they are not identical, there is a failure at run time,
    which manifests as either a kernel panic or thread getting killed.
    
    ext4_feat_ktype was setting the "release" handler to "kfree", which
    doesn't have a matching function prototype. Add a simple wrapper
    with the correct prototype.
    
    This was found as a result of Clang's new -Wcast-function-type-strict
    flag, which is more sensitive than the simpler -Wcast-function-type,
    which only checks for type width mismatches.
    
    Note that this code is only reached when ext4 is a loadable module and
    it is being unloaded:
    
     CFI failure at kobject_put+0xbb/0x1b0 (target: kfree+0x0/0x180; expected type: 0x7c4aa698)
     ...
     RIP: 0010:kobject_put+0xbb/0x1b0
     ...
     Call Trace:
      <TASK>
      ext4_exit_sysfs+0x14/0x60 [ext4]
      cleanup_module+0x67/0xedb [ext4]
    
    Fixes: b99fee58a20a ("ext4: create ext4_feat kobject dynamically")
    Cc: Theodore Ts'o <tytso@mit.edu>
    Cc: Eric Biggers <ebiggers@kernel.org>
    Cc: stable@vger.kernel.org
    Build-tested-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20230103234616.never.915-kees@kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20230104210908.gonna.388-kees@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43cb0369c84aa1eae28c33a22a861b5d7908a2d3
Author: Paul Moore <paul@paul-moore.com>
Date:   Tue Feb 7 10:21:47 2023 -0500

    audit: update the mailing list in MAINTAINERS
    
    commit 6c6cd913accd77008f74a1a9d57b816db3651daa upstream.
    
    We've moved the upstream Linux Kernel audit subsystem discussions to
    a new mailing list, this patch updates the MAINTAINERS info with the
    new list address.
    
    Marking this for stable inclusion to help speed uptake of the new
    list across all of the supported kernel releases.  This is a doc only
    patch so the risk should be close to nil.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5ef61edb1e57a6a8acc69fc252d10a15ceafb84
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri Jan 27 15:01:00 2023 +0100

    wifi: mwifiex: Add missing compatible string for SD8787
    
    commit 36dd7a4c6226133b0b7aa92b8e604e688d958d0c upstream.
    
    Commit e3fffc1f0b47 ("devicetree: document new marvell-8xxx and
    pwrseq-sd8787 options") documented a compatible string for SD8787 in
    the devicetree bindings, but neglected to add it to the mwifiex driver.
    
    Fixes: e3fffc1f0b47 ("devicetree: document new marvell-8xxx and pwrseq-sd8787 options")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v4.11+
    Cc: Matt Ranostay <mranostay@ti.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/320de5005ff3b8fd76be2d2b859fd021689c3681.1674827105.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a24eb3f9906347391d945a089f356c1d60bd51db
Author: Zhang Wensheng <zhangwensheng5@huawei.com>
Date:   Sat May 21 15:37:48 2022 +0800

    nbd: fix possible overflow on 'first_minor' in nbd_dev_add()
    
    commit 858f1bf65d3d9c00b5e2d8ca87dc79ed88267c98 upstream.
    
    When 'index' is a big numbers, it may become negative which forced
    to 'int'. then 'index << part_shift' might overflow to a positive
    value that is not greater than '0xfffff', then sysfs might complains
    about duplicate creation. Because of this, move the 'index' judgment
    to the front will fix it and be better.
    
    Fixes: b0d9111a2d53 ("nbd: use an idr to keep track of nbd devices")
    Fixes: 940c264984fd ("nbd: fix possible overflow for 'first_minor' in nbd_dev_add()")
    Signed-off-by: Zhang Wensheng <zhangwensheng5@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Link: https://lore.kernel.org/r/20220521073749.3146892-6-yukuai3@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Wen Yang <wenyang.linux@foxmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d518ca02542fda332b34c2a3db9164363ac3f58e
Author: Alessandro Astone <ales.astone@gmail.com>
Date:   Wed Feb 22 12:12:08 2023 +0000

    binder: Gracefully handle BINDER_TYPE_FDA objects with num_fds=0
    
    commit ef38de9217a04c9077629a24652689d8fdb4c6c6 upstream.
    
    Some android userspace is sending BINDER_TYPE_FDA objects with
    num_fds=0. Like the previous patch, this is reproducible when
    playing a video.
    
    Before commit 09184ae9b575 BINDER_TYPE_FDA objects with num_fds=0
    were 'correctly handled', as in no fixup was performed.
    
    After commit 09184ae9b575 we aggregate fixup and skip regions in
    binder_ptr_fixup structs and distinguish between the two by using
    the skip_size field: if it's 0, then it's a fixup, otherwise skip.
    When processing BINDER_TYPE_FDA objects with num_fds=0 we add a
    skip region of skip_size=0, and this causes issues because now
    binder_do_deferred_txn_copies will think this was a fixup region.
    
    To address that, return early from binder_translate_fd_array to
    avoid adding an empty skip region.
    
    Fixes: 09184ae9b575 ("binder: defer copies of pre-patched txn data")
    Acked-by: Todd Kjos <tkjos@google.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Alessandro Astone <ales.astone@gmail.com>
    Link: https://lore.kernel.org/r/20220415120015.52684-1-ales.astone@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 367d0456c79264d8fe743a4ab2961c772db4d495
Author: Alessandro Astone <ales.astone@gmail.com>
Date:   Wed Feb 22 12:12:07 2023 +0000

    binder: Address corner cases in deferred copy and fixup
    
    commit 2d1746e3fda0c3612143d7c06f8e1d1830c13e23 upstream.
    
    When handling BINDER_TYPE_FDA object we are pushing a parent fixup
    with a certain skip_size but no scatter-gather copy object, since
    the copy is handled standalone.
    If BINDER_TYPE_FDA is the last children the scatter-gather copy
    loop will never stop to skip it, thus we are left with an item in
    the parent fixup list. This will trigger the BUG_ON().
    
    This is reproducible in android when playing a video.
    We receive a transaction that looks like this:
        obj[0] BINDER_TYPE_PTR, parent
        obj[1] BINDER_TYPE_PTR, child
        obj[2] BINDER_TYPE_PTR, child
        obj[3] BINDER_TYPE_FDA, child
    
    Fixes: 09184ae9b575 ("binder: defer copies of pre-patched txn data")
    Acked-by: Todd Kjos <tkjos@google.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Alessandro Astone <ales.astone@gmail.com>
    Link: https://lore.kernel.org/r/20220415120015.52684-2-ales.astone@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b345b22002889b943c50db25cd7f37c93def722a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Feb 22 12:12:06 2023 +0000

    binder: fix pointer cast warning
    
    commit 9a0a930fe2535a76ad70d3f43caeccf0d86a3009 upstream.
    
    binder_uintptr_t is not the same as uintptr_t, so converting it into a
    pointer requires a second cast:
    
    drivers/android/binder.c: In function 'binder_translate_fd_array':
    drivers/android/binder.c:2511:28: error: cast to pointer from integer of different size [-Werror=int-to-pointer-cast]
     2511 |         sender_ufda_base = (void __user *)sender_uparent->buffer + fda->parent_offset;
          |                            ^
    
    Fixes: 656e01f3ab54 ("binder: read pre-translated fds from sender buffer")
    Acked-by: Todd Kjos <tkjos@google.com>
    Acked-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20211207122448.1185769-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c194fc351fecb419e7f3a33ed7e9b273b427d263
Author: Todd Kjos <tkjos@google.com>
Date:   Wed Feb 22 12:12:05 2023 +0000

    binder: defer copies of pre-patched txn data
    
    commit 09184ae9b5756cc469db6fd1d1cfdcffbf627c2d upstream.
    
    BINDER_TYPE_PTR objects point to memory areas in the
    source process to be copied into the target buffer
    as part of a transaction. This implements a scatter-
    gather model where non-contiguous memory in a source
    process is "gathered" into a contiguous region in
    the target buffer.
    
    The data can include pointers that must be fixed up
    to correctly point to the copied data. To avoid making
    source process pointers visible to the target process,
    this patch defers the copy until the fixups are known
    and then copies and fixeups are done together.
    
    There is a special case of BINDER_TYPE_FDA which applies
    the fixup later in the target process context. In this
    case the user data is skipped (so no untranslated fds
    become visible to the target).
    
    Reviewed-by: Martijn Coenen <maco@android.com>
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Link: https://lore.kernel.org/r/20211130185152.437403-5-tkjos@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d107b4352284aff85e9dae0b13d4b05e17a1520c
Author: Todd Kjos <tkjos@google.com>
Date:   Wed Feb 22 12:12:04 2023 +0000

    binder: read pre-translated fds from sender buffer
    
    commit 656e01f3ab54afe71bed066996fc2640881e1220 upstream.
    
    This patch is to prepare for an up coming patch where we read
    pre-translated fds from the sender buffer and translate them before
    copying them to the target.  It does not change run time.
    
    The patch adds two new parameters to binder_translate_fd_array() to
    hold the sender buffer and sender buffer parent.  These parameters let
    us call copy_from_user() directly from the sender instead of using
    binder_alloc_copy_from_buffer() to copy from the target.  Also the patch
    adds some new alignment checks.  Previously the alignment checks would
    have been done in a different place, but this lets us print more
    useful error messages.
    
    Reviewed-by: Martijn Coenen <maco@android.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Link: https://lore.kernel.org/r/20211130185152.437403-4-tkjos@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41d8b591d70a7517293b23958a18452baf22588f
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Tue Feb 21 12:30:15 2023 -0800

    uaccess: Add speculation barrier to copy_from_user()
    
    commit 74e19ef0ff8061ef55957c3abd71614ef0f42f47 upstream.
    
    The results of "access_ok()" can be mis-speculated.  The result is that
    you can end speculatively:
    
            if (access_ok(from, size))
                    // Right here
    
    even for bad from/size combinations.  On first glance, it would be ideal
    to just add a speculation barrier to "access_ok()" so that its results
    can never be mis-speculated.
    
    But there are lots of system calls just doing access_ok() via
    "copy_to_user()" and friends (example: fstat() and friends).  Those are
    generally not problematic because they do not _consume_ data from
    userspace other than the pointer.  They are also very quick and common
    system calls that should not be needlessly slowed down.
    
    "copy_from_user()" on the other hand uses a user-controller pointer and
    is frequently followed up with code that might affect caches.  Take
    something like this:
    
            if (!copy_from_user(&kernelvar, uptr, size))
                    do_something_with(kernelvar);
    
    If userspace passes in an evil 'uptr' that *actually* points to a kernel
    addresses, and then do_something_with() has cache (or other)
    side-effects, it could allow userspace to infer kernel data values.
    
    Add a barrier to the common copy_from_user() code to prevent
    mis-speculated values which happen after the copy.
    
    Also add a stub for architectures that do not define barrier_nospec().
    This makes the macro usable in generic code.
    
    Since the barrier is now usable in generic code, the x86 #ifdef in the
    BPF code can also go away.
    
    Reported-by: Jordy Zomer <jordyzomer@google.com>
    Suggested-by: Linus Torvalds <torvalds@linuxfoundation.org>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>   # BPF bits
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d3d5099a50badadad6837edda00e42149b2f657
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Fri Dec 30 00:56:41 2022 +0800

    drm/i915/gvt: fix double free bug in split_2MB_gtt_entry
    
    commit 4a61648af68f5ba4884f0e3b494ee1cabc4b6620 upstream.
    
    If intel_gvt_dma_map_guest_page failed, it will call
    ppgtt_invalidate_spt, which will finally free the spt.
    But the caller function ppgtt_populate_spt_by_guest_entry
    does not notice that, it will free spt again in its error
    path.
    
    Fix this by canceling the mapping of DMA address and freeing sub_spt.
    Besides, leave the handle of spt destroy to caller function instead
    of callee function when error occurs.
    
    Fixes: b901b252b6cf ("drm/i915/gvt: Add 2M huge gtt support")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20221229165641.1192455-1-zyytlz.wz@163.com
    Signed-off-by: Ovidiu Panait <ovidiu.panait@eng.windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d835f9c4ede2403582a159794e49dc6e5c4e9711
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jan 10 23:47:53 2023 +1100

    powerpc/64s/radix: Fix RWX mapping with relocated kernel
    
    [ Upstream commit 111bcb37385353f0510e5847d5abcd1c613dba23 ]
    
    If a relocatable kernel is loaded at a non-zero address and told not to
    relocate to zero (kdump or RELOCATABLE_TEST), the mapping of the
    interrupt code at zero is left with RWX permissions.
    
    That is a security weakness, and leads to a warning at boot if
    CONFIG_DEBUG_WX is enabled:
    
      powerpc/mm: Found insecure W+X mapping at address 00000000056435bc/0xc000000000000000
      WARNING: CPU: 1 PID: 1 at arch/powerpc/mm/ptdump/ptdump.c:193 note_page+0x484/0x4c0
      CPU: 1 PID: 1 Comm: swapper/0 Not tainted 6.2.0-rc1-00001-g8ae8e98aea82-dirty #175
      Hardware name: IBM pSeries (emulated by qemu) POWER9 (raw) 0x4e1202 0xf000005 of:SLOF,git-dd0dca hv:linux,kvm pSeries
      NIP:  c0000000004a1c34 LR: c0000000004a1c30 CTR: 0000000000000000
      REGS: c000000003503770 TRAP: 0700   Not tainted  (6.2.0-rc1-00001-g8ae8e98aea82-dirty)
      MSR:  8000000002029033 <SF,VEC,EE,ME,IR,DR,RI,LE>  CR: 24000220  XER: 00000000
      CFAR: c000000000545a58 IRQMASK: 0
      ...
      NIP note_page+0x484/0x4c0
      LR  note_page+0x480/0x4c0
      Call Trace:
        note_page+0x480/0x4c0 (unreliable)
        ptdump_pmd_entry+0xc8/0x100
        walk_pgd_range+0x618/0xab0
        walk_page_range_novma+0x74/0xc0
        ptdump_walk_pgd+0x98/0x170
        ptdump_check_wx+0x94/0x100
        mark_rodata_ro+0x30/0x70
        kernel_init+0x78/0x1a0
        ret_from_kernel_thread+0x5c/0x64
    
    The fix has two parts. Firstly the pages from zero up to the end of
    interrupts need to be marked read-only, so that they are left with R-X
    permissions. Secondly the mapping logic needs to be taught to ensure
    there is a page boundary at the end of the interrupt region, so that the
    permission change only applies to the interrupt text, and not the region
    following it.
    
    Fixes: c55d7b5e6426 ("powerpc: Remove STRICT_KERNEL_RWX incompatibility with RELOCATABLE")
    Reported-by: Sachin Sant <sachinp@linux.ibm.com>
    Tested-by: Sachin Sant <sachinp@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20230110124753.1325426-2-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87b3e4f845a20e8329aa939dc637c734ea2932c3
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jan 10 23:47:52 2023 +1100

    powerpc/64s/radix: Fix crash with unaligned relocated kernel
    
    [ Upstream commit 98d0219e043e09013e883eacde3b93e0b2bf944d ]
    
    If a relocatable kernel is loaded at an address that is not 2MB aligned
    and told not to relocate to zero, the kernel can crash due to
    mark_rodata_ro() incorrectly changing some read-write data to read-only.
    
    Scenarios where the misalignment can occur are when the kernel is
    loaded by kdump or using the RELOCATABLE_TEST config option.
    
    Example crash with the kernel loaded at 5MB:
    
      Run /sbin/init as init process
      BUG: Unable to handle kernel data access on write at 0xc000000000452000
      Faulting instruction address: 0xc0000000005b6730
      Oops: Kernel access of bad area, sig: 11 [#1]
      LE PAGE_SIZE=64K MMU=Radix SMP NR_CPUS=2048 NUMA pSeries
      CPU: 1 PID: 1 Comm: init Not tainted 6.2.0-rc1-00011-g349188be4841 #166
      Hardware name: IBM pSeries (emulated by qemu) POWER9 (raw) 0x4e1202 0xf000005 of:SLOF,git-5b4c5a hv:linux,kvm pSeries
      NIP:  c0000000005b6730 LR: c000000000ae9ab8 CTR: 0000000000000380
      REGS: c000000004503250 TRAP: 0300   Not tainted  (6.2.0-rc1-00011-g349188be4841)
      MSR:  8000000000009033 <SF,EE,ME,IR,DR,RI,LE>  CR: 44288480  XER: 00000000
      CFAR: c0000000005b66ec DAR: c000000000452000 DSISR: 0a000000 IRQMASK: 0
      ...
      NIP memset+0x68/0x104
      LR  zero_user_segments.constprop.0+0xa8/0xf0
      Call Trace:
        ext4_mpage_readpages+0x7f8/0x830
        ext4_readahead+0x48/0x60
        read_pages+0xb8/0x380
        page_cache_ra_unbounded+0x19c/0x250
        filemap_fault+0x58c/0xae0
        __do_fault+0x60/0x100
        __handle_mm_fault+0x1230/0x1a40
        handle_mm_fault+0x120/0x300
        ___do_page_fault+0x20c/0xa80
        do_page_fault+0x30/0xc0
        data_access_common_virt+0x210/0x220
    
    This happens because mark_rodata_ro() tries to change permissions on the
    range _stext..__end_rodata, but _stext sits in the middle of the 2MB
    page from 4MB to 6MB:
    
      radix-mmu: Mapped 0x0000000000000000-0x0000000000200000 with 2.00 MiB pages (exec)
      radix-mmu: Mapped 0x0000000000200000-0x0000000000400000 with 2.00 MiB pages
      radix-mmu: Mapped 0x0000000000400000-0x0000000002400000 with 2.00 MiB pages (exec)
    
    The logic that changes the permissions assumes the linear mapping was
    split correctly at boot, so it marks the entire 2MB page read-only. That
    leads to the write fault above.
    
    To fix it, the boot time mapping logic needs to consider that if the
    kernel is running at a non-zero address then _stext is a boundary where
    it must split the mapping.
    
    That leads to the mapping being split correctly, allowing the rodata
    permission change to take happen correctly, with no spillover:
    
      radix-mmu: Mapped 0x0000000000000000-0x0000000000200000 with 2.00 MiB pages (exec)
      radix-mmu: Mapped 0x0000000000200000-0x0000000000400000 with 2.00 MiB pages
      radix-mmu: Mapped 0x0000000000400000-0x0000000000500000 with 64.0 KiB pages
      radix-mmu: Mapped 0x0000000000500000-0x0000000000600000 with 64.0 KiB pages (exec)
      radix-mmu: Mapped 0x0000000000600000-0x0000000002400000 with 2.00 MiB pages (exec)
    
    If the kernel is loaded at a 2MB aligned address, the mapping continues
    to use 2MB pages as before:
    
      radix-mmu: Mapped 0x0000000000000000-0x0000000000200000 with 2.00 MiB pages (exec)
      radix-mmu: Mapped 0x0000000000200000-0x0000000000400000 with 2.00 MiB pages
      radix-mmu: Mapped 0x0000000000400000-0x0000000002c00000 with 2.00 MiB pages (exec)
      radix-mmu: Mapped 0x0000000002c00000-0x0000000100000000 with 2.00 MiB pages
    
    Fixes: c55d7b5e6426 ("powerpc: Remove STRICT_KERNEL_RWX incompatibility with RELOCATABLE")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20230110124753.1325426-1-mpe@ellerman.id.au
    Stable-dep-of: 111bcb373853 ("powerpc/64s/radix: Fix RWX mapping with relocated kernel")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b0e9b5adc8ed4e3f7f2b83838007e9ef4962f36
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Sep 16 14:41:24 2022 +1000

    powerpc/vmlinux.lds: Add an explicit symbol for the SRWX boundary
    
    [ Upstream commit b150a4d12b919baf956b807aa305cf78df03d0fe ]
    
    Currently __init_begin is used as the boundary for strict RWX between
    executable/read-only text and data, and non-executable (after boot) code
    and data.
    
    But that's a little subtle, so add an explicit symbol to document that
    the SRWX boundary lies there, and add a comment making it clear that
    __init_begin must also begin there.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220916131422.318752-2-mpe@ellerman.id.au
    Stable-dep-of: 111bcb373853 ("powerpc/64s/radix: Fix RWX mapping with relocated kernel")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6fff8fa4f5ba4d74529ec78f0fefc35cc149d93
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Sep 16 14:40:57 2022 +1000

    powerpc/vmlinux.lds: Ensure STRICT_ALIGN_SIZE is at least page aligned
    
    [ Upstream commit 331771e836e6a32c8632d8cf5e2cdd94471258ad ]
    
    Add a check that STRICT_ALIGN_SIZE is aligned to at least PAGE_SIZE.
    
    That then makes the alignment to PAGE_SIZE immediately after the
    alignment to STRICT_ALIGN_SIZE redundant, so remove it.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220916131422.318752-1-mpe@ellerman.id.au
    Stable-dep-of: 111bcb373853 ("powerpc/64s/radix: Fix RWX mapping with relocated kernel")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7f5e3b60c30d89a6746c5ff8805baa1e77dc4fc
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Nov 5 13:40:46 2021 -0700

    powerpc: use generic version of arch_is_kernel_initmem_freed()
    
    [ Upstream commit e012a25d81a12fb332e862b51bfb59321acf96e4 ]
    
    The generic version of arch_is_kernel_initmem_freed() now does the same
    as powerpc version.
    
    Remove the powerpc version.
    
    Link: https://lkml.kernel.org/r/c53764eb45d41491e2b21da2e7812239897dbebb.1633001016.git.christophe.leroy@csgroup.eu
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Stable-dep-of: 111bcb373853 ("powerpc/64s/radix: Fix RWX mapping with relocated kernel")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc58616b198bf44fde546d58499abdcf51d17112
Author: Sean Anderson <sean.anderson@seco.com>
Date:   Fri Dec 16 12:29:37 2022 -0500

    powerpc: dts: t208x: Disable 10G on MAC1 and MAC2
    
    [ Upstream commit 8d8bee13ae9e316443c6666286360126a19c8d94 ]
    
    There aren't enough resources to run these ports at 10G speeds. Disable
    10G for these ports, reverting to the previous speed.
    
    Fixes: 36926a7d70c2 ("powerpc: dts: t208x: Mark MAC1 and MAC2 as 10G")
    Reported-by: Camelia Alexandra Groza <camelia.groza@nxp.com>
    Signed-off-by: Sean Anderson <sean.anderson@seco.com>
    Reviewed-by: Camelia Groza <camelia.groza@nxp.com>
    Tested-by: Camelia Groza <camelia.groza@nxp.com>
    Link: https://lore.kernel.org/r/20221216172937.2960054-1-sean.anderson@seco.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62302ac5777a1bdb8cafd6de34bcd42626a5b597
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Mon Dec 19 11:39:27 2022 +0100

    can: kvaser_usb: hydra: help gcc-13 to figure out cmd_len
    
    [ Upstream commit f006229135b7debf4037adb1eb93e358559593db ]
    
    Debian's gcc-13 [1] throws the following error in
    kvaser_usb_hydra_cmd_size():
    
    [1] gcc version 13.0.0 20221214 (experimental) [master r13-4693-g512098a3316] (Debian 13-20221214-1)
    
    | drivers/net/can/usb/kvaser_usb/kvaser_usb_hydra.c:502:65: error:
    | array subscript ‘struct kvaser_cmd_ext[0]’ is partly outside array
    | bounds of ‘unsigned char[32]’ [-Werror=array-bounds=]
    |   502 |                 ret = le16_to_cpu(((struct kvaser_cmd_ext *)cmd)->len);
    
    kvaser_usb_hydra_cmd_size() returns the size of given command. It
    depends on the command number (cmd->header.cmd_no). For extended
    commands (cmd->header.cmd_no == CMD_EXTENDED) the above shown code is
    executed.
    
    Help gcc to recognize that this code path is not taken in all cases,
    by calling kvaser_usb_hydra_cmd_size() directly after assigning the
    command number.
    
    Fixes: aec5fb2268b7 ("can: kvaser_usb: Add support for Kvaser USB hydra family")
    Cc: Jimmy Assarsson <extja@kvaser.com>
    Cc: Anssi Hannula <anssi.hannula@bitwise.fi>
    Link: https://lore.kernel.org/all/20221219110104.1073881-1-mkl@pengutronix.de
    Tested-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b539a7dbb49250f92515c2ba60aea239efc9e35
Author: Jim Mattson <jmattson@google.com>
Date:   Wed Oct 19 14:36:20 2022 -0700

    KVM: VMX: Execute IBPB on emulated VM-exit when guest has IBRS
    
    [ Upstream commit 2e7eab81425ad6c875f2ed47c0ce01e78afc38a5 ]
    
    According to Intel's document on Indirect Branch Restricted
    Speculation, "Enabling IBRS does not prevent software from controlling
    the predicted targets of indirect branches of unrelated software
    executed later at the same predictor mode (for example, between two
    different user applications, or two different virtual machines). Such
    isolation can be ensured through use of the Indirect Branch Predictor
    Barrier (IBPB) command." This applies to both basic and enhanced IBRS.
    
    Since L1 and L2 VMs share hardware predictor modes (guest-user and
    guest-kernel), hardware IBRS is not sufficient to virtualize
    IBRS. (The way that basic IBRS is implemented on pre-eIBRS parts,
    hardware IBRS is actually sufficient in practice, even though it isn't
    sufficient architecturally.)
    
    For virtual CPUs that support IBRS, add an indirect branch prediction
    barrier on emulated VM-exit, to ensure that the predicted targets of
    indirect branches executed in L1 cannot be controlled by software that
    was executed in L2.
    
    Since we typically don't intercept guest writes to IA32_SPEC_CTRL,
    perform the IBPB at emulated VM-exit regardless of the current
    IA32_SPEC_CTRL.IBRS value, even though the IBPB could technically be
    deferred until L1 sets IA32_SPEC_CTRL.IBRS, if IA32_SPEC_CTRL.IBRS is
    clear at emulated VM-exit.
    
    This is CVE-2022-2196.
    
    Fixes: 5c911beff20a ("KVM: nVMX: Skip IBPB when switching between vmcs01 and vmcs02")
    Cc: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Link: https://lore.kernel.org/r/20221019213620.1953281-3-jmattson@google.com
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78c1d35ed66c5bc42f274e426928691ea62e676f
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Sep 30 23:40:31 2022 +0000

    KVM: SVM: Skip WRMSR fastpath on VM-Exit if next RIP isn't valid
    
    [ Upstream commit 5c30e8101e8d5d020b1d7119117889756a6ed713 ]
    
    Skip the WRMSR fastpath in SVM's VM-Exit handler if the next RIP isn't
    valid, e.g. because KVM is running with nrips=false.  SVM must decode and
    emulate to skip the WRMSR if the CPU doesn't provide the next RIP.
    Getting the instruction bytes to decode the WRMSR requires reading guest
    memory, which in turn means dereferencing memslots, and that isn't safe
    because KVM doesn't hold SRCU when the fastpath runs.
    
    Don't bother trying to enable the fastpath for this case, e.g. by doing
    only the WRMSR and leaving the "skip" until later.  NRIPS is supported on
    all modern CPUs (KVM has considered making it mandatory), and the next
    RIP will be valid the vast, vast majority of the time.
    
      =============================
      WARNING: suspicious RCU usage
      6.0.0-smp--4e557fcd3d80-skip #13 Tainted: G           O
      -----------------------------
      include/linux/kvm_host.h:954 suspicious rcu_dereference_check() usage!
    
      other info that might help us debug this:
    
      rcu_scheduler_active = 2, debug_locks = 1
      1 lock held by stable/206475:
       #0: ffff9d9dfebcc0f0 (&vcpu->mutex){+.+.}-{3:3}, at: kvm_vcpu_ioctl+0x8b/0x620 [kvm]
    
      stack backtrace:
      CPU: 152 PID: 206475 Comm: stable Tainted: G           O       6.0.0-smp--4e557fcd3d80-skip #13
      Hardware name: Google, Inc. Arcadia_IT_80/Arcadia_IT_80, BIOS 10.48.0 01/27/2022
      Call Trace:
       <TASK>
       dump_stack_lvl+0x69/0xaa
       dump_stack+0x10/0x12
       lockdep_rcu_suspicious+0x11e/0x130
       kvm_vcpu_gfn_to_memslot+0x155/0x190 [kvm]
       kvm_vcpu_gfn_to_hva_prot+0x18/0x80 [kvm]
       paging64_walk_addr_generic+0x183/0x450 [kvm]
       paging64_gva_to_gpa+0x63/0xd0 [kvm]
       kvm_fetch_guest_virt+0x53/0xc0 [kvm]
       __do_insn_fetch_bytes+0x18b/0x1c0 [kvm]
       x86_decode_insn+0xf0/0xef0 [kvm]
       x86_emulate_instruction+0xba/0x790 [kvm]
       kvm_emulate_instruction+0x17/0x20 [kvm]
       __svm_skip_emulated_instruction+0x85/0x100 [kvm_amd]
       svm_skip_emulated_instruction+0x13/0x20 [kvm_amd]
       handle_fastpath_set_msr_irqoff+0xae/0x180 [kvm]
       svm_vcpu_run+0x4b8/0x5a0 [kvm_amd]
       vcpu_enter_guest+0x16ca/0x22f0 [kvm]
       kvm_arch_vcpu_ioctl_run+0x39d/0x900 [kvm]
       kvm_vcpu_ioctl+0x538/0x620 [kvm]
       __se_sys_ioctl+0x77/0xc0
       __x64_sys_ioctl+0x1d/0x20
       do_syscall_64+0x3d/0x80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 404d5d7bff0d ("KVM: X86: Introduce more exit_fastpath_completion enum values")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Link: https://lore.kernel.org/r/20220930234031.1732249-1-seanjc@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 676248836577f39878c7719e0fddada440e6fa67
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Sep 30 23:36:32 2022 +0000

    KVM: x86: Fail emulation during EMULTYPE_SKIP on any exception
    
    [ Upstream commit 17122c06b86c9f77f45b86b8e62c3ed440847a59 ]
    
    Treat any exception during instruction decode for EMULTYPE_SKIP as a
    "full" emulation failure, i.e. signal failure instead of queuing the
    exception.  When decoding purely to skip an instruction, KVM and/or the
    CPU has already done some amount of emulation that cannot be unwound,
    e.g. on an EPT misconfig VM-Exit KVM has already processeed the emulated
    MMIO.  KVM already does this if a #UD is encountered, but not for other
    exceptions, e.g. if a #PF is encountered during fetch.
    
    In SVM's soft-injection use case, queueing the exception is particularly
    problematic as queueing exceptions while injecting events can put KVM
    into an infinite loop due to bailing from VM-Enter to service the newly
    pending exception.  E.g. multiple warnings to detect such behavior fire:
    
      ------------[ cut here ]------------
      WARNING: CPU: 3 PID: 1017 at arch/x86/kvm/x86.c:9873 kvm_arch_vcpu_ioctl_run+0x1de5/0x20a0 [kvm]
      Modules linked in: kvm_amd ccp kvm irqbypass
      CPU: 3 PID: 1017 Comm: svm_nested_soft Not tainted 6.0.0-rc1+ #220
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      RIP: 0010:kvm_arch_vcpu_ioctl_run+0x1de5/0x20a0 [kvm]
      Call Trace:
       kvm_vcpu_ioctl+0x223/0x6d0 [kvm]
       __x64_sys_ioctl+0x85/0xc0
       do_syscall_64+0x2b/0x50
       entry_SYSCALL_64_after_hwframe+0x46/0xb0
      ---[ end trace 0000000000000000 ]---
      ------------[ cut here ]------------
      WARNING: CPU: 3 PID: 1017 at arch/x86/kvm/x86.c:9987 kvm_arch_vcpu_ioctl_run+0x12a3/0x20a0 [kvm]
      Modules linked in: kvm_amd ccp kvm irqbypass
      CPU: 3 PID: 1017 Comm: svm_nested_soft Tainted: G        W          6.0.0-rc1+ #220
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      RIP: 0010:kvm_arch_vcpu_ioctl_run+0x12a3/0x20a0 [kvm]
      Call Trace:
       kvm_vcpu_ioctl+0x223/0x6d0 [kvm]
       __x64_sys_ioctl+0x85/0xc0
       do_syscall_64+0x2b/0x50
       entry_SYSCALL_64_after_hwframe+0x46/0xb0
      ---[ end trace 0000000000000000 ]---
    
    Fixes: 6ea6e84309ca ("KVM: x86: inject exceptions produced by x86_decode_insn")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Link: https://lore.kernel.org/r/20220930233632.1725475-1-seanjc@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5456f0d53b4a6a9262ecf58eb893b38dc818f87a
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 1 22:45:33 2022 +0200

    random: always mix cycle counter in add_latent_entropy()
    
    [ Upstream commit d7bf7f3b813e3755226bcb5114ad2ac477514ebf ]
    
    add_latent_entropy() is called every time a process forks, in
    kernel_clone(). This in turn calls add_device_randomness() using the
    latent entropy global state. add_device_randomness() does two things:
    
       2) Mixes into the input pool the latent entropy argument passed; and
       1) Mixes in a cycle counter, a sort of measurement of when the event
          took place, the high precision bits of which are presumably
          difficult to predict.
    
    (2) is impossible without CONFIG_GCC_PLUGIN_LATENT_ENTROPY=y. But (1) is
    always possible. However, currently CONFIG_GCC_PLUGIN_LATENT_ENTROPY=n
    disables both (1) and (2), instead of just (2).
    
    This commit causes the CONFIG_GCC_PLUGIN_LATENT_ENTROPY=n case to still
    do (1) by passing NULL (len 0) to add_device_randomness() when add_latent_
    entropy() is called.
    
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    Cc: PaX Team <pageexec@freemail.hu>
    Cc: Emese Revfy <re.emese@gmail.com>
    Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2edb20b003ee329d40252937ac48e19e67db737
Author: Rahul Tanwar <rtanwar@maxlinear.com>
Date:   Tue Oct 25 19:03:57 2022 +0800

    clk: mxl: syscon_node_to_regmap() returns error pointers
    
    [ Upstream commit 7256d1f4618b40792d1e9b9b6cb1406a13cad2dd ]
    
    Commit 036177310bac ("clk: mxl: Switch from direct readl/writel based IO
    to regmap based IO") introduced code resulting in below warning issued
    by the smatch static checker.
    
      drivers/clk/x86/clk-lgm.c:441 lgm_cgu_probe() warn: passing zero to 'PTR_ERR'
    
    Fix the warning by replacing incorrect IS_ERR_OR_NULL() with IS_ERR().
    
    Fixes: 036177310bac ("clk: mxl: Switch from direct readl/writel based IO to regmap based IO")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Rahul Tanwar <rtanwar@maxlinear.com>
    Link: https://lore.kernel.org/r/49e339d4739e4ae4c92b00c1b2918af0755d4122.1666695221.git.rtanwar@maxlinear.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04d31929df120e37be772a372862ed2ccaadd51b
Author: Sean Anderson <sean.anderson@seco.com>
Date:   Mon Oct 17 16:22:39 2022 -0400

    powerpc: dts: t208x: Mark MAC1 and MAC2 as 10G
    
    [ Upstream commit 36926a7d70c2d462fca1ed85bfee000d17fd8662 ]
    
    On the T208X SoCs, MAC1 and MAC2 support XGMII. Add some new MAC dtsi
    fragments, and mark the QMAN ports as 10G.
    
    Fixes: da414bb923d9 ("powerpc/mpc85xx: Add FSL QorIQ DPAA FMan support to the SoC device tree(s)")
    Signed-off-by: Sean Anderson <sean.anderson@seco.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ae31d36516b52f7bdb3f991466910a76ade0806
Author: Rahul Tanwar <rtanwar@maxlinear.com>
Date:   Thu Oct 13 14:48:33 2022 +0800

    clk: mxl: Fix a clk entry by adding relevant flags
    
    [ Upstream commit 106ef3bda21006fe37b62c85931230a6355d78d3 ]
    
    One of the clock entry "dcl" clk has some HW limitations. One is that
    its rate can only by changed by changing its parent clk's rate & two is
    that HW does not support enable/disable for this clk.
    
    Handle above two limitations by adding relevant flags. Add standard flag
    CLK_SET_RATE_PARENT to handle rate change and add driver internal flag
    DIV_CLK_NO_MASK to handle enable/disable.
    
    Fixes: d058fd9e8984 ("clk: intel: Add CGU clock driver for a new SoC")
    Reviewed-by: Yi xin Zhu <yzhu@maxlinear.com>
    Signed-off-by: Rahul Tanwar <rtanwar@maxlinear.com>
    Link: https://lore.kernel.org/r/a4770e7225f8a0c03c8ab2ba80434a4e8e9afb17.1665642720.git.rtanwar@maxlinear.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0583edea4fdb7b5b87a077263dddab476e9f138
Author: Rahul Tanwar <rtanwar@maxlinear.com>
Date:   Thu Oct 13 14:48:32 2022 +0800

    clk: mxl: Add option to override gate clks
    
    [ Upstream commit a5d49bd369b8588c0ee9d4d0a2c0160558a3ab69 ]
    
    In MxL's LGM SoC, gate clocks can be controlled either from CGU clk driver
    i.e. this driver or directly from power management driver/daemon. It is
    dependent on the power policy/profile requirements of the end product.
    
    To support such use cases, provide option to override gate clks enable/disable
    by adding a flag GATE_CLK_HW which controls if these gate clks are controlled
    by HW i.e. this driver or overridden in order to allow it to be controlled
    by power profiles instead.
    
    Reviewed-by: Yi xin Zhu <yzhu@maxlinear.com>
    Signed-off-by: Rahul Tanwar <rtanwar@maxlinear.com>
    Link: https://lore.kernel.org/r/bdc9c89317b5d338a6c4f1d49386b696e947a672.1665642720.git.rtanwar@maxlinear.com
    [sboyd@kernel.org: Add braces on many line if-else]
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Stable-dep-of: 106ef3bda210 ("clk: mxl: Fix a clk entry by adding relevant flags")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef12191151285d5618a6875515489ed3cfca564d
Author: Rahul Tanwar <rtanwar@maxlinear.com>
Date:   Thu Oct 13 14:48:31 2022 +0800

    clk: mxl: Remove redundant spinlocks
    
    [ Upstream commit eaabee88a88a26b108be8d120fc072dfaf462cef ]
    
    Patch 1/4 of this patch series switches from direct readl/writel
    based register access to regmap based register access. Instead
    of using direct readl/writel, regmap API's are used to read, write
    & read-modify-write clk registers. Regmap API's already use their
    own spinlocks to serialize the register accesses across multiple
    cores in which case additional driver spinlocks becomes redundant.
    
    Hence, remove redundant spinlocks from driver in this patch 2/4.
    
    Reviewed-by: Yi xin Zhu <yzhu@maxlinear.com>
    Signed-off-by: Rahul Tanwar <rtanwar@maxlinear.com>
    Link: https://lore.kernel.org/r/a8a02c8773b88924503a9fdaacd37dd2e6488bf3.1665642720.git.rtanwar@maxlinear.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Stable-dep-of: 106ef3bda210 ("clk: mxl: Fix a clk entry by adding relevant flags")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5580a80547244189589604c28f3c1471b0b6d03
Author: Rahul Tanwar <rtanwar@maxlinear.com>
Date:   Thu Oct 13 14:48:30 2022 +0800

    clk: mxl: Switch from direct readl/writel based IO to regmap based IO
    
    [ Upstream commit 036177310bac5534de44ff6a7b60a4d2c0b6567c ]
    
    Earlier version of driver used direct io remapped register read
    writes using readl/writel. But we need secure boot access which
    is only possible when registers are read & written using regmap.
    This is because the security bus/hook is written & coupled only
    with regmap layer.
    
    Switch the driver from direct readl/writel based register accesses
    to regmap based register accesses.
    
    Additionally, update the license headers to latest status.
    
    Reviewed-by: Yi xin Zhu <yzhu@maxlinear.com>
    Signed-off-by: Rahul Tanwar <rtanwar@maxlinear.com>
    Link: https://lore.kernel.org/r/2610331918206e0e3bd18babb39393a558fb34f9.1665642720.git.rtanwar@maxlinear.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Stable-dep-of: 106ef3bda210 ("clk: mxl: Fix a clk entry by adding relevant flags")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20ea32ad9c999f5a43d3f8211546bf8ece36d587
Author: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
Date:   Fri Sep 16 15:35:48 2022 +0530

    drm/edid: Fix minimum bpc supported with DSC1.2 for HDMI sink
    
    [ Upstream commit 18feaf6d0784dcba888859109676adf1e0260dfd ]
    
    HF-VSDB/SCDB has bits to advertise support for 16, 12 and 10 bpc.
    If none of the bits are set, the minimum bpc supported with DSC is 8.
    
    This patch corrects the min bpc supported to be 8, instead of 0.
    
    Fixes: 76ee7b905678 ("drm/edid: Parse DSC1.2 cap fields from HFVSDB block")
    Cc: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
    Cc: Uma Shankar <uma.shankar@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    
    v2: s/DSC1.2/DSC 1.2
    
    Signed-off-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220916100551.2531750-2-ankit.k.nautiyal@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28985cd17ac73bc2d5d82d5cb28007764c9ad123
Author: Bitterblue Smith <rtl8821cerfe2@gmail.com>
Date:   Wed Sep 28 23:36:51 2022 +0300

    wifi: rtl8xxxu: gen2: Turn on the rate control
    
    [ Upstream commit 791082ec0ab843e0be07c8ce3678e4c2afd2e33d ]
    
    Re-enable the function rtl8xxxu_gen2_report_connect.
    
    It informs the firmware when connecting to a network. This makes the
    firmware enable the rate control, which makes the upload faster.
    
    It also informs the firmware when disconnecting from a network. In the
    past this made reconnecting impossible because it was sending the
    auth on queue 0x7 (TXDESC_QUEUE_VO) instead of queue 0x12
    (TXDESC_QUEUE_MGNT):
    
    wlp0s20f0u3: send auth to 90:55:de:__:__:__ (try 1/3)
    wlp0s20f0u3: send auth to 90:55:de:__:__:__ (try 2/3)
    wlp0s20f0u3: send auth to 90:55:de:__:__:__ (try 3/3)
    wlp0s20f0u3: authentication with 90:55:de:__:__:__ timed out
    
    Probably the firmware disables the unnecessary TX queues when it
    knows it's disconnected.
    
    However, this was fixed in commit edd5747aa12e ("wifi: rtl8xxxu: Fix
    skb misuse in TX queue selection").
    
    Fixes: c59f13bbead4 ("rtl8xxxu: Work around issue with 8192eu and 8723bu devices not reconnecting")
    Signed-off-by: Bitterblue Smith <rtl8821cerfe2@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/43200afc-0c65-ee72-48f8-231edd1df493@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d04d19cf0ead59d2f99cdd86ee6ad46bac8edb81
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Fri Sep 16 12:40:31 2022 +0200

    drm/etnaviv: don't truncate physical page address
    
    [ Upstream commit d37c120b73128690434cc093952439eef9d56af1 ]
    
    While the interface for the MMU mapping takes phys_addr_t to hold a
    full 64bit address when necessary and MMUv2 is able to map physical
    addresses with up to 40bit, etnaviv_iommu_map() truncates the address
    to 32bits. Fix this by using the correct type.
    
    Fixes: 931e97f3afd8 ("drm/etnaviv: mmuv2: support 40 bit phys address")
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

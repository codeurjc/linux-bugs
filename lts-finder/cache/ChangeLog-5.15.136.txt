commit 00c03985402ee5e9dffa643f45b9291274bf4070
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 19 23:05:39 2023 +0200

    Linux 5.15.136
    
    Link: https://lore.kernel.org/r/20231016083953.689300946@linuxfoundation.org
    Tested-by: Ricardo B. Marliere <ricardo@marliere.net>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5266b5b6e975bfa37202f7565d6c4e828a4123d4
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Apr 29 10:43:30 2022 -0700

    eth: remove remaining copies of the NAPI_POLL_WEIGHT define
    
    commit 36ffca1afea9b429d3e49aa0b6a68ecd93f3be11 upstream.
    
    Defining local versions of NAPI_POLL_WEIGHT with the same
    values in the drivers just makes refactoring harder.
    
    This patch covers three more drivers which I missed in
    commit 5f012b40ef63 ("eth: remove copies of the NAPI_POLL_WEIGHT define").
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 528f0ba9f7a4bc1b61c9b6eb591ff97ca37cac6b
Author: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
Date:   Wed Aug 30 12:04:18 2023 +0200

    usb: hub: Guard against accesses to uninitialized BOS descriptors
    
    commit f74a7afc224acd5e922c7a2e52244d891bbe44ee upstream.
    
    Many functions in drivers/usb/core/hub.c and drivers/usb/core/hub.h
    access fields inside udev->bos without checking if it was allocated and
    initialized. If usb_get_bos_descriptor() fails for whatever
    reason, udev->bos will be NULL and those accesses will result in a
    crash:
    
    BUG: kernel NULL pointer dereference, address: 0000000000000018
    PGD 0 P4D 0
    Oops: 0000 [#1] PREEMPT SMP NOPTI
    CPU: 5 PID: 17818 Comm: kworker/5:1 Tainted: G W 5.15.108-18910-gab0e1cb584e1 #1 <HASH:1f9e 1>
    Hardware name: Google Kindred/Kindred, BIOS Google_Kindred.12672.413.0 02/03/2021
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:hub_port_reset+0x193/0x788
    Code: 89 f7 e8 20 f7 15 00 48 8b 43 08 80 b8 96 03 00 00 03 75 36 0f b7 88 92 03 00 00 81 f9 10 03 00 00 72 27 48 8b 80 a8 03 00 00 <48> 83 78 18 00 74 19 48 89 df 48 8b 75 b0 ba 02 00 00 00 4c 89 e9
    RSP: 0018:ffffab740c53fcf8 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: ffffa1bc5f678000 RCX: 0000000000000310
    RDX: fffffffffffffdff RSI: 0000000000000286 RDI: ffffa1be9655b840
    RBP: ffffab740c53fd70 R08: 00001b7d5edaa20c R09: ffffffffb005e060
    R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000
    R13: ffffab740c53fd3e R14: 0000000000000032 R15: 0000000000000000
    FS: 0000000000000000(0000) GS:ffffa1be96540000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000018 CR3: 000000022e80c005 CR4: 00000000003706e0
    Call Trace:
    hub_event+0x73f/0x156e
    ? hub_activate+0x5b7/0x68f
    process_one_work+0x1a2/0x487
    worker_thread+0x11a/0x288
    kthread+0x13a/0x152
    ? process_one_work+0x487/0x487
    ? kthread_associate_blkcg+0x70/0x70
    ret_from_fork+0x1f/0x30
    
    Fall back to a default behavior if the BOS descriptor isn't accessible
    and skip all the functionalities that depend on it: LPM support checks,
    Super Speed capabilitiy checks, U1/U2 states setup.
    
    Signed-off-by: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230830100418.1952143-1-ricardo.canuelo@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 542a3f1a3cc19d971fdcc7fafd1ef19041508cfd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Oct 16 10:05:03 2023 +0200

    Revert "kernel/sched: Modify initial boot task idle setup"
    
    This reverts commit 3569ad59664f9fa3ba1d02a78810773b7f49702b which is
    commit cff9b2332ab762b7e0586c793c431a8f2ea4db04 upstream.
    
    Joel writes:
            Let us drop this patch because it caused new tasks-RCU warnings (both
            normal and rude tasks RCU) in my stable test rig. We are discussing
            the "right fix" and at that time a backport can be done.
    
    Reported-by: Joel Fernandes <joel@joelfernandes.org>
    Link: https://lore.kernel.org/r/CAEXW_YT6bH70M1TF2TttB-_kP=RUv_1nsy_sHYi6_0oCrX3mVQ@mail.gmail.com
    Cc: Liam R. Howlett <Liam.Howlett@oracle.com>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 737ce5518a9cdfce3b18e3be51da6bc5e7ee2bf7
Author: Ren Zhijie <renzhijie2@huawei.com>
Date:   Wed Oct 11 10:06:55 2023 +0000

    arm64: armv8_deprecated: fix unused-function error
    
    commit 223d3a0d30b6e9f979f5642e430e1753d3e29f89 upstream.
    
    If CONFIG_SWP_EMULATION is not set and
    CONFIG_CP15_BARRIER_EMULATION is not set,
    aarch64-linux-gnu complained about unused-function :
    
    arch/arm64/kernel/armv8_deprecated.c:67:21: error: ‘aarch32_check_condition’ defined but not used [-Werror=unused-function]
     static unsigned int aarch32_check_condition(u32 opcode, u32 psr)
                         ^~~~~~~~~~~~~~~~~~~~~~~
    cc1: all warnings being treated as errors
    
    To fix this warning, modify aarch32_check_condition() with __maybe_unused.
    
    Fixes: 0c5f416219da ("arm64: armv8_deprecated: move aarch32 helper earlier")
    Signed-off-by: Ren Zhijie <renzhijie2@huawei.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/20221124022429.19024-1-renzhijie2@huawei.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e10931e2d77d9993c56f4ca13421f5bd4a358bf
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:54 2023 +0000

    arm64: armv8_deprecated: rework deprected instruction handling
    
    commit 124c49b1b5d947b7180c5d6cbb09ddf76ea45ea2 upstream.
    
    Support for deprecated instructions can be enabled or disabled at
    runtime. To handle this, the code in armv8_deprecated.c registers and
    unregisters undef_hooks, and makes cross CPU calls to configure HW
    support. This is rather complicated, and the synchronization required to
    make this safe ends up serializing the handling of instructions which
    have been trapped.
    
    This patch simplifies the deprecated instruction handling by removing
    the dynamic registration and unregistration, and changing the trap
    handling code to determine whether a handler should be invoked. This
    removes the need for dynamic list management, and simplifies the locking
    requirements, making it possible to handle trapped instructions entirely
    in parallel.
    
    Where changing the emulation state requires a cross-call, this is
    serialized by locally disabling interrupts, ensuring that the CPU is not
    left in an inconsistent state.
    
    To simplify sysctl management, each insn_emulation is given a separate
    sysctl table, permitting these to be registered separately. The core
    sysctl code will iterate over all of these when walking sysfs.
    
    I've tested this with userspace programs which use each of the
    deprecated instructions, and I've concurrently modified the support
    level for each of the features back-and-forth between HW and emulated to
    check that there are no spurious SIGILLs sent to userspace when the
    support level is changed.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-10-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abd4aa08190587b4c9d864d088cfa30844e55797
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:53 2023 +0000

    arm64: armv8_deprecated: move aarch32 helper earlier
    
    commit 0c5f416219da3795dc8b33e5bb7865a6b3c4e55c upstream.
    
    Subsequent patches will rework the logic in armv8_deprecated.c.
    
    In preparation for subsequent changes, this patch moves some shared logic
    earlier in the file. This will make subsequent diffs simpler and easier to
    read.
    
    At the same time, drop the `__kprobes` annotation from
    aarch32_check_condition(), as this is only used for traps from compat
    userspace, and has no risk of recursion within kprobes. As this is the
    last kprobes annotation in armve8_deprecated.c, we no longer need to
    include <asm/kprobes.h>.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-9-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f10abdb04c3da96b2a93106737176a7022ec533f
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:52 2023 +0000

    arm64: armv8_deprecated move emulation functions
    
    commit 25eeac0cfe7c97ade1be07340e11e7143aab57a6 upstream.
    
    Subsequent patches will rework the logic in armv8_deprecated.c.
    
    In preparation for subsequent changes, this patch moves the emulation
    logic earlier in the file, and moves the infrastructure later in the
    file. This will make subsequent diffs simpler and easier to read.
    
    This is purely a move. There should be no functional change as a result
    of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-8-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b4eec015fa5b96b3a7851e087b39e4a7d0446bc
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:51 2023 +0000

    arm64: armv8_deprecated: fold ops into insn_emulation
    
    commit b4453cc8a7ebbd45436a8cd3ffeaa069ceac146f upstream.
    
    The code for emulating deprecated instructions has two related
    structures: struct insn_emulation_ops and struct insn_emulation, where
    each struct insn_emulation_ops is associated 1-1 with a struct
    insn_emulation.
    
    It would be simpler to combine the two into a single structure, removing
    the need for (unconditional) dynamic allocation at boot time, and
    simplifying some runtime pointer chasing.
    
    This patch merges the two structures together.
    
    There should be no functional change as a result of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-7-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8d2910be6f8b9286fe81caa953cb7c65e574db0
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:50 2023 +0000

    arm64: rework EL0 MRS emulation
    
    commit f5962add74b61f8ae31c6311f75ca35d7e1d2d8f upstream.
    
    On CPUs without FEAT_IDST, ID register emulation is slower than it needs
    to be, as all threads contend for the same lock to perform the
    emulation. This patch reworks the emulation to avoid this unnecessary
    contention.
    
    On CPUs with FEAT_IDST (which is mandatory from ARMv8.4 onwards), EL0
    accesses to ID registers result in a SYS trap, and emulation of these is
    handled with a sys64_hook. These hooks are statically allocated, and no
    locking is required to iterate through the hooks and perform the
    emulation, allowing emulation to occur in parallel with no contention.
    
    On CPUs without FEAT_IDST, EL0 accesses to ID registers result in an
    UNDEFINED exception, and emulation of these accesses is handled with an
    undef_hook. When an EL0 MRS instruction is trapped to EL1, the kernel
    finds the relevant handler by iterating through all of the undef_hooks,
    requiring undef_lock to be held during this lookup.
    
    This locking is only required to safely traverse the list of undef_hooks
    (as it can be concurrently modified), and the actual emulation of the
    MRS does not require any mutual exclusion. This locking is an
    unfortunate bottleneck, especially given that MRS emulation is enabled
    unconditionally and is never disabled.
    
    This patch reworks the non-FEAT_IDST MRS emulation logic so that it can
    be invoked directly from do_el0_undef(). This removes the bottleneck,
    allowing MRS traps to be handled entirely in parallel, and is a stepping
    stone to making all of the undef_hooks lock-free.
    
    I've tested this in a 64-vCPU VM on a 64-CPU ThunderX2 host, with a
    benchmark which spawns a number of threads which each try to read
    ID_AA64ISAR0_EL1 1000000 times. This is vastly more contention than will
    ever be seen in realistic usage, but clearly demonstrates the removal of
    the bottleneck:
    
      | Threads || Time (seconds)                       |
      |         || Before           || After            |
      |         || Real   | System  || Real   | System  |
      |---------++--------+---------++--------+---------|
      |       1 ||   0.29 |    0.20 ||   0.24 |    0.12 |
      |       2 ||   0.35 |    0.51 ||   0.23 |    0.27 |
      |       4 ||   1.08 |    3.87 ||   0.24 |    0.56 |
      |       8 ||   4.31 |   33.60 ||   0.24 |    1.11 |
      |      16 ||   9.47 |  149.39 ||   0.23 |    2.15 |
      |      32 ||  19.07 |  605.27 ||   0.24 |    4.38 |
      |      64 ||  65.40 | 3609.09 ||   0.33 |   11.27 |
    
    Aside from the speedup, there should be no functional change as a result
    of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-6-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 057f9123b1a855e07826358a1ea8096569e5773c
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:49 2023 +0000

    arm64: factor insn read out of call_undef_hook()
    
    commit dbfbd87efa79575491af0ba1a87bf567eaea6cae upstream.
    
    Subsequent patches will rework EL0 UNDEF handling, removing the need for
    struct undef_hook and call_undef_hook. In preparation for those changes,
    this patch factors the logic for reading user instructions out of
    call_undef_hook() and into a new user_insn_read() helper, matching the
    style of the existing aarch64_insn_read() helper used for reading kernel
    instructions.
    
    There should be no functional change as a result of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-5-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f82927cabaf09c2677c535da7d0f84d1fa798a7
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:48 2023 +0000

    arm64: factor out EL1 SSBS emulation hook
    
    commit bff8f413c71ffc3cb679dbd9a5632b33af563f9f upstream.
    
    Currently call_undef_hook() is used to handle UNDEFINED exceptions from
    EL0 and EL1. As support for deprecated instructions may be enabled
    independently, the handlers for individual instructions are organised as
    a linked list of struct undef_hook which can be manipulated dynamically.
    As this can be manipulated dynamically, the list is protected with a
    raw_spinlock which must be acquired when handling UNDEFINED exceptions
    or when manipulating the list of handlers.
    
    This locking is unfortunate as it serialises handling of UNDEFINED
    exceptions, and requires RCU to be enabled for lockdep, requiring the
    use of RCU_NONIDLE() in resume path of cpu_suspend() since commit:
    
      a2c42bbabbe260b7 ("arm64: spectre: Prevent lockdep splat on v4 mitigation enable path")
    
    The list of UNDEFINED handlers largely consist of handlers for
    exceptions taken from EL0, and the only handler for exceptions taken
    from EL1 handles `MSR SSBS, #imm` on CPUs which feature PSTATE.SSBS but
    lack the corresponding MSR (Immediate) instruction. Other than this we
    never expect to take an UNDEFINED exception from EL1 in normal
    operation.
    
    This patch reworks do_el0_undef() to invoke the EL1 SSBS handler
    directly, relegating call_undef_hook() to only handle EL0 UNDEFs. This
    removes redundant work to iterate the list for EL1 UNDEFs, and removes
    the need for locking, permitting EL1 UNDEFs to be handled in parallel
    without contention.
    
    The RCU_NONIDLE() call in cpu_suspend() will be removed in a subsequent
    patch, as there are other potential issues with the use of
    instrumentable code and RCU in the CPU suspend code.
    
    I've tested this by forcing the detection of SSBS on a CPU that doesn't
    have it, and verifying that the try_emulate_el1_ssbs() callback is
    invoked.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-4-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 474385adcd8443c8e926dce20afac95e9feb9bf7
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:47 2023 +0000

    arm64: split EL0/EL1 UNDEF handlers
    
    commit 61d64a376ea80f9097e7ea599bcd68671b836dc6 upstream.
    
    In general, exceptions taken from EL1 need to be handled separately from
    exceptions taken from EL0, as the logic to handle the two cases can be
    significantly divergent, and exceptions taken from EL1 typically have
    more stringent requirements on locking and instrumentation.
    
    Subsequent patches will rework the way EL1 UNDEFs are handled in order
    to address longstanding soundness issues with instrumentation and RCU.
    In preparation for that rework, this patch splits the existing
    do_undefinstr() handler into separate do_el0_undef() and do_el1_undef()
    handlers.
    
    Prior to this patch, do_undefinstr() was marked with NOKPROBE_SYMBOL(),
    preventing instrumentation via kprobes. However, do_undefinstr() invokes
    other code which can be instrumented, and:
    
    * For UNDEFINED exceptions taken from EL0, there is no risk of recursion
      within kprobes. Therefore it is safe for do_el0_undef to be
      instrumented with kprobes, and it does not need to be marked with
      NOKPROBE_SYMBOL().
    
    * For UNDEFINED exceptions taken from EL1, either:
    
      (a) The exception is has been taken when manipulating SSBS; these cases
          are limited and do not occur within code that can be invoked
          recursively via kprobes. Hence, in these cases instrumentation
          with kprobes is benign.
    
      (b) The exception has been taken for an unknown reason, as other than
          manipulating SSBS we do not expect to take UNDEFINED exceptions
          from EL1. Any handling of these exception is best-effort.
    
      ... and in either case, marking do_el1_undef() with NOKPROBE_SYMBOL()
      isn't sufficient to prevent recursion via kprobes as functions it
      calls (including die()) are instrumentable via kprobes.
    
      Hence, it's not worthwhile to mark do_el1_undef() with
      NOKPROBE_SYMBOL(). The same applies to do_el1_bti() and do_el1_fpac(),
      so their NOKPROBE_SYMBOL() annotations are also removed.
    
    Aside from the new instrumentability, there should be no functional
    change as a result of this patch.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-3-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de0358635401559e63acfa19869efce3e39a0811
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:46 2023 +0000

    arm64: allow kprobes on EL0 handlers
    
    commit b3a0c010e900a9f89dcd99f10bd8f7538d21b0a9 upstream.
    
    Currently do_sysinstr() and do_cp15instr() are marked with
    NOKPROBE_SYMBOL(). However, these are only called for exceptions taken
    from EL0, and there is no risk of recursion in kprobes, so this is not
    necessary.
    
    Remove the NOKPROBE_SYMBOL() annotation, and rename the two functions to
    more clearly indicate that these are solely for exceptions taken from
    EL0, better matching the names used by the lower level entry points in
    entry-common.c.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Joey Gouly <joey.gouly@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20221019144123.612388-2-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7154e2db889015b35ae4f06e7527e6808db72a0e
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:45 2023 +0000

    arm64: rework BTI exception handling
    
    commit 830a2a4d853f2c4a1e4606aa03341b7f273b0e9b upstream.
    
    If a BTI exception is taken from EL1, the entry code will treat this as
    an unhandled exception and will panic() the kernel. This is inconsistent
    with the way we handle FPAC exceptions, which have a dedicated handler
    and only necessarily kill the thread from which the exception was taken
    from, and we don't log all the information that could be relevant to
    debug the issue.
    
    The code in do_bti() has:
    
            BUG_ON(!user_mode(regs));
    
    ... and it seems like the intent was to call this for EL1 BTI
    exceptions, as with FPAC, but this was omitted due to an oversight.
    
    This patch adds separate EL0 and EL1 BTI exception handlers, with the
    latter calling die() directly to report the original context the BTI
    exception was taken from. This matches our handling of FPAC exceptions.
    
    Prior to this patch, a BTI failure is reported as:
    
    | Unhandled 64-bit el1h sync exception on CPU0, ESR 0x0000000034000002 -- BTI
    | CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.19.0-rc3-00131-g7d937ff0221d-dirty #9
    | Hardware name: linux,dummy-virt (DT)
    | pstate: 20400809 (nzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=-c)
    | pc : test_bti_callee+0x4/0x10
    | lr : test_bti_caller+0x1c/0x28
    | sp : ffff80000800bdf0
    | x29: ffff80000800bdf0 x28: 0000000000000000 x27: 0000000000000000
    | x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000
    | x23: ffff80000a2b8000 x22: 0000000000000000 x21: 0000000000000000
    | x20: ffff8000099fa5b0 x19: ffff800009ff7000 x18: fffffbfffda37000
    | x17: 3120676e696d7573 x16: 7361202c6e6f6974 x15: 0000000041a90000
    | x14: 0040000000000041 x13: 0040000000000001 x12: ffff000001a90000
    | x11: fffffbfffda37480 x10: 0068000000000703 x9 : 0001000040000000
    | x8 : 0000000000090000 x7 : 0068000000000f03 x6 : 0060000000000f83
    | x5 : ffff80000a2b6000 x4 : ffff0000028d0000 x3 : ffff800009f78378
    | x2 : 0000000000000000 x1 : 0000000040210000 x0 : ffff8000080257e4
    | Kernel panic - not syncing: Unhandled exception
    | CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.19.0-rc3-00131-g7d937ff0221d-dirty #9
    | Hardware name: linux,dummy-virt (DT)
    | Call trace:
    |  dump_backtrace.part.0+0xcc/0xe0
    |  show_stack+0x18/0x5c
    |  dump_stack_lvl+0x64/0x80
    |  dump_stack+0x18/0x34
    |  panic+0x170/0x360
    |  arm64_exit_nmi.isra.0+0x0/0x80
    |  el1h_64_sync_handler+0x64/0xd0
    |  el1h_64_sync+0x64/0x68
    |  test_bti_callee+0x4/0x10
    |  smp_cpus_done+0xb0/0xbc
    |  smp_init+0x7c/0x8c
    |  kernel_init_freeable+0x128/0x28c
    |  kernel_init+0x28/0x13c
    |  ret_from_fork+0x10/0x20
    
    With this patch applied, a BTI failure is reported as:
    
    | Internal error: Oops - BTI: 0000000034000002 [#1] PREEMPT SMP
    | Modules linked in:
    | CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.19.0-rc3-00132-g0ad98265d582-dirty #8
    | Hardware name: linux,dummy-virt (DT)
    | pstate: 20400809 (nzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=-c)
    | pc : test_bti_callee+0x4/0x10
    | lr : test_bti_caller+0x1c/0x28
    | sp : ffff80000800bdf0
    | x29: ffff80000800bdf0 x28: 0000000000000000 x27: 0000000000000000
    | x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000
    | x23: ffff80000a2b8000 x22: 0000000000000000 x21: 0000000000000000
    | x20: ffff8000099fa5b0 x19: ffff800009ff7000 x18: fffffbfffda37000
    | x17: 3120676e696d7573 x16: 7361202c6e6f6974 x15: 0000000041a90000
    | x14: 0040000000000041 x13: 0040000000000001 x12: ffff000001a90000
    | x11: fffffbfffda37480 x10: 0068000000000703 x9 : 0001000040000000
    | x8 : 0000000000090000 x7 : 0068000000000f03 x6 : 0060000000000f83
    | x5 : ffff80000a2b6000 x4 : ffff0000028d0000 x3 : ffff800009f78378
    | x2 : 0000000000000000 x1 : 0000000040210000 x0 : ffff800008025804
    | Call trace:
    |  test_bti_callee+0x4/0x10
    |  smp_cpus_done+0xb0/0xbc
    |  smp_init+0x7c/0x8c
    |  kernel_init_freeable+0x128/0x28c
    |  kernel_init+0x28/0x13c
    |  ret_from_fork+0x10/0x20
    | Code: d50323bf d53cd040 d65f03c0 d503233f (d50323bf)
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20220913101732.3925290-6-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd5ceadc2b3736de09887395ce035a81bb17e3c7
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:44 2023 +0000

    arm64: rework FPAC exception handling
    
    commit a1fafa3b24a70461bbf3e5c0770893feb0a49292 upstream.
    
    If an FPAC exception is taken from EL1, the entry code will call
    do_ptrauth_fault(), where due to:
    
            BUG_ON(!user_mode(regs))
    
    ... the kernel will report a problem within do_ptrauth_fault() rather
    than reporting the original context the FPAC exception was taken from.
    The pt_regs and ESR value reported will be from within
    do_ptrauth_fault() and the code dump will be for the BRK in BUG_ON(),
    which isn't sufficient to debug the cause of the original exception.
    
    This patch makes the reporting better by having separate EL0 and EL1
    FPAC exception handlers, with the latter calling die() directly to
    report the original context the FPAC exception was taken from.
    
    Note that we only need to prevent kprobes of the EL1 FPAC handler, since
    the EL0 FPAC handler cannot be called recursively.
    
    For consistency with do_el0_svc*(), I've named the split functions
    do_el{0,1}_fpac() rather than do_el{0,1}_ptrauth_fault(). I've also
    clarified the comment to not imply there are casues other than FPAC
    exceptions.
    
    Prior to this patch FPAC exceptions are reported as:
    
    | kernel BUG at arch/arm64/kernel/traps.c:517!
    | Internal error: Oops - BUG: 00000000f2000800 [#1] PREEMPT SMP
    | Modules linked in:
    | CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.19.0-rc3-00130-g9c8a180a1cdf-dirty #12
    | Hardware name: FVP Base RevC (DT)
    | pstate: 00400009 (nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    | pc : do_ptrauth_fault+0x3c/0x40
    | lr : el1_fpac+0x34/0x54
    | sp : ffff80000a3bbc80
    | x29: ffff80000a3bbc80 x28: ffff0008001d8000 x27: 0000000000000000
    | x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000
    | x23: 0000000020400009 x22: ffff800008f70fa4 x21: ffff80000a3bbe00
    | x20: 0000000072000000 x19: ffff80000a3bbcb0 x18: fffffbfffda37000
    | x17: 3120676e696d7573 x16: 7361202c6e6f6974 x15: 0000000081a90000
    | x14: 0040000000000041 x13: 0040000000000001 x12: ffff000001a90000
    | x11: fffffbfffda37480 x10: 0068000000000703 x9 : 0001000080000000
    | x8 : 0000000000090000 x7 : 0068000000000f03 x6 : 0060000000000783
    | x5 : ffff80000a3bbcb0 x4 : ffff0008001d8000 x3 : 0000000072000000
    | x2 : 0000000000000000 x1 : 0000000020400009 x0 : ffff80000a3bbcb0
    | Call trace:
    |  do_ptrauth_fault+0x3c/0x40
    |  el1h_64_sync_handler+0xc4/0xd0
    |  el1h_64_sync+0x64/0x68
    |  test_pac+0x8/0x10
    |  smp_init+0x7c/0x8c
    |  kernel_init_freeable+0x128/0x28c
    |  kernel_init+0x28/0x13c
    |  ret_from_fork+0x10/0x20
    | Code: 97fffe5e a8c17bfd d50323bf d65f03c0 (d4210000)
    
    With this patch applied FPAC exceptions are reported as:
    
    | Internal error: Oops - FPAC: 0000000072000000 [#1] PREEMPT SMP
    | Modules linked in:
    | CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.19.0-rc3-00132-g78846e1c4757-dirty #11
    | Hardware name: FVP Base RevC (DT)
    | pstate: 20400009 (nzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    | pc : test_pac+0x8/0x10
    | lr : 0x0
    | sp : ffff80000a3bbe00
    | x29: ffff80000a3bbe00 x28: 0000000000000000 x27: 0000000000000000
    | x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000
    | x23: ffff80000a2c8000 x22: 0000000000000000 x21: 0000000000000000
    | x20: ffff8000099fa5b0 x19: ffff80000a007000 x18: fffffbfffda37000
    | x17: 3120676e696d7573 x16: 7361202c6e6f6974 x15: 0000000081a90000
    | x14: 0040000000000041 x13: 0040000000000001 x12: ffff000001a90000
    | x11: fffffbfffda37480 x10: 0068000000000703 x9 : 0001000080000000
    | x8 : 0000000000090000 x7 : 0068000000000f03 x6 : 0060000000000783
    | x5 : ffff80000a2c6000 x4 : ffff0008001d8000 x3 : ffff800009f88378
    | x2 : 0000000000000000 x1 : 0000000080210000 x0 : ffff000001a90000
    | Call trace:
    |  test_pac+0x8/0x10
    |  smp_init+0x7c/0x8c
    |  kernel_init_freeable+0x128/0x28c
    |  kernel_init+0x28/0x13c
    |  ret_from_fork+0x10/0x20
    | Code: d50323bf d65f03c0 d503233f aa1f03fe (d50323bf)
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20220913101732.3925290-5-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6358002fd0c185aedd06e99196352ed23d2bca6
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:43 2023 +0000

    arm64: consistently pass ESR_ELx to die()
    
    commit 0f2cb928a1547ae8f89e80a4b8df2c6c02ae5f96 upstream.
    
    Currently, bug_handler() and kasan_handler() call die() with '0' as the
    'err' value, whereas die_kernel_fault() passes the ESR_ELx value.
    
    For consistency, this patch ensures we always pass the ESR_ELx value to
    die(). As this is only called for exceptions taken from kernel mode,
    there should be no user-visible change as a result of this patch.
    
    For UNDEFINED exceptions, I've had to modify do_undefinstr() and its
    callers to pass the ESR_ELx value. In all cases the ESR_ELx value had
    already been read and was available.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20220913101732.3925290-4-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ddb1ef2bb423b4aa92beba103aab776cf95394b
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:42 2023 +0000

    arm64: die(): pass 'err' as long
    
    commit 18906ff9af6517c20763ed63dab602a4150794f7 upstream.
    
    Recently, we reworked a lot of code to consistentlt pass ESR_ELx as a
    64-bit quantity. However, we missed that this can be passed into die()
    and __die() as the 'err' parameter where it is truncated to a 32-bit
    int.
    
    As notify_die() already takes 'err' as a long, this patch changes die()
    and __die() to also take 'err' as a long, ensuring that the full value
    of ESR_ELx is retained.
    
    At the same time, die() is updated to consistently log 'err' as a
    zero-padded 64-bit quantity.
    
    Subsequent patches will pass the ESR_ELx value to die() for a number of
    exceptions.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20220913101732.3925290-3-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a3e177ef5706628c477c2caf9510495203fc657
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Oct 11 10:06:41 2023 +0000

    arm64: report EL1 UNDEFs better
    
    commit b502c87d2a26c349acbc231ff2acd6f17147926b upstream.
    
    If an UNDEFINED exception is taken from EL1, and do_undefinstr() doesn't
    find any suitable undef_hook, it will call:
    
            BUG_ON(!user_mode(regs))
    
    ... and the kernel will report a failure witin do_undefinstr() rather
    than reporting the original context that the UNDEFINED exception was
    taken from. The pt_regs and ESR value reported within the BUG() handler
    will be from within do_undefinstr() and the code dump will be for the
    BRK in BUG_ON(), which isn't sufficient to debug the cause of the
    original exception.
    
    This patch makes the reporting better by having do_undefinstr() call
    die() directly in this case to report the original context from which
    the UNDEFINED exception was taken.
    
    Prior to this patch, an undefined instruction is reported as:
    
    | kernel BUG at arch/arm64/kernel/traps.c:497!
    | Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    | Modules linked in:
    | CPU: 0 PID: 0 Comm: swapper Not tainted 5.19.0-rc3-00127-geff044f1b04e-dirty #3
    | Hardware name: linux,dummy-virt (DT)
    | pstate: 000000c5 (nzcv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    | pc : do_undefinstr+0x28c/0x2ac
    | lr : do_undefinstr+0x298/0x2ac
    | sp : ffff800009f63bc0
    | x29: ffff800009f63bc0 x28: ffff800009f73c00 x27: ffff800009644a70
    | x26: ffff8000096778a8 x25: 0000000000000040 x24: 0000000000000000
    | x23: 00000000800000c5 x22: ffff800009894060 x21: ffff800009f63d90
    | x20: 0000000000000000 x19: ffff800009f63c40 x18: 0000000000000006
    | x17: 0000000000403000 x16: 00000000bfbfd000 x15: ffff800009f63830
    | x14: ffffffffffffffff x13: 0000000000000000 x12: 0000000000000019
    | x11: 0101010101010101 x10: 0000000000161b98 x9 : 0000000000000000
    | x8 : 0000000000000000 x7 : 0000000000000000 x6 : 0000000000000000
    | x5 : ffff800009f761d0 x4 : 0000000000000000 x3 : ffff80000a2b80f8
    | x2 : 0000000000000000 x1 : ffff800009f73c00 x0 : 00000000800000c5
    | Call trace:
    |  do_undefinstr+0x28c/0x2ac
    |  el1_undef+0x2c/0x4c
    |  el1h_64_sync_handler+0x84/0xd0
    |  el1h_64_sync+0x64/0x68
    |  setup_arch+0x550/0x598
    |  start_kernel+0x88/0x6ac
    |  __primary_switched+0xb8/0xc0
    | Code: 17ffff95 a9425bf5 17ffffb8 a9025bf5 (d4210000)
    
    With this patch applied, an undefined instruction is reported as:
    
    | Internal error: Oops - Undefined instruction: 0 [#1] PREEMPT SMP
    | Modules linked in:
    | CPU: 0 PID: 0 Comm: swapper Not tainted 5.19.0-rc3-00128-gf27cfcc80e52-dirty #5
    | Hardware name: linux,dummy-virt (DT)
    | pstate: 800000c5 (Nzcv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    | pc : setup_arch+0x550/0x598
    | lr : setup_arch+0x50c/0x598
    | sp : ffff800009f63d90
    | x29: ffff800009f63d90 x28: 0000000081000200 x27: ffff800009644a70
    | x26: ffff8000096778c8 x25: 0000000000000040 x24: 0000000000000000
    | x23: 0000000000000100 x22: ffff800009f69a58 x21: ffff80000a2b80b8
    | x20: 0000000000000000 x19: 0000000000000000 x18: 0000000000000006
    | x17: 0000000000403000 x16: 00000000bfbfd000 x15: ffff800009f63830
    | x14: ffffffffffffffff x13: 0000000000000000 x12: 0000000000000019
    | x11: 0101010101010101 x10: 0000000000161b98 x9 : 0000000000000000
    | x8 : 0000000000000000 x7 : 0000000000000000 x6 : 0000000000000000
    | x5 : 0000000000000008 x4 : 0000000000000010 x3 : 0000000000000000
    | x2 : 0000000000000000 x1 : 0000000000000000 x0 : 0000000000000000
    | Call trace:
    |  setup_arch+0x550/0x598
    |  start_kernel+0x88/0x6ac
    |  __primary_switched+0xb8/0xc0
    | Code: b4000080 90ffed80 912ac000 97db745f (00000000)
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Cc: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Link: https://lore.kernel.org/r/20220913101732.3925290-2-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Jinjie Ruan <ruanjinjie@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6808be3ff94428d1a5f340a2da5d15c0d9f9b66
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Sep 25 20:31:16 2023 +0200

    powerpc/64e: Fix wrong test in __ptep_test_and_clear_young()
    
    [ Upstream commit 5ea0bbaa32e8f54e9a57cfee4a3b8769b80be0d2 ]
    
    Commit 45201c879469 ("powerpc/nohash: Remove hash related code from
    nohash headers.") replaced:
    
      if ((pte_val(*ptep) & (_PAGE_ACCESSED | _PAGE_HASHPTE)) == 0)
            return 0;
    
    By:
    
      if (pte_young(*ptep))
            return 0;
    
    But it should be:
    
      if (!pte_young(*ptep))
            return 0;
    
    Fix it.
    
    Fixes: 45201c879469 ("powerpc/nohash: Remove hash related code from nohash headers.")
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/8bb7f06494e21adada724ede47a4c3d97e879d40.1695659959.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c0dc3e2c9960a4089d4d70be4eaff51e1223806
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Sep 25 20:31:15 2023 +0200

    powerpc/8xx: Fix pte_access_permitted() for PAGE_NONE
    
    [ Upstream commit 5d9cea8a552ee122e21fbd5a3c5d4eb85f648e06 ]
    
    On 8xx, PAGE_NONE is handled by setting _PAGE_NA instead of clearing
    _PAGE_USER.
    
    But then pte_user() returns 1 also for PAGE_NONE.
    
    As _PAGE_NA prevent reads, add a specific version of pte_read()
    that returns 0 when _PAGE_NA is set instead of always returning 1.
    
    Fixes: 351750331fc1 ("powerpc/mm: Introduce _PAGE_NA")
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/57bcfbe578e43123f9ed73e040229b80f1ad56ec.1695659959.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4da05eba66e6130b2a430089c2e5cd221a5be8b9
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Sun Aug 6 11:25:11 2023 +0800

    dmaengine: mediatek: Fix deadlock caused by synchronize_irq()
    
    [ Upstream commit 01f1ae2733e2bb4de92fefcea5fda847d92aede1 ]
    
    The synchronize_irq(c->irq) will not return until the IRQ handler
    mtk_uart_apdma_irq_handler() is completed. If the synchronize_irq()
    holds a spin_lock and waits the IRQ handler to complete, but the
    IRQ handler also needs the same spin_lock. The deadlock will happen.
    The process is shown below:
    
              cpu0                        cpu1
    mtk_uart_apdma_device_pause() | mtk_uart_apdma_irq_handler()
      spin_lock_irqsave()         |
                                  |   spin_lock_irqsave()
      //hold the lock to wait     |
      synchronize_irq()           |
    
    This patch reorders the synchronize_irq(c->irq) outside the spin_lock
    in order to mitigate the bug.
    
    Fixes: 9135408c3ace ("dmaengine: mediatek: Add MediaTek UART APDMA support")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Reviewed-by: Eugen Hristev <eugen.hristev@collabora.com>
    Link: https://lore.kernel.org/r/20230806032511.45263-1-duoming@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82f61b2d518761bdb307070bd9072996e11dd952
Author: Rex Zhang <rex.zhang@intel.com>
Date:   Sat Sep 16 14:06:19 2023 +0800

    dmaengine: idxd: use spin_lock_irqsave before wait_event_lock_irq
    
    [ Upstream commit c0409dd3d151f661e7e57b901a81a02565df163c ]
    
    In idxd_cmd_exec(), wait_event_lock_irq() explicitly calls
    spin_unlock_irq()/spin_lock_irq(). If the interrupt is on before entering
    wait_event_lock_irq(), it will become off status after
    wait_event_lock_irq() is called. Later, wait_for_completion() may go to
    sleep but irq is disabled. The scenario is warned in might_sleep().
    
    Fix it by using spin_lock_irqsave() instead of the primitive spin_lock()
    to save the irq status before entering wait_event_lock_irq() and using
    spin_unlock_irqrestore() instead of the primitive spin_unlock() to restore
    the irq status before entering wait_for_completion().
    
    Before the change:
    idxd_cmd_exec() {
    interrupt is on
    spin_lock()                        // interrupt is on
            wait_event_lock_irq()
                    spin_unlock_irq()  // interrupt is enabled
                    ...
                    spin_lock_irq()    // interrupt is disabled
    spin_unlock()                      // interrupt is still disabled
    wait_for_completion()              // report "BUG: sleeping function
                                       // called from invalid context...
                                       // in_atomic() irqs_disabled()"
    }
    
    After applying spin_lock_irqsave():
    idxd_cmd_exec() {
    interrupt is on
    spin_lock_irqsave()                // save the on state
                                       // interrupt is disabled
            wait_event_lock_irq()
                    spin_unlock_irq()  // interrupt is enabled
                    ...
                    spin_lock_irq()    // interrupt is disabled
    spin_unlock_irqrestore()           // interrupt is restored to on
    wait_for_completion()              // No Call trace
    }
    
    Fixes: f9f4082dbc56 ("dmaengine: idxd: remove interrupt disable for cmd_lock")
    Signed-off-by: Rex Zhang <rex.zhang@intel.com>
    Signed-off-by: Lijun Pan <lijun.pan@intel.com>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Reviewed-by: Fenghua Yu <fenghua.yu@intel.com>
    Link: https://lore.kernel.org/r/20230916060619.3744220-1-rex.zhang@intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ecba5afe86f30605eb9dfb7f265a8de0218d4cfc
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Thu Oct 12 13:04:24 2023 +0300

    x86/alternatives: Disable KASAN in apply_alternatives()
    
    commit d35652a5fc9944784f6f50a5c979518ff8dacf61 upstream.
    
    Fei has reported that KASAN triggers during apply_alternatives() on
    a 5-level paging machine:
    
            BUG: KASAN: out-of-bounds in rcu_is_watching()
            Read of size 4 at addr ff110003ee6419a0 by task swapper/0/0
            ...
            __asan_load4()
            rcu_is_watching()
            trace_hardirqs_on()
            text_poke_early()
            apply_alternatives()
            ...
    
    On machines with 5-level paging, cpu_feature_enabled(X86_FEATURE_LA57)
    gets patched. It includes KASAN code, where KASAN_SHADOW_START depends on
    __VIRTUAL_MASK_SHIFT, which is defined with cpu_feature_enabled().
    
    KASAN gets confused when apply_alternatives() patches the
    KASAN_SHADOW_START users. A test patch that makes KASAN_SHADOW_START
    static, by replacing __VIRTUAL_MASK_SHIFT with 56, works around the issue.
    
    Fix it for real by disabling KASAN while the kernel is patching alternatives.
    
    [ mingo: updated the changelog ]
    
    Fixes: 6657fca06e3f ("x86/mm: Allow to boot without LA57 if CONFIG_X86_5LEVEL=y")
    Reported-by: Fei Yang <fei.yang@intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20231012100424.1456-1-kirill.shutemov@linux.intel.com
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbd2aac004982eda289081c8a99e3bb1d12a545b
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Thu Jul 13 04:14:29 2023 -0400

    usb: cdnsp: Fixes issue with dequeuing not queued requests
    
    commit 34f08eb0ba6e4869bbfb682bf3d7d0494ffd2f87 upstream.
    
    Gadget ACM while unloading module try to dequeue not queued usb
    request which causes the kernel to crash.
    Patch adds extra condition to check whether usb request is processed
    by CDNSP driver.
    
    cc: stable@vger.kernel.org
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Link: https://lore.kernel.org/r/20230713081429.326660-1-pawell@cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7014807fb7efa169a47a7a0a0a41d2c513925de0
Author: Krishna Kurapati <quic_kriskura@quicinc.com>
Date:   Wed Sep 27 16:28:58 2023 +0530

    usb: gadget: ncm: Handle decoding of multiple NTB's in unwrap call
    
    commit 427694cfaafa565a3db5c5ea71df6bc095dca92f upstream.
    
    When NCM is used with hosts like Windows PC, it is observed that there are
    multiple NTB's contained in one usb request giveback. Since the driver
    unwraps the obtained request data assuming only one NTB is present, we
    loose the subsequent NTB's present resulting in data loss.
    
    Fix this by checking the parsed block length with the obtained data
    length in usb request and continue parsing after the last byte of current
    NTB.
    
    Cc: stable@vger.kernel.org
    Fixes: 9f6ce4240a2b ("usb: gadget: f_ncm.c added")
    Signed-off-by: Krishna Kurapati <quic_kriskura@quicinc.com>
    Reviewed-by: Maciej Żenczykowski <maze@google.com>
    Link: https://lore.kernel.org/r/20230927105858.12950-1-quic_kriskura@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50259cf71a1b9542f49a050da454d07ab50b85d9
Author: Piyush Mehta <piyush.mehta@amd.com>
Date:   Fri Sep 29 17:45:14 2023 +0530

    usb: gadget: udc-xilinx: replace memcpy with memcpy_toio
    
    commit 3061b6491f491197a35e14e49f805d661b02acd4 upstream.
    
    For ARM processor, unaligned access to device memory is not allowed.
    Method memcpy does not take care of alignment.
    
    USB detection failure with the unalingned address of memory, with
    below kernel crash. To fix the unalingned address kernel panic,
    replace memcpy with memcpy_toio method.
    
    Kernel crash:
    Unable to handle kernel paging request at virtual address ffff80000c05008a
    Mem abort info:
      ESR = 0x96000061
      EC = 0x25: DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
      FSC = 0x21: alignment fault
    Data abort info:
      ISV = 0, ISS = 0x00000061
      CM = 0, WnR = 1
    swapper pgtable: 4k pages, 48-bit VAs, pgdp=000000000143b000
    [ffff80000c05008a] pgd=100000087ffff003, p4d=100000087ffff003,
    pud=100000087fffe003, pmd=1000000800bcc003, pte=00680000a0010713
    Internal error: Oops: 96000061 [#1] SMP
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.15.19-xilinx-v2022.1 #1
    Hardware name: ZynqMP ZCU102 Rev1.0 (DT)
    pstate: 200000c5 (nzCv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
    pc : __memcpy+0x30/0x260
    lr : __xudc_ep0_queue+0xf0/0x110
    sp : ffff800008003d00
    x29: ffff800008003d00 x28: ffff800009474e80 x27: 00000000000000a0
    x26: 0000000000000100 x25: 0000000000000012 x24: ffff000800bc8080
    x23: 0000000000000001 x22: 0000000000000012 x21: ffff000800bc8080
    x20: 0000000000000012 x19: ffff000800bc8080 x18: 0000000000000000
    x17: ffff800876482000 x16: ffff800008004000 x15: 0000000000004000
    x14: 00001f09785d0400 x13: 0103020101005567 x12: 0781400000000200
    x11: 00000000c5672a10 x10: 00000000000008d0 x9 : ffff800009463cf0
    x8 : ffff8000094757b0 x7 : 0201010055670781 x6 : 4000000002000112
    x5 : ffff80000c05009a x4 : ffff000800a15012 x3 : ffff00080362ad80
    x2 : 0000000000000012 x1 : ffff000800a15000 x0 : ffff80000c050088
    Call trace:
     __memcpy+0x30/0x260
     xudc_ep0_queue+0x3c/0x60
     usb_ep_queue+0x38/0x44
     composite_ep0_queue.constprop.0+0x2c/0xc0
     composite_setup+0x8d0/0x185c
     configfs_composite_setup+0x74/0xb0
     xudc_irq+0x570/0xa40
     __handle_irq_event_percpu+0x58/0x170
     handle_irq_event+0x60/0x120
     handle_fasteoi_irq+0xc0/0x220
     handle_domain_irq+0x60/0x90
     gic_handle_irq+0x74/0xa0
     call_on_irq_stack+0x2c/0x60
     do_interrupt_handler+0x54/0x60
     el1_interrupt+0x30/0x50
     el1h_64_irq_handler+0x18/0x24
     el1h_64_irq+0x78/0x7c
     arch_cpu_idle+0x18/0x2c
     do_idle+0xdc/0x15c
     cpu_startup_entry+0x28/0x60
     rest_init+0xc8/0xe0
     arch_call_rest_init+0x10/0x1c
     start_kernel+0x694/0x6d4
     __primary_switched+0xa4/0xac
    
    Fixes: 1f7c51660034 ("usb: gadget: Add xilinx usb2 device support")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/all/202209020044.CX2PfZzM-lkp@intel.com/
    Cc: stable@vger.kernel.org
    Signed-off-by: Piyush Mehta <piyush.mehta@amd.com>
    Link: https://lore.kernel.org/r/20230929121514.13475-1-piyush.mehta@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 308f1924964183ad12e4c3ebccd754dc960c379c
Author: Dharma Balasubiramani <dharma.b@microchip.com>
Date:   Tue Sep 5 15:38:35 2023 +0530

    counter: microchip-tcb-capture: Fix the use of internal GCLK logic
    
    commit df8fdd01c98b99d04915c04f3a5ce73f55456b7c upstream.
    
    As per the datasheet, the clock selection Bits 2:0 – TCCLKS[2:0] should
    be set to 0 while using the internal GCLK (TIMER_CLOCK1).
    
    Fixes: 106b104137fd ("counter: Add microchip TCB capture counter")
    Signed-off-by: Dharma Balasubiramani <dharma.b@microchip.com>
    Link: https://lore.kernel.org/r/20230905100835.315024-1-dharma.b@microchip.com
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a6ce81d7c16268bab312a6f44146fc8386e2e45
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Sep 20 11:09:10 2023 -0700

    pinctrl: avoid unsafe code pattern in find_pinctrl()
    
    commit c153a4edff6ab01370fcac8e46f9c89cca1060c2 upstream.
    
    The code in find_pinctrl() takes a mutex and traverses a list of pinctrl
    structures. Later the caller bumps up reference count on the found
    structure. Such pattern is not safe as pinctrl that was found may get
    deleted before the caller gets around to increasing the reference count.
    
    Fix this by taking the reference count in find_pinctrl(), while it still
    holds the mutex.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Link: https://lore.kernel.org/r/ZQs1RgTKg6VJqmPs@google.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c790191cab46069c18482f5a3b17ba2a59d81ae
Author: Michal Koutný <mkoutny@suse.com>
Date:   Mon Oct 9 15:58:11 2023 +0200

    cgroup: Remove duplicates in cgroup v1 tasks file
    
    commit 1ca0b605150501b7dc59f3016271da4eb3e96fce upstream.
    
    One PID may appear multiple times in a preloaded pidlist.
    (Possibly due to PID recycling but we have reports of the same
    task_struct appearing with different PIDs, thus possibly involving
    transfer of PID via de_thread().)
    
    Because v1 seq_file iterator uses PIDs as position, it leads to
    a message:
    > seq_file: buggy .next function kernfs_seq_next did not update position index
    
    Conservative and quick fix consists of removing duplicates from `tasks`
    file (as opposed to removing pidlists altogether). It doesn't affect
    correctness (it's sufficient to show a PID once), performance impact
    would be hidden by unconditional sorting of the pidlist already in place
    (asymptotically).
    
    Link: https://lore.kernel.org/r/20230823174804.23632-1-mkoutny@suse.com/
    Suggested-by: Firo Yang <firo.yang@suse.com>
    Signed-off-by: Michal Koutný <mkoutny@suse.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1680c82929bc14d706065f123dab77f2f1293116
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Fri Sep 29 12:30:24 2023 +0530

    tee: amdtee: fix use-after-free vulnerability in amdtee_close_session
    
    commit f4384b3e54ea813868bb81a861bf5b2406e15d8f upstream.
    
    There is a potential race condition in amdtee_close_session that may
    cause use-after-free in amdtee_open_session. For instance, if a session
    has refcount == 1, and one thread tries to free this session via:
    
        kref_put(&sess->refcount, destroy_session);
    
    the reference count will get decremented, and the next step would be to
    call destroy_session(). However, if in another thread,
    amdtee_open_session() is called before destroy_session() has completed
    execution, alloc_session() may return 'sess' that will be freed up
    later in destroy_session() leading to use-after-free in
    amdtee_open_session.
    
    To fix this issue, treat decrement of sess->refcount and removal of
    'sess' from session list in destroy_session() as a critical section, so
    that it is executed atomically.
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8ec40a90acd21a62bd7b3a4677cf8623f0546a7
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Oct 4 07:18:31 2023 -0700

    Input: goodix - ensure int GPIO is in input for gpio_count == 1 && gpio_int_idx == 0 case
    
    commit 423622a90abb243944d1517b9f57db53729e45c4 upstream.
    
    Add a special case for gpio_count == 1 && gpio_int_idx == 0 to
    goodix_add_acpi_gpio_mappings().
    
    It seems that on newer x86/ACPI devices the reset and irq GPIOs are no
    longer listed as GPIO resources instead there is only 1 GpioInt resource
    and _PS0 does the whole reset sequence for us.
    
    This means that we must call acpi_device_fix_up_power() on these devices
    to ensure that the chip is reset before we try to use it.
    
    This part was already fixed in commit 3de93e6ed2df ("Input: goodix - call
    acpi_device_fix_up_power() in some cases") by adding a call to
    acpi_device_fix_up_power() to the generic "Unexpected ACPI resources"
    catch all.
    
    But it turns out that this case on some hw needs some more special
    handling. Specifically the firmware may bootup with the IRQ pin in
    output mode. The reset sequence from ACPI _PS0 (executed by
    acpi_device_fix_up_power()) should put the pin in input mode,
    but the GPIO subsystem has cached the direction at bootup, causing
    request_irq() to fail due to gpiochip_lock_as_irq() failure:
    
    [    9.119864] Goodix-TS i2c-GDIX1002:00: Unexpected ACPI resources: gpio_count 1, gpio_int_idx 0
    [    9.317443] Goodix-TS i2c-GDIX1002:00: ID 911, version: 1060
    [    9.321902] input: Goodix Capacitive TouchScreen as /devices/pci0000:00/0000:00:17.0/i2c_designware.4/i2c-5/i2c-GDIX1002:00/input/input8
    [    9.327840] gpio gpiochip0: (INT3453:00): gpiochip_lock_as_irq: tried to flag a GPIO set as output for IRQ
    [    9.327856] gpio gpiochip0: (INT3453:00): unable to lock HW IRQ 26 for IRQ
    [    9.327861] genirq: Failed to request resources for GDIX1002:00 (irq 131) on irqchip intel-gpio
    [    9.327912] Goodix-TS i2c-GDIX1002:00: request IRQ failed: -5
    
    Fix this by adding a special case for gpio_count == 1 && gpio_int_idx == 0
    which adds an ACPI GPIO lookup table for the int GPIO even though we cannot
    use it for reset purposes (as there is no reset GPIO).
    
    Adding the lookup will make the gpiod_int = gpiod_get(..., GPIOD_IN) call
    succeed, which will explicitly set the direction to input fixing the issue.
    
    Note this re-uses the acpi_goodix_int_first_gpios[] lookup table, since
    there is only 1 GPIO in the ACPI resources the reset entry in that
    lookup table will amount to a no-op.
    
    Reported-and-tested-by: Michael Smith <1973.mjsmith@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231003215144.69527-1-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d092630e8a20dda40aa0dafcc0101e80b3c5eef6
Author: Szilard Fabian <szfabian@bluemarch.art>
Date:   Wed Oct 4 05:47:01 2023 -0700

    Input: i8042 - add Fujitsu Lifebook E5411 to i8042 quirk table
    
    commit 80f39e1c27ba9e5a1ea7e68e21c569c9d8e46062 upstream.
    
    In the initial boot stage the integrated keyboard of Fujitsu Lifebook E5411
    refuses to work and it's not possible to type for example a dm-crypt
    passphrase without the help of an external keyboard.
    
    i8042.nomux kernel parameter resolves this issue but using that a PS/2
    mouse is detected. This input device is unused even when the i2c-hid-acpi
    kernel module is blacklisted making the integrated ELAN touchpad
    (04F3:308A) not working at all.
    
    Since the integrated touchpad is managed by the i2c_designware input
    driver in the Linux kernel and you can't find a PS/2 mouse port on the
    computer I think it's safe to not use the PS/2 mouse port at all.
    
    Signed-off-by: Szilard Fabian <szfabian@bluemarch.art>
    Link: https://lore.kernel.org/r/20231004011749.101789-1-szfabian@bluemarch.art
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cea6fa2d73f850bef3c17869b53e77c4275f38d
Author: Matthias Berndt <matthias_berndt@gmx.de>
Date:   Fri Oct 13 15:04:36 2023 -0700

    Input: xpad - add PXN V900 support
    
    commit a65cd7ef5a864bdbbe037267c327786b7759d4c6 upstream.
    
    Add VID and PID to the xpad_device table to allow driver to use the PXN
    V900 steering wheel, which is XTYPE_XBOX360 compatible in xinput mode.
    
    Signed-off-by: Matthias Berndt <matthias_berndt@gmx.de>
    Link: https://lore.kernel.org/r/4932699.31r3eYUQgx@fedora
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ff4e50e2d2a37f514446590bc3950760a476b68
Author: Jeffery Miller <jefferymiller@google.com>
Date:   Fri Oct 13 15:23:49 2023 -0700

    Input: psmouse - fix fast_reconnect function for PS/2 mode
    
    commit e2cb5cc822b6c9ee72c56ce1d81671b22c05406a upstream.
    
    When the SMBus connection is attempted psmouse_smbus_init() sets
    the fast_reconnect pointer to psmouse_smbus_reconnecti(). If SMBus
    initialization fails, elantech_setup_ps2() and synaptics_init_ps2() will
    fallback to PS/2 mode, replacing the psmouse private data. This can cause
    issues on resume, since psmouse_smbus_reconnect() expects to find an
    instance of struct psmouse_smbus_dev in psmouse->private.
    
    The issue was uncovered when in 92e24e0e57f7 ("Input: psmouse - add
    delay when deactivating for SMBus mode") psmouse_smbus_reconnect()
    started attempting to use more of the data structure. The commit was
    since reverted, not because it was at fault, but because there was found
    a better way of doing what it was attempting to do.
    
    Fix the problem by resetting the fast_reconnect pointer in psmouse
    structure in elantech_setup_ps2() and synaptics_init_ps2() when the PS/2
    mode is used.
    
    Reported-by: Thorsten Leemhuis <linux@leemhuis.info>
    Tested-by: Thorsten Leemhuis <linux@leemhuis.info>
    Signed-off-by: Jeffery Miller <jefferymiller@google.com>
    Fixes: bf232e460a35 ("Input: psmouse-smbus - allow to control psmouse_deactivate")
    Link: https://lore.kernel.org/r/20231005002249.554877-1-jefferymiller@google.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a4a396386404e62fb59bc3bde48871a64a82b4f
Author: Javier Carrasco <javier.carrasco.cruz@gmail.com>
Date:   Fri Oct 13 20:11:33 2023 -0700

    Input: powermate - fix use-after-free in powermate_config_complete
    
    commit 5c15c60e7be615f05a45cd905093a54b11f461bc upstream.
    
    syzbot has found a use-after-free bug [1] in the powermate driver. This
    happens when the device is disconnected, which leads to a memory free from
    the powermate_device struct.  When an asynchronous control message
    completes after the kfree and its callback is invoked, the lock does not
    exist anymore and hence the bug.
    
    Use usb_kill_urb() on pm->config to cancel any in-progress requests upon
    device disconnection.
    
    [1] https://syzkaller.appspot.com/bug?extid=0434ac83f907a1dbdd1e
    
    Signed-off-by: Javier Carrasco <javier.carrasco.cruz@gmail.com>
    Reported-by: syzbot+0434ac83f907a1dbdd1e@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20230916-topic-powermate_use_after_free-v3-1-64412b81a7a2@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ad7f52d8c5876b28cfc335f320a00cd25d11fa4
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Sat Oct 7 11:52:39 2023 +0300

    ceph: fix type promotion bug on 32bit systems
    
    commit 07bb00ef00ace88dd6f695fadbba76565756e55c upstream.
    
    In this code "ret" is type long and "src_objlen" is unsigned int.  The
    problem is that on 32bit systems, when we do the comparison signed longs
    are type promoted to unsigned int.  So negative error codes from
    do_splice_direct() are treated as success instead of failure.
    
    Cc: stable@vger.kernel.org
    Fixes: 1b0c3b9f91f0 ("ceph: re-org copy_file_range and fix some error paths")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0c4acd53a986e3165f54ee5a28fa9a3098fb6ec
Author: Xiubo Li <xiubli@redhat.com>
Date:   Wed Sep 6 14:22:07 2023 +0800

    ceph: fix incorrect revoked caps assert in ceph_fill_file_size()
    
    commit 15c0a870dc44ed14e01efbdd319d232234ee639f upstream.
    
    When truncating the inode the MDS will acquire the xlock for the
    ifile Locker, which will revoke the 'Frwsxl' caps from the clients.
    But when the client just releases and flushes the 'Fw' caps to MDS,
    for exmaple, and once the MDS receives the caps flushing msg it
    just thought the revocation has finished. Then the MDS will continue
    truncating the inode and then issued the truncate notification to
    all the clients. While just before the clients receives the cap
    flushing ack they receive the truncation notification, the clients
    will detecte that the 'issued | dirty' is still holding the 'Fw'
    caps.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/56693
    Fixes: b0d7c2231015 ("ceph: introduce i_truncate_mutex")
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Milind Changire <mchangir@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58f0e6324ec7f0e3f30fd0d68f8c659a6f61d39b
Author: Jordan Rife <jrife@google.com>
Date:   Wed Oct 4 18:38:27 2023 -0500

    libceph: use kernel_connect()
    
    commit 7563cf17dce0a875ba3d872acdc63a78ea344019 upstream.
    
    Direct calls to ops->connect() can overwrite the address parameter when
    used in conjunction with BPF SOCK_ADDR hooks. Recent changes to
    kernel_connect() ensure that callers are insulated from such side
    effects. This patch wraps the direct call to ops->connect() with
    kernel_connect() to prevent unexpected changes to the address passed to
    ceph_tcp_connect().
    
    This change was originally part of a larger patch targeting the net tree
    addressing all instances of unprotected calls to ops->connect()
    throughout the kernel, but this change was split up into several patches
    targeting various trees.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/netdev/20230821100007.559638-1-jrife@google.com/
    Link: https://lore.kernel.org/netdev/9944248dba1bce861375fcce9de663934d933ba9.camel@redhat.com/
    Fixes: d74bad4e74ee ("bpf: Hooks for sys_connect")
    Signed-off-by: Jordan Rife <jrife@google.com>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d727b97f8f2e7da74b4ecd09eaaa22221be40122
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Aug 22 16:36:18 2023 +0300

    thunderbolt: Check that lane 1 is in CL0 before enabling lane bonding
    
    commit a9fdf5f933a6f2b358fad0194b1287b67f6704b1 upstream.
    
    Marek reported that when BlackMagic UltraStudio device is connected the
    kernel repeatedly tries to enable lane bonding without success making
    the device non-functional. It looks like the device does not have lane 1
    connected at all so even though it is enabled we should not try to bond
    the lanes. For this reason check that lane 1 is in fact CL0 (connected,
    active) before attempting to bond the lanes.
    
    Reported-by: Marek Šanta <teslan223@gmail.com>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217737
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04c38bedd07c9b01d1903bede5a2360f559f4679
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Fri Aug 18 15:27:46 2023 +0300

    thunderbolt: Workaround an IOMMU fault on certain systems with Intel Maple Ridge
    
    commit 582620d9f6b352552bc9a3316fe2b1c3acd8742d upstream.
    
    On some systems the IOMMU blocks the first couple of driver ready
    messages to the connection manager firmware as can be seen in below
    excerpts:
    
      thunderbolt 0000:06:00.0: AMD-Vi: Event logged [IO_PAGE_FAULT domain=0x0010 address=0xbb0e3400 flags=0x0020]
    
    or
    
      DMAR: DRHD: handling fault status reg 2
      DMAR: [DMA Write] Request device [04:00.0] PASID ffffffff fault addr 69974000 [fault reason 05] PTE Write access is not set
    
    The reason is unknown and hard to debug because we were not able to
    reproduce this locally. This only happens on certain systems with Intel
    Maple Ridge Thunderbolt controller. If there is a device connected when
    the driver is loaded the issue does not happen either. Only when there
    is nothing connected (so typically when the system is booted up).
    
    We can work this around by sending the driver ready several times. After
    a couple of retries the message goes through and the controller works
    just fine. For this reason make the number of retries a parameter for
    icm_request() and then for Maple Ridge (and Titan Ridge as they us the
    same function but this should not matter) increase number of retries
    while shortening the timeout accordingly.
    
    Reported-by: Werner Sembach <wse@tuxedocomputers.com>
    Reported-by: Konrad J Hambrick <kjhambrick@gmail.com>
    Reported-by: Calvin Walton <calvin.walton@kepstin.ca>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=214259
    Cc: stable@vger.kernel.org
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a586742a37804ca66a738e5876761cc89068b91c
Author: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
Date:   Wed Sep 6 11:49:26 2023 +0000

    mcb: remove is_added flag from mcb_device struct
    
    commit 0f28ada1fbf0054557cddcdb93ad17f767105208 upstream.
    
    When calling mcb_bus_add_devices(), both mcb devices and the mcb
    bus will attempt to attach a device to a driver because they share
    the same bus_type. This causes an issue when trying to cast the
    container of the device to mcb_device struct using to_mcb_device(),
    leading to a wrong cast when the mcb_bus is added. A crash occurs
    when freing the ida resources as the bus numbering of mcb_bus gets
    confused with the is_added flag on the mcb_device struct.
    
    The only reason for this cast was to keep an is_added flag on the
    mcb_device struct that does not seem necessary. The function
    device_attach() handles already bound devices and the mcb subsystem
    does nothing special with this is_added flag so remove it completely.
    
    Fixes: 18d288198099 ("mcb: Correctly initialize the bus's device")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Jorge Sanjuan Garcia <jorge.sanjuangarcia@duagon.com>
    Co-developed-by: Jose Javier Rodriguez Barbarin <JoseJavier.Rodriguez@duagon.com>
    Signed-off-by: Jose Javier Rodriguez Barbarin <JoseJavier.Rodriguez@duagon.com>
    Link: https://lore.kernel.org/r/20230906114901.63174-2-JoseJavier.Rodriguez@duagon.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4382d1a996e54d80ad1805eaadc24c0e331373e4
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Sat Oct 7 12:57:02 2023 +0200

    x86/cpu: Fix AMD erratum #1485 on Zen4-based CPUs
    
    commit f454b18e07f518bcd0c05af17a2239138bff52de upstream.
    
    Fix erratum #1485 on Zen4 parts where running with STIBP disabled can
    cause an #UD exception. The performance impact of the fix is negligible.
    
    Reported-by: René Rebe <rene@exactcode.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Tested-by: René Rebe <rene@exactcode.de>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/D99589F4-BC5D-430B-87B2-72C20370CF57@exactcode.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 763167003a80be6dbea9241573a291abb0e13fe2
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Sep 12 12:08:27 2023 +0200

    ACPI: resource: Skip IRQ override on ASUS ExpertBook B1402CBA
    
    commit c1ed72171ed580fbf159e703b77685aa4b0d0df5 upstream.
    
    Like various other ASUS ExpertBook-s, the ASUS ExpertBook B1402CBA
    has an ACPI DSDT table that describes IRQ 1 as ActiveLow while
    the kernel overrides it to EdgeHigh.
    
    This prevents the keyboard from working. To fix this issue, add this laptop
    to the skip_override_table so that the kernel does not override IRQ 1.
    
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=217901
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 510d4a01d84cc096db1799c8a5fd93dd7dc41182
Author: Daniel Miess <daniel.miess@amd.com>
Date:   Fri Sep 29 13:04:33 2023 -0400

    drm/amd/display: Don't set dpms_off for seamless boot
    
    commit 23645bca98304a2772f0de96f97370dd567d0ae6 upstream.
    
    [Why]
    eDPs fail to light up with seamless boot enabled
    
    [How]
    When seamless boot is enabled don't configure dpms_off
    in disable_vbios_mode_if_required.
    
    Reviewed-by: Charlene Liu <charlene.liu@amd.com>
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Daniel Miess <daniel.miess@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cb61ab9f4cab14fbf2d2bc4bff1e0a3a8f4a026
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Oct 6 14:04:04 2023 +0200

    drm/amdgpu: add missing NULL check
    
    commit ff89f064dca38e2203790bf876cc7756b8ab2961 upstream.
    
    bo->tbo.resource can easily be NULL here.
    
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2902
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9a1af37b8017d1a33a73a913fdf3ab0a52f8cb7
Author: Alexander Zangerl <az@breathe-safe.com>
Date:   Wed Sep 20 10:01:10 2023 +1000

    iio: pressure: ms5611: ms5611_prom_is_valid false negative bug
    
    commit fd39d9668f2ce9f4b05ad55e8c8d80c098073e0b upstream.
    
    The ms5611 driver falsely rejects lots of MS5607-02BA03-50 chips
    with "PROM integrity check failed" because it doesn't accept a prom crc
    value of zero as legitimate.
    
    According to the datasheet for this chip (and the manufacturer's
    application note about the PROM CRC), none of the possible values for the
    CRC are excluded - but the current code in ms5611_prom_is_valid() ends with
    
    return crc_orig != 0x0000 && crc == crc_orig
    
    Discussed with the driver author (Tomasz Duszynski) and he indicated that
    at that time (2015) he was dealing with some faulty chip samples which
    returned blank data under some circumstances and/or followed example code
    which indicated CRC zero being bad.
    
    As far as I can tell this exception should not be applied anymore; We've
    got a few hundred custom boards here with this chip where large numbers
    of the prom have a legitimate CRC value 0, and do work fine, but which the
    current driver code wrongly rejects.
    
    Signed-off-by: Alexander Zangerl <az@breathe-safe.com>
    Fixes: c0644160a8b5 ("iio: pressure: add support for MS5611 pressure and temperature sensor")
    Link: https://lore.kernel.org/r/2535-1695168070.831792@Ze3y.dhYT.s3fx
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09b8ed9547f135ba1504520a96a5b740f61ff82d
Author: Lakshmi Yadlapati <lakshmiy@us.ibm.com>
Date:   Tue Aug 29 13:02:22 2023 -0500

    iio: pressure: dps310: Adjust Timeout Settings
    
    commit 901a293fd96fb9bab843ba4cc7be3094a5aa7c94 upstream.
    
    The DPS310 sensor chip has been encountering intermittent errors while
    reading the sensor device across various system designs. This issue causes
    the chip to become "stuck," preventing the indication of "ready" status
    for pressure and temperature measurements in the MEAS_CFG register.
    
    To address this issue, this commit fixes the timeout settings to improve
    sensor stability:
    - After sending a reset command to the chip, the timeout has been extended
      from 2.5 ms to 15 ms, aligning with the DPS310 specification.
    - The read timeout value of the MEAS_CFG register has been adjusted from
      20ms to 30ms to match the specification.
    
    Signed-off-by: Lakshmi Yadlapati <lakshmiy@us.ibm.com>
    Fixes: 7b4ab4abcea4 ("iio: pressure: dps310: Reset chip after timeout")
    Link: https://lore.kernel.org/r/20230829180222.3431926-2-lakshmiy@us.ibm.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c80ecef859da5190f8fd5aa12cd67580a2d38c8
Author: Phil Elwell <phil@raspberrypi.com>
Date:   Fri Aug 11 16:58:29 2023 +0100

    iio: pressure: bmp280: Fix NULL pointer exception
    
    commit 85dfb43bf69281adb1f345dfd9a39faf2e5a718d upstream.
    
    The bmp085 EOC IRQ support is optional, but the driver's common probe
    function queries the IRQ properties whether or not it exists, which
    can trigger a NULL pointer exception. Avoid any exception by making
    the query conditional on the possession of a valid IRQ.
    
    Fixes: aae953949651 ("iio: pressure: bmp280: add support for BMP085 EOC interrupt")
    Signed-off-by: Phil Elwell <phil@raspberrypi.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20230811155829.51208-1-phil@raspberrypi.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a625de7e54647c607c69547be704ddb8c3e04f86
Author: Xingxing Luo <xingxing.luo@unisoc.com>
Date:   Fri Sep 22 15:59:29 2023 +0800

    usb: musb: Modify the "HWVers" register address
    
    commit 6658a62e1ddf726483cb2d8bf45ea3f9bd533074 upstream.
    
    musb HWVers rgister address is not 0x69, if we operate the
    wrong address 0x69, it will cause a kernel crash, because
    there is no register corresponding to this address in the
    additional control register of musb. In fact, HWVers has
    been defined in musb_register.h, and the name is
    "MUSB_HWVERS", so We need to use this macro instead of 0x69.
    
    Fixes: c2365ce5d5a0 ("usb: musb: replace hard coded registers with defines")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xingxing Luo <xingxing.luo@unisoc.com>
    Link: https://lore.kernel.org/r/20230922075929.31074-1-xingxing.luo@unisoc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb28694f6da8aa14e4c71ca0dc23e70cb5bb157a
Author: Xingxing Luo <xingxing.luo@unisoc.com>
Date:   Tue Sep 19 11:30:55 2023 +0800

    usb: musb: Get the musb_qh poniter after musb_giveback
    
    commit 33d7e37232155aadebe4145dcc592f00dabd7a2b upstream.
    
    When multiple threads are performing USB transmission, musb->lock will be
    unlocked when musb_giveback is executed. At this time, qh may be released
    in the dequeue process in other threads, resulting in a wild pointer, so
    it needs to be here get qh again, and judge whether qh is NULL, and when
    dequeue, you need to set qh to NULL.
    
    Fixes: dbac5d07d13e ("usb: musb: host: don't start next rx urb if current one failed")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xingxing Luo <xingxing.luo@unisoc.com>
    Link: https://lore.kernel.org/r/20230919033055.14085-1-xingxing.luo@unisoc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee88141873a8582895c01ac6cf93f683cc0a11f4
Author: Xiaolei Wang <xiaolei.wang@windriver.com>
Date:   Tue Sep 26 15:53:33 2023 +0800

    usb: cdns3: Modify the return value of cdns_set_active () to void when CONFIG_PM_SLEEP is disabled
    
    commit 9f35d612da5592f1bf1cae44ec1e023df37bea12 upstream.
    
    The return type of cdns_set_active () is inconsistent
    depending on whether CONFIG_PM_SLEEP is enabled, so the
    return value is modified to void type.
    
    Reported-by: Pavel Machek <pavel@denx.de>
    Closes: https://lore.kernel.org/all/ZP7lIKUzD68XA91j@duo.ucw.cz/
    Fixes: 2319b9c87fe2 ("usb: cdns3: Put the cdns set active part outside the spin lock")
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
    Reviewed-by: Pavel Machek <pavel@denx.de>
    Reviewed-by: Roger Quadros <rogerq@kernel.org>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Link: https://lore.kernel.org/r/20230926075333.1791011-1-xiaolei.wang@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b2dbc4f330297a385859a1ca561ed41c8361f06
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Wed Sep 13 00:52:15 2023 +0000

    usb: dwc3: Soft reset phy on probe for host
    
    commit 8bea147dfdf823eaa8d3baeccc7aeb041b41944b upstream.
    
    When there's phy initialization, we need to initiate a soft-reset
    sequence. That's done through USBCMD.HCRST in the xHCI driver and its
    initialization, However, the dwc3 driver may modify core configs before
    the soft-reset. This may result in some connection instability. So,
    ensure the phy is ready before the controller updates the GCTL.PRTCAPDIR
    or other settings by issuing phy soft-reset.
    
    Note that some host-mode configurations may not expose device registers
    to initiate the controller soft-reset (via DCTL.CoreSftRst). So we reset
    through GUSB3PIPECTL and GUSB2PHYCFG instead.
    
    Cc: stable@vger.kernel.org
    Fixes: e835c0a4e23c ("usb: dwc3: don't reset device side if dwc3 was configured as host-only")
    Reported-by: Kenta Sato <tosainu.maple@gmail.com>
    Closes: https://lore.kernel.org/linux-usb/ZPUciRLUcjDywMVS@debian.me/
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Tested-by: Kenta Sato <tosainu.maple@gmail.com>
    Link: https://lore.kernel.org/r/70aea513215d273669152696cc02b20ddcdb6f1a.1694564261.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42c56e01565305147b175a72092550b9e691808b
Author: Javier Carrasco <javier.carrasco.cruz@gmail.com>
Date:   Tue Oct 10 00:26:14 2023 +0200

    net: usb: dm9601: fix uninitialized variable use in dm9601_mdio_read
    
    commit 8f8abb863fa5a4cc18955c6a0e17af0ded3e4a76 upstream.
    
    syzbot has found an uninit-value bug triggered by the dm9601 driver [1].
    
    This error happens because the variable res is not updated if the call
    to dm_read_shared_word returns an error. In this particular case -EPROTO
    was returned and res stayed uninitialized.
    
    This can be avoided by checking the return value of dm_read_shared_word
    and propagating the error if the read operation failed.
    
    [1] https://syzkaller.appspot.com/bug?extid=1f53a30781af65d2c955
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Javier Carrasco <javier.carrasco.cruz@gmail.com>
    Reported-and-tested-by: syzbot+1f53a30781af65d2c955@syzkaller.appspotmail.com
    Acked-by: Peter Korsgaard <peter@korsgaard.com>
    Fixes: d0374f4f9c35cdfbee0 ("USB: Davicom DM9601 usbnet driver")
    Link: https://lore.kernel.org/r/20231009-topic-dm9601_uninit_mdio_read-v2-1-f2fe39739b6c@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 524f4536178938653d32aed5736110bd0c2ce1af
Author: Wesley Cheng <quic_wcheng@quicinc.com>
Date:   Fri Sep 15 17:31:05 2023 +0300

    usb: xhci: xhci-ring: Use sysdev for mapping bounce buffer
    
    commit 41a43013d2366db5b88b42bbcd8e8f040b6ccf21 upstream.
    
    As mentioned in:
      commit 474ed23a6257 ("xhci: align the last trb before link if it is
    easily splittable.")
    
    A bounce buffer is utilized for ensuring that transfers that span across
    ring segments are aligned to the EP's max packet size.  However, the device
    that is used to map the DMA buffer to is currently using the XHCI HCD,
    which does not carry any DMA operations in certain configrations.
    Migration to using the sysdev entry was introduced for DWC3 based
    implementations where the IOMMU operations are present.
    
    Replace the reference to the controller device to sysdev instead.  This
    allows the bounce buffer to be properly mapped to any implementations that
    have an IOMMU involved.
    
    cc: stable@vger.kernel.org
    Fixes: 4c39d4b949d3 ("usb: xhci: use bus->sysdev for DMA configuration")
    Signed-off-by: Wesley Cheng <quic_wcheng@quicinc.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20230915143108.1532163-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d8e7fe855283c7accc42e82d8790055bb8ca0a3
Author: Hongyu Xie <xy521521@gmail.com>
Date:   Thu Jun 23 14:19:42 2022 +0300

    xhci: Keep interrupt disabled in initialization until host is running.
    
    commit a808925075fb750804a60ff0710614466c396db4 upstream.
    
    irq is disabled in xhci_quiesce(called by xhci_halt, with bit:2 cleared
    in USBCMD register), but xhci_run(called by usb_add_hcd) re-enable it.
    It's possible that you will receive thousands of interrupt requests
    after initialization for 2.0 roothub. And you will get a lot of
    warning like, "xHCI dying, ignoring interrupt. Shouldn't IRQs be
    disabled?". This amount of interrupt requests will cause the entire
    system to freeze.
    This problem was first found on a device with ASM2142 host controller
    on it.
    
    [tidy up old code while moving it, reword header -Mathias]
    
    Cc: stable@kernel.org
    Signed-off-by: Hongyu Xie <xiehongyu1@kylinos.cn>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20220623111945.1557702-2-mathias.nyman@linux.intel.com
    Signed-off-by: Prashanth K <quic_prashk@quicinc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb34e3b25c37dc579beef0f588c19870d6e84c07
Author: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date:   Wed Oct 4 18:35:28 2023 +0200

    dmaengine: stm32-mdma: abort resume if no ongoing transfer
    
    commit 81337b9a72dc58a5fa0ae8a042e8cb59f9bdec4a upstream.
    
    chan->desc can be null, if transfer is terminated when resume is called,
    leading to a NULL pointer when retrieving the hwdesc.
    To avoid this case, check that chan->desc is not null and channel is
    disabled (transfer previously paused or terminated).
    
    Fixes: a4ffb13c8946 ("dmaengine: Add STM32 MDMA driver")
    Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20231004163531.2864160-1-amelie.delaunay@foss.st.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d56dbfe750a8f96789cc86a911864f663e63bc5d
Author: Zheng Wang <zyytlz.wz@163.com>
Date:   Fri Jul 7 17:24:14 2023 +0800

    media: mtk-jpeg: Fix use after free bug due to uncanceled work
    
    commit c677d7ae83141d390d1253abebafa49c962afb52 upstream.
    
    In mtk_jpeg_probe, &jpeg->job_timeout_work is bound with
    mtk_jpeg_job_timeout_work. Then mtk_jpeg_dec_device_run
    and mtk_jpeg_enc_device_run may be called to start the
    work.
    If we remove the module which will call mtk_jpeg_remove
    to make cleanup, there may be a unfinished work. The
    possible sequence is as follows, which will cause a
    typical UAF bug.
    
    Fix it by canceling the work before cleanup in the mtk_jpeg_remove
    
    CPU0                  CPU1
    
                        |mtk_jpeg_job_timeout_work
    mtk_jpeg_remove     |
      v4l2_m2m_release  |
        kfree(m2m_dev); |
                        |
                        | v4l2_m2m_get_curr_priv
                        |   m2m_dev->curr_ctx //use
    Fixes: b2f0d2724ba4 ("[media] vcodec: mediatek: Add Mediatek JPEG Decoder Driver")
    Signed-off-by: Zheng Wang <zyytlz.wz@163.com>
    Reviewed-by: Alexandre Mergnat <amergnat@baylibre.com>
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e13e69ddf0d70fd4caf1ed1608e03520a39b4f6
Author: Patrick Rohr <prohr@google.com>
Date:   Fri Oct 13 14:21:14 2023 -0700

    net: release reference to inet6_dev pointer
    
    commit 5cb249686e67dbef3ffe53887fa725eefc5a7144 upstream.
    
    addrconf_prefix_rcv returned early without releasing the inet6_dev
    pointer when the PIO lifetime is less than accept_ra_min_lft.
    
    Fixes: 5027d54a9c30 ("net: change accept_ra_min_rtr_lft to affect all RA lifetimes")
    Cc: Maciej Żenczykowski <maze@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: David Ahern <dsahern@kernel.org>
    Cc: Simon Horman <horms@kernel.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Maciej Żenczykowski <maze@google.com>
    Signed-off-by: Patrick Rohr <prohr@google.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aade10d51ddc109a9ae2a88c5b6f80d956b5dc01
Author: Patrick Rohr <prohr@google.com>
Date:   Fri Oct 13 14:21:13 2023 -0700

    net: change accept_ra_min_rtr_lft to affect all RA lifetimes
    
    commit 5027d54a9c30bc7ec808360378e2b4753f053f25 upstream.
    
    accept_ra_min_rtr_lft only considered the lifetime of the default route
    and discarded entire RAs accordingly.
    
    This change renames accept_ra_min_rtr_lft to accept_ra_min_lft, and
    applies the value to individual RA sections; in particular, router
    lifetime, PIO preferred lifetime, and RIO lifetime. If any of those
    lifetimes are lower than the configured value, the specific RA section
    is ignored.
    
    In order for the sysctl to be useful to Android, it should really apply
    to all lifetimes in the RA, since that is what determines the minimum
    frequency at which RAs must be processed by the kernel. Android uses
    hardware offloads to drop RAs for a fraction of the minimum of all
    lifetimes present in the RA (some networks have very frequent RAs (5s)
    with high lifetimes (2h)). Despite this, we have encountered networks
    that set the router lifetime to 30s which results in very frequent CPU
    wakeups. Instead of disabling IPv6 (and dropping IPv6 ethertype in the
    WiFi firmware) entirely on such networks, it seems better to ignore the
    misconfigured routers while still processing RAs from other IPv6 routers
    on the same network (i.e. to support IoT applications).
    
    The previous implementation dropped the entire RA based on router
    lifetime. This turned out to be hard to expand to the other lifetimes
    present in the RA in a consistent manner; dropping the entire RA based
    on RIO/PIO lifetimes would essentially require parsing the whole thing
    twice.
    
    Fixes: 1671bcfd76fd ("net: add sysctl accept_ra_min_rtr_lft")
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Patrick Rohr <prohr@google.com>
    Reviewed-by: Maciej Żenczykowski <maze@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20230726230701.919212-1-prohr@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f12d2d66cba6535362e2f8dc57808dfb45c7cc4
Author: Patrick Rohr <prohr@google.com>
Date:   Fri Oct 13 14:21:12 2023 -0700

    net: add sysctl accept_ra_min_rtr_lft
    
    commit 1671bcfd76fdc0b9e65153cf759153083755fe4c upstream.
    
    This change adds a new sysctl accept_ra_min_rtr_lft to specify the
    minimum acceptable router lifetime in an RA. If the received RA router
    lifetime is less than the configured value (and not 0), the RA is
    ignored.
    This is useful for mobile devices, whose battery life can be impacted
    by networks that configure RAs with a short lifetime. On such networks,
    the device should never gain IPv6 provisioning and should attempt to
    drop RAs via hardware offload, if available.
    
    Signed-off-by: Patrick Rohr <prohr@google.com>
    Cc: Maciej Żenczykowski <maze@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc9f6cbeb9995e45162501f0fdf6ae46c428136c
Author: Waiman Long <longman@redhat.com>
Date:   Tue Oct 10 22:48:42 2023 -0400

    workqueue: Override implicit ordered attribute in workqueue_apply_unbound_cpumask()
    
    [ Upstream commit ca10d851b9ad0338c19e8e3089e24d565ebfffd7 ]
    
    Commit 5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1
    to be ordered") enabled implicit ordered attribute to be added to
    WQ_UNBOUND workqueues with max_active of 1. This prevented the changing
    of attributes to these workqueues leading to fix commit 0a94efb5acbb
    ("workqueue: implicit ordered attribute should be overridable").
    
    However, workqueue_apply_unbound_cpumask() was not updated at that time.
    So sysfs changes to wq_unbound_cpumask has no effect on WQ_UNBOUND
    workqueues with implicit ordered attribute. Since not all WQ_UNBOUND
    workqueues are visible on sysfs, we are not able to make all the
    necessary cpumask changes even if we iterates all the workqueue cpumasks
    in sysfs and changing them one by one.
    
    Fix this problem by applying the corresponding change made
    to apply_workqueue_attrs_locked() in the fix commit to
    workqueue_apply_unbound_cpumask().
    
    Fixes: 5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be ordered")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25dd54b95abfdca423b65a4ee620a774777d8213
Author: Jeremy Cline <jeremy@jcline.org>
Date:   Mon Oct 9 16:00:54 2023 -0400

    nfc: nci: assert requested protocol is valid
    
    [ Upstream commit 354a6e707e29cb0c007176ee5b8db8be7bd2dee0 ]
    
    The protocol is used in a bit mask to determine if the protocol is
    supported. Assert the provided protocol is less than the maximum
    defined so it doesn't potentially perform a shift-out-of-bounds and
    provide a clearer error for undefined protocols vs unsupported ones.
    
    Fixes: 6a2968aaf50c ("NFC: basic NCI protocol implementation")
    Reported-and-tested-by: syzbot+0839b78e119aae1fec78@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=0839b78e119aae1fec78
    Signed-off-by: Jeremy Cline <jeremy@jcline.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20231009200054.82557-1-jeremy@jcline.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2bb3b43b94a1e225c679682af5e3dc65276ceee
Author: Ralph Siemsen <ralph.siemsen@linaro.org>
Date:   Wed Oct 4 16:00:08 2023 -0400

    pinctrl: renesas: rzn1: Enable missing PINMUX
    
    [ Upstream commit f055ff23c331f28aa4ace4b72dc56f63b9a726c8 ]
    
    Enable pin muxing (eg. programmable function), so that the RZ/N1 GPIO
    pins will be configured as specified by the pinmux in the DTS.
    
    This used to be enabled implicitly via CONFIG_GENERIC_PINMUX_FUNCTIONS,
    however that was removed, since the RZ/N1 driver does not call any of
    the generic pinmux functions.
    
    Fixes: 1308fb4e4eae14e6 ("pinctrl: rzn1: Do not select GENERIC_PIN{CTRL_GROUPS,MUX_FUNCTIONS}")
    Signed-off-by: Ralph Siemsen <ralph.siemsen@linaro.org>
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20231004200008.1306798-1-ralph.siemsen@linaro.org
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4140dd77c3b448a3fdab7e8ce6e75e81b32bb21
Author: Nils Hoppmann <niho@linux.ibm.com>
Date:   Mon Oct 9 16:40:48 2023 +0200

    net/smc: Fix pos miscalculation in statistics
    
    [ Upstream commit a950a5921db450c74212327f69950ff03419483a ]
    
    SMC_STAT_PAYLOAD_SUB(_smc_stats, _tech, key, _len, _rc) will calculate
    wrong bucket positions for payloads of exactly 4096 bytes and
    (1 << (m + 12)) bytes, with m == SMC_BUF_MAX - 1.
    
    Intended bucket distribution:
    Assume l == size of payload, m == SMC_BUF_MAX - 1.
    
    Bucket 0                : 0 < l <= 2^13
    Bucket n, 1 <= n <= m-1 : 2^(n+12) < l <= 2^(n+13)
    Bucket m                : l > 2^(m+12)
    
    Current solution:
    _pos = fls64((l) >> 13)
    [...]
    _pos = (_pos < m) ? ((l == 1 << (_pos + 12)) ? _pos - 1 : _pos) : m
    
    For l == 4096, _pos == -1, but should be _pos == 0.
    For l == (1 << (m + 12)), _pos == m, but should be _pos == m - 1.
    
    In order to avoid special treatment of these corner cases, the
    calculation is adjusted. The new solution first subtracts the length by
    one, and then calculates the correct bucket by shifting accordingly,
    i.e. _pos = fls64((l - 1) >> 13), l > 0.
    This not only fixes the issues named above, but also makes the whole
    bucket assignment easier to follow.
    
    Same is done for SMC_STAT_RMB_SIZE_SUB(_smc_stats, _tech, k, _len),
    where the calculation of the bucket position is similar to the one
    named above.
    
    Fixes: e0e4b8fa5338 ("net/smc: Add SMC statistics support")
    Suggested-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Nils Hoppmann <niho@linux.ibm.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Reviewed-by: Dust Li <dust.li@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d888d3f70b0de32b4f51534175f039ddab15eef8
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 9 12:31:10 2023 +0000

    net: nfc: fix races in nfc_llcp_sock_get() and nfc_llcp_sock_get_sn()
    
    [ Upstream commit 31c07dffafce914c1d1543c135382a11ff058d93 ]
    
    Sili Luo reported a race in nfc_llcp_sock_get(), leading to UAF.
    
    Getting a reference on the socket found in a lookup while
    holding a lock should happen before releasing the lock.
    
    nfc_llcp_sock_get_sn() has a similar problem.
    
    Finally nfc_llcp_recv_snl() needs to make sure the socket
    found by nfc_llcp_sock_from_sn() does not disappear.
    
    Fixes: 8f50020ed9b8 ("NFC: LLCP late binding")
    Reported-by: Sili Luo <rootlab@huawei.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20231009123110.3735515-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 249a1fdb95d55f700f834c2fe744002c2d83e84d
Author: Will Mortensen <will@extrahop.com>
Date:   Thu Oct 5 22:37:06 2023 -0700

    net/mlx5e: Again mutually exclude RX-FCS and RX-port-timestamp
    
    [ Upstream commit da6192ca72d5ad913d109d43dc896290ad05d98f ]
    
    Commit 1e66220948df8 ("net/mlx5e: Update rx ring hw mtu upon each rx-fcs
    flag change") seems to have accidentally inverted the logic added in
    commit 0bc73ad46a76 ("net/mlx5e: Mutually exclude RX-FCS and
    RX-port-timestamp").
    
    The impact of this is a little unclear since it seems the FCS scattered
    with RX-FCS is (usually?) correct regardless.
    
    Fixes: 1e66220948df8 ("net/mlx5e: Update rx ring hw mtu upon each rx-fcs flag change")
    Tested-by: Charlotte Tan <charlotte@extrahop.com>
    Reviewed-by: Charlotte Tan <charlotte@extrahop.com>
    Cc: Adham Faris <afaris@nvidia.com>
    Cc: Aya Levin <ayal@nvidia.com>
    Cc: Tariq Toukan <tariqt@nvidia.com>
    Cc: Moshe Shemesh <moshe@nvidia.com>
    Cc: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Will Mortensen <will@extrahop.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Link: https://lore.kernel.org/r/20231006053706.514618-1-will@extrahop.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2112cacb38aa04bf285f28117cbd85410dfaec7c
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Oct 6 15:53:09 2023 +0300

    ixgbe: fix crash with empty VF macvlan list
    
    [ Upstream commit 7b5add9af567c44e12196107f0fe106e194034fd ]
    
    The adapter->vf_mvs.l list needs to be initialized even if the list is
    empty.  Otherwise it will lead to crashes.
    
    Fixes: a1cbb15c1397 ("ixgbe: Add macvlan support for VF")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Link: https://lore.kernel.org/r/ZSADNdIw8zFx1xw2@kadam
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 935a15334d77b78b15629ae0753ee9bc5ebf012d
Author: Radu Pirea (NXP OSS) <radu-nicolae.pirea@oss.nxp.com>
Date:   Thu Oct 5 21:06:35 2023 +0300

    net: phy: mscc: macsec: reject PN update requests
    
    [ Upstream commit e0a8c918daa58700609ebd45e3fcd49965be8bbc ]
    
    Updating the PN is not supported.
    Return -EINVAL if update_pn is true.
    
    The following command succeeded, but it should fail because the driver
    does not update the PN:
    ip macsec set macsec0 tx sa 0 pn 232 on
    
    Fixes: 28c5107aa904 ("net: phy: mscc: macsec support")
    Signed-off-by: Radu Pirea (NXP OSS) <radu-nicolae.pirea@oss.nxp.com>
    Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 667fe9101a3abb08a684614ea393921eaa9b981f
Author: Radu Pirea (NXP OSS) <radu-nicolae.pirea@oss.nxp.com>
Date:   Thu Oct 5 21:06:33 2023 +0300

    net: macsec: indicate next pn update when offloading
    
    [ Upstream commit 0412cc846a1ef38697c3f321f9b174da91ecd3b5 ]
    
    Indicate next PN update using update_pn flag in macsec_context.
    Offloaded MACsec implementations does not know whether or not the
    MACSEC_SA_ATTR_PN attribute was passed for an SA update and assume
    that next PN should always updated, but this is not always true.
    
    The PN can be reset to its initial value using the following command:
    $ ip macsec set macsec0 tx sa 0 off #octeontx2-pf case
    
    Or, the update PN command will succeed even if the driver does not support
    PN updates.
    $ ip macsec set macsec0 tx sa 0 pn 1 on #mscc phy driver case
    
    Comparing the initial PN with the new PN value is not a solution. When
    the user updates the PN using its initial value the command will
    succeed, even if the driver does not support it. Like this:
    $ ip macsec add macsec0 tx sa 0 pn 1 on key 00 \
    ead3664f508eb06c40ac7104cdae4ce5
    $ ip macsec set macsec0 tx sa 0 pn 1 on #mlx5 case
    
    Signed-off-by: Radu Pirea (NXP OSS) <radu-nicolae.pirea@oss.nxp.com>
    Reviewed-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Stable-dep-of: e0a8c918daa5 ("net: phy: mscc: macsec: reject PN update requests")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dcb31e65d26a29a6842500e904907180e80a091
Author: David Vernet <void@manifault.com>
Date:   Mon Oct 9 11:14:13 2023 -0500

    bpf: Fix verifier log for async callback return values
    
    [ Upstream commit 829955981c557c7fc7416581c4cd68a8a0c28620 ]
    
    The verifier, as part of check_return_code(), verifies that async
    callbacks such as from e.g. timers, will return 0. It does this by
    correctly checking that R0->var_off is in tnum_const(0), which
    effectively checks that it's in a range of 0. If this condition fails,
    however, it prints an error message which says that the value should
    have been in (0x0; 0x1). This results in possibly confusing output such
    as the following in which an async callback returns 1:
    
      At async callback the register R0 has value (0x1; 0x0) should have been in (0x0; 0x1)
    
    The fix is easy -- we should just pass the tnum_const(0) as the correct
    range to verbose_invalid_scalar(), which will then print the following:
    
      At async callback the register R0 has value (0x1; 0x0) should have been in (0x0; 0x0)
    
    Fixes: bfc6bb74e4f1 ("bpf: Implement verifier support for validation of async callbacks.")
    Signed-off-by: David Vernet <void@manifault.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20231009161414.235829-1-void@manifault.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a217af2c67ff23be71fe46e718e8893e38dcacb
Author: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
Date:   Tue Sep 5 18:02:03 2023 +0800

    drm/vmwgfx: fix typo of sizeof argument
    
    [ Upstream commit 39465cac283702a7d4a507a558db81898029c6d3 ]
    
    Since size of 'header' pointer and '*header' structure is equal on 64-bit
    machines issue probably didn't cause any wrong behavior. But anyway,
    fixing typo is required.
    
    Fixes: 7a73ba7469cb ("drm/vmwgfx: Use TTM handles instead of SIDs as user-space surface handles.")
    Co-developed-by: Ivanov Mikhail <ivanov.mikhail1@huawei-partners.com>
    Signed-off-by: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
    Reviewed-by: Zack Rusin <zackr@vmware.com>
    Signed-off-by: Zack Rusin <zackr@vmware.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230905100203.1716731-1-konstantin.meskhidze@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72ef70886556f3785705a0c5e53c9a6d10bde781
Author: Björn Töpel <bjorn@rivosinc.com>
Date:   Wed Oct 4 14:07:05 2023 +0200

    riscv, bpf: Sign-extend return values
    
    [ Upstream commit 2f1b0d3d733169eb11680bfa97c266ae5e757148 ]
    
    The RISC-V architecture does not expose sub-registers, and hold all
    32-bit values in a sign-extended format [1] [2]:
    
      | The compiler and calling convention maintain an invariant that all
      | 32-bit values are held in a sign-extended format in 64-bit
      | registers. Even 32-bit unsigned integers extend bit 31 into bits
      | 63 through 32. Consequently, conversion between unsigned and
      | signed 32-bit integers is a no-op, as is conversion from a signed
      | 32-bit integer to a signed 64-bit integer.
    
    While BPF, on the other hand, exposes sub-registers, and use
    zero-extension (similar to arm64/x86).
    
    This has led to some subtle bugs, where a BPF JITted program has not
    sign-extended the a0 register (return value in RISC-V land), passed
    the return value up the kernel, e.g.:
    
      | int from_bpf(void);
      |
      | long foo(void)
      | {
      |    return from_bpf();
      | }
    
    Here, a0 would be 0xffff_ffff, instead of the expected
    0xffff_ffff_ffff_ffff.
    
    Internally, the RISC-V JIT uses a5 as a dedicated register for BPF
    return values.
    
    Keep a5 zero-extended, but explicitly sign-extend a0 (which is used
    outside BPF land). Now that a0 (RISC-V ABI) and a5 (BPF ABI) differs,
    a0 is only moved to a5 for non-BPF native calls (BPF_PSEUDO_CALL).
    
    Fixes: 2353ecc6f91f ("bpf, riscv: add BPF JIT for RV64G")
    Signed-off-by: Björn Töpel <bjorn@rivosinc.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://github.com/riscv/riscv-isa-manual/releases/download/riscv-isa-release-056b6ff-2023-10-02/unpriv-isa-asciidoc.pdf # [2]
    Link: https://github.com/riscv-non-isa/riscv-elf-psabi-doc/releases/download/draft-20230929-e5c800e661a53efe3c2678d71a306323b60eb13b/riscv-abi.pdf # [2]
    Link: https://lore.kernel.org/bpf/20231004120706.52848-2-bjorn@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7795592e08189dece5265b752981f3b80f0246e7
Author: Pu Lehui <pulehui@huawei.com>
Date:   Wed Feb 15 21:52:03 2023 +0800

    riscv, bpf: Factor out emit_call for kernel and bpf context
    
    [ Upstream commit 0fd1fd0104954380477353aea29c347e85dff16d ]
    
    The current emit_call function is not suitable for kernel function call as
    it store return value to bpf R0 register. We can separate it out for common
    use. Meanwhile, simplify judgment logic, that is, fixed function address
    can use jal or auipc+jalr, while the unfixed can use only auipc+jalr.
    
    Signed-off-by: Pu Lehui <pulehui@huawei.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Björn Töpel <bjorn@rivosinc.com>
    Acked-by: Björn Töpel <bjorn@rivosinc.com>
    Link: https://lore.kernel.org/bpf/20230215135205.1411105-3-pulehui@huaweicloud.com
    Stable-dep-of: 2f1b0d3d7331 ("riscv, bpf: Sign-extend return values")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58941cc742ca7bc4201feecf9c7ed7724c992384
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Thu Oct 5 16:08:31 2023 +0200

    xen-netback: use default TX queue size for vifs
    
    [ Upstream commit 66cf7435a26917c0c4d6245ad9137e7606e84fdf ]
    
    Do not set netback interfaces (vifs) default TX queue size to the ring size.
    The TX queue size is not related to the ring size, and using the ring size (32)
    as the queue size can lead to packet drops.  Note the TX side of the vif
    interface in the netback domain is the one receiving packets to be injected
    to the guest.
    
    Do not explicitly set the TX queue length to any value when creating the
    interface, and instead use the system default.  Note that the queue length can
    also be adjusted at runtime.
    
    Fixes: f942dc2552b8 ('xen network backend driver')
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Reviewed-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Acked-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cffdced18af8897898b5e80eb4c93607bf2852e0
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Apr 28 14:23:09 2022 -0700

    eth: remove copies of the NAPI_POLL_WEIGHT define
    
    [ Upstream commit 5f012b40ef639343a976553bf3cc26dd0474756e ]
    
    Defining local versions of NAPI_POLL_WEIGHT with the same
    values in the drivers just makes refactoring harder.
    
    Drop the special defines in a bunch of drivers where the
    removal is relatively simple so grouping into one patch
    does not impact reviewability.
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Paul Durrant <paul@xen.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 66cf7435a269 ("xen-netback: use default TX queue size for vifs")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c360eec533231d24814440ee25f6f511f7b1222
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Thu Oct 5 17:00:12 2023 +0300

    mlxsw: fix mlxsw_sp2_nve_vxlan_learning_set() return type
    
    [ Upstream commit 1e0b72a2a6432c0ef67ee5ce8d9172a7c20bba25 ]
    
    The mlxsw_sp2_nve_vxlan_learning_set() function is supposed to return
    zero on success or negative error codes.  So it needs to be type int
    instead of bool.
    
    Fixes: 4ee70efab68d ("mlxsw: spectrum_nve: Add support for VXLAN on Spectrum-2")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84c6aa0ae5c4dc121f9996bb8fed46c80909d80e
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Oct 7 11:30:49 2023 +0800

    ieee802154: ca8210: Fix a potential UAF in ca8210_probe
    
    [ Upstream commit f990874b1c98fe8e57ee9385669f501822979258 ]
    
    If of_clk_add_provider() fails in ca8210_register_ext_clock(),
    it calls clk_unregister() to release priv->clk and returns an
    error. However, the caller ca8210_probe() then calls ca8210_remove(),
    where priv->clk is freed again in ca8210_unregister_ext_clock(). In
    this case, a use-after-free may happen in the second time we call
    clk_unregister().
    
    Fix this by removing the first clk_unregister(). Also, priv->clk could
    be an error code on failure of clk_register_fixed_rate(). Use
    IS_ERR_OR_NULL to catch this case in ca8210_unregister_ext_clock().
    
    Fixes: ded845a781a5 ("ieee802154: Add CA8210 IEEE 802.15.4 device driver")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Message-ID: <20231007033049.22353-1-dinghao.liu@zju.edu.cn>
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 616761cf9df9af838c0a1a1232a69322a9eb67e6
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Thu Oct 5 10:12:01 2023 +0900

    ravb: Fix use-after-free issue in ravb_tx_timeout_work()
    
    [ Upstream commit 3971442870713de527684398416970cf025b4f89 ]
    
    The ravb_stop() should call cancel_work_sync(). Otherwise,
    ravb_tx_timeout_work() is possible to use the freed priv after
    ravb_remove() was called like below:
    
    CPU0                    CPU1
                            ravb_tx_timeout()
    ravb_remove()
    unregister_netdev()
    free_netdev(ndev)
    // free priv
                            ravb_tx_timeout_work()
                            // use priv
    
    unregister_netdev() will call .ndo_stop() so that ravb_stop() is
    called. And, after phy_stop() is called, netif_carrier_off()
    is also called. So that .ndo_tx_timeout() will not be called
    after phy_stop().
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Reported-by: Zheng Wang <zyytlz.wz@163.com>
    Closes: https://lore.kernel.org/netdev/20230725030026.1664873-1-zyytlz.wz@163.com/
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20231005011201.14368-3-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30ebd4177593f212a7f00855da0c1de16ff3b1d5
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Thu Oct 5 10:12:00 2023 +0900

    ravb: Fix up dma_free_coherent() call in ravb_remove()
    
    [ Upstream commit e6864af61493113558c502b5cd0d754c19b93277 ]
    
    In ravb_remove(), dma_free_coherent() should be call after
    unregister_netdev(). Otherwise, this controller is possible to use
    the freed buffer.
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/20231005011201.14368-2-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f39de2bd1d2e60539e309e2e4f4a153d1aa1b42
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Thu Sep 7 18:26:16 2023 -0700

    drm/msm/dpu: change _dpu_plane_calc_bw() to use u64 to avoid overflow
    
    [ Upstream commit 95e681ca3b65e4ce3d2537b47672d787b7d30375 ]
    
    _dpu_plane_calc_bw() uses integer variables to calculate the bandwidth
    used during plane bandwidth calculations. However for high resolution
    displays this overflows easily and leads to below errors
    
    [dpu error]crtc83 failed performance check -7
    
    Promote the intermediate variables to u64 to avoid overflow.
    
    changes in v2:
            - change to u64 where actually needed in the math
    
    Fixes: c33b7c0389e1 ("drm/msm/dpu: add support for clk and bw scaling for display")
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reported-by: Nia Espera <nespera@igalia.com>
    Closes: https://gitlab.freedesktop.org/drm/msm/-/issues/32
    Tested-by: Nia Espera <nespera@igalia.com>
    Patchwork: https://patchwork.freedesktop.org/patch/556288/
    Link: https://lore.kernel.org/r/20230908012616.20654-1-quic_abhinavk@quicinc.com
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85ae07d4dcc652809492fba9243da67451a1a08e
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Fri Sep 15 15:59:40 2023 +0300

    drm/msm/dsi: fix irq_of_parse_and_map() error checking
    
    [ Upstream commit 6a1d4c7976dd1ee7c9f80bc8e62801ec7b1f2f58 ]
    
    The irq_of_parse_and_map() function returns zero on error.  It
    never returns negative error codes.  Fix the check.
    
    Fixes: a689554ba6ed ("drm/msm: Initial add DSI connector support")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/557715/
    Link: https://lore.kernel.org/r/4f3c5c98-04f7-43f7-900f-5d7482c83eef@moroto.mountain
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a890c7d4d0f89676860988e4cc3f3a0e6064f20
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Fri Sep 15 13:44:25 2023 -0700

    drm/msm/dsi: skip the wait for video mode done if not applicable
    
    [ Upstream commit ab483e3adcc178254eb1ce0fbdfbea65f86f1006 ]
    
    dsi_wait4video_done() API waits for the DSI video mode engine to
    become idle so that we can transmit the DCS commands in the
    beginning of BLLP. However, with the current sequence, the MDP
    timing engine is turned on after the panel's pre_enable() callback
    which can send out the DCS commands needed to power up the panel.
    
    During those cases, this API will always timeout and print out the
    error spam leading to long bootup times and log flooding.
    
    Fix this by checking if the DSI video engine was actually busy before
    waiting for it to become idle otherwise this is a redundant wait.
    
    changes in v2:
            - move the reg read below the video mode check
            - minor fixes in commit text
    
    Closes: https://gitlab.freedesktop.org/drm/msm/-/issues/34
    Fixes: a689554ba6ed ("drm/msm: Initial add DSI connector support")
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/557853/
    Link: https://lore.kernel.org/r/20230915204426.19011-1-quic_abhinavk@quicinc.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9de60b6830ce16e9544e8832341e585f0c636aa
Author: Kuogee Hsieh <quic_khsieh@quicinc.com>
Date:   Tue Aug 8 15:19:50 2023 -0700

    drm/msm/dp: do not reinitialize phy unless retry during link training
    
    [ Upstream commit 0c1a2e69bcb506f48ebf94bd199bab0b93f66da2 ]
    
    DP PHY re-initialization done using dp_ctrl_reinitialize_mainlink() will
    cause PLL unlocked initially and then PLL gets locked at the end of
    initialization. PLL_UNLOCKED interrupt will fire during this time if the
    interrupt mask is enabled.
    
    However currently DP driver link training implementation incorrectly
    re-initializes PHY unconditionally during link training as the PHY was
    already configured in dp_ctrl_enable_mainlink_clocks().
    
    Fix this by re-initializing the PHY only if the previous link training
    failed.
    
    [drm:dp_aux_isr] *ERROR* Unexpected DP AUX IRQ 0x01000000 when not busy
    
    Fixes: c943b4948b58 ("drm/msm/dp: add displayPort driver support")
    Closes: https://gitlab.freedesktop.org/drm/msm/-/issues/30
    Signed-off-by: Kuogee Hsieh <quic_khsieh@quicinc.com>
    Tested-by: Abhinav Kumar <quic_abhinavk@quicinc.com> # sc7280
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Tested-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Patchwork: https://patchwork.freedesktop.org/patch/551847/
    Link: https://lore.kernel.org/r/1691533190-19335-1-git-send-email-quic_khsieh@quicinc.com
    [quic_abhinavk@quicinc.com: added line break in commit text]
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afe5f596b58838a041436c02ab221325925b78d2
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Fri Oct 6 10:48:01 2023 +0530

    KEYS: trusted: Remove redundant static calls usage
    
    [ Upstream commit 01bbafc63b65689cb179ca537971286bc27f3b74 ]
    
    Static calls invocations aren't well supported from module __init and
    __exit functions. Especially the static call from cleanup_trusted() led
    to a crash on x86 kernel with CONFIG_DEBUG_VIRTUAL=y.
    
    However, the usage of static call invocations for trusted_key_init()
    and trusted_key_exit() don't add any value from either a performance or
    security perspective. Hence switch to use indirect function calls instead.
    
    Note here that although it will fix the current crash report, ultimately
    the static call infrastructure should be fixed to either support its
    future usage from module __init and __exit functions or not.
    
    Reported-and-tested-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Link: https://lore.kernel.org/lkml/ZRhKq6e5nF%2F4ZIV1@fedora/#t
    Fixes: 5d0682be3189 ("KEYS: trusted: Add generic trusted keys framework")
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20e73ece06b3368a45e29b7671acb283f3de583f
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Fri May 13 16:57:00 2022 +0200

    KEYS: trusted: allow use of kernel RNG for key material
    
    [ Upstream commit fcd7c26901c83681532c6daac599e53d4df11738 ]
    
    The two existing trusted key sources don't make use of the kernel RNG,
    but instead let the hardware doing the sealing/unsealing also
    generate the random key material. However, both users and future
    backends may want to place less trust into the quality of the trust
    source's random number generator and instead reuse the kernel entropy
    pool, which can be seeded from multiple entropy sources.
    
    Make this possible by adding a new trusted.rng parameter,
    that will force use of the kernel RNG. In its absence, it's up
    to the trust source to decide, which random numbers to use,
    maintaining the existing behavior.
    
    Suggested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Acked-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Pankaj Gupta <pankaj.gupta@nxp.com>
    Reviewed-by: David Gstir <david@sigma-star.at>
    Reviewed-by: Pankaj Gupta <pankaj.gupta@nxp.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Pankaj Gupta <pankaj.gupta@nxp.com>
    Tested-by: Michael Walle <michael@walle.cc> # on ls1028a (non-E and E)
    Tested-by: John Ernberg <john.ernberg@actia.se> # iMX8QXP
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Stable-dep-of: 01bbafc63b65 ("KEYS: trusted: Remove redundant static calls usage")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a01d68b6c666eb967201437b9c95496244cc6ae9
Author: WhaleChang <whalechang@google.com>
Date:   Fri Oct 6 12:48:49 2023 +0800

    ALSA: usb-audio: Fix microphone sound on Opencomm2 Headset
    
    commit 6a83d6f3bb3c329a73e3483651fb77b78bac1878 upstream.
    
    When a Opencomm2 Headset is connected to a Bluetooth USB dongle,
    the audio playback functions properly, but the microphone does not work.
    
    In the dmesg logs, there are messages indicating that the init_pitch
    function fails when the capture process begins.
    
    The microphone only functions when the ep pitch control is not set.
    
    Toggling the pitch control off bypasses the init_piatch function
    and allows the microphone to work.
    
    Signed-off-by: WhaleChang <whalechang@google.com>
    Link: https://lore.kernel.org/r/20231006044852.4181022-1-whalechang@google.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b5e58299eacf7af609a2b8d5c692fdc99e1a9ed
Author: Jordan Rife <jrife@google.com>
Date:   Thu Sep 21 18:46:42 2023 -0500

    net: prevent address rewrite in kernel_bind()
    
    commit c889a99a21bf124c3db08d09df919f0eccc5ea4c upstream.
    
    Similar to the change in commit 0bdf399342c5("net: Avoid address
    overwrite in kernel_connect"), BPF hooks run on bind may rewrite the
    address passed to kernel_bind(). This change
    
    1) Makes a copy of the bind address in kernel_bind() to insulate
       callers.
    2) Replaces direct calls to sock->ops->bind() in net with kernel_bind()
    
    Link: https://lore.kernel.org/netdev/20230912013332.2048422-1-jrife@google.com/
    Fixes: 4fbac77d2d09 ("bpf: Hooks for sys_bind")
    Cc: stable@vger.kernel.org
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jordan Rife <jrife@google.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56e96b38d2f7cd95b3c30eb70decac7233915e0a
Author: Jan Kara <jack@suse.cz>
Date:   Wed Oct 4 15:32:01 2023 +0200

    quota: Fix slow quotaoff
    
    commit 869b6ea1609f655a43251bf41757aa44e5350a8f upstream.
    
    Eric has reported that commit dabc8b207566 ("quota: fix dqput() to
    follow the guarantees dquot_srcu should provide") heavily increases
    runtime of generic/270 xfstest for ext4 in nojournal mode. The reason
    for this is that ext4 in nojournal mode leaves dquots dirty until the last
    dqput() and thus the cleanup done in quota_release_workfn() has to write
    them all. Due to the way quota_release_workfn() is written this results
    in synchronize_srcu() call for each dirty dquot which makes the dquot
    cleanup when turning quotas off extremely slow.
    
    To be able to avoid synchronize_srcu() for each dirty dquot we need to
    rework how we track dquots to be cleaned up. Instead of keeping the last
    dquot reference while it is on releasing_dquots list, we drop it right
    away and mark the dquot with new DQ_RELEASING_B bit instead. This way we
    can we can remove dquot from releasing_dquots list when new reference to
    it is acquired and thus there's no need to call synchronize_srcu() each
    time we drop dq_list_lock.
    
    References: https://lore.kernel.org/all/ZRytn6CxFK2oECUt@debian-BULLSEYE-live-builder-AMD64
    Reported-by: Eric Whitney <enwlinux@gmail.com>
    Fixes: dabc8b207566 ("quota: fix dqput() to follow the guarantees dquot_srcu should provide")
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28ddc1e0b898291323b62d770b1b931de131a528
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Oct 5 20:26:38 2023 +0200

    HID: logitech-hidpp: Fix kernel crash on receiver USB disconnect
    
    commit dac501397b9d81e4782232c39f94f4307b137452 upstream.
    
    hidpp_connect_event() has *four* time-of-check vs time-of-use (TOCTOU)
    races when it races with itself.
    
    hidpp_connect_event() primarily runs from a workqueue but it also runs
    on probe() and if a "device-connected" packet is received by the hw
    when the thread running hidpp_connect_event() from probe() is waiting on
    the hw, then a second thread running hidpp_connect_event() will be
    started from the workqueue.
    
    This opens the following races (note the below code is simplified):
    
    1. Retrieving + printing the protocol (harmless race):
    
            if (!hidpp->protocol_major) {
                    hidpp_root_get_protocol_version()
                    hidpp->protocol_major = response.rap.params[0];
            }
    
    We can actually see this race hit in the dmesg in the abrt output
    attached to rhbz#2227968:
    
    [ 3064.624215] logitech-hidpp-device 0003:046D:4071.0049: HID++ 4.5 device connected.
    [ 3064.658184] logitech-hidpp-device 0003:046D:4071.0049: HID++ 4.5 device connected.
    
    Testing with extra logging added has shown that after this the 2 threads
    take turn grabbing the hw access mutex (send_mutex) so they ping-pong
    through all the other TOCTOU cases managing to hit all of them:
    
    2. Updating the name to the HIDPP name (harmless race):
    
            if (hidpp->name == hdev->name) {
                    ...
                    hidpp->name = new_name;
            }
    
    3. Initializing the power_supply class for the battery (problematic!):
    
    hidpp_initialize_battery()
    {
            if (hidpp->battery.ps)
                    return 0;
    
            probe_battery(); /* Blocks, threads take turns executing this */
    
            hidpp->battery.desc.properties =
                    devm_kmemdup(dev, hidpp_battery_props, cnt, GFP_KERNEL);
    
            hidpp->battery.ps =
                    devm_power_supply_register(&hidpp->hid_dev->dev,
                                               &hidpp->battery.desc, cfg);
    }
    
    4. Creating delayed input_device (potentially problematic):
    
            if (hidpp->delayed_input)
                    return;
    
            hidpp->delayed_input = hidpp_allocate_input(hdev);
    
    The really big problem here is 3. Hitting the race leads to the following
    sequence:
    
            hidpp->battery.desc.properties =
                    devm_kmemdup(dev, hidpp_battery_props, cnt, GFP_KERNEL);
    
            hidpp->battery.ps =
                    devm_power_supply_register(&hidpp->hid_dev->dev,
                                               &hidpp->battery.desc, cfg);
    
            ...
    
            hidpp->battery.desc.properties =
                    devm_kmemdup(dev, hidpp_battery_props, cnt, GFP_KERNEL);
    
            hidpp->battery.ps =
                    devm_power_supply_register(&hidpp->hid_dev->dev,
                                               &hidpp->battery.desc, cfg);
    
    So now we have registered 2 power supplies for the same battery,
    which looks a bit weird from userspace's pov but this is not even
    the really big problem.
    
    Notice how:
    
    1. This is all devm-maganaged
    2. The hidpp->battery.desc struct is shared between the 2 power supplies
    3. hidpp->battery.desc.properties points to the result from the second
       devm_kmemdup()
    
    This causes a use after free scenario on USB disconnect of the receiver:
    1. The last registered power supply class device gets unregistered
    2. The memory from the last devm_kmemdup() call gets freed,
       hidpp->battery.desc.properties now points to freed memory
    3. The first registered power supply class device gets unregistered,
       this involves sending a remove uevent to userspace which invokes
       power_supply_uevent() to fill the uevent data
    4. power_supply_uevent() uses hidpp->battery.desc.properties which
       now points to freed memory leading to backtraces like this one:
    
    Sep 22 20:01:35 eric kernel: BUG: unable to handle page fault for address: ffffb2140e017f08
    ...
    Sep 22 20:01:35 eric kernel: Workqueue: usb_hub_wq hub_event
    Sep 22 20:01:35 eric kernel: RIP: 0010:power_supply_uevent+0xee/0x1d0
    ...
    Sep 22 20:01:35 eric kernel:  ? asm_exc_page_fault+0x26/0x30
    Sep 22 20:01:35 eric kernel:  ? power_supply_uevent+0xee/0x1d0
    Sep 22 20:01:35 eric kernel:  ? power_supply_uevent+0x10d/0x1d0
    Sep 22 20:01:35 eric kernel:  dev_uevent+0x10f/0x2d0
    Sep 22 20:01:35 eric kernel:  kobject_uevent_env+0x291/0x680
    Sep 22 20:01:35 eric kernel:  power_supply_unregister+0x8e/0xa0
    Sep 22 20:01:35 eric kernel:  release_nodes+0x3d/0xb0
    Sep 22 20:01:35 eric kernel:  devres_release_group+0xfc/0x130
    Sep 22 20:01:35 eric kernel:  hid_device_remove+0x56/0xa0
    Sep 22 20:01:35 eric kernel:  device_release_driver_internal+0x19f/0x200
    Sep 22 20:01:35 eric kernel:  bus_remove_device+0xc6/0x130
    Sep 22 20:01:35 eric kernel:  device_del+0x15c/0x3f0
    Sep 22 20:01:35 eric kernel:  ? __queue_work+0x1df/0x440
    Sep 22 20:01:35 eric kernel:  hid_destroy_device+0x4b/0x60
    Sep 22 20:01:35 eric kernel:  logi_dj_remove+0x9a/0x100 [hid_logitech_dj 5c91534a0ead2b65e04dd799a0437e3b99b21bc4]
    Sep 22 20:01:35 eric kernel:  hid_device_remove+0x44/0xa0
    Sep 22 20:01:35 eric kernel:  device_release_driver_internal+0x19f/0x200
    Sep 22 20:01:35 eric kernel:  bus_remove_device+0xc6/0x130
    Sep 22 20:01:35 eric kernel:  device_del+0x15c/0x3f0
    Sep 22 20:01:35 eric kernel:  ? __queue_work+0x1df/0x440
    Sep 22 20:01:35 eric kernel:  hid_destroy_device+0x4b/0x60
    Sep 22 20:01:35 eric kernel:  usbhid_disconnect+0x47/0x60 [usbhid 727dcc1c0b94e6b4418727a468398ac3bca492f3]
    Sep 22 20:01:35 eric kernel:  usb_unbind_interface+0x90/0x270
    Sep 22 20:01:35 eric kernel:  device_release_driver_internal+0x19f/0x200
    Sep 22 20:01:35 eric kernel:  bus_remove_device+0xc6/0x130
    Sep 22 20:01:35 eric kernel:  device_del+0x15c/0x3f0
    Sep 22 20:01:35 eric kernel:  ? kobject_put+0xa0/0x1d0
    Sep 22 20:01:35 eric kernel:  usb_disable_device+0xcd/0x1e0
    Sep 22 20:01:35 eric kernel:  usb_disconnect+0xde/0x2c0
    Sep 22 20:01:35 eric kernel:  usb_disconnect+0xc3/0x2c0
    Sep 22 20:01:35 eric kernel:  hub_event+0xe80/0x1c10
    
    There have been quite a few bug reports (see Link tags) about this crash.
    
    Fix all the TOCTOU issues, including the really bad power-supply related
    system crash on USB disconnect, by making probe() use the workqueue for
    running hidpp_connect_event() too, so that it can never run more then once.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2227221
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2227968
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2227968
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2242189
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217412#c58
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231005182638.3776-1-hdegoede@redhat.com
    Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b930f0f7bbc20d15793f734f6ee25b2a37c52ea6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 12 10:17:39 2023 +0200

    lib/test_meminit: fix off-by-one error in test_pages()
    
    commit efb78fa86e95 ("lib/test_meminit: allocate pages up to order
    MAX_ORDER") works great in kernels 6.4 and newer thanks to commit
    23baf831a32c ("mm, treewide: redefine MAX_ORDER sanely"), but for older
    kernels, the loop is off by one, which causes crashes when the test
    runs.
    
    Fix this up by changing "<= MAX_ORDER" "< MAX_ORDER" to allow the test
    to work properly for older kernel branches.
    
    Fixes: 7ad44409cd3b ("lib/test_meminit: allocate pages up to order MAX_ORDER")
    Cc: Andrew Donnellan <ajd@linux.ibm.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Xiaoke Wang <xkernel.wang@foxmail.com>
    Cc: <stable@vger.kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 982bd86fd65955c1ecc7ba4b749a6956eece0a59
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Oct 4 13:16:24 2023 +0200

    platform/x86: hp-wmi:: Mark driver struct with __refdata to prevent section mismatch warning
    
    [ Upstream commit 5b44abbc39ca15df80d0da4756078c98c831090f ]
    
    As described in the added code comment, a reference to .exit.text is ok
    for drivers registered via module_platform_driver_probe(). Make this
    explicit to prevent a section mismatch warning:
    
            WARNING: modpost: drivers/platform/x86/hp/hp-wmi: section mismatch in reference: hp_wmi_driver+0x8 (section: .data) -> hp_wmi_bios_remove (section: .exit.text)
    
    Fixes: c165b80cfecc ("hp-wmi: fix handling of platform device")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Link: https://lore.kernel.org/r/20231004111624.2667753-1-u.kleine-koenig@pengutronix.de
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 124cf0ea4b82e1444ec8c7420af4e7db5558c293
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Mon Sep 25 16:28:18 2023 +0200

    platform/x86: think-lmi: Fix reference leak
    
    [ Upstream commit 528ab3e605cabf2f9c9bd5944d3bfe15f6e94f81 ]
    
    If a duplicate attribute is found using kset_find_obj(), a reference
    to that attribute is returned which needs to be disposed accordingly
    using kobject_put(). Move the setting name validation into a separate
    function to allow for this change without having to duplicate the
    cleanup code for this setting.
    As a side note, a very similar bug was fixed in
    commit 7295a996fdab ("platform/x86: dell-sysman: Fix reference leak"),
    so it seems that the bug was copied from that driver.
    
    Compile-tested only.
    
    Fixes: 1bcad8e510b2 ("platform/x86: think-lmi: Fix issues with duplicate attributes")
    Reviewed-by: Mark Pearson <mpearson-lenovo@squebb.ca>
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Link: https://lore.kernel.org/r/20230925142819.74525-2-W_Armin@gmx.de
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d2a16f878f07d5f330b37c71c58855e8d82e5c5
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Sep 28 11:35:39 2023 +0200

    of: overlay: Reorder struct fragment fields kerneldoc
    
    [ Upstream commit 5d007ffdf6025fe83e497c44ed7c8aa8f150c4d1 ]
    
    The fields of the fragment structure were reordered, but the kerneldoc
    was not updated.
    
    Fixes: 81225ea682f45629 ("of: overlay: reorder fields in struct fragment")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/cfa36d2bb95e3c399c415dbf58057302c70ef375.1695893695.git.geert+renesas@glider.be
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10f4a0b6657e64b4e86ce7ed90789f66d57d4e6d
Author: Jing Zhang <renyu.zj@linux.alibaba.com>
Date:   Mon Sep 25 11:22:32 2023 +0800

    perf/arm-cmn: Fix the unhandled overflow status of counter 4 to 7
    
    [ Upstream commit 7f949f6f54ff593123ab95b6247bfa4542a65580 ]
    
    The register por_dt_pmovsr Bits[7:0] indicates overflow from counters 7
    to 0. But in arm_cmn_handle_irq(), only handled the overflow status of
    Bits[3:0] which results in unhandled overflow status of counters 4 to 7.
    
    So let the overflow status of DTC counters 4 to 7 to be handled.
    
    Fixes: 0ba64770a2f2 ("perf: Add Arm CMN-600 PMU driver")
    Signed-off-by: Jing Zhang <renyu.zj@linux.alibaba.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/1695612152-123633-1-git-send-email-renyu.zj@linux.alibaba.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7966e2191d0abf88498aa009d8f148b6f30fd0a
Author: Artem Chernyshev <artem.chernyshev@red-soft.ru>
Date:   Tue Sep 5 15:40:48 2023 +0300

    RDMA/cxgb4: Check skb value for failure to allocate
    
    [ Upstream commit 8fb8a82086f5bda6893ea6557c5a458e4549c6d7 ]
    
    get_skb() can fail to allocate skb, so check it.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 5be78ee924ae ("RDMA/cxgb4: Fix LE hash collision bug for active open connection")
    Signed-off-by: Artem Chernyshev <artem.chernyshev@red-soft.ru>
    Link: https://lore.kernel.org/r/20230905124048.284165-1-artem.chernyshev@red-soft.ru
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9bdffb3f9aaeff8379c83f5449c6b42cb71c2b5
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Aug 23 13:57:27 2023 -0700

    RDMA/srp: Do not call scsi_done() from srp_abort()
    
    [ Upstream commit e193b7955dfad68035b983a0011f4ef3590c85eb ]
    
    After scmd_eh_abort_handler() has called the SCSI LLD eh_abort_handler
    callback, it performs one of the following actions:
    * Call scsi_queue_insert().
    * Call scsi_finish_command().
    * Call scsi_eh_scmd_add().
    Hence, SCSI abort handlers must not call scsi_done(). Otherwise all
    the above actions would trigger a use-after-free. Hence remove the
    scsi_done() call from srp_abort(). Keep the srp_free_req() call
    before returning SUCCESS because we may not see the command again if
    SUCCESS is returned.
    
    Cc: Bob Pearson <rpearsonhpe@gmail.com>
    Cc: Shinichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Fixes: d8536670916a ("IB/srp: Avoid having aborted requests hang")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Link: https://lore.kernel.org/r/20230823205727.505681-1-bvanassche@acm.org
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d4999589ebcfd83949f7a2b20acb528e6a7059a
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Oct 7 13:28:00 2021 -0700

    scsi: ib_srp: Call scsi_done() directly
    
    [ Upstream commit 5f9ae9eecb15ef00d89a5884add1117a8e634e7f ]
    
    Conditional statements are faster than indirect calls. Hence call
    scsi_done() directly.
    
    Link: https://lore.kernel.org/r/20211007202923.2174984-6-bvanassche@acm.org
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: e193b7955dfa ("RDMA/srp: Do not call scsi_done() from srp_abort()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2746cdfd5e51a7cc3250a498e4e90e5b4cea37a
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Oct 7 13:27:57 2021 -0700

    scsi: core: Rename scsi_mq_done() into scsi_done() and export it
    
    [ Upstream commit a710eacb9d13cb5d9eb5341ebc6fc8f7b96f8c6f ]
    
    Since the removal of the legacy block layer there is only one completion
    function left in the SCSI core, namely scsi_mq_done(). Rename it into
    scsi_done(). Export that function to allow SCSI LLDs to call it directly.
    
    Link: https://lore.kernel.org/r/20211007202923.2174984-3-bvanassche@acm.org
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: e193b7955dfa ("RDMA/srp: Do not call scsi_done() from srp_abort()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f2350e204da71cba5110764c4e2213611c88fcd
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Oct 7 13:27:56 2021 -0700

    scsi: core: Use a structure member to track the SCSI command submitter
    
    [ Upstream commit bf23e619039d360d503b7282d030daf2277a5d47 ]
    
    Conditional statements are faster than indirect calls. Use a structure
    member to track the SCSI command submitter such that later patches can call
    scsi_done(scmd) instead of scmd->scsi_done(scmd).
    
    The asymmetric behavior that scsi_send_eh_cmnd() sets the submission
    context to the SCSI error handler and that it does not restore the
    submission context to the SCSI core is retained.
    
    Link: https://lore.kernel.org/r/20211007202923.2174984-2-bvanassche@acm.org
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Stable-dep-of: e193b7955dfa ("RDMA/srp: Do not call scsi_done() from srp_abort()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29298c85a81abdc512e87537515ed4b1a9601d0e
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Mon Sep 25 20:04:17 2023 +0800

    iommu/vt-d: Avoid memory allocation in iommu_suspend()
    
    [ Upstream commit 59df44bfb0ca4c3ee1f1c3c5d0ee8e314844799e ]
    
    The iommu_suspend() syscore suspend callback is invoked with IRQ disabled.
    Allocating memory with the GFP_KERNEL flag may re-enable IRQs during
    the suspend callback, which can cause intermittent suspend/hibernation
    problems with the following kernel traces:
    
    Calling iommu_suspend+0x0/0x1d0
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 15 at kernel/time/timekeeping.c:868 ktime_get+0x9b/0xb0
    ...
    CPU: 0 PID: 15 Comm: rcu_preempt Tainted: G     U      E      6.3-intel #r1
    RIP: 0010:ktime_get+0x9b/0xb0
    ...
    Call Trace:
     <IRQ>
     tick_sched_timer+0x22/0x90
     ? __pfx_tick_sched_timer+0x10/0x10
     __hrtimer_run_queues+0x111/0x2b0
     hrtimer_interrupt+0xfa/0x230
     __sysvec_apic_timer_interrupt+0x63/0x140
     sysvec_apic_timer_interrupt+0x7b/0xa0
     </IRQ>
     <TASK>
     asm_sysvec_apic_timer_interrupt+0x1f/0x30
    ...
    ------------[ cut here ]------------
    Interrupts enabled after iommu_suspend+0x0/0x1d0
    WARNING: CPU: 0 PID: 27420 at drivers/base/syscore.c:68 syscore_suspend+0x147/0x270
    CPU: 0 PID: 27420 Comm: rtcwake Tainted: G     U  W   E      6.3-intel #r1
    RIP: 0010:syscore_suspend+0x147/0x270
    ...
    Call Trace:
     <TASK>
     hibernation_snapshot+0x25b/0x670
     hibernate+0xcd/0x390
     state_store+0xcf/0xe0
     kobj_attr_store+0x13/0x30
     sysfs_kf_write+0x3f/0x50
     kernfs_fop_write_iter+0x128/0x200
     vfs_write+0x1fd/0x3c0
     ksys_write+0x6f/0xf0
     __x64_sys_write+0x1d/0x30
     do_syscall_64+0x3b/0x90
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    Given that only 4 words memory is needed, avoid the memory allocation in
    iommu_suspend().
    
    CC: stable@kernel.org
    Fixes: 33e07157105e ("iommu/vt-d: Avoid GFP_ATOMIC where it is not needed")
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Tested-by: Ooi, Chin Hao <chin.hao.ooi@intel.com>
    Link: https://lore.kernel.org/r/20230921093956.234692-1-rui.zhang@intel.com
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20230925120417.55977-2-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

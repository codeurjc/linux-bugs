commit d54cfc420586425d418a53871290cc4a59d33501
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 5 18:25:05 2023 +0100

    Linux 5.15.120
    
    Link: https://lore.kernel.org/r/20230703184518.896751186@linuxfoundation.org
    Link: https://lore.kernel.org/r/20230704084610.981452877@linuxfoundation.org
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c06edf13f4cf7f9e8ff4bc6f7e951e4f074dc105
Author: Finn Thain <fthain@linux-m68k.org>
Date:   Tue Mar 14 19:51:59 2023 +1100

    nubus: Partially revert proc_create_single_data() conversion
    
    commit 0e96647cff9224db564a1cee6efccb13dbe11ee2 upstream.
    
    The conversion to proc_create_single_data() introduced a regression
    whereby reading a file in /proc/bus/nubus results in a seg fault:
    
        # grep -r . /proc/bus/nubus/e/
        Data read fault at 0x00000020 in Super Data (pc=0x1074c2)
        BAD KERNEL BUSERR
        Oops: 00000000
        Modules linked in:
        PC: [<001074c2>] PDE_DATA+0xc/0x16
        SR: 2010  SP: 38284958  a2: 01152370
        d0: 00000001    d1: 01013000    d2: 01002790    d3: 00000000
        d4: 00000001    d5: 0008ce2e    a0: 00000000    a1: 00222a40
        Process grep (pid: 45, task=142f8727)
        Frame format=B ssw=074d isc=2008 isb=4e5e daddr=00000020 dobuf=01199e70
        baddr=001074c8 dibuf=ffffffff ver=f
        Stack from 01199e48:
                01199e70 00222a58 01002790 00000000 011a3000 01199eb0 015000c0 00000000
                00000000 01199ec0 01199ec0 000d551a 011a3000 00000001 00000000 00018000
                d003f000 00000003 00000001 0002800d 01052840 01199fa8 c01f8000 00000000
                00000029 0b532b80 00000000 00000000 00000029 0b532b80 01199ee4 00103640
                011198c0 d003f000 00018000 01199fa8 00000000 011198c0 00000000 01199f4c
                000b3344 011198c0 d003f000 00018000 01199fa8 00000000 00018000 011198c0
        Call Trace: [<00222a58>] nubus_proc_rsrc_show+0x18/0xa0
         [<000d551a>] seq_read+0xc4/0x510
         [<00018000>] fp_fcos+0x2/0x82
         [<0002800d>] __sys_setreuid+0x115/0x1c6
         [<00103640>] proc_reg_read+0x5c/0xb0
         [<00018000>] fp_fcos+0x2/0x82
         [<000b3344>] __vfs_read+0x2c/0x13c
         [<00018000>] fp_fcos+0x2/0x82
         [<00018000>] fp_fcos+0x2/0x82
         [<000b8aa2>] sys_statx+0x60/0x7e
         [<000b34b6>] vfs_read+0x62/0x12a
         [<00018000>] fp_fcos+0x2/0x82
         [<00018000>] fp_fcos+0x2/0x82
         [<000b39c2>] ksys_read+0x48/0xbe
         [<00018000>] fp_fcos+0x2/0x82
         [<000b3a4e>] sys_read+0x16/0x1a
         [<00018000>] fp_fcos+0x2/0x82
         [<00002b84>] syscall+0x8/0xc
         [<00018000>] fp_fcos+0x2/0x82
         [<0000c016>] not_ext+0xa/0x18
        Code: 4e5e 4e75 4e56 0000 206e 0008 2068 ffe8 <2068> 0020 2008 4e5e 4e75 4e56 0000 2f0b 206e 0008 2068 0004 2668 0020 206b ffe8
        Disabling lock debugging due to kernel taint
    
        Segmentation fault
    
    The proc_create_single_data() conversion does not work because
    single_open(file, nubus_proc_rsrc_show, PDE_DATA(inode)) is not
    equivalent to the original code.
    
    Fixes: 3f3942aca6da ("proc: introduce proc_create_single{,_data}")
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org # 5.6+
    Signed-off-by: Finn Thain <fthain@linux-m68k.org>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/d4e2a586e793cc8d9442595684ab8a077c0fe726.1678783919.git.fthain@linux-m68k.org
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e65fa33edf53e8e9cabf70d3d876375810b8523
Author: Ben Hutchings <benh@debian.org>
Date:   Thu Jun 15 00:00:02 2023 +0200

    parisc: Delete redundant register definitions in <asm/assembly.h>
    
    commit b5b2a02bcaac7c287694aa0db4837a07bf178626 upstream.
    
    We define sp and ipsw in <asm/asmregs.h> using ".reg", and when using
    current binutils (snapshot 2.40.50.20230611) the definitions in
    <asm/assembly.h> using "=" conflict with those:
    
    arch/parisc/include/asm/assembly.h: Assembler messages:
    arch/parisc/include/asm/assembly.h:93: Error: symbol `sp' is already defined
    arch/parisc/include/asm/assembly.h:95: Error: symbol `ipsw' is already defined
    
    Delete the duplicate definitions in <asm/assembly.h>.
    
    Also delete the definition of gp, which isn't used anywhere.
    
    Signed-off-by: Ben Hutchings <benh@debian.org>
    Cc: stable@vger.kernel.org # v6.0+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4d8f8900021fc74d4940157e19c0a1e709640e4
Author: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date:   Sat May 13 14:51:00 2023 +0200

    drm/amdgpu: Validate VM ioctl flags.
    
    commit a2b308044dcaca8d3e580959a4f867a1d5c37fac upstream.
    
    None have been defined yet, so reject anybody setting any. Mesa sets
    it to 0 anyway.
    
    Signed-off-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26eb191bf5a0bf09a1f37f94a5bb80274b7e6db4
Author: Ahmed S. Darwish <darwi@linutronix.de>
Date:   Mon May 15 19:32:16 2023 +0200

    scripts/tags.sh: Resolve gtags empty index generation
    
    commit e1b37563caffc410bb4b55f153ccb14dede66815 upstream.
    
    gtags considers any file outside of its current working directory
    "outside the source tree" and refuses to index it. For O= kernel builds,
    or when "make" is invoked from a directory other then the kernel source
    tree, gtags ignores the entire kernel source and generates an empty
    index.
    
    Force-set gtags current working directory to the kernel source tree.
    
    Due to commit 9da0763bdd82 ("kbuild: Use relative path when building in
    a subdir of the source tree"), if the kernel build is done in a
    sub-directory of the kernel source tree, the kernel Makefile will set
    the kernel's $srctree to ".." for shorter compile-time and run-time
    warnings. Consequently, the list of files to be indexed will be in the
    "../*" form, rendering all such paths invalid once gtags switches to the
    kernel source tree as its current working directory.
    
    If gtags indexing is requested and the build directory is not the kernel
    source tree, index all files in absolute-path form.
    
    Note, indexing in absolute-path form will not affect the generated
    index, as paths in gtags indices are always relative to the gtags "root
    directory" anyway (as evidenced by "gtags --dump").
    
    Signed-off-by: Ahmed S. Darwish <darwi@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 989b4a753c7e0746c7cee5a5b0c4b8fc63d510d6
Author: Krister Johansen <kjlx@templeofstupid.com>
Date:   Wed Jan 25 10:34:18 2023 -0800

    perf symbols: Symbol lookup with kcore can fail if multiple segments match stext
    
    commit 1c249565426e3a9940102c0ba9f63914f7cda73d upstream.
    
    This problem was encountered on an arm64 system with a lot of memory.
    Without kernel debug symbols installed, and with both kcore and kallsyms
    available, perf managed to get confused and returned "unknown" for all
    of the kernel symbols that it tried to look up.
    
    On this system, stext fell within the vmalloc segment.  The kcore symbol
    matching code tries to find the first segment that contains stext and
    uses that to replace the segment generated from just the kallsyms
    information.  In this case, however, there were two: a very large
    vmalloc segment, and the text segment.  This caused perf to get confused
    because multiple overlapping segments were inserted into the RB tree
    that holds the discovered segments.  However, that alone wasn't
    sufficient to cause the problem. Even when we could find the segment,
    the offsets were adjusted in such a way that the newly generated symbols
    didn't line up with the instruction addresses in the trace.  The most
    obvious solution would be to consult which segment type is text from
    kcore, but this information is not exposed to users.
    
    Instead, select the smallest matching segment that contains stext
    instead of the first matching segment.  This allows us to match the text
    segment instead of vmalloc, if one is contained within the other.
    
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: David Reaver <me@davidreaver.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20230125183418.GD1963@templeofstupid.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87f51cf60e3ea016d9d798f8b04a877252df51dc
Author: Ricardo Ca√±uelo <ricardo.canuelo@collabora.com>
Date:   Thu May 25 14:18:11 2023 +0200

    Revert "thermal/drivers/mediatek: Use devm_of_iomap to avoid resource leak in mtk_thermal_probe"
    
    commit 86edac7d3888c715fe3a81bd61f3617ecfe2e1dd upstream.
    
    This reverts commit f05c7b7d9ea9477fcc388476c6f4ade8c66d2d26.
    
    That change was causing a regression in the generic-adc-thermal-probed
    bootrr test as reported in the kernelci-results list [1].
    A proper rework will take longer, so revert it for now.
    
    [1] https://groups.io/g/kernelci-results/message/42660
    
    Fixes: f05c7b7d9ea9 ("thermal/drivers/mediatek: Use devm_of_iomap to avoid resource leak in mtk_thermal_probe")
    Signed-off-by: Ricardo Ca√±uelo <ricardo.canuelo@collabora.com>
    Suggested-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20230525121811.3360268-1-ricardo.canuelo@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a28f3490d3d5347ae01523ceb3c4f6343da23bb
Author: Mike Hommey <mh@glandium.org>
Date:   Sun Jun 18 08:09:57 2023 +0900

    HID: logitech-hidpp: add HIDPP_QUIRK_DELAYED_INIT for the T651.
    
    commit 5fe251112646d8626818ea90f7af325bab243efa upstream.
    
    commit 498ba2069035 ("HID: logitech-hidpp: Don't restart communication if
    not necessary") put restarting communication behind that flag, and this
    was apparently necessary on the T651, but the flag was not set for it.
    
    Fixes: 498ba2069035 ("HID: logitech-hidpp: Don't restart communication if not necessary")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Hommey <mh@glandium.org>
    Link: https://lore.kernel.org/r/20230617230957.6mx73th4blv7owqk@glandium.org
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67ce7724637c6adb66f788677cb50b82615de0ac
Author: Jason Gerecke <jason.gerecke@wacom.com>
Date:   Thu Jun 8 14:38:28 2023 -0700

    HID: wacom: Use ktime_t rather than int when dealing with timestamps
    
    commit 9a6c0e28e215535b2938c61ded54603b4e5814c5 upstream.
    
    Code which interacts with timestamps needs to use the ktime_t type
    returned by functions like ktime_get. The int type does not offer
    enough space to store these values, and attempting to use it is a
    recipe for problems. In this particular case, overflows would occur
    when calculating/storing timestamps leading to incorrect values being
    reported to userspace. In some cases these bad timestamps cause input
    handling in userspace to appear hung.
    
    Link: https://gitlab.freedesktop.org/libinput/libinput/-/issues/901
    Fixes: 17d793f3ed53 ("HID: wacom: insert timestamp to packed Bluetooth (BT) events")
    CC: stable@vger.kernel.org
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Link: https://lore.kernel.org/r/20230608213828.2108-1-jason.gerecke@wacom.com
    Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 347732317749f1987a1ebbd3eeb0f067b701dca9
Author: Krister Johansen <kjlx@templeofstupid.com>
Date:   Mon Jun 12 17:44:40 2023 -0700

    bpf: ensure main program has an extable
    
    commit 0108a4e9f3584a7a2c026d1601b0682ff7335d95 upstream.
    
    When subprograms are in use, the main program is not jit'd after the
    subprograms because jit_subprogs sets a value for prog->bpf_func upon
    success.  Subsequent calls to the JIT are bypassed when this value is
    non-NULL.  This leads to a situation where the main program and its
    func[0] counterpart are both in the bpf kallsyms tree, but only func[0]
    has an extable.  Extables are only created during JIT.  Now there are
    two nearly identical program ksym entries in the tree, but only one has
    an extable.  Depending upon how the entries are placed, there's a chance
    that a fault will call search_extable on the aux with the NULL entry.
    
    Since jit_subprogs already copies state from func[0] to the main
    program, include the extable pointer in this state duplication.
    Additionally, ensure that the copy of the main program in func[0] is not
    added to the bpf_prog_kallsyms table. Instead, let the main program get
    added later in bpf_prog_load().  This ensures there is only a single
    copy of the main program in the kallsyms table, and that its tag matches
    the tag observed by tooling like bpftool.
    
    Cc: stable@vger.kernel.org
    Fixes: 1c2a088a6626 ("bpf: x64: add JIT support for multi-function programs")
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Tested-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Link: https://lore.kernel.org/r/6de9b2f4b4724ef56efbb0339daaa66c8b68b1e7.1686616663.git.kjlx@templeofstupid.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d874cf9799a973d58b86b2973392e0111260b87a
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Wed Jun 7 09:27:08 2023 +0200

    can: isotp: isotp_sendmsg(): fix return error fix on TX path
    
    commit e38910c0072b541a91954682c8b074a93e57c09b upstream.
    
    With commit d674a8f123b4 ("can: isotp: isotp_sendmsg(): fix return
    error on FC timeout on TX path") the missing correct return value in
    the case of a protocol error was introduced.
    
    But the way the error value has been read and sent to the user space
    does not follow the common scheme to clear the error after reading
    which is provided by the sock_error() function. This leads to an error
    report at the following write() attempt although everything should be
    working.
    
    Fixes: d674a8f123b4 ("can: isotp: isotp_sendmsg(): fix return error on FC timeout on TX path")
    Reported-by: Carsten Schmidt <carsten.schmidt-achim@t-online.de>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/all/20230607072708.38809-1-socketcan@hartkopp.net
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27d03d15bb8baccb1453ad4d104fd92cabaac33f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 15 22:33:55 2023 +0200

    x86/smp: Use dedicated cache-line for mwait_play_dead()
    
    commit f9c9987bf52f4e42e940ae217333ebb5a4c3b506 upstream.
    
    Monitoring idletask::thread_info::flags in mwait_play_dead() has been an
    obvious choice as all what is needed is a cache line which is not written
    by other CPUs.
    
    But there is a use case where a "dead" CPU needs to be brought out of
    MWAIT: kexec().
    
    This is required as kexec() can overwrite text, pagetables, stacks and the
    monitored cacheline of the original kernel. The latter causes MWAIT to
    resume execution which obviously causes havoc on the kexec kernel which
    results usually in triple faults.
    
    Use a dedicated per CPU storage to prepare for that.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ashok Raj <ashok.raj@intel.com>
    Reviewed-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230615193330.434553750@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6c745ca4fc5d5cf44d474a74c04e3b9cb5c757a
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Tue May 2 19:53:50 2023 +0200

    x86/microcode/AMD: Load late on both threads too
    
    commit a32b0f0db3f396f1c9be2fe621e77c09ec3d8e7d upstream.
    
    Do the same as early loading - load on both threads.
    
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/20230605141332.25948-1-bp@alien8.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9052349685e9cdd093cfd4137fcda4e2c6d7a58e
Author: Philip Yang <Philip.Yang@amd.com>
Date:   Mon Oct 3 13:03:26 2022 -0400

    drm/amdgpu: Set vmbo destroy after pt bo is created
    
    commit 9a3c6067bd2ee2ca2652fbb0679f422f3c9109f9 upstream.
    
    Under VRAM usage pression, map to GPU may fail to create pt bo and
    vmbo->shadow_list is not initialized, then ttm_bo_release calling
    amdgpu_bo_vm_destroy to access vmbo->shadow_list generates below
    dmesg and NULL pointer access backtrace:
    
    Set vmbo destroy callback to amdgpu_bo_vm_destroy only after creating pt
    bo successfully, otherwise use default callback amdgpu_bo_destroy.
    
    amdgpu: amdgpu_vm_bo_update failed
    amdgpu: update_gpuvm_pte() failed
    amdgpu: Failed to map bo to gpuvm
    amdgpu 0000:43:00.0: amdgpu: Failed to map peer:0000:43:00.0 mem_domain:2
    BUG: kernel NULL pointer dereference, address:
     RIP: 0010:amdgpu_bo_vm_destroy+0x4d/0x80 [amdgpu]
     Call Trace:
      <TASK>
      ttm_bo_release+0x207/0x320 [amdttm]
      amdttm_bo_init_reserved+0x1d6/0x210 [amdttm]
      amdgpu_bo_create+0x1ba/0x520 [amdgpu]
      amdgpu_bo_create_vm+0x3a/0x80 [amdgpu]
      amdgpu_vm_pt_create+0xde/0x270 [amdgpu]
      amdgpu_vm_ptes_update+0x63b/0x710 [amdgpu]
      amdgpu_vm_update_range+0x2e7/0x6e0 [amdgpu]
      amdgpu_vm_bo_update+0x2bd/0x600 [amdgpu]
      update_gpuvm_pte+0x160/0x420 [amdgpu]
      amdgpu_amdkfd_gpuvm_map_memory_to_gpu+0x313/0x1130 [amdgpu]
      kfd_ioctl_map_memory_to_gpu+0x115/0x390 [amdgpu]
      kfd_ioctl+0x24a/0x5b0 [amdgpu]
    
    Signed-off-by: Philip Yang <Philip.Yang@amd.com>
    Reviewed-by: Christian K√∂nig <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ This fixes a regression introduced by commit 1cc40dccad76 ("drm/amdgpu:
      fix Null pointer dereference error in amdgpu_device_recover_vram") in
      5.15.118. It's a hand modified cherry-pick because that commit that
      introduced the regression touched nearby code and the context is now
      incorrect. ]
    Cc: Linux Regressions <regressions@lists.linux.dev>
    Link: https://gitlab.freedesktop.org/drm/amd/-/issues/2650
    Fixes: 1cc40dccad76 ("drm/amdgpu: fix Null pointer dereference error in amdgpu_device_recover_vram")
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 796481bedc3e7748ead2df9153065ab2cf4736a6
Author: Jane Chu <jane.chu@oracle.com>
Date:   Mon Jun 26 17:02:19 2023 -0600

    mm, hwpoison: when copy-on-write hits poison, take page offline
    
    From: Tony Luck <tony.luck@intel.com>
    
    commit d302c2398ba269e788a4f37ae57c07a7fcabaa42 upstream.
    
    Cannot call memory_failure() directly from the fault handler because
    mmap_lock (and others) are held.
    
    It is important, but not urgent, to mark the source page as h/w poisoned
    and unmap it from other tasks.
    
    Use memory_failure_queue() to request a call to memory_failure() for the
    page with the error.
    
    Also provide a stub version for CONFIG_MEMORY_FAILURE=n
    
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20221021200120.175753-3-tony.luck@intel.com
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Shuai Xue <xueshuai@linux.alibaba.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    [ Due to missing commits
      e591ef7d96d6e ("mm,hwpoison,hugetlb,memory_hotplug: hotremove memory section with hwpoisoned hugepage")
      5033091de814a ("mm/hwpoison: introduce per-memory_block hwpoison counter")
      The impact of e591ef7d96d6e is its introduction of an additional flag in
      __get_huge_page_for_hwpoison() that serves as an indication a hwpoisoned
      hugetlb page should have its migratable bit cleared.
      The impact of 5033091de814a is contexual.
      Resolve by ignoring both missing commits. - jane]
    Signed-off-by: Jane Chu <jane.chu@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6713b8f11aa0c8e3edba15efc417d88d8dae89fa
Author: Tony Luck <tony.luck@intel.com>
Date:   Mon Jun 26 17:02:18 2023 -0600

    mm, hwpoison: try to recover from copy-on write faults
    
    commit a873dfe1032a132bf89f9e19a6ac44f5a0b78754 upstream.
    
    Patch series "Copy-on-write poison recovery", v3.
    
    Part 1 deals with the process that triggered the copy on write fault with
    a store to a shared read-only page.  That process is send a SIGBUS with
    the usual machine check decoration to specify the virtual address of the
    lost page, together with the scope.
    
    Part 2 sets up to asynchronously take the page with the uncorrected error
    offline to prevent additional machine check faults.  H/t to Miaohe Lin
    <linmiaohe@huawei.com> and Shuai Xue <xueshuai@linux.alibaba.com> for
    pointing me to the existing function to queue a call to memory_failure().
    
    On x86 there is some duplicate reporting (because the error is also
    signalled by the memory controller as well as by the core that triggered
    the machine check).  Console logs look like this:
    
    This patch (of 2):
    
    If the kernel is copying a page as the result of a copy-on-write
    fault and runs into an uncorrectable error, Linux will crash because
    it does not have recovery code for this case where poison is consumed
    by the kernel.
    
    It is easy to set up a test case. Just inject an error into a private
    page, fork(2), and have the child process write to the page.
    
    I wrapped that neatly into a test at:
    
      git://git.kernel.org/pub/scm/linux/kernel/git/aegl/ras-tools.git
    
    just enable ACPI error injection and run:
    
      # ./einj_mem-uc -f copy-on-write
    
    Add a new copy_user_highpage_mc() function that uses copy_mc_to_kernel()
    on architectures where that is available (currently x86 and powerpc).
    When an error is detected during the page copy, return VM_FAULT_HWPOISON
    to caller of wp_page_copy(). This propagates up the call stack. Both x86
    and powerpc have code in their fault handler to deal with this code by
    sending a SIGBUS to the application.
    
    Note that this patch avoids a system crash and signals the process that
    triggered the copy-on-write action. It does not take any action for the
    memory error that is still in the shared page. To handle that a call to
    memory_failure() is needed. But this cannot be done from wp_page_copy()
    because it holds mmap_lock(). Perhaps the architecture fault handlers
    can deal with this loose end in a subsequent patch?
    
    On Intel/x86 this loose end will often be handled automatically because
    the memory controller provides an additional notification of the h/w
    poison in memory, the handler for this will call memory_failure(). This
    isn't a 100% solution. If there are multiple errors, not all may be
    logged in this way.
    
    Cc: <stable@vger.kernel.org>
    [tony.luck@intel.com: add call to kmsan_unpoison_memory(), per Miaohe Lin]
      Link: https://lkml.kernel.org/r/20221031201029.102123-2-tony.luck@intel.com
    Link: https://lkml.kernel.org/r/20221021200120.175753-1-tony.luck@intel.com
    Link: https://lkml.kernel.org/r/20221021200120.175753-2-tony.luck@intel.com
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Alexander Potapenko <glider@google.com>
    Tested-by: Shuai Xue <xueshuai@linux.alibaba.com>
    Cc: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    [ Due to missing commits
      c89357e27f20d ("mm: support GUP-triggered unsharing of anonymous pages")
      662ce1dc9caf4 ("delayacct: track delays from write-protect copy")
      b073d7f8aee4e ("mm: kmsan: maintain KMSAN metadata for page operations")
      The impact of c89357e27f20d is a name change from cow_user_page() to
      __wp_page_copy_user().
      The impact of 662ce1dc9caf4 is the introduction of a new feature of
      tracking write-protect copy in delayacct.
      The impact of b073d7f8aee4e is an introduction of KASAN feature.
      None of these commits establishes meaningful dependency, hence resolve by
      ignoring them. - jane]
    Signed-off-by: Jane Chu <jane.chu@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b46021ab83047f5769bb6e504c32430b57395075
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Jun 20 18:24:21 2023 +0200

    mptcp: consolidate fallback and non fallback state machine
    
    commit 81c1d029016001f994ce1c46849c5e9900d8eab8 upstream.
    
    An orphaned msk releases the used resources via the worker,
    when the latter first see the msk in CLOSED status.
    
    If the msk status transitions to TCP_CLOSE in the release callback
    invoked by the worker's final release_sock(), such instance of the
    workqueue will not take any action.
    
    Additionally the MPTCP code prevents scheduling the worker once the
    socket reaches the CLOSE status: such msk resources will be leaked.
    
    The only code path that can trigger the above scenario is the
    __mptcp_check_send_data_fin() in fallback mode.
    
    Address the issue removing the special handling of fallback socket
    in __mptcp_check_send_data_fin(), consolidating the state machine
    for fallback and non fallback socket.
    
    Since non-fallback sockets do not send and do not receive data_fin,
    the mptcp code can update the msk internal status to match the next
    step in the SM every time data fin (ack) should be generated or
    received.
    
    As a consequence we can remove a bunch of checks for fallback from
    the fastpath.
    
    Fixes: 6e628cd3a8f7 ("mptcp: use mptcp release_cb for delayed tasks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42ff95b4bd115c6c5742c33d4dde31c8e9d42bac
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Jun 20 18:24:19 2023 +0200

    mptcp: fix possible divide by zero in recvmsg()
    
    commit 0ad529d9fd2bfa3fc619552a8d2fb2f2ef0bce2e upstream.
    
    Christoph reported a divide by zero bug in mptcp_recvmsg():
    
    divide error: 0000 [#1] PREEMPT SMP
    CPU: 1 PID: 19978 Comm: syz-executor.6 Not tainted 6.4.0-rc2-gffcc7899081b #20
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
    RIP: 0010:__tcp_select_window+0x30e/0x420 net/ipv4/tcp_output.c:3018
    Code: 11 ff 0f b7 cd c1 e9 0c b8 ff ff ff ff d3 e0 89 c1 f7 d1 01 cb 21 c3 eb 17 e8 2e 83 11 ff 31 db eb 0e e8 25 83 11 ff 89 d8 99 <f7> 7c 24 04 29 d3 65 48 8b 04 25 28 00 00 00 48 3b 44 24 10 75 60
    RSP: 0018:ffffc90000a07a18 EFLAGS: 00010246
    RAX: 000000000000ffd7 RBX: 000000000000ffd7 RCX: 0000000000040000
    RDX: 0000000000000000 RSI: 000000000003ffff RDI: 0000000000040000
    RBP: 000000000000ffd7 R08: ffffffff820cf297 R09: 0000000000000001
    R10: 0000000000000000 R11: ffffffff8103d1a0 R12: 0000000000003f00
    R13: 0000000000300000 R14: ffff888101cf3540 R15: 0000000000180000
    FS:  00007f9af4c09640(0000) GS:ffff88813bd00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b33824000 CR3: 000000012f241001 CR4: 0000000000170ee0
    Call Trace:
     <TASK>
     __tcp_cleanup_rbuf+0x138/0x1d0 net/ipv4/tcp.c:1611
     mptcp_recvmsg+0xcb8/0xdd0 net/mptcp/protocol.c:2034
     inet_recvmsg+0x127/0x1f0 net/ipv4/af_inet.c:861
     ____sys_recvmsg+0x269/0x2b0 net/socket.c:1019
     ___sys_recvmsg+0xe6/0x260 net/socket.c:2764
     do_recvmmsg+0x1a5/0x470 net/socket.c:2858
     __do_sys_recvmmsg net/socket.c:2937 [inline]
     __se_sys_recvmmsg net/socket.c:2953 [inline]
     __x64_sys_recvmmsg+0xa6/0x130 net/socket.c:2953
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x47/0xa0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x72/0xdc
    RIP: 0033:0x7f9af58fc6a9
    Code: 5c c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 4f 37 0d 00 f7 d8 64 89 01 48
    RSP: 002b:00007f9af4c08cd8 EFLAGS: 00000246 ORIG_RAX: 000000000000012b
    RAX: ffffffffffffffda RBX: 00000000006bc050 RCX: 00007f9af58fc6a9
    RDX: 0000000000000001 RSI: 0000000020000140 RDI: 0000000000000004
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000f00 R11: 0000000000000246 R12: 00000000006bc05c
    R13: fffffffffffffea8 R14: 00000000006bc050 R15: 000000000001fe40
     </TASK>
    
    mptcp_recvmsg is allowed to release the msk socket lock when
    blocking, and before re-acquiring it another thread could have
    switched the sock to TCP_LISTEN status - with a prior
    connect(AF_UNSPEC) - also clearing icsk_ack.rcv_mss.
    
    Address the issue preventing the disconnect if some other process is
    concurrently performing a blocking syscall on the same socket, alike
    commit 4faeee0cf8a5 ("tcp: deny tcp_disconnect() when threads are waiting").
    
    Fixes: a6b118febbab ("mptcp: add receive buffer auto-tuning")
    Cc: stable@vger.kernel.org
    Reported-by: Christoph Paasch <cpaasch@apple.com>
    Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/404
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Tested-by: Christoph Paasch <cpaasch@apple.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

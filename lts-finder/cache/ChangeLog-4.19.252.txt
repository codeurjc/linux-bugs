commit e8b2a9c3318357b7661c6075acdb723587def656
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 12 16:29:04 2022 +0200

    Linux 4.19.252
    
    Link: https://lore.kernel.org/r/20220711090537.841305347@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56346677efe43ca0c0c53c3cb2f93df33b07124c
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Jun 5 08:27:22 2022 +0400

    dmaengine: ti: Add missing put_device in ti_dra7_xbar_route_allocate
    
    commit 615a4bfc426e11dba05c2cf343f9ac752fb381d2 upstream.
    
    of_find_device_by_node() takes reference, we should use put_device()
    to release it when not need anymore.
    
    Fixes: a074ae38f859 ("dmaengine: Add driver for TI DMA crossbar on DRA7x")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Link: https://lore.kernel.org/r/20220605042723.17668-1-linmq006@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bd66010398871807c1cebacee07d60ded1b1402
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Jun 5 08:27:23 2022 +0400

    dmaengine: ti: Fix refcount leak in ti_dra7_xbar_route_allocate
    
    commit c132fe78ad7b4ce8b5d49a501a15c29d08eeb23a upstream.
    
    of_parse_phandle() returns a node pointer with refcount
    incremented, we should use of_node_put() on it when not needed anymore.
    
    Add missing of_node_put() in to fix this.
    
    Fixes: ec9bfa1e1a79 ("dmaengine: ti-dma-crossbar: dra7: Use bitops instead of idr")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220605042723.17668-2-linmq006@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33cae9975550f0c442dbad71eaa196db5493deb
Author: Michael Walle <michael@walle.cc>
Date:   Thu May 26 15:51:11 2022 +0200

    dmaengine: at_xdma: handle errors of at_xdmac_alloc_desc() correctly
    
    commit 3770d92bd5237d686e49da7b2fb86f53ee6ed259 upstream.
    
    It seems that it is valid to have less than the requested number of
    descriptors. But what is not valid and leads to subsequent errors is to
    have zero descriptors. In that case, abort the probing.
    
    Fixes: e1f7c9eee707 ("dmaengine: at_xdmac: creation of the atmel eXtended DMA Controller driver")
    Signed-off-by: Michael Walle <michael@walle.cc>
    Link: https://lore.kernel.org/r/20220526135111.1470926-1-michael@walle.cc
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7bfa6497a11948fe62f8c6fc296cc618c63f8e4
Author: Dmitry Osipenko <dmitry.osipenko@collabora.com>
Date:   Fri May 20 21:14:32 2022 +0300

    dmaengine: pl330: Fix lockdep warning about non-static key
    
    commit b64b3b2f1d81f83519582e1feee87d77f51f5f17 upstream.
    
    The DEFINE_SPINLOCK() macro shouldn't be used for dynamically allocated
    spinlocks. The lockdep warns about this and disables locking validator.
    Fix the warning by making lock static.
    
     INFO: trying to register non-static key.
     The code is fine but needs lockdep annotation, or maybe
     you didn't initialize this object before use?
     turning off the locking correctness validator.
     Hardware name: Radxa ROCK Pi 4C (DT)
     Call trace:
      dump_backtrace.part.0+0xcc/0xe0
      show_stack+0x18/0x6c
      dump_stack_lvl+0x8c/0xb8
      dump_stack+0x18/0x34
      register_lock_class+0x4a8/0x4cc
      __lock_acquire+0x78/0x20cc
      lock_acquire.part.0+0xe0/0x230
      lock_acquire+0x68/0x84
      _raw_spin_lock_irqsave+0x84/0xc4
      add_desc+0x44/0xc0
      pl330_get_desc+0x15c/0x1d0
      pl330_prep_dma_cyclic+0x100/0x270
      snd_dmaengine_pcm_trigger+0xec/0x1c0
      dmaengine_pcm_trigger+0x18/0x24
      ...
    
    Fixes: e588710311ee ("dmaengine: pl330: fix descriptor allocation fail")
    Signed-off-by: Dmitry Osipenko <dmitry.osipenko@collabora.com>
    Link: https://lore.kernel.org/r/20220520181432.149904-1-dmitry.osipenko@collabora.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33d2f83e3f2c1fdabb365d25bed3aa630041cbc0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 10 13:55:49 2022 -0700

    ida: don't use BUG_ON() for debugging
    
    commit fc82bbf4dede758007763867d0282353c06d1121 upstream.
    
    This is another old BUG_ON() that just shouldn't exist (see also commit
    a382f8fee42c: "signal handling: don't use BUG_ON() for debugging").
    
    In fact, as Matthew Wilcox points out, this condition shouldn't really
    even result in a warning, since a negative id allocation result is just
    a normal allocation failure:
    
      "I wonder if we should even warn here -- sure, the caller is trying to
       free something that wasn't allocated, but we don't warn for
       kfree(NULL)"
    
    and goes on to point out how that current error check is only causing
    people to unnecessarily do their own index range checking before freeing
    it.
    
    This was noted by Itay Iellin, because the bluetooth HCI socket cookie
    code does *not* do that range checking, and ends up just freeing the
    error case too, triggering the BUG_ON().
    
    The HCI code requires CAP_NET_RAW, and seems to just result in an ugly
    splat, but there really is no reason to BUG_ON() here, and we have
    generally striven for allocation models where it's always ok to just do
    
        free(alloc());
    
    even if the allocation were to fail for some random reason (usually
    obviously that "random" reason being some resource limit).
    
    Fixes: 88eca0207cf1 ("ida: simplified functions for id allocation")
    Reported-by: Itay Iellin <ieitayie@gmail.com>
    Suggested-by: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9c3ceabd406c80d7b8c7813836b654b045fa0b3
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Fri Jul 1 10:53:52 2022 -0600

    misc: rtsx_usb: set return value in rsp_buf alloc err path
    
    commit 2cd37c2e72449a7add6da1183d20a6247d6db111 upstream.
    
    Set return value in rsp_buf alloc error path before going to
    error handling.
    
    drivers/misc/cardreader/rtsx_usb.c:639:6: warning: variable 'ret' is used uninitialized whenever 'if' condition is true [-Wsometimes-uninitialized]
               if (!ucr->rsp_buf)
                   ^~~~~~~~~~~~~
       drivers/misc/cardreader/rtsx_usb.c:678:9: note: uninitialized use occurs here
               return ret;
                      ^~~
       drivers/misc/cardreader/rtsx_usb.c:639:2: note: remove the 'if' if its condition is always false
               if (!ucr->rsp_buf)
               ^~~~~~~~~~~~~~~~~~
       drivers/misc/cardreader/rtsx_usb.c:622:9: note: initialize the variable 'ret' to silence this warning
               int ret;
                      ^
                       = 0
    
    Fixes: 3776c7855985 ("misc: rtsx_usb: use separate command and response buffers")
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20220701165352.15687-1-skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b901d017b77ad771a759460c1d671e7fcf4f3ff5
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Thu Jun 30 20:32:56 2022 -0600

    misc: rtsx_usb: use separate command and response buffers
    
    commit 3776c78559853fd151be7c41e369fd076fb679d5 upstream.
    
    rtsx_usb uses same buffer for command and response. There could
    be a potential conflict using the same buffer for both especially
    if retries and timeouts are involved.
    
    Use separate command and response buffers to avoid conflicts.
    
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/07e3721804ff07aaab9ef5b39a5691d0718b9ade.1656642167.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccf417c7bf38405c1b504832eff65b29dd56719e
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Thu Jun 30 20:32:55 2022 -0600

    misc: rtsx_usb: fix use of dma mapped buffer for usb bulk transfer
    
    commit eb7f8e28420372787933eec079735c35034bda7d upstream.
    
    rtsx_usb driver allocates coherent dma buffer for urb transfers.
    This buffer is passed to usb_bulk_msg() and usb core tries to
    map already mapped buffer running into a dma mapping error.
    
    xhci_hcd 0000:01:00.0: rejecting DMA map of vmalloc memory
    WARNING: CPU: 1 PID: 279 at include/linux/dma-mapping.h:326 usb_ hcd_map_urb_for_dma+0x7d6/0x820
    
    ...
    
    xhci_map_urb_for_dma+0x291/0x4e0
    usb_hcd_submit_urb+0x199/0x12b0
    ...
    usb_submit_urb+0x3b8/0x9e0
    usb_start_wait_urb+0xe3/0x2d0
    usb_bulk_msg+0x115/0x240
    rtsx_usb_transfer_data+0x185/0x1a8 [rtsx_usb]
    rtsx_usb_send_cmd+0xbb/0x123 [rtsx_usb]
    rtsx_usb_write_register+0x12c/0x143 [rtsx_usb]
    rtsx_usb_probe+0x226/0x4b2 [rtsx_usb]
    
    Fix it to use kmalloc() to get DMA-able memory region instead.
    
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/667d627d502e1ba9ff4f9b94966df3299d2d3c0d.1656642167.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f14744632c6c762fbfee901b0d319ad53f3af85a
Author: Satish Nagireddy <satish.nagireddy@getcruise.com>
Date:   Tue Jun 28 12:12:16 2022 -0700

    i2c: cadence: Unregister the clk notifier in error path
    
    [ Upstream commit 3501f0c663063513ad604fb1b3f06af637d3396d ]
    
    This patch ensures that the clock notifier is unregistered
    when driver probe is returning error.
    
    Fixes: df8eb5691c48 ("i2c: Add driver for Cadence I2C controller")
    Signed-off-by: Satish Nagireddy <satish.nagireddy@getcruise.com>
    Tested-by: Lars-Peter Clausen <lars@metafoo.de>
    Reviewed-by: Michal Simek <michal.simek@amd.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70652a44b4b6467304fc82a11e08325cc428b67e
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Jul 3 10:36:26 2022 +0300

    selftests: forwarding: fix error message in learning_test
    
    [ Upstream commit 83844aacab2015da1dba1df0cc61fc4b4c4e8076 ]
    
    When packets are not received, they aren't received on $host1_if, so the
    message talking about the second host not receiving them is incorrect.
    Fix it.
    
    Fixes: d4deb01467ec ("selftests: forwarding: Add a test for FDB learning")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d7f2dc5a1e8d0bf4088a8169de396aace2c35d6
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Jul 3 10:36:25 2022 +0300

    selftests: forwarding: fix learning_test when h1 supports IFF_UNICAST_FLT
    
    [ Upstream commit 1a635d3e1c80626237fdae47a5545b6655d8d81c ]
    
    The first host interface has by default no interest in receiving packets
    MAC DA de:ad:be:ef:13:37, so it might drop them before they hit the tc
    filter and this might confuse the selftest.
    
    Enable promiscuous mode such that the filter properly counts received
    packets.
    
    Fixes: d4deb01467ec ("selftests: forwarding: Add a test for FDB learning")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Tested-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42f761f8809629993072c0567453dd34435ccbf7
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Jul 3 10:36:24 2022 +0300

    selftests: forwarding: fix flood_unicast_test when h2 supports IFF_UNICAST_FLT
    
    [ Upstream commit b8e629b05f5d23f9649c901bef09fab8b0c2e4b9 ]
    
    As mentioned in the blamed commit, flood_unicast_test() works by
    checking the match count on a tc filter placed on the receiving
    interface.
    
    But the second host interface (host2_if) has no interest in receiving a
    packet with MAC DA de:ad:be:ef:13:37, so its RX filter drops it even
    before the ingress tc filter gets to be executed. So we will incorrectly
    get the message "Packet was not flooded when should", when in fact, the
    packet was flooded as expected but dropped due to an unrelated reason,
    at some other layer on the receiving side.
    
    Force h2 to accept this packet by temporarily placing it in promiscuous
    mode. Alternatively we could either deliver to its MAC address or use
    tcpdump_start, but this has the fewest complications.
    
    This fixes the "flooding" test from bridge_vlan_aware.sh and
    bridge_vlan_unaware.sh, which calls flood_test from the lib.
    
    Fixes: 236dd50bf67a ("selftests: forwarding: Add a test for flooded traffic")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Tested-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37936ef7fcc7184dafe7ea60043e3a75e180143b
Author: Rick Lindsley <ricklind@us.ibm.com>
Date:   Sat Jul 2 03:37:12 2022 -0700

    ibmvnic: Properly dispose of all skbs during a failover.
    
    [ Upstream commit 1b18f09d31cfa7148df15a7d5c5e0e86f105f7d1 ]
    
    During a reset, there may have been transmits in flight that are no
    longer valid and cannot be fulfilled.  Resetting and clearing the
    queues is insufficient; each skb also needs to be explicitly freed
    so that upper levels are not left waiting for confirmation of a
    transmit that will never happen.  If this happens frequently enough,
    the apparent backlog will cause TCP to begin "congestion control"
    unnecessarily, culminating in permanently decreased throughput.
    
    Fixes: d7c0ef36bde03 ("ibmvnic: Free and re-allocate scrqs when tx/rx scrqs change")
    Tested-by: Nick Child <nnac123@linux.ibm.com>
    Reviewed-by: Brian King <brking@linux.vnet.ibm.com>
    Signed-off-by: Rick Lindsley <ricklind@us.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59b2c62cd131f515a6043d310aa630c407677d10
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon May 23 12:24:19 2022 +0300

    ARM: at91: pm: use proper compatible for sama5d2's rtc
    
    [ Upstream commit ddc980da8043779119acaca106c6d9b445c9b65b ]
    
    Use proper compatible strings for SAMA5D2's RTC IPs. This is necessary
    for configuring wakeup sources for ULP1 PM mode.
    
    Fixes: d7484f5c6b3b ("ARM: at91: pm: configure wakeup sources for ULP1 mode")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220523092421.317345-2-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fee803fe20b3e27b4a88a0ed2e70dccb86a65ab1
Author: Samuel Holland <samuel@sholland.org>
Date:   Wed May 25 21:49:56 2022 -0500

    pinctrl: sunxi: a83t: Fix NAND function name for some pins
    
    [ Upstream commit aaefa29270d9551b604165a08406543efa9d16f5 ]
    
    The other NAND pins on Port C use the "nand0" function name.
    "nand0" also matches all of the other Allwinner SoCs.
    
    Fixes: 4730f33f0d82 ("pinctrl: sunxi: add allwinner A83T PIO controller support")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20220526024956.49500-1-samuel@sholland.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e1bcd33478ef44e63a45457055060b5fe4118ad
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu May 12 06:16:10 2022 +0400

    ARM: meson: Fix refcount leak in meson_smp_prepare_cpus
    
    [ Upstream commit 34d2cd3fccced12b958b8848e3eff0ee4296764c ]
    
    of_find_compatible_node() returns a node pointer with refcount
    incremented, we should use of_node_put() on it when done.
    Add missing of_node_put() to avoid refcount leak.
    
    Fixes: d850f3e5d296 ("ARM: meson: Add SMP bringup code for Meson8 and Meson8b")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220512021611.47921-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18aef352845096d7be4a7b42e173c1df21f3bb20
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Thu Jul 7 16:07:53 2022 -0700

    xfs: remove incorrect ASSERT in xfs_rename
    
    commit e445976537ad139162980bee015b7364e5b64fff upstream.
    
    This ASSERT in xfs_rename is a) incorrect, because
    (RENAME_WHITEOUT|RENAME_NOREPLACE) is a valid combination, and
    b) unnecessary, because actual invalid flag combinations are already
    handled at the vfs level in do_renameat2() before we get called.
    So, remove it.
    
    Reported-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Fixes: 7dcf5c3e4527 ("xfs: add RENAME_WHITEOUT support")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b62a5e19f6cc2902627ed569618fc7d00fb2b1e3
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Fri Jul 8 20:47:26 2022 +0200

    can: kvaser_usb: kvaser_usb_leaf: fix bittiming limits
    
    commit b3b6df2c56d80b8c6740433cff5f016668b8de70 upstream.
    
    Use correct bittiming limits depending on device. For devices based on
    USBcanII, Leaf M32C or Leaf i.MX28.
    
    Fixes: 080f40a6fa28 ("can: kvaser_usb: Add support for Kvaser CAN/USB devices")
    Fixes: b4f20130af23 ("can: kvaser_usb: add support for Kvaser Leaf v2 and usb mini PCIe")
    Fixes: f5d4abea3ce0 ("can: kvaser_usb: Add support for the USBcan-II family")
    Link: https://lore.kernel.org/all/20220603083820.800246-4-extja@kvaser.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    [mkl: remove stray netlink.h include]
    [mkl: keep struct can_bittiming_const kvaser_usb_flexc_bittiming_const in kvaser_usb_hydra.c]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f81973706bc9c828e7801df7c9b38eb7c8a9aa5
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Fri Jul 8 20:47:25 2022 +0200

    can: kvaser_usb: kvaser_usb_leaf: fix CAN clock frequency regression
    
    commit e6c80e601053ffdac5709f11ff3ec1e19ed05f7b upstream.
    
    The firmware of M32C based Leaf devices expects bittiming parameters
    calculated for 16MHz clock. Since we use the actual clock frequency of
    the device, the device may end up with wrong bittiming parameters,
    depending on user requested parameters.
    
    This regression affects M32C based Leaf devices with non-16MHz clock.
    
    Fixes: 7a09ebf00238 ("can: kvaser_usb: get CAN clock frequency from device")
    Link: https://lore.kernel.org/all/20220603083820.800246-3-extja@kvaser.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e3121348beb1fd2bd8938675ac22014bc7c51c0
Author: Jimmy Assarsson <extja@kvaser.com>
Date:   Fri Jul 8 20:47:24 2022 +0200

    can: kvaser_usb: replace run-time checks with struct kvaser_usb_driver_info
    
    commit 49f274c72357d2d74cba70b172cf369768909707 upstream.
    
    Unify and move compile-time known information into new struct
    kvaser_usb_driver_info, in favor of run-time checks.
    
    All Kvaser USBcanII supports listen-only mode and error counter
    reporting.
    
    Link: https://lore.kernel.org/all/20220603083820.800246-2-extja@kvaser.com
    Suggested-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jimmy Assarsson <extja@kvaser.com>
    [mkl: move struct kvaser_usb_driver_info into kvaser_usb_core.c]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d7fb0239d091d6950d3074c2b0211e54cb2e467
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Thu Jun 30 14:16:54 2022 +0200

    powerpc/powernv: delay rng platform device creation until later in boot
    
    commit 887502826549caa7e4215fd9e628f48f14c0825a upstream.
    
    The platform device for the rng must be created much later in boot.
    Otherwise it tries to connect to a parent that doesn't yet exist,
    resulting in this splat:
    
      [    0.000478] kobject: '(null)' ((____ptrval____)): is not initialized, yet kobject_get() is being called.
      [    0.002925] [c000000002a0fb30] [c00000000073b0bc] kobject_get+0x8c/0x100 (unreliable)
      [    0.003071] [c000000002a0fba0] [c00000000087e464] device_add+0xf4/0xb00
      [    0.003194] [c000000002a0fc80] [c000000000a7f6e4] of_device_add+0x64/0x80
      [    0.003321] [c000000002a0fcb0] [c000000000a800d0] of_platform_device_create_pdata+0xd0/0x1b0
      [    0.003476] [c000000002a0fd00] [c00000000201fa44] pnv_get_random_long_early+0x240/0x2e4
      [    0.003623] [c000000002a0fe20] [c000000002060c38] random_init+0xc0/0x214
    
    This patch fixes the issue by doing the platform device creation inside
    of machine_subsys_initcall.
    
    Fixes: f3eac426657d ("powerpc/powernv: wire up rng during setup_arch")
    Cc: stable@vger.kernel.org
    Reported-by: Sachin Sant <sachinp@linux.ibm.com>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Tested-by: Sachin Sant <sachinp@linux.ibm.com>
    [mpe: Change "of node" to "platform device" in change log]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220630121654.1939181-1-Jason@zx2c4.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 377ca648a129cce6420e9f226f65e6e62234cc08
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Fri Jul 1 01:33:29 2022 +0800

    video: of_display_timing.h: include errno.h
    
    commit 3663a2fb325b8782524f3edb0ae32d6faa615109 upstream.
    
    If CONFIG_OF is not enabled, default of_get_display_timing() returns an
    errno, so include the header.
    
    Fixes: 422b67e0b31a ("videomode: provide dummy inline functions for !CONFIG_OF")
    Suggested-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eae522ed28fe1c00375a8a0081a97dce7996e4d8
Author: Helge Deller <deller@gmx.de>
Date:   Sat Jun 25 12:56:49 2022 +0200

    fbcon: Disallow setting font bigger than screen size
    
    commit 65a01e601dbba8b7a51a2677811f70f783766682 upstream.
    
    Prevent that users set a font size which is bigger than the physical screen.
    It's unlikely this may happen (because screens are usually much larger than the
    fonts and each font char is limited to 32x32 pixels), but it may happen on
    smaller screens/LCD displays.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d14cb7adac83dde28d930535855ef6e5ae9267ae
Author: Yian Chen <yian.chen@intel.com>
Date:   Fri May 20 17:21:15 2022 -0700

    iommu/vt-d: Fix PCI bus rescan device hot add
    
    commit 316f92a705a4c2bf4712135180d56f3cca09243a upstream.
    
    Notifier calling chain uses priority to determine the execution
    order of the notifiers or listeners registered to the chain.
    PCI bus device hot add utilizes the notification mechanism.
    
    The current code sets low priority (INT_MIN) to Intel
    dmar_pci_bus_notifier and postpones DMAR decoding after adding
    new device into IOMMU. The result is that struct device pointer
    cannot be found in DRHD search for the new device's DMAR/IOMMU.
    Subsequently, the device is put under the "catch-all" IOMMU
    instead of the correct one. This could cause system hang when
    device TLB invalidation is sent to the wrong IOMMU. Invalidation
    timeout error and hard lockup have been observed and data
    inconsistency/crush may occur as well.
    
    This patch fixes the issue by setting a positive priority(1) for
    dmar_pci_bus_notifier while the priority of IOMMU bus notifier
    uses the default value(0), therefore DMAR decoding will be in
    advance of DRHD search for a new device to find the correct IOMMU.
    
    Following is a 2-step example that triggers the bug by simulating
    PCI device hot add behavior in Intel Sapphire Rapids server.
    
    echo 1 > /sys/bus/pci/devices/0000:6a:01.0/remove
    echo 1 > /sys/bus/pci/rescan
    
    Fixes: 59ce0515cdaf ("iommu/vt-d: Update DRHD/RMRR/ATSR device scope")
    Cc: stable@vger.kernel.org # v3.15+
    Reported-by: Zhang, Bernice <bernice.zhang@intel.com>
    Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Signed-off-by: Yian Chen <yian.chen@intel.com>
    Link: https://lore.kernel.org/r/20220521002115.1624069-1-yian.chen@intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e426d15307c5e0fbb7cca75d7468553910be35ee
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Tue Jul 5 20:56:10 2022 +0800

    net: rose: fix UAF bug caused by rose_t0timer_expiry
    
    commit 148ca04518070910739dfc4eeda765057856403d upstream.
    
    There are UAF bugs caused by rose_t0timer_expiry(). The
    root cause is that del_timer() could not stop the timer
    handler that is running and there is no synchronization.
    One of the race conditions is shown below:
    
        (thread 1)             |        (thread 2)
                               | rose_device_event
                               |   rose_rt_device_down
                               |     rose_remove_neigh
    rose_t0timer_expiry        |       rose_stop_t0timer(rose_neigh)
      ...                      |         del_timer(&neigh->t0timer)
                               |         kfree(rose_neigh) //[1]FREE
      neigh->dce_mode //[2]USE |
    
    The rose_neigh is deallocated in position [1] and use in
    position [2].
    
    The crash trace triggered by POC is like below:
    
    BUG: KASAN: use-after-free in expire_timers+0x144/0x320
    Write of size 8 at addr ffff888009b19658 by task swapper/0/0
    ...
    Call Trace:
     <IRQ>
     dump_stack_lvl+0xbf/0xee
     print_address_description+0x7b/0x440
     print_report+0x101/0x230
     ? expire_timers+0x144/0x320
     kasan_report+0xed/0x120
     ? expire_timers+0x144/0x320
     expire_timers+0x144/0x320
     __run_timers+0x3ff/0x4d0
     run_timer_softirq+0x41/0x80
     __do_softirq+0x233/0x544
     ...
    
    This patch changes rose_stop_ftimer() and rose_stop_t0timer()
    in rose_remove_neigh() to del_timer_sync() in order that the
    timer handler could be finished before the resources such as
    rose_neigh and so on are deallocated. As a result, the UAF
    bugs could be mitigated.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Link: https://lore.kernel.org/r/20220705125610.77971-1-duoming@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5165e657987ff4ba0ace896d4376a3718a9fbc3
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Jul 5 14:53:51 2022 +0200

    usbnet: fix memory leak in error case
    
    commit b55a21b764c1e182014630fa5486d717484ac58f upstream.
    
    usbnet_write_cmd_async() mixed up which buffers
    need to be freed in which error case.
    
    v2: add Fixes tag
    v3: fix uninitialized buf pointer
    
    Fixes: 877bd862f32b8 ("usbnet: introduce usbnet 3 command helpers")
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20220705125351.17309-1-oneukum@suse.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d91492638b054f4a359621ef216242be5973ed6b
Author: Rhett Aultman <rhett.aultman@samsara.com>
Date:   Sun Jul 3 19:33:06 2022 +0200

    can: gs_usb: gs_usb_open/close(): fix memory leak
    
    commit 2bda24ef95c0311ab93bda00db40486acf30bd0a upstream.
    
    The gs_usb driver appears to suffer from a malady common to many USB
    CAN adapter drivers in that it performs usb_alloc_coherent() to
    allocate a number of USB request blocks (URBs) for RX, and then later
    relies on usb_kill_anchored_urbs() to free them, but this doesn't
    actually free them. As a result, this may be leaking DMA memory that's
    been used by the driver.
    
    This commit is an adaptation of the techniques found in the esd_usb2
    driver where a similar design pattern led to a memory leak. It
    explicitly frees the RX URBs and their DMA memory via a call to
    usb_free_coherent(). Since the RX URBs were allocated in the
    gs_can_open(), we remove them in gs_can_close() rather than in the
    disconnect function as was done in esd_usb2.
    
    For more information, see the 928150fad41b ("can: esd_usb2: fix memory
    leak").
    
    Link: https://lore.kernel.org/all/alpine.DEB.2.22.394.2206031547001.1630869@thelappy
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Rhett Aultman <rhett.aultman@samsara.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit effa1894e1bd744f9674e4aedaf8f6ed8db5eba3
Author: Liang He <windhl@126.com>
Date:   Sun Jun 19 15:02:57 2022 +0800

    can: grcan: grcan_probe(): remove extra of_node_get()
    
    commit 562fed945ea482833667f85496eeda766d511386 upstream.
    
    In grcan_probe(), of_find_node_by_path() has already increased the
    refcount. There is no need to call of_node_get() again, so remove it.
    
    Link: https://lore.kernel.org/all/20220619070257.4067022-1-windhl@126.com
    Fixes: 1e93ed26acf0 ("can: grcan: grcan_probe(): fix broken system id check for errata workaround needs")
    Cc: stable@vger.kernel.org # v5.18
    Cc: Andreas Larsson <andreas@gaisler.com>
    Signed-off-by: Liang He <windhl@126.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbac09a3b8890003c0c55294c00709f3ae5501bb
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Fri May 20 20:32:39 2022 +0200

    can: bcm: use call_rcu() instead of costly synchronize_rcu()
    
    commit f1b4e32aca0811aa011c76e5d6cf2fa19224b386 upstream.
    
    In commit d5f9023fa61e ("can: bcm: delay release of struct bcm_op
    after synchronize_rcu()") Thadeu Lima de Souza Cascardo introduced two
    synchronize_rcu() calls in bcm_release() (only once at socket close)
    and in bcm_delete_rx_op() (called on removal of each single bcm_op).
    
    Unfortunately this slow removal of the bcm_op's affects user space
    applications like cansniffer where the modification of a filter
    removes 2048 bcm_op's which blocks the cansniffer application for
    40(!) seconds.
    
    In commit 181d4447905d ("can: gw: use call_rcu() instead of costly
    synchronize_rcu()") Eric Dumazet replaced the synchronize_rcu() calls
    with several call_rcu()'s to safely remove the data structures after
    the removal of CAN ID subscriptions with can_rx_unregister() calls.
    
    This patch adopts Erics approach for the can-bcm which should be
    applicable since the removal of tasklet_kill() in bcm_remove_op() and
    the introduction of the HRTIMER_MODE_SOFT timer handling in Linux 5.4.
    
    Fixes: d5f9023fa61e ("can: bcm: delay release of struct bcm_op after synchronize_rcu()") # >= 5.4
    Link: https://lore.kernel.org/all/20220520183239.19111-1-socketcan@hartkopp.net
    Cc: stable@vger.kernel.org
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Norbert Slusarek <nslusarek@gmx.net>
    Cc: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2b2f0e2e34d71ae6c2a1114fd3c525930e84bc7
Author: Jann Horn <jannh@google.com>
Date:   Wed Jun 8 20:22:05 2022 +0200

    mm/slub: add missing TID updates on slab deactivation
    
    commit eeaa345e128515135ccb864c04482180c08e3259 upstream.
    
    The fastpath in slab_alloc_node() assumes that c->slab is stable as long as
    the TID stays the same. However, two places in __slab_alloc() currently
    don't update the TID when deactivating the CPU slab.
    
    If multiple operations race the right way, this could lead to an object
    getting lost; or, in an even more unlikely situation, it could even lead to
    an object being freed onto the wrong slab's freelist, messing up the
    `inuse` counter and eventually causing a page to be freed to the page
    allocator while it still contains slab objects.
    
    (I haven't actually tested these cases though, this is just based on
    looking at the code. Writing testcases for this stuff seems like it'd be
    a pain...)
    
    The race leading to state inconsistency is (all operations on the same CPU
    and kmem_cache):
    
     - task A: begin do_slab_free():
        - read TID
        - read pcpu freelist (==NULL)
        - check `slab == c->slab` (true)
     - [PREEMPT A->B]
     - task B: begin slab_alloc_node():
        - fastpath fails (`c->freelist` is NULL)
        - enter __slab_alloc()
        - slub_get_cpu_ptr() (disables preemption)
        - enter ___slab_alloc()
        - take local_lock_irqsave()
        - read c->freelist as NULL
        - get_freelist() returns NULL
        - write `c->slab = NULL`
        - drop local_unlock_irqrestore()
        - goto new_slab
        - slub_percpu_partial() is NULL
        - get_partial() returns NULL
        - slub_put_cpu_ptr() (enables preemption)
     - [PREEMPT B->A]
     - task A: finish do_slab_free():
        - this_cpu_cmpxchg_double() succeeds()
        - [CORRUPT STATE: c->slab==NULL, c->freelist!=NULL]
    
    From there, the object on c->freelist will get lost if task B is allowed to
    continue from here: It will proceed to the retry_load_slab label,
    set c->slab, then jump to load_freelist, which clobbers c->freelist.
    
    But if we instead continue as follows, we get worse corruption:
    
     - task A: run __slab_free() on object from other struct slab:
        - CPU_PARTIAL_FREE case (slab was on no list, is now on pcpu partial)
     - task A: run slab_alloc_node() with NUMA node constraint:
        - fastpath fails (c->slab is NULL)
        - call __slab_alloc()
        - slub_get_cpu_ptr() (disables preemption)
        - enter ___slab_alloc()
        - c->slab is NULL: goto new_slab
        - slub_percpu_partial() is non-NULL
        - set c->slab to slub_percpu_partial(c)
        - [CORRUPT STATE: c->slab points to slab-1, c->freelist has objects
          from slab-2]
        - goto redo
        - node_match() fails
        - goto deactivate_slab
        - existing c->freelist is passed into deactivate_slab()
        - inuse count of slab-1 is decremented to account for object from
          slab-2
    
    At this point, the inuse count of slab-1 is 1 lower than it should be.
    This means that if we free all allocated objects in slab-1 except for one,
    SLUB will think that slab-1 is completely unused, and may free its page,
    leading to use-after-free.
    
    Fixes: c17dda40a6a4e ("slub: Separate out kmem_cache_cpu processing from deactivate_slab")
    Fixes: 03e404af26dc2 ("slub: fast release on full slab")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: Christoph Lameter <cl@linux.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Muchun Song <songmuchun@bytedance.com>
    Tested-by: Hyeonggon Yoo <42.hyeyoo@gmail.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Link: https://lore.kernel.org/r/20220608182205.2945720-1-jannh@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef6f83df1209a7d9bd1c605a62457d4c00f9179e
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed Apr 13 10:10:50 2022 +0200

    esp: limit skb_page_frag_refill use to a single page
    
    commit 5bd8baab087dff657e05387aee802e70304cc813 upstream.
    
    Commit ebe48d368e97 ("esp: Fix possible buffer overflow in ESP
    transformation") tried to fix skb_page_frag_refill usage in ESP by
    capping allocsize to 32k, but that doesn't completely solve the issue,
    as skb_page_frag_refill may return a single page. If that happens, we
    will write out of bounds, despite the check introduced in the previous
    patch.
    
    This patch forces COW in cases where we would end up calling
    skb_page_frag_refill with a size larger than a page (first in
    esp_output_head with tailen, then in esp_output_tail with
    skb->data_len).
    
    Fixes: cac2661c53f3 ("esp4: Avoid skb_cow_data whenever possible")
    Fixes: 03e2a30f6a27 ("esp6: Avoid skb_cow_data whenever possible")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4410df70110ff5175bf7f7fdc3bae5c80f2c36d9
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jan 8 11:29:48 2024 +0100

    Linux 5.4.266
    
    Link: https://lore.kernel.org/r/20240105143815.541462991@linuxfoundation.org
    Tested-by: kernelci.org bot <bot@kernelci.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Link: https://lore.kernel.org/r/20240106084016.200641776@linuxfoundation.org
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d0f1fd80ad680434d898fc898d75e2244279701
Author: Sarthak Kukreti <sarthakkukreti@chromium.org>
Date:   Wed Oct 11 13:12:30 2023 -0700

    block: Don't invalidate pagecache for invalid falloc modes
    
    commit 1364a3c391aedfeb32aa025303ead3d7c91cdf9d upstream.
    
    Only call truncate_bdev_range() if the fallocate mode is supported. This
    fixes a bug where data in the pagecache could be invalidated if the
    fallocate() was called on the block device with an invalid mode.
    
    Fixes: 25f4c41415e5 ("block: implement (some of) fallocate for block devices")
    Cc: stable@vger.kernel.org
    Reported-by: "Darrick J. Wong" <djwong@kernel.org>
    Signed-off-by: Sarthak Kukreti <sarthakkukreti@chromium.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: "Darrick J. Wong" <djwong@kernel.org>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Fixes: line?  I've never seen those wrapped.
    Link: https://lore.kernel.org/r/20231011201230.750105-1-sarthakkukreti@chromium.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sarthak Kukreti <sarthakkukreti@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0678f5047583294d8a5f3181c713a37d9a5564d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 26 12:59:02 2023 -0500

    ring-buffer: Fix wake ups when buffer_percent is set to 100
    
    commit 623b1f896fa8a669a277ee5a258307a16c7377a3 upstream.
    
    The tracefs file "buffer_percent" is to allow user space to set a
    water-mark on how much of the tracing ring buffer needs to be filled in
    order to wake up a blocked reader.
    
     0 - is to wait until any data is in the buffer
     1 - is to wait for 1% of the sub buffers to be filled
     50 - would be half of the sub buffers are filled with data
     100 - is not to wake the waiter until the ring buffer is completely full
    
    Unfortunately the test for being full was:
    
            dirty = ring_buffer_nr_dirty_pages(buffer, cpu);
            return (dirty * 100) > (full * nr_pages);
    
    Where "full" is the value for "buffer_percent".
    
    There is two issues with the above when full == 100.
    
    1. dirty * 100 > 100 * nr_pages will never be true
       That is, the above is basically saying that if the user sets
       buffer_percent to 100, more pages need to be dirty than exist in the
       ring buffer!
    
    2. The page that the writer is on is never considered dirty, as dirty
       pages are only those that are full. When the writer goes to a new
       sub-buffer, it clears the contents of that sub-buffer.
    
    That is, even if the check was ">=" it would still not be equal as the
    most pages that can be considered "dirty" is nr_pages - 1.
    
    To fix this, add one to dirty and use ">=" in the compare.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231226125902.4a057f1d@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Fixes: 03329f9939781 ("tracing: Add tracefs file buffer_percentage")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 508e2fdd978e4c26798eac2059f9520255904f82
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Fri Dec 15 19:59:14 2023 -0300

    smb: client: fix OOB in smbCalcSize()
    
    [ Upstream commit b35858b3786ddbb56e1c35138ba25d6adf8d0bef ]
    
    Validate @smb->WordCount to avoid reading off the end of @smb and thus
    causing the following KASAN splat:
    
      BUG: KASAN: slab-out-of-bounds in smbCalcSize+0x32/0x40 [cifs]
      Read of size 2 at addr ffff88801c024ec5 by task cifsd/1328
    
      CPU: 1 PID: 1328 Comm: cifsd Not tainted 6.7.0-rc5 #9
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
      rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x4a/0x80
       print_report+0xcf/0x650
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __phys_addr+0x46/0x90
       kasan_report+0xd8/0x110
       ? smbCalcSize+0x32/0x40 [cifs]
       ? smbCalcSize+0x32/0x40 [cifs]
       kasan_check_range+0x105/0x1b0
       smbCalcSize+0x32/0x40 [cifs]
       checkSMB+0x162/0x370 [cifs]
       ? __pfx_checkSMB+0x10/0x10 [cifs]
       cifs_handle_standard+0xbc/0x2f0 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       cifs_demultiplex_thread+0xed1/0x1360 [cifs]
       ? __pfx_cifs_demultiplex_thread+0x10/0x10 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? lockdep_hardirqs_on_prepare+0x136/0x210
       ? __pfx_lock_release+0x10/0x10
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? mark_held_locks+0x1a/0x90
       ? lockdep_hardirqs_on_prepare+0x136/0x210
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __kthread_parkme+0xce/0xf0
       ? __pfx_cifs_demultiplex_thread+0x10/0x10 [cifs]
       kthread+0x18d/0x1d0
       ? kthread+0xdb/0x1d0
       ? __pfx_kthread+0x10/0x10
       ret_from_fork+0x34/0x60
       ? __pfx_kthread+0x10/0x10
       ret_from_fork_asm+0x1b/0x30
       </TASK>
    
    This fixes CVE-2023-6606.
    
    Reported-by: j51569436@gmail.com
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218218
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 644b956c946aa76e07c5f86d3786e82041f714ac
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Wed Dec 13 16:22:43 2023 +0300

    usb: fotg210-hcd: delete an incorrect bounds test
    
    [ Upstream commit 7fbcd195e2b8cc952e4aeaeb50867b798040314c ]
    
    Here "temp" is the number of characters that we have written and "size"
    is the size of the buffer.  The intent was clearly to say that if we have
    written to the end of the buffer then stop.
    
    However, for that to work the comparison should have been done on the
    original "size" value instead of the "size -= temp" value.  Not only
    will that not trigger when we want to, but there is a small chance that
    it will trigger incorrectly before we want it to and we break from the
    loop slightly earlier than intended.
    
    This code was recently changed from using snprintf() to scnprintf().  With
    snprintf() we likely would have continued looping and passed a negative
    size parameter to snprintf().  This would have triggered an annoying
    WARN().  Now that we have converted to scnprintf() "size" will never
    drop below 1 and there is no real need for this test.  We could change
    the condition to "if (temp <= 1) goto done;" but just deleting the test
    is cleanest.
    
    Fixes: 7d50195f6c50 ("usb: host: Faraday fotg210-hcd driver")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Lee Jones <lee@kernel.org>
    Link: https://lore.kernel.org/r/ZXmwIwHe35wGfgzu@suswa
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a56a19e44b17be04a5c9a25af43555b60418e6f5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 7 20:49:24 2023 +0100

    x86/alternatives: Sync core before enabling interrupts
    
    commit 3ea1704a92967834bf0e64ca1205db4680d04048 upstream.
    
    text_poke_early() does:
    
       local_irq_save(flags);
       memcpy(addr, opcode, len);
       local_irq_restore(flags);
       sync_core();
    
    That's not really correct because the synchronization should happen before
    interrupts are re-enabled to ensure that a pending interrupt observes the
    complete update of the opcodes.
    
    It's not entirely clear whether the interrupt entry provides enough
    serialization already, but moving the sync_core() invocation into interrupt
    disabled region does no harm and is obviously correct.
    
    Fixes: 6fffacb30349 ("x86/alternatives, jumplabel: Use text_poke_early() before mm_init()")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/ZT6narvE%2BLxX%2B7Be@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4111986fb90e1dec925c25c5fdce46e121ffe2e8
Author: Rouven Czerwinski <r.czerwinski@pengutronix.de>
Date:   Thu Dec 7 08:58:36 2023 +0100

    net: rfkill: gpio: set GPIO direction
    
    commit 23484d817082c3005252d8edfc8292c8a1006b5b upstream.
    
    Fix the undefined usage of the GPIO consumer API after retrieving the
    GPIO description with GPIO_ASIS. The API documentation mentions that
    GPIO_ASIS won't set a GPIO direction and requires the user to set a
    direction before using the GPIO.
    
    This can be confirmed on i.MX6 hardware, where rfkill-gpio is no longer
    able to enabled/disable a device, presumably because the GPIO controller
    was never configured for the output direction.
    
    Fixes: b2f750c3a80b ("net: rfkill: gpio: prevent value glitch during probe")
    Cc: stable@vger.kernel.org
    Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>
    Link: https://msgid.link/20231207075835.3091694-1-r.czerwinski@pengutronix.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c375a83d1f984548b07d10163b7347af6f57370
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Wed Dec 6 23:09:13 2023 +0300

    net: 9p: avoid freeing uninit memory in p9pdu_vreadf
    
    commit ff49bf1867578f23a5ffdd38f927f6e1e16796c4 upstream.
    
    If some of p9pdu_readf() calls inside case 'T' in p9pdu_vreadf() fails,
    the error path is not handled properly. *wnames or members of *wnames
    array may be left uninitialized and invalidly freed.
    
    Initialize *wnames to NULL in beginning of case 'T'. Initialize the first
    *wnames array element to NULL and nullify the failing *wnames element so
    that the error path freeing loop stops on the first NULL element and
    doesn't proceed further.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: ace51c4dd2f9 ("9p: add new protocol support code")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Message-ID: <20231206200913.16135-1-pchelkin@ispras.ru>
    Cc: stable@vger.kernel.org
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e7f3899fb810a80df79bc0d993aedc65d37d991
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Nov 20 10:04:39 2023 -0500

    Bluetooth: hci_event: Fix not checking if HCI_OP_INQUIRY has been sent
    
    commit 99e67d46e5ff3c7c901af6009edec72d3d363be8 upstream.
    
    Before setting HCI_INQUIRY bit check if HCI_OP_INQUIRY was really sent
    otherwise the controller maybe be generating invalid events or, more
    likely, it is a result of fuzzing tools attempting to test the right
    behavior of the stack when unexpected events are generated.
    
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=218151
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a83debb523100630122889370d474416e2b2f4d3
Author: Reinhard Speyerer <rspmn@arcor.de>
Date:   Tue Dec 12 18:15:38 2023 +0100

    USB: serial: option: add Quectel RM500Q R13 firmware support
    
    commit 06f22cd6635bdae7d73566fca9879b2026a08e00 upstream.
    
    Add support for Quectel RM500Q R13 firmware which uses Prot=40 for the
    NMEA port:
    
    T:  Bus=02 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  8 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0800 Rev= 4.14
    S:  Manufacturer=Quectel
    S:  Product=RM500Q-AE
    S:  SerialNumber=xxxxxxxx
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=88(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Signed-off-by: Reinhard Speyerer <rspmn@arcor.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c82ba4cb44d14dde895ee7135cd9df5066779f3f
Author: Slark Xiao <slark_xiao@163.com>
Date:   Fri Dec 1 10:09:50 2023 +0800

    USB: serial: option: add Foxconn T99W265 with new baseline
    
    commit 13fde9ac23ca8c6d1ac13cc9eefe1f1ac3ee30a4 upstream.
    
    This ID was added based on latest SDX12 code base line, and we
    made some changes with previous 0489:e0db.
    
    Test evidence as below:
    T:  Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  3 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  2
    P:  Vendor=0489 ProdID=e0da Rev=05.04
    S:  Manufacturer=Qualcomm
    S:  Product=Qualcomm Snapdragon X12
    S:  SerialNumber=2bda65fb
    C:  #Ifs= 6 Cfg#= 2 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    
    0&1: MBIM, 2: Modem, 3:GNSS, 4:Diag, 5:ADB
    
    Signed-off-by: Slark Xiao <slark_xiao@163.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f87ba56c43d3a77fde712f2de981356796e940f
Author: Alper Ak <alperyasinak1@gmail.com>
Date:   Tue Aug 8 13:51:58 2023 +0300

    USB: serial: option: add Quectel EG912Y module support
    
    commit 6d79d9434c69bb8ffa8a631050eb0ad6b83d3e90 upstream.
    
    Add Quectel EG912Y "DIAG, AT, MODEM"
    
    0x6001: ECM / RNDIS + DIAG + AT + MODEM
    
    T:  Bus=01 Lev=02 Prnt=02 Port=00 Cnt=01 Dev#=  3 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=6001 Rev= 3.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=0000
    C:* #Ifs= 5 Cfg#= 1 Atr=e0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=06 Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0c(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0b(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=89(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0a(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Alper Ak <alperyasinak1@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a59cb26bc188d1b8a786595f0b95eb543f57d5bf
Author: Mark Glover <mark.glover@actisense.com>
Date:   Wed Dec 20 13:57:40 2023 +0000

    USB: serial: ftdi_sio: update Actisense PIDs constant names
    
    commit 513d88a88e0203188a38f4647dd08170aebd85df upstream.
    
    Update the constant names for unused USB PIDs (product identifiers) to
    reflect the new products now using the PIDs.
    
    Signed-off-by: Mark Glover <mark.glover@actisense.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a70b1933fa545e92946def4df145d57f7776e5dc
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Dec 14 09:08:16 2023 +0100

    wifi: cfg80211: fix certs build to not depend on file order
    
    commit 3c2a8ebe3fe66a5f77d4c164a0bea8e2ff37b455 upstream.
    
    The file for the new certificate (Chen-Yu Tsai's) didn't
    end with a comma, so depending on the file order in the
    build rule, we'd end up with invalid C when concatenating
    the (now two) certificates. Fix that.
    
    Cc: stable@vger.kernel.org
    Reported-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Fixes: fb768d3b13ff ("wifi: cfg80211: Add my certificate")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8fb00205144fc9360b766d1a03450a95f3a5f30
Author: Chen-Yu Tsai <wens@kernel.org>
Date:   Thu Dec 7 21:20:50 2023 +0800

    wifi: cfg80211: Add my certificate
    
    commit fb768d3b13ffa325b7e84480d488ac799c9d2cd7 upstream.
    
    As announced [1][2], I have taken over maintainership of the
    wireless-regdb project.
    
    Add my certificate so that newer releases are valid to the kernel.
    Seth's certificate should be kept around for awhile, at least until
    a few new releases by me happen.
    
    This should also be applied to stable trees so that stable kernels
    can utilize newly released database binaries.
    
    [1] https://lore.kernel.org/linux-wireless/CAGb2v657baNMPKU3QADijx7hZa=GUcSv2LEDdn6N=QQaFX8r-g@mail.gmail.com/
    [2] https://lore.kernel.org/linux-wireless/ZWmRR5ul7EDfxCan@wens.tw/
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Chen-Yu Tsai <wens@kernel.org>
    Acked-by: Seth Forshee <sforshee@kernel.org>
    Link: https://msgid.link/ZXHGsqs34qZyzZng@wens.tw
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8717fd6d0c30d2d832a8edfd34d1abe7aeff6df2
Author: Wadim Egorov <w.egorov@phytec.de>
Date:   Mon Sep 25 15:44:27 2023 +0200

    iio: adc: ti_am335x_adc: Fix return value check of tiadc_request_dma()
    
    commit 60576e84c187043cef11f11d015249e71151d35a upstream.
    
    Fix wrong handling of a DMA request where the probing only failed
    if -EPROPE_DEFER was returned. Instead, let us fail if a non -ENODEV
    value is returned. This makes DMAs explicitly optional. Even if the
    DMA request is unsuccessfully, the ADC can still work properly.
    We do also handle the defer probe case by making use of dev_err_probe().
    
    Fixes: f438b9da75eb ("drivers: iio: ti_am335x_adc: add dma support")
    Signed-off-by: Wadim Egorov <w.egorov@phytec.de>
    Reviewed-by: Bhavya Kapoor <b-kapoor@ti.com>
    Link: https://lore.kernel.org/r/20230925134427.214556-1-w.egorov@phytec.de
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45af72f149a878b6502ee595450d4fd595d4b35b
Author: Javier Carrasco <javier.carrasco.cruz@gmail.com>
Date:   Thu Oct 26 17:44:49 2023 +0200

    iio: common: ms_sensors: ms_sensors_i2c: fix humidity conversion time table
    
    commit 54cf39ec16335dadbe1ba008d8e5e98dae3e26f8 upstream.
    
    The HTU21 offers 4 sampling frequencies: 20, 40, 70 and 120, which are
    associated to an index that is used to select the right measurement
    resolution and its corresponding measurement time. The current
    implementation selects the measurement resolution and the temperature
    measurement time properly, but it does not select the right humidity
    measurement time in all cases.
    
    In summary, the 40 and 70 humidity measurement times are swapped.
    
    The reason for that is probably the unusual coding for the measurement
    resolution. According to the datasheet, the bits [7,0] of the "user
    register" are used as follows to select the bit resolution:
    
    --------------------------------------------------
    | Bit 7 | Bit 0 | RH | Temp | Trh (us) | Tt (us) |
    --------------------------------------------------
    |   0   |   0   | 12 |  14  |  16000   |  50000  |
    --------------------------------------------------
    |   0   |   1   | 8  |  12  |  3000    |  13000  |
    --------------------------------------------------
    |   1   |   0   | 10 |  13  |  5000    |  25000  |
    --------------------------------------------------
    |   1   |   1   | 11 |  11  |  8000    |  7000   |
    --------------------------------------------------
    *This table is available in the official datasheet, page 13/21. I have
    just appended the times provided in the humidity/temperature tables,
    pages 3/21, 5/21. Note that always a pair of resolutions is selected.
    
    The sampling frequencies [20, 40, 70, 120] are assigned to a linear
    index [0..3] which is then coded as follows [1]:
    
    Index    [7,0]
    --------------
    idx 0     0,0
    idx 1     1,0
    idx 2     0,1
    idx 3     1,1
    
    That is done that way because the temperature measurements are being
    used as the reference for the sampling frequency (the frequencies and
    the temperature measurement times are correlated), so increasing the
    index always reduces the temperature measurement time and its
    resolution. Therefore, the temperature measurement time array is as
    simple as [50000, 25000, 13000, 7000]
    
    On the other hand, the humidity resolution cannot follow the same
    pattern because of the way it is coded in the "user register", where
    both resolutions are selected at the same time. The humidity measurement
    time array is the following: [16000, 3000, 5000, 8000], which defines
    the following assignments:
    
    Index    [7,0]    Trh
    -----------------------
    idx 0     0,0     16000  -> right, [0,0] selects 12 bits (Trh = 16000)
    idx 1     1,0     3000   -> wrong! [1,0] selects 10 bits (Trh = 5000)
    idx 2     0,1     5000   -> wrong! [0,1] selects 8 bits (Trh = 3000)
    idx 3     1,1     8000   -> right, [1,1] selects 11 bits (Trh = 8000)
    
    The times have been ordered as if idx = 1 -> [0,1] and idx = 2 -> [1,0],
    which is not the case for the reason explained above.
    
    So a simple modification is required to obtain the right humidity
    measurement time array, swapping the values in the positions 1 and 2.
    
    The right table should be the following: [16000, 5000, 3000, 8000]
    
    Fix the humidity measurement time array with the right idex/value
    coding.
    
    [1] The actual code that makes this coding and assigns it to the current
    value of the "user register" is the following:
    config_reg &= 0x7E;
    config_reg |= ((i & 1) << 7) + ((i & 2) >> 1);
    
    Fixes: d574a87cc311 ("Add meas-spec sensors common part")
    Signed-off-by: Javier Carrasco <javier.carrasco.cruz@gmail.com>
    Link: https://lore.kernel.org/r/20231026-topic-htu21_conversion_time-v1-1-bd257dc44209@gmail.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4257c16c149d3dbfefed0fcc26abcde11dacdada
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Nov 14 11:06:26 2022 +0000

    scsi: bnx2fc: Fix skb double free in bnx2fc_rcv()
    
    [ Upstream commit 08c94d80b2da481652fb633e79cbc41e9e326a91 ]
    
    skb_share_check() already drops the reference to the skb when returning
    NULL. Using kfree_skb() in the error handling path leads to an skb double
    free.
    
    Fix this by removing the variable tmp_skb, and return directly when
    skb_share_check() returns NULL.
    
    Fixes: 01a4cc4d0cd6 ("bnx2fc: do not add shared skbs to the fcoe_rx_list")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Link: https://lore.kernel.org/r/20221114110626.526643-1-weiyongjun@huaweicloud.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1b31edfe7d38115c0a7c3652dba8c59a9b483c0
Author: Haoran Liu <liuhaoran14@163.com>
Date:   Sun Dec 3 19:00:23 2023 +0000

    Input: ipaq-micro-keys - add error handling for devm_kmemdup
    
    [ Upstream commit 59b6a747e2d39227ac2325c5e29d6ab3bb070c2a ]
    
    Check the return value of i2c_add_adapter. Static analysis revealed that
    the function did not properly handle potential failures of
    i2c_add_adapter, which could lead to partial initialization of the I2C
    adapter and unstable operation.
    
    Signed-off-by: Haoran Liu <liuhaoran14@163.com>
    Link: https://lore.kernel.org/r/20231203164653.38983-1-liuhaoran14@163.com
    Fixes: d7535ffa427b ("Input: driver for microcontroller keys on the iPaq h3xxx")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a85d6aa2b5550ddb33ac03bca00cdcda59438b32
Author: Su Hui <suhui@nfschina.com>
Date:   Mon Oct 30 10:02:19 2023 +0800

    iio: imu: inv_mpu6050: fix an error code problem in inv_mpu6050_read_raw
    
    [ Upstream commit c3df0e29fb7788c4b3ddf37d5ed87dda2b822943 ]
    
    inv_mpu6050_sensor_show() can return -EINVAL or IIO_VAL_INT. Return the
    true value rather than only return IIO_VAL_INT.
    
    Fixes: d5098447147c ("iio: imu: mpu6050: add calibration offset support")
    Signed-off-by: Su Hui <suhui@nfschina.com>
    Link: https://lore.kernel.org/r/20231030020218.65728-1-suhui@nfschina.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 388c90c577d7cf29238b602dbf6d99b9b6c802e5
Author: Mike Tipton <quic_mdtipton@quicinc.com>
Date:   Wed Oct 25 07:58:29 2023 -0700

    interconnect: Treat xlate() returning NULL node as an error
    
    [ Upstream commit ad2ab1297d0c80899125a842bb7a078abfe1e6ce ]
    
    Currently, if provider->xlate() or provider->xlate_extended()
    "successfully" return a NULL node, then of_icc_get_from_provider() won't
    consider that an error and will successfully return the NULL node. This
    bypasses error handling in of_icc_get_by_index() and leads to NULL
    dereferences in path_find().
    
    This could be avoided by ensuring provider callbacks always return an
    error for NULL nodes, but it's better to explicitly protect against this
    in the common framework.
    
    Fixes: 87e3031b6fbd ("interconnect: Allow endpoints translation via DT")
    Signed-off-by: Mike Tipton <quic_mdtipton@quicinc.com>
    Link: https://lore.kernel.org/r/20231025145829.11603-1-quic_mdtipton@quicinc.com
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04c22233447d70a6a6605c6d780760e75f947923
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Dec 15 10:01:44 2023 -0500

    btrfs: do not allow non subvolume root targets for snapshot
    
    [ Upstream commit a8892fd71933126ebae3d60aec5918d4dceaae76 ]
    
    Our btrfs subvolume snapshot <source> <destination> utility enforces
    that <source> is the root of the subvolume, however this isn't enforced
    in the kernel.  Update the kernel to also enforce this limitation to
    avoid problems with other users of this ioctl that don't have the
    appropriate checks in place.
    
    Reported-by: Martin Michaelis <code@mgjm.de>
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Neal Gompa <neal@gompa.dev>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3230a69e663ba554641d68f99e0a4f6fe91c525f
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Mon Dec 11 10:26:42 2023 -0300

    smb: client: fix NULL deref in asn1_ber_decoder()
    
    [ Upstream commit 90d025c2e953c11974e76637977c473200593a46 ]
    
    If server replied SMB2_NEGOTIATE with a zero SecurityBufferOffset,
    smb2_get_data_area() sets @len to non-zero but return NULL, so
    decode_negTokeninit() ends up being called with a NULL @security_blob:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000000
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 0 P4D 0
      Oops: 0000 [#1] PREEMPT SMP NOPTI
      CPU: 2 PID: 871 Comm: mount.cifs Not tainted 6.7.0-rc4 #2
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      RIP: 0010:asn1_ber_decoder+0x173/0xc80
      Code: 01 4c 39 2c 24 75 09 45 84 c9 0f 85 2f 03 00 00 48 8b 14 24 4c 29 ea 48 83 fa 01 0f 86 1e 07 00 00 48 8b 74 24 28 4d 8d 5d 01 <42> 0f b6 3c 2e 89 fa 40 88 7c 24 5c f7 d2 83 e2 1f 0f 84 3d 07 00
      RSP: 0018:ffffc9000063f950 EFLAGS: 00010202
      RAX: 0000000000000002 RBX: 0000000000000000 RCX: 000000000000004a
      RDX: 000000000000004a RSI: 0000000000000000 RDI: 0000000000000000
      RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000002 R11: 0000000000000001 R12: 0000000000000000
      R13: 0000000000000000 R14: 000000000000004d R15: 0000000000000000
      FS:  00007fce52b0fbc0(0000) GS:ffff88806ba00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000000 CR3: 000000001ae64000 CR4: 0000000000750ef0
      PKRU: 55555554
      Call Trace:
       <TASK>
       ? __die+0x23/0x70
       ? page_fault_oops+0x181/0x480
       ? __stack_depot_save+0x1e6/0x480
       ? exc_page_fault+0x6f/0x1c0
       ? asm_exc_page_fault+0x26/0x30
       ? asn1_ber_decoder+0x173/0xc80
       ? check_object+0x40/0x340
       decode_negTokenInit+0x1e/0x30 [cifs]
       SMB2_negotiate+0xc99/0x17c0 [cifs]
       ? smb2_negotiate+0x46/0x60 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       smb2_negotiate+0x46/0x60 [cifs]
       cifs_negotiate_protocol+0xae/0x130 [cifs]
       cifs_get_smb_ses+0x517/0x1040 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? queue_delayed_work_on+0x5d/0x90
       cifs_mount_get_session+0x78/0x200 [cifs]
       dfs_mount_share+0x13a/0x9f0 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? lock_acquire+0xbf/0x2b0
       ? find_nls+0x16/0x80
       ? srso_alias_return_thunk+0x5/0xfbef5
       cifs_mount+0x7e/0x350 [cifs]
       cifs_smb3_do_mount+0x128/0x780 [cifs]
       smb3_get_tree+0xd9/0x290 [cifs]
       vfs_get_tree+0x2c/0x100
       ? capable+0x37/0x70
       path_mount+0x2d7/0xb80
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? _raw_spin_unlock_irqrestore+0x44/0x60
       __x64_sys_mount+0x11a/0x150
       do_syscall_64+0x47/0xf0
       entry_SYSCALL_64_after_hwframe+0x6f/0x77
      RIP: 0033:0x7fce52c2ab1e
    
    Fix this by setting @len to zero when @off == 0 so callers won't
    attempt to dereference non-existing data areas.
    
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ccb39511a7f31dcfd3789d621cfe0bd80bcf11f
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Fri Dec 8 15:21:26 2023 +0200

    ALSA: hda/hdmi: add force-connect quirk for NUC5CPYB
    
    [ Upstream commit 3b1ff57e24a7bcd2e2a8426dd2013a80d1fa96eb ]
    
    Add one more older NUC model that requires quirk to force all pins to be
    connected. The display codec pins are not registered properly without
    the force-connect quirk. The codec will report only one pin as having
    external connectivity, but i915 finds all three connectors on the
    system, so the two drivers are not in sync.
    
    Issue found with DRM igt-gpu-tools test kms_hdmi_inject@inject-audio.
    
    Link: https://gitlab.freedesktop.org/drm/igt-gpu-tools/-/issues/3
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Jani Saarinen <jani.saarinen@intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231208132127.2438067-2-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bcf819198d97c861f3377b64ba5bb911322517e
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Tue Jul 20 18:32:16 2021 +0300

    ALSA: hda/hdmi: Add quirk to force pin connectivity on NUC10
    
    [ Upstream commit e81d71e343c6c62cf323042caed4b7ca049deda5 ]
    
    On some Intel NUC10 variants, codec reports AC_JACK_PORT_NONE as
    pin default config for all pins. This results in broken audio.
    Add a quirk to force connectivity.
    
    BugLink: https://github.com/clearlinux/distribution/issues/2396
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20210720153216.2200938-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Stable-dep-of: 3b1ff57e24a7 ("ALSA: hda/hdmi: add force-connect quirk for NUC5CPYB")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34e6c4c6a985c668749881eebdbe52c266cb8017
Author: Alexis Lothoré <alexis.lothore@bootlin.com>
Date:   Fri Dec 15 22:34:24 2023 +0100

    pinctrl: at91-pio4: use dedicated lock class for IRQ
    
    [ Upstream commit 14694179e561b5f2f7e56a0f590e2cb49a9cc7ab ]
    
    Trying to suspend to RAM on SAMA5D27 EVK leads to the following lockdep
    warning:
    
     ============================================
     WARNING: possible recursive locking detected
     6.7.0-rc5-wt+ #532 Not tainted
     --------------------------------------------
     sh/92 is trying to acquire lock:
     c3cf306c (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0xe8/0x100
    
     but task is already holding lock:
     c3d7c46c (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0xe8/0x100
    
     other info that might help us debug this:
      Possible unsafe locking scenario:
    
            CPU0
            ----
       lock(&irq_desc_lock_class);
       lock(&irq_desc_lock_class);
    
      *** DEADLOCK ***
    
      May be due to missing lock nesting notation
    
     6 locks held by sh/92:
      #0: c3aa0258 (sb_writers#6){.+.+}-{0:0}, at: ksys_write+0xd8/0x178
      #1: c4c2df44 (&of->mutex){+.+.}-{3:3}, at: kernfs_fop_write_iter+0x138/0x284
      #2: c32684a0 (kn->active){.+.+}-{0:0}, at: kernfs_fop_write_iter+0x148/0x284
      #3: c232b6d4 (system_transition_mutex){+.+.}-{3:3}, at: pm_suspend+0x13c/0x4e8
      #4: c387b088 (&dev->mutex){....}-{3:3}, at: __device_suspend+0x1e8/0x91c
      #5: c3d7c46c (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0xe8/0x100
    
     stack backtrace:
     CPU: 0 PID: 92 Comm: sh Not tainted 6.7.0-rc5-wt+ #532
     Hardware name: Atmel SAMA5
      unwind_backtrace from show_stack+0x18/0x1c
      show_stack from dump_stack_lvl+0x34/0x48
      dump_stack_lvl from __lock_acquire+0x19ec/0x3a0c
      __lock_acquire from lock_acquire.part.0+0x124/0x2d0
      lock_acquire.part.0 from _raw_spin_lock_irqsave+0x5c/0x78
      _raw_spin_lock_irqsave from __irq_get_desc_lock+0xe8/0x100
      __irq_get_desc_lock from irq_set_irq_wake+0xa8/0x204
      irq_set_irq_wake from atmel_gpio_irq_set_wake+0x58/0xb4
      atmel_gpio_irq_set_wake from irq_set_irq_wake+0x100/0x204
      irq_set_irq_wake from gpio_keys_suspend+0xec/0x2b8
      gpio_keys_suspend from dpm_run_callback+0xe4/0x248
      dpm_run_callback from __device_suspend+0x234/0x91c
      __device_suspend from dpm_suspend+0x224/0x43c
      dpm_suspend from dpm_suspend_start+0x9c/0xa8
      dpm_suspend_start from suspend_devices_and_enter+0x1e0/0xa84
      suspend_devices_and_enter from pm_suspend+0x460/0x4e8
      pm_suspend from state_store+0x78/0xe4
      state_store from kernfs_fop_write_iter+0x1a0/0x284
      kernfs_fop_write_iter from vfs_write+0x38c/0x6f4
      vfs_write from ksys_write+0xd8/0x178
      ksys_write from ret_fast_syscall+0x0/0x1c
     Exception stack(0xc52b3fa8 to 0xc52b3ff0)
     3fa0:                   00000004 005a0ae8 00000001 005a0ae8 00000004 00000001
     3fc0: 00000004 005a0ae8 00000001 00000004 00000004 b6c616c0 00000020 0059d190
     3fe0: 00000004 b6c61678 aec5a041 aebf1a26
    
    This warning is raised because pinctrl-at91-pio4 uses chained IRQ. Whenever
    a wake up source configures an IRQ through irq_set_irq_wake, it will
    lock the corresponding IRQ desc, and then call irq_set_irq_wake on "parent"
    IRQ which will do the same on its own IRQ desc, but since those two locks
    share the same class, lockdep reports this as an issue.
    
    Fix lockdep false positive by setting a different class for parent and
    children IRQ
    
    Fixes: 776180848b57 ("pinctrl: introduce driver for Atmel PIO4 controller")
    Signed-off-by: Alexis Lothoré <alexis.lothore@bootlin.com>
    Link: https://lore.kernel.org/r/20231215-lockdep_warning-v1-1-8137b2510ed5@bootlin.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 624659563e2693010879e5486dd632a58d1605ea
Author: Quan Nguyen <quan@os.amperecomputing.com>
Date:   Mon Dec 11 17:22:16 2023 +0700

    i2c: aspeed: Handle the coalesced stop conditions with the start conditions.
    
    [ Upstream commit b4cc1cbba5195a4dd497cf2f8f09e7807977d543 ]
    
    Some masters may drive the transfers with low enough latency between
    the nak/stop phase of the current command and the start/address phase
    of the following command that the interrupts are coalesced by the
    time we process them.
    Handle the stop conditions before processing SLAVE_MATCH to fix the
    complaints that sometimes occur below.
    
    "aspeed-i2c-bus 1e78a040.i2c-bus: irq handled != irq. Expected
    0x00000086, but was 0x00000084"
    
    Fixes: f9eb91350bb2 ("i2c: aspeed: added slave support for Aspeed I2C driver")
    Signed-off-by: Quan Nguyen <quan@os.amperecomputing.com>
    Reviewed-by: Andrew Jeffery <andrew@codeconstruct.com.au>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47ae5242292db139810f578c08fa0d7ff91ec4cc
Author: David Howells <dhowells@redhat.com>
Date:   Thu Dec 21 15:09:31 2023 +0000

    afs: Fix overwriting of result of DNS query
    
    [ Upstream commit a9e01ac8c5ff32669119c40dfdc9e80eb0b7d7aa ]
    
    In afs_update_cell(), ret is the result of the DNS lookup and the errors
    are to be handled by a switch - however, the value gets clobbered in
    between by setting it to -ENOMEM in case afs_alloc_vlserver_list()
    fails.
    
    Fix this by moving the setting of -ENOMEM into the error handling for
    OOM failure.  Further, only do it if we don't have an alternative error
    to return.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.  Based
    on a patch from Anastasia Belova [1].
    
    Fixes: d5c32c89b208 ("afs: Fix cell DNS lookup")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeffrey Altman <jaltman@auristor.com>
    cc: Anastasia Belova <abelova@astralinux.ru>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    cc: lvc-project@linuxtesting.org
    Link: https://lore.kernel.org/r/20231221085849.1463-1-abelova@astralinux.ru/ [1]
    Link: https://lore.kernel.org/r/1700862.1703168632@warthog.procyon.org.uk/ # v1
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c04b7b28c9f03c2b0d8d7d232e4c9c90fcb39fee
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Dec 19 12:53:31 2023 +0000

    net: check dev->gso_max_size in gso_features_check()
    
    [ Upstream commit 24ab059d2ebd62fdccc43794796f6ffbabe49ebc ]
    
    Some drivers might misbehave if TSO packets get too big.
    
    GVE for instance uses a 16bit field in its TX descriptor,
    and will do bad things if a packet is bigger than 2^16 bytes.
    
    Linux TCP stack honors dev->gso_max_size, but there are
    other ways for too big packets to reach an ndo_start_xmit()
    handler : virtio_net, af_packet, GRO...
    
    Add a generic check in gso_features_check() and fallback
    to GSO when needed.
    
    gso_max_size was added in the blamed commit.
    
    Fixes: 82cc1a7a5687 ("[NET]: Add per-connection option to set max TSO frame size")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231219125331.4127498-1-edumazet@google.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 761ee09e9f5da07167e31db58fbd6564cdf708b8
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Nov 21 00:22:20 2020 +0100

    net: warn if gso_type isn't set for a GSO SKB
    
    [ Upstream commit 1d155dfdf50efc2b0793bce93c06d1a5b23d0877 ]
    
    In bug report [0] a warning in r8169 driver was reported that was
    caused by an invalid GSO SKB (gso_type was 0). See [1] for a discussion
    about this issue. Still the origin of the invalid GSO SKB isn't clear.
    
    It shouldn't be a network drivers task to check for invalid GSO SKB's.
    Also, even if issue [0] can be fixed, we can't be sure that a
    similar issue doesn't pop up again at another place.
    Therefore let gso_features_check() check for such invalid GSO SKB's.
    
    [0] https://bugzilla.kernel.org/show_bug.cgi?id=209423
    [1] https://www.spinics.net/lists/netdev/msg690794.html
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/97c78d21-7f0b-d843-df17-3589f224d2cf@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 24ab059d2ebd ("net: check dev->gso_max_size in gso_features_check()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eec7ef60d29791f11bea4ea5636fc67f96a17358
Author: David Howells <dhowells@redhat.com>
Date:   Mon Dec 11 15:15:02 2023 +0000

    afs: Fix dynamic root lookup DNS check
    
    [ Upstream commit 74cef6872ceaefb5b6c5c60641371ea28702d358 ]
    
    In the afs dynamic root directory, the ->lookup() function does a DNS check
    on the cell being asked for and if the DNS upcall reports an error it will
    report an error back to userspace (typically ENOENT).
    
    However, if a failed DNS upcall returns a new-style result, it will return
    a valid result, with the status field set appropriately to indicate the
    type of failure - and in that case, dns_query() doesn't return an error and
    we let stat() complete with no error - which can cause confusion in
    userspace as subsequent calls that trigger d_automount then fail with
    ENOENT.
    
    Fix this by checking the status result from a valid dns_query() and
    returning an error if it indicates a failure.
    
    Fixes: bbb4c4323a4d ("dns: Allow the dns resolver to retrieve a server set")
    Reported-by: Markus Suvanto <markus.suvanto@gmail.com>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=216637
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Markus Suvanto <markus.suvanto@gmail.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82d64cbe487c17b5740ffcf10cfec323069caefc
Author: David Howells <dhowells@redhat.com>
Date:   Mon Dec 11 15:08:57 2023 +0000

    afs: Fix the dynamic root's d_delete to always delete unused dentries
    
    [ Upstream commit 71f8b55bc30e82d6355e07811213d847981a32e2 ]
    
    Fix the afs dynamic root's d_delete function to always delete unused
    dentries rather than only deleting them if they're positive.  With things
    as they stand upstream, negative dentries stemming from failed DNS lookups
    stick around preventing retries.
    
    Fixes: 66c7e1d319a5 ("afs: Split the dynroot stuff out and give it its own ops tables")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Markus Suvanto <markus.suvanto@gmail.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b4600fb6967b5e89d7ab0adb91ad2816c4ea0e3
Author: Liu Jian <liujian56@huawei.com>
Date:   Sat Dec 16 15:52:18 2023 +0800

    net: check vlan filter feature in vlan_vids_add_by_dev() and vlan_vids_del_by_dev()
    
    [ Upstream commit 01a564bab4876007ce35f312e16797dfe40e4823 ]
    
    I got the below warning trace:
    
    WARNING: CPU: 4 PID: 4056 at net/core/dev.c:11066 unregister_netdevice_many_notify
    CPU: 4 PID: 4056 Comm: ip Not tainted 6.7.0-rc4+ #15
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.15.0-1 04/01/2014
    RIP: 0010:unregister_netdevice_many_notify+0x9a4/0x9b0
    Call Trace:
     rtnl_dellink
     rtnetlink_rcv_msg
     netlink_rcv_skb
     netlink_unicast
     netlink_sendmsg
     __sock_sendmsg
     ____sys_sendmsg
     ___sys_sendmsg
     __sys_sendmsg
     do_syscall_64
     entry_SYSCALL_64_after_hwframe
    
    It can be repoduced via:
    
        ip netns add ns1
        ip netns exec ns1 ip link add bond0 type bond mode 0
        ip netns exec ns1 ip link add bond_slave_1 type veth peer veth2
        ip netns exec ns1 ip link set bond_slave_1 master bond0
    [1] ip netns exec ns1 ethtool -K bond0 rx-vlan-filter off
    [2] ip netns exec ns1 ip link add link bond_slave_1 name bond_slave_1.0 type vlan id 0
    [3] ip netns exec ns1 ip link add link bond0 name bond0.0 type vlan id 0
    [4] ip netns exec ns1 ip link set bond_slave_1 nomaster
    [5] ip netns exec ns1 ip link del veth2
        ip netns del ns1
    
    This is all caused by command [1] turning off the rx-vlan-filter function
    of bond0. The reason is the same as commit 01f4fd270870 ("bonding: Fix
    incorrect deletion of ETH_P_8021AD protocol vid from slaves"). Commands
    [2] [3] add the same vid to slave and master respectively, causing
    command [4] to empty slave->vlan_info. The following command [5] triggers
    this problem.
    
    To fix this problem, we should add VLAN_FILTER feature checks in
    vlan_vids_add_by_dev() and vlan_vids_del_by_dev() to prevent incorrect
    addition or deletion of vlan_vid information.
    
    Fixes: 348a1443cc43 ("vlan: introduce functions to do mass addition/deletion of vids by another device")
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b10265532df7bc3666bc53261b7f03f0fd14b1c9
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 14 15:27:47 2023 +0000

    net/rose: fix races in rose_kill_by_device()
    
    [ Upstream commit 64b8bc7d5f1434c636a40bdcfcd42b278d1714be ]
    
    syzbot found an interesting netdev refcounting issue in
    net/rose/af_rose.c, thanks to CONFIG_NET_DEV_REFCNT_TRACKER=y [1]
    
    Problem is that rose_kill_by_device() can change rose->device
    while other threads do not expect the pointer to be changed.
    
    We have to first collect sockets in a temporary array,
    then perform the changes while holding the socket
    lock and rose_list_lock spinlock (in this order)
    
    Change rose_release() to also acquire rose_list_lock
    before releasing the netdev refcount.
    
    [1]
    
    [ 1185.055088][ T7889] ref_tracker: reference already released.
    [ 1185.061476][ T7889] ref_tracker: allocated in:
    [ 1185.066081][ T7889]  rose_bind+0x4ab/0xd10
    [ 1185.070446][ T7889]  __sys_bind+0x1ec/0x220
    [ 1185.074818][ T7889]  __x64_sys_bind+0x72/0xb0
    [ 1185.079356][ T7889]  do_syscall_64+0x40/0x110
    [ 1185.083897][ T7889]  entry_SYSCALL_64_after_hwframe+0x63/0x6b
    [ 1185.089835][ T7889] ref_tracker: freed in:
    [ 1185.094088][ T7889]  rose_release+0x2f5/0x570
    [ 1185.098629][ T7889]  __sock_release+0xae/0x260
    [ 1185.103262][ T7889]  sock_close+0x1c/0x20
    [ 1185.107453][ T7889]  __fput+0x270/0xbb0
    [ 1185.111467][ T7889]  task_work_run+0x14d/0x240
    [ 1185.116085][ T7889]  get_signal+0x106f/0x2790
    [ 1185.120622][ T7889]  arch_do_signal_or_restart+0x90/0x7f0
    [ 1185.126205][ T7889]  exit_to_user_mode_prepare+0x121/0x240
    [ 1185.131846][ T7889]  syscall_exit_to_user_mode+0x1e/0x60
    [ 1185.137293][ T7889]  do_syscall_64+0x4d/0x110
    [ 1185.141783][ T7889]  entry_SYSCALL_64_after_hwframe+0x63/0x6b
    [ 1185.148085][ T7889] ------------[ cut here ]------------
    
    WARNING: CPU: 1 PID: 7889 at lib/ref_tracker.c:255 ref_tracker_free+0x61a/0x810 lib/ref_tracker.c:255
    Modules linked in:
    CPU: 1 PID: 7889 Comm: syz-executor.2 Not tainted 6.7.0-rc4-syzkaller-00162-g65c95f78917e #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 11/10/2023
    RIP: 0010:ref_tracker_free+0x61a/0x810 lib/ref_tracker.c:255
    Code: 00 44 8b 6b 18 31 ff 44 89 ee e8 21 62 f5 fc 45 85 ed 0f 85 a6 00 00 00 e8 a3 66 f5 fc 48 8b 34 24 48 89 ef e8 27 5f f1 05 90 <0f> 0b 90 bb ea ff ff ff e9 52 fd ff ff e8 84 66 f5 fc 4c 8d 6d 44
    RSP: 0018:ffffc90004917850 EFLAGS: 00010202
    RAX: 0000000000000201 RBX: ffff88802618f4c0 RCX: 0000000000000000
    RDX: 0000000000000202 RSI: ffffffff8accb920 RDI: 0000000000000001
    RBP: ffff8880269ea5b8 R08: 0000000000000001 R09: fffffbfff23e35f6
    R10: ffffffff91f1afb7 R11: 0000000000000001 R12: 1ffff92000922f0c
    R13: 0000000005a2039b R14: ffff88802618f4d8 R15: 00000000ffffffff
    FS: 00007f0a720ef6c0(0000) GS:ffff8880b9900000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f43a819d988 CR3: 0000000076c64000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    netdev_tracker_free include/linux/netdevice.h:4127 [inline]
    netdev_put include/linux/netdevice.h:4144 [inline]
    netdev_put include/linux/netdevice.h:4140 [inline]
    rose_kill_by_device net/rose/af_rose.c:195 [inline]
    rose_device_event+0x25d/0x330 net/rose/af_rose.c:218
    notifier_call_chain+0xb6/0x3b0 kernel/notifier.c:93
    call_netdevice_notifiers_info+0xbe/0x130 net/core/dev.c:1967
    call_netdevice_notifiers_extack net/core/dev.c:2005 [inline]
    call_netdevice_notifiers net/core/dev.c:2019 [inline]
    __dev_notify_flags+0x1f5/0x2e0 net/core/dev.c:8646
    dev_change_flags+0x122/0x170 net/core/dev.c:8682
    dev_ifsioc+0x9ad/0x1090 net/core/dev_ioctl.c:529
    dev_ioctl+0x224/0x1090 net/core/dev_ioctl.c:786
    sock_do_ioctl+0x198/0x270 net/socket.c:1234
    sock_ioctl+0x22e/0x6b0 net/socket.c:1339
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:871 [inline]
    __se_sys_ioctl fs/ioctl.c:857 [inline]
    __x64_sys_ioctl+0x18f/0x210 fs/ioctl.c:857
    do_syscall_x64 arch/x86/entry/common.c:52 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:83
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    RIP: 0033:0x7f0a7147cba9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f0a720ef0c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00007f0a7159bf80 RCX: 00007f0a7147cba9
    RDX: 0000000020000040 RSI: 0000000000008914 RDI: 0000000000000004
    RBP: 00007f0a714c847a R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 000000000000000b R14: 00007f0a7159bf80 R15: 00007ffc8bb3a5f8
    </TASK>
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Bernard Pidoux <f6bvp@free.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed4cb8a42ce96ebd3e7de1900674ac9f75bde708
Author: Zhipeng Lu <alexious@zju.edu.cn>
Date:   Thu Dec 14 21:04:04 2023 +0800

    ethernet: atheros: fix a memleak in atl1e_setup_ring_resources
    
    [ Upstream commit 309fdb1c33fe726d92d0030481346f24e1b01f07 ]
    
    In the error handling of 'offset > adapter->ring_size', the
    tx_ring->tx_buffer allocated by kzalloc should be freed,
    instead of 'goto failed' instantly.
    
    Fixes: a6a5325239c2 ("atl1e: Atheros L1E Gigabit Ethernet driver")
    Signed-off-by: Zhipeng Lu <alexious@zju.edu.cn>
    Reviewed-by: Suman Ghosh <sumang@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f82a6a6d7eecec64bec7d4fd89e489fd0ebf4ff
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 14 11:30:38 2023 +0000

    net: sched: ife: fix potential use-after-free
    
    [ Upstream commit 19391a2ca98baa7b80279306cdf7dd43f81fa595 ]
    
    ife_decode() calls pskb_may_pull() two times, we need to reload
    ifehdr after the second one, or risk use-after-free as reported
    by syzbot:
    
    BUG: KASAN: slab-use-after-free in __ife_tlv_meta_valid net/ife/ife.c:108 [inline]
    BUG: KASAN: slab-use-after-free in ife_tlv_meta_decode+0x1d1/0x210 net/ife/ife.c:131
    Read of size 2 at addr ffff88802d7300a4 by task syz-executor.5/22323
    
    CPU: 0 PID: 22323 Comm: syz-executor.5 Not tainted 6.7.0-rc3-syzkaller-00804-g074ac38d5b95 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 11/10/2023
    Call Trace:
    <TASK>
    __dump_stack lib/dump_stack.c:88 [inline]
    dump_stack_lvl+0xd9/0x1b0 lib/dump_stack.c:106
    print_address_description mm/kasan/report.c:364 [inline]
    print_report+0xc4/0x620 mm/kasan/report.c:475
    kasan_report+0xda/0x110 mm/kasan/report.c:588
    __ife_tlv_meta_valid net/ife/ife.c:108 [inline]
    ife_tlv_meta_decode+0x1d1/0x210 net/ife/ife.c:131
    tcf_ife_decode net/sched/act_ife.c:739 [inline]
    tcf_ife_act+0x4e3/0x1cd0 net/sched/act_ife.c:879
    tc_act include/net/tc_wrapper.h:221 [inline]
    tcf_action_exec+0x1ac/0x620 net/sched/act_api.c:1079
    tcf_exts_exec include/net/pkt_cls.h:344 [inline]
    mall_classify+0x201/0x310 net/sched/cls_matchall.c:42
    tc_classify include/net/tc_wrapper.h:227 [inline]
    __tcf_classify net/sched/cls_api.c:1703 [inline]
    tcf_classify+0x82f/0x1260 net/sched/cls_api.c:1800
    hfsc_classify net/sched/sch_hfsc.c:1147 [inline]
    hfsc_enqueue+0x315/0x1060 net/sched/sch_hfsc.c:1546
    dev_qdisc_enqueue+0x3f/0x230 net/core/dev.c:3739
    __dev_xmit_skb net/core/dev.c:3828 [inline]
    __dev_queue_xmit+0x1de1/0x3d30 net/core/dev.c:4311
    dev_queue_xmit include/linux/netdevice.h:3165 [inline]
    packet_xmit+0x237/0x350 net/packet/af_packet.c:276
    packet_snd net/packet/af_packet.c:3081 [inline]
    packet_sendmsg+0x24aa/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    __do_sys_sendto net/socket.c:2202 [inline]
    __se_sys_sendto net/socket.c:2198 [inline]
    __x64_sys_sendto+0xe0/0x1b0 net/socket.c:2198
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    RIP: 0033:0x7fe9acc7cae9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe9ada450c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00007fe9acd9bf80 RCX: 00007fe9acc7cae9
    RDX: 000000000000fce0 RSI: 00000000200002c0 RDI: 0000000000000003
    RBP: 00007fe9accc847a R08: 0000000020000140 R09: 0000000000000014
    R10: 0000000000000004 R11: 0000000000000246 R12: 0000000000000000
    R13: 000000000000000b R14: 00007fe9acd9bf80 R15: 00007ffd5427ae78
    </TASK>
    
    Allocated by task 22323:
    kasan_save_stack+0x33/0x50 mm/kasan/common.c:45
    kasan_set_track+0x25/0x30 mm/kasan/common.c:52
    ____kasan_kmalloc mm/kasan/common.c:374 [inline]
    __kasan_kmalloc+0xa2/0xb0 mm/kasan/common.c:383
    kasan_kmalloc include/linux/kasan.h:198 [inline]
    __do_kmalloc_node mm/slab_common.c:1007 [inline]
    __kmalloc_node_track_caller+0x5a/0x90 mm/slab_common.c:1027
    kmalloc_reserve+0xef/0x260 net/core/skbuff.c:582
    __alloc_skb+0x12b/0x330 net/core/skbuff.c:651
    alloc_skb include/linux/skbuff.h:1298 [inline]
    alloc_skb_with_frags+0xe4/0x710 net/core/skbuff.c:6331
    sock_alloc_send_pskb+0x7e4/0x970 net/core/sock.c:2780
    packet_alloc_skb net/packet/af_packet.c:2930 [inline]
    packet_snd net/packet/af_packet.c:3024 [inline]
    packet_sendmsg+0x1e2a/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    __do_sys_sendto net/socket.c:2202 [inline]
    __se_sys_sendto net/socket.c:2198 [inline]
    __x64_sys_sendto+0xe0/0x1b0 net/socket.c:2198
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    
    Freed by task 22323:
    kasan_save_stack+0x33/0x50 mm/kasan/common.c:45
    kasan_set_track+0x25/0x30 mm/kasan/common.c:52
    kasan_save_free_info+0x2b/0x40 mm/kasan/generic.c:522
    ____kasan_slab_free mm/kasan/common.c:236 [inline]
    ____kasan_slab_free+0x15b/0x1b0 mm/kasan/common.c:200
    kasan_slab_free include/linux/kasan.h:164 [inline]
    slab_free_hook mm/slub.c:1800 [inline]
    slab_free_freelist_hook+0x114/0x1e0 mm/slub.c:1826
    slab_free mm/slub.c:3809 [inline]
    __kmem_cache_free+0xc0/0x180 mm/slub.c:3822
    skb_kfree_head net/core/skbuff.c:950 [inline]
    skb_free_head+0x110/0x1b0 net/core/skbuff.c:962
    pskb_expand_head+0x3c5/0x1170 net/core/skbuff.c:2130
    __pskb_pull_tail+0xe1/0x1830 net/core/skbuff.c:2655
    pskb_may_pull_reason include/linux/skbuff.h:2685 [inline]
    pskb_may_pull include/linux/skbuff.h:2693 [inline]
    ife_decode+0x394/0x4f0 net/ife/ife.c:82
    tcf_ife_decode net/sched/act_ife.c:727 [inline]
    tcf_ife_act+0x43b/0x1cd0 net/sched/act_ife.c:879
    tc_act include/net/tc_wrapper.h:221 [inline]
    tcf_action_exec+0x1ac/0x620 net/sched/act_api.c:1079
    tcf_exts_exec include/net/pkt_cls.h:344 [inline]
    mall_classify+0x201/0x310 net/sched/cls_matchall.c:42
    tc_classify include/net/tc_wrapper.h:227 [inline]
    __tcf_classify net/sched/cls_api.c:1703 [inline]
    tcf_classify+0x82f/0x1260 net/sched/cls_api.c:1800
    hfsc_classify net/sched/sch_hfsc.c:1147 [inline]
    hfsc_enqueue+0x315/0x1060 net/sched/sch_hfsc.c:1546
    dev_qdisc_enqueue+0x3f/0x230 net/core/dev.c:3739
    __dev_xmit_skb net/core/dev.c:3828 [inline]
    __dev_queue_xmit+0x1de1/0x3d30 net/core/dev.c:4311
    dev_queue_xmit include/linux/netdevice.h:3165 [inline]
    packet_xmit+0x237/0x350 net/packet/af_packet.c:276
    packet_snd net/packet/af_packet.c:3081 [inline]
    packet_sendmsg+0x24aa/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    __do_sys_sendto net/socket.c:2202 [inline]
    __se_sys_sendto net/socket.c:2198 [inline]
    __x64_sys_sendto+0xe0/0x1b0 net/socket.c:2198
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    
    The buggy address belongs to the object at ffff88802d730000
    which belongs to the cache kmalloc-8k of size 8192
    The buggy address is located 164 bytes inside of
    freed 8192-byte region [ffff88802d730000, ffff88802d732000)
    
    The buggy address belongs to the physical page:
    page:ffffea0000b5cc00 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x2d730
    head:ffffea0000b5cc00 order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0
    flags: 0xfff00000000840(slab|head|node=0|zone=1|lastcpupid=0x7ff)
    page_type: 0xffffffff()
    raw: 00fff00000000840 ffff888013042280 dead000000000122 0000000000000000
    raw: 0000000000000000 0000000080020002 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    page_owner tracks the page as allocated
    page last allocated via order 3, migratetype Unmovable, gfp_mask 0x1d20c0(__GFP_IO|__GFP_FS|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC|__GFP_HARDWALL), pid 22323, tgid 22320 (syz-executor.5), ts 950317230369, free_ts 950233467461
    set_page_owner include/linux/page_owner.h:31 [inline]
    post_alloc_hook+0x2d0/0x350 mm/page_alloc.c:1544
    prep_new_page mm/page_alloc.c:1551 [inline]
    get_page_from_freelist+0xa28/0x3730 mm/page_alloc.c:3319
    __alloc_pages+0x22e/0x2420 mm/page_alloc.c:4575
    alloc_pages_mpol+0x258/0x5f0 mm/mempolicy.c:2133
    alloc_slab_page mm/slub.c:1870 [inline]
    allocate_slab mm/slub.c:2017 [inline]
    new_slab+0x283/0x3c0 mm/slub.c:2070
    ___slab_alloc+0x979/0x1500 mm/slub.c:3223
    __slab_alloc.constprop.0+0x56/0xa0 mm/slub.c:3322
    __slab_alloc_node mm/slub.c:3375 [inline]
    slab_alloc_node mm/slub.c:3468 [inline]
    __kmem_cache_alloc_node+0x131/0x310 mm/slub.c:3517
    __do_kmalloc_node mm/slab_common.c:1006 [inline]
    __kmalloc_node_track_caller+0x4a/0x90 mm/slab_common.c:1027
    kmalloc_reserve+0xef/0x260 net/core/skbuff.c:582
    __alloc_skb+0x12b/0x330 net/core/skbuff.c:651
    alloc_skb include/linux/skbuff.h:1298 [inline]
    alloc_skb_with_frags+0xe4/0x710 net/core/skbuff.c:6331
    sock_alloc_send_pskb+0x7e4/0x970 net/core/sock.c:2780
    packet_alloc_skb net/packet/af_packet.c:2930 [inline]
    packet_snd net/packet/af_packet.c:3024 [inline]
    packet_sendmsg+0x1e2a/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    page last free stack trace:
    reset_page_owner include/linux/page_owner.h:24 [inline]
    free_pages_prepare mm/page_alloc.c:1144 [inline]
    free_unref_page_prepare+0x53c/0xb80 mm/page_alloc.c:2354
    free_unref_page+0x33/0x3b0 mm/page_alloc.c:2494
    __unfreeze_partials+0x226/0x240 mm/slub.c:2655
    qlink_free mm/kasan/quarantine.c:168 [inline]
    qlist_free_all+0x6a/0x170 mm/kasan/quarantine.c:187
    kasan_quarantine_reduce+0x18e/0x1d0 mm/kasan/quarantine.c:294
    __kasan_slab_alloc+0x65/0x90 mm/kasan/common.c:305
    kasan_slab_alloc include/linux/kasan.h:188 [inline]
    slab_post_alloc_hook mm/slab.h:763 [inline]
    slab_alloc_node mm/slub.c:3478 [inline]
    slab_alloc mm/slub.c:3486 [inline]
    __kmem_cache_alloc_lru mm/slub.c:3493 [inline]
    kmem_cache_alloc_lru+0x219/0x6f0 mm/slub.c:3509
    alloc_inode_sb include/linux/fs.h:2937 [inline]
    ext4_alloc_inode+0x28/0x650 fs/ext4/super.c:1408
    alloc_inode+0x5d/0x220 fs/inode.c:261
    new_inode_pseudo fs/inode.c:1006 [inline]
    new_inode+0x22/0x260 fs/inode.c:1032
    __ext4_new_inode+0x333/0x5200 fs/ext4/ialloc.c:958
    ext4_symlink+0x5d7/0xa20 fs/ext4/namei.c:3398
    vfs_symlink fs/namei.c:4464 [inline]
    vfs_symlink+0x3e5/0x620 fs/namei.c:4448
    do_symlinkat+0x25f/0x310 fs/namei.c:4490
    __do_sys_symlinkat fs/namei.c:4506 [inline]
    __se_sys_symlinkat fs/namei.c:4503 [inline]
    __x64_sys_symlinkat+0x97/0xc0 fs/namei.c:4503
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    
    Fixes: d57493d6d1be ("net: sched: ife: check on metadata length")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Alexander Aring <aahringo@redhat.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f48e3337ab0b9871a2f67672c74cbd822e22448c
Author: Rahul Rameshbabu <rrameshbabu@nvidia.com>
Date:   Tue Nov 21 15:00:22 2023 -0800

    net/mlx5e: Correct snprintf truncation handling for fw_version buffer used by representors
    
    [ Upstream commit b13559b76157de9d74f04d3ca0e49d69de3b5675 ]
    
    snprintf returns the length of the formatted string, excluding the trailing
    null, without accounting for truncation. This means that is the return
    value is greater than or equal to the size parameter, the fw_version string
    was truncated.
    
    Link: https://docs.kernel.org/core-api/kernel-api.html#c.snprintf
    Fixes: 1b2bd0c0264f ("net/mlx5e: Check return value of snprintf writing to fw_version buffer for representors")
    Signed-off-by: Rahul Rameshbabu <rrameshbabu@nvidia.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d07ef3a870647e5e00887e58e0c3458a7cdd9c2b
Author: Moshe Shemesh <moshe@nvidia.com>
Date:   Thu Nov 30 11:30:34 2023 +0200

    net/mlx5: Fix fw tracer first block check
    
    [ Upstream commit 4261edf11cb7c9224af713a102e5616329306932 ]
    
    While handling new traces, to verify it is not the first block being
    written, last_timestamp is checked. But instead of checking it is non
    zero it is verified to be zero. Fix to verify last_timestamp is not
    zero.
    
    Fixes: c71ad41ccb0c ("net/mlx5: FW tracer, events handling")
    Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Feras Daoud <ferasda@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a46bb28fdbdf0430cc86bf0703002ee95b3bd6a6
Author: Hu Haowen <xianfengting221@163.com>
Date:   Wed Apr 1 20:57:20 2020 +0800

    net/mlx5: improve some comments
    
    [ Upstream commit 6533380dfd003ea7636cb5672f4f85124b56328b ]
    
    Replaced "its" with "it's".
    
    Signed-off-by: Hu Haowen <xianfengting221@163.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Stable-dep-of: 4261edf11cb7 ("net/mlx5: Fix fw tracer first block check")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 333fd10955849fc26de3c4d003f3ac61e71f5e93
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Tue Nov 21 13:52:28 2023 +0100

    Revert "net/mlx5e: fix double free of encap_header"
    
    [ Upstream commit 5d089684dc434a31e08d32f0530066d0025c52e4 ]
    
    This reverts commit 6f9b1a0731662648949a1c0587f6acb3b7f8acf1.
    
    This patch is causing a null ptr issue, the proper fix is in the next
    patch.
    
    Fixes: 6f9b1a073166 ("net/mlx5e: fix double free of encap_header")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bd305f5f262c4559ef52eda1fdae3f9cc1a1761
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Dec 11 09:05:31 2023 +0200

    wifi: mac80211: mesh_plink: fix matches_local logic
    
    [ Upstream commit 8c386b166e2517cf3a123018e77941ec22625d0f ]
    
    During refactoring the "else" here got lost, add it back.
    
    Fixes: c99a89edb106 ("mac80211: factor out plink event gathering")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Miri Korenblit <miriam.rachel.korenblit@intel.com>
    Link: https://msgid.link/20231211085121.795480fa0e0b.I017d501196a5bbdcd9afd33338d342d6fe1edd79@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76366b399a020b0179d737d8c431e93c3a1a955c
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Fri Dec 8 15:03:15 2023 +0100

    s390/vx: fix save/restore of fpu kernel context
    
    [ Upstream commit e6b2dab41888332bf83f592131e7ea07756770a4 ]
    
    The KERNEL_FPR mask only contains a flag for the first eight vector
    registers. However floating point registers overlay parts of the first
    sixteen vector registers.
    
    This could lead to vector register corruption if a kernel fpu context uses
    any of the vector registers 8 to 15 and is interrupted or calls a
    KERNEL_FPR context. If that context uses also vector registers 8 to 15,
    their contents will be corrupted on return.
    
    Luckily this is currently not a real bug, since the kernel has only one
    KERNEL_FPR user with s390_adjust_jiffies() and it is only using floating
    point registers 0 to 2.
    
    Fix this by using the correct bits for KERNEL_FPR.
    
    Fixes: 7f79695cc1b6 ("s390/fpu: improve kernel_fpu_[begin|end]")
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Reviewed-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f40d484e16149e3be8541e9a247109e61ec6bd92
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Nov 29 17:55:33 2023 +0100

    reset: Fix crash when freeing non-existent optional resets
    
    [ Upstream commit 4a6756f56bcf8e64c87144a626ce53aea4899c0e ]
    
    When obtaining one or more optional resets, non-existent resets are
    stored as NULL pointers, and all related error and cleanup paths need to
    take this into account.
    
    Currently only reset_control_put() and reset_control_bulk_put()
    get this right.  All of __reset_control_bulk_get(),
    of_reset_control_array_get(), and reset_control_array_put() lack the
    proper checking, causing NULL pointer dereferences on failure or
    release.
    
    Fix this by moving the existing check from reset_control_bulk_put() to
    __reset_control_put_internal(), so it applies to all callers.
    The double check in reset_control_put() doesn't hurt.
    
    Fixes: 17c82e206d2a3cd8 ("reset: Add APIs to manage array of resets")
    Fixes: 48d71395896d54ee ("reset: Add reset_control_bulk API")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/2440edae7ca8534628cdbaf559ded288f2998178.1701276806.git.geert+renesas@glider.be
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14d915ca5ae3f84745d1bb56a66329f1f42996de
Author: Kunwu Chan <chentao@kylinos.cn>
Date:   Thu Nov 23 22:52:37 2023 +0800

    ARM: OMAP2+: Fix null pointer dereference and memory leak in omap_soc_device_init
    
    [ Upstream commit c72b9c33ef9695ad7ce7a6eb39a9df8a01b70796 ]
    
    kasprintf() returns a pointer to dynamically allocated memory which can
    be NULL upon failure. When 'soc_dev_attr->family' is NULL,it'll trigger
    the null pointer dereference issue, such as in 'soc_info_show'.
    
    And when 'soc_device_register' fails, it's necessary to release
    'soc_dev_attr->family' to avoid memory leaks.
    
    Fixes: 6770b2114325 ("ARM: OMAP2+: Export SoC information to userspace")
    Signed-off-by: Kunwu Chan <chentao@kylinos.cn>
    Message-ID: <20231123145237.609442-1-chentao@kylinos.cn>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62ef5887dd451eea4a4d11b3685d8759dd329691
Author: Namjae Jeon <linkinjeon@kernel.org>
Date:   Wed Dec 6 08:23:49 2023 +0900

    ksmbd: fix wrong name of SMB2_CREATE_ALLOCATION_SIZE
    
    [ Upstream commit 13736654481198e519059d4a2e2e3b20fa9fdb3e ]
    
    MS confirm that "AISi" name of SMB2_CREATE_ALLOCATION_SIZE in MS-SMB2
    specification is a typo. cifs/ksmbd have been using this wrong name from
    MS-SMB2. It should be "AlSi". Also It will cause problem when running
    smb2.create.open test in smbtorture against ksmbd.
    
    Cc: stable@vger.kernel.org
    Fixes: 12197a7fdda9 ("Clarify SMB2/SMB3 create context and add missing ones")
    Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35e12efde04d4f22dd2a7bc559486e125ef21962
Author: Bin Li <bin.li@canonical.com>
Date:   Mon Dec 4 18:04:50 2023 +0800

    ALSA: hda/realtek: Enable headset on Lenovo M90 Gen5
    
    [ Upstream commit 6f7e4664e597440dfbdb8b2931c561b717030d07 ]
    
    Lenovo M90 Gen5 is equipped with ALC897, and it needs
    ALC897_FIXUP_HEADSET_MIC_PIN quirk to make its headset mic work.
    
    Signed-off-by: Bin Li <bin.li@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231204100450.642783-1-bin.li@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

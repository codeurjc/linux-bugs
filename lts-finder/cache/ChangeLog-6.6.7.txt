commit ac25535242acb0d0042b920e5232b10e76ad169b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 13 18:45:36 2023 +0100

    Linux 6.6.7
    
    Link: https://lore.kernel.org/r/20231211182045.784881756@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Ronald Warsow <rwarsow@gmx.de>
    Tested-by: Takeshi Ogasawara <takeshi.ogasawara@futuring-girl.com>
    Tested-by: Kelsey Steele <kelseysteele@linux.microsoft.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Justin M. Forbes <jforbes@fedoraproject.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Ricardo B. Marliere <ricardo@marliere.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71a1ffe22d3382f61a6988a273733ac4212335d6
Author: Lijo Lazar <lijo.lazar@amd.com>
Date:   Wed Nov 29 18:06:55 2023 +0530

    drm/amdgpu: Restrict extended wait to PSP v13.0.6
    
    [ Upstream commit 6fce23a4d8c5f93bf80b7f122449fbb97f1e40dd ]
    
    Only PSPv13.0.6 SOCs take a longer time to reach steady state. Other
    PSPv13 based SOCs don't need extended wait. Also, reduce PSPv13.0.6 wait
    time.
    
    Cc: stable@vger.kernel.org
    Fixes: fc5988907156 ("drm/amdgpu: update retry times for psp vmbx wait")
    Fixes: d8c1925ba8cd ("drm/amdgpu: update retry times for psp BL wait")
    Link: https://lore.kernel.org/amd-gfx/34dd4c66-f7bf-44aa-af8f-c82889dd652c@amd.com/
    Signed-off-by: Lijo Lazar <lijo.lazar@amd.com>
    Reviewed-by: Asad Kamal <asad.kamal@amd.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f29fe9b6184f6f6e78dd524a40982a3201004a4
Author: Asad Kamal <asad.kamal@amd.com>
Date:   Mon Oct 16 22:10:34 2023 +0800

    drm/amdgpu: update retry times for psp BL wait
    
    [ Upstream commit d8c1925ba8cde2863297728a4c8fbf8fe766757a ]
    
    Increase retry time for PSP BL wait, to compensate
    for longer time to set c2pmsg 35 ready bit during
    mode1 with RAS
    
    Signed-off-by: Asad Kamal <asad.kamal@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: 6fce23a4d8c5 ("drm/amdgpu: Restrict extended wait to PSP v13.0.6")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bebe0c07b806011ae99cfa50e1bf8fda51b9407f
Author: Lijo Lazar <lijo.lazar@amd.com>
Date:   Wed Sep 6 09:21:39 2023 +0530

    drm/amdgpu: Fix refclk reporting for SMU v13.0.6
    
    [ Upstream commit 6b7d211740da2c3a7656be8cbb36f32e6d9c6cbd ]
    
    SMU v13.0.6 SOCs have 100MHz reference clock.
    
    Signed-off-by: Lijo Lazar <lijo.lazar@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: 6fce23a4d8c5 ("drm/amdgpu: Restrict extended wait to PSP v13.0.6")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48411bc4c3fbb01571a827939f829a0a4aad951c
Author: Jia Jie Ho <jiajie.ho@starfivetech.com>
Date:   Thu May 25 14:18:36 2023 +0800

    riscv: Kconfig: Add select ARM_AMBA to SOC_STARFIVE
    
    commit 78a03b9f8e6b317f7c65738a3fc60e1e85106a64 upstream.
    
    Selects ARM_AMBA platform support for StarFive SoCs required by spi and
    crypto dma engine.
    
    Signed-off-by: Jia Jie Ho <jiajie.ho@starfivetech.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Cc: Nam Cao <namcao@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b79210fa10db4cab09b19965f6cc47bc393e47e9
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Sat Nov 25 15:49:12 2023 -0600

    gcc-plugins: randstruct: Update code comment in relayout_struct()
    
    commit d71f22365a9caca82d424f3a33445de46567e198 upstream.
    
    Update code comment to clarify that the only element whose layout is
    not randomized is a proper C99 flexible-array member. This update is
    complementary to commit 1ee60356c2dc ("gcc-plugins: randstruct: Only
    warn about true flexible arrays")
    
    Signed-off-by: "Gustavo A. R. Silva" <gustavoars@kernel.org>
    Link: https://lore.kernel.org/r/ZWJr2MWDjXLHE8ap@work
    Fixes: 1ee60356c2dc ("gcc-plugins: randstruct: Only warn about true flexible arrays")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba6e4b997181497e51419fad2b73d229bffa1787
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Mon Dec 4 12:47:36 2023 +0000

    ASoC: qcom: sc8280xp: Limit speaker digital volumes
    
    commit 716d4e5373e9d1ae993485ab2e3b893bf7104fb1 upstream.
    
    Limit the speaker digital gains to 0dB so that the users will not damage them.
    Currently there is a limit in UCM, but this does not stop the user form
    changing the digital gains from command line. So limit this in driver
    which makes the speakers more safer without active speaker protection in
    place.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Reviewed-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231204124736.132185-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [ johan: backport to 6.6; rename snd_soc_rtd_to_cpu() ]
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c66d39f18e0ef16bac8c8491b657051f531a1eba
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Dec 1 15:47:13 2023 +0100

    netfilter: nft_set_pipapo: skip inactive elements during set walk
    
    commit 317eb9685095678f2c9f5a8189de698c5354316a upstream.
    
    Otherwise set elements can be deactivated twice which will cause a crash.
    
    Reported-by: Xingyuan Mo <hdthky0@gmail.com>
    Fixes: 3c4287f62044 ("nf_tables: Add set type for arbitrary concatenation of ranges")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eed445d53640d614efc7c37c9b354bd6f471cd3
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Tue Nov 7 11:15:19 2023 +0000

    MIPS: Loongson64: Enable DMA noncoherent support
    
    commit edc0378eee00200a5bedf1bb9f00ad390e0d1bd4 upstream.
    
    There are some Loongson64 systems come with broken coherent DMA
    support, firmware will set a bit in boot_param and pass nocoherentio
    in cmdline.
    
    However nonconherent support was missed out when spin off Loongson-2EF
    form Loongson64, and that boot_param change never made itself into
    upstream.
    
    Support DMA noncoherent properly to get those systems working.
    
    Cc: stable@vger.kernel.org
    Fixes: 71e2f4dd5a65 ("MIPS: Fork loongson2ef from loongson64")
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 264927e3538169fe2973a5732f03ea01b0f9f9e8
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Tue Nov 7 11:15:20 2023 +0000

    MIPS: Loongson64: Handle more memory types passed from firmware
    
    commit c7206e7bd214ebb3ca6fa474a4423662327d9beb upstream.
    
    There are many types of revsered memory passed from firmware
    that should be reserved in memblock, and UMA memory passed
    from firmware that should be added to system memory for system
    to use.
    
    Also for memblock there is no need to align those space into page,
    which actually cause problems.
    
    Handle them properly to prevent memory corruption on some systems.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae07e7d338c474cb6daf798618b33b6a346a88a0
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Tue Nov 7 11:15:18 2023 +0000

    MIPS: Loongson64: Reserve vgabios memory on boot
    
    commit 8f7aa77a463f47c9e00592d02747a9fcf2271543 upstream.
    
    vgabios is passed from firmware to kernel on Loongson64 systems.
    Sane firmware will keep this pointer in reserved memory space
    passed from the firmware but insane firmware keeps it in low
    memory before kernel entry that is not reserved.
    
    Previously kernel won't try to allocate memory from low memory
    before kernel entry on boot, but after converting to memblock
    it will do that.
    
    Fix by resversing those memory on early boot.
    
    Cc: stable@vger.kernel.org
    Fixes: a94e4f24ec83 ("MIPS: init: Drop boot_mem_map")
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 114d0e5b99376a489067d1fa3e23167f6e6cfb12
Author: Ian Rogers <irogers@google.com>
Date:   Mon Dec 4 10:23:29 2023 -0800

    perf metrics: Avoid segv if default metricgroup isn't set
    
    commit e2b005d6ec0e738df584190e21d2c7ada37266a0 upstream.
    
    A metric is default by having "Default" within its groups. The default
    metricgroup name needn't be set and this can result in segv in
    default_metricgroup_cmp and perf_stat__print_shadow_stats_metricgroup
    that assume it has a value when there is a Default metric group. To
    avoid the segv initialize the value to "".
    
    Fixes: 1c0e47956a8e ("perf metrics: Sort the Default metricgroup")
    Signed-off-by: Ian Rogers <irogers@google.com>
    Reviewed-and-tested-by: Ilkka Koskinen <ilkka@os.amperecomputing.com>
    Cc: James Clark <james.clark@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mike Leach <mike.leach@linaro.org>
    Cc: Kajol Jain <kjain@linux.ibm.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: John Garry <john.g.garry@oracle.com>
    Cc: stable@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lore.kernel.org/r/20231204182330.654255-1-irogers@google.com
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f4d4d2cd6b5ac6bb2d97c8f8bc0f366579ee692
Author: Ian Rogers <irogers@google.com>
Date:   Wed Nov 29 13:34:26 2023 -0800

    perf list: Fix JSON segfault by setting the used skip_duplicate_pmus callback
    
    commit b1693747487442984050eb0f462b83a3a8307525 upstream.
    
    Json output didn't set the skip_duplicate_pmus callback yielding a
    segfault.
    
    Fixes: cd4e1efbbc40 ("perf pmus: Skip duplicate PMUs and don't print list suffix by default")
    Signed-off-by: Ian Rogers <irogers@google.com>
    Cc: James Clark <james.clark@arm.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20231129213428.2227448-2-irogers@google.com
    [namhyung: updated subject line according to Arnaldo]
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dea8cfe773b967466590568da0f020ccf41453f8
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri May 7 09:59:46 2021 -0700

    KVM: SVM: Update EFER software model on CR0 trap for SEV-ES
    
    commit 4cdf351d3630a640ab6a05721ef055b9df62277f upstream.
    
    In general, activating long mode involves setting the EFER_LME bit in
    the EFER register and then enabling the X86_CR0_PG bit in the CR0
    register. At this point, the EFER_LMA bit will be set automatically by
    hardware.
    
    In the case of SVM/SEV guests where writes to CR0 are intercepted, it's
    necessary for the host to set EFER_LMA on behalf of the guest since
    hardware does not see the actual CR0 write.
    
    In the case of SEV-ES guests where writes to CR0 are trapped instead of
    intercepted, the hardware *does* see/record the write to CR0 before
    exiting and passing the value on to the host, so as part of enabling
    SEV-ES support commit f1c6366e3043 ("KVM: SVM: Add required changes to
    support intercepts under SEV-ES") dropped special handling of the
    EFER_LMA bit with the understanding that it would be set automatically.
    
    However, since the guest never explicitly sets the EFER_LMA bit, the
    host never becomes aware that it has been set. This becomes problematic
    when userspace tries to get/set the EFER values via
    KVM_GET_SREGS/KVM_SET_SREGS, since the EFER contents tracked by the host
    will be missing the EFER_LMA bit, and when userspace attempts to pass
    the EFER value back via KVM_SET_SREGS it will fail a sanity check that
    asserts that EFER_LMA should always be set when X86_CR0_PG and EFER_LME
    are set.
    
    Fix this by always inferring the value of EFER_LMA based on X86_CR0_PG
    and EFER_LME, regardless of whether or not SEV-ES is enabled.
    
    Fixes: f1c6366e3043 ("KVM: SVM: Add required changes to support intercepts under SEV-ES")
    Reported-by: Peter Gonda <pgonda@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210507165947.2502412-2-seanjc@google.com>
    [A two year old patch that was revived after we noticed the failure in
     KVM_SET_SREGS and a similar patch was posted by Michael Roth.  This is
     Sean's patch, but with Michael's more complete commit message. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb356cc6615c8d924f4ac8ef1bc9642d861a584b
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>
Date:   Thu Nov 9 13:36:24 2023 +0100

    KVM: s390/mm: Properly reset no-dat
    
    commit 27072b8e18a73ffeffb1c140939023915a35134b upstream.
    
    When the CMMA state needs to be reset, the no-dat bit also needs to be
    reset. Failure to do so could cause issues in the guest, since the
    guest expects the bit to be cleared after a reset.
    
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Nico Boehr <nrb@linux.ibm.com>
    Message-ID: <20231109123624.37314-1-imbrenda@linux.ibm.com>
    Signed-off-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d9cbae4c032451d41c262cbf8b90018af0dbda0
Author: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
Date:   Thu Nov 30 17:36:01 2023 +0100

    MIPS: kernel: Clear FPU states when setting up kernel threads
    
    commit a58a173444a68412bb08849bd81c679395f20ca0 upstream.
    
    io_uring sets up the io worker kernel thread via a syscall out of an
    user space prrocess. This process might have used FPU and since
    copy_thread() didn't clear FPU states for kernel threads a BUG()
    is triggered for using FPU inside kernel. Move code around
    to always clear FPU state for user and kernel threads.
    
    Cc: stable@vger.kernel.org
    Reported-by: Aurelien Jarno <aurel32@debian.org>
    Closes: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1055021
    Suggested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Reviewed-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43801359c8971cc49b4a4db5015fba77fbd09c32
Author: David Howells <dhowells@redhat.com>
Date:   Fri Dec 1 00:22:01 2023 +0000

    cifs: Fix flushing, invalidation and file size with FICLONE
    
    commit c54fc3a4f375663f2361a9cbb2955fb4ef912879 upstream.
    
    Fix a number of issues in the cifs filesystem implementation of the FICLONE
    ioctl in cifs_remap_file_range().  This is analogous to the previously
    fixed bug in cifs_file_copychunk_range() and can share the helper
    functions.
    
    Firstly, the invalidation of the destination range is handled incorrectly:
    We shouldn't just invalidate the whole file as dirty data in the file may
    get lost and we can't just call truncate_inode_pages_range() to invalidate
    the destination range as that will erase parts of a partial folio at each
    end whilst invalidating and discarding all the folios in the middle.  We
    need to force all the folios covering the range to be reloaded, but we
    mustn't lose dirty data in them that's not in the destination range.
    
    Further, we shouldn't simply round out the range to PAGE_SIZE at each end
    as cifs should move to support multipage folios.
    
    Secondly, there's an issue whereby a write may have extended the file
    locally, but not have been written back yet.  This can leaves the local
    idea of the EOF at a later point than the server's EOF.  If a clone request
    is issued, this will fail on the server with STATUS_INVALID_VIEW_SIZE
    (which gets translated to -EIO locally) if the clone source extends past
    the server's EOF.
    
    Fix this by:
    
     (0) Flush the source region (already done).  The flush does nothing and
         the EOF isn't moved if the source region has no dirty data.
    
     (1) Move the EOF to the end of the source region if it isn't already at
         least at this point.  If we can't do this, for instance if the server
         doesn't support it, just flush the entire source file.
    
     (2) Find the folio (if present) at each end of the range, flushing it and
         increasing the region-to-be-invalidated to cover those in their
         entirety.
    
     (3) Fully discard all the folios covering the range as we want them to be
         reloaded.
    
     (4) Then perform the extent duplication.
    
    Thirdly, set i_size after doing the duplicate_extents operation as this
    value may be used by various things internally.  stat() hides the issue
    because setting ->time to 0 causes cifs_getatr() to revalidate the
    attributes.
    
    These were causing the cifs/001 xfstest to fail.
    
    Fixes: 04b38d601239 ("vfs: pull btrfs clone API to vfs layer")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Cc: stable@vger.kernel.org
    cc: Christoph Hellwig <hch@lst.de>
    cc: Paulo Alcantara <pc@manguebit.com>
    cc: Shyam Prasad N <nspmangalore@gmail.com>
    cc: Rohith Surabattula <rohiths.msft@gmail.com>
    cc: Matthew Wilcox <willy@infradead.org>
    cc: Jeff Layton <jlayton@kernel.org>
    cc: linux-cifs@vger.kernel.org
    cc: linux-mm@kvack.org
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63c80f574a8ee63739592494cb19884c31785445
Author: David Howells <dhowells@redhat.com>
Date:   Fri Dec 1 00:22:00 2023 +0000

    cifs: Fix flushing, invalidation and file size with copy_file_range()
    
    commit 7b2404a886f8b91250c31855d287e632123e1746 upstream.
    
    Fix a number of issues in the cifs filesystem implementation of the
    copy_file_range() syscall in cifs_file_copychunk_range().
    
    Firstly, the invalidation of the destination range is handled incorrectly:
    We shouldn't just invalidate the whole file as dirty data in the file may
    get lost and we can't just call truncate_inode_pages_range() to invalidate
    the destination range as that will erase parts of a partial folio at each
    end whilst invalidating and discarding all the folios in the middle.  We
    need to force all the folios covering the range to be reloaded, but we
    mustn't lose dirty data in them that's not in the destination range.
    
    Further, we shouldn't simply round out the range to PAGE_SIZE at each end
    as cifs should move to support multipage folios.
    
    Secondly, there's an issue whereby a write may have extended the file
    locally, but not have been written back yet.  This can leaves the local
    idea of the EOF at a later point than the server's EOF.  If a copy request
    is issued, this will fail on the server with STATUS_INVALID_VIEW_SIZE
    (which gets translated to -EIO locally) if the copy source extends past the
    server's EOF.
    
    Fix this by:
    
     (0) Flush the source region (already done).  The flush does nothing and
         the EOF isn't moved if the source region has no dirty data.
    
     (1) Move the EOF to the end of the source region if it isn't already at
         least at this point.  If we can't do this, for instance if the server
         doesn't support it, just flush the entire source file.
    
     (2) Find the folio (if present) at each end of the range, flushing it and
         increasing the region-to-be-invalidated to cover those in their
         entirety.
    
     (3) Fully discard all the folios covering the range as we want them to be
         reloaded.
    
     (4) Then perform the copy.
    
    Thirdly, set i_size after doing the copychunk_range operation as this value
    may be used by various things internally.  stat() hides the issue because
    setting ->time to 0 causes cifs_getatr() to revalidate the attributes.
    
    These were causing the generic/075 xfstest to fail.
    
    Fixes: 620d8745b35d ("Introduce cifs_copy_file_range()")
    Cc: stable@vger.kernel.org
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Paulo Alcantara <pc@manguebit.com>
    cc: Shyam Prasad N <nspmangalore@gmail.com>
    cc: Rohith Surabattula <rohiths.msft@gmail.com>
    cc: Matthew Wilcox <willy@infradead.org>
    cc: Jeff Layton <jlayton@kernel.org>
    cc: linux-cifs@vger.kernel.org
    cc: linux-mm@kvack.org
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a3e02063016f12287dde3077b787586220b3be6
Author: Roy Luo <royluo@google.com>
Date:   Tue Nov 28 22:17:56 2023 +0000

    USB: gadget: core: adjust uevent timing on gadget unbind
    
    commit 73ea73affe8622bdf292de898da869d441da6a9d upstream.
    
    The KOBJ_CHANGE uevent is sent before gadget unbind is actually
    executed, resulting in inaccurate uevent emitted at incorrect timing
    (the uevent would have USB_UDC_DRIVER variable set while it would
    soon be removed).
    Move the KOBJ_CHANGE uevent to the end of the unbind function so that
    uevent is sent only after the change has been made.
    
    Fixes: 2ccea03a8f7e ("usb: gadget: introduce UDC Class")
    Cc: stable@vger.kernel.org
    Signed-off-by: Roy Luo <royluo@google.com>
    Link: https://lore.kernel.org/r/20231128221756.2591158-1-royluo@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd728449807e6bed89e8c0f98d9b22760517f40a
Author: Naveen N Rao <naveen@kernel.org>
Date:   Thu Nov 30 12:29:47 2023 +0530

    powerpc/ftrace: Fix stack teardown in ftrace_no_trace
    
    commit 4b3338aaa74d7d4ec5b6734dc298f0db94ec83d2 upstream.
    
    Commit 41a506ef71eb ("powerpc/ftrace: Create a dummy stackframe to fix
    stack unwind") added use of a new stack frame on ftrace entry to fix
    stack unwind. However, the commit missed updating the offset used while
    tearing down the ftrace stack when ftrace is disabled. Fix the same.
    
    In addition, the commit missed saving the correct stack pointer in
    pt_regs. Update the same.
    
    Fixes: 41a506ef71eb ("powerpc/ftrace: Create a dummy stackframe to fix stack unwind")
    Cc: stable@vger.kernel.org # v6.5+
    Signed-off-by: Naveen N Rao <naveen@kernel.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://msgid.link/20231130065947.2188860-1-naveen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 903a1a1949c6c56beec74a4c2e6f1a51848a7941
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Fri Dec 1 19:37:27 2023 +0100

    x86/CPU/AMD: Check vendor in the AMD microcode callback
    
    commit 9b8493dc43044376716d789d07699f17d538a7c4 upstream.
    
    Commit in Fixes added an AMD-specific microcode callback. However, it
    didn't check the CPU vendor the kernel runs on explicitly.
    
    The only reason the Zenbleed check in it didn't run on other x86 vendors
    hardware was pure coincidental luck:
    
      if (!cpu_has_amd_erratum(c, amd_zenbleed))
              return;
    
    gives true on other vendors because they don't have those families and
    models.
    
    However, with the removal of the cpu_has_amd_erratum() in
    
      05f5f73936fa ("x86/CPU/AMD: Drop now unused CPU erratum checking function")
    
    that coincidental condition is gone, leading to the zenbleed check
    getting executed on other vendors too.
    
    Add the explicit vendor check for the whole callback as it should've
    been done in the first place.
    
    Fixes: 522b1d69219d ("x86/cpu/amd: Add a Zenbleed fix")
    Cc: <stable@kernel.org>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Link: https://lore.kernel.org/r/20231201184226.16749-1-bp@alien8.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d831c68bb92271c49f35ef920c9edcb154193ad
Author: Mukesh Ojha <quic_mojha@quicinc.com>
Date:   Fri Nov 17 20:19:32 2023 +0530

    devcoredump: Send uevent once devcd is ready
    
    commit af54d778a03853801d681c98c0c2a6c316ef9ca7 upstream.
    
    dev_coredumpm() creates a devcoredump device and adds it
    to the core kernel framework which eventually end up
    sending uevent to the user space and later creates a
    symbolic link to the failed device. An application
    running in userspace may be interested in this symbolic
    link to get the name of the failed device.
    
    In a issue scenario, once uevent sent to the user space
    it start reading '/sys/class/devcoredump/devcdX/failing_device'
    to get the actual name of the device which might not been
    created and it is in its path of creation.
    
    To fix this, suppress sending uevent till the failing device
    symbolic link gets created and send uevent once symbolic
    link is created successfully.
    
    Fixes: 833c95456a70 ("device coredump: add new device coredump class")
    Signed-off-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1700232572-25823-1-git-send-email-quic_mojha@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22fdcaaf7d9d7696ce20a57c27dea8e44bc8c8a7
Author: Ronald Wahl <ronald.wahl@raritan.com>
Date:   Tue Oct 31 14:12:42 2023 +0100

    serial: 8250_omap: Add earlycon support for the AM654 UART controller
    
    commit 8e42c301ce64e0dcca547626eb486877d502d336 upstream.
    
    Currently there is no support for earlycon on the AM654 UART
    controller. This commit adds it.
    
    Signed-off-by: Ronald Wahl <ronald.wahl@raritan.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20231031131242.15516-1-rwahl@gmx.de
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2c0b05a8c00e2b8337275dd0fd8a3264d1d1b10
Author: Ronald Wahl <ronald.wahl@raritan.com>
Date:   Wed Nov 1 18:14:31 2023 +0100

    serial: 8250: 8250_omap: Do not start RX DMA on THRI interrupt
    
    commit c6bb057418876cdfdd29a6f7b8cef54539ee8811 upstream.
    
    Starting RX DMA on THRI interrupt is too early because TX may not have
    finished yet.
    
    This change is inspired by commit 90b8596ac460 ("serial: 8250: Prevent
    starting up DMA Rx on THRI interrupt") and fixes DMA issues I had with
    an AM62 SoC that is using the 8250 OMAP variant.
    
    Cc: stable@vger.kernel.org
    Fixes: c26389f998a8 ("serial: 8250: 8250_omap: Add DMA support for UARTs on K3 SoCs")
    Signed-off-by: Ronald Wahl <ronald.wahl@raritan.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20231101171431.16495-1-rwahl@gmx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70dc9a482fbbf04c1952c4446434909a8d190ede
Author: Ronald Wahl <ronald.wahl@raritan.com>
Date:   Tue Oct 31 12:09:09 2023 +0100

    serial: 8250: 8250_omap: Clear UART_HAS_RHR_IT_DIS bit
    
    commit 8973ab7a2441b286218f4a5c4c33680e2f139996 upstream.
    
    This fixes commit 439c7183e5b9 ("serial: 8250: 8250_omap: Disable RX
    interrupt after DMA enable") which unfortunately set the
    UART_HAS_RHR_IT_DIS bit in the UART_OMAP_IER2 register and never
    cleared it.
    
    Cc: stable@vger.kernel.org
    Fixes: 439c7183e5b9 ("serial: 8250: 8250_omap: Disable RX interrupt after DMA enable")
    Signed-off-by: Ronald Wahl <ronald.wahl@raritan.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20231031110909.11695-1-rwahl@gmx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98b0ca904c804125a9bc56bd188c0cb6c1bae776
Author: Daniel Mack <daniel@zonque.org>
Date:   Thu Nov 23 08:28:18 2023 +0100

    serial: sc16is7xx: address RX timeout interrupt errata
    
    commit 08ce9a1b72e38cf44c300a44ac5858533eb3c860 upstream.
    
    This device has a silicon bug that makes it report a timeout interrupt
    but no data in the FIFO.
    
    The datasheet states the following in the errata section 18.1.4:
    
      "If the host reads the receive FIFO at the same time as a
      time-out interrupt condition happens, the host might read 0xCC
      (time-out) in the Interrupt Indication Register (IIR), but bit 0
      of the Line Status Register (LSR) is not set (means there is no
      data in the receive FIFO)."
    
    The errata description seems to indicate it concerns only polled mode of
    operation when reading bit 0 of the LSR register. However, tests have
    shown and NXP has confirmed that the RXLVL register also yields 0 when
    the bug is triggered, and hence the IRQ driven implementation in this
    driver is equally affected.
    
    This bug has hit us on production units and when it does, sc16is7xx_irq()
    would spin forever because sc16is7xx_port_irq() keeps seeing an
    interrupt in the IIR register that is not cleared because the driver
    does not call into sc16is7xx_handle_rx() unless the RXLVL register
    reports at least one byte in the FIFO.
    
    Fix this by always reading one byte from the FIFO when this condition
    is detected in order to clear the interrupt. This approach was
    confirmed to be correct by NXP through their support channels.
    
    Tested by: Hugo Villeneuve <hvilleneuve@dimonoff.com>
    
    Signed-off-by: Daniel Mack <daniel@zonque.org>
    Co-Developed-by: Maxim Popov <maxim.snafu@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20231123072818.1394539-1-daniel@zonque.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c865b77eb3b50ed73748669b27aec6c4601d266e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Nov 22 18:15:03 2023 +0100

    ARM: PL011: Fix DMA support
    
    commit 58ac1b3799799069d53f5bf95c093f2fe8dd3cc5 upstream.
    
    Since there is no guarantee that the memory returned by
    dma_alloc_coherent() is associated with a 'struct page', using the
    architecture specific phys_to_page() is wrong, but using
    virt_to_page() would be as well.
    
    Stop using sg lists altogether and just use the *_single() functions
    instead. This also simplifies the code a bit since the scatterlists in
    this driver always have only one entry anyway.
    
    https://lore.kernel.org/lkml/86db0fe5-930d-4cbb-bd7d-03367da38951@app.fastmail.com/
        Use consistent names for dma buffers
    
    gc: Add a commit log from the initial thread:
    https://lore.kernel.org/lkml/86db0fe5-930d-4cbb-bd7d-03367da38951@app.fastmail.com/
        Use consistent names for dma buffers
    
    Fixes: cb06ff102e2d7 ("ARM: PL011: Add support for Rx DMA buffer polling.")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20231122171503.235649-1-gregory.clement@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2214c3f4e71800087f569e06e633e5265ec4fc0f
Author: RD Babiera <rdbabiera@google.com>
Date:   Wed Nov 29 19:23:50 2023 +0000

    usb: typec: class: fix typec_altmode_put_partner to put plugs
    
    commit b17b7fe6dd5c6ff74b38b0758ca799cdbb79e26e upstream.
    
    When typec_altmode_put_partner is called by a plug altmode upon release,
    the port altmode the plug belongs to will not remove its reference to the
    plug. The check to see if the altmode being released evaluates against the
    released altmode's partner instead of the calling altmode itself, so change
    adev in typec_altmode_put_partner to properly refer to the altmode being
    released.
    
    typec_altmode_set_partner is not run for port altmodes, so also add a check
    in typec_altmode_release to prevent typec_altmode_put_partner() calls on
    port altmode release.
    
    Fixes: 8a37d87d72f0 ("usb: typec: Bus type for alternate modes")
    Cc: stable@vger.kernel.org
    Signed-off-by: RD Babiera <rdbabiera@google.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20231129192349.1773623-2-rdbabiera@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ac34ba42e9aba7fc82997f778802b954efced33
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Tue Dec 5 21:49:29 2023 -0300

    smb: client: fix potential NULL deref in parse_dfs_referrals()
    
    commit 92414333eb375ed64f4ae92d34d579e826936480 upstream.
    
    If server returned no data for FSCTL_DFS_GET_REFERRALS, @dfs_rsp will
    remain NULL and then parse_dfs_referrals() will dereference it.
    
    Fix this by returning -EIO when no output data is returned.
    
    Besides, we can't fix it in SMB2_ioctl() as some FSCTLs are allowed to
    return no data as per MS-SMB2 2.2.32.
    
    Fixes: 9d49640a21bf ("CIFS: implement get_dfs_refer for SMB2+")
    Cc: stable@vger.kernel.org
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05668be6020c277fd027baa2282ba559ea73a695
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Tue Dec 5 11:05:48 2023 +0200

    Revert "xhci: Loosen RPM as default policy to cover for AMD xHC 1.1"
    
    commit 24be0b3c40594a14b65141ced486ae327398faf8 upstream.
    
    This reverts commit 4baf1218150985ee3ab0a27220456a1f027ea0ac.
    
    Enabling runtime pm as default for all AMD xHC 1.1 controllers caused
    regression. An initial attempt to fix those was done in commit a5d6264b638e
    ("xhci: Enable RPM on controllers that support low-power states") but new
    issues are still seen.
    
    Revert this to get those AMD xHC 1.1 systems working
    
    This patch went to stable an needs to be reverted from there as well.
    
    Fixes: 4baf12181509 ("xhci: Loosen RPM as default policy to cover for AMD xHC 1.1")
    Link: https://lore.kernel.org/linux-usb/55c50bf5-bffb-454e-906e-4408c591cb63@molgen.mpg.de
    Cc: Mario Limonciello <mario.limonciello@amd.com>
    Cc: Basavaraj Natikar <Basavaraj.Natikar@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Link: https://lore.kernel.org/r/20231205090548.1377667-1-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bcb08e39d8450728117ea503496290a2bc4d60f
Author: David Howells <dhowells@redhat.com>
Date:   Mon Dec 4 14:01:59 2023 +0000

    cifs: Fix non-availability of dedup breaking generic/304
    
    commit 691a41d8da4b34fe72f09393505f55f28a8f34ec upstream.
    
    Deduplication isn't supported on cifs, but cifs doesn't reject it, instead
    treating it as extent duplication/cloning.  This can cause generic/304 to go
    silly and run for hours on end.
    
    Fix cifs to indicate EOPNOTSUPP if REMAP_FILE_DEDUP is set in
    ->remap_file_range().
    
    Note that it's unclear whether or not commit b073a08016a1 is meant to cause
    cifs to return an error if REMAP_FILE_DEDUP.
    
    Fixes: b073a08016a1 ("cifs: fix that return -EINVAL when do dedupe operation")
    Cc: stable@vger.kernel.org
    Suggested-by: Dave Chinner <david@fromorbit.com>
    cc: Xiaoli Feng <fengxiaoli0714@gmail.com>
    cc: Shyam Prasad N <nspmangalore@gmail.com>
    cc: Rohith Surabattula <rohiths.msft@gmail.com>
    cc: Jeff Layton <jlayton@kernel.org>
    cc: Darrick Wong <darrick.wong@oracle.com>
    cc: fstests@vger.kernel.org
    cc: linux-cifs@vger.kernel.org
    cc: linux-fsdevel@vger.kernel.org
    Link: https://lore.kernel.org/r/3876191.1701555260@warthog.procyon.org.uk/
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67f45db9f2754d10ed7ef43aef2025824ee57360
Author: Cameron Williams <cang1@live.co.uk>
Date:   Thu Nov 2 21:10:40 2023 +0000

    parport: Add support for Brainboxes IX/UC/PX parallel cards
    
    commit 1a031f6edc460e9562098bdedc3918da07c30a6e upstream.
    
    Adds support for Intashield IX-500/IX-550, UC-146/UC-157, PX-146/PX-157,
    PX-203 and PX-475 (LPT port)
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Cameron Williams <cang1@live.co.uk>
    Acked-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Link: https://lore.kernel.org/r/AS4PR02MB790389C130410BD864C8DCC9C4A6A@AS4PR02MB7903.eurprd02.prod.outlook.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c88a91ca26b102042e816fdf850fa51d10be4749
Author: Andi Shyti <andi.shyti@kernel.org>
Date:   Mon Dec 4 17:38:03 2023 +0100

    serial: ma35d1: Validate console index before assignment
    
    commit f0b9d97a77fa8f18400450713358303a435ab688 upstream.
    
    The console is immediately assigned to the ma35d1 port without
    checking its index. This oversight can lead to out-of-bounds
    errors when the index falls outside the valid '0' to
    MA35_UART_NR range. Such scenario trigges ran error like the
    following:
    
     UBSAN: array-index-out-of-bounds in drivers/tty/serial/ma35d1_serial.c:555:51
     index -1 is out of range for type 'uart_ma35d1_port [17]
    
    Check the index before using it and bail out with a warning.
    
    Fixes: 930cbf92db01 ("tty: serial: Add Nuvoton ma35d1 serial driver support")
    Signed-off-by: Andi Shyti <andi.shyti@kernel.org>
    Cc: Jacky Huang <ychuang3@nuvoton.com>
    Cc: <stable@vger.kernel.org> # v6.5+
    Link: https://lore.kernel.org/r/20231204163804.1331415-2-andi.shyti@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 977a60f0639fbeea0161e6ce516c8d2f3dbefe78
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Dec 5 21:55:24 2023 +0200

    serial: 8250_dw: Add ACPI ID for Granite Rapids-D UART
    
    commit e92fad024929c79460403acf946bc9c09ce5c3a9 upstream.
    
    Granite Rapids-D has an additional UART that is enumerated via ACPI.
    Add ACPI ID for it.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20231205195524.2705965-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a05c646d3c7db07ba92b50463a29cefbd6a565a2
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Fri Nov 24 20:38:14 2023 +0100

    nvmem: Do not expect fixed layouts to grab a layout driver
    
    commit b7c1e53751cb3990153084f31c41f25fde3b629c upstream.
    
    Two series lived in parallel for some time, which led to this situation:
    - The nvmem-layout container is used for dynamic layouts
    - We now expect fixed layouts to also use the nvmem-layout container but
    this does not require any additional driver, the support is built-in the
    nvmem core.
    
    Ensure we don't refuse to probe for wrong reasons.
    
    Fixes: 27f699e578b1 ("nvmem: core: add support for fixed cells *layout*")
    Cc: stable@vger.kernel.org
    Reported-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Tested-by: Rafał Miłecki <rafal@milecki.pl>
    Tested-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Reviewed-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Link: https://lore.kernel.org/r/20231124193814.360552-1-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9828961e5d77c94ce89379f2e3d7aeb501fff9d
Author: Konstantin Aladyshev <aladyshev22@gmail.com>
Date:   Wed Dec 6 11:07:44 2023 +0300

    usb: gadget: f_hid: fix report descriptor allocation
    
    commit 61890dc28f7d9e9aac8a9471302613824c22fae4 upstream.
    
    The commit 89ff3dfac604 ("usb: gadget: f_hid: fix f_hidg lifetime vs
    cdev") has introduced a bug that leads to hid device corruption after
    the replug operation.
    Reverse device managed memory allocation for the report descriptor
    to fix the issue.
    
    Tested:
    This change was tested on the AMD EthanolX CRB server with the BMC
    based on the OpenBMC distribution. The BMC provides KVM functionality
    via the USB gadget device:
    - before: KVM page refresh results in a broken USB device,
    - after: KVM page refresh works without any issues.
    
    Fixes: 89ff3dfac604 ("usb: gadget: f_hid: fix f_hidg lifetime vs cdev")
    Cc: stable@vger.kernel.org
    Signed-off-by: Konstantin Aladyshev <aladyshev22@gmail.com>
    Link: https://lore.kernel.org/r/20231206080744.253-2-aladyshev22@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95a4c959b99f10b2405356c07e8092aed1cc3bd8
Author: JP Kobryn <inwardvessel@gmail.com>
Date:   Fri Dec 1 14:53:55 2023 +0900

    kprobes: consistent rcu api usage for kretprobe holder
    
    commit d839a656d0f3caca9f96e9bf912fd394ac6a11bc upstream.
    
    It seems that the pointer-to-kretprobe "rp" within the kretprobe_holder is
    RCU-managed, based on the (non-rethook) implementation of get_kretprobe().
    The thought behind this patch is to make use of the RCU API where possible
    when accessing this pointer so that the needed barriers are always in place
    and to self-document the code.
    
    The __rcu annotation to "rp" allows for sparse RCU checking. Plain writes
    done to the "rp" pointer are changed to make use of the RCU macro for
    assignment. For the single read, the implementation of get_kretprobe()
    is simplified by making use of an RCU macro which accomplishes the same,
    but note that the log warning text will be more generic.
    
    I did find that there is a difference in assembly generated between the
    usage of the RCU macros vs without. For example, on arm64, when using
    rcu_assign_pointer(), the corresponding store instruction is a
    store-release (STLR) which has an implicit barrier. When normal assignment
    is done, a regular store (STR) is found. In the macro case, this seems to
    be a result of rcu_assign_pointer() using smp_store_release() when the
    value to write is not NULL.
    
    Link: https://lore.kernel.org/all/20231122132058.3359-1-inwardvessel@gmail.com/
    
    Fixes: d741bf41d7c7 ("kprobes: Remove kretprobe hash")
    Cc: stable@vger.kernel.org
    Signed-off-by: JP Kobryn <inwardvessel@gmail.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 395e52b7a1ad01e1b51adb09854a0aa5347428de
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Mon Dec 4 12:47:35 2023 +0000

    ASoC: ops: add correct range check for limiting volume
    
    commit fb9ad24485087e0f00d84bee7a5914640b2b9024 upstream.
    
    Volume can have ranges that start with negative values, ex: -84dB to
    +40dB. Apply correct range check in snd_soc_limit_volume before setting
    the platform_max. Without this patch, for example setting a 0dB limit on
    a volume range of -84dB to +40dB would fail.
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Tested-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Johan Hovold <johan+linaro@kernel.org>
    Link: https://lore.kernel.org/r/20231204124736.132185-2-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6df51c525a2d4f8cce843ced0da00452dc6f30a7
Author: Boerge Struempfel <boerge.struempfel@gmail.com>
Date:   Wed Nov 29 16:23:07 2023 +0100

    gpiolib: sysfs: Fix error handling on failed export
    
    [ Upstream commit 95dd1e34ff5bbee93a28ff3947eceaf6de811b1a ]
    
    If gpio_set_transitory() fails, we should free the GPIO again. Most
    notably, the flag FLAG_REQUESTED has previously been set in
    gpiod_request_commit(), and should be reset on failure.
    
    To my knowledge, this does not affect any current users, since the
    gpio_set_transitory() mainly returns 0 and -ENOTSUPP, which is converted
    to 0. However the gpio_set_transitory() function calles the .set_config()
    function of the corresponding GPIO chip and there are some GPIO drivers in
    which some (unlikely) branches return other values like -EPROBE_DEFER,
    and -EINVAL. In these cases, the above mentioned FLAG_REQUESTED would not
    be reset, which results in the pin being blocked until the next reboot.
    
    Fixes: e10f72bf4b3e ("gpio: gpiolib: Generalise state persistence beyond sleep")
    Signed-off-by: Boerge Struempfel <boerge.struempfel@gmail.com>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73bbca1298645b995ce105d0290f05cbe37fc35a
Author: Ashwin Dayanand Kamat <ashwin.kamat@broadcom.com>
Date:   Wed Nov 29 16:10:29 2023 +0530

    x86/sev: Fix kernel crash due to late update to read-only ghcb_version
    
    [ Upstream commit 27d25348d42161837be08fc63b04a2559d2e781c ]
    
    A write-access violation page fault kernel crash was observed while running
    cpuhotplug LTP testcases on SEV-ES enabled systems. The crash was
    observed during hotplug, after the CPU was offlined and the process
    was migrated to different CPU. setup_ghcb() is called again which
    tries to update ghcb_version in sev_es_negotiate_protocol(). Ideally this
    is a read_only variable which is initialised during booting.
    
    Trying to write it results in a pagefault:
    
      BUG: unable to handle page fault for address: ffffffffba556e70
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0003) - permissions violation
      [ ...]
      Call Trace:
       <TASK>
       ? __die_body.cold+0x1a/0x1f
       ? __die+0x2a/0x35
       ? page_fault_oops+0x10c/0x270
       ? setup_ghcb+0x71/0x100
       ? __x86_return_thunk+0x5/0x6
       ? search_exception_tables+0x60/0x70
       ? __x86_return_thunk+0x5/0x6
       ? fixup_exception+0x27/0x320
       ? kernelmode_fixup_or_oops+0xa2/0x120
       ? __bad_area_nosemaphore+0x16a/0x1b0
       ? kernel_exc_vmm_communication+0x60/0xb0
       ? bad_area_nosemaphore+0x16/0x20
       ? do_kern_addr_fault+0x7a/0x90
       ? exc_page_fault+0xbd/0x160
       ? asm_exc_page_fault+0x27/0x30
       ? setup_ghcb+0x71/0x100
       ? setup_ghcb+0xe/0x100
       cpu_init_exception_handling+0x1b9/0x1f0
    
    The fix is to call sev_es_negotiate_protocol() only in the BSP boot phase,
    and it only needs to be done once in any case.
    
    [ mingo: Refined the changelog. ]
    
    Fixes: 95d33bfaa3e1 ("x86/sev: Register GHCB memory when SEV-SNP is active")
    Suggested-by: Tom Lendacky <thomas.lendacky@amd.com>
    Co-developed-by: Bo Gan <bo.gan@broadcom.com>
    Signed-off-by: Bo Gan <bo.gan@broadcom.com>
    Signed-off-by: Ashwin Dayanand Kamat <ashwin.kamat@broadcom.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Link: https://lore.kernel.org/r/1701254429-18250-1-git-send-email-kashwindayan@vmware.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfe9295db0932f1b8e0d94ffc75521898e5a5a8a
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Nov 29 15:24:52 2023 +0100

    perf: Fix perf_event_validate_size()
    
    [ Upstream commit 382c27f4ed28f803b1f1473ac2d8db0afc795a1b ]
    
    Budimir noted that perf_event_validate_size() only checks the size of
    the newly added event, even though the sizes of all existing events
    can also change due to not all events having the same read_format.
    
    When we attach the new event, perf_group_attach(), we do re-compute
    the size for all events.
    
    Fixes: a723968c0ed3 ("perf: Fix u16 overflows")
    Reported-by: Budimir Markovic <markovicbudimir@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c66c479480f6e90dd883cc11c692e1f3b7a95e6a
Author: Jiadong Zhu <Jiadong.Zhu@amd.com>
Date:   Fri Dec 1 08:38:15 2023 +0800

    drm/amdgpu: disable MCBP by default
    
    [ Upstream commit d6a57588666301acd9d42d3b00d74240964f07f6 ]
    
    Disable MCBP(mid command buffer preemption) by default as old Mesa
    hangs with it. We shall not enable the feature that breaks old usermode
    driver.
    
    Fixes: 50a7c8765ca6 ("drm/amdgpu: enable mcbp by default on gfx9")
    Signed-off-by: Jiadong Zhu <Jiadong.Zhu@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3798c665fe7d783fda2834aa6973303b074b7549
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Thu Oct 26 12:09:10 2023 -0700

    arm64: dts: mt8183: kukui: Fix underscores in node names
    
    [ Upstream commit 8980c30141d3986beab815d85762b9c67196ed72 ]
    
    Replace underscores with hyphens in pinctrl node names both for consistency
    and to adhere to the bindings.
    
    Cc: stable@vger.kernel.org
    Fixes: cd894e274b74 ("arm64: dts: mt8183: Add krane-sku176 board")
    Fixes: 1652dbf7363a ("arm64: dts: mt8183: add scp node")
    Fixes: 27eaf34df364 ("arm64: dts: mt8183: config dsi node")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20231026191343.3345279-2-hsinyi@chromium.org
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6c47d915578160135fbe054b35d069188f60220
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Wed Jul 5 17:00:06 2023 +0200

    arm64: dts: mediatek: add missing space before {
    
    [ Upstream commit a9c740c57f977deb41bc53c02d0dae3d0e2f191a ]
    
    Add missing whitespace between node name/label and opening {.
    
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20230705150006.293690-2-krzysztof.kozlowski@linaro.org
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Stable-dep-of: 8980c30141d3 ("arm64: dts: mt8183: kukui: Fix underscores in node names")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bdd0ced1f9c215500b2e9dd77a6c18d9fdf2f01
Author: Helge Deller <deller@gmx.de>
Date:   Mon Nov 27 10:39:26 2023 +0100

    parisc: Fix asm operand number out of range build error in bug table
    
    [ Upstream commit 487635756198cad563feb47539c6a37ea57f1dae ]
    
    Build is broken if CONFIG_DEBUG_BUGVERBOSE=n.
    Fix it be using the correct asm operand number.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Fixes: fe76a1349f23 ("parisc: Use natural CPU alignment for bug_table")
    Cc: stable@vger.kernel.org   # v6.0+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 164960641e6c040e5593a962f5609255f008a8fe
Author: Helge Deller <deller@gmx.de>
Date:   Thu Nov 23 21:57:19 2023 +0100

    parisc: Reduce size of the bug_table on 64-bit kernel by half
    
    [ Upstream commit 43266838515d30dc0c45d5c7e6e7edacee6cce92 ]
    
    Enable GENERIC_BUG_RELATIVE_POINTERS which will store 32-bit relative
    offsets to the bug address and the source file name instead of 64-bit
    absolute addresses. This effectively reduces the size of the
    bug_table[] array by half on 64-bit kernels.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Stable-dep-of: 487635756198 ("parisc: Fix asm operand number out of range build error in bug table")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b117370d1d12cc00bb14ee2f400b1a91e32bb69
Author: Hengqi Chen <hengqi.chen@gmail.com>
Date:   Sat Dec 9 15:49:16 2023 +0800

    LoongArch: BPF: Don't sign extend function return value
    
    [ Upstream commit 5d47ec2e6f4c64e30e392cfe9532df98c9beb106 ]
    
    The `cls_redirect` test triggers a kernel panic like:
    
      # ./test_progs -t cls_redirect
      Can't find bpf_testmod.ko kernel module: -2
      WARNING! Selftests relying on bpf_testmod.ko will be skipped.
      [   30.938489] CPU 3 Unable to handle kernel paging request at virtual address fffffffffd814de0, era == ffff800002009fb8, ra == ffff800002009f9c
      [   30.939331] Oops[#1]:
      [   30.939513] CPU: 3 PID: 1260 Comm: test_progs Not tainted 6.7.0-rc2-loong-devel-g2f56bb0d2327 #35 a896aca3f4164f09cc346f89f2e09832e07be5f6
      [   30.939732] Hardware name: QEMU QEMU Virtual Machine, BIOS unknown 2/2/2022
      [   30.939901] pc ffff800002009fb8 ra ffff800002009f9c tp 9000000104da4000 sp 9000000104da7ab0
      [   30.940038] a0 fffffffffd814de0 a1 9000000104da7a68 a2 0000000000000000 a3 9000000104da7c10
      [   30.940183] a4 9000000104da7c14 a5 0000000000000002 a6 0000000000000021 a7 00005555904d7f90
      [   30.940321] t0 0000000000000110 t1 0000000000000000 t2 fffffffffd814de0 t3 0004c4b400000000
      [   30.940456] t4 ffffffffffffffff t5 00000000c3f63600 t6 0000000000000000 t7 0000000000000000
      [   30.940590] t8 000000000006d803 u0 0000000000000020 s9 9000000104da7b10 s0 900000010504c200
      [   30.940727] s1 fffffffffd814de0 s2 900000010504c200 s3 9000000104da7c10 s4 9000000104da7ad0
      [   30.940866] s5 0000000000000000 s6 90000000030e65bc s7 9000000104da7b44 s8 90000000044f6fc0
      [   30.941015]    ra: ffff800002009f9c bpf_prog_846803e5ae81417f_cls_redirect+0xa0/0x590
      [   30.941535]   ERA: ffff800002009fb8 bpf_prog_846803e5ae81417f_cls_redirect+0xbc/0x590
      [   30.941696]  CRMD: 000000b0 (PLV0 -IE -DA +PG DACF=CC DACM=CC -WE)
      [   30.942224]  PRMD: 00000004 (PPLV0 +PIE -PWE)
      [   30.942330]  EUEN: 00000003 (+FPE +SXE -ASXE -BTE)
      [   30.942453]  ECFG: 00071c1c (LIE=2-4,10-12 VS=7)
      [   30.942612] ESTAT: 00010000 [PIL] (IS= ECode=1 EsubCode=0)
      [   30.942764]  BADV: fffffffffd814de0
      [   30.942854]  PRID: 0014c010 (Loongson-64bit, Loongson-3A5000)
      [   30.942974] Modules linked in:
      [   30.943078] Process test_progs (pid: 1260, threadinfo=00000000ce303226, task=000000007d10bb76)
      [   30.943306] Stack : 900000010a064000 90000000044f6fc0 9000000104da7b48 0000000000000000
      [   30.943495]         0000000000000000 9000000104da7c14 9000000104da7c10 900000010504c200
      [   30.943626]         0000000000000001 ffff80001b88c000 9000000104da7b70 90000000030e6668
      [   30.943785]         0000000000000000 9000000104da7b58 ffff80001b88c048 9000000003d05000
      [   30.943936]         900000000303ac88 0000000000000000 0000000000000000 9000000104da7b70
      [   30.944091]         0000000000000000 0000000000000001 0000000731eeab00 0000000000000000
      [   30.944245]         ffff80001b88c000 0000000000000000 0000000000000000 54b99959429f83b8
      [   30.944402]         ffff80001b88c000 90000000044f6fc0 9000000101d70000 ffff80001b88c000
      [   30.944538]         000000000000005a 900000010504c200 900000010a064000 900000010a067000
      [   30.944697]         9000000104da7d88 0000000000000000 9000000003d05000 90000000030e794c
      [   30.944852]         ...
      [   30.944924] Call Trace:
      [   30.945120] [<ffff800002009fb8>] bpf_prog_846803e5ae81417f_cls_redirect+0xbc/0x590
      [   30.945650] [<90000000030e6668>] bpf_test_run+0x1ec/0x2f8
      [   30.945958] [<90000000030e794c>] bpf_prog_test_run_skb+0x31c/0x684
      [   30.946065] [<90000000026d4f68>] __sys_bpf+0x678/0x2724
      [   30.946159] [<90000000026d7288>] sys_bpf+0x20/0x2c
      [   30.946253] [<90000000032dd224>] do_syscall+0x7c/0x94
      [   30.946343] [<9000000002541c5c>] handle_syscall+0xbc/0x158
      [   30.946492]
      [   30.946549] Code: 0015030e  5c0009c0  5001d000 <28c00304> 02c00484  29c00304  00150009  2a42d2e4  0280200d
      [   30.946793]
      [   30.946971] ---[ end trace 0000000000000000 ]---
      [   32.093225] Kernel panic - not syncing: Fatal exception in interrupt
      [   32.093526] Kernel relocated by 0x2320000
      [   32.093630]  .text @ 0x9000000002520000
      [   32.093725]  .data @ 0x9000000003400000
      [   32.093792]  .bss  @ 0x9000000004413200
      [   34.971998] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    This is because we signed-extend function return values. When subprog
    mode is enabled, we have:
    
      cls_redirect()
        -> get_global_metrics() returns pcpu ptr 0xfffffefffc00b480
    
    The pointer returned is later signed-extended to 0xfffffffffc00b480 at
    `BPF_JMP | BPF_EXIT`. During BPF prog run, this triggers unhandled page
    fault and a kernel panic.
    
    Drop the unnecessary signed-extension on return values like other
    architectures do.
    
    With this change, we have:
    
      # ./test_progs -t cls_redirect
      Can't find bpf_testmod.ko kernel module: -2
      WARNING! Selftests relying on bpf_testmod.ko will be skipped.
      #51/1    cls_redirect/cls_redirect_inlined:OK
      #51/2    cls_redirect/IPv4 TCP accept unknown (no hops, flags: SYN):OK
      #51/3    cls_redirect/IPv6 TCP accept unknown (no hops, flags: SYN):OK
      #51/4    cls_redirect/IPv4 TCP accept unknown (no hops, flags: ACK):OK
      #51/5    cls_redirect/IPv6 TCP accept unknown (no hops, flags: ACK):OK
      #51/6    cls_redirect/IPv4 TCP forward unknown (one hop, flags: ACK):OK
      #51/7    cls_redirect/IPv6 TCP forward unknown (one hop, flags: ACK):OK
      #51/8    cls_redirect/IPv4 TCP accept known (one hop, flags: ACK):OK
      #51/9    cls_redirect/IPv6 TCP accept known (one hop, flags: ACK):OK
      #51/10   cls_redirect/IPv4 UDP accept unknown (no hops, flags: none):OK
      #51/11   cls_redirect/IPv6 UDP accept unknown (no hops, flags: none):OK
      #51/12   cls_redirect/IPv4 UDP forward unknown (one hop, flags: none):OK
      #51/13   cls_redirect/IPv6 UDP forward unknown (one hop, flags: none):OK
      #51/14   cls_redirect/IPv4 UDP accept known (one hop, flags: none):OK
      #51/15   cls_redirect/IPv6 UDP accept known (one hop, flags: none):OK
      #51/16   cls_redirect/cls_redirect_subprogs:OK
      #51/17   cls_redirect/IPv4 TCP accept unknown (no hops, flags: SYN):OK
      #51/18   cls_redirect/IPv6 TCP accept unknown (no hops, flags: SYN):OK
      #51/19   cls_redirect/IPv4 TCP accept unknown (no hops, flags: ACK):OK
      #51/20   cls_redirect/IPv6 TCP accept unknown (no hops, flags: ACK):OK
      #51/21   cls_redirect/IPv4 TCP forward unknown (one hop, flags: ACK):OK
      #51/22   cls_redirect/IPv6 TCP forward unknown (one hop, flags: ACK):OK
      #51/23   cls_redirect/IPv4 TCP accept known (one hop, flags: ACK):OK
      #51/24   cls_redirect/IPv6 TCP accept known (one hop, flags: ACK):OK
      #51/25   cls_redirect/IPv4 UDP accept unknown (no hops, flags: none):OK
      #51/26   cls_redirect/IPv6 UDP accept unknown (no hops, flags: none):OK
      #51/27   cls_redirect/IPv4 UDP forward unknown (one hop, flags: none):OK
      #51/28   cls_redirect/IPv6 UDP forward unknown (one hop, flags: none):OK
      #51/29   cls_redirect/IPv4 UDP accept known (one hop, flags: none):OK
      #51/30   cls_redirect/IPv6 UDP accept known (one hop, flags: none):OK
      #51/31   cls_redirect/cls_redirect_dynptr:OK
      #51/32   cls_redirect/IPv4 TCP accept unknown (no hops, flags: SYN):OK
      #51/33   cls_redirect/IPv6 TCP accept unknown (no hops, flags: SYN):OK
      #51/34   cls_redirect/IPv4 TCP accept unknown (no hops, flags: ACK):OK
      #51/35   cls_redirect/IPv6 TCP accept unknown (no hops, flags: ACK):OK
      #51/36   cls_redirect/IPv4 TCP forward unknown (one hop, flags: ACK):OK
      #51/37   cls_redirect/IPv6 TCP forward unknown (one hop, flags: ACK):OK
      #51/38   cls_redirect/IPv4 TCP accept known (one hop, flags: ACK):OK
      #51/39   cls_redirect/IPv6 TCP accept known (one hop, flags: ACK):OK
      #51/40   cls_redirect/IPv4 UDP accept unknown (no hops, flags: none):OK
      #51/41   cls_redirect/IPv6 UDP accept unknown (no hops, flags: none):OK
      #51/42   cls_redirect/IPv4 UDP forward unknown (one hop, flags: none):OK
      #51/43   cls_redirect/IPv6 UDP forward unknown (one hop, flags: none):OK
      #51/44   cls_redirect/IPv4 UDP accept known (one hop, flags: none):OK
      #51/45   cls_redirect/IPv6 UDP accept known (one hop, flags: none):OK
      #51      cls_redirect:OK
      Summary: 1/45 PASSED, 0 SKIPPED, 0 FAILED
    
    Fixes: 5dc615520c4d ("LoongArch: Add BPF JIT support")
    Signed-off-by: Hengqi Chen <hengqi.chen@gmail.com>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3275410b13b6275746abadcd76d9deaf7c85a9aa
Author: Hengqi Chen <hengqi.chen@gmail.com>
Date:   Sat Dec 9 15:49:16 2023 +0800

    LoongArch: BPF: Don't sign extend memory load operand
    
    [ Upstream commit fe5757553bf9ebe45ae8ecab5922f6937c8d8dfc ]
    
    The `cgrp_local_storage` test triggers a kernel panic like:
    
      # ./test_progs -t cgrp_local_storage
      Can't find bpf_testmod.ko kernel module: -2
      WARNING! Selftests relying on bpf_testmod.ko will be skipped.
      [  550.930632] CPU 1 Unable to handle kernel paging request at virtual address 0000000000000080, era == ffff80000200be34, ra == ffff80000200be00
      [  550.931781] Oops[#1]:
      [  550.931966] CPU: 1 PID: 1303 Comm: test_progs Not tainted 6.7.0-rc2-loong-devel-g2f56bb0d2327 #35 a896aca3f4164f09cc346f89f2e09832e07be5f6
      [  550.932215] Hardware name: QEMU QEMU Virtual Machine, BIOS unknown 2/2/2022
      [  550.932403] pc ffff80000200be34 ra ffff80000200be00 tp 9000000108350000 sp 9000000108353dc0
      [  550.932545] a0 0000000000000000 a1 0000000000000517 a2 0000000000000118 a3 00007ffffbb15558
      [  550.932682] a4 00007ffffbb15620 a5 90000001004e7700 a6 0000000000000021 a7 0000000000000118
      [  550.932824] t0 ffff80000200bdc0 t1 0000000000000517 t2 0000000000000517 t3 00007ffff1c06ee0
      [  550.932961] t4 0000555578ae04d0 t5 fffffffffffffff8 t6 0000000000000004 t7 0000000000000020
      [  550.933097] t8 0000000000000040 u0 00000000000007b8 s9 9000000108353e00 s0 90000001004e7700
      [  550.933241] s1 9000000004005000 s2 0000000000000001 s3 0000000000000000 s4 0000555555eb2ec8
      [  550.933379] s5 00007ffffbb15bb8 s6 00007ffff1dafd60 s7 000055555663f610 s8 00007ffff1db0050
      [  550.933520]    ra: ffff80000200be00 bpf_prog_98f1b9e767be2a84_on_enter+0x40/0x200
      [  550.933911]   ERA: ffff80000200be34 bpf_prog_98f1b9e767be2a84_on_enter+0x74/0x200
      [  550.934105]  CRMD: 000000b0 (PLV0 -IE -DA +PG DACF=CC DACM=CC -WE)
      [  550.934596]  PRMD: 00000004 (PPLV0 +PIE -PWE)
      [  550.934712]  EUEN: 00000003 (+FPE +SXE -ASXE -BTE)
      [  550.934836]  ECFG: 00071c1c (LIE=2-4,10-12 VS=7)
      [  550.934976] ESTAT: 00010000 [PIL] (IS= ECode=1 EsubCode=0)
      [  550.935097]  BADV: 0000000000000080
      [  550.935181]  PRID: 0014c010 (Loongson-64bit, Loongson-3A5000)
      [  550.935291] Modules linked in:
      [  550.935391] Process test_progs (pid: 1303, threadinfo=000000006c3b1c41, task=0000000061f84a55)
      [  550.935643] Stack : 00007ffffbb15bb8 0000555555eb2ec8 0000000000000000 0000000000000001
      [  550.935844]         9000000004005000 ffff80001b864000 00007ffffbb15450 90000000029aa034
      [  550.935990]         0000000000000000 9000000108353ec0 0000000000000118 d07d9dfb09721a09
      [  550.936175]         0000000000000001 0000000000000000 9000000108353ec0 0000000000000118
      [  550.936314]         9000000101d46ad0 900000000290abf0 000055555663f610 0000000000000000
      [  550.936479]         0000000000000003 9000000108353ec0 00007ffffbb15450 90000000029d7288
      [  550.936635]         00007ffff1dafd60 000055555663f610 0000000000000000 0000000000000003
      [  550.936779]         9000000108353ec0 90000000035dd1f0 00007ffff1dafd58 9000000002841c5c
      [  550.936939]         0000000000000119 0000555555eea5a8 00007ffff1d78780 00007ffffbb153e0
      [  550.937083]         ffffffffffffffda 00007ffffbb15518 0000000000000040 00007ffffbb15558
      [  550.937224]         ...
      [  550.937299] Call Trace:
      [  550.937521] [<ffff80000200be34>] bpf_prog_98f1b9e767be2a84_on_enter+0x74/0x200
      [  550.937910] [<90000000029aa034>] bpf_trace_run2+0x90/0x154
      [  550.938105] [<900000000290abf0>] syscall_trace_enter.isra.0+0x1cc/0x200
      [  550.938224] [<90000000035dd1f0>] do_syscall+0x48/0x94
      [  550.938319] [<9000000002841c5c>] handle_syscall+0xbc/0x158
      [  550.938477]
      [  550.938607] Code: 580009ae  50016000  262402e4 <28c20085> 14092084  03a00084  16000024  03240084  00150006
      [  550.938851]
      [  550.939021] ---[ end trace 0000000000000000 ]---
    
    Further investigation shows that this panic is triggered by memory
    load operations:
    
      ptr = bpf_cgrp_storage_get(&map_a, task->cgroups->dfl_cgrp, 0,
                                 BPF_LOCAL_STORAGE_GET_F_CREATE);
    
    The expression `task->cgroups->dfl_cgrp` involves two memory load.
    Since the field offset fits in imm12 or imm14, we use ldd or ldptrd
    instructions. But both instructions have the side effect that it will
    signed-extended the imm operand. Finally, we got the wrong addresses
    and panics is inevitable.
    
    Use a generic ldxd instruction to avoid this kind of issues.
    
    With this change, we have:
    
      # ./test_progs -t cgrp_local_storage
      Can't find bpf_testmod.ko kernel module: -2
      WARNING! Selftests relying on bpf_testmod.ko will be skipped.
      test_cgrp_local_storage:PASS:join_cgroup /cgrp_local_storage 0 nsec
      #48/1    cgrp_local_storage/tp_btf:OK
      test_attach_cgroup:PASS:skel_open 0 nsec
      test_attach_cgroup:PASS:prog_attach 0 nsec
      test_attach_cgroup:PASS:prog_attach 0 nsec
      libbpf: prog 'update_cookie_tracing': failed to attach: ERROR: strerror_r(-524)=22
      test_attach_cgroup:FAIL:prog_attach unexpected error: -524
      #48/2    cgrp_local_storage/attach_cgroup:FAIL
      test_recursion:PASS:skel_open_and_load 0 nsec
      libbpf: prog 'on_lookup': failed to attach: ERROR: strerror_r(-524)=22
      libbpf: prog 'on_lookup': failed to auto-attach: -524
      test_recursion:FAIL:skel_attach unexpected error: -524 (errno 524)
      #48/3    cgrp_local_storage/recursion:FAIL
      #48/4    cgrp_local_storage/negative:OK
      #48/5    cgrp_local_storage/cgroup_iter_sleepable:OK
      test_yes_rcu_lock:PASS:skel_open 0 nsec
      test_yes_rcu_lock:PASS:skel_load 0 nsec
      libbpf: prog 'yes_rcu_lock': failed to attach: ERROR: strerror_r(-524)=22
      libbpf: prog 'yes_rcu_lock': failed to auto-attach: -524
      test_yes_rcu_lock:FAIL:skel_attach unexpected error: -524 (errno 524)
      #48/6    cgrp_local_storage/yes_rcu_lock:FAIL
      #48/7    cgrp_local_storage/no_rcu_lock:OK
      #48      cgrp_local_storage:FAIL
    
      All error logs:
      test_cgrp_local_storage:PASS:join_cgroup /cgrp_local_storage 0 nsec
      test_attach_cgroup:PASS:skel_open 0 nsec
      test_attach_cgroup:PASS:prog_attach 0 nsec
      test_attach_cgroup:PASS:prog_attach 0 nsec
      libbpf: prog 'update_cookie_tracing': failed to attach: ERROR: strerror_r(-524)=22
      test_attach_cgroup:FAIL:prog_attach unexpected error: -524
      #48/2    cgrp_local_storage/attach_cgroup:FAIL
      test_recursion:PASS:skel_open_and_load 0 nsec
      libbpf: prog 'on_lookup': failed to attach: ERROR: strerror_r(-524)=22
      libbpf: prog 'on_lookup': failed to auto-attach: -524
      test_recursion:FAIL:skel_attach unexpected error: -524 (errno 524)
      #48/3    cgrp_local_storage/recursion:FAIL
      test_yes_rcu_lock:PASS:skel_open 0 nsec
      test_yes_rcu_lock:PASS:skel_load 0 nsec
      libbpf: prog 'yes_rcu_lock': failed to attach: ERROR: strerror_r(-524)=22
      libbpf: prog 'yes_rcu_lock': failed to auto-attach: -524
      test_yes_rcu_lock:FAIL:skel_attach unexpected error: -524 (errno 524)
      #48/6    cgrp_local_storage/yes_rcu_lock:FAIL
      #48      cgrp_local_storage:FAIL
      Summary: 0/4 PASSED, 0 SKIPPED, 1 FAILED
    
    No panics any more (The test still failed because lack of BPF trampoline
    which I am actively working on).
    
    Fixes: 5dc615520c4d ("LoongArch: Add BPF JIT support")
    Signed-off-by: Hengqi Chen <hengqi.chen@gmail.com>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fdd1b8848217a6c2ae79ded51880713de2a32ea
Author: Ilkka Koskinen <ilkka@os.amperecomputing.com>
Date:   Thu Nov 30 18:15:48 2023 -0800

    perf vendor events arm64: AmpereOne: Add missing DefaultMetricgroupName fields
    
    [ Upstream commit 90fe70d4e23cb57253d2668a171d5695c332deb7 ]
    
    AmpereOne metrics were missing DefaultMetricgroupName from metrics with
    "Default" in group name resulting perf to segfault. Add the missing
    field to address the issue.
    
    Fixes: 59faeaf80d02 ("perf vendor events arm64: Fix for AmpereOne metrics")
    Signed-off-by: Ilkka Koskinen <ilkka@os.amperecomputing.com>
    Reviewed-by: Ian Rogers <irogers@google.com>
    Cc: James Clark <james.clark@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mike Leach <mike.leach@linaro.org>
    Cc: John Garry <john.g.garry@oracle.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lore.kernel.org/r/20231201021550.1109196-2-ilkka@os.amperecomputing.com
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f78fff4648bb0a797359dac69792463efd22bb00
Author: Su Hui <suhui@nfschina.com>
Date:   Mon Nov 20 17:55:26 2023 +0800

    misc: mei: client.c: fix problem of return '-EOVERFLOW' in mei_cl_write
    
    [ Upstream commit ee6236027218f8531916f1c5caa5dc330379f287 ]
    
    Clang static analyzer complains that value stored to 'rets' is never
    read.Let 'buf_len = -EOVERFLOW' to make sure we can return '-EOVERFLOW'.
    
    Fixes: 8c8d964ce90f ("mei: move hbuf_depth from the mei device to the hw modules")
    Signed-off-by: Su Hui <suhui@nfschina.com>
    Link: https://lore.kernel.org/r/20231120095523.178385-2-suhui@nfschina.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2365ead012a811755c4e3c02a95c70b89b38e56
Author: Su Hui <suhui@nfschina.com>
Date:   Mon Nov 20 17:55:23 2023 +0800

    misc: mei: client.c: return negative error code in mei_cl_write
    
    [ Upstream commit 8f06aee8089cf42fd99a20184501bd1347ce61b9 ]
    
    mei_msg_hdr_init() return negative error code, rets should be
    'PTR_ERR(mei_hdr)' rather than '-PTR_ERR(mei_hdr)'.
    
    Fixes: 0cd7c01a60f8 ("mei: add support for mei extended header.")
    Signed-off-by: Su Hui <suhui@nfschina.com>
    Link: https://lore.kernel.org/r/20231120095523.178385-1-suhui@nfschina.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c541d0edd82764017d69b78e479bf0db8acf8202
Author: Junhao He <hejunhao3@huawei.com>
Date:   Tue Nov 14 21:33:45 2023 +0800

    coresight: ultrasoc-smb: Fix uninitialized before use buf_hw_base
    
    [ Upstream commit 862c135bde8bc185e8aae2110374175e6a1b6ed5 ]
    
    In smb_reset_buffer, the sdb->buf_hw_base variable is uninitialized
    before use, which initializes it in smb_init_data_buffer. And the SMB
    regiester are set in smb_config_inport.
    So move the call after smb_config_inport.
    
    Fixes: 06f5c2926aaa ("drivers/coresight: Add UltraSoc System Memory Buffer driver")
    Signed-off-by: Junhao He <hejunhao3@huawei.com>
    Reviewed-by: James Clark <james.clark@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20231114133346.30489-4-hejunhao3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab5091e1ccb05c855c78f67f93538bb703f3f64f
Author: Junhao He <hejunhao3@huawei.com>
Date:   Tue Nov 14 21:33:44 2023 +0800

    coresight: ultrasoc-smb: Config SMB buffer before register sink
    
    [ Upstream commit 830a7f54db102c889a3fe1c0a225f369ac05f07f ]
    
    The SMB dirver register the enable/disable sysfs interface in function
    smb_register_sink(), however the buffer depends on the following
    configuration to work well. So it'll be possible for user to access an
    unreset one.
    
    Move the config buffer operation to before register_sink().
    Ignore the return value, if smb_config_inport() fails. That will
    cause the hardwares disable trace path to fail, should not affect
    SMB driver remove. So we make smb_remove() return success,
    
    Fixes: 06f5c2926aaa ("drivers/coresight: Add UltraSoc System Memory Buffer driver")
    Signed-off-by: Junhao He <hejunhao3@huawei.com>
    Reviewed-by: James Clark <james.clark@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20231114133346.30489-3-hejunhao3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ace850bd8600328f8f56e41db88d7b232ab939d4
Author: Junhao He <hejunhao3@huawei.com>
Date:   Tue Nov 14 21:33:43 2023 +0800

    coresight: ultrasoc-smb: Fix sleep while close preempt in enable_smb
    
    [ Upstream commit b8411287aef4a994eff0c68f5597910c4194dfe3 ]
    
    When we to enable the SMB by perf, the perf sched will call perf_ctx_lock()
    to close system preempt in event_function_call(). But SMB::enable_smb() use
    mutex to lock the critical section, which may sleep.
    
     BUG: sleeping function called from invalid context at kernel/locking/mutex.c:580
     in_atomic(): 1, irqs_disabled(): 1, non_block: 0, pid: 153023, name: perf
     preempt_count: 2, expected: 0
     RCU nest depth: 0, expected: 0
     INFO: lockdep is turned off.
     irq event stamp: 0
     hardirqs last  enabled at (0): [<0000000000000000>] 0x0
     hardirqs last disabled at (0): [<ffffa2983f5c5f40>] copy_process+0xae8/0x2b48
     softirqs last  enabled at (0): [<ffffa2983f5c5f40>] copy_process+0xae8/0x2b48
     softirqs last disabled at (0): [<0000000000000000>] 0x0
     CPU: 2 PID: 153023 Comm: perf Kdump: loaded Tainted: G   W  O   6.5.0-rc4+ #1
    
     Call trace:
     ...
      __mutex_lock+0xbc/0xa70
      mutex_lock_nested+0x34/0x48
      smb_update_buffer+0x58/0x360 [ultrasoc_smb]
      etm_event_stop+0x204/0x2d8 [coresight]
      etm_event_del+0x1c/0x30 [coresight]
      event_sched_out+0x17c/0x3b8
      group_sched_out.part.0+0x5c/0x208
      __perf_event_disable+0x15c/0x210
      event_function+0xe0/0x230
      remote_function+0xb4/0xe8
      generic_exec_single+0x160/0x268
      smp_call_function_single+0x20c/0x2a0
      event_function_call+0x20c/0x220
      _perf_event_disable+0x5c/0x90
      perf_event_for_each_child+0x58/0xc0
      _perf_ioctl+0x34c/0x1250
      perf_ioctl+0x64/0x98
     ...
    
    Use spinlock to replace mutex to control driver data access to one at a
    time. The function copy_to_user() may sleep, it cannot be in a spinlock
    context, so we can't simply replace it in smb_read(). But we can ensure
    that only one user gets the SMB device fd by smb_open(), so remove the
    locks from smb_read() and buffer synchronization is guaranteed by the user.
    
    Fixes: 06f5c2926aaa ("drivers/coresight: Add UltraSoc System Memory Buffer driver")
    Signed-off-by: Junhao He <hejunhao3@huawei.com>
    Reviewed-by: James Clark <james.clark@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20231114133346.30489-2-hejunhao3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 359d3fbcbc099430ca3f35a696e298e9c2d9e9ba
Author: Junhao He <hejunhao3@huawei.com>
Date:   Tue Oct 10 16:47:31 2023 +0800

    hwtracing: hisi_ptt: Add dummy callback pmu::read()
    
    [ Upstream commit 55e0a2fb0cb5ab7c9c99c1ad4d3e6954de8b73a0 ]
    
    When start trace with perf option "-C $cpu" and immediately stop it
    with SIGTERM or others, the perf core will invoke pmu::read() while
    the driver doesn't implement it. Add a dummy pmu::read() to avoid
    any issues.
    
    Fixes: ff0de066b463 ("hwtracing: hisi_ptt: Add trace function support for HiSilicon PCIe Tune and Trace device")
    Signed-off-by: Junhao He <hejunhao3@huawei.com>
    Signed-off-by: Yicong Yang <yangyicong@hisilicon.com>
    Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20231010084731.30450-6-yangyicong@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f6b1527db82d959639be1f55db4069a869b71db
Author: James Clark <james.clark@arm.com>
Date:   Fri Oct 6 14:14:52 2023 +0100

    coresight: Fix crash when Perf and sysfs modes are used concurrently
    
    [ Upstream commit 287e82cf69aa264a52bc37591bd0eb407e20f85c ]
    
    Partially revert the change in commit 6148652807ba ("coresight: Enable
    and disable helper devices adjacent to the path") which changed the bare
    call from source_ops(csdev)->enable() to coresight_enable_source() for
    Perf sessions. It was missed that coresight_enable_source() is
    specifically for the sysfs interface, rather than being a generic call.
    This interferes with the sysfs reference counting to cause the following
    crash:
    
      $ perf record -e cs_etm/@tmc_etr0/ -C 0 &
      $ echo 1 > /sys/bus/coresight/devices/tmc_etr0/enable_sink
      $ echo 1 > /sys/bus/coresight/devices/etm0/enable_source
      $ echo 0 > /sys/bus/coresight/devices/etm0/enable_source
    
      Unable to handle kernel NULL pointer dereference at virtual
      address 00000000000001d0
      Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP
      ...
      Call trace:
       etm4_disable+0x54/0x150 [coresight_etm4x]
       coresight_disable_source+0x6c/0x98 [coresight]
       coresight_disable+0x74/0x1c0 [coresight]
       enable_source_store+0x88/0xa0 [coresight]
       dev_attr_store+0x20/0x40
       sysfs_kf_write+0x4c/0x68
       kernfs_fop_write_iter+0x120/0x1b8
       vfs_write+0x2dc/0x3b0
       ksys_write+0x70/0x108
       __arm64_sys_write+0x24/0x38
       invoke_syscall+0x50/0x128
       el0_svc_common.constprop.0+0x104/0x130
       do_el0_svc+0x40/0xb8
       el0_svc+0x2c/0xb8
       el0t_64_sync_handler+0xc0/0xc8
       el0t_64_sync+0x1a4/0x1a8
      Code: d53cd042 91002000 b9402a81 b8626800 (f940ead5)
      ---[ end trace 0000000000000000 ]---
    
    This commit linked below also fixes the issue, but has unlocked updates
    to the mode which could potentially race. So until we come up with a
    more complete solution that takes all locking and interaction between
    both modes into account, just revert back to the old behavior for Perf.
    
    Reported-by: Junhao He <hejunhao3@huawei.com>
    Closes: https://lore.kernel.org/linux-arm-kernel/20230921132904.60996-1-hejunhao3@huawei.com/
    Fixes: 6148652807ba ("coresight: Enable and disable helper devices adjacent to the path")
    Tested-by: Junhao He <hejunhao3@huawei.com>
    Signed-off-by: James Clark <james.clark@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20231006131452.646721-1-james.clark@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b5d156c24282ca91b5b7c8988f5006f6dc7e113
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Fri Sep 29 10:16:37 2023 +0200

    coresight: etm4x: Remove bogous __exit annotation for some functions
    
    [ Upstream commit 348ddab81f7b0983d9fb158df910254f08d3f887 ]
    
    etm4_platform_driver (which lives in ".data" contains a reference to
    etm4_remove_platform_dev(). So the latter must not be marked with __exit
    which results in the function being discarded for a build with
    CONFIG_CORESIGHT_SOURCE_ETM4X=y which in turn makes the remove pointer
    contain invalid data.
    
    etm4x_amba_driver referencing etm4_remove_amba() has the same issue.
    
    Drop the __exit annotations for the two affected functions and a third
    one that is called by the other two.
    
    For reasons I don't understand this isn't catched by building with
    CONFIG_DEBUG_SECTION_MISMATCH=y.
    
    Fixes: c23bc382ef0e ("coresight: etm4x: Refactor probing routine")
    Fixes: 5214b563588e ("coresight: etm4x: Add support for sysreg only devices")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: James Clark <james.clark@arm.com>
    Link: https://lore.kernel.org/all/20230929081540.yija47lsj35xtj4v@pengutronix.de/
    Link: https://lore.kernel.org/r/20230929081637.2377335-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9cc170842d8f0bc2464048375e20dc2fea793c5
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Oct 5 17:11:50 2023 +0200

    arm64: dts: mediatek: mt8186: Change gpu speedbin nvmem cell name
    
    commit 59fa1e51ba54e1f513985a8177969b62973f7fd5 upstream.
    
    MT8186's GPU speedbin value must be interpreted, or the value will not
    be meaningful.
    Use the correct "gpu-speedbin" nvmem cell name for the GPU speedbin to
    allow triggering the cell info fixup handler, hence feeding the right
    speedbin number to the users.
    
    Cc: stable@vger.kernel.org
    Fixes: 263d2fd02afc ("arm64: dts: mediatek: mt8186: Add GPU speed bin NVMEM cells")
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Link: https://lore.kernel.org/r/20231005151150.355536-1-angelogioacchino.delregno@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6eccbcb1bcc8694c5998f37c72dce340a1d2d7c
Author: Eugen Hristev <eugen.hristev@collabora.com>
Date:   Thu Oct 5 13:30:41 2023 +0300

    arm64: dts: mediatek: mt8186: fix clock names for power domains
    
    commit 9adf7580f6d498a5839e02fa1d1535e934364602 upstream.
    
    Clocks for each power domain are split into big categories: pd clocks
    and subsys clocks.
    According to the binding, all clocks which have a dash '-' in their name
    are treated as subsys clocks, and must be placed at the end of the list.
    The other clocks which are pd clocks must come first.
    Fixed the naming and the placing of all clocks in the power domains.
    For the avoidance of doubt, prefixed all subsys clocks with the 'subsys'
    prefix. The binding does not enforce strict clock names, the driver
    uses them in bulk, only making a difference for pd clocks vs subsys clocks.
    
    The above problem appears to be trivial, however, it leads to incorrect
    power up and power down sequence of the power domains, because some
    clocks will be mistakenly taken for subsys clocks and viceversa.
    One consequence is the fact that if the DIS power domain goes power down
    and power back up during the boot process, when it comes back up, there
    are still transactions left on the bus which makes the display inoperable.
    
    Some of the clocks for the DIS power domain were wrongly using '_' instead
    of '-', which again made these clocks being treated as pd clocks instead of
    subsys clocks.
    
    Cc: stable@vger.kernel.org
    Fixes: d9e43c1e7a38 ("arm64: dts: mt8186: Add power domains controller")
    Signed-off-by: Eugen Hristev <eugen.hristev@collabora.com>
    Tested-by: Chen-Yu Tsai <wenst@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Tested-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: Alexandre Mergnat <amergnat@baylibre.com>
    Link: https://lore.kernel.org/r/20231005103041.352478-1-eugen.hristev@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e465268df4cbf81450eda3d913213553619d8c7
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Wed Oct 25 11:38:14 2023 +0200

    arm64: dts: mediatek: mt8183-evb: Fix unit_address_vs_reg warning on ntc
    
    commit 9dea1c724fc36643e83216c1f5a26613412150db upstream.
    
    The NTC is defined as ntc@0 but it doesn't need any address at all.
    Fix the unit_address_vs_reg warning by dropping the unit address: since
    the node name has to be generic also fully rename it from ntc@0 to
    thermal-sensor.
    
    Cc: stable@vger.kernel.org
    Fixes: ff9ea5c62279 ("arm64: dts: mediatek: mt8183-evb: Add node for thermistor")
    Link: https://lore.kernel.org/r/20231025093816.44327-7-angelogioacchino.delregno@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfff27fb5d2d7f40b5f989cd446a1cdea03b514c
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Wed Oct 25 11:38:16 2023 +0200

    arm64: dts: mediatek: mt8183: Move thermal-zones to the root node
    
    commit 5a60d63439694590cd5ab1f998fc917ff7ba1c1d upstream.
    
    The thermal zones are not a soc bus device: move it to the root
    node to solve simple_bus_reg warnings.
    
    Cc: stable@vger.kernel.org
    Fixes: b325ce39785b ("arm64: dts: mt8183: add thermal zone node")
    Link: https://lore.kernel.org/r/20231025093816.44327-9-angelogioacchino.delregno@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d97373c3b159f31631eb04fea12be7b4fe7efb87
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Wed Oct 25 11:38:13 2023 +0200

    arm64: dts: mediatek: mt8183: Fix unit address for scp reserved memory
    
    commit 19cba9a6c071db57888dc6b2ec1d9bf8996ea681 upstream.
    
    The reserved memory for scp had node name "scp_mem_region" and also
    without unit-address: change the name to "memory@(address)".
    This fixes a unit_address_vs_reg warning.
    
    Cc: stable@vger.kernel.org
    Fixes: 1652dbf7363a ("arm64: dts: mt8183: add scp node")
    Link: https://lore.kernel.org/r/20231025093816.44327-6-angelogioacchino.delregno@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c4ae4801f8131ddeed6021907e9294da31e0c38
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Thu Jul 6 11:58:41 2023 +0200

    arm64: dts: mediatek: mt8195: Fix PM suspend/resume with venc clocks
    
    commit 61b94d54421a1f3670ddd5396ec70afe833e9405 upstream.
    
    Before suspending the LARBs we're making sure that any operation is
    done: this never happens because we are unexpectedly unclocking the
    LARB20 before executing the suspend handler for the MediaTek Smart
    Multimedia Interface (SMI) and the cause of this is incorrect clocks
    on this LARB.
    
    Fix this issue by changing the Local Arbiter 20 (used by the video
    encoder secondary core) apb clock to CLK_VENC_CORE1_VENC;
    furthermore, in order to make sure that both the PM resume and video
    encoder operation is stable, add the CLK_VENC(_CORE1)_LARB clock to
    the VENC (main core) and VENC_CORE1 power domains, as this IP cannot
    communicate with the rest of the system (the AP) without local
    arbiter clocks being operational.
    
    Cc: stable@vger.kernel.org
    Fixes: 3b5838d1d82e ("arm64: dts: mt8195: Add iommu and smi nodes")
    Fixes: 2b515194bf0c ("arm64: dts: mt8195: Add power domains controller")
    Reviewed-by: Alexandre Mergnat <amergnat@baylibre.com>
    Link: https://lore.kernel.org/r/20230706095841.109315-1-angelogioacchino.delregno@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12530266947ac3a6168624b0b5a9fac949d73806
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Wed Oct 25 11:38:15 2023 +0200

    arm64: dts: mediatek: mt8173-evb: Fix regulator-fixed node names
    
    commit 24165c5dad7ba7c7624d05575a5e0cc851396c71 upstream.
    
    Fix a unit_address_vs_reg warning for the USB VBUS fixed regulators
    by renaming the regulator nodes from regulator@{0,1} to regulator-usb-p0
    and regulator-usb-p1.
    
    Cc: stable@vger.kernel.org
    Fixes: c0891284a74a ("arm64: dts: mediatek: add USB3 DRD driver")
    Link: https://lore.kernel.org/r/20231025093816.44327-8-angelogioacchino.delregno@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac9a2f55bfcc4792c7f2da2d1409e733e49e0e7b
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Mon Nov 27 14:20:26 2023 +0100

    arm64: dts: mediatek: cherry: Fix interrupt cells for MT6360 on I2C7
    
    commit 5943b8f7449df9881b273db07bdde1e7120dccf0 upstream.
    
    Change interrupt cells to 2 to suppress interrupts_property warning.
    
    Cc: stable@vger.kernel.org
    Fixes: 0de0fe950f1b ("arm64: dts: mediatek: cherry: Enable MT6360 sub-pmic on I2C7")
    Link: https://lore.kernel.org/r/20231127132026.165027-1-angelogioacchino.delregno@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7646d79ea19d0bce4b921e5f544bfdd6eefc57e
Author: Eugen Hristev <eugen.hristev@collabora.com>
Date:   Mon Aug 14 10:10:53 2023 +0300

    arm64: dts: mediatek: mt8183-kukui-jacuzzi: fix dsi unnecessary cells properties
    
    commit 74543b303a9abfe4fa253d1fa215281baa05ff3a upstream.
    
    dtbs_check throws a warning at the dsi node:
    Warning (avoid_unnecessary_addr_size): /soc/dsi@14014000: unnecessary #address-cells/#size-cells without "ranges" or child "reg" property
    
    Other DTS have a panel child node with a reg, so the parent dtsi
    must have the address-cells and size-cells, however this specific DT
    has the panel removed, but not the cells, hence the warning above.
    
    If panel is deleted then the cells must also be deleted since they are
    tied together, as the child node in this DT does not have a reg.
    
    Cc: stable@vger.kernel.org
    Fixes: cabc71b08eb5 ("arm64: dts: mt8183: Add kukui-jacuzzi-damu board")
    Signed-off-by: Eugen Hristev <eugen.hristev@collabora.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20230814071053.5459-1-eugen.hristev@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a6df679ac229bfb46eaea93e610c70b5ca45d32
Author: Eugen Hristev <eugen.hristev@collabora.com>
Date:   Mon Aug 14 09:50:42 2023 +0300

    arm64: dts: mediatek: mt7622: fix memory node warning check
    
    commit 8e6ecbfd44b5542a7598c1c5fc9c6dcb5d367f2a upstream.
    
    dtbs_check throws a warning at the memory node:
    Warning (unit_address_vs_reg): /memory: node has a reg or ranges property, but no unit name
    
    fix by adding the address into the node name.
    
    Cc: stable@vger.kernel.org
    Fixes: 0b6286dd96c0 ("arm64: dts: mt7622: add bananapi BPI-R64 board")
    Signed-off-by: Eugen Hristev <eugen.hristev@collabora.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20230814065042.4973-1-eugen.hristev@collabora.com
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90dc20c8c51d13d410776af8d81689afc16183ea
Author: Eric Woudstra <ericwouds@gmail.com>
Date:   Wed Oct 25 19:08:28 2023 +0200

    arm64: dts: mt7986: fix emmc hs400 mode without uboot initialization
    
    commit 8dfe51c3f6ef31502fca3e2da8cd250ebbe4b8f2 upstream.
    
    Eric reports errors on emmc with hs400 mode when booting linux on bpi-r3
    without uboot [1]. Booting with uboot does not show this because clocks
    seem to be initialized by uboot.
    
    Fix this by adding assigned-clocks and assigned-clock-parents like it's
    done in uboot [2].
    
    [1] https://forum.banana-pi.org/t/bpi-r3-kernel-fails-setting-emmc-clock-to-416m-depends-on-u-boot/15170
    [2] https://github.com/u-boot/u-boot/blob/master/arch/arm/dts/mt7986.dtsi#L287
    
    Cc: stable@vger.kernel.org
    Fixes: 513b49d19b34 ("arm64: dts: mt7986: add mmc related device nodes")
    Signed-off-by: Eric Woudstra <ericwouds@gmail.com>
    Signed-off-by: Frank Wunderlich <frank-w@public-files.de>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20231025170832.78727-2-linux@fw-web.de
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 287b1c41decbd903e4adb70c9aa6989551bf6ffb
Author: Frank Wunderlich <frank-w@public-files.de>
Date:   Wed Oct 25 19:08:29 2023 +0200

    arm64: dts: mt7986: define 3W max power to both SFP on BPI-R3
    
    commit 6413cbc17f89b3a160f3a6f3fad1232b1678fe40 upstream.
    
    All SFP power supplies are connected to the system VDD33 which is 3v3/8A.
    Set 3A per SFP slot to allow SFPs work which need more power than the
    default 1W.
    
    Cc: stable@vger.kernel.org
    Fixes: 8e01fb15b815 ("arm64: dts: mt7986: add Bananapi R3")
    Signed-off-by: Frank Wunderlich <frank-w@public-files.de>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20231025170832.78727-3-linux@fw-web.de
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5012eb028032c62f1c68bc0765b46f830a194443
Author: Frank Wunderlich <frank-w@public-files.de>
Date:   Wed Oct 25 19:08:30 2023 +0200

    arm64: dts: mt7986: change cooling trips
    
    commit 1fcda8ceb014aafd56f10b33e0077c93b5dd45d1 upstream.
    
    Add Critical and hot trips for emergency system shutdown and limiting
    system load.
    
    Change passive trip to active to make sure fan is activated on the
    lowest trip.
    
    Cc: stable@vger.kernel.org
    Fixes: 1f5be05132f3 ("arm64: dts: mt7986: add thermal-zones")
    Fixes: c26f779a2295 ("arm64: dts: mt7986: add pwm-fan and cooling-maps to BPI-R3 dts")
    Suggested-by: Daniel Golle <daniel@makrotopia.org>
    Signed-off-by: Frank Wunderlich <frank-w@public-files.de>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20231025170832.78727-4-linux@fw-web.de
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e1e489cdb5bf3ba602f7bb68bbee61265feebad
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 27 16:50:25 2023 +0200

    drm/i915: Skip some timing checks on BXT/GLK DSI transcoders
    
    commit 20c2dbff342aec13bf93c2f6c951da198916a455 upstream.
    
    Apparently some BXT/GLK systems have DSI panels whose timings
    don't agree with the normal cpu transcoder hblank>=32 limitation.
    This is perhaps fine as there are no specific hblank/etc. limits
    listed for the BXT/GLK DSI transcoders.
    
    Move those checks out from the global intel_mode_valid() into
    into connector specific .mode_valid() hooks, skipping BXT/GLK
    DSI connectors. We'll leave the basic [hv]display/[hv]total
    checks in intel_mode_valid() as those seem like sensible upper
    limits regardless of the transcoder used.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/9720
    Fixes: 8f4b1068e7fc ("drm/i915: Check some transcoder timing minimum limits")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231127145028.4899-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit e0ef2daa8ca8ce4dbc2fd0959e383b753a87fd7d)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0396af35ca2010a129dda039fdf71358d5035be
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 27 16:50:27 2023 +0200

    drm/i915/mst: Reject modes that require the bigjoiner
    
    commit dd7eb65c493615fda7d459501c3d4a46e00ea5ba upstream.
    
    We have no bigjoiner support in the MST code, so .mode_valid()
    pretending otherwise is just going to result black screens for
    users. Reject any mode that needs the joiner.
    
    Cc: stable@vger.kernel.org
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: d51f25eb479a ("drm/i915: Add DSC support to MST path")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231127145028.4899-3-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit 9c058492b16f90bb772cb0dad567e8acc68e155d)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 654748c6fc6a403f141d85d71d3d24dd5a2af6fc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 27 16:50:26 2023 +0200

    drm/i915/mst: Fix .mode_valid_ctx() return values
    
    commit 7cf82b25dd91d7f330d9df2de868caca14289ba1 upstream.
    
    .mode_valid_ctx() returns an errno, not the mode status. Fix
    the code to do the right thing.
    
    Cc: stable@vger.kernel.org
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: d51f25eb479a ("drm/i915: Add DSC support to MST path")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231127145028.4899-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit c1799032d2ef6616113b733428dfaa2199a5604b)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02650b3b98cff56d26ec3687b76da4a81c20d187
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Mon Dec 4 09:32:33 2023 +0100

    drm/atomic-helpers: Invoke end_fb_access while owning plane state
    
    commit e0f04e41e8eedd4e5a1275f2318df7e1841855f2 upstream.
    
    Invoke drm_plane_helper_funcs.end_fb_access before
    drm_atomic_helper_commit_hw_done(). The latter function hands over
    ownership of the plane state to the following commit, which might
    free it. Releasing resources in end_fb_access then operates on undefined
    state. This bug has been observed with non-blocking commits when they
    are being queued up quickly.
    
    Here is an example stack trace from the bug report. The plane state has
    been free'd already, so the pages for drm_gem_fb_vunmap() are gone.
    
    Unable to handle kernel paging request at virtual address 0000000100000049
    [...]
     drm_gem_fb_vunmap+0x18/0x74
     drm_gem_end_shadow_fb_access+0x1c/0x2c
     drm_atomic_helper_cleanup_planes+0x58/0xd8
     drm_atomic_helper_commit_tail+0x90/0xa0
     commit_tail+0x15c/0x188
     commit_work+0x14/0x20
    
    Fix this by running end_fb_access immediately after updating all planes
    in drm_atomic_helper_commit_planes(). The existing clean-up helper
    drm_atomic_helper_cleanup_planes() now only handles cleanup_fb.
    
    For aborted commits, roll back from drm_atomic_helper_prepare_planes()
    in the new helper drm_atomic_helper_unprepare_planes(). This case is
    different from regular cleanup, as we have to release the new state;
    regular cleanup releases the old state. The new helper also invokes
    cleanup_fb for all planes.
    
    The changes mostly involve DRM's atomic helpers. Only two drivers, i915
    and nouveau, implement their own commit function. Update them to invoke
    drm_atomic_helper_unprepare_planes(). Drivers with custom commit_tail
    function do not require changes.
    
    v4:
            * fix documentation (kernel test robot)
    v3:
            * add drm_atomic_helper_unprepare_planes() for rolling back
            * use correct state for end_fb_access
    v2:
            * fix test in drm_atomic_helper_cleanup_planes()
    
    Reported-by: Alyssa Ross <hi@alyssa.is>
    Closes: https://lore.kernel.org/dri-devel/87leazm0ya.fsf@alyssa.is/
    Suggested-by: Daniel Vetter <daniel@ffwll.ch>
    Fixes: 94d879eaf7fb ("drm/atomic-helper: Add {begin,end}_fb_access to plane helpers")
    Tested-by: Alyssa Ross <hi@alyssa.is>
    Reviewed-by: Alyssa Ross <hi@alyssa.is>
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Cc: <stable@vger.kernel.org> # v6.2+
    Link: https://patchwork.freedesktop.org/patch/msgid/20231204083247.22006-1-tzimmermann@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ce431c297558e30baa9226243a15d818320742b
Author: David Jeffery <djeffery@redhat.com>
Date:   Tue Nov 28 13:11:39 2023 -0500

    md/raid6: use valid sector values to determine if an I/O should wait on the reshape
    
    commit c467e97f079f0019870c314996fae952cc768e82 upstream.
    
    During a reshape or a RAID6 array such as expanding by adding an additional
    disk, I/Os to the region of the array which have not yet been reshaped can
    stall indefinitely. This is from errors in the stripe_ahead_of_reshape
    function causing md to think the I/O is to a region in the actively
    undergoing the reshape.
    
    stripe_ahead_of_reshape fails to account for the q disk having a sector
    value of 0. By not excluding the q disk from the for loop, raid6 will always
    generate a min_sector value of 0, causing a return value which stalls.
    
    The function's max_sector calculation also uses min() when it should use
    max(), causing the max_sector value to always be 0. During a backwards
    rebuild this can cause the opposite problem where it allows I/O to advance
    when it should wait.
    
    Fixing these errors will allow safe I/O to advance in a timely manner and
    delay only I/O which is unsafe due to stripes in the middle of undergoing
    the reshape.
    
    Fixes: 486f60558607 ("md/raid5: Check all disks in a stripe_head for reshape progress")
    Cc: stable@vger.kernel.org # v6.0+
    Signed-off-by: David Jeffery <djeffery@redhat.com>
    Tested-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Link: https://lore.kernel.org/r/20231128181233.6187-1-djeffery@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa581b37dae993214bd9a06ae64be46cce6b51c2
Author: Lukasz Luba <lukasz.luba@arm.com>
Date:   Fri Dec 1 12:32:05 2023 +0000

    powercap: DTPM: Fix missing cpufreq_cpu_put() calls
    
    commit bdefd9913bdd453991ef756b6f7176e8ad80d786 upstream.
    
    The policy returned by cpufreq_cpu_get() has to be released with
    the help of cpufreq_cpu_put() to balance its kobject reference counter
    properly.
    
    Add the missing calls to cpufreq_cpu_put() in the code.
    
    Fixes: 0aea2e4ec2a2 ("powercap/dtpm_cpu: Reset per_cpu variable in the release function")
    Fixes: 0e8f68d7f048 ("powercap/drivers/dtpm: Add CPU energy model based support")
    Cc: v5.16+ <stable@vger.kernel.org> # v5.16+
    Signed-off-by: Lukasz Luba <lukasz.luba@arm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e5d3096742daef9b33338ab564114c7d15e5c9e
Author: Sumanth Korikkar <sumanthk@linux.ibm.com>
Date:   Mon Nov 20 15:53:53 2023 +0100

    mm/memory_hotplug: fix error handling in add_memory_resource()
    
    commit f42ce5f087eb69e47294ababd2e7e6f88a82d308 upstream.
    
    In add_memory_resource(), creation of memory block devices occurs after
    successful call to arch_add_memory().  However, creation of memory block
    devices could fail.  In that case, arch_remove_memory() is called to
    perform necessary cleanup.
    
    Currently with or without altmap support, arch_remove_memory() is always
    passed with altmap set to NULL during error handling.  This leads to
    freeing of struct pages using free_pages(), eventhough the allocation
    might have been performed with altmap support via
    altmap_alloc_block_buf().
    
    Fix the error handling by passing altmap in arch_remove_memory(). This
    ensures the following:
    * When altmap is disabled, deallocation of the struct pages array occurs
      via free_pages().
    * When altmap is enabled, deallocation occurs via vmem_altmap_free().
    
    Link: https://lkml.kernel.org/r/20231120145354.308999-3-sumanthk@linux.ibm.com
    Fixes: a08a2ae34613 ("mm,memory_hotplug: allocate memmap from the added memory range")
    Signed-off-by: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Alexander Gordeev <agordeev@linux.ibm.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: kernel test robot <lkp@intel.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: <stable@vger.kernel.org>    [5.15+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 799f90c385cd7cb434e8971012231b7dc4c5324c
Author: Hugh Dickins <hughd@google.com>
Date:   Fri Nov 17 00:49:18 2023 -0800

    mm: fix oops when filemap_map_pmd() without prealloc_pte
    
    commit 9aa1345d66b8132745ffb99b348b1492088da9e2 upstream.
    
    syzbot reports oops in lockdep's __lock_acquire(), called from
    __pte_offset_map_lock() called from filemap_map_pages(); or when I run the
    repro, the oops comes in pmd_install(), called from filemap_map_pmd()
    called from filemap_map_pages(), just before the __pte_offset_map_lock().
    
    The problem is that filemap_map_pmd() has been assuming that when it finds
    pmd_none(), a page table has already been prepared in prealloc_pte; and
    indeed do_fault_around() has been careful to preallocate one there, when
    it finds pmd_none(): but what if *pmd became none in between?
    
    My 6.6 mods in mm/khugepaged.c, avoiding mmap_lock for write, have made it
    easy for *pmd to be cleared while servicing a page fault; but even before
    those, a huge *pmd might be zapped while a fault is serviced.
    
    The difference in symptomatic stack traces comes from the "memory model"
    in use: pmd_install() uses pmd_populate() uses page_to_pfn(): in some
    models that is strict, and will oops on the NULL prealloc_pte; in other
    models, it will construct a bogus value to be populated into *pmd, then
    __pte_offset_map_lock() oops when trying to access split ptlock pointer
    (or some other symptom in normal case of ptlock embedded not pointer).
    
    Link: https://lore.kernel.org/linux-mm/20231115065506.19780-1-jose.pekkarinen@foxhound.fi/
    Link: https://lkml.kernel.org/r/6ed0c50c-78ef-0719-b3c5-60c0c010431c@google.com
    Fixes: f9ce0be71d1f ("mm: Cleanup faultaround and finish_fault() codepaths")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reported-and-tested-by: syzbot+89edd67979b52675ddec@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/linux-mm/0000000000005e44550608a0806c@google.com/
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Cc: Jann Horn <jannh@google.com>,
    Cc: José Pekkarinen <jose.pekkarinen@foxhound.fi>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: <stable@vger.kernel.org>    [5.12+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0270ffad4266736ac2d2caa8c9a9ab091292c52
Author: Sumanth Korikkar <sumanthk@linux.ibm.com>
Date:   Mon Nov 20 15:53:52 2023 +0100

    mm/memory_hotplug: add missing mem_hotplug_lock
    
    commit 001002e73712cdf6b8d9a103648cda3040ad7647 upstream.
    
    From Documentation/core-api/memory-hotplug.rst:
    When adding/removing/onlining/offlining memory or adding/removing
    heterogeneous/device memory, we should always hold the mem_hotplug_lock
    in write mode to serialise memory hotplug (e.g. access to global/zone
    variables).
    
    mhp_(de)init_memmap_on_memory() functions can change zone stats and
    struct page content, but they are currently called w/o the
    mem_hotplug_lock.
    
    When memory block is being offlined and when kmemleak goes through each
    populated zone, the following theoretical race conditions could occur:
    CPU 0:                                       | CPU 1:
    memory_offline()                             |
    -> offline_pages()                           |
            -> mem_hotplug_begin()               |
               ...                               |
            -> mem_hotplug_done()                |
                                                 | kmemleak_scan()
                                                 | -> get_online_mems()
                                                 |    ...
    -> mhp_deinit_memmap_on_memory()             |
      [not protected by mem_hotplug_begin/done()]|
      Marks memory section as offline,           |   Retrieves zone_start_pfn
      poisons vmemmap struct pages and updates   |   and struct page members.
      the zone related data                      |
                                                 |    ...
                                                 | -> put_online_mems()
    
    Fix this by ensuring mem_hotplug_lock is taken before performing
    mhp_init_memmap_on_memory().  Also ensure that
    mhp_deinit_memmap_on_memory() holds the lock.
    
    online/offline_pages() are currently only called from
    memory_block_online/offline(), so it is safe to move the locking there.
    
    Link: https://lkml.kernel.org/r/20231120145354.308999-2-sumanthk@linux.ibm.com
    Fixes: a08a2ae34613 ("mm,memory_hotplug: allocate memmap from the added memory range")
    Signed-off-by: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Alexander Gordeev <agordeev@linux.ibm.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: kernel test robot <lkp@intel.com>
    Cc: <stable@vger.kernel.org>    [5.15+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83dd18e0b76fd346fd4753016ec00377bb636837
Author: Baoquan He <bhe@redhat.com>
Date:   Tue Nov 28 13:52:48 2023 +0800

    drivers/base/cpu: crash data showing should depends on KEXEC_CORE
    
    commit 4e9e2e4c65136dfd32dd0afe555961433d1cf906 upstream.
    
    After commit 88a6f8994421 ("crash: memory and CPU hotplug sysfs
    attributes"), on x86_64, if only below kernel configs related to kdump are
    set, compiling error are triggered.
    
    ----
    CONFIG_CRASH_CORE=y
    CONFIG_KEXEC_CORE=y
    CONFIG_CRASH_DUMP=y
    CONFIG_CRASH_HOTPLUG=y
    ------
    
    ------------------------------------------------------
    drivers/base/cpu.c: In function `crash_hotplug_show':
    drivers/base/cpu.c:309:40: error: implicit declaration of function `crash_hotplug_cpu_support'; did you mean `crash_hotplug_show'? [-Werror=implicit-function-declaration]
      309 |         return sysfs_emit(buf, "%d\n", crash_hotplug_cpu_support());
          |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
          |                                        crash_hotplug_show
    cc1: some warnings being treated as errors
    ------------------------------------------------------
    
    CONFIG_KEXEC is used to enable kexec_load interface, the
    crash_notes/crash_notes_size/crash_hotplug showing depends on
    CONFIG_KEXEC is incorrect. It should depend on KEXEC_CORE instead.
    
    Fix it now.
    
    Link: https://lkml.kernel.org/r/20231128055248.659808-1-bhe@redhat.com
    Fixes: 88a6f8994421 ("crash: memory and CPU hotplug sysfs attributes")
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Tested-by: Ignat Korchagin <ignat@cloudflare.com>       [compile-time only]
    Tested-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Reviewed-by: Eric DeVolder <eric_devolder@yahoo.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 512b420aaf7801b5351733f5178eec5af070aa94
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Mon Nov 13 17:20:33 2023 -0800

    hugetlb: fix null-ptr-deref in hugetlb_vma_lock_write
    
    commit 187da0f8250aa94bd96266096aef6f694e0b4cd2 upstream.
    
    The routine __vma_private_lock tests for the existence of a reserve map
    associated with a private hugetlb mapping.  A pointer to the reserve map
    is in vma->vm_private_data.  __vma_private_lock was checking the pointer
    for NULL.  However, it is possible that the low bits of the pointer could
    be used as flags.  In such instances, vm_private_data is not NULL and not
    a valid pointer.  This results in the null-ptr-deref reported by syzbot:
    
    general protection fault, probably for non-canonical address 0xdffffc000000001d:
     0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x00000000000000e8-0x00000000000000ef]
    CPU: 0 PID: 5048 Comm: syz-executor139 Not tainted 6.6.0-rc7-syzkaller-00142-g88
    8cf78c29e2 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 1
    0/09/2023
    RIP: 0010:__lock_acquire+0x109/0x5de0 kernel/locking/lockdep.c:5004
    ...
    Call Trace:
     <TASK>
     lock_acquire kernel/locking/lockdep.c:5753 [inline]
     lock_acquire+0x1ae/0x510 kernel/locking/lockdep.c:5718
     down_write+0x93/0x200 kernel/locking/rwsem.c:1573
     hugetlb_vma_lock_write mm/hugetlb.c:300 [inline]
     hugetlb_vma_lock_write+0xae/0x100 mm/hugetlb.c:291
     __hugetlb_zap_begin+0x1e9/0x2b0 mm/hugetlb.c:5447
     hugetlb_zap_begin include/linux/hugetlb.h:258 [inline]
     unmap_vmas+0x2f4/0x470 mm/memory.c:1733
     exit_mmap+0x1ad/0xa60 mm/mmap.c:3230
     __mmput+0x12a/0x4d0 kernel/fork.c:1349
     mmput+0x62/0x70 kernel/fork.c:1371
     exit_mm kernel/exit.c:567 [inline]
     do_exit+0x9ad/0x2a20 kernel/exit.c:861
     __do_sys_exit kernel/exit.c:991 [inline]
     __se_sys_exit kernel/exit.c:989 [inline]
     __x64_sys_exit+0x42/0x50 kernel/exit.c:989
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Mask off low bit flags before checking for NULL pointer.  In addition, the
    reserve map only 'belongs' to the OWNER (parent in parent/child
    relationships) so also check for the OWNER flag.
    
    Link: https://lkml.kernel.org/r/20231114012033.259600-1-mike.kravetz@oracle.com
    Reported-by: syzbot+6ada951e7c0f7bc8a71e@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/linux-mm/00000000000078d1e00608d7878b@google.com/
    Fixes: bf4916922c60 ("hugetlbfs: extend hugetlb_vma_lock to private VMAs")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Rik van Riel <riel@surriel.com>
    Cc: Edward Adam Davis <eadavis@qq.com>
    Cc: Muchun Song <muchun.song@linux.dev>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Tom Rix <trix@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2c562a7a88b402bfd747b4ddb5ec21b54147de1
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Nov 21 11:39:36 2023 -1000

    workqueue: Make sure that wq_unbound_cpumask is never empty
    
    commit 4a6c5607d4502ccd1b15b57d57f17d12b6f257a7 upstream.
    
    During boot, depending on how the housekeeping and workqueue.unbound_cpus
    masks are set, wq_unbound_cpumask can end up empty. Since 8639ecebc9b1
    ("workqueue: Implement non-strict affinity scope for unbound workqueues"),
    this may end up feeding -1 as a CPU number into scheduler leading to oopses.
    
      BUG: unable to handle page fault for address: ffffffff8305e9c0
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      ...
      Call Trace:
       <TASK>
       select_idle_sibling+0x79/0xaf0
       select_task_rq_fair+0x1cb/0x7b0
       try_to_wake_up+0x29c/0x5c0
       wake_up_process+0x19/0x20
       kick_pool+0x5e/0xb0
       __queue_work+0x119/0x430
       queue_work_on+0x29/0x30
      ...
    
    An empty wq_unbound_cpumask is a clear misconfiguration and already
    disallowed once system is booted up. Let's warn on and ignore
    unbound_cpumask restrictions which lead to no unbound cpus. While at it,
    also remove now unncessary empty check on wq_unbound_cpumask in
    wq_select_unbound_cpu().
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-and-Tested-by: Yong He <alexyonghe@tencent.com>
    Link: http://lkml.kernel.org/r/20231120121623.119780-1-alexyonghe@tencent.com
    Fixes: 8639ecebc9b1 ("workqueue: Implement non-strict affinity scope for unbound workqueues")
    Cc: stable@vger.kernel.org # v6.6+
    Reviewed-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7409c28cab78e843074b2a5071fee97f7f504fca
Author: Francesco Dolcini <francesco.dolcini@toradex.com>
Date:   Tue Nov 28 20:49:35 2023 +0100

    platform/surface: aggregator: fix recv_buf() return value
    
    commit c8820c92caf0770bec976b01fa9e82bb993c5865 upstream.
    
    Serdev recv_buf() callback is supposed to return the amount of bytes
    consumed, therefore an int in between 0 and count.
    
    Do not return negative number in case of issue, when
    ssam_controller_receive_buf() returns ESHUTDOWN just returns 0, e.g. no
    bytes consumed, this keep the exact same behavior as it was before.
    
    This fixes a potential WARN in serdev-ttyport.c:ttyport_receive_buf().
    
    Fixes: c167b9c7e3d6 ("platform/surface: Add Surface Aggregator subsystem")
    Cc: stable@vger.kernel.org
    Signed-off-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Reviewed-by: Maximilian Luz <luzmaximilian@gmail.com>
    Link: https://lore.kernel.org/r/20231128194935.11350-1-francesco@dolcini.it
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78c8fc333253077c5276bc3b4207818d45410acb
Author: Matthias Reichl <hias@horus.com>
Date:   Sun Dec 3 23:22:16 2023 +0100

    regmap: fix bogus error on regcache_sync success
    
    commit fea88064445a59584460f7f67d102b6e5fc1ca1d upstream.
    
    Since commit 0ec7731655de ("regmap: Ensure range selector registers
    are updated after cache sync") opening pcm512x based soundcards fail
    with EINVAL and dmesg shows sync cache and pm_runtime_get errors:
    
    [  228.794676] pcm512x 1-004c: Failed to sync cache: -22
    [  228.794740] pcm512x 1-004c: ASoC: error at snd_soc_pcm_component_pm_runtime_get on pcm512x.1-004c: -22
    
    This is caused by the cache check result leaking out into the
    regcache_sync return value.
    
    Fix this by making the check local-only, as the comment above the
    regcache_read call states a non-zero return value means there's
    nothing to do so the return value should not be altered.
    
    Fixes: 0ec7731655de ("regmap: Ensure range selector registers are updated after cache sync")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthias Reichl <hias@horus.com>
    Link: https://lore.kernel.org/r/20231203222216.96547-1-hias@horus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e04cfdd3edb9b4b2322304b158d27b82f6b4a58
Author: ChunHao Lin <hau@realtek.com>
Date:   Wed Nov 29 23:53:50 2023 +0800

    r8169: fix rtl8125b PAUSE frames blasting when suspended
    
    commit 4b0768b6556af56ee9b7cf4e68452a2b6289ae45 upstream.
    
    When FIFO reaches near full state, device will issue pause frame.
    If pause slot is enabled(set to 1), in this time, device will issue
    pause frame only once. But if pause slot is disabled(set to 0), device
    will keep sending pause frames until FIFO reaches near empty state.
    
    When pause slot is disabled, if there is no one to handle receive
    packets, device FIFO will reach near full state and keep sending
    pause frames. That will impact entire local area network.
    
    This issue can be reproduced in Chromebox (not Chromebook) in
    developer mode running a test image (and v5.10 kernel):
    1) ping -f $CHROMEBOX (from workstation on same local network)
    2) run "powerd_dbus_suspend" from command line on the $CHROMEBOX
    3) ping $ROUTER (wait until ping fails from workstation)
    
    Takes about ~20-30 seconds after step 2 for the local network to
    stop working.
    
    Fix this issue by enabling pause slot to only send pause frame once
    when FIFO reaches near full state.
    
    Fixes: f1bce4ad2f1c ("r8169: add support for RTL8125")
    Reported-by: Grant Grundler <grundler@chromium.org>
    Tested-by: Grant Grundler <grundler@chromium.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: ChunHao Lin <hau@realtek.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/20231129155350.5843-1-hau@realtek.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 865b71579d010c03b5a95ed919b042b433e1582b
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Dec 1 14:10:21 2023 +0100

    packet: Move reference count in packet_sock to atomic_long_t
    
    commit db3fadacaf0c817b222090290d06ca2a338422d0 upstream.
    
    In some potential instances the reference count on struct packet_sock
    could be saturated and cause overflows which gets the kernel a bit
    confused. To prevent this, move to a 64-bit atomic reference count on
    64-bit architectures to prevent the possibility of this type to overflow.
    
    Because we can not handle saturation, using refcount_t is not possible
    in this place. Maybe someday in the future if it changes it could be
    used. Also, instead of using plain atomic64_t, use atomic_long_t instead.
    32-bit machines tend to be memory-limited (i.e. anything that increases
    a reference uses so much memory that you can't actually get to 2**32
    references). 32-bit architectures also tend to have serious problems
    with 64-bit atomics. Hence, atomic_long_t is the more natural solution.
    
    Reported-by: "The UK's National Cyber Security Centre (NCSC)" <security@ncsc.gov.uk>
    Co-developed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: stable@kernel.org
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231201131021.19999-1-daniel@iogearbox.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a89aad0865f0a1a3d20716d0365085065eba713
Author: Hui Zhou <hui.zhou@corigine.com>
Date:   Tue Dec 5 11:26:25 2023 +0200

    nfp: flower: fix for take a mutex lock in soft irq context and rcu lock
    
    commit 0ad722bd9ee3a9bdfca9613148645e4c9b7f26cf upstream.
    
    The neighbour event callback call the function nfp_tun_write_neigh,
    this function will take a mutex lock and it is in soft irq context,
    change the work queue to process the neighbour event.
    
    Move the nfp_tun_write_neigh function out of range rcu_read_lock/unlock()
    in function nfp_tunnel_request_route_v4 and nfp_tunnel_request_route_v6.
    
    Fixes: abc210952af7 ("nfp: flower: tunnel neigh support bond offload")
    CC: stable@vger.kernel.org # 6.2+
    Signed-off-by: Hui Zhou <hui.zhou@corigine.com>
    Signed-off-by: Louis Peens <louis.peens@corigine.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c0adff939a6e1798be92098941c632b85820313
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Dec 1 11:23:22 2023 +0100

    leds: trigger: netdev: fix RTNL handling to prevent potential deadlock
    
    commit fe2b1226656afae56702d1d84c6900f6b67df297 upstream.
    
    When working on LED support for r8169 I got the following lockdep
    warning. Easiest way to prevent this scenario seems to be to take
    the RTNL lock before the trigger_data lock in set_device_name().
    
    ======================================================
    WARNING: possible circular locking dependency detected
    6.7.0-rc2-next-20231124+ #2 Not tainted
    ------------------------------------------------------
    bash/383 is trying to acquire lock:
    ffff888103aa1c68 (&trigger_data->lock){+.+.}-{3:3}, at: netdev_trig_notify+0xec/0x190 [ledtrig_netdev]
    
    but task is already holding lock:
    ffffffff8cddf808 (rtnl_mutex){+.+.}-{3:3}, at: rtnl_lock+0x12/0x20
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (rtnl_mutex){+.+.}-{3:3}:
           __mutex_lock+0x9b/0xb50
           mutex_lock_nested+0x16/0x20
           rtnl_lock+0x12/0x20
           set_device_name+0xa9/0x120 [ledtrig_netdev]
           netdev_trig_activate+0x1a1/0x230 [ledtrig_netdev]
           led_trigger_set+0x172/0x2c0
           led_trigger_write+0xf1/0x140
           sysfs_kf_bin_write+0x5d/0x80
           kernfs_fop_write_iter+0x15d/0x210
           vfs_write+0x1f0/0x510
           ksys_write+0x6c/0xf0
           __x64_sys_write+0x14/0x20
           do_syscall_64+0x3f/0xf0
           entry_SYSCALL_64_after_hwframe+0x6c/0x74
    
    -> #0 (&trigger_data->lock){+.+.}-{3:3}:
           __lock_acquire+0x1459/0x25a0
           lock_acquire+0xc8/0x2d0
           __mutex_lock+0x9b/0xb50
           mutex_lock_nested+0x16/0x20
           netdev_trig_notify+0xec/0x190 [ledtrig_netdev]
           call_netdevice_register_net_notifiers+0x5a/0x100
           register_netdevice_notifier+0x85/0x120
           netdev_trig_activate+0x1d4/0x230 [ledtrig_netdev]
           led_trigger_set+0x172/0x2c0
           led_trigger_write+0xf1/0x140
           sysfs_kf_bin_write+0x5d/0x80
           kernfs_fop_write_iter+0x15d/0x210
           vfs_write+0x1f0/0x510
           ksys_write+0x6c/0xf0
           __x64_sys_write+0x14/0x20
           do_syscall_64+0x3f/0xf0
           entry_SYSCALL_64_after_hwframe+0x6c/0x74
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(rtnl_mutex);
                                   lock(&trigger_data->lock);
                                   lock(rtnl_mutex);
      lock(&trigger_data->lock);
    
     *** DEADLOCK ***
    
    8 locks held by bash/383:
     #0: ffff888103ff33f0 (sb_writers#3){.+.+}-{0:0}, at: ksys_write+0x6c/0xf0
     #1: ffff888103aa1e88 (&of->mutex){+.+.}-{3:3}, at: kernfs_fop_write_iter+0x114/0x210
     #2: ffff8881036f1890 (kn->active#82){.+.+}-{0:0}, at: kernfs_fop_write_iter+0x11d/0x210
     #3: ffff888108e2c358 (&led_cdev->led_access){+.+.}-{3:3}, at: led_trigger_write+0x30/0x140
     #4: ffffffff8cdd9e10 (triggers_list_lock){++++}-{3:3}, at: led_trigger_write+0x75/0x140
     #5: ffff888108e2c270 (&led_cdev->trigger_lock){++++}-{3:3}, at: led_trigger_write+0xe3/0x140
     #6: ffffffff8cdde3d0 (pernet_ops_rwsem){++++}-{3:3}, at: register_netdevice_notifier+0x1c/0x120
     #7: ffffffff8cddf808 (rtnl_mutex){+.+.}-{3:3}, at: rtnl_lock+0x12/0x20
    
    stack backtrace:
    CPU: 0 PID: 383 Comm: bash Not tainted 6.7.0-rc2-next-20231124+ #2
    Hardware name: Default string Default string/Default string, BIOS ADLN.M6.SODIMM.ZB.CY.015 08/08/2023
    Call Trace:
     <TASK>
     dump_stack_lvl+0x5c/0xd0
     dump_stack+0x10/0x20
     print_circular_bug+0x2dd/0x410
     check_noncircular+0x131/0x150
     __lock_acquire+0x1459/0x25a0
     lock_acquire+0xc8/0x2d0
     ? netdev_trig_notify+0xec/0x190 [ledtrig_netdev]
     __mutex_lock+0x9b/0xb50
     ? netdev_trig_notify+0xec/0x190 [ledtrig_netdev]
     ? __this_cpu_preempt_check+0x13/0x20
     ? netdev_trig_notify+0xec/0x190 [ledtrig_netdev]
     ? __cancel_work_timer+0x11c/0x1b0
     ? __mutex_lock+0x123/0xb50
     mutex_lock_nested+0x16/0x20
     ? mutex_lock_nested+0x16/0x20
     netdev_trig_notify+0xec/0x190 [ledtrig_netdev]
     call_netdevice_register_net_notifiers+0x5a/0x100
     register_netdevice_notifier+0x85/0x120
     netdev_trig_activate+0x1d4/0x230 [ledtrig_netdev]
     led_trigger_set+0x172/0x2c0
     ? preempt_count_add+0x49/0xc0
     led_trigger_write+0xf1/0x140
     sysfs_kf_bin_write+0x5d/0x80
     kernfs_fop_write_iter+0x15d/0x210
     vfs_write+0x1f0/0x510
     ksys_write+0x6c/0xf0
     __x64_sys_write+0x14/0x20
     do_syscall_64+0x3f/0xf0
     entry_SYSCALL_64_after_hwframe+0x6c/0x74
    RIP: 0033:0x7f269055d034
    Code: c7 00 16 00 00 00 b8 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 f3 0f 1e fa 80 3d 35 c3 0d 00 00 74 13 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 c3 0f 1f 00 48 83 ec 28 48 89 54 24 18 48
    RSP: 002b:00007ffddb7ef748 EFLAGS: 00000202 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000007 RCX: 00007f269055d034
    RDX: 0000000000000007 RSI: 000055bf5f4af3c0 RDI: 0000000000000001
    RBP: 000055bf5f4af3c0 R08: 0000000000000073 R09: 0000000000000001
    R10: 0000000000000000 R11: 0000000000000202 R12: 0000000000000007
    R13: 00007f26906325c0 R14: 00007f269062ff20 R15: 0000000000000000
     </TASK>
    
    Fixes: d5e01266e7f5 ("leds: trigger: netdev: add additional specific link speed mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Lee Jones <lee@kernel.org>
    Link: https://lore.kernel.org/r/fb5c8294-2a10-4bf5-8f10-3d2b77d2757e@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d97646474b9fdd735756025a8174df3192ac0d4
Author: Petr Pavlu <petr.pavlu@suse.com>
Date:   Tue Dec 5 17:17:36 2023 +0100

    tracing: Fix a possible race when disabling buffered events
    
    commit c0591b1cccf708a47bc465c62436d669a4213323 upstream.
    
    Function trace_buffered_event_disable() is responsible for freeing pages
    backing buffered events and this process can run concurrently with
    trace_event_buffer_lock_reserve().
    
    The following race is currently possible:
    
    * Function trace_buffered_event_disable() is called on CPU 0. It
      increments trace_buffered_event_cnt on each CPU and waits via
      synchronize_rcu() for each user of trace_buffered_event to complete.
    
    * After synchronize_rcu() is finished, function
      trace_buffered_event_disable() has the exclusive access to
      trace_buffered_event. All counters trace_buffered_event_cnt are at 1
      and all pointers trace_buffered_event are still valid.
    
    * At this point, on a different CPU 1, the execution reaches
      trace_event_buffer_lock_reserve(). The function calls
      preempt_disable_notrace() and only now enters an RCU read-side
      critical section. The function proceeds and reads a still valid
      pointer from trace_buffered_event[CPU1] into the local variable
      "entry". However, it doesn't yet read trace_buffered_event_cnt[CPU1]
      which happens later.
    
    * Function trace_buffered_event_disable() continues. It frees
      trace_buffered_event[CPU1] and decrements
      trace_buffered_event_cnt[CPU1] back to 0.
    
    * Function trace_event_buffer_lock_reserve() continues. It reads and
      increments trace_buffered_event_cnt[CPU1] from 0 to 1. This makes it
      believe that it can use the "entry" that it already obtained but the
      pointer is now invalid and any access results in a use-after-free.
    
    Fix the problem by making a second synchronize_rcu() call after all
    trace_buffered_event values are set to NULL. This waits on all potential
    users in trace_event_buffer_lock_reserve() that still read a previous
    pointer from trace_buffered_event.
    
    Link: https://lore.kernel.org/all/20231127151248.7232-2-petr.pavlu@suse.com/
    Link: https://lkml.kernel.org/r/20231205161736.19663-4-petr.pavlu@suse.com
    
    Cc: stable@vger.kernel.org
    Fixes: 0fc1b09ff1ff ("tracing: Use temp buffer when filtering events")
    Signed-off-by: Petr Pavlu <petr.pavlu@suse.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc9fa702dbaad3f178172c80ef2526ead980124f
Author: Petr Pavlu <petr.pavlu@suse.com>
Date:   Tue Dec 5 17:17:34 2023 +0100

    tracing: Fix incomplete locking when disabling buffered events
    
    commit 7fed14f7ac9cf5e38c693836fe4a874720141845 upstream.
    
    The following warning appears when using buffered events:
    
    [  203.556451] WARNING: CPU: 53 PID: 10220 at kernel/trace/ring_buffer.c:3912 ring_buffer_discard_commit+0x2eb/0x420
    [...]
    [  203.670690] CPU: 53 PID: 10220 Comm: stress-ng-sysin Tainted: G            E      6.7.0-rc2-default #4 56e6d0fcf5581e6e51eaaecbdaec2a2338c80f3a
    [  203.670704] Hardware name: Intel Corp. GROVEPORT/GROVEPORT, BIOS GVPRCRB1.86B.0016.D04.1705030402 05/03/2017
    [  203.670709] RIP: 0010:ring_buffer_discard_commit+0x2eb/0x420
    [  203.735721] Code: 4c 8b 4a 50 48 8b 42 48 49 39 c1 0f 84 b3 00 00 00 49 83 e8 01 75 b1 48 8b 42 10 f0 ff 40 08 0f 0b e9 fc fe ff ff f0 ff 47 08 <0f> 0b e9 77 fd ff ff 48 8b 42 10 f0 ff 40 08 0f 0b e9 f5 fe ff ff
    [  203.735734] RSP: 0018:ffffb4ae4f7b7d80 EFLAGS: 00010202
    [  203.735745] RAX: 0000000000000000 RBX: ffffb4ae4f7b7de0 RCX: ffff8ac10662c000
    [  203.735754] RDX: ffff8ac0c750be00 RSI: ffff8ac10662c000 RDI: ffff8ac0c004d400
    [  203.781832] RBP: ffff8ac0c039cea0 R08: 0000000000000000 R09: 0000000000000000
    [  203.781839] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    [  203.781842] R13: ffff8ac10662c000 R14: ffff8ac0c004d400 R15: ffff8ac10662c008
    [  203.781846] FS:  00007f4cd8a67740(0000) GS:ffff8ad798880000(0000) knlGS:0000000000000000
    [  203.781851] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  203.781855] CR2: 0000559766a74028 CR3: 00000001804c4000 CR4: 00000000001506f0
    [  203.781862] Call Trace:
    [  203.781870]  <TASK>
    [  203.851949]  trace_event_buffer_commit+0x1ea/0x250
    [  203.851967]  trace_event_raw_event_sys_enter+0x83/0xe0
    [  203.851983]  syscall_trace_enter.isra.0+0x182/0x1a0
    [  203.851990]  do_syscall_64+0x3a/0xe0
    [  203.852075]  entry_SYSCALL_64_after_hwframe+0x6e/0x76
    [  203.852090] RIP: 0033:0x7f4cd870fa77
    [  203.982920] Code: 00 b8 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 66 90 b8 89 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d e9 43 0e 00 f7 d8 64 89 01 48
    [  203.982932] RSP: 002b:00007fff99717dd8 EFLAGS: 00000246 ORIG_RAX: 0000000000000089
    [  203.982942] RAX: ffffffffffffffda RBX: 0000558ea1d7b6f0 RCX: 00007f4cd870fa77
    [  203.982948] RDX: 0000000000000000 RSI: 00007fff99717de0 RDI: 0000558ea1d7b6f0
    [  203.982957] RBP: 00007fff99717de0 R08: 00007fff997180e0 R09: 00007fff997180e0
    [  203.982962] R10: 00007fff997180e0 R11: 0000000000000246 R12: 00007fff99717f40
    [  204.049239] R13: 00007fff99718590 R14: 0000558e9f2127a8 R15: 00007fff997180b0
    [  204.049256]  </TASK>
    
    For instance, it can be triggered by running these two commands in
    parallel:
    
     $ while true; do
        echo hist:key=id.syscall:val=hitcount > \
          /sys/kernel/debug/tracing/events/raw_syscalls/sys_enter/trigger;
      done
     $ stress-ng --sysinfo $(nproc)
    
    The warning indicates that the current ring_buffer_per_cpu is not in the
    committing state. It happens because the active ring_buffer_event
    doesn't actually come from the ring_buffer_per_cpu but is allocated from
    trace_buffered_event.
    
    The bug is in function trace_buffered_event_disable() where the
    following normally happens:
    
    * The code invokes disable_trace_buffered_event() via
      smp_call_function_many() and follows it by synchronize_rcu(). This
      increments the per-CPU variable trace_buffered_event_cnt on each
      target CPU and grants trace_buffered_event_disable() the exclusive
      access to the per-CPU variable trace_buffered_event.
    
    * Maintenance is performed on trace_buffered_event, all per-CPU event
      buffers get freed.
    
    * The code invokes enable_trace_buffered_event() via
      smp_call_function_many(). This decrements trace_buffered_event_cnt and
      releases the access to trace_buffered_event.
    
    A problem is that smp_call_function_many() runs a given function on all
    target CPUs except on the current one. The following can then occur:
    
    * Task X executing trace_buffered_event_disable() runs on CPU 0.
    
    * The control reaches synchronize_rcu() and the task gets rescheduled on
      another CPU 1.
    
    * The RCU synchronization finishes. At this point,
      trace_buffered_event_disable() has the exclusive access to all
      trace_buffered_event variables except trace_buffered_event[CPU0]
      because trace_buffered_event_cnt[CPU0] is never incremented and if the
      buffer is currently unused, remains set to 0.
    
    * A different task Y is scheduled on CPU 0 and hits a trace event. The
      code in trace_event_buffer_lock_reserve() sees that
      trace_buffered_event_cnt[CPU0] is set to 0 and decides the use the
      buffer provided by trace_buffered_event[CPU0].
    
    * Task X continues its execution in trace_buffered_event_disable(). The
      code incorrectly frees the event buffer pointed by
      trace_buffered_event[CPU0] and resets the variable to NULL.
    
    * Task Y writes event data to the now freed buffer and later detects the
      created inconsistency.
    
    The issue is observable since commit dea499781a11 ("tracing: Fix warning
    in trace_buffered_event_disable()") which moved the call of
    trace_buffered_event_disable() in __ftrace_event_enable_disable()
    earlier, prior to invoking call->class->reg(.. TRACE_REG_UNREGISTER ..).
    The underlying problem in trace_buffered_event_disable() is however
    present since the original implementation in commit 0fc1b09ff1ff
    ("tracing: Use temp buffer when filtering events").
    
    Fix the problem by replacing the two smp_call_function_many() calls with
    on_each_cpu_mask() which invokes a given callback on all CPUs.
    
    Link: https://lore.kernel.org/all/20231127151248.7232-2-petr.pavlu@suse.com/
    Link: https://lkml.kernel.org/r/20231205161736.19663-2-petr.pavlu@suse.com
    
    Cc: stable@vger.kernel.org
    Fixes: 0fc1b09ff1ff ("tracing: Use temp buffer when filtering events")
    Fixes: dea499781a11 ("tracing: Fix warning in trace_buffered_event_disable()")
    Signed-off-by: Petr Pavlu <petr.pavlu@suse.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0486a1f9d9cc166599ba3273d99c324ba8beb346
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 5 16:52:11 2023 -0500

    tracing: Disable snapshot buffer when stopping instance tracers
    
    commit b538bf7d0ec11ca49f536dfda742a5f6db90a798 upstream.
    
    It use to be that only the top level instance had a snapshot buffer (for
    latency tracers like wakeup and irqsoff). When stopping a tracer in an
    instance would not disable the snapshot buffer. This could have some
    unintended consequences if the irqsoff tracer is enabled.
    
    Consolidate the tracing_start/stop() with tracing_start/stop_tr() so that
    all instances behave the same. The tracing_start/stop() functions will
    just call their respective tracing_start/stop_tr() with the global_array
    passed in.
    
    Link: https://lkml.kernel.org/r/20231205220011.041220035@goodmis.org
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: 6d9b3fa5e7f6 ("tracing: Move tracing_max_latency into trace_array")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12c48e88e5c7dff3c26217e7527eaddcf4a5809c
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 5 16:52:10 2023 -0500

    tracing: Stop current tracer when resizing buffer
    
    commit d78ab792705c7be1b91243b2544d1a79406a2ad7 upstream.
    
    When the ring buffer is being resized, it can cause side effects to the
    running tracer. For instance, there's a race with irqsoff tracer that
    swaps individual per cpu buffers between the main buffer and the snapshot
    buffer. The resize operation modifies the main buffer and then the
    snapshot buffer. If a swap happens in between those two operations it will
    break the tracer.
    
    Simply stop the running tracer before resizing the buffers and enable it
    again when finished.
    
    Link: https://lkml.kernel.org/r/20231205220010.748996423@goodmis.org
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: 3928a8a2d9808 ("ftrace: make work with new ring buffer")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1741e17c3939d19ecc568c05d13bcd60c283171d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Dec 5 16:52:09 2023 -0500

    tracing: Always update snapshot buffer size
    
    commit 7be76461f302ec05cbd62b90b2a05c64299ca01f upstream.
    
    It use to be that only the top level instance had a snapshot buffer (for
    latency tracers like wakeup and irqsoff). The update of the ring buffer
    size would check if the instance was the top level and if so, it would
    also update the snapshot buffer as it needs to be the same as the main
    buffer.
    
    Now that lower level instances also has a snapshot buffer, they too need
    to update their snapshot buffer sizes when the main buffer is changed,
    otherwise the following can be triggered:
    
     # cd /sys/kernel/tracing
     # echo 1500 > buffer_size_kb
     # mkdir instances/foo
     # echo irqsoff > instances/foo/current_tracer
     # echo 1000 > instances/foo/buffer_size_kb
    
    Produces:
    
     WARNING: CPU: 2 PID: 856 at kernel/trace/trace.c:1938 update_max_tr_single.part.0+0x27d/0x320
    
    Which is:
    
            ret = ring_buffer_swap_cpu(tr->max_buffer.buffer, tr->array_buffer.buffer, cpu);
    
            if (ret == -EBUSY) {
                    [..]
            }
    
            WARN_ON_ONCE(ret && ret != -EAGAIN && ret != -EBUSY);  <== here
    
    That's because ring_buffer_swap_cpu() has:
    
            int ret = -EINVAL;
    
            [..]
    
            /* At least make sure the two buffers are somewhat the same */
            if (cpu_buffer_a->nr_pages != cpu_buffer_b->nr_pages)
                    goto out;
    
            [..]
     out:
            return ret;
     }
    
    Instead, update all instances' snapshot buffer sizes when their main
    buffer size is updated.
    
    Link: https://lkml.kernel.org/r/20231205220010.454662151@goodmis.org
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: 6d9b3fa5e7f6 ("tracing: Move tracing_max_latency into trace_array")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8f32f912603f79b3784de07ab5438f31440068e
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Mon Nov 20 19:37:17 2023 +0100

    checkstack: fix printed address
    
    commit ee34db3f271cea4d4252048617919c2caafe698b upstream.
    
    All addresses printed by checkstack have an extra incorrect 0 appended at
    the end.
    
    This was introduced with commit 677f1410e058 ("scripts/checkstack.pl: don't
    display $dre as different entity"): since then the address is taken from
    the line which contains the function name, instead of the line which
    contains stack consumption. E.g. on s390:
    
    0000000000100a30 <do_one_initcall>:
    ...
      100a44:       e3 f0 ff 70 ff 71       lay     %r15,-144(%r15)
    
    So the used regex which matches spaces and hexadecimal numbers to extract
    an address now matches a different substring. Subsequently replacing spaces
    with 0 appends a zero at the and, instead of replacing leading spaces.
    
    Fix this by using the proper regex, and simplify the code a bit.
    
    Link: https://lkml.kernel.org/r/20231120183719.2188479-2-hca@linux.ibm.com
    Fixes: 677f1410e058 ("scripts/checkstack.pl: don't display $dre as different entity")
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Cc: Maninder Singh <maninder1.s@samsung.com>
    Cc: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Vaneet Narang <v.narang@samsung.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ec2d9267304af3057d1c9302ddfa7a8c7fb8799
Author: Tim Van Patten <timvp@google.com>
Date:   Wed Nov 15 09:20:43 2023 -0700

    cgroup_freezer: cgroup_freezing: Check if not frozen
    
    commit cff5f49d433fcd0063c8be7dd08fa5bf190c6c37 upstream.
    
    __thaw_task() was recently updated to warn if the task being thawed was
    part of a freezer cgroup that is still currently freezing:
    
            void __thaw_task(struct task_struct *p)
            {
            ...
                    if (WARN_ON_ONCE(freezing(p)))
                            goto unlock;
    
    This has exposed a bug in cgroup1 freezing where when CGROUP_FROZEN is
    asserted, the CGROUP_FREEZING bits are not also cleared at the same
    time. Meaning, when a cgroup is marked FROZEN it continues to be marked
    FREEZING as well. This causes the WARNING to trigger, because
    cgroup_freezing() thinks the cgroup is still freezing.
    
    There are two ways to fix this:
    
    1. Whenever FROZEN is set, clear FREEZING for the cgroup and all
    children cgroups.
    2. Update cgroup_freezing() to also verify that FROZEN is not set.
    
    This patch implements option (2), since it's smaller and more
    straightforward.
    
    Signed-off-by: Tim Van Patten <timvp@google.com>
    Tested-by: Mark Hasemeyer <markhas@chromium.org>
    Fixes: f5d39b020809 ("freezer,sched: Rewrite core freezer logic")
    Cc: stable@vger.kernel.org # v6.1+
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39f603a262869fac18fc2445796dd7043ec77625
Author: Ming Lei <ming.lei@redhat.com>
Date:   Mon Nov 20 16:35:59 2023 +0800

    lib/group_cpus.c: avoid acquiring cpu hotplug lock in group_cpus_evenly
    
    commit 0263f92fadbb9d294d5971ac57743f882c93b2b3 upstream.
    
    group_cpus_evenly() could be part of storage driver's error handler, such
    as nvme driver, when may happen during CPU hotplug, in which storage queue
    has to drain its pending IOs because all CPUs associated with the queue
    are offline and the queue is becoming inactive.  And handling IO needs
    error handler to provide forward progress.
    
    Then deadlock is caused:
    
    1) inside CPU hotplug handler, CPU hotplug lock is held, and blk-mq's
       handler is waiting for inflight IO
    
    2) error handler is waiting for CPU hotplug lock
    
    3) inflight IO can't be completed in blk-mq's CPU hotplug handler
       because error handling can't provide forward progress.
    
    Solve the deadlock by not holding CPU hotplug lock in group_cpus_evenly(),
    in which two stage spreads are taken: 1) the 1st stage is over all present
    CPUs; 2) the end stage is over all other CPUs.
    
    Turns out the two stage spread just needs consistent 'cpu_present_mask',
    and remove the CPU hotplug lock by storing it into one local cache.  This
    way doesn't change correctness, because all CPUs are still covered.
    
    Link: https://lkml.kernel.org/r/20231120083559.285174-1-ming.lei@redhat.com
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Reported-by: Yi Zhang <yi.zhang@redhat.com>
    Reported-by: Guangwu Zhang <guazhang@redhat.com>
    Tested-by: Guangwu Zhang <guazhang@redhat.com>
    Reviewed-by: Chengming Zhou <zhouchengming@bytedance.com>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Cc: Keith Busch <kbusch@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b14276bcb857d321c6069523fe4d3c05efa4886
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Tue Dec 5 17:59:47 2023 +0900

    nilfs2: prevent WARNING in nilfs_sufile_set_segment_usage()
    
    commit 675abf8df1353e0e3bde314993e0796c524cfbf0 upstream.
    
    If nilfs2 reads a disk image with corrupted segment usage metadata, and
    its segment usage information is marked as an error for the segment at the
    write location, nilfs_sufile_set_segment_usage() can trigger WARN_ONs
    during log writing.
    
    Segments newly allocated for writing with nilfs_sufile_alloc() will not
    have this error flag set, but this unexpected situation will occur if the
    segment indexed by either nilfs->ns_segnum or nilfs->ns_nextnum (active
    segment) was marked in error.
    
    Fix this issue by inserting a sanity check to treat it as a file system
    corruption.
    
    Since error returns are not allowed during the execution phase where
    nilfs_sufile_set_segment_usage() is used, this inserts the sanity check
    into nilfs_sufile_mark_dirty() which pre-reads the buffer containing the
    segment usage record to be updated and sets it up in a dirty state for
    writing.
    
    In addition, nilfs_sufile_set_segment_usage() is also called when
    canceling log writing and undoing segment usage update, so in order to
    avoid issuing the same kernel warning in that case, in case of
    cancellation, avoid checking the error flag in
    nilfs_sufile_set_segment_usage().
    
    Link: https://lkml.kernel.org/r/20231205085947.4431-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+14e9f834f6ddecece094@syzkaller.appspotmail.com
    Closes: https://syzkaller.appspot.com/bug?extid=14e9f834f6ddecece094
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce58f14113a8d494fbac92a9faf544da215226cf
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Wed Nov 29 23:15:47 2023 +0900

    nilfs2: fix missing error check for sb_set_blocksize call
    
    commit d61d0ab573649789bf9eb909c89a1a193b2e3d10 upstream.
    
    When mounting a filesystem image with a block size larger than the page
    size, nilfs2 repeatedly outputs long error messages with stack traces to
    the kernel log, such as the following:
    
     getblk(): invalid block size 8192 requested
     logical block size: 512
     ...
     Call Trace:
      dump_stack_lvl+0x92/0xd4
      dump_stack+0xd/0x10
      bdev_getblk+0x33a/0x354
      __breadahead+0x11/0x80
      nilfs_search_super_root+0xe2/0x704 [nilfs2]
      load_nilfs+0x72/0x504 [nilfs2]
      nilfs_mount+0x30f/0x518 [nilfs2]
      legacy_get_tree+0x1b/0x40
      vfs_get_tree+0x18/0xc4
      path_mount+0x786/0xa88
      __ia32_sys_mount+0x147/0x1a8
      __do_fast_syscall_32+0x56/0xc8
      do_fast_syscall_32+0x29/0x58
      do_SYSENTER_32+0x15/0x18
      entry_SYSENTER_32+0x98/0xf1
     ...
    
    This overloads the system logger.  And to make matters worse, it sometimes
    crashes the kernel with a memory access violation.
    
    This is because the return value of the sb_set_blocksize() call, which
    should be checked for errors, is not checked.
    
    The latter issue is due to out-of-buffer memory being accessed based on a
    large block size that caused sb_set_blocksize() to fail for buffers read
    with the initial minimum block size that remained unupdated in the
    super_block structure.
    
    Since nilfs2 mkfs tool does not accept block sizes larger than the system
    page size, this has been overlooked.  However, it is possible to create
    this situation by intentionally modifying the tool or by passing a
    filesystem image created on a system with a large page size to a system
    with a smaller page size and mounting it.
    
    Fix this issue by inserting the expected error handling for the call to
    sb_set_blocksize().
    
    Link: https://lkml.kernel.org/r/20231129141547.4726-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cdc934c82bbd45cf81a9ce58704fa23156f8ff3
Author: Su Hui <suhui@nfschina.com>
Date:   Thu Nov 30 11:40:18 2023 +0800

    highmem: fix a memory copy problem in memcpy_from_folio
    
    commit 73424d00dc63ba681856e06cfb0a5abbdb62e2b5 upstream.
    
    Clang static checker complains that value stored to 'from' is never read.
    And memcpy_from_folio() only copy the last chunk memory from folio to
    destination.  Use 'to += chunk' to replace 'from += chunk' to fix this
    typo problem.
    
    Link: https://lkml.kernel.org/r/20231130034017.1210429-1-suhui@nfschina.com
    Fixes: b23d03ef7af5 ("highmem: add memcpy_to_folio() and memcpy_from_folio()")
    Signed-off-by: Su Hui <suhui@nfschina.com>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jiaqi Yan <jiaqiyan@google.com>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peter Collingbourne <pcc@google.com>
    Cc: Tom Rix <trix@redhat.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56a334310fa9dabf466ac74a59adc65ef018e10d
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Dec 6 10:02:44 2023 -0500

    ring-buffer: Force absolute timestamp on discard of event
    
    commit b2dd797543cfa6580eac8408dd67fa02164d9e56 upstream.
    
    There's a race where if an event is discarded from the ring buffer and an
    interrupt were to happen at that time and insert an event, the time stamp
    is still used from the discarded event as an offset. This can screw up the
    timings.
    
    If the event is going to be discarded, set the "before_stamp" to zero.
    When a new event comes in, it compares the "before_stamp" with the
    "write_stamp" and if they are not equal, it will insert an absolute
    timestamp. This will prevent the timings from getting out of sync due to
    the discarded event.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231206100244.5130f9b3@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: 6f6be606e763f ("ring-buffer: Force before_stamp and write_stamp to be different on discard")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d251b9818302b01d2ee5201084d8bd59f090becb
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Dec 6 10:00:50 2023 -0500

    ring-buffer: Test last update in 32bit version of __rb_time_read()
    
    commit f458a1453424e03462b5bb539673c9a3cddda480 upstream.
    
    Since 64 bit cmpxchg() is very expensive on 32bit architectures, the
    timestamp used by the ring buffer does some interesting tricks to be able
    to still have an atomic 64 bit number. It originally just used 60 bits and
    broke it up into two 32 bit words where the extra 2 bits were used for
    synchronization. But this was not enough for all use cases, and all 64
    bits were required.
    
    The 32bit version of the ring buffer timestamp was then broken up into 3
    32bit words using the same counter trick. But one update was not done. The
    check to see if the read operation was done without interruption only
    checked the first two words and not last one (like it had before this
    update). Fix it by making sure all three updates happen without
    interruption by comparing the initial counter with the last updated
    counter.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231206100050.3100b7bb@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Fixes: f03f2abce4f39 ("ring-buffer: Have 32 bit time stamps use all 64 bits")
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73249ef76c2d759bdbb466dc6ed9822233ae8c9e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Dec 7 19:20:35 2023 +0100

    ALSA: hda/realtek: Add quirk for Lenovo Yoga Pro 7
    
    commit 634e5e1e06f5cdd614a1bc429ecb243a51cc009d upstream.
    
    Lenovo Yoga Pro 7 14APH8 (PCI SSID 17aa:3882) seems requiring the
    similar workaround like Yoga 9 model for the bass speaker.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/CAGGk=CRRQ1L9p771HsXTN_ebZP41Qj+3gw35Gezurn+nokRewg@mail.gmail.com
    Link: https://lore.kernel.org/r/20231207182035.30248-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f1c1e8de568d0f4eb5ed3d3712c28476ca32788
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Dec 6 13:39:27 2023 -0600

    ALSA: hda/realtek: Add Framework laptop 16 to quirks
    
    commit 8804fa04a492f4176ea407390052292912227820 upstream.
    
    The Framework 16" laptop has the same controller as other Framework
    models.  Apply the presence detection quirk.
    
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231206193927.2996-1-mario.limonciello@amd.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70a6885542b12c1293974f6862b86dce21f6d242
Author: Tim Bosse <flinn@timbos.se>
Date:   Wed Dec 6 09:26:29 2023 -0500

    ALSA: hda/realtek: add new Framework laptop to quirks
    
    commit 33038efb64f7576bac635164021f5c984d4c755f upstream.
    
    The Framework Laptop 13 (AMD Ryzen 7040Series) has an ALC295 with
    a disconnected or faulty headset mic presence detect similar to the
    previous models.  It works with the same quirk chain as
    309d7363ca3d9fcdb92ff2d958be14d7e8707f68.  This model has a VID:PID
    of f111:0006.
    
    Signed-off-by: Tim Bosse <flinn@timbos.se>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231206142629.388615-1-flinn@timbos.se
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65a7a5b2d53164183da9c7631729a376ebe7a56f
Author: Bin Li <bin.li@canonical.com>
Date:   Mon Dec 4 18:04:50 2023 +0800

    ALSA: hda/realtek: Enable headset on Lenovo M90 Gen5
    
    commit 6f7e4664e597440dfbdb8b2931c561b717030d07 upstream.
    
    Lenovo M90 Gen5 is equipped with ALC897, and it needs
    ALC897_FIXUP_HEADSET_MIC_PIN quirk to make its headset mic work.
    
    Signed-off-by: Bin Li <bin.li@canonical.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231204100450.642783-1-bin.li@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3f1d9230457db71509d657ceb090fc9aa168b95
Author: Aleksandrs Vinarskis <alex.vinarskis@gmail.com>
Date:   Mon Dec 4 00:30:06 2023 +0100

    ALSA: hda/realtek: fix speakers on XPS 9530 (2023)
    
    commit cd14dedf15be432066e63783c63d650f2800cd48 upstream.
    
    XPS 9530 has 2 tweeters and 2 subwoofers powered by CS35L41 amplifier, SPI
    connected. For subwoofers to work, it requires both to enable amplifier
    support, and to enable output to subwoofers via 0x17 quirk (similalry to
    XPS 9510/9520).
    
    Signed-off-by: Aleksandrs Vinarskis <alex.vinarskis@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231203233006.100558-1-alex.vinarskis@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e25980d046f3c7e6134bb9aa69a7152fce176e3
Author: Pascal Noël <pascal@pascalcompiles.com>
Date:   Fri Dec 1 17:37:44 2023 -0800

    ALSA: hda/realtek: Apply quirk for ASUS UM3504DA
    
    commit c5c325bb5849868d76969d3fe014515f5e99eabc upstream.
    
    The ASUS UM3504DA uses a Realtek HDA codec and two CS35L41 amplifiers via I2C.
    Apply existing quirk to model.
    
    Signed-off-by: Pascal Noël <pascal@pascalcompiles.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231202013744.12369-1-pascal@pascalcompiles.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e6ac8c6bae1b5e9c40ccd6a5abd23d47c8c5a54
Author: Jason Zhang <jason.zhang@rock-chips.com>
Date:   Wed Dec 6 09:31:39 2023 +0800

    ALSA: pcm: fix out-of-bounds in snd_pcm_state_names
    
    commit 2b3a7a302c9804e463f2ea5b54dc3a6ad106a344 upstream.
    
    The pcm state can be SNDRV_PCM_STATE_DISCONNECTED at disconnect
    callback, and there is not an entry of SNDRV_PCM_STATE_DISCONNECTED
    in snd_pcm_state_names.
    
    This patch adds the missing entry to resolve this issue.
    
    cat /proc/asound/card2/pcm0p/sub0/status
    That results in stack traces like the following:
    
    [   99.702732][ T5171] Unexpected kernel BRK exception at EL1
    [   99.702774][ T5171] Internal error: BRK handler: f2005512 [#1] PREEMPT SMP
    [   99.703858][ T5171] Modules linked in: bcmdhd(E) (...)
    [   99.747425][ T5171] CPU: 3 PID: 5171 Comm: cat Tainted: G         C OE     5.10.189-android13-4-00003-g4a17384380d8-ab11086999 #1
    [   99.748447][ T5171] Hardware name: Rockchip RK3588 CVTE V10 Board (DT)
    [   99.749024][ T5171] pstate: 60400005 (nZCv daif +PAN -UAO -TCO BTYPE=--)
    [   99.749616][ T5171] pc : snd_pcm_substream_proc_status_read+0x264/0x2bc
    [   99.750204][ T5171] lr : snd_pcm_substream_proc_status_read+0xa4/0x2bc
    [   99.750778][ T5171] sp : ffffffc0175abae0
    [   99.751132][ T5171] x29: ffffffc0175abb80 x28: ffffffc009a2c498
    [   99.751665][ T5171] x27: 0000000000000001 x26: ffffff810cbae6e8
    [   99.752199][ T5171] x25: 0000000000400cc0 x24: ffffffc0175abc60
    [   99.752729][ T5171] x23: 0000000000000000 x22: ffffff802f558400
    [   99.753263][ T5171] x21: ffffff81d8d8ff00 x20: ffffff81020cdc00
    [   99.753795][ T5171] x19: ffffff802d110000 x18: ffffffc014fbd058
    [   99.754326][ T5171] x17: 0000000000000000 x16: 0000000000000000
    [   99.754861][ T5171] x15: 000000000000c276 x14: ffffffff9a976fda
    [   99.755392][ T5171] x13: 0000000065689089 x12: 000000000000d72e
    [   99.755923][ T5171] x11: ffffff802d110000 x10: 00000000000000e0
    [   99.756457][ T5171] x9 : 9c431600c8385d00 x8 : 0000000000000008
    [   99.756990][ T5171] x7 : 0000000000000000 x6 : 000000000000003f
    [   99.757522][ T5171] x5 : 0000000000000040 x4 : ffffffc0175abb70
    [   99.758056][ T5171] x3 : 0000000000000001 x2 : 0000000000000001
    [   99.758588][ T5171] x1 : 0000000000000000 x0 : 0000000000000000
    [   99.759123][ T5171] Call trace:
    [   99.759404][ T5171]  snd_pcm_substream_proc_status_read+0x264/0x2bc
    [   99.759958][ T5171]  snd_info_seq_show+0x54/0xa4
    [   99.760370][ T5171]  seq_read_iter+0x19c/0x7d4
    [   99.760770][ T5171]  seq_read+0xf0/0x128
    [   99.761117][ T5171]  proc_reg_read+0x100/0x1f8
    [   99.761515][ T5171]  vfs_read+0xf4/0x354
    [   99.761869][ T5171]  ksys_read+0x7c/0x148
    [   99.762226][ T5171]  __arm64_sys_read+0x20/0x30
    [   99.762625][ T5171]  el0_svc_common+0xd0/0x1e4
    [   99.763023][ T5171]  el0_svc+0x28/0x98
    [   99.763358][ T5171]  el0_sync_handler+0x8c/0xf0
    [   99.763759][ T5171]  el0_sync+0x1b8/0x1c0
    [   99.764118][ T5171] Code: d65f03c0 b9406102 17ffffae 94191565 (d42aa240)
    [   99.764715][ T5171] ---[ end trace 1eeffa3e17c58e10 ]---
    [   99.780720][ T5171] Kernel panic - not syncing: BRK handler: Fatal exception
    
    Signed-off-by: Jason Zhang <jason.zhang@rock-chips.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231206013139.20506-1-jason.zhang@rock-chips.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ae225bbf3581dd07f8a3198836ccd84aa948db1
Author: Sarah Grant <s@srd.tw>
Date:   Fri Dec 1 18:16:54 2023 +0000

    ALSA: usb-audio: Add Pioneer DJM-450 mixer controls
    
    commit bbb8e71965c3737bdc691afd803a34bfd61cfbeb upstream.
    
    These values mirror those of the Pioneer DJM-250MK2 as the channel layout
    appears identical based on my observations. This duplication could be removed in
    later contributions if desired.
    
    Signed-off-by: Sarah Grant <s@srd.tw>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20231201181654.5058-1-s@srd.tw
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30df2901c4aca373c1a5e38f2b59bb5a1bd38674
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Sun Dec 3 15:37:53 2023 +0000

    io_uring: fix mutex_unlock with unreferenced ctx
    
    commit f7b32e785042d2357c5abc23ca6db1b92c91a070 upstream.
    
    Callers of mutex_unlock() have to make sure that the mutex stays alive
    for the whole duration of the function call. For io_uring that means
    that the following pattern is not valid unless we ensure that the
    context outlives the mutex_unlock() call.
    
    mutex_lock(&ctx->uring_lock);
    req_put(req); // typically via io_req_task_submit()
    mutex_unlock(&ctx->uring_lock);
    
    Most contexts are fine: io-wq pins requests, syscalls hold the file,
    task works are taking ctx references and so on. However, the task work
    fallback path doesn't follow the rule.
    
    Cc:  <stable@vger.kernel.org>
    Fixes: 04fc6c802d ("io_uring: save ctx put/get for task_work submit")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/io-uring/CAG48ez3xSoYb+45f1RLtktROJrpiDQ1otNvdR+YLQf7m+Krj5Q@mail.gmail.com/
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd864f6ee04e82667bce667ef896a4f25a59db07
Author: Georg Gottleuber <ggo@tuxedocomputers.com>
Date:   Wed Sep 20 10:52:10 2023 +0200

    nvme-pci: Add sleep quirk for Kingston drives
    
    commit 107b4e063d78c300b21e2d5291b1aa94c514ea5b upstream.
    
    Some Kingston NV1 and A2000 are wasting a lot of power on specific TUXEDO
    platforms in s2idle sleep if 'Simple Suspend' is used.
    
    This patch applies a new quirk 'Force No Simple Suspend' to achieve a
    low power sleep without 'Simple Suspend'.
    
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Signed-off-by: Georg Gottleuber <ggo@tuxedocomputers.com>
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a33d385eb36991a91e3dddb189d8679e2aac2be
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Dec 6 13:26:47 2023 +0000

    io_uring/af_unix: disable sending io_uring over sockets
    
    commit 705318a99a138c29a512a72c3e0043b3cd7f55f4 upstream.
    
    File reference cycles have caused lots of problems for io_uring
    in the past, and it still doesn't work exactly right and races with
    unix_stream_read_generic(). The safest fix would be to completely
    disallow sending io_uring files via sockets via SCM_RIGHT, so there
    are no possible cycles invloving registered files and thus rendering
    SCM accounting on the io_uring side unnecessary.
    
    Cc:  <stable@vger.kernel.org>
    Fixes: 0091bfc81741b ("io_uring/af_unix: defer registered files gc to io_uring release")
    Reported-and-suggested-by: Jann Horn <jannh@google.com>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Link: https://lore.kernel.org/r/c716c88321939156909cfa1bd8b0faaf1c804103.1701868795.git.asml.silence@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 127fcf79662d217ddbd2bc53de261ec0c7eb1bbb
Author: Malcolm Hart <malcolm@5harts.com>
Date:   Mon Nov 27 20:36:00 2023 +0000

    ASoC: amd: yc: Fix non-functional mic on ASUS E1504FA
    
    commit b24e3590c94ab0aba6e455996b502a83baa5c31c upstream.
    
    This patch adds ASUSTeK COMPUTER INC  "E1504FA" to the quirks file acp6x-mach.c
    to enable microphone array on ASUS Vivobook GO 15.
    I have this laptop and can confirm that the patch succeeds in enabling the
    microphone array.
    
    Signed-off-by: Malcolm Hart <malcolm@5harts.com>
    Cc: stable@vger.kernel.org
    Rule: add
    Link: https://lore.kernel.org/stable/875y1nt1bx.fsf%405harts.com
    Link: https://lore.kernel.org/r/871qcbszh0.fsf@5harts.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29b9ebc89106dbb6ffd0004b9a50f21874a540af
Author: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Date:   Fri Dec 1 14:53:56 2023 +0900

    rethook: Use __rcu pointer for rethook::handler
    
    commit a1461f1fd6cfdc4b8917c9d4a91e92605d1f28dc upstream.
    
    Since the rethook::handler is an RCU-maganged pointer so that it will
    notice readers the rethook is stopped (unregistered) or not, it should
    be an __rcu pointer and use appropriate functions to be accessed. This
    will use appropriate memory barrier when accessing it. OTOH,
    rethook::data is never changed, so we don't need to check it in
    get_kretprobe().
    
    NOTE: To avoid sparse warning, rethook::handler is defined by a raw
    function pointer type with __rcu instead of rethook_handler_t.
    
    Link: https://lore.kernel.org/all/170126066201.398836.837498688669005979.stgit@devnote2/
    
    Fixes: 54ecbe6f1ed5 ("rethook: Add a generic return hook")
    Cc: stable@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202311241808.rv9ceuAh-lkp@intel.com/
    Tested-by: JP Kobryn <inwardvessel@gmail.com>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af448bb2eaba0d069f66b069a15440fcd36a21ca
Author: Florian Fainelli <florian.fainelli@broadcom.com>
Date:   Wed Nov 29 20:33:16 2023 -0800

    scripts/gdb: fix lx-device-list-bus and lx-device-list-class
    
    [ Upstream commit 801a2b1b49f4dcf06703130922806e9c639c2ca8 ]
    
    After the conversion to bus_to_subsys() and class_to_subsys(), the gdb
    scripts listing the system buses and classes respectively was broken, fix
    those by returning the subsys_priv pointer and have the various caller
    de-reference either the 'bus' or 'class' structure members accordingly.
    
    Link: https://lkml.kernel.org/r/20231130043317.174188-1-florian.fainelli@broadcom.com
    Fixes: 7b884b7f24b4 ("driver core: class.c: convert to only use class_to_subsys")
    Signed-off-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Kuan-Ying Lee <Kuan-Ying.Lee@mediatek.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jan Kiszka <jan.kiszka@siemens.com>
    Cc: Kieran Bingham <kbingham@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d16a9f778f7af55d8c488c7ad8e58c2577016fd
Author: Baoquan He <bhe@redhat.com>
Date:   Tue Nov 28 13:44:57 2023 +0800

    kernel/Kconfig.kexec: drop select of KEXEC for CRASH_DUMP
    
    [ Upstream commit dccf78d39f1069a5ddf4328bf0c97aa5f2f4296e ]
    
    Ignat Korchagin complained that a potential config regression was
    introduced by commit 89cde455915f ("kexec: consolidate kexec and crash
    options into kernel/Kconfig.kexec").  Before the commit, CONFIG_CRASH_DUMP
    has no dependency on CONFIG_KEXEC.  After the commit, CRASH_DUMP selects
    KEXEC.  That enforces system to have CONFIG_KEXEC=y as long as
    CONFIG_CRASH_DUMP=Y which people may not want.
    
    In Ignat's case, he sets CONFIG_CRASH_DUMP=y, CONFIG_KEXEC_FILE=y and
    CONFIG_KEXEC=n because kexec_load interface could have security issue if
    kernel/initrd has no chance to be signed and verified.
    
    CRASH_DUMP has select of KEXEC because Eric, author of above commit, met a
    LKP report of build failure when posting patch of earlier version.  Please
    see below link to get detail of the LKP report:
    
        https://lore.kernel.org/all/3e8eecd1-a277-2cfb-690e-5de2eb7b988e@oracle.com/T/#u
    
    In fact, that LKP report is triggered because arm's <asm/kexec.h> is
    wrapped in CONFIG_KEXEC ifdeffery scope.  That is wrong.  CONFIG_KEXEC
    controls the enabling/disabling of kexec_load interface, but not kexec
    feature.  Removing the wrongly added CONFIG_KEXEC ifdeffery scope in
    <asm/kexec.h> of arm allows us to drop the select KEXEC for CRASH_DUMP.
    Meanwhile, change arch/arm/kernel/Makefile to let machine_kexec.o
    relocate_kernel.o depend on KEXEC_CORE.
    
    Link: https://lkml.kernel.org/r/20231128054457.659452-1-bhe@redhat.com
    Fixes: 89cde455915f ("kexec: consolidate kexec and crash options into kernel/Kconfig.kexec")
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Reported-by: Ignat Korchagin <ignat@cloudflare.com>
    Tested-by: Ignat Korchagin <ignat@cloudflare.com>       [compile-time only]
    Tested-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Reviewed-by: Eric DeVolder <eric_devolder@yahoo.com>
    Tested-by: Eric DeVolder <eric_devolder@yahoo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49b79af00d24e5b27049725aa3bc11f4175c3c2c
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Dec 5 17:42:14 2023 +0800

    md: don't leave 'MD_RECOVERY_FROZEN' in error path of md_set_readonly()
    
    [ Upstream commit c9f7cb5b2bc968adcdc686c197ed108f47fd8eb0 ]
    
    If md_set_readonly() failed, the array could still be read-write, however
    'MD_RECOVERY_FROZEN' could still be set, which leave the array in an
    abnormal state that sync or recovery can't continue anymore.
    Hence make sure the flag is cleared after md_set_readonly() returns.
    
    Fixes: 88724bfa68be ("md: wait for pending superblock updates before switching to read-only")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Acked-by: Xiao Ni <xni@redhat.com>
    Signed-off-by: Song Liu <song@kernel.org>
    Link: https://lore.kernel.org/r/20231205094215.1824240-3-yukuai1@huaweicloud.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7442310ee4f0ecdc0a4187bd6adf034547f5ac75
Author: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
Date:   Thu Nov 30 21:26:47 2023 +0000

    riscv: errata: andes: Probe for IOCP only once in boot stage
    
    [ Upstream commit ed5b7cfd7839f9280a63365c1133482b42d0981f ]
    
    We need to probe for IOCP only once during boot stage, as we were probing
    for IOCP for all the stages this caused the below issue during module-init
    stage,
    
    [9.019104] Unable to handle kernel paging request at virtual address ffffffff8100d3a0
    [9.027153] Oops [#1]
    [9.029421] Modules linked in: rcar_canfd renesas_usbhs i2c_riic can_dev spi_rspi i2c_core
    [9.037686] CPU: 0 PID: 90 Comm: udevd Not tainted 6.7.0-rc1+ #57
    [9.043756] Hardware name: Renesas SMARC EVK based on r9a07g043f01 (DT)
    [9.050339] epc : riscv_noncoherent_supported+0x10/0x3e
    [9.055558]  ra : andes_errata_patch_func+0x4a/0x52
    [9.060418] epc : ffffffff8000d8c2 ra : ffffffff8000d95c sp : ffffffc8003abb00
    [9.067607]  gp : ffffffff814e25a0 tp : ffffffd80361e540 t0 : 0000000000000000
    [9.074795]  t1 : 000000000900031e t2 : 0000000000000001 s0 : ffffffc8003abb20
    [9.081984]  s1 : ffffffff015b57c7 a0 : 0000000000000000 a1 : 0000000000000001
    [9.089172]  a2 : 0000000000000000 a3 : 0000000000000000 a4 : ffffffff8100d8be
    [9.096360]  a5 : 0000000000000001 a6 : 0000000000000001 a7 : 000000000900031e
    [9.103548]  s2 : ffffffff015b57d7 s3 : 0000000000000001 s4 : 000000000000031e
    [9.110736]  s5 : 8000000000008a45 s6 : 0000000000000500 s7 : 000000000000003f
    [9.117924]  s8 : ffffffc8003abd48 s9 : ffffffff015b1140 s10: ffffffff8151a1b0
    [9.125113]  s11: ffffffff015b1000 t3 : 0000000000000001 t4 : fefefefefefefeff
    [9.132301]  t5 : ffffffff015b57c7 t6 : ffffffd8b63a6000
    [9.137587] status: 0000000200000120 badaddr: ffffffff8100d3a0 cause: 000000000000000f
    [9.145468] [<ffffffff8000d8c2>] riscv_noncoherent_supported+0x10/0x3e
    [9.151972] [<ffffffff800027e8>] _apply_alternatives+0x84/0x86
    [9.157784] [<ffffffff800029be>] apply_module_alternatives+0x10/0x1a
    [9.164113] [<ffffffff80008fcc>] module_finalize+0x5e/0x7a
    [9.169583] [<ffffffff80085cd6>] load_module+0xfd8/0x179c
    [9.174965] [<ffffffff80086630>] init_module_from_file+0x76/0xaa
    [9.180948] [<ffffffff800867f6>] __riscv_sys_finit_module+0x176/0x2a8
    [9.187365] [<ffffffff80889862>] do_trap_ecall_u+0xbe/0x130
    [9.192922] [<ffffffff808920bc>] ret_from_exception+0x0/0x64
    [9.198573] Code: 0009 b7e9 6797 014d a783 85a7 c799 4785 0717 0100 (0123) aef7
    [9.205994] ---[ end trace 0000000000000000 ]---
    
    This is because we called riscv_noncoherent_supported() for all the stages
    during IOCP probe. riscv_noncoherent_supported() function sets
    noncoherent_supported variable to true which has an annotation set to
    "__ro_after_init" due to which we were seeing the above splat. Fix this by
    probing for IOCP only once in boot stage by having a boolean variable
    "done" which will be set to true upon IOCP probe in errata_probe_iocp()
    and we bail out early if "done" is set to true.
    
    While at it make return type of errata_probe_iocp() to void as we were
    not checking the return value in andes_errata_patch_func().
    
    Fixes: e021ae7f5145 ("riscv: errata: Add Andes alternative ports")
    Signed-off-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Yu Chien Peter Lin <peterlin@andestech.com>
    Link: https://lore.kernel.org/r/20231130212647.108746-1-prabhakar.mahadev-lad.rj@bp.renesas.com
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b12ccda0d469f70e8dfb9dfd2bfd1f1298910f34
Author: Clément Léger <cleger@rivosinc.com>
Date:   Fri Nov 3 10:02:23 2023 +0100

    riscv: fix misaligned access handling of C.SWSP and C.SDSP
    
    [ Upstream commit 22e0eb04837a63af111fae35a92f7577676b9bc8 ]
    
    This is a backport of a fix that was done in OpenSBI: ec0559eb315b
    ("lib: sbi_misaligned_ldst: Fix handling of C.SWSP and C.SDSP").
    
    Unlike C.LWSP/C.LDSP, these encodings can be used with the zero
    register, so checking that the rs2 field is non-zero is unnecessary.
    
    Additionally, the previous check was incorrect since it was checking
    the immediate field of the instruction instead of the rs2 field.
    
    Fixes: 956d705dd279 ("riscv: Unaligned load/store handling for M_MODE")
    Signed-off-by: Clément Léger <cleger@rivosinc.com>
    Link: https://lore.kernel.org/r/20231103090223.702340-1-cleger@rivosinc.com
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92f095553ae58733962aa5ef5ba9882bda105b06
Author: Sam Edwards <cfsworks@gmail.com>
Date:   Tue Dec 5 12:29:00 2023 -0800

    arm64: dts: rockchip: Fix eMMC Data Strobe PD on rk3588
    
    [ Upstream commit 37f3d6108730713c411827ab4af764909f4dfc78 ]
    
    JEDEC standard JESD84-B51 defines the eMMC Data Strobe line, which is
    currently used only in HS400 mode, as a device->host clock signal that
    "is used only in read operation. The Data Strobe is always High-Z (not
    driven by the device and pulled down by RDS) or Driven Low in write
    operation, except during CRC status response." RDS is a pull-down
    resistor specified in the 10K-100K ohm range. Thus per the standard, the
    Data Strobe is always pulled to ground (by the eMMC and/or RDS) during
    write operations.
    
    Evidently, the eMMC host controller in the RK3588 considers an active
    voltage on the eMMC-DS line during a write to be an error.
    
    The default (i.e. hardware reset, and Rockchip BSP) behavior for the
    RK3588 is to activate the eMMC-DS pin's builtin pull-down. As a result,
    many RK3588 board designers do not bother adding a dedicated RDS
    resistor, instead relying on the RK3588's internal bias. The current
    devicetree, however, disables this bias (`pcfg_pull_none`), breaking
    HS400-mode writes for boards without a dedicated RDS, but with an eMMC
    chip that chooses to High-Z (instead of drive-low) the eMMC-DS line.
    (The Turing RK1 is one such board.)
    
    Fix this by changing the bias in the (common) emmc_data_strobe case to
    reflect the expected hardware/BSP behavior. This is unlikely to cause
    regressions elsewhere: the pull-down is only relevant for High-Z eMMCs,
    and if this is redundant with a (dedicated) RDS resistor, the effective
    result is only a lower resistance to ground -- where the range of
    tolerance is quite high. If it does, it's better fixed in the specific
    devicetrees.
    
    Fixes: d85f8a5c798d5 ("arm64: dts: rockchip: Add rk3588 pinctrl data")
    Signed-off-by: Sam Edwards <CFSworks@gmail.com>
    Link: https://lore.kernel.org/r/20231205202900.4617-2-CFSworks@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15eb6859de685ce0235db22f061d23bd8e71dc3b
Author: Fabio Estevam <festevam@denx.de>
Date:   Tue Dec 5 10:27:35 2023 -0300

    ARM: dts: imx28-xea: Pass the 'model' property
    
    [ Upstream commit 63ef8fc9bcee6b73ca445a19a7ac6bd544723c9f ]
    
    Per root-node.yaml, 'model' is a required property.
    
    Pass it to fix the following dt-schema warning:
    
    imx28-xea.dtb: /: 'model' is a required property
            from schema $id: http://devicetree.org/schemas/root-node.yaml#
    
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Fixes: 445ae16ac1c5 ("ARM: dts: imx28: Add DTS description of imx28 based XEA board")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5af668cd9ee5d6b5ce396257a4df48c598646cc8
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Mon Nov 27 17:05:01 2023 +0100

    ARM: dts: imx7: Declare timers compatible with fsl,imx6dl-gpt
    
    [ Upstream commit 397caf68e2d36532054cb14ae8995537f27f8b61 ]
    
    The timer nodes declare compatibility with "fsl,imx6sx-gpt", which
    itself is compatible with "fsl,imx6dl-gpt". Switch the fallback
    compatible from "fsl,imx6sx-gpt" to "fsl,imx6dl-gpt".
    
    Fixes: 949673450291 ("ARM: dts: add imx7d soc dtsi file")
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Roland Hieber <rhi@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee007123af6d5a532358dd1bc16ce60946f357d2
Author: Stefan Eichenberger <stefan.eichenberger@toradex.com>
Date:   Thu Nov 23 11:48:12 2023 +0100

    arm64: dts: imx8-apalis: set wifi regulator to always-on
    
    [ Upstream commit 04179605ab604dba32571a05cd06423afc9eca19 ]
    
    Make sure that the wifi regulator is always on. The wifi driver itself
    puts the wifi module into suspend mode. If we cut the power the driver
    will crash when resuming from suspend.
    
    Signed-off-by: Stefan Eichenberger <stefan.eichenberger@toradex.com>
    Signed-off-by: Francesco Dolcini <francesco.dolcini@toradex.com>
    Fixes: ad0de4ceb706 ("arm64: dts: freescale: add initial apalis imx8 aka quadmax module support")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12deaef0c8670064022819ef346ad05a692f5c69
Author: Kunwu Chan <chentao@kylinos.cn>
Date:   Wed Nov 22 14:46:36 2023 +0800

    ARM: imx: Check return value of devm_kasprintf in imx_mmdc_perf_init
    
    [ Upstream commit 1c2b1049af3f86545fcc5fae0fc725fb64b3a09e ]
    
    devm_kasprintf() returns a pointer to dynamically allocated memory
    which can be NULL upon failure. Ensure the allocation was successful
    by checking the pointer validity.
    
    Release the id allocated in 'mmdc_pmu_init' when 'devm_kasprintf'
    return NULL
    
    Suggested-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Fixes: e76bdfd7403a ("ARM: imx: Added perf functionality to mmdc driver")
    Signed-off-by: Kunwu Chan <chentao@kylinos.cn>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3836f1f246e276d8ba296b28ec92c5764b2f3776
Author: Peng Fan <peng.fan@nxp.com>
Date:   Mon Nov 13 18:02:29 2023 +0800

    arm64: dts: imx93: correct mediamix power
    
    [ Upstream commit d4cb68a5d3a1ed30ecaf1591eb901523faa13496 ]
    
    "nic_media" clock should be enabled when power on/off mediamix, otherwise
    power on/off will fail. Because "media_axi_root" clock is the parent of
    "nic_media" clock, so replace "media_axi_clock" clock with "nic_media"
    clock in mediamix node.
    
    Link: https://github.com/nxp-imx/linux-imx/commit/ce18e6d0071ae9df5486af8613708ebe920484be
    Fixes: f2d03ba997cb ("arm64: dts: imx93: reorder device nodes")
    Fixes: e85d3458a804 ("arm64: dts: imx93: add src node")
    Reviewed-by: Jacky Bai <ping.bai@nxp.com>
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Liu Ying <victor.liu@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b2c35e5e678a005f942c77cece9a5168662616d
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Mon Nov 6 16:13:25 2023 +0100

    arm64: dts: freescale: imx8-ss-lsio: Fix #pwm-cells
    
    [ Upstream commit d863a2f4f47560d71447650822857fc3d2aea715 ]
    
    i.MX8QM/QXP supports inverted PWM output, thus #pwm-cells needs to be set
    to 3.
    
    Fixes: 23fa99b205ea ("arm64: dts: freescale: imx8-ss-lsio: add support for lsio_pwm0-3")
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d338395bc5afcce9160cf7795c8a6d995fae72aa
Author: Fabio Estevam <festevam@denx.de>
Date:   Fri Sep 8 13:47:35 2023 -0300

    arm64: dts: imx8-ss-lsio: Add PWM interrupts
    
    [ Upstream commit 6c32f75d67a8c1ea94295234db7c11a29c189e6f ]
    
    The PWM interrupt is mandatory per imx-pwm.yaml.
    
    Add them.
    
    This also fixes the followig schema warning:
    
    imx8qm-apalis-v1.1-ixora-v1.2.dtb: pwm@5d000000: 'oneOf' conditional failed, one must be fixed:
            'interrupts' is a required property
            'interrupts-extended' is a required property
            from schema $id: http://devicetree.org/schemas/pwm/imx-pwm.yaml#
    
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Stable-dep-of: d863a2f4f475 ("arm64: dts: freescale: imx8-ss-lsio: Fix #pwm-cells")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddc5ad21da0a8ae953c5ea3b81a4d95365f6a2ac
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Nov 23 16:19:41 2023 +0800

    scsi: be2iscsi: Fix a memleak in beiscsi_init_wrb_handle()
    
    [ Upstream commit 235f2b548d7f4ac5931d834f05d3f7f5166a2e72 ]
    
    When an error occurs in the for loop of beiscsi_init_wrb_handle(), we
    should free phwi_ctxt->be_wrbq before returning an error code to prevent
    potential memleak.
    
    Fixes: a7909b396ba7 ("[SCSI] be2iscsi: Fix dynamic CID allocation Mechanism in driver")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20231123081941.24854-1-dinghao.liu@zju.edu.cn
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6eec904d95a5ae18839a6102e45b0fbfa1b6d4d4
Author: Petr Pavlu <petr.pavlu@suse.com>
Date:   Tue Dec 5 17:17:35 2023 +0100

    tracing: Fix a warning when allocating buffered events fails
    
    [ Upstream commit 34209fe83ef8404353f91ab4ea4035dbc9922d04 ]
    
    Function trace_buffered_event_disable() produces an unexpected warning
    when the previous call to trace_buffered_event_enable() fails to
    allocate pages for buffered events.
    
    The situation can occur as follows:
    
    * The counter trace_buffered_event_ref is at 0.
    
    * The soft mode gets enabled for some event and
      trace_buffered_event_enable() is called. The function increments
      trace_buffered_event_ref to 1 and starts allocating event pages.
    
    * The allocation fails for some page and trace_buffered_event_disable()
      is called for cleanup.
    
    * Function trace_buffered_event_disable() decrements
      trace_buffered_event_ref back to 0, recognizes that it was the last
      use of buffered events and frees all allocated pages.
    
    * The control goes back to trace_buffered_event_enable() which returns.
      The caller of trace_buffered_event_enable() has no information that
      the function actually failed.
    
    * Some time later, the soft mode is disabled for the same event.
      Function trace_buffered_event_disable() is called. It warns on
      "WARN_ON_ONCE(!trace_buffered_event_ref)" and returns.
    
    Buffered events are just an optimization and can handle failures. Make
    trace_buffered_event_enable() exit on the first failure and left any
    cleanup later to when trace_buffered_event_disable() is called.
    
    Link: https://lore.kernel.org/all/20231127151248.7232-2-petr.pavlu@suse.com/
    Link: https://lkml.kernel.org/r/20231205161736.19663-3-petr.pavlu@suse.com
    
    Fixes: 0fc1b09ff1ff ("tracing: Use temp buffer when filtering events")
    Signed-off-by: Petr Pavlu <petr.pavlu@suse.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e6621b99d20f26f7355a7f266bebd6f5ce88693
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Dec 5 07:02:13 2023 -0700

    io_uring/kbuf: check for buffer list readiness after NULL check
    
    [ Upstream commit 9865346b7e8374b57f1c3ccacdc77846c6352ff4 ]
    
    Move the buffer list 'is_ready' check below the validity check for
    the buffer list for a given group.
    
    Fixes: 5cf4f52e6d8a ("io_uring: free io_buffer_list entries via RCU")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2173a8b64507f5be03c195614a491778e6963cc
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Tue Dec 5 15:37:17 2023 +0300

    io_uring/kbuf: Fix an NULL vs IS_ERR() bug in io_alloc_pbuf_ring()
    
    [ Upstream commit e53f7b54b1fdecae897f25002ff0cff04faab228 ]
    
    The io_mem_alloc() function returns error pointers, not NULL.  Update
    the check accordingly.
    
    Fixes: b10b73c102a2 ("io_uring/kbuf: recycle freed mapped buffer ring entries")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Link: https://lore.kernel.org/r/5ed268d3-a997-4f64-bd71-47faa92101ab@moroto.mountain
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe145559a91f731c7039158e37eb38b1773ecd41
Author: Fabio Estevam <festevam@denx.de>
Date:   Sun Nov 5 10:32:19 2023 -0300

    ARM: dts: imx6ul-pico: Describe the Ethernet PHY clock
    
    [ Upstream commit d951f8f5f23a9417b7952f22b33784c73caa1ebb ]
    
    Since commit c7e73b5051d6 ("ARM: imx: mach-imx6ul: remove 14x14 EVK
    specific PHY fixup")thet Ethernet PHY is no longer configured via code
    in board file.
    
    This caused Ethernet to stop working.
    
    Fix this problem by describing the clocks and clock-names to the
    Ethernet PHY node so that the KSZ8081 chip can be clocked correctly.
    
    Fixes: c7e73b5051d6 ("ARM: imx: mach-imx6ul: remove 14x14 EVK specific PHY fixup")
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6a952d44a4148149ddbde169945876c25fac585
Author: Nathan Rossi <nathan.rossi@digi.com>
Date:   Mon Nov 6 02:14:36 2023 +0000

    arm64: dts: imx8mp: imx8mq: Add parkmode-disable-ss-quirk on DWC3
    
    [ Upstream commit 209043cf092d7b0d4739921b3f11d6d0b451eabf ]
    
    The i.MX8MP and i.MX8MQ devices both use the same DWC3 controller and
    are both affected by a known issue with the controller due to specific
    behaviour when park mode is enabled in SuperSpeed host mode operation.
    
    Under heavy USB traffic from multiple endpoints the controller will
    sometimes incorrectly process transactions such that some transactions
    are lost, or the controller may hang when processing transactions. When
    the controller hangs it does not recover.
    
    This issue is documented partially within the linux-imx vendor kernel
    which references a Synopsys STAR number 9001415732 in commits [1] and
    additional details in [2]. Those commits provide some additional
    controller internal implementation specifics around the incorrect
    behaviour of the SuperSpeed host controller operation when park mode is
    enabled.
    
    The summary of this issue is that the host controller can incorrectly
    enter/exit park mode such that part of the controller is in a state
    which behaves as if in park mode even though it is not. In this state
    the controller incorrectly calculates the number of TRBs available which
    results in incorrect access of the internal caches causing the overwrite
    of pending requests in the cache which should have been processed but
    are ignored. This can cause the controller to drop the requests or hang
    waiting for the pending state of the dropped requests.
    
    The workaround for this issue is to disable park mode for SuperSpeed
    operation of the controller through the GUCTL1[17] bit. This is already
    available as a quirk for the DWC3 controller and can be enabled via the
    'snps,parkmode-disable-ss-quirk' device tree property.
    
    It is possible to replicate this failure on an i.MX8MP EVK with a USB
    Hub connecting 4 SuperSpeed USB flash drives. Performing continuous
    small read operations (dd if=/dev/sd... of=/dev/null bs=16) on the block
    devices will result in device errors initially and will eventually
    result in the controller hanging.
    
      [13240.896936] xhci-hcd xhci-hcd.0.auto: WARN Event TRB for slot 4 ep 2 with no TDs queued?
      [13240.990708] usb 2-1.3: reset SuperSpeed USB device number 5 using xhci-hcd
      [13241.015582] sd 2:0:0:0: [sdc] tag#0 UNKNOWN(0x2003) Result: hostbyte=0x07 driverbyte=DRIVER_OK cmd_age=0s
      [13241.025198] sd 2:0:0:0: [sdc] tag#0 CDB: opcode=0x28 28 00 00 00 03 e0 00 01 00 00
      [13241.032949] I/O error, dev sdc, sector 992 op 0x0:(READ) flags 0x80700 phys_seg 25 prio class 2
      [13272.150710] usb 2-1.2: reset SuperSpeed USB device number 4 using xhci-hcd
      [13272.175469] sd 1:0:0:0: [sdb] tag#0 UNKNOWN(0x2003) Result: hostbyte=0x03 driverbyte=DRIVER_OK cmd_age=31s
      [13272.185365] sd 1:0:0:0: [sdb] tag#0 CDB: opcode=0x28 28 00 00 00 03 e0 00 01 00 00
      [13272.193385] I/O error, dev sdb, sector 992 op 0x0:(READ) flags 0x80700 phys_seg 18 prio class 2
      [13434.846556] xhci-hcd xhci-hcd.0.auto: xHCI host not responding to stop endpoint command
      [13434.854592] xhci-hcd xhci-hcd.0.auto: xHCI host controller not responding, assume dead
      [13434.862553] xhci-hcd xhci-hcd.0.auto: HC died; cleaning up
    
    [1] https://github.com/nxp-imx/linux-imx/commit/97a5349d936b08cf301730b59e4e8855283f815c
    [2] https://github.com/nxp-imx/linux-imx/commit/b4b5cbc5a12d7c3b920d1d7cba0ada3379e4e42b
    
    Fixes: fb8587a2c165 ("arm64: dtsi: imx8mp: add usb nodes")
    Fixes: ad37549cb5dc ("arm64: dts: imx8mq: add USB nodes")
    Signed-off-by: Nathan Rossi <nathan.rossi@digi.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 584bdbca913ed4e6b580f5cf7527bf5b9a731746
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 4 08:27:36 2023 +0100

    drm/bridge: tc358768: select CONFIG_VIDEOMODE_HELPERS
    
    [ Upstream commit 26513300978f7285c3e776c144f27ef71be61f57 ]
    
    A dependency on this feature was recently introduced:
    
    x86_64-linux-ld: vmlinux.o: in function `tc358768_bridge_pre_enable':
    tc358768.c:(.text+0xbe3dae): undefined reference to `drm_display_mode_to_videomode'
    
    Make sure this is always enabled.
    
    Fixes: e5fb21678136 ("drm/bridge: tc358768: Use struct videomode")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://lore.kernel.org/r/20231204072814.968816-1-arnd@kernel.org
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231204072814.968816-1-arnd@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc054130cdfbb91ddb0449d5587b2b00d4c90ce6
Author: Shifeng Li <lishifeng@sangfor.com.cn>
Date:   Thu Nov 30 00:14:15 2023 -0800

    RDMA/irdma: Avoid free the non-cqp_request scratch
    
    [ Upstream commit e3e82fcb79eeb3f1a88a89f676831773caff514a ]
    
    When creating ceq_0 during probing irdma, cqp.sc_cqp will be sent as a
    cqp_request to cqp->sc_cqp.sq_ring. If the request is pending when
    removing the irdma driver or unplugging its aux device, cqp.sc_cqp will be
    dereferenced as wrong struct in irdma_free_pending_cqp_request().
    
      PID: 3669   TASK: ffff88aef892c000  CPU: 28  COMMAND: "kworker/28:0"
       #0 [fffffe0000549e38] crash_nmi_callback at ffffffff810e3a34
       #1 [fffffe0000549e40] nmi_handle at ffffffff810788b2
       #2 [fffffe0000549ea0] default_do_nmi at ffffffff8107938f
       #3 [fffffe0000549eb8] do_nmi at ffffffff81079582
       #4 [fffffe0000549ef0] end_repeat_nmi at ffffffff82e016b4
          [exception RIP: native_queued_spin_lock_slowpath+1291]
          RIP: ffffffff8127e72b  RSP: ffff88aa841ef778  RFLAGS: 00000046
          RAX: 0000000000000000  RBX: ffff88b01f849700  RCX: ffffffff8127e47e
          RDX: 0000000000000000  RSI: 0000000000000004  RDI: ffffffff83857ec0
          RBP: ffff88afe3e4efc8   R8: ffffed15fc7c9dfa   R9: ffffed15fc7c9dfa
          R10: 0000000000000001  R11: ffffed15fc7c9df9  R12: 0000000000740000
          R13: ffff88b01f849708  R14: 0000000000000003  R15: ffffed1603f092e1
          ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0000
      -- <NMI exception stack> --
       #5 [ffff88aa841ef778] native_queued_spin_lock_slowpath at ffffffff8127e72b
       #6 [ffff88aa841ef7b0] _raw_spin_lock_irqsave at ffffffff82c22aa4
       #7 [ffff88aa841ef7c8] __wake_up_common_lock at ffffffff81257363
       #8 [ffff88aa841ef888] irdma_free_pending_cqp_request at ffffffffa0ba12cc [irdma]
       #9 [ffff88aa841ef958] irdma_cleanup_pending_cqp_op at ffffffffa0ba1469 [irdma]
       #10 [ffff88aa841ef9c0] irdma_ctrl_deinit_hw at ffffffffa0b2989f [irdma]
       #11 [ffff88aa841efa28] irdma_remove at ffffffffa0b252df [irdma]
       #12 [ffff88aa841efae8] auxiliary_bus_remove at ffffffff8219afdb
       #13 [ffff88aa841efb00] device_release_driver_internal at ffffffff821882e6
       #14 [ffff88aa841efb38] bus_remove_device at ffffffff82184278
       #15 [ffff88aa841efb88] device_del at ffffffff82179d23
       #16 [ffff88aa841efc48] ice_unplug_aux_dev at ffffffffa0eb1c14 [ice]
       #17 [ffff88aa841efc68] ice_service_task at ffffffffa0d88201 [ice]
       #18 [ffff88aa841efde8] process_one_work at ffffffff811c589a
       #19 [ffff88aa841efe60] worker_thread at ffffffff811c71ff
       #20 [ffff88aa841eff10] kthread at ffffffff811d87a0
       #21 [ffff88aa841eff50] ret_from_fork at ffffffff82e0022f
    
    Fixes: 44d9e52977a1 ("RDMA/irdma: Implement device initialization definitions")
    Link: https://lore.kernel.org/r/20231130081415.891006-1-lishifeng@sangfor.com.cn
    Suggested-by: "Ismail, Mustafa" <mustafa.ismail@intel.com>
    Signed-off-by: Shifeng Li <lishifeng@sangfor.com.cn>
    Reviewed-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 926c1c7a8f2ec08a0d100ed48a845a76271192da
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Wed Nov 29 14:21:43 2023 -0600

    RDMA/irdma: Fix support for 64k pages
    
    [ Upstream commit 03769f72d66edab82484449ed594cb6b00ae0223 ]
    
    Virtual QP and CQ require a 4K HW page size but the driver passes
    PAGE_SIZE to ib_umem_find_best_pgsz() instead.
    
    Fix this by using the appropriate 4k value in the bitmap passed to
    ib_umem_find_best_pgsz().
    
    Fixes: 693a5386eff0 ("RDMA/irdma: Split mr alloc and free into new functions")
    Link: https://lore.kernel.org/r/20231129202143.1434-4-shiraz.saleem@intel.com
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12a77574f0901d3ee9a20c2ef45d53f18cd7d887
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Wed Nov 29 14:21:42 2023 -0600

    RDMA/irdma: Ensure iWarp QP queue memory is OS paged aligned
    
    [ Upstream commit 0a5ec366de7e94192669ba08de6ed336607fd282 ]
    
    The SQ is shared for between kernel and used by storing the kernel page
    pointer and passing that to a kmap_atomic().
    
    This then requires that the alignment is PAGE_SIZE aligned.
    
    Fix by adding an iWarp specific alignment check.
    
    Fixes: e965ef0e7b2c ("RDMA/irdma: Split QP handler into irdma_reg_user_mr_type_qp")
    Link: https://lore.kernel.org/r/20231129202143.1434-3-shiraz.saleem@intel.com
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d103c131ef3be6ed6f4d779fc7b1fff7d01368f6
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Wed Nov 29 14:21:41 2023 -0600

    RDMA/core: Fix umem iterator when PAGE_SIZE is greater then HCA pgsz
    
    [ Upstream commit 4fbc3a52cd4d14de3793f4b2c721d7306ea84cf9 ]
    
    64k pages introduce the situation in this diagram when the HCA 4k page
    size is being used:
    
     +-------------------------------------------+ <--- 64k aligned VA
     |                                           |
     |              HCA 4k page                  |
     |                                           |
     +-------------------------------------------+
     |                   o                       |
     |                                           |
     |                   o                       |
     |                                           |
     |                   o                       |
     +-------------------------------------------+
     |                                           |
     |              HCA 4k page                  |
     |                                           |
     +-------------------------------------------+ <--- Live HCA page
     |OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO| <--- offset
     |                                           | <--- VA
     |                MR data                    |
     +-------------------------------------------+
     |                                           |
     |              HCA 4k page                  |
     |                                           |
     +-------------------------------------------+
     |                   o                       |
     |                                           |
     |                   o                       |
     |                                           |
     |                   o                       |
     +-------------------------------------------+
     |                                           |
     |              HCA 4k page                  |
     |                                           |
     +-------------------------------------------+
    
    The VA addresses are coming from rdma-core in this diagram can be
    arbitrary, but for 64k pages, the VA may be offset by some number of HCA
    4k pages and followed by some number of HCA 4k pages.
    
    The current iterator doesn't account for either the preceding 4k pages or
    the following 4k pages.
    
    Fix the issue by extending the ib_block_iter to contain the number of DMA
    pages like comment [1] says and by using __sg_advance to start the
    iterator at the first live HCA page.
    
    The changes are contained in a parallel set of iterator start and next
    functions that are umem aware and specific to umem since there is one user
    of the rdma_for_each_block() without umem.
    
    These two fixes prevents the extra pages before and after the user MR
    data.
    
    Fix the preceding pages by using the __sq_advance field to start at the
    first 4k page containing MR data.
    
    Fix the following pages by saving the number of pgsz blocks in the
    iterator state and downcounting on each next.
    
    This fix allows for the elimination of the small page crutch noted in the
    Fixes.
    
    Fixes: 10c75ccb54e4 ("RDMA/umem: Prevent small pages from being returned by ib_umem_find_best_pgsz()")
    Link: https://lore.kernel.org/r/20231129202143.1434-2-shiraz.saleem@intel.com
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Reviewed-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8668fe7a5e88e859f7506a1b5ed58e6ce474f9c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Dec 4 15:41:56 2023 +0800

    ASoC: wm_adsp: fix memleak in wm_adsp_buffer_populate
    
    [ Upstream commit 29046a78a3c0a1f8fa0427f164caa222f003cf5b ]
    
    When wm_adsp_buffer_read() fails, we should free buf->regions.
    Otherwise, the callers of wm_adsp_buffer_populate() will
    directly free buf on failure, which makes buf->regions a leaked
    memory.
    
    Fixes: a792af69b08f ("ASoC: wm_adsp: Refactor compress stream initialisation")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20231204074158.12026-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ca497a90ef353bf59f9a07108f608bc6be32e47
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Nov 30 20:43:43 2023 +0000

    firmware: arm_scmi: Fix possible frequency truncation when using level indexing mode
    
    [ Upstream commit 77f5032e94f244ba08db51e17ca8f37bd7ff9acb ]
    
    The multiplier is already promoted to unsigned long, however the
    frequency calculations done when using level indexing mode doesn't
    use the multiplier computed. It instead hardcodes the multiplier
    value of 1000 at all the usage sites.
    
    Clean that up by assigning the multiplier value of 1000 when using
    the perf level indexing mode and update the frequency calculations to
    use the multiplier instead. It should fix the possible frequency
    truncation for all the values greater than or equal to 4GHz on 64-bit
    machines.
    
    Fixes: 31c7c1397a33 ("firmware: arm_scmi: Add v3.2 perf level indexing mode support")
    Reported-by: Sibi Sankar <quic_sibis@quicinc.com>
    Closes: https://lore.kernel.org/all/20231129065748.19871-3-quic_sibis@quicinc.com/
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20231130204343.503076-2-sudeep.holla@arm.com
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4893588806552fa7b1e44f3f1549598d06d5bdd2
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Mon Sep 25 15:17:13 2023 +0200

    firmware: arm_scmi: Simplify error path in scmi_dvfs_device_opps_add()
    
    [ Upstream commit 033ca4de129646e9969a6838b44cca0fac38e219 ]
    
    Let's simplify the code in scmi_dvfs_device_opps_add() by using
    dev_pm_opp_remove_all_dynamic() in the error path.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/20230925131715.138411-8-ulf.hansson@linaro.org
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Stable-dep-of: 77f5032e94f2 ("firmware: arm_scmi: Fix possible frequency truncation when using level indexing mode")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ea9f8abe364e41dc0d942baf01b5020f5b343ae
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Nov 30 20:43:42 2023 +0000

    firmware: arm_scmi: Fix frequency truncation by promoting multiplier type
    
    [ Upstream commit 8e3c98d9187e09274fc000a7d1a77b070a42d259 ]
    
    Fix the possible frequency truncation for all values equal to or greater
    4GHz on 64bit machines by updating the multiplier 'mult_factor' to
    'unsigned long' type. It is also possible that the multiplier itself can
    be greater than or equal to 2^32. So we need to also fix the equation
    computing the value of the multiplier.
    
    Fixes: a9e3fbfaa0ff ("firmware: arm_scmi: add initial support for performance protocol")
    Reported-by: Sibi Sankar <quic_sibis@quicinc.com>
    Closes: https://lore.kernel.org/all/20231129065748.19871-3-quic_sibis@quicinc.com/
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20231130204343.503076-1-sudeep.holla@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3af26f536161a34b26cabc0228a8d8ab50bf4f3
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Aug 25 13:26:22 2023 +0200

    firmware: arm_scmi: Extend perf protocol ops to get information of a domain
    
    [ Upstream commit 3d99ed60721bf2e108c8fc660775766057689a92 ]
    
    Similar to other protocol ops, it's useful for an scmi module driver to get
    some generic information of a performance domain. Therefore, let's add a
    new callback to provide this information. The information is currently
    limited to the name of the performance domain and whether the set-level
    operation is supported, although this can easily be extended if we find the
    need for it.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/20230825112633.236607-3-ulf.hansson@linaro.org
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Stable-dep-of: 8e3c98d9187e ("firmware: arm_scmi: Fix frequency truncation by promoting multiplier type")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c78a21a5a528af4e0167c9dfa5d10ba41515328
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Aug 25 13:26:21 2023 +0200

    firmware: arm_scmi: Extend perf protocol ops to get number of domains
    
    [ Upstream commit e9090e70e618cd62ab7bf2914511e5eea31a2535 ]
    
    Similar to other protocol ops, it's useful for an scmi module driver to get
    the number of supported performance domains, hence let's make this
    available by adding a new perf protocol callback. Note that, a user is
    being added from subsequent changes.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/20230825112633.236607-2-ulf.hansson@linaro.org
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Stable-dep-of: 8e3c98d9187e ("firmware: arm_scmi: Fix frequency truncation by promoting multiplier type")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cd68b364f833fdf1438e5d2c591bd650bb89bdc
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Dec 3 16:24:05 2023 +0100

    hwmon: (nzxt-kraken2) Fix error handling path in kraken2_probe()
    
    [ Upstream commit 35fe2ad259a3bfca15ab78c8ffb5278cb6149c89 ]
    
    There is no point in calling hid_hw_stop() if hid_hw_start() has failed.
    There is no point in calling hid_hw_close() if hid_hw_open() has failed.
    
    Update the error handling path accordingly.
    
    Fixes: 82e3430dfa8c ("hwmon: add driver for NZXT Kraken X42/X52/X62/X72")
    Reported-by: Aleksa Savic <savicaleksa83@gmail.com>
    Closes: https://lore.kernel.org/all/121470f0-6c1f-418a-844c-7ec2e8a54b8e@gmail.com/
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Jonas Malaco <jonas@protocubo.io>
    Link: https://lore.kernel.org/r/a768e69851a07a1f4e29f270f4e2559063f07343.1701617030.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d73500fcf861c5c56475a5923980371f09f2886
Author: Neil Armstrong <neil.armstrong@linaro.org>
Date:   Thu Nov 16 17:44:21 2023 +0100

    ASoC: codecs: lpass-tx-macro: set active_decimator correct default value
    
    [ Upstream commit a2f35ed1d237c459100adb0c39bb811d7f170977 ]
    
    The -1 value for active_decimator[dai_id] is considered as "not set",
    but at probe the table is initialized a 0, this prevents enabling the
    DEC0 Mixer since it will be considered as already set.
    
    Initialize the table entries as -1 to fix tx_macro_tx_mixer_put().
    
    Fixes: 1c6a7f5250ce ("ASoC: codecs: tx-macro: fix active_decimator array")
    Fixes: c1057a08af43 ("ASoC: codecs: tx-macro: fix kcontrol put")
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://lore.kernel.org/r/20231116-topic-sm8x50-upstream-tx-macro-fix-active-decimator-set-v1-1-6edf402f4b6f@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ebf05908f0e8ab5d2c50555ed059fa239b31072
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Fri Nov 24 19:27:47 2023 +0100

    hwmon: (acpi_power_meter) Fix 4.29 MW bug
    
    [ Upstream commit 1fefca6c57fb928d2131ff365270cbf863d89c88 ]
    
    The ACPI specification says:
    
    "If an error occurs while obtaining the meter reading or if the value
    is not available then an Integer with all bits set is returned"
    
    Since the "integer" is 32 bits in case of the ACPI power meter,
    userspace will get a power reading of 2^32 * 1000 miliwatts (~4.29 MW)
    in case of such an error. This was discovered due to a lm_sensors
    bugreport (https://github.com/lm-sensors/lm-sensors/issues/460).
    Fix this by returning -ENODATA instead.
    
    Tested-by: <urbinek@gmail.com>
    Fixes: de584afa5e18 ("hwmon driver for ACPI 4.0 power meters")
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Link: https://lore.kernel.org/r/20231124182747.13956-1-W_Armin@gmx.de
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e594ee138c91ded4223e7c705920108d511877b
Author: Stefan Wahren <wahrenst@gmx.net>
Date:   Sat Nov 18 13:42:52 2023 +0100

    ARM: dts: bcm2711-rpi-400: Fix delete-node of led_act
    
    [ Upstream commit dc761f11af2e39119d3a7942e3d10615f3d900e7 ]
    
    The LED ACT which is included from bcm2711-rpi-4-b doesn't exists
    on the Raspberry Pi 400. So the bcm2711-rpi-400.dts tries to
    use the delete-node directive in order to remove the complete
    node. Unfortunately the usage get broken in commit 1156e3a78bcc
    ("ARM: dts: bcm283x: Move ACT LED into separate dtsi")
    and now ACT and PWR LED using the same GPIO and this prevent
    probing of led-gpios on Raspberry Pi 400:
    
        leds-gpio: probe of leds failed with error -16
    
    So fix the delete-node directive.
    
    Fixes: 1156e3a78bcc ("ARM: dts: bcm283x: Move ACT LED into separate dtsi")
    Signed-off-by: Stefan Wahren <wahrenst@gmx.net>
    Link: https://lore.kernel.org/r/20231118124252.14838-3-wahrenst@gmx.net
    Signed-off-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7fb9f15fedce217ee6f8921f726d335b7a16037
Author: Alex Bee <knaerzche@gmail.com>
Date:   Mon Nov 27 19:46:44 2023 +0100

    ARM: dts: rockchip: Fix sdmmc_pwren's pinmux setting for RK3128
    
    [ Upstream commit 0c349b5001f8bdcead844484c15a0c4dfb341157 ]
    
    RK3128's reference design uses sdmmc_pwren pincontrol as GPIO - see [0].
    
    Let's change it in the SoC DT as well.
    
    [0] https://github.com/rockchip-linux/kernel/commit/8c62deaf6025
    
    Fixes: a0201bff6259 ("ARM: dts: rockchip: add rk3128 soc dtsi")
    Signed-off-by: Alex Bee <knaerzche@gmail.com>
    Link: https://lore.kernel.org/r/20231127184643.13314-2-knaerzche@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03766ae3467d18c515c9f3a90f1404854deac2de
Author: Stefan Kerkmann <s.kerkmann@pengutronix.de>
Date:   Wed Nov 1 12:03:37 2023 +0100

    ARM: dts: imx6q: skov: fix ethernet clock regression
    
    [ Upstream commit 6552218f4dc47ba3c6c5b58cc1e9eb208a2b438b ]
    
    A regression was introduced in the Skov specific i.MX6 flavor
    reve-mi1010ait-1cp1 device tree causing the external ethernet controller
    to not being selected as the clock source for the i.MX6 ethernet MAC,
    resulting in a none functional ethernet interface. The root cause is
    that the ethernet clock selection is now part of the clocks node, which
    is overwritten in the specific device tree and wasn't updated to contain
    these ethernet clocks.
    
    Fixes: c89614079e44 ("ARM: dts: imx6qdl-skov-cpu: configure ethernet reference clock parent")
    Signed-off-by: Stefan Kerkmann <s.kerkmann@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 231ab2ff6039d250c7622e499cededd38fa62f92
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Thu Oct 19 08:32:17 2023 +0200

    arm64: dt: imx93: tqma9352-mba93xxla: Fix LPUART2 pad config
    
    [ Upstream commit 2bfba37b3d90d6d2d499d5b0dfe99c05c38b1b54 ]
    
    LPUART2_RTS# has an external pull-down, so do not enable the internal
    pull-up at the same time, use a pull-down instead.
    
    Fixes: c982ecfa7992a ("arm64: dts: freescale: add initial device tree for MBa93xxLA SBC board")
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55b6b95737e3e5575c9b683cdfa70c260a5528ae
Author: Shifeng Li <lishifeng1992@126.com>
Date:   Tue Nov 21 02:12:36 2023 -0800

    RDMA/irdma: Fix UAF in irdma_sc_ccq_get_cqe_info()
    
    [ Upstream commit 2b78832f50c4d711e161b166d7d8790968051546 ]
    
    When removing the irdma driver or unplugging its aux device, the ccq
    queue is released before destorying the cqp_cmpl_wq queue.
    But in the window, there may still be completion events for wqes. That
    will cause a UAF in irdma_sc_ccq_get_cqe_info().
    
    [34693.333191] BUG: KASAN: use-after-free in irdma_sc_ccq_get_cqe_info+0x82f/0x8c0 [irdma]
    [34693.333194] Read of size 8 at addr ffff889097f80818 by task kworker/u67:1/26327
    [34693.333194]
    [34693.333199] CPU: 9 PID: 26327 Comm: kworker/u67:1 Kdump: loaded Tainted: G           O     --------- -t - 4.18.0 #1
    [34693.333200] Hardware name: SANGFOR Inspur/NULL, BIOS 4.1.13 08/01/2016
    [34693.333211] Workqueue: cqp_cmpl_wq cqp_compl_worker [irdma]
    [34693.333213] Call Trace:
    [34693.333220]  dump_stack+0x71/0xab
    [34693.333226]  print_address_description+0x6b/0x290
    [34693.333238]  ? irdma_sc_ccq_get_cqe_info+0x82f/0x8c0 [irdma]
    [34693.333240]  kasan_report+0x14a/0x2b0
    [34693.333251]  irdma_sc_ccq_get_cqe_info+0x82f/0x8c0 [irdma]
    [34693.333264]  ? irdma_free_cqp_request+0x151/0x1e0 [irdma]
    [34693.333274]  irdma_cqp_ce_handler+0x1fb/0x3b0 [irdma]
    [34693.333285]  ? irdma_ctrl_init_hw+0x2c20/0x2c20 [irdma]
    [34693.333290]  ? __schedule+0x836/0x1570
    [34693.333293]  ? strscpy+0x83/0x180
    [34693.333296]  process_one_work+0x56a/0x11f0
    [34693.333298]  worker_thread+0x8f/0xf40
    [34693.333301]  ? __kthread_parkme+0x78/0xf0
    [34693.333303]  ? rescuer_thread+0xc50/0xc50
    [34693.333305]  kthread+0x2a0/0x390
    [34693.333308]  ? kthread_destroy_worker+0x90/0x90
    [34693.333310]  ret_from_fork+0x1f/0x40
    
    Fixes: 44d9e52977a1 ("RDMA/irdma: Implement device initialization definitions")
    Signed-off-by: Shifeng Li <lishifeng1992@126.com>
    Link: https://lore.kernel.org/r/20231121101236.581694-1-lishifeng1992@126.com
    Acked-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfaede20f5a542a6e4ddf3e9fd4d7f7f1eb4a156
Author: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
Date:   Tue Nov 21 00:29:47 2023 -0800

    RDMA/bnxt_re: Correct module description string
    
    [ Upstream commit 422b19f7f006e813ee0865aadce6a62b3c263c42 ]
    
    The word "Driver" is repeated twice in the "modinfo bnxt_re"
    output description. Fix it.
    
    Fixes: 1ac5a4047975 ("RDMA/bnxt_re: Add bnxt_re RoCE driver")
    Signed-off-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Link: https://lore.kernel.org/r/1700555387-6277-1-git-send-email-selvin.xavier@broadcom.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca19116cca9d9427c816043e05429b8b6a7d95bd
Author: Jack Wang <jinpu.wang@ionos.com>
Date:   Mon Nov 20 16:41:44 2023 +0100

    RDMA/rtrs-clt: Remove the warnings for req in_use check
    
    [ Upstream commit 0c8bb6eb70ca41031f663b4481aac9ac78b53bc6 ]
    
    As we chain the WR during write request: memory registration,
    rdma write, local invalidate, if only the last WR fail to send due
    to send queue overrun, the server can send back the reply, while
    client mark the req->in_use to false in case of error in rtrs_clt_req
    when error out from rtrs_post_rdma_write_sg.
    
    Fixes: 6a98d71daea1 ("RDMA/rtrs: client: main functionality")
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Reviewed-by: Md Haris Iqbal <haris.iqbal@ionos.com>
    Signed-off-by: Grzegorz Prajsner <grzegorz.prajsner@ionos.com>
    Link: https://lore.kernel.org/r/20231120154146.920486-8-haris.iqbal@ionos.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b13d47c9018d643126d5a38793d957b7e63e9dc
Author: Jack Wang <jinpu.wang@ionos.com>
Date:   Mon Nov 20 16:41:43 2023 +0100

    RDMA/rtrs-clt: Fix the max_send_wr setting
    
    [ Upstream commit 6d09f6f7d7584e099633282ea915988914f86529 ]
    
    For each write request, we need Request, Response Memory Registration,
    Local Invalidate.
    
    Fixes: 6a98d71daea1 ("RDMA/rtrs: client: main functionality")
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Reviewed-by: Md Haris Iqbal <haris.iqbal@ionos.com>
    Signed-off-by: Grzegorz Prajsner <grzegorz.prajsner@ionos.com>
    Link: https://lore.kernel.org/r/20231120154146.920486-7-haris.iqbal@ionos.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5aafdb5e9324c240941c805be36f2a8aa932c2c6
Author: Md Haris Iqbal <haris.iqbal@ionos.com>
Date:   Mon Nov 20 16:41:42 2023 +0100

    RDMA/rtrs-srv: Destroy path files after making sure no IOs in-flight
    
    [ Upstream commit c4d32e77fc1006f99eeb78417efc3d81a384072a ]
    
    Destroying path files may lead to the freeing of rdma_stats. This creates
    the following race.
    
    An IO is in-flight, or has just passed the session state check in
    process_read/process_write. The close_work gets triggered and the function
    rtrs_srv_close_work() starts and does destroy path which frees the
    rdma_stats. After this the function process_read/process_write resumes and
    tries to update the stats through the function rtrs_srv_update_rdma_stats
    
    This commit solves the problem by moving the destroy path function to a
    later point. This point makes sure any inflights are completed. This is
    done by qp drain, and waiting for all in-flights through ops_id.
    
    Fixes: 9cb837480424 ("RDMA/rtrs: server: main functionality")
    Signed-off-by: Md Haris Iqbal <haris.iqbal@ionos.com>
    Signed-off-by: Santosh Kumar Pradhan <santosh.pradhan@ionos.com>
    Signed-off-by: Grzegorz Prajsner <grzegorz.prajsner@ionos.com>
    Link: https://lore.kernel.org/r/20231120154146.920486-6-haris.iqbal@ionos.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bb1941e7f71664f37eae7762d8c24457f65f3de
Author: Md Haris Iqbal <haris.iqbal@ionos.com>
Date:   Mon Nov 20 16:41:41 2023 +0100

    RDMA/rtrs-srv: Free srv_mr iu only when always_invalidate is true
    
    [ Upstream commit 3a71cd6ca0ce33d1af019ecf1d7167406fa54400 ]
    
    Since srv_mr->iu is allocated and used only when always_invalidate is
    true, free it only when always_invalidate is true.
    
    Fixes: 9cb837480424 ("RDMA/rtrs: server: main functionality")
    Signed-off-by: Md Haris Iqbal <haris.iqbal@ionos.com>
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Grzegorz Prajsner <grzegorz.prajsner@ionos.com>
    Link: https://lore.kernel.org/r/20231120154146.920486-5-haris.iqbal@ionos.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfb398fdcb7f0e029d14fd0c29e6247ee8b07c98
Author: Md Haris Iqbal <haris.iqbal@ionos.com>
Date:   Mon Nov 20 16:41:40 2023 +0100

    RDMA/rtrs-srv: Check return values while processing info request
    
    [ Upstream commit ed1e52aefa16f15dc2f04054a3baf11726a7460e ]
    
    While processing info request, it could so happen that the srv_path goes
    to CLOSING state, cause of any of the error events from RDMA. That state
    change should be picked up while trying to change the state in
    process_info_req, by checking the return value. In case the state change
    call in process_info_req fails, we fail the processing.
    
    We should also check the return value for rtrs_srv_path_up, since it
    sends a link event to the client above, and the client can fail for any
    reason.
    
    Fixes: 9cb837480424 ("RDMA/rtrs: server: main functionality")
    Signed-off-by: Md Haris Iqbal <haris.iqbal@ionos.com>
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Grzegorz Prajsner <grzegorz.prajsner@ionos.com>
    Link: https://lore.kernel.org/r/20231120154146.920486-4-haris.iqbal@ionos.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30614ed295bc55295ebe0a60abb484cc8cee0cd0
Author: Jack Wang <jinpu.wang@ionos.com>
Date:   Mon Nov 20 16:41:39 2023 +0100

    RDMA/rtrs-clt: Start hb after path_up
    
    [ Upstream commit 3e44a61b5db873612e20e7b7922468d7d1ac2d22 ]
    
    If we start hb too early, it will confuse server side to close
    the session.
    
    Fixes: 6a98d71daea1 ("RDMA/rtrs: client: main functionality")
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Reviewed-by: Md Haris Iqbal <haris.iqbal@ionos.com>
    Signed-off-by: Grzegorz Prajsner <grzegorz.prajsner@ionos.com>
    Link: https://lore.kernel.org/r/20231120154146.920486-3-haris.iqbal@ionos.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b659d48fc42608fa700548dbf20c9d871a048146
Author: Jack Wang <jinpu.wang@ionos.com>
Date:   Mon Nov 20 16:41:38 2023 +0100

    RDMA/rtrs-srv: Do not unconditionally enable irq
    
    [ Upstream commit 3ee7ecd712048ade6482bea4b2f3dcaf039c0348 ]
    
    When IO is completed, rtrs can be called in softirq context,
    unconditionally enabling irq could cause panic.
    
    To be on safe side, use spin_lock_irqsave and spin_unlock_irqrestore
    instread.
    
    Fixes: 9cb837480424 ("RDMA/rtrs: server: main functionality")
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Florian-Ewald Mueller <florian-ewald.mueller@ionos.com>
    Signed-off-by: Md Haris Iqbal <haris.iqbal@ionos.com>
    Signed-off-by: Grzegorz Prajsner <grzegorz.prajsner@ionos.com>
    Link: https://lore.kernel.org/r/20231120154146.920486-2-haris.iqbal@ionos.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1e4a5cbb0a16a9d738db6f82b54aef52b56cff6
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Mon Nov 20 18:05:35 2023 +0800

    ASoC: fsl_sai: Fix no frame sync clock issue on i.MX8MP
    
    [ Upstream commit 14e8442e0789598514f3c9de014950de9feda7a4 ]
    
    On i.MX8MP, when the TERE and FSD_MSTR enabled before configuring
    the word width, there will be no frame sync clock issue, because
    old word width impact the generation of frame sync.
    
    TERE enabled earlier only for i.MX8MP case for the hardware limitation,
    So need to disable FSD_MSTR before configuring word width, then enable
    FSD_MSTR bit for this specific case.
    
    Fixes: 3e4a82612998 ("ASoC: fsl_sai: MCLK bind with TX/RX enable bit")
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Link: https://lore.kernel.org/r/1700474735-3863-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdcedad6b951d632bbd7dfc80332bdcf9a6abbef
Author: Alex Bee <knaerzche@gmail.com>
Date:   Sun Nov 5 23:36:16 2023 +0000

    arm64: dts: rockchip: Expand reg size of vdec node for RK3399
    
    [ Upstream commit 35938c18291b5da7422b2fac6dac0af11aa8d0d7 ]
    
    Expand the reg size for the vdec node to include cache/performance
    registers the rkvdec driver writes to. Also add missing clocks to the
    related power-domain.
    
    Fixes: cbd7214402ec ("arm64: dts: rockchip: Define the rockchip Video Decoder node on rk3399")
    Signed-off-by: Alex Bee <knaerzche@gmail.com>
    Signed-off-by: Jonas Karlman <jonas@kwiboo.se>
    Link: https://lore.kernel.org/r/20231105233630.3927502-10-jonas@kwiboo.se
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4192a26f673afd7072c2c087ae7f6d1278485bd6
Author: Jonas Karlman <jonas@kwiboo.se>
Date:   Sun Nov 5 23:36:15 2023 +0000

    arm64: dts: rockchip: Expand reg size of vdec node for RK3328
    
    [ Upstream commit 0b6240d697a96eaa45a2a5503a274ebb4f162fa3 ]
    
    Expand the reg size for the vdec node to include cache/performance
    registers the rkvdec driver writes to.
    
    Fixes: 17408c9b119d ("arm64: dts: rockchip: Add vdec support for RK3328")
    Signed-off-by: Jonas Karlman <jonas@kwiboo.se>
    Link: https://lore.kernel.org/r/20231105233630.3927502-9-jonas@kwiboo.se
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b1b8ab2bd73f73366817572bca22ad3536eeca8
Author: Mustafa Ismail <mustafa.ismail@intel.com>
Date:   Tue Nov 14 11:02:46 2023 -0600

    RDMA/irdma: Add wait for suspend on SQD
    
    [ Upstream commit bd6da690c27d75cae432c09162d054b34fa2156f ]
    
    Currently, there is no wait for the QP suspend to complete on a modify
    to SQD state. Add a wait, after the modify to SQD state, for the Suspend
    Complete AE. While we are at it, update the suspend timeout value in
    irdma_prep_tc_change to use IRDMA_EVENT_TIMEOUT_MS too.
    
    Fixes: b48c24c2d710 ("RDMA/irdma: Implement device supported verb APIs")
    Signed-off-by: Mustafa Ismail <mustafa.ismail@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Link: https://lore.kernel.org/r/20231114170246.238-3-shiraz.saleem@intel.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 951c6d336ebe26988de0c414a1780a0974b9c1ae
Author: Mustafa Ismail <mustafa.ismail@intel.com>
Date:   Tue Nov 14 11:02:45 2023 -0600

    RDMA/irdma: Do not modify to SQD on error
    
    [ Upstream commit ba12ab66aa83a2340a51ad6e74b284269745138c ]
    
    Remove the modify to SQD before going to ERROR state. It is not needed.
    
    Fixes: b48c24c2d710 ("RDMA/irdma: Implement device supported verb APIs")
    Signed-off-by: Mustafa Ismail <mustafa.ismail@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Link: https://lore.kernel.org/r/20231114170246.238-2-shiraz.saleem@intel.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38772f66723386797c085587e16ae738f849b6c9
Author: Junxian Huang <huangjunxian6@hisilicon.com>
Date:   Sat Oct 28 17:32:42 2023 +0800

    RDMA/hns: Fix unnecessary err return when using invalid congest control algorithm
    
    [ Upstream commit efb9cbf66440482ceaa90493d648226ab7ec2ebf ]
    
    Add a default congest control algorithm so that driver won't return
    an error when the configured algorithm is invalid.
    
    Fixes: f91696f2f053 ("RDMA/hns: Support congestion control type selection according to the FW")
    Signed-off-by: Junxian Huang <huangjunxian6@hisilicon.com>
    Link: https://lore.kernel.org/r/20231028093242.670325-1-huangjunxian6@hisilicon.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24436fe77efef4b16c45d84a10980927b117ebb1
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Wed Nov 8 23:31:13 2023 +0900

    RDMA/core: Fix uninit-value access in ib_get_eth_speed()
    
    [ Upstream commit 0550d4604e2ca4e653dc13f0c009fc42106b6bfc ]
    
    KMSAN reported the following uninit-value access issue:
    
    lo speed is unknown, defaulting to 1000
    =====================================================
    BUG: KMSAN: uninit-value in ib_get_width_and_speed drivers/infiniband/core/verbs.c:1889 [inline]
    BUG: KMSAN: uninit-value in ib_get_eth_speed+0x546/0xaf0 drivers/infiniband/core/verbs.c:1998
     ib_get_width_and_speed drivers/infiniband/core/verbs.c:1889 [inline]
     ib_get_eth_speed+0x546/0xaf0 drivers/infiniband/core/verbs.c:1998
     siw_query_port drivers/infiniband/sw/siw/siw_verbs.c:173 [inline]
     siw_get_port_immutable+0x6f/0x120 drivers/infiniband/sw/siw/siw_verbs.c:203
     setup_port_data drivers/infiniband/core/device.c:848 [inline]
     setup_device drivers/infiniband/core/device.c:1244 [inline]
     ib_register_device+0x1589/0x1df0 drivers/infiniband/core/device.c:1383
     siw_device_register drivers/infiniband/sw/siw/siw_main.c:72 [inline]
     siw_newlink+0x129e/0x13d0 drivers/infiniband/sw/siw/siw_main.c:490
     nldev_newlink+0x8fd/0xa60 drivers/infiniband/core/nldev.c:1763
     rdma_nl_rcv_skb drivers/infiniband/core/netlink.c:239 [inline]
     rdma_nl_rcv+0xe8a/0x1120 drivers/infiniband/core/netlink.c:259
     netlink_unicast_kernel net/netlink/af_netlink.c:1342 [inline]
     netlink_unicast+0xf4b/0x1230 net/netlink/af_netlink.c:1368
     netlink_sendmsg+0x1242/0x1420 net/netlink/af_netlink.c:1910
     sock_sendmsg_nosec net/socket.c:730 [inline]
     __sock_sendmsg net/socket.c:745 [inline]
     ____sys_sendmsg+0x997/0xd60 net/socket.c:2588
     ___sys_sendmsg+0x271/0x3b0 net/socket.c:2642
     __sys_sendmsg net/socket.c:2671 [inline]
     __do_sys_sendmsg net/socket.c:2680 [inline]
     __se_sys_sendmsg net/socket.c:2678 [inline]
     __x64_sys_sendmsg+0x2fa/0x4a0 net/socket.c:2678
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x44/0x110 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x63/0x6b
    
    Local variable lksettings created at:
     ib_get_eth_speed+0x4b/0xaf0 drivers/infiniband/core/verbs.c:1974
     siw_query_port drivers/infiniband/sw/siw/siw_verbs.c:173 [inline]
     siw_get_port_immutable+0x6f/0x120 drivers/infiniband/sw/siw/siw_verbs.c:203
    
    CPU: 0 PID: 11257 Comm: syz-executor.1 Not tainted 6.6.0-14500-g1c41041124bd #10
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.2-1.fc38 04/01/2014
    =====================================================
    
    If __ethtool_get_link_ksettings() fails, `netdev_speed` is set to the
    default value, SPEED_1000. In this case, if `lanes` field of struct
    ethtool_link_ksettings is not initialized, an uninitialized value is passed
    to ib_get_width_and_speed(). This causes the above issue. This patch
    resolves the issue by initializing `lanes` to 0.
    
    Fixes: cb06b6b3f6cb ("RDMA/core: Get IB width and speed from netdev")
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Link: https://lore.kernel.org/r/20231108143113.1360567-1-syoshida@redhat.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3c4786b01aad8c377718f92d6d9b15906ee0a2a
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Thu Nov 2 13:00:55 2023 +0530

    tee: optee: Fix supplicant based device enumeration
    
    [ Upstream commit 7269cba53d906cf257c139d3b3a53ad272176bca ]
    
    Currently supplicant dependent optee device enumeration only registers
    devices whenever tee-supplicant is invoked for the first time. But it
    forgets to remove devices when tee-supplicant daemon stops running and
    closes its context gracefully. This leads to following error for fTPM
    driver during reboot/shutdown:
    
    [   73.466791] tpm tpm0: ftpm_tee_tpm_op_send: SUBMIT_COMMAND invoke error: 0xffff3024
    
    Fix this by adding an attribute for supplicant dependent devices so that
    the user-space service can detect and detach supplicant devices before
    closing the supplicant:
    
    $ for dev in /sys/bus/tee/devices/*; do if [[ -f "$dev/need_supplicant" && -f "$dev/driver/unbind" ]]; \
          then echo $(basename "$dev") > $dev/driver/unbind; fi done
    
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Closes: https://github.com/OP-TEE/optee_os/issues/6094
    Fixes: 5f178bb71e3a ("optee: enable support for multi-stage bus enumeration")
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Reviewed-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Acked-by: Jerome Forissier <jerome.forissier@linaro.org>
    [jw: fixed up Date documentation]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 577209e844bf0e879f6bff128d4d80f0a5fd8ace
Author: Dan Carpenter <dan.carpenter@linaro.org>
Date:   Mon Nov 6 17:07:40 2023 +0300

    mm/damon/sysfs: eliminate potential uninitialized variable warning
    
    [ Upstream commit 85c2ceaafbd306814a3a4740bf4d95ac26a8b36a ]
    
    The "err" variable is not initialized if damon_target_has_pid(ctx) is
    false and sys_target->regions->nr is zero.
    
    Link: https://lkml.kernel.org/r/739e6aaf-a634-4e33-98a8-16546379ec9f@moroto.mountain
    Fixes: 0bcd216c4741 ("mm/damon/sysfs: update monitoring target regions for online input commit")
    Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: SeongJae Park <sj@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45d72eadf21ab807f477e7fffd5767b17c7a2aaf
Author: Arvind Yadav <Arvind.Yadav@amd.com>
Date:   Mon Oct 9 22:43:16 2023 +0530

    drm/amdkfd: get doorbell's absolute offset based on the db_size
    
    [ Upstream commit 367a0af43373d4f791cc8b466a659ecf5aa52377 ]
    
    Here, Adding db_size in byte to find the doorbell's
    absolute offset for both 32-bit and 64-bit doorbell sizes.
    So that doorbell offset will be aligned based on the doorbell
    size.
    
    v2:
    - Addressed the review comment from Felix.
    v3:
    - Adding doorbell_size as parameter to get db absolute offset.
    v4:
      Squash the two patches into one.
    
    Cc: Christian Koenig <christian.koenig@amd.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Shashank Sharma <shashank.sharma@amd.com>
    Signed-off-by: Arvind Yadav <Arvind.Yadav@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffc6425512621b1040596fee6ebedb734251cdb0
Author: Lee Jones <lee@kernel.org>
Date:   Thu Aug 24 08:36:56 2023 +0100

    drm/amd/amdgpu/amdgpu_doorbell_mgr: Correct misdocumented param 'doorbell_index'
    
    [ Upstream commit 04cef5f58395806294a64118cf8a39534bd032a2 ]
    
    Fixes the following W=1 kernel build warning(s):
    
     drivers/gpu/drm/amd/amdgpu/amdgpu_doorbell_mgr.c:123: warning: Function parameter or member 'doorbell_index' not described in 'amdgpu_doorbell_index_on_bar'
     drivers/gpu/drm/amd/amdgpu/amdgpu_doorbell_mgr.c:123: warning: Excess function parameter 'db_index' description in 'amdgpu_doorbell_index_on_bar'
    
    Reviewed-by: Shashank Sharma <shashank.sharma@amd.com>
    Signed-off-by: Lee Jones <lee@kernel.org>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9eef2563234b3f77df279d95673cb6293f2aab1
Author: Wen Gu <guwen@linux.alibaba.com>
Date:   Thu Dec 7 01:02:37 2023 +0800

    net/smc: fix missing byte order conversion in CLC handshake
    
    [ Upstream commit c5a10397d4571bcfd4bd7ca211ee47bcb6792ec3 ]
    
    The byte order conversions of ISM GID and DMB token are missing in
    process of CLC accept and confirm. So fix it.
    
    Fixes: 3d9725a6a133 ("net/smc: common routine for CLC accept and confirm")
    Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Reviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>
    Link: https://lore.kernel.org/r/1701882157-87956-1-git-send-email-guwen@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b03b2ddf0e9060c327bdfc7141293d16ed454e16
Author: Sean Nyekjaer <sean@geanix.com>
Date:   Wed Dec 6 08:16:54 2023 +0100

    net: dsa: microchip: provide a list of valid protocols for xmit handler
    
    [ Upstream commit 1499b89289bf272fd83cb296c82fb5519d0fe93f ]
    
    Provide a list of valid protocols for which the driver will provide
    it's deferred xmit handler.
    
    When using DSA_TAG_PROTO_KSZ8795 protocol, it does not provide a
    "connect" method, therefor ksz_connect() is not allocating ksz_tagger_data.
    
    This avoids the following null pointer dereference:
     ksz_connect_tag_protocol from dsa_register_switch+0x9ac/0xee0
     dsa_register_switch from ksz_switch_register+0x65c/0x828
     ksz_switch_register from ksz_spi_probe+0x11c/0x168
     ksz_spi_probe from spi_probe+0x84/0xa8
     spi_probe from really_probe+0xc8/0x2d8
    
    Fixes: ab32f56a4100 ("net: dsa: microchip: ptp: add packet transmission timestamping")
    Signed-off-by: Sean Nyekjaer <sean@geanix.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20231206071655.1626479-1-sean@geanix.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e036a325a97743e2c7252f9aada5427dba4331e8
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Wed Dec 6 23:31:02 2023 +0200

    drop_monitor: Require 'CAP_SYS_ADMIN' when joining "events" group
    
    [ Upstream commit e03781879a0d524ce3126678d50a80484a513c4b ]
    
    The "NET_DM" generic netlink family notifies drop locations over the
    "events" multicast group. This is problematic since by default generic
    netlink allows non-root users to listen to these notifications.
    
    Fix by adding a new field to the generic netlink multicast group
    structure that when set prevents non-root users or root without the
    'CAP_SYS_ADMIN' capability (in the user namespace owning the network
    namespace) from joining the group. Set this field for the "events"
    group. Use 'CAP_SYS_ADMIN' rather than 'CAP_NET_ADMIN' because of the
    nature of the information that is shared over this group.
    
    Note that the capability check in this case will always be performed
    against the initial user namespace since the family is not netns aware
    and only operates in the initial network namespace.
    
    A new field is added to the structure rather than using the "flags"
    field because the existing field uses uAPI flags and it is inappropriate
    to add a new uAPI flag for an internal kernel check. In net-next we can
    rework the "flags" field to use internal flags and fold the new field
    into it. But for now, in order to reduce the amount of changes, add a
    new field.
    
    Since the information can only be consumed by root, mark the control
    plane operations that start and stop the tracing as root-only using the
    'GENL_ADMIN_PERM' flag.
    
    Tested using [1].
    
    Before:
    
     # capsh -- -c ./dm_repo
     # capsh --drop=cap_sys_admin -- -c ./dm_repo
    
    After:
    
     # capsh -- -c ./dm_repo
     # capsh --drop=cap_sys_admin -- -c ./dm_repo
     Failed to join "events" multicast group
    
    [1]
     $ cat dm.c
     #include <stdio.h>
     #include <netlink/genl/ctrl.h>
     #include <netlink/genl/genl.h>
     #include <netlink/socket.h>
    
     int main(int argc, char **argv)
     {
            struct nl_sock *sk;
            int grp, err;
    
            sk = nl_socket_alloc();
            if (!sk) {
                    fprintf(stderr, "Failed to allocate socket\n");
                    return -1;
            }
    
            err = genl_connect(sk);
            if (err) {
                    fprintf(stderr, "Failed to connect socket\n");
                    return err;
            }
    
            grp = genl_ctrl_resolve_grp(sk, "NET_DM", "events");
            if (grp < 0) {
                    fprintf(stderr,
                            "Failed to resolve \"events\" multicast group\n");
                    return grp;
            }
    
            err = nl_socket_add_memberships(sk, grp, NFNLGRP_NONE);
            if (err) {
                    fprintf(stderr, "Failed to join \"events\" multicast group\n");
                    return err;
            }
    
            return 0;
     }
     $ gcc -I/usr/include/libnl3 -lnl-3 -lnl-genl-3 -o dm_repo dm.c
    
    Fixes: 9a8afc8d3962 ("Network Drop Monitor: Adding drop monitor implementation & Netlink protocol")
    Reported-by: "The UK's National Cyber Security Centre (NCSC)" <security@ncsc.gov.uk>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Link: https://lore.kernel.org/r/20231206213102.1824398-3-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 580c80b6f8814e0a2e6f9948c91fb439fc28aeea
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Wed Dec 6 23:31:01 2023 +0200

    psample: Require 'CAP_NET_ADMIN' when joining "packets" group
    
    [ Upstream commit 44ec98ea5ea9cfecd31a5c4cc124703cb5442832 ]
    
    The "psample" generic netlink family notifies sampled packets over the
    "packets" multicast group. This is problematic since by default generic
    netlink allows non-root users to listen to these notifications.
    
    Fix by marking the group with the 'GENL_UNS_ADMIN_PERM' flag. This will
    prevent non-root users or root without the 'CAP_NET_ADMIN' capability
    (in the user namespace owning the network namespace) from joining the
    group.
    
    Tested using [1].
    
    Before:
    
     # capsh -- -c ./psample_repo
     # capsh --drop=cap_net_admin -- -c ./psample_repo
    
    After:
    
     # capsh -- -c ./psample_repo
     # capsh --drop=cap_net_admin -- -c ./psample_repo
     Failed to join "packets" multicast group
    
    [1]
     $ cat psample.c
     #include <stdio.h>
     #include <netlink/genl/ctrl.h>
     #include <netlink/genl/genl.h>
     #include <netlink/socket.h>
    
     int join_grp(struct nl_sock *sk, const char *grp_name)
     {
            int grp, err;
    
            grp = genl_ctrl_resolve_grp(sk, "psample", grp_name);
            if (grp < 0) {
                    fprintf(stderr, "Failed to resolve \"%s\" multicast group\n",
                            grp_name);
                    return grp;
            }
    
            err = nl_socket_add_memberships(sk, grp, NFNLGRP_NONE);
            if (err) {
                    fprintf(stderr, "Failed to join \"%s\" multicast group\n",
                            grp_name);
                    return err;
            }
    
            return 0;
     }
    
     int main(int argc, char **argv)
     {
            struct nl_sock *sk;
            int err;
    
            sk = nl_socket_alloc();
            if (!sk) {
                    fprintf(stderr, "Failed to allocate socket\n");
                    return -1;
            }
    
            err = genl_connect(sk);
            if (err) {
                    fprintf(stderr, "Failed to connect socket\n");
                    return err;
            }
    
            err = join_grp(sk, "config");
            if (err)
                    return err;
    
            err = join_grp(sk, "packets");
            if (err)
                    return err;
    
            return 0;
     }
     $ gcc -I/usr/include/libnl3 -lnl-3 -lnl-genl-3 -o psample_repo psample.c
    
    Fixes: 6ae0a6286171 ("net: Introduce psample, a new genetlink channel for packet sampling")
    Reported-by: "The UK's National Cyber Security Centre (NCSC)" <security@ncsc.gov.uk>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Link: https://lore.kernel.org/r/20231206213102.1824398-2-idosch@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94e81d1a4bd9cd516da84d060536226a6578565c
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Wed Dec 6 15:27:06 2023 -0800

    bpf: sockmap, updating the sg structure should also update curr
    
    [ Upstream commit bb9aefde5bbaf6c168c77ba635c155b4980c2287 ]
    
    Curr pointer should be updated when the sg structure is shifted.
    
    Fixes: 7246d8ed4dcce ("bpf: helper to pop data from messages")
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/20231206232706.374377-3-john.fastabend@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb30a025982f61910f32e99778db3c0ceceaff5c
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Wed Dec 6 15:27:05 2023 -0800

    net: tls, update curr on splice as well
    
    [ Upstream commit c5a595000e2677e865a39f249c056bc05d6e55fd ]
    
    The curr pointer must also be updated on the splice similar to how
    we do this for other copy types.
    
    Fixes: d829e9c4112b ("tls: convert to generic sk_msg interface")
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Reported-by: Jann Horn <jannh@google.com>
    Link: https://lore.kernel.org/r/20231206232706.374377-2-john.fastabend@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29561ef098a0f6ca5b98f7513580e9f6dfd810fb
Author: Tobias Waldekranz <tobias@waldekranz.com>
Date:   Tue Dec 5 23:13:59 2023 +0100

    net: dsa: mv88e6xxx: Restore USXGMII support for 6393X
    
    [ Upstream commit 0c7ed1f9197aecada33a08b022e484a97bf584ba ]
    
    In 4a56212774ac, USXGMII support was added for 6393X, but this was
    lost in the PCS conversion (the blamed commit), most likely because
    these efforts where more or less done in parallel.
    
    Restore this feature by porting Michal's patch to fit the new
    implementation.
    
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Michal Smulski <michal.smulski@ooma.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Fixes: e5b732a275f5 ("net: dsa: mv88e6xxx: convert 88e639x to phylink_pcs")
    Signed-off-by: Tobias Waldekranz <tobias@waldekranz.com>
    Link: https://lore.kernel.org/r/20231205221359.3926018-1-tobias@waldekranz.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2087d53a66e97a5eb5d1bf558d5bef9e5f891757
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Dec 5 16:18:41 2023 +0000

    tcp: do not accept ACK of bytes we never sent
    
    [ Upstream commit 3d501dd326fb1c73f1b8206d4c6e1d7b15c07e27 ]
    
    This patch is based on a detailed report and ideas from Yepeng Pan
    and Christian Rossow.
    
    ACK seq validation is currently following RFC 5961 5.2 guidelines:
    
       The ACK value is considered acceptable only if
       it is in the range of ((SND.UNA - MAX.SND.WND) <= SEG.ACK <=
       SND.NXT).  All incoming segments whose ACK value doesn't satisfy the
       above condition MUST be discarded and an ACK sent back.  It needs to
       be noted that RFC 793 on page 72 (fifth check) says: "If the ACK is a
       duplicate (SEG.ACK < SND.UNA), it can be ignored.  If the ACK
       acknowledges something not yet sent (SEG.ACK > SND.NXT) then send an
       ACK, drop the segment, and return".  The "ignored" above implies that
       the processing of the incoming data segment continues, which means
       the ACK value is treated as acceptable.  This mitigation makes the
       ACK check more stringent since any ACK < SND.UNA wouldn't be
       accepted, instead only ACKs that are in the range ((SND.UNA -
       MAX.SND.WND) <= SEG.ACK <= SND.NXT) get through.
    
    This can be refined for new (and possibly spoofed) flows,
    by not accepting ACK for bytes that were never sent.
    
    This greatly improves TCP security at a little cost.
    
    I added a Fixes: tag to make sure this patch will reach stable trees,
    even if the 'blamed' patch was adhering to the RFC.
    
    tp->bytes_acked was added in linux-4.2
    
    Following packetdrill test (courtesy of Yepeng Pan) shows
    the issue at hand:
    
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
    +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
    +0 bind(3, ..., ...) = 0
    +0 listen(3, 1024) = 0
    
    // ---------------- Handshake ------------------- //
    
    // when window scale is set to 14 the window size can be extended to
    // 65535 * (2^14) = 1073725440. Linux would accept an ACK packet
    // with ack number in (Server_ISN+1-1073725440. Server_ISN+1)
    // ,though this ack number acknowledges some data never
    // sent by the server.
    
    +0 < S 0:0(0) win 65535 <mss 1400,nop,wscale 14>
    +0 > S. 0:0(0) ack 1 <...>
    +0 < . 1:1(0) ack 1 win 65535
    +0 accept(3, ..., ...) = 4
    
    // For the established connection, we send an ACK packet,
    // the ack packet uses ack number 1 - 1073725300 + 2^32,
    // where 2^32 is used to wrap around.
    // Note: we used 1073725300 instead of 1073725440 to avoid possible
    // edge cases.
    // 1 - 1073725300 + 2^32 = 3221241997
    
    // Oops, old kernels happily accept this packet.
    +0 < . 1:1001(1000) ack 3221241997 win 65535
    
    // After the kernel fix the following will be replaced by a challenge ACK,
    // and prior malicious frame would be dropped.
    +0 > . 1:1(0) ack 1001
    
    Fixes: 354e4aa391ed ("tcp: RFC 5961 5.2 Blind Data Injection Attack Mitigation")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Yepeng Pan <yepeng.pan@cispa.de>
    Reported-by: Christian Rossow <rossow@cispa.de>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Link: https://lore.kernel.org/r/20231205161841.2702925-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1417b7198546edf59b061cd5953b7d8da2c03253
Author: Phil Sutter <phil@nwl.cc>
Date:   Tue Dec 5 21:58:12 2023 +0100

    netfilter: xt_owner: Fix for unsafe access of sk->sk_socket
    
    [ Upstream commit 7ae836a3d630e146b732fe8ef7d86b243748751f ]
    
    A concurrently running sock_orphan() may NULL the sk_socket pointer in
    between check and deref. Follow other users (like nft_meta.c for
    instance) and acquire sk_callback_lock before dereferencing sk_socket.
    
    Fixes: 0265ab44bacc ("[NETFILTER]: merge ipt_owner/ip6t_owner in xt_owner")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Phil Sutter <phil@nwl.cc>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa72b6e62fa52ce777344cf62d9852e7d938f2d2
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Dec 4 14:51:48 2023 +0100

    netfilter: nf_tables: validate family when identifying table via handle
    
    [ Upstream commit f6e1532a2697b81da00bfb184e99d15e01e9d98c ]
    
    Validate table family when looking up for it via NFTA_TABLE_HANDLE.
    
    Fixes: 3ecbfd65f50e ("netfilter: nf_tables: allocate handle and delete objects via handle")
    Reported-by: Xingyuan Mo <hdthky0@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eeba00a89c5c6be4e45b69bef20d1d1b9edb968
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Dec 4 14:25:33 2023 +0100

    netfilter: nf_tables: bail out on mismatching dynset and set expressions
    
    [ Upstream commit 3701cd390fd731ee7ae8b8006246c8db82c72bea ]
    
    If dynset expressions provided by userspace is larger than the declared
    set expressions, then bail out.
    
    Fixes: 48b0ae046ee9 ("netfilter: nftables: netlink support for several set element expressions")
    Reported-by: Xingyuan Mo <hdthky0@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0392d322b45bdd33e7b215caad0f0e581eeb0ee2
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Dec 4 12:29:54 2023 +0100

    netfilter: nf_tables: fix 'exist' matching on bigendian arches
    
    [ Upstream commit 63331e37fb227e796894b31d713697612c8dee7f ]
    
    Maze reports "tcp option fastopen exists" fails to match on
    OpenWrt 22.03.5, r20134-5f15225c1e (5.10.176) router.
    
    "tcp option fastopen exists" translates to:
    inet
      [ exthdr load tcpopt 1b @ 34 + 0 present => reg 1 ]
      [ cmp eq reg 1 0x00000001 ]
    
    .. but existing nft userspace generates a 1-byte compare.
    
    On LSB (x86), "*reg32 = 1" is identical to nft_reg_store8(reg32, 1), but
    not on MSB, which will place the 1 last. IOW, on bigendian aches the cmp8
    is awalys false.
    
    Make sure we store this in a consistent fashion, so existing userspace
    will also work on MSB (bigendian).
    
    Regardless of this patch we can also change nft userspace to generate
    'reg32 == 0' and 'reg32 != 0' instead of u8 == 0 // u8 == 1 when
    adding 'option x missing/exists' expressions as well.
    
    Fixes: 3c1fece8819e ("netfilter: nft_exthdr: Allow checking TCP option presence, too")
    Fixes: b9f9a485fb0e ("netfilter: nft_exthdr: add boolean DCCP option matching")
    Fixes: 055c4b34b94f ("netfilter: nft_fib: Support existence check")
    Reported-by: Maciej Żenczykowski <zenczykowski@gmail.com>
    Closes: https://lore.kernel.org/netfilter-devel/CAHo-OozyEqHUjL2-ntATzeZOiuftLWZ_HU6TOM_js4qLfDEAJg@mail.gmail.com/
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Acked-by: Phil Sutter <phil@nwl.cc>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83e9863785f4b7ecaf58445c95470138238412b1
Author: D. Wythe <alibuda@linux.alibaba.com>
Date:   Thu Nov 30 15:23:23 2023 +0800

    netfilter: bpf: fix bad registration on nf_defrag
    
    [ Upstream commit 1834d62ae88500f37cba4439c3237aa85242272e ]
    
    We should pass a pointer to global_hook to the get_proto_defrag_hook()
    instead of its value, since the passed value won't be updated even if
    the request module was loaded successfully.
    
    Log:
    
    [   54.915713] nf_defrag_ipv4 has bad registration
    [   54.915779] WARNING: CPU: 3 PID: 6323 at net/netfilter/nf_bpf_link.c:62 get_proto_defrag_hook+0x137/0x160
    [   54.915835] CPU: 3 PID: 6323 Comm: fentry Kdump: loaded Tainted: G            E      6.7.0-rc2+ #35
    [   54.915839] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
    [   54.915841] RIP: 0010:get_proto_defrag_hook+0x137/0x160
    [   54.915844] Code: 4f 8c e8 2c cf 68 ff 80 3d db 83 9a 01 00 0f 85 74 ff ff ff 48 89 ee 48 c7 c7 8f 12 4f 8c c6 05 c4 83 9a 01 01 e8 09 ee 5f ff <0f> 0b e9 57 ff ff ff 49 8b 3c 24 4c 63 e5 e8 36 28 6c ff 4c 89 e0
    [   54.915849] RSP: 0018:ffffb676003fbdb0 EFLAGS: 00010286
    [   54.915852] RAX: 0000000000000023 RBX: ffff9596503d5600 RCX: ffff95996fce08c8
    [   54.915854] RDX: 00000000ffffffd8 RSI: 0000000000000027 RDI: ffff95996fce08c0
    [   54.915855] RBP: ffffffff8c4f12de R08: 0000000000000000 R09: 00000000fffeffff
    [   54.915859] R10: ffffb676003fbc70 R11: ffffffff8d363ae8 R12: 0000000000000000
    [   54.915861] R13: ffffffff8e1f75c0 R14: ffffb676003c9000 R15: 00007ffd15e78ef0
    [   54.915864] FS:  00007fb6e9cab740(0000) GS:ffff95996fcc0000(0000) knlGS:0000000000000000
    [   54.915867] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   54.915868] CR2: 00007ffd15e75c40 CR3: 0000000101e62006 CR4: 0000000000360ef0
    [   54.915870] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   54.915871] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   54.915873] Call Trace:
    [   54.915891]  <TASK>
    [   54.915894]  ? __warn+0x84/0x140
    [   54.915905]  ? get_proto_defrag_hook+0x137/0x160
    [   54.915908]  ? __report_bug+0xea/0x100
    [   54.915925]  ? report_bug+0x2b/0x80
    [   54.915928]  ? handle_bug+0x3c/0x70
    [   54.915939]  ? exc_invalid_op+0x18/0x70
    [   54.915942]  ? asm_exc_invalid_op+0x1a/0x20
    [   54.915948]  ? get_proto_defrag_hook+0x137/0x160
    [   54.915950]  bpf_nf_link_attach+0x1eb/0x240
    [   54.915953]  link_create+0x173/0x290
    [   54.915969]  __sys_bpf+0x588/0x8f0
    [   54.915974]  __x64_sys_bpf+0x20/0x30
    [   54.915977]  do_syscall_64+0x45/0xf0
    [   54.915989]  entry_SYSCALL_64_after_hwframe+0x6e/0x76
    [   54.915998] RIP: 0033:0x7fb6e9daa51d
    [   54.916001] Code: 00 c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 2b 89 0c 00 f7 d8 64 89 01 48
    [   54.916003] RSP: 002b:00007ffd15e78ed8 EFLAGS: 00000246 ORIG_RAX: 0000000000000141
    [   54.916006] RAX: ffffffffffffffda RBX: 00007ffd15e78fc0 RCX: 00007fb6e9daa51d
    [   54.916007] RDX: 0000000000000040 RSI: 00007ffd15e78ef0 RDI: 000000000000001c
    [   54.916009] RBP: 000000000000002d R08: 00007fb6e9e73a60 R09: 0000000000000001
    [   54.916010] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000006
    [   54.916012] R13: 0000000000000006 R14: 0000000000000000 R15: 0000000000000000
    [   54.916014]  </TASK>
    [   54.916015] ---[ end trace 0000000000000000 ]---
    
    Fixes: 91721c2d02d3 ("netfilter: bpf: Support BPF_F_NETFILTER_IP_DEFRAG in netfilter link")
    Signed-off-by: D. Wythe <alibuda@linux.alibaba.com>
    Acked-by: Daniel Xu <dxu@dxuuu.xyz>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a365250a4a65f27d92ad71e2028ac1333038d7e6
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Wed Nov 29 20:12:31 2023 +0100

    dt-bindings: interrupt-controller: Allow #power-domain-cells
    
    [ Upstream commit c0a2755aced969e0125fd68ccd95269b28d8913a ]
    
    MPM provides a single genpd. Allow #power-domain-cells = <0>.
    
    Fixes: 54fc9851c0e0 ("dt-bindings: interrupt-controller: Add Qualcomm MPM support")
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Link: https://lore.kernel.org/r/20231129-topic-mpmbindingspd-v2-1-acbe909ceee1@linaro.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b710b35ef66e2397550a4d8d27806964b4bb648f
Author: Rahul Bhansali <rbhansali@marvell.com>
Date:   Tue Dec 5 13:34:34 2023 +0530

    octeontx2-af: Update Tx link register range
    
    [ Upstream commit 7336fc196748f82646b630d5a2e9d283e200b988 ]
    
    On new silicons the TX channels for transmit level has increased.
    This patch fixes the respective register offset range to
    configure the newly added channels.
    
    Fixes: b279bbb3314e ("octeontx2-af: NIX Tx scheduler queue config support")
    Signed-off-by: Rahul Bhansali <rbhansali@marvell.com>
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd1045acc228c92f597ade777f002432614db566
Author: Geetha sowjanya <gakula@marvell.com>
Date:   Tue Dec 5 13:34:33 2023 +0530

    octeontx2-af: Add missing mcs flr handler call
    
    [ Upstream commit d431abd0a9aa27be379fb5f8304062071b0f5a7e ]
    
    If mcs resources are attached to PF/VF. These resources need
    to be freed on FLR. This patch add missing mcs flr call on PF FLR.
    
    Fixes: bd69476e86fc ("octeontx2-af: cn10k: mcs: Install a default TCAM for normal traffic")
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 82b2c5e0b4f4b5c5df319642920bded010c42d81
Author: Geetha sowjanya <gakula@marvell.com>
Date:   Tue Dec 5 13:34:32 2023 +0530

    octeontx2-af: Fix mcs stats register address
    
    [ Upstream commit 3ba98a8c6f8ceb4e01a78f973d8d9017020bbd57 ]
    
    This patch adds the miss mcs stats register
    for mcs supported platforms.
    
    Fixes: 9312150af8da ("octeontx2-af: cn10k: mcs: Support for stats collection")
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b783ee126c01d5254f985dced230b7a799a727e9
Author: Geetha sowjanya <gakula@marvell.com>
Date:   Tue Dec 5 13:34:31 2023 +0530

    octeontx2-af: Fix mcs sa cam entries size
    
    [ Upstream commit 9723b2cca1f0e980c53156b52ea73b93966b3c8a ]
    
    On latest silicon versions SA cam entries increased to 256.
    This patch fixes the datatype of sa_entries in mcs_hw_info
    struct to u16 to hold 256 entries.
    
    Fixes: 080bbd19c9dd ("octeontx2-af: cn10k: mcs: Add mailboxes for port related operations")
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00efd99e36b478b012bc9dacd9e0b1e29834c443
Author: Nithin Dabilpuram <ndabilpuram@marvell.com>
Date:   Tue Dec 5 13:34:30 2023 +0530

    octeontx2-af: Adjust Tx credits when MCS external bypass is disabled
    
    [ Upstream commit dca6fa8644b89f54345e55501b1419316ba5cb29 ]
    
    When MCS external bypass is disabled, MCS returns additional
    2 credits(32B) for every packet Tx'ed on LMAC. To account for
    these extra credits, NIX_AF_TX_LINKX_NORM_CREDIT.CC_MCS_CNT
    needs to be configured as otherwise NIX Tx credits would overflow
    and will never be returned to idle state credit count
    causing issues with credit control and MTU change.
    
    This patch fixes the same by configuring CC_MCS_CNT at probe
    time for MCS enabled SoC's
    
    Fixes: bd69476e86fc ("octeontx2-af: cn10k: mcs: Install a default TCAM for normal traffic")
    Signed-off-by: Nithin Dabilpuram <ndabilpuram@marvell.com>
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2daea952199e3ff0b12a23c15f8d0e5b347ab968
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Mon Dec 4 22:32:32 2023 +0800

    net: hns: fix fake link up on xge port
    
    [ Upstream commit f708aba40f9c1eeb9c7e93ed4863b5f85b09b288 ]
    
    If a xge port just connect with an optical module and no fiber,
    it may have a fake link up because there may be interference on
    the hardware. This patch adds an anti-shake to avoid the problem.
    And the time of anti-shake is base on tests.
    
    Fixes: b917078c1c10 ("net: hns: Add ACPI support to check SFP present")
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 613b5db4c55f68930ead209670dd53ca0c4dfaf4
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Mon Dec 4 22:32:31 2023 +0800

    net: hns: fix wrong head when modify the tx feature when sending packets
    
    [ Upstream commit 84757d0839451b20b11e993128f0a77393ca50c1 ]
    
    Upon changing the tx feature, the hns driver will modify the
    maybe_stop_tx() and fill_desc() functions, if the modify happens
    during packet sending, will cause the hardware and software
    pointers do not match, and the port can not work anymore.
    
    This patch deletes the maybe_stop_tx() and fill_desc() functions
    modification when setting tx feature, and use the skb_is_gro()
    to determine which functions to use in the tx path.
    
    Fixes: 38f616da1c28 ("net:hns: Add support of ethtool TSO set option for Hip06 in HNS")
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Jijie Shao <shaojijie@huawei.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e30ad4729c57b66bb2c8a73abce9618df2bd94b1
Author: Daniil Maximov <daniil31415it@gmail.com>
Date:   Mon Dec 4 11:58:10 2023 +0300

    net: atlantic: Fix NULL dereference of skb pointer in
    
    [ Upstream commit cbe860be36095e68e4e5561ab43610982fb429fd ]
    
    If is_ptp_ring == true in the loop of __aq_ring_xdp_clean function,
    then a timestamp is stored from a packet in a field of skb object,
    which is not allocated at the moment of the call (skb == NULL).
    
    Generalize aq_ptp_extract_ts and other affected functions so they don't
    work with struct sk_buff*, but with struct skb_shared_hwtstamps*.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE
    
    Fixes: 26efaef759a1 ("net: atlantic: Implement xdp data plane")
    Signed-off-by: Daniil Maximov <daniil31415it@gmail.com>
    Reviewed-by: Igor Russkikh <irusskikh@marvell.com>
    Link: https://lore.kernel.org/r/20231204085810.1681386-1-daniil31415it@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08e3e3da6c39e74b2789e9dfb8a2d734c7885ecd
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Sun Dec 3 01:14:41 2023 +0900

    ipv4: ip_gre: Avoid skb_pull() failure in ipgre_xmit()
    
    [ Upstream commit 80d875cfc9d3711a029f234ef7d680db79e8fa4b ]
    
    In ipgre_xmit(), skb_pull() may fail even if pskb_inet_may_pull() returns
    true. For example, applications can use PF_PACKET to create a malformed
    packet with no IP header. This type of packet causes a problem such as
    uninit-value access.
    
    This patch ensures that skb_pull() can pull the required size by checking
    the skb with pskb_network_may_pull() before skb_pull().
    
    Fixes: c54419321455 ("GRE: Refactor GRE tunneling code.")
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Suman Ghosh <sumang@marvell.com>
    Link: https://lore.kernel.org/r/20231202161441.221135-1-syoshida@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77c02d10c4077256f4bbbe4dd73e277acf7d9235
Author: Brett Creeley <brett.creeley@amd.com>
Date:   Mon Dec 4 11:22:34 2023 -0800

    ionic: Fix dim work handling in split interrupt mode
    
    [ Upstream commit 4115ba677c35f694b62298e55f0e04ce84eed469 ]
    
    Currently ionic_dim_work() is incorrect when in
    split interrupt mode. This is because the interrupt
    rate is only being changed for the Rx side even for
    dim running on Tx. Fix this by using the qcq from
    the container_of macro. Also, introduce some local
    variables for a bit of cleanup.
    
    Fixes: a6ff85e0a2d9 ("ionic: remove intr coalesce update from napi")
    Signed-off-by: Brett Creeley <brett.creeley@amd.com>
    Signed-off-by: Shannon Nelson <shannon.nelson@amd.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20231204192234.21017-3-shannon.nelson@amd.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dacbf99cebfa9a3736112d6ab103563b99a8515
Author: Shannon Nelson <shannon.nelson@amd.com>
Date:   Mon Dec 4 11:22:33 2023 -0800

    ionic: fix snprintf format length warning
    
    [ Upstream commit 0ceb3860a67652f9d36dfdecfcd2cb3eb2f4537d ]
    
    Our friendly kernel test robot has reminded us that with a new
    check we have a warning about a potential string truncation.
    In this case it really doesn't hurt anything, but it is worth
    addressing especially since there really is no reason to reserve
    so many bytes for our queue names.  It seems that cutting the
    queue name buffer length in half stops the complaint.
    
    Fixes: c06107cabea3 ("ionic: more ionic name tweaks")
    Reported-by: kernel test robot <lkp@intel.com>
    Closes: https://lore.kernel.org/oe-kbuild-all/202311300201.lO8v7mKU-lkp@intel.com/
    Signed-off-by: Shannon Nelson <shannon.nelson@amd.com>
    Reviewed-by: Brett Creeley <brett.creeley@amd.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20231204192234.21017-2-shannon.nelson@amd.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4a2a4328c85f1830c8caf5bc8fa566057404fe6
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Mon Dec 4 17:08:05 2023 +0100

    tcp: fix mid stream window clamp.
    
    [ Upstream commit 58d3aade20cdddbac6c9707ac0f3f5f8c1278b74 ]
    
    After the blamed commit below, if the user-space application performs
    window clamping when tp->rcv_wnd is 0, the TCP socket will never be
    able to announce a non 0 receive window, even after completely emptying
    the receive buffer and re-setting the window clamp to higher values.
    
    Refactor tcp_set_window_clamp() to address the issue: when the user
    decreases the current clamp value, set rcv_ssthresh according to the
    same logic used at buffer initialization, but ensuring reserved mem
    provisioning.
    
    To avoid code duplication factor-out the relevant bits from
    tcp_adjust_rcv_ssthresh() in a new helper and reuse it in the above
    scenario.
    
    When increasing the clamp value, give the rcv_ssthresh a chance to grow
    according to previously implemented heuristic.
    
    Fixes: 3aa7857fe1d7 ("tcp: enable mid stream window clamp")
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Reported-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/705dad54e6e6e9a010e571bf58e0b35a8ae70503.1701706073.git.pabeni@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc903ddc826f020baf193d8befb6c822baa530e3
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Dec 4 10:40:04 2023 +0800

    net: bnxt: fix a potential use-after-free in bnxt_init_tc
    
    [ Upstream commit d007caaaf052f82ca2340d4c7b32d04a3f5dbf3f ]
    
    When flow_indr_dev_register() fails, bnxt_init_tc will free
    bp->tc_info through kfree(). However, the caller function
    bnxt_init_one() will ignore this failure and call
    bnxt_shutdown_tc() on failure of bnxt_dl_register(), where
    a use-after-free happens. Fix this issue by setting
    bp->tc_info to NULL after kfree().
    
    Fixes: 627c89d00fb9 ("bnxt_en: flow_offload: offload tunnel decap rules via indirect callbacks")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Reviewed-by: Somnath Kotur <somnath.kotur@broadcom.com>
    Link: https://lore.kernel.org/r/20231204024004.8245-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d88c7cf589ded96e2e25b69b2696f993c9417835
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Mon Nov 27 15:33:50 2023 -0800

    iavf: validate tx_coalesce_usecs even if rx_coalesce_usecs is zero
    
    [ Upstream commit a206d9959f5ccd0fb2d54a997c993947ae0e881c ]
    
    In __iavf_set_coalesce, the driver checks both ec->rx_coalesce_usecs and
    ec->tx_coalesce_usecs for validity. It does this via a chain if if/else-if
    blocks. If every single branch of the series of if statements exited, this
    would be fine. However, the rx_coalesce_usecs is checked against zero to
    print an informative message if use_adaptive_rx_coalesce is enabled. If
    this check is true, it short circuits the entire chain of statements,
    preventing validation of the tx_coalesce_usecs field.
    
    Indeed, since commit e792779e6b63 ("iavf: Prevent changing static ITR
    values if adaptive moderation is on") the iavf driver actually rejects any
    change to the tx_coalesce_usecs or rx_coalesce_usecs when
    use_adaptive_tx_coalesce or use_adaptive_rx_coalesce is enabled, making
    this checking a bit redundant.
    
    Fix this error by removing the unnecessary and redundant checks for
    use_adaptive_rx_coalesce and use_adaptive_tx_coalesce. Since zero is a
    valid value, and since the tx_coalesce_usecs and rx_coalesce_usecs fields
    are already unsigned, remove the minimum value check. This allows assigning
    an ITR value ranging from 0-8160 as described by the printed message.
    
    Fixes: 65e87c0398f5 ("i40evf: support queue-specific settings for interrupt moderation")
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab3a730feab91750448d886d06a41a013bd259e1
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Fri Nov 10 09:12:09 2023 +0100

    i40e: Fix unexpected MFS warning message
    
    [ Upstream commit 7d9f22b3d3ef379ed05bd3f3e2de83dfa8da8258 ]
    
    Commit 3a2c6ced90e1 ("i40e: Add a check to see if MFS is set") added
    a warning message that reports unexpected size of port's MFS (max
    frame size) value. This message use for the port number local
    variable 'i' that is wrong.
    In i40e_probe() this 'i' variable is used only to iterate VSIs
    to find FDIR VSI:
    
    <code>
    ...
    /* if FDIR VSI was set up, start it now */
            for (i = 0; i < pf->num_alloc_vsi; i++) {
                    if (pf->vsi[i] && pf->vsi[i]->type == I40E_VSI_FDIR) {
                            i40e_vsi_open(pf->vsi[i]);
                            break;
                    }
            }
    ...
    </code>
    
    So the warning message use for the port number index of FDIR VSI
    if this exists or pf->num_alloc_vsi if not.
    
    Fix the message by using 'pf->hw.port' for the port number.
    
    Fixes: 3a2c6ced90e1 ("i40e: Add a check to see if MFS is set")
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2442e9cbb79c8336de06423193b9e9adb662665c
Author: Marcin Szycik <marcin.szycik@linux.intel.com>
Date:   Tue Nov 7 14:51:38 2023 +0100

    ice: Restore fix disabling RX VLAN filtering
    
    [ Upstream commit 4e7f0087b058cc3cab8f3c32141b51aa5457d298 ]
    
    Fix setting dis_rx_filtering depending on whether port vlan is being
    turned on or off. This was originally fixed in commit c793f8ea15e3 ("ice:
    Fix disabling Rx VLAN filtering with port VLAN enabled"), but while
    refactoring ice_vf_vsi_init_vlan_ops(), the fix has been lost. Restore the
    fix along with the original comment from that change.
    
    Also delete duplicate lines in ice_port_vlan_on().
    
    Fixes: 2946204b3fa8 ("ice: implement bridge port vlan")
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Signed-off-by: Marcin Szycik <marcin.szycik@linux.intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33755da7ae2b47cc1f449ee29da3c7a52c7db600
Author: Zhipeng Lu <alexious@zju.edu.cn>
Date:   Sat Dec 2 17:59:02 2023 +0800

    octeontx2-af: fix a use-after-free in rvu_npa_register_reporters
    
    [ Upstream commit 3c91c909f13f0c32b0d54d75c3f798479b1a84f5 ]
    
    The rvu_dl will be freed in rvu_npa_health_reporters_destroy(rvu_dl)
    after the create_workqueue fails, and after that free, the rvu_dl will
    be translate back through rvu_npa_health_reporters_create,
    rvu_health_reporters_create, and rvu_register_dl. Finally it goes to the
    err_dl_health label, being freed again in
    rvu_health_reporters_destroy(rvu) by rvu_npa_health_reporters_destroy.
    In the second calls of rvu_npa_health_reporters_destroy, however,
    it uses rvu_dl->rvu_npa_health_reporter, which is already freed at
    the end of rvu_npa_health_reporters_destroy in the first call.
    
    So this patch prevents the first destroy by instantly returning -ENONMEN
    when create_workqueue fails. In addition, since the failure of
    create_workqueue is the only entrence of label err, it has been
    integrated into the error-handling path of create_workqueue.
    
    Fixes: f1168d1e207c ("octeontx2-af: Add devlink health reporters for NPA")
    Signed-off-by: Zhipeng Lu <alexious@zju.edu.cn>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Geethasowjanya Akula <gakula@marvell.com>
    Link: https://lore.kernel.org/r/20231202095902.3264863-1-alexious@zju.edu.cn
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7666bfd788418af70da8672fbe6a763d8868e20
Author: Yewon Choi <woni9911@gmail.com>
Date:   Fri Dec 1 15:10:52 2023 +0900

    xsk: Skip polling event check for unbound socket
    
    [ Upstream commit e4d008d49a7135214e0ee70537405b6a069e3a3f ]
    
    In xsk_poll(), checking available events and setting mask bits should
    be executed only when a socket has been bound. Setting mask bits for
    unbound socket is meaningless.
    
    Currently, it checks events even when xsk_check_common() failed.
    To prevent this, we move goto location (skip_tx) after that checking.
    
    Fixes: 1596dae2f17e ("xsk: check IFF_UP earlier in Tx path")
    Signed-off-by: Yewon Choi <woni9911@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Link: https://lore.kernel.org/bpf/20231201061048.GA1510@libra05
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1fbdef91b1ceb3f98afc47fda725f92a6255b27
Author: Jianheng Zhang <Jianheng.Zhang@synopsys.com>
Date:   Fri Dec 1 03:22:03 2023 +0000

    net: stmmac: fix FPE events losing
    
    [ Upstream commit 37e4b8df27bc68340f3fc80dbb27e3549c7f881c ]
    
    The status bits of register MAC_FPE_CTRL_STS are clear on read. Using
    32-bit read for MAC_FPE_CTRL_STS in dwmac5_fpe_configure() and
    dwmac5_fpe_send_mpacket() clear the status bits. Then the stmmac interrupt
    handler missing FPE event status and leads to FPE handshaking failure and
    retries.
    To avoid clear status bits of MAC_FPE_CTRL_STS in dwmac5_fpe_configure()
    and dwmac5_fpe_send_mpacket(), add fpe_csr to stmmac_fpe_cfg structure to
    cache the control bits of MAC_FPE_CTRL_STS and to avoid reading
    MAC_FPE_CTRL_STS in those methods.
    
    Fixes: 5a5586112b92 ("net: stmmac: support FPE link partner hand-shaking procedure")
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Jianheng Zhang <Jianheng.Zhang@synopsys.com>
    Link: https://lore.kernel.org/r/CY5PR12MB637225A7CF529D5BE0FBE59CBF81A@CY5PR12MB6372.namprd12.prod.outlook.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cc9fbe5c02804bb83037599591b6bed09d325af
Author: Naveen Mamindlapalli <naveenm@marvell.com>
Date:   Fri Dec 1 11:03:30 2023 +0530

    octeontx2-pf: consider both Rx and Tx packet stats for adaptive interrupt coalescing
    
    [ Upstream commit adbf100fc47001c93d7e513ecac6fd6e04d5b4a1 ]
    
    The current adaptive interrupt coalescing code updates only rx
    packet stats for dim algorithm. This patch also updates tx packet
    stats which will be useful when there is only tx traffic.
    Also moved configuring hardware adaptive interrupt setting to
    driver dim callback.
    
    Fixes: 6e144b47f560 ("octeontx2-pf: Add support for adaptive interrupt coalescing")
    Signed-off-by: Naveen Mamindlapalli <naveenm@marvell.com>
    Signed-off-by: Suman Ghosh <sumang@marvell.com>
    Reviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>
    Link: https://lore.kernel.org/r/20231201053330.3903694-1-sumang@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5106d7adb74bc6160806b45ffd2321b10ca14ee0
Author: Thomas Reichinger <thomas.reichinger@sohard.de>
Date:   Thu Nov 30 12:35:03 2023 +0100

    arcnet: restoring support for multiple Sohard Arcnet cards
    
    [ Upstream commit 6b17a597fc2f13aaaa0a2780eb7edb9ae7ac9aea ]
    
    Probe of Sohard Arcnet cards fails,
    if 2 or more cards are installed in a system.
    See kernel log:
    [    2.759203] arcnet: arcnet loaded
    [    2.763648] arcnet:com20020: COM20020 chipset support (by David Woodhouse et al.)
    [    2.770585] arcnet:com20020_pci: COM20020 PCI support
    [    2.772295] com20020 0000:02:00.0: enabling device (0000 -> 0003)
    [    2.772354] (unnamed net_device) (uninitialized): PLX-PCI Controls
    ...
    [    3.071301] com20020 0000:02:00.0 arc0-0 (uninitialized): PCI COM20020: station FFh found at F080h, IRQ 101.
    [    3.071305] com20020 0000:02:00.0 arc0-0 (uninitialized): Using CKP 64 - data rate 2.5 Mb/s
    [    3.071534] com20020 0000:07:00.0: enabling device (0000 -> 0003)
    [    3.071581] (unnamed net_device) (uninitialized): PLX-PCI Controls
    ...
    [    3.369501] com20020 0000:07:00.0: Led pci:green:tx:0-0 renamed to pci:green:tx:0-0_1 due to name collision
    [    3.369535] com20020 0000:07:00.0: Led pci:red:recon:0-0 renamed to pci:red:recon:0-0_1 due to name collision
    [    3.370586] com20020 0000:07:00.0 arc0-0 (uninitialized): PCI COM20020: station E1h found at C000h, IRQ 35.
    [    3.370589] com20020 0000:07:00.0 arc0-0 (uninitialized): Using CKP 64 - data rate 2.5 Mb/s
    [    3.370608] com20020: probe of 0000:07:00.0 failed with error -5
    
    commit 5ef216c1f848 ("arcnet: com20020-pci: add rotary index support")
    changes the device name of all COM20020 based PCI cards,
    even if only some cards support this:
            snprintf(dev->name, sizeof(dev->name), "arc%d-%d", dev->dev_id, i);
    
    The error happens because all Sohard Arcnet cards would be called arc0-0,
    since the Sohard Arcnet cards don't have a PLX rotary coder.
    I.e. EAE Arcnet cards have a PLX rotary coder,
    which sets the first decimal, ensuring unique devices names.
    
    This patch adds two new card feature flags to indicate
    which cards support LEDs and the PLX rotary coder.
    For EAE based cards the names still depend on the PLX rotary coder
    (untested, since missing EAE hardware).
    For Sohard based cards, this patch will result in devices
    being called arc0, arc1, ... (tested).
    
    Signed-off-by: Thomas Reichinger <thomas.reichinger@sohard.de>
    Fixes: 5ef216c1f848 ("arcnet: com20020-pci: add rotary index support")
    Link: https://lore.kernel.org/r/20231130113503.6812-1-thomas.reichinger@sohard.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15e1490022e7c89bee335ea742f77eebf2a23a89
Author: Kunwu Chan <chentao@kylinos.cn>
Date:   Fri Dec 1 13:54:47 2023 +0800

    platform/mellanox: Check devm_hwmon_device_register_with_groups() return value
    
    [ Upstream commit 3494a594315b56516988afb6854d75dee5b501db ]
    
    devm_hwmon_device_register_with_groups() returns an error pointer upon
    failure. Check its return value for errors.
    
    Compile-tested only.
    
    Fixes: 1a218d312e65 ("platform/mellanox: mlxbf-pmc: Add Mellanox BlueField PMC driver")
    Suggested-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Suggested-by: Vadim Pasternak <vadimp@nvidia.com>
    Signed-off-by: Kunwu Chan <chentao@kylinos.cn>
    Reviewed-by: Vadim Pasternak <vadimp@nvidia.com>
    Link: https://lore.kernel.org/r/20231201055447.2356001-1-chentao@kylinos.cn
    [ij: split the change into two]
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b2688f9c5897a1ed712d1da4b2721de22a5bbc7
Author: Kunwu Chan <chentao@kylinos.cn>
Date:   Fri Dec 1 13:54:47 2023 +0800

    platform/mellanox: Add null pointer checks for devm_kasprintf()
    
    [ Upstream commit 2c7c857f5fed997be93047d2de853d7f10c8defe ]
    
    devm_kasprintf() returns a pointer to dynamically allocated memory
    which can be NULL upon failure.
    
    Compile-tested only.
    
    Fixes: 1a218d312e65 ("platform/mellanox: mlxbf-pmc: Add Mellanox BlueField PMC driver")
    Suggested-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Suggested-by: Vadim Pasternak <vadimp@nvidia.com>
    Signed-off-by: Kunwu Chan <chentao@kylinos.cn>
    Reviewed-by: Vadim Pasternak <vadimp@nvidia.com>
    Link: https://lore.kernel.org/r/20231201055447.2356001-1-chentao@kylinos.cn
    [ij: split the change into two]
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76914ea593bbdcb5b24210fb24eabf3a89d1a381
Author: David Thompson <davthompson@nvidia.com>
Date:   Thu Nov 30 13:35:15 2023 -0500

    mlxbf-bootctl: correctly identify secure boot with development keys
    
    [ Upstream commit d4eef75279f5e9d594f5785502038c763ce42268 ]
    
    The secure boot state of the BlueField SoC is represented by two bits:
                    0 = production state
                    1 = secure boot enabled
                    2 = non-secure (secure boot disabled)
                    3 = RMA state
    There is also a single bit to indicate whether production keys or
    development keys are being used when secure boot is enabled.
    This single bit (specified by MLXBF_BOOTCTL_SB_DEV_MASK) only has
    meaning if secure boot state equals 1 (secure boot enabled).
    
    The secure boot states are as follows:
    - “GA secured” is when secure boot is enabled with official production keys.
    - “Secured (development)” is when secure boot is enabled with development keys.
    
    Without this fix “GA Secured” is displayed on development cards which is
    misleading. This patch updates the logic in "lifecycle_state_show()" to
    handle the case where the SoC is configured for secure boot and is using
    development keys.
    
    Fixes: 79e29cb8fbc5c ("platform/mellanox: Add bootctl driver for Mellanox BlueField Soc")
    Reviewed-by: Khalil Blaiech <kblaiech@nvidia.com>
    Signed-off-by: David Thompson <davthompson@nvidia.com>
    Link: https://lore.kernel.org/r/20231130183515.17214-1-davthompson@nvidia.com
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b4a883854355e822f727ac4777b9170a62bac18
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Nov 29 13:25:24 2023 -0800

    r8152: Add RTL8152_INACCESSIBLE to r8153_aldps_en()
    
    [ Upstream commit 79321a793945fdbff2f405f84712d0ab81bed287 ]
    
    Delay loops in r8152 should break out if RTL8152_INACCESSIBLE is set
    so that they don't delay too long if the device becomes
    inaccessible. Add the break to the loop in r8153_aldps_en().
    
    Fixes: 4214cc550bf9 ("r8152: check if disabling ALDPS is finished")
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bc63784d6422e2e2965513ac16bf34c765a4fba
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Nov 29 13:25:23 2023 -0800

    r8152: Add RTL8152_INACCESSIBLE to r8153_pre_firmware_1()
    
    [ Upstream commit 8c53a7bd706535a9cf4e2ec3a4e8d61d46353ca0 ]
    
    Delay loops in r8152 should break out if RTL8152_INACCESSIBLE is set
    so that they don't delay too long if the device becomes
    inaccessible. Add the break to the loop in r8153_pre_firmware_1().
    
    Fixes: 9370f2d05a2a ("r8152: support request_firmware for RTL8153")
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bda33e87114fa9b95c4b7c02776516457f48d60
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Nov 29 13:25:22 2023 -0800

    r8152: Add RTL8152_INACCESSIBLE to r8156b_wait_loading_flash()
    
    [ Upstream commit 8a67b47fced9f6a84101eb9ec5ce4c7d64204bc7 ]
    
    Delay loops in r8152 should break out if RTL8152_INACCESSIBLE is set
    so that they don't delay too long if the device becomes
    inaccessible. Add the break to the loop in
    r8156b_wait_loading_flash().
    
    Fixes: 195aae321c82 ("r8152: support new chips")
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7416e0a4d48fc00baa6a5d863898361312b2a73
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Nov 29 13:25:21 2023 -0800

    r8152: Add RTL8152_INACCESSIBLE checks to more loops
    
    [ Upstream commit 32a574c7e2685aa8138754d4d755f9246cc6bd48 ]
    
    Previous commits added checks for RTL8152_INACCESSIBLE in the loops in
    the driver. There are still a few more that keep tripping the driver
    up in error cases and make things take longer than they should. Add
    those in.
    
    All the loops that are part of this commit existed in some form or
    another since the r8152 driver was first introduced, though
    RTL8152_INACCESSIBLE was known as RTL8152_UNPLUG before commit
    715f67f33af4 ("r8152: Rename RTL8152_UNPLUG to RTL8152_INACCESSIBLE")
    
    Fixes: ac718b69301c ("net/usb: new driver for RTL8152")
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8defe1643dd36219c552752d417c34a073592984
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Nov 29 13:25:20 2023 -0800

    r8152: Hold the rtnl_lock for all of reset
    
    [ Upstream commit e62adaeecdc6a1e8ae86e7f3f9f8223a3ede94f5 ]
    
    As of commit d9962b0d4202 ("r8152: Block future register access if
    register access fails") there is a race condition that can happen
    between the USB device reset thread and napi_enable() (not) getting
    called during rtl8152_open(). Specifically:
    * While rtl8152_open() is running we get a register access error
      that's _not_ -ENODEV and queue up a USB reset.
    * rtl8152_open() exits before calling napi_enable() due to any reason
      (including usb_submit_urb() returning an error).
    
    In that case:
    * Since the USB reset is perform in a separate thread asynchronously,
      it can run at anytime USB device lock is not held - even before
      rtl8152_open() has exited with an error and caused __dev_open() to
      clear the __LINK_STATE_START bit.
    * The rtl8152_pre_reset() will notice that the netif_running() returns
      true (since __LINK_STATE_START wasn't cleared) so it won't exit
      early.
    * rtl8152_pre_reset() will then hang in napi_disable() because
      napi_enable() was never called.
    
    We can fix the race by making sure that the r8152 reset routines don't
    run at the same time as we're opening the device. Specifically we need
    the reset routines in their entirety rely on the return value of
    netif_running(). The only way to reliably depend on that is for them
    to hold the rntl_lock() mutex for the duration of reset.
    
    Grabbing the rntl_lock() mutex for the duration of reset seems like a
    long time, but reset is not expected to be common and the rtnl_lock()
    mutex is already held for long durations since the core grabs it
    around the open/close calls.
    
    Fixes: d9962b0d4202 ("r8152: Block future register access if register access fails")
    Reviewed-by: Grant Grundler <grundler@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b47e71da4776339851eeb1ae3a1376d18c0767cb
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Nov 29 21:58:53 2023 -0800

    hv_netvsc: rndis_filter needs to select NLS
    
    [ Upstream commit 6c89f49964375c904cea33c0247467873f4daf2c ]
    
    rndis_filter uses utf8s_to_utf16s() which is provided by setting
    NLS, so select NLS to fix the build error:
    
    ERROR: modpost: "utf8s_to_utf16s" [drivers/net/hyperv/hv_netvsc.ko] undefined!
    
    Fixes: 1ce09e899d28 ("hyperv: Add support for setting MAC from within guests")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Wei Liu <wei.liu@kernel.org>
    Cc: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Simon Horman <horms@kernel.org> # build-tested
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20231130055853.19069-1-rdunlap@infradead.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28b8ed4a02fa95a013a79059f882e17207fe3d9d
Author: Yonghong Song <yonghong.song@linux.dev>
Date:   Thu Nov 30 18:46:40 2023 -0800

    bpf: Fix a verifier bug due to incorrect branch offset comparison with cpu=v4
    
    [ Upstream commit dfce9cb3140592b886838e06f3e0c25fea2a9cae ]
    
    Bpf cpu=v4 support is introduced in [1] and Commit 4cd58e9af8b9
    ("bpf: Support new 32bit offset jmp instruction") added support for new
    32bit offset jmp instruction. Unfortunately, in function
    bpf_adj_delta_to_off(), for new branch insn with 32bit offset, the offset
    (plus/minor a small delta) compares to 16-bit offset bound
    [S16_MIN, S16_MAX], which caused the following verification failure:
      $ ./test_progs-cpuv4 -t verif_scale_pyperf180
      ...
      insn 10 cannot be patched due to 16-bit range
      ...
      libbpf: failed to load object 'pyperf180.bpf.o'
      scale_test:FAIL:expect_success unexpected error: -12 (errno 12)
      #405     verif_scale_pyperf180:FAIL
    
    Note that due to recent llvm18 development, the patch [2] (already applied
    in bpf-next) needs to be applied to bpf tree for testing purpose.
    
    The fix is rather simple. For 32bit offset branch insn, the adjusted
    offset compares to [S32_MIN, S32_MAX] and then verification succeeded.
    
      [1] https://lore.kernel.org/all/20230728011143.3710005-1-yonghong.song@linux.dev
      [2] https://lore.kernel.org/bpf/20231110193644.3130906-1-yonghong.song@linux.dev
    
    Fixes: 4cd58e9af8b9 ("bpf: Support new 32bit offset jmp instruction")
    Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20231201024640.3417057-1-yonghong.song@linux.dev
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3287140282b3c2fef18dfef6b013e4f9d89f9f0
Author: Subbaraya Sundeep <sbhatta@marvell.com>
Date:   Wed Nov 29 11:11:48 2023 +0530

    octeontx2-af: Check return value of nix_get_nixlf before using nixlf
    
    [ Upstream commit 830139e7b6911266a84a77e1f18abf758995cc89 ]
    
    If a NIXLF is not attached to a PF/VF device then
    nix_get_nixlf function fails and returns proper error
    code. But npc_get_default_entry_action does not check it
    and uses garbage value in subsequent calls. Fix this
    by cheking the return value of nix_get_nixlf.
    
    Fixes: 967db3529eca ("octeontx2-af: add support for multicast/promisc packet replication feature")
    Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ddf005fd6cc82a94b8008e14b63ec6a03790fbb
Author: Subbaraya Sundeep <sbhatta@marvell.com>
Date:   Wed Nov 29 10:53:42 2023 +0530

    octeontx2-pf: Add missing mutex lock in otx2_get_pauseparam
    
    [ Upstream commit 9572c949385aa2ef10368287c439bcb7935137c8 ]
    
    All the mailbox messages sent to AF needs to be guarded
    by mutex lock. Add the missing lock in otx2_get_pauseparam
    function.
    
    Fixes: 75f36270990c ("octeontx2-pf: Support to enable/disable pause frames via ethtool")
    Signed-off-by: Subbaraya Sundeep <sbhatta@marvell.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a08768110a6574e4d994b28f448ca5c016fbf0d4
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Nov 29 16:06:30 2023 +0000

    ipv6: fix potential NULL deref in fib6_add()
    
    [ Upstream commit 75475bb51e78a3f54ad2f69380f2a1c985e85f2d ]
    
    If fib6_find_prefix() returns NULL, we should silently fallback
    using fib6_null_entry regardless of RT6_DEBUG value.
    
    syzbot reported:
    
    WARNING: CPU: 0 PID: 5477 at net/ipv6/ip6_fib.c:1516 fib6_add+0x310d/0x3fa0 net/ipv6/ip6_fib.c:1516
    Modules linked in:
    CPU: 0 PID: 5477 Comm: syz-executor.0 Not tainted 6.7.0-rc2-syzkaller-00029-g9b6de136b5f0 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 11/10/2023
    RIP: 0010:fib6_add+0x310d/0x3fa0 net/ipv6/ip6_fib.c:1516
    Code: 00 48 8b 54 24 68 e8 42 22 00 00 48 85 c0 74 14 49 89 c6 e8 d5 d3 c2 f7 eb 5d e8 ce d3 c2 f7 e9 ca 00 00 00 e8 c4 d3 c2 f7 90 <0f> 0b 90 48 b8 00 00 00 00 00 fc ff df 48 8b 4c 24 38 80 3c 01 00
    RSP: 0018:ffffc90005067740 EFLAGS: 00010293
    RAX: ffffffff89cba5bc RBX: ffffc90005067ab0 RCX: ffff88801a2e9dc0
    RDX: 0000000000000000 RSI: 0000000000000001 RDI: 0000000000000000
    RBP: ffffc90005067980 R08: ffffffff89cbca85 R09: 1ffff110040d4b85
    R10: dffffc0000000000 R11: ffffed10040d4b86 R12: 00000000ffffffff
    R13: 1ffff110051c3904 R14: ffff8880206a5c00 R15: ffff888028e1c820
    FS: 00007f763783c6c0(0000) GS:ffff8880b9800000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f763783bff8 CR3: 000000007f74d000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    __ip6_ins_rt net/ipv6/route.c:1303 [inline]
    ip6_route_add+0x88/0x120 net/ipv6/route.c:3847
    ipv6_route_ioctl+0x525/0x7b0 net/ipv6/route.c:4467
    inet6_ioctl+0x21a/0x270 net/ipv6/af_inet6.c:575
    sock_do_ioctl+0x152/0x460 net/socket.c:1220
    sock_ioctl+0x615/0x8c0 net/socket.c:1339
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:871 [inline]
    __se_sys_ioctl+0xf8/0x170 fs/ioctl.c:857
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x45/0x110 arch/x86/entry/common.c:82
    
    Fixes: 7bbfe00e0252 ("ipv6: fix general protection fault in fib6_add()")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Wei Wang <weiwan@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20231129160630.3509216-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e33e81b785f41bf24b1c14728f47f467e184be7
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Wed Nov 29 19:16:54 2023 +0100

    platform/x86: wmi: Skip blocks with zero instances
    
    [ Upstream commit cbf54f37600e874d82886aa3b2f471778cae01ce ]
    
    Some machines like the HP Omen 17 ck2000nf contain WMI blocks
    with zero instances, so any WMI driver which tries to handle the
    associated WMI device will fail.
    Skip such WMI blocks to avoid confusing any WMI drivers.
    
    Reported-by: Alexis Belmonte <alexbelm48@gmail.com>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218188
    Fixes: bff431e49ff5 ("ACPI: WMI: Add ACPI-WMI mapping driver")
    Tested-by: Alexis Belmonte <alexbelm48@gmail.com>
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Link: https://lore.kernel.org/r/20231129181654.5800-1-W_Armin@gmx.de
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30460e7e27dab2757841941cabb5956f90d5b5fa
Author: Luca Ceresoli <luca.ceresoli@bootlin.com>
Date:   Thu Nov 23 15:47:18 2023 +0100

    of: dynamic: Fix of_reconfig_get_state_change() return value documentation
    
    [ Upstream commit d79972789d17499b6091ded2fc0c6763c501a5ba ]
    
    The documented numeric return values do not match the actual returned
    values. Fix them by using the enum names instead of raw numbers.
    
    Fixes: b53a2340d0d3 ("of/reconfig: Add of_reconfig_get_state_change() of notifier helper.")
    Signed-off-by: Luca Ceresoli <luca.ceresoli@bootlin.com>
    Link: https://lore.kernel.org/r/20231123-fix-of_reconfig_get_state_change-docs-v1-1-f51892050ff9@bootlin.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb6b8919ebf81fcac7e1fb623925af1f7411a198
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 20 16:42:33 2023 +0100

    platform/x86: asus-wmi: Move i8042 filter install to shared asus-wmi code
    
    [ Upstream commit b52cbca22cbf6c9d2700c1e576d0ddcc670e49d5 ]
    
    asus-nb-wmi calls i8042_install_filter() in some cases, but it never
    calls i8042_remove_filter(). This means that a dangling pointer to
    the filter function is left after rmmod leading to crashes.
    
    Fix this by moving the i8042-filter installation to the shared
    asus-wmi code and also remove it from the shared code on driver unbind.
    
    Fixes: b5643539b825 ("platform/x86: asus-wmi: Filter buggy scan codes on ASUS Q500A")
    Cc: Oleksij Rempel <linux@rempel-privat.de>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20231120154235.610808-2-hdegoede@redhat.com
    Reviewed-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cb7001ecd0f7cbeaf0f64ec035bc6bc3ad6dc17
Author: Nícolas F. R. A. Prado <nfraprado@collabora.com>
Date:   Tue Nov 7 17:55:28 2023 -0500

    dt: dt-extract-compatibles: Don't follow symlinks when walking tree
    
    [ Upstream commit 8f51593cdcab82fb23ef2e1a0010b2e6f99aae02 ]
    
    The iglob function, which we use to find C source files in the kernel
    tree, always follows symbolic links. This can cause unintentional
    recursions whenever a symbolic link points to a parent directory. A
    common scenario is building the kernel with the output set to a
    directory inside the kernel tree, which will contain such a symlink.
    
    Instead of using the iglob function, use os.walk to traverse the
    directory tree, which by default doesn't follow symbolic links. fnmatch
    is then used to match the glob on the filename, as well as ignore hidden
    files (which were ignored by default with iglob).
    
    This approach runs just as fast as using iglob.
    
    Fixes: b6acf8073517 ("dt: Add a check for undocumented compatible strings in kernel")
    Reported-by: Aishwarya TCV <aishwarya.tcv@arm.com>
    Closes: https://lore.kernel.org/all/e90cb52f-d55b-d3ba-3933-6cc7b43fcfbc@arm.com
    Signed-off-by: "Nícolas F. R. A. Prado" <nfraprado@collabora.com>
    Link: https://lore.kernel.org/r/20231107225624.9811-1-nfraprado@collabora.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c35bcede4ffa43a581460ff79ec969d535db0b84
Author: Nícolas F. R. A. Prado <nfraprado@collabora.com>
Date:   Mon Aug 28 17:13:10 2023 -0400

    dt: dt-extract-compatibles: Handle cfile arguments in generator function
    
    [ Upstream commit eb2139fc0da63b89a2ad565ecd8133a37e8b7c4f ]
    
    Move the handling of the cfile arguments to a separate generator
    function to avoid redundancy.
    
    Signed-off-by: Nícolas F. R. A. Prado <nfraprado@collabora.com>
    Link: https://lore.kernel.org/r/20230828211424.2964562-2-nfraprado@collabora.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Stable-dep-of: 8f51593cdcab ("dt: dt-extract-compatibles: Don't follow symlinks when walking tree")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 239bff0171a86e1bafd7da03631d74df1dfec6f1
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Mon Dec 4 11:31:41 2023 +0300

    x86/tdx: Allow 32-bit emulation by default
    
    [ upstream commit f4116bfc44621882556bbf70f5284fbf429a5cf6 ]
    
    32-bit emulation was disabled on TDX to prevent a possible attack by
    a VMM injecting an interrupt on vector 0x80.
    
    Now that int80_emulation() has a check for external interrupts the
    limitation can be lifted.
    
    To distinguish software interrupts from external ones, int80_emulation()
    checks the APIC ISR bit relevant to the 0x80 vector. For
    software interrupts, this bit will be 0.
    
    On TDX, the VAPIC state (including ISR) is protected and cannot be
    manipulated by the VMM. The ISR bit is set by the microcode flow during
    the handling of posted interrupts.
    
    [ dhansen: more changelog tweaks ]
    
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@vger.kernel.org> # v6.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22ca647c8f880f21881e9b2d38070dc61196a39d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Dec 4 11:31:40 2023 +0300

    x86/entry: Do not allow external 0x80 interrupts
    
    [ upstream commit 55617fb991df535f953589586468612351575704 ]
    
    The INT 0x80 instruction is used for 32-bit x86 Linux syscalls. The
    kernel expects to receive a software interrupt as a result of the INT
    0x80 instruction. However, an external interrupt on the same vector
    also triggers the same codepath.
    
    An external interrupt on vector 0x80 will currently be interpreted as a
    32-bit system call, and assuming that it was a user context.
    
    Panic on external interrupts on the vector.
    
    To distinguish software interrupts from external ones, the kernel checks
    the APIC ISR bit relevant to the 0x80 vector. For software interrupts,
    this bit will be 0.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@vger.kernel.org> # v6.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4591766ff6552339fbaa3d3c71814faef1988c2f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Dec 4 11:31:39 2023 +0300

    x86/entry: Convert INT 0x80 emulation to IDTENTRY
    
    [ upstream commit be5341eb0d43b1e754799498bd2e8756cc167a41 ]
    
    There is no real reason to have a separate ASM entry point implementation
    for the legacy INT 0x80 syscall emulation on 64-bit.
    
    IDTENTRY provides all the functionality needed with the only difference
    that it does not:
    
      - save the syscall number (AX) into pt_regs::orig_ax
      - set pt_regs::ax to -ENOSYS
    
    Both can be done safely in the C code of an IDTENTRY before invoking any of
    the syscall related functions which depend on this convention.
    
    Aside of ASM code reduction this prepares for detecting and handling a
    local APIC injected vector 0x80.
    
    [ kirill.shutemov: More verbose comments ]
    Suggested-by: Linus Torvalds <torvalds@linuxfoundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@vger.kernel.org> # v6.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34c686e5be2fa1c03ae09568159a9ef37d1c7cf5
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Mon Dec 4 11:31:38 2023 +0300

    x86/coco: Disable 32-bit emulation by default on TDX and SEV
    
    [ upstream commit b82a8dbd3d2f4563156f7150c6f2ecab6e960b30 ]
    
    The INT 0x80 instruction is used for 32-bit x86 Linux syscalls. The
    kernel expects to receive a software interrupt as a result of the INT
    0x80 instruction. However, an external interrupt on the same vector
    triggers the same handler.
    
    The kernel interprets an external interrupt on vector 0x80 as a 32-bit
    system call that came from userspace.
    
    A VMM can inject external interrupts on any arbitrary vector at any
    time.  This remains true even for TDX and SEV guests where the VMM is
    untrusted.
    
    Put together, this allows an untrusted VMM to trigger int80 syscall
    handling at any given point. The content of the guest register file at
    that moment defines what syscall is triggered and its arguments. It
    opens the guest OS to manipulation from the VMM side.
    
    Disable 32-bit emulation by default for TDX and SEV. User can override
    it with the ia32_emulation=y command line option.
    
    [ dhansen: reword the changelog ]
    
    Reported-by: Supraja Sridhara <supraja.sridhara@inf.ethz.ch>
    Reported-by: Benedict Schlüter <benedict.schlueter@inf.ethz.ch>
    Reported-by: Mark Kuhne <mark.kuhne@inf.ethz.ch>
    Reported-by: Andrin Bertschi <andrin.bertschi@inf.ethz.ch>
    Reported-by: Shweta Shinde <shweta.shinde@inf.ethz.ch>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Borislav Petkov (AMD) <bp@alien8.de>
    Cc: <stable@vger.kernel.org> # 6.0+: 1da5c9b x86: Introduce ia32_enabled()
    Cc: <stable@vger.kernel.org> # 6.0+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f259af26ee04f11cb2c3af0a6873a6bcb67dd338
Author: Nikolay Borisov <nik.borisov@suse.com>
Date:   Fri Jun 23 14:14:04 2023 +0300

    x86: Introduce ia32_enabled()
    
    [ upstream commit 1da5c9bc119d3a749b519596b93f9b2667e93c4a ]
    
    IA32 support on 64bit kernels depends on whether CONFIG_IA32_EMULATION
    is selected or not. As it is a compile time option it doesn't
    provide the flexibility to have distributions set their own policy for
    IA32 support and give the user the flexibility to override it.
    
    As a first step introduce ia32_enabled() which abstracts whether IA32
    compat is turned on or off. Upcoming patches will implement
    the ability to set IA32 compat state at boot time.
    
    Signed-off-by: Nikolay Borisov <nik.borisov@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20230623111409.3047467-2-nik.borisov@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfa1898cef4c33fefb402d3aec1cca8df146e34c
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Nov 17 18:38:33 2023 +0100

    dm-crypt: start allocating with MAX_ORDER
    
    [ Upstream commit 13648e04a9b831b3dfa5cf3887dfa6cf8fe5fe69 ]
    
    Commit 23baf831a32c ("mm, treewide: redefine MAX_ORDER sanely")
    changed the meaning of MAX_ORDER from exclusive to inclusive. So, we
    can allocate compound pages with up to 1 << MAX_ORDER pages.
    
    Reflect this change in dm-crypt and start trying to allocate compound
    pages with MAX_ORDER.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 915864d18641ff263efdef887d699b9103ee0878
Author: YuanShang <YuanShang.Mao@amd.com>
Date:   Tue Oct 31 10:32:37 2023 +0800

    drm/amdgpu: correct chunk_ptr to a pointer to chunk.
    
    [ Upstream commit 50d51374b498457c4dea26779d32ccfed12ddaff ]
    
    The variable "chunk_ptr" should be a pointer pointing
    to a struct drm_amdgpu_cs_chunk instead of to a pointer
    of that.
    
    Signed-off-by: YuanShang <YuanShang.Mao@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8f5cd042305f18f67db0be7732c6702798073e6
Author: Le Ma <le.ma@amd.com>
Date:   Mon Nov 13 18:05:34 2023 +0800

    drm/amdgpu: finalizing mem_partitions at the end of GMC v9 sw_fini
    
    [ Upstream commit bdb72185d310fc8049c7ea95221d640e9e7165e5 ]
    
    The valid num_mem_partitions is required during ttm pool fini,
    thus move the cleanup at the end of the function.
    
    Signed-off-by: Le Ma <le.ma@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a56e61b57791f2e4db66a80b723b8515ea5880f
Author: Victor Lu <victorchengchi.lu@amd.com>
Date:   Wed Oct 4 14:24:15 2023 -0400

    drm/amdgpu: Do not program VF copy regs in mmhub v1.8 under SRIOV (v2)
    
    [ Upstream commit 0288603040c38ccfeb5342f34a52673366d90038 ]
    
    MC_VM_AGP_* registers should not be programmed by guest driver.
    
    v2: move early return outside of loop
    
    Signed-off-by: Victor Lu <victorchengchi.lu@amd.com>
    Reviewed-by: Samir Dhume <samir.dhume@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b97debd07a8da5b2d47d5c77aad9b7d4ea53942a
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Wed Nov 15 13:16:53 2023 +0900

    kconfig: fix memory leak from range properties
    
    [ Upstream commit ae1eff0349f2e908fc083630e8441ea6dc434dc0 ]
    
    Currently, sym_validate_range() duplicates the range string using
    xstrdup(), which is overwritten by a subsequent sym_calc_value() call.
    It results in a memory leak.
    
    Instead, only the pointer should be copied.
    
    Below is a test case, with a summary from Valgrind.
    
    [Test Kconfig]
    
      config FOO
              int "foo"
              range 10 20
    
    [Test .config]
    
      CONFIG_FOO=0
    
    [Before]
    
      LEAK SUMMARY:
         definitely lost: 3 bytes in 1 blocks
         indirectly lost: 0 bytes in 0 blocks
           possibly lost: 0 bytes in 0 blocks
         still reachable: 17,465 bytes in 21 blocks
              suppressed: 0 bytes in 0 blocks
    
    [After]
    
      LEAK SUMMARY:
         definitely lost: 0 bytes in 0 blocks
         indirectly lost: 0 bytes in 0 blocks
           possibly lost: 0 bytes in 0 blocks
         still reachable: 17,462 bytes in 20 blocks
              suppressed: 0 bytes in 0 blocks
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1205cc72b47765dbfd40ca6c0cfb33da0274008
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Wed Nov 1 02:46:27 2023 +0900

    modpost: fix section mismatch message for RELA
    
    [ Upstream commit 1c4a7587d1bbee0fd53b63af60e4244a62775f57 ]
    
    The section mismatch check prints a bogus symbol name on some
    architectures.
    
    [test code]
    
      #include <linux/init.h>
    
      int __initdata foo;
      int get_foo(void) { return foo; }
    
    If you compile it with GCC for riscv or loongarch, modpost will show an
    incorrect symbol name:
    
      WARNING: modpost: vmlinux: section mismatch in reference: get_foo+0x8 (section: .text) -> done (section: .init.data)
    
    To get the correct symbol address, the st_value must be added.
    
    This issue has never been noticed since commit 93684d3b8062 ("kbuild:
    include symbol names in section mismatch warnings") presumably because
    st_value becomes zero on most architectures when the referenced symbol
    is looked up. It is not true for riscv or loongarch, at least.
    
    With this fix, modpost will show the correct symbol name:
    
      WARNING: modpost: vmlinux: section mismatch in reference: get_foo+0x8 (section: .text) -> foo (section: .init.data)
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a07b662e54ed0c8a795d38f42c731ea58a9f09d
Author: Alex Pakhunov <alexey.pakhunov@spacex.com>
Date:   Mon Nov 13 10:23:50 2023 -0800

    tg3: Increment tx_dropped in tg3_tso_bug()
    
    [ Upstream commit 17dd5efe5f36a96bd78012594fabe21efb01186b ]
    
    tg3_tso_bug() drops a packet if it cannot be segmented for any reason.
    The number of discarded frames should be incremented accordingly.
    
    Signed-off-by: Alex Pakhunov <alexey.pakhunov@spacex.com>
    Signed-off-by: Vincent Wong <vincent.wong2@spacex.com>
    Reviewed-by: Pavan Chebbi <pavan.chebbi@broadcom.com>
    Link: https://lore.kernel.org/r/20231113182350.37472-2-alexey.pakhunov@spacex.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 763a1b3177d9cb44e17000473a83a984271f0688
Author: Alex Pakhunov <alexey.pakhunov@spacex.com>
Date:   Mon Nov 13 10:23:49 2023 -0800

    tg3: Move the [rt]x_dropped counters to tg3_napi
    
    [ Upstream commit 907d1bdb8b2cc0357d03a1c34d2a08d9943760b1 ]
    
    This change moves [rt]x_dropped counters to tg3_napi so that they can be
    updated by a single writer, race-free.
    
    Signed-off-by: Alex Pakhunov <alexey.pakhunov@spacex.com>
    Signed-off-by: Vincent Wong <vincent.wong2@spacex.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/20231113182350.37472-1-alexey.pakhunov@spacex.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90ed718d6a8e40ea58573f9fd90c8ebda20ca58d
Author: Nick Terrell <terrelln@fb.com>
Date:   Thu Oct 12 12:55:34 2023 -0700

    zstd: Fix array-index-out-of-bounds UBSAN warning
    
    [ Upstream commit 77618db346455129424fadbbaec596a09feaf3bb ]
    
    Zstd used an array of length 1 to mean a flexible array for C89
    compatibility. Switch to a C99 flexible array to fix the UBSAN warning.
    
    Tested locally by booting the kernel and writing to and reading from a
    BtrFS filesystem with zstd compression enabled. I was unable to reproduce
    the issue before the fix, however it is a trivial change.
    
    Link: https://lkml.kernel.org/r/20231012213428.1390905-1-nickrterrell@gmail.com
    Reported-by: syzbot+1f2eb3e8cd123ffce499@syzkaller.appspotmail.com
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Reported-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Nick Terrell <terrelln@fb.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5fb5ac7cee29cea9156e734fd652a66417d32fc
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Nov 7 15:32:55 2023 +1000

    nouveau: use an rwlock for the event lock.
    
    [ Upstream commit a2e36cd56041e277d7d81d35638fd8d9731e21f5 ]
    
    This allows it to break the following circular locking dependency.
    
    Aug 10 07:01:29 dg1test kernel: ======================================================
    Aug 10 07:01:29 dg1test kernel: WARNING: possible circular locking dependency detected
    Aug 10 07:01:29 dg1test kernel: 6.4.0-rc7+ #10 Not tainted
    Aug 10 07:01:29 dg1test kernel: ------------------------------------------------------
    Aug 10 07:01:29 dg1test kernel: wireplumber/2236 is trying to acquire lock:
    Aug 10 07:01:29 dg1test kernel: ffff8fca5320da18 (&fctx->lock){-...}-{2:2}, at: nouveau_fence_wait_uevent_handler+0x2b/0x100 [nouveau]
    Aug 10 07:01:29 dg1test kernel:
                                    but task is already holding lock:
    Aug 10 07:01:29 dg1test kernel: ffff8fca41208610 (&event->list_lock#2){-...}-{2:2}, at: nvkm_event_ntfy+0x50/0xf0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:
                                    which lock already depends on the new lock.
    Aug 10 07:01:29 dg1test kernel:
                                    the existing dependency chain (in reverse order) is:
    Aug 10 07:01:29 dg1test kernel:
                                    -> #3 (&event->list_lock#2){-...}-{2:2}:
    Aug 10 07:01:29 dg1test kernel:        _raw_spin_lock_irqsave+0x4b/0x70
    Aug 10 07:01:29 dg1test kernel:        nvkm_event_ntfy+0x50/0xf0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        ga100_fifo_nonstall_intr+0x24/0x30 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_intr+0x12c/0x240 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        __handle_irq_event_percpu+0x88/0x240
    Aug 10 07:01:29 dg1test kernel:        handle_irq_event+0x38/0x80
    Aug 10 07:01:29 dg1test kernel:        handle_edge_irq+0xa3/0x240
    Aug 10 07:01:29 dg1test kernel:        __common_interrupt+0x72/0x160
    Aug 10 07:01:29 dg1test kernel:        common_interrupt+0x60/0xe0
    Aug 10 07:01:29 dg1test kernel:        asm_common_interrupt+0x26/0x40
    Aug 10 07:01:29 dg1test kernel:
                                    -> #2 (&device->intr.lock){-...}-{2:2}:
    Aug 10 07:01:29 dg1test kernel:        _raw_spin_lock_irqsave+0x4b/0x70
    Aug 10 07:01:29 dg1test kernel:        nvkm_inth_allow+0x2c/0x80 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_event_ntfy_state+0x181/0x250 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_event_ntfy_allow+0x63/0xd0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_uevent_mthd+0x4d/0x70 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_ioctl+0x10b/0x250 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvif_object_mthd+0xa8/0x1f0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvif_event_allow+0x2a/0xa0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nouveau_fence_enable_signaling+0x78/0x80 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        __dma_fence_enable_signaling+0x5e/0x100
    Aug 10 07:01:29 dg1test kernel:        dma_fence_add_callback+0x4b/0xd0
    Aug 10 07:01:29 dg1test kernel:        nouveau_cli_work_queue+0xae/0x110 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nouveau_gem_object_close+0x1d1/0x2a0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        drm_gem_handle_delete+0x70/0xe0 [drm]
    Aug 10 07:01:29 dg1test kernel:        drm_ioctl_kernel+0xa5/0x150 [drm]
    Aug 10 07:01:29 dg1test kernel:        drm_ioctl+0x256/0x490 [drm]
    Aug 10 07:01:29 dg1test kernel:        nouveau_drm_ioctl+0x5a/0xb0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        __x64_sys_ioctl+0x91/0xd0
    Aug 10 07:01:29 dg1test kernel:        do_syscall_64+0x3c/0x90
    Aug 10 07:01:29 dg1test kernel:        entry_SYSCALL_64_after_hwframe+0x72/0xdc
    Aug 10 07:01:29 dg1test kernel:
                                    -> #1 (&event->refs_lock#4){....}-{2:2}:
    Aug 10 07:01:29 dg1test kernel:        _raw_spin_lock_irqsave+0x4b/0x70
    Aug 10 07:01:29 dg1test kernel:        nvkm_event_ntfy_state+0x37/0x250 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_event_ntfy_allow+0x63/0xd0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_uevent_mthd+0x4d/0x70 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_ioctl+0x10b/0x250 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvif_object_mthd+0xa8/0x1f0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvif_event_allow+0x2a/0xa0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nouveau_fence_enable_signaling+0x78/0x80 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        __dma_fence_enable_signaling+0x5e/0x100
    Aug 10 07:01:29 dg1test kernel:        dma_fence_add_callback+0x4b/0xd0
    Aug 10 07:01:29 dg1test kernel:        nouveau_cli_work_queue+0xae/0x110 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nouveau_gem_object_close+0x1d1/0x2a0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        drm_gem_handle_delete+0x70/0xe0 [drm]
    Aug 10 07:01:29 dg1test kernel:        drm_ioctl_kernel+0xa5/0x150 [drm]
    Aug 10 07:01:29 dg1test kernel:        drm_ioctl+0x256/0x490 [drm]
    Aug 10 07:01:29 dg1test kernel:        nouveau_drm_ioctl+0x5a/0xb0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        __x64_sys_ioctl+0x91/0xd0
    Aug 10 07:01:29 dg1test kernel:        do_syscall_64+0x3c/0x90
    Aug 10 07:01:29 dg1test kernel:        entry_SYSCALL_64_after_hwframe+0x72/0xdc
    Aug 10 07:01:29 dg1test kernel:
                                    -> #0 (&fctx->lock){-...}-{2:2}:
    Aug 10 07:01:29 dg1test kernel:        __lock_acquire+0x14e3/0x2240
    Aug 10 07:01:29 dg1test kernel:        lock_acquire+0xc8/0x2a0
    Aug 10 07:01:29 dg1test kernel:        _raw_spin_lock_irqsave+0x4b/0x70
    Aug 10 07:01:29 dg1test kernel:        nouveau_fence_wait_uevent_handler+0x2b/0x100 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_client_event+0xf/0x20 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_event_ntfy+0x9b/0xf0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        ga100_fifo_nonstall_intr+0x24/0x30 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        nvkm_intr+0x12c/0x240 [nouveau]
    Aug 10 07:01:29 dg1test kernel:        __handle_irq_event_percpu+0x88/0x240
    Aug 10 07:01:29 dg1test kernel:        handle_irq_event+0x38/0x80
    Aug 10 07:01:29 dg1test kernel:        handle_edge_irq+0xa3/0x240
    Aug 10 07:01:29 dg1test kernel:        __common_interrupt+0x72/0x160
    Aug 10 07:01:29 dg1test kernel:        common_interrupt+0x60/0xe0
    Aug 10 07:01:29 dg1test kernel:        asm_common_interrupt+0x26/0x40
    Aug 10 07:01:29 dg1test kernel:
                                    other info that might help us debug this:
    Aug 10 07:01:29 dg1test kernel: Chain exists of:
                                      &fctx->lock --> &device->intr.lock --> &event->list_lock#2
    Aug 10 07:01:29 dg1test kernel:  Possible unsafe locking scenario:
    Aug 10 07:01:29 dg1test kernel:        CPU0                    CPU1
    Aug 10 07:01:29 dg1test kernel:        ----                    ----
    Aug 10 07:01:29 dg1test kernel:   lock(&event->list_lock#2);
    Aug 10 07:01:29 dg1test kernel:                                lock(&device->intr.lock);
    Aug 10 07:01:29 dg1test kernel:                                lock(&event->list_lock#2);
    Aug 10 07:01:29 dg1test kernel:   lock(&fctx->lock);
    Aug 10 07:01:29 dg1test kernel:
                                     *** DEADLOCK ***
    Aug 10 07:01:29 dg1test kernel: 2 locks held by wireplumber/2236:
    Aug 10 07:01:29 dg1test kernel:  #0: ffff8fca53177bf8 (&device->intr.lock){-...}-{2:2}, at: nvkm_intr+0x29/0x240 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  #1: ffff8fca41208610 (&event->list_lock#2){-...}-{2:2}, at: nvkm_event_ntfy+0x50/0xf0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:
                                    stack backtrace:
    Aug 10 07:01:29 dg1test kernel: CPU: 6 PID: 2236 Comm: wireplumber Not tainted 6.4.0-rc7+ #10
    Aug 10 07:01:29 dg1test kernel: Hardware name: Gigabyte Technology Co., Ltd. Z390 I AORUS PRO WIFI/Z390 I AORUS PRO WIFI-CF, BIOS F8 11/05/2021
    Aug 10 07:01:29 dg1test kernel: Call Trace:
    Aug 10 07:01:29 dg1test kernel:  <TASK>
    Aug 10 07:01:29 dg1test kernel:  dump_stack_lvl+0x5b/0x90
    Aug 10 07:01:29 dg1test kernel:  check_noncircular+0xe2/0x110
    Aug 10 07:01:29 dg1test kernel:  __lock_acquire+0x14e3/0x2240
    Aug 10 07:01:29 dg1test kernel:  lock_acquire+0xc8/0x2a0
    Aug 10 07:01:29 dg1test kernel:  ? nouveau_fence_wait_uevent_handler+0x2b/0x100 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  ? lock_acquire+0xc8/0x2a0
    Aug 10 07:01:29 dg1test kernel:  _raw_spin_lock_irqsave+0x4b/0x70
    Aug 10 07:01:29 dg1test kernel:  ? nouveau_fence_wait_uevent_handler+0x2b/0x100 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  nouveau_fence_wait_uevent_handler+0x2b/0x100 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  nvkm_client_event+0xf/0x20 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  nvkm_event_ntfy+0x9b/0xf0 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  ga100_fifo_nonstall_intr+0x24/0x30 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  nvkm_intr+0x12c/0x240 [nouveau]
    Aug 10 07:01:29 dg1test kernel:  __handle_irq_event_percpu+0x88/0x240
    Aug 10 07:01:29 dg1test kernel:  handle_irq_event+0x38/0x80
    Aug 10 07:01:29 dg1test kernel:  handle_edge_irq+0xa3/0x240
    Aug 10 07:01:29 dg1test kernel:  __common_interrupt+0x72/0x160
    Aug 10 07:01:29 dg1test kernel:  common_interrupt+0x60/0xe0
    Aug 10 07:01:29 dg1test kernel:  asm_common_interrupt+0x26/0x40
    Aug 10 07:01:29 dg1test kernel: RIP: 0033:0x7fb66174d700
    Aug 10 07:01:29 dg1test kernel: Code: c1 e2 05 29 ca 8d 0c 10 0f be 07 84 c0 75 eb 89 c8 c3 0f 1f 84 00 00 00 00 00 f3 0f 1e fa e9 d7 0f fc ff 0f 1f 80 00 00 00 00 <f3> 0f 1e fa e9 c7 0f fc>
    Aug 10 07:01:29 dg1test kernel: RSP: 002b:00007ffdd3c48438 EFLAGS: 00000206
    Aug 10 07:01:29 dg1test kernel: RAX: 000055bb758763c0 RBX: 000055bb758752c0 RCX: 00000000000028b0
    Aug 10 07:01:29 dg1test kernel: RDX: 000055bb758752c0 RSI: 000055bb75887490 RDI: 000055bb75862950
    Aug 10 07:01:29 dg1test kernel: RBP: 00007ffdd3c48490 R08: 000055bb75873b10 R09: 0000000000000001
    Aug 10 07:01:29 dg1test kernel: R10: 0000000000000004 R11: 000055bb7587f000 R12: 000055bb75887490
    Aug 10 07:01:29 dg1test kernel: R13: 000055bb757f6280 R14: 000055bb758875c0 R15: 000055bb757f6280
    Aug 10 07:01:29 dg1test kernel:  </TASK>
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Tested-by: Danilo Krummrich <dakr@redhat.com>
    Reviewed-by: Danilo Krummrich <dakr@redhat.com>
    Signed-off-by: Danilo Krummrich <dakr@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231107053255.2257079-1-airlied@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23c31036f862582f98386120aee55c9ae23d7899
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Mon Nov 13 21:13:23 2023 +0100

    netfilter: ipset: fix race condition between swap/destroy and kernel side add/del/test
    
    [ Upstream commit 28628fa952fefc7f2072ce6e8016968cc452b1ba ]
    
    Linkui Xiao reported that there's a race condition when ipset swap and destroy is
    called, which can lead to crash in add/del/test element operations. Swap then
    destroy are usual operations to replace a set with another one in a production
    system. The issue can in some cases be reproduced with the script:
    
    ipset create hash_ip1 hash:net family inet hashsize 1024 maxelem 1048576
    ipset add hash_ip1 172.20.0.0/16
    ipset add hash_ip1 192.168.0.0/16
    iptables -A INPUT -m set --match-set hash_ip1 src -j ACCEPT
    while [ 1 ]
    do
            # ... Ongoing traffic...
            ipset create hash_ip2 hash:net family inet hashsize 1024 maxelem 1048576
            ipset add hash_ip2 172.20.0.0/16
            ipset swap hash_ip1 hash_ip2
            ipset destroy hash_ip2
            sleep 0.05
    done
    
    In the race case the possible order of the operations are
    
            CPU0                    CPU1
            ip_set_test
                                    ipset swap hash_ip1 hash_ip2
                                    ipset destroy hash_ip2
            hash_net_kadt
    
    Swap replaces hash_ip1 with hash_ip2 and then destroy removes hash_ip2 which
    is the original hash_ip1. ip_set_test was called on hash_ip1 and because destroy
    removed it, hash_net_kadt crashes.
    
    The fix is to force ip_set_swap() to wait for all readers to finish accessing the
    old set pointers by calling synchronize_rcu().
    
    The first version of the patch was written by Linkui Xiao <xiaolinkui@kylinos.cn>.
    
    v2: synchronize_rcu() is moved into ip_set_swap() in order not to burden
        ip_set_destroy() unnecessarily when all sets are destroyed.
    v3: Florian Westphal pointed out that all netfilter hooks run with rcu_read_lock() held
        and em_ipset.c wraps the entire ip_set_test() in rcu read lock/unlock pair.
        So there's no need to extend the rcu read locked area in ipset itself.
    
    Closes: https://lore.kernel.org/all/69e7963b-e7f8-3ad0-210-7b86eebf7f78@netfilter.org/
    Reported by: Linkui Xiao <xiaolinkui@kylinos.cn>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22a59e51ded2d02dd146d140389e31796327ac63
Author: Samuel Holland <samuel.holland@sifive.com>
Date:   Sun Nov 12 18:32:45 2023 -0800

    i2c: ocores: Move system PM hooks to the NOIRQ phase
    
    [ Upstream commit 382561d16854a747e6df71034da08d20d6013dfe ]
    
    When an I2C device contains a wake IRQ subordinate to a regmap-irq chip,
    the regmap-irq code must be able to perform I2C transactions during
    suspend_device_irqs() and resume_device_irqs(). Therefore, the bus must
    be suspended/resumed during the NOIRQ phase.
    
    Signed-off-by: Samuel Holland <samuel.holland@sifive.com>
    Acked-by: Peter Korsgaard <peter@korsgaard.com>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5d10651396c52b95dc1b6e9867385e2675cff53
Author: Jan Bottorff <janb@os.amperecomputing.com>
Date:   Thu Nov 9 03:19:27 2023 +0000

    i2c: designware: Fix corrupted memory seen in the ISR
    
    [ Upstream commit f726eaa787e9f9bc858c902d18a09af6bcbfcdaf ]
    
    When running on a many core ARM64 server, errors were
    happening in the ISR that looked like corrupted memory. These
    corruptions would fix themselves if small delays were inserted
    in the ISR. Errors reported by the driver included "i2c_designware
    APMC0D0F:00: i2c_dw_xfer_msg: invalid target address" and
    "i2c_designware APMC0D0F:00:controller timed out" during
    in-band IPMI SSIF stress tests.
    
    The problem was determined to be memory writes in the driver were not
    becoming visible to all cores when execution rapidly shifted between
    cores, like when a register write immediately triggers an ISR.
    Processors with weak memory ordering, like ARM64, make no
    guarantees about the order normal memory writes become globally
    visible, unless barrier instructions are used to control ordering.
    
    To solve this, regmap accessor functions configured by this driver
    were changed to use non-relaxed forms of the low-level register
    access functions, which include a barrier on platforms that require
    it. This assures memory writes before a controller register access are
    visible to all cores. The community concluded defaulting to correct
    operation outweighed defaulting to the small performance gains from
    using relaxed access functions. Being a low speed device added weight to
    this choice of default register access behavior.
    
    Signed-off-by: Jan Bottorff <janb@os.amperecomputing.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Tested-by: Serge Semin <fancer.lancer@gmail.com>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53f408cad05bb987af860af22f4151e5a18e6ee8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Nov 7 15:57:13 2023 +0100

    hrtimers: Push pending hrtimers away from outgoing CPU earlier
    
    [ Upstream commit 5c0930ccaad5a74d74e8b18b648c5eb21ed2fe94 ]
    
    2b8272ff4a70 ("cpu/hotplug: Prevent self deadlock on CPU hot-unplug")
    solved the straight forward CPU hotplug deadlock vs. the scheduler
    bandwidth timer. Yu discovered a more involved variant where a task which
    has a bandwidth timer started on the outgoing CPU holds a lock and then
    gets throttled. If the lock required by one of the CPU hotplug callbacks
    the hotplug operation deadlocks because the unthrottling timer event is not
    handled on the dying CPU and can only be recovered once the control CPU
    reaches the hotplug state which pulls the pending hrtimers from the dead
    CPU.
    
    Solve this by pushing the hrtimers away from the dying CPU in the dying
    callbacks. Nothing can queue a hrtimer on the dying CPU at that point because
    all other CPUs spin in stop_machine() with interrupts disabled and once the
    operation is finished the CPU is marked offline.
    
    Reported-by: Yu Liao <liaoyu15@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Liu Tie <liutie4@huawei.com>
    Link: https://lore.kernel.org/r/87a5rphara.ffs@tglx
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c94c44685d801334b64bd7623bc7db0917304dd9
Author: Mike Christie <michael.christie@oracle.com>
Date:   Mon Nov 6 17:13:04 2023 -0600

    scsi: sd: Fix sshdr use in sd_suspend_common()
    
    [ Upstream commit 3b83486399a6a9feb9c681b74c21a227d48d7020 ]
    
    If scsi_execute_cmd() returns < 0, it doesn't initialize the sshdr, so we
    shouldn't access the sshdr. If it returns 0, then the cmd executed
    successfully, so there is no need to check the sshdr. sd_sync_cache() will
    only access the sshdr if it's been setup because it calls
    scsi_status_is_check_condition() before accessing it. However, the
    sd_sync_cache() caller, sd_suspend_common(), does not check.
    
    sd_suspend_common() is only checking for ILLEGAL_REQUEST which it's using
    to determine if the command is supported. If it's not it just ignores the
    error. So to fix its sshdr use this patch just moves that check to
    sd_sync_cache() where it converts ILLEGAL_REQUEST to success/0.
    sd_suspend_common() was ignoring that error and sd_shutdown() doesn't check
    for errors so there will be no behavior changes.
    
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Link: https://lore.kernel.org/r/20231106231304.5694-2-michael.christie@oracle.com
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Martin Wilck <mwilck@suse.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd3438abfb85f6071ffafacd05d713a7ee020955
Author: Steve Sistare <steven.sistare@oracle.com>
Date:   Fri Nov 3 05:26:27 2023 -0700

    vdpa/mlx5: preserve CVQ vringh index
    
    [ Upstream commit 480b3e73720f6b5d76bef2387b1f9d19ed67573b ]
    
    mlx5_vdpa does not preserve userland's view of vring base for the control
    queue in the following sequence:
    
    ioctl VHOST_SET_VRING_BASE
    ioctl VHOST_VDPA_SET_STATUS VIRTIO_CONFIG_S_DRIVER_OK
      mlx5_vdpa_set_status()
        setup_cvq_vring()
          vringh_init_iotlb()
            vringh_init_kern()
              vrh->last_avail_idx = 0;
    ioctl VHOST_GET_VRING_BASE
    
    To fix, restore the value of cvq->vring.last_avail_idx after calling
    vringh_init_iotlb.
    
    Fixes: 5262912ef3cf ("vdpa/mlx5: Add support for control VQ and MAC setting")
    
    Signed-off-by: Steve Sistare <steven.sistare@oracle.com>
    Acked-by: Eugenio Pérez <eperezma@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Message-Id: <1699014387-194368-1-git-send-email-steven.sistare@oracle.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

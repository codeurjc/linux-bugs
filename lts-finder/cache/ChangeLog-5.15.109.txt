commit f48aeeaaa64c628519273f6007a745cf55b68d95
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 26 13:51:56 2023 +0200

    Linux 5.15.109
    
    Link: https://lore.kernel.org/r/20230424131129.040707961@linuxfoundation.org
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4aed6b5809bb8629f45d5cee1938fd518aa66320
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Apr 24 10:19:04 2023 +0100

    soc: sifive: l2_cache: fix missing of_node_put() in sifive_l2_init()
    
    commit 8fbf94fea0b4e187ca9100936c5429f96b8a4e44 upstream.
    
    The device_node pointer returned by of_find_matching_node() with
    refcount incremented, when finish using it, the refcount need be
    decreased.
    
    Fixes: a967a289f169 ("RISC-V: sifive_l2_cache: Add L2 cache controller driver for SiFive SoCs")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    [conor: cache -> l2_cache]
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71e7ed6e3aa9e7c745ed3d7ccf634a1f9f094497
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Apr 24 10:19:03 2023 +0100

    soc: sifive: l2_cache: fix missing free_irq() in error path in sifive_l2_init()
    
    commit 756344e7cb1afbb87da8705c20384dddd0dea233 upstream.
    
    Add missing free_irq() before return error from sifive_l2_init().
    
    Fixes: a967a289f169 ("RISC-V: sifive_l2_cache: Add L2 cache controller driver for SiFive SoCs")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    [conor: ccache -> l2_cache]
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48c5fd373345f5103db960a651f8657733aaf027
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Apr 24 10:19:02 2023 +0100

    soc: sifive: l2_cache: fix missing iounmap() in error path in sifive_l2_init()
    
    commit 73e770f085023da327dc9ffeb6cd96b0bb22d97e upstream.
    
    Add missing iounmap() before return error from sifive_l2_init().
    
    Fixes: a967a289f169 ("RISC-V: sifive_l2_cache: Add L2 cache controller driver for SiFive SoCs")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    [conor: ccache -> l2_cache]
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a2a502af4669210198513d9c033bc77e444ab77
Author: Ekaterina Orlova <vorobushek.ok@gmail.com>
Date:   Fri Apr 21 15:35:39 2023 +0100

    ASN.1: Fix check for strdup() success
    
    commit 5a43001c01691dcbd396541e6faa2c0077378f48 upstream.
    
    It seems there is a misprint in the check of strdup() return code that
    can lead to NULL pointer dereference.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 4520c6a49af8 ("X.509: Add simple ASN.1 grammar compiler")
    Signed-off-by: Ekaterina Orlova <vorobushek.ok@gmail.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: James Bottomley <jejb@linux.ibm.com>
    Cc: Jarkko Sakkinen <jarkko@kernel.org>
    Cc: keyrings@vger.kernel.org
    Cc: linux-kbuild@vger.kernel.org
    Link: https://lore.kernel.org/r/20230315172130.140-1-vorobushek.ok@gmail.com/
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fc2e7f2cf470aa3b6339bb05de9ace7349f3638
Author: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
Date:   Mon Apr 17 06:32:42 2023 -0700

    ASoC: fsl_asrc_dma: fix potential null-ptr-deref
    
    commit 86a24e99c97234f87d9f70b528a691150e145197 upstream.
    
    dma_request_slave_channel() may return NULL which will lead to
    NULL pointer dereference error in 'tmp_chan->private'.
    
    Correct this behaviour by, first, switching from deprecated function
    dma_request_slave_channel() to dma_request_chan(). Secondly, enable
    sanity check for the resuling value of dma_request_chan().
    Also, fix description that follows the enacted changes and that
    concerns the use of dma_request_slave_channel().
    
    Fixes: 706e2c881158 ("ASoC: fsl_asrc_dma: Reuse the dma channel if available in Back-End")
    Co-developed-by: Natalia Petrova <n.petrova@fintech.ru>
    Signed-off-by: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
    Acked-by: Shengjiu Wang <shengjiu.wang@gmail.com>
    Link: https://lore.kernel.org/r/20230417133242.53339-1-n.zhandarovich@fintech.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0431e1323f422b5e22ff525d7bd757760833ebad
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Tue Apr 4 23:31:58 2023 +0900

    mm/page_alloc: fix potential deadlock on zonelist_update_seq seqlock
    
    commit 1007843a91909a4995ee78a538f62d8665705b66 upstream.
    
    syzbot is reporting circular locking dependency which involves
    zonelist_update_seq seqlock [1], for this lock is checked by memory
    allocation requests which do not need to be retried.
    
    One deadlock scenario is kmalloc(GFP_ATOMIC) from an interrupt handler.
    
      CPU0
      ----
      __build_all_zonelists() {
        write_seqlock(&zonelist_update_seq); // makes zonelist_update_seq.seqcount odd
        // e.g. timer interrupt handler runs at this moment
          some_timer_func() {
            kmalloc(GFP_ATOMIC) {
              __alloc_pages_slowpath() {
                read_seqbegin(&zonelist_update_seq) {
                  // spins forever because zonelist_update_seq.seqcount is odd
                }
              }
            }
          }
        // e.g. timer interrupt handler finishes
        write_sequnlock(&zonelist_update_seq); // makes zonelist_update_seq.seqcount even
      }
    
    This deadlock scenario can be easily eliminated by not calling
    read_seqbegin(&zonelist_update_seq) from !__GFP_DIRECT_RECLAIM allocation
    requests, for retry is applicable to only __GFP_DIRECT_RECLAIM allocation
    requests.  But Michal Hocko does not know whether we should go with this
    approach.
    
    Another deadlock scenario which syzbot is reporting is a race between
    kmalloc(GFP_ATOMIC) from tty_insert_flip_string_and_push_buffer() with
    port->lock held and printk() from __build_all_zonelists() with
    zonelist_update_seq held.
    
      CPU0                                   CPU1
      ----                                   ----
      pty_write() {
        tty_insert_flip_string_and_push_buffer() {
                                             __build_all_zonelists() {
                                               write_seqlock(&zonelist_update_seq);
                                               build_zonelists() {
                                                 printk() {
                                                   vprintk() {
                                                     vprintk_default() {
                                                       vprintk_emit() {
                                                         console_unlock() {
                                                           console_flush_all() {
                                                             console_emit_next_record() {
                                                               con->write() = serial8250_console_write() {
          spin_lock_irqsave(&port->lock, flags);
          tty_insert_flip_string() {
            tty_insert_flip_string_fixed_flag() {
              __tty_buffer_request_room() {
                tty_buffer_alloc() {
                  kmalloc(GFP_ATOMIC | __GFP_NOWARN) {
                    __alloc_pages_slowpath() {
                      zonelist_iter_begin() {
                        read_seqbegin(&zonelist_update_seq); // spins forever because zonelist_update_seq.seqcount is odd
                                                                 spin_lock_irqsave(&port->lock, flags); // spins forever because port->lock is held
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          spin_unlock_irqrestore(&port->lock, flags);
                                                                 // message is printed to console
                                                                 spin_unlock_irqrestore(&port->lock, flags);
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                 }
                                               }
                                               write_sequnlock(&zonelist_update_seq);
                                             }
        }
      }
    
    This deadlock scenario can be eliminated by
    
      preventing interrupt context from calling kmalloc(GFP_ATOMIC)
    
    and
    
      preventing printk() from calling console_flush_all()
    
    while zonelist_update_seq.seqcount is odd.
    
    Since Petr Mladek thinks that __build_all_zonelists() can become a
    candidate for deferring printk() [2], let's address this problem by
    
      disabling local interrupts in order to avoid kmalloc(GFP_ATOMIC)
    
    and
    
      disabling synchronous printk() in order to avoid console_flush_all()
    
    .
    
    As a side effect of minimizing duration of zonelist_update_seq.seqcount
    being odd by disabling synchronous printk(), latency at
    read_seqbegin(&zonelist_update_seq) for both !__GFP_DIRECT_RECLAIM and
    __GFP_DIRECT_RECLAIM allocation requests will be reduced.  Although, from
    lockdep perspective, not calling read_seqbegin(&zonelist_update_seq) (i.e.
    do not record unnecessary locking dependency) from interrupt context is
    still preferable, even if we don't allow calling kmalloc(GFP_ATOMIC)
    inside
    write_seqlock(&zonelist_update_seq)/write_sequnlock(&zonelist_update_seq)
    section...
    
    Link: https://lkml.kernel.org/r/8796b95c-3da3-5885-fddd-6ef55f30e4d3@I-love.SAKURA.ne.jp
    Fixes: 3d36424b3b58 ("mm/page_alloc: fix race condition between build_all_zonelists and page allocation")
    Link: https://lkml.kernel.org/r/ZCrs+1cDqPWTDFNM@alley [2]
    Reported-by: syzbot <syzbot+223c7461c58c58a4cb10@syzkaller.appspotmail.com>
      Link: https://syzkaller.appspot.com/bug?extid=223c7461c58c58a4cb10 [1]
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Cc: John Ogness <john.ogness@linutronix.de>
    Cc: Patrick Daly <quic_pdaly@quicinc.com>
    Cc: Sergey Senozhatsky <senozhatsky@chromium.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 144ff55623e26b2207a743ca7de044537ac032da
Author: Dan Carpenter <error27@gmail.com>
Date:   Wed Mar 29 07:35:32 2023 +0300

    iio: adc: at91-sama5d2_adc: fix an error code in at91_adc_allocate_trigger()
    
    commit 73a428b37b9b538f8f8fe61caa45e7f243bab87c upstream.
    
    The at91_adc_allocate_trigger() function is supposed to return error
    pointers.  Returning a NULL will cause an Oops.
    
    Fixes: 5e1a1da0f8c9 ("iio: adc: at91-sama5d2_adc: add hw trigger and buffer support")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Link: https://lore.kernel.org/r/5d728f9d-31d1-410d-a0b3-df6a63a2c8ba@kili.mountain
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e589986ef0376342e1b4a13caeda9bd17971bc80
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Sun Mar 12 19:15:49 2023 -0400

    counter: 104-quad-8: Fix race condition between FLAG and CNTR reads
    
    commit 4aa3b75c74603c3374877d5fd18ad9cc3a9a62ed upstream.
    
    The Counter (CNTR) register is 24 bits wide, but we can have an
    effective 25-bit count value by setting bit 24 to the XOR of the Borrow
    flag and Carry flag. The flags can be read from the FLAG register, but a
    race condition exists: the Borrow flag and Carry flag are instantaneous
    and could change by the time the count value is read from the CNTR
    register.
    
    Since the race condition could result in an incorrect 25-bit count
    value, remove support for 25-bit count values from this driver;
    hard-coded maximum count values are replaced by a LS7267_CNTR_MAX define
    for consistency and clarity.
    
    Fixes: 28e5d3bb0325 ("iio: 104-quad-8: Add IIO support for the ACCES 104-QUAD-8")
    Cc: <stable@vger.kernel.org> # 6.1.x
    Cc: <stable@vger.kernel.org> # 6.2.x
    Link: https://lore.kernel.org/r/20230312231554.134858-1-william.gray@linaro.org/
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78559037632b8343b85fb1e2d0b55405c2b73b4a
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Apr 24 07:20:37 2023 +0200

    pwm: hibvt: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 6f57937980142715e927697a6ffd2050f38ed6f6 ]
    
    The driver only both polarities. Complete the implementation of
    .get_state() by setting .polarity according to the configured hardware
    state.
    
    Fixes: d09f00810850 ("pwm: Add PWM driver for HiSilicon BVT SOCs")
    Link: https://lore.kernel.org/r/20230228135508.1798428-2-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2147e7c2d26f0d1fbd6fcd4fa2ff432d8218d185
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Apr 24 07:20:36 2023 +0200

    pwm: iqs620a: Explicitly set .polarity in .get_state()
    
    [ Upstream commit b20b097128d9145fadcea1cbb45c4d186cb57466 ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    Fixes: 6f0841a8197b ("pwm: Add support for Azoteq IQS620A PWM generator")
    Reviewed-by: Jeff LaBundy <jeff@labundy.com>
    Link: https://lore.kernel.org/r/20230228135508.1798428-4-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2ab4924f0c82b70a7d80d7e14e26a3cc1d241e5
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:44 2023 +0100

    pwm: meson: Explicitly set .polarity in .get_state()
    
    commit 8caa81eb950cb2e9d2d6959b37d853162d197f57 upstream.
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    This fixes a regression that was possible since commit c73a3107624d
    ("pwm: Handle .get_state() failures") which stopped to zero-initialize
    the state passed to the .get_state() callback. This was reported at
    https://forum.odroid.com/viewtopic.php?f=177&t=46360 . While this was an
    unintended side effect, the real issue is the driver's callback not
    setting the polarity.
    
    There is a complicating fact, that the .apply() callback fakes support
    for inversed polarity. This is not (and cannot) be matched by
    .get_state(). As fixing this isn't easy, only point it out in a comment
    to prevent authors of other drivers from copying that approach.
    
    Fixes: c375bcbaabdb ("pwm: meson: Read the full hardware state in meson_pwm_get_state()")
    Reported-by: Munehisa Kamata <kamatam@amazon.com>
    Acked-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20230310191405.2606296-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbc7a6d1ec8ed4b076afa0f15a71da58d2052569
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Oct 19 15:36:01 2022 -0700

    sctp: Call inet6_destroy_sock() via sk->sk_destruct().
    
    commit 6431b0f6ff1633ae598667e4cdd93830074a03e8 upstream.
    
    After commit d38afeec26ed ("tcp/udp: Call inet6_destroy_sock()
    in IPv6 sk->sk_destruct()."), we call inet6_destroy_sock() in
    sk->sk_destruct() by setting inet6_sock_destruct() to it to make
    sure we do not leak inet6-specific resources.
    
    SCTP sets its own sk->sk_destruct() in the sctp_init_sock(), and
    SCTPv6 socket reuses it as the init function.
    
    To call inet6_sock_destruct() from SCTPv6 sk->sk_destruct(), we
    set sctp_v6_destruct_sock() in a new init function.
    
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f66b180a62226c813484c3932d4165dbee8fd3b
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Oct 19 15:36:00 2022 -0700

    dccp: Call inet6_destroy_sock() via sk->sk_destruct().
    
    commit 1651951ebea54970e0bda60c638fc2eee7a6218f upstream.
    
    After commit d38afeec26ed ("tcp/udp: Call inet6_destroy_sock()
    in IPv6 sk->sk_destruct()."), we call inet6_destroy_sock() in
    sk->sk_destruct() by setting inet6_sock_destruct() to it to make
    sure we do not leak inet6-specific resources.
    
    DCCP sets its own sk->sk_destruct() in the dccp_init_sock(), and
    DCCPv6 socket shares it by calling the same init function via
    dccp_v6_init_sock().
    
    To call inet6_sock_destruct() from DCCPv6 sk->sk_destruct(), we
    export it and set dccp_v6_sk_destruct() in the init function.
    
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b60d534d1e70735cb76979c4dedaae5ae016007c
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Oct 19 15:35:59 2022 -0700

    inet6: Remove inet6_destroy_sock() in sk->sk_prot->destroy().
    
    commit b5fc29233d28be7a3322848ebe73ac327559cdb9 upstream.
    
    After commit d38afeec26ed ("tcp/udp: Call inet6_destroy_sock()
    in IPv6 sk->sk_destruct()."), we call inet6_destroy_sock() in
    sk->sk_destruct() by setting inet6_sock_destruct() to it to make
    sure we do not leak inet6-specific resources.
    
    Now we can remove unnecessary inet6_destroy_sock() calls in
    sk->sk_prot->destroy().
    
    DCCP and SCTP have their own sk->sk_destruct() function, so we
    change them separately in the following patches.
    
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd042131386f115311eea5e21c45c9afc6f6b41f
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu Oct 6 11:53:47 2022 -0700

    tcp/udp: Call inet6_destroy_sock() in IPv6 sk->sk_destruct().
    
    commit d38afeec26ed4739c640bf286c270559aab2ba5f upstream.
    
    Originally, inet6_sk(sk)->XXX were changed under lock_sock(), so we were
    able to clean them up by calling inet6_destroy_sock() during the IPv6 ->
    IPv4 conversion by IPV6_ADDRFORM.  However, commit 03485f2adcde ("udpv6:
    Add lockless sendmsg() support") added a lockless memory allocation path,
    which could cause a memory leak:
    
    setsockopt(IPV6_ADDRFORM)                 sendmsg()
    +-----------------------+                 +-------+
    - do_ipv6_setsockopt(sk, ...)             - udpv6_sendmsg(sk, ...)
      - sockopt_lock_sock(sk)                   ^._ called via udpv6_prot
        - lock_sock(sk)                             before WRITE_ONCE()
      - WRITE_ONCE(sk->sk_prot, &tcp_prot)
      - inet6_destroy_sock()                    - if (!corkreq)
      - sockopt_release_sock(sk)                  - ip6_make_skb(sk, ...)
        - release_sock(sk)                          ^._ lockless fast path for
                                                        the non-corking case
    
                                                    - __ip6_append_data(sk, ...)
                                                      - ipv6_local_rxpmtu(sk, ...)
                                                        - xchg(&np->rxpmtu, skb)
                                                          ^._ rxpmtu is never freed.
    
                                                    - goto out_no_dst;
    
                                                - lock_sock(sk)
    
    For now, rxpmtu is only the case, but not to miss the future change
    and a similar bug fixed in commit e27326009a3d ("net: ping6: Fix
    memleak in ipv6_renew_options()."), let's set a new function to IPv6
    sk->sk_destruct() and call inet6_cleanup_sock() there.  Since the
    conversion does not change sk->sk_destruct(), we can guarantee that
    we can clean up IPv6 resources finally.
    
    We can now remove all inet6_destroy_sock() calls from IPv6 protocol
    specific ->destroy() functions, but such changes are invasive to
    backport.  So they can be posted as a follow-up later for net-next.
    
    Fixes: 03485f2adcde ("udpv6: Add lockless sendmsg() support")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dabbe97f369b866750a80dbde68014a21a4194f9
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu Oct 6 11:53:46 2022 -0700

    udp: Call inet6_destroy_sock() in setsockopt(IPV6_ADDRFORM).
    
    commit 21985f43376cee092702d6cb963ff97a9d2ede68 upstream.
    
    Commit 4b340ae20d0e ("IPv6: Complete IPV6_DONTFRAG support") forgot
    to add a change to free inet6_sk(sk)->rxpmtu while converting an IPv6
    socket into IPv4 with IPV6_ADDRFORM.  After conversion, sk_prot is
    changed to udp_prot and ->destroy() never cleans it up, resulting in
    a memory leak.
    
    This is due to the discrepancy between inet6_destroy_sock() and
    IPV6_ADDRFORM, so let's call inet6_destroy_sock() from IPV6_ADDRFORM
    to remove the difference.
    
    However, this is not enough for now because rxpmtu can be changed
    without lock_sock() after commit 03485f2adcde ("udpv6: Add lockless
    sendmsg() support").  We will fix this case in the following patch.
    
    Note we will rename inet6_destroy_sock() to inet6_cleanup_sock() and
    remove unnecessary inet6_destroy_sock() calls in sk_prot->destroy()
    in the future.
    
    Fixes: 4b340ae20d0e ("IPv6: Complete IPV6_DONTFRAG support")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d58366aab86854217b81679d1a9dcd54a2edfc2a
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Apr 22 15:48:53 2022 +0200

    fuse: fix deadlock between atomic O_TRUNC and page invalidation
    
    commit 2fdbb8dd01556e1501132b5ad3826e8f71e24a8b upstream.
    
    fuse_finish_open() will be called with FUSE_NOWRITE set in case of atomic
    O_TRUNC open(), so commit 76224355db75 ("fuse: truncate pagecache on
    atomic_o_trunc") replaced invalidate_inode_pages2() by truncate_pagecache()
    in such a case to avoid the A-A deadlock. However, we found another A-B-B-A
    deadlock related to the case above, which will cause the xfstests
    generic/464 testcase hung in our virtio-fs test environment.
    
    For example, consider two processes concurrently open one same file, one
    with O_TRUNC and another without O_TRUNC. The deadlock case is described
    below, if open(O_TRUNC) is already set_nowrite(acquired A), and is trying
    to lock a page (acquiring B), open() could have held the page lock
    (acquired B), and waiting on the page writeback (acquiring A). This would
    lead to deadlocks.
    
    open(O_TRUNC)
    ----------------------------------------------------------------
    fuse_open_common
      inode_lock            [C acquire]
      fuse_set_nowrite      [A acquire]
    
      fuse_finish_open
        truncate_pagecache
          lock_page         [B acquire]
          truncate_inode_page
          unlock_page       [B release]
    
      fuse_release_nowrite  [A release]
      inode_unlock          [C release]
    ----------------------------------------------------------------
    
    open()
    ----------------------------------------------------------------
    fuse_open_common
      fuse_finish_open
        invalidate_inode_pages2
          lock_page         [B acquire]
            fuse_launder_page
              fuse_wait_on_page_writeback [A acquire & release]
          unlock_page       [B release]
    ----------------------------------------------------------------
    
    Besides this case, all calls of invalidate_inode_pages2() and
    invalidate_inode_pages2_range() in fuse code also can deadlock with
    open(O_TRUNC).
    
    Fix by moving the truncate_pagecache() call outside the nowrite protected
    region.  The nowrite protection is only for delayed writeback
    (writeback_cache) case, where inode lock does not protect against
    truncation racing with writes on the server.  Write syscalls racing with
    page cache truncation still get the inode lock protection.
    
    This patch also changes the order of filemap_invalidate_lock()
    vs. fuse_set_nowrite() in fuse_open_common().  This new order matches the
    order found in fuse_file_fallocate() and fuse_do_setattr().
    
    Reported-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Tested-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Fixes: e4648309b85a ("fuse: truncate pending writes on O_TRUNC")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e21d9c60683915b483dee47e10aba285d03f2ff3
Author: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
Date:   Wed Sep 28 20:19:34 2022 +0800

    fuse: always revalidate rename target dentry
    
    commit ccc031e26afe60d2a5a3d93dabd9c978210825fb upstream.
    
    The previous commit df8629af2934 ("fuse: always revalidate if exclusive
    create") ensures that the dentries are revalidated on O_EXCL creates.  This
    commit complements it by also performing revalidation for rename target
    dentries.  Otherwise, a rename target file that only exists in kernel
    dentry cache but not in the filesystem will result in EEXIST if
    RENAME_NOREPLACE flag is used.
    
    Signed-off-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Signed-off-by: Zhang Tianci <zhangtianci.1997@bytedance.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c10a5b34068156c2094f86796eb125a47be24c2f
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 22 17:03:03 2021 +0200

    fuse: fix attr version comparison in fuse_read_update_size()
    
    commit 484ce65715b06aead8c4901f01ca32c5a240bc71 upstream.
    
    A READ request returning a short count is taken as indication of EOF, and
    the cached file size is modified accordingly.
    
    Fix the attribute version checking to allow for changes to fc->attr_version
    on other inodes.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e5c686087dc93cf411df5896c8c07dd114cab7d
Author: Alyssa Ross <hi@alyssa.is>
Date:   Sun Mar 26 18:21:21 2023 +0000

    purgatory: fix disabling debug info
    
    commit d83806c4c0cccc0d6d3c3581a11983a9c186a138 upstream.
    
    Since 32ef9e5054ec, -Wa,-gdwarf-2 is no longer used in KBUILD_AFLAGS.
    Instead, it includes -g, the appropriate -gdwarf-* flag, and also the
    -Wa versions of both of those if building with Clang and GNU as.  As a
    result, debug info was being generated for the purgatory objects, even
    though the intention was that it not be.
    
    Fixes: 32ef9e5054ec ("Makefile.debug: re-enable debug info for .S files")
    Signed-off-by: Alyssa Ross <hi@alyssa.is>
    Cc: stable@vger.kernel.org
    Acked-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a134b2ac4127cf8f8c28879e41de3c424c72070c
Author: Salvatore Bonaccorso <carnil@debian.org>
Date:   Sat Apr 22 00:17:42 2023 +0200

    docs: futex: Fix kernel-doc references after code split-up preparation
    
    In upstream commit 77e52ae35463 ("futex: Move to kernel/futex/") the
    futex code from kernel/futex.c was moved into kernel/futex/core.c in
    preparation of the split-up of the implementation in various files.
    
    Point kernel-doc references to the new files as otherwise the
    documentation shows errors on build:
    
        [...]
        Error: Cannot open file ./kernel/futex.c
        Error: Cannot open file ./kernel/futex.c
        [...]
        WARNING: kernel-doc './scripts/kernel-doc -rst -enable-lineno -sphinx-version 3.4.3 -internal ./kernel/futex.c' failed with return code 2
    
    There is no direct upstream commit for this change. It is made in
    analogy to commit bc67f1c454fb ("docs: futex: Fix kernel-doc
    references") applied as consequence of the restructuring of the futex
    code.
    
    Fixes: 77e52ae35463 ("futex: Move to kernel/futex/")
    Signed-off-by: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66dd55279174d8bc51260e326f8a375ab99d1c1a
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Sat Apr 8 21:33:48 2023 +0100

    MIPS: Define RUNTIME_DISCARD_EXIT in LD script
    
    commit 6dcbd0a69c84a8ae7a442840a8cf6b1379dc8f16 upstream.
    
    MIPS's exit sections are discarded at runtime as well.
    
    Fixes link error:
    `.exit.text' referenced in section `__jump_table' of fs/fuse/inode.o:
    defined in discarded section `.exit.text' of fs/fuse/inode.o
    
    Fixes: 99cb0d917ffa ("arch: fix broken BuildID for arm64 and riscv")
    Reported-by: "kernelci.org bot" <bot@kernelci.org>
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e779884c713f7b40acd4c25d0782364da1f47c00
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:05:47 2023 +0100

    sched/fair: Fixes for capacity inversion detection
    
    commit da07d2f9c153e457e845d4dcfdd13568d71d18a4 upstream.
    
    Traversing the Perf Domains requires rcu_read_lock() to be held and is
    conditional on sched_energy_enabled(). Ensure right protections applied.
    
    Also skip capacity inversion detection for our own pd; which was an
    error.
    
    Fixes: 44c7b80bffc3 ("sched/fair: Detect capacity inversion")
    Reported-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lore.kernel.org/r/20230112122708.330667-3-qyousef@layalina.io
    (cherry picked from commit da07d2f9c153e457e845d4dcfdd13568d71d18a4)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ee882e0e1ededef6238e87910614d8075290f19
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:05:46 2023 +0100

    sched/uclamp: Fix a uninitialized variable warnings
    
    commit e26fd28db82899be71b4b949527373d0a6be1e65 upstream.
    
    Addresses the following warnings:
    
    > config: riscv-randconfig-m031-20221111
    > compiler: riscv64-linux-gcc (GCC) 12.1.0
    >
    > smatch warnings:
    > kernel/sched/fair.c:7263 find_energy_efficient_cpu() error: uninitialized symbol 'util_min'.
    > kernel/sched/fair.c:7263 find_energy_efficient_cpu() error: uninitialized symbol 'util_max'.
    
    Fixes: 244226035a1f ("sched/uclamp: Fix fits_capacity() check in feec()")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lore.kernel.org/r/20230112122708.330667-2-qyousef@layalina.io
    (cherry picked from commit e26fd28db82899be71b4b949527373d0a6be1e65)
    [Conflict in kernel/sched/fair.c due to new automatic variables being
    added on master vs 5.15]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98762616db0ba9d2f9c3a8a95dbb7405597b55f4
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:05:45 2023 +0100

    sched/fair: Consider capacity inversion in util_fits_cpu()
    
    commit aa69c36f31aadc1669bfa8a3de6a47b5e6c98ee8 upstream.
    
    We do consider thermal pressure in util_fits_cpu() for uclamp_min only.
    With the exception of the biggest cores which by definition are the max
    performance point of the system and all tasks by definition should fit.
    
    Even under thermal pressure, the capacity of the biggest CPU is the
    highest in the system and should still fit every task. Except when it
    reaches capacity inversion point, then this is no longer true.
    
    We can handle this by using the inverted capacity as capacity_orig in
    util_fits_cpu(). Which not only addresses the problem above, but also
    ensure uclamp_max now considers the inverted capacity. Force fitting
    a task when a CPU is in this adverse state will contribute to making the
    thermal throttling last longer.
    
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-10-qais.yousef@arm.com
    (cherry picked from commit aa69c36f31aadc1669bfa8a3de6a47b5e6c98ee8)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99b704ae7a177b88b456bb763bc2a2a4be204970
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:05:44 2023 +0100

    sched/fair: Detect capacity inversion
    
    commit 44c7b80bffc3a657a36857098d5d9c49d94e652b upstream.
    
    Check each performance domain to see if thermal pressure is causing its
    capacity to be lower than another performance domain.
    
    We assume that each performance domain has CPUs with the same
    capacities, which is similar to an assumption made in energy_model.c
    
    We also assume that thermal pressure impacts all CPUs in a performance
    domain equally.
    
    If there're multiple performance domains with the same capacity_orig, we
    will trigger a capacity inversion if the domain is under thermal
    pressure.
    
    The new cpu_in_capacity_inversion() should help users to know when
    information about capacity_orig are not reliable and can opt in to use
    the inverted capacity as the 'actual' capacity_orig.
    
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-9-qais.yousef@arm.com
    (cherry picked from commit 44c7b80bffc3a657a36857098d5d9c49d94e652b)
    [fix trivial conflict in kernel/sched/sched.h due to code shuffling]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1de6ee9d812c734a48cba80ee47739c0772a7dfd
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:05:43 2023 +0100

    sched/uclamp: Cater for uclamp in find_energy_efficient_cpu()'s early exit condition
    
    commit d81304bc6193554014d4372a01debdf65e1e9a4d upstream.
    
    If the utilization of the woken up task is 0, we skip the energy
    calculation because it has no impact.
    
    But if the task is boosted (uclamp_min != 0) will have an impact on task
    placement and frequency selection. Only skip if the util is truly
    0 after applying uclamp values.
    
    Change uclamp_task_cpu() signature to avoid unnecessary additional calls
    to uclamp_eff_get(). feec() is the only user now.
    
    Fixes: 732cd75b8c920 ("sched/fair: Select an energy-efficient CPU on task wake-up")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-8-qais.yousef@arm.com
    (cherry picked from commit d81304bc6193554014d4372a01debdf65e1e9a4d)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a77e3c0e067d06d066de216a9f5d88b8b0e49993
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:05:42 2023 +0100

    sched/uclamp: Make cpu_overutilized() use util_fits_cpu()
    
    commit c56ab1b3506ba0e7a872509964b100912bde165d upstream.
    
    So that it is now uclamp aware.
    
    This fixes a major problem of busy tasks capped with UCLAMP_MAX keeping
    the system in overutilized state which disables EAS and leads to wasting
    energy in the long run.
    
    Without this patch running a busy background activity like JIT
    compilation on Pixel 6 causes the system to be in overutilized state
    74.5% of the time.
    
    With this patch this goes down to  9.79%.
    
    It also fixes another problem when long running tasks that have their
    UCLAMP_MIN changed while running such that they need to upmigrate to
    honour the new UCLAMP_MIN value. The upmigration doesn't get triggered
    because overutilized state never gets set in this state, hence misfit
    migration never happens at tick in this case until the task wakes up
    again.
    
    Fixes: af24bde8df202 ("sched/uclamp: Add uclamp support to energy_compute()")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-7-qais.yousef@arm.com
    (cherry picked from commit c56ab1b3506ba0e7a872509964b100912bde165d)
    [Fixed trivial conflict in cpu_overutilized() - use cpu_util() instead
    of cpu_util_cfs()]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac407e5102e9d889c6c9ee97b1ed790387b6b599
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:05:41 2023 +0100

    sched/uclamp: Fix fits_capacity() check in feec()
    
    commit 244226035a1f9b2b6c326e55ae5188fab4f428cb upstream.
    
    As reported by Yun Hsiang [1], if a task has its uclamp_min >= 0.8 * 1024,
    it'll always pick the previous CPU because fits_capacity() will always
    return false in this case.
    
    The new util_fits_cpu() logic should handle this correctly for us beside
    more corner cases where similar failures could occur, like when using
    UCLAMP_MAX.
    
    We open code uclamp_rq_util_with() except for the clamp() part,
    util_fits_cpu() needs the 'raw' values to be passed to it.
    
    Also introduce uclamp_rq_{set, get}() shorthand accessors to get uclamp
    value for the rq. Makes the code more readable and ensures the right
    rules (use READ_ONCE/WRITE_ONCE) are respected transparently.
    
    [1] https://lists.linaro.org/pipermail/eas-dev/2020-July/001488.html
    
    Fixes: 1d42509e475c ("sched/fair: Make EAS wakeup placement consider uclamp restrictions")
    Reported-by: Yun Hsiang <hsiang023167@gmail.com>
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-4-qais.yousef@arm.com
    (cherry picked from commit 244226035a1f9b2b6c326e55ae5188fab4f428cb)
    [Conflict in kernel/sched/fair.c mainly due to new automatic variables
    being added on master vs 5.15]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46c631fe5a948d8cafaf01fce328c722fc4736a0
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Fri Apr 14 15:14:29 2023 +0100

    mm: page_alloc: skip regions with hugetlbfs pages when allocating 1G pages
    
    commit 4d73ba5fa710fe7d432e0b271e6fecd252aef66e upstream.
    
    A bug was reported by Yuanxi Liu where allocating 1G pages at runtime is
    taking an excessive amount of time for large amounts of memory.  Further
    testing allocating huge pages that the cost is linear i.e.  if allocating
    1G pages in batches of 10 then the time to allocate nr_hugepages from
    10->20->30->etc increases linearly even though 10 pages are allocated at
    each step.  Profiles indicated that much of the time is spent checking the
    validity within already existing huge pages and then attempting a
    migration that fails after isolating the range, draining pages and a whole
    lot of other useless work.
    
    Commit eb14d4eefdc4 ("mm,page_alloc: drop unnecessary checks from
    pfn_range_valid_contig") removed two checks, one which ignored huge pages
    for contiguous allocations as huge pages can sometimes migrate.  While
    there may be value on migrating a 2M page to satisfy a 1G allocation, it's
    potentially expensive if the 1G allocation fails and it's pointless to try
    moving a 1G page for a new 1G allocation or scan the tail pages for valid
    PFNs.
    
    Reintroduce the PageHuge check and assume any contiguous region with
    hugetlbfs pages is unsuitable for a new 1G allocation.
    
    The hpagealloc test allocates huge pages in batches and reports the
    average latency per page over time.  This test happens just after boot
    when fragmentation is not an issue.  Units are in milliseconds.
    
    hpagealloc
                                   6.3.0-rc6              6.3.0-rc6              6.3.0-rc6
                                     vanilla   hugeallocrevert-v1r1   hugeallocsimple-v1r2
    Min       Latency       26.42 (   0.00%)        5.07 (  80.82%)       18.94 (  28.30%)
    1st-qrtle Latency      356.61 (   0.00%)        5.34 (  98.50%)       19.85 (  94.43%)
    2nd-qrtle Latency      697.26 (   0.00%)        5.47 (  99.22%)       20.44 (  97.07%)
    3rd-qrtle Latency      972.94 (   0.00%)        5.50 (  99.43%)       20.81 (  97.86%)
    Max-1     Latency       26.42 (   0.00%)        5.07 (  80.82%)       18.94 (  28.30%)
    Max-5     Latency       82.14 (   0.00%)        5.11 (  93.78%)       19.31 (  76.49%)
    Max-10    Latency      150.54 (   0.00%)        5.20 (  96.55%)       19.43 (  87.09%)
    Max-90    Latency     1164.45 (   0.00%)        5.53 (  99.52%)       20.97 (  98.20%)
    Max-95    Latency     1223.06 (   0.00%)        5.55 (  99.55%)       21.06 (  98.28%)
    Max-99    Latency     1278.67 (   0.00%)        5.57 (  99.56%)       22.56 (  98.24%)
    Max       Latency     1310.90 (   0.00%)        8.06 (  99.39%)       26.62 (  97.97%)
    Amean     Latency      678.36 (   0.00%)        5.44 *  99.20%*       20.44 *  96.99%*
    
                       6.3.0-rc6   6.3.0-rc6   6.3.0-rc6
                         vanilla   revert-v1   hugeallocfix-v2
    Duration User           0.28        0.27        0.30
    Duration System       808.66       17.77       35.99
    Duration Elapsed      830.87       18.08       36.33
    
    The vanilla kernel is poor, taking up to 1.3 second to allocate a huge
    page and almost 10 minutes in total to run the test.  Reverting the
    problematic commit reduces it to 8ms at worst and the patch takes 26ms.
    This patch fixes the main issue with skipping huge pages but leaves the
    page_count() out because a page with an elevated count potentially can
    migrate.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=217022
    Link: https://lkml.kernel.org/r/20230414141429.pwgieuwluxwez3rj@techsingularity.net
    Fixes: eb14d4eefdc4 ("mm,page_alloc: drop unnecessary checks from pfn_range_valid_contig")
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Reported-by: Yuanxi Liu <y.liu@naruida.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 981e276dd9658cd343d0b366fa18f76822bbe861
Author: Peter Xu <peterx@redhat.com>
Date:   Wed Apr 5 11:51:20 2023 -0400

    mm/khugepaged: check again on anon uffd-wp during isolation
    
    commit dd47ac428c3f5f3bcabe845f36be870fe6c20784 upstream.
    
    Khugepaged collapse an anonymous thp in two rounds of scans.  The 2nd
    round done in __collapse_huge_page_isolate() after
    hpage_collapse_scan_pmd(), during which all the locks will be released
    temporarily.  It means the pgtable can change during this phase before 2nd
    round starts.
    
    It's logically possible some ptes got wr-protected during this phase, and
    we can errornously collapse a thp without noticing some ptes are
    wr-protected by userfault.  e1e267c7928f wanted to avoid it but it only
    did that for the 1st phase, not the 2nd phase.
    
    Since __collapse_huge_page_isolate() happens after a round of small page
    swapins, we don't need to worry on any !present ptes - if it existed
    khugepaged will already bail out.  So we only need to check present ptes
    with uffd-wp bit set there.
    
    This is something I found only but never had a reproducer, I thought it
    was one caused a bug in Muhammad's recent pagemap new ioctl work, but it
    turns out it's not the cause of that but an userspace bug.  However this
    seems to still be a real bug even with a very small race window, still
    worth to have it fixed and copy stable.
    
    Link: https://lkml.kernel.org/r/20230405155120.3608140-1-peterx@redhat.com
    Fixes: e1e267c7928f ("khugepaged: skip collapse if uffd-wp detected")
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Nadav Amit <nadav.amit@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29562319cba06240a74a6a2f17bbf78cc8222022
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Mar 29 20:24:33 2023 +0300

    drm/i915: Fix fast wake AUX sync len
    
    commit e1c71f8f918047ce822dc19b42ab1261ed259fd1 upstream.
    
    Fast wake should use 8 SYNC pulses for the preamble
    and 10-16 SYNC pulses for the precharge. Reduce our
    fast wake SYNC count to match the maximum value.
    We also use the maximum precharge length for normal
    AUX transactions.
    
    Cc: stable@vger.kernel.org
    Cc: Jouni Högander <jouni.hogander@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230329172434.18744-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jouni Högander <jouni.hogander@intel.com>
    (cherry picked from commit 605f7c73133341d4b762cbd9a22174cc22d4c38b)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afbfd70cb1a06045cc74e26078d8417319dcb20e
Author: Bhavya Kapoor <b-kapoor@ti.com>
Date:   Fri Mar 17 14:57:11 2023 +0530

    mmc: sdhci_am654: Set HIGH_SPEED_ENA for SDR12 and SDR25
    
    commit 2265098fd6a6272fde3fd1be5761f2f5895bd99a upstream.
    
    Timing Information in Datasheet assumes that HIGH_SPEED_ENA=1 should be
    set for SDR12 and SDR25 modes. But sdhci_am654 driver clears
    HIGH_SPEED_ENA register. Thus, Modify sdhci_am654 to not clear
    HIGH_SPEED_ENA (HOST_CONTROL[2]) bit for SDR12 and SDR25 speed modes.
    
    Fixes: e374e87538f4 ("mmc: sdhci_am654: Clear HISPD_ENA in some lower speed modes")
    Signed-off-by: Bhavya Kapoor <b-kapoor@ti.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230317092711.660897-1-b-kapoor@ti.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1aaa1e0a9a0fcb11706e39b67a40ff9fb2eb9f36
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Fri Feb 17 17:21:54 2023 +0100

    kernel/sys.c: fix and improve control flow in __sys_setres[ug]id()
    
    commit 659c0ce1cb9efc7f58d380ca4bb2a51ae9e30553 upstream.
    
    Linux Security Modules (LSMs) that implement the "capable" hook will
    usually emit an access denial message to the audit log whenever they
    "block" the current task from using the given capability based on their
    security policy.
    
    The occurrence of a denial is used as an indication that the given task
    has attempted an operation that requires the given access permission, so
    the callers of functions that perform LSM permission checks must take care
    to avoid calling them too early (before it is decided if the permission is
    actually needed to perform the requested operation).
    
    The __sys_setres[ug]id() functions violate this convention by first
    calling ns_capable_setid() and only then checking if the operation
    requires the capability or not.  It means that any caller that has the
    capability granted by DAC (task's capability set) but not by MAC (LSMs)
    will generate a "denied" audit record, even if is doing an operation for
    which the capability is not required.
    
    Fix this by reordering the checks such that ns_capable_setid() is checked
    last and -EPERM is returned immediately if it returns false.
    
    While there, also do two small optimizations:
    * move the capability check before prepare_creds() and
    * bail out early in case of a no-op.
    
    Link: https://lkml.kernel.org/r/20230217162154.837549-1-omosnace@redhat.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebab1a86ca3e0829a6bd5ad0142c0f758016df48
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Apr 1 22:03:27 2023 +0200

    memstick: fix memory leak if card device is never registered
    
    commit 4b6d621c9d859ff89e68cebf6178652592676013 upstream.
    
    When calling dev_set_name() memory is allocated for the name for the
    struct device.  Once that structure device is registered, or attempted
    to be registerd, with the driver core, the driver core will handle
    cleaning up that memory when the device is removed from the system.
    
    Unfortunatly for the memstick code, there is an error path that causes
    the struct device to never be registered, and so the memory allocated in
    dev_set_name will be leaked.  Fix that leak by manually freeing it right
    before the memory for the device is freed.
    
    Cc: Maxim Levitsky <maximlevitsky@gmail.com>
    Cc: Alex Dubov <oakad@yahoo.com>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Kay Sievers <kay.sievers@vrfy.org>
    Cc: linux-mmc@vger.kernel.org
    Fixes: 0252c3b4f018 ("memstick: struct device - replace bus_id with dev_name(), dev_set_name()")
    Cc: stable <stable@kernel.org>
    Co-developed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Co-developed-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/r/20230401200327.16800-1-gregkh@linuxfoundation.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c168553abceb1fef63145ea068d9875f9637982
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Tue Apr 18 02:35:13 2023 +0900

    nilfs2: initialize unused bytes in segment summary blocks
    
    commit ef832747a82dfbc22a3702219cc716f449b24e4a upstream.
    
    Syzbot still reports uninit-value in nilfs_add_checksums_on_logs() for
    KMSAN enabled kernels after applying commit 7397031622e0 ("nilfs2:
    initialize "struct nilfs_binfo_dat"->bi_pad field").
    
    This is because the unused bytes at the end of each block in segment
    summaries are not initialized.  So this fixes the issue by padding the
    unused bytes with null bytes.
    
    Link: https://lkml.kernel.org/r/20230417173513.12598-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+048585f3f4227bb2b49b@syzkaller.appspotmail.com
      Link: https://syzkaller.appspot.com/bug?extid=048585f3f4227bb2b49b
    Cc: Alexander Potapenko <glider@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e513fb5cadc414e514c3fc9f34e4ae878450b5b7
Author: Brian Masney <bmasney@redhat.com>
Date:   Mon Apr 3 21:14:55 2023 -0400

    iio: light: tsl2772: fix reading proximity-diodes from device tree
    
    commit b1cb00d51e361cf5af93649917d9790e1623647e upstream.
    
    tsl2772_read_prox_diodes() will correctly parse the properties from
    device tree to determine which proximity diode(s) to read from, however
    it didn't actually set this value on the struct tsl2772_settings. Let's
    go ahead and fix that.
    
    Reported-by: Tom Rix <trix@redhat.com>
    Link: https://lore.kernel.org/lkml/20230327120823.1369700-1-trix@redhat.com/
    Fixes: 94cd1113aaa0 ("iio: tsl2772: add support for reading proximity led settings from device tree")
    Signed-off-by: Brian Masney <bmasney@redhat.com>
    Link: https://lore.kernel.org/r/20230404011455.339454-1-bmasney@redhat.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c157379654342cd66e30f4ea1b4e23d594987734
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Fri Dec 2 10:02:23 2022 +0000

    rtmutex: Add acquire semantics for rtmutex lock acquisition slow path
    
    commit 1c0908d8e441631f5b8ba433523cf39339ee2ba0 upstream.
    
    Jan Kara reported the following bug triggering on 6.0.5-rt14 running dbench
    on XFS on arm64.
    
     kernel BUG at fs/inode.c:625!
     Internal error: Oops - BUG: 0 [#1] PREEMPT_RT SMP
     CPU: 11 PID: 6611 Comm: dbench Tainted: G            E   6.0.0-rt14-rt+ #1
     pc : clear_inode+0xa0/0xc0
     lr : clear_inode+0x38/0xc0
     Call trace:
      clear_inode+0xa0/0xc0
      evict+0x160/0x180
      iput+0x154/0x240
      do_unlinkat+0x184/0x300
      __arm64_sys_unlinkat+0x48/0xc0
      el0_svc_common.constprop.4+0xe4/0x2c0
      do_el0_svc+0xac/0x100
      el0_svc+0x78/0x200
      el0t_64_sync_handler+0x9c/0xc0
      el0t_64_sync+0x19c/0x1a0
    
    It also affects 6.1-rc7-rt5 and affects a preempt-rt fork of 5.14 so this
    is likely a bug that existed forever and only became visible when ARM
    support was added to preempt-rt. The same problem does not occur on x86-64
    and he also reported that converting sb->s_inode_wblist_lock to
    raw_spinlock_t makes the problem disappear indicating that the RT spinlock
    variant is the problem.
    
    Which in turn means that RT mutexes on ARM64 and any other weakly ordered
    architecture are affected by this independent of RT.
    
    Will Deacon observed:
    
      "I'd be more inclined to be suspicious of the slowpath tbh, as we need to
       make sure that we have acquire semantics on all paths where the lock can
       be taken. Looking at the rtmutex code, this really isn't obvious to me
       -- for example, try_to_take_rt_mutex() appears to be able to return via
       the 'takeit' label without acquire semantics and it looks like we might
       be relying on the caller's subsequent _unlock_ of the wait_lock for
       ordering, but that will give us release semantics which aren't correct."
    
    Sebastian Andrzej Siewior prototyped a fix that does work based on that
    comment but it was a little bit overkill and added some fences that should
    not be necessary.
    
    The lock owner is updated with an IRQ-safe raw spinlock held, but the
    spin_unlock does not provide acquire semantics which are needed when
    acquiring a mutex.
    
    Adds the necessary acquire semantics for lock owner updates in the slow path
    acquisition and the waiter bit logic.
    
    It successfully completed 10 iterations of the dbench workload while the
    vanilla kernel fails on the first iteration.
    
    [ bigeasy@linutronix.de: Initial prototype fix ]
    
    Fixes: 700318d1d7b38 ("locking/rtmutex: Use acquire/release semantics")
    Fixes: 23f78d4a03c5 ("[PATCH] pi-futex: rt mutex core")
    Reported-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221202100223.6mevpbl7i6x5udfd@techsingularity.net
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8466e335f58004f0b4d6ce72f7fcb22d01235ff
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Mar 31 19:31:48 2023 +0200

    platform/x86: gigabyte-wmi: add support for X570S AORUS ELITE
    
    [ Upstream commit 52f91e51944808d83dfe2d5582601b5e84e472cc ]
    
    Add "X570S AORUS ELITE" to known working boards
    
    Reported-by: Brandon Nielsen <nielsenb@jetfuse.net>
    Link: https://lore.kernel.org/r/20230331014902.7864-1-nielsenb@jetfuse.net
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a2a34a75f3ee00ec9916c10151fa23c1cfe4894
Author: Juergen Gross <jgross@suse.com>
Date:   Wed Mar 29 10:02:59 2023 +0200

    xen/netback: use same error messages for same errors
    
    [ Upstream commit 2eca98e5b24d01c02b46c67be05a5f98cc9789b1 ]
    
    Issue the same error message in case an illegal page boundary crossing
    has been detected in both cases where this is tested.
    
    Suggested-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Link: https://lore.kernel.org/r/20230329080259.14823-1-jgross@suse.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08e774db2ef15b1e1ff538c6038f8bd96a2f1a39
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 20 15:33:34 2023 +0200

    nvme-tcp: fix a possible UAF when failing to allocate an io queue
    
    [ Upstream commit 88eaba80328b31ef81813a1207b4056efd7006a6 ]
    
    When we allocate a nvme-tcp queue, we set the data_ready callback before
    we actually need to use it. This creates the potential that if a stray
    controller sends us data on the socket before we connect, we can trigger
    the io_work and start consuming the socket.
    
    In this case reported: we failed to allocate one of the io queues, and
    as we start releasing the queues that we already allocated, we get
    a UAF [1] from the io_work which is running before it should really.
    
    Fix this by setting the socket ops callbacks only before we start the
    queue, so that we can't accidentally schedule the io_work in the
    initialization phase before the queue started. While we are at it,
    rename nvme_tcp_restore_sock_calls to pair with nvme_tcp_setup_sock_ops.
    
    [1]:
    [16802.107284] nvme nvme4: starting error recovery
    [16802.109166] nvme nvme4: Reconnecting in 10 seconds...
    [16812.173535] nvme nvme4: failed to connect socket: -111
    [16812.173745] nvme nvme4: Failed reconnect attempt 1
    [16812.173747] nvme nvme4: Reconnecting in 10 seconds...
    [16822.413555] nvme nvme4: failed to connect socket: -111
    [16822.413762] nvme nvme4: Failed reconnect attempt 2
    [16822.413765] nvme nvme4: Reconnecting in 10 seconds...
    [16832.661274] nvme nvme4: creating 32 I/O queues.
    [16833.919887] BUG: kernel NULL pointer dereference, address: 0000000000000088
    [16833.920068] nvme nvme4: Failed reconnect attempt 3
    [16833.920094] #PF: supervisor write access in kernel mode
    [16833.920261] nvme nvme4: Reconnecting in 10 seconds...
    [16833.920368] #PF: error_code(0x0002) - not-present page
    [16833.921086] Workqueue: nvme_tcp_wq nvme_tcp_io_work [nvme_tcp]
    [16833.921191] RIP: 0010:_raw_spin_lock_bh+0x17/0x30
    ...
    [16833.923138] Call Trace:
    [16833.923271]  <TASK>
    [16833.923402]  lock_sock_nested+0x1e/0x50
    [16833.923545]  nvme_tcp_try_recv+0x40/0xa0 [nvme_tcp]
    [16833.923685]  nvme_tcp_io_work+0x68/0xa0 [nvme_tcp]
    [16833.923824]  process_one_work+0x1e8/0x390
    [16833.923969]  worker_thread+0x53/0x3d0
    [16833.924104]  ? process_one_work+0x390/0x390
    [16833.924240]  kthread+0x124/0x150
    [16833.924376]  ? set_kthread_struct+0x50/0x50
    [16833.924518]  ret_from_fork+0x1f/0x30
    [16833.924655]  </TASK>
    
    Reported-by: Yanjun Zhang <zhangyanjun@cestc.cn>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Tested-by: Yanjun Zhang <zhangyanjun@cestc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b91bfae3ee11cc1f844b52f96ab8585886aaae7
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Mon Mar 6 12:31:30 2023 +0100

    s390/ptrace: fix PTRACE_GET_LAST_BREAK error handling
    
    [ Upstream commit f9bbf25e7b2b74b52b2f269216a92657774f239c ]
    
    Return -EFAULT if put_user() for the PTRACE_GET_LAST_BREAK
    request fails, instead of silently ignoring it.
    
    Reviewed-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 357fa038d93d0e9159a0f0d45bae0f8654e2ade5
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Thu Mar 23 20:48:41 2023 +0100

    net: dsa: b53: mmap: add phy ops
    
    [ Upstream commit 45977e58ce65ed0459edc9a0466d9dfea09463f5 ]
    
    Implement phy_read16() and phy_write16() ops for B53 MMAP to avoid accessing
    B53_PORT_MII_PAGE registers which hangs the device.
    This access should be done through the MDIO Mux bus controller.
    
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 583d2abf13745e02ead1680c139e816ff86b511f
Author: Damien Le Moal <damien.lemoal@opensource.wdc.com>
Date:   Wed Mar 22 11:22:11 2023 +0900

    scsi: core: Improve scsi_vpd_inquiry() checks
    
    [ Upstream commit f0aa59a33d2ac2267d260fe21eaf92500df8e7b4 ]
    
    Some USB-SATA adapters have broken behavior when an unsupported VPD page is
    probed: Depending on the VPD page number, a 4-byte header with a valid VPD
    page number but with a 0 length is returned. Currently, scsi_vpd_inquiry()
    only checks that the page number is valid to determine if the page is
    valid, which results in receiving only the 4-byte header for the
    non-existent page. This error manifests itself very often with page 0xb9
    for the Concurrent Positioning Ranges detection done by sd_read_cpr(),
    resulting in the following error message:
    
    sd 0:0:0:0: [sda] Invalid Concurrent Positioning Ranges VPD page
    
    Prevent such misleading error message by adding a check in
    scsi_vpd_inquiry() to verify that the page length is not 0.
    
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Link: https://lore.kernel.org/r/20230322022211.116327-1-damien.lemoal@opensource.wdc.com
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 139bea1d3aa133abdf11a3ba62ea31fb41f6bc64
Author: Tomas Henzl <thenzl@redhat.com>
Date:   Fri Mar 24 14:52:49 2023 +0100

    scsi: megaraid_sas: Fix fw_crash_buffer_show()
    
    [ Upstream commit 0808ed6ebbc292222ca069d339744870f6d801da ]
    
    If crash_dump_buf is not allocated then crash dump can't be available.
    Replace logical 'and' with 'or'.
    
    Signed-off-by: Tomas Henzl <thenzl@redhat.com>
    Link: https://lore.kernel.org/r/20230324135249.9733-1-thenzl@redhat.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73890c48849d4d12b11143f208e8a0e8275d5220
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Wed Mar 8 11:59:33 2023 -0800

    selftests: sigaltstack: fix -Wuninitialized
    
    [ Upstream commit 05107edc910135d27fe557267dc45be9630bf3dd ]
    
    Building sigaltstack with clang via:
    $ ARCH=x86 make LLVM=1 -C tools/testing/selftests/sigaltstack/
    
    produces the following warning:
      warning: variable 'sp' is uninitialized when used here [-Wuninitialized]
      if (sp < (unsigned long)sstack ||
          ^~
    
    Clang expects these to be declared at global scope; we've fixed this in
    the kernel proper by using the macro `current_stack_pointer`. This is
    defined in different headers for different target architectures, so just
    create a new header that defines the arch-specific register names for
    the stack pointer register, and define it for more targets (at least the
    ones that support current_stack_pointer/ARCH_HAS_CURRENT_STACK_POINTER).
    
    Reported-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/lkml/CA+G9fYsi3OOu7yCsMutpzKDnBMAzJBCPimBp86LhGBa0eCnEpA@mail.gmail.com/
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2680efa15075300770c871372d420de2191444b
Author: Frank Crawford <frank@crawford.emu.id.au>
Date:   Sat Mar 18 20:14:41 2023 +1100

    platform/x86 (gigabyte-wmi): Add support for A320M-S2H V2
    
    [ Upstream commit b7c994f8c35e916e27c60803bb21457bc1373500 ]
    
    Add support for A320M-S2H V2.  Tested using module force_load option.
    
    Signed-off-by: Frank Crawford <frank@crawford.emu.id.au>
    Acked-by: Thomas Weißschuh <linux@weissschuh.net>
    Link: https://lore.kernel.org/r/20230318091441.1240921-1-frank@crawford.emu.id.au
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd3e899340e1a8efbd1dbc3bba7fcdbc55c82101
Author: Jonathan Denose <jdenose@chromium.org>
Date:   Fri Mar 17 03:19:51 2023 -0700

    Input: i8042 - add quirk for Fujitsu Lifebook A574/H
    
    [ Upstream commit f5bad62f9107b701a6def7cac1f5f65862219b83 ]
    
    Fujitsu Lifebook A574/H requires the nomux option to properly
    probe the touchpad, especially when waking from sleep.
    
    Signed-off-by: Jonathan Denose <jdenose@google.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230303152623.45859-1-jdenose@google.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14bb1fb893db1d915c98fce24263c0f42c259579
Author: Douglas Raillard <douglas.raillard@arm.com>
Date:   Mon Mar 6 12:25:49 2023 +0000

    f2fs: Fix f2fs_truncate_partial_nodes ftrace event
    
    [ Upstream commit 0b04d4c0542e8573a837b1d81b94209e48723b25 ]
    
    Fix the nid_t field so that its size is correctly reported in the text
    format embedded in trace.dat files. As it stands, it is reported as
    being of size 4:
    
            field:nid_t nid[3];     offset:24;      size:4; signed:0;
    
    Instead of 12:
    
            field:nid_t nid[3];     offset:24;      size:12;        signed:0;
    
    This also fixes the reported offset of subsequent fields so that they
    match with the actual struct layout.
    
    Signed-off-by: Douglas Raillard <douglas.raillard@arm.com>
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ebc93afdaf6196125ef7d0ffb6b9e0d4ce97bd6
Author: Sebastian Basierski <sebastianx.basierski@intel.com>
Date:   Mon Apr 17 13:53:45 2023 -0700

    e1000e: Disable TSO on i219-LM card to increase speed
    
    [ Upstream commit 67d47b95119ad589b0a0b16b88b1dd9a04061ced ]
    
    While using i219-LM card currently it was only possible to achieve
    about 60% of maximum speed due to regression introduced in Linux 5.8.
    This was caused by TSO not being disabled by default despite commit
    f29801030ac6 ("e1000e: Disable TSO for buffer overrun workaround").
    Fix that by disabling TSO during driver probe.
    
    Fixes: f29801030ac6 ("e1000e: Disable TSO for buffer overrun workaround")
    Signed-off-by: Sebastian Basierski <sebastianx.basierski@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230417205345.1030801-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e722ea6dae2cc042d1bb7090e2ef8456dd5a0e57
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Apr 11 15:24:13 2023 +0000

    bpf: Fix incorrect verifier pruning due to missing register precision taints
    
    [ Upstream commit 71b547f561247897a0a14f3082730156c0533fed ]
    
    Juan Jose et al reported an issue found via fuzzing where the verifier's
    pruning logic prematurely marks a program path as safe.
    
    Consider the following program:
    
       0: (b7) r6 = 1024
       1: (b7) r7 = 0
       2: (b7) r8 = 0
       3: (b7) r9 = -2147483648
       4: (97) r6 %= 1025
       5: (05) goto pc+0
       6: (bd) if r6 <= r9 goto pc+2
       7: (97) r6 %= 1
       8: (b7) r9 = 0
       9: (bd) if r6 <= r9 goto pc+1
      10: (b7) r6 = 0
      11: (b7) r0 = 0
      12: (63) *(u32 *)(r10 -4) = r0
      13: (18) r4 = 0xffff888103693400 // map_ptr(ks=4,vs=48)
      15: (bf) r1 = r4
      16: (bf) r2 = r10
      17: (07) r2 += -4
      18: (85) call bpf_map_lookup_elem#1
      19: (55) if r0 != 0x0 goto pc+1
      20: (95) exit
      21: (77) r6 >>= 10
      22: (27) r6 *= 8192
      23: (bf) r1 = r0
      24: (0f) r0 += r6
      25: (79) r3 = *(u64 *)(r0 +0)
      26: (7b) *(u64 *)(r1 +0) = r3
      27: (95) exit
    
    The verifier treats this as safe, leading to oob read/write access due
    to an incorrect verifier conclusion:
    
      func#0 @0
      0: R1=ctx(off=0,imm=0) R10=fp0
      0: (b7) r6 = 1024                     ; R6_w=1024
      1: (b7) r7 = 0                        ; R7_w=0
      2: (b7) r8 = 0                        ; R8_w=0
      3: (b7) r9 = -2147483648              ; R9_w=-2147483648
      4: (97) r6 %= 1025                    ; R6_w=scalar()
      5: (05) goto pc+0
      6: (bd) if r6 <= r9 goto pc+2         ; R6_w=scalar(umin=18446744071562067969,var_off=(0xffffffff00000000; 0xffffffff)) R9_w=-2147483648
      7: (97) r6 %= 1                       ; R6_w=scalar()
      8: (b7) r9 = 0                        ; R9=0
      9: (bd) if r6 <= r9 goto pc+1         ; R6=scalar(umin=1) R9=0
      10: (b7) r6 = 0                       ; R6_w=0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 9
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff8ad3886c2a00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1   ; R0=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0)
      19: (55) if r0 != 0x0 goto pc+1       ; R0=0
      20: (95) exit
    
      from 19 to 21: R0=map_value(off=0,ks=4,vs=48,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      21: (77) r6 >>= 10                    ; R6_w=0
      22: (27) r6 *= 8192                   ; R6_w=0
      23: (bf) r1 = r0                      ; R0=map_value(off=0,ks=4,vs=48,imm=0) R1_w=map_value(off=0,ks=4,vs=48,imm=0)
      24: (0f) r0 += r6
      last_idx 24 first_idx 19
      regs=40 stack=0 before 23: (bf) r1 = r0
      regs=40 stack=0 before 22: (27) r6 *= 8192
      regs=40 stack=0 before 21: (77) r6 >>= 10
      regs=40 stack=0 before 19: (55) if r0 != 0x0 goto pc+1
      parent didn't have regs=40 stack=0 marks: R0_rw=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0) R6_rw=P0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      last_idx 18 first_idx 9
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff8ad3886c2a00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      regs=40 stack=0 before 10: (b7) r6 = 0
      25: (79) r3 = *(u64 *)(r0 +0)         ; R0_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      26: (7b) *(u64 *)(r1 +0) = r3         ; R1_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      27: (95) exit
    
      from 9 to 11: R1=ctx(off=0,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 11
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff8ad3886c2a00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1
      frame 0: propagating r6
      last_idx 19 first_idx 11
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff8ad3886c2a00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_r=P0 R7=0 R8=0 R9=0 R10=fp0
      last_idx 9 first_idx 9
      regs=40 stack=0 before 9: (bd) if r6 <= r9 goto pc+1
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_rw=Pscalar() R7_w=0 R8_w=0 R9_rw=0 R10=fp0
      last_idx 8 first_idx 0
      regs=40 stack=0 before 8: (b7) r9 = 0
      regs=40 stack=0 before 7: (97) r6 %= 1
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=40 stack=0 before 5: (05) goto pc+0
      regs=40 stack=0 before 4: (97) r6 %= 1025
      regs=40 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      19: safe
      frame 0: propagating r6
      last_idx 9 first_idx 0
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=40 stack=0 before 5: (05) goto pc+0
      regs=40 stack=0 before 4: (97) r6 %= 1025
      regs=40 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
    
      from 6 to 9: safe
      verification time 110 usec
      stack depth 4
      processed 36 insns (limit 1000000) max_states_per_insn 0 total_states 3 peak_states 3 mark_read 2
    
    The verifier considers this program as safe by mistakenly pruning unsafe
    code paths. In the above func#0, code lines 0-10 are of interest. In line
    0-3 registers r6 to r9 are initialized with known scalar values. In line 4
    the register r6 is reset to an unknown scalar given the verifier does not
    track modulo operations. Due to this, the verifier can also not determine
    precisely which branches in line 6 and 9 are taken, therefore it needs to
    explore them both.
    
    As can be seen, the verifier starts with exploring the false/fall-through
    paths first. The 'from 19 to 21' path has both r6=0 and r9=0 and the pointer
    arithmetic on r0 += r6 is therefore considered safe. Given the arithmetic,
    r6 is correctly marked for precision tracking where backtracking kicks in
    where it walks back the current path all the way where r6 was set to 0 in
    the fall-through branch.
    
    Next, the pruning logics pops the path 'from 9 to 11' from the stack. Also
    here, the state of the registers is the same, that is, r6=0 and r9=0, so
    that at line 19 the path can be pruned as it is considered safe. It is
    interesting to note that the conditional in line 9 turned r6 into a more
    precise state, that is, in the fall-through path at the beginning of line
    10, it is R6=scalar(umin=1), and in the branch-taken path (which is analyzed
    here) at the beginning of line 11, r6 turned into a known const r6=0 as
    r9=0 prior to that and therefore (unsigned) r6 <= 0 concludes that r6 must
    be 0 (**):
    
      [...]                                 ; R6_w=scalar()
      9: (bd) if r6 <= r9 goto pc+1         ; R6=scalar(umin=1) R9=0
      [...]
    
      from 9 to 11: R1=ctx(off=0,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0
      [...]
    
    The next path is 'from 6 to 9'. The verifier considers the old and current
    state equivalent, and therefore prunes the search incorrectly. Looking into
    the two states which are being compared by the pruning logic at line 9, the
    old state consists of R6_rwD=Pscalar() R9_rwD=0 R10=fp0 and the new state
    consists of R1=ctx(off=0,imm=0) R6_w=scalar(umax=18446744071562067968)
    R7_w=0 R8_w=0 R9_w=-2147483648 R10=fp0. While r6 had the reg->precise flag
    correctly set in the old state, r9 did not. Both r6'es are considered as
    equivalent given the old one is a superset of the current, more precise one,
    however, r9's actual values (0 vs 0x80000000) mismatch. Given the old r9
    did not have reg->precise flag set, the verifier does not consider the
    register as contributing to the precision state of r6, and therefore it
    considered both r9 states as equivalent. However, for this specific pruned
    path (which is also the actual path taken at runtime), register r6 will be
    0x400 and r9 0x80000000 when reaching line 21, thus oob-accessing the map.
    
    The purpose of precision tracking is to initially mark registers (including
    spilled ones) as imprecise to help verifier's pruning logic finding equivalent
    states it can then prune if they don't contribute to the program's safety
    aspects. For example, if registers are used for pointer arithmetic or to pass
    constant length to a helper, then the verifier sets reg->precise flag and
    backtracks the BPF program instruction sequence and chain of verifier states
    to ensure that the given register or stack slot including their dependencies
    are marked as precisely tracked scalar. This also includes any other registers
    and slots that contribute to a tracked state of given registers/stack slot.
    This backtracking relies on recorded jmp_history and is able to traverse
    entire chain of parent states. This process ends only when all the necessary
    registers/slots and their transitive dependencies are marked as precise.
    
    The backtrack_insn() is called from the current instruction up to the first
    instruction, and its purpose is to compute a bitmask of registers and stack
    slots that need precision tracking in the parent's verifier state. For example,
    if a current instruction is r6 = r7, then r6 needs precision after this
    instruction and r7 needs precision before this instruction, that is, in the
    parent state. Hence for the latter r7 is marked and r6 unmarked.
    
    For the class of jmp/jmp32 instructions, backtrack_insn() today only looks
    at call and exit instructions and for all other conditionals the masks
    remain as-is. However, in the given situation register r6 has a dependency
    on r9 (as described above in **), so also that one needs to be marked for
    precision tracking. In other words, if an imprecise register influences a
    precise one, then the imprecise register should also be marked precise.
    Meaning, in the parent state both dest and src register need to be tracked
    for precision and therefore the marking must be more conservative by setting
    reg->precise flag for both. The precision propagation needs to cover both
    for the conditional: if the src reg was marked but not the dst reg and vice
    versa.
    
    After the fix the program is correctly rejected:
    
      func#0 @0
      0: R1=ctx(off=0,imm=0) R10=fp0
      0: (b7) r6 = 1024                     ; R6_w=1024
      1: (b7) r7 = 0                        ; R7_w=0
      2: (b7) r8 = 0                        ; R8_w=0
      3: (b7) r9 = -2147483648              ; R9_w=-2147483648
      4: (97) r6 %= 1025                    ; R6_w=scalar()
      5: (05) goto pc+0
      6: (bd) if r6 <= r9 goto pc+2         ; R6_w=scalar(umin=18446744071562067969,var_off=(0xffffffff80000000; 0x7fffffff),u32_min=-2147483648) R9_w=-2147483648
      7: (97) r6 %= 1                       ; R6_w=scalar()
      8: (b7) r9 = 0                        ; R9=0
      9: (bd) if r6 <= r9 goto pc+1         ; R6=scalar(umin=1) R9=0
      10: (b7) r6 = 0                       ; R6_w=0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 9
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff9290dc5bfe00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1   ; R0=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0)
      19: (55) if r0 != 0x0 goto pc+1       ; R0=0
      20: (95) exit
    
      from 19 to 21: R0=map_value(off=0,ks=4,vs=48,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      21: (77) r6 >>= 10                    ; R6_w=0
      22: (27) r6 *= 8192                   ; R6_w=0
      23: (bf) r1 = r0                      ; R0=map_value(off=0,ks=4,vs=48,imm=0) R1_w=map_value(off=0,ks=4,vs=48,imm=0)
      24: (0f) r0 += r6
      last_idx 24 first_idx 19
      regs=40 stack=0 before 23: (bf) r1 = r0
      regs=40 stack=0 before 22: (27) r6 *= 8192
      regs=40 stack=0 before 21: (77) r6 >>= 10
      regs=40 stack=0 before 19: (55) if r0 != 0x0 goto pc+1
      parent didn't have regs=40 stack=0 marks: R0_rw=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0) R6_rw=P0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      last_idx 18 first_idx 9
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff9290dc5bfe00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      regs=40 stack=0 before 10: (b7) r6 = 0
      25: (79) r3 = *(u64 *)(r0 +0)         ; R0_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      26: (7b) *(u64 *)(r1 +0) = r3         ; R1_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      27: (95) exit
    
      from 9 to 11: R1=ctx(off=0,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 11
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff9290dc5bfe00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1
      frame 0: propagating r6
      last_idx 19 first_idx 11
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff9290dc5bfe00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_r=P0 R7=0 R8=0 R9=0 R10=fp0
      last_idx 9 first_idx 9
      regs=40 stack=0 before 9: (bd) if r6 <= r9 goto pc+1
      parent didn't have regs=240 stack=0 marks: R1=ctx(off=0,imm=0) R6_rw=Pscalar() R7_w=0 R8_w=0 R9_rw=P0 R10=fp0
      last_idx 8 first_idx 0
      regs=240 stack=0 before 8: (b7) r9 = 0
      regs=40 stack=0 before 7: (97) r6 %= 1
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      19: safe
    
      from 6 to 9: R1=ctx(off=0,imm=0) R6_w=scalar(umax=18446744071562067968) R7_w=0 R8_w=0 R9_w=-2147483648 R10=fp0
      9: (bd) if r6 <= r9 goto pc+1
      last_idx 9 first_idx 0
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      last_idx 9 first_idx 0
      regs=200 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      11: R6=scalar(umax=18446744071562067968) R9=-2147483648
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 11
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff9290dc5bfe00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1   ; R0_w=map_value_or_null(id=3,off=0,ks=4,vs=48,imm=0)
      19: (55) if r0 != 0x0 goto pc+1       ; R0_w=0
      20: (95) exit
    
      from 19 to 21: R0=map_value(off=0,ks=4,vs=48,imm=0) R6=scalar(umax=18446744071562067968) R7=0 R8=0 R9=-2147483648 R10=fp0 fp-8=mmmm????
      21: (77) r6 >>= 10                    ; R6_w=scalar(umax=18014398507384832,var_off=(0x0; 0x3fffffffffffff))
      22: (27) r6 *= 8192                   ; R6_w=scalar(smax=9223372036854767616,umax=18446744073709543424,var_off=(0x0; 0xffffffffffffe000),s32_max=2147475456,u32_max=-8192)
      23: (bf) r1 = r0                      ; R0=map_value(off=0,ks=4,vs=48,imm=0) R1_w=map_value(off=0,ks=4,vs=48,imm=0)
      24: (0f) r0 += r6
      last_idx 24 first_idx 21
      regs=40 stack=0 before 23: (bf) r1 = r0
      regs=40 stack=0 before 22: (27) r6 *= 8192
      regs=40 stack=0 before 21: (77) r6 >>= 10
      parent didn't have regs=40 stack=0 marks: R0_rw=map_value(off=0,ks=4,vs=48,imm=0) R6_r=Pscalar(umax=18446744071562067968) R7=0 R8=0 R9=-2147483648 R10=fp0 fp-8=mmmm????
      last_idx 19 first_idx 11
      regs=40 stack=0 before 19: (55) if r0 != 0x0 goto pc+1
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff9290dc5bfe00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_rw=Pscalar(umax=18446744071562067968) R7_w=0 R8_w=0 R9_w=-2147483648 R10=fp0
      last_idx 9 first_idx 0
      regs=40 stack=0 before 9: (bd) if r6 <= r9 goto pc+1
      regs=240 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      math between map_value pointer and register with unbounded min value is not allowed
      verification time 886 usec
      stack depth 4
      processed 49 insns (limit 1000000) max_states_per_insn 1 total_states 5 peak_states 5 mark_read 2
    
    Fixes: b5dc0163d8fd ("bpf: precise scalar_value tracking")
    Reported-by: Juan Jose Lopez Jaimez <jjlopezjaimez@google.com>
    Reported-by: Meador Inge <meadori@google.com>
    Reported-by: Simon Scannell <simonscannell@google.com>
    Reported-by: Nenad Stojanovski <thenenadx@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Co-developed-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Reviewed-by: Juan Jose Lopez Jaimez <jjlopezjaimez@google.com>
    Reviewed-by: Meador Inge <meadori@google.com>
    Reviewed-by: Simon Scannell <simonscannell@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25e50cdf9f637f1fa765f69ca85f78363ccf062a
Author: Li Lanzhe <u202212060@hust.edu.cn>
Date:   Wed Apr 19 07:50:29 2023 -0400

    spi: spi-rockchip: Fix missing unwind goto in rockchip_sfc_probe()
    
    [ Upstream commit 359f5b0d4e26b7a7bcc574d6148b31a17cefe47d ]
    
    If devm_request_irq() fails, then we are directly return 'ret' without
    clk_disable_unprepare(sfc->clk) and clk_disable_unprepare(sfc->hclk).
    
    Fix this by changing direct return to a goto 'err_irq'.
    
    Fixes: 0b89fc0a367e ("spi: rockchip-sfc: add rockchip serial flash controller")
    Signed-off-by: Li Lanzhe <u202212060@hust.edu.cn>
    Reviewed-by: Dongliang Mu <dzm91@hust.edu.cn>
    Link: https://lore.kernel.org/r/20230419115030.6029-1-u202212060@hust.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbce626dcd237442c4e6ad27c7c7a0fd59902de5
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Mon Apr 17 18:52:51 2023 +0200

    mlxsw: pci: Fix possible crash during initialization
    
    [ Upstream commit 1f64757ee2bb22a93ec89b4c71707297e8cca0ba ]
    
    During initialization the driver issues a reset command via its command
    interface in order to remove previous configuration from the device.
    
    After issuing the reset, the driver waits for 200ms before polling on
    the "system_status" register using memory-mapped IO until the device
    reaches a ready state (0x5E). The wait is necessary because the reset
    command only triggers the reset, but the reset itself happens
    asynchronously. If the driver starts polling too soon, the read of the
    "system_status" register will never return and the system will crash
    [1].
    
    The issue was discovered when the device was flashed with a development
    firmware version where the reset routine took longer to complete. The
    issue was fixed in the firmware, but it exposed the fact that the
    current wait time is borderline.
    
    Fix by increasing the wait time from 200ms to 400ms. With this patch and
    the buggy firmware version, the issue did not reproduce in 10 reboots
    whereas without the patch the issue is reproduced quite consistently.
    
    [1]
    mce: CPUs not responding to MCE broadcast (may include false positives): 0,4
    mce: CPUs not responding to MCE broadcast (may include false positives): 0,4
    Kernel panic - not syncing: Timeout: Not all CPUs entered broadcast exception handler
    Shutting down cpus with NMI
    Kernel Offset: 0x12000000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    
    Fixes: ac004e84164e ("mlxsw: pci: Wait longer before accessing the device after reset")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4eee0d9d3c1117aa4a1c9f4c7f29287107e7c084
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 17 09:00:52 2023 -0400

    net: rpl: fix rpl header size calculation
    
    [ Upstream commit 4e006c7a6dac0ead4c1bf606000aa90a372fc253 ]
    
    This patch fixes a missing 8 byte for the header size calculation. The
    ipv6_rpl_srh_size() is used to check a skb_pull() on skb->data which
    points to skb_transport_header(). Currently we only check on the
    calculated addresses fields using CmprI and CmprE fields, see:
    
    https://www.rfc-editor.org/rfc/rfc6554#section-3
    
    there is however a missing 8 byte inside the calculation which stands
    for the fields before the addresses field. Those 8 bytes are represented
    by sizeof(struct ipv6_rpl_sr_hdr) expression.
    
    Fixes: 8610c7c6e3bd ("net: ipv6: add support for rpl sr exthdr")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Reported-by: maxpl0it <maxpl0it@protonmail.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92e0bc5e34adcadcfe71f2275e1da494a0d83950
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Mon Apr 17 09:12:16 2023 +0300

    bonding: Fix memory leak when changing bond type to Ethernet
    
    [ Upstream commit c484fcc058bada604d7e4e5228d4affb646ddbc2 ]
    
    When a net device is put administratively up, its 'IFF_UP' flag is set
    (if not set already) and a 'NETDEV_UP' notification is emitted, which
    causes the 8021q driver to add VLAN ID 0 on the device. The reverse
    happens when a net device is put administratively down.
    
    When changing the type of a bond to Ethernet, its 'IFF_UP' flag is
    incorrectly cleared, resulting in the kernel skipping the above process
    and VLAN ID 0 being leaked [1].
    
    Fix by restoring the flag when changing the type to Ethernet, in a
    similar fashion to the restoration of the 'IFF_SLAVE' flag.
    
    The issue can be reproduced using the script in [2], with example out
    before and after the fix in [3].
    
    [1]
    unreferenced object 0xffff888103479900 (size 256):
      comm "ip", pid 329, jiffies 4294775225 (age 28.561s)
      hex dump (first 32 bytes):
        00 a0 0c 15 81 88 ff ff 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<ffffffff81a6051a>] kmalloc_trace+0x2a/0xe0
        [<ffffffff8406426c>] vlan_vid_add+0x30c/0x790
        [<ffffffff84068e21>] vlan_device_event+0x1491/0x21a0
        [<ffffffff81440c8e>] notifier_call_chain+0xbe/0x1f0
        [<ffffffff8372383a>] call_netdevice_notifiers_info+0xba/0x150
        [<ffffffff837590f2>] __dev_notify_flags+0x132/0x2e0
        [<ffffffff8375ad9f>] dev_change_flags+0x11f/0x180
        [<ffffffff8379af36>] do_setlink+0xb96/0x4060
        [<ffffffff837adf6a>] __rtnl_newlink+0xc0a/0x18a0
        [<ffffffff837aec6c>] rtnl_newlink+0x6c/0xa0
        [<ffffffff837ac64e>] rtnetlink_rcv_msg+0x43e/0xe00
        [<ffffffff839a99e0>] netlink_rcv_skb+0x170/0x440
        [<ffffffff839a738f>] netlink_unicast+0x53f/0x810
        [<ffffffff839a7fcb>] netlink_sendmsg+0x96b/0xe90
        [<ffffffff8369d12f>] ____sys_sendmsg+0x30f/0xa70
        [<ffffffff836a6d7a>] ___sys_sendmsg+0x13a/0x1e0
    unreferenced object 0xffff88810f6a83e0 (size 32):
      comm "ip", pid 329, jiffies 4294775225 (age 28.561s)
      hex dump (first 32 bytes):
        a0 99 47 03 81 88 ff ff a0 99 47 03 81 88 ff ff  ..G.......G.....
        81 00 00 00 01 00 00 00 cc cc cc cc cc cc cc cc  ................
      backtrace:
        [<ffffffff81a6051a>] kmalloc_trace+0x2a/0xe0
        [<ffffffff84064369>] vlan_vid_add+0x409/0x790
        [<ffffffff84068e21>] vlan_device_event+0x1491/0x21a0
        [<ffffffff81440c8e>] notifier_call_chain+0xbe/0x1f0
        [<ffffffff8372383a>] call_netdevice_notifiers_info+0xba/0x150
        [<ffffffff837590f2>] __dev_notify_flags+0x132/0x2e0
        [<ffffffff8375ad9f>] dev_change_flags+0x11f/0x180
        [<ffffffff8379af36>] do_setlink+0xb96/0x4060
        [<ffffffff837adf6a>] __rtnl_newlink+0xc0a/0x18a0
        [<ffffffff837aec6c>] rtnl_newlink+0x6c/0xa0
        [<ffffffff837ac64e>] rtnetlink_rcv_msg+0x43e/0xe00
        [<ffffffff839a99e0>] netlink_rcv_skb+0x170/0x440
        [<ffffffff839a738f>] netlink_unicast+0x53f/0x810
        [<ffffffff839a7fcb>] netlink_sendmsg+0x96b/0xe90
        [<ffffffff8369d12f>] ____sys_sendmsg+0x30f/0xa70
        [<ffffffff836a6d7a>] ___sys_sendmsg+0x13a/0x1e0
    
    [2]
    ip link add name t-nlmon type nlmon
    ip link add name t-dummy type dummy
    ip link add name t-bond type bond mode active-backup
    
    ip link set dev t-bond up
    ip link set dev t-nlmon master t-bond
    ip link set dev t-nlmon nomaster
    ip link show dev t-bond
    ip link set dev t-dummy master t-bond
    ip link show dev t-bond
    
    ip link del dev t-bond
    ip link del dev t-dummy
    ip link del dev t-nlmon
    
    [3]
    Before:
    
    12: t-bond: <NO-CARRIER,BROADCAST,MULTICAST,MASTER,UP> mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default qlen 1000
        link/netlink
    12: t-bond: <BROADCAST,MULTICAST,MASTER,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
        link/ether 46:57:39:a4:46:a2 brd ff:ff:ff:ff:ff:ff
    
    After:
    
    12: t-bond: <NO-CARRIER,BROADCAST,MULTICAST,MASTER,UP> mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default qlen 1000
        link/netlink
    12: t-bond: <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
        link/ether 66:48:7b:74:b6:8a brd ff:ff:ff:ff:ff:ff
    
    Fixes: e36b9d16c6a6 ("bonding: clean muticast addresses when device changes type")
    Fixes: 75c78500ddad ("bonding: remap muticast addresses without using dev_close() and dev_open()")
    Fixes: 9ec7eb60dcbc ("bonding: restore IFF_MASTER/SLAVE flags on bond enslave ether type change")
    Reported-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/netdev/78a8a03b-6070-3e6b-5042-f848dab16fb8@alu.unizg.hr/
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b24026f1409c5ff1d68721cb613847074083289d
Author: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
Date:   Mon Apr 17 05:07:18 2023 -0700

    mlxfw: fix null-ptr-deref in mlxfw_mfa2_tlv_next()
    
    [ Upstream commit c0e73276f0fcbbd3d4736ba975d7dc7a48791b0c ]
    
    Function mlxfw_mfa2_tlv_multi_get() returns NULL if 'tlv' in
    question does not pass checks in mlxfw_mfa2_tlv_payload_get(). This
    behaviour may lead to NULL pointer dereference in 'multi->total_len'.
    Fix this issue by testing mlxfw_mfa2_tlv_multi_get()'s return value
    against NULL.
    
    Found by Linux Verification Center (linuxtesting.org) with static
    analysis tool SVACE.
    
    Fixes: 410ed13cae39 ("Add the mlxfw module for Mellanox firmware flash process")
    Co-developed-by: Natalia Petrova <n.petrova@fintech.ru>
    Signed-off-by: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Link: https://lore.kernel.org/r/20230417120718.52325-1-n.zhandarovich@fintech.ru
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5610d81d0214679ad4c109d8815aa8249813ed54
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 16 23:58:18 2023 -0700

    bnxt_en: Do not initialize PTP on older P3/P4 chips
    
    [ Upstream commit e8b51a1a15d5a3cce231e0669f6a161dc5bb9b75 ]
    
    The driver does not support PTP on these older chips and it is assuming
    that firmware on these older chips will not return the
    PORT_MAC_PTP_QCFG_RESP_FLAGS_HWRM_ACCESS flag in __bnxt_hwrm_ptp_qcfg(),
    causing the function to abort quietly.
    
    But newer firmware now sets this flag and so __bnxt_hwrm_ptp_qcfg()
    will proceed further.  Eventually it will fail in bnxt_ptp_init() ->
    bnxt_map_ptp_regs() because there is no code to support the older chips.
    The driver will then complain:
    
    "PTP initialization failed.\n"
    
    Fix it so that we abort quietly earlier without going through the
    unnecessary steps and alarming the user with the warning log.
    
    Fixes: ae5c42f0b92c ("bnxt_en: Get PTP hardware capability from firmware")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ff875ee15bc88a4245c2c850a95a4a256c03b9d
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Apr 17 17:50:28 2023 +0200

    netfilter: nf_tables: tighten netlink attribute requirements for catch-all elements
    
    [ Upstream commit d4eb7e39929a3b1ff30fb751b4859fc2410702a0 ]
    
    If NFT_SET_ELEM_CATCHALL is set on, then userspace provides no set element
    key. Otherwise, bail out with -EINVAL.
    
    Fixes: aaa31047a6d2 ("netfilter: nftables: add catch-all set element support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a397535d1899d62d8686a825c902451bd15b123
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Apr 17 12:14:29 2023 +0200

    netfilter: nf_tables: validate catch-all set elements
    
    [ Upstream commit d46fc894147cf98dd6e8210aa99ed46854191840 ]
    
    catch-all set element might jump/goto to chain that uses expressions
    that require validation.
    
    Fixes: aaa31047a6d2 ("netfilter: nftables: add catch-all set element support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25f1b40cf9b22c429d84fed8f212d850c7f6f082
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Mon Apr 3 07:13:18 2023 +0200

    i40e: fix i40e_setup_misc_vector() error handling
    
    [ Upstream commit c86c00c6935505929cc9adb29ddb85e48c71f828 ]
    
    Add error handling of i40e_setup_misc_vector() in i40e_rebuild().
    In case interrupt vectors setup fails do not re-open vsi-s and
    do not bring up vf-s, we have no interrupts to serve a traffic
    anyway.
    
    Fixes: 41c445ff0f48 ("i40e: main driver core")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 536ed39cbec8e3a694e3ea25ec8d4694c5832c87
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Fri Mar 24 18:16:38 2023 +0100

    i40e: fix accessing vsi->active_filters without holding lock
    
    [ Upstream commit 8485d093b076e59baff424552e8aecfc5bd2d261 ]
    
    Fix accessing vsi->active_filters without holding the mac_filter_hash_lock.
    Move vsi->active_filters = 0 inside critical section and
    move clear_bit(__I40E_VSI_OVERFLOW_PROMISC, vsi->state) after the critical
    section to ensure the new filters from other threads can be added only after
    filters cleaning in the critical section is finished.
    
    Fixes: 278e7d0b9d68 ("i40e: store MAC/VLAN filters in a hash with the MAC Address as key")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8089d724dd7aef6b330ab8602105375ee0b9b4a8
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 17 10:21:36 2023 +0200

    netfilter: nf_tables: fix ifdef to also consider nf_tables=m
    
    [ Upstream commit c55c0e91c813589dc55bea6bf9a9fbfaa10ae41d ]
    
    nftables can be built as a module, so fix the preprocessor conditional
    accordingly.
    
    Fixes: 478b360a47b7 ("netfilter: nf_tables: fix nf_trace always-on with XT_TRACE=n")
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69ea11769b8de695914b74367a8681dcaa834e78
Author: Ding Hui <dinghui@sangfor.com.cn>
Date:   Fri Apr 14 23:23:06 2023 +0800

    sfc: Fix use-after-free due to selftest_work
    
    [ Upstream commit a80bb8e7233b2ad6ff119646b6e33fb3edcec37b ]
    
    There is a use-after-free scenario that is:
    
    When the NIC is down, user set mac address or vlan tag to VF,
    the xxx_set_vf_mac() or xxx_set_vf_vlan() will invoke efx_net_stop()
    and efx_net_open(), since netif_running() is false, the port will not
    start and keep port_enabled false, but selftest_work is scheduled
    in efx_net_open().
    
    If we remove the device before selftest_work run, the efx_stop_port()
    will not be called since the NIC is down, and then efx is freed,
    we will soon get a UAF in run_timer_softirq() like this:
    
    [ 1178.907941] ==================================================================
    [ 1178.907948] BUG: KASAN: use-after-free in run_timer_softirq+0xdea/0xe90
    [ 1178.907950] Write of size 8 at addr ff11001f449cdc80 by task swapper/47/0
    [ 1178.907950]
    [ 1178.907953] CPU: 47 PID: 0 Comm: swapper/47 Kdump: loaded Tainted: G           O     --------- -t - 4.18.0 #1
    [ 1178.907954] Hardware name: SANGFOR X620G40/WI2HG-208T1061A, BIOS SPYH051032-U01 04/01/2022
    [ 1178.907955] Call Trace:
    [ 1178.907956]  <IRQ>
    [ 1178.907960]  dump_stack+0x71/0xab
    [ 1178.907963]  print_address_description+0x6b/0x290
    [ 1178.907965]  ? run_timer_softirq+0xdea/0xe90
    [ 1178.907967]  kasan_report+0x14a/0x2b0
    [ 1178.907968]  run_timer_softirq+0xdea/0xe90
    [ 1178.907971]  ? init_timer_key+0x170/0x170
    [ 1178.907973]  ? hrtimer_cancel+0x20/0x20
    [ 1178.907976]  ? sched_clock+0x5/0x10
    [ 1178.907978]  ? sched_clock_cpu+0x18/0x170
    [ 1178.907981]  __do_softirq+0x1c8/0x5fa
    [ 1178.907985]  irq_exit+0x213/0x240
    [ 1178.907987]  smp_apic_timer_interrupt+0xd0/0x330
    [ 1178.907989]  apic_timer_interrupt+0xf/0x20
    [ 1178.907990]  </IRQ>
    [ 1178.907991] RIP: 0010:mwait_idle+0xae/0x370
    
    If the NIC is not actually brought up, there is no need to schedule
    selftest_work, so let's move invoking efx_selftest_async_start()
    into efx_start_all(), and it will be canceled by broughting down.
    
    Fixes: dd40781e3a4e ("sfc: Run event/IRQ self-test asynchronously when interface is brought up")
    Fixes: e340be923012 ("sfc: add ndo_set_vf_mac() function for EF10")
    Debugged-by: Huang Cun <huangcun@sangfor.com.cn>
    Cc: Donglin Peng <pengdonglin@sangfor.com.cn>
    Suggested-by: Martin Habets <habetsm.xilinx@gmail.com>
    Signed-off-by: Ding Hui <dinghui@sangfor.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa16f7b99d2347d67a8b42a0a6edc97dc26d3b9f
Author: Jonathan Cooper <jonathan.s.cooper@amd.com>
Date:   Tue Jun 28 14:58:55 2022 +0100

    sfc: Split STATE_READY in to STATE_NET_DOWN and STATE_NET_UP.
    
    [ Upstream commit 813cf9d1e753e1e0a247d3d685212a06141b483e ]
    
    This patch splits the READY state in to NET_UP and NET_DOWN. This
    is to prepare for future work to delay resource allocation until
    interface up so that we can use resources more efficiently in
    SRIOV environments, and also to lay the ground work for an extra
    PROBED state where we don't create a network interface,
    for VDPA operation.
    
    Signed-off-by: Jonathan Cooper <jonathan.s.cooper@amd.com>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: a80bb8e7233b ("sfc: Fix use-after-free due to selftest_work")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b36d82ddc74e01df5ed34d76277cfa2312732b92
Author: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
Date:   Fri Apr 14 14:08:35 2023 +0800

    virtio_net: bugfix overflow inside xdp_linearize_page()
    
    [ Upstream commit 853618d5886bf94812f31228091cd37d308230f7 ]
    
    Here we copy the data from the original buf to the new page. But we
    not check that it may be overflow.
    
    As long as the size received(including vnethdr) is greater than 3840
    (PAGE_SIZE -VIRTIO_XDP_HEADROOM). Then the memcpy will overflow.
    
    And this is completely possible, as long as the MTU is large, such
    as 4096. In our test environment, this will cause crash. Since crash is
    caused by the written memory, it is meaningless, so I do not include it.
    
    Fixes: 72979a6c3590 ("virtio_net: xdp, add slowpath case for non contiguous buffers")
    Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ffc0e8105510cb826cb9d27ed1820a1131c82d4
Author: Gwangun Jung <exsociety@gmail.com>
Date:   Thu Apr 13 19:35:54 2023 +0900

    net: sched: sch_qfq: prevent slab-out-of-bounds in qfq_activate_agg
    
    [ Upstream commit 3037933448f60f9acb705997eae62013ecb81e0d ]
    
    If the TCA_QFQ_LMAX value is not offered through nlattr, lmax is determined by the MTU value of the network device.
    The MTU of the loopback device can be set up to 2^31-1.
    As a result, it is possible to have an lmax value that exceeds QFQ_MIN_LMAX.
    
    Due to the invalid lmax value, an index is generated that exceeds the QFQ_MAX_INDEX(=24) value, causing out-of-bounds read/write errors.
    
    The following reports a oob access:
    
    [   84.582666] BUG: KASAN: slab-out-of-bounds in qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)
    [   84.583267] Read of size 4 at addr ffff88810f676948 by task ping/301
    [   84.583686]
    [   84.583797] CPU: 3 PID: 301 Comm: ping Not tainted 6.3.0-rc5 #1
    [   84.584164] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
    [   84.584644] Call Trace:
    [   84.584787]  <TASK>
    [   84.584906] dump_stack_lvl (lib/dump_stack.c:107 (discriminator 1))
    [   84.585108] print_report (mm/kasan/report.c:320 mm/kasan/report.c:430)
    [   84.585570] kasan_report (mm/kasan/report.c:538)
    [   84.585988] qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)
    [   84.586599] qfq_enqueue (net/sched/sch_qfq.c:1255)
    [   84.587607] dev_qdisc_enqueue (net/core/dev.c:3776)
    [   84.587749] __dev_queue_xmit (./include/net/sch_generic.h:186 net/core/dev.c:3865 net/core/dev.c:4212)
    [   84.588763] ip_finish_output2 (./include/net/neighbour.h:546 net/ipv4/ip_output.c:228)
    [   84.589460] ip_output (net/ipv4/ip_output.c:430)
    [   84.590132] ip_push_pending_frames (./include/net/dst.h:444 net/ipv4/ip_output.c:126 net/ipv4/ip_output.c:1586 net/ipv4/ip_output.c:1606)
    [   84.590285] raw_sendmsg (net/ipv4/raw.c:649)
    [   84.591960] sock_sendmsg (net/socket.c:724 net/socket.c:747)
    [   84.592084] __sys_sendto (net/socket.c:2142)
    [   84.593306] __x64_sys_sendto (net/socket.c:2150)
    [   84.593779] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
    [   84.593902] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    [   84.594070] RIP: 0033:0x7fe568032066
    [   84.594192] Code: 0e 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 41 89 ca 64 8b 04 25 18 00 00 00 85 c09[ 84.594796] RSP: 002b:00007ffce388b4e8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    
    Code starting with the faulting instruction
    ===========================================
    [   84.595047] RAX: ffffffffffffffda RBX: 00007ffce388cc70 RCX: 00007fe568032066
    [   84.595281] RDX: 0000000000000040 RSI: 00005605fdad6d10 RDI: 0000000000000003
    [   84.595515] RBP: 00005605fdad6d10 R08: 00007ffce388eeec R09: 0000000000000010
    [   84.595749] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040
    [   84.595984] R13: 00007ffce388cc30 R14: 00007ffce388b4f0 R15: 0000001d00000001
    [   84.596218]  </TASK>
    [   84.596295]
    [   84.596351] Allocated by task 291:
    [   84.596467] kasan_save_stack (mm/kasan/common.c:46)
    [   84.596597] kasan_set_track (mm/kasan/common.c:52)
    [   84.596725] __kasan_kmalloc (mm/kasan/common.c:384)
    [   84.596852] __kmalloc_node (./include/linux/kasan.h:196 mm/slab_common.c:967 mm/slab_common.c:974)
    [   84.596979] qdisc_alloc (./include/linux/slab.h:610 ./include/linux/slab.h:731 net/sched/sch_generic.c:938)
    [   84.597100] qdisc_create (net/sched/sch_api.c:1244)
    [   84.597222] tc_modify_qdisc (net/sched/sch_api.c:1680)
    [   84.597357] rtnetlink_rcv_msg (net/core/rtnetlink.c:6174)
    [   84.597495] netlink_rcv_skb (net/netlink/af_netlink.c:2574)
    [   84.597627] netlink_unicast (net/netlink/af_netlink.c:1340 net/netlink/af_netlink.c:1365)
    [   84.597759] netlink_sendmsg (net/netlink/af_netlink.c:1942)
    [   84.597891] sock_sendmsg (net/socket.c:724 net/socket.c:747)
    [   84.598016] ____sys_sendmsg (net/socket.c:2501)
    [   84.598147] ___sys_sendmsg (net/socket.c:2557)
    [   84.598275] __sys_sendmsg (./include/linux/file.h:31 net/socket.c:2586)
    [   84.598399] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
    [   84.598520] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    [   84.598688]
    [   84.598744] The buggy address belongs to the object at ffff88810f674000
    [   84.598744]  which belongs to the cache kmalloc-8k of size 8192
    [   84.599135] The buggy address is located 2664 bytes to the right of
    [   84.599135]  allocated 7904-byte region [ffff88810f674000, ffff88810f675ee0)
    [   84.599544]
    [   84.599598] The buggy address belongs to the physical page:
    [   84.599777] page:00000000e638567f refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x10f670
    [   84.600074] head:00000000e638567f order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0
    [   84.600330] flags: 0x200000000010200(slab|head|node=0|zone=2)
    [   84.600517] raw: 0200000000010200 ffff888100043180 dead000000000122 0000000000000000
    [   84.600764] raw: 0000000000000000 0000000080020002 00000001ffffffff 0000000000000000
    [   84.601009] page dumped because: kasan: bad access detected
    [   84.601187]
    [   84.601241] Memory state around the buggy address:
    [   84.601396]  ffff88810f676800: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.601620]  ffff88810f676880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.601845] >ffff88810f676900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.602069]                                               ^
    [   84.602243]  ffff88810f676980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.602468]  ffff88810f676a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.602693] ==================================================================
    [   84.602924] Disabling lock debugging due to kernel taint
    
    Fixes: 3015f3d2a3cd ("pkt_sched: enable QFQ to support TSO/GSO")
    Reported-by: Gwangun Jung <exsociety@gmail.com>
    Signed-off-by: Gwangun Jung <exsociety@gmail.com>
    Acked-by: Jamal Hadi Salim<jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe0d832ea0e6f5edcec20256f6ba57b5b9d6b758
Author: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
Date:   Thu Apr 6 20:18:01 2023 +0300

    regulator: fan53555: Fix wrong TCS_SLEW_MASK
    
    [ Upstream commit c5d5b55b3c1a314137a251efc1001dfd435c6242 ]
    
    The support for TCS4525 regulator has been introduced with a wrong
    ramp-rate mask, which has been defined as a logical expression instead
    of a bit shift operation.
    
    For clarity, fix it using GENMASK() macro.
    
    Fixes: 914df8faa7d6 ("regulator: fan53555: Add TCS4525 DCDC support")
    Signed-off-by: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
    Link: https://lore.kernel.org/r/20230406171806.948290-4-cristian.ciocaltea@collabora.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 976f8482e4596d7f992c823ce9a132565e499460
Author: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
Date:   Thu Apr 6 20:18:00 2023 +0300

    regulator: fan53555: Explicitly include bits header
    
    [ Upstream commit 4fb9a5060f73627303bc531ceaab1b19d0a24aef ]
    
    Since commit f2a9eb975ab2 ("regulator: fan53555: Add support for
    FAN53526") the driver makes use of the BIT() macro, but relies on the
    bits header being implicitly included.
    
    Explicitly pull the header in to avoid potential build failures in some
    configurations.
    
    While here, reorder include directives alphabetically.
    
    Fixes: f2a9eb975ab2 ("regulator: fan53555: Add support for FAN53526")
    Signed-off-by: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
    Link: https://lore.kernel.org/r/20230406171806.948290-3-cristian.ciocaltea@collabora.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb9b96c154a10dd4802b82281c9246eabe081026
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 3 13:54:37 2023 +0200

    netfilter: br_netfilter: fix recent physdev match breakage
    
    [ Upstream commit 94623f579ce338b5fa61b5acaa5beb8aa657fb9e ]
    
    Recent attempt to ensure PREROUTING hook is executed again when a
    decrypted ipsec packet received on a bridge passes through the network
    stack a second time broke the physdev match in INPUT hook.
    
    We can't discard the nf_bridge info strct from sabotage_in hook, as
    this is needed by the physdev match.
    
    Keep the struct around and handle this with another conditional instead.
    
    Fixes: 2b272bb558f1 ("netfilter: br_netfilter: disable sabotage_in hook after first suppression")
    Reported-and-tested-by: Farid BENAMROUCHE <fariouche@yahoo.fr>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit beb1c8576c236aad574338dd6832d1e5060cf2d1
Author: Peng Fan <peng.fan@nxp.com>
Date:   Mon Mar 27 18:03:21 2023 +0800

    arm64: dts: imx8mm-evk: correct pmic clock source
    
    [ Upstream commit 85af7ffd24da38e416a14bd6bf207154d94faa83 ]
    
    The osc_32k supports #clock-cells as 0, using an id is wrong, drop it.
    
    Fixes: a6a355ede574 ("arm64: dts: imx8mm-evk: Add 32.768 kHz clock to PMIC")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Marco Felsch <m.felsch@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 863473055d1d32c0df2981fe6ad981f1e326e93b
Author: Marc Gonzalez <mgonzalez@freebox.fr>
Date:   Mon Mar 27 14:09:30 2023 +0200

    arm64: dts: meson-g12-common: specify full DMC range
    
    [ Upstream commit aec4353114a408b3a831a22ba34942d05943e462 ]
    
    According to S905X2 Datasheet - Revision 07:
    DRAM Memory Controller (DMC) register area spans ff638000-ff63a000.
    
    According to DeviceTree Specification - Release v0.4-rc1:
    simple-bus nodes do not require reg property.
    
    Fixes: 1499218c80c99a ("arm64: dts: move common G12A & G12B modes to meson-g12-common.dtsi")
    Signed-off-by: Marc Gonzalez <mgonzalez@freebox.fr>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20230327120932.2158389-2-mgonzalez@freebox.fr
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd6bd054a92c58b13f43065ce7af5a222911bc28
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Mar 24 05:16:50 2023 +0300

    arm64: dts: qcom: ipq8074-hk01: enable QMP device, not the PHY node
    
    [ Upstream commit 72630ba422b70ea0874fc90d526353cf71c72488 ]
    
    Correct PCIe PHY enablement to refer the QMP device nodes rather than
    PHY device nodes. QMP nodes have 'status = "disabled"' property in the
    ipq8074.dtsi, while PHY nodes do not correspond to the actual device and
    do not have the status property.
    
    Fixes: e8a7fdc505bb ("arm64: dts: ipq8074: qcom: Re-arrange dts nodes based on address")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230324021651.1799969-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd129e4c9e34f0b68fe945adc1be0a695eb683e4
Author: Jianqun Xu <jay.xu@rock-chips.com>
Date:   Wed Feb 8 17:14:11 2023 +0800

    ARM: dts: rockchip: fix a typo error for rk3288 spdif node
    
    [ Upstream commit 02c84f91adb9a64b75ec97d772675c02a3e65ed7 ]
    
    Fix the address in the spdif node name.
    
    Fixes: 874e568e500a ("ARM: dts: rockchip: Add SPDIF transceiver for RK3288")
    Signed-off-by: Jianqun Xu <jay.xu@rock-chips.com>
    Reviewed-by: Sjoerd Simons <sjoerd@collabora.com>
    Link: https://lore.kernel.org/r/20230208091411.1603142-1-jay.xu@rock-chips.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7992b6c7f0e2b0a87dd8e3f488250557b077c20
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jun 5 09:07:04 2023 +0200

    Linux 5.10.182
    
    Link: https://lore.kernel.org/r/20230601131933.727832920@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 468bebc426ba19f285ea4d9d9135c7584d123e20
Author: Paul Blakey <paulb@nvidia.com>
Date:   Wed Mar 22 09:35:32 2023 +0200

    netfilter: ctnetlink: Support offloaded conntrack entry deletion
    
    commit 9b7c68b3911aef84afa4cbfc31bce20f10570d51 upstream.
    
    Currently, offloaded conntrack entries (flows) can only be deleted
    after they are removed from offload, which is either by timeout,
    tcp state change or tc ct rule deletion. This can cause issues for
    users wishing to manually delete or flush existing entries.
    
    Support deletion of offloaded conntrack entries.
    
    Example usage:
     # Delete all offloaded (and non offloaded) conntrack entries
     # whose source address is 1.2.3.4
     $ conntrack -D -s 1.2.3.4
     # Delete all entries
     $ conntrack -F
    
    Signed-off-by: Paul Blakey <paulb@nvidia.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Cc: Demi Marie Obenour <demi@invisiblethingslab.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18c14d3028c001a0be15685a550dbabf67b6382d
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon May 22 14:08:20 2023 +0200

    ipv{4,6}/raw: fix output xfrm lookup wrt protocol
    
    commit 3632679d9e4f879f49949bb5b050e0de553e4739 upstream.
    
    With a raw socket bound to IPPROTO_RAW (ie with hdrincl enabled), the
    protocol field of the flow structure, build by raw_sendmsg() /
    rawv6_sendmsg()),  is set to IPPROTO_RAW. This breaks the ipsec policy
    lookup when some policies are defined with a protocol in the selector.
    
    For ipv6, the sin6_port field from 'struct sockaddr_in6' could be used to
    specify the protocol. Just accept all values for IPPROTO_RAW socket.
    
    For ipv4, the sin_port field of 'struct sockaddr_in' could not be used
    without breaking backward compatibility (the value of this field was never
    checked). Let's add a new kind of control message, so that the userland
    could specify which protocol is used.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    CC: stable@vger.kernel.org
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Link: https://lore.kernel.org/r/20230522120820.1319391-1-nicolas.dichtel@6wind.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2218752325a98861dfb10f59a9b0270d6d4abe21
Author: Carlos Llamas <cmllamas@google.com>
Date:   Fri May 5 20:30:20 2023 +0000

    binder: fix UAF caused by faulty buffer cleanup
    
    commit bdc1c5fac982845a58d28690cdb56db8c88a530d upstream.
    
    In binder_transaction_buffer_release() the 'failed_at' offset indicates
    the number of objects to clean up. However, this function was changed by
    commit 44d8047f1d87 ("binder: use standard functions to allocate fds"),
    to release all the objects in the buffer when 'failed_at' is zero.
    
    This introduced an issue when a transaction buffer is released without
    any objects having been processed so far. In this case, 'failed_at' is
    indeed zero yet it is misinterpreted as releasing the entire buffer.
    
    This leads to use-after-free errors where nodes are incorrectly freed
    and subsequently accessed. Such is the case in the following KASAN
    report:
    
      ==================================================================
      BUG: KASAN: slab-use-after-free in binder_thread_read+0xc40/0x1f30
      Read of size 8 at addr ffff4faf037cfc58 by task poc/474
    
      CPU: 6 PID: 474 Comm: poc Not tainted 6.3.0-12570-g7df047b3f0aa #5
      Hardware name: linux,dummy-virt (DT)
      Call trace:
       dump_backtrace+0x94/0xec
       show_stack+0x18/0x24
       dump_stack_lvl+0x48/0x60
       print_report+0xf8/0x5b8
       kasan_report+0xb8/0xfc
       __asan_load8+0x9c/0xb8
       binder_thread_read+0xc40/0x1f30
       binder_ioctl+0xd9c/0x1768
       __arm64_sys_ioctl+0xd4/0x118
       invoke_syscall+0x60/0x188
      [...]
    
      Allocated by task 474:
       kasan_save_stack+0x3c/0x64
       kasan_set_track+0x2c/0x40
       kasan_save_alloc_info+0x24/0x34
       __kasan_kmalloc+0xb8/0xbc
       kmalloc_trace+0x48/0x5c
       binder_new_node+0x3c/0x3a4
       binder_transaction+0x2b58/0x36f0
       binder_thread_write+0x8e0/0x1b78
       binder_ioctl+0x14a0/0x1768
       __arm64_sys_ioctl+0xd4/0x118
       invoke_syscall+0x60/0x188
      [...]
    
      Freed by task 475:
       kasan_save_stack+0x3c/0x64
       kasan_set_track+0x2c/0x40
       kasan_save_free_info+0x38/0x5c
       __kasan_slab_free+0xe8/0x154
       __kmem_cache_free+0x128/0x2bc
       kfree+0x58/0x70
       binder_dec_node_tmpref+0x178/0x1fc
       binder_transaction_buffer_release+0x430/0x628
       binder_transaction+0x1954/0x36f0
       binder_thread_write+0x8e0/0x1b78
       binder_ioctl+0x14a0/0x1768
       __arm64_sys_ioctl+0xd4/0x118
       invoke_syscall+0x60/0x188
      [...]
      ==================================================================
    
    In order to avoid these issues, let's always calculate the intended
    'failed_at' offset beforehand. This is renamed and wrapped in a helper
    function to make it clear and convenient.
    
    Fixes: 32e9f56a96d8 ("binder: don't detect sender/target during buffer cleanup")
    Reported-by: Zi Fan Tan <zifantan@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Acked-by: Todd Kjos <tkjos@google.com>
    Link: https://lore.kernel.org/r/20230505203020.4101154-1-cmllamas@google.com
    [cmllamas: resolve trivial conflict due to missing commit 9864bb4801331]
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4d2e6c3054b974125bdae74ee57017964232c4a
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Sun Apr 16 16:02:51 2023 +0800

    bluetooth: Add cmd validity checks at the start of hci_sock_ioctl()
    
    commit 000c2fa2c144c499c881a101819cf1936a1f7cf2 upstream.
    
    Previously, channel open messages were always sent to monitors on the first
    ioctl() call for unbound HCI sockets, even if the command and arguments
    were completely invalid. This can leave an exploitable hole with the abuse
    of invalid ioctl calls.
    
    This commit hardens the ioctl processing logic by first checking if the
    command is valid, and immediately returning with an ENOIOCTLCMD error code
    if it is not. This ensures that ioctl calls with invalid commands are free
    of side effects, and increases the difficulty of further exploitation by
    forcing exploitation to find a way to pass a valid command first.
    
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Co-developed-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Dragos-Marian Panait <dragos.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a0712d9fe46678c65e7844f1b1d4ef9a0bb36de
Author: David Epping <david.epping@missinglinkelectronics.com>
Date:   Tue May 23 17:31:08 2023 +0200

    net: phy: mscc: enable VSC8501/2 RGMII RX clock
    
    [ Upstream commit 71460c9ec5c743e9ffffca3c874d66267c36345e ]
    
    By default the VSC8501 and VSC8502 RGMII/GMII/MII RX_CLK output is
    disabled. To allow packet forwarding towards the MAC it needs to be
    enabled.
    
    For other PHYs supported by this driver the clock output is enabled
    by default.
    
    Fixes: d3169863310d ("net: phy: mscc: add support for VSC8502")
    Signed-off-by: David Epping <david.epping@missinglinkelectronics.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b556990235c33460a9d072b93f8dad3822ce4249
Author: Shay Drory <shayd@nvidia.com>
Date:   Tue May 2 13:36:42 2023 +0300

    net/mlx5: Devcom, serialize devcom registration
    
    [ Upstream commit 1f893f57a3bf9fe1f4bcb25b55aea7f7f9712fe7 ]
    
    From one hand, mlx5 driver is allowing to probe PFs in parallel.
    From the other hand, devcom, which is a share resource between PFs, is
    registered without any lock. This might resulted in memory problems.
    
    Hence, use the global mlx5_dev_list_lock in order to serialize devcom
    registration.
    
    Fixes: fadd59fc50d0 ("net/mlx5: Introduce inter-device communication mechanism")
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57dc3c124e7bf2b937086e4b57c4a834b02c0457
Author: Mark Bloch <mbloch@nvidia.com>
Date:   Sun Feb 27 12:23:34 2022 +0000

    net/mlx5: devcom only supports 2 ports
    
    [ Upstream commit 8a6e75e5f57e9ac82268d9bfca3403598d9d0292 ]
    
    Devcom API is intended to be used between 2 devices only add this
    implied assumption into the code and check when it's no true.
    
    Signed-off-by: Mark Bloch <mbloch@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Stable-dep-of: 1f893f57a3bf ("net/mlx5: Devcom, serialize devcom registration")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 860ad704e4506a4716631a46e93c2ed4a6a0e23c
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Fri May 12 10:19:34 2023 +0200

    regulator: pca9450: Fix BUCK2 enable_mask
    
    [ Upstream commit d67dada3e2524514b09496b9ee1df22d4507a280 ]
    
    This fixes a copy & paste error.
    No functional change intended, BUCK1_ENMODE_MASK equals BUCK2_ENMODE_MASK.
    
    Fixes: 0935ff5f1f0a ("regulator: pca9450: add pca9450 pmic driver")
    Originally-from: Robin Gong <yibin.gong@nxp.com
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com
    Reviewed-by: Frieder Schrempf <frieder.schrempf@kontron.de
    Link: https://lore.kernel.org/r/20230512081935.2396180-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Mark Brown <broonie@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3a9c4081db956dd383137e55a008f82e1d8bb87
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed May 26 20:24:08 2021 +0800

    regulator: pca9450: Convert to use regulator_set_ramp_delay_regmap
    
    [ Upstream commit 4c4fce171c4ca08cd98be7db350e6950630b046a ]
    
    Use regulator_set_ramp_delay_regmap instead of open-coded.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Link: https://lore.kernel.org/r/20210526122408.78156-1-axel.lin@ingics.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: d67dada3e252 ("regulator: pca9450: Fix BUCK2 enable_mask")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12cb97ed85fb8bfc3ef88b66d80b09950d49af91
Author: Matti Vaittinen <mazziesaccount@gmail.com>
Date:   Mon Mar 29 15:59:04 2021 +0300

    regulator: Add regmap helper for ramp-delay setting
    
    [ Upstream commit fb8fee9efdcf084d9e31ba14cc4734d97e5dd972 ]
    
    Quite a few regulator ICs do support setting ramp-delay by writing a value
    matching the delay to a ramp-delay register.
    
    Provide a simple helper for table-based delay setting.
    
    Signed-off-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
    Link: https://lore.kernel.org/r/f101f1db564cf32cb58719c77af0b00d7236bb89.1617020713.git.matti.vaittinen@fi.rohmeurope.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Stable-dep-of: d67dada3e252 ("regulator: pca9450: Fix BUCK2 enable_mask")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b557220d31409eed7bcc5d7f70c3fa5fcd390435
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:41 2023 +0200

    power: supply: bq24190: Call power_supply_changed() after updating input current
    
    [ Upstream commit 77c2a3097d7029441e8a91aa0de1b4e5464593da ]
    
    The bq24192 model relies on external charger-type detection and once
    that is done the bq24190_charger code will update the input current.
    
    In this case, when the initial power_supply_changed() call is made
    from the interrupt handler, the input settings are 5V/0.5A which
    on many devices is not enough power to charge (while the device is on).
    
    On many devices the fuel-gauge relies in its external_power_changed
    callback to timely signal userspace about charging <-> discharging
    status changes. Add a power_supply_changed() call after updating
    the input current. This allows the fuel-gauge driver to timely recheck
    if the battery is charging after the new input current has been applied
    and then it can immediately notify userspace about this.
    
    Fixes: 18f8e6f695ac ("power: supply: bq24190_charger: Get input_current_limit from our supplier")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 224f7bbf577b21d1f796de825037ae59ef0e0e42
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Feb 1 14:06:47 2022 +0100

    power: supply: core: Refactor power_supply_set_input_current_limit_from_supplier()
    
    [ Upstream commit 2220af8ca61ae67de4ec3deec1c6395a2f65b9fd ]
    
    Some (USB) charger ICs have variants with USB D+ and D- pins to do their
    own builtin charger-type detection, like e.g. the bq24190 and bq25890 and
    also variants which lack this functionality, e.g. the bq24192 and bq25892.
    
    In case the charger-type; and thus the input-current-limit detection is
    done outside the charger IC then we need some way to communicate this to
    the charger IC. In the past extcon was used for this, but if the external
    detection does e.g. full USB PD negotiation then the extcon cable-types do
    not convey enough information.
    
    For these setups it was decided to model the external charging "brick"
    and the parameters negotiated with it as a power_supply class-device
    itself; and power_supply_set_input_current_limit_from_supplier() was
    introduced to allow drivers to get the input-current-limit this way.
    
    But in some cases psy drivers may want to know other properties, e.g. the
    bq25892 can do "quick-charge" negotiation by pulsing its current draw,
    but this should only be done if the usb_type psy-property of its supplier
    is set to DCP (and device-properties indicate the board allows higher
    voltages).
    
    Instead of adding extra helper functions for each property which
    a psy-driver wants to query from its supplier, refactor
    power_supply_set_input_current_limit_from_supplier() into a
    more generic power_supply_get_property_from_supplier() function.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Stable-dep-of: 77c2a3097d70 ("power: supply: bq24190: Call power_supply_changed() after updating input current")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 277b489ad0b70c2ffa6b6805e7f20b54399f8d50
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:38 2023 +0200

    power: supply: bq27xxx: After charger plug in/out wait 0.5s for things to stabilize
    
    [ Upstream commit 59a99cd462fbdf71f4e845e09f37783035088b4f ]
    
    bq27xxx_external_power_changed() gets called when the charger is plugged
    in or out. Rather then immediately scheduling an update wait 0.5 seconds
    for things to stabilize, so that e.g. the (dis)charge current is stable
    when bq27xxx_battery_update() runs.
    
    Fixes: 740b755a3b34 ("bq27x00: Poll battery state")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0949c572d42df8a1b78c5583ed4345e0ff06e06f
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:37 2023 +0200

    power: supply: bq27xxx: Ensure power_supply_changed() is called on current sign changes
    
    [ Upstream commit 939a116142012926e25de0ea6b7e2f8d86a5f1b6 ]
    
    On gauges where the current register is signed, there is no charging
    flag in the flags register. So only checking flags will not result
    in power_supply_changed() getting called when e.g. a charger is plugged
    in and the current sign changes from negative (discharging) to
    positive (charging).
    
    This causes userspace's notion of the status to lag until userspace
    does a poll.
    
    And when a power_supply_leds.c LED trigger is used to indicate charging
    status with a LED, this LED will lag until the capacity percentage
    changes, which may take many minutes (because the LED trigger only is
    updated on power_supply_changed() calls).
    
    Fix this by calling bq27xxx_battery_current_and_status() on gauges with
    a signed current register and checking if the status has changed.
    
    Fixes: 297a533b3e62 ("bq27x00: Cache battery registers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ed541254f4bdd5aca6ce8993587edecd48086cd
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:36 2023 +0200

    power: supply: bq27xxx: Move bq27xxx_battery_update() down
    
    [ Upstream commit ff4c4a2a4437a6d03787c7aafb2617f20c3ef45f ]
    
    Move the bq27xxx_battery_update() functions to below
    the bq27xxx_battery_current_and_status() function.
    
    This is just moving a block of text, no functional changes.
    
    This is a preparation patch for making bq27xxx_battery_update() check
    the status and have it call power_supply_changed() on status changes.
    
    Fixes: 297a533b3e62 ("bq27x00: Cache battery registers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed78797a264c9f16b2f836b23abec44498275d29
Author: Sicelo A. Mhlongo <absicsz@gmail.com>
Date:   Wed Apr 20 14:30:59 2022 +0200

    power: supply: bq27xxx: expose battery data when CI=1
    
    [ Upstream commit 68fdbe090c362e8be23890a7333d156e18c27781 ]
    
    When the Capacity Inaccurate flag is set, the chip still provides data
    about the battery, albeit inaccurate. Instead of discarding capacity
    values for CI=1, expose the stale data and use the
    POWER_SUPPLY_HEALTH_CALIBRATION_REQUIRED property to indicate that the
    values should be used with care.
    
    Reviewed-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Sicelo A. Mhlongo <absicsz@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Stable-dep-of: ff4c4a2a4437 ("power: supply: bq27xxx: Move bq27xxx_battery_update() down")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ff807d68b5d9db1071986e1043d9a63035053fe
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Apr 15 20:23:35 2023 +0200

    power: supply: bq27xxx: Add cache parameter to bq27xxx_battery_current_and_status()
    
    [ Upstream commit 35092c5819f8c5acc7bafe3fdbb13d6307c4f5e1 ]
    
    Add a cache parameter to bq27xxx_battery_current_and_status() so that
    it can optionally use cached flags instead of re-reading them itself.
    
    This is a preparation patch for making bq27xxx_battery_update() check
    the status and have it call power_supply_changed() on status changes.
    
    Fixes: 297a533b3e62 ("bq27x00: Cache battery registers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 432f98c559f20950872a666b1eaba1acc49a833b
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Wed Mar 3 10:54:20 2021 +0100

    power: supply: bq27xxx: make status more robust
    
    [ Upstream commit c3a6d6a1dfc8a9bf12d79a0b1a30cb24c92a2ddf ]
    
    There are multiple issues in bq27xxx_battery_status():
    
    - On BQ28Q610 is was observed that the "full" flag may be set even while
      the battery is charging or discharging. With the current logic to make
      "full" override everything else, it look a very long time (>20min) for
      the status to change from "full" to "discharging" after unplugging the
      supply on a device with low power consumption
    - The POWER_SUPPLY_STATUS_NOT_CHARGING check depends on
      power_supply_am_i_supplied(), which will not work when the supply
      doesn't exist as a separate device known to Linux
    
    We can solve both issues by deriving the status from the current instead
    of the flags field. The flags are now only used to distinguish "full"
    from "not charging", and to determine the sign of the current on
    BQ27XXX_O_ZERO devices.
    
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Stable-dep-of: 35092c5819f8 ("power: supply: bq27xxx: Add cache parameter to bq27xxx_battery_current_and_status()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 659094e4057ab1b8d3b162b721ea2bd3fe64e30c
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Wed Mar 3 10:54:18 2021 +0100

    power: supply: bq27xxx: fix sign of current_now for newer ICs
    
    [ Upstream commit b67fdcb7099e9c640bad625c4dd6399debb3376a ]
    
    Commit cd060b4d0868 ("power: supply: bq27xxx: fix polarity of current_now")
    changed the sign of current_now for all bq27xxx variants, but on BQ28Z610
    I'm now seeing negated values *with* that patch.
    
    The GTA04/Openmoko device that was used for testing uses a BQ27000 or
    BQ27010 IC, so I assume only the BQ27XXX_O_ZERO code path was incorrect.
    Revert the behaviour for newer ICs.
    
    Fixes: cd060b4d0868 "power: supply: bq27xxx: fix polarity of current_now"
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Stable-dep-of: 35092c5819f8 ("power: supply: bq27xxx: Add cache parameter to bq27xxx_battery_current_and_status()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14e1a958d9884e15101b42cbdde8e644a04ed7a3
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Dec 4 15:49:50 2020 +0100

    power: supply: bq27xxx: fix polarity of current_now
    
    [ Upstream commit cd060b4d0868c806c2738a5e64e8ab9bd0fbec07 ]
    
    current_now has to be negative during discharging and positive during
    charging, the behavior seen is the other way round.
    
    Tested on GTA04 with Openmoko battery.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Stable-dep-of: 35092c5819f8 ("power: supply: bq27xxx: Add cache parameter to bq27xxx_battery_current_and_status()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18c9cf46333797d5d71f0fd51611b7af8de99048
Author: Tony Luck <tony.luck@intel.com>
Date:   Fri Nov 19 09:08:32 2021 -0800

    x86/cpu: Drop spurious underscore from RAPTOR_LAKE #define
    
    [ Upstream commit 7d697f0d5737768fa1039b8953b67c08d8d406d1 ]
    
    Convention for all the other "lake" CPUs is all one word.
    
    So s/RAPTOR_LAKE/RAPTORLAKE/
    
    Fixes: fbdb5e8f2926 ("x86/cpu: Add Raptor Lake to Intel family")
    Reported-by: Rui Zhang <rui.zhang@intel.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20211119170832.1034220-1-tony.luck@intel.com
    Stable-dep-of: ce0b15d11ad8 ("x86/mm: Avoid incomplete Global INVLPG flushes")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a8980cb2a7cb48371af67df4e6d70352b991ab0
Author: Tony Luck <tony.luck@intel.com>
Date:   Fri Nov 12 10:28:35 2021 -0800

    x86/cpu: Add Raptor Lake to Intel family
    
    [ Upstream commit fbdb5e8f2926ae9636c9fa6f42c7426132ddeeb2 ]
    
    Add model ID for Raptor Lake.
    
    [ dhansen: These get added as soon as possible so that folks doing
      development can leverage them. ]
    
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20211112182835.924977-1-tony.luck@intel.com
    Stable-dep-of: ce0b15d11ad8 ("x86/mm: Avoid incomplete Global INVLPG flushes")
    Signed-off-by: Sasha Levin <sashal@kernel.org>
